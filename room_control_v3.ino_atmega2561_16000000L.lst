
/tmp/arduino_build_41303/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 99 32 	jmp	0x6532	; 0x6532 <__ctors_end>
       4:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
       8:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
       c:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      10:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      14:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      18:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      1c:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      20:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      24:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      28:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      2c:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      30:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      34:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      38:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      3c:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      40:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      44:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      48:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      4c:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      50:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      54:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      58:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      5c:	0c 94 89 d6 	jmp	0x1ad12	; 0x1ad12 <__vector_23>
      60:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      64:	0c 94 68 d9 	jmp	0x1b2d0	; 0x1b2d0 <__vector_25>
      68:	0c 94 9e d9 	jmp	0x1b33c	; 0x1b33c <__vector_26>
      6c:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      70:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      74:	0c 94 49 d6 	jmp	0x1ac92	; 0x1ac92 <__vector_29>
      78:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      7c:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      80:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      84:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      88:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      8c:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      90:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      94:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      98:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      9c:	0c 94 93 d0 	jmp	0x1a126	; 0x1a126 <__vector_39>
      a0:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      a4:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      a8:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      ac:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      b0:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      b4:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      b8:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      bc:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      c0:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      c4:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>
      c8:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 94 d8 	jmp	0x1b128	; 0x1b128 <HardwareSerial::peek()>
      d0:	0c 94 01 d9 	jmp	0x1b202	; 0x1b202 <HardwareSerial::flush()>
      d4:	0c 94 76 3b 	jmp	0x76ec	; 0x76ec <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>
      d8:	0c 94 21 b7 	jmp	0x16e42	; 0x16e42 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>
      dc:	0c 94 5c b8 	jmp	0x170b8	; 0x170b8 <EthernetUDP::begin(unsigned int)>
      e0:	0c 94 9e b3 	jmp	0x1673c	; 0x1673c <EthernetClient::write(unsigned char)>
      e4:	0c 94 98 69 	jmp	0xd330	; 0xd330 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
      e8:	0c 94 1a 51 	jmp	0xa234	; 0xa234 <helper_set_menu_time_offset(unsigned int, float, unsigned char)>
      ec:	0c 94 d2 d7 	jmp	0x1afa4	; 0x1afa4 <turnOffPWM+0x88>
      f0:	0c 94 b2 d7 	jmp	0x1af64	; 0x1af64 <turnOffPWM+0x48>
      f4:	0c 94 d2 ae 	jmp	0x15da4	; 0x15da4 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x122>
      f8:	0c 94 8d 3a 	jmp	0x751a	; 0x751a <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>
      fc:	0c 94 88 79 	jmp	0xf310	; 0xf310 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>
     100:	0c 94 a1 41 	jmp	0x8342	; 0x8342 <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     104:	0c 94 b4 b3 	jmp	0x16768	; 0x16768 <EthernetClient::operator bool()>
     108:	0c 94 e6 d7 	jmp	0x1afcc	; 0x1afcc <turnOffPWM+0xb0>
     10c:	0c 94 12 34 	jmp	0x6824	; 0x6824 <display_enable_show(unsigned int, unsigned int, unsigned char)>
     110:	0c 94 49 b7 	jmp	0x16e92	; 0x16e92 <EthernetUDP::available()>
     114:	0c 94 d7 34 	jmp	0x69ae	; 0x69ae <preload_display_setting_brightness(unsigned int, unsigned int, unsigned char)>
     118:	0c 94 10 47 	jmp	0x8e20	; 0x8e20 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>
     11c:	0c 94 7d ae 	jmp	0x15cfa	; 0x15cfa <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x78>
     120:	0c 94 ea d7 	jmp	0x1afd4	; 0x1afd4 <turnOffPWM+0xb8>
     124:	0c 94 ab 37 	jmp	0x6f56	; 0x6f56 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>
     128:	0c 94 c7 b3 	jmp	0x1678e	; 0x1678e <EthernetClient::connect(char const*, unsigned int)>
     12c:	0c 94 83 ae 	jmp	0x15d06	; 0x15d06 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x84>
     130:	0c 94 47 36 	jmp	0x6c8e	; 0x6c8e <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     134:	0c 94 90 ae 	jmp	0x15d20	; 0x15d20 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x9e>
     138:	0c 94 4c 6f 	jmp	0xde98	; 0xde98 <mqtt_callback(char*, unsigned char*, unsigned int)>
     13c:	0c 94 a5 45 	jmp	0x8b4a	; 0x8b4a <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>
     140:	0c 94 6e 37 	jmp	0x6edc	; 0x6edc <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     144:	0c 94 8b ce 	jmp	0x19d16	; 0x19d16 <TwoWire::write(unsigned char)>
     148:	0c 94 63 3a 	jmp	0x74c6	; 0x74c6 <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     14c:	0c 94 b6 d7 	jmp	0x1af6c	; 0x1af6c <turnOffPWM+0x50>
     150:	0c 94 24 c8 	jmp	0x19048	; 0x19048 <_GLOBAL__sub_I__ZN12PubSubClientC2Ev>
     154:	0c 94 c5 d8 	jmp	0x1b18a	; 0x1b18a <serialEventRun()>
     158:	0c 94 b6 d8 	jmp	0x1b16c	; 0x1b16c <HardwareSerial::availableForWrite()>
     15c:	0c 94 ba d7 	jmp	0x1af74	; 0x1af74 <turnOffPWM+0x58>
     160:	0c 94 5b 34 	jmp	0x68b6	; 0x68b6 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>
     164:	0c 94 a2 d8 	jmp	0x1b144	; 0x1b144 <HardwareSerial::read()>
     168:	0c 94 2e 96 	jmp	0x12c5c	; 0x12c5c <_GLOBAL__sub_I_PID_Input>
     16c:	0c 94 0e 45 	jmp	0x8a1c	; 0x8a1c <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     170:	0c 94 d2 37 	jmp	0x6fa4	; 0x6fa4 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)>
     174:	0c 94 91 b3 	jmp	0x16722	; 0x16722 <Print::availableForWrite()>
     178:	0c 94 4c b4 	jmp	0x16898	; 0x16898 <EthernetClient::read()>
     17c:	0c 94 b5 3b 	jmp	0x776a	; 0x776a <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>
     180:	0c 94 a4 34 	jmp	0x6948	; 0x6948 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>
     184:	0c 94 92 36 	jmp	0x6d24	; 0x6d24 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>
     188:	0c 94 3c 48 	jmp	0x9078	; 0x9078 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     18c:	0c 94 55 36 	jmp	0x6caa	; 0x6caa <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>
     190:	0c 94 81 3d 	jmp	0x7b02	; 0x7b02 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     194:	0c 94 0f b9 	jmp	0x1721e	; 0x1721e <_GLOBAL__sub_I__ZN7TwitterC2EPKc>
     198:	0c 94 2e b7 	jmp	0x16e5c	; 0x16e5c <EthernetUDP::read(char*, unsigned int)>
     19c:	0c 94 8d b4 	jmp	0x1691a	; 0x1691a <EthernetClient::flush()>
     1a0:	0c 94 be 34 	jmp	0x697c	; 0x697c <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
     1a4:	0c 94 db 50 	jmp	0xa1b6	; 0xa1b6 <button_click_set_time_offset(unsigned int, unsigned int, unsigned char)>
     1a8:	0c 94 67 b5 	jmp	0x16ace	; 0x16ace <EthernetClient::connected()>
     1ac:	0c 94 7f 3c 	jmp	0x78fe	; 0x78fe <helper_set_time_manualy(unsigned int, unsigned int, unsigned char)>
     1b0:	0c 94 66 36 	jmp	0x6ccc	; 0x6ccc <menu_tds_save_offset(unsigned int, float, unsigned char)>
     1b4:	0c 94 38 3b 	jmp	0x7670	; 0x7670 <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>
     1b8:	0c 94 79 45 	jmp	0x8af2	; 0x8af2 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     1bc:	0c 94 0c 35 	jmp	0x6a18	; 0x6a18 <button_set_brightness_auto_shutdown_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>
     1c0:	0c 94 0d 3d 	jmp	0x7a1a	; 0x7a1a <click_keyboard_number(unsigned int, unsigned int, unsigned char)>
     1c4:	0c 94 25 b4 	jmp	0x1684a	; 0x1684a <EthernetClient::write(unsigned char const*, unsigned int)>
     1c8:	0c 94 10 35 	jmp	0x6a20	; 0x6a20 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     1cc:	0c 94 d2 d9 	jmp	0x1b3a4	; 0x1b3a4 <_GLOBAL__sub_I___vector_25>
     1d0:	0c 94 94 b3 	jmp	0x16728	; 0x16728 <EthernetClient::operator!=(EthernetClient const&)>
     1d4:	0c 94 54 ce 	jmp	0x19ca8	; 0x19ca8 <TwoWire::flush()>
     1d8:	0c 94 7c b3 	jmp	0x166f8	; 0x166f8 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>
     1dc:	0c 94 c4 d7 	jmp	0x1af88	; 0x1af88 <turnOffPWM+0x6c>
     1e0:	0c 94 26 a3 	jmp	0x1464c	; 0x1464c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     1e4:	0c 94 d1 9a 	jmp	0x135a2	; 0x135a2 <LCDWIKI_KBV::Get_Width() const>
     1e8:	0c 94 9c 47 	jmp	0x8f38	; 0x8f38 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     1ec:	0c 94 e0 d7 	jmp	0x1afc0	; 0x1afc0 <turnOffPWM+0xa4>
     1f0:	0c 94 04 b0 	jmp	0x16008	; 0x16008 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>
     1f4:	0c 94 35 b7 	jmp	0x16e6a	; 0x16e6a <EthernetUDP::remoteIP()>
     1f8:	0c 94 cb 34 	jmp	0x6996	; 0x6996 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>
     1fc:	0c 94 1a 3c 	jmp	0x7834	; 0x7834 <button_time_set_date_manualy_onclick(unsigned int, unsigned int, unsigned char)>
     200:	0c 94 64 34 	jmp	0x68c8	; 0x68c8 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>
     204:	0c 94 74 46 	jmp	0x8ce8	; 0x8ce8 <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     208:	0c 94 66 b4 	jmp	0x168cc	; 0x168cc <EthernetClient::read(unsigned char*, unsigned int)>
     20c:	0c 94 af 34 	jmp	0x695e	; 0x695e <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     210:	0c 94 d9 9a 	jmp	0x135b2	; 0x135b2 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     214:	0c 94 2a 41 	jmp	0x8254	; 0x8254 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     218:	0c 94 27 b5 	jmp	0x16a4e	; 0x16a4e <EthernetClient::stop()>
     21c:	0c 94 62 50 	jmp	0xa0c4	; 0xa0c4 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>
     220:	0c 94 aa ae 	jmp	0x15d54	; 0x15d54 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xd2>
     224:	0c 94 55 ce 	jmp	0x19caa	; 0x19caa <TwoWire::onReceiveService(unsigned char*, int)>
     228:	0c 94 c0 d7 	jmp	0x1af80	; 0x1af80 <turnOffPWM+0x64>
     22c:	0c 94 6e 34 	jmp	0x68dc	; 0x68dc <a2d_complete(unsigned char, unsigned int)>
     230:	0c 94 48 34 	jmp	0x6890	; 0x6890 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>
     234:	0c 94 f3 b7 	jmp	0x16fe6	; 0x16fe6 <EthernetUDP::peek()>
     238:	0c 94 aa 8b 	jmp	0x11754	; 0x11754 <_GLOBAL__sub_I_mqtt_error>
     23c:	0c 94 6d 34 	jmp	0x68da	; 0x68da <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>
     240:	0c 94 d4 b7 	jmp	0x16fa8	; 0x16fa8 <EthernetUDP::read(unsigned char*, unsigned int)>
     244:	0c 94 eb 3a 	jmp	0x75d6	; 0x75d6 <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>
     248:	0c 94 ba ce 	jmp	0x19d74	; 0x19d74 <TwoWire::write(unsigned char const*, unsigned int)>
     24c:	0c 94 0f 37 	jmp	0x6e1e	; 0x6e1e <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     250:	0c 94 af 82 	jmp	0x1055e	; 0x1055e <button_set_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)>
     254:	0c 94 bb 8b 	jmp	0x11776	; 0x11776 <_GLOBAL__sub_I_scan_rf_net_enable>
     258:	0c 94 bd 37 	jmp	0x6f7a	; 0x6f7a <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>
     25c:	0c 94 96 db 	jmp	0x1b72c	; 0x1b72c <__cxa_pure_virtual>
     260:	0c 94 84 cf 	jmp	0x19f08	; 0x19f08 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>
     264:	0c 94 ea 37 	jmp	0x6fd4	; 0x6fd4 <helper_display_set_brightness(unsigned int, float, unsigned char)>
     268:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <serial_putc(char, __file*)>
     26c:	0c 94 21 35 	jmp	0x6a42	; 0x6a42 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     270:	0c 94 aa b7 	jmp	0x16f54	; 0x16f54 <EthernetUDP::read()>
     274:	0c 94 09 40 	jmp	0x8012	; 0x8012 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     278:	0c 94 68 3a 	jmp	0x74d0	; 0x74d0 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>
     27c:	0c 94 32 ce 	jmp	0x19c64	; 0x19c64 <TwoWire::read()>
     280:	0c 94 0b b8 	jmp	0x17016	; 0x17016 <EthernetUDP::parsePacket()>
     284:	0c 94 7f ce 	jmp	0x19cfe	; 0x19cfe <TwoWire::onRequestService()>
     288:	0c 94 04 3e 	jmp	0x7c08	; 0x7c08 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     28c:	0c 94 ca d7 	jmp	0x1af94	; 0x1af94 <turnOffPWM+0x78>
     290:	0c 94 c8 d9 	jmp	0x1b390	; 0x1b390 <Serial0_available()>
     294:	0c 94 a4 ae 	jmp	0x15d48	; 0x15d48 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xc6>
     298:	0c 94 6f 3a 	jmp	0x74de	; 0x74de <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>
     29c:	0c 94 24 3f 	jmp	0x7e48	; 0x7e48 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     2a0:	0c 94 46 3a 	jmp	0x748c	; 0x748c <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>
     2a4:	0c 94 32 3b 	jmp	0x7664	; 0x7664 <button_change_brightness_display_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>
     2a8:	0c 94 fc 33 	jmp	0x67f8	; 0x67f8 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     2ac:	0c 94 67 bd 	jmp	0x17ace	; 0x17ace <_GLOBAL__sub_I_w5500>
     2b0:	0c 94 59 b6 	jmp	0x16cb2	; 0x16cb2 <EthernetServer::write(unsigned char const*, unsigned int)>
     2b4:	0c 94 3c 3a 	jmp	0x7478	; 0x7478 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>
     2b8:	0c 94 17 3d 	jmp	0x7a2e	; 0x7a2e <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>
     2bc:	0c 94 75 b7 	jmp	0x16eea	; 0x16eea <EthernetUDP::stop()>
     2c0:	0c 94 90 49 	jmp	0x9320	; 0x9320 <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>
     2c4:	0c 94 fb 35 	jmp	0x6bf6	; 0x6bf6 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>
     2c8:	0c 94 5e ae 	jmp	0x15cbc	; 0x15cbc <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x3a>
     2cc:	0c 94 16 34 	jmp	0x682c	; 0x682c <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     2d0:	0c 94 63 b7 	jmp	0x16ec6	; 0x16ec6 <EthernetUDP::flush()>
     2d4:	0c 94 96 b5 	jmp	0x16b2c	; 0x16b2c <EthernetServer::write(unsigned char)>
     2d8:	0c 94 d8 d7 	jmp	0x1afb0	; 0x1afb0 <turnOffPWM+0x94>
     2dc:	0c 94 79 99 	jmp	0x132f2	; 0x132f2 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     2e0:	0c 94 e6 d5 	jmp	0x1abcc	; 0x1abcc <_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP>
     2e4:	0c 94 52 34 	jmp	0x68a4	; 0x68a4 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>
     2e8:	0c 94 88 d8 	jmp	0x1b110	; 0x1b110 <HardwareSerial::available()>
     2ec:	0c 94 dc d7 	jmp	0x1afb8	; 0x1afb8 <turnOffPWM+0x9c>
     2f0:	0c 94 4d b7 	jmp	0x16e9a	; 0x16e9a <EthernetUDP::write(unsigned char)>
     2f4:	0c 94 05 35 	jmp	0x6a0a	; 0x6a0a <display_enable_show_brightness_manual_mode(unsigned int, unsigned int, unsigned char)>
     2f8:	0c 94 c2 b4 	jmp	0x16984	; 0x16984 <EthernetClient::connect(IPAddress, unsigned int)>
     2fc:	0c 94 60 3c 	jmp	0x78c0	; 0x78c0 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>
     300:	0c 94 9c 40 	jmp	0x8138	; 0x8138 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     304:	0c 94 45 ce 	jmp	0x19c8a	; 0x19c8a <TwoWire::peek()>
     308:	0c 94 f1 d7 	jmp	0x1afe2	; 0x1afe2 <turnOffPWM+0xc6>
     30c:	0c 94 14 34 	jmp	0x6828	; 0x6828 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>
     310:	0c 94 ad 3a 	jmp	0x755a	; 0x755a <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>
     314:	0c 94 b6 46 	jmp	0x8d6c	; 0x8d6c <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>
     318:	0c 94 8a b7 	jmp	0x16f14	; 0x16f14 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     31c:	0c 94 ee d7 	jmp	0x1afdc	; 0x1afdc <turnOffPWM+0xc0>
     320:	0c 94 92 b7 	jmp	0x16f24	; 0x16f24 <EthernetUDP::endPacket()>
     324:	0c 94 9e ae 	jmp	0x15d3c	; 0x15d3c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xba>
     328:	0c 94 47 8b 	jmp	0x1168e	; 0x1168e <printf_via_mqtt(char, __file*)>
     32c:	0c 94 8c 43 	jmp	0x8718	; 0x8718 <display_element_show_network_detail(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     330:	0c 94 ac d7 	jmp	0x1af58	; 0x1af58 <turnOffPWM+0x3c>
     334:	0c 94 c0 45 	jmp	0x8b80	; 0x8b80 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
     338:	0c 94 41 b4 	jmp	0x16882	; 0x16882 <EthernetClient::available()>
     33c:	0c 94 94 34 	jmp	0x6928	; 0x6928 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>
     340:	0c 94 2c b7 	jmp	0x16e58	; 0x16e58 <UDP::beginMulticast(IPAddress, unsigned int)>
     344:	0c 94 6a b4 	jmp	0x168d4	; 0x168d4 <EthernetClient::peek()>
     348:	0c 94 dd 3b 	jmp	0x77ba	; 0x77ba <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)>
     34c:	0c 94 b1 34 	jmp	0x6962	; 0x6962 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     350:	0c 94 7f 36 	jmp	0x6cfe	; 0x6cfe <menu_tds_save_period(unsigned int, float, unsigned char)>
     354:	0c 94 c4 ae 	jmp	0x15d88	; 0x15d88 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x106>
     358:	0c 94 ac b5 	jmp	0x16b58	; 0x16b58 <EthernetServer::begin()>
     35c:	0c 94 2b 38 	jmp	0x7056	; 0x7056 <nullfce(unsigned int, unsigned int, unsigned char)>
     360:	0c 94 a6 b8 	jmp	0x1714c	; 0x1714c <EthernetUDP::beginPacket(char const*, unsigned int)>
     364:	0c 94 be ae 	jmp	0x15d7c	; 0x15d7c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xfa>
     368:	0c 94 6c da 	jmp	0x1b4d8	; 0x1b4d8 <Print::write(unsigned char const*, unsigned int)>
     36c:	0c 94 af 35 	jmp	0x6b5e	; 0x6b5e <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>
     370:	0c 94 bc b3 	jmp	0x16778	; 0x16778 <EthernetClient::operator==(EthernetClient const&)>
     374:	0c 94 10 34 	jmp	0x6820	; 0x6820 <returnnullfceargs(unsigned int, unsigned int, unsigned char)>
     378:	0c 94 45 b7 	jmp	0x16e8a	; 0x16e8a <EthernetUDP::remotePort()>
     37c:	0c 94 59 b0 	jmp	0x160b2	; 0x160b2 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>
     380:	0c 94 d1 34 	jmp	0x69a2	; 0x69a2 <switch_brightness_automode_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     384:	0c 94 94 36 	jmp	0x6d28	; 0x6d28 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     388:	0c 94 d5 9a 	jmp	0x135aa	; 0x135aa <LCDWIKI_KBV::Get_Height() const>
     38c:	0c 94 c3 98 	jmp	0x13186	; 0x13186 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     390:	0c 94 4f 34 	jmp	0x689e	; 0x689e <click_keyboard_type(unsigned int, unsigned int, unsigned char)>
     394:	0c 94 6e 47 	jmp	0x8edc	; 0x8edc <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>
     398:	0c 94 f2 d7 	jmp	0x1afe4	; 0x1afe4 <turnOffPWM+0xc8>
     39c:	0c 94 d7 ae 	jmp	0x15dae	; 0x15dae <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x12c>
     3a0:	0c 94 28 34 	jmp	0x6850	; 0x6850 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     3a4:	0c 94 ff d9 	jmp	0x1b3fe	; 0x1b3fe <IPAddress::printTo(Print&) const>
     3a8:	0c 94 04 b9 	jmp	0x17208	; 0x17208 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>
     3ac:	0c 94 05 9d 	jmp	0x13a0a	; 0x13a0a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     3b0:	0c 94 2c 38 	jmp	0x7058	; 0x7058 <button_set_brightness_auto_shutdown_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     3b4:	0c 94 96 b7 	jmp	0x16f2c	; 0x16f2c <EthernetUDP::write(unsigned char const*, unsigned int)>
     3b8:	0c 94 8a b5 	jmp	0x16b14	; 0x16b14 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>
     3bc:	0c 94 bd 3c 	jmp	0x797a	; 0x797a <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)>
     3c0:	0c 94 ce d7 	jmp	0x1af9c	; 0x1af9c <turnOffPWM+0x80>
     3c4:	0c 94 2b ce 	jmp	0x19c56	; 0x19c56 <TwoWire::available()>
     3c8:	0c 94 21 d9 	jmp	0x1b242	; 0x1b242 <HardwareSerial::write(unsigned char)>
     3cc:	0c 94 99 3d 	jmp	0x7b32	; 0x7b32 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     3d0:	0c 94 b8 ae 	jmp	0x15d70	; 0x15d70 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xee>
     3d4:	0c 94 8b 99 	jmp	0x13316	; 0x13316 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     3d8:	0c 94 95 b5 	jmp	0x16b2a	; 0x16b2a <Print::flush()>
     3dc:	0c 94 f8 37 	jmp	0x6ff0	; 0x6ff0 <click_button_default_value(unsigned int, unsigned int, unsigned char)>

000003e0 <__trampolines_end>:
__trampolines_end():
     3e0:	4e 41       	sbci	r20, 0x1E	; 30
     3e2:	4e 49       	Address 0x00000000000003e2 is out of bounds.
.word	0xffff	; ????

000003e3 <pstr_inity>:
     3e3:	49 4e 49 54 59                                      INITY

000003e8 <pstr_inf>:
     3e8:	49 4e 46                                            INF

000003eb <pwr_m10>:
     3eb:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     3fb:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000403 <pwr_p10>:
     403:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     413:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     423:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     433:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     443:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     453:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     463:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     473:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     483:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     493:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     4a3:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     4b3:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     4c3:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     4d3:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     4e3:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     4f3:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     503:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     513:	3d 27                                               ='

00000515 <Menu_All>:
     515:	06 05 03 06 32 5c ee 5a 22 01 96 00 aa 00 28 00     ....2\.Z".....(.
     525:	02 05 2b 38 08 12 34 f8 5a 22 01 5a 00 aa 00 28     ..+8..4.Z".Z...(
     535:	00 02 01 2b 38 08 12 34 ff 5a 22 01 1e 00 aa 00     ...+8..4.Z".....
     545:	28 00 02 02 46 3a 08 12 34 00 00 00 00 00 00 00     (...F:..4.......
	...
     5c5:	e5 5a 0a 00 dc 00 52 00 3c 00 03 9a d6 ff ff 00     .Z....R.<.......
     5d5:	ab 37 bd 37 0a 12 34 e1 5a 64 00 dc 00 52 00 3c     .7.7..4.Zd...R.<
     5e5:	00 03 00 f8 ff ff 01 ab 37 bd 37 0a 12 34 dd 5a     ........7.7..4.Z
     5f5:	be 00 dc 00 52 00 3c 00 03 1f 00 ff ff 07 ab 37     ....R.<........7
     605:	bd 37 0a 12 34 d8 5a 18 01 dc 00 52 00 3c 00 03     .7..4.Z....R.<..
     615:	e0 ff ff ff 02 ab 37 bd 37 0a 12 34 d4 5a 72 01     ......7.7..4.Zr.
     625:	dc 00 52 00 3c 00 03 e0 07 ff ff 08 ab 37 bd 37     ..R.<........7.7
     635:	0a 12 34 0a 00 82 00 00 98 69 00 00 00 00 0c 2b     ..4......i.....+
     645:	38 12 34 39 59 18 01 22 01 00 2a 41 00 00 00 00     8.49Y.."..*A....
     655:	0c 2b 38 12 34 39 59 0a 00 1e 00 00 9c 40 00 00     .+8.49Y......@..
     665:	00 00 09 2b 38 12 34 39 59 00 00 00 00 00 00 00     ...+8.49Y.......
	...
     7d5:	00 03 05 03 00 00 00 00 00 00 00 00 00 00 e0 01     ................
     7e5:	40 01 01 ff ff 08 52 34 5b 34 64 34 10 34 c5 5a     @.....R4[4d4.4.Z
     7f5:	e9 5a 0a 00 dc 00 be 00 28 00 02 00 3c 3a 08 12     .Z......(...<:..
     805:	34 74 56 18 01 dc 00 be 00 1e 00 01 00 2b 38 08     4tV..........+8.
     815:	12 34 89 56 18 01 b4 00 be 00 1e 00 01 00 2b 38     .4.V..........+8
     825:	08 12 34 5b 56 18 01 8c 00 be 00 1e 00 01 00 2b     ..4[V..........+
     835:	38 08 12 34 9f 56 18 01 64 00 be 00 1e 00 01 00     8..4.V..d.......
     845:	2b 38 08 12 34 b7 56 18 01 3c 00 be 00 1e 00 01     +8..4.V..<......
     855:	00 2b 38 08 12 34 cc 56 18 01 14 00 be 00 1e 00     .+8..4.V........
     865:	01 00 2b 38 08 12 34 d9 56 18 01 04 01 be 00 1e     ..+8..4.V.......
     875:	00 01 00 2b 38 08 12 34 4c 56 0a 00 aa 00 be 00     ...+8..4LV......
     885:	28 00 01 00 af 82 08 12 34 00 00 00 00 00 00 00     (.......4.......
	...
     911:	00 0a 00 28 00 00 8c 43 c8 00 78 00 08 2b 38 12     ...(...C..x..+8.
     921:	34 39 59 00 00 00 00 00 00 00 00 00 00 00 00 00     49Y.............
	...
     aad:	00 00 00 09 00 01 00 00 00 00 00 10 00 00 00 00     ................
     abd:	e0 01 40 01 01 ff ff 08 10 34 10 34 10 34 10 34     ..@......4.4.4.4
     acd:	99 5a e9 5a 0a 00 dc 00 be 00 28 00 02 00 3c 3a     .Z.Z......(...<:
     add:	08 12 34 86 57 0a 00 28 00 be 00 28 00 02 00 38     ..4.W..(...(...8
     aed:	3b 08 12 34 00 00 00 00 00 00 00 00 00 00 00 00     ;..4............
	...
     be9:	00 00 00 18 01 22 01 00 2a 41 00 00 00 00 0c 2b     ....."..*A.....+
     bf9:	38 12 34 39 59 9a 01 48 00 00 21 35 28 00 7e 00     8.49Y..H..!5(.~.
     c09:	08 2b 38 12 34 39 59 dc 00 14 00 00 10 35 f0 00     .+8.49Y......5..
     c19:	f0 00 08 2b 38 12 34 39 59 00 00 00 00 00 00 00     ...+8.49Y.......
	...
     c79:	e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 00 01     ..#...7..<<.....
     c89:	94 36 76 3b b1 34 08 00 00 00 00 00 00 00 00 00     .6v;.4..........
	...
     ca5:	00 00 2b 9a 01 1e 00 28 00 28 00 02 00 a4 34 08     ..+....(.(....4.
     cb5:	12 34 2d 9a 01 c8 00 28 00 28 00 02 00 94 34 08     .4-....(.(....4.
     cc5:	12 34 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .4..............
	...
     d89:	00 02 00 03 00 01 02 00 00 03 00 00 00 00 e0 01     ................
     d99:	40 01 01 ff ff 08 10 34 10 34 10 34 10 34 b4 57     @......4.4.4.4.W
     da9:	e9 5a 0a 00 dc 00 be 00 28 00 02 00 3c 3a 08 12     .Z......(...<:..
     db9:	34 7e 59 0a 00 28 00 be 00 28 00 01 00 62 50 08     4~Y..(...(...bP.
     dc9:	12 34 36 56 0a 00 64 00 be 00 28 00 01 00 2b 38     .46V..d...(...+8
     dd9:	08 12 34 28 56 0a 00 a0 00 be 00 28 00 01 00 db     ..4(V......(....
     de9:	50 08 12 34 13 56 18 01 28 00 be 00 28 00 01 00     P..4.V..(...(...
     df9:	dd 3b 08 12 34 fc 55 18 01 64 00 be 00 28 00 01     .;..4.U..d...(..
     e09:	00 1a 3c 08 12 34 00 00 00 00 00 00 00 00 00 00     ..<..4..........
	...
     ec5:	00 18 01 22 01 00 2a 41 00 00 00 00 0c 2b 38 12     ..."..*A.....+8.
     ed5:	34 39 59 00 00 00 00 00 00 00 00 00 00 00 00 00     49Y.............
	...
    1061:	00 00 00 06 00 01 00 00 00 00 00 99 00 00 00 00     ................
    1071:	e0 01 40 01 01 ff ff 08 10 34 10 34 10 34 10 34     ..@......4.4.4.4
    1081:	94 59 e9 5a 0a 00 dc 00 be 00 28 00 02 00 3c 3a     .Y.Z......(...<:
    1091:	08 12 34 00 00 00 00 00 00 00 00 00 00 00 00 00     ..4.............
	...
    119d:	00 00 00 18 01 22 01 00 2a 41 00 00 00 00 0c 2b     ....."..*A.....+
    11ad:	38 12 34 39 59 9a 01 48 00 02 21 35 28 00 56 00     8.49Y..H..!5(.V.
    11bd:	08 2b 38 12 34 39 59 05 00 1e 00 00 10 35 cc 01     .+8.49Y......5..
    11cd:	b4 00 08 2b 38 12 34 39 59 00 00 00 00 00 00 00     ...+8.49Y.......
	...
    1259:	00 00 2b 9a 01 1e 00 28 00 28 00 02 02 a4 34 08     ..+....(.(....4.
    1269:	12 34 2d 9a 01 a0 00 28 00 28 00 02 02 94 34 08     .4-....(.(....4.
    1279:	12 34 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .4..............
	...
    131d:	00 00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff     .....(.x.<......
    132d:	ff 82 50 02 03 02 02 00 c0 45 90 49 be 34 cb 34     ..P......E.I.4.4
    133d:	08 01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01     ................
    134d:	40 01 01 ff ff 08 10 34 10 34 10 34 10 34 4b 57     @......4.4.4.4KW
    135d:	e9 5a 0a 00 dc 00 be 00 28 00 02 00 3c 3a 08 12     .Z......(...<:..
    136d:	34 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     4...............
	...
    1615:	00 00 00 01 00 00 00 00 00 00 00 9a 00 00 00 00     ................
    1625:	e0 01 40 01 01 ff ff 08 10 34 10 34 10 34 10 34     ..@......4.4.4.4
	...
    219d:	73 59 64 59 1e 00 3c 00 64 00 28 00 02 00 8d 3a     sYdY..<.d.(....:
    21ad:	08 12 34 61 59 fa 00 3c 00 64 00 28 00 02 00 3c     ..4aY..<.d.(...<
    21bd:	3a 08 12 34 00 00 00 00 00 00 00 00 00 00 00 00     :..4............
	...
    22b9:	00 00 00 14 00 23 00 00 81 3d 00 00 00 00 08 2b     .....#...=.....+
    22c9:	38 12 34 39 59 00 00 00 00 00 00 00 00 00 00 00     8.49Y...........
	...
    2459:	00 02 00 01 00 00 00 00 00 64 32 00 32 00 7c 01     .........d2.2.|.
    2469:	8c 00 06 e0 ff 08 10 34 10 34 10 34 10 34 73 59     .......4.4.4.4sY
    2479:	53 59 0a 00 c8 00 82 00 28 00 02 00 6f 3a 08 12     SY......(...o:..
    2489:	34 5a 59 96 00 c8 00 82 00 28 00 02 00 3c 3a 08     4ZY......(...<:.
    2499:	12 34 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .4..............
	...
    2595:	00 64 00 2d 00 00 24 3f b4 00 28 00 08 2b 38 12     .d.-..$?..(..+8.
    25a5:	34 39 59 00 00 00 00 00 00 00 00 00 00 00 00 00     49Y.............
	...
    2651:	2b 3c 00 2d 00 28 00 28 00 02 00 fb 35 08 12 34     +<.-.(.(....5..4
    2661:	2d 18 01 2d 00 28 00 28 00 02 00 af 35 08 12 34     -..-.(.(....5..4
	...
    2731:	00 00 00 02 00 01 00 00 02 00 00 66 0a 00 0a 00     ...........f....
    2741:	cc 01 04 01 06 e0 ff 08 10 34 10 34 10 34 10 34     .........4.4.4.4
    2751:	68 59 53 59 0a 00 c8 00 82 00 28 00 02 00 68 3a     hYSY......(...h:
    2761:	08 12 34 5a 59 96 00 c8 00 82 00 28 00 02 00 3c     ..4ZY......(...<
    2771:	3a 08 12 34 49 59 2c 01 c8 00 82 00 28 00 02 00     :..4IY,.....(...
    2781:	55 36 08 12 34 3e 59 40 01 23 00 28 00 28 00 02     U6..4>Y@.#.(.(..
    2791:	00 4f 34 08 12 34 3c 59 6d 01 23 00 28 00 28 00     .O4..4<Ym.#.(.(.
    27a1:	02 01 4f 34 08 12 34 3a 59 9a 01 23 00 28 00 28     ..O4..4:Y..#.(.(
    27b1:	00 02 02 4f 34 08 12 34 00 00 00 00 00 00 00 00     ...O4..4........
	...
    286d:	00 00 00 0a 00 23 00 00 09 40 2c 01 28 00 08 2b     .....#...@,.(..+
    287d:	38 12 34 39 59 00 00 00 00 00 00 00 00 00 00 00     8.49Y...........
	...
    29a9:	00 00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00     ....P......((...
    29b9:	00 03 28 34 17 3d 48 34 08 00 00 00 00 00 00 00     ..(4.=H4........
	...
    2a0d:	00 06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01     .........g......
    2a1d:	04 01 06 e0 ff 08 10 34 10 34 10 34 10 34 73 59     .......4.4.4.4sY
    2a2d:	53 59 0a 00 c8 00 82 00 28 00 02 00 68 3a 08 12     SY......(...h:..
    2a3d:	34 5a 59 96 00 c8 00 82 00 28 00 02 00 3c 3a 08     4ZY......(...<:.
    2a4d:	12 34 49 59 2c 01 c8 00 82 00 28 00 02 00 55 36     .4IY,.....(...U6
    2a5d:	08 12 34 00 00 00 00 00 00 00 00 00 00 00 00 00     ..4.............
	...
    2b49:	00 0a 00 23 00 00 09 40 2c 01 28 00 08 2b 38 12     ...#...@,.(..+8.
    2b59:	34 39 59 00 00 00 00 00 00 00 00 00 00 00 00 00     49Y.............
	...
    2c85:	0a 00 50 00 1e 00 1e 00 02 28 28 02 09 00 00 02     ..P......((.....
    2c95:	16 34 0d 3d 14 34 08 00 00 00 00 00 00 00 00 00     .4.=.4..........
	...
    2ce5:	00 00 00 03 00 01 00 00 00 01 00 65 0a 00 0a 00     ...........e....
    2cf5:	cc 01 04 01 06 e0 ff 08 10 34 10 34 10 34 10 34     .........4.4.4.4
    2d05:	73 59 83 57 fa 00 3c 00 64 00 28 00 02 00 3c 3a     sY.W..<.d.(...<:
    2d15:	08 12 34 00 00 00 00 00 00 00 00 00 00 00 00 00     ..4.............
	...
    2e21:	00 00 00 14 00 23 00 00 81 3d 00 00 00 00 08 2b     .....#...=.....+
    2e31:	38 12 34 39 59 00 00 00 00 00 00 00 00 00 00 00     8.49Y...........
	...
    2fc1:	00 01 00 01 00 00 00 00 00 68 32 00 32 00 7c 01     .........h2.2.|.
    2fd1:	8c 00 06 e0 ff 08 10 34 10 34 10 34 10 34 00 00     .......4.4.4.4..
	...
    32b9:	6f 5a e9 5a 0a 00 dc 00 be 00 28 00 02 00 3c 3a     oZ.Z......(...<:
    32c9:	08 12 34 10 5a 18 01 be 00 be 00 28 00 02 00 63     ..4.Z......(...c
    32d9:	3a 08 12 34 01 5a 18 01 8c 00 be 00 28 00 02 00     :..4.Z......(...
    32e9:	ad 3a 08 12 34 f2 59 18 01 5a 00 be 00 28 00 02     .:..4.Y..Z...(..
    32f9:	00 b5 3b 08 12 34 e2 59 18 01 28 00 be 00 28 00     ..;..4.Y..(...(.
    3309:	02 00 eb 3a 08 12 34 00 00 00 00 00 00 00 00 00     ...:..4.........
	...
    33d5:	00 00 00 18 01 22 01 00 2a 41 00 00 00 00 0c 2b     ....."..*A.....+
    33e5:	38 12 34 39 59 14 00 14 00 00 04 3e 00 00 00 00     8.49Y......>....
    33f5:	08 2b 38 12 34 39 59 14 00 14 00 00 99 3d 00 00     .+8.49Y......=..
    3405:	00 00 0c 2b 38 12 34 39 59 00 00 00 00 00 00 00     ...+8.49Y.......
	...
    3575:	00 05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01     ................
    3585:	40 01 01 ff ff 08 10 34 10 34 10 34 10 34 8a 5a     @......4.4.4.4.Z
    3595:	e9 5a 0a 00 dc 00 be 00 28 00 02 00 3c 3a 08 12     .Z......(...<:..
    35a5:	34 10 5a 18 01 5a 00 be 00 28 00 02 00 74 46 08     4.Z..Z...(...tF.
    35b5:	12 34 f2 59 18 01 28 00 be 00 28 00 02 00 0e 45     .4.Y..(...(....E
    35c5:	08 12 34 d2 59 18 01 8c 00 be 00 28 00 02 00 b6     ..4.Y......(....
    35d5:	46 08 12 34 00 00 00 00 00 00 00 00 00 00 00 00     F..4............
	...
    36b1:	00 14 00 14 00 00 3c 48 00 00 00 00 0c 2b 38 12     ......<H.....+8.
    36c1:	34 39 59 00 00 00 00 00 00 00 00 00 00 00 00 00     49Y.............
	...
    384d:	00 00 00 04 00 01 00 00 00 00 00 07 00 00 00 00     ................
    385d:	e0 01 40 01 01 ff ff 08 10 34 10 34 10 34 10 34     ..@......4.4.4.4
    386d:	8a 5a e9 5a 0a 00 dc 00 be 00 28 00 02 00 3c 3a     .Z.Z......(...<:
    387d:	08 12 34 1e 5a 0a 00 28 00 be 00 28 00 01 00 10     ..4.Z..(...(....
    388d:	47 08 12 34 00 00 00 00 00 00 00 00 00 00 00 00     G..4............
	...
    3989:	00 00 00 dc 00 14 00 00 10 35 f0 00 f0 00 08 2b     .........5.....+
    3999:	38 12 34 39 59 18 01 22 01 00 2a 41 00 00 00 00     8.49Y.."..*A....
    39a9:	0c 2b 38 12 34 39 59 9a 01 48 00 01 21 35 28 00     .+8.49Y..H..!5(.
    39b9:	7e 00 08 2b 38 12 34 39 59 00 00 00 00 00 00 00     ~..+8.49Y.......
	...
    3a19:	e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 01 04     ..#...7..<<.....
    3a29:	79 45 a5 45 af 34 08 00 00 00 00 00 00 00 00 00     yE.E.4..........
	...
    3a45:	00 00 2b 9a 01 1e 00 28 00 28 00 02 01 a4 34 08     ..+....(.(....4.
    3a55:	12 34 2d 9a 01 c8 00 28 00 28 00 02 01 94 34 08     .4-....(.(....4.
    3a65:	12 34 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .4..............
	...
    3b29:	00 02 00 03 00 01 02 00 00 06 00 00 00 00 e0 01     ................
    3b39:	40 01 01 ff ff 08 10 34 10 34 10 34 10 34 00 00     @......4.4.4.4..
	...
    43d5:	1e 58 e9 5a 0a 00 dc 00 be 00 28 00 02 00 3c 3a     .X.Z......(...<:
    43e5:	08 12 34 c5 5a 0a 00 28 00 be 00 28 00 02 10 46     ..4.Z..(...(...F
    43f5:	3a 08 12 34 b7 5a 0a 00 64 00 be 00 28 00 02 00     :..4.Z..d...(...
    4405:	2b 38 08 12 34 a7 5a 18 01 a0 00 be 00 28 00 02     +8..4.Z......(..
    4415:	00 f8 37 08 12 34 b4 57 18 01 28 00 be 00 28 00     ..7..4.W..(...(.
    4425:	02 99 46 3a 08 12 34 a9 57 18 01 64 00 be 00 28     ..F:..4.W..d...(
    4435:	00 02 9c 46 3a 08 12 34 4b 57 0a 00 a0 00 be 00     ...F:..4KW......
    4445:	28 00 02 9a 46 3a 08 12 34 00 00 00 00 00 00 00     (...F:..4.......
	...
    44f1:	00 00 00 18 01 22 01 00 2a 41 00 00 00 00 0c 2b     ....."..*A.....+
    4501:	38 12 34 39 59 00 00 00 00 00 00 00 00 00 00 00     8.49Y...........
	...
    4691:	00 07 00 01 00 00 00 00 00 96 00 00 00 00 e0 01     ................
    46a1:	40 01 01 ff ff 08 10 34 10 34 10 34 10 34 ff 5a     @......4.4.4.4.Z
    46b1:	e9 5a 0a 00 dc 00 be 00 28 00 02 00 3c 3a 08 12     .Z......(...<:..
    46c1:	34 13 58 0a 00 28 00 be 00 28 00 02 96 46 3a 08     4.X..(...(...F:.
    46d1:	12 34 c3 57 18 01 28 00 be 00 28 00 02 00 2b 38     .4.W..(...(...+8
    46e1:	08 12 34 d1 57 0a 00 a0 00 be 00 28 00 02 98 46     ..4.W......(...F
    46f1:	3a 08 12 34 f2 57 0a 00 64 00 be 00 28 00 02 97     :..4.W..d...(...
    4701:	46 3a 08 12 34 00 00 00 00 00 00 00 00 00 00 00     F:..4...........
	...
    47cd:	00 18 01 22 01 00 2a 41 00 00 00 00 0c 2b 38 12     ..."..*A.....+8.
    47dd:	34 39 59 00 00 00 00 00 00 00 00 00 00 00 00 00     49Y.............
	...
    4969:	00 00 00 05 00 01 00 00 00 00 00 02 00 00 00 00     ................
    4979:	e0 01 40 01 01 ff ff 08 10 34 10 34 10 34 10 34     ..@......4.4.4.4
    4989:	ff 57 e9 5a 0a 00 dc 00 be 00 28 00 02 00 3c 3a     .W.Z......(...<:
    4999:	08 12 34 99 5a 0a 00 28 00 be 00 28 00 02 03 46     ..4.Z..(...(...F
    49a9:	3a 08 12 34 9e 57 0a 00 64 00 be 00 28 00 02 06     :..4.W..d...(...
    49b9:	46 3a 08 12 34 94 57 0a 00 a0 00 be 00 28 00 02     F:..4.W......(..
    49c9:	00 2b 38 08 12 34 00 00 00 00 00 00 00 00 00 00     .+8..4..........
	...
    4aa5:	00 00 00 18 01 22 01 00 2a 41 00 00 00 00 0c 2b     ....."..*A.....+
    4ab5:	38 12 34 39 59 00 00 00 00 00 00 00 00 00 00 00     8.49Y...........
	...
    4c45:	00 04 00 01 00 00 00 00 00 97 00 00 00 00 e0 01     ................
    4c55:	40 01 01 ff ff 08 10 34 10 34 10 34 10 34 de 57     @......4.4.4.4.W
    4c65:	e9 5a 0a 00 dc 00 be 00 28 00 02 00 3c 3a 08 12     .Z......(...<:..
    4c75:	34 94 59 0a 00 28 00 be 00 28 00 01 08 46 3a 08     4.Y..(...(...F:.
    4c85:	12 34 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .4..............
	...
    4d81:	00 18 01 22 01 00 2a 41 00 00 00 00 0c 2b 38 12     ..."..*A.....+8.
    4d91:	34 39 59 00 00 00 00 00 00 00 00 00 00 00 00 00     49Y.............
	...
    4e0d:	00 00 0a 00 64 00 be 00 28 00 01 01 01 00 01 01     ....d...(.......
    4e1d:	00 01 0f 37 32 3b 6d 34 08 00 00 00 00 00 00 00     ...72;m4........
	...
    4f01:	00 0a 00 a0 00 be 00 28 00 01 01 e0 07 ff ff 01     .......(........
    4f11:	32 00 01 01 ff 01 47 36 0c 35 6d 34 2c 38 08 02     2.....G6.5m4,8..
    4f21:	00 01 00 01 00 00 01 98 00 00 00 00 e0 01 40 01     ..............@.
    4f31:	01 ff ff 08 10 34 10 34 10 34 10 34 de 57 e9 5a     .....4.4.4.4.W.Z
    4f41:	0a 00 dc 00 be 00 28 00 02 00 3c 3a 08 12 34 00     ......(...<:..4.
	...
    5059:	00 00 00 0e 01 28 00 00 24 3f 8c 00 28 00 08 2b     .....(..$?..(..+
    5069:	38 05 35 39 59 00 00 00 00 00 00 00 00 00 00 00     8.59Y...........
	...
    50a1:	00 00 00 cb 55 0a 00 28 00 be 00 28 00 01 e0 07     ....U..(...(....
    50b1:	ff ff 00 d2 37 d1 34 6e 37 08 00 00 00 00 00 00     ....7.4n7.......
	...
    5115:	00 00 2b 9a 01 28 00 28 00 28 00 02 00 fb 35 08     ..+..(.(.(....5.
    5125:	05 35 2d e6 00 28 00 28 00 28 00 02 00 af 35 08     .5-..(.(.(....5.
    5135:	05 35 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .5..............
	...
    51f9:	00 01 00 01 01 00 02 00 00 9b 0a 00 0a 00 cc 01     ................
    5209:	18 01 06 e0 ff 08 10 34 10 34 10 34 d7 34 a9 57     .......4.4.4.4.W
    5219:	e9 5a 0a 00 dc 00 be 00 28 00 02 00 3c 3a 08 12     .Z......(...<:..
    5229:	34 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     4...............
	...
    5335:	00 18 01 22 01 00 2a 41 00 00 00 00 0c 2b 38 12     ..."..*A.....+8.
    5345:	34 39 59 0a 00 1e 00 00 a1 41 00 00 00 00 08 2b     49Y......A.....+
    5355:	38 12 34 39 59 00 00 00 00 00 00 00 00 00 00 00     8.49Y...........
	...
    54d1:	00 00 00 01 00 02 00 00 00 00 00 9c 00 00 00 00     ................
    54e1:	e0 01 40 01 01 ff ff 08 10 34 10 34 10 34 10 34     ..@......4.4.4.4

000054f1 <new_text_date_error>:
    54f1:	2d 2d 2e 2d 2d 2e 2d 2d 2d 2d 00                    --.--.----.

000054fc <new_text_mqtt_error>:
    54fc:	4d 51 54 54 20 76 20 63 68 79 62 65 3a 20 00        MQTT v chybe: .

0000550b <new_text_mqtt_processed>:
    550b:	4d 51 54 54 20 7a 70 72 61 63 6f 76 61 6e 79 63     MQTT zpracovanyc
    551b:	68 3a 20 00                                         h: .

0000551f <new_text_mqtt_receive>:
    551f:	4d 51 54 54 20 70 72 69 6a 61 74 79 63 68 3a 20     MQTT prijatych: 
	...

00005530 <new_text_mqtt_send>:
    5530:	4d 51 54 54 20 6f 64 65 73 6c 61 6e 79 63 68 3a     MQTT odeslanych:
    5540:	20 00                                                .

00005542 <new_text_selfcheck_test>:
    5542:	53 65 6c 66 63 68 65 63 6b 3a 20 00                 Selfcheck: .

0000554e <new_text_internal_temp>:
    554e:	49 6e 74 65 72 6e 69 20 74 65 70 6c 6f 74 61 3a     Interni teplota:
    555e:	20 00                                                .

00005560 <new_text_consume_ampere>:
    5560:	4f 64 62 65 72 20 70 72 6f 75 64 75 3a 20 00        Odber proudu: .

0000556f <new_text_tritri_volt>:
    556f:	49 6e 74 65 72 6e 69 20 6e 61 70 65 74 69 20 33     Interni napeti 3
    557f:	2e 33 20 00                                         .3 .

00005583 <new_text_pet_volt>:
    5583:	49 6e 74 65 72 6e 69 20 6e 61 70 65 74 69 20 35     Interni napeti 5
    5593:	2e 30 20 00                                         .0 .

00005597 <new_text_input_volt>:
    5597:	56 73 74 75 70 6e 69 20 6e 61 70 65 74 69 20 00     Vstupni napeti .

000055a7 <new_text_jas_display_manual>:
    55a7:	4d 61 6e 75 61 6c 6e 69 20 72 69 7a 65 6e 69 20     Manualni rizeni 
	...

000055b8 <new_text_jas_display_automat>:
    55b8:	41 75 74 6f 6d 61 74 69 63 6b 65 20 72 69 7a 65     Automaticke rize
    55c8:	6e 69 00                                            ni.

000055cb <new_text_switch_brightness_automode>:
    55cb:	41 75 74 6f 6d 61 74 69 63 6b 79 20 6a 61 73 00     Automaticky jas.

000055db <new_text_err_connect_seznam>:
    55db:	4b 6f 6e 65 6b 74 69 76 69 74 61 20 45 52 52 4f     Konektivita ERRO
    55eb:	52 00                                               R.

000055ed <new_text_ok_connect_seznam>:
    55ed:	4b 6f 6e 65 6b 74 69 76 69 74 61 20 4f 4b 00        Konektivita OK.

000055fc <new_text_time_set_date_manualy>:
    55fc:	52 75 63 6e 69 20 6e 61 73 74 61 76 65 6e 69 20     Rucni nastaveni 
    560c:	64 61 74 75 6d 75 00                                datumu.

00005613 <new_text_time_set_time_manualy>:
    5613:	52 75 63 6e 69 20 6e 61 73 74 61 76 65 6e 69 20     Rucni nastaveni 
    5623:	63 61 73 75 00                                      casu.

00005628 <new_text_time_set_offset>:
    5628:	50 6f 73 75 6e 75 74 69 20 63 61 73 75 00           Posunuti casu.

00005636 <new_text_ntp_set_server>:
    5636:	4e 61 73 74 61 76 65 6e 69 20 4e 54 50 20 73 65     Nastaveni NTP se
    5646:	72 76 65 72 75 00                                   rveru.

0000564c <new_text_set_network_test_connection>:
    564c:	54 65 73 74 20 70 72 69 70 6f 6a 65 6e 69 00        Test pripojeni.

0000565b <new_text_set_network_name>:
    565b:	4e 61 73 74 61 76 65 6e 69 20 6e 61 7a 76 75 20     Nastaveni nazvu 
    566b:	7a 61 72 69 7a 65 6e 69 00                          zarizeni.

00005674 <new_text_set_network_mac>:
    5674:	4e 61 73 74 61 76 65 6e 69 20 4d 41 43 20 61 64     Nastaveni MAC ad
    5684:	72 65 73 79 00                                      resy.

00005689 <new_text_set_network_dns>:
    5689:	4e 61 73 74 61 76 65 6e 69 20 44 4e 53 20 73 65     Nastaveni DNS se
    5699:	72 76 65 72 75 00                                   rveru.

0000569f <new_text_set_network_gw>:
    569f:	4e 61 73 74 61 76 65 6e 69 20 76 79 63 68 6f 7a     Nastaveni vychoz
    56af:	69 20 62 72 61 6e 79 00                             i brany.

000056b7 <new_text_set_network_mask>:
    56b7:	4e 61 73 74 61 76 65 6e 69 20 6d 61 73 6b 79 20     Nastaveni masky 
    56c7:	73 69 74 65 00                                      site.

000056cc <new_text_set_network_ip>:
    56cc:	4e 61 73 74 61 76 65 6e 69 20 49 50 00              Nastaveni IP.

000056d9 <new_text_set_network_dhcp>:
    56d9:	5a 20 44 48 43 50 20 73 65 72 76 65 72 75 00        Z DHCP serveru.

000056e8 <new_text_device_mac>:
    56e8:	4d 41 43 20 61 64 72 65 73 61 00                    MAC adresa.

000056f3 <new_text_device_dhcp>:
    56f3:	44 48 43 50 00                                      DHCP.

000056f8 <new_text_device_dns>:
    56f8:	44 4e 53 20 73 65 72 76 65 72 00                    DNS server.

00005703 <new_text_device_gw>:
    5703:	56 79 63 68 6f 7a 69 20 62 72 61 6e 61 00           Vychozi brana.

00005711 <new_text_device_mask>:
    5711:	49 50 20 6d 61 73 6b 61 00                          IP maska.

0000571a <new_text_device_ip>:
    571a:	49 50 20 61 64 72 65 73 61 00                       IP adresa.

00005724 <new_text_device_nazev>:
    5724:	4e 61 7a 65 76 20 7a 61 72 69 7a 65 6e 69 00        Nazev zarizeni.

00005733 <new_text_jas_display>:
    5733:	4e 61 73 74 61 76 65 6e 69 20 6a 61 73 75 20 64     Nastaveni jasu d
    5743:	69 73 70 6c 61 79 65 00                             isplaye.

0000574b <new_text_nastaveni_mqtt_pripojeni>:
    574b:	4e 61 73 74 61 76 65 6e 69 20 4d 51 54 54 00        Nastaveni MQTT.

0000575a <new_text_error_ntp_time>:
    575a:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    576a:	45 52 52 4f 52 00                                   ERROR.

00005770 <new_text_ok_ntp_time>:
    5770:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    5780:	4f 4b 00                                            OK.

00005783 <new_text_ok>:
    5783:	4f 4b 00                                            OK.

00005786 <new_text_scan_onewire_bus>:
    5786:	53 63 61 6e 20 73 62 65 72 6e 69 63 65 00           Scan sbernice.

00005794 <new_nastaveni_nrf_input>:
    5794:	4e 52 46 20 76 73 74 75 70 00                       NRF vstup.

0000579e <new_nastaveni_mqtt_topic>:
    579e:	4d 51 54 54 20 74 6f 70 69 63 00                    MQTT topic.

000057a9 <new_text_o_zarizeni>:
    57a9:	4f 20 7a 61 72 69 7a 65 6e 69 00                    O zarizeni.

000057b4 <new_text_nastaveni_casu>:
    57b4:	4e 61 73 74 61 76 65 6e 69 20 63 61 73 75 00        Nastaveni casu.

000057c3 <new_text_nastaveni_regulatoru>:
    57c3:	4e 2e 20 72 65 67 75 6c 61 74 6f 72 75 00           N. regulatoru.

000057d1 <new_text_nastaveni_zobrazeni>:
    57d1:	4e 2e 20 7a 6f 62 72 61 7a 65 6e 69 00              N. zobrazeni.

000057de <new_text_nastaveni_zobrazeni_full>:
    57de:	4e 61 73 74 61 76 65 6e 69 20 7a 6f 62 72 61 7a     Nastaveni zobraz
    57ee:	65 6e 69 00                                         eni.

000057f2 <new_text_nastaveni_periferie>:
    57f2:	4e 2e 20 70 65 72 69 66 65 72 69 69 00              N. periferii.

000057ff <new_text_nastaveni_periferii_full>:
    57ff:	4e 61 73 74 61 76 65 6e 69 20 70 65 72 69 66 65     Nastaveni perife
    580f:	72 69 69 00                                         rii.

00005813 <new_text_nastaveni_system>:
    5813:	4e 2e 20 73 79 73 74 65 6d 75 00                    N. systemu.

0000581e <new_text_nastaveni_system_full>:
    581e:	4e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     Nastaveni system
    582e:	75 00                                               u.

00005830 <seznam_server>:
    5830:	77 77 77 2e 73 65 7a 6e 61 6d 2e 63 7a 00           www.seznam.cz.

0000583e <keyboad_number_char_special>:
    583e:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    584e:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

00005858 <keyboad_number_char_lower>:
    5858:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    5868:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

00005872 <keyboad_number_char_upper>:
    5872:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    5882:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

0000588c <termbig_subscribe>:
    588c:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    589c:	73 63 72 69 62 65 00                                scribe.

000058a3 <thermctl_subscribe>:
    58a3:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    58b3:	62 73 63 72 69 62 65 00                             bscribe.

000058bb <lightctl_header_out>:
    58bb:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

000058ca <termbig_header_out>:
    58ca:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

000058d8 <termbig_header_in>:
    58d8:	2f 74 65 72 6d 62 69 67 2d 69 6e 2f 00              /termbig-in/.

000058e5 <thermctl_header_out>:
    58e5:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

000058f4 <thermctl_header_in>:
    58f4:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

00005902 <global_time_offset>:
    5902:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    5912:	6f 66 66 73 65 74 00                                offset.

00005919 <global_time_ntp>:
    5919:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

00005929 <global_time_set>:
    5929:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

00005939 <char_NULL>:
	...

0000593a <text_special_case>:
    593a:	40 00                                               @.

0000593c <text_lower_case>:
    593c:	61 00                                               a.

0000593e <text_upper_case>:
    593e:	41 00                                               A.

00005940 <text_ok>:
    5940:	4f 4b 00                                            OK.

00005943 <text_err>:
    5943:	45 72 72 6f 72 00                                   Error.

00005949 <text_delete_char>:
    5949:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

00005953 <text_ulozit>:
    5953:	55 6c 6f 7a 69 74 00                                Ulozit.

0000595a <text_zrusit>:
    595a:	5a 72 75 73 69 74 00                                Zrusit.

00005961 <text_no>:
    5961:	4e 65 00                                            Ne.

00005964 <text_yes>:
    5964:	41 6e 6f 00                                         Ano.

00005968 <text_klavesnice>:
    5968:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

00005973 <text_upozorneni>:
    5973:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

0000597e <text_ntp_sync_time>:
    597e:	41 6b 74 75 61 6c 69 7a 61 63 65 20 63 61 73 75     Aktualizace casu
	...

0000598f <text_prog>:
    598f:	50 52 4f 47 00                                      PROG.

00005994 <text_select_default_temp>:
    5994:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
    59a4:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

000059ae <text_last_update>:
    59ae:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    59be:	7a 61 63 65 3a 00                                   zace:.

000059c4 <text_online>:
    59c4:	4f 6e 6c 69 6e 65 00                                Online.

000059cb <text_nazev>:
    59cb:	4e 61 7a 65 76 3a 00                                Nazev:.

000059d2 <nastaveni_rtds_subscribe>:
    59d2:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

000059e2 <nastaveni_tds_offset>:
    59e2:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

000059f2 <nastaveni_name_sensor>:
    59f2:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

00005a01 <nastaveni_tds_period>:
    5a01:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

00005a10 <nastaveni_delete_sensor>:
    5a10:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

00005a1e <text_rtds_novy>:
    5a1e:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
    5a2e:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

00005a39 <text_not_used>:
    5a39:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

00005a46 <text_rtds_prefix>:
    5a46:	2f 00                                               /.

00005a48 <text_nastavit_tds>:
    5a48:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    5a58:	6c 6f 00                                            lo.

00005a5b <text_associovat_tds>:
    5a5b:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    5a6b:	64 6c 6f 00                                         dlo.

00005a6f <text_tds_sensors>:
    5a6f:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
    5a7f:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

00005a8a <nastaveni_rtds>:
    5a8a:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

00005a99 <nastaveni_onewire>:
    5a99:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

00005aa7 <nastaveni_default>:
    5aa7:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

00005ab7 <nastaveni_nrf>:
    5ab7:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

00005ac5 <nastaveni_site>:
    5ac5:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

00005ad4 <text_button_term_man>:
    5ad4:	4d 41 4e 00                                         MAN.

00005ad8 <text_button_term_prog>:
    5ad8:	50 52 4f 47 00                                      PROG.

00005add <text_button_term_min>:
    5add:	4d 49 4e 00                                         MIN.

00005ae1 <text_button_term_max>:
    5ae1:	4d 41 58 00                                         MAX.

00005ae5 <text_button_term_off>:
    5ae5:	4f 46 46 00                                         OFF.

00005ae9 <button_zpet>:
    5ae9:	5a 70 65 74 00                                      Zpet.

00005aee <regulator_text>:
    5aee:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

00005af8 <funkce_text>:
    5af8:	46 75 6e 6b 63 65 00                                Funkce.

00005aff <nastaveni_text>:
    5aff:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

00005b09 <temp_offset_short>:
    5b09:	6f 66 66 73 65 74 3a 00                             offset:.

00005b11 <current_temp_short>:
    5b11:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

00005b1a <current_temp>:
    5b1a:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    5b2a:	3a 00                                               :.

00005b2c <current_time>:
    5b2c:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00005b39 <text_test_eeprom>:
    5b39:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

00005b49 <text_test_ram>:
    5b49:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

00005b56 <text_bezny_start>:
    5b56:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

00005b62 <text_vychozi_nastaveni>:
    5b62:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    5b72:	69 00                                               i.

00005b74 <text_rtc_cas>:
    5b74:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    5b84:	6e 79 00                                            ny.

00005b87 <text_ntp_cas>:
    5b87:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    5b97:	63 61 73 00                                         cas.

00005b9b <text_pid_regulator>:
    5b9b:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

00005ba9 <text_nrf_rozhrani>:
    5ba9:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

00005bb6 <text_rest_rozhrani>:
    5bb6:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    5bc6:	69 00                                               i.

00005bc8 <text_mqtt_rozhrani>:
    5bc8:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

00005bd6 <text_ethernet_rozhrani>:
    5bd6:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    5be6:	69 00                                               i.

00005be8 <text_vnitrni_ochrany>:
    5be8:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

00005bf8 <text_onewire_hledam>:
    5bf8:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

00005c05 <text_onewire_rozhrani>:
    5c05:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

00005c14 <text_nastaveni_systemu>:
    5c14:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    5c24:	75 00                                               u.

00005c26 <text_touchscreen>:
    5c26:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

00005c32 <term_title>:
    5c32:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    5c42:	6f 72 20 76 33 00                                   or v3.

00005c48 <network_mqtt_key>:
    5c48:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

00005c59 <network_mqtt_user>:
    5c59:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    5c69:	72 00                                               r.

00005c6b <network_mqtt_port>:
    5c6b:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    5c7b:	74 00                                               t.

00005c7d <network_mqtt_host>:
    5c7d:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    5c8d:	74 00                                               t.

00005c8f <network_ntp>:
    5c8f:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

00005c9b <network_dns>:
    5c9b:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

00005ca7 <network_gw>:
    5ca7:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

00005cb2 <network_netmask>:
    5cb2:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

00005cc2 <network_mac>:
    5cc2:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

00005cce <status_know_devices>:
    5cce:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    5cde:	63 65 73 00                                         ces.

00005ce2 <network_name>:
    5ce2:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

00005cef <network_ip>:
    5cef:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

00005cfa <status_mqtt_process>:
    5cfa:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    5d0a:	65 73 73 00                                         ess.

00005d0e <status_mqtt_receive>:
    5d0e:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    5d1e:	69 76 65 00                                         ive.

00005d22 <status_mqtt_error>:
    5d22:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    5d32:	72 00                                               r.

00005d34 <status_mqtt_send>:
    5d34:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

00005d45 <lcd_font>:
    5d45:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    5d55:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    5d65:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    5d75:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    5d85:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    5d95:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    5da5:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    5db5:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    5dc5:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    5dd5:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    5de5:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    5df5:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    5e05:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    5e15:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    5e25:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    5e35:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    5e45:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    5e55:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    5e65:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    5e75:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    5e85:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    5e95:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    5ea5:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    5eb5:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    5ec5:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    5ed5:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    5ee5:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    5ef5:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    5f05:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    5f15:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    5f25:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    5f35:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    5f45:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    5f55:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    5f65:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    5f75:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    5f85:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    5f95:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    5fa5:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    5fb5:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    5fc5:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    5fd5:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    5fe5:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    5ff5:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    6005:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    6015:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    6025:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    6035:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    6045:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    6055:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    6065:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    6075:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    6085:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    6095:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    60a5:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    60b5:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    60c5:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    60d5:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    60e5:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    60f5:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    6105:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    6115:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    6125:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    6135:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    6145:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    6155:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    6165:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    6175:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    6185:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    6195:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    61a5:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    61b5:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    61c5:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    61d5:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    61e5:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    61f5:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    6205:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    6215:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    6225:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    6235:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00006240 <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    6240:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    6250:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    6260:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    6270:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    6280:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    6290:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    62a0:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

000062ac <_ZZN4RF2412printDetailsEvE3__c__12_>:
    62ac:	50 41 20 50 6f 77 65 72 09 20 3d 20 25 53 0d 0a     PA Power. = %S..
	...

000062bd <_ZZN4RF2412printDetailsEvE3__c__11_>:
    62bd:	43 52 43 20 4c 65 6e 67 74 68 09 20 3d 20 25 53     CRC Length. = %S
    62cd:	0d 0a 00                                            ...

000062d0 <_ZZN4RF2412printDetailsEvE3__c__10_>:
    62d0:	4d 6f 64 65 6c 09 09 20 3d 20 25 53 0d 0a 00        Model.. = %S...

000062df <RF24::printDetails()::__c>:
    62df:	44 61 74 61 20 52 61 74 65 09 20 3d 20 25 53 0d     Data Rate. = %S.
    62ef:	0a 00                                               ..

000062f1 <RF24::printDetails()::__c>:
    62f1:	44 59 4e 50 44 2f 46 45 41 54 55 52 45 00           DYNPD/FEATURE.

000062ff <RF24::printDetails()::__c>:
    62ff:	43 4f 4e 46 49 47 09 00                             CONFIG..

00006307 <RF24::printDetails()::__c>:
    6307:	52 46 5f 53 45 54 55 50 00                          RF_SETUP.

00006310 <RF24::printDetails()::__c>:
    6310:	52 46 5f 43 48 09 00                                RF_CH..

00006317 <RF24::printDetails()::__c>:
    6317:	45 4e 5f 52 58 41 44 44 52 00                       EN_RXADDR.

00006321 <RF24::printDetails()::__c>:
    6321:	45 4e 5f 41 41 09 00                                EN_AA..

00006328 <RF24::printDetails()::__c>:
    6328:	52 58 5f 50 57 5f 50 30 2d 36 00                    RX_PW_P0-6.

00006333 <RF24::printDetails()::__c>:
    6333:	54 58 5f 41 44 44 52 09 00                          TX_ADDR..

0000633c <RF24::printDetails()::__c>:
    633c:	52 58 5f 41 44 44 52 5f 50 32 2d 35 00              RX_ADDR_P2-5.

00006349 <RF24::printDetails()::__c>:
    6349:	52 58 5f 41 44 44 52 5f 50 30 2d 31 00              RX_ADDR_P0-1.

00006356 <rf24_pa_dbm_e_str_P>:
    6356:	74 63 6d 63 65 63 5e 63                             tcmcec^c

0000635e <rf24_pa_dbm_e_str_3>:
    635e:	50 41 5f 4d 41 58 00                                PA_MAX.

00006365 <rf24_pa_dbm_e_str_2>:
    6365:	50 41 5f 48 49 47 48 00                             PA_HIGH.

0000636d <rf24_pa_dbm_e_str_1>:
    636d:	50 41 5f 4c 4f 57 00                                PA_LOW.

00006374 <rf24_pa_dbm_e_str_0>:
    6374:	50 41 5f 4d 49 4e 00                                PA_MIN.

0000637b <rf24_crclength_e_str_P>:
    637b:	90 63 89 63 81 63                                   .c.c.c

00006381 <rf24_crclength_e_str_2>:
    6381:	31 36 20 62 69 74 73 00                             16 bits.

00006389 <rf24_crclength_e_str_1>:
    6389:	38 20 62 69 74 73 00                                8 bits.

00006390 <rf24_crclength_e_str_0>:
    6390:	44 69 73 61 62 6c 65 64 00                          Disabled.

00006399 <rf24_model_e_str_P>:
    6399:	a7 63 9d 63                                         .c.c

0000639d <rf24_model_e_str_1>:
    639d:	6e 52 46 32 34 4c 30 31 2b 00                       nRF24L01+.

000063a7 <rf24_model_e_str_0>:
    63a7:	6e 52 46 32 34 4c 30 31 00                          nRF24L01.

000063b0 <rf24_datarate_e_str_P>:
    63b0:	c4 63 be 63 b6 63                                   .c.c.c

000063b6 <rf24_datarate_e_str_2>:
    63b6:	32 35 30 4b 42 50 53 00                             250KBPS.

000063be <rf24_datarate_e_str_1>:
    63be:	32 4d 42 50 53 00                                   2MBPS.

000063c4 <rf24_datarate_e_str_0>:
    63c4:	31 4d 42 50 53 00                                   1MBPS.

000063ca <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    63ca:	0d 0a 00                                            ...

000063cd <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    63cd:	25 30 32 78 00                                      %02x.

000063d2 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    63d2:	20 30 78 00                                          0x.

000063d6 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    63d6:	25 53 09 20 3d 00                                   %S. =.

000063dc <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    63dc:	0d 0a 00                                            ...

000063df <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    63df:	20 30 78 25 30 32 78 00                              0x%02x.

000063e7 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    63e7:	25 53 09 20 3d 00                                   %S. =.

000063ed <RF24::print_status(unsigned char)::__c>:
    63ed:	53 54 41 54 55 53 09 09 20 3d 20 30 78 25 30 32     STATUS.. = 0x%02
    63fd:	78 20 52 58 5f 44 52 3d 25 78 20 54 58 5f 44 53     x RX_DR=%x TX_DS
    640d:	3d 25 78 20 4d 41 58 5f 52 54 3d 25 78 20 52 58     =%x MAX_RT=%x RX
    641d:	5f 50 5f 4e 4f 3d 25 78 20 54 58 5f 46 55 4c 4c     _P_NO=%x TX_FULL
    642d:	3d 25 78 0d 0a 00                                   =%x...

00006433 <daysInMonth>:
    6433:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

0000643f <digital_pin_to_timer_PGM>:
    643f:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    6473:	00 03                                               ..

00006475 <digital_pin_to_bit_mask_PGM>:
    6475:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    6485:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    6495:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    64a5:	08 10 20 40 80 20                                   .. @. 

000064ab <digital_pin_to_port_PGM>:
    64ab:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    64bb:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    64cb:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    64db:	06 06 06 06 06 07                                   ......

000064e1 <port_to_input_PGM>:
    64e1:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

000064f1 <port_to_output_PGM>:
    64f1:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00006501 <port_to_mode_PGM>:
    6501:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
	...

00006512 <__ctors_start>:
__ctors_start():
    6512:	88 79       	andi	r24, 0x98	; 152
    6514:	aa 8b       	std	Y+18, r26	; 0x12
    6516:	bb 8b       	std	Y+19, r27	; 0x13
    6518:	2e 96       	adiw	r28, 0x0e	; 14
    651a:	04 b0       	in	r0, 0x04	; 4
    651c:	59 b0       	in	r5, 0x09	; 9
    651e:	7c b3       	in	r23, 0x1c	; 28
    6520:	8a b5       	in	r24, 0x2a	; 42
    6522:	21 b7       	in	r18, 0x31	; 49
    6524:	04 b9       	out	0x04, r16	; 4
    6526:	0f b9       	out	0x0f, r16	; 15
    6528:	67 bd       	out	0x27, r22	; 39
    652a:	24 c8       	rjmp	.-4024   	; 0x5574 <new_text_tritri_volt+0x5>
    652c:	84 cf       	rjmp	.-248    	; 0x6436 <daysInMonth+0x3>
    652e:	e6 d5       	rcall	.+3020   	; 0x70fc <ArduinoJson::Internals::isFloat(char const*)+0x6>
    6530:	d2 d9       	rcall	.-3164   	; 0x58d6 <termbig_header_out+0xc>

00006532 <__ctors_end>:
__dtors_end():
    6532:	11 24       	eor	r1, r1
    6534:	1f be       	out	0x3f, r1	; 63
    6536:	cf ef       	ldi	r28, 0xFF	; 255
    6538:	d1 e2       	ldi	r29, 0x21	; 33
    653a:	de bf       	out	0x3e, r29	; 62
    653c:	cd bf       	out	0x3d, r28	; 61
    653e:	00 e0       	ldi	r16, 0x00	; 0
    6540:	0c bf       	out	0x3c, r16	; 60

00006542 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    6542:	19 e0       	ldi	r17, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    6544:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    6546:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    6548:	e2 e6       	ldi	r30, 0x62	; 98
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    654a:	f4 ed       	ldi	r31, 0xD4	; 212
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    654c:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    654e:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    6550:	02 c0       	rjmp	.+4      	; 0x6556 <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    6552:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    6554:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    6556:	aa 34       	cpi	r26, 0x4A	; 74
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    6558:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    655a:	d9 f7       	brne	.-10     	; 0x6552 <__do_copy_data+0x10>

0000655c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    655c:	24 e1       	ldi	r18, 0x14	; 20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    655e:	aa e4       	ldi	r26, 0x4A	; 74
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    6560:	b9 e0       	ldi	r27, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    6562:	01 c0       	rjmp	.+2      	; 0x6566 <.do_clear_bss_start>

00006564 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    6564:	1d 92       	st	X+, r1

00006566 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    6566:	a7 3d       	cpi	r26, 0xD7	; 215
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    6568:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    656a:	e1 f7       	brne	.-8      	; 0x6564 <.do_clear_bss_loop>

0000656c <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    656c:	12 e3       	ldi	r17, 0x32	; 50
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    656e:	c9 e9       	ldi	r28, 0x99	; 153
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    6570:	d2 e3       	ldi	r29, 0x32	; 50
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    6572:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    6574:	06 c0       	rjmp	.+12     	; 0x6582 <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    6576:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    6578:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    657a:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    657c:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    657e:	0e 94 6f de 	call	0x1bcde	; 0x1bcde <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    6582:	c9 38       	cpi	r28, 0x89	; 137
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    6584:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    6586:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    6588:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    658a:	a9 f7       	brne	.-22     	; 0x6576 <__do_global_ctors+0xa>
    658c:	0e 94 99 db 	call	0x1b732	; 0x1b732 <main>
    6590:	0c 94 2f ea 	jmp	0x1d45e	; 0x1d45e <_exit>

00006594 <__bad_interrupt>:
__vector_38():
    6594:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006598 <localtime>:
localtime():
    6598:	63 ec       	ldi	r22, 0xC3	; 195
    659a:	74 e1       	ldi	r23, 0x14	; 20
    659c:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <localtime_r>
    65a0:	83 ec       	ldi	r24, 0xC3	; 195
    65a2:	94 e1       	ldi	r25, 0x14	; 20
    65a4:	08 95       	ret

000065a6 <localtime_r>:
localtime_r():
    65a6:	cf 92       	push	r12
    65a8:	df 92       	push	r13
    65aa:	ef 92       	push	r14
    65ac:	ff 92       	push	r15
    65ae:	0f 93       	push	r16
    65b0:	1f 93       	push	r17
    65b2:	cf 93       	push	r28
    65b4:	df 93       	push	r29
    65b6:	00 d0       	rcall	.+0      	; 0x65b8 <localtime_r+0x12>
    65b8:	1f 92       	push	r1
    65ba:	cd b7       	in	r28, 0x3d	; 61
    65bc:	de b7       	in	r29, 0x3e	; 62
    65be:	6c 01       	movw	r12, r24
    65c0:	7b 01       	movw	r14, r22
    65c2:	e0 91 d5 14 	lds	r30, 0x14D5	; 0x8014d5 <__dst_ptr>
    65c6:	f0 91 d6 14 	lds	r31, 0x14D6	; 0x8014d6 <__dst_ptr+0x1>
    65ca:	0f ef       	ldi	r16, 0xFF	; 255
    65cc:	1f ef       	ldi	r17, 0xFF	; 255
    65ce:	30 97       	sbiw	r30, 0x00	; 0
    65d0:	21 f0       	breq	.+8      	; 0x65da <localtime_r+0x34>
    65d2:	6f ec       	ldi	r22, 0xCF	; 207
    65d4:	74 e1       	ldi	r23, 0x14	; 20
    65d6:	19 95       	eicall
    65d8:	8c 01       	movw	r16, r24
    65da:	f6 01       	movw	r30, r12
    65dc:	80 81       	ld	r24, Z
    65de:	91 81       	ldd	r25, Z+1	; 0x01
    65e0:	a2 81       	ldd	r26, Z+2	; 0x02
    65e2:	b3 81       	ldd	r27, Z+3	; 0x03
    65e4:	40 91 cf 14 	lds	r20, 0x14CF	; 0x8014cf <__utc_offset>
    65e8:	50 91 d0 14 	lds	r21, 0x14D0	; 0x8014d0 <__utc_offset+0x1>
    65ec:	60 91 d1 14 	lds	r22, 0x14D1	; 0x8014d1 <__utc_offset+0x2>
    65f0:	70 91 d2 14 	lds	r23, 0x14D2	; 0x8014d2 <__utc_offset+0x3>
    65f4:	84 0f       	add	r24, r20
    65f6:	95 1f       	adc	r25, r21
    65f8:	a6 1f       	adc	r26, r22
    65fa:	b7 1f       	adc	r27, r23
    65fc:	10 16       	cp	r1, r16
    65fe:	11 06       	cpc	r1, r17
    6600:	cc f0       	brlt	.+50     	; 0x6634 <localtime_r+0x8e>
    6602:	89 83       	std	Y+1, r24	; 0x01
    6604:	9a 83       	std	Y+2, r25	; 0x02
    6606:	ab 83       	std	Y+3, r26	; 0x03
    6608:	bc 83       	std	Y+4, r27	; 0x04
    660a:	b7 01       	movw	r22, r14
    660c:	ce 01       	movw	r24, r28
    660e:	01 96       	adiw	r24, 0x01	; 1
    6610:	0e 94 24 33 	call	0x6648	; 0x6648 <gmtime_r>
    6614:	f7 01       	movw	r30, r14
    6616:	13 87       	std	Z+11, r17	; 0x0b
    6618:	02 87       	std	Z+10, r16	; 0x0a
    661a:	0f 90       	pop	r0
    661c:	0f 90       	pop	r0
    661e:	0f 90       	pop	r0
    6620:	0f 90       	pop	r0
    6622:	df 91       	pop	r29
    6624:	cf 91       	pop	r28
    6626:	1f 91       	pop	r17
    6628:	0f 91       	pop	r16
    662a:	ff 90       	pop	r15
    662c:	ef 90       	pop	r14
    662e:	df 90       	pop	r13
    6630:	cf 90       	pop	r12
    6632:	08 95       	ret
    6634:	a8 01       	movw	r20, r16
    6636:	01 2e       	mov	r0, r17
    6638:	00 0c       	add	r0, r0
    663a:	66 0b       	sbc	r22, r22
    663c:	77 0b       	sbc	r23, r23
    663e:	84 0f       	add	r24, r20
    6640:	95 1f       	adc	r25, r21
    6642:	a6 1f       	adc	r26, r22
    6644:	b7 1f       	adc	r27, r23
    6646:	dd cf       	rjmp	.-70     	; 0x6602 <localtime_r+0x5c>

00006648 <gmtime_r>:
gmtime_r():
    6648:	cf 92       	push	r12
    664a:	df 92       	push	r13
    664c:	ef 92       	push	r14
    664e:	ff 92       	push	r15
    6650:	0f 93       	push	r16
    6652:	1f 93       	push	r17
    6654:	cf 93       	push	r28
    6656:	df 93       	push	r29
    6658:	00 d0       	rcall	.+0      	; 0x665a <gmtime_r+0x12>
    665a:	00 d0       	rcall	.+0      	; 0x665c <gmtime_r+0x14>
    665c:	1f 92       	push	r1
    665e:	1f 92       	push	r1
    6660:	cd b7       	in	r28, 0x3d	; 61
    6662:	de b7       	in	r29, 0x3e	; 62
    6664:	8b 01       	movw	r16, r22
    6666:	fc 01       	movw	r30, r24
    6668:	60 81       	ld	r22, Z
    666a:	71 81       	ldd	r23, Z+1	; 0x01
    666c:	82 81       	ldd	r24, Z+2	; 0x02
    666e:	93 81       	ldd	r25, Z+3	; 0x03
    6670:	20 e8       	ldi	r18, 0x80	; 128
    6672:	31 e5       	ldi	r19, 0x51	; 81
    6674:	41 e0       	ldi	r20, 0x01	; 1
    6676:	50 e0       	ldi	r21, 0x00	; 0
    6678:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
    667c:	69 01       	movw	r12, r18
    667e:	7a 01       	movw	r14, r20
    6680:	2c e3       	ldi	r18, 0x3C	; 60
    6682:	30 e0       	ldi	r19, 0x00	; 0
    6684:	40 e0       	ldi	r20, 0x00	; 0
    6686:	50 e0       	ldi	r21, 0x00	; 0
    6688:	0e 94 50 de 	call	0x1bca0	; 0x1bca0 <__divmodsi4>
    668c:	29 83       	std	Y+1, r18	; 0x01
    668e:	3a 83       	std	Y+2, r19	; 0x02
    6690:	4b 83       	std	Y+3, r20	; 0x03
    6692:	5c 83       	std	Y+4, r21	; 0x04
    6694:	89 81       	ldd	r24, Y+1	; 0x01
    6696:	9a 81       	ldd	r25, Y+2	; 0x02
    6698:	ab 81       	ldd	r26, Y+3	; 0x03
    669a:	bc 81       	ldd	r27, Y+4	; 0x04
    669c:	f8 01       	movw	r30, r16
    669e:	60 83       	st	Z, r22
    66a0:	6c e3       	ldi	r22, 0x3C	; 60
    66a2:	70 e0       	ldi	r23, 0x00	; 0
    66a4:	0e 94 1a de 	call	0x1bc34	; 0x1bc34 <__divmodhi4>
    66a8:	dc 01       	movw	r26, r24
    66aa:	f8 01       	movw	r30, r16
    66ac:	a1 83       	std	Z+1, r26	; 0x01
    66ae:	62 83       	std	Z+2, r22	; 0x02
    66b0:	c6 01       	movw	r24, r12
    66b2:	06 96       	adiw	r24, 0x06	; 6
    66b4:	67 e0       	ldi	r22, 0x07	; 7
    66b6:	70 e0       	ldi	r23, 0x00	; 0
    66b8:	0e 94 06 de 	call	0x1bc0c	; 0x1bc0c <__udivmodhi4>
    66bc:	84 83       	std	Z+4, r24	; 0x04
    66be:	2d ea       	ldi	r18, 0xAD	; 173
    66c0:	3e e8       	ldi	r19, 0x8E	; 142
    66c2:	40 e0       	ldi	r20, 0x00	; 0
    66c4:	50 e0       	ldi	r21, 0x00	; 0
    66c6:	c7 01       	movw	r24, r14
    66c8:	b6 01       	movw	r22, r12
    66ca:	0e 94 50 de 	call	0x1bca0	; 0x1bca0 <__divmodsi4>
    66ce:	29 83       	std	Y+1, r18	; 0x01
    66d0:	3a 83       	std	Y+2, r19	; 0x02
    66d2:	6d 83       	std	Y+5, r22	; 0x05
    66d4:	7e 83       	std	Y+6, r23	; 0x06
    66d6:	8f 83       	std	Y+7, r24	; 0x07
    66d8:	98 87       	std	Y+8, r25	; 0x08
    66da:	89 81       	ldd	r24, Y+1	; 0x01
    66dc:	9a 81       	ldd	r25, Y+2	; 0x02
    66de:	24 e6       	ldi	r18, 0x64	; 100
    66e0:	28 9f       	mul	r18, r24
    66e2:	60 01       	movw	r12, r0
    66e4:	29 9f       	mul	r18, r25
    66e6:	d0 0c       	add	r13, r0
    66e8:	11 24       	eor	r1, r1
    66ea:	6d 81       	ldd	r22, Y+5	; 0x05
    66ec:	7e 81       	ldd	r23, Y+6	; 0x06
    66ee:	8f 81       	ldd	r24, Y+7	; 0x07
    66f0:	98 85       	ldd	r25, Y+8	; 0x08
    66f2:	25 eb       	ldi	r18, 0xB5	; 181
    66f4:	35 e0       	ldi	r19, 0x05	; 5
    66f6:	40 e0       	ldi	r20, 0x00	; 0
    66f8:	50 e0       	ldi	r21, 0x00	; 0
    66fa:	0e 94 50 de 	call	0x1bca0	; 0x1bca0 <__divmodsi4>
    66fe:	29 83       	std	Y+1, r18	; 0x01
    6700:	3a 83       	std	Y+2, r19	; 0x02
    6702:	6d 83       	std	Y+5, r22	; 0x05
    6704:	7e 83       	std	Y+6, r23	; 0x06
    6706:	e9 80       	ldd	r14, Y+1	; 0x01
    6708:	fa 80       	ldd	r15, Y+2	; 0x02
    670a:	ee 0c       	add	r14, r14
    670c:	ff 1c       	adc	r15, r15
    670e:	ee 0c       	add	r14, r14
    6710:	ff 1c       	adc	r15, r15
    6712:	ec 0c       	add	r14, r12
    6714:	fd 1c       	adc	r15, r13
    6716:	8d 81       	ldd	r24, Y+5	; 0x05
    6718:	9e 81       	ldd	r25, Y+6	; 0x06
    671a:	f5 e6       	ldi	r31, 0x65	; 101
    671c:	ef 16       	cp	r14, r31
    671e:	f1 04       	cpc	r15, r1
    6720:	08 f4       	brcc	.+2      	; 0x6724 <gmtime_r+0xdc>
    6722:	3f c0       	rjmp	.+126    	; 0x67a2 <gmtime_r+0x15a>
    6724:	01 96       	adiw	r24, 0x01	; 1
    6726:	21 e0       	ldi	r18, 0x01	; 1
    6728:	30 e0       	ldi	r19, 0x00	; 0
    672a:	a9 01       	movw	r20, r18
    672c:	44 59       	subi	r20, 0x94	; 148
    672e:	5e 4f       	sbci	r21, 0xFE	; 254
    6730:	48 17       	cp	r20, r24
    6732:	59 07       	cpc	r21, r25
    6734:	60 f4       	brcc	.+24     	; 0x674e <gmtime_r+0x106>
    6736:	6d e6       	ldi	r22, 0x6D	; 109
    6738:	71 e0       	ldi	r23, 0x01	; 1
    673a:	82 1b       	sub	r24, r18
    673c:	93 0b       	sbc	r25, r19
    673e:	0e 94 1a de 	call	0x1bc34	; 0x1bc34 <__divmodhi4>
    6742:	dc 01       	movw	r26, r24
    6744:	e6 0e       	add	r14, r22
    6746:	f7 1e       	adc	r15, r23
    6748:	cd 01       	movw	r24, r26
    674a:	30 e0       	ldi	r19, 0x00	; 0
    674c:	20 e0       	ldi	r18, 0x00	; 0
    674e:	44 e6       	ldi	r20, 0x64	; 100
    6750:	e4 0e       	add	r14, r20
    6752:	f1 1c       	adc	r15, r1
    6754:	f8 01       	movw	r30, r16
    6756:	f7 82       	std	Z+7, r15	; 0x07
    6758:	e6 82       	std	Z+6, r14	; 0x06
    675a:	91 87       	std	Z+9, r25	; 0x09
    675c:	80 87       	std	Z+8, r24	; 0x08
    675e:	25 5c       	subi	r18, 0xC5	; 197
    6760:	3f 4f       	sbci	r19, 0xFF	; 255
    6762:	82 17       	cp	r24, r18
    6764:	93 07       	cpc	r25, r19
    6766:	38 f5       	brcc	.+78     	; 0x67b6 <gmtime_r+0x16e>
    6768:	6f e1       	ldi	r22, 0x1F	; 31
    676a:	70 e0       	ldi	r23, 0x00	; 0
    676c:	0e 94 1a de 	call	0x1bc34	; 0x1bc34 <__divmodhi4>
    6770:	dc 01       	movw	r26, r24
    6772:	f8 01       	movw	r30, r16
    6774:	65 83       	std	Z+5, r22	; 0x05
    6776:	a3 83       	std	Z+3, r26	; 0x03
    6778:	f8 01       	movw	r30, r16
    677a:	13 86       	std	Z+11, r1	; 0x0b
    677c:	12 86       	std	Z+10, r1	; 0x0a
    677e:	83 81       	ldd	r24, Z+3	; 0x03
    6780:	8f 5f       	subi	r24, 0xFF	; 255
    6782:	83 83       	std	Z+3, r24	; 0x03
    6784:	28 96       	adiw	r28, 0x08	; 8
    6786:	0f b6       	in	r0, 0x3f	; 63
    6788:	f8 94       	cli
    678a:	de bf       	out	0x3e, r29	; 62
    678c:	0f be       	out	0x3f, r0	; 63
    678e:	cd bf       	out	0x3d, r28	; 61
    6790:	df 91       	pop	r29
    6792:	cf 91       	pop	r28
    6794:	1f 91       	pop	r17
    6796:	0f 91       	pop	r16
    6798:	ff 90       	pop	r15
    679a:	ef 90       	pop	r14
    679c:	df 90       	pop	r13
    679e:	cf 90       	pop	r12
    67a0:	08 95       	ret
    67a2:	51 e0       	ldi	r21, 0x01	; 1
    67a4:	40 e0       	ldi	r20, 0x00	; 0
    67a6:	24 e6       	ldi	r18, 0x64	; 100
    67a8:	e2 16       	cp	r14, r18
    67aa:	f1 04       	cpc	r15, r1
    67ac:	09 f4       	brne	.+2      	; 0x67b0 <gmtime_r+0x168>
    67ae:	50 e0       	ldi	r21, 0x00	; 0
    67b0:	25 2f       	mov	r18, r21
    67b2:	34 2f       	mov	r19, r20
    67b4:	ba cf       	rjmp	.-140    	; 0x672a <gmtime_r+0xe2>
    67b6:	69 e9       	ldi	r22, 0x99	; 153
    67b8:	70 e0       	ldi	r23, 0x00	; 0
    67ba:	82 1b       	sub	r24, r18
    67bc:	93 0b       	sbc	r25, r19
    67be:	0e 94 1a de 	call	0x1bc34	; 0x1bc34 <__divmodhi4>
    67c2:	dc 01       	movw	r26, r24
    67c4:	26 2f       	mov	r18, r22
    67c6:	22 0f       	add	r18, r18
    67c8:	22 0f       	add	r18, r18
    67ca:	f2 2e       	mov	r15, r18
    67cc:	f6 0e       	add	r15, r22
    67ce:	6d e3       	ldi	r22, 0x3D	; 61
    67d0:	70 e0       	ldi	r23, 0x00	; 0
    67d2:	cd 01       	movw	r24, r26
    67d4:	0e 94 1a de 	call	0x1bc34	; 0x1bc34 <__divmodhi4>
    67d8:	dc 01       	movw	r26, r24
    67da:	e6 2e       	mov	r14, r22
    67dc:	ee 0c       	add	r14, r14
    67de:	6f e1       	ldi	r22, 0x1F	; 31
    67e0:	70 e0       	ldi	r23, 0x00	; 0
    67e2:	cd 01       	movw	r24, r26
    67e4:	0e 94 1a de 	call	0x1bc34	; 0x1bc34 <__divmodhi4>
    67e8:	dc 01       	movw	r26, r24
    67ea:	22 e0       	ldi	r18, 0x02	; 2
    67ec:	26 0f       	add	r18, r22
    67ee:	2f 0d       	add	r18, r15
    67f0:	2e 0d       	add	r18, r14
    67f2:	f8 01       	movw	r30, r16
    67f4:	25 83       	std	Z+5, r18	; 0x05
    67f6:	bf cf       	rjmp	.-130    	; 0x6776 <gmtime_r+0x12e>

000067f8 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5429
{
  uint8_t mode = thermostat_ring_get_mode(default_ring);
  if (mode == TERM_MODE_PROG)
    return 1;
  return 0;
}
    67f8:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
    67fa:	86 81       	ldd	r24, Z+6	; 0x06
    67fc:	97 81       	ldd	r25, Z+7	; 0x07
    67fe:	68 0f       	add	r22, r24
    6800:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
    6802:	24 81       	ldd	r18, Z+4	; 0x04
    6804:	35 81       	ldd	r19, Z+5	; 0x05
    6806:	26 17       	cp	r18, r22
    6808:	37 07       	cpc	r19, r23
    680a:	38 f0       	brcs	.+14     	; 0x681a <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
    680c:	22 81       	ldd	r18, Z+2	; 0x02
    680e:	33 81       	ldd	r19, Z+3	; 0x03
    6810:	82 0f       	add	r24, r18
    6812:	93 1f       	adc	r25, r19
    6814:	77 83       	std	Z+7, r23	; 0x07
    6816:	66 83       	std	Z+6, r22	; 0x06
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
    6818:	08 95       	ret
    681a:	90 e0       	ldi	r25, 0x00	; 0
    681c:	80 e0       	ldi	r24, 0x00	; 0
    681e:	08 95       	ret

00006820 <returnnullfceargs(unsigned int, unsigned int, unsigned char)>:
_Z17returnnullfceargsjjh():
    6820:	80 e0       	ldi	r24, 0x00	; 0
    6822:	08 95       	ret

00006824 <display_enable_show(unsigned int, unsigned int, unsigned char)>:
_Z19display_enable_showjjh():
    6824:	81 e0       	ldi	r24, 0x01	; 1
    6826:	08 95       	ret

00006828 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_keyboard_number_max_keysjjh():
    6828:	8c e0       	ldi	r24, 0x0C	; 12
    682a:	08 95       	ret

0000682c <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhhPcS_():
    682c:	0f 93       	push	r16
    682e:	1f 93       	push	r17
    6830:	f9 01       	movw	r30, r18
    6832:	8a 30       	cpi	r24, 0x0A	; 10
    6834:	39 f4       	brne	.+14     	; 0x6844 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    6836:	8e e2       	ldi	r24, 0x2E	; 46
    6838:	80 83       	st	Z, r24
    683a:	f8 01       	movw	r30, r16
    683c:	10 82       	st	Z, r1
    683e:	1f 91       	pop	r17
    6840:	0f 91       	pop	r16
    6842:	08 95       	ret
    6844:	8b 30       	cpi	r24, 0x0B	; 11
    6846:	11 f0       	breq	.+4      	; 0x684c <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x20>
    6848:	80 5d       	subi	r24, 0xD0	; 208
    684a:	f6 cf       	rjmp	.-20     	; 0x6838 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    684c:	8a e3       	ldi	r24, 0x3A	; 58
    684e:	f4 cf       	rjmp	.-24     	; 0x6838 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>

00006850 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhhPcS_():
    6850:	0f 93       	push	r16
    6852:	1f 93       	push	r17
    6854:	90 91 ea 09 	lds	r25, 0x09EA	; 0x8009ea <dialog_set_string_keyboard_type>
    6858:	91 11       	cpse	r25, r1
    685a:	0c c0       	rjmp	.+24     	; 0x6874 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
    685c:	e8 2f       	mov	r30, r24
    685e:	f0 e0       	ldi	r31, 0x00	; 0
    6860:	ee 58       	subi	r30, 0x8E	; 142
    6862:	f7 4a       	sbci	r31, 0xA7	; 167
    6864:	e4 91       	lpm	r30, Z
    6866:	d9 01       	movw	r26, r18
    6868:	ec 93       	st	X, r30
    686a:	f8 01       	movw	r30, r16
    686c:	10 82       	st	Z, r1
    686e:	1f 91       	pop	r17
    6870:	0f 91       	pop	r16
    6872:	08 95       	ret
    6874:	91 30       	cpi	r25, 0x01	; 1
    6876:	29 f4       	brne	.+10     	; 0x6882 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x32>
    6878:	e8 2f       	mov	r30, r24
    687a:	f0 e0       	ldi	r31, 0x00	; 0
    687c:	e8 5a       	subi	r30, 0xA8	; 168
    687e:	f7 4a       	sbci	r31, 0xA7	; 167
    6880:	f1 cf       	rjmp	.-30     	; 0x6864 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
    6882:	92 30       	cpi	r25, 0x02	; 2
    6884:	81 f7       	brne	.-32     	; 0x6866 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
    6886:	e8 2f       	mov	r30, r24
    6888:	f0 e0       	ldi	r31, 0x00	; 0
    688a:	e2 5c       	subi	r30, 0xC2	; 194
    688c:	f7 4a       	sbci	r31, 0xA7	; 167
    688e:	ea cf       	rjmp	.-44     	; 0x6864 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>

00006890 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
    6890:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <dialog_set_string_keyboard_type>
    6894:	83 30       	cpi	r24, 0x03	; 3
    6896:	08 f0       	brcs	.+2      	; 0x689a <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    6898:	08 95       	ret
    689a:	8a e1       	ldi	r24, 0x1A	; 26
    689c:	08 95       	ret

0000689e <click_keyboard_type(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_typejjh():
    689e:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <dialog_set_string_keyboard_type>
    68a2:	08 95       	ret

000068a4 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>:
_Z19menu_redraw_time05sjjh():
    68a4:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <menu_redraw05s>
    68a8:	81 30       	cpi	r24, 0x01	; 1
    68aa:	19 f4       	brne	.+6      	; 0x68b2 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0xe>
    68ac:	10 92 e7 09 	sts	0x09E7, r1	; 0x8009e7 <menu_redraw05s>
    68b0:	08 95       	ret
    68b2:	80 e0       	ldi	r24, 0x00	; 0
    68b4:	08 95       	ret

000068b6 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>:
_Z28menu_redraw_change_term_modejjh():
    68b6:	80 91 e5 09 	lds	r24, 0x09E5	; 0x8009e5 <change_term_mode>
    68ba:	81 30       	cpi	r24, 0x01	; 1
    68bc:	19 f4       	brne	.+6      	; 0x68c4 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)+0xe>
    68be:	10 92 e5 09 	sts	0x09E5, r1	; 0x8009e5 <change_term_mode>
    68c2:	08 95       	ret
    68c4:	80 e0       	ldi	r24, 0x00	; 0
    68c6:	08 95       	ret

000068c8 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>:
_Z23menu_redraw_update_tempjjh():
    68c8:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <menu_redraw10s>
    68cc:	81 30       	cpi	r24, 0x01	; 1
    68ce:	19 f4       	brne	.+6      	; 0x68d6 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)+0xe>
    68d0:	10 92 e6 09 	sts	0x09E6, r1	; 0x8009e6 <menu_redraw10s>
    68d4:	08 95       	ret
    68d6:	80 e0       	ldi	r24, 0x00	; 0
    68d8:	08 95       	ret

000068da <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_return_args_1jjh():
    68da:	08 95       	ret

000068dc <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
    68dc:	83 30       	cpi	r24, 0x03	; 3
    68de:	41 f4       	brne	.+16     	; 0x68f0 <a2d_complete(unsigned char, unsigned int)+0x14>
    68e0:	70 93 b7 0a 	sts	0x0AB7, r23	; 0x800ab7 <proud+0x1>
    68e4:	60 93 b6 0a 	sts	0x0AB6, r22	; 0x800ab6 <proud>
    68e8:	81 e0       	ldi	r24, 0x01	; 1
    68ea:	80 93 b3 0a 	sts	0x0AB3, r24	; 0x800ab3 <a2d_run_now>
    68ee:	08 95       	ret
    68f0:	86 30       	cpi	r24, 0x06	; 6
    68f2:	29 f4       	brne	.+10     	; 0x68fe <a2d_complete(unsigned char, unsigned int)+0x22>
    68f4:	70 93 bd 0a 	sts	0x0ABD, r23	; 0x800abd <tritri+0x1>
    68f8:	60 93 bc 0a 	sts	0x0ABC, r22	; 0x800abc <tritri>
    68fc:	f5 cf       	rjmp	.-22     	; 0x68e8 <a2d_complete(unsigned char, unsigned int)+0xc>
    68fe:	85 30       	cpi	r24, 0x05	; 5
    6900:	29 f4       	brne	.+10     	; 0x690c <a2d_complete(unsigned char, unsigned int)+0x30>
    6902:	70 93 bb 0a 	sts	0x0ABB, r23	; 0x800abb <petnula+0x1>
    6906:	60 93 ba 0a 	sts	0x0ABA, r22	; 0x800aba <petnula>
    690a:	ee cf       	rjmp	.-36     	; 0x68e8 <a2d_complete(unsigned char, unsigned int)+0xc>
    690c:	84 30       	cpi	r24, 0x04	; 4
    690e:	29 f4       	brne	.+10     	; 0x691a <a2d_complete(unsigned char, unsigned int)+0x3e>
    6910:	70 93 b9 0a 	sts	0x0AB9, r23	; 0x800ab9 <dvanact+0x1>
    6914:	60 93 b8 0a 	sts	0x0AB8, r22	; 0x800ab8 <dvanact>
    6918:	e7 cf       	rjmp	.-50     	; 0x68e8 <a2d_complete(unsigned char, unsigned int)+0xc>
    691a:	87 30       	cpi	r24, 0x07	; 7
    691c:	29 f7       	brne	.-54     	; 0x68e8 <a2d_complete(unsigned char, unsigned int)+0xc>
    691e:	70 93 b5 0a 	sts	0x0AB5, r23	; 0x800ab5 <light_curr+0x1>
    6922:	60 93 b4 0a 	sts	0x0AB4, r22	; 0x800ab4 <light_curr>
    6926:	e0 cf       	rjmp	.-64     	; 0x68e8 <a2d_complete(unsigned char, unsigned int)+0xc>

00006928 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_incjjh():
    6928:	fc 01       	movw	r30, r24
    692a:	e7 57       	subi	r30, 0x77	; 119
    692c:	f5 4f       	sbci	r31, 0xF5	; 245
    692e:	90 81       	ld	r25, Z
    6930:	20 91 88 0a 	lds	r18, 0x0A88	; 0x800a88 <menu_slider_data_max>
    6934:	80 91 86 0a 	lds	r24, 0x0A86	; 0x800a86 <menu_slider_data_max_element>
    6938:	28 1b       	sub	r18, r24
    693a:	33 0b       	sbc	r19, r19
    693c:	92 17       	cp	r25, r18
    693e:	13 06       	cpc	r1, r19
    6940:	14 f4       	brge	.+4      	; 0x6946 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)+0x1e>
    6942:	9f 5f       	subi	r25, 0xFF	; 255
    6944:	90 83       	st	Z, r25
    6946:	08 95       	ret

00006948 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_decjjh():
    6948:	fc 01       	movw	r30, r24
    694a:	e7 57       	subi	r30, 0x77	; 119
    694c:	f5 4f       	sbci	r31, 0xF5	; 245
    694e:	90 81       	ld	r25, Z
    6950:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <menu_slider_data_min>
    6954:	89 17       	cp	r24, r25
    6956:	10 f4       	brcc	.+4      	; 0x695c <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)+0x14>
    6958:	91 50       	subi	r25, 0x01	; 1
    695a:	90 83       	st	Z, r25
    695c:	08 95       	ret

0000695e <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
    695e:	8a e0       	ldi	r24, 0x0A	; 10
    6960:	08 95       	ret

00006962 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
    6962:	ef e5       	ldi	r30, 0x5F	; 95
    6964:	f1 e1       	ldi	r31, 0x11	; 17
    6966:	80 e0       	ldi	r24, 0x00	; 0
    6968:	91 85       	ldd	r25, Z+9	; 0x09
    696a:	91 30       	cpi	r25, 0x01	; 1
    696c:	09 f4       	brne	.+2      	; 0x6970 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    696e:	8f 5f       	subi	r24, 0xFF	; 255
    6970:	3b 96       	adiw	r30, 0x0b	; 11
    6972:	91 e1       	ldi	r25, 0x11	; 17
    6974:	e1 3a       	cpi	r30, 0xA1	; 161
    6976:	f9 07       	cpc	r31, r25
    6978:	b9 f7       	brne	.-18     	; 0x6968 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
    697a:	08 95       	ret

0000697c <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z38button_get_show_default_temp_max_itemsjjh():
    697c:	00 97       	sbiw	r24, 0x00	; 0
    697e:	31 f4       	brne	.+12     	; 0x698c <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x10>
    6980:	80 91 8e 0a 	lds	r24, 0x0A8E	; 0x800a8e <use_tds>
    6984:	90 91 8f 0a 	lds	r25, 0x0A8F	; 0x800a8f <use_rtds>
    6988:	89 0f       	add	r24, r25
    698a:	08 95       	ret
    698c:	01 97       	sbiw	r24, 0x01	; 1
    698e:	09 f0       	breq	.+2      	; 0x6992 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x16>
    6990:	08 95       	ret
    6992:	80 e1       	ldi	r24, 0x10	; 16
    6994:	08 95       	ret

00006996 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z35button_get_show_default_temp_activejjh():
    6996:	81 e0       	ldi	r24, 0x01	; 1
    6998:	90 91 9d 0a 	lds	r25, 0x0A9D	; 0x800a9d <default_show_temp>
    699c:	94 13       	cpse	r25, r20
    699e:	80 e0       	ldi	r24, 0x00	; 0
    69a0:	08 95       	ret

000069a2 <switch_brightness_automode_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z41switch_brightness_automode_get_status_fntjjh():
    69a2:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <brigthness_display_mode>
    69a6:	88 1f       	adc	r24, r24
    69a8:	88 27       	eor	r24, r24
    69aa:	88 1f       	adc	r24, r24
    69ac:	08 95       	ret

000069ae <preload_display_setting_brightness(unsigned int, unsigned int, unsigned char)>:
_Z34preload_display_setting_brightnessjjh():
    69ae:	cf 93       	push	r28
    69b0:	df 93       	push	r29
_Z29display_function_set_variableffffhhhhPFvjfhE():
    69b2:	ce e2       	ldi	r28, 0x2E	; 46
    69b4:	da e0       	ldi	r29, 0x0A	; 10
_Z34preload_display_setting_brightnessjjh():
    69b6:	60 91 92 0a 	lds	r22, 0x0A92	; 0x800a92 <brigthness_display_values>
    69ba:	70 e0       	ldi	r23, 0x00	; 0
    69bc:	90 e0       	ldi	r25, 0x00	; 0
    69be:	80 e0       	ldi	r24, 0x00	; 0
    69c0:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
    69c4:	68 83       	st	Y, r22
    69c6:	79 83       	std	Y+1, r23	; 0x01
    69c8:	8a 83       	std	Y+2, r24	; 0x02
    69ca:	9b 83       	std	Y+3, r25	; 0x03
_Z29display_function_set_variableffffhhhhPFvjfhE():
    69cc:	80 e0       	ldi	r24, 0x00	; 0
    69ce:	90 e0       	ldi	r25, 0x00	; 0
    69d0:	a0 ea       	ldi	r26, 0xA0	; 160
    69d2:	b0 e4       	ldi	r27, 0x40	; 64
    69d4:	88 87       	std	Y+8, r24	; 0x08
    69d6:	99 87       	std	Y+9, r25	; 0x09
    69d8:	aa 87       	std	Y+10, r26	; 0x0a
    69da:	bb 87       	std	Y+11, r27	; 0x0b
    69dc:	40 e0       	ldi	r20, 0x00	; 0
    69de:	50 e0       	ldi	r21, 0x00	; 0
    69e0:	68 ec       	ldi	r22, 0xC8	; 200
    69e2:	72 e4       	ldi	r23, 0x42	; 66
    69e4:	4c 83       	std	Y+4, r20	; 0x04
    69e6:	5d 83       	std	Y+5, r21	; 0x05
    69e8:	6e 83       	std	Y+6, r22	; 0x06
    69ea:	7f 83       	std	Y+7, r23	; 0x07
    69ec:	8e 87       	std	Y+14, r24	; 0x0e
    69ee:	9f 87       	std	Y+15, r25	; 0x0f
    69f0:	a8 8b       	std	Y+16, r26	; 0x10
    69f2:	b9 8b       	std	Y+17, r27	; 0x11
    69f4:	81 e0       	ldi	r24, 0x01	; 1
    69f6:	8d 87       	std	Y+13, r24	; 0x0d
    69f8:	1a 8a       	std	Y+18, r1	; 0x12
    69fa:	8c 87       	std	Y+12, r24	; 0x0c
    69fc:	8a ee       	ldi	r24, 0xEA	; 234
    69fe:	97 e3       	ldi	r25, 0x37	; 55
    6a00:	9c 8b       	std	Y+20, r25	; 0x14
    6a02:	8b 8b       	std	Y+19, r24	; 0x13
_Z34preload_display_setting_brightnessjjh():
    6a04:	df 91       	pop	r29
    6a06:	cf 91       	pop	r28
    6a08:	08 95       	ret

00006a0a <display_enable_show_brightness_manual_mode(unsigned int, unsigned int, unsigned char)>:
_Z41switch_brightness_automode_get_status_fntjjh():
    6a0a:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <brigthness_display_mode>
    6a0e:	80 95       	com	r24
_Z42display_enable_show_brightness_manual_modejjh():
    6a10:	88 1f       	adc	r24, r24
    6a12:	88 27       	eor	r24, r24
    6a14:	88 1f       	adc	r24, r24
    6a16:	08 95       	ret

00006a18 <button_set_brightness_auto_shutdown_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>:
_Z54button_set_brightness_auto_shutdown_dyn_symbol_onclickjjh():
    6a18:	84 e9       	ldi	r24, 0x94	; 148
    6a1a:	92 e0       	ldi	r25, 0x02	; 2
    6a1c:	0c 94 1b e3 	jmp	0x1c636	; 0x1c636 <puts>

00006a20 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z25display_element_rectanglejjjjhhPc():
    6a20:	0f 93       	push	r16
    6a22:	1f 93       	push	r17
    6a24:	8b 01       	movw	r16, r22
    6a26:	02 0f       	add	r16, r18
    6a28:	13 1f       	adc	r17, r19
    6a2a:	9c 01       	movw	r18, r24
    6a2c:	24 0f       	add	r18, r20
    6a2e:	35 1f       	adc	r19, r21
    6a30:	ab 01       	movw	r20, r22
    6a32:	bc 01       	movw	r22, r24
    6a34:	85 e1       	ldi	r24, 0x15	; 21
    6a36:	9c e0       	ldi	r25, 0x0C	; 12
    6a38:	0e 94 d5 96 	call	0x12daa	; 0x12daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    6a3c:	1f 91       	pop	r17
    6a3e:	0f 91       	pop	r16
    6a40:	08 95       	ret

00006a42 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z31display_element_vertical_sliderjjjjhhPc():
    6a42:	3f 92       	push	r3
    6a44:	4f 92       	push	r4
    6a46:	5f 92       	push	r5
    6a48:	6f 92       	push	r6
    6a4a:	7f 92       	push	r7
    6a4c:	8f 92       	push	r8
    6a4e:	9f 92       	push	r9
    6a50:	af 92       	push	r10
    6a52:	bf 92       	push	r11
    6a54:	cf 92       	push	r12
    6a56:	df 92       	push	r13
    6a58:	ef 92       	push	r14
    6a5a:	ff 92       	push	r15
    6a5c:	0f 93       	push	r16
    6a5e:	1f 93       	push	r17
    6a60:	cf 93       	push	r28
    6a62:	df 93       	push	r29
    6a64:	3c 01       	movw	r6, r24
    6a66:	6b 01       	movw	r12, r22
    6a68:	ea 01       	movw	r28, r20
    6a6a:	29 01       	movw	r4, r18
    6a6c:	30 2e       	mov	r3, r16
    6a6e:	70 e0       	ldi	r23, 0x00	; 0
    6a70:	60 e0       	ldi	r22, 0x00	; 0
    6a72:	85 e1       	ldi	r24, 0x15	; 21
    6a74:	9c e0       	ldi	r25, 0x0C	; 12
    6a76:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    6a7a:	f1 2c       	mov	r15, r1
    6a7c:	e1 2c       	mov	r14, r1
    6a7e:	46 01       	movw	r8, r12
    6a80:	84 0c       	add	r8, r4
    6a82:	95 1c       	adc	r9, r5
    6a84:	53 01       	movw	r10, r6
    6a86:	ac 0e       	add	r10, r28
    6a88:	bd 1e       	adc	r11, r29
    6a8a:	84 01       	movw	r16, r8
    6a8c:	0e 19       	sub	r16, r14
    6a8e:	1f 09       	sbc	r17, r15
    6a90:	95 01       	movw	r18, r10
    6a92:	2e 19       	sub	r18, r14
    6a94:	3f 09       	sbc	r19, r15
    6a96:	a7 01       	movw	r20, r14
    6a98:	4c 0d       	add	r20, r12
    6a9a:	5d 1d       	adc	r21, r13
    6a9c:	b7 01       	movw	r22, r14
    6a9e:	66 0d       	add	r22, r6
    6aa0:	77 1d       	adc	r23, r7
    6aa2:	85 e1       	ldi	r24, 0x15	; 21
    6aa4:	9c e0       	ldi	r25, 0x0C	; 12
    6aa6:	0e 94 d5 96 	call	0x12daa	; 0x12daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    6aaa:	8f ef       	ldi	r24, 0xFF	; 255
    6aac:	e8 1a       	sub	r14, r24
    6aae:	f8 0a       	sbc	r15, r24
    6ab0:	83 e0       	ldi	r24, 0x03	; 3
    6ab2:	e8 16       	cp	r14, r24
    6ab4:	f1 04       	cpc	r15, r1
    6ab6:	49 f7       	brne	.-46     	; 0x6a8a <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x48>
    6ab8:	6f ef       	ldi	r22, 0xFF	; 255
    6aba:	7f ef       	ldi	r23, 0xFF	; 255
    6abc:	85 e1       	ldi	r24, 0x15	; 21
    6abe:	9c e0       	ldi	r25, 0x0C	; 12
    6ac0:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    6ac4:	23 97       	sbiw	r28, 0x03	; 3
    6ac6:	c6 0d       	add	r28, r6
    6ac8:	d7 1d       	adc	r29, r7
    6aca:	83 e0       	ldi	r24, 0x03	; 3
    6acc:	68 0e       	add	r6, r24
    6ace:	71 1c       	adc	r7, r1
    6ad0:	82 01       	movw	r16, r4
    6ad2:	03 50       	subi	r16, 0x03	; 3
    6ad4:	11 09       	sbc	r17, r1
    6ad6:	0c 0d       	add	r16, r12
    6ad8:	1d 1d       	adc	r17, r13
    6ada:	a6 01       	movw	r20, r12
    6adc:	4d 5f       	subi	r20, 0xFD	; 253
    6ade:	5f 4f       	sbci	r21, 0xFF	; 255
    6ae0:	9e 01       	movw	r18, r28
    6ae2:	b3 01       	movw	r22, r6
    6ae4:	85 e1       	ldi	r24, 0x15	; 21
    6ae6:	9c e0       	ldi	r25, 0x0C	; 12
    6ae8:	0e 94 4e 96 	call	0x12c9c	; 0x12c9c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    6aec:	60 91 88 0a 	lds	r22, 0x0A88	; 0x800a88 <menu_slider_data_max>
    6af0:	80 91 86 0a 	lds	r24, 0x0A86	; 0x800a86 <menu_slider_data_max_element>
    6af4:	68 1b       	sub	r22, r24
    6af6:	77 0b       	sbc	r23, r23
    6af8:	6f 5f       	subi	r22, 0xFF	; 255
    6afa:	7f 4f       	sbci	r23, 0xFF	; 255
    6afc:	c2 01       	movw	r24, r4
    6afe:	0e 94 06 de 	call	0x1bc0c	; 0x1bc0c <__udivmodhi4>
    6b02:	e3 2d       	mov	r30, r3
    6b04:	f0 e0       	ldi	r31, 0x00	; 0
    6b06:	e7 57       	subi	r30, 0x77	; 119
    6b08:	f5 4f       	sbci	r31, 0xF5	; 245
    6b0a:	f0 80       	ld	r15, Z
    6b0c:	f6 9e       	mul	r15, r22
    6b0e:	f0 2c       	mov	r15, r0
    6b10:	11 24       	eor	r1, r1
    6b12:	6a e9       	ldi	r22, 0x9A	; 154
    6b14:	76 ed       	ldi	r23, 0xD6	; 214
    6b16:	85 e1       	ldi	r24, 0x15	; 21
    6b18:	9c e0       	ldi	r25, 0x0C	; 12
    6b1a:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    6b1e:	cf 0c       	add	r12, r15
    6b20:	d1 1c       	adc	r13, r1
    6b22:	86 01       	movw	r16, r12
    6b24:	06 5f       	subi	r16, 0xF6	; 246
    6b26:	1f 4f       	sbci	r17, 0xFF	; 255
    6b28:	a6 01       	movw	r20, r12
    6b2a:	4b 5f       	subi	r20, 0xFB	; 251
    6b2c:	5f 4f       	sbci	r21, 0xFF	; 255
    6b2e:	9e 01       	movw	r18, r28
    6b30:	b3 01       	movw	r22, r6
    6b32:	85 e1       	ldi	r24, 0x15	; 21
    6b34:	9c e0       	ldi	r25, 0x0C	; 12
    6b36:	0e 94 4e 96 	call	0x12c9c	; 0x12c9c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    6b3a:	df 91       	pop	r29
    6b3c:	cf 91       	pop	r28
    6b3e:	1f 91       	pop	r17
    6b40:	0f 91       	pop	r16
    6b42:	ff 90       	pop	r15
    6b44:	ef 90       	pop	r14
    6b46:	df 90       	pop	r13
    6b48:	cf 90       	pop	r12
    6b4a:	bf 90       	pop	r11
    6b4c:	af 90       	pop	r10
    6b4e:	9f 90       	pop	r9
    6b50:	8f 90       	pop	r8
    6b52:	7f 90       	pop	r7
    6b54:	6f 90       	pop	r6
    6b56:	5f 90       	pop	r5
    6b58:	4f 90       	pop	r4
    6b5a:	3f 90       	pop	r3
    6b5c:	08 95       	ret

00006b5e <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>:
_Z35display_function_set_variable_minusjjh():
    6b5e:	cf 92       	push	r12
    6b60:	df 92       	push	r13
    6b62:	ef 92       	push	r14
    6b64:	ff 92       	push	r15
    6b66:	0f 93       	push	r16
    6b68:	1f 93       	push	r17
    6b6a:	cf 93       	push	r28
    6b6c:	df 93       	push	r29
    6b6e:	25 e1       	ldi	r18, 0x15	; 21
    6b70:	28 9f       	mul	r18, r24
    6b72:	e0 01       	movw	r28, r0
    6b74:	29 9f       	mul	r18, r25
    6b76:	d0 0d       	add	r29, r0
    6b78:	11 24       	eor	r1, r1
    6b7a:	c2 5d       	subi	r28, 0xD2	; 210
    6b7c:	d5 4f       	sbci	r29, 0xF5	; 245
    6b7e:	2e 85       	ldd	r18, Y+14	; 0x0e
    6b80:	3f 85       	ldd	r19, Y+15	; 0x0f
    6b82:	48 89       	ldd	r20, Y+16	; 0x10
    6b84:	59 89       	ldd	r21, Y+17	; 0x11
    6b86:	68 81       	ld	r22, Y
    6b88:	79 81       	ldd	r23, Y+1	; 0x01
    6b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    6b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    6b8e:	0e 94 ac db 	call	0x1b758	; 0x1b758 <__subsf3>
    6b92:	6b 01       	movw	r12, r22
    6b94:	7c 01       	movw	r14, r24
    6b96:	28 85       	ldd	r18, Y+8	; 0x08
    6b98:	39 85       	ldd	r19, Y+9	; 0x09
    6b9a:	4a 85       	ldd	r20, Y+10	; 0x0a
    6b9c:	5b 85       	ldd	r21, Y+11	; 0x0b
    6b9e:	0e 94 78 dd 	call	0x1baf0	; 0x1baf0 <__gesf2>
    6ba2:	87 fd       	sbrc	r24, 7
    6ba4:	1f c0       	rjmp	.+62     	; 0x6be4 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x86>
    6ba6:	c8 82       	st	Y, r12
    6ba8:	d9 82       	std	Y+1, r13	; 0x01
    6baa:	ea 82       	std	Y+2, r14	; 0x02
    6bac:	fb 82       	std	Y+3, r15	; 0x03
    6bae:	8c 85       	ldd	r24, Y+12	; 0x0c
    6bb0:	81 30       	cpi	r24, 0x01	; 1
    6bb2:	c1 f4       	brne	.+48     	; 0x6be4 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x86>
    6bb4:	0b 89       	ldd	r16, Y+19	; 0x13
    6bb6:	1c 89       	ldd	r17, Y+20	; 0x14
    6bb8:	c7 01       	movw	r24, r14
    6bba:	b6 01       	movw	r22, r12
    6bbc:	0e 94 d0 bd 	call	0x17ba0	; 0x17ba0 <float_to_int(float)>
    6bc0:	48 81       	ld	r20, Y
    6bc2:	59 81       	ldd	r21, Y+1	; 0x01
    6bc4:	6a 81       	ldd	r22, Y+2	; 0x02
    6bc6:	7b 81       	ldd	r23, Y+3	; 0x03
    6bc8:	9a 89       	ldd	r25, Y+18	; 0x12
    6bca:	28 2f       	mov	r18, r24
    6bcc:	89 2f       	mov	r24, r25
    6bce:	90 e0       	ldi	r25, 0x00	; 0
    6bd0:	f8 01       	movw	r30, r16
    6bd2:	df 91       	pop	r29
    6bd4:	cf 91       	pop	r28
    6bd6:	1f 91       	pop	r17
    6bd8:	0f 91       	pop	r16
    6bda:	ff 90       	pop	r15
    6bdc:	ef 90       	pop	r14
    6bde:	df 90       	pop	r13
    6be0:	cf 90       	pop	r12
    6be2:	19 94       	eijmp
    6be4:	df 91       	pop	r29
    6be6:	cf 91       	pop	r28
    6be8:	1f 91       	pop	r17
    6bea:	0f 91       	pop	r16
    6bec:	ff 90       	pop	r15
    6bee:	ef 90       	pop	r14
    6bf0:	df 90       	pop	r13
    6bf2:	cf 90       	pop	r12
    6bf4:	08 95       	ret

00006bf6 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>:
_Z34display_function_set_variable_plusjjh():
    6bf6:	cf 92       	push	r12
    6bf8:	df 92       	push	r13
    6bfa:	ef 92       	push	r14
    6bfc:	ff 92       	push	r15
    6bfe:	0f 93       	push	r16
    6c00:	1f 93       	push	r17
    6c02:	cf 93       	push	r28
    6c04:	df 93       	push	r29
    6c06:	25 e1       	ldi	r18, 0x15	; 21
    6c08:	28 9f       	mul	r18, r24
    6c0a:	e0 01       	movw	r28, r0
    6c0c:	29 9f       	mul	r18, r25
    6c0e:	d0 0d       	add	r29, r0
    6c10:	11 24       	eor	r1, r1
    6c12:	c2 5d       	subi	r28, 0xD2	; 210
    6c14:	d5 4f       	sbci	r29, 0xF5	; 245
    6c16:	2e 85       	ldd	r18, Y+14	; 0x0e
    6c18:	3f 85       	ldd	r19, Y+15	; 0x0f
    6c1a:	48 89       	ldd	r20, Y+16	; 0x10
    6c1c:	59 89       	ldd	r21, Y+17	; 0x11
    6c1e:	68 81       	ld	r22, Y
    6c20:	79 81       	ldd	r23, Y+1	; 0x01
    6c22:	8a 81       	ldd	r24, Y+2	; 0x02
    6c24:	9b 81       	ldd	r25, Y+3	; 0x03
    6c26:	0e 94 ad db 	call	0x1b75a	; 0x1b75a <__addsf3>
    6c2a:	6b 01       	movw	r12, r22
    6c2c:	7c 01       	movw	r14, r24
    6c2e:	2c 81       	ldd	r18, Y+4	; 0x04
    6c30:	3d 81       	ldd	r19, Y+5	; 0x05
    6c32:	4e 81       	ldd	r20, Y+6	; 0x06
    6c34:	5f 81       	ldd	r21, Y+7	; 0x07
    6c36:	0e 94 19 dc 	call	0x1b832	; 0x1b832 <__cmpsf2>
    6c3a:	18 16       	cp	r1, r24
    6c3c:	fc f0       	brlt	.+62     	; 0x6c7c <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x86>
    6c3e:	c8 82       	st	Y, r12
    6c40:	d9 82       	std	Y+1, r13	; 0x01
    6c42:	ea 82       	std	Y+2, r14	; 0x02
    6c44:	fb 82       	std	Y+3, r15	; 0x03
    6c46:	8c 85       	ldd	r24, Y+12	; 0x0c
    6c48:	81 30       	cpi	r24, 0x01	; 1
    6c4a:	c1 f4       	brne	.+48     	; 0x6c7c <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x86>
    6c4c:	0b 89       	ldd	r16, Y+19	; 0x13
    6c4e:	1c 89       	ldd	r17, Y+20	; 0x14
    6c50:	c7 01       	movw	r24, r14
    6c52:	b6 01       	movw	r22, r12
    6c54:	0e 94 d0 bd 	call	0x17ba0	; 0x17ba0 <float_to_int(float)>
    6c58:	48 81       	ld	r20, Y
    6c5a:	59 81       	ldd	r21, Y+1	; 0x01
    6c5c:	6a 81       	ldd	r22, Y+2	; 0x02
    6c5e:	7b 81       	ldd	r23, Y+3	; 0x03
    6c60:	9a 89       	ldd	r25, Y+18	; 0x12
    6c62:	28 2f       	mov	r18, r24
    6c64:	89 2f       	mov	r24, r25
    6c66:	90 e0       	ldi	r25, 0x00	; 0
    6c68:	f8 01       	movw	r30, r16
    6c6a:	df 91       	pop	r29
    6c6c:	cf 91       	pop	r28
    6c6e:	1f 91       	pop	r17
    6c70:	0f 91       	pop	r16
    6c72:	ff 90       	pop	r15
    6c74:	ef 90       	pop	r14
    6c76:	df 90       	pop	r13
    6c78:	cf 90       	pop	r12
    6c7a:	19 94       	eijmp
    6c7c:	df 91       	pop	r29
    6c7e:	cf 91       	pop	r28
    6c80:	1f 91       	pop	r17
    6c82:	0f 91       	pop	r16
    6c84:	ff 90       	pop	r15
    6c86:	ef 90       	pop	r14
    6c88:	df 90       	pop	r13
    6c8a:	cf 90       	pop	r12
    6c8c:	08 95       	ret

00006c8e <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z53button_set_brightness_auto_shutdown_get_status_stringhhhPcS_():
    6c8e:	0f 93       	push	r16
    6c90:	1f 93       	push	r17
    6c92:	c9 01       	movw	r24, r18
    6c94:	6d eb       	ldi	r22, 0xBD	; 189
    6c96:	72 e0       	ldi	r23, 0x02	; 2
    6c98:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    6c9c:	6a ed       	ldi	r22, 0xDA	; 218
    6c9e:	72 e0       	ldi	r23, 0x02	; 2
    6ca0:	c8 01       	movw	r24, r16
    6ca2:	1f 91       	pop	r17
    6ca4:	0f 91       	pop	r16
    6ca6:	0c 94 26 e2 	jmp	0x1c44c	; 0x1c44c <strcpy>

00006caa <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>:
_Z35display_element_set_string_del_charjjh():
    6caa:	8d ee       	ldi	r24, 0xED	; 237
    6cac:	99 e0       	ldi	r25, 0x09	; 9
    6cae:	fc 01       	movw	r30, r24
    6cb0:	01 90       	ld	r0, Z+
    6cb2:	00 20       	and	r0, r0
    6cb4:	e9 f7       	brne	.-6      	; 0x6cb0 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x6>
    6cb6:	cf 01       	movw	r24, r30
    6cb8:	8e 5e       	subi	r24, 0xEE	; 238
    6cba:	99 40       	sbci	r25, 0x09	; 9
    6cbc:	88 23       	and	r24, r24
    6cbe:	29 f0       	breq	.+10     	; 0x6cca <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x20>
    6cc0:	99 27       	eor	r25, r25
    6cc2:	fc 01       	movw	r30, r24
    6cc4:	e4 51       	subi	r30, 0x14	; 20
    6cc6:	f6 4f       	sbci	r31, 0xF6	; 246
    6cc8:	10 82       	st	Z, r1
    6cca:	08 95       	ret

00006ccc <menu_tds_save_offset(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_offsetjfh():
    6ccc:	cf 93       	push	r28
    6cce:	df 93       	push	r29
_Z35display_function_get_variable_floath():
    6cd0:	95 e1       	ldi	r25, 0x15	; 21
    6cd2:	89 9f       	mul	r24, r25
    6cd4:	e0 01       	movw	r28, r0
    6cd6:	11 24       	eor	r1, r1
    6cd8:	c2 5d       	subi	r28, 0xD2	; 210
    6cda:	d5 4f       	sbci	r29, 0xF5	; 245
_Z20menu_tds_save_offsetjfh():
    6cdc:	20 e0       	ldi	r18, 0x00	; 0
    6cde:	30 e0       	ldi	r19, 0x00	; 0
    6ce0:	4a e7       	ldi	r20, 0x7A	; 122
    6ce2:	54 e4       	ldi	r21, 0x44	; 68
    6ce4:	68 81       	ld	r22, Y
    6ce6:	79 81       	ldd	r23, Y+1	; 0x01
    6ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    6cea:	9b 81       	ldd	r25, Y+3	; 0x03
    6cec:	0e 94 7d dd 	call	0x1bafa	; 0x1bafa <__mulsf3>
    6cf0:	0e 94 90 dc 	call	0x1b920	; 0x1b920 <__fixsfsi>
    6cf4:	8a 89       	ldd	r24, Y+18	; 0x12
    6cf6:	df 91       	pop	r29
    6cf8:	cf 91       	pop	r28
    6cfa:	0c 94 ff 8c 	jmp	0x119fe	; 0x119fe <tds_set_offset(unsigned char, int)>

00006cfe <menu_tds_save_period(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_periodjfh():
    6cfe:	cf 93       	push	r28
    6d00:	df 93       	push	r29
_Z35display_function_get_variable_floath():
    6d02:	95 e1       	ldi	r25, 0x15	; 21
    6d04:	89 9f       	mul	r24, r25
    6d06:	e0 01       	movw	r28, r0
    6d08:	11 24       	eor	r1, r1
    6d0a:	c2 5d       	subi	r28, 0xD2	; 210
    6d0c:	d5 4f       	sbci	r29, 0xF5	; 245
_Z20menu_tds_save_periodjfh():
    6d0e:	68 81       	ld	r22, Y
    6d10:	79 81       	ldd	r23, Y+1	; 0x01
    6d12:	8a 81       	ldd	r24, Y+2	; 0x02
    6d14:	9b 81       	ldd	r25, Y+3	; 0x03
    6d16:	0e 94 97 dc 	call	0x1b92e	; 0x1b92e <__fixunssfsi>
    6d1a:	8a 89       	ldd	r24, Y+18	; 0x12
    6d1c:	df 91       	pop	r29
    6d1e:	cf 91       	pop	r28
    6d20:	0c 94 41 8d 	jmp	0x11a82	; 0x11a82 <tds_set_period(unsigned char, unsigned char)>

00006d24 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>:
_Z20helper_tds_associatejjh():
    6d24:	0c 94 56 8e 	jmp	0x11cac	; 0x11cac <tds_associate(unsigned char)>

00006d28 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
    6d28:	7f 92       	push	r7
    6d2a:	8f 92       	push	r8
    6d2c:	9f 92       	push	r9
    6d2e:	af 92       	push	r10
    6d30:	bf 92       	push	r11
    6d32:	cf 92       	push	r12
    6d34:	df 92       	push	r13
    6d36:	ef 92       	push	r14
    6d38:	ff 92       	push	r15
    6d3a:	0f 93       	push	r16
    6d3c:	1f 93       	push	r17
    6d3e:	cf 93       	push	r28
    6d40:	df 93       	push	r29
    6d42:	cd b7       	in	r28, 0x3d	; 61
    6d44:	de b7       	in	r29, 0x3e	; 62
    6d46:	6a 97       	sbiw	r28, 0x1a	; 26
    6d48:	0f b6       	in	r0, 0x3f	; 63
    6d4a:	f8 94       	cli
    6d4c:	de bf       	out	0x3e, r29	; 62
    6d4e:	0f be       	out	0x3f, r0	; 63
    6d50:	cd bf       	out	0x3d, r28	; 61
    6d52:	98 2e       	mov	r9, r24
    6d54:	82 2e       	mov	r8, r18
    6d56:	73 2e       	mov	r7, r19
    6d58:	78 01       	movw	r14, r16
    6d5a:	69 e3       	ldi	r22, 0x39	; 57
    6d5c:	7a e5       	ldi	r23, 0x5A	; 90
    6d5e:	82 2f       	mov	r24, r18
    6d60:	93 2f       	mov	r25, r19
    6d62:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    6d66:	68 e5       	ldi	r22, 0x58	; 88
    6d68:	73 e0       	ldi	r23, 0x03	; 3
    6d6a:	c8 01       	movw	r24, r16
    6d6c:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    6d70:	4b e0       	ldi	r20, 0x0B	; 11
    6d72:	49 9d       	mul	r20, r9
    6d74:	c0 01       	movw	r24, r0
    6d76:	11 24       	eor	r1, r1
    6d78:	9c 01       	movw	r18, r24
    6d7a:	21 5a       	subi	r18, 0xA1	; 161
    6d7c:	3e 4e       	sbci	r19, 0xEE	; 238
    6d7e:	69 01       	movw	r12, r18
    6d80:	f9 01       	movw	r30, r18
    6d82:	81 85       	ldd	r24, Z+9	; 0x09
    6d84:	81 30       	cpi	r24, 0x01	; 1
    6d86:	89 f5       	brne	.+98     	; 0x6dea <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>
    6d88:	a9 01       	movw	r20, r18
    6d8a:	00 e1       	ldi	r16, 0x10	; 16
    6d8c:	28 e0       	ldi	r18, 0x08	; 8
    6d8e:	6a e3       	ldi	r22, 0x3A	; 58
    6d90:	ce 01       	movw	r24, r28
    6d92:	01 96       	adiw	r24, 0x01	; 1
    6d94:	5c 01       	movw	r10, r24
    6d96:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    6d9a:	bf 92       	push	r11
    6d9c:	af 92       	push	r10
    6d9e:	1f 92       	push	r1
    6da0:	9f 92       	push	r9
    6da2:	8e ed       	ldi	r24, 0xDE	; 222
    6da4:	92 e0       	ldi	r25, 0x02	; 2
    6da6:	9f 93       	push	r25
    6da8:	8f 93       	push	r24
    6daa:	7f 92       	push	r7
    6dac:	8f 92       	push	r8
    6dae:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    6db2:	0f b6       	in	r0, 0x3f	; 63
    6db4:	f8 94       	cli
    6db6:	de bf       	out	0x3e, r29	; 62
    6db8:	0f be       	out	0x3f, r0	; 63
    6dba:	cd bf       	out	0x3d, r28	; 61
    6dbc:	f6 01       	movw	r30, r12
    6dbe:	82 85       	ldd	r24, Z+10	; 0x0a
    6dc0:	8f 3f       	cpi	r24, 0xFF	; 255
    6dc2:	39 f1       	breq	.+78     	; 0x6e12 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xea>
    6dc4:	68 e4       	ldi	r22, 0x48	; 72
    6dc6:	7a e5       	ldi	r23, 0x5A	; 90
    6dc8:	c7 01       	movw	r24, r14
    6dca:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    6dce:	b5 01       	movw	r22, r10
    6dd0:	f6 01       	movw	r30, r12
    6dd2:	82 85       	ldd	r24, Z+10	; 0x0a
    6dd4:	0e 94 b1 8c 	call	0x11962	; 0x11962 <tds_get_name(unsigned char, char*)>
    6dd8:	68 e8       	ldi	r22, 0x88	; 136
    6dda:	77 e0       	ldi	r23, 0x07	; 7
    6ddc:	c7 01       	movw	r24, r14
    6dde:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    6de2:	b5 01       	movw	r22, r10
    6de4:	c7 01       	movw	r24, r14
    6de6:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    6dea:	6a 96       	adiw	r28, 0x1a	; 26
    6dec:	0f b6       	in	r0, 0x3f	; 63
    6dee:	f8 94       	cli
    6df0:	de bf       	out	0x3e, r29	; 62
    6df2:	0f be       	out	0x3f, r0	; 63
    6df4:	cd bf       	out	0x3d, r28	; 61
    6df6:	df 91       	pop	r29
    6df8:	cf 91       	pop	r28
    6dfa:	1f 91       	pop	r17
    6dfc:	0f 91       	pop	r16
    6dfe:	ff 90       	pop	r15
    6e00:	ef 90       	pop	r14
    6e02:	df 90       	pop	r13
    6e04:	cf 90       	pop	r12
    6e06:	bf 90       	pop	r11
    6e08:	af 90       	pop	r10
    6e0a:	9f 90       	pop	r9
    6e0c:	8f 90       	pop	r8
    6e0e:	7f 90       	pop	r7
    6e10:	08 95       	ret
    6e12:	6b e5       	ldi	r22, 0x5B	; 91
    6e14:	7a e5       	ldi	r23, 0x5A	; 90
    6e16:	c7 01       	movw	r24, r14
    6e18:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    6e1c:	e6 cf       	rjmp	.-52     	; 0x6dea <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>

00006e1e <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
    6e1e:	0f 93       	push	r16
    6e20:	1f 93       	push	r17
    6e22:	cf 93       	push	r28
    6e24:	df 93       	push	r29
    6e26:	00 d0       	rcall	.+0      	; 0x6e28 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>
    6e28:	00 d0       	rcall	.+0      	; 0x6e2a <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    6e2a:	1f 92       	push	r1
    6e2c:	1f 92       	push	r1
    6e2e:	cd b7       	in	r28, 0x3d	; 61
    6e30:	de b7       	in	r29, 0x3e	; 62
    6e32:	c9 01       	movw	r24, r18
    6e34:	63 e3       	ldi	r22, 0x33	; 51
    6e36:	77 e5       	ldi	r23, 0x57	; 87
    6e38:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    6e3c:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <brigthness_display_mode>
    6e40:	87 ff       	sbrs	r24, 7
    6e42:	1a c0       	rjmp	.+52     	; 0x6e78 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
    6e44:	68 eb       	ldi	r22, 0xB8	; 184
    6e46:	75 e5       	ldi	r23, 0x55	; 85
    6e48:	c8 01       	movw	r24, r16
    6e4a:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    6e4e:	80 91 91 0a 	lds	r24, 0x0A91	; 0x800a91 <brigthness_display_auto_values>
    6e52:	86 95       	lsr	r24
itoa():
    6e54:	4a e0       	ldi	r20, 0x0A	; 10
    6e56:	be 01       	movw	r22, r28
    6e58:	6f 5f       	subi	r22, 0xFF	; 255
    6e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    6e5c:	90 e0       	ldi	r25, 0x00	; 0
    6e5e:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
    6e62:	be 01       	movw	r22, r28
    6e64:	6f 5f       	subi	r22, 0xFF	; 255
    6e66:	7f 4f       	sbci	r23, 0xFF	; 255
    6e68:	c8 01       	movw	r24, r16
    6e6a:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    6e6e:	65 ee       	ldi	r22, 0xE5	; 229
    6e70:	72 e0       	ldi	r23, 0x02	; 2
    6e72:	c8 01       	movw	r24, r16
    6e74:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    6e78:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <brigthness_display_mode>
    6e7c:	87 fd       	sbrc	r24, 7
    6e7e:	23 c0       	rjmp	.+70     	; 0x6ec6 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa8>
    6e80:	67 ea       	ldi	r22, 0xA7	; 167
    6e82:	75 e5       	ldi	r23, 0x55	; 85
    6e84:	c8 01       	movw	r24, r16
    6e86:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    6e8a:	80 91 92 0a 	lds	r24, 0x0A92	; 0x800a92 <brigthness_display_values>
itoa():
    6e8e:	4a e0       	ldi	r20, 0x0A	; 10
    6e90:	be 01       	movw	r22, r28
    6e92:	6f 5f       	subi	r22, 0xFF	; 255
    6e94:	7f 4f       	sbci	r23, 0xFF	; 255
    6e96:	90 e0       	ldi	r25, 0x00	; 0
    6e98:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
    6e9c:	be 01       	movw	r22, r28
    6e9e:	6f 5f       	subi	r22, 0xFF	; 255
    6ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ea2:	c8 01       	movw	r24, r16
    6ea4:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    6ea8:	65 ee       	ldi	r22, 0xE5	; 229
    6eaa:	72 e0       	ldi	r23, 0x02	; 2
    6eac:	c8 01       	movw	r24, r16
    6eae:	28 96       	adiw	r28, 0x08	; 8
    6eb0:	0f b6       	in	r0, 0x3f	; 63
    6eb2:	f8 94       	cli
    6eb4:	de bf       	out	0x3e, r29	; 62
    6eb6:	0f be       	out	0x3f, r0	; 63
    6eb8:	cd bf       	out	0x3d, r28	; 61
    6eba:	df 91       	pop	r29
    6ebc:	cf 91       	pop	r28
    6ebe:	1f 91       	pop	r17
    6ec0:	0f 91       	pop	r16
    6ec2:	0c 94 07 e2 	jmp	0x1c40e	; 0x1c40e <strcat>
    6ec6:	28 96       	adiw	r28, 0x08	; 8
    6ec8:	0f b6       	in	r0, 0x3f	; 63
    6eca:	f8 94       	cli
    6ecc:	de bf       	out	0x3e, r29	; 62
    6ece:	0f be       	out	0x3f, r0	; 63
    6ed0:	cd bf       	out	0x3d, r28	; 61
    6ed2:	df 91       	pop	r29
    6ed4:	cf 91       	pop	r28
    6ed6:	1f 91       	pop	r17
    6ed8:	0f 91       	pop	r16
    6eda:	08 95       	ret

00006edc <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z44switch_brightness_automode_get_status_stringhhhPcS_():
    6edc:	0f 93       	push	r16
    6ede:	1f 93       	push	r17
    6ee0:	cf 93       	push	r28
    6ee2:	df 93       	push	r29
    6ee4:	00 d0       	rcall	.+0      	; 0x6ee6 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>
    6ee6:	00 d0       	rcall	.+0      	; 0x6ee8 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    6ee8:	1f 92       	push	r1
    6eea:	1f 92       	push	r1
    6eec:	cd b7       	in	r28, 0x3d	; 61
    6eee:	de b7       	in	r29, 0x3e	; 62
    6ef0:	89 01       	movw	r16, r18
    6ef2:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <brigthness_display_mode>
    6ef6:	87 ff       	sbrs	r24, 7
    6ef8:	1a c0       	rjmp	.+52     	; 0x6f2e <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x52>
    6efa:	68 eb       	ldi	r22, 0xB8	; 184
    6efc:	75 e5       	ldi	r23, 0x55	; 85
    6efe:	c9 01       	movw	r24, r18
    6f00:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    6f04:	80 91 91 0a 	lds	r24, 0x0A91	; 0x800a91 <brigthness_display_auto_values>
    6f08:	86 95       	lsr	r24
itoa():
    6f0a:	4a e0       	ldi	r20, 0x0A	; 10
    6f0c:	be 01       	movw	r22, r28
    6f0e:	6f 5f       	subi	r22, 0xFF	; 255
    6f10:	7f 4f       	sbci	r23, 0xFF	; 255
    6f12:	90 e0       	ldi	r25, 0x00	; 0
    6f14:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z44switch_brightness_automode_get_status_stringhhhPcS_():
    6f18:	be 01       	movw	r22, r28
    6f1a:	6f 5f       	subi	r22, 0xFF	; 255
    6f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    6f1e:	c8 01       	movw	r24, r16
    6f20:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    6f24:	65 ee       	ldi	r22, 0xE5	; 229
    6f26:	72 e0       	ldi	r23, 0x02	; 2
    6f28:	c8 01       	movw	r24, r16
    6f2a:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    6f2e:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <brigthness_display_mode>
    6f32:	87 fd       	sbrc	r24, 7
    6f34:	05 c0       	rjmp	.+10     	; 0x6f40 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x64>
    6f36:	67 ea       	ldi	r22, 0xA7	; 167
    6f38:	75 e5       	ldi	r23, 0x55	; 85
    6f3a:	c8 01       	movw	r24, r16
    6f3c:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    6f40:	28 96       	adiw	r28, 0x08	; 8
    6f42:	0f b6       	in	r0, 0x3f	; 63
    6f44:	f8 94       	cli
    6f46:	de bf       	out	0x3e, r29	; 62
    6f48:	0f be       	out	0x3f, r0	; 63
    6f4a:	cd bf       	out	0x3d, r28	; 61
    6f4c:	df 91       	pop	r29
    6f4e:	cf 91       	pop	r28
    6f50:	1f 91       	pop	r17
    6f52:	0f 91       	pop	r16
    6f54:	08 95       	ret

00006f56 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_default_term_set_modejjh():
    6f56:	cf 93       	push	r28
    6f58:	c8 2f       	mov	r28, r24
    6f5a:	80 91 9e 0a 	lds	r24, 0x0A9E	; 0x800a9e <default_ring>
    6f5e:	0e 94 ae 91 	call	0x1235c	; 0x1235c <thermostat_ring_get_active(unsigned char)>
    6f62:	8f 3f       	cpi	r24, 0xFF	; 255
    6f64:	41 f0       	breq	.+16     	; 0x6f76 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
    6f66:	6c 2f       	mov	r22, r28
    6f68:	80 91 9e 0a 	lds	r24, 0x0A9E	; 0x800a9e <default_ring>
    6f6c:	0e 94 1a 92 	call	0x12434	; 0x12434 <thermostat_ring_set_mode(unsigned char, unsigned char)>
    6f70:	81 e0       	ldi	r24, 0x01	; 1
    6f72:	80 93 e5 09 	sts	0x09E5, r24	; 0x8009e5 <change_term_mode>
    6f76:	cf 91       	pop	r28
    6f78:	08 95       	ret

00006f7a <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>:
_Z40button_status_default_ring_term_has_modejjh():
    6f7a:	cf 93       	push	r28
    6f7c:	c8 2f       	mov	r28, r24
    6f7e:	80 91 9e 0a 	lds	r24, 0x0A9E	; 0x800a9e <default_ring>
    6f82:	0e 94 ae 91 	call	0x1235c	; 0x1235c <thermostat_ring_get_active(unsigned char)>
    6f86:	8f 3f       	cpi	r24, 0xFF	; 255
    6f88:	31 f0       	breq	.+12     	; 0x6f96 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x1c>
    6f8a:	6c 2f       	mov	r22, r28
    6f8c:	80 91 9e 0a 	lds	r24, 0x0A9E	; 0x800a9e <default_ring>
    6f90:	cf 91       	pop	r28
    6f92:	0c 94 22 92 	jmp	0x12444	; 0x12444 <thermostat_ring_get_mode_1(unsigned char, unsigned char)>
    6f96:	80 e0       	ldi	r24, 0x00	; 0
    6f98:	cf 91       	pop	r28
    6f9a:	08 95       	ret

00006f9c <EEPROMClass::read(int) [clone .isra.6]>:
_ZNK5EERefdeEv():
    6f9c:	0c 94 19 ea 	jmp	0x1d432	; 0x1d432 <eeprom_read_byte>

00006fa0 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>:
_ZN5EERefaSEh():
    6fa0:	0c 94 21 ea 	jmp	0x1d442	; 0x1d442 <eeprom_write_byte>

00006fa4 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)>:
_Z34switch_brightness_automode_onclickjjh():
    6fa4:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <brigthness_display_mode>
    6fa8:	87 ff       	sbrs	r24, 7
    6faa:	10 c0       	rjmp	.+32     	; 0x6fcc <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)+0x28>
    6fac:	8f 77       	andi	r24, 0x7F	; 127
    6fae:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <brigthness_display_mode>
    6fb2:	60 91 92 0a 	lds	r22, 0x0A92	; 0x800a92 <brigthness_display_values>
    6fb6:	66 0f       	add	r22, r22
    6fb8:	83 ef       	ldi	r24, 0xF3	; 243
    6fba:	9b e0       	ldi	r25, 0x0B	; 11
    6fbc:	0e 94 b6 a9 	call	0x1536c	; 0x1536c <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
    6fc0:	60 91 90 0a 	lds	r22, 0x0A90	; 0x800a90 <brigthness_display_mode>
    6fc4:	8f e5       	ldi	r24, 0x5F	; 95
    6fc6:	90 e0       	ldi	r25, 0x00	; 0
    6fc8:	0c 94 d0 37 	jmp	0x6fa0	; 0x6fa0 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
    6fcc:	80 68       	ori	r24, 0x80	; 128
    6fce:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <brigthness_display_mode>
    6fd2:	f6 cf       	rjmp	.-20     	; 0x6fc0 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)+0x1c>

00006fd4 <helper_display_set_brightness(unsigned int, float, unsigned char)>:
_Z29helper_display_set_brightnessjfh():
    6fd4:	20 93 92 0a 	sts	0x0A92, r18	; 0x800a92 <brigthness_display_values>
    6fd8:	62 2f       	mov	r22, r18
    6fda:	66 0f       	add	r22, r22
    6fdc:	83 ef       	ldi	r24, 0xF3	; 243
    6fde:	9b e0       	ldi	r25, 0x0B	; 11
    6fe0:	0e 94 b6 a9 	call	0x1536c	; 0x1536c <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
    6fe4:	60 91 92 0a 	lds	r22, 0x0A92	; 0x800a92 <brigthness_display_values>
    6fe8:	8e e5       	ldi	r24, 0x5E	; 94
    6fea:	90 e0       	ldi	r25, 0x00	; 0
    6fec:	0c 94 d0 37 	jmp	0x6fa0	; 0x6fa0 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>

00006ff0 <click_button_default_value(unsigned int, unsigned int, unsigned char)>:
_Z26click_button_default_valuejjh():
    6ff0:	6f ef       	ldi	r22, 0xFF	; 255
    6ff2:	8a e5       	ldi	r24, 0x5A	; 90
    6ff4:	90 e0       	ldi	r25, 0x00	; 0
    6ff6:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
    6ffa:	e0 91 cc 09 	lds	r30, 0x09CC	; 0x8009cc <resetFunc>
    6ffe:	f0 91 cd 09 	lds	r31, 0x09CD	; 0x8009cd <resetFunc+0x1>
    7002:	19 94       	eijmp

00007004 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    7004:	0f 93       	push	r16
    7006:	1f 93       	push	r17
    7008:	cf 93       	push	r28
    700a:	df 93       	push	r29
    700c:	00 97       	sbiw	r24, 0x00	; 0
    700e:	01 f1       	breq	.+64     	; 0x7050 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x4c>
    7010:	8b 01       	movw	r16, r22
    7012:	fc 01       	movw	r30, r24
    7014:	c0 81       	ld	r28, Z
    7016:	d1 81       	ldd	r29, Z+1	; 0x01
    7018:	20 97       	sbiw	r28, 0x00	; 0
    701a:	d1 f0       	breq	.+52     	; 0x7050 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x4c>
    701c:	6a 85       	ldd	r22, Y+10	; 0x0a
    701e:	7b 85       	ldd	r23, Y+11	; 0x0b
_ZNK11ArduinoJson9Internals23ZeroTerminatedRamString6equalsEPKc():
    7020:	01 15       	cp	r16, r1
    7022:	11 05       	cpc	r17, r1
    7024:	19 f0       	breq	.+6      	; 0x702c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x28>
    7026:	61 15       	cp	r22, r1
    7028:	71 05       	cpc	r23, r1
    702a:	49 f4       	brne	.+18     	; 0x703e <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x3a>
    702c:	06 17       	cp	r16, r22
    702e:	17 07       	cpc	r17, r23
    7030:	59 f4       	brne	.+22     	; 0x7048 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    7032:	ce 01       	movw	r24, r28
    7034:	df 91       	pop	r29
    7036:	cf 91       	pop	r28
    7038:	1f 91       	pop	r17
    703a:	0f 91       	pop	r16
    703c:	08 95       	ret
_ZNK11ArduinoJson9Internals23ZeroTerminatedRamString6equalsEPKc():
    703e:	c8 01       	movw	r24, r16
    7040:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    7044:	89 2b       	or	r24, r25
    7046:	a9 f3       	breq	.-22     	; 0x7032 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    7048:	0e 80       	ldd	r0, Y+6	; 0x06
    704a:	df 81       	ldd	r29, Y+7	; 0x07
    704c:	c0 2d       	mov	r28, r0
    704e:	e4 cf       	rjmp	.-56     	; 0x7018 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x14>
    7050:	d0 e0       	ldi	r29, 0x00	; 0
    7052:	c0 e0       	ldi	r28, 0x00	; 0
    7054:	ee cf       	rjmp	.-36     	; 0x7032 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x2e>

00007056 <nullfce(unsigned int, unsigned int, unsigned char)>:
_Z7nullfcejjh():
    7056:	08 95       	ret

00007058 <button_set_brightness_auto_shutdown_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z50button_set_brightness_auto_shutdown_get_status_fntjjh():
    7058:	81 e0       	ldi	r24, 0x01	; 1
    705a:	08 95       	ret

0000705c <ArduinoJson::JsonArray::add()>:
_ZN11ArduinoJson9JsonArray3addEv():
    705c:	0f 93       	push	r16
    705e:	1f 93       	push	r17
    7060:	cf 93       	push	r28
    7062:	df 93       	push	r29
    7064:	dc 01       	movw	r26, r24
    7066:	12 96       	adiw	r26, 0x02	; 2
    7068:	2d 91       	ld	r18, X+
    706a:	3c 91       	ld	r19, X
    706c:	23 2b       	or	r18, r19
    706e:	41 f4       	brne	.+16     	; 0x7080 <ArduinoJson::JsonArray::add()+0x24>
    7070:	60 e0       	ldi	r22, 0x00	; 0
    7072:	70 e0       	ldi	r23, 0x00	; 0
    7074:	cb 01       	movw	r24, r22
    7076:	df 91       	pop	r29
    7078:	cf 91       	pop	r28
    707a:	1f 91       	pop	r17
    707c:	0f 91       	pop	r16
    707e:	08 95       	ret
    7080:	8c 01       	movw	r16, r24
    7082:	ec 01       	movw	r28, r24
    7084:	88 81       	ld	r24, Y
    7086:	99 81       	ldd	r25, Y+1	; 0x01
_ZN11ArduinoJson9Internals21AllocableInMemoryPoolnwEjPNS0_10MemoryPoolE():
    7088:	dc 01       	movw	r26, r24
    708a:	ed 91       	ld	r30, X+
    708c:	fc 91       	ld	r31, X
    708e:	01 90       	ld	r0, Z+
    7090:	f0 81       	ld	r31, Z
    7092:	e0 2d       	mov	r30, r0
    7094:	6c e0       	ldi	r22, 0x0C	; 12
    7096:	70 e0       	ldi	r23, 0x00	; 0
    7098:	19 95       	eicall
    709a:	fc 01       	movw	r30, r24
_ZN11ArduinoJson9JsonArray3addEv():
    709c:	89 2b       	or	r24, r25
    709e:	31 f1       	breq	.+76     	; 0x70ec <ArduinoJson::JsonArray::add()+0x90>
    70a0:	8c e0       	ldi	r24, 0x0C	; 12
    70a2:	ef 01       	movw	r28, r30
    70a4:	19 92       	st	Y+, r1
    70a6:	8a 95       	dec	r24
    70a8:	e9 f7       	brne	.-6      	; 0x70a4 <ArduinoJson::JsonArray::add()+0x48>
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
    70aa:	11 82       	std	Z+1, r1	; 0x01
    70ac:	10 82       	st	Z, r1
_ZN11ArduinoJson9JsonArray3addEv():
    70ae:	e8 01       	movw	r28, r16
    70b0:	aa 81       	ldd	r26, Y+2	; 0x02
    70b2:	bb 81       	ldd	r27, Y+3	; 0x03
    70b4:	12 96       	adiw	r26, 0x02	; 2
    70b6:	8d 91       	ld	r24, X+
    70b8:	9c 91       	ld	r25, X
    70ba:	13 97       	sbiw	r26, 0x03	; 3
    70bc:	00 97       	sbiw	r24, 0x00	; 0
    70be:	91 f0       	breq	.+36     	; 0x70e4 <ArduinoJson::JsonArray::add()+0x88>
    70c0:	91 87       	std	Z+9, r25	; 0x09
    70c2:	80 87       	std	Z+8, r24	; 0x08
    70c4:	ec 01       	movw	r28, r24
    70c6:	ff 83       	std	Y+7, r31	; 0x07
    70c8:	ee 83       	std	Y+6, r30	; 0x06
    70ca:	13 96       	adiw	r26, 0x03	; 3
    70cc:	fc 93       	st	X, r31
    70ce:	ee 93       	st	-X, r30
    70d0:	12 97       	sbiw	r26, 0x02	; 2
    70d2:	3e 2f       	mov	r19, r30
    70d4:	2f 2f       	mov	r18, r31
    70d6:	f8 01       	movw	r30, r16
    70d8:	40 81       	ld	r20, Z
    70da:	51 81       	ldd	r21, Z+1	; 0x01
    70dc:	ba 01       	movw	r22, r20
    70de:	83 2f       	mov	r24, r19
    70e0:	92 2f       	mov	r25, r18
    70e2:	c9 cf       	rjmp	.-110    	; 0x7076 <ArduinoJson::JsonArray::add()+0x1a>
    70e4:	11 96       	adiw	r26, 0x01	; 1
    70e6:	fc 93       	st	X, r31
    70e8:	ee 93       	st	-X, r30
    70ea:	ef cf       	rjmp	.-34     	; 0x70ca <ArduinoJson::JsonArray::add()+0x6e>
    70ec:	30 e0       	ldi	r19, 0x00	; 0
    70ee:	20 e0       	ldi	r18, 0x00	; 0
    70f0:	50 e0       	ldi	r21, 0x00	; 0
    70f2:	40 e0       	ldi	r20, 0x00	; 0
    70f4:	f3 cf       	rjmp	.-26     	; 0x70dc <ArduinoJson::JsonArray::add()+0x80>

000070f6 <ArduinoJson::Internals::isFloat(char const*)>:
_ZN11ArduinoJson9Internals7isFloatEPKc():
    70f6:	cf 93       	push	r28
    70f8:	df 93       	push	r29
    70fa:	ec 01       	movw	r28, r24
    70fc:	00 97       	sbiw	r24, 0x00	; 0
    70fe:	09 f4       	brne	.+2      	; 0x7102 <ArduinoJson::Internals::isFloat(char const*)+0xc>
    7100:	3f c0       	rjmp	.+126    	; 0x7180 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    7102:	67 ee       	ldi	r22, 0xE7	; 231
    7104:	72 e0       	ldi	r23, 0x02	; 2
    7106:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    710a:	89 2b       	or	r24, r25
    710c:	e9 f1       	breq	.+122    	; 0x7188 <ArduinoJson::Internals::isFloat(char const*)+0x92>
    710e:	88 81       	ld	r24, Y
_ZN11ArduinoJson9Internals6issignEc():
    7110:	8d 32       	cpi	r24, 0x2D	; 45
    7112:	11 f0       	breq	.+4      	; 0x7118 <ArduinoJson::Internals::isFloat(char const*)+0x22>
    7114:	8b 32       	cpi	r24, 0x2B	; 43
    7116:	09 f4       	brne	.+2      	; 0x711a <ArduinoJson::Internals::isFloat(char const*)+0x24>
_ZN11ArduinoJson9Internals7isFloatEPKc():
    7118:	21 96       	adiw	r28, 0x01	; 1
    711a:	6b ee       	ldi	r22, 0xEB	; 235
    711c:	72 e0       	ldi	r23, 0x02	; 2
    711e:	ce 01       	movw	r24, r28
    7120:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    7124:	89 2b       	or	r24, r25
    7126:	81 f1       	breq	.+96     	; 0x7188 <ArduinoJson::Internals::isFloat(char const*)+0x92>
    7128:	88 81       	ld	r24, Y
    712a:	88 23       	and	r24, r24
    712c:	49 f1       	breq	.+82     	; 0x7180 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    712e:	fe 01       	movw	r30, r28
    7130:	89 91       	ld	r24, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
    7132:	90 ed       	ldi	r25, 0xD0	; 208
    7134:	98 0f       	add	r25, r24
_ZN11ArduinoJson9Internals7isFloatEPKc():
    7136:	9a 30       	cpi	r25, 0x0A	; 10
    7138:	d0 f3       	brcs	.-12     	; 0x712e <ArduinoJson::Internals::isFloat(char const*)+0x38>
    713a:	8e 32       	cpi	r24, 0x2E	; 46
    713c:	41 f4       	brne	.+16     	; 0x714e <ArduinoJson::Internals::isFloat(char const*)+0x58>
    713e:	9e 01       	movw	r18, r28
    7140:	f9 01       	movw	r30, r18
    7142:	2f 5f       	subi	r18, 0xFF	; 255
    7144:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
    7146:	80 81       	ld	r24, Z
    7148:	80 53       	subi	r24, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    714a:	8a 30       	cpi	r24, 0x0A	; 10
    714c:	c8 f3       	brcs	.-14     	; 0x7140 <ArduinoJson::Internals::isFloat(char const*)+0x4a>
    714e:	80 81       	ld	r24, Z
    7150:	8f 7d       	andi	r24, 0xDF	; 223
    7152:	85 34       	cpi	r24, 0x45	; 69
    7154:	89 f4       	brne	.+34     	; 0x7178 <ArduinoJson::Internals::isFloat(char const*)+0x82>
    7156:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals6issignEc():
    7158:	8d 32       	cpi	r24, 0x2D	; 45
    715a:	a1 f0       	breq	.+40     	; 0x7184 <ArduinoJson::Internals::isFloat(char const*)+0x8e>
    715c:	8b 32       	cpi	r24, 0x2B	; 43
    715e:	91 f0       	breq	.+36     	; 0x7184 <ArduinoJson::Internals::isFloat(char const*)+0x8e>
_ZN11ArduinoJson9Internals7isFloatEPKc():
    7160:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
    7162:	80 81       	ld	r24, Z
    7164:	80 53       	subi	r24, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    7166:	8a 30       	cpi	r24, 0x0A	; 10
    7168:	58 f4       	brcc	.+22     	; 0x7180 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    716a:	cf 01       	movw	r24, r30
    716c:	fc 01       	movw	r30, r24
    716e:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
    7170:	20 81       	ld	r18, Z
    7172:	20 53       	subi	r18, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    7174:	2a 30       	cpi	r18, 0x0A	; 10
    7176:	d0 f3       	brcs	.-12     	; 0x716c <ArduinoJson::Internals::isFloat(char const*)+0x76>
    7178:	81 e0       	ldi	r24, 0x01	; 1
    717a:	90 81       	ld	r25, Z
    717c:	99 23       	and	r25, r25
    717e:	29 f0       	breq	.+10     	; 0x718a <ArduinoJson::Internals::isFloat(char const*)+0x94>
    7180:	80 e0       	ldi	r24, 0x00	; 0
    7182:	03 c0       	rjmp	.+6      	; 0x718a <ArduinoJson::Internals::isFloat(char const*)+0x94>
    7184:	32 96       	adiw	r30, 0x02	; 2
    7186:	ed cf       	rjmp	.-38     	; 0x7162 <ArduinoJson::Internals::isFloat(char const*)+0x6c>
    7188:	81 e0       	ldi	r24, 0x01	; 1
    718a:	df 91       	pop	r29
    718c:	cf 91       	pop	r28
    718e:	08 95       	ret

00007190 <printf_begin()>:
_Z12printf_beginv():
    7190:	70 e0       	ldi	r23, 0x00	; 0
    7192:	60 e0       	ldi	r22, 0x00	; 0
    7194:	81 eb       	ldi	r24, 0xB1	; 177
    7196:	92 e8       	ldi	r25, 0x82	; 130
    7198:	0c 94 a9 e2 	jmp	0x1c552	; 0x1c552 <fdevopen>

0000719c <Temperature_LM75_Derived::readTemperatureC()>:
_ZN24Temperature_LM75_Derived16readTemperatureCEv():
    719c:	cf 93       	push	r28
    719e:	df 93       	push	r29
    71a0:	ec 01       	movw	r28, r24
    71a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    71a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    71a6:	04 80       	ldd	r0, Z+4	; 0x04
    71a8:	f5 81       	ldd	r31, Z+5	; 0x05
    71aa:	e0 2d       	mov	r30, r0
    71ac:	60 81       	ld	r22, Z
    71ae:	0e 94 e2 cd 	call	0x19bc4	; 0x19bc4 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)>
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
    71b2:	bc 01       	movw	r22, r24
    71b4:	99 0f       	add	r25, r25
    71b6:	88 0b       	sbc	r24, r24
    71b8:	99 0b       	sbc	r25, r25
    71ba:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
    71be:	2f 81       	ldd	r18, Y+7	; 0x07
    71c0:	38 85       	ldd	r19, Y+8	; 0x08
    71c2:	49 85       	ldd	r20, Y+9	; 0x09
    71c4:	5a 85       	ldd	r21, Y+10	; 0x0a
    71c6:	0e 94 7d dd 	call	0x1bafa	; 0x1bafa <__mulsf3>
_ZN24Temperature_LM75_Derived16readTemperatureCEv():
    71ca:	df 91       	pop	r29
    71cc:	cf 91       	pop	r28
    71ce:	08 95       	ret

000071d0 <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
    71d0:	30 e0       	ldi	r19, 0x00	; 0
    71d2:	20 e0       	ldi	r18, 0x00	; 0
    71d4:	e1 e0       	ldi	r30, 0x01	; 1
    71d6:	f0 e0       	ldi	r31, 0x00	; 0
    71d8:	af 01       	movw	r20, r30
    71da:	02 2e       	mov	r0, r18
    71dc:	01 c0       	rjmp	.+2      	; 0x71e0 <enable_redraw(unsigned char, unsigned char)+0x10>
    71de:	44 0f       	add	r20, r20
    71e0:	0a 94       	dec	r0
    71e2:	ea f7       	brpl	.-6      	; 0x71de <enable_redraw(unsigned char, unsigned char)+0xe>
    71e4:	98 2f       	mov	r25, r24
    71e6:	94 23       	and	r25, r20
    71e8:	11 f0       	breq	.+4      	; 0x71ee <enable_redraw(unsigned char, unsigned char)+0x1e>
    71ea:	46 23       	and	r20, r22
    71ec:	39 f4       	brne	.+14     	; 0x71fc <enable_redraw(unsigned char, unsigned char)+0x2c>
    71ee:	2f 5f       	subi	r18, 0xFF	; 255
    71f0:	3f 4f       	sbci	r19, 0xFF	; 255
    71f2:	28 30       	cpi	r18, 0x08	; 8
    71f4:	31 05       	cpc	r19, r1
    71f6:	81 f7       	brne	.-32     	; 0x71d8 <enable_redraw(unsigned char, unsigned char)+0x8>
    71f8:	80 e0       	ldi	r24, 0x00	; 0
    71fa:	08 95       	ret
    71fc:	81 e0       	ldi	r24, 0x01	; 1
    71fe:	08 95       	ret

00007200 <MenuHistoryInit()>:
_Z15MenuHistoryInitv():
    7200:	e0 91 d0 09 	lds	r30, 0x09D0	; 0x8009d0 <MenuHistoryIndex>
    7204:	f0 e0       	ldi	r31, 0x00	; 0
    7206:	e5 52       	subi	r30, 0x25	; 37
    7208:	f6 4f       	sbci	r31, 0xF6	; 246
    720a:	10 82       	st	Z, r1
    720c:	08 95       	ret

0000720e <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
    720e:	ff 92       	push	r15
    7210:	0f 93       	push	r16
    7212:	1f 93       	push	r17
    7214:	cf 93       	push	r28
    7216:	df 93       	push	r29
    7218:	dc 01       	movw	r26, r24
    721a:	20 91 d0 09 	lds	r18, 0x09D0	; 0x8009d0 <MenuHistoryIndex>
    721e:	30 e0       	ldi	r19, 0x00	; 0
    7220:	80 e0       	ldi	r24, 0x00	; 0
    7222:	65 e1       	ldi	r22, 0x15	; 21
    7224:	75 e0       	ldi	r23, 0x05	; 5
    7226:	ca ed       	ldi	r28, 0xDA	; 218
    7228:	d2 e0       	ldi	r29, 0x02	; 2
    722a:	89 01       	movw	r16, r18
    722c:	05 52       	subi	r16, 0x25	; 37
    722e:	16 4f       	sbci	r17, 0xF6	; 246
    7230:	fb 01       	movw	r30, r22
    7232:	94 91       	lpm	r25, Z
    7234:	89 17       	cp	r24, r25
    7236:	e8 f4       	brcc	.+58     	; 0x7272 <MenuHistoryGetMenu(unsigned char*)+0x64>
    7238:	8c 9f       	mul	r24, r28
    723a:	a0 01       	movw	r20, r0
    723c:	8d 9f       	mul	r24, r29
    723e:	50 0d       	add	r21, r0
    7240:	11 24       	eor	r1, r1
    7242:	fa 01       	movw	r30, r20
    7244:	e2 52       	subi	r30, 0x22	; 34
    7246:	f8 4f       	sbci	r31, 0xF8	; 248
    7248:	f4 90       	lpm	r15, Z
    724a:	f8 01       	movw	r30, r16
    724c:	90 81       	ld	r25, Z
    724e:	9f 11       	cpse	r25, r15
    7250:	0e c0       	rjmp	.+28     	; 0x726e <MenuHistoryGetMenu(unsigned char*)+0x60>
    7252:	47 5e       	subi	r20, 0xE7	; 231
    7254:	5a 4f       	sbci	r21, 0xFA	; 250
    7256:	2f 52       	subi	r18, 0x2F	; 47
    7258:	36 4f       	sbci	r19, 0xF6	; 246
    725a:	f9 01       	movw	r30, r18
    725c:	20 81       	ld	r18, Z
    725e:	2c 93       	st	X, r18
    7260:	ca 01       	movw	r24, r20
    7262:	df 91       	pop	r29
    7264:	cf 91       	pop	r28
    7266:	1f 91       	pop	r17
    7268:	0f 91       	pop	r16
    726a:	ff 90       	pop	r15
    726c:	08 95       	ret
    726e:	8f 5f       	subi	r24, 0xFF	; 255
    7270:	df cf       	rjmp	.-66     	; 0x7230 <MenuHistoryGetMenu(unsigned char*)+0x22>
    7272:	80 e0       	ldi	r24, 0x00	; 0
    7274:	66 e1       	ldi	r22, 0x16	; 22
    7276:	75 e0       	ldi	r23, 0x05	; 5
    7278:	ca ed       	ldi	r28, 0xDA	; 218
    727a:	d2 e0       	ldi	r29, 0x02	; 2
    727c:	89 01       	movw	r16, r18
    727e:	05 52       	subi	r16, 0x25	; 37
    7280:	16 4f       	sbci	r17, 0xF6	; 246
    7282:	fb 01       	movw	r30, r22
    7284:	94 91       	lpm	r25, Z
    7286:	89 17       	cp	r24, r25
    7288:	90 f4       	brcc	.+36     	; 0x72ae <MenuHistoryGetMenu(unsigned char*)+0xa0>
    728a:	8c 9f       	mul	r24, r28
    728c:	a0 01       	movw	r20, r0
    728e:	8d 9f       	mul	r24, r29
    7290:	50 0d       	add	r21, r0
    7292:	11 24       	eor	r1, r1
    7294:	fa 01       	movw	r30, r20
    7296:	ee 59       	subi	r30, 0x9E	; 158
    7298:	fb 4d       	sbci	r31, 0xDB	; 219
    729a:	f4 90       	lpm	r15, Z
    729c:	f8 01       	movw	r30, r16
    729e:	90 81       	ld	r25, Z
    72a0:	9f 11       	cpse	r25, r15
    72a2:	03 c0       	rjmp	.+6      	; 0x72aa <MenuHistoryGetMenu(unsigned char*)+0x9c>
    72a4:	43 56       	subi	r20, 0x63	; 99
    72a6:	5e 4d       	sbci	r21, 0xDE	; 222
    72a8:	d6 cf       	rjmp	.-84     	; 0x7256 <MenuHistoryGetMenu(unsigned char*)+0x48>
    72aa:	8f 5f       	subi	r24, 0xFF	; 255
    72ac:	ea cf       	rjmp	.-44     	; 0x7282 <MenuHistoryGetMenu(unsigned char*)+0x74>
    72ae:	80 e0       	ldi	r24, 0x00	; 0
    72b0:	67 e1       	ldi	r22, 0x17	; 23
    72b2:	75 e0       	ldi	r23, 0x05	; 5
    72b4:	ca ed       	ldi	r28, 0xDA	; 218
    72b6:	d2 e0       	ldi	r29, 0x02	; 2
    72b8:	89 01       	movw	r16, r18
    72ba:	05 52       	subi	r16, 0x25	; 37
    72bc:	16 4f       	sbci	r17, 0xF6	; 246
    72be:	fb 01       	movw	r30, r22
    72c0:	94 91       	lpm	r25, Z
    72c2:	89 17       	cp	r24, r25
    72c4:	90 f4       	brcc	.+36     	; 0x72ea <MenuHistoryGetMenu(unsigned char*)+0xdc>
    72c6:	8c 9f       	mul	r24, r28
    72c8:	a0 01       	movw	r20, r0
    72ca:	8d 9f       	mul	r24, r29
    72cc:	50 0d       	add	r21, r0
    72ce:	11 24       	eor	r1, r1
    72d0:	fa 01       	movw	r30, r20
    72d2:	e2 58       	subi	r30, 0x82	; 130
    72d4:	fa 4c       	sbci	r31, 0xCA	; 202
    72d6:	f4 90       	lpm	r15, Z
    72d8:	f8 01       	movw	r30, r16
    72da:	90 81       	ld	r25, Z
    72dc:	9f 11       	cpse	r25, r15
    72de:	03 c0       	rjmp	.+6      	; 0x72e6 <MenuHistoryGetMenu(unsigned char*)+0xd8>
    72e0:	47 54       	subi	r20, 0x47	; 71
    72e2:	5d 4c       	sbci	r21, 0xCD	; 205
    72e4:	b8 cf       	rjmp	.-144    	; 0x7256 <MenuHistoryGetMenu(unsigned char*)+0x48>
    72e6:	8f 5f       	subi	r24, 0xFF	; 255
    72e8:	ea cf       	rjmp	.-44     	; 0x72be <MenuHistoryGetMenu(unsigned char*)+0xb0>
    72ea:	90 e0       	ldi	r25, 0x00	; 0
    72ec:	68 e1       	ldi	r22, 0x18	; 24
    72ee:	75 e0       	ldi	r23, 0x05	; 5
    72f0:	ca ed       	ldi	r28, 0xDA	; 218
    72f2:	d2 e0       	ldi	r29, 0x02	; 2
    72f4:	89 01       	movw	r16, r18
    72f6:	05 52       	subi	r16, 0x25	; 37
    72f8:	16 4f       	sbci	r17, 0xF6	; 246
    72fa:	fb 01       	movw	r30, r22
    72fc:	84 91       	lpm	r24, Z
    72fe:	98 17       	cp	r25, r24
    7300:	08 f0       	brcs	.+2      	; 0x7304 <MenuHistoryGetMenu(unsigned char*)+0xf6>
    7302:	ae cf       	rjmp	.-164    	; 0x7260 <MenuHistoryGetMenu(unsigned char*)+0x52>
    7304:	9c 9f       	mul	r25, r28
    7306:	a0 01       	movw	r20, r0
    7308:	9d 9f       	mul	r25, r29
    730a:	50 0d       	add	r21, r0
    730c:	11 24       	eor	r1, r1
    730e:	fa 01       	movw	r30, r20
    7310:	e6 56       	subi	r30, 0x66	; 102
    7312:	f9 4b       	sbci	r31, 0xB9	; 185
    7314:	f4 90       	lpm	r15, Z
    7316:	f8 01       	movw	r30, r16
    7318:	80 81       	ld	r24, Z
    731a:	8f 11       	cpse	r24, r15
    731c:	03 c0       	rjmp	.+6      	; 0x7324 <MenuHistoryGetMenu(unsigned char*)+0x116>
    731e:	4b 52       	subi	r20, 0x2B	; 43
    7320:	5c 4b       	sbci	r21, 0xBC	; 188
    7322:	99 cf       	rjmp	.-206    	; 0x7256 <MenuHistoryGetMenu(unsigned char*)+0x48>
    7324:	9f 5f       	subi	r25, 0xFF	; 255
    7326:	e9 cf       	rjmp	.-46     	; 0x72fa <MenuHistoryGetMenu(unsigned char*)+0xec>

00007328 <DisplayClean(unsigned int)>:
_Z12DisplayCleanj():
    7328:	bc 01       	movw	r22, r24
    732a:	85 e1       	ldi	r24, 0x15	; 21
    732c:	9c e0       	ldi	r25, 0x0C	; 12
    732e:	0c 94 aa 96 	jmp	0x12d54	; 0x12d54 <LCDWIKI_GUI::Fill_Screen(unsigned int)>

00007332 <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
    7332:	2f 92       	push	r2
    7334:	3f 92       	push	r3
    7336:	4f 92       	push	r4
    7338:	5f 92       	push	r5
    733a:	6f 92       	push	r6
    733c:	7f 92       	push	r7
    733e:	8f 92       	push	r8
    7340:	9f 92       	push	r9
    7342:	af 92       	push	r10
    7344:	bf 92       	push	r11
    7346:	cf 92       	push	r12
    7348:	df 92       	push	r13
    734a:	ef 92       	push	r14
    734c:	ff 92       	push	r15
    734e:	0f 93       	push	r16
    7350:	1f 93       	push	r17
    7352:	cf 93       	push	r28
    7354:	df 93       	push	r29
    7356:	1f 92       	push	r1
    7358:	cd b7       	in	r28, 0x3d	; 61
    735a:	de b7       	in	r29, 0x3e	; 62
    735c:	ce 01       	movw	r24, r28
    735e:	01 96       	adiw	r24, 0x01	; 1
    7360:	0e 94 07 39 	call	0x720e	; 0x720e <MenuHistoryGetMenu(unsigned char*)>
    7364:	7c 01       	movw	r14, r24
    7366:	fc 01       	movw	r30, r24
    7368:	e2 53       	subi	r30, 0x32	; 50
    736a:	fd 4f       	sbci	r31, 0xFD	; 253
    736c:	b4 90       	lpm	r11, Z
    736e:	38 97       	sbiw	r30, 0x08	; 8
    7370:	85 90       	lpm	r8, Z+
    7372:	94 90       	lpm	r9, Z
    7374:	fc 01       	movw	r30, r24
    7376:	e8 53       	subi	r30, 0x38	; 56
    7378:	fd 4f       	sbci	r31, 0xFD	; 253
    737a:	c5 90       	lpm	r12, Z+
    737c:	d4 90       	lpm	r13, Z
    737e:	fc 01       	movw	r30, r24
    7380:	e6 53       	subi	r30, 0x36	; 54
    7382:	fd 4f       	sbci	r31, 0xFD	; 253
    7384:	65 90       	lpm	r6, Z+
    7386:	74 90       	lpm	r7, Z
    7388:	fc 01       	movw	r30, r24
    738a:	e4 53       	subi	r30, 0x34	; 52
    738c:	fd 4f       	sbci	r31, 0xFD	; 253
    738e:	45 90       	lpm	r4, Z+
    7390:	54 90       	lpm	r5, Z
    7392:	fc 01       	movw	r30, r24
    7394:	e1 53       	subi	r30, 0x31	; 49
    7396:	fd 4f       	sbci	r31, 0xFD	; 253
    7398:	25 90       	lpm	r2, Z+
    739a:	34 90       	lpm	r3, Z
    739c:	b0 fe       	sbrs	r11, 0
    739e:	03 c0       	rjmp	.+6      	; 0x73a6 <MenuPrepareStyle()+0x74>
    73a0:	c1 01       	movw	r24, r2
    73a2:	0e 94 94 39 	call	0x7328	; 0x7328 <DisplayClean(unsigned int)>
    73a6:	b1 fe       	sbrs	r11, 1
    73a8:	11 c0       	rjmp	.+34     	; 0x73cc <MenuPrepareStyle()+0x9a>
    73aa:	b1 01       	movw	r22, r2
    73ac:	85 e1       	ldi	r24, 0x15	; 21
    73ae:	9c e0       	ldi	r25, 0x0C	; 12
    73b0:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    73b4:	86 01       	movw	r16, r12
    73b6:	04 0d       	add	r16, r4
    73b8:	15 1d       	adc	r17, r5
    73ba:	94 01       	movw	r18, r8
    73bc:	26 0d       	add	r18, r6
    73be:	37 1d       	adc	r19, r7
    73c0:	a6 01       	movw	r20, r12
    73c2:	b4 01       	movw	r22, r8
    73c4:	85 e1       	ldi	r24, 0x15	; 21
    73c6:	9c e0       	ldi	r25, 0x0C	; 12
    73c8:	0e 94 4e 96 	call	0x12c9c	; 0x12c9c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    73cc:	b2 fe       	sbrs	r11, 2
    73ce:	30 c0       	rjmp	.+96     	; 0x7430 <MenuPrepareStyle()+0xfe>
    73d0:	70 e0       	ldi	r23, 0x00	; 0
    73d2:	60 e0       	ldi	r22, 0x00	; 0
    73d4:	85 e1       	ldi	r24, 0x15	; 21
    73d6:	9c e0       	ldi	r25, 0x0C	; 12
    73d8:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    73dc:	b1 2c       	mov	r11, r1
    73de:	a1 2c       	mov	r10, r1
    73e0:	4c 0c       	add	r4, r12
    73e2:	5d 1c       	adc	r5, r13
    73e4:	14 01       	movw	r2, r8
    73e6:	26 0c       	add	r2, r6
    73e8:	37 1c       	adc	r3, r7
    73ea:	82 01       	movw	r16, r4
    73ec:	0a 19       	sub	r16, r10
    73ee:	1b 09       	sbc	r17, r11
    73f0:	91 01       	movw	r18, r2
    73f2:	2a 19       	sub	r18, r10
    73f4:	3b 09       	sbc	r19, r11
    73f6:	b4 01       	movw	r22, r8
    73f8:	6a 0d       	add	r22, r10
    73fa:	7b 1d       	adc	r23, r11
    73fc:	a6 01       	movw	r20, r12
    73fe:	85 e1       	ldi	r24, 0x15	; 21
    7400:	9c e0       	ldi	r25, 0x0C	; 12
    7402:	0e 94 d5 96 	call	0x12daa	; 0x12daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    7406:	93 01       	movw	r18, r6
    7408:	2a 19       	sub	r18, r10
    740a:	3b 09       	sbc	r19, r11
    740c:	a6 01       	movw	r20, r12
    740e:	49 5e       	subi	r20, 0xE9	; 233
    7410:	5f 4f       	sbci	r21, 0xFF	; 255
    7412:	b4 01       	movw	r22, r8
    7414:	85 e1       	ldi	r24, 0x15	; 21
    7416:	9c e0       	ldi	r25, 0x0C	; 12
    7418:	0e 94 94 96 	call	0x12d28	; 0x12d28 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    741c:	8f ef       	ldi	r24, 0xFF	; 255
    741e:	a8 1a       	sub	r10, r24
    7420:	b8 0a       	sbc	r11, r24
    7422:	ef ef       	ldi	r30, 0xFF	; 255
    7424:	ce 1a       	sub	r12, r30
    7426:	de 0a       	sbc	r13, r30
    7428:	f4 e0       	ldi	r31, 0x04	; 4
    742a:	af 16       	cp	r10, r31
    742c:	b1 04       	cpc	r11, r1
    742e:	e9 f6       	brne	.-70     	; 0x73ea <MenuPrepareStyle()+0xb8>
    7430:	f7 01       	movw	r30, r14
    7432:	e8 52       	subi	r30, 0x28	; 40
    7434:	fd 4f       	sbci	r31, 0xFD	; 253
    7436:	25 91       	lpm	r18, Z+
    7438:	34 91       	lpm	r19, Z
    743a:	f7 01       	movw	r30, r14
    743c:	eb 53       	subi	r30, 0x3B	; 59
    743e:	fd 4f       	sbci	r31, 0xFD	; 253
    7440:	e4 91       	lpm	r30, Z
    7442:	40 e0       	ldi	r20, 0x00	; 0
    7444:	70 e0       	ldi	r23, 0x00	; 0
    7446:	60 e0       	ldi	r22, 0x00	; 0
    7448:	8e 2f       	mov	r24, r30
    744a:	90 e0       	ldi	r25, 0x00	; 0
    744c:	f9 01       	movw	r30, r18
    744e:	19 95       	eicall
    7450:	0f 90       	pop	r0
    7452:	df 91       	pop	r29
    7454:	cf 91       	pop	r28
    7456:	1f 91       	pop	r17
    7458:	0f 91       	pop	r16
    745a:	ff 90       	pop	r15
    745c:	ef 90       	pop	r14
    745e:	df 90       	pop	r13
    7460:	cf 90       	pop	r12
    7462:	bf 90       	pop	r11
    7464:	af 90       	pop	r10
    7466:	9f 90       	pop	r9
    7468:	8f 90       	pop	r8
    746a:	7f 90       	pop	r7
    746c:	6f 90       	pop	r6
    746e:	5f 90       	pop	r5
    7470:	4f 90       	pop	r4
    7472:	3f 90       	pop	r3
    7474:	2f 90       	pop	r2
    7476:	08 95       	ret

00007478 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryPrevMenujjh():
    7478:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <MenuHistoryIndex>
    747c:	88 23       	and	r24, r24
    747e:	29 f0       	breq	.+10     	; 0x748a <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)+0x12>
    7480:	81 50       	subi	r24, 0x01	; 1
    7482:	80 93 d0 09 	sts	0x09D0, r24	; 0x8009d0 <MenuHistoryIndex>
    7486:	0c 94 99 39 	jmp	0x7332	; 0x7332 <MenuPrepareStyle()>
    748a:	08 95       	ret

0000748c <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryNextMenujjh():
    748c:	20 91 d0 09 	lds	r18, 0x09D0	; 0x8009d0 <MenuHistoryIndex>
    7490:	2a 30       	cpi	r18, 0x0A	; 10
    7492:	70 f4       	brcc	.+28     	; 0x74b0 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)+0x24>
    7494:	2f 5f       	subi	r18, 0xFF	; 255
    7496:	20 93 d0 09 	sts	0x09D0, r18	; 0x8009d0 <MenuHistoryIndex>
    749a:	30 e0       	ldi	r19, 0x00	; 0
    749c:	f9 01       	movw	r30, r18
    749e:	e5 52       	subi	r30, 0x25	; 37
    74a0:	f6 4f       	sbci	r31, 0xF6	; 246
    74a2:	80 83       	st	Z, r24
    74a4:	2f 52       	subi	r18, 0x2F	; 47
    74a6:	36 4f       	sbci	r19, 0xF6	; 246
    74a8:	f9 01       	movw	r30, r18
    74aa:	60 83       	st	Z, r22
    74ac:	0c 94 99 39 	jmp	0x7332	; 0x7332 <MenuPrepareStyle()>
    74b0:	08 95       	ret

000074b2 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>:
_Z19MenuHistoryPrevMenujjh():
    74b2:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <MenuHistoryIndex>
    74b6:	88 23       	and	r24, r24
    74b8:	29 f0       	breq	.+10     	; 0x74c4 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]+0x12>
    74ba:	81 50       	subi	r24, 0x01	; 1
    74bc:	80 93 d0 09 	sts	0x09D0, r24	; 0x8009d0 <MenuHistoryIndex>
    74c0:	0c 94 99 39 	jmp	0x7332	; 0x7332 <MenuPrepareStyle()>
    74c4:	08 95       	ret

000074c6 <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z29click_tds_deassociate_onewirejjh():
    74c6:	86 2f       	mov	r24, r22
    74c8:	0e 94 12 8e 	call	0x11c24	; 0x11c24 <tds_set_clear_wrom_id(unsigned char)>
    74cc:	0c 94 59 3a 	jmp	0x74b2	; 0x74b2 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

000074d0 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>:
_Z30dialog_set_string_button_clickjjh():
    74d0:	e0 91 e8 09 	lds	r30, 0x09E8	; 0x8009e8 <dialog_save_string_function>
    74d4:	f0 91 e9 09 	lds	r31, 0x09E9	; 0x8009e9 <dialog_save_string_function+0x1>
    74d8:	19 95       	eicall
    74da:	0c 94 59 3a 	jmp	0x74b2	; 0x74b2 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

000074de <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>:
_Z32dialog_set_variable_button_clickjjh():
    74de:	1f 93       	push	r17
    74e0:	cf 93       	push	r28
    74e2:	df 93       	push	r29
    74e4:	ec 01       	movw	r28, r24
    74e6:	14 2f       	mov	r17, r20
    74e8:	90 e0       	ldi	r25, 0x00	; 0
    74ea:	80 e0       	ldi	r24, 0x00	; 0
    74ec:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
    74f0:	ab 01       	movw	r20, r22
    74f2:	bc 01       	movw	r22, r24
    74f4:	85 e1       	ldi	r24, 0x15	; 21
    74f6:	8c 9f       	mul	r24, r28
    74f8:	f0 01       	movw	r30, r0
    74fa:	8d 9f       	mul	r24, r29
    74fc:	f0 0d       	add	r31, r0
    74fe:	11 24       	eor	r1, r1
    7500:	e2 5d       	subi	r30, 0xD2	; 210
    7502:	f5 4f       	sbci	r31, 0xF5	; 245
    7504:	03 88       	ldd	r0, Z+19	; 0x13
    7506:	f4 89       	ldd	r31, Z+20	; 0x14
    7508:	e0 2d       	mov	r30, r0
    750a:	21 2f       	mov	r18, r17
    750c:	ce 01       	movw	r24, r28
    750e:	19 95       	eicall
    7510:	df 91       	pop	r29
    7512:	cf 91       	pop	r28
    7514:	1f 91       	pop	r17
    7516:	0c 94 59 3a 	jmp	0x74b2	; 0x74b2 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

0000751a <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>:
_Z23click_dialog_button_yesjjh():
    751a:	80 91 2d 0a 	lds	r24, 0x0A2D	; 0x800a2d <dialog_yes_args1>
    751e:	e0 91 ce 09 	lds	r30, 0x09CE	; 0x8009ce <dialog_yes_function>
    7522:	f0 91 cf 09 	lds	r31, 0x09CF	; 0x8009cf <dialog_yes_function+0x1>
    7526:	40 e0       	ldi	r20, 0x00	; 0
    7528:	70 e0       	ldi	r23, 0x00	; 0
    752a:	60 e0       	ldi	r22, 0x00	; 0
    752c:	90 e0       	ldi	r25, 0x00	; 0
    752e:	19 95       	eicall
    7530:	0c 94 59 3a 	jmp	0x74b2	; 0x74b2 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

00007534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>:
_Z19MenuHistoryNextMenujjh():
    7534:	20 91 d0 09 	lds	r18, 0x09D0	; 0x8009d0 <MenuHistoryIndex>
    7538:	2a 30       	cpi	r18, 0x0A	; 10
    753a:	70 f4       	brcc	.+28     	; 0x7558 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]+0x24>
    753c:	2f 5f       	subi	r18, 0xFF	; 255
    753e:	20 93 d0 09 	sts	0x09D0, r18	; 0x8009d0 <MenuHistoryIndex>
    7542:	30 e0       	ldi	r19, 0x00	; 0
    7544:	f9 01       	movw	r30, r18
    7546:	e5 52       	subi	r30, 0x25	; 37
    7548:	f6 4f       	sbci	r31, 0xF6	; 246
    754a:	80 83       	st	Z, r24
    754c:	2f 52       	subi	r18, 0x2F	; 47
    754e:	36 4f       	sbci	r19, 0xF6	; 246
    7550:	f9 01       	movw	r30, r18
    7552:	60 83       	st	Z, r22
    7554:	0c 94 99 39 	jmp	0x7332	; 0x7332 <MenuPrepareStyle()>
    7558:	08 95       	ret

0000755a <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_periodjjh():
    755a:	1f 93       	push	r17
    755c:	cf 93       	push	r28
    755e:	df 93       	push	r29
    7560:	c8 2f       	mov	r28, r24
    7562:	16 2f       	mov	r17, r22
    7564:	70 e0       	ldi	r23, 0x00	; 0
    7566:	60 e0       	ldi	r22, 0x00	; 0
    7568:	86 e6       	ldi	r24, 0x66	; 102
    756a:	90 e0       	ldi	r25, 0x00	; 0
    756c:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    7570:	81 2f       	mov	r24, r17
    7572:	0e 94 66 8d 	call	0x11acc	; 0x11acc <tds_get_period(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    7576:	25 e1       	ldi	r18, 0x15	; 21
    7578:	c2 9f       	mul	r28, r18
    757a:	e0 01       	movw	r28, r0
    757c:	11 24       	eor	r1, r1
    757e:	c2 5d       	subi	r28, 0xD2	; 210
    7580:	d5 4f       	sbci	r29, 0xF5	; 245
_Z27display_menu_tds_set_periodjjh():
    7582:	bc 01       	movw	r22, r24
    7584:	99 0f       	add	r25, r25
    7586:	88 0b       	sbc	r24, r24
    7588:	99 0b       	sbc	r25, r25
    758a:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
    758e:	68 83       	st	Y, r22
    7590:	79 83       	std	Y+1, r23	; 0x01
    7592:	8a 83       	std	Y+2, r24	; 0x02
    7594:	9b 83       	std	Y+3, r25	; 0x03
_Z29display_function_set_variableffffhhhhPFvjfhE():
    7596:	80 e0       	ldi	r24, 0x00	; 0
    7598:	90 e0       	ldi	r25, 0x00	; 0
    759a:	a0 e8       	ldi	r26, 0x80	; 128
    759c:	bf e3       	ldi	r27, 0x3F	; 63
    759e:	88 87       	std	Y+8, r24	; 0x08
    75a0:	99 87       	std	Y+9, r25	; 0x09
    75a2:	aa 87       	std	Y+10, r26	; 0x0a
    75a4:	bb 87       	std	Y+11, r27	; 0x0b
    75a6:	40 e0       	ldi	r20, 0x00	; 0
    75a8:	50 e0       	ldi	r21, 0x00	; 0
    75aa:	6f e7       	ldi	r22, 0x7F	; 127
    75ac:	73 e4       	ldi	r23, 0x43	; 67
    75ae:	4c 83       	std	Y+4, r20	; 0x04
    75b0:	5d 83       	std	Y+5, r21	; 0x05
    75b2:	6e 83       	std	Y+6, r22	; 0x06
    75b4:	7f 83       	std	Y+7, r23	; 0x07
    75b6:	8e 87       	std	Y+14, r24	; 0x0e
    75b8:	9f 87       	std	Y+15, r25	; 0x0f
    75ba:	a8 8b       	std	Y+16, r26	; 0x10
    75bc:	b9 8b       	std	Y+17, r27	; 0x11
    75be:	81 e0       	ldi	r24, 0x01	; 1
    75c0:	8d 87       	std	Y+13, r24	; 0x0d
    75c2:	1a 8b       	std	Y+18, r17	; 0x12
    75c4:	1c 86       	std	Y+12, r1	; 0x0c
    75c6:	8f e7       	ldi	r24, 0x7F	; 127
    75c8:	96 e3       	ldi	r25, 0x36	; 54
    75ca:	9c 8b       	std	Y+20, r25	; 0x14
    75cc:	8b 8b       	std	Y+19, r24	; 0x13
_Z27display_menu_tds_set_periodjjh():
    75ce:	df 91       	pop	r29
    75d0:	cf 91       	pop	r28
    75d2:	1f 91       	pop	r17
    75d4:	08 95       	ret

000075d6 <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_offsetjjh():
    75d6:	1f 93       	push	r17
    75d8:	cf 93       	push	r28
    75da:	df 93       	push	r29
    75dc:	c8 2f       	mov	r28, r24
    75de:	16 2f       	mov	r17, r22
    75e0:	70 e0       	ldi	r23, 0x00	; 0
    75e2:	60 e0       	ldi	r22, 0x00	; 0
    75e4:	86 e6       	ldi	r24, 0x66	; 102
    75e6:	90 e0       	ldi	r25, 0x00	; 0
    75e8:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    75ec:	81 2f       	mov	r24, r17
    75ee:	0e 94 27 8d 	call	0x11a4e	; 0x11a4e <tds_get_offset(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    75f2:	25 e1       	ldi	r18, 0x15	; 21
    75f4:	c2 9f       	mul	r28, r18
    75f6:	e0 01       	movw	r28, r0
    75f8:	11 24       	eor	r1, r1
    75fa:	c2 5d       	subi	r28, 0xD2	; 210
    75fc:	d5 4f       	sbci	r29, 0xF5	; 245
_Z27display_menu_tds_set_offsetjjh():
    75fe:	bc 01       	movw	r22, r24
    7600:	99 0f       	add	r25, r25
    7602:	88 0b       	sbc	r24, r24
    7604:	99 0b       	sbc	r25, r25
    7606:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
    760a:	20 e0       	ldi	r18, 0x00	; 0
    760c:	30 e0       	ldi	r19, 0x00	; 0
    760e:	4a e7       	ldi	r20, 0x7A	; 122
    7610:	54 e4       	ldi	r21, 0x44	; 68
    7612:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    7616:	68 83       	st	Y, r22
    7618:	79 83       	std	Y+1, r23	; 0x01
    761a:	8a 83       	std	Y+2, r24	; 0x02
    761c:	9b 83       	std	Y+3, r25	; 0x03
    761e:	80 e0       	ldi	r24, 0x00	; 0
    7620:	90 e0       	ldi	r25, 0x00	; 0
    7622:	a0 e2       	ldi	r26, 0x20	; 32
    7624:	b1 ec       	ldi	r27, 0xC1	; 193
    7626:	88 87       	std	Y+8, r24	; 0x08
    7628:	99 87       	std	Y+9, r25	; 0x09
    762a:	aa 87       	std	Y+10, r26	; 0x0a
    762c:	bb 87       	std	Y+11, r27	; 0x0b
    762e:	80 e0       	ldi	r24, 0x00	; 0
    7630:	90 e0       	ldi	r25, 0x00	; 0
    7632:	a0 e2       	ldi	r26, 0x20	; 32
    7634:	b1 e4       	ldi	r27, 0x41	; 65
    7636:	8c 83       	std	Y+4, r24	; 0x04
    7638:	9d 83       	std	Y+5, r25	; 0x05
    763a:	ae 83       	std	Y+6, r26	; 0x06
    763c:	bf 83       	std	Y+7, r27	; 0x07
    763e:	8d ec       	ldi	r24, 0xCD	; 205
    7640:	9c ec       	ldi	r25, 0xCC	; 204
    7642:	ac ec       	ldi	r26, 0xCC	; 204
    7644:	bd e3       	ldi	r27, 0x3D	; 61
    7646:	8e 87       	std	Y+14, r24	; 0x0e
    7648:	9f 87       	std	Y+15, r25	; 0x0f
    764a:	a8 8b       	std	Y+16, r26	; 0x10
    764c:	b9 8b       	std	Y+17, r27	; 0x11
    764e:	1d 86       	std	Y+13, r1	; 0x0d
    7650:	1a 8b       	std	Y+18, r17	; 0x12
    7652:	1c 86       	std	Y+12, r1	; 0x0c
    7654:	86 e6       	ldi	r24, 0x66	; 102
    7656:	96 e3       	ldi	r25, 0x36	; 54
    7658:	9c 8b       	std	Y+20, r25	; 0x14
    765a:	8b 8b       	std	Y+19, r24	; 0x13
_Z27display_menu_tds_set_offsetjjh():
    765c:	df 91       	pop	r29
    765e:	cf 91       	pop	r28
    7660:	1f 91       	pop	r17
    7662:	08 95       	ret

00007664 <button_change_brightness_display_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>:
_Z51button_change_brightness_display_dyn_button_onclickjjh():
    7664:	70 e0       	ldi	r23, 0x00	; 0
    7666:	60 e0       	ldi	r22, 0x00	; 0
    7668:	8b e9       	ldi	r24, 0x9B	; 155
    766a:	90 e0       	ldi	r25, 0x00	; 0
    766c:	0c 94 9a 3a 	jmp	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>

00007670 <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>:
_Z28clik_button_onewire_scan_busjjh():
    7670:	0f 93       	push	r16
    7672:	1f 93       	push	r17
    7674:	cf 93       	push	r28
    7676:	df 93       	push	r29
    7678:	cd b7       	in	r28, 0x3d	; 61
    767a:	de b7       	in	r29, 0x3e	; 62
    767c:	a0 97       	sbiw	r28, 0x20	; 32
    767e:	0f b6       	in	r0, 0x3f	; 63
    7680:	f8 94       	cli
    7682:	de bf       	out	0x3e, r29	; 62
    7684:	0f be       	out	0x3f, r0	; 63
    7686:	cd bf       	out	0x3d, r28	; 61
    7688:	10 92 a1 11 	sts	0x11A1, r1	; 0x8011a1 <Global_HWwirenum>
    768c:	80 e0       	ldi	r24, 0x00	; 0
    768e:	0e 94 d7 8e 	call	0x11dae	; 0x11dae <one_hw_search_device(unsigned char)>
    7692:	0e 94 91 8d 	call	0x11b22	; 0x11b22 <tds_update_associate()>
    7696:	70 e0       	ldi	r23, 0x00	; 0
    7698:	60 e0       	ldi	r22, 0x00	; 0
    769a:	88 e6       	ldi	r24, 0x68	; 104
    769c:	90 e0       	ldi	r25, 0x00	; 0
    769e:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    76a2:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <Global_HWwirenum>
    76a6:	1f 92       	push	r1
    76a8:	8f 93       	push	r24
    76aa:	84 ef       	ldi	r24, 0xF4	; 244
    76ac:	92 e0       	ldi	r25, 0x02	; 2
    76ae:	9f 93       	push	r25
    76b0:	8f 93       	push	r24
    76b2:	8e 01       	movw	r16, r28
    76b4:	0f 5f       	subi	r16, 0xFF	; 255
    76b6:	1f 4f       	sbci	r17, 0xFF	; 255
    76b8:	1f 93       	push	r17
    76ba:	0f 93       	push	r16
    76bc:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    76c0:	b8 01       	movw	r22, r16
    76c2:	8d e0       	ldi	r24, 0x0D	; 13
    76c4:	9a e0       	ldi	r25, 0x0A	; 10
    76c6:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    76ca:	0f 90       	pop	r0
    76cc:	0f 90       	pop	r0
    76ce:	0f 90       	pop	r0
    76d0:	0f 90       	pop	r0
    76d2:	0f 90       	pop	r0
    76d4:	0f 90       	pop	r0
    76d6:	a0 96       	adiw	r28, 0x20	; 32
    76d8:	0f b6       	in	r0, 0x3f	; 63
    76da:	f8 94       	cli
    76dc:	de bf       	out	0x3e, r29	; 62
    76de:	0f be       	out	0x3f, r0	; 63
    76e0:	cd bf       	out	0x3d, r28	; 61
    76e2:	df 91       	pop	r29
    76e4:	cf 91       	pop	r28
    76e6:	1f 91       	pop	r17
    76e8:	0f 91       	pop	r16
    76ea:	08 95       	ret

000076ec <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirejjh():
    76ec:	cf 93       	push	r28
    76ee:	8b e0       	ldi	r24, 0x0B	; 11
    76f0:	48 9f       	mul	r20, r24
    76f2:	f0 01       	movw	r30, r0
    76f4:	11 24       	eor	r1, r1
    76f6:	e1 5a       	subi	r30, 0xA1	; 161
    76f8:	fe 4e       	sbci	r31, 0xEE	; 238
    76fa:	62 85       	ldd	r22, Z+10	; 0x0a
    76fc:	6f 3f       	cpi	r22, 0xFF	; 255
    76fe:	b1 f4       	brne	.+44     	; 0x772c <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)+0x40>
    7700:	c4 2f       	mov	r28, r20
    7702:	70 e0       	ldi	r23, 0x00	; 0
    7704:	60 e0       	ldi	r22, 0x00	; 0
    7706:	84 e6       	ldi	r24, 0x64	; 100
    7708:	90 e0       	ldi	r25, 0x00	; 0
    770a:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    770e:	82 e9       	ldi	r24, 0x92	; 146
    7710:	96 e3       	ldi	r25, 0x36	; 54
    7712:	90 93 cf 09 	sts	0x09CF, r25	; 0x8009cf <dialog_yes_function+0x1>
    7716:	80 93 ce 09 	sts	0x09CE, r24	; 0x8009ce <dialog_yes_function>
    771a:	c0 93 2d 0a 	sts	0x0A2D, r28	; 0x800a2d <dialog_yes_args1>
    771e:	6b e5       	ldi	r22, 0x5B	; 91
    7720:	7a e5       	ldi	r23, 0x5A	; 90
    7722:	8d e0       	ldi	r24, 0x0D	; 13
    7724:	9a e0       	ldi	r25, 0x0A	; 10
    7726:	cf 91       	pop	r28
    7728:	0c 94 f3 e1 	jmp	0x1c3e6	; 0x1c3e6 <strcpy_P>
    772c:	70 e0       	ldi	r23, 0x00	; 0
    772e:	84 e0       	ldi	r24, 0x04	; 4
    7730:	90 e0       	ldi	r25, 0x00	; 0
    7732:	cf 91       	pop	r28
    7734:	0c 94 9a 3a 	jmp	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>

00007738 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>:
_Z26display_element_set_stringPchhPFvjjhE():
    7738:	0f 93       	push	r16
    773a:	1f 93       	push	r17
    773c:	cf 93       	push	r28
    773e:	df 93       	push	r29
    7740:	06 2f       	mov	r16, r22
    7742:	14 2f       	mov	r17, r20
    7744:	e9 01       	movw	r28, r18
    7746:	bc 01       	movw	r22, r24
    7748:	8d ee       	ldi	r24, 0xED	; 237
    774a:	99 e0       	ldi	r25, 0x09	; 9
    774c:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    7750:	00 93 ec 09 	sts	0x09EC, r16	; 0x8009ec <dialog_set_string_max_length>
    7754:	10 93 eb 09 	sts	0x09EB, r17	; 0x8009eb <dialog_set_string_args>
    7758:	d0 93 e9 09 	sts	0x09E9, r29	; 0x8009e9 <dialog_save_string_function+0x1>
    775c:	c0 93 e8 09 	sts	0x09E8, r28	; 0x8009e8 <dialog_save_string_function>
    7760:	df 91       	pop	r29
    7762:	cf 91       	pop	r28
    7764:	1f 91       	pop	r17
    7766:	0f 91       	pop	r16
    7768:	08 95       	ret

0000776a <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>:
_Z25display_menu_tds_set_namejjh():
    776a:	1f 93       	push	r17
    776c:	cf 93       	push	r28
    776e:	df 93       	push	r29
    7770:	00 d0       	rcall	.+0      	; 0x7772 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0x8>
    7772:	00 d0       	rcall	.+0      	; 0x7774 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0xa>
    7774:	00 d0       	rcall	.+0      	; 0x7776 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0xc>
    7776:	1f 92       	push	r1
    7778:	cd b7       	in	r28, 0x3d	; 61
    777a:	de b7       	in	r29, 0x3e	; 62
    777c:	16 2f       	mov	r17, r22
    777e:	be 01       	movw	r22, r28
    7780:	6f 5f       	subi	r22, 0xFF	; 255
    7782:	7f 4f       	sbci	r23, 0xFF	; 255
    7784:	81 2f       	mov	r24, r17
    7786:	0e 94 b1 8c 	call	0x11962	; 0x11962 <tds_get_name(unsigned char, char*)>
    778a:	70 e0       	ldi	r23, 0x00	; 0
    778c:	60 e0       	ldi	r22, 0x00	; 0
    778e:	87 e6       	ldi	r24, 0x67	; 103
    7790:	90 e0       	ldi	r25, 0x00	; 0
    7792:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    7796:	20 e6       	ldi	r18, 0x60	; 96
    7798:	3c e3       	ldi	r19, 0x3C	; 60
    779a:	41 2f       	mov	r20, r17
    779c:	68 e0       	ldi	r22, 0x08	; 8
    779e:	ce 01       	movw	r24, r28
    77a0:	01 96       	adiw	r24, 0x01	; 1
    77a2:	0e 94 9c 3b 	call	0x7738	; 0x7738 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    77a6:	2a 96       	adiw	r28, 0x0a	; 10
    77a8:	0f b6       	in	r0, 0x3f	; 63
    77aa:	f8 94       	cli
    77ac:	de bf       	out	0x3e, r29	; 62
    77ae:	0f be       	out	0x3f, r0	; 63
    77b0:	cd bf       	out	0x3d, r28	; 61
    77b2:	df 91       	pop	r29
    77b4:	cf 91       	pop	r28
    77b6:	1f 91       	pop	r17
    77b8:	08 95       	ret

000077ba <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_time_set_time_manualy_onclickjjh():
    77ba:	0f 93       	push	r16
    77bc:	1f 93       	push	r17
    77be:	cf 93       	push	r28
    77c0:	df 93       	push	r29
    77c2:	00 d0       	rcall	.+0      	; 0x77c4 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0xa>
    77c4:	00 d0       	rcall	.+0      	; 0x77c6 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    77c6:	00 d0       	rcall	.+0      	; 0x77c8 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0xe>
    77c8:	1f 92       	push	r1
    77ca:	cd b7       	in	r28, 0x3d	; 61
    77cc:	de b7       	in	r29, 0x3e	; 62
    77ce:	70 e0       	ldi	r23, 0x00	; 0
    77d0:	60 e0       	ldi	r22, 0x00	; 0
    77d2:	85 e6       	ldi	r24, 0x65	; 101
    77d4:	90 e0       	ldi	r25, 0x00	; 0
    77d6:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    77da:	eb e5       	ldi	r30, 0x5B	; 91
    77dc:	f0 e1       	ldi	r31, 0x10	; 16
    77de:	85 81       	ldd	r24, Z+5	; 0x05
    77e0:	1f 92       	push	r1
    77e2:	8f 93       	push	r24
    77e4:	84 81       	ldd	r24, Z+4	; 0x04
    77e6:	1f 92       	push	r1
    77e8:	8f 93       	push	r24
    77ea:	83 81       	ldd	r24, Z+3	; 0x03
    77ec:	1f 92       	push	r1
    77ee:	8f 93       	push	r24
    77f0:	8e e0       	ldi	r24, 0x0E	; 14
    77f2:	93 e0       	ldi	r25, 0x03	; 3
    77f4:	9f 93       	push	r25
    77f6:	8f 93       	push	r24
    77f8:	8e 01       	movw	r16, r28
    77fa:	0f 5f       	subi	r16, 0xFF	; 255
    77fc:	1f 4f       	sbci	r17, 0xFF	; 255
    77fe:	1f 93       	push	r17
    7800:	0f 93       	push	r16
    7802:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    7806:	2f e7       	ldi	r18, 0x7F	; 127
    7808:	3c e3       	ldi	r19, 0x3C	; 60
    780a:	40 e0       	ldi	r20, 0x00	; 0
    780c:	69 e0       	ldi	r22, 0x09	; 9
    780e:	c8 01       	movw	r24, r16
    7810:	0e 94 9c 3b 	call	0x7738	; 0x7738 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    7814:	0f b6       	in	r0, 0x3f	; 63
    7816:	f8 94       	cli
    7818:	de bf       	out	0x3e, r29	; 62
    781a:	0f be       	out	0x3f, r0	; 63
    781c:	cd bf       	out	0x3d, r28	; 61
    781e:	2a 96       	adiw	r28, 0x0a	; 10
    7820:	0f b6       	in	r0, 0x3f	; 63
    7822:	f8 94       	cli
    7824:	de bf       	out	0x3e, r29	; 62
    7826:	0f be       	out	0x3f, r0	; 63
    7828:	cd bf       	out	0x3d, r28	; 61
    782a:	df 91       	pop	r29
    782c:	cf 91       	pop	r28
    782e:	1f 91       	pop	r17
    7830:	0f 91       	pop	r16
    7832:	08 95       	ret

00007834 <button_time_set_date_manualy_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_time_set_date_manualy_onclickjjh():
    7834:	0f 93       	push	r16
    7836:	1f 93       	push	r17
    7838:	cf 93       	push	r28
    783a:	df 93       	push	r29
    783c:	cd b7       	in	r28, 0x3d	; 61
    783e:	de b7       	in	r29, 0x3e	; 62
    7840:	2c 97       	sbiw	r28, 0x0c	; 12
    7842:	0f b6       	in	r0, 0x3f	; 63
    7844:	f8 94       	cli
    7846:	de bf       	out	0x3e, r29	; 62
    7848:	0f be       	out	0x3f, r0	; 63
    784a:	cd bf       	out	0x3d, r28	; 61
    784c:	70 e0       	ldi	r23, 0x00	; 0
    784e:	60 e0       	ldi	r22, 0x00	; 0
    7850:	85 e6       	ldi	r24, 0x65	; 101
    7852:	90 e0       	ldi	r25, 0x00	; 0
    7854:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
_ZNK8DateTime4yearEv():
    7858:	eb e5       	ldi	r30, 0x5B	; 91
    785a:	f0 e1       	ldi	r31, 0x10	; 16
    785c:	80 81       	ld	r24, Z
    785e:	90 e0       	ldi	r25, 0x00	; 0
    7860:	80 53       	subi	r24, 0x30	; 48
    7862:	98 4f       	sbci	r25, 0xF8	; 248
_Z36button_time_set_date_manualy_onclickjjh():
    7864:	9f 93       	push	r25
    7866:	8f 93       	push	r24
    7868:	81 81       	ldd	r24, Z+1	; 0x01
    786a:	1f 92       	push	r1
    786c:	8f 93       	push	r24
    786e:	82 81       	ldd	r24, Z+2	; 0x02
    7870:	1f 92       	push	r1
    7872:	8f 93       	push	r24
    7874:	8d e1       	ldi	r24, 0x1D	; 29
    7876:	93 e0       	ldi	r25, 0x03	; 3
    7878:	9f 93       	push	r25
    787a:	8f 93       	push	r24
    787c:	8e 01       	movw	r16, r28
    787e:	0f 5f       	subi	r16, 0xFF	; 255
    7880:	1f 4f       	sbci	r17, 0xFF	; 255
    7882:	1f 93       	push	r17
    7884:	0f 93       	push	r16
    7886:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    788a:	2d eb       	ldi	r18, 0xBD	; 189
    788c:	3c e3       	ldi	r19, 0x3C	; 60
    788e:	40 e0       	ldi	r20, 0x00	; 0
    7890:	6b e0       	ldi	r22, 0x0B	; 11
    7892:	c8 01       	movw	r24, r16
    7894:	0e 94 9c 3b 	call	0x7738	; 0x7738 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    7898:	0f b6       	in	r0, 0x3f	; 63
    789a:	f8 94       	cli
    789c:	de bf       	out	0x3e, r29	; 62
    789e:	0f be       	out	0x3f, r0	; 63
    78a0:	cd bf       	out	0x3d, r28	; 61
    78a2:	2c 96       	adiw	r28, 0x0c	; 12
    78a4:	0f b6       	in	r0, 0x3f	; 63
    78a6:	f8 94       	cli
    78a8:	de bf       	out	0x3e, r29	; 62
    78aa:	0f be       	out	0x3f, r0	; 63
    78ac:	cd bf       	out	0x3d, r28	; 61
    78ae:	df 91       	pop	r29
    78b0:	cf 91       	pop	r28
    78b2:	1f 91       	pop	r17
    78b4:	0f 91       	pop	r16
    78b6:	08 95       	ret

000078b8 <display_element_get_string(char*)>:
_Z26display_element_get_stringPc():
    78b8:	6d ee       	ldi	r22, 0xED	; 237
    78ba:	79 e0       	ldi	r23, 0x09	; 9
    78bc:	0c 94 26 e2 	jmp	0x1c44c	; 0x1c44c <strcpy>

000078c0 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>:
_Z18menu_tds_save_namejjh():
    78c0:	cf 93       	push	r28
    78c2:	df 93       	push	r29
    78c4:	00 d0       	rcall	.+0      	; 0x78c6 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x6>
    78c6:	00 d0       	rcall	.+0      	; 0x78c8 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x8>
    78c8:	00 d0       	rcall	.+0      	; 0x78ca <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0xa>
    78ca:	1f 92       	push	r1
    78cc:	cd b7       	in	r28, 0x3d	; 61
    78ce:	de b7       	in	r29, 0x3e	; 62
    78d0:	ce 01       	movw	r24, r28
    78d2:	01 96       	adiw	r24, 0x01	; 1
    78d4:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <display_element_get_string(char*)>
    78d8:	89 81       	ldd	r24, Y+1	; 0x01
    78da:	88 23       	and	r24, r24
    78dc:	39 f0       	breq	.+14     	; 0x78ec <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x2c>
    78de:	be 01       	movw	r22, r28
    78e0:	6f 5f       	subi	r22, 0xFF	; 255
    78e2:	7f 4f       	sbci	r23, 0xFF	; 255
    78e4:	80 91 eb 09 	lds	r24, 0x09EB	; 0x8009eb <dialog_set_string_args>
    78e8:	0e 94 d4 8c 	call	0x119a8	; 0x119a8 <tds_set_name(unsigned char, char*)>
    78ec:	2a 96       	adiw	r28, 0x0a	; 10
    78ee:	0f b6       	in	r0, 0x3f	; 63
    78f0:	f8 94       	cli
    78f2:	de bf       	out	0x3e, r29	; 62
    78f4:	0f be       	out	0x3f, r0	; 63
    78f6:	cd bf       	out	0x3d, r28	; 61
    78f8:	df 91       	pop	r29
    78fa:	cf 91       	pop	r28
    78fc:	08 95       	ret

000078fe <helper_set_time_manualy(unsigned int, unsigned int, unsigned char)>:
_Z23helper_set_time_manualyjjh():
    78fe:	cf 92       	push	r12
    7900:	ef 92       	push	r14
    7902:	0f 93       	push	r16
    7904:	1f 93       	push	r17
    7906:	cf 93       	push	r28
    7908:	df 93       	push	r29
    790a:	cd b7       	in	r28, 0x3d	; 61
    790c:	de b7       	in	r29, 0x3e	; 62
    790e:	64 97       	sbiw	r28, 0x14	; 20
    7910:	0f b6       	in	r0, 0x3f	; 63
    7912:	f8 94       	cli
    7914:	de bf       	out	0x3e, r29	; 62
    7916:	0f be       	out	0x3f, r0	; 63
    7918:	cd bf       	out	0x3d, r28	; 61
    791a:	ce 01       	movw	r24, r28
    791c:	01 96       	adiw	r24, 0x01	; 1
    791e:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <display_element_get_string(char*)>
    7922:	0a e0       	ldi	r16, 0x0A	; 10
    7924:	10 e0       	ldi	r17, 0x00	; 0
    7926:	23 e0       	ldi	r18, 0x03	; 3
    7928:	30 e0       	ldi	r19, 0x00	; 0
    792a:	ae 01       	movw	r20, r28
    792c:	4e 5e       	subi	r20, 0xEE	; 238
    792e:	5f 4f       	sbci	r21, 0xFF	; 255
    7930:	6a e3       	ldi	r22, 0x3A	; 58
    7932:	ce 01       	movw	r24, r28
    7934:	01 96       	adiw	r24, 0x01	; 1
    7936:	0e 94 d4 bd 	call	0x17ba8	; 0x17ba8 <parseBytes(char const*, char, unsigned char*, int, int)>
    793a:	eb e5       	ldi	r30, 0x5B	; 91
    793c:	f0 e1       	ldi	r31, 0x10	; 16
_ZNK8DateTime4yearEv():
    793e:	60 81       	ld	r22, Z
    7940:	70 e0       	ldi	r23, 0x00	; 0
    7942:	60 53       	subi	r22, 0x30	; 48
    7944:	78 4f       	sbci	r23, 0xF8	; 248
_Z23helper_set_time_manualyjjh():
    7946:	cc 88       	ldd	r12, Y+20	; 0x14
    7948:	eb 88       	ldd	r14, Y+19	; 0x13
    794a:	0a 89       	ldd	r16, Y+18	; 0x12
    794c:	22 81       	ldd	r18, Z+2	; 0x02
    794e:	41 81       	ldd	r20, Z+1	; 0x01
    7950:	ce 01       	movw	r24, r28
    7952:	0b 96       	adiw	r24, 0x0b	; 11
    7954:	0e 94 87 cc 	call	0x1990e	; 0x1990e <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    7958:	ce 01       	movw	r24, r28
    795a:	0b 96       	adiw	r24, 0x0b	; 11
    795c:	0e 94 ae cc 	call	0x1995c	; 0x1995c <RTC_DS1307::adjust(DateTime const&)>
    7960:	64 96       	adiw	r28, 0x14	; 20
    7962:	0f b6       	in	r0, 0x3f	; 63
    7964:	f8 94       	cli
    7966:	de bf       	out	0x3e, r29	; 62
    7968:	0f be       	out	0x3f, r0	; 63
    796a:	cd bf       	out	0x3d, r28	; 61
    796c:	df 91       	pop	r29
    796e:	cf 91       	pop	r28
    7970:	1f 91       	pop	r17
    7972:	0f 91       	pop	r16
    7974:	ef 90       	pop	r14
    7976:	cf 90       	pop	r12
    7978:	08 95       	ret

0000797a <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)>:
_Z23helper_set_date_manualyjjh():
    797a:	cf 92       	push	r12
    797c:	ef 92       	push	r14
    797e:	0f 93       	push	r16
    7980:	1f 93       	push	r17
    7982:	cf 93       	push	r28
    7984:	df 93       	push	r29
    7986:	cd b7       	in	r28, 0x3d	; 61
    7988:	de b7       	in	r29, 0x3e	; 62
    798a:	69 97       	sbiw	r28, 0x19	; 25
    798c:	0f b6       	in	r0, 0x3f	; 63
    798e:	f8 94       	cli
    7990:	de bf       	out	0x3e, r29	; 62
    7992:	0f be       	out	0x3f, r0	; 63
    7994:	cd bf       	out	0x3d, r28	; 61
    7996:	ce 01       	movw	r24, r28
    7998:	01 96       	adiw	r24, 0x01	; 1
    799a:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <display_element_get_string(char*)>
    799e:	0a e0       	ldi	r16, 0x0A	; 10
    79a0:	10 e0       	ldi	r17, 0x00	; 0
    79a2:	23 e0       	ldi	r18, 0x03	; 3
    79a4:	30 e0       	ldi	r19, 0x00	; 0
    79a6:	ae 01       	movw	r20, r28
    79a8:	4c 5e       	subi	r20, 0xEC	; 236
    79aa:	5f 4f       	sbci	r21, 0xFF	; 255
    79ac:	6e e2       	ldi	r22, 0x2E	; 46
    79ae:	ce 01       	movw	r24, r28
    79b0:	01 96       	adiw	r24, 0x01	; 1
    79b2:	0e 94 10 be 	call	0x17c20	; 0x17c20 <parseBytes(char const*, char, unsigned int*, int, int)>
    79b6:	eb e5       	ldi	r30, 0x5B	; 91
    79b8:	f0 e1       	ldi	r31, 0x10	; 16
    79ba:	68 8d       	ldd	r22, Y+24	; 0x18
    79bc:	79 8d       	ldd	r23, Y+25	; 0x19
    79be:	c5 80       	ldd	r12, Z+5	; 0x05
    79c0:	e4 80       	ldd	r14, Z+4	; 0x04
    79c2:	03 81       	ldd	r16, Z+3	; 0x03
    79c4:	2c 89       	ldd	r18, Y+20	; 0x14
    79c6:	4e 89       	ldd	r20, Y+22	; 0x16
    79c8:	ce 01       	movw	r24, r28
    79ca:	0d 96       	adiw	r24, 0x0d	; 13
    79cc:	0e 94 87 cc 	call	0x1990e	; 0x1990e <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    79d0:	ce 01       	movw	r24, r28
    79d2:	0d 96       	adiw	r24, 0x0d	; 13
    79d4:	0e 94 ae cc 	call	0x1995c	; 0x1995c <RTC_DS1307::adjust(DateTime const&)>
    79d8:	69 96       	adiw	r28, 0x19	; 25
    79da:	0f b6       	in	r0, 0x3f	; 63
    79dc:	f8 94       	cli
    79de:	de bf       	out	0x3e, r29	; 62
    79e0:	0f be       	out	0x3f, r0	; 63
    79e2:	cd bf       	out	0x3d, r28	; 61
    79e4:	df 91       	pop	r29
    79e6:	cf 91       	pop	r28
    79e8:	1f 91       	pop	r17
    79ea:	0f 91       	pop	r16
    79ec:	ef 90       	pop	r14
    79ee:	cf 90       	pop	r12
    79f0:	08 95       	ret

000079f2 <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
    79f2:	ed ee       	ldi	r30, 0xED	; 237
    79f4:	f9 e0       	ldi	r31, 0x09	; 9
    79f6:	01 90       	ld	r0, Z+
    79f8:	00 20       	and	r0, r0
    79fa:	e9 f7       	brne	.-6      	; 0x79f6 <display_element_set_string_add_char(char)+0x4>
    79fc:	ee 5e       	subi	r30, 0xEE	; 238
    79fe:	f9 40       	sbci	r31, 0x09	; 9
    7a00:	ff 27       	eor	r31, r31
    7a02:	20 91 ec 09 	lds	r18, 0x09EC	; 0x8009ec <dialog_set_string_max_length>
    7a06:	21 50       	subi	r18, 0x01	; 1
    7a08:	33 0b       	sbc	r19, r19
    7a0a:	e2 17       	cp	r30, r18
    7a0c:	f3 07       	cpc	r31, r19
    7a0e:	24 f4       	brge	.+8      	; 0x7a18 <display_element_set_string_add_char(char)+0x26>
    7a10:	e3 51       	subi	r30, 0x13	; 19
    7a12:	f6 4f       	sbci	r31, 0xF6	; 246
    7a14:	80 83       	st	Z, r24
    7a16:	11 82       	std	Z+1, r1	; 0x01
    7a18:	08 95       	ret

00007a1a <click_keyboard_number(unsigned int, unsigned int, unsigned char)>:
_Z21click_keyboard_numberjjh():
    7a1a:	8e e2       	ldi	r24, 0x2E	; 46
    7a1c:	4a 30       	cpi	r20, 0x0A	; 10
    7a1e:	29 f0       	breq	.+10     	; 0x7a2a <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0x10>
    7a20:	80 e3       	ldi	r24, 0x30	; 48
    7a22:	84 0f       	add	r24, r20
    7a24:	4b 30       	cpi	r20, 0x0B	; 11
    7a26:	09 f4       	brne	.+2      	; 0x7a2a <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0x10>
    7a28:	8a e3       	ldi	r24, 0x3A	; 58
    7a2a:	0c 94 f9 3c 	jmp	0x79f2	; 0x79f2 <display_element_set_string_add_char(char)>

00007a2e <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_alfajjh():
    7a2e:	90 91 ea 09 	lds	r25, 0x09EA	; 0x8009ea <dialog_set_string_keyboard_type>
    7a32:	91 11       	cpse	r25, r1
    7a34:	07 c0       	rjmp	.+14     	; 0x7a44 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x16>
    7a36:	e4 2f       	mov	r30, r20
    7a38:	f0 e0       	ldi	r31, 0x00	; 0
    7a3a:	ee 58       	subi	r30, 0x8E	; 142
    7a3c:	f7 4a       	sbci	r31, 0xA7	; 167
    7a3e:	84 91       	lpm	r24, Z
    7a40:	0c 94 f9 3c 	jmp	0x79f2	; 0x79f2 <display_element_set_string_add_char(char)>
    7a44:	91 30       	cpi	r25, 0x01	; 1
    7a46:	29 f4       	brne	.+10     	; 0x7a52 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x24>
    7a48:	e4 2f       	mov	r30, r20
    7a4a:	f0 e0       	ldi	r31, 0x00	; 0
    7a4c:	e8 5a       	subi	r30, 0xA8	; 168
    7a4e:	f7 4a       	sbci	r31, 0xA7	; 167
    7a50:	f6 cf       	rjmp	.-20     	; 0x7a3e <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>
    7a52:	92 30       	cpi	r25, 0x02	; 2
    7a54:	a9 f7       	brne	.-22     	; 0x7a40 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x12>
    7a56:	e4 2f       	mov	r30, r20
    7a58:	f0 e0       	ldi	r31, 0x00	; 0
    7a5a:	e2 5c       	subi	r30, 0xC2	; 194
    7a5c:	f7 4a       	sbci	r31, 0xA7	; 167
    7a5e:	ef cf       	rjmp	.-34     	; 0x7a3e <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>

00007a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>:
_Z11show_stringPciihjjb():
    7a60:	6f 92       	push	r6
    7a62:	7f 92       	push	r7
    7a64:	8f 92       	push	r8
    7a66:	9f 92       	push	r9
    7a68:	af 92       	push	r10
    7a6a:	bf 92       	push	r11
    7a6c:	cf 92       	push	r12
    7a6e:	df 92       	push	r13
    7a70:	ef 92       	push	r14
    7a72:	ff 92       	push	r15
    7a74:	0f 93       	push	r16
    7a76:	1f 93       	push	r17
    7a78:	cf 93       	push	r28
    7a7a:	df 93       	push	r29
    7a7c:	00 d0       	rcall	.+0      	; 0x7a7e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)+0x1e>
    7a7e:	00 d0       	rcall	.+0      	; 0x7a80 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)+0x20>
    7a80:	cd b7       	in	r28, 0x3d	; 61
    7a82:	de b7       	in	r29, 0x3e	; 62
    7a84:	3c 01       	movw	r6, r24
    7a86:	5b 01       	movw	r10, r22
    7a88:	4a 01       	movw	r8, r20
    7a8a:	d2 2e       	mov	r13, r18
    7a8c:	6c 2d       	mov	r22, r12
    7a8e:	85 e1       	ldi	r24, 0x15	; 21
    7a90:	9c e0       	ldi	r25, 0x0C	; 12
    7a92:	0e 94 31 97 	call	0x12e62	; 0x12e62 <LCDWIKI_GUI::Set_Text_Mode(bool)>
    7a96:	6d 2d       	mov	r22, r13
    7a98:	85 e1       	ldi	r24, 0x15	; 21
    7a9a:	9c e0       	ldi	r25, 0x0C	; 12
    7a9c:	0e 94 2e 97 	call	0x12e5c	; 0x12e5c <LCDWIKI_GUI::Set_Text_Size(unsigned char)>
    7aa0:	b8 01       	movw	r22, r16
    7aa2:	85 e1       	ldi	r24, 0x15	; 21
    7aa4:	9c e0       	ldi	r25, 0x0C	; 12
    7aa6:	0e 94 26 97 	call	0x12e4c	; 0x12e4c <LCDWIKI_GUI::Set_Text_colour(unsigned int)>
    7aaa:	b7 01       	movw	r22, r14
    7aac:	85 e1       	ldi	r24, 0x15	; 21
    7aae:	9c e0       	ldi	r25, 0x0C	; 12
    7ab0:	0e 94 2a 97 	call	0x12e54	; 0x12e54 <LCDWIKI_GUI::Set_Text_Back_colour(unsigned int)>
    7ab4:	b3 01       	movw	r22, r6
    7ab6:	ce 01       	movw	r24, r28
    7ab8:	01 96       	adiw	r24, 0x01	; 1
    7aba:	0e 94 81 db 	call	0x1b702	; 0x1b702 <String::String(char const*)>
    7abe:	94 01       	movw	r18, r8
    7ac0:	a5 01       	movw	r20, r10
    7ac2:	be 01       	movw	r22, r28
    7ac4:	6f 5f       	subi	r22, 0xFF	; 255
    7ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    7ac8:	85 e1       	ldi	r24, 0x15	; 21
    7aca:	9c e0       	ldi	r25, 0x0C	; 12
    7acc:	0e 94 b7 98 	call	0x1316e	; 0x1316e <LCDWIKI_GUI::Print_String(String, int, int)>
    7ad0:	ce 01       	movw	r24, r28
    7ad2:	01 96       	adiw	r24, 0x01	; 1
    7ad4:	0e 94 12 db 	call	0x1b624	; 0x1b624 <String::~String()>
    7ad8:	26 96       	adiw	r28, 0x06	; 6
    7ada:	0f b6       	in	r0, 0x3f	; 63
    7adc:	f8 94       	cli
    7ade:	de bf       	out	0x3e, r29	; 62
    7ae0:	0f be       	out	0x3f, r0	; 63
    7ae2:	cd bf       	out	0x3d, r28	; 61
    7ae4:	df 91       	pop	r29
    7ae6:	cf 91       	pop	r28
    7ae8:	1f 91       	pop	r17
    7aea:	0f 91       	pop	r16
    7aec:	ff 90       	pop	r15
    7aee:	ef 90       	pop	r14
    7af0:	df 90       	pop	r13
    7af2:	cf 90       	pop	r12
    7af4:	bf 90       	pop	r11
    7af6:	af 90       	pop	r10
    7af8:	9f 90       	pop	r9
    7afa:	8f 90       	pop	r8
    7afc:	7f 90       	pop	r7
    7afe:	6f 90       	pop	r6
    7b00:	08 95       	ret

00007b02 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z32display_element_dialog_show_textjjjjhhPc():
    7b02:	cf 92       	push	r12
    7b04:	ef 92       	push	r14
    7b06:	ff 92       	push	r15
    7b08:	0f 93       	push	r16
    7b0a:	1f 93       	push	r17
    7b0c:	ab 01       	movw	r20, r22
    7b0e:	c1 2c       	mov	r12, r1
    7b10:	ee 24       	eor	r14, r14
    7b12:	ea 94       	dec	r14
    7b14:	fe 2c       	mov	r15, r14
    7b16:	10 e0       	ldi	r17, 0x00	; 0
    7b18:	00 e0       	ldi	r16, 0x00	; 0
    7b1a:	22 e0       	ldi	r18, 0x02	; 2
    7b1c:	bc 01       	movw	r22, r24
    7b1e:	8d e0       	ldi	r24, 0x0D	; 13
    7b20:	9a e0       	ldi	r25, 0x0A	; 10
    7b22:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7b26:	1f 91       	pop	r17
    7b28:	0f 91       	pop	r16
    7b2a:	ff 90       	pop	r15
    7b2c:	ef 90       	pop	r14
    7b2e:	cf 90       	pop	r12
    7b30:	08 95       	ret

00007b32 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z38display_element_show_tds_info_dynamicsjjjjhhPc():
    7b32:	af 92       	push	r10
    7b34:	bf 92       	push	r11
    7b36:	cf 92       	push	r12
    7b38:	df 92       	push	r13
    7b3a:	ef 92       	push	r14
    7b3c:	ff 92       	push	r15
    7b3e:	0f 93       	push	r16
    7b40:	1f 93       	push	r17
    7b42:	cf 93       	push	r28
    7b44:	df 93       	push	r29
    7b46:	cd b7       	in	r28, 0x3d	; 61
    7b48:	de b7       	in	r29, 0x3e	; 62
    7b4a:	ca 54       	subi	r28, 0x4A	; 74
    7b4c:	d1 09       	sbc	r29, r1
    7b4e:	0f b6       	in	r0, 0x3f	; 63
    7b50:	f8 94       	cli
    7b52:	de bf       	out	0x3e, r29	; 62
    7b54:	0f be       	out	0x3f, r0	; 63
    7b56:	cd bf       	out	0x3d, r28	; 61
    7b58:	6c 01       	movw	r12, r24
    7b5a:	5b 01       	movw	r10, r22
    7b5c:	be 01       	movw	r22, r28
    7b5e:	6b 5c       	subi	r22, 0xCB	; 203
    7b60:	7f 4f       	sbci	r23, 0xFF	; 255
    7b62:	8e 2d       	mov	r24, r14
    7b64:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    7b68:	81 30       	cpi	r24, 0x01	; 1
    7b6a:	e1 f5       	brne	.+120    	; 0x7be4 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb2>
    7b6c:	8e e1       	ldi	r24, 0x1E	; 30
    7b6e:	e8 9e       	mul	r14, r24
    7b70:	f0 01       	movw	r30, r0
    7b72:	11 24       	eor	r1, r1
    7b74:	ee 55       	subi	r30, 0x5E	; 94
    7b76:	fe 4e       	sbci	r31, 0xEE	; 238
    7b78:	65 81       	ldd	r22, Z+5	; 0x05
    7b7a:	76 81       	ldd	r23, Z+6	; 0x06
    7b7c:	07 2e       	mov	r0, r23
    7b7e:	00 0c       	add	r0, r0
    7b80:	88 0b       	sbc	r24, r24
    7b82:	99 0b       	sbc	r25, r25
    7b84:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
    7b88:	20 e0       	ldi	r18, 0x00	; 0
    7b8a:	30 e0       	ldi	r19, 0x00	; 0
    7b8c:	4a e7       	ldi	r20, 0x7A	; 122
    7b8e:	54 e4       	ldi	r21, 0x44	; 68
    7b90:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
    7b94:	8e 01       	movw	r16, r28
    7b96:	05 5e       	subi	r16, 0xE5	; 229
    7b98:	1f 4f       	sbci	r17, 0xFF	; 255
    7b9a:	22 e0       	ldi	r18, 0x02	; 2
    7b9c:	44 e0       	ldi	r20, 0x04	; 4
    7b9e:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    7ba2:	6d ef       	ldi	r22, 0xFD	; 253
    7ba4:	77 e0       	ldi	r23, 0x07	; 7
    7ba6:	c8 01       	movw	r24, r16
    7ba8:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    7bac:	61 e1       	ldi	r22, 0x11	; 17
    7bae:	7b e5       	ldi	r23, 0x5B	; 91
    7bb0:	ce 01       	movw	r24, r28
    7bb2:	01 96       	adiw	r24, 0x01	; 1
    7bb4:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    7bb8:	b8 01       	movw	r22, r16
    7bba:	ce 01       	movw	r24, r28
    7bbc:	01 96       	adiw	r24, 0x01	; 1
    7bbe:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    7bc2:	a5 01       	movw	r20, r10
    7bc4:	44 57       	subi	r20, 0x74	; 116
    7bc6:	5f 4f       	sbci	r21, 0xFF	; 255
    7bc8:	b6 01       	movw	r22, r12
    7bca:	66 5f       	subi	r22, 0xF6	; 246
    7bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    7bce:	c1 2c       	mov	r12, r1
    7bd0:	ee 24       	eor	r14, r14
    7bd2:	ea 94       	dec	r14
    7bd4:	fe 2c       	mov	r15, r14
    7bd6:	10 e0       	ldi	r17, 0x00	; 0
    7bd8:	00 e0       	ldi	r16, 0x00	; 0
    7bda:	22 e0       	ldi	r18, 0x02	; 2
    7bdc:	ce 01       	movw	r24, r28
    7bde:	01 96       	adiw	r24, 0x01	; 1
    7be0:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7be4:	c6 5b       	subi	r28, 0xB6	; 182
    7be6:	df 4f       	sbci	r29, 0xFF	; 255
    7be8:	0f b6       	in	r0, 0x3f	; 63
    7bea:	f8 94       	cli
    7bec:	de bf       	out	0x3e, r29	; 62
    7bee:	0f be       	out	0x3f, r0	; 63
    7bf0:	cd bf       	out	0x3d, r28	; 61
    7bf2:	df 91       	pop	r29
    7bf4:	cf 91       	pop	r28
    7bf6:	1f 91       	pop	r17
    7bf8:	0f 91       	pop	r16
    7bfa:	ff 90       	pop	r15
    7bfc:	ef 90       	pop	r14
    7bfe:	df 90       	pop	r13
    7c00:	cf 90       	pop	r12
    7c02:	bf 90       	pop	r11
    7c04:	af 90       	pop	r10
    7c06:	08 95       	ret

00007c08 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z36display_element_show_tds_info_staticjjjjhhPc():
    7c08:	2f 92       	push	r2
    7c0a:	3f 92       	push	r3
    7c0c:	4f 92       	push	r4
    7c0e:	5f 92       	push	r5
    7c10:	6f 92       	push	r6
    7c12:	7f 92       	push	r7
    7c14:	8f 92       	push	r8
    7c16:	9f 92       	push	r9
    7c18:	af 92       	push	r10
    7c1a:	bf 92       	push	r11
    7c1c:	cf 92       	push	r12
    7c1e:	df 92       	push	r13
    7c20:	ef 92       	push	r14
    7c22:	ff 92       	push	r15
    7c24:	0f 93       	push	r16
    7c26:	1f 93       	push	r17
    7c28:	cf 93       	push	r28
    7c2a:	df 93       	push	r29
    7c2c:	cd b7       	in	r28, 0x3d	; 61
    7c2e:	de b7       	in	r29, 0x3e	; 62
    7c30:	ca 54       	subi	r28, 0x4A	; 74
    7c32:	d1 09       	sbc	r29, r1
    7c34:	0f b6       	in	r0, 0x3f	; 63
    7c36:	f8 94       	cli
    7c38:	de bf       	out	0x3e, r29	; 62
    7c3a:	0f be       	out	0x3f, r0	; 63
    7c3c:	cd bf       	out	0x3d, r28	; 61
    7c3e:	4c 01       	movw	r8, r24
    7c40:	2b 01       	movw	r4, r22
    7c42:	5a 01       	movw	r10, r20
    7c44:	89 01       	movw	r16, r18
    7c46:	de 2c       	mov	r13, r14
    7c48:	70 e0       	ldi	r23, 0x00	; 0
    7c4a:	60 e0       	ldi	r22, 0x00	; 0
    7c4c:	85 e1       	ldi	r24, 0x15	; 21
    7c4e:	9c e0       	ldi	r25, 0x0C	; 12
    7c50:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7c54:	04 0d       	add	r16, r4
    7c56:	15 1d       	adc	r17, r5
    7c58:	94 01       	movw	r18, r8
    7c5a:	2a 0d       	add	r18, r10
    7c5c:	3b 1d       	adc	r19, r11
    7c5e:	a2 01       	movw	r20, r4
    7c60:	b4 01       	movw	r22, r8
    7c62:	85 e1       	ldi	r24, 0x15	; 21
    7c64:	9c e0       	ldi	r25, 0x0C	; 12
    7c66:	0e 94 d5 96 	call	0x12daa	; 0x12daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    7c6a:	be 01       	movw	r22, r28
    7c6c:	6b 5c       	subi	r22, 0xCB	; 203
    7c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    7c70:	8e 2d       	mov	r24, r14
    7c72:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    7c76:	12 01       	movw	r2, r4
    7c78:	28 e2       	ldi	r18, 0x28	; 40
    7c7a:	22 0e       	add	r2, r18
    7c7c:	31 1c       	adc	r3, r1
    7c7e:	9e 01       	movw	r18, r28
    7c80:	25 5e       	subi	r18, 0xE5	; 229
    7c82:	3f 4f       	sbci	r19, 0xFF	; 255
    7c84:	59 01       	movw	r10, r18
    7c86:	81 30       	cpi	r24, 0x01	; 1
    7c88:	09 f0       	breq	.+2      	; 0x7c8c <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x84>
    7c8a:	ca c0       	rjmp	.+404    	; 0x7e20 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x218>
    7c8c:	00 e1       	ldi	r16, 0x10	; 16
    7c8e:	28 e0       	ldi	r18, 0x08	; 8
    7c90:	ae 01       	movw	r20, r28
    7c92:	4a 5c       	subi	r20, 0xCA	; 202
    7c94:	5f 4f       	sbci	r21, 0xFF	; 255
    7c96:	6a e3       	ldi	r22, 0x3A	; 58
    7c98:	ce 01       	movw	r24, r28
    7c9a:	01 96       	adiw	r24, 0x01	; 1
    7c9c:	3c 01       	movw	r6, r24
    7c9e:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    7ca2:	7f 92       	push	r7
    7ca4:	6f 92       	push	r6
    7ca6:	8c e2       	ldi	r24, 0x2C	; 44
    7ca8:	93 e0       	ldi	r25, 0x03	; 3
    7caa:	9f 93       	push	r25
    7cac:	8f 93       	push	r24
    7cae:	bf 92       	push	r11
    7cb0:	af 92       	push	r10
    7cb2:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    7cb6:	9a e0       	ldi	r25, 0x0A	; 10
    7cb8:	89 0e       	add	r8, r25
    7cba:	91 1c       	adc	r9, r1
    7cbc:	a2 01       	movw	r20, r4
    7cbe:	4b 5a       	subi	r20, 0xAB	; 171
    7cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    7cc2:	c1 2c       	mov	r12, r1
    7cc4:	ee 24       	eor	r14, r14
    7cc6:	ea 94       	dec	r14
    7cc8:	fe 2c       	mov	r15, r14
    7cca:	10 e0       	ldi	r17, 0x00	; 0
    7ccc:	00 e0       	ldi	r16, 0x00	; 0
    7cce:	21 e0       	ldi	r18, 0x01	; 1
    7cd0:	b4 01       	movw	r22, r8
    7cd2:	c5 01       	movw	r24, r10
    7cd4:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7cd8:	6b ec       	ldi	r22, 0xCB	; 203
    7cda:	79 e5       	ldi	r23, 0x59	; 89
    7cdc:	c3 01       	movw	r24, r6
    7cde:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    7ce2:	85 e3       	ldi	r24, 0x35	; 53
    7ce4:	90 e0       	ldi	r25, 0x00	; 0
    7ce6:	8c 0f       	add	r24, r28
    7ce8:	9d 1f       	adc	r25, r29
    7cea:	0c 96       	adiw	r24, 0x0c	; 12
    7cec:	9f 93       	push	r25
    7cee:	8f 93       	push	r24
    7cf0:	7f 92       	push	r7
    7cf2:	6f 92       	push	r6
    7cf4:	84 e3       	ldi	r24, 0x34	; 52
    7cf6:	93 e0       	ldi	r25, 0x03	; 3
    7cf8:	9f 93       	push	r25
    7cfa:	8f 93       	push	r24
    7cfc:	bf 92       	push	r11
    7cfe:	af 92       	push	r10
    7d00:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    7d04:	22 e0       	ldi	r18, 0x02	; 2
    7d06:	a1 01       	movw	r20, r2
    7d08:	b4 01       	movw	r22, r8
    7d0a:	c5 01       	movw	r24, r10
    7d0c:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7d10:	21 96       	adiw	r28, 0x01	; 1
    7d12:	6e ad       	ldd	r22, Y+62	; 0x3e
    7d14:	7f ad       	ldd	r23, Y+63	; 0x3f
    7d16:	21 97       	sbiw	r28, 0x01	; 1
    7d18:	07 2e       	mov	r0, r23
    7d1a:	00 0c       	add	r0, r0
    7d1c:	88 0b       	sbc	r24, r24
    7d1e:	99 0b       	sbc	r25, r25
    7d20:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
    7d24:	20 e0       	ldi	r18, 0x00	; 0
    7d26:	30 e0       	ldi	r19, 0x00	; 0
    7d28:	4a e7       	ldi	r20, 0x7A	; 122
    7d2a:	54 e4       	ldi	r21, 0x44	; 68
    7d2c:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
    7d30:	85 01       	movw	r16, r10
    7d32:	22 e0       	ldi	r18, 0x02	; 2
    7d34:	44 e0       	ldi	r20, 0x04	; 4
    7d36:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    7d3a:	6d ef       	ldi	r22, 0xFD	; 253
    7d3c:	77 e0       	ldi	r23, 0x07	; 7
    7d3e:	c5 01       	movw	r24, r10
    7d40:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    7d44:	69 e0       	ldi	r22, 0x09	; 9
    7d46:	7b e5       	ldi	r23, 0x5B	; 91
    7d48:	c3 01       	movw	r24, r6
    7d4a:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    7d4e:	b5 01       	movw	r22, r10
    7d50:	c3 01       	movw	r24, r6
    7d52:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    7d56:	a2 01       	movw	r20, r4
    7d58:	44 5c       	subi	r20, 0xC4	; 196
    7d5a:	5f 4f       	sbci	r21, 0xFF	; 255
    7d5c:	10 e0       	ldi	r17, 0x00	; 0
    7d5e:	00 e0       	ldi	r16, 0x00	; 0
    7d60:	22 e0       	ldi	r18, 0x02	; 2
    7d62:	b4 01       	movw	r22, r8
    7d64:	c3 01       	movw	r24, r6
    7d66:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7d6a:	61 e0       	ldi	r22, 0x01	; 1
    7d6c:	7a e5       	ldi	r23, 0x5A	; 90
    7d6e:	c3 01       	movw	r24, r6
    7d70:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    7d74:	2a 96       	adiw	r28, 0x0a	; 10
    7d76:	8f ad       	ldd	r24, Y+63	; 0x3f
    7d78:	2a 97       	sbiw	r28, 0x0a	; 10
    7d7a:	1f 92       	push	r1
    7d7c:	8f 93       	push	r24
    7d7e:	7f 92       	push	r7
    7d80:	6f 92       	push	r6
    7d82:	8b e3       	ldi	r24, 0x3B	; 59
    7d84:	93 e0       	ldi	r25, 0x03	; 3
    7d86:	9f 93       	push	r25
    7d88:	8f 93       	push	r24
    7d8a:	bf 92       	push	r11
    7d8c:	af 92       	push	r10
    7d8e:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    7d92:	a2 01       	movw	r20, r4
    7d94:	4c 59       	subi	r20, 0x9C	; 156
    7d96:	5f 4f       	sbci	r21, 0xFF	; 255
    7d98:	22 e0       	ldi	r18, 0x02	; 2
    7d9a:	b4 01       	movw	r22, r8
    7d9c:	c5 01       	movw	r24, r10
    7d9e:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7da2:	64 ec       	ldi	r22, 0xC4	; 196
    7da4:	79 e5       	ldi	r23, 0x59	; 89
    7da6:	c3 01       	movw	r24, r6
    7da8:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    7dac:	2e e1       	ldi	r18, 0x1E	; 30
    7dae:	d2 9e       	mul	r13, r18
    7db0:	f0 01       	movw	r30, r0
    7db2:	11 24       	eor	r1, r1
    7db4:	ee 55       	subi	r30, 0x5E	; 94
    7db6:	fe 4e       	sbci	r31, 0xEE	; 238
    7db8:	83 8d       	ldd	r24, Z+27	; 0x1b
    7dba:	1f 92       	push	r1
    7dbc:	8f 93       	push	r24
    7dbe:	7f 92       	push	r7
    7dc0:	6f 92       	push	r6
    7dc2:	83 e4       	ldi	r24, 0x43	; 67
    7dc4:	93 e0       	ldi	r25, 0x03	; 3
    7dc6:	9f 93       	push	r25
    7dc8:	8f 93       	push	r24
    7dca:	bf 92       	push	r11
    7dcc:	af 92       	push	r10
    7dce:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    7dd2:	a2 01       	movw	r20, r4
    7dd4:	48 58       	subi	r20, 0x88	; 136
    7dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    7dd8:	22 e0       	ldi	r18, 0x02	; 2
    7dda:	b4 01       	movw	r22, r8
    7ddc:	c5 01       	movw	r24, r10
    7dde:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7de2:	0f b6       	in	r0, 0x3f	; 63
    7de4:	f8 94       	cli
    7de6:	de bf       	out	0x3e, r29	; 62
    7de8:	0f be       	out	0x3f, r0	; 63
    7dea:	cd bf       	out	0x3d, r28	; 61
    7dec:	c6 5b       	subi	r28, 0xB6	; 182
    7dee:	df 4f       	sbci	r29, 0xFF	; 255
    7df0:	0f b6       	in	r0, 0x3f	; 63
    7df2:	f8 94       	cli
    7df4:	de bf       	out	0x3e, r29	; 62
    7df6:	0f be       	out	0x3f, r0	; 63
    7df8:	cd bf       	out	0x3d, r28	; 61
    7dfa:	df 91       	pop	r29
    7dfc:	cf 91       	pop	r28
    7dfe:	1f 91       	pop	r17
    7e00:	0f 91       	pop	r16
    7e02:	ff 90       	pop	r15
    7e04:	ef 90       	pop	r14
    7e06:	df 90       	pop	r13
    7e08:	cf 90       	pop	r12
    7e0a:	bf 90       	pop	r11
    7e0c:	af 90       	pop	r10
    7e0e:	9f 90       	pop	r9
    7e10:	8f 90       	pop	r8
    7e12:	7f 90       	pop	r7
    7e14:	6f 90       	pop	r6
    7e16:	5f 90       	pop	r5
    7e18:	4f 90       	pop	r4
    7e1a:	3f 90       	pop	r3
    7e1c:	2f 90       	pop	r2
    7e1e:	08 95       	ret
    7e20:	63 e4       	ldi	r22, 0x43	; 67
    7e22:	79 e5       	ldi	r23, 0x59	; 89
    7e24:	c9 01       	movw	r24, r18
    7e26:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    7e2a:	b4 01       	movw	r22, r8
    7e2c:	67 5e       	subi	r22, 0xE7	; 231
    7e2e:	7f 4f       	sbci	r23, 0xFF	; 255
    7e30:	c1 2c       	mov	r12, r1
    7e32:	ee 24       	eor	r14, r14
    7e34:	ea 94       	dec	r14
    7e36:	fe 2c       	mov	r15, r14
    7e38:	00 e0       	ldi	r16, 0x00	; 0
    7e3a:	18 ef       	ldi	r17, 0xF8	; 248
    7e3c:	24 e0       	ldi	r18, 0x04	; 4
    7e3e:	a1 01       	movw	r20, r2
    7e40:	c5 01       	movw	r24, r10
    7e42:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7e46:	d2 cf       	rjmp	.-92     	; 0x7dec <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1e4>

00007e48 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_dialog_set_variablejjjjhhPc():
    7e48:	2f 92       	push	r2
    7e4a:	3f 92       	push	r3
    7e4c:	4f 92       	push	r4
    7e4e:	5f 92       	push	r5
    7e50:	6f 92       	push	r6
    7e52:	7f 92       	push	r7
    7e54:	8f 92       	push	r8
    7e56:	9f 92       	push	r9
    7e58:	af 92       	push	r10
    7e5a:	bf 92       	push	r11
    7e5c:	cf 92       	push	r12
    7e5e:	df 92       	push	r13
    7e60:	ef 92       	push	r14
    7e62:	ff 92       	push	r15
    7e64:	0f 93       	push	r16
    7e66:	1f 93       	push	r17
    7e68:	cf 93       	push	r28
    7e6a:	df 93       	push	r29
    7e6c:	cd b7       	in	r28, 0x3d	; 61
    7e6e:	de b7       	in	r29, 0x3e	; 62
    7e70:	2c 97       	sbiw	r28, 0x0c	; 12
    7e72:	0f b6       	in	r0, 0x3f	; 63
    7e74:	f8 94       	cli
    7e76:	de bf       	out	0x3e, r29	; 62
    7e78:	0f be       	out	0x3f, r0	; 63
    7e7a:	cd bf       	out	0x3d, r28	; 61
    7e7c:	5c 01       	movw	r10, r24
    7e7e:	7b 01       	movw	r14, r22
    7e80:	1a 01       	movw	r2, r20
    7e82:	29 01       	movw	r4, r18
    7e84:	0c 87       	std	Y+12, r16	; 0x0c
    7e86:	36 01       	movw	r6, r12
    7e88:	70 e0       	ldi	r23, 0x00	; 0
    7e8a:	60 e0       	ldi	r22, 0x00	; 0
    7e8c:	85 e1       	ldi	r24, 0x15	; 21
    7e8e:	9c e0       	ldi	r25, 0x0C	; 12
    7e90:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7e94:	d1 2c       	mov	r13, r1
    7e96:	c1 2c       	mov	r12, r1
    7e98:	97 01       	movw	r18, r14
    7e9a:	24 0d       	add	r18, r4
    7e9c:	35 1d       	adc	r19, r5
    7e9e:	3b 87       	std	Y+11, r19	; 0x0b
    7ea0:	2a 87       	std	Y+10, r18	; 0x0a
    7ea2:	45 01       	movw	r8, r10
    7ea4:	82 0c       	add	r8, r2
    7ea6:	93 1c       	adc	r9, r3
    7ea8:	0a 85       	ldd	r16, Y+10	; 0x0a
    7eaa:	1b 85       	ldd	r17, Y+11	; 0x0b
    7eac:	0c 19       	sub	r16, r12
    7eae:	1d 09       	sbc	r17, r13
    7eb0:	94 01       	movw	r18, r8
    7eb2:	2c 19       	sub	r18, r12
    7eb4:	3d 09       	sbc	r19, r13
    7eb6:	a6 01       	movw	r20, r12
    7eb8:	4e 0d       	add	r20, r14
    7eba:	5f 1d       	adc	r21, r15
    7ebc:	b6 01       	movw	r22, r12
    7ebe:	6a 0d       	add	r22, r10
    7ec0:	7b 1d       	adc	r23, r11
    7ec2:	85 e1       	ldi	r24, 0x15	; 21
    7ec4:	9c e0       	ldi	r25, 0x0C	; 12
    7ec6:	0e 94 d5 96 	call	0x12daa	; 0x12daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    7eca:	3f ef       	ldi	r19, 0xFF	; 255
    7ecc:	c3 1a       	sub	r12, r19
    7ece:	d3 0a       	sbc	r13, r19
    7ed0:	83 e0       	ldi	r24, 0x03	; 3
    7ed2:	c8 16       	cp	r12, r24
    7ed4:	d1 04       	cpc	r13, r1
    7ed6:	41 f7       	brne	.-48     	; 0x7ea8 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x60>
    7ed8:	6f ef       	ldi	r22, 0xFF	; 255
    7eda:	7f ef       	ldi	r23, 0xFF	; 255
    7edc:	85 e1       	ldi	r24, 0x15	; 21
    7ede:	9c e0       	ldi	r25, 0x0C	; 12
    7ee0:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7ee4:	82 01       	movw	r16, r4
    7ee6:	03 50       	subi	r16, 0x03	; 3
    7ee8:	11 09       	sbc	r17, r1
    7eea:	0e 0d       	add	r16, r14
    7eec:	1f 1d       	adc	r17, r15
    7eee:	91 01       	movw	r18, r2
    7ef0:	23 50       	subi	r18, 0x03	; 3
    7ef2:	31 09       	sbc	r19, r1
    7ef4:	2a 0d       	add	r18, r10
    7ef6:	3b 1d       	adc	r19, r11
    7ef8:	a7 01       	movw	r20, r14
    7efa:	4d 5f       	subi	r20, 0xFD	; 253
    7efc:	5f 4f       	sbci	r21, 0xFF	; 255
    7efe:	b5 01       	movw	r22, r10
    7f00:	6d 5f       	subi	r22, 0xFD	; 253
    7f02:	7f 4f       	sbci	r23, 0xFF	; 255
    7f04:	85 e1       	ldi	r24, 0x15	; 21
    7f06:	9c e0       	ldi	r25, 0x0C	; 12
    7f08:	0e 94 4e 96 	call	0x12c9c	; 0x12c9c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    7f0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    7f0e:	c9 2e       	mov	r12, r25
    7f10:	d1 2c       	mov	r13, r1
    7f12:	25 e1       	ldi	r18, 0x15	; 21
    7f14:	92 9f       	mul	r25, r18
    7f16:	f0 01       	movw	r30, r0
    7f18:	11 24       	eor	r1, r1
    7f1a:	e2 5d       	subi	r30, 0xD2	; 210
    7f1c:	f5 4f       	sbci	r31, 0xF5	; 245
    7f1e:	85 85       	ldd	r24, Z+13	; 0x0d
    7f20:	9e 01       	movw	r18, r28
    7f22:	2f 5f       	subi	r18, 0xFF	; 255
    7f24:	3f 4f       	sbci	r19, 0xFF	; 255
    7f26:	49 01       	movw	r8, r18
    7f28:	81 11       	cpse	r24, r1
    7f2a:	09 c0       	rjmp	.+18     	; 0x7f3e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xf6>
    7f2c:	60 81       	ld	r22, Z
    7f2e:	71 81       	ldd	r23, Z+1	; 0x01
    7f30:	82 81       	ldd	r24, Z+2	; 0x02
    7f32:	93 81       	ldd	r25, Z+3	; 0x03
    7f34:	89 01       	movw	r16, r18
    7f36:	22 e0       	ldi	r18, 0x02	; 2
    7f38:	44 e0       	ldi	r20, 0x04	; 4
    7f3a:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    7f3e:	85 e1       	ldi	r24, 0x15	; 21
    7f40:	8c 9d       	mul	r24, r12
    7f42:	f0 01       	movw	r30, r0
    7f44:	8d 9d       	mul	r24, r13
    7f46:	f0 0d       	add	r31, r0
    7f48:	11 24       	eor	r1, r1
    7f4a:	e2 5d       	subi	r30, 0xD2	; 210
    7f4c:	f5 4f       	sbci	r31, 0xF5	; 245
    7f4e:	85 85       	ldd	r24, Z+13	; 0x0d
    7f50:	81 30       	cpi	r24, 0x01	; 1
    7f52:	59 f4       	brne	.+22     	; 0x7f6a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x122>
    7f54:	60 81       	ld	r22, Z
    7f56:	71 81       	ldd	r23, Z+1	; 0x01
    7f58:	82 81       	ldd	r24, Z+2	; 0x02
    7f5a:	93 81       	ldd	r25, Z+3	; 0x03
    7f5c:	0e 94 90 dc 	call	0x1b920	; 0x1b920 <__fixsfsi>
    7f60:	cb 01       	movw	r24, r22
itoa():
    7f62:	4a e0       	ldi	r20, 0x0A	; 10
    7f64:	b4 01       	movw	r22, r8
    7f66:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z35display_element_dialog_set_variablejjjjhhPc():
    7f6a:	70 e0       	ldi	r23, 0x00	; 0
    7f6c:	60 e0       	ldi	r22, 0x00	; 0
    7f6e:	85 e1       	ldi	r24, 0x15	; 21
    7f70:	9c e0       	ldi	r25, 0x0C	; 12
    7f72:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7f76:	f4 01       	movw	r30, r8
    7f78:	01 90       	ld	r0, Z+
    7f7a:	00 20       	and	r0, r0
    7f7c:	e9 f7       	brne	.-6      	; 0x7f78 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x130>
    7f7e:	31 97       	sbiw	r30, 0x01	; 1
    7f80:	e8 19       	sub	r30, r8
    7f82:	f9 09       	sbc	r31, r9
    7f84:	3c e0       	ldi	r19, 0x0C	; 12
    7f86:	43 1a       	sub	r4, r19
    7f88:	51 08       	sbc	r5, r1
    7f8a:	56 94       	lsr	r5
    7f8c:	47 94       	ror	r4
    7f8e:	81 e0       	ldi	r24, 0x01	; 1
    7f90:	e8 1a       	sub	r14, r24
    7f92:	f1 08       	sbc	r15, r1
    7f94:	4e 0c       	add	r4, r14
    7f96:	5f 1c       	adc	r5, r15
_Z22show_string_size_widthhh():
    7f98:	96 e0       	ldi	r25, 0x06	; 6
    7f9a:	e9 9f       	mul	r30, r25
    7f9c:	f0 01       	movw	r30, r0
    7f9e:	11 24       	eor	r1, r1
    7fa0:	ee 0f       	add	r30, r30
    7fa2:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhhPc():
    7fa4:	b1 01       	movw	r22, r2
    7fa6:	6e 1b       	sub	r22, r30
    7fa8:	7f 0b       	sbc	r23, r31
    7faa:	76 95       	lsr	r23
    7fac:	67 95       	ror	r22
    7fae:	6a 0d       	add	r22, r10
    7fb0:	7b 1d       	adc	r23, r11
    7fb2:	c1 2c       	mov	r12, r1
    7fb4:	ee 24       	eor	r14, r14
    7fb6:	ea 94       	dec	r14
    7fb8:	fe 2c       	mov	r15, r14
    7fba:	10 e0       	ldi	r17, 0x00	; 0
    7fbc:	00 e0       	ldi	r16, 0x00	; 0
    7fbe:	22 e0       	ldi	r18, 0x02	; 2
    7fc0:	a2 01       	movw	r20, r4
    7fc2:	c4 01       	movw	r24, r8
    7fc4:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7fc8:	f3 01       	movw	r30, r6
    7fca:	80 81       	ld	r24, Z
    7fcc:	88 23       	and	r24, r24
    7fce:	41 f0       	breq	.+16     	; 0x7fe0 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x198>
    7fd0:	b5 01       	movw	r22, r10
    7fd2:	6b 5f       	subi	r22, 0xFB	; 251
    7fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    7fd6:	22 e0       	ldi	r18, 0x02	; 2
    7fd8:	a2 01       	movw	r20, r4
    7fda:	c3 01       	movw	r24, r6
    7fdc:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7fe0:	2c 96       	adiw	r28, 0x0c	; 12
    7fe2:	0f b6       	in	r0, 0x3f	; 63
    7fe4:	f8 94       	cli
    7fe6:	de bf       	out	0x3e, r29	; 62
    7fe8:	0f be       	out	0x3f, r0	; 63
    7fea:	cd bf       	out	0x3d, r28	; 61
    7fec:	df 91       	pop	r29
    7fee:	cf 91       	pop	r28
    7ff0:	1f 91       	pop	r17
    7ff2:	0f 91       	pop	r16
    7ff4:	ff 90       	pop	r15
    7ff6:	ef 90       	pop	r14
    7ff8:	df 90       	pop	r13
    7ffa:	cf 90       	pop	r12
    7ffc:	bf 90       	pop	r11
    7ffe:	af 90       	pop	r10
    8000:	9f 90       	pop	r9
    8002:	8f 90       	pop	r8
    8004:	7f 90       	pop	r7
    8006:	6f 90       	pop	r6
    8008:	5f 90       	pop	r5
    800a:	4f 90       	pop	r4
    800c:	3f 90       	pop	r3
    800e:	2f 90       	pop	r2
    8010:	08 95       	ret

00008012 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z33display_element_dialog_set_stringjjjjhhPc():
    8012:	4f 92       	push	r4
    8014:	5f 92       	push	r5
    8016:	6f 92       	push	r6
    8018:	7f 92       	push	r7
    801a:	8f 92       	push	r8
    801c:	9f 92       	push	r9
    801e:	af 92       	push	r10
    8020:	bf 92       	push	r11
    8022:	cf 92       	push	r12
    8024:	df 92       	push	r13
    8026:	ef 92       	push	r14
    8028:	ff 92       	push	r15
    802a:	0f 93       	push	r16
    802c:	1f 93       	push	r17
    802e:	cf 93       	push	r28
    8030:	df 93       	push	r29
    8032:	6c 01       	movw	r12, r24
    8034:	eb 01       	movw	r28, r22
    8036:	2a 01       	movw	r4, r20
    8038:	39 01       	movw	r6, r18
    803a:	70 e0       	ldi	r23, 0x00	; 0
    803c:	60 e0       	ldi	r22, 0x00	; 0
    803e:	85 e1       	ldi	r24, 0x15	; 21
    8040:	9c e0       	ldi	r25, 0x0C	; 12
    8042:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    8046:	f1 2c       	mov	r15, r1
    8048:	e1 2c       	mov	r14, r1
    804a:	4e 01       	movw	r8, r28
    804c:	86 0c       	add	r8, r6
    804e:	97 1c       	adc	r9, r7
    8050:	56 01       	movw	r10, r12
    8052:	a4 0c       	add	r10, r4
    8054:	b5 1c       	adc	r11, r5
    8056:	84 01       	movw	r16, r8
    8058:	0e 19       	sub	r16, r14
    805a:	1f 09       	sbc	r17, r15
    805c:	95 01       	movw	r18, r10
    805e:	2e 19       	sub	r18, r14
    8060:	3f 09       	sbc	r19, r15
    8062:	a7 01       	movw	r20, r14
    8064:	4c 0f       	add	r20, r28
    8066:	5d 1f       	adc	r21, r29
    8068:	b7 01       	movw	r22, r14
    806a:	6c 0d       	add	r22, r12
    806c:	7d 1d       	adc	r23, r13
    806e:	85 e1       	ldi	r24, 0x15	; 21
    8070:	9c e0       	ldi	r25, 0x0C	; 12
    8072:	0e 94 d5 96 	call	0x12daa	; 0x12daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    8076:	2f ef       	ldi	r18, 0xFF	; 255
    8078:	e2 1a       	sub	r14, r18
    807a:	f2 0a       	sbc	r15, r18
    807c:	83 e0       	ldi	r24, 0x03	; 3
    807e:	e8 16       	cp	r14, r24
    8080:	f1 04       	cpc	r15, r1
    8082:	49 f7       	brne	.-46     	; 0x8056 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x44>
    8084:	6f ef       	ldi	r22, 0xFF	; 255
    8086:	7f ef       	ldi	r23, 0xFF	; 255
    8088:	85 e1       	ldi	r24, 0x15	; 21
    808a:	9c e0       	ldi	r25, 0x0C	; 12
    808c:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    8090:	83 01       	movw	r16, r6
    8092:	03 50       	subi	r16, 0x03	; 3
    8094:	11 09       	sbc	r17, r1
    8096:	0c 0f       	add	r16, r28
    8098:	1d 1f       	adc	r17, r29
    809a:	92 01       	movw	r18, r4
    809c:	23 50       	subi	r18, 0x03	; 3
    809e:	31 09       	sbc	r19, r1
    80a0:	2c 0d       	add	r18, r12
    80a2:	3d 1d       	adc	r19, r13
    80a4:	ae 01       	movw	r20, r28
    80a6:	4d 5f       	subi	r20, 0xFD	; 253
    80a8:	5f 4f       	sbci	r21, 0xFF	; 255
    80aa:	b6 01       	movw	r22, r12
    80ac:	6d 5f       	subi	r22, 0xFD	; 253
    80ae:	7f 4f       	sbci	r23, 0xFF	; 255
    80b0:	85 e1       	ldi	r24, 0x15	; 21
    80b2:	9c e0       	ldi	r25, 0x0C	; 12
    80b4:	0e 94 4e 96 	call	0x12c9c	; 0x12c9c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    80b8:	70 e0       	ldi	r23, 0x00	; 0
    80ba:	60 e0       	ldi	r22, 0x00	; 0
    80bc:	85 e1       	ldi	r24, 0x15	; 21
    80be:	9c e0       	ldi	r25, 0x0C	; 12
    80c0:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    80c4:	8d ee       	ldi	r24, 0xED	; 237
    80c6:	99 e0       	ldi	r25, 0x09	; 9
    80c8:	fc 01       	movw	r30, r24
    80ca:	01 90       	ld	r0, Z+
    80cc:	00 20       	and	r0, r0
    80ce:	e9 f7       	brne	.-6      	; 0x80ca <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb8>
    80d0:	cf 01       	movw	r24, r30
    80d2:	8e 5e       	subi	r24, 0xEE	; 238
    80d4:	99 40       	sbci	r25, 0x09	; 9
    80d6:	a3 01       	movw	r20, r6
    80d8:	4c 50       	subi	r20, 0x0C	; 12
    80da:	51 09       	sbc	r21, r1
    80dc:	56 95       	lsr	r21
    80de:	47 95       	ror	r20
    80e0:	21 97       	sbiw	r28, 0x01	; 1
    80e2:	4c 0f       	add	r20, r28
    80e4:	5d 1f       	adc	r21, r29
_Z22show_string_size_widthhh():
    80e6:	f6 e0       	ldi	r31, 0x06	; 6
    80e8:	8f 9f       	mul	r24, r31
    80ea:	c0 01       	movw	r24, r0
    80ec:	11 24       	eor	r1, r1
    80ee:	88 0f       	add	r24, r24
    80f0:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhhPc():
    80f2:	b2 01       	movw	r22, r4
    80f4:	68 1b       	sub	r22, r24
    80f6:	79 0b       	sbc	r23, r25
    80f8:	76 95       	lsr	r23
    80fa:	67 95       	ror	r22
    80fc:	6c 0d       	add	r22, r12
    80fe:	7d 1d       	adc	r23, r13
    8100:	c1 2c       	mov	r12, r1
    8102:	ee 24       	eor	r14, r14
    8104:	ea 94       	dec	r14
    8106:	fe 2c       	mov	r15, r14
    8108:	10 e0       	ldi	r17, 0x00	; 0
    810a:	00 e0       	ldi	r16, 0x00	; 0
    810c:	22 e0       	ldi	r18, 0x02	; 2
    810e:	8d ee       	ldi	r24, 0xED	; 237
    8110:	99 e0       	ldi	r25, 0x09	; 9
    8112:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8116:	df 91       	pop	r29
    8118:	cf 91       	pop	r28
    811a:	1f 91       	pop	r17
    811c:	0f 91       	pop	r16
    811e:	ff 90       	pop	r15
    8120:	ef 90       	pop	r14
    8122:	df 90       	pop	r13
    8124:	cf 90       	pop	r12
    8126:	bf 90       	pop	r11
    8128:	af 90       	pop	r10
    812a:	9f 90       	pop	r9
    812c:	8f 90       	pop	r8
    812e:	7f 90       	pop	r7
    8130:	6f 90       	pop	r6
    8132:	5f 90       	pop	r5
    8134:	4f 90       	pop	r4
    8136:	08 95       	ret

00008138 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_time_1jjjjhhPc():
    8138:	6f 92       	push	r6
    813a:	7f 92       	push	r7
    813c:	8f 92       	push	r8
    813e:	9f 92       	push	r9
    8140:	af 92       	push	r10
    8142:	bf 92       	push	r11
    8144:	cf 92       	push	r12
    8146:	ef 92       	push	r14
    8148:	ff 92       	push	r15
    814a:	0f 93       	push	r16
    814c:	1f 93       	push	r17
    814e:	cf 93       	push	r28
    8150:	df 93       	push	r29
    8152:	cd b7       	in	r28, 0x3d	; 61
    8154:	de b7       	in	r29, 0x3e	; 62
    8156:	68 97       	sbiw	r28, 0x18	; 24
    8158:	0f b6       	in	r0, 0x3f	; 63
    815a:	f8 94       	cli
    815c:	de bf       	out	0x3e, r29	; 62
    815e:	0f be       	out	0x3f, r0	; 63
    8160:	cd bf       	out	0x3d, r28	; 61
    8162:	4c 01       	movw	r8, r24
    8164:	3b 01       	movw	r6, r22
    8166:	6c e2       	ldi	r22, 0x2C	; 44
    8168:	7b e5       	ldi	r23, 0x5B	; 91
    816a:	ce 01       	movw	r24, r28
    816c:	01 96       	adiw	r24, 0x01	; 1
    816e:	5c 01       	movw	r10, r24
    8170:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    8174:	a3 01       	movw	r20, r6
    8176:	4b 5f       	subi	r20, 0xFB	; 251
    8178:	5f 4f       	sbci	r21, 0xFF	; 255
    817a:	b4 01       	movw	r22, r8
    817c:	61 5b       	subi	r22, 0xB1	; 177
    817e:	7f 4f       	sbci	r23, 0xFF	; 255
    8180:	c1 2c       	mov	r12, r1
    8182:	ee 24       	eor	r14, r14
    8184:	ea 94       	dec	r14
    8186:	fe 2c       	mov	r15, r14
    8188:	10 e0       	ldi	r17, 0x00	; 0
    818a:	00 e0       	ldi	r16, 0x00	; 0
    818c:	21 e0       	ldi	r18, 0x01	; 1
    818e:	c5 01       	movw	r24, r10
    8190:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
_Z14selftest_get_0h():
    8194:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <selftest_data>
_Z27display_element_show_time_1jjjjhhPc():
    8198:	80 fd       	sbrc	r24, 0
    819a:	56 c0       	rjmp	.+172    	; 0x8248 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x110>
    819c:	90 91 5f 10 	lds	r25, 0x105F	; 0x80105f <now+0x4>
    81a0:	80 91 5e 10 	lds	r24, 0x105E	; 0x80105e <now+0x3>
    81a4:	20 91 af 0a 	lds	r18, 0x0AAF	; 0x800aaf <uptime>
    81a8:	20 ff       	sbrs	r18, 0
    81aa:	47 c0       	rjmp	.+142    	; 0x823a <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x102>
    81ac:	1f 92       	push	r1
    81ae:	9f 93       	push	r25
    81b0:	1f 92       	push	r1
    81b2:	8f 93       	push	r24
    81b4:	83 e1       	ldi	r24, 0x13	; 19
    81b6:	93 e0       	ldi	r25, 0x03	; 3
    81b8:	9f 93       	push	r25
    81ba:	8f 93       	push	r24
    81bc:	bf 92       	push	r11
    81be:	af 92       	push	r10
    81c0:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    81c4:	0f b6       	in	r0, 0x3f	; 63
    81c6:	f8 94       	cli
    81c8:	de bf       	out	0x3e, r29	; 62
    81ca:	0f be       	out	0x3f, r0	; 63
    81cc:	cd bf       	out	0x3d, r28	; 61
    81ce:	70 e0       	ldi	r23, 0x00	; 0
    81d0:	60 e0       	ldi	r22, 0x00	; 0
    81d2:	85 e1       	ldi	r24, 0x15	; 21
    81d4:	9c e0       	ldi	r25, 0x0C	; 12
    81d6:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    81da:	a3 01       	movw	r20, r6
    81dc:	4c 5e       	subi	r20, 0xEC	; 236
    81de:	5f 4f       	sbci	r21, 0xFF	; 255
    81e0:	b4 01       	movw	r22, r8
    81e2:	6c 5f       	subi	r22, 0xFC	; 252
    81e4:	7f 4f       	sbci	r23, 0xFF	; 255
    81e6:	c1 2c       	mov	r12, r1
    81e8:	ee 24       	eor	r14, r14
    81ea:	ea 94       	dec	r14
    81ec:	fe 2c       	mov	r15, r14
    81ee:	10 e0       	ldi	r17, 0x00	; 0
    81f0:	00 e0       	ldi	r16, 0x00	; 0
    81f2:	28 e0       	ldi	r18, 0x08	; 8
    81f4:	c5 01       	movw	r24, r10
    81f6:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    81fa:	83 01       	movw	r16, r6
    81fc:	0c 5a       	subi	r16, 0xAC	; 172
    81fe:	1f 4f       	sbci	r17, 0xFF	; 255
    8200:	94 01       	movw	r18, r8
    8202:	2c 50       	subi	r18, 0x0C	; 12
    8204:	3f 4f       	sbci	r19, 0xFF	; 255
    8206:	a3 01       	movw	r20, r6
    8208:	b4 01       	movw	r22, r8
    820a:	85 e1       	ldi	r24, 0x15	; 21
    820c:	9c e0       	ldi	r25, 0x0C	; 12
    820e:	0e 94 d5 96 	call	0x12daa	; 0x12daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    8212:	68 96       	adiw	r28, 0x18	; 24
    8214:	0f b6       	in	r0, 0x3f	; 63
    8216:	f8 94       	cli
    8218:	de bf       	out	0x3e, r29	; 62
    821a:	0f be       	out	0x3f, r0	; 63
    821c:	cd bf       	out	0x3d, r28	; 61
    821e:	df 91       	pop	r29
    8220:	cf 91       	pop	r28
    8222:	1f 91       	pop	r17
    8224:	0f 91       	pop	r16
    8226:	ff 90       	pop	r15
    8228:	ef 90       	pop	r14
    822a:	cf 90       	pop	r12
    822c:	bf 90       	pop	r11
    822e:	af 90       	pop	r10
    8230:	9f 90       	pop	r9
    8232:	8f 90       	pop	r8
    8234:	7f 90       	pop	r7
    8236:	6f 90       	pop	r6
    8238:	08 95       	ret
    823a:	1f 92       	push	r1
    823c:	9f 93       	push	r25
    823e:	1f 92       	push	r1
    8240:	8f 93       	push	r24
    8242:	8a e4       	ldi	r24, 0x4A	; 74
    8244:	93 e0       	ldi	r25, 0x03	; 3
    8246:	b8 cf       	rjmp	.-144    	; 0x81b8 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x80>
    8248:	64 e5       	ldi	r22, 0x54	; 84
    824a:	73 e0       	ldi	r23, 0x03	; 3
    824c:	c5 01       	movw	r24, r10
    824e:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    8252:	bd cf       	rjmp	.-134    	; 0x81ce <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x96>

00008254 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_date_1jjjjhhPc():
    8254:	8f 92       	push	r8
    8256:	9f 92       	push	r9
    8258:	af 92       	push	r10
    825a:	bf 92       	push	r11
    825c:	cf 92       	push	r12
    825e:	ef 92       	push	r14
    8260:	ff 92       	push	r15
    8262:	0f 93       	push	r16
    8264:	1f 93       	push	r17
    8266:	cf 93       	push	r28
    8268:	df 93       	push	r29
    826a:	cd b7       	in	r28, 0x3d	; 61
    826c:	de b7       	in	r29, 0x3e	; 62
    826e:	60 97       	sbiw	r28, 0x10	; 16
    8270:	0f b6       	in	r0, 0x3f	; 63
    8272:	f8 94       	cli
    8274:	de bf       	out	0x3e, r29	; 62
    8276:	0f be       	out	0x3f, r0	; 63
    8278:	cd bf       	out	0x3d, r28	; 61
    827a:	4c 01       	movw	r8, r24
    827c:	8b 01       	movw	r16, r22
_Z14selftest_get_0h():
    827e:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <selftest_data>
    8282:	9e 01       	movw	r18, r28
    8284:	2f 5f       	subi	r18, 0xFF	; 255
    8286:	3f 4f       	sbci	r19, 0xFF	; 255
    8288:	59 01       	movw	r10, r18
_Z27display_element_show_date_1jjjjhhPc():
    828a:	80 fd       	sbrc	r24, 0
    828c:	54 c0       	rjmp	.+168    	; 0x8336 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xe2>
_ZNK8DateTime4yearEv():
    828e:	80 91 5b 10 	lds	r24, 0x105B	; 0x80105b <now>
    8292:	90 e0       	ldi	r25, 0x00	; 0
    8294:	80 53       	subi	r24, 0x30	; 48
    8296:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhhPc():
    8298:	9f 93       	push	r25
    829a:	8f 93       	push	r24
    829c:	80 91 5c 10 	lds	r24, 0x105C	; 0x80105c <now+0x1>
    82a0:	1f 92       	push	r1
    82a2:	8f 93       	push	r24
    82a4:	80 91 5d 10 	lds	r24, 0x105D	; 0x80105d <now+0x2>
    82a8:	1f 92       	push	r1
    82aa:	8f 93       	push	r24
    82ac:	8d e1       	ldi	r24, 0x1D	; 29
    82ae:	93 e0       	ldi	r25, 0x03	; 3
    82b0:	9f 93       	push	r25
    82b2:	8f 93       	push	r24
    82b4:	3f 93       	push	r19
    82b6:	2f 93       	push	r18
    82b8:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    82bc:	0f b6       	in	r0, 0x3f	; 63
    82be:	f8 94       	cli
    82c0:	de bf       	out	0x3e, r29	; 62
    82c2:	0f be       	out	0x3f, r0	; 63
    82c4:	cd bf       	out	0x3d, r28	; 61
    82c6:	6f ef       	ldi	r22, 0xFF	; 255
    82c8:	7f ef       	ldi	r23, 0xFF	; 255
    82ca:	85 e1       	ldi	r24, 0x15	; 21
    82cc:	9c e0       	ldi	r25, 0x0C	; 12
    82ce:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    82d2:	2e e8       	ldi	r18, 0x8E	; 142
    82d4:	30 e0       	ldi	r19, 0x00	; 0
    82d6:	a8 01       	movw	r20, r16
    82d8:	b4 01       	movw	r22, r8
    82da:	85 e1       	ldi	r24, 0x15	; 21
    82dc:	9c e0       	ldi	r25, 0x0C	; 12
    82de:	0e 94 94 96 	call	0x12d28	; 0x12d28 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    82e2:	a8 01       	movw	r20, r16
    82e4:	4f 5f       	subi	r20, 0xFF	; 255
    82e6:	5f 4f       	sbci	r21, 0xFF	; 255
    82e8:	2e e8       	ldi	r18, 0x8E	; 142
    82ea:	30 e0       	ldi	r19, 0x00	; 0
    82ec:	b4 01       	movw	r22, r8
    82ee:	85 e1       	ldi	r24, 0x15	; 21
    82f0:	9c e0       	ldi	r25, 0x0C	; 12
    82f2:	0e 94 94 96 	call	0x12d28	; 0x12d28 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    82f6:	a8 01       	movw	r20, r16
    82f8:	4e 5f       	subi	r20, 0xFE	; 254
    82fa:	5f 4f       	sbci	r21, 0xFF	; 255
    82fc:	c1 2c       	mov	r12, r1
    82fe:	ee 24       	eor	r14, r14
    8300:	ea 94       	dec	r14
    8302:	fe 2c       	mov	r15, r14
    8304:	10 e0       	ldi	r17, 0x00	; 0
    8306:	00 e0       	ldi	r16, 0x00	; 0
    8308:	23 e0       	ldi	r18, 0x03	; 3
    830a:	b4 01       	movw	r22, r8
    830c:	c5 01       	movw	r24, r10
    830e:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8312:	60 96       	adiw	r28, 0x10	; 16
    8314:	0f b6       	in	r0, 0x3f	; 63
    8316:	f8 94       	cli
    8318:	de bf       	out	0x3e, r29	; 62
    831a:	0f be       	out	0x3f, r0	; 63
    831c:	cd bf       	out	0x3d, r28	; 61
    831e:	df 91       	pop	r29
    8320:	cf 91       	pop	r28
    8322:	1f 91       	pop	r17
    8324:	0f 91       	pop	r16
    8326:	ff 90       	pop	r15
    8328:	ef 90       	pop	r14
    832a:	cf 90       	pop	r12
    832c:	bf 90       	pop	r11
    832e:	af 90       	pop	r10
    8330:	9f 90       	pop	r9
    8332:	8f 90       	pop	r8
    8334:	08 95       	ret
    8336:	61 ef       	ldi	r22, 0xF1	; 241
    8338:	74 e5       	ldi	r23, 0x54	; 84
    833a:	c9 01       	movw	r24, r18
    833c:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    8340:	c2 cf       	rjmp	.-124    	; 0x82c6 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x72>

00008342 <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z33display_element_show_about_devicejjjjhhPc():
    8342:	8f 92       	push	r8
    8344:	9f 92       	push	r9
    8346:	af 92       	push	r10
    8348:	bf 92       	push	r11
    834a:	cf 92       	push	r12
    834c:	ef 92       	push	r14
    834e:	ff 92       	push	r15
    8350:	0f 93       	push	r16
    8352:	1f 93       	push	r17
    8354:	cf 93       	push	r28
    8356:	df 93       	push	r29
    8358:	cd b7       	in	r28, 0x3d	; 61
    835a:	de b7       	in	r29, 0x3e	; 62
    835c:	a8 97       	sbiw	r28, 0x28	; 40
    835e:	0f b6       	in	r0, 0x3f	; 63
    8360:	f8 94       	cli
    8362:	de bf       	out	0x3e, r29	; 62
    8364:	0f be       	out	0x3f, r0	; 63
    8366:	cd bf       	out	0x3d, r28	; 61
    8368:	5c 01       	movw	r10, r24
    836a:	4b 01       	movw	r8, r22
    836c:	67 e9       	ldi	r22, 0x97	; 151
    836e:	75 e5       	ldi	r23, 0x55	; 85
    8370:	ce 01       	movw	r24, r28
    8372:	01 96       	adiw	r24, 0x01	; 1
    8374:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
_Z15prepocet_napetijh():
    8378:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <dvanact>
    837c:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <dvanact+0x1>
    8380:	29 e3       	ldi	r18, 0x39	; 57
    8382:	28 9f       	mul	r18, r24
    8384:	b0 01       	movw	r22, r0
    8386:	29 9f       	mul	r18, r25
    8388:	70 0d       	add	r23, r0
    838a:	11 24       	eor	r1, r1
    838c:	90 e0       	ldi	r25, 0x00	; 0
    838e:	80 e0       	ldi	r24, 0x00	; 0
    8390:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
    8394:	20 e0       	ldi	r18, 0x00	; 0
    8396:	30 e0       	ldi	r19, 0x00	; 0
    8398:	4a e7       	ldi	r20, 0x7A	; 122
    839a:	54 e4       	ldi	r21, 0x44	; 68
    839c:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
_Z33display_element_show_about_devicejjjjhhPc():
    83a0:	8e 01       	movw	r16, r28
    83a2:	0f 5d       	subi	r16, 0xDF	; 223
    83a4:	1f 4f       	sbci	r17, 0xFF	; 255
    83a6:	22 e0       	ldi	r18, 0x02	; 2
    83a8:	44 e0       	ldi	r20, 0x04	; 4
    83aa:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    83ae:	b8 01       	movw	r22, r16
    83b0:	ce 01       	movw	r24, r28
    83b2:	01 96       	adiw	r24, 0x01	; 1
    83b4:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    83b8:	61 e1       	ldi	r22, 0x11	; 17
    83ba:	75 e0       	ldi	r23, 0x05	; 5
    83bc:	ce 01       	movw	r24, r28
    83be:	01 96       	adiw	r24, 0x01	; 1
    83c0:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    83c4:	85 e0       	ldi	r24, 0x05	; 5
    83c6:	a8 0e       	add	r10, r24
    83c8:	b1 1c       	adc	r11, r1
    83ca:	a4 01       	movw	r20, r8
    83cc:	46 5f       	subi	r20, 0xF6	; 246
    83ce:	5f 4f       	sbci	r21, 0xFF	; 255
    83d0:	c1 2c       	mov	r12, r1
    83d2:	ee 24       	eor	r14, r14
    83d4:	ea 94       	dec	r14
    83d6:	fe 2c       	mov	r15, r14
    83d8:	10 e0       	ldi	r17, 0x00	; 0
    83da:	00 e0       	ldi	r16, 0x00	; 0
    83dc:	21 e0       	ldi	r18, 0x01	; 1
    83de:	b5 01       	movw	r22, r10
    83e0:	ce 01       	movw	r24, r28
    83e2:	01 96       	adiw	r24, 0x01	; 1
    83e4:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    83e8:	63 e8       	ldi	r22, 0x83	; 131
    83ea:	75 e5       	ldi	r23, 0x55	; 85
    83ec:	ce 01       	movw	r24, r28
    83ee:	01 96       	adiw	r24, 0x01	; 1
    83f0:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    83f4:	67 e2       	ldi	r22, 0x27	; 39
    83f6:	78 e0       	ldi	r23, 0x08	; 8
    83f8:	ce 01       	movw	r24, r28
    83fa:	01 96       	adiw	r24, 0x01	; 1
    83fc:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
_Z15prepocet_napetijh():
    8400:	60 91 ba 0a 	lds	r22, 0x0ABA	; 0x800aba <petnula>
    8404:	70 91 bb 0a 	lds	r23, 0x0ABB	; 0x800abb <petnula+0x1>
    8408:	93 e0       	ldi	r25, 0x03	; 3
    840a:	66 0f       	add	r22, r22
    840c:	77 1f       	adc	r23, r23
    840e:	9a 95       	dec	r25
    8410:	e1 f7       	brne	.-8      	; 0x840a <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xc8>
    8412:	90 e0       	ldi	r25, 0x00	; 0
    8414:	80 e0       	ldi	r24, 0x00	; 0
    8416:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
    841a:	20 e0       	ldi	r18, 0x00	; 0
    841c:	30 e0       	ldi	r19, 0x00	; 0
    841e:	4a e7       	ldi	r20, 0x7A	; 122
    8420:	54 e4       	ldi	r21, 0x44	; 68
    8422:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
_Z33display_element_show_about_devicejjjjhhPc():
    8426:	8e 01       	movw	r16, r28
    8428:	0f 5d       	subi	r16, 0xDF	; 223
    842a:	1f 4f       	sbci	r17, 0xFF	; 255
    842c:	22 e0       	ldi	r18, 0x02	; 2
    842e:	44 e0       	ldi	r20, 0x04	; 4
    8430:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    8434:	b8 01       	movw	r22, r16
    8436:	ce 01       	movw	r24, r28
    8438:	01 96       	adiw	r24, 0x01	; 1
    843a:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    843e:	61 e1       	ldi	r22, 0x11	; 17
    8440:	75 e0       	ldi	r23, 0x05	; 5
    8442:	ce 01       	movw	r24, r28
    8444:	01 96       	adiw	r24, 0x01	; 1
    8446:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    844a:	a4 01       	movw	r20, r8
    844c:	47 5e       	subi	r20, 0xE7	; 231
    844e:	5f 4f       	sbci	r21, 0xFF	; 255
    8450:	10 e0       	ldi	r17, 0x00	; 0
    8452:	00 e0       	ldi	r16, 0x00	; 0
    8454:	21 e0       	ldi	r18, 0x01	; 1
    8456:	b5 01       	movw	r22, r10
    8458:	ce 01       	movw	r24, r28
    845a:	01 96       	adiw	r24, 0x01	; 1
    845c:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8460:	6f e6       	ldi	r22, 0x6F	; 111
    8462:	75 e5       	ldi	r23, 0x55	; 85
    8464:	ce 01       	movw	r24, r28
    8466:	01 96       	adiw	r24, 0x01	; 1
    8468:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
_Z15prepocet_napetijh():
    846c:	80 91 bc 0a 	lds	r24, 0x0ABC	; 0x800abc <tritri>
    8470:	90 91 bd 0a 	lds	r25, 0x0ABD	; 0x800abd <tritri+0x1>
    8474:	25 e0       	ldi	r18, 0x05	; 5
    8476:	28 9f       	mul	r18, r24
    8478:	b0 01       	movw	r22, r0
    847a:	29 9f       	mul	r18, r25
    847c:	70 0d       	add	r23, r0
    847e:	11 24       	eor	r1, r1
    8480:	90 e0       	ldi	r25, 0x00	; 0
    8482:	80 e0       	ldi	r24, 0x00	; 0
    8484:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
    8488:	20 e0       	ldi	r18, 0x00	; 0
    848a:	30 e0       	ldi	r19, 0x00	; 0
    848c:	4a e7       	ldi	r20, 0x7A	; 122
    848e:	54 e4       	ldi	r21, 0x44	; 68
    8490:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
_Z33display_element_show_about_devicejjjjhhPc():
    8494:	8e 01       	movw	r16, r28
    8496:	0f 5d       	subi	r16, 0xDF	; 223
    8498:	1f 4f       	sbci	r17, 0xFF	; 255
    849a:	22 e0       	ldi	r18, 0x02	; 2
    849c:	44 e0       	ldi	r20, 0x04	; 4
    849e:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    84a2:	b8 01       	movw	r22, r16
    84a4:	ce 01       	movw	r24, r28
    84a6:	01 96       	adiw	r24, 0x01	; 1
    84a8:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    84ac:	61 e1       	ldi	r22, 0x11	; 17
    84ae:	75 e0       	ldi	r23, 0x05	; 5
    84b0:	ce 01       	movw	r24, r28
    84b2:	01 96       	adiw	r24, 0x01	; 1
    84b4:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    84b8:	a4 01       	movw	r20, r8
    84ba:	48 5d       	subi	r20, 0xD8	; 216
    84bc:	5f 4f       	sbci	r21, 0xFF	; 255
    84be:	10 e0       	ldi	r17, 0x00	; 0
    84c0:	00 e0       	ldi	r16, 0x00	; 0
    84c2:	21 e0       	ldi	r18, 0x01	; 1
    84c4:	b5 01       	movw	r22, r10
    84c6:	ce 01       	movw	r24, r28
    84c8:	01 96       	adiw	r24, 0x01	; 1
    84ca:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    84ce:	60 e6       	ldi	r22, 0x60	; 96
    84d0:	75 e5       	ldi	r23, 0x55	; 85
    84d2:	ce 01       	movw	r24, r28
    84d4:	01 96       	adiw	r24, 0x01	; 1
    84d6:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
_Z15prepocet_prouduj():
    84da:	60 91 b6 0a 	lds	r22, 0x0AB6	; 0x800ab6 <proud>
    84de:	70 91 b7 0a 	lds	r23, 0x0AB7	; 0x800ab7 <proud+0x1>
    84e2:	90 e0       	ldi	r25, 0x00	; 0
    84e4:	80 e0       	ldi	r24, 0x00	; 0
    84e6:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
_Z33display_element_show_about_devicejjjjhhPc():
    84ea:	8e 01       	movw	r16, r28
    84ec:	0f 5d       	subi	r16, 0xDF	; 223
    84ee:	1f 4f       	sbci	r17, 0xFF	; 255
    84f0:	22 e0       	ldi	r18, 0x02	; 2
    84f2:	44 e0       	ldi	r20, 0x04	; 4
    84f4:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    84f8:	b8 01       	movw	r22, r16
    84fa:	ce 01       	movw	r24, r28
    84fc:	01 96       	adiw	r24, 0x01	; 1
    84fe:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8502:	6a e5       	ldi	r22, 0x5A	; 90
    8504:	73 e0       	ldi	r23, 0x03	; 3
    8506:	ce 01       	movw	r24, r28
    8508:	01 96       	adiw	r24, 0x01	; 1
    850a:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    850e:	a4 01       	movw	r20, r8
    8510:	49 5c       	subi	r20, 0xC9	; 201
    8512:	5f 4f       	sbci	r21, 0xFF	; 255
    8514:	10 e0       	ldi	r17, 0x00	; 0
    8516:	00 e0       	ldi	r16, 0x00	; 0
    8518:	21 e0       	ldi	r18, 0x01	; 1
    851a:	b5 01       	movw	r22, r10
    851c:	ce 01       	movw	r24, r28
    851e:	01 96       	adiw	r24, 0x01	; 1
    8520:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8524:	6e e4       	ldi	r22, 0x4E	; 78
    8526:	75 e5       	ldi	r23, 0x55	; 85
    8528:	ce 01       	movw	r24, r28
    852a:	01 96       	adiw	r24, 0x01	; 1
    852c:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    8530:	60 91 82 0a 	lds	r22, 0x0A82	; 0x800a82 <internal_temp>
    8534:	70 91 83 0a 	lds	r23, 0x0A83	; 0x800a83 <internal_temp+0x1>
    8538:	80 91 84 0a 	lds	r24, 0x0A84	; 0x800a84 <internal_temp+0x2>
    853c:	90 91 85 0a 	lds	r25, 0x0A85	; 0x800a85 <internal_temp+0x3>
    8540:	8e 01       	movw	r16, r28
    8542:	0f 5d       	subi	r16, 0xDF	; 223
    8544:	1f 4f       	sbci	r17, 0xFF	; 255
    8546:	22 e0       	ldi	r18, 0x02	; 2
    8548:	44 e0       	ldi	r20, 0x04	; 4
    854a:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    854e:	b8 01       	movw	r22, r16
    8550:	ce 01       	movw	r24, r28
    8552:	01 96       	adiw	r24, 0x01	; 1
    8554:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8558:	6d ef       	ldi	r22, 0xFD	; 253
    855a:	77 e0       	ldi	r23, 0x07	; 7
    855c:	ce 01       	movw	r24, r28
    855e:	01 96       	adiw	r24, 0x01	; 1
    8560:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8564:	a4 01       	movw	r20, r8
    8566:	4a 5b       	subi	r20, 0xBA	; 186
    8568:	5f 4f       	sbci	r21, 0xFF	; 255
    856a:	10 e0       	ldi	r17, 0x00	; 0
    856c:	00 e0       	ldi	r16, 0x00	; 0
    856e:	21 e0       	ldi	r18, 0x01	; 1
    8570:	b5 01       	movw	r22, r10
    8572:	ce 01       	movw	r24, r28
    8574:	01 96       	adiw	r24, 0x01	; 1
    8576:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    857a:	62 e4       	ldi	r22, 0x42	; 66
    857c:	75 e5       	ldi	r23, 0x55	; 85
    857e:	ce 01       	movw	r24, r28
    8580:	01 96       	adiw	r24, 0x01	; 1
    8582:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    8586:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <selftest_data>
itoa():
    858a:	40 e1       	ldi	r20, 0x10	; 16
    858c:	be 01       	movw	r22, r28
    858e:	6f 5d       	subi	r22, 0xDF	; 223
    8590:	7f 4f       	sbci	r23, 0xFF	; 255
    8592:	90 e0       	ldi	r25, 0x00	; 0
    8594:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
    8598:	be 01       	movw	r22, r28
    859a:	6f 5d       	subi	r22, 0xDF	; 223
    859c:	7f 4f       	sbci	r23, 0xFF	; 255
    859e:	ce 01       	movw	r24, r28
    85a0:	01 96       	adiw	r24, 0x01	; 1
    85a2:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    85a6:	a4 01       	movw	r20, r8
    85a8:	4b 5a       	subi	r20, 0xAB	; 171
    85aa:	5f 4f       	sbci	r21, 0xFF	; 255
    85ac:	21 e0       	ldi	r18, 0x01	; 1
    85ae:	b5 01       	movw	r22, r10
    85b0:	ce 01       	movw	r24, r28
    85b2:	01 96       	adiw	r24, 0x01	; 1
    85b4:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    85b8:	60 e3       	ldi	r22, 0x30	; 48
    85ba:	75 e5       	ldi	r23, 0x55	; 85
    85bc:	ce 01       	movw	r24, r28
    85be:	01 96       	adiw	r24, 0x01	; 1
    85c0:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
itoa():
    85c4:	4a e0       	ldi	r20, 0x0A	; 10
    85c6:	be 01       	movw	r22, r28
    85c8:	6f 5d       	subi	r22, 0xDF	; 223
    85ca:	7f 4f       	sbci	r23, 0xFF	; 255
    85cc:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <mqtt_send_message>
    85d0:	90 91 fb 10 	lds	r25, 0x10FB	; 0x8010fb <mqtt_send_message+0x1>
    85d4:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
    85d8:	be 01       	movw	r22, r28
    85da:	6f 5d       	subi	r22, 0xDF	; 223
    85dc:	7f 4f       	sbci	r23, 0xFF	; 255
    85de:	ce 01       	movw	r24, r28
    85e0:	01 96       	adiw	r24, 0x01	; 1
    85e2:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    85e6:	a4 01       	movw	r20, r8
    85e8:	4c 59       	subi	r20, 0x9C	; 156
    85ea:	5f 4f       	sbci	r21, 0xFF	; 255
    85ec:	21 e0       	ldi	r18, 0x01	; 1
    85ee:	b5 01       	movw	r22, r10
    85f0:	ce 01       	movw	r24, r28
    85f2:	01 96       	adiw	r24, 0x01	; 1
    85f4:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    85f8:	6f e1       	ldi	r22, 0x1F	; 31
    85fa:	75 e5       	ldi	r23, 0x55	; 85
    85fc:	ce 01       	movw	r24, r28
    85fe:	01 96       	adiw	r24, 0x01	; 1
    8600:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
itoa():
    8604:	4a e0       	ldi	r20, 0x0A	; 10
    8606:	be 01       	movw	r22, r28
    8608:	6f 5d       	subi	r22, 0xDF	; 223
    860a:	7f 4f       	sbci	r23, 0xFF	; 255
    860c:	80 91 f6 10 	lds	r24, 0x10F6	; 0x8010f6 <mqtt_receive_message>
    8610:	90 91 f7 10 	lds	r25, 0x10F7	; 0x8010f7 <mqtt_receive_message+0x1>
    8614:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
    8618:	be 01       	movw	r22, r28
    861a:	6f 5d       	subi	r22, 0xDF	; 223
    861c:	7f 4f       	sbci	r23, 0xFF	; 255
    861e:	ce 01       	movw	r24, r28
    8620:	01 96       	adiw	r24, 0x01	; 1
    8622:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8626:	a4 01       	movw	r20, r8
    8628:	4d 58       	subi	r20, 0x8D	; 141
    862a:	5f 4f       	sbci	r21, 0xFF	; 255
    862c:	21 e0       	ldi	r18, 0x01	; 1
    862e:	b5 01       	movw	r22, r10
    8630:	ce 01       	movw	r24, r28
    8632:	01 96       	adiw	r24, 0x01	; 1
    8634:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8638:	6b e0       	ldi	r22, 0x0B	; 11
    863a:	75 e5       	ldi	r23, 0x55	; 85
    863c:	ce 01       	movw	r24, r28
    863e:	01 96       	adiw	r24, 0x01	; 1
    8640:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
itoa():
    8644:	4a e0       	ldi	r20, 0x0A	; 10
    8646:	be 01       	movw	r22, r28
    8648:	6f 5d       	subi	r22, 0xDF	; 223
    864a:	7f 4f       	sbci	r23, 0xFF	; 255
    864c:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    8650:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    8654:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
    8658:	be 01       	movw	r22, r28
    865a:	6f 5d       	subi	r22, 0xDF	; 223
    865c:	7f 4f       	sbci	r23, 0xFF	; 255
    865e:	ce 01       	movw	r24, r28
    8660:	01 96       	adiw	r24, 0x01	; 1
    8662:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8666:	a4 01       	movw	r20, r8
    8668:	4e 57       	subi	r20, 0x7E	; 126
    866a:	5f 4f       	sbci	r21, 0xFF	; 255
    866c:	21 e0       	ldi	r18, 0x01	; 1
    866e:	b5 01       	movw	r22, r10
    8670:	ce 01       	movw	r24, r28
    8672:	01 96       	adiw	r24, 0x01	; 1
    8674:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8678:	6c ef       	ldi	r22, 0xFC	; 252
    867a:	74 e5       	ldi	r23, 0x54	; 84
    867c:	ce 01       	movw	r24, r28
    867e:	01 96       	adiw	r24, 0x01	; 1
    8680:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
itoa():
    8684:	4a e0       	ldi	r20, 0x0A	; 10
    8686:	be 01       	movw	r22, r28
    8688:	6f 5d       	subi	r22, 0xDF	; 223
    868a:	7f 4f       	sbci	r23, 0xFF	; 255
    868c:	80 91 4e 11 	lds	r24, 0x114E	; 0x80114e <mqtt_error>
    8690:	90 91 4f 11 	lds	r25, 0x114F	; 0x80114f <mqtt_error+0x1>
    8694:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
    8698:	be 01       	movw	r22, r28
    869a:	6f 5d       	subi	r22, 0xDF	; 223
    869c:	7f 4f       	sbci	r23, 0xFF	; 255
    869e:	ce 01       	movw	r24, r28
    86a0:	01 96       	adiw	r24, 0x01	; 1
    86a2:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    86a6:	a4 01       	movw	r20, r8
    86a8:	4f 56       	subi	r20, 0x6F	; 111
    86aa:	5f 4f       	sbci	r21, 0xFF	; 255
    86ac:	21 e0       	ldi	r18, 0x01	; 1
    86ae:	b5 01       	movw	r22, r10
    86b0:	ce 01       	movw	r24, r28
    86b2:	01 96       	adiw	r24, 0x01	; 1
    86b4:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    86b8:	a8 96       	adiw	r28, 0x28	; 40
    86ba:	0f b6       	in	r0, 0x3f	; 63
    86bc:	f8 94       	cli
    86be:	de bf       	out	0x3e, r29	; 62
    86c0:	0f be       	out	0x3f, r0	; 63
    86c2:	cd bf       	out	0x3d, r28	; 61
    86c4:	df 91       	pop	r29
    86c6:	cf 91       	pop	r28
    86c8:	1f 91       	pop	r17
    86ca:	0f 91       	pop	r16
    86cc:	ff 90       	pop	r15
    86ce:	ef 90       	pop	r14
    86d0:	cf 90       	pop	r12
    86d2:	bf 90       	pop	r11
    86d4:	af 90       	pop	r10
    86d6:	9f 90       	pop	r9
    86d8:	8f 90       	pop	r8
    86da:	08 95       	ret

000086dc <ip2CharArray(IPAddress, char*)>:
_Z12ip2CharArray9IPAddressPc():
    86dc:	fc 01       	movw	r30, r24
    86de:	85 81       	ldd	r24, Z+5	; 0x05
    86e0:	1f 92       	push	r1
    86e2:	8f 93       	push	r24
    86e4:	84 81       	ldd	r24, Z+4	; 0x04
    86e6:	1f 92       	push	r1
    86e8:	8f 93       	push	r24
    86ea:	83 81       	ldd	r24, Z+3	; 0x03
    86ec:	1f 92       	push	r1
    86ee:	8f 93       	push	r24
    86f0:	82 81       	ldd	r24, Z+2	; 0x02
    86f2:	1f 92       	push	r1
    86f4:	8f 93       	push	r24
    86f6:	8d e5       	ldi	r24, 0x5D	; 93
    86f8:	93 e0       	ldi	r25, 0x03	; 3
    86fa:	9f 93       	push	r25
    86fc:	8f 93       	push	r24
    86fe:	7f 93       	push	r23
    8700:	6f 93       	push	r22
    8702:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    8706:	8d b7       	in	r24, 0x3d	; 61
    8708:	9e b7       	in	r25, 0x3e	; 62
    870a:	0c 96       	adiw	r24, 0x0c	; 12
    870c:	0f b6       	in	r0, 0x3f	; 63
    870e:	f8 94       	cli
    8710:	9e bf       	out	0x3e, r25	; 62
    8712:	0f be       	out	0x3f, r0	; 63
    8714:	8d bf       	out	0x3d, r24	; 61
    8716:	08 95       	ret

00008718 <display_element_show_network_detail(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_show_network_detailjjjjhhPc():
    8718:	8f 92       	push	r8
    871a:	9f 92       	push	r9
    871c:	af 92       	push	r10
    871e:	bf 92       	push	r11
    8720:	cf 92       	push	r12
    8722:	ef 92       	push	r14
    8724:	ff 92       	push	r15
    8726:	0f 93       	push	r16
    8728:	1f 93       	push	r17
    872a:	cf 93       	push	r28
    872c:	df 93       	push	r29
    872e:	cd b7       	in	r28, 0x3d	; 61
    8730:	de b7       	in	r29, 0x3e	; 62
    8732:	ea 97       	sbiw	r28, 0x3a	; 58
    8734:	0f b6       	in	r0, 0x3f	; 63
    8736:	f8 94       	cli
    8738:	de bf       	out	0x3e, r29	; 62
    873a:	0f be       	out	0x3f, r0	; 63
    873c:	cd bf       	out	0x3d, r28	; 61
    873e:	5c 01       	movw	r10, r24
    8740:	4b 01       	movw	r8, r22
    8742:	7a 01       	movw	r14, r20
    8744:	89 01       	movw	r16, r18
    8746:	70 e0       	ldi	r23, 0x00	; 0
    8748:	60 e0       	ldi	r22, 0x00	; 0
    874a:	85 e1       	ldi	r24, 0x15	; 21
    874c:	9c e0       	ldi	r25, 0x0C	; 12
    874e:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    8752:	08 0d       	add	r16, r8
    8754:	19 1d       	adc	r17, r9
    8756:	95 01       	movw	r18, r10
    8758:	2e 0d       	add	r18, r14
    875a:	3f 1d       	adc	r19, r15
    875c:	a4 01       	movw	r20, r8
    875e:	b5 01       	movw	r22, r10
    8760:	85 e1       	ldi	r24, 0x15	; 21
    8762:	9c e0       	ldi	r25, 0x0C	; 12
    8764:	0e 94 d5 96 	call	0x12daa	; 0x12daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    8768:	68 ee       	ldi	r22, 0xE8	; 232
    876a:	76 e5       	ldi	r23, 0x56	; 86
    876c:	ce 01       	movw	r24, r28
    876e:	01 96       	adiw	r24, 0x01	; 1
    8770:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    8774:	67 e2       	ldi	r22, 0x27	; 39
    8776:	78 e0       	ldi	r23, 0x08	; 8
    8778:	ce 01       	movw	r24, r28
    877a:	01 96       	adiw	r24, 0x01	; 1
    877c:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8780:	00 e1       	ldi	r16, 0x10	; 16
    8782:	26 e0       	ldi	r18, 0x06	; 6
    8784:	4c ef       	ldi	r20, 0xFC	; 252
    8786:	50 e1       	ldi	r21, 0x10	; 16
    8788:	6e e2       	ldi	r22, 0x2E	; 46
    878a:	ce 01       	movw	r24, r28
    878c:	85 96       	adiw	r24, 0x25	; 37
    878e:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    8792:	be 01       	movw	r22, r28
    8794:	6b 5d       	subi	r22, 0xDB	; 219
    8796:	7f 4f       	sbci	r23, 0xFF	; 255
    8798:	ce 01       	movw	r24, r28
    879a:	01 96       	adiw	r24, 0x01	; 1
    879c:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    87a0:	85 e0       	ldi	r24, 0x05	; 5
    87a2:	a8 0e       	add	r10, r24
    87a4:	b1 1c       	adc	r11, r1
    87a6:	a4 01       	movw	r20, r8
    87a8:	46 5f       	subi	r20, 0xF6	; 246
    87aa:	5f 4f       	sbci	r21, 0xFF	; 255
    87ac:	c1 2c       	mov	r12, r1
    87ae:	ee 24       	eor	r14, r14
    87b0:	ea 94       	dec	r14
    87b2:	fe 2c       	mov	r15, r14
    87b4:	10 e0       	ldi	r17, 0x00	; 0
    87b6:	00 e0       	ldi	r16, 0x00	; 0
    87b8:	21 e0       	ldi	r18, 0x01	; 1
    87ba:	b5 01       	movw	r22, r10
    87bc:	ce 01       	movw	r24, r28
    87be:	01 96       	adiw	r24, 0x01	; 1
    87c0:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    87c4:	64 e2       	ldi	r22, 0x24	; 36
    87c6:	77 e5       	ldi	r23, 0x57	; 87
    87c8:	ce 01       	movw	r24, r28
    87ca:	01 96       	adiw	r24, 0x01	; 1
    87cc:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    87d0:	67 e2       	ldi	r22, 0x27	; 39
    87d2:	78 e0       	ldi	r23, 0x08	; 8
    87d4:	ce 01       	movw	r24, r28
    87d6:	01 96       	adiw	r24, 0x01	; 1
    87d8:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    87dc:	62 e1       	ldi	r22, 0x12	; 18
    87de:	71 e1       	ldi	r23, 0x11	; 17
    87e0:	ce 01       	movw	r24, r28
    87e2:	01 96       	adiw	r24, 0x01	; 1
    87e4:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    87e8:	a4 01       	movw	r20, r8
    87ea:	47 5e       	subi	r20, 0xE7	; 231
    87ec:	5f 4f       	sbci	r21, 0xFF	; 255
    87ee:	21 e0       	ldi	r18, 0x01	; 1
    87f0:	b5 01       	movw	r22, r10
    87f2:	ce 01       	movw	r24, r28
    87f4:	01 96       	adiw	r24, 0x01	; 1
    87f6:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    87fa:	63 ef       	ldi	r22, 0xF3	; 243
    87fc:	76 e5       	ldi	r23, 0x56	; 86
    87fe:	ce 01       	movw	r24, r28
    8800:	01 96       	adiw	r24, 0x01	; 1
    8802:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    8806:	67 e2       	ldi	r22, 0x27	; 39
    8808:	78 e0       	ldi	r23, 0x08	; 8
    880a:	ce 01       	movw	r24, r28
    880c:	01 96       	adiw	r24, 0x01	; 1
    880e:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8812:	69 e6       	ldi	r22, 0x69	; 105
    8814:	73 e0       	ldi	r23, 0x03	; 3
    8816:	ce 01       	movw	r24, r28
    8818:	01 96       	adiw	r24, 0x01	; 1
    881a:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    881e:	a4 01       	movw	r20, r8
    8820:	48 5d       	subi	r20, 0xD8	; 216
    8822:	5f 4f       	sbci	r21, 0xFF	; 255
    8824:	21 e0       	ldi	r18, 0x01	; 1
    8826:	b5 01       	movw	r22, r10
    8828:	ce 01       	movw	r24, r28
    882a:	01 96       	adiw	r24, 0x01	; 1
    882c:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8830:	62 e0       	ldi	r22, 0x02	; 2
    8832:	71 e1       	ldi	r23, 0x11	; 17
    8834:	ce 01       	movw	r24, r28
    8836:	c5 96       	adiw	r24, 0x35	; 53
    8838:	0e 94 57 da 	call	0x1b4ae	; 0x1b4ae <IPAddress::IPAddress(unsigned char const*)>
    883c:	be 01       	movw	r22, r28
    883e:	6b 5d       	subi	r22, 0xDB	; 219
    8840:	7f 4f       	sbci	r23, 0xFF	; 255
    8842:	ce 01       	movw	r24, r28
    8844:	c5 96       	adiw	r24, 0x35	; 53
    8846:	0e 94 6e 43 	call	0x86dc	; 0x86dc <ip2CharArray(IPAddress, char*)>
    884a:	6a e1       	ldi	r22, 0x1A	; 26
    884c:	77 e5       	ldi	r23, 0x57	; 87
    884e:	ce 01       	movw	r24, r28
    8850:	01 96       	adiw	r24, 0x01	; 1
    8852:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    8856:	67 e2       	ldi	r22, 0x27	; 39
    8858:	78 e0       	ldi	r23, 0x08	; 8
    885a:	ce 01       	movw	r24, r28
    885c:	01 96       	adiw	r24, 0x01	; 1
    885e:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8862:	be 01       	movw	r22, r28
    8864:	6b 5d       	subi	r22, 0xDB	; 219
    8866:	7f 4f       	sbci	r23, 0xFF	; 255
    8868:	ce 01       	movw	r24, r28
    886a:	01 96       	adiw	r24, 0x01	; 1
    886c:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8870:	a4 01       	movw	r20, r8
    8872:	49 5c       	subi	r20, 0xC9	; 201
    8874:	5f 4f       	sbci	r21, 0xFF	; 255
    8876:	21 e0       	ldi	r18, 0x01	; 1
    8878:	b5 01       	movw	r22, r10
    887a:	ce 01       	movw	r24, r28
    887c:	01 96       	adiw	r24, 0x01	; 1
    887e:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8882:	66 e0       	ldi	r22, 0x06	; 6
    8884:	71 e1       	ldi	r23, 0x11	; 17
    8886:	ce 01       	movw	r24, r28
    8888:	c5 96       	adiw	r24, 0x35	; 53
    888a:	0e 94 57 da 	call	0x1b4ae	; 0x1b4ae <IPAddress::IPAddress(unsigned char const*)>
    888e:	be 01       	movw	r22, r28
    8890:	6b 5d       	subi	r22, 0xDB	; 219
    8892:	7f 4f       	sbci	r23, 0xFF	; 255
    8894:	ce 01       	movw	r24, r28
    8896:	c5 96       	adiw	r24, 0x35	; 53
    8898:	0e 94 6e 43 	call	0x86dc	; 0x86dc <ip2CharArray(IPAddress, char*)>
    889c:	61 e1       	ldi	r22, 0x11	; 17
    889e:	77 e5       	ldi	r23, 0x57	; 87
    88a0:	ce 01       	movw	r24, r28
    88a2:	01 96       	adiw	r24, 0x01	; 1
    88a4:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    88a8:	67 e2       	ldi	r22, 0x27	; 39
    88aa:	78 e0       	ldi	r23, 0x08	; 8
    88ac:	ce 01       	movw	r24, r28
    88ae:	01 96       	adiw	r24, 0x01	; 1
    88b0:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    88b4:	be 01       	movw	r22, r28
    88b6:	6b 5d       	subi	r22, 0xDB	; 219
    88b8:	7f 4f       	sbci	r23, 0xFF	; 255
    88ba:	ce 01       	movw	r24, r28
    88bc:	01 96       	adiw	r24, 0x01	; 1
    88be:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    88c2:	a4 01       	movw	r20, r8
    88c4:	4a 5b       	subi	r20, 0xBA	; 186
    88c6:	5f 4f       	sbci	r21, 0xFF	; 255
    88c8:	21 e0       	ldi	r18, 0x01	; 1
    88ca:	b5 01       	movw	r22, r10
    88cc:	ce 01       	movw	r24, r28
    88ce:	01 96       	adiw	r24, 0x01	; 1
    88d0:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    88d4:	6e e0       	ldi	r22, 0x0E	; 14
    88d6:	71 e1       	ldi	r23, 0x11	; 17
    88d8:	ce 01       	movw	r24, r28
    88da:	c5 96       	adiw	r24, 0x35	; 53
    88dc:	0e 94 57 da 	call	0x1b4ae	; 0x1b4ae <IPAddress::IPAddress(unsigned char const*)>
    88e0:	be 01       	movw	r22, r28
    88e2:	6b 5d       	subi	r22, 0xDB	; 219
    88e4:	7f 4f       	sbci	r23, 0xFF	; 255
    88e6:	ce 01       	movw	r24, r28
    88e8:	c5 96       	adiw	r24, 0x35	; 53
    88ea:	0e 94 6e 43 	call	0x86dc	; 0x86dc <ip2CharArray(IPAddress, char*)>
    88ee:	63 e0       	ldi	r22, 0x03	; 3
    88f0:	77 e5       	ldi	r23, 0x57	; 87
    88f2:	ce 01       	movw	r24, r28
    88f4:	01 96       	adiw	r24, 0x01	; 1
    88f6:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    88fa:	67 e2       	ldi	r22, 0x27	; 39
    88fc:	78 e0       	ldi	r23, 0x08	; 8
    88fe:	ce 01       	movw	r24, r28
    8900:	01 96       	adiw	r24, 0x01	; 1
    8902:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8906:	be 01       	movw	r22, r28
    8908:	6b 5d       	subi	r22, 0xDB	; 219
    890a:	7f 4f       	sbci	r23, 0xFF	; 255
    890c:	ce 01       	movw	r24, r28
    890e:	01 96       	adiw	r24, 0x01	; 1
    8910:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8914:	a4 01       	movw	r20, r8
    8916:	4b 5a       	subi	r20, 0xAB	; 171
    8918:	5f 4f       	sbci	r21, 0xFF	; 255
    891a:	21 e0       	ldi	r18, 0x01	; 1
    891c:	b5 01       	movw	r22, r10
    891e:	ce 01       	movw	r24, r28
    8920:	01 96       	adiw	r24, 0x01	; 1
    8922:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8926:	6a e0       	ldi	r22, 0x0A	; 10
    8928:	71 e1       	ldi	r23, 0x11	; 17
    892a:	ce 01       	movw	r24, r28
    892c:	c5 96       	adiw	r24, 0x35	; 53
    892e:	0e 94 57 da 	call	0x1b4ae	; 0x1b4ae <IPAddress::IPAddress(unsigned char const*)>
    8932:	be 01       	movw	r22, r28
    8934:	6b 5d       	subi	r22, 0xDB	; 219
    8936:	7f 4f       	sbci	r23, 0xFF	; 255
    8938:	ce 01       	movw	r24, r28
    893a:	c5 96       	adiw	r24, 0x35	; 53
    893c:	0e 94 6e 43 	call	0x86dc	; 0x86dc <ip2CharArray(IPAddress, char*)>
    8940:	68 ef       	ldi	r22, 0xF8	; 248
    8942:	76 e5       	ldi	r23, 0x56	; 86
    8944:	ce 01       	movw	r24, r28
    8946:	01 96       	adiw	r24, 0x01	; 1
    8948:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    894c:	67 e2       	ldi	r22, 0x27	; 39
    894e:	78 e0       	ldi	r23, 0x08	; 8
    8950:	ce 01       	movw	r24, r28
    8952:	01 96       	adiw	r24, 0x01	; 1
    8954:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8958:	be 01       	movw	r22, r28
    895a:	6b 5d       	subi	r22, 0xDB	; 219
    895c:	7f 4f       	sbci	r23, 0xFF	; 255
    895e:	ce 01       	movw	r24, r28
    8960:	01 96       	adiw	r24, 0x01	; 1
    8962:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8966:	a4 01       	movw	r20, r8
    8968:	4c 59       	subi	r20, 0x9C	; 156
    896a:	5f 4f       	sbci	r21, 0xFF	; 255
    896c:	21 e0       	ldi	r18, 0x01	; 1
    896e:	b5 01       	movw	r22, r10
    8970:	ce 01       	movw	r24, r28
    8972:	01 96       	adiw	r24, 0x01	; 1
    8974:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8978:	ea 96       	adiw	r28, 0x3a	; 58
    897a:	0f b6       	in	r0, 0x3f	; 63
    897c:	f8 94       	cli
    897e:	de bf       	out	0x3e, r29	; 62
    8980:	0f be       	out	0x3f, r0	; 63
    8982:	cd bf       	out	0x3d, r28	; 61
    8984:	df 91       	pop	r29
    8986:	cf 91       	pop	r28
    8988:	1f 91       	pop	r17
    898a:	0f 91       	pop	r16
    898c:	ff 90       	pop	r15
    898e:	ef 90       	pop	r14
    8990:	cf 90       	pop	r12
    8992:	bf 90       	pop	r11
    8994:	af 90       	pop	r10
    8996:	9f 90       	pop	r9
    8998:	8f 90       	pop	r8
    899a:	08 95       	ret

0000899c <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
    899c:	af 92       	push	r10
    899e:	bf 92       	push	r11
    89a0:	cf 92       	push	r12
    89a2:	df 92       	push	r13
    89a4:	ef 92       	push	r14
    89a6:	ff 92       	push	r15
    89a8:	0f 93       	push	r16
    89aa:	1f 93       	push	r17
    89ac:	cf 93       	push	r28
    89ae:	df 93       	push	r29
    89b0:	8a 30       	cpi	r24, 0x0A	; 10
    89b2:	88 f5       	brcc	.+98     	; 0x8a16 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    89b4:	7b 01       	movw	r14, r22
    89b6:	94 e1       	ldi	r25, 0x14	; 20
    89b8:	89 9f       	mul	r24, r25
    89ba:	e0 01       	movw	r28, r0
    89bc:	11 24       	eor	r1, r1
    89be:	6e 01       	movw	r12, r28
    89c0:	e6 e5       	ldi	r30, 0x56	; 86
    89c2:	ce 1a       	sub	r12, r30
    89c4:	ea ef       	ldi	r30, 0xFA	; 250
    89c6:	de 0a       	sbc	r13, r30
    89c8:	8a 01       	movw	r16, r20
    89ca:	5e 01       	movw	r10, r28
    89cc:	f4 e4       	ldi	r31, 0x44	; 68
    89ce:	af 1a       	sub	r10, r31
    89d0:	fa ef       	ldi	r31, 0xFA	; 250
    89d2:	bf 0a       	sbc	r11, r31
    89d4:	c6 01       	movw	r24, r12
    89d6:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <EEPROMClass::read(int) [clone .isra.6]>
    89da:	f8 01       	movw	r30, r16
    89dc:	81 93       	st	Z+, r24
    89de:	8f 01       	movw	r16, r30
    89e0:	10 82       	st	Z, r1
    89e2:	88 23       	and	r24, r24
    89e4:	31 f0       	breq	.+12     	; 0x89f2 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    89e6:	ff ef       	ldi	r31, 0xFF	; 255
    89e8:	cf 1a       	sub	r12, r31
    89ea:	df 0a       	sbc	r13, r31
    89ec:	ca 14       	cp	r12, r10
    89ee:	db 04       	cpc	r13, r11
    89f0:	89 f7       	brne	.-30     	; 0x89d4 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
    89f2:	ce 01       	movw	r24, r28
    89f4:	83 54       	subi	r24, 0x43	; 67
    89f6:	9a 4f       	sbci	r25, 0xFA	; 250
    89f8:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <EEPROMClass::read(int) [clone .isra.6]>
    89fc:	f7 01       	movw	r30, r14
    89fe:	80 83       	st	Z, r24
    8a00:	df 91       	pop	r29
    8a02:	cf 91       	pop	r28
    8a04:	1f 91       	pop	r17
    8a06:	0f 91       	pop	r16
    8a08:	ff 90       	pop	r15
    8a0a:	ef 90       	pop	r14
    8a0c:	df 90       	pop	r13
    8a0e:	cf 90       	pop	r12
    8a10:	bf 90       	pop	r11
    8a12:	af 90       	pop	r10
    8a14:	08 95       	ret
    8a16:	8f ef       	ldi	r24, 0xFF	; 255
    8a18:	fb 01       	movw	r30, r22
    8a1a:	f1 cf       	rjmp	.-30     	; 0x89fe <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

00008a1c <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z29display_menu_rtds_update_namejjh():
    8a1c:	1f 93       	push	r17
    8a1e:	cf 93       	push	r28
    8a20:	df 93       	push	r29
    8a22:	cd b7       	in	r28, 0x3d	; 61
    8a24:	de b7       	in	r29, 0x3e	; 62
    8a26:	63 97       	sbiw	r28, 0x13	; 19
    8a28:	0f b6       	in	r0, 0x3f	; 63
    8a2a:	f8 94       	cli
    8a2c:	de bf       	out	0x3e, r29	; 62
    8a2e:	0f be       	out	0x3f, r0	; 63
    8a30:	cd bf       	out	0x3d, r28	; 61
    8a32:	16 2f       	mov	r17, r22
    8a34:	ae 01       	movw	r20, r28
    8a36:	4f 5f       	subi	r20, 0xFF	; 255
    8a38:	5f 4f       	sbci	r21, 0xFF	; 255
    8a3a:	be 01       	movw	r22, r28
    8a3c:	6d 5e       	subi	r22, 0xED	; 237
    8a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    8a40:	81 2f       	mov	r24, r17
    8a42:	0e 94 ce 44 	call	0x899c	; 0x899c <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8a46:	70 e0       	ldi	r23, 0x00	; 0
    8a48:	60 e0       	ldi	r22, 0x00	; 0
    8a4a:	87 e6       	ldi	r24, 0x67	; 103
    8a4c:	90 e0       	ldi	r25, 0x00	; 0
    8a4e:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    8a52:	2c e9       	ldi	r18, 0x9C	; 156
    8a54:	37 e4       	ldi	r19, 0x47	; 71
    8a56:	41 2f       	mov	r20, r17
    8a58:	62 e1       	ldi	r22, 0x12	; 18
    8a5a:	ce 01       	movw	r24, r28
    8a5c:	01 96       	adiw	r24, 0x01	; 1
    8a5e:	0e 94 9c 3b 	call	0x7738	; 0x7738 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    8a62:	63 96       	adiw	r28, 0x13	; 19
    8a64:	0f b6       	in	r0, 0x3f	; 63
    8a66:	f8 94       	cli
    8a68:	de bf       	out	0x3e, r29	; 62
    8a6a:	0f be       	out	0x3f, r0	; 63
    8a6c:	cd bf       	out	0x3d, r28	; 61
    8a6e:	df 91       	pop	r29
    8a70:	cf 91       	pop	r28
    8a72:	1f 91       	pop	r17
    8a74:	08 95       	ret

00008a76 <remote_tds_set_name(unsigned char, char*)>:
_Z19remote_tds_set_namehPc():
    8a76:	df 92       	push	r13
    8a78:	ef 92       	push	r14
    8a7a:	ff 92       	push	r15
    8a7c:	0f 93       	push	r16
    8a7e:	1f 93       	push	r17
    8a80:	cf 93       	push	r28
    8a82:	df 93       	push	r29
    8a84:	8a 30       	cpi	r24, 0x0A	; 10
    8a86:	c0 f4       	brcc	.+48     	; 0x8ab8 <remote_tds_set_name(unsigned char, char*)+0x42>
    8a88:	94 e1       	ldi	r25, 0x14	; 20
    8a8a:	89 9f       	mul	r24, r25
    8a8c:	e0 01       	movw	r28, r0
    8a8e:	11 24       	eor	r1, r1
    8a90:	7b 01       	movw	r14, r22
    8a92:	8e 01       	movw	r16, r28
    8a94:	06 55       	subi	r16, 0x56	; 86
    8a96:	1a 4f       	sbci	r17, 0xFA	; 250
    8a98:	c4 54       	subi	r28, 0x44	; 68
    8a9a:	da 4f       	sbci	r29, 0xFA	; 250
    8a9c:	f7 01       	movw	r30, r14
    8a9e:	d1 90       	ld	r13, Z+
    8aa0:	7f 01       	movw	r14, r30
    8aa2:	6d 2d       	mov	r22, r13
    8aa4:	c8 01       	movw	r24, r16
    8aa6:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
    8aaa:	dd 20       	and	r13, r13
    8aac:	29 f0       	breq	.+10     	; 0x8ab8 <remote_tds_set_name(unsigned char, char*)+0x42>
    8aae:	0f 5f       	subi	r16, 0xFF	; 255
    8ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    8ab2:	0c 17       	cp	r16, r28
    8ab4:	1d 07       	cpc	r17, r29
    8ab6:	91 f7       	brne	.-28     	; 0x8a9c <remote_tds_set_name(unsigned char, char*)+0x26>
    8ab8:	df 91       	pop	r29
    8aba:	cf 91       	pop	r28
    8abc:	1f 91       	pop	r17
    8abe:	0f 91       	pop	r16
    8ac0:	ff 90       	pop	r15
    8ac2:	ef 90       	pop	r14
    8ac4:	df 90       	pop	r13
    8ac6:	08 95       	ret

00008ac8 <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
    8ac8:	cf 93       	push	r28
    8aca:	df 93       	push	r29
    8acc:	8a 30       	cpi	r24, 0x0A	; 10
    8ace:	68 f4       	brcc	.+26     	; 0x8aea <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    8ad0:	eb 01       	movw	r28, r22
    8ad2:	24 e1       	ldi	r18, 0x14	; 20
    8ad4:	82 9f       	mul	r24, r18
    8ad6:	c0 01       	movw	r24, r0
    8ad8:	11 24       	eor	r1, r1
    8ada:	83 54       	subi	r24, 0x43	; 67
    8adc:	9a 4f       	sbci	r25, 0xFA	; 250
    8ade:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <EEPROMClass::read(int) [clone .isra.6]>
    8ae2:	88 83       	st	Y, r24
    8ae4:	df 91       	pop	r29
    8ae6:	cf 91       	pop	r28
    8ae8:	08 95       	ret
    8aea:	8f ef       	ldi	r24, 0xFF	; 255
    8aec:	fb 01       	movw	r30, r22
    8aee:	80 83       	st	Z, r24
    8af0:	f9 cf       	rjmp	.-14     	; 0x8ae4 <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

00008af2 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhhPcS_():
    8af2:	cf 92       	push	r12
    8af4:	df 92       	push	r13
    8af6:	ff 92       	push	r15
    8af8:	0f 93       	push	r16
    8afa:	1f 93       	push	r17
    8afc:	cf 93       	push	r28
    8afe:	df 93       	push	r29
    8b00:	1f 92       	push	r1
    8b02:	cd b7       	in	r28, 0x3d	; 61
    8b04:	de b7       	in	r29, 0x3e	; 62
    8b06:	f8 2e       	mov	r15, r24
    8b08:	69 01       	movw	r12, r18
    8b0a:	69 e3       	ldi	r22, 0x39	; 57
    8b0c:	7a e5       	ldi	r23, 0x5A	; 90
    8b0e:	c9 01       	movw	r24, r18
    8b10:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    8b14:	f8 01       	movw	r30, r16
    8b16:	10 82       	st	Z, r1
    8b18:	be 01       	movw	r22, r28
    8b1a:	6f 5f       	subi	r22, 0xFF	; 255
    8b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    8b1e:	8f 2d       	mov	r24, r15
    8b20:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <remote_tds_get_active(unsigned char, unsigned char*)>
    8b24:	89 81       	ldd	r24, Y+1	; 0x01
    8b26:	81 30       	cpi	r24, 0x01	; 1
    8b28:	39 f4       	brne	.+14     	; 0x8b38 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
    8b2a:	a6 01       	movw	r20, r12
    8b2c:	be 01       	movw	r22, r28
    8b2e:	6f 5f       	subi	r22, 0xFF	; 255
    8b30:	7f 4f       	sbci	r23, 0xFF	; 255
    8b32:	8f 2d       	mov	r24, r15
    8b34:	0e 94 ce 44 	call	0x899c	; 0x899c <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8b38:	0f 90       	pop	r0
    8b3a:	df 91       	pop	r29
    8b3c:	cf 91       	pop	r28
    8b3e:	1f 91       	pop	r17
    8b40:	0f 91       	pop	r16
    8b42:	ff 90       	pop	r15
    8b44:	df 90       	pop	r13
    8b46:	cf 90       	pop	r12
    8b48:	08 95       	ret

00008b4a <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>:
_Z25click_rtds_setting_sensorjjh():
    8b4a:	1f 93       	push	r17
    8b4c:	cf 93       	push	r28
    8b4e:	df 93       	push	r29
    8b50:	1f 92       	push	r1
    8b52:	cd b7       	in	r28, 0x3d	; 61
    8b54:	de b7       	in	r29, 0x3e	; 62
    8b56:	14 2f       	mov	r17, r20
    8b58:	be 01       	movw	r22, r28
    8b5a:	6f 5f       	subi	r22, 0xFF	; 255
    8b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    8b5e:	84 2f       	mov	r24, r20
    8b60:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <remote_tds_get_active(unsigned char, unsigned char*)>
    8b64:	89 81       	ldd	r24, Y+1	; 0x01
    8b66:	81 30       	cpi	r24, 0x01	; 1
    8b68:	31 f4       	brne	.+12     	; 0x8b76 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)+0x2c>
    8b6a:	61 2f       	mov	r22, r17
    8b6c:	70 e0       	ldi	r23, 0x00	; 0
    8b6e:	87 e0       	ldi	r24, 0x07	; 7
    8b70:	90 e0       	ldi	r25, 0x00	; 0
    8b72:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    8b76:	0f 90       	pop	r0
    8b78:	df 91       	pop	r29
    8b7a:	cf 91       	pop	r28
    8b7c:	1f 91       	pop	r17
    8b7e:	08 95       	ret

00008b80 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z28button_get_show_default_temphhhPcS_():
    8b80:	9f 92       	push	r9
    8b82:	af 92       	push	r10
    8b84:	bf 92       	push	r11
    8b86:	cf 92       	push	r12
    8b88:	df 92       	push	r13
    8b8a:	ef 92       	push	r14
    8b8c:	0f 93       	push	r16
    8b8e:	1f 93       	push	r17
    8b90:	cf 93       	push	r28
    8b92:	df 93       	push	r29
    8b94:	cd b7       	in	r28, 0x3d	; 61
    8b96:	de b7       	in	r29, 0x3e	; 62
    8b98:	65 97       	sbiw	r28, 0x15	; 21
    8b9a:	0f b6       	in	r0, 0x3f	; 63
    8b9c:	f8 94       	cli
    8b9e:	de bf       	out	0x3e, r29	; 62
    8ba0:	0f be       	out	0x3f, r0	; 63
    8ba2:	cd bf       	out	0x3d, r28	; 61
    8ba4:	98 2e       	mov	r9, r24
    8ba6:	e4 2e       	mov	r14, r20
    8ba8:	69 01       	movw	r12, r18
    8baa:	58 01       	movw	r10, r16
    8bac:	62 eb       	ldi	r22, 0xB2	; 178
    8bae:	75 e0       	ldi	r23, 0x05	; 5
    8bb0:	c9 01       	movw	r24, r18
    8bb2:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    8bb6:	62 eb       	ldi	r22, 0xB2	; 178
    8bb8:	75 e0       	ldi	r23, 0x05	; 5
    8bba:	c8 01       	movw	r24, r16
    8bbc:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    8bc0:	00 e0       	ldi	r16, 0x00	; 0
    8bc2:	10 e0       	ldi	r17, 0x00	; 0
    8bc4:	80 2f       	mov	r24, r16
    8bc6:	0e 94 e0 8b 	call	0x117c0	; 0x117c0 <tds_used(unsigned char)>
    8bca:	81 30       	cpi	r24, 0x01	; 1
    8bcc:	11 f4       	brne	.+4      	; 0x8bd2 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x52>
    8bce:	ee 20       	and	r14, r14
    8bd0:	19 f0       	breq	.+6      	; 0x8bd8 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
    8bd2:	81 e0       	ldi	r24, 0x01	; 1
    8bd4:	e8 12       	cpse	r14, r24
    8bd6:	25 c0       	rjmp	.+74     	; 0x8c22 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xa2>
    8bd8:	91 12       	cpse	r9, r17
    8bda:	22 c0       	rjmp	.+68     	; 0x8c20 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xa0>
    8bdc:	be 01       	movw	r22, r28
    8bde:	6f 5f       	subi	r22, 0xFF	; 255
    8be0:	7f 4f       	sbci	r23, 0xFF	; 255
    8be2:	80 2f       	mov	r24, r16
    8be4:	0e 94 b1 8c 	call	0x11962	; 0x11962 <tds_get_name(unsigned char, char*)>
    8be8:	be 01       	movw	r22, r28
    8bea:	6f 5f       	subi	r22, 0xFF	; 255
    8bec:	7f 4f       	sbci	r23, 0xFF	; 255
    8bee:	c5 01       	movw	r24, r10
    8bf0:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    8bf4:	69 e9       	ldi	r22, 0x99	; 153
    8bf6:	7a e5       	ldi	r23, 0x5A	; 90
    8bf8:	c6 01       	movw	r24, r12
    8bfa:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    8bfe:	65 96       	adiw	r28, 0x15	; 21
    8c00:	0f b6       	in	r0, 0x3f	; 63
    8c02:	f8 94       	cli
    8c04:	de bf       	out	0x3e, r29	; 62
    8c06:	0f be       	out	0x3f, r0	; 63
    8c08:	cd bf       	out	0x3d, r28	; 61
    8c0a:	df 91       	pop	r29
    8c0c:	cf 91       	pop	r28
    8c0e:	1f 91       	pop	r17
    8c10:	0f 91       	pop	r16
    8c12:	ef 90       	pop	r14
    8c14:	df 90       	pop	r13
    8c16:	cf 90       	pop	r12
    8c18:	bf 90       	pop	r11
    8c1a:	af 90       	pop	r10
    8c1c:	9f 90       	pop	r9
    8c1e:	08 95       	ret
    8c20:	1f 5f       	subi	r17, 0xFF	; 255
    8c22:	0f 5f       	subi	r16, 0xFF	; 255
    8c24:	06 30       	cpi	r16, 0x06	; 6
    8c26:	71 f6       	brne	.-100    	; 0x8bc4 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x44>
    8c28:	00 e0       	ldi	r16, 0x00	; 0
    8c2a:	be 01       	movw	r22, r28
    8c2c:	6b 5e       	subi	r22, 0xEB	; 235
    8c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    8c30:	80 2f       	mov	r24, r16
    8c32:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <remote_tds_get_active(unsigned char, unsigned char*)>
    8c36:	8d 89       	ldd	r24, Y+21	; 0x15
    8c38:	81 30       	cpi	r24, 0x01	; 1
    8c3a:	11 f4       	brne	.+4      	; 0x8c40 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc0>
    8c3c:	ee 20       	and	r14, r14
    8c3e:	19 f0       	breq	.+6      	; 0x8c46 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc6>
    8c40:	81 e0       	ldi	r24, 0x01	; 1
    8c42:	e8 12       	cpse	r14, r24
    8c44:	15 c0       	rjmp	.+42     	; 0x8c70 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xf0>
    8c46:	91 12       	cpse	r9, r17
    8c48:	12 c0       	rjmp	.+36     	; 0x8c6e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xee>
    8c4a:	ae 01       	movw	r20, r28
    8c4c:	4f 5f       	subi	r20, 0xFF	; 255
    8c4e:	5f 4f       	sbci	r21, 0xFF	; 255
    8c50:	be 01       	movw	r22, r28
    8c52:	6b 5e       	subi	r22, 0xEB	; 235
    8c54:	7f 4f       	sbci	r23, 0xFF	; 255
    8c56:	80 2f       	mov	r24, r16
    8c58:	0e 94 ce 44 	call	0x899c	; 0x899c <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8c5c:	be 01       	movw	r22, r28
    8c5e:	6f 5f       	subi	r22, 0xFF	; 255
    8c60:	7f 4f       	sbci	r23, 0xFF	; 255
    8c62:	c5 01       	movw	r24, r10
    8c64:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    8c68:	6a e8       	ldi	r22, 0x8A	; 138
    8c6a:	7a e5       	ldi	r23, 0x5A	; 90
    8c6c:	c5 cf       	rjmp	.-118    	; 0x8bf8 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x78>
    8c6e:	1f 5f       	subi	r17, 0xFF	; 255
    8c70:	0f 5f       	subi	r16, 0xFF	; 255
    8c72:	0a 30       	cpi	r16, 0x0A	; 10
    8c74:	d1 f6       	brne	.-76     	; 0x8c2a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xaa>
    8c76:	c3 cf       	rjmp	.-122    	; 0x8bfe <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x7e>

00008c78 <remote_tds_set_active(unsigned char, unsigned char)>:
_Z21remote_tds_set_activehh():
    8c78:	8a 30       	cpi	r24, 0x0A	; 10
    8c7a:	40 f4       	brcc	.+16     	; 0x8c8c <remote_tds_set_active(unsigned char, unsigned char)+0x14>
    8c7c:	24 e1       	ldi	r18, 0x14	; 20
    8c7e:	82 9f       	mul	r24, r18
    8c80:	c0 01       	movw	r24, r0
    8c82:	11 24       	eor	r1, r1
    8c84:	83 54       	subi	r24, 0x43	; 67
    8c86:	9a 4f       	sbci	r25, 0xFA	; 250
    8c88:	0c 94 d0 37 	jmp	0x6fa0	; 0x6fa0 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
    8c8c:	08 95       	ret

00008c8e <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
    8c8e:	cf 93       	push	r28
    8c90:	df 93       	push	r29
    8c92:	c8 2f       	mov	r28, r24
    8c94:	d6 2f       	mov	r29, r22
    8c96:	ba 01       	movw	r22, r20
    8c98:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <remote_tds_set_name(unsigned char, char*)>
    8c9c:	6d 2f       	mov	r22, r29
    8c9e:	8c 2f       	mov	r24, r28
    8ca0:	df 91       	pop	r29
    8ca2:	cf 91       	pop	r28
    8ca4:	0c 94 3c 46 	jmp	0x8c78	; 0x8c78 <remote_tds_set_active(unsigned char, unsigned char)>

00008ca8 <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
    8ca8:	cf 93       	push	r28
    8caa:	df 93       	push	r29
    8cac:	cd b7       	in	r28, 0x3d	; 61
    8cae:	de b7       	in	r29, 0x3e	; 62
    8cb0:	62 97       	sbiw	r28, 0x12	; 18
    8cb2:	0f b6       	in	r0, 0x3f	; 63
    8cb4:	f8 94       	cli
    8cb6:	de bf       	out	0x3e, r29	; 62
    8cb8:	0f be       	out	0x3f, r0	; 63
    8cba:	cd bf       	out	0x3d, r28	; 61
    8cbc:	e1 e0       	ldi	r30, 0x01	; 1
    8cbe:	f0 e0       	ldi	r31, 0x00	; 0
    8cc0:	ec 0f       	add	r30, r28
    8cc2:	fd 1f       	adc	r31, r29
    8cc4:	e8 0f       	add	r30, r24
    8cc6:	f1 1d       	adc	r31, r1
    8cc8:	10 82       	st	Z, r1
    8cca:	ae 01       	movw	r20, r28
    8ccc:	4f 5f       	subi	r20, 0xFF	; 255
    8cce:	5f 4f       	sbci	r21, 0xFF	; 255
    8cd0:	60 e0       	ldi	r22, 0x00	; 0
    8cd2:	0e 94 47 46 	call	0x8c8e	; 0x8c8e <remote_tds_set_complete(unsigned char, unsigned char, char*)>
    8cd6:	62 96       	adiw	r28, 0x12	; 18
    8cd8:	0f b6       	in	r0, 0x3f	; 63
    8cda:	f8 94       	cli
    8cdc:	de bf       	out	0x3e, r29	; 62
    8cde:	0f be       	out	0x3f, r0	; 63
    8ce0:	cd bf       	out	0x3d, r28	; 61
    8ce2:	df 91       	pop	r29
    8ce4:	cf 91       	pop	r28
    8ce6:	08 95       	ret

00008ce8 <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z30click_rtds_deassociate_onewirejjh():
    8ce8:	86 2f       	mov	r24, r22
    8cea:	0e 94 54 46 	call	0x8ca8	; 0x8ca8 <remote_tds_clear(unsigned char)>
    8cee:	0c 94 59 3a 	jmp	0x74b2	; 0x74b2 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

00008cf2 <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
    8cf2:	cf 93       	push	r28
    8cf4:	df 93       	push	r29
    8cf6:	cd b7       	in	r28, 0x3d	; 61
    8cf8:	de b7       	in	r29, 0x3e	; 62
    8cfa:	c1 58       	subi	r28, 0x81	; 129
    8cfc:	d1 09       	sbc	r29, r1
    8cfe:	0f b6       	in	r0, 0x3f	; 63
    8d00:	f8 94       	cli
    8d02:	de bf       	out	0x3e, r29	; 62
    8d04:	0f be       	out	0x3f, r0	; 63
    8d06:	cd bf       	out	0x3d, r28	; 61
    8d08:	cf 57       	subi	r28, 0x7F	; 127
    8d0a:	df 4f       	sbci	r29, 0xFF	; 255
    8d0c:	18 82       	st	Y, r1
    8d0e:	c1 58       	subi	r28, 0x81	; 129
    8d10:	d0 40       	sbci	r29, 0x00	; 0
    8d12:	ae 01       	movw	r20, r28
    8d14:	4f 5b       	subi	r20, 0xBF	; 191
    8d16:	5f 4f       	sbci	r21, 0xFF	; 255
    8d18:	be 01       	movw	r22, r28
    8d1a:	6f 57       	subi	r22, 0x7F	; 127
    8d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    8d1e:	0e 94 ce 44 	call	0x899c	; 0x899c <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8d22:	cf 57       	subi	r28, 0x7F	; 127
    8d24:	df 4f       	sbci	r29, 0xFF	; 255
    8d26:	88 81       	ld	r24, Y
    8d28:	c1 58       	subi	r28, 0x81	; 129
    8d2a:	d0 40       	sbci	r29, 0x00	; 0
    8d2c:	81 30       	cpi	r24, 0x01	; 1
    8d2e:	a1 f4       	brne	.+40     	; 0x8d58 <remote_tds_subscibe_topic(unsigned char)+0x66>
    8d30:	6e e6       	ldi	r22, 0x6E	; 110
    8d32:	73 e0       	ldi	r23, 0x03	; 3
    8d34:	ce 01       	movw	r24, r28
    8d36:	01 96       	adiw	r24, 0x01	; 1
    8d38:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    8d3c:	be 01       	movw	r22, r28
    8d3e:	6f 5b       	subi	r22, 0xBF	; 191
    8d40:	7f 4f       	sbci	r23, 0xFF	; 255
    8d42:	ce 01       	movw	r24, r28
    8d44:	01 96       	adiw	r24, 0x01	; 1
    8d46:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8d4a:	be 01       	movw	r22, r28
    8d4c:	6f 5f       	subi	r22, 0xFF	; 255
    8d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    8d50:	89 e0       	ldi	r24, 0x09	; 9
    8d52:	9e e0       	ldi	r25, 0x0E	; 14
    8d54:	0e 94 92 c7 	call	0x18f24	; 0x18f24 <PubSubClient::subscribe(char const*)>
    8d58:	cf 57       	subi	r28, 0x7F	; 127
    8d5a:	df 4f       	sbci	r29, 0xFF	; 255
    8d5c:	0f b6       	in	r0, 0x3f	; 63
    8d5e:	f8 94       	cli
    8d60:	de bf       	out	0x3e, r29	; 62
    8d62:	0f be       	out	0x3f, r0	; 63
    8d64:	cd bf       	out	0x3d, r28	; 61
    8d66:	df 91       	pop	r29
    8d68:	cf 91       	pop	r28
    8d6a:	08 95       	ret

00008d6c <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>:
_Z20click_rtds_subscribejjh():
    8d6c:	86 2f       	mov	r24, r22
    8d6e:	0c 94 79 46 	jmp	0x8cf2	; 0x8cf2 <remote_tds_subscibe_topic(unsigned char)>

00008d72 <remote_tds_unsubscibe_topic(unsigned char)>:
_Z27remote_tds_unsubscibe_topich():
    8d72:	cf 93       	push	r28
    8d74:	df 93       	push	r29
    8d76:	cd b7       	in	r28, 0x3d	; 61
    8d78:	de b7       	in	r29, 0x3e	; 62
    8d7a:	c1 58       	subi	r28, 0x81	; 129
    8d7c:	d1 09       	sbc	r29, r1
    8d7e:	0f b6       	in	r0, 0x3f	; 63
    8d80:	f8 94       	cli
    8d82:	de bf       	out	0x3e, r29	; 62
    8d84:	0f be       	out	0x3f, r0	; 63
    8d86:	cd bf       	out	0x3d, r28	; 61
    8d88:	cf 57       	subi	r28, 0x7F	; 127
    8d8a:	df 4f       	sbci	r29, 0xFF	; 255
    8d8c:	18 82       	st	Y, r1
    8d8e:	c1 58       	subi	r28, 0x81	; 129
    8d90:	d0 40       	sbci	r29, 0x00	; 0
    8d92:	ae 01       	movw	r20, r28
    8d94:	4f 5b       	subi	r20, 0xBF	; 191
    8d96:	5f 4f       	sbci	r21, 0xFF	; 255
    8d98:	be 01       	movw	r22, r28
    8d9a:	6f 57       	subi	r22, 0x7F	; 127
    8d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    8d9e:	0e 94 ce 44 	call	0x899c	; 0x899c <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8da2:	cf 57       	subi	r28, 0x7F	; 127
    8da4:	df 4f       	sbci	r29, 0xFF	; 255
    8da6:	88 81       	ld	r24, Y
    8da8:	c1 58       	subi	r28, 0x81	; 129
    8daa:	d0 40       	sbci	r29, 0x00	; 0
    8dac:	81 30       	cpi	r24, 0x01	; 1
    8dae:	a1 f4       	brne	.+40     	; 0x8dd8 <remote_tds_unsubscibe_topic(unsigned char)+0x66>
    8db0:	6e e6       	ldi	r22, 0x6E	; 110
    8db2:	73 e0       	ldi	r23, 0x03	; 3
    8db4:	ce 01       	movw	r24, r28
    8db6:	01 96       	adiw	r24, 0x01	; 1
    8db8:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    8dbc:	be 01       	movw	r22, r28
    8dbe:	6f 5b       	subi	r22, 0xBF	; 191
    8dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    8dc2:	ce 01       	movw	r24, r28
    8dc4:	01 96       	adiw	r24, 0x01	; 1
    8dc6:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    8dca:	be 01       	movw	r22, r28
    8dcc:	6f 5f       	subi	r22, 0xFF	; 255
    8dce:	7f 4f       	sbci	r23, 0xFF	; 255
    8dd0:	89 e0       	ldi	r24, 0x09	; 9
    8dd2:	9e e0       	ldi	r25, 0x0E	; 14
    8dd4:	0e 94 95 c7 	call	0x18f2a	; 0x18f2a <PubSubClient::unsubscribe(char const*)>
    8dd8:	cf 57       	subi	r28, 0x7F	; 127
    8dda:	df 4f       	sbci	r29, 0xFF	; 255
    8ddc:	0f b6       	in	r0, 0x3f	; 63
    8dde:	f8 94       	cli
    8de0:	de bf       	out	0x3e, r29	; 62
    8de2:	0f be       	out	0x3f, r0	; 63
    8de4:	cd bf       	out	0x3d, r28	; 61
    8de6:	df 91       	pop	r29
    8de8:	cf 91       	pop	r28
    8dea:	08 95       	ret

00008dec <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
    8dec:	1f 93       	push	r17
    8dee:	cf 93       	push	r28
    8df0:	df 93       	push	r29
    8df2:	1f 92       	push	r1
    8df4:	cd b7       	in	r28, 0x3d	; 61
    8df6:	de b7       	in	r29, 0x3e	; 62
    8df8:	10 e0       	ldi	r17, 0x00	; 0
    8dfa:	be 01       	movw	r22, r28
    8dfc:	6f 5f       	subi	r22, 0xFF	; 255
    8dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    8e00:	81 2f       	mov	r24, r17
    8e02:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <remote_tds_get_active(unsigned char, unsigned char*)>
    8e06:	89 81       	ldd	r24, Y+1	; 0x01
    8e08:	88 23       	and	r24, r24
    8e0a:	21 f0       	breq	.+8      	; 0x8e14 <remote_tds_find_free()+0x28>
    8e0c:	1f 5f       	subi	r17, 0xFF	; 255
    8e0e:	1a 30       	cpi	r17, 0x0A	; 10
    8e10:	a1 f7       	brne	.-24     	; 0x8dfa <remote_tds_find_free()+0xe>
    8e12:	1f ef       	ldi	r17, 0xFF	; 255
    8e14:	81 2f       	mov	r24, r17
    8e16:	0f 90       	pop	r0
    8e18:	df 91       	pop	r29
    8e1a:	cf 91       	pop	r28
    8e1c:	1f 91       	pop	r17
    8e1e:	08 95       	ret

00008e20 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>:
_Z21click_rtds_add_sensorjjh():
    8e20:	1f 93       	push	r17
    8e22:	cf 93       	push	r28
    8e24:	df 93       	push	r29
    8e26:	00 d0       	rcall	.+0      	; 0x8e28 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x8>
    8e28:	1f 92       	push	r1
    8e2a:	1f 92       	push	r1
    8e2c:	cd b7       	in	r28, 0x3d	; 61
    8e2e:	de b7       	in	r29, 0x3e	; 62
    8e30:	0e 94 f6 46 	call	0x8dec	; 0x8dec <remote_tds_find_free()>
    8e34:	18 2f       	mov	r17, r24
    8e36:	8f 3f       	cpi	r24, 0xFF	; 255
    8e38:	a1 f0       	breq	.+40     	; 0x8e62 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x42>
    8e3a:	66 e4       	ldi	r22, 0x46	; 70
    8e3c:	7a e5       	ldi	r23, 0x5A	; 90
    8e3e:	ce 01       	movw	r24, r28
    8e40:	01 96       	adiw	r24, 0x01	; 1
    8e42:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    8e46:	70 e0       	ldi	r23, 0x00	; 0
    8e48:	60 e0       	ldi	r22, 0x00	; 0
    8e4a:	87 e6       	ldi	r24, 0x67	; 103
    8e4c:	90 e0       	ldi	r25, 0x00	; 0
    8e4e:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    8e52:	2e e6       	ldi	r18, 0x6E	; 110
    8e54:	37 e4       	ldi	r19, 0x47	; 71
    8e56:	41 2f       	mov	r20, r17
    8e58:	62 e1       	ldi	r22, 0x12	; 18
    8e5a:	ce 01       	movw	r24, r28
    8e5c:	01 96       	adiw	r24, 0x01	; 1
    8e5e:	0e 94 9c 3b 	call	0x7738	; 0x7738 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    8e62:	0f 90       	pop	r0
    8e64:	0f 90       	pop	r0
    8e66:	0f 90       	pop	r0
    8e68:	0f 90       	pop	r0
    8e6a:	0f 90       	pop	r0
    8e6c:	df 91       	pop	r29
    8e6e:	cf 91       	pop	r28
    8e70:	1f 91       	pop	r17
    8e72:	08 95       	ret

00008e74 <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
    8e74:	ef 92       	push	r14
    8e76:	ff 92       	push	r15
    8e78:	0f 93       	push	r16
    8e7a:	1f 93       	push	r17
    8e7c:	cf 93       	push	r28
    8e7e:	df 93       	push	r29
    8e80:	cd b7       	in	r28, 0x3d	; 61
    8e82:	de b7       	in	r29, 0x3e	; 62
    8e84:	63 97       	sbiw	r28, 0x13	; 19
    8e86:	0f b6       	in	r0, 0x3f	; 63
    8e88:	f8 94       	cli
    8e8a:	de bf       	out	0x3e, r29	; 62
    8e8c:	0f be       	out	0x3f, r0	; 63
    8e8e:	cd bf       	out	0x3d, r28	; 61
    8e90:	7c 01       	movw	r14, r24
    8e92:	10 e0       	ldi	r17, 0x00	; 0
    8e94:	0f ef       	ldi	r16, 0xFF	; 255
    8e96:	ae 01       	movw	r20, r28
    8e98:	4f 5f       	subi	r20, 0xFF	; 255
    8e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    8e9c:	be 01       	movw	r22, r28
    8e9e:	6d 5e       	subi	r22, 0xED	; 237
    8ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    8ea2:	81 2f       	mov	r24, r17
    8ea4:	0e 94 ce 44 	call	0x899c	; 0x899c <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8ea8:	be 01       	movw	r22, r28
    8eaa:	6f 5f       	subi	r22, 0xFF	; 255
    8eac:	7f 4f       	sbci	r23, 0xFF	; 255
    8eae:	c7 01       	movw	r24, r14
    8eb0:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    8eb4:	89 2b       	or	r24, r25
    8eb6:	09 f4       	brne	.+2      	; 0x8eba <remote_tds_name_exist(char*)+0x46>
    8eb8:	01 2f       	mov	r16, r17
    8eba:	1f 5f       	subi	r17, 0xFF	; 255
    8ebc:	1a 30       	cpi	r17, 0x0A	; 10
    8ebe:	59 f7       	brne	.-42     	; 0x8e96 <remote_tds_name_exist(char*)+0x22>
    8ec0:	80 2f       	mov	r24, r16
    8ec2:	63 96       	adiw	r28, 0x13	; 19
    8ec4:	0f b6       	in	r0, 0x3f	; 63
    8ec6:	f8 94       	cli
    8ec8:	de bf       	out	0x3e, r29	; 62
    8eca:	0f be       	out	0x3f, r0	; 63
    8ecc:	cd bf       	out	0x3d, r28	; 61
    8ece:	df 91       	pop	r29
    8ed0:	cf 91       	pop	r28
    8ed2:	1f 91       	pop	r17
    8ed4:	0f 91       	pop	r16
    8ed6:	ff 90       	pop	r15
    8ed8:	ef 90       	pop	r14
    8eda:	08 95       	ret

00008edc <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_create_namejjh():
    8edc:	1f 93       	push	r17
    8ede:	cf 93       	push	r28
    8ee0:	df 93       	push	r29
    8ee2:	cd b7       	in	r28, 0x3d	; 61
    8ee4:	de b7       	in	r29, 0x3e	; 62
    8ee6:	62 97       	sbiw	r28, 0x12	; 18
    8ee8:	0f b6       	in	r0, 0x3f	; 63
    8eea:	f8 94       	cli
    8eec:	de bf       	out	0x3e, r29	; 62
    8eee:	0f be       	out	0x3f, r0	; 63
    8ef0:	cd bf       	out	0x3d, r28	; 61
_Z31display_element_get_string_argsv():
    8ef2:	10 91 eb 09 	lds	r17, 0x09EB	; 0x8009eb <dialog_set_string_args>
_Z21menu_rtds_create_namejjh():
    8ef6:	ce 01       	movw	r24, r28
    8ef8:	01 96       	adiw	r24, 0x01	; 1
    8efa:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <display_element_get_string(char*)>
    8efe:	89 81       	ldd	r24, Y+1	; 0x01
    8f00:	88 23       	and	r24, r24
    8f02:	81 f0       	breq	.+32     	; 0x8f24 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
    8f04:	ce 01       	movw	r24, r28
    8f06:	01 96       	adiw	r24, 0x01	; 1
    8f08:	0e 94 3a 47 	call	0x8e74	; 0x8e74 <remote_tds_name_exist(char*)>
    8f0c:	8f 3f       	cpi	r24, 0xFF	; 255
    8f0e:	51 f4       	brne	.+20     	; 0x8f24 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
    8f10:	ae 01       	movw	r20, r28
    8f12:	4f 5f       	subi	r20, 0xFF	; 255
    8f14:	5f 4f       	sbci	r21, 0xFF	; 255
    8f16:	61 e0       	ldi	r22, 0x01	; 1
    8f18:	81 2f       	mov	r24, r17
    8f1a:	0e 94 47 46 	call	0x8c8e	; 0x8c8e <remote_tds_set_complete(unsigned char, unsigned char, char*)>
    8f1e:	81 2f       	mov	r24, r17
    8f20:	0e 94 79 46 	call	0x8cf2	; 0x8cf2 <remote_tds_subscibe_topic(unsigned char)>
    8f24:	62 96       	adiw	r28, 0x12	; 18
    8f26:	0f b6       	in	r0, 0x3f	; 63
    8f28:	f8 94       	cli
    8f2a:	de bf       	out	0x3e, r29	; 62
    8f2c:	0f be       	out	0x3f, r0	; 63
    8f2e:	cd bf       	out	0x3d, r28	; 61
    8f30:	df 91       	pop	r29
    8f32:	cf 91       	pop	r28
    8f34:	1f 91       	pop	r17
    8f36:	08 95       	ret

00008f38 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_update_namejjh():
    8f38:	1f 93       	push	r17
    8f3a:	cf 93       	push	r28
    8f3c:	df 93       	push	r29
    8f3e:	cd b7       	in	r28, 0x3d	; 61
    8f40:	de b7       	in	r29, 0x3e	; 62
    8f42:	62 97       	sbiw	r28, 0x12	; 18
    8f44:	0f b6       	in	r0, 0x3f	; 63
    8f46:	f8 94       	cli
    8f48:	de bf       	out	0x3e, r29	; 62
    8f4a:	0f be       	out	0x3f, r0	; 63
    8f4c:	cd bf       	out	0x3d, r28	; 61
_Z31display_element_get_string_argsv():
    8f4e:	10 91 eb 09 	lds	r17, 0x09EB	; 0x8009eb <dialog_set_string_args>
_Z21menu_rtds_update_namejjh():
    8f52:	ce 01       	movw	r24, r28
    8f54:	01 96       	adiw	r24, 0x01	; 1
    8f56:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <display_element_get_string(char*)>
    8f5a:	89 81       	ldd	r24, Y+1	; 0x01
    8f5c:	88 23       	and	r24, r24
    8f5e:	61 f0       	breq	.+24     	; 0x8f78 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x40>
    8f60:	ce 01       	movw	r24, r28
    8f62:	01 96       	adiw	r24, 0x01	; 1
    8f64:	0e 94 3a 47 	call	0x8e74	; 0x8e74 <remote_tds_name_exist(char*)>
    8f68:	8f 3f       	cpi	r24, 0xFF	; 255
    8f6a:	31 f4       	brne	.+12     	; 0x8f78 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x40>
    8f6c:	be 01       	movw	r22, r28
    8f6e:	6f 5f       	subi	r22, 0xFF	; 255
    8f70:	7f 4f       	sbci	r23, 0xFF	; 255
    8f72:	81 2f       	mov	r24, r17
    8f74:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <remote_tds_set_name(unsigned char, char*)>
    8f78:	62 96       	adiw	r28, 0x12	; 18
    8f7a:	0f b6       	in	r0, 0x3f	; 63
    8f7c:	f8 94       	cli
    8f7e:	de bf       	out	0x3e, r29	; 62
    8f80:	0f be       	out	0x3f, r0	; 63
    8f82:	cd bf       	out	0x3d, r28	; 61
    8f84:	df 91       	pop	r29
    8f86:	cf 91       	pop	r28
    8f88:	1f 91       	pop	r17
    8f8a:	08 95       	ret

00008f8c <remote_tds_set_data(unsigned char, int)>:
_Z19remote_tds_set_datahi():
    8f8c:	1f 93       	push	r17
    8f8e:	cf 93       	push	r28
    8f90:	df 93       	push	r29
    8f92:	8a 30       	cpi	r24, 0x0A	; 10
    8f94:	60 f5       	brcc	.+88     	; 0x8fee <remote_tds_set_data(unsigned char, int)+0x62>
    8f96:	17 2f       	mov	r17, r23
    8f98:	26 2f       	mov	r18, r22
    8f9a:	93 e0       	ldi	r25, 0x03	; 3
    8f9c:	89 9f       	mul	r24, r25
    8f9e:	e0 01       	movw	r28, r0
    8fa0:	11 24       	eor	r1, r1
    8fa2:	ae 01       	movw	r20, r28
    8fa4:	4c 59       	subi	r20, 0x9C	; 156
    8fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    8fa8:	05 2e       	mov	r0, r21
    8faa:	00 0c       	add	r0, r0
    8fac:	66 0b       	sbc	r22, r22
    8fae:	77 0b       	sbc	r23, r23
    8fb0:	87 ed       	ldi	r24, 0xD7	; 215
    8fb2:	9a e0       	ldi	r25, 0x0A	; 10
    8fb4:	0e 94 de ad 	call	0x15bbc	; 0x15bbc <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    8fb8:	ae 01       	movw	r20, r28
    8fba:	4b 59       	subi	r20, 0x9B	; 155
    8fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    8fbe:	05 2e       	mov	r0, r21
    8fc0:	00 0c       	add	r0, r0
    8fc2:	66 0b       	sbc	r22, r22
    8fc4:	77 0b       	sbc	r23, r23
    8fc6:	21 2f       	mov	r18, r17
    8fc8:	87 ed       	ldi	r24, 0xD7	; 215
    8fca:	9a e0       	ldi	r25, 0x0A	; 10
    8fcc:	0e 94 de ad 	call	0x15bbc	; 0x15bbc <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    8fd0:	ae 01       	movw	r20, r28
    8fd2:	4a 59       	subi	r20, 0x9A	; 154
    8fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    8fd6:	05 2e       	mov	r0, r21
    8fd8:	00 0c       	add	r0, r0
    8fda:	66 0b       	sbc	r22, r22
    8fdc:	77 0b       	sbc	r23, r23
    8fde:	20 e0       	ldi	r18, 0x00	; 0
    8fe0:	87 ed       	ldi	r24, 0xD7	; 215
    8fe2:	9a e0       	ldi	r25, 0x0A	; 10
    8fe4:	df 91       	pop	r29
    8fe6:	cf 91       	pop	r28
    8fe8:	1f 91       	pop	r17
    8fea:	0c 94 de ad 	jmp	0x15bbc	; 0x15bbc <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    8fee:	df 91       	pop	r29
    8ff0:	cf 91       	pop	r28
    8ff2:	1f 91       	pop	r17
    8ff4:	08 95       	ret

00008ff6 <remote_tds_get_data(unsigned char)>:
_Z19remote_tds_get_datah():
    8ff6:	0f 93       	push	r16
    8ff8:	1f 93       	push	r17
    8ffa:	cf 93       	push	r28
    8ffc:	df 93       	push	r29
    8ffe:	8a 30       	cpi	r24, 0x0A	; 10
    9000:	30 f5       	brcc	.+76     	; 0x904e <remote_tds_get_data(unsigned char)+0x58>
    9002:	93 e0       	ldi	r25, 0x03	; 3
    9004:	89 9f       	mul	r24, r25
    9006:	80 01       	movw	r16, r0
    9008:	11 24       	eor	r1, r1
    900a:	a8 01       	movw	r20, r16
    900c:	4b 59       	subi	r20, 0x9B	; 155
    900e:	5f 4f       	sbci	r21, 0xFF	; 255
    9010:	05 2e       	mov	r0, r21
    9012:	00 0c       	add	r0, r0
    9014:	66 0b       	sbc	r22, r22
    9016:	77 0b       	sbc	r23, r23
    9018:	87 ed       	ldi	r24, 0xD7	; 215
    901a:	9a e0       	ldi	r25, 0x0A	; 10
    901c:	0e 94 b9 ad 	call	0x15b72	; 0x15b72 <SRAM_23LC::readByte(unsigned long)>
    9020:	c8 2f       	mov	r28, r24
    9022:	d0 e0       	ldi	r29, 0x00	; 0
    9024:	dc 2f       	mov	r29, r28
    9026:	cc 27       	eor	r28, r28
    9028:	a8 01       	movw	r20, r16
    902a:	4c 59       	subi	r20, 0x9C	; 156
    902c:	5f 4f       	sbci	r21, 0xFF	; 255
    902e:	05 2e       	mov	r0, r21
    9030:	00 0c       	add	r0, r0
    9032:	66 0b       	sbc	r22, r22
    9034:	77 0b       	sbc	r23, r23
    9036:	87 ed       	ldi	r24, 0xD7	; 215
    9038:	9a e0       	ldi	r25, 0x0A	; 10
    903a:	0e 94 b9 ad 	call	0x15b72	; 0x15b72 <SRAM_23LC::readByte(unsigned long)>
    903e:	8c 0f       	add	r24, r28
    9040:	9d 2f       	mov	r25, r29
    9042:	91 1d       	adc	r25, r1
    9044:	df 91       	pop	r29
    9046:	cf 91       	pop	r28
    9048:	1f 91       	pop	r17
    904a:	0f 91       	pop	r16
    904c:	08 95       	ret
    904e:	90 e0       	ldi	r25, 0x00	; 0
    9050:	80 e0       	ldi	r24, 0x00	; 0
    9052:	f8 cf       	rjmp	.-16     	; 0x9044 <remote_tds_get_data(unsigned char)+0x4e>

00009054 <remote_tds_get_last_update(unsigned char)>:
_Z26remote_tds_get_last_updateh():
    9054:	8a 30       	cpi	r24, 0x0A	; 10
    9056:	70 f4       	brcc	.+28     	; 0x9074 <remote_tds_get_last_update(unsigned char)+0x20>
    9058:	93 e0       	ldi	r25, 0x03	; 3
    905a:	89 9f       	mul	r24, r25
    905c:	a0 01       	movw	r20, r0
    905e:	11 24       	eor	r1, r1
    9060:	4a 59       	subi	r20, 0x9A	; 154
    9062:	5f 4f       	sbci	r21, 0xFF	; 255
    9064:	05 2e       	mov	r0, r21
    9066:	00 0c       	add	r0, r0
    9068:	66 0b       	sbc	r22, r22
    906a:	77 0b       	sbc	r23, r23
    906c:	87 ed       	ldi	r24, 0xD7	; 215
    906e:	9a e0       	ldi	r25, 0x0A	; 10
    9070:	0c 94 b9 ad 	jmp	0x15b72	; 0x15b72 <SRAM_23LC::readByte(unsigned long)>
    9074:	8f ef       	ldi	r24, 0xFF	; 255
    9076:	08 95       	ret

00009078 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
    9078:	3f 92       	push	r3
    907a:	4f 92       	push	r4
    907c:	5f 92       	push	r5
    907e:	6f 92       	push	r6
    9080:	7f 92       	push	r7
    9082:	8f 92       	push	r8
    9084:	9f 92       	push	r9
    9086:	af 92       	push	r10
    9088:	bf 92       	push	r11
    908a:	cf 92       	push	r12
    908c:	df 92       	push	r13
    908e:	ef 92       	push	r14
    9090:	ff 92       	push	r15
    9092:	0f 93       	push	r16
    9094:	1f 93       	push	r17
    9096:	cf 93       	push	r28
    9098:	df 93       	push	r29
    909a:	cd b7       	in	r28, 0x3d	; 61
    909c:	de b7       	in	r29, 0x3e	; 62
    909e:	cd 54       	subi	r28, 0x4D	; 77
    90a0:	d1 09       	sbc	r29, r1
    90a2:	0f b6       	in	r0, 0x3f	; 63
    90a4:	f8 94       	cli
    90a6:	de bf       	out	0x3e, r29	; 62
    90a8:	0f be       	out	0x3f, r0	; 63
    90aa:	cd bf       	out	0x3d, r28	; 61
    90ac:	3c 01       	movw	r6, r24
    90ae:	4b 01       	movw	r8, r22
    90b0:	5a 01       	movw	r10, r20
    90b2:	89 01       	movw	r16, r18
    90b4:	de 2c       	mov	r13, r14
    90b6:	70 e0       	ldi	r23, 0x00	; 0
    90b8:	60 e0       	ldi	r22, 0x00	; 0
    90ba:	85 e1       	ldi	r24, 0x15	; 21
    90bc:	9c e0       	ldi	r25, 0x0C	; 12
    90be:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    90c2:	08 0d       	add	r16, r8
    90c4:	19 1d       	adc	r17, r9
    90c6:	93 01       	movw	r18, r6
    90c8:	2a 0d       	add	r18, r10
    90ca:	3b 1d       	adc	r19, r11
    90cc:	a4 01       	movw	r20, r8
    90ce:	b3 01       	movw	r22, r6
    90d0:	85 e1       	ldi	r24, 0x15	; 21
    90d2:	9c e0       	ldi	r25, 0x0C	; 12
    90d4:	0e 94 d5 96 	call	0x12daa	; 0x12daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    90d8:	ae 01       	movw	r20, r28
    90da:	45 5c       	subi	r20, 0xC5	; 197
    90dc:	5f 4f       	sbci	r21, 0xFF	; 255
    90de:	be 01       	movw	r22, r28
    90e0:	63 5b       	subi	r22, 0xB3	; 179
    90e2:	7f 4f       	sbci	r23, 0xFF	; 255
    90e4:	8e 2d       	mov	r24, r14
    90e6:	0e 94 ce 44 	call	0x899c	; 0x899c <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    90ea:	2e 96       	adiw	r28, 0x0e	; 14
    90ec:	3f ac       	ldd	r3, Y+63	; 0x3f
    90ee:	2e 97       	sbiw	r28, 0x0e	; 14
    90f0:	81 e0       	ldi	r24, 0x01	; 1
    90f2:	38 12       	cpse	r3, r24
    90f4:	a9 c0       	rjmp	.+338    	; 0x9248 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1d0>
    90f6:	6b ec       	ldi	r22, 0xCB	; 203
    90f8:	79 e5       	ldi	r23, 0x59	; 89
    90fa:	ce 01       	movw	r24, r28
    90fc:	01 96       	adiw	r24, 0x01	; 1
    90fe:	5c 01       	movw	r10, r24
    9100:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    9104:	23 01       	movw	r4, r6
    9106:	95 e0       	ldi	r25, 0x05	; 5
    9108:	49 0e       	add	r4, r25
    910a:	51 1c       	adc	r5, r1
    910c:	c1 2c       	mov	r12, r1
    910e:	ee 24       	eor	r14, r14
    9110:	ea 94       	dec	r14
    9112:	fe 2c       	mov	r15, r14
    9114:	10 e0       	ldi	r17, 0x00	; 0
    9116:	00 e0       	ldi	r16, 0x00	; 0
    9118:	22 e0       	ldi	r18, 0x02	; 2
    911a:	a4 01       	movw	r20, r8
    911c:	46 5f       	subi	r20, 0xF6	; 246
    911e:	5f 4f       	sbci	r21, 0xFF	; 255
    9120:	b2 01       	movw	r22, r4
    9122:	c5 01       	movw	r24, r10
    9124:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    9128:	be 01       	movw	r22, r28
    912a:	65 5c       	subi	r22, 0xC5	; 197
    912c:	7f 4f       	sbci	r23, 0xFF	; 255
    912e:	c5 01       	movw	r24, r10
    9130:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    9134:	b3 01       	movw	r22, r6
    9136:	6c 5e       	subi	r22, 0xEC	; 236
    9138:	7f 4f       	sbci	r23, 0xFF	; 255
    913a:	22 e0       	ldi	r18, 0x02	; 2
    913c:	a4 01       	movw	r20, r8
    913e:	42 5e       	subi	r20, 0xE2	; 226
    9140:	5f 4f       	sbci	r21, 0xFF	; 255
    9142:	c5 01       	movw	r24, r10
    9144:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    9148:	8d 2d       	mov	r24, r13
    914a:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <remote_tds_get_data(unsigned char)>
    914e:	bc 01       	movw	r22, r24
    9150:	99 0f       	add	r25, r25
    9152:	88 0b       	sbc	r24, r24
    9154:	99 0b       	sbc	r25, r25
    9156:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
    915a:	20 e0       	ldi	r18, 0x00	; 0
    915c:	30 e0       	ldi	r19, 0x00	; 0
    915e:	4a e7       	ldi	r20, 0x7A	; 122
    9160:	54 e4       	ldi	r21, 0x44	; 68
    9162:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
    9166:	85 01       	movw	r16, r10
    9168:	22 e0       	ldi	r18, 0x02	; 2
    916a:	44 e0       	ldi	r20, 0x04	; 4
    916c:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    9170:	6d ef       	ldi	r22, 0xFD	; 253
    9172:	77 e0       	ldi	r23, 0x07	; 7
    9174:	c5 01       	movw	r24, r10
    9176:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    917a:	3e 01       	movw	r6, r28
    917c:	81 e2       	ldi	r24, 0x21	; 33
    917e:	68 0e       	add	r6, r24
    9180:	71 1c       	adc	r7, r1
    9182:	61 e1       	ldi	r22, 0x11	; 17
    9184:	7b e5       	ldi	r23, 0x5B	; 91
    9186:	c3 01       	movw	r24, r6
    9188:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    918c:	b5 01       	movw	r22, r10
    918e:	c3 01       	movw	r24, r6
    9190:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    9194:	10 e0       	ldi	r17, 0x00	; 0
    9196:	00 e0       	ldi	r16, 0x00	; 0
    9198:	22 e0       	ldi	r18, 0x02	; 2
    919a:	a4 01       	movw	r20, r8
    919c:	44 5c       	subi	r20, 0xC4	; 196
    919e:	5f 4f       	sbci	r21, 0xFF	; 255
    91a0:	b2 01       	movw	r22, r4
    91a2:	c3 01       	movw	r24, r6
    91a4:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    91a8:	8d 2d       	mov	r24, r13
    91aa:	0e 94 2a 48 	call	0x9054	; 0x9054 <remote_tds_get_last_update(unsigned char)>
    91ae:	d8 2e       	mov	r13, r24
    91b0:	6e ea       	ldi	r22, 0xAE	; 174
    91b2:	79 e5       	ldi	r23, 0x59	; 89
    91b4:	c3 01       	movw	r24, r6
    91b6:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    91ba:	1f 92       	push	r1
    91bc:	df 92       	push	r13
    91be:	7f 92       	push	r7
    91c0:	6f 92       	push	r6
    91c2:	83 e4       	ldi	r24, 0x43	; 67
    91c4:	93 e0       	ldi	r25, 0x03	; 3
    91c6:	9f 93       	push	r25
    91c8:	8f 93       	push	r24
    91ca:	bf 92       	push	r11
    91cc:	af 92       	push	r10
    91ce:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    91d2:	21 e0       	ldi	r18, 0x01	; 1
    91d4:	a4 01       	movw	r20, r8
    91d6:	40 5b       	subi	r20, 0xB0	; 176
    91d8:	5f 4f       	sbci	r21, 0xFF	; 255
    91da:	b2 01       	movw	r22, r4
    91dc:	c5 01       	movw	r24, r10
    91de:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    91e2:	0f b6       	in	r0, 0x3f	; 63
    91e4:	f8 94       	cli
    91e6:	de bf       	out	0x3e, r29	; 62
    91e8:	0f be       	out	0x3f, r0	; 63
    91ea:	cd bf       	out	0x3d, r28	; 61
    91ec:	99 ef       	ldi	r25, 0xF9	; 249
    91ee:	9d 15       	cp	r25, r13
    91f0:	08 f4       	brcc	.+2      	; 0x91f4 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x17c>
    91f2:	43 c0       	rjmp	.+134    	; 0x927a <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x202>
    91f4:	2e 96       	adiw	r28, 0x0e	; 14
    91f6:	3f ae       	std	Y+63, r3	; 0x3f
    91f8:	2e 97       	sbiw	r28, 0x0e	; 14
    91fa:	64 ec       	ldi	r22, 0xC4	; 196
    91fc:	79 e5       	ldi	r23, 0x59	; 89
    91fe:	c3 01       	movw	r24, r6
    9200:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    9204:	2e 96       	adiw	r28, 0x0e	; 14
    9206:	8f ad       	ldd	r24, Y+63	; 0x3f
    9208:	2e 97       	sbiw	r28, 0x0e	; 14
    920a:	1f 92       	push	r1
    920c:	8f 93       	push	r24
    920e:	7f 92       	push	r7
    9210:	6f 92       	push	r6
    9212:	83 e4       	ldi	r24, 0x43	; 67
    9214:	93 e0       	ldi	r25, 0x03	; 3
    9216:	9f 93       	push	r25
    9218:	8f 93       	push	r24
    921a:	bf 92       	push	r11
    921c:	af 92       	push	r10
    921e:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    9222:	a4 01       	movw	r20, r8
    9224:	4c 59       	subi	r20, 0x9C	; 156
    9226:	5f 4f       	sbci	r21, 0xFF	; 255
    9228:	c1 2c       	mov	r12, r1
    922a:	ee 24       	eor	r14, r14
    922c:	ea 94       	dec	r14
    922e:	fe 2c       	mov	r15, r14
    9230:	10 e0       	ldi	r17, 0x00	; 0
    9232:	00 e0       	ldi	r16, 0x00	; 0
    9234:	22 e0       	ldi	r18, 0x02	; 2
    9236:	b2 01       	movw	r22, r4
    9238:	c5 01       	movw	r24, r10
    923a:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    923e:	0f b6       	in	r0, 0x3f	; 63
    9240:	f8 94       	cli
    9242:	de bf       	out	0x3e, r29	; 62
    9244:	0f be       	out	0x3f, r0	; 63
    9246:	cd bf       	out	0x3d, r28	; 61
    9248:	c3 5b       	subi	r28, 0xB3	; 179
    924a:	df 4f       	sbci	r29, 0xFF	; 255
    924c:	0f b6       	in	r0, 0x3f	; 63
    924e:	f8 94       	cli
    9250:	de bf       	out	0x3e, r29	; 62
    9252:	0f be       	out	0x3f, r0	; 63
    9254:	cd bf       	out	0x3d, r28	; 61
    9256:	df 91       	pop	r29
    9258:	cf 91       	pop	r28
    925a:	1f 91       	pop	r17
    925c:	0f 91       	pop	r16
    925e:	ff 90       	pop	r15
    9260:	ef 90       	pop	r14
    9262:	df 90       	pop	r13
    9264:	cf 90       	pop	r12
    9266:	bf 90       	pop	r11
    9268:	af 90       	pop	r10
    926a:	9f 90       	pop	r9
    926c:	8f 90       	pop	r8
    926e:	7f 90       	pop	r7
    9270:	6f 90       	pop	r6
    9272:	5f 90       	pop	r5
    9274:	4f 90       	pop	r4
    9276:	3f 90       	pop	r3
    9278:	08 95       	ret
    927a:	2e 96       	adiw	r28, 0x0e	; 14
    927c:	1f ae       	std	Y+63, r1	; 0x3f
    927e:	2e 97       	sbiw	r28, 0x0e	; 14
    9280:	bc cf       	rjmp	.-136    	; 0x91fa <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x182>

00009282 <remote_tds_inc_last_update(unsigned char)>:
_Z26remote_tds_inc_last_updateh():
    9282:	cf 92       	push	r12
    9284:	df 92       	push	r13
    9286:	ef 92       	push	r14
    9288:	ff 92       	push	r15
    928a:	8a 30       	cpi	r24, 0x0A	; 10
    928c:	d8 f4       	brcc	.+54     	; 0x92c4 <remote_tds_inc_last_update(unsigned char)+0x42>
    928e:	93 e0       	ldi	r25, 0x03	; 3
    9290:	89 9f       	mul	r24, r25
    9292:	60 01       	movw	r12, r0
    9294:	11 24       	eor	r1, r1
    9296:	86 e6       	ldi	r24, 0x66	; 102
    9298:	c8 0e       	add	r12, r24
    929a:	d1 1c       	adc	r13, r1
    929c:	0d 2c       	mov	r0, r13
    929e:	00 0c       	add	r0, r0
    92a0:	ee 08       	sbc	r14, r14
    92a2:	ff 08       	sbc	r15, r15
    92a4:	b7 01       	movw	r22, r14
    92a6:	a6 01       	movw	r20, r12
    92a8:	87 ed       	ldi	r24, 0xD7	; 215
    92aa:	9a e0       	ldi	r25, 0x0A	; 10
    92ac:	0e 94 b9 ad 	call	0x15b72	; 0x15b72 <SRAM_23LC::readByte(unsigned long)>
    92b0:	8a 3f       	cpi	r24, 0xFA	; 250
    92b2:	08 f4       	brcc	.+2      	; 0x92b6 <remote_tds_inc_last_update(unsigned char)+0x34>
    92b4:	8f 5f       	subi	r24, 0xFF	; 255
    92b6:	28 2f       	mov	r18, r24
    92b8:	b7 01       	movw	r22, r14
    92ba:	a6 01       	movw	r20, r12
    92bc:	87 ed       	ldi	r24, 0xD7	; 215
    92be:	9a e0       	ldi	r25, 0x0A	; 10
    92c0:	0e 94 de ad 	call	0x15bbc	; 0x15bbc <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    92c4:	ff 90       	pop	r15
    92c6:	ef 90       	pop	r14
    92c8:	df 90       	pop	r13
    92ca:	cf 90       	pop	r12
    92cc:	08 95       	ret

000092ce <remote_tds_update_last_update()>:
_Z29remote_tds_update_last_updatev():
    92ce:	1f 93       	push	r17
    92d0:	cf 93       	push	r28
    92d2:	df 93       	push	r29
    92d4:	1f 92       	push	r1
    92d6:	cd b7       	in	r28, 0x3d	; 61
    92d8:	de b7       	in	r29, 0x3e	; 62
    92da:	10 e0       	ldi	r17, 0x00	; 0
    92dc:	be 01       	movw	r22, r28
    92de:	6f 5f       	subi	r22, 0xFF	; 255
    92e0:	7f 4f       	sbci	r23, 0xFF	; 255
    92e2:	81 2f       	mov	r24, r17
    92e4:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <remote_tds_get_active(unsigned char, unsigned char*)>
    92e8:	89 81       	ldd	r24, Y+1	; 0x01
    92ea:	81 30       	cpi	r24, 0x01	; 1
    92ec:	19 f4       	brne	.+6      	; 0x92f4 <remote_tds_update_last_update()+0x26>
    92ee:	81 2f       	mov	r24, r17
    92f0:	0e 94 41 49 	call	0x9282	; 0x9282 <remote_tds_inc_last_update(unsigned char)>
    92f4:	1f 5f       	subi	r17, 0xFF	; 255
    92f6:	1a 30       	cpi	r17, 0x0A	; 10
    92f8:	89 f7       	brne	.-30     	; 0x92dc <remote_tds_update_last_update()+0xe>
    92fa:	0f 90       	pop	r0
    92fc:	df 91       	pop	r29
    92fe:	cf 91       	pop	r28
    9300:	1f 91       	pop	r17
    9302:	08 95       	ret

00009304 <set_default_ring(unsigned char)>:
_Z16set_default_ringh():
    9304:	68 2f       	mov	r22, r24
    9306:	8c e5       	ldi	r24, 0x5C	; 92
    9308:	90 e0       	ldi	r25, 0x00	; 0
    930a:	0c 94 d0 37 	jmp	0x6fa0	; 0x6fa0 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>

0000930e <get_default_ring()>:
_Z16get_default_ringv():
    930e:	8c e5       	ldi	r24, 0x5C	; 92
    9310:	90 e0       	ldi	r25, 0x00	; 0
    9312:	0c 94 ce 37 	jmp	0x6f9c	; 0x6f9c <EEPROMClass::read(int) [clone .isra.6]>

00009316 <set_default_show_temp(unsigned char)>:
_Z21set_default_show_temph():
    9316:	68 2f       	mov	r22, r24
    9318:	8d e5       	ldi	r24, 0x5D	; 93
    931a:	90 e0       	ldi	r25, 0x00	; 0
    931c:	0c 94 d0 37 	jmp	0x6fa0	; 0x6fa0 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>

00009320 <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_show_default_tempjjh():
    9320:	84 2f       	mov	r24, r20
    9322:	40 93 9d 0a 	sts	0x0A9D, r20	; 0x800a9d <default_show_temp>
    9326:	0c 94 8b 49 	jmp	0x9316	; 0x9316 <set_default_show_temp(unsigned char)>

0000932a <get_default_show_temp()>:
_Z21get_default_show_tempv():
    932a:	8d e5       	ldi	r24, 0x5D	; 93
    932c:	90 e0       	ldi	r25, 0x00	; 0
    932e:	0c 94 ce 37 	jmp	0x6f9c	; 0x6f9c <EEPROMClass::read(int) [clone .isra.6]>

00009332 <tds_extended_memory_store()>:
_Z25tds_extended_memory_storev():
    9332:	1f 93       	push	r17
    9334:	cf 93       	push	r28
    9336:	df 93       	push	r29
    9338:	cd b7       	in	r28, 0x3d	; 61
    933a:	de b7       	in	r29, 0x3e	; 62
    933c:	66 97       	sbiw	r28, 0x16	; 22
    933e:	0f b6       	in	r0, 0x3f	; 63
    9340:	f8 94       	cli
    9342:	de bf       	out	0x3e, r29	; 62
    9344:	0f be       	out	0x3f, r0	; 63
    9346:	cd bf       	out	0x3d, r28	; 61
    9348:	10 e0       	ldi	r17, 0x00	; 0
    934a:	be 01       	movw	r22, r28
    934c:	6f 5f       	subi	r22, 0xFF	; 255
    934e:	7f 4f       	sbci	r23, 0xFF	; 255
    9350:	81 2f       	mov	r24, r17
    9352:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    9356:	1f 5f       	subi	r17, 0xFF	; 255
    9358:	16 30       	cpi	r17, 0x06	; 6
    935a:	b9 f7       	brne	.-18     	; 0x934a <tds_extended_memory_store()+0x18>
    935c:	66 96       	adiw	r28, 0x16	; 22
    935e:	0f b6       	in	r0, 0x3f	; 63
    9360:	f8 94       	cli
    9362:	de bf       	out	0x3e, r29	; 62
    9364:	0f be       	out	0x3f, r0	; 63
    9366:	cd bf       	out	0x3d, r28	; 61
    9368:	df 91       	pop	r29
    936a:	cf 91       	pop	r28
    936c:	1f 91       	pop	r17
    936e:	08 95       	ret

00009370 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
    9370:	0f 93       	push	r16
    9372:	1f 93       	push	r17
    9374:	cf 93       	push	r28
    9376:	df 93       	push	r29
    9378:	cd b7       	in	r28, 0x3d	; 61
    937a:	de b7       	in	r29, 0x3e	; 62
    937c:	a4 97       	sbiw	r28, 0x24	; 36
    937e:	0f b6       	in	r0, 0x3f	; 63
    9380:	f8 94       	cli
    9382:	de bf       	out	0x3e, r29	; 62
    9384:	0f be       	out	0x3f, r0	; 63
    9386:	cd bf       	out	0x3d, r28	; 61
    9388:	89 e0       	ldi	r24, 0x09	; 9
    938a:	9e e0       	ldi	r25, 0x0E	; 14
    938c:	0e 94 a2 c3 	call	0x18744	; 0x18744 <PubSubClient::connected()>
    9390:	81 11       	cpse	r24, r1
    9392:	98 c0       	rjmp	.+304    	; 0x94c4 <mqtt_reconnect()+0x154>
    9394:	ce 01       	movw	r24, r28
    9396:	4b 96       	adiw	r24, 0x1b	; 27
    9398:	0e 94 0d 86 	call	0x10c1a	; 0x10c1a <device_get_name(char*)>
    939c:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
    93a0:	00 91 c4 0a 	lds	r16, 0x0AC4	; 0x800ac4 <lastmqttconnect>
    93a4:	10 91 c5 0a 	lds	r17, 0x0AC5	; 0x800ac5 <lastmqttconnect+0x1>
    93a8:	20 91 c6 0a 	lds	r18, 0x0AC6	; 0x800ac6 <lastmqttconnect+0x2>
    93ac:	30 91 c7 0a 	lds	r19, 0x0AC7	; 0x800ac7 <lastmqttconnect+0x3>
    93b0:	06 17       	cp	r16, r22
    93b2:	17 07       	cpc	r17, r23
    93b4:	28 07       	cpc	r18, r24
    93b6:	39 07       	cpc	r19, r25
    93b8:	0c f0       	brlt	.+2      	; 0x93bc <mqtt_reconnect()+0x4c>
    93ba:	84 c0       	rjmp	.+264    	; 0x94c4 <mqtt_reconnect()+0x154>
    93bc:	68 57       	subi	r22, 0x78	; 120
    93be:	7c 4e       	sbci	r23, 0xEC	; 236
    93c0:	8f 4f       	sbci	r24, 0xFF	; 255
    93c2:	9f 4f       	sbci	r25, 0xFF	; 255
    93c4:	60 93 c4 0a 	sts	0x0AC4, r22	; 0x800ac4 <lastmqttconnect>
    93c8:	70 93 c5 0a 	sts	0x0AC5, r23	; 0x800ac5 <lastmqttconnect+0x1>
    93cc:	80 93 c6 0a 	sts	0x0AC6, r24	; 0x800ac6 <lastmqttconnect+0x2>
    93d0:	90 93 c7 0a 	sts	0x0AC7, r25	; 0x800ac7 <lastmqttconnect+0x3>
    93d4:	be 01       	movw	r22, r28
    93d6:	65 5e       	subi	r22, 0xE5	; 229
    93d8:	7f 4f       	sbci	r23, 0xFF	; 255
    93da:	89 e0       	ldi	r24, 0x09	; 9
    93dc:	9e e0       	ldi	r25, 0x0E	; 14
    93de:	0e 94 2c c5 	call	0x18a58	; 0x18a58 <PubSubClient::connect(char const*)>
    93e2:	88 23       	and	r24, r24
    93e4:	09 f4       	brne	.+2      	; 0x93e8 <mqtt_reconnect()+0x78>
    93e6:	6e c0       	rjmp	.+220    	; 0x94c4 <mqtt_reconnect()+0x154>
    93e8:	64 ef       	ldi	r22, 0xF4	; 244
    93ea:	78 e5       	ldi	r23, 0x58	; 88
    93ec:	ce 01       	movw	r24, r28
    93ee:	01 96       	adiw	r24, 0x01	; 1
    93f0:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    93f4:	be 01       	movw	r22, r28
    93f6:	65 5e       	subi	r22, 0xE5	; 229
    93f8:	7f 4f       	sbci	r23, 0xFF	; 255
    93fa:	ce 01       	movw	r24, r28
    93fc:	01 96       	adiw	r24, 0x01	; 1
    93fe:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    9402:	6b e7       	ldi	r22, 0x7B	; 123
    9404:	73 e0       	ldi	r23, 0x03	; 3
    9406:	ce 01       	movw	r24, r28
    9408:	01 96       	adiw	r24, 0x01	; 1
    940a:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    940e:	be 01       	movw	r22, r28
    9410:	6f 5f       	subi	r22, 0xFF	; 255
    9412:	7f 4f       	sbci	r23, 0xFF	; 255
    9414:	89 e0       	ldi	r24, 0x09	; 9
    9416:	9e e0       	ldi	r25, 0x0E	; 14
    9418:	0e 94 92 c7 	call	0x18f24	; 0x18f24 <PubSubClient::subscribe(char const*)>
    941c:	64 ef       	ldi	r22, 0xF4	; 244
    941e:	78 e5       	ldi	r23, 0x58	; 88
    9420:	ce 01       	movw	r24, r28
    9422:	01 96       	adiw	r24, 0x01	; 1
    9424:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    9428:	65 e7       	ldi	r22, 0x75	; 117
    942a:	73 e0       	ldi	r23, 0x03	; 3
    942c:	ce 01       	movw	r24, r28
    942e:	01 96       	adiw	r24, 0x01	; 1
    9430:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    9434:	be 01       	movw	r22, r28
    9436:	6f 5f       	subi	r22, 0xFF	; 255
    9438:	7f 4f       	sbci	r23, 0xFF	; 255
    943a:	89 e0       	ldi	r24, 0x09	; 9
    943c:	9e e0       	ldi	r25, 0x0E	; 14
    943e:	0e 94 92 c7 	call	0x18f24	; 0x18f24 <PubSubClient::subscribe(char const*)>
    9442:	10 e0       	ldi	r17, 0x00	; 0
    9444:	81 2f       	mov	r24, r17
    9446:	0e 94 79 46 	call	0x8cf2	; 0x8cf2 <remote_tds_subscibe_topic(unsigned char)>
    944a:	1f 5f       	subi	r17, 0xFF	; 255
    944c:	1a 30       	cpi	r17, 0x0A	; 10
    944e:	d1 f7       	brne	.-12     	; 0x9444 <mqtt_reconnect()+0xd4>
    9450:	6b eb       	ldi	r22, 0xBB	; 187
    9452:	78 e5       	ldi	r23, 0x58	; 88
    9454:	ce 01       	movw	r24, r28
    9456:	01 96       	adiw	r24, 0x01	; 1
    9458:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    945c:	6b e7       	ldi	r22, 0x7B	; 123
    945e:	73 e0       	ldi	r23, 0x03	; 3
    9460:	ce 01       	movw	r24, r28
    9462:	01 96       	adiw	r24, 0x01	; 1
    9464:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    9468:	be 01       	movw	r22, r28
    946a:	6f 5f       	subi	r22, 0xFF	; 255
    946c:	7f 4f       	sbci	r23, 0xFF	; 255
    946e:	89 e0       	ldi	r24, 0x09	; 9
    9470:	9e e0       	ldi	r25, 0x0E	; 14
    9472:	0e 94 92 c7 	call	0x18f24	; 0x18f24 <PubSubClient::subscribe(char const*)>
    9476:	63 ea       	ldi	r22, 0xA3	; 163
    9478:	78 e5       	ldi	r23, 0x58	; 88
    947a:	ce 01       	movw	r24, r28
    947c:	01 96       	adiw	r24, 0x01	; 1
    947e:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    9482:	be 01       	movw	r22, r28
    9484:	6f 5f       	subi	r22, 0xFF	; 255
    9486:	7f 4f       	sbci	r23, 0xFF	; 255
    9488:	89 e0       	ldi	r24, 0x09	; 9
    948a:	9e e0       	ldi	r25, 0x0E	; 14
    948c:	0e 94 92 c7 	call	0x18f24	; 0x18f24 <PubSubClient::subscribe(char const*)>
    9490:	6c e8       	ldi	r22, 0x8C	; 140
    9492:	78 e5       	ldi	r23, 0x58	; 88
    9494:	ce 01       	movw	r24, r28
    9496:	01 96       	adiw	r24, 0x01	; 1
    9498:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    949c:	be 01       	movw	r22, r28
    949e:	6f 5f       	subi	r22, 0xFF	; 255
    94a0:	7f 4f       	sbci	r23, 0xFF	; 255
    94a2:	89 e0       	ldi	r24, 0x09	; 9
    94a4:	9e e0       	ldi	r25, 0x0E	; 14
    94a6:	0e 94 92 c7 	call	0x18f24	; 0x18f24 <PubSubClient::subscribe(char const*)>
    94aa:	6a ec       	ldi	r22, 0xCA	; 202
    94ac:	78 e5       	ldi	r23, 0x58	; 88
    94ae:	ce 01       	movw	r24, r28
    94b0:	01 96       	adiw	r24, 0x01	; 1
    94b2:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    94b6:	be 01       	movw	r22, r28
    94b8:	6f 5f       	subi	r22, 0xFF	; 255
    94ba:	7f 4f       	sbci	r23, 0xFF	; 255
    94bc:	89 e0       	ldi	r24, 0x09	; 9
    94be:	9e e0       	ldi	r25, 0x0E	; 14
    94c0:	0e 94 92 c7 	call	0x18f24	; 0x18f24 <PubSubClient::subscribe(char const*)>
    94c4:	89 e0       	ldi	r24, 0x09	; 9
    94c6:	9e e0       	ldi	r25, 0x0E	; 14
    94c8:	0e 94 1e c8 	call	0x1903c	; 0x1903c <PubSubClient::state()>
    94cc:	a4 96       	adiw	r28, 0x24	; 36
    94ce:	0f b6       	in	r0, 0x3f	; 63
    94d0:	f8 94       	cli
    94d2:	de bf       	out	0x3e, r29	; 62
    94d4:	0f be       	out	0x3f, r0	; 63
    94d6:	cd bf       	out	0x3d, r28	; 61
    94d8:	df 91       	pop	r29
    94da:	cf 91       	pop	r28
    94dc:	1f 91       	pop	r17
    94de:	0f 91       	pop	r16
    94e0:	08 95       	ret

000094e2 <send_mqtt_onewire()>:
_Z17send_mqtt_onewirev():
    94e2:	cf 92       	push	r12
    94e4:	df 92       	push	r13
    94e6:	ef 92       	push	r14
    94e8:	ff 92       	push	r15
    94ea:	0f 93       	push	r16
    94ec:	1f 93       	push	r17
    94ee:	cf 93       	push	r28
    94f0:	df 93       	push	r29
    94f2:	cd b7       	in	r28, 0x3d	; 61
    94f4:	de b7       	in	r29, 0x3e	; 62
    94f6:	c0 54       	subi	r28, 0x40	; 64
    94f8:	d1 09       	sbc	r29, r1
    94fa:	0f b6       	in	r0, 0x3f	; 63
    94fc:	f8 94       	cli
    94fe:	de bf       	out	0x3e, r29	; 62
    9500:	0f be       	out	0x3f, r0	; 63
    9502:	cd bf       	out	0x3d, r28	; 61
    9504:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <Global_HWwirenum>
itoa():
    9508:	4a e0       	ldi	r20, 0x0A	; 10
    950a:	be 01       	movw	r22, r28
    950c:	6f 5f       	subi	r22, 0xFF	; 255
    950e:	7f 4f       	sbci	r23, 0xFF	; 255
    9510:	90 e0       	ldi	r25, 0x00	; 0
    9512:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    9516:	ae 01       	movw	r20, r28
    9518:	4f 5f       	subi	r20, 0xFF	; 255
    951a:	5f 4f       	sbci	r21, 0xFF	; 255
    951c:	6e e7       	ldi	r22, 0x7E	; 126
    951e:	73 e0       	ldi	r23, 0x03	; 3
    9520:	89 e0       	ldi	r24, 0x09	; 9
    9522:	9e e0       	ldi	r25, 0x0E	; 14
    9524:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9528:	f1 2c       	mov	r15, r1
    952a:	8b e0       	ldi	r24, 0x0B	; 11
    952c:	e8 2e       	mov	r14, r24
    952e:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <Global_HWwirenum>
    9532:	f8 16       	cp	r15, r24
    9534:	e8 f5       	brcc	.+122    	; 0x95b0 <send_mqtt_onewire()+0xce>
    9536:	fe 9c       	mul	r15, r14
    9538:	c0 01       	movw	r24, r0
    953a:	11 24       	eor	r1, r1
    953c:	9c 01       	movw	r18, r24
    953e:	21 5a       	subi	r18, 0xA1	; 161
    9540:	3e 4e       	sbci	r19, 0xEE	; 238
    9542:	69 01       	movw	r12, r18
    9544:	00 e1       	ldi	r16, 0x10	; 16
    9546:	28 e0       	ldi	r18, 0x08	; 8
    9548:	a6 01       	movw	r20, r12
    954a:	6a e3       	ldi	r22, 0x3A	; 58
    954c:	ce 01       	movw	r24, r28
    954e:	01 96       	adiw	r24, 0x01	; 1
    9550:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    9554:	8e 01       	movw	r16, r28
    9556:	0f 5f       	subi	r16, 0xFF	; 255
    9558:	1f 4f       	sbci	r17, 0xFF	; 255
    955a:	2a e8       	ldi	r18, 0x8A	; 138
    955c:	33 e0       	ldi	r19, 0x03	; 3
    955e:	4f 2d       	mov	r20, r15
    9560:	6e e8       	ldi	r22, 0x8E	; 142
    9562:	73 e0       	ldi	r23, 0x03	; 3
    9564:	89 e0       	ldi	r24, 0x09	; 9
    9566:	9e e0       	ldi	r25, 0x0E	; 14
    9568:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    956c:	f6 01       	movw	r30, r12
    956e:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
    9570:	4a e0       	ldi	r20, 0x0A	; 10
    9572:	b8 01       	movw	r22, r16
    9574:	90 e0       	ldi	r25, 0x00	; 0
    9576:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    957a:	24 e9       	ldi	r18, 0x94	; 148
    957c:	33 e0       	ldi	r19, 0x03	; 3
    957e:	4f 2d       	mov	r20, r15
    9580:	6e e8       	ldi	r22, 0x8E	; 142
    9582:	73 e0       	ldi	r23, 0x03	; 3
    9584:	89 e0       	ldi	r24, 0x09	; 9
    9586:	9e e0       	ldi	r25, 0x0E	; 14
    9588:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    958c:	f6 01       	movw	r30, r12
    958e:	82 85       	ldd	r24, Z+10	; 0x0a
itoa():
    9590:	4a e0       	ldi	r20, 0x0A	; 10
    9592:	b8 01       	movw	r22, r16
    9594:	90 e0       	ldi	r25, 0x00	; 0
    9596:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    959a:	2d e9       	ldi	r18, 0x9D	; 157
    959c:	33 e0       	ldi	r19, 0x03	; 3
    959e:	4f 2d       	mov	r20, r15
    95a0:	6e e8       	ldi	r22, 0x8E	; 142
    95a2:	73 e0       	ldi	r23, 0x03	; 3
    95a4:	89 e0       	ldi	r24, 0x09	; 9
    95a6:	9e e0       	ldi	r25, 0x0E	; 14
    95a8:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    95ac:	f3 94       	inc	r15
    95ae:	bf cf       	rjmp	.-130    	; 0x952e <send_mqtt_onewire()+0x4c>
    95b0:	c0 5c       	subi	r28, 0xC0	; 192
    95b2:	df 4f       	sbci	r29, 0xFF	; 255
    95b4:	0f b6       	in	r0, 0x3f	; 63
    95b6:	f8 94       	cli
    95b8:	de bf       	out	0x3e, r29	; 62
    95ba:	0f be       	out	0x3f, r0	; 63
    95bc:	cd bf       	out	0x3d, r28	; 61
    95be:	df 91       	pop	r29
    95c0:	cf 91       	pop	r28
    95c2:	1f 91       	pop	r17
    95c4:	0f 91       	pop	r16
    95c6:	ff 90       	pop	r15
    95c8:	ef 90       	pop	r14
    95ca:	df 90       	pop	r13
    95cc:	cf 90       	pop	r12
    95ce:	08 95       	ret

000095d0 <send_mqtt_tds()>:
_Z13send_mqtt_tdsv():
    95d0:	2f 92       	push	r2
    95d2:	3f 92       	push	r3
    95d4:	4f 92       	push	r4
    95d6:	5f 92       	push	r5
    95d8:	6f 92       	push	r6
    95da:	7f 92       	push	r7
    95dc:	8f 92       	push	r8
    95de:	9f 92       	push	r9
    95e0:	af 92       	push	r10
    95e2:	bf 92       	push	r11
    95e4:	cf 92       	push	r12
    95e6:	df 92       	push	r13
    95e8:	ff 92       	push	r15
    95ea:	0f 93       	push	r16
    95ec:	1f 93       	push	r17
    95ee:	cf 93       	push	r28
    95f0:	df 93       	push	r29
    95f2:	cd b7       	in	r28, 0x3d	; 61
    95f4:	de b7       	in	r29, 0x3e	; 62
    95f6:	c6 55       	subi	r28, 0x56	; 86
    95f8:	d1 09       	sbc	r29, r1
    95fa:	0f b6       	in	r0, 0x3f	; 63
    95fc:	f8 94       	cli
    95fe:	de bf       	out	0x3e, r29	; 62
    9600:	0f be       	out	0x3f, r0	; 63
    9602:	cd bf       	out	0x3d, r28	; 61
    9604:	32 ea       	ldi	r19, 0xA2	; 162
    9606:	c3 2e       	mov	r12, r19
    9608:	31 e1       	ldi	r19, 0x11	; 17
    960a:	d3 2e       	mov	r13, r19
    960c:	f1 2c       	mov	r15, r1
    960e:	4a e0       	ldi	r20, 0x0A	; 10
    9610:	a4 2e       	mov	r10, r20
    9612:	b1 2c       	mov	r11, r1
    9614:	54 e6       	ldi	r21, 0x64	; 100
    9616:	25 2e       	mov	r2, r21
    9618:	31 2c       	mov	r3, r1
    961a:	41 2c       	mov	r4, r1
    961c:	51 2c       	mov	r5, r1
    961e:	61 e4       	ldi	r22, 0x41	; 65
    9620:	86 2e       	mov	r8, r22
    9622:	91 2c       	mov	r9, r1
    9624:	8c 0e       	add	r8, r28
    9626:	9d 1e       	adc	r9, r29
    9628:	8c e0       	ldi	r24, 0x0C	; 12
    962a:	88 0e       	add	r8, r24
    962c:	91 1c       	adc	r9, r1
    962e:	71 e4       	ldi	r23, 0x41	; 65
    9630:	67 2e       	mov	r6, r23
    9632:	71 2c       	mov	r7, r1
    9634:	6c 0e       	add	r6, r28
    9636:	7d 1e       	adc	r7, r29
    9638:	ef ef       	ldi	r30, 0xFF	; 255
    963a:	6e 1a       	sub	r6, r30
    963c:	7e 0a       	sbc	r7, r30
    963e:	be 01       	movw	r22, r28
    9640:	6f 5b       	subi	r22, 0xBF	; 191
    9642:	7f 4f       	sbci	r23, 0xFF	; 255
    9644:	8f 2d       	mov	r24, r15
    9646:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    964a:	81 30       	cpi	r24, 0x01	; 1
    964c:	09 f0       	breq	.+2      	; 0x9650 <send_mqtt_tds()+0x80>
    964e:	ba c0       	rjmp	.+372    	; 0x97c4 <send_mqtt_tds()+0x1f4>
    9650:	22 96       	adiw	r28, 0x02	; 2
    9652:	8f ad       	ldd	r24, Y+63	; 0x3f
    9654:	22 97       	sbiw	r28, 0x02	; 2
    9656:	81 30       	cpi	r24, 0x01	; 1
    9658:	09 f0       	breq	.+2      	; 0x965c <send_mqtt_tds()+0x8c>
    965a:	b4 c0       	rjmp	.+360    	; 0x97c4 <send_mqtt_tds()+0x1f4>
    965c:	f6 01       	movw	r30, r12
    965e:	83 8d       	ldd	r24, Z+27	; 0x1b
    9660:	81 30       	cpi	r24, 0x01	; 1
    9662:	09 f0       	breq	.+2      	; 0x9666 <send_mqtt_tds()+0x96>
    9664:	af c0       	rjmp	.+350    	; 0x97c4 <send_mqtt_tds()+0x1f4>
    9666:	85 81       	ldd	r24, Z+5	; 0x05
    9668:	96 81       	ldd	r25, Z+6	; 0x06
    966a:	b5 01       	movw	r22, r10
    966c:	0e 94 1a de 	call	0x1bc34	; 0x1bc34 <__divmodhi4>
    9670:	cb 01       	movw	r24, r22
itoa():
    9672:	4a e0       	ldi	r20, 0x0A	; 10
    9674:	be 01       	movw	r22, r28
    9676:	6f 5f       	subi	r22, 0xFF	; 255
    9678:	7f 4f       	sbci	r23, 0xFF	; 255
    967a:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    967e:	8e 01       	movw	r16, r28
    9680:	0f 5f       	subi	r16, 0xFF	; 255
    9682:	1f 4f       	sbci	r17, 0xFF	; 255
    9684:	25 ea       	ldi	r18, 0xA5	; 165
    9686:	33 e0       	ldi	r19, 0x03	; 3
    9688:	4f 2d       	mov	r20, r15
    968a:	6f ef       	ldi	r22, 0xFF	; 255
    968c:	73 e0       	ldi	r23, 0x03	; 3
    968e:	89 e0       	ldi	r24, 0x09	; 9
    9690:	9e e0       	ldi	r25, 0x0E	; 14
    9692:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9696:	50 e0       	ldi	r21, 0x00	; 0
    9698:	40 e0       	ldi	r20, 0x00	; 0
    969a:	60 e0       	ldi	r22, 0x00	; 0
    969c:	70 e0       	ldi	r23, 0x00	; 0
    969e:	cb 01       	movw	r24, r22
    96a0:	fa 01       	movw	r30, r20
    96a2:	ee 0f       	add	r30, r30
    96a4:	ff 1f       	adc	r31, r31
    96a6:	ec 0d       	add	r30, r12
    96a8:	fd 1d       	adc	r31, r13
    96aa:	07 81       	ldd	r16, Z+7	; 0x07
    96ac:	10 85       	ldd	r17, Z+8	; 0x08
    96ae:	01 2e       	mov	r0, r17
    96b0:	00 0c       	add	r0, r0
    96b2:	22 0b       	sbc	r18, r18
    96b4:	33 0b       	sbc	r19, r19
    96b6:	60 0f       	add	r22, r16
    96b8:	71 1f       	adc	r23, r17
    96ba:	82 1f       	adc	r24, r18
    96bc:	93 1f       	adc	r25, r19
    96be:	4f 5f       	subi	r20, 0xFF	; 255
    96c0:	5f 4f       	sbci	r21, 0xFF	; 255
    96c2:	4a 30       	cpi	r20, 0x0A	; 10
    96c4:	51 05       	cpc	r21, r1
    96c6:	61 f7       	brne	.-40     	; 0x96a0 <send_mqtt_tds()+0xd0>
    96c8:	a2 01       	movw	r20, r4
    96ca:	91 01       	movw	r18, r2
    96cc:	0e 94 50 de 	call	0x1bca0	; 0x1bca0 <__divmodsi4>
    96d0:	c9 01       	movw	r24, r18
itoa():
    96d2:	4a e0       	ldi	r20, 0x0A	; 10
    96d4:	be 01       	movw	r22, r28
    96d6:	6f 5f       	subi	r22, 0xFF	; 255
    96d8:	7f 4f       	sbci	r23, 0xFF	; 255
    96da:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    96de:	8e 01       	movw	r16, r28
    96e0:	0f 5f       	subi	r16, 0xFF	; 255
    96e2:	1f 4f       	sbci	r17, 0xFF	; 255
    96e4:	2a ea       	ldi	r18, 0xAA	; 170
    96e6:	33 e0       	ldi	r19, 0x03	; 3
    96e8:	4f 2d       	mov	r20, r15
    96ea:	6f ef       	ldi	r22, 0xFF	; 255
    96ec:	73 e0       	ldi	r23, 0x03	; 3
    96ee:	89 e0       	ldi	r24, 0x09	; 9
    96f0:	9e e0       	ldi	r25, 0x0E	; 14
    96f2:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    96f6:	b4 01       	movw	r22, r8
    96f8:	c8 01       	movw	r24, r16
    96fa:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    96fe:	23 eb       	ldi	r18, 0xB3	; 179
    9700:	33 e0       	ldi	r19, 0x03	; 3
    9702:	4f 2d       	mov	r20, r15
    9704:	6f ef       	ldi	r22, 0xFF	; 255
    9706:	73 e0       	ldi	r23, 0x03	; 3
    9708:	89 e0       	ldi	r24, 0x09	; 9
    970a:	9e e0       	ldi	r25, 0x0E	; 14
    970c:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
itoa():
    9710:	4a e0       	ldi	r20, 0x0A	; 10
    9712:	b8 01       	movw	r22, r16
    9714:	2d 96       	adiw	r28, 0x0d	; 13
    9716:	8e ad       	ldd	r24, Y+62	; 0x3e
    9718:	9f ad       	ldd	r25, Y+63	; 0x3f
    971a:	2d 97       	sbiw	r28, 0x0d	; 13
    971c:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    9720:	26 ee       	ldi	r18, 0xE6	; 230
    9722:	34 e0       	ldi	r19, 0x04	; 4
    9724:	4f 2d       	mov	r20, r15
    9726:	6f ef       	ldi	r22, 0xFF	; 255
    9728:	73 e0       	ldi	r23, 0x03	; 3
    972a:	89 e0       	ldi	r24, 0x09	; 9
    972c:	9e e0       	ldi	r25, 0x0E	; 14
    972e:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9732:	f6 01       	movw	r30, r12
    9734:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
    9736:	4a e0       	ldi	r20, 0x0A	; 10
    9738:	b8 01       	movw	r22, r16
    973a:	90 e0       	ldi	r25, 0x00	; 0
    973c:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    9740:	28 eb       	ldi	r18, 0xB8	; 184
    9742:	33 e0       	ldi	r19, 0x03	; 3
    9744:	4f 2d       	mov	r20, r15
    9746:	6f ef       	ldi	r22, 0xFF	; 255
    9748:	73 e0       	ldi	r23, 0x03	; 3
    974a:	89 e0       	ldi	r24, 0x09	; 9
    974c:	9e e0       	ldi	r25, 0x0E	; 14
    974e:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9752:	19 82       	std	Y+1, r1	; 0x01
    9754:	00 e1       	ldi	r16, 0x10	; 16
    9756:	28 e0       	ldi	r18, 0x08	; 8
    9758:	a3 01       	movw	r20, r6
    975a:	6a e3       	ldi	r22, 0x3A	; 58
    975c:	ce 01       	movw	r24, r28
    975e:	01 96       	adiw	r24, 0x01	; 1
    9760:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    9764:	8e 01       	movw	r16, r28
    9766:	0f 5f       	subi	r16, 0xFF	; 255
    9768:	1f 4f       	sbci	r17, 0xFF	; 255
    976a:	2a e8       	ldi	r18, 0x8A	; 138
    976c:	33 e0       	ldi	r19, 0x03	; 3
    976e:	4f 2d       	mov	r20, r15
    9770:	6f ef       	ldi	r22, 0xFF	; 255
    9772:	73 e0       	ldi	r23, 0x03	; 3
    9774:	89 e0       	ldi	r24, 0x09	; 9
    9776:	9e e0       	ldi	r25, 0x0E	; 14
    9778:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    977c:	66 96       	adiw	r28, 0x16	; 22
    977e:	8f ad       	ldd	r24, Y+63	; 0x3f
    9780:	66 97       	sbiw	r28, 0x16	; 22
itoa():
    9782:	4a e0       	ldi	r20, 0x0A	; 10
    9784:	b8 01       	movw	r22, r16
    9786:	90 e0       	ldi	r25, 0x00	; 0
    9788:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    978c:	2f eb       	ldi	r18, 0xBF	; 191
    978e:	33 e0       	ldi	r19, 0x03	; 3
    9790:	4f 2d       	mov	r20, r15
    9792:	6f ef       	ldi	r22, 0xFF	; 255
    9794:	73 e0       	ldi	r23, 0x03	; 3
    9796:	89 e0       	ldi	r24, 0x09	; 9
    9798:	9e e0       	ldi	r25, 0x0E	; 14
    979a:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    979e:	80 91 af 0a 	lds	r24, 0x0AAF	; 0x800aaf <uptime>
    97a2:	f6 01       	movw	r30, r12
    97a4:	94 8d       	ldd	r25, Z+28	; 0x1c
itoa():
    97a6:	4a e0       	ldi	r20, 0x0A	; 10
    97a8:	b8 01       	movw	r22, r16
    97aa:	89 1b       	sub	r24, r25
    97ac:	99 0b       	sbc	r25, r25
    97ae:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    97b2:	26 ec       	ldi	r18, 0xC6	; 198
    97b4:	33 e0       	ldi	r19, 0x03	; 3
    97b6:	4f 2d       	mov	r20, r15
    97b8:	6f ef       	ldi	r22, 0xFF	; 255
    97ba:	73 e0       	ldi	r23, 0x03	; 3
    97bc:	89 e0       	ldi	r24, 0x09	; 9
    97be:	9e e0       	ldi	r25, 0x0E	; 14
    97c0:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    97c4:	f3 94       	inc	r15
    97c6:	fe e1       	ldi	r31, 0x1E	; 30
    97c8:	cf 0e       	add	r12, r31
    97ca:	d1 1c       	adc	r13, r1
    97cc:	86 e0       	ldi	r24, 0x06	; 6
    97ce:	f8 12       	cpse	r15, r24
    97d0:	36 cf       	rjmp	.-404    	; 0x963e <send_mqtt_tds()+0x6e>
    97d2:	ca 5a       	subi	r28, 0xAA	; 170
    97d4:	df 4f       	sbci	r29, 0xFF	; 255
    97d6:	0f b6       	in	r0, 0x3f	; 63
    97d8:	f8 94       	cli
    97da:	de bf       	out	0x3e, r29	; 62
    97dc:	0f be       	out	0x3f, r0	; 63
    97de:	cd bf       	out	0x3d, r28	; 61
    97e0:	df 91       	pop	r29
    97e2:	cf 91       	pop	r28
    97e4:	1f 91       	pop	r17
    97e6:	0f 91       	pop	r16
    97e8:	ff 90       	pop	r15
    97ea:	df 90       	pop	r13
    97ec:	cf 90       	pop	r12
    97ee:	bf 90       	pop	r11
    97f0:	af 90       	pop	r10
    97f2:	9f 90       	pop	r9
    97f4:	8f 90       	pop	r8
    97f6:	7f 90       	pop	r7
    97f8:	6f 90       	pop	r6
    97fa:	5f 90       	pop	r5
    97fc:	4f 90       	pop	r4
    97fe:	3f 90       	pop	r3
    9800:	2f 90       	pop	r2
    9802:	08 95       	ret

00009804 <send_mqtt_program()>:
_Z17send_mqtt_programv():
    9804:	af 92       	push	r10
    9806:	bf 92       	push	r11
    9808:	cf 92       	push	r12
    980a:	df 92       	push	r13
    980c:	ef 92       	push	r14
    980e:	ff 92       	push	r15
    9810:	0f 93       	push	r16
    9812:	1f 93       	push	r17
    9814:	cf 93       	push	r28
    9816:	df 93       	push	r29
    9818:	cd b7       	in	r28, 0x3d	; 61
    981a:	de b7       	in	r29, 0x3e	; 62
    981c:	cb 54       	subi	r28, 0x4B	; 75
    981e:	d1 09       	sbc	r29, r1
    9820:	0f b6       	in	r0, 0x3f	; 63
    9822:	f8 94       	cli
    9824:	de bf       	out	0x3e, r29	; 62
    9826:	0f be       	out	0x3f, r0	; 63
    9828:	cd bf       	out	0x3d, r28	; 61
    982a:	b1 2c       	mov	r11, r1
    982c:	8b 2d       	mov	r24, r11
    982e:	0e 94 bd 93 	call	0x1277a	; 0x1277a <thermostat_program_get_active(unsigned char)>
    9832:	a8 2e       	mov	r10, r24
    9834:	8f ef       	ldi	r24, 0xFF	; 255
    9836:	a8 16       	cp	r10, r24
    9838:	09 f4       	brne	.+2      	; 0x983c <send_mqtt_program()+0x38>
    983a:	e9 c0       	rjmp	.+466    	; 0x9a0e <send_mqtt_program()+0x20a>
    983c:	be 01       	movw	r22, r28
    983e:	6f 5f       	subi	r22, 0xFF	; 255
    9840:	7f 4f       	sbci	r23, 0xFF	; 255
    9842:	8b 2d       	mov	r24, r11
    9844:	0e 94 71 93 	call	0x126e2	; 0x126e2 <thermostat_program_get_name(unsigned char, char*)>
    9848:	8e 01       	movw	r16, r28
    984a:	0f 5f       	subi	r16, 0xFF	; 255
    984c:	1f 4f       	sbci	r17, 0xFF	; 255
    984e:	23 eb       	ldi	r18, 0xB3	; 179
    9850:	33 e0       	ldi	r19, 0x03	; 3
    9852:	4b 2d       	mov	r20, r11
    9854:	6f ec       	ldi	r22, 0xCF	; 207
    9856:	73 e0       	ldi	r23, 0x03	; 3
    9858:	89 e0       	ldi	r24, 0x09	; 9
    985a:	9e e0       	ldi	r25, 0x0E	; 14
    985c:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
itoa():
    9860:	4a e0       	ldi	r20, 0x0A	; 10
    9862:	b8 01       	movw	r22, r16
    9864:	8a 2d       	mov	r24, r10
    9866:	90 e0       	ldi	r25, 0x00	; 0
    9868:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z17send_mqtt_programv():
    986c:	24 ed       	ldi	r18, 0xD4	; 212
    986e:	33 e0       	ldi	r19, 0x03	; 3
    9870:	4b 2d       	mov	r20, r11
    9872:	6f ec       	ldi	r22, 0xCF	; 207
    9874:	73 e0       	ldi	r23, 0x03	; 3
    9876:	89 e0       	ldi	r24, 0x09	; 9
    9878:	9e e0       	ldi	r25, 0x0E	; 14
    987a:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    987e:	a1 2c       	mov	r10, r1
    9880:	ce 01       	movw	r24, r28
    9882:	89 5b       	subi	r24, 0xB9	; 185
    9884:	9f 4f       	sbci	r25, 0xFF	; 255
    9886:	6c 01       	movw	r12, r24
    9888:	01 96       	adiw	r24, 0x01	; 1
    988a:	7c 01       	movw	r14, r24
    988c:	8e 01       	movw	r16, r28
    988e:	07 5b       	subi	r16, 0xB7	; 183
    9890:	1f 4f       	sbci	r17, 0xFF	; 255
    9892:	9e 01       	movw	r18, r28
    9894:	26 5b       	subi	r18, 0xB6	; 182
    9896:	3f 4f       	sbci	r19, 0xFF	; 255
    9898:	ae 01       	movw	r20, r28
    989a:	45 5b       	subi	r20, 0xB5	; 181
    989c:	5f 4f       	sbci	r21, 0xFF	; 255
    989e:	6a 2d       	mov	r22, r10
    98a0:	8b 2d       	mov	r24, r11
    98a2:	0e 94 cd 93 	call	0x1279a	; 0x1279a <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
    98a6:	28 96       	adiw	r28, 0x08	; 8
    98a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    98aa:	28 97       	sbiw	r28, 0x08	; 8
    98ac:	81 30       	cpi	r24, 0x01	; 1
    98ae:	09 f0       	breq	.+2      	; 0x98b2 <send_mqtt_program()+0xae>
    98b0:	aa c0       	rjmp	.+340    	; 0x9a06 <send_mqtt_program()+0x202>
    98b2:	2c 96       	adiw	r28, 0x0c	; 12
    98b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    98b6:	2c 97       	sbiw	r28, 0x0c	; 12
itoa():
    98b8:	4a e0       	ldi	r20, 0x0A	; 10
    98ba:	be 01       	movw	r22, r28
    98bc:	6f 5b       	subi	r22, 0xBF	; 191
    98be:	7f 4f       	sbci	r23, 0xFF	; 255
    98c0:	90 e0       	ldi	r25, 0x00	; 0
    98c2:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z17send_mqtt_programv():
    98c6:	be 01       	movw	r22, r28
    98c8:	6f 5b       	subi	r22, 0xBF	; 191
    98ca:	7f 4f       	sbci	r23, 0xFF	; 255
    98cc:	ce 01       	movw	r24, r28
    98ce:	01 96       	adiw	r24, 0x01	; 1
    98d0:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    98d4:	6b ed       	ldi	r22, 0xDB	; 219
    98d6:	73 e0       	ldi	r23, 0x03	; 3
    98d8:	ce 01       	movw	r24, r28
    98da:	01 96       	adiw	r24, 0x01	; 1
    98dc:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    98e0:	2b 96       	adiw	r28, 0x0b	; 11
    98e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    98e4:	2b 97       	sbiw	r28, 0x0b	; 11
itoa():
    98e6:	4a e0       	ldi	r20, 0x0A	; 10
    98e8:	be 01       	movw	r22, r28
    98ea:	6f 5b       	subi	r22, 0xBF	; 191
    98ec:	7f 4f       	sbci	r23, 0xFF	; 255
    98ee:	90 e0       	ldi	r25, 0x00	; 0
    98f0:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z17send_mqtt_programv():
    98f4:	be 01       	movw	r22, r28
    98f6:	6f 5b       	subi	r22, 0xBF	; 191
    98f8:	7f 4f       	sbci	r23, 0xFF	; 255
    98fa:	ce 01       	movw	r24, r28
    98fc:	01 96       	adiw	r24, 0x01	; 1
    98fe:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    9902:	6b ed       	ldi	r22, 0xDB	; 219
    9904:	73 e0       	ldi	r23, 0x03	; 3
    9906:	ce 01       	movw	r24, r28
    9908:	01 96       	adiw	r24, 0x01	; 1
    990a:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    990e:	2a 96       	adiw	r28, 0x0a	; 10
    9910:	8f ad       	ldd	r24, Y+63	; 0x3f
    9912:	2a 97       	sbiw	r28, 0x0a	; 10
itoa():
    9914:	4a e0       	ldi	r20, 0x0A	; 10
    9916:	be 01       	movw	r22, r28
    9918:	6f 5b       	subi	r22, 0xBF	; 191
    991a:	7f 4f       	sbci	r23, 0xFF	; 255
    991c:	90 e0       	ldi	r25, 0x00	; 0
    991e:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z17send_mqtt_programv():
    9922:	be 01       	movw	r22, r28
    9924:	6f 5b       	subi	r22, 0xBF	; 191
    9926:	7f 4f       	sbci	r23, 0xFF	; 255
    9928:	ce 01       	movw	r24, r28
    992a:	01 96       	adiw	r24, 0x01	; 1
    992c:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    9930:	6b ed       	ldi	r22, 0xDB	; 219
    9932:	73 e0       	ldi	r23, 0x03	; 3
    9934:	ce 01       	movw	r24, r28
    9936:	01 96       	adiw	r24, 0x01	; 1
    9938:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    993c:	29 96       	adiw	r28, 0x09	; 9
    993e:	8f ad       	ldd	r24, Y+63	; 0x3f
    9940:	29 97       	sbiw	r28, 0x09	; 9
itoa():
    9942:	4a e0       	ldi	r20, 0x0A	; 10
    9944:	be 01       	movw	r22, r28
    9946:	6f 5b       	subi	r22, 0xBF	; 191
    9948:	7f 4f       	sbci	r23, 0xFF	; 255
    994a:	90 e0       	ldi	r25, 0x00	; 0
    994c:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z17send_mqtt_programv():
    9950:	be 01       	movw	r22, r28
    9952:	6f 5b       	subi	r22, 0xBF	; 191
    9954:	7f 4f       	sbci	r23, 0xFF	; 255
    9956:	ce 01       	movw	r24, r28
    9958:	01 96       	adiw	r24, 0x01	; 1
    995a:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    995e:	ce 01       	movw	r24, r28
    9960:	01 96       	adiw	r24, 0x01	; 1
    9962:	7c 01       	movw	r14, r24
    9964:	0d ec       	ldi	r16, 0xCD	; 205
    9966:	17 e0       	ldi	r17, 0x07	; 7
    9968:	2a 2d       	mov	r18, r10
    996a:	4b 2d       	mov	r20, r11
    996c:	6d ed       	ldi	r22, 0xDD	; 221
    996e:	73 e0       	ldi	r23, 0x03	; 3
    9970:	89 e0       	ldi	r24, 0x09	; 9
    9972:	9e e0       	ldi	r25, 0x0E	; 14
    9974:	0e 94 af 87 	call	0x10f5e	; 0x10f5e <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    9978:	28 96       	adiw	r28, 0x08	; 8
    997a:	8f ad       	ldd	r24, Y+63	; 0x3f
    997c:	28 97       	sbiw	r28, 0x08	; 8
itoa():
    997e:	4a e0       	ldi	r20, 0x0A	; 10
    9980:	be 01       	movw	r22, r28
    9982:	6f 5b       	subi	r22, 0xBF	; 191
    9984:	7f 4f       	sbci	r23, 0xFF	; 255
    9986:	90 e0       	ldi	r25, 0x00	; 0
    9988:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z17send_mqtt_programv():
    998c:	be 01       	movw	r22, r28
    998e:	6f 5b       	subi	r22, 0xBF	; 191
    9990:	7f 4f       	sbci	r23, 0xFF	; 255
    9992:	c7 01       	movw	r24, r14
    9994:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    9998:	04 ed       	ldi	r16, 0xD4	; 212
    999a:	13 e0       	ldi	r17, 0x03	; 3
    999c:	2a 2d       	mov	r18, r10
    999e:	4b 2d       	mov	r20, r11
    99a0:	6d ed       	ldi	r22, 0xDD	; 221
    99a2:	73 e0       	ldi	r23, 0x03	; 3
    99a4:	89 e0       	ldi	r24, 0x09	; 9
    99a6:	9e e0       	ldi	r25, 0x0E	; 14
    99a8:	0e 94 af 87 	call	0x10f5e	; 0x10f5e <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    99ac:	6a 2d       	mov	r22, r10
    99ae:	8b 2d       	mov	r24, r11
    99b0:	0e 94 5c 94 	call	0x128b8	; 0x128b8 <thermostat_program_get_threshold(unsigned char, unsigned char)>
itoa():
    99b4:	4a e0       	ldi	r20, 0x0A	; 10
    99b6:	be 01       	movw	r22, r28
    99b8:	6f 5b       	subi	r22, 0xBF	; 191
    99ba:	7f 4f       	sbci	r23, 0xFF	; 255
    99bc:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z17send_mqtt_programv():
    99c0:	be 01       	movw	r22, r28
    99c2:	6f 5b       	subi	r22, 0xBF	; 191
    99c4:	7f 4f       	sbci	r23, 0xFF	; 255
    99c6:	c7 01       	movw	r24, r14
    99c8:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    99cc:	0b ee       	ldi	r16, 0xEB	; 235
    99ce:	13 e0       	ldi	r17, 0x03	; 3
    99d0:	2a 2d       	mov	r18, r10
    99d2:	4b 2d       	mov	r20, r11
    99d4:	6d ed       	ldi	r22, 0xDD	; 221
    99d6:	73 e0       	ldi	r23, 0x03	; 3
    99d8:	89 e0       	ldi	r24, 0x09	; 9
    99da:	9e e0       	ldi	r25, 0x0E	; 14
    99dc:	0e 94 af 87 	call	0x10f5e	; 0x10f5e <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    99e0:	6a 2d       	mov	r22, r10
    99e2:	8b 2d       	mov	r24, r11
    99e4:	0e 94 9a 94 	call	0x12934	; 0x12934 <thermostat_program_get_week(unsigned char, unsigned char)>
itoa():
    99e8:	4a e0       	ldi	r20, 0x0A	; 10
    99ea:	b7 01       	movw	r22, r14
    99ec:	90 e0       	ldi	r25, 0x00	; 0
    99ee:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z17send_mqtt_programv():
    99f2:	05 ef       	ldi	r16, 0xF5	; 245
    99f4:	13 e0       	ldi	r17, 0x03	; 3
    99f6:	2a 2d       	mov	r18, r10
    99f8:	4b 2d       	mov	r20, r11
    99fa:	6d ed       	ldi	r22, 0xDD	; 221
    99fc:	73 e0       	ldi	r23, 0x03	; 3
    99fe:	89 e0       	ldi	r24, 0x09	; 9
    9a00:	9e e0       	ldi	r25, 0x0E	; 14
    9a02:	0e 94 af 87 	call	0x10f5e	; 0x10f5e <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    9a06:	a3 94       	inc	r10
    9a08:	9b e0       	ldi	r25, 0x0B	; 11
    9a0a:	a9 12       	cpse	r10, r25
    9a0c:	39 cf       	rjmp	.-398    	; 0x9880 <send_mqtt_program()+0x7c>
    9a0e:	b3 94       	inc	r11
    9a10:	88 e0       	ldi	r24, 0x08	; 8
    9a12:	b8 12       	cpse	r11, r24
    9a14:	0b cf       	rjmp	.-490    	; 0x982c <send_mqtt_program()+0x28>
    9a16:	c5 5b       	subi	r28, 0xB5	; 181
    9a18:	df 4f       	sbci	r29, 0xFF	; 255
    9a1a:	0f b6       	in	r0, 0x3f	; 63
    9a1c:	f8 94       	cli
    9a1e:	de bf       	out	0x3e, r29	; 62
    9a20:	0f be       	out	0x3f, r0	; 63
    9a22:	cd bf       	out	0x3d, r28	; 61
    9a24:	df 91       	pop	r29
    9a26:	cf 91       	pop	r28
    9a28:	1f 91       	pop	r17
    9a2a:	0f 91       	pop	r16
    9a2c:	ff 90       	pop	r15
    9a2e:	ef 90       	pop	r14
    9a30:	df 90       	pop	r13
    9a32:	cf 90       	pop	r12
    9a34:	bf 90       	pop	r11
    9a36:	af 90       	pop	r10
    9a38:	08 95       	ret

00009a3a <mqtt_send_pid_variable(unsigned char)>:
_Z22mqtt_send_pid_variableh():
    9a3a:	ff 92       	push	r15
    9a3c:	0f 93       	push	r16
    9a3e:	1f 93       	push	r17
    9a40:	cf 93       	push	r28
    9a42:	df 93       	push	r29
    9a44:	cd b7       	in	r28, 0x3d	; 61
    9a46:	de b7       	in	r29, 0x3e	; 62
    9a48:	a0 97       	sbiw	r28, 0x20	; 32
    9a4a:	0f b6       	in	r0, 0x3f	; 63
    9a4c:	f8 94       	cli
    9a4e:	de bf       	out	0x3e, r29	; 62
    9a50:	0f be       	out	0x3f, r0	; 63
    9a52:	cd bf       	out	0x3d, r28	; 61
    9a54:	f8 2e       	mov	r15, r24
    9a56:	0e 94 08 91 	call	0x12210	; 0x12210 <thermostat_get_pid_p(unsigned char)>
    9a5a:	8e 01       	movw	r16, r28
    9a5c:	0f 5f       	subi	r16, 0xFF	; 255
    9a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    9a60:	22 e0       	ldi	r18, 0x02	; 2
    9a62:	47 e0       	ldi	r20, 0x07	; 7
    9a64:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    9a68:	28 eb       	ldi	r18, 0xB8	; 184
    9a6a:	37 e0       	ldi	r19, 0x07	; 7
    9a6c:	4f 2d       	mov	r20, r15
    9a6e:	6a ef       	ldi	r22, 0xFA	; 250
    9a70:	73 e0       	ldi	r23, 0x03	; 3
    9a72:	89 e0       	ldi	r24, 0x09	; 9
    9a74:	9e e0       	ldi	r25, 0x0E	; 14
    9a76:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9a7a:	8f 2d       	mov	r24, r15
    9a7c:	0e 94 37 91 	call	0x1226e	; 0x1226e <thermostat_get_pid_i(unsigned char)>
    9a80:	22 e0       	ldi	r18, 0x02	; 2
    9a82:	47 e0       	ldi	r20, 0x07	; 7
    9a84:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    9a88:	2f eb       	ldi	r18, 0xBF	; 191
    9a8a:	37 e0       	ldi	r19, 0x07	; 7
    9a8c:	4f 2d       	mov	r20, r15
    9a8e:	6a ef       	ldi	r22, 0xFA	; 250
    9a90:	73 e0       	ldi	r23, 0x03	; 3
    9a92:	89 e0       	ldi	r24, 0x09	; 9
    9a94:	9e e0       	ldi	r25, 0x0E	; 14
    9a96:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9a9a:	8f 2d       	mov	r24, r15
    9a9c:	0e 94 42 91 	call	0x12284	; 0x12284 <thermostat_get_pid_d(unsigned char)>
    9aa0:	22 e0       	ldi	r18, 0x02	; 2
    9aa2:	47 e0       	ldi	r20, 0x07	; 7
    9aa4:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    9aa8:	26 ec       	ldi	r18, 0xC6	; 198
    9aaa:	37 e0       	ldi	r19, 0x07	; 7
    9aac:	4f 2d       	mov	r20, r15
    9aae:	6a ef       	ldi	r22, 0xFA	; 250
    9ab0:	73 e0       	ldi	r23, 0x03	; 3
    9ab2:	89 e0       	ldi	r24, 0x09	; 9
    9ab4:	9e e0       	ldi	r25, 0x0E	; 14
    9ab6:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9aba:	8f 2d       	mov	r24, r15
    9abc:	0e 94 4d 91 	call	0x1229a	; 0x1229a <thermostat_get_pid_time(unsigned char)>
itoa():
    9ac0:	4a e0       	ldi	r20, 0x0A	; 10
    9ac2:	b8 01       	movw	r22, r16
    9ac4:	90 e0       	ldi	r25, 0x00	; 0
    9ac6:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z22mqtt_send_pid_variableh():
    9aca:	2d ec       	ldi	r18, 0xCD	; 205
    9acc:	37 e0       	ldi	r19, 0x07	; 7
    9ace:	4f 2d       	mov	r20, r15
    9ad0:	6a ef       	ldi	r22, 0xFA	; 250
    9ad2:	73 e0       	ldi	r23, 0x03	; 3
    9ad4:	89 e0       	ldi	r24, 0x09	; 9
    9ad6:	9e e0       	ldi	r25, 0x0E	; 14
    9ad8:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9adc:	a0 96       	adiw	r28, 0x20	; 32
    9ade:	0f b6       	in	r0, 0x3f	; 63
    9ae0:	f8 94       	cli
    9ae2:	de bf       	out	0x3e, r29	; 62
    9ae4:	0f be       	out	0x3f, r0	; 63
    9ae6:	cd bf       	out	0x3d, r28	; 61
    9ae8:	df 91       	pop	r29
    9aea:	cf 91       	pop	r28
    9aec:	1f 91       	pop	r17
    9aee:	0f 91       	pop	r16
    9af0:	ff 90       	pop	r15
    9af2:	08 95       	ret

00009af4 <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
    9af4:	ff 92       	push	r15
    9af6:	0f 93       	push	r16
    9af8:	1f 93       	push	r17
    9afa:	cf 93       	push	r28
    9afc:	df 93       	push	r29
    9afe:	cd b7       	in	r28, 0x3d	; 61
    9b00:	de b7       	in	r29, 0x3e	; 62
    9b02:	63 97       	sbiw	r28, 0x13	; 19
    9b04:	0f b6       	in	r0, 0x3f	; 63
    9b06:	f8 94       	cli
    9b08:	de bf       	out	0x3e, r29	; 62
    9b0a:	0f be       	out	0x3f, r0	; 63
    9b0c:	cd bf       	out	0x3d, r28	; 61
    9b0e:	1b 8a       	std	Y+19, r1	; 0x13
    9b10:	f1 2c       	mov	r15, r1
    9b12:	ae 01       	movw	r20, r28
    9b14:	4f 5f       	subi	r20, 0xFF	; 255
    9b16:	5f 4f       	sbci	r21, 0xFF	; 255
    9b18:	be 01       	movw	r22, r28
    9b1a:	6d 5e       	subi	r22, 0xED	; 237
    9b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    9b1e:	8f 2d       	mov	r24, r15
    9b20:	0e 94 ce 44 	call	0x899c	; 0x899c <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    9b24:	8b 89       	ldd	r24, Y+19	; 0x13
    9b26:	81 30       	cpi	r24, 0x01	; 1
    9b28:	e1 f5       	brne	.+120    	; 0x9ba2 <send_mqtt_remote_tds_status()+0xae>
    9b2a:	8e 01       	movw	r16, r28
    9b2c:	0f 5f       	subi	r16, 0xFF	; 255
    9b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    9b30:	23 eb       	ldi	r18, 0xB3	; 179
    9b32:	33 e0       	ldi	r19, 0x03	; 3
    9b34:	4f 2d       	mov	r20, r15
    9b36:	6e ef       	ldi	r22, 0xFE	; 254
    9b38:	73 e0       	ldi	r23, 0x03	; 3
    9b3a:	89 e0       	ldi	r24, 0x09	; 9
    9b3c:	9e e0       	ldi	r25, 0x0E	; 14
    9b3e:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9b42:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
    9b44:	4a e0       	ldi	r20, 0x0A	; 10
    9b46:	b8 01       	movw	r22, r16
    9b48:	90 e0       	ldi	r25, 0x00	; 0
    9b4a:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    9b4e:	24 ed       	ldi	r18, 0xD4	; 212
    9b50:	33 e0       	ldi	r19, 0x03	; 3
    9b52:	4f 2d       	mov	r20, r15
    9b54:	6e ef       	ldi	r22, 0xFE	; 254
    9b56:	73 e0       	ldi	r23, 0x03	; 3
    9b58:	89 e0       	ldi	r24, 0x09	; 9
    9b5a:	9e e0       	ldi	r25, 0x0E	; 14
    9b5c:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9b60:	8f 2d       	mov	r24, r15
    9b62:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <remote_tds_get_data(unsigned char)>
itoa():
    9b66:	4a e0       	ldi	r20, 0x0A	; 10
    9b68:	b8 01       	movw	r22, r16
    9b6a:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    9b6e:	25 ea       	ldi	r18, 0xA5	; 165
    9b70:	33 e0       	ldi	r19, 0x03	; 3
    9b72:	4f 2d       	mov	r20, r15
    9b74:	6e ef       	ldi	r22, 0xFE	; 254
    9b76:	73 e0       	ldi	r23, 0x03	; 3
    9b78:	89 e0       	ldi	r24, 0x09	; 9
    9b7a:	9e e0       	ldi	r25, 0x0E	; 14
    9b7c:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9b80:	8f 2d       	mov	r24, r15
    9b82:	0e 94 2a 48 	call	0x9054	; 0x9054 <remote_tds_get_last_update(unsigned char)>
itoa():
    9b86:	4a e0       	ldi	r20, 0x0A	; 10
    9b88:	b8 01       	movw	r22, r16
    9b8a:	90 e0       	ldi	r25, 0x00	; 0
    9b8c:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    9b90:	23 e0       	ldi	r18, 0x03	; 3
    9b92:	34 e0       	ldi	r19, 0x04	; 4
    9b94:	4f 2d       	mov	r20, r15
    9b96:	6e ef       	ldi	r22, 0xFE	; 254
    9b98:	73 e0       	ldi	r23, 0x03	; 3
    9b9a:	89 e0       	ldi	r24, 0x09	; 9
    9b9c:	9e e0       	ldi	r25, 0x0E	; 14
    9b9e:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9ba2:	f3 94       	inc	r15
    9ba4:	8a e0       	ldi	r24, 0x0A	; 10
    9ba6:	f8 12       	cpse	r15, r24
    9ba8:	b4 cf       	rjmp	.-152    	; 0x9b12 <send_mqtt_remote_tds_status()+0x1e>
    9baa:	63 96       	adiw	r28, 0x13	; 19
    9bac:	0f b6       	in	r0, 0x3f	; 63
    9bae:	f8 94       	cli
    9bb0:	de bf       	out	0x3e, r29	; 62
    9bb2:	0f be       	out	0x3f, r0	; 63
    9bb4:	cd bf       	out	0x3d, r28	; 61
    9bb6:	df 91       	pop	r29
    9bb8:	cf 91       	pop	r28
    9bba:	1f 91       	pop	r17
    9bbc:	0f 91       	pop	r16
    9bbe:	ff 90       	pop	r15
    9bc0:	08 95       	ret

00009bc2 <mqtt_publis_output(unsigned char, unsigned char)>:
_Z18mqtt_publis_outputhh():
    9bc2:	0f 93       	push	r16
    9bc4:	1f 93       	push	r17
    9bc6:	cf 93       	push	r28
    9bc8:	df 93       	push	r29
    9bca:	cd b7       	in	r28, 0x3d	; 61
    9bcc:	de b7       	in	r29, 0x3e	; 62
    9bce:	c8 58       	subi	r28, 0x88	; 136
    9bd0:	d1 09       	sbc	r29, r1
    9bd2:	0f b6       	in	r0, 0x3f	; 63
    9bd4:	f8 94       	cli
    9bd6:	de bf       	out	0x3e, r29	; 62
    9bd8:	0f be       	out	0x3f, r0	; 63
    9bda:	cd bf       	out	0x3d, r28	; 61
    9bdc:	8f 3f       	cpi	r24, 0xFF	; 255
    9bde:	c9 f1       	breq	.+114    	; 0x9c52 <mqtt_publis_output(unsigned char, unsigned char)+0x90>
    9be0:	06 2f       	mov	r16, r22
    9be2:	18 2f       	mov	r17, r24
    9be4:	68 ed       	ldi	r22, 0xD8	; 216
    9be6:	78 e5       	ldi	r23, 0x58	; 88
    9be8:	ce 01       	movw	r24, r28
    9bea:	8f 5b       	subi	r24, 0xBF	; 191
    9bec:	9f 4f       	sbci	r25, 0xFF	; 255
    9bee:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    9bf2:	6f e0       	ldi	r22, 0x0F	; 15
    9bf4:	74 e0       	ldi	r23, 0x04	; 4
    9bf6:	ce 01       	movw	r24, r28
    9bf8:	8f 5b       	subi	r24, 0xBF	; 191
    9bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    9bfc:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
itoa():
    9c00:	4a e0       	ldi	r20, 0x0A	; 10
    9c02:	be 01       	movw	r22, r28
    9c04:	6f 57       	subi	r22, 0x7F	; 127
    9c06:	7f 4f       	sbci	r23, 0xFF	; 255
    9c08:	81 2f       	mov	r24, r17
    9c0a:	90 e0       	ldi	r25, 0x00	; 0
    9c0c:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z18mqtt_publis_outputhh():
    9c10:	be 01       	movw	r22, r28
    9c12:	6f 57       	subi	r22, 0x7F	; 127
    9c14:	7f 4f       	sbci	r23, 0xFF	; 255
    9c16:	ce 01       	movw	r24, r28
    9c18:	8f 5b       	subi	r24, 0xBF	; 191
    9c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    9c1c:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    9c20:	6d e1       	ldi	r22, 0x1D	; 29
    9c22:	74 e0       	ldi	r23, 0x04	; 4
    9c24:	ce 01       	movw	r24, r28
    9c26:	8f 5b       	subi	r24, 0xBF	; 191
    9c28:	9f 4f       	sbci	r25, 0xFF	; 255
    9c2a:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
itoa():
    9c2e:	4a e0       	ldi	r20, 0x0A	; 10
    9c30:	be 01       	movw	r22, r28
    9c32:	6f 5f       	subi	r22, 0xFF	; 255
    9c34:	7f 4f       	sbci	r23, 0xFF	; 255
    9c36:	80 2f       	mov	r24, r16
    9c38:	90 e0       	ldi	r25, 0x00	; 0
    9c3a:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z18mqtt_publis_outputhh():
    9c3e:	ae 01       	movw	r20, r28
    9c40:	4f 5f       	subi	r20, 0xFF	; 255
    9c42:	5f 4f       	sbci	r21, 0xFF	; 255
    9c44:	be 01       	movw	r22, r28
    9c46:	6f 5b       	subi	r22, 0xBF	; 191
    9c48:	7f 4f       	sbci	r23, 0xFF	; 255
    9c4a:	89 e0       	ldi	r24, 0x09	; 9
    9c4c:	9e e0       	ldi	r25, 0x0E	; 14
    9c4e:	0e 94 30 c7 	call	0x18e60	; 0x18e60 <PubSubClient::publish(char const*, char const*)>
    9c52:	c8 57       	subi	r28, 0x78	; 120
    9c54:	df 4f       	sbci	r29, 0xFF	; 255
    9c56:	0f b6       	in	r0, 0x3f	; 63
    9c58:	f8 94       	cli
    9c5a:	de bf       	out	0x3e, r29	; 62
    9c5c:	0f be       	out	0x3f, r0	; 63
    9c5e:	cd bf       	out	0x3d, r28	; 61
    9c60:	df 91       	pop	r29
    9c62:	cf 91       	pop	r28
    9c64:	1f 91       	pop	r17
    9c66:	0f 91       	pop	r16
    9c68:	08 95       	ret

00009c6a <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)>:
_Z22mqtt_publis_output_pwmhhh():
    9c6a:	ff 92       	push	r15
    9c6c:	0f 93       	push	r16
    9c6e:	1f 93       	push	r17
    9c70:	cf 93       	push	r28
    9c72:	df 93       	push	r29
    9c74:	cd b7       	in	r28, 0x3d	; 61
    9c76:	de b7       	in	r29, 0x3e	; 62
    9c78:	c8 58       	subi	r28, 0x88	; 136
    9c7a:	d1 09       	sbc	r29, r1
    9c7c:	0f b6       	in	r0, 0x3f	; 63
    9c7e:	f8 94       	cli
    9c80:	de bf       	out	0x3e, r29	; 62
    9c82:	0f be       	out	0x3f, r0	; 63
    9c84:	cd bf       	out	0x3d, r28	; 61
    9c86:	8f 3f       	cpi	r24, 0xFF	; 255
    9c88:	09 f4       	brne	.+2      	; 0x9c8c <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x22>
    9c8a:	4f c0       	rjmp	.+158    	; 0x9d2a <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0xc0>
    9c8c:	f4 2e       	mov	r15, r20
    9c8e:	16 2f       	mov	r17, r22
    9c90:	08 2f       	mov	r16, r24
    9c92:	68 ed       	ldi	r22, 0xD8	; 216
    9c94:	78 e5       	ldi	r23, 0x58	; 88
    9c96:	ce 01       	movw	r24, r28
    9c98:	8f 5b       	subi	r24, 0xBF	; 191
    9c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    9c9c:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    9ca0:	6f e0       	ldi	r22, 0x0F	; 15
    9ca2:	74 e0       	ldi	r23, 0x04	; 4
    9ca4:	ce 01       	movw	r24, r28
    9ca6:	8f 5b       	subi	r24, 0xBF	; 191
    9ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    9caa:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
itoa():
    9cae:	4a e0       	ldi	r20, 0x0A	; 10
    9cb0:	be 01       	movw	r22, r28
    9cb2:	6f 57       	subi	r22, 0x7F	; 127
    9cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    9cb6:	80 2f       	mov	r24, r16
    9cb8:	90 e0       	ldi	r25, 0x00	; 0
    9cba:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z22mqtt_publis_output_pwmhhh():
    9cbe:	be 01       	movw	r22, r28
    9cc0:	6f 57       	subi	r22, 0x7F	; 127
    9cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    9cc4:	ce 01       	movw	r24, r28
    9cc6:	8f 5b       	subi	r24, 0xBF	; 191
    9cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    9cca:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    9cce:	64 e2       	ldi	r22, 0x24	; 36
    9cd0:	74 e0       	ldi	r23, 0x04	; 4
    9cd2:	13 30       	cpi	r17, 0x03	; 3
    9cd4:	61 f0       	breq	.+24     	; 0x9cee <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    9cd6:	6a e2       	ldi	r22, 0x2A	; 42
    9cd8:	74 e0       	ldi	r23, 0x04	; 4
    9cda:	15 30       	cpi	r17, 0x05	; 5
    9cdc:	41 f0       	breq	.+16     	; 0x9cee <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    9cde:	60 e3       	ldi	r22, 0x30	; 48
    9ce0:	74 e0       	ldi	r23, 0x04	; 4
    9ce2:	16 30       	cpi	r17, 0x06	; 6
    9ce4:	21 f0       	breq	.+8      	; 0x9cee <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    9ce6:	1e 3f       	cpi	r17, 0xFE	; 254
    9ce8:	39 f4       	brne	.+14     	; 0x9cf8 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x8e>
    9cea:	65 e3       	ldi	r22, 0x35	; 53
    9cec:	74 e0       	ldi	r23, 0x04	; 4
    9cee:	ce 01       	movw	r24, r28
    9cf0:	8f 5b       	subi	r24, 0xBF	; 191
    9cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    9cf4:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    9cf8:	6a e3       	ldi	r22, 0x3A	; 58
    9cfa:	74 e0       	ldi	r23, 0x04	; 4
    9cfc:	ce 01       	movw	r24, r28
    9cfe:	8f 5b       	subi	r24, 0xBF	; 191
    9d00:	9f 4f       	sbci	r25, 0xFF	; 255
    9d02:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
itoa():
    9d06:	4a e0       	ldi	r20, 0x0A	; 10
    9d08:	be 01       	movw	r22, r28
    9d0a:	6f 5f       	subi	r22, 0xFF	; 255
    9d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    9d0e:	8f 2d       	mov	r24, r15
    9d10:	90 e0       	ldi	r25, 0x00	; 0
    9d12:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z22mqtt_publis_output_pwmhhh():
    9d16:	ae 01       	movw	r20, r28
    9d18:	4f 5f       	subi	r20, 0xFF	; 255
    9d1a:	5f 4f       	sbci	r21, 0xFF	; 255
    9d1c:	be 01       	movw	r22, r28
    9d1e:	6f 5b       	subi	r22, 0xBF	; 191
    9d20:	7f 4f       	sbci	r23, 0xFF	; 255
    9d22:	89 e0       	ldi	r24, 0x09	; 9
    9d24:	9e e0       	ldi	r25, 0x0E	; 14
    9d26:	0e 94 30 c7 	call	0x18e60	; 0x18e60 <PubSubClient::publish(char const*, char const*)>
    9d2a:	c8 57       	subi	r28, 0x78	; 120
    9d2c:	df 4f       	sbci	r29, 0xFF	; 255
    9d2e:	0f b6       	in	r0, 0x3f	; 63
    9d30:	f8 94       	cli
    9d32:	de bf       	out	0x3e, r29	; 62
    9d34:	0f be       	out	0x3f, r0	; 63
    9d36:	cd bf       	out	0x3d, r28	; 61
    9d38:	df 91       	pop	r29
    9d3a:	cf 91       	pop	r28
    9d3c:	1f 91       	pop	r17
    9d3e:	0f 91       	pop	r16
    9d40:	ff 90       	pop	r15
    9d42:	08 95       	ret

00009d44 <selftest_set_0(unsigned char)>:
_Z14selftest_set_0h():
    9d44:	21 e0       	ldi	r18, 0x01	; 1
    9d46:	30 e0       	ldi	r19, 0x00	; 0
    9d48:	01 c0       	rjmp	.+2      	; 0x9d4c <selftest_set_0(unsigned char)+0x8>
    9d4a:	22 0f       	add	r18, r18
    9d4c:	8a 95       	dec	r24
    9d4e:	ea f7       	brpl	.-6      	; 0x9d4a <selftest_set_0(unsigned char)+0x6>
    9d50:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <selftest_data>
    9d54:	82 2b       	or	r24, r18
    9d56:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <selftest_data>
    9d5a:	08 95       	ret

00009d5c <selftest_clear_0(unsigned char)>:
_Z16selftest_clear_0h():
    9d5c:	21 e0       	ldi	r18, 0x01	; 1
    9d5e:	30 e0       	ldi	r19, 0x00	; 0
    9d60:	01 c0       	rjmp	.+2      	; 0x9d64 <selftest_clear_0(unsigned char)+0x8>
    9d62:	22 0f       	add	r18, r18
    9d64:	8a 95       	dec	r24
    9d66:	ea f7       	brpl	.-6      	; 0x9d62 <selftest_clear_0(unsigned char)+0x6>
    9d68:	20 95       	com	r18
    9d6a:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <selftest_data>
    9d6e:	28 23       	and	r18, r24
    9d70:	20 93 be 0a 	sts	0x0ABE, r18	; 0x800abe <selftest_data>
    9d74:	08 95       	ret

00009d76 <selftest()>:
_Z8selftestv():
    9d76:	82 e6       	ldi	r24, 0x62	; 98
    9d78:	90 e1       	ldi	r25, 0x10	; 16
    9d7a:	0e 94 1e cd 	call	0x19a3c	; 0x19a3c <RTC_DS1307::isrunning()>
    9d7e:	90 91 be 0a 	lds	r25, 0x0ABE	; 0x800abe <selftest_data>
    9d82:	81 11       	cpse	r24, r1
    9d84:	04 c0       	rjmp	.+8      	; 0x9d8e <selftest()+0x18>
    9d86:	91 60       	ori	r25, 0x01	; 1
    9d88:	90 93 be 0a 	sts	0x0ABE, r25	; 0x800abe <selftest_data>
    9d8c:	08 95       	ret
    9d8e:	9e 7f       	andi	r25, 0xFE	; 254
    9d90:	fb cf       	rjmp	.-10     	; 0x9d88 <selftest()+0x12>

00009d92 <time_get_offset()>:
_Z15time_get_offsetv():
    9d92:	81 e0       	ldi	r24, 0x01	; 1
    9d94:	90 e0       	ldi	r25, 0x00	; 0
    9d96:	0c 94 ce 37 	jmp	0x6f9c	; 0x6f9c <EEPROMClass::read(int) [clone .isra.6]>

00009d9a <send_device_status()>:
_Z18send_device_statusv():
    9d9a:	ef 92       	push	r14
    9d9c:	ff 92       	push	r15
    9d9e:	0f 93       	push	r16
    9da0:	1f 93       	push	r17
    9da2:	cf 93       	push	r28
    9da4:	df 93       	push	r29
    9da6:	cd b7       	in	r28, 0x3d	; 61
    9da8:	de b7       	in	r29, 0x3e	; 62
    9daa:	c0 58       	subi	r28, 0x80	; 128
    9dac:	d1 09       	sbc	r29, r1
    9dae:	0f b6       	in	r0, 0x3f	; 63
    9db0:	f8 94       	cli
    9db2:	de bf       	out	0x3e, r29	; 62
    9db4:	0f be       	out	0x3f, r0	; 63
    9db6:	cd bf       	out	0x3d, r28	; 61
    9db8:	89 e0       	ldi	r24, 0x09	; 9
    9dba:	9e e0       	ldi	r25, 0x0E	; 14
    9dbc:	0e 94 a2 c3 	call	0x18744	; 0x18744 <PubSubClient::connected()>
    9dc0:	88 23       	and	r24, r24
    9dc2:	09 f4       	brne	.+2      	; 0x9dc6 <send_device_status()+0x2c>
    9dc4:	71 c1       	rjmp	.+738    	; 0xa0a8 <send_device_status()+0x30e>
    9dc6:	6f e3       	ldi	r22, 0x3F	; 63
    9dc8:	74 e0       	ldi	r23, 0x04	; 4
    9dca:	ce 01       	movw	r24, r28
    9dcc:	8f 5b       	subi	r24, 0xBF	; 191
    9dce:	9f 4f       	sbci	r25, 0xFF	; 255
    9dd0:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    9dd4:	80 91 b2 0a 	lds	r24, 0x0AB2	; 0x800ab2 <uptime+0x3>
    9dd8:	8f 93       	push	r24
    9dda:	80 91 b1 0a 	lds	r24, 0x0AB1	; 0x800ab1 <uptime+0x2>
    9dde:	8f 93       	push	r24
    9de0:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <uptime+0x1>
    9de4:	8f 93       	push	r24
    9de6:	80 91 af 0a 	lds	r24, 0x0AAF	; 0x800aaf <uptime>
    9dea:	8f 93       	push	r24
    9dec:	8d e4       	ldi	r24, 0x4D	; 77
    9dee:	94 e0       	ldi	r25, 0x04	; 4
    9df0:	9f 93       	push	r25
    9df2:	8f 93       	push	r24
    9df4:	ce 01       	movw	r24, r28
    9df6:	01 96       	adiw	r24, 0x01	; 1
    9df8:	7c 01       	movw	r14, r24
    9dfa:	9f 93       	push	r25
    9dfc:	8f 93       	push	r24
    9dfe:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    9e02:	a7 01       	movw	r20, r14
    9e04:	be 01       	movw	r22, r28
    9e06:	6f 5b       	subi	r22, 0xBF	; 191
    9e08:	7f 4f       	sbci	r23, 0xFF	; 255
    9e0a:	89 e0       	ldi	r24, 0x09	; 9
    9e0c:	9e e0       	ldi	r25, 0x0E	; 14
    9e0e:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9e12:	61 e5       	ldi	r22, 0x51	; 81
    9e14:	74 e0       	ldi	r23, 0x04	; 4
    9e16:	ce 01       	movw	r24, r28
    9e18:	8f 5b       	subi	r24, 0xBF	; 191
    9e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    9e1c:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    9e20:	80 91 92 0a 	lds	r24, 0x0A92	; 0x800a92 <brigthness_display_values>
itoa():
    9e24:	4a e0       	ldi	r20, 0x0A	; 10
    9e26:	b7 01       	movw	r22, r14
    9e28:	90 e0       	ldi	r25, 0x00	; 0
    9e2a:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z18send_device_statusv():
    9e2e:	a7 01       	movw	r20, r14
    9e30:	be 01       	movw	r22, r28
    9e32:	6f 5b       	subi	r22, 0xBF	; 191
    9e34:	7f 4f       	sbci	r23, 0xFF	; 255
    9e36:	89 e0       	ldi	r24, 0x09	; 9
    9e38:	9e e0       	ldi	r25, 0x0E	; 14
    9e3a:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9e3e:	63 e6       	ldi	r22, 0x63	; 99
    9e40:	74 e0       	ldi	r23, 0x04	; 4
    9e42:	ce 01       	movw	r24, r28
    9e44:	8f 5b       	subi	r24, 0xBF	; 191
    9e46:	9f 4f       	sbci	r25, 0xFF	; 255
    9e48:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
itoa():
    9e4c:	4a e0       	ldi	r20, 0x0A	; 10
    9e4e:	b7 01       	movw	r22, r14
    9e50:	80 91 b4 0a 	lds	r24, 0x0AB4	; 0x800ab4 <light_curr>
    9e54:	90 91 b5 0a 	lds	r25, 0x0AB5	; 0x800ab5 <light_curr+0x1>
    9e58:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z18send_device_statusv():
    9e5c:	a7 01       	movw	r20, r14
    9e5e:	be 01       	movw	r22, r28
    9e60:	6f 5b       	subi	r22, 0xBF	; 191
    9e62:	7f 4f       	sbci	r23, 0xFF	; 255
    9e64:	89 e0       	ldi	r24, 0x09	; 9
    9e66:	9e e0       	ldi	r25, 0x0E	; 14
    9e68:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9e6c:	60 e7       	ldi	r22, 0x70	; 112
    9e6e:	74 e0       	ldi	r23, 0x04	; 4
    9e70:	ce 01       	movw	r24, r28
    9e72:	8f 5b       	subi	r24, 0xBF	; 191
    9e74:	9f 4f       	sbci	r25, 0xFF	; 255
    9e76:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    9e7a:	80 91 91 0a 	lds	r24, 0x0A91	; 0x800a91 <brigthness_display_auto_values>
itoa():
    9e7e:	4a e0       	ldi	r20, 0x0A	; 10
    9e80:	b7 01       	movw	r22, r14
    9e82:	90 e0       	ldi	r25, 0x00	; 0
    9e84:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z18send_device_statusv():
    9e88:	a7 01       	movw	r20, r14
    9e8a:	be 01       	movw	r22, r28
    9e8c:	6f 5b       	subi	r22, 0xBF	; 191
    9e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    9e90:	89 e0       	ldi	r24, 0x09	; 9
    9e92:	9e e0       	ldi	r25, 0x0E	; 14
    9e94:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9e98:	67 e8       	ldi	r22, 0x87	; 135
    9e9a:	74 e0       	ldi	r23, 0x04	; 4
    9e9c:	ce 01       	movw	r24, r28
    9e9e:	8f 5b       	subi	r24, 0xBF	; 191
    9ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    9ea2:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
itoa():
    9ea6:	4a e0       	ldi	r20, 0x0A	; 10
    9ea8:	b7 01       	movw	r22, r14
    9eaa:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <load_min>
    9eae:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <load_min+0x1>
    9eb2:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z18send_device_statusv():
    9eb6:	a7 01       	movw	r20, r14
    9eb8:	be 01       	movw	r22, r28
    9eba:	6f 5b       	subi	r22, 0xBF	; 191
    9ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    9ebe:	89 e0       	ldi	r24, 0x09	; 9
    9ec0:	9e e0       	ldi	r25, 0x0E	; 14
    9ec2:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9ec6:	67 e9       	ldi	r22, 0x97	; 151
    9ec8:	74 e0       	ldi	r23, 0x04	; 4
    9eca:	ce 01       	movw	r24, r28
    9ecc:	8f 5b       	subi	r24, 0xBF	; 191
    9ece:	9f 4f       	sbci	r25, 0xFF	; 255
    9ed0:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
itoa():
    9ed4:	4a e0       	ldi	r20, 0x0A	; 10
    9ed6:	b7 01       	movw	r22, r14
    9ed8:	80 91 95 0a 	lds	r24, 0x0A95	; 0x800a95 <load_max>
    9edc:	90 91 96 0a 	lds	r25, 0x0A96	; 0x800a96 <load_max+0x1>
    9ee0:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z18send_device_statusv():
    9ee4:	a7 01       	movw	r20, r14
    9ee6:	be 01       	movw	r22, r28
    9ee8:	6f 5b       	subi	r22, 0xBF	; 191
    9eea:	7f 4f       	sbci	r23, 0xFF	; 255
    9eec:	89 e0       	ldi	r24, 0x09	; 9
    9eee:	9e e0       	ldi	r25, 0x0E	; 14
    9ef0:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9ef4:	10 92 95 0a 	sts	0x0A95, r1	; 0x800a95 <load_max>
    9ef8:	10 92 96 0a 	sts	0x0A96, r1	; 0x800a96 <load_max+0x1>
    9efc:	10 92 97 0a 	sts	0x0A97, r1	; 0x800a97 <load_max+0x2>
    9f00:	10 92 98 0a 	sts	0x0A98, r1	; 0x800a98 <load_max+0x3>
    9f04:	8f ef       	ldi	r24, 0xFF	; 255
    9f06:	9f ef       	ldi	r25, 0xFF	; 255
    9f08:	dc 01       	movw	r26, r24
    9f0a:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <load_min>
    9f0e:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <load_min+0x1>
    9f12:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <load_min+0x2>
    9f16:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <load_min+0x3>
    9f1a:	67 ea       	ldi	r22, 0xA7	; 167
    9f1c:	74 e0       	ldi	r23, 0x04	; 4
    9f1e:	ce 01       	movw	r24, r28
    9f20:	8f 5b       	subi	r24, 0xBF	; 191
    9f22:	9f 4f       	sbci	r25, 0xFF	; 255
    9f24:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    9f28:	80 91 9e 0a 	lds	r24, 0x0A9E	; 0x800a9e <default_ring>
itoa():
    9f2c:	4a e0       	ldi	r20, 0x0A	; 10
    9f2e:	b7 01       	movw	r22, r14
    9f30:	90 e0       	ldi	r25, 0x00	; 0
    9f32:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z18send_device_statusv():
    9f36:	a7 01       	movw	r20, r14
    9f38:	be 01       	movw	r22, r28
    9f3a:	6f 5b       	subi	r22, 0xBF	; 191
    9f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    9f3e:	89 e0       	ldi	r24, 0x09	; 9
    9f40:	9e e0       	ldi	r25, 0x0E	; 14
    9f42:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9f46:	6b eb       	ldi	r22, 0xBB	; 187
    9f48:	74 e0       	ldi	r23, 0x04	; 4
    9f4a:	ce 01       	movw	r24, r28
    9f4c:	8f 5b       	subi	r24, 0xBF	; 191
    9f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    9f50:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    9f54:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <selftest_data>
itoa():
    9f58:	4a e0       	ldi	r20, 0x0A	; 10
    9f5a:	b7 01       	movw	r22, r14
    9f5c:	90 e0       	ldi	r25, 0x00	; 0
    9f5e:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z18send_device_statusv():
    9f62:	a7 01       	movw	r20, r14
    9f64:	be 01       	movw	r22, r28
    9f66:	6f 5b       	subi	r22, 0xBF	; 191
    9f68:	7f 4f       	sbci	r23, 0xFF	; 255
    9f6a:	89 e0       	ldi	r24, 0x09	; 9
    9f6c:	9e e0       	ldi	r25, 0x0E	; 14
    9f6e:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9f72:	6b ec       	ldi	r22, 0xCB	; 203
    9f74:	74 e0       	ldi	r23, 0x04	; 4
    9f76:	ce 01       	movw	r24, r28
    9f78:	8f 5b       	subi	r24, 0xBF	; 191
    9f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    9f7c:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    9f80:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <use_rtds>
itoa():
    9f84:	4a e0       	ldi	r20, 0x0A	; 10
    9f86:	b7 01       	movw	r22, r14
    9f88:	90 e0       	ldi	r25, 0x00	; 0
    9f8a:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z18send_device_statusv():
    9f8e:	a7 01       	movw	r20, r14
    9f90:	be 01       	movw	r22, r28
    9f92:	6f 5b       	subi	r22, 0xBF	; 191
    9f94:	7f 4f       	sbci	r23, 0xFF	; 255
    9f96:	89 e0       	ldi	r24, 0x09	; 9
    9f98:	9e e0       	ldi	r25, 0x0E	; 14
    9f9a:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9f9e:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <time_get_offset()>
itoa():
    9fa2:	4a e0       	ldi	r20, 0x0A	; 10
    9fa4:	b7 01       	movw	r22, r14
    9fa6:	08 2e       	mov	r0, r24
    9fa8:	00 0c       	add	r0, r0
    9faa:	99 0b       	sbc	r25, r25
    9fac:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z18send_device_statusv():
    9fb0:	a7 01       	movw	r20, r14
    9fb2:	6d ed       	ldi	r22, 0xDD	; 221
    9fb4:	74 e0       	ldi	r23, 0x04	; 4
    9fb6:	89 e0       	ldi	r24, 0x09	; 9
    9fb8:	9e e0       	ldi	r25, 0x0E	; 14
    9fba:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    9fbe:	80 91 bc 0a 	lds	r24, 0x0ABC	; 0x800abc <tritri>
    9fc2:	90 91 bd 0a 	lds	r25, 0x0ABD	; 0x800abd <tritri+0x1>
    9fc6:	25 e0       	ldi	r18, 0x05	; 5
    9fc8:	28 9f       	mul	r18, r24
    9fca:	b0 01       	movw	r22, r0
    9fcc:	29 9f       	mul	r18, r25
    9fce:	70 0d       	add	r23, r0
    9fd0:	11 24       	eor	r1, r1
    9fd2:	90 e0       	ldi	r25, 0x00	; 0
    9fd4:	80 e0       	ldi	r24, 0x00	; 0
    9fd6:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
    9fda:	20 e0       	ldi	r18, 0x00	; 0
    9fdc:	30 e0       	ldi	r19, 0x00	; 0
    9fde:	4a e7       	ldi	r20, 0x7A	; 122
    9fe0:	54 e4       	ldi	r21, 0x44	; 68
    9fe2:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
_Z18send_device_statusv():
    9fe6:	87 01       	movw	r16, r14
    9fe8:	22 e0       	ldi	r18, 0x02	; 2
    9fea:	44 e0       	ldi	r20, 0x04	; 4
    9fec:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    9ff0:	a7 01       	movw	r20, r14
    9ff2:	6d ee       	ldi	r22, 0xED	; 237
    9ff4:	74 e0       	ldi	r23, 0x04	; 4
    9ff6:	89 e0       	ldi	r24, 0x09	; 9
    9ff8:	9e e0       	ldi	r25, 0x0E	; 14
    9ffa:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    9ffe:	60 91 ba 0a 	lds	r22, 0x0ABA	; 0x800aba <petnula>
    a002:	70 91 bb 0a 	lds	r23, 0x0ABB	; 0x800abb <petnula+0x1>
    a006:	83 e0       	ldi	r24, 0x03	; 3
    a008:	66 0f       	add	r22, r22
    a00a:	77 1f       	adc	r23, r23
    a00c:	8a 95       	dec	r24
    a00e:	e1 f7       	brne	.-8      	; 0xa008 <send_device_status()+0x26e>
    a010:	90 e0       	ldi	r25, 0x00	; 0
    a012:	80 e0       	ldi	r24, 0x00	; 0
    a014:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
    a018:	20 e0       	ldi	r18, 0x00	; 0
    a01a:	30 e0       	ldi	r19, 0x00	; 0
    a01c:	4a e7       	ldi	r20, 0x7A	; 122
    a01e:	54 e4       	ldi	r21, 0x44	; 68
    a020:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
_Z18send_device_statusv():
    a024:	22 e0       	ldi	r18, 0x02	; 2
    a026:	44 e0       	ldi	r20, 0x04	; 4
    a028:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    a02c:	a7 01       	movw	r20, r14
    a02e:	60 e0       	ldi	r22, 0x00	; 0
    a030:	75 e0       	ldi	r23, 0x05	; 5
    a032:	89 e0       	ldi	r24, 0x09	; 9
    a034:	9e e0       	ldi	r25, 0x0E	; 14
    a036:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    a03a:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <dvanact>
    a03e:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <dvanact+0x1>
    a042:	29 e3       	ldi	r18, 0x39	; 57
    a044:	28 9f       	mul	r18, r24
    a046:	b0 01       	movw	r22, r0
    a048:	29 9f       	mul	r18, r25
    a04a:	70 0d       	add	r23, r0
    a04c:	11 24       	eor	r1, r1
    a04e:	90 e0       	ldi	r25, 0x00	; 0
    a050:	80 e0       	ldi	r24, 0x00	; 0
    a052:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
    a056:	20 e0       	ldi	r18, 0x00	; 0
    a058:	30 e0       	ldi	r19, 0x00	; 0
    a05a:	4a e7       	ldi	r20, 0x7A	; 122
    a05c:	54 e4       	ldi	r21, 0x44	; 68
    a05e:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
_Z18send_device_statusv():
    a062:	22 e0       	ldi	r18, 0x02	; 2
    a064:	44 e0       	ldi	r20, 0x04	; 4
    a066:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    a06a:	a7 01       	movw	r20, r14
    a06c:	63 e1       	ldi	r22, 0x13	; 19
    a06e:	75 e0       	ldi	r23, 0x05	; 5
    a070:	89 e0       	ldi	r24, 0x09	; 9
    a072:	9e e0       	ldi	r25, 0x0E	; 14
    a074:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_prouduj():
    a078:	60 91 b6 0a 	lds	r22, 0x0AB6	; 0x800ab6 <proud>
    a07c:	70 91 b7 0a 	lds	r23, 0x0AB7	; 0x800ab7 <proud+0x1>
    a080:	90 e0       	ldi	r25, 0x00	; 0
    a082:	80 e0       	ldi	r24, 0x00	; 0
    a084:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
_Z18send_device_statusv():
    a088:	22 e0       	ldi	r18, 0x02	; 2
    a08a:	44 e0       	ldi	r20, 0x04	; 4
    a08c:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    a090:	a7 01       	movw	r20, r14
    a092:	66 e2       	ldi	r22, 0x26	; 38
    a094:	75 e0       	ldi	r23, 0x05	; 5
    a096:	89 e0       	ldi	r24, 0x09	; 9
    a098:	9e e0       	ldi	r25, 0x0E	; 14
    a09a:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    a09e:	0f b6       	in	r0, 0x3f	; 63
    a0a0:	f8 94       	cli
    a0a2:	de bf       	out	0x3e, r29	; 62
    a0a4:	0f be       	out	0x3f, r0	; 63
    a0a6:	cd bf       	out	0x3d, r28	; 61
    a0a8:	c0 58       	subi	r28, 0x80	; 128
    a0aa:	df 4f       	sbci	r29, 0xFF	; 255
    a0ac:	0f b6       	in	r0, 0x3f	; 63
    a0ae:	f8 94       	cli
    a0b0:	de bf       	out	0x3e, r29	; 62
    a0b2:	0f be       	out	0x3f, r0	; 63
    a0b4:	cd bf       	out	0x3d, r28	; 61
    a0b6:	df 91       	pop	r29
    a0b8:	cf 91       	pop	r28
    a0ba:	1f 91       	pop	r17
    a0bc:	0f 91       	pop	r16
    a0be:	ff 90       	pop	r15
    a0c0:	ef 90       	pop	r14
    a0c2:	08 95       	ret

0000a0c4 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>:
_Z26button_click_ntp_sync_timejjh():
    a0c4:	0f 93       	push	r16
    a0c6:	1f 93       	push	r17
    a0c8:	cf 93       	push	r28
    a0ca:	df 93       	push	r29
    a0cc:	cd b7       	in	r28, 0x3d	; 61
    a0ce:	de b7       	in	r29, 0x3e	; 62
    a0d0:	c4 55       	subi	r28, 0x54	; 84
    a0d2:	d1 09       	sbc	r29, r1
    a0d4:	0f b6       	in	r0, 0x3f	; 63
    a0d6:	f8 94       	cli
    a0d8:	de bf       	out	0x3e, r29	; 62
    a0da:	0f be       	out	0x3f, r0	; 63
    a0dc:	cd bf       	out	0x3d, r28	; 61
    a0de:	66 e2       	ldi	r22, 0x26	; 38
    a0e0:	70 e1       	ldi	r23, 0x10	; 16
    a0e2:	ce 01       	movw	r24, r28
    a0e4:	01 96       	adiw	r24, 0x01	; 1
    a0e6:	0e 94 e9 d3 	call	0x1a7d2	; 0x1a7d2 <NTPClient::NTPClient(UDP&)>
    a0ea:	40 e0       	ldi	r20, 0x00	; 0
    a0ec:	50 e0       	ldi	r21, 0x00	; 0
    a0ee:	ba 01       	movw	r22, r20
    a0f0:	ce 01       	movw	r24, r28
    a0f2:	88 5b       	subi	r24, 0xB8	; 184
    a0f4:	9f 4f       	sbci	r25, 0xFF	; 255
    a0f6:	0e 94 0a cc 	call	0x19814	; 0x19814 <DateTime::DateTime(unsigned long)>
    a0fa:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <time_get_offset()>
    a0fe:	9e 01       	movw	r18, r28
    a100:	28 5b       	subi	r18, 0xB8	; 184
    a102:	3f 4f       	sbci	r19, 0xFF	; 255
    a104:	48 2f       	mov	r20, r24
    a106:	62 e6       	ldi	r22, 0x62	; 98
    a108:	70 e1       	ldi	r23, 0x10	; 16
    a10a:	ce 01       	movw	r24, r28
    a10c:	01 96       	adiw	r24, 0x01	; 1
    a10e:	0e 94 86 8a 	call	0x1150c	; 0x1150c <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)>
    a112:	81 30       	cpi	r24, 0x01	; 1
    a114:	09 f0       	breq	.+2      	; 0xa118 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x54>
    a116:	3f c0       	rjmp	.+126    	; 0xa196 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0xd2>
    a118:	0e 94 ae 4e 	call	0x9d5c	; 0x9d5c <selftest_clear_0(unsigned char)>
    a11c:	70 e0       	ldi	r23, 0x00	; 0
    a11e:	60 e0       	ldi	r22, 0x00	; 0
    a120:	88 e6       	ldi	r24, 0x68	; 104
    a122:	90 e0       	ldi	r25, 0x00	; 0
    a124:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    a128:	2d 96       	adiw	r28, 0x0d	; 13
    a12a:	8f ad       	ldd	r24, Y+63	; 0x3f
    a12c:	2d 97       	sbiw	r28, 0x0d	; 13
    a12e:	1f 92       	push	r1
    a130:	8f 93       	push	r24
    a132:	2c 96       	adiw	r28, 0x0c	; 12
    a134:	8f ad       	ldd	r24, Y+63	; 0x3f
    a136:	2c 97       	sbiw	r28, 0x0c	; 12
    a138:	1f 92       	push	r1
    a13a:	8f 93       	push	r24
    a13c:	83 e1       	ldi	r24, 0x13	; 19
    a13e:	93 e0       	ldi	r25, 0x03	; 3
    a140:	9f 93       	push	r25
    a142:	8f 93       	push	r24
    a144:	8e 01       	movw	r16, r28
    a146:	01 5b       	subi	r16, 0xB1	; 177
    a148:	1f 4f       	sbci	r17, 0xFF	; 255
    a14a:	1f 93       	push	r17
    a14c:	0f 93       	push	r16
    a14e:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
    a152:	60 e7       	ldi	r22, 0x70	; 112
    a154:	77 e5       	ldi	r23, 0x57	; 87
    a156:	8d e0       	ldi	r24, 0x0D	; 13
    a158:	9a e0       	ldi	r25, 0x0A	; 10
    a15a:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    a15e:	68 e8       	ldi	r22, 0x88	; 136
    a160:	77 e0       	ldi	r23, 0x07	; 7
    a162:	8d e0       	ldi	r24, 0x0D	; 13
    a164:	9a e0       	ldi	r25, 0x0A	; 10
    a166:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    a16a:	b8 01       	movw	r22, r16
    a16c:	8d e0       	ldi	r24, 0x0D	; 13
    a16e:	9a e0       	ldi	r25, 0x0A	; 10
    a170:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    a174:	0f b6       	in	r0, 0x3f	; 63
    a176:	f8 94       	cli
    a178:	de bf       	out	0x3e, r29	; 62
    a17a:	0f be       	out	0x3f, r0	; 63
    a17c:	cd bf       	out	0x3d, r28	; 61
    a17e:	cc 5a       	subi	r28, 0xAC	; 172
    a180:	df 4f       	sbci	r29, 0xFF	; 255
    a182:	0f b6       	in	r0, 0x3f	; 63
    a184:	f8 94       	cli
    a186:	de bf       	out	0x3e, r29	; 62
    a188:	0f be       	out	0x3f, r0	; 63
    a18a:	cd bf       	out	0x3d, r28	; 61
    a18c:	df 91       	pop	r29
    a18e:	cf 91       	pop	r28
    a190:	1f 91       	pop	r17
    a192:	0f 91       	pop	r16
    a194:	08 95       	ret
    a196:	81 e0       	ldi	r24, 0x01	; 1
    a198:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <selftest_set_0(unsigned char)>
    a19c:	70 e0       	ldi	r23, 0x00	; 0
    a19e:	60 e0       	ldi	r22, 0x00	; 0
    a1a0:	88 e6       	ldi	r24, 0x68	; 104
    a1a2:	90 e0       	ldi	r25, 0x00	; 0
    a1a4:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    a1a8:	6a e5       	ldi	r22, 0x5A	; 90
    a1aa:	77 e5       	ldi	r23, 0x57	; 87
    a1ac:	8d e0       	ldi	r24, 0x0D	; 13
    a1ae:	9a e0       	ldi	r25, 0x0A	; 10
    a1b0:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    a1b4:	e4 cf       	rjmp	.-56     	; 0xa17e <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0xba>

0000a1b6 <button_click_set_time_offset(unsigned int, unsigned int, unsigned char)>:
_Z28button_click_set_time_offsetjjh():
    a1b6:	cf 93       	push	r28
    a1b8:	df 93       	push	r29
    a1ba:	70 e0       	ldi	r23, 0x00	; 0
    a1bc:	60 e0       	ldi	r22, 0x00	; 0
    a1be:	86 e6       	ldi	r24, 0x66	; 102
    a1c0:	90 e0       	ldi	r25, 0x00	; 0
    a1c2:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    a1c6:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <time_get_offset()>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    a1ca:	ce e2       	ldi	r28, 0x2E	; 46
    a1cc:	da e0       	ldi	r29, 0x0A	; 10
_Z28button_click_set_time_offsetjjh():
    a1ce:	68 2f       	mov	r22, r24
    a1d0:	88 0f       	add	r24, r24
    a1d2:	77 0b       	sbc	r23, r23
    a1d4:	88 0b       	sbc	r24, r24
    a1d6:	99 0b       	sbc	r25, r25
    a1d8:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
    a1dc:	68 83       	st	Y, r22
    a1de:	79 83       	std	Y+1, r23	; 0x01
    a1e0:	8a 83       	std	Y+2, r24	; 0x02
    a1e2:	9b 83       	std	Y+3, r25	; 0x03
_Z29display_function_set_variableffffhhhhPFvjfhE():
    a1e4:	80 e0       	ldi	r24, 0x00	; 0
    a1e6:	90 e0       	ldi	r25, 0x00	; 0
    a1e8:	a0 e4       	ldi	r26, 0x40	; 64
    a1ea:	b1 ec       	ldi	r27, 0xC1	; 193
    a1ec:	88 87       	std	Y+8, r24	; 0x08
    a1ee:	99 87       	std	Y+9, r25	; 0x09
    a1f0:	aa 87       	std	Y+10, r26	; 0x0a
    a1f2:	bb 87       	std	Y+11, r27	; 0x0b
    a1f4:	80 e0       	ldi	r24, 0x00	; 0
    a1f6:	90 e0       	ldi	r25, 0x00	; 0
    a1f8:	a0 e4       	ldi	r26, 0x40	; 64
    a1fa:	b1 e4       	ldi	r27, 0x41	; 65
    a1fc:	8c 83       	std	Y+4, r24	; 0x04
    a1fe:	9d 83       	std	Y+5, r25	; 0x05
    a200:	ae 83       	std	Y+6, r26	; 0x06
    a202:	bf 83       	std	Y+7, r27	; 0x07
    a204:	80 e0       	ldi	r24, 0x00	; 0
    a206:	90 e0       	ldi	r25, 0x00	; 0
    a208:	a0 e8       	ldi	r26, 0x80	; 128
    a20a:	bf e3       	ldi	r27, 0x3F	; 63
    a20c:	8e 87       	std	Y+14, r24	; 0x0e
    a20e:	9f 87       	std	Y+15, r25	; 0x0f
    a210:	a8 8b       	std	Y+16, r26	; 0x10
    a212:	b9 8b       	std	Y+17, r27	; 0x11
    a214:	81 e0       	ldi	r24, 0x01	; 1
    a216:	8d 87       	std	Y+13, r24	; 0x0d
    a218:	1a 8a       	std	Y+18, r1	; 0x12
    a21a:	1c 86       	std	Y+12, r1	; 0x0c
    a21c:	8a e1       	ldi	r24, 0x1A	; 26
    a21e:	91 e5       	ldi	r25, 0x51	; 81
    a220:	9c 8b       	std	Y+20, r25	; 0x14
    a222:	8b 8b       	std	Y+19, r24	; 0x13
_Z28button_click_set_time_offsetjjh():
    a224:	df 91       	pop	r29
    a226:	cf 91       	pop	r28
    a228:	08 95       	ret

0000a22a <time_set_offset(signed char)>:
_Z15time_set_offseta():
    a22a:	68 2f       	mov	r22, r24
    a22c:	81 e0       	ldi	r24, 0x01	; 1
    a22e:	90 e0       	ldi	r25, 0x00	; 0
    a230:	0c 94 d0 37 	jmp	0x6fa0	; 0x6fa0 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>

0000a234 <helper_set_menu_time_offset(unsigned int, float, unsigned char)>:
_Z33display_function_get_variable_inth():
    a234:	60 91 2e 0a 	lds	r22, 0x0A2E	; 0x800a2e <menu_dialog_variable>
    a238:	70 91 2f 0a 	lds	r23, 0x0A2F	; 0x800a2f <menu_dialog_variable+0x1>
    a23c:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <menu_dialog_variable+0x2>
    a240:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <menu_dialog_variable+0x3>
    a244:	0e 94 90 dc 	call	0x1b920	; 0x1b920 <__fixsfsi>
    a248:	86 2f       	mov	r24, r22
_Z27helper_set_menu_time_offsetjfh():
    a24a:	0c 94 15 51 	jmp	0xa22a	; 0xa22a <time_set_offset(signed char)>

0000a24e <setup_io_pin()>:
_Z12setup_io_pinv():
    a24e:	61 e0       	ldi	r22, 0x01	; 1
    a250:	86 e0       	ldi	r24, 0x06	; 6
    a252:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
    a256:	61 e0       	ldi	r22, 0x01	; 1
    a258:	8f e0       	ldi	r24, 0x0F	; 15
    a25a:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
    a25e:	61 e0       	ldi	r22, 0x01	; 1
    a260:	88 e0       	ldi	r24, 0x08	; 8
    a262:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
    a266:	61 e0       	ldi	r22, 0x01	; 1
    a268:	8c e0       	ldi	r24, 0x0C	; 12
    a26a:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
    a26e:	61 e0       	ldi	r22, 0x01	; 1
    a270:	86 e1       	ldi	r24, 0x16	; 22
    a272:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
    a276:	61 e0       	ldi	r22, 0x01	; 1
    a278:	87 e1       	ldi	r24, 0x17	; 23
    a27a:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
    a27e:	62 e0       	ldi	r22, 0x02	; 2
    a280:	8e e0       	ldi	r24, 0x0E	; 14
    a282:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
    a286:	60 e0       	ldi	r22, 0x00	; 0
    a288:	8c e0       	ldi	r24, 0x0C	; 12
    a28a:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
    a28e:	68 ee       	ldi	r22, 0xE8	; 232
    a290:	73 e0       	ldi	r23, 0x03	; 3
    a292:	80 e0       	ldi	r24, 0x00	; 0
    a294:	90 e0       	ldi	r25, 0x00	; 0
    a296:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
    a29a:	61 e0       	ldi	r22, 0x01	; 1
    a29c:	8c e0       	ldi	r24, 0x0C	; 12
    a29e:	0c 94 31 d8 	jmp	0x1b062	; 0x1b062 <digitalWrite>

0000a2a2 <convert_text_mode(char*)>:
_Z17convert_text_modePc():
    a2a2:	ef 92       	push	r14
    a2a4:	ff 92       	push	r15
    a2a6:	0f 93       	push	r16
    a2a8:	1f 93       	push	r17
    a2aa:	cf 93       	push	r28
    a2ac:	8c 01       	movw	r16, r24
    a2ae:	65 e2       	ldi	r22, 0x25	; 37
    a2b0:	74 e0       	ldi	r23, 0x04	; 4
    a2b2:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    a2b6:	7c 01       	movw	r14, r24
    a2b8:	6d e3       	ldi	r22, 0x3D	; 61
    a2ba:	75 e0       	ldi	r23, 0x05	; 5
    a2bc:	c8 01       	movw	r24, r16
    a2be:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    a2c2:	c3 e0       	ldi	r28, 0x03	; 3
    a2c4:	89 2b       	or	r24, r25
    a2c6:	21 f0       	breq	.+8      	; 0xa2d0 <convert_text_mode(char*)+0x2e>
    a2c8:	c1 e0       	ldi	r28, 0x01	; 1
    a2ca:	ef 28       	or	r14, r15
    a2cc:	09 f0       	breq	.+2      	; 0xa2d0 <convert_text_mode(char*)+0x2e>
    a2ce:	c0 e0       	ldi	r28, 0x00	; 0
    a2d0:	64 e4       	ldi	r22, 0x44	; 68
    a2d2:	75 e0       	ldi	r23, 0x05	; 5
    a2d4:	c8 01       	movw	r24, r16
    a2d6:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    a2da:	89 2b       	or	r24, r25
    a2dc:	09 f4       	brne	.+2      	; 0xa2e0 <convert_text_mode(char*)+0x3e>
    a2de:	c2 e0       	ldi	r28, 0x02	; 2
    a2e0:	6b e2       	ldi	r22, 0x2B	; 43
    a2e2:	74 e0       	ldi	r23, 0x04	; 4
    a2e4:	c8 01       	movw	r24, r16
    a2e6:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    a2ea:	89 2b       	or	r24, r25
    a2ec:	09 f4       	brne	.+2      	; 0xa2f0 <convert_text_mode(char*)+0x4e>
    a2ee:	c4 e0       	ldi	r28, 0x04	; 4
    a2f0:	69 e4       	ldi	r22, 0x49	; 73
    a2f2:	75 e0       	ldi	r23, 0x05	; 5
    a2f4:	c8 01       	movw	r24, r16
    a2f6:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    a2fa:	89 2b       	or	r24, r25
    a2fc:	09 f4       	brne	.+2      	; 0xa300 <convert_text_mode(char*)+0x5e>
    a2fe:	c6 e0       	ldi	r28, 0x06	; 6
    a300:	8c 2f       	mov	r24, r28
    a302:	cf 91       	pop	r28
    a304:	1f 91       	pop	r17
    a306:	0f 91       	pop	r16
    a308:	ff 90       	pop	r15
    a30a:	ef 90       	pop	r14
    a30c:	08 95       	ret

0000a30e <convert_mode_text(unsigned char, char*)>:
_Z17convert_mode_texthPc():
    a30e:	28 2f       	mov	r18, r24
    a310:	cb 01       	movw	r24, r22
    a312:	62 e5       	ldi	r22, 0x52	; 82
    a314:	75 e0       	ldi	r23, 0x05	; 5
    a316:	22 23       	and	r18, r18
    a318:	21 f0       	breq	.+8      	; 0xa322 <convert_mode_text(unsigned char, char*)+0x14>
    a31a:	21 30       	cpi	r18, 0x01	; 1
    a31c:	29 f4       	brne	.+10     	; 0xa328 <convert_mode_text(unsigned char, char*)+0x1a>
    a31e:	65 e2       	ldi	r22, 0x25	; 37
    a320:	74 e0       	ldi	r23, 0x04	; 4
    a322:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    a326:	08 95       	ret
    a328:	6d e3       	ldi	r22, 0x3D	; 61
    a32a:	75 e0       	ldi	r23, 0x05	; 5
    a32c:	23 30       	cpi	r18, 0x03	; 3
    a32e:	61 f0       	breq	.+24     	; 0xa348 <convert_mode_text(unsigned char, char*)+0x3a>
    a330:	64 e4       	ldi	r22, 0x44	; 68
    a332:	75 e0       	ldi	r23, 0x05	; 5
    a334:	22 30       	cpi	r18, 0x02	; 2
    a336:	41 f0       	breq	.+16     	; 0xa348 <convert_mode_text(unsigned char, char*)+0x3a>
    a338:	6b e2       	ldi	r22, 0x2B	; 43
    a33a:	74 e0       	ldi	r23, 0x04	; 4
    a33c:	24 30       	cpi	r18, 0x04	; 4
    a33e:	21 f0       	breq	.+8      	; 0xa348 <convert_mode_text(unsigned char, char*)+0x3a>
    a340:	26 30       	cpi	r18, 0x06	; 6
    a342:	21 f4       	brne	.+8      	; 0xa34c <convert_mode_text(unsigned char, char*)+0x3e>
    a344:	69 e4       	ldi	r22, 0x49	; 73
    a346:	75 e0       	ldi	r23, 0x05	; 5
    a348:	0c 94 26 e2 	jmp	0x1c44c	; 0x1c44c <strcpy>
    a34c:	08 95       	ret

0000a34e <send_mqtt_ring()>:
_Z14send_mqtt_ringv():
    a34e:	cf 92       	push	r12
    a350:	df 92       	push	r13
    a352:	ff 92       	push	r15
    a354:	0f 93       	push	r16
    a356:	1f 93       	push	r17
    a358:	cf 93       	push	r28
    a35a:	df 93       	push	r29
    a35c:	cd b7       	in	r28, 0x3d	; 61
    a35e:	de b7       	in	r29, 0x3e	; 62
    a360:	c0 54       	subi	r28, 0x40	; 64
    a362:	d1 09       	sbc	r29, r1
    a364:	0f b6       	in	r0, 0x3f	; 63
    a366:	f8 94       	cli
    a368:	de bf       	out	0x3e, r29	; 62
    a36a:	0f be       	out	0x3f, r0	; 63
    a36c:	cd bf       	out	0x3d, r28	; 61
    a36e:	8f eb       	ldi	r24, 0xBF	; 191
    a370:	c8 2e       	mov	r12, r24
    a372:	8a e0       	ldi	r24, 0x0A	; 10
    a374:	d8 2e       	mov	r13, r24
    a376:	f1 2c       	mov	r15, r1
    a378:	8f 2d       	mov	r24, r15
    a37a:	0e 94 ae 91 	call	0x1235c	; 0x1235c <thermostat_ring_get_active(unsigned char)>
    a37e:	8f 3f       	cpi	r24, 0xFF	; 255
    a380:	09 f4       	brne	.+2      	; 0xa384 <send_mqtt_ring()+0x36>
    a382:	b8 c0       	rjmp	.+368    	; 0xa4f4 <send_mqtt_ring()+0x1a6>
    a384:	be 01       	movw	r22, r28
    a386:	6f 5f       	subi	r22, 0xFF	; 255
    a388:	7f 4f       	sbci	r23, 0xFF	; 255
    a38a:	8f 2d       	mov	r24, r15
    a38c:	0e 94 53 91 	call	0x122a6	; 0x122a6 <thermostat_ring_get_name(unsigned char, char*)>
    a390:	8e 01       	movw	r16, r28
    a392:	0f 5f       	subi	r16, 0xFF	; 255
    a394:	1f 4f       	sbci	r17, 0xFF	; 255
    a396:	23 eb       	ldi	r18, 0xB3	; 179
    a398:	33 e0       	ldi	r19, 0x03	; 3
    a39a:	4f 2d       	mov	r20, r15
    a39c:	66 eb       	ldi	r22, 0xB6	; 182
    a39e:	74 e0       	ldi	r23, 0x04	; 4
    a3a0:	89 e0       	ldi	r24, 0x09	; 9
    a3a2:	9e e0       	ldi	r25, 0x0E	; 14
    a3a4:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a3a8:	8f 2d       	mov	r24, r15
    a3aa:	0e 94 ae 91 	call	0x1235c	; 0x1235c <thermostat_ring_get_active(unsigned char)>
itoa():
    a3ae:	4a e0       	ldi	r20, 0x0A	; 10
    a3b0:	b8 01       	movw	r22, r16
    a3b2:	90 e0       	ldi	r25, 0x00	; 0
    a3b4:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a3b8:	24 ed       	ldi	r18, 0xD4	; 212
    a3ba:	33 e0       	ldi	r19, 0x03	; 3
    a3bc:	4f 2d       	mov	r20, r15
    a3be:	66 eb       	ldi	r22, 0xB6	; 182
    a3c0:	74 e0       	ldi	r23, 0x04	; 4
    a3c2:	89 e0       	ldi	r24, 0x09	; 9
    a3c4:	9e e0       	ldi	r25, 0x0E	; 14
    a3c6:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a3ca:	8f 2d       	mov	r24, r15
    a3cc:	0e 94 be 91 	call	0x1237c	; 0x1237c <thermostat_ring_get_program_id(unsigned char)>
itoa():
    a3d0:	4a e0       	ldi	r20, 0x0A	; 10
    a3d2:	b8 01       	movw	r22, r16
    a3d4:	90 e0       	ldi	r25, 0x00	; 0
    a3d6:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a3da:	26 e5       	ldi	r18, 0x56	; 86
    a3dc:	35 e0       	ldi	r19, 0x05	; 5
    a3de:	4f 2d       	mov	r20, r15
    a3e0:	66 eb       	ldi	r22, 0xB6	; 182
    a3e2:	74 e0       	ldi	r23, 0x04	; 4
    a3e4:	89 e0       	ldi	r24, 0x09	; 9
    a3e6:	9e e0       	ldi	r25, 0x0E	; 14
    a3e8:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a3ec:	8f 2d       	mov	r24, r15
    a3ee:	0e 94 ce 91 	call	0x1239c	; 0x1239c <thermostat_ring_get_mezni(unsigned char)>
itoa():
    a3f2:	4a e0       	ldi	r20, 0x0A	; 10
    a3f4:	b8 01       	movw	r22, r16
    a3f6:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a3fa:	2b ee       	ldi	r18, 0xEB	; 235
    a3fc:	33 e0       	ldi	r19, 0x03	; 3
    a3fe:	4f 2d       	mov	r20, r15
    a400:	66 eb       	ldi	r22, 0xB6	; 182
    a402:	74 e0       	ldi	r23, 0x04	; 4
    a404:	89 e0       	ldi	r24, 0x09	; 9
    a406:	9e e0       	ldi	r25, 0x0E	; 14
    a408:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a40c:	8f 2d       	mov	r24, r15
    a40e:	0e 94 12 92 	call	0x12424	; 0x12424 <thermostat_ring_get_mode(unsigned char)>
itoa():
    a412:	4a e0       	ldi	r20, 0x0A	; 10
    a414:	b8 01       	movw	r22, r16
    a416:	90 e0       	ldi	r25, 0x00	; 0
    a418:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a41c:	23 e6       	ldi	r18, 0x63	; 99
    a41e:	35 e0       	ldi	r19, 0x05	; 5
    a420:	4f 2d       	mov	r20, r15
    a422:	66 eb       	ldi	r22, 0xB6	; 182
    a424:	74 e0       	ldi	r23, 0x04	; 4
    a426:	89 e0       	ldi	r24, 0x09	; 9
    a428:	9e e0       	ldi	r25, 0x0E	; 14
    a42a:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a42e:	8f 2d       	mov	r24, r15
    a430:	0e 94 12 92 	call	0x12424	; 0x12424 <thermostat_ring_get_mode(unsigned char)>
    a434:	b8 01       	movw	r22, r16
    a436:	0e 94 87 51 	call	0xa30e	; 0xa30e <convert_mode_text(unsigned char, char*)>
    a43a:	2e e5       	ldi	r18, 0x5E	; 94
    a43c:	35 e0       	ldi	r19, 0x05	; 5
    a43e:	4f 2d       	mov	r20, r15
    a440:	66 eb       	ldi	r22, 0xB6	; 182
    a442:	74 e0       	ldi	r23, 0x04	; 4
    a444:	89 e0       	ldi	r24, 0x09	; 9
    a446:	9e e0       	ldi	r25, 0x0E	; 14
    a448:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a44c:	8f 2d       	mov	r24, r15
    a44e:	0e 94 54 90 	call	0x120a8	; 0x120a8 <thermostat_ring_get_state(unsigned char)>
itoa():
    a452:	4a e0       	ldi	r20, 0x0A	; 10
    a454:	b8 01       	movw	r22, r16
    a456:	90 e0       	ldi	r25, 0x00	; 0
    a458:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a45c:	28 e6       	ldi	r18, 0x68	; 104
    a45e:	35 e0       	ldi	r19, 0x05	; 5
    a460:	4f 2d       	mov	r20, r15
    a462:	66 eb       	ldi	r22, 0xB6	; 182
    a464:	74 e0       	ldi	r23, 0x04	; 4
    a466:	89 e0       	ldi	r24, 0x09	; 9
    a468:	9e e0       	ldi	r25, 0x0E	; 14
    a46a:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a46e:	8f 2d       	mov	r24, r15
    a470:	0e 94 02 92 	call	0x12404	; 0x12404 <thermostat_ring_get_asociate_tds(unsigned char)>
itoa():
    a474:	4a e0       	ldi	r20, 0x0A	; 10
    a476:	b8 01       	movw	r22, r16
    a478:	90 e0       	ldi	r25, 0x00	; 0
    a47a:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a47e:	2f e6       	ldi	r18, 0x6F	; 111
    a480:	35 e0       	ldi	r19, 0x05	; 5
    a482:	4f 2d       	mov	r20, r15
    a484:	66 eb       	ldi	r22, 0xB6	; 182
    a486:	74 e0       	ldi	r23, 0x04	; 4
    a488:	89 e0       	ldi	r24, 0x09	; 9
    a48a:	9e e0       	ldi	r25, 0x0E	; 14
    a48c:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a490:	8f 2d       	mov	r24, r15
    a492:	0e 94 9e 91 	call	0x1233c	; 0x1233c <thermostat_ring_get_output(unsigned char)>
itoa():
    a496:	4a e0       	ldi	r20, 0x0A	; 10
    a498:	b8 01       	movw	r22, r16
    a49a:	90 e0       	ldi	r25, 0x00	; 0
    a49c:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a4a0:	25 e7       	ldi	r18, 0x75	; 117
    a4a2:	35 e0       	ldi	r19, 0x05	; 5
    a4a4:	4f 2d       	mov	r20, r15
    a4a6:	66 eb       	ldi	r22, 0xB6	; 182
    a4a8:	74 e0       	ldi	r23, 0x04	; 4
    a4aa:	89 e0       	ldi	r24, 0x09	; 9
    a4ac:	9e e0       	ldi	r25, 0x0E	; 14
    a4ae:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a4b2:	8f 2d       	mov	r24, r15
    a4b4:	0e 94 2c 92 	call	0x12458	; 0x12458 <thermostat_ring_get_status_data(unsigned char)>
itoa():
    a4b8:	4a e0       	ldi	r20, 0x0A	; 10
    a4ba:	b8 01       	movw	r22, r16
    a4bc:	90 e0       	ldi	r25, 0x00	; 0
    a4be:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a4c2:	2c e7       	ldi	r18, 0x7C	; 124
    a4c4:	35 e0       	ldi	r19, 0x05	; 5
    a4c6:	4f 2d       	mov	r20, r15
    a4c8:	66 eb       	ldi	r22, 0xB6	; 182
    a4ca:	74 e0       	ldi	r23, 0x04	; 4
    a4cc:	89 e0       	ldi	r24, 0x09	; 9
    a4ce:	9e e0       	ldi	r25, 0x0E	; 14
    a4d0:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a4d4:	f6 01       	movw	r30, r12
    a4d6:	80 81       	ld	r24, Z
itoa():
    a4d8:	4a e0       	ldi	r20, 0x0A	; 10
    a4da:	b8 01       	movw	r22, r16
    a4dc:	90 e0       	ldi	r25, 0x00	; 0
    a4de:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a4e2:	29 e8       	ldi	r18, 0x89	; 137
    a4e4:	35 e0       	ldi	r19, 0x05	; 5
    a4e6:	4f 2d       	mov	r20, r15
    a4e8:	66 eb       	ldi	r22, 0xB6	; 182
    a4ea:	74 e0       	ldi	r23, 0x04	; 4
    a4ec:	89 e0       	ldi	r24, 0x09	; 9
    a4ee:	9e e0       	ldi	r25, 0x0E	; 14
    a4f0:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a4f4:	f3 94       	inc	r15
    a4f6:	ff ef       	ldi	r31, 0xFF	; 255
    a4f8:	cf 1a       	sub	r12, r31
    a4fa:	df 0a       	sbc	r13, r31
    a4fc:	85 e0       	ldi	r24, 0x05	; 5
    a4fe:	f8 12       	cpse	r15, r24
    a500:	3b cf       	rjmp	.-394    	; 0xa378 <send_mqtt_ring()+0x2a>
    a502:	c0 5c       	subi	r28, 0xC0	; 192
    a504:	df 4f       	sbci	r29, 0xFF	; 255
    a506:	0f b6       	in	r0, 0x3f	; 63
    a508:	f8 94       	cli
    a50a:	de bf       	out	0x3e, r29	; 62
    a50c:	0f be       	out	0x3f, r0	; 63
    a50e:	cd bf       	out	0x3d, r28	; 61
    a510:	df 91       	pop	r29
    a512:	cf 91       	pop	r28
    a514:	1f 91       	pop	r17
    a516:	0f 91       	pop	r16
    a518:	ff 90       	pop	r15
    a51a:	df 90       	pop	r13
    a51c:	cf 90       	pop	r12
    a51e:	08 95       	ret

0000a520 <thermostat()>:
_Z10thermostatv():
    a520:	af 92       	push	r10
    a522:	bf 92       	push	r11
    a524:	cf 92       	push	r12
    a526:	df 92       	push	r13
    a528:	ef 92       	push	r14
    a52a:	ff 92       	push	r15
    a52c:	0f 93       	push	r16
    a52e:	1f 93       	push	r17
    a530:	cf 93       	push	r28
    a532:	df 93       	push	r29
    a534:	cd b7       	in	r28, 0x3d	; 61
    a536:	de b7       	in	r29, 0x3e	; 62
    a538:	69 97       	sbiw	r28, 0x19	; 25
    a53a:	0f b6       	in	r0, 0x3f	; 63
    a53c:	f8 94       	cli
    a53e:	de bf       	out	0x3e, r29	; 62
    a540:	0f be       	out	0x3f, r0	; 63
    a542:	cd bf       	out	0x3d, r28	; 61
    a544:	18 8e       	std	Y+24, r1	; 0x18
    a546:	1f 8a       	std	Y+23, r1	; 0x17
    a548:	19 8e       	std	Y+25, r1	; 0x19
    a54a:	10 e0       	ldi	r17, 0x00	; 0
    a54c:	58 ec       	ldi	r21, 0xC8	; 200
    a54e:	d5 2e       	mov	r13, r21
    a550:	6e e1       	ldi	r22, 0x1E	; 30
    a552:	b6 2e       	mov	r11, r22
    a554:	81 2f       	mov	r24, r17
    a556:	0e 94 02 92 	call	0x12404	; 0x12404 <thermostat_ring_get_asociate_tds(unsigned char)>
    a55a:	e8 2e       	mov	r14, r24
    a55c:	81 2f       	mov	r24, r17
    a55e:	0e 94 12 92 	call	0x12424	; 0x12424 <thermostat_ring_get_mode(unsigned char)>
    a562:	f8 2e       	mov	r15, r24
    a564:	81 2f       	mov	r24, r17
    a566:	0e 94 9e 91 	call	0x1233c	; 0x1233c <thermostat_ring_get_output(unsigned char)>
    a56a:	c8 2e       	mov	r12, r24
    a56c:	81 2f       	mov	r24, r17
    a56e:	0e 94 ce 91 	call	0x1239c	; 0x1239c <thermostat_ring_get_mezni(unsigned char)>
    a572:	98 8f       	std	Y+24, r25	; 0x18
    a574:	8f 8b       	std	Y+23, r24	; 0x17
    a576:	82 e0       	ldi	r24, 0x02	; 2
    a578:	f8 12       	cpse	r15, r24
    a57a:	9b c0       	rjmp	.+310    	; 0xa6b2 <thermostat()+0x192>
    a57c:	81 2f       	mov	r24, r17
    a57e:	0e 94 be 91 	call	0x1237c	; 0x1237c <thermostat_ring_get_program_id(unsigned char)>
    a582:	a8 2e       	mov	r10, r24
    a584:	8b e5       	ldi	r24, 0x5B	; 91
    a586:	90 e1       	ldi	r25, 0x10	; 16
    a588:	0e 94 9b cc 	call	0x19936	; 0x19936 <DateTime::dayOfTheWeek() const>
    a58c:	08 2f       	mov	r16, r24
    a58e:	20 91 5f 10 	lds	r18, 0x105F	; 0x80105f <now+0x4>
    a592:	40 91 5e 10 	lds	r20, 0x105E	; 0x80105e <now+0x3>
    a596:	be 01       	movw	r22, r28
    a598:	69 5e       	subi	r22, 0xE9	; 233
    a59a:	7f 4f       	sbci	r23, 0xFF	; 255
    a59c:	8a 2d       	mov	r24, r10
    a59e:	0e 94 5a 95 	call	0x12ab4	; 0x12ab4 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)>
    a5a2:	8e 3f       	cpi	r24, 0xFE	; 254
    a5a4:	09 f4       	brne	.+2      	; 0xa5a8 <thermostat()+0x88>
    a5a6:	69 c0       	rjmp	.+210    	; 0xa67a <thermostat()+0x15a>
    a5a8:	08 f0       	brcs	.+2      	; 0xa5ac <thermostat()+0x8c>
    a5aa:	5f c0       	rjmp	.+190    	; 0xa66a <thermostat()+0x14a>
    a5ac:	8d 3f       	cpi	r24, 0xFD	; 253
    a5ae:	09 f4       	brne	.+2      	; 0xa5b2 <thermostat()+0x92>
    a5b0:	6e c0       	rjmp	.+220    	; 0xa68e <thermostat()+0x16e>
    a5b2:	85 e0       	ldi	r24, 0x05	; 5
    a5b4:	8e 15       	cp	r24, r14
    a5b6:	e8 f1       	brcs	.+122    	; 0xa632 <thermostat()+0x112>
    a5b8:	be 01       	movw	r22, r28
    a5ba:	6f 5f       	subi	r22, 0xFF	; 255
    a5bc:	7f 4f       	sbci	r23, 0xFF	; 255
    a5be:	8e 2d       	mov	r24, r14
    a5c0:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    a5c4:	81 30       	cpi	r24, 0x01	; 1
    a5c6:	a9 f5       	brne	.+106    	; 0xa632 <thermostat()+0x112>
    a5c8:	89 81       	ldd	r24, Y+1	; 0x01
    a5ca:	81 30       	cpi	r24, 0x01	; 1
    a5cc:	09 f0       	breq	.+2      	; 0xa5d0 <thermostat()+0xb0>
    a5ce:	7e c0       	rjmp	.+252    	; 0xa6cc <thermostat()+0x1ac>
    a5d0:	be 9c       	mul	r11, r14
    a5d2:	f0 01       	movw	r30, r0
    a5d4:	11 24       	eor	r1, r1
    a5d6:	ee 55       	subi	r30, 0x5E	; 94
    a5d8:	fe 4e       	sbci	r31, 0xEE	; 238
    a5da:	83 8d       	ldd	r24, Z+27	; 0x1b
    a5dc:	81 30       	cpi	r24, 0x01	; 1
    a5de:	09 f0       	breq	.+2      	; 0xa5e2 <thermostat()+0xc2>
    a5e0:	75 c0       	rjmp	.+234    	; 0xa6cc <thermostat()+0x1ac>
    a5e2:	65 81       	ldd	r22, Z+5	; 0x05
    a5e4:	76 81       	ldd	r23, Z+6	; 0x06
    a5e6:	07 2e       	mov	r0, r23
    a5e8:	00 0c       	add	r0, r0
    a5ea:	88 0b       	sbc	r24, r24
    a5ec:	99 0b       	sbc	r25, r25
    a5ee:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
    a5f2:	20 e0       	ldi	r18, 0x00	; 0
    a5f4:	30 e0       	ldi	r19, 0x00	; 0
    a5f6:	48 ec       	ldi	r20, 0xC8	; 200
    a5f8:	52 e4       	ldi	r21, 0x42	; 66
    a5fa:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
    a5fe:	ab 01       	movw	r20, r22
    a600:	bc 01       	movw	r22, r24
    a602:	81 2f       	mov	r24, r17
    a604:	0e 94 13 91 	call	0x12226	; 0x12226 <thermostat_pid_input(unsigned char, double)>
    a608:	6f 89       	ldd	r22, Y+23	; 0x17
    a60a:	78 8d       	ldd	r23, Y+24	; 0x18
    a60c:	07 2e       	mov	r0, r23
    a60e:	00 0c       	add	r0, r0
    a610:	88 0b       	sbc	r24, r24
    a612:	99 0b       	sbc	r25, r25
    a614:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
    a618:	ab 01       	movw	r20, r22
    a61a:	bc 01       	movw	r22, r24
    a61c:	81 2f       	mov	r24, r17
    a61e:	0e 94 1e 91 	call	0x1223c	; 0x1223c <thermostat_pid_setpoint(unsigned char, double)>
    a622:	81 2f       	mov	r24, r17
    a624:	0e 94 29 91 	call	0x12252	; 0x12252 <thermostat_pid_output(unsigned char)>
    a628:	d8 2e       	mov	r13, r24
    a62a:	68 2f       	mov	r22, r24
    a62c:	81 2f       	mov	r24, r17
    a62e:	0e 94 60 90 	call	0x120c0	; 0x120c0 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a632:	0a ef       	ldi	r16, 0xFA	; 250
    a634:	0e 0d       	add	r16, r14
    a636:	0a 30       	cpi	r16, 0x0A	; 10
    a638:	08 f0       	brcs	.+2      	; 0xa63c <thermostat()+0x11c>
    a63a:	7f c0       	rjmp	.+254    	; 0xa73a <thermostat()+0x21a>
    a63c:	be 01       	movw	r22, r28
    a63e:	67 5e       	subi	r22, 0xE7	; 231
    a640:	7f 4f       	sbci	r23, 0xFF	; 255
    a642:	80 2f       	mov	r24, r16
    a644:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <remote_tds_get_active(unsigned char, unsigned char*)>
    a648:	89 8d       	ldd	r24, Y+25	; 0x19
    a64a:	81 30       	cpi	r24, 0x01	; 1
    a64c:	09 f4       	brne	.+2      	; 0xa650 <thermostat()+0x130>
    a64e:	46 c0       	rjmp	.+140    	; 0xa6dc <thermostat()+0x1bc>
    a650:	60 e0       	ldi	r22, 0x00	; 0
    a652:	81 2f       	mov	r24, r17
    a654:	0e 94 60 90 	call	0x120c0	; 0x120c0 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a658:	9e ef       	ldi	r25, 0xFE	; 254
    a65a:	f9 2e       	mov	r15, r25
    a65c:	d1 2c       	mov	r13, r1
    a65e:	4d 2d       	mov	r20, r13
    a660:	6f 2d       	mov	r22, r15
    a662:	8c 2d       	mov	r24, r12
    a664:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)>
    a668:	72 c0       	rjmp	.+228    	; 0xa74e <thermostat()+0x22e>
    a66a:	60 e0       	ldi	r22, 0x00	; 0
    a66c:	81 2f       	mov	r24, r17
    a66e:	0e 94 5a 90 	call	0x120b4	; 0x120b4 <thermostat_ring_set_state(unsigned char, unsigned char)>
    a672:	60 e0       	ldi	r22, 0x00	; 0
    a674:	81 2f       	mov	r24, r17
    a676:	0e 94 60 90 	call	0x120c0	; 0x120c0 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a67a:	60 e0       	ldi	r22, 0x00	; 0
    a67c:	81 2f       	mov	r24, r17
    a67e:	0e 94 5a 90 	call	0x120b4	; 0x120b4 <thermostat_ring_set_state(unsigned char, unsigned char)>
    a682:	60 e0       	ldi	r22, 0x00	; 0
    a684:	81 2f       	mov	r24, r17
    a686:	0e 94 60 90 	call	0x120c0	; 0x120c0 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a68a:	f1 2c       	mov	r15, r1
    a68c:	92 cf       	rjmp	.-220    	; 0xa5b2 <thermostat()+0x92>
    a68e:	61 e0       	ldi	r22, 0x01	; 1
    a690:	81 2f       	mov	r24, r17
    a692:	0e 94 5a 90 	call	0x120b4	; 0x120b4 <thermostat_ring_set_state(unsigned char, unsigned char)>
    a696:	8a 2d       	mov	r24, r10
    a698:	0e 94 bd 93 	call	0x1277a	; 0x1277a <thermostat_program_get_active(unsigned char)>
    a69c:	81 30       	cpi	r24, 0x01	; 1
    a69e:	61 f0       	breq	.+24     	; 0xa6b8 <thermostat()+0x198>
    a6a0:	82 30       	cpi	r24, 0x02	; 2
    a6a2:	09 f0       	breq	.+2      	; 0xa6a6 <thermostat()+0x186>
    a6a4:	87 c0       	rjmp	.+270    	; 0xa7b4 <thermostat()+0x294>
    a6a6:	81 2f       	mov	r24, r17
    a6a8:	0e 94 f8 90 	call	0x121f0	; 0x121f0 <thermostat_pid_setdirection_reverse(unsigned char)>
    a6ac:	45 e0       	ldi	r20, 0x05	; 5
    a6ae:	f4 2e       	mov	r15, r20
    a6b0:	80 cf       	rjmp	.-256    	; 0xa5b2 <thermostat()+0x92>
    a6b2:	83 e0       	ldi	r24, 0x03	; 3
    a6b4:	f8 12       	cpse	r15, r24
    a6b6:	06 c0       	rjmp	.+12     	; 0xa6c4 <thermostat()+0x1a4>
    a6b8:	81 2f       	mov	r24, r17
    a6ba:	0e 94 e8 90 	call	0x121d0	; 0x121d0 <thermostat_pid_setdirection_direct(unsigned char)>
    a6be:	33 e0       	ldi	r19, 0x03	; 3
    a6c0:	f3 2e       	mov	r15, r19
    a6c2:	77 cf       	rjmp	.-274    	; 0xa5b2 <thermostat()+0x92>
    a6c4:	85 e0       	ldi	r24, 0x05	; 5
    a6c6:	f8 12       	cpse	r15, r24
    a6c8:	74 cf       	rjmp	.-280    	; 0xa5b2 <thermostat()+0x92>
    a6ca:	ed cf       	rjmp	.-38     	; 0xa6a6 <thermostat()+0x186>
    a6cc:	60 e0       	ldi	r22, 0x00	; 0
    a6ce:	81 2f       	mov	r24, r17
    a6d0:	0e 94 60 90 	call	0x120c0	; 0x120c0 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a6d4:	d1 2c       	mov	r13, r1
    a6d6:	2e ef       	ldi	r18, 0xFE	; 254
    a6d8:	f2 2e       	mov	r15, r18
    a6da:	ab cf       	rjmp	.-170    	; 0xa632 <thermostat()+0x112>
    a6dc:	80 2f       	mov	r24, r16
    a6de:	0e 94 2a 48 	call	0x9054	; 0x9054 <remote_tds_get_last_update(unsigned char)>
    a6e2:	84 3b       	cpi	r24, 0xB4	; 180
    a6e4:	08 f0       	brcs	.+2      	; 0xa6e8 <thermostat()+0x1c8>
    a6e6:	b4 cf       	rjmp	.-152    	; 0xa650 <thermostat()+0x130>
    a6e8:	80 2f       	mov	r24, r16
    a6ea:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <remote_tds_get_data(unsigned char)>
    a6ee:	bc 01       	movw	r22, r24
    a6f0:	99 0f       	add	r25, r25
    a6f2:	88 0b       	sbc	r24, r24
    a6f4:	99 0b       	sbc	r25, r25
    a6f6:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
    a6fa:	20 e0       	ldi	r18, 0x00	; 0
    a6fc:	30 e0       	ldi	r19, 0x00	; 0
    a6fe:	4a e7       	ldi	r20, 0x7A	; 122
    a700:	54 e4       	ldi	r21, 0x44	; 68
    a702:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
    a706:	ab 01       	movw	r20, r22
    a708:	bc 01       	movw	r22, r24
    a70a:	81 2f       	mov	r24, r17
    a70c:	0e 94 13 91 	call	0x12226	; 0x12226 <thermostat_pid_input(unsigned char, double)>
    a710:	6f 89       	ldd	r22, Y+23	; 0x17
    a712:	78 8d       	ldd	r23, Y+24	; 0x18
    a714:	07 2e       	mov	r0, r23
    a716:	00 0c       	add	r0, r0
    a718:	88 0b       	sbc	r24, r24
    a71a:	99 0b       	sbc	r25, r25
    a71c:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
    a720:	ab 01       	movw	r20, r22
    a722:	bc 01       	movw	r22, r24
    a724:	81 2f       	mov	r24, r17
    a726:	0e 94 1e 91 	call	0x1223c	; 0x1223c <thermostat_pid_setpoint(unsigned char, double)>
    a72a:	81 2f       	mov	r24, r17
    a72c:	0e 94 29 91 	call	0x12252	; 0x12252 <thermostat_pid_output(unsigned char)>
    a730:	d8 2e       	mov	r13, r24
    a732:	68 2f       	mov	r22, r24
    a734:	81 2f       	mov	r24, r17
    a736:	0e 94 60 90 	call	0x120c0	; 0x120c0 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a73a:	f1 10       	cpse	r15, r1
    a73c:	1d c0       	rjmp	.+58     	; 0xa778 <thermostat()+0x258>
    a73e:	6e ef       	ldi	r22, 0xFE	; 254
    a740:	8c 2d       	mov	r24, r12
    a742:	0e 94 e1 4d 	call	0x9bc2	; 0x9bc2 <mqtt_publis_output(unsigned char, unsigned char)>
    a746:	60 e0       	ldi	r22, 0x00	; 0
    a748:	81 2f       	mov	r24, r17
    a74a:	0e 94 60 90 	call	0x120c0	; 0x120c0 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a74e:	1f 5f       	subi	r17, 0xFF	; 255
    a750:	15 30       	cpi	r17, 0x05	; 5
    a752:	09 f0       	breq	.+2      	; 0xa756 <thermostat()+0x236>
    a754:	ff ce       	rjmp	.-514    	; 0xa554 <thermostat()+0x34>
    a756:	69 96       	adiw	r28, 0x19	; 25
    a758:	0f b6       	in	r0, 0x3f	; 63
    a75a:	f8 94       	cli
    a75c:	de bf       	out	0x3e, r29	; 62
    a75e:	0f be       	out	0x3f, r0	; 63
    a760:	cd bf       	out	0x3d, r28	; 61
    a762:	df 91       	pop	r29
    a764:	cf 91       	pop	r28
    a766:	1f 91       	pop	r17
    a768:	0f 91       	pop	r16
    a76a:	ff 90       	pop	r15
    a76c:	ef 90       	pop	r14
    a76e:	df 90       	pop	r13
    a770:	cf 90       	pop	r12
    a772:	bf 90       	pop	r11
    a774:	af 90       	pop	r10
    a776:	08 95       	ret
    a778:	81 e0       	ldi	r24, 0x01	; 1
    a77a:	6a e0       	ldi	r22, 0x0A	; 10
    a77c:	f8 16       	cp	r15, r24
    a77e:	21 f0       	breq	.+8      	; 0xa788 <thermostat()+0x268>
    a780:	84 e0       	ldi	r24, 0x04	; 4
    a782:	f8 12       	cpse	r15, r24
    a784:	06 c0       	rjmp	.+12     	; 0xa792 <thermostat()+0x272>
    a786:	6b e0       	ldi	r22, 0x0B	; 11
    a788:	8c 2d       	mov	r24, r12
    a78a:	0e 94 e1 4d 	call	0x9bc2	; 0x9bc2 <mqtt_publis_output(unsigned char, unsigned char)>
    a78e:	6f ef       	ldi	r22, 0xFF	; 255
    a790:	db cf       	rjmp	.-74     	; 0xa748 <thermostat()+0x228>
    a792:	83 e0       	ldi	r24, 0x03	; 3
    a794:	f8 16       	cp	r15, r24
    a796:	09 f4       	brne	.+2      	; 0xa79a <thermostat()+0x27a>
    a798:	62 cf       	rjmp	.-316    	; 0xa65e <thermostat()+0x13e>
    a79a:	85 e0       	ldi	r24, 0x05	; 5
    a79c:	f8 16       	cp	r15, r24
    a79e:	09 f4       	brne	.+2      	; 0xa7a2 <thermostat()+0x282>
    a7a0:	5e cf       	rjmp	.-324    	; 0xa65e <thermostat()+0x13e>
    a7a2:	86 e0       	ldi	r24, 0x06	; 6
    a7a4:	f8 16       	cp	r15, r24
    a7a6:	09 f4       	brne	.+2      	; 0xa7aa <thermostat()+0x28a>
    a7a8:	5a cf       	rjmp	.-332    	; 0xa65e <thermostat()+0x13e>
    a7aa:	8e ef       	ldi	r24, 0xFE	; 254
    a7ac:	f8 16       	cp	r15, r24
    a7ae:	09 f4       	brne	.+2      	; 0xa7b2 <thermostat()+0x292>
    a7b0:	56 cf       	rjmp	.-340    	; 0xa65e <thermostat()+0x13e>
    a7b2:	cd cf       	rjmp	.-102    	; 0xa74e <thermostat()+0x22e>
    a7b4:	83 30       	cpi	r24, 0x03	; 3
    a7b6:	09 f0       	breq	.+2      	; 0xa7ba <thermostat()+0x29a>
    a7b8:	fc ce       	rjmp	.-520    	; 0xa5b2 <thermostat()+0x92>
    a7ba:	86 e0       	ldi	r24, 0x06	; 6
    a7bc:	f8 2e       	mov	r15, r24
    a7be:	f9 ce       	rjmp	.-526    	; 0xa5b2 <thermostat()+0x92>

0000a7c0 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
    a7c0:	cf 93       	push	r28
    a7c2:	df 93       	push	r29
    a7c4:	fc 01       	movw	r30, r24
    a7c6:	eb 01       	movw	r28, r22
    a7c8:	22 23       	and	r18, r18
    a7ca:	89 f1       	breq	.+98     	; 0xa82e <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x6e>
    a7cc:	88 81       	ld	r24, Y
    a7ce:	80 93 88 0a 	sts	0x0A88, r24	; 0x800a88 <menu_slider_data_max>
    a7d2:	80 81       	ld	r24, Z
    a7d4:	80 93 87 0a 	sts	0x0A87, r24	; 0x800a87 <menu_slider_data_min>
    a7d8:	20 93 86 0a 	sts	0x0A86, r18	; 0x800a86 <menu_slider_data_max_element>
    a7dc:	a4 2f       	mov	r26, r20
    a7de:	b0 e0       	ldi	r27, 0x00	; 0
    a7e0:	a7 57       	subi	r26, 0x77	; 119
    a7e2:	b5 4f       	sbci	r27, 0xF5	; 245
    a7e4:	ac 91       	ld	r26, X
    a7e6:	a0 83       	st	Z, r26
    a7e8:	80 91 88 0a 	lds	r24, 0x0A88	; 0x800a88 <menu_slider_data_max>
    a7ec:	48 2f       	mov	r20, r24
    a7ee:	50 e0       	ldi	r21, 0x00	; 0
    a7f0:	a2 0f       	add	r26, r18
    a7f2:	bb 27       	eor	r27, r27
    a7f4:	bb 1f       	adc	r27, r27
    a7f6:	4a 17       	cp	r20, r26
    a7f8:	5b 07       	cpc	r21, r27
    a7fa:	5c f4       	brge	.+22     	; 0xa812 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x52>
    a7fc:	90 91 87 0a 	lds	r25, 0x0A87	; 0x800a87 <menu_slider_data_min>
    a800:	49 1b       	sub	r20, r25
    a802:	51 09       	sbc	r21, r1
    a804:	90 91 86 0a 	lds	r25, 0x0A86	; 0x800a86 <menu_slider_data_max_element>
    a808:	94 17       	cp	r25, r20
    a80a:	15 06       	cpc	r1, r21
    a80c:	14 f4       	brge	.+4      	; 0xa812 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x52>
    a80e:	82 1b       	sub	r24, r18
    a810:	80 83       	st	Z, r24
    a812:	80 91 88 0a 	lds	r24, 0x0A88	; 0x800a88 <menu_slider_data_max>
    a816:	90 81       	ld	r25, Z
    a818:	89 17       	cp	r24, r25
    a81a:	08 f4       	brcc	.+2      	; 0xa81e <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x5e>
    a81c:	80 83       	st	Z, r24
    a81e:	80 81       	ld	r24, Z
    a820:	82 0f       	add	r24, r18
    a822:	88 83       	st	Y, r24
    a824:	80 91 88 0a 	lds	r24, 0x0A88	; 0x800a88 <menu_slider_data_max>
    a828:	28 17       	cp	r18, r24
    a82a:	08 f0       	brcs	.+2      	; 0xa82e <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x6e>
    a82c:	88 83       	st	Y, r24
    a82e:	df 91       	pop	r29
    a830:	cf 91       	pop	r28
    a832:	08 95       	ret

0000a834 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
    a834:	2f 92       	push	r2
    a836:	3f 92       	push	r3
    a838:	4f 92       	push	r4
    a83a:	5f 92       	push	r5
    a83c:	6f 92       	push	r6
    a83e:	7f 92       	push	r7
    a840:	8f 92       	push	r8
    a842:	9f 92       	push	r9
    a844:	af 92       	push	r10
    a846:	bf 92       	push	r11
    a848:	cf 92       	push	r12
    a84a:	df 92       	push	r13
    a84c:	ef 92       	push	r14
    a84e:	ff 92       	push	r15
    a850:	0f 93       	push	r16
    a852:	1f 93       	push	r17
    a854:	cf 93       	push	r28
    a856:	df 93       	push	r29
    a858:	00 d0       	rcall	.+0      	; 0xa85a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    a85a:	00 d0       	rcall	.+0      	; 0xa85c <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x28>
    a85c:	1f 92       	push	r1
    a85e:	cd b7       	in	r28, 0x3d	; 61
    a860:	de b7       	in	r29, 0x3e	; 62
    a862:	1c 01       	movw	r2, r24
    a864:	2b 01       	movw	r4, r22
    a866:	3a 01       	movw	r6, r20
    a868:	3a 83       	std	Y+2, r19	; 0x02
    a86a:	29 83       	std	Y+1, r18	; 0x01
    a86c:	0b 83       	std	Y+3, r16	; 0x03
    a86e:	9e 2c       	mov	r9, r14
    a870:	dd 82       	std	Y+5, r13	; 0x05
    a872:	cc 82       	std	Y+4, r12	; 0x04
    a874:	bf 82       	std	Y+7, r11	; 0x07
    a876:	ae 82       	std	Y+6, r10	; 0x06
    a878:	70 e0       	ldi	r23, 0x00	; 0
    a87a:	60 e0       	ldi	r22, 0x00	; 0
    a87c:	85 e1       	ldi	r24, 0x15	; 21
    a87e:	9c e0       	ldi	r25, 0x0C	; 12
    a880:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a884:	f1 2c       	mov	r15, r1
    a886:	e1 2c       	mov	r14, r1
    a888:	a9 80       	ldd	r10, Y+1	; 0x01
    a88a:	ba 80       	ldd	r11, Y+2	; 0x02
    a88c:	a4 0c       	add	r10, r4
    a88e:	b5 1c       	adc	r11, r5
    a890:	61 01       	movw	r12, r2
    a892:	c6 0c       	add	r12, r6
    a894:	d7 1c       	adc	r13, r7
    a896:	85 01       	movw	r16, r10
    a898:	0e 19       	sub	r16, r14
    a89a:	1f 09       	sbc	r17, r15
    a89c:	96 01       	movw	r18, r12
    a89e:	2e 19       	sub	r18, r14
    a8a0:	3f 09       	sbc	r19, r15
    a8a2:	a7 01       	movw	r20, r14
    a8a4:	44 0d       	add	r20, r4
    a8a6:	55 1d       	adc	r21, r5
    a8a8:	b7 01       	movw	r22, r14
    a8aa:	62 0d       	add	r22, r2
    a8ac:	73 1d       	adc	r23, r3
    a8ae:	85 e1       	ldi	r24, 0x15	; 21
    a8b0:	9c e0       	ldi	r25, 0x0C	; 12
    a8b2:	0e 94 d5 96 	call	0x12daa	; 0x12daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    a8b6:	2f ef       	ldi	r18, 0xFF	; 255
    a8b8:	e2 1a       	sub	r14, r18
    a8ba:	f2 0a       	sbc	r15, r18
    a8bc:	43 e0       	ldi	r20, 0x03	; 3
    a8be:	e4 16       	cp	r14, r20
    a8c0:	f1 04       	cpc	r15, r1
    a8c2:	49 f7       	brne	.-46     	; 0xa896 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x62>
    a8c4:	09 81       	ldd	r16, Y+1	; 0x01
    a8c6:	1a 81       	ldd	r17, Y+2	; 0x02
    a8c8:	03 50       	subi	r16, 0x03	; 3
    a8ca:	11 09       	sbc	r17, r1
    a8cc:	73 01       	movw	r14, r6
    a8ce:	53 e0       	ldi	r21, 0x03	; 3
    a8d0:	e5 1a       	sub	r14, r21
    a8d2:	f1 08       	sbc	r15, r1
    a8d4:	81 e0       	ldi	r24, 0x01	; 1
    a8d6:	88 12       	cpse	r8, r24
    a8d8:	15 c0       	rjmp	.+42     	; 0xa904 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xd0>
    a8da:	6f ef       	ldi	r22, 0xFF	; 255
    a8dc:	7f ef       	ldi	r23, 0xFF	; 255
    a8de:	85 e1       	ldi	r24, 0x15	; 21
    a8e0:	9c e0       	ldi	r25, 0x0C	; 12
    a8e2:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a8e6:	04 0d       	add	r16, r4
    a8e8:	15 1d       	adc	r17, r5
    a8ea:	91 01       	movw	r18, r2
    a8ec:	2e 0d       	add	r18, r14
    a8ee:	3f 1d       	adc	r19, r15
    a8f0:	a2 01       	movw	r20, r4
    a8f2:	4d 5f       	subi	r20, 0xFD	; 253
    a8f4:	5f 4f       	sbci	r21, 0xFF	; 255
    a8f6:	b1 01       	movw	r22, r2
    a8f8:	6d 5f       	subi	r22, 0xFD	; 253
    a8fa:	7f 4f       	sbci	r23, 0xFF	; 255
    a8fc:	85 e1       	ldi	r24, 0x15	; 21
    a8fe:	9c e0       	ldi	r25, 0x0C	; 12
    a900:	0e 94 4e 96 	call	0x12c9c	; 0x12c9c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    a904:	ec 81       	ldd	r30, Y+4	; 0x04
    a906:	fd 81       	ldd	r31, Y+5	; 0x05
    a908:	80 81       	ld	r24, Z
    a90a:	60 e0       	ldi	r22, 0x00	; 0
    a90c:	b1 2c       	mov	r11, r1
    a90e:	a1 2c       	mov	r10, r1
    a910:	88 23       	and	r24, r24
    a912:	a1 f1       	breq	.+104    	; 0xa97c <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x148>
    a914:	01 90       	ld	r0, Z+
    a916:	00 20       	and	r0, r0
    a918:	e9 f7       	brne	.-6      	; 0xa914 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xe0>
    a91a:	31 97       	sbiw	r30, 0x01	; 1
    a91c:	4c 81       	ldd	r20, Y+4	; 0x04
    a91e:	5d 81       	ldd	r21, Y+5	; 0x05
    a920:	e4 1b       	sub	r30, r20
    a922:	f5 0b       	sbc	r31, r21
_Z22show_string_size_highth():
    a924:	8b 81       	ldd	r24, Y+3	; 0x03
    a926:	88 0f       	add	r24, r24
    a928:	5b 81       	ldd	r21, Y+3	; 0x03
    a92a:	85 0f       	add	r24, r21
    a92c:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
    a92e:	a9 80       	ldd	r10, Y+1	; 0x01
    a930:	ba 80       	ldd	r11, Y+2	; 0x02
    a932:	a8 1a       	sub	r10, r24
    a934:	b1 08       	sbc	r11, r1
    a936:	b6 94       	lsr	r11
    a938:	a7 94       	ror	r10
    a93a:	a2 01       	movw	r20, r4
    a93c:	41 50       	subi	r20, 0x01	; 1
    a93e:	51 09       	sbc	r21, r1
    a940:	4a 0d       	add	r20, r10
    a942:	5b 1d       	adc	r21, r11
_Z22show_string_size_widthhh():
    a944:	86 e0       	ldi	r24, 0x06	; 6
    a946:	e8 9f       	mul	r30, r24
    a948:	f0 01       	movw	r30, r0
    a94a:	11 24       	eor	r1, r1
    a94c:	2b 81       	ldd	r18, Y+3	; 0x03
    a94e:	2e 9f       	mul	r18, r30
    a950:	c0 01       	movw	r24, r0
    a952:	2f 9f       	mul	r18, r31
    a954:	90 0d       	add	r25, r0
    a956:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
    a958:	b3 01       	movw	r22, r6
    a95a:	68 1b       	sub	r22, r24
    a95c:	79 0b       	sbc	r23, r25
    a95e:	76 95       	lsr	r23
    a960:	67 95       	ror	r22
    a962:	62 0d       	add	r22, r2
    a964:	73 1d       	adc	r23, r3
    a966:	c1 2c       	mov	r12, r1
    a968:	ee 24       	eor	r14, r14
    a96a:	ea 94       	dec	r14
    a96c:	fe 2c       	mov	r15, r14
    a96e:	10 e0       	ldi	r17, 0x00	; 0
    a970:	00 e0       	ldi	r16, 0x00	; 0
    a972:	8c 81       	ldd	r24, Y+4	; 0x04
    a974:	9d 81       	ldd	r25, Y+5	; 0x05
    a976:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a97a:	62 e0       	ldi	r22, 0x02	; 2
    a97c:	ee 81       	ldd	r30, Y+6	; 0x06
    a97e:	ff 81       	ldd	r31, Y+7	; 0x07
    a980:	80 81       	ld	r24, Z
    a982:	88 23       	and	r24, r24
    a984:	d1 f1       	breq	.+116    	; 0xa9fa <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x1c6>
    a986:	01 90       	ld	r0, Z+
    a988:	00 20       	and	r0, r0
    a98a:	e9 f7       	brne	.-6      	; 0xa986 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x152>
    a98c:	9f 01       	movw	r18, r30
    a98e:	21 50       	subi	r18, 0x01	; 1
    a990:	31 09       	sbc	r19, r1
    a992:	4e 81       	ldd	r20, Y+6	; 0x06
    a994:	5f 81       	ldd	r21, Y+7	; 0x07
    a996:	24 1b       	sub	r18, r20
    a998:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    a99a:	89 2d       	mov	r24, r9
    a99c:	88 0f       	add	r24, r24
    a99e:	89 0d       	add	r24, r9
    a9a0:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
    a9a2:	e9 81       	ldd	r30, Y+1	; 0x01
    a9a4:	fa 81       	ldd	r31, Y+2	; 0x02
    a9a6:	e8 1b       	sub	r30, r24
    a9a8:	f1 09       	sbc	r31, r1
    a9aa:	cf 01       	movw	r24, r30
    a9ac:	6e 5f       	subi	r22, 0xFE	; 254
    a9ae:	70 e0       	ldi	r23, 0x00	; 0
    a9b0:	0e 94 06 de 	call	0x1bc0c	; 0x1bc0c <__udivmodhi4>
    a9b4:	f1 e0       	ldi	r31, 0x01	; 1
    a9b6:	4f 1a       	sub	r4, r31
    a9b8:	51 08       	sbc	r5, r1
    a9ba:	a4 0c       	add	r10, r4
    a9bc:	b5 1c       	adc	r11, r5
    a9be:	ab 01       	movw	r20, r22
    a9c0:	4a 0d       	add	r20, r10
    a9c2:	5b 1d       	adc	r21, r11
_Z22show_string_size_widthhh():
    a9c4:	86 e0       	ldi	r24, 0x06	; 6
    a9c6:	28 9f       	mul	r18, r24
    a9c8:	90 01       	movw	r18, r0
    a9ca:	11 24       	eor	r1, r1
    a9cc:	92 9e       	mul	r9, r18
    a9ce:	c0 01       	movw	r24, r0
    a9d0:	93 9e       	mul	r9, r19
    a9d2:	90 0d       	add	r25, r0
    a9d4:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
    a9d6:	b3 01       	movw	r22, r6
    a9d8:	68 1b       	sub	r22, r24
    a9da:	79 0b       	sbc	r23, r25
    a9dc:	76 95       	lsr	r23
    a9de:	67 95       	ror	r22
    a9e0:	62 0d       	add	r22, r2
    a9e2:	73 1d       	adc	r23, r3
    a9e4:	c1 2c       	mov	r12, r1
    a9e6:	ee 24       	eor	r14, r14
    a9e8:	ea 94       	dec	r14
    a9ea:	fe 2c       	mov	r15, r14
    a9ec:	10 e0       	ldi	r17, 0x00	; 0
    a9ee:	00 e0       	ldi	r16, 0x00	; 0
    a9f0:	29 2d       	mov	r18, r9
    a9f2:	8e 81       	ldd	r24, Y+6	; 0x06
    a9f4:	9f 81       	ldd	r25, Y+7	; 0x07
    a9f6:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a9fa:	27 96       	adiw	r28, 0x07	; 7
    a9fc:	0f b6       	in	r0, 0x3f	; 63
    a9fe:	f8 94       	cli
    aa00:	de bf       	out	0x3e, r29	; 62
    aa02:	0f be       	out	0x3f, r0	; 63
    aa04:	cd bf       	out	0x3d, r28	; 61
    aa06:	df 91       	pop	r29
    aa08:	cf 91       	pop	r28
    aa0a:	1f 91       	pop	r17
    aa0c:	0f 91       	pop	r16
    aa0e:	ff 90       	pop	r15
    aa10:	ef 90       	pop	r14
    aa12:	df 90       	pop	r13
    aa14:	cf 90       	pop	r12
    aa16:	bf 90       	pop	r11
    aa18:	af 90       	pop	r10
    aa1a:	9f 90       	pop	r9
    aa1c:	8f 90       	pop	r8
    aa1e:	7f 90       	pop	r7
    aa20:	6f 90       	pop	r6
    aa22:	5f 90       	pop	r5
    aa24:	4f 90       	pop	r4
    aa26:	3f 90       	pop	r3
    aa28:	2f 90       	pop	r2
    aa2a:	08 95       	ret

0000aa2c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
    aa2c:	2f 92       	push	r2
    aa2e:	3f 92       	push	r3
    aa30:	4f 92       	push	r4
    aa32:	5f 92       	push	r5
    aa34:	6f 92       	push	r6
    aa36:	7f 92       	push	r7
    aa38:	8f 92       	push	r8
    aa3a:	9f 92       	push	r9
    aa3c:	af 92       	push	r10
    aa3e:	bf 92       	push	r11
    aa40:	cf 92       	push	r12
    aa42:	df 92       	push	r13
    aa44:	ef 92       	push	r14
    aa46:	ff 92       	push	r15
    aa48:	0f 93       	push	r16
    aa4a:	1f 93       	push	r17
    aa4c:	cf 93       	push	r28
    aa4e:	df 93       	push	r29
    aa50:	00 d0       	rcall	.+0      	; 0xaa52 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
    aa52:	1f 92       	push	r1
    aa54:	1f 92       	push	r1
    aa56:	cd b7       	in	r28, 0x3d	; 61
    aa58:	de b7       	in	r29, 0x3e	; 62
    aa5a:	3c 01       	movw	r6, r24
    aa5c:	1b 01       	movw	r2, r22
    aa5e:	54 2e       	mov	r5, r20
    aa60:	42 2e       	mov	r4, r18
    aa62:	0b 83       	std	Y+3, r16	; 0x03
    aa64:	ec 82       	std	Y+4, r14	; 0x04
    aa66:	88 20       	and	r8, r8
    aa68:	41 f0       	breq	.+16     	; 0xaa7a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x4e>
    aa6a:	41 e0       	ldi	r20, 0x01	; 1
    aa6c:	56 01       	movw	r10, r12
    aa6e:	84 16       	cp	r8, r20
    aa70:	21 f0       	breq	.+8      	; 0xaa7a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x4e>
    aa72:	18 e1       	ldi	r17, 0x18	; 24
    aa74:	a1 2e       	mov	r10, r17
    aa76:	06 ec       	ldi	r16, 0xC6	; 198
    aa78:	b0 2e       	mov	r11, r16
    aa7a:	70 e0       	ldi	r23, 0x00	; 0
    aa7c:	60 e0       	ldi	r22, 0x00	; 0
    aa7e:	85 e1       	ldi	r24, 0x15	; 21
    aa80:	9c e0       	ldi	r25, 0x0C	; 12
    aa82:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    aa86:	f1 2c       	mov	r15, r1
    aa88:	e1 2c       	mov	r14, r1
    aa8a:	84 2d       	mov	r24, r4
    aa8c:	90 e0       	ldi	r25, 0x00	; 0
    aa8e:	9a 83       	std	Y+2, r25	; 0x02
    aa90:	89 83       	std	Y+1, r24	; 0x01
    aa92:	85 2c       	mov	r8, r5
    aa94:	91 2c       	mov	r9, r1
    aa96:	2c 01       	movw	r4, r24
    aa98:	42 0c       	add	r4, r2
    aa9a:	53 1c       	adc	r5, r3
    aa9c:	64 01       	movw	r12, r8
    aa9e:	c6 0c       	add	r12, r6
    aaa0:	d7 1c       	adc	r13, r7
    aaa2:	82 01       	movw	r16, r4
    aaa4:	0e 19       	sub	r16, r14
    aaa6:	1f 09       	sbc	r17, r15
    aaa8:	96 01       	movw	r18, r12
    aaaa:	2e 19       	sub	r18, r14
    aaac:	3f 09       	sbc	r19, r15
    aaae:	a1 01       	movw	r20, r2
    aab0:	4e 0d       	add	r20, r14
    aab2:	5f 1d       	adc	r21, r15
    aab4:	b3 01       	movw	r22, r6
    aab6:	6e 0d       	add	r22, r14
    aab8:	7f 1d       	adc	r23, r15
    aaba:	85 e1       	ldi	r24, 0x15	; 21
    aabc:	9c e0       	ldi	r25, 0x0C	; 12
    aabe:	0e 94 d5 96 	call	0x12daa	; 0x12daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    aac2:	9f ef       	ldi	r25, 0xFF	; 255
    aac4:	e9 1a       	sub	r14, r25
    aac6:	f9 0a       	sbc	r15, r25
    aac8:	e3 e0       	ldi	r30, 0x03	; 3
    aaca:	ee 16       	cp	r14, r30
    aacc:	f1 04       	cpc	r15, r1
    aace:	49 f7       	brne	.-46     	; 0xaaa2 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x76>
    aad0:	b5 01       	movw	r22, r10
    aad2:	85 e1       	ldi	r24, 0x15	; 21
    aad4:	9c e0       	ldi	r25, 0x0C	; 12
    aad6:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    aada:	81 01       	movw	r16, r2
    aadc:	03 50       	subi	r16, 0x03	; 3
    aade:	11 09       	sbc	r17, r1
    aae0:	49 81       	ldd	r20, Y+1	; 0x01
    aae2:	5a 81       	ldd	r21, Y+2	; 0x02
    aae4:	04 0f       	add	r16, r20
    aae6:	15 1f       	adc	r17, r21
    aae8:	93 01       	movw	r18, r6
    aaea:	23 50       	subi	r18, 0x03	; 3
    aaec:	31 09       	sbc	r19, r1
    aaee:	28 0d       	add	r18, r8
    aaf0:	39 1d       	adc	r19, r9
    aaf2:	a1 01       	movw	r20, r2
    aaf4:	4d 5f       	subi	r20, 0xFD	; 253
    aaf6:	5f 4f       	sbci	r21, 0xFF	; 255
    aaf8:	b3 01       	movw	r22, r6
    aafa:	6d 5f       	subi	r22, 0xFD	; 253
    aafc:	7f 4f       	sbci	r23, 0xFF	; 255
    aafe:	85 e1       	ldi	r24, 0x15	; 21
    ab00:	9c e0       	ldi	r25, 0x0C	; 12
    ab02:	0e 94 4e 96 	call	0x12c9c	; 0x12c9c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    ab06:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ab08:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ab0a:	80 81       	ld	r24, Z
    ab0c:	88 23       	and	r24, r24
    ab0e:	09 f4       	brne	.+2      	; 0xab12 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xe6>
    ab10:	a4 c0       	rjmp	.+328    	; 0xac5a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x22e>
    ab12:	81 e0       	ldi	r24, 0x01	; 1
    ab14:	b2 e0       	ldi	r27, 0x02	; 2
    ab16:	db 2e       	mov	r13, r27
    ab18:	ed 8d       	ldd	r30, Y+29	; 0x1d
    ab1a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    ab1c:	90 81       	ld	r25, Z
    ab1e:	99 23       	and	r25, r25
    ab20:	09 f4       	brne	.+2      	; 0xab24 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xf8>
    ab22:	9e c0       	rjmp	.+316    	; 0xac60 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x234>
    ab24:	d3 94       	inc	r13
    ab26:	d3 94       	inc	r13
    ab28:	f1 e0       	ldi	r31, 0x01	; 1
    ab2a:	fd 83       	std	Y+5, r31	; 0x05
    ab2c:	51 2c       	mov	r5, r1
    ab2e:	41 2c       	mov	r4, r1
    ab30:	81 30       	cpi	r24, 0x01	; 1
    ab32:	d1 f5       	brne	.+116    	; 0xaba8 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x17c>
    ab34:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ab36:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ab38:	01 90       	ld	r0, Z+
    ab3a:	00 20       	and	r0, r0
    ab3c:	e9 f7       	brne	.-6      	; 0xab38 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x10c>
    ab3e:	9f 01       	movw	r18, r30
    ab40:	21 50       	subi	r18, 0x01	; 1
    ab42:	31 09       	sbc	r19, r1
    ab44:	4b 8d       	ldd	r20, Y+27	; 0x1b
    ab46:	5c 8d       	ldd	r21, Y+28	; 0x1c
    ab48:	24 1b       	sub	r18, r20
    ab4a:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    ab4c:	8b 81       	ldd	r24, Y+3	; 0x03
    ab4e:	88 0f       	add	r24, r24
    ab50:	5b 81       	ldd	r21, Y+3	; 0x03
    ab52:	85 0f       	add	r24, r21
    ab54:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
    ab56:	e9 81       	ldd	r30, Y+1	; 0x01
    ab58:	fa 81       	ldd	r31, Y+2	; 0x02
    ab5a:	e8 1b       	sub	r30, r24
    ab5c:	f1 09       	sbc	r31, r1
    ab5e:	cf 01       	movw	r24, r30
    ab60:	6d 2d       	mov	r22, r13
    ab62:	70 e0       	ldi	r23, 0x00	; 0
    ab64:	0e 94 1a de 	call	0x1bc34	; 0x1bc34 <__divmodhi4>
    ab68:	2b 01       	movw	r4, r22
    ab6a:	a1 01       	movw	r20, r2
    ab6c:	41 50       	subi	r20, 0x01	; 1
    ab6e:	51 09       	sbc	r21, r1
    ab70:	46 0f       	add	r20, r22
    ab72:	57 1f       	adc	r21, r23
_Z22show_string_size_widthhh():
    ab74:	f6 e0       	ldi	r31, 0x06	; 6
    ab76:	2f 9f       	mul	r18, r31
    ab78:	90 01       	movw	r18, r0
    ab7a:	11 24       	eor	r1, r1
    ab7c:	6b 81       	ldd	r22, Y+3	; 0x03
    ab7e:	62 9f       	mul	r22, r18
    ab80:	c0 01       	movw	r24, r0
    ab82:	63 9f       	mul	r22, r19
    ab84:	90 0d       	add	r25, r0
    ab86:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
    ab88:	b4 01       	movw	r22, r8
    ab8a:	68 1b       	sub	r22, r24
    ab8c:	79 0b       	sbc	r23, r25
    ab8e:	76 95       	lsr	r23
    ab90:	67 95       	ror	r22
    ab92:	66 0d       	add	r22, r6
    ab94:	77 1d       	adc	r23, r7
    ab96:	c1 2c       	mov	r12, r1
    ab98:	75 01       	movw	r14, r10
    ab9a:	10 e0       	ldi	r17, 0x00	; 0
    ab9c:	00 e0       	ldi	r16, 0x00	; 0
    ab9e:	2b 81       	ldd	r18, Y+3	; 0x03
    aba0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    aba2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    aba4:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    aba8:	8d 81       	ldd	r24, Y+5	; 0x05
    abaa:	81 30       	cpi	r24, 0x01	; 1
    abac:	f1 f5       	brne	.+124    	; 0xac2a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1fe>
    abae:	ed 8d       	ldd	r30, Y+29	; 0x1d
    abb0:	fe 8d       	ldd	r31, Y+30	; 0x1e
    abb2:	01 90       	ld	r0, Z+
    abb4:	00 20       	and	r0, r0
    abb6:	e9 f7       	brne	.-6      	; 0xabb2 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x186>
    abb8:	9f 01       	movw	r18, r30
    abba:	21 50       	subi	r18, 0x01	; 1
    abbc:	31 09       	sbc	r19, r1
    abbe:	4d 8d       	ldd	r20, Y+29	; 0x1d
    abc0:	5e 8d       	ldd	r21, Y+30	; 0x1e
    abc2:	24 1b       	sub	r18, r20
    abc4:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    abc6:	8c 81       	ldd	r24, Y+4	; 0x04
    abc8:	88 0f       	add	r24, r24
    abca:	5c 81       	ldd	r21, Y+4	; 0x04
    abcc:	85 0f       	add	r24, r21
    abce:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
    abd0:	e9 81       	ldd	r30, Y+1	; 0x01
    abd2:	fa 81       	ldd	r31, Y+2	; 0x02
    abd4:	e8 1b       	sub	r30, r24
    abd6:	f1 09       	sbc	r31, r1
    abd8:	cf 01       	movw	r24, r30
    abda:	88 0f       	add	r24, r24
    abdc:	99 1f       	adc	r25, r25
    abde:	6d 2d       	mov	r22, r13
    abe0:	70 e0       	ldi	r23, 0x00	; 0
    abe2:	0e 94 1a de 	call	0x1bc34	; 0x1bc34 <__divmodhi4>
    abe6:	f1 e0       	ldi	r31, 0x01	; 1
    abe8:	2f 1a       	sub	r2, r31
    abea:	31 08       	sbc	r3, r1
    abec:	26 0e       	add	r2, r22
    abee:	37 1e       	adc	r3, r23
    abf0:	a1 01       	movw	r20, r2
    abf2:	44 0d       	add	r20, r4
    abf4:	55 1d       	adc	r21, r5
_Z22show_string_size_widthhh():
    abf6:	66 e0       	ldi	r22, 0x06	; 6
    abf8:	26 9f       	mul	r18, r22
    abfa:	90 01       	movw	r18, r0
    abfc:	11 24       	eor	r1, r1
    abfe:	ec 81       	ldd	r30, Y+4	; 0x04
    ac00:	e2 9f       	mul	r30, r18
    ac02:	c0 01       	movw	r24, r0
    ac04:	e3 9f       	mul	r30, r19
    ac06:	90 0d       	add	r25, r0
    ac08:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
    ac0a:	b4 01       	movw	r22, r8
    ac0c:	68 1b       	sub	r22, r24
    ac0e:	79 0b       	sbc	r23, r25
    ac10:	76 95       	lsr	r23
    ac12:	67 95       	ror	r22
    ac14:	66 0d       	add	r22, r6
    ac16:	77 1d       	adc	r23, r7
    ac18:	c1 2c       	mov	r12, r1
    ac1a:	75 01       	movw	r14, r10
    ac1c:	10 e0       	ldi	r17, 0x00	; 0
    ac1e:	00 e0       	ldi	r16, 0x00	; 0
    ac20:	2e 2f       	mov	r18, r30
    ac22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    ac24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    ac26:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ac2a:	0f 90       	pop	r0
    ac2c:	0f 90       	pop	r0
    ac2e:	0f 90       	pop	r0
    ac30:	0f 90       	pop	r0
    ac32:	0f 90       	pop	r0
    ac34:	df 91       	pop	r29
    ac36:	cf 91       	pop	r28
    ac38:	1f 91       	pop	r17
    ac3a:	0f 91       	pop	r16
    ac3c:	ff 90       	pop	r15
    ac3e:	ef 90       	pop	r14
    ac40:	df 90       	pop	r13
    ac42:	cf 90       	pop	r12
    ac44:	bf 90       	pop	r11
    ac46:	af 90       	pop	r10
    ac48:	9f 90       	pop	r9
    ac4a:	8f 90       	pop	r8
    ac4c:	7f 90       	pop	r7
    ac4e:	6f 90       	pop	r6
    ac50:	5f 90       	pop	r5
    ac52:	4f 90       	pop	r4
    ac54:	3f 90       	pop	r3
    ac56:	2f 90       	pop	r2
    ac58:	08 95       	ret
    ac5a:	80 e0       	ldi	r24, 0x00	; 0
    ac5c:	d1 2c       	mov	r13, r1
    ac5e:	5c cf       	rjmp	.-328    	; 0xab18 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xec>
    ac60:	1d 82       	std	Y+5, r1	; 0x05
    ac62:	64 cf       	rjmp	.-312    	; 0xab2c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x100>

0000ac64 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z15button_switch_1jjhhhhPcS_():
    ac64:	2f 92       	push	r2
    ac66:	3f 92       	push	r3
    ac68:	4f 92       	push	r4
    ac6a:	5f 92       	push	r5
    ac6c:	6f 92       	push	r6
    ac6e:	7f 92       	push	r7
    ac70:	8f 92       	push	r8
    ac72:	9f 92       	push	r9
    ac74:	af 92       	push	r10
    ac76:	bf 92       	push	r11
    ac78:	cf 92       	push	r12
    ac7a:	df 92       	push	r13
    ac7c:	ef 92       	push	r14
    ac7e:	ff 92       	push	r15
    ac80:	0f 93       	push	r16
    ac82:	1f 93       	push	r17
    ac84:	cf 93       	push	r28
    ac86:	df 93       	push	r29
    ac88:	00 d0       	rcall	.+0      	; 0xac8a <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x26>
    ac8a:	1f 92       	push	r1
    ac8c:	1f 92       	push	r1
    ac8e:	cd b7       	in	r28, 0x3d	; 61
    ac90:	de b7       	in	r29, 0x3e	; 62
    ac92:	4c 01       	movw	r8, r24
    ac94:	3b 01       	movw	r6, r22
    ac96:	44 2e       	mov	r4, r20
    ac98:	f2 2e       	mov	r15, r18
    ac9a:	09 83       	std	Y+1, r16	; 0x01
    ac9c:	db 82       	std	Y+3, r13	; 0x03
    ac9e:	ca 82       	std	Y+2, r12	; 0x02
    aca0:	15 01       	movw	r2, r10
    aca2:	70 e0       	ldi	r23, 0x00	; 0
    aca4:	60 e0       	ldi	r22, 0x00	; 0
    aca6:	85 e1       	ldi	r24, 0x15	; 21
    aca8:	9c e0       	ldi	r25, 0x0C	; 12
    acaa:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    acae:	1d 82       	std	Y+5, r1	; 0x05
    acb0:	1c 82       	std	Y+4, r1	; 0x04
    acb2:	af 2c       	mov	r10, r15
    acb4:	b1 2c       	mov	r11, r1
    acb6:	65 01       	movw	r12, r10
    acb8:	c6 0c       	add	r12, r6
    acba:	d7 1c       	adc	r13, r7
    acbc:	51 2c       	mov	r5, r1
    acbe:	72 01       	movw	r14, r4
    acc0:	e8 0c       	add	r14, r8
    acc2:	f9 1c       	adc	r15, r9
    acc4:	86 01       	movw	r16, r12
    acc6:	8c 81       	ldd	r24, Y+4	; 0x04
    acc8:	9d 81       	ldd	r25, Y+5	; 0x05
    acca:	08 1b       	sub	r16, r24
    accc:	19 0b       	sbc	r17, r25
    acce:	97 01       	movw	r18, r14
    acd0:	28 1b       	sub	r18, r24
    acd2:	39 0b       	sbc	r19, r25
    acd4:	ac 01       	movw	r20, r24
    acd6:	46 0d       	add	r20, r6
    acd8:	57 1d       	adc	r21, r7
    acda:	bc 01       	movw	r22, r24
    acdc:	68 0d       	add	r22, r8
    acde:	79 1d       	adc	r23, r9
    ace0:	85 e1       	ldi	r24, 0x15	; 21
    ace2:	9c e0       	ldi	r25, 0x0C	; 12
    ace4:	0e 94 d5 96 	call	0x12daa	; 0x12daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    ace8:	8c 81       	ldd	r24, Y+4	; 0x04
    acea:	9d 81       	ldd	r25, Y+5	; 0x05
    acec:	01 96       	adiw	r24, 0x01	; 1
    acee:	9d 83       	std	Y+5, r25	; 0x05
    acf0:	8c 83       	std	Y+4, r24	; 0x04
    acf2:	03 97       	sbiw	r24, 0x03	; 3
    acf4:	39 f7       	brne	.-50     	; 0xacc4 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x60>
    acf6:	ea 81       	ldd	r30, Y+2	; 0x02
    acf8:	fb 81       	ldd	r31, Y+3	; 0x03
    acfa:	01 90       	ld	r0, Z+
    acfc:	00 20       	and	r0, r0
    acfe:	e9 f7       	brne	.-6      	; 0xacfa <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x96>
    ad00:	31 97       	sbiw	r30, 0x01	; 1
    ad02:	8a 81       	ldd	r24, Y+2	; 0x02
    ad04:	9b 81       	ldd	r25, Y+3	; 0x03
    ad06:	e8 1b       	sub	r30, r24
    ad08:	f9 0b       	sbc	r31, r25
_Z22show_string_size_highth():
    ad0a:	89 81       	ldd	r24, Y+1	; 0x01
    ad0c:	88 0f       	add	r24, r24
    ad0e:	99 81       	ldd	r25, Y+1	; 0x01
    ad10:	89 0f       	add	r24, r25
    ad12:	88 0f       	add	r24, r24
_Z15button_switch_1jjhhhhPcS_():
    ad14:	a5 01       	movw	r20, r10
    ad16:	48 1b       	sub	r20, r24
    ad18:	51 09       	sbc	r21, r1
    ad1a:	57 ff       	sbrs	r21, 7
    ad1c:	02 c0       	rjmp	.+4      	; 0xad22 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0xbe>
    ad1e:	4d 5f       	subi	r20, 0xFD	; 253
    ad20:	5f 4f       	sbci	r21, 0xFF	; 255
    ad22:	55 95       	asr	r21
    ad24:	47 95       	ror	r20
    ad26:	55 95       	asr	r21
    ad28:	47 95       	ror	r20
    ad2a:	46 0d       	add	r20, r6
    ad2c:	57 2d       	mov	r21, r7
    ad2e:	51 1d       	adc	r21, r1
_Z22show_string_size_widthhh():
    ad30:	26 e0       	ldi	r18, 0x06	; 6
    ad32:	e2 9f       	mul	r30, r18
    ad34:	f0 01       	movw	r30, r0
    ad36:	11 24       	eor	r1, r1
    ad38:	29 81       	ldd	r18, Y+1	; 0x01
    ad3a:	2e 9f       	mul	r18, r30
    ad3c:	c0 01       	movw	r24, r0
    ad3e:	2f 9f       	mul	r18, r31
    ad40:	90 0d       	add	r25, r0
    ad42:	11 24       	eor	r1, r1
_Z15button_switch_1jjhhhhPcS_():
    ad44:	99 27       	eor	r25, r25
    ad46:	b2 01       	movw	r22, r4
    ad48:	68 1b       	sub	r22, r24
    ad4a:	79 0b       	sbc	r23, r25
    ad4c:	77 ff       	sbrs	r23, 7
    ad4e:	02 c0       	rjmp	.+4      	; 0xad54 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0xf0>
    ad50:	6f 5f       	subi	r22, 0xFF	; 255
    ad52:	7f 4f       	sbci	r23, 0xFF	; 255
    ad54:	75 95       	asr	r23
    ad56:	67 95       	ror	r22
    ad58:	68 0d       	add	r22, r8
    ad5a:	79 2d       	mov	r23, r9
    ad5c:	71 1d       	adc	r23, r1
    ad5e:	c1 2c       	mov	r12, r1
    ad60:	ee 24       	eor	r14, r14
    ad62:	ea 94       	dec	r14
    ad64:	fe 2c       	mov	r15, r14
    ad66:	10 e0       	ldi	r17, 0x00	; 0
    ad68:	00 e0       	ldi	r16, 0x00	; 0
    ad6a:	29 81       	ldd	r18, Y+1	; 0x01
    ad6c:	8a 81       	ldd	r24, Y+2	; 0x02
    ad6e:	9b 81       	ldd	r25, Y+3	; 0x03
    ad70:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ad74:	f1 01       	movw	r30, r2
    ad76:	01 90       	ld	r0, Z+
    ad78:	00 20       	and	r0, r0
    ad7a:	e9 f7       	brne	.-6      	; 0xad76 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x112>
    ad7c:	31 97       	sbiw	r30, 0x01	; 1
    ad7e:	e2 19       	sub	r30, r2
    ad80:	f3 09       	sbc	r31, r3
    ad82:	a5 01       	movw	r20, r10
    ad84:	46 50       	subi	r20, 0x06	; 6
    ad86:	51 09       	sbc	r21, r1
    ad88:	57 ff       	sbrs	r21, 7
    ad8a:	02 c0       	rjmp	.+4      	; 0xad90 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x12c>
    ad8c:	4d 5f       	subi	r20, 0xFD	; 253
    ad8e:	5f 4f       	sbci	r21, 0xFF	; 255
    ad90:	55 95       	asr	r21
    ad92:	47 95       	ror	r20
    ad94:	55 95       	asr	r21
    ad96:	47 95       	ror	r20
    ad98:	55 27       	eor	r21, r21
    ad9a:	ca 01       	movw	r24, r20
    ad9c:	88 0f       	add	r24, r24
    ad9e:	99 1f       	adc	r25, r25
    ada0:	48 0f       	add	r20, r24
    ada2:	59 1f       	adc	r21, r25
    ada4:	46 0d       	add	r20, r6
    ada6:	57 1d       	adc	r21, r7
_Z22show_string_size_widthhh():
    ada8:	86 e0       	ldi	r24, 0x06	; 6
    adaa:	e8 9f       	mul	r30, r24
    adac:	f0 01       	movw	r30, r0
    adae:	11 24       	eor	r1, r1
_Z15button_switch_1jjhhhhPcS_():
    adb0:	ff 27       	eor	r31, r31
    adb2:	b2 01       	movw	r22, r4
    adb4:	6e 1b       	sub	r22, r30
    adb6:	7f 0b       	sbc	r23, r31
    adb8:	77 ff       	sbrs	r23, 7
    adba:	02 c0       	rjmp	.+4      	; 0xadc0 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x15c>
    adbc:	6f 5f       	subi	r22, 0xFF	; 255
    adbe:	7f 4f       	sbci	r23, 0xFF	; 255
    adc0:	75 95       	asr	r23
    adc2:	67 95       	ror	r22
    adc4:	68 0d       	add	r22, r8
    adc6:	79 2d       	mov	r23, r9
    adc8:	71 1d       	adc	r23, r1
    adca:	c1 2c       	mov	r12, r1
    adcc:	ee 24       	eor	r14, r14
    adce:	ea 94       	dec	r14
    add0:	fe 2c       	mov	r15, r14
    add2:	10 e0       	ldi	r17, 0x00	; 0
    add4:	00 e0       	ldi	r16, 0x00	; 0
    add6:	21 e0       	ldi	r18, 0x01	; 1
    add8:	c1 01       	movw	r24, r2
    adda:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    adde:	0f 90       	pop	r0
    ade0:	0f 90       	pop	r0
    ade2:	0f 90       	pop	r0
    ade4:	0f 90       	pop	r0
    ade6:	0f 90       	pop	r0
    ade8:	df 91       	pop	r29
    adea:	cf 91       	pop	r28
    adec:	1f 91       	pop	r17
    adee:	0f 91       	pop	r16
    adf0:	ff 90       	pop	r15
    adf2:	ef 90       	pop	r14
    adf4:	df 90       	pop	r13
    adf6:	cf 90       	pop	r12
    adf8:	bf 90       	pop	r11
    adfa:	af 90       	pop	r10
    adfc:	9f 90       	pop	r9
    adfe:	8f 90       	pop	r8
    ae00:	7f 90       	pop	r7
    ae02:	6f 90       	pop	r6
    ae04:	5f 90       	pop	r5
    ae06:	4f 90       	pop	r4
    ae08:	3f 90       	pop	r3
    ae0a:	2f 90       	pop	r2
    ae0c:	08 95       	ret

0000ae0e <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
    ae0e:	2f 92       	push	r2
    ae10:	3f 92       	push	r3
    ae12:	4f 92       	push	r4
    ae14:	5f 92       	push	r5
    ae16:	6f 92       	push	r6
    ae18:	7f 92       	push	r7
    ae1a:	8f 92       	push	r8
    ae1c:	9f 92       	push	r9
    ae1e:	af 92       	push	r10
    ae20:	bf 92       	push	r11
    ae22:	cf 92       	push	r12
    ae24:	df 92       	push	r13
    ae26:	ef 92       	push	r14
    ae28:	ff 92       	push	r15
    ae2a:	0f 93       	push	r16
    ae2c:	1f 93       	push	r17
    ae2e:	cf 93       	push	r28
    ae30:	df 93       	push	r29
    ae32:	00 d0       	rcall	.+0      	; 0xae34 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x26>
    ae34:	1f 92       	push	r1
    ae36:	1f 92       	push	r1
    ae38:	cd b7       	in	r28, 0x3d	; 61
    ae3a:	de b7       	in	r29, 0x3e	; 62
    ae3c:	6c 01       	movw	r12, r24
    ae3e:	5b 01       	movw	r10, r22
    ae40:	1a 01       	movw	r2, r20
    ae42:	29 01       	movw	r4, r18
    ae44:	90 2e       	mov	r9, r16
    ae46:	8e 2c       	mov	r8, r14
    ae48:	70 e0       	ldi	r23, 0x00	; 0
    ae4a:	60 e0       	ldi	r22, 0x00	; 0
    ae4c:	85 e1       	ldi	r24, 0x15	; 21
    ae4e:	9c e0       	ldi	r25, 0x0C	; 12
    ae50:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    ae54:	f1 2c       	mov	r15, r1
    ae56:	e1 2c       	mov	r14, r1
    ae58:	35 01       	movw	r6, r10
    ae5a:	64 0c       	add	r6, r4
    ae5c:	75 1c       	adc	r7, r5
    ae5e:	c6 01       	movw	r24, r12
    ae60:	82 0d       	add	r24, r2
    ae62:	93 1d       	adc	r25, r3
    ae64:	9d 83       	std	Y+5, r25	; 0x05
    ae66:	8c 83       	std	Y+4, r24	; 0x04
    ae68:	83 01       	movw	r16, r6
    ae6a:	0e 19       	sub	r16, r14
    ae6c:	1f 09       	sbc	r17, r15
    ae6e:	2c 81       	ldd	r18, Y+4	; 0x04
    ae70:	3d 81       	ldd	r19, Y+5	; 0x05
    ae72:	2e 19       	sub	r18, r14
    ae74:	3f 09       	sbc	r19, r15
    ae76:	a5 01       	movw	r20, r10
    ae78:	4e 0d       	add	r20, r14
    ae7a:	5f 1d       	adc	r21, r15
    ae7c:	b6 01       	movw	r22, r12
    ae7e:	6e 0d       	add	r22, r14
    ae80:	7f 1d       	adc	r23, r15
    ae82:	85 e1       	ldi	r24, 0x15	; 21
    ae84:	9c e0       	ldi	r25, 0x0C	; 12
    ae86:	0e 94 d5 96 	call	0x12daa	; 0x12daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    ae8a:	9f ef       	ldi	r25, 0xFF	; 255
    ae8c:	e9 1a       	sub	r14, r25
    ae8e:	f9 0a       	sbc	r15, r25
    ae90:	23 e0       	ldi	r18, 0x03	; 3
    ae92:	e2 16       	cp	r14, r18
    ae94:	f1 04       	cpc	r15, r1
    ae96:	41 f7       	brne	.-48     	; 0xae68 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x5a>
    ae98:	89 82       	std	Y+1, r8	; 0x01
    ae9a:	1a 82       	std	Y+2, r1	; 0x02
    ae9c:	ce 01       	movw	r24, r28
    ae9e:	01 96       	adiw	r24, 0x01	; 1
    aea0:	fc 01       	movw	r30, r24
    aea2:	01 90       	ld	r0, Z+
    aea4:	00 20       	and	r0, r0
    aea6:	e9 f7       	brne	.-6      	; 0xaea2 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x94>
    aea8:	31 97       	sbiw	r30, 0x01	; 1
    aeaa:	e8 1b       	sub	r30, r24
    aeac:	f9 0b       	sbc	r31, r25
_Z22show_string_size_highth():
    aeae:	29 2d       	mov	r18, r9
    aeb0:	22 0f       	add	r18, r18
    aeb2:	29 0d       	add	r18, r9
    aeb4:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
    aeb6:	a2 01       	movw	r20, r4
    aeb8:	42 1b       	sub	r20, r18
    aeba:	51 09       	sbc	r21, r1
    aebc:	56 95       	lsr	r21
    aebe:	47 95       	ror	r20
    aec0:	56 95       	lsr	r21
    aec2:	47 95       	ror	r20
    aec4:	4a 0d       	add	r20, r10
    aec6:	5b 2d       	mov	r21, r11
    aec8:	51 1d       	adc	r21, r1
_Z22show_string_size_widthhh():
    aeca:	26 e0       	ldi	r18, 0x06	; 6
    aecc:	e2 9f       	mul	r30, r18
    aece:	f0 01       	movw	r30, r0
    aed0:	11 24       	eor	r1, r1
    aed2:	9e 9e       	mul	r9, r30
    aed4:	90 01       	movw	r18, r0
    aed6:	9f 9e       	mul	r9, r31
    aed8:	30 0d       	add	r19, r0
    aeda:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
    aedc:	33 27       	eor	r19, r19
    aede:	b1 01       	movw	r22, r2
    aee0:	62 1b       	sub	r22, r18
    aee2:	73 0b       	sbc	r23, r19
    aee4:	76 95       	lsr	r23
    aee6:	67 95       	ror	r22
    aee8:	6c 0d       	add	r22, r12
    aeea:	7d 2d       	mov	r23, r13
    aeec:	71 1d       	adc	r23, r1
    aeee:	c1 2c       	mov	r12, r1
    aef0:	ee 24       	eor	r14, r14
    aef2:	ea 94       	dec	r14
    aef4:	fe 2c       	mov	r15, r14
    aef6:	10 e0       	ldi	r17, 0x00	; 0
    aef8:	00 e0       	ldi	r16, 0x00	; 0
    aefa:	29 2d       	mov	r18, r9
    aefc:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    af00:	0f 90       	pop	r0
    af02:	0f 90       	pop	r0
    af04:	0f 90       	pop	r0
    af06:	0f 90       	pop	r0
    af08:	0f 90       	pop	r0
    af0a:	df 91       	pop	r29
    af0c:	cf 91       	pop	r28
    af0e:	1f 91       	pop	r17
    af10:	0f 91       	pop	r16
    af12:	ff 90       	pop	r15
    af14:	ef 90       	pop	r14
    af16:	df 90       	pop	r13
    af18:	cf 90       	pop	r12
    af1a:	bf 90       	pop	r11
    af1c:	af 90       	pop	r10
    af1e:	9f 90       	pop	r9
    af20:	8f 90       	pop	r8
    af22:	7f 90       	pop	r7
    af24:	6f 90       	pop	r6
    af26:	5f 90       	pop	r5
    af28:	4f 90       	pop	r4
    af2a:	3f 90       	pop	r3
    af2c:	2f 90       	pop	r2
    af2e:	08 95       	ret

0000af30 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
    af30:	ef 92       	push	r14
    af32:	ff 92       	push	r15
    af34:	0f 93       	push	r16
    af36:	1f 93       	push	r17
_Z10is_pressediiiiii():
    af38:	80 17       	cp	r24, r16
    af3a:	91 07       	cpc	r25, r17
    af3c:	74 f4       	brge	.+28     	; 0xaf5a <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
    af3e:	84 0f       	add	r24, r20
    af40:	95 1f       	adc	r25, r21
_Z10is_pressediiiiii():
    af42:	08 17       	cp	r16, r24
    af44:	19 07       	cpc	r17, r25
    af46:	4c f4       	brge	.+18     	; 0xaf5a <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
    af48:	6e 15       	cp	r22, r14
    af4a:	7f 05       	cpc	r23, r15
    af4c:	34 f4       	brge	.+12     	; 0xaf5a <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
    af4e:	62 0f       	add	r22, r18
    af50:	73 1f       	adc	r23, r19
_Z10is_pressediiiiii():
    af52:	81 e0       	ldi	r24, 0x01	; 1
    af54:	e6 16       	cp	r14, r22
    af56:	f7 06       	cpc	r15, r23
    af58:	0c f0       	brlt	.+2      	; 0xaf5c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
    af5a:	80 e0       	ldi	r24, 0x00	; 0
    af5c:	1f 91       	pop	r17
    af5e:	0f 91       	pop	r16
    af60:	ff 90       	pop	r15
    af62:	ef 90       	pop	r14
    af64:	08 95       	ret

0000af66 <draw_menu(bool)>:
_Z9draw_menub():
    af66:	2f 92       	push	r2
    af68:	3f 92       	push	r3
    af6a:	4f 92       	push	r4
    af6c:	5f 92       	push	r5
    af6e:	6f 92       	push	r6
    af70:	7f 92       	push	r7
    af72:	8f 92       	push	r8
    af74:	9f 92       	push	r9
    af76:	af 92       	push	r10
    af78:	bf 92       	push	r11
    af7a:	cf 92       	push	r12
    af7c:	df 92       	push	r13
    af7e:	ef 92       	push	r14
    af80:	ff 92       	push	r15
    af82:	0f 93       	push	r16
    af84:	1f 93       	push	r17
    af86:	cf 93       	push	r28
    af88:	df 93       	push	r29
    af8a:	cd b7       	in	r28, 0x3d	; 61
    af8c:	de b7       	in	r29, 0x3e	; 62
    af8e:	c3 5e       	subi	r28, 0xE3	; 227
    af90:	d1 09       	sbc	r29, r1
    af92:	0f b6       	in	r0, 0x3f	; 63
    af94:	f8 94       	cli
    af96:	de bf       	out	0x3e, r29	; 62
    af98:	0f be       	out	0x3f, r0	; 63
    af9a:	cd bf       	out	0x3d, r28	; 61
    af9c:	f8 2e       	mov	r15, r24
    af9e:	ce 01       	movw	r24, r28
    afa0:	8f 54       	subi	r24, 0x4F	; 79
    afa2:	9f 4f       	sbci	r25, 0xFF	; 255
    afa4:	0e 94 07 39 	call	0x720e	; 0x720e <MenuHistoryGetMenu(unsigned char*)>
    afa8:	3c 01       	movw	r6, r24
    afaa:	60 e0       	ldi	r22, 0x00	; 0
    afac:	83 ef       	ldi	r24, 0xF3	; 243
    afae:	9b e0       	ldi	r25, 0x0B	; 11
    afb0:	0e 94 7d ab 	call	0x156fa	; 0x156fa <LCDWIKI_TOUCH::TP_Scan(unsigned char)>
    afb4:	83 ef       	ldi	r24, 0xF3	; 243
    afb6:	9b e0       	ldi	r25, 0x0B	; 11
    afb8:	0e 94 50 ac 	call	0x158a0	; 0x158a0 <LCDWIKI_TOUCH::TP_Get_State() const>
    afbc:	87 ff       	sbrs	r24, 7
    afbe:	98 c1       	rjmp	.+816    	; 0xb2f0 <draw_menu(bool)+0x38a>
    afc0:	f1 10       	cpse	r15, r1
    afc2:	96 c1       	rjmp	.+812    	; 0xb2f0 <draw_menu(bool)+0x38a>
    afc4:	20 91 f7 0b 	lds	r18, 0x0BF7	; 0x800bf7 <my_touch+0x4>
    afc8:	30 91 f8 0b 	lds	r19, 0x0BF8	; 0x800bf8 <my_touch+0x5>
    afcc:	ce 53       	subi	r28, 0x3E	; 62
    afce:	df 4f       	sbci	r29, 0xFF	; 255
    afd0:	39 83       	std	Y+1, r19	; 0x01
    afd2:	28 83       	st	Y, r18
    afd4:	c2 5c       	subi	r28, 0xC2	; 194
    afd6:	d0 40       	sbci	r29, 0x00	; 0
    afd8:	40 91 f9 0b 	lds	r20, 0x0BF9	; 0x800bf9 <my_touch+0x6>
    afdc:	50 91 fa 0b 	lds	r21, 0x0BFA	; 0x800bfa <my_touch+0x7>
    afe0:	cc 53       	subi	r28, 0x3C	; 60
    afe2:	df 4f       	sbci	r29, 0xFF	; 255
    afe4:	59 83       	std	Y+1, r21	; 0x01
    afe6:	48 83       	st	Y, r20
    afe8:	c4 5c       	subi	r28, 0xC4	; 196
    afea:	d0 40       	sbci	r29, 0x00	; 0
    afec:	83 01       	movw	r16, r6
    afee:	0a 53       	subi	r16, 0x3A	; 58
    aff0:	1d 4f       	sbci	r17, 0xFD	; 253
    aff2:	f8 01       	movw	r30, r16
    aff4:	65 91       	lpm	r22, Z+
    aff6:	74 91       	lpm	r23, Z
    aff8:	ca 54       	subi	r28, 0x4A	; 74
    affa:	df 4f       	sbci	r29, 0xFF	; 255
    affc:	79 83       	std	Y+1, r23	; 0x01
    affe:	68 83       	st	Y, r22
    b000:	c6 5b       	subi	r28, 0xB6	; 182
    b002:	d0 40       	sbci	r29, 0x00	; 0
    b004:	63 01       	movw	r12, r6
    b006:	78 e3       	ldi	r23, 0x38	; 56
    b008:	c7 1a       	sub	r12, r23
    b00a:	7d ef       	ldi	r23, 0xFD	; 253
    b00c:	d7 0a       	sbc	r13, r23
    b00e:	f6 01       	movw	r30, r12
    b010:	85 91       	lpm	r24, Z+
    b012:	94 91       	lpm	r25, Z
    b014:	c8 54       	subi	r28, 0x48	; 72
    b016:	df 4f       	sbci	r29, 0xFF	; 255
    b018:	99 83       	std	Y+1, r25	; 0x01
    b01a:	88 83       	st	Y, r24
    b01c:	c8 5b       	subi	r28, 0xB8	; 184
    b01e:	d0 40       	sbci	r29, 0x00	; 0
    b020:	f3 01       	movw	r30, r6
    b022:	ee 52       	subi	r30, 0x2E	; 46
    b024:	fd 4f       	sbci	r31, 0xFD	; 253
    b026:	25 91       	lpm	r18, Z+
    b028:	34 91       	lpm	r19, Z
    b02a:	53 01       	movw	r10, r6
    b02c:	9b e3       	ldi	r25, 0x3B	; 59
    b02e:	a9 1a       	sub	r10, r25
    b030:	9d ef       	ldi	r25, 0xFD	; 253
    b032:	b9 0a       	sbc	r11, r25
    b034:	f5 01       	movw	r30, r10
    b036:	84 91       	lpm	r24, Z
    b038:	cf 54       	subi	r28, 0x4F	; 79
    b03a:	df 4f       	sbci	r29, 0xFF	; 255
    b03c:	68 81       	ld	r22, Y
    b03e:	c1 5b       	subi	r28, 0xB1	; 177
    b040:	d0 40       	sbci	r29, 0x00	; 0
    b042:	70 e0       	ldi	r23, 0x00	; 0
    b044:	4f ef       	ldi	r20, 0xFF	; 255
    b046:	90 e0       	ldi	r25, 0x00	; 0
    b048:	f9 01       	movw	r30, r18
    b04a:	19 95       	eicall
    b04c:	91 2c       	mov	r9, r1
    b04e:	88 23       	and	r24, r24
    b050:	11 f0       	breq	.+4      	; 0xb056 <draw_menu(bool)+0xf0>
    b052:	99 24       	eor	r9, r9
    b054:	93 94       	inc	r9
    b056:	f3 01       	movw	r30, r6
    b058:	ec 52       	subi	r30, 0x2C	; 44
    b05a:	fd 4f       	sbci	r31, 0xFD	; 253
    b05c:	25 91       	lpm	r18, Z+
    b05e:	34 91       	lpm	r19, Z
    b060:	f5 01       	movw	r30, r10
    b062:	84 91       	lpm	r24, Z
    b064:	cf 54       	subi	r28, 0x4F	; 79
    b066:	df 4f       	sbci	r29, 0xFF	; 255
    b068:	68 81       	ld	r22, Y
    b06a:	c1 5b       	subi	r28, 0xB1	; 177
    b06c:	d0 40       	sbci	r29, 0x00	; 0
    b06e:	70 e0       	ldi	r23, 0x00	; 0
    b070:	4f ef       	ldi	r20, 0xFF	; 255
    b072:	90 e0       	ldi	r25, 0x00	; 0
    b074:	f9 01       	movw	r30, r18
    b076:	19 95       	eicall
    b078:	81 11       	cpse	r24, r1
    b07a:	47 c1       	rjmp	.+654    	; 0xb30a <draw_menu(bool)+0x3a4>
    b07c:	e8 94       	clt
    b07e:	91 f8       	bld	r9, 1
    b080:	f3 01       	movw	r30, r6
    b082:	ea 52       	subi	r30, 0x2A	; 42
    b084:	fd 4f       	sbci	r31, 0xFD	; 253
    b086:	25 91       	lpm	r18, Z+
    b088:	34 91       	lpm	r19, Z
    b08a:	f5 01       	movw	r30, r10
    b08c:	84 91       	lpm	r24, Z
    b08e:	cf 54       	subi	r28, 0x4F	; 79
    b090:	df 4f       	sbci	r29, 0xFF	; 255
    b092:	68 81       	ld	r22, Y
    b094:	c1 5b       	subi	r28, 0xB1	; 177
    b096:	d0 40       	sbci	r29, 0x00	; 0
    b098:	70 e0       	ldi	r23, 0x00	; 0
    b09a:	4f ef       	ldi	r20, 0xFF	; 255
    b09c:	90 e0       	ldi	r25, 0x00	; 0
    b09e:	f9 01       	movw	r30, r18
    b0a0:	19 95       	eicall
    b0a2:	81 11       	cpse	r24, r1
    b0a4:	35 c1       	rjmp	.+618    	; 0xb310 <draw_menu(bool)+0x3aa>
    b0a6:	89 2d       	mov	r24, r9
    b0a8:	8b 7f       	andi	r24, 0xFB	; 251
    b0aa:	f1 10       	cpse	r15, r1
    b0ac:	34 c1       	rjmp	.+616    	; 0xb316 <draw_menu(bool)+0x3b0>
    b0ae:	87 7f       	andi	r24, 0xF7	; 247
    b0b0:	cd 52       	subi	r28, 0x2D	; 45
    b0b2:	df 4f       	sbci	r29, 0xFF	; 255
    b0b4:	88 83       	st	Y, r24
    b0b6:	c3 5d       	subi	r28, 0xD3	; 211
    b0b8:	d0 40       	sbci	r29, 0x00	; 0
    b0ba:	f3 01       	movw	r30, r6
    b0bc:	ef 52       	subi	r30, 0x2F	; 47
    b0be:	fd 4f       	sbci	r31, 0xFD	; 253
    b0c0:	84 91       	lpm	r24, Z
    b0c2:	cd 52       	subi	r28, 0x2D	; 45
    b0c4:	df 4f       	sbci	r29, 0xFF	; 255
    b0c6:	68 81       	ld	r22, Y
    b0c8:	c3 5d       	subi	r28, 0xD3	; 211
    b0ca:	d0 40       	sbci	r29, 0x00	; 0
    b0cc:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <enable_redraw(unsigned char, unsigned char)>
    b0d0:	88 23       	and	r24, r24
    b0d2:	e1 f0       	breq	.+56     	; 0xb10c <draw_menu(bool)+0x1a6>
    b0d4:	f3 01       	movw	r30, r6
    b0d6:	65 91       	lpm	r22, Z+
    b0d8:	74 91       	lpm	r23, Z
    b0da:	ce 01       	movw	r24, r28
    b0dc:	01 96       	adiw	r24, 0x01	; 1
    b0de:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    b0e2:	f6 01       	movw	r30, r12
    b0e4:	45 91       	lpm	r20, Z+
    b0e6:	54 91       	lpm	r21, Z
    b0e8:	f8 01       	movw	r30, r16
    b0ea:	65 91       	lpm	r22, Z+
    b0ec:	74 91       	lpm	r23, Z
    b0ee:	4b 5f       	subi	r20, 0xFB	; 251
    b0f0:	5f 4f       	sbci	r21, 0xFF	; 255
    b0f2:	6b 5f       	subi	r22, 0xFB	; 251
    b0f4:	7f 4f       	sbci	r23, 0xFF	; 255
    b0f6:	c1 2c       	mov	r12, r1
    b0f8:	ee 24       	eor	r14, r14
    b0fa:	ea 94       	dec	r14
    b0fc:	fe 2c       	mov	r15, r14
    b0fe:	10 e0       	ldi	r17, 0x00	; 0
    b100:	00 e0       	ldi	r16, 0x00	; 0
    b102:	22 e0       	ldi	r18, 0x02	; 2
    b104:	ce 01       	movw	r24, r28
    b106:	01 96       	adiw	r24, 0x01	; 1
    b108:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    b10c:	91 2c       	mov	r9, r1
    b10e:	c6 53       	subi	r28, 0x36	; 54
    b110:	df 4f       	sbci	r29, 0xFF	; 255
    b112:	18 82       	st	Y, r1
    b114:	ca 5c       	subi	r28, 0xCA	; 202
    b116:	d0 40       	sbci	r29, 0x00	; 0
    b118:	93 01       	movw	r18, r6
    b11a:	23 54       	subi	r18, 0x43	; 67
    b11c:	3d 4f       	sbci	r19, 0xFD	; 253
    b11e:	c6 54       	subi	r28, 0x46	; 70
    b120:	df 4f       	sbci	r29, 0xFF	; 255
    b122:	39 83       	std	Y+1, r19	; 0x01
    b124:	28 83       	st	Y, r18
    b126:	ca 5b       	subi	r28, 0xBA	; 186
    b128:	d0 40       	sbci	r29, 0x00	; 0
    b12a:	c6 54       	subi	r28, 0x46	; 70
    b12c:	df 4f       	sbci	r29, 0xFF	; 255
    b12e:	e8 81       	ld	r30, Y
    b130:	f9 81       	ldd	r31, Y+1	; 0x01
    b132:	ca 5b       	subi	r28, 0xBA	; 186
    b134:	d0 40       	sbci	r29, 0x00	; 0
    b136:	84 91       	lpm	r24, Z
    b138:	98 16       	cp	r9, r24
    b13a:	08 f0       	brcs	.+2      	; 0xb13e <draw_menu(bool)+0x1d8>
    b13c:	ee c0       	rjmp	.+476    	; 0xb31a <draw_menu(bool)+0x3b4>
    b13e:	89 2d       	mov	r24, r9
    b140:	90 e0       	ldi	r25, 0x00	; 0
    b142:	01 96       	adiw	r24, 0x01	; 1
    b144:	f1 e1       	ldi	r31, 0x11	; 17
    b146:	f8 9f       	mul	r31, r24
    b148:	20 01       	movw	r4, r0
    b14a:	f9 9f       	mul	r31, r25
    b14c:	50 0c       	add	r5, r0
    b14e:	11 24       	eor	r1, r1
    b150:	f3 01       	movw	r30, r6
    b152:	e4 0d       	add	r30, r4
    b154:	f5 1d       	adc	r31, r5
    b156:	25 91       	lpm	r18, Z+
    b158:	34 91       	lpm	r19, Z
    b15a:	12 01       	movw	r2, r4
    b15c:	44 e0       	ldi	r20, 0x04	; 4
    b15e:	24 1a       	sub	r2, r20
    b160:	31 08       	sbc	r3, r1
    b162:	26 0c       	add	r2, r6
    b164:	37 1c       	adc	r3, r7
    b166:	f1 01       	movw	r30, r2
    b168:	84 91       	lpm	r24, Z
    b16a:	cf 54       	subi	r28, 0x4F	; 79
    b16c:	df 4f       	sbci	r29, 0xFF	; 255
    b16e:	68 81       	ld	r22, Y
    b170:	c1 5b       	subi	r28, 0xB1	; 177
    b172:	d0 40       	sbci	r29, 0x00	; 0
    b174:	70 e0       	ldi	r23, 0x00	; 0
    b176:	49 2d       	mov	r20, r9
    b178:	90 e0       	ldi	r25, 0x00	; 0
    b17a:	f9 01       	movw	r30, r18
    b17c:	19 95       	eicall
    b17e:	88 23       	and	r24, r24
    b180:	09 f4       	brne	.+2      	; 0xb184 <draw_menu(bool)+0x21e>
    b182:	b4 c0       	rjmp	.+360    	; 0xb2ec <draw_menu(bool)+0x386>
    b184:	f2 01       	movw	r30, r4
    b186:	31 97       	sbiw	r30, 0x01	; 1
    b188:	e6 0d       	add	r30, r6
    b18a:	f7 1d       	adc	r31, r7
    b18c:	84 91       	lpm	r24, Z
    b18e:	cd 52       	subi	r28, 0x2D	; 45
    b190:	df 4f       	sbci	r29, 0xFF	; 255
    b192:	68 81       	ld	r22, Y
    b194:	c3 5d       	subi	r28, 0xD3	; 211
    b196:	d0 40       	sbci	r29, 0x00	; 0
    b198:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <enable_redraw(unsigned char, unsigned char)>
    b19c:	88 23       	and	r24, r24
    b19e:	09 f4       	brne	.+2      	; 0xb1a2 <draw_menu(bool)+0x23c>
    b1a0:	43 c0       	rjmp	.+134    	; 0xb228 <draw_menu(bool)+0x2c2>
    b1a2:	f2 01       	movw	r30, r4
    b1a4:	3f 97       	sbiw	r30, 0x0f	; 15
    b1a6:	e6 0d       	add	r30, r6
    b1a8:	f7 1d       	adc	r31, r7
    b1aa:	65 91       	lpm	r22, Z+
    b1ac:	74 91       	lpm	r23, Z
    b1ae:	ce 01       	movw	r24, r28
    b1b0:	8f 57       	subi	r24, 0x7F	; 127
    b1b2:	9f 4f       	sbci	r25, 0xFF	; 255
    b1b4:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    b1b8:	19 82       	std	Y+1, r1	; 0x01
    b1ba:	f2 01       	movw	r30, r4
    b1bc:	35 97       	sbiw	r30, 0x05	; 5
    b1be:	e6 0d       	add	r30, r6
    b1c0:	f7 1d       	adc	r31, r7
    b1c2:	e4 90       	lpm	r14, Z
    b1c4:	04 91       	lpm	r16, Z
    b1c6:	f2 01       	movw	r30, r4
    b1c8:	37 97       	sbiw	r30, 0x07	; 7
    b1ca:	e6 0d       	add	r30, r6
    b1cc:	f7 1d       	adc	r31, r7
    b1ce:	25 91       	lpm	r18, Z+
    b1d0:	34 91       	lpm	r19, Z
    b1d2:	f2 01       	movw	r30, r4
    b1d4:	39 97       	sbiw	r30, 0x09	; 9
    b1d6:	e6 0d       	add	r30, r6
    b1d8:	f7 1d       	adc	r31, r7
    b1da:	45 91       	lpm	r20, Z+
    b1dc:	54 91       	lpm	r21, Z
    b1de:	f2 01       	movw	r30, r4
    b1e0:	3b 97       	sbiw	r30, 0x0b	; 11
    b1e2:	e6 0d       	add	r30, r6
    b1e4:	f7 1d       	adc	r31, r7
    b1e6:	65 91       	lpm	r22, Z+
    b1e8:	74 91       	lpm	r23, Z
    b1ea:	f2 01       	movw	r30, r4
    b1ec:	3d 97       	sbiw	r30, 0x0d	; 13
    b1ee:	e6 0d       	add	r30, r6
    b1f0:	f7 1d       	adc	r31, r7
    b1f2:	85 91       	lpm	r24, Z+
    b1f4:	94 91       	lpm	r25, Z
    b1f6:	c8 54       	subi	r28, 0x48	; 72
    b1f8:	df 4f       	sbci	r29, 0xFF	; 255
    b1fa:	e8 81       	ld	r30, Y
    b1fc:	f9 81       	ldd	r31, Y+1	; 0x01
    b1fe:	c8 5b       	subi	r28, 0xB8	; 184
    b200:	d0 40       	sbci	r29, 0x00	; 0
    b202:	6e 0f       	add	r22, r30
    b204:	7f 1f       	adc	r23, r31
    b206:	81 2c       	mov	r8, r1
    b208:	fe 01       	movw	r30, r28
    b20a:	31 96       	adiw	r30, 0x01	; 1
    b20c:	5f 01       	movw	r10, r30
    b20e:	e0 58       	subi	r30, 0x80	; 128
    b210:	ff 4f       	sbci	r31, 0xFF	; 255
    b212:	6f 01       	movw	r12, r30
    b214:	ca 54       	subi	r28, 0x4A	; 74
    b216:	df 4f       	sbci	r29, 0xFF	; 255
    b218:	e8 81       	ld	r30, Y
    b21a:	f9 81       	ldd	r31, Y+1	; 0x01
    b21c:	c6 5b       	subi	r28, 0xB6	; 182
    b21e:	d0 40       	sbci	r29, 0x00	; 0
    b220:	8e 0f       	add	r24, r30
    b222:	9f 1f       	adc	r25, r31
    b224:	0e 94 1a 54 	call	0xa834	; 0xa834 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
    b228:	ce 53       	subi	r28, 0x3E	; 62
    b22a:	df 4f       	sbci	r29, 0xFF	; 255
    b22c:	28 81       	ld	r18, Y
    b22e:	39 81       	ldd	r19, Y+1	; 0x01
    b230:	c2 5c       	subi	r28, 0xC2	; 194
    b232:	d0 40       	sbci	r29, 0x00	; 0
    b234:	23 2b       	or	r18, r19
    b236:	09 f4       	brne	.+2      	; 0xb23a <draw_menu(bool)+0x2d4>
    b238:	59 c0       	rjmp	.+178    	; 0xb2ec <draw_menu(bool)+0x386>
    b23a:	cc 53       	subi	r28, 0x3C	; 60
    b23c:	df 4f       	sbci	r29, 0xFF	; 255
    b23e:	48 81       	ld	r20, Y
    b240:	59 81       	ldd	r21, Y+1	; 0x01
    b242:	c4 5c       	subi	r28, 0xC4	; 196
    b244:	d0 40       	sbci	r29, 0x00	; 0
    b246:	45 2b       	or	r20, r21
    b248:	09 f4       	brne	.+2      	; 0xb24c <draw_menu(bool)+0x2e6>
    b24a:	50 c0       	rjmp	.+160    	; 0xb2ec <draw_menu(bool)+0x386>
    b24c:	f2 01       	movw	r30, r4
    b24e:	37 97       	sbiw	r30, 0x07	; 7
    b250:	e6 0d       	add	r30, r6
    b252:	f7 1d       	adc	r31, r7
    b254:	25 91       	lpm	r18, Z+
    b256:	34 91       	lpm	r19, Z
    b258:	f2 01       	movw	r30, r4
    b25a:	39 97       	sbiw	r30, 0x09	; 9
    b25c:	e6 0d       	add	r30, r6
    b25e:	f7 1d       	adc	r31, r7
    b260:	45 91       	lpm	r20, Z+
    b262:	54 91       	lpm	r21, Z
    b264:	f2 01       	movw	r30, r4
    b266:	3b 97       	sbiw	r30, 0x0b	; 11
    b268:	e6 0d       	add	r30, r6
    b26a:	f7 1d       	adc	r31, r7
    b26c:	65 91       	lpm	r22, Z+
    b26e:	74 91       	lpm	r23, Z
    b270:	f2 01       	movw	r30, r4
    b272:	3d 97       	sbiw	r30, 0x0d	; 13
    b274:	e6 0d       	add	r30, r6
    b276:	f7 1d       	adc	r31, r7
    b278:	85 91       	lpm	r24, Z+
    b27a:	94 91       	lpm	r25, Z
    b27c:	c8 54       	subi	r28, 0x48	; 72
    b27e:	df 4f       	sbci	r29, 0xFF	; 255
    b280:	e8 81       	ld	r30, Y
    b282:	f9 81       	ldd	r31, Y+1	; 0x01
    b284:	c8 5b       	subi	r28, 0xB8	; 184
    b286:	d0 40       	sbci	r29, 0x00	; 0
    b288:	6e 0f       	add	r22, r30
    b28a:	7f 1f       	adc	r23, r31
    b28c:	cc 53       	subi	r28, 0x3C	; 60
    b28e:	df 4f       	sbci	r29, 0xFF	; 255
    b290:	e8 80       	ld	r14, Y
    b292:	f9 80       	ldd	r15, Y+1	; 0x01
    b294:	c4 5c       	subi	r28, 0xC4	; 196
    b296:	d0 40       	sbci	r29, 0x00	; 0
    b298:	ce 53       	subi	r28, 0x3E	; 62
    b29a:	df 4f       	sbci	r29, 0xFF	; 255
    b29c:	08 81       	ld	r16, Y
    b29e:	19 81       	ldd	r17, Y+1	; 0x01
    b2a0:	c2 5c       	subi	r28, 0xC2	; 194
    b2a2:	d0 40       	sbci	r29, 0x00	; 0
    b2a4:	ca 54       	subi	r28, 0x4A	; 74
    b2a6:	df 4f       	sbci	r29, 0xFF	; 255
    b2a8:	e8 81       	ld	r30, Y
    b2aa:	f9 81       	ldd	r31, Y+1	; 0x01
    b2ac:	c6 5b       	subi	r28, 0xB6	; 182
    b2ae:	d0 40       	sbci	r29, 0x00	; 0
    b2b0:	8e 0f       	add	r24, r30
    b2b2:	9f 1f       	adc	r25, r31
    b2b4:	0e 94 98 57 	call	0xaf30	; 0xaf30 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b2b8:	18 2f       	mov	r17, r24
    b2ba:	88 23       	and	r24, r24
    b2bc:	b9 f0       	breq	.+46     	; 0xb2ec <draw_menu(bool)+0x386>
    b2be:	f2 01       	movw	r30, r4
    b2c0:	33 97       	sbiw	r30, 0x03	; 3
    b2c2:	e6 0d       	add	r30, r6
    b2c4:	f7 1d       	adc	r31, r7
    b2c6:	25 91       	lpm	r18, Z+
    b2c8:	34 91       	lpm	r19, Z
    b2ca:	f1 01       	movw	r30, r2
    b2cc:	84 91       	lpm	r24, Z
    b2ce:	cf 54       	subi	r28, 0x4F	; 79
    b2d0:	df 4f       	sbci	r29, 0xFF	; 255
    b2d2:	68 81       	ld	r22, Y
    b2d4:	c1 5b       	subi	r28, 0xB1	; 177
    b2d6:	d0 40       	sbci	r29, 0x00	; 0
    b2d8:	70 e0       	ldi	r23, 0x00	; 0
    b2da:	49 2d       	mov	r20, r9
    b2dc:	90 e0       	ldi	r25, 0x00	; 0
    b2de:	f9 01       	movw	r30, r18
    b2e0:	19 95       	eicall
    b2e2:	c6 53       	subi	r28, 0x36	; 54
    b2e4:	df 4f       	sbci	r29, 0xFF	; 255
    b2e6:	18 83       	st	Y, r17
    b2e8:	ca 5c       	subi	r28, 0xCA	; 202
    b2ea:	d0 40       	sbci	r29, 0x00	; 0
    b2ec:	93 94       	inc	r9
    b2ee:	1d cf       	rjmp	.-454    	; 0xb12a <draw_menu(bool)+0x1c4>
    b2f0:	cc 53       	subi	r28, 0x3C	; 60
    b2f2:	df 4f       	sbci	r29, 0xFF	; 255
    b2f4:	19 82       	std	Y+1, r1	; 0x01
    b2f6:	18 82       	st	Y, r1
    b2f8:	c4 5c       	subi	r28, 0xC4	; 196
    b2fa:	d0 40       	sbci	r29, 0x00	; 0
    b2fc:	ce 53       	subi	r28, 0x3E	; 62
    b2fe:	df 4f       	sbci	r29, 0xFF	; 255
    b300:	19 82       	std	Y+1, r1	; 0x01
    b302:	18 82       	st	Y, r1
    b304:	c2 5c       	subi	r28, 0xC2	; 194
    b306:	d0 40       	sbci	r29, 0x00	; 0
    b308:	71 ce       	rjmp	.-798    	; 0xafec <draw_menu(bool)+0x86>
    b30a:	68 94       	set
    b30c:	91 f8       	bld	r9, 1
    b30e:	b8 ce       	rjmp	.-656    	; 0xb080 <draw_menu(bool)+0x11a>
    b310:	89 2d       	mov	r24, r9
    b312:	84 60       	ori	r24, 0x04	; 4
    b314:	ca ce       	rjmp	.-620    	; 0xb0aa <draw_menu(bool)+0x144>
    b316:	88 60       	ori	r24, 0x08	; 8
    b318:	cb ce       	rjmp	.-618    	; 0xb0b0 <draw_menu(bool)+0x14a>
    b31a:	c6 53       	subi	r28, 0x36	; 54
    b31c:	df 4f       	sbci	r29, 0xFF	; 255
    b31e:	f8 81       	ld	r31, Y
    b320:	ca 5c       	subi	r28, 0xCA	; 202
    b322:	d0 40       	sbci	r29, 0x00	; 0
    b324:	f1 11       	cpse	r31, r1
    b326:	0c 94 bb 68 	jmp	0xd176	; 0xd176 <draw_menu(bool)+0x2210>
    b32a:	91 2c       	mov	r9, r1
    b32c:	93 01       	movw	r18, r6
    b32e:	22 54       	subi	r18, 0x42	; 66
    b330:	3d 4f       	sbci	r19, 0xFD	; 253
    b332:	c0 54       	subi	r28, 0x40	; 64
    b334:	df 4f       	sbci	r29, 0xFF	; 255
    b336:	39 83       	std	Y+1, r19	; 0x01
    b338:	28 83       	st	Y, r18
    b33a:	c0 5c       	subi	r28, 0xC0	; 192
    b33c:	d0 40       	sbci	r29, 0x00	; 0
    b33e:	1e 01       	movw	r2, r28
    b340:	31 e8       	ldi	r19, 0x81	; 129
    b342:	23 0e       	add	r2, r19
    b344:	31 1c       	adc	r3, r1
    b346:	c0 54       	subi	r28, 0x40	; 64
    b348:	df 4f       	sbci	r29, 0xFF	; 255
    b34a:	e8 81       	ld	r30, Y
    b34c:	f9 81       	ldd	r31, Y+1	; 0x01
    b34e:	c0 5c       	subi	r28, 0xC0	; 192
    b350:	d0 40       	sbci	r29, 0x00	; 0
    b352:	84 91       	lpm	r24, Z
    b354:	98 16       	cp	r9, r24
    b356:	08 f0       	brcs	.+2      	; 0xb35a <draw_menu(bool)+0x3f4>
    b358:	1c c1       	rjmp	.+568    	; 0xb592 <draw_menu(bool)+0x62c>
    b35a:	f7 e1       	ldi	r31, 0x17	; 23
    b35c:	9f 9e       	mul	r9, r31
    b35e:	20 01       	movw	r4, r0
    b360:	11 24       	eor	r1, r1
    b362:	f2 01       	movw	r30, r4
    b364:	ef 53       	subi	r30, 0x3F	; 63
    b366:	ff 4f       	sbci	r31, 0xFF	; 255
    b368:	e6 0d       	add	r30, r6
    b36a:	f7 1d       	adc	r31, r7
    b36c:	25 91       	lpm	r18, Z+
    b36e:	34 91       	lpm	r19, Z
    b370:	c2 01       	movw	r24, r4
    b372:	85 54       	subi	r24, 0x45	; 69
    b374:	9f 4f       	sbci	r25, 0xFF	; 255
    b376:	a3 01       	movw	r20, r6
    b378:	48 0f       	add	r20, r24
    b37a:	59 1f       	adc	r21, r25
    b37c:	c6 54       	subi	r28, 0x46	; 70
    b37e:	df 4f       	sbci	r29, 0xFF	; 255
    b380:	59 83       	std	Y+1, r21	; 0x01
    b382:	48 83       	st	Y, r20
    b384:	ca 5b       	subi	r28, 0xBA	; 186
    b386:	d0 40       	sbci	r29, 0x00	; 0
    b388:	fa 01       	movw	r30, r20
    b38a:	84 91       	lpm	r24, Z
    b38c:	cf 54       	subi	r28, 0x4F	; 79
    b38e:	df 4f       	sbci	r29, 0xFF	; 255
    b390:	68 81       	ld	r22, Y
    b392:	c1 5b       	subi	r28, 0xB1	; 177
    b394:	d0 40       	sbci	r29, 0x00	; 0
    b396:	70 e0       	ldi	r23, 0x00	; 0
    b398:	49 2d       	mov	r20, r9
    b39a:	90 e0       	ldi	r25, 0x00	; 0
    b39c:	f9 01       	movw	r30, r18
    b39e:	19 95       	eicall
    b3a0:	88 23       	and	r24, r24
    b3a2:	09 f4       	brne	.+2      	; 0xb3a6 <draw_menu(bool)+0x440>
    b3a4:	f4 c0       	rjmp	.+488    	; 0xb58e <draw_menu(bool)+0x628>
    b3a6:	f2 01       	movw	r30, r4
    b3a8:	e0 54       	subi	r30, 0x40	; 64
    b3aa:	ff 4f       	sbci	r31, 0xFF	; 255
    b3ac:	e6 0d       	add	r30, r6
    b3ae:	f7 1d       	adc	r31, r7
    b3b0:	84 91       	lpm	r24, Z
    b3b2:	cd 52       	subi	r28, 0x2D	; 45
    b3b4:	df 4f       	sbci	r29, 0xFF	; 255
    b3b6:	68 81       	ld	r22, Y
    b3b8:	c3 5d       	subi	r28, 0xD3	; 211
    b3ba:	d0 40       	sbci	r29, 0x00	; 0
    b3bc:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <enable_redraw(unsigned char, unsigned char)>
    b3c0:	88 23       	and	r24, r24
    b3c2:	09 f4       	brne	.+2      	; 0xb3c6 <draw_menu(bool)+0x460>
    b3c4:	78 c0       	rjmp	.+240    	; 0xb4b6 <draw_menu(bool)+0x550>
    b3c6:	f2 01       	movw	r30, r4
    b3c8:	e4 55       	subi	r30, 0x54	; 84
    b3ca:	ff 4f       	sbci	r31, 0xFF	; 255
    b3cc:	e6 0d       	add	r30, r6
    b3ce:	f7 1d       	adc	r31, r7
    b3d0:	65 91       	lpm	r22, Z+
    b3d2:	74 91       	lpm	r23, Z
    b3d4:	c1 01       	movw	r24, r2
    b3d6:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    b3da:	f2 01       	movw	r30, r4
    b3dc:	e2 54       	subi	r30, 0x42	; 66
    b3de:	ff 4f       	sbci	r31, 0xFF	; 255
    b3e0:	e6 0d       	add	r30, r6
    b3e2:	f7 1d       	adc	r31, r7
    b3e4:	25 91       	lpm	r18, Z+
    b3e6:	34 91       	lpm	r19, Z
    b3e8:	c6 54       	subi	r28, 0x46	; 70
    b3ea:	df 4f       	sbci	r29, 0xFF	; 255
    b3ec:	e8 81       	ld	r30, Y
    b3ee:	f9 81       	ldd	r31, Y+1	; 0x01
    b3f0:	ca 5b       	subi	r28, 0xBA	; 186
    b3f2:	d0 40       	sbci	r29, 0x00	; 0
    b3f4:	84 91       	lpm	r24, Z
    b3f6:	cf 54       	subi	r28, 0x4F	; 79
    b3f8:	df 4f       	sbci	r29, 0xFF	; 255
    b3fa:	68 81       	ld	r22, Y
    b3fc:	c1 5b       	subi	r28, 0xB1	; 177
    b3fe:	d0 40       	sbci	r29, 0x00	; 0
    b400:	70 e0       	ldi	r23, 0x00	; 0
    b402:	49 2d       	mov	r20, r9
    b404:	90 e0       	ldi	r25, 0x00	; 0
    b406:	f9 01       	movw	r30, r18
    b408:	19 95       	eicall
    b40a:	19 82       	std	Y+1, r1	; 0x01
    b40c:	f2 01       	movw	r30, r4
    b40e:	e7 54       	subi	r30, 0x47	; 71
    b410:	ff 4f       	sbci	r31, 0xFF	; 255
    b412:	e6 0d       	add	r30, r6
    b414:	f7 1d       	adc	r31, r7
    b416:	a5 90       	lpm	r10, Z+
    b418:	b4 90       	lpm	r11, Z
    b41a:	f2 01       	movw	r30, r4
    b41c:	e9 54       	subi	r30, 0x49	; 73
    b41e:	ff 4f       	sbci	r31, 0xFF	; 255
    b420:	e6 0d       	add	r30, r6
    b422:	f7 1d       	adc	r31, r7
    b424:	c5 90       	lpm	r12, Z+
    b426:	d4 90       	lpm	r13, Z
    b428:	82 01       	movw	r16, r4
    b42a:	0a 54       	subi	r16, 0x4A	; 74
    b42c:	1f 4f       	sbci	r17, 0xFF	; 255
    b42e:	06 0d       	add	r16, r6
    b430:	17 1d       	adc	r17, r7
    b432:	f8 01       	movw	r30, r16
    b434:	04 91       	lpm	r16, Z
    b436:	f2 01       	movw	r30, r4
    b438:	ec 54       	subi	r30, 0x4C	; 76
    b43a:	ff 4f       	sbci	r31, 0xFF	; 255
    b43c:	e6 0d       	add	r30, r6
    b43e:	f7 1d       	adc	r31, r7
    b440:	25 91       	lpm	r18, Z+
    b442:	34 91       	lpm	r19, Z
    b444:	f2 01       	movw	r30, r4
    b446:	ee 54       	subi	r30, 0x4E	; 78
    b448:	ff 4f       	sbci	r31, 0xFF	; 255
    b44a:	e6 0d       	add	r30, r6
    b44c:	f7 1d       	adc	r31, r7
    b44e:	45 91       	lpm	r20, Z+
    b450:	54 91       	lpm	r21, Z
    b452:	f2 01       	movw	r30, r4
    b454:	e0 55       	subi	r30, 0x50	; 80
    b456:	ff 4f       	sbci	r31, 0xFF	; 255
    b458:	e6 0d       	add	r30, r6
    b45a:	f7 1d       	adc	r31, r7
    b45c:	65 91       	lpm	r22, Z+
    b45e:	74 91       	lpm	r23, Z
    b460:	f2 01       	movw	r30, r4
    b462:	e2 55       	subi	r30, 0x52	; 82
    b464:	ff 4f       	sbci	r31, 0xFF	; 255
    b466:	e6 0d       	add	r30, r6
    b468:	f7 1d       	adc	r31, r7
    b46a:	a5 91       	lpm	r26, Z+
    b46c:	b4 91       	lpm	r27, Z
    b46e:	88 24       	eor	r8, r8
    b470:	83 94       	inc	r8
    b472:	81 11       	cpse	r24, r1
    b474:	01 c0       	rjmp	.+2      	; 0xb478 <draw_menu(bool)+0x512>
    b476:	81 2c       	mov	r8, r1
    b478:	c8 54       	subi	r28, 0x48	; 72
    b47a:	df 4f       	sbci	r29, 0xFF	; 255
    b47c:	88 81       	ld	r24, Y
    b47e:	99 81       	ldd	r25, Y+1	; 0x01
    b480:	c8 5b       	subi	r28, 0xB8	; 184
    b482:	d0 40       	sbci	r29, 0x00	; 0
    b484:	68 0f       	add	r22, r24
    b486:	79 1f       	adc	r23, r25
    b488:	e1 e0       	ldi	r30, 0x01	; 1
    b48a:	f0 e0       	ldi	r31, 0x00	; 0
    b48c:	ec 0f       	add	r30, r28
    b48e:	fd 1f       	adc	r31, r29
    b490:	ff 93       	push	r31
    b492:	ef 93       	push	r30
    b494:	3f 92       	push	r3
    b496:	2f 92       	push	r2
    b498:	e1 2c       	mov	r14, r1
    b49a:	ca 54       	subi	r28, 0x4A	; 74
    b49c:	df 4f       	sbci	r29, 0xFF	; 255
    b49e:	88 81       	ld	r24, Y
    b4a0:	99 81       	ldd	r25, Y+1	; 0x01
    b4a2:	c6 5b       	subi	r28, 0xB6	; 182
    b4a4:	d0 40       	sbci	r29, 0x00	; 0
    b4a6:	8a 0f       	add	r24, r26
    b4a8:	9b 1f       	adc	r25, r27
    b4aa:	0e 94 16 55 	call	0xaa2c	; 0xaa2c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    b4ae:	0f 90       	pop	r0
    b4b0:	0f 90       	pop	r0
    b4b2:	0f 90       	pop	r0
    b4b4:	0f 90       	pop	r0
    b4b6:	ce 53       	subi	r28, 0x3E	; 62
    b4b8:	df 4f       	sbci	r29, 0xFF	; 255
    b4ba:	28 81       	ld	r18, Y
    b4bc:	39 81       	ldd	r19, Y+1	; 0x01
    b4be:	c2 5c       	subi	r28, 0xC2	; 194
    b4c0:	d0 40       	sbci	r29, 0x00	; 0
    b4c2:	23 2b       	or	r18, r19
    b4c4:	09 f4       	brne	.+2      	; 0xb4c8 <draw_menu(bool)+0x562>
    b4c6:	63 c0       	rjmp	.+198    	; 0xb58e <draw_menu(bool)+0x628>
    b4c8:	cc 53       	subi	r28, 0x3C	; 60
    b4ca:	df 4f       	sbci	r29, 0xFF	; 255
    b4cc:	48 81       	ld	r20, Y
    b4ce:	59 81       	ldd	r21, Y+1	; 0x01
    b4d0:	c4 5c       	subi	r28, 0xC4	; 196
    b4d2:	d0 40       	sbci	r29, 0x00	; 0
    b4d4:	45 2b       	or	r20, r21
    b4d6:	09 f4       	brne	.+2      	; 0xb4da <draw_menu(bool)+0x574>
    b4d8:	5a c0       	rjmp	.+180    	; 0xb58e <draw_menu(bool)+0x628>
    b4da:	f2 01       	movw	r30, r4
    b4dc:	ec 54       	subi	r30, 0x4C	; 76
    b4de:	ff 4f       	sbci	r31, 0xFF	; 255
    b4e0:	e6 0d       	add	r30, r6
    b4e2:	f7 1d       	adc	r31, r7
    b4e4:	25 91       	lpm	r18, Z+
    b4e6:	34 91       	lpm	r19, Z
    b4e8:	f2 01       	movw	r30, r4
    b4ea:	ee 54       	subi	r30, 0x4E	; 78
    b4ec:	ff 4f       	sbci	r31, 0xFF	; 255
    b4ee:	e6 0d       	add	r30, r6
    b4f0:	f7 1d       	adc	r31, r7
    b4f2:	45 91       	lpm	r20, Z+
    b4f4:	54 91       	lpm	r21, Z
    b4f6:	f2 01       	movw	r30, r4
    b4f8:	e0 55       	subi	r30, 0x50	; 80
    b4fa:	ff 4f       	sbci	r31, 0xFF	; 255
    b4fc:	e6 0d       	add	r30, r6
    b4fe:	f7 1d       	adc	r31, r7
    b500:	65 91       	lpm	r22, Z+
    b502:	74 91       	lpm	r23, Z
    b504:	f2 01       	movw	r30, r4
    b506:	e2 55       	subi	r30, 0x52	; 82
    b508:	ff 4f       	sbci	r31, 0xFF	; 255
    b50a:	e6 0d       	add	r30, r6
    b50c:	f7 1d       	adc	r31, r7
    b50e:	85 91       	lpm	r24, Z+
    b510:	94 91       	lpm	r25, Z
    b512:	c8 54       	subi	r28, 0x48	; 72
    b514:	df 4f       	sbci	r29, 0xFF	; 255
    b516:	e8 81       	ld	r30, Y
    b518:	f9 81       	ldd	r31, Y+1	; 0x01
    b51a:	c8 5b       	subi	r28, 0xB8	; 184
    b51c:	d0 40       	sbci	r29, 0x00	; 0
    b51e:	6e 0f       	add	r22, r30
    b520:	7f 1f       	adc	r23, r31
    b522:	cc 53       	subi	r28, 0x3C	; 60
    b524:	df 4f       	sbci	r29, 0xFF	; 255
    b526:	e8 80       	ld	r14, Y
    b528:	f9 80       	ldd	r15, Y+1	; 0x01
    b52a:	c4 5c       	subi	r28, 0xC4	; 196
    b52c:	d0 40       	sbci	r29, 0x00	; 0
    b52e:	ce 53       	subi	r28, 0x3E	; 62
    b530:	df 4f       	sbci	r29, 0xFF	; 255
    b532:	08 81       	ld	r16, Y
    b534:	19 81       	ldd	r17, Y+1	; 0x01
    b536:	c2 5c       	subi	r28, 0xC2	; 194
    b538:	d0 40       	sbci	r29, 0x00	; 0
    b53a:	ca 54       	subi	r28, 0x4A	; 74
    b53c:	df 4f       	sbci	r29, 0xFF	; 255
    b53e:	e8 81       	ld	r30, Y
    b540:	f9 81       	ldd	r31, Y+1	; 0x01
    b542:	c6 5b       	subi	r28, 0xB6	; 182
    b544:	d0 40       	sbci	r29, 0x00	; 0
    b546:	8e 0f       	add	r24, r30
    b548:	9f 1f       	adc	r25, r31
    b54a:	0e 94 98 57 	call	0xaf30	; 0xaf30 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b54e:	18 2f       	mov	r17, r24
    b550:	88 23       	and	r24, r24
    b552:	e9 f0       	breq	.+58     	; 0xb58e <draw_menu(bool)+0x628>
    b554:	f2 01       	movw	r30, r4
    b556:	e4 54       	subi	r30, 0x44	; 68
    b558:	ff 4f       	sbci	r31, 0xFF	; 255
    b55a:	e6 0d       	add	r30, r6
    b55c:	f7 1d       	adc	r31, r7
    b55e:	25 91       	lpm	r18, Z+
    b560:	34 91       	lpm	r19, Z
    b562:	c6 54       	subi	r28, 0x46	; 70
    b564:	df 4f       	sbci	r29, 0xFF	; 255
    b566:	e8 81       	ld	r30, Y
    b568:	f9 81       	ldd	r31, Y+1	; 0x01
    b56a:	ca 5b       	subi	r28, 0xBA	; 186
    b56c:	d0 40       	sbci	r29, 0x00	; 0
    b56e:	84 91       	lpm	r24, Z
    b570:	cf 54       	subi	r28, 0x4F	; 79
    b572:	df 4f       	sbci	r29, 0xFF	; 255
    b574:	68 81       	ld	r22, Y
    b576:	c1 5b       	subi	r28, 0xB1	; 177
    b578:	d0 40       	sbci	r29, 0x00	; 0
    b57a:	70 e0       	ldi	r23, 0x00	; 0
    b57c:	49 2d       	mov	r20, r9
    b57e:	90 e0       	ldi	r25, 0x00	; 0
    b580:	f9 01       	movw	r30, r18
    b582:	19 95       	eicall
    b584:	c6 53       	subi	r28, 0x36	; 54
    b586:	df 4f       	sbci	r29, 0xFF	; 255
    b588:	18 83       	st	Y, r17
    b58a:	ca 5c       	subi	r28, 0xCA	; 202
    b58c:	d0 40       	sbci	r29, 0x00	; 0
    b58e:	93 94       	inc	r9
    b590:	da ce       	rjmp	.-588    	; 0xb346 <draw_menu(bool)+0x3e0>
    b592:	c6 53       	subi	r28, 0x36	; 54
    b594:	df 4f       	sbci	r29, 0xFF	; 255
    b596:	f8 81       	ld	r31, Y
    b598:	ca 5c       	subi	r28, 0xCA	; 202
    b59a:	d0 40       	sbci	r29, 0x00	; 0
    b59c:	f1 11       	cpse	r31, r1
    b59e:	0c 94 bb 68 	jmp	0xd176	; 0xd176 <draw_menu(bool)+0x2210>
    b5a2:	91 2c       	mov	r9, r1
    b5a4:	23 01       	movw	r4, r6
    b5a6:	21 e4       	ldi	r18, 0x41	; 65
    b5a8:	42 1a       	sub	r4, r18
    b5aa:	2d ef       	ldi	r18, 0xFD	; 253
    b5ac:	52 0a       	sbc	r5, r18
    b5ae:	92 e1       	ldi	r25, 0x12	; 18
    b5b0:	89 2e       	mov	r8, r25
    b5b2:	f2 01       	movw	r30, r4
    b5b4:	84 91       	lpm	r24, Z
    b5b6:	98 16       	cp	r9, r24
    b5b8:	08 f0       	brcs	.+2      	; 0xb5bc <draw_menu(bool)+0x656>
    b5ba:	cc c0       	rjmp	.+408    	; 0xb754 <draw_menu(bool)+0x7ee>
    b5bc:	98 9c       	mul	r9, r8
    b5be:	50 01       	movw	r10, r0
    b5c0:	11 24       	eor	r1, r1
    b5c2:	f5 01       	movw	r30, r10
    b5c4:	e3 5d       	subi	r30, 0xD3	; 211
    b5c6:	fe 4f       	sbci	r31, 0xFE	; 254
    b5c8:	e6 0d       	add	r30, r6
    b5ca:	f7 1d       	adc	r31, r7
    b5cc:	25 91       	lpm	r18, Z+
    b5ce:	34 91       	lpm	r19, Z
    b5d0:	85 01       	movw	r16, r10
    b5d2:	0d 5d       	subi	r16, 0xDD	; 221
    b5d4:	1e 4f       	sbci	r17, 0xFE	; 254
    b5d6:	06 0d       	add	r16, r6
    b5d8:	17 1d       	adc	r17, r7
    b5da:	f8 01       	movw	r30, r16
    b5dc:	84 91       	lpm	r24, Z
    b5de:	cf 54       	subi	r28, 0x4F	; 79
    b5e0:	df 4f       	sbci	r29, 0xFF	; 255
    b5e2:	68 81       	ld	r22, Y
    b5e4:	c1 5b       	subi	r28, 0xB1	; 177
    b5e6:	d0 40       	sbci	r29, 0x00	; 0
    b5e8:	70 e0       	ldi	r23, 0x00	; 0
    b5ea:	49 2d       	mov	r20, r9
    b5ec:	90 e0       	ldi	r25, 0x00	; 0
    b5ee:	f9 01       	movw	r30, r18
    b5f0:	19 95       	eicall
    b5f2:	88 23       	and	r24, r24
    b5f4:	09 f4       	brne	.+2      	; 0xb5f8 <draw_menu(bool)+0x692>
    b5f6:	ac c0       	rjmp	.+344    	; 0xb750 <draw_menu(bool)+0x7ea>
    b5f8:	f5 01       	movw	r30, r10
    b5fa:	e6 5d       	subi	r30, 0xD6	; 214
    b5fc:	fe 4f       	sbci	r31, 0xFE	; 254
    b5fe:	e6 0d       	add	r30, r6
    b600:	f7 1d       	adc	r31, r7
    b602:	84 91       	lpm	r24, Z
    b604:	cd 52       	subi	r28, 0x2D	; 45
    b606:	df 4f       	sbci	r29, 0xFF	; 255
    b608:	68 81       	ld	r22, Y
    b60a:	c3 5d       	subi	r28, 0xD3	; 211
    b60c:	d0 40       	sbci	r29, 0x00	; 0
    b60e:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <enable_redraw(unsigned char, unsigned char)>
    b612:	88 23       	and	r24, r24
    b614:	09 f4       	brne	.+2      	; 0xb618 <draw_menu(bool)+0x6b2>
    b616:	4a c0       	rjmp	.+148    	; 0xb6ac <draw_menu(bool)+0x746>
    b618:	f5 01       	movw	r30, r10
    b61a:	e1 5d       	subi	r30, 0xD1	; 209
    b61c:	fe 4f       	sbci	r31, 0xFE	; 254
    b61e:	e6 0d       	add	r30, r6
    b620:	f7 1d       	adc	r31, r7
    b622:	65 91       	lpm	r22, Z+
    b624:	74 91       	lpm	r23, Z
    b626:	ce 01       	movw	r24, r28
    b628:	01 96       	adiw	r24, 0x01	; 1
    b62a:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    b62e:	f5 01       	movw	r30, r10
    b630:	ec 5d       	subi	r30, 0xDC	; 220
    b632:	fe 4f       	sbci	r31, 0xFE	; 254
    b634:	e6 0d       	add	r30, r6
    b636:	f7 1d       	adc	r31, r7
    b638:	a5 91       	lpm	r26, Z+
    b63a:	b4 91       	lpm	r27, Z
    b63c:	f8 01       	movw	r30, r16
    b63e:	04 91       	lpm	r16, Z
    b640:	f5 01       	movw	r30, r10
    b642:	e8 5d       	subi	r30, 0xD8	; 216
    b644:	fe 4f       	sbci	r31, 0xFE	; 254
    b646:	e6 0d       	add	r30, r6
    b648:	f7 1d       	adc	r31, r7
    b64a:	25 91       	lpm	r18, Z+
    b64c:	34 91       	lpm	r19, Z
    b64e:	f5 01       	movw	r30, r10
    b650:	ea 5d       	subi	r30, 0xDA	; 218
    b652:	fe 4f       	sbci	r31, 0xFE	; 254
    b654:	e6 0d       	add	r30, r6
    b656:	f7 1d       	adc	r31, r7
    b658:	45 91       	lpm	r20, Z+
    b65a:	54 91       	lpm	r21, Z
    b65c:	f5 01       	movw	r30, r10
    b65e:	ef 5d       	subi	r30, 0xDF	; 223
    b660:	fe 4f       	sbci	r31, 0xFE	; 254
    b662:	e6 0d       	add	r30, r6
    b664:	f7 1d       	adc	r31, r7
    b666:	65 91       	lpm	r22, Z+
    b668:	74 91       	lpm	r23, Z
    b66a:	f5 01       	movw	r30, r10
    b66c:	e1 5e       	subi	r30, 0xE1	; 225
    b66e:	fe 4f       	sbci	r31, 0xFE	; 254
    b670:	e6 0d       	add	r30, r6
    b672:	f7 1d       	adc	r31, r7
    b674:	85 91       	lpm	r24, Z+
    b676:	94 91       	lpm	r25, Z
    b678:	c8 54       	subi	r28, 0x48	; 72
    b67a:	df 4f       	sbci	r29, 0xFF	; 255
    b67c:	e8 81       	ld	r30, Y
    b67e:	f9 81       	ldd	r31, Y+1	; 0x01
    b680:	c8 5b       	subi	r28, 0xB8	; 184
    b682:	d0 40       	sbci	r29, 0x00	; 0
    b684:	6e 0f       	add	r22, r30
    b686:	7f 1f       	adc	r23, r31
    b688:	fe 01       	movw	r30, r28
    b68a:	31 96       	adiw	r30, 0x01	; 1
    b68c:	6f 01       	movw	r12, r30
    b68e:	cf 54       	subi	r28, 0x4F	; 79
    b690:	df 4f       	sbci	r29, 0xFF	; 255
    b692:	e8 80       	ld	r14, Y
    b694:	c1 5b       	subi	r28, 0xB1	; 177
    b696:	d0 40       	sbci	r29, 0x00	; 0
    b698:	ca 54       	subi	r28, 0x4A	; 74
    b69a:	df 4f       	sbci	r29, 0xFF	; 255
    b69c:	e8 81       	ld	r30, Y
    b69e:	f9 81       	ldd	r31, Y+1	; 0x01
    b6a0:	c6 5b       	subi	r28, 0xB6	; 182
    b6a2:	d0 40       	sbci	r29, 0x00	; 0
    b6a4:	8e 0f       	add	r24, r30
    b6a6:	9f 1f       	adc	r25, r31
    b6a8:	fd 01       	movw	r30, r26
    b6aa:	19 95       	eicall
    b6ac:	ce 53       	subi	r28, 0x3E	; 62
    b6ae:	df 4f       	sbci	r29, 0xFF	; 255
    b6b0:	28 81       	ld	r18, Y
    b6b2:	39 81       	ldd	r19, Y+1	; 0x01
    b6b4:	c2 5c       	subi	r28, 0xC2	; 194
    b6b6:	d0 40       	sbci	r29, 0x00	; 0
    b6b8:	23 2b       	or	r18, r19
    b6ba:	09 f4       	brne	.+2      	; 0xb6be <draw_menu(bool)+0x758>
    b6bc:	49 c0       	rjmp	.+146    	; 0xb750 <draw_menu(bool)+0x7ea>
    b6be:	cc 53       	subi	r28, 0x3C	; 60
    b6c0:	df 4f       	sbci	r29, 0xFF	; 255
    b6c2:	48 81       	ld	r20, Y
    b6c4:	59 81       	ldd	r21, Y+1	; 0x01
    b6c6:	c4 5c       	subi	r28, 0xC4	; 196
    b6c8:	d0 40       	sbci	r29, 0x00	; 0
    b6ca:	45 2b       	or	r20, r21
    b6cc:	09 f4       	brne	.+2      	; 0xb6d0 <draw_menu(bool)+0x76a>
    b6ce:	40 c0       	rjmp	.+128    	; 0xb750 <draw_menu(bool)+0x7ea>
    b6d0:	f5 01       	movw	r30, r10
    b6d2:	e8 5d       	subi	r30, 0xD8	; 216
    b6d4:	fe 4f       	sbci	r31, 0xFE	; 254
    b6d6:	e6 0d       	add	r30, r6
    b6d8:	f7 1d       	adc	r31, r7
    b6da:	25 91       	lpm	r18, Z+
    b6dc:	34 91       	lpm	r19, Z
    b6de:	f5 01       	movw	r30, r10
    b6e0:	ea 5d       	subi	r30, 0xDA	; 218
    b6e2:	fe 4f       	sbci	r31, 0xFE	; 254
    b6e4:	e6 0d       	add	r30, r6
    b6e6:	f7 1d       	adc	r31, r7
    b6e8:	45 91       	lpm	r20, Z+
    b6ea:	54 91       	lpm	r21, Z
    b6ec:	f5 01       	movw	r30, r10
    b6ee:	ef 5d       	subi	r30, 0xDF	; 223
    b6f0:	fe 4f       	sbci	r31, 0xFE	; 254
    b6f2:	e6 0d       	add	r30, r6
    b6f4:	f7 1d       	adc	r31, r7
    b6f6:	65 91       	lpm	r22, Z+
    b6f8:	74 91       	lpm	r23, Z
    b6fa:	f5 01       	movw	r30, r10
    b6fc:	e1 5e       	subi	r30, 0xE1	; 225
    b6fe:	fe 4f       	sbci	r31, 0xFE	; 254
    b700:	e6 0d       	add	r30, r6
    b702:	f7 1d       	adc	r31, r7
    b704:	85 91       	lpm	r24, Z+
    b706:	94 91       	lpm	r25, Z
    b708:	c8 54       	subi	r28, 0x48	; 72
    b70a:	df 4f       	sbci	r29, 0xFF	; 255
    b70c:	e8 81       	ld	r30, Y
    b70e:	f9 81       	ldd	r31, Y+1	; 0x01
    b710:	c8 5b       	subi	r28, 0xB8	; 184
    b712:	d0 40       	sbci	r29, 0x00	; 0
    b714:	6e 0f       	add	r22, r30
    b716:	7f 1f       	adc	r23, r31
    b718:	cc 53       	subi	r28, 0x3C	; 60
    b71a:	df 4f       	sbci	r29, 0xFF	; 255
    b71c:	e8 80       	ld	r14, Y
    b71e:	f9 80       	ldd	r15, Y+1	; 0x01
    b720:	c4 5c       	subi	r28, 0xC4	; 196
    b722:	d0 40       	sbci	r29, 0x00	; 0
    b724:	ce 53       	subi	r28, 0x3E	; 62
    b726:	df 4f       	sbci	r29, 0xFF	; 255
    b728:	08 81       	ld	r16, Y
    b72a:	19 81       	ldd	r17, Y+1	; 0x01
    b72c:	c2 5c       	subi	r28, 0xC2	; 194
    b72e:	d0 40       	sbci	r29, 0x00	; 0
    b730:	ca 54       	subi	r28, 0x4A	; 74
    b732:	df 4f       	sbci	r29, 0xFF	; 255
    b734:	e8 81       	ld	r30, Y
    b736:	f9 81       	ldd	r31, Y+1	; 0x01
    b738:	c6 5b       	subi	r28, 0xB6	; 182
    b73a:	d0 40       	sbci	r29, 0x00	; 0
    b73c:	8e 0f       	add	r24, r30
    b73e:	9f 1f       	adc	r25, r31
    b740:	0e 94 98 57 	call	0xaf30	; 0xaf30 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b744:	88 23       	and	r24, r24
    b746:	21 f0       	breq	.+8      	; 0xb750 <draw_menu(bool)+0x7ea>
    b748:	87 e9       	ldi	r24, 0x97	; 151
    b74a:	95 e0       	ldi	r25, 0x05	; 5
    b74c:	0e 94 1b e3 	call	0x1c636	; 0x1c636 <puts>
    b750:	93 94       	inc	r9
    b752:	2f cf       	rjmp	.-418    	; 0xb5b2 <draw_menu(bool)+0x64c>
    b754:	51 2c       	mov	r5, r1
    b756:	13 01       	movw	r2, r6
    b758:	f0 e4       	ldi	r31, 0x40	; 64
    b75a:	2f 1a       	sub	r2, r31
    b75c:	fd ef       	ldi	r31, 0xFD	; 253
    b75e:	3f 0a       	sbc	r3, r31
    b760:	87 e1       	ldi	r24, 0x17	; 23
    b762:	48 2e       	mov	r4, r24
    b764:	f1 01       	movw	r30, r2
    b766:	84 91       	lpm	r24, Z
    b768:	58 16       	cp	r5, r24
    b76a:	08 f0       	brcs	.+2      	; 0xb76e <draw_menu(bool)+0x808>
    b76c:	01 c1       	rjmp	.+514    	; 0xb970 <draw_menu(bool)+0xa0a>
    b76e:	54 9c       	mul	r5, r4
    b770:	40 01       	movw	r8, r0
    b772:	11 24       	eor	r1, r1
    b774:	f4 01       	movw	r30, r8
    b776:	e3 58       	subi	r30, 0x83	; 131
    b778:	fe 4f       	sbci	r31, 0xFE	; 254
    b77a:	e6 0d       	add	r30, r6
    b77c:	f7 1d       	adc	r31, r7
    b77e:	84 91       	lpm	r24, Z
    b780:	cd 52       	subi	r28, 0x2D	; 45
    b782:	df 4f       	sbci	r29, 0xFF	; 255
    b784:	68 81       	ld	r22, Y
    b786:	c3 5d       	subi	r28, 0xD3	; 211
    b788:	d0 40       	sbci	r29, 0x00	; 0
    b78a:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <enable_redraw(unsigned char, unsigned char)>
    b78e:	88 23       	and	r24, r24
    b790:	09 f4       	brne	.+2      	; 0xb794 <draw_menu(bool)+0x82e>
    b792:	81 c0       	rjmp	.+258    	; 0xb896 <draw_menu(bool)+0x930>
    b794:	f4 01       	movw	r30, r8
    b796:	e9 59       	subi	r30, 0x99	; 153
    b798:	fe 4f       	sbci	r31, 0xFE	; 254
    b79a:	e6 0d       	add	r30, r6
    b79c:	f7 1d       	adc	r31, r7
    b79e:	65 91       	lpm	r22, Z+
    b7a0:	74 91       	lpm	r23, Z
    b7a2:	ce 01       	movw	r24, r28
    b7a4:	8f 57       	subi	r24, 0x7F	; 127
    b7a6:	9f 4f       	sbci	r25, 0xFF	; 255
    b7a8:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    b7ac:	f4 01       	movw	r30, r8
    b7ae:	e7 58       	subi	r30, 0x87	; 135
    b7b0:	fe 4f       	sbci	r31, 0xFE	; 254
    b7b2:	e6 0d       	add	r30, r6
    b7b4:	f7 1d       	adc	r31, r7
    b7b6:	25 91       	lpm	r18, Z+
    b7b8:	34 91       	lpm	r19, Z
    b7ba:	f4 01       	movw	r30, r8
    b7bc:	e5 58       	subi	r30, 0x85	; 133
    b7be:	fe 4f       	sbci	r31, 0xFE	; 254
    b7c0:	e6 0d       	add	r30, r6
    b7c2:	f7 1d       	adc	r31, r7
    b7c4:	c5 90       	lpm	r12, Z+
    b7c6:	d4 90       	lpm	r13, Z
    b7c8:	84 01       	movw	r16, r8
    b7ca:	0a 58       	subi	r16, 0x8A	; 138
    b7cc:	1e 4f       	sbci	r17, 0xFE	; 254
    b7ce:	06 0d       	add	r16, r6
    b7d0:	17 1d       	adc	r17, r7
    b7d2:	f8 01       	movw	r30, r16
    b7d4:	84 91       	lpm	r24, Z
    b7d6:	cf 54       	subi	r28, 0x4F	; 79
    b7d8:	df 4f       	sbci	r29, 0xFF	; 255
    b7da:	68 81       	ld	r22, Y
    b7dc:	c1 5b       	subi	r28, 0xB1	; 177
    b7de:	d0 40       	sbci	r29, 0x00	; 0
    b7e0:	70 e0       	ldi	r23, 0x00	; 0
    b7e2:	45 2d       	mov	r20, r5
    b7e4:	90 e0       	ldi	r25, 0x00	; 0
    b7e6:	f9 01       	movw	r30, r18
    b7e8:	19 95       	eicall
    b7ea:	f8 2e       	mov	r15, r24
    b7ec:	cf 55       	subi	r28, 0x5F	; 95
    b7ee:	df 4f       	sbci	r29, 0xFF	; 255
    b7f0:	18 82       	st	Y, r1
    b7f2:	c1 5a       	subi	r28, 0xA1	; 161
    b7f4:	d0 40       	sbci	r29, 0x00	; 0
    b7f6:	f8 01       	movw	r30, r16
    b7f8:	44 91       	lpm	r20, Z
    b7fa:	84 91       	lpm	r24, Z
    b7fc:	8e 01       	movw	r16, r28
    b7fe:	0f 55       	subi	r16, 0x5F	; 95
    b800:	1f 4f       	sbci	r17, 0xFF	; 255
    b802:	9e 01       	movw	r18, r28
    b804:	2f 5f       	subi	r18, 0xFF	; 255
    b806:	3f 4f       	sbci	r19, 0xFF	; 255
    b808:	cf 54       	subi	r28, 0x4F	; 79
    b80a:	df 4f       	sbci	r29, 0xFF	; 255
    b80c:	68 81       	ld	r22, Y
    b80e:	c1 5b       	subi	r28, 0xB1	; 177
    b810:	d0 40       	sbci	r29, 0x00	; 0
    b812:	f6 01       	movw	r30, r12
    b814:	19 95       	eicall
    b816:	f4 01       	movw	r30, r8
    b818:	ef 58       	subi	r30, 0x8F	; 143
    b81a:	fe 4f       	sbci	r31, 0xFE	; 254
    b81c:	e6 0d       	add	r30, r6
    b81e:	f7 1d       	adc	r31, r7
    b820:	05 91       	lpm	r16, Z+
    b822:	14 91       	lpm	r17, Z
    b824:	f4 01       	movw	r30, r8
    b826:	e1 59       	subi	r30, 0x91	; 145
    b828:	fe 4f       	sbci	r31, 0xFE	; 254
    b82a:	e6 0d       	add	r30, r6
    b82c:	f7 1d       	adc	r31, r7
    b82e:	25 91       	lpm	r18, Z+
    b830:	34 91       	lpm	r19, Z
    b832:	f4 01       	movw	r30, r8
    b834:	e3 59       	subi	r30, 0x93	; 147
    b836:	fe 4f       	sbci	r31, 0xFE	; 254
    b838:	e6 0d       	add	r30, r6
    b83a:	f7 1d       	adc	r31, r7
    b83c:	45 91       	lpm	r20, Z+
    b83e:	54 91       	lpm	r21, Z
    b840:	f4 01       	movw	r30, r8
    b842:	e5 59       	subi	r30, 0x95	; 149
    b844:	fe 4f       	sbci	r31, 0xFE	; 254
    b846:	e6 0d       	add	r30, r6
    b848:	f7 1d       	adc	r31, r7
    b84a:	65 91       	lpm	r22, Z+
    b84c:	74 91       	lpm	r23, Z
    b84e:	f4 01       	movw	r30, r8
    b850:	e7 59       	subi	r30, 0x97	; 151
    b852:	fe 4f       	sbci	r31, 0xFE	; 254
    b854:	e6 0d       	add	r30, r6
    b856:	f7 1d       	adc	r31, r7
    b858:	85 91       	lpm	r24, Z+
    b85a:	94 91       	lpm	r25, Z
    b85c:	ee 24       	eor	r14, r14
    b85e:	e3 94       	inc	r14
    b860:	f1 10       	cpse	r15, r1
    b862:	01 c0       	rjmp	.+2      	; 0xb866 <draw_menu(bool)+0x900>
    b864:	e1 2c       	mov	r14, r1
    b866:	c8 54       	subi	r28, 0x48	; 72
    b868:	df 4f       	sbci	r29, 0xFF	; 255
    b86a:	e8 81       	ld	r30, Y
    b86c:	f9 81       	ldd	r31, Y+1	; 0x01
    b86e:	c8 5b       	subi	r28, 0xB8	; 184
    b870:	d0 40       	sbci	r29, 0x00	; 0
    b872:	6e 0f       	add	r22, r30
    b874:	7f 1f       	adc	r23, r31
    b876:	fe 01       	movw	r30, r28
    b878:	31 96       	adiw	r30, 0x01	; 1
    b87a:	5f 01       	movw	r10, r30
    b87c:	e0 58       	subi	r30, 0x80	; 128
    b87e:	ff 4f       	sbci	r31, 0xFF	; 255
    b880:	6f 01       	movw	r12, r30
    b882:	ca 54       	subi	r28, 0x4A	; 74
    b884:	df 4f       	sbci	r29, 0xFF	; 255
    b886:	e8 81       	ld	r30, Y
    b888:	f9 81       	ldd	r31, Y+1	; 0x01
    b88a:	c6 5b       	subi	r28, 0xB6	; 182
    b88c:	d0 40       	sbci	r29, 0x00	; 0
    b88e:	8e 0f       	add	r24, r30
    b890:	9f 1f       	adc	r25, r31
    b892:	0e 94 32 56 	call	0xac64	; 0xac64 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)>
    b896:	ce 53       	subi	r28, 0x3E	; 62
    b898:	df 4f       	sbci	r29, 0xFF	; 255
    b89a:	28 81       	ld	r18, Y
    b89c:	39 81       	ldd	r19, Y+1	; 0x01
    b89e:	c2 5c       	subi	r28, 0xC2	; 194
    b8a0:	d0 40       	sbci	r29, 0x00	; 0
    b8a2:	23 2b       	or	r18, r19
    b8a4:	09 f4       	brne	.+2      	; 0xb8a8 <draw_menu(bool)+0x942>
    b8a6:	62 c0       	rjmp	.+196    	; 0xb96c <draw_menu(bool)+0xa06>
    b8a8:	cc 53       	subi	r28, 0x3C	; 60
    b8aa:	df 4f       	sbci	r29, 0xFF	; 255
    b8ac:	48 81       	ld	r20, Y
    b8ae:	59 81       	ldd	r21, Y+1	; 0x01
    b8b0:	c4 5c       	subi	r28, 0xC4	; 196
    b8b2:	d0 40       	sbci	r29, 0x00	; 0
    b8b4:	45 2b       	or	r20, r21
    b8b6:	09 f4       	brne	.+2      	; 0xb8ba <draw_menu(bool)+0x954>
    b8b8:	59 c0       	rjmp	.+178    	; 0xb96c <draw_menu(bool)+0xa06>
    b8ba:	f4 01       	movw	r30, r8
    b8bc:	e1 59       	subi	r30, 0x91	; 145
    b8be:	fe 4f       	sbci	r31, 0xFE	; 254
    b8c0:	e6 0d       	add	r30, r6
    b8c2:	f7 1d       	adc	r31, r7
    b8c4:	25 91       	lpm	r18, Z+
    b8c6:	34 91       	lpm	r19, Z
    b8c8:	f4 01       	movw	r30, r8
    b8ca:	e3 59       	subi	r30, 0x93	; 147
    b8cc:	fe 4f       	sbci	r31, 0xFE	; 254
    b8ce:	e6 0d       	add	r30, r6
    b8d0:	f7 1d       	adc	r31, r7
    b8d2:	45 91       	lpm	r20, Z+
    b8d4:	54 91       	lpm	r21, Z
    b8d6:	f4 01       	movw	r30, r8
    b8d8:	e5 59       	subi	r30, 0x95	; 149
    b8da:	fe 4f       	sbci	r31, 0xFE	; 254
    b8dc:	e6 0d       	add	r30, r6
    b8de:	f7 1d       	adc	r31, r7
    b8e0:	65 91       	lpm	r22, Z+
    b8e2:	74 91       	lpm	r23, Z
    b8e4:	f4 01       	movw	r30, r8
    b8e6:	e7 59       	subi	r30, 0x97	; 151
    b8e8:	fe 4f       	sbci	r31, 0xFE	; 254
    b8ea:	e6 0d       	add	r30, r6
    b8ec:	f7 1d       	adc	r31, r7
    b8ee:	85 91       	lpm	r24, Z+
    b8f0:	94 91       	lpm	r25, Z
    b8f2:	c8 54       	subi	r28, 0x48	; 72
    b8f4:	df 4f       	sbci	r29, 0xFF	; 255
    b8f6:	e8 81       	ld	r30, Y
    b8f8:	f9 81       	ldd	r31, Y+1	; 0x01
    b8fa:	c8 5b       	subi	r28, 0xB8	; 184
    b8fc:	d0 40       	sbci	r29, 0x00	; 0
    b8fe:	6e 0f       	add	r22, r30
    b900:	7f 1f       	adc	r23, r31
    b902:	cc 53       	subi	r28, 0x3C	; 60
    b904:	df 4f       	sbci	r29, 0xFF	; 255
    b906:	e8 80       	ld	r14, Y
    b908:	f9 80       	ldd	r15, Y+1	; 0x01
    b90a:	c4 5c       	subi	r28, 0xC4	; 196
    b90c:	d0 40       	sbci	r29, 0x00	; 0
    b90e:	ce 53       	subi	r28, 0x3E	; 62
    b910:	df 4f       	sbci	r29, 0xFF	; 255
    b912:	08 81       	ld	r16, Y
    b914:	19 81       	ldd	r17, Y+1	; 0x01
    b916:	c2 5c       	subi	r28, 0xC2	; 194
    b918:	d0 40       	sbci	r29, 0x00	; 0
    b91a:	ca 54       	subi	r28, 0x4A	; 74
    b91c:	df 4f       	sbci	r29, 0xFF	; 255
    b91e:	e8 81       	ld	r30, Y
    b920:	f9 81       	ldd	r31, Y+1	; 0x01
    b922:	c6 5b       	subi	r28, 0xB6	; 182
    b924:	d0 40       	sbci	r29, 0x00	; 0
    b926:	8e 0f       	add	r24, r30
    b928:	9f 1f       	adc	r25, r31
    b92a:	0e 94 98 57 	call	0xaf30	; 0xaf30 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b92e:	18 2f       	mov	r17, r24
    b930:	88 23       	and	r24, r24
    b932:	e1 f0       	breq	.+56     	; 0xb96c <draw_menu(bool)+0xa06>
    b934:	f4 01       	movw	r30, r8
    b936:	e9 58       	subi	r30, 0x89	; 137
    b938:	fe 4f       	sbci	r31, 0xFE	; 254
    b93a:	e6 0d       	add	r30, r6
    b93c:	f7 1d       	adc	r31, r7
    b93e:	25 91       	lpm	r18, Z+
    b940:	34 91       	lpm	r19, Z
    b942:	f4 01       	movw	r30, r8
    b944:	ea 58       	subi	r30, 0x8A	; 138
    b946:	fe 4f       	sbci	r31, 0xFE	; 254
    b948:	e6 0d       	add	r30, r6
    b94a:	f7 1d       	adc	r31, r7
    b94c:	84 91       	lpm	r24, Z
    b94e:	cf 54       	subi	r28, 0x4F	; 79
    b950:	df 4f       	sbci	r29, 0xFF	; 255
    b952:	68 81       	ld	r22, Y
    b954:	c1 5b       	subi	r28, 0xB1	; 177
    b956:	d0 40       	sbci	r29, 0x00	; 0
    b958:	70 e0       	ldi	r23, 0x00	; 0
    b95a:	45 2d       	mov	r20, r5
    b95c:	90 e0       	ldi	r25, 0x00	; 0
    b95e:	f9 01       	movw	r30, r18
    b960:	19 95       	eicall
    b962:	c6 53       	subi	r28, 0x36	; 54
    b964:	df 4f       	sbci	r29, 0xFF	; 255
    b966:	18 83       	st	Y, r17
    b968:	ca 5c       	subi	r28, 0xCA	; 202
    b96a:	d0 40       	sbci	r29, 0x00	; 0
    b96c:	53 94       	inc	r5
    b96e:	fa ce       	rjmp	.-524    	; 0xb764 <draw_menu(bool)+0x7fe>
    b970:	c6 53       	subi	r28, 0x36	; 54
    b972:	df 4f       	sbci	r29, 0xFF	; 255
    b974:	f8 81       	ld	r31, Y
    b976:	ca 5c       	subi	r28, 0xCA	; 202
    b978:	d0 40       	sbci	r29, 0x00	; 0
    b97a:	f1 11       	cpse	r31, r1
    b97c:	0c 94 bb 68 	jmp	0xd176	; 0xd176 <draw_menu(bool)+0x2210>
    b980:	51 2c       	mov	r5, r1
    b982:	43 01       	movw	r8, r6
    b984:	2e e3       	ldi	r18, 0x3E	; 62
    b986:	82 1a       	sub	r8, r18
    b988:	2d ef       	ldi	r18, 0xFD	; 253
    b98a:	92 0a       	sbc	r9, r18
    b98c:	f4 01       	movw	r30, r8
    b98e:	84 91       	lpm	r24, Z
    b990:	58 16       	cp	r5, r24
    b992:	08 f0       	brcs	.+2      	; 0xb996 <draw_menu(bool)+0xa30>
    b994:	d6 c0       	rjmp	.+428    	; 0xbb42 <draw_menu(bool)+0xbdc>
    b996:	f0 e1       	ldi	r31, 0x10	; 16
    b998:	5f 9e       	mul	r5, r31
    b99a:	60 01       	movw	r12, r0
    b99c:	11 24       	eor	r1, r1
    b99e:	f6 01       	movw	r30, r12
    b9a0:	e8 51       	subi	r30, 0x18	; 24
    b9a2:	fe 4f       	sbci	r31, 0xFE	; 254
    b9a4:	e6 0d       	add	r30, r6
    b9a6:	f7 1d       	adc	r31, r7
    b9a8:	25 91       	lpm	r18, Z+
    b9aa:	34 91       	lpm	r19, Z
    b9ac:	56 01       	movw	r10, r12
    b9ae:	4c e1       	ldi	r20, 0x1C	; 28
    b9b0:	a4 1a       	sub	r10, r20
    b9b2:	4e ef       	ldi	r20, 0xFE	; 254
    b9b4:	b4 0a       	sbc	r11, r20
    b9b6:	a6 0c       	add	r10, r6
    b9b8:	b7 1c       	adc	r11, r7
    b9ba:	f5 01       	movw	r30, r10
    b9bc:	84 91       	lpm	r24, Z
    b9be:	cf 54       	subi	r28, 0x4F	; 79
    b9c0:	df 4f       	sbci	r29, 0xFF	; 255
    b9c2:	68 81       	ld	r22, Y
    b9c4:	c1 5b       	subi	r28, 0xB1	; 177
    b9c6:	d0 40       	sbci	r29, 0x00	; 0
    b9c8:	70 e0       	ldi	r23, 0x00	; 0
    b9ca:	45 2d       	mov	r20, r5
    b9cc:	90 e0       	ldi	r25, 0x00	; 0
    b9ce:	f9 01       	movw	r30, r18
    b9d0:	19 95       	eicall
    b9d2:	88 23       	and	r24, r24
    b9d4:	09 f4       	brne	.+2      	; 0xb9d8 <draw_menu(bool)+0xa72>
    b9d6:	b3 c0       	rjmp	.+358    	; 0xbb3e <draw_menu(bool)+0xbd8>
    b9d8:	f6 01       	movw	r30, r12
    b9da:	e9 51       	subi	r30, 0x19	; 25
    b9dc:	fe 4f       	sbci	r31, 0xFE	; 254
    b9de:	e6 0d       	add	r30, r6
    b9e0:	f7 1d       	adc	r31, r7
    b9e2:	84 91       	lpm	r24, Z
    b9e4:	cd 52       	subi	r28, 0x2D	; 45
    b9e6:	df 4f       	sbci	r29, 0xFF	; 255
    b9e8:	68 81       	ld	r22, Y
    b9ea:	c3 5d       	subi	r28, 0xD3	; 211
    b9ec:	d0 40       	sbci	r29, 0x00	; 0
    b9ee:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <enable_redraw(unsigned char, unsigned char)>
    b9f2:	88 23       	and	r24, r24
    b9f4:	09 f4       	brne	.+2      	; 0xb9f8 <draw_menu(bool)+0xa92>
    b9f6:	3c c0       	rjmp	.+120    	; 0xba70 <draw_menu(bool)+0xb0a>
    b9f8:	f6 01       	movw	r30, r12
    b9fa:	e6 52       	subi	r30, 0x26	; 38
    b9fc:	fe 4f       	sbci	r31, 0xFE	; 254
    b9fe:	e6 0d       	add	r30, r6
    ba00:	f7 1d       	adc	r31, r7
    ba02:	e5 90       	lpm	r14, Z+
    ba04:	f4 90       	lpm	r15, Z
    ba06:	f6 01       	movw	r30, r12
    ba08:	ed 51       	subi	r30, 0x1D	; 29
    ba0a:	fe 4f       	sbci	r31, 0xFE	; 254
    ba0c:	e6 0d       	add	r30, r6
    ba0e:	f7 1d       	adc	r31, r7
    ba10:	05 91       	lpm	r16, Z+
    ba12:	14 91       	lpm	r17, Z
    ba14:	f6 01       	movw	r30, r12
    ba16:	ef 51       	subi	r30, 0x1F	; 31
    ba18:	fe 4f       	sbci	r31, 0xFE	; 254
    ba1a:	e6 0d       	add	r30, r6
    ba1c:	f7 1d       	adc	r31, r7
    ba1e:	25 91       	lpm	r18, Z+
    ba20:	34 91       	lpm	r19, Z
    ba22:	f6 01       	movw	r30, r12
    ba24:	e1 52       	subi	r30, 0x21	; 33
    ba26:	fe 4f       	sbci	r31, 0xFE	; 254
    ba28:	e6 0d       	add	r30, r6
    ba2a:	f7 1d       	adc	r31, r7
    ba2c:	45 91       	lpm	r20, Z+
    ba2e:	54 91       	lpm	r21, Z
    ba30:	f6 01       	movw	r30, r12
    ba32:	e3 52       	subi	r30, 0x23	; 35
    ba34:	fe 4f       	sbci	r31, 0xFE	; 254
    ba36:	e6 0d       	add	r30, r6
    ba38:	f7 1d       	adc	r31, r7
    ba3a:	65 91       	lpm	r22, Z+
    ba3c:	74 91       	lpm	r23, Z
    ba3e:	f6 01       	movw	r30, r12
    ba40:	e5 52       	subi	r30, 0x25	; 37
    ba42:	fe 4f       	sbci	r31, 0xFE	; 254
    ba44:	e6 0d       	add	r30, r6
    ba46:	f7 1d       	adc	r31, r7
    ba48:	85 91       	lpm	r24, Z+
    ba4a:	94 91       	lpm	r25, Z
    ba4c:	c8 54       	subi	r28, 0x48	; 72
    ba4e:	df 4f       	sbci	r29, 0xFF	; 255
    ba50:	e8 81       	ld	r30, Y
    ba52:	f9 81       	ldd	r31, Y+1	; 0x01
    ba54:	c8 5b       	subi	r28, 0xB8	; 184
    ba56:	d0 40       	sbci	r29, 0x00	; 0
    ba58:	6e 0f       	add	r22, r30
    ba5a:	7f 1f       	adc	r23, r31
    ba5c:	ca 54       	subi	r28, 0x4A	; 74
    ba5e:	df 4f       	sbci	r29, 0xFF	; 255
    ba60:	e8 81       	ld	r30, Y
    ba62:	f9 81       	ldd	r31, Y+1	; 0x01
    ba64:	c6 5b       	subi	r28, 0xB6	; 182
    ba66:	d0 40       	sbci	r29, 0x00	; 0
    ba68:	8e 0f       	add	r24, r30
    ba6a:	9f 1f       	adc	r25, r31
    ba6c:	0e 94 07 57 	call	0xae0e	; 0xae0e <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
    ba70:	ce 53       	subi	r28, 0x3E	; 62
    ba72:	df 4f       	sbci	r29, 0xFF	; 255
    ba74:	28 81       	ld	r18, Y
    ba76:	39 81       	ldd	r19, Y+1	; 0x01
    ba78:	c2 5c       	subi	r28, 0xC2	; 194
    ba7a:	d0 40       	sbci	r29, 0x00	; 0
    ba7c:	23 2b       	or	r18, r19
    ba7e:	09 f4       	brne	.+2      	; 0xba82 <draw_menu(bool)+0xb1c>
    ba80:	5e c0       	rjmp	.+188    	; 0xbb3e <draw_menu(bool)+0xbd8>
    ba82:	cc 53       	subi	r28, 0x3C	; 60
    ba84:	df 4f       	sbci	r29, 0xFF	; 255
    ba86:	48 81       	ld	r20, Y
    ba88:	59 81       	ldd	r21, Y+1	; 0x01
    ba8a:	c4 5c       	subi	r28, 0xC4	; 196
    ba8c:	d0 40       	sbci	r29, 0x00	; 0
    ba8e:	45 2b       	or	r20, r21
    ba90:	09 f4       	brne	.+2      	; 0xba94 <draw_menu(bool)+0xb2e>
    ba92:	55 c0       	rjmp	.+170    	; 0xbb3e <draw_menu(bool)+0xbd8>
    ba94:	f6 01       	movw	r30, r12
    ba96:	ef 51       	subi	r30, 0x1F	; 31
    ba98:	fe 4f       	sbci	r31, 0xFE	; 254
    ba9a:	e6 0d       	add	r30, r6
    ba9c:	f7 1d       	adc	r31, r7
    ba9e:	25 91       	lpm	r18, Z+
    baa0:	34 91       	lpm	r19, Z
    baa2:	f6 01       	movw	r30, r12
    baa4:	e1 52       	subi	r30, 0x21	; 33
    baa6:	fe 4f       	sbci	r31, 0xFE	; 254
    baa8:	e6 0d       	add	r30, r6
    baaa:	f7 1d       	adc	r31, r7
    baac:	45 91       	lpm	r20, Z+
    baae:	54 91       	lpm	r21, Z
    bab0:	f6 01       	movw	r30, r12
    bab2:	e3 52       	subi	r30, 0x23	; 35
    bab4:	fe 4f       	sbci	r31, 0xFE	; 254
    bab6:	e6 0d       	add	r30, r6
    bab8:	f7 1d       	adc	r31, r7
    baba:	65 91       	lpm	r22, Z+
    babc:	74 91       	lpm	r23, Z
    babe:	f6 01       	movw	r30, r12
    bac0:	e5 52       	subi	r30, 0x25	; 37
    bac2:	fe 4f       	sbci	r31, 0xFE	; 254
    bac4:	e6 0d       	add	r30, r6
    bac6:	f7 1d       	adc	r31, r7
    bac8:	85 91       	lpm	r24, Z+
    baca:	94 91       	lpm	r25, Z
    bacc:	c8 54       	subi	r28, 0x48	; 72
    bace:	df 4f       	sbci	r29, 0xFF	; 255
    bad0:	e8 81       	ld	r30, Y
    bad2:	f9 81       	ldd	r31, Y+1	; 0x01
    bad4:	c8 5b       	subi	r28, 0xB8	; 184
    bad6:	d0 40       	sbci	r29, 0x00	; 0
    bad8:	6e 0f       	add	r22, r30
    bada:	7f 1f       	adc	r23, r31
    badc:	cc 53       	subi	r28, 0x3C	; 60
    bade:	df 4f       	sbci	r29, 0xFF	; 255
    bae0:	e8 80       	ld	r14, Y
    bae2:	f9 80       	ldd	r15, Y+1	; 0x01
    bae4:	c4 5c       	subi	r28, 0xC4	; 196
    bae6:	d0 40       	sbci	r29, 0x00	; 0
    bae8:	ce 53       	subi	r28, 0x3E	; 62
    baea:	df 4f       	sbci	r29, 0xFF	; 255
    baec:	08 81       	ld	r16, Y
    baee:	19 81       	ldd	r17, Y+1	; 0x01
    baf0:	c2 5c       	subi	r28, 0xC2	; 194
    baf2:	d0 40       	sbci	r29, 0x00	; 0
    baf4:	ca 54       	subi	r28, 0x4A	; 74
    baf6:	df 4f       	sbci	r29, 0xFF	; 255
    baf8:	e8 81       	ld	r30, Y
    bafa:	f9 81       	ldd	r31, Y+1	; 0x01
    bafc:	c6 5b       	subi	r28, 0xB6	; 182
    bafe:	d0 40       	sbci	r29, 0x00	; 0
    bb00:	8e 0f       	add	r24, r30
    bb02:	9f 1f       	adc	r25, r31
    bb04:	0e 94 98 57 	call	0xaf30	; 0xaf30 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    bb08:	18 2f       	mov	r17, r24
    bb0a:	88 23       	and	r24, r24
    bb0c:	c1 f0       	breq	.+48     	; 0xbb3e <draw_menu(bool)+0xbd8>
    bb0e:	f6 01       	movw	r30, r12
    bb10:	eb 51       	subi	r30, 0x1B	; 27
    bb12:	fe 4f       	sbci	r31, 0xFE	; 254
    bb14:	e6 0d       	add	r30, r6
    bb16:	f7 1d       	adc	r31, r7
    bb18:	25 91       	lpm	r18, Z+
    bb1a:	34 91       	lpm	r19, Z
    bb1c:	f5 01       	movw	r30, r10
    bb1e:	84 91       	lpm	r24, Z
    bb20:	cf 54       	subi	r28, 0x4F	; 79
    bb22:	df 4f       	sbci	r29, 0xFF	; 255
    bb24:	68 81       	ld	r22, Y
    bb26:	c1 5b       	subi	r28, 0xB1	; 177
    bb28:	d0 40       	sbci	r29, 0x00	; 0
    bb2a:	70 e0       	ldi	r23, 0x00	; 0
    bb2c:	45 2d       	mov	r20, r5
    bb2e:	90 e0       	ldi	r25, 0x00	; 0
    bb30:	f9 01       	movw	r30, r18
    bb32:	19 95       	eicall
    bb34:	c6 53       	subi	r28, 0x36	; 54
    bb36:	df 4f       	sbci	r29, 0xFF	; 255
    bb38:	18 83       	st	Y, r17
    bb3a:	ca 5c       	subi	r28, 0xCA	; 202
    bb3c:	d0 40       	sbci	r29, 0x00	; 0
    bb3e:	53 94       	inc	r5
    bb40:	25 cf       	rjmp	.-438    	; 0xb98c <draw_menu(bool)+0xa26>
    bb42:	c6 53       	subi	r28, 0x36	; 54
    bb44:	df 4f       	sbci	r29, 0xFF	; 255
    bb46:	f8 81       	ld	r31, Y
    bb48:	ca 5c       	subi	r28, 0xCA	; 202
    bb4a:	d0 40       	sbci	r29, 0x00	; 0
    bb4c:	f1 11       	cpse	r31, r1
    bb4e:	0c 94 bb 68 	jmp	0xd176	; 0xd176 <draw_menu(bool)+0x2210>
    bb52:	51 2c       	mov	r5, r1
    bb54:	93 01       	movw	r18, r6
    bb56:	2d 53       	subi	r18, 0x3D	; 61
    bb58:	3d 4f       	sbci	r19, 0xFD	; 253
    bb5a:	cc 52       	subi	r28, 0x2C	; 44
    bb5c:	df 4f       	sbci	r29, 0xFF	; 255
    bb5e:	39 83       	std	Y+1, r19	; 0x01
    bb60:	28 83       	st	Y, r18
    bb62:	c4 5d       	subi	r28, 0xD4	; 212
    bb64:	d0 40       	sbci	r29, 0x00	; 0
    bb66:	cc 52       	subi	r28, 0x2C	; 44
    bb68:	df 4f       	sbci	r29, 0xFF	; 255
    bb6a:	e8 81       	ld	r30, Y
    bb6c:	f9 81       	ldd	r31, Y+1	; 0x01
    bb6e:	c4 5d       	subi	r28, 0xD4	; 212
    bb70:	d0 40       	sbci	r29, 0x00	; 0
    bb72:	84 91       	lpm	r24, Z
    bb74:	58 16       	cp	r5, r24
    bb76:	08 f0       	brcs	.+2      	; 0xbb7a <draw_menu(bool)+0xc14>
    bb78:	60 c3       	rjmp	.+1728   	; 0xc23a <draw_menu(bool)+0x12d4>
    bb7a:	f7 e1       	ldi	r31, 0x17	; 23
    bb7c:	5f 9e       	mul	r5, r31
    bb7e:	60 01       	movw	r12, r0
    bb80:	11 24       	eor	r1, r1
    bb82:	f6 01       	movw	r30, r12
    bb84:	e0 59       	subi	r30, 0x90	; 144
    bb86:	fd 4f       	sbci	r31, 0xFD	; 253
    bb88:	e6 0d       	add	r30, r6
    bb8a:	f7 1d       	adc	r31, r7
    bb8c:	84 91       	lpm	r24, Z
    bb8e:	cd 52       	subi	r28, 0x2D	; 45
    bb90:	df 4f       	sbci	r29, 0xFF	; 255
    bb92:	68 81       	ld	r22, Y
    bb94:	c3 5d       	subi	r28, 0xD3	; 211
    bb96:	d0 40       	sbci	r29, 0x00	; 0
    bb98:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <enable_redraw(unsigned char, unsigned char)>
    bb9c:	88 23       	and	r24, r24
    bb9e:	09 f4       	brne	.+2      	; 0xbba2 <draw_menu(bool)+0xc3c>
    bba0:	98 c1       	rjmp	.+816    	; 0xbed2 <draw_menu(bool)+0xf6c>
    bba2:	ce 54       	subi	r28, 0x4E	; 78
    bba4:	df 4f       	sbci	r29, 0xFF	; 255
    bba6:	18 82       	st	Y, r1
    bba8:	c2 5b       	subi	r28, 0xB2	; 178
    bbaa:	d0 40       	sbci	r29, 0x00	; 0
    bbac:	f6 01       	movw	r30, r12
    bbae:	e2 59       	subi	r30, 0x92	; 146
    bbb0:	fd 4f       	sbci	r31, 0xFD	; 253
    bbb2:	e6 0d       	add	r30, r6
    bbb4:	f7 1d       	adc	r31, r7
    bbb6:	25 91       	lpm	r18, Z+
    bbb8:	34 91       	lpm	r19, Z
    bbba:	c6 01       	movw	r24, r12
    bbbc:	87 59       	subi	r24, 0x97	; 151
    bbbe:	9d 4f       	sbci	r25, 0xFD	; 253
    bbc0:	a3 01       	movw	r20, r6
    bbc2:	48 0f       	add	r20, r24
    bbc4:	59 1f       	adc	r21, r25
    bbc6:	c6 54       	subi	r28, 0x46	; 70
    bbc8:	df 4f       	sbci	r29, 0xFF	; 255
    bbca:	59 83       	std	Y+1, r21	; 0x01
    bbcc:	48 83       	st	Y, r20
    bbce:	ca 5b       	subi	r28, 0xBA	; 186
    bbd0:	d0 40       	sbci	r29, 0x00	; 0
    bbd2:	fa 01       	movw	r30, r20
    bbd4:	84 91       	lpm	r24, Z
    bbd6:	cf 54       	subi	r28, 0x4F	; 79
    bbd8:	df 4f       	sbci	r29, 0xFF	; 255
    bbda:	68 81       	ld	r22, Y
    bbdc:	c1 5b       	subi	r28, 0xB1	; 177
    bbde:	d0 40       	sbci	r29, 0x00	; 0
    bbe0:	70 e0       	ldi	r23, 0x00	; 0
    bbe2:	40 e0       	ldi	r20, 0x00	; 0
    bbe4:	90 e0       	ldi	r25, 0x00	; 0
    bbe6:	f9 01       	movw	r30, r18
    bbe8:	19 95       	eicall
    bbea:	cd 54       	subi	r28, 0x4D	; 77
    bbec:	df 4f       	sbci	r29, 0xFF	; 255
    bbee:	88 83       	st	Y, r24
    bbf0:	c3 5b       	subi	r28, 0xB3	; 179
    bbf2:	d0 40       	sbci	r29, 0x00	; 0
    bbf4:	f6 01       	movw	r30, r12
    bbf6:	e6 59       	subi	r30, 0x96	; 150
    bbf8:	fd 4f       	sbci	r31, 0xFD	; 253
    bbfa:	e6 0d       	add	r30, r6
    bbfc:	f7 1d       	adc	r31, r7
    bbfe:	25 91       	lpm	r18, Z+
    bc00:	34 91       	lpm	r19, Z
    bc02:	cf 52       	subi	r28, 0x2F	; 47
    bc04:	df 4f       	sbci	r29, 0xFF	; 255
    bc06:	39 83       	std	Y+1, r19	; 0x01
    bc08:	28 83       	st	Y, r18
    bc0a:	c1 5d       	subi	r28, 0xD1	; 209
    bc0c:	d0 40       	sbci	r29, 0x00	; 0
    bc0e:	46 01       	movw	r8, r12
    bc10:	36 ea       	ldi	r19, 0xA6	; 166
    bc12:	83 1a       	sub	r8, r19
    bc14:	3d ef       	ldi	r19, 0xFD	; 253
    bc16:	93 0a       	sbc	r9, r19
    bc18:	86 0c       	add	r8, r6
    bc1a:	97 1c       	adc	r9, r7
    bc1c:	56 01       	movw	r10, r12
    bc1e:	44 ea       	ldi	r20, 0xA4	; 164
    bc20:	a4 1a       	sub	r10, r20
    bc22:	4d ef       	ldi	r20, 0xFD	; 253
    bc24:	b4 0a       	sbc	r11, r20
    bc26:	a6 0c       	add	r10, r6
    bc28:	b7 1c       	adc	r11, r7
    bc2a:	16 01       	movw	r2, r12
    bc2c:	5b e9       	ldi	r21, 0x9B	; 155
    bc2e:	25 1a       	sub	r2, r21
    bc30:	5d ef       	ldi	r21, 0xFD	; 253
    bc32:	35 0a       	sbc	r3, r21
    bc34:	26 0c       	add	r2, r6
    bc36:	37 1c       	adc	r3, r7
    bc38:	c6 01       	movw	r24, r12
    bc3a:	8c 59       	subi	r24, 0x9C	; 156
    bc3c:	9d 4f       	sbci	r25, 0xFD	; 253
    bc3e:	b3 01       	movw	r22, r6
    bc40:	68 0f       	add	r22, r24
    bc42:	79 1f       	adc	r23, r25
    bc44:	c0 54       	subi	r28, 0x40	; 64
    bc46:	df 4f       	sbci	r29, 0xFF	; 255
    bc48:	79 83       	std	Y+1, r23	; 0x01
    bc4a:	68 83       	st	Y, r22
    bc4c:	c0 5c       	subi	r28, 0xC0	; 192
    bc4e:	d0 40       	sbci	r29, 0x00	; 0
    bc50:	01 97       	sbiw	r24, 0x01	; 1
    bc52:	f3 01       	movw	r30, r6
    bc54:	e8 0f       	add	r30, r24
    bc56:	f9 1f       	adc	r31, r25
    bc58:	ca 53       	subi	r28, 0x3A	; 58
    bc5a:	df 4f       	sbci	r29, 0xFF	; 255
    bc5c:	f9 83       	std	Y+1, r31	; 0x01
    bc5e:	e8 83       	st	Y, r30
    bc60:	c6 5c       	subi	r28, 0xC6	; 198
    bc62:	d0 40       	sbci	r29, 0x00	; 0
    bc64:	03 96       	adiw	r24, 0x03	; 3
    bc66:	93 01       	movw	r18, r6
    bc68:	28 0f       	add	r18, r24
    bc6a:	39 1f       	adc	r19, r25
    bc6c:	c8 53       	subi	r28, 0x38	; 56
    bc6e:	df 4f       	sbci	r29, 0xFF	; 255
    bc70:	39 83       	std	Y+1, r19	; 0x01
    bc72:	28 83       	st	Y, r18
    bc74:	c8 5c       	subi	r28, 0xC8	; 200
    bc76:	d0 40       	sbci	r29, 0x00	; 0
    bc78:	04 97       	sbiw	r24, 0x04	; 4
    bc7a:	a3 01       	movw	r20, r6
    bc7c:	48 0f       	add	r20, r24
    bc7e:	59 1f       	adc	r21, r25
    bc80:	c5 53       	subi	r28, 0x35	; 53
    bc82:	df 4f       	sbci	r29, 0xFF	; 255
    bc84:	59 83       	std	Y+1, r21	; 0x01
    bc86:	48 83       	st	Y, r20
    bc88:	cb 5c       	subi	r28, 0xCB	; 203
    bc8a:	d0 40       	sbci	r29, 0x00	; 0
    bc8c:	02 97       	sbiw	r24, 0x02	; 2
    bc8e:	b3 01       	movw	r22, r6
    bc90:	68 0f       	add	r22, r24
    bc92:	79 1f       	adc	r23, r25
    bc94:	c3 53       	subi	r28, 0x33	; 51
    bc96:	df 4f       	sbci	r29, 0xFF	; 255
    bc98:	79 83       	std	Y+1, r23	; 0x01
    bc9a:	68 83       	st	Y, r22
    bc9c:	cd 5c       	subi	r28, 0xCD	; 205
    bc9e:	d0 40       	sbci	r29, 0x00	; 0
    bca0:	02 97       	sbiw	r24, 0x02	; 2
    bca2:	f3 01       	movw	r30, r6
    bca4:	e8 0f       	add	r30, r24
    bca6:	f9 1f       	adc	r31, r25
    bca8:	c1 53       	subi	r28, 0x31	; 49
    bcaa:	df 4f       	sbci	r29, 0xFF	; 255
    bcac:	f9 83       	std	Y+1, r31	; 0x01
    bcae:	e8 83       	st	Y, r30
    bcb0:	cf 5c       	subi	r28, 0xCF	; 207
    bcb2:	d0 40       	sbci	r29, 0x00	; 0
    bcb4:	f1 2c       	mov	r15, r1
    bcb6:	41 2c       	mov	r4, r1
    bcb8:	ce 54       	subi	r28, 0x4E	; 78
    bcba:	df 4f       	sbci	r29, 0xFF	; 255
    bcbc:	88 81       	ld	r24, Y
    bcbe:	c2 5b       	subi	r28, 0xB2	; 178
    bcc0:	d0 40       	sbci	r29, 0x00	; 0
    bcc2:	cd 54       	subi	r28, 0x4D	; 77
    bcc4:	df 4f       	sbci	r29, 0xFF	; 255
    bcc6:	98 81       	ld	r25, Y
    bcc8:	c3 5b       	subi	r28, 0xB3	; 179
    bcca:	d0 40       	sbci	r29, 0x00	; 0
    bccc:	89 17       	cp	r24, r25
    bcce:	08 f0       	brcs	.+2      	; 0xbcd2 <draw_menu(bool)+0xd6c>
    bcd0:	00 c1       	rjmp	.+512    	; 0xbed2 <draw_menu(bool)+0xf6c>
    bcd2:	f4 01       	movw	r30, r8
    bcd4:	45 91       	lpm	r20, Z+
    bcd6:	54 91       	lpm	r21, Z
    bcd8:	f5 01       	movw	r30, r10
    bcda:	25 91       	lpm	r18, Z+
    bcdc:	34 91       	lpm	r19, Z
    bcde:	f1 01       	movw	r30, r2
    bce0:	94 91       	lpm	r25, Z
    bce2:	99 23       	and	r25, r25
    bce4:	09 f4       	brne	.+2      	; 0xbce8 <draw_menu(bool)+0xd82>
    bce6:	b7 c0       	rjmp	.+366    	; 0xbe56 <draw_menu(bool)+0xef0>
    bce8:	c8 54       	subi	r28, 0x48	; 72
    bcea:	df 4f       	sbci	r29, 0xFF	; 255
    bcec:	68 81       	ld	r22, Y
    bcee:	79 81       	ldd	r23, Y+1	; 0x01
    bcf0:	c8 5b       	subi	r28, 0xB8	; 184
    bcf2:	d0 40       	sbci	r29, 0x00	; 0
    bcf4:	62 0f       	add	r22, r18
    bcf6:	73 1f       	adc	r23, r19
    bcf8:	c2 54       	subi	r28, 0x42	; 66
    bcfa:	df 4f       	sbci	r29, 0xFF	; 255
    bcfc:	79 83       	std	Y+1, r23	; 0x01
    bcfe:	68 83       	st	Y, r22
    bd00:	ce 5b       	subi	r28, 0xBE	; 190
    bd02:	d0 40       	sbci	r29, 0x00	; 0
    bd04:	f1 01       	movw	r30, r2
    bd06:	94 91       	lpm	r25, Z
    bd08:	91 30       	cpi	r25, 0x01	; 1
    bd0a:	09 f4       	brne	.+2      	; 0xbd0e <draw_menu(bool)+0xda8>
    bd0c:	c3 c0       	rjmp	.+390    	; 0xbe94 <draw_menu(bool)+0xf2e>
    bd0e:	ca 54       	subi	r28, 0x4A	; 74
    bd10:	df 4f       	sbci	r29, 0xFF	; 255
    bd12:	28 81       	ld	r18, Y
    bd14:	39 81       	ldd	r19, Y+1	; 0x01
    bd16:	c6 5b       	subi	r28, 0xB6	; 182
    bd18:	d0 40       	sbci	r29, 0x00	; 0
    bd1a:	24 0f       	add	r18, r20
    bd1c:	35 1f       	adc	r19, r21
    bd1e:	c4 54       	subi	r28, 0x44	; 68
    bd20:	df 4f       	sbci	r29, 0xFF	; 255
    bd22:	39 83       	std	Y+1, r19	; 0x01
    bd24:	28 83       	st	Y, r18
    bd26:	cc 5b       	subi	r28, 0xBC	; 188
    bd28:	d0 40       	sbci	r29, 0x00	; 0
    bd2a:	f1 01       	movw	r30, r2
    bd2c:	94 91       	lpm	r25, Z
    bd2e:	92 30       	cpi	r25, 0x02	; 2
    bd30:	09 f0       	breq	.+2      	; 0xbd34 <draw_menu(bool)+0xdce>
    bd32:	46 c0       	rjmp	.+140    	; 0xbdc0 <draw_menu(bool)+0xe5a>
    bd34:	f4 01       	movw	r30, r8
    bd36:	25 91       	lpm	r18, Z+
    bd38:	34 91       	lpm	r19, Z
    bd3a:	ca 53       	subi	r28, 0x3A	; 58
    bd3c:	df 4f       	sbci	r29, 0xFF	; 255
    bd3e:	e8 81       	ld	r30, Y
    bd40:	f9 81       	ldd	r31, Y+1	; 0x01
    bd42:	c6 5c       	subi	r28, 0xC6	; 198
    bd44:	d0 40       	sbci	r29, 0x00	; 0
    bd46:	94 91       	lpm	r25, Z
    bd48:	ca 54       	subi	r28, 0x4A	; 74
    bd4a:	df 4f       	sbci	r29, 0xFF	; 255
    bd4c:	48 81       	ld	r20, Y
    bd4e:	59 81       	ldd	r21, Y+1	; 0x01
    bd50:	c6 5b       	subi	r28, 0xB6	; 182
    bd52:	d0 40       	sbci	r29, 0x00	; 0
    bd54:	24 0f       	add	r18, r20
    bd56:	35 1f       	adc	r19, r21
    bd58:	b9 01       	movw	r22, r18
    bd5a:	94 9d       	mul	r25, r4
    bd5c:	60 0d       	add	r22, r0
    bd5e:	71 1d       	adc	r23, r1
    bd60:	11 24       	eor	r1, r1
    bd62:	c4 54       	subi	r28, 0x44	; 68
    bd64:	df 4f       	sbci	r29, 0xFF	; 255
    bd66:	79 83       	std	Y+1, r23	; 0x01
    bd68:	68 83       	st	Y, r22
    bd6a:	cc 5b       	subi	r28, 0xBC	; 188
    bd6c:	d0 40       	sbci	r29, 0x00	; 0
    bd6e:	f5 01       	movw	r30, r10
    bd70:	25 91       	lpm	r18, Z+
    bd72:	34 91       	lpm	r19, Z
    bd74:	c0 54       	subi	r28, 0x40	; 64
    bd76:	df 4f       	sbci	r29, 0xFF	; 255
    bd78:	e8 81       	ld	r30, Y
    bd7a:	f9 81       	ldd	r31, Y+1	; 0x01
    bd7c:	c0 5c       	subi	r28, 0xC0	; 192
    bd7e:	d0 40       	sbci	r29, 0x00	; 0
    bd80:	94 91       	lpm	r25, Z
    bd82:	c8 54       	subi	r28, 0x48	; 72
    bd84:	df 4f       	sbci	r29, 0xFF	; 255
    bd86:	48 81       	ld	r20, Y
    bd88:	59 81       	ldd	r21, Y+1	; 0x01
    bd8a:	c8 5b       	subi	r28, 0xB8	; 184
    bd8c:	d0 40       	sbci	r29, 0x00	; 0
    bd8e:	24 0f       	add	r18, r20
    bd90:	35 1f       	adc	r19, r21
    bd92:	b9 01       	movw	r22, r18
    bd94:	9f 9d       	mul	r25, r15
    bd96:	60 0d       	add	r22, r0
    bd98:	71 1d       	adc	r23, r1
    bd9a:	11 24       	eor	r1, r1
    bd9c:	c2 54       	subi	r28, 0x42	; 66
    bd9e:	df 4f       	sbci	r29, 0xFF	; 255
    bda0:	79 83       	std	Y+1, r23	; 0x01
    bda2:	68 83       	st	Y, r22
    bda4:	ce 5b       	subi	r28, 0xBE	; 190
    bda6:	d0 40       	sbci	r29, 0x00	; 0
    bda8:	43 94       	inc	r4
    bdaa:	c8 53       	subi	r28, 0x38	; 56
    bdac:	df 4f       	sbci	r29, 0xFF	; 255
    bdae:	e8 81       	ld	r30, Y
    bdb0:	f9 81       	ldd	r31, Y+1	; 0x01
    bdb2:	c8 5c       	subi	r28, 0xC8	; 200
    bdb4:	d0 40       	sbci	r29, 0x00	; 0
    bdb6:	94 91       	lpm	r25, Z
    bdb8:	49 16       	cp	r4, r25
    bdba:	10 f0       	brcs	.+4      	; 0xbdc0 <draw_menu(bool)+0xe5a>
    bdbc:	f3 94       	inc	r15
    bdbe:	41 2c       	mov	r4, r1
    bdc0:	c6 54       	subi	r28, 0x46	; 70
    bdc2:	df 4f       	sbci	r29, 0xFF	; 255
    bdc4:	e8 81       	ld	r30, Y
    bdc6:	f9 81       	ldd	r31, Y+1	; 0x01
    bdc8:	ca 5b       	subi	r28, 0xBA	; 186
    bdca:	d0 40       	sbci	r29, 0x00	; 0
    bdcc:	44 91       	lpm	r20, Z
    bdce:	8e 01       	movw	r16, r28
    bdd0:	0f 57       	subi	r16, 0x7F	; 127
    bdd2:	1f 4f       	sbci	r17, 0xFF	; 255
    bdd4:	9e 01       	movw	r18, r28
    bdd6:	2f 5f       	subi	r18, 0xFF	; 255
    bdd8:	3f 4f       	sbci	r19, 0xFF	; 255
    bdda:	cf 54       	subi	r28, 0x4F	; 79
    bddc:	df 4f       	sbci	r29, 0xFF	; 255
    bdde:	68 81       	ld	r22, Y
    bde0:	c1 5b       	subi	r28, 0xB1	; 177
    bde2:	d0 40       	sbci	r29, 0x00	; 0
    bde4:	cf 52       	subi	r28, 0x2F	; 47
    bde6:	df 4f       	sbci	r29, 0xFF	; 255
    bde8:	e8 81       	ld	r30, Y
    bdea:	f9 81       	ldd	r31, Y+1	; 0x01
    bdec:	c1 5d       	subi	r28, 0xD1	; 209
    bdee:	d0 40       	sbci	r29, 0x00	; 0
    bdf0:	19 95       	eicall
    bdf2:	c5 53       	subi	r28, 0x35	; 53
    bdf4:	df 4f       	sbci	r29, 0xFF	; 255
    bdf6:	e8 81       	ld	r30, Y
    bdf8:	f9 81       	ldd	r31, Y+1	; 0x01
    bdfa:	cb 5c       	subi	r28, 0xCB	; 203
    bdfc:	d0 40       	sbci	r29, 0x00	; 0
    bdfe:	04 91       	lpm	r16, Z
    be00:	c3 53       	subi	r28, 0x33	; 51
    be02:	df 4f       	sbci	r29, 0xFF	; 255
    be04:	e8 81       	ld	r30, Y
    be06:	f9 81       	ldd	r31, Y+1	; 0x01
    be08:	cd 5c       	subi	r28, 0xCD	; 205
    be0a:	d0 40       	sbci	r29, 0x00	; 0
    be0c:	25 91       	lpm	r18, Z+
    be0e:	34 91       	lpm	r19, Z
    be10:	c1 53       	subi	r28, 0x31	; 49
    be12:	df 4f       	sbci	r29, 0xFF	; 255
    be14:	e8 81       	ld	r30, Y
    be16:	f9 81       	ldd	r31, Y+1	; 0x01
    be18:	cf 5c       	subi	r28, 0xCF	; 207
    be1a:	d0 40       	sbci	r29, 0x00	; 0
    be1c:	45 91       	lpm	r20, Z+
    be1e:	54 91       	lpm	r21, Z
    be20:	e9 80       	ldd	r14, Y+1	; 0x01
    be22:	c2 54       	subi	r28, 0x42	; 66
    be24:	df 4f       	sbci	r29, 0xFF	; 255
    be26:	68 81       	ld	r22, Y
    be28:	79 81       	ldd	r23, Y+1	; 0x01
    be2a:	ce 5b       	subi	r28, 0xBE	; 190
    be2c:	d0 40       	sbci	r29, 0x00	; 0
    be2e:	c4 54       	subi	r28, 0x44	; 68
    be30:	df 4f       	sbci	r29, 0xFF	; 255
    be32:	88 81       	ld	r24, Y
    be34:	99 81       	ldd	r25, Y+1	; 0x01
    be36:	cc 5b       	subi	r28, 0xBC	; 188
    be38:	d0 40       	sbci	r29, 0x00	; 0
    be3a:	0e 94 07 57 	call	0xae0e	; 0xae0e <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
    be3e:	ce 54       	subi	r28, 0x4E	; 78
    be40:	df 4f       	sbci	r29, 0xFF	; 255
    be42:	88 81       	ld	r24, Y
    be44:	c2 5b       	subi	r28, 0xB2	; 178
    be46:	d0 40       	sbci	r29, 0x00	; 0
    be48:	8f 5f       	subi	r24, 0xFF	; 255
    be4a:	ce 54       	subi	r28, 0x4E	; 78
    be4c:	df 4f       	sbci	r29, 0xFF	; 255
    be4e:	88 83       	st	Y, r24
    be50:	c2 5b       	subi	r28, 0xB2	; 178
    be52:	d0 40       	sbci	r29, 0x00	; 0
    be54:	31 cf       	rjmp	.-414    	; 0xbcb8 <draw_menu(bool)+0xd52>
    be56:	f5 01       	movw	r30, r10
    be58:	25 91       	lpm	r18, Z+
    be5a:	34 91       	lpm	r19, Z
    be5c:	c0 54       	subi	r28, 0x40	; 64
    be5e:	df 4f       	sbci	r29, 0xFF	; 255
    be60:	e8 81       	ld	r30, Y
    be62:	f9 81       	ldd	r31, Y+1	; 0x01
    be64:	c0 5c       	subi	r28, 0xC0	; 192
    be66:	d0 40       	sbci	r29, 0x00	; 0
    be68:	94 91       	lpm	r25, Z
    be6a:	c8 54       	subi	r28, 0x48	; 72
    be6c:	df 4f       	sbci	r29, 0xFF	; 255
    be6e:	68 81       	ld	r22, Y
    be70:	79 81       	ldd	r23, Y+1	; 0x01
    be72:	c8 5b       	subi	r28, 0xB8	; 184
    be74:	d0 40       	sbci	r29, 0x00	; 0
    be76:	26 0f       	add	r18, r22
    be78:	37 1f       	adc	r19, r23
    be7a:	f9 01       	movw	r30, r18
    be7c:	94 9d       	mul	r25, r4
    be7e:	e0 0d       	add	r30, r0
    be80:	f1 1d       	adc	r31, r1
    be82:	11 24       	eor	r1, r1
    be84:	c2 54       	subi	r28, 0x42	; 66
    be86:	df 4f       	sbci	r29, 0xFF	; 255
    be88:	f9 83       	std	Y+1, r31	; 0x01
    be8a:	e8 83       	st	Y, r30
    be8c:	ce 5b       	subi	r28, 0xBE	; 190
    be8e:	d0 40       	sbci	r29, 0x00	; 0
    be90:	43 94       	inc	r4
    be92:	38 cf       	rjmp	.-400    	; 0xbd04 <draw_menu(bool)+0xd9e>
    be94:	f4 01       	movw	r30, r8
    be96:	25 91       	lpm	r18, Z+
    be98:	34 91       	lpm	r19, Z
    be9a:	ca 53       	subi	r28, 0x3A	; 58
    be9c:	df 4f       	sbci	r29, 0xFF	; 255
    be9e:	e8 81       	ld	r30, Y
    bea0:	f9 81       	ldd	r31, Y+1	; 0x01
    bea2:	c6 5c       	subi	r28, 0xC6	; 198
    bea4:	d0 40       	sbci	r29, 0x00	; 0
    bea6:	94 91       	lpm	r25, Z
    bea8:	ca 54       	subi	r28, 0x4A	; 74
    beaa:	df 4f       	sbci	r29, 0xFF	; 255
    beac:	48 81       	ld	r20, Y
    beae:	59 81       	ldd	r21, Y+1	; 0x01
    beb0:	c6 5b       	subi	r28, 0xB6	; 182
    beb2:	d0 40       	sbci	r29, 0x00	; 0
    beb4:	24 0f       	add	r18, r20
    beb6:	35 1f       	adc	r19, r21
    beb8:	b9 01       	movw	r22, r18
    beba:	94 9d       	mul	r25, r4
    bebc:	60 0d       	add	r22, r0
    bebe:	71 1d       	adc	r23, r1
    bec0:	11 24       	eor	r1, r1
    bec2:	c4 54       	subi	r28, 0x44	; 68
    bec4:	df 4f       	sbci	r29, 0xFF	; 255
    bec6:	79 83       	std	Y+1, r23	; 0x01
    bec8:	68 83       	st	Y, r22
    beca:	cc 5b       	subi	r28, 0xBC	; 188
    becc:	d0 40       	sbci	r29, 0x00	; 0
    bece:	43 94       	inc	r4
    bed0:	2c cf       	rjmp	.-424    	; 0xbd2a <draw_menu(bool)+0xdc4>
    bed2:	ce 53       	subi	r28, 0x3E	; 62
    bed4:	df 4f       	sbci	r29, 0xFF	; 255
    bed6:	28 81       	ld	r18, Y
    bed8:	39 81       	ldd	r19, Y+1	; 0x01
    beda:	c2 5c       	subi	r28, 0xC2	; 194
    bedc:	d0 40       	sbci	r29, 0x00	; 0
    bede:	23 2b       	or	r18, r19
    bee0:	09 f4       	brne	.+2      	; 0xbee4 <draw_menu(bool)+0xf7e>
    bee2:	69 c1       	rjmp	.+722    	; 0xc1b6 <draw_menu(bool)+0x1250>
    bee4:	cc 53       	subi	r28, 0x3C	; 60
    bee6:	df 4f       	sbci	r29, 0xFF	; 255
    bee8:	48 81       	ld	r20, Y
    beea:	59 81       	ldd	r21, Y+1	; 0x01
    beec:	c4 5c       	subi	r28, 0xC4	; 196
    beee:	d0 40       	sbci	r29, 0x00	; 0
    bef0:	45 2b       	or	r20, r21
    bef2:	09 f4       	brne	.+2      	; 0xbef6 <draw_menu(bool)+0xf90>
    bef4:	60 c1       	rjmp	.+704    	; 0xc1b6 <draw_menu(bool)+0x1250>
    bef6:	ce 54       	subi	r28, 0x4E	; 78
    bef8:	df 4f       	sbci	r29, 0xFF	; 255
    befa:	18 82       	st	Y, r1
    befc:	c2 5b       	subi	r28, 0xB2	; 178
    befe:	d0 40       	sbci	r29, 0x00	; 0
    bf00:	f6 01       	movw	r30, r12
    bf02:	e2 59       	subi	r30, 0x92	; 146
    bf04:	fd 4f       	sbci	r31, 0xFD	; 253
    bf06:	e6 0d       	add	r30, r6
    bf08:	f7 1d       	adc	r31, r7
    bf0a:	25 91       	lpm	r18, Z+
    bf0c:	34 91       	lpm	r19, Z
    bf0e:	c6 01       	movw	r24, r12
    bf10:	87 59       	subi	r24, 0x97	; 151
    bf12:	9d 4f       	sbci	r25, 0xFD	; 253
    bf14:	b3 01       	movw	r22, r6
    bf16:	68 0f       	add	r22, r24
    bf18:	79 1f       	adc	r23, r25
    bf1a:	ca 53       	subi	r28, 0x3A	; 58
    bf1c:	df 4f       	sbci	r29, 0xFF	; 255
    bf1e:	79 83       	std	Y+1, r23	; 0x01
    bf20:	68 83       	st	Y, r22
    bf22:	c6 5c       	subi	r28, 0xC6	; 198
    bf24:	d0 40       	sbci	r29, 0x00	; 0
    bf26:	fb 01       	movw	r30, r22
    bf28:	84 91       	lpm	r24, Z
    bf2a:	cf 54       	subi	r28, 0x4F	; 79
    bf2c:	df 4f       	sbci	r29, 0xFF	; 255
    bf2e:	68 81       	ld	r22, Y
    bf30:	c1 5b       	subi	r28, 0xB1	; 177
    bf32:	d0 40       	sbci	r29, 0x00	; 0
    bf34:	70 e0       	ldi	r23, 0x00	; 0
    bf36:	40 e0       	ldi	r20, 0x00	; 0
    bf38:	90 e0       	ldi	r25, 0x00	; 0
    bf3a:	f9 01       	movw	r30, r18
    bf3c:	19 95       	eicall
    bf3e:	c0 54       	subi	r28, 0x40	; 64
    bf40:	df 4f       	sbci	r29, 0xFF	; 255
    bf42:	88 83       	st	Y, r24
    bf44:	c0 5c       	subi	r28, 0xC0	; 192
    bf46:	d0 40       	sbci	r29, 0x00	; 0
    bf48:	cd 54       	subi	r28, 0x4D	; 77
    bf4a:	df 4f       	sbci	r29, 0xFF	; 255
    bf4c:	88 83       	st	Y, r24
    bf4e:	c3 5b       	subi	r28, 0xB3	; 179
    bf50:	d0 40       	sbci	r29, 0x00	; 0
    bf52:	ce 54       	subi	r28, 0x4E	; 78
    bf54:	df 4f       	sbci	r29, 0xFF	; 255
    bf56:	a8 80       	ld	r10, Y
    bf58:	c2 5b       	subi	r28, 0xB2	; 178
    bf5a:	d0 40       	sbci	r29, 0x00	; 0
    bf5c:	16 01       	movw	r2, r12
    bf5e:	f6 ea       	ldi	r31, 0xA6	; 166
    bf60:	2f 1a       	sub	r2, r31
    bf62:	fd ef       	ldi	r31, 0xFD	; 253
    bf64:	3f 0a       	sbc	r3, r31
    bf66:	26 0c       	add	r2, r6
    bf68:	37 1c       	adc	r3, r7
    bf6a:	46 01       	movw	r8, r12
    bf6c:	24 ea       	ldi	r18, 0xA4	; 164
    bf6e:	82 1a       	sub	r8, r18
    bf70:	2d ef       	ldi	r18, 0xFD	; 253
    bf72:	92 0a       	sbc	r9, r18
    bf74:	86 0c       	add	r8, r6
    bf76:	97 1c       	adc	r9, r7
    bf78:	c6 01       	movw	r24, r12
    bf7a:	8b 59       	subi	r24, 0x9B	; 155
    bf7c:	9d 4f       	sbci	r25, 0xFD	; 253
    bf7e:	a3 01       	movw	r20, r6
    bf80:	48 0f       	add	r20, r24
    bf82:	59 1f       	adc	r21, r25
    bf84:	c6 54       	subi	r28, 0x46	; 70
    bf86:	df 4f       	sbci	r29, 0xFF	; 255
    bf88:	59 83       	std	Y+1, r21	; 0x01
    bf8a:	48 83       	st	Y, r20
    bf8c:	ca 5b       	subi	r28, 0xBA	; 186
    bf8e:	d0 40       	sbci	r29, 0x00	; 0
    bf90:	01 97       	sbiw	r24, 0x01	; 1
    bf92:	b3 01       	movw	r22, r6
    bf94:	68 0f       	add	r22, r24
    bf96:	79 1f       	adc	r23, r25
    bf98:	c8 53       	subi	r28, 0x38	; 56
    bf9a:	df 4f       	sbci	r29, 0xFF	; 255
    bf9c:	79 83       	std	Y+1, r23	; 0x01
    bf9e:	68 83       	st	Y, r22
    bfa0:	c8 5c       	subi	r28, 0xC8	; 200
    bfa2:	d0 40       	sbci	r29, 0x00	; 0
    bfa4:	01 97       	sbiw	r24, 0x01	; 1
    bfa6:	f3 01       	movw	r30, r6
    bfa8:	e8 0f       	add	r30, r24
    bfaa:	f9 1f       	adc	r31, r25
    bfac:	c5 53       	subi	r28, 0x35	; 53
    bfae:	df 4f       	sbci	r29, 0xFF	; 255
    bfb0:	f9 83       	std	Y+1, r31	; 0x01
    bfb2:	e8 83       	st	Y, r30
    bfb4:	cb 5c       	subi	r28, 0xCB	; 203
    bfb6:	d0 40       	sbci	r29, 0x00	; 0
    bfb8:	03 96       	adiw	r24, 0x03	; 3
    bfba:	93 01       	movw	r18, r6
    bfbc:	28 0f       	add	r18, r24
    bfbe:	39 1f       	adc	r19, r25
    bfc0:	c3 53       	subi	r28, 0x33	; 51
    bfc2:	df 4f       	sbci	r29, 0xFF	; 255
    bfc4:	39 83       	std	Y+1, r19	; 0x01
    bfc6:	28 83       	st	Y, r18
    bfc8:	cd 5c       	subi	r28, 0xCD	; 205
    bfca:	d0 40       	sbci	r29, 0x00	; 0
    bfcc:	06 97       	sbiw	r24, 0x06	; 6
    bfce:	a3 01       	movw	r20, r6
    bfd0:	48 0f       	add	r20, r24
    bfd2:	59 1f       	adc	r21, r25
    bfd4:	c1 53       	subi	r28, 0x31	; 49
    bfd6:	df 4f       	sbci	r29, 0xFF	; 255
    bfd8:	59 83       	std	Y+1, r21	; 0x01
    bfda:	48 83       	st	Y, r20
    bfdc:	cf 5c       	subi	r28, 0xCF	; 207
    bfde:	d0 40       	sbci	r29, 0x00	; 0
    bfe0:	02 97       	sbiw	r24, 0x02	; 2
    bfe2:	b3 01       	movw	r22, r6
    bfe4:	68 0f       	add	r22, r24
    bfe6:	79 1f       	adc	r23, r25
    bfe8:	cf 52       	subi	r28, 0x2F	; 47
    bfea:	df 4f       	sbci	r29, 0xFF	; 255
    bfec:	79 83       	std	Y+1, r23	; 0x01
    bfee:	68 83       	st	Y, r22
    bff0:	c1 5d       	subi	r28, 0xD1	; 209
    bff2:	d0 40       	sbci	r29, 0x00	; 0
    bff4:	41 2c       	mov	r4, r1
    bff6:	b1 2c       	mov	r11, r1
    bff8:	c0 54       	subi	r28, 0x40	; 64
    bffa:	df 4f       	sbci	r29, 0xFF	; 255
    bffc:	78 81       	ld	r23, Y
    bffe:	c0 5c       	subi	r28, 0xC0	; 192
    c000:	d0 40       	sbci	r29, 0x00	; 0
    c002:	a7 16       	cp	r10, r23
    c004:	08 f0       	brcs	.+2      	; 0xc008 <draw_menu(bool)+0x10a2>
    c006:	d7 c0       	rjmp	.+430    	; 0xc1b6 <draw_menu(bool)+0x1250>
    c008:	f1 01       	movw	r30, r2
    c00a:	25 91       	lpm	r18, Z+
    c00c:	34 91       	lpm	r19, Z
    c00e:	f4 01       	movw	r30, r8
    c010:	85 91       	lpm	r24, Z+
    c012:	94 91       	lpm	r25, Z
    c014:	c6 54       	subi	r28, 0x46	; 70
    c016:	df 4f       	sbci	r29, 0xFF	; 255
    c018:	e8 81       	ld	r30, Y
    c01a:	f9 81       	ldd	r31, Y+1	; 0x01
    c01c:	ca 5b       	subi	r28, 0xBA	; 186
    c01e:	d0 40       	sbci	r29, 0x00	; 0
    c020:	44 91       	lpm	r20, Z
    c022:	44 23       	and	r20, r20
    c024:	09 f4       	brne	.+2      	; 0xc028 <draw_menu(bool)+0x10c2>
    c026:	cb c0       	rjmp	.+406    	; 0xc1be <draw_menu(bool)+0x1258>
    c028:	c8 54       	subi	r28, 0x48	; 72
    c02a:	df 4f       	sbci	r29, 0xFF	; 255
    c02c:	48 81       	ld	r20, Y
    c02e:	59 81       	ldd	r21, Y+1	; 0x01
    c030:	c8 5b       	subi	r28, 0xB8	; 184
    c032:	d0 40       	sbci	r29, 0x00	; 0
    c034:	48 0f       	add	r20, r24
    c036:	59 1f       	adc	r21, r25
    c038:	c2 54       	subi	r28, 0x42	; 66
    c03a:	df 4f       	sbci	r29, 0xFF	; 255
    c03c:	59 83       	std	Y+1, r21	; 0x01
    c03e:	48 83       	st	Y, r20
    c040:	ce 5b       	subi	r28, 0xBE	; 190
    c042:	d0 40       	sbci	r29, 0x00	; 0
    c044:	c6 54       	subi	r28, 0x46	; 70
    c046:	df 4f       	sbci	r29, 0xFF	; 255
    c048:	e8 81       	ld	r30, Y
    c04a:	f9 81       	ldd	r31, Y+1	; 0x01
    c04c:	ca 5b       	subi	r28, 0xBA	; 186
    c04e:	d0 40       	sbci	r29, 0x00	; 0
    c050:	84 91       	lpm	r24, Z
    c052:	81 30       	cpi	r24, 0x01	; 1
    c054:	09 f4       	brne	.+2      	; 0xc058 <draw_menu(bool)+0x10f2>
    c056:	d2 c0       	rjmp	.+420    	; 0xc1fc <draw_menu(bool)+0x1296>
    c058:	ca 54       	subi	r28, 0x4A	; 74
    c05a:	df 4f       	sbci	r29, 0xFF	; 255
    c05c:	48 81       	ld	r20, Y
    c05e:	59 81       	ldd	r21, Y+1	; 0x01
    c060:	c6 5b       	subi	r28, 0xB6	; 182
    c062:	d0 40       	sbci	r29, 0x00	; 0
    c064:	42 0f       	add	r20, r18
    c066:	53 1f       	adc	r21, r19
    c068:	c4 54       	subi	r28, 0x44	; 68
    c06a:	df 4f       	sbci	r29, 0xFF	; 255
    c06c:	59 83       	std	Y+1, r21	; 0x01
    c06e:	48 83       	st	Y, r20
    c070:	cc 5b       	subi	r28, 0xBC	; 188
    c072:	d0 40       	sbci	r29, 0x00	; 0
    c074:	c6 54       	subi	r28, 0x46	; 70
    c076:	df 4f       	sbci	r29, 0xFF	; 255
    c078:	e8 81       	ld	r30, Y
    c07a:	f9 81       	ldd	r31, Y+1	; 0x01
    c07c:	ca 5b       	subi	r28, 0xBA	; 186
    c07e:	d0 40       	sbci	r29, 0x00	; 0
    c080:	84 91       	lpm	r24, Z
    c082:	82 30       	cpi	r24, 0x02	; 2
    c084:	09 f0       	breq	.+2      	; 0xc088 <draw_menu(bool)+0x1122>
    c086:	46 c0       	rjmp	.+140    	; 0xc114 <draw_menu(bool)+0x11ae>
    c088:	f1 01       	movw	r30, r2
    c08a:	85 91       	lpm	r24, Z+
    c08c:	94 91       	lpm	r25, Z
    c08e:	c5 53       	subi	r28, 0x35	; 53
    c090:	df 4f       	sbci	r29, 0xFF	; 255
    c092:	e8 81       	ld	r30, Y
    c094:	f9 81       	ldd	r31, Y+1	; 0x01
    c096:	cb 5c       	subi	r28, 0xCB	; 203
    c098:	d0 40       	sbci	r29, 0x00	; 0
    c09a:	24 91       	lpm	r18, Z
    c09c:	ca 54       	subi	r28, 0x4A	; 74
    c09e:	df 4f       	sbci	r29, 0xFF	; 255
    c0a0:	48 81       	ld	r20, Y
    c0a2:	59 81       	ldd	r21, Y+1	; 0x01
    c0a4:	c6 5b       	subi	r28, 0xB6	; 182
    c0a6:	d0 40       	sbci	r29, 0x00	; 0
    c0a8:	84 0f       	add	r24, r20
    c0aa:	95 1f       	adc	r25, r21
    c0ac:	bc 01       	movw	r22, r24
    c0ae:	2b 9d       	mul	r18, r11
    c0b0:	60 0d       	add	r22, r0
    c0b2:	71 1d       	adc	r23, r1
    c0b4:	11 24       	eor	r1, r1
    c0b6:	c4 54       	subi	r28, 0x44	; 68
    c0b8:	df 4f       	sbci	r29, 0xFF	; 255
    c0ba:	79 83       	std	Y+1, r23	; 0x01
    c0bc:	68 83       	st	Y, r22
    c0be:	cc 5b       	subi	r28, 0xBC	; 188
    c0c0:	d0 40       	sbci	r29, 0x00	; 0
    c0c2:	f4 01       	movw	r30, r8
    c0c4:	85 91       	lpm	r24, Z+
    c0c6:	94 91       	lpm	r25, Z
    c0c8:	c8 53       	subi	r28, 0x38	; 56
    c0ca:	df 4f       	sbci	r29, 0xFF	; 255
    c0cc:	e8 81       	ld	r30, Y
    c0ce:	f9 81       	ldd	r31, Y+1	; 0x01
    c0d0:	c8 5c       	subi	r28, 0xC8	; 200
    c0d2:	d0 40       	sbci	r29, 0x00	; 0
    c0d4:	24 91       	lpm	r18, Z
    c0d6:	c8 54       	subi	r28, 0x48	; 72
    c0d8:	df 4f       	sbci	r29, 0xFF	; 255
    c0da:	48 81       	ld	r20, Y
    c0dc:	59 81       	ldd	r21, Y+1	; 0x01
    c0de:	c8 5b       	subi	r28, 0xB8	; 184
    c0e0:	d0 40       	sbci	r29, 0x00	; 0
    c0e2:	84 0f       	add	r24, r20
    c0e4:	95 1f       	adc	r25, r21
    c0e6:	bc 01       	movw	r22, r24
    c0e8:	24 9d       	mul	r18, r4
    c0ea:	60 0d       	add	r22, r0
    c0ec:	71 1d       	adc	r23, r1
    c0ee:	11 24       	eor	r1, r1
    c0f0:	c2 54       	subi	r28, 0x42	; 66
    c0f2:	df 4f       	sbci	r29, 0xFF	; 255
    c0f4:	79 83       	std	Y+1, r23	; 0x01
    c0f6:	68 83       	st	Y, r22
    c0f8:	ce 5b       	subi	r28, 0xBE	; 190
    c0fa:	d0 40       	sbci	r29, 0x00	; 0
    c0fc:	b3 94       	inc	r11
    c0fe:	c3 53       	subi	r28, 0x33	; 51
    c100:	df 4f       	sbci	r29, 0xFF	; 255
    c102:	e8 81       	ld	r30, Y
    c104:	f9 81       	ldd	r31, Y+1	; 0x01
    c106:	cd 5c       	subi	r28, 0xCD	; 205
    c108:	d0 40       	sbci	r29, 0x00	; 0
    c10a:	84 91       	lpm	r24, Z
    c10c:	b8 16       	cp	r11, r24
    c10e:	10 f0       	brcs	.+4      	; 0xc114 <draw_menu(bool)+0x11ae>
    c110:	43 94       	inc	r4
    c112:	b1 2c       	mov	r11, r1
    c114:	c1 53       	subi	r28, 0x31	; 49
    c116:	df 4f       	sbci	r29, 0xFF	; 255
    c118:	e8 81       	ld	r30, Y
    c11a:	f9 81       	ldd	r31, Y+1	; 0x01
    c11c:	cf 5c       	subi	r28, 0xCF	; 207
    c11e:	d0 40       	sbci	r29, 0x00	; 0
    c120:	25 91       	lpm	r18, Z+
    c122:	34 91       	lpm	r19, Z
    c124:	cf 52       	subi	r28, 0x2F	; 47
    c126:	df 4f       	sbci	r29, 0xFF	; 255
    c128:	e8 81       	ld	r30, Y
    c12a:	f9 81       	ldd	r31, Y+1	; 0x01
    c12c:	c1 5d       	subi	r28, 0xD1	; 209
    c12e:	d0 40       	sbci	r29, 0x00	; 0
    c130:	45 91       	lpm	r20, Z+
    c132:	54 91       	lpm	r21, Z
    c134:	cc 53       	subi	r28, 0x3C	; 60
    c136:	df 4f       	sbci	r29, 0xFF	; 255
    c138:	e8 80       	ld	r14, Y
    c13a:	f9 80       	ldd	r15, Y+1	; 0x01
    c13c:	c4 5c       	subi	r28, 0xC4	; 196
    c13e:	d0 40       	sbci	r29, 0x00	; 0
    c140:	ce 53       	subi	r28, 0x3E	; 62
    c142:	df 4f       	sbci	r29, 0xFF	; 255
    c144:	08 81       	ld	r16, Y
    c146:	19 81       	ldd	r17, Y+1	; 0x01
    c148:	c2 5c       	subi	r28, 0xC2	; 194
    c14a:	d0 40       	sbci	r29, 0x00	; 0
    c14c:	c2 54       	subi	r28, 0x42	; 66
    c14e:	df 4f       	sbci	r29, 0xFF	; 255
    c150:	68 81       	ld	r22, Y
    c152:	79 81       	ldd	r23, Y+1	; 0x01
    c154:	ce 5b       	subi	r28, 0xBE	; 190
    c156:	d0 40       	sbci	r29, 0x00	; 0
    c158:	c4 54       	subi	r28, 0x44	; 68
    c15a:	df 4f       	sbci	r29, 0xFF	; 255
    c15c:	88 81       	ld	r24, Y
    c15e:	99 81       	ldd	r25, Y+1	; 0x01
    c160:	cc 5b       	subi	r28, 0xBC	; 188
    c162:	d0 40       	sbci	r29, 0x00	; 0
    c164:	0e 94 98 57 	call	0xaf30	; 0xaf30 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    c168:	18 2f       	mov	r17, r24
    c16a:	81 e0       	ldi	r24, 0x01	; 1
    c16c:	8a 0d       	add	r24, r10
    c16e:	11 23       	and	r17, r17
    c170:	21 f1       	breq	.+72     	; 0xc1ba <draw_menu(bool)+0x1254>
    c172:	ce 54       	subi	r28, 0x4E	; 78
    c174:	df 4f       	sbci	r29, 0xFF	; 255
    c176:	a8 82       	st	Y, r10
    c178:	c2 5b       	subi	r28, 0xB2	; 178
    c17a:	d0 40       	sbci	r29, 0x00	; 0
    c17c:	f6 01       	movw	r30, r12
    c17e:	e4 59       	subi	r30, 0x94	; 148
    c180:	fd 4f       	sbci	r31, 0xFD	; 253
    c182:	e6 0d       	add	r30, r6
    c184:	f7 1d       	adc	r31, r7
    c186:	25 91       	lpm	r18, Z+
    c188:	34 91       	lpm	r19, Z
    c18a:	ca 53       	subi	r28, 0x3A	; 58
    c18c:	df 4f       	sbci	r29, 0xFF	; 255
    c18e:	e8 81       	ld	r30, Y
    c190:	f9 81       	ldd	r31, Y+1	; 0x01
    c192:	c6 5c       	subi	r28, 0xC6	; 198
    c194:	d0 40       	sbci	r29, 0x00	; 0
    c196:	84 91       	lpm	r24, Z
    c198:	cf 54       	subi	r28, 0x4F	; 79
    c19a:	df 4f       	sbci	r29, 0xFF	; 255
    c19c:	68 81       	ld	r22, Y
    c19e:	c1 5b       	subi	r28, 0xB1	; 177
    c1a0:	d0 40       	sbci	r29, 0x00	; 0
    c1a2:	70 e0       	ldi	r23, 0x00	; 0
    c1a4:	4a 2d       	mov	r20, r10
    c1a6:	90 e0       	ldi	r25, 0x00	; 0
    c1a8:	f9 01       	movw	r30, r18
    c1aa:	19 95       	eicall
    c1ac:	c6 53       	subi	r28, 0x36	; 54
    c1ae:	df 4f       	sbci	r29, 0xFF	; 255
    c1b0:	18 83       	st	Y, r17
    c1b2:	ca 5c       	subi	r28, 0xCA	; 202
    c1b4:	d0 40       	sbci	r29, 0x00	; 0
    c1b6:	53 94       	inc	r5
    c1b8:	d6 cc       	rjmp	.-1620   	; 0xbb66 <draw_menu(bool)+0xc00>
    c1ba:	a8 2e       	mov	r10, r24
    c1bc:	1d cf       	rjmp	.-454    	; 0xbff8 <draw_menu(bool)+0x1092>
    c1be:	f4 01       	movw	r30, r8
    c1c0:	85 91       	lpm	r24, Z+
    c1c2:	94 91       	lpm	r25, Z
    c1c4:	c8 53       	subi	r28, 0x38	; 56
    c1c6:	df 4f       	sbci	r29, 0xFF	; 255
    c1c8:	e8 81       	ld	r30, Y
    c1ca:	f9 81       	ldd	r31, Y+1	; 0x01
    c1cc:	c8 5c       	subi	r28, 0xC8	; 200
    c1ce:	d0 40       	sbci	r29, 0x00	; 0
    c1d0:	44 91       	lpm	r20, Z
    c1d2:	c8 54       	subi	r28, 0x48	; 72
    c1d4:	df 4f       	sbci	r29, 0xFF	; 255
    c1d6:	68 81       	ld	r22, Y
    c1d8:	79 81       	ldd	r23, Y+1	; 0x01
    c1da:	c8 5b       	subi	r28, 0xB8	; 184
    c1dc:	d0 40       	sbci	r29, 0x00	; 0
    c1de:	86 0f       	add	r24, r22
    c1e0:	97 1f       	adc	r25, r23
    c1e2:	fc 01       	movw	r30, r24
    c1e4:	4b 9d       	mul	r20, r11
    c1e6:	e0 0d       	add	r30, r0
    c1e8:	f1 1d       	adc	r31, r1
    c1ea:	11 24       	eor	r1, r1
    c1ec:	c2 54       	subi	r28, 0x42	; 66
    c1ee:	df 4f       	sbci	r29, 0xFF	; 255
    c1f0:	f9 83       	std	Y+1, r31	; 0x01
    c1f2:	e8 83       	st	Y, r30
    c1f4:	ce 5b       	subi	r28, 0xBE	; 190
    c1f6:	d0 40       	sbci	r29, 0x00	; 0
    c1f8:	b3 94       	inc	r11
    c1fa:	24 cf       	rjmp	.-440    	; 0xc044 <draw_menu(bool)+0x10de>
    c1fc:	f1 01       	movw	r30, r2
    c1fe:	85 91       	lpm	r24, Z+
    c200:	94 91       	lpm	r25, Z
    c202:	c5 53       	subi	r28, 0x35	; 53
    c204:	df 4f       	sbci	r29, 0xFF	; 255
    c206:	e8 81       	ld	r30, Y
    c208:	f9 81       	ldd	r31, Y+1	; 0x01
    c20a:	cb 5c       	subi	r28, 0xCB	; 203
    c20c:	d0 40       	sbci	r29, 0x00	; 0
    c20e:	24 91       	lpm	r18, Z
    c210:	ca 54       	subi	r28, 0x4A	; 74
    c212:	df 4f       	sbci	r29, 0xFF	; 255
    c214:	48 81       	ld	r20, Y
    c216:	59 81       	ldd	r21, Y+1	; 0x01
    c218:	c6 5b       	subi	r28, 0xB6	; 182
    c21a:	d0 40       	sbci	r29, 0x00	; 0
    c21c:	84 0f       	add	r24, r20
    c21e:	95 1f       	adc	r25, r21
    c220:	bc 01       	movw	r22, r24
    c222:	2b 9d       	mul	r18, r11
    c224:	60 0d       	add	r22, r0
    c226:	71 1d       	adc	r23, r1
    c228:	11 24       	eor	r1, r1
    c22a:	c4 54       	subi	r28, 0x44	; 68
    c22c:	df 4f       	sbci	r29, 0xFF	; 255
    c22e:	79 83       	std	Y+1, r23	; 0x01
    c230:	68 83       	st	Y, r22
    c232:	cc 5b       	subi	r28, 0xBC	; 188
    c234:	d0 40       	sbci	r29, 0x00	; 0
    c236:	b3 94       	inc	r11
    c238:	1d cf       	rjmp	.-454    	; 0xc074 <draw_menu(bool)+0x110e>
    c23a:	c6 53       	subi	r28, 0x36	; 54
    c23c:	df 4f       	sbci	r29, 0xFF	; 255
    c23e:	f8 81       	ld	r31, Y
    c240:	ca 5c       	subi	r28, 0xCA	; 202
    c242:	d0 40       	sbci	r29, 0x00	; 0
    c244:	f1 11       	cpse	r31, r1
    c246:	0c 94 bb 68 	jmp	0xd176	; 0xd176 <draw_menu(bool)+0x2210>
    c24a:	91 2c       	mov	r9, r1
    c24c:	93 01       	movw	r18, r6
    c24e:	2f 53       	subi	r18, 0x3F	; 63
    c250:	3d 4f       	sbci	r19, 0xFD	; 253
    c252:	cc 52       	subi	r28, 0x2C	; 44
    c254:	df 4f       	sbci	r29, 0xFF	; 255
    c256:	39 83       	std	Y+1, r19	; 0x01
    c258:	28 83       	st	Y, r18
    c25a:	c4 5d       	subi	r28, 0xD4	; 212
    c25c:	d0 40       	sbci	r29, 0x00	; 0
    c25e:	cc 52       	subi	r28, 0x2C	; 44
    c260:	df 4f       	sbci	r29, 0xFF	; 255
    c262:	e8 81       	ld	r30, Y
    c264:	f9 81       	ldd	r31, Y+1	; 0x01
    c266:	c4 5d       	subi	r28, 0xD4	; 212
    c268:	d0 40       	sbci	r29, 0x00	; 0
    c26a:	84 91       	lpm	r24, Z
    c26c:	98 16       	cp	r9, r24
    c26e:	08 f0       	brcs	.+2      	; 0xc272 <draw_menu(bool)+0x130c>
    c270:	1a c3       	rjmp	.+1588   	; 0xc8a6 <draw_menu(bool)+0x1940>
    c272:	f7 e1       	ldi	r31, 0x17	; 23
    c274:	9f 9e       	mul	r9, r31
    c276:	20 01       	movw	r4, r0
    c278:	11 24       	eor	r1, r1
    c27a:	f2 01       	movw	r30, r4
    c27c:	ee 53       	subi	r30, 0x3E	; 62
    c27e:	fe 4f       	sbci	r31, 0xFE	; 254
    c280:	e6 0d       	add	r30, r6
    c282:	f7 1d       	adc	r31, r7
    c284:	84 91       	lpm	r24, Z
    c286:	cd 52       	subi	r28, 0x2D	; 45
    c288:	df 4f       	sbci	r29, 0xFF	; 255
    c28a:	68 81       	ld	r22, Y
    c28c:	c3 5d       	subi	r28, 0xD3	; 211
    c28e:	d0 40       	sbci	r29, 0x00	; 0
    c290:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <enable_redraw(unsigned char, unsigned char)>
    c294:	88 23       	and	r24, r24
    c296:	09 f4       	brne	.+2      	; 0xc29a <draw_menu(bool)+0x1334>
    c298:	83 c1       	rjmp	.+774    	; 0xc5a0 <draw_menu(bool)+0x163a>
    c29a:	ce 54       	subi	r28, 0x4E	; 78
    c29c:	df 4f       	sbci	r29, 0xFF	; 255
    c29e:	18 82       	st	Y, r1
    c2a0:	c2 5b       	subi	r28, 0xB2	; 178
    c2a2:	d0 40       	sbci	r29, 0x00	; 0
    c2a4:	f2 01       	movw	r30, r4
    c2a6:	e0 54       	subi	r30, 0x40	; 64
    c2a8:	fe 4f       	sbci	r31, 0xFE	; 254
    c2aa:	e6 0d       	add	r30, r6
    c2ac:	f7 1d       	adc	r31, r7
    c2ae:	25 91       	lpm	r18, Z+
    c2b0:	34 91       	lpm	r19, Z
    c2b2:	c2 01       	movw	r24, r4
    c2b4:	85 54       	subi	r24, 0x45	; 69
    c2b6:	9e 4f       	sbci	r25, 0xFE	; 254
    c2b8:	a3 01       	movw	r20, r6
    c2ba:	48 0f       	add	r20, r24
    c2bc:	59 1f       	adc	r21, r25
    c2be:	c6 54       	subi	r28, 0x46	; 70
    c2c0:	df 4f       	sbci	r29, 0xFF	; 255
    c2c2:	59 83       	std	Y+1, r21	; 0x01
    c2c4:	48 83       	st	Y, r20
    c2c6:	ca 5b       	subi	r28, 0xBA	; 186
    c2c8:	d0 40       	sbci	r29, 0x00	; 0
    c2ca:	fa 01       	movw	r30, r20
    c2cc:	84 91       	lpm	r24, Z
    c2ce:	cf 54       	subi	r28, 0x4F	; 79
    c2d0:	df 4f       	sbci	r29, 0xFF	; 255
    c2d2:	68 81       	ld	r22, Y
    c2d4:	c1 5b       	subi	r28, 0xB1	; 177
    c2d6:	d0 40       	sbci	r29, 0x00	; 0
    c2d8:	70 e0       	ldi	r23, 0x00	; 0
    c2da:	40 e0       	ldi	r20, 0x00	; 0
    c2dc:	90 e0       	ldi	r25, 0x00	; 0
    c2de:	f9 01       	movw	r30, r18
    c2e0:	19 95       	eicall
    c2e2:	cd 54       	subi	r28, 0x4D	; 77
    c2e4:	df 4f       	sbci	r29, 0xFF	; 255
    c2e6:	88 83       	st	Y, r24
    c2e8:	c3 5b       	subi	r28, 0xB3	; 179
    c2ea:	d0 40       	sbci	r29, 0x00	; 0
    c2ec:	f2 01       	movw	r30, r4
    c2ee:	e4 54       	subi	r30, 0x44	; 68
    c2f0:	fe 4f       	sbci	r31, 0xFE	; 254
    c2f2:	e6 0d       	add	r30, r6
    c2f4:	f7 1d       	adc	r31, r7
    c2f6:	25 91       	lpm	r18, Z+
    c2f8:	34 91       	lpm	r19, Z
    c2fa:	ca 52       	subi	r28, 0x2A	; 42
    c2fc:	df 4f       	sbci	r29, 0xFF	; 255
    c2fe:	39 83       	std	Y+1, r19	; 0x01
    c300:	28 83       	st	Y, r18
    c302:	c6 5d       	subi	r28, 0xD6	; 214
    c304:	d0 40       	sbci	r29, 0x00	; 0
    c306:	f2 01       	movw	r30, r4
    c308:	e6 54       	subi	r30, 0x46	; 70
    c30a:	fe 4f       	sbci	r31, 0xFE	; 254
    c30c:	e6 0d       	add	r30, r6
    c30e:	f7 1d       	adc	r31, r7
    c310:	44 91       	lpm	r20, Z
    c312:	4f 3f       	cpi	r20, 0xFF	; 255
    c314:	b9 f0       	breq	.+46     	; 0xc344 <draw_menu(bool)+0x13de>
    c316:	f2 01       	movw	r30, r4
    c318:	e8 54       	subi	r30, 0x48	; 72
    c31a:	fe 4f       	sbci	r31, 0xFE	; 254
    c31c:	e6 0d       	add	r30, r6
    c31e:	f7 1d       	adc	r31, r7
    c320:	24 91       	lpm	r18, Z
    c322:	f2 01       	movw	r30, r4
    c324:	e7 54       	subi	r30, 0x47	; 71
    c326:	fe 4f       	sbci	r31, 0xFE	; 254
    c328:	e6 0d       	add	r30, r6
    c32a:	f7 1d       	adc	r31, r7
    c32c:	e4 91       	lpm	r30, Z
    c32e:	2e 9f       	mul	r18, r30
    c330:	20 2d       	mov	r18, r0
    c332:	11 24       	eor	r1, r1
    c334:	be 01       	movw	r22, r28
    c336:	6d 54       	subi	r22, 0x4D	; 77
    c338:	7f 4f       	sbci	r23, 0xFF	; 255
    c33a:	ce 01       	movw	r24, r28
    c33c:	8e 54       	subi	r24, 0x4E	; 78
    c33e:	9f 4f       	sbci	r25, 0xFF	; 255
    c340:	0e 94 e0 53 	call	0xa7c0	; 0xa7c0 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    c344:	12 01       	movw	r2, r4
    c346:	34 e5       	ldi	r19, 0x54	; 84
    c348:	23 1a       	sub	r2, r19
    c34a:	3e ef       	ldi	r19, 0xFE	; 254
    c34c:	33 0a       	sbc	r3, r19
    c34e:	26 0c       	add	r2, r6
    c350:	37 1c       	adc	r3, r7
    c352:	c2 01       	movw	r24, r4
    c354:	82 55       	subi	r24, 0x52	; 82
    c356:	9e 4f       	sbci	r25, 0xFE	; 254
    c358:	a3 01       	movw	r20, r6
    c35a:	48 0f       	add	r20, r24
    c35c:	59 1f       	adc	r21, r25
    c35e:	c0 54       	subi	r28, 0x40	; 64
    c360:	df 4f       	sbci	r29, 0xFF	; 255
    c362:	59 83       	std	Y+1, r21	; 0x01
    c364:	48 83       	st	Y, r20
    c366:	c0 5c       	subi	r28, 0xC0	; 192
    c368:	d0 40       	sbci	r29, 0x00	; 0
    c36a:	09 96       	adiw	r24, 0x09	; 9
    c36c:	b3 01       	movw	r22, r6
    c36e:	68 0f       	add	r22, r24
    c370:	79 1f       	adc	r23, r25
    c372:	ca 53       	subi	r28, 0x3A	; 58
    c374:	df 4f       	sbci	r29, 0xFF	; 255
    c376:	79 83       	std	Y+1, r23	; 0x01
    c378:	68 83       	st	Y, r22
    c37a:	c6 5c       	subi	r28, 0xC6	; 198
    c37c:	d0 40       	sbci	r29, 0x00	; 0
    c37e:	01 97       	sbiw	r24, 0x01	; 1
    c380:	f3 01       	movw	r30, r6
    c382:	e8 0f       	add	r30, r24
    c384:	f9 1f       	adc	r31, r25
    c386:	c5 53       	subi	r28, 0x35	; 53
    c388:	df 4f       	sbci	r29, 0xFF	; 255
    c38a:	f9 83       	std	Y+1, r31	; 0x01
    c38c:	e8 83       	st	Y, r30
    c38e:	cb 5c       	subi	r28, 0xCB	; 203
    c390:	d0 40       	sbci	r29, 0x00	; 0
    c392:	01 97       	sbiw	r24, 0x01	; 1
    c394:	93 01       	movw	r18, r6
    c396:	28 0f       	add	r18, r24
    c398:	39 1f       	adc	r19, r25
    c39a:	c3 53       	subi	r28, 0x33	; 51
    c39c:	df 4f       	sbci	r29, 0xFF	; 255
    c39e:	39 83       	std	Y+1, r19	; 0x01
    c3a0:	28 83       	st	Y, r18
    c3a2:	cd 5c       	subi	r28, 0xCD	; 205
    c3a4:	d0 40       	sbci	r29, 0x00	; 0
    c3a6:	01 97       	sbiw	r24, 0x01	; 1
    c3a8:	a3 01       	movw	r20, r6
    c3aa:	48 0f       	add	r20, r24
    c3ac:	59 1f       	adc	r21, r25
    c3ae:	c8 53       	subi	r28, 0x38	; 56
    c3b0:	df 4f       	sbci	r29, 0xFF	; 255
    c3b2:	59 83       	std	Y+1, r21	; 0x01
    c3b4:	48 83       	st	Y, r20
    c3b6:	c8 5c       	subi	r28, 0xC8	; 200
    c3b8:	d0 40       	sbci	r29, 0x00	; 0
    c3ba:	02 97       	sbiw	r24, 0x02	; 2
    c3bc:	b3 01       	movw	r22, r6
    c3be:	68 0f       	add	r22, r24
    c3c0:	79 1f       	adc	r23, r25
    c3c2:	c1 53       	subi	r28, 0x31	; 49
    c3c4:	df 4f       	sbci	r29, 0xFF	; 255
    c3c6:	79 83       	std	Y+1, r23	; 0x01
    c3c8:	68 83       	st	Y, r22
    c3ca:	cf 5c       	subi	r28, 0xCF	; 207
    c3cc:	d0 40       	sbci	r29, 0x00	; 0
    c3ce:	02 97       	sbiw	r24, 0x02	; 2
    c3d0:	f3 01       	movw	r30, r6
    c3d2:	e8 0f       	add	r30, r24
    c3d4:	f9 1f       	adc	r31, r25
    c3d6:	cf 52       	subi	r28, 0x2F	; 47
    c3d8:	df 4f       	sbci	r29, 0xFF	; 255
    c3da:	f9 83       	std	Y+1, r31	; 0x01
    c3dc:	e8 83       	st	Y, r30
    c3de:	c1 5d       	subi	r28, 0xD1	; 209
    c3e0:	d0 40       	sbci	r29, 0x00	; 0
    c3e2:	f1 2c       	mov	r15, r1
    c3e4:	ce 54       	subi	r28, 0x4E	; 78
    c3e6:	df 4f       	sbci	r29, 0xFF	; 255
    c3e8:	88 81       	ld	r24, Y
    c3ea:	c2 5b       	subi	r28, 0xB2	; 178
    c3ec:	d0 40       	sbci	r29, 0x00	; 0
    c3ee:	cd 54       	subi	r28, 0x4D	; 77
    c3f0:	df 4f       	sbci	r29, 0xFF	; 255
    c3f2:	98 81       	ld	r25, Y
    c3f4:	c3 5b       	subi	r28, 0xB3	; 179
    c3f6:	d0 40       	sbci	r29, 0x00	; 0
    c3f8:	89 17       	cp	r24, r25
    c3fa:	08 f0       	brcs	.+2      	; 0xc3fe <draw_menu(bool)+0x1498>
    c3fc:	d1 c0       	rjmp	.+418    	; 0xc5a0 <draw_menu(bool)+0x163a>
    c3fe:	f1 01       	movw	r30, r2
    c400:	45 91       	lpm	r20, Z+
    c402:	54 91       	lpm	r21, Z
    c404:	c0 54       	subi	r28, 0x40	; 64
    c406:	df 4f       	sbci	r29, 0xFF	; 255
    c408:	e8 81       	ld	r30, Y
    c40a:	f9 81       	ldd	r31, Y+1	; 0x01
    c40c:	c0 5c       	subi	r28, 0xC0	; 192
    c40e:	d0 40       	sbci	r29, 0x00	; 0
    c410:	25 91       	lpm	r18, Z+
    c412:	34 91       	lpm	r19, Z
    c414:	ca 53       	subi	r28, 0x3A	; 58
    c416:	df 4f       	sbci	r29, 0xFF	; 255
    c418:	e8 81       	ld	r30, Y
    c41a:	f9 81       	ldd	r31, Y+1	; 0x01
    c41c:	c6 5c       	subi	r28, 0xC6	; 198
    c41e:	d0 40       	sbci	r29, 0x00	; 0
    c420:	94 91       	lpm	r25, Z
    c422:	99 23       	and	r25, r25
    c424:	09 f4       	brne	.+2      	; 0xc428 <draw_menu(bool)+0x14c2>
    c426:	7b c0       	rjmp	.+246    	; 0xc51e <draw_menu(bool)+0x15b8>
    c428:	c8 54       	subi	r28, 0x48	; 72
    c42a:	df 4f       	sbci	r29, 0xFF	; 255
    c42c:	68 81       	ld	r22, Y
    c42e:	79 81       	ldd	r23, Y+1	; 0x01
    c430:	c8 5b       	subi	r28, 0xB8	; 184
    c432:	d0 40       	sbci	r29, 0x00	; 0
    c434:	62 0f       	add	r22, r18
    c436:	73 1f       	adc	r23, r19
    c438:	c2 54       	subi	r28, 0x42	; 66
    c43a:	df 4f       	sbci	r29, 0xFF	; 255
    c43c:	79 83       	std	Y+1, r23	; 0x01
    c43e:	68 83       	st	Y, r22
    c440:	ce 5b       	subi	r28, 0xBE	; 190
    c442:	d0 40       	sbci	r29, 0x00	; 0
    c444:	ca 53       	subi	r28, 0x3A	; 58
    c446:	df 4f       	sbci	r29, 0xFF	; 255
    c448:	e8 81       	ld	r30, Y
    c44a:	f9 81       	ldd	r31, Y+1	; 0x01
    c44c:	c6 5c       	subi	r28, 0xC6	; 198
    c44e:	d0 40       	sbci	r29, 0x00	; 0
    c450:	94 91       	lpm	r25, Z
    c452:	91 30       	cpi	r25, 0x01	; 1
    c454:	09 f4       	brne	.+2      	; 0xc458 <draw_menu(bool)+0x14f2>
    c456:	86 c0       	rjmp	.+268    	; 0xc564 <draw_menu(bool)+0x15fe>
    c458:	ca 54       	subi	r28, 0x4A	; 74
    c45a:	df 4f       	sbci	r29, 0xFF	; 255
    c45c:	28 81       	ld	r18, Y
    c45e:	39 81       	ldd	r19, Y+1	; 0x01
    c460:	c6 5b       	subi	r28, 0xB6	; 182
    c462:	d0 40       	sbci	r29, 0x00	; 0
    c464:	24 0f       	add	r18, r20
    c466:	35 1f       	adc	r19, r21
    c468:	c4 54       	subi	r28, 0x44	; 68
    c46a:	df 4f       	sbci	r29, 0xFF	; 255
    c46c:	39 83       	std	Y+1, r19	; 0x01
    c46e:	28 83       	st	Y, r18
    c470:	cc 5b       	subi	r28, 0xBC	; 188
    c472:	d0 40       	sbci	r29, 0x00	; 0
    c474:	c6 54       	subi	r28, 0x46	; 70
    c476:	df 4f       	sbci	r29, 0xFF	; 255
    c478:	e8 81       	ld	r30, Y
    c47a:	f9 81       	ldd	r31, Y+1	; 0x01
    c47c:	ca 5b       	subi	r28, 0xBA	; 186
    c47e:	d0 40       	sbci	r29, 0x00	; 0
    c480:	44 91       	lpm	r20, Z
    c482:	8e 01       	movw	r16, r28
    c484:	0f 57       	subi	r16, 0x7F	; 127
    c486:	1f 4f       	sbci	r17, 0xFF	; 255
    c488:	9e 01       	movw	r18, r28
    c48a:	2f 5f       	subi	r18, 0xFF	; 255
    c48c:	3f 4f       	sbci	r19, 0xFF	; 255
    c48e:	cf 54       	subi	r28, 0x4F	; 79
    c490:	df 4f       	sbci	r29, 0xFF	; 255
    c492:	68 81       	ld	r22, Y
    c494:	c1 5b       	subi	r28, 0xB1	; 177
    c496:	d0 40       	sbci	r29, 0x00	; 0
    c498:	ca 52       	subi	r28, 0x2A	; 42
    c49a:	df 4f       	sbci	r29, 0xFF	; 255
    c49c:	e8 81       	ld	r30, Y
    c49e:	f9 81       	ldd	r31, Y+1	; 0x01
    c4a0:	c6 5d       	subi	r28, 0xD6	; 214
    c4a2:	d0 40       	sbci	r29, 0x00	; 0
    c4a4:	19 95       	eicall
    c4a6:	c8 53       	subi	r28, 0x38	; 56
    c4a8:	df 4f       	sbci	r29, 0xFF	; 255
    c4aa:	e8 81       	ld	r30, Y
    c4ac:	f9 81       	ldd	r31, Y+1	; 0x01
    c4ae:	c8 5c       	subi	r28, 0xC8	; 200
    c4b0:	d0 40       	sbci	r29, 0x00	; 0
    c4b2:	e4 90       	lpm	r14, Z
    c4b4:	04 91       	lpm	r16, Z
    c4b6:	c1 53       	subi	r28, 0x31	; 49
    c4b8:	df 4f       	sbci	r29, 0xFF	; 255
    c4ba:	e8 81       	ld	r30, Y
    c4bc:	f9 81       	ldd	r31, Y+1	; 0x01
    c4be:	cf 5c       	subi	r28, 0xCF	; 207
    c4c0:	d0 40       	sbci	r29, 0x00	; 0
    c4c2:	25 91       	lpm	r18, Z+
    c4c4:	34 91       	lpm	r19, Z
    c4c6:	cf 52       	subi	r28, 0x2F	; 47
    c4c8:	df 4f       	sbci	r29, 0xFF	; 255
    c4ca:	e8 81       	ld	r30, Y
    c4cc:	f9 81       	ldd	r31, Y+1	; 0x01
    c4ce:	c1 5d       	subi	r28, 0xD1	; 209
    c4d0:	d0 40       	sbci	r29, 0x00	; 0
    c4d2:	45 91       	lpm	r20, Z+
    c4d4:	54 91       	lpm	r21, Z
    c4d6:	88 24       	eor	r8, r8
    c4d8:	83 94       	inc	r8
    c4da:	be 01       	movw	r22, r28
    c4dc:	6f 57       	subi	r22, 0x7F	; 127
    c4de:	7f 4f       	sbci	r23, 0xFF	; 255
    c4e0:	5b 01       	movw	r10, r22
    c4e2:	ce 01       	movw	r24, r28
    c4e4:	01 96       	adiw	r24, 0x01	; 1
    c4e6:	6c 01       	movw	r12, r24
    c4e8:	c2 54       	subi	r28, 0x42	; 66
    c4ea:	df 4f       	sbci	r29, 0xFF	; 255
    c4ec:	68 81       	ld	r22, Y
    c4ee:	79 81       	ldd	r23, Y+1	; 0x01
    c4f0:	ce 5b       	subi	r28, 0xBE	; 190
    c4f2:	d0 40       	sbci	r29, 0x00	; 0
    c4f4:	c4 54       	subi	r28, 0x44	; 68
    c4f6:	df 4f       	sbci	r29, 0xFF	; 255
    c4f8:	88 81       	ld	r24, Y
    c4fa:	99 81       	ldd	r25, Y+1	; 0x01
    c4fc:	cc 5b       	subi	r28, 0xBC	; 188
    c4fe:	d0 40       	sbci	r29, 0x00	; 0
    c500:	0e 94 1a 54 	call	0xa834	; 0xa834 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
    c504:	f3 94       	inc	r15
    c506:	ce 54       	subi	r28, 0x4E	; 78
    c508:	df 4f       	sbci	r29, 0xFF	; 255
    c50a:	88 81       	ld	r24, Y
    c50c:	c2 5b       	subi	r28, 0xB2	; 178
    c50e:	d0 40       	sbci	r29, 0x00	; 0
    c510:	8f 5f       	subi	r24, 0xFF	; 255
    c512:	ce 54       	subi	r28, 0x4E	; 78
    c514:	df 4f       	sbci	r29, 0xFF	; 255
    c516:	88 83       	st	Y, r24
    c518:	c2 5b       	subi	r28, 0xB2	; 178
    c51a:	d0 40       	sbci	r29, 0x00	; 0
    c51c:	63 cf       	rjmp	.-314    	; 0xc3e4 <draw_menu(bool)+0x147e>
    c51e:	c0 54       	subi	r28, 0x40	; 64
    c520:	df 4f       	sbci	r29, 0xFF	; 255
    c522:	e8 81       	ld	r30, Y
    c524:	f9 81       	ldd	r31, Y+1	; 0x01
    c526:	c0 5c       	subi	r28, 0xC0	; 192
    c528:	d0 40       	sbci	r29, 0x00	; 0
    c52a:	25 91       	lpm	r18, Z+
    c52c:	34 91       	lpm	r19, Z
    c52e:	c5 53       	subi	r28, 0x35	; 53
    c530:	df 4f       	sbci	r29, 0xFF	; 255
    c532:	e8 81       	ld	r30, Y
    c534:	f9 81       	ldd	r31, Y+1	; 0x01
    c536:	cb 5c       	subi	r28, 0xCB	; 203
    c538:	d0 40       	sbci	r29, 0x00	; 0
    c53a:	94 91       	lpm	r25, Z
    c53c:	c8 54       	subi	r28, 0x48	; 72
    c53e:	df 4f       	sbci	r29, 0xFF	; 255
    c540:	68 81       	ld	r22, Y
    c542:	79 81       	ldd	r23, Y+1	; 0x01
    c544:	c8 5b       	subi	r28, 0xB8	; 184
    c546:	d0 40       	sbci	r29, 0x00	; 0
    c548:	26 0f       	add	r18, r22
    c54a:	37 1f       	adc	r19, r23
    c54c:	f9 01       	movw	r30, r18
    c54e:	9f 9d       	mul	r25, r15
    c550:	e0 0d       	add	r30, r0
    c552:	f1 1d       	adc	r31, r1
    c554:	11 24       	eor	r1, r1
    c556:	c2 54       	subi	r28, 0x42	; 66
    c558:	df 4f       	sbci	r29, 0xFF	; 255
    c55a:	f9 83       	std	Y+1, r31	; 0x01
    c55c:	e8 83       	st	Y, r30
    c55e:	ce 5b       	subi	r28, 0xBE	; 190
    c560:	d0 40       	sbci	r29, 0x00	; 0
    c562:	70 cf       	rjmp	.-288    	; 0xc444 <draw_menu(bool)+0x14de>
    c564:	f1 01       	movw	r30, r2
    c566:	25 91       	lpm	r18, Z+
    c568:	34 91       	lpm	r19, Z
    c56a:	c3 53       	subi	r28, 0x33	; 51
    c56c:	df 4f       	sbci	r29, 0xFF	; 255
    c56e:	e8 81       	ld	r30, Y
    c570:	f9 81       	ldd	r31, Y+1	; 0x01
    c572:	cd 5c       	subi	r28, 0xCD	; 205
    c574:	d0 40       	sbci	r29, 0x00	; 0
    c576:	94 91       	lpm	r25, Z
    c578:	ca 54       	subi	r28, 0x4A	; 74
    c57a:	df 4f       	sbci	r29, 0xFF	; 255
    c57c:	48 81       	ld	r20, Y
    c57e:	59 81       	ldd	r21, Y+1	; 0x01
    c580:	c6 5b       	subi	r28, 0xB6	; 182
    c582:	d0 40       	sbci	r29, 0x00	; 0
    c584:	24 0f       	add	r18, r20
    c586:	35 1f       	adc	r19, r21
    c588:	b9 01       	movw	r22, r18
    c58a:	9f 9d       	mul	r25, r15
    c58c:	60 0d       	add	r22, r0
    c58e:	71 1d       	adc	r23, r1
    c590:	11 24       	eor	r1, r1
    c592:	c4 54       	subi	r28, 0x44	; 68
    c594:	df 4f       	sbci	r29, 0xFF	; 255
    c596:	79 83       	std	Y+1, r23	; 0x01
    c598:	68 83       	st	Y, r22
    c59a:	cc 5b       	subi	r28, 0xBC	; 188
    c59c:	d0 40       	sbci	r29, 0x00	; 0
    c59e:	6a cf       	rjmp	.-300    	; 0xc474 <draw_menu(bool)+0x150e>
    c5a0:	ce 53       	subi	r28, 0x3E	; 62
    c5a2:	df 4f       	sbci	r29, 0xFF	; 255
    c5a4:	e8 81       	ld	r30, Y
    c5a6:	f9 81       	ldd	r31, Y+1	; 0x01
    c5a8:	c2 5c       	subi	r28, 0xC2	; 194
    c5aa:	d0 40       	sbci	r29, 0x00	; 0
    c5ac:	ef 2b       	or	r30, r31
    c5ae:	09 f4       	brne	.+2      	; 0xc5b2 <draw_menu(bool)+0x164c>
    c5b0:	57 c1       	rjmp	.+686    	; 0xc860 <draw_menu(bool)+0x18fa>
    c5b2:	cc 53       	subi	r28, 0x3C	; 60
    c5b4:	df 4f       	sbci	r29, 0xFF	; 255
    c5b6:	28 81       	ld	r18, Y
    c5b8:	39 81       	ldd	r19, Y+1	; 0x01
    c5ba:	c4 5c       	subi	r28, 0xC4	; 196
    c5bc:	d0 40       	sbci	r29, 0x00	; 0
    c5be:	23 2b       	or	r18, r19
    c5c0:	09 f4       	brne	.+2      	; 0xc5c4 <draw_menu(bool)+0x165e>
    c5c2:	4e c1       	rjmp	.+668    	; 0xc860 <draw_menu(bool)+0x18fa>
    c5c4:	ce 54       	subi	r28, 0x4E	; 78
    c5c6:	df 4f       	sbci	r29, 0xFF	; 255
    c5c8:	18 82       	st	Y, r1
    c5ca:	c2 5b       	subi	r28, 0xB2	; 178
    c5cc:	d0 40       	sbci	r29, 0x00	; 0
    c5ce:	f2 01       	movw	r30, r4
    c5d0:	e0 54       	subi	r30, 0x40	; 64
    c5d2:	fe 4f       	sbci	r31, 0xFE	; 254
    c5d4:	e6 0d       	add	r30, r6
    c5d6:	f7 1d       	adc	r31, r7
    c5d8:	25 91       	lpm	r18, Z+
    c5da:	34 91       	lpm	r19, Z
    c5dc:	c2 01       	movw	r24, r4
    c5de:	85 54       	subi	r24, 0x45	; 69
    c5e0:	9e 4f       	sbci	r25, 0xFE	; 254
    c5e2:	a3 01       	movw	r20, r6
    c5e4:	48 0f       	add	r20, r24
    c5e6:	59 1f       	adc	r21, r25
    c5e8:	c6 54       	subi	r28, 0x46	; 70
    c5ea:	df 4f       	sbci	r29, 0xFF	; 255
    c5ec:	59 83       	std	Y+1, r21	; 0x01
    c5ee:	48 83       	st	Y, r20
    c5f0:	ca 5b       	subi	r28, 0xBA	; 186
    c5f2:	d0 40       	sbci	r29, 0x00	; 0
    c5f4:	fa 01       	movw	r30, r20
    c5f6:	84 91       	lpm	r24, Z
    c5f8:	cf 54       	subi	r28, 0x4F	; 79
    c5fa:	df 4f       	sbci	r29, 0xFF	; 255
    c5fc:	68 81       	ld	r22, Y
    c5fe:	c1 5b       	subi	r28, 0xB1	; 177
    c600:	d0 40       	sbci	r29, 0x00	; 0
    c602:	70 e0       	ldi	r23, 0x00	; 0
    c604:	40 e0       	ldi	r20, 0x00	; 0
    c606:	90 e0       	ldi	r25, 0x00	; 0
    c608:	f9 01       	movw	r30, r18
    c60a:	19 95       	eicall
    c60c:	cd 54       	subi	r28, 0x4D	; 77
    c60e:	df 4f       	sbci	r29, 0xFF	; 255
    c610:	88 83       	st	Y, r24
    c612:	c3 5b       	subi	r28, 0xB3	; 179
    c614:	d0 40       	sbci	r29, 0x00	; 0
    c616:	f2 01       	movw	r30, r4
    c618:	e6 54       	subi	r30, 0x46	; 70
    c61a:	fe 4f       	sbci	r31, 0xFE	; 254
    c61c:	e6 0d       	add	r30, r6
    c61e:	f7 1d       	adc	r31, r7
    c620:	44 91       	lpm	r20, Z
    c622:	4f 3f       	cpi	r20, 0xFF	; 255
    c624:	b9 f0       	breq	.+46     	; 0xc654 <draw_menu(bool)+0x16ee>
    c626:	f2 01       	movw	r30, r4
    c628:	e8 54       	subi	r30, 0x48	; 72
    c62a:	fe 4f       	sbci	r31, 0xFE	; 254
    c62c:	e6 0d       	add	r30, r6
    c62e:	f7 1d       	adc	r31, r7
    c630:	24 91       	lpm	r18, Z
    c632:	f2 01       	movw	r30, r4
    c634:	e7 54       	subi	r30, 0x47	; 71
    c636:	fe 4f       	sbci	r31, 0xFE	; 254
    c638:	e6 0d       	add	r30, r6
    c63a:	f7 1d       	adc	r31, r7
    c63c:	e4 91       	lpm	r30, Z
    c63e:	2e 9f       	mul	r18, r30
    c640:	20 2d       	mov	r18, r0
    c642:	11 24       	eor	r1, r1
    c644:	be 01       	movw	r22, r28
    c646:	6d 54       	subi	r22, 0x4D	; 77
    c648:	7f 4f       	sbci	r23, 0xFF	; 255
    c64a:	ce 01       	movw	r24, r28
    c64c:	8e 54       	subi	r24, 0x4E	; 78
    c64e:	9f 4f       	sbci	r25, 0xFF	; 255
    c650:	0e 94 e0 53 	call	0xa7c0	; 0xa7c0 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    c654:	ce 54       	subi	r28, 0x4E	; 78
    c656:	df 4f       	sbci	r29, 0xFF	; 255
    c658:	f8 81       	ld	r31, Y
    c65a:	c2 5b       	subi	r28, 0xB2	; 178
    c65c:	d0 40       	sbci	r29, 0x00	; 0
    c65e:	cf 52       	subi	r28, 0x2F	; 47
    c660:	df 4f       	sbci	r29, 0xFF	; 255
    c662:	f8 83       	st	Y, r31
    c664:	c1 5d       	subi	r28, 0xD1	; 209
    c666:	d0 40       	sbci	r29, 0x00	; 0
    c668:	cd 54       	subi	r28, 0x4D	; 77
    c66a:	df 4f       	sbci	r29, 0xFF	; 255
    c66c:	28 81       	ld	r18, Y
    c66e:	c3 5b       	subi	r28, 0xB3	; 179
    c670:	d0 40       	sbci	r29, 0x00	; 0
    c672:	ca 53       	subi	r28, 0x3A	; 58
    c674:	df 4f       	sbci	r29, 0xFF	; 255
    c676:	28 83       	st	Y, r18
    c678:	c6 5c       	subi	r28, 0xC6	; 198
    c67a:	d0 40       	sbci	r29, 0x00	; 0
    c67c:	62 01       	movw	r12, r4
    c67e:	34 e5       	ldi	r19, 0x54	; 84
    c680:	c3 1a       	sub	r12, r19
    c682:	3e ef       	ldi	r19, 0xFE	; 254
    c684:	d3 0a       	sbc	r13, r19
    c686:	c6 0c       	add	r12, r6
    c688:	d7 1c       	adc	r13, r7
    c68a:	12 01       	movw	r2, r4
    c68c:	42 e5       	ldi	r20, 0x52	; 82
    c68e:	24 1a       	sub	r2, r20
    c690:	4e ef       	ldi	r20, 0xFE	; 254
    c692:	34 0a       	sbc	r3, r20
    c694:	26 0c       	add	r2, r6
    c696:	37 1c       	adc	r3, r7
    c698:	c2 01       	movw	r24, r4
    c69a:	89 54       	subi	r24, 0x49	; 73
    c69c:	9e 4f       	sbci	r25, 0xFE	; 254
    c69e:	b3 01       	movw	r22, r6
    c6a0:	68 0f       	add	r22, r24
    c6a2:	79 1f       	adc	r23, r25
    c6a4:	c0 54       	subi	r28, 0x40	; 64
    c6a6:	df 4f       	sbci	r29, 0xFF	; 255
    c6a8:	79 83       	std	Y+1, r23	; 0x01
    c6aa:	68 83       	st	Y, r22
    c6ac:	c0 5c       	subi	r28, 0xC0	; 192
    c6ae:	d0 40       	sbci	r29, 0x00	; 0
    c6b0:	01 97       	sbiw	r24, 0x01	; 1
    c6b2:	f3 01       	movw	r30, r6
    c6b4:	e8 0f       	add	r30, r24
    c6b6:	f9 1f       	adc	r31, r25
    c6b8:	c8 53       	subi	r28, 0x38	; 56
    c6ba:	df 4f       	sbci	r29, 0xFF	; 255
    c6bc:	f9 83       	std	Y+1, r31	; 0x01
    c6be:	e8 83       	st	Y, r30
    c6c0:	c8 5c       	subi	r28, 0xC8	; 200
    c6c2:	d0 40       	sbci	r29, 0x00	; 0
    c6c4:	01 97       	sbiw	r24, 0x01	; 1
    c6c6:	93 01       	movw	r18, r6
    c6c8:	28 0f       	add	r18, r24
    c6ca:	39 1f       	adc	r19, r25
    c6cc:	c5 53       	subi	r28, 0x35	; 53
    c6ce:	df 4f       	sbci	r29, 0xFF	; 255
    c6d0:	39 83       	std	Y+1, r19	; 0x01
    c6d2:	28 83       	st	Y, r18
    c6d4:	cb 5c       	subi	r28, 0xCB	; 203
    c6d6:	d0 40       	sbci	r29, 0x00	; 0
    c6d8:	03 97       	sbiw	r24, 0x03	; 3
    c6da:	a3 01       	movw	r20, r6
    c6dc:	48 0f       	add	r20, r24
    c6de:	59 1f       	adc	r21, r25
    c6e0:	c3 53       	subi	r28, 0x33	; 51
    c6e2:	df 4f       	sbci	r29, 0xFF	; 255
    c6e4:	59 83       	std	Y+1, r21	; 0x01
    c6e6:	48 83       	st	Y, r20
    c6e8:	cd 5c       	subi	r28, 0xCD	; 205
    c6ea:	d0 40       	sbci	r29, 0x00	; 0
    c6ec:	02 97       	sbiw	r24, 0x02	; 2
    c6ee:	b3 01       	movw	r22, r6
    c6f0:	68 0f       	add	r22, r24
    c6f2:	79 1f       	adc	r23, r25
    c6f4:	c1 53       	subi	r28, 0x31	; 49
    c6f6:	df 4f       	sbci	r29, 0xFF	; 255
    c6f8:	79 83       	std	Y+1, r23	; 0x01
    c6fa:	68 83       	st	Y, r22
    c6fc:	cf 5c       	subi	r28, 0xCF	; 207
    c6fe:	d0 40       	sbci	r29, 0x00	; 0
    c700:	b1 2c       	mov	r11, r1
    c702:	a1 2c       	mov	r10, r1
    c704:	cf 52       	subi	r28, 0x2F	; 47
    c706:	df 4f       	sbci	r29, 0xFF	; 255
    c708:	88 80       	ld	r8, Y
    c70a:	c1 5d       	subi	r28, 0xD1	; 209
    c70c:	d0 40       	sbci	r29, 0x00	; 0
    c70e:	8a 0c       	add	r8, r10
    c710:	ca 53       	subi	r28, 0x3A	; 58
    c712:	df 4f       	sbci	r29, 0xFF	; 255
    c714:	78 81       	ld	r23, Y
    c716:	c6 5c       	subi	r28, 0xC6	; 198
    c718:	d0 40       	sbci	r29, 0x00	; 0
    c71a:	87 16       	cp	r8, r23
    c71c:	08 f0       	brcs	.+2      	; 0xc720 <draw_menu(bool)+0x17ba>
    c71e:	a0 c0       	rjmp	.+320    	; 0xc860 <draw_menu(bool)+0x18fa>
    c720:	f6 01       	movw	r30, r12
    c722:	25 91       	lpm	r18, Z+
    c724:	34 91       	lpm	r19, Z
    c726:	f1 01       	movw	r30, r2
    c728:	85 91       	lpm	r24, Z+
    c72a:	94 91       	lpm	r25, Z
    c72c:	c0 54       	subi	r28, 0x40	; 64
    c72e:	df 4f       	sbci	r29, 0xFF	; 255
    c730:	e8 81       	ld	r30, Y
    c732:	f9 81       	ldd	r31, Y+1	; 0x01
    c734:	c0 5c       	subi	r28, 0xC0	; 192
    c736:	d0 40       	sbci	r29, 0x00	; 0
    c738:	44 91       	lpm	r20, Z
    c73a:	44 23       	and	r20, r20
    c73c:	09 f4       	brne	.+2      	; 0xc740 <draw_menu(bool)+0x17da>
    c73e:	92 c0       	rjmp	.+292    	; 0xc864 <draw_menu(bool)+0x18fe>
    c740:	c8 54       	subi	r28, 0x48	; 72
    c742:	df 4f       	sbci	r29, 0xFF	; 255
    c744:	48 81       	ld	r20, Y
    c746:	59 81       	ldd	r21, Y+1	; 0x01
    c748:	c8 5b       	subi	r28, 0xB8	; 184
    c74a:	d0 40       	sbci	r29, 0x00	; 0
    c74c:	48 0f       	add	r20, r24
    c74e:	59 1f       	adc	r21, r25
    c750:	c2 54       	subi	r28, 0x42	; 66
    c752:	df 4f       	sbci	r29, 0xFF	; 255
    c754:	59 83       	std	Y+1, r21	; 0x01
    c756:	48 83       	st	Y, r20
    c758:	ce 5b       	subi	r28, 0xBE	; 190
    c75a:	d0 40       	sbci	r29, 0x00	; 0
    c75c:	c0 54       	subi	r28, 0x40	; 64
    c75e:	df 4f       	sbci	r29, 0xFF	; 255
    c760:	e8 81       	ld	r30, Y
    c762:	f9 81       	ldd	r31, Y+1	; 0x01
    c764:	c0 5c       	subi	r28, 0xC0	; 192
    c766:	d0 40       	sbci	r29, 0x00	; 0
    c768:	84 91       	lpm	r24, Z
    c76a:	ca 54       	subi	r28, 0x4A	; 74
    c76c:	df 4f       	sbci	r29, 0xFF	; 255
    c76e:	48 81       	ld	r20, Y
    c770:	59 81       	ldd	r21, Y+1	; 0x01
    c772:	c6 5b       	subi	r28, 0xB6	; 182
    c774:	d0 40       	sbci	r29, 0x00	; 0
    c776:	81 30       	cpi	r24, 0x01	; 1
    c778:	c1 f4       	brne	.+48     	; 0xc7aa <draw_menu(bool)+0x1844>
    c77a:	f6 01       	movw	r30, r12
    c77c:	85 91       	lpm	r24, Z+
    c77e:	94 91       	lpm	r25, Z
    c780:	c5 53       	subi	r28, 0x35	; 53
    c782:	df 4f       	sbci	r29, 0xFF	; 255
    c784:	e8 81       	ld	r30, Y
    c786:	f9 81       	ldd	r31, Y+1	; 0x01
    c788:	cb 5c       	subi	r28, 0xCB	; 203
    c78a:	d0 40       	sbci	r29, 0x00	; 0
    c78c:	44 91       	lpm	r20, Z
    c78e:	ca 54       	subi	r28, 0x4A	; 74
    c790:	df 4f       	sbci	r29, 0xFF	; 255
    c792:	28 81       	ld	r18, Y
    c794:	39 81       	ldd	r19, Y+1	; 0x01
    c796:	c6 5b       	subi	r28, 0xB6	; 182
    c798:	d0 40       	sbci	r29, 0x00	; 0
    c79a:	82 0f       	add	r24, r18
    c79c:	93 1f       	adc	r25, r19
    c79e:	4a 9d       	mul	r20, r10
    c7a0:	90 01       	movw	r18, r0
    c7a2:	4b 9d       	mul	r20, r11
    c7a4:	30 0d       	add	r19, r0
    c7a6:	11 24       	eor	r1, r1
    c7a8:	ac 01       	movw	r20, r24
    c7aa:	42 0f       	add	r20, r18
    c7ac:	53 1f       	adc	r21, r19
    c7ae:	c4 54       	subi	r28, 0x44	; 68
    c7b0:	df 4f       	sbci	r29, 0xFF	; 255
    c7b2:	59 83       	std	Y+1, r21	; 0x01
    c7b4:	48 83       	st	Y, r20
    c7b6:	cc 5b       	subi	r28, 0xBC	; 188
    c7b8:	d0 40       	sbci	r29, 0x00	; 0
    c7ba:	c3 53       	subi	r28, 0x33	; 51
    c7bc:	df 4f       	sbci	r29, 0xFF	; 255
    c7be:	e8 81       	ld	r30, Y
    c7c0:	f9 81       	ldd	r31, Y+1	; 0x01
    c7c2:	cd 5c       	subi	r28, 0xCD	; 205
    c7c4:	d0 40       	sbci	r29, 0x00	; 0
    c7c6:	25 91       	lpm	r18, Z+
    c7c8:	34 91       	lpm	r19, Z
    c7ca:	c1 53       	subi	r28, 0x31	; 49
    c7cc:	df 4f       	sbci	r29, 0xFF	; 255
    c7ce:	e8 81       	ld	r30, Y
    c7d0:	f9 81       	ldd	r31, Y+1	; 0x01
    c7d2:	cf 5c       	subi	r28, 0xCF	; 207
    c7d4:	d0 40       	sbci	r29, 0x00	; 0
    c7d6:	45 91       	lpm	r20, Z+
    c7d8:	54 91       	lpm	r21, Z
    c7da:	cc 53       	subi	r28, 0x3C	; 60
    c7dc:	df 4f       	sbci	r29, 0xFF	; 255
    c7de:	e8 80       	ld	r14, Y
    c7e0:	f9 80       	ldd	r15, Y+1	; 0x01
    c7e2:	c4 5c       	subi	r28, 0xC4	; 196
    c7e4:	d0 40       	sbci	r29, 0x00	; 0
    c7e6:	ce 53       	subi	r28, 0x3E	; 62
    c7e8:	df 4f       	sbci	r29, 0xFF	; 255
    c7ea:	08 81       	ld	r16, Y
    c7ec:	19 81       	ldd	r17, Y+1	; 0x01
    c7ee:	c2 5c       	subi	r28, 0xC2	; 194
    c7f0:	d0 40       	sbci	r29, 0x00	; 0
    c7f2:	c2 54       	subi	r28, 0x42	; 66
    c7f4:	df 4f       	sbci	r29, 0xFF	; 255
    c7f6:	68 81       	ld	r22, Y
    c7f8:	79 81       	ldd	r23, Y+1	; 0x01
    c7fa:	ce 5b       	subi	r28, 0xBE	; 190
    c7fc:	d0 40       	sbci	r29, 0x00	; 0
    c7fe:	c4 54       	subi	r28, 0x44	; 68
    c800:	df 4f       	sbci	r29, 0xFF	; 255
    c802:	88 81       	ld	r24, Y
    c804:	99 81       	ldd	r25, Y+1	; 0x01
    c806:	cc 5b       	subi	r28, 0xBC	; 188
    c808:	d0 40       	sbci	r29, 0x00	; 0
    c80a:	0e 94 98 57 	call	0xaf30	; 0xaf30 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    c80e:	18 2f       	mov	r17, r24
    c810:	5f ef       	ldi	r21, 0xFF	; 255
    c812:	a5 1a       	sub	r10, r21
    c814:	b5 0a       	sbc	r11, r21
    c816:	88 23       	and	r24, r24
    c818:	09 f4       	brne	.+2      	; 0xc81c <draw_menu(bool)+0x18b6>
    c81a:	74 cf       	rjmp	.-280    	; 0xc704 <draw_menu(bool)+0x179e>
    c81c:	ce 54       	subi	r28, 0x4E	; 78
    c81e:	df 4f       	sbci	r29, 0xFF	; 255
    c820:	88 82       	st	Y, r8
    c822:	c2 5b       	subi	r28, 0xB2	; 178
    c824:	d0 40       	sbci	r29, 0x00	; 0
    c826:	f2 01       	movw	r30, r4
    c828:	e2 54       	subi	r30, 0x42	; 66
    c82a:	fe 4f       	sbci	r31, 0xFE	; 254
    c82c:	e6 0d       	add	r30, r6
    c82e:	f7 1d       	adc	r31, r7
    c830:	25 91       	lpm	r18, Z+
    c832:	34 91       	lpm	r19, Z
    c834:	c6 54       	subi	r28, 0x46	; 70
    c836:	df 4f       	sbci	r29, 0xFF	; 255
    c838:	e8 81       	ld	r30, Y
    c83a:	f9 81       	ldd	r31, Y+1	; 0x01
    c83c:	ca 5b       	subi	r28, 0xBA	; 186
    c83e:	d0 40       	sbci	r29, 0x00	; 0
    c840:	84 91       	lpm	r24, Z
    c842:	cf 54       	subi	r28, 0x4F	; 79
    c844:	df 4f       	sbci	r29, 0xFF	; 255
    c846:	68 81       	ld	r22, Y
    c848:	c1 5b       	subi	r28, 0xB1	; 177
    c84a:	d0 40       	sbci	r29, 0x00	; 0
    c84c:	70 e0       	ldi	r23, 0x00	; 0
    c84e:	48 2d       	mov	r20, r8
    c850:	90 e0       	ldi	r25, 0x00	; 0
    c852:	f9 01       	movw	r30, r18
    c854:	19 95       	eicall
    c856:	c6 53       	subi	r28, 0x36	; 54
    c858:	df 4f       	sbci	r29, 0xFF	; 255
    c85a:	18 83       	st	Y, r17
    c85c:	ca 5c       	subi	r28, 0xCA	; 202
    c85e:	d0 40       	sbci	r29, 0x00	; 0
    c860:	93 94       	inc	r9
    c862:	fd cc       	rjmp	.-1542   	; 0xc25e <draw_menu(bool)+0x12f8>
    c864:	f1 01       	movw	r30, r2
    c866:	85 91       	lpm	r24, Z+
    c868:	94 91       	lpm	r25, Z
    c86a:	c8 53       	subi	r28, 0x38	; 56
    c86c:	df 4f       	sbci	r29, 0xFF	; 255
    c86e:	e8 81       	ld	r30, Y
    c870:	f9 81       	ldd	r31, Y+1	; 0x01
    c872:	c8 5c       	subi	r28, 0xC8	; 200
    c874:	d0 40       	sbci	r29, 0x00	; 0
    c876:	64 91       	lpm	r22, Z
    c878:	c8 54       	subi	r28, 0x48	; 72
    c87a:	df 4f       	sbci	r29, 0xFF	; 255
    c87c:	48 81       	ld	r20, Y
    c87e:	59 81       	ldd	r21, Y+1	; 0x01
    c880:	c8 5b       	subi	r28, 0xB8	; 184
    c882:	d0 40       	sbci	r29, 0x00	; 0
    c884:	84 0f       	add	r24, r20
    c886:	95 1f       	adc	r25, r21
    c888:	6a 9d       	mul	r22, r10
    c88a:	a0 01       	movw	r20, r0
    c88c:	6b 9d       	mul	r22, r11
    c88e:	50 0d       	add	r21, r0
    c890:	11 24       	eor	r1, r1
    c892:	bc 01       	movw	r22, r24
    c894:	64 0f       	add	r22, r20
    c896:	75 1f       	adc	r23, r21
    c898:	c2 54       	subi	r28, 0x42	; 66
    c89a:	df 4f       	sbci	r29, 0xFF	; 255
    c89c:	79 83       	std	Y+1, r23	; 0x01
    c89e:	68 83       	st	Y, r22
    c8a0:	ce 5b       	subi	r28, 0xBE	; 190
    c8a2:	d0 40       	sbci	r29, 0x00	; 0
    c8a4:	5b cf       	rjmp	.-330    	; 0xc75c <draw_menu(bool)+0x17f6>
    c8a6:	c6 53       	subi	r28, 0x36	; 54
    c8a8:	df 4f       	sbci	r29, 0xFF	; 255
    c8aa:	f8 81       	ld	r31, Y
    c8ac:	ca 5c       	subi	r28, 0xCA	; 202
    c8ae:	d0 40       	sbci	r29, 0x00	; 0
    c8b0:	f1 11       	cpse	r31, r1
    c8b2:	61 c4       	rjmp	.+2242   	; 0xd176 <draw_menu(bool)+0x2210>
    c8b4:	21 2c       	mov	r2, r1
    c8b6:	93 01       	movw	r18, r6
    c8b8:	2c 53       	subi	r18, 0x3C	; 60
    c8ba:	3d 4f       	sbci	r19, 0xFD	; 253
    c8bc:	c0 52       	subi	r28, 0x20	; 32
    c8be:	df 4f       	sbci	r29, 0xFF	; 255
    c8c0:	39 83       	std	Y+1, r19	; 0x01
    c8c2:	28 83       	st	Y, r18
    c8c4:	c0 5e       	subi	r28, 0xE0	; 224
    c8c6:	d0 40       	sbci	r29, 0x00	; 0
    c8c8:	ae 01       	movw	r20, r28
    c8ca:	4f 57       	subi	r20, 0x7F	; 127
    c8cc:	5f 4f       	sbci	r21, 0xFF	; 255
    c8ce:	cc 54       	subi	r28, 0x4C	; 76
    c8d0:	df 4f       	sbci	r29, 0xFF	; 255
    c8d2:	59 83       	std	Y+1, r21	; 0x01
    c8d4:	48 83       	st	Y, r20
    c8d6:	c4 5b       	subi	r28, 0xB4	; 180
    c8d8:	d0 40       	sbci	r29, 0x00	; 0
    c8da:	c0 52       	subi	r28, 0x20	; 32
    c8dc:	df 4f       	sbci	r29, 0xFF	; 255
    c8de:	e8 81       	ld	r30, Y
    c8e0:	f9 81       	ldd	r31, Y+1	; 0x01
    c8e2:	c0 5e       	subi	r28, 0xE0	; 224
    c8e4:	d0 40       	sbci	r29, 0x00	; 0
    c8e6:	84 91       	lpm	r24, Z
    c8e8:	28 16       	cp	r2, r24
    c8ea:	08 f0       	brcs	.+2      	; 0xc8ee <draw_menu(bool)+0x1988>
    c8ec:	4a c4       	rjmp	.+2196   	; 0xd182 <draw_menu(bool)+0x221c>
    c8ee:	fe e1       	ldi	r31, 0x1E	; 30
    c8f0:	2f 9e       	mul	r2, r31
    c8f2:	20 01       	movw	r4, r0
    c8f4:	11 24       	eor	r1, r1
    c8f6:	f2 01       	movw	r30, r4
    c8f8:	e4 54       	subi	r30, 0x44	; 68
    c8fa:	fd 4f       	sbci	r31, 0xFD	; 253
    c8fc:	e6 0d       	add	r30, r6
    c8fe:	f7 1d       	adc	r31, r7
    c900:	84 91       	lpm	r24, Z
    c902:	cd 52       	subi	r28, 0x2D	; 45
    c904:	df 4f       	sbci	r29, 0xFF	; 255
    c906:	68 81       	ld	r22, Y
    c908:	c3 5d       	subi	r28, 0xD3	; 211
    c90a:	d0 40       	sbci	r29, 0x00	; 0
    c90c:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <enable_redraw(unsigned char, unsigned char)>
    c910:	88 23       	and	r24, r24
    c912:	09 f4       	brne	.+2      	; 0xc916 <draw_menu(bool)+0x19b0>
    c914:	5e c2       	rjmp	.+1212   	; 0xcdd2 <draw_menu(bool)+0x1e6c>
    c916:	ce 54       	subi	r28, 0x4E	; 78
    c918:	df 4f       	sbci	r29, 0xFF	; 255
    c91a:	18 82       	st	Y, r1
    c91c:	c2 5b       	subi	r28, 0xB2	; 178
    c91e:	d0 40       	sbci	r29, 0x00	; 0
    c920:	f2 01       	movw	r30, r4
    c922:	e8 54       	subi	r30, 0x48	; 72
    c924:	fd 4f       	sbci	r31, 0xFD	; 253
    c926:	e6 0d       	add	r30, r6
    c928:	f7 1d       	adc	r31, r7
    c92a:	25 91       	lpm	r18, Z+
    c92c:	34 91       	lpm	r19, Z
    c92e:	c2 01       	movw	r24, r4
    c930:	8d 54       	subi	r24, 0x4D	; 77
    c932:	9d 4f       	sbci	r25, 0xFD	; 253
    c934:	a3 01       	movw	r20, r6
    c936:	48 0f       	add	r20, r24
    c938:	59 1f       	adc	r21, r25
    c93a:	c6 54       	subi	r28, 0x46	; 70
    c93c:	df 4f       	sbci	r29, 0xFF	; 255
    c93e:	59 83       	std	Y+1, r21	; 0x01
    c940:	48 83       	st	Y, r20
    c942:	ca 5b       	subi	r28, 0xBA	; 186
    c944:	d0 40       	sbci	r29, 0x00	; 0
    c946:	fa 01       	movw	r30, r20
    c948:	84 91       	lpm	r24, Z
    c94a:	cf 54       	subi	r28, 0x4F	; 79
    c94c:	df 4f       	sbci	r29, 0xFF	; 255
    c94e:	68 81       	ld	r22, Y
    c950:	c1 5b       	subi	r28, 0xB1	; 177
    c952:	d0 40       	sbci	r29, 0x00	; 0
    c954:	70 e0       	ldi	r23, 0x00	; 0
    c956:	40 e0       	ldi	r20, 0x00	; 0
    c958:	90 e0       	ldi	r25, 0x00	; 0
    c95a:	f9 01       	movw	r30, r18
    c95c:	19 95       	eicall
    c95e:	cd 54       	subi	r28, 0x4D	; 77
    c960:	df 4f       	sbci	r29, 0xFF	; 255
    c962:	88 83       	st	Y, r24
    c964:	c3 5b       	subi	r28, 0xB3	; 179
    c966:	d0 40       	sbci	r29, 0x00	; 0
    c968:	f2 01       	movw	r30, r4
    c96a:	ec 54       	subi	r30, 0x4C	; 76
    c96c:	fd 4f       	sbci	r31, 0xFD	; 253
    c96e:	e6 0d       	add	r30, r6
    c970:	f7 1d       	adc	r31, r7
    c972:	25 91       	lpm	r18, Z+
    c974:	34 91       	lpm	r19, Z
    c976:	ce 51       	subi	r28, 0x1E	; 30
    c978:	df 4f       	sbci	r29, 0xFF	; 255
    c97a:	39 83       	std	Y+1, r19	; 0x01
    c97c:	28 83       	st	Y, r18
    c97e:	c2 5e       	subi	r28, 0xE2	; 226
    c980:	d0 40       	sbci	r29, 0x00	; 0
    c982:	f2 01       	movw	r30, r4
    c984:	ee 54       	subi	r30, 0x4E	; 78
    c986:	fd 4f       	sbci	r31, 0xFD	; 253
    c988:	e6 0d       	add	r30, r6
    c98a:	f7 1d       	adc	r31, r7
    c98c:	44 91       	lpm	r20, Z
    c98e:	c2 01       	movw	r24, r4
    c990:	80 55       	subi	r24, 0x50	; 80
    c992:	9d 4f       	sbci	r25, 0xFD	; 253
    c994:	b3 01       	movw	r22, r6
    c996:	68 0f       	add	r22, r24
    c998:	79 1f       	adc	r23, r25
    c99a:	c1 53       	subi	r28, 0x31	; 49
    c99c:	df 4f       	sbci	r29, 0xFF	; 255
    c99e:	79 83       	std	Y+1, r23	; 0x01
    c9a0:	68 83       	st	Y, r22
    c9a2:	cf 5c       	subi	r28, 0xCF	; 207
    c9a4:	d0 40       	sbci	r29, 0x00	; 0
    c9a6:	4f 3f       	cpi	r20, 0xFF	; 255
    c9a8:	99 f0       	breq	.+38     	; 0xc9d0 <draw_menu(bool)+0x1a6a>
    c9aa:	fb 01       	movw	r30, r22
    c9ac:	24 91       	lpm	r18, Z
    c9ae:	f2 01       	movw	r30, r4
    c9b0:	ef 54       	subi	r30, 0x4F	; 79
    c9b2:	fd 4f       	sbci	r31, 0xFD	; 253
    c9b4:	e6 0d       	add	r30, r6
    c9b6:	f7 1d       	adc	r31, r7
    c9b8:	e4 91       	lpm	r30, Z
    c9ba:	2e 9f       	mul	r18, r30
    c9bc:	20 2d       	mov	r18, r0
    c9be:	11 24       	eor	r1, r1
    c9c0:	be 01       	movw	r22, r28
    c9c2:	6d 54       	subi	r22, 0x4D	; 77
    c9c4:	7f 4f       	sbci	r23, 0xFF	; 255
    c9c6:	ce 01       	movw	r24, r28
    c9c8:	8e 54       	subi	r24, 0x4E	; 78
    c9ca:	9f 4f       	sbci	r25, 0xFF	; 255
    c9cc:	0e 94 e0 53 	call	0xa7c0	; 0xa7c0 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    c9d0:	c2 01       	movw	r24, r4
    c9d2:	81 55       	subi	r24, 0x51	; 81
    c9d4:	9d 4f       	sbci	r25, 0xFD	; 253
    c9d6:	93 01       	movw	r18, r6
    c9d8:	28 0f       	add	r18, r24
    c9da:	39 1f       	adc	r19, r25
    c9dc:	c0 54       	subi	r28, 0x40	; 64
    c9de:	df 4f       	sbci	r29, 0xFF	; 255
    c9e0:	39 83       	std	Y+1, r19	; 0x01
    c9e2:	28 83       	st	Y, r18
    c9e4:	c0 5c       	subi	r28, 0xC0	; 192
    c9e6:	d0 40       	sbci	r29, 0x00	; 0
    c9e8:	40 97       	sbiw	r24, 0x10	; 16
    c9ea:	a3 01       	movw	r20, r6
    c9ec:	48 0f       	add	r20, r24
    c9ee:	59 1f       	adc	r21, r25
    c9f0:	ca 53       	subi	r28, 0x3A	; 58
    c9f2:	df 4f       	sbci	r29, 0xFF	; 255
    c9f4:	59 83       	std	Y+1, r21	; 0x01
    c9f6:	48 83       	st	Y, r20
    c9f8:	c6 5c       	subi	r28, 0xC6	; 198
    c9fa:	d0 40       	sbci	r29, 0x00	; 0
    c9fc:	02 96       	adiw	r24, 0x02	; 2
    c9fe:	b3 01       	movw	r22, r6
    ca00:	68 0f       	add	r22, r24
    ca02:	79 1f       	adc	r23, r25
    ca04:	c8 53       	subi	r28, 0x38	; 56
    ca06:	df 4f       	sbci	r29, 0xFF	; 255
    ca08:	79 83       	std	Y+1, r23	; 0x01
    ca0a:	68 83       	st	Y, r22
    ca0c:	c8 5c       	subi	r28, 0xC8	; 200
    ca0e:	d0 40       	sbci	r29, 0x00	; 0
    ca10:	0d 96       	adiw	r24, 0x0d	; 13
    ca12:	f3 01       	movw	r30, r6
    ca14:	e8 0f       	add	r30, r24
    ca16:	f9 1f       	adc	r31, r25
    ca18:	c5 53       	subi	r28, 0x35	; 53
    ca1a:	df 4f       	sbci	r29, 0xFF	; 255
    ca1c:	f9 83       	std	Y+1, r31	; 0x01
    ca1e:	e8 83       	st	Y, r30
    ca20:	cb 5c       	subi	r28, 0xCB	; 203
    ca22:	d0 40       	sbci	r29, 0x00	; 0
    ca24:	01 97       	sbiw	r24, 0x01	; 1
    ca26:	93 01       	movw	r18, r6
    ca28:	28 0f       	add	r18, r24
    ca2a:	39 1f       	adc	r19, r25
    ca2c:	c3 53       	subi	r28, 0x33	; 51
    ca2e:	df 4f       	sbci	r29, 0xFF	; 255
    ca30:	39 83       	std	Y+1, r19	; 0x01
    ca32:	28 83       	st	Y, r18
    ca34:	cd 5c       	subi	r28, 0xCD	; 205
    ca36:	d0 40       	sbci	r29, 0x00	; 0
    ca38:	0d 96       	adiw	r24, 0x0d	; 13
    ca3a:	a3 01       	movw	r20, r6
    ca3c:	48 0f       	add	r20, r24
    ca3e:	59 1f       	adc	r21, r25
    ca40:	cf 52       	subi	r28, 0x2F	; 47
    ca42:	df 4f       	sbci	r29, 0xFF	; 255
    ca44:	59 83       	std	Y+1, r21	; 0x01
    ca46:	48 83       	st	Y, r20
    ca48:	c1 5d       	subi	r28, 0xD1	; 209
    ca4a:	d0 40       	sbci	r29, 0x00	; 0
    ca4c:	0f 97       	sbiw	r24, 0x0f	; 15
    ca4e:	b3 01       	movw	r22, r6
    ca50:	68 0f       	add	r22, r24
    ca52:	79 1f       	adc	r23, r25
    ca54:	cc 52       	subi	r28, 0x2C	; 44
    ca56:	df 4f       	sbci	r29, 0xFF	; 255
    ca58:	79 83       	std	Y+1, r23	; 0x01
    ca5a:	68 83       	st	Y, r22
    ca5c:	c4 5d       	subi	r28, 0xD4	; 212
    ca5e:	d0 40       	sbci	r29, 0x00	; 0
    ca60:	02 97       	sbiw	r24, 0x02	; 2
    ca62:	f3 01       	movw	r30, r6
    ca64:	e8 0f       	add	r30, r24
    ca66:	f9 1f       	adc	r31, r25
    ca68:	ca 52       	subi	r28, 0x2A	; 42
    ca6a:	df 4f       	sbci	r29, 0xFF	; 255
    ca6c:	f9 83       	std	Y+1, r31	; 0x01
    ca6e:	e8 83       	st	Y, r30
    ca70:	c6 5d       	subi	r28, 0xD6	; 214
    ca72:	d0 40       	sbci	r29, 0x00	; 0
    ca74:	01 97       	sbiw	r24, 0x01	; 1
    ca76:	93 01       	movw	r18, r6
    ca78:	28 0f       	add	r18, r24
    ca7a:	39 1f       	adc	r19, r25
    ca7c:	c8 52       	subi	r28, 0x28	; 40
    ca7e:	df 4f       	sbci	r29, 0xFF	; 255
    ca80:	39 83       	std	Y+1, r19	; 0x01
    ca82:	28 83       	st	Y, r18
    ca84:	c8 5d       	subi	r28, 0xD8	; 216
    ca86:	d0 40       	sbci	r29, 0x00	; 0
    ca88:	01 97       	sbiw	r24, 0x01	; 1
    ca8a:	a3 01       	movw	r20, r6
    ca8c:	48 0f       	add	r20, r24
    ca8e:	59 1f       	adc	r21, r25
    ca90:	c6 52       	subi	r28, 0x26	; 38
    ca92:	df 4f       	sbci	r29, 0xFF	; 255
    ca94:	59 83       	std	Y+1, r21	; 0x01
    ca96:	48 83       	st	Y, r20
    ca98:	ca 5d       	subi	r28, 0xDA	; 218
    ca9a:	d0 40       	sbci	r29, 0x00	; 0
    ca9c:	02 97       	sbiw	r24, 0x02	; 2
    ca9e:	b3 01       	movw	r22, r6
    caa0:	68 0f       	add	r22, r24
    caa2:	79 1f       	adc	r23, r25
    caa4:	c4 52       	subi	r28, 0x24	; 36
    caa6:	df 4f       	sbci	r29, 0xFF	; 255
    caa8:	79 83       	std	Y+1, r23	; 0x01
    caaa:	68 83       	st	Y, r22
    caac:	cc 5d       	subi	r28, 0xDC	; 220
    caae:	d0 40       	sbci	r29, 0x00	; 0
    cab0:	02 97       	sbiw	r24, 0x02	; 2
    cab2:	f3 01       	movw	r30, r6
    cab4:	e8 0f       	add	r30, r24
    cab6:	f9 1f       	adc	r31, r25
    cab8:	c2 52       	subi	r28, 0x22	; 34
    caba:	df 4f       	sbci	r29, 0xFF	; 255
    cabc:	f9 83       	std	Y+1, r31	; 0x01
    cabe:	e8 83       	st	Y, r30
    cac0:	ce 5d       	subi	r28, 0xDE	; 222
    cac2:	d0 40       	sbci	r29, 0x00	; 0
    cac4:	31 2c       	mov	r3, r1
    cac6:	91 2c       	mov	r9, r1
    cac8:	ce 54       	subi	r28, 0x4E	; 78
    caca:	df 4f       	sbci	r29, 0xFF	; 255
    cacc:	88 81       	ld	r24, Y
    cace:	c2 5b       	subi	r28, 0xB2	; 178
    cad0:	d0 40       	sbci	r29, 0x00	; 0
    cad2:	cd 54       	subi	r28, 0x4D	; 77
    cad4:	df 4f       	sbci	r29, 0xFF	; 255
    cad6:	98 81       	ld	r25, Y
    cad8:	c3 5b       	subi	r28, 0xB3	; 179
    cada:	d0 40       	sbci	r29, 0x00	; 0
    cadc:	89 17       	cp	r24, r25
    cade:	08 f0       	brcs	.+2      	; 0xcae2 <draw_menu(bool)+0x1b7c>
    cae0:	78 c1       	rjmp	.+752    	; 0xcdd2 <draw_menu(bool)+0x1e6c>
    cae2:	c0 54       	subi	r28, 0x40	; 64
    cae4:	df 4f       	sbci	r29, 0xFF	; 255
    cae6:	e8 81       	ld	r30, Y
    cae8:	f9 81       	ldd	r31, Y+1	; 0x01
    caea:	c0 5c       	subi	r28, 0xC0	; 192
    caec:	d0 40       	sbci	r29, 0x00	; 0
    caee:	94 91       	lpm	r25, Z
    caf0:	91 11       	cpse	r25, r1
    caf2:	39 c0       	rjmp	.+114    	; 0xcb66 <draw_menu(bool)+0x1c00>
    caf4:	ca 53       	subi	r28, 0x3A	; 58
    caf6:	df 4f       	sbci	r29, 0xFF	; 255
    caf8:	e8 81       	ld	r30, Y
    cafa:	f9 81       	ldd	r31, Y+1	; 0x01
    cafc:	c6 5c       	subi	r28, 0xC6	; 198
    cafe:	d0 40       	sbci	r29, 0x00	; 0
    cb00:	25 91       	lpm	r18, Z+
    cb02:	34 91       	lpm	r19, Z
    cb04:	ca 54       	subi	r28, 0x4A	; 74
    cb06:	df 4f       	sbci	r29, 0xFF	; 255
    cb08:	48 81       	ld	r20, Y
    cb0a:	59 81       	ldd	r21, Y+1	; 0x01
    cb0c:	c6 5b       	subi	r28, 0xB6	; 182
    cb0e:	d0 40       	sbci	r29, 0x00	; 0
    cb10:	42 0f       	add	r20, r18
    cb12:	53 1f       	adc	r21, r19
    cb14:	c4 54       	subi	r28, 0x44	; 68
    cb16:	df 4f       	sbci	r29, 0xFF	; 255
    cb18:	59 83       	std	Y+1, r21	; 0x01
    cb1a:	48 83       	st	Y, r20
    cb1c:	cc 5b       	subi	r28, 0xBC	; 188
    cb1e:	d0 40       	sbci	r29, 0x00	; 0
    cb20:	c8 53       	subi	r28, 0x38	; 56
    cb22:	df 4f       	sbci	r29, 0xFF	; 255
    cb24:	e8 81       	ld	r30, Y
    cb26:	f9 81       	ldd	r31, Y+1	; 0x01
    cb28:	c8 5c       	subi	r28, 0xC8	; 200
    cb2a:	d0 40       	sbci	r29, 0x00	; 0
    cb2c:	25 91       	lpm	r18, Z+
    cb2e:	34 91       	lpm	r19, Z
    cb30:	c5 53       	subi	r28, 0x35	; 53
    cb32:	df 4f       	sbci	r29, 0xFF	; 255
    cb34:	e8 81       	ld	r30, Y
    cb36:	f9 81       	ldd	r31, Y+1	; 0x01
    cb38:	cb 5c       	subi	r28, 0xCB	; 203
    cb3a:	d0 40       	sbci	r29, 0x00	; 0
    cb3c:	94 91       	lpm	r25, Z
    cb3e:	c8 54       	subi	r28, 0x48	; 72
    cb40:	df 4f       	sbci	r29, 0xFF	; 255
    cb42:	48 81       	ld	r20, Y
    cb44:	59 81       	ldd	r21, Y+1	; 0x01
    cb46:	c8 5b       	subi	r28, 0xB8	; 184
    cb48:	d0 40       	sbci	r29, 0x00	; 0
    cb4a:	24 0f       	add	r18, r20
    cb4c:	35 1f       	adc	r19, r21
    cb4e:	b9 01       	movw	r22, r18
    cb50:	99 9d       	mul	r25, r9
    cb52:	60 0d       	add	r22, r0
    cb54:	71 1d       	adc	r23, r1
    cb56:	11 24       	eor	r1, r1
    cb58:	c2 54       	subi	r28, 0x42	; 66
    cb5a:	df 4f       	sbci	r29, 0xFF	; 255
    cb5c:	79 83       	std	Y+1, r23	; 0x01
    cb5e:	68 83       	st	Y, r22
    cb60:	ce 5b       	subi	r28, 0xBE	; 190
    cb62:	d0 40       	sbci	r29, 0x00	; 0
    cb64:	93 94       	inc	r9
    cb66:	c0 54       	subi	r28, 0x40	; 64
    cb68:	df 4f       	sbci	r29, 0xFF	; 255
    cb6a:	e8 81       	ld	r30, Y
    cb6c:	f9 81       	ldd	r31, Y+1	; 0x01
    cb6e:	c0 5c       	subi	r28, 0xC0	; 192
    cb70:	d0 40       	sbci	r29, 0x00	; 0
    cb72:	94 91       	lpm	r25, Z
    cb74:	91 30       	cpi	r25, 0x01	; 1
    cb76:	09 f0       	breq	.+2      	; 0xcb7a <draw_menu(bool)+0x1c14>
    cb78:	39 c0       	rjmp	.+114    	; 0xcbec <draw_menu(bool)+0x1c86>
    cb7a:	c8 53       	subi	r28, 0x38	; 56
    cb7c:	df 4f       	sbci	r29, 0xFF	; 255
    cb7e:	e8 81       	ld	r30, Y
    cb80:	f9 81       	ldd	r31, Y+1	; 0x01
    cb82:	c8 5c       	subi	r28, 0xC8	; 200
    cb84:	d0 40       	sbci	r29, 0x00	; 0
    cb86:	25 91       	lpm	r18, Z+
    cb88:	34 91       	lpm	r19, Z
    cb8a:	c8 54       	subi	r28, 0x48	; 72
    cb8c:	df 4f       	sbci	r29, 0xFF	; 255
    cb8e:	48 81       	ld	r20, Y
    cb90:	59 81       	ldd	r21, Y+1	; 0x01
    cb92:	c8 5b       	subi	r28, 0xB8	; 184
    cb94:	d0 40       	sbci	r29, 0x00	; 0
    cb96:	42 0f       	add	r20, r18
    cb98:	53 1f       	adc	r21, r19
    cb9a:	c2 54       	subi	r28, 0x42	; 66
    cb9c:	df 4f       	sbci	r29, 0xFF	; 255
    cb9e:	59 83       	std	Y+1, r21	; 0x01
    cba0:	48 83       	st	Y, r20
    cba2:	ce 5b       	subi	r28, 0xBE	; 190
    cba4:	d0 40       	sbci	r29, 0x00	; 0
    cba6:	ca 53       	subi	r28, 0x3A	; 58
    cba8:	df 4f       	sbci	r29, 0xFF	; 255
    cbaa:	e8 81       	ld	r30, Y
    cbac:	f9 81       	ldd	r31, Y+1	; 0x01
    cbae:	c6 5c       	subi	r28, 0xC6	; 198
    cbb0:	d0 40       	sbci	r29, 0x00	; 0
    cbb2:	25 91       	lpm	r18, Z+
    cbb4:	34 91       	lpm	r19, Z
    cbb6:	c3 53       	subi	r28, 0x33	; 51
    cbb8:	df 4f       	sbci	r29, 0xFF	; 255
    cbba:	e8 81       	ld	r30, Y
    cbbc:	f9 81       	ldd	r31, Y+1	; 0x01
    cbbe:	cd 5c       	subi	r28, 0xCD	; 205
    cbc0:	d0 40       	sbci	r29, 0x00	; 0
    cbc2:	94 91       	lpm	r25, Z
    cbc4:	ca 54       	subi	r28, 0x4A	; 74
    cbc6:	df 4f       	sbci	r29, 0xFF	; 255
    cbc8:	48 81       	ld	r20, Y
    cbca:	59 81       	ldd	r21, Y+1	; 0x01
    cbcc:	c6 5b       	subi	r28, 0xB6	; 182
    cbce:	d0 40       	sbci	r29, 0x00	; 0
    cbd0:	24 0f       	add	r18, r20
    cbd2:	35 1f       	adc	r19, r21
    cbd4:	b9 01       	movw	r22, r18
    cbd6:	99 9d       	mul	r25, r9
    cbd8:	60 0d       	add	r22, r0
    cbda:	71 1d       	adc	r23, r1
    cbdc:	11 24       	eor	r1, r1
    cbde:	c4 54       	subi	r28, 0x44	; 68
    cbe0:	df 4f       	sbci	r29, 0xFF	; 255
    cbe2:	79 83       	std	Y+1, r23	; 0x01
    cbe4:	68 83       	st	Y, r22
    cbe6:	cc 5b       	subi	r28, 0xBC	; 188
    cbe8:	d0 40       	sbci	r29, 0x00	; 0
    cbea:	93 94       	inc	r9
    cbec:	c0 54       	subi	r28, 0x40	; 64
    cbee:	df 4f       	sbci	r29, 0xFF	; 255
    cbf0:	e8 81       	ld	r30, Y
    cbf2:	f9 81       	ldd	r31, Y+1	; 0x01
    cbf4:	c0 5c       	subi	r28, 0xC0	; 192
    cbf6:	d0 40       	sbci	r29, 0x00	; 0
    cbf8:	94 91       	lpm	r25, Z
    cbfa:	92 30       	cpi	r25, 0x02	; 2
    cbfc:	09 f0       	breq	.+2      	; 0xcc00 <draw_menu(bool)+0x1c9a>
    cbfe:	50 c0       	rjmp	.+160    	; 0xcca0 <draw_menu(bool)+0x1d3a>
    cc00:	ca 53       	subi	r28, 0x3A	; 58
    cc02:	df 4f       	sbci	r29, 0xFF	; 255
    cc04:	e8 81       	ld	r30, Y
    cc06:	f9 81       	ldd	r31, Y+1	; 0x01
    cc08:	c6 5c       	subi	r28, 0xC6	; 198
    cc0a:	d0 40       	sbci	r29, 0x00	; 0
    cc0c:	25 91       	lpm	r18, Z+
    cc0e:	34 91       	lpm	r19, Z
    cc10:	c3 53       	subi	r28, 0x33	; 51
    cc12:	df 4f       	sbci	r29, 0xFF	; 255
    cc14:	e8 81       	ld	r30, Y
    cc16:	f9 81       	ldd	r31, Y+1	; 0x01
    cc18:	cd 5c       	subi	r28, 0xCD	; 205
    cc1a:	d0 40       	sbci	r29, 0x00	; 0
    cc1c:	94 91       	lpm	r25, Z
    cc1e:	ca 54       	subi	r28, 0x4A	; 74
    cc20:	df 4f       	sbci	r29, 0xFF	; 255
    cc22:	48 81       	ld	r20, Y
    cc24:	59 81       	ldd	r21, Y+1	; 0x01
    cc26:	c6 5b       	subi	r28, 0xB6	; 182
    cc28:	d0 40       	sbci	r29, 0x00	; 0
    cc2a:	24 0f       	add	r18, r20
    cc2c:	35 1f       	adc	r19, r21
    cc2e:	b9 01       	movw	r22, r18
    cc30:	99 9d       	mul	r25, r9
    cc32:	60 0d       	add	r22, r0
    cc34:	71 1d       	adc	r23, r1
    cc36:	11 24       	eor	r1, r1
    cc38:	c4 54       	subi	r28, 0x44	; 68
    cc3a:	df 4f       	sbci	r29, 0xFF	; 255
    cc3c:	79 83       	std	Y+1, r23	; 0x01
    cc3e:	68 83       	st	Y, r22
    cc40:	cc 5b       	subi	r28, 0xBC	; 188
    cc42:	d0 40       	sbci	r29, 0x00	; 0
    cc44:	c8 53       	subi	r28, 0x38	; 56
    cc46:	df 4f       	sbci	r29, 0xFF	; 255
    cc48:	e8 81       	ld	r30, Y
    cc4a:	f9 81       	ldd	r31, Y+1	; 0x01
    cc4c:	c8 5c       	subi	r28, 0xC8	; 200
    cc4e:	d0 40       	sbci	r29, 0x00	; 0
    cc50:	25 91       	lpm	r18, Z+
    cc52:	34 91       	lpm	r19, Z
    cc54:	c5 53       	subi	r28, 0x35	; 53
    cc56:	df 4f       	sbci	r29, 0xFF	; 255
    cc58:	e8 81       	ld	r30, Y
    cc5a:	f9 81       	ldd	r31, Y+1	; 0x01
    cc5c:	cb 5c       	subi	r28, 0xCB	; 203
    cc5e:	d0 40       	sbci	r29, 0x00	; 0
    cc60:	94 91       	lpm	r25, Z
    cc62:	c8 54       	subi	r28, 0x48	; 72
    cc64:	df 4f       	sbci	r29, 0xFF	; 255
    cc66:	48 81       	ld	r20, Y
    cc68:	59 81       	ldd	r21, Y+1	; 0x01
    cc6a:	c8 5b       	subi	r28, 0xB8	; 184
    cc6c:	d0 40       	sbci	r29, 0x00	; 0
    cc6e:	24 0f       	add	r18, r20
    cc70:	35 1f       	adc	r19, r21
    cc72:	b9 01       	movw	r22, r18
    cc74:	93 9d       	mul	r25, r3
    cc76:	60 0d       	add	r22, r0
    cc78:	71 1d       	adc	r23, r1
    cc7a:	11 24       	eor	r1, r1
    cc7c:	c2 54       	subi	r28, 0x42	; 66
    cc7e:	df 4f       	sbci	r29, 0xFF	; 255
    cc80:	79 83       	std	Y+1, r23	; 0x01
    cc82:	68 83       	st	Y, r22
    cc84:	ce 5b       	subi	r28, 0xBE	; 190
    cc86:	d0 40       	sbci	r29, 0x00	; 0
    cc88:	93 94       	inc	r9
    cc8a:	c1 53       	subi	r28, 0x31	; 49
    cc8c:	df 4f       	sbci	r29, 0xFF	; 255
    cc8e:	e8 81       	ld	r30, Y
    cc90:	f9 81       	ldd	r31, Y+1	; 0x01
    cc92:	cf 5c       	subi	r28, 0xCF	; 207
    cc94:	d0 40       	sbci	r29, 0x00	; 0
    cc96:	94 91       	lpm	r25, Z
    cc98:	99 16       	cp	r9, r25
    cc9a:	10 f0       	brcs	.+4      	; 0xcca0 <draw_menu(bool)+0x1d3a>
    cc9c:	33 94       	inc	r3
    cc9e:	91 2c       	mov	r9, r1
    cca0:	c6 54       	subi	r28, 0x46	; 70
    cca2:	df 4f       	sbci	r29, 0xFF	; 255
    cca4:	e8 81       	ld	r30, Y
    cca6:	f9 81       	ldd	r31, Y+1	; 0x01
    cca8:	ca 5b       	subi	r28, 0xBA	; 186
    ccaa:	d0 40       	sbci	r29, 0x00	; 0
    ccac:	44 91       	lpm	r20, Z
    ccae:	8e 01       	movw	r16, r28
    ccb0:	0f 57       	subi	r16, 0x7F	; 127
    ccb2:	1f 4f       	sbci	r17, 0xFF	; 255
    ccb4:	9e 01       	movw	r18, r28
    ccb6:	2f 5f       	subi	r18, 0xFF	; 255
    ccb8:	3f 4f       	sbci	r19, 0xFF	; 255
    ccba:	cf 54       	subi	r28, 0x4F	; 79
    ccbc:	df 4f       	sbci	r29, 0xFF	; 255
    ccbe:	68 81       	ld	r22, Y
    ccc0:	c1 5b       	subi	r28, 0xB1	; 177
    ccc2:	d0 40       	sbci	r29, 0x00	; 0
    ccc4:	ce 51       	subi	r28, 0x1E	; 30
    ccc6:	df 4f       	sbci	r29, 0xFF	; 255
    ccc8:	e8 81       	ld	r30, Y
    ccca:	f9 81       	ldd	r31, Y+1	; 0x01
    cccc:	c2 5e       	subi	r28, 0xE2	; 226
    ccce:	d0 40       	sbci	r29, 0x00	; 0
    ccd0:	19 95       	eicall
    ccd2:	cf 52       	subi	r28, 0x2F	; 47
    ccd4:	df 4f       	sbci	r29, 0xFF	; 255
    ccd6:	e8 81       	ld	r30, Y
    ccd8:	f9 81       	ldd	r31, Y+1	; 0x01
    ccda:	c1 5d       	subi	r28, 0xD1	; 209
    ccdc:	d0 40       	sbci	r29, 0x00	; 0
    ccde:	25 91       	lpm	r18, Z+
    cce0:	34 91       	lpm	r19, Z
    cce2:	c6 54       	subi	r28, 0x46	; 70
    cce4:	df 4f       	sbci	r29, 0xFF	; 255
    cce6:	e8 81       	ld	r30, Y
    cce8:	f9 81       	ldd	r31, Y+1	; 0x01
    ccea:	ca 5b       	subi	r28, 0xBA	; 186
    ccec:	d0 40       	sbci	r29, 0x00	; 0
    ccee:	84 91       	lpm	r24, Z
    ccf0:	cf 54       	subi	r28, 0x4F	; 79
    ccf2:	df 4f       	sbci	r29, 0xFF	; 255
    ccf4:	68 81       	ld	r22, Y
    ccf6:	c1 5b       	subi	r28, 0xB1	; 177
    ccf8:	d0 40       	sbci	r29, 0x00	; 0
    ccfa:	70 e0       	ldi	r23, 0x00	; 0
    ccfc:	ce 54       	subi	r28, 0x4E	; 78
    ccfe:	df 4f       	sbci	r29, 0xFF	; 255
    cd00:	48 81       	ld	r20, Y
    cd02:	c2 5b       	subi	r28, 0xB2	; 178
    cd04:	d0 40       	sbci	r29, 0x00	; 0
    cd06:	90 e0       	ldi	r25, 0x00	; 0
    cd08:	f9 01       	movw	r30, r18
    cd0a:	19 95       	eicall
    cd0c:	cc 52       	subi	r28, 0x2C	; 44
    cd0e:	df 4f       	sbci	r29, 0xFF	; 255
    cd10:	e8 81       	ld	r30, Y
    cd12:	f9 81       	ldd	r31, Y+1	; 0x01
    cd14:	c4 5d       	subi	r28, 0xD4	; 212
    cd16:	d0 40       	sbci	r29, 0x00	; 0
    cd18:	a5 90       	lpm	r10, Z+
    cd1a:	b4 90       	lpm	r11, Z
    cd1c:	ca 52       	subi	r28, 0x2A	; 42
    cd1e:	df 4f       	sbci	r29, 0xFF	; 255
    cd20:	e8 81       	ld	r30, Y
    cd22:	f9 81       	ldd	r31, Y+1	; 0x01
    cd24:	c6 5d       	subi	r28, 0xD6	; 214
    cd26:	d0 40       	sbci	r29, 0x00	; 0
    cd28:	c5 90       	lpm	r12, Z+
    cd2a:	d4 90       	lpm	r13, Z
    cd2c:	c8 52       	subi	r28, 0x28	; 40
    cd2e:	df 4f       	sbci	r29, 0xFF	; 255
    cd30:	e8 81       	ld	r30, Y
    cd32:	f9 81       	ldd	r31, Y+1	; 0x01
    cd34:	c8 5d       	subi	r28, 0xD8	; 216
    cd36:	d0 40       	sbci	r29, 0x00	; 0
    cd38:	e4 90       	lpm	r14, Z
    cd3a:	c6 52       	subi	r28, 0x26	; 38
    cd3c:	df 4f       	sbci	r29, 0xFF	; 255
    cd3e:	e8 81       	ld	r30, Y
    cd40:	f9 81       	ldd	r31, Y+1	; 0x01
    cd42:	ca 5d       	subi	r28, 0xDA	; 218
    cd44:	d0 40       	sbci	r29, 0x00	; 0
    cd46:	04 91       	lpm	r16, Z
    cd48:	c4 52       	subi	r28, 0x24	; 36
    cd4a:	df 4f       	sbci	r29, 0xFF	; 255
    cd4c:	e8 81       	ld	r30, Y
    cd4e:	f9 81       	ldd	r31, Y+1	; 0x01
    cd50:	cc 5d       	subi	r28, 0xDC	; 220
    cd52:	d0 40       	sbci	r29, 0x00	; 0
    cd54:	25 91       	lpm	r18, Z+
    cd56:	34 91       	lpm	r19, Z
    cd58:	c2 52       	subi	r28, 0x22	; 34
    cd5a:	df 4f       	sbci	r29, 0xFF	; 255
    cd5c:	e8 81       	ld	r30, Y
    cd5e:	f9 81       	ldd	r31, Y+1	; 0x01
    cd60:	ce 5d       	subi	r28, 0xDE	; 222
    cd62:	d0 40       	sbci	r29, 0x00	; 0
    cd64:	45 91       	lpm	r20, Z+
    cd66:	54 91       	lpm	r21, Z
    cd68:	88 24       	eor	r8, r8
    cd6a:	83 94       	inc	r8
    cd6c:	81 11       	cpse	r24, r1
    cd6e:	01 c0       	rjmp	.+2      	; 0xcd72 <draw_menu(bool)+0x1e0c>
    cd70:	81 2c       	mov	r8, r1
    cd72:	cb 54       	subi	r28, 0x4B	; 75
    cd74:	df 4f       	sbci	r29, 0xFF	; 255
    cd76:	f8 81       	ld	r31, Y
    cd78:	c5 5b       	subi	r28, 0xB5	; 181
    cd7a:	d0 40       	sbci	r29, 0x00	; 0
    cd7c:	ff 93       	push	r31
    cd7e:	cc 54       	subi	r28, 0x4C	; 76
    cd80:	df 4f       	sbci	r29, 0xFF	; 255
    cd82:	68 81       	ld	r22, Y
    cd84:	c4 5b       	subi	r28, 0xB4	; 180
    cd86:	d0 40       	sbci	r29, 0x00	; 0
    cd88:	6f 93       	push	r22
    cd8a:	81 e0       	ldi	r24, 0x01	; 1
    cd8c:	90 e0       	ldi	r25, 0x00	; 0
    cd8e:	8c 0f       	add	r24, r28
    cd90:	9d 1f       	adc	r25, r29
    cd92:	9f 93       	push	r25
    cd94:	8f 93       	push	r24
    cd96:	c2 54       	subi	r28, 0x42	; 66
    cd98:	df 4f       	sbci	r29, 0xFF	; 255
    cd9a:	68 81       	ld	r22, Y
    cd9c:	79 81       	ldd	r23, Y+1	; 0x01
    cd9e:	ce 5b       	subi	r28, 0xBE	; 190
    cda0:	d0 40       	sbci	r29, 0x00	; 0
    cda2:	c4 54       	subi	r28, 0x44	; 68
    cda4:	df 4f       	sbci	r29, 0xFF	; 255
    cda6:	88 81       	ld	r24, Y
    cda8:	99 81       	ldd	r25, Y+1	; 0x01
    cdaa:	cc 5b       	subi	r28, 0xBC	; 188
    cdac:	d0 40       	sbci	r29, 0x00	; 0
    cdae:	0e 94 16 55 	call	0xaa2c	; 0xaa2c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    cdb2:	ce 54       	subi	r28, 0x4E	; 78
    cdb4:	df 4f       	sbci	r29, 0xFF	; 255
    cdb6:	88 81       	ld	r24, Y
    cdb8:	c2 5b       	subi	r28, 0xB2	; 178
    cdba:	d0 40       	sbci	r29, 0x00	; 0
    cdbc:	8f 5f       	subi	r24, 0xFF	; 255
    cdbe:	ce 54       	subi	r28, 0x4E	; 78
    cdc0:	df 4f       	sbci	r29, 0xFF	; 255
    cdc2:	88 83       	st	Y, r24
    cdc4:	c2 5b       	subi	r28, 0xB2	; 178
    cdc6:	d0 40       	sbci	r29, 0x00	; 0
    cdc8:	0f 90       	pop	r0
    cdca:	0f 90       	pop	r0
    cdcc:	0f 90       	pop	r0
    cdce:	0f 90       	pop	r0
    cdd0:	7b ce       	rjmp	.-778    	; 0xcac8 <draw_menu(bool)+0x1b62>
    cdd2:	ce 53       	subi	r28, 0x3E	; 62
    cdd4:	df 4f       	sbci	r29, 0xFF	; 255
    cdd6:	e8 81       	ld	r30, Y
    cdd8:	f9 81       	ldd	r31, Y+1	; 0x01
    cdda:	c2 5c       	subi	r28, 0xC2	; 194
    cddc:	d0 40       	sbci	r29, 0x00	; 0
    cdde:	ef 2b       	or	r30, r31
    cde0:	09 f4       	brne	.+2      	; 0xcde4 <draw_menu(bool)+0x1e7e>
    cde2:	c5 c1       	rjmp	.+906    	; 0xd16e <draw_menu(bool)+0x2208>
    cde4:	cc 53       	subi	r28, 0x3C	; 60
    cde6:	df 4f       	sbci	r29, 0xFF	; 255
    cde8:	28 81       	ld	r18, Y
    cdea:	39 81       	ldd	r19, Y+1	; 0x01
    cdec:	c4 5c       	subi	r28, 0xC4	; 196
    cdee:	d0 40       	sbci	r29, 0x00	; 0
    cdf0:	23 2b       	or	r18, r19
    cdf2:	09 f4       	brne	.+2      	; 0xcdf6 <draw_menu(bool)+0x1e90>
    cdf4:	bc c1       	rjmp	.+888    	; 0xd16e <draw_menu(bool)+0x2208>
    cdf6:	ce 54       	subi	r28, 0x4E	; 78
    cdf8:	df 4f       	sbci	r29, 0xFF	; 255
    cdfa:	18 82       	st	Y, r1
    cdfc:	c2 5b       	subi	r28, 0xB2	; 178
    cdfe:	d0 40       	sbci	r29, 0x00	; 0
    ce00:	f2 01       	movw	r30, r4
    ce02:	e8 54       	subi	r30, 0x48	; 72
    ce04:	fd 4f       	sbci	r31, 0xFD	; 253
    ce06:	e6 0d       	add	r30, r6
    ce08:	f7 1d       	adc	r31, r7
    ce0a:	25 91       	lpm	r18, Z+
    ce0c:	34 91       	lpm	r19, Z
    ce0e:	c2 01       	movw	r24, r4
    ce10:	8d 54       	subi	r24, 0x4D	; 77
    ce12:	9d 4f       	sbci	r25, 0xFD	; 253
    ce14:	a3 01       	movw	r20, r6
    ce16:	48 0f       	add	r20, r24
    ce18:	59 1f       	adc	r21, r25
    ce1a:	c0 54       	subi	r28, 0x40	; 64
    ce1c:	df 4f       	sbci	r29, 0xFF	; 255
    ce1e:	59 83       	std	Y+1, r21	; 0x01
    ce20:	48 83       	st	Y, r20
    ce22:	c0 5c       	subi	r28, 0xC0	; 192
    ce24:	d0 40       	sbci	r29, 0x00	; 0
    ce26:	fa 01       	movw	r30, r20
    ce28:	84 91       	lpm	r24, Z
    ce2a:	cf 54       	subi	r28, 0x4F	; 79
    ce2c:	df 4f       	sbci	r29, 0xFF	; 255
    ce2e:	68 81       	ld	r22, Y
    ce30:	c1 5b       	subi	r28, 0xB1	; 177
    ce32:	d0 40       	sbci	r29, 0x00	; 0
    ce34:	70 e0       	ldi	r23, 0x00	; 0
    ce36:	40 e0       	ldi	r20, 0x00	; 0
    ce38:	90 e0       	ldi	r25, 0x00	; 0
    ce3a:	f9 01       	movw	r30, r18
    ce3c:	19 95       	eicall
    ce3e:	cd 54       	subi	r28, 0x4D	; 77
    ce40:	df 4f       	sbci	r29, 0xFF	; 255
    ce42:	88 83       	st	Y, r24
    ce44:	c3 5b       	subi	r28, 0xB3	; 179
    ce46:	d0 40       	sbci	r29, 0x00	; 0
    ce48:	f2 01       	movw	r30, r4
    ce4a:	ee 54       	subi	r30, 0x4E	; 78
    ce4c:	fd 4f       	sbci	r31, 0xFD	; 253
    ce4e:	e6 0d       	add	r30, r6
    ce50:	f7 1d       	adc	r31, r7
    ce52:	44 91       	lpm	r20, Z
    ce54:	c2 01       	movw	r24, r4
    ce56:	80 55       	subi	r24, 0x50	; 80
    ce58:	9d 4f       	sbci	r25, 0xFD	; 253
    ce5a:	93 01       	movw	r18, r6
    ce5c:	28 0f       	add	r18, r24
    ce5e:	39 1f       	adc	r19, r25
    ce60:	c5 53       	subi	r28, 0x35	; 53
    ce62:	df 4f       	sbci	r29, 0xFF	; 255
    ce64:	39 83       	std	Y+1, r19	; 0x01
    ce66:	28 83       	st	Y, r18
    ce68:	cb 5c       	subi	r28, 0xCB	; 203
    ce6a:	d0 40       	sbci	r29, 0x00	; 0
    ce6c:	4f 3f       	cpi	r20, 0xFF	; 255
    ce6e:	99 f0       	breq	.+38     	; 0xce96 <draw_menu(bool)+0x1f30>
    ce70:	f9 01       	movw	r30, r18
    ce72:	24 91       	lpm	r18, Z
    ce74:	f2 01       	movw	r30, r4
    ce76:	ef 54       	subi	r30, 0x4F	; 79
    ce78:	fd 4f       	sbci	r31, 0xFD	; 253
    ce7a:	e6 0d       	add	r30, r6
    ce7c:	f7 1d       	adc	r31, r7
    ce7e:	e4 91       	lpm	r30, Z
    ce80:	2e 9f       	mul	r18, r30
    ce82:	20 2d       	mov	r18, r0
    ce84:	11 24       	eor	r1, r1
    ce86:	be 01       	movw	r22, r28
    ce88:	6d 54       	subi	r22, 0x4D	; 77
    ce8a:	7f 4f       	sbci	r23, 0xFF	; 255
    ce8c:	ce 01       	movw	r24, r28
    ce8e:	8e 54       	subi	r24, 0x4E	; 78
    ce90:	9f 4f       	sbci	r25, 0xFF	; 255
    ce92:	0e 94 e0 53 	call	0xa7c0	; 0xa7c0 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    ce96:	ce 54       	subi	r28, 0x4E	; 78
    ce98:	df 4f       	sbci	r29, 0xFF	; 255
    ce9a:	88 80       	ld	r8, Y
    ce9c:	c2 5b       	subi	r28, 0xB2	; 178
    ce9e:	d0 40       	sbci	r29, 0x00	; 0
    cea0:	cd 54       	subi	r28, 0x4D	; 77
    cea2:	df 4f       	sbci	r29, 0xFF	; 255
    cea4:	f8 81       	ld	r31, Y
    cea6:	c3 5b       	subi	r28, 0xB3	; 179
    cea8:	d0 40       	sbci	r29, 0x00	; 0
    ceaa:	c3 53       	subi	r28, 0x33	; 51
    ceac:	df 4f       	sbci	r29, 0xFF	; 255
    ceae:	f8 83       	st	Y, r31
    ceb0:	cd 5c       	subi	r28, 0xCD	; 205
    ceb2:	d0 40       	sbci	r29, 0x00	; 0
    ceb4:	c2 01       	movw	r24, r4
    ceb6:	81 55       	subi	r24, 0x51	; 81
    ceb8:	9d 4f       	sbci	r25, 0xFD	; 253
    ceba:	93 01       	movw	r18, r6
    cebc:	28 0f       	add	r18, r24
    cebe:	39 1f       	adc	r19, r25
    cec0:	c6 54       	subi	r28, 0x46	; 70
    cec2:	df 4f       	sbci	r29, 0xFF	; 255
    cec4:	39 83       	std	Y+1, r19	; 0x01
    cec6:	28 83       	st	Y, r18
    cec8:	ca 5b       	subi	r28, 0xBA	; 186
    ceca:	d0 40       	sbci	r29, 0x00	; 0
    cecc:	62 01       	movw	r12, r4
    cece:	31 e6       	ldi	r19, 0x61	; 97
    ced0:	c3 1a       	sub	r12, r19
    ced2:	3d ef       	ldi	r19, 0xFD	; 253
    ced4:	d3 0a       	sbc	r13, r19
    ced6:	c6 0c       	add	r12, r6
    ced8:	d7 1c       	adc	r13, r7
    ceda:	52 01       	movw	r10, r4
    cedc:	4f e5       	ldi	r20, 0x5F	; 95
    cede:	a4 1a       	sub	r10, r20
    cee0:	4d ef       	ldi	r20, 0xFD	; 253
    cee2:	b4 0a       	sbc	r11, r20
    cee4:	a6 0c       	add	r10, r6
    cee6:	b7 1c       	adc	r11, r7
    cee8:	01 97       	sbiw	r24, 0x01	; 1
    ceea:	b3 01       	movw	r22, r6
    ceec:	68 0f       	add	r22, r24
    ceee:	79 1f       	adc	r23, r25
    cef0:	ca 53       	subi	r28, 0x3A	; 58
    cef2:	df 4f       	sbci	r29, 0xFF	; 255
    cef4:	79 83       	std	Y+1, r23	; 0x01
    cef6:	68 83       	st	Y, r22
    cef8:	c6 5c       	subi	r28, 0xC6	; 198
    cefa:	d0 40       	sbci	r29, 0x00	; 0
    cefc:	01 97       	sbiw	r24, 0x01	; 1
    cefe:	f3 01       	movw	r30, r6
    cf00:	e8 0f       	add	r30, r24
    cf02:	f9 1f       	adc	r31, r25
    cf04:	c8 53       	subi	r28, 0x38	; 56
    cf06:	df 4f       	sbci	r29, 0xFF	; 255
    cf08:	f9 83       	std	Y+1, r31	; 0x01
    cf0a:	e8 83       	st	Y, r30
    cf0c:	c8 5c       	subi	r28, 0xC8	; 200
    cf0e:	d0 40       	sbci	r29, 0x00	; 0
    cf10:	08 97       	sbiw	r24, 0x08	; 8
    cf12:	93 01       	movw	r18, r6
    cf14:	28 0f       	add	r18, r24
    cf16:	39 1f       	adc	r19, r25
    cf18:	c1 53       	subi	r28, 0x31	; 49
    cf1a:	df 4f       	sbci	r29, 0xFF	; 255
    cf1c:	39 83       	std	Y+1, r19	; 0x01
    cf1e:	28 83       	st	Y, r18
    cf20:	cf 5c       	subi	r28, 0xCF	; 207
    cf22:	d0 40       	sbci	r29, 0x00	; 0
    cf24:	02 97       	sbiw	r24, 0x02	; 2
    cf26:	a3 01       	movw	r20, r6
    cf28:	48 0f       	add	r20, r24
    cf2a:	59 1f       	adc	r21, r25
    cf2c:	cf 52       	subi	r28, 0x2F	; 47
    cf2e:	df 4f       	sbci	r29, 0xFF	; 255
    cf30:	59 83       	std	Y+1, r21	; 0x01
    cf32:	48 83       	st	Y, r20
    cf34:	c1 5d       	subi	r28, 0xD1	; 209
    cf36:	d0 40       	sbci	r29, 0x00	; 0
    cf38:	31 2c       	mov	r3, r1
    cf3a:	91 2c       	mov	r9, r1
    cf3c:	c3 53       	subi	r28, 0x33	; 51
    cf3e:	df 4f       	sbci	r29, 0xFF	; 255
    cf40:	58 81       	ld	r21, Y
    cf42:	cd 5c       	subi	r28, 0xCD	; 205
    cf44:	d0 40       	sbci	r29, 0x00	; 0
    cf46:	85 16       	cp	r8, r21
    cf48:	08 f0       	brcs	.+2      	; 0xcf4c <draw_menu(bool)+0x1fe6>
    cf4a:	11 c1       	rjmp	.+546    	; 0xd16e <draw_menu(bool)+0x2208>
    cf4c:	c6 54       	subi	r28, 0x46	; 70
    cf4e:	df 4f       	sbci	r29, 0xFF	; 255
    cf50:	e8 81       	ld	r30, Y
    cf52:	f9 81       	ldd	r31, Y+1	; 0x01
    cf54:	ca 5b       	subi	r28, 0xBA	; 186
    cf56:	d0 40       	sbci	r29, 0x00	; 0
    cf58:	84 91       	lpm	r24, Z
    cf5a:	81 11       	cpse	r24, r1
    cf5c:	2f c0       	rjmp	.+94     	; 0xcfbc <draw_menu(bool)+0x2056>
    cf5e:	f6 01       	movw	r30, r12
    cf60:	85 91       	lpm	r24, Z+
    cf62:	94 91       	lpm	r25, Z
    cf64:	ca 54       	subi	r28, 0x4A	; 74
    cf66:	df 4f       	sbci	r29, 0xFF	; 255
    cf68:	28 81       	ld	r18, Y
    cf6a:	39 81       	ldd	r19, Y+1	; 0x01
    cf6c:	c6 5b       	subi	r28, 0xB6	; 182
    cf6e:	d0 40       	sbci	r29, 0x00	; 0
    cf70:	28 0f       	add	r18, r24
    cf72:	39 1f       	adc	r19, r25
    cf74:	c4 54       	subi	r28, 0x44	; 68
    cf76:	df 4f       	sbci	r29, 0xFF	; 255
    cf78:	39 83       	std	Y+1, r19	; 0x01
    cf7a:	28 83       	st	Y, r18
    cf7c:	cc 5b       	subi	r28, 0xBC	; 188
    cf7e:	d0 40       	sbci	r29, 0x00	; 0
    cf80:	f5 01       	movw	r30, r10
    cf82:	85 91       	lpm	r24, Z+
    cf84:	94 91       	lpm	r25, Z
    cf86:	ca 53       	subi	r28, 0x3A	; 58
    cf88:	df 4f       	sbci	r29, 0xFF	; 255
    cf8a:	e8 81       	ld	r30, Y
    cf8c:	f9 81       	ldd	r31, Y+1	; 0x01
    cf8e:	c6 5c       	subi	r28, 0xC6	; 198
    cf90:	d0 40       	sbci	r29, 0x00	; 0
    cf92:	24 91       	lpm	r18, Z
    cf94:	c8 54       	subi	r28, 0x48	; 72
    cf96:	df 4f       	sbci	r29, 0xFF	; 255
    cf98:	48 81       	ld	r20, Y
    cf9a:	59 81       	ldd	r21, Y+1	; 0x01
    cf9c:	c8 5b       	subi	r28, 0xB8	; 184
    cf9e:	d0 40       	sbci	r29, 0x00	; 0
    cfa0:	84 0f       	add	r24, r20
    cfa2:	95 1f       	adc	r25, r21
    cfa4:	bc 01       	movw	r22, r24
    cfa6:	29 9d       	mul	r18, r9
    cfa8:	60 0d       	add	r22, r0
    cfaa:	71 1d       	adc	r23, r1
    cfac:	11 24       	eor	r1, r1
    cfae:	c2 54       	subi	r28, 0x42	; 66
    cfb0:	df 4f       	sbci	r29, 0xFF	; 255
    cfb2:	79 83       	std	Y+1, r23	; 0x01
    cfb4:	68 83       	st	Y, r22
    cfb6:	ce 5b       	subi	r28, 0xBE	; 190
    cfb8:	d0 40       	sbci	r29, 0x00	; 0
    cfba:	93 94       	inc	r9
    cfbc:	c6 54       	subi	r28, 0x46	; 70
    cfbe:	df 4f       	sbci	r29, 0xFF	; 255
    cfc0:	e8 81       	ld	r30, Y
    cfc2:	f9 81       	ldd	r31, Y+1	; 0x01
    cfc4:	ca 5b       	subi	r28, 0xBA	; 186
    cfc6:	d0 40       	sbci	r29, 0x00	; 0
    cfc8:	84 91       	lpm	r24, Z
    cfca:	81 30       	cpi	r24, 0x01	; 1
    cfcc:	79 f5       	brne	.+94     	; 0xd02c <draw_menu(bool)+0x20c6>
    cfce:	f5 01       	movw	r30, r10
    cfd0:	85 91       	lpm	r24, Z+
    cfd2:	94 91       	lpm	r25, Z
    cfd4:	c8 54       	subi	r28, 0x48	; 72
    cfd6:	df 4f       	sbci	r29, 0xFF	; 255
    cfd8:	28 81       	ld	r18, Y
    cfda:	39 81       	ldd	r19, Y+1	; 0x01
    cfdc:	c8 5b       	subi	r28, 0xB8	; 184
    cfde:	d0 40       	sbci	r29, 0x00	; 0
    cfe0:	28 0f       	add	r18, r24
    cfe2:	39 1f       	adc	r19, r25
    cfe4:	c2 54       	subi	r28, 0x42	; 66
    cfe6:	df 4f       	sbci	r29, 0xFF	; 255
    cfe8:	39 83       	std	Y+1, r19	; 0x01
    cfea:	28 83       	st	Y, r18
    cfec:	ce 5b       	subi	r28, 0xBE	; 190
    cfee:	d0 40       	sbci	r29, 0x00	; 0
    cff0:	f6 01       	movw	r30, r12
    cff2:	85 91       	lpm	r24, Z+
    cff4:	94 91       	lpm	r25, Z
    cff6:	c8 53       	subi	r28, 0x38	; 56
    cff8:	df 4f       	sbci	r29, 0xFF	; 255
    cffa:	e8 81       	ld	r30, Y
    cffc:	f9 81       	ldd	r31, Y+1	; 0x01
    cffe:	c8 5c       	subi	r28, 0xC8	; 200
    d000:	d0 40       	sbci	r29, 0x00	; 0
    d002:	24 91       	lpm	r18, Z
    d004:	ca 54       	subi	r28, 0x4A	; 74
    d006:	df 4f       	sbci	r29, 0xFF	; 255
    d008:	48 81       	ld	r20, Y
    d00a:	59 81       	ldd	r21, Y+1	; 0x01
    d00c:	c6 5b       	subi	r28, 0xB6	; 182
    d00e:	d0 40       	sbci	r29, 0x00	; 0
    d010:	84 0f       	add	r24, r20
    d012:	95 1f       	adc	r25, r21
    d014:	bc 01       	movw	r22, r24
    d016:	29 9d       	mul	r18, r9
    d018:	60 0d       	add	r22, r0
    d01a:	71 1d       	adc	r23, r1
    d01c:	11 24       	eor	r1, r1
    d01e:	c4 54       	subi	r28, 0x44	; 68
    d020:	df 4f       	sbci	r29, 0xFF	; 255
    d022:	79 83       	std	Y+1, r23	; 0x01
    d024:	68 83       	st	Y, r22
    d026:	cc 5b       	subi	r28, 0xBC	; 188
    d028:	d0 40       	sbci	r29, 0x00	; 0
    d02a:	93 94       	inc	r9
    d02c:	c6 54       	subi	r28, 0x46	; 70
    d02e:	df 4f       	sbci	r29, 0xFF	; 255
    d030:	e8 81       	ld	r30, Y
    d032:	f9 81       	ldd	r31, Y+1	; 0x01
    d034:	ca 5b       	subi	r28, 0xBA	; 186
    d036:	d0 40       	sbci	r29, 0x00	; 0
    d038:	84 91       	lpm	r24, Z
    d03a:	82 30       	cpi	r24, 0x02	; 2
    d03c:	09 f0       	breq	.+2      	; 0xd040 <draw_menu(bool)+0x20da>
    d03e:	46 c0       	rjmp	.+140    	; 0xd0cc <draw_menu(bool)+0x2166>
    d040:	f6 01       	movw	r30, r12
    d042:	85 91       	lpm	r24, Z+
    d044:	94 91       	lpm	r25, Z
    d046:	c8 53       	subi	r28, 0x38	; 56
    d048:	df 4f       	sbci	r29, 0xFF	; 255
    d04a:	e8 81       	ld	r30, Y
    d04c:	f9 81       	ldd	r31, Y+1	; 0x01
    d04e:	c8 5c       	subi	r28, 0xC8	; 200
    d050:	d0 40       	sbci	r29, 0x00	; 0
    d052:	24 91       	lpm	r18, Z
    d054:	ca 54       	subi	r28, 0x4A	; 74
    d056:	df 4f       	sbci	r29, 0xFF	; 255
    d058:	48 81       	ld	r20, Y
    d05a:	59 81       	ldd	r21, Y+1	; 0x01
    d05c:	c6 5b       	subi	r28, 0xB6	; 182
    d05e:	d0 40       	sbci	r29, 0x00	; 0
    d060:	84 0f       	add	r24, r20
    d062:	95 1f       	adc	r25, r21
    d064:	bc 01       	movw	r22, r24
    d066:	29 9d       	mul	r18, r9
    d068:	60 0d       	add	r22, r0
    d06a:	71 1d       	adc	r23, r1
    d06c:	11 24       	eor	r1, r1
    d06e:	c4 54       	subi	r28, 0x44	; 68
    d070:	df 4f       	sbci	r29, 0xFF	; 255
    d072:	79 83       	std	Y+1, r23	; 0x01
    d074:	68 83       	st	Y, r22
    d076:	cc 5b       	subi	r28, 0xBC	; 188
    d078:	d0 40       	sbci	r29, 0x00	; 0
    d07a:	f5 01       	movw	r30, r10
    d07c:	85 91       	lpm	r24, Z+
    d07e:	94 91       	lpm	r25, Z
    d080:	ca 53       	subi	r28, 0x3A	; 58
    d082:	df 4f       	sbci	r29, 0xFF	; 255
    d084:	e8 81       	ld	r30, Y
    d086:	f9 81       	ldd	r31, Y+1	; 0x01
    d088:	c6 5c       	subi	r28, 0xC6	; 198
    d08a:	d0 40       	sbci	r29, 0x00	; 0
    d08c:	24 91       	lpm	r18, Z
    d08e:	c8 54       	subi	r28, 0x48	; 72
    d090:	df 4f       	sbci	r29, 0xFF	; 255
    d092:	48 81       	ld	r20, Y
    d094:	59 81       	ldd	r21, Y+1	; 0x01
    d096:	c8 5b       	subi	r28, 0xB8	; 184
    d098:	d0 40       	sbci	r29, 0x00	; 0
    d09a:	84 0f       	add	r24, r20
    d09c:	95 1f       	adc	r25, r21
    d09e:	bc 01       	movw	r22, r24
    d0a0:	23 9d       	mul	r18, r3
    d0a2:	60 0d       	add	r22, r0
    d0a4:	71 1d       	adc	r23, r1
    d0a6:	11 24       	eor	r1, r1
    d0a8:	c2 54       	subi	r28, 0x42	; 66
    d0aa:	df 4f       	sbci	r29, 0xFF	; 255
    d0ac:	79 83       	std	Y+1, r23	; 0x01
    d0ae:	68 83       	st	Y, r22
    d0b0:	ce 5b       	subi	r28, 0xBE	; 190
    d0b2:	d0 40       	sbci	r29, 0x00	; 0
    d0b4:	93 94       	inc	r9
    d0b6:	c5 53       	subi	r28, 0x35	; 53
    d0b8:	df 4f       	sbci	r29, 0xFF	; 255
    d0ba:	e8 81       	ld	r30, Y
    d0bc:	f9 81       	ldd	r31, Y+1	; 0x01
    d0be:	cb 5c       	subi	r28, 0xCB	; 203
    d0c0:	d0 40       	sbci	r29, 0x00	; 0
    d0c2:	84 91       	lpm	r24, Z
    d0c4:	98 16       	cp	r9, r24
    d0c6:	10 f0       	brcs	.+4      	; 0xd0cc <draw_menu(bool)+0x2166>
    d0c8:	33 94       	inc	r3
    d0ca:	91 2c       	mov	r9, r1
    d0cc:	c1 53       	subi	r28, 0x31	; 49
    d0ce:	df 4f       	sbci	r29, 0xFF	; 255
    d0d0:	e8 81       	ld	r30, Y
    d0d2:	f9 81       	ldd	r31, Y+1	; 0x01
    d0d4:	cf 5c       	subi	r28, 0xCF	; 207
    d0d6:	d0 40       	sbci	r29, 0x00	; 0
    d0d8:	25 91       	lpm	r18, Z+
    d0da:	34 91       	lpm	r19, Z
    d0dc:	cf 52       	subi	r28, 0x2F	; 47
    d0de:	df 4f       	sbci	r29, 0xFF	; 255
    d0e0:	e8 81       	ld	r30, Y
    d0e2:	f9 81       	ldd	r31, Y+1	; 0x01
    d0e4:	c1 5d       	subi	r28, 0xD1	; 209
    d0e6:	d0 40       	sbci	r29, 0x00	; 0
    d0e8:	45 91       	lpm	r20, Z+
    d0ea:	54 91       	lpm	r21, Z
    d0ec:	cc 53       	subi	r28, 0x3C	; 60
    d0ee:	df 4f       	sbci	r29, 0xFF	; 255
    d0f0:	e8 80       	ld	r14, Y
    d0f2:	f9 80       	ldd	r15, Y+1	; 0x01
    d0f4:	c4 5c       	subi	r28, 0xC4	; 196
    d0f6:	d0 40       	sbci	r29, 0x00	; 0
    d0f8:	ce 53       	subi	r28, 0x3E	; 62
    d0fa:	df 4f       	sbci	r29, 0xFF	; 255
    d0fc:	08 81       	ld	r16, Y
    d0fe:	19 81       	ldd	r17, Y+1	; 0x01
    d100:	c2 5c       	subi	r28, 0xC2	; 194
    d102:	d0 40       	sbci	r29, 0x00	; 0
    d104:	c2 54       	subi	r28, 0x42	; 66
    d106:	df 4f       	sbci	r29, 0xFF	; 255
    d108:	68 81       	ld	r22, Y
    d10a:	79 81       	ldd	r23, Y+1	; 0x01
    d10c:	ce 5b       	subi	r28, 0xBE	; 190
    d10e:	d0 40       	sbci	r29, 0x00	; 0
    d110:	c4 54       	subi	r28, 0x44	; 68
    d112:	df 4f       	sbci	r29, 0xFF	; 255
    d114:	88 81       	ld	r24, Y
    d116:	99 81       	ldd	r25, Y+1	; 0x01
    d118:	cc 5b       	subi	r28, 0xBC	; 188
    d11a:	d0 40       	sbci	r29, 0x00	; 0
    d11c:	0e 94 98 57 	call	0xaf30	; 0xaf30 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    d120:	18 2f       	mov	r17, r24
    d122:	81 e0       	ldi	r24, 0x01	; 1
    d124:	88 0d       	add	r24, r8
    d126:	11 23       	and	r17, r17
    d128:	21 f1       	breq	.+72     	; 0xd172 <draw_menu(bool)+0x220c>
    d12a:	ce 54       	subi	r28, 0x4E	; 78
    d12c:	df 4f       	sbci	r29, 0xFF	; 255
    d12e:	88 82       	st	Y, r8
    d130:	c2 5b       	subi	r28, 0xB2	; 178
    d132:	d0 40       	sbci	r29, 0x00	; 0
    d134:	f2 01       	movw	r30, r4
    d136:	ea 54       	subi	r30, 0x4A	; 74
    d138:	fd 4f       	sbci	r31, 0xFD	; 253
    d13a:	e6 0d       	add	r30, r6
    d13c:	f7 1d       	adc	r31, r7
    d13e:	25 91       	lpm	r18, Z+
    d140:	34 91       	lpm	r19, Z
    d142:	c0 54       	subi	r28, 0x40	; 64
    d144:	df 4f       	sbci	r29, 0xFF	; 255
    d146:	e8 81       	ld	r30, Y
    d148:	f9 81       	ldd	r31, Y+1	; 0x01
    d14a:	c0 5c       	subi	r28, 0xC0	; 192
    d14c:	d0 40       	sbci	r29, 0x00	; 0
    d14e:	84 91       	lpm	r24, Z
    d150:	cf 54       	subi	r28, 0x4F	; 79
    d152:	df 4f       	sbci	r29, 0xFF	; 255
    d154:	68 81       	ld	r22, Y
    d156:	c1 5b       	subi	r28, 0xB1	; 177
    d158:	d0 40       	sbci	r29, 0x00	; 0
    d15a:	70 e0       	ldi	r23, 0x00	; 0
    d15c:	48 2d       	mov	r20, r8
    d15e:	90 e0       	ldi	r25, 0x00	; 0
    d160:	f9 01       	movw	r30, r18
    d162:	19 95       	eicall
    d164:	c6 53       	subi	r28, 0x36	; 54
    d166:	df 4f       	sbci	r29, 0xFF	; 255
    d168:	18 83       	st	Y, r17
    d16a:	ca 5c       	subi	r28, 0xCA	; 202
    d16c:	d0 40       	sbci	r29, 0x00	; 0
    d16e:	23 94       	inc	r2
    d170:	b4 cb       	rjmp	.-2200   	; 0xc8da <draw_menu(bool)+0x1974>
    d172:	88 2e       	mov	r8, r24
    d174:	e3 ce       	rjmp	.-570    	; 0xcf3c <draw_menu(bool)+0x1fd6>
    d176:	f1 e0       	ldi	r31, 0x01	; 1
    d178:	c6 53       	subi	r28, 0x36	; 54
    d17a:	df 4f       	sbci	r29, 0xFF	; 255
    d17c:	f8 83       	st	Y, r31
    d17e:	ca 5c       	subi	r28, 0xCA	; 202
    d180:	d0 40       	sbci	r29, 0x00	; 0
    d182:	c6 53       	subi	r28, 0x36	; 54
    d184:	df 4f       	sbci	r29, 0xFF	; 255
    d186:	88 81       	ld	r24, Y
    d188:	ca 5c       	subi	r28, 0xCA	; 202
    d18a:	d0 40       	sbci	r29, 0x00	; 0
    d18c:	cd 51       	subi	r28, 0x1D	; 29
    d18e:	df 4f       	sbci	r29, 0xFF	; 255
    d190:	0f b6       	in	r0, 0x3f	; 63
    d192:	f8 94       	cli
    d194:	de bf       	out	0x3e, r29	; 62
    d196:	0f be       	out	0x3f, r0	; 63
    d198:	cd bf       	out	0x3d, r28	; 61
    d19a:	df 91       	pop	r29
    d19c:	cf 91       	pop	r28
    d19e:	1f 91       	pop	r17
    d1a0:	0f 91       	pop	r16
    d1a2:	ff 90       	pop	r15
    d1a4:	ef 90       	pop	r14
    d1a6:	df 90       	pop	r13
    d1a8:	cf 90       	pop	r12
    d1aa:	bf 90       	pop	r11
    d1ac:	af 90       	pop	r10
    d1ae:	9f 90       	pop	r9
    d1b0:	8f 90       	pop	r8
    d1b2:	7f 90       	pop	r7
    d1b4:	6f 90       	pop	r6
    d1b6:	5f 90       	pop	r5
    d1b8:	4f 90       	pop	r4
    d1ba:	3f 90       	pop	r3
    d1bc:	2f 90       	pop	r2
    d1be:	08 95       	ret

0000d1c0 <count_use_rtds()>:
_Z14count_use_rtdsv():
    d1c0:	0f 93       	push	r16
    d1c2:	1f 93       	push	r17
    d1c4:	cf 93       	push	r28
    d1c6:	df 93       	push	r29
    d1c8:	1f 92       	push	r1
    d1ca:	cd b7       	in	r28, 0x3d	; 61
    d1cc:	de b7       	in	r29, 0x3e	; 62
    d1ce:	19 82       	std	Y+1, r1	; 0x01
    d1d0:	10 e0       	ldi	r17, 0x00	; 0
    d1d2:	00 e0       	ldi	r16, 0x00	; 0
    d1d4:	be 01       	movw	r22, r28
    d1d6:	6f 5f       	subi	r22, 0xFF	; 255
    d1d8:	7f 4f       	sbci	r23, 0xFF	; 255
    d1da:	81 2f       	mov	r24, r17
    d1dc:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <remote_tds_get_active(unsigned char, unsigned char*)>
    d1e0:	89 81       	ldd	r24, Y+1	; 0x01
    d1e2:	81 30       	cpi	r24, 0x01	; 1
    d1e4:	09 f4       	brne	.+2      	; 0xd1e8 <count_use_rtds()+0x28>
    d1e6:	0f 5f       	subi	r16, 0xFF	; 255
    d1e8:	1f 5f       	subi	r17, 0xFF	; 255
    d1ea:	1a 30       	cpi	r17, 0x0A	; 10
    d1ec:	99 f7       	brne	.-26     	; 0xd1d4 <count_use_rtds()+0x14>
    d1ee:	80 2f       	mov	r24, r16
    d1f0:	0f 90       	pop	r0
    d1f2:	df 91       	pop	r29
    d1f4:	cf 91       	pop	r28
    d1f6:	1f 91       	pop	r17
    d1f8:	0f 91       	pop	r16
    d1fa:	08 95       	ret

0000d1fc <get_global_temp(unsigned char, char*, float*)>:
_Z15get_global_temphPcPf():
    d1fc:	8f 92       	push	r8
    d1fe:	9f 92       	push	r9
    d200:	af 92       	push	r10
    d202:	bf 92       	push	r11
    d204:	cf 92       	push	r12
    d206:	df 92       	push	r13
    d208:	ef 92       	push	r14
    d20a:	ff 92       	push	r15
    d20c:	0f 93       	push	r16
    d20e:	1f 93       	push	r17
    d210:	cf 93       	push	r28
    d212:	df 93       	push	r29
    d214:	cd b7       	in	r28, 0x3d	; 61
    d216:	de b7       	in	r29, 0x3e	; 62
    d218:	67 97       	sbiw	r28, 0x17	; 23
    d21a:	0f b6       	in	r0, 0x3f	; 63
    d21c:	f8 94       	cli
    d21e:	de bf       	out	0x3e, r29	; 62
    d220:	0f be       	out	0x3f, r0	; 63
    d222:	cd bf       	out	0x3d, r28	; 61
    d224:	e8 2e       	mov	r14, r24
    d226:	5b 01       	movw	r10, r22
    d228:	4a 01       	movw	r8, r20
    d22a:	63 e4       	ldi	r22, 0x43	; 67
    d22c:	79 e5       	ldi	r23, 0x59	; 89
    d22e:	c5 01       	movw	r24, r10
    d230:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    d234:	f4 01       	movw	r30, r8
    d236:	10 82       	st	Z, r1
    d238:	11 82       	std	Z+1, r1	; 0x01
    d23a:	12 82       	std	Z+2, r1	; 0x02
    d23c:	13 82       	std	Z+3, r1	; 0x03
    d23e:	d1 2c       	mov	r13, r1
    d240:	c1 2c       	mov	r12, r1
    d242:	00 e0       	ldi	r16, 0x00	; 0
    d244:	1e e1       	ldi	r17, 0x1E	; 30
    d246:	be 01       	movw	r22, r28
    d248:	6f 5f       	subi	r22, 0xFF	; 255
    d24a:	7f 4f       	sbci	r23, 0xFF	; 255
    d24c:	8c 2d       	mov	r24, r12
    d24e:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    d252:	81 30       	cpi	r24, 0x01	; 1
    d254:	f1 f5       	brne	.+124    	; 0xd2d2 <get_global_temp(unsigned char, char*, float*)+0xd6>
    d256:	89 81       	ldd	r24, Y+1	; 0x01
    d258:	81 30       	cpi	r24, 0x01	; 1
    d25a:	d9 f5       	brne	.+118    	; 0xd2d2 <get_global_temp(unsigned char, char*, float*)+0xd6>
    d25c:	e0 12       	cpse	r14, r16
    d25e:	38 c0       	rjmp	.+112    	; 0xd2d0 <get_global_temp(unsigned char, char*, float*)+0xd4>
    d260:	be 01       	movw	r22, r28
    d262:	63 5f       	subi	r22, 0xF3	; 243
    d264:	7f 4f       	sbci	r23, 0xFF	; 255
    d266:	c5 01       	movw	r24, r10
    d268:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
    d26c:	1c 9d       	mul	r17, r12
    d26e:	f0 01       	movw	r30, r0
    d270:	1d 9d       	mul	r17, r13
    d272:	f0 0d       	add	r31, r0
    d274:	11 24       	eor	r1, r1
    d276:	ee 55       	subi	r30, 0x5E	; 94
    d278:	fe 4e       	sbci	r31, 0xEE	; 238
    d27a:	f3 8c       	ldd	r15, Z+27	; 0x1b
    d27c:	81 e0       	ldi	r24, 0x01	; 1
    d27e:	f8 12       	cpse	r15, r24
    d280:	27 c0       	rjmp	.+78     	; 0xd2d0 <get_global_temp(unsigned char, char*, float*)+0xd4>
    d282:	65 81       	ldd	r22, Z+5	; 0x05
    d284:	76 81       	ldd	r23, Z+6	; 0x06
    d286:	07 2e       	mov	r0, r23
    d288:	00 0c       	add	r0, r0
    d28a:	88 0b       	sbc	r24, r24
    d28c:	99 0b       	sbc	r25, r25
    d28e:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
    d292:	20 e0       	ldi	r18, 0x00	; 0
    d294:	30 e0       	ldi	r19, 0x00	; 0
    d296:	4a e7       	ldi	r20, 0x7A	; 122
    d298:	54 e4       	ldi	r21, 0x44	; 68
    d29a:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
    d29e:	f4 01       	movw	r30, r8
    d2a0:	60 83       	st	Z, r22
    d2a2:	71 83       	std	Z+1, r23	; 0x01
    d2a4:	82 83       	std	Z+2, r24	; 0x02
    d2a6:	93 83       	std	Z+3, r25	; 0x03
    d2a8:	8f 2d       	mov	r24, r15
    d2aa:	67 96       	adiw	r28, 0x17	; 23
    d2ac:	0f b6       	in	r0, 0x3f	; 63
    d2ae:	f8 94       	cli
    d2b0:	de bf       	out	0x3e, r29	; 62
    d2b2:	0f be       	out	0x3f, r0	; 63
    d2b4:	cd bf       	out	0x3d, r28	; 61
    d2b6:	df 91       	pop	r29
    d2b8:	cf 91       	pop	r28
    d2ba:	1f 91       	pop	r17
    d2bc:	0f 91       	pop	r16
    d2be:	ff 90       	pop	r15
    d2c0:	ef 90       	pop	r14
    d2c2:	df 90       	pop	r13
    d2c4:	cf 90       	pop	r12
    d2c6:	bf 90       	pop	r11
    d2c8:	af 90       	pop	r10
    d2ca:	9f 90       	pop	r9
    d2cc:	8f 90       	pop	r8
    d2ce:	08 95       	ret
    d2d0:	0f 5f       	subi	r16, 0xFF	; 255
    d2d2:	ff ef       	ldi	r31, 0xFF	; 255
    d2d4:	cf 1a       	sub	r12, r31
    d2d6:	df 0a       	sbc	r13, r31
    d2d8:	86 e0       	ldi	r24, 0x06	; 6
    d2da:	c8 16       	cp	r12, r24
    d2dc:	d1 04       	cpc	r13, r1
    d2de:	09 f0       	breq	.+2      	; 0xd2e2 <get_global_temp(unsigned char, char*, float*)+0xe6>
    d2e0:	b2 cf       	rjmp	.-156    	; 0xd246 <get_global_temp(unsigned char, char*, float*)+0x4a>
    d2e2:	10 e0       	ldi	r17, 0x00	; 0
    d2e4:	be 01       	movw	r22, r28
    d2e6:	69 5e       	subi	r22, 0xE9	; 233
    d2e8:	7f 4f       	sbci	r23, 0xFF	; 255
    d2ea:	81 2f       	mov	r24, r17
    d2ec:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <remote_tds_get_active(unsigned char, unsigned char*)>
    d2f0:	ff 88       	ldd	r15, Y+23	; 0x17
    d2f2:	e1 e0       	ldi	r30, 0x01	; 1
    d2f4:	fe 12       	cpse	r15, r30
    d2f6:	17 c0       	rjmp	.+46     	; 0xd326 <get_global_temp(unsigned char, char*, float*)+0x12a>
    d2f8:	e0 12       	cpse	r14, r16
    d2fa:	14 c0       	rjmp	.+40     	; 0xd324 <get_global_temp(unsigned char, char*, float*)+0x128>
    d2fc:	a5 01       	movw	r20, r10
    d2fe:	be 01       	movw	r22, r28
    d300:	69 5e       	subi	r22, 0xE9	; 233
    d302:	7f 4f       	sbci	r23, 0xFF	; 255
    d304:	81 2f       	mov	r24, r17
    d306:	0e 94 ce 44 	call	0x899c	; 0x899c <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    d30a:	81 2f       	mov	r24, r17
    d30c:	0e 94 2a 48 	call	0x9054	; 0x9054 <remote_tds_get_last_update(unsigned char)>
    d310:	8a 3f       	cpi	r24, 0xFA	; 250
    d312:	40 f4       	brcc	.+16     	; 0xd324 <get_global_temp(unsigned char, char*, float*)+0x128>
    d314:	81 2f       	mov	r24, r17
    d316:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <remote_tds_get_data(unsigned char)>
    d31a:	bc 01       	movw	r22, r24
    d31c:	99 0f       	add	r25, r25
    d31e:	88 0b       	sbc	r24, r24
    d320:	99 0b       	sbc	r25, r25
    d322:	b5 cf       	rjmp	.-150    	; 0xd28e <get_global_temp(unsigned char, char*, float*)+0x92>
    d324:	0f 5f       	subi	r16, 0xFF	; 255
    d326:	1f 5f       	subi	r17, 0xFF	; 255
    d328:	1a 30       	cpi	r17, 0x0A	; 10
    d32a:	e1 f6       	brne	.-72     	; 0xd2e4 <get_global_temp(unsigned char, char*, float*)+0xe8>
    d32c:	f1 2c       	mov	r15, r1
    d32e:	bc cf       	rjmp	.-136    	; 0xd2a8 <get_global_temp(unsigned char, char*, float*)+0xac>

0000d330 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_temp_1jjjjhhPc():
    d330:	2f 92       	push	r2
    d332:	3f 92       	push	r3
    d334:	4f 92       	push	r4
    d336:	5f 92       	push	r5
    d338:	6f 92       	push	r6
    d33a:	7f 92       	push	r7
    d33c:	8f 92       	push	r8
    d33e:	9f 92       	push	r9
    d340:	af 92       	push	r10
    d342:	bf 92       	push	r11
    d344:	cf 92       	push	r12
    d346:	df 92       	push	r13
    d348:	ef 92       	push	r14
    d34a:	ff 92       	push	r15
    d34c:	0f 93       	push	r16
    d34e:	1f 93       	push	r17
    d350:	cf 93       	push	r28
    d352:	df 93       	push	r29
    d354:	cd b7       	in	r28, 0x3d	; 61
    d356:	de b7       	in	r29, 0x3e	; 62
    d358:	e8 97       	sbiw	r28, 0x38	; 56
    d35a:	0f b6       	in	r0, 0x3f	; 63
    d35c:	f8 94       	cli
    d35e:	de bf       	out	0x3e, r29	; 62
    d360:	0f be       	out	0x3f, r0	; 63
    d362:	cd bf       	out	0x3d, r28	; 61
    d364:	4c 01       	movw	r8, r24
    d366:	3b 01       	movw	r6, r22
    d368:	6a e1       	ldi	r22, 0x1A	; 26
    d36a:	7b e5       	ldi	r23, 0x5B	; 91
    d36c:	ce 01       	movw	r24, r28
    d36e:	01 96       	adiw	r24, 0x01	; 1
    d370:	5c 01       	movw	r10, r24
    d372:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    d376:	ae 01       	movw	r20, r28
    d378:	4b 5c       	subi	r20, 0xCB	; 203
    d37a:	5f 4f       	sbci	r21, 0xFF	; 255
    d37c:	be 01       	movw	r22, r28
    d37e:	6f 5d       	subi	r22, 0xDF	; 223
    d380:	7f 4f       	sbci	r23, 0xFF	; 255
    d382:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <default_show_temp>
    d386:	0e 94 fe 68 	call	0xd1fc	; 0xd1fc <get_global_temp(unsigned char, char*, float*)>
    d38a:	d8 2e       	mov	r13, r24
    d38c:	be 01       	movw	r22, r28
    d38e:	6f 5d       	subi	r22, 0xDF	; 223
    d390:	7f 4f       	sbci	r23, 0xFF	; 255
    d392:	c5 01       	movw	r24, r10
    d394:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    d398:	a3 01       	movw	r20, r6
    d39a:	4b 5f       	subi	r20, 0xFB	; 251
    d39c:	5f 4f       	sbci	r21, 0xFF	; 255
    d39e:	b4 01       	movw	r22, r8
    d3a0:	6b 5f       	subi	r22, 0xFB	; 251
    d3a2:	7f 4f       	sbci	r23, 0xFF	; 255
    d3a4:	c1 2c       	mov	r12, r1
    d3a6:	ee 24       	eor	r14, r14
    d3a8:	ea 94       	dec	r14
    d3aa:	fe 2c       	mov	r15, r14
    d3ac:	10 e0       	ldi	r17, 0x00	; 0
    d3ae:	00 e0       	ldi	r16, 0x00	; 0
    d3b0:	21 e0       	ldi	r18, 0x01	; 1
    d3b2:	c5 01       	movw	r24, r10
    d3b4:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d3b8:	23 01       	movw	r4, r6
    d3ba:	94 e1       	ldi	r25, 0x14	; 20
    d3bc:	49 0e       	add	r4, r25
    d3be:	51 1c       	adc	r5, r1
    d3c0:	14 01       	movw	r2, r8
    d3c2:	84 e0       	ldi	r24, 0x04	; 4
    d3c4:	28 0e       	add	r2, r24
    d3c6:	31 1c       	adc	r3, r1
    d3c8:	91 e0       	ldi	r25, 0x01	; 1
    d3ca:	d9 12       	cpse	r13, r25
    d3cc:	4e c0       	rjmp	.+156    	; 0xd46a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x13a>
    d3ce:	6d a9       	ldd	r22, Y+53	; 0x35
    d3d0:	7e a9       	ldd	r23, Y+54	; 0x36
    d3d2:	8f a9       	ldd	r24, Y+55	; 0x37
    d3d4:	98 ad       	ldd	r25, Y+56	; 0x38
    d3d6:	85 01       	movw	r16, r10
    d3d8:	21 e0       	ldi	r18, 0x01	; 1
    d3da:	44 e0       	ldi	r20, 0x04	; 4
    d3dc:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
    d3e0:	f5 01       	movw	r30, r10
    d3e2:	01 90       	ld	r0, Z+
    d3e4:	00 20       	and	r0, r0
    d3e6:	e9 f7       	brne	.-6      	; 0xd3e2 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb2>
    d3e8:	31 97       	sbiw	r30, 0x01	; 1
    d3ea:	ea 19       	sub	r30, r10
    d3ec:	fb 09       	sbc	r31, r11
    d3ee:	35 97       	sbiw	r30, 0x05	; 5
    d3f0:	28 f4       	brcc	.+10     	; 0xd3fc <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xcc>
    d3f2:	6d ef       	ldi	r22, 0xFD	; 253
    d3f4:	77 e0       	ldi	r23, 0x07	; 7
    d3f6:	c5 01       	movw	r24, r10
    d3f8:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
    d3fc:	c1 2c       	mov	r12, r1
    d3fe:	ee 24       	eor	r14, r14
    d400:	ea 94       	dec	r14
    d402:	fe 2c       	mov	r15, r14
    d404:	10 e0       	ldi	r17, 0x00	; 0
    d406:	00 e0       	ldi	r16, 0x00	; 0
    d408:	28 e0       	ldi	r18, 0x08	; 8
    d40a:	a2 01       	movw	r20, r4
    d40c:	b1 01       	movw	r22, r2
    d40e:	c5 01       	movw	r24, r10
    d410:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d414:	70 e0       	ldi	r23, 0x00	; 0
    d416:	60 e0       	ldi	r22, 0x00	; 0
    d418:	85 e1       	ldi	r24, 0x15	; 21
    d41a:	9c e0       	ldi	r25, 0x0C	; 12
    d41c:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    d420:	83 01       	movw	r16, r6
    d422:	0c 5a       	subi	r16, 0xAC	; 172
    d424:	1f 4f       	sbci	r17, 0xFF	; 255
    d426:	94 01       	movw	r18, r8
    d428:	2c 50       	subi	r18, 0x0C	; 12
    d42a:	3f 4f       	sbci	r19, 0xFF	; 255
    d42c:	a3 01       	movw	r20, r6
    d42e:	b4 01       	movw	r22, r8
    d430:	85 e1       	ldi	r24, 0x15	; 21
    d432:	9c e0       	ldi	r25, 0x0C	; 12
    d434:	0e 94 d5 96 	call	0x12daa	; 0x12daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    d438:	e8 96       	adiw	r28, 0x38	; 56
    d43a:	0f b6       	in	r0, 0x3f	; 63
    d43c:	f8 94       	cli
    d43e:	de bf       	out	0x3e, r29	; 62
    d440:	0f be       	out	0x3f, r0	; 63
    d442:	cd bf       	out	0x3d, r28	; 61
    d444:	df 91       	pop	r29
    d446:	cf 91       	pop	r28
    d448:	1f 91       	pop	r17
    d44a:	0f 91       	pop	r16
    d44c:	ff 90       	pop	r15
    d44e:	ef 90       	pop	r14
    d450:	df 90       	pop	r13
    d452:	cf 90       	pop	r12
    d454:	bf 90       	pop	r11
    d456:	af 90       	pop	r10
    d458:	9f 90       	pop	r9
    d45a:	8f 90       	pop	r8
    d45c:	7f 90       	pop	r7
    d45e:	6f 90       	pop	r6
    d460:	5f 90       	pop	r5
    d462:	4f 90       	pop	r4
    d464:	3f 90       	pop	r3
    d466:	2f 90       	pop	r2
    d468:	08 95       	ret
    d46a:	63 e4       	ldi	r22, 0x43	; 67
    d46c:	79 e5       	ldi	r23, 0x59	; 89
    d46e:	c5 01       	movw	r24, r10
    d470:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
    d474:	c1 2c       	mov	r12, r1
    d476:	ee 24       	eor	r14, r14
    d478:	ea 94       	dec	r14
    d47a:	fe 2c       	mov	r15, r14
    d47c:	00 e0       	ldi	r16, 0x00	; 0
    d47e:	18 ef       	ldi	r17, 0xF8	; 248
    d480:	c3 cf       	rjmp	.-122    	; 0xd408 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xd8>

0000d482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    d482:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    d484:	80 85       	ldd	r24, Z+8	; 0x08
    d486:	81 11       	cpse	r24, r1
    d488:	0a c0       	rjmp	.+20     	; 0xd49e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    d48a:	a2 81       	ldd	r26, Z+2	; 0x02
    d48c:	b3 81       	ldd	r27, Z+3	; 0x03
    d48e:	cd 01       	movw	r24, r26
    d490:	01 96       	adiw	r24, 0x01	; 1
    d492:	93 83       	std	Z+3, r25	; 0x03
    d494:	82 83       	std	Z+2, r24	; 0x02
    d496:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    d498:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    d49a:	81 e0       	ldi	r24, 0x01	; 1
    d49c:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    d49e:	87 81       	ldd	r24, Z+7	; 0x07
    d4a0:	08 95       	ret

0000d4a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    d4a2:	1f 93       	push	r17
    d4a4:	cf 93       	push	r28
    d4a6:	df 93       	push	r29
    d4a8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    d4aa:	ce 01       	movw	r24, r28
    d4ac:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d4b0:	8b 30       	cpi	r24, 0x0B	; 11
    d4b2:	3c f4       	brge	.+14     	; 0xd4c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    d4b4:	89 30       	cpi	r24, 0x09	; 9
    d4b6:	5c f4       	brge	.+22     	; 0xd4ce <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    d4b8:	88 23       	and	r24, r24
    d4ba:	e9 f0       	breq	.+58     	; 0xd4f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    d4bc:	90 e0       	ldi	r25, 0x00	; 0
    d4be:	80 e0       	ldi	r24, 0x00	; 0
    d4c0:	1c c0       	rjmp	.+56     	; 0xd4fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    d4c2:	80 32       	cpi	r24, 0x20	; 32
    d4c4:	21 f0       	breq	.+8      	; 0xd4ce <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    d4c6:	8f 32       	cpi	r24, 0x2F	; 47
    d4c8:	21 f0       	breq	.+8      	; 0xd4d2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    d4ca:	8d 30       	cpi	r24, 0x0D	; 13
    d4cc:	b9 f7       	brne	.-18     	; 0xd4bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d4ce:	18 86       	std	Y+8, r1	; 0x08
    d4d0:	ec cf       	rjmp	.-40     	; 0xd4aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    d4d2:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    d4d4:	ce 01       	movw	r24, r28
    d4d6:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d4da:	8a 32       	cpi	r24, 0x2A	; 42
    d4dc:	29 f0       	breq	.+10     	; 0xd4e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    d4de:	8f 32       	cpi	r24, 0x2F	; 47
    d4e0:	d1 f0       	breq	.+52     	; 0xd516 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    d4e2:	82 e0       	ldi	r24, 0x02	; 2
    d4e4:	90 e0       	ldi	r25, 0x00	; 0
    d4e6:	09 c0       	rjmp	.+18     	; 0xd4fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d4e8:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    d4ea:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    d4ec:	ce 01       	movw	r24, r28
    d4ee:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    d4f2:	81 11       	cpse	r24, r1
    d4f4:	06 c0       	rjmp	.+12     	; 0xd502 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    d4f6:	81 e0       	ldi	r24, 0x01	; 1
    d4f8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    d4fa:	df 91       	pop	r29
    d4fc:	cf 91       	pop	r28
    d4fe:	1f 91       	pop	r17
    d500:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    d502:	8f 32       	cpi	r24, 0x2F	; 47
    d504:	11 f4       	brne	.+4      	; 0xd50a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303 (discriminator 1)
    d506:	11 11       	cpse	r17, r1
    d508:	e2 cf       	rjmp	.-60     	; 0xd4ce <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    d50a:	11 e0       	ldi	r17, 0x01	; 1
    d50c:	8a 32       	cpi	r24, 0x2A	; 42
    d50e:	09 f0       	breq	.+2      	; 0xd512 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    d510:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d512:	18 86       	std	Y+8, r1	; 0x08
    d514:	eb cf       	rjmp	.-42     	; 0xd4ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    d516:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    d518:	ce 01       	movw	r24, r28
    d51a:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    d51e:	88 23       	and	r24, r24
    d520:	51 f3       	breq	.-44     	; 0xd4f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    d522:	8a 30       	cpi	r24, 0x0A	; 10
    d524:	c1 f7       	brne	.-16     	; 0xd516 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    d526:	c1 cf       	rjmp	.-126    	; 0xd4aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

0000d528 <float ArduinoJson::Internals::parseFloat<float>(char const*)>:
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:15

namespace ArduinoJson {
namespace Internals {

template <typename T>
inline T parseFloat(const char* s) {
    d528:	ff 92       	push	r15
    d52a:	0f 93       	push	r16
    d52c:	1f 93       	push	r17
    d52e:	cf 93       	push	r28
    d530:	df 93       	push	r29
    d532:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:20
  typedef FloatTraits<T> traits;
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL
    d534:	89 2b       	or	r24, r25
    d536:	09 f4       	brne	.+2      	; 0xd53a <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x12>
    d538:	8b c0       	rjmp	.+278    	; 0xd650 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x128>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23

  bool negative_result = false;
  switch (*s) {
    d53a:	88 81       	ld	r24, Y
    d53c:	8b 32       	cpi	r24, 0x2B	; 43
    d53e:	91 f1       	breq	.+100    	; 0xd5a4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x7c>
    d540:	8d 32       	cpi	r24, 0x2D	; 45
    d542:	89 f5       	brne	.+98     	; 0xd5a6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x7e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    d544:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    d546:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    d548:	88 81       	ld	r24, Y
    d54a:	84 37       	cpi	r24, 0x74	; 116
    d54c:	09 f4       	brne	.+2      	; 0xd550 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x28>
    d54e:	db c0       	rjmp	.+438    	; 0xd706 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34 (discriminator 2)
  if (*s == 'n' || *s == 'N') return traits::nan();
    d550:	8f 7d       	andi	r24, 0xDF	; 223
    d552:	8e 34       	cpi	r24, 0x4E	; 78
    d554:	09 f4       	brne	.+2      	; 0xd558 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x30>
    d556:	dc c0       	rjmp	.+440    	; 0xd710 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1e8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35 (discriminator 1)
  if (*s == 'i' || *s == 'I')
    d558:	89 34       	cpi	r24, 0x49	; 73
    d55a:	09 f4       	brne	.+2      	; 0xd55e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x36>
    d55c:	84 c0       	rjmp	.+264    	; 0xd666 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    d55e:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    d560:	20 e0       	ldi	r18, 0x00	; 0
    d562:	30 e0       	ldi	r19, 0x00	; 0
    d564:	a9 01       	movw	r20, r18
    d566:	fe 01       	movw	r30, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    d568:	09 91       	ld	r16, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    d56a:	80 ed       	ldi	r24, 0xD0	; 208
    d56c:	80 0f       	add	r24, r16
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    d56e:	8a 30       	cpi	r24, 0x0A	; 10
    d570:	f0 f4       	brcc	.+60     	; 0xd5ae <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x86>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    d572:	2c 3c       	cpi	r18, 0xCC	; 204
    d574:	8c ec       	ldi	r24, 0xCC	; 204
    d576:	38 07       	cpc	r19, r24
    d578:	8c e0       	ldi	r24, 0x0C	; 12
    d57a:	48 07       	cpc	r20, r24
    d57c:	51 05       	cpc	r21, r1
    d57e:	ac f4       	brge	.+42     	; 0xd5aa <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x82>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    d580:	aa e0       	ldi	r26, 0x0A	; 10
    d582:	b0 e0       	ldi	r27, 0x00	; 0
    d584:	0e 94 86 de 	call	0x1bd0c	; 0x1bd0c <__muluhisi3>
    d588:	20 2f       	mov	r18, r16
    d58a:	00 0f       	add	r16, r16
    d58c:	33 0b       	sbc	r19, r19
    d58e:	20 53       	subi	r18, 0x30	; 48
    d590:	31 09       	sbc	r19, r1
    d592:	03 2e       	mov	r0, r19
    d594:	00 0c       	add	r0, r0
    d596:	44 0b       	sbc	r20, r20
    d598:	55 0b       	sbc	r21, r21
    d59a:	26 0f       	add	r18, r22
    d59c:	37 1f       	adc	r19, r23
    d59e:	48 1f       	adc	r20, r24
    d5a0:	59 1f       	adc	r21, r25
    d5a2:	e1 cf       	rjmp	.-62     	; 0xd566 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    d5a4:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    d5a6:	10 e0       	ldi	r17, 0x00	; 0
    d5a8:	cf cf       	rjmp	.-98     	; 0xd548 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x20>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    d5aa:	f3 94       	inc	r15
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    d5ac:	dc cf       	rjmp	.-72     	; 0xd566 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    else
      exponent_offset++;
    s++;
  }

  if (*s == '.') {
    d5ae:	0e 32       	cpi	r16, 0x2E	; 46
    d5b0:	11 f5       	brne	.+68     	; 0xd5f6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    d5b2:	ef 01       	movw	r28, r30
    d5b4:	21 96       	adiw	r28, 0x01	; 1
    d5b6:	fe 01       	movw	r30, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    d5b8:	09 91       	ld	r16, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    d5ba:	80 ed       	ldi	r24, 0xD0	; 208
    d5bc:	80 0f       	add	r24, r16
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    d5be:	8a 30       	cpi	r24, 0x0A	; 10
    d5c0:	d0 f4       	brcc	.+52     	; 0xd5f6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    d5c2:	2c 3c       	cpi	r18, 0xCC	; 204
    d5c4:	8c ec       	ldi	r24, 0xCC	; 204
    d5c6:	38 07       	cpc	r19, r24
    d5c8:	8c e0       	ldi	r24, 0x0C	; 12
    d5ca:	48 07       	cpc	r20, r24
    d5cc:	51 05       	cpc	r21, r1
    d5ce:	9c f7       	brge	.-26     	; 0xd5b6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x8e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    d5d0:	aa e0       	ldi	r26, 0x0A	; 10
    d5d2:	b0 e0       	ldi	r27, 0x00	; 0
    d5d4:	0e 94 86 de 	call	0x1bd0c	; 0x1bd0c <__muluhisi3>
    d5d8:	20 2f       	mov	r18, r16
    d5da:	00 0f       	add	r16, r16
    d5dc:	33 0b       	sbc	r19, r19
    d5de:	20 53       	subi	r18, 0x30	; 48
    d5e0:	31 09       	sbc	r19, r1
    d5e2:	03 2e       	mov	r0, r19
    d5e4:	00 0c       	add	r0, r0
    d5e6:	44 0b       	sbc	r20, r20
    d5e8:	55 0b       	sbc	r21, r21
    d5ea:	26 0f       	add	r18, r22
    d5ec:	37 1f       	adc	r19, r23
    d5ee:	48 1f       	adc	r20, r24
    d5f0:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    d5f2:	fa 94       	dec	r15
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
    d5f4:	e0 cf       	rjmp	.-64     	; 0xd5b6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x8e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    d5f6:	80 81       	ld	r24, Z
    d5f8:	8f 7d       	andi	r24, 0xDF	; 223
    d5fa:	cf 2d       	mov	r28, r15
    d5fc:	ff 0c       	add	r15, r15
    d5fe:	dd 0b       	sbc	r29, r29
    d600:	85 34       	cpi	r24, 0x45	; 69
    d602:	09 f0       	breq	.+2      	; 0xd606 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xde>
    d604:	65 c0       	rjmp	.+202    	; 0xd6d0 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    d606:	81 81       	ldd	r24, Z+1	; 0x01
    d608:	8d 32       	cpi	r24, 0x2D	; 45
    d60a:	31 f5       	brne	.+76     	; 0xd658 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x130>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    d60c:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    d60e:	71 e0       	ldi	r23, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    d610:	90 e0       	ldi	r25, 0x00	; 0
    d612:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    d614:	0a e0       	ldi	r16, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    d616:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    d618:	a0 ed       	ldi	r26, 0xD0	; 208
    d61a:	a6 0f       	add	r26, r22
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    d61c:	aa 30       	cpi	r26, 0x0A	; 10
    d61e:	70 f5       	brcc	.+92     	; 0xd67c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x154>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    d620:	08 9f       	mul	r16, r24
    d622:	d0 01       	movw	r26, r0
    d624:	09 9f       	mul	r16, r25
    d626:	b0 0d       	add	r27, r0
    d628:	11 24       	eor	r1, r1
    d62a:	86 2f       	mov	r24, r22
    d62c:	66 0f       	add	r22, r22
    d62e:	99 0b       	sbc	r25, r25
    d630:	c0 97       	sbiw	r24, 0x30	; 48
    d632:	8a 0f       	add	r24, r26
    d634:	9b 1f       	adc	r25, r27
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    d636:	dc 01       	movw	r26, r24
    d638:	ac 0f       	add	r26, r28
    d63a:	bd 1f       	adc	r27, r29
    d63c:	97 97       	sbiw	r26, 0x27	; 39
    d63e:	5c f3       	brlt	.-42     	; 0xd616 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xee>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    d640:	77 23       	and	r23, r23
    d642:	89 f0       	breq	.+34     	; 0xd666 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    d644:	60 e0       	ldi	r22, 0x00	; 0
    d646:	70 e0       	ldi	r23, 0x00	; 0
    d648:	80 e0       	ldi	r24, 0x00	; 0
    d64a:	90 e8       	ldi	r25, 0x80	; 128
    d64c:	11 11       	cpse	r17, r1
    d64e:	3a c0       	rjmp	.+116    	; 0xd6c4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
    d650:	60 e0       	ldi	r22, 0x00	; 0
    d652:	70 e0       	ldi	r23, 0x00	; 0
    d654:	cb 01       	movw	r24, r22
    d656:	36 c0       	rjmp	.+108    	; 0xd6c4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    d658:	8b 32       	cpi	r24, 0x2B	; 43
    d65a:	19 f0       	breq	.+6      	; 0xd662 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    d65c:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    d65e:	70 e0       	ldi	r23, 0x00	; 0
    d660:	d7 cf       	rjmp	.-82     	; 0xd610 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xe8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    d662:	32 96       	adiw	r30, 0x02	; 2
    d664:	fc cf       	rjmp	.-8      	; 0xd65e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x136>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    d666:	60 e0       	ldi	r22, 0x00	; 0
    d668:	70 e0       	ldi	r23, 0x00	; 0
    d66a:	80 e8       	ldi	r24, 0x80	; 128
    d66c:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    d66e:	11 11       	cpse	r17, r1
    d670:	29 c0       	rjmp	.+82     	; 0xd6c4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    d672:	60 e0       	ldi	r22, 0x00	; 0
    d674:	70 e0       	ldi	r23, 0x00	; 0
    d676:	80 e8       	ldi	r24, 0x80	; 128
    d678:	9f e7       	ldi	r25, 0x7F	; 127
    d67a:	24 c0       	rjmp	.+72     	; 0xd6c4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    d67c:	77 23       	and	r23, r23
    d67e:	19 f0       	breq	.+6      	; 0xd686 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x15e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81 (discriminator 1)
    d680:	91 95       	neg	r25
    d682:	81 95       	neg	r24
    d684:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    d686:	c8 0f       	add	r28, r24
    d688:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    d68a:	ca 01       	movw	r24, r20
    d68c:	b9 01       	movw	r22, r18
    d68e:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    d692:	1c 16       	cp	r1, r28
    d694:	1d 06       	cpc	r1, r29
    d696:	fc f4       	brge	.+62     	; 0xd6d6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    d698:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    d69a:	c0 ff       	sbrs	r28, 0
    d69c:	0c c0       	rjmp	.+24     	; 0xd6b6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x18e>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    d69e:	24 e0       	ldi	r18, 0x04	; 4
    d6a0:	02 9f       	mul	r16, r18
    d6a2:	f0 01       	movw	r30, r0
    d6a4:	11 24       	eor	r1, r1
    d6a6:	e2 5e       	subi	r30, 0xE2	; 226
    d6a8:	fd 4f       	sbci	r31, 0xFD	; 253
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    d6aa:	20 81       	ld	r18, Z
    d6ac:	31 81       	ldd	r19, Z+1	; 0x01
    d6ae:	42 81       	ldd	r20, Z+2	; 0x02
    d6b0:	53 81       	ldd	r21, Z+3	; 0x03
    d6b2:	0e 94 7d dd 	call	0x1bafa	; 0x1bafa <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    d6b6:	d5 95       	asr	r29
    d6b8:	c7 95       	ror	r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    d6ba:	0f 5f       	subi	r16, 0xFF	; 255
    d6bc:	20 97       	sbiw	r28, 0x00	; 0
    d6be:	69 f7       	brne	.-38     	; 0xd69a <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x172>
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    d6c0:	11 11       	cpse	r17, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87 (discriminator 1)
    d6c2:	90 58       	subi	r25, 0x80	; 128
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:88
}
    d6c4:	df 91       	pop	r29
    d6c6:	cf 91       	pop	r28
    d6c8:	1f 91       	pop	r17
    d6ca:	0f 91       	pop	r16
    d6cc:	ff 90       	pop	r15
    d6ce:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    d6d0:	90 e0       	ldi	r25, 0x00	; 0
    d6d2:	80 e0       	ldi	r24, 0x00	; 0
    d6d4:	d8 cf       	rjmp	.-80     	; 0xd686 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x15e>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    d6d6:	d1 95       	neg	r29
    d6d8:	c1 95       	neg	r28
    d6da:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    d6dc:	00 e0       	ldi	r16, 0x00	; 0
    d6de:	20 97       	sbiw	r28, 0x00	; 0
    d6e0:	79 f3       	breq	.-34     	; 0xd6c0 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x198>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    d6e2:	c0 ff       	sbrs	r28, 0
    d6e4:	0c c0       	rjmp	.+24     	; 0xd6fe <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1d6>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    d6e6:	24 e0       	ldi	r18, 0x04	; 4
    d6e8:	02 9f       	mul	r16, r18
    d6ea:	f0 01       	movw	r30, r0
    d6ec:	11 24       	eor	r1, r1
    d6ee:	ea 5f       	subi	r30, 0xFA	; 250
    d6f0:	fd 4f       	sbci	r31, 0xFD	; 253
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    d6f2:	20 81       	ld	r18, Z
    d6f4:	31 81       	ldd	r19, Z+1	; 0x01
    d6f6:	42 81       	ldd	r20, Z+2	; 0x02
    d6f8:	53 81       	ldd	r21, Z+3	; 0x03
    d6fa:	0e 94 7d dd 	call	0x1bafa	; 0x1bafa <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    d6fe:	d5 95       	asr	r29
    d700:	c7 95       	ror	r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    d702:	0f 5f       	subi	r16, 0xFF	; 255
    d704:	ec cf       	rjmp	.-40     	; 0xd6de <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1b6>
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    d706:	60 e0       	ldi	r22, 0x00	; 0
    d708:	70 e0       	ldi	r23, 0x00	; 0
    d70a:	80 e8       	ldi	r24, 0x80	; 128
    d70c:	9f e3       	ldi	r25, 0x3F	; 63
    d70e:	da cf       	rjmp	.-76     	; 0xd6c4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    d710:	60 e0       	ldi	r22, 0x00	; 0
    d712:	70 e0       	ldi	r23, 0x00	; 0
    d714:	80 ec       	ldi	r24, 0xC0	; 192
    d716:	9f e7       	ldi	r25, 0x7F	; 127
    d718:	d5 cf       	rjmp	.-86     	; 0xd6c4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>

0000d71a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    d71a:	df 92       	push	r13
    d71c:	ef 92       	push	r14
    d71e:	ff 92       	push	r15
    d720:	0f 93       	push	r16
    d722:	1f 93       	push	r17
    d724:	cf 93       	push	r28
    d726:	df 93       	push	r29
    d728:	ec 01       	movw	r28, r24
    d72a:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC4EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    d72c:	0c 81       	ldd	r16, Y+4	; 0x04
    d72e:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    d730:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d734:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d736:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    d738:	ce 01       	movw	r24, r28
    d73a:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d73e:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    d740:	d8 16       	cp	r13, r24
    d742:	89 f1       	breq	.+98     	; 0xd7a6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    d744:	81 11       	cpse	r24, r1
    d746:	0a c0       	rjmp	.+20     	; 0xd75c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    d748:	81 e0       	ldi	r24, 0x01	; 1
    d74a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    d74c:	df 91       	pop	r29
    d74e:	cf 91       	pop	r28
    d750:	1f 91       	pop	r17
    d752:	0f 91       	pop	r16
    d754:	ff 90       	pop	r15
    d756:	ef 90       	pop	r14
    d758:	df 90       	pop	r13
    d75a:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    d75c:	8c 35       	cpi	r24, 0x5C	; 92
    d75e:	d1 f4       	brne	.+52     	; 0xd794 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    d760:	ce 01       	movw	r24, r28
    d762:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    d766:	88 23       	and	r24, r24
    d768:	79 f3       	breq	.-34     	; 0xd748 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    d76a:	85 37       	cpi	r24, 0x75	; 117
    d76c:	19 f4       	brne	.+6      	; 0xd774 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    d76e:	84 e0       	ldi	r24, 0x04	; 4
    d770:	90 e0       	ldi	r25, 0x00	; 0
    d772:	ec cf       	rjmp	.-40     	; 0xd74c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
_ZN11ArduinoJson9Internals14EscapeSequence12unescapeCharEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    d774:	e8 ea       	ldi	r30, 0xA8	; 168
    d776:	f5 e0       	ldi	r31, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    d778:	90 81       	ld	r25, Z
    d77a:	99 23       	and	r25, r25
    d77c:	51 f0       	breq	.+20     	; 0xd792 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    d77e:	89 13       	cpse	r24, r25
    d780:	06 c0       	rjmp	.+12     	; 0xd78e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    d782:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    d784:	81 11       	cpse	r24, r1
    d786:	05 c0       	rjmp	.+10     	; 0xd792 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    d788:	82 e0       	ldi	r24, 0x02	; 2
    d78a:	90 e0       	ldi	r25, 0x00	; 0
    d78c:	df cf       	rjmp	.-66     	; 0xd74c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
_ZN11ArduinoJson9Internals14EscapeSequence12unescapeCharEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    d78e:	32 96       	adiw	r30, 0x02	; 2
    d790:	f3 cf       	rjmp	.-26     	; 0xd778 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d792:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    d794:	ec 81       	ldd	r30, Y+4	; 0x04
    d796:	fd 81       	ldd	r31, Y+5	; 0x05
    d798:	9f 01       	movw	r18, r30
    d79a:	2f 5f       	subi	r18, 0xFF	; 255
    d79c:	3f 4f       	sbci	r19, 0xFF	; 255
    d79e:	3d 83       	std	Y+5, r19	; 0x05
    d7a0:	2c 83       	std	Y+4, r18	; 0x04
    d7a2:	80 83       	st	Z, r24
    d7a4:	c9 cf       	rjmp	.-110    	; 0xd738 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
_ZNK11ArduinoJson9Internals11StringMoverIcE6String5c_strEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    d7a6:	ec 81       	ldd	r30, Y+4	; 0x04
    d7a8:	fd 81       	ldd	r31, Y+5	; 0x05
    d7aa:	cf 01       	movw	r24, r30
    d7ac:	01 96       	adiw	r24, 0x01	; 1
    d7ae:	9d 83       	std	Y+5, r25	; 0x05
    d7b0:	8c 83       	std	Y+4, r24	; 0x04
    d7b2:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    d7b4:	f7 01       	movw	r30, r14
    d7b6:	11 83       	std	Z+1, r17	; 0x01
    d7b8:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    d7ba:	83 e0       	ldi	r24, 0x03	; 3
    d7bc:	90 e0       	ldi	r25, 0x00	; 0
    d7be:	01 2b       	or	r16, r17
    d7c0:	29 f2       	breq	.-118    	; 0xd74c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    d7c2:	90 e0       	ldi	r25, 0x00	; 0
    d7c4:	80 e0       	ldi	r24, 0x00	; 0
    d7c6:	c2 cf       	rjmp	.-124    	; 0xd74c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

0000d7c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    d7c8:	80 33       	cpi	r24, 0x30	; 48
    d7ca:	9c f0       	brlt	.+38     	; 0xd7f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    d7cc:	8a 33       	cpi	r24, 0x3A	; 58
    d7ce:	24 f0       	brlt	.+8      	; 0xd7d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    d7d0:	8f 35       	cpi	r24, 0x5F	; 95
    d7d2:	24 f0       	brlt	.+8      	; 0xd7dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    d7d4:	8b 37       	cpi	r24, 0x7B	; 123
    d7d6:	24 f4       	brge	.+8      	; 0xd7e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    d7d8:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    d7da:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    d7dc:	81 34       	cpi	r24, 0x41	; 65
    d7de:	4c f0       	brlt	.+18     	; 0xd7f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    d7e0:	8b 35       	cpi	r24, 0x5B	; 91
    d7e2:	d4 f3       	brlt	.-12     	; 0xd7d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    d7e4:	93 ed       	ldi	r25, 0xD3	; 211
    d7e6:	98 0f       	add	r25, r24
    d7e8:	81 e0       	ldi	r24, 0x01	; 1
    d7ea:	92 30       	cpi	r25, 0x02	; 2
    d7ec:	b0 f3       	brcs	.-20     	; 0xd7da <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    d7ee:	80 e0       	ldi	r24, 0x00	; 0
    d7f0:	08 95       	ret
    d7f2:	8b 32       	cpi	r24, 0x2B	; 43
    d7f4:	b9 f7       	brne	.-18     	; 0xd7e4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    d7f6:	f0 cf       	rjmp	.-32     	; 0xd7d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

0000d7f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:236
    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    d7f8:	8f 92       	push	r8
    d7fa:	9f 92       	push	r9
    d7fc:	af 92       	push	r10
    d7fe:	bf 92       	push	r11
    d800:	cf 92       	push	r12
    d802:	df 92       	push	r13
    d804:	ef 92       	push	r14
    d806:	ff 92       	push	r15
    d808:	0f 93       	push	r16
    d80a:	1f 93       	push	r17
    d80c:	cf 93       	push	r28
    d80e:	df 93       	push	r29
    d810:	cd b7       	in	r28, 0x3d	; 61
    d812:	de b7       	in	r29, 0x3e	; 62
    d814:	c0 54       	subi	r28, 0x40	; 64
    d816:	d1 09       	sbc	r29, r1
    d818:	0f b6       	in	r0, 0x3f	; 63
    d81a:	f8 94       	cli
    d81c:	de bf       	out	0x3e, r29	; 62
    d81e:	0f be       	out	0x3f, r0	; 63
    d820:	cd bf       	out	0x3d, r28	; 61
    d822:	5c 01       	movw	r10, r24
    d824:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    d826:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d82a:	c8 2e       	mov	r12, r24
    d82c:	ce 01       	movw	r24, r28
    d82e:	01 96       	adiw	r24, 0x01	; 1
    d830:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    d832:	d1 2c       	mov	r13, r1
    d834:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    d836:	8c 2d       	mov	r24, r12
    d838:	0e 94 e4 6b 	call	0xd7c8	; 0xd7c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    d83c:	88 23       	and	r24, r24
    d83e:	71 f0       	breq	.+28     	; 0xd85c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x64>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241 (discriminator 1)
    d840:	9f e3       	ldi	r25, 0x3F	; 63
    d842:	d9 16       	cp	r13, r25
    d844:	59 f0       	breq	.+22     	; 0xd85c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x64>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d846:	f5 01       	movw	r30, r10
    d848:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    d84a:	d3 94       	inc	r13
    d84c:	f4 01       	movw	r30, r8
    d84e:	c1 92       	st	Z+, r12
    d850:	4f 01       	movw	r8, r30
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    d852:	c5 01       	movw	r24, r10
    d854:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d858:	c8 2e       	mov	r12, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241
  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    d85a:	ed cf       	rjmp	.-38     	; 0xd836 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    d85c:	f7 01       	movw	r30, r14
    d85e:	ed 0d       	add	r30, r13
    d860:	f1 1d       	adc	r31, r1
    d862:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    d864:	89 81       	ldd	r24, Y+1	; 0x01
    d866:	88 23       	and	r24, r24
    d868:	09 f4       	brne	.+2      	; 0xd86c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x74>
    d86a:	56 c0       	rjmp	.+172    	; 0xd918 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x120>
_ZN11ArduinoJson9Internals6issignEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    d86c:	8d 32       	cpi	r24, 0x2D	; 45
    d86e:	19 f0       	breq	.+6      	; 0xd876 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x7e>
    d870:	f7 01       	movw	r30, r14
    d872:	8b 32       	cpi	r24, 0x2B	; 43
    d874:	11 f4       	brne	.+4      	; 0xd87a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x82>
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    d876:	fe 01       	movw	r30, r28
    d878:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
  while (isdigit(*s)) s++;
    d87a:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    d87c:	20 ed       	ldi	r18, 0xD0	; 208
    d87e:	29 0f       	add	r18, r25
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    d880:	2a 30       	cpi	r18, 0x0A	; 10
    d882:	d8 f3       	brcs	.-10     	; 0xd87a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x82>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    d884:	91 11       	cpse	r25, r1
    d886:	48 c0       	rjmp	.+144    	; 0xd918 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x120>
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    d888:	84 37       	cpi	r24, 0x74	; 116
    d88a:	09 f4       	brne	.+2      	; 0xd88e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x96>
    d88c:	a4 c0       	rjmp	.+328    	; 0xd9d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    d88e:	8b 32       	cpi	r24, 0x2B	; 43
    d890:	51 f0       	breq	.+20     	; 0xd8a6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    d892:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    d894:	8d 32       	cpi	r24, 0x2D	; 45
    d896:	61 f4       	brne	.+24     	; 0xd8b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xb8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
    case '-':
      negative_result = true;
    d898:	dd 24       	eor	r13, r13
    d89a:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
      s++;
    d89c:	7e 01       	movw	r14, r28
    d89e:	82 e0       	ldi	r24, 0x02	; 2
    d8a0:	e8 0e       	add	r14, r24
    d8a2:	f1 1c       	adc	r15, r1
    d8a4:	05 c0       	rjmp	.+10     	; 0xd8b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xb8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    d8a6:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    d8a8:	7e 01       	movw	r14, r28
    d8aa:	f2 e0       	ldi	r31, 0x02	; 2
    d8ac:	ef 0e       	add	r14, r31
    d8ae:	f1 1c       	adc	r15, r1
    d8b0:	f7 01       	movw	r30, r14
    d8b2:	20 e0       	ldi	r18, 0x00	; 0
    d8b4:	30 e0       	ldi	r19, 0x00	; 0
    d8b6:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
      break;
  }

  while (isdigit(*s)) {
    d8b8:	f1 90       	ld	r15, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    d8ba:	80 ed       	ldi	r24, 0xD0	; 208
    d8bc:	8f 0d       	add	r24, r15
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    d8be:	8a 30       	cpi	r24, 0x0A	; 10
    d8c0:	90 f4       	brcc	.+36     	; 0xd8e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xee>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    d8c2:	aa e0       	ldi	r26, 0x0A	; 10
    d8c4:	b0 e0       	ldi	r27, 0x00	; 0
    d8c6:	0e 94 86 de 	call	0x1bd0c	; 0x1bd0c <__muluhisi3>
    d8ca:	2f 2d       	mov	r18, r15
    d8cc:	ff 0c       	add	r15, r15
    d8ce:	33 0b       	sbc	r19, r19
    d8d0:	20 53       	subi	r18, 0x30	; 48
    d8d2:	31 09       	sbc	r19, r1
    d8d4:	03 2e       	mov	r0, r19
    d8d6:	00 0c       	add	r0, r0
    d8d8:	44 0b       	sbc	r20, r20
    d8da:	55 0b       	sbc	r21, r21
    d8dc:	26 0f       	add	r18, r22
    d8de:	37 1f       	adc	r19, r23
    d8e0:	48 1f       	adc	r20, r24
    d8e2:	59 1f       	adc	r21, r25
    d8e4:	e9 cf       	rjmp	.-46     	; 0xd8b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xc0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    d8e6:	dd 20       	and	r13, r13
    d8e8:	09 f4       	brne	.+2      	; 0xd8ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xf4>
    d8ea:	79 c0       	rjmp	.+242    	; 0xd9de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1e6>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    d8ec:	01 15       	cp	r16, r1
    d8ee:	11 05       	cpc	r17, r1
    d8f0:	81 f0       	breq	.+32     	; 0xd912 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    d8f2:	87 e0       	ldi	r24, 0x07	; 7
    d8f4:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    d8f6:	21 15       	cp	r18, r1
    d8f8:	31 05       	cpc	r19, r1
    d8fa:	41 05       	cpc	r20, r1
    d8fc:	51 05       	cpc	r21, r1
    d8fe:	11 f4       	brne	.+4      	; 0xd904 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x10c>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    d900:	86 e0       	ldi	r24, 0x06	; 6
    d902:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    d904:	f8 01       	movw	r30, r16
    d906:	91 83       	std	Z+1, r25	; 0x01
    d908:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    d90a:	22 83       	std	Z+2, r18	; 0x02
    d90c:	33 83       	std	Z+3, r19	; 0x03
    d90e:	44 83       	std	Z+4, r20	; 0x04
    d910:	55 83       	std	Z+5, r21	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    d912:	90 e0       	ldi	r25, 0x00	; 0
    d914:	80 e0       	ldi	r24, 0x00	; 0
    d916:	4b c0       	rjmp	.+150    	; 0xd9ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1b6>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
    }
    buffer[n] = 0;

    if (isInteger(buffer)) {
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    d918:	c7 01       	movw	r24, r14
    d91a:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <ArduinoJson::Internals::isFloat(char const*)>
    d91e:	88 23       	and	r24, r24
    d920:	81 f0       	breq	.+32     	; 0xd942 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x14a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:251
      result.set(parseFloat<JsonFloat>(buffer));
    d922:	c7 01       	movw	r24, r14
    d924:	0e 94 94 6a 	call	0xd528	; 0xd528 <float ArduinoJson::Internals::parseFloat<float>(char const*)>
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    d928:	01 15       	cp	r16, r1
    d92a:	11 05       	cpc	r17, r1
    d92c:	91 f3       	breq	.-28     	; 0xd912 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    d92e:	2a e0       	ldi	r18, 0x0A	; 10
    d930:	30 e0       	ldi	r19, 0x00	; 0
    d932:	f8 01       	movw	r30, r16
    d934:	31 83       	std	Z+1, r19	; 0x01
    d936:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    d938:	62 83       	std	Z+2, r22	; 0x02
    d93a:	73 83       	std	Z+3, r23	; 0x03
    d93c:	84 83       	std	Z+4, r24	; 0x04
    d93e:	95 83       	std	Z+5, r25	; 0x05
    d940:	e8 cf       	rjmp	.-48     	; 0xd912 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
    } else if (!strcmp(buffer, "true")) {
    d942:	63 eb       	ldi	r22, 0xB3	; 179
    d944:	75 e0       	ldi	r23, 0x05	; 5
    d946:	c7 01       	movw	r24, r14
    d948:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    d94c:	89 2b       	or	r24, r25
    d94e:	89 f4       	brne	.+34     	; 0xd972 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x17a>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    d950:	01 15       	cp	r16, r1
    d952:	11 05       	cpc	r17, r1
    d954:	f1 f2       	breq	.-68     	; 0xd912 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    d956:	85 e0       	ldi	r24, 0x05	; 5
    d958:	90 e0       	ldi	r25, 0x00	; 0
    d95a:	f8 01       	movw	r30, r16
    d95c:	91 83       	std	Z+1, r25	; 0x01
    d95e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    d960:	81 e0       	ldi	r24, 0x01	; 1
    d962:	90 e0       	ldi	r25, 0x00	; 0
    d964:	a0 e0       	ldi	r26, 0x00	; 0
    d966:	b0 e0       	ldi	r27, 0x00	; 0
    d968:	82 83       	std	Z+2, r24	; 0x02
    d96a:	93 83       	std	Z+3, r25	; 0x03
    d96c:	a4 83       	std	Z+4, r26	; 0x04
    d96e:	b5 83       	std	Z+5, r27	; 0x05
    d970:	d0 cf       	rjmp	.-96     	; 0xd912 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    d972:	68 eb       	ldi	r22, 0xB8	; 184
    d974:	75 e0       	ldi	r23, 0x05	; 5
    d976:	c7 01       	movw	r24, r14
    d978:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    d97c:	89 2b       	or	r24, r25
    d97e:	69 f4       	brne	.+26     	; 0xd99a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1a2>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    d980:	01 15       	cp	r16, r1
    d982:	11 05       	cpc	r17, r1
    d984:	31 f2       	breq	.-116    	; 0xd912 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    d986:	85 e0       	ldi	r24, 0x05	; 5
    d988:	90 e0       	ldi	r25, 0x00	; 0
    d98a:	f8 01       	movw	r30, r16
    d98c:	91 83       	std	Z+1, r25	; 0x01
    d98e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    d990:	12 82       	std	Z+2, r1	; 0x02
    d992:	13 82       	std	Z+3, r1	; 0x03
    d994:	14 82       	std	Z+4, r1	; 0x04
    d996:	15 82       	std	Z+5, r1	; 0x05
    d998:	bc cf       	rjmp	.-136    	; 0xd912 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    d99a:	6e eb       	ldi	r22, 0xBE	; 190
    d99c:	75 e0       	ldi	r23, 0x05	; 5
    d99e:	c7 01       	movw	r24, r14
    d9a0:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    d9a4:	89 2b       	or	r24, r25
    d9a6:	09 f4       	brne	.+2      	; 0xd9aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1b2>
    d9a8:	b4 cf       	rjmp	.-152    	; 0xd912 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    d9aa:	82 e0       	ldi	r24, 0x02	; 2
    d9ac:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:262
    }
    return DeserializationError::Ok;
  }
    d9ae:	c0 5c       	subi	r28, 0xC0	; 192
    d9b0:	df 4f       	sbci	r29, 0xFF	; 255
    d9b2:	0f b6       	in	r0, 0x3f	; 63
    d9b4:	f8 94       	cli
    d9b6:	de bf       	out	0x3e, r29	; 62
    d9b8:	0f be       	out	0x3f, r0	; 63
    d9ba:	cd bf       	out	0x3d, r28	; 61
    d9bc:	df 91       	pop	r29
    d9be:	cf 91       	pop	r28
    d9c0:	1f 91       	pop	r17
    d9c2:	0f 91       	pop	r16
    d9c4:	ff 90       	pop	r15
    d9c6:	ef 90       	pop	r14
    d9c8:	df 90       	pop	r13
    d9ca:	cf 90       	pop	r12
    d9cc:	bf 90       	pop	r11
    d9ce:	af 90       	pop	r10
    d9d0:	9f 90       	pop	r9
    d9d2:	8f 90       	pop	r8
    d9d4:	08 95       	ret
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    d9d6:	21 e0       	ldi	r18, 0x01	; 1
    d9d8:	30 e0       	ldi	r19, 0x00	; 0
    d9da:	40 e0       	ldi	r20, 0x00	; 0
    d9dc:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    d9de:	01 15       	cp	r16, r1
    d9e0:	11 05       	cpc	r17, r1
    d9e2:	09 f0       	breq	.+2      	; 0xd9e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1ee>
    d9e4:	8d cf       	rjmp	.-230    	; 0xd900 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x108>
    d9e6:	95 cf       	rjmp	.-214    	; 0xd912 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>

0000d9e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE8parseKeyEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:166
    } else {
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    d9e8:	cf 92       	push	r12
    d9ea:	df 92       	push	r13
    d9ec:	ef 92       	push	r14
    d9ee:	ff 92       	push	r15
    d9f0:	1f 93       	push	r17
    d9f2:	cf 93       	push	r28
    d9f4:	df 93       	push	r29
    d9f6:	ec 01       	movw	r28, r24
    d9f8:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
    if (isQuote(current())) {
    d9fa:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7isQuoteEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    d9fe:	87 32       	cpi	r24, 0x27	; 39
    da00:	a1 f0       	breq	.+40     	; 0xda2a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x42>
    da02:	82 32       	cpi	r24, 0x22	; 34
    da04:	91 f0       	breq	.+36     	; 0xda2a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x42>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC4EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    da06:	ec 80       	ldd	r14, Y+4	; 0x04
    da08:	fd 80       	ldd	r15, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    da0a:	ce 01       	movw	r24, r28
    da0c:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    da10:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    da12:	81 11       	cpse	r24, r1
    da14:	15 c0       	rjmp	.+42     	; 0xda40 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x58>
    da16:	81 e0       	ldi	r24, 0x01	; 1
    da18:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE8parseKeyEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:172
    if (isQuote(current())) {
      return parseQuotedString(key);
    } else {
      return parseNonQuotedString(key);
    }
  }
    da1a:	df 91       	pop	r29
    da1c:	cf 91       	pop	r28
    da1e:	1f 91       	pop	r17
    da20:	ff 90       	pop	r15
    da22:	ef 90       	pop	r14
    da24:	df 90       	pop	r13
    da26:	cf 90       	pop	r12
    da28:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    da2a:	b6 01       	movw	r22, r12
    da2c:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:172
    } else {
      return parseNonQuotedString(key);
    }
  }
    da2e:	df 91       	pop	r29
    da30:	cf 91       	pop	r28
    da32:	1f 91       	pop	r17
    da34:	ff 90       	pop	r15
    da36:	ef 90       	pop	r14
    da38:	df 90       	pop	r13
    da3a:	cf 90       	pop	r12
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    da3c:	0c 94 8d 6b 	jmp	0xd71a	; 0xd71a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    da40:	0e 94 e4 6b 	call	0xd7c8	; 0xd7c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    da44:	88 23       	and	r24, r24
    da46:	09 f1       	breq	.+66     	; 0xda8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0xa2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    da48:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    da4a:	ec 81       	ldd	r30, Y+4	; 0x04
    da4c:	fd 81       	ldd	r31, Y+5	; 0x05
    da4e:	cf 01       	movw	r24, r30
    da50:	01 96       	adiw	r24, 0x01	; 1
    da52:	9d 83       	std	Y+5, r25	; 0x05
    da54:	8c 83       	std	Y+4, r24	; 0x04
    da56:	10 83       	st	Z, r17
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    da58:	ce 01       	movw	r24, r28
    da5a:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    da5e:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    da60:	0e 94 e4 6b 	call	0xd7c8	; 0xd7c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    da64:	81 11       	cpse	r24, r1
    da66:	f0 cf       	rjmp	.-32     	; 0xda48 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x60>
_ZNK11ArduinoJson9Internals11StringMoverIcE6String5c_strEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    da68:	ec 81       	ldd	r30, Y+4	; 0x04
    da6a:	fd 81       	ldd	r31, Y+5	; 0x05
    da6c:	cf 01       	movw	r24, r30
    da6e:	01 96       	adiw	r24, 0x01	; 1
    da70:	9d 83       	std	Y+5, r25	; 0x05
    da72:	8c 83       	std	Y+4, r24	; 0x04
    da74:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    da76:	f6 01       	movw	r30, r12
    da78:	f1 82       	std	Z+1, r15	; 0x01
    da7a:	e0 82       	st	Z, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:233
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
    da7c:	90 e0       	ldi	r25, 0x00	; 0
    da7e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    da80:	ef 28       	or	r14, r15
    da82:	59 f6       	brne	.-106    	; 0xda1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>
    da84:	83 e0       	ldi	r24, 0x03	; 3
    da86:	90 e0       	ldi	r25, 0x00	; 0
    da88:	c8 cf       	rjmp	.-112    	; 0xda1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:228
        move();
        str.append(c);
        c = current();
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
    da8a:	82 e0       	ldi	r24, 0x02	; 2
    da8c:	90 e0       	ldi	r25, 0x00	; 0
    da8e:	c5 cf       	rjmp	.-118    	; 0xda1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>

0000da90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:106
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    da90:	3f 92       	push	r3
    da92:	4f 92       	push	r4
    da94:	5f 92       	push	r5
    da96:	6f 92       	push	r6
    da98:	7f 92       	push	r7
    da9a:	8f 92       	push	r8
    da9c:	9f 92       	push	r9
    da9e:	af 92       	push	r10
    daa0:	bf 92       	push	r11
    daa2:	cf 92       	push	r12
    daa4:	df 92       	push	r13
    daa6:	ef 92       	push	r14
    daa8:	ff 92       	push	r15
    daaa:	0f 93       	push	r16
    daac:	1f 93       	push	r17
    daae:	cf 93       	push	r28
    dab0:	df 93       	push	r29
    dab2:	1f 92       	push	r1
    dab4:	1f 92       	push	r1
    dab6:	cd b7       	in	r28, 0x3d	; 61
    dab8:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    daba:	dc 01       	movw	r26, r24
    dabc:	16 96       	adiw	r26, 0x06	; 6
    dabe:	2c 91       	ld	r18, X
    dac0:	16 97       	sbiw	r26, 0x06	; 6
    dac2:	21 11       	cpse	r18, r1
    dac4:	16 c0       	rjmp	.+44     	; 0xdaf2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x62>
    dac6:	85 e0       	ldi	r24, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    dac8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:156

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;
    }
  }
    daca:	0f 90       	pop	r0
    dacc:	0f 90       	pop	r0
    dace:	df 91       	pop	r29
    dad0:	cf 91       	pop	r28
    dad2:	1f 91       	pop	r17
    dad4:	0f 91       	pop	r16
    dad6:	ff 90       	pop	r15
    dad8:	ef 90       	pop	r14
    dada:	df 90       	pop	r13
    dadc:	cf 90       	pop	r12
    dade:	bf 90       	pop	r11
    dae0:	af 90       	pop	r10
    dae2:	9f 90       	pop	r9
    dae4:	8f 90       	pop	r8
    dae6:	7f 90       	pop	r7
    dae8:	6f 90       	pop	r6
    daea:	5f 90       	pop	r5
    daec:	4f 90       	pop	r4
    daee:	3f 90       	pop	r3
    daf0:	08 95       	ret
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    daf2:	6b 01       	movw	r12, r22
    daf4:	61 15       	cp	r22, r1
    daf6:	71 05       	cpc	r23, r1
    daf8:	11 f4       	brne	.+4      	; 0xdafe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x6e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    dafa:	83 e0       	ldi	r24, 0x03	; 3
    dafc:	e5 cf       	rjmp	.-54     	; 0xdac8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
    dafe:	8c 01       	movw	r16, r24
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    db00:	89 e0       	ldi	r24, 0x09	; 9
    db02:	90 e0       	ldi	r25, 0x00	; 0
    db04:	fb 01       	movw	r30, r22
    db06:	91 83       	std	Z+1, r25	; 0x01
    db08:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    db0a:	13 82       	std	Z+3, r1	; 0x03
    db0c:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    db0e:	15 82       	std	Z+5, r1	; 0x05
    db10:	14 82       	std	Z+4, r1	; 0x04
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    db12:	4b 01       	movw	r8, r22
    db14:	f2 e0       	ldi	r31, 0x02	; 2
    db16:	8f 0e       	add	r8, r31
    db18:	91 1c       	adc	r9, r1
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    db1a:	7a 01       	movw	r14, r20
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    db1c:	cd 01       	movw	r24, r26
    db1e:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    db22:	8b 37       	cpi	r24, 0x7B	; 123
    db24:	11 f0       	breq	.+4      	; 0xdb2a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x9a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:132
      if (err) return err;

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;
    db26:	82 e0       	ldi	r24, 0x02	; 2
    db28:	cf cf       	rjmp	.-98     	; 0xdac8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    db2a:	d8 01       	movw	r26, r16
    db2c:	18 96       	adiw	r26, 0x08	; 8
    db2e:	1c 92       	st	X, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    db30:	c8 01       	movw	r24, r16
    db32:	0e 94 51 6a 	call	0xd4a2	; 0xd4a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    db36:	00 97       	sbiw	r24, 0x00	; 0
    db38:	41 f6       	brne	.-112    	; 0xdaca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    db3a:	c8 01       	movw	r24, r16
    db3c:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    db40:	8d 37       	cpi	r24, 0x7D	; 125
    db42:	09 f4       	brne	.+2      	; 0xdb46 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xb6>
    db44:	4b c0       	rjmp	.+150    	; 0xdbdc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x14c>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    db46:	8c e0       	ldi	r24, 0x0C	; 12
    db48:	38 2e       	mov	r3, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:126

    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
    db4a:	be 01       	movw	r22, r28
    db4c:	6f 5f       	subi	r22, 0xFF	; 255
    db4e:	7f 4f       	sbci	r23, 0xFF	; 255
    db50:	c8 01       	movw	r24, r16
    db52:	0e 94 f4 6c 	call	0xd9e8	; 0xd9e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
      if (err) return err;
    db56:	00 97       	sbiw	r24, 0x00	; 0
    db58:	09 f0       	breq	.+2      	; 0xdb5c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xcc>
    db5a:	b7 cf       	rjmp	.-146    	; 0xdaca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    db5c:	c8 01       	movw	r24, r16
    db5e:	0e 94 51 6a 	call	0xd4a2	; 0xd4a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    db62:	00 97       	sbiw	r24, 0x00	; 0
    db64:	09 f0       	breq	.+2      	; 0xdb68 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xd8>
    db66:	b1 cf       	rjmp	.-158    	; 0xdaca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    db68:	c8 01       	movw	r24, r16
    db6a:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    db6e:	8a 33       	cpi	r24, 0x3A	; 58
    db70:	d1 f6       	brne	.-76     	; 0xdb26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x96>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    db72:	d8 01       	movw	r26, r16
    db74:	18 96       	adiw	r26, 0x08	; 8
    db76:	1c 92       	st	X, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    db78:	a9 80       	ldd	r10, Y+1	; 0x01
    db7a:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    db7c:	a1 14       	cp	r10, r1
    db7e:	b1 04       	cpc	r11, r1
    db80:	89 f5       	brne	.+98     	; 0xdbe4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x154>
    db82:	90 e0       	ldi	r25, 0x00	; 0
    db84:	80 e0       	ldi	r24, 0x00	; 0
    db86:	30 e0       	ldi	r19, 0x00	; 0
    db88:	20 e0       	ldi	r18, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    db8a:	43 2e       	mov	r4, r19
    db8c:	52 2e       	mov	r5, r18
    db8e:	3c 01       	movw	r6, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    db90:	89 2b       	or	r24, r25
    db92:	09 f4       	brne	.+2      	; 0xdb96 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x106>
    db94:	b2 cf       	rjmp	.-156    	; 0xdafa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x6a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    db96:	d8 01       	movw	r26, r16
    db98:	16 96       	adiw	r26, 0x06	; 6
    db9a:	8c 91       	ld	r24, X
    db9c:	16 97       	sbiw	r26, 0x06	; 6
    db9e:	81 50       	subi	r24, 0x01	; 1
    dba0:	16 96       	adiw	r26, 0x06	; 6
    dba2:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    dba4:	b3 01       	movw	r22, r6
    dba6:	a2 01       	movw	r20, r4
    dba8:	c8 01       	movw	r24, r16
    dbaa:	0e 94 3c 6e 	call	0xdc78	; 0xdc78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    dbae:	f8 01       	movw	r30, r16
    dbb0:	26 81       	ldd	r18, Z+6	; 0x06
    dbb2:	2f 5f       	subi	r18, 0xFF	; 255
    dbb4:	26 83       	std	Z+6, r18	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    dbb6:	00 97       	sbiw	r24, 0x00	; 0
    dbb8:	09 f0       	breq	.+2      	; 0xdbbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x12c>
    dbba:	87 cf       	rjmp	.-242    	; 0xdaca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    dbbc:	c8 01       	movw	r24, r16
    dbbe:	0e 94 51 6a 	call	0xd4a2	; 0xd4a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    dbc2:	00 97       	sbiw	r24, 0x00	; 0
    dbc4:	09 f0       	breq	.+2      	; 0xdbc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x138>
    dbc6:	81 cf       	rjmp	.-254    	; 0xdaca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    dbc8:	c8 01       	movw	r24, r16
    dbca:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    dbce:	8d 37       	cpi	r24, 0x7D	; 125
    dbd0:	09 f0       	breq	.+2      	; 0xdbd4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x144>
    dbd2:	43 c0       	rjmp	.+134    	; 0xdc5a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1ca>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    dbd4:	d8 01       	movw	r26, r16
    dbd6:	18 96       	adiw	r26, 0x08	; 8
    dbd8:	1c 92       	st	X, r1
    dbda:	02 c0       	rjmp	.+4      	; 0xdbe0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x150>
    dbdc:	f8 01       	movw	r30, r16
    dbde:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:149
      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;

      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
    dbe0:	80 e0       	ldi	r24, 0x00	; 0
    dbe2:	72 cf       	rjmp	.-284    	; 0xdac8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    dbe4:	b5 01       	movw	r22, r10
    dbe6:	c4 01       	movw	r24, r8
    dbe8:	0e 94 02 38 	call	0x7004	; 0x7004 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    dbec:	00 97       	sbiw	r24, 0x00	; 0
    dbee:	49 f5       	brne	.+82     	; 0xdc42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1b2>
_ZN11ArduinoJson9Internals21AllocableInMemoryPoolnwEjPNS0_10MemoryPoolE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    dbf0:	d7 01       	movw	r26, r14
    dbf2:	ed 91       	ld	r30, X+
    dbf4:	fc 91       	ld	r31, X
    dbf6:	01 90       	ld	r0, Z+
    dbf8:	f0 81       	ld	r31, Z
    dbfa:	e0 2d       	mov	r30, r0
    dbfc:	6c e0       	ldi	r22, 0x0C	; 12
    dbfe:	70 e0       	ldi	r23, 0x00	; 0
    dc00:	c7 01       	movw	r24, r14
    dc02:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    dc04:	00 97       	sbiw	r24, 0x00	; 0
    dc06:	09 f4       	brne	.+2      	; 0xdc0a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x17a>
    dc08:	bc cf       	rjmp	.-136    	; 0xdb82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xf2>
    dc0a:	fc 01       	movw	r30, r24
    dc0c:	23 2d       	mov	r18, r3
    dc0e:	11 92       	st	Z+, r1
    dc10:	2a 95       	dec	r18
    dc12:	e9 f7       	brne	.-6      	; 0xdc0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x17e>
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    dc14:	dc 01       	movw	r26, r24
    dc16:	1d 92       	st	X+, r1
    dc18:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    dc1a:	d6 01       	movw	r26, r12
    dc1c:	14 96       	adiw	r26, 0x04	; 4
    dc1e:	ed 91       	ld	r30, X+
    dc20:	fc 91       	ld	r31, X
    dc22:	15 97       	sbiw	r26, 0x05	; 5
    dc24:	30 97       	sbiw	r30, 0x00	; 0
    dc26:	81 f0       	breq	.+32     	; 0xdc48 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    dc28:	dc 01       	movw	r26, r24
    dc2a:	19 96       	adiw	r26, 0x09	; 9
    dc2c:	fc 93       	st	X, r31
    dc2e:	ee 93       	st	-X, r30
    dc30:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    dc32:	97 83       	std	Z+7, r25	; 0x07
    dc34:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    dc36:	f6 01       	movw	r30, r12
    dc38:	95 83       	std	Z+5, r25	; 0x05
    dc3a:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    dc3c:	fc 01       	movw	r30, r24
    dc3e:	b3 86       	std	Z+11, r11	; 0x0b
    dc40:	a2 86       	std	Z+10, r10	; 0x0a
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
    dc42:	3e 2d       	mov	r19, r14
    dc44:	2f 2d       	mov	r18, r15
    dc46:	a1 cf       	rjmp	.-190    	; 0xdb8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xfa>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    dc48:	13 96       	adiw	r26, 0x03	; 3
    dc4a:	9c 93       	st	X, r25
    dc4c:	8e 93       	st	-X, r24
    dc4e:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    dc50:	15 96       	adiw	r26, 0x05	; 5
    dc52:	9c 93       	st	X, r25
    dc54:	8e 93       	st	-X, r24
    dc56:	14 97       	sbiw	r26, 0x04	; 4
    dc58:	f1 cf       	rjmp	.-30     	; 0xdc3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1ac>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    dc5a:	c8 01       	movw	r24, r16
    dc5c:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    dc60:	8c 32       	cpi	r24, 0x2C	; 44
    dc62:	09 f0       	breq	.+2      	; 0xdc66 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1d6>
    dc64:	60 cf       	rjmp	.-320    	; 0xdb26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x96>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    dc66:	f8 01       	movw	r30, r16
    dc68:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    dc6a:	c8 01       	movw	r24, r16
    dc6c:	0e 94 51 6a 	call	0xd4a2	; 0xd4a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    dc70:	00 97       	sbiw	r24, 0x00	; 0
    dc72:	09 f4       	brne	.+2      	; 0xdc76 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1e6>
    dc74:	6a cf       	rjmp	.-300    	; 0xdb4a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xba>
    dc76:	29 cf       	rjmp	.-430    	; 0xdaca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>

0000dc78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    dc78:	8f 92       	push	r8
    dc7a:	9f 92       	push	r9
    dc7c:	af 92       	push	r10
    dc7e:	bf 92       	push	r11
    dc80:	ef 92       	push	r14
    dc82:	ff 92       	push	r15
    dc84:	0f 93       	push	r16
    dc86:	1f 93       	push	r17
    dc88:	cf 93       	push	r28
    dc8a:	df 93       	push	r29
    dc8c:	1f 92       	push	r1
    dc8e:	1f 92       	push	r1
    dc90:	cd b7       	in	r28, 0x3d	; 61
    dc92:	de b7       	in	r29, 0x3e	; 62
    dc94:	8c 01       	movw	r16, r24
    dc96:	4a 01       	movw	r8, r20
    dc98:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    dc9a:	0e 94 51 6a 	call	0xd4a2	; 0xd4a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    dc9e:	00 97       	sbiw	r24, 0x00	; 0
    dca0:	e1 f4       	brne	.+56     	; 0xdcda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    dca2:	c8 01       	movw	r24, r16
    dca4:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    dca8:	8b 35       	cpi	r24, 0x5B	; 91
    dcaa:	91 f0       	breq	.+36     	; 0xdcd0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58>
    dcac:	8b 37       	cpi	r24, 0x7B	; 123
    dcae:	11 f1       	breq	.+68     	; 0xdcf4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7c>
    dcb0:	75 01       	movw	r14, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    dcb2:	c8 01       	movw	r24, r16
    dcb4:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7isQuoteEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    dcb8:	87 32       	cpi	r24, 0x27	; 39
    dcba:	11 f1       	breq	.+68     	; 0xdd00 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    dcbc:	82 32       	cpi	r24, 0x22	; 34
    dcbe:	01 f1       	breq	.+64     	; 0xdd00 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:162

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
      return parseStringValue(variant);
    } else {
      return parseNumericValue(variant);
    dcc0:	b5 01       	movw	r22, r10
    dcc2:	a4 01       	movw	r20, r8
    dcc4:	c8 01       	movw	r24, r16
    dcc6:	0e 94 fc 6b 	call	0xd7f8	; 0xd7f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)>
    dcca:	9c 01       	movw	r18, r24
    dccc:	c9 01       	movw	r24, r18
    dcce:	05 c0       	rjmp	.+10     	; 0xdcda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:34
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    switch (current()) {
      case '[':
        return parseArray(variant);
    dcd0:	b5 01       	movw	r22, r10
    dcd2:	a4 01       	movw	r20, r8
    dcd4:	c8 01       	movw	r24, r16
    dcd6:	0e 94 98 6e 	call	0xdd30	; 0xdd30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    dcda:	0f 90       	pop	r0
    dcdc:	0f 90       	pop	r0
    dcde:	df 91       	pop	r29
    dce0:	cf 91       	pop	r28
    dce2:	1f 91       	pop	r17
    dce4:	0f 91       	pop	r16
    dce6:	ff 90       	pop	r15
    dce8:	ef 90       	pop	r14
    dcea:	bf 90       	pop	r11
    dcec:	af 90       	pop	r10
    dcee:	9f 90       	pop	r9
    dcf0:	8f 90       	pop	r8
    dcf2:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:37
    switch (current()) {
      case '[':
        return parseArray(variant);

      case '{':
        return parseObject(variant);
    dcf4:	b5 01       	movw	r22, r10
    dcf6:	a4 01       	movw	r20, r8
    dcf8:	c8 01       	movw	r24, r16
    dcfa:	0e 94 48 6d 	call	0xda90	; 0xda90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)>
    dcfe:	ed cf       	rjmp	.-38     	; 0xdcda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    dd00:	be 01       	movw	r22, r28
    dd02:	6f 5f       	subi	r22, 0xFF	; 255
    dd04:	7f 4f       	sbci	r23, 0xFF	; 255
    dd06:	c8 01       	movw	r24, r16
    dd08:	0e 94 8d 6b 	call	0xd71a	; 0xd71a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    dd0c:	9c 01       	movw	r18, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    dd0e:	89 2b       	or	r24, r25
    dd10:	e9 f6       	brne	.-70     	; 0xdccc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x54>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    dd12:	e1 14       	cp	r14, r1
    dd14:	f1 04       	cpc	r15, r1
    dd16:	49 f0       	breq	.+18     	; 0xdd2a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    dd18:	89 81       	ldd	r24, Y+1	; 0x01
    dd1a:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    dd1c:	23 e0       	ldi	r18, 0x03	; 3
    dd1e:	30 e0       	ldi	r19, 0x00	; 0
    dd20:	f7 01       	movw	r30, r14
    dd22:	31 83       	std	Z+1, r19	; 0x01
    dd24:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    dd26:	93 83       	std	Z+3, r25	; 0x03
    dd28:	82 83       	std	Z+2, r24	; 0x02
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:179
    return DeserializationError::Ok;
    dd2a:	30 e0       	ldi	r19, 0x00	; 0
    dd2c:	20 e0       	ldi	r18, 0x00	; 0
    dd2e:	ce cf       	rjmp	.-100    	; 0xdccc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x54>

0000dd30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:68
    if (current() != charToSkip) return false;
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    dd30:	0f 93       	push	r16
    dd32:	1f 93       	push	r17
    dd34:	cf 93       	push	r28
    dd36:	df 93       	push	r29
    dd38:	00 d0       	rcall	.+0      	; 0xdd3a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xa>
    dd3a:	1f 92       	push	r1
    dd3c:	cd b7       	in	r28, 0x3d	; 61
    dd3e:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    dd40:	fc 01       	movw	r30, r24
    dd42:	26 81       	ldd	r18, Z+6	; 0x06
    dd44:	21 11       	cpse	r18, r1
    dd46:	0b c0       	rjmp	.+22     	; 0xdd5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x2e>
    dd48:	85 e0       	ldi	r24, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:102
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    dd4a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:104 (discriminator 2)
    }
  }
    dd4c:	0f 90       	pop	r0
    dd4e:	0f 90       	pop	r0
    dd50:	0f 90       	pop	r0
    dd52:	0f 90       	pop	r0
    dd54:	df 91       	pop	r29
    dd56:	cf 91       	pop	r28
    dd58:	1f 91       	pop	r17
    dd5a:	0f 91       	pop	r16
    dd5c:	08 95       	ret
_ZN11ArduinoJson11JsonVariant2toINS_9JsonArrayEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    dd5e:	fb 01       	movw	r30, r22
    dd60:	30 97       	sbiw	r30, 0x00	; 0
    dd62:	99 f0       	breq	.+38     	; 0xdd8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x5a>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    dd64:	28 e0       	ldi	r18, 0x08	; 8
    dd66:	30 e0       	ldi	r19, 0x00	; 0
    dd68:	31 83       	std	Z+1, r19	; 0x01
    dd6a:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    dd6c:	13 82       	std	Z+3, r1	; 0x03
    dd6e:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    dd70:	15 82       	std	Z+5, r1	; 0x05
    dd72:	14 82       	std	Z+4, r1	; 0x04
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:73
    return &content.asArray;
    dd74:	9b 01       	movw	r18, r22
    dd76:	2e 5f       	subi	r18, 0xFE	; 254
    dd78:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:71
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonArray array = variant.to<JsonArray>();
    dd7a:	5a 83       	std	Y+2, r21	; 0x02
    dd7c:	49 83       	std	Y+1, r20	; 0x01
    dd7e:	3c 83       	std	Y+4, r19	; 0x04
    dd80:	2b 83       	std	Y+3, r18	; 0x03
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:72
    if (array.isNull()) return DeserializationError::NoMemory;
    dd82:	23 2b       	or	r18, r19
    dd84:	39 f4       	brne	.+14     	; 0xdd94 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x64>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    dd86:	83 e0       	ldi	r24, 0x03	; 3
    dd88:	e0 cf       	rjmp	.-64     	; 0xdd4a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
_ZN11ArduinoJson11JsonVariant2toINS_9JsonArrayEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78
    dd8a:	30 e0       	ldi	r19, 0x00	; 0
    dd8c:	20 e0       	ldi	r18, 0x00	; 0
    dd8e:	50 e0       	ldi	r21, 0x00	; 0
    dd90:	40 e0       	ldi	r20, 0x00	; 0
    dd92:	f3 cf       	rjmp	.-26     	; 0xdd7a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x4a>
    dd94:	8c 01       	movw	r16, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    dd96:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    dd9a:	8b 35       	cpi	r24, 0x5B	; 91
    dd9c:	11 f0       	breq	.+4      	; 0xdda2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x72>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:102
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    dd9e:	82 e0       	ldi	r24, 0x02	; 2
    dda0:	d4 cf       	rjmp	.-88     	; 0xdd4a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    dda2:	f8 01       	movw	r30, r16
    dda4:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    dda6:	c8 01       	movw	r24, r16
    dda8:	0e 94 51 6a 	call	0xd4a2	; 0xd4a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    ddac:	00 97       	sbiw	r24, 0x00	; 0
    ddae:	71 f6       	brne	.-100    	; 0xdd4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    ddb0:	c8 01       	movw	r24, r16
    ddb2:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    ddb6:	8d 35       	cpi	r24, 0x5D	; 93
    ddb8:	21 f4       	brne	.+8      	; 0xddc2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x92>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    ddba:	f8 01       	movw	r30, r16
    ddbc:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:101
      // 2 - Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
    ddbe:	80 e0       	ldi	r24, 0x00	; 0
    ddc0:	c4 cf       	rjmp	.-120    	; 0xdd4a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:87
    if (eat(']')) return DeserializationError::Ok;

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
    ddc2:	ce 01       	movw	r24, r28
    ddc4:	01 96       	adiw	r24, 0x01	; 1
    ddc6:	0e 94 2e 38 	call	0x705c	; 0x705c <ArduinoJson::JsonArray::add()>
    ddca:	ab 01       	movw	r20, r22
    ddcc:	bc 01       	movw	r22, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88
      if (value.isInvalid()) return DeserializationError::NoMemory;
    ddce:	89 2b       	or	r24, r25
    ddd0:	d1 f2       	breq	.-76     	; 0xdd86 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x56>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    ddd2:	f8 01       	movw	r30, r16
    ddd4:	86 81       	ldd	r24, Z+6	; 0x06
    ddd6:	81 50       	subi	r24, 0x01	; 1
    ddd8:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    ddda:	c8 01       	movw	r24, r16
    dddc:	0e 94 3c 6e 	call	0xdc78	; 0xdc78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    dde0:	f8 01       	movw	r30, r16
    dde2:	26 81       	ldd	r18, Z+6	; 0x06
    dde4:	2f 5f       	subi	r18, 0xFF	; 255
    dde6:	26 83       	std	Z+6, r18	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    dde8:	00 97       	sbiw	r24, 0x00	; 0
    ddea:	09 f0       	breq	.+2      	; 0xddee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xbe>
    ddec:	af cf       	rjmp	.-162    	; 0xdd4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    ddee:	c8 01       	movw	r24, r16
    ddf0:	0e 94 51 6a 	call	0xd4a2	; 0xd4a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    ddf4:	00 97       	sbiw	r24, 0x00	; 0
    ddf6:	09 f0       	breq	.+2      	; 0xddfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xca>
    ddf8:	a9 cf       	rjmp	.-174    	; 0xdd4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    ddfa:	c8 01       	movw	r24, r16
    ddfc:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    de00:	8d 35       	cpi	r24, 0x5D	; 93
    de02:	d9 f2       	breq	.-74     	; 0xddba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x8a>
    de04:	c8 01       	movw	r24, r16
    de06:	0e 94 41 6a 	call	0xd482	; 0xd482 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    de0a:	8c 32       	cpi	r24, 0x2C	; 44
    de0c:	41 f6       	brne	.-112    	; 0xdd9e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x6e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    de0e:	f8 01       	movw	r30, r16
    de10:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:85

    // Empty array?
    if (eat(']')) return DeserializationError::Ok;

    // Read each value
    for (;;) {
    de12:	d7 cf       	rjmp	.-82     	; 0xddc2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x92>

0000de14 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
    de14:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
    de16:	80 81       	ld	r24, Z
    de18:	91 81       	ldd	r25, Z+1	; 0x01
    de1a:	87 30       	cpi	r24, 0x07	; 7
    de1c:	91 05       	cpc	r25, r1
    de1e:	38 f4       	brcc	.+14     	; 0xde2e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
    de20:	85 30       	cpi	r24, 0x05	; 5
    de22:	91 05       	cpc	r25, r1
    de24:	88 f4       	brcc	.+34     	; 0xde48 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
    de26:	03 97       	sbiw	r24, 0x03	; 3
    de28:	a0 f4       	brcc	.+40     	; 0xde52 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    de2a:	80 e0       	ldi	r24, 0x00	; 0
    de2c:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    de2e:	87 30       	cpi	r24, 0x07	; 7
    de30:	91 05       	cpc	r25, r1
    de32:	61 f0       	breq	.+24     	; 0xde4c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
    de34:	0a 97       	sbiw	r24, 0x0a	; 10
    de36:	c9 f7       	brne	.-14     	; 0xde2a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    de38:	62 81       	ldd	r22, Z+2	; 0x02
    de3a:	73 81       	ldd	r23, Z+3	; 0x03
    de3c:	84 81       	ldd	r24, Z+4	; 0x04
    de3e:	95 81       	ldd	r25, Z+5	; 0x05
    de40:	0e 94 97 dc 	call	0x1b92e	; 0x1b92e <__fixunssfsi>
    de44:	86 2f       	mov	r24, r22
    de46:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    de48:	82 81       	ldd	r24, Z+2	; 0x02
    de4a:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    de4c:	82 81       	ldd	r24, Z+2	; 0x02
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    de4e:	81 95       	neg	r24
    de50:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    de52:	02 80       	ldd	r0, Z+2	; 0x02
    de54:	f3 81       	ldd	r31, Z+3	; 0x03
    de56:	e0 2d       	mov	r30, r0
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    de58:	30 97       	sbiw	r30, 0x00	; 0
    de5a:	39 f3       	breq	.-50     	; 0xde2a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    de5c:	80 81       	ld	r24, Z
    de5e:	84 37       	cpi	r24, 0x74	; 116
    de60:	c9 f0       	breq	.+50     	; 0xde94 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    de62:	8b 32       	cpi	r24, 0x2B	; 43
    de64:	89 f0       	breq	.+34     	; 0xde88 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
    de66:	8d 32       	cpi	r24, 0x2D	; 45
    de68:	81 f4       	brne	.+32     	; 0xde8a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    de6a:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    de6c:	91 e0       	ldi	r25, 0x01	; 1
    de6e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    de70:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    de72:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    de74:	30 ed       	ldi	r19, 0xD0	; 208
    de76:	36 0f       	add	r19, r22
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    de78:	3a 30       	cpi	r19, 0x0A	; 10
    de7a:	48 f4       	brcc	.+18     	; 0xde8e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
    de7c:	82 9f       	mul	r24, r18
    de7e:	60 0d       	add	r22, r0
    de80:	11 24       	eor	r1, r1
    de82:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    de84:	80 53       	subi	r24, 0x30	; 48
    de86:	f5 cf       	rjmp	.-22     	; 0xde72 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    de88:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    de8a:	90 e0       	ldi	r25, 0x00	; 0
    de8c:	f0 cf       	rjmp	.-32     	; 0xde6e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    de8e:	91 11       	cpse	r25, r1
    de90:	de cf       	rjmp	.-68     	; 0xde4e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
    de92:	08 95       	ret
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    de94:	81 e0       	ldi	r24, 0x01	; 1
    de96:	fd cf       	rjmp	.-6      	; 0xde92 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

0000de98 <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2247
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
    de98:	2f 92       	push	r2
    de9a:	3f 92       	push	r3
    de9c:	4f 92       	push	r4
    de9e:	5f 92       	push	r5
    dea0:	6f 92       	push	r6
    dea2:	7f 92       	push	r7
    dea4:	8f 92       	push	r8
    dea6:	9f 92       	push	r9
    dea8:	af 92       	push	r10
    deaa:	bf 92       	push	r11
    deac:	cf 92       	push	r12
    deae:	df 92       	push	r13
    deb0:	ef 92       	push	r14
    deb2:	ff 92       	push	r15
    deb4:	0f 93       	push	r16
    deb6:	1f 93       	push	r17
    deb8:	cf 93       	push	r28
    deba:	df 93       	push	r29
    debc:	cd b7       	in	r28, 0x3d	; 61
    debe:	de b7       	in	r29, 0x3e	; 62
    dec0:	cf 5c       	subi	r28, 0xCF	; 207
    dec2:	d1 09       	sbc	r29, r1
    dec4:	0f b6       	in	r0, 0x3f	; 63
    dec6:	f8 94       	cli
    dec8:	de bf       	out	0x3e, r29	; 62
    deca:	0f be       	out	0x3f, r0	; 63
    decc:	cd bf       	out	0x3d, r28	; 61
    dece:	4c 01       	movw	r8, r24
    ded0:	8b 01       	movw	r16, r22
    ded2:	7a 01       	movw	r14, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2260
  uint8_t id_interval = 0;
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;

  NTPClient timeClient(udpClient);
    ded4:	66 e2       	ldi	r22, 0x26	; 38
    ded6:	70 e1       	ldi	r23, 0x10	; 16
    ded8:	ce 01       	movw	r24, r28
    deda:	01 96       	adiw	r24, 0x01	; 1
    dedc:	0e 94 e9 d3 	call	0x1a7d2	; 0x1a7d2 <NTPClient::NTPClient(UDP&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2261
  DateTime ted;
    dee0:	40 e0       	ldi	r20, 0x00	; 0
    dee2:	50 e0       	ldi	r21, 0x00	; 0
    dee4:	ba 01       	movw	r22, r20
    dee6:	ce 01       	movw	r24, r28
    dee8:	88 53       	subi	r24, 0x38	; 56
    deea:	9f 4f       	sbci	r25, 0xFF	; 255
    deec:	0e 94 0a cc 	call	0x19814	; 0x19814 <DateTime::DateTime(unsigned long)>
    def0:	ec e4       	ldi	r30, 0x4C	; 76
    def2:	f9 e0       	ldi	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2262
  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    def4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2262 (discriminator 2)
    def6:	11 92       	st	Z+, r1
    def8:	8f 5f       	subi	r24, 0xFF	; 255
    defa:	80 38       	cpi	r24, 0x80	; 128
    defc:	e1 f7       	brne	.-8      	; 0xdef6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2264
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    defe:	80 91 f6 10 	lds	r24, 0x10F6	; 0x8010f6 <mqtt_receive_message>
    df02:	90 91 f7 10 	lds	r25, 0x10F7	; 0x8010f7 <mqtt_receive_message+0x1>
    df06:	01 96       	adiw	r24, 0x01	; 1
    df08:	90 93 f7 10 	sts	0x10F7, r25	; 0x8010f7 <mqtt_receive_message+0x1>
    df0c:	80 93 f6 10 	sts	0x10F6, r24	; 0x8010f6 <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2265
  strncpy(my_payload, (char*) payload, length);
    df10:	a7 01       	movw	r20, r14
    df12:	b8 01       	movw	r22, r16
    df14:	8c e4       	ldi	r24, 0x4C	; 76
    df16:	99 e0       	ldi	r25, 0x09	; 9
    df18:	0e 94 3b e2 	call	0x1c476	; 0x1c476 <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2268
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    df1c:	5e 01       	movw	r10, r28
    df1e:	88 e4       	ldi	r24, 0x48	; 72
    df20:	a8 0e       	add	r10, r24
    df22:	b1 1c       	adc	r11, r1
    df24:	6c e8       	ldi	r22, 0x8C	; 140
    df26:	78 e5       	ldi	r23, 0x58	; 88
    df28:	c5 01       	movw	r24, r10
    df2a:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2269
  if (strcmp(str1, topic) == 0)
    df2e:	b4 01       	movw	r22, r8
    df30:	c5 01       	movw	r24, r10
    df32:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    df36:	89 2b       	or	r24, r25
    df38:	71 f4       	brne	.+28     	; 0xdf56 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2271
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    df3a:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    df3e:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    df42:	01 96       	adiw	r24, 0x01	; 1
    df44:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    df48:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2272
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
    df4c:	62 e0       	ldi	r22, 0x02	; 2
    df4e:	8c e4       	ldi	r24, 0x4C	; 76
    df50:	99 e0       	ldi	r25, 0x09	; 9
    df52:	0e 94 85 8a 	call	0x1150a	; 0x1150a <know_mqtt_create_or_update(char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2274
  }
  strcpy_P(str1, thermctl_subscribe);
    df56:	63 ea       	ldi	r22, 0xA3	; 163
    df58:	78 e5       	ldi	r23, 0x58	; 88
    df5a:	c5 01       	movw	r24, r10
    df5c:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2275
  if (strcmp(str1, topic) == 0)
    df60:	b4 01       	movw	r22, r8
    df62:	c5 01       	movw	r24, r10
    df64:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    df68:	89 2b       	or	r24, r25
    df6a:	71 f4       	brne	.+28     	; 0xdf88 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2277
  {
    mqtt_process_message++;
    df6c:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    df70:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    df74:	01 96       	adiw	r24, 0x01	; 1
    df76:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    df7a:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
    df7e:	61 e0       	ldi	r22, 0x01	; 1
    df80:	8c e4       	ldi	r24, 0x4C	; 76
    df82:	99 e0       	ldi	r25, 0x09	; 9
    df84:	0e 94 85 8a 	call	0x1150a	; 0x1150a <know_mqtt_create_or_update(char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    df88:	64 ef       	ldi	r22, 0xF4	; 244
    df8a:	78 e5       	ldi	r23, 0x58	; 88
    df8c:	c5 01       	movw	r24, r10
    df8e:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2284
  strcat_P(str1, global_time_set);
    df92:	69 e2       	ldi	r22, 0x29	; 41
    df94:	79 e5       	ldi	r23, 0x59	; 89
    df96:	c5 01       	movw	r24, r10
    df98:	0e 94 e8 e1 	call	0x1c3d0	; 0x1c3d0 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
  if (strcmp(str1, topic) == 0)
    df9c:	b4 01       	movw	r22, r8
    df9e:	c5 01       	movw	r24, r10
    dfa0:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    dfa4:	89 2b       	or	r24, r25
    dfa6:	09 f0       	breq	.+2      	; 0xdfaa <mqtt_callback(char*, unsigned char*, unsigned int)+0x112>
    dfa8:	bc c0       	rjmp	.+376    	; 0xe122 <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
  {
    mqtt_process_message++;
    dfaa:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    dfae:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    dfb2:	01 96       	adiw	r24, 0x01	; 1
    dfb4:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    dfb8:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
_ZN11ArduinoJson9Internals11deserializeINS0_16JsonDeserializerENS_18StaticJsonDocumentILj256EEEcEENS_20DeserializationErrorERT0_PT1_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    dfbc:	20 91 e4 0a 	lds	r18, 0x0AE4	; 0x800ae4 <doc>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC4ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    dfc0:	85 ee       	ldi	r24, 0xE5	; 229
    dfc2:	9a e0       	ldi	r25, 0x0A	; 10
    dfc4:	c8 57       	subi	r28, 0x78	; 120
    dfc6:	df 4f       	sbci	r29, 0xFF	; 255
    dfc8:	99 83       	std	Y+1, r25	; 0x01
    dfca:	88 83       	st	Y, r24
    dfcc:	c8 58       	subi	r28, 0x88	; 136
    dfce:	d0 40       	sbci	r29, 0x00	; 0
    dfd0:	8c e4       	ldi	r24, 0x4C	; 76
    dfd2:	99 e0       	ldi	r25, 0x09	; 9
    dfd4:	c6 57       	subi	r28, 0x76	; 118
    dfd6:	df 4f       	sbci	r29, 0xFF	; 255
    dfd8:	99 83       	std	Y+1, r25	; 0x01
    dfda:	88 83       	st	Y, r24
    dfdc:	ca 58       	subi	r28, 0x8A	; 138
    dfde:	d0 40       	sbci	r29, 0x00	; 0
    dfe0:	c4 57       	subi	r28, 0x74	; 116
    dfe2:	df 4f       	sbci	r29, 0xFF	; 255
    dfe4:	99 83       	std	Y+1, r25	; 0x01
    dfe6:	88 83       	st	Y, r24
    dfe8:	cc 58       	subi	r28, 0x8C	; 140
    dfea:	d0 40       	sbci	r29, 0x00	; 0
    dfec:	c2 57       	subi	r28, 0x72	; 114
    dfee:	df 4f       	sbci	r29, 0xFF	; 255
    dff0:	28 83       	st	Y, r18
    dff2:	ce 58       	subi	r28, 0x8E	; 142
    dff4:	d0 40       	sbci	r29, 0x00	; 0
    dff6:	c0 57       	subi	r28, 0x70	; 112
    dff8:	df 4f       	sbci	r29, 0xFF	; 255
    dffa:	18 82       	st	Y, r1
    dffc:	c0 59       	subi	r28, 0x90	; 144
    dffe:	d0 40       	sbci	r29, 0x00	; 0
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66
  }

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    e000:	10 92 ec 0a 	sts	0x0AEC, r1	; 0x800aec <doc+0x8>
    e004:	10 92 eb 0a 	sts	0x0AEB, r1	; 0x800aeb <doc+0x7>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    e008:	10 92 ee 0b 	sts	0x0BEE, r1	; 0x800bee <doc+0x10a>
    e00c:	10 92 ed 0b 	sts	0x0BED, r1	; 0x800bed <doc+0x109>
    e010:	45 ee       	ldi	r20, 0xE5	; 229
    e012:	5a e0       	ldi	r21, 0x0A	; 10
    e014:	6d ee       	ldi	r22, 0xED	; 237
    e016:	7b e0       	ldi	r23, 0x0B	; 11
_ZN11ArduinoJson9Internals11deserializeINS0_16JsonDeserializerENS_18StaticJsonDocumentILj256EEEcEENS_20DeserializationErrorERT0_PT1_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    e018:	ce 01       	movw	r24, r28
    e01a:	88 57       	subi	r24, 0x78	; 120
    e01c:	9f 4f       	sbci	r25, 0xFF	; 255
    e01e:	0e 94 3c 6e 	call	0xdc78	; 0xdc78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    e022:	80 91 ed 0b 	lds	r24, 0x0BED	; 0x800bed <doc+0x109>
    e026:	90 91 ee 0b 	lds	r25, 0x0BEE	; 0x800bee <doc+0x10a>
    e02a:	71 2c       	mov	r7, r1
    e02c:	61 2c       	mov	r6, r1
    e02e:	09 97       	sbiw	r24, 0x09	; 9
    e030:	21 f4       	brne	.+8      	; 0xe03a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a2>
    e032:	8f ee       	ldi	r24, 0xEF	; 239
    e034:	68 2e       	mov	r6, r24
    e036:	8b e0       	ldi	r24, 0x0B	; 11
    e038:	78 2e       	mov	r7, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    e03a:	63 ec       	ldi	r22, 0xC3	; 195
    e03c:	75 e0       	ldi	r23, 0x05	; 5
    e03e:	c3 01       	movw	r24, r6
    e040:	0e 94 02 38 	call	0x7004	; 0x7004 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    e044:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2290
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    e046:	89 2b       	or	r24, r25
    e048:	09 f4       	brne	.+2      	; 0xe04c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b4>
    e04a:	6b c0       	rjmp	.+214    	; 0xe122 <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    e04c:	68 ec       	ldi	r22, 0xC8	; 200
    e04e:	75 e0       	ldi	r23, 0x05	; 5
    e050:	c3 01       	movw	r24, r6
    e052:	0e 94 02 38 	call	0x7004	; 0x7004 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    e056:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2290
    e058:	89 2b       	or	r24, r25
    e05a:	09 f4       	brne	.+2      	; 0xe05e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c6>
    e05c:	62 c0       	rjmp	.+196    	; 0xe122 <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    e05e:	6e ec       	ldi	r22, 0xCE	; 206
    e060:	75 e0       	ldi	r23, 0x05	; 5
    e062:	c3 01       	movw	r24, r6
    e064:	0e 94 02 38 	call	0x7004	; 0x7004 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    e068:	1c 01       	movw	r2, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2290
    e06a:	89 2b       	or	r24, r25
    e06c:	09 f4       	brne	.+2      	; 0xe070 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d8>
    e06e:	59 c0       	rjmp	.+178    	; 0xe122 <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    e070:	63 ed       	ldi	r22, 0xD3	; 211
    e072:	75 e0       	ldi	r23, 0x05	; 5
    e074:	c3 01       	movw	r24, r6
    e076:	0e 94 02 38 	call	0x7004	; 0x7004 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    e07a:	8c 01       	movw	r16, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2290
    e07c:	89 2b       	or	r24, r25
    e07e:	09 f4       	brne	.+2      	; 0xe082 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ea>
    e080:	50 c0       	rjmp	.+160    	; 0xe122 <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    e082:	6a ed       	ldi	r22, 0xDA	; 218
    e084:	75 e0       	ldi	r23, 0x05	; 5
    e086:	c3 01       	movw	r24, r6
    e088:	0e 94 02 38 	call	0x7004	; 0x7004 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2290
    e08c:	00 97       	sbiw	r24, 0x00	; 0
    e08e:	09 f4       	brne	.+2      	; 0xe092 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1fa>
    e090:	48 c0       	rjmp	.+144    	; 0xe122 <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    e092:	0e 94 0a 6f 	call	0xde14	; 0xde14 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    e096:	c8 2e       	mov	r12, r24
    e098:	c8 01       	movw	r24, r16
    e09a:	0e 94 0a 6f 	call	0xde14	; 0xde14 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    e09e:	d8 2e       	mov	r13, r24
    e0a0:	c1 01       	movw	r24, r2
    e0a2:	0e 94 0a 6f 	call	0xde14	; 0xde14 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    e0a6:	08 2f       	mov	r16, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    e0a8:	61 ee       	ldi	r22, 0xE1	; 225
    e0aa:	75 e0       	ldi	r23, 0x05	; 5
    e0ac:	c3 01       	movw	r24, r6
    e0ae:	0e 94 02 38 	call	0x7004	; 0x7004 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    e0b2:	10 e0       	ldi	r17, 0x00	; 0
    e0b4:	00 97       	sbiw	r24, 0x00	; 0
    e0b6:	19 f0       	breq	.+6      	; 0xe0be <mqtt_callback(char*, unsigned char*, unsigned int)+0x226>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    e0b8:	0e 94 0a 6f 	call	0xde14	; 0xde14 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    e0bc:	18 2f       	mov	r17, r24
    e0be:	c7 01       	movw	r24, r14
    e0c0:	0e 94 0a 6f 	call	0xde14	; 0xde14 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    e0c4:	f8 2e       	mov	r15, r24
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    e0c6:	d2 01       	movw	r26, r4
    e0c8:	8d 91       	ld	r24, X+
    e0ca:	9c 91       	ld	r25, X
    e0cc:	11 97       	sbiw	r26, 0x01	; 1
    e0ce:	87 30       	cpi	r24, 0x07	; 7
    e0d0:	91 05       	cpc	r25, r1
    e0d2:	48 f4       	brcc	.+18     	; 0xe0e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x24e>
    e0d4:	85 30       	cpi	r24, 0x05	; 5
    e0d6:	91 05       	cpc	r25, r1
    e0d8:	a0 f4       	brcc	.+40     	; 0xe102 <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
    e0da:	03 97       	sbiw	r24, 0x03	; 3
    e0dc:	08 f0       	brcs	.+2      	; 0xe0e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x248>
    e0de:	ea c0       	rjmp	.+468    	; 0xe2b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x41c>
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    e0e0:	70 e0       	ldi	r23, 0x00	; 0
    e0e2:	60 e0       	ldi	r22, 0x00	; 0
    e0e4:	11 c0       	rjmp	.+34     	; 0xe108 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    e0e6:	87 30       	cpi	r24, 0x07	; 7
    e0e8:	91 05       	cpc	r25, r1
    e0ea:	09 f4       	brne	.+2      	; 0xe0ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x256>
    e0ec:	dc c0       	rjmp	.+440    	; 0xe2a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x40e>
    e0ee:	0a 97       	sbiw	r24, 0x0a	; 10
    e0f0:	b9 f7       	brne	.-18     	; 0xe0e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x248>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    e0f2:	f2 01       	movw	r30, r4
    e0f4:	62 81       	ldd	r22, Z+2	; 0x02
    e0f6:	73 81       	ldd	r23, Z+3	; 0x03
    e0f8:	84 81       	ldd	r24, Z+4	; 0x04
    e0fa:	95 81       	ldd	r25, Z+5	; 0x05
    e0fc:	0e 94 97 dc 	call	0x1b92e	; 0x1b92e <__fixunssfsi>
    e100:	03 c0       	rjmp	.+6      	; 0xe108 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    e102:	f2 01       	movw	r30, r4
    e104:	62 81       	ldd	r22, Z+2	; 0x02
    e106:	73 81       	ldd	r23, Z+3	; 0x03
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2291
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    e108:	ed 2c       	mov	r14, r13
    e10a:	21 2f       	mov	r18, r17
    e10c:	4f 2d       	mov	r20, r15
    e10e:	ce 01       	movw	r24, r28
    e110:	88 57       	subi	r24, 0x78	; 120
    e112:	9f 4f       	sbci	r25, 0xFF	; 255
    e114:	0e 94 87 cc 	call	0x1990e	; 0x1990e <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    e118:	ce 01       	movw	r24, r28
    e11a:	88 57       	subi	r24, 0x78	; 120
    e11c:	9f 4f       	sbci	r25, 0xFF	; 255
    e11e:	0e 94 ae cc 	call	0x1995c	; 0x1995c <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2294
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    e122:	64 ef       	ldi	r22, 0xF4	; 244
    e124:	78 e5       	ldi	r23, 0x58	; 88
    e126:	c5 01       	movw	r24, r10
    e128:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2295
  strcat_P(str1, global_time_ntp);
    e12c:	69 e1       	ldi	r22, 0x19	; 25
    e12e:	79 e5       	ldi	r23, 0x59	; 89
    e130:	c5 01       	movw	r24, r10
    e132:	0e 94 e8 e1 	call	0x1c3d0	; 0x1c3d0 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2296
  if (strcmp(str1, topic) == 0)
    e136:	b4 01       	movw	r22, r8
    e138:	c5 01       	movw	r24, r10
    e13a:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    e13e:	89 2b       	or	r24, r25
    e140:	d1 f4       	brne	.+52     	; 0xe176 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2298
  {
    mqtt_process_message++;
    e142:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    e146:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    e14a:	01 96       	adiw	r24, 0x01	; 1
    e14c:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    e150:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2299
    if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
    e154:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <time_get_offset()>
    e158:	9e 01       	movw	r18, r28
    e15a:	28 53       	subi	r18, 0x38	; 56
    e15c:	3f 4f       	sbci	r19, 0xFF	; 255
    e15e:	48 2f       	mov	r20, r24
    e160:	62 e6       	ldi	r22, 0x62	; 98
    e162:	70 e1       	ldi	r23, 0x10	; 16
    e164:	ce 01       	movw	r24, r28
    e166:	01 96       	adiw	r24, 0x01	; 1
    e168:	0e 94 86 8a 	call	0x1150c	; 0x1150c <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)>
    e16c:	81 30       	cpi	r24, 0x01	; 1
    e16e:	09 f0       	breq	.+2      	; 0xe172 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2da>
    e170:	ce c0       	rjmp	.+412    	; 0xe30e <mqtt_callback(char*, unsigned char*, unsigned int)+0x476>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2300
      selftest_clear_0(SELFTEST_ERR_NTP);
    e172:	0e 94 ae 4e 	call	0x9d5c	; 0x9d5c <selftest_clear_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2305
    else
      selftest_set_0(SELFTEST_ERR_NTP);
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    e176:	64 ef       	ldi	r22, 0xF4	; 244
    e178:	78 e5       	ldi	r23, 0x58	; 88
    e17a:	c5 01       	movw	r24, r10
    e17c:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2306
  strcat_P(str1, global_time_offset);
    e180:	62 e0       	ldi	r22, 0x02	; 2
    e182:	79 e5       	ldi	r23, 0x59	; 89
    e184:	c5 01       	movw	r24, r10
    e186:	0e 94 e8 e1 	call	0x1c3d0	; 0x1c3d0 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
  if (strcmp(str1, topic) == 0)
    e18a:	b4 01       	movw	r22, r8
    e18c:	c5 01       	movw	r24, r10
    e18e:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    e192:	89 2b       	or	r24, r25
    e194:	79 f4       	brne	.+30     	; 0xe1b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x31c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
  {
    mqtt_process_message++;
    e196:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    e19a:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    e19e:	01 96       	adiw	r24, 0x01	; 1
    e1a0:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    e1a4:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2310
    time_set_offset(atoi(my_payload));
    e1a8:	8c e4       	ldi	r24, 0x4C	; 76
    e1aa:	99 e0       	ldi	r25, 0x09	; 9
    e1ac:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    e1b0:	0e 94 15 51 	call	0xa22a	; 0xa22a <time_set_offset(signed char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2314
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    e1b4:	64 ef       	ldi	r22, 0xF4	; 244
    e1b6:	78 e5       	ldi	r23, 0x58	; 88
    e1b8:	c5 01       	movw	r24, r10
    e1ba:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2315
  strcat(str1, device.nazev);
    e1be:	62 e1       	ldi	r22, 0x12	; 18
    e1c0:	71 e1       	ldi	r23, 0x11	; 17
    e1c2:	c5 01       	movw	r24, r10
    e1c4:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
  strcat(str1, "/tds/associate");
    e1c8:	65 ee       	ldi	r22, 0xE5	; 229
    e1ca:	75 e0       	ldi	r23, 0x05	; 5
    e1cc:	c5 01       	movw	r24, r10
    e1ce:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2317
  if (strcmp(str1, topic) == 0)
    e1d2:	b4 01       	movw	r22, r8
    e1d4:	c5 01       	movw	r24, r10
    e1d6:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2254
  char tmp1[32];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    e1da:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2317
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    e1dc:	89 2b       	or	r24, r25
    e1de:	c1 f4       	brne	.+48     	; 0xe210 <mqtt_callback(char*, unsigned char*, unsigned int)+0x378>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2319
  {
    mqtt_process_message++;
    e1e0:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    e1e4:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    e1e8:	01 96       	adiw	r24, 0x01	; 1
    e1ea:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    e1ee:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2320
    id = atoi(my_payload);
    e1f2:	8c e4       	ldi	r24, 0x4C	; 76
    e1f4:	99 e0       	ldi	r25, 0x09	; 9
    e1f6:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    e1fa:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2321
    if (tds_associate(id) == 255)
    e1fc:	0e 94 56 8e 	call	0x11cac	; 0x11cac <tds_associate(unsigned char)>
    e200:	8f 3f       	cpi	r24, 0xFF	; 255
    e202:	31 f4       	brne	.+12     	; 0xe210 <mqtt_callback(char*, unsigned char*, unsigned int)+0x378>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2322
      log_error(&mqtt_client, "tds/associate full or bad id");
    e204:	64 ef       	ldi	r22, 0xF4	; 244
    e206:	75 e0       	ldi	r23, 0x05	; 5
    e208:	89 e0       	ldi	r24, 0x09	; 9
    e20a:	9e e0       	ldi	r25, 0x0E	; 14
    e20c:	0e 94 7e 8b 	call	0x116fc	; 0x116fc <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    e210:	64 ef       	ldi	r22, 0xF4	; 244
    e212:	78 e5       	ldi	r23, 0x58	; 88
    e214:	c5 01       	movw	r24, r10
    e216:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2329
  strcat(str1, device.nazev);
    e21a:	62 e1       	ldi	r22, 0x12	; 18
    e21c:	71 e1       	ldi	r23, 0x11	; 17
    e21e:	c5 01       	movw	r24, r10
    e220:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2330
  strcat(str1, "/tds/set/");
    e224:	61 e1       	ldi	r22, 0x11	; 17
    e226:	76 e0       	ldi	r23, 0x06	; 6
    e228:	c5 01       	movw	r24, r10
    e22a:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2331
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e22e:	f5 01       	movw	r30, r10
    e230:	01 90       	ld	r0, Z+
    e232:	00 20       	and	r0, r0
    e234:	e9 f7       	brne	.-6      	; 0xe230 <mqtt_callback(char*, unsigned char*, unsigned int)+0x398>
    e236:	31 97       	sbiw	r30, 0x01	; 1
    e238:	af 01       	movw	r20, r30
    e23a:	4a 19       	sub	r20, r10
    e23c:	5b 09       	sbc	r21, r11
    e23e:	b4 01       	movw	r22, r8
    e240:	c5 01       	movw	r24, r10
    e242:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    e246:	89 2b       	or	r24, r25
    e248:	09 f0       	breq	.+2      	; 0xe24c <mqtt_callback(char*, unsigned char*, unsigned int)+0x3b4>
    e24a:	b6 c0       	rjmp	.+364    	; 0xe3b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x520>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333
  {
    mqtt_process_message++;
    e24c:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    e250:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    e254:	01 96       	adiw	r24, 0x01	; 1
    e256:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    e25a:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2335
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e25e:	f5 01       	movw	r30, r10
    e260:	01 90       	ld	r0, Z+
    e262:	00 20       	and	r0, r0
    e264:	e9 f7       	brne	.-6      	; 0xe260 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3c8>
    e266:	31 97       	sbiw	r30, 0x01	; 1
    e268:	ea 19       	sub	r30, r10
    e26a:	fb 09       	sbc	r31, r11
    e26c:	9e 2f       	mov	r25, r30
    e26e:	4e 2f       	mov	r20, r30
    e270:	84 2f       	mov	r24, r20
    e272:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2335 (discriminator 3)
    e274:	24 2f       	mov	r18, r20
    e276:	30 e0       	ldi	r19, 0x00	; 0
    e278:	d4 01       	movw	r26, r8
    e27a:	0d 90       	ld	r0, X+
    e27c:	00 20       	and	r0, r0
    e27e:	e9 f7       	brne	.-6      	; 0xe27a <mqtt_callback(char*, unsigned char*, unsigned int)+0x3e2>
    e280:	11 97       	sbiw	r26, 0x01	; 1
    e282:	a8 19       	sub	r26, r8
    e284:	b9 09       	sbc	r27, r9
    e286:	2a 17       	cp	r18, r26
    e288:	3b 07       	cpc	r19, r27
    e28a:	08 f0       	brcs	.+2      	; 0xe28e <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f6>
    e28c:	44 c0       	rjmp	.+136    	; 0xe316 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337 (discriminator 2)
    {
      str1[cnt] = topic[f];
    e28e:	d5 01       	movw	r26, r10
    e290:	a8 0f       	add	r26, r24
    e292:	b1 1d       	adc	r27, r1
    e294:	28 0d       	add	r18, r8
    e296:	39 1d       	adc	r19, r9
    e298:	f9 01       	movw	r30, r18
    e29a:	80 81       	ld	r24, Z
    e29c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2338 (discriminator 2)
      str1[cnt + 1] = 0;
    e29e:	11 96       	adiw	r26, 0x01	; 1
    e2a0:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2335 (discriminator 2)
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e2a2:	4f 5f       	subi	r20, 0xFF	; 255
    e2a4:	e5 cf       	rjmp	.-54     	; 0xe270 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3d8>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    e2a6:	12 96       	adiw	r26, 0x02	; 2
    e2a8:	6d 91       	ld	r22, X+
    e2aa:	7c 91       	ld	r23, X
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    e2ac:	71 95       	neg	r23
    e2ae:	61 95       	neg	r22
    e2b0:	71 09       	sbc	r23, r1
    e2b2:	2a cf       	rjmp	.-428    	; 0xe108 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    e2b4:	12 96       	adiw	r26, 0x02	; 2
    e2b6:	ed 91       	ld	r30, X+
    e2b8:	fc 91       	ld	r31, X
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    e2ba:	30 97       	sbiw	r30, 0x00	; 0
    e2bc:	09 f4       	brne	.+2      	; 0xe2c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x428>
    e2be:	10 cf       	rjmp	.-480    	; 0xe0e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x248>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    e2c0:	80 81       	ld	r24, Z
    e2c2:	61 e0       	ldi	r22, 0x01	; 1
    e2c4:	70 e0       	ldi	r23, 0x00	; 0
    e2c6:	84 37       	cpi	r24, 0x74	; 116
    e2c8:	09 f4       	brne	.+2      	; 0xe2cc <mqtt_callback(char*, unsigned char*, unsigned int)+0x434>
    e2ca:	1e cf       	rjmp	.-452    	; 0xe108 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    e2cc:	8b 32       	cpi	r24, 0x2B	; 43
    e2ce:	c9 f0       	breq	.+50     	; 0xe302 <mqtt_callback(char*, unsigned char*, unsigned int)+0x46a>
    e2d0:	8d 32       	cpi	r24, 0x2D	; 45
    e2d2:	c1 f4       	brne	.+48     	; 0xe304 <mqtt_callback(char*, unsigned char*, unsigned int)+0x46c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    e2d4:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    e2d6:	81 e0       	ldi	r24, 0x01	; 1
    e2d8:	70 e0       	ldi	r23, 0x00	; 0
    e2da:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    e2dc:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    e2de:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    e2e0:	20 ed       	ldi	r18, 0xD0	; 208
    e2e2:	29 0f       	add	r18, r25
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    e2e4:	2a 30       	cpi	r18, 0x0A	; 10
    e2e6:	80 f4       	brcc	.+32     	; 0xe308 <mqtt_callback(char*, unsigned char*, unsigned int)+0x470>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    e2e8:	46 9f       	mul	r20, r22
    e2ea:	90 01       	movw	r18, r0
    e2ec:	47 9f       	mul	r20, r23
    e2ee:	30 0d       	add	r19, r0
    e2f0:	11 24       	eor	r1, r1
    e2f2:	b9 01       	movw	r22, r18
    e2f4:	60 53       	subi	r22, 0x30	; 48
    e2f6:	71 09       	sbc	r23, r1
    e2f8:	69 0f       	add	r22, r25
    e2fa:	71 1d       	adc	r23, r1
    e2fc:	97 fd       	sbrc	r25, 7
    e2fe:	7a 95       	dec	r23
    e300:	ee cf       	rjmp	.-36     	; 0xe2de <mqtt_callback(char*, unsigned char*, unsigned int)+0x446>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    e302:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    e304:	80 e0       	ldi	r24, 0x00	; 0
    e306:	e8 cf       	rjmp	.-48     	; 0xe2d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x440>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    e308:	81 11       	cpse	r24, r1
    e30a:	d0 cf       	rjmp	.-96     	; 0xe2ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x414>
    e30c:	fd ce       	rjmp	.-518    	; 0xe108 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2302
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
    e30e:	81 e0       	ldi	r24, 0x01	; 1
    e310:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <selftest_set_0(unsigned char)>
    e314:	30 cf       	rjmp	.-416    	; 0xe176 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2342
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e316:	63 e7       	ldi	r22, 0x73	; 115
    e318:	73 e0       	ldi	r23, 0x03	; 3
    e31a:	c5 01       	movw	r24, r10
    e31c:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
    e320:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2341
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e322:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2343
    pch = strtok (str1, "/");
    while (pch != NULL)
    e324:	e1 14       	cp	r14, r1
    e326:	f1 04       	cpc	r15, r1
    e328:	09 f4       	brne	.+2      	; 0xe32c <mqtt_callback(char*, unsigned char*, unsigned int)+0x494>
    e32a:	46 c0       	rjmp	.+140    	; 0xe3b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x520>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2345
    {
      if (cnt == 0) id = atoi(pch);
    e32c:	01 11       	cpse	r16, r1
    e32e:	0d c0       	rjmp	.+26     	; 0xe34a <mqtt_callback(char*, unsigned char*, unsigned int)+0x4b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2345 (discriminator 1)
    e330:	c7 01       	movw	r24, r14
    e332:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    e336:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2346 (discriminator 1)
      if (id < HW_ONEWIRE_MAXROMS)
    e338:	86 30       	cpi	r24, 0x06	; 6
    e33a:	a8 f1       	brcs	.+106    	; 0xe3a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2354
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    e33c:	62 e5       	ldi	r22, 0x52	; 82
    e33e:	76 e0       	ldi	r23, 0x06	; 6
    e340:	89 e0       	ldi	r24, 0x09	; 9
    e342:	9e e0       	ldi	r25, 0x0E	; 14
    e344:	0e 94 7e 8b 	call	0x116fc	; 0x116fc <log_error(PubSubClient*, char*)>
    e348:	2e c0       	rjmp	.+92     	; 0xe3a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2346
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    e34a:	16 30       	cpi	r17, 0x06	; 6
    e34c:	b8 f7       	brcc	.-18     	; 0xe33c <mqtt_callback(char*, unsigned char*, unsigned int)+0x4a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2348
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    e34e:	01 30       	cpi	r16, 0x01	; 1
    e350:	51 f5       	brne	.+84     	; 0xe3a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2348 (discriminator 1)
    e352:	63 eb       	ldi	r22, 0xB3	; 179
    e354:	73 e0       	ldi	r23, 0x03	; 3
    e356:	c7 01       	movw	r24, r14
    e358:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    e35c:	89 2b       	or	r24, r25
    e35e:	29 f4       	brne	.+10     	; 0xe36a <mqtt_callback(char*, unsigned char*, unsigned int)+0x4d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2348 (discriminator 2)
    e360:	6c e4       	ldi	r22, 0x4C	; 76
    e362:	79 e0       	ldi	r23, 0x09	; 9
    e364:	81 2f       	mov	r24, r17
    e366:	0e 94 d4 8c 	call	0x119a8	; 0x119a8 <tds_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2349
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    e36a:	66 ee       	ldi	r22, 0xE6	; 230
    e36c:	74 e0       	ldi	r23, 0x04	; 4
    e36e:	c7 01       	movw	r24, r14
    e370:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    e374:	89 2b       	or	r24, r25
    e376:	41 f4       	brne	.+16     	; 0xe388 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2349 (discriminator 2)
    e378:	8c e4       	ldi	r24, 0x4C	; 76
    e37a:	99 e0       	ldi	r25, 0x09	; 9
    e37c:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    e380:	bc 01       	movw	r22, r24
    e382:	81 2f       	mov	r24, r17
    e384:	0e 94 ff 8c 	call	0x119fe	; 0x119fe <tds_set_offset(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2350
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    e388:	6f eb       	ldi	r22, 0xBF	; 191
    e38a:	73 e0       	ldi	r23, 0x03	; 3
    e38c:	c7 01       	movw	r24, r14
    e38e:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    e392:	89 2b       	or	r24, r25
    e394:	41 f4       	brne	.+16     	; 0xe3a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2350 (discriminator 2)
    e396:	8c e4       	ldi	r24, 0x4C	; 76
    e398:	99 e0       	ldi	r25, 0x09	; 9
    e39a:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    e39e:	68 2f       	mov	r22, r24
    e3a0:	81 2f       	mov	r24, r17
    e3a2:	0e 94 41 8d 	call	0x11a82	; 0x11a82 <tds_set_period(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2356
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    e3a6:	63 e7       	ldi	r22, 0x73	; 115
    e3a8:	73 e0       	ldi	r23, 0x03	; 3
    e3aa:	90 e0       	ldi	r25, 0x00	; 0
    e3ac:	80 e0       	ldi	r24, 0x00	; 0
    e3ae:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
    e3b2:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2357
      cnt++;
    e3b4:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2343
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    e3b6:	b6 cf       	rjmp	.-148    	; 0xe324 <mqtt_callback(char*, unsigned char*, unsigned int)+0x48c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2362
      cnt++;
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    e3b8:	64 ef       	ldi	r22, 0xF4	; 244
    e3ba:	78 e5       	ldi	r23, 0x58	; 88
    e3bc:	c5 01       	movw	r24, r10
    e3be:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2363
  strcat(str1, device.nazev);
    e3c2:	62 e1       	ldi	r22, 0x12	; 18
    e3c4:	71 e1       	ldi	r23, 0x11	; 17
    e3c6:	c5 01       	movw	r24, r10
    e3c8:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2364
  strcat(str1, "/tds/clear");
    e3cc:	6b e1       	ldi	r22, 0x1B	; 27
    e3ce:	76 e0       	ldi	r23, 0x06	; 6
    e3d0:	c5 01       	movw	r24, r10
    e3d2:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2365
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e3d6:	f5 01       	movw	r30, r10
    e3d8:	01 90       	ld	r0, Z+
    e3da:	00 20       	and	r0, r0
    e3dc:	e9 f7       	brne	.-6      	; 0xe3d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x540>
    e3de:	31 97       	sbiw	r30, 0x01	; 1
    e3e0:	af 01       	movw	r20, r30
    e3e2:	4a 19       	sub	r20, r10
    e3e4:	5b 09       	sbc	r21, r11
    e3e6:	b4 01       	movw	r22, r8
    e3e8:	c5 01       	movw	r24, r10
    e3ea:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    e3ee:	89 2b       	or	r24, r25
    e3f0:	99 f4       	brne	.+38     	; 0xe418 <mqtt_callback(char*, unsigned char*, unsigned int)+0x580>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2367
  {
    mqtt_process_message++;
    e3f2:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    e3f6:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    e3fa:	01 96       	adiw	r24, 0x01	; 1
    e3fc:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    e400:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2368
    id = atoi(my_payload);
    e404:	8c e4       	ldi	r24, 0x4C	; 76
    e406:	99 e0       	ldi	r25, 0x09	; 9
    e408:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    e40c:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2369
    if (id < HW_ONEWIRE_MAXROMS)
    e40e:	86 30       	cpi	r24, 0x06	; 6
    e410:	08 f0       	brcs	.+2      	; 0xe414 <mqtt_callback(char*, unsigned char*, unsigned int)+0x57c>
    e412:	83 c0       	rjmp	.+262    	; 0xe51a <mqtt_callback(char*, unsigned char*, unsigned int)+0x682>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2370
      tds_set_clear(id);
    e414:	0e 94 db 8d 	call	0x11bb6	; 0x11bb6 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2379
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///

  //// thermctl-in/XXXXX/rtds/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
    e418:	64 ef       	ldi	r22, 0xF4	; 244
    e41a:	78 e5       	ldi	r23, 0x58	; 88
    e41c:	c5 01       	movw	r24, r10
    e41e:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2380
  strcat(str1, device.nazev);
    e422:	62 e1       	ldi	r22, 0x12	; 18
    e424:	71 e1       	ldi	r23, 0x11	; 17
    e426:	c5 01       	movw	r24, r10
    e428:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2381
  strcat(str1, "/rtds/register");
    e42c:	67 e3       	ldi	r22, 0x37	; 55
    e42e:	76 e0       	ldi	r23, 0x06	; 6
    e430:	c5 01       	movw	r24, r10
    e432:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2382
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e436:	f5 01       	movw	r30, r10
    e438:	01 90       	ld	r0, Z+
    e43a:	00 20       	and	r0, r0
    e43c:	e9 f7       	brne	.-6      	; 0xe438 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5a0>
    e43e:	31 97       	sbiw	r30, 0x01	; 1
    e440:	af 01       	movw	r20, r30
    e442:	4a 19       	sub	r20, r10
    e444:	5b 09       	sbc	r21, r11
    e446:	b4 01       	movw	r22, r8
    e448:	c5 01       	movw	r24, r10
    e44a:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    e44e:	89 2b       	or	r24, r25
    e450:	d1 f4       	brne	.+52     	; 0xe486 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2384
  {
    mqtt_process_message++;
    e452:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    e456:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    e45a:	01 96       	adiw	r24, 0x01	; 1
    e45c:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    e460:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2385
    if (remote_tds_name_exist(my_payload) == 255)
    e464:	8c e4       	ldi	r24, 0x4C	; 76
    e466:	99 e0       	ldi	r25, 0x09	; 9
    e468:	0e 94 3a 47 	call	0x8e74	; 0x8e74 <remote_tds_name_exist(char*)>
    e46c:	8f 3f       	cpi	r24, 0xFF	; 255
    e46e:	59 f4       	brne	.+22     	; 0xe486 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2387
    {
      id = remote_tds_find_free();
    e470:	0e 94 f6 46 	call	0x8dec	; 0x8dec <remote_tds_find_free()>
    e474:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2388
      remote_tds_set_complete(id, 1, my_payload);
    e476:	4c e4       	ldi	r20, 0x4C	; 76
    e478:	59 e0       	ldi	r21, 0x09	; 9
    e47a:	61 e0       	ldi	r22, 0x01	; 1
    e47c:	0e 94 47 46 	call	0x8c8e	; 0x8c8e <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2389
      remote_tds_subscibe_topic(id);
    e480:	81 2f       	mov	r24, r17
    e482:	0e 94 79 46 	call	0x8cf2	; 0x8cf2 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2395
    }
    ///TODO - vratit ze jiz existuje
  }

  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    e486:	64 ef       	ldi	r22, 0xF4	; 244
    e488:	78 e5       	ldi	r23, 0x58	; 88
    e48a:	c5 01       	movw	r24, r10
    e48c:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2396
  strcat(str1, device.nazev);
    e490:	62 e1       	ldi	r22, 0x12	; 18
    e492:	71 e1       	ldi	r23, 0x11	; 17
    e494:	c5 01       	movw	r24, r10
    e496:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2397
  strcat(str1, "/rtds/set/");
    e49a:	66 e4       	ldi	r22, 0x46	; 70
    e49c:	76 e0       	ldi	r23, 0x06	; 6
    e49e:	c5 01       	movw	r24, r10
    e4a0:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2398
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e4a4:	f5 01       	movw	r30, r10
    e4a6:	01 90       	ld	r0, Z+
    e4a8:	00 20       	and	r0, r0
    e4aa:	e9 f7       	brne	.-6      	; 0xe4a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x60e>
    e4ac:	31 97       	sbiw	r30, 0x01	; 1
    e4ae:	af 01       	movw	r20, r30
    e4b0:	4a 19       	sub	r20, r10
    e4b2:	5b 09       	sbc	r21, r11
    e4b4:	b4 01       	movw	r22, r8
    e4b6:	c5 01       	movw	r24, r10
    e4b8:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    e4bc:	89 2b       	or	r24, r25
    e4be:	09 f0       	breq	.+2      	; 0xe4c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x62a>
    e4c0:	6e c0       	rjmp	.+220    	; 0xe59e <mqtt_callback(char*, unsigned char*, unsigned int)+0x706>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2400
  {
    mqtt_process_message++;
    e4c2:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    e4c6:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    e4ca:	01 96       	adiw	r24, 0x01	; 1
    e4cc:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    e4d0:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2402
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e4d4:	f5 01       	movw	r30, r10
    e4d6:	01 90       	ld	r0, Z+
    e4d8:	00 20       	and	r0, r0
    e4da:	e9 f7       	brne	.-6      	; 0xe4d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x63e>
    e4dc:	31 97       	sbiw	r30, 0x01	; 1
    e4de:	ea 19       	sub	r30, r10
    e4e0:	fb 09       	sbc	r31, r11
    e4e2:	9e 2f       	mov	r25, r30
    e4e4:	4e 2f       	mov	r20, r30
    e4e6:	84 2f       	mov	r24, r20
    e4e8:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2402 (discriminator 3)
    e4ea:	24 2f       	mov	r18, r20
    e4ec:	30 e0       	ldi	r19, 0x00	; 0
    e4ee:	d4 01       	movw	r26, r8
    e4f0:	0d 90       	ld	r0, X+
    e4f2:	00 20       	and	r0, r0
    e4f4:	e9 f7       	brne	.-6      	; 0xe4f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x658>
    e4f6:	11 97       	sbiw	r26, 0x01	; 1
    e4f8:	a8 19       	sub	r26, r8
    e4fa:	b9 09       	sbc	r27, r9
    e4fc:	2a 17       	cp	r18, r26
    e4fe:	3b 07       	cpc	r19, r27
    e500:	98 f4       	brcc	.+38     	; 0xe528 <mqtt_callback(char*, unsigned char*, unsigned int)+0x690>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2404 (discriminator 2)
    {
      str1[cnt] = topic[f];
    e502:	d5 01       	movw	r26, r10
    e504:	a8 0f       	add	r26, r24
    e506:	b1 1d       	adc	r27, r1
    e508:	28 0d       	add	r18, r8
    e50a:	39 1d       	adc	r19, r9
    e50c:	f9 01       	movw	r30, r18
    e50e:	80 81       	ld	r24, Z
    e510:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2405 (discriminator 2)
      str1[cnt + 1] = 0;
    e512:	11 96       	adiw	r26, 0x01	; 1
    e514:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2402 (discriminator 2)
  strcat(str1, "/rtds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e516:	4f 5f       	subi	r20, 0xFF	; 255
    e518:	e6 cf       	rjmp	.-52     	; 0xe4e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2372
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    e51a:	66 e2       	ldi	r22, 0x26	; 38
    e51c:	76 e0       	ldi	r23, 0x06	; 6
    e51e:	89 e0       	ldi	r24, 0x09	; 9
    e520:	9e e0       	ldi	r25, 0x0E	; 14
    e522:	0e 94 7e 8b 	call	0x116fc	; 0x116fc <log_error(PubSubClient*, char*)>
    e526:	78 cf       	rjmp	.-272    	; 0xe418 <mqtt_callback(char*, unsigned char*, unsigned int)+0x580>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2409
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e528:	63 e7       	ldi	r22, 0x73	; 115
    e52a:	73 e0       	ldi	r23, 0x03	; 3
    e52c:	c5 01       	movw	r24, r10
    e52e:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2408
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e532:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2410
    pch = strtok (str1, "/");
    while (pch != NULL)
    e534:	00 97       	sbiw	r24, 0x00	; 0
    e536:	99 f1       	breq	.+102    	; 0xe59e <mqtt_callback(char*, unsigned char*, unsigned int)+0x706>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2412
    {
      if (cnt == 0) id = atoi(pch);
    e538:	01 11       	cpse	r16, r1
    e53a:	0b c0       	rjmp	.+22     	; 0xe552 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2412 (discriminator 1)
    e53c:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    e540:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2426
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
    e542:	63 e7       	ldi	r22, 0x73	; 115
    e544:	73 e0       	ldi	r23, 0x03	; 3
    e546:	90 e0       	ldi	r25, 0x00	; 0
    e548:	80 e0       	ldi	r24, 0x00	; 0
    e54a:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2427
      cnt++;
    e54e:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2410
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    e550:	f1 cf       	rjmp	.-30     	; 0xe534 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2413
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
    e552:	01 30       	cpi	r16, 0x01	; 1
    e554:	b1 f7       	brne	.-20     	; 0xe542 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2413 (discriminator 1)
    e556:	63 eb       	ldi	r22, 0xB3	; 179
    e558:	73 e0       	ldi	r23, 0x03	; 3
    e55a:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    e55e:	89 2b       	or	r24, r25
    e560:	81 f7       	brne	.-32     	; 0xe542 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2415
      {
        remote_tds_get_active(id, &active);
    e562:	be 01       	movw	r22, r28
    e564:	61 53       	subi	r22, 0x31	; 49
    e566:	7f 4f       	sbci	r23, 0xFF	; 255
    e568:	81 2f       	mov	r24, r17
    e56a:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2416
        if (active == 0)
    e56e:	c1 53       	subi	r28, 0x31	; 49
    e570:	df 4f       	sbci	r29, 0xFF	; 255
    e572:	88 81       	ld	r24, Y
    e574:	cf 5c       	subi	r28, 0xCF	; 207
    e576:	d0 40       	sbci	r29, 0x00	; 0
    e578:	81 11       	cpse	r24, r1
    e57a:	0a c0       	rjmp	.+20     	; 0xe590 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2418
        {
          remote_tds_set_complete(id, 1, my_payload);
    e57c:	4c e4       	ldi	r20, 0x4C	; 76
    e57e:	59 e0       	ldi	r21, 0x09	; 9
    e580:	61 e0       	ldi	r22, 0x01	; 1
    e582:	81 2f       	mov	r24, r17
    e584:	0e 94 47 46 	call	0x8c8e	; 0x8c8e <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2419
          remote_tds_subscibe_topic(id);
    e588:	81 2f       	mov	r24, r17
    e58a:	0e 94 79 46 	call	0x8cf2	; 0x8cf2 <remote_tds_subscibe_topic(unsigned char)>
    e58e:	d9 cf       	rjmp	.-78     	; 0xe542 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2423
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
    e590:	61 e5       	ldi	r22, 0x51	; 81
    e592:	76 e0       	ldi	r23, 0x06	; 6
    e594:	89 e0       	ldi	r24, 0x09	; 9
    e596:	9e e0       	ldi	r25, 0x0E	; 14
    e598:	0e 94 7e 8b 	call	0x116fc	; 0x116fc <log_error(PubSubClient*, char*)>
    e59c:	d2 cf       	rjmp	.-92     	; 0xe542 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2433
    }
  }

  ////
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    e59e:	64 ef       	ldi	r22, 0xF4	; 244
    e5a0:	78 e5       	ldi	r23, 0x58	; 88
    e5a2:	c5 01       	movw	r24, r10
    e5a4:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
  strcat(str1, device.nazev);
    e5a8:	62 e1       	ldi	r22, 0x12	; 18
    e5aa:	71 e1       	ldi	r23, 0x11	; 17
    e5ac:	c5 01       	movw	r24, r10
    e5ae:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2435
  strcat(str1, "/rtds/clear");
    e5b2:	61 e6       	ldi	r22, 0x61	; 97
    e5b4:	76 e0       	ldi	r23, 0x06	; 6
    e5b6:	c5 01       	movw	r24, r10
    e5b8:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e5bc:	f5 01       	movw	r30, r10
    e5be:	01 90       	ld	r0, Z+
    e5c0:	00 20       	and	r0, r0
    e5c2:	e9 f7       	brne	.-6      	; 0xe5be <mqtt_callback(char*, unsigned char*, unsigned int)+0x726>
    e5c4:	31 97       	sbiw	r30, 0x01	; 1
    e5c6:	af 01       	movw	r20, r30
    e5c8:	4a 19       	sub	r20, r10
    e5ca:	5b 09       	sbc	r21, r11
    e5cc:	b4 01       	movw	r22, r8
    e5ce:	c5 01       	movw	r24, r10
    e5d0:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    e5d4:	89 2b       	or	r24, r25
    e5d6:	99 f4       	brne	.+38     	; 0xe5fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
  {
    mqtt_process_message++;
    e5d8:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    e5dc:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    e5e0:	01 96       	adiw	r24, 0x01	; 1
    e5e2:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    e5e6:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
    id = atoi(my_payload);
    e5ea:	8c e4       	ldi	r24, 0x4C	; 76
    e5ec:	99 e0       	ldi	r25, 0x09	; 9
    e5ee:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    e5f2:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
    remote_tds_unsubscibe_topic(id);
    e5f4:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <remote_tds_unsubscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2442
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
    e5f8:	81 2f       	mov	r24, r17
    e5fa:	0e 94 54 46 	call	0x8ca8	; 0x8ca8 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2446
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    e5fe:	64 ef       	ldi	r22, 0xF4	; 244
    e600:	78 e5       	ldi	r23, 0x58	; 88
    e602:	c5 01       	movw	r24, r10
    e604:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2447
  strcat(str1, device.nazev);
    e608:	62 e1       	ldi	r22, 0x12	; 18
    e60a:	71 e1       	ldi	r23, 0x11	; 17
    e60c:	c5 01       	movw	r24, r10
    e60e:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
  strcat(str1, "/rtds/get");
    e612:	6d e6       	ldi	r22, 0x6D	; 109
    e614:	76 e0       	ldi	r23, 0x06	; 6
    e616:	c5 01       	movw	r24, r10
    e618:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2449
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e61c:	f5 01       	movw	r30, r10
    e61e:	01 90       	ld	r0, Z+
    e620:	00 20       	and	r0, r0
    e622:	e9 f7       	brne	.-6      	; 0xe61e <mqtt_callback(char*, unsigned char*, unsigned int)+0x786>
    e624:	31 97       	sbiw	r30, 0x01	; 1
    e626:	af 01       	movw	r20, r30
    e628:	4a 19       	sub	r20, r10
    e62a:	5b 09       	sbc	r21, r11
    e62c:	b4 01       	movw	r22, r8
    e62e:	c5 01       	movw	r24, r10
    e630:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    e634:	89 2b       	or	r24, r25
    e636:	11 f4       	brne	.+4      	; 0xe63c <mqtt_callback(char*, unsigned char*, unsigned int)+0x7a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2451
  {
    send_mqtt_remote_tds_status();
    e638:	0e 94 7a 4d 	call	0x9af4	; 0x9af4 <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2455
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy(str1, "/rtds/");
    e63c:	6e e6       	ldi	r22, 0x6E	; 110
    e63e:	73 e0       	ldi	r23, 0x03	; 3
    e640:	c5 01       	movw	r24, r10
    e642:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2456
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e646:	f5 01       	movw	r30, r10
    e648:	01 90       	ld	r0, Z+
    e64a:	00 20       	and	r0, r0
    e64c:	e9 f7       	brne	.-6      	; 0xe648 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7b0>
    e64e:	31 97       	sbiw	r30, 0x01	; 1
    e650:	af 01       	movw	r20, r30
    e652:	4a 19       	sub	r20, r10
    e654:	5b 09       	sbc	r21, r11
    e656:	b4 01       	movw	r22, r8
    e658:	c5 01       	movw	r24, r10
    e65a:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    e65e:	89 2b       	or	r24, r25
    e660:	09 f0       	breq	.+2      	; 0xe664 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7cc>
    e662:	55 c0       	rjmp	.+170    	; 0xe70e <mqtt_callback(char*, unsigned char*, unsigned int)+0x876>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2458
  {
    mqtt_process_message++;
    e664:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    e668:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    e66c:	01 96       	adiw	r24, 0x01	; 1
    e66e:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    e672:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2460
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e676:	f5 01       	movw	r30, r10
    e678:	01 90       	ld	r0, Z+
    e67a:	00 20       	and	r0, r0
    e67c:	e9 f7       	brne	.-6      	; 0xe678 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7e0>
    e67e:	31 97       	sbiw	r30, 0x01	; 1
    e680:	ea 19       	sub	r30, r10
    e682:	fb 09       	sbc	r31, r11
    e684:	9e 2f       	mov	r25, r30
    e686:	4e 2f       	mov	r20, r30
    e688:	84 2f       	mov	r24, r20
    e68a:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2460 (discriminator 3)
    e68c:	24 2f       	mov	r18, r20
    e68e:	30 e0       	ldi	r19, 0x00	; 0
    e690:	d4 01       	movw	r26, r8
    e692:	0d 90       	ld	r0, X+
    e694:	00 20       	and	r0, r0
    e696:	e9 f7       	brne	.-6      	; 0xe692 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7fa>
    e698:	11 97       	sbiw	r26, 0x01	; 1
    e69a:	a8 19       	sub	r26, r8
    e69c:	b9 09       	sbc	r27, r9
    e69e:	2a 17       	cp	r18, r26
    e6a0:	3b 07       	cpc	r19, r27
    e6a2:	60 f4       	brcc	.+24     	; 0xe6bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x824>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2462 (discriminator 2)
    {
      str1[cnt] = topic[f];
    e6a4:	d5 01       	movw	r26, r10
    e6a6:	a8 0f       	add	r26, r24
    e6a8:	b1 1d       	adc	r27, r1
    e6aa:	28 0d       	add	r18, r8
    e6ac:	39 1d       	adc	r19, r9
    e6ae:	f9 01       	movw	r30, r18
    e6b0:	80 81       	ld	r24, Z
    e6b2:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2463 (discriminator 2)
      str1[cnt + 1] = 0;
    e6b4:	11 96       	adiw	r26, 0x01	; 1
    e6b6:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2460 (discriminator 2)
  strcpy(str1, "/rtds/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e6b8:	4f 5f       	subi	r20, 0xFF	; 255
    e6ba:	e6 cf       	rjmp	.-52     	; 0xe688 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2466
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e6bc:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2468
    {
      uint8_t active = 0;
    e6be:	c8 57       	subi	r28, 0x78	; 120
    e6c0:	df 4f       	sbci	r29, 0xFF	; 255
    e6c2:	18 82       	st	Y, r1
    e6c4:	c8 58       	subi	r28, 0x88	; 136
    e6c6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2469
      remote_tds_get_complete(idx, &active, tmp1);
    e6c8:	ae 01       	movw	r20, r28
    e6ca:	48 55       	subi	r20, 0x58	; 88
    e6cc:	5f 4f       	sbci	r21, 0xFF	; 255
    e6ce:	be 01       	movw	r22, r28
    e6d0:	68 57       	subi	r22, 0x78	; 120
    e6d2:	7f 4f       	sbci	r23, 0xFF	; 255
    e6d4:	80 2f       	mov	r24, r16
    e6d6:	0e 94 ce 44 	call	0x899c	; 0x899c <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2470
      if (active == 1 && strcmp(tmp1, str1) == 0)
    e6da:	c8 57       	subi	r28, 0x78	; 120
    e6dc:	df 4f       	sbci	r29, 0xFF	; 255
    e6de:	88 81       	ld	r24, Y
    e6e0:	c8 58       	subi	r28, 0x88	; 136
    e6e2:	d0 40       	sbci	r29, 0x00	; 0
    e6e4:	81 30       	cpi	r24, 0x01	; 1
    e6e6:	81 f4       	brne	.+32     	; 0xe708 <mqtt_callback(char*, unsigned char*, unsigned int)+0x870>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2470 (discriminator 1)
    e6e8:	b5 01       	movw	r22, r10
    e6ea:	ce 01       	movw	r24, r28
    e6ec:	88 55       	subi	r24, 0x58	; 88
    e6ee:	9f 4f       	sbci	r25, 0xFF	; 255
    e6f0:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    e6f4:	89 2b       	or	r24, r25
    e6f6:	41 f4       	brne	.+16     	; 0xe708 <mqtt_callback(char*, unsigned char*, unsigned int)+0x870>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2472
      {
        remote_tds_set_data(idx, atoi(my_payload));
    e6f8:	8c e4       	ldi	r24, 0x4C	; 76
    e6fa:	99 e0       	ldi	r25, 0x09	; 9
    e6fc:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    e700:	bc 01       	movw	r22, r24
    e702:	80 2f       	mov	r24, r16
    e704:	0e 94 c6 47 	call	0x8f8c	; 0x8f8c <remote_tds_set_data(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2466 (discriminator 2)
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e708:	0f 5f       	subi	r16, 0xFF	; 255
    e70a:	0a 30       	cpi	r16, 0x0A	; 10
    e70c:	c1 f6       	brne	.-80     	; 0xe6be <mqtt_callback(char*, unsigned char*, unsigned int)+0x826>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
      {
        remote_tds_set_data(idx, atoi(my_payload));
      }
    }
  }
  strcpy(str1, "/rtds/list");
    e70e:	67 e7       	ldi	r22, 0x77	; 119
    e710:	76 e0       	ldi	r23, 0x06	; 6
    e712:	c5 01       	movw	r24, r10
    e714:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2491
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    e718:	64 ef       	ldi	r22, 0xF4	; 244
    e71a:	78 e5       	ldi	r23, 0x58	; 88
    e71c:	c5 01       	movw	r24, r10
    e71e:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2492
  strcat(str1, device.nazev);
    e722:	62 e1       	ldi	r22, 0x12	; 18
    e724:	71 e1       	ldi	r23, 0x11	; 17
    e726:	c5 01       	movw	r24, r10
    e728:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2493
  strcat(str1, "/prog/set/");
    e72c:	62 e8       	ldi	r22, 0x82	; 130
    e72e:	76 e0       	ldi	r23, 0x06	; 6
    e730:	c5 01       	movw	r24, r10
    e732:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2494
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e736:	f5 01       	movw	r30, r10
    e738:	01 90       	ld	r0, Z+
    e73a:	00 20       	and	r0, r0
    e73c:	e9 f7       	brne	.-6      	; 0xe738 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8a0>
    e73e:	31 97       	sbiw	r30, 0x01	; 1
    e740:	af 01       	movw	r20, r30
    e742:	4a 19       	sub	r20, r10
    e744:	5b 09       	sbc	r21, r11
    e746:	b4 01       	movw	r22, r8
    e748:	c5 01       	movw	r24, r10
    e74a:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    e74e:	89 2b       	or	r24, r25
    e750:	09 f0       	breq	.+2      	; 0xe754 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8bc>
    e752:	45 c0       	rjmp	.+138    	; 0xe7de <mqtt_callback(char*, unsigned char*, unsigned int)+0x946>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2496
  {
    mqtt_process_message++;
    e754:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    e758:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    e75c:	01 96       	adiw	r24, 0x01	; 1
    e75e:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    e762:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2498
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e766:	f5 01       	movw	r30, r10
    e768:	01 90       	ld	r0, Z+
    e76a:	00 20       	and	r0, r0
    e76c:	e9 f7       	brne	.-6      	; 0xe768 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d0>
    e76e:	31 97       	sbiw	r30, 0x01	; 1
    e770:	ea 19       	sub	r30, r10
    e772:	fb 09       	sbc	r31, r11
    e774:	9e 2f       	mov	r25, r30
    e776:	4e 2f       	mov	r20, r30
    e778:	84 2f       	mov	r24, r20
    e77a:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2498 (discriminator 3)
    e77c:	24 2f       	mov	r18, r20
    e77e:	30 e0       	ldi	r19, 0x00	; 0
    e780:	d4 01       	movw	r26, r8
    e782:	0d 90       	ld	r0, X+
    e784:	00 20       	and	r0, r0
    e786:	e9 f7       	brne	.-6      	; 0xe782 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ea>
    e788:	11 97       	sbiw	r26, 0x01	; 1
    e78a:	a8 19       	sub	r26, r8
    e78c:	b9 09       	sbc	r27, r9
    e78e:	2a 17       	cp	r18, r26
    e790:	3b 07       	cpc	r19, r27
    e792:	60 f4       	brcc	.+24     	; 0xe7ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x914>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2500 (discriminator 2)
    {
      str1[cnt] = topic[f];
    e794:	d5 01       	movw	r26, r10
    e796:	a8 0f       	add	r26, r24
    e798:	b1 1d       	adc	r27, r1
    e79a:	28 0d       	add	r18, r8
    e79c:	39 1d       	adc	r19, r9
    e79e:	f9 01       	movw	r30, r18
    e7a0:	80 81       	ld	r24, Z
    e7a2:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2501 (discriminator 2)
      str1[cnt + 1] = 0;
    e7a4:	11 96       	adiw	r26, 0x01	; 1
    e7a6:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2498 (discriminator 2)
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e7a8:	4f 5f       	subi	r20, 0xFF	; 255
    e7aa:	e6 cf       	rjmp	.-52     	; 0xe778 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2505
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e7ac:	63 e7       	ldi	r22, 0x73	; 115
    e7ae:	73 e0       	ldi	r23, 0x03	; 3
    e7b0:	c5 01       	movw	r24, r10
    e7b2:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
    e7b6:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2504
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e7b8:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2506
    pch = strtok (str1, "/");
    while (pch != NULL)
    e7ba:	e1 14       	cp	r14, r1
    e7bc:	f1 04       	cpc	r15, r1
    e7be:	79 f0       	breq	.+30     	; 0xe7de <mqtt_callback(char*, unsigned char*, unsigned int)+0x946>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508
    {
      if (cnt == 0) id = atoi(pch);
    e7c0:	01 11       	cpse	r16, r1
    e7c2:	bc c0       	rjmp	.+376    	; 0xe93c <mqtt_callback(char*, unsigned char*, unsigned int)+0xaa4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508 (discriminator 1)
    e7c4:	c7 01       	movw	r24, r14
    e7c6:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    e7ca:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509 (discriminator 1)
      if (id < AVAILABLE_PROGRAM)
    e7cc:	88 30       	cpi	r24, 0x08	; 8
    e7ce:	08 f4       	brcc	.+2      	; 0xe7d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
    e7d0:	d5 c0       	rjmp	.+426    	; 0xe97c <mqtt_callback(char*, unsigned char*, unsigned int)+0xae4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2516
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    e7d2:	6d e8       	ldi	r22, 0x8D	; 141
    e7d4:	76 e0       	ldi	r23, 0x06	; 6
    e7d6:	89 e0       	ldi	r24, 0x09	; 9
    e7d8:	9e e0       	ldi	r25, 0x0E	; 14
    e7da:	0e 94 7e 8b 	call	0x116fc	; 0x116fc <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2524
      pch = strtok (NULL, "/");
      cnt++;
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    e7de:	64 ef       	ldi	r22, 0xF4	; 244
    e7e0:	78 e5       	ldi	r23, 0x58	; 88
    e7e2:	c5 01       	movw	r24, r10
    e7e4:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2525
  strcat(str1, device.nazev);
    e7e8:	62 e1       	ldi	r22, 0x12	; 18
    e7ea:	71 e1       	ldi	r23, 0x11	; 17
    e7ec:	c5 01       	movw	r24, r10
    e7ee:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2526
  strcat(str1, "/prog/clear");
    e7f2:	6d e9       	ldi	r22, 0x9D	; 157
    e7f4:	76 e0       	ldi	r23, 0x06	; 6
    e7f6:	c5 01       	movw	r24, r10
    e7f8:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2527
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e7fc:	f5 01       	movw	r30, r10
    e7fe:	01 90       	ld	r0, Z+
    e800:	00 20       	and	r0, r0
    e802:	e9 f7       	brne	.-6      	; 0xe7fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x966>
    e804:	31 97       	sbiw	r30, 0x01	; 1
    e806:	af 01       	movw	r20, r30
    e808:	4a 19       	sub	r20, r10
    e80a:	5b 09       	sbc	r21, r11
    e80c:	b4 01       	movw	r22, r8
    e80e:	c5 01       	movw	r24, r10
    e810:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    e814:	89 2b       	or	r24, r25
    e816:	09 f0       	breq	.+2      	; 0xe81a <mqtt_callback(char*, unsigned char*, unsigned int)+0x982>
    e818:	47 c0       	rjmp	.+142    	; 0xe8a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2529
  {
    mqtt_process_message++;
    e81a:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    e81e:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    e822:	01 96       	adiw	r24, 0x01	; 1
    e824:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    e828:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2530
    id = atoi(my_payload);
    e82c:	8c e4       	ldi	r24, 0x4C	; 76
    e82e:	99 e0       	ldi	r25, 0x09	; 9
    e830:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    e834:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2531
    if (id < AVAILABLE_PROGRAM)
    e836:	88 30       	cpi	r24, 0x08	; 8
    e838:	08 f0       	brcs	.+2      	; 0xe83c <mqtt_callback(char*, unsigned char*, unsigned int)+0x9a4>
    e83a:	a9 c0       	rjmp	.+338    	; 0xe98e <mqtt_callback(char*, unsigned char*, unsigned int)+0xaf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2533
    {
      strcpy_P(tmp2, text_prog);
    e83c:	6f e8       	ldi	r22, 0x8F	; 143
    e83e:	79 e5       	ldi	r23, 0x59	; 89
    e840:	ce 01       	movw	r24, r28
    e842:	88 57       	subi	r24, 0x78	; 120
    e844:	9f 4f       	sbci	r25, 0xFF	; 255
    e846:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2534
      thermostat_program_set_name(id, tmp2);
    e84a:	be 01       	movw	r22, r28
    e84c:	68 57       	subi	r22, 0x78	; 120
    e84e:	7f 4f       	sbci	r23, 0xFF	; 255
    e850:	81 2f       	mov	r24, r17
    e852:	0e 94 95 93 	call	0x1272a	; 0x1272a <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2535
      thermostat_program_set_active(id, PROG_FREE);
    e856:	6f ef       	ldi	r22, 0xFF	; 255
    e858:	81 2f       	mov	r24, r17
    e85a:	0e 94 c5 93 	call	0x1278a	; 0x1278a <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2536
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    e85e:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2538 (discriminator 2)
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    e860:	c1 2c       	mov	r12, r1
    e862:	e1 2c       	mov	r14, r1
    e864:	00 e0       	ldi	r16, 0x00	; 0
    e866:	20 e0       	ldi	r18, 0x00	; 0
    e868:	40 e0       	ldi	r20, 0x00	; 0
    e86a:	6f 2d       	mov	r22, r15
    e86c:	81 2f       	mov	r24, r17
    e86e:	0e 94 20 94 	call	0x12840	; 0x12840 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2539 (discriminator 2)
        thermostat_program_set_threshold(id, progid, 220);
    e872:	4c ed       	ldi	r20, 0xDC	; 220
    e874:	50 e0       	ldi	r21, 0x00	; 0
    e876:	6f 2d       	mov	r22, r15
    e878:	81 2f       	mov	r24, r17
    e87a:	0e 94 7e 94 	call	0x128fc	; 0x128fc <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2540 (discriminator 2)
        thermostat_program_set_week(id, progid, 0);
    e87e:	40 e0       	ldi	r20, 0x00	; 0
    e880:	6f 2d       	mov	r22, r15
    e882:	81 2f       	mov	r24, r17
    e884:	0e 94 a7 94 	call	0x1294e	; 0x1294e <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2536 (discriminator 2)
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy_P(tmp2, text_prog);
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    e888:	f3 94       	inc	r15
    e88a:	fb e0       	ldi	r31, 0x0B	; 11
    e88c:	ff 12       	cpse	r15, r31
    e88e:	e8 cf       	rjmp	.-48     	; 0xe860 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2544
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
    e890:	80 2f       	mov	r24, r16
    e892:	0e 94 be 91 	call	0x1237c	; 0x1237c <thermostat_ring_get_program_id(unsigned char)>
    e896:	81 13       	cpse	r24, r17
    e898:	04 c0       	rjmp	.+8      	; 0xe8a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2546
        {
          thermostat_ring_set_program_id(tix, PROG_FREE);
    e89a:	6f ef       	ldi	r22, 0xFF	; 255
    e89c:	80 2f       	mov	r24, r16
    e89e:	0e 94 c6 91 	call	0x1238c	; 0x1238c <thermostat_ring_set_program_id(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2542 (discriminator 2)
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    e8a2:	0f 5f       	subi	r16, 0xFF	; 255
    e8a4:	05 30       	cpi	r16, 0x05	; 5
    e8a6:	a1 f7       	brne	.-24     	; 0xe890 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2556
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    e8a8:	64 ef       	ldi	r22, 0xF4	; 244
    e8aa:	78 e5       	ldi	r23, 0x58	; 88
    e8ac:	c5 01       	movw	r24, r10
    e8ae:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2557
  strcat(str1, device.nazev);
    e8b2:	62 e1       	ldi	r22, 0x12	; 18
    e8b4:	71 e1       	ldi	r23, 0x11	; 17
    e8b6:	c5 01       	movw	r24, r10
    e8b8:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2558
  strcat(str1, "/prog_interval/set/");
    e8bc:	6b eb       	ldi	r22, 0xBB	; 187
    e8be:	76 e0       	ldi	r23, 0x06	; 6
    e8c0:	c5 01       	movw	r24, r10
    e8c2:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2559
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e8c6:	f5 01       	movw	r30, r10
    e8c8:	01 90       	ld	r0, Z+
    e8ca:	00 20       	and	r0, r0
    e8cc:	e9 f7       	brne	.-6      	; 0xe8c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa30>
    e8ce:	31 97       	sbiw	r30, 0x01	; 1
    e8d0:	af 01       	movw	r20, r30
    e8d2:	4a 19       	sub	r20, r10
    e8d4:	5b 09       	sbc	r21, r11
    e8d6:	b4 01       	movw	r22, r8
    e8d8:	c5 01       	movw	r24, r10
    e8da:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    e8de:	89 2b       	or	r24, r25
    e8e0:	09 f0       	breq	.+2      	; 0xe8e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4c>
    e8e2:	bb c0       	rjmp	.+374    	; 0xea5a <mqtt_callback(char*, unsigned char*, unsigned int)+0xbc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2561
  {
    mqtt_process_message++;
    e8e4:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    e8e8:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    e8ec:	01 96       	adiw	r24, 0x01	; 1
    e8ee:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    e8f2:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2563
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e8f6:	f5 01       	movw	r30, r10
    e8f8:	01 90       	ld	r0, Z+
    e8fa:	00 20       	and	r0, r0
    e8fc:	e9 f7       	brne	.-6      	; 0xe8f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa60>
    e8fe:	31 97       	sbiw	r30, 0x01	; 1
    e900:	ea 19       	sub	r30, r10
    e902:	fb 09       	sbc	r31, r11
    e904:	9e 2f       	mov	r25, r30
    e906:	4e 2f       	mov	r20, r30
    e908:	84 2f       	mov	r24, r20
    e90a:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2563 (discriminator 3)
    e90c:	24 2f       	mov	r18, r20
    e90e:	30 e0       	ldi	r19, 0x00	; 0
    e910:	d4 01       	movw	r26, r8
    e912:	0d 90       	ld	r0, X+
    e914:	00 20       	and	r0, r0
    e916:	e9 f7       	brne	.-6      	; 0xe912 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa7a>
    e918:	11 97       	sbiw	r26, 0x01	; 1
    e91a:	a8 19       	sub	r26, r8
    e91c:	b9 09       	sbc	r27, r9
    e91e:	2a 17       	cp	r18, r26
    e920:	3b 07       	cpc	r19, r27
    e922:	e0 f5       	brcc	.+120    	; 0xe99c <mqtt_callback(char*, unsigned char*, unsigned int)+0xb04>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2565 (discriminator 2)
    {
      str1[cnt] = topic[f];
    e924:	d5 01       	movw	r26, r10
    e926:	a8 0f       	add	r26, r24
    e928:	b1 1d       	adc	r27, r1
    e92a:	28 0d       	add	r18, r8
    e92c:	39 1d       	adc	r19, r9
    e92e:	f9 01       	movw	r30, r18
    e930:	80 81       	ld	r24, Z
    e932:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2566 (discriminator 2)
      str1[cnt + 1] = 0;
    e934:	11 96       	adiw	r26, 0x01	; 1
    e936:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2563 (discriminator 2)
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e938:	4f 5f       	subi	r20, 0xFF	; 255
    e93a:	e6 cf       	rjmp	.-52     	; 0xe908 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    e93c:	18 30       	cpi	r17, 0x08	; 8
    e93e:	08 f0       	brcs	.+2      	; 0xe942 <mqtt_callback(char*, unsigned char*, unsigned int)+0xaaa>
    e940:	48 cf       	rjmp	.-368    	; 0xe7d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2511
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    e942:	01 30       	cpi	r16, 0x01	; 1
    e944:	d9 f4       	brne	.+54     	; 0xe97c <mqtt_callback(char*, unsigned char*, unsigned int)+0xae4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2511 (discriminator 1)
    e946:	63 eb       	ldi	r22, 0xB3	; 179
    e948:	73 e0       	ldi	r23, 0x03	; 3
    e94a:	c7 01       	movw	r24, r14
    e94c:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    e950:	89 2b       	or	r24, r25
    e952:	29 f4       	brne	.+10     	; 0xe95e <mqtt_callback(char*, unsigned char*, unsigned int)+0xac6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2511 (discriminator 2)
    e954:	6c e4       	ldi	r22, 0x4C	; 76
    e956:	79 e0       	ldi	r23, 0x09	; 9
    e958:	81 2f       	mov	r24, r17
    e95a:	0e 94 95 93 	call	0x1272a	; 0x1272a <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2512
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    e95e:	64 ed       	ldi	r22, 0xD4	; 212
    e960:	73 e0       	ldi	r23, 0x03	; 3
    e962:	c7 01       	movw	r24, r14
    e964:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    e968:	89 2b       	or	r24, r25
    e96a:	41 f4       	brne	.+16     	; 0xe97c <mqtt_callback(char*, unsigned char*, unsigned int)+0xae4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2512 (discriminator 2)
    e96c:	8c e4       	ldi	r24, 0x4C	; 76
    e96e:	99 e0       	ldi	r25, 0x09	; 9
    e970:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    e974:	68 2f       	mov	r22, r24
    e976:	81 2f       	mov	r24, r17
    e978:	0e 94 c5 93 	call	0x1278a	; 0x1278a <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2519
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
    e97c:	63 e7       	ldi	r22, 0x73	; 115
    e97e:	73 e0       	ldi	r23, 0x03	; 3
    e980:	90 e0       	ldi	r25, 0x00	; 0
    e982:	80 e0       	ldi	r24, 0x00	; 0
    e984:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
    e988:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2520
      cnt++;
    e98a:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2506
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    e98c:	16 cf       	rjmp	.-468    	; 0xe7ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x922>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2552
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    e98e:	69 ea       	ldi	r22, 0xA9	; 169
    e990:	76 e0       	ldi	r23, 0x06	; 6
    e992:	89 e0       	ldi	r24, 0x09	; 9
    e994:	9e e0       	ldi	r25, 0x0E	; 14
    e996:	0e 94 7e 8b 	call	0x116fc	; 0x116fc <log_error(PubSubClient*, char*)>
    e99a:	86 cf       	rjmp	.-244    	; 0xe8a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2570
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e99c:	63 e7       	ldi	r22, 0x73	; 115
    e99e:	73 e0       	ldi	r23, 0x03	; 3
    e9a0:	c5 01       	movw	r24, r10
    e9a2:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
    e9a6:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2255
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    e9a8:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2569
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e9aa:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2571
    pch = strtok (str1, "/");
    while (pch != NULL)
    e9ac:	e1 14       	cp	r14, r1
    e9ae:	f1 04       	cpc	r15, r1
    e9b0:	09 f4       	brne	.+2      	; 0xe9b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb1c>
    e9b2:	53 c0       	rjmp	.+166    	; 0xea5a <mqtt_callback(char*, unsigned char*, unsigned int)+0xbc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2573
    {
      if (cnt == 0) id = atoi(pch);
    e9b4:	01 11       	cpse	r16, r1
    e9b6:	43 c0       	rjmp	.+134    	; 0xea3e <mqtt_callback(char*, unsigned char*, unsigned int)+0xba6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2573 (discriminator 1)
    e9b8:	c7 01       	movw	r24, r14
    e9ba:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    e9be:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2575
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    e9c0:	18 30       	cpi	r17, 0x08	; 8
    e9c2:	08 f0       	brcs	.+2      	; 0xe9c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb2e>
    e9c4:	44 c0       	rjmp	.+136    	; 0xea4e <mqtt_callback(char*, unsigned char*, unsigned int)+0xbb6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2575 (discriminator 1)
    e9c6:	fa e0       	ldi	r31, 0x0A	; 10
    e9c8:	fd 15       	cp	r31, r13
    e9ca:	08 f4       	brcc	.+2      	; 0xe9ce <mqtt_callback(char*, unsigned char*, unsigned int)+0xb36>
    e9cc:	40 c0       	rjmp	.+128    	; 0xea4e <mqtt_callback(char*, unsigned char*, unsigned int)+0xbb6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2577
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    e9ce:	02 30       	cpi	r16, 0x02	; 2
    e9d0:	69 f5       	brne	.+90     	; 0xea2c <mqtt_callback(char*, unsigned char*, unsigned int)+0xb94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2577 (discriminator 1)
    e9d2:	64 ed       	ldi	r22, 0xD4	; 212
    e9d4:	73 e0       	ldi	r23, 0x03	; 3
    e9d6:	c7 01       	movw	r24, r14
    e9d8:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    e9dc:	89 2b       	or	r24, r25
    e9de:	49 f4       	brne	.+18     	; 0xe9f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2577 (discriminator 2)
    e9e0:	8c e4       	ldi	r24, 0x4C	; 76
    e9e2:	99 e0       	ldi	r25, 0x09	; 9
    e9e4:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    e9e8:	48 2f       	mov	r20, r24
    e9ea:	6d 2d       	mov	r22, r13
    e9ec:	81 2f       	mov	r24, r17
    e9ee:	0e 94 19 95 	call	0x12a32	; 0x12a32 <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2578
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
    e9f2:	6b ee       	ldi	r22, 0xEB	; 235
    e9f4:	73 e0       	ldi	r23, 0x03	; 3
    e9f6:	c7 01       	movw	r24, r14
    e9f8:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    e9fc:	89 2b       	or	r24, r25
    e9fe:	49 f4       	brne	.+18     	; 0xea12 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb7a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2578 (discriminator 2)
    ea00:	8c e4       	ldi	r24, 0x4C	; 76
    ea02:	99 e0       	ldi	r25, 0x09	; 9
    ea04:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    ea08:	ac 01       	movw	r20, r24
    ea0a:	6d 2d       	mov	r22, r13
    ea0c:	81 2f       	mov	r24, r17
    ea0e:	0e 94 7e 94 	call	0x128fc	; 0x128fc <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2579
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
    ea12:	6d ec       	ldi	r22, 0xCD	; 205
    ea14:	77 e0       	ldi	r23, 0x07	; 7
    ea16:	c7 01       	movw	r24, r14
    ea18:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    ea1c:	89 2b       	or	r24, r25
    ea1e:	31 f4       	brne	.+12     	; 0xea2c <mqtt_callback(char*, unsigned char*, unsigned int)+0xb94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2579 (discriminator 2)
    ea20:	4c e4       	ldi	r20, 0x4C	; 76
    ea22:	59 e0       	ldi	r21, 0x09	; 9
    ea24:	6d 2d       	mov	r22, r13
    ea26:	81 2f       	mov	r24, r17
    ea28:	0e 94 b5 94 	call	0x1296a	; 0x1296a <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2586
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
    ea2c:	63 e7       	ldi	r22, 0x73	; 115
    ea2e:	73 e0       	ldi	r23, 0x03	; 3
    ea30:	90 e0       	ldi	r25, 0x00	; 0
    ea32:	80 e0       	ldi	r24, 0x00	; 0
    ea34:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
    ea38:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
      cnt++;
    ea3a:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2571
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    ea3c:	b7 cf       	rjmp	.-146    	; 0xe9ac <mqtt_callback(char*, unsigned char*, unsigned int)+0xb14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2574
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
    ea3e:	01 30       	cpi	r16, 0x01	; 1
    ea40:	09 f0       	breq	.+2      	; 0xea44 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbac>
    ea42:	be cf       	rjmp	.-132    	; 0xe9c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2574 (discriminator 1)
    ea44:	c7 01       	movw	r24, r14
    ea46:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    ea4a:	d8 2e       	mov	r13, r24
    ea4c:	b9 cf       	rjmp	.-142    	; 0xe9c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2583
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
    ea4e:	6f ec       	ldi	r22, 0xCF	; 207
    ea50:	76 e0       	ldi	r23, 0x06	; 6
    ea52:	89 e0       	ldi	r24, 0x09	; 9
    ea54:	9e e0       	ldi	r25, 0x0E	; 14
    ea56:	0e 94 7e 8b 	call	0x116fc	; 0x116fc <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2592
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
    ea5a:	64 ef       	ldi	r22, 0xF4	; 244
    ea5c:	78 e5       	ldi	r23, 0x58	; 88
    ea5e:	c5 01       	movw	r24, r10
    ea60:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2593
  strcat(str1, device.nazev);
    ea64:	62 e1       	ldi	r22, 0x12	; 18
    ea66:	71 e1       	ldi	r23, 0x11	; 17
    ea68:	c5 01       	movw	r24, r10
    ea6a:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2594
  strcat(str1, "/ring/default");
    ea6e:	68 ee       	ldi	r22, 0xE8	; 232
    ea70:	76 e0       	ldi	r23, 0x06	; 6
    ea72:	c5 01       	movw	r24, r10
    ea74:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2595
  if (strcmp(str1, topic) == 0)
    ea78:	b4 01       	movw	r22, r8
    ea7a:	c5 01       	movw	r24, r10
    ea7c:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    ea80:	89 2b       	or	r24, r25
    ea82:	89 f4       	brne	.+34     	; 0xeaa6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc0e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2597
  {
    mqtt_process_message++;
    ea84:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    ea88:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    ea8c:	01 96       	adiw	r24, 0x01	; 1
    ea8e:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    ea92:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2598
    default_ring = atoi(my_payload);
    ea96:	8c e4       	ldi	r24, 0x4C	; 76
    ea98:	99 e0       	ldi	r25, 0x09	; 9
    ea9a:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    ea9e:	80 93 9e 0a 	sts	0x0A9E, r24	; 0x800a9e <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2599
    set_default_ring(default_ring);
    eaa2:	0e 94 82 49 	call	0x9304	; 0x9304 <set_default_ring(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2603
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
    eaa6:	64 ef       	ldi	r22, 0xF4	; 244
    eaa8:	78 e5       	ldi	r23, 0x58	; 88
    eaaa:	c5 01       	movw	r24, r10
    eaac:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2604
  strcat(str1, device.nazev);
    eab0:	62 e1       	ldi	r22, 0x12	; 18
    eab2:	71 e1       	ldi	r23, 0x11	; 17
    eab4:	c5 01       	movw	r24, r10
    eab6:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2605
  strcat(str1, "/ring/get/");
    eaba:	66 ef       	ldi	r22, 0xF6	; 246
    eabc:	76 e0       	ldi	r23, 0x06	; 6
    eabe:	c5 01       	movw	r24, r10
    eac0:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2606
  if (strncmp(str1, topic, strlen(str1)) == 0)
    eac4:	f5 01       	movw	r30, r10
    eac6:	01 90       	ld	r0, Z+
    eac8:	00 20       	and	r0, r0
    eaca:	e9 f7       	brne	.-6      	; 0xeac6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc2e>
    eacc:	31 97       	sbiw	r30, 0x01	; 1
    eace:	7f 01       	movw	r14, r30
    ead0:	ea 18       	sub	r14, r10
    ead2:	fb 08       	sbc	r15, r11
    ead4:	a7 01       	movw	r20, r14
    ead6:	b4 01       	movw	r22, r8
    ead8:	c5 01       	movw	r24, r10
    eada:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    eade:	89 2b       	or	r24, r25
    eae0:	09 f0       	breq	.+2      	; 0xeae4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc4c>
    eae2:	47 c0       	rjmp	.+142    	; 0xeb72 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2609
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    eae4:	9e 2d       	mov	r25, r14
    eae6:	8e 2d       	mov	r24, r14
    eae8:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2609 (discriminator 3)
    eaea:	2e 2d       	mov	r18, r14
    eaec:	30 e0       	ldi	r19, 0x00	; 0
    eaee:	f4 01       	movw	r30, r8
    eaf0:	01 90       	ld	r0, Z+
    eaf2:	00 20       	and	r0, r0
    eaf4:	e9 f7       	brne	.-6      	; 0xeaf0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc58>
    eaf6:	31 97       	sbiw	r30, 0x01	; 1
    eaf8:	e8 19       	sub	r30, r8
    eafa:	f9 09       	sbc	r31, r9
    eafc:	2e 17       	cp	r18, r30
    eafe:	3f 07       	cpc	r19, r31
    eb00:	58 f4       	brcc	.+22     	; 0xeb18 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2611 (discriminator 2)
    {
      str1[cnt] = topic[f];
    eb02:	f5 01       	movw	r30, r10
    eb04:	e8 0f       	add	r30, r24
    eb06:	f1 1d       	adc	r31, r1
    eb08:	28 0d       	add	r18, r8
    eb0a:	39 1d       	adc	r19, r9
    eb0c:	d9 01       	movw	r26, r18
    eb0e:	8c 91       	ld	r24, X
    eb10:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2612 (discriminator 2)
      str1[cnt + 1] = 0;
    eb12:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2609 (discriminator 2)
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    eb14:	e3 94       	inc	r14
    eb16:	e7 cf       	rjmp	.-50     	; 0xeae6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2616
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    eb18:	63 e7       	ldi	r22, 0x73	; 115
    eb1a:	73 e0       	ldi	r23, 0x03	; 3
    eb1c:	c5 01       	movw	r24, r10
    eb1e:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    eb22:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2617
    pch = strtok (str1, "/");
    while (pch != NULL)
    eb24:	00 97       	sbiw	r24, 0x00	; 0
    eb26:	29 f1       	breq	.+74     	; 0xeb72 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2619
    {
      if (cnt == 0) id = atoi(my_payload);
    eb28:	01 11       	cpse	r16, r1
    eb2a:	0e c0       	rjmp	.+28     	; 0xeb48 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2619 (discriminator 1)
    eb2c:	8c e4       	ldi	r24, 0x4C	; 76
    eb2e:	99 e0       	ldi	r25, 0x09	; 9
    eb30:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    eb34:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620 (discriminator 1)
      if (id < MAX_THERMOSTAT)
    eb36:	85 30       	cpi	r24, 0x05	; 5
    eb38:	a0 f0       	brcs	.+40     	; 0xeb62 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2626
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    eb3a:	61 e0       	ldi	r22, 0x01	; 1
    eb3c:	77 e0       	ldi	r23, 0x07	; 7
    eb3e:	89 e0       	ldi	r24, 0x09	; 9
    eb40:	9e e0       	ldi	r25, 0x0E	; 14
    eb42:	0e 94 7e 8b 	call	0x116fc	; 0x116fc <log_error(PubSubClient*, char*)>
    eb46:	0d c0       	rjmp	.+26     	; 0xeb62 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
    eb48:	15 30       	cpi	r17, 0x05	; 5
    eb4a:	b8 f7       	brcc	.-18     	; 0xeb3a <mqtt_callback(char*, unsigned char*, unsigned int)+0xca2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2622
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
    eb4c:	01 30       	cpi	r16, 0x01	; 1
    eb4e:	49 f4       	brne	.+18     	; 0xeb62 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2622 (discriminator 1)
    eb50:	6a ef       	ldi	r22, 0xFA	; 250
    eb52:	73 e0       	ldi	r23, 0x03	; 3
    eb54:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    eb58:	89 2b       	or	r24, r25
    eb5a:	19 f4       	brne	.+6      	; 0xeb62 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2622 (discriminator 2)
    eb5c:	81 2f       	mov	r24, r17
    eb5e:	0e 94 1d 4d 	call	0x9a3a	; 0x9a3a <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2628
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    eb62:	63 e7       	ldi	r22, 0x73	; 115
    eb64:	73 e0       	ldi	r23, 0x03	; 3
    eb66:	90 e0       	ldi	r25, 0x00	; 0
    eb68:	80 e0       	ldi	r24, 0x00	; 0
    eb6a:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2629
      cnt++;
    eb6e:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2617
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    eb70:	d9 cf       	rjmp	.-78     	; 0xeb24 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2648
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
    eb72:	64 ef       	ldi	r22, 0xF4	; 244
    eb74:	78 e5       	ldi	r23, 0x58	; 88
    eb76:	c5 01       	movw	r24, r10
    eb78:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2649
  strcat(str1, device.nazev);
    eb7c:	62 e1       	ldi	r22, 0x12	; 18
    eb7e:	71 e1       	ldi	r23, 0x11	; 17
    eb80:	c5 01       	movw	r24, r10
    eb82:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650
  strcat(str1, "/ring/set/");
    eb86:	61 e1       	ldi	r22, 0x11	; 17
    eb88:	77 e0       	ldi	r23, 0x07	; 7
    eb8a:	c5 01       	movw	r24, r10
    eb8c:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2651
  if (strncmp(str1, topic, strlen(str1)) == 0)
    eb90:	f5 01       	movw	r30, r10
    eb92:	01 90       	ld	r0, Z+
    eb94:	00 20       	and	r0, r0
    eb96:	e9 f7       	brne	.-6      	; 0xeb92 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcfa>
    eb98:	31 97       	sbiw	r30, 0x01	; 1
    eb9a:	7f 01       	movw	r14, r30
    eb9c:	ea 18       	sub	r14, r10
    eb9e:	fb 08       	sbc	r15, r11
    eba0:	a7 01       	movw	r20, r14
    eba2:	b4 01       	movw	r22, r8
    eba4:	c5 01       	movw	r24, r10
    eba6:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    ebaa:	89 2b       	or	r24, r25
    ebac:	09 f0       	breq	.+2      	; 0xebb0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd18>
    ebae:	4a c1       	rjmp	.+660    	; 0xee44 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2654
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ebb0:	9e 2d       	mov	r25, r14
    ebb2:	8e 2d       	mov	r24, r14
    ebb4:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2654 (discriminator 3)
    ebb6:	2e 2d       	mov	r18, r14
    ebb8:	30 e0       	ldi	r19, 0x00	; 0
    ebba:	f4 01       	movw	r30, r8
    ebbc:	01 90       	ld	r0, Z+
    ebbe:	00 20       	and	r0, r0
    ebc0:	e9 f7       	brne	.-6      	; 0xebbc <mqtt_callback(char*, unsigned char*, unsigned int)+0xd24>
    ebc2:	31 97       	sbiw	r30, 0x01	; 1
    ebc4:	e8 19       	sub	r30, r8
    ebc6:	f9 09       	sbc	r31, r9
    ebc8:	2e 17       	cp	r18, r30
    ebca:	3f 07       	cpc	r19, r31
    ebcc:	58 f4       	brcc	.+22     	; 0xebe4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2656 (discriminator 2)
    {
      str1[cnt] = topic[f];
    ebce:	f5 01       	movw	r30, r10
    ebd0:	e8 0f       	add	r30, r24
    ebd2:	f1 1d       	adc	r31, r1
    ebd4:	28 0d       	add	r18, r8
    ebd6:	39 1d       	adc	r19, r9
    ebd8:	d9 01       	movw	r26, r18
    ebda:	8c 91       	ld	r24, X
    ebdc:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2657 (discriminator 2)
      str1[cnt + 1] = 0;
    ebde:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2654 (discriminator 2)
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ebe0:	e3 94       	inc	r14
    ebe2:	e7 cf       	rjmp	.-50     	; 0xebb2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2661
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    ebe4:	63 e7       	ldi	r22, 0x73	; 115
    ebe6:	73 e0       	ldi	r23, 0x03	; 3
    ebe8:	c5 01       	movw	r24, r10
    ebea:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
    ebee:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2660
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    ebf0:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2662
    pch = strtok (str1, "/");
    while (pch != NULL)
    ebf2:	e1 14       	cp	r14, r1
    ebf4:	f1 04       	cpc	r15, r1
    ebf6:	09 f4       	brne	.+2      	; 0xebfa <mqtt_callback(char*, unsigned char*, unsigned int)+0xd62>
    ebf8:	25 c1       	rjmp	.+586    	; 0xee44 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2664
    {
      if (cnt == 0) id = atoi(pch);
    ebfa:	01 11       	cpse	r16, r1
    ebfc:	0e c0       	rjmp	.+28     	; 0xec1a <mqtt_callback(char*, unsigned char*, unsigned int)+0xd82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2664 (discriminator 1)
    ebfe:	c7 01       	movw	r24, r14
    ec00:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    ec04:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665 (discriminator 1)
      if (id < MAX_THERMOSTAT)
    ec06:	85 30       	cpi	r24, 0x05	; 5
    ec08:	08 f4       	brcc	.+2      	; 0xec0c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd74>
    ec0a:	13 c1       	rjmp	.+550    	; 0xee32 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf9a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2702
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    ec0c:	61 e0       	ldi	r22, 0x01	; 1
    ec0e:	77 e0       	ldi	r23, 0x07	; 7
    ec10:	89 e0       	ldi	r24, 0x09	; 9
    ec12:	9e e0       	ldi	r25, 0x0E	; 14
    ec14:	0e 94 7e 8b 	call	0x116fc	; 0x116fc <log_error(PubSubClient*, char*)>
    ec18:	0c c1       	rjmp	.+536    	; 0xee32 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf9a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
    ec1a:	15 30       	cpi	r17, 0x05	; 5
    ec1c:	b8 f7       	brcc	.-18     	; 0xec0c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2667
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
    ec1e:	01 30       	cpi	r16, 0x01	; 1
    ec20:	09 f0       	breq	.+2      	; 0xec24 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd8c>
    ec22:	07 c1       	rjmp	.+526    	; 0xee32 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf9a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2667 (discriminator 1)
    ec24:	63 eb       	ldi	r22, 0xB3	; 179
    ec26:	73 e0       	ldi	r23, 0x03	; 3
    ec28:	c7 01       	movw	r24, r14
    ec2a:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    ec2e:	89 2b       	or	r24, r25
    ec30:	29 f4       	brne	.+10     	; 0xec3c <mqtt_callback(char*, unsigned char*, unsigned int)+0xda4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2667 (discriminator 2)
    ec32:	6c e4       	ldi	r22, 0x4C	; 76
    ec34:	79 e0       	ldi	r23, 0x09	; 9
    ec36:	81 2f       	mov	r24, r17
    ec38:	0e 94 77 91 	call	0x122ee	; 0x122ee <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
    ec3c:	66 e5       	ldi	r22, 0x56	; 86
    ec3e:	75 e0       	ldi	r23, 0x05	; 5
    ec40:	c7 01       	movw	r24, r14
    ec42:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    ec46:	89 2b       	or	r24, r25
    ec48:	59 f4       	brne	.+22     	; 0xec60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdc8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2669
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
    ec4a:	8c e4       	ldi	r24, 0x4C	; 76
    ec4c:	99 e0       	ldi	r25, 0x09	; 9
    ec4e:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    ec52:	88 30       	cpi	r24, 0x08	; 8
    ec54:	91 05       	cpc	r25, r1
    ec56:	24 f4       	brge	.+8      	; 0xec60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdc8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2670
            thermostat_ring_set_program_id(id, atoi(my_payload));
    ec58:	68 2f       	mov	r22, r24
    ec5a:	81 2f       	mov	r24, r17
    ec5c:	0e 94 c6 91 	call	0x1238c	; 0x1238c <thermostat_ring_set_program_id(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2671
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
    ec60:	68 ea       	ldi	r22, 0xA8	; 168
    ec62:	77 e0       	ldi	r23, 0x07	; 7
    ec64:	c7 01       	movw	r24, r14
    ec66:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    ec6a:	89 2b       	or	r24, r25
    ec6c:	79 f4       	brne	.+30     	; 0xec8c <mqtt_callback(char*, unsigned char*, unsigned int)+0xdf4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2671 (discriminator 2)
    ec6e:	8c e4       	ldi	r24, 0x4C	; 76
    ec70:	99 e0       	ldi	r25, 0x09	; 9
    ec72:	0e 94 bd e1 	call	0x1c37a	; 0x1c37a <atof>
    ec76:	20 e0       	ldi	r18, 0x00	; 0
    ec78:	30 e0       	ldi	r19, 0x00	; 0
    ec7a:	40 e2       	ldi	r20, 0x20	; 32
    ec7c:	51 e4       	ldi	r21, 0x41	; 65
    ec7e:	0e 94 7d dd 	call	0x1bafa	; 0x1bafa <__mulsf3>
    ec82:	0e 94 90 dc 	call	0x1b920	; 0x1b920 <__fixsfsi>
    ec86:	81 2f       	mov	r24, r17
    ec88:	0e 94 eb 91 	call	0x123d6	; 0x123d6 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2672
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
    ec8c:	6b ee       	ldi	r22, 0xEB	; 235
    ec8e:	73 e0       	ldi	r23, 0x03	; 3
    ec90:	c7 01       	movw	r24, r14
    ec92:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    ec96:	89 2b       	or	r24, r25
    ec98:	41 f4       	brne	.+16     	; 0xecaa <mqtt_callback(char*, unsigned char*, unsigned int)+0xe12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2672 (discriminator 2)
    ec9a:	8c e4       	ldi	r24, 0x4C	; 76
    ec9c:	99 e0       	ldi	r25, 0x09	; 9
    ec9e:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    eca2:	bc 01       	movw	r22, r24
    eca4:	81 2f       	mov	r24, r17
    eca6:	0e 94 eb 91 	call	0x123d6	; 0x123d6 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2673
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
    ecaa:	6e e5       	ldi	r22, 0x5E	; 94
    ecac:	75 e0       	ldi	r23, 0x05	; 5
    ecae:	c7 01       	movw	r24, r14
    ecb0:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    ecb4:	89 2b       	or	r24, r25
    ecb6:	29 f5       	brne	.+74     	; 0xed02 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2675
        {
          active = convert_text_mode(my_payload);
    ecb8:	8c e4       	ldi	r24, 0x4C	; 76
    ecba:	99 e0       	ldi	r25, 0x09	; 9
    ecbc:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <convert_text_mode(char*)>
    ecc0:	c1 53       	subi	r28, 0x31	; 49
    ecc2:	df 4f       	sbci	r29, 0xFF	; 255
    ecc4:	88 83       	st	Y, r24
    ecc6:	cf 5c       	subi	r28, 0xCF	; 207
    ecc8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2676
          thermostat_ring_set_mode(id, active);
    ecca:	68 2f       	mov	r22, r24
    eccc:	81 2f       	mov	r24, r17
    ecce:	0e 94 1a 92 	call	0x12434	; 0x12434 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677
          if (active == TERM_MODE_MAN_HEAT)
    ecd2:	c1 53       	subi	r28, 0x31	; 49
    ecd4:	df 4f       	sbci	r29, 0xFF	; 255
    ecd6:	88 81       	ld	r24, Y
    ecd8:	cf 5c       	subi	r28, 0xCF	; 207
    ecda:	d0 40       	sbci	r29, 0x00	; 0
    ecdc:	83 30       	cpi	r24, 0x03	; 3
    ecde:	29 f4       	brne	.+10     	; 0xecea <mqtt_callback(char*, unsigned char*, unsigned int)+0xe52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    ece0:	40 e0       	ldi	r20, 0x00	; 0
    ece2:	60 e0       	ldi	r22, 0x00	; 0
    ece4:	81 2f       	mov	r24, r17
    ece6:	0e 94 3c 92 	call	0x12478	; 0x12478 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679
          if (active == TERM_MODE_MAN_COOL)
    ecea:	c1 53       	subi	r28, 0x31	; 49
    ecec:	df 4f       	sbci	r29, 0xFF	; 255
    ecee:	88 81       	ld	r24, Y
    ecf0:	cf 5c       	subi	r28, 0xCF	; 207
    ecf2:	d0 40       	sbci	r29, 0x00	; 0
    ecf4:	85 30       	cpi	r24, 0x05	; 5
    ecf6:	29 f4       	brne	.+10     	; 0xed02 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2680
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    ecf8:	41 e0       	ldi	r20, 0x01	; 1
    ecfa:	60 e0       	ldi	r22, 0x00	; 0
    ecfc:	81 2f       	mov	r24, r17
    ecfe:	0e 94 3c 92 	call	0x12478	; 0x12478 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2682
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
    ed02:	63 e6       	ldi	r22, 0x63	; 99
    ed04:	75 e0       	ldi	r23, 0x05	; 5
    ed06:	c7 01       	movw	r24, r14
    ed08:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    ed0c:	89 2b       	or	r24, r25
    ed0e:	29 f5       	brne	.+74     	; 0xed5a <mqtt_callback(char*, unsigned char*, unsigned int)+0xec2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2684
        {
          active = atoi(my_payload);
    ed10:	8c e4       	ldi	r24, 0x4C	; 76
    ed12:	99 e0       	ldi	r25, 0x09	; 9
    ed14:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    ed18:	c1 53       	subi	r28, 0x31	; 49
    ed1a:	df 4f       	sbci	r29, 0xFF	; 255
    ed1c:	88 83       	st	Y, r24
    ed1e:	cf 5c       	subi	r28, 0xCF	; 207
    ed20:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2685
          thermostat_ring_set_mode(id, active);
    ed22:	68 2f       	mov	r22, r24
    ed24:	81 2f       	mov	r24, r17
    ed26:	0e 94 1a 92 	call	0x12434	; 0x12434 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2686
          if (active == TERM_MODE_MAN_HEAT)
    ed2a:	c1 53       	subi	r28, 0x31	; 49
    ed2c:	df 4f       	sbci	r29, 0xFF	; 255
    ed2e:	88 81       	ld	r24, Y
    ed30:	cf 5c       	subi	r28, 0xCF	; 207
    ed32:	d0 40       	sbci	r29, 0x00	; 0
    ed34:	83 30       	cpi	r24, 0x03	; 3
    ed36:	29 f4       	brne	.+10     	; 0xed42 <mqtt_callback(char*, unsigned char*, unsigned int)+0xeaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2687
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    ed38:	40 e0       	ldi	r20, 0x00	; 0
    ed3a:	60 e0       	ldi	r22, 0x00	; 0
    ed3c:	81 2f       	mov	r24, r17
    ed3e:	0e 94 3c 92 	call	0x12478	; 0x12478 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2688
          if (active == TERM_MODE_MAN_COOL)
    ed42:	c1 53       	subi	r28, 0x31	; 49
    ed44:	df 4f       	sbci	r29, 0xFF	; 255
    ed46:	88 81       	ld	r24, Y
    ed48:	cf 5c       	subi	r28, 0xCF	; 207
    ed4a:	d0 40       	sbci	r29, 0x00	; 0
    ed4c:	85 30       	cpi	r24, 0x05	; 5
    ed4e:	29 f4       	brne	.+10     	; 0xed5a <mqtt_callback(char*, unsigned char*, unsigned int)+0xec2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2689
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    ed50:	41 e0       	ldi	r20, 0x01	; 1
    ed52:	60 e0       	ldi	r22, 0x00	; 0
    ed54:	81 2f       	mov	r24, r17
    ed56:	0e 94 3c 92 	call	0x12478	; 0x12478 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2691
        }
        if ((cnt == 1) && (strcmp(pch, "input") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
    ed5a:	6f e6       	ldi	r22, 0x6F	; 111
    ed5c:	75 e0       	ldi	r23, 0x05	; 5
    ed5e:	c7 01       	movw	r24, r14
    ed60:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    ed64:	89 2b       	or	r24, r25
    ed66:	41 f4       	brne	.+16     	; 0xed78 <mqtt_callback(char*, unsigned char*, unsigned int)+0xee0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2691 (discriminator 2)
    ed68:	8c e4       	ldi	r24, 0x4C	; 76
    ed6a:	99 e0       	ldi	r25, 0x09	; 9
    ed6c:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    ed70:	68 2f       	mov	r22, r24
    ed72:	81 2f       	mov	r24, r17
    ed74:	0e 94 0a 92 	call	0x12414	; 0x12414 <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2693
        //if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
    ed78:	64 ed       	ldi	r22, 0xD4	; 212
    ed7a:	73 e0       	ldi	r23, 0x03	; 3
    ed7c:	c7 01       	movw	r24, r14
    ed7e:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    ed82:	89 2b       	or	r24, r25
    ed84:	41 f4       	brne	.+16     	; 0xed96 <mqtt_callback(char*, unsigned char*, unsigned int)+0xefe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2693 (discriminator 2)
    ed86:	8c e4       	ldi	r24, 0x4C	; 76
    ed88:	99 e0       	ldi	r25, 0x09	; 9
    ed8a:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    ed8e:	68 2f       	mov	r22, r24
    ed90:	81 2f       	mov	r24, r17
    ed92:	0e 94 b6 91 	call	0x1236c	; 0x1236c <thermostat_ring_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2694
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
    ed96:	65 e7       	ldi	r22, 0x75	; 117
    ed98:	75 e0       	ldi	r23, 0x05	; 5
    ed9a:	c7 01       	movw	r24, r14
    ed9c:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    eda0:	89 2b       	or	r24, r25
    eda2:	41 f4       	brne	.+16     	; 0xedb4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2694 (discriminator 2)
    eda4:	8c e4       	ldi	r24, 0x4C	; 76
    eda6:	99 e0       	ldi	r25, 0x09	; 9
    eda8:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    edac:	68 2f       	mov	r22, r24
    edae:	81 2f       	mov	r24, r17
    edb0:	0e 94 a6 91 	call	0x1234c	; 0x1234c <thermostat_ring_set_output(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2695
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
    edb4:	64 eb       	ldi	r22, 0xB4	; 180
    edb6:	77 e0       	ldi	r23, 0x07	; 7
    edb8:	c7 01       	movw	r24, r14
    edba:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    edbe:	89 2b       	or	r24, r25
    edc0:	49 f4       	brne	.+18     	; 0xedd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2695 (discriminator 2)
    edc2:	8c e4       	ldi	r24, 0x4C	; 76
    edc4:	99 e0       	ldi	r25, 0x09	; 9
    edc6:	0e 94 bd e1 	call	0x1c37a	; 0x1c37a <atof>
    edca:	ab 01       	movw	r20, r22
    edcc:	bc 01       	movw	r22, r24
    edce:	81 2f       	mov	r24, r17
    edd0:	0e 94 2b 93 	call	0x12656	; 0x12656 <thermostat_ring_pid_set_kp(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
    edd4:	6b eb       	ldi	r22, 0xBB	; 187
    edd6:	77 e0       	ldi	r23, 0x07	; 7
    edd8:	c7 01       	movw	r24, r14
    edda:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    edde:	89 2b       	or	r24, r25
    ede0:	49 f4       	brne	.+18     	; 0xedf4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696 (discriminator 2)
    ede2:	8c e4       	ldi	r24, 0x4C	; 76
    ede4:	99 e0       	ldi	r25, 0x09	; 9
    ede6:	0e 94 bd e1 	call	0x1c37a	; 0x1c37a <atof>
    edea:	ab 01       	movw	r20, r22
    edec:	bc 01       	movw	r22, r24
    edee:	81 2f       	mov	r24, r17
    edf0:	0e 94 3e 93 	call	0x1267c	; 0x1267c <thermostat_ring_pid_set_ki(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2697
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
    edf4:	62 ec       	ldi	r22, 0xC2	; 194
    edf6:	77 e0       	ldi	r23, 0x07	; 7
    edf8:	c7 01       	movw	r24, r14
    edfa:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    edfe:	89 2b       	or	r24, r25
    ee00:	49 f4       	brne	.+18     	; 0xee14 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2697 (discriminator 2)
    ee02:	8c e4       	ldi	r24, 0x4C	; 76
    ee04:	99 e0       	ldi	r25, 0x09	; 9
    ee06:	0e 94 bd e1 	call	0x1c37a	; 0x1c37a <atof>
    ee0a:	ab 01       	movw	r20, r22
    ee0c:	bc 01       	movw	r22, r24
    ee0e:	81 2f       	mov	r24, r17
    ee10:	0e 94 51 93 	call	0x126a2	; 0x126a2 <thermostat_ring_pid_set_kd(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2698
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
    ee14:	69 ec       	ldi	r22, 0xC9	; 201
    ee16:	77 e0       	ldi	r23, 0x07	; 7
    ee18:	c7 01       	movw	r24, r14
    ee1a:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    ee1e:	89 2b       	or	r24, r25
    ee20:	41 f4       	brne	.+16     	; 0xee32 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf9a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2698 (discriminator 2)
    ee22:	8c e4       	ldi	r24, 0x4C	; 76
    ee24:	99 e0       	ldi	r25, 0x09	; 9
    ee26:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    ee2a:	68 2f       	mov	r22, r24
    ee2c:	81 2f       	mov	r24, r17
    ee2e:	0e 94 64 93 	call	0x126c8	; 0x126c8 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2704
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    ee32:	63 e7       	ldi	r22, 0x73	; 115
    ee34:	73 e0       	ldi	r23, 0x03	; 3
    ee36:	90 e0       	ldi	r25, 0x00	; 0
    ee38:	80 e0       	ldi	r24, 0x00	; 0
    ee3a:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
    ee3e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2705
      cnt++;
    ee40:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2662
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    ee42:	d7 ce       	rjmp	.-594    	; 0xebf2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2710
      cnt++;
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
    ee44:	64 ef       	ldi	r22, 0xF4	; 244
    ee46:	78 e5       	ldi	r23, 0x58	; 88
    ee48:	c5 01       	movw	r24, r10
    ee4a:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2711
  strcat(str1, device.nazev);
    ee4e:	62 e1       	ldi	r22, 0x12	; 18
    ee50:	71 e1       	ldi	r23, 0x11	; 17
    ee52:	c5 01       	movw	r24, r10
    ee54:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2712
  strcat(str1, "/ring/clear");
    ee58:	6c e1       	ldi	r22, 0x1C	; 28
    ee5a:	77 e0       	ldi	r23, 0x07	; 7
    ee5c:	c5 01       	movw	r24, r10
    ee5e:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2713
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ee62:	f5 01       	movw	r30, r10
    ee64:	01 90       	ld	r0, Z+
    ee66:	00 20       	and	r0, r0
    ee68:	e9 f7       	brne	.-6      	; 0xee64 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfcc>
    ee6a:	31 97       	sbiw	r30, 0x01	; 1
    ee6c:	af 01       	movw	r20, r30
    ee6e:	4a 19       	sub	r20, r10
    ee70:	5b 09       	sbc	r21, r11
    ee72:	b4 01       	movw	r22, r8
    ee74:	c5 01       	movw	r24, r10
    ee76:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    ee7a:	89 2b       	or	r24, r25
    ee7c:	99 f4       	brne	.+38     	; 0xeea4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x100c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2715
  {
    mqtt_process_message++;
    ee7e:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    ee82:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    ee86:	01 96       	adiw	r24, 0x01	; 1
    ee88:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    ee8c:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2716
    id = atoi(my_payload);
    ee90:	8c e4       	ldi	r24, 0x4C	; 76
    ee92:	99 e0       	ldi	r25, 0x09	; 9
    ee94:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    ee98:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2717
    if (id < MAX_THERMOSTAT)
    ee9a:	85 30       	cpi	r24, 0x05	; 5
    ee9c:	08 f0       	brcs	.+2      	; 0xeea0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1008>
    ee9e:	76 c0       	rjmp	.+236    	; 0xef8c <mqtt_callback(char*, unsigned char*, unsigned int)+0x10f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2719
    {
      thermostat_ring_clear(id);
    eea0:	0e 94 e7 95 	call	0x12bce	; 0x12bce <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2730
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
    eea4:	64 ef       	ldi	r22, 0xF4	; 244
    eea6:	78 e5       	ldi	r23, 0x58	; 88
    eea8:	c5 01       	movw	r24, r10
    eeaa:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
  strcat(str1, device.nazev);
    eeae:	62 e1       	ldi	r22, 0x12	; 18
    eeb0:	71 e1       	ldi	r23, 0x11	; 17
    eeb2:	c5 01       	movw	r24, r10
    eeb4:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2732
  strcat(str1, "/network/get/config");
    eeb8:	6a e3       	ldi	r22, 0x3A	; 58
    eeba:	77 e0       	ldi	r23, 0x07	; 7
    eebc:	c5 01       	movw	r24, r10
    eebe:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  if (strncmp(str1, topic, strlen(str1)) == 0)
    eec2:	f5 01       	movw	r30, r10
    eec4:	01 90       	ld	r0, Z+
    eec6:	00 20       	and	r0, r0
    eec8:	e9 f7       	brne	.-6      	; 0xeec4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x102c>
    eeca:	31 97       	sbiw	r30, 0x01	; 1
    eecc:	af 01       	movw	r20, r30
    eece:	4a 19       	sub	r20, r10
    eed0:	5b 09       	sbc	r21, r11
    eed2:	b4 01       	movw	r22, r8
    eed4:	c5 01       	movw	r24, r10
    eed6:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    eeda:	89 2b       	or	r24, r25
    eedc:	69 f4       	brne	.+26     	; 0xeef8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1060>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
  {
    mqtt_process_message++;
    eede:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    eee2:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    eee6:	01 96       	adiw	r24, 0x01	; 1
    eee8:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    eeec:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
    send_network_config(&mqtt_client);
    eef0:	89 e0       	ldi	r24, 0x09	; 9
    eef2:	9e e0       	ldi	r25, 0x0E	; 14
    eef4:	0e 94 b2 88 	call	0x11164	; 0x11164 <send_network_config(PubSubClient*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2750
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
    eef8:	64 ef       	ldi	r22, 0xF4	; 244
    eefa:	78 e5       	ldi	r23, 0x58	; 88
    eefc:	c5 01       	movw	r24, r10
    eefe:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2751
  strcat(str1, device.nazev);
    ef02:	62 e1       	ldi	r22, 0x12	; 18
    ef04:	71 e1       	ldi	r23, 0x11	; 17
    ef06:	c5 01       	movw	r24, r10
    ef08:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2752
  strcat(str1, "/network/set/");
    ef0c:	6e e4       	ldi	r22, 0x4E	; 78
    ef0e:	77 e0       	ldi	r23, 0x07	; 7
    ef10:	c5 01       	movw	r24, r10
    ef12:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2753
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ef16:	f5 01       	movw	r30, r10
    ef18:	01 90       	ld	r0, Z+
    ef1a:	00 20       	and	r0, r0
    ef1c:	e9 f7       	brne	.-6      	; 0xef18 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1080>
    ef1e:	31 97       	sbiw	r30, 0x01	; 1
    ef20:	af 01       	movw	r20, r30
    ef22:	4a 19       	sub	r20, r10
    ef24:	5b 09       	sbc	r21, r11
    ef26:	b4 01       	movw	r22, r8
    ef28:	c5 01       	movw	r24, r10
    ef2a:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    ef2e:	89 2b       	or	r24, r25
    ef30:	09 f0       	breq	.+2      	; 0xef34 <mqtt_callback(char*, unsigned char*, unsigned int)+0x109c>
    ef32:	44 c0       	rjmp	.+136    	; 0xefbc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1124>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2755
  {
    mqtt_process_message++;
    ef34:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    ef38:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    ef3c:	01 96       	adiw	r24, 0x01	; 1
    ef3e:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    ef42:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2757
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ef46:	f5 01       	movw	r30, r10
    ef48:	01 90       	ld	r0, Z+
    ef4a:	00 20       	and	r0, r0
    ef4c:	e9 f7       	brne	.-6      	; 0xef48 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10b0>
    ef4e:	31 97       	sbiw	r30, 0x01	; 1
    ef50:	ea 19       	sub	r30, r10
    ef52:	fb 09       	sbc	r31, r11
    ef54:	9e 2f       	mov	r25, r30
    ef56:	4e 2f       	mov	r20, r30
    ef58:	84 2f       	mov	r24, r20
    ef5a:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2757 (discriminator 3)
    ef5c:	24 2f       	mov	r18, r20
    ef5e:	30 e0       	ldi	r19, 0x00	; 0
    ef60:	d4 01       	movw	r26, r8
    ef62:	0d 90       	ld	r0, X+
    ef64:	00 20       	and	r0, r0
    ef66:	e9 f7       	brne	.-6      	; 0xef62 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ca>
    ef68:	11 97       	sbiw	r26, 0x01	; 1
    ef6a:	a8 19       	sub	r26, r8
    ef6c:	b9 09       	sbc	r27, r9
    ef6e:	2a 17       	cp	r18, r26
    ef70:	3b 07       	cpc	r19, r27
    ef72:	98 f4       	brcc	.+38     	; 0xef9a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1102>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2759 (discriminator 2)
    {
      str1[cnt] = topic[f];
    ef74:	d5 01       	movw	r26, r10
    ef76:	a8 0f       	add	r26, r24
    ef78:	b1 1d       	adc	r27, r1
    ef7a:	28 0d       	add	r18, r8
    ef7c:	39 1d       	adc	r19, r9
    ef7e:	f9 01       	movw	r30, r18
    ef80:	80 81       	ld	r24, Z
    ef82:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2760 (discriminator 2)
      str1[cnt + 1] = 0;
    ef84:	11 96       	adiw	r26, 0x01	; 1
    ef86:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2757 (discriminator 2)
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ef88:	4f 5f       	subi	r20, 0xFF	; 255
    ef8a:	e6 cf       	rjmp	.-52     	; 0xef58 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2723
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
    ef8c:	68 e2       	ldi	r22, 0x28	; 40
    ef8e:	77 e0       	ldi	r23, 0x07	; 7
    ef90:	89 e0       	ldi	r24, 0x09	; 9
    ef92:	9e e0       	ldi	r25, 0x0E	; 14
    ef94:	0e 94 7e 8b 	call	0x116fc	; 0x116fc <log_error(PubSubClient*, char*)>
    ef98:	85 cf       	rjmp	.-246    	; 0xeea4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x100c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2763
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    ef9a:	6c e4       	ldi	r22, 0x4C	; 76
    ef9c:	79 e0       	ldi	r23, 0x09	; 9
    ef9e:	c5 01       	movw	r24, r10
    efa0:	0e 94 4e 86 	call	0x10c9c	; 0x10c9c <setting_network(char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2764
    if (cnt == 1)
    efa4:	81 30       	cpi	r24, 0x01	; 1
    efa6:	41 f4       	brne	.+16     	; 0xefb8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1120>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2766
    {
      save_setup_network();
    efa8:	0e 94 6e 85 	call	0x10adc	; 0x10adc <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2771
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    efac:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <selftest_data>
    efb0:	80 68       	ori	r24, 0x80	; 128
    efb2:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <selftest_data>
    efb6:	02 c0       	rjmp	.+4      	; 0xefbc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1124>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2769
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    efb8:	82 30       	cpi	r24, 0x02	; 2
    efba:	c1 f3       	breq	.-16     	; 0xefac <mqtt_callback(char*, unsigned char*, unsigned int)+0x1114>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2776
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
    efbc:	64 ef       	ldi	r22, 0xF4	; 244
    efbe:	78 e5       	ldi	r23, 0x58	; 88
    efc0:	c5 01       	movw	r24, r10
    efc2:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
  strcat(str1, device.nazev);
    efc6:	62 e1       	ldi	r22, 0x12	; 18
    efc8:	71 e1       	ldi	r23, 0x11	; 17
    efca:	c5 01       	movw	r24, r10
    efcc:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2778
  strcat(str1, "/light/set/");
    efd0:	6c e5       	ldi	r22, 0x5C	; 92
    efd2:	77 e0       	ldi	r23, 0x07	; 7
    efd4:	c5 01       	movw	r24, r10
    efd6:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2779
  if (strncmp(str1, topic, strlen(str1)) == 0)
    efda:	f5 01       	movw	r30, r10
    efdc:	01 90       	ld	r0, Z+
    efde:	00 20       	and	r0, r0
    efe0:	e9 f7       	brne	.-6      	; 0xefdc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1144>
    efe2:	31 97       	sbiw	r30, 0x01	; 1
    efe4:	af 01       	movw	r20, r30
    efe6:	4a 19       	sub	r20, r10
    efe8:	5b 09       	sbc	r21, r11
    efea:	b4 01       	movw	r22, r8
    efec:	c5 01       	movw	r24, r10
    efee:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    eff2:	89 2b       	or	r24, r25
    eff4:	09 f0       	breq	.+2      	; 0xeff8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1160>
    eff6:	41 c0       	rjmp	.+130    	; 0xf07a <mqtt_callback(char*, unsigned char*, unsigned int)+0x11e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2781
  {
    mqtt_process_message++;
    eff8:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    effc:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    f000:	01 96       	adiw	r24, 0x01	; 1
    f002:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    f006:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2784
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f00a:	f5 01       	movw	r30, r10
    f00c:	01 90       	ld	r0, Z+
    f00e:	00 20       	and	r0, r0
    f010:	e9 f7       	brne	.-6      	; 0xf00c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1174>
    f012:	31 97       	sbiw	r30, 0x01	; 1
    f014:	ea 19       	sub	r30, r10
    f016:	fb 09       	sbc	r31, r11
    f018:	9e 2f       	mov	r25, r30
    f01a:	4e 2f       	mov	r20, r30
    f01c:	84 2f       	mov	r24, r20
    f01e:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2784 (discriminator 3)
    f020:	24 2f       	mov	r18, r20
    f022:	30 e0       	ldi	r19, 0x00	; 0
    f024:	d4 01       	movw	r26, r8
    f026:	0d 90       	ld	r0, X+
    f028:	00 20       	and	r0, r0
    f02a:	e9 f7       	brne	.-6      	; 0xf026 <mqtt_callback(char*, unsigned char*, unsigned int)+0x118e>
    f02c:	11 97       	sbiw	r26, 0x01	; 1
    f02e:	a8 19       	sub	r26, r8
    f030:	b9 09       	sbc	r27, r9
    f032:	2a 17       	cp	r18, r26
    f034:	3b 07       	cpc	r19, r27
    f036:	60 f4       	brcc	.+24     	; 0xf050 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11b8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2786 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f038:	d5 01       	movw	r26, r10
    f03a:	a8 0f       	add	r26, r24
    f03c:	b1 1d       	adc	r27, r1
    f03e:	28 0d       	add	r18, r8
    f040:	39 1d       	adc	r19, r9
    f042:	f9 01       	movw	r30, r18
    f044:	80 81       	ld	r24, Z
    f046:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2787 (discriminator 2)
      str1[cnt + 1] = 0;
    f048:	11 96       	adiw	r26, 0x01	; 1
    f04a:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2784 (discriminator 2)
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f04c:	4f 5f       	subi	r20, 0xFF	; 255
    f04e:	e6 cf       	rjmp	.-52     	; 0xf01c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1184>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2791
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f050:	63 e7       	ldi	r22, 0x73	; 115
    f052:	73 e0       	ldi	r23, 0x03	; 3
    f054:	c5 01       	movw	r24, r10
    f056:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f05a:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792
    pch = strtok (str1, "/");
    while (pch != NULL)
    f05c:	00 97       	sbiw	r24, 0x00	; 0
    f05e:	69 f0       	breq	.+26     	; 0xf07a <mqtt_callback(char*, unsigned char*, unsigned int)+0x11e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2794
    {
      if (cnt == 0) id = atoi(pch);
    f060:	01 11       	cpse	r16, r1
    f062:	03 c0       	rjmp	.+6      	; 0xf06a <mqtt_callback(char*, unsigned char*, unsigned int)+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2794 (discriminator 1)
    f064:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    f068:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2797
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
    f06a:	63 e7       	ldi	r22, 0x73	; 115
    f06c:	73 e0       	ldi	r23, 0x03	; 3
    f06e:	90 e0       	ldi	r25, 0x00	; 0
    f070:	80 e0       	ldi	r24, 0x00	; 0
    f072:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2798
      cnt++;
    f076:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    f078:	f1 cf       	rjmp	.-30     	; 0xf05c <mqtt_callback(char*, unsigned char*, unsigned int)+0x11c4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2803
      cnt++;
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
    f07a:	6a ec       	ldi	r22, 0xCA	; 202
    f07c:	78 e5       	ldi	r23, 0x58	; 88
    f07e:	c5 01       	movw	r24, r10
    f080:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2804
  strcat(str1, "output/");
    f084:	65 e1       	ldi	r22, 0x15	; 21
    f086:	74 e0       	ldi	r23, 0x04	; 4
    f088:	c5 01       	movw	r24, r10
    f08a:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2805
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f08e:	f5 01       	movw	r30, r10
    f090:	01 90       	ld	r0, Z+
    f092:	00 20       	and	r0, r0
    f094:	e9 f7       	brne	.-6      	; 0xf090 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11f8>
    f096:	31 97       	sbiw	r30, 0x01	; 1
    f098:	af 01       	movw	r20, r30
    f09a:	4a 19       	sub	r20, r10
    f09c:	5b 09       	sbc	r21, r11
    f09e:	b4 01       	movw	r22, r8
    f0a0:	c5 01       	movw	r24, r10
    f0a2:	0e 94 2d e2 	call	0x1c45a	; 0x1c45a <strncmp>
    f0a6:	89 2b       	or	r24, r25
    f0a8:	09 f0       	breq	.+2      	; 0xf0ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x1214>
    f0aa:	6d c0       	rjmp	.+218    	; 0xf186 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2807
  {
    mqtt_process_message++;
    f0ac:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    f0b0:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    f0b4:	01 96       	adiw	r24, 0x01	; 1
    f0b6:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    f0ba:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f0be:	f5 01       	movw	r30, r10
    f0c0:	01 90       	ld	r0, Z+
    f0c2:	00 20       	and	r0, r0
    f0c4:	e9 f7       	brne	.-6      	; 0xf0c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1228>
    f0c6:	31 97       	sbiw	r30, 0x01	; 1
    f0c8:	ea 19       	sub	r30, r10
    f0ca:	fb 09       	sbc	r31, r11
    f0cc:	9e 2f       	mov	r25, r30
    f0ce:	4e 2f       	mov	r20, r30
    f0d0:	84 2f       	mov	r24, r20
    f0d2:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809 (discriminator 3)
    f0d4:	24 2f       	mov	r18, r20
    f0d6:	30 e0       	ldi	r19, 0x00	; 0
    f0d8:	d4 01       	movw	r26, r8
    f0da:	0d 90       	ld	r0, X+
    f0dc:	00 20       	and	r0, r0
    f0de:	e9 f7       	brne	.-6      	; 0xf0da <mqtt_callback(char*, unsigned char*, unsigned int)+0x1242>
    f0e0:	11 97       	sbiw	r26, 0x01	; 1
    f0e2:	a8 19       	sub	r26, r8
    f0e4:	b9 09       	sbc	r27, r9
    f0e6:	2a 17       	cp	r18, r26
    f0e8:	3b 07       	cpc	r19, r27
    f0ea:	60 f4       	brcc	.+24     	; 0xf104 <mqtt_callback(char*, unsigned char*, unsigned int)+0x126c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2811 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f0ec:	d5 01       	movw	r26, r10
    f0ee:	a8 0f       	add	r26, r24
    f0f0:	b1 1d       	adc	r27, r1
    f0f2:	28 0d       	add	r18, r8
    f0f4:	39 1d       	adc	r19, r9
    f0f6:	f9 01       	movw	r30, r18
    f0f8:	80 81       	ld	r24, Z
    f0fa:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2812 (discriminator 2)
      str1[cnt + 1] = 0;
    f0fc:	11 96       	adiw	r26, 0x01	; 1
    f0fe:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809 (discriminator 2)
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f100:	4f 5f       	subi	r20, 0xFF	; 255
    f102:	e6 cf       	rjmp	.-52     	; 0xf0d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1238>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2816
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f104:	63 e7       	ldi	r22, 0x73	; 115
    f106:	73 e0       	ldi	r23, 0x03	; 3
    f108:	c5 01       	movw	r24, r10
    f10a:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
    f10e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2815
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f110:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2817
    pch = strtok (str1, "/");
    while (pch != NULL)
    f112:	e1 14       	cp	r14, r1
    f114:	f1 04       	cpc	r15, r1
    f116:	b9 f1       	breq	.+110    	; 0xf186 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2819
    {
      if (cnt == 0) id = atoi(pch);
    f118:	01 11       	cpse	r16, r1
    f11a:	0d c0       	rjmp	.+26     	; 0xf136 <mqtt_callback(char*, unsigned char*, unsigned int)+0x129e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2819 (discriminator 1)
    f11c:	c7 01       	movw	r24, r14
    f11e:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    f122:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2830
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
    f124:	63 e7       	ldi	r22, 0x73	; 115
    f126:	73 e0       	ldi	r23, 0x03	; 3
    f128:	90 e0       	ldi	r25, 0x00	; 0
    f12a:	80 e0       	ldi	r24, 0x00	; 0
    f12c:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
    f130:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2831
      cnt++;
    f132:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2817
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    f134:	ee cf       	rjmp	.-36     	; 0xf112 <mqtt_callback(char*, unsigned char*, unsigned int)+0x127a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2820
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
    f136:	01 30       	cpi	r16, 0x01	; 1
    f138:	a9 f7       	brne	.-22     	; 0xf124 <mqtt_callback(char*, unsigned char*, unsigned int)+0x128c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2822
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    f13a:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2823
          if (thermostat_ring_get_output(idx) == id)
    f13c:	8d 2d       	mov	r24, r13
    f13e:	0e 94 9e 91 	call	0x1233c	; 0x1233c <thermostat_ring_get_output(unsigned char)>
    f142:	c8 2e       	mov	r12, r24
    f144:	81 13       	cpse	r24, r17
    f146:	1a c0       	rjmp	.+52     	; 0xf17c <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2825
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
    f148:	6b e3       	ldi	r22, 0x3B	; 59
    f14a:	74 e0       	ldi	r23, 0x04	; 4
    f14c:	c7 01       	movw	r24, r14
    f14e:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    f152:	89 2b       	or	r24, r25
    f154:	29 f0       	breq	.+10     	; 0xf160 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2825 (discriminator 1)
    f156:	e1 2f       	mov	r30, r17
    f158:	f0 e0       	ldi	r31, 0x00	; 0
    f15a:	e1 54       	subi	r30, 0x41	; 65
    f15c:	f5 4f       	sbci	r31, 0xF5	; 245
    f15e:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2826
            if (strcmp(pch, "state")) last_output_update[id] = 0;
    f160:	6e e1       	ldi	r22, 0x1E	; 30
    f162:	74 e0       	ldi	r23, 0x04	; 4
    f164:	c7 01       	movw	r24, r14
    f166:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    f16a:	89 2b       	or	r24, r25
    f16c:	29 f0       	breq	.+10     	; 0xf178 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2826 (discriminator 1)
    f16e:	e1 2f       	mov	r30, r17
    f170:	f0 e0       	ldi	r31, 0x00	; 0
    f172:	e1 54       	subi	r30, 0x41	; 65
    f174:	f5 4f       	sbci	r31, 0xF5	; 245
    f176:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2823
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
    f178:	1c 2d       	mov	r17, r12
    f17a:	d4 cf       	rjmp	.-88     	; 0xf124 <mqtt_callback(char*, unsigned char*, unsigned int)+0x128c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2822 (discriminator 2)
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    f17c:	d3 94       	inc	r13
    f17e:	f5 e0       	ldi	r31, 0x05	; 5
    f180:	df 12       	cpse	r13, r31
    f182:	dc cf       	rjmp	.-72     	; 0xf13c <mqtt_callback(char*, unsigned char*, unsigned int)+0x12a4>
    f184:	cf cf       	rjmp	.-98     	; 0xf124 <mqtt_callback(char*, unsigned char*, unsigned int)+0x128c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2836
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/brightness
  strcpy_P(str1, thermctl_header_in);
    f186:	64 ef       	ldi	r22, 0xF4	; 244
    f188:	78 e5       	ldi	r23, 0x58	; 88
    f18a:	c5 01       	movw	r24, r10
    f18c:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2837
  strcat(str1, device.nazev);
    f190:	62 e1       	ldi	r22, 0x12	; 18
    f192:	71 e1       	ldi	r23, 0x11	; 17
    f194:	c5 01       	movw	r24, r10
    f196:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2838
  strcat(str1, "/brightness");
    f19a:	68 e6       	ldi	r22, 0x68	; 104
    f19c:	77 e0       	ldi	r23, 0x07	; 7
    f19e:	c5 01       	movw	r24, r10
    f1a0:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2839
  if (strcmp(str1, topic) == 0)
    f1a4:	b4 01       	movw	r22, r8
    f1a6:	c5 01       	movw	r24, r10
    f1a8:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    f1ac:	89 2b       	or	r24, r25
    f1ae:	91 f4       	brne	.+36     	; 0xf1d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x133c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2841
  {
    mqtt_process_message++;
    f1b0:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    f1b4:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    f1b8:	01 96       	adiw	r24, 0x01	; 1
    f1ba:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    f1be:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2842
    my_touch.TP_SetBacklight(atoi(my_payload));
    f1c2:	8c e4       	ldi	r24, 0x4C	; 76
    f1c4:	99 e0       	ldi	r25, 0x09	; 9
    f1c6:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    f1ca:	68 2f       	mov	r22, r24
    f1cc:	83 ef       	ldi	r24, 0xF3	; 243
    f1ce:	9b e0       	ldi	r25, 0x0B	; 11
    f1d0:	0e 94 b6 a9 	call	0x1536c	; 0x1536c <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2846
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    f1d4:	64 ef       	ldi	r22, 0xF4	; 244
    f1d6:	78 e5       	ldi	r23, 0x58	; 88
    f1d8:	c5 01       	movw	r24, r10
    f1da:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2847
  strcat(str1, device.nazev);
    f1de:	62 e1       	ldi	r22, 0x12	; 18
    f1e0:	71 e1       	ldi	r23, 0x11	; 17
    f1e2:	c5 01       	movw	r24, r10
    f1e4:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2848
  strcat(str1, "/reload");
    f1e8:	64 e7       	ldi	r22, 0x74	; 116
    f1ea:	77 e0       	ldi	r23, 0x07	; 7
    f1ec:	c5 01       	movw	r24, r10
    f1ee:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2849
  if (strcmp(str1, topic) == 0)
    f1f2:	b4 01       	movw	r22, r8
    f1f4:	c5 01       	movw	r24, r10
    f1f6:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    f1fa:	89 2b       	or	r24, r25
    f1fc:	a1 f4       	brne	.+40     	; 0xf226 <mqtt_callback(char*, unsigned char*, unsigned int)+0x138e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2851
  {
    mqtt_process_message++;
    f1fe:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    f202:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    f206:	01 96       	adiw	r24, 0x01	; 1
    f208:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    f20c:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2852
    log_error(&mqtt_client, "reload ..... ");
    f210:	6c e7       	ldi	r22, 0x7C	; 124
    f212:	77 e0       	ldi	r23, 0x07	; 7
    f214:	89 e0       	ldi	r24, 0x09	; 9
    f216:	9e e0       	ldi	r25, 0x0E	; 14
    f218:	0e 94 7e 8b 	call	0x116fc	; 0x116fc <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2853
    resetFunc();
    f21c:	e0 91 cc 09 	lds	r30, 0x09CC	; 0x8009cc <resetFunc>
    f220:	f0 91 cd 09 	lds	r31, 0x09CD	; 0x8009cd <resetFunc+0x1>
    f224:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2857
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    f226:	64 ef       	ldi	r22, 0xF4	; 244
    f228:	78 e5       	ldi	r23, 0x58	; 88
    f22a:	c5 01       	movw	r24, r10
    f22c:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2858
  strcat(str1, device.nazev);
    f230:	62 e1       	ldi	r22, 0x12	; 18
    f232:	71 e1       	ldi	r23, 0x11	; 17
    f234:	c5 01       	movw	r24, r10
    f236:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2859
  strcat(str1, "/bootloader");
    f23a:	6a e8       	ldi	r22, 0x8A	; 138
    f23c:	77 e0       	ldi	r23, 0x07	; 7
    f23e:	c5 01       	movw	r24, r10
    f240:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2860
  if (strcmp(str1, topic) == 0)
    f244:	b4 01       	movw	r22, r8
    f246:	c5 01       	movw	r24, r10
    f248:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    f24c:	89 2b       	or	r24, r25
    f24e:	f9 f4       	brne	.+62     	; 0xf28e <mqtt_callback(char*, unsigned char*, unsigned int)+0x13f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2862
  {
    mqtt_process_message++;
    f250:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    f254:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    f258:	01 96       	adiw	r24, 0x01	; 1
    f25a:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    f25e:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2863
    log_error(&mqtt_client, "bootloader ..... ");
    f262:	66 e9       	ldi	r22, 0x96	; 150
    f264:	77 e0       	ldi	r23, 0x07	; 7
    f266:	89 e0       	ldi	r24, 0x09	; 9
    f268:	9e e0       	ldi	r25, 0x0E	; 14
    f26a:	0e 94 7e 8b 	call	0x116fc	; 0x116fc <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2864
    EEPROM.write(bootloader_tag, 255);
    f26e:	6f ef       	ldi	r22, 0xFF	; 255
    f270:	90 e0       	ldi	r25, 0x00	; 0
    f272:	80 e0       	ldi	r24, 0x00	; 0
    f274:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    f278:	88 e1       	ldi	r24, 0x18	; 24
    f27a:	9e e0       	ldi	r25, 0x0E	; 14
    f27c:	0f b6       	in	r0, 0x3f	; 63
    f27e:	f8 94       	cli
    f280:	a8 95       	wdr
    f282:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    f286:	0f be       	out	0x3f, r0	; 63
    f288:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    f28c:	ff cf       	rjmp	.-2      	; 0xf28c <mqtt_callback(char*, unsigned char*, unsigned int)+0x13f4>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2870
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
    f28e:	64 ef       	ldi	r22, 0xF4	; 244
    f290:	78 e5       	ldi	r23, 0x58	; 88
    f292:	c5 01       	movw	r24, r10
    f294:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2871
  strcat(str1, device.nazev);
    f298:	62 e1       	ldi	r22, 0x12	; 18
    f29a:	71 e1       	ldi	r23, 0x11	; 17
    f29c:	c5 01       	movw	r24, r10
    f29e:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2872
  strcat(str1, "/default");
    f2a2:	6d ee       	ldi	r22, 0xED	; 237
    f2a4:	76 e0       	ldi	r23, 0x06	; 6
    f2a6:	c5 01       	movw	r24, r10
    f2a8:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2873
  if (strcmp(str1, topic) == 0)
    f2ac:	b4 01       	movw	r22, r8
    f2ae:	c5 01       	movw	r24, r10
    f2b0:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
    f2b4:	89 2b       	or	r24, r25
    f2b6:	91 f4       	brne	.+36     	; 0xf2dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1444>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2875
  {
    mqtt_process_message++;
    f2b8:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
    f2bc:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
    f2c0:	01 96       	adiw	r24, 0x01	; 1
    f2c2:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <mqtt_process_message+0x1>
    f2c6:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2877
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
    f2ca:	8c e4       	ldi	r24, 0x4C	; 76
    f2cc:	99 e0       	ldi	r25, 0x09	; 9
    f2ce:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
    f2d2:	68 2f       	mov	r22, r24
    f2d4:	8a e5       	ldi	r24, 0x5A	; 90
    f2d6:	90 e0       	ldi	r25, 0x00	; 0
    f2d8:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2880
  }

}
    f2dc:	c1 53       	subi	r28, 0x31	; 49
    f2de:	df 4f       	sbci	r29, 0xFF	; 255
    f2e0:	0f b6       	in	r0, 0x3f	; 63
    f2e2:	f8 94       	cli
    f2e4:	de bf       	out	0x3e, r29	; 62
    f2e6:	0f be       	out	0x3f, r0	; 63
    f2e8:	cd bf       	out	0x3d, r28	; 61
    f2ea:	df 91       	pop	r29
    f2ec:	cf 91       	pop	r28
    f2ee:	1f 91       	pop	r17
    f2f0:	0f 91       	pop	r16
    f2f2:	ff 90       	pop	r15
    f2f4:	ef 90       	pop	r14
    f2f6:	df 90       	pop	r13
    f2f8:	cf 90       	pop	r12
    f2fa:	bf 90       	pop	r11
    f2fc:	af 90       	pop	r10
    f2fe:	9f 90       	pop	r9
    f300:	8f 90       	pop	r8
    f302:	7f 90       	pop	r7
    f304:	6f 90       	pop	r6
    f306:	5f 90       	pop	r5
    f308:	4f 90       	pop	r4
    f30a:	3f 90       	pop	r3
    f30c:	2f 90       	pop	r2
    f30e:	08 95       	ret

0000f310 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>:
_GLOBAL__sub_I__Z11serial_putccP6__file():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5792
  strcpy_P(str1, new_text_mqtt_error);
  itoa(mqtt_error, str2, 10);
  strcat(str1, str2);
  show_string(str1, x + 5 , y + 145 , 1, BLACK, WHITE, 0);

}
    f310:	cf 92       	push	r12
    f312:	ef 92       	push	r14
    f314:	0f 93       	push	r16
    f316:	cf 93       	push	r28
    f318:	df 93       	push	r29
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    f31a:	00 e0       	ldi	r16, 0x00	; 0
    f31c:	20 e0       	ldi	r18, 0x00	; 0
    f31e:	40 e0       	ldi	r20, 0x00	; 0
    f320:	60 e0       	ldi	r22, 0x00	; 0
    f322:	8a e6       	ldi	r24, 0x6A	; 106
    f324:	90 e1       	ldi	r25, 0x10	; 16
    f326:	0e 94 4b da 	call	0x1b496	; 0x1b496 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:48
#include "RTDSMenu.h"
#include "MenuSettingsTime.h"

#include "MenuNastaveniMqtt.h"

SoftSPIB swSPI(STORAGE_MOSI, STORAGE_MISO, STORAGE_CLK);
    f32a:	29 e1       	ldi	r18, 0x19	; 25
    f32c:	4a e1       	ldi	r20, 0x1A	; 26
    f32e:	68 e1       	ldi	r22, 0x18	; 24
    f330:	83 e6       	ldi	r24, 0x63	; 99
    f332:	90 e1       	ldi	r25, 0x10	; 16
    f334:	0e 94 53 ac 	call	0x158a6	; 0x158a6 <SoftSPIB::SoftSPIB(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:52


RTC_DS1307 rtc;
DateTime now;
    f338:	40 e0       	ldi	r20, 0x00	; 0
    f33a:	50 e0       	ldi	r21, 0x00	; 0
    f33c:	ba 01       	movw	r22, r20
    f33e:	8b e5       	ldi	r24, 0x5B	; 91
    f340:	90 e1       	ldi	r25, 0x10	; 16
    f342:	0e 94 0a cc 	call	0x19814	; 0x19814 <DateTime::DateTime(unsigned long)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:55


EthernetClient ethClient;
    f346:	8e e4       	ldi	r24, 0x4E	; 78
    f348:	90 e1       	ldi	r25, 0x10	; 16
    f34a:	0e 94 91 b4 	call	0x16922	; 0x16922 <EthernetClient::EthernetClient()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:56
EthernetClient ethClient1;
    f34e:	81 e4       	ldi	r24, 0x41	; 65
    f350:	90 e1       	ldi	r25, 0x10	; 16
    f352:	0e 94 91 b4 	call	0x16922	; 0x16922 <EthernetClient::EthernetClient()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:57
EthernetUDP udpClient;
    f356:	86 e2       	ldi	r24, 0x26	; 38
    f358:	90 e1       	ldi	r25, 0x10	; 16
    f35a:	0e 94 91 b8 	call	0x17122	; 0x17122 <EthernetUDP::EthernetUDP()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:58
PubSubClient mqtt_client(ethClient);
    f35e:	6e e4       	ldi	r22, 0x4E	; 78
    f360:	70 e1       	ldi	r23, 0x10	; 16
    f362:	89 e0       	ldi	r24, 0x09	; 9
    f364:	9e e0       	ldi	r25, 0x0E	; 14
    f366:	0e 94 b3 c1 	call	0x18366	; 0x18366 <PubSubClient::PubSubClient(Client&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:59
EthernetServer http_server(80);
    f36a:	60 e5       	ldi	r22, 0x50	; 80
    f36c:	70 e0       	ldi	r23, 0x00	; 0
    f36e:	83 e0       	ldi	r24, 0x03	; 3
    f370:	9e e0       	ldi	r25, 0x0E	; 14
    f372:	0e 94 f0 b5 	call	0x16be0	; 0x16be0 <EthernetServer::EthernetServer(unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:62


RF24 radio(NRF_CE, NRF_CS);
    f376:	42 e0       	ldi	r20, 0x02	; 2
    f378:	50 e0       	ldi	r21, 0x00	; 0
    f37a:	63 e0       	ldi	r22, 0x03	; 3
    f37c:	70 e0       	ldi	r23, 0x00	; 0
    f37e:	8b ee       	ldi	r24, 0xEB	; 235
    f380:	9d e0       	ldi	r25, 0x0D	; 13
    f382:	0e 94 c8 c9 	call	0x19390	; 0x19390 <RF24::RF24(unsigned int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:63
RF24Network network(radio);
    f386:	6b ee       	ldi	r22, 0xEB	; 235
    f388:	7d e0       	ldi	r23, 0x0D	; 13
    f38a:	89 e7       	ldi	r24, 0x79	; 121
    f38c:	9c e0       	ldi	r25, 0x0C	; 12
    f38e:	0e 94 b7 cb 	call	0x1976e	; 0x1976e <RF24Network::RF24Network(RF24&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:64
RF24Mesh mesh(radio, network);
    f392:	49 e7       	ldi	r20, 0x79	; 121
    f394:	5c e0       	ldi	r21, 0x0C	; 12
    f396:	6b ee       	ldi	r22, 0xEB	; 235
    f398:	7d e0       	ldi	r23, 0x0D	; 13
    f39a:	81 e6       	ldi	r24, 0x61	; 97
    f39c:	9c e0       	ldi	r25, 0x0C	; 12
    f39e:	0e 94 d1 cb 	call	0x197a2	; 0x197a2 <RF24Mesh::RF24Mesh(RF24&, RF24Network&)>
_ZN24Temperature_LM75_DerivedC4EP7TwoWirehPNS_10AttributesE():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:66
  void writeIntegerTemperatureRegister(uint8_t register_index, int16_t value);

public:

  Temperature_LM75_Derived(TwoWire *bus, uint8_t i2c_address, Attributes *attributes) {
    this->bus = bus;
    f3a2:	c4 e5       	ldi	r28, 0x54	; 84
    f3a4:	dc e0       	ldi	r29, 0x0C	; 12
    f3a6:	8e e3       	ldi	r24, 0x3E	; 62
    f3a8:	93 e1       	ldi	r25, 0x13	; 19
    f3aa:	99 83       	std	Y+1, r25	; 0x01
    f3ac:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:67
    this->i2c_address = i2c_address;
    f3ae:	88 e4       	ldi	r24, 0x48	; 72
    f3b0:	8a 83       	std	Y+2, r24	; 0x02
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:68
    this->attributes = attributes;
    f3b2:	e0 e8       	ldi	r30, 0x80	; 128
    f3b4:	f2 e0       	ldi	r31, 0x02	; 2
    f3b6:	fc 87       	std	Y+12, r31	; 0x0c
    f3b8:	eb 87       	std	Y+11, r30	; 0x0b
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:70

    setInternalResolution(attributes->default_temperature_resolution);
    f3ba:	91 81       	ldd	r25, Z+1	; 0x01
_ZN24Temperature_LM75_Derived21setInternalResolutionEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:51
  Attributes *attributes;

  // Set the internal resolution of the temperature sensor, which affects
  // conversions and which bits are discarded.
  void setInternalResolution(uint8_t resolution) {
    this->resolution = resolution;
    f3bc:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:52
    this->resolution_mask = ~(uint16_t)((1 << (attributes->temperature_width - resolution)) - 1);
    f3be:	80 81       	ld	r24, Z
    f3c0:	89 1b       	sub	r24, r25
    f3c2:	99 0b       	sbc	r25, r25
    f3c4:	61 e0       	ldi	r22, 0x01	; 1
    f3c6:	70 e0       	ldi	r23, 0x00	; 0
    f3c8:	9b 01       	movw	r18, r22
    f3ca:	02 c0       	rjmp	.+4      	; 0xf3d0 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xc0>
    f3cc:	22 0f       	add	r18, r18
    f3ce:	33 1f       	adc	r19, r19
    f3d0:	8a 95       	dec	r24
    f3d2:	e2 f7       	brpl	.-8      	; 0xf3cc <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xbc>
    f3d4:	c9 01       	movw	r24, r18
    f3d6:	91 95       	neg	r25
    f3d8:	81 95       	neg	r24
    f3da:	91 09       	sbc	r25, r1
    f3dc:	9d 83       	std	Y+5, r25	; 0x05
    f3de:	8c 83       	std	Y+4, r24	; 0x04
_ZN24Temperature_LM75_DerivedC4EP7TwoWirehPNS_10AttributesE():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:71
    this->bus = bus;
    this->i2c_address = i2c_address;
    this->attributes = attributes;

    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
    f3e0:	82 81       	ldd	r24, Z+2	; 0x02
_ZN24Temperature_LM75_Derived31setInternalTemperatureFracWidthEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:56
    this->resolution = resolution;
    this->resolution_mask = ~(uint16_t)((1 << (attributes->temperature_width - resolution)) - 1);
  }

  void setInternalTemperatureFracWidth(uint8_t temperature_frac_width) {
    this->temperature_frac_width = temperature_frac_width;
    f3e2:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:57
    temperature_frac_factor = 1.0 / (float)(1 << temperature_frac_width);
    f3e4:	02 c0       	rjmp	.+4      	; 0xf3ea <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xda>
    f3e6:	66 0f       	add	r22, r22
    f3e8:	77 1f       	adc	r23, r23
    f3ea:	8a 95       	dec	r24
    f3ec:	e2 f7       	brpl	.-8      	; 0xf3e6 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xd6>
    f3ee:	07 2e       	mov	r0, r23
    f3f0:	00 0c       	add	r0, r0
    f3f2:	88 0b       	sbc	r24, r24
    f3f4:	99 0b       	sbc	r25, r25
    f3f6:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
    f3fa:	9b 01       	movw	r18, r22
    f3fc:	ac 01       	movw	r20, r24
    f3fe:	60 e0       	ldi	r22, 0x00	; 0
    f400:	70 e0       	ldi	r23, 0x00	; 0
    f402:	80 e8       	ldi	r24, 0x80	; 128
    f404:	9f e3       	ldi	r25, 0x3F	; 63
    f406:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
    f40a:	6f 83       	std	Y+7, r22	; 0x07
    f40c:	78 87       	std	Y+8, r23	; 0x08
    f40e:	89 87       	std	Y+9, r24	; 0x09
    f410:	9a 87       	std	Y+10, r25	; 0x0a
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:69

Generic_LM75_11Bit lm75_temp;


LCDWIKI_KBV my_lcd(ST7796S, 33, 35, 36, 32, 34); //model,cs,cd,wr,rd,reset
    f412:	82 e2       	ldi	r24, 0x22	; 34
    f414:	c8 2e       	mov	r12, r24
    f416:	90 e2       	ldi	r25, 0x20	; 32
    f418:	e9 2e       	mov	r14, r25
    f41a:	04 e2       	ldi	r16, 0x24	; 36
    f41c:	23 e2       	ldi	r18, 0x23	; 35
    f41e:	41 e2       	ldi	r20, 0x21	; 33
    f420:	6a e0       	ldi	r22, 0x0A	; 10
    f422:	70 e0       	ldi	r23, 0x00	; 0
    f424:	85 e1       	ldi	r24, 0x15	; 21
    f426:	9c e0       	ldi	r25, 0x0C	; 12
    f428:	0e 94 65 9b 	call	0x136ca	; 0x136ca <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:70
LCDWIKI_TOUCH my_touch(28, 27, 29, 30, 7, 31); //tcs,tclk,tdout,tdin,tirq, sdcd
    f42c:	2f e1       	ldi	r18, 0x1F	; 31
    f42e:	c2 2e       	mov	r12, r18
    f430:	37 e0       	ldi	r19, 0x07	; 7
    f432:	e3 2e       	mov	r14, r19
    f434:	0e e1       	ldi	r16, 0x1E	; 30
    f436:	2d e1       	ldi	r18, 0x1D	; 29
    f438:	4b e1       	ldi	r20, 0x1B	; 27
    f43a:	6c e1       	ldi	r22, 0x1C	; 28
    f43c:	83 ef       	ldi	r24, 0xF3	; 243
    f43e:	9b e0       	ldi	r25, 0x0B	; 11
    f440:	0e 94 a2 a8 	call	0x15144	; 0x15144 <LCDWIKI_TOUCH::LCDWIKI_TOUCH(signed char, signed char, signed char, signed char, signed char, signed char)>
_ZN11ArduinoJson18StaticJsonDocumentILj256EEC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/StaticJsonDocument.hpp:18
template <size_t CAPACITY>
class StaticJsonDocument {
 public:
  uint8_t nestingLimit;

  StaticJsonDocument() : nestingLimit(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
    f444:	e4 ee       	ldi	r30, 0xE4	; 228
    f446:	fa e0       	ldi	r31, 0x0A	; 10
    f448:	8a e0       	ldi	r24, 0x0A	; 10
    f44a:	80 83       	st	Z, r24
_ZN11ArduinoJson9Internals20StaticMemoryPoolBaseC4EPcj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:44
    StaticMemoryPoolBase* _parent;
    char* _start;
  };

  StaticMemoryPoolBase(char* memoryPool, size_t capa)
      : _buffer(memoryPool), _capacity(capa), _size(0) {}
    f44c:	8d ee       	ldi	r24, 0xED	; 237
    f44e:	9a e0       	ldi	r25, 0x0A	; 10
    f450:	94 83       	std	Z+4, r25	; 0x04
    f452:	83 83       	std	Z+3, r24	; 0x03
    f454:	80 e0       	ldi	r24, 0x00	; 0
    f456:	91 e0       	ldi	r25, 0x01	; 1
    f458:	96 83       	std	Z+6, r25	; 0x06
    f45a:	85 83       	std	Z+5, r24	; 0x05
    f45c:	10 86       	std	Z+8, r1	; 0x08
    f45e:	17 82       	std	Z+7, r1	; 0x07
_ZN11ArduinoJson9Internals16StaticMemoryPoolILj256EEC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:115
class StaticMemoryPool : public StaticMemoryPoolBase {
  static const size_t ACTUAL_CAPACITY = Max<1, CAPACITY>::value;

 public:
  explicit StaticMemoryPool()
      : StaticMemoryPoolBase(_buffer, ACTUAL_CAPACITY) {}
    f460:	83 e3       	ldi	r24, 0x33	; 51
    f462:	98 e0       	ldi	r25, 0x08	; 8
    f464:	92 83       	std	Z+2, r25	; 0x02
    f466:	81 83       	std	Z+1, r24	; 0x01
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    f468:	10 92 ee 0b 	sts	0x0BEE, r1	; 0x800bee <doc+0x10a>
    f46c:	10 92 ed 0b 	sts	0x0BED, r1	; 0x800bed <doc+0x109>
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:74

StaticJsonDocument<256> doc;

SRAM_23LC SRAM(&swSPI, STORAGE_RAM_CS, SRAM_23LC1024);
    f470:	21 e0       	ldi	r18, 0x01	; 1
    f472:	30 e0       	ldi	r19, 0x00	; 0
    f474:	46 e1       	ldi	r20, 0x16	; 22
    f476:	63 e6       	ldi	r22, 0x63	; 99
    f478:	70 e1       	ldi	r23, 0x10	; 16
    f47a:	87 ed       	ldi	r24, 0xD7	; 215
    f47c:	9a e0       	ldi	r25, 0x0A	; 10
    f47e:	0e 94 10 ad 	call	0x15a20	; 0x15a20 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:75
EEPROM_CAT25 SROM(&swSPI, STORAGE_EEPROM_CS , CAT25M02);
    f482:	30 e0       	ldi	r19, 0x00	; 0
    f484:	20 e0       	ldi	r18, 0x00	; 0
    f486:	47 e1       	ldi	r20, 0x17	; 23
    f488:	63 e6       	ldi	r22, 0x63	; 99
    f48a:	70 e1       	ldi	r23, 0x10	; 16
    f48c:	88 ec       	ldi	r24, 0xC8	; 200
    f48e:	9a e0       	ldi	r25, 0x0A	; 10
_GLOBAL__sub_I__Z11serial_putccP6__file():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5792
  strcpy_P(str1, new_text_mqtt_error);
  itoa(mqtt_error, str2, 10);
  strcat(str1, str2);
  show_string(str1, x + 5 , y + 145 , 1, BLACK, WHITE, 0);

}
    f490:	df 91       	pop	r29
    f492:	cf 91       	pop	r28
    f494:	0f 91       	pop	r16
    f496:	ef 90       	pop	r14
    f498:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:75
LCDWIKI_TOUCH my_touch(28, 27, 29, 30, 7, 31); //tcs,tclk,tdout,tdin,tirq, sdcd

StaticJsonDocument<256> doc;

SRAM_23LC SRAM(&swSPI, STORAGE_RAM_CS, SRAM_23LC1024);
EEPROM_CAT25 SROM(&swSPI, STORAGE_EEPROM_CS , CAT25M02);
    f49a:	0c 94 41 ae 	jmp	0x15c82	; 0x15c82 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)>

0000f49e <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3593
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
    f49e:	2f 92       	push	r2
    f4a0:	3f 92       	push	r3
    f4a2:	4f 92       	push	r4
    f4a4:	5f 92       	push	r5
    f4a6:	6f 92       	push	r6
    f4a8:	7f 92       	push	r7
    f4aa:	8f 92       	push	r8
    f4ac:	9f 92       	push	r9
    f4ae:	af 92       	push	r10
    f4b0:	bf 92       	push	r11
    f4b2:	cf 92       	push	r12
    f4b4:	df 92       	push	r13
    f4b6:	ef 92       	push	r14
    f4b8:	ff 92       	push	r15
    f4ba:	0f 93       	push	r16
    f4bc:	1f 93       	push	r17
    f4be:	cf 93       	push	r28
    f4c0:	df 93       	push	r29
    f4c2:	cd b7       	in	r28, 0x3d	; 61
    f4c4:	de b7       	in	r29, 0x3e	; 62
    f4c6:	c2 53       	subi	r28, 0x32	; 50
    f4c8:	d1 40       	sbci	r29, 0x01	; 1
    f4ca:	0f b6       	in	r0, 0x3f	; 63
    f4cc:	f8 94       	cli
    f4ce:	de bf       	out	0x3e, r29	; 62
    f4d0:	0f be       	out	0x3f, r0	; 63
    f4d2:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3605
  char s_dvanact[8];
  char s_current[8];
  struct_DDS18s20 tds;
  long milis;

  NTPClient timeClient(udpClient);
    f4d4:	66 e2       	ldi	r22, 0x26	; 38
    f4d6:	70 e1       	ldi	r23, 0x10	; 16
    f4d8:	ce 01       	movw	r24, r28
    f4da:	01 96       	adiw	r24, 0x01	; 1
    f4dc:	0e 94 e9 d3 	call	0x1a7d2	; 0x1a7d2 <NTPClient::NTPClient(UDP&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3607

  setup_io_pin();
    f4e0:	0e 94 27 51 	call	0xa24e	; 0xa24e <setup_io_pin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3609

  interrupts();             // enable all interrupts
    f4e4:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3610
  SPI.begin();
    f4e6:	0e 94 0b ae 	call	0x15c16	; 0x15c16 <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3611
  Wire.begin();
    f4ea:	8e e3       	ldi	r24, 0x3E	; 62
    f4ec:	93 e1       	ldi	r25, 0x13	; 19
    f4ee:	0e 94 e7 ce 	call	0x19dce	; 0x19dce <TwoWire::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3612
  rtc.begin();
    f4f2:	82 e6       	ldi	r24, 0x62	; 98
    f4f4:	90 e1       	ldi	r25, 0x10	; 16
    f4f6:	0e 94 a8 cc 	call	0x19950	; 0x19950 <RTC_DS1307::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3614

  mqtt_set_public_mqtt_client(&mqtt_client);
    f4fa:	89 e0       	ldi	r24, 0x09	; 9
    f4fc:	9e e0       	ldi	r25, 0x0E	; 14
    f4fe:	0e 94 a5 8b 	call	0x1174a	; 0x1174a <mqtt_set_public_mqtt_client(PubSubClient*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3615
  fdevopen( &printf_via_mqtt, 0);
    f502:	70 e0       	ldi	r23, 0x00	; 0
    f504:	60 e0       	ldi	r22, 0x00	; 0
    f506:	87 e4       	ldi	r24, 0x47	; 71
    f508:	9b e8       	ldi	r25, 0x8B	; 139
    f50a:	0e 94 a9 e2 	call	0x1c552	; 0x1c552 <fdevopen>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3616
  printf_begin();
    f50e:	0e 94 c8 38 	call	0x7190	; 0x7190 <printf_begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3618

  swSPI.begin();
    f512:	83 e6       	ldi	r24, 0x63	; 99
    f514:	90 e1       	ldi	r25, 0x10	; 16
    f516:	0e 94 60 ac 	call	0x158c0	; 0x158c0 <SoftSPIB::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3620

  MenuHistoryInit();
    f51a:	0e 94 00 39 	call	0x7200	; 0x7200 <MenuHistoryInit()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3622

  my_lcd.Init_LCD();
    f51e:	85 e1       	ldi	r24, 0x15	; 21
    f520:	9c e0       	ldi	r25, 0x0C	; 12
    f522:	0e 94 7b a8 	call	0x150f6	; 0x150f6 <LCDWIKI_KBV::Init_LCD()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3623
  my_lcd.Set_Rotation(3);
    f526:	63 e0       	ldi	r22, 0x03	; 3
    f528:	85 e1       	ldi	r24, 0x15	; 21
    f52a:	9c e0       	ldi	r25, 0x0C	; 12
    f52c:	0e 94 e5 a5 	call	0x14bca	; 0x14bca <LCDWIKI_KBV::Set_Rotation(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3624
  my_lcd.Fill_Screen(WHITE);
    f530:	6f ef       	ldi	r22, 0xFF	; 255
    f532:	7f ef       	ldi	r23, 0xFF	; 255
    f534:	85 e1       	ldi	r24, 0x15	; 21
    f536:	9c e0       	ldi	r25, 0x0C	; 12
    f538:	0e 94 aa 96 	call	0x12d54	; 0x12d54 <LCDWIKI_GUI::Fill_Screen(unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3625
  my_lcd.Set_Draw_color(BLUE);
    f53c:	6f e1       	ldi	r22, 0x1F	; 31
    f53e:	70 e0       	ldi	r23, 0x00	; 0
    f540:	85 e1       	ldi	r24, 0x15	; 21
    f542:	9c e0       	ldi	r25, 0x0C	; 12
    f544:	0e 94 4a 96 	call	0x12c94	; 0x12c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3626
  strcpy_P(str1, term_title);
    f548:	62 e3       	ldi	r22, 0x32	; 50
    f54a:	7c e5       	ldi	r23, 0x5C	; 92
    f54c:	ce 01       	movw	r24, r28
    f54e:	88 57       	subi	r24, 0x78	; 120
    f550:	9f 4f       	sbci	r25, 0xFF	; 255
    f552:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3627
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
    f556:	c1 2c       	mov	r12, r1
    f558:	ee 24       	eor	r14, r14
    f55a:	ea 94       	dec	r14
    f55c:	fe 2c       	mov	r15, r14
    f55e:	0f e1       	ldi	r16, 0x1F	; 31
    f560:	10 e0       	ldi	r17, 0x00	; 0
    f562:	22 e0       	ldi	r18, 0x02	; 2
    f564:	4a e0       	ldi	r20, 0x0A	; 10
    f566:	50 e0       	ldi	r21, 0x00	; 0
    f568:	6e e1       	ldi	r22, 0x1E	; 30
    f56a:	70 e0       	ldi	r23, 0x00	; 0
    f56c:	ce 01       	movw	r24, r28
    f56e:	88 57       	subi	r24, 0x78	; 120
    f570:	9f 4f       	sbci	r25, 0xFF	; 255
    f572:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    f576:	1e e1       	ldi	r17, 0x1E	; 30
    f578:	61 2e       	mov	r6, r17
    f57a:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3629
  ///
  for (uint8_t init = 0;  init < 16; init++)
    f57c:	c0 5d       	subi	r28, 0xD0	; 208
    f57e:	de 4f       	sbci	r29, 0xFE	; 254
    f580:	18 82       	st	Y, r1
    f582:	c0 53       	subi	r28, 0x30	; 48
    f584:	d1 40       	sbci	r29, 0x01	; 1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    f586:	5e 01       	movw	r10, r28
    f588:	28 e4       	ldi	r18, 0x48	; 72
    f58a:	a2 0e       	add	r10, r18
    f58c:	b1 1c       	adc	r11, r1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3731
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
    f58e:	68 ec       	ldi	r22, 0xC8	; 200
    f590:	70 e0       	ldi	r23, 0x00	; 0
    f592:	6c 0f       	add	r22, r28
    f594:	7d 1f       	adc	r23, r29
    f596:	64 5f       	subi	r22, 0xF4	; 244
    f598:	7f 4f       	sbci	r23, 0xFF	; 255
    f59a:	cf 5c       	subi	r28, 0xCF	; 207
    f59c:	de 4f       	sbci	r29, 0xFE	; 254
    f59e:	79 83       	std	Y+1, r23	; 0x01
    f5a0:	68 83       	st	Y, r22
    f5a2:	c1 53       	subi	r28, 0x31	; 49
    f5a4:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3690
    if (init == 1)
    {
      strcpy_P(str1, text_vnitrni_ochrany);
      strcat(str1, ":2");
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
    f5a6:	4e 01       	movw	r8, r28
    f5a8:	7c ef       	ldi	r23, 0xFC	; 252
    f5aa:	87 0e       	add	r8, r23
    f5ac:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3676
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    f5ae:	ce 01       	movw	r24, r28
    f5b0:	8c 5e       	subi	r24, 0xEC	; 236
    f5b2:	9e 4f       	sbci	r25, 0xFE	; 254
    f5b4:	c2 5d       	subi	r28, 0xD2	; 210
    f5b6:	de 4f       	sbci	r29, 0xFE	; 254
    f5b8:	99 83       	std	Y+1, r25	; 0x01
    f5ba:	88 83       	st	Y, r24
    f5bc:	ce 52       	subi	r28, 0x2E	; 46
    f5be:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3677
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    f5c0:	1e 01       	movw	r2, r28
    f5c2:	94 ef       	ldi	r25, 0xF4	; 244
    f5c4:	29 1a       	sub	r2, r25
    f5c6:	9e ef       	ldi	r25, 0xFE	; 254
    f5c8:	39 0a       	sbc	r3, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3678
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    f5ca:	2e 01       	movw	r4, r28
    f5cc:	2c ef       	ldi	r18, 0xFC	; 252
    f5ce:	42 1a       	sub	r4, r18
    f5d0:	2e ef       	ldi	r18, 0xFE	; 254
    f5d2:	52 0a       	sbc	r5, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3631
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
    f5d4:	c1 2c       	mov	r12, r1
    f5d6:	ee 24       	eor	r14, r14
    f5d8:	ea 94       	dec	r14
    f5da:	fe 2c       	mov	r15, r14
    f5dc:	00 e0       	ldi	r16, 0x00	; 0
    f5de:	18 ef       	ldi	r17, 0xF8	; 248
    f5e0:	21 e0       	ldi	r18, 0x01	; 1
    f5e2:	4e e1       	ldi	r20, 0x1E	; 30
    f5e4:	50 e0       	ldi	r21, 0x00	; 0
    f5e6:	b3 01       	movw	r22, r6
    f5e8:	82 ed       	ldi	r24, 0xD2	; 210
    f5ea:	97 e0       	ldi	r25, 0x07	; 7
    f5ec:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3633
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
    f5f0:	c0 5d       	subi	r28, 0xD0	; 208
    f5f2:	de 4f       	sbci	r29, 0xFE	; 254
    f5f4:	68 81       	ld	r22, Y
    f5f6:	c0 53       	subi	r28, 0x30	; 48
    f5f8:	d1 40       	sbci	r29, 0x01	; 1
    f5fa:	61 11       	cpse	r22, r1
    f5fc:	6d c1       	rjmp	.+730    	; 0xf8d8 <setup+0x43a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3635
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    f5fe:	68 ee       	ldi	r22, 0xE8	; 232
    f600:	7b e5       	ldi	r23, 0x5B	; 91
    f602:	ce 01       	movw	r24, r28
    f604:	88 57       	subi	r24, 0x78	; 120
    f606:	9f 4f       	sbci	r25, 0xFF	; 255
    f608:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3636
      strcat(str1, ":1");
    f60c:	64 ed       	ldi	r22, 0xD4	; 212
    f60e:	77 e0       	ldi	r23, 0x07	; 7
    f610:	ce 01       	movw	r24, r28
    f612:	88 57       	subi	r24, 0x78	; 120
    f614:	9f 4f       	sbci	r25, 0xFF	; 255
    f616:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3637
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f61a:	00 ee       	ldi	r16, 0xE0	; 224
    f61c:	17 e0       	ldi	r17, 0x07	; 7
    f61e:	21 e0       	ldi	r18, 0x01	; 1
    f620:	42 e3       	ldi	r20, 0x32	; 50
    f622:	50 e0       	ldi	r21, 0x00	; 0
    f624:	6e e1       	ldi	r22, 0x1E	; 30
    f626:	70 e0       	ldi	r23, 0x00	; 0
    f628:	ce 01       	movw	r24, r28
    f62a:	88 57       	subi	r24, 0x78	; 120
    f62c:	9f 4f       	sbci	r25, 0xFF	; 255
    f62e:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3639

      tritri = 0;
    f632:	10 92 bd 0a 	sts	0x0ABD, r1	; 0x800abd <tritri+0x1>
    f636:	10 92 bc 0a 	sts	0x0ABC, r1	; 0x800abc <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3640
      petnula = 0;
    f63a:	10 92 bb 0a 	sts	0x0ABB, r1	; 0x800abb <petnula+0x1>
    f63e:	10 92 ba 0a 	sts	0x0ABA, r1	; 0x800aba <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3641
      dvanact = 0;
    f642:	10 92 b9 0a 	sts	0x0AB9, r1	; 0x800ab9 <dvanact+0x1>
    f646:	10 92 b8 0a 	sts	0x0AB8, r1	; 0x800ab8 <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3643
      dvanact = 0;
      light_curr = 0;
    f64a:	10 92 b5 0a 	sts	0x0AB5, r1	; 0x800ab5 <light_curr+0x1>
    f64e:	10 92 b4 0a 	sts	0x0AB4, r1	; 0x800ab4 <light_curr>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3645
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
    f652:	43 e0       	ldi	r20, 0x03	; 3
    f654:	66 e0       	ldi	r22, 0x06	; 6
    f656:	88 ef       	ldi	r24, 0xF8	; 248
    f658:	0e 94 f6 d5 	call	0x1abec	; 0x1abec <init_a2d(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3646
      a2d_handler(a2d_complete);
    f65c:	8e e6       	ldi	r24, 0x6E	; 110
    f65e:	94 e3       	ldi	r25, 0x34	; 52
    f660:	0e 94 f1 d5 	call	0x1abe2	; 0x1abe2 <a2d_handler(void (*)(unsigned char, unsigned int))>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3649
      ///
      /// spotreba proudu
      a2d_run_now = 0;
    f664:	10 92 b3 0a 	sts	0x0AB3, r1	; 0x800ab3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3650
      a2d_start_first(A_PROUD);
    f668:	83 e0       	ldi	r24, 0x03	; 3
    f66a:	0e 94 13 d6 	call	0x1ac26	; 0x1ac26 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3651
      milis = millis();
    f66e:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
    f672:	6b 01       	movw	r12, r22
    f674:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3652
      while (a2d_run_now == 0 && millis() - milis < 10);
    f676:	80 91 b3 0a 	lds	r24, 0x0AB3	; 0x800ab3 <a2d_run_now>
    f67a:	81 11       	cpse	r24, r1
    f67c:	0b c0       	rjmp	.+22     	; 0xf694 <setup+0x1f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3652 (discriminator 1)
    f67e:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
    f682:	6c 19       	sub	r22, r12
    f684:	7d 09       	sbc	r23, r13
    f686:	8e 09       	sbc	r24, r14
    f688:	9f 09       	sbc	r25, r15
    f68a:	6a 30       	cpi	r22, 0x0A	; 10
    f68c:	71 05       	cpc	r23, r1
    f68e:	81 05       	cpc	r24, r1
    f690:	91 05       	cpc	r25, r1
    f692:	88 f3       	brcs	.-30     	; 0xf676 <setup+0x1d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3654
      /// regulator 3.3V
      a2d_run_now = 0;
    f694:	10 92 b3 0a 	sts	0x0AB3, r1	; 0x800ab3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3655
      a2d_start_first(A_TRIV);
    f698:	86 e0       	ldi	r24, 0x06	; 6
    f69a:	0e 94 13 d6 	call	0x1ac26	; 0x1ac26 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3656
      milis = millis();
    f69e:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
    f6a2:	6b 01       	movw	r12, r22
    f6a4:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3657
      while (a2d_run_now == 0 && millis() - milis < 10);
    f6a6:	80 91 b3 0a 	lds	r24, 0x0AB3	; 0x800ab3 <a2d_run_now>
    f6aa:	81 11       	cpse	r24, r1
    f6ac:	0b c0       	rjmp	.+22     	; 0xf6c4 <setup+0x226>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3657 (discriminator 1)
    f6ae:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
    f6b2:	6c 19       	sub	r22, r12
    f6b4:	7d 09       	sbc	r23, r13
    f6b6:	8e 09       	sbc	r24, r14
    f6b8:	9f 09       	sbc	r25, r15
    f6ba:	6a 30       	cpi	r22, 0x0A	; 10
    f6bc:	71 05       	cpc	r23, r1
    f6be:	81 05       	cpc	r24, r1
    f6c0:	91 05       	cpc	r25, r1
    f6c2:	88 f3       	brcs	.-30     	; 0xf6a6 <setup+0x208>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3659
      /// regulator 5.0V
      a2d_run_now = 0;
    f6c4:	10 92 b3 0a 	sts	0x0AB3, r1	; 0x800ab3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3660
      a2d_start_first(A_PETV);
    f6c8:	85 e0       	ldi	r24, 0x05	; 5
    f6ca:	0e 94 13 d6 	call	0x1ac26	; 0x1ac26 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3661
      milis = millis();
    f6ce:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
    f6d2:	6b 01       	movw	r12, r22
    f6d4:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3662
      while (a2d_run_now == 0 && millis() - milis < 10);
    f6d6:	80 91 b3 0a 	lds	r24, 0x0AB3	; 0x800ab3 <a2d_run_now>
    f6da:	81 11       	cpse	r24, r1
    f6dc:	0b c0       	rjmp	.+22     	; 0xf6f4 <setup+0x256>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3662 (discriminator 1)
    f6de:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
    f6e2:	6c 19       	sub	r22, r12
    f6e4:	7d 09       	sbc	r23, r13
    f6e6:	8e 09       	sbc	r24, r14
    f6e8:	9f 09       	sbc	r25, r15
    f6ea:	6a 30       	cpi	r22, 0x0A	; 10
    f6ec:	71 05       	cpc	r23, r1
    f6ee:	81 05       	cpc	r24, r1
    f6f0:	91 05       	cpc	r25, r1
    f6f2:	88 f3       	brcs	.-30     	; 0xf6d6 <setup+0x238>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3664
      /// vstupni napeti 12V
      a2d_run_now = 0;
    f6f4:	10 92 b3 0a 	sts	0x0AB3, r1	; 0x800ab3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3665
      a2d_start_first(A_DVANACTV);
    f6f8:	84 e0       	ldi	r24, 0x04	; 4
    f6fa:	0e 94 13 d6 	call	0x1ac26	; 0x1ac26 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3666
      milis = millis();
    f6fe:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
    f702:	6b 01       	movw	r12, r22
    f704:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3667
      while (a2d_run_now == 0 && millis() - milis < 10);
    f706:	80 91 b3 0a 	lds	r24, 0x0AB3	; 0x800ab3 <a2d_run_now>
    f70a:	81 11       	cpse	r24, r1
    f70c:	0b c0       	rjmp	.+22     	; 0xf724 <setup+0x286>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3667 (discriminator 1)
    f70e:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
    f712:	6c 19       	sub	r22, r12
    f714:	7d 09       	sbc	r23, r13
    f716:	8e 09       	sbc	r24, r14
    f718:	9f 09       	sbc	r25, r15
    f71a:	6a 30       	cpi	r22, 0x0A	; 10
    f71c:	71 05       	cpc	r23, r1
    f71e:	81 05       	cpc	r24, r1
    f720:	91 05       	cpc	r25, r1
    f722:	88 f3       	brcs	.-30     	; 0xf706 <setup+0x268>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3669
      /// aktualni intenzita svetla
      a2d_run_now = 0;
    f724:	10 92 b3 0a 	sts	0x0AB3, r1	; 0x800ab3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3670
      a2d_start_first(A_LIGHT);
    f728:	87 e0       	ldi	r24, 0x07	; 7
    f72a:	0e 94 13 d6 	call	0x1ac26	; 0x1ac26 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3671
      milis = millis();
    f72e:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
    f732:	6b 01       	movw	r12, r22
    f734:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3672
      while (a2d_run_now == 0 && millis() - milis < 10);
    f736:	80 91 b3 0a 	lds	r24, 0x0AB3	; 0x800ab3 <a2d_run_now>
    f73a:	81 11       	cpse	r24, r1
    f73c:	0b c0       	rjmp	.+22     	; 0xf754 <setup+0x2b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3672 (discriminator 1)
    f73e:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
    f742:	6c 19       	sub	r22, r12
    f744:	7d 09       	sbc	r23, r13
    f746:	8e 09       	sbc	r24, r14
    f748:	9f 09       	sbc	r25, r15
    f74a:	6a 30       	cpi	r22, 0x0A	; 10
    f74c:	71 05       	cpc	r23, r1
    f74e:	81 05       	cpc	r24, r1
    f750:	91 05       	cpc	r25, r1
    f752:	88 f3       	brcs	.-30     	; 0xf736 <setup+0x298>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3674
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
    f754:	10 92 b3 0a 	sts	0x0AB3, r1	; 0x800ab3 <a2d_run_now>
_Z15prepocet_napetijh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3343
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f758:	80 91 bc 0a 	lds	r24, 0x0ABC	; 0x800abc <tritri>
    f75c:	90 91 bd 0a 	lds	r25, 0x0ABD	; 0x800abd <tritri+0x1>
    f760:	25 e0       	ldi	r18, 0x05	; 5
    f762:	28 9f       	mul	r18, r24
    f764:	b0 01       	movw	r22, r0
    f766:	29 9f       	mul	r18, r25
    f768:	70 0d       	add	r23, r0
    f76a:	11 24       	eor	r1, r1
    f76c:	90 e0       	ldi	r25, 0x00	; 0
    f76e:	80 e0       	ldi	r24, 0x00	; 0
    f770:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
    f774:	20 e0       	ldi	r18, 0x00	; 0
    f776:	30 e0       	ldi	r19, 0x00	; 0
    f778:	4a e7       	ldi	r20, 0x7A	; 122
    f77a:	54 e4       	ldi	r21, 0x44	; 68
    f77c:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3676
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    f780:	8e 01       	movw	r16, r28
    f782:	0c 5e       	subi	r16, 0xEC	; 236
    f784:	1e 4f       	sbci	r17, 0xFE	; 254
    f786:	22 e0       	ldi	r18, 0x02	; 2
    f788:	44 e0       	ldi	r20, 0x04	; 4
    f78a:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
_Z15prepocet_napetijh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3343
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f78e:	60 91 ba 0a 	lds	r22, 0x0ABA	; 0x800aba <petnula>
    f792:	70 91 bb 0a 	lds	r23, 0x0ABB	; 0x800abb <petnula+0x1>
    f796:	e3 e0       	ldi	r30, 0x03	; 3
    f798:	66 0f       	add	r22, r22
    f79a:	77 1f       	adc	r23, r23
    f79c:	ea 95       	dec	r30
    f79e:	e1 f7       	brne	.-8      	; 0xf798 <setup+0x2fa>
    f7a0:	90 e0       	ldi	r25, 0x00	; 0
    f7a2:	80 e0       	ldi	r24, 0x00	; 0
    f7a4:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
    f7a8:	20 e0       	ldi	r18, 0x00	; 0
    f7aa:	30 e0       	ldi	r19, 0x00	; 0
    f7ac:	4a e7       	ldi	r20, 0x7A	; 122
    f7ae:	54 e4       	ldi	r21, 0x44	; 68
    f7b0:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3677
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    f7b4:	81 01       	movw	r16, r2
    f7b6:	22 e0       	ldi	r18, 0x02	; 2
    f7b8:	44 e0       	ldi	r20, 0x04	; 4
    f7ba:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
_Z15prepocet_napetijh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3343
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f7be:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <dvanact>
    f7c2:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <dvanact+0x1>
    f7c6:	29 e3       	ldi	r18, 0x39	; 57
    f7c8:	28 9f       	mul	r18, r24
    f7ca:	b0 01       	movw	r22, r0
    f7cc:	29 9f       	mul	r18, r25
    f7ce:	70 0d       	add	r23, r0
    f7d0:	11 24       	eor	r1, r1
    f7d2:	90 e0       	ldi	r25, 0x00	; 0
    f7d4:	80 e0       	ldi	r24, 0x00	; 0
    f7d6:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
    f7da:	20 e0       	ldi	r18, 0x00	; 0
    f7dc:	30 e0       	ldi	r19, 0x00	; 0
    f7de:	4a e7       	ldi	r20, 0x7A	; 122
    f7e0:	54 e4       	ldi	r21, 0x44	; 68
    f7e2:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3678
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    f7e6:	82 01       	movw	r16, r4
    f7e8:	22 e0       	ldi	r18, 0x02	; 2
    f7ea:	44 e0       	ldi	r20, 0x04	; 4
    f7ec:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
_Z15prepocet_prouduj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3358
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    f7f0:	60 91 b6 0a 	lds	r22, 0x0AB6	; 0x800ab6 <proud>
    f7f4:	70 91 b7 0a 	lds	r23, 0x0AB7	; 0x800ab7 <proud+0x1>
    f7f8:	90 e0       	ldi	r25, 0x00	; 0
    f7fa:	80 e0       	ldi	r24, 0x00	; 0
    f7fc:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3679
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    f800:	84 01       	movw	r16, r8
    f802:	22 e0       	ldi	r18, 0x02	; 2
    f804:	44 e0       	ldi	r20, 0x04	; 4
    f806:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3680
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
    f80a:	9f 92       	push	r9
    f80c:	8f 92       	push	r8
    f80e:	5f 92       	push	r5
    f810:	4f 92       	push	r4
    f812:	3f 92       	push	r3
    f814:	2f 92       	push	r2
    f816:	c1 5d       	subi	r28, 0xD1	; 209
    f818:	de 4f       	sbci	r29, 0xFE	; 254
    f81a:	78 81       	ld	r23, Y
    f81c:	cf 52       	subi	r28, 0x2F	; 47
    f81e:	d1 40       	sbci	r29, 0x01	; 1
    f820:	7f 93       	push	r23
    f822:	c2 5d       	subi	r28, 0xD2	; 210
    f824:	de 4f       	sbci	r29, 0xFE	; 254
    f826:	88 81       	ld	r24, Y
    f828:	ce 52       	subi	r28, 0x2E	; 46
    f82a:	d1 40       	sbci	r29, 0x01	; 1
    f82c:	8f 93       	push	r24
    f82e:	87 ed       	ldi	r24, 0xD7	; 215
    f830:	97 e0       	ldi	r25, 0x07	; 7
    f832:	9f 93       	push	r25
    f834:	8f 93       	push	r24
    f836:	bf 92       	push	r11
    f838:	af 92       	push	r10
    f83a:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3681
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f83e:	c1 2c       	mov	r12, r1
    f840:	ee 24       	eor	r14, r14
    f842:	ea 94       	dec	r14
    f844:	fe 2c       	mov	r15, r14
    f846:	00 ee       	ldi	r16, 0xE0	; 224
    f848:	17 e0       	ldi	r17, 0x07	; 7
    f84a:	21 e0       	ldi	r18, 0x01	; 1
    f84c:	42 e3       	ldi	r20, 0x32	; 50
    f84e:	50 e0       	ldi	r21, 0x00	; 0
    f850:	60 ea       	ldi	r22, 0xA0	; 160
    f852:	70 e0       	ldi	r23, 0x00	; 0
    f854:	c5 01       	movw	r24, r10
    f856:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    f85a:	0f b6       	in	r0, 0x3f	; 63
    f85c:	f8 94       	cli
    f85e:	de bf       	out	0x3e, r29	; 62
    f860:	0f be       	out	0x3f, r0	; 63
    f862:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3992
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
    f864:	c0 5d       	subi	r28, 0xD0	; 208
    f866:	de 4f       	sbci	r29, 0xFE	; 254
    f868:	88 81       	ld	r24, Y
    f86a:	c0 53       	subi	r28, 0x30	; 48
    f86c:	d1 40       	sbci	r29, 0x01	; 1
    f86e:	8e 30       	cpi	r24, 0x0E	; 14
    f870:	09 f0       	breq	.+2      	; 0xf874 <setup+0x3d6>
    f872:	d2 c4       	rjmp	.+2468   	; 0x10218 <__EEPROM_REGION_LENGTH__+0x218>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3994
    {
      strcpy_P(str1, text_ntp_cas);
    f874:	67 e8       	ldi	r22, 0x87	; 135
    f876:	7b e5       	ldi	r23, 0x5B	; 91
    f878:	ce 01       	movw	r24, r28
    f87a:	88 57       	subi	r24, 0x78	; 120
    f87c:	9f 4f       	sbci	r25, 0xFF	; 255
    f87e:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3995
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f882:	c1 2c       	mov	r12, r1
    f884:	ee 24       	eor	r14, r14
    f886:	ea 94       	dec	r14
    f888:	fe 2c       	mov	r15, r14
    f88a:	00 ee       	ldi	r16, 0xE0	; 224
    f88c:	17 e0       	ldi	r17, 0x07	; 7
    f88e:	21 e0       	ldi	r18, 0x01	; 1
    f890:	4e eb       	ldi	r20, 0xBE	; 190
    f892:	50 e0       	ldi	r21, 0x00	; 0
    f894:	6e e1       	ldi	r22, 0x1E	; 30
    f896:	70 e0       	ldi	r23, 0x00	; 0
    f898:	ce 01       	movw	r24, r28
    f89a:	88 57       	subi	r24, 0x78	; 120
    f89c:	9f 4f       	sbci	r25, 0xFF	; 255
    f89e:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3996
      if (ntp_check(&timeClient) == 0)
    f8a2:	ce 01       	movw	r24, r28
    f8a4:	01 96       	adiw	r24, 0x01	; 1
    f8a6:	0e 94 04 8b 	call	0x11608	; 0x11608 <ntp_check(NTPClient*)>
    f8aa:	81 11       	cpse	r24, r1
    f8ac:	9c c4       	rjmp	.+2360   	; 0x101e6 <__EEPROM_REGION_LENGTH__+0x1e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3998
      {
        strcpy_P(str1, text_err);
    f8ae:	63 e4       	ldi	r22, 0x43	; 67
    f8b0:	79 e5       	ldi	r23, 0x59	; 89
    f8b2:	ce 01       	movw	r24, r28
    f8b4:	88 57       	subi	r24, 0x78	; 120
    f8b6:	9f 4f       	sbci	r25, 0xFF	; 255
    f8b8:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3999
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    f8bc:	00 e0       	ldi	r16, 0x00	; 0
    f8be:	18 ef       	ldi	r17, 0xF8	; 248
    f8c0:	21 e0       	ldi	r18, 0x01	; 1
    f8c2:	4e eb       	ldi	r20, 0xBE	; 190
    f8c4:	50 e0       	ldi	r21, 0x00	; 0
    f8c6:	60 ea       	ldi	r22, 0xA0	; 160
    f8c8:	70 e0       	ldi	r23, 0x00	; 0
    f8ca:	ce 01       	movw	r24, r28
    f8cc:	88 57       	subi	r24, 0x78	; 120
    f8ce:	9f 4f       	sbci	r25, 0xFF	; 255
    f8d0:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4000
        selftest_set_0(SELFTEST_ERR_NTP);
    f8d4:	81 e0       	ldi	r24, 0x01	; 1
    f8d6:	68 c3       	rjmp	.+1744   	; 0xffa8 <__DATA_REGION_LENGTH__+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3685
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
    f8d8:	c0 5d       	subi	r28, 0xD0	; 208
    f8da:	de 4f       	sbci	r29, 0xFE	; 254
    f8dc:	78 81       	ld	r23, Y
    f8de:	c0 53       	subi	r28, 0x30	; 48
    f8e0:	d1 40       	sbci	r29, 0x01	; 1
    f8e2:	71 30       	cpi	r23, 0x01	; 1
    f8e4:	09 f0       	breq	.+2      	; 0xf8e8 <setup+0x44a>
    f8e6:	42 c0       	rjmp	.+132    	; 0xf96c <setup+0x4ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3687
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    f8e8:	68 ee       	ldi	r22, 0xE8	; 232
    f8ea:	7b e5       	ldi	r23, 0x5B	; 91
    f8ec:	ce 01       	movw	r24, r28
    f8ee:	88 57       	subi	r24, 0x78	; 120
    f8f0:	9f 4f       	sbci	r25, 0xFF	; 255
    f8f2:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3688
      strcat(str1, ":2");
    f8f6:	65 ef       	ldi	r22, 0xF5	; 245
    f8f8:	77 e0       	ldi	r23, 0x07	; 7
    f8fa:	ce 01       	movw	r24, r28
    f8fc:	88 57       	subi	r24, 0x78	; 120
    f8fe:	9f 4f       	sbci	r25, 0xFF	; 255
    f900:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3689
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f904:	c1 2c       	mov	r12, r1
    f906:	ee 24       	eor	r14, r14
    f908:	ea 94       	dec	r14
    f90a:	fe 2c       	mov	r15, r14
    f90c:	00 ee       	ldi	r16, 0xE0	; 224
    f90e:	17 e0       	ldi	r17, 0x07	; 7
    f910:	21 e0       	ldi	r18, 0x01	; 1
    f912:	4c e3       	ldi	r20, 0x3C	; 60
    f914:	50 e0       	ldi	r21, 0x00	; 0
    f916:	6e e1       	ldi	r22, 0x1E	; 30
    f918:	70 e0       	ldi	r23, 0x00	; 0
    f91a:	ce 01       	movw	r24, r28
    f91c:	88 57       	subi	r24, 0x78	; 120
    f91e:	9f 4f       	sbci	r25, 0xFF	; 255
    f920:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3690
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
    f924:	84 e5       	ldi	r24, 0x54	; 84
    f926:	9c e0       	ldi	r25, 0x0C	; 12
    f928:	0e 94 ce 38 	call	0x719c	; 0x719c <Temperature_LM75_Derived::readTemperatureC()>
    f92c:	84 01       	movw	r16, r8
    f92e:	22 e0       	ldi	r18, 0x02	; 2
    f930:	44 e0       	ldi	r20, 0x04	; 4
    f932:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3691
      sprintf(str2, "iT=%sC", s_current);
    f936:	9f 92       	push	r9
    f938:	8f 92       	push	r8
    f93a:	88 ef       	ldi	r24, 0xF8	; 248
    f93c:	97 e0       	ldi	r25, 0x07	; 7
    f93e:	9f 93       	push	r25
    f940:	8f 93       	push	r24
    f942:	bf 92       	push	r11
    f944:	af 92       	push	r10
    f946:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3692
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f94a:	00 ee       	ldi	r16, 0xE0	; 224
    f94c:	17 e0       	ldi	r17, 0x07	; 7
    f94e:	21 e0       	ldi	r18, 0x01	; 1
    f950:	4c e3       	ldi	r20, 0x3C	; 60
    f952:	50 e0       	ldi	r21, 0x00	; 0
    f954:	60 ea       	ldi	r22, 0xA0	; 160
    f956:	70 e0       	ldi	r23, 0x00	; 0
    f958:	c5 01       	movw	r24, r10
    f95a:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    f95e:	0f 90       	pop	r0
    f960:	0f 90       	pop	r0
    f962:	0f 90       	pop	r0
    f964:	0f 90       	pop	r0
    f966:	0f 90       	pop	r0
    f968:	0f 90       	pop	r0
    f96a:	7c cf       	rjmp	.-264    	; 0xf864 <setup+0x3c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3696
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
    f96c:	c0 5d       	subi	r28, 0xD0	; 208
    f96e:	de 4f       	sbci	r29, 0xFE	; 254
    f970:	88 81       	ld	r24, Y
    f972:	c0 53       	subi	r28, 0x30	; 48
    f974:	d1 40       	sbci	r29, 0x01	; 1
    f976:	82 30       	cpi	r24, 0x02	; 2
    f978:	09 f0       	breq	.+2      	; 0xf97c <setup+0x4de>
    f97a:	77 c1       	rjmp	.+750    	; 0xfc6a <setup+0x7cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3698
    {
      if (EEPROM.read(set_default_values) == 255)
    f97c:	8a e5       	ldi	r24, 0x5A	; 90
    f97e:	90 e0       	ldi	r25, 0x00	; 0
    f980:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <EEPROMClass::read(int) [clone .isra.6]>
    f984:	8f 3f       	cpi	r24, 0xFF	; 255
    f986:	09 f0       	breq	.+2      	; 0xf98a <setup+0x4ec>
    f988:	5d c1       	rjmp	.+698    	; 0xfc44 <setup+0x7a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3700
      {
        EEPROM.write(set_default_values, 0);
    f98a:	60 e0       	ldi	r22, 0x00	; 0
    f98c:	8a e5       	ldi	r24, 0x5A	; 90
    f98e:	90 e0       	ldi	r25, 0x00	; 0
    f990:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3701
        strcpy_P(str1, text_vychozi_nastaveni);
    f994:	62 e6       	ldi	r22, 0x62	; 98
    f996:	7b e5       	ldi	r23, 0x5B	; 91
    f998:	ce 01       	movw	r24, r28
    f99a:	88 57       	subi	r24, 0x78	; 120
    f99c:	9f 4f       	sbci	r25, 0xFF	; 255
    f99e:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3702
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    f9a2:	c1 2c       	mov	r12, r1
    f9a4:	ee 24       	eor	r14, r14
    f9a6:	ea 94       	dec	r14
    f9a8:	fe 2c       	mov	r15, r14
    f9aa:	00 e0       	ldi	r16, 0x00	; 0
    f9ac:	18 ef       	ldi	r17, 0xF8	; 248
    f9ae:	21 e0       	ldi	r18, 0x01	; 1
    f9b0:	46 e4       	ldi	r20, 0x46	; 70
    f9b2:	50 e0       	ldi	r21, 0x00	; 0
    f9b4:	6e e1       	ldi	r22, 0x1E	; 30
    f9b6:	70 e0       	ldi	r23, 0x00	; 0
    f9b8:	ce 01       	movw	r24, r28
    f9ba:	88 57       	subi	r24, 0x78	; 120
    f9bc:	9f 4f       	sbci	r25, 0xFF	; 255
    f9be:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3704

        set_default_show_temp(255);
    f9c2:	8f ef       	ldi	r24, 0xFF	; 255
    f9c4:	0e 94 8b 49 	call	0x9316	; 0x9316 <set_default_show_temp(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3707

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
    f9c8:	80 e0       	ldi	r24, 0x00	; 0
    f9ca:	0e 94 e7 95 	call	0x12bce	; 0x12bce <thermostat_ring_clear(unsigned char)>
    f9ce:	81 e0       	ldi	r24, 0x01	; 1
    f9d0:	0e 94 e7 95 	call	0x12bce	; 0x12bce <thermostat_ring_clear(unsigned char)>
    f9d4:	82 e0       	ldi	r24, 0x02	; 2
    f9d6:	0e 94 e7 95 	call	0x12bce	; 0x12bce <thermostat_ring_clear(unsigned char)>
    f9da:	83 e0       	ldi	r24, 0x03	; 3
    f9dc:	0e 94 e7 95 	call	0x12bce	; 0x12bce <thermostat_ring_clear(unsigned char)>
    f9e0:	84 e0       	ldi	r24, 0x04	; 4
    f9e2:	0e 94 e7 95 	call	0x12bce	; 0x12bce <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3709
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f9e6:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3711 (discriminator 2)
        {
          strcpy(tmp1, "");
    f9e8:	62 eb       	ldi	r22, 0xB2	; 178
    f9ea:	75 e0       	ldi	r23, 0x05	; 5
    f9ec:	ce 01       	movw	r24, r28
    f9ee:	82 52       	subi	r24, 0x22	; 34
    f9f0:	9f 4f       	sbci	r25, 0xFF	; 255
    f9f2:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3712 (discriminator 2)
          remote_tds_clear(idx);
    f9f6:	81 2f       	mov	r24, r17
    f9f8:	0e 94 54 46 	call	0x8ca8	; 0x8ca8 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3709 (discriminator 2)
        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f9fc:	1f 5f       	subi	r17, 0xFF	; 255
    f9fe:	1a 30       	cpi	r17, 0x0A	; 10
    fa00:	99 f7       	brne	.-26     	; 0xf9e8 <setup+0x54a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3715
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    fa02:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3717
        {
          strcpy_P(str2, text_prog);
    fa04:	6f e8       	ldi	r22, 0x8F	; 143
    fa06:	79 e5       	ldi	r23, 0x59	; 89
    fa08:	c5 01       	movw	r24, r10
    fa0a:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3718
          thermostat_program_set_name(idx, str2);
    fa0e:	b5 01       	movw	r22, r10
    fa10:	81 2f       	mov	r24, r17
    fa12:	0e 94 95 93 	call	0x1272a	; 0x1272a <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3719
          thermostat_program_set_active(idx, PROG_FREE);
    fa16:	6f ef       	ldi	r22, 0xFF	; 255
    fa18:	81 2f       	mov	r24, r17
    fa1a:	0e 94 c5 93 	call	0x1278a	; 0x1278a <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3720
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    fa1e:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3722 (discriminator 2)
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
    fa20:	c1 2c       	mov	r12, r1
    fa22:	e1 2c       	mov	r14, r1
    fa24:	00 e0       	ldi	r16, 0x00	; 0
    fa26:	20 e0       	ldi	r18, 0x00	; 0
    fa28:	40 e0       	ldi	r20, 0x00	; 0
    fa2a:	6f 2d       	mov	r22, r15
    fa2c:	81 2f       	mov	r24, r17
    fa2e:	0e 94 20 94 	call	0x12840	; 0x12840 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3723 (discriminator 2)
            thermostat_program_set_threshold(idx, interval_id, 220);
    fa32:	4c ed       	ldi	r20, 0xDC	; 220
    fa34:	50 e0       	ldi	r21, 0x00	; 0
    fa36:	6f 2d       	mov	r22, r15
    fa38:	81 2f       	mov	r24, r17
    fa3a:	0e 94 7e 94 	call	0x128fc	; 0x128fc <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3724 (discriminator 2)
            thermostat_program_set_week(idx, interval_id, 0);
    fa3e:	40 e0       	ldi	r20, 0x00	; 0
    fa40:	6f 2d       	mov	r22, r15
    fa42:	81 2f       	mov	r24, r17
    fa44:	0e 94 a7 94 	call	0x1294e	; 0x1294e <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3720 (discriminator 2)
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy_P(str2, text_prog);
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, PROG_FREE);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    fa48:	f3 94       	inc	r15
    fa4a:	9b e0       	ldi	r25, 0x0B	; 11
    fa4c:	f9 12       	cpse	r15, r25
    fa4e:	e8 cf       	rjmp	.-48     	; 0xfa20 <setup+0x582>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3715 (discriminator 2)
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    fa50:	1f 5f       	subi	r17, 0xFF	; 255
    fa52:	18 30       	cpi	r17, 0x08	; 8
    fa54:	b9 f6       	brne	.-82     	; 0xfa04 <setup+0x566>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3735
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
    fa56:	5a e0       	ldi	r21, 0x0A	; 10
    fa58:	f5 2e       	mov	r15, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3736
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    fa5a:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3730
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
    fa5c:	be 01       	movw	r22, r28
    fa5e:	68 53       	subi	r22, 0x38	; 56
    fa60:	7f 4f       	sbci	r23, 0xFF	; 255
    fa62:	80 2f       	mov	r24, r16
    fa64:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3731
          strcpy(tds.name, "FREE");
    fa68:	6f ef       	ldi	r22, 0xFF	; 255
    fa6a:	77 e0       	ldi	r23, 0x07	; 7
    fa6c:	cf 5c       	subi	r28, 0xCF	; 207
    fa6e:	de 4f       	sbci	r29, 0xFE	; 254
    fa70:	88 81       	ld	r24, Y
    fa72:	99 81       	ldd	r25, Y+1	; 0x01
    fa74:	c1 53       	subi	r28, 0x31	; 49
    fa76:	d1 40       	sbci	r29, 0x01	; 1
    fa78:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3732
          tds.used = 0;
    fa7c:	c8 53       	subi	r28, 0x38	; 56
    fa7e:	df 4f       	sbci	r29, 0xFF	; 255
    fa80:	18 82       	st	Y, r1
    fa82:	c8 5c       	subi	r28, 0xC8	; 200
    fa84:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3733
          tds.offset = 0;
    fa86:	ce 52       	subi	r28, 0x2E	; 46
    fa88:	df 4f       	sbci	r29, 0xFF	; 255
    fa8a:	19 82       	std	Y+1, r1	; 0x01
    fa8c:	18 82       	st	Y, r1
    fa8e:	c2 5d       	subi	r28, 0xD2	; 210
    fa90:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3734
          tds.assigned_ds2482 = 0;
    fa92:	cf 52       	subi	r28, 0x2F	; 47
    fa94:	df 4f       	sbci	r29, 0xFF	; 255
    fa96:	18 82       	st	Y, r1
    fa98:	c1 5d       	subi	r28, 0xD1	; 209
    fa9a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3735
          tds.period = 10;
    fa9c:	c4 52       	subi	r28, 0x24	; 36
    fa9e:	df 4f       	sbci	r29, 0xFF	; 255
    faa0:	f8 82       	st	Y, r15
    faa2:	cc 5d       	subi	r28, 0xDC	; 220
    faa4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3736
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    faa6:	c7 53       	subi	r28, 0x37	; 55
    faa8:	df 4f       	sbci	r29, 0xFF	; 255
    faaa:	18 83       	st	Y, r17
    faac:	c9 5c       	subi	r28, 0xC9	; 201
    faae:	d0 40       	sbci	r29, 0x00	; 0
    fab0:	c6 53       	subi	r28, 0x36	; 54
    fab2:	df 4f       	sbci	r29, 0xFF	; 255
    fab4:	18 83       	st	Y, r17
    fab6:	ca 5c       	subi	r28, 0xCA	; 202
    fab8:	d0 40       	sbci	r29, 0x00	; 0
    faba:	c5 53       	subi	r28, 0x35	; 53
    fabc:	df 4f       	sbci	r29, 0xFF	; 255
    fabe:	18 83       	st	Y, r17
    fac0:	cb 5c       	subi	r28, 0xCB	; 203
    fac2:	d0 40       	sbci	r29, 0x00	; 0
    fac4:	c4 53       	subi	r28, 0x34	; 52
    fac6:	df 4f       	sbci	r29, 0xFF	; 255
    fac8:	18 83       	st	Y, r17
    faca:	cc 5c       	subi	r28, 0xCC	; 204
    facc:	d0 40       	sbci	r29, 0x00	; 0
    face:	c3 53       	subi	r28, 0x33	; 51
    fad0:	df 4f       	sbci	r29, 0xFF	; 255
    fad2:	18 83       	st	Y, r17
    fad4:	cd 5c       	subi	r28, 0xCD	; 205
    fad6:	d0 40       	sbci	r29, 0x00	; 0
    fad8:	c2 53       	subi	r28, 0x32	; 50
    fada:	df 4f       	sbci	r29, 0xFF	; 255
    fadc:	18 83       	st	Y, r17
    fade:	ce 5c       	subi	r28, 0xCE	; 206
    fae0:	d0 40       	sbci	r29, 0x00	; 0
    fae2:	c1 53       	subi	r28, 0x31	; 49
    fae4:	df 4f       	sbci	r29, 0xFF	; 255
    fae6:	18 83       	st	Y, r17
    fae8:	cf 5c       	subi	r28, 0xCF	; 207
    faea:	d0 40       	sbci	r29, 0x00	; 0
    faec:	c0 53       	subi	r28, 0x30	; 48
    faee:	df 4f       	sbci	r29, 0xFF	; 255
    faf0:	18 83       	st	Y, r17
    faf2:	c0 5d       	subi	r28, 0xD0	; 208
    faf4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3737
          set_tds18s20(idx, &tds);
    faf6:	be 01       	movw	r22, r28
    faf8:	68 53       	subi	r22, 0x38	; 56
    fafa:	7f 4f       	sbci	r23, 0xFF	; 255
    fafc:	80 2f       	mov	r24, r16
    fafe:	0e 94 50 8c 	call	0x118a0	; 0x118a0 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3728
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    fb02:	0f 5f       	subi	r16, 0xFF	; 255
    fb04:	06 30       	cpi	r16, 0x06	; 6
    fb06:	09 f0       	breq	.+2      	; 0xfb0a <setup+0x66c>
    fb08:	a9 cf       	rjmp	.-174    	; 0xfa5c <setup+0x5be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3740
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
    fb0a:	c1 2c       	mov	r12, r1
    fb0c:	ae e0       	ldi	r26, 0x0E	; 14
    fb0e:	ea 2e       	mov	r14, r26
    fb10:	01 e1       	ldi	r16, 0x11	; 17
    fb12:	2e e0       	ldi	r18, 0x0E	; 14
    fb14:	4c e0       	ldi	r20, 0x0C	; 12
    fb16:	64 ee       	ldi	r22, 0xE4	; 228
    fb18:	77 e0       	ldi	r23, 0x07	; 7
    fb1a:	ce 01       	movw	r24, r28
    fb1c:	8e 50       	subi	r24, 0x0E	; 14
    fb1e:	9f 4f       	sbci	r25, 0xFF	; 255
    fb20:	0e 94 87 cc 	call	0x1990e	; 0x1990e <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    fb24:	ce 01       	movw	r24, r28
    fb26:	8e 50       	subi	r24, 0x0E	; 14
    fb28:	9f 4f       	sbci	r25, 0xFF	; 255
    fb2a:	0e 94 ae cc 	call	0x1995c	; 0x1995c <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3741
        time_set_offset(1);
    fb2e:	81 e0       	ldi	r24, 0x01	; 1
    fb30:	0e 94 15 51 	call	0xa22a	; 0xa22a <time_set_offset(signed char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3743
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
    fb34:	82 e0       	ldi	r24, 0x02	; 2
    fb36:	80 93 fc 10 	sts	0x10FC, r24	; 0x8010fc <device>
    fb3a:	91 e0       	ldi	r25, 0x01	; 1
    fb3c:	90 93 fd 10 	sts	0x10FD, r25	; 0x8010fd <device+0x1>
    fb40:	80 93 fe 10 	sts	0x10FE, r24	; 0x8010fe <device+0x2>
    fb44:	20 91 b8 0a 	lds	r18, 0x0AB8	; 0x800ab8 <dvanact>
    fb48:	30 91 b9 0a 	lds	r19, 0x0AB9	; 0x800ab9 <dvanact+0x1>
    fb4c:	36 95       	lsr	r19
    fb4e:	27 95       	ror	r18
    fb50:	20 93 ff 10 	sts	0x10FF, r18	; 0x8010ff <device+0x3>
    fb54:	20 91 b4 0a 	lds	r18, 0x0AB4	; 0x800ab4 <light_curr>
    fb58:	30 91 b5 0a 	lds	r19, 0x0AB5	; 0x800ab5 <light_curr+0x1>
    fb5c:	36 95       	lsr	r19
    fb5e:	27 95       	ror	r18
    fb60:	20 93 00 11 	sts	0x1100, r18	; 0x801100 <device+0x4>
    fb64:	20 91 b6 0a 	lds	r18, 0x0AB6	; 0x800ab6 <proud>
    fb68:	30 91 b7 0a 	lds	r19, 0x0AB7	; 0x800ab7 <proud+0x1>
    fb6c:	36 95       	lsr	r19
    fb6e:	27 95       	ror	r18
    fb70:	20 93 01 11 	sts	0x1101, r18	; 0x801101 <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3744
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 111;
    fb74:	30 ec       	ldi	r19, 0xC0	; 192
    fb76:	30 93 02 11 	sts	0x1102, r19	; 0x801102 <device+0x6>
    fb7a:	28 ea       	ldi	r18, 0xA8	; 168
    fb7c:	20 93 03 11 	sts	0x1103, r18	; 0x801103 <device+0x7>
    fb80:	80 93 04 11 	sts	0x1104, r24	; 0x801104 <device+0x8>
    fb84:	4f e6       	ldi	r20, 0x6F	; 111
    fb86:	40 93 05 11 	sts	0x1105, r20	; 0x801105 <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3745
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
    fb8a:	10 93 06 11 	sts	0x1106, r17	; 0x801106 <device+0xa>
    fb8e:	10 93 07 11 	sts	0x1107, r17	; 0x801107 <device+0xb>
    fb92:	10 93 08 11 	sts	0x1108, r17	; 0x801108 <device+0xc>
    fb96:	10 92 09 11 	sts	0x1109, r1	; 0x801109 <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3747

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
    fb9a:	30 93 0e 11 	sts	0x110E, r19	; 0x80110e <device+0x12>
    fb9e:	20 93 0f 11 	sts	0x110F, r18	; 0x80110f <device+0x13>
    fba2:	80 93 10 11 	sts	0x1110, r24	; 0x801110 <device+0x14>
    fba6:	90 93 11 11 	sts	0x1111, r25	; 0x801111 <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3748
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
    fbaa:	30 93 0a 11 	sts	0x110A, r19	; 0x80110a <device+0xe>
    fbae:	20 93 0b 11 	sts	0x110B, r18	; 0x80110b <device+0xf>
    fbb2:	80 93 0c 11 	sts	0x110C, r24	; 0x80110c <device+0x10>
    fbb6:	90 93 0d 11 	sts	0x110D, r25	; 0x80110d <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3749
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
    fbba:	30 93 1c 11 	sts	0x111C, r19	; 0x80111c <device+0x20>
    fbbe:	20 93 1d 11 	sts	0x111D, r18	; 0x80111d <device+0x21>
    fbc2:	80 93 1e 11 	sts	0x111E, r24	; 0x80111e <device+0x22>
    fbc6:	90 93 1f 11 	sts	0x111F, r25	; 0x80111f <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3750
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
    fbca:	30 93 4a 11 	sts	0x114A, r19	; 0x80114a <device+0x4e>
    fbce:	20 93 4b 11 	sts	0x114B, r18	; 0x80114b <device+0x4f>
    fbd2:	80 93 4c 11 	sts	0x114C, r24	; 0x80114c <device+0x50>
    fbd6:	90 93 4d 11 	sts	0x114D, r25	; 0x80114d <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3751
        device.mqtt_port = 1883;
    fbda:	8b e5       	ldi	r24, 0x5B	; 91
    fbdc:	97 e0       	ldi	r25, 0x07	; 7
    fbde:	90 93 21 11 	sts	0x1121, r25	; 0x801121 <device+0x25>
    fbe2:	80 93 20 11 	sts	0x1120, r24	; 0x801120 <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3752
        strcpy(device.mqtt_user, "saric");
    fbe6:	64 e0       	ldi	r22, 0x04	; 4
    fbe8:	78 e0       	ldi	r23, 0x08	; 8
    fbea:	82 e2       	ldi	r24, 0x22	; 34
    fbec:	91 e1       	ldi	r25, 0x11	; 17
    fbee:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3753
        strcpy(device.mqtt_key, "no");
    fbf2:	6a e0       	ldi	r22, 0x0A	; 10
    fbf4:	78 e0       	ldi	r23, 0x08	; 8
    fbf6:	86 e3       	ldi	r24, 0x36	; 54
    fbf8:	91 e1       	ldi	r25, 0x11	; 17
    fbfa:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3754
        save_setup_network();
    fbfe:	0e 94 6e 85 	call	0x10adc	; 0x10adc <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3755
        strcpy(str1, "TERM D2");
    fc02:	6d e0       	ldi	r22, 0x0D	; 13
    fc04:	78 e0       	ldi	r23, 0x08	; 8
    fc06:	ce 01       	movw	r24, r28
    fc08:	88 57       	subi	r24, 0x78	; 120
    fc0a:	9f 4f       	sbci	r25, 0xFF	; 255
    fc0c:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3756
        device_set_name(str1);
    fc10:	ce 01       	movw	r24, r28
    fc12:	88 57       	subi	r24, 0x78	; 120
    fc14:	9f 4f       	sbci	r25, 0xFF	; 255
    fc16:	0e 94 26 86 	call	0x10c4c	; 0x10c4c <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3758
        char hostname[10];
        device_get_name(hostname);
    fc1a:	ce 01       	movw	r24, r28
    fc1c:	8e 50       	subi	r24, 0x0E	; 14
    fc1e:	9f 4f       	sbci	r25, 0xFF	; 255
    fc20:	0e 94 0d 86 	call	0x10c1a	; 0x10c1a <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3759
        default_ring = NO_DEFAULT_RING;
    fc24:	10 93 9e 0a 	sts	0x0A9E, r17	; 0x800a9e <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3760
        set_default_ring(default_ring);
    fc28:	8f ef       	ldi	r24, 0xFF	; 255
    fc2a:	0e 94 82 49 	call	0x9304	; 0x9304 <set_default_ring(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3761
        EEPROM.write(my_brightness_values, 50);
    fc2e:	62 e3       	ldi	r22, 0x32	; 50
    fc30:	8e e5       	ldi	r24, 0x5E	; 94
    fc32:	90 e0       	ldi	r25, 0x00	; 0
    fc34:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3762
        EEPROM.write(my_brightness_mode, 0);
    fc38:	60 e0       	ldi	r22, 0x00	; 0
    fc3a:	8f e5       	ldi	r24, 0x5F	; 95
    fc3c:	90 e0       	ldi	r25, 0x00	; 0
    fc3e:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
    fc42:	10 ce       	rjmp	.-992    	; 0xf864 <setup+0x3c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3766
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
    fc44:	66 e5       	ldi	r22, 0x56	; 86
    fc46:	7b e5       	ldi	r23, 0x5B	; 91
    fc48:	ce 01       	movw	r24, r28
    fc4a:	88 57       	subi	r24, 0x78	; 120
    fc4c:	9f 4f       	sbci	r25, 0xFF	; 255
    fc4e:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3767
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fc52:	c1 2c       	mov	r12, r1
    fc54:	ee 24       	eor	r14, r14
    fc56:	ea 94       	dec	r14
    fc58:	fe 2c       	mov	r15, r14
    fc5a:	00 ee       	ldi	r16, 0xE0	; 224
    fc5c:	17 e0       	ldi	r17, 0x07	; 7
    fc5e:	21 e0       	ldi	r18, 0x01	; 1
    fc60:	46 e4       	ldi	r20, 0x46	; 70
    fc62:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3800
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fc64:	6e e1       	ldi	r22, 0x1E	; 30
    fc66:	70 e0       	ldi	r23, 0x00	; 0
    fc68:	47 c0       	rjmp	.+142    	; 0xfcf8 <setup+0x85a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3772
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
    fc6a:	c0 5d       	subi	r28, 0xD0	; 208
    fc6c:	de 4f       	sbci	r29, 0xFE	; 254
    fc6e:	28 81       	ld	r18, Y
    fc70:	c0 53       	subi	r28, 0x30	; 48
    fc72:	d1 40       	sbci	r29, 0x01	; 1
    fc74:	23 30       	cpi	r18, 0x03	; 3
    fc76:	09 f0       	breq	.+2      	; 0xfc7a <setup+0x7dc>
    fc78:	5b c0       	rjmp	.+182    	; 0xfd30 <setup+0x892>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3774
    {
      SRAM.begin();
    fc7a:	87 ed       	ldi	r24, 0xD7	; 215
    fc7c:	9a e0       	ldi	r25, 0x0A	; 10
    fc7e:	0e 94 99 ad 	call	0x15b32	; 0x15b32 <SRAM_23LC::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3775
      SRAM.writeByte(0, 0xAB);
    fc82:	2b ea       	ldi	r18, 0xAB	; 171
    fc84:	40 e0       	ldi	r20, 0x00	; 0
    fc86:	50 e0       	ldi	r21, 0x00	; 0
    fc88:	ba 01       	movw	r22, r20
    fc8a:	87 ed       	ldi	r24, 0xD7	; 215
    fc8c:	9a e0       	ldi	r25, 0x0A	; 10
    fc8e:	0e 94 de ad 	call	0x15bbc	; 0x15bbc <SRAM_23LC::writeByte(unsigned long, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3776
      if (SRAM.readByte(0) == 0xAB)
    fc92:	40 e0       	ldi	r20, 0x00	; 0
    fc94:	50 e0       	ldi	r21, 0x00	; 0
    fc96:	ba 01       	movw	r22, r20
    fc98:	87 ed       	ldi	r24, 0xD7	; 215
    fc9a:	9a e0       	ldi	r25, 0x0A	; 10
    fc9c:	0e 94 b9 ad 	call	0x15b72	; 0x15b72 <SRAM_23LC::readByte(unsigned long)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3778
      {
        strcpy_P(str1, text_test_ram);
    fca0:	69 e4       	ldi	r22, 0x49	; 73
    fca2:	7b e5       	ldi	r23, 0x5B	; 91
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3776
    /// test SRAM
    if (init == 3)
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
    fca4:	8b 3a       	cpi	r24, 0xAB	; 171
    fca6:	71 f5       	brne	.+92     	; 0xfd04 <setup+0x866>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3778
      {
        strcpy_P(str1, text_test_ram);
    fca8:	ce 01       	movw	r24, r28
    fcaa:	88 57       	subi	r24, 0x78	; 120
    fcac:	9f 4f       	sbci	r25, 0xFF	; 255
    fcae:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3779
        strcat(str1, " init ...");
    fcb2:	65 e1       	ldi	r22, 0x15	; 21
    fcb4:	78 e0       	ldi	r23, 0x08	; 8
    fcb6:	ce 01       	movw	r24, r28
    fcb8:	88 57       	subi	r24, 0x78	; 120
    fcba:	9f 4f       	sbci	r25, 0xFF	; 255
    fcbc:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3780
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fcc0:	c1 2c       	mov	r12, r1
    fcc2:	ee 24       	eor	r14, r14
    fcc4:	ea 94       	dec	r14
    fcc6:	fe 2c       	mov	r15, r14
    fcc8:	00 ee       	ldi	r16, 0xE0	; 224
    fcca:	17 e0       	ldi	r17, 0x07	; 7
    fccc:	21 e0       	ldi	r18, 0x01	; 1
    fcce:	40 e5       	ldi	r20, 0x50	; 80
    fcd0:	50 e0       	ldi	r21, 0x00	; 0
    fcd2:	6e e1       	ldi	r22, 0x1E	; 30
    fcd4:	70 e0       	ldi	r23, 0x00	; 0
    fcd6:	ce 01       	movw	r24, r28
    fcd8:	88 57       	subi	r24, 0x78	; 120
    fcda:	9f 4f       	sbci	r25, 0xFF	; 255
    fcdc:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3793
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
    fce0:	60 e4       	ldi	r22, 0x40	; 64
    fce2:	79 e5       	ldi	r23, 0x59	; 89
    fce4:	ce 01       	movw	r24, r28
    fce6:	88 57       	subi	r24, 0x78	; 120
    fce8:	9f 4f       	sbci	r25, 0xFF	; 255
    fcea:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3794
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fcee:	21 e0       	ldi	r18, 0x01	; 1
    fcf0:	40 e5       	ldi	r20, 0x50	; 80
    fcf2:	50 e0       	ldi	r21, 0x00	; 0
    fcf4:	62 ed       	ldi	r22, 0xD2	; 210
    fcf6:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3800
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fcf8:	ce 01       	movw	r24, r28
    fcfa:	88 57       	subi	r24, 0x78	; 120
    fcfc:	9f 4f       	sbci	r25, 0xFF	; 255
    fcfe:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    fd02:	b0 cd       	rjmp	.-1184   	; 0xf864 <setup+0x3c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3798
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
    fd04:	ce 01       	movw	r24, r28
    fd06:	88 57       	subi	r24, 0x78	; 120
    fd08:	9f 4f       	sbci	r25, 0xFF	; 255
    fd0a:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3799
        strcat_P(str1, text_err);
    fd0e:	63 e4       	ldi	r22, 0x43	; 67
    fd10:	79 e5       	ldi	r23, 0x59	; 89
    fd12:	ce 01       	movw	r24, r28
    fd14:	88 57       	subi	r24, 0x78	; 120
    fd16:	9f 4f       	sbci	r25, 0xFF	; 255
    fd18:	0e 94 e8 e1 	call	0x1c3d0	; 0x1c3d0 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3800
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fd1c:	c1 2c       	mov	r12, r1
    fd1e:	ee 24       	eor	r14, r14
    fd20:	ea 94       	dec	r14
    fd22:	fe 2c       	mov	r15, r14
    fd24:	00 e0       	ldi	r16, 0x00	; 0
    fd26:	18 ef       	ldi	r17, 0xF8	; 248
    fd28:	21 e0       	ldi	r18, 0x01	; 1
    fd2a:	40 e5       	ldi	r20, 0x50	; 80
    fd2c:	50 e0       	ldi	r21, 0x00	; 0
    fd2e:	9a cf       	rjmp	.-204    	; 0xfc64 <setup+0x7c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3805
      }
    }

    //// init EEPROMKY
    if (init == 4)
    fd30:	c0 5d       	subi	r28, 0xD0	; 208
    fd32:	de 4f       	sbci	r29, 0xFE	; 254
    fd34:	68 81       	ld	r22, Y
    fd36:	c0 53       	subi	r28, 0x30	; 48
    fd38:	d1 40       	sbci	r29, 0x01	; 1
    fd3a:	64 30       	cpi	r22, 0x04	; 4
    fd3c:	09 f0       	breq	.+2      	; 0xfd40 <setup+0x8a2>
    fd3e:	bd c2       	rjmp	.+1402   	; 0x102ba <__EEPROM_REGION_LENGTH__+0x2ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3807
    {
      SROM.begin();
    fd40:	88 ec       	ldi	r24, 0xC8	; 200
    fd42:	9a e0       	ldi	r25, 0x0A	; 10
    fd44:	0e 94 dd ae 	call	0x15dba	; 0x15dba <EEPROM_CAT25::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3808
      SROM.writeByte(0, 0xBA);
    fd48:	2a eb       	ldi	r18, 0xBA	; 186
    fd4a:	40 e0       	ldi	r20, 0x00	; 0
    fd4c:	50 e0       	ldi	r21, 0x00	; 0
    fd4e:	ba 01       	movw	r22, r20
    fd50:	88 ec       	ldi	r24, 0xC8	; 200
    fd52:	9a e0       	ldi	r25, 0x0A	; 10
    fd54:	0e 94 ca af 	call	0x15f94	; 0x15f94 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3809
      if (SROM.readByte(0) == 0xBA)
    fd58:	40 e0       	ldi	r20, 0x00	; 0
    fd5a:	50 e0       	ldi	r21, 0x00	; 0
    fd5c:	ba 01       	movw	r22, r20
    fd5e:	88 ec       	ldi	r24, 0xC8	; 200
    fd60:	9a e0       	ldi	r25, 0x0A	; 10
    fd62:	0e 94 96 af 	call	0x15f2c	; 0x15f2c <EEPROM_CAT25::readByte(unsigned long)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3812

      {
        strcpy_P(str1, text_test_eeprom);
    fd66:	69 e3       	ldi	r22, 0x39	; 57
    fd68:	7b e5       	ldi	r23, 0x5B	; 91
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3809
    //// init EEPROMKY
    if (init == 4)
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
    fd6a:	8a 3b       	cpi	r24, 0xBA	; 186
    fd6c:	e9 f4       	brne	.+58     	; 0xfda8 <setup+0x90a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3812

      {
        strcpy_P(str1, text_test_eeprom);
    fd6e:	ce 01       	movw	r24, r28
    fd70:	88 57       	subi	r24, 0x78	; 120
    fd72:	9f 4f       	sbci	r25, 0xFF	; 255
    fd74:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3813
        strcat_P(str1, text_ok);
    fd78:	60 e4       	ldi	r22, 0x40	; 64
    fd7a:	79 e5       	ldi	r23, 0x59	; 89
    fd7c:	ce 01       	movw	r24, r28
    fd7e:	88 57       	subi	r24, 0x78	; 120
    fd80:	9f 4f       	sbci	r25, 0xFF	; 255
    fd82:	0e 94 e8 e1 	call	0x1c3d0	; 0x1c3d0 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3814
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fd86:	c1 2c       	mov	r12, r1
    fd88:	ee 24       	eor	r14, r14
    fd8a:	ea 94       	dec	r14
    fd8c:	fe 2c       	mov	r15, r14
    fd8e:	00 ee       	ldi	r16, 0xE0	; 224
    fd90:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3820
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fd92:	21 e0       	ldi	r18, 0x01	; 1
    fd94:	4a e5       	ldi	r20, 0x5A	; 90
    fd96:	50 e0       	ldi	r21, 0x00	; 0
    fd98:	6e e1       	ldi	r22, 0x1E	; 30
    fd9a:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3952
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fd9c:	ce 01       	movw	r24, r28
    fd9e:	88 57       	subi	r24, 0x78	; 120
    fda0:	9f 4f       	sbci	r25, 0xFF	; 255
    fda2:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    fda6:	4d c0       	rjmp	.+154    	; 0xfe42 <__DATA_REGION_LENGTH__+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3818
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
    fda8:	ce 01       	movw	r24, r28
    fdaa:	88 57       	subi	r24, 0x78	; 120
    fdac:	9f 4f       	sbci	r25, 0xFF	; 255
    fdae:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3819
        strcat_P(str1, text_err);
    fdb2:	63 e4       	ldi	r22, 0x43	; 67
    fdb4:	79 e5       	ldi	r23, 0x59	; 89
    fdb6:	ce 01       	movw	r24, r28
    fdb8:	88 57       	subi	r24, 0x78	; 120
    fdba:	9f 4f       	sbci	r25, 0xFF	; 255
    fdbc:	0e 94 e8 e1 	call	0x1c3d0	; 0x1c3d0 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3820
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fdc0:	c1 2c       	mov	r12, r1
    fdc2:	ee 24       	eor	r14, r14
    fdc4:	ea 94       	dec	r14
    fdc6:	fe 2c       	mov	r15, r14
    fdc8:	00 e0       	ldi	r16, 0x00	; 0
    fdca:	18 ef       	ldi	r17, 0xF8	; 248
    fdcc:	e2 cf       	rjmp	.-60     	; 0xfd92 <setup+0x8f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3827
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
    fdce:	64 e1       	ldi	r22, 0x14	; 20
    fdd0:	7c e5       	ldi	r23, 0x5C	; 92
    fdd2:	ce 01       	movw	r24, r28
    fdd4:	88 57       	subi	r24, 0x78	; 120
    fdd6:	9f 4f       	sbci	r25, 0xFF	; 255
    fdd8:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3828
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fddc:	c1 2c       	mov	r12, r1
    fdde:	ee 24       	eor	r14, r14
    fde0:	ea 94       	dec	r14
    fde2:	fe 2c       	mov	r15, r14
    fde4:	00 ee       	ldi	r16, 0xE0	; 224
    fde6:	17 e0       	ldi	r17, 0x07	; 7
    fde8:	21 e0       	ldi	r18, 0x01	; 1
    fdea:	44 e6       	ldi	r20, 0x64	; 100
    fdec:	50 e0       	ldi	r21, 0x00	; 0
    fdee:	6e e1       	ldi	r22, 0x1E	; 30
    fdf0:	70 e0       	ldi	r23, 0x00	; 0
    fdf2:	ce 01       	movw	r24, r28
    fdf4:	88 57       	subi	r24, 0x78	; 120
    fdf6:	9f 4f       	sbci	r25, 0xFF	; 255
    fdf8:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3830
      /// nactu nastaveni site
      load_setup_network();
    fdfc:	0e 94 c7 84 	call	0x1098e	; 0x1098e <load_setup_network()>
    fe00:	42 ea       	ldi	r20, 0xA2	; 162
    fe02:	51 e1       	ldi	r21, 0x11	; 17
    fe04:	26 e0       	ldi	r18, 0x06	; 6
    fe06:	90 e0       	ldi	r25, 0x00	; 0
    fe08:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3834 (discriminator 2)
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    fe0a:	fc 01       	movw	r30, r24
    fe0c:	ee 0f       	add	r30, r30
    fe0e:	ff 1f       	adc	r31, r31
    fe10:	e4 0f       	add	r30, r20
    fe12:	f5 1f       	adc	r31, r21
    fe14:	60 e2       	ldi	r22, 0x20	; 32
    fe16:	7e e4       	ldi	r23, 0x4E	; 78
    fe18:	70 87       	std	Z+8, r23	; 0x08
    fe1a:	67 83       	std	Z+7, r22	; 0x07
    fe1c:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3833 (discriminator 2)
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    fe1e:	8a 30       	cpi	r24, 0x0A	; 10
    fe20:	91 05       	cpc	r25, r1
    fe22:	99 f7       	brne	.-26     	; 0xfe0a <__DATA_REGION_LENGTH__+0xa>
    fe24:	21 50       	subi	r18, 0x01	; 1
    fe26:	42 5e       	subi	r20, 0xE2	; 226
    fe28:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3832 (discriminator 2)
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    fe2a:	21 11       	cpse	r18, r1
    fe2c:	ec cf       	rjmp	.-40     	; 0xfe06 <__DATA_REGION_LENGTH__+0x6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3837
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    fe2e:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <last_output_update>
    fe32:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <last_output_update+0x1>
    fe36:	10 92 c1 0a 	sts	0x0AC1, r1	; 0x800ac1 <last_output_update+0x2>
    fe3a:	10 92 c2 0a 	sts	0x0AC2, r1	; 0x800ac2 <last_output_update+0x3>
    fe3e:	10 92 c3 0a 	sts	0x0AC3, r1	; 0x800ac3 <last_output_update+0x4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3629 (discriminator 2)
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
    fe42:	c0 5d       	subi	r28, 0xD0	; 208
    fe44:	de 4f       	sbci	r29, 0xFE	; 254
    fe46:	28 81       	ld	r18, Y
    fe48:	c0 53       	subi	r28, 0x30	; 48
    fe4a:	d1 40       	sbci	r29, 0x01	; 1
    fe4c:	2f 5f       	subi	r18, 0xFF	; 255
    fe4e:	c0 5d       	subi	r28, 0xD0	; 208
    fe50:	de 4f       	sbci	r29, 0xFE	; 254
    fe52:	28 83       	st	Y, r18
    fe54:	c0 53       	subi	r28, 0x30	; 48
    fe56:	d1 40       	sbci	r29, 0x01	; 1
    fe58:	6f e0       	ldi	r22, 0x0F	; 15
    fe5a:	66 0e       	add	r6, r22
    fe5c:	71 1c       	adc	r7, r1
    fe5e:	20 31       	cpi	r18, 0x10	; 16
    fe60:	09 f0       	breq	.+2      	; 0xfe64 <__DATA_REGION_LENGTH__+0x64>
    fe62:	b8 cb       	rjmp	.-2192   	; 0xf5d4 <setup+0x136>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4030
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
    fe64:	64 ef       	ldi	r22, 0xF4	; 244
    fe66:	71 e0       	ldi	r23, 0x01	; 1
    fe68:	80 e0       	ldi	r24, 0x00	; 0
    fe6a:	90 e0       	ldi	r25, 0x00	; 0
    fe6c:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4031
  MenuPrepareStyle();
    fe70:	0e 94 99 39 	call	0x7332	; 0x7332 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4032
  draw_menu(true);
    fe74:	81 e0       	ldi	r24, 0x01	; 1
    fe76:	0e 94 b3 57 	call	0xaf66	; 0xaf66 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4033
  a2d_run_now = 1;
    fe7a:	81 e0       	ldi	r24, 0x01	; 1
    fe7c:	80 93 b3 0a 	sts	0x0AB3, r24	; 0x800ab3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4035

}
    fe80:	ce 5c       	subi	r28, 0xCE	; 206
    fe82:	de 4f       	sbci	r29, 0xFE	; 254
    fe84:	0f b6       	in	r0, 0x3f	; 63
    fe86:	f8 94       	cli
    fe88:	de bf       	out	0x3e, r29	; 62
    fe8a:	0f be       	out	0x3f, r0	; 63
    fe8c:	cd bf       	out	0x3d, r28	; 61
    fe8e:	df 91       	pop	r29
    fe90:	cf 91       	pop	r28
    fe92:	1f 91       	pop	r17
    fe94:	0f 91       	pop	r16
    fe96:	ff 90       	pop	r15
    fe98:	ef 90       	pop	r14
    fe9a:	df 90       	pop	r13
    fe9c:	cf 90       	pop	r12
    fe9e:	bf 90       	pop	r11
    fea0:	af 90       	pop	r10
    fea2:	9f 90       	pop	r9
    fea4:	8f 90       	pop	r8
    fea6:	7f 90       	pop	r7
    fea8:	6f 90       	pop	r6
    feaa:	5f 90       	pop	r5
    feac:	4f 90       	pop	r4
    feae:	3f 90       	pop	r3
    feb0:	2f 90       	pop	r2
    feb2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3843
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
    feb4:	66 e2       	ldi	r22, 0x26	; 38
    feb6:	7c e5       	ldi	r23, 0x5C	; 92
    feb8:	ce 01       	movw	r24, r28
    feba:	88 57       	subi	r24, 0x78	; 120
    febc:	9f 4f       	sbci	r25, 0xFF	; 255
    febe:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3844
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fec2:	c1 2c       	mov	r12, r1
    fec4:	ee 24       	eor	r14, r14
    fec6:	ea 94       	dec	r14
    fec8:	fe 2c       	mov	r15, r14
    feca:	00 ee       	ldi	r16, 0xE0	; 224
    fecc:	17 e0       	ldi	r17, 0x07	; 7
    fece:	21 e0       	ldi	r18, 0x01	; 1
    fed0:	4e e6       	ldi	r20, 0x6E	; 110
    fed2:	50 e0       	ldi	r21, 0x00	; 0
    fed4:	6e e1       	ldi	r22, 0x1E	; 30
    fed6:	70 e0       	ldi	r23, 0x00	; 0
    fed8:	ce 01       	movw	r24, r28
    feda:	88 57       	subi	r24, 0x78	; 120
    fedc:	9f 4f       	sbci	r25, 0xFF	; 255
    fede:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3845
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
    fee2:	85 e1       	ldi	r24, 0x15	; 21
    fee4:	9c e0       	ldi	r25, 0x0C	; 12
    fee6:	0e 94 bc 98 	call	0x13178	; 0x13178 <LCDWIKI_GUI::Get_Display_Height() const>
    feea:	8c 01       	movw	r16, r24
    feec:	85 e1       	ldi	r24, 0x15	; 21
    feee:	9c e0       	ldi	r25, 0x0C	; 12
    fef0:	0e 94 5b 98 	call	0x130b6	; 0x130b6 <LCDWIKI_GUI::Get_Display_Width() const>
    fef4:	7c 01       	movw	r14, r24
    fef6:	85 e1       	ldi	r24, 0x15	; 21
    fef8:	9c e0       	ldi	r25, 0x0C	; 12
    fefa:	0e 94 65 a7 	call	0x14eca	; 0x14eca <LCDWIKI_KBV::Get_Rotation() const>
    fefe:	98 01       	movw	r18, r16
    ff00:	a7 01       	movw	r20, r14
    ff02:	68 2f       	mov	r22, r24
    ff04:	83 ef       	ldi	r24, 0xF3	; 243
    ff06:	9b e0       	ldi	r25, 0x0B	; 11
    ff08:	0e 94 e7 a9 	call	0x153ce	; 0x153ce <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3846
      my_touch.TP_Set_Rotation(3);
    ff0c:	63 e0       	ldi	r22, 0x03	; 3
    ff0e:	83 ef       	ldi	r24, 0xF3	; 243
    ff10:	9b e0       	ldi	r25, 0x0B	; 11
    ff12:	0e 94 4d ac 	call	0x1589a	; 0x1589a <LCDWIKI_TOUCH::TP_Set_Rotation(unsigned char)>
    ff16:	1b e0       	ldi	r17, 0x0B	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3849 (discriminator 2)
      for (uint8_t i = 1; i < 8; i++)
      {
        digitalWrite(LED, LOW);
    ff18:	60 e0       	ldi	r22, 0x00	; 0
    ff1a:	88 e0       	ldi	r24, 0x08	; 8
    ff1c:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3850 (discriminator 2)
        my_touch.TP_SetBacklight(i * 11);
    ff20:	61 2f       	mov	r22, r17
    ff22:	83 ef       	ldi	r24, 0xF3	; 243
    ff24:	9b e0       	ldi	r25, 0x0B	; 11
    ff26:	0e 94 b6 a9 	call	0x1536c	; 0x1536c <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3851 (discriminator 2)
        delay(100);
    ff2a:	64 e6       	ldi	r22, 0x64	; 100
    ff2c:	70 e0       	ldi	r23, 0x00	; 0
    ff2e:	80 e0       	ldi	r24, 0x00	; 0
    ff30:	90 e0       	ldi	r25, 0x00	; 0
    ff32:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3852 (discriminator 2)
        digitalWrite(LED, HIGH);
    ff36:	61 e0       	ldi	r22, 0x01	; 1
    ff38:	88 e0       	ldi	r24, 0x08	; 8
    ff3a:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3853 (discriminator 2)
        delay(100);
    ff3e:	64 e6       	ldi	r22, 0x64	; 100
    ff40:	70 e0       	ldi	r23, 0x00	; 0
    ff42:	80 e0       	ldi	r24, 0x00	; 0
    ff44:	90 e0       	ldi	r25, 0x00	; 0
    ff46:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
    ff4a:	15 5f       	subi	r17, 0xF5	; 245
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3847 (discriminator 2)
    {
      strcpy_P(str1, text_touchscreen);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
      my_touch.TP_Set_Rotation(3);
      for (uint8_t i = 1; i < 8; i++)
    ff4c:	18 35       	cpi	r17, 0x58	; 88
    ff4e:	21 f7       	brne	.-56     	; 0xff18 <__DATA_REGION_LENGTH__+0x118>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3855
        my_touch.TP_SetBacklight(i * 11);
        delay(100);
        digitalWrite(LED, HIGH);
        delay(100);
      }
      brigthness_display_values = EEPROM.read(my_brightness_values);
    ff50:	8e e5       	ldi	r24, 0x5E	; 94
    ff52:	90 e0       	ldi	r25, 0x00	; 0
    ff54:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <EEPROMClass::read(int) [clone .isra.6]>
    ff58:	18 2f       	mov	r17, r24
    ff5a:	80 93 92 0a 	sts	0x0A92, r24	; 0x800a92 <brigthness_display_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3856
      brigthness_display_mode = EEPROM.read(my_brightness_mode);
    ff5e:	8f e5       	ldi	r24, 0x5F	; 95
    ff60:	90 e0       	ldi	r25, 0x00	; 0
    ff62:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <EEPROMClass::read(int) [clone .isra.6]>
    ff66:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3857
      my_touch.TP_SetBacklight(brigthness_display_values * 2);
    ff6a:	61 2f       	mov	r22, r17
    ff6c:	66 0f       	add	r22, r22
    ff6e:	83 ef       	ldi	r24, 0xF3	; 243
    ff70:	9b e0       	ldi	r25, 0x0B	; 11
    ff72:	0e 94 b6 a9 	call	0x1536c	; 0x1536c <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
    ff76:	65 cf       	rjmp	.-310    	; 0xfe42 <__DATA_REGION_LENGTH__+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3882
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
    ff78:	63 e4       	ldi	r22, 0x43	; 67
    ff7a:	79 e5       	ldi	r23, 0x59	; 89
    ff7c:	ce 01       	movw	r24, r28
    ff7e:	88 57       	subi	r24, 0x78	; 120
    ff80:	9f 4f       	sbci	r25, 0xFF	; 255
    ff82:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3883
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    ff86:	c1 2c       	mov	r12, r1
    ff88:	ee 24       	eor	r14, r14
    ff8a:	ea 94       	dec	r14
    ff8c:	fe 2c       	mov	r15, r14
    ff8e:	00 e0       	ldi	r16, 0x00	; 0
    ff90:	18 ef       	ldi	r17, 0xF8	; 248
    ff92:	21 e0       	ldi	r18, 0x01	; 1
    ff94:	48 e7       	ldi	r20, 0x78	; 120
    ff96:	50 e0       	ldi	r21, 0x00	; 0
    ff98:	60 ea       	ldi	r22, 0xA0	; 160
    ff9a:	70 e0       	ldi	r23, 0x00	; 0
    ff9c:	ce 01       	movw	r24, r28
    ff9e:	88 57       	subi	r24, 0x78	; 120
    ffa0:	9f 4f       	sbci	r25, 0xFF	; 255
    ffa2:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3884
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
    ffa6:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4025
      }
      else
      {
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_RTC);
    ffa8:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <selftest_set_0(unsigned char)>
    ffac:	4a cf       	rjmp	.-364    	; 0xfe42 <__DATA_REGION_LENGTH__+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3889
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
    ffae:	c0 5d       	subi	r28, 0xD0	; 208
    ffb0:	de 4f       	sbci	r29, 0xFE	; 254
    ffb2:	88 81       	ld	r24, Y
    ffb4:	c0 53       	subi	r28, 0x30	; 48
    ffb6:	d1 40       	sbci	r29, 0x01	; 1
    ffb8:	88 30       	cpi	r24, 0x08	; 8
    ffba:	c1 f5       	brne	.+112    	; 0x1002c <__EEPROM_REGION_LENGTH__+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3891
    {
      strcpy_P(str1, text_onewire_hledam);
    ffbc:	68 ef       	ldi	r22, 0xF8	; 248
    ffbe:	7b e5       	ldi	r23, 0x5B	; 91
    ffc0:	ce 01       	movw	r24, r28
    ffc2:	88 57       	subi	r24, 0x78	; 120
    ffc4:	9f 4f       	sbci	r25, 0xFF	; 255
    ffc6:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3892
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ffca:	c1 2c       	mov	r12, r1
    ffcc:	ee 24       	eor	r14, r14
    ffce:	ea 94       	dec	r14
    ffd0:	fe 2c       	mov	r15, r14
    ffd2:	00 ee       	ldi	r16, 0xE0	; 224
    ffd4:	17 e0       	ldi	r17, 0x07	; 7
    ffd6:	21 e0       	ldi	r18, 0x01	; 1
    ffd8:	42 e8       	ldi	r20, 0x82	; 130
    ffda:	50 e0       	ldi	r21, 0x00	; 0
    ffdc:	6e e1       	ldi	r22, 0x1E	; 30
    ffde:	70 e0       	ldi	r23, 0x00	; 0
    ffe0:	ce 01       	movw	r24, r28
    ffe2:	88 57       	subi	r24, 0x78	; 120
    ffe4:	9f 4f       	sbci	r25, 0xFF	; 255
    ffe6:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3893
      Global_HWwirenum = 0;
    ffea:	10 92 a1 11 	sts	0x11A1, r1	; 0x8011a1 <Global_HWwirenum>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3894
      one_hw_search_device(0);
    ffee:	80 e0       	ldi	r24, 0x00	; 0
    fff0:	0e 94 d7 8e 	call	0x11dae	; 0x11dae <one_hw_search_device(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3895
      tds_update_associate();
    fff4:	0e 94 91 8d 	call	0x11b22	; 0x11b22 <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3896
      strcpy (str1, "Nalezeno: ");
    fff8:	6f e1       	ldi	r22, 0x1F	; 31
    fffa:	78 e0       	ldi	r23, 0x08	; 8
    fffc:	ce 01       	movw	r24, r28
    fffe:	88 57       	subi	r24, 0x78	; 120
   10000:	9f 4f       	sbci	r25, 0xFF	; 255
   10002:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3897
      itoa(Global_HWwirenum, str2, 10);
   10006:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1000a:	4a e0       	ldi	r20, 0x0A	; 10
   1000c:	b5 01       	movw	r22, r10
   1000e:	90 e0       	ldi	r25, 0x00	; 0
   10010:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3898
      strcat(str1, str2);
   10014:	b5 01       	movw	r22, r10
   10016:	ce 01       	movw	r24, r28
   10018:	88 57       	subi	r24, 0x78	; 120
   1001a:	9f 4f       	sbci	r25, 0xFF	; 255
   1001c:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3899
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10020:	21 e0       	ldi	r18, 0x01	; 1
   10022:	42 e8       	ldi	r20, 0x82	; 130
   10024:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3952
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10026:	60 ea       	ldi	r22, 0xA0	; 160
   10028:	70 e0       	ldi	r23, 0x00	; 0
   1002a:	b8 ce       	rjmp	.-656    	; 0xfd9c <setup+0x8fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3903
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
   1002c:	c0 5d       	subi	r28, 0xD0	; 208
   1002e:	de 4f       	sbci	r29, 0xFE	; 254
   10030:	98 81       	ld	r25, Y
   10032:	c0 53       	subi	r28, 0x30	; 48
   10034:	d1 40       	sbci	r29, 0x01	; 1
   10036:	99 30       	cpi	r25, 0x09	; 9
   10038:	09 f0       	breq	.+2      	; 0x1003c <__EEPROM_REGION_LENGTH__+0x3c>
   1003a:	9b c1       	rjmp	.+822    	; 0x10372 <__EEPROM_REGION_LENGTH__+0x372>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3905
    {
      digitalWrite(ETH_RST, HIGH);
   1003c:	61 e0       	ldi	r22, 0x01	; 1
   1003e:	86 e0       	ldi	r24, 0x06	; 6
   10040:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3906
      delay(10);
   10044:	6a e0       	ldi	r22, 0x0A	; 10
   10046:	70 e0       	ldi	r23, 0x00	; 0
   10048:	80 e0       	ldi	r24, 0x00	; 0
   1004a:	90 e0       	ldi	r25, 0x00	; 0
   1004c:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3907
      digitalWrite(ETH_RST, LOW);
   10050:	60 e0       	ldi	r22, 0x00	; 0
   10052:	86 e0       	ldi	r24, 0x06	; 6
   10054:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3908
      delay(10);
   10058:	6a e0       	ldi	r22, 0x0A	; 10
   1005a:	70 e0       	ldi	r23, 0x00	; 0
   1005c:	80 e0       	ldi	r24, 0x00	; 0
   1005e:	90 e0       	ldi	r25, 0x00	; 0
   10060:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
      digitalWrite(ETH_RST, HIGH);
   10064:	61 e0       	ldi	r22, 0x01	; 1
   10066:	86 e0       	ldi	r24, 0x06	; 6
   10068:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3910
      delay(100);
   1006c:	64 e6       	ldi	r22, 0x64	; 100
   1006e:	70 e0       	ldi	r23, 0x00	; 0
   10070:	80 e0       	ldi	r24, 0x00	; 0
   10072:	90 e0       	ldi	r25, 0x00	; 0
   10074:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
   10078:	8f e0       	ldi	r24, 0x0F	; 15
   1007a:	80 93 03 13 	sts	0x1303, r24	; 0x801303 <Ethernet+0xc>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3912
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
   1007e:	66 e0       	ldi	r22, 0x06	; 6
   10080:	71 e1       	ldi	r23, 0x11	; 17
   10082:	ce 01       	movw	r24, r28
   10084:	8e 50       	subi	r24, 0x0E	; 14
   10086:	9f 4f       	sbci	r25, 0xFF	; 255
   10088:	0e 94 57 da 	call	0x1b4ae	; 0x1b4ae <IPAddress::IPAddress(unsigned char const*)>
   1008c:	6e e0       	ldi	r22, 0x0E	; 14
   1008e:	71 e1       	ldi	r23, 0x11	; 17
   10090:	ce 01       	movw	r24, r28
   10092:	84 5e       	subi	r24, 0xE4	; 228
   10094:	9e 4f       	sbci	r25, 0xFE	; 254
   10096:	0e 94 57 da 	call	0x1b4ae	; 0x1b4ae <IPAddress::IPAddress(unsigned char const*)>
   1009a:	6a e0       	ldi	r22, 0x0A	; 10
   1009c:	71 e1       	ldi	r23, 0x11	; 17
   1009e:	ce 01       	movw	r24, r28
   100a0:	8e 5d       	subi	r24, 0xDE	; 222
   100a2:	9e 4f       	sbci	r25, 0xFE	; 254
   100a4:	0e 94 57 da 	call	0x1b4ae	; 0x1b4ae <IPAddress::IPAddress(unsigned char const*)>
   100a8:	62 e0       	ldi	r22, 0x02	; 2
   100aa:	71 e1       	ldi	r23, 0x11	; 17
   100ac:	ce 01       	movw	r24, r28
   100ae:	88 5d       	subi	r24, 0xD8	; 216
   100b0:	9e 4f       	sbci	r25, 0xFE	; 254
   100b2:	0e 94 57 da 	call	0x1b4ae	; 0x1b4ae <IPAddress::IPAddress(unsigned char const*)>
   100b6:	be 01       	movw	r22, r28
   100b8:	6e 50       	subi	r22, 0x0E	; 14
   100ba:	7f 4f       	sbci	r23, 0xFF	; 255
   100bc:	7b 01       	movw	r14, r22
   100be:	8e 01       	movw	r16, r28
   100c0:	04 5e       	subi	r16, 0xE4	; 228
   100c2:	1e 4f       	sbci	r17, 0xFE	; 254
   100c4:	9e 01       	movw	r18, r28
   100c6:	2e 5d       	subi	r18, 0xDE	; 222
   100c8:	3e 4f       	sbci	r19, 0xFE	; 254
   100ca:	ae 01       	movw	r20, r28
   100cc:	48 5d       	subi	r20, 0xD8	; 216
   100ce:	5e 4f       	sbci	r21, 0xFE	; 254
   100d0:	6c ef       	ldi	r22, 0xFC	; 252
   100d2:	70 e1       	ldi	r23, 0x10	; 16
   100d4:	87 ef       	ldi	r24, 0xF7	; 247
   100d6:	92 e1       	ldi	r25, 0x12	; 18
   100d8:	0e 94 31 b3 	call	0x16662	; 0x16662 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)>
_ZN10W5500Class8writeRCREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:242
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0019);    // Timeout address
  __GP_REGISTER8 (RCR,    0x001B);    // Retry count
   100dc:	42 e0       	ldi	r20, 0x02	; 2
   100de:	64 e0       	ldi	r22, 0x04	; 4
   100e0:	8b e1       	ldi	r24, 0x1B	; 27
   100e2:	90 e0       	ldi	r25, 0x00	; 0
   100e4:	0e 94 4f bb 	call	0x1769e	; 0x1769e <W5500Class::write(unsigned int, unsigned char, unsigned char)>
_ZN10W5500Class8writeRTREj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:241
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0019);    // Timeout address
   100e8:	42 e0       	ldi	r20, 0x02	; 2
   100ea:	64 e0       	ldi	r22, 0x04	; 4
   100ec:	89 e1       	ldi	r24, 0x19	; 25
   100ee:	90 e0       	ldi	r25, 0x00	; 0
   100f0:	0e 94 4f bb 	call	0x1769e	; 0x1769e <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   100f4:	48 e5       	ldi	r20, 0x58	; 88
   100f6:	64 e0       	ldi	r22, 0x04	; 4
   100f8:	8a e1       	ldi	r24, 0x1A	; 26
   100fa:	90 e0       	ldi	r25, 0x00	; 0
   100fc:	0e 94 4f bb 	call	0x1769e	; 0x1769e <W5500Class::write(unsigned int, unsigned char, unsigned char)>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3915
      w5500.setRetransmissionCount(2);
      w5500.setRetransmissionTime(600);
      strcpy_P(str1, text_ethernet_rozhrani);
   10100:	66 ed       	ldi	r22, 0xD6	; 214
   10102:	7b e5       	ldi	r23, 0x5B	; 91
   10104:	ce 01       	movw	r24, r28
   10106:	88 57       	subi	r24, 0x78	; 120
   10108:	9f 4f       	sbci	r25, 0xFF	; 255
   1010a:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3916
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1010e:	c1 2c       	mov	r12, r1
   10110:	ee 24       	eor	r14, r14
   10112:	ea 94       	dec	r14
   10114:	fe 2c       	mov	r15, r14
   10116:	00 ee       	ldi	r16, 0xE0	; 224
   10118:	17 e0       	ldi	r17, 0x07	; 7
   1011a:	21 e0       	ldi	r18, 0x01	; 1
   1011c:	4c e8       	ldi	r20, 0x8C	; 140
   1011e:	50 e0       	ldi	r21, 0x00	; 0
   10120:	6e e1       	ldi	r22, 0x1E	; 30
   10122:	70 e0       	ldi	r23, 0x00	; 0
   10124:	ce 01       	movw	r24, r28
   10126:	88 57       	subi	r24, 0x78	; 120
   10128:	9f 4f       	sbci	r25, 0xFF	; 255
   1012a:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3917
      delay(100);
   1012e:	64 e6       	ldi	r22, 0x64	; 100
   10130:	70 e0       	ldi	r23, 0x00	; 0
   10132:	80 e0       	ldi	r24, 0x00	; 0
   10134:	90 e0       	ldi	r25, 0x00	; 0
   10136:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3918
      http_server.begin();
   1013a:	83 e0       	ldi	r24, 0x03	; 3
   1013c:	9e e0       	ldi	r25, 0x0E	; 14
   1013e:	0e 94 ac b5 	call	0x16b58	; 0x16b58 <EthernetServer::begin()>
   10142:	7f ce       	rjmp	.-770    	; 0xfe42 <__DATA_REGION_LENGTH__+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3941
        {
          selftest_clear_0(SELFTEST_MQTT_LINK);
          break;
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
   10144:	85 e0       	ldi	r24, 0x05	; 5
   10146:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3931

      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
      while ((millis() - milis) < 3000 )
   1014a:	4a c1       	rjmp	.+660    	; 0x103e0 <__EEPROM_REGION_LENGTH__+0x3e0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3951
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
   1014c:	60 e4       	ldi	r22, 0x40	; 64
   1014e:	79 e5       	ldi	r23, 0x59	; 89
   10150:	ce 01       	movw	r24, r28
   10152:	88 57       	subi	r24, 0x78	; 120
   10154:	9f 4f       	sbci	r25, 0xFF	; 255
   10156:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3952
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1015a:	c1 2c       	mov	r12, r1
   1015c:	ee 24       	eor	r14, r14
   1015e:	ea 94       	dec	r14
   10160:	fe 2c       	mov	r15, r14
   10162:	00 ee       	ldi	r16, 0xE0	; 224
   10164:	17 e0       	ldi	r17, 0x07	; 7
   10166:	73 c1       	rjmp	.+742    	; 0x1044e <__EEPROM_REGION_LENGTH__+0x44e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3958
      }

    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
   10168:	c0 5d       	subi	r28, 0xD0	; 208
   1016a:	de 4f       	sbci	r29, 0xFE	; 254
   1016c:	68 81       	ld	r22, Y
   1016e:	c0 53       	subi	r28, 0x30	; 48
   10170:	d1 40       	sbci	r29, 0x01	; 1
   10172:	6b 30       	cpi	r22, 0x0B	; 11
   10174:	89 f4       	brne	.+34     	; 0x10198 <__EEPROM_REGION_LENGTH__+0x198>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3960
    {
      strcpy_P(str1, text_rest_rozhrani);
   10176:	66 eb       	ldi	r22, 0xB6	; 182
   10178:	7b e5       	ldi	r23, 0x5B	; 91
   1017a:	ce 01       	movw	r24, r28
   1017c:	88 57       	subi	r24, 0x78	; 120
   1017e:	9f 4f       	sbci	r25, 0xFF	; 255
   10180:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3961
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10184:	c1 2c       	mov	r12, r1
   10186:	ee 24       	eor	r14, r14
   10188:	ea 94       	dec	r14
   1018a:	fe 2c       	mov	r15, r14
   1018c:	00 ee       	ldi	r16, 0xE0	; 224
   1018e:	17 e0       	ldi	r17, 0x07	; 7
   10190:	21 e0       	ldi	r18, 0x01	; 1
   10192:	40 ea       	ldi	r20, 0xA0	; 160
   10194:	50 e0       	ldi	r21, 0x00	; 0
   10196:	00 ce       	rjmp	.-1024   	; 0xfd98 <setup+0x8fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3965
    }
    ///
    /// inicializace nrf
    if (init == 12)
   10198:	c0 5d       	subi	r28, 0xD0	; 208
   1019a:	de 4f       	sbci	r29, 0xFE	; 254
   1019c:	78 81       	ld	r23, Y
   1019e:	c0 53       	subi	r28, 0x30	; 48
   101a0:	d1 40       	sbci	r29, 0x01	; 1
   101a2:	7c 30       	cpi	r23, 0x0C	; 12
   101a4:	09 f0       	breq	.+2      	; 0x101a8 <__EEPROM_REGION_LENGTH__+0x1a8>
   101a6:	57 c1       	rjmp	.+686    	; 0x10456 <__EEPROM_REGION_LENGTH__+0x456>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3967
    {
      strcpy_P(str1, text_nrf_rozhrani);
   101a8:	69 ea       	ldi	r22, 0xA9	; 169
   101aa:	7b e5       	ldi	r23, 0x5B	; 91
   101ac:	ce 01       	movw	r24, r28
   101ae:	88 57       	subi	r24, 0x78	; 120
   101b0:	9f 4f       	sbci	r25, 0xFF	; 255
   101b2:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3968
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   101b6:	c1 2c       	mov	r12, r1
   101b8:	ee 24       	eor	r14, r14
   101ba:	ea 94       	dec	r14
   101bc:	fe 2c       	mov	r15, r14
   101be:	00 ee       	ldi	r16, 0xE0	; 224
   101c0:	17 e0       	ldi	r17, 0x07	; 7
   101c2:	21 e0       	ldi	r18, 0x01	; 1
   101c4:	4a ea       	ldi	r20, 0xAA	; 170
   101c6:	50 e0       	ldi	r21, 0x00	; 0
   101c8:	6e e1       	ldi	r22, 0x1E	; 30
   101ca:	70 e0       	ldi	r23, 0x00	; 0
   101cc:	ce 01       	movw	r24, r28
   101ce:	88 57       	subi	r24, 0x78	; 120
   101d0:	9f 4f       	sbci	r25, 0xFF	; 255
   101d2:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3969
      scan_rf_net_enable = 2;
   101d6:	82 e0       	ldi	r24, 0x02	; 2
   101d8:	80 93 56 11 	sts	0x1156, r24	; 0x801156 <scan_rf_net_enable>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3970
      radio.begin();
   101dc:	8b ee       	ldi	r24, 0xEB	; 235
   101de:	9d e0       	ldi	r25, 0x0D	; 13
   101e0:	0e 94 67 ca 	call	0x194ce	; 0x194ce <RF24::begin()>
   101e4:	2e ce       	rjmp	.-932    	; 0xfe42 <__DATA_REGION_LENGTH__+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4004
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
   101e6:	60 e4       	ldi	r22, 0x40	; 64
   101e8:	79 e5       	ldi	r23, 0x59	; 89
   101ea:	ce 01       	movw	r24, r28
   101ec:	88 57       	subi	r24, 0x78	; 120
   101ee:	9f 4f       	sbci	r25, 0xFF	; 255
   101f0:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4005
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   101f4:	c1 2c       	mov	r12, r1
   101f6:	ee 24       	eor	r14, r14
   101f8:	ea 94       	dec	r14
   101fa:	fe 2c       	mov	r15, r14
   101fc:	00 ee       	ldi	r16, 0xE0	; 224
   101fe:	17 e0       	ldi	r17, 0x07	; 7
   10200:	21 e0       	ldi	r18, 0x01	; 1
   10202:	4e eb       	ldi	r20, 0xBE	; 190
   10204:	50 e0       	ldi	r21, 0x00	; 0
   10206:	60 ea       	ldi	r22, 0xA0	; 160
   10208:	70 e0       	ldi	r23, 0x00	; 0
   1020a:	ce 01       	movw	r24, r28
   1020c:	88 57       	subi	r24, 0x78	; 120
   1020e:	9f 4f       	sbci	r25, 0xFF	; 255
   10210:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4006
        selftest_clear_0(SELFTEST_ERR_NTP);
   10214:	81 e0       	ldi	r24, 0x01	; 1
   10216:	aa c0       	rjmp	.+340    	; 0x1036c <__EEPROM_REGION_LENGTH__+0x36c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4011
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
   10218:	c0 5d       	subi	r28, 0xD0	; 208
   1021a:	de 4f       	sbci	r29, 0xFE	; 254
   1021c:	98 81       	ld	r25, Y
   1021e:	c0 53       	subi	r28, 0x30	; 48
   10220:	d1 40       	sbci	r29, 0x01	; 1
   10222:	9f 30       	cpi	r25, 0x0F	; 15
   10224:	09 f0       	breq	.+2      	; 0x10228 <__EEPROM_REGION_LENGTH__+0x228>
   10226:	0d ce       	rjmp	.-998    	; 0xfe42 <__DATA_REGION_LENGTH__+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4013
    {
      strcpy_P(str1, text_rtc_cas);
   10228:	64 e7       	ldi	r22, 0x74	; 116
   1022a:	7b e5       	ldi	r23, 0x5B	; 91
   1022c:	ce 01       	movw	r24, r28
   1022e:	88 57       	subi	r24, 0x78	; 120
   10230:	9f 4f       	sbci	r25, 0xFF	; 255
   10232:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4014
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10236:	c1 2c       	mov	r12, r1
   10238:	ee 24       	eor	r14, r14
   1023a:	ea 94       	dec	r14
   1023c:	fe 2c       	mov	r15, r14
   1023e:	00 ee       	ldi	r16, 0xE0	; 224
   10240:	17 e0       	ldi	r17, 0x07	; 7
   10242:	21 e0       	ldi	r18, 0x01	; 1
   10244:	48 ec       	ldi	r20, 0xC8	; 200
   10246:	50 e0       	ldi	r21, 0x00	; 0
   10248:	6e e1       	ldi	r22, 0x1E	; 30
   1024a:	70 e0       	ldi	r23, 0x00	; 0
   1024c:	ce 01       	movw	r24, r28
   1024e:	88 57       	subi	r24, 0x78	; 120
   10250:	9f 4f       	sbci	r25, 0xFF	; 255
   10252:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4015
      if (rtc.isrunning())
   10256:	82 e6       	ldi	r24, 0x62	; 98
   10258:	90 e1       	ldi	r25, 0x10	; 16
   1025a:	0e 94 1e cd 	call	0x19a3c	; 0x19a3c <RTC_DS1307::isrunning()>
   1025e:	88 23       	and	r24, r24
   10260:	99 f0       	breq	.+38     	; 0x10288 <__EEPROM_REGION_LENGTH__+0x288>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4017
      {
        strcpy_P(str1, text_ok);
   10262:	60 e4       	ldi	r22, 0x40	; 64
   10264:	79 e5       	ldi	r23, 0x59	; 89
   10266:	ce 01       	movw	r24, r28
   10268:	88 57       	subi	r24, 0x78	; 120
   1026a:	9f 4f       	sbci	r25, 0xFF	; 255
   1026c:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4018
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10270:	21 e0       	ldi	r18, 0x01	; 1
   10272:	48 ec       	ldi	r20, 0xC8	; 200
   10274:	50 e0       	ldi	r21, 0x00	; 0
   10276:	60 ea       	ldi	r22, 0xA0	; 160
   10278:	70 e0       	ldi	r23, 0x00	; 0
   1027a:	ce 01       	movw	r24, r28
   1027c:	88 57       	subi	r24, 0x78	; 120
   1027e:	9f 4f       	sbci	r25, 0xFF	; 255
   10280:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4019
        selftest_clear_0(SELFTEST_ERR_RTC);
   10284:	80 e0       	ldi	r24, 0x00	; 0
   10286:	72 c0       	rjmp	.+228    	; 0x1036c <__EEPROM_REGION_LENGTH__+0x36c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4023
      }
      else
      {
        strcpy_P(str1, text_err);
   10288:	63 e4       	ldi	r22, 0x43	; 67
   1028a:	79 e5       	ldi	r23, 0x59	; 89
   1028c:	ce 01       	movw	r24, r28
   1028e:	88 57       	subi	r24, 0x78	; 120
   10290:	9f 4f       	sbci	r25, 0xFF	; 255
   10292:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4024
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   10296:	c1 2c       	mov	r12, r1
   10298:	ee 24       	eor	r14, r14
   1029a:	ea 94       	dec	r14
   1029c:	fe 2c       	mov	r15, r14
   1029e:	00 e0       	ldi	r16, 0x00	; 0
   102a0:	18 ef       	ldi	r17, 0xF8	; 248
   102a2:	21 e0       	ldi	r18, 0x01	; 1
   102a4:	48 ec       	ldi	r20, 0xC8	; 200
   102a6:	50 e0       	ldi	r21, 0x00	; 0
   102a8:	60 ea       	ldi	r22, 0xA0	; 160
   102aa:	70 e0       	ldi	r23, 0x00	; 0
   102ac:	ce 01       	movw	r24, r28
   102ae:	88 57       	subi	r24, 0x78	; 120
   102b0:	9f 4f       	sbci	r25, 0xFF	; 255
   102b2:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4025
        selftest_set_0(SELFTEST_ERR_RTC);
   102b6:	80 e0       	ldi	r24, 0x00	; 0
   102b8:	77 ce       	rjmp	.-786    	; 0xffa8 <__DATA_REGION_LENGTH__+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3825
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }

    ///  nacteni provoznich parametru
    if (init == 5)
   102ba:	c0 5d       	subi	r28, 0xD0	; 208
   102bc:	de 4f       	sbci	r29, 0xFE	; 254
   102be:	78 81       	ld	r23, Y
   102c0:	c0 53       	subi	r28, 0x30	; 48
   102c2:	d1 40       	sbci	r29, 0x01	; 1
   102c4:	75 30       	cpi	r23, 0x05	; 5
   102c6:	09 f4       	brne	.+2      	; 0x102ca <__EEPROM_REGION_LENGTH__+0x2ca>
   102c8:	82 cd       	rjmp	.-1276   	; 0xfdce <setup+0x930>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3841
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
   102ca:	76 30       	cpi	r23, 0x06	; 6
   102cc:	09 f4       	brne	.+2      	; 0x102d0 <__EEPROM_REGION_LENGTH__+0x2d0>
   102ce:	f2 cd       	rjmp	.-1052   	; 0xfeb4 <__DATA_REGION_LENGTH__+0xb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3861
      brigthness_display_mode = EEPROM.read(my_brightness_mode);
      my_touch.TP_SetBacklight(brigthness_display_values * 2);
    }
    ///
    /// inicializace ds2482
    if (init == 7)
   102d0:	77 30       	cpi	r23, 0x07	; 7
   102d2:	09 f0       	breq	.+2      	; 0x102d6 <__EEPROM_REGION_LENGTH__+0x2d6>
   102d4:	6c ce       	rjmp	.-808    	; 0xffae <__DATA_REGION_LENGTH__+0x1ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3863
    {
      strcpy_P(str1, text_onewire_rozhrani);
   102d6:	65 e0       	ldi	r22, 0x05	; 5
   102d8:	7c e5       	ldi	r23, 0x5C	; 92
   102da:	ce 01       	movw	r24, r28
   102dc:	88 57       	subi	r24, 0x78	; 120
   102de:	9f 4f       	sbci	r25, 0xFF	; 255
   102e0:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3864
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   102e4:	c1 2c       	mov	r12, r1
   102e6:	ee 24       	eor	r14, r14
   102e8:	ea 94       	dec	r14
   102ea:	fe 2c       	mov	r15, r14
   102ec:	00 ee       	ldi	r16, 0xE0	; 224
   102ee:	17 e0       	ldi	r17, 0x07	; 7
   102f0:	21 e0       	ldi	r18, 0x01	; 1
   102f2:	48 e7       	ldi	r20, 0x78	; 120
   102f4:	50 e0       	ldi	r21, 0x00	; 0
   102f6:	6e e1       	ldi	r22, 0x1E	; 30
   102f8:	70 e0       	ldi	r23, 0x00	; 0
   102fa:	ce 01       	movw	r24, r28
   102fc:	88 57       	subi	r24, 0x78	; 120
   102fe:	9f 4f       	sbci	r25, 0xFF	; 255
   10300:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3865
      ds2482_address[0].i2c_addr = 0b0011000;
   10304:	88 e1       	ldi	r24, 0x18	; 24
   10306:	80 93 5d 11 	sts	0x115D, r24	; 0x80115d <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3866
      ds2482_address[0].HWwirenum = 0;
   1030a:	10 92 5e 11 	sts	0x115E, r1	; 0x80115e <ds2482_address+0x1>
   1030e:	e2 ea       	ldi	r30, 0xA2	; 162
   10310:	f1 e1       	ldi	r31, 0x11	; 17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3870 (discriminator 2)
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
   10312:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3871 (discriminator 2)
        status_tds18s20[idx].period_now = 0;
   10314:	14 8e       	std	Z+28, r1	; 0x1c
   10316:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3868 (discriminator 2)
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
   10318:	72 e1       	ldi	r23, 0x12	; 18
   1031a:	e6 35       	cpi	r30, 0x56	; 86
   1031c:	f7 07       	cpc	r31, r23
   1031e:	c9 f7       	brne	.-14     	; 0x10312 <__EEPROM_REGION_LENGTH__+0x312>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   10320:	4a e0       	ldi	r20, 0x0A	; 10
   10322:	be 01       	movw	r22, r28
   10324:	62 52       	subi	r22, 0x22	; 34
   10326:	7f 4f       	sbci	r23, 0xFF	; 255
   10328:	88 e1       	ldi	r24, 0x18	; 24
   1032a:	90 e0       	ldi	r25, 0x00	; 0
   1032c:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3874
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
   10330:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <ds2482_address>
   10334:	0e 94 74 d2 	call	0x1a4e8	; 0x1a4e8 <ds2482reset(unsigned char)>
   10338:	81 11       	cpse	r24, r1
   1033a:	1e ce       	rjmp	.-964    	; 0xff78 <__DATA_REGION_LENGTH__+0x178>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3876
      {
        strcpy_P(str1, text_ok);
   1033c:	60 e4       	ldi	r22, 0x40	; 64
   1033e:	79 e5       	ldi	r23, 0x59	; 89
   10340:	ce 01       	movw	r24, r28
   10342:	88 57       	subi	r24, 0x78	; 120
   10344:	9f 4f       	sbci	r25, 0xFF	; 255
   10346:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3877
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1034a:	c1 2c       	mov	r12, r1
   1034c:	ee 24       	eor	r14, r14
   1034e:	ea 94       	dec	r14
   10350:	fe 2c       	mov	r15, r14
   10352:	00 ee       	ldi	r16, 0xE0	; 224
   10354:	17 e0       	ldi	r17, 0x07	; 7
   10356:	21 e0       	ldi	r18, 0x01	; 1
   10358:	48 e7       	ldi	r20, 0x78	; 120
   1035a:	50 e0       	ldi	r21, 0x00	; 0
   1035c:	60 ea       	ldi	r22, 0xA0	; 160
   1035e:	70 e0       	ldi	r23, 0x00	; 0
   10360:	ce 01       	movw	r24, r28
   10362:	88 57       	subi	r24, 0x78	; 120
   10364:	9f 4f       	sbci	r25, 0xFF	; 255
   10366:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3878
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
   1036a:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4019
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      if (rtc.isrunning())
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
   1036c:	0e 94 ae 4e 	call	0x9d5c	; 0x9d5c <selftest_clear_0(unsigned char)>
   10370:	68 cd       	rjmp	.-1328   	; 0xfe42 <__DATA_REGION_LENGTH__+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3922
      delay(100);
      http_server.begin();
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
   10372:	c0 5d       	subi	r28, 0xD0	; 208
   10374:	de 4f       	sbci	r29, 0xFE	; 254
   10376:	88 81       	ld	r24, Y
   10378:	c0 53       	subi	r28, 0x30	; 48
   1037a:	d1 40       	sbci	r29, 0x01	; 1
   1037c:	8a 30       	cpi	r24, 0x0A	; 10
   1037e:	09 f0       	breq	.+2      	; 0x10382 <__EEPROM_REGION_LENGTH__+0x382>
   10380:	f3 ce       	rjmp	.-538    	; 0x10168 <__EEPROM_REGION_LENGTH__+0x168>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3924
    {
      strcpy_P(str1, text_mqtt_rozhrani);
   10382:	68 ec       	ldi	r22, 0xC8	; 200
   10384:	7b e5       	ldi	r23, 0x5B	; 91
   10386:	ce 01       	movw	r24, r28
   10388:	88 57       	subi	r24, 0x78	; 120
   1038a:	9f 4f       	sbci	r25, 0xFF	; 255
   1038c:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3925
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10390:	c1 2c       	mov	r12, r1
   10392:	ee 24       	eor	r14, r14
   10394:	ea 94       	dec	r14
   10396:	fe 2c       	mov	r15, r14
   10398:	00 ee       	ldi	r16, 0xE0	; 224
   1039a:	17 e0       	ldi	r17, 0x07	; 7
   1039c:	21 e0       	ldi	r18, 0x01	; 1
   1039e:	46 e9       	ldi	r20, 0x96	; 150
   103a0:	50 e0       	ldi	r21, 0x00	; 0
   103a2:	6e e1       	ldi	r22, 0x1E	; 30
   103a4:	70 e0       	ldi	r23, 0x00	; 0
   103a6:	ce 01       	movw	r24, r28
   103a8:	88 57       	subi	r24, 0x78	; 120
   103aa:	9f 4f       	sbci	r25, 0xFF	; 255
   103ac:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3927

      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
   103b0:	40 91 20 11 	lds	r20, 0x1120	; 0x801120 <device+0x24>
   103b4:	50 91 21 11 	lds	r21, 0x1121	; 0x801121 <device+0x25>
   103b8:	6c e1       	ldi	r22, 0x1C	; 28
   103ba:	71 e1       	ldi	r23, 0x11	; 17
   103bc:	89 e0       	ldi	r24, 0x09	; 9
   103be:	9e e0       	ldi	r25, 0x0E	; 14
   103c0:	0e 94 de c7 	call	0x18fbc	; 0x18fbc <PubSubClient::setServer(unsigned char*, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3928
      mqtt_client.setCallback(mqtt_callback);
   103c4:	6c e4       	ldi	r22, 0x4C	; 76
   103c6:	7f e6       	ldi	r23, 0x6F	; 111
   103c8:	89 e0       	ldi	r24, 0x09	; 9
   103ca:	9e e0       	ldi	r25, 0x0E	; 14
   103cc:	0e 94 18 c8 	call	0x19030	; 0x19030 <PubSubClient::setCallback(void (*)(char*, unsigned char*, unsigned int))>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3929
      send_mqtt_set_header(thermctl_header_out);
   103d0:	85 ee       	ldi	r24, 0xE5	; 229
   103d2:	98 e5       	ldi	r25, 0x58	; 88
   103d4:	0e 94 20 87 	call	0x10e40	; 0x10e40 <send_mqtt_set_header(char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3930
      milis = millis();
   103d8:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   103dc:	6b 01       	movw	r12, r22
   103de:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3931
      while ((millis() - milis) < 3000 )
   103e0:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   103e4:	6c 19       	sub	r22, r12
   103e6:	7d 09       	sbc	r23, r13
   103e8:	8e 09       	sbc	r24, r14
   103ea:	9f 09       	sbc	r25, r15
   103ec:	68 3b       	cpi	r22, 0xB8	; 184
   103ee:	7b 40       	sbci	r23, 0x0B	; 11
   103f0:	81 05       	cpc	r24, r1
   103f2:	91 05       	cpc	r25, r1
   103f4:	98 f4       	brcc	.+38     	; 0x1041c <__EEPROM_REGION_LENGTH__+0x41c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3933
      {
        lastmqttconnect = 0;
   103f6:	10 92 c4 0a 	sts	0x0AC4, r1	; 0x800ac4 <lastmqttconnect>
   103fa:	10 92 c5 0a 	sts	0x0AC5, r1	; 0x800ac5 <lastmqttconnect+0x1>
   103fe:	10 92 c6 0a 	sts	0x0AC6, r1	; 0x800ac6 <lastmqttconnect+0x2>
   10402:	10 92 c7 0a 	sts	0x0AC7, r1	; 0x800ac7 <lastmqttconnect+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3934
        mqtt_client.loop();
   10406:	89 e0       	ldi	r24, 0x09	; 9
   10408:	9e e0       	ldi	r25, 0x0E	; 14
   1040a:	0e 94 45 c5 	call	0x18a8a	; 0x18a8a <PubSubClient::loop()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3935
        if (mqtt_reconnect() == 0)
   1040e:	0e 94 b8 49 	call	0x9370	; 0x9370 <mqtt_reconnect()>
   10412:	81 11       	cpse	r24, r1
   10414:	97 ce       	rjmp	.-722    	; 0x10144 <__EEPROM_REGION_LENGTH__+0x144>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3937
        {
          selftest_clear_0(SELFTEST_MQTT_LINK);
   10416:	85 e0       	ldi	r24, 0x05	; 5
   10418:	0e 94 ae 4e 	call	0x9d5c	; 0x9d5c <selftest_clear_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3943
          break;
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }
      lastmqttconnect = 0;
   1041c:	10 92 c4 0a 	sts	0x0AC4, r1	; 0x800ac4 <lastmqttconnect>
   10420:	10 92 c5 0a 	sts	0x0AC5, r1	; 0x800ac5 <lastmqttconnect+0x1>
   10424:	10 92 c6 0a 	sts	0x0AC6, r1	; 0x800ac6 <lastmqttconnect+0x2>
   10428:	10 92 c7 0a 	sts	0x0AC7, r1	; 0x800ac7 <lastmqttconnect+0x3>
_Z14selftest_get_0h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3321
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
   1042c:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3944
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }
      lastmqttconnect = 0;
      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
   10430:	85 ff       	sbrs	r24, 5
   10432:	8c ce       	rjmp	.-744    	; 0x1014c <__EEPROM_REGION_LENGTH__+0x14c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3946
      {
        strcpy_P(str1, text_err);
   10434:	63 e4       	ldi	r22, 0x43	; 67
   10436:	79 e5       	ldi	r23, 0x59	; 89
   10438:	ce 01       	movw	r24, r28
   1043a:	88 57       	subi	r24, 0x78	; 120
   1043c:	9f 4f       	sbci	r25, 0xFF	; 255
   1043e:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3947
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   10442:	c1 2c       	mov	r12, r1
   10444:	ee 24       	eor	r14, r14
   10446:	ea 94       	dec	r14
   10448:	fe 2c       	mov	r15, r14
   1044a:	00 e0       	ldi	r16, 0x00	; 0
   1044c:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3952
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1044e:	21 e0       	ldi	r18, 0x01	; 1
   10450:	46 e9       	ldi	r20, 0x96	; 150
   10452:	50 e0       	ldi	r21, 0x00	; 0
   10454:	e8 cd       	rjmp	.-1072   	; 0x10026 <__EEPROM_REGION_LENGTH__+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3974
      scan_rf_net_enable = 2;
      radio.begin();
    }
    ///
    /// inicializace termostatu
    if (init == 13)
   10456:	c0 5d       	subi	r28, 0xD0	; 208
   10458:	de 4f       	sbci	r29, 0xFE	; 254
   1045a:	98 81       	ld	r25, Y
   1045c:	c0 53       	subi	r28, 0x30	; 48
   1045e:	d1 40       	sbci	r29, 0x01	; 1
   10460:	9d 30       	cpi	r25, 0x0D	; 13
   10462:	09 f0       	breq	.+2      	; 0x10466 <__EEPROM_REGION_LENGTH__+0x466>
   10464:	ff c9       	rjmp	.-3074   	; 0xf864 <setup+0x3c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3976
    {
      strcpy_P(str1, text_pid_regulator);
   10466:	6b e9       	ldi	r22, 0x9B	; 155
   10468:	7b e5       	ldi	r23, 0x5B	; 91
   1046a:	ce 01       	movw	r24, r28
   1046c:	88 57       	subi	r24, 0x78	; 120
   1046e:	9f 4f       	sbci	r25, 0xFF	; 255
   10470:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3977
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10474:	c1 2c       	mov	r12, r1
   10476:	ee 24       	eor	r14, r14
   10478:	ea 94       	dec	r14
   1047a:	fe 2c       	mov	r15, r14
   1047c:	00 ee       	ldi	r16, 0xE0	; 224
   1047e:	17 e0       	ldi	r17, 0x07	; 7
   10480:	21 e0       	ldi	r18, 0x01	; 1
   10482:	44 eb       	ldi	r20, 0xB4	; 180
   10484:	50 e0       	ldi	r21, 0x00	; 0
   10486:	6e e1       	ldi	r22, 0x1E	; 30
   10488:	70 e0       	ldi	r23, 0x00	; 0
   1048a:	ce 01       	movw	r24, r28
   1048c:	88 57       	subi	r24, 0x78	; 120
   1048e:	9f 4f       	sbci	r25, 0xFF	; 255
   10490:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978
      thermostat_init_pid();
   10494:	0e 94 66 90 	call	0x120cc	; 0x120cc <thermostat_init_pid()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3980
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   10498:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3982 (discriminator 2)
      {
        thermostat_ring_set_state(idx, 0);
   1049a:	60 e0       	ldi	r22, 0x00	; 0
   1049c:	81 2f       	mov	r24, r17
   1049e:	0e 94 5a 90 	call	0x120b4	; 0x120b4 <thermostat_ring_set_state(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3983 (discriminator 2)
        thermostat_ring_set_power(idx, 0);
   104a2:	60 e0       	ldi	r22, 0x00	; 0
   104a4:	81 2f       	mov	r24, r17
   104a6:	0e 94 60 90 	call	0x120c0	; 0x120c0 <thermostat_ring_set_power(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3984 (discriminator 2)
        thermostat_ring_get_pid_eeprom(idx);
   104aa:	81 2f       	mov	r24, r17
   104ac:	0e 94 a2 92 	call	0x12544	; 0x12544 <thermostat_ring_get_pid_eeprom(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3985 (discriminator 2)
        thermostat_ring_update_pid_parameters(idx);
   104b0:	81 2f       	mov	r24, r17
   104b2:	0e 94 56 92 	call	0x124ac	; 0x124ac <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3980 (discriminator 2)
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   104b6:	1f 5f       	subi	r17, 0xFF	; 255
   104b8:	15 30       	cpi	r17, 0x05	; 5
   104ba:	79 f7       	brne	.-34     	; 0x1049a <__EEPROM_REGION_LENGTH__+0x49a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3987
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
   104bc:	0e 94 87 49 	call	0x930e	; 0x930e <get_default_ring()>
   104c0:	80 93 9e 0a 	sts	0x0A9E, r24	; 0x800a9e <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3988
      default_show_temp = get_default_show_temp();
   104c4:	0e 94 95 49 	call	0x932a	; 0x932a <get_default_show_temp()>
   104c8:	80 93 9d 0a 	sts	0x0A9D, r24	; 0x800a9d <default_show_temp>
   104cc:	ba cc       	rjmp	.-1676   	; 0xfe42 <__DATA_REGION_LENGTH__+0x42>

000104ce <check_connectivity_connection()>:
_Z29check_connectivity_connectionv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5702
   return
      1 - OK
      0 - ERR
*/
uint8_t check_connectivity_connection(void)
{
   104ce:	1f 93       	push	r17
   104d0:	cf 93       	push	r28
   104d2:	df 93       	push	r29
   104d4:	cd b7       	in	r28, 0x3d	; 61
   104d6:	de b7       	in	r29, 0x3e	; 62
   104d8:	60 97       	sbiw	r28, 0x10	; 16
   104da:	0f b6       	in	r0, 0x3f	; 63
   104dc:	f8 94       	cli
   104de:	de bf       	out	0x3e, r29	; 62
   104e0:	0f be       	out	0x3f, r0	; 63
   104e2:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5705
  char server[16];
  uint8_t ret = 0;
  strcpy_P(server, seznam_server);
   104e4:	60 e3       	ldi	r22, 0x30	; 48
   104e6:	78 e5       	ldi	r23, 0x58	; 88
   104e8:	ce 01       	movw	r24, r28
   104ea:	01 96       	adiw	r24, 0x01	; 1
   104ec:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5706
  if (!ethClient1.connected())
   104f0:	81 e4       	ldi	r24, 0x41	; 65
   104f2:	90 e1       	ldi	r25, 0x10	; 16
   104f4:	0e 94 67 b5 	call	0x16ace	; 0x16ace <EthernetClient::connected()>
   104f8:	18 2f       	mov	r17, r24
   104fa:	81 11       	cpse	r24, r1
   104fc:	2e c0       	rjmp	.+92     	; 0x1055a <check_connectivity_connection()+0x8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5708
  {
    if (ethClient1.connect(server, 80))
   104fe:	40 e5       	ldi	r20, 0x50	; 80
   10500:	50 e0       	ldi	r21, 0x00	; 0
   10502:	be 01       	movw	r22, r28
   10504:	6f 5f       	subi	r22, 0xFF	; 255
   10506:	7f 4f       	sbci	r23, 0xFF	; 255
   10508:	81 e4       	ldi	r24, 0x41	; 65
   1050a:	90 e1       	ldi	r25, 0x10	; 16
   1050c:	0e 94 c7 b3 	call	0x1678e	; 0x1678e <EthernetClient::connect(char const*, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5710
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   10510:	70 e0       	ldi	r23, 0x00	; 0
   10512:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5708
  char server[16];
  uint8_t ret = 0;
  strcpy_P(server, seznam_server);
  if (!ethClient1.connected())
  {
    if (ethClient1.connect(server, 80))
   10514:	89 2b       	or	r24, r25
   10516:	b1 f0       	breq	.+44     	; 0x10544 <check_connectivity_connection()+0x76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5710
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   10518:	88 e6       	ldi	r24, 0x68	; 104
   1051a:	90 e0       	ldi	r25, 0x00	; 0
   1051c:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5711
      strcpy_P(dialog_text, new_text_ok_connect_seznam);
   10520:	6d ee       	ldi	r22, 0xED	; 237
   10522:	75 e5       	ldi	r23, 0x55	; 85
   10524:	8d e0       	ldi	r24, 0x0D	; 13
   10526:	9a e0       	ldi	r25, 0x0A	; 10
   10528:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   1052c:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5722
      strcpy_P(dialog_text, new_text_err_connect_seznam);
      ret = 0;
    }
  }
  return ret;
}
   1052e:	81 2f       	mov	r24, r17
   10530:	60 96       	adiw	r28, 0x10	; 16
   10532:	0f b6       	in	r0, 0x3f	; 63
   10534:	f8 94       	cli
   10536:	de bf       	out	0x3e, r29	; 62
   10538:	0f be       	out	0x3f, r0	; 63
   1053a:	cd bf       	out	0x3d, r28	; 61
   1053c:	df 91       	pop	r29
   1053e:	cf 91       	pop	r28
   10540:	1f 91       	pop	r17
   10542:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5716
      strcpy_P(dialog_text, new_text_ok_connect_seznam);
      ret = 1;
    }
    else
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   10544:	88 e6       	ldi	r24, 0x68	; 104
   10546:	90 e0       	ldi	r25, 0x00	; 0
   10548:	0e 94 9a 3a 	call	0x7534	; 0x7534 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5717
      strcpy_P(dialog_text, new_text_err_connect_seznam);
   1054c:	6b ed       	ldi	r22, 0xDB	; 219
   1054e:	75 e5       	ldi	r23, 0x55	; 85
   10550:	8d e0       	ldi	r24, 0x0D	; 13
   10552:	9a e0       	ldi	r25, 0x0A	; 10
   10554:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   10558:	ea cf       	rjmp	.-44     	; 0x1052e <check_connectivity_connection()+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5704
      0 - ERR
*/
uint8_t check_connectivity_connection(void)
{
  char server[16];
  uint8_t ret = 0;
   1055a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5721
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
      strcpy_P(dialog_text, new_text_err_connect_seznam);
      ret = 0;
    }
  }
  return ret;
   1055c:	e8 cf       	rjmp	.-48     	; 0x1052e <check_connectivity_connection()+0x60>

0001055e <button_set_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)>:
_Z42button_set_network_test_connection_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5691
/*
   Obsluha tlacitka kontrola konektivity
*/
void button_set_network_test_connection_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  check_connectivity_connection();
   1055e:	0c 94 67 82 	jmp	0x104ce	; 0x104ce <check_connectivity_connection()>

00010562 <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
   10562:	cf 93       	push	r28
   10564:	c8 2f       	mov	r28, r24
_ZN14HardwareSerial5writeEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   10566:	68 2f       	mov	r22, r24
   10568:	8c e1       	ldi	r24, 0x1C	; 28
   1056a:	94 e1       	ldi	r25, 0x14	; 20
   1056c:	0e 94 21 d9 	call	0x1b242	; 0x1b242 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
   10570:	8c 2f       	mov	r24, r28
   10572:	cc 0f       	add	r28, r28
   10574:	99 0b       	sbc	r25, r25
   10576:	cf 91       	pop	r28
   10578:	08 95       	ret

0001057a <loop>:
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4042


/************************************************************************************/
/////////////////////////////////////////////////////////////////////////////////////
/// Hlavni programova smycka ///
void loop() {
   1057a:	8f 92       	push	r8
   1057c:	9f 92       	push	r9
   1057e:	af 92       	push	r10
   10580:	bf 92       	push	r11
   10582:	cf 92       	push	r12
   10584:	df 92       	push	r13
   10586:	ef 92       	push	r14
   10588:	ff 92       	push	r15
   1058a:	0f 93       	push	r16
   1058c:	1f 93       	push	r17
   1058e:	cf 93       	push	r28
   10590:	df 93       	push	r29
   10592:	cd b7       	in	r28, 0x3d	; 61
   10594:	de b7       	in	r29, 0x3e	; 62
   10596:	64 97       	sbiw	r28, 0x14	; 20
   10598:	0f b6       	in	r0, 0x3f	; 63
   1059a:	f8 94       	cli
   1059c:	de bf       	out	0x3e, r29	; 62
   1059e:	0f be       	out	0x3f, r0	; 63
   105a0:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4049
  char str1[16];
  unsigned long load_now;
  long mil;


  load_now = millis();
   105a2:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   105a6:	6b 01       	movw	r12, r22
   105a8:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4050
  if (mqtt_reconnect() == 0)
   105aa:	0e 94 b8 49 	call	0x9370	; 0x9370 <mqtt_reconnect()>
   105ae:	81 11       	cpse	r24, r1
   105b0:	28 c0       	rjmp	.+80     	; 0x10602 <loop+0x88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4051
    selftest_clear_0(SELFTEST_MQTT_LINK);
   105b2:	85 e0       	ldi	r24, 0x05	; 5
   105b4:	0e 94 ae 4e 	call	0x9d5c	; 0x9d5c <selftest_clear_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4055
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
   105b8:	89 e0       	ldi	r24, 0x09	; 9
   105ba:	9e e0       	ldi	r25, 0x0E	; 14
   105bc:	0e 94 45 c5 	call	0x18a8a	; 0x18a8a <PubSubClient::loop()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4058


  if (ethClient1.connected())
   105c0:	81 e4       	ldi	r24, 0x41	; 65
   105c2:	90 e1       	ldi	r25, 0x10	; 16
   105c4:	0e 94 67 b5 	call	0x16ace	; 0x16ace <EthernetClient::connected()>
   105c8:	88 23       	and	r24, r24
   105ca:	21 f0       	breq	.+8      	; 0x105d4 <loop+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4059
    ethClient1.stop();
   105cc:	81 e4       	ldi	r24, 0x41	; 65
   105ce:	90 e1       	ldi	r25, 0x10	; 16
   105d0:	0e 94 27 b5 	call	0x16a4e	; 0x16a4e <EthernetClient::stop()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4061

  EthernetClient http_client = http_server.available();
   105d4:	63 e0       	ldi	r22, 0x03	; 3
   105d6:	7e e0       	ldi	r23, 0x0E	; 14
   105d8:	ce 01       	movw	r24, r28
   105da:	01 96       	adiw	r24, 0x01	; 1
   105dc:	0e 94 b0 b6 	call	0x16d60	; 0x16d60 <EthernetServer::available()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4062
  if (http_client.connected())
   105e0:	ce 01       	movw	r24, r28
   105e2:	01 96       	adiw	r24, 0x01	; 1
   105e4:	0e 94 67 b5 	call	0x16ace	; 0x16ace <EthernetClient::connected()>
   105e8:	88 23       	and	r24, r24
   105ea:	b9 f0       	breq	.+46     	; 0x1061a <loop+0xa0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
  {
    while (http_client.available())
   105ec:	ce 01       	movw	r24, r28
   105ee:	01 96       	adiw	r24, 0x01	; 1
   105f0:	0e 94 41 b4 	call	0x16882	; 0x16882 <EthernetClient::available()>
   105f4:	89 2b       	or	r24, r25
   105f6:	49 f0       	breq	.+18     	; 0x1060a <loop+0x90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4065
      http_client.read();
   105f8:	ce 01       	movw	r24, r28
   105fa:	01 96       	adiw	r24, 0x01	; 1
   105fc:	0e 94 4c b4 	call	0x16898	; 0x16898 <EthernetClient::read()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
    ethClient1.stop();

  EthernetClient http_client = http_server.available();
  if (http_client.connected())
  {
    while (http_client.available())
   10600:	f5 cf       	rjmp	.-22     	; 0x105ec <loop+0x72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4053

  load_now = millis();
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);
   10602:	85 e0       	ldi	r24, 0x05	; 5
   10604:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <selftest_set_0(unsigned char)>
   10608:	d7 cf       	rjmp	.-82     	; 0x105b8 <loop+0x3e>
_ZN5Print5writeEPKc():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   1060a:	44 e0       	ldi	r20, 0x04	; 4
   1060c:	50 e0       	ldi	r21, 0x00	; 0
   1060e:	6a e2       	ldi	r22, 0x2A	; 42
   10610:	78 e0       	ldi	r23, 0x08	; 8
   10612:	ce 01       	movw	r24, r28
   10614:	01 96       	adiw	r24, 0x01	; 1
   10616:	0e 94 25 b4 	call	0x1684a	; 0x1684a <EthernetClient::write(unsigned char const*, unsigned int)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4070
      http_client.read();
    http_client.write("ahoj");
  }


  if (draw_menu(false) == true)
   1061a:	80 e0       	ldi	r24, 0x00	; 0
   1061c:	0e 94 b3 57 	call	0xaf66	; 0xaf66 <draw_menu(bool)>
   10620:	88 23       	and	r24, r24
   10622:	19 f0       	breq	.+6      	; 0x1062a <loop+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4071
    draw_menu(true);
   10624:	81 e0       	ldi	r24, 0x01	; 1
   10626:	0e 94 b3 57 	call	0xaf66	; 0xaf66 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4075



  if (scan_rf_net_enable == 2)
   1062a:	80 91 56 11 	lds	r24, 0x1156	; 0x801156 <scan_rf_net_enable>
   1062e:	82 30       	cpi	r24, 0x02	; 2
   10630:	31 f4       	brne	.+12     	; 0x1063e <loop+0xc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4077
  {
    scan_rf_net_enable = 0;
   10632:	10 92 56 11 	sts	0x1156, r1	; 0x801156 <scan_rf_net_enable>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4078
    radio.printDetails();
   10636:	8b ee       	ldi	r24, 0xEB	; 235
   10638:	9d e0       	ldi	r25, 0x0D	; 13
   1063a:	0e 94 16 cb 	call	0x1962c	; 0x1962c <RF24::printDetails()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4084
  }


  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) >= 10000)
   1063e:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   10642:	00 91 9f 0a 	lds	r16, 0x0A9F	; 0x800a9f <milis_10s>
   10646:	10 91 a0 0a 	lds	r17, 0x0AA0	; 0x800aa0 <milis_10s+0x1>
   1064a:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <milis_10s+0x2>
   1064e:	30 91 a2 0a 	lds	r19, 0x0AA2	; 0x800aa2 <milis_10s+0x3>
   10652:	ab 01       	movw	r20, r22
   10654:	bc 01       	movw	r22, r24
   10656:	40 1b       	sub	r20, r16
   10658:	51 0b       	sbc	r21, r17
   1065a:	62 0b       	sbc	r22, r18
   1065c:	73 0b       	sbc	r23, r19
   1065e:	40 31       	cpi	r20, 0x10	; 16
   10660:	57 42       	sbci	r21, 0x27	; 39
   10662:	61 05       	cpc	r22, r1
   10664:	71 05       	cpc	r23, r1
   10666:	08 f4       	brcc	.+2      	; 0x1066a <loop+0xf0>
   10668:	7a c0       	rjmp	.+244    	; 0x1075e <loop+0x1e4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4086
  {
    milis_10s += 10000;
   1066a:	d9 01       	movw	r26, r18
   1066c:	c8 01       	movw	r24, r16
   1066e:	80 5f       	subi	r24, 0xF0	; 240
   10670:	98 4d       	sbci	r25, 0xD8	; 216
   10672:	af 4f       	sbci	r26, 0xFF	; 255
   10674:	bf 4f       	sbci	r27, 0xFF	; 255
   10676:	80 93 9f 0a 	sts	0x0A9F, r24	; 0x800a9f <milis_10s>
   1067a:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <milis_10s+0x1>
   1067e:	a0 93 a1 0a 	sts	0x0AA1, r26	; 0x800aa1 <milis_10s+0x2>
   10682:	b0 93 a2 0a 	sts	0x0AA2, r27	; 0x800aa2 <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4087
    menu_redraw10s = 1;
   10686:	81 e0       	ldi	r24, 0x01	; 1
   10688:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <menu_redraw10s>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4089
    //device_get_name(str1);
    send_mqtt_onewire();
   1068c:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <send_mqtt_onewire()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4090
    send_mqtt_status(&mqtt_client);
   10690:	89 e0       	ldi	r24, 0x09	; 9
   10692:	9e e0       	ldi	r25, 0x0E	; 14
   10694:	0e 94 b9 89 	call	0x11372	; 0x11372 <send_mqtt_status(PubSubClient*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4091
    send_device_status();
   10698:	0e 94 cd 4e 	call	0x9d9a	; 0x9d9a <send_device_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4092
    send_mqtt_ring();
   1069c:	0e 94 a7 51 	call	0xa34e	; 0xa34e <send_mqtt_ring()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4093
    send_mqtt_tds();
   106a0:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <send_mqtt_tds()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4094
    send_mqtt_program();
   106a4:	0e 94 02 4c 	call	0x9804	; 0x9804 <send_mqtt_program()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4095
    thermostat();
   106a8:	0e 94 90 52 	call	0xa520	; 0xa520 <thermostat()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4096
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   106ac:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4097
      if (thermostat_ring_get_active(idx) != RING_FREE)
   106ae:	81 2f       	mov	r24, r17
   106b0:	0e 94 ae 91 	call	0x1235c	; 0x1235c <thermostat_ring_get_active(unsigned char)>
   106b4:	8f 3f       	cpi	r24, 0xFF	; 255
   106b6:	19 f0       	breq	.+6      	; 0x106be <loop+0x144>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4098
        mqtt_send_pid_variable(idx);
   106b8:	81 2f       	mov	r24, r17
   106ba:	0e 94 1d 4d 	call	0x9a3a	; 0x9a3a <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4096 (discriminator 2)
    send_device_status();
    send_mqtt_ring();
    send_mqtt_tds();
    send_mqtt_program();
    thermostat();
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   106be:	1f 5f       	subi	r17, 0xFF	; 255
   106c0:	15 30       	cpi	r17, 0x05	; 5
   106c2:	a9 f7       	brne	.-22     	; 0x106ae <loop+0x134>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4099
      if (thermostat_ring_get_active(idx) != RING_FREE)
        mqtt_send_pid_variable(idx);
    send_mqtt_remote_tds_status();
   106c4:	0e 94 7a 4d 	call	0x9af4	; 0x9af4 <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4105
    //send_network_config(&mqtt_client);
    //send_light_controler();
    //send_know_device();
    //send_mesh_status();
    ///
    internal_temp = lm75_temp.readTemperatureC();
   106c8:	84 e5       	ldi	r24, 0x54	; 84
   106ca:	9c e0       	ldi	r25, 0x0C	; 12
   106cc:	0e 94 ce 38 	call	0x719c	; 0x719c <Temperature_LM75_Derived::readTemperatureC()>
   106d0:	60 93 82 0a 	sts	0x0A82, r22	; 0x800a82 <internal_temp>
   106d4:	70 93 83 0a 	sts	0x0A83, r23	; 0x800a83 <internal_temp+0x1>
   106d8:	80 93 84 0a 	sts	0x0A84, r24	; 0x800a84 <internal_temp+0x2>
   106dc:	90 93 85 0a 	sts	0x0A85, r25	; 0x800a85 <internal_temp+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4107
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
   106e0:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <brigthness_display_mode>
   106e4:	87 ff       	sbrs	r24, 7
   106e6:	3b c0       	rjmp	.+118    	; 0x1075e <loop+0x1e4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4109
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
   106e8:	00 91 93 0a 	lds	r16, 0x0A93	; 0x800a93 <light_max>
   106ec:	10 91 94 0a 	lds	r17, 0x0A94	; 0x800a94 <light_max+0x1>
   106f0:	60 91 b4 0a 	lds	r22, 0x0AB4	; 0x800ab4 <light_curr>
   106f4:	70 91 b5 0a 	lds	r23, 0x0AB5	; 0x800ab5 <light_curr+0x1>
   106f8:	60 1b       	sub	r22, r16
   106fa:	71 0b       	sbc	r23, r17
   106fc:	90 e0       	ldi	r25, 0x00	; 0
   106fe:	80 e0       	ldi	r24, 0x00	; 0
   10700:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
   10704:	4b 01       	movw	r8, r22
   10706:	5c 01       	movw	r10, r24
   10708:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <light_min>
   1070c:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <light_min+0x1>
   10710:	08 1b       	sub	r16, r24
   10712:	19 0b       	sbc	r17, r25
   10714:	b8 01       	movw	r22, r16
   10716:	90 e0       	ldi	r25, 0x00	; 0
   10718:	80 e0       	ldi	r24, 0x00	; 0
   1071a:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
   1071e:	9b 01       	movw	r18, r22
   10720:	ac 01       	movw	r20, r24
   10722:	c5 01       	movw	r24, r10
   10724:	b4 01       	movw	r22, r8
   10726:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
   1072a:	20 e0       	ldi	r18, 0x00	; 0
   1072c:	30 e0       	ldi	r19, 0x00	; 0
   1072e:	48 e4       	ldi	r20, 0x48	; 72
   10730:	53 e4       	ldi	r21, 0x43	; 67
   10732:	0e 94 7d dd 	call	0x1bafa	; 0x1bafa <__mulsf3>
   10736:	0e 94 97 dc 	call	0x1b92e	; 0x1b92e <__fixunssfsi>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4110
      if (brigthness_display_auto_values > 200)
   1073a:	69 3c       	cpi	r22, 0xC9	; 201
   1073c:	08 f0       	brcs	.+2      	; 0x10740 <loop+0x1c6>
   1073e:	1f c1       	rjmp	.+574    	; 0x1097e <loop+0x404>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4109
    ///
    internal_temp = lm75_temp.readTemperatureC();
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
   10740:	60 93 91 0a 	sts	0x0A91, r22	; 0x800a91 <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4112
      if (brigthness_display_auto_values > 200)
        brigthness_display_auto_values = 200;
      if (brigthness_display_auto_values < 5)
   10744:	80 91 91 0a 	lds	r24, 0x0A91	; 0x800a91 <brigthness_display_auto_values>
   10748:	85 30       	cpi	r24, 0x05	; 5
   1074a:	18 f4       	brcc	.+6      	; 0x10752 <loop+0x1d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4113
        brigthness_display_auto_values = 5;
   1074c:	85 e0       	ldi	r24, 0x05	; 5
   1074e:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4114
      my_touch.TP_SetBacklight(brigthness_display_auto_values);
   10752:	60 91 91 0a 	lds	r22, 0x0A91	; 0x800a91 <brigthness_display_auto_values>
   10756:	83 ef       	ldi	r24, 0xF3	; 243
   10758:	9b e0       	ldi	r25, 0x0B	; 11
   1075a:	0e 94 b6 a9 	call	0x1536c	; 0x1536c <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4119
    }

  }

  if ((millis() - milis_1s) >= 1000)
   1075e:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   10762:	00 91 a3 0a 	lds	r16, 0x0AA3	; 0x800aa3 <milis_1s>
   10766:	10 91 a4 0a 	lds	r17, 0x0AA4	; 0x800aa4 <milis_1s+0x1>
   1076a:	20 91 a5 0a 	lds	r18, 0x0AA5	; 0x800aa5 <milis_1s+0x2>
   1076e:	30 91 a6 0a 	lds	r19, 0x0AA6	; 0x800aa6 <milis_1s+0x3>
   10772:	ab 01       	movw	r20, r22
   10774:	bc 01       	movw	r22, r24
   10776:	40 1b       	sub	r20, r16
   10778:	51 0b       	sbc	r21, r17
   1077a:	62 0b       	sbc	r22, r18
   1077c:	73 0b       	sbc	r23, r19
   1077e:	48 3e       	cpi	r20, 0xE8	; 232
   10780:	53 40       	sbci	r21, 0x03	; 3
   10782:	61 05       	cpc	r22, r1
   10784:	71 05       	cpc	r23, r1
   10786:	38 f1       	brcs	.+78     	; 0x107d6 <loop+0x25c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4121
  {
    milis_1s += 1000;
   10788:	d9 01       	movw	r26, r18
   1078a:	c8 01       	movw	r24, r16
   1078c:	88 51       	subi	r24, 0x18	; 24
   1078e:	9c 4f       	sbci	r25, 0xFC	; 252
   10790:	af 4f       	sbci	r26, 0xFF	; 255
   10792:	bf 4f       	sbci	r27, 0xFF	; 255
   10794:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <milis_1s>
   10798:	90 93 a4 0a 	sts	0x0AA4, r25	; 0x800aa4 <milis_1s+0x1>
   1079c:	a0 93 a5 0a 	sts	0x0AA5, r26	; 0x800aa5 <milis_1s+0x2>
   107a0:	b0 93 a6 0a 	sts	0x0AA6, r27	; 0x800aa6 <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4122
    uptime++;
   107a4:	80 91 af 0a 	lds	r24, 0x0AAF	; 0x800aaf <uptime>
   107a8:	90 91 b0 0a 	lds	r25, 0x0AB0	; 0x800ab0 <uptime+0x1>
   107ac:	a0 91 b1 0a 	lds	r26, 0x0AB1	; 0x800ab1 <uptime+0x2>
   107b0:	b0 91 b2 0a 	lds	r27, 0x0AB2	; 0x800ab2 <uptime+0x3>
   107b4:	01 96       	adiw	r24, 0x01	; 1
   107b6:	a1 1d       	adc	r26, r1
   107b8:	b1 1d       	adc	r27, r1
   107ba:	80 93 af 0a 	sts	0x0AAF, r24	; 0x800aaf <uptime>
   107be:	90 93 b0 0a 	sts	0x0AB0, r25	; 0x800ab0 <uptime+0x1>
   107c2:	a0 93 b1 0a 	sts	0x0AB1, r26	; 0x800ab1 <uptime+0x2>
   107c6:	b0 93 b2 0a 	sts	0x0AB2, r27	; 0x800ab2 <uptime+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4123
    mereni_hwwire(uptime);
   107ca:	0e 94 38 8f 	call	0x11e70	; 0x11e70 <mereni_hwwire(unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4124
    tds_extended_memory_store();
   107ce:	0e 94 99 49 	call	0x9332	; 0x9332 <tds_extended_memory_store()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4125
    remote_tds_update_last_update();
   107d2:	0e 94 67 49 	call	0x92ce	; 0x92ce <remote_tds_update_last_update()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4129
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) >= 500)
   107d6:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   107da:	00 91 a7 0a 	lds	r16, 0x0AA7	; 0x800aa7 <milis_05s>
   107de:	10 91 a8 0a 	lds	r17, 0x0AA8	; 0x800aa8 <milis_05s+0x1>
   107e2:	20 91 a9 0a 	lds	r18, 0x0AA9	; 0x800aa9 <milis_05s+0x2>
   107e6:	30 91 aa 0a 	lds	r19, 0x0AAA	; 0x800aaa <milis_05s+0x3>
   107ea:	ab 01       	movw	r20, r22
   107ec:	bc 01       	movw	r22, r24
   107ee:	40 1b       	sub	r20, r16
   107f0:	51 0b       	sbc	r21, r17
   107f2:	62 0b       	sbc	r22, r18
   107f4:	73 0b       	sbc	r23, r19
   107f6:	44 3f       	cpi	r20, 0xF4	; 244
   107f8:	51 40       	sbci	r21, 0x01	; 1
   107fa:	61 05       	cpc	r22, r1
   107fc:	71 05       	cpc	r23, r1
   107fe:	40 f1       	brcs	.+80     	; 0x10850 <loop+0x2d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4131
  {
    milis_05s += 500;
   10800:	d9 01       	movw	r26, r18
   10802:	c8 01       	movw	r24, r16
   10804:	8c 50       	subi	r24, 0x0C	; 12
   10806:	9e 4f       	sbci	r25, 0xFE	; 254
   10808:	af 4f       	sbci	r26, 0xFF	; 255
   1080a:	bf 4f       	sbci	r27, 0xFF	; 255
   1080c:	80 93 a7 0a 	sts	0x0AA7, r24	; 0x800aa7 <milis_05s>
   10810:	90 93 a8 0a 	sts	0x0AA8, r25	; 0x800aa8 <milis_05s+0x1>
   10814:	a0 93 a9 0a 	sts	0x0AA9, r26	; 0x800aa9 <milis_05s+0x2>
   10818:	b0 93 aa 0a 	sts	0x0AAA, r27	; 0x800aaa <milis_05s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4132
    now = rtc.now();
   1081c:	ce 01       	movw	r24, r28
   1081e:	0e 96       	adiw	r24, 0x0e	; 14
   10820:	0e 94 3e cd 	call	0x19a7c	; 0x19a7c <RTC_DS1307::now()>
   10824:	87 e0       	ldi	r24, 0x07	; 7
   10826:	fe 01       	movw	r30, r28
   10828:	3e 96       	adiw	r30, 0x0e	; 14
   1082a:	ab e5       	ldi	r26, 0x5B	; 91
   1082c:	b0 e1       	ldi	r27, 0x10	; 16
   1082e:	01 90       	ld	r0, Z+
   10830:	0d 92       	st	X+, r0
   10832:	8a 95       	dec	r24
   10834:	e1 f7       	brne	.-8      	; 0x1082e <loop+0x2b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4133
    selftest();
   10836:	0e 94 bb 4e 	call	0x9d76	; 0x9d76 <selftest()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4134
    menu_redraw05s = 1;
   1083a:	81 e0       	ldi	r24, 0x01	; 1
   1083c:	80 93 e7 09 	sts	0x09E7, r24	; 0x8009e7 <menu_redraw05s>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4136

    use_rtds = count_use_rtds();
   10840:	0e 94 e0 68 	call	0xd1c0	; 0xd1c0 <count_use_rtds()>
   10844:	80 93 8f 0a 	sts	0x0A8F, r24	; 0x800a8f <use_rtds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4137
    use_tds = count_use_tds();
   10848:	0e 94 ca 8b 	call	0x11794	; 0x11794 <count_use_tds()>
   1084c:	80 93 8e 0a 	sts	0x0A8E, r24	; 0x800a8e <use_tds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4143
  }



  /// kazdych 50ms
  if ((millis() - milis_005s) >= 50 )
   10850:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   10854:	00 91 ab 0a 	lds	r16, 0x0AAB	; 0x800aab <milis_005s>
   10858:	10 91 ac 0a 	lds	r17, 0x0AAC	; 0x800aac <milis_005s+0x1>
   1085c:	20 91 ad 0a 	lds	r18, 0x0AAD	; 0x800aad <milis_005s+0x2>
   10860:	30 91 ae 0a 	lds	r19, 0x0AAE	; 0x800aae <milis_005s+0x3>
   10864:	ab 01       	movw	r20, r22
   10866:	bc 01       	movw	r22, r24
   10868:	40 1b       	sub	r20, r16
   1086a:	51 0b       	sbc	r21, r17
   1086c:	62 0b       	sbc	r22, r18
   1086e:	73 0b       	sbc	r23, r19
   10870:	42 33       	cpi	r20, 0x32	; 50
   10872:	51 05       	cpc	r21, r1
   10874:	61 05       	cpc	r22, r1
   10876:	71 05       	cpc	r23, r1
   10878:	d8 f0       	brcs	.+54     	; 0x108b0 <loop+0x336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4145
  {
    milis_005s += 50;
   1087a:	d9 01       	movw	r26, r18
   1087c:	c8 01       	movw	r24, r16
   1087e:	c2 96       	adiw	r24, 0x32	; 50
   10880:	a1 1d       	adc	r26, r1
   10882:	b1 1d       	adc	r27, r1
   10884:	80 93 ab 0a 	sts	0x0AAB, r24	; 0x800aab <milis_005s>
   10888:	90 93 ac 0a 	sts	0x0AAC, r25	; 0x800aac <milis_005s+0x1>
   1088c:	a0 93 ad 0a 	sts	0x0AAD, r26	; 0x800aad <milis_005s+0x2>
   10890:	b0 93 ae 0a 	sts	0x0AAE, r27	; 0x800aae <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4148

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   10894:	10 91 b3 0a 	lds	r17, 0x0AB3	; 0x800ab3 <a2d_run_now>
   10898:	11 30       	cpi	r17, 0x01	; 1
   1089a:	51 f4       	brne	.+20     	; 0x108b0 <loop+0x336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4150
    {
      a2d_start_process();
   1089c:	0e 94 26 d6 	call	0x1ac4c	; 0x1ac4c <a2d_start_process()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4151
      a2d_run_now = 0;
   108a0:	10 92 b3 0a 	sts	0x0AB3, r1	; 0x800ab3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4152
      if (a2d_done() == 0) a2d_run_now = 1;
   108a4:	0e 94 46 d6 	call	0x1ac8c	; 0x1ac8c <a2d_done()>
   108a8:	81 11       	cpse	r24, r1
   108aa:	02 c0       	rjmp	.+4      	; 0x108b0 <loop+0x336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4152 (discriminator 1)
   108ac:	10 93 b3 0a 	sts	0x0AB3, r17	; 0x800ab3 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4156
    }
  }

  load = millis() - load_now;
   108b0:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   108b4:	dc 01       	movw	r26, r24
   108b6:	cb 01       	movw	r24, r22
   108b8:	8c 19       	sub	r24, r12
   108ba:	9d 09       	sbc	r25, r13
   108bc:	ae 09       	sbc	r26, r14
   108be:	bf 09       	sbc	r27, r15
   108c0:	80 93 99 0a 	sts	0x0A99, r24	; 0x800a99 <load>
   108c4:	90 93 9a 0a 	sts	0x0A9A, r25	; 0x800a9a <load+0x1>
   108c8:	a0 93 9b 0a 	sts	0x0A9B, r26	; 0x800a9b <load+0x2>
   108cc:	b0 93 9c 0a 	sts	0x0A9C, r27	; 0x800a9c <load+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4157
  if (load < load_min) load_min = load;
   108d0:	00 91 38 02 	lds	r16, 0x0238	; 0x800238 <load_min>
   108d4:	10 91 39 02 	lds	r17, 0x0239	; 0x800239 <load_min+0x1>
   108d8:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <load_min+0x2>
   108dc:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <load_min+0x3>
   108e0:	80 17       	cp	r24, r16
   108e2:	91 07       	cpc	r25, r17
   108e4:	a2 07       	cpc	r26, r18
   108e6:	b3 07       	cpc	r27, r19
   108e8:	44 f4       	brge	.+16     	; 0x108fa <loop+0x380>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4157 (discriminator 1)
   108ea:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <load_min>
   108ee:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <load_min+0x1>
   108f2:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <load_min+0x2>
   108f6:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4158
  if (load > load_max) load_max = load;
   108fa:	00 91 95 0a 	lds	r16, 0x0A95	; 0x800a95 <load_max>
   108fe:	10 91 96 0a 	lds	r17, 0x0A96	; 0x800a96 <load_max+0x1>
   10902:	20 91 97 0a 	lds	r18, 0x0A97	; 0x800a97 <load_max+0x2>
   10906:	30 91 98 0a 	lds	r19, 0x0A98	; 0x800a98 <load_max+0x3>
   1090a:	08 17       	cp	r16, r24
   1090c:	19 07       	cpc	r17, r25
   1090e:	2a 07       	cpc	r18, r26
   10910:	3b 07       	cpc	r19, r27
   10912:	44 f4       	brge	.+16     	; 0x10924 <loop+0x3aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4158 (discriminator 1)
   10914:	80 93 95 0a 	sts	0x0A95, r24	; 0x800a95 <load_max>
   10918:	90 93 96 0a 	sts	0x0A96, r25	; 0x800a96 <load_max+0x1>
   1091c:	a0 93 97 0a 	sts	0x0A97, r26	; 0x800a97 <load_max+0x2>
   10920:	b0 93 98 0a 	sts	0x0A98, r27	; 0x800a98 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4161

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   10924:	80 91 b4 0a 	lds	r24, 0x0AB4	; 0x800ab4 <light_curr>
   10928:	90 91 b5 0a 	lds	r25, 0x0AB5	; 0x800ab5 <light_curr+0x1>
   1092c:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <light_min>
   10930:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <light_min+0x1>
   10934:	82 17       	cp	r24, r18
   10936:	93 07       	cpc	r25, r19
   10938:	20 f4       	brcc	.+8      	; 0x10942 <loop+0x3c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4161 (discriminator 1)
   1093a:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <light_min+0x1>
   1093e:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4162
  if (light_curr > light_max) light_max = light_curr;
   10942:	20 91 93 0a 	lds	r18, 0x0A93	; 0x800a93 <light_max>
   10946:	30 91 94 0a 	lds	r19, 0x0A94	; 0x800a94 <light_max+0x1>
   1094a:	28 17       	cp	r18, r24
   1094c:	39 07       	cpc	r19, r25
   1094e:	20 f4       	brcc	.+8      	; 0x10958 <loop+0x3de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4162 (discriminator 1)
   10950:	90 93 94 0a 	sts	0x0A94, r25	; 0x800a94 <light_max+0x1>
   10954:	80 93 93 0a 	sts	0x0A93, r24	; 0x800a93 <light_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4163
}
   10958:	64 96       	adiw	r28, 0x14	; 20
   1095a:	0f b6       	in	r0, 0x3f	; 63
   1095c:	f8 94       	cli
   1095e:	de bf       	out	0x3e, r29	; 62
   10960:	0f be       	out	0x3f, r0	; 63
   10962:	cd bf       	out	0x3d, r28	; 61
   10964:	df 91       	pop	r29
   10966:	cf 91       	pop	r28
   10968:	1f 91       	pop	r17
   1096a:	0f 91       	pop	r16
   1096c:	ff 90       	pop	r15
   1096e:	ef 90       	pop	r14
   10970:	df 90       	pop	r13
   10972:	cf 90       	pop	r12
   10974:	bf 90       	pop	r11
   10976:	af 90       	pop	r10
   10978:	9f 90       	pop	r9
   1097a:	8f 90       	pop	r8
   1097c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4111
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
      if (brigthness_display_auto_values > 200)
        brigthness_display_auto_values = 200;
   1097e:	88 ec       	ldi	r24, 0xC8	; 200
   10980:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <brigthness_display_auto_values>
   10984:	df ce       	rjmp	.-578    	; 0x10744 <loop+0x1ca>

00010986 <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:466
}

PubSubClient * mqtt_get_public_mqtt_client(void)
{
  return pub_mqtt_client;
}
   10986:	0c 94 19 ea 	jmp	0x1d432	; 0x1d432 <eeprom_read_byte>

0001098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   1098a:	0c 94 21 ea 	jmp	0x1d442	; 0x1d442 <eeprom_write_byte>

0001098e <load_setup_network()>:
_Z18load_setup_networkv():
   1098e:	ef 92       	push	r14
   10990:	ff 92       	push	r15
   10992:	0f 93       	push	r16
   10994:	1f 93       	push	r17
   10996:	cf 93       	push	r28
   10998:	df 93       	push	r29
   1099a:	0c ef       	ldi	r16, 0xFC	; 252
   1099c:	10 e1       	ldi	r17, 0x10	; 16
   1099e:	ce e6       	ldi	r28, 0x6E	; 110
   109a0:	d0 e0       	ldi	r29, 0x00	; 0
   109a2:	ce 01       	movw	r24, r28
   109a4:	0e 94 c3 84 	call	0x10986	; 0x10986 <EEPROMClass::read(int) [clone .isra.0]>
   109a8:	f8 01       	movw	r30, r16
   109aa:	81 93       	st	Z+, r24
   109ac:	8f 01       	movw	r16, r30
   109ae:	21 96       	adiw	r28, 0x01	; 1
   109b0:	c4 37       	cpi	r28, 0x74	; 116
   109b2:	d1 05       	cpc	r29, r1
   109b4:	b1 f7       	brne	.-20     	; 0x109a2 <load_setup_network()+0x14>
   109b6:	02 e0       	ldi	r16, 0x02	; 2
   109b8:	11 e1       	ldi	r17, 0x11	; 17
   109ba:	ce 01       	movw	r24, r28
   109bc:	0e 94 c3 84 	call	0x10986	; 0x10986 <EEPROMClass::read(int) [clone .isra.0]>
   109c0:	f8 01       	movw	r30, r16
   109c2:	81 93       	st	Z+, r24
   109c4:	8f 01       	movw	r16, r30
   109c6:	21 96       	adiw	r28, 0x01	; 1
   109c8:	c8 37       	cpi	r28, 0x78	; 120
   109ca:	d1 05       	cpc	r29, r1
   109cc:	b1 f7       	brne	.-20     	; 0x109ba <load_setup_network()+0x2c>
   109ce:	06 e0       	ldi	r16, 0x06	; 6
   109d0:	11 e1       	ldi	r17, 0x11	; 17
   109d2:	ce 01       	movw	r24, r28
   109d4:	0e 94 c3 84 	call	0x10986	; 0x10986 <EEPROMClass::read(int) [clone .isra.0]>
   109d8:	f8 01       	movw	r30, r16
   109da:	81 93       	st	Z+, r24
   109dc:	8f 01       	movw	r16, r30
   109de:	21 96       	adiw	r28, 0x01	; 1
   109e0:	cc 37       	cpi	r28, 0x7C	; 124
   109e2:	d1 05       	cpc	r29, r1
   109e4:	b1 f7       	brne	.-20     	; 0x109d2 <load_setup_network()+0x44>
   109e6:	4e e0       	ldi	r20, 0x0E	; 14
   109e8:	e4 2e       	mov	r14, r20
   109ea:	41 e1       	ldi	r20, 0x11	; 17
   109ec:	f4 2e       	mov	r15, r20
   109ee:	00 e8       	ldi	r16, 0x80	; 128
   109f0:	10 e0       	ldi	r17, 0x00	; 0
   109f2:	c8 01       	movw	r24, r16
   109f4:	0e 94 c3 84 	call	0x10986	; 0x10986 <EEPROMClass::read(int) [clone .isra.0]>
   109f8:	f7 01       	movw	r30, r14
   109fa:	81 93       	st	Z+, r24
   109fc:	7f 01       	movw	r14, r30
   109fe:	0f 5f       	subi	r16, 0xFF	; 255
   10a00:	1f 4f       	sbci	r17, 0xFF	; 255
   10a02:	04 38       	cpi	r16, 0x84	; 132
   10a04:	11 05       	cpc	r17, r1
   10a06:	a9 f7       	brne	.-22     	; 0x109f2 <load_setup_network()+0x64>
   10a08:	3a e0       	ldi	r19, 0x0A	; 10
   10a0a:	e3 2e       	mov	r14, r19
   10a0c:	31 e1       	ldi	r19, 0x11	; 17
   10a0e:	f3 2e       	mov	r15, r19
   10a10:	ce 01       	movw	r24, r28
   10a12:	0e 94 c3 84 	call	0x10986	; 0x10986 <EEPROMClass::read(int) [clone .isra.0]>
   10a16:	f7 01       	movw	r30, r14
   10a18:	81 93       	st	Z+, r24
   10a1a:	7f 01       	movw	r14, r30
   10a1c:	21 96       	adiw	r28, 0x01	; 1
   10a1e:	c0 38       	cpi	r28, 0x80	; 128
   10a20:	d1 05       	cpc	r29, r1
   10a22:	b1 f7       	brne	.-20     	; 0x10a10 <load_setup_network()+0x82>
   10a24:	22 e1       	ldi	r18, 0x12	; 18
   10a26:	e2 2e       	mov	r14, r18
   10a28:	21 e1       	ldi	r18, 0x11	; 17
   10a2a:	f2 2e       	mov	r15, r18
   10a2c:	c4 e6       	ldi	r28, 0x64	; 100
   10a2e:	d0 e0       	ldi	r29, 0x00	; 0
   10a30:	ce 01       	movw	r24, r28
   10a32:	0e 94 c3 84 	call	0x10986	; 0x10986 <EEPROMClass::read(int) [clone .isra.0]>
   10a36:	f7 01       	movw	r30, r14
   10a38:	81 93       	st	Z+, r24
   10a3a:	7f 01       	movw	r14, r30
   10a3c:	21 96       	adiw	r28, 0x01	; 1
   10a3e:	cd 36       	cpi	r28, 0x6D	; 109
   10a40:	d1 05       	cpc	r29, r1
   10a42:	b1 f7       	brne	.-20     	; 0x10a30 <load_setup_network()+0xa2>
   10a44:	cc e1       	ldi	r28, 0x1C	; 28
   10a46:	d1 e1       	ldi	r29, 0x11	; 17
   10a48:	c8 01       	movw	r24, r16
   10a4a:	0e 94 c3 84 	call	0x10986	; 0x10986 <EEPROMClass::read(int) [clone .isra.0]>
   10a4e:	89 93       	st	Y+, r24
   10a50:	0f 5f       	subi	r16, 0xFF	; 255
   10a52:	1f 4f       	sbci	r17, 0xFF	; 255
   10a54:	08 38       	cpi	r16, 0x88	; 136
   10a56:	11 05       	cpc	r17, r1
   10a58:	b9 f7       	brne	.-18     	; 0x10a48 <load_setup_network()+0xba>
   10a5a:	88 e8       	ldi	r24, 0x88	; 136
   10a5c:	90 e0       	ldi	r25, 0x00	; 0
   10a5e:	0e 94 c3 84 	call	0x10986	; 0x10986 <EEPROMClass::read(int) [clone .isra.0]>
   10a62:	c8 2f       	mov	r28, r24
   10a64:	89 e8       	ldi	r24, 0x89	; 137
   10a66:	90 e0       	ldi	r25, 0x00	; 0
   10a68:	0e 94 c3 84 	call	0x10986	; 0x10986 <EEPROMClass::read(int) [clone .isra.0]>
   10a6c:	2c 2f       	mov	r18, r28
   10a6e:	30 e0       	ldi	r19, 0x00	; 0
   10a70:	32 2f       	mov	r19, r18
   10a72:	22 27       	eor	r18, r18
   10a74:	82 0f       	add	r24, r18
   10a76:	93 2f       	mov	r25, r19
   10a78:	91 1d       	adc	r25, r1
   10a7a:	90 93 21 11 	sts	0x1121, r25	; 0x801121 <device+0x25>
   10a7e:	80 93 20 11 	sts	0x1120, r24	; 0x801120 <device+0x24>
   10a82:	02 e2       	ldi	r16, 0x22	; 34
   10a84:	11 e1       	ldi	r17, 0x11	; 17
   10a86:	ca e8       	ldi	r28, 0x8A	; 138
   10a88:	d0 e0       	ldi	r29, 0x00	; 0
   10a8a:	ce 01       	movw	r24, r28
   10a8c:	0e 94 c3 84 	call	0x10986	; 0x10986 <EEPROMClass::read(int) [clone .isra.0]>
   10a90:	f8 01       	movw	r30, r16
   10a92:	81 93       	st	Z+, r24
   10a94:	8f 01       	movw	r16, r30
   10a96:	21 96       	adiw	r28, 0x01	; 1
   10a98:	ce 39       	cpi	r28, 0x9E	; 158
   10a9a:	d1 05       	cpc	r29, r1
   10a9c:	b1 f7       	brne	.-20     	; 0x10a8a <load_setup_network()+0xfc>
   10a9e:	06 e3       	ldi	r16, 0x36	; 54
   10aa0:	11 e1       	ldi	r17, 0x11	; 17
   10aa2:	ce 01       	movw	r24, r28
   10aa4:	0e 94 c3 84 	call	0x10986	; 0x10986 <EEPROMClass::read(int) [clone .isra.0]>
   10aa8:	f8 01       	movw	r30, r16
   10aaa:	81 93       	st	Z+, r24
   10aac:	8f 01       	movw	r16, r30
   10aae:	21 96       	adiw	r28, 0x01	; 1
   10ab0:	c2 3b       	cpi	r28, 0xB2	; 178
   10ab2:	d1 05       	cpc	r29, r1
   10ab4:	b1 f7       	brne	.-20     	; 0x10aa2 <load_setup_network()+0x114>
   10ab6:	0a e4       	ldi	r16, 0x4A	; 74
   10ab8:	11 e1       	ldi	r17, 0x11	; 17
   10aba:	ce 01       	movw	r24, r28
   10abc:	0e 94 c3 84 	call	0x10986	; 0x10986 <EEPROMClass::read(int) [clone .isra.0]>
   10ac0:	f8 01       	movw	r30, r16
   10ac2:	81 93       	st	Z+, r24
   10ac4:	8f 01       	movw	r16, r30
   10ac6:	21 96       	adiw	r28, 0x01	; 1
   10ac8:	c6 3b       	cpi	r28, 0xB6	; 182
   10aca:	d1 05       	cpc	r29, r1
   10acc:	b1 f7       	brne	.-20     	; 0x10aba <load_setup_network()+0x12c>
   10ace:	df 91       	pop	r29
   10ad0:	cf 91       	pop	r28
   10ad2:	1f 91       	pop	r17
   10ad4:	0f 91       	pop	r16
   10ad6:	ff 90       	pop	r15
   10ad8:	ef 90       	pop	r14
   10ada:	08 95       	ret

00010adc <save_setup_network()>:
_Z18save_setup_networkv():
   10adc:	ef 92       	push	r14
   10ade:	ff 92       	push	r15
   10ae0:	0f 93       	push	r16
   10ae2:	1f 93       	push	r17
   10ae4:	cf 93       	push	r28
   10ae6:	df 93       	push	r29
   10ae8:	0c ef       	ldi	r16, 0xFC	; 252
   10aea:	10 e1       	ldi	r17, 0x10	; 16
   10aec:	ce e6       	ldi	r28, 0x6E	; 110
   10aee:	d0 e0       	ldi	r29, 0x00	; 0
   10af0:	f8 01       	movw	r30, r16
   10af2:	61 91       	ld	r22, Z+
   10af4:	8f 01       	movw	r16, r30
   10af6:	ce 01       	movw	r24, r28
   10af8:	0e 94 c5 84 	call	0x1098a	; 0x1098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10afc:	21 96       	adiw	r28, 0x01	; 1
   10afe:	c4 37       	cpi	r28, 0x74	; 116
   10b00:	d1 05       	cpc	r29, r1
   10b02:	b1 f7       	brne	.-20     	; 0x10af0 <save_setup_network()+0x14>
   10b04:	02 e0       	ldi	r16, 0x02	; 2
   10b06:	11 e1       	ldi	r17, 0x11	; 17
   10b08:	f8 01       	movw	r30, r16
   10b0a:	61 91       	ld	r22, Z+
   10b0c:	8f 01       	movw	r16, r30
   10b0e:	ce 01       	movw	r24, r28
   10b10:	0e 94 c5 84 	call	0x1098a	; 0x1098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10b14:	21 96       	adiw	r28, 0x01	; 1
   10b16:	c8 37       	cpi	r28, 0x78	; 120
   10b18:	d1 05       	cpc	r29, r1
   10b1a:	b1 f7       	brne	.-20     	; 0x10b08 <save_setup_network()+0x2c>
   10b1c:	06 e0       	ldi	r16, 0x06	; 6
   10b1e:	11 e1       	ldi	r17, 0x11	; 17
   10b20:	f8 01       	movw	r30, r16
   10b22:	61 91       	ld	r22, Z+
   10b24:	8f 01       	movw	r16, r30
   10b26:	ce 01       	movw	r24, r28
   10b28:	0e 94 c5 84 	call	0x1098a	; 0x1098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10b2c:	21 96       	adiw	r28, 0x01	; 1
   10b2e:	cc 37       	cpi	r28, 0x7C	; 124
   10b30:	d1 05       	cpc	r29, r1
   10b32:	b1 f7       	brne	.-20     	; 0x10b20 <save_setup_network()+0x44>
   10b34:	2e e0       	ldi	r18, 0x0E	; 14
   10b36:	e2 2e       	mov	r14, r18
   10b38:	21 e1       	ldi	r18, 0x11	; 17
   10b3a:	f2 2e       	mov	r15, r18
   10b3c:	00 e8       	ldi	r16, 0x80	; 128
   10b3e:	10 e0       	ldi	r17, 0x00	; 0
   10b40:	f7 01       	movw	r30, r14
   10b42:	61 91       	ld	r22, Z+
   10b44:	7f 01       	movw	r14, r30
   10b46:	c8 01       	movw	r24, r16
   10b48:	0e 94 c5 84 	call	0x1098a	; 0x1098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10b4c:	0f 5f       	subi	r16, 0xFF	; 255
   10b4e:	1f 4f       	sbci	r17, 0xFF	; 255
   10b50:	04 38       	cpi	r16, 0x84	; 132
   10b52:	11 05       	cpc	r17, r1
   10b54:	a9 f7       	brne	.-22     	; 0x10b40 <save_setup_network()+0x64>
   10b56:	9a e0       	ldi	r25, 0x0A	; 10
   10b58:	e9 2e       	mov	r14, r25
   10b5a:	91 e1       	ldi	r25, 0x11	; 17
   10b5c:	f9 2e       	mov	r15, r25
   10b5e:	f7 01       	movw	r30, r14
   10b60:	61 91       	ld	r22, Z+
   10b62:	7f 01       	movw	r14, r30
   10b64:	ce 01       	movw	r24, r28
   10b66:	0e 94 c5 84 	call	0x1098a	; 0x1098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10b6a:	21 96       	adiw	r28, 0x01	; 1
   10b6c:	c0 38       	cpi	r28, 0x80	; 128
   10b6e:	d1 05       	cpc	r29, r1
   10b70:	b1 f7       	brne	.-20     	; 0x10b5e <save_setup_network()+0x82>
   10b72:	82 e1       	ldi	r24, 0x12	; 18
   10b74:	e8 2e       	mov	r14, r24
   10b76:	81 e1       	ldi	r24, 0x11	; 17
   10b78:	f8 2e       	mov	r15, r24
   10b7a:	c4 e6       	ldi	r28, 0x64	; 100
   10b7c:	d0 e0       	ldi	r29, 0x00	; 0
   10b7e:	f7 01       	movw	r30, r14
   10b80:	61 91       	ld	r22, Z+
   10b82:	7f 01       	movw	r14, r30
   10b84:	ce 01       	movw	r24, r28
   10b86:	0e 94 c5 84 	call	0x1098a	; 0x1098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10b8a:	21 96       	adiw	r28, 0x01	; 1
   10b8c:	cd 36       	cpi	r28, 0x6D	; 109
   10b8e:	d1 05       	cpc	r29, r1
   10b90:	b1 f7       	brne	.-20     	; 0x10b7e <save_setup_network()+0xa2>
   10b92:	cc e1       	ldi	r28, 0x1C	; 28
   10b94:	d1 e1       	ldi	r29, 0x11	; 17
   10b96:	69 91       	ld	r22, Y+
   10b98:	c8 01       	movw	r24, r16
   10b9a:	0e 94 c5 84 	call	0x1098a	; 0x1098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10b9e:	0f 5f       	subi	r16, 0xFF	; 255
   10ba0:	1f 4f       	sbci	r17, 0xFF	; 255
   10ba2:	08 38       	cpi	r16, 0x88	; 136
   10ba4:	11 05       	cpc	r17, r1
   10ba6:	b9 f7       	brne	.-18     	; 0x10b96 <save_setup_network()+0xba>
   10ba8:	60 91 21 11 	lds	r22, 0x1121	; 0x801121 <device+0x25>
   10bac:	88 e8       	ldi	r24, 0x88	; 136
   10bae:	90 e0       	ldi	r25, 0x00	; 0
   10bb0:	0e 94 c5 84 	call	0x1098a	; 0x1098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10bb4:	60 91 20 11 	lds	r22, 0x1120	; 0x801120 <device+0x24>
   10bb8:	89 e8       	ldi	r24, 0x89	; 137
   10bba:	90 e0       	ldi	r25, 0x00	; 0
   10bbc:	0e 94 c5 84 	call	0x1098a	; 0x1098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10bc0:	02 e2       	ldi	r16, 0x22	; 34
   10bc2:	11 e1       	ldi	r17, 0x11	; 17
   10bc4:	ca e8       	ldi	r28, 0x8A	; 138
   10bc6:	d0 e0       	ldi	r29, 0x00	; 0
   10bc8:	f8 01       	movw	r30, r16
   10bca:	61 91       	ld	r22, Z+
   10bcc:	8f 01       	movw	r16, r30
   10bce:	ce 01       	movw	r24, r28
   10bd0:	0e 94 c5 84 	call	0x1098a	; 0x1098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10bd4:	21 96       	adiw	r28, 0x01	; 1
   10bd6:	ce 39       	cpi	r28, 0x9E	; 158
   10bd8:	d1 05       	cpc	r29, r1
   10bda:	b1 f7       	brne	.-20     	; 0x10bc8 <save_setup_network()+0xec>
   10bdc:	06 e3       	ldi	r16, 0x36	; 54
   10bde:	11 e1       	ldi	r17, 0x11	; 17
   10be0:	f8 01       	movw	r30, r16
   10be2:	61 91       	ld	r22, Z+
   10be4:	8f 01       	movw	r16, r30
   10be6:	ce 01       	movw	r24, r28
   10be8:	0e 94 c5 84 	call	0x1098a	; 0x1098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10bec:	21 96       	adiw	r28, 0x01	; 1
   10bee:	c2 3b       	cpi	r28, 0xB2	; 178
   10bf0:	d1 05       	cpc	r29, r1
   10bf2:	b1 f7       	brne	.-20     	; 0x10be0 <save_setup_network()+0x104>
   10bf4:	0a e4       	ldi	r16, 0x4A	; 74
   10bf6:	11 e1       	ldi	r17, 0x11	; 17
   10bf8:	f8 01       	movw	r30, r16
   10bfa:	61 91       	ld	r22, Z+
   10bfc:	8f 01       	movw	r16, r30
   10bfe:	ce 01       	movw	r24, r28
   10c00:	0e 94 c5 84 	call	0x1098a	; 0x1098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10c04:	21 96       	adiw	r28, 0x01	; 1
   10c06:	c6 3b       	cpi	r28, 0xB6	; 182
   10c08:	d1 05       	cpc	r29, r1
   10c0a:	b1 f7       	brne	.-20     	; 0x10bf8 <save_setup_network()+0x11c>
   10c0c:	df 91       	pop	r29
   10c0e:	cf 91       	pop	r28
   10c10:	1f 91       	pop	r17
   10c12:	0f 91       	pop	r16
   10c14:	ff 90       	pop	r15
   10c16:	ef 90       	pop	r14
   10c18:	08 95       	ret

00010c1a <device_get_name(char*)>:
_Z15device_get_namePc():
   10c1a:	0f 93       	push	r16
   10c1c:	1f 93       	push	r17
   10c1e:	cf 93       	push	r28
   10c20:	df 93       	push	r29
   10c22:	8c 01       	movw	r16, r24
   10c24:	c4 e6       	ldi	r28, 0x64	; 100
   10c26:	d0 e0       	ldi	r29, 0x00	; 0
   10c28:	ce 01       	movw	r24, r28
   10c2a:	0e 94 c3 84 	call	0x10986	; 0x10986 <EEPROMClass::read(int) [clone .isra.0]>
   10c2e:	f8 01       	movw	r30, r16
   10c30:	81 93       	st	Z+, r24
   10c32:	8f 01       	movw	r16, r30
   10c34:	10 82       	st	Z, r1
   10c36:	88 23       	and	r24, r24
   10c38:	21 f0       	breq	.+8      	; 0x10c42 <device_get_name(char*)+0x28>
   10c3a:	21 96       	adiw	r28, 0x01	; 1
   10c3c:	cd 36       	cpi	r28, 0x6D	; 109
   10c3e:	d1 05       	cpc	r29, r1
   10c40:	99 f7       	brne	.-26     	; 0x10c28 <device_get_name(char*)+0xe>
   10c42:	df 91       	pop	r29
   10c44:	cf 91       	pop	r28
   10c46:	1f 91       	pop	r17
   10c48:	0f 91       	pop	r16
   10c4a:	08 95       	ret

00010c4c <device_set_name(char*)>:
_Z15device_set_namePc():
   10c4c:	ff 92       	push	r15
   10c4e:	0f 93       	push	r16
   10c50:	1f 93       	push	r17
   10c52:	cf 93       	push	r28
   10c54:	df 93       	push	r29
   10c56:	8c 01       	movw	r16, r24
   10c58:	d0 e0       	ldi	r29, 0x00	; 0
   10c5a:	c0 e0       	ldi	r28, 0x00	; 0
   10c5c:	f8 01       	movw	r30, r16
   10c5e:	f1 90       	ld	r15, Z+
   10c60:	8f 01       	movw	r16, r30
   10c62:	6f 2d       	mov	r22, r15
   10c64:	ce 01       	movw	r24, r28
   10c66:	8c 59       	subi	r24, 0x9C	; 156
   10c68:	9f 4f       	sbci	r25, 0xFF	; 255
   10c6a:	0e 94 c5 84 	call	0x1098a	; 0x1098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10c6e:	f1 10       	cpse	r15, r1
   10c70:	0b c0       	rjmp	.+22     	; 0x10c88 <device_set_name(char*)+0x3c>
   10c72:	60 e0       	ldi	r22, 0x00	; 0
   10c74:	ce 01       	movw	r24, r28
   10c76:	8b 59       	subi	r24, 0x9B	; 155
   10c78:	9f 4f       	sbci	r25, 0xFF	; 255
   10c7a:	df 91       	pop	r29
   10c7c:	cf 91       	pop	r28
   10c7e:	1f 91       	pop	r17
   10c80:	0f 91       	pop	r16
   10c82:	ff 90       	pop	r15
   10c84:	0c 94 c5 84 	jmp	0x1098a	; 0x1098a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10c88:	21 96       	adiw	r28, 0x01	; 1
   10c8a:	c9 30       	cpi	r28, 0x09	; 9
   10c8c:	d1 05       	cpc	r29, r1
   10c8e:	31 f7       	brne	.-52     	; 0x10c5c <device_set_name(char*)+0x10>
   10c90:	df 91       	pop	r29
   10c92:	cf 91       	pop	r28
   10c94:	1f 91       	pop	r17
   10c96:	0f 91       	pop	r16
   10c98:	ff 90       	pop	r15
   10c9a:	08 95       	ret

00010c9c <setting_network(char*, char*)>:
_Z15setting_networkPcS_():
   10c9c:	ef 92       	push	r14
   10c9e:	ff 92       	push	r15
   10ca0:	0f 93       	push	r16
   10ca2:	1f 93       	push	r17
   10ca4:	cf 93       	push	r28
   10ca6:	df 93       	push	r29
   10ca8:	7b 01       	movw	r14, r22
   10caa:	63 e7       	ldi	r22, 0x73	; 115
   10cac:	73 e0       	ldi	r23, 0x03	; 3
   10cae:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
   10cb2:	ec 01       	movw	r28, r24
   10cb4:	10 e0       	ldi	r17, 0x00	; 0
   10cb6:	20 97       	sbiw	r28, 0x00	; 0
   10cb8:	09 f4       	brne	.+2      	; 0x10cbc <setting_network(char*, char*)+0x20>
   10cba:	ba c0       	rjmp	.+372    	; 0x10e30 <setting_network(char*, char*)+0x194>
   10cbc:	65 e3       	ldi	r22, 0x35	; 53
   10cbe:	78 e0       	ldi	r23, 0x08	; 8
   10cc0:	ce 01       	movw	r24, r28
   10cc2:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
   10cc6:	89 2b       	or	r24, r25
   10cc8:	59 f4       	brne	.+22     	; 0x10ce0 <setting_network(char*, char*)+0x44>
   10cca:	0a e0       	ldi	r16, 0x0A	; 10
   10ccc:	10 e0       	ldi	r17, 0x00	; 0
   10cce:	26 e0       	ldi	r18, 0x06	; 6
   10cd0:	30 e0       	ldi	r19, 0x00	; 0
   10cd2:	4c ef       	ldi	r20, 0xFC	; 252
   10cd4:	50 e1       	ldi	r21, 0x10	; 16
   10cd6:	6a e3       	ldi	r22, 0x3A	; 58
   10cd8:	c7 01       	movw	r24, r14
   10cda:	0e 94 d4 bd 	call	0x17ba8	; 0x17ba8 <parseBytes(char const*, char, unsigned char*, int, int)>
   10cde:	11 e0       	ldi	r17, 0x01	; 1
   10ce0:	69 e3       	ldi	r22, 0x39	; 57
   10ce2:	78 e0       	ldi	r23, 0x08	; 8
   10ce4:	ce 01       	movw	r24, r28
   10ce6:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
   10cea:	89 2b       	or	r24, r25
   10cec:	59 f4       	brne	.+22     	; 0x10d04 <setting_network(char*, char*)+0x68>
   10cee:	0a e0       	ldi	r16, 0x0A	; 10
   10cf0:	10 e0       	ldi	r17, 0x00	; 0
   10cf2:	24 e0       	ldi	r18, 0x04	; 4
   10cf4:	30 e0       	ldi	r19, 0x00	; 0
   10cf6:	42 e0       	ldi	r20, 0x02	; 2
   10cf8:	51 e1       	ldi	r21, 0x11	; 17
   10cfa:	6e e2       	ldi	r22, 0x2E	; 46
   10cfc:	c7 01       	movw	r24, r14
   10cfe:	0e 94 d4 bd 	call	0x17ba8	; 0x17ba8 <parseBytes(char const*, char, unsigned char*, int, int)>
   10d02:	11 e0       	ldi	r17, 0x01	; 1
   10d04:	6c e3       	ldi	r22, 0x3C	; 60
   10d06:	78 e0       	ldi	r23, 0x08	; 8
   10d08:	ce 01       	movw	r24, r28
   10d0a:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
   10d0e:	89 2b       	or	r24, r25
   10d10:	59 f4       	brne	.+22     	; 0x10d28 <setting_network(char*, char*)+0x8c>
   10d12:	0a e0       	ldi	r16, 0x0A	; 10
   10d14:	10 e0       	ldi	r17, 0x00	; 0
   10d16:	24 e0       	ldi	r18, 0x04	; 4
   10d18:	30 e0       	ldi	r19, 0x00	; 0
   10d1a:	46 e0       	ldi	r20, 0x06	; 6
   10d1c:	51 e1       	ldi	r21, 0x11	; 17
   10d1e:	6e e2       	ldi	r22, 0x2E	; 46
   10d20:	c7 01       	movw	r24, r14
   10d22:	0e 94 d4 bd 	call	0x17ba8	; 0x17ba8 <parseBytes(char const*, char, unsigned char*, int, int)>
   10d26:	11 e0       	ldi	r17, 0x01	; 1
   10d28:	64 e4       	ldi	r22, 0x44	; 68
   10d2a:	78 e0       	ldi	r23, 0x08	; 8
   10d2c:	ce 01       	movw	r24, r28
   10d2e:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
   10d32:	89 2b       	or	r24, r25
   10d34:	59 f4       	brne	.+22     	; 0x10d4c <setting_network(char*, char*)+0xb0>
   10d36:	0a e0       	ldi	r16, 0x0A	; 10
   10d38:	10 e0       	ldi	r17, 0x00	; 0
   10d3a:	24 e0       	ldi	r18, 0x04	; 4
   10d3c:	30 e0       	ldi	r19, 0x00	; 0
   10d3e:	4e e0       	ldi	r20, 0x0E	; 14
   10d40:	51 e1       	ldi	r21, 0x11	; 17
   10d42:	6e e2       	ldi	r22, 0x2E	; 46
   10d44:	c7 01       	movw	r24, r14
   10d46:	0e 94 d4 bd 	call	0x17ba8	; 0x17ba8 <parseBytes(char const*, char, unsigned char*, int, int)>
   10d4a:	11 e0       	ldi	r17, 0x01	; 1
   10d4c:	67 e4       	ldi	r22, 0x47	; 71
   10d4e:	78 e0       	ldi	r23, 0x08	; 8
   10d50:	ce 01       	movw	r24, r28
   10d52:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
   10d56:	89 2b       	or	r24, r25
   10d58:	59 f4       	brne	.+22     	; 0x10d70 <setting_network(char*, char*)+0xd4>
   10d5a:	0a e0       	ldi	r16, 0x0A	; 10
   10d5c:	10 e0       	ldi	r17, 0x00	; 0
   10d5e:	24 e0       	ldi	r18, 0x04	; 4
   10d60:	30 e0       	ldi	r19, 0x00	; 0
   10d62:	4a e0       	ldi	r20, 0x0A	; 10
   10d64:	51 e1       	ldi	r21, 0x11	; 17
   10d66:	6e e2       	ldi	r22, 0x2E	; 46
   10d68:	c7 01       	movw	r24, r14
   10d6a:	0e 94 d4 bd 	call	0x17ba8	; 0x17ba8 <parseBytes(char const*, char, unsigned char*, int, int)>
   10d6e:	11 e0       	ldi	r17, 0x01	; 1
   10d70:	6b e4       	ldi	r22, 0x4B	; 75
   10d72:	78 e0       	ldi	r23, 0x08	; 8
   10d74:	ce 01       	movw	r24, r28
   10d76:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
   10d7a:	89 2b       	or	r24, r25
   10d7c:	59 f4       	brne	.+22     	; 0x10d94 <setting_network(char*, char*)+0xf8>
   10d7e:	0a e0       	ldi	r16, 0x0A	; 10
   10d80:	10 e0       	ldi	r17, 0x00	; 0
   10d82:	24 e0       	ldi	r18, 0x04	; 4
   10d84:	30 e0       	ldi	r19, 0x00	; 0
   10d86:	4a e4       	ldi	r20, 0x4A	; 74
   10d88:	51 e1       	ldi	r21, 0x11	; 17
   10d8a:	6e e2       	ldi	r22, 0x2E	; 46
   10d8c:	c7 01       	movw	r24, r14
   10d8e:	0e 94 d4 bd 	call	0x17ba8	; 0x17ba8 <parseBytes(char const*, char, unsigned char*, int, int)>
   10d92:	11 e0       	ldi	r17, 0x01	; 1
   10d94:	6f e4       	ldi	r22, 0x4F	; 79
   10d96:	78 e0       	ldi	r23, 0x08	; 8
   10d98:	ce 01       	movw	r24, r28
   10d9a:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
   10d9e:	89 2b       	or	r24, r25
   10da0:	59 f4       	brne	.+22     	; 0x10db8 <setting_network(char*, char*)+0x11c>
   10da2:	0a e0       	ldi	r16, 0x0A	; 10
   10da4:	10 e0       	ldi	r17, 0x00	; 0
   10da6:	24 e0       	ldi	r18, 0x04	; 4
   10da8:	30 e0       	ldi	r19, 0x00	; 0
   10daa:	4c e1       	ldi	r20, 0x1C	; 28
   10dac:	51 e1       	ldi	r21, 0x11	; 17
   10dae:	6e e2       	ldi	r22, 0x2E	; 46
   10db0:	c7 01       	movw	r24, r14
   10db2:	0e 94 d4 bd 	call	0x17ba8	; 0x17ba8 <parseBytes(char const*, char, unsigned char*, int, int)>
   10db6:	11 e0       	ldi	r17, 0x01	; 1
   10db8:	69 e5       	ldi	r22, 0x59	; 89
   10dba:	78 e0       	ldi	r23, 0x08	; 8
   10dbc:	ce 01       	movw	r24, r28
   10dbe:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
   10dc2:	89 2b       	or	r24, r25
   10dc4:	41 f4       	brne	.+16     	; 0x10dd6 <setting_network(char*, char*)+0x13a>
   10dc6:	c7 01       	movw	r24, r14
   10dc8:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
   10dcc:	90 93 21 11 	sts	0x1121, r25	; 0x801121 <device+0x25>
   10dd0:	80 93 20 11 	sts	0x1120, r24	; 0x801120 <device+0x24>
   10dd4:	11 e0       	ldi	r17, 0x01	; 1
   10dd6:	63 e6       	ldi	r22, 0x63	; 99
   10dd8:	78 e0       	ldi	r23, 0x08	; 8
   10dda:	ce 01       	movw	r24, r28
   10ddc:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
   10de0:	89 2b       	or	r24, r25
   10de2:	31 f4       	brne	.+12     	; 0x10df0 <setting_network(char*, char*)+0x154>
   10de4:	b7 01       	movw	r22, r14
   10de6:	82 e2       	ldi	r24, 0x22	; 34
   10de8:	91 e1       	ldi	r25, 0x11	; 17
   10dea:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
   10dee:	11 e0       	ldi	r17, 0x01	; 1
   10df0:	6d e6       	ldi	r22, 0x6D	; 109
   10df2:	78 e0       	ldi	r23, 0x08	; 8
   10df4:	ce 01       	movw	r24, r28
   10df6:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
   10dfa:	89 2b       	or	r24, r25
   10dfc:	31 f4       	brne	.+12     	; 0x10e0a <setting_network(char*, char*)+0x16e>
   10dfe:	b7 01       	movw	r22, r14
   10e00:	86 e3       	ldi	r24, 0x36	; 54
   10e02:	91 e1       	ldi	r25, 0x11	; 17
   10e04:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
   10e08:	11 e0       	ldi	r17, 0x01	; 1
   10e0a:	63 eb       	ldi	r22, 0xB3	; 179
   10e0c:	73 e0       	ldi	r23, 0x03	; 3
   10e0e:	ce 01       	movw	r24, r28
   10e10:	0e 94 1d e2 	call	0x1c43a	; 0x1c43a <strcmp>
   10e14:	89 2b       	or	r24, r25
   10e16:	21 f4       	brne	.+8      	; 0x10e20 <setting_network(char*, char*)+0x184>
   10e18:	c7 01       	movw	r24, r14
   10e1a:	0e 94 26 86 	call	0x10c4c	; 0x10c4c <device_set_name(char*)>
   10e1e:	12 e0       	ldi	r17, 0x02	; 2
   10e20:	63 e7       	ldi	r22, 0x73	; 115
   10e22:	73 e0       	ldi	r23, 0x03	; 3
   10e24:	90 e0       	ldi	r25, 0x00	; 0
   10e26:	80 e0       	ldi	r24, 0x00	; 0
   10e28:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
   10e2c:	ec 01       	movw	r28, r24
   10e2e:	43 cf       	rjmp	.-378    	; 0x10cb6 <setting_network(char*, char*)+0x1a>
   10e30:	81 2f       	mov	r24, r17
   10e32:	df 91       	pop	r29
   10e34:	cf 91       	pop	r28
   10e36:	1f 91       	pop	r17
   10e38:	0f 91       	pop	r16
   10e3a:	ff 90       	pop	r15
   10e3c:	ef 90       	pop	r14
   10e3e:	08 95       	ret

00010e40 <send_mqtt_set_header(char const*)>:
_Z20send_mqtt_set_headerPKc():
   10e40:	90 93 f9 10 	sts	0x10F9, r25	; 0x8010f9 <header_out+0x1>
   10e44:	80 93 f8 10 	sts	0x10F8, r24	; 0x8010f8 <header_out>
   10e48:	08 95       	ret

00010e4a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_():
   10e4a:	9f 92       	push	r9
   10e4c:	af 92       	push	r10
   10e4e:	bf 92       	push	r11
   10e50:	cf 92       	push	r12
   10e52:	df 92       	push	r13
   10e54:	ef 92       	push	r14
   10e56:	ff 92       	push	r15
   10e58:	0f 93       	push	r16
   10e5a:	1f 93       	push	r17
   10e5c:	cf 93       	push	r28
   10e5e:	df 93       	push	r29
   10e60:	cd b7       	in	r28, 0x3d	; 61
   10e62:	de b7       	in	r29, 0x3e	; 62
   10e64:	c6 55       	subi	r28, 0x56	; 86
   10e66:	d1 09       	sbc	r29, r1
   10e68:	0f b6       	in	r0, 0x3f	; 63
   10e6a:	f8 94       	cli
   10e6c:	de bf       	out	0x3e, r29	; 62
   10e6e:	0f be       	out	0x3f, r0	; 63
   10e70:	cd bf       	out	0x3d, r28	; 61
   10e72:	7c 01       	movw	r14, r24
   10e74:	5b 01       	movw	r10, r22
   10e76:	94 2e       	mov	r9, r20
   10e78:	69 01       	movw	r12, r18
   10e7a:	0e 94 a2 c3 	call	0x18744	; 0x18744 <PubSubClient::connected()>
   10e7e:	88 23       	and	r24, r24
   10e80:	09 f4       	brne	.+2      	; 0x10e84 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0x3a>
   10e82:	51 c0       	rjmp	.+162    	; 0x10f26 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0xdc>
   10e84:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <mqtt_send_message>
   10e88:	90 91 fb 10 	lds	r25, 0x10FB	; 0x8010fb <mqtt_send_message+0x1>
   10e8c:	01 96       	adiw	r24, 0x01	; 1
   10e8e:	90 93 fb 10 	sts	0x10FB, r25	; 0x8010fb <mqtt_send_message+0x1>
   10e92:	80 93 fa 10 	sts	0x10FA, r24	; 0x8010fa <mqtt_send_message>
   10e96:	ce 01       	movw	r24, r28
   10e98:	83 5b       	subi	r24, 0xB3	; 179
   10e9a:	9f 4f       	sbci	r25, 0xFF	; 255
   10e9c:	0e 94 0d 86 	call	0x10c1a	; 0x10c1a <device_get_name(char*)>
   10ea0:	60 91 f8 10 	lds	r22, 0x10F8	; 0x8010f8 <header_out>
   10ea4:	70 91 f9 10 	lds	r23, 0x10F9	; 0x8010f9 <header_out+0x1>
   10ea8:	ce 01       	movw	r24, r28
   10eaa:	01 96       	adiw	r24, 0x01	; 1
   10eac:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   10eb0:	be 01       	movw	r22, r28
   10eb2:	63 5b       	subi	r22, 0xB3	; 179
   10eb4:	7f 4f       	sbci	r23, 0xFF	; 255
   10eb6:	ce 01       	movw	r24, r28
   10eb8:	01 96       	adiw	r24, 0x01	; 1
   10eba:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   10ebe:	63 e7       	ldi	r22, 0x73	; 115
   10ec0:	73 e0       	ldi	r23, 0x03	; 3
   10ec2:	ce 01       	movw	r24, r28
   10ec4:	01 96       	adiw	r24, 0x01	; 1
   10ec6:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   10eca:	b5 01       	movw	r22, r10
   10ecc:	ce 01       	movw	r24, r28
   10ece:	01 96       	adiw	r24, 0x01	; 1
   10ed0:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   10ed4:	63 e7       	ldi	r22, 0x73	; 115
   10ed6:	73 e0       	ldi	r23, 0x03	; 3
   10ed8:	ce 01       	movw	r24, r28
   10eda:	01 96       	adiw	r24, 0x01	; 1
   10edc:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
itoa():
   10ee0:	4a e0       	ldi	r20, 0x0A	; 10
   10ee2:	be 01       	movw	r22, r28
   10ee4:	6f 5b       	subi	r22, 0xBF	; 191
   10ee6:	7f 4f       	sbci	r23, 0xFF	; 255
   10ee8:	89 2d       	mov	r24, r9
   10eea:	90 e0       	ldi	r25, 0x00	; 0
   10eec:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_():
   10ef0:	be 01       	movw	r22, r28
   10ef2:	6f 5b       	subi	r22, 0xBF	; 191
   10ef4:	7f 4f       	sbci	r23, 0xFF	; 255
   10ef6:	ce 01       	movw	r24, r28
   10ef8:	01 96       	adiw	r24, 0x01	; 1
   10efa:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   10efe:	63 e7       	ldi	r22, 0x73	; 115
   10f00:	73 e0       	ldi	r23, 0x03	; 3
   10f02:	ce 01       	movw	r24, r28
   10f04:	01 96       	adiw	r24, 0x01	; 1
   10f06:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   10f0a:	b6 01       	movw	r22, r12
   10f0c:	ce 01       	movw	r24, r28
   10f0e:	01 96       	adiw	r24, 0x01	; 1
   10f10:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   10f14:	a8 01       	movw	r20, r16
   10f16:	be 01       	movw	r22, r28
   10f18:	6f 5f       	subi	r22, 0xFF	; 255
   10f1a:	7f 4f       	sbci	r23, 0xFF	; 255
   10f1c:	c7 01       	movw	r24, r14
   10f1e:	0e 94 30 c7 	call	0x18e60	; 0x18e60 <PubSubClient::publish(char const*, char const*)>
   10f22:	81 11       	cpse	r24, r1
   10f24:	09 c0       	rjmp	.+18     	; 0x10f38 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0xee>
   10f26:	80 91 4e 11 	lds	r24, 0x114E	; 0x80114e <mqtt_error>
   10f2a:	90 91 4f 11 	lds	r25, 0x114F	; 0x80114f <mqtt_error+0x1>
   10f2e:	01 96       	adiw	r24, 0x01	; 1
   10f30:	90 93 4f 11 	sts	0x114F, r25	; 0x80114f <mqtt_error+0x1>
   10f34:	80 93 4e 11 	sts	0x114E, r24	; 0x80114e <mqtt_error>
   10f38:	ca 5a       	subi	r28, 0xAA	; 170
   10f3a:	df 4f       	sbci	r29, 0xFF	; 255
   10f3c:	0f b6       	in	r0, 0x3f	; 63
   10f3e:	f8 94       	cli
   10f40:	de bf       	out	0x3e, r29	; 62
   10f42:	0f be       	out	0x3f, r0	; 63
   10f44:	cd bf       	out	0x3d, r28	; 61
   10f46:	df 91       	pop	r29
   10f48:	cf 91       	pop	r28
   10f4a:	1f 91       	pop	r17
   10f4c:	0f 91       	pop	r16
   10f4e:	ff 90       	pop	r15
   10f50:	ef 90       	pop	r14
   10f52:	df 90       	pop	r13
   10f54:	cf 90       	pop	r12
   10f56:	bf 90       	pop	r11
   10f58:	af 90       	pop	r10
   10f5a:	9f 90       	pop	r9
   10f5c:	08 95       	ret

00010f5e <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>:
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   10f5e:	8f 92       	push	r8
   10f60:	9f 92       	push	r9
   10f62:	af 92       	push	r10
   10f64:	bf 92       	push	r11
   10f66:	cf 92       	push	r12
   10f68:	df 92       	push	r13
   10f6a:	ef 92       	push	r14
   10f6c:	ff 92       	push	r15
   10f6e:	0f 93       	push	r16
   10f70:	1f 93       	push	r17
   10f72:	cf 93       	push	r28
   10f74:	df 93       	push	r29
   10f76:	cd b7       	in	r28, 0x3d	; 61
   10f78:	de b7       	in	r29, 0x3e	; 62
   10f7a:	c6 55       	subi	r28, 0x56	; 86
   10f7c:	d1 09       	sbc	r29, r1
   10f7e:	0f b6       	in	r0, 0x3f	; 63
   10f80:	f8 94       	cli
   10f82:	de bf       	out	0x3e, r29	; 62
   10f84:	0f be       	out	0x3f, r0	; 63
   10f86:	cd bf       	out	0x3d, r28	; 61
   10f88:	6c 01       	movw	r12, r24
   10f8a:	5b 01       	movw	r10, r22
   10f8c:	84 2e       	mov	r8, r20
   10f8e:	92 2e       	mov	r9, r18
   10f90:	0e 94 a2 c3 	call	0x18744	; 0x18744 <PubSubClient::connected()>
   10f94:	88 23       	and	r24, r24
   10f96:	09 f4       	brne	.+2      	; 0x10f9a <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x3c>
   10f98:	66 c0       	rjmp	.+204    	; 0x11066 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x108>
   10f9a:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <mqtt_send_message>
   10f9e:	90 91 fb 10 	lds	r25, 0x10FB	; 0x8010fb <mqtt_send_message+0x1>
   10fa2:	01 96       	adiw	r24, 0x01	; 1
   10fa4:	90 93 fb 10 	sts	0x10FB, r25	; 0x8010fb <mqtt_send_message+0x1>
   10fa8:	80 93 fa 10 	sts	0x10FA, r24	; 0x8010fa <mqtt_send_message>
   10fac:	ce 01       	movw	r24, r28
   10fae:	83 5b       	subi	r24, 0xB3	; 179
   10fb0:	9f 4f       	sbci	r25, 0xFF	; 255
   10fb2:	0e 94 0d 86 	call	0x10c1a	; 0x10c1a <device_get_name(char*)>
   10fb6:	60 91 f8 10 	lds	r22, 0x10F8	; 0x8010f8 <header_out>
   10fba:	70 91 f9 10 	lds	r23, 0x10F9	; 0x8010f9 <header_out+0x1>
   10fbe:	ce 01       	movw	r24, r28
   10fc0:	01 96       	adiw	r24, 0x01	; 1
   10fc2:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   10fc6:	be 01       	movw	r22, r28
   10fc8:	63 5b       	subi	r22, 0xB3	; 179
   10fca:	7f 4f       	sbci	r23, 0xFF	; 255
   10fcc:	ce 01       	movw	r24, r28
   10fce:	01 96       	adiw	r24, 0x01	; 1
   10fd0:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   10fd4:	63 e7       	ldi	r22, 0x73	; 115
   10fd6:	73 e0       	ldi	r23, 0x03	; 3
   10fd8:	ce 01       	movw	r24, r28
   10fda:	01 96       	adiw	r24, 0x01	; 1
   10fdc:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   10fe0:	b5 01       	movw	r22, r10
   10fe2:	ce 01       	movw	r24, r28
   10fe4:	01 96       	adiw	r24, 0x01	; 1
   10fe6:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   10fea:	63 e7       	ldi	r22, 0x73	; 115
   10fec:	73 e0       	ldi	r23, 0x03	; 3
   10fee:	ce 01       	movw	r24, r28
   10ff0:	01 96       	adiw	r24, 0x01	; 1
   10ff2:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
itoa():
   10ff6:	4a e0       	ldi	r20, 0x0A	; 10
   10ff8:	be 01       	movw	r22, r28
   10ffa:	6f 5b       	subi	r22, 0xBF	; 191
   10ffc:	7f 4f       	sbci	r23, 0xFF	; 255
   10ffe:	88 2d       	mov	r24, r8
   11000:	90 e0       	ldi	r25, 0x00	; 0
   11002:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   11006:	be 01       	movw	r22, r28
   11008:	6f 5b       	subi	r22, 0xBF	; 191
   1100a:	7f 4f       	sbci	r23, 0xFF	; 255
   1100c:	ce 01       	movw	r24, r28
   1100e:	01 96       	adiw	r24, 0x01	; 1
   11010:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   11014:	63 e7       	ldi	r22, 0x73	; 115
   11016:	73 e0       	ldi	r23, 0x03	; 3
   11018:	ce 01       	movw	r24, r28
   1101a:	01 96       	adiw	r24, 0x01	; 1
   1101c:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
itoa():
   11020:	4a e0       	ldi	r20, 0x0A	; 10
   11022:	be 01       	movw	r22, r28
   11024:	6f 5b       	subi	r22, 0xBF	; 191
   11026:	7f 4f       	sbci	r23, 0xFF	; 255
   11028:	89 2d       	mov	r24, r9
   1102a:	90 e0       	ldi	r25, 0x00	; 0
   1102c:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   11030:	be 01       	movw	r22, r28
   11032:	6f 5b       	subi	r22, 0xBF	; 191
   11034:	7f 4f       	sbci	r23, 0xFF	; 255
   11036:	ce 01       	movw	r24, r28
   11038:	01 96       	adiw	r24, 0x01	; 1
   1103a:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   1103e:	63 e7       	ldi	r22, 0x73	; 115
   11040:	73 e0       	ldi	r23, 0x03	; 3
   11042:	ce 01       	movw	r24, r28
   11044:	01 96       	adiw	r24, 0x01	; 1
   11046:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   1104a:	b8 01       	movw	r22, r16
   1104c:	ce 01       	movw	r24, r28
   1104e:	01 96       	adiw	r24, 0x01	; 1
   11050:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   11054:	a7 01       	movw	r20, r14
   11056:	be 01       	movw	r22, r28
   11058:	6f 5f       	subi	r22, 0xFF	; 255
   1105a:	7f 4f       	sbci	r23, 0xFF	; 255
   1105c:	c6 01       	movw	r24, r12
   1105e:	0e 94 30 c7 	call	0x18e60	; 0x18e60 <PubSubClient::publish(char const*, char const*)>
   11062:	81 11       	cpse	r24, r1
   11064:	09 c0       	rjmp	.+18     	; 0x11078 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x11a>
   11066:	80 91 4e 11 	lds	r24, 0x114E	; 0x80114e <mqtt_error>
   1106a:	90 91 4f 11 	lds	r25, 0x114F	; 0x80114f <mqtt_error+0x1>
   1106e:	01 96       	adiw	r24, 0x01	; 1
   11070:	90 93 4f 11 	sts	0x114F, r25	; 0x80114f <mqtt_error+0x1>
   11074:	80 93 4e 11 	sts	0x114E, r24	; 0x80114e <mqtt_error>
   11078:	ca 5a       	subi	r28, 0xAA	; 170
   1107a:	df 4f       	sbci	r29, 0xFF	; 255
   1107c:	0f b6       	in	r0, 0x3f	; 63
   1107e:	f8 94       	cli
   11080:	de bf       	out	0x3e, r29	; 62
   11082:	0f be       	out	0x3f, r0	; 63
   11084:	cd bf       	out	0x3d, r28	; 61
   11086:	df 91       	pop	r29
   11088:	cf 91       	pop	r28
   1108a:	1f 91       	pop	r17
   1108c:	0f 91       	pop	r16
   1108e:	ff 90       	pop	r15
   11090:	ef 90       	pop	r14
   11092:	df 90       	pop	r13
   11094:	cf 90       	pop	r12
   11096:	bf 90       	pop	r11
   11098:	af 90       	pop	r10
   1109a:	9f 90       	pop	r9
   1109c:	8f 90       	pop	r8
   1109e:	08 95       	ret

000110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
   110a0:	cf 92       	push	r12
   110a2:	df 92       	push	r13
   110a4:	ef 92       	push	r14
   110a6:	ff 92       	push	r15
   110a8:	0f 93       	push	r16
   110aa:	1f 93       	push	r17
   110ac:	cf 93       	push	r28
   110ae:	df 93       	push	r29
   110b0:	cd b7       	in	r28, 0x3d	; 61
   110b2:	de b7       	in	r29, 0x3e	; 62
   110b4:	ca 54       	subi	r28, 0x4A	; 74
   110b6:	d1 09       	sbc	r29, r1
   110b8:	0f b6       	in	r0, 0x3f	; 63
   110ba:	f8 94       	cli
   110bc:	de bf       	out	0x3e, r29	; 62
   110be:	0f be       	out	0x3f, r0	; 63
   110c0:	cd bf       	out	0x3d, r28	; 61
   110c2:	8c 01       	movw	r16, r24
   110c4:	6b 01       	movw	r12, r22
   110c6:	7a 01       	movw	r14, r20
   110c8:	0e 94 a2 c3 	call	0x18744	; 0x18744 <PubSubClient::connected()>
   110cc:	88 23       	and	r24, r24
   110ce:	89 f1       	breq	.+98     	; 0x11132 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
   110d0:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <mqtt_send_message>
   110d4:	90 91 fb 10 	lds	r25, 0x10FB	; 0x8010fb <mqtt_send_message+0x1>
   110d8:	01 96       	adiw	r24, 0x01	; 1
   110da:	90 93 fb 10 	sts	0x10FB, r25	; 0x8010fb <mqtt_send_message+0x1>
   110de:	80 93 fa 10 	sts	0x10FA, r24	; 0x8010fa <mqtt_send_message>
   110e2:	ce 01       	movw	r24, r28
   110e4:	8f 5b       	subi	r24, 0xBF	; 191
   110e6:	9f 4f       	sbci	r25, 0xFF	; 255
   110e8:	0e 94 0d 86 	call	0x10c1a	; 0x10c1a <device_get_name(char*)>
   110ec:	60 91 f8 10 	lds	r22, 0x10F8	; 0x8010f8 <header_out>
   110f0:	70 91 f9 10 	lds	r23, 0x10F9	; 0x8010f9 <header_out+0x1>
   110f4:	ce 01       	movw	r24, r28
   110f6:	01 96       	adiw	r24, 0x01	; 1
   110f8:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   110fc:	be 01       	movw	r22, r28
   110fe:	6f 5b       	subi	r22, 0xBF	; 191
   11100:	7f 4f       	sbci	r23, 0xFF	; 255
   11102:	ce 01       	movw	r24, r28
   11104:	01 96       	adiw	r24, 0x01	; 1
   11106:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   1110a:	63 e7       	ldi	r22, 0x73	; 115
   1110c:	73 e0       	ldi	r23, 0x03	; 3
   1110e:	ce 01       	movw	r24, r28
   11110:	01 96       	adiw	r24, 0x01	; 1
   11112:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   11116:	b6 01       	movw	r22, r12
   11118:	ce 01       	movw	r24, r28
   1111a:	01 96       	adiw	r24, 0x01	; 1
   1111c:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   11120:	a7 01       	movw	r20, r14
   11122:	be 01       	movw	r22, r28
   11124:	6f 5f       	subi	r22, 0xFF	; 255
   11126:	7f 4f       	sbci	r23, 0xFF	; 255
   11128:	c8 01       	movw	r24, r16
   1112a:	0e 94 30 c7 	call	0x18e60	; 0x18e60 <PubSubClient::publish(char const*, char const*)>
   1112e:	81 11       	cpse	r24, r1
   11130:	09 c0       	rjmp	.+18     	; 0x11144 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
   11132:	80 91 4e 11 	lds	r24, 0x114E	; 0x80114e <mqtt_error>
   11136:	90 91 4f 11 	lds	r25, 0x114F	; 0x80114f <mqtt_error+0x1>
   1113a:	01 96       	adiw	r24, 0x01	; 1
   1113c:	90 93 4f 11 	sts	0x114F, r25	; 0x80114f <mqtt_error+0x1>
   11140:	80 93 4e 11 	sts	0x114E, r24	; 0x80114e <mqtt_error>
   11144:	c6 5b       	subi	r28, 0xB6	; 182
   11146:	df 4f       	sbci	r29, 0xFF	; 255
   11148:	0f b6       	in	r0, 0x3f	; 63
   1114a:	f8 94       	cli
   1114c:	de bf       	out	0x3e, r29	; 62
   1114e:	0f be       	out	0x3f, r0	; 63
   11150:	cd bf       	out	0x3d, r28	; 61
   11152:	df 91       	pop	r29
   11154:	cf 91       	pop	r28
   11156:	1f 91       	pop	r17
   11158:	0f 91       	pop	r16
   1115a:	ff 90       	pop	r15
   1115c:	ef 90       	pop	r14
   1115e:	df 90       	pop	r13
   11160:	cf 90       	pop	r12
   11162:	08 95       	ret

00011164 <send_network_config(PubSubClient*)>:
_Z19send_network_configP12PubSubClient():
   11164:	ef 92       	push	r14
   11166:	ff 92       	push	r15
   11168:	0f 93       	push	r16
   1116a:	cf 93       	push	r28
   1116c:	df 93       	push	r29
   1116e:	cd b7       	in	r28, 0x3d	; 61
   11170:	de b7       	in	r29, 0x3e	; 62
   11172:	e4 97       	sbiw	r28, 0x34	; 52
   11174:	0f b6       	in	r0, 0x3f	; 63
   11176:	f8 94       	cli
   11178:	de bf       	out	0x3e, r29	; 62
   1117a:	0f be       	out	0x3f, r0	; 63
   1117c:	cd bf       	out	0x3d, r28	; 61
   1117e:	7c 01       	movw	r14, r24
   11180:	19 a2       	std	Y+33, r1	; 0x21
   11182:	00 e1       	ldi	r16, 0x10	; 16
   11184:	26 e0       	ldi	r18, 0x06	; 6
   11186:	4c ef       	ldi	r20, 0xFC	; 252
   11188:	50 e1       	ldi	r21, 0x10	; 16
   1118a:	6a e3       	ldi	r22, 0x3A	; 58
   1118c:	ce 01       	movw	r24, r28
   1118e:	81 96       	adiw	r24, 0x21	; 33
   11190:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   11194:	62 ec       	ldi	r22, 0xC2	; 194
   11196:	7c e5       	ldi	r23, 0x5C	; 92
   11198:	ce 01       	movw	r24, r28
   1119a:	01 96       	adiw	r24, 0x01	; 1
   1119c:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   111a0:	ae 01       	movw	r20, r28
   111a2:	4f 5d       	subi	r20, 0xDF	; 223
   111a4:	5f 4f       	sbci	r21, 0xFF	; 255
   111a6:	be 01       	movw	r22, r28
   111a8:	6f 5f       	subi	r22, 0xFF	; 255
   111aa:	7f 4f       	sbci	r23, 0xFF	; 255
   111ac:	c7 01       	movw	r24, r14
   111ae:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   111b2:	19 a2       	std	Y+33, r1	; 0x21
   111b4:	0a e0       	ldi	r16, 0x0A	; 10
   111b6:	24 e0       	ldi	r18, 0x04	; 4
   111b8:	42 e0       	ldi	r20, 0x02	; 2
   111ba:	51 e1       	ldi	r21, 0x11	; 17
   111bc:	6e e2       	ldi	r22, 0x2E	; 46
   111be:	ce 01       	movw	r24, r28
   111c0:	81 96       	adiw	r24, 0x21	; 33
   111c2:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   111c6:	6f ee       	ldi	r22, 0xEF	; 239
   111c8:	7c e5       	ldi	r23, 0x5C	; 92
   111ca:	ce 01       	movw	r24, r28
   111cc:	01 96       	adiw	r24, 0x01	; 1
   111ce:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   111d2:	ae 01       	movw	r20, r28
   111d4:	4f 5d       	subi	r20, 0xDF	; 223
   111d6:	5f 4f       	sbci	r21, 0xFF	; 255
   111d8:	be 01       	movw	r22, r28
   111da:	6f 5f       	subi	r22, 0xFF	; 255
   111dc:	7f 4f       	sbci	r23, 0xFF	; 255
   111de:	c7 01       	movw	r24, r14
   111e0:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   111e4:	19 a2       	std	Y+33, r1	; 0x21
   111e6:	24 e0       	ldi	r18, 0x04	; 4
   111e8:	46 e0       	ldi	r20, 0x06	; 6
   111ea:	51 e1       	ldi	r21, 0x11	; 17
   111ec:	6e e2       	ldi	r22, 0x2E	; 46
   111ee:	ce 01       	movw	r24, r28
   111f0:	81 96       	adiw	r24, 0x21	; 33
   111f2:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   111f6:	62 eb       	ldi	r22, 0xB2	; 178
   111f8:	7c e5       	ldi	r23, 0x5C	; 92
   111fa:	ce 01       	movw	r24, r28
   111fc:	01 96       	adiw	r24, 0x01	; 1
   111fe:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   11202:	ae 01       	movw	r20, r28
   11204:	4f 5d       	subi	r20, 0xDF	; 223
   11206:	5f 4f       	sbci	r21, 0xFF	; 255
   11208:	be 01       	movw	r22, r28
   1120a:	6f 5f       	subi	r22, 0xFF	; 255
   1120c:	7f 4f       	sbci	r23, 0xFF	; 255
   1120e:	c7 01       	movw	r24, r14
   11210:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   11214:	19 a2       	std	Y+33, r1	; 0x21
   11216:	24 e0       	ldi	r18, 0x04	; 4
   11218:	4e e0       	ldi	r20, 0x0E	; 14
   1121a:	51 e1       	ldi	r21, 0x11	; 17
   1121c:	6e e2       	ldi	r22, 0x2E	; 46
   1121e:	ce 01       	movw	r24, r28
   11220:	81 96       	adiw	r24, 0x21	; 33
   11222:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   11226:	67 ea       	ldi	r22, 0xA7	; 167
   11228:	7c e5       	ldi	r23, 0x5C	; 92
   1122a:	ce 01       	movw	r24, r28
   1122c:	01 96       	adiw	r24, 0x01	; 1
   1122e:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   11232:	ae 01       	movw	r20, r28
   11234:	4f 5d       	subi	r20, 0xDF	; 223
   11236:	5f 4f       	sbci	r21, 0xFF	; 255
   11238:	be 01       	movw	r22, r28
   1123a:	6f 5f       	subi	r22, 0xFF	; 255
   1123c:	7f 4f       	sbci	r23, 0xFF	; 255
   1123e:	c7 01       	movw	r24, r14
   11240:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   11244:	19 a2       	std	Y+33, r1	; 0x21
   11246:	24 e0       	ldi	r18, 0x04	; 4
   11248:	4a e0       	ldi	r20, 0x0A	; 10
   1124a:	51 e1       	ldi	r21, 0x11	; 17
   1124c:	6e e2       	ldi	r22, 0x2E	; 46
   1124e:	ce 01       	movw	r24, r28
   11250:	81 96       	adiw	r24, 0x21	; 33
   11252:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   11256:	6b e9       	ldi	r22, 0x9B	; 155
   11258:	7c e5       	ldi	r23, 0x5C	; 92
   1125a:	ce 01       	movw	r24, r28
   1125c:	01 96       	adiw	r24, 0x01	; 1
   1125e:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   11262:	ae 01       	movw	r20, r28
   11264:	4f 5d       	subi	r20, 0xDF	; 223
   11266:	5f 4f       	sbci	r21, 0xFF	; 255
   11268:	be 01       	movw	r22, r28
   1126a:	6f 5f       	subi	r22, 0xFF	; 255
   1126c:	7f 4f       	sbci	r23, 0xFF	; 255
   1126e:	c7 01       	movw	r24, r14
   11270:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   11274:	19 a2       	std	Y+33, r1	; 0x21
   11276:	24 e0       	ldi	r18, 0x04	; 4
   11278:	4a e4       	ldi	r20, 0x4A	; 74
   1127a:	51 e1       	ldi	r21, 0x11	; 17
   1127c:	6e e2       	ldi	r22, 0x2E	; 46
   1127e:	ce 01       	movw	r24, r28
   11280:	81 96       	adiw	r24, 0x21	; 33
   11282:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   11286:	6f e8       	ldi	r22, 0x8F	; 143
   11288:	7c e5       	ldi	r23, 0x5C	; 92
   1128a:	ce 01       	movw	r24, r28
   1128c:	01 96       	adiw	r24, 0x01	; 1
   1128e:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   11292:	ae 01       	movw	r20, r28
   11294:	4f 5d       	subi	r20, 0xDF	; 223
   11296:	5f 4f       	sbci	r21, 0xFF	; 255
   11298:	be 01       	movw	r22, r28
   1129a:	6f 5f       	subi	r22, 0xFF	; 255
   1129c:	7f 4f       	sbci	r23, 0xFF	; 255
   1129e:	c7 01       	movw	r24, r14
   112a0:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   112a4:	19 a2       	std	Y+33, r1	; 0x21
   112a6:	24 e0       	ldi	r18, 0x04	; 4
   112a8:	4c e1       	ldi	r20, 0x1C	; 28
   112aa:	51 e1       	ldi	r21, 0x11	; 17
   112ac:	6e e2       	ldi	r22, 0x2E	; 46
   112ae:	ce 01       	movw	r24, r28
   112b0:	81 96       	adiw	r24, 0x21	; 33
   112b2:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   112b6:	6d e7       	ldi	r22, 0x7D	; 125
   112b8:	7c e5       	ldi	r23, 0x5C	; 92
   112ba:	ce 01       	movw	r24, r28
   112bc:	01 96       	adiw	r24, 0x01	; 1
   112be:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   112c2:	ae 01       	movw	r20, r28
   112c4:	4f 5d       	subi	r20, 0xDF	; 223
   112c6:	5f 4f       	sbci	r21, 0xFF	; 255
   112c8:	be 01       	movw	r22, r28
   112ca:	6f 5f       	subi	r22, 0xFF	; 255
   112cc:	7f 4f       	sbci	r23, 0xFF	; 255
   112ce:	c7 01       	movw	r24, r14
   112d0:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
   112d4:	4a e0       	ldi	r20, 0x0A	; 10
   112d6:	be 01       	movw	r22, r28
   112d8:	6f 5d       	subi	r22, 0xDF	; 223
   112da:	7f 4f       	sbci	r23, 0xFF	; 255
   112dc:	80 91 20 11 	lds	r24, 0x1120	; 0x801120 <device+0x24>
   112e0:	90 91 21 11 	lds	r25, 0x1121	; 0x801121 <device+0x25>
   112e4:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z19send_network_configP12PubSubClient():
   112e8:	6b e6       	ldi	r22, 0x6B	; 107
   112ea:	7c e5       	ldi	r23, 0x5C	; 92
   112ec:	ce 01       	movw	r24, r28
   112ee:	01 96       	adiw	r24, 0x01	; 1
   112f0:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   112f4:	ae 01       	movw	r20, r28
   112f6:	4f 5d       	subi	r20, 0xDF	; 223
   112f8:	5f 4f       	sbci	r21, 0xFF	; 255
   112fa:	be 01       	movw	r22, r28
   112fc:	6f 5f       	subi	r22, 0xFF	; 255
   112fe:	7f 4f       	sbci	r23, 0xFF	; 255
   11300:	c7 01       	movw	r24, r14
   11302:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   11306:	69 e5       	ldi	r22, 0x59	; 89
   11308:	7c e5       	ldi	r23, 0x5C	; 92
   1130a:	ce 01       	movw	r24, r28
   1130c:	01 96       	adiw	r24, 0x01	; 1
   1130e:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   11312:	42 e2       	ldi	r20, 0x22	; 34
   11314:	51 e1       	ldi	r21, 0x11	; 17
   11316:	be 01       	movw	r22, r28
   11318:	6f 5f       	subi	r22, 0xFF	; 255
   1131a:	7f 4f       	sbci	r23, 0xFF	; 255
   1131c:	c7 01       	movw	r24, r14
   1131e:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   11322:	68 e4       	ldi	r22, 0x48	; 72
   11324:	7c e5       	ldi	r23, 0x5C	; 92
   11326:	ce 01       	movw	r24, r28
   11328:	01 96       	adiw	r24, 0x01	; 1
   1132a:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   1132e:	46 e3       	ldi	r20, 0x36	; 54
   11330:	51 e1       	ldi	r21, 0x11	; 17
   11332:	be 01       	movw	r22, r28
   11334:	6f 5f       	subi	r22, 0xFF	; 255
   11336:	7f 4f       	sbci	r23, 0xFF	; 255
   11338:	c7 01       	movw	r24, r14
   1133a:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1133e:	62 ee       	ldi	r22, 0xE2	; 226
   11340:	7c e5       	ldi	r23, 0x5C	; 92
   11342:	ce 01       	movw	r24, r28
   11344:	01 96       	adiw	r24, 0x01	; 1
   11346:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   1134a:	42 e1       	ldi	r20, 0x12	; 18
   1134c:	51 e1       	ldi	r21, 0x11	; 17
   1134e:	be 01       	movw	r22, r28
   11350:	6f 5f       	subi	r22, 0xFF	; 255
   11352:	7f 4f       	sbci	r23, 0xFF	; 255
   11354:	c7 01       	movw	r24, r14
   11356:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1135a:	e4 96       	adiw	r28, 0x34	; 52
   1135c:	0f b6       	in	r0, 0x3f	; 63
   1135e:	f8 94       	cli
   11360:	de bf       	out	0x3e, r29	; 62
   11362:	0f be       	out	0x3f, r0	; 63
   11364:	cd bf       	out	0x3d, r28	; 61
   11366:	df 91       	pop	r29
   11368:	cf 91       	pop	r28
   1136a:	0f 91       	pop	r16
   1136c:	ff 90       	pop	r15
   1136e:	ef 90       	pop	r14
   11370:	08 95       	ret

00011372 <send_mqtt_status(PubSubClient*)>:
_Z16send_mqtt_statusP12PubSubClient():
   11372:	ef 92       	push	r14
   11374:	ff 92       	push	r15
   11376:	0f 93       	push	r16
   11378:	cf 93       	push	r28
   1137a:	df 93       	push	r29
   1137c:	cd b7       	in	r28, 0x3d	; 61
   1137e:	de b7       	in	r29, 0x3e	; 62
   11380:	c0 58       	subi	r28, 0x80	; 128
   11382:	d1 09       	sbc	r29, r1
   11384:	0f b6       	in	r0, 0x3f	; 63
   11386:	f8 94       	cli
   11388:	de bf       	out	0x3e, r29	; 62
   1138a:	0f be       	out	0x3f, r0	; 63
   1138c:	cd bf       	out	0x3d, r28	; 61
   1138e:	7c 01       	movw	r14, r24
   11390:	0e 94 a2 c3 	call	0x18744	; 0x18744 <PubSubClient::connected()>
   11394:	88 23       	and	r24, r24
   11396:	09 f4       	brne	.+2      	; 0x1139a <send_mqtt_status(PubSubClient*)+0x28>
   11398:	a7 c0       	rjmp	.+334    	; 0x114e8 <send_mqtt_status(PubSubClient*)+0x176>
   1139a:	64 e3       	ldi	r22, 0x34	; 52
   1139c:	7d e5       	ldi	r23, 0x5D	; 93
   1139e:	ce 01       	movw	r24, r28
   113a0:	8f 5b       	subi	r24, 0xBF	; 191
   113a2:	9f 4f       	sbci	r25, 0xFF	; 255
   113a4:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
itoa():
   113a8:	4a e0       	ldi	r20, 0x0A	; 10
   113aa:	be 01       	movw	r22, r28
   113ac:	6f 5f       	subi	r22, 0xFF	; 255
   113ae:	7f 4f       	sbci	r23, 0xFF	; 255
   113b0:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <mqtt_send_message>
   113b4:	90 91 fb 10 	lds	r25, 0x10FB	; 0x8010fb <mqtt_send_message+0x1>
   113b8:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   113bc:	10 92 fb 10 	sts	0x10FB, r1	; 0x8010fb <mqtt_send_message+0x1>
   113c0:	10 92 fa 10 	sts	0x10FA, r1	; 0x8010fa <mqtt_send_message>
   113c4:	ae 01       	movw	r20, r28
   113c6:	4f 5f       	subi	r20, 0xFF	; 255
   113c8:	5f 4f       	sbci	r21, 0xFF	; 255
   113ca:	be 01       	movw	r22, r28
   113cc:	6f 5b       	subi	r22, 0xBF	; 191
   113ce:	7f 4f       	sbci	r23, 0xFF	; 255
   113d0:	c7 01       	movw	r24, r14
   113d2:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   113d6:	62 e2       	ldi	r22, 0x22	; 34
   113d8:	7d e5       	ldi	r23, 0x5D	; 93
   113da:	ce 01       	movw	r24, r28
   113dc:	8f 5b       	subi	r24, 0xBF	; 191
   113de:	9f 4f       	sbci	r25, 0xFF	; 255
   113e0:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
itoa():
   113e4:	4a e0       	ldi	r20, 0x0A	; 10
   113e6:	be 01       	movw	r22, r28
   113e8:	6f 5f       	subi	r22, 0xFF	; 255
   113ea:	7f 4f       	sbci	r23, 0xFF	; 255
   113ec:	80 91 4e 11 	lds	r24, 0x114E	; 0x80114e <mqtt_error>
   113f0:	90 91 4f 11 	lds	r25, 0x114F	; 0x80114f <mqtt_error+0x1>
   113f4:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   113f8:	ae 01       	movw	r20, r28
   113fa:	4f 5f       	subi	r20, 0xFF	; 255
   113fc:	5f 4f       	sbci	r21, 0xFF	; 255
   113fe:	be 01       	movw	r22, r28
   11400:	6f 5b       	subi	r22, 0xBF	; 191
   11402:	7f 4f       	sbci	r23, 0xFF	; 255
   11404:	c7 01       	movw	r24, r14
   11406:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1140a:	6e e0       	ldi	r22, 0x0E	; 14
   1140c:	7d e5       	ldi	r23, 0x5D	; 93
   1140e:	ce 01       	movw	r24, r28
   11410:	8f 5b       	subi	r24, 0xBF	; 191
   11412:	9f 4f       	sbci	r25, 0xFF	; 255
   11414:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
itoa():
   11418:	4a e0       	ldi	r20, 0x0A	; 10
   1141a:	be 01       	movw	r22, r28
   1141c:	6f 5f       	subi	r22, 0xFF	; 255
   1141e:	7f 4f       	sbci	r23, 0xFF	; 255
   11420:	80 91 f6 10 	lds	r24, 0x10F6	; 0x8010f6 <mqtt_receive_message>
   11424:	90 91 f7 10 	lds	r25, 0x10F7	; 0x8010f7 <mqtt_receive_message+0x1>
   11428:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   1142c:	10 92 f7 10 	sts	0x10F7, r1	; 0x8010f7 <mqtt_receive_message+0x1>
   11430:	10 92 f6 10 	sts	0x10F6, r1	; 0x8010f6 <mqtt_receive_message>
   11434:	ae 01       	movw	r20, r28
   11436:	4f 5f       	subi	r20, 0xFF	; 255
   11438:	5f 4f       	sbci	r21, 0xFF	; 255
   1143a:	be 01       	movw	r22, r28
   1143c:	6f 5b       	subi	r22, 0xBF	; 191
   1143e:	7f 4f       	sbci	r23, 0xFF	; 255
   11440:	c7 01       	movw	r24, r14
   11442:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   11446:	6a ef       	ldi	r22, 0xFA	; 250
   11448:	7c e5       	ldi	r23, 0x5C	; 92
   1144a:	ce 01       	movw	r24, r28
   1144c:	8f 5b       	subi	r24, 0xBF	; 191
   1144e:	9f 4f       	sbci	r25, 0xFF	; 255
   11450:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
itoa():
   11454:	4a e0       	ldi	r20, 0x0A	; 10
   11456:	be 01       	movw	r22, r28
   11458:	6f 5f       	subi	r22, 0xFF	; 255
   1145a:	7f 4f       	sbci	r23, 0xFF	; 255
   1145c:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <mqtt_process_message>
   11460:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <mqtt_process_message+0x1>
   11464:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   11468:	10 92 f5 10 	sts	0x10F5, r1	; 0x8010f5 <mqtt_process_message+0x1>
   1146c:	10 92 f4 10 	sts	0x10F4, r1	; 0x8010f4 <mqtt_process_message>
   11470:	ae 01       	movw	r20, r28
   11472:	4f 5f       	subi	r20, 0xFF	; 255
   11474:	5f 4f       	sbci	r21, 0xFF	; 255
   11476:	be 01       	movw	r22, r28
   11478:	6f 5b       	subi	r22, 0xBF	; 191
   1147a:	7f 4f       	sbci	r23, 0xFF	; 255
   1147c:	c7 01       	movw	r24, r14
   1147e:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   11482:	19 82       	std	Y+1, r1	; 0x01
   11484:	0a e0       	ldi	r16, 0x0A	; 10
   11486:	24 e0       	ldi	r18, 0x04	; 4
   11488:	42 e0       	ldi	r20, 0x02	; 2
   1148a:	51 e1       	ldi	r21, 0x11	; 17
   1148c:	6e e2       	ldi	r22, 0x2E	; 46
   1148e:	ce 01       	movw	r24, r28
   11490:	01 96       	adiw	r24, 0x01	; 1
   11492:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   11496:	6f ee       	ldi	r22, 0xEF	; 239
   11498:	7c e5       	ldi	r23, 0x5C	; 92
   1149a:	ce 01       	movw	r24, r28
   1149c:	8f 5b       	subi	r24, 0xBF	; 191
   1149e:	9f 4f       	sbci	r25, 0xFF	; 255
   114a0:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   114a4:	ae 01       	movw	r20, r28
   114a6:	4f 5f       	subi	r20, 0xFF	; 255
   114a8:	5f 4f       	sbci	r21, 0xFF	; 255
   114aa:	be 01       	movw	r22, r28
   114ac:	6f 5b       	subi	r22, 0xBF	; 191
   114ae:	7f 4f       	sbci	r23, 0xFF	; 255
   114b0:	c7 01       	movw	r24, r14
   114b2:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   114b6:	6e ec       	ldi	r22, 0xCE	; 206
   114b8:	7c e5       	ldi	r23, 0x5C	; 92
   114ba:	ce 01       	movw	r24, r28
   114bc:	8f 5b       	subi	r24, 0xBF	; 191
   114be:	9f 4f       	sbci	r25, 0xFF	; 255
   114c0:	0e 94 f3 e1 	call	0x1c3e6	; 0x1c3e6 <strcpy_P>
   114c4:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <count_know_mqtt>
itoa():
   114c8:	4a e0       	ldi	r20, 0x0A	; 10
   114ca:	be 01       	movw	r22, r28
   114cc:	6f 5f       	subi	r22, 0xFF	; 255
   114ce:	7f 4f       	sbci	r23, 0xFF	; 255
   114d0:	90 e0       	ldi	r25, 0x00	; 0
   114d2:	0e 94 7c e2 	call	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   114d6:	ae 01       	movw	r20, r28
   114d8:	4f 5f       	subi	r20, 0xFF	; 255
   114da:	5f 4f       	sbci	r21, 0xFF	; 255
   114dc:	be 01       	movw	r22, r28
   114de:	6f 5b       	subi	r22, 0xBF	; 191
   114e0:	7f 4f       	sbci	r23, 0xFF	; 255
   114e2:	c7 01       	movw	r24, r14
   114e4:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   114e8:	10 92 4f 11 	sts	0x114F, r1	; 0x80114f <mqtt_error+0x1>
   114ec:	10 92 4e 11 	sts	0x114E, r1	; 0x80114e <mqtt_error>
   114f0:	c0 58       	subi	r28, 0x80	; 128
   114f2:	df 4f       	sbci	r29, 0xFF	; 255
   114f4:	0f b6       	in	r0, 0x3f	; 63
   114f6:	f8 94       	cli
   114f8:	de bf       	out	0x3e, r29	; 62
   114fa:	0f be       	out	0x3f, r0	; 63
   114fc:	cd bf       	out	0x3d, r28	; 61
   114fe:	df 91       	pop	r29
   11500:	cf 91       	pop	r28
   11502:	0f 91       	pop	r16
   11504:	ff 90       	pop	r15
   11506:	ef 90       	pop	r14
   11508:	08 95       	ret

0001150a <know_mqtt_create_or_update(char*, unsigned char)>:
_Z26know_mqtt_create_or_updatePch():
   1150a:	08 95       	ret

0001150c <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)>:
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime():
   1150c:	8f 92       	push	r8
   1150e:	9f 92       	push	r9
   11510:	af 92       	push	r10
   11512:	bf 92       	push	r11
   11514:	cf 92       	push	r12
   11516:	ef 92       	push	r14
   11518:	ff 92       	push	r15
   1151a:	0f 93       	push	r16
   1151c:	1f 93       	push	r17
   1151e:	cf 93       	push	r28
   11520:	df 93       	push	r29
   11522:	cd b7       	in	r28, 0x3d	; 61
   11524:	de b7       	in	r29, 0x3e	; 62
   11526:	6b 97       	sbiw	r28, 0x1b	; 27
   11528:	0f b6       	in	r0, 0x3f	; 63
   1152a:	f8 94       	cli
   1152c:	de bf       	out	0x3e, r29	; 62
   1152e:	0f be       	out	0x3f, r0	; 63
   11530:	cd bf       	out	0x3d, r28	; 61
   11532:	5c 01       	movw	r10, r24
   11534:	14 2f       	mov	r17, r20
   11536:	49 01       	movw	r8, r18
   11538:	19 82       	std	Y+1, r1	; 0x01
   1153a:	0a e0       	ldi	r16, 0x0A	; 10
   1153c:	24 e0       	ldi	r18, 0x04	; 4
   1153e:	4a e4       	ldi	r20, 0x4A	; 74
   11540:	51 e1       	ldi	r21, 0x11	; 17
   11542:	6e e2       	ldi	r22, 0x2E	; 46
   11544:	ce 01       	movw	r24, r28
   11546:	01 96       	adiw	r24, 0x01	; 1
   11548:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   1154c:	c5 01       	movw	r24, r10
   1154e:	0e 94 1d d4 	call	0x1a83a	; 0x1a83a <NTPClient::begin()>
   11552:	80 e1       	ldi	r24, 0x10	; 16
   11554:	9e e0       	ldi	r25, 0x0E	; 14
   11556:	18 9f       	mul	r17, r24
   11558:	b0 01       	movw	r22, r0
   1155a:	19 9f       	mul	r17, r25
   1155c:	70 0d       	add	r23, r0
   1155e:	11 24       	eor	r1, r1
   11560:	c5 01       	movw	r24, r10
   11562:	0e 94 e4 d4 	call	0x1a9c8	; 0x1a9c8 <NTPClient::setTimeOffset(int)>
   11566:	be 01       	movw	r22, r28
   11568:	6f 5f       	subi	r22, 0xFF	; 255
   1156a:	7f 4f       	sbci	r23, 0xFF	; 255
   1156c:	c5 01       	movw	r24, r10
   1156e:	0e 94 f4 d4 	call	0x1a9e8	; 0x1a9e8 <NTPClient::setPoolServerName(char const*)>
   11572:	c5 01       	movw	r24, r10
   11574:	0e 94 ab d5 	call	0x1ab56	; 0x1ab56 <NTPClient::update()>
   11578:	10 e0       	ldi	r17, 0x00	; 0
   1157a:	88 23       	and	r24, r24
   1157c:	79 f1       	breq	.+94     	; 0x115dc <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)+0xd0>
   1157e:	c5 01       	movw	r24, r10
   11580:	0e 94 ca d4 	call	0x1a994	; 0x1a994 <NTPClient::getSeconds() const>
   11584:	c8 2e       	mov	r12, r24
   11586:	c5 01       	movw	r24, r10
   11588:	0e 94 ba d4 	call	0x1a974	; 0x1a974 <NTPClient::getMinutes() const>
   1158c:	e8 2e       	mov	r14, r24
   1158e:	c5 01       	movw	r24, r10
   11590:	0e 94 aa d4 	call	0x1a954	; 0x1a954 <NTPClient::getHours() const>
   11594:	08 2f       	mov	r16, r24
   11596:	c5 01       	movw	r24, r10
   11598:	0e 94 8e d4 	call	0x1a91c	; 0x1a91c <NTPClient::getDate() const>
   1159c:	f8 2e       	mov	r15, r24
   1159e:	c5 01       	movw	r24, r10
   115a0:	0e 94 71 d4 	call	0x1a8e2	; 0x1a8e2 <NTPClient::getMonth() const>
   115a4:	18 2f       	mov	r17, r24
   115a6:	c5 01       	movw	r24, r10
   115a8:	0e 94 55 d4 	call	0x1a8aa	; 0x1a8aa <NTPClient::getYear() const>
   115ac:	2f 2d       	mov	r18, r15
   115ae:	41 2f       	mov	r20, r17
   115b0:	bc 01       	movw	r22, r24
   115b2:	ce 01       	movw	r24, r28
   115b4:	45 96       	adiw	r24, 0x15	; 21
   115b6:	0e 94 87 cc 	call	0x1990e	; 0x1990e <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
   115ba:	ce 01       	movw	r24, r28
   115bc:	45 96       	adiw	r24, 0x15	; 21
   115be:	0e 94 ae cc 	call	0x1995c	; 0x1995c <RTC_DS1307::adjust(DateTime const&)>
   115c2:	ce 01       	movw	r24, r28
   115c4:	45 96       	adiw	r24, 0x15	; 21
   115c6:	0e 94 3e cd 	call	0x19a7c	; 0x19a7c <RTC_DS1307::now()>
   115ca:	87 e0       	ldi	r24, 0x07	; 7
   115cc:	fe 01       	movw	r30, r28
   115ce:	75 96       	adiw	r30, 0x15	; 21
   115d0:	d4 01       	movw	r26, r8
   115d2:	01 90       	ld	r0, Z+
   115d4:	0d 92       	st	X+, r0
   115d6:	8a 95       	dec	r24
   115d8:	e1 f7       	brne	.-8      	; 0x115d2 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)+0xc6>
   115da:	11 e0       	ldi	r17, 0x01	; 1
   115dc:	c5 01       	movw	r24, r10
   115de:	0e 94 d4 d4 	call	0x1a9a8	; 0x1a9a8 <NTPClient::end()>
   115e2:	81 2f       	mov	r24, r17
   115e4:	6b 96       	adiw	r28, 0x1b	; 27
   115e6:	0f b6       	in	r0, 0x3f	; 63
   115e8:	f8 94       	cli
   115ea:	de bf       	out	0x3e, r29	; 62
   115ec:	0f be       	out	0x3f, r0	; 63
   115ee:	cd bf       	out	0x3d, r28	; 61
   115f0:	df 91       	pop	r29
   115f2:	cf 91       	pop	r28
   115f4:	1f 91       	pop	r17
   115f6:	0f 91       	pop	r16
   115f8:	ff 90       	pop	r15
   115fa:	ef 90       	pop	r14
   115fc:	cf 90       	pop	r12
   115fe:	bf 90       	pop	r11
   11600:	af 90       	pop	r10
   11602:	9f 90       	pop	r9
   11604:	8f 90       	pop	r8
   11606:	08 95       	ret

00011608 <ntp_check(NTPClient*)>:
_Z9ntp_checkP9NTPClient():
   11608:	ef 92       	push	r14
   1160a:	ff 92       	push	r15
   1160c:	0f 93       	push	r16
   1160e:	1f 93       	push	r17
   11610:	cf 93       	push	r28
   11612:	df 93       	push	r29
   11614:	cd b7       	in	r28, 0x3d	; 61
   11616:	de b7       	in	r29, 0x3e	; 62
   11618:	64 97       	sbiw	r28, 0x14	; 20
   1161a:	0f b6       	in	r0, 0x3f	; 63
   1161c:	f8 94       	cli
   1161e:	de bf       	out	0x3e, r29	; 62
   11620:	0f be       	out	0x3f, r0	; 63
   11622:	cd bf       	out	0x3d, r28	; 61
   11624:	7c 01       	movw	r14, r24
   11626:	19 82       	std	Y+1, r1	; 0x01
   11628:	0a e0       	ldi	r16, 0x0A	; 10
   1162a:	24 e0       	ldi	r18, 0x04	; 4
   1162c:	4a e4       	ldi	r20, 0x4A	; 74
   1162e:	51 e1       	ldi	r21, 0x11	; 17
   11630:	6e e2       	ldi	r22, 0x2E	; 46
   11632:	ce 01       	movw	r24, r28
   11634:	01 96       	adiw	r24, 0x01	; 1
   11636:	0e 94 4e be 	call	0x17c9c	; 0x17c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   1163a:	c7 01       	movw	r24, r14
   1163c:	0e 94 1d d4 	call	0x1a83a	; 0x1a83a <NTPClient::begin()>
   11640:	60 e1       	ldi	r22, 0x10	; 16
   11642:	7e e0       	ldi	r23, 0x0E	; 14
   11644:	c7 01       	movw	r24, r14
   11646:	0e 94 e4 d4 	call	0x1a9c8	; 0x1a9c8 <NTPClient::setTimeOffset(int)>
   1164a:	be 01       	movw	r22, r28
   1164c:	6f 5f       	subi	r22, 0xFF	; 255
   1164e:	7f 4f       	sbci	r23, 0xFF	; 255
   11650:	c7 01       	movw	r24, r14
   11652:	0e 94 f4 d4 	call	0x1a9e8	; 0x1a9e8 <NTPClient::setPoolServerName(char const*)>
   11656:	41 e0       	ldi	r20, 0x01	; 1
   11658:	50 e0       	ldi	r21, 0x00	; 0
   1165a:	60 e0       	ldi	r22, 0x00	; 0
   1165c:	70 e0       	ldi	r23, 0x00	; 0
   1165e:	c7 01       	movw	r24, r14
   11660:	0e 94 ee d4 	call	0x1a9dc	; 0x1a9dc <NTPClient::setUpdateInterval(unsigned long)>
   11664:	c7 01       	movw	r24, r14
   11666:	0e 94 ab d5 	call	0x1ab56	; 0x1ab56 <NTPClient::update()>
   1166a:	18 2f       	mov	r17, r24
   1166c:	c7 01       	movw	r24, r14
   1166e:	0e 94 d4 d4 	call	0x1a9a8	; 0x1a9a8 <NTPClient::end()>
   11672:	81 2f       	mov	r24, r17
   11674:	64 96       	adiw	r28, 0x14	; 20
   11676:	0f b6       	in	r0, 0x3f	; 63
   11678:	f8 94       	cli
   1167a:	de bf       	out	0x3e, r29	; 62
   1167c:	0f be       	out	0x3f, r0	; 63
   1167e:	cd bf       	out	0x3d, r28	; 61
   11680:	df 91       	pop	r29
   11682:	cf 91       	pop	r28
   11684:	1f 91       	pop	r17
   11686:	0f 91       	pop	r16
   11688:	ff 90       	pop	r15
   1168a:	ef 90       	pop	r14
   1168c:	08 95       	ret

0001168e <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
   1168e:	cf 93       	push	r28
   11690:	df 93       	push	r29
   11692:	cd b7       	in	r28, 0x3d	; 61
   11694:	de b7       	in	r29, 0x3e	; 62
   11696:	60 97       	sbiw	r28, 0x10	; 16
   11698:	0f b6       	in	r0, 0x3f	; 63
   1169a:	f8 94       	cli
   1169c:	de bf       	out	0x3e, r29	; 62
   1169e:	0f be       	out	0x3f, r0	; 63
   116a0:	cd bf       	out	0x3d, r28	; 61
   116a2:	90 91 f2 10 	lds	r25, 0x10F2	; 0x8010f2 <mqtt_log_cnt>
   116a6:	e9 2f       	mov	r30, r25
   116a8:	f0 e0       	ldi	r31, 0x00	; 0
   116aa:	ee 58       	subi	r30, 0x8E	; 142
   116ac:	ff 4e       	sbci	r31, 0xEF	; 239
   116ae:	80 83       	st	Z, r24
   116b0:	11 82       	std	Z+1, r1	; 0x01
   116b2:	9f 5f       	subi	r25, 0xFF	; 255
   116b4:	90 93 f2 10 	sts	0x10F2, r25	; 0x8010f2 <mqtt_log_cnt>
   116b8:	97 fd       	sbrc	r25, 7
   116ba:	04 c0       	rjmp	.+8      	; 0x116c4 <printf_via_mqtt(char, __file*)+0x36>
   116bc:	8a 30       	cpi	r24, 0x0A	; 10
   116be:	11 f0       	breq	.+4      	; 0x116c4 <printf_via_mqtt(char, __file*)+0x36>
   116c0:	81 11       	cpse	r24, r1
   116c2:	13 c0       	rjmp	.+38     	; 0x116ea <printf_via_mqtt(char, __file*)+0x5c>
   116c4:	67 e7       	ldi	r22, 0x77	; 119
   116c6:	78 e0       	ldi	r23, 0x08	; 8
   116c8:	ce 01       	movw	r24, r28
   116ca:	01 96       	adiw	r24, 0x01	; 1
   116cc:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
   116d0:	42 e7       	ldi	r20, 0x72	; 114
   116d2:	50 e1       	ldi	r21, 0x10	; 16
   116d4:	be 01       	movw	r22, r28
   116d6:	6f 5f       	subi	r22, 0xFF	; 255
   116d8:	7f 4f       	sbci	r23, 0xFF	; 255
   116da:	80 91 70 10 	lds	r24, 0x1070	; 0x801070 <pub_mqtt_client>
   116de:	90 91 71 10 	lds	r25, 0x1071	; 0x801071 <pub_mqtt_client+0x1>
   116e2:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   116e6:	10 92 f2 10 	sts	0x10F2, r1	; 0x8010f2 <mqtt_log_cnt>
   116ea:	60 96       	adiw	r28, 0x10	; 16
   116ec:	0f b6       	in	r0, 0x3f	; 63
   116ee:	f8 94       	cli
   116f0:	de bf       	out	0x3e, r29	; 62
   116f2:	0f be       	out	0x3f, r0	; 63
   116f4:	cd bf       	out	0x3d, r28	; 61
   116f6:	df 91       	pop	r29
   116f8:	cf 91       	pop	r28
   116fa:	08 95       	ret

000116fc <log_error(PubSubClient*, char*)>:
_Z9log_errorP12PubSubClientPc():
   116fc:	ef 92       	push	r14
   116fe:	ff 92       	push	r15
   11700:	0f 93       	push	r16
   11702:	1f 93       	push	r17
   11704:	cf 93       	push	r28
   11706:	df 93       	push	r29
   11708:	00 d0       	rcall	.+0      	; 0x1170a <log_error(PubSubClient*, char*)+0xe>
   1170a:	00 d0       	rcall	.+0      	; 0x1170c <log_error(PubSubClient*, char*)+0x10>
   1170c:	00 d0       	rcall	.+0      	; 0x1170e <log_error(PubSubClient*, char*)+0x12>
   1170e:	cd b7       	in	r28, 0x3d	; 61
   11710:	de b7       	in	r29, 0x3e	; 62
   11712:	8c 01       	movw	r16, r24
   11714:	7b 01       	movw	r14, r22
   11716:	62 e8       	ldi	r22, 0x82	; 130
   11718:	78 e0       	ldi	r23, 0x08	; 8
   1171a:	ce 01       	movw	r24, r28
   1171c:	01 96       	adiw	r24, 0x01	; 1
   1171e:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
   11722:	a7 01       	movw	r20, r14
   11724:	be 01       	movw	r22, r28
   11726:	6f 5f       	subi	r22, 0xFF	; 255
   11728:	7f 4f       	sbci	r23, 0xFF	; 255
   1172a:	c8 01       	movw	r24, r16
   1172c:	0e 94 50 88 	call	0x110a0	; 0x110a0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   11730:	29 96       	adiw	r28, 0x09	; 9
   11732:	0f b6       	in	r0, 0x3f	; 63
   11734:	f8 94       	cli
   11736:	de bf       	out	0x3e, r29	; 62
   11738:	0f be       	out	0x3f, r0	; 63
   1173a:	cd bf       	out	0x3d, r28	; 61
   1173c:	df 91       	pop	r29
   1173e:	cf 91       	pop	r28
   11740:	1f 91       	pop	r17
   11742:	0f 91       	pop	r16
   11744:	ff 90       	pop	r15
   11746:	ef 90       	pop	r14
   11748:	08 95       	ret

0001174a <mqtt_set_public_mqtt_client(PubSubClient*)>:
_Z27mqtt_set_public_mqtt_clientP12PubSubClient():
   1174a:	90 93 71 10 	sts	0x1071, r25	; 0x801071 <pub_mqtt_client+0x1>
   1174e:	80 93 70 10 	sts	0x1070, r24	; 0x801070 <pub_mqtt_client>
   11752:	08 95       	ret

00011754 <_GLOBAL__sub_I_mqtt_error>:
_GLOBAL__sub_I_mqtt_error():
   11754:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   11756:	00 e0       	ldi	r16, 0x00	; 0
   11758:	20 e0       	ldi	r18, 0x00	; 0
   1175a:	40 e0       	ldi	r20, 0x00	; 0
   1175c:	60 e0       	ldi	r22, 0x00	; 0
   1175e:	80 e5       	ldi	r24, 0x50	; 80
   11760:	91 e1       	ldi	r25, 0x11	; 17
   11762:	0e 94 4b da 	call	0x1b496	; 0x1b496 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN16struct_my_deviceC4Ev():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.h:55
#define TYPE_THERMCTL 1
#define TYPE_TERMBIG 2
#define TYPE_BRANA 3
#define TYPE_MASTER 4

typedef struct struct_my_device
   11766:	8b e5       	ldi	r24, 0x5B	; 91
   11768:	97 e0       	ldi	r25, 0x07	; 7
   1176a:	90 93 21 11 	sts	0x1121, r25	; 0x801121 <device+0x25>
   1176e:	80 93 20 11 	sts	0x1120, r24	; 0x801120 <device+0x24>
_GLOBAL__sub_I_mqtt_error():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:466
   11772:	0f 91       	pop	r16
   11774:	08 95       	ret

00011776 <_GLOBAL__sub_I_scan_rf_net_enable>:
_GLOBAL__sub_I_scan_rf_net_enable():
/tmp/arduino_build_41303/sketch/saric_nrf.cpp:93
      strcat(payload, tmp1);
      strcat(payload, " ");
    }
    send_mqtt_general_payload(mqtt_client, topic, payload);
  }
}
   11776:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   11778:	00 e0       	ldi	r16, 0x00	; 0
   1177a:	20 e0       	ldi	r18, 0x00	; 0
   1177c:	40 e0       	ldi	r20, 0x00	; 0
   1177e:	60 e0       	ldi	r22, 0x00	; 0
   11780:	87 e5       	ldi	r24, 0x57	; 87
   11782:	91 e1       	ldi	r25, 0x11	; 17
   11784:	0e 94 4b da 	call	0x1b496	; 0x1b496 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I_scan_rf_net_enable():
/tmp/arduino_build_41303/sketch/saric_nrf.cpp:93
   11788:	0f 91       	pop	r16
   1178a:	08 95       	ret

0001178c <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:199
}

uint8_t tds_get_idx_from_wrom(uint8_t id)
{
  return w_rom[id].tds_idx;
}
   1178c:	0c 94 19 ea 	jmp	0x1d432	; 0x1d432 <eeprom_read_byte>

00011790 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   11790:	0c 94 21 ea 	jmp	0x1d442	; 0x1d442 <eeprom_write_byte>

00011794 <count_use_tds()>:
_Z13count_use_tdsv():
   11794:	1f 93       	push	r17
   11796:	cf 93       	push	r28
   11798:	df 93       	push	r29
   1179a:	c8 ec       	ldi	r28, 0xC8	; 200
   1179c:	d0 e0       	ldi	r29, 0x00	; 0
   1179e:	10 e0       	ldi	r17, 0x00	; 0
   117a0:	ce 01       	movw	r24, r28
   117a2:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <EEPROMClass::read(int) [clone .isra.0]>
   117a6:	81 30       	cpi	r24, 0x01	; 1
   117a8:	09 f4       	brne	.+2      	; 0x117ac <count_use_tds()+0x18>
   117aa:	1f 5f       	subi	r17, 0xFF	; 255
   117ac:	66 96       	adiw	r28, 0x16	; 22
   117ae:	cc 34       	cpi	r28, 0x4C	; 76
   117b0:	81 e0       	ldi	r24, 0x01	; 1
   117b2:	d8 07       	cpc	r29, r24
   117b4:	a9 f7       	brne	.-22     	; 0x117a0 <count_use_tds()+0xc>
   117b6:	81 2f       	mov	r24, r17
   117b8:	df 91       	pop	r29
   117ba:	cf 91       	pop	r28
   117bc:	1f 91       	pop	r17
   117be:	08 95       	ret

000117c0 <tds_used(unsigned char)>:
_Z8tds_usedh():
   117c0:	86 30       	cpi	r24, 0x06	; 6
   117c2:	40 f4       	brcc	.+16     	; 0x117d4 <tds_used(unsigned char)+0x14>
   117c4:	26 e1       	ldi	r18, 0x16	; 22
   117c6:	82 9f       	mul	r24, r18
   117c8:	c0 01       	movw	r24, r0
   117ca:	11 24       	eor	r1, r1
   117cc:	88 53       	subi	r24, 0x38	; 56
   117ce:	9f 4f       	sbci	r25, 0xFF	; 255
   117d0:	0c 94 c6 8b 	jmp	0x1178c	; 0x1178c <EEPROMClass::read(int) [clone .isra.0]>
   117d4:	08 95       	ret

000117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
   117d6:	af 92       	push	r10
   117d8:	bf 92       	push	r11
   117da:	cf 92       	push	r12
   117dc:	df 92       	push	r13
   117de:	ef 92       	push	r14
   117e0:	ff 92       	push	r15
   117e2:	0f 93       	push	r16
   117e4:	1f 93       	push	r17
   117e6:	cf 93       	push	r28
   117e8:	df 93       	push	r29
   117ea:	86 30       	cpi	r24, 0x06	; 6
   117ec:	08 f0       	brcs	.+2      	; 0x117f0 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
   117ee:	56 c0       	rjmp	.+172    	; 0x1189c <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
   117f0:	8b 01       	movw	r16, r22
   117f2:	96 e1       	ldi	r25, 0x16	; 22
   117f4:	89 9f       	mul	r24, r25
   117f6:	e0 01       	movw	r28, r0
   117f8:	11 24       	eor	r1, r1
   117fa:	ce 01       	movw	r24, r28
   117fc:	88 53       	subi	r24, 0x38	; 56
   117fe:	9f 4f       	sbci	r25, 0xFF	; 255
   11800:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <EEPROMClass::read(int) [clone .isra.0]>
   11804:	f8 01       	movw	r30, r16
   11806:	81 93       	st	Z+, r24
   11808:	6f 01       	movw	r12, r30
   1180a:	7e 01       	movw	r14, r28
   1180c:	f9 ec       	ldi	r31, 0xC9	; 201
   1180e:	ef 0e       	add	r14, r31
   11810:	f1 1c       	adc	r15, r1
   11812:	5e 01       	movw	r10, r28
   11814:	81 ed       	ldi	r24, 0xD1	; 209
   11816:	a8 0e       	add	r10, r24
   11818:	b1 1c       	adc	r11, r1
   1181a:	c7 01       	movw	r24, r14
   1181c:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <EEPROMClass::read(int) [clone .isra.0]>
   11820:	f6 01       	movw	r30, r12
   11822:	81 93       	st	Z+, r24
   11824:	6f 01       	movw	r12, r30
   11826:	c7 01       	movw	r24, r14
   11828:	0b 96       	adiw	r24, 0x0b	; 11
   1182a:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <EEPROMClass::read(int) [clone .isra.0]>
   1182e:	f6 01       	movw	r30, r12
   11830:	82 87       	std	Z+10, r24	; 0x0a
   11832:	ff ef       	ldi	r31, 0xFF	; 255
   11834:	ef 1a       	sub	r14, r31
   11836:	ff 0a       	sbc	r15, r31
   11838:	ea 14       	cp	r14, r10
   1183a:	fb 04       	cpc	r15, r11
   1183c:	71 f7       	brne	.-36     	; 0x1181a <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
   1183e:	f8 01       	movw	r30, r16
   11840:	13 8a       	std	Z+19, r1	; 0x13
   11842:	c7 01       	movw	r24, r14
   11844:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <EEPROMClass::read(int) [clone .isra.0]>
   11848:	f8 01       	movw	r30, r16
   1184a:	81 87       	std	Z+9, r24	; 0x09
   1184c:	ce 01       	movw	r24, r28
   1184e:	8e 52       	subi	r24, 0x2E	; 46
   11850:	9f 4f       	sbci	r25, 0xFF	; 255
   11852:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <EEPROMClass::read(int) [clone .isra.0]>
   11856:	f8 2e       	mov	r15, r24
   11858:	ce 01       	movw	r24, r28
   1185a:	8d 52       	subi	r24, 0x2D	; 45
   1185c:	9f 4f       	sbci	r25, 0xFF	; 255
   1185e:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <EEPROMClass::read(int) [clone .isra.0]>
   11862:	2f 2d       	mov	r18, r15
   11864:	30 e0       	ldi	r19, 0x00	; 0
   11866:	32 2f       	mov	r19, r18
   11868:	22 27       	eor	r18, r18
   1186a:	82 0f       	add	r24, r18
   1186c:	93 2f       	mov	r25, r19
   1186e:	91 1d       	adc	r25, r1
   11870:	f8 01       	movw	r30, r16
   11872:	93 87       	std	Z+11, r25	; 0x0b
   11874:	82 87       	std	Z+10, r24	; 0x0a
   11876:	ce 01       	movw	r24, r28
   11878:	84 52       	subi	r24, 0x24	; 36
   1187a:	9f 4f       	sbci	r25, 0xFF	; 255
   1187c:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <EEPROMClass::read(int) [clone .isra.0]>
   11880:	f8 01       	movw	r30, r16
   11882:	84 8b       	std	Z+20, r24	; 0x14
   11884:	81 e0       	ldi	r24, 0x01	; 1
   11886:	df 91       	pop	r29
   11888:	cf 91       	pop	r28
   1188a:	1f 91       	pop	r17
   1188c:	0f 91       	pop	r16
   1188e:	ff 90       	pop	r15
   11890:	ef 90       	pop	r14
   11892:	df 90       	pop	r13
   11894:	cf 90       	pop	r12
   11896:	bf 90       	pop	r11
   11898:	af 90       	pop	r10
   1189a:	08 95       	ret
   1189c:	80 e0       	ldi	r24, 0x00	; 0
   1189e:	f3 cf       	rjmp	.-26     	; 0x11886 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

000118a0 <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
   118a0:	af 92       	push	r10
   118a2:	bf 92       	push	r11
   118a4:	cf 92       	push	r12
   118a6:	df 92       	push	r13
   118a8:	ef 92       	push	r14
   118aa:	ff 92       	push	r15
   118ac:	0f 93       	push	r16
   118ae:	1f 93       	push	r17
   118b0:	cf 93       	push	r28
   118b2:	df 93       	push	r29
   118b4:	86 30       	cpi	r24, 0x06	; 6
   118b6:	08 f0       	brcs	.+2      	; 0x118ba <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
   118b8:	49 c0       	rjmp	.+146    	; 0x1194c <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
   118ba:	6b 01       	movw	r12, r22
   118bc:	96 e1       	ldi	r25, 0x16	; 22
   118be:	89 9f       	mul	r24, r25
   118c0:	e0 01       	movw	r28, r0
   118c2:	11 24       	eor	r1, r1
   118c4:	f6 01       	movw	r30, r12
   118c6:	61 91       	ld	r22, Z+
   118c8:	7f 01       	movw	r14, r30
   118ca:	ce 01       	movw	r24, r28
   118cc:	88 53       	subi	r24, 0x38	; 56
   118ce:	9f 4f       	sbci	r25, 0xFF	; 255
   118d0:	0e 94 c8 8b 	call	0x11790	; 0x11790 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   118d4:	8e 01       	movw	r16, r28
   118d6:	07 53       	subi	r16, 0x37	; 55
   118d8:	1f 4f       	sbci	r17, 0xFF	; 255
   118da:	5e 01       	movw	r10, r28
   118dc:	f1 ed       	ldi	r31, 0xD1	; 209
   118de:	af 0e       	add	r10, r31
   118e0:	b1 1c       	adc	r11, r1
   118e2:	f7 01       	movw	r30, r14
   118e4:	61 91       	ld	r22, Z+
   118e6:	7f 01       	movw	r14, r30
_ZN5EERefaSEh():
   118e8:	c8 01       	movw	r24, r16
   118ea:	0e 94 21 ea 	call	0x1d442	; 0x1d442 <eeprom_write_byte>
   118ee:	f7 01       	movw	r30, r14
   118f0:	62 85       	ldd	r22, Z+10	; 0x0a
   118f2:	c8 01       	movw	r24, r16
   118f4:	0b 96       	adiw	r24, 0x0b	; 11
   118f6:	0e 94 21 ea 	call	0x1d442	; 0x1d442 <eeprom_write_byte>
   118fa:	0f 5f       	subi	r16, 0xFF	; 255
   118fc:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12set_tds18s20hP15struct_DDS18s20():
   118fe:	0a 15       	cp	r16, r10
   11900:	1b 05       	cpc	r17, r11
   11902:	79 f7       	brne	.-34     	; 0x118e2 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
   11904:	f6 01       	movw	r30, r12
   11906:	61 85       	ldd	r22, Z+9	; 0x09
   11908:	c8 01       	movw	r24, r16
   1190a:	0e 94 c8 8b 	call	0x11790	; 0x11790 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1190e:	f6 01       	movw	r30, r12
   11910:	63 85       	ldd	r22, Z+11	; 0x0b
   11912:	ce 01       	movw	r24, r28
   11914:	8e 52       	subi	r24, 0x2E	; 46
   11916:	9f 4f       	sbci	r25, 0xFF	; 255
   11918:	0e 94 c8 8b 	call	0x11790	; 0x11790 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1191c:	f6 01       	movw	r30, r12
   1191e:	62 85       	ldd	r22, Z+10	; 0x0a
   11920:	ce 01       	movw	r24, r28
   11922:	8d 52       	subi	r24, 0x2D	; 45
   11924:	9f 4f       	sbci	r25, 0xFF	; 255
   11926:	0e 94 c8 8b 	call	0x11790	; 0x11790 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1192a:	f6 01       	movw	r30, r12
   1192c:	64 89       	ldd	r22, Z+20	; 0x14
   1192e:	ce 01       	movw	r24, r28
   11930:	84 52       	subi	r24, 0x24	; 36
   11932:	9f 4f       	sbci	r25, 0xFF	; 255
   11934:	df 91       	pop	r29
   11936:	cf 91       	pop	r28
   11938:	1f 91       	pop	r17
   1193a:	0f 91       	pop	r16
   1193c:	ff 90       	pop	r15
   1193e:	ef 90       	pop	r14
   11940:	df 90       	pop	r13
   11942:	cf 90       	pop	r12
   11944:	bf 90       	pop	r11
   11946:	af 90       	pop	r10
   11948:	0c 94 c8 8b 	jmp	0x11790	; 0x11790 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1194c:	df 91       	pop	r29
   1194e:	cf 91       	pop	r28
   11950:	1f 91       	pop	r17
   11952:	0f 91       	pop	r16
   11954:	ff 90       	pop	r15
   11956:	ef 90       	pop	r14
   11958:	df 90       	pop	r13
   1195a:	cf 90       	pop	r12
   1195c:	bf 90       	pop	r11
   1195e:	af 90       	pop	r10
   11960:	08 95       	ret

00011962 <tds_get_name(unsigned char, char*)>:
_Z12tds_get_namehPc():
   11962:	0f 93       	push	r16
   11964:	1f 93       	push	r17
   11966:	cf 93       	push	r28
   11968:	df 93       	push	r29
   1196a:	cd b7       	in	r28, 0x3d	; 61
   1196c:	de b7       	in	r29, 0x3e	; 62
   1196e:	66 97       	sbiw	r28, 0x16	; 22
   11970:	0f b6       	in	r0, 0x3f	; 63
   11972:	f8 94       	cli
   11974:	de bf       	out	0x3e, r29	; 62
   11976:	0f be       	out	0x3f, r0	; 63
   11978:	cd bf       	out	0x3d, r28	; 61
   1197a:	8b 01       	movw	r16, r22
   1197c:	be 01       	movw	r22, r28
   1197e:	6f 5f       	subi	r22, 0xFF	; 255
   11980:	7f 4f       	sbci	r23, 0xFF	; 255
   11982:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11986:	be 01       	movw	r22, r28
   11988:	63 5f       	subi	r22, 0xF3	; 243
   1198a:	7f 4f       	sbci	r23, 0xFF	; 255
   1198c:	c8 01       	movw	r24, r16
   1198e:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
   11992:	66 96       	adiw	r28, 0x16	; 22
   11994:	0f b6       	in	r0, 0x3f	; 63
   11996:	f8 94       	cli
   11998:	de bf       	out	0x3e, r29	; 62
   1199a:	0f be       	out	0x3f, r0	; 63
   1199c:	cd bf       	out	0x3d, r28	; 61
   1199e:	df 91       	pop	r29
   119a0:	cf 91       	pop	r28
   119a2:	1f 91       	pop	r17
   119a4:	0f 91       	pop	r16
   119a6:	08 95       	ret

000119a8 <tds_set_name(unsigned char, char*)>:
_Z12tds_set_namehPc():
   119a8:	ef 92       	push	r14
   119aa:	ff 92       	push	r15
   119ac:	1f 93       	push	r17
   119ae:	cf 93       	push	r28
   119b0:	df 93       	push	r29
   119b2:	cd b7       	in	r28, 0x3d	; 61
   119b4:	de b7       	in	r29, 0x3e	; 62
   119b6:	66 97       	sbiw	r28, 0x16	; 22
   119b8:	0f b6       	in	r0, 0x3f	; 63
   119ba:	f8 94       	cli
   119bc:	de bf       	out	0x3e, r29	; 62
   119be:	0f be       	out	0x3f, r0	; 63
   119c0:	cd bf       	out	0x3d, r28	; 61
   119c2:	18 2f       	mov	r17, r24
   119c4:	7b 01       	movw	r14, r22
   119c6:	be 01       	movw	r22, r28
   119c8:	6f 5f       	subi	r22, 0xFF	; 255
   119ca:	7f 4f       	sbci	r23, 0xFF	; 255
   119cc:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   119d0:	b7 01       	movw	r22, r14
   119d2:	ce 01       	movw	r24, r28
   119d4:	0d 96       	adiw	r24, 0x0d	; 13
   119d6:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
   119da:	be 01       	movw	r22, r28
   119dc:	6f 5f       	subi	r22, 0xFF	; 255
   119de:	7f 4f       	sbci	r23, 0xFF	; 255
   119e0:	81 2f       	mov	r24, r17
   119e2:	0e 94 50 8c 	call	0x118a0	; 0x118a0 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   119e6:	66 96       	adiw	r28, 0x16	; 22
   119e8:	0f b6       	in	r0, 0x3f	; 63
   119ea:	f8 94       	cli
   119ec:	de bf       	out	0x3e, r29	; 62
   119ee:	0f be       	out	0x3f, r0	; 63
   119f0:	cd bf       	out	0x3d, r28	; 61
   119f2:	df 91       	pop	r29
   119f4:	cf 91       	pop	r28
   119f6:	1f 91       	pop	r17
   119f8:	ff 90       	pop	r15
   119fa:	ef 90       	pop	r14
   119fc:	08 95       	ret

000119fe <tds_set_offset(unsigned char, int)>:
_Z14tds_set_offsethi():
   119fe:	ef 92       	push	r14
   11a00:	ff 92       	push	r15
   11a02:	1f 93       	push	r17
   11a04:	cf 93       	push	r28
   11a06:	df 93       	push	r29
   11a08:	cd b7       	in	r28, 0x3d	; 61
   11a0a:	de b7       	in	r29, 0x3e	; 62
   11a0c:	66 97       	sbiw	r28, 0x16	; 22
   11a0e:	0f b6       	in	r0, 0x3f	; 63
   11a10:	f8 94       	cli
   11a12:	de bf       	out	0x3e, r29	; 62
   11a14:	0f be       	out	0x3f, r0	; 63
   11a16:	cd bf       	out	0x3d, r28	; 61
   11a18:	18 2f       	mov	r17, r24
   11a1a:	7b 01       	movw	r14, r22
   11a1c:	be 01       	movw	r22, r28
   11a1e:	6f 5f       	subi	r22, 0xFF	; 255
   11a20:	7f 4f       	sbci	r23, 0xFF	; 255
   11a22:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11a26:	fc 86       	std	Y+12, r15	; 0x0c
   11a28:	eb 86       	std	Y+11, r14	; 0x0b
   11a2a:	be 01       	movw	r22, r28
   11a2c:	6f 5f       	subi	r22, 0xFF	; 255
   11a2e:	7f 4f       	sbci	r23, 0xFF	; 255
   11a30:	81 2f       	mov	r24, r17
   11a32:	0e 94 50 8c 	call	0x118a0	; 0x118a0 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   11a36:	66 96       	adiw	r28, 0x16	; 22
   11a38:	0f b6       	in	r0, 0x3f	; 63
   11a3a:	f8 94       	cli
   11a3c:	de bf       	out	0x3e, r29	; 62
   11a3e:	0f be       	out	0x3f, r0	; 63
   11a40:	cd bf       	out	0x3d, r28	; 61
   11a42:	df 91       	pop	r29
   11a44:	cf 91       	pop	r28
   11a46:	1f 91       	pop	r17
   11a48:	ff 90       	pop	r15
   11a4a:	ef 90       	pop	r14
   11a4c:	08 95       	ret

00011a4e <tds_get_offset(unsigned char)>:
_Z14tds_get_offseth():
   11a4e:	cf 93       	push	r28
   11a50:	df 93       	push	r29
   11a52:	cd b7       	in	r28, 0x3d	; 61
   11a54:	de b7       	in	r29, 0x3e	; 62
   11a56:	66 97       	sbiw	r28, 0x16	; 22
   11a58:	0f b6       	in	r0, 0x3f	; 63
   11a5a:	f8 94       	cli
   11a5c:	de bf       	out	0x3e, r29	; 62
   11a5e:	0f be       	out	0x3f, r0	; 63
   11a60:	cd bf       	out	0x3d, r28	; 61
   11a62:	be 01       	movw	r22, r28
   11a64:	6f 5f       	subi	r22, 0xFF	; 255
   11a66:	7f 4f       	sbci	r23, 0xFF	; 255
   11a68:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11a6c:	8b 85       	ldd	r24, Y+11	; 0x0b
   11a6e:	9c 85       	ldd	r25, Y+12	; 0x0c
   11a70:	66 96       	adiw	r28, 0x16	; 22
   11a72:	0f b6       	in	r0, 0x3f	; 63
   11a74:	f8 94       	cli
   11a76:	de bf       	out	0x3e, r29	; 62
   11a78:	0f be       	out	0x3f, r0	; 63
   11a7a:	cd bf       	out	0x3d, r28	; 61
   11a7c:	df 91       	pop	r29
   11a7e:	cf 91       	pop	r28
   11a80:	08 95       	ret

00011a82 <tds_set_period(unsigned char, unsigned char)>:
_Z14tds_set_periodhh():
   11a82:	0f 93       	push	r16
   11a84:	1f 93       	push	r17
   11a86:	cf 93       	push	r28
   11a88:	df 93       	push	r29
   11a8a:	cd b7       	in	r28, 0x3d	; 61
   11a8c:	de b7       	in	r29, 0x3e	; 62
   11a8e:	66 97       	sbiw	r28, 0x16	; 22
   11a90:	0f b6       	in	r0, 0x3f	; 63
   11a92:	f8 94       	cli
   11a94:	de bf       	out	0x3e, r29	; 62
   11a96:	0f be       	out	0x3f, r0	; 63
   11a98:	cd bf       	out	0x3d, r28	; 61
   11a9a:	18 2f       	mov	r17, r24
   11a9c:	06 2f       	mov	r16, r22
   11a9e:	be 01       	movw	r22, r28
   11aa0:	6f 5f       	subi	r22, 0xFF	; 255
   11aa2:	7f 4f       	sbci	r23, 0xFF	; 255
   11aa4:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11aa8:	0d 8b       	std	Y+21, r16	; 0x15
   11aaa:	be 01       	movw	r22, r28
   11aac:	6f 5f       	subi	r22, 0xFF	; 255
   11aae:	7f 4f       	sbci	r23, 0xFF	; 255
   11ab0:	81 2f       	mov	r24, r17
   11ab2:	0e 94 50 8c 	call	0x118a0	; 0x118a0 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   11ab6:	66 96       	adiw	r28, 0x16	; 22
   11ab8:	0f b6       	in	r0, 0x3f	; 63
   11aba:	f8 94       	cli
   11abc:	de bf       	out	0x3e, r29	; 62
   11abe:	0f be       	out	0x3f, r0	; 63
   11ac0:	cd bf       	out	0x3d, r28	; 61
   11ac2:	df 91       	pop	r29
   11ac4:	cf 91       	pop	r28
   11ac6:	1f 91       	pop	r17
   11ac8:	0f 91       	pop	r16
   11aca:	08 95       	ret

00011acc <tds_get_period(unsigned char)>:
_Z14tds_get_periodh():
   11acc:	cf 93       	push	r28
   11ace:	df 93       	push	r29
   11ad0:	cd b7       	in	r28, 0x3d	; 61
   11ad2:	de b7       	in	r29, 0x3e	; 62
   11ad4:	66 97       	sbiw	r28, 0x16	; 22
   11ad6:	0f b6       	in	r0, 0x3f	; 63
   11ad8:	f8 94       	cli
   11ada:	de bf       	out	0x3e, r29	; 62
   11adc:	0f be       	out	0x3f, r0	; 63
   11ade:	cd bf       	out	0x3d, r28	; 61
   11ae0:	be 01       	movw	r22, r28
   11ae2:	6f 5f       	subi	r22, 0xFF	; 255
   11ae4:	7f 4f       	sbci	r23, 0xFF	; 255
   11ae6:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11aea:	8d 89       	ldd	r24, Y+21	; 0x15
   11aec:	90 e0       	ldi	r25, 0x00	; 0
   11aee:	66 96       	adiw	r28, 0x16	; 22
   11af0:	0f b6       	in	r0, 0x3f	; 63
   11af2:	f8 94       	cli
   11af4:	de bf       	out	0x3e, r29	; 62
   11af6:	0f be       	out	0x3f, r0	; 63
   11af8:	cd bf       	out	0x3d, r28	; 61
   11afa:	df 91       	pop	r29
   11afc:	cf 91       	pop	r28
   11afe:	08 95       	ret

00011b00 <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
   11b00:	fb 01       	movw	r30, r22
   11b02:	9c 01       	movw	r18, r24
   11b04:	28 5f       	subi	r18, 0xF8	; 248
   11b06:	3f 4f       	sbci	r19, 0xFF	; 255
   11b08:	dc 01       	movw	r26, r24
   11b0a:	5d 91       	ld	r21, X+
   11b0c:	cd 01       	movw	r24, r26
   11b0e:	41 91       	ld	r20, Z+
   11b10:	54 13       	cpse	r21, r20
   11b12:	05 c0       	rjmp	.+10     	; 0x11b1e <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
   11b14:	a2 17       	cp	r26, r18
   11b16:	b3 07       	cpc	r27, r19
   11b18:	b9 f7       	brne	.-18     	; 0x11b08 <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
   11b1a:	81 e0       	ldi	r24, 0x01	; 1
   11b1c:	08 95       	ret
   11b1e:	80 e0       	ldi	r24, 0x00	; 0
   11b20:	08 95       	ret

00011b22 <tds_update_associate()>:
_Z20tds_update_associatev():
   11b22:	ef 92       	push	r14
   11b24:	ff 92       	push	r15
   11b26:	0f 93       	push	r16
   11b28:	1f 93       	push	r17
   11b2a:	cf 93       	push	r28
   11b2c:	df 93       	push	r29
   11b2e:	cd b7       	in	r28, 0x3d	; 61
   11b30:	de b7       	in	r29, 0x3e	; 62
   11b32:	6e 97       	sbiw	r28, 0x1e	; 30
   11b34:	0f b6       	in	r0, 0x3f	; 63
   11b36:	f8 94       	cli
   11b38:	de bf       	out	0x3e, r29	; 62
   11b3a:	0f be       	out	0x3f, r0	; 63
   11b3c:	cd bf       	out	0x3d, r28	; 61
   11b3e:	1f 8a       	std	Y+23, r1	; 0x17
   11b40:	18 8e       	std	Y+24, r1	; 0x18
   11b42:	19 8e       	std	Y+25, r1	; 0x19
   11b44:	1a 8e       	std	Y+26, r1	; 0x1a
   11b46:	1b 8e       	std	Y+27, r1	; 0x1b
   11b48:	1c 8e       	std	Y+28, r1	; 0x1c
   11b4a:	1d 8e       	std	Y+29, r1	; 0x1d
   11b4c:	1e 8e       	std	Y+30, r1	; 0x1e
   11b4e:	0f e5       	ldi	r16, 0x5F	; 95
   11b50:	11 e1       	ldi	r17, 0x11	; 17
   11b52:	ee 24       	eor	r14, r14
   11b54:	ea 94       	dec	r14
   11b56:	f8 01       	movw	r30, r16
   11b58:	e2 86       	std	Z+10, r14	; 0x0a
   11b5a:	b8 01       	movw	r22, r16
   11b5c:	ce 01       	movw	r24, r28
   11b5e:	47 96       	adiw	r24, 0x17	; 23
   11b60:	0e 94 80 8d 	call	0x11b00	; 0x11b00 <tds_compare_rom(unsigned char*, unsigned char*)>
   11b64:	81 11       	cpse	r24, r1
   11b66:	14 c0       	rjmp	.+40     	; 0x11b90 <tds_update_associate()+0x6e>
   11b68:	f1 2c       	mov	r15, r1
   11b6a:	be 01       	movw	r22, r28
   11b6c:	6f 5f       	subi	r22, 0xFF	; 255
   11b6e:	7f 4f       	sbci	r23, 0xFF	; 255
   11b70:	8f 2d       	mov	r24, r15
   11b72:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11b76:	b8 01       	movw	r22, r16
   11b78:	ce 01       	movw	r24, r28
   11b7a:	02 96       	adiw	r24, 0x02	; 2
   11b7c:	0e 94 80 8d 	call	0x11b00	; 0x11b00 <tds_compare_rom(unsigned char*, unsigned char*)>
   11b80:	88 23       	and	r24, r24
   11b82:	11 f0       	breq	.+4      	; 0x11b88 <tds_update_associate()+0x66>
   11b84:	f8 01       	movw	r30, r16
   11b86:	f2 86       	std	Z+10, r15	; 0x0a
   11b88:	f3 94       	inc	r15
   11b8a:	f6 e0       	ldi	r31, 0x06	; 6
   11b8c:	ff 12       	cpse	r15, r31
   11b8e:	ed cf       	rjmp	.-38     	; 0x11b6a <tds_update_associate()+0x48>
   11b90:	05 5f       	subi	r16, 0xF5	; 245
   11b92:	1f 4f       	sbci	r17, 0xFF	; 255
   11b94:	81 e1       	ldi	r24, 0x11	; 17
   11b96:	01 3a       	cpi	r16, 0xA1	; 161
   11b98:	18 07       	cpc	r17, r24
   11b9a:	e9 f6       	brne	.-70     	; 0x11b56 <tds_update_associate()+0x34>
   11b9c:	6e 96       	adiw	r28, 0x1e	; 30
   11b9e:	0f b6       	in	r0, 0x3f	; 63
   11ba0:	f8 94       	cli
   11ba2:	de bf       	out	0x3e, r29	; 62
   11ba4:	0f be       	out	0x3f, r0	; 63
   11ba6:	cd bf       	out	0x3d, r28	; 61
   11ba8:	df 91       	pop	r29
   11baa:	cf 91       	pop	r28
   11bac:	1f 91       	pop	r17
   11bae:	0f 91       	pop	r16
   11bb0:	ff 90       	pop	r15
   11bb2:	ef 90       	pop	r14
   11bb4:	08 95       	ret

00011bb6 <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
   11bb6:	1f 93       	push	r17
   11bb8:	cf 93       	push	r28
   11bba:	df 93       	push	r29
   11bbc:	cd b7       	in	r28, 0x3d	; 61
   11bbe:	de b7       	in	r29, 0x3e	; 62
   11bc0:	66 97       	sbiw	r28, 0x16	; 22
   11bc2:	0f b6       	in	r0, 0x3f	; 63
   11bc4:	f8 94       	cli
   11bc6:	de bf       	out	0x3e, r29	; 62
   11bc8:	0f be       	out	0x3f, r0	; 63
   11bca:	cd bf       	out	0x3d, r28	; 61
   11bcc:	18 2f       	mov	r17, r24
   11bce:	be 01       	movw	r22, r28
   11bd0:	6f 5f       	subi	r22, 0xFF	; 255
   11bd2:	7f 4f       	sbci	r23, 0xFF	; 255
   11bd4:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11bd8:	19 82       	std	Y+1, r1	; 0x01
   11bda:	6f ef       	ldi	r22, 0xFF	; 255
   11bdc:	77 e0       	ldi	r23, 0x07	; 7
   11bde:	ce 01       	movw	r24, r28
   11be0:	0d 96       	adiw	r24, 0x0d	; 13
   11be2:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
   11be6:	1c 86       	std	Y+12, r1	; 0x0c
   11be8:	1b 86       	std	Y+11, r1	; 0x0b
   11bea:	8a e0       	ldi	r24, 0x0A	; 10
   11bec:	8d 8b       	std	Y+21, r24	; 0x15
   11bee:	1a 82       	std	Y+2, r1	; 0x02
   11bf0:	1b 82       	std	Y+3, r1	; 0x03
   11bf2:	1c 82       	std	Y+4, r1	; 0x04
   11bf4:	1d 82       	std	Y+5, r1	; 0x05
   11bf6:	1e 82       	std	Y+6, r1	; 0x06
   11bf8:	1f 82       	std	Y+7, r1	; 0x07
   11bfa:	18 86       	std	Y+8, r1	; 0x08
   11bfc:	19 86       	std	Y+9, r1	; 0x09
   11bfe:	1a 86       	std	Y+10, r1	; 0x0a
   11c00:	be 01       	movw	r22, r28
   11c02:	6f 5f       	subi	r22, 0xFF	; 255
   11c04:	7f 4f       	sbci	r23, 0xFF	; 255
   11c06:	81 2f       	mov	r24, r17
   11c08:	0e 94 50 8c 	call	0x118a0	; 0x118a0 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   11c0c:	0e 94 91 8d 	call	0x11b22	; 0x11b22 <tds_update_associate()>
   11c10:	66 96       	adiw	r28, 0x16	; 22
   11c12:	0f b6       	in	r0, 0x3f	; 63
   11c14:	f8 94       	cli
   11c16:	de bf       	out	0x3e, r29	; 62
   11c18:	0f be       	out	0x3f, r0	; 63
   11c1a:	cd bf       	out	0x3d, r28	; 61
   11c1c:	df 91       	pop	r29
   11c1e:	cf 91       	pop	r28
   11c20:	1f 91       	pop	r17
   11c22:	08 95       	ret

00011c24 <tds_set_clear_wrom_id(unsigned char)>:
_Z21tds_set_clear_wrom_idh():
   11c24:	9b e0       	ldi	r25, 0x0B	; 11
   11c26:	89 9f       	mul	r24, r25
   11c28:	f0 01       	movw	r30, r0
   11c2a:	11 24       	eor	r1, r1
   11c2c:	e1 5a       	subi	r30, 0xA1	; 161
   11c2e:	fe 4e       	sbci	r31, 0xEE	; 238
   11c30:	82 85       	ldd	r24, Z+10	; 0x0a
   11c32:	0c 94 db 8d 	jmp	0x11bb6	; 0x11bb6 <tds_set_clear(unsigned char)>

00011c36 <tds_check_associate(unsigned char)>:
_Z19tds_check_associateh():
   11c36:	ff 92       	push	r15
   11c38:	0f 93       	push	r16
   11c3a:	1f 93       	push	r17
   11c3c:	cf 93       	push	r28
   11c3e:	df 93       	push	r29
   11c40:	cd b7       	in	r28, 0x3d	; 61
   11c42:	de b7       	in	r29, 0x3e	; 62
   11c44:	66 97       	sbiw	r28, 0x16	; 22
   11c46:	0f b6       	in	r0, 0x3f	; 63
   11c48:	f8 94       	cli
   11c4a:	de bf       	out	0x3e, r29	; 62
   11c4c:	0f be       	out	0x3f, r0	; 63
   11c4e:	cd bf       	out	0x3d, r28	; 61
   11c50:	90 91 a1 11 	lds	r25, 0x11A1	; 0x8011a1 <Global_HWwirenum>
   11c54:	89 17       	cp	r24, r25
   11c56:	38 f5       	brcc	.+78     	; 0x11ca6 <tds_check_associate(unsigned char)+0x70>
   11c58:	9b e0       	ldi	r25, 0x0B	; 11
   11c5a:	89 9f       	mul	r24, r25
   11c5c:	80 01       	movw	r16, r0
   11c5e:	11 24       	eor	r1, r1
   11c60:	01 5a       	subi	r16, 0xA1	; 161
   11c62:	1e 4e       	sbci	r17, 0xEE	; 238
   11c64:	f1 2c       	mov	r15, r1
   11c66:	be 01       	movw	r22, r28
   11c68:	6f 5f       	subi	r22, 0xFF	; 255
   11c6a:	7f 4f       	sbci	r23, 0xFF	; 255
   11c6c:	8f 2d       	mov	r24, r15
   11c6e:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11c72:	b8 01       	movw	r22, r16
   11c74:	ce 01       	movw	r24, r28
   11c76:	02 96       	adiw	r24, 0x02	; 2
   11c78:	0e 94 80 8d 	call	0x11b00	; 0x11b00 <tds_compare_rom(unsigned char*, unsigned char*)>
   11c7c:	81 11       	cpse	r24, r1
   11c7e:	06 c0       	rjmp	.+12     	; 0x11c8c <tds_check_associate(unsigned char)+0x56>
   11c80:	f3 94       	inc	r15
   11c82:	86 e0       	ldi	r24, 0x06	; 6
   11c84:	f8 12       	cpse	r15, r24
   11c86:	ef cf       	rjmp	.-34     	; 0x11c66 <tds_check_associate(unsigned char)+0x30>
   11c88:	ff 24       	eor	r15, r15
   11c8a:	fa 94       	dec	r15
   11c8c:	8f 2d       	mov	r24, r15
   11c8e:	66 96       	adiw	r28, 0x16	; 22
   11c90:	0f b6       	in	r0, 0x3f	; 63
   11c92:	f8 94       	cli
   11c94:	de bf       	out	0x3e, r29	; 62
   11c96:	0f be       	out	0x3f, r0	; 63
   11c98:	cd bf       	out	0x3d, r28	; 61
   11c9a:	df 91       	pop	r29
   11c9c:	cf 91       	pop	r28
   11c9e:	1f 91       	pop	r17
   11ca0:	0f 91       	pop	r16
   11ca2:	ff 90       	pop	r15
   11ca4:	08 95       	ret
   11ca6:	8e ef       	ldi	r24, 0xFE	; 254
   11ca8:	f8 2e       	mov	r15, r24
   11caa:	f0 cf       	rjmp	.-32     	; 0x11c8c <tds_check_associate(unsigned char)+0x56>

00011cac <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:202

uint8_t tds_associate(uint8_t id)
{
   11cac:	df 92       	push	r13
   11cae:	ef 92       	push	r14
   11cb0:	ff 92       	push	r15
   11cb2:	0f 93       	push	r16
   11cb4:	1f 93       	push	r17
   11cb6:	cf 93       	push	r28
   11cb8:	df 93       	push	r29
   11cba:	cd b7       	in	r28, 0x3d	; 61
   11cbc:	de b7       	in	r29, 0x3e	; 62
   11cbe:	66 97       	sbiw	r28, 0x16	; 22
   11cc0:	0f b6       	in	r0, 0x3f	; 63
   11cc2:	f8 94       	cli
   11cc4:	de bf       	out	0x3e, r29	; 62
   11cc6:	0f be       	out	0x3f, r0	; 63
   11cc8:	cd bf       	out	0x3d, r28	; 61
   11cca:	08 2f       	mov	r16, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:205
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
   11ccc:	0e 94 1b 8e 	call	0x11c36	; 0x11c36 <tds_check_associate(unsigned char)>
   11cd0:	8f 3f       	cpi	r24, 0xFF	; 255
   11cd2:	09 f0       	breq	.+2      	; 0x11cd6 <tds_associate(unsigned char)+0x2a>
   11cd4:	6a c0       	rjmp	.+212    	; 0x11daa <tds_associate(unsigned char)+0xfe>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:207
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   11cd6:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
   11cd8:	eb e0       	ldi	r30, 0x0B	; 11
   11cda:	de 2e       	mov	r13, r30
   11cdc:	d0 9e       	mul	r13, r16
   11cde:	c0 01       	movw	r24, r0
   11ce0:	11 24       	eor	r1, r1
   11ce2:	9c 01       	movw	r18, r24
   11ce4:	28 59       	subi	r18, 0x98	; 152
   11ce6:	3e 4e       	sbci	r19, 0xEE	; 238
   11ce8:	79 01       	movw	r14, r18
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:209
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
   11cea:	be 01       	movw	r22, r28
   11cec:	6f 5f       	subi	r22, 0xFF	; 255
   11cee:	7f 4f       	sbci	r23, 0xFF	; 255
   11cf0:	81 2f       	mov	r24, r17
   11cf2:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
   11cf6:	89 81       	ldd	r24, Y+1	; 0x01
   11cf8:	81 11       	cpse	r24, r1
   11cfa:	53 c0       	rjmp	.+166    	; 0x11da2 <tds_associate(unsigned char)+0xf6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210 (discriminator 1)
   11cfc:	f7 01       	movw	r30, r14
   11cfe:	80 81       	ld	r24, Z
   11d00:	81 30       	cpi	r24, 0x01	; 1
   11d02:	09 f0       	breq	.+2      	; 0x11d06 <tds_associate(unsigned char)+0x5a>
   11d04:	4e c0       	rjmp	.+156    	; 0x11da2 <tds_associate(unsigned char)+0xf6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
   11d06:	89 83       	std	Y+1, r24	; 0x01
   11d08:	de 01       	movw	r26, r28
   11d0a:	12 96       	adiw	r26, 0x02	; 2
   11d0c:	0d 9d       	mul	r16, r13
   11d0e:	c0 01       	movw	r24, r0
   11d10:	11 24       	eor	r1, r1
   11d12:	30 e0       	ldi	r19, 0x00	; 0
   11d14:	20 e0       	ldi	r18, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:214 (discriminator 2)
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
   11d16:	f9 01       	movw	r30, r18
   11d18:	e8 0f       	add	r30, r24
   11d1a:	f9 1f       	adc	r31, r25
   11d1c:	e1 5a       	subi	r30, 0xA1	; 161
   11d1e:	fe 4e       	sbci	r31, 0xEE	; 238
   11d20:	40 81       	ld	r20, Z
   11d22:	4d 93       	st	X+, r20
   11d24:	2f 5f       	subi	r18, 0xFF	; 255
   11d26:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:213 (discriminator 2)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
   11d28:	28 30       	cpi	r18, 0x08	; 8
   11d2a:	31 05       	cpc	r19, r1
   11d2c:	a1 f7       	brne	.-24     	; 0x11d16 <tds_associate(unsigned char)+0x6a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
   11d2e:	2b e0       	ldi	r18, 0x0B	; 11
   11d30:	12 9f       	mul	r17, r18
   11d32:	f0 01       	movw	r30, r0
   11d34:	11 24       	eor	r1, r1
   11d36:	e1 5a       	subi	r30, 0xA1	; 161
   11d38:	fe 4e       	sbci	r31, 0xEE	; 238
   11d3a:	e0 85       	ldd	r30, Z+8	; 0x08
   11d3c:	f0 e0       	ldi	r31, 0x00	; 0
   11d3e:	ee 0f       	add	r30, r30
   11d40:	ff 1f       	adc	r31, r31
   11d42:	e3 5a       	subi	r30, 0xA3	; 163
   11d44:	fe 4e       	sbci	r31, 0xEE	; 238
   11d46:	80 81       	ld	r24, Z
   11d48:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
   11d4a:	be 01       	movw	r22, r28
   11d4c:	6f 5f       	subi	r22, 0xFF	; 255
   11d4e:	7f 4f       	sbci	r23, 0xFF	; 255
   11d50:	81 2f       	mov	r24, r17
   11d52:	0e 94 50 8c 	call	0x118a0	; 0x118a0 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   11d56:	3e e1       	ldi	r19, 0x1E	; 30
   11d58:	13 9f       	mul	r17, r19
   11d5a:	a0 01       	movw	r20, r0
   11d5c:	11 24       	eor	r1, r1
   11d5e:	90 e0       	ldi	r25, 0x00	; 0
   11d60:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
   11d62:	20 e2       	ldi	r18, 0x20	; 32
   11d64:	3e e4       	ldi	r19, 0x4E	; 78
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:218 (discriminator 2)
   11d66:	fc 01       	movw	r30, r24
   11d68:	ee 0f       	add	r30, r30
   11d6a:	ff 1f       	adc	r31, r31
   11d6c:	e4 0f       	add	r30, r20
   11d6e:	f5 1f       	adc	r31, r21
   11d70:	ee 55       	subi	r30, 0x5E	; 94
   11d72:	fe 4e       	sbci	r31, 0xEE	; 238
   11d74:	30 87       	std	Z+8, r19	; 0x08
   11d76:	27 83       	std	Z+7, r18	; 0x07
   11d78:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:217 (discriminator 2)
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
   11d7a:	8a 30       	cpi	r24, 0x0A	; 10
   11d7c:	91 05       	cpc	r25, r1
   11d7e:	99 f7       	brne	.-26     	; 0x11d66 <tds_associate(unsigned char)+0xba>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
   11d80:	0e 94 91 8d 	call	0x11b22	; 0x11b22 <tds_update_associate()>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:226
  return ret;
}
   11d84:	81 2f       	mov	r24, r17
   11d86:	66 96       	adiw	r28, 0x16	; 22
   11d88:	0f b6       	in	r0, 0x3f	; 63
   11d8a:	f8 94       	cli
   11d8c:	de bf       	out	0x3e, r29	; 62
   11d8e:	0f be       	out	0x3f, r0	; 63
   11d90:	cd bf       	out	0x3d, r28	; 61
   11d92:	df 91       	pop	r29
   11d94:	cf 91       	pop	r28
   11d96:	1f 91       	pop	r17
   11d98:	0f 91       	pop	r16
   11d9a:	ff 90       	pop	r15
   11d9c:	ef 90       	pop	r14
   11d9e:	df 90       	pop	r13
   11da0:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:207 (discriminator 2)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   11da2:	1f 5f       	subi	r17, 0xFF	; 255
   11da4:	16 30       	cpi	r17, 0x06	; 6
   11da6:	09 f0       	breq	.+2      	; 0x11daa <tds_associate(unsigned char)+0xfe>
   11da8:	a0 cf       	rjmp	.-192    	; 0x11cea <tds_associate(unsigned char)+0x3e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
   11daa:	1f ef       	ldi	r17, 0xFF	; 255
   11dac:	e9 cf       	rjmp	.-46     	; 0x11d80 <tds_associate(unsigned char)+0xd4>

00011dae <one_hw_search_device(unsigned char)>:
_Z20one_hw_search_deviceh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:232

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
   11dae:	df 92       	push	r13
   11db0:	ef 92       	push	r14
   11db2:	ff 92       	push	r15
   11db4:	0f 93       	push	r16
   11db6:	1f 93       	push	r17
   11db8:	cf 93       	push	r28
   11dba:	df 93       	push	r29
   11dbc:	f8 2e       	mov	r15, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:234
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
   11dbe:	c8 2f       	mov	r28, r24
   11dc0:	d0 e0       	ldi	r29, 0x00	; 0
   11dc2:	cc 0f       	add	r28, r28
   11dc4:	dd 1f       	adc	r29, r29
   11dc6:	c3 5a       	subi	r28, 0xA3	; 163
   11dc8:	de 4e       	sbci	r29, 0xEE	; 238
   11dca:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
   11dcc:	88 81       	ld	r24, Y
   11dce:	0e 94 ba d2 	call	0x1a574	; 0x1a574 <ds2482init(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
   11dd2:	88 81       	ld	r24, Y
   11dd4:	0e 94 74 d2 	call	0x1a4e8	; 0x1a4e8 <ds2482reset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
   11dd8:	88 81       	ld	r24, Y
   11dda:	0e 94 d3 d2 	call	0x1a5a6	; 0x1a5a6 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
   11dde:	66 e5       	ldi	r22, 0x56	; 86
   11de0:	72 e1       	ldi	r23, 0x12	; 18
   11de2:	88 81       	ld	r24, Y
   11de4:	0e 94 6e d2 	call	0x1a4dc	; 0x1a4dc <owMatchFirst(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
   11de8:	81 11       	cpse	r24, r1
   11dea:	3a c0       	rjmp	.+116    	; 0x11e60 <one_hw_search_device(unsigned char)+0xb2>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:248
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   11dec:	8e 01       	movw	r16, r28
   11dee:	0f 5f       	subi	r16, 0xFF	; 255
   11df0:	1f 4f       	sbci	r17, 0xFF	; 255
   11df2:	9b e0       	ldi	r25, 0x0B	; 11
   11df4:	e9 2e       	mov	r14, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
   11df6:	dd 24       	eor	r13, r13
   11df8:	d3 94       	inc	r13
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   11dfa:	f8 01       	movw	r30, r16
   11dfc:	90 81       	ld	r25, Z
   11dfe:	96 30       	cpi	r25, 0x06	; 6
   11e00:	78 f5       	brcc	.+94     	; 0x11e60 <one_hw_search_device(unsigned char)+0xb2>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
   11e02:	20 91 a1 11 	lds	r18, 0x11A1	; 0x8011a1 <Global_HWwirenum>
   11e06:	42 2f       	mov	r20, r18
   11e08:	50 e0       	ldi	r21, 0x00	; 0
   11e0a:	a6 e5       	ldi	r26, 0x56	; 86
   11e0c:	b2 e1       	ldi	r27, 0x12	; 18
   11e0e:	2e 9d       	mul	r18, r14
   11e10:	90 01       	movw	r18, r0
   11e12:	11 24       	eor	r1, r1
   11e14:	90 e0       	ldi	r25, 0x00	; 0
   11e16:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:249 (discriminator 2)
   11e18:	6d 91       	ld	r22, X+
   11e1a:	fc 01       	movw	r30, r24
   11e1c:	e2 0f       	add	r30, r18
   11e1e:	f3 1f       	adc	r31, r19
   11e20:	e1 5a       	subi	r30, 0xA1	; 161
   11e22:	fe 4e       	sbci	r31, 0xEE	; 238
   11e24:	60 83       	st	Z, r22
   11e26:	01 96       	adiw	r24, 0x01	; 1
   11e28:	88 30       	cpi	r24, 0x08	; 8
   11e2a:	91 05       	cpc	r25, r1
   11e2c:	a9 f7       	brne	.-22     	; 0x11e18 <one_hw_search_device(unsigned char)+0x6a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
   11e2e:	e4 9e       	mul	r14, r20
   11e30:	f0 01       	movw	r30, r0
   11e32:	e5 9e       	mul	r14, r21
   11e34:	f0 0d       	add	r31, r0
   11e36:	11 24       	eor	r1, r1
   11e38:	e1 5a       	subi	r30, 0xA1	; 161
   11e3a:	fe 4e       	sbci	r31, 0xEE	; 238
   11e3c:	f0 86       	std	Z+8, r15	; 0x08
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
   11e3e:	d1 86       	std	Z+9, r13	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
   11e40:	66 e5       	ldi	r22, 0x56	; 86
   11e42:	72 e1       	ldi	r23, 0x12	; 18
   11e44:	88 81       	ld	r24, Y
   11e46:	0e 94 e8 d1 	call	0x1a3d0	; 0x1a3d0 <owMatchNext(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
   11e4a:	f8 01       	movw	r30, r16
   11e4c:	90 81       	ld	r25, Z
   11e4e:	9f 5f       	subi	r25, 0xFF	; 255
   11e50:	90 83       	st	Z, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
   11e52:	90 91 a1 11 	lds	r25, 0x11A1	; 0x8011a1 <Global_HWwirenum>
   11e56:	9f 5f       	subi	r25, 0xFF	; 255
   11e58:	90 93 a1 11 	sts	0x11A1, r25	; 0x8011a1 <Global_HWwirenum>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
   11e5c:	85 30       	cpi	r24, 0x05	; 5
   11e5e:	69 f6       	brne	.-102    	; 0x11dfa <one_hw_search_device(unsigned char)+0x4c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:262
      { ///hledani dokonceno
        break;
      }
    }
  return r;
}
   11e60:	df 91       	pop	r29
   11e62:	cf 91       	pop	r28
   11e64:	1f 91       	pop	r17
   11e66:	0f 91       	pop	r16
   11e68:	ff 90       	pop	r15
   11e6a:	ef 90       	pop	r14
   11e6c:	df 90       	pop	r13
   11e6e:	08 95       	ret

00011e70 <mereni_hwwire(unsigned int)>:
_Z13mereni_hwwirej():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:266
//////
/// funkce mereni na sbernici
uint8_t mereni_hwwire(uint16_t uptime)
{
   11e70:	af 92       	push	r10
   11e72:	bf 92       	push	r11
   11e74:	cf 92       	push	r12
   11e76:	df 92       	push	r13
   11e78:	ef 92       	push	r14
   11e7a:	ff 92       	push	r15
   11e7c:	0f 93       	push	r16
   11e7e:	1f 93       	push	r17
   11e80:	cf 93       	push	r28
   11e82:	df 93       	push	r29
   11e84:	cd b7       	in	r28, 0x3d	; 61
   11e86:	de b7       	in	r29, 0x3e	; 62
   11e88:	68 97       	sbiw	r28, 0x18	; 24
   11e8a:	0f b6       	in	r0, 0x3f	; 63
   11e8c:	f8 94       	cli
   11e8e:	de bf       	out	0x3e, r29	; 62
   11e90:	0f be       	out	0x3f, r0	; 63
   11e92:	cd bf       	out	0x3d, r28	; 61
   11e94:	52 ea       	ldi	r21, 0xA2	; 162
   11e96:	e5 2e       	mov	r14, r21
   11e98:	51 e1       	ldi	r21, 0x11	; 17
   11e9a:	f5 2e       	mov	r15, r21
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   11e9c:	00 e0       	ldi	r16, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   11e9e:	6c 01       	movw	r12, r24
   11ea0:	dd 24       	eor	r13, r13
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   11ea2:	6e e1       	ldi	r22, 0x1E	; 30
   11ea4:	a6 2e       	mov	r10, r22
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   11ea6:	be 01       	movw	r22, r28
   11ea8:	6f 5f       	subi	r22, 0xFF	; 255
   11eaa:	7f 4f       	sbci	r23, 0xFF	; 255
   11eac:	80 2f       	mov	r24, r16
   11eae:	0e 94 eb 8b 	call	0x117d6	; 0x117d6 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   11eb2:	19 81       	ldd	r17, Y+1	; 0x01
   11eb4:	11 30       	cpi	r17, 0x01	; 1
   11eb6:	09 f0       	breq	.+2      	; 0x11eba <mereni_hwwire(unsigned int)+0x4a>
   11eb8:	d9 c0       	rjmp	.+434    	; 0x1206c <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273 (discriminator 1)
   11eba:	f7 01       	movw	r30, r14
   11ebc:	84 8d       	ldd	r24, Z+28	; 0x1c
   11ebe:	9d 89       	ldd	r25, Y+21	; 0x15
   11ec0:	96 01       	movw	r18, r12
   11ec2:	28 1b       	sub	r18, r24
   11ec4:	31 09       	sbc	r19, r1
   11ec6:	92 17       	cp	r25, r18
   11ec8:	13 06       	cpc	r1, r19
   11eca:	11 f0       	breq	.+4      	; 0x11ed0 <mereni_hwwire(unsigned int)+0x60>
   11ecc:	08 f0       	brcs	.+2      	; 0x11ed0 <mereni_hwwire(unsigned int)+0x60>
   11ece:	ce c0       	rjmp	.+412    	; 0x1206c <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:275
    {
      status_tds18s20[w].period_now += tds.period;
   11ed0:	89 0f       	add	r24, r25
   11ed2:	84 8f       	std	Z+28, r24	; 0x1c
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:276
      if (status_tds18s20[w].wait == false)
   11ed4:	85 8d       	ldd	r24, Z+29	; 0x1d
   11ed6:	81 11       	cpse	r24, r1
   11ed8:	0f c0       	rjmp	.+30     	; 0x11ef8 <mereni_hwwire(unsigned int)+0x88>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:278
      {
        owReset(tds.assigned_ds2482);
   11eda:	8a 85       	ldd	r24, Y+10	; 0x0a
   11edc:	0e 94 d3 d2 	call	0x1a5a6	; 0x1a5a6 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:279
        owMatchRom(tds.assigned_ds2482, tds.rom);
   11ee0:	be 01       	movw	r22, r28
   11ee2:	6e 5f       	subi	r22, 0xFE	; 254
   11ee4:	7f 4f       	sbci	r23, 0xFF	; 255
   11ee6:	8a 85       	ldd	r24, Y+10	; 0x0a
   11ee8:	0e 94 d2 d1 	call	0x1a3a4	; 0x1a3a4 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:280
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   11eec:	64 e4       	ldi	r22, 0x44	; 68
   11eee:	8a 85       	ldd	r24, Y+10	; 0x0a
   11ef0:	0e 94 0e d3 	call	0x1a61c	; 0x1a61c <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:281
        status_tds18s20[w].wait = true;
   11ef4:	f7 01       	movw	r30, r14
   11ef6:	15 8f       	std	Z+29, r17	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:283
      }
      if (status_tds18s20[w].wait == true)
   11ef8:	f7 01       	movw	r30, r14
   11efa:	b5 8c       	ldd	r11, Z+29	; 0x1d
   11efc:	f1 e0       	ldi	r31, 0x01	; 1
   11efe:	bf 12       	cpse	r11, r31
   11f00:	b5 c0       	rjmp	.+362    	; 0x1206c <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:285
      {
        owReset(tds.assigned_ds2482);
   11f02:	8a 85       	ldd	r24, Y+10	; 0x0a
   11f04:	0e 94 d3 d2 	call	0x1a5a6	; 0x1a5a6 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:286
        owMatchRom(tds.assigned_ds2482, tds.rom);
   11f08:	be 01       	movw	r22, r28
   11f0a:	6e 5f       	subi	r22, 0xFE	; 254
   11f0c:	7f 4f       	sbci	r23, 0xFF	; 255
   11f0e:	8a 85       	ldd	r24, Y+10	; 0x0a
   11f10:	0e 94 d2 d1 	call	0x1a3a4	; 0x1a3a4 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:287
        owReadByte(tds.assigned_ds2482, &t);
   11f14:	be 01       	movw	r22, r28
   11f16:	68 5e       	subi	r22, 0xE8	; 232
   11f18:	7f 4f       	sbci	r23, 0xFF	; 255
   11f1a:	8a 85       	ldd	r24, Y+10	; 0x0a
   11f1c:	0e 94 96 d3 	call	0x1a72c	; 0x1a72c <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:288
        if (t != 0) 
   11f20:	88 8d       	ldd	r24, Y+24	; 0x18
   11f22:	88 23       	and	r24, r24
   11f24:	09 f4       	brne	.+2      	; 0x11f28 <mereni_hwwire(unsigned int)+0xb8>
   11f26:	a2 c0       	rjmp	.+324    	; 0x1206c <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:290
        {
          status_tds18s20[w].wait = false;
   11f28:	f7 01       	movw	r30, r14
   11f2a:	15 8e       	std	Z+29, r1	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:291
          status = owReset(tds.assigned_ds2482);
   11f2c:	8a 85       	ldd	r24, Y+10	; 0x0a
   11f2e:	0e 94 d3 d2 	call	0x1a5a6	; 0x1a5a6 <ds2482owReset(unsigned char)>
   11f32:	18 2f       	mov	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:292
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   11f34:	be 01       	movw	r22, r28
   11f36:	6e 5f       	subi	r22, 0xFE	; 254
   11f38:	7f 4f       	sbci	r23, 0xFF	; 255
   11f3a:	8a 85       	ldd	r24, Y+10	; 0x0a
   11f3c:	0e 94 d2 d1 	call	0x1a3a4	; 0x1a3a4 <owMatchRom(unsigned char, unsigned char*)>
   11f40:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:293
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   11f42:	6e eb       	ldi	r22, 0xBE	; 190
   11f44:	8a 85       	ldd	r24, Y+10	; 0x0a
   11f46:	0e 94 0e d3 	call	0x1a61c	; 0x1a61c <ds2482owWriteByte(unsigned char, unsigned char)>
   11f4a:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:294
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   11f4c:	be 01       	movw	r22, r28
   11f4e:	69 5e       	subi	r22, 0xE9	; 233
   11f50:	7f 4f       	sbci	r23, 0xFF	; 255
   11f52:	8a 85       	ldd	r24, Y+10	; 0x0a
   11f54:	0e 94 96 d3 	call	0x1a72c	; 0x1a72c <ds2482owReadByte(unsigned char, unsigned char*)>
   11f58:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:295
          status_tds18s20[w].tempL = e;
   11f5a:	8f 89       	ldd	r24, Y+23	; 0x17
   11f5c:	f7 01       	movw	r30, r14
   11f5e:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:296
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   11f60:	be 01       	movw	r22, r28
   11f62:	69 5e       	subi	r22, 0xE9	; 233
   11f64:	7f 4f       	sbci	r23, 0xFF	; 255
   11f66:	8a 85       	ldd	r24, Y+10	; 0x0a
   11f68:	0e 94 96 d3 	call	0x1a72c	; 0x1a72c <ds2482owReadByte(unsigned char, unsigned char*)>
   11f6c:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:297
          status_tds18s20[w].tempH = e;
   11f6e:	8f 89       	ldd	r24, Y+23	; 0x17
   11f70:	f7 01       	movw	r30, r14
   11f72:	81 83       	std	Z+1, r24	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   11f74:	be 01       	movw	r22, r28
   11f76:	69 5e       	subi	r22, 0xE9	; 233
   11f78:	7f 4f       	sbci	r23, 0xFF	; 255
   11f7a:	8a 85       	ldd	r24, Y+10	; 0x0a
   11f7c:	0e 94 96 d3 	call	0x1a72c	; 0x1a72c <ds2482owReadByte(unsigned char, unsigned char*)>
   11f80:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   11f82:	be 01       	movw	r22, r28
   11f84:	69 5e       	subi	r22, 0xE9	; 233
   11f86:	7f 4f       	sbci	r23, 0xFF	; 255
   11f88:	8a 85       	ldd	r24, Y+10	; 0x0a
   11f8a:	0e 94 96 d3 	call	0x1a72c	; 0x1a72c <ds2482owReadByte(unsigned char, unsigned char*)>
   11f8e:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   11f90:	be 01       	movw	r22, r28
   11f92:	69 5e       	subi	r22, 0xE9	; 233
   11f94:	7f 4f       	sbci	r23, 0xFF	; 255
   11f96:	8a 85       	ldd	r24, Y+10	; 0x0a
   11f98:	0e 94 96 d3 	call	0x1a72c	; 0x1a72c <ds2482owReadByte(unsigned char, unsigned char*)>
   11f9c:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   11f9e:	be 01       	movw	r22, r28
   11fa0:	69 5e       	subi	r22, 0xE9	; 233
   11fa2:	7f 4f       	sbci	r23, 0xFF	; 255
   11fa4:	8a 85       	ldd	r24, Y+10	; 0x0a
   11fa6:	0e 94 96 d3 	call	0x1a72c	; 0x1a72c <ds2482owReadByte(unsigned char, unsigned char*)>
   11faa:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:302
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   11fac:	be 01       	movw	r22, r28
   11fae:	69 5e       	subi	r22, 0xE9	; 233
   11fb0:	7f 4f       	sbci	r23, 0xFF	; 255
   11fb2:	8a 85       	ldd	r24, Y+10	; 0x0a
   11fb4:	0e 94 96 d3 	call	0x1a72c	; 0x1a72c <ds2482owReadByte(unsigned char, unsigned char*)>
   11fb8:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:303
          status_tds18s20[w].CR = e; //count remain
   11fba:	8f 89       	ldd	r24, Y+23	; 0x17
   11fbc:	f7 01       	movw	r30, r14
   11fbe:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:304
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   11fc0:	be 01       	movw	r22, r28
   11fc2:	69 5e       	subi	r22, 0xE9	; 233
   11fc4:	7f 4f       	sbci	r23, 0xFF	; 255
   11fc6:	8a 85       	ldd	r24, Y+10	; 0x0a
   11fc8:	0e 94 96 d3 	call	0x1a72c	; 0x1a72c <ds2482owReadByte(unsigned char, unsigned char*)>
   11fcc:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:305
          status_tds18s20[w].CP = e; // count per
   11fce:	8f 89       	ldd	r24, Y+23	; 0x17
   11fd0:	f7 01       	movw	r30, r14
   11fd2:	83 83       	std	Z+3, r24	; 0x03
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   11fd4:	be 01       	movw	r22, r28
   11fd6:	69 5e       	subi	r22, 0xE9	; 233
   11fd8:	7f 4f       	sbci	r23, 0xFF	; 255
   11fda:	8a 85       	ldd	r24, Y+10	; 0x0a
   11fdc:	0e 94 96 d3 	call	0x1a72c	; 0x1a72c <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
   11fe0:	9f 89       	ldd	r25, Y+23	; 0x17
   11fe2:	f7 01       	movw	r30, r14
   11fe4:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   11fe6:	81 0f       	add	r24, r17
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:308
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   11fe8:	09 f0       	breq	.+2      	; 0x11fec <mereni_hwwire(unsigned int)+0x17c>
   11fea:	58 c0       	rjmp	.+176    	; 0x1209c <mereni_hwwire(unsigned int)+0x22c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   11fec:	63 81       	ldd	r22, Z+3	; 0x03
   11fee:	70 e0       	ldi	r23, 0x00	; 0
   11ff0:	e8 8d       	ldd	r30, Y+24	; 0x18
   11ff2:	ae 9e       	mul	r10, r30
   11ff4:	f0 01       	movw	r30, r0
   11ff6:	11 24       	eor	r1, r1
   11ff8:	ee 55       	subi	r30, 0x5E	; 94
   11ffa:	fe 4e       	sbci	r31, 0xEE	; 238
   11ffc:	82 81       	ldd	r24, Z+2	; 0x02
   11ffe:	9b 01       	movw	r18, r22
   12000:	28 1b       	sub	r18, r24
   12002:	31 09       	sbc	r19, r1
   12004:	c9 01       	movw	r24, r18
   12006:	96 95       	lsr	r25
   12008:	98 2f       	mov	r25, r24
   1200a:	88 27       	eor	r24, r24
   1200c:	97 95       	ror	r25
   1200e:	87 95       	ror	r24
   12010:	0e 94 1a de 	call	0x1bc34	; 0x1bc34 <__divmodhi4>
   12014:	8b 85       	ldd	r24, Y+11	; 0x0b
   12016:	9c 85       	ldd	r25, Y+12	; 0x0c
   12018:	40 97       	sbiw	r24, 0x10	; 16
   1201a:	68 0f       	add	r22, r24
   1201c:	79 1f       	adc	r23, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:310
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   1201e:	f7 01       	movw	r30, r14
   12020:	81 81       	ldd	r24, Z+1	; 0x01
   12022:	90 e0       	ldi	r25, 0x00	; 0
   12024:	98 2f       	mov	r25, r24
   12026:	88 27       	eor	r24, r24
   12028:	99 0f       	add	r25, r25
   1202a:	99 0f       	add	r25, r25
   1202c:	99 0f       	add	r25, r25
   1202e:	20 81       	ld	r18, Z
   12030:	f8 e0       	ldi	r31, 0x08	; 8
   12032:	2f 9f       	mul	r18, r31
   12034:	90 01       	movw	r18, r0
   12036:	11 24       	eor	r1, r1
   12038:	82 2b       	or	r24, r18
   1203a:	93 2b       	or	r25, r19
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   1203c:	43 e0       	ldi	r20, 0x03	; 3
   1203e:	88 0f       	add	r24, r24
   12040:	99 1f       	adc	r25, r25
   12042:	4a 95       	dec	r20
   12044:	e1 f7       	brne	.-8      	; 0x1203e <mereni_hwwire(unsigned int)+0x1ce>
   12046:	80 78       	andi	r24, 0x80	; 128
   12048:	68 0f       	add	r22, r24
   1204a:	79 1f       	adc	r23, r25
   1204c:	f7 01       	movw	r30, r14
   1204e:	76 83       	std	Z+6, r23	; 0x06
   12050:	65 83       	std	Z+5, r22	; 0x05
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:312
            status_tds18s20[w].online = True;
   12052:	b3 8e       	std	Z+27, r11	; 0x1b
   12054:	89 e0       	ldi	r24, 0x09	; 9
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:313 (discriminator 2)
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   12056:	27 89       	ldd	r18, Z+23	; 0x17
   12058:	30 8d       	ldd	r19, Z+24	; 0x18
   1205a:	32 8f       	std	Z+26, r19	; 0x1a
   1205c:	21 8f       	std	Z+25, r18	; 0x19
   1205e:	81 50       	subi	r24, 0x01	; 1
   12060:	32 97       	sbiw	r30, 0x02	; 2
   12062:	81 11       	cpse	r24, r1
   12064:	f8 cf       	rjmp	.-16     	; 0x12056 <mereni_hwwire(unsigned int)+0x1e6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   12066:	f7 01       	movw	r30, r14
   12068:	70 87       	std	Z+8, r23	; 0x08
   1206a:	67 83       	std	Z+7, r22	; 0x07
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270 (discriminator 2)
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   1206c:	0f 5f       	subi	r16, 0xFF	; 255
   1206e:	fe e1       	ldi	r31, 0x1E	; 30
   12070:	ef 0e       	add	r14, r31
   12072:	f1 1c       	adc	r15, r1
   12074:	06 30       	cpi	r16, 0x06	; 6
   12076:	09 f0       	breq	.+2      	; 0x1207a <mereni_hwwire(unsigned int)+0x20a>
   12078:	16 cf       	rjmp	.-468    	; 0x11ea6 <mereni_hwwire(unsigned int)+0x36>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:326
          }
        }
      }
    }
  }
}
   1207a:	68 96       	adiw	r28, 0x18	; 24
   1207c:	0f b6       	in	r0, 0x3f	; 63
   1207e:	f8 94       	cli
   12080:	de bf       	out	0x3e, r29	; 62
   12082:	0f be       	out	0x3f, r0	; 63
   12084:	cd bf       	out	0x3d, r28	; 61
   12086:	df 91       	pop	r29
   12088:	cf 91       	pop	r28
   1208a:	1f 91       	pop	r17
   1208c:	0f 91       	pop	r16
   1208e:	ff 90       	pop	r15
   12090:	ef 90       	pop	r14
   12092:	df 90       	pop	r13
   12094:	cf 90       	pop	r12
   12096:	bf 90       	pop	r11
   12098:	af 90       	pop	r10
   1209a:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:320
            
          }

          else
          {
            status_tds18s20[w].online = False;
   1209c:	13 8e       	std	Z+27, r1	; 0x1b
   1209e:	e6 cf       	rjmp	.-52     	; 0x1206c <mereni_hwwire(unsigned int)+0x1fc>

000120a0 <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:198
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
   120a0:	0c 94 19 ea 	jmp	0x1d432	; 0x1d432 <eeprom_read_byte>

000120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   120a4:	0c 94 21 ea 	jmp	0x1d442	; 0x1d442 <eeprom_write_byte>

000120a8 <thermostat_ring_get_state(unsigned char)>:
_Z25thermostat_ring_get_stateh():
   120a8:	e8 2f       	mov	r30, r24
   120aa:	f0 e0       	ldi	r31, 0x00	; 0
   120ac:	eb 59       	subi	r30, 0x9B	; 155
   120ae:	fd 4e       	sbci	r31, 0xED	; 237
   120b0:	80 81       	ld	r24, Z
   120b2:	08 95       	ret

000120b4 <thermostat_ring_set_state(unsigned char, unsigned char)>:
_Z25thermostat_ring_set_statehh():
   120b4:	e8 2f       	mov	r30, r24
   120b6:	f0 e0       	ldi	r31, 0x00	; 0
   120b8:	eb 59       	subi	r30, 0x9B	; 155
   120ba:	fd 4e       	sbci	r31, 0xED	; 237
   120bc:	60 83       	st	Z, r22
   120be:	08 95       	ret

000120c0 <thermostat_ring_set_power(unsigned char, unsigned char)>:
_Z25thermostat_ring_set_powerhh():
   120c0:	e8 2f       	mov	r30, r24
   120c2:	f0 e0       	ldi	r31, 0x00	; 0
   120c4:	e0 5a       	subi	r30, 0xA0	; 160
   120c6:	fd 4e       	sbci	r31, 0xED	; 237
   120c8:	60 83       	st	Z, r22
   120ca:	08 95       	ret

000120cc <thermostat_init_pid()>:
_Z19thermostat_init_pidv():
   120cc:	2f 92       	push	r2
   120ce:	3f 92       	push	r3
   120d0:	4f 92       	push	r4
   120d2:	5f 92       	push	r5
   120d4:	6f 92       	push	r6
   120d6:	7f 92       	push	r7
   120d8:	8f 92       	push	r8
   120da:	9f 92       	push	r9
   120dc:	af 92       	push	r10
   120de:	bf 92       	push	r11
   120e0:	cf 92       	push	r12
   120e2:	df 92       	push	r13
   120e4:	ef 92       	push	r14
   120e6:	ff 92       	push	r15
   120e8:	0f 93       	push	r16
   120ea:	1f 93       	push	r17
   120ec:	cf 93       	push	r28
   120ee:	df 93       	push	r29
   120f0:	23 ed       	ldi	r18, 0xD3	; 211
   120f2:	82 2e       	mov	r8, r18
   120f4:	22 e1       	ldi	r18, 0x12	; 18
   120f6:	92 2e       	mov	r9, r18
   120f8:	3f eb       	ldi	r19, 0xBF	; 191
   120fa:	43 2e       	mov	r4, r19
   120fc:	32 e1       	ldi	r19, 0x12	; 18
   120fe:	53 2e       	mov	r5, r19
   12100:	4b ea       	ldi	r20, 0xAB	; 171
   12102:	24 2e       	mov	r2, r20
   12104:	42 e1       	ldi	r20, 0x12	; 18
   12106:	34 2e       	mov	r3, r20
   12108:	d0 e0       	ldi	r29, 0x00	; 0
   1210a:	c0 e0       	ldi	r28, 0x00	; 0
   1210c:	8c e3       	ldi	r24, 0x3C	; 60
   1210e:	90 e0       	ldi	r25, 0x00	; 0
   12110:	0e 94 a8 db 	call	0x1b750	; 0x1b750 <operator new(unsigned int)>
   12114:	3c 01       	movw	r6, r24
   12116:	1f 92       	push	r1
   12118:	1f 92       	push	r1
   1211a:	8f e3       	ldi	r24, 0x3F	; 63
   1211c:	8f 93       	push	r24
   1211e:	80 e8       	ldi	r24, 0x80	; 128
   12120:	8f 93       	push	r24
   12122:	1f 92       	push	r1
   12124:	1f 92       	push	r1
   12126:	a1 2c       	mov	r10, r1
   12128:	b1 2c       	mov	r11, r1
   1212a:	80 ea       	ldi	r24, 0xA0	; 160
   1212c:	c8 2e       	mov	r12, r24
   1212e:	80 e4       	ldi	r24, 0x40	; 64
   12130:	d8 2e       	mov	r13, r24
   12132:	e1 2c       	mov	r14, r1
   12134:	f1 2c       	mov	r15, r1
   12136:	00 e0       	ldi	r16, 0x00	; 0
   12138:	10 e4       	ldi	r17, 0x40	; 64
   1213a:	91 01       	movw	r18, r2
   1213c:	a2 01       	movw	r20, r4
   1213e:	b4 01       	movw	r22, r8
   12140:	c3 01       	movw	r24, r6
   12142:	0e 94 81 c1 	call	0x18302	; 0x18302 <PID::PID(double*, double*, double*, double, double, double, int)>
   12146:	e0 91 5e 12 	lds	r30, 0x125E	; 0x80125e <array_pids>
   1214a:	f0 91 5f 12 	lds	r31, 0x125F	; 0x80125f <array_pids+0x1>
   1214e:	ec 0f       	add	r30, r28
   12150:	fd 1f       	adc	r31, r29
   12152:	71 82       	std	Z+1, r7	; 0x01
   12154:	60 82       	st	Z, r6
   12156:	61 e0       	ldi	r22, 0x01	; 1
   12158:	70 e0       	ldi	r23, 0x00	; 0
   1215a:	c3 01       	movw	r24, r6
   1215c:	0e 94 b9 c0 	call	0x18172	; 0x18172 <PID::SetMode(int)>
   12160:	e0 91 5e 12 	lds	r30, 0x125E	; 0x80125e <array_pids>
   12164:	f0 91 5f 12 	lds	r31, 0x125F	; 0x80125f <array_pids+0x1>
   12168:	ec 0f       	add	r30, r28
   1216a:	fd 1f       	adc	r31, r29
   1216c:	00 e0       	ldi	r16, 0x00	; 0
   1216e:	10 e0       	ldi	r17, 0x00	; 0
   12170:	2f e7       	ldi	r18, 0x7F	; 127
   12172:	33 e4       	ldi	r19, 0x43	; 67
   12174:	40 e0       	ldi	r20, 0x00	; 0
   12176:	50 e0       	ldi	r21, 0x00	; 0
   12178:	ba 01       	movw	r22, r20
   1217a:	80 81       	ld	r24, Z
   1217c:	91 81       	ldd	r25, Z+1	; 0x01
   1217e:	0e 94 f1 bf 	call	0x17fe2	; 0x17fe2 <PID::SetOutputLimits(double, double)>
   12182:	84 e0       	ldi	r24, 0x04	; 4
   12184:	88 0e       	add	r8, r24
   12186:	91 1c       	adc	r9, r1
   12188:	84 e0       	ldi	r24, 0x04	; 4
   1218a:	48 0e       	add	r4, r24
   1218c:	51 1c       	adc	r5, r1
   1218e:	84 e0       	ldi	r24, 0x04	; 4
   12190:	28 0e       	add	r2, r24
   12192:	31 1c       	adc	r3, r1
   12194:	22 96       	adiw	r28, 0x02	; 2
   12196:	0f 90       	pop	r0
   12198:	0f 90       	pop	r0
   1219a:	0f 90       	pop	r0
   1219c:	0f 90       	pop	r0
   1219e:	0f 90       	pop	r0
   121a0:	0f 90       	pop	r0
   121a2:	ca 30       	cpi	r28, 0x0A	; 10
   121a4:	d1 05       	cpc	r29, r1
   121a6:	09 f0       	breq	.+2      	; 0x121aa <thermostat_init_pid()+0xde>
   121a8:	b1 cf       	rjmp	.-158    	; 0x1210c <thermostat_init_pid()+0x40>
   121aa:	df 91       	pop	r29
   121ac:	cf 91       	pop	r28
   121ae:	1f 91       	pop	r17
   121b0:	0f 91       	pop	r16
   121b2:	ff 90       	pop	r15
   121b4:	ef 90       	pop	r14
   121b6:	df 90       	pop	r13
   121b8:	cf 90       	pop	r12
   121ba:	bf 90       	pop	r11
   121bc:	af 90       	pop	r10
   121be:	9f 90       	pop	r9
   121c0:	8f 90       	pop	r8
   121c2:	7f 90       	pop	r7
   121c4:	6f 90       	pop	r6
   121c6:	5f 90       	pop	r5
   121c8:	4f 90       	pop	r4
   121ca:	3f 90       	pop	r3
   121cc:	2f 90       	pop	r2
   121ce:	08 95       	ret

000121d0 <thermostat_pid_setdirection_direct(unsigned char)>:
_Z34thermostat_pid_setdirection_directh():
   121d0:	90 e0       	ldi	r25, 0x00	; 0
   121d2:	88 0f       	add	r24, r24
   121d4:	99 1f       	adc	r25, r25
   121d6:	20 91 5e 12 	lds	r18, 0x125E	; 0x80125e <array_pids>
   121da:	30 91 5f 12 	lds	r19, 0x125F	; 0x80125f <array_pids+0x1>
   121de:	82 0f       	add	r24, r18
   121e0:	93 1f       	adc	r25, r19
   121e2:	70 e0       	ldi	r23, 0x00	; 0
   121e4:	60 e0       	ldi	r22, 0x00	; 0
   121e6:	fc 01       	movw	r30, r24
   121e8:	80 81       	ld	r24, Z
   121ea:	91 81       	ldd	r25, Z+1	; 0x01
   121ec:	0c 94 d0 c0 	jmp	0x181a0	; 0x181a0 <PID::SetControllerDirection(int)>

000121f0 <thermostat_pid_setdirection_reverse(unsigned char)>:
_Z35thermostat_pid_setdirection_reverseh():
   121f0:	90 e0       	ldi	r25, 0x00	; 0
   121f2:	88 0f       	add	r24, r24
   121f4:	99 1f       	adc	r25, r25
   121f6:	20 91 5e 12 	lds	r18, 0x125E	; 0x80125e <array_pids>
   121fa:	30 91 5f 12 	lds	r19, 0x125F	; 0x80125f <array_pids+0x1>
   121fe:	82 0f       	add	r24, r18
   12200:	93 1f       	adc	r25, r19
   12202:	61 e0       	ldi	r22, 0x01	; 1
   12204:	70 e0       	ldi	r23, 0x00	; 0
   12206:	fc 01       	movw	r30, r24
   12208:	80 81       	ld	r24, Z
   1220a:	91 81       	ldd	r25, Z+1	; 0x01
   1220c:	0c 94 d0 c0 	jmp	0x181a0	; 0x181a0 <PID::SetControllerDirection(int)>

00012210 <thermostat_get_pid_p(unsigned char)>:
_Z20thermostat_get_pid_ph():
   12210:	94 e0       	ldi	r25, 0x04	; 4
   12212:	89 9f       	mul	r24, r25
   12214:	f0 01       	movw	r30, r0
   12216:	11 24       	eor	r1, r1
   12218:	e9 56       	subi	r30, 0x69	; 105
   1221a:	fd 4e       	sbci	r31, 0xED	; 237
   1221c:	60 81       	ld	r22, Z
   1221e:	71 81       	ldd	r23, Z+1	; 0x01
   12220:	82 81       	ldd	r24, Z+2	; 0x02
   12222:	93 81       	ldd	r25, Z+3	; 0x03
   12224:	08 95       	ret

00012226 <thermostat_pid_input(unsigned char, double)>:
_Z20thermostat_pid_inputhd():
   12226:	94 e0       	ldi	r25, 0x04	; 4
   12228:	89 9f       	mul	r24, r25
   1222a:	f0 01       	movw	r30, r0
   1222c:	11 24       	eor	r1, r1
   1222e:	ed 52       	subi	r30, 0x2D	; 45
   12230:	fd 4e       	sbci	r31, 0xED	; 237
   12232:	40 83       	st	Z, r20
   12234:	51 83       	std	Z+1, r21	; 0x01
   12236:	62 83       	std	Z+2, r22	; 0x02
   12238:	73 83       	std	Z+3, r23	; 0x03
   1223a:	08 95       	ret

0001223c <thermostat_pid_setpoint(unsigned char, double)>:
_Z23thermostat_pid_setpointhd():
   1223c:	94 e0       	ldi	r25, 0x04	; 4
   1223e:	89 9f       	mul	r24, r25
   12240:	f0 01       	movw	r30, r0
   12242:	11 24       	eor	r1, r1
   12244:	e5 55       	subi	r30, 0x55	; 85
   12246:	fd 4e       	sbci	r31, 0xED	; 237
   12248:	40 83       	st	Z, r20
   1224a:	51 83       	std	Z+1, r21	; 0x01
   1224c:	62 83       	std	Z+2, r22	; 0x02
   1224e:	73 83       	std	Z+3, r23	; 0x03
   12250:	08 95       	ret

00012252 <thermostat_pid_output(unsigned char)>:
_Z21thermostat_pid_outputh():
   12252:	94 e0       	ldi	r25, 0x04	; 4
   12254:	89 9f       	mul	r24, r25
   12256:	f0 01       	movw	r30, r0
   12258:	11 24       	eor	r1, r1
   1225a:	e1 54       	subi	r30, 0x41	; 65
   1225c:	fd 4e       	sbci	r31, 0xED	; 237
   1225e:	60 81       	ld	r22, Z
   12260:	71 81       	ldd	r23, Z+1	; 0x01
   12262:	82 81       	ldd	r24, Z+2	; 0x02
   12264:	93 81       	ldd	r25, Z+3	; 0x03
   12266:	0e 94 97 dc 	call	0x1b92e	; 0x1b92e <__fixunssfsi>
   1226a:	86 2f       	mov	r24, r22
   1226c:	08 95       	ret

0001226e <thermostat_get_pid_i(unsigned char)>:
_Z20thermostat_get_pid_ih():
   1226e:	94 e0       	ldi	r25, 0x04	; 4
   12270:	89 9f       	mul	r24, r25
   12272:	f0 01       	movw	r30, r0
   12274:	11 24       	eor	r1, r1
   12276:	ed 57       	subi	r30, 0x7D	; 125
   12278:	fd 4e       	sbci	r31, 0xED	; 237
   1227a:	60 81       	ld	r22, Z
   1227c:	71 81       	ldd	r23, Z+1	; 0x01
   1227e:	82 81       	ldd	r24, Z+2	; 0x02
   12280:	93 81       	ldd	r25, Z+3	; 0x03
   12282:	08 95       	ret

00012284 <thermostat_get_pid_d(unsigned char)>:
_Z20thermostat_get_pid_dh():
   12284:	94 e0       	ldi	r25, 0x04	; 4
   12286:	89 9f       	mul	r24, r25
   12288:	f0 01       	movw	r30, r0
   1228a:	11 24       	eor	r1, r1
   1228c:	e1 59       	subi	r30, 0x91	; 145
   1228e:	fd 4e       	sbci	r31, 0xED	; 237
   12290:	60 81       	ld	r22, Z
   12292:	71 81       	ldd	r23, Z+1	; 0x01
   12294:	82 81       	ldd	r24, Z+2	; 0x02
   12296:	93 81       	ldd	r25, Z+3	; 0x03
   12298:	08 95       	ret

0001229a <thermostat_get_pid_time(unsigned char)>:
_Z23thermostat_get_pid_timeh():
   1229a:	e8 2f       	mov	r30, r24
   1229c:	f0 e0       	ldi	r31, 0x00	; 0
   1229e:	e6 59       	subi	r30, 0x96	; 150
   122a0:	fd 4e       	sbci	r31, 0xED	; 237
   122a2:	80 81       	ld	r24, Z
   122a4:	08 95       	ret

000122a6 <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
   122a6:	ef 92       	push	r14
   122a8:	ff 92       	push	r15
   122aa:	0f 93       	push	r16
   122ac:	1f 93       	push	r17
   122ae:	cf 93       	push	r28
   122b0:	df 93       	push	r29
   122b2:	91 e2       	ldi	r25, 0x21	; 33
   122b4:	89 9f       	mul	r24, r25
   122b6:	e0 01       	movw	r28, r0
   122b8:	11 24       	eor	r1, r1
   122ba:	8e 01       	movw	r16, r28
   122bc:	04 5b       	subi	r16, 0xB4	; 180
   122be:	1e 4f       	sbci	r17, 0xFE	; 254
   122c0:	7b 01       	movw	r14, r22
   122c2:	cb 5a       	subi	r28, 0xAB	; 171
   122c4:	de 4f       	sbci	r29, 0xFE	; 254
   122c6:	c8 01       	movw	r24, r16
   122c8:	0e 94 50 90 	call	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>
   122cc:	f7 01       	movw	r30, r14
   122ce:	81 93       	st	Z+, r24
   122d0:	7f 01       	movw	r14, r30
   122d2:	88 23       	and	r24, r24
   122d4:	29 f0       	breq	.+10     	; 0x122e0 <thermostat_ring_get_name(unsigned char, char*)+0x3a>
   122d6:	0f 5f       	subi	r16, 0xFF	; 255
   122d8:	1f 4f       	sbci	r17, 0xFF	; 255
   122da:	0c 17       	cp	r16, r28
   122dc:	1d 07       	cpc	r17, r29
   122de:	99 f7       	brne	.-26     	; 0x122c6 <thermostat_ring_get_name(unsigned char, char*)+0x20>
   122e0:	df 91       	pop	r29
   122e2:	cf 91       	pop	r28
   122e4:	1f 91       	pop	r17
   122e6:	0f 91       	pop	r16
   122e8:	ff 90       	pop	r15
   122ea:	ef 90       	pop	r14
   122ec:	08 95       	ret

000122ee <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
   122ee:	df 92       	push	r13
   122f0:	ef 92       	push	r14
   122f2:	ff 92       	push	r15
   122f4:	0f 93       	push	r16
   122f6:	1f 93       	push	r17
   122f8:	cf 93       	push	r28
   122fa:	df 93       	push	r29
   122fc:	91 e2       	ldi	r25, 0x21	; 33
   122fe:	89 9f       	mul	r24, r25
   12300:	e0 01       	movw	r28, r0
   12302:	11 24       	eor	r1, r1
   12304:	7b 01       	movw	r14, r22
   12306:	8e 01       	movw	r16, r28
   12308:	04 5b       	subi	r16, 0xB4	; 180
   1230a:	1e 4f       	sbci	r17, 0xFE	; 254
   1230c:	cb 5a       	subi	r28, 0xAB	; 171
   1230e:	de 4f       	sbci	r29, 0xFE	; 254
   12310:	f7 01       	movw	r30, r14
   12312:	d1 90       	ld	r13, Z+
   12314:	7f 01       	movw	r14, r30
   12316:	6d 2d       	mov	r22, r13
   12318:	c8 01       	movw	r24, r16
   1231a:	0e 94 52 90 	call	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1231e:	dd 20       	and	r13, r13
   12320:	29 f0       	breq	.+10     	; 0x1232c <thermostat_ring_set_name(unsigned char, char*)+0x3e>
   12322:	0f 5f       	subi	r16, 0xFF	; 255
   12324:	1f 4f       	sbci	r17, 0xFF	; 255
   12326:	0c 17       	cp	r16, r28
   12328:	1d 07       	cpc	r17, r29
   1232a:	91 f7       	brne	.-28     	; 0x12310 <thermostat_ring_set_name(unsigned char, char*)+0x22>
   1232c:	df 91       	pop	r29
   1232e:	cf 91       	pop	r28
   12330:	1f 91       	pop	r17
   12332:	0f 91       	pop	r16
   12334:	ff 90       	pop	r15
   12336:	ef 90       	pop	r14
   12338:	df 90       	pop	r13
   1233a:	08 95       	ret

0001233c <thermostat_ring_get_output(unsigned char)>:
_Z26thermostat_ring_get_outputh():
   1233c:	21 e2       	ldi	r18, 0x21	; 33
   1233e:	82 9f       	mul	r24, r18
   12340:	c0 01       	movw	r24, r0
   12342:	11 24       	eor	r1, r1
   12344:	81 5a       	subi	r24, 0xA1	; 161
   12346:	9e 4f       	sbci	r25, 0xFE	; 254
   12348:	0c 94 50 90 	jmp	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>

0001234c <thermostat_ring_set_output(unsigned char, unsigned char)>:
_Z26thermostat_ring_set_outputhh():
   1234c:	21 e2       	ldi	r18, 0x21	; 33
   1234e:	82 9f       	mul	r24, r18
   12350:	c0 01       	movw	r24, r0
   12352:	11 24       	eor	r1, r1
   12354:	81 5a       	subi	r24, 0xA1	; 161
   12356:	9e 4f       	sbci	r25, 0xFE	; 254
   12358:	0c 94 52 90 	jmp	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

0001235c <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
   1235c:	21 e2       	ldi	r18, 0x21	; 33
   1235e:	82 9f       	mul	r24, r18
   12360:	c0 01       	movw	r24, r0
   12362:	11 24       	eor	r1, r1
   12364:	83 5a       	subi	r24, 0xA3	; 163
   12366:	9e 4f       	sbci	r25, 0xFE	; 254
   12368:	0c 94 50 90 	jmp	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>

0001236c <thermostat_ring_set_active(unsigned char, unsigned char)>:
_Z26thermostat_ring_set_activehh():
   1236c:	21 e2       	ldi	r18, 0x21	; 33
   1236e:	82 9f       	mul	r24, r18
   12370:	c0 01       	movw	r24, r0
   12372:	11 24       	eor	r1, r1
   12374:	83 5a       	subi	r24, 0xA3	; 163
   12376:	9e 4f       	sbci	r25, 0xFE	; 254
   12378:	0c 94 52 90 	jmp	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

0001237c <thermostat_ring_get_program_id(unsigned char)>:
_Z30thermostat_ring_get_program_idh():
   1237c:	21 e2       	ldi	r18, 0x21	; 33
   1237e:	82 9f       	mul	r24, r18
   12380:	c0 01       	movw	r24, r0
   12382:	11 24       	eor	r1, r1
   12384:	85 5a       	subi	r24, 0xA5	; 165
   12386:	9e 4f       	sbci	r25, 0xFE	; 254
   12388:	0c 94 50 90 	jmp	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>

0001238c <thermostat_ring_set_program_id(unsigned char, unsigned char)>:
_Z30thermostat_ring_set_program_idhh():
   1238c:	21 e2       	ldi	r18, 0x21	; 33
   1238e:	82 9f       	mul	r24, r18
   12390:	c0 01       	movw	r24, r0
   12392:	11 24       	eor	r1, r1
   12394:	85 5a       	subi	r24, 0xA5	; 165
   12396:	9e 4f       	sbci	r25, 0xFE	; 254
   12398:	0c 94 52 90 	jmp	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

0001239c <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
   1239c:	0f 93       	push	r16
   1239e:	1f 93       	push	r17
   123a0:	cf 93       	push	r28
   123a2:	91 e2       	ldi	r25, 0x21	; 33
   123a4:	89 9f       	mul	r24, r25
   123a6:	80 01       	movw	r16, r0
   123a8:	11 24       	eor	r1, r1
   123aa:	c8 01       	movw	r24, r16
   123ac:	8a 5a       	subi	r24, 0xAA	; 170
   123ae:	9e 4f       	sbci	r25, 0xFE	; 254
   123b0:	0e 94 50 90 	call	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>
   123b4:	c8 2f       	mov	r28, r24
   123b6:	c8 01       	movw	r24, r16
   123b8:	89 5a       	subi	r24, 0xA9	; 169
   123ba:	9e 4f       	sbci	r25, 0xFE	; 254
   123bc:	0e 94 50 90 	call	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>
   123c0:	2c 2f       	mov	r18, r28
   123c2:	30 e0       	ldi	r19, 0x00	; 0
   123c4:	32 2f       	mov	r19, r18
   123c6:	22 27       	eor	r18, r18
   123c8:	82 0f       	add	r24, r18
   123ca:	93 2f       	mov	r25, r19
   123cc:	91 1d       	adc	r25, r1
   123ce:	cf 91       	pop	r28
   123d0:	1f 91       	pop	r17
   123d2:	0f 91       	pop	r16
   123d4:	08 95       	ret

000123d6 <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
   123d6:	1f 93       	push	r17
   123d8:	cf 93       	push	r28
   123da:	df 93       	push	r29
   123dc:	16 2f       	mov	r17, r22
   123de:	67 2f       	mov	r22, r23
   123e0:	91 e2       	ldi	r25, 0x21	; 33
   123e2:	89 9f       	mul	r24, r25
   123e4:	e0 01       	movw	r28, r0
   123e6:	11 24       	eor	r1, r1
   123e8:	ce 01       	movw	r24, r28
   123ea:	8a 5a       	subi	r24, 0xAA	; 170
   123ec:	9e 4f       	sbci	r25, 0xFE	; 254
   123ee:	0e 94 52 90 	call	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   123f2:	61 2f       	mov	r22, r17
   123f4:	ce 01       	movw	r24, r28
   123f6:	89 5a       	subi	r24, 0xA9	; 169
   123f8:	9e 4f       	sbci	r25, 0xFE	; 254
   123fa:	df 91       	pop	r29
   123fc:	cf 91       	pop	r28
   123fe:	1f 91       	pop	r17
   12400:	0c 94 52 90 	jmp	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012404 <thermostat_ring_get_asociate_tds(unsigned char)>:
_Z32thermostat_ring_get_asociate_tdsh():
   12404:	21 e2       	ldi	r18, 0x21	; 33
   12406:	82 9f       	mul	r24, r18
   12408:	c0 01       	movw	r24, r0
   1240a:	11 24       	eor	r1, r1
   1240c:	84 5a       	subi	r24, 0xA4	; 164
   1240e:	9e 4f       	sbci	r25, 0xFE	; 254
   12410:	0c 94 50 90 	jmp	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>

00012414 <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>:
_Z32thermostat_ring_set_asociate_tdshh():
   12414:	21 e2       	ldi	r18, 0x21	; 33
   12416:	82 9f       	mul	r24, r18
   12418:	c0 01       	movw	r24, r0
   1241a:	11 24       	eor	r1, r1
   1241c:	84 5a       	subi	r24, 0xA4	; 164
   1241e:	9e 4f       	sbci	r25, 0xFE	; 254
   12420:	0c 94 52 90 	jmp	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012424 <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
   12424:	21 e2       	ldi	r18, 0x21	; 33
   12426:	82 9f       	mul	r24, r18
   12428:	c0 01       	movw	r24, r0
   1242a:	11 24       	eor	r1, r1
   1242c:	82 5a       	subi	r24, 0xA2	; 162
   1242e:	9e 4f       	sbci	r25, 0xFE	; 254
   12430:	0c 94 50 90 	jmp	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>

00012434 <thermostat_ring_set_mode(unsigned char, unsigned char)>:
_Z24thermostat_ring_set_modehh():
   12434:	21 e2       	ldi	r18, 0x21	; 33
   12436:	82 9f       	mul	r24, r18
   12438:	c0 01       	movw	r24, r0
   1243a:	11 24       	eor	r1, r1
   1243c:	82 5a       	subi	r24, 0xA2	; 162
   1243e:	9e 4f       	sbci	r25, 0xFE	; 254
   12440:	0c 94 52 90 	jmp	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012444 <thermostat_ring_get_mode_1(unsigned char, unsigned char)>:
_Z26thermostat_ring_get_mode_1hh():
   12444:	cf 93       	push	r28
   12446:	c6 2f       	mov	r28, r22
   12448:	0e 94 12 92 	call	0x12424	; 0x12424 <thermostat_ring_get_mode(unsigned char)>
   1244c:	91 e0       	ldi	r25, 0x01	; 1
   1244e:	8c 13       	cpse	r24, r28
   12450:	90 e0       	ldi	r25, 0x00	; 0
   12452:	89 2f       	mov	r24, r25
   12454:	cf 91       	pop	r28
   12456:	08 95       	ret

00012458 <thermostat_ring_get_status_data(unsigned char)>:
_Z31thermostat_ring_get_status_datah():
   12458:	21 e2       	ldi	r18, 0x21	; 33
   1245a:	82 9f       	mul	r24, r18
   1245c:	c0 01       	movw	r24, r0
   1245e:	11 24       	eor	r1, r1
   12460:	88 5a       	subi	r24, 0xA8	; 168
   12462:	9e 4f       	sbci	r25, 0xFE	; 254
   12464:	0c 94 50 90 	jmp	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>

00012468 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>:
_Z32thermostat_ring_set_status_biteshh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   12468:	21 e2       	ldi	r18, 0x21	; 33
   1246a:	82 9f       	mul	r24, r18
   1246c:	c0 01       	movw	r24, r0
   1246e:	11 24       	eor	r1, r1
   12470:	88 5a       	subi	r24, 0xA8	; 168
   12472:	9e 4f       	sbci	r25, 0xFE	; 254
   12474:	0c 94 52 90 	jmp	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012478 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>:
_Z28thermostat_ring_update_biteshhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:204
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
   12478:	1f 93       	push	r17
   1247a:	cf 93       	push	r28
   1247c:	df 93       	push	r29
   1247e:	c8 2f       	mov	r28, r24
   12480:	16 2f       	mov	r17, r22
   12482:	d4 2f       	mov	r29, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:205
  uint8_t b = thermostat_ring_get_status_data(idx);
   12484:	0e 94 2c 92 	call	0x12458	; 0x12458 <thermostat_ring_get_status_data(unsigned char)>
   12488:	61 e0       	ldi	r22, 0x01	; 1
   1248a:	70 e0       	ldi	r23, 0x00	; 0
   1248c:	01 c0       	rjmp	.+2      	; 0x12490 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x18>
   1248e:	66 0f       	add	r22, r22
   12490:	1a 95       	dec	r17
   12492:	ea f7       	brpl	.-6      	; 0x1248e <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x16>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:206
  if (sets == 0) cbi(b, bits);
   12494:	d1 11       	cpse	r29, r1
   12496:	08 c0       	rjmp	.+16     	; 0x124a8 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x30>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:206 (discriminator 1)
   12498:	60 95       	com	r22
   1249a:	68 23       	and	r22, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:208
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
   1249c:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:209
}
   1249e:	df 91       	pop	r29
   124a0:	cf 91       	pop	r28
   124a2:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:208
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
   124a4:	0c 94 34 92 	jmp	0x12468	; 0x12468 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   124a8:	68 2b       	or	r22, r24
   124aa:	f8 cf       	rjmp	.-16     	; 0x1249c <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x24>

000124ac <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
   124ac:	af 92       	push	r10
   124ae:	bf 92       	push	r11
   124b0:	cf 92       	push	r12
   124b2:	df 92       	push	r13
   124b4:	ef 92       	push	r14
   124b6:	ff 92       	push	r15
   124b8:	0f 93       	push	r16
   124ba:	1f 93       	push	r17
   124bc:	cf 93       	push	r28
   124be:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
   124c0:	c8 2f       	mov	r28, r24
   124c2:	d0 e0       	ldi	r29, 0x00	; 0
   124c4:	5e 01       	movw	r10, r28
   124c6:	aa 0c       	add	r10, r10
   124c8:	bb 1c       	adc	r11, r11
   124ca:	ce 01       	movw	r24, r28
   124cc:	88 0f       	add	r24, r24
   124ce:	99 1f       	adc	r25, r25
   124d0:	88 0f       	add	r24, r24
   124d2:	99 1f       	adc	r25, r25
   124d4:	fc 01       	movw	r30, r24
   124d6:	e1 59       	subi	r30, 0x91	; 145
   124d8:	fd 4e       	sbci	r31, 0xED	; 237
   124da:	c0 80       	ld	r12, Z
   124dc:	d1 80       	ldd	r13, Z+1	; 0x01
   124de:	e2 80       	ldd	r14, Z+2	; 0x02
   124e0:	f3 80       	ldd	r15, Z+3	; 0x03
   124e2:	fc 01       	movw	r30, r24
   124e4:	ed 57       	subi	r30, 0x7D	; 125
   124e6:	fd 4e       	sbci	r31, 0xED	; 237
   124e8:	00 81       	ld	r16, Z
   124ea:	11 81       	ldd	r17, Z+1	; 0x01
   124ec:	22 81       	ldd	r18, Z+2	; 0x02
   124ee:	33 81       	ldd	r19, Z+3	; 0x03
   124f0:	89 56       	subi	r24, 0x69	; 105
   124f2:	9d 4e       	sbci	r25, 0xED	; 237
   124f4:	fc 01       	movw	r30, r24
   124f6:	40 81       	ld	r20, Z
   124f8:	51 81       	ldd	r21, Z+1	; 0x01
   124fa:	62 81       	ldd	r22, Z+2	; 0x02
   124fc:	73 81       	ldd	r23, Z+3	; 0x03
   124fe:	e0 91 5e 12 	lds	r30, 0x125E	; 0x80125e <array_pids>
   12502:	f0 91 5f 12 	lds	r31, 0x125F	; 0x80125f <array_pids+0x1>
   12506:	ea 0d       	add	r30, r10
   12508:	fb 1d       	adc	r31, r11
   1250a:	80 81       	ld	r24, Z
   1250c:	91 81       	ldd	r25, Z+1	; 0x01
   1250e:	0e 94 8e bf 	call	0x17f1c	; 0x17f1c <PID::SetTunings(double, double, double)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
   12512:	c6 59       	subi	r28, 0x96	; 150
   12514:	dd 4e       	sbci	r29, 0xED	; 237
   12516:	68 81       	ld	r22, Y
   12518:	70 e0       	ldi	r23, 0x00	; 0
   1251a:	80 91 5e 12 	lds	r24, 0x125E	; 0x80125e <array_pids>
   1251e:	90 91 5f 12 	lds	r25, 0x125F	; 0x80125f <array_pids+0x1>
   12522:	a8 0e       	add	r10, r24
   12524:	b9 1e       	adc	r11, r25
   12526:	f5 01       	movw	r30, r10
   12528:	80 81       	ld	r24, Z
   1252a:	91 81       	ldd	r25, Z+1	; 0x01
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:221
}
   1252c:	df 91       	pop	r29
   1252e:	cf 91       	pop	r28
   12530:	1f 91       	pop	r17
   12532:	0f 91       	pop	r16
   12534:	ff 90       	pop	r15
   12536:	ef 90       	pop	r14
   12538:	df 90       	pop	r13
   1253a:	cf 90       	pop	r12
   1253c:	bf 90       	pop	r11
   1253e:	af 90       	pop	r10
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:220


void thermostat_ring_update_pid_parameters(uint8_t idx)
{
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
  array_pids[idx]->SetSampleTime(PID_time[idx]);
   12540:	0c 94 a4 bf 	jmp	0x17f48	; 0x17f48 <PID::SetSampleTime(int)>

00012544 <thermostat_ring_get_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_get_pid_eepromh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:224
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
   12544:	ef 92       	push	r14
   12546:	ff 92       	push	r15
   12548:	0f 93       	push	r16
   1254a:	1f 93       	push	r17
   1254c:	cf 93       	push	r28
   1254e:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:225
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
   12550:	e8 2e       	mov	r14, r24
   12552:	f1 2c       	mov	r15, r1
   12554:	91 e2       	ldi	r25, 0x21	; 33
   12556:	89 9f       	mul	r24, r25
   12558:	e0 01       	movw	r28, r0
   1255a:	11 24       	eor	r1, r1
   1255c:	ce 01       	movw	r24, r28
   1255e:	80 5a       	subi	r24, 0xA0	; 160
   12560:	9e 4f       	sbci	r25, 0xFE	; 254
   12562:	0e 94 6e bd 	call	0x17adc	; 0x17adc <EEPROMreadFloat(unsigned int)>
   12566:	87 01       	movw	r16, r14
   12568:	00 0f       	add	r16, r16
   1256a:	11 1f       	adc	r17, r17
   1256c:	00 0f       	add	r16, r16
   1256e:	11 1f       	adc	r17, r17
   12570:	f8 01       	movw	r30, r16
   12572:	e9 56       	subi	r30, 0x69	; 105
   12574:	fd 4e       	sbci	r31, 0xED	; 237
   12576:	60 83       	st	Z, r22
   12578:	71 83       	std	Z+1, r23	; 0x01
   1257a:	82 83       	std	Z+2, r24	; 0x02
   1257c:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
   1257e:	ce 01       	movw	r24, r28
   12580:	8c 59       	subi	r24, 0x9C	; 156
   12582:	9e 4f       	sbci	r25, 0xFE	; 254
   12584:	0e 94 6e bd 	call	0x17adc	; 0x17adc <EEPROMreadFloat(unsigned int)>
   12588:	f8 01       	movw	r30, r16
   1258a:	ed 57       	subi	r30, 0x7D	; 125
   1258c:	fd 4e       	sbci	r31, 0xED	; 237
   1258e:	60 83       	st	Z, r22
   12590:	71 83       	std	Z+1, r23	; 0x01
   12592:	82 83       	std	Z+2, r24	; 0x02
   12594:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
   12596:	ce 01       	movw	r24, r28
   12598:	88 59       	subi	r24, 0x98	; 152
   1259a:	9e 4f       	sbci	r25, 0xFE	; 254
   1259c:	0e 94 6e bd 	call	0x17adc	; 0x17adc <EEPROMreadFloat(unsigned int)>
   125a0:	f8 01       	movw	r30, r16
   125a2:	e1 59       	subi	r30, 0x91	; 145
   125a4:	fd 4e       	sbci	r31, 0xED	; 237
   125a6:	60 83       	st	Z, r22
   125a8:	71 83       	std	Z+1, r23	; 0x01
   125aa:	82 83       	std	Z+2, r24	; 0x02
   125ac:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
   125ae:	ce 01       	movw	r24, r28
   125b0:	84 59       	subi	r24, 0x94	; 148
   125b2:	9e 4f       	sbci	r25, 0xFE	; 254
   125b4:	0e 94 50 90 	call	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>
   125b8:	f7 01       	movw	r30, r14
   125ba:	e6 59       	subi	r30, 0x96	; 150
   125bc:	fd 4e       	sbci	r31, 0xED	; 237
   125be:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:229
}
   125c0:	df 91       	pop	r29
   125c2:	cf 91       	pop	r28
   125c4:	1f 91       	pop	r17
   125c6:	0f 91       	pop	r16
   125c8:	ff 90       	pop	r15
   125ca:	ef 90       	pop	r14
   125cc:	08 95       	ret

000125ce <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:232

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
   125ce:	ef 92       	push	r14
   125d0:	ff 92       	push	r15
   125d2:	0f 93       	push	r16
   125d4:	1f 93       	push	r17
   125d6:	cf 93       	push	r28
   125d8:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
   125da:	e8 2e       	mov	r14, r24
   125dc:	f1 2c       	mov	r15, r1
   125de:	91 e2       	ldi	r25, 0x21	; 33
   125e0:	89 9f       	mul	r24, r25
   125e2:	e0 01       	movw	r28, r0
   125e4:	11 24       	eor	r1, r1
   125e6:	87 01       	movw	r16, r14
   125e8:	00 0f       	add	r16, r16
   125ea:	11 1f       	adc	r17, r17
   125ec:	00 0f       	add	r16, r16
   125ee:	11 1f       	adc	r17, r17
   125f0:	f8 01       	movw	r30, r16
   125f2:	e9 56       	subi	r30, 0x69	; 105
   125f4:	fd 4e       	sbci	r31, 0xED	; 237
   125f6:	40 81       	ld	r20, Z
   125f8:	51 81       	ldd	r21, Z+1	; 0x01
   125fa:	62 81       	ldd	r22, Z+2	; 0x02
   125fc:	73 81       	ldd	r23, Z+3	; 0x03
   125fe:	ce 01       	movw	r24, r28
   12600:	80 5a       	subi	r24, 0xA0	; 160
   12602:	9e 4f       	sbci	r25, 0xFE	; 254
   12604:	0e 94 a0 bd 	call	0x17b40	; 0x17b40 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
   12608:	f8 01       	movw	r30, r16
   1260a:	ed 57       	subi	r30, 0x7D	; 125
   1260c:	fd 4e       	sbci	r31, 0xED	; 237
   1260e:	40 81       	ld	r20, Z
   12610:	51 81       	ldd	r21, Z+1	; 0x01
   12612:	62 81       	ldd	r22, Z+2	; 0x02
   12614:	73 81       	ldd	r23, Z+3	; 0x03
   12616:	ce 01       	movw	r24, r28
   12618:	8c 59       	subi	r24, 0x9C	; 156
   1261a:	9e 4f       	sbci	r25, 0xFE	; 254
   1261c:	0e 94 a0 bd 	call	0x17b40	; 0x17b40 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
   12620:	f8 01       	movw	r30, r16
   12622:	e1 59       	subi	r30, 0x91	; 145
   12624:	fd 4e       	sbci	r31, 0xED	; 237
   12626:	40 81       	ld	r20, Z
   12628:	51 81       	ldd	r21, Z+1	; 0x01
   1262a:	62 81       	ldd	r22, Z+2	; 0x02
   1262c:	73 81       	ldd	r23, Z+3	; 0x03
   1262e:	ce 01       	movw	r24, r28
   12630:	88 59       	subi	r24, 0x98	; 152
   12632:	9e 4f       	sbci	r25, 0xFE	; 254
   12634:	0e 94 a0 bd 	call	0x17b40	; 0x17b40 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
   12638:	f7 01       	movw	r30, r14
   1263a:	e6 59       	subi	r30, 0x96	; 150
   1263c:	fd 4e       	sbci	r31, 0xED	; 237
   1263e:	60 81       	ld	r22, Z
   12640:	ce 01       	movw	r24, r28
   12642:	84 59       	subi	r24, 0x94	; 148
   12644:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:237
}
   12646:	df 91       	pop	r29
   12648:	cf 91       	pop	r28
   1264a:	1f 91       	pop	r17
   1264c:	0f 91       	pop	r16
   1264e:	ff 90       	pop	r15
   12650:	ef 90       	pop	r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
   12652:	0c 94 52 90 	jmp	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012656 <thermostat_ring_pid_set_kp(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kphf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:240
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
   12656:	cf 93       	push	r28
   12658:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  PID_p[id] = x;
   1265a:	84 e0       	ldi	r24, 0x04	; 4
   1265c:	c8 9f       	mul	r28, r24
   1265e:	f0 01       	movw	r30, r0
   12660:	11 24       	eor	r1, r1
   12662:	e9 56       	subi	r30, 0x69	; 105
   12664:	fd 4e       	sbci	r31, 0xED	; 237
   12666:	40 83       	st	Z, r20
   12668:	51 83       	std	Z+1, r21	; 0x01
   1266a:	62 83       	std	Z+2, r22	; 0x02
   1266c:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
   1266e:	8c 2f       	mov	r24, r28
   12670:	0e 94 56 92 	call	0x124ac	; 0x124ac <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
   12674:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:244
}
   12676:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   12678:	0c 94 e7 92 	jmp	0x125ce	; 0x125ce <thermostat_ring_set_pid_eeprom(unsigned char)>

0001267c <thermostat_ring_pid_set_ki(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kihf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:246
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
   1267c:	cf 93       	push	r28
   1267e:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
  PID_i[id] = x;
   12680:	84 e0       	ldi	r24, 0x04	; 4
   12682:	c8 9f       	mul	r28, r24
   12684:	f0 01       	movw	r30, r0
   12686:	11 24       	eor	r1, r1
   12688:	ed 57       	subi	r30, 0x7D	; 125
   1268a:	fd 4e       	sbci	r31, 0xED	; 237
   1268c:	40 83       	st	Z, r20
   1268e:	51 83       	std	Z+1, r21	; 0x01
   12690:	62 83       	std	Z+2, r22	; 0x02
   12692:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
   12694:	8c 2f       	mov	r24, r28
   12696:	0e 94 56 92 	call	0x124ac	; 0x124ac <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
   1269a:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:250
}
   1269c:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   1269e:	0c 94 e7 92 	jmp	0x125ce	; 0x125ce <thermostat_ring_set_pid_eeprom(unsigned char)>

000126a2 <thermostat_ring_pid_set_kd(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kdhf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:252
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
   126a2:	cf 93       	push	r28
   126a4:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
  PID_d[id] = x;
   126a6:	84 e0       	ldi	r24, 0x04	; 4
   126a8:	c8 9f       	mul	r28, r24
   126aa:	f0 01       	movw	r30, r0
   126ac:	11 24       	eor	r1, r1
   126ae:	e1 59       	subi	r30, 0x91	; 145
   126b0:	fd 4e       	sbci	r31, 0xED	; 237
   126b2:	40 83       	st	Z, r20
   126b4:	51 83       	std	Z+1, r21	; 0x01
   126b6:	62 83       	std	Z+2, r22	; 0x02
   126b8:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
   126ba:	8c 2f       	mov	r24, r28
   126bc:	0e 94 56 92 	call	0x124ac	; 0x124ac <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
   126c0:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:256
}
   126c2:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   126c4:	0c 94 e7 92 	jmp	0x125ce	; 0x125ce <thermostat_ring_set_pid_eeprom(unsigned char)>

000126c8 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>:
_Z28thermostat_ring_pid_set_timehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:259
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
   126c8:	cf 93       	push	r28
   126ca:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
  PID_time[id] = timer;
   126cc:	e8 2f       	mov	r30, r24
   126ce:	f0 e0       	ldi	r31, 0x00	; 0
   126d0:	e6 59       	subi	r30, 0x96	; 150
   126d2:	fd 4e       	sbci	r31, 0xED	; 237
   126d4:	60 83       	st	Z, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
   126d6:	0e 94 56 92 	call	0x124ac	; 0x124ac <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
   126da:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:263
}
   126dc:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   126de:	0c 94 e7 92 	jmp	0x125ce	; 0x125ce <thermostat_ring_set_pid_eeprom(unsigned char)>

000126e2 <thermostat_program_get_name(unsigned char, char*)>:
_Z27thermostat_program_get_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:270


//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
   126e2:	ef 92       	push	r14
   126e4:	ff 92       	push	r15
   126e6:	0f 93       	push	r16
   126e8:	1f 93       	push	r17
   126ea:	cf 93       	push	r28
   126ec:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:274
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
   126ee:	9d e4       	ldi	r25, 0x4D	; 77
   126f0:	89 9f       	mul	r24, r25
   126f2:	e0 01       	movw	r28, r0
   126f4:	11 24       	eor	r1, r1
   126f6:	8e 01       	movw	r16, r28
   126f8:	0c 5c       	subi	r16, 0xCC	; 204
   126fa:	1d 4f       	sbci	r17, 0xFD	; 253
   126fc:	7b 01       	movw	r14, r22
   126fe:	c2 5c       	subi	r28, 0xC2	; 194
   12700:	dd 4f       	sbci	r29, 0xFD	; 253
   12702:	c8 01       	movw	r24, r16
   12704:	0e 94 50 90 	call	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:275
    name[i] = t;
   12708:	f7 01       	movw	r30, r14
   1270a:	81 93       	st	Z+, r24
   1270c:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:276
    if (t == 0) break;
   1270e:	88 23       	and	r24, r24
   12710:	29 f0       	breq	.+10     	; 0x1271c <thermostat_program_get_name(unsigned char, char*)+0x3a>
   12712:	0f 5f       	subi	r16, 0xFF	; 255
   12714:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:272 (discriminator 2)
//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   12716:	0c 17       	cp	r16, r28
   12718:	1d 07       	cpc	r17, r29
   1271a:	99 f7       	brne	.-26     	; 0x12702 <thermostat_program_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:278
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
    name[i] = t;
    if (t == 0) break;
  }
}
   1271c:	df 91       	pop	r29
   1271e:	cf 91       	pop	r28
   12720:	1f 91       	pop	r17
   12722:	0f 91       	pop	r16
   12724:	ff 90       	pop	r15
   12726:	ef 90       	pop	r14
   12728:	08 95       	ret

0001272a <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:281
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
   1272a:	ef 92       	push	r14
   1272c:	ff 92       	push	r15
   1272e:	0f 93       	push	r16
   12730:	1f 93       	push	r17
   12732:	cf 93       	push	r28
   12734:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
   12736:	9d e4       	ldi	r25, 0x4D	; 77
   12738:	89 9f       	mul	r24, r25
   1273a:	80 01       	movw	r16, r0
   1273c:	11 24       	eor	r1, r1
   1273e:	eb 01       	movw	r28, r22
   12740:	78 01       	movw	r14, r16
   12742:	8c ec       	ldi	r24, 0xCC	; 204
   12744:	e8 1a       	sub	r14, r24
   12746:	8d ef       	ldi	r24, 0xFD	; 253
   12748:	f8 0a       	sbc	r15, r24
   1274a:	02 5c       	subi	r16, 0xC2	; 194
   1274c:	1d 4f       	sbci	r17, 0xFD	; 253
   1274e:	69 91       	ld	r22, Y+
   12750:	c7 01       	movw	r24, r14
   12752:	0e 94 52 90 	call	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
   12756:	fe 01       	movw	r30, r28
   12758:	31 97       	sbiw	r30, 0x01	; 1
   1275a:	80 81       	ld	r24, Z
   1275c:	88 23       	and	r24, r24
   1275e:	31 f0       	breq	.+12     	; 0x1276c <thermostat_program_set_name(unsigned char, char*)+0x42>
   12760:	9f ef       	ldi	r25, 0xFF	; 255
   12762:	e9 1a       	sub	r14, r25
   12764:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:282 (discriminator 2)
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   12766:	e0 16       	cp	r14, r16
   12768:	f1 06       	cpc	r15, r17
   1276a:	89 f7       	brne	.-30     	; 0x1274e <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
   1276c:	df 91       	pop	r29
   1276e:	cf 91       	pop	r28
   12770:	1f 91       	pop	r17
   12772:	0f 91       	pop	r16
   12774:	ff 90       	pop	r15
   12776:	ef 90       	pop	r14
   12778:	08 95       	ret

0001277a <thermostat_program_get_active(unsigned char)>:
_Z29thermostat_program_get_activeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:291
//// globalni povoleni programu a nastaveni rezimu
uint8_t thermostat_program_get_active(uint8_t program_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
   1277a:	2d e4       	ldi	r18, 0x4D	; 77
   1277c:	82 9f       	mul	r24, r18
   1277e:	c0 01       	movw	r24, r0
   12780:	11 24       	eor	r1, r1
   12782:	8f 50       	subi	r24, 0x0F	; 15
   12784:	9e 4f       	sbci	r25, 0xFE	; 254
   12786:	0c 94 50 90 	jmp	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>

0001278a <thermostat_program_set_active(unsigned char, unsigned char)>:
_Z29thermostat_program_set_activehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   1278a:	2d e4       	ldi	r18, 0x4D	; 77
   1278c:	82 9f       	mul	r24, r18
   1278e:	c0 01       	movw	r24, r0
   12790:	11 24       	eor	r1, r1
   12792:	8f 50       	subi	r24, 0x0F	; 15
   12794:	9e 4f       	sbci	r25, 0xFE	; 254
   12796:	0c 94 52 90 	jmp	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

0001279a <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>:
_Z27thermostat_program_get_timehhPhS_S_S_S_():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:301
}


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
   1279a:	7f 92       	push	r7
   1279c:	8f 92       	push	r8
   1279e:	9f 92       	push	r9
   127a0:	af 92       	push	r10
   127a2:	bf 92       	push	r11
   127a4:	cf 92       	push	r12
   127a6:	df 92       	push	r13
   127a8:	ef 92       	push	r14
   127aa:	ff 92       	push	r15
   127ac:	0f 93       	push	r16
   127ae:	1f 93       	push	r17
   127b0:	cf 93       	push	r28
   127b2:	df 93       	push	r29
   127b4:	5a 01       	movw	r10, r20
   127b6:	e9 01       	movw	r28, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:302
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
   127b8:	9d e4       	ldi	r25, 0x4D	; 77
   127ba:	89 9f       	mul	r24, r25
   127bc:	40 01       	movw	r8, r0
   127be:	11 24       	eor	r1, r1
   127c0:	ef e0       	ldi	r30, 0x0F	; 15
   127c2:	8e 1a       	sub	r8, r30
   127c4:	ee ef       	ldi	r30, 0xFE	; 254
   127c6:	9e 0a       	sbc	r9, r30
   127c8:	f6 e0       	ldi	r31, 0x06	; 6
   127ca:	6f 9f       	mul	r22, r31
   127cc:	80 0c       	add	r8, r0
   127ce:	91 1c       	adc	r9, r1
   127d0:	11 24       	eor	r1, r1
   127d2:	c4 01       	movw	r24, r8
   127d4:	02 96       	adiw	r24, 0x02	; 2
   127d6:	0e 94 50 90 	call	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>
   127da:	78 2e       	mov	r7, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
   127dc:	c4 01       	movw	r24, r8
   127de:	03 96       	adiw	r24, 0x03	; 3
   127e0:	0e 94 50 90 	call	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
   127e4:	97 2d       	mov	r25, r7
   127e6:	96 95       	lsr	r25
   127e8:	96 95       	lsr	r25
   127ea:	96 95       	lsr	r25
   127ec:	f5 01       	movw	r30, r10
   127ee:	90 83       	st	Z, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
   127f0:	27 2d       	mov	r18, r7
   127f2:	30 e0       	ldi	r19, 0x00	; 0
   127f4:	35 95       	asr	r19
   127f6:	27 95       	ror	r18
   127f8:	23 70       	andi	r18, 0x03	; 3
   127fa:	9f e0       	ldi	r25, 0x0F	; 15
   127fc:	29 9f       	mul	r18, r25
   127fe:	20 2d       	mov	r18, r0
   12800:	11 24       	eor	r1, r1
   12802:	28 83       	st	Y, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
   12804:	28 2f       	mov	r18, r24
   12806:	26 95       	lsr	r18
   12808:	26 95       	lsr	r18
   1280a:	26 95       	lsr	r18
   1280c:	f8 01       	movw	r30, r16
   1280e:	20 83       	st	Z, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
   12810:	83 70       	andi	r24, 0x03	; 3
   12812:	89 9f       	mul	r24, r25
   12814:	80 2d       	mov	r24, r0
   12816:	11 24       	eor	r1, r1
   12818:	f7 01       	movw	r30, r14
   1281a:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
   1281c:	87 2d       	mov	r24, r7
   1281e:	81 70       	andi	r24, 0x01	; 1
   12820:	f6 01       	movw	r30, r12
   12822:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:309
}
   12824:	df 91       	pop	r29
   12826:	cf 91       	pop	r28
   12828:	1f 91       	pop	r17
   1282a:	0f 91       	pop	r16
   1282c:	ff 90       	pop	r15
   1282e:	ef 90       	pop	r14
   12830:	df 90       	pop	r13
   12832:	cf 90       	pop	r12
   12834:	bf 90       	pop	r11
   12836:	af 90       	pop	r10
   12838:	9f 90       	pop	r9
   1283a:	8f 90       	pop	r8
   1283c:	7f 90       	pop	r7
   1283e:	08 95       	ret

00012840 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:312
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
   12840:	cf 92       	push	r12
   12842:	ef 92       	push	r14
   12844:	0f 93       	push	r16
   12846:	1f 93       	push	r17
   12848:	cf 93       	push	r28
   1284a:	df 93       	push	r29
   1284c:	c8 2f       	mov	r28, r24
   1284e:	56 2f       	mov	r21, r22
   12850:	8e 2d       	mov	r24, r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
   12852:	3f e0       	ldi	r19, 0x0F	; 15
   12854:	63 2f       	mov	r22, r19
   12856:	0e 94 fa dd 	call	0x1bbf4	; 0x1bbf4 <__udivmodqi4>
   1285a:	83 70       	andi	r24, 0x03	; 3
   1285c:	98 e0       	ldi	r25, 0x08	; 8
   1285e:	09 9f       	mul	r16, r25
   12860:	80 01       	movw	r16, r0
   12862:	11 24       	eor	r1, r1
   12864:	08 0f       	add	r16, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
   12866:	8d e4       	ldi	r24, 0x4D	; 77
   12868:	c8 9f       	mul	r28, r24
   1286a:	e0 01       	movw	r28, r0
   1286c:	11 24       	eor	r1, r1
   1286e:	cf 50       	subi	r28, 0x0F	; 15
   12870:	de 4f       	sbci	r29, 0xFE	; 254
   12872:	96 e0       	ldi	r25, 0x06	; 6
   12874:	59 9f       	mul	r21, r25
   12876:	c0 0d       	add	r28, r0
   12878:	d1 1d       	adc	r29, r1
   1287a:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
   1287c:	82 2f       	mov	r24, r18
   1287e:	0e 94 fa dd 	call	0x1bbf4	; 0x1bbf4 <__udivmodqi4>
   12882:	68 2f       	mov	r22, r24
   12884:	66 0f       	add	r22, r22
   12886:	66 70       	andi	r22, 0x06	; 6
   12888:	88 e0       	ldi	r24, 0x08	; 8
   1288a:	48 9f       	mul	r20, r24
   1288c:	a0 01       	movw	r20, r0
   1288e:	11 24       	eor	r1, r1
   12890:	9c 2d       	mov	r25, r12
   12892:	91 70       	andi	r25, 0x01	; 1
   12894:	c9 2e       	mov	r12, r25
   12896:	c4 0e       	add	r12, r20
   12898:	6c 0d       	add	r22, r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
   1289a:	ce 01       	movw	r24, r28
   1289c:	02 96       	adiw	r24, 0x02	; 2
   1289e:	0e 94 52 90 	call	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
   128a2:	60 2f       	mov	r22, r16
   128a4:	ce 01       	movw	r24, r28
   128a6:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:318
}
   128a8:	df 91       	pop	r29
   128aa:	cf 91       	pop	r28
   128ac:	1f 91       	pop	r17
   128ae:	0f 91       	pop	r16
   128b0:	ef 90       	pop	r14
   128b2:	cf 90       	pop	r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
   128b4:	0c 94 52 90 	jmp	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

000128b8 <thermostat_program_get_threshold(unsigned char, unsigned char)>:
_Z32thermostat_program_get_thresholdhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:323
}


//// ziska rozhodovaci uroven termostatu
uint16_t thermostat_program_get_threshold(uint8_t program_id, uint8_t interval_id)
{
   128b8:	1f 93       	push	r17
   128ba:	cf 93       	push	r28
   128bc:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:325
  uint16_t ret = 0;
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
   128be:	9d e4       	ldi	r25, 0x4D	; 77
   128c0:	89 9f       	mul	r24, r25
   128c2:	e0 01       	movw	r28, r0
   128c4:	11 24       	eor	r1, r1
   128c6:	cf 50       	subi	r28, 0x0F	; 15
   128c8:	de 4f       	sbci	r29, 0xFE	; 254
   128ca:	86 e0       	ldi	r24, 0x06	; 6
   128cc:	68 9f       	mul	r22, r24
   128ce:	c0 0d       	add	r28, r0
   128d0:	d1 1d       	adc	r29, r1
   128d2:	11 24       	eor	r1, r1
   128d4:	ce 01       	movw	r24, r28
   128d6:	05 96       	adiw	r24, 0x05	; 5
   128d8:	0e 94 50 90 	call	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>
   128dc:	18 2f       	mov	r17, r24
   128de:	ce 01       	movw	r24, r28
   128e0:	04 96       	adiw	r24, 0x04	; 4
   128e2:	0e 94 50 90 	call	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>
   128e6:	21 2f       	mov	r18, r17
   128e8:	30 e0       	ldi	r19, 0x00	; 0
   128ea:	32 2f       	mov	r19, r18
   128ec:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:327
  return ret;
}
   128ee:	82 0f       	add	r24, r18
   128f0:	93 2f       	mov	r25, r19
   128f2:	91 1d       	adc	r25, r1
   128f4:	df 91       	pop	r29
   128f6:	cf 91       	pop	r28
   128f8:	1f 91       	pop	r17
   128fa:	08 95       	ret

000128fc <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:330
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
   128fc:	1f 93       	push	r17
   128fe:	cf 93       	push	r28
   12900:	df 93       	push	r29
   12902:	14 2f       	mov	r17, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
   12904:	9d e4       	ldi	r25, 0x4D	; 77
   12906:	89 9f       	mul	r24, r25
   12908:	e0 01       	movw	r28, r0
   1290a:	11 24       	eor	r1, r1
   1290c:	cf 50       	subi	r28, 0x0F	; 15
   1290e:	de 4f       	sbci	r29, 0xFE	; 254
   12910:	86 e0       	ldi	r24, 0x06	; 6
   12912:	68 9f       	mul	r22, r24
   12914:	c0 0d       	add	r28, r0
   12916:	d1 1d       	adc	r29, r1
   12918:	11 24       	eor	r1, r1
   1291a:	65 2f       	mov	r22, r21
   1291c:	ce 01       	movw	r24, r28
   1291e:	05 96       	adiw	r24, 0x05	; 5
   12920:	0e 94 52 90 	call	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
   12924:	61 2f       	mov	r22, r17
   12926:	ce 01       	movw	r24, r28
   12928:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:333
}
   1292a:	df 91       	pop	r29
   1292c:	cf 91       	pop	r28
   1292e:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
   12930:	0c 94 52 90 	jmp	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012934 <thermostat_program_get_week(unsigned char, unsigned char)>:
_Z27thermostat_program_get_weekhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   12934:	2d e4       	ldi	r18, 0x4D	; 77
   12936:	82 9f       	mul	r24, r18
   12938:	c0 01       	movw	r24, r0
   1293a:	11 24       	eor	r1, r1
   1293c:	26 e0       	ldi	r18, 0x06	; 6
   1293e:	62 9f       	mul	r22, r18
   12940:	80 0d       	add	r24, r0
   12942:	91 1d       	adc	r25, r1
   12944:	11 24       	eor	r1, r1
   12946:	8e 50       	subi	r24, 0x0E	; 14
   12948:	9e 4f       	sbci	r25, 0xFE	; 254
   1294a:	0c 94 50 90 	jmp	0x120a0	; 0x120a0 <EEPROMClass::read(int) [clone .isra.0]>

0001294e <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:371
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
   1294e:	2d e4       	ldi	r18, 0x4D	; 77
   12950:	82 9f       	mul	r24, r18
   12952:	c0 01       	movw	r24, r0
   12954:	11 24       	eor	r1, r1
   12956:	26 e0       	ldi	r18, 0x06	; 6
   12958:	62 9f       	mul	r22, r18
   1295a:	80 0d       	add	r24, r0
   1295c:	91 1d       	adc	r25, r1
   1295e:	11 24       	eor	r1, r1
   12960:	64 2f       	mov	r22, r20
   12962:	8e 50       	subi	r24, 0x0E	; 14
   12964:	9e 4f       	sbci	r25, 0xFE	; 254
   12966:	0c 94 52 90 	jmp	0x120a4	; 0x120a4 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

0001296a <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)>:
_Z37thermostat_program_set_parse_intervalhhPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:338
}


//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
   1296a:	bf 92       	push	r11
   1296c:	cf 92       	push	r12
   1296e:	df 92       	push	r13
   12970:	ef 92       	push	r14
   12972:	ff 92       	push	r15
   12974:	0f 93       	push	r16
   12976:	1f 93       	push	r17
   12978:	cf 93       	push	r28
   1297a:	df 93       	push	r29
   1297c:	d8 2f       	mov	r29, r24
   1297e:	16 2f       	mov	r17, r22
   12980:	ca 01       	movw	r24, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:343
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
   12982:	6b ed       	ldi	r22, 0xDB	; 219
   12984:	73 e0       	ldi	r23, 0x03	; 3
   12986:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
   1298a:	f1 2c       	mov	r15, r1
   1298c:	c1 2c       	mov	r12, r1
   1298e:	e1 2c       	mov	r14, r1
   12990:	00 e0       	ldi	r16, 0x00	; 0
   12992:	b1 2c       	mov	r11, r1
   12994:	d1 2c       	mov	r13, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
   12996:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
   12998:	00 97       	sbiw	r24, 0x00	; 0
   1299a:	59 f1       	breq	.+86     	; 0x129f2 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x88>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
   1299c:	c1 11       	cpse	r28, r1
   1299e:	0b c0       	rjmp	.+22     	; 0x129b6 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x4c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:346 (discriminator 1)
   129a0:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
   129a4:	d8 2e       	mov	r13, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
   129a6:	6b ed       	ldi	r22, 0xDB	; 219
   129a8:	73 e0       	ldi	r23, 0x03	; 3
   129aa:	90 e0       	ldi	r25, 0x00	; 0
   129ac:	80 e0       	ldi	r24, 0x00	; 0
   129ae:	0e 94 fa e1 	call	0x1c3f4	; 0x1c3f4 <strtok>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:354
    cnt++;
   129b2:	cf 5f       	subi	r28, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:344
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
   129b4:	f1 cf       	rjmp	.-30     	; 0x12998 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x2e>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:347
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
   129b6:	c1 30       	cpi	r28, 0x01	; 1
   129b8:	21 f4       	brne	.+8      	; 0x129c2 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x58>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:347 (discriminator 1)
   129ba:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
   129be:	b8 2e       	mov	r11, r24
   129c0:	f2 cf       	rjmp	.-28     	; 0x129a6 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
   129c2:	c2 30       	cpi	r28, 0x02	; 2
   129c4:	21 f4       	brne	.+8      	; 0x129ce <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x64>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:348 (discriminator 1)
   129c6:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
   129ca:	08 2f       	mov	r16, r24
   129cc:	ec cf       	rjmp	.-40     	; 0x129a6 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
   129ce:	c3 30       	cpi	r28, 0x03	; 3
   129d0:	21 f4       	brne	.+8      	; 0x129da <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x70>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:349 (discriminator 1)
   129d2:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
   129d6:	e8 2e       	mov	r14, r24
   129d8:	e6 cf       	rjmp	.-52     	; 0x129a6 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
   129da:	c4 30       	cpi	r28, 0x04	; 4
   129dc:	21 f4       	brne	.+8      	; 0x129e6 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x7c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:350 (discriminator 1)
   129de:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
   129e2:	f8 2e       	mov	r15, r24
   129e4:	e0 cf       	rjmp	.-64     	; 0x129a6 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
   129e6:	c5 30       	cpi	r28, 0x05	; 5
   129e8:	f1 f6       	brne	.-68     	; 0x129a6 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:351 (discriminator 1)
   129ea:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <atoi>
   129ee:	c8 2e       	mov	r12, r24
   129f0:	da cf       	rjmp	.-76     	; 0x129a6 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
   129f2:	c6 30       	cpi	r28, 0x06	; 6
   129f4:	a1 f4       	brne	.+40     	; 0x12a1e <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0xb4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
   129f6:	2b 2d       	mov	r18, r11
   129f8:	4d 2d       	mov	r20, r13
   129fa:	61 2f       	mov	r22, r17
   129fc:	8d 2f       	mov	r24, r29
   129fe:	0e 94 20 94 	call	0x12840	; 0x12840 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
   12a02:	4f 2d       	mov	r20, r15
   12a04:	61 2f       	mov	r22, r17
   12a06:	8d 2f       	mov	r24, r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:361
  }
}
   12a08:	df 91       	pop	r29
   12a0a:	cf 91       	pop	r28
   12a0c:	1f 91       	pop	r17
   12a0e:	0f 91       	pop	r16
   12a10:	ff 90       	pop	r15
   12a12:	ef 90       	pop	r14
   12a14:	df 90       	pop	r13
   12a16:	cf 90       	pop	r12
   12a18:	bf 90       	pop	r11
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:359
    cnt++;
  }
  if (cnt == 6)
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    thermostat_program_set_week(program_id, interval_id, week);
   12a1a:	0c 94 a7 94 	jmp	0x1294e	; 0x1294e <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:361
  }
}
   12a1e:	df 91       	pop	r29
   12a20:	cf 91       	pop	r28
   12a22:	1f 91       	pop	r17
   12a24:	0f 91       	pop	r16
   12a26:	ff 90       	pop	r15
   12a28:	ef 90       	pop	r14
   12a2a:	df 90       	pop	r13
   12a2c:	cf 90       	pop	r12
   12a2e:	bf 90       	pop	r11
   12a30:	08 95       	ret

00012a32 <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)>:
_Z38thermostat_program_set_interval_activehhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:377
}


/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
   12a32:	9f 92       	push	r9
   12a34:	af 92       	push	r10
   12a36:	bf 92       	push	r11
   12a38:	cf 92       	push	r12
   12a3a:	df 92       	push	r13
   12a3c:	ef 92       	push	r14
   12a3e:	ff 92       	push	r15
   12a40:	0f 93       	push	r16
   12a42:	1f 93       	push	r17
   12a44:	cf 93       	push	r28
   12a46:	df 93       	push	r29
   12a48:	00 d0       	rcall	.+0      	; 0x12a4a <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)+0x18>
   12a4a:	1f 92       	push	r1
   12a4c:	1f 92       	push	r1
   12a4e:	cd b7       	in	r28, 0x3d	; 61
   12a50:	de b7       	in	r29, 0x3e	; 62
   12a52:	b8 2e       	mov	r11, r24
   12a54:	a6 2e       	mov	r10, r22
   12a56:	94 2e       	mov	r9, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:379
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   12a58:	ce 01       	movw	r24, r28
   12a5a:	01 96       	adiw	r24, 0x01	; 1
   12a5c:	6c 01       	movw	r12, r24
   12a5e:	01 96       	adiw	r24, 0x01	; 1
   12a60:	7c 01       	movw	r14, r24
   12a62:	8e 01       	movw	r16, r28
   12a64:	0d 5f       	subi	r16, 0xFD	; 253
   12a66:	1f 4f       	sbci	r17, 0xFF	; 255
   12a68:	9e 01       	movw	r18, r28
   12a6a:	2c 5f       	subi	r18, 0xFC	; 252
   12a6c:	3f 4f       	sbci	r19, 0xFF	; 255
   12a6e:	ae 01       	movw	r20, r28
   12a70:	4b 5f       	subi	r20, 0xFB	; 251
   12a72:	5f 4f       	sbci	r21, 0xFF	; 255
   12a74:	8b 2d       	mov	r24, r11
   12a76:	0e 94 cd 93 	call	0x1279a	; 0x1279a <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:380
  if (active != set_active)
   12a7a:	89 81       	ldd	r24, Y+1	; 0x01
   12a7c:	89 15       	cp	r24, r9
   12a7e:	49 f0       	breq	.+18     	; 0x12a92 <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)+0x60>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
   12a80:	c9 2c       	mov	r12, r9
   12a82:	ea 80       	ldd	r14, Y+2	; 0x02
   12a84:	0b 81       	ldd	r16, Y+3	; 0x03
   12a86:	2c 81       	ldd	r18, Y+4	; 0x04
   12a88:	4d 81       	ldd	r20, Y+5	; 0x05
   12a8a:	6a 2d       	mov	r22, r10
   12a8c:	8b 2d       	mov	r24, r11
   12a8e:	0e 94 20 94 	call	0x12840	; 0x12840 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:382
}
   12a92:	0f 90       	pop	r0
   12a94:	0f 90       	pop	r0
   12a96:	0f 90       	pop	r0
   12a98:	0f 90       	pop	r0
   12a9a:	0f 90       	pop	r0
   12a9c:	df 91       	pop	r29
   12a9e:	cf 91       	pop	r28
   12aa0:	1f 91       	pop	r17
   12aa2:	0f 91       	pop	r16
   12aa4:	ff 90       	pop	r15
   12aa6:	ef 90       	pop	r14
   12aa8:	df 90       	pop	r13
   12aaa:	cf 90       	pop	r12
   12aac:	bf 90       	pop	r11
   12aae:	af 90       	pop	r10
   12ab0:	9f 90       	pop	r9
   12ab2:	08 95       	ret

00012ab4 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)>:
_Z18thermostat_runninghPihhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:387
/***************************************************************************************************************/
///// vraci 1 pokud je termostat aktivni
/// now.dayOfTheWeek() 0..nedele; 6..sobota
uint8_t thermostat_running(uint8_t program, int16_t *threshold, uint8_t now_hour, uint8_t now_minute, uint8_t now_dayweek)
{
   12ab4:	3f 92       	push	r3
   12ab6:	4f 92       	push	r4
   12ab8:	5f 92       	push	r5
   12aba:	6f 92       	push	r6
   12abc:	7f 92       	push	r7
   12abe:	8f 92       	push	r8
   12ac0:	9f 92       	push	r9
   12ac2:	af 92       	push	r10
   12ac4:	bf 92       	push	r11
   12ac6:	cf 92       	push	r12
   12ac8:	df 92       	push	r13
   12aca:	ef 92       	push	r14
   12acc:	ff 92       	push	r15
   12ace:	0f 93       	push	r16
   12ad0:	1f 93       	push	r17
   12ad2:	cf 93       	push	r28
   12ad4:	df 93       	push	r29
   12ad6:	00 d0       	rcall	.+0      	; 0x12ad8 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x24>
   12ad8:	1f 92       	push	r1
   12ada:	1f 92       	push	r1
   12adc:	cd b7       	in	r28, 0x3d	; 61
   12ade:	de b7       	in	r29, 0x3e	; 62
   12ae0:	b8 2e       	mov	r11, r24
   12ae2:	2b 01       	movw	r4, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:392
  uint8_t ret = PROG_FREE;
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
   12ae4:	8f ef       	ldi	r24, 0xFF	; 255
   12ae6:	b8 16       	cp	r11, r24
   12ae8:	09 f4       	brne	.+2      	; 0x12aec <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x38>
   12aea:	54 c0       	rjmp	.+168    	; 0x12b94 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0xe0>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:402
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
   12aec:	82 2e       	mov	r8, r18
   12aee:	91 2c       	mov	r9, r1
   12af0:	9c e3       	ldi	r25, 0x3C	; 60
   12af2:	49 9f       	mul	r20, r25
   12af4:	80 0c       	add	r8, r0
   12af6:	91 1c       	adc	r9, r1
   12af8:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   12afa:	81 e0       	ldi	r24, 0x01	; 1
   12afc:	90 e0       	ldi	r25, 0x00	; 0
   12afe:	02 c0       	rjmp	.+4      	; 0x12b04 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x50>
   12b00:	88 0f       	add	r24, r24
   12b02:	99 1f       	adc	r25, r25
   12b04:	0a 95       	dec	r16
   12b06:	e2 f7       	brpl	.-8      	; 0x12b00 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x4c>
   12b08:	66 24       	eor	r6, r6
   12b0a:	63 94       	inc	r6
   12b0c:	71 2c       	mov	r7, r1
   12b0e:	89 2b       	or	r24, r25
   12b10:	11 f4       	brne	.+4      	; 0x12b16 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x62>
   12b12:	71 2c       	mov	r7, r1
   12b14:	61 2c       	mov	r6, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:394
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   12b16:	a1 2c       	mov	r10, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:400
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
   12b18:	9c e3       	ldi	r25, 0x3C	; 60
   12b1a:	39 2e       	mov	r3, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:396
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   12b1c:	fe 01       	movw	r30, r28
   12b1e:	31 96       	adiw	r30, 0x01	; 1
   12b20:	6f 01       	movw	r12, r30
   12b22:	ce 01       	movw	r24, r28
   12b24:	02 96       	adiw	r24, 0x02	; 2
   12b26:	7c 01       	movw	r14, r24
   12b28:	8e 01       	movw	r16, r28
   12b2a:	0d 5f       	subi	r16, 0xFD	; 253
   12b2c:	1f 4f       	sbci	r17, 0xFF	; 255
   12b2e:	9e 01       	movw	r18, r28
   12b30:	2c 5f       	subi	r18, 0xFC	; 252
   12b32:	3f 4f       	sbci	r19, 0xFF	; 255
   12b34:	ae 01       	movw	r20, r28
   12b36:	4b 5f       	subi	r20, 0xFB	; 251
   12b38:	5f 4f       	sbci	r21, 0xFF	; 255
   12b3a:	6a 2d       	mov	r22, r10
   12b3c:	8b 2d       	mov	r24, r11
   12b3e:	0e 94 cd 93 	call	0x1279a	; 0x1279a <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:397
      if (active == 1)
   12b42:	89 81       	ldd	r24, Y+1	; 0x01
   12b44:	81 30       	cpi	r24, 0x01	; 1
   12b46:	f1 f5       	brne	.+124    	; 0x12bc4 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:399
      {
        week = thermostat_program_get_week(program, interval_id);
   12b48:	6a 2d       	mov	r22, r10
   12b4a:	8b 2d       	mov	r24, r11
   12b4c:	0e 94 9a 94 	call	0x12934	; 0x12934 <thermostat_program_get_week(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:400
        t_start = start_hour * 60 + start_min;
   12b50:	9d 81       	ldd	r25, Y+5	; 0x05
   12b52:	2c 81       	ldd	r18, Y+4	; 0x04
   12b54:	30 e0       	ldi	r19, 0x00	; 0
   12b56:	93 9d       	mul	r25, r3
   12b58:	20 0d       	add	r18, r0
   12b5a:	31 1d       	adc	r19, r1
   12b5c:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   12b5e:	82 16       	cp	r8, r18
   12b60:	93 06       	cpc	r9, r19
   12b62:	84 f1       	brlt	.+96     	; 0x12bc4 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:401 (discriminator 1)
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
   12b64:	9b 81       	ldd	r25, Y+3	; 0x03
   12b66:	2a 81       	ldd	r18, Y+2	; 0x02
   12b68:	30 e0       	ldi	r19, 0x00	; 0
   12b6a:	93 9d       	mul	r25, r3
   12b6c:	20 0d       	add	r18, r0
   12b6e:	31 1d       	adc	r19, r1
   12b70:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403 (discriminator 1)
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   12b72:	82 16       	cp	r8, r18
   12b74:	93 06       	cpc	r9, r19
   12b76:	34 f5       	brge	.+76     	; 0x12bc4 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403 (discriminator 2)
   12b78:	90 e0       	ldi	r25, 0x00	; 0
   12b7a:	86 21       	and	r24, r6
   12b7c:	97 21       	and	r25, r7
   12b7e:	89 2b       	or	r24, r25
   12b80:	09 f1       	breq	.+66     	; 0x12bc4 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:405
        {
          *threshold = thermostat_program_get_threshold(program, interval_id);
   12b82:	6a 2d       	mov	r22, r10
   12b84:	8b 2d       	mov	r24, r11
   12b86:	0e 94 5c 94 	call	0x128b8	; 0x128b8 <thermostat_program_get_threshold(unsigned char, unsigned char)>
   12b8a:	f2 01       	movw	r30, r4
   12b8c:	91 83       	std	Z+1, r25	; 0x01
   12b8e:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:411
          ret = PROG_ACTIVE;
          break;
        }
      }
    }
    ret = PROG_NO_INTERVAL;
   12b90:	8e ef       	ldi	r24, 0xFE	; 254
   12b92:	b8 2e       	mov	r11, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:414
  }
  return ret;
}
   12b94:	8b 2d       	mov	r24, r11
   12b96:	0f 90       	pop	r0
   12b98:	0f 90       	pop	r0
   12b9a:	0f 90       	pop	r0
   12b9c:	0f 90       	pop	r0
   12b9e:	0f 90       	pop	r0
   12ba0:	df 91       	pop	r29
   12ba2:	cf 91       	pop	r28
   12ba4:	1f 91       	pop	r17
   12ba6:	0f 91       	pop	r16
   12ba8:	ff 90       	pop	r15
   12baa:	ef 90       	pop	r14
   12bac:	df 90       	pop	r13
   12bae:	cf 90       	pop	r12
   12bb0:	bf 90       	pop	r11
   12bb2:	af 90       	pop	r10
   12bb4:	9f 90       	pop	r9
   12bb6:	8f 90       	pop	r8
   12bb8:	7f 90       	pop	r7
   12bba:	6f 90       	pop	r6
   12bbc:	5f 90       	pop	r5
   12bbe:	4f 90       	pop	r4
   12bc0:	3f 90       	pop	r3
   12bc2:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:394 (discriminator 2)
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   12bc4:	a3 94       	inc	r10
   12bc6:	fb e0       	ldi	r31, 0x0B	; 11
   12bc8:	af 12       	cpse	r10, r31
   12bca:	a8 cf       	rjmp	.-176    	; 0x12b1c <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x68>
   12bcc:	e1 cf       	rjmp	.-62     	; 0x12b90 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0xdc>

00012bce <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
   12bce:	cf 93       	push	r28
   12bd0:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:419
  thermostat_ring_pid_set_kp(idx, 1);
   12bd2:	40 e0       	ldi	r20, 0x00	; 0
   12bd4:	50 e0       	ldi	r21, 0x00	; 0
   12bd6:	60 e8       	ldi	r22, 0x80	; 128
   12bd8:	7f e3       	ldi	r23, 0x3F	; 63
   12bda:	0e 94 2b 93 	call	0x12656	; 0x12656 <thermostat_ring_pid_set_kp(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:420
  thermostat_ring_pid_set_ki(idx, 0.5);
   12bde:	40 e0       	ldi	r20, 0x00	; 0
   12be0:	50 e0       	ldi	r21, 0x00	; 0
   12be2:	60 e0       	ldi	r22, 0x00	; 0
   12be4:	7f e3       	ldi	r23, 0x3F	; 63
   12be6:	8c 2f       	mov	r24, r28
   12be8:	0e 94 3e 93 	call	0x1267c	; 0x1267c <thermostat_ring_pid_set_ki(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:421
  thermostat_ring_pid_set_kd(idx, 1);
   12bec:	40 e0       	ldi	r20, 0x00	; 0
   12bee:	50 e0       	ldi	r21, 0x00	; 0
   12bf0:	60 e8       	ldi	r22, 0x80	; 128
   12bf2:	7f e3       	ldi	r23, 0x3F	; 63
   12bf4:	8c 2f       	mov	r24, r28
   12bf6:	0e 94 51 93 	call	0x126a2	; 0x126a2 <thermostat_ring_pid_set_kd(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:422
  thermostat_ring_pid_set_time(idx, 60);
   12bfa:	6c e3       	ldi	r22, 0x3C	; 60
   12bfc:	8c 2f       	mov	r24, r28
   12bfe:	0e 94 64 93 	call	0x126c8	; 0x126c8 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:423
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
   12c02:	6f ef       	ldi	r22, 0xFF	; 255
   12c04:	8c 2f       	mov	r24, r28
   12c06:	0e 94 0a 92 	call	0x12414	; 0x12414 <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:424
  thermostat_ring_set_mezni(idx, 220);
   12c0a:	6c ed       	ldi	r22, 0xDC	; 220
   12c0c:	70 e0       	ldi	r23, 0x00	; 0
   12c0e:	8c 2f       	mov	r24, r28
   12c10:	0e 94 eb 91 	call	0x123d6	; 0x123d6 <thermostat_ring_set_mezni(unsigned char, int)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:425
  thermostat_ring_set_program_id(idx, PROG_FREE);
   12c14:	6f ef       	ldi	r22, 0xFF	; 255
   12c16:	8c 2f       	mov	r24, r28
   12c18:	0e 94 c6 91 	call	0x1238c	; 0x1238c <thermostat_ring_set_program_id(unsigned char, unsigned char)>
_Z25thermostat_ring_set_statehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   12c1c:	8c 2f       	mov	r24, r28
   12c1e:	90 e0       	ldi	r25, 0x00	; 0
   12c20:	fc 01       	movw	r30, r24
   12c22:	eb 59       	subi	r30, 0x9B	; 155
   12c24:	fd 4e       	sbci	r31, 0xED	; 237
   12c26:	10 82       	st	Z, r1
_Z25thermostat_ring_set_powerhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:33
{
  return therm_power[idx];
}
void thermostat_ring_set_power(uint8_t idx, uint8_t stav)
{
  therm_power[idx] = stav;
   12c28:	80 5a       	subi	r24, 0xA0	; 160
   12c2a:	9d 4e       	sbci	r25, 0xED	; 237
   12c2c:	fc 01       	movw	r30, r24
   12c2e:	10 82       	st	Z, r1
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:428
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
  thermostat_ring_set_mezni(idx, 220);
  thermostat_ring_set_program_id(idx, PROG_FREE);
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
   12c30:	6f ef       	ldi	r22, 0xFF	; 255
   12c32:	8c 2f       	mov	r24, r28
   12c34:	0e 94 b6 91 	call	0x1236c	; 0x1236c <thermostat_ring_set_active(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:429
  thermostat_ring_set_output(idx, 255);
   12c38:	6f ef       	ldi	r22, 0xFF	; 255
   12c3a:	8c 2f       	mov	r24, r28
   12c3c:	0e 94 a6 91 	call	0x1234c	; 0x1234c <thermostat_ring_set_output(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:430
  thermostat_ring_set_mode(idx, 0);
   12c40:	60 e0       	ldi	r22, 0x00	; 0
   12c42:	8c 2f       	mov	r24, r28
   12c44:	0e 94 1a 92 	call	0x12434	; 0x12434 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_name(idx, "FREE");
   12c48:	6f ef       	ldi	r22, 0xFF	; 255
   12c4a:	77 e0       	ldi	r23, 0x07	; 7
   12c4c:	8c 2f       	mov	r24, r28
   12c4e:	0e 94 77 91 	call	0x122ee	; 0x122ee <thermostat_ring_set_name(unsigned char, char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_status_bites(idx, 0);
   12c52:	60 e0       	ldi	r22, 0x00	; 0
   12c54:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:433
}
   12c56:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
   12c58:	0c 94 34 92 	jmp	0x12468	; 0x12468 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>

00012c5c <_GLOBAL__sub_I_PID_Input>:
_GLOBAL__sub_I_PID_Input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:36
void thermostat_ring_set_power(uint8_t idx, uint8_t stav)
{
  therm_power[idx] = stav;
}

PID** array_pids = new PID*[MAX_THERMOSTAT];
   12c5c:	8a e0       	ldi	r24, 0x0A	; 10
   12c5e:	90 e0       	ldi	r25, 0x00	; 0
   12c60:	0e 94 aa db 	call	0x1b754	; 0x1b754 <operator new[](unsigned int)>
   12c64:	90 93 5f 12 	sts	0x125F, r25	; 0x80125f <array_pids+0x1>
   12c68:	80 93 5e 12 	sts	0x125E, r24	; 0x80125e <array_pids>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
   12c6c:	08 95       	ret

00012c6e <LCDWIKI_GUI::LCDWIKI_GUI()>:
_ZN11LCDWIKI_GUIC2Ev():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:787
				}
			}
		}
	}
	Print(st, x, y);
}
   12c6e:	fc 01       	movw	r30, r24
   12c70:	8e e8       	ldi	r24, 0x8E	; 142
   12c72:	98 e0       	ldi	r25, 0x08	; 8
   12c74:	91 83       	std	Z+1, r25	; 0x01
   12c76:	80 83       	st	Z, r24
   12c78:	80 e0       	ldi	r24, 0x00	; 0
   12c7a:	98 ef       	ldi	r25, 0xF8	; 248
   12c7c:	91 87       	std	Z+9, r25	; 0x09
   12c7e:	80 87       	std	Z+8, r24	; 0x08
   12c80:	20 ee       	ldi	r18, 0xE0	; 224
   12c82:	37 e0       	ldi	r19, 0x07	; 7
   12c84:	37 83       	std	Z+7, r19	; 0x07
   12c86:	26 83       	std	Z+6, r18	; 0x06
   12c88:	93 87       	std	Z+11, r25	; 0x0b
   12c8a:	82 87       	std	Z+10, r24	; 0x0a
   12c8c:	81 e0       	ldi	r24, 0x01	; 1
   12c8e:	84 87       	std	Z+12, r24	; 0x0c
   12c90:	15 86       	std	Z+13, r1	; 0x0d
   12c92:	08 95       	ret

00012c94 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>:
_ZN11LCDWIKI_GUI14Set_Draw_colorEj():
   12c94:	fc 01       	movw	r30, r24
   12c96:	73 87       	std	Z+11, r23	; 0x0b
   12c98:	62 87       	std	Z+10, r22	; 0x0a
   12c9a:	08 95       	ret

00012c9c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii():
   12c9c:	ef 92       	push	r14
   12c9e:	ff 92       	push	r15
   12ca0:	0f 93       	push	r16
   12ca2:	1f 93       	push	r17
   12ca4:	cf 93       	push	r28
   12ca6:	df 93       	push	r29
   12ca8:	e9 01       	movw	r28, r18
   12caa:	79 01       	movw	r14, r18
   12cac:	e6 1a       	sub	r14, r22
   12cae:	f7 0a       	sbc	r15, r23
   12cb0:	97 01       	movw	r18, r14
   12cb2:	2f 5f       	subi	r18, 0xFF	; 255
   12cb4:	3f 4f       	sbci	r19, 0xFF	; 255
   12cb6:	f8 01       	movw	r30, r16
   12cb8:	e4 1b       	sub	r30, r20
   12cba:	f5 0b       	sbc	r31, r21
   12cbc:	df 01       	movw	r26, r30
   12cbe:	11 96       	adiw	r26, 0x01	; 1
   12cc0:	37 ff       	sbrs	r19, 7
   12cc2:	04 c0       	rjmp	.+8      	; 0x12ccc <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)+0x30>
   12cc4:	97 01       	movw	r18, r14
   12cc6:	20 95       	com	r18
   12cc8:	30 95       	com	r19
   12cca:	be 01       	movw	r22, r28
   12ccc:	b7 ff       	sbrs	r27, 7
   12cce:	04 c0       	rjmp	.+8      	; 0x12cd8 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)+0x3c>
   12cd0:	df 01       	movw	r26, r30
   12cd2:	a0 95       	com	r26
   12cd4:	b0 95       	com	r27
   12cd6:	a8 01       	movw	r20, r16
   12cd8:	ec 01       	movw	r28, r24
   12cda:	ea 84       	ldd	r14, Y+10	; 0x0a
   12cdc:	fb 84       	ldd	r15, Y+11	; 0x0b
   12cde:	e8 81       	ld	r30, Y
   12ce0:	f9 81       	ldd	r31, Y+1	; 0x01
   12ce2:	04 80       	ldd	r0, Z+4	; 0x04
   12ce4:	f5 81       	ldd	r31, Z+5	; 0x05
   12ce6:	e0 2d       	mov	r30, r0
   12ce8:	8d 01       	movw	r16, r26
   12cea:	19 95       	eicall
   12cec:	df 91       	pop	r29
   12cee:	cf 91       	pop	r28
   12cf0:	1f 91       	pop	r17
   12cf2:	0f 91       	pop	r16
   12cf4:	ff 90       	pop	r15
   12cf6:	ef 90       	pop	r14
   12cf8:	08 95       	ret

00012cfa <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>:
_ZN11LCDWIKI_GUI15Draw_Fast_VLineEiii():
   12cfa:	ef 92       	push	r14
   12cfc:	ff 92       	push	r15
   12cfe:	0f 93       	push	r16
   12d00:	1f 93       	push	r17
   12d02:	dc 01       	movw	r26, r24
   12d04:	1a 96       	adiw	r26, 0x0a	; 10
   12d06:	ed 90       	ld	r14, X+
   12d08:	fc 90       	ld	r15, X
   12d0a:	1b 97       	sbiw	r26, 0x0b	; 11
   12d0c:	ed 91       	ld	r30, X+
   12d0e:	fc 91       	ld	r31, X
   12d10:	04 80       	ldd	r0, Z+4	; 0x04
   12d12:	f5 81       	ldd	r31, Z+5	; 0x05
   12d14:	e0 2d       	mov	r30, r0
   12d16:	89 01       	movw	r16, r18
   12d18:	21 e0       	ldi	r18, 0x01	; 1
   12d1a:	30 e0       	ldi	r19, 0x00	; 0
   12d1c:	19 95       	eicall
   12d1e:	1f 91       	pop	r17
   12d20:	0f 91       	pop	r16
   12d22:	ff 90       	pop	r15
   12d24:	ef 90       	pop	r14
   12d26:	08 95       	ret

00012d28 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii():
   12d28:	ef 92       	push	r14
   12d2a:	ff 92       	push	r15
   12d2c:	0f 93       	push	r16
   12d2e:	1f 93       	push	r17
   12d30:	dc 01       	movw	r26, r24
   12d32:	1a 96       	adiw	r26, 0x0a	; 10
   12d34:	ed 90       	ld	r14, X+
   12d36:	fc 90       	ld	r15, X
   12d38:	1b 97       	sbiw	r26, 0x0b	; 11
   12d3a:	ed 91       	ld	r30, X+
   12d3c:	fc 91       	ld	r31, X
   12d3e:	04 80       	ldd	r0, Z+4	; 0x04
   12d40:	f5 81       	ldd	r31, Z+5	; 0x05
   12d42:	e0 2d       	mov	r30, r0
   12d44:	01 e0       	ldi	r16, 0x01	; 1
   12d46:	10 e0       	ldi	r17, 0x00	; 0
   12d48:	19 95       	eicall
   12d4a:	1f 91       	pop	r17
   12d4c:	0f 91       	pop	r16
   12d4e:	ff 90       	pop	r15
   12d50:	ef 90       	pop	r14
   12d52:	08 95       	ret

00012d54 <LCDWIKI_GUI::Fill_Screen(unsigned int)>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj():
   12d54:	cf 92       	push	r12
   12d56:	df 92       	push	r13
   12d58:	ef 92       	push	r14
   12d5a:	ff 92       	push	r15
   12d5c:	0f 93       	push	r16
   12d5e:	1f 93       	push	r17
   12d60:	cf 93       	push	r28
   12d62:	df 93       	push	r29
   12d64:	ec 01       	movw	r28, r24
   12d66:	7b 01       	movw	r14, r22
   12d68:	e8 81       	ld	r30, Y
   12d6a:	f9 81       	ldd	r31, Y+1	; 0x01
   12d6c:	c4 80       	ldd	r12, Z+4	; 0x04
   12d6e:	d5 80       	ldd	r13, Z+5	; 0x05
   12d70:	04 84       	ldd	r0, Z+12	; 0x0c
   12d72:	f5 85       	ldd	r31, Z+13	; 0x0d
   12d74:	e0 2d       	mov	r30, r0
   12d76:	19 95       	eicall
   12d78:	8c 01       	movw	r16, r24
   12d7a:	e8 81       	ld	r30, Y
   12d7c:	f9 81       	ldd	r31, Y+1	; 0x01
   12d7e:	06 84       	ldd	r0, Z+14	; 0x0e
   12d80:	f7 85       	ldd	r31, Z+15	; 0x0f
   12d82:	e0 2d       	mov	r30, r0
   12d84:	ce 01       	movw	r24, r28
   12d86:	19 95       	eicall
   12d88:	9c 01       	movw	r18, r24
   12d8a:	50 e0       	ldi	r21, 0x00	; 0
   12d8c:	40 e0       	ldi	r20, 0x00	; 0
   12d8e:	70 e0       	ldi	r23, 0x00	; 0
   12d90:	60 e0       	ldi	r22, 0x00	; 0
   12d92:	ce 01       	movw	r24, r28
   12d94:	f6 01       	movw	r30, r12
   12d96:	19 95       	eicall
   12d98:	df 91       	pop	r29
   12d9a:	cf 91       	pop	r28
   12d9c:	1f 91       	pop	r17
   12d9e:	0f 91       	pop	r16
   12da0:	ff 90       	pop	r15
   12da2:	ef 90       	pop	r14
   12da4:	df 90       	pop	r13
   12da6:	cf 90       	pop	r12
   12da8:	08 95       	ret

00012daa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii():
   12daa:	6f 92       	push	r6
   12dac:	7f 92       	push	r7
   12dae:	8f 92       	push	r8
   12db0:	9f 92       	push	r9
   12db2:	af 92       	push	r10
   12db4:	bf 92       	push	r11
   12db6:	cf 92       	push	r12
   12db8:	df 92       	push	r13
   12dba:	ef 92       	push	r14
   12dbc:	ff 92       	push	r15
   12dbe:	0f 93       	push	r16
   12dc0:	1f 93       	push	r17
   12dc2:	cf 93       	push	r28
   12dc4:	df 93       	push	r29
   12dc6:	3c 01       	movw	r6, r24
   12dc8:	7b 01       	movw	r14, r22
   12dca:	ea 01       	movw	r28, r20
   12dcc:	49 01       	movw	r8, r18
   12dce:	26 1b       	sub	r18, r22
   12dd0:	37 0b       	sbc	r19, r23
   12dd2:	59 01       	movw	r10, r18
   12dd4:	4f ef       	ldi	r20, 0xFF	; 255
   12dd6:	a4 1a       	sub	r10, r20
   12dd8:	b4 0a       	sbc	r11, r20
   12dda:	c8 01       	movw	r24, r16
   12ddc:	8c 1b       	sub	r24, r28
   12dde:	9d 0b       	sbc	r25, r29
   12de0:	6c 01       	movw	r12, r24
   12de2:	4f ef       	ldi	r20, 0xFF	; 255
   12de4:	c4 1a       	sub	r12, r20
   12de6:	d4 0a       	sbc	r13, r20
   12de8:	b7 fe       	sbrs	r11, 7
   12dea:	04 c0       	rjmp	.+8      	; 0x12df4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)+0x4a>
   12dec:	59 01       	movw	r10, r18
   12dee:	a0 94       	com	r10
   12df0:	b0 94       	com	r11
   12df2:	74 01       	movw	r14, r8
   12df4:	d7 fe       	sbrs	r13, 7
   12df6:	04 c0       	rjmp	.+8      	; 0x12e00 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)+0x56>
   12df8:	6c 01       	movw	r12, r24
   12dfa:	c0 94       	com	r12
   12dfc:	d0 94       	com	r13
   12dfe:	e8 01       	movw	r28, r16
   12e00:	95 01       	movw	r18, r10
   12e02:	ae 01       	movw	r20, r28
   12e04:	b7 01       	movw	r22, r14
   12e06:	c3 01       	movw	r24, r6
   12e08:	0e 94 94 96 	call	0x12d28	; 0x12d28 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
   12e0c:	95 01       	movw	r18, r10
   12e0e:	a8 01       	movw	r20, r16
   12e10:	b7 01       	movw	r22, r14
   12e12:	c3 01       	movw	r24, r6
   12e14:	0e 94 94 96 	call	0x12d28	; 0x12d28 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
   12e18:	96 01       	movw	r18, r12
   12e1a:	ae 01       	movw	r20, r28
   12e1c:	b7 01       	movw	r22, r14
   12e1e:	c3 01       	movw	r24, r6
   12e20:	0e 94 7d 96 	call	0x12cfa	; 0x12cfa <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>
   12e24:	96 01       	movw	r18, r12
   12e26:	ae 01       	movw	r20, r28
   12e28:	b4 01       	movw	r22, r8
   12e2a:	c3 01       	movw	r24, r6
   12e2c:	df 91       	pop	r29
   12e2e:	cf 91       	pop	r28
   12e30:	1f 91       	pop	r17
   12e32:	0f 91       	pop	r16
   12e34:	ff 90       	pop	r15
   12e36:	ef 90       	pop	r14
   12e38:	df 90       	pop	r13
   12e3a:	cf 90       	pop	r12
   12e3c:	bf 90       	pop	r11
   12e3e:	af 90       	pop	r10
   12e40:	9f 90       	pop	r9
   12e42:	8f 90       	pop	r8
   12e44:	7f 90       	pop	r7
   12e46:	6f 90       	pop	r6
   12e48:	0c 94 7d 96 	jmp	0x12cfa	; 0x12cfa <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>

00012e4c <LCDWIKI_GUI::Set_Text_colour(unsigned int)>:
_ZN11LCDWIKI_GUI15Set_Text_colourEj():
   12e4c:	fc 01       	movw	r30, r24
   12e4e:	77 83       	std	Z+7, r23	; 0x07
   12e50:	66 83       	std	Z+6, r22	; 0x06
   12e52:	08 95       	ret

00012e54 <LCDWIKI_GUI::Set_Text_Back_colour(unsigned int)>:
_ZN11LCDWIKI_GUI20Set_Text_Back_colourEj():
   12e54:	fc 01       	movw	r30, r24
   12e56:	71 87       	std	Z+9, r23	; 0x09
   12e58:	60 87       	std	Z+8, r22	; 0x08
   12e5a:	08 95       	ret

00012e5c <LCDWIKI_GUI::Set_Text_Size(unsigned char)>:
_ZN11LCDWIKI_GUI13Set_Text_SizeEh():
   12e5c:	fc 01       	movw	r30, r24
   12e5e:	64 87       	std	Z+12, r22	; 0x0c
   12e60:	08 95       	ret

00012e62 <LCDWIKI_GUI::Set_Text_Mode(bool)>:
_ZN11LCDWIKI_GUI13Set_Text_ModeEb():
   12e62:	fc 01       	movw	r30, r24
   12e64:	65 87       	std	Z+13, r22	; 0x0d
   12e66:	08 95       	ret

00012e68 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)>:
_ZN11LCDWIKI_GUI9Draw_CharEiihjjhb():
   12e68:	2f 92       	push	r2
   12e6a:	3f 92       	push	r3
   12e6c:	4f 92       	push	r4
   12e6e:	5f 92       	push	r5
   12e70:	6f 92       	push	r6
   12e72:	7f 92       	push	r7
   12e74:	8f 92       	push	r8
   12e76:	9f 92       	push	r9
   12e78:	af 92       	push	r10
   12e7a:	bf 92       	push	r11
   12e7c:	cf 92       	push	r12
   12e7e:	df 92       	push	r13
   12e80:	ef 92       	push	r14
   12e82:	ff 92       	push	r15
   12e84:	0f 93       	push	r16
   12e86:	1f 93       	push	r17
   12e88:	cf 93       	push	r28
   12e8a:	df 93       	push	r29
   12e8c:	cd b7       	in	r28, 0x3d	; 61
   12e8e:	de b7       	in	r29, 0x3e	; 62
   12e90:	2d 97       	sbiw	r28, 0x0d	; 13
   12e92:	0f b6       	in	r0, 0x3f	; 63
   12e94:	f8 94       	cli
   12e96:	de bf       	out	0x3e, r29	; 62
   12e98:	0f be       	out	0x3f, r0	; 63
   12e9a:	cd bf       	out	0x3d, r28	; 61
   12e9c:	3c 01       	movw	r6, r24
   12e9e:	4b 01       	movw	r8, r22
   12ea0:	2a 01       	movw	r4, r20
   12ea2:	d2 2e       	mov	r13, r18
   12ea4:	1c 83       	std	Y+4, r17	; 0x04
   12ea6:	0b 83       	std	Y+3, r16	; 0x03
   12ea8:	fe 82       	std	Y+6, r15	; 0x06
   12eaa:	ed 82       	std	Y+5, r14	; 0x05
   12eac:	ca 82       	std	Y+2, r12	; 0x02
   12eae:	a9 86       	std	Y+9, r10	; 0x09
   12eb0:	dc 01       	movw	r26, r24
   12eb2:	ed 91       	ld	r30, X+
   12eb4:	fc 91       	ld	r31, X
   12eb6:	06 84       	ldd	r0, Z+14	; 0x0e
   12eb8:	f7 85       	ldd	r31, Z+15	; 0x0f
   12eba:	e0 2d       	mov	r30, r0
   12ebc:	19 95       	eicall
   12ebe:	88 16       	cp	r8, r24
   12ec0:	99 06       	cpc	r9, r25
   12ec2:	0c f0       	brlt	.+2      	; 0x12ec6 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x5e>
   12ec4:	7a c0       	rjmp	.+244    	; 0x12fba <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   12ec6:	d3 01       	movw	r26, r6
   12ec8:	ed 91       	ld	r30, X+
   12eca:	fc 91       	ld	r31, X
   12ecc:	04 84       	ldd	r0, Z+12	; 0x0c
   12ece:	f5 85       	ldd	r31, Z+13	; 0x0d
   12ed0:	e0 2d       	mov	r30, r0
   12ed2:	c3 01       	movw	r24, r6
   12ed4:	19 95       	eicall
   12ed6:	48 16       	cp	r4, r24
   12ed8:	59 06       	cpc	r5, r25
   12eda:	0c f0       	brlt	.+2      	; 0x12ede <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x76>
   12edc:	6e c0       	rjmp	.+220    	; 0x12fba <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   12ede:	3a 81       	ldd	r19, Y+2	; 0x02
   12ee0:	23 2f       	mov	r18, r19
   12ee2:	30 e0       	ldi	r19, 0x00	; 0
   12ee4:	3d 87       	std	Y+13, r19	; 0x0d
   12ee6:	2c 87       	std	Y+12, r18	; 0x0c
   12ee8:	c4 01       	movw	r24, r8
   12eea:	aa 81       	ldd	r26, Y+2	; 0x02
   12eec:	46 e0       	ldi	r20, 0x06	; 6
   12eee:	a4 9f       	mul	r26, r20
   12ef0:	80 0d       	add	r24, r0
   12ef2:	91 1d       	adc	r25, r1
   12ef4:	11 24       	eor	r1, r1
   12ef6:	18 16       	cp	r1, r24
   12ef8:	19 06       	cpc	r1, r25
   12efa:	0c f0       	brlt	.+2      	; 0x12efe <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x96>
   12efc:	5e c0       	rjmp	.+188    	; 0x12fba <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   12efe:	c9 01       	movw	r24, r18
   12f00:	23 e0       	ldi	r18, 0x03	; 3
   12f02:	88 0f       	add	r24, r24
   12f04:	99 1f       	adc	r25, r25
   12f06:	2a 95       	dec	r18
   12f08:	e1 f7       	brne	.-8      	; 0x12f02 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x9a>
   12f0a:	84 0d       	add	r24, r4
   12f0c:	95 1d       	adc	r25, r5
   12f0e:	18 16       	cp	r1, r24
   12f10:	19 06       	cpc	r1, r25
   12f12:	0c f0       	brlt	.+2      	; 0x12f16 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xae>
   12f14:	52 c0       	rjmp	.+164    	; 0x12fba <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   12f16:	bf ea       	ldi	r27, 0xAF	; 175
   12f18:	bd 15       	cp	r27, r13
   12f1a:	08 f4       	brcc	.+2      	; 0x12f1e <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xb6>
   12f1c:	d3 94       	inc	r13
   12f1e:	54 01       	movw	r10, r8
   12f20:	19 82       	std	Y+1, r1	; 0x01
   12f22:	85 e4       	ldi	r24, 0x45	; 69
   12f24:	9d e5       	ldi	r25, 0x5D	; 93
   12f26:	88 19       	sub	r24, r8
   12f28:	99 09       	sbc	r25, r9
   12f2a:	9c 01       	movw	r18, r24
   12f2c:	45 e0       	ldi	r20, 0x05	; 5
   12f2e:	d4 9e       	mul	r13, r20
   12f30:	20 0d       	add	r18, r0
   12f32:	31 1d       	adc	r19, r1
   12f34:	11 24       	eor	r1, r1
   12f36:	3b 87       	std	Y+11, r19	; 0x0b
   12f38:	2a 87       	std	Y+10, r18	; 0x0a
   12f3a:	89 81       	ldd	r24, Y+1	; 0x01
   12f3c:	e0 e0       	ldi	r30, 0x00	; 0
   12f3e:	85 30       	cpi	r24, 0x05	; 5
   12f40:	29 f0       	breq	.+10     	; 0x12f4c <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xe4>
   12f42:	ea 85       	ldd	r30, Y+10	; 0x0a
   12f44:	fb 85       	ldd	r31, Y+11	; 0x0b
   12f46:	ea 0d       	add	r30, r10
   12f48:	fb 1d       	adc	r31, r11
   12f4a:	e4 91       	lpm	r30, Z
   12f4c:	62 01       	movw	r12, r4
   12f4e:	31 2c       	mov	r3, r1
   12f50:	21 2c       	mov	r2, r1
   12f52:	ae 2f       	mov	r26, r30
   12f54:	b0 e0       	ldi	r27, 0x00	; 0
   12f56:	b8 87       	std	Y+8, r27	; 0x08
   12f58:	af 83       	std	Y+7, r26	; 0x07
   12f5a:	e0 ff       	sbrs	r30, 0
   12f5c:	54 c0       	rjmp	.+168    	; 0x13006 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x19e>
   12f5e:	d3 01       	movw	r26, r6
   12f60:	ed 91       	ld	r30, X+
   12f62:	fc 91       	ld	r31, X
   12f64:	ba 81       	ldd	r27, Y+2	; 0x02
   12f66:	b1 30       	cpi	r27, 0x01	; 1
   12f68:	09 f0       	breq	.+2      	; 0x12f6c <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x104>
   12f6a:	40 c0       	rjmp	.+128    	; 0x12fec <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x184>
   12f6c:	02 80       	ldd	r0, Z+2	; 0x02
   12f6e:	f3 81       	ldd	r31, Z+3	; 0x03
   12f70:	e0 2d       	mov	r30, r0
   12f72:	2b 81       	ldd	r18, Y+3	; 0x03
   12f74:	3c 81       	ldd	r19, Y+4	; 0x04
   12f76:	a2 01       	movw	r20, r4
   12f78:	42 0d       	add	r20, r2
   12f7a:	53 1d       	adc	r21, r3
   12f7c:	b5 01       	movw	r22, r10
   12f7e:	c3 01       	movw	r24, r6
   12f80:	19 95       	eicall
   12f82:	ef 81       	ldd	r30, Y+7	; 0x07
   12f84:	f8 85       	ldd	r31, Y+8	; 0x08
   12f86:	f5 95       	asr	r31
   12f88:	e7 95       	ror	r30
   12f8a:	2f ef       	ldi	r18, 0xFF	; 255
   12f8c:	22 1a       	sub	r2, r18
   12f8e:	32 0a       	sbc	r3, r18
   12f90:	8c 85       	ldd	r24, Y+12	; 0x0c
   12f92:	9d 85       	ldd	r25, Y+13	; 0x0d
   12f94:	c8 0e       	add	r12, r24
   12f96:	d9 1e       	adc	r13, r25
   12f98:	98 e0       	ldi	r25, 0x08	; 8
   12f9a:	29 16       	cp	r2, r25
   12f9c:	31 04       	cpc	r3, r1
   12f9e:	c9 f6       	brne	.-78     	; 0x12f52 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xea>
   12fa0:	af ef       	ldi	r26, 0xFF	; 255
   12fa2:	aa 1a       	sub	r10, r26
   12fa4:	ba 0a       	sbc	r11, r26
   12fa6:	2c 85       	ldd	r18, Y+12	; 0x0c
   12fa8:	3d 85       	ldd	r19, Y+13	; 0x0d
   12faa:	82 0e       	add	r8, r18
   12fac:	93 1e       	adc	r9, r19
   12fae:	39 81       	ldd	r19, Y+1	; 0x01
   12fb0:	3f 5f       	subi	r19, 0xFF	; 255
   12fb2:	39 83       	std	Y+1, r19	; 0x01
   12fb4:	36 30       	cpi	r19, 0x06	; 6
   12fb6:	09 f0       	breq	.+2      	; 0x12fba <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   12fb8:	c0 cf       	rjmp	.-128    	; 0x12f3a <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xd2>
   12fba:	2d 96       	adiw	r28, 0x0d	; 13
   12fbc:	0f b6       	in	r0, 0x3f	; 63
   12fbe:	f8 94       	cli
   12fc0:	de bf       	out	0x3e, r29	; 62
   12fc2:	0f be       	out	0x3f, r0	; 63
   12fc4:	cd bf       	out	0x3d, r28	; 61
   12fc6:	df 91       	pop	r29
   12fc8:	cf 91       	pop	r28
   12fca:	1f 91       	pop	r17
   12fcc:	0f 91       	pop	r16
   12fce:	ff 90       	pop	r15
   12fd0:	ef 90       	pop	r14
   12fd2:	df 90       	pop	r13
   12fd4:	cf 90       	pop	r12
   12fd6:	bf 90       	pop	r11
   12fd8:	af 90       	pop	r10
   12fda:	9f 90       	pop	r9
   12fdc:	8f 90       	pop	r8
   12fde:	7f 90       	pop	r7
   12fe0:	6f 90       	pop	r6
   12fe2:	5f 90       	pop	r5
   12fe4:	4f 90       	pop	r4
   12fe6:	3f 90       	pop	r3
   12fe8:	2f 90       	pop	r2
   12fea:	08 95       	ret
   12fec:	04 80       	ldd	r0, Z+4	; 0x04
   12fee:	f5 81       	ldd	r31, Z+5	; 0x05
   12ff0:	e0 2d       	mov	r30, r0
   12ff2:	eb 80       	ldd	r14, Y+3	; 0x03
   12ff4:	fc 80       	ldd	r15, Y+4	; 0x04
   12ff6:	0c 85       	ldd	r16, Y+12	; 0x0c
   12ff8:	1d 85       	ldd	r17, Y+13	; 0x0d
   12ffa:	98 01       	movw	r18, r16
   12ffc:	a6 01       	movw	r20, r12
   12ffe:	b4 01       	movw	r22, r8
   13000:	c3 01       	movw	r24, r6
   13002:	19 95       	eicall
   13004:	be cf       	rjmp	.-132    	; 0x12f82 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   13006:	2d 81       	ldd	r18, Y+5	; 0x05
   13008:	3e 81       	ldd	r19, Y+6	; 0x06
   1300a:	8b 81       	ldd	r24, Y+3	; 0x03
   1300c:	9c 81       	ldd	r25, Y+4	; 0x04
   1300e:	28 17       	cp	r18, r24
   13010:	39 07       	cpc	r19, r25
   13012:	09 f4       	brne	.+2      	; 0x13016 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x1ae>
   13014:	b6 cf       	rjmp	.-148    	; 0x12f82 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   13016:	99 85       	ldd	r25, Y+9	; 0x09
   13018:	91 11       	cpse	r25, r1
   1301a:	b3 cf       	rjmp	.-154    	; 0x12f82 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   1301c:	d3 01       	movw	r26, r6
   1301e:	ed 91       	ld	r30, X+
   13020:	fc 91       	ld	r31, X
   13022:	ba 81       	ldd	r27, Y+2	; 0x02
   13024:	b1 30       	cpi	r27, 0x01	; 1
   13026:	21 f4       	brne	.+8      	; 0x13030 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x1c8>
   13028:	02 80       	ldd	r0, Z+2	; 0x02
   1302a:	f3 81       	ldd	r31, Z+3	; 0x03
   1302c:	e0 2d       	mov	r30, r0
   1302e:	a3 cf       	rjmp	.-186    	; 0x12f76 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x10e>
   13030:	04 80       	ldd	r0, Z+4	; 0x04
   13032:	f5 81       	ldd	r31, Z+5	; 0x05
   13034:	e0 2d       	mov	r30, r0
   13036:	ed 80       	ldd	r14, Y+5	; 0x05
   13038:	fe 80       	ldd	r15, Y+6	; 0x06
   1303a:	dd cf       	rjmp	.-70     	; 0x12ff6 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x18e>

0001303c <LCDWIKI_GUI::write(unsigned char)>:
_ZN11LCDWIKI_GUI5writeEh():
   1303c:	af 92       	push	r10
   1303e:	cf 92       	push	r12
   13040:	ef 92       	push	r14
   13042:	ff 92       	push	r15
   13044:	0f 93       	push	r16
   13046:	1f 93       	push	r17
   13048:	cf 93       	push	r28
   1304a:	df 93       	push	r29
   1304c:	ec 01       	movw	r28, r24
   1304e:	6a 30       	cpi	r22, 0x0A	; 10
   13050:	c1 f4       	brne	.+48     	; 0x13082 <LCDWIKI_GUI::write(unsigned char)+0x46>
   13052:	8c 85       	ldd	r24, Y+12	; 0x0c
   13054:	98 e0       	ldi	r25, 0x08	; 8
   13056:	89 9f       	mul	r24, r25
   13058:	90 01       	movw	r18, r0
   1305a:	11 24       	eor	r1, r1
   1305c:	8c 81       	ldd	r24, Y+4	; 0x04
   1305e:	9d 81       	ldd	r25, Y+5	; 0x05
   13060:	82 0f       	add	r24, r18
   13062:	93 1f       	adc	r25, r19
   13064:	9d 83       	std	Y+5, r25	; 0x05
   13066:	8c 83       	std	Y+4, r24	; 0x04
   13068:	1b 82       	std	Y+3, r1	; 0x03
   1306a:	1a 82       	std	Y+2, r1	; 0x02
   1306c:	81 e0       	ldi	r24, 0x01	; 1
   1306e:	90 e0       	ldi	r25, 0x00	; 0
   13070:	df 91       	pop	r29
   13072:	cf 91       	pop	r28
   13074:	1f 91       	pop	r17
   13076:	0f 91       	pop	r16
   13078:	ff 90       	pop	r15
   1307a:	ef 90       	pop	r14
   1307c:	cf 90       	pop	r12
   1307e:	af 90       	pop	r10
   13080:	08 95       	ret
   13082:	6d 30       	cpi	r22, 0x0D	; 13
   13084:	99 f3       	breq	.-26     	; 0x1306c <LCDWIKI_GUI::write(unsigned char)+0x30>
   13086:	26 2f       	mov	r18, r22
   13088:	e8 84       	ldd	r14, Y+8	; 0x08
   1308a:	f9 84       	ldd	r15, Y+9	; 0x09
   1308c:	0e 81       	ldd	r16, Y+6	; 0x06
   1308e:	1f 81       	ldd	r17, Y+7	; 0x07
   13090:	4c 81       	ldd	r20, Y+4	; 0x04
   13092:	5d 81       	ldd	r21, Y+5	; 0x05
   13094:	6a 81       	ldd	r22, Y+2	; 0x02
   13096:	7b 81       	ldd	r23, Y+3	; 0x03
   13098:	ad 84       	ldd	r10, Y+13	; 0x0d
   1309a:	cc 84       	ldd	r12, Y+12	; 0x0c
   1309c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)>
   130a0:	2c 85       	ldd	r18, Y+12	; 0x0c
   130a2:	8a 81       	ldd	r24, Y+2	; 0x02
   130a4:	9b 81       	ldd	r25, Y+3	; 0x03
   130a6:	36 e0       	ldi	r19, 0x06	; 6
   130a8:	23 9f       	mul	r18, r19
   130aa:	80 0d       	add	r24, r0
   130ac:	91 1d       	adc	r25, r1
   130ae:	11 24       	eor	r1, r1
   130b0:	9b 83       	std	Y+3, r25	; 0x03
   130b2:	8a 83       	std	Y+2, r24	; 0x02
   130b4:	db cf       	rjmp	.-74     	; 0x1306c <LCDWIKI_GUI::write(unsigned char)+0x30>

000130b6 <LCDWIKI_GUI::Get_Display_Width() const>:
_ZNK11LCDWIKI_GUI17Get_Display_WidthEv():
   130b6:	dc 01       	movw	r26, r24
   130b8:	ed 91       	ld	r30, X+
   130ba:	fc 91       	ld	r31, X
   130bc:	06 84       	ldd	r0, Z+14	; 0x0e
   130be:	f7 85       	ldd	r31, Z+15	; 0x0f
   130c0:	e0 2d       	mov	r30, r0
   130c2:	19 94       	eijmp

000130c4 <LCDWIKI_GUI::Print(unsigned char*, int, int)>:
_ZN11LCDWIKI_GUI5PrintEPhii():
   130c4:	af 92       	push	r10
   130c6:	bf 92       	push	r11
   130c8:	cf 92       	push	r12
   130ca:	df 92       	push	r13
   130cc:	ef 92       	push	r14
   130ce:	ff 92       	push	r15
   130d0:	0f 93       	push	r16
   130d2:	1f 93       	push	r17
   130d4:	cf 93       	push	r28
   130d6:	df 93       	push	r29
   130d8:	ec 01       	movw	r28, r24
   130da:	6b 01       	movw	r12, r22
   130dc:	8a 01       	movw	r16, r20
   130de:	79 01       	movw	r14, r18
   130e0:	ca 01       	movw	r24, r20
   130e2:	8e 50       	subi	r24, 0x0E	; 14
   130e4:	97 42       	sbci	r25, 0x27	; 39
   130e6:	02 97       	sbiw	r24, 0x02	; 2
   130e8:	00 f5       	brcc	.+64     	; 0x1312a <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x66>
   130ea:	fb 01       	movw	r30, r22
   130ec:	01 90       	ld	r0, Z+
   130ee:	00 20       	and	r0, r0
   130f0:	e9 f7       	brne	.-6      	; 0x130ec <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x28>
   130f2:	31 97       	sbiw	r30, 0x01	; 1
   130f4:	e6 1b       	sub	r30, r22
   130f6:	f7 0b       	sbc	r31, r23
   130f8:	8c 85       	ldd	r24, Y+12	; 0x0c
   130fa:	26 e0       	ldi	r18, 0x06	; 6
   130fc:	82 9f       	mul	r24, r18
   130fe:	c0 01       	movw	r24, r0
   13100:	11 24       	eor	r1, r1
   13102:	8e 9f       	mul	r24, r30
   13104:	50 01       	movw	r10, r0
   13106:	8f 9f       	mul	r24, r31
   13108:	b0 0c       	add	r11, r0
   1310a:	9e 9f       	mul	r25, r30
   1310c:	b0 0c       	add	r11, r0
   1310e:	11 24       	eor	r1, r1
   13110:	ce 01       	movw	r24, r28
   13112:	0e 94 5b 98 	call	0x130b6	; 0x130b6 <LCDWIKI_GUI::Get_Display_Width() const>
   13116:	8a 19       	sub	r24, r10
   13118:	9b 09       	sbc	r25, r11
   1311a:	0e 30       	cpi	r16, 0x0E	; 14
   1311c:	17 42       	sbci	r17, 0x27	; 39
   1311e:	19 f5       	brne	.+70     	; 0x13166 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0xa2>
   13120:	97 fd       	sbrc	r25, 7
   13122:	01 96       	adiw	r24, 0x01	; 1
   13124:	8c 01       	movw	r16, r24
   13126:	15 95       	asr	r17
   13128:	07 95       	ror	r16
_ZN11LCDWIKI_GUI15Set_Text_CousurEii():
   1312a:	1b 83       	std	Y+3, r17	; 0x03
   1312c:	0a 83       	std	Y+2, r16	; 0x02
   1312e:	fd 82       	std	Y+5, r15	; 0x05
   13130:	ec 82       	std	Y+4, r14	; 0x04
   13132:	86 01       	movw	r16, r12
   13134:	78 01       	movw	r14, r16
   13136:	ec 18       	sub	r14, r12
   13138:	fd 08       	sbc	r15, r13
_ZN11LCDWIKI_GUI5PrintEPhii():
   1313a:	f8 01       	movw	r30, r16
   1313c:	61 91       	ld	r22, Z+
   1313e:	8f 01       	movw	r16, r30
   13140:	66 23       	and	r22, r22
   13142:	29 f0       	breq	.+10     	; 0x1314e <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x8a>
   13144:	ce 01       	movw	r24, r28
   13146:	0e 94 1e 98 	call	0x1303c	; 0x1303c <LCDWIKI_GUI::write(unsigned char)>
   1314a:	89 2b       	or	r24, r25
   1314c:	99 f7       	brne	.-26     	; 0x13134 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x70>
   1314e:	c7 01       	movw	r24, r14
   13150:	df 91       	pop	r29
   13152:	cf 91       	pop	r28
   13154:	1f 91       	pop	r17
   13156:	0f 91       	pop	r16
   13158:	ff 90       	pop	r15
   1315a:	ef 90       	pop	r14
   1315c:	df 90       	pop	r13
   1315e:	cf 90       	pop	r12
   13160:	bf 90       	pop	r11
   13162:	af 90       	pop	r10
   13164:	08 95       	ret
   13166:	8c 01       	movw	r16, r24
   13168:	01 50       	subi	r16, 0x01	; 1
   1316a:	11 09       	sbc	r17, r1
   1316c:	de cf       	rjmp	.-68     	; 0x1312a <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x66>

0001316e <LCDWIKI_GUI::Print_String(String, int, int)>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii():
   1316e:	fb 01       	movw	r30, r22
   13170:	60 81       	ld	r22, Z
   13172:	71 81       	ldd	r23, Z+1	; 0x01
   13174:	0c 94 62 98 	jmp	0x130c4	; 0x130c4 <LCDWIKI_GUI::Print(unsigned char*, int, int)>

00013178 <LCDWIKI_GUI::Get_Display_Height() const>:
_ZNK11LCDWIKI_GUI18Get_Display_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:817
}

//get lcd height 
int16_t LCDWIKI_GUI::Get_Display_Height(void) const
{
	return Get_Height();
   13178:	dc 01       	movw	r26, r24
   1317a:	ed 91       	ld	r30, X+
   1317c:	fc 91       	ld	r31, X
   1317e:	04 84       	ldd	r0, Z+12	; 0x0c
   13180:	f5 85       	ldd	r31, Z+13	; 0x0d
   13182:	e0 2d       	mov	r30, r0
   13184:	19 94       	eijmp

00013186 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:951
		{
			Write_Cmd_Data(cmd, d);                      //static function
        }
        size -= 2 * sizeof(int16_t);
    }
}
   13186:	0f 93       	push	r16
   13188:	cf 93       	push	r28
   1318a:	df 93       	push	r29
   1318c:	dc 01       	movw	r26, r24
   1318e:	01 70       	andi	r16, 0x01	; 1
   13190:	9e 96       	adiw	r26, 0x2e	; 46
   13192:	ed 91       	ld	r30, X+
   13194:	fc 91       	ld	r31, X
   13196:	9f 97       	sbiw	r26, 0x2f	; 47
   13198:	80 81       	ld	r24, Z
   1319a:	da 96       	adiw	r26, 0x3a	; 58
   1319c:	9c 91       	ld	r25, X
   1319e:	da 97       	sbiw	r26, 0x3a	; 58
   131a0:	89 23       	and	r24, r25
   131a2:	80 83       	st	Z, r24
   131a4:	22 23       	and	r18, r18
   131a6:	09 f4       	brne	.+2      	; 0x131aa <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
   131a8:	5b c0       	rjmp	.+182    	; 0x13260 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
   131aa:	58 96       	adiw	r26, 0x18	; 24
   131ac:	8d 91       	ld	r24, X+
   131ae:	9c 91       	ld	r25, X
   131b0:	59 97       	sbiw	r26, 0x19	; 25
   131b2:	89 2b       	or	r24, r25
   131b4:	49 f5       	brne	.+82     	; 0x13208 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
   131b6:	d0 96       	adiw	r26, 0x30	; 48
   131b8:	ed 91       	ld	r30, X+
   131ba:	fc 91       	ld	r31, X
   131bc:	d1 97       	sbiw	r26, 0x31	; 49
   131be:	80 81       	ld	r24, Z
   131c0:	db 96       	adiw	r26, 0x3b	; 59
   131c2:	9c 91       	ld	r25, X
   131c4:	db 97       	sbiw	r26, 0x3b	; 59
   131c6:	89 23       	and	r24, r25
   131c8:	80 83       	st	Z, r24
   131ca:	12 b8       	out	0x02, r1	; 2
   131cc:	d2 96       	adiw	r26, 0x32	; 50
   131ce:	ed 91       	ld	r30, X+
   131d0:	fc 91       	ld	r31, X
   131d2:	d3 97       	sbiw	r26, 0x33	; 51
   131d4:	80 81       	ld	r24, Z
   131d6:	dc 96       	adiw	r26, 0x3c	; 60
   131d8:	9c 91       	ld	r25, X
   131da:	dc 97       	sbiw	r26, 0x3c	; 60
   131dc:	89 23       	and	r24, r25
   131de:	80 83       	st	Z, r24
   131e0:	d2 96       	adiw	r26, 0x32	; 50
   131e2:	ed 91       	ld	r30, X+
   131e4:	fc 91       	ld	r31, X
   131e6:	d3 97       	sbiw	r26, 0x33	; 51
   131e8:	80 81       	ld	r24, Z
   131ea:	d8 96       	adiw	r26, 0x38	; 56
   131ec:	9c 91       	ld	r25, X
   131ee:	d8 97       	sbiw	r26, 0x38	; 56
   131f0:	89 2b       	or	r24, r25
   131f2:	80 83       	st	Z, r24
   131f4:	d0 96       	adiw	r26, 0x30	; 48
   131f6:	ed 91       	ld	r30, X+
   131f8:	fc 91       	ld	r31, X
   131fa:	d1 97       	sbiw	r26, 0x31	; 49
   131fc:	80 81       	ld	r24, Z
   131fe:	d7 96       	adiw	r26, 0x37	; 55
   13200:	9c 91       	ld	r25, X
   13202:	d7 97       	sbiw	r26, 0x37	; 55
   13204:	89 2b       	or	r24, r25
   13206:	80 83       	st	Z, r24
   13208:	d0 96       	adiw	r26, 0x30	; 48
   1320a:	ed 91       	ld	r30, X+
   1320c:	fc 91       	ld	r31, X
   1320e:	d1 97       	sbiw	r26, 0x31	; 49
   13210:	80 81       	ld	r24, Z
   13212:	db 96       	adiw	r26, 0x3b	; 59
   13214:	9c 91       	ld	r25, X
   13216:	db 97       	sbiw	r26, 0x3b	; 59
   13218:	89 23       	and	r24, r25
   1321a:	80 83       	st	Z, r24
   1321c:	90 96       	adiw	r26, 0x20	; 32
   1321e:	8c 91       	ld	r24, X
   13220:	90 97       	sbiw	r26, 0x20	; 32
   13222:	82 b9       	out	0x02, r24	; 2
   13224:	d2 96       	adiw	r26, 0x32	; 50
   13226:	ed 91       	ld	r30, X+
   13228:	fc 91       	ld	r31, X
   1322a:	d3 97       	sbiw	r26, 0x33	; 51
   1322c:	80 81       	ld	r24, Z
   1322e:	dc 96       	adiw	r26, 0x3c	; 60
   13230:	9c 91       	ld	r25, X
   13232:	dc 97       	sbiw	r26, 0x3c	; 60
   13234:	89 23       	and	r24, r25
   13236:	80 83       	st	Z, r24
   13238:	d2 96       	adiw	r26, 0x32	; 50
   1323a:	ed 91       	ld	r30, X+
   1323c:	fc 91       	ld	r31, X
   1323e:	d3 97       	sbiw	r26, 0x33	; 51
   13240:	80 81       	ld	r24, Z
   13242:	d8 96       	adiw	r26, 0x38	; 56
   13244:	9c 91       	ld	r25, X
   13246:	d8 97       	sbiw	r26, 0x38	; 56
   13248:	89 2b       	or	r24, r25
   1324a:	80 83       	st	Z, r24
   1324c:	d0 96       	adiw	r26, 0x30	; 48
   1324e:	ed 91       	ld	r30, X+
   13250:	fc 91       	ld	r31, X
   13252:	d1 97       	sbiw	r26, 0x31	; 49
   13254:	80 81       	ld	r24, Z
   13256:	d7 96       	adiw	r26, 0x37	; 55
   13258:	9c 91       	ld	r25, X
   1325a:	d7 97       	sbiw	r26, 0x37	; 55
   1325c:	89 2b       	or	r24, r25
   1325e:	80 83       	st	Z, r24
   13260:	eb 01       	movw	r28, r22
   13262:	ca 01       	movw	r24, r20
   13264:	18 16       	cp	r1, r24
   13266:	19 06       	cpc	r1, r25
   13268:	bc f5       	brge	.+110    	; 0x132d8 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
   1326a:	00 23       	and	r16, r16
   1326c:	91 f1       	breq	.+100    	; 0x132d2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
   1326e:	fe 01       	movw	r30, r28
   13270:	45 91       	lpm	r20, Z+
   13272:	54 91       	lpm	r21, Z
   13274:	34 2f       	mov	r19, r20
   13276:	25 2f       	mov	r18, r21
   13278:	22 b9       	out	0x02, r18	; 2
   1327a:	d2 96       	adiw	r26, 0x32	; 50
   1327c:	ed 91       	ld	r30, X+
   1327e:	fc 91       	ld	r31, X
   13280:	d3 97       	sbiw	r26, 0x33	; 51
   13282:	20 81       	ld	r18, Z
   13284:	dc 96       	adiw	r26, 0x3c	; 60
   13286:	4c 91       	ld	r20, X
   13288:	dc 97       	sbiw	r26, 0x3c	; 60
   1328a:	24 23       	and	r18, r20
   1328c:	20 83       	st	Z, r18
   1328e:	d2 96       	adiw	r26, 0x32	; 50
   13290:	ed 91       	ld	r30, X+
   13292:	fc 91       	ld	r31, X
   13294:	d3 97       	sbiw	r26, 0x33	; 51
   13296:	20 81       	ld	r18, Z
   13298:	d8 96       	adiw	r26, 0x38	; 56
   1329a:	4c 91       	ld	r20, X
   1329c:	d8 97       	sbiw	r26, 0x38	; 56
   1329e:	24 2b       	or	r18, r20
   132a0:	20 83       	st	Z, r18
   132a2:	32 b9       	out	0x02, r19	; 2
   132a4:	d2 96       	adiw	r26, 0x32	; 50
   132a6:	ed 91       	ld	r30, X+
   132a8:	fc 91       	ld	r31, X
   132aa:	d3 97       	sbiw	r26, 0x33	; 51
   132ac:	20 81       	ld	r18, Z
   132ae:	dc 96       	adiw	r26, 0x3c	; 60
   132b0:	3c 91       	ld	r19, X
   132b2:	dc 97       	sbiw	r26, 0x3c	; 60
   132b4:	23 23       	and	r18, r19
   132b6:	20 83       	st	Z, r18
   132b8:	d2 96       	adiw	r26, 0x32	; 50
   132ba:	ed 91       	ld	r30, X+
   132bc:	fc 91       	ld	r31, X
   132be:	d3 97       	sbiw	r26, 0x33	; 51
   132c0:	20 81       	ld	r18, Z
   132c2:	d8 96       	adiw	r26, 0x38	; 56
   132c4:	3c 91       	ld	r19, X
   132c6:	d8 97       	sbiw	r26, 0x38	; 56
   132c8:	23 2b       	or	r18, r19
   132ca:	20 83       	st	Z, r18
   132cc:	22 96       	adiw	r28, 0x02	; 2
   132ce:	01 97       	sbiw	r24, 0x01	; 1
   132d0:	c9 cf       	rjmp	.-110    	; 0x13264 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
   132d2:	38 81       	ld	r19, Y
   132d4:	29 81       	ldd	r18, Y+1	; 0x01
   132d6:	d0 cf       	rjmp	.-96     	; 0x13278 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
   132d8:	9e 96       	adiw	r26, 0x2e	; 46
   132da:	ed 91       	ld	r30, X+
   132dc:	fc 91       	ld	r31, X
   132de:	9f 97       	sbiw	r26, 0x2f	; 47
   132e0:	80 81       	ld	r24, Z
   132e2:	d6 96       	adiw	r26, 0x36	; 54
   132e4:	9c 91       	ld	r25, X
   132e6:	89 2b       	or	r24, r25
   132e8:	80 83       	st	Z, r24
   132ea:	df 91       	pop	r29
   132ec:	cf 91       	pop	r28
   132ee:	0f 91       	pop	r16
   132f0:	08 95       	ret

000132f2 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
   132f2:	38 e0       	ldi	r19, 0x08	; 8
   132f4:	43 9f       	mul	r20, r19
   132f6:	c0 01       	movw	r24, r0
   132f8:	11 24       	eor	r1, r1
   132fa:	80 7e       	andi	r24, 0xE0	; 224
   132fc:	97 70       	andi	r25, 0x07	; 7
   132fe:	26 95       	lsr	r18
   13300:	26 95       	lsr	r18
   13302:	26 95       	lsr	r18
   13304:	82 2b       	or	r24, r18
   13306:	70 e0       	ldi	r23, 0x00	; 0
   13308:	76 2f       	mov	r23, r22
   1330a:	66 27       	eor	r22, r22
   1330c:	66 27       	eor	r22, r22
   1330e:	78 7f       	andi	r23, 0xF8	; 248
   13310:	86 2b       	or	r24, r22
   13312:	97 2b       	or	r25, r23
   13314:	08 95       	ret

00013316 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
   13316:	7f 92       	push	r7
   13318:	8f 92       	push	r8
   1331a:	9f 92       	push	r9
   1331c:	af 92       	push	r10
   1331e:	bf 92       	push	r11
   13320:	cf 92       	push	r12
   13322:	df 92       	push	r13
   13324:	ef 92       	push	r14
   13326:	ff 92       	push	r15
   13328:	0f 93       	push	r16
   1332a:	1f 93       	push	r17
   1332c:	cf 93       	push	r28
   1332e:	df 93       	push	r29
   13330:	ec 01       	movw	r28, r24
   13332:	59 01       	movw	r10, r18
   13334:	98 01       	movw	r18, r16
   13336:	0e 9d       	mul	r16, r14
   13338:	60 01       	movw	r12, r0
   1333a:	0f 9d       	mul	r16, r15
   1333c:	d0 0c       	add	r13, r0
   1333e:	1e 9d       	mul	r17, r14
   13340:	d0 0c       	add	r13, r0
   13342:	11 24       	eor	r1, r1
   13344:	87 01       	movw	r16, r14
   13346:	04 0f       	add	r16, r20
   13348:	15 1f       	adc	r17, r21
   1334a:	01 50       	subi	r16, 0x01	; 1
   1334c:	11 09       	sbc	r17, r1
   1334e:	26 0f       	add	r18, r22
   13350:	37 1f       	adc	r19, r23
   13352:	21 50       	subi	r18, 0x01	; 1
   13354:	31 09       	sbc	r19, r1
   13356:	e8 81       	ld	r30, Y
   13358:	f9 81       	ldd	r31, Y+1	; 0x01
   1335a:	06 80       	ldd	r0, Z+6	; 0x06
   1335c:	f7 81       	ldd	r31, Z+7	; 0x07
   1335e:	e0 2d       	mov	r30, r0
   13360:	19 95       	eicall
   13362:	77 24       	eor	r7, r7
   13364:	7a 94       	dec	r7
   13366:	1c 14       	cp	r1, r12
   13368:	1d 04       	cpc	r1, r13
   1336a:	0c f0       	brlt	.+2      	; 0x1336e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
   1336c:	0a c1       	rjmp	.+532    	; 0x13582 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
   1336e:	ee a5       	ldd	r30, Y+46	; 0x2e
   13370:	ff a5       	ldd	r31, Y+47	; 0x2f
   13372:	80 81       	ld	r24, Z
   13374:	9a ad       	ldd	r25, Y+58	; 0x3a
   13376:	89 23       	and	r24, r25
   13378:	80 83       	st	Z, r24
   1337a:	e8 a9       	ldd	r30, Y+48	; 0x30
   1337c:	f9 a9       	ldd	r31, Y+49	; 0x31
   1337e:	80 81       	ld	r24, Z
   13380:	9b ad       	ldd	r25, Y+59	; 0x3b
   13382:	89 23       	and	r24, r25
   13384:	80 83       	st	Z, r24
   13386:	9a a1       	ldd	r25, Y+34	; 0x22
   13388:	8b a1       	ldd	r24, Y+35	; 0x23
   1338a:	82 b9       	out	0x02, r24	; 2
   1338c:	ea a9       	ldd	r30, Y+50	; 0x32
   1338e:	fb a9       	ldd	r31, Y+51	; 0x33
   13390:	80 81       	ld	r24, Z
   13392:	2c ad       	ldd	r18, Y+60	; 0x3c
   13394:	82 23       	and	r24, r18
   13396:	80 83       	st	Z, r24
   13398:	ea a9       	ldd	r30, Y+50	; 0x32
   1339a:	fb a9       	ldd	r31, Y+51	; 0x33
   1339c:	80 81       	ld	r24, Z
   1339e:	28 ad       	ldd	r18, Y+56	; 0x38
   133a0:	82 2b       	or	r24, r18
   133a2:	80 83       	st	Z, r24
   133a4:	92 b9       	out	0x02, r25	; 2
   133a6:	ea a9       	ldd	r30, Y+50	; 0x32
   133a8:	fb a9       	ldd	r31, Y+51	; 0x33
   133aa:	80 81       	ld	r24, Z
   133ac:	9c ad       	ldd	r25, Y+60	; 0x3c
   133ae:	89 23       	and	r24, r25
   133b0:	80 83       	st	Z, r24
   133b2:	ea a9       	ldd	r30, Y+50	; 0x32
   133b4:	fb a9       	ldd	r31, Y+51	; 0x33
   133b6:	80 81       	ld	r24, Z
   133b8:	98 ad       	ldd	r25, Y+56	; 0x38
   133ba:	89 2b       	or	r24, r25
   133bc:	80 83       	st	Z, r24
   133be:	e8 a9       	ldd	r30, Y+48	; 0x30
   133c0:	f9 a9       	ldd	r31, Y+49	; 0x31
   133c2:	80 81       	ld	r24, Z
   133c4:	9f a9       	ldd	r25, Y+55	; 0x37
   133c6:	89 2b       	or	r24, r25
   133c8:	80 83       	st	Z, r24
   133ca:	81 b1       	in	r24, 0x01	; 1
   133cc:	11 b8       	out	0x01, r1	; 1
   133ce:	88 8d       	ldd	r24, Y+24	; 0x18
   133d0:	99 8d       	ldd	r25, Y+25	; 0x19
   133d2:	89 2b       	or	r24, r25
   133d4:	09 f0       	breq	.+2      	; 0x133d8 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
   133d6:	67 c0       	rjmp	.+206    	; 0x134a6 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
   133d8:	f5 01       	movw	r30, r10
   133da:	c6 01       	movw	r24, r12
   133dc:	42 e0       	ldi	r20, 0x02	; 2
   133de:	50 e0       	ldi	r21, 0x00	; 0
   133e0:	ac a9       	ldd	r26, Y+52	; 0x34
   133e2:	bd a9       	ldd	r27, Y+53	; 0x35
   133e4:	2c 91       	ld	r18, X
   133e6:	3d ad       	ldd	r19, Y+61	; 0x3d
   133e8:	23 23       	and	r18, r19
   133ea:	2c 93       	st	X, r18
   133ec:	20 b1       	in	r18, 0x00	; 0
   133ee:	ac a9       	ldd	r26, Y+52	; 0x34
   133f0:	bd a9       	ldd	r27, Y+53	; 0x35
   133f2:	2c 91       	ld	r18, X
   133f4:	39 ad       	ldd	r19, Y+57	; 0x39
   133f6:	23 2b       	or	r18, r19
   133f8:	2c 93       	st	X, r18
   133fa:	ac a9       	ldd	r26, Y+52	; 0x34
   133fc:	bd a9       	ldd	r27, Y+53	; 0x35
   133fe:	2c 91       	ld	r18, X
   13400:	3d ad       	ldd	r19, Y+61	; 0x3d
   13402:	23 23       	and	r18, r19
   13404:	2c 93       	st	X, r18
   13406:	20 b1       	in	r18, 0x00	; 0
   13408:	ac a9       	ldd	r26, Y+52	; 0x34
   1340a:	bd a9       	ldd	r27, Y+53	; 0x35
   1340c:	2c 91       	ld	r18, X
   1340e:	39 ad       	ldd	r19, Y+57	; 0x39
   13410:	23 2b       	or	r18, r19
   13412:	2c 93       	st	X, r18
   13414:	ac a9       	ldd	r26, Y+52	; 0x34
   13416:	bd a9       	ldd	r27, Y+53	; 0x35
   13418:	2c 91       	ld	r18, X
   1341a:	3d ad       	ldd	r19, Y+61	; 0x3d
   1341c:	23 23       	and	r18, r19
   1341e:	2c 93       	st	X, r18
   13420:	20 b1       	in	r18, 0x00	; 0
   13422:	ac a9       	ldd	r26, Y+52	; 0x34
   13424:	bd a9       	ldd	r27, Y+53	; 0x35
   13426:	3c 91       	ld	r19, X
   13428:	69 ad       	ldd	r22, Y+57	; 0x39
   1342a:	36 2b       	or	r19, r22
   1342c:	3c 93       	st	X, r19
   1342e:	ac a9       	ldd	r26, Y+52	; 0x34
   13430:	bd a9       	ldd	r27, Y+53	; 0x35
   13432:	3c 91       	ld	r19, X
   13434:	6d ad       	ldd	r22, Y+61	; 0x3d
   13436:	36 23       	and	r19, r22
   13438:	3c 93       	st	X, r19
   1343a:	60 b1       	in	r22, 0x00	; 0
   1343c:	ac a9       	ldd	r26, Y+52	; 0x34
   1343e:	bd a9       	ldd	r27, Y+53	; 0x35
   13440:	3c 91       	ld	r19, X
   13442:	79 ad       	ldd	r23, Y+57	; 0x39
   13444:	37 2b       	or	r19, r23
   13446:	3c 93       	st	X, r19
   13448:	41 30       	cpi	r20, 0x01	; 1
   1344a:	51 05       	cpc	r21, r1
   1344c:	49 f5       	brne	.+82     	; 0x134a0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
   1344e:	32 2f       	mov	r19, r18
   13450:	26 2f       	mov	r18, r22
   13452:	21 93       	st	Z+, r18
   13454:	31 93       	st	Z+, r19
   13456:	01 97       	sbiw	r24, 0x01	; 1
   13458:	09 f0       	breq	.+2      	; 0x1345c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
   1345a:	c0 cf       	rjmp	.-128    	; 0x133dc <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
   1345c:	cc 0c       	add	r12, r12
   1345e:	dd 1c       	adc	r13, r13
   13460:	ac 0c       	add	r10, r12
   13462:	bd 1c       	adc	r11, r13
   13464:	0c 89       	ldd	r16, Y+20	; 0x14
   13466:	1d 89       	ldd	r17, Y+21	; 0x15
   13468:	01 50       	subi	r16, 0x01	; 1
   1346a:	11 09       	sbc	r17, r1
   1346c:	2a 89       	ldd	r18, Y+18	; 0x12
   1346e:	3b 89       	ldd	r19, Y+19	; 0x13
   13470:	21 50       	subi	r18, 0x01	; 1
   13472:	31 09       	sbc	r19, r1
   13474:	e8 81       	ld	r30, Y
   13476:	f9 81       	ldd	r31, Y+1	; 0x01
   13478:	06 80       	ldd	r0, Z+6	; 0x06
   1347a:	f7 81       	ldd	r31, Z+7	; 0x07
   1347c:	e0 2d       	mov	r30, r0
   1347e:	50 e0       	ldi	r21, 0x00	; 0
   13480:	40 e0       	ldi	r20, 0x00	; 0
   13482:	70 e0       	ldi	r23, 0x00	; 0
   13484:	60 e0       	ldi	r22, 0x00	; 0
   13486:	ce 01       	movw	r24, r28
   13488:	19 95       	eicall
   1348a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1348c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1348e:	80 81       	ld	r24, Z
   13490:	9e a9       	ldd	r25, Y+54	; 0x36
   13492:	89 2b       	or	r24, r25
   13494:	80 83       	st	Z, r24
   13496:	81 b1       	in	r24, 0x01	; 1
   13498:	71 b8       	out	0x01, r7	; 1
   1349a:	d1 2c       	mov	r13, r1
   1349c:	c1 2c       	mov	r12, r1
   1349e:	63 cf       	rjmp	.-314    	; 0x13366 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
   134a0:	41 e0       	ldi	r20, 0x01	; 1
   134a2:	50 e0       	ldi	r21, 0x00	; 0
   134a4:	9d cf       	rjmp	.-198    	; 0x133e0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
   134a6:	ec a9       	ldd	r30, Y+52	; 0x34
   134a8:	fd a9       	ldd	r31, Y+53	; 0x35
   134aa:	80 81       	ld	r24, Z
   134ac:	9d ad       	ldd	r25, Y+61	; 0x3d
   134ae:	89 23       	and	r24, r25
   134b0:	80 83       	st	Z, r24
   134b2:	80 b1       	in	r24, 0x00	; 0
   134b4:	ec a9       	ldd	r30, Y+52	; 0x34
   134b6:	fd a9       	ldd	r31, Y+53	; 0x35
   134b8:	80 81       	ld	r24, Z
   134ba:	99 ad       	ldd	r25, Y+57	; 0x39
   134bc:	89 2b       	or	r24, r25
   134be:	80 83       	st	Z, r24
   134c0:	75 01       	movw	r14, r10
   134c2:	86 01       	movw	r16, r12
   134c4:	8c a5       	ldd	r24, Y+44	; 0x2c
   134c6:	9d a5       	ldd	r25, Y+45	; 0x2d
   134c8:	81 30       	cpi	r24, 0x01	; 1
   134ca:	91 05       	cpc	r25, r1
   134cc:	d9 f5       	brne	.+118    	; 0x13544 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
   134ce:	ec a9       	ldd	r30, Y+52	; 0x34
   134d0:	fd a9       	ldd	r31, Y+53	; 0x35
   134d2:	80 81       	ld	r24, Z
   134d4:	9d ad       	ldd	r25, Y+61	; 0x3d
   134d6:	89 23       	and	r24, r25
   134d8:	80 83       	st	Z, r24
   134da:	60 b1       	in	r22, 0x00	; 0
   134dc:	ec a9       	ldd	r30, Y+52	; 0x34
   134de:	fd a9       	ldd	r31, Y+53	; 0x35
   134e0:	80 81       	ld	r24, Z
   134e2:	99 ad       	ldd	r25, Y+57	; 0x39
   134e4:	89 2b       	or	r24, r25
   134e6:	80 83       	st	Z, r24
   134e8:	ec a9       	ldd	r30, Y+52	; 0x34
   134ea:	fd a9       	ldd	r31, Y+53	; 0x35
   134ec:	80 81       	ld	r24, Z
   134ee:	9d ad       	ldd	r25, Y+61	; 0x3d
   134f0:	89 23       	and	r24, r25
   134f2:	80 83       	st	Z, r24
   134f4:	40 b1       	in	r20, 0x00	; 0
   134f6:	ec a9       	ldd	r30, Y+52	; 0x34
   134f8:	fd a9       	ldd	r31, Y+53	; 0x35
   134fa:	80 81       	ld	r24, Z
   134fc:	99 ad       	ldd	r25, Y+57	; 0x39
   134fe:	89 2b       	or	r24, r25
   13500:	80 83       	st	Z, r24
   13502:	ec a9       	ldd	r30, Y+52	; 0x34
   13504:	fd a9       	ldd	r31, Y+53	; 0x35
   13506:	80 81       	ld	r24, Z
   13508:	9d ad       	ldd	r25, Y+61	; 0x3d
   1350a:	89 23       	and	r24, r25
   1350c:	80 83       	st	Z, r24
   1350e:	20 b1       	in	r18, 0x00	; 0
   13510:	ec a9       	ldd	r30, Y+52	; 0x34
   13512:	fd a9       	ldd	r31, Y+53	; 0x35
   13514:	80 81       	ld	r24, Z
   13516:	99 ad       	ldd	r25, Y+57	; 0x39
   13518:	89 2b       	or	r24, r25
   1351a:	80 83       	st	Z, r24
   1351c:	e8 81       	ld	r30, Y
   1351e:	f9 81       	ldd	r31, Y+1	; 0x01
   13520:	01 90       	ld	r0, Z+
   13522:	f0 81       	ld	r31, Z
   13524:	e0 2d       	mov	r30, r0
   13526:	ce 01       	movw	r24, r28
   13528:	19 95       	eicall
   1352a:	4c 01       	movw	r8, r24
   1352c:	f7 01       	movw	r30, r14
   1352e:	81 92       	st	Z+, r8
   13530:	91 92       	st	Z+, r9
   13532:	7f 01       	movw	r14, r30
   13534:	01 50       	subi	r16, 0x01	; 1
   13536:	11 09       	sbc	r17, r1
   13538:	29 f6       	brne	.-118    	; 0x134c4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
   1353a:	cc 0c       	add	r12, r12
   1353c:	dd 1c       	adc	r13, r13
   1353e:	ac 0c       	add	r10, r12
   13540:	bd 1c       	adc	r11, r13
   13542:	a3 cf       	rjmp	.-186    	; 0x1348a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
   13544:	89 2b       	or	r24, r25
   13546:	91 f7       	brne	.-28     	; 0x1352c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
   13548:	ec a9       	ldd	r30, Y+52	; 0x34
   1354a:	fd a9       	ldd	r31, Y+53	; 0x35
   1354c:	80 81       	ld	r24, Z
   1354e:	9d ad       	ldd	r25, Y+61	; 0x3d
   13550:	89 23       	and	r24, r25
   13552:	80 83       	st	Z, r24
   13554:	80 b0       	in	r8, 0x00	; 0
   13556:	ec a9       	ldd	r30, Y+52	; 0x34
   13558:	fd a9       	ldd	r31, Y+53	; 0x35
   1355a:	80 81       	ld	r24, Z
   1355c:	99 ad       	ldd	r25, Y+57	; 0x39
   1355e:	89 2b       	or	r24, r25
   13560:	80 83       	st	Z, r24
   13562:	ec a9       	ldd	r30, Y+52	; 0x34
   13564:	fd a9       	ldd	r31, Y+53	; 0x35
   13566:	80 81       	ld	r24, Z
   13568:	9d ad       	ldd	r25, Y+61	; 0x3d
   1356a:	89 23       	and	r24, r25
   1356c:	80 83       	st	Z, r24
   1356e:	90 b1       	in	r25, 0x00	; 0
   13570:	ec a9       	ldd	r30, Y+52	; 0x34
   13572:	fd a9       	ldd	r31, Y+53	; 0x35
   13574:	80 81       	ld	r24, Z
   13576:	29 ad       	ldd	r18, Y+57	; 0x39
   13578:	82 2b       	or	r24, r18
   1357a:	80 83       	st	Z, r24
   1357c:	98 2c       	mov	r9, r8
   1357e:	89 2e       	mov	r8, r25
   13580:	d5 cf       	rjmp	.-86     	; 0x1352c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
   13582:	90 e0       	ldi	r25, 0x00	; 0
   13584:	80 e0       	ldi	r24, 0x00	; 0
   13586:	df 91       	pop	r29
   13588:	cf 91       	pop	r28
   1358a:	1f 91       	pop	r17
   1358c:	0f 91       	pop	r16
   1358e:	ff 90       	pop	r15
   13590:	ef 90       	pop	r14
   13592:	df 90       	pop	r13
   13594:	cf 90       	pop	r12
   13596:	bf 90       	pop	r11
   13598:	af 90       	pop	r10
   1359a:	9f 90       	pop	r9
   1359c:	8f 90       	pop	r8
   1359e:	7f 90       	pop	r7
   135a0:	08 95       	ret

000135a2 <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
   135a2:	fc 01       	movw	r30, r24
   135a4:	82 89       	ldd	r24, Z+18	; 0x12
   135a6:	93 89       	ldd	r25, Z+19	; 0x13
   135a8:	08 95       	ret

000135aa <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
   135aa:	fc 01       	movw	r30, r24
   135ac:	84 89       	ldd	r24, Z+20	; 0x14
   135ae:	95 89       	ldd	r25, Z+21	; 0x15
   135b0:	08 95       	ret

000135b2 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
   135b2:	af 92       	push	r10
   135b4:	bf 92       	push	r11
   135b6:	cf 92       	push	r12
   135b8:	df 92       	push	r13
   135ba:	ef 92       	push	r14
   135bc:	ff 92       	push	r15
   135be:	0f 93       	push	r16
   135c0:	1f 93       	push	r17
   135c2:	cf 93       	push	r28
   135c4:	df 93       	push	r29
   135c6:	77 fd       	sbrc	r23, 7
   135c8:	75 c0       	rjmp	.+234    	; 0x136b4 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   135ca:	57 fd       	sbrc	r21, 7
   135cc:	73 c0       	rjmp	.+230    	; 0x136b4 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   135ce:	c3 2e       	mov	r12, r19
   135d0:	d2 2e       	mov	r13, r18
   135d2:	5a 01       	movw	r10, r20
   135d4:	7b 01       	movw	r14, r22
   135d6:	ec 01       	movw	r28, r24
   135d8:	e8 81       	ld	r30, Y
   135da:	f9 81       	ldd	r31, Y+1	; 0x01
   135dc:	06 84       	ldd	r0, Z+14	; 0x0e
   135de:	f7 85       	ldd	r31, Z+15	; 0x0f
   135e0:	e0 2d       	mov	r30, r0
   135e2:	19 95       	eicall
   135e4:	8e 15       	cp	r24, r14
   135e6:	9f 05       	cpc	r25, r15
   135e8:	0c f4       	brge	.+2      	; 0x135ec <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
   135ea:	64 c0       	rjmp	.+200    	; 0x136b4 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   135ec:	e8 81       	ld	r30, Y
   135ee:	f9 81       	ldd	r31, Y+1	; 0x01
   135f0:	04 84       	ldd	r0, Z+12	; 0x0c
   135f2:	f5 85       	ldd	r31, Z+13	; 0x0d
   135f4:	e0 2d       	mov	r30, r0
   135f6:	ce 01       	movw	r24, r28
   135f8:	19 95       	eicall
   135fa:	8a 15       	cp	r24, r10
   135fc:	9b 05       	cpc	r25, r11
   135fe:	0c f4       	brge	.+2      	; 0x13602 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
   13600:	59 c0       	rjmp	.+178    	; 0x136b4 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   13602:	e8 81       	ld	r30, Y
   13604:	f9 81       	ldd	r31, Y+1	; 0x01
   13606:	06 80       	ldd	r0, Z+6	; 0x06
   13608:	f7 81       	ldd	r31, Z+7	; 0x07
   1360a:	e0 2d       	mov	r30, r0
   1360c:	85 01       	movw	r16, r10
   1360e:	97 01       	movw	r18, r14
   13610:	a5 01       	movw	r20, r10
   13612:	b7 01       	movw	r22, r14
   13614:	ce 01       	movw	r24, r28
   13616:	19 95       	eicall
   13618:	ee a5       	ldd	r30, Y+46	; 0x2e
   1361a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1361c:	80 81       	ld	r24, Z
   1361e:	9a ad       	ldd	r25, Y+58	; 0x3a
   13620:	89 23       	and	r24, r25
   13622:	80 83       	st	Z, r24
   13624:	98 a1       	ldd	r25, Y+32	; 0x20
   13626:	29 a1       	ldd	r18, Y+33	; 0x21
   13628:	e8 a9       	ldd	r30, Y+48	; 0x30
   1362a:	f9 a9       	ldd	r31, Y+49	; 0x31
   1362c:	80 81       	ld	r24, Z
   1362e:	3b ad       	ldd	r19, Y+59	; 0x3b
   13630:	83 23       	and	r24, r19
   13632:	80 83       	st	Z, r24
   13634:	22 b9       	out	0x02, r18	; 2
   13636:	ea a9       	ldd	r30, Y+50	; 0x32
   13638:	fb a9       	ldd	r31, Y+51	; 0x33
   1363a:	80 81       	ld	r24, Z
   1363c:	2c ad       	ldd	r18, Y+60	; 0x3c
   1363e:	82 23       	and	r24, r18
   13640:	80 83       	st	Z, r24
   13642:	ea a9       	ldd	r30, Y+50	; 0x32
   13644:	fb a9       	ldd	r31, Y+51	; 0x33
   13646:	80 81       	ld	r24, Z
   13648:	28 ad       	ldd	r18, Y+56	; 0x38
   1364a:	82 2b       	or	r24, r18
   1364c:	80 83       	st	Z, r24
   1364e:	92 b9       	out	0x02, r25	; 2
   13650:	ea a9       	ldd	r30, Y+50	; 0x32
   13652:	fb a9       	ldd	r31, Y+51	; 0x33
   13654:	80 81       	ld	r24, Z
   13656:	9c ad       	ldd	r25, Y+60	; 0x3c
   13658:	89 23       	and	r24, r25
   1365a:	80 83       	st	Z, r24
   1365c:	ea a9       	ldd	r30, Y+50	; 0x32
   1365e:	fb a9       	ldd	r31, Y+51	; 0x33
   13660:	80 81       	ld	r24, Z
   13662:	98 ad       	ldd	r25, Y+56	; 0x38
   13664:	89 2b       	or	r24, r25
   13666:	80 83       	st	Z, r24
   13668:	e8 a9       	ldd	r30, Y+48	; 0x30
   1366a:	f9 a9       	ldd	r31, Y+49	; 0x31
   1366c:	80 81       	ld	r24, Z
   1366e:	9f a9       	ldd	r25, Y+55	; 0x37
   13670:	89 2b       	or	r24, r25
   13672:	80 83       	st	Z, r24
   13674:	c2 b8       	out	0x02, r12	; 2
   13676:	ea a9       	ldd	r30, Y+50	; 0x32
   13678:	fb a9       	ldd	r31, Y+51	; 0x33
   1367a:	80 81       	ld	r24, Z
   1367c:	9c ad       	ldd	r25, Y+60	; 0x3c
   1367e:	89 23       	and	r24, r25
   13680:	80 83       	st	Z, r24
   13682:	ea a9       	ldd	r30, Y+50	; 0x32
   13684:	fb a9       	ldd	r31, Y+51	; 0x33
   13686:	80 81       	ld	r24, Z
   13688:	98 ad       	ldd	r25, Y+56	; 0x38
   1368a:	89 2b       	or	r24, r25
   1368c:	80 83       	st	Z, r24
   1368e:	d2 b8       	out	0x02, r13	; 2
   13690:	ea a9       	ldd	r30, Y+50	; 0x32
   13692:	fb a9       	ldd	r31, Y+51	; 0x33
   13694:	80 81       	ld	r24, Z
   13696:	9c ad       	ldd	r25, Y+60	; 0x3c
   13698:	89 23       	and	r24, r25
   1369a:	80 83       	st	Z, r24
   1369c:	ea a9       	ldd	r30, Y+50	; 0x32
   1369e:	fb a9       	ldd	r31, Y+51	; 0x33
   136a0:	80 81       	ld	r24, Z
   136a2:	98 ad       	ldd	r25, Y+56	; 0x38
   136a4:	89 2b       	or	r24, r25
   136a6:	80 83       	st	Z, r24
   136a8:	ee a5       	ldd	r30, Y+46	; 0x2e
   136aa:	ff a5       	ldd	r31, Y+47	; 0x2f
   136ac:	80 81       	ld	r24, Z
   136ae:	9e a9       	ldd	r25, Y+54	; 0x36
   136b0:	89 2b       	or	r24, r25
   136b2:	80 83       	st	Z, r24
   136b4:	df 91       	pop	r29
   136b6:	cf 91       	pop	r28
   136b8:	1f 91       	pop	r17
   136ba:	0f 91       	pop	r16
   136bc:	ff 90       	pop	r15
   136be:	ef 90       	pop	r14
   136c0:	df 90       	pop	r13
   136c2:	cf 90       	pop	r12
   136c4:	bf 90       	pop	r11
   136c6:	af 90       	pop	r10
   136c8:	08 95       	ret

000136ca <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBVC2Ejhhhhh():
   136ca:	9f 92       	push	r9
   136cc:	af 92       	push	r10
   136ce:	bf 92       	push	r11
   136d0:	cf 92       	push	r12
   136d2:	df 92       	push	r13
   136d4:	ef 92       	push	r14
   136d6:	ff 92       	push	r15
   136d8:	0f 93       	push	r16
   136da:	1f 93       	push	r17
   136dc:	cf 93       	push	r28
   136de:	df 93       	push	r29
   136e0:	ec 01       	movw	r28, r24
   136e2:	5b 01       	movw	r10, r22
   136e4:	14 2f       	mov	r17, r20
   136e6:	d2 2e       	mov	r13, r18
   136e8:	9e 2c       	mov	r9, r14
   136ea:	0e 94 37 96 	call	0x12c6e	; 0x12c6e <LCDWIKI_GUI::LCDWIKI_GUI()>
   136ee:	88 ea       	ldi	r24, 0xA8	; 168
   136f0:	98 e0       	ldi	r25, 0x08	; 8
   136f2:	99 83       	std	Y+1, r25	; 0x01
   136f4:	88 83       	st	Y, r24
   136f6:	ce ae       	std	Y+62, r12	; 0x3e
   136f8:	61 2f       	mov	r22, r17
   136fa:	70 e0       	ldi	r23, 0x00	; 0
   136fc:	fb 01       	movw	r30, r22
   136fe:	e5 55       	subi	r30, 0x55	; 85
   13700:	fb 49       	sbci	r31, 0x9B	; 155
   13702:	e4 91       	lpm	r30, Z
   13704:	f0 e0       	ldi	r31, 0x00	; 0
   13706:	ee 0f       	add	r30, r30
   13708:	ff 1f       	adc	r31, r31
   1370a:	ef 50       	subi	r30, 0x0F	; 15
   1370c:	fb 49       	sbci	r31, 0x9B	; 155
   1370e:	a5 91       	lpm	r26, Z+
   13710:	b4 91       	lpm	r27, Z
   13712:	bf a7       	std	Y+47, r27	; 0x2f
   13714:	ae a7       	std	Y+46, r26	; 0x2e
   13716:	4d 2d       	mov	r20, r13
   13718:	50 e0       	ldi	r21, 0x00	; 0
   1371a:	fa 01       	movw	r30, r20
   1371c:	e5 55       	subi	r30, 0x55	; 85
   1371e:	fb 49       	sbci	r31, 0x9B	; 155
   13720:	e4 91       	lpm	r30, Z
   13722:	f0 e0       	ldi	r31, 0x00	; 0
   13724:	ee 0f       	add	r30, r30
   13726:	ff 1f       	adc	r31, r31
   13728:	ef 50       	subi	r30, 0x0F	; 15
   1372a:	fb 49       	sbci	r31, 0x9B	; 155
   1372c:	85 91       	lpm	r24, Z+
   1372e:	94 91       	lpm	r25, Z
   13730:	99 ab       	std	Y+49, r25	; 0x31
   13732:	88 ab       	std	Y+48, r24	; 0x30
   13734:	20 2f       	mov	r18, r16
   13736:	30 e0       	ldi	r19, 0x00	; 0
   13738:	f9 01       	movw	r30, r18
   1373a:	e5 55       	subi	r30, 0x55	; 85
   1373c:	fb 49       	sbci	r31, 0x9B	; 155
   1373e:	e4 91       	lpm	r30, Z
   13740:	f0 e0       	ldi	r31, 0x00	; 0
   13742:	ee 0f       	add	r30, r30
   13744:	ff 1f       	adc	r31, r31
   13746:	ef 50       	subi	r30, 0x0F	; 15
   13748:	fb 49       	sbci	r31, 0x9B	; 155
   1374a:	85 91       	lpm	r24, Z+
   1374c:	94 91       	lpm	r25, Z
   1374e:	9b ab       	std	Y+51, r25	; 0x33
   13750:	8a ab       	std	Y+50, r24	; 0x32
   13752:	8e 2d       	mov	r24, r14
   13754:	90 e0       	ldi	r25, 0x00	; 0
   13756:	fc 01       	movw	r30, r24
   13758:	e5 55       	subi	r30, 0x55	; 85
   1375a:	fb 49       	sbci	r31, 0x9B	; 155
   1375c:	e4 91       	lpm	r30, Z
   1375e:	f0 e0       	ldi	r31, 0x00	; 0
   13760:	ee 0f       	add	r30, r30
   13762:	ff 1f       	adc	r31, r31
   13764:	ef 50       	subi	r30, 0x0F	; 15
   13766:	fb 49       	sbci	r31, 0x9B	; 155
   13768:	e5 90       	lpm	r14, Z+
   1376a:	f4 90       	lpm	r15, Z
   1376c:	fd aa       	std	Y+53, r15	; 0x35
   1376e:	ec aa       	std	Y+52, r14	; 0x34
   13770:	6b 58       	subi	r22, 0x8B	; 139
   13772:	7b 49       	sbci	r23, 0x9B	; 155
   13774:	fb 01       	movw	r30, r22
   13776:	64 91       	lpm	r22, Z
   13778:	6e ab       	std	Y+54, r22	; 0x36
   1377a:	4b 58       	subi	r20, 0x8B	; 139
   1377c:	5b 49       	sbci	r21, 0x9B	; 155
   1377e:	fa 01       	movw	r30, r20
   13780:	44 91       	lpm	r20, Z
   13782:	4f ab       	std	Y+55, r20	; 0x37
   13784:	2b 58       	subi	r18, 0x8B	; 139
   13786:	3b 49       	sbci	r19, 0x9B	; 155
   13788:	f9 01       	movw	r30, r18
   1378a:	24 91       	lpm	r18, Z
   1378c:	28 af       	std	Y+56, r18	; 0x38
   1378e:	8b 58       	subi	r24, 0x8B	; 139
   13790:	9b 49       	sbci	r25, 0x9B	; 155
   13792:	fc 01       	movw	r30, r24
   13794:	84 91       	lpm	r24, Z
   13796:	89 af       	std	Y+57, r24	; 0x39
   13798:	96 2f       	mov	r25, r22
   1379a:	90 95       	com	r25
   1379c:	9a af       	std	Y+58, r25	; 0x3a
   1379e:	e4 2f       	mov	r30, r20
   137a0:	e0 95       	com	r30
   137a2:	eb af       	std	Y+59, r30	; 0x3b
   137a4:	20 95       	com	r18
   137a6:	2c af       	std	Y+60, r18	; 0x3c
   137a8:	80 95       	com	r24
   137aa:	8d af       	std	Y+61, r24	; 0x3d
   137ac:	ec 91       	ld	r30, X
   137ae:	6e 2b       	or	r22, r30
   137b0:	6c 93       	st	X, r22
   137b2:	e8 a9       	ldd	r30, Y+48	; 0x30
   137b4:	f9 a9       	ldd	r31, Y+49	; 0x31
   137b6:	80 81       	ld	r24, Z
   137b8:	9f a9       	ldd	r25, Y+55	; 0x37
   137ba:	89 2b       	or	r24, r25
   137bc:	80 83       	st	Z, r24
   137be:	ea a9       	ldd	r30, Y+50	; 0x32
   137c0:	fb a9       	ldd	r31, Y+51	; 0x33
   137c2:	80 81       	ld	r24, Z
   137c4:	98 ad       	ldd	r25, Y+56	; 0x38
   137c6:	89 2b       	or	r24, r25
   137c8:	80 83       	st	Z, r24
   137ca:	ec a9       	ldd	r30, Y+52	; 0x34
   137cc:	fd a9       	ldd	r31, Y+53	; 0x35
   137ce:	80 81       	ld	r24, Z
   137d0:	99 ad       	ldd	r25, Y+57	; 0x39
   137d2:	89 2b       	or	r24, r25
   137d4:	80 83       	st	Z, r24
   137d6:	61 e0       	ldi	r22, 0x01	; 1
   137d8:	81 2f       	mov	r24, r17
   137da:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   137de:	61 e0       	ldi	r22, 0x01	; 1
   137e0:	8d 2d       	mov	r24, r13
   137e2:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   137e6:	61 e0       	ldi	r22, 0x01	; 1
   137e8:	80 2f       	mov	r24, r16
   137ea:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   137ee:	61 e0       	ldi	r22, 0x01	; 1
   137f0:	89 2d       	mov	r24, r9
   137f2:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   137f6:	cc 20       	and	r12, r12
   137f8:	41 f0       	breq	.+16     	; 0x1380a <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x140>
   137fa:	61 e0       	ldi	r22, 0x01	; 1
   137fc:	8c 2d       	mov	r24, r12
   137fe:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
   13802:	61 e0       	ldi	r22, 0x01	; 1
   13804:	8c 2d       	mov	r24, r12
   13806:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   1380a:	1f 8a       	std	Y+23, r1	; 0x17
   1380c:	1e 8a       	std	Y+22, r1	; 0x16
   1380e:	86 e0       	ldi	r24, 0x06	; 6
   13810:	8a 9d       	mul	r24, r10
   13812:	f0 01       	movw	r30, r0
   13814:	8b 9d       	mul	r24, r11
   13816:	f0 0d       	add	r31, r0
   13818:	11 24       	eor	r1, r1
   1381a:	e4 5c       	subi	r30, 0xC4	; 196
   1381c:	fd 4f       	sbci	r31, 0xFD	; 253
   1381e:	80 81       	ld	r24, Z
   13820:	91 81       	ldd	r25, Z+1	; 0x01
   13822:	9b 8f       	std	Y+27, r25	; 0x1b
   13824:	8a 8f       	std	Y+26, r24	; 0x1a
   13826:	82 81       	ldd	r24, Z+2	; 0x02
   13828:	93 81       	ldd	r25, Z+3	; 0x03
   1382a:	9f 87       	std	Y+15, r25	; 0x0f
   1382c:	8e 87       	std	Y+14, r24	; 0x0e
   1382e:	84 81       	ldd	r24, Z+4	; 0x04
   13830:	95 81       	ldd	r25, Z+5	; 0x05
   13832:	99 8b       	std	Y+17, r25	; 0x11
   13834:	88 8b       	std	Y+16, r24	; 0x10
   13836:	81 b1       	in	r24, 0x01	; 1
   13838:	8f ef       	ldi	r24, 0xFF	; 255
   1383a:	81 b9       	out	0x01, r24	; 1
   1383c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1383e:	9f 85       	ldd	r25, Y+15	; 0x0f
   13840:	9b 8b       	std	Y+19, r25	; 0x13
   13842:	8a 8b       	std	Y+18, r24	; 0x12
   13844:	88 89       	ldd	r24, Y+16	; 0x10
   13846:	99 89       	ldd	r25, Y+17	; 0x11
   13848:	9d 8b       	std	Y+21, r25	; 0x15
   1384a:	8c 8b       	std	Y+20, r24	; 0x14
   1384c:	df 91       	pop	r29
   1384e:	cf 91       	pop	r28
   13850:	1f 91       	pop	r17
   13852:	0f 91       	pop	r16
   13854:	ff 90       	pop	r15
   13856:	ef 90       	pop	r14
   13858:	df 90       	pop	r13
   1385a:	cf 90       	pop	r12
   1385c:	bf 90       	pop	r11
   1385e:	af 90       	pop	r10
   13860:	9f 90       	pop	r9
   13862:	08 95       	ret

00013864 <LCDWIKI_KBV::reset()>:
_ZN11LCDWIKI_KBV5resetEv():
   13864:	cf 93       	push	r28
   13866:	df 93       	push	r29
   13868:	ec 01       	movw	r28, r24
   1386a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1386c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1386e:	80 81       	ld	r24, Z
   13870:	9e a9       	ldd	r25, Y+54	; 0x36
   13872:	89 2b       	or	r24, r25
   13874:	80 83       	st	Z, r24
   13876:	ec a9       	ldd	r30, Y+52	; 0x34
   13878:	fd a9       	ldd	r31, Y+53	; 0x35
   1387a:	80 81       	ld	r24, Z
   1387c:	99 ad       	ldd	r25, Y+57	; 0x39
   1387e:	89 2b       	or	r24, r25
   13880:	80 83       	st	Z, r24
   13882:	ea a9       	ldd	r30, Y+50	; 0x32
   13884:	fb a9       	ldd	r31, Y+51	; 0x33
   13886:	80 81       	ld	r24, Z
   13888:	98 ad       	ldd	r25, Y+56	; 0x38
   1388a:	89 2b       	or	r24, r25
   1388c:	80 83       	st	Z, r24
   1388e:	8e ad       	ldd	r24, Y+62	; 0x3e
   13890:	88 23       	and	r24, r24
   13892:	69 f0       	breq	.+26     	; 0x138ae <LCDWIKI_KBV::reset()+0x4a>
   13894:	60 e0       	ldi	r22, 0x00	; 0
   13896:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
   1389a:	62 e0       	ldi	r22, 0x02	; 2
   1389c:	70 e0       	ldi	r23, 0x00	; 0
   1389e:	80 e0       	ldi	r24, 0x00	; 0
   138a0:	90 e0       	ldi	r25, 0x00	; 0
   138a2:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
   138a6:	61 e0       	ldi	r22, 0x01	; 1
   138a8:	8e ad       	ldd	r24, Y+62	; 0x3e
   138aa:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
   138ae:	ee a5       	ldd	r30, Y+46	; 0x2e
   138b0:	ff a5       	ldd	r31, Y+47	; 0x2f
   138b2:	80 81       	ld	r24, Z
   138b4:	9a ad       	ldd	r25, Y+58	; 0x3a
   138b6:	89 23       	and	r24, r25
   138b8:	80 83       	st	Z, r24
   138ba:	e8 a9       	ldd	r30, Y+48	; 0x30
   138bc:	f9 a9       	ldd	r31, Y+49	; 0x31
   138be:	80 81       	ld	r24, Z
   138c0:	9b ad       	ldd	r25, Y+59	; 0x3b
   138c2:	89 23       	and	r24, r25
   138c4:	80 83       	st	Z, r24
   138c6:	12 b8       	out	0x02, r1	; 2
   138c8:	ea a9       	ldd	r30, Y+50	; 0x32
   138ca:	fb a9       	ldd	r31, Y+51	; 0x33
   138cc:	80 81       	ld	r24, Z
   138ce:	9c ad       	ldd	r25, Y+60	; 0x3c
   138d0:	89 23       	and	r24, r25
   138d2:	80 83       	st	Z, r24
   138d4:	ea a9       	ldd	r30, Y+50	; 0x32
   138d6:	fb a9       	ldd	r31, Y+51	; 0x33
   138d8:	80 81       	ld	r24, Z
   138da:	98 ad       	ldd	r25, Y+56	; 0x38
   138dc:	89 2b       	or	r24, r25
   138de:	80 83       	st	Z, r24
   138e0:	83 e0       	ldi	r24, 0x03	; 3
   138e2:	ea a9       	ldd	r30, Y+50	; 0x32
   138e4:	fb a9       	ldd	r31, Y+51	; 0x33
   138e6:	90 81       	ld	r25, Z
   138e8:	2c ad       	ldd	r18, Y+60	; 0x3c
   138ea:	92 23       	and	r25, r18
   138ec:	90 83       	st	Z, r25
   138ee:	ea a9       	ldd	r30, Y+50	; 0x32
   138f0:	fb a9       	ldd	r31, Y+51	; 0x33
   138f2:	90 81       	ld	r25, Z
   138f4:	28 ad       	ldd	r18, Y+56	; 0x38
   138f6:	92 2b       	or	r25, r18
   138f8:	90 83       	st	Z, r25
   138fa:	81 50       	subi	r24, 0x01	; 1
   138fc:	91 f7       	brne	.-28     	; 0x138e2 <LCDWIKI_KBV::reset()+0x7e>
   138fe:	ee a5       	ldd	r30, Y+46	; 0x2e
   13900:	ff a5       	ldd	r31, Y+47	; 0x2f
   13902:	80 81       	ld	r24, Z
   13904:	9e a9       	ldd	r25, Y+54	; 0x36
   13906:	89 2b       	or	r24, r25
   13908:	80 83       	st	Z, r24
   1390a:	df 91       	pop	r29
   1390c:	cf 91       	pop	r28
   1390e:	08 95       	ret

00013910 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
   13910:	cf 93       	push	r28
   13912:	df 93       	push	r29
   13914:	fc 01       	movw	r30, r24
   13916:	a6 a5       	ldd	r26, Z+46	; 0x2e
   13918:	b7 a5       	ldd	r27, Z+47	; 0x2f
   1391a:	8c 91       	ld	r24, X
   1391c:	92 ad       	ldd	r25, Z+58	; 0x3a
   1391e:	89 23       	and	r24, r25
   13920:	8c 93       	st	X, r24
   13922:	a0 a9       	ldd	r26, Z+48	; 0x30
   13924:	b1 a9       	ldd	r27, Z+49	; 0x31
   13926:	8c 91       	ld	r24, X
   13928:	93 ad       	ldd	r25, Z+59	; 0x3b
   1392a:	89 23       	and	r24, r25
   1392c:	8c 93       	st	X, r24
   1392e:	72 b9       	out	0x02, r23	; 2
   13930:	a2 a9       	ldd	r26, Z+50	; 0x32
   13932:	b3 a9       	ldd	r27, Z+51	; 0x33
   13934:	8c 91       	ld	r24, X
   13936:	94 ad       	ldd	r25, Z+60	; 0x3c
   13938:	89 23       	and	r24, r25
   1393a:	8c 93       	st	X, r24
   1393c:	a2 a9       	ldd	r26, Z+50	; 0x32
   1393e:	b3 a9       	ldd	r27, Z+51	; 0x33
   13940:	8c 91       	ld	r24, X
   13942:	90 ad       	ldd	r25, Z+56	; 0x38
   13944:	89 2b       	or	r24, r25
   13946:	8c 93       	st	X, r24
   13948:	62 b9       	out	0x02, r22	; 2
   1394a:	a2 a9       	ldd	r26, Z+50	; 0x32
   1394c:	b3 a9       	ldd	r27, Z+51	; 0x33
   1394e:	8c 91       	ld	r24, X
   13950:	94 ad       	ldd	r25, Z+60	; 0x3c
   13952:	89 23       	and	r24, r25
   13954:	8c 93       	st	X, r24
   13956:	a2 a9       	ldd	r26, Z+50	; 0x32
   13958:	b3 a9       	ldd	r27, Z+51	; 0x33
   1395a:	8c 91       	ld	r24, X
   1395c:	90 ad       	ldd	r25, Z+56	; 0x38
   1395e:	89 2b       	or	r24, r25
   13960:	8c 93       	st	X, r24
   13962:	a0 a9       	ldd	r26, Z+48	; 0x30
   13964:	b1 a9       	ldd	r27, Z+49	; 0x31
   13966:	8c 91       	ld	r24, X
   13968:	97 a9       	ldd	r25, Z+55	; 0x37
   1396a:	89 2b       	or	r24, r25
   1396c:	8c 93       	st	X, r24
   1396e:	da 01       	movw	r26, r20
   13970:	9f ef       	ldi	r25, 0xFF	; 255
   13972:	92 0f       	add	r25, r18
   13974:	12 16       	cp	r1, r18
   13976:	0c f0       	brlt	.+2      	; 0x1397a <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
   13978:	3f c0       	rjmp	.+126    	; 0x139f8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
   1397a:	8d 91       	ld	r24, X+
   1397c:	82 b9       	out	0x02, r24	; 2
   1397e:	c2 a9       	ldd	r28, Z+50	; 0x32
   13980:	d3 a9       	ldd	r29, Z+51	; 0x33
   13982:	88 81       	ld	r24, Y
   13984:	24 ad       	ldd	r18, Z+60	; 0x3c
   13986:	82 23       	and	r24, r18
   13988:	88 83       	st	Y, r24
   1398a:	c2 a9       	ldd	r28, Z+50	; 0x32
   1398c:	d3 a9       	ldd	r29, Z+51	; 0x33
   1398e:	88 81       	ld	r24, Y
   13990:	20 ad       	ldd	r18, Z+56	; 0x38
   13992:	82 2b       	or	r24, r18
   13994:	88 83       	st	Y, r24
   13996:	99 23       	and	r25, r25
   13998:	69 f1       	breq	.+90     	; 0x139f4 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   1399a:	20 8d       	ldd	r18, Z+24	; 0x18
   1399c:	31 8d       	ldd	r19, Z+25	; 0x19
   1399e:	21 30       	cpi	r18, 0x01	; 1
   139a0:	31 05       	cpc	r19, r1
   139a2:	41 f5       	brne	.+80     	; 0x139f4 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   139a4:	6f 5f       	subi	r22, 0xFF	; 255
   139a6:	7f 4f       	sbci	r23, 0xFF	; 255
   139a8:	c0 a9       	ldd	r28, Z+48	; 0x30
   139aa:	d1 a9       	ldd	r29, Z+49	; 0x31
   139ac:	88 81       	ld	r24, Y
   139ae:	23 ad       	ldd	r18, Z+59	; 0x3b
   139b0:	82 23       	and	r24, r18
   139b2:	88 83       	st	Y, r24
   139b4:	72 b9       	out	0x02, r23	; 2
   139b6:	c2 a9       	ldd	r28, Z+50	; 0x32
   139b8:	d3 a9       	ldd	r29, Z+51	; 0x33
   139ba:	88 81       	ld	r24, Y
   139bc:	24 ad       	ldd	r18, Z+60	; 0x3c
   139be:	82 23       	and	r24, r18
   139c0:	88 83       	st	Y, r24
   139c2:	c2 a9       	ldd	r28, Z+50	; 0x32
   139c4:	d3 a9       	ldd	r29, Z+51	; 0x33
   139c6:	88 81       	ld	r24, Y
   139c8:	20 ad       	ldd	r18, Z+56	; 0x38
   139ca:	82 2b       	or	r24, r18
   139cc:	88 83       	st	Y, r24
   139ce:	62 b9       	out	0x02, r22	; 2
   139d0:	c2 a9       	ldd	r28, Z+50	; 0x32
   139d2:	d3 a9       	ldd	r29, Z+51	; 0x33
   139d4:	88 81       	ld	r24, Y
   139d6:	24 ad       	ldd	r18, Z+60	; 0x3c
   139d8:	82 23       	and	r24, r18
   139da:	88 83       	st	Y, r24
   139dc:	c2 a9       	ldd	r28, Z+50	; 0x32
   139de:	d3 a9       	ldd	r29, Z+51	; 0x33
   139e0:	88 81       	ld	r24, Y
   139e2:	20 ad       	ldd	r18, Z+56	; 0x38
   139e4:	82 2b       	or	r24, r18
   139e6:	88 83       	st	Y, r24
   139e8:	c0 a9       	ldd	r28, Z+48	; 0x30
   139ea:	d1 a9       	ldd	r29, Z+49	; 0x31
   139ec:	88 81       	ld	r24, Y
   139ee:	27 a9       	ldd	r18, Z+55	; 0x37
   139f0:	82 2b       	or	r24, r18
   139f2:	88 83       	st	Y, r24
   139f4:	29 2f       	mov	r18, r25
   139f6:	bc cf       	rjmp	.-136    	; 0x13970 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
   139f8:	a6 a5       	ldd	r26, Z+46	; 0x2e
   139fa:	b7 a5       	ldd	r27, Z+47	; 0x2f
   139fc:	8c 91       	ld	r24, X
   139fe:	96 a9       	ldd	r25, Z+54	; 0x36
   13a00:	89 2b       	or	r24, r25
   13a02:	8c 93       	st	X, r24
   13a04:	df 91       	pop	r29
   13a06:	cf 91       	pop	r28
   13a08:	08 95       	ret

00013a0a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
   13a0a:	af 92       	push	r10
   13a0c:	bf 92       	push	r11
   13a0e:	cf 92       	push	r12
   13a10:	df 92       	push	r13
   13a12:	ef 92       	push	r14
   13a14:	ff 92       	push	r15
   13a16:	0f 93       	push	r16
   13a18:	1f 93       	push	r17
   13a1a:	cf 93       	push	r28
   13a1c:	df 93       	push	r29
   13a1e:	00 d0       	rcall	.+0      	; 0x13a20 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
   13a20:	00 d0       	rcall	.+0      	; 0x13a22 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
   13a22:	1f 92       	push	r1
   13a24:	1f 92       	push	r1
   13a26:	cd b7       	in	r28, 0x3d	; 61
   13a28:	de b7       	in	r29, 0x3e	; 62
   13a2a:	7c 01       	movw	r14, r24
   13a2c:	dc 01       	movw	r26, r24
   13a2e:	9e 96       	adiw	r26, 0x2e	; 46
   13a30:	ed 91       	ld	r30, X+
   13a32:	fc 91       	ld	r31, X
   13a34:	9f 97       	sbiw	r26, 0x2f	; 47
   13a36:	80 81       	ld	r24, Z
   13a38:	da 96       	adiw	r26, 0x3a	; 58
   13a3a:	9c 91       	ld	r25, X
   13a3c:	da 97       	sbiw	r26, 0x3a	; 58
   13a3e:	89 23       	and	r24, r25
   13a40:	80 83       	st	Z, r24
   13a42:	58 96       	adiw	r26, 0x18	; 24
   13a44:	8d 91       	ld	r24, X+
   13a46:	9c 91       	ld	r25, X
   13a48:	59 97       	sbiw	r26, 0x19	; 25
   13a4a:	00 97       	sbiw	r24, 0x00	; 0
   13a4c:	09 f0       	breq	.+2      	; 0x13a50 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
   13a4e:	44 c3       	rjmp	.+1672   	; 0x140d8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
   13a50:	56 96       	adiw	r26, 0x16	; 22
   13a52:	8d 91       	ld	r24, X+
   13a54:	9c 91       	ld	r25, X
   13a56:	57 97       	sbiw	r26, 0x17	; 23
   13a58:	82 30       	cpi	r24, 0x02	; 2
   13a5a:	91 05       	cpc	r25, r1
   13a5c:	09 f4       	brne	.+2      	; 0x13a60 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
   13a5e:	0b c3       	rjmp	.+1558   	; 0x14076 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
   13a60:	83 30       	cpi	r24, 0x03	; 3
   13a62:	91 05       	cpc	r25, r1
   13a64:	09 f4       	brne	.+2      	; 0x13a68 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
   13a66:	23 c3       	rjmp	.+1606   	; 0x140ae <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
   13a68:	01 97       	sbiw	r24, 0x01	; 1
   13a6a:	09 f0       	breq	.+2      	; 0x13a6e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
   13a6c:	32 c3       	rjmp	.+1636   	; 0x140d2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
   13a6e:	1e 96       	adiw	r26, 0x0e	; 14
   13a70:	0d 90       	ld	r0, X+
   13a72:	bc 91       	ld	r27, X
   13a74:	a0 2d       	mov	r26, r0
   13a76:	68 01       	movw	r12, r16
   13a78:	c0 94       	com	r12
   13a7a:	d0 94       	com	r13
   13a7c:	40 95       	com	r20
   13a7e:	50 95       	com	r21
   13a80:	fa 01       	movw	r30, r20
   13a82:	ea 0f       	add	r30, r26
   13a84:	fb 1f       	adc	r31, r27
   13a86:	cb 01       	movw	r24, r22
   13a88:	89 01       	movw	r16, r18
   13a8a:	9f 01       	movw	r18, r30
   13a8c:	ab 01       	movw	r20, r22
   13a8e:	b6 01       	movw	r22, r12
   13a90:	6a 0f       	add	r22, r26
   13a92:	7b 1f       	adc	r23, r27
   13a94:	d7 01       	movw	r26, r14
   13a96:	d0 96       	adiw	r26, 0x30	; 48
   13a98:	cd 90       	ld	r12, X+
   13a9a:	dc 90       	ld	r13, X
   13a9c:	d6 01       	movw	r26, r12
   13a9e:	bc 90       	ld	r11, X
   13aa0:	d7 01       	movw	r26, r14
   13aa2:	db 96       	adiw	r26, 0x3b	; 59
   13aa4:	ac 90       	ld	r10, X
   13aa6:	ba 20       	and	r11, r10
   13aa8:	d6 01       	movw	r26, r12
   13aaa:	bc 92       	st	X, r11
   13aac:	12 b8       	out	0x02, r1	; 2
   13aae:	d7 01       	movw	r26, r14
   13ab0:	d2 96       	adiw	r26, 0x32	; 50
   13ab2:	cd 90       	ld	r12, X+
   13ab4:	dc 90       	ld	r13, X
   13ab6:	d6 01       	movw	r26, r12
   13ab8:	bc 90       	ld	r11, X
   13aba:	d7 01       	movw	r26, r14
   13abc:	dc 96       	adiw	r26, 0x3c	; 60
   13abe:	ac 90       	ld	r10, X
   13ac0:	ba 20       	and	r11, r10
   13ac2:	d6 01       	movw	r26, r12
   13ac4:	bc 92       	st	X, r11
   13ac6:	d7 01       	movw	r26, r14
   13ac8:	d2 96       	adiw	r26, 0x32	; 50
   13aca:	cd 90       	ld	r12, X+
   13acc:	dc 90       	ld	r13, X
   13ace:	d6 01       	movw	r26, r12
   13ad0:	bc 90       	ld	r11, X
   13ad2:	d7 01       	movw	r26, r14
   13ad4:	d8 96       	adiw	r26, 0x38	; 56
   13ad6:	ac 90       	ld	r10, X
   13ad8:	ba 28       	or	r11, r10
   13ada:	d6 01       	movw	r26, r12
   13adc:	bc 92       	st	X, r11
   13ade:	a0 e5       	ldi	r26, 0x50	; 80
   13ae0:	a2 b9       	out	0x02, r26	; 2
   13ae2:	d7 01       	movw	r26, r14
   13ae4:	d2 96       	adiw	r26, 0x32	; 50
   13ae6:	cd 90       	ld	r12, X+
   13ae8:	dc 90       	ld	r13, X
   13aea:	d6 01       	movw	r26, r12
   13aec:	bc 90       	ld	r11, X
   13aee:	d7 01       	movw	r26, r14
   13af0:	dc 96       	adiw	r26, 0x3c	; 60
   13af2:	ac 90       	ld	r10, X
   13af4:	ba 20       	and	r11, r10
   13af6:	d6 01       	movw	r26, r12
   13af8:	bc 92       	st	X, r11
   13afa:	d7 01       	movw	r26, r14
   13afc:	d2 96       	adiw	r26, 0x32	; 50
   13afe:	cd 90       	ld	r12, X+
   13b00:	dc 90       	ld	r13, X
   13b02:	d6 01       	movw	r26, r12
   13b04:	bc 90       	ld	r11, X
   13b06:	d7 01       	movw	r26, r14
   13b08:	d8 96       	adiw	r26, 0x38	; 56
   13b0a:	ac 90       	ld	r10, X
   13b0c:	ba 28       	or	r11, r10
   13b0e:	d6 01       	movw	r26, r12
   13b10:	bc 92       	st	X, r11
   13b12:	d7 01       	movw	r26, r14
   13b14:	d0 96       	adiw	r26, 0x30	; 48
   13b16:	cd 90       	ld	r12, X+
   13b18:	dc 90       	ld	r13, X
   13b1a:	d6 01       	movw	r26, r12
   13b1c:	bc 90       	ld	r11, X
   13b1e:	d7 01       	movw	r26, r14
   13b20:	d7 96       	adiw	r26, 0x37	; 55
   13b22:	ac 90       	ld	r10, X
   13b24:	ba 28       	or	r11, r10
   13b26:	d6 01       	movw	r26, r12
   13b28:	bc 92       	st	X, r11
   13b2a:	72 b9       	out	0x02, r23	; 2
   13b2c:	d7 01       	movw	r26, r14
   13b2e:	d2 96       	adiw	r26, 0x32	; 50
   13b30:	ad 90       	ld	r10, X+
   13b32:	bc 90       	ld	r11, X
   13b34:	d5 01       	movw	r26, r10
   13b36:	7c 91       	ld	r23, X
   13b38:	d7 01       	movw	r26, r14
   13b3a:	dc 96       	adiw	r26, 0x3c	; 60
   13b3c:	dc 90       	ld	r13, X
   13b3e:	7d 21       	and	r23, r13
   13b40:	d5 01       	movw	r26, r10
   13b42:	7c 93       	st	X, r23
   13b44:	d7 01       	movw	r26, r14
   13b46:	d2 96       	adiw	r26, 0x32	; 50
   13b48:	ad 90       	ld	r10, X+
   13b4a:	bc 90       	ld	r11, X
   13b4c:	d5 01       	movw	r26, r10
   13b4e:	7c 91       	ld	r23, X
   13b50:	d7 01       	movw	r26, r14
   13b52:	d8 96       	adiw	r26, 0x38	; 56
   13b54:	dc 90       	ld	r13, X
   13b56:	7d 29       	or	r23, r13
   13b58:	d5 01       	movw	r26, r10
   13b5a:	7c 93       	st	X, r23
   13b5c:	62 b9       	out	0x02, r22	; 2
   13b5e:	d7 01       	movw	r26, r14
   13b60:	d2 96       	adiw	r26, 0x32	; 50
   13b62:	cd 90       	ld	r12, X+
   13b64:	dc 90       	ld	r13, X
   13b66:	d6 01       	movw	r26, r12
   13b68:	6c 91       	ld	r22, X
   13b6a:	d7 01       	movw	r26, r14
   13b6c:	dc 96       	adiw	r26, 0x3c	; 60
   13b6e:	7c 91       	ld	r23, X
   13b70:	67 23       	and	r22, r23
   13b72:	d6 01       	movw	r26, r12
   13b74:	6c 93       	st	X, r22
   13b76:	d7 01       	movw	r26, r14
   13b78:	d2 96       	adiw	r26, 0x32	; 50
   13b7a:	cd 90       	ld	r12, X+
   13b7c:	dc 90       	ld	r13, X
   13b7e:	d6 01       	movw	r26, r12
   13b80:	6c 91       	ld	r22, X
   13b82:	d7 01       	movw	r26, r14
   13b84:	d8 96       	adiw	r26, 0x38	; 56
   13b86:	7c 91       	ld	r23, X
   13b88:	67 2b       	or	r22, r23
   13b8a:	d6 01       	movw	r26, r12
   13b8c:	6c 93       	st	X, r22
   13b8e:	d7 01       	movw	r26, r14
   13b90:	d0 96       	adiw	r26, 0x30	; 48
   13b92:	cd 90       	ld	r12, X+
   13b94:	dc 90       	ld	r13, X
   13b96:	d6 01       	movw	r26, r12
   13b98:	6c 91       	ld	r22, X
   13b9a:	d7 01       	movw	r26, r14
   13b9c:	db 96       	adiw	r26, 0x3b	; 59
   13b9e:	7c 91       	ld	r23, X
   13ba0:	67 23       	and	r22, r23
   13ba2:	d6 01       	movw	r26, r12
   13ba4:	6c 93       	st	X, r22
   13ba6:	12 b8       	out	0x02, r1	; 2
   13ba8:	d7 01       	movw	r26, r14
   13baa:	d2 96       	adiw	r26, 0x32	; 50
   13bac:	cd 90       	ld	r12, X+
   13bae:	dc 90       	ld	r13, X
   13bb0:	d6 01       	movw	r26, r12
   13bb2:	6c 91       	ld	r22, X
   13bb4:	d7 01       	movw	r26, r14
   13bb6:	dc 96       	adiw	r26, 0x3c	; 60
   13bb8:	7c 91       	ld	r23, X
   13bba:	67 23       	and	r22, r23
   13bbc:	d6 01       	movw	r26, r12
   13bbe:	6c 93       	st	X, r22
   13bc0:	d7 01       	movw	r26, r14
   13bc2:	d2 96       	adiw	r26, 0x32	; 50
   13bc4:	cd 90       	ld	r12, X+
   13bc6:	dc 90       	ld	r13, X
   13bc8:	d6 01       	movw	r26, r12
   13bca:	6c 91       	ld	r22, X
   13bcc:	d7 01       	movw	r26, r14
   13bce:	d8 96       	adiw	r26, 0x38	; 56
   13bd0:	7c 91       	ld	r23, X
   13bd2:	67 2b       	or	r22, r23
   13bd4:	d6 01       	movw	r26, r12
   13bd6:	6c 93       	st	X, r22
   13bd8:	61 e5       	ldi	r22, 0x51	; 81
   13bda:	62 b9       	out	0x02, r22	; 2
   13bdc:	d7 01       	movw	r26, r14
   13bde:	d2 96       	adiw	r26, 0x32	; 50
   13be0:	cd 90       	ld	r12, X+
   13be2:	dc 90       	ld	r13, X
   13be4:	d6 01       	movw	r26, r12
   13be6:	6c 91       	ld	r22, X
   13be8:	d7 01       	movw	r26, r14
   13bea:	dc 96       	adiw	r26, 0x3c	; 60
   13bec:	7c 91       	ld	r23, X
   13bee:	67 23       	and	r22, r23
   13bf0:	d6 01       	movw	r26, r12
   13bf2:	6c 93       	st	X, r22
   13bf4:	d7 01       	movw	r26, r14
   13bf6:	d2 96       	adiw	r26, 0x32	; 50
   13bf8:	cd 90       	ld	r12, X+
   13bfa:	dc 90       	ld	r13, X
   13bfc:	d6 01       	movw	r26, r12
   13bfe:	6c 91       	ld	r22, X
   13c00:	d7 01       	movw	r26, r14
   13c02:	d8 96       	adiw	r26, 0x38	; 56
   13c04:	7c 91       	ld	r23, X
   13c06:	67 2b       	or	r22, r23
   13c08:	d6 01       	movw	r26, r12
   13c0a:	6c 93       	st	X, r22
   13c0c:	d7 01       	movw	r26, r14
   13c0e:	d0 96       	adiw	r26, 0x30	; 48
   13c10:	cd 90       	ld	r12, X+
   13c12:	dc 90       	ld	r13, X
   13c14:	d6 01       	movw	r26, r12
   13c16:	6c 91       	ld	r22, X
   13c18:	d7 01       	movw	r26, r14
   13c1a:	d7 96       	adiw	r26, 0x37	; 55
   13c1c:	7c 91       	ld	r23, X
   13c1e:	67 2b       	or	r22, r23
   13c20:	d6 01       	movw	r26, r12
   13c22:	6c 93       	st	X, r22
   13c24:	32 b9       	out	0x02, r19	; 2
   13c26:	d7 01       	movw	r26, r14
   13c28:	d2 96       	adiw	r26, 0x32	; 50
   13c2a:	cd 90       	ld	r12, X+
   13c2c:	dc 90       	ld	r13, X
   13c2e:	d6 01       	movw	r26, r12
   13c30:	3c 91       	ld	r19, X
   13c32:	d7 01       	movw	r26, r14
   13c34:	dc 96       	adiw	r26, 0x3c	; 60
   13c36:	6c 91       	ld	r22, X
   13c38:	36 23       	and	r19, r22
   13c3a:	d6 01       	movw	r26, r12
   13c3c:	3c 93       	st	X, r19
   13c3e:	d7 01       	movw	r26, r14
   13c40:	d2 96       	adiw	r26, 0x32	; 50
   13c42:	cd 90       	ld	r12, X+
   13c44:	dc 90       	ld	r13, X
   13c46:	d6 01       	movw	r26, r12
   13c48:	3c 91       	ld	r19, X
   13c4a:	d7 01       	movw	r26, r14
   13c4c:	d8 96       	adiw	r26, 0x38	; 56
   13c4e:	6c 91       	ld	r22, X
   13c50:	36 2b       	or	r19, r22
   13c52:	d6 01       	movw	r26, r12
   13c54:	3c 93       	st	X, r19
   13c56:	22 b9       	out	0x02, r18	; 2
   13c58:	d7 01       	movw	r26, r14
   13c5a:	d2 96       	adiw	r26, 0x32	; 50
   13c5c:	6d 91       	ld	r22, X+
   13c5e:	7c 91       	ld	r23, X
   13c60:	db 01       	movw	r26, r22
   13c62:	2c 91       	ld	r18, X
   13c64:	d7 01       	movw	r26, r14
   13c66:	dc 96       	adiw	r26, 0x3c	; 60
   13c68:	3c 91       	ld	r19, X
   13c6a:	23 23       	and	r18, r19
   13c6c:	db 01       	movw	r26, r22
   13c6e:	2c 93       	st	X, r18
   13c70:	d7 01       	movw	r26, r14
   13c72:	d2 96       	adiw	r26, 0x32	; 50
   13c74:	6d 91       	ld	r22, X+
   13c76:	7c 91       	ld	r23, X
   13c78:	db 01       	movw	r26, r22
   13c7a:	2c 91       	ld	r18, X
   13c7c:	d7 01       	movw	r26, r14
   13c7e:	d8 96       	adiw	r26, 0x38	; 56
   13c80:	3c 91       	ld	r19, X
   13c82:	23 2b       	or	r18, r19
   13c84:	db 01       	movw	r26, r22
   13c86:	2c 93       	st	X, r18
   13c88:	d7 01       	movw	r26, r14
   13c8a:	d0 96       	adiw	r26, 0x30	; 48
   13c8c:	6d 91       	ld	r22, X+
   13c8e:	7c 91       	ld	r23, X
   13c90:	db 01       	movw	r26, r22
   13c92:	2c 91       	ld	r18, X
   13c94:	d7 01       	movw	r26, r14
   13c96:	db 96       	adiw	r26, 0x3b	; 59
   13c98:	3c 91       	ld	r19, X
   13c9a:	23 23       	and	r18, r19
   13c9c:	db 01       	movw	r26, r22
   13c9e:	2c 93       	st	X, r18
   13ca0:	12 b8       	out	0x02, r1	; 2
   13ca2:	d7 01       	movw	r26, r14
   13ca4:	d2 96       	adiw	r26, 0x32	; 50
   13ca6:	6d 91       	ld	r22, X+
   13ca8:	7c 91       	ld	r23, X
   13caa:	db 01       	movw	r26, r22
   13cac:	2c 91       	ld	r18, X
   13cae:	d7 01       	movw	r26, r14
   13cb0:	dc 96       	adiw	r26, 0x3c	; 60
   13cb2:	3c 91       	ld	r19, X
   13cb4:	23 23       	and	r18, r19
   13cb6:	db 01       	movw	r26, r22
   13cb8:	2c 93       	st	X, r18
   13cba:	d7 01       	movw	r26, r14
   13cbc:	d2 96       	adiw	r26, 0x32	; 50
   13cbe:	6d 91       	ld	r22, X+
   13cc0:	7c 91       	ld	r23, X
   13cc2:	db 01       	movw	r26, r22
   13cc4:	2c 91       	ld	r18, X
   13cc6:	d7 01       	movw	r26, r14
   13cc8:	d8 96       	adiw	r26, 0x38	; 56
   13cca:	3c 91       	ld	r19, X
   13ccc:	23 2b       	or	r18, r19
   13cce:	db 01       	movw	r26, r22
   13cd0:	2c 93       	st	X, r18
   13cd2:	22 e5       	ldi	r18, 0x52	; 82
   13cd4:	22 b9       	out	0x02, r18	; 2
   13cd6:	d7 01       	movw	r26, r14
   13cd8:	d2 96       	adiw	r26, 0x32	; 50
   13cda:	6d 91       	ld	r22, X+
   13cdc:	7c 91       	ld	r23, X
   13cde:	db 01       	movw	r26, r22
   13ce0:	2c 91       	ld	r18, X
   13ce2:	d7 01       	movw	r26, r14
   13ce4:	dc 96       	adiw	r26, 0x3c	; 60
   13ce6:	3c 91       	ld	r19, X
   13ce8:	23 23       	and	r18, r19
   13cea:	db 01       	movw	r26, r22
   13cec:	2c 93       	st	X, r18
   13cee:	d7 01       	movw	r26, r14
   13cf0:	d2 96       	adiw	r26, 0x32	; 50
   13cf2:	6d 91       	ld	r22, X+
   13cf4:	7c 91       	ld	r23, X
   13cf6:	db 01       	movw	r26, r22
   13cf8:	2c 91       	ld	r18, X
   13cfa:	d7 01       	movw	r26, r14
   13cfc:	d8 96       	adiw	r26, 0x38	; 56
   13cfe:	3c 91       	ld	r19, X
   13d00:	23 2b       	or	r18, r19
   13d02:	db 01       	movw	r26, r22
   13d04:	2c 93       	st	X, r18
   13d06:	d7 01       	movw	r26, r14
   13d08:	d0 96       	adiw	r26, 0x30	; 48
   13d0a:	6d 91       	ld	r22, X+
   13d0c:	7c 91       	ld	r23, X
   13d0e:	db 01       	movw	r26, r22
   13d10:	2c 91       	ld	r18, X
   13d12:	d7 01       	movw	r26, r14
   13d14:	d7 96       	adiw	r26, 0x37	; 55
   13d16:	3c 91       	ld	r19, X
   13d18:	23 2b       	or	r18, r19
   13d1a:	db 01       	movw	r26, r22
   13d1c:	2c 93       	st	X, r18
   13d1e:	52 b9       	out	0x02, r21	; 2
   13d20:	d7 01       	movw	r26, r14
   13d22:	d2 96       	adiw	r26, 0x32	; 50
   13d24:	6d 91       	ld	r22, X+
   13d26:	7c 91       	ld	r23, X
   13d28:	db 01       	movw	r26, r22
   13d2a:	2c 91       	ld	r18, X
   13d2c:	d7 01       	movw	r26, r14
   13d2e:	dc 96       	adiw	r26, 0x3c	; 60
   13d30:	3c 91       	ld	r19, X
   13d32:	23 23       	and	r18, r19
   13d34:	db 01       	movw	r26, r22
   13d36:	2c 93       	st	X, r18
   13d38:	d7 01       	movw	r26, r14
   13d3a:	d2 96       	adiw	r26, 0x32	; 50
   13d3c:	6d 91       	ld	r22, X+
   13d3e:	7c 91       	ld	r23, X
   13d40:	db 01       	movw	r26, r22
   13d42:	2c 91       	ld	r18, X
   13d44:	d7 01       	movw	r26, r14
   13d46:	d8 96       	adiw	r26, 0x38	; 56
   13d48:	3c 91       	ld	r19, X
   13d4a:	23 2b       	or	r18, r19
   13d4c:	db 01       	movw	r26, r22
   13d4e:	2c 93       	st	X, r18
   13d50:	42 b9       	out	0x02, r20	; 2
   13d52:	d7 01       	movw	r26, r14
   13d54:	d2 96       	adiw	r26, 0x32	; 50
   13d56:	4d 91       	ld	r20, X+
   13d58:	5c 91       	ld	r21, X
   13d5a:	da 01       	movw	r26, r20
   13d5c:	2c 91       	ld	r18, X
   13d5e:	d7 01       	movw	r26, r14
   13d60:	dc 96       	adiw	r26, 0x3c	; 60
   13d62:	3c 91       	ld	r19, X
   13d64:	23 23       	and	r18, r19
   13d66:	da 01       	movw	r26, r20
   13d68:	2c 93       	st	X, r18
   13d6a:	d7 01       	movw	r26, r14
   13d6c:	d2 96       	adiw	r26, 0x32	; 50
   13d6e:	4d 91       	ld	r20, X+
   13d70:	5c 91       	ld	r21, X
   13d72:	da 01       	movw	r26, r20
   13d74:	2c 91       	ld	r18, X
   13d76:	d7 01       	movw	r26, r14
   13d78:	d8 96       	adiw	r26, 0x38	; 56
   13d7a:	3c 91       	ld	r19, X
   13d7c:	23 2b       	or	r18, r19
   13d7e:	da 01       	movw	r26, r20
   13d80:	2c 93       	st	X, r18
   13d82:	d7 01       	movw	r26, r14
   13d84:	d0 96       	adiw	r26, 0x30	; 48
   13d86:	4d 91       	ld	r20, X+
   13d88:	5c 91       	ld	r21, X
   13d8a:	da 01       	movw	r26, r20
   13d8c:	2c 91       	ld	r18, X
   13d8e:	d7 01       	movw	r26, r14
   13d90:	db 96       	adiw	r26, 0x3b	; 59
   13d92:	3c 91       	ld	r19, X
   13d94:	23 23       	and	r18, r19
   13d96:	da 01       	movw	r26, r20
   13d98:	2c 93       	st	X, r18
   13d9a:	12 b8       	out	0x02, r1	; 2
   13d9c:	d7 01       	movw	r26, r14
   13d9e:	d2 96       	adiw	r26, 0x32	; 50
   13da0:	4d 91       	ld	r20, X+
   13da2:	5c 91       	ld	r21, X
   13da4:	da 01       	movw	r26, r20
   13da6:	2c 91       	ld	r18, X
   13da8:	d7 01       	movw	r26, r14
   13daa:	dc 96       	adiw	r26, 0x3c	; 60
   13dac:	3c 91       	ld	r19, X
   13dae:	23 23       	and	r18, r19
   13db0:	da 01       	movw	r26, r20
   13db2:	2c 93       	st	X, r18
   13db4:	d7 01       	movw	r26, r14
   13db6:	d2 96       	adiw	r26, 0x32	; 50
   13db8:	4d 91       	ld	r20, X+
   13dba:	5c 91       	ld	r21, X
   13dbc:	da 01       	movw	r26, r20
   13dbe:	2c 91       	ld	r18, X
   13dc0:	d7 01       	movw	r26, r14
   13dc2:	d8 96       	adiw	r26, 0x38	; 56
   13dc4:	3c 91       	ld	r19, X
   13dc6:	23 2b       	or	r18, r19
   13dc8:	da 01       	movw	r26, r20
   13dca:	2c 93       	st	X, r18
   13dcc:	23 e5       	ldi	r18, 0x53	; 83
   13dce:	22 b9       	out	0x02, r18	; 2
   13dd0:	d7 01       	movw	r26, r14
   13dd2:	d2 96       	adiw	r26, 0x32	; 50
   13dd4:	4d 91       	ld	r20, X+
   13dd6:	5c 91       	ld	r21, X
   13dd8:	da 01       	movw	r26, r20
   13dda:	2c 91       	ld	r18, X
   13ddc:	d7 01       	movw	r26, r14
   13dde:	dc 96       	adiw	r26, 0x3c	; 60
   13de0:	3c 91       	ld	r19, X
   13de2:	23 23       	and	r18, r19
   13de4:	da 01       	movw	r26, r20
   13de6:	2c 93       	st	X, r18
   13de8:	d7 01       	movw	r26, r14
   13dea:	d2 96       	adiw	r26, 0x32	; 50
   13dec:	4d 91       	ld	r20, X+
   13dee:	5c 91       	ld	r21, X
   13df0:	da 01       	movw	r26, r20
   13df2:	2c 91       	ld	r18, X
   13df4:	d7 01       	movw	r26, r14
   13df6:	d8 96       	adiw	r26, 0x38	; 56
   13df8:	3c 91       	ld	r19, X
   13dfa:	23 2b       	or	r18, r19
   13dfc:	da 01       	movw	r26, r20
   13dfe:	2c 93       	st	X, r18
   13e00:	d7 01       	movw	r26, r14
   13e02:	d0 96       	adiw	r26, 0x30	; 48
   13e04:	4d 91       	ld	r20, X+
   13e06:	5c 91       	ld	r21, X
   13e08:	da 01       	movw	r26, r20
   13e0a:	2c 91       	ld	r18, X
   13e0c:	d7 01       	movw	r26, r14
   13e0e:	d7 96       	adiw	r26, 0x37	; 55
   13e10:	3c 91       	ld	r19, X
   13e12:	23 2b       	or	r18, r19
   13e14:	da 01       	movw	r26, r20
   13e16:	2c 93       	st	X, r18
   13e18:	12 b9       	out	0x02, r17	; 2
   13e1a:	d7 01       	movw	r26, r14
   13e1c:	d2 96       	adiw	r26, 0x32	; 50
   13e1e:	4d 91       	ld	r20, X+
   13e20:	5c 91       	ld	r21, X
   13e22:	da 01       	movw	r26, r20
   13e24:	2c 91       	ld	r18, X
   13e26:	d7 01       	movw	r26, r14
   13e28:	dc 96       	adiw	r26, 0x3c	; 60
   13e2a:	3c 91       	ld	r19, X
   13e2c:	23 23       	and	r18, r19
   13e2e:	da 01       	movw	r26, r20
   13e30:	2c 93       	st	X, r18
   13e32:	d7 01       	movw	r26, r14
   13e34:	d2 96       	adiw	r26, 0x32	; 50
   13e36:	4d 91       	ld	r20, X+
   13e38:	5c 91       	ld	r21, X
   13e3a:	da 01       	movw	r26, r20
   13e3c:	2c 91       	ld	r18, X
   13e3e:	d7 01       	movw	r26, r14
   13e40:	d8 96       	adiw	r26, 0x38	; 56
   13e42:	3c 91       	ld	r19, X
   13e44:	23 2b       	or	r18, r19
   13e46:	da 01       	movw	r26, r20
   13e48:	2c 93       	st	X, r18
   13e4a:	02 b9       	out	0x02, r16	; 2
   13e4c:	d7 01       	movw	r26, r14
   13e4e:	d2 96       	adiw	r26, 0x32	; 50
   13e50:	4d 91       	ld	r20, X+
   13e52:	5c 91       	ld	r21, X
   13e54:	da 01       	movw	r26, r20
   13e56:	2c 91       	ld	r18, X
   13e58:	d7 01       	movw	r26, r14
   13e5a:	dc 96       	adiw	r26, 0x3c	; 60
   13e5c:	3c 91       	ld	r19, X
   13e5e:	23 23       	and	r18, r19
   13e60:	da 01       	movw	r26, r20
   13e62:	2c 93       	st	X, r18
   13e64:	d7 01       	movw	r26, r14
   13e66:	d2 96       	adiw	r26, 0x32	; 50
   13e68:	4d 91       	ld	r20, X+
   13e6a:	5c 91       	ld	r21, X
   13e6c:	da 01       	movw	r26, r20
   13e6e:	2c 91       	ld	r18, X
   13e70:	d7 01       	movw	r26, r14
   13e72:	d8 96       	adiw	r26, 0x38	; 56
   13e74:	3c 91       	ld	r19, X
   13e76:	23 2b       	or	r18, r19
   13e78:	da 01       	movw	r26, r20
   13e7a:	2c 93       	st	X, r18
   13e7c:	d7 01       	movw	r26, r14
   13e7e:	d0 96       	adiw	r26, 0x30	; 48
   13e80:	4d 91       	ld	r20, X+
   13e82:	5c 91       	ld	r21, X
   13e84:	da 01       	movw	r26, r20
   13e86:	2c 91       	ld	r18, X
   13e88:	d7 01       	movw	r26, r14
   13e8a:	db 96       	adiw	r26, 0x3b	; 59
   13e8c:	3c 91       	ld	r19, X
   13e8e:	23 23       	and	r18, r19
   13e90:	da 01       	movw	r26, r20
   13e92:	2c 93       	st	X, r18
   13e94:	12 b8       	out	0x02, r1	; 2
   13e96:	d7 01       	movw	r26, r14
   13e98:	d2 96       	adiw	r26, 0x32	; 50
   13e9a:	4d 91       	ld	r20, X+
   13e9c:	5c 91       	ld	r21, X
   13e9e:	da 01       	movw	r26, r20
   13ea0:	2c 91       	ld	r18, X
   13ea2:	d7 01       	movw	r26, r14
   13ea4:	dc 96       	adiw	r26, 0x3c	; 60
   13ea6:	3c 91       	ld	r19, X
   13ea8:	23 23       	and	r18, r19
   13eaa:	da 01       	movw	r26, r20
   13eac:	2c 93       	st	X, r18
   13eae:	d7 01       	movw	r26, r14
   13eb0:	d2 96       	adiw	r26, 0x32	; 50
   13eb2:	4d 91       	ld	r20, X+
   13eb4:	5c 91       	ld	r21, X
   13eb6:	da 01       	movw	r26, r20
   13eb8:	2c 91       	ld	r18, X
   13eba:	d7 01       	movw	r26, r14
   13ebc:	d8 96       	adiw	r26, 0x38	; 56
   13ebe:	3c 91       	ld	r19, X
   13ec0:	23 2b       	or	r18, r19
   13ec2:	da 01       	movw	r26, r20
   13ec4:	2c 93       	st	X, r18
   13ec6:	20 e2       	ldi	r18, 0x20	; 32
   13ec8:	22 b9       	out	0x02, r18	; 2
   13eca:	d7 01       	movw	r26, r14
   13ecc:	d2 96       	adiw	r26, 0x32	; 50
   13ece:	4d 91       	ld	r20, X+
   13ed0:	5c 91       	ld	r21, X
   13ed2:	da 01       	movw	r26, r20
   13ed4:	2c 91       	ld	r18, X
   13ed6:	d7 01       	movw	r26, r14
   13ed8:	dc 96       	adiw	r26, 0x3c	; 60
   13eda:	3c 91       	ld	r19, X
   13edc:	23 23       	and	r18, r19
   13ede:	da 01       	movw	r26, r20
   13ee0:	2c 93       	st	X, r18
   13ee2:	d7 01       	movw	r26, r14
   13ee4:	d2 96       	adiw	r26, 0x32	; 50
   13ee6:	4d 91       	ld	r20, X+
   13ee8:	5c 91       	ld	r21, X
   13eea:	da 01       	movw	r26, r20
   13eec:	2c 91       	ld	r18, X
   13eee:	d7 01       	movw	r26, r14
   13ef0:	d8 96       	adiw	r26, 0x38	; 56
   13ef2:	3c 91       	ld	r19, X
   13ef4:	23 2b       	or	r18, r19
   13ef6:	da 01       	movw	r26, r20
   13ef8:	2c 93       	st	X, r18
   13efa:	d7 01       	movw	r26, r14
   13efc:	d0 96       	adiw	r26, 0x30	; 48
   13efe:	4d 91       	ld	r20, X+
   13f00:	5c 91       	ld	r21, X
   13f02:	da 01       	movw	r26, r20
   13f04:	2c 91       	ld	r18, X
   13f06:	d7 01       	movw	r26, r14
   13f08:	d7 96       	adiw	r26, 0x37	; 55
   13f0a:	3c 91       	ld	r19, X
   13f0c:	23 2b       	or	r18, r19
   13f0e:	da 01       	movw	r26, r20
   13f10:	2c 93       	st	X, r18
   13f12:	f2 b9       	out	0x02, r31	; 2
   13f14:	d7 01       	movw	r26, r14
   13f16:	d2 96       	adiw	r26, 0x32	; 50
   13f18:	4d 91       	ld	r20, X+
   13f1a:	5c 91       	ld	r21, X
   13f1c:	da 01       	movw	r26, r20
   13f1e:	2c 91       	ld	r18, X
   13f20:	d7 01       	movw	r26, r14
   13f22:	dc 96       	adiw	r26, 0x3c	; 60
   13f24:	3c 91       	ld	r19, X
   13f26:	23 23       	and	r18, r19
   13f28:	da 01       	movw	r26, r20
   13f2a:	2c 93       	st	X, r18
   13f2c:	d7 01       	movw	r26, r14
   13f2e:	d2 96       	adiw	r26, 0x32	; 50
   13f30:	4d 91       	ld	r20, X+
   13f32:	5c 91       	ld	r21, X
   13f34:	da 01       	movw	r26, r20
   13f36:	2c 91       	ld	r18, X
   13f38:	d7 01       	movw	r26, r14
   13f3a:	d8 96       	adiw	r26, 0x38	; 56
   13f3c:	3c 91       	ld	r19, X
   13f3e:	23 2b       	or	r18, r19
   13f40:	da 01       	movw	r26, r20
   13f42:	2c 93       	st	X, r18
   13f44:	e2 b9       	out	0x02, r30	; 2
   13f46:	d7 01       	movw	r26, r14
   13f48:	d2 96       	adiw	r26, 0x32	; 50
   13f4a:	ed 91       	ld	r30, X+
   13f4c:	fc 91       	ld	r31, X
   13f4e:	d3 97       	sbiw	r26, 0x33	; 51
   13f50:	20 81       	ld	r18, Z
   13f52:	dc 96       	adiw	r26, 0x3c	; 60
   13f54:	3c 91       	ld	r19, X
   13f56:	dc 97       	sbiw	r26, 0x3c	; 60
   13f58:	23 23       	and	r18, r19
   13f5a:	20 83       	st	Z, r18
   13f5c:	d2 96       	adiw	r26, 0x32	; 50
   13f5e:	ed 91       	ld	r30, X+
   13f60:	fc 91       	ld	r31, X
   13f62:	d3 97       	sbiw	r26, 0x33	; 51
   13f64:	20 81       	ld	r18, Z
   13f66:	d8 96       	adiw	r26, 0x38	; 56
   13f68:	3c 91       	ld	r19, X
   13f6a:	d8 97       	sbiw	r26, 0x38	; 56
   13f6c:	23 2b       	or	r18, r19
   13f6e:	20 83       	st	Z, r18
   13f70:	d0 96       	adiw	r26, 0x30	; 48
   13f72:	ed 91       	ld	r30, X+
   13f74:	fc 91       	ld	r31, X
   13f76:	d1 97       	sbiw	r26, 0x31	; 49
   13f78:	20 81       	ld	r18, Z
   13f7a:	db 96       	adiw	r26, 0x3b	; 59
   13f7c:	3c 91       	ld	r19, X
   13f7e:	db 97       	sbiw	r26, 0x3b	; 59
   13f80:	23 23       	and	r18, r19
   13f82:	20 83       	st	Z, r18
   13f84:	12 b8       	out	0x02, r1	; 2
   13f86:	d2 96       	adiw	r26, 0x32	; 50
   13f88:	ed 91       	ld	r30, X+
   13f8a:	fc 91       	ld	r31, X
   13f8c:	d3 97       	sbiw	r26, 0x33	; 51
   13f8e:	20 81       	ld	r18, Z
   13f90:	dc 96       	adiw	r26, 0x3c	; 60
   13f92:	3c 91       	ld	r19, X
   13f94:	dc 97       	sbiw	r26, 0x3c	; 60
   13f96:	23 23       	and	r18, r19
   13f98:	20 83       	st	Z, r18
   13f9a:	d2 96       	adiw	r26, 0x32	; 50
   13f9c:	ed 91       	ld	r30, X+
   13f9e:	fc 91       	ld	r31, X
   13fa0:	d3 97       	sbiw	r26, 0x33	; 51
   13fa2:	20 81       	ld	r18, Z
   13fa4:	d8 96       	adiw	r26, 0x38	; 56
   13fa6:	3c 91       	ld	r19, X
   13fa8:	d8 97       	sbiw	r26, 0x38	; 56
   13faa:	23 2b       	or	r18, r19
   13fac:	20 83       	st	Z, r18
   13fae:	21 e2       	ldi	r18, 0x21	; 33
   13fb0:	22 b9       	out	0x02, r18	; 2
   13fb2:	d2 96       	adiw	r26, 0x32	; 50
   13fb4:	ed 91       	ld	r30, X+
   13fb6:	fc 91       	ld	r31, X
   13fb8:	d3 97       	sbiw	r26, 0x33	; 51
   13fba:	20 81       	ld	r18, Z
   13fbc:	dc 96       	adiw	r26, 0x3c	; 60
   13fbe:	3c 91       	ld	r19, X
   13fc0:	dc 97       	sbiw	r26, 0x3c	; 60
   13fc2:	23 23       	and	r18, r19
   13fc4:	20 83       	st	Z, r18
   13fc6:	d2 96       	adiw	r26, 0x32	; 50
   13fc8:	ed 91       	ld	r30, X+
   13fca:	fc 91       	ld	r31, X
   13fcc:	d3 97       	sbiw	r26, 0x33	; 51
   13fce:	20 81       	ld	r18, Z
   13fd0:	d8 96       	adiw	r26, 0x38	; 56
   13fd2:	3c 91       	ld	r19, X
   13fd4:	d8 97       	sbiw	r26, 0x38	; 56
   13fd6:	23 2b       	or	r18, r19
   13fd8:	20 83       	st	Z, r18
   13fda:	d0 96       	adiw	r26, 0x30	; 48
   13fdc:	ed 91       	ld	r30, X+
   13fde:	fc 91       	ld	r31, X
   13fe0:	d1 97       	sbiw	r26, 0x31	; 49
   13fe2:	20 81       	ld	r18, Z
   13fe4:	d7 96       	adiw	r26, 0x37	; 55
   13fe6:	3c 91       	ld	r19, X
   13fe8:	d7 97       	sbiw	r26, 0x37	; 55
   13fea:	23 2b       	or	r18, r19
   13fec:	20 83       	st	Z, r18
   13fee:	92 b9       	out	0x02, r25	; 2
   13ff0:	d2 96       	adiw	r26, 0x32	; 50
   13ff2:	ed 91       	ld	r30, X+
   13ff4:	fc 91       	ld	r31, X
   13ff6:	d3 97       	sbiw	r26, 0x33	; 51
   13ff8:	90 81       	ld	r25, Z
   13ffa:	dc 96       	adiw	r26, 0x3c	; 60
   13ffc:	2c 91       	ld	r18, X
   13ffe:	dc 97       	sbiw	r26, 0x3c	; 60
   14000:	92 23       	and	r25, r18
   14002:	90 83       	st	Z, r25
   14004:	d2 96       	adiw	r26, 0x32	; 50
   14006:	ed 91       	ld	r30, X+
   14008:	fc 91       	ld	r31, X
   1400a:	d3 97       	sbiw	r26, 0x33	; 51
   1400c:	90 81       	ld	r25, Z
   1400e:	d8 96       	adiw	r26, 0x38	; 56
   14010:	2c 91       	ld	r18, X
   14012:	d8 97       	sbiw	r26, 0x38	; 56
   14014:	92 2b       	or	r25, r18
   14016:	90 83       	st	Z, r25
   14018:	82 b9       	out	0x02, r24	; 2
   1401a:	d2 96       	adiw	r26, 0x32	; 50
   1401c:	ed 91       	ld	r30, X+
   1401e:	fc 91       	ld	r31, X
   14020:	d3 97       	sbiw	r26, 0x33	; 51
   14022:	80 81       	ld	r24, Z
   14024:	dc 96       	adiw	r26, 0x3c	; 60
   14026:	9c 91       	ld	r25, X
   14028:	dc 97       	sbiw	r26, 0x3c	; 60
   1402a:	89 23       	and	r24, r25
   1402c:	80 83       	st	Z, r24
   1402e:	d2 96       	adiw	r26, 0x32	; 50
   14030:	ed 91       	ld	r30, X+
   14032:	fc 91       	ld	r31, X
   14034:	d3 97       	sbiw	r26, 0x33	; 51
   14036:	80 81       	ld	r24, Z
   14038:	d8 96       	adiw	r26, 0x38	; 56
   1403a:	9c 91       	ld	r25, X
   1403c:	89 2b       	or	r24, r25
   1403e:	80 83       	st	Z, r24
   14040:	d7 01       	movw	r26, r14
   14042:	9e 96       	adiw	r26, 0x2e	; 46
   14044:	ed 91       	ld	r30, X+
   14046:	fc 91       	ld	r31, X
   14048:	9f 97       	sbiw	r26, 0x2f	; 47
   1404a:	80 81       	ld	r24, Z
   1404c:	d6 96       	adiw	r26, 0x36	; 54
   1404e:	9c 91       	ld	r25, X
   14050:	89 2b       	or	r24, r25
   14052:	80 83       	st	Z, r24
   14054:	28 96       	adiw	r28, 0x08	; 8
   14056:	0f b6       	in	r0, 0x3f	; 63
   14058:	f8 94       	cli
   1405a:	de bf       	out	0x3e, r29	; 62
   1405c:	0f be       	out	0x3f, r0	; 63
   1405e:	cd bf       	out	0x3d, r28	; 61
   14060:	df 91       	pop	r29
   14062:	cf 91       	pop	r28
   14064:	1f 91       	pop	r17
   14066:	0f 91       	pop	r16
   14068:	ff 90       	pop	r15
   1406a:	ef 90       	pop	r14
   1406c:	df 90       	pop	r13
   1406e:	cf 90       	pop	r12
   14070:	bf 90       	pop	r11
   14072:	af 90       	pop	r10
   14074:	08 95       	ret
   14076:	f7 01       	movw	r30, r14
   14078:	a6 85       	ldd	r26, Z+14	; 0x0e
   1407a:	b7 85       	ldd	r27, Z+15	; 0x0f
   1407c:	59 01       	movw	r10, r18
   1407e:	a0 94       	com	r10
   14080:	b0 94       	com	r11
   14082:	9d 01       	movw	r18, r26
   14084:	26 1b       	sub	r18, r22
   14086:	37 0b       	sbc	r19, r23
   14088:	21 50       	subi	r18, 0x01	; 1
   1408a:	31 09       	sbc	r19, r1
   1408c:	60 89       	ldd	r22, Z+16	; 0x10
   1408e:	71 89       	ldd	r23, Z+17	; 0x11
   14090:	68 01       	movw	r12, r16
   14092:	c0 94       	com	r12
   14094:	d0 94       	com	r13
   14096:	8a 01       	movw	r16, r20
   14098:	00 95       	com	r16
   1409a:	10 95       	com	r17
   1409c:	06 0f       	add	r16, r22
   1409e:	17 1f       	adc	r17, r23
   140a0:	c8 01       	movw	r24, r16
   140a2:	f9 01       	movw	r30, r18
   140a4:	a6 01       	movw	r20, r12
   140a6:	46 0f       	add	r20, r22
   140a8:	57 1f       	adc	r21, r23
   140aa:	b5 01       	movw	r22, r10
   140ac:	f1 cc       	rjmp	.-1566   	; 0x13a90 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
   140ae:	f7 01       	movw	r30, r14
   140b0:	a0 89       	ldd	r26, Z+16	; 0x10
   140b2:	b1 89       	ldd	r27, Z+17	; 0x11
   140b4:	69 01       	movw	r12, r18
   140b6:	c0 94       	com	r12
   140b8:	d0 94       	com	r13
   140ba:	cd 01       	movw	r24, r26
   140bc:	86 1b       	sub	r24, r22
   140be:	97 0b       	sbc	r25, r23
   140c0:	01 97       	sbiw	r24, 0x01	; 1
   140c2:	fa 01       	movw	r30, r20
   140c4:	98 01       	movw	r18, r16
   140c6:	8c 01       	movw	r16, r24
   140c8:	ba 01       	movw	r22, r20
   140ca:	a6 01       	movw	r20, r12
   140cc:	4a 0f       	add	r20, r26
   140ce:	5b 1f       	adc	r21, r27
   140d0:	e1 cc       	rjmp	.-1598   	; 0x13a94 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
   140d2:	ca 01       	movw	r24, r20
   140d4:	fb 01       	movw	r30, r22
   140d6:	de cc       	rjmp	.-1604   	; 0x13a94 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
   140d8:	01 97       	sbiw	r24, 0x01	; 1
   140da:	09 f0       	breq	.+2      	; 0x140de <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
   140dc:	e5 c1       	rjmp	.+970    	; 0x144a8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
   140de:	d0 96       	adiw	r26, 0x30	; 48
   140e0:	ed 91       	ld	r30, X+
   140e2:	fc 91       	ld	r31, X
   140e4:	d1 97       	sbiw	r26, 0x31	; 49
   140e6:	80 81       	ld	r24, Z
   140e8:	db 96       	adiw	r26, 0x3b	; 59
   140ea:	9c 91       	ld	r25, X
   140ec:	db 97       	sbiw	r26, 0x3b	; 59
   140ee:	89 23       	and	r24, r25
   140f0:	80 83       	st	Z, r24
   140f2:	82 e0       	ldi	r24, 0x02	; 2
   140f4:	82 b9       	out	0x02, r24	; 2
   140f6:	d2 96       	adiw	r26, 0x32	; 50
   140f8:	ed 91       	ld	r30, X+
   140fa:	fc 91       	ld	r31, X
   140fc:	d3 97       	sbiw	r26, 0x33	; 51
   140fe:	80 81       	ld	r24, Z
   14100:	dc 96       	adiw	r26, 0x3c	; 60
   14102:	9c 91       	ld	r25, X
   14104:	dc 97       	sbiw	r26, 0x3c	; 60
   14106:	89 23       	and	r24, r25
   14108:	80 83       	st	Z, r24
   1410a:	d2 96       	adiw	r26, 0x32	; 50
   1410c:	ed 91       	ld	r30, X+
   1410e:	fc 91       	ld	r31, X
   14110:	d3 97       	sbiw	r26, 0x33	; 51
   14112:	80 81       	ld	r24, Z
   14114:	d8 96       	adiw	r26, 0x38	; 56
   14116:	9c 91       	ld	r25, X
   14118:	d8 97       	sbiw	r26, 0x38	; 56
   1411a:	89 2b       	or	r24, r25
   1411c:	80 83       	st	Z, r24
   1411e:	d0 96       	adiw	r26, 0x30	; 48
   14120:	ed 91       	ld	r30, X+
   14122:	fc 91       	ld	r31, X
   14124:	d1 97       	sbiw	r26, 0x31	; 49
   14126:	80 81       	ld	r24, Z
   14128:	d7 96       	adiw	r26, 0x37	; 55
   1412a:	9c 91       	ld	r25, X
   1412c:	d7 97       	sbiw	r26, 0x37	; 55
   1412e:	89 2b       	or	r24, r25
   14130:	80 83       	st	Z, r24
   14132:	72 b9       	out	0x02, r23	; 2
   14134:	d2 96       	adiw	r26, 0x32	; 50
   14136:	ed 91       	ld	r30, X+
   14138:	fc 91       	ld	r31, X
   1413a:	d3 97       	sbiw	r26, 0x33	; 51
   1413c:	80 81       	ld	r24, Z
   1413e:	dc 96       	adiw	r26, 0x3c	; 60
   14140:	9c 91       	ld	r25, X
   14142:	dc 97       	sbiw	r26, 0x3c	; 60
   14144:	89 23       	and	r24, r25
   14146:	80 83       	st	Z, r24
   14148:	d2 96       	adiw	r26, 0x32	; 50
   1414a:	ed 91       	ld	r30, X+
   1414c:	fc 91       	ld	r31, X
   1414e:	d3 97       	sbiw	r26, 0x33	; 51
   14150:	80 81       	ld	r24, Z
   14152:	d8 96       	adiw	r26, 0x38	; 56
   14154:	9c 91       	ld	r25, X
   14156:	d8 97       	sbiw	r26, 0x38	; 56
   14158:	89 2b       	or	r24, r25
   1415a:	80 83       	st	Z, r24
   1415c:	d0 96       	adiw	r26, 0x30	; 48
   1415e:	ed 91       	ld	r30, X+
   14160:	fc 91       	ld	r31, X
   14162:	d1 97       	sbiw	r26, 0x31	; 49
   14164:	80 81       	ld	r24, Z
   14166:	db 96       	adiw	r26, 0x3b	; 59
   14168:	9c 91       	ld	r25, X
   1416a:	db 97       	sbiw	r26, 0x3b	; 59
   1416c:	89 23       	and	r24, r25
   1416e:	80 83       	st	Z, r24
   14170:	83 e0       	ldi	r24, 0x03	; 3
   14172:	82 b9       	out	0x02, r24	; 2
   14174:	d2 96       	adiw	r26, 0x32	; 50
   14176:	ed 91       	ld	r30, X+
   14178:	fc 91       	ld	r31, X
   1417a:	d3 97       	sbiw	r26, 0x33	; 51
   1417c:	80 81       	ld	r24, Z
   1417e:	dc 96       	adiw	r26, 0x3c	; 60
   14180:	9c 91       	ld	r25, X
   14182:	dc 97       	sbiw	r26, 0x3c	; 60
   14184:	89 23       	and	r24, r25
   14186:	80 83       	st	Z, r24
   14188:	d2 96       	adiw	r26, 0x32	; 50
   1418a:	ed 91       	ld	r30, X+
   1418c:	fc 91       	ld	r31, X
   1418e:	d3 97       	sbiw	r26, 0x33	; 51
   14190:	80 81       	ld	r24, Z
   14192:	d8 96       	adiw	r26, 0x38	; 56
   14194:	9c 91       	ld	r25, X
   14196:	d8 97       	sbiw	r26, 0x38	; 56
   14198:	89 2b       	or	r24, r25
   1419a:	80 83       	st	Z, r24
   1419c:	d0 96       	adiw	r26, 0x30	; 48
   1419e:	ed 91       	ld	r30, X+
   141a0:	fc 91       	ld	r31, X
   141a2:	d1 97       	sbiw	r26, 0x31	; 49
   141a4:	80 81       	ld	r24, Z
   141a6:	d7 96       	adiw	r26, 0x37	; 55
   141a8:	9c 91       	ld	r25, X
   141aa:	d7 97       	sbiw	r26, 0x37	; 55
   141ac:	89 2b       	or	r24, r25
   141ae:	80 83       	st	Z, r24
   141b0:	62 b9       	out	0x02, r22	; 2
   141b2:	d2 96       	adiw	r26, 0x32	; 50
   141b4:	ed 91       	ld	r30, X+
   141b6:	fc 91       	ld	r31, X
   141b8:	d3 97       	sbiw	r26, 0x33	; 51
   141ba:	80 81       	ld	r24, Z
   141bc:	dc 96       	adiw	r26, 0x3c	; 60
   141be:	9c 91       	ld	r25, X
   141c0:	dc 97       	sbiw	r26, 0x3c	; 60
   141c2:	89 23       	and	r24, r25
   141c4:	80 83       	st	Z, r24
   141c6:	d2 96       	adiw	r26, 0x32	; 50
   141c8:	ed 91       	ld	r30, X+
   141ca:	fc 91       	ld	r31, X
   141cc:	d3 97       	sbiw	r26, 0x33	; 51
   141ce:	80 81       	ld	r24, Z
   141d0:	d8 96       	adiw	r26, 0x38	; 56
   141d2:	9c 91       	ld	r25, X
   141d4:	d8 97       	sbiw	r26, 0x38	; 56
   141d6:	89 2b       	or	r24, r25
   141d8:	80 83       	st	Z, r24
   141da:	d0 96       	adiw	r26, 0x30	; 48
   141dc:	ed 91       	ld	r30, X+
   141de:	fc 91       	ld	r31, X
   141e0:	d1 97       	sbiw	r26, 0x31	; 49
   141e2:	80 81       	ld	r24, Z
   141e4:	db 96       	adiw	r26, 0x3b	; 59
   141e6:	9c 91       	ld	r25, X
   141e8:	db 97       	sbiw	r26, 0x3b	; 59
   141ea:	89 23       	and	r24, r25
   141ec:	80 83       	st	Z, r24
   141ee:	86 e0       	ldi	r24, 0x06	; 6
   141f0:	82 b9       	out	0x02, r24	; 2
   141f2:	d2 96       	adiw	r26, 0x32	; 50
   141f4:	ed 91       	ld	r30, X+
   141f6:	fc 91       	ld	r31, X
   141f8:	d3 97       	sbiw	r26, 0x33	; 51
   141fa:	80 81       	ld	r24, Z
   141fc:	dc 96       	adiw	r26, 0x3c	; 60
   141fe:	9c 91       	ld	r25, X
   14200:	dc 97       	sbiw	r26, 0x3c	; 60
   14202:	89 23       	and	r24, r25
   14204:	80 83       	st	Z, r24
   14206:	d2 96       	adiw	r26, 0x32	; 50
   14208:	ed 91       	ld	r30, X+
   1420a:	fc 91       	ld	r31, X
   1420c:	d3 97       	sbiw	r26, 0x33	; 51
   1420e:	80 81       	ld	r24, Z
   14210:	d8 96       	adiw	r26, 0x38	; 56
   14212:	9c 91       	ld	r25, X
   14214:	d8 97       	sbiw	r26, 0x38	; 56
   14216:	89 2b       	or	r24, r25
   14218:	80 83       	st	Z, r24
   1421a:	d0 96       	adiw	r26, 0x30	; 48
   1421c:	ed 91       	ld	r30, X+
   1421e:	fc 91       	ld	r31, X
   14220:	d1 97       	sbiw	r26, 0x31	; 49
   14222:	80 81       	ld	r24, Z
   14224:	d7 96       	adiw	r26, 0x37	; 55
   14226:	9c 91       	ld	r25, X
   14228:	d7 97       	sbiw	r26, 0x37	; 55
   1422a:	89 2b       	or	r24, r25
   1422c:	80 83       	st	Z, r24
   1422e:	52 b9       	out	0x02, r21	; 2
   14230:	d2 96       	adiw	r26, 0x32	; 50
   14232:	ed 91       	ld	r30, X+
   14234:	fc 91       	ld	r31, X
   14236:	d3 97       	sbiw	r26, 0x33	; 51
   14238:	80 81       	ld	r24, Z
   1423a:	dc 96       	adiw	r26, 0x3c	; 60
   1423c:	9c 91       	ld	r25, X
   1423e:	dc 97       	sbiw	r26, 0x3c	; 60
   14240:	89 23       	and	r24, r25
   14242:	80 83       	st	Z, r24
   14244:	d2 96       	adiw	r26, 0x32	; 50
   14246:	ed 91       	ld	r30, X+
   14248:	fc 91       	ld	r31, X
   1424a:	d3 97       	sbiw	r26, 0x33	; 51
   1424c:	80 81       	ld	r24, Z
   1424e:	d8 96       	adiw	r26, 0x38	; 56
   14250:	9c 91       	ld	r25, X
   14252:	d8 97       	sbiw	r26, 0x38	; 56
   14254:	89 2b       	or	r24, r25
   14256:	80 83       	st	Z, r24
   14258:	d0 96       	adiw	r26, 0x30	; 48
   1425a:	ed 91       	ld	r30, X+
   1425c:	fc 91       	ld	r31, X
   1425e:	d1 97       	sbiw	r26, 0x31	; 49
   14260:	80 81       	ld	r24, Z
   14262:	db 96       	adiw	r26, 0x3b	; 59
   14264:	9c 91       	ld	r25, X
   14266:	db 97       	sbiw	r26, 0x3b	; 59
   14268:	89 23       	and	r24, r25
   1426a:	80 83       	st	Z, r24
   1426c:	87 e0       	ldi	r24, 0x07	; 7
   1426e:	82 b9       	out	0x02, r24	; 2
   14270:	d2 96       	adiw	r26, 0x32	; 50
   14272:	ed 91       	ld	r30, X+
   14274:	fc 91       	ld	r31, X
   14276:	d3 97       	sbiw	r26, 0x33	; 51
   14278:	80 81       	ld	r24, Z
   1427a:	dc 96       	adiw	r26, 0x3c	; 60
   1427c:	9c 91       	ld	r25, X
   1427e:	dc 97       	sbiw	r26, 0x3c	; 60
   14280:	89 23       	and	r24, r25
   14282:	80 83       	st	Z, r24
   14284:	d2 96       	adiw	r26, 0x32	; 50
   14286:	ed 91       	ld	r30, X+
   14288:	fc 91       	ld	r31, X
   1428a:	d3 97       	sbiw	r26, 0x33	; 51
   1428c:	80 81       	ld	r24, Z
   1428e:	d8 96       	adiw	r26, 0x38	; 56
   14290:	9c 91       	ld	r25, X
   14292:	d8 97       	sbiw	r26, 0x38	; 56
   14294:	89 2b       	or	r24, r25
   14296:	80 83       	st	Z, r24
   14298:	d0 96       	adiw	r26, 0x30	; 48
   1429a:	ed 91       	ld	r30, X+
   1429c:	fc 91       	ld	r31, X
   1429e:	d1 97       	sbiw	r26, 0x31	; 49
   142a0:	80 81       	ld	r24, Z
   142a2:	d7 96       	adiw	r26, 0x37	; 55
   142a4:	9c 91       	ld	r25, X
   142a6:	d7 97       	sbiw	r26, 0x37	; 55
   142a8:	89 2b       	or	r24, r25
   142aa:	80 83       	st	Z, r24
   142ac:	42 b9       	out	0x02, r20	; 2
   142ae:	d2 96       	adiw	r26, 0x32	; 50
   142b0:	ed 91       	ld	r30, X+
   142b2:	fc 91       	ld	r31, X
   142b4:	d3 97       	sbiw	r26, 0x33	; 51
   142b6:	80 81       	ld	r24, Z
   142b8:	dc 96       	adiw	r26, 0x3c	; 60
   142ba:	9c 91       	ld	r25, X
   142bc:	dc 97       	sbiw	r26, 0x3c	; 60
   142be:	89 23       	and	r24, r25
   142c0:	80 83       	st	Z, r24
   142c2:	d2 96       	adiw	r26, 0x32	; 50
   142c4:	ed 91       	ld	r30, X+
   142c6:	fc 91       	ld	r31, X
   142c8:	d3 97       	sbiw	r26, 0x33	; 51
   142ca:	80 81       	ld	r24, Z
   142cc:	d8 96       	adiw	r26, 0x38	; 56
   142ce:	9c 91       	ld	r25, X
   142d0:	d8 97       	sbiw	r26, 0x38	; 56
   142d2:	89 2b       	or	r24, r25
   142d4:	80 83       	st	Z, r24
   142d6:	d0 96       	adiw	r26, 0x30	; 48
   142d8:	ed 91       	ld	r30, X+
   142da:	fc 91       	ld	r31, X
   142dc:	d1 97       	sbiw	r26, 0x31	; 49
   142de:	80 81       	ld	r24, Z
   142e0:	db 96       	adiw	r26, 0x3b	; 59
   142e2:	9c 91       	ld	r25, X
   142e4:	db 97       	sbiw	r26, 0x3b	; 59
   142e6:	89 23       	and	r24, r25
   142e8:	80 83       	st	Z, r24
   142ea:	84 e0       	ldi	r24, 0x04	; 4
   142ec:	82 b9       	out	0x02, r24	; 2
   142ee:	d2 96       	adiw	r26, 0x32	; 50
   142f0:	ed 91       	ld	r30, X+
   142f2:	fc 91       	ld	r31, X
   142f4:	d3 97       	sbiw	r26, 0x33	; 51
   142f6:	80 81       	ld	r24, Z
   142f8:	dc 96       	adiw	r26, 0x3c	; 60
   142fa:	9c 91       	ld	r25, X
   142fc:	dc 97       	sbiw	r26, 0x3c	; 60
   142fe:	89 23       	and	r24, r25
   14300:	80 83       	st	Z, r24
   14302:	d2 96       	adiw	r26, 0x32	; 50
   14304:	ed 91       	ld	r30, X+
   14306:	fc 91       	ld	r31, X
   14308:	d3 97       	sbiw	r26, 0x33	; 51
   1430a:	80 81       	ld	r24, Z
   1430c:	d8 96       	adiw	r26, 0x38	; 56
   1430e:	9c 91       	ld	r25, X
   14310:	d8 97       	sbiw	r26, 0x38	; 56
   14312:	89 2b       	or	r24, r25
   14314:	80 83       	st	Z, r24
   14316:	d0 96       	adiw	r26, 0x30	; 48
   14318:	ed 91       	ld	r30, X+
   1431a:	fc 91       	ld	r31, X
   1431c:	d1 97       	sbiw	r26, 0x31	; 49
   1431e:	80 81       	ld	r24, Z
   14320:	d7 96       	adiw	r26, 0x37	; 55
   14322:	9c 91       	ld	r25, X
   14324:	d7 97       	sbiw	r26, 0x37	; 55
   14326:	89 2b       	or	r24, r25
   14328:	80 83       	st	Z, r24
   1432a:	32 b9       	out	0x02, r19	; 2
   1432c:	d2 96       	adiw	r26, 0x32	; 50
   1432e:	ed 91       	ld	r30, X+
   14330:	fc 91       	ld	r31, X
   14332:	d3 97       	sbiw	r26, 0x33	; 51
   14334:	80 81       	ld	r24, Z
   14336:	dc 96       	adiw	r26, 0x3c	; 60
   14338:	9c 91       	ld	r25, X
   1433a:	dc 97       	sbiw	r26, 0x3c	; 60
   1433c:	89 23       	and	r24, r25
   1433e:	80 83       	st	Z, r24
   14340:	d2 96       	adiw	r26, 0x32	; 50
   14342:	ed 91       	ld	r30, X+
   14344:	fc 91       	ld	r31, X
   14346:	d3 97       	sbiw	r26, 0x33	; 51
   14348:	80 81       	ld	r24, Z
   1434a:	d8 96       	adiw	r26, 0x38	; 56
   1434c:	9c 91       	ld	r25, X
   1434e:	d8 97       	sbiw	r26, 0x38	; 56
   14350:	89 2b       	or	r24, r25
   14352:	80 83       	st	Z, r24
   14354:	d0 96       	adiw	r26, 0x30	; 48
   14356:	ed 91       	ld	r30, X+
   14358:	fc 91       	ld	r31, X
   1435a:	d1 97       	sbiw	r26, 0x31	; 49
   1435c:	80 81       	ld	r24, Z
   1435e:	db 96       	adiw	r26, 0x3b	; 59
   14360:	9c 91       	ld	r25, X
   14362:	db 97       	sbiw	r26, 0x3b	; 59
   14364:	89 23       	and	r24, r25
   14366:	80 83       	st	Z, r24
   14368:	85 e0       	ldi	r24, 0x05	; 5
   1436a:	82 b9       	out	0x02, r24	; 2
   1436c:	d2 96       	adiw	r26, 0x32	; 50
   1436e:	ed 91       	ld	r30, X+
   14370:	fc 91       	ld	r31, X
   14372:	d3 97       	sbiw	r26, 0x33	; 51
   14374:	80 81       	ld	r24, Z
   14376:	dc 96       	adiw	r26, 0x3c	; 60
   14378:	9c 91       	ld	r25, X
   1437a:	dc 97       	sbiw	r26, 0x3c	; 60
   1437c:	89 23       	and	r24, r25
   1437e:	80 83       	st	Z, r24
   14380:	d2 96       	adiw	r26, 0x32	; 50
   14382:	ed 91       	ld	r30, X+
   14384:	fc 91       	ld	r31, X
   14386:	d3 97       	sbiw	r26, 0x33	; 51
   14388:	80 81       	ld	r24, Z
   1438a:	d8 96       	adiw	r26, 0x38	; 56
   1438c:	9c 91       	ld	r25, X
   1438e:	d8 97       	sbiw	r26, 0x38	; 56
   14390:	89 2b       	or	r24, r25
   14392:	80 83       	st	Z, r24
   14394:	d0 96       	adiw	r26, 0x30	; 48
   14396:	ed 91       	ld	r30, X+
   14398:	fc 91       	ld	r31, X
   1439a:	d1 97       	sbiw	r26, 0x31	; 49
   1439c:	80 81       	ld	r24, Z
   1439e:	d7 96       	adiw	r26, 0x37	; 55
   143a0:	9c 91       	ld	r25, X
   143a2:	d7 97       	sbiw	r26, 0x37	; 55
   143a4:	89 2b       	or	r24, r25
   143a6:	80 83       	st	Z, r24
   143a8:	22 b9       	out	0x02, r18	; 2
   143aa:	d2 96       	adiw	r26, 0x32	; 50
   143ac:	ed 91       	ld	r30, X+
   143ae:	fc 91       	ld	r31, X
   143b0:	d3 97       	sbiw	r26, 0x33	; 51
   143b2:	80 81       	ld	r24, Z
   143b4:	dc 96       	adiw	r26, 0x3c	; 60
   143b6:	9c 91       	ld	r25, X
   143b8:	dc 97       	sbiw	r26, 0x3c	; 60
   143ba:	89 23       	and	r24, r25
   143bc:	80 83       	st	Z, r24
   143be:	d2 96       	adiw	r26, 0x32	; 50
   143c0:	ed 91       	ld	r30, X+
   143c2:	fc 91       	ld	r31, X
   143c4:	d3 97       	sbiw	r26, 0x33	; 51
   143c6:	80 81       	ld	r24, Z
   143c8:	d8 96       	adiw	r26, 0x38	; 56
   143ca:	9c 91       	ld	r25, X
   143cc:	d8 97       	sbiw	r26, 0x38	; 56
   143ce:	89 2b       	or	r24, r25
   143d0:	80 83       	st	Z, r24
   143d2:	d0 96       	adiw	r26, 0x30	; 48
   143d4:	ed 91       	ld	r30, X+
   143d6:	fc 91       	ld	r31, X
   143d8:	d1 97       	sbiw	r26, 0x31	; 49
   143da:	80 81       	ld	r24, Z
   143dc:	db 96       	adiw	r26, 0x3b	; 59
   143de:	9c 91       	ld	r25, X
   143e0:	db 97       	sbiw	r26, 0x3b	; 59
   143e2:	89 23       	and	r24, r25
   143e4:	80 83       	st	Z, r24
   143e6:	88 e0       	ldi	r24, 0x08	; 8
   143e8:	82 b9       	out	0x02, r24	; 2
   143ea:	d2 96       	adiw	r26, 0x32	; 50
   143ec:	ed 91       	ld	r30, X+
   143ee:	fc 91       	ld	r31, X
   143f0:	d3 97       	sbiw	r26, 0x33	; 51
   143f2:	80 81       	ld	r24, Z
   143f4:	dc 96       	adiw	r26, 0x3c	; 60
   143f6:	9c 91       	ld	r25, X
   143f8:	dc 97       	sbiw	r26, 0x3c	; 60
   143fa:	89 23       	and	r24, r25
   143fc:	80 83       	st	Z, r24
   143fe:	d2 96       	adiw	r26, 0x32	; 50
   14400:	ed 91       	ld	r30, X+
   14402:	fc 91       	ld	r31, X
   14404:	d3 97       	sbiw	r26, 0x33	; 51
   14406:	80 81       	ld	r24, Z
   14408:	d8 96       	adiw	r26, 0x38	; 56
   1440a:	9c 91       	ld	r25, X
   1440c:	d8 97       	sbiw	r26, 0x38	; 56
   1440e:	89 2b       	or	r24, r25
   14410:	80 83       	st	Z, r24
   14412:	d0 96       	adiw	r26, 0x30	; 48
   14414:	ed 91       	ld	r30, X+
   14416:	fc 91       	ld	r31, X
   14418:	d1 97       	sbiw	r26, 0x31	; 49
   1441a:	80 81       	ld	r24, Z
   1441c:	d7 96       	adiw	r26, 0x37	; 55
   1441e:	9c 91       	ld	r25, X
   14420:	d7 97       	sbiw	r26, 0x37	; 55
   14422:	89 2b       	or	r24, r25
   14424:	80 83       	st	Z, r24
   14426:	12 b9       	out	0x02, r17	; 2
   14428:	d2 96       	adiw	r26, 0x32	; 50
   1442a:	ed 91       	ld	r30, X+
   1442c:	fc 91       	ld	r31, X
   1442e:	d3 97       	sbiw	r26, 0x33	; 51
   14430:	80 81       	ld	r24, Z
   14432:	dc 96       	adiw	r26, 0x3c	; 60
   14434:	9c 91       	ld	r25, X
   14436:	dc 97       	sbiw	r26, 0x3c	; 60
   14438:	89 23       	and	r24, r25
   1443a:	80 83       	st	Z, r24
   1443c:	d2 96       	adiw	r26, 0x32	; 50
   1443e:	ed 91       	ld	r30, X+
   14440:	fc 91       	ld	r31, X
   14442:	d3 97       	sbiw	r26, 0x33	; 51
   14444:	80 81       	ld	r24, Z
   14446:	d8 96       	adiw	r26, 0x38	; 56
   14448:	9c 91       	ld	r25, X
   1444a:	d8 97       	sbiw	r26, 0x38	; 56
   1444c:	89 2b       	or	r24, r25
   1444e:	80 83       	st	Z, r24
   14450:	d0 96       	adiw	r26, 0x30	; 48
   14452:	ed 91       	ld	r30, X+
   14454:	fc 91       	ld	r31, X
   14456:	d1 97       	sbiw	r26, 0x31	; 49
   14458:	80 81       	ld	r24, Z
   1445a:	db 96       	adiw	r26, 0x3b	; 59
   1445c:	9c 91       	ld	r25, X
   1445e:	db 97       	sbiw	r26, 0x3b	; 59
   14460:	89 23       	and	r24, r25
   14462:	80 83       	st	Z, r24
   14464:	89 e0       	ldi	r24, 0x09	; 9
   14466:	82 b9       	out	0x02, r24	; 2
   14468:	d2 96       	adiw	r26, 0x32	; 50
   1446a:	ed 91       	ld	r30, X+
   1446c:	fc 91       	ld	r31, X
   1446e:	d3 97       	sbiw	r26, 0x33	; 51
   14470:	80 81       	ld	r24, Z
   14472:	dc 96       	adiw	r26, 0x3c	; 60
   14474:	9c 91       	ld	r25, X
   14476:	dc 97       	sbiw	r26, 0x3c	; 60
   14478:	89 23       	and	r24, r25
   1447a:	80 83       	st	Z, r24
   1447c:	d2 96       	adiw	r26, 0x32	; 50
   1447e:	ed 91       	ld	r30, X+
   14480:	fc 91       	ld	r31, X
   14482:	d3 97       	sbiw	r26, 0x33	; 51
   14484:	80 81       	ld	r24, Z
   14486:	d8 96       	adiw	r26, 0x38	; 56
   14488:	9c 91       	ld	r25, X
   1448a:	d8 97       	sbiw	r26, 0x38	; 56
   1448c:	89 2b       	or	r24, r25
   1448e:	80 83       	st	Z, r24
   14490:	d0 96       	adiw	r26, 0x30	; 48
   14492:	ed 91       	ld	r30, X+
   14494:	fc 91       	ld	r31, X
   14496:	d1 97       	sbiw	r26, 0x31	; 49
   14498:	80 81       	ld	r24, Z
   1449a:	d7 96       	adiw	r26, 0x37	; 55
   1449c:	9c 91       	ld	r25, X
   1449e:	d7 97       	sbiw	r26, 0x37	; 55
   144a0:	89 2b       	or	r24, r25
   144a2:	80 83       	st	Z, r24
   144a4:	02 b9       	out	0x02, r16	; 2
   144a6:	b9 cd       	rjmp	.-1166   	; 0x1401a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
   144a8:	7d 83       	std	Y+5, r23	; 0x05
   144aa:	6e 83       	std	Y+6, r22	; 0x06
   144ac:	3f 83       	std	Y+7, r19	; 0x07
   144ae:	28 87       	std	Y+8, r18	; 0x08
   144b0:	59 83       	std	Y+1, r21	; 0x01
   144b2:	4a 83       	std	Y+2, r20	; 0x02
   144b4:	1b 83       	std	Y+3, r17	; 0x03
   144b6:	0c 83       	std	Y+4, r16	; 0x04
   144b8:	f7 01       	movw	r30, r14
   144ba:	64 8d       	ldd	r22, Z+28	; 0x1c
   144bc:	75 8d       	ldd	r23, Z+29	; 0x1d
   144be:	24 e0       	ldi	r18, 0x04	; 4
   144c0:	ae 01       	movw	r20, r28
   144c2:	4b 5f       	subi	r20, 0xFB	; 251
   144c4:	5f 4f       	sbci	r21, 0xFF	; 255
   144c6:	c7 01       	movw	r24, r14
   144c8:	0e 94 88 9c 	call	0x13910	; 0x13910 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   144cc:	d7 01       	movw	r26, r14
   144ce:	5e 96       	adiw	r26, 0x1e	; 30
   144d0:	6d 91       	ld	r22, X+
   144d2:	7c 91       	ld	r23, X
   144d4:	24 e0       	ldi	r18, 0x04	; 4
   144d6:	ae 01       	movw	r20, r28
   144d8:	4f 5f       	subi	r20, 0xFF	; 255
   144da:	5f 4f       	sbci	r21, 0xFF	; 255
   144dc:	c7 01       	movw	r24, r14
   144de:	0e 94 88 9c 	call	0x13910	; 0x13910 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   144e2:	ae cd       	rjmp	.-1188   	; 0x14040 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

000144e4 <LCDWIKI_KBV::Set_LR()>:
_ZN11LCDWIKI_KBV6Set_LREv():
   144e4:	fc 01       	movw	r30, r24
   144e6:	a6 a5       	ldd	r26, Z+46	; 0x2e
   144e8:	b7 a5       	ldd	r27, Z+47	; 0x2f
   144ea:	8c 91       	ld	r24, X
   144ec:	92 ad       	ldd	r25, Z+58	; 0x3a
   144ee:	89 23       	and	r24, r25
   144f0:	8c 93       	st	X, r24
   144f2:	a0 a9       	ldd	r26, Z+48	; 0x30
   144f4:	b1 a9       	ldd	r27, Z+49	; 0x31
   144f6:	8c 91       	ld	r24, X
   144f8:	93 ad       	ldd	r25, Z+59	; 0x3b
   144fa:	89 23       	and	r24, r25
   144fc:	8c 93       	st	X, r24
   144fe:	84 e0       	ldi	r24, 0x04	; 4
   14500:	82 b9       	out	0x02, r24	; 2
   14502:	a2 a9       	ldd	r26, Z+50	; 0x32
   14504:	b3 a9       	ldd	r27, Z+51	; 0x33
   14506:	8c 91       	ld	r24, X
   14508:	94 ad       	ldd	r25, Z+60	; 0x3c
   1450a:	89 23       	and	r24, r25
   1450c:	8c 93       	st	X, r24
   1450e:	a2 a9       	ldd	r26, Z+50	; 0x32
   14510:	b3 a9       	ldd	r27, Z+51	; 0x33
   14512:	8c 91       	ld	r24, X
   14514:	90 ad       	ldd	r25, Z+56	; 0x38
   14516:	89 2b       	or	r24, r25
   14518:	8c 93       	st	X, r24
   1451a:	a0 a9       	ldd	r26, Z+48	; 0x30
   1451c:	b1 a9       	ldd	r27, Z+49	; 0x31
   1451e:	8c 91       	ld	r24, X
   14520:	97 a9       	ldd	r25, Z+55	; 0x37
   14522:	89 2b       	or	r24, r25
   14524:	8c 93       	st	X, r24
   14526:	82 89       	ldd	r24, Z+18	; 0x12
   14528:	93 89       	ldd	r25, Z+19	; 0x13
   1452a:	01 97       	sbiw	r24, 0x01	; 1
   1452c:	92 b9       	out	0x02, r25	; 2
   1452e:	a2 a9       	ldd	r26, Z+50	; 0x32
   14530:	b3 a9       	ldd	r27, Z+51	; 0x33
   14532:	8c 91       	ld	r24, X
   14534:	94 ad       	ldd	r25, Z+60	; 0x3c
   14536:	89 23       	and	r24, r25
   14538:	8c 93       	st	X, r24
   1453a:	a2 a9       	ldd	r26, Z+50	; 0x32
   1453c:	b3 a9       	ldd	r27, Z+51	; 0x33
   1453e:	8c 91       	ld	r24, X
   14540:	90 ad       	ldd	r25, Z+56	; 0x38
   14542:	89 2b       	or	r24, r25
   14544:	8c 93       	st	X, r24
   14546:	a0 a9       	ldd	r26, Z+48	; 0x30
   14548:	b1 a9       	ldd	r27, Z+49	; 0x31
   1454a:	8c 91       	ld	r24, X
   1454c:	93 ad       	ldd	r25, Z+59	; 0x3b
   1454e:	89 23       	and	r24, r25
   14550:	8c 93       	st	X, r24
   14552:	85 e0       	ldi	r24, 0x05	; 5
   14554:	82 b9       	out	0x02, r24	; 2
   14556:	a2 a9       	ldd	r26, Z+50	; 0x32
   14558:	b3 a9       	ldd	r27, Z+51	; 0x33
   1455a:	8c 91       	ld	r24, X
   1455c:	94 ad       	ldd	r25, Z+60	; 0x3c
   1455e:	89 23       	and	r24, r25
   14560:	8c 93       	st	X, r24
   14562:	a2 a9       	ldd	r26, Z+50	; 0x32
   14564:	b3 a9       	ldd	r27, Z+51	; 0x33
   14566:	8c 91       	ld	r24, X
   14568:	90 ad       	ldd	r25, Z+56	; 0x38
   1456a:	89 2b       	or	r24, r25
   1456c:	8c 93       	st	X, r24
   1456e:	a0 a9       	ldd	r26, Z+48	; 0x30
   14570:	b1 a9       	ldd	r27, Z+49	; 0x31
   14572:	8c 91       	ld	r24, X
   14574:	97 a9       	ldd	r25, Z+55	; 0x37
   14576:	89 2b       	or	r24, r25
   14578:	8c 93       	st	X, r24
   1457a:	82 89       	ldd	r24, Z+18	; 0x12
   1457c:	81 50       	subi	r24, 0x01	; 1
   1457e:	82 b9       	out	0x02, r24	; 2
   14580:	a2 a9       	ldd	r26, Z+50	; 0x32
   14582:	b3 a9       	ldd	r27, Z+51	; 0x33
   14584:	8c 91       	ld	r24, X
   14586:	94 ad       	ldd	r25, Z+60	; 0x3c
   14588:	89 23       	and	r24, r25
   1458a:	8c 93       	st	X, r24
   1458c:	a2 a9       	ldd	r26, Z+50	; 0x32
   1458e:	b3 a9       	ldd	r27, Z+51	; 0x33
   14590:	8c 91       	ld	r24, X
   14592:	90 ad       	ldd	r25, Z+56	; 0x38
   14594:	89 2b       	or	r24, r25
   14596:	8c 93       	st	X, r24
   14598:	a0 a9       	ldd	r26, Z+48	; 0x30
   1459a:	b1 a9       	ldd	r27, Z+49	; 0x31
   1459c:	8c 91       	ld	r24, X
   1459e:	93 ad       	ldd	r25, Z+59	; 0x3b
   145a0:	89 23       	and	r24, r25
   145a2:	8c 93       	st	X, r24
   145a4:	88 e0       	ldi	r24, 0x08	; 8
   145a6:	82 b9       	out	0x02, r24	; 2
   145a8:	a2 a9       	ldd	r26, Z+50	; 0x32
   145aa:	b3 a9       	ldd	r27, Z+51	; 0x33
   145ac:	8c 91       	ld	r24, X
   145ae:	94 ad       	ldd	r25, Z+60	; 0x3c
   145b0:	89 23       	and	r24, r25
   145b2:	8c 93       	st	X, r24
   145b4:	a2 a9       	ldd	r26, Z+50	; 0x32
   145b6:	b3 a9       	ldd	r27, Z+51	; 0x33
   145b8:	8c 91       	ld	r24, X
   145ba:	90 ad       	ldd	r25, Z+56	; 0x38
   145bc:	89 2b       	or	r24, r25
   145be:	8c 93       	st	X, r24
   145c0:	a0 a9       	ldd	r26, Z+48	; 0x30
   145c2:	b1 a9       	ldd	r27, Z+49	; 0x31
   145c4:	8c 91       	ld	r24, X
   145c6:	97 a9       	ldd	r25, Z+55	; 0x37
   145c8:	89 2b       	or	r24, r25
   145ca:	8c 93       	st	X, r24
   145cc:	84 89       	ldd	r24, Z+20	; 0x14
   145ce:	95 89       	ldd	r25, Z+21	; 0x15
   145d0:	01 97       	sbiw	r24, 0x01	; 1
   145d2:	92 b9       	out	0x02, r25	; 2
   145d4:	a2 a9       	ldd	r26, Z+50	; 0x32
   145d6:	b3 a9       	ldd	r27, Z+51	; 0x33
   145d8:	8c 91       	ld	r24, X
   145da:	94 ad       	ldd	r25, Z+60	; 0x3c
   145dc:	89 23       	and	r24, r25
   145de:	8c 93       	st	X, r24
   145e0:	a2 a9       	ldd	r26, Z+50	; 0x32
   145e2:	b3 a9       	ldd	r27, Z+51	; 0x33
   145e4:	8c 91       	ld	r24, X
   145e6:	90 ad       	ldd	r25, Z+56	; 0x38
   145e8:	89 2b       	or	r24, r25
   145ea:	8c 93       	st	X, r24
   145ec:	a0 a9       	ldd	r26, Z+48	; 0x30
   145ee:	b1 a9       	ldd	r27, Z+49	; 0x31
   145f0:	8c 91       	ld	r24, X
   145f2:	93 ad       	ldd	r25, Z+59	; 0x3b
   145f4:	89 23       	and	r24, r25
   145f6:	8c 93       	st	X, r24
   145f8:	89 e0       	ldi	r24, 0x09	; 9
   145fa:	82 b9       	out	0x02, r24	; 2
   145fc:	a2 a9       	ldd	r26, Z+50	; 0x32
   145fe:	b3 a9       	ldd	r27, Z+51	; 0x33
   14600:	8c 91       	ld	r24, X
   14602:	94 ad       	ldd	r25, Z+60	; 0x3c
   14604:	89 23       	and	r24, r25
   14606:	8c 93       	st	X, r24
   14608:	a2 a9       	ldd	r26, Z+50	; 0x32
   1460a:	b3 a9       	ldd	r27, Z+51	; 0x33
   1460c:	8c 91       	ld	r24, X
   1460e:	90 ad       	ldd	r25, Z+56	; 0x38
   14610:	89 2b       	or	r24, r25
   14612:	8c 93       	st	X, r24
   14614:	a0 a9       	ldd	r26, Z+48	; 0x30
   14616:	b1 a9       	ldd	r27, Z+49	; 0x31
   14618:	8c 91       	ld	r24, X
   1461a:	97 a9       	ldd	r25, Z+55	; 0x37
   1461c:	89 2b       	or	r24, r25
   1461e:	8c 93       	st	X, r24
   14620:	84 89       	ldd	r24, Z+20	; 0x14
   14622:	81 50       	subi	r24, 0x01	; 1
   14624:	82 b9       	out	0x02, r24	; 2
   14626:	a2 a9       	ldd	r26, Z+50	; 0x32
   14628:	b3 a9       	ldd	r27, Z+51	; 0x33
   1462a:	8c 91       	ld	r24, X
   1462c:	94 ad       	ldd	r25, Z+60	; 0x3c
   1462e:	89 23       	and	r24, r25
   14630:	8c 93       	st	X, r24
   14632:	a2 a9       	ldd	r26, Z+50	; 0x32
   14634:	b3 a9       	ldd	r27, Z+51	; 0x33
   14636:	8c 91       	ld	r24, X
   14638:	90 ad       	ldd	r25, Z+56	; 0x38
   1463a:	89 2b       	or	r24, r25
   1463c:	8c 93       	st	X, r24
   1463e:	a6 a5       	ldd	r26, Z+46	; 0x2e
   14640:	b7 a5       	ldd	r27, Z+47	; 0x2f
   14642:	8c 91       	ld	r24, X
   14644:	96 a9       	ldd	r25, Z+54	; 0x36
   14646:	89 2b       	or	r24, r25
   14648:	8c 93       	st	X, r24
   1464a:	08 95       	ret

0001464c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
   1464c:	4f 92       	push	r4
   1464e:	5f 92       	push	r5
   14650:	6f 92       	push	r6
   14652:	7f 92       	push	r7
   14654:	8f 92       	push	r8
   14656:	9f 92       	push	r9
   14658:	af 92       	push	r10
   1465a:	bf 92       	push	r11
   1465c:	cf 92       	push	r12
   1465e:	df 92       	push	r13
   14660:	ef 92       	push	r14
   14662:	ff 92       	push	r15
   14664:	0f 93       	push	r16
   14666:	1f 93       	push	r17
   14668:	cf 93       	push	r28
   1466a:	df 93       	push	r29
   1466c:	ec 01       	movw	r28, r24
   1466e:	5a 01       	movw	r10, r20
   14670:	27 01       	movw	r4, r14
   14672:	37 ff       	sbrs	r19, 7
   14674:	05 c0       	rjmp	.+10     	; 0x14680 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
   14676:	62 0f       	add	r22, r18
   14678:	73 1f       	adc	r23, r19
   1467a:	31 95       	neg	r19
   1467c:	21 95       	neg	r18
   1467e:	31 09       	sbc	r19, r1
   14680:	7b 01       	movw	r14, r22
   14682:	e2 0e       	add	r14, r18
   14684:	f3 1e       	adc	r15, r19
   14686:	6b 01       	movw	r12, r22
   14688:	77 ff       	sbrs	r23, 7
   1468a:	02 c0       	rjmp	.+4      	; 0x14690 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
   1468c:	d1 2c       	mov	r13, r1
   1468e:	c1 2c       	mov	r12, r1
   14690:	e8 81       	ld	r30, Y
   14692:	f9 81       	ldd	r31, Y+1	; 0x01
   14694:	06 84       	ldd	r0, Z+14	; 0x0e
   14696:	f7 85       	ldd	r31, Z+15	; 0x0f
   14698:	e0 2d       	mov	r30, r0
   1469a:	ce 01       	movw	r24, r28
   1469c:	19 95       	eicall
   1469e:	8e 15       	cp	r24, r14
   146a0:	9f 05       	cpc	r25, r15
   146a2:	44 f4       	brge	.+16     	; 0x146b4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
   146a4:	e8 81       	ld	r30, Y
   146a6:	f9 81       	ldd	r31, Y+1	; 0x01
   146a8:	06 84       	ldd	r0, Z+14	; 0x0e
   146aa:	f7 85       	ldd	r31, Z+15	; 0x0f
   146ac:	e0 2d       	mov	r30, r0
   146ae:	ce 01       	movw	r24, r28
   146b0:	19 95       	eicall
   146b2:	7c 01       	movw	r14, r24
   146b4:	47 01       	movw	r8, r14
   146b6:	8c 18       	sub	r8, r12
   146b8:	9d 08       	sbc	r9, r13
   146ba:	17 ff       	sbrs	r17, 7
   146bc:	05 c0       	rjmp	.+10     	; 0x146c8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
   146be:	a0 0e       	add	r10, r16
   146c0:	b1 1e       	adc	r11, r17
   146c2:	11 95       	neg	r17
   146c4:	01 95       	neg	r16
   146c6:	11 09       	sbc	r17, r1
   146c8:	0a 0d       	add	r16, r10
   146ca:	1b 1d       	adc	r17, r11
   146cc:	b7 fe       	sbrs	r11, 7
   146ce:	02 c0       	rjmp	.+4      	; 0x146d4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
   146d0:	b1 2c       	mov	r11, r1
   146d2:	a1 2c       	mov	r10, r1
   146d4:	e8 81       	ld	r30, Y
   146d6:	f9 81       	ldd	r31, Y+1	; 0x01
   146d8:	04 84       	ldd	r0, Z+12	; 0x0c
   146da:	f5 85       	ldd	r31, Z+13	; 0x0d
   146dc:	e0 2d       	mov	r30, r0
   146de:	ce 01       	movw	r24, r28
   146e0:	19 95       	eicall
   146e2:	80 17       	cp	r24, r16
   146e4:	91 07       	cpc	r25, r17
   146e6:	44 f4       	brge	.+16     	; 0x146f8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
   146e8:	e8 81       	ld	r30, Y
   146ea:	f9 81       	ldd	r31, Y+1	; 0x01
   146ec:	04 84       	ldd	r0, Z+12	; 0x0c
   146ee:	f5 85       	ldd	r31, Z+13	; 0x0d
   146f0:	e0 2d       	mov	r30, r0
   146f2:	ce 01       	movw	r24, r28
   146f4:	19 95       	eicall
   146f6:	8c 01       	movw	r16, r24
   146f8:	38 01       	movw	r6, r16
   146fa:	6a 18       	sub	r6, r10
   146fc:	7b 08       	sbc	r7, r11
   146fe:	01 50       	subi	r16, 0x01	; 1
   14700:	11 09       	sbc	r17, r1
   14702:	97 01       	movw	r18, r14
   14704:	21 50       	subi	r18, 0x01	; 1
   14706:	31 09       	sbc	r19, r1
   14708:	e8 81       	ld	r30, Y
   1470a:	f9 81       	ldd	r31, Y+1	; 0x01
   1470c:	06 80       	ldd	r0, Z+6	; 0x06
   1470e:	f7 81       	ldd	r31, Z+7	; 0x07
   14710:	e0 2d       	mov	r30, r0
   14712:	a5 01       	movw	r20, r10
   14714:	b6 01       	movw	r22, r12
   14716:	ce 01       	movw	r24, r28
   14718:	19 95       	eicall
   1471a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1471c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1471e:	80 81       	ld	r24, Z
   14720:	9a ad       	ldd	r25, Y+58	; 0x3a
   14722:	89 23       	and	r24, r25
   14724:	80 83       	st	Z, r24
   14726:	88 8d       	ldd	r24, Y+24	; 0x18
   14728:	99 8d       	ldd	r25, Y+25	; 0x19
   1472a:	89 2b       	or	r24, r25
   1472c:	c9 f4       	brne	.+50     	; 0x14760 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
   1472e:	e8 a9       	ldd	r30, Y+48	; 0x30
   14730:	f9 a9       	ldd	r31, Y+49	; 0x31
   14732:	80 81       	ld	r24, Z
   14734:	9b ad       	ldd	r25, Y+59	; 0x3b
   14736:	89 23       	and	r24, r25
   14738:	80 83       	st	Z, r24
   1473a:	12 b8       	out	0x02, r1	; 2
   1473c:	ea a9       	ldd	r30, Y+50	; 0x32
   1473e:	fb a9       	ldd	r31, Y+51	; 0x33
   14740:	80 81       	ld	r24, Z
   14742:	9c ad       	ldd	r25, Y+60	; 0x3c
   14744:	89 23       	and	r24, r25
   14746:	80 83       	st	Z, r24
   14748:	ea a9       	ldd	r30, Y+50	; 0x32
   1474a:	fb a9       	ldd	r31, Y+51	; 0x33
   1474c:	80 81       	ld	r24, Z
   1474e:	98 ad       	ldd	r25, Y+56	; 0x38
   14750:	89 2b       	or	r24, r25
   14752:	80 83       	st	Z, r24
   14754:	e8 a9       	ldd	r30, Y+48	; 0x30
   14756:	f9 a9       	ldd	r31, Y+49	; 0x31
   14758:	80 81       	ld	r24, Z
   1475a:	9f a9       	ldd	r25, Y+55	; 0x37
   1475c:	89 2b       	or	r24, r25
   1475e:	80 83       	st	Z, r24
   14760:	e8 a9       	ldd	r30, Y+48	; 0x30
   14762:	f9 a9       	ldd	r31, Y+49	; 0x31
   14764:	80 81       	ld	r24, Z
   14766:	9b ad       	ldd	r25, Y+59	; 0x3b
   14768:	89 23       	and	r24, r25
   1476a:	80 83       	st	Z, r24
   1476c:	88 a1       	ldd	r24, Y+32	; 0x20
   1476e:	82 b9       	out	0x02, r24	; 2
   14770:	ea a9       	ldd	r30, Y+50	; 0x32
   14772:	fb a9       	ldd	r31, Y+51	; 0x33
   14774:	80 81       	ld	r24, Z
   14776:	9c ad       	ldd	r25, Y+60	; 0x3c
   14778:	89 23       	and	r24, r25
   1477a:	80 83       	st	Z, r24
   1477c:	ea a9       	ldd	r30, Y+50	; 0x32
   1477e:	fb a9       	ldd	r31, Y+51	; 0x33
   14780:	80 81       	ld	r24, Z
   14782:	98 ad       	ldd	r25, Y+56	; 0x38
   14784:	89 2b       	or	r24, r25
   14786:	80 83       	st	Z, r24
   14788:	e8 a9       	ldd	r30, Y+48	; 0x30
   1478a:	f9 a9       	ldd	r31, Y+49	; 0x31
   1478c:	80 81       	ld	r24, Z
   1478e:	9f a9       	ldd	r25, Y+55	; 0x37
   14790:	89 2b       	or	r24, r25
   14792:	80 83       	st	Z, r24
   14794:	86 14       	cp	r8, r6
   14796:	97 04       	cpc	r9, r7
   14798:	2c f0       	brlt	.+10     	; 0x147a4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
   1479a:	96 2d       	mov	r25, r6
   1479c:	87 2d       	mov	r24, r7
   1479e:	34 01       	movw	r6, r8
   147a0:	89 2e       	mov	r8, r25
   147a2:	98 2e       	mov	r9, r24
   147a4:	18 14       	cp	r1, r8
   147a6:	19 04       	cpc	r1, r9
   147a8:	0c f5       	brge	.+66     	; 0x147ec <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
   147aa:	c3 01       	movw	r24, r6
   147ac:	52 b8       	out	0x02, r5	; 2
   147ae:	ea a9       	ldd	r30, Y+50	; 0x32
   147b0:	fb a9       	ldd	r31, Y+51	; 0x33
   147b2:	20 81       	ld	r18, Z
   147b4:	3c ad       	ldd	r19, Y+60	; 0x3c
   147b6:	23 23       	and	r18, r19
   147b8:	20 83       	st	Z, r18
   147ba:	ea a9       	ldd	r30, Y+50	; 0x32
   147bc:	fb a9       	ldd	r31, Y+51	; 0x33
   147be:	20 81       	ld	r18, Z
   147c0:	38 ad       	ldd	r19, Y+56	; 0x38
   147c2:	23 2b       	or	r18, r19
   147c4:	20 83       	st	Z, r18
   147c6:	42 b8       	out	0x02, r4	; 2
   147c8:	ea a9       	ldd	r30, Y+50	; 0x32
   147ca:	fb a9       	ldd	r31, Y+51	; 0x33
   147cc:	20 81       	ld	r18, Z
   147ce:	3c ad       	ldd	r19, Y+60	; 0x3c
   147d0:	23 23       	and	r18, r19
   147d2:	20 83       	st	Z, r18
   147d4:	ea a9       	ldd	r30, Y+50	; 0x32
   147d6:	fb a9       	ldd	r31, Y+51	; 0x33
   147d8:	20 81       	ld	r18, Z
   147da:	38 ad       	ldd	r19, Y+56	; 0x38
   147dc:	23 2b       	or	r18, r19
   147de:	20 83       	st	Z, r18
   147e0:	01 97       	sbiw	r24, 0x01	; 1
   147e2:	21 f7       	brne	.-56     	; 0x147ac <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
   147e4:	81 e0       	ldi	r24, 0x01	; 1
   147e6:	88 1a       	sub	r8, r24
   147e8:	91 08       	sbc	r9, r1
   147ea:	dc cf       	rjmp	.-72     	; 0x147a4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
   147ec:	88 8d       	ldd	r24, Y+24	; 0x18
   147ee:	99 8d       	ldd	r25, Y+25	; 0x19
   147f0:	00 97       	sbiw	r24, 0x00	; 0
   147f2:	51 f5       	brne	.+84     	; 0x14848 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
   147f4:	0c 89       	ldd	r16, Y+20	; 0x14
   147f6:	1d 89       	ldd	r17, Y+21	; 0x15
   147f8:	01 50       	subi	r16, 0x01	; 1
   147fa:	11 09       	sbc	r17, r1
   147fc:	2a 89       	ldd	r18, Y+18	; 0x12
   147fe:	3b 89       	ldd	r19, Y+19	; 0x13
   14800:	21 50       	subi	r18, 0x01	; 1
   14802:	31 09       	sbc	r19, r1
   14804:	e8 81       	ld	r30, Y
   14806:	f9 81       	ldd	r31, Y+1	; 0x01
   14808:	06 80       	ldd	r0, Z+6	; 0x06
   1480a:	f7 81       	ldd	r31, Z+7	; 0x07
   1480c:	e0 2d       	mov	r30, r0
   1480e:	50 e0       	ldi	r21, 0x00	; 0
   14810:	40 e0       	ldi	r20, 0x00	; 0
   14812:	70 e0       	ldi	r23, 0x00	; 0
   14814:	60 e0       	ldi	r22, 0x00	; 0
   14816:	ce 01       	movw	r24, r28
   14818:	19 95       	eicall
   1481a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1481c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1481e:	80 81       	ld	r24, Z
   14820:	9e a9       	ldd	r25, Y+54	; 0x36
   14822:	89 2b       	or	r24, r25
   14824:	80 83       	st	Z, r24
   14826:	df 91       	pop	r29
   14828:	cf 91       	pop	r28
   1482a:	1f 91       	pop	r17
   1482c:	0f 91       	pop	r16
   1482e:	ff 90       	pop	r15
   14830:	ef 90       	pop	r14
   14832:	df 90       	pop	r13
   14834:	cf 90       	pop	r12
   14836:	bf 90       	pop	r11
   14838:	af 90       	pop	r10
   1483a:	9f 90       	pop	r9
   1483c:	8f 90       	pop	r8
   1483e:	7f 90       	pop	r7
   14840:	6f 90       	pop	r6
   14842:	5f 90       	pop	r5
   14844:	4f 90       	pop	r4
   14846:	08 95       	ret
   14848:	01 97       	sbiw	r24, 0x01	; 1
   1484a:	39 f7       	brne	.-50     	; 0x1481a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
   1484c:	ce 01       	movw	r24, r28
   1484e:	0e 94 72 a2 	call	0x144e4	; 0x144e4 <LCDWIKI_KBV::Set_LR()>
   14852:	e3 cf       	rjmp	.-58     	; 0x1481a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

00014854 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>:
_ZN11LCDWIKI_KBV8Read_RegEja():
   14854:	1f 93       	push	r17
   14856:	cf 93       	push	r28
   14858:	df 93       	push	r29
   1485a:	ec 01       	movw	r28, r24
   1485c:	14 2f       	mov	r17, r20
   1485e:	ee a5       	ldd	r30, Y+46	; 0x2e
   14860:	ff a5       	ldd	r31, Y+47	; 0x2f
   14862:	80 81       	ld	r24, Z
   14864:	9a ad       	ldd	r25, Y+58	; 0x3a
   14866:	89 23       	and	r24, r25
   14868:	80 83       	st	Z, r24
   1486a:	e8 a9       	ldd	r30, Y+48	; 0x30
   1486c:	f9 a9       	ldd	r31, Y+49	; 0x31
   1486e:	80 81       	ld	r24, Z
   14870:	9b ad       	ldd	r25, Y+59	; 0x3b
   14872:	89 23       	and	r24, r25
   14874:	80 83       	st	Z, r24
   14876:	72 b9       	out	0x02, r23	; 2
   14878:	ea a9       	ldd	r30, Y+50	; 0x32
   1487a:	fb a9       	ldd	r31, Y+51	; 0x33
   1487c:	80 81       	ld	r24, Z
   1487e:	9c ad       	ldd	r25, Y+60	; 0x3c
   14880:	89 23       	and	r24, r25
   14882:	80 83       	st	Z, r24
   14884:	ea a9       	ldd	r30, Y+50	; 0x32
   14886:	fb a9       	ldd	r31, Y+51	; 0x33
   14888:	80 81       	ld	r24, Z
   1488a:	98 ad       	ldd	r25, Y+56	; 0x38
   1488c:	89 2b       	or	r24, r25
   1488e:	80 83       	st	Z, r24
   14890:	62 b9       	out	0x02, r22	; 2
   14892:	ea a9       	ldd	r30, Y+50	; 0x32
   14894:	fb a9       	ldd	r31, Y+51	; 0x33
   14896:	80 81       	ld	r24, Z
   14898:	9c ad       	ldd	r25, Y+60	; 0x3c
   1489a:	89 23       	and	r24, r25
   1489c:	80 83       	st	Z, r24
   1489e:	ea a9       	ldd	r30, Y+50	; 0x32
   148a0:	fb a9       	ldd	r31, Y+51	; 0x33
   148a2:	80 81       	ld	r24, Z
   148a4:	98 ad       	ldd	r25, Y+56	; 0x38
   148a6:	89 2b       	or	r24, r25
   148a8:	80 83       	st	Z, r24
   148aa:	e8 a9       	ldd	r30, Y+48	; 0x30
   148ac:	f9 a9       	ldd	r31, Y+49	; 0x31
   148ae:	80 81       	ld	r24, Z
   148b0:	9f a9       	ldd	r25, Y+55	; 0x37
   148b2:	89 2b       	or	r24, r25
   148b4:	80 83       	st	Z, r24
   148b6:	81 b1       	in	r24, 0x01	; 1
   148b8:	11 b8       	out	0x01, r1	; 1
   148ba:	61 e0       	ldi	r22, 0x01	; 1
   148bc:	70 e0       	ldi	r23, 0x00	; 0
   148be:	80 e0       	ldi	r24, 0x00	; 0
   148c0:	90 e0       	ldi	r25, 0x00	; 0
   148c2:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
   148c6:	ec a9       	ldd	r30, Y+52	; 0x34
   148c8:	fd a9       	ldd	r31, Y+53	; 0x35
   148ca:	80 81       	ld	r24, Z
   148cc:	9d ad       	ldd	r25, Y+61	; 0x3d
   148ce:	89 23       	and	r24, r25
   148d0:	80 83       	st	Z, r24
   148d2:	20 b1       	in	r18, 0x00	; 0
   148d4:	ec a9       	ldd	r30, Y+52	; 0x34
   148d6:	fd a9       	ldd	r31, Y+53	; 0x35
   148d8:	90 81       	ld	r25, Z
   148da:	89 ad       	ldd	r24, Y+57	; 0x39
   148dc:	98 2b       	or	r25, r24
   148de:	90 83       	st	Z, r25
   148e0:	ec a9       	ldd	r30, Y+52	; 0x34
   148e2:	fd a9       	ldd	r31, Y+53	; 0x35
   148e4:	90 81       	ld	r25, Z
   148e6:	8d ad       	ldd	r24, Y+61	; 0x3d
   148e8:	98 23       	and	r25, r24
   148ea:	90 83       	st	Z, r25
   148ec:	80 b1       	in	r24, 0x00	; 0
   148ee:	ec a9       	ldd	r30, Y+52	; 0x34
   148f0:	fd a9       	ldd	r31, Y+53	; 0x35
   148f2:	90 81       	ld	r25, Z
   148f4:	39 ad       	ldd	r19, Y+57	; 0x39
   148f6:	93 2b       	or	r25, r19
   148f8:	90 83       	st	Z, r25
   148fa:	11 50       	subi	r17, 0x01	; 1
   148fc:	17 ff       	sbrs	r17, 7
   148fe:	e3 cf       	rjmp	.-58     	; 0x148c6 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)+0x72>
   14900:	ee a5       	ldd	r30, Y+46	; 0x2e
   14902:	ff a5       	ldd	r31, Y+47	; 0x2f
   14904:	90 81       	ld	r25, Z
   14906:	3e a9       	ldd	r19, Y+54	; 0x36
   14908:	93 2b       	or	r25, r19
   1490a:	90 83       	st	Z, r25
   1490c:	91 b1       	in	r25, 0x01	; 1
   1490e:	9f ef       	ldi	r25, 0xFF	; 255
   14910:	91 b9       	out	0x01, r25	; 1
   14912:	92 2f       	mov	r25, r18
   14914:	df 91       	pop	r29
   14916:	cf 91       	pop	r28
   14918:	1f 91       	pop	r17
   1491a:	08 95       	ret

0001491c <LCDWIKI_KBV::Read_ID()>:
_ZN11LCDWIKI_KBV7Read_IDEv():
   1491c:	0f 93       	push	r16
   1491e:	1f 93       	push	r17
   14920:	cf 93       	push	r28
   14922:	df 93       	push	r29
   14924:	00 d0       	rcall	.+0      	; 0x14926 <LCDWIKI_KBV::Read_ID()+0xa>
   14926:	cd b7       	in	r28, 0x3d	; 61
   14928:	de b7       	in	r29, 0x3e	; 62
   1492a:	8c 01       	movw	r16, r24
   1492c:	40 e0       	ldi	r20, 0x00	; 0
   1492e:	64 e0       	ldi	r22, 0x04	; 4
   14930:	70 e0       	ldi	r23, 0x00	; 0
   14932:	0e 94 2a a4 	call	0x14854	; 0x14854 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   14936:	89 2b       	or	r24, r25
   14938:	39 f5       	brne	.+78     	; 0x14988 <LCDWIKI_KBV::Read_ID()+0x6c>
   1493a:	41 e0       	ldi	r20, 0x01	; 1
   1493c:	64 e0       	ldi	r22, 0x04	; 4
   1493e:	70 e0       	ldi	r23, 0x00	; 0
   14940:	c8 01       	movw	r24, r16
   14942:	0e 94 2a a4 	call	0x14854	; 0x14854 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   14946:	81 15       	cp	r24, r1
   14948:	90 48       	sbci	r25, 0x80	; 128
   1494a:	f1 f4       	brne	.+60     	; 0x14988 <LCDWIKI_KBV::Read_ID()+0x6c>
   1494c:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <LM75_Compatible_Registers+0x4>
   14950:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <LM75_Compatible_Registers+0x5>
   14954:	a0 91 8c 02 	lds	r26, 0x028C	; 0x80028c <LM75_Compatible_Registers+0x6>
   14958:	89 83       	std	Y+1, r24	; 0x01
   1495a:	9a 83       	std	Y+2, r25	; 0x02
   1495c:	ab 83       	std	Y+3, r26	; 0x03
   1495e:	23 e0       	ldi	r18, 0x03	; 3
   14960:	ae 01       	movw	r20, r28
   14962:	4f 5f       	subi	r20, 0xFF	; 255
   14964:	5f 4f       	sbci	r21, 0xFF	; 255
   14966:	69 eb       	ldi	r22, 0xB9	; 185
   14968:	70 e0       	ldi	r23, 0x00	; 0
   1496a:	c8 01       	movw	r24, r16
   1496c:	0e 94 88 9c 	call	0x13910	; 0x13910 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   14970:	40 e0       	ldi	r20, 0x00	; 0
   14972:	60 ed       	ldi	r22, 0xD0	; 208
   14974:	70 e0       	ldi	r23, 0x00	; 0
   14976:	c8 01       	movw	r24, r16
   14978:	0e 94 2a a4 	call	0x14854	; 0x14854 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   1497c:	41 e0       	ldi	r20, 0x01	; 1
   1497e:	60 ed       	ldi	r22, 0xD0	; 208
   14980:	70 e0       	ldi	r23, 0x00	; 0
   14982:	c8 01       	movw	r24, r16
   14984:	0e 94 2a a4 	call	0x14854	; 0x14854 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   14988:	41 e0       	ldi	r20, 0x01	; 1
   1498a:	63 ed       	ldi	r22, 0xD3	; 211
   1498c:	70 e0       	ldi	r23, 0x00	; 0
   1498e:	c8 01       	movw	r24, r16
   14990:	0e 94 2a a4 	call	0x14854	; 0x14854 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   14994:	81 34       	cpi	r24, 0x41	; 65
   14996:	23 e9       	ldi	r18, 0x93	; 147
   14998:	92 07       	cpc	r25, r18
   1499a:	91 f0       	breq	.+36     	; 0x149c0 <LCDWIKI_KBV::Read_ID()+0xa4>
   1499c:	86 38       	cpi	r24, 0x86	; 134
   1499e:	24 e9       	ldi	r18, 0x94	; 148
   149a0:	92 07       	cpc	r25, r18
   149a2:	71 f0       	breq	.+28     	; 0x149c0 <LCDWIKI_KBV::Read_ID()+0xa4>
   149a4:	88 38       	cpi	r24, 0x88	; 136
   149a6:	24 e9       	ldi	r18, 0x94	; 148
   149a8:	92 07       	cpc	r25, r18
   149aa:	51 f0       	breq	.+20     	; 0x149c0 <LCDWIKI_KBV::Read_ID()+0xa4>
   149ac:	86 39       	cpi	r24, 0x96	; 150
   149ae:	27 e7       	ldi	r18, 0x77	; 119
   149b0:	92 07       	cpc	r25, r18
   149b2:	31 f0       	breq	.+12     	; 0x149c0 <LCDWIKI_KBV::Read_ID()+0xa4>
   149b4:	40 e0       	ldi	r20, 0x00	; 0
   149b6:	70 e0       	ldi	r23, 0x00	; 0
   149b8:	60 e0       	ldi	r22, 0x00	; 0
   149ba:	c8 01       	movw	r24, r16
   149bc:	0e 94 2a a4 	call	0x14854	; 0x14854 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   149c0:	0f 90       	pop	r0
   149c2:	0f 90       	pop	r0
   149c4:	0f 90       	pop	r0
   149c6:	df 91       	pop	r29
   149c8:	cf 91       	pop	r28
   149ca:	1f 91       	pop	r17
   149cc:	0f 91       	pop	r16
   149ce:	08 95       	ret

000149d0 <LCDWIKI_KBV::Vert_Scroll(int, int, int)>:
_ZN11LCDWIKI_KBV11Vert_ScrollEiii():
   149d0:	cf 92       	push	r12
   149d2:	df 92       	push	r13
   149d4:	ef 92       	push	r14
   149d6:	ff 92       	push	r15
   149d8:	0f 93       	push	r16
   149da:	1f 93       	push	r17
   149dc:	cf 93       	push	r28
   149de:	df 93       	push	r29
   149e0:	00 d0       	rcall	.+0      	; 0x149e2 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x12>
   149e2:	00 d0       	rcall	.+0      	; 0x149e4 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x14>
   149e4:	cd b7       	in	r28, 0x3d	; 61
   149e6:	de b7       	in	r29, 0x3e	; 62
   149e8:	8c 01       	movw	r16, r24
   149ea:	79 01       	movw	r14, r18
   149ec:	88 27       	eor	r24, r24
   149ee:	99 27       	eor	r25, r25
   149f0:	84 1b       	sub	r24, r20
   149f2:	95 0b       	sbc	r25, r21
   149f4:	6b 01       	movw	r12, r22
   149f6:	82 17       	cp	r24, r18
   149f8:	93 07       	cpc	r25, r19
   149fa:	0c f0       	brlt	.+2      	; 0x149fe <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x2e>
   149fc:	a3 c0       	rjmp	.+326    	; 0x14b44 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x174>
   149fe:	24 17       	cp	r18, r20
   14a00:	35 07       	cpc	r19, r21
   14a02:	0c f0       	brlt	.+2      	; 0x14a06 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x36>
   14a04:	9f c0       	rjmp	.+318    	; 0x14b44 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x174>
   14a06:	c2 0e       	add	r12, r18
   14a08:	d3 1e       	adc	r13, r19
   14a0a:	37 ff       	sbrs	r19, 7
   14a0c:	02 c0       	rjmp	.+4      	; 0x14a12 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x42>
   14a0e:	c4 0e       	add	r12, r20
   14a10:	d5 1e       	adc	r13, r21
   14a12:	d8 01       	movw	r26, r16
   14a14:	58 96       	adiw	r26, 0x18	; 24
   14a16:	8d 91       	ld	r24, X+
   14a18:	9c 91       	ld	r25, X
   14a1a:	59 97       	sbiw	r26, 0x19	; 25
   14a1c:	89 2b       	or	r24, r25
   14a1e:	09 f0       	breq	.+2      	; 0x14a22 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x52>
   14a20:	94 c0       	rjmp	.+296    	; 0x14b4a <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x17a>
   14a22:	d0 96       	adiw	r26, 0x30	; 48
   14a24:	ed 91       	ld	r30, X+
   14a26:	fc 91       	ld	r31, X
   14a28:	d1 97       	sbiw	r26, 0x31	; 49
   14a2a:	80 81       	ld	r24, Z
   14a2c:	db 96       	adiw	r26, 0x3b	; 59
   14a2e:	9c 91       	ld	r25, X
   14a30:	db 97       	sbiw	r26, 0x3b	; 59
   14a32:	89 23       	and	r24, r25
   14a34:	80 83       	st	Z, r24
   14a36:	94 96       	adiw	r26, 0x24	; 36
   14a38:	8c 91       	ld	r24, X
   14a3a:	94 97       	sbiw	r26, 0x24	; 36
   14a3c:	82 b9       	out	0x02, r24	; 2
   14a3e:	d2 96       	adiw	r26, 0x32	; 50
   14a40:	ed 91       	ld	r30, X+
   14a42:	fc 91       	ld	r31, X
   14a44:	d3 97       	sbiw	r26, 0x33	; 51
   14a46:	80 81       	ld	r24, Z
   14a48:	dc 96       	adiw	r26, 0x3c	; 60
   14a4a:	9c 91       	ld	r25, X
   14a4c:	dc 97       	sbiw	r26, 0x3c	; 60
   14a4e:	89 23       	and	r24, r25
   14a50:	80 83       	st	Z, r24
   14a52:	d2 96       	adiw	r26, 0x32	; 50
   14a54:	ed 91       	ld	r30, X+
   14a56:	fc 91       	ld	r31, X
   14a58:	d3 97       	sbiw	r26, 0x33	; 51
   14a5a:	80 81       	ld	r24, Z
   14a5c:	d8 96       	adiw	r26, 0x38	; 56
   14a5e:	9c 91       	ld	r25, X
   14a60:	d8 97       	sbiw	r26, 0x38	; 56
   14a62:	89 2b       	or	r24, r25
   14a64:	80 83       	st	Z, r24
   14a66:	d0 96       	adiw	r26, 0x30	; 48
   14a68:	ed 91       	ld	r30, X+
   14a6a:	fc 91       	ld	r31, X
   14a6c:	d1 97       	sbiw	r26, 0x31	; 49
   14a6e:	80 81       	ld	r24, Z
   14a70:	d7 96       	adiw	r26, 0x37	; 55
   14a72:	9c 91       	ld	r25, X
   14a74:	d7 97       	sbiw	r26, 0x37	; 55
   14a76:	89 2b       	or	r24, r25
   14a78:	80 83       	st	Z, r24
   14a7a:	83 e0       	ldi	r24, 0x03	; 3
   14a7c:	82 b9       	out	0x02, r24	; 2
   14a7e:	d2 96       	adiw	r26, 0x32	; 50
   14a80:	ed 91       	ld	r30, X+
   14a82:	fc 91       	ld	r31, X
   14a84:	d3 97       	sbiw	r26, 0x33	; 51
   14a86:	80 81       	ld	r24, Z
   14a88:	dc 96       	adiw	r26, 0x3c	; 60
   14a8a:	9c 91       	ld	r25, X
   14a8c:	dc 97       	sbiw	r26, 0x3c	; 60
   14a8e:	89 23       	and	r24, r25
   14a90:	80 83       	st	Z, r24
   14a92:	d2 96       	adiw	r26, 0x32	; 50
   14a94:	ed 91       	ld	r30, X+
   14a96:	fc 91       	ld	r31, X
   14a98:	d3 97       	sbiw	r26, 0x33	; 51
   14a9a:	80 81       	ld	r24, Z
   14a9c:	d8 96       	adiw	r26, 0x38	; 56
   14a9e:	9c 91       	ld	r25, X
   14aa0:	d8 97       	sbiw	r26, 0x38	; 56
   14aa2:	89 2b       	or	r24, r25
   14aa4:	80 83       	st	Z, r24
   14aa6:	d0 96       	adiw	r26, 0x30	; 48
   14aa8:	ed 91       	ld	r30, X+
   14aaa:	fc 91       	ld	r31, X
   14aac:	d1 97       	sbiw	r26, 0x31	; 49
   14aae:	80 81       	ld	r24, Z
   14ab0:	db 96       	adiw	r26, 0x3b	; 59
   14ab2:	9c 91       	ld	r25, X
   14ab4:	db 97       	sbiw	r26, 0x3b	; 59
   14ab6:	89 23       	and	r24, r25
   14ab8:	80 83       	st	Z, r24
   14aba:	96 96       	adiw	r26, 0x26	; 38
   14abc:	8c 91       	ld	r24, X
   14abe:	96 97       	sbiw	r26, 0x26	; 38
   14ac0:	82 b9       	out	0x02, r24	; 2
   14ac2:	d2 96       	adiw	r26, 0x32	; 50
   14ac4:	ed 91       	ld	r30, X+
   14ac6:	fc 91       	ld	r31, X
   14ac8:	d3 97       	sbiw	r26, 0x33	; 51
   14aca:	80 81       	ld	r24, Z
   14acc:	dc 96       	adiw	r26, 0x3c	; 60
   14ace:	9c 91       	ld	r25, X
   14ad0:	dc 97       	sbiw	r26, 0x3c	; 60
   14ad2:	89 23       	and	r24, r25
   14ad4:	80 83       	st	Z, r24
   14ad6:	d2 96       	adiw	r26, 0x32	; 50
   14ad8:	ed 91       	ld	r30, X+
   14ada:	fc 91       	ld	r31, X
   14adc:	d3 97       	sbiw	r26, 0x33	; 51
   14ade:	80 81       	ld	r24, Z
   14ae0:	d8 96       	adiw	r26, 0x38	; 56
   14ae2:	9c 91       	ld	r25, X
   14ae4:	d8 97       	sbiw	r26, 0x38	; 56
   14ae6:	89 2b       	or	r24, r25
   14ae8:	80 83       	st	Z, r24
   14aea:	d0 96       	adiw	r26, 0x30	; 48
   14aec:	ed 91       	ld	r30, X+
   14aee:	fc 91       	ld	r31, X
   14af0:	d1 97       	sbiw	r26, 0x31	; 49
   14af2:	80 81       	ld	r24, Z
   14af4:	d7 96       	adiw	r26, 0x37	; 55
   14af6:	9c 91       	ld	r25, X
   14af8:	d7 97       	sbiw	r26, 0x37	; 55
   14afa:	89 2b       	or	r24, r25
   14afc:	80 83       	st	Z, r24
   14afe:	c2 b8       	out	0x02, r12	; 2
   14b00:	d2 96       	adiw	r26, 0x32	; 50
   14b02:	ed 91       	ld	r30, X+
   14b04:	fc 91       	ld	r31, X
   14b06:	d3 97       	sbiw	r26, 0x33	; 51
   14b08:	80 81       	ld	r24, Z
   14b0a:	dc 96       	adiw	r26, 0x3c	; 60
   14b0c:	9c 91       	ld	r25, X
   14b0e:	dc 97       	sbiw	r26, 0x3c	; 60
   14b10:	89 23       	and	r24, r25
   14b12:	80 83       	st	Z, r24
   14b14:	d2 96       	adiw	r26, 0x32	; 50
   14b16:	ed 91       	ld	r30, X+
   14b18:	fc 91       	ld	r31, X
   14b1a:	d3 97       	sbiw	r26, 0x33	; 51
   14b1c:	80 81       	ld	r24, Z
   14b1e:	d8 96       	adiw	r26, 0x38	; 56
   14b20:	9c 91       	ld	r25, X
   14b22:	89 2b       	or	r24, r25
   14b24:	80 83       	st	Z, r24
   14b26:	26 96       	adiw	r28, 0x06	; 6
   14b28:	0f b6       	in	r0, 0x3f	; 63
   14b2a:	f8 94       	cli
   14b2c:	de bf       	out	0x3e, r29	; 62
   14b2e:	0f be       	out	0x3f, r0	; 63
   14b30:	cd bf       	out	0x3d, r28	; 61
   14b32:	df 91       	pop	r29
   14b34:	cf 91       	pop	r28
   14b36:	1f 91       	pop	r17
   14b38:	0f 91       	pop	r16
   14b3a:	ff 90       	pop	r15
   14b3c:	ef 90       	pop	r14
   14b3e:	df 90       	pop	r13
   14b40:	cf 90       	pop	r12
   14b42:	08 95       	ret
   14b44:	f1 2c       	mov	r15, r1
   14b46:	e1 2c       	mov	r14, r1
   14b48:	64 cf       	rjmp	.-312    	; 0x14a12 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x42>
   14b4a:	f8 01       	movw	r30, r16
   14b4c:	80 89       	ldd	r24, Z+16	; 0x10
   14b4e:	91 89       	ldd	r25, Z+17	; 0x11
   14b50:	86 1b       	sub	r24, r22
   14b52:	97 0b       	sbc	r25, r23
   14b54:	84 1b       	sub	r24, r20
   14b56:	95 0b       	sbc	r25, r21
   14b58:	79 83       	std	Y+1, r23	; 0x01
   14b5a:	6a 83       	std	Y+2, r22	; 0x02
   14b5c:	5b 83       	std	Y+3, r21	; 0x03
   14b5e:	4c 83       	std	Y+4, r20	; 0x04
   14b60:	9d 83       	std	Y+5, r25	; 0x05
   14b62:	8e 83       	std	Y+6, r24	; 0x06
   14b64:	64 a1       	ldd	r22, Z+36	; 0x24
   14b66:	75 a1       	ldd	r23, Z+37	; 0x25
   14b68:	26 e0       	ldi	r18, 0x06	; 6
   14b6a:	ae 01       	movw	r20, r28
   14b6c:	4f 5f       	subi	r20, 0xFF	; 255
   14b6e:	5f 4f       	sbci	r21, 0xFF	; 255
   14b70:	c8 01       	movw	r24, r16
   14b72:	0e 94 88 9c 	call	0x13910	; 0x13910 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   14b76:	d9 82       	std	Y+1, r13	; 0x01
   14b78:	ca 82       	std	Y+2, r12	; 0x02
   14b7a:	d8 01       	movw	r26, r16
   14b7c:	96 96       	adiw	r26, 0x26	; 38
   14b7e:	6d 91       	ld	r22, X+
   14b80:	7c 91       	ld	r23, X
   14b82:	22 e0       	ldi	r18, 0x02	; 2
   14b84:	ae 01       	movw	r20, r28
   14b86:	4f 5f       	subi	r20, 0xFF	; 255
   14b88:	5f 4f       	sbci	r21, 0xFF	; 255
   14b8a:	c8 01       	movw	r24, r16
   14b8c:	0e 94 88 9c 	call	0x13910	; 0x13910 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   14b90:	f8 01       	movw	r30, r16
   14b92:	80 8d       	ldd	r24, Z+24	; 0x18
   14b94:	91 8d       	ldd	r25, Z+25	; 0x19
   14b96:	01 97       	sbiw	r24, 0x01	; 1
   14b98:	79 f4       	brne	.+30     	; 0x14bb8 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1e8>
   14b9a:	88 e0       	ldi	r24, 0x08	; 8
   14b9c:	ef 28       	or	r14, r15
   14b9e:	09 f4       	brne	.+2      	; 0x14ba2 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1d2>
   14ba0:	80 e0       	ldi	r24, 0x00	; 0
   14ba2:	89 83       	std	Y+1, r24	; 0x01
   14ba4:	21 e0       	ldi	r18, 0x01	; 1
   14ba6:	ae 01       	movw	r20, r28
   14ba8:	4f 5f       	subi	r20, 0xFF	; 255
   14baa:	5f 4f       	sbci	r21, 0xFF	; 255
   14bac:	61 e0       	ldi	r22, 0x01	; 1
   14bae:	70 e0       	ldi	r23, 0x00	; 0
   14bb0:	c8 01       	movw	r24, r16
   14bb2:	0e 94 88 9c 	call	0x13910	; 0x13910 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   14bb6:	b7 cf       	rjmp	.-146    	; 0x14b26 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x156>
   14bb8:	ef 28       	or	r14, r15
   14bba:	09 f0       	breq	.+2      	; 0x14bbe <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1ee>
   14bbc:	b4 cf       	rjmp	.-152    	; 0x14b26 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x156>
   14bbe:	20 e0       	ldi	r18, 0x00	; 0
   14bc0:	50 e0       	ldi	r21, 0x00	; 0
   14bc2:	40 e0       	ldi	r20, 0x00	; 0
   14bc4:	63 e1       	ldi	r22, 0x13	; 19
   14bc6:	70 e0       	ldi	r23, 0x00	; 0
   14bc8:	f3 cf       	rjmp	.-26     	; 0x14bb0 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1e0>

00014bca <LCDWIKI_KBV::Set_Rotation(unsigned char)>:
_ZN11LCDWIKI_KBV12Set_RotationEh():
   14bca:	0f 93       	push	r16
   14bcc:	1f 93       	push	r17
   14bce:	cf 93       	push	r28
   14bd0:	df 93       	push	r29
   14bd2:	ec 01       	movw	r28, r24
   14bd4:	86 2f       	mov	r24, r22
   14bd6:	83 70       	andi	r24, 0x03	; 3
   14bd8:	90 e0       	ldi	r25, 0x00	; 0
   14bda:	9f 8b       	std	Y+23, r25	; 0x17
   14bdc:	8e 8b       	std	Y+22, r24	; 0x16
   14bde:	26 2f       	mov	r18, r22
   14be0:	21 70       	andi	r18, 0x01	; 1
   14be2:	60 ff       	sbrs	r22, 0
   14be4:	8e c0       	rjmp	.+284    	; 0x14d02 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x138>
   14be6:	88 89       	ldd	r24, Y+16	; 0x10
   14be8:	99 89       	ldd	r25, Y+17	; 0x11
   14bea:	9b 8b       	std	Y+19, r25	; 0x13
   14bec:	8a 8b       	std	Y+18, r24	; 0x12
   14bee:	22 23       	and	r18, r18
   14bf0:	09 f4       	brne	.+2      	; 0x14bf4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a>
   14bf2:	8a c0       	rjmp	.+276    	; 0x14d08 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x13e>
   14bf4:	8e 85       	ldd	r24, Y+14	; 0x0e
   14bf6:	9f 85       	ldd	r25, Y+15	; 0x0f
   14bf8:	9d 8b       	std	Y+21, r25	; 0x15
   14bfa:	8c 8b       	std	Y+20, r24	; 0x14
   14bfc:	ae a5       	ldd	r26, Y+46	; 0x2e
   14bfe:	bf a5       	ldd	r27, Y+47	; 0x2f
   14c00:	8c 91       	ld	r24, X
   14c02:	9a ad       	ldd	r25, Y+58	; 0x3a
   14c04:	89 23       	and	r24, r25
   14c06:	8c 93       	st	X, r24
   14c08:	48 8d       	ldd	r20, Y+24	; 0x18
   14c0a:	59 8d       	ldd	r21, Y+25	; 0x19
   14c0c:	8e 89       	ldd	r24, Y+22	; 0x16
   14c0e:	9f 89       	ldd	r25, Y+23	; 0x17
   14c10:	a8 a9       	ldd	r26, Y+48	; 0x30
   14c12:	b9 a9       	ldd	r27, Y+49	; 0x31
   14c14:	2b ad       	ldd	r18, Y+59	; 0x3b
   14c16:	41 15       	cp	r20, r1
   14c18:	51 05       	cpc	r21, r1
   14c1a:	09 f0       	breq	.+2      	; 0x14c1e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x54>
   14c1c:	7a c0       	rjmp	.+244    	; 0x14d12 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x148>
   14c1e:	01 97       	sbiw	r24, 0x01	; 1
   14c20:	83 30       	cpi	r24, 0x03	; 3
   14c22:	91 05       	cpc	r25, r1
   14c24:	08 f0       	brcs	.+2      	; 0x14c28 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x5e>
   14c26:	73 c0       	rjmp	.+230    	; 0x14d0e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x144>
   14c28:	88 0f       	add	r24, r24
   14c2a:	99 1f       	adc	r25, r25
   14c2c:	fc 01       	movw	r30, r24
   14c2e:	e2 56       	subi	r30, 0x62	; 98
   14c30:	f7 4f       	sbci	r31, 0xF7	; 247
   14c32:	90 81       	ld	r25, Z
   14c34:	38 a5       	ldd	r19, Y+40	; 0x28
   14c36:	49 a5       	ldd	r20, Y+41	; 0x29
   14c38:	8c 91       	ld	r24, X
   14c3a:	28 23       	and	r18, r24
   14c3c:	2c 93       	st	X, r18
   14c3e:	42 b9       	out	0x02, r20	; 2
   14c40:	ea a9       	ldd	r30, Y+50	; 0x32
   14c42:	fb a9       	ldd	r31, Y+51	; 0x33
   14c44:	80 81       	ld	r24, Z
   14c46:	2c ad       	ldd	r18, Y+60	; 0x3c
   14c48:	82 23       	and	r24, r18
   14c4a:	80 83       	st	Z, r24
   14c4c:	ea a9       	ldd	r30, Y+50	; 0x32
   14c4e:	fb a9       	ldd	r31, Y+51	; 0x33
   14c50:	80 81       	ld	r24, Z
   14c52:	28 ad       	ldd	r18, Y+56	; 0x38
   14c54:	82 2b       	or	r24, r18
   14c56:	80 83       	st	Z, r24
   14c58:	32 b9       	out	0x02, r19	; 2
   14c5a:	ea a9       	ldd	r30, Y+50	; 0x32
   14c5c:	fb a9       	ldd	r31, Y+51	; 0x33
   14c5e:	80 81       	ld	r24, Z
   14c60:	2c ad       	ldd	r18, Y+60	; 0x3c
   14c62:	82 23       	and	r24, r18
   14c64:	80 83       	st	Z, r24
   14c66:	ea a9       	ldd	r30, Y+50	; 0x32
   14c68:	fb a9       	ldd	r31, Y+51	; 0x33
   14c6a:	80 81       	ld	r24, Z
   14c6c:	28 ad       	ldd	r18, Y+56	; 0x38
   14c6e:	82 2b       	or	r24, r18
   14c70:	80 83       	st	Z, r24
   14c72:	e8 a9       	ldd	r30, Y+48	; 0x30
   14c74:	f9 a9       	ldd	r31, Y+49	; 0x31
   14c76:	80 81       	ld	r24, Z
   14c78:	2f a9       	ldd	r18, Y+55	; 0x37
   14c7a:	82 2b       	or	r24, r18
   14c7c:	80 83       	st	Z, r24
   14c7e:	80 e1       	ldi	r24, 0x10	; 16
   14c80:	82 b9       	out	0x02, r24	; 2
   14c82:	ea a9       	ldd	r30, Y+50	; 0x32
   14c84:	fb a9       	ldd	r31, Y+51	; 0x33
   14c86:	80 81       	ld	r24, Z
   14c88:	2c ad       	ldd	r18, Y+60	; 0x3c
   14c8a:	82 23       	and	r24, r18
   14c8c:	80 83       	st	Z, r24
   14c8e:	ea a9       	ldd	r30, Y+50	; 0x32
   14c90:	fb a9       	ldd	r31, Y+51	; 0x33
   14c92:	80 81       	ld	r24, Z
   14c94:	28 ad       	ldd	r18, Y+56	; 0x38
   14c96:	82 2b       	or	r24, r18
   14c98:	80 83       	st	Z, r24
   14c9a:	92 b9       	out	0x02, r25	; 2
   14c9c:	ea a9       	ldd	r30, Y+50	; 0x32
   14c9e:	fb a9       	ldd	r31, Y+51	; 0x33
   14ca0:	80 81       	ld	r24, Z
   14ca2:	9c ad       	ldd	r25, Y+60	; 0x3c
   14ca4:	89 23       	and	r24, r25
   14ca6:	80 83       	st	Z, r24
   14ca8:	ea a9       	ldd	r30, Y+50	; 0x32
   14caa:	fb a9       	ldd	r31, Y+51	; 0x33
   14cac:	80 81       	ld	r24, Z
   14cae:	98 ad       	ldd	r25, Y+56	; 0x38
   14cb0:	89 2b       	or	r24, r25
   14cb2:	80 83       	st	Z, r24
   14cb4:	0c 89       	ldd	r16, Y+20	; 0x14
   14cb6:	1d 89       	ldd	r17, Y+21	; 0x15
   14cb8:	01 50       	subi	r16, 0x01	; 1
   14cba:	11 09       	sbc	r17, r1
   14cbc:	2a 89       	ldd	r18, Y+18	; 0x12
   14cbe:	3b 89       	ldd	r19, Y+19	; 0x13
   14cc0:	21 50       	subi	r18, 0x01	; 1
   14cc2:	31 09       	sbc	r19, r1
   14cc4:	e8 81       	ld	r30, Y
   14cc6:	f9 81       	ldd	r31, Y+1	; 0x01
   14cc8:	06 80       	ldd	r0, Z+6	; 0x06
   14cca:	f7 81       	ldd	r31, Z+7	; 0x07
   14ccc:	e0 2d       	mov	r30, r0
   14cce:	50 e0       	ldi	r21, 0x00	; 0
   14cd0:	40 e0       	ldi	r20, 0x00	; 0
   14cd2:	70 e0       	ldi	r23, 0x00	; 0
   14cd4:	60 e0       	ldi	r22, 0x00	; 0
   14cd6:	ce 01       	movw	r24, r28
   14cd8:	19 95       	eicall
   14cda:	48 89       	ldd	r20, Y+16	; 0x10
   14cdc:	59 89       	ldd	r21, Y+17	; 0x11
   14cde:	30 e0       	ldi	r19, 0x00	; 0
   14ce0:	20 e0       	ldi	r18, 0x00	; 0
   14ce2:	70 e0       	ldi	r23, 0x00	; 0
   14ce4:	60 e0       	ldi	r22, 0x00	; 0
   14ce6:	ce 01       	movw	r24, r28
   14ce8:	0e 94 e8 a4 	call	0x149d0	; 0x149d0 <LCDWIKI_KBV::Vert_Scroll(int, int, int)>
   14cec:	ee a5       	ldd	r30, Y+46	; 0x2e
   14cee:	ff a5       	ldd	r31, Y+47	; 0x2f
   14cf0:	80 81       	ld	r24, Z
   14cf2:	9e a9       	ldd	r25, Y+54	; 0x36
   14cf4:	89 2b       	or	r24, r25
   14cf6:	80 83       	st	Z, r24
   14cf8:	df 91       	pop	r29
   14cfa:	cf 91       	pop	r28
   14cfc:	1f 91       	pop	r17
   14cfe:	0f 91       	pop	r16
   14d00:	08 95       	ret
   14d02:	8e 85       	ldd	r24, Y+14	; 0x0e
   14d04:	9f 85       	ldd	r25, Y+15	; 0x0f
   14d06:	71 cf       	rjmp	.-286    	; 0x14bea <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x20>
   14d08:	88 89       	ldd	r24, Y+16	; 0x10
   14d0a:	99 89       	ldd	r25, Y+17	; 0x11
   14d0c:	75 cf       	rjmp	.-278    	; 0x14bf8 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2e>
   14d0e:	90 e3       	ldi	r25, 0x30	; 48
   14d10:	91 cf       	rjmp	.-222    	; 0x14c34 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x6a>
   14d12:	46 30       	cpi	r20, 0x06	; 6
   14d14:	51 05       	cpc	r21, r1
   14d16:	51 f5       	brne	.+84     	; 0x14d6c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1a2>
   14d18:	81 30       	cpi	r24, 0x01	; 1
   14d1a:	91 05       	cpc	r25, r1
   14d1c:	f9 f0       	breq	.+62     	; 0x14d5c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x192>
   14d1e:	20 f1       	brcs	.+72     	; 0x14d68 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x19e>
   14d20:	82 30       	cpi	r24, 0x02	; 2
   14d22:	91 05       	cpc	r25, r1
   14d24:	e9 f0       	breq	.+58     	; 0x14d60 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x196>
   14d26:	03 97       	sbiw	r24, 0x03	; 3
   14d28:	e9 f0       	breq	.+58     	; 0x14d64 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x19a>
   14d2a:	8c 91       	ld	r24, X
   14d2c:	28 23       	and	r18, r24
   14d2e:	2c 93       	st	X, r18
   14d30:	88 a5       	ldd	r24, Y+40	; 0x28
   14d32:	82 b9       	out	0x02, r24	; 2
   14d34:	ea a9       	ldd	r30, Y+50	; 0x32
   14d36:	fb a9       	ldd	r31, Y+51	; 0x33
   14d38:	80 81       	ld	r24, Z
   14d3a:	9c ad       	ldd	r25, Y+60	; 0x3c
   14d3c:	89 23       	and	r24, r25
   14d3e:	80 83       	st	Z, r24
   14d40:	ea a9       	ldd	r30, Y+50	; 0x32
   14d42:	fb a9       	ldd	r31, Y+51	; 0x33
   14d44:	80 81       	ld	r24, Z
   14d46:	98 ad       	ldd	r25, Y+56	; 0x38
   14d48:	89 2b       	or	r24, r25
   14d4a:	80 83       	st	Z, r24
   14d4c:	e8 a9       	ldd	r30, Y+48	; 0x30
   14d4e:	f9 a9       	ldd	r31, Y+49	; 0x31
   14d50:	80 81       	ld	r24, Z
   14d52:	9f a9       	ldd	r25, Y+55	; 0x37
   14d54:	89 2b       	or	r24, r25
   14d56:	80 83       	st	Z, r24
   14d58:	12 b9       	out	0x02, r17	; 2
   14d5a:	a0 cf       	rjmp	.-192    	; 0x14c9c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14d5c:	10 ea       	ldi	r17, 0xA0	; 160
   14d5e:	e5 cf       	rjmp	.-54     	; 0x14d2a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   14d60:	10 e0       	ldi	r17, 0x00	; 0
   14d62:	e3 cf       	rjmp	.-58     	; 0x14d2a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   14d64:	10 e6       	ldi	r17, 0x60	; 96
   14d66:	e1 cf       	rjmp	.-62     	; 0x14d2a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   14d68:	10 ed       	ldi	r17, 0xD0	; 208
   14d6a:	df cf       	rjmp	.-66     	; 0x14d2a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   14d6c:	48 30       	cpi	r20, 0x08	; 8
   14d6e:	51 05       	cpc	r21, r1
   14d70:	49 f5       	brne	.+82     	; 0x14dc4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1fa>
   14d72:	fb e2       	ldi	r31, 0x2B	; 43
   14d74:	81 30       	cpi	r24, 0x01	; 1
   14d76:	91 05       	cpc	r25, r1
   14d78:	51 f0       	breq	.+20     	; 0x14d8e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   14d7a:	f9 e0       	ldi	r31, 0x09	; 9
   14d7c:	81 30       	cpi	r24, 0x01	; 1
   14d7e:	91 05       	cpc	r25, r1
   14d80:	30 f0       	brcs	.+12     	; 0x14d8e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   14d82:	fa e0       	ldi	r31, 0x0A	; 10
   14d84:	82 30       	cpi	r24, 0x02	; 2
   14d86:	91 05       	cpc	r25, r1
   14d88:	11 f0       	breq	.+4      	; 0x14d8e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   14d8a:	03 97       	sbiw	r24, 0x03	; 3
   14d8c:	c9 f0       	breq	.+50     	; 0x14dc0 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1f6>
   14d8e:	8c 91       	ld	r24, X
   14d90:	28 23       	and	r18, r24
   14d92:	2c 93       	st	X, r18
   14d94:	88 a5       	ldd	r24, Y+40	; 0x28
   14d96:	82 b9       	out	0x02, r24	; 2
   14d98:	aa a9       	ldd	r26, Y+50	; 0x32
   14d9a:	bb a9       	ldd	r27, Y+51	; 0x33
   14d9c:	8c 91       	ld	r24, X
   14d9e:	9c ad       	ldd	r25, Y+60	; 0x3c
   14da0:	89 23       	and	r24, r25
   14da2:	8c 93       	st	X, r24
   14da4:	aa a9       	ldd	r26, Y+50	; 0x32
   14da6:	bb a9       	ldd	r27, Y+51	; 0x33
   14da8:	8c 91       	ld	r24, X
   14daa:	98 ad       	ldd	r25, Y+56	; 0x38
   14dac:	89 2b       	or	r24, r25
   14dae:	8c 93       	st	X, r24
   14db0:	a8 a9       	ldd	r26, Y+48	; 0x30
   14db2:	b9 a9       	ldd	r27, Y+49	; 0x31
   14db4:	8c 91       	ld	r24, X
   14db6:	9f a9       	ldd	r25, Y+55	; 0x37
   14db8:	89 2b       	or	r24, r25
   14dba:	8c 93       	st	X, r24
   14dbc:	f2 b9       	out	0x02, r31	; 2
   14dbe:	6e cf       	rjmp	.-292    	; 0x14c9c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14dc0:	f8 e2       	ldi	r31, 0x28	; 40
   14dc2:	e5 cf       	rjmp	.-54     	; 0x14d8e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   14dc4:	45 30       	cpi	r20, 0x05	; 5
   14dc6:	51 05       	cpc	r21, r1
   14dc8:	49 f5       	brne	.+82     	; 0x14e1c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x252>
   14dca:	e8 e7       	ldi	r30, 0x78	; 120
   14dcc:	81 30       	cpi	r24, 0x01	; 1
   14dce:	91 05       	cpc	r25, r1
   14dd0:	51 f0       	breq	.+20     	; 0x14de6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   14dd2:	e8 e0       	ldi	r30, 0x08	; 8
   14dd4:	81 30       	cpi	r24, 0x01	; 1
   14dd6:	91 05       	cpc	r25, r1
   14dd8:	30 f0       	brcs	.+12     	; 0x14de6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   14dda:	e8 ec       	ldi	r30, 0xC8	; 200
   14ddc:	82 30       	cpi	r24, 0x02	; 2
   14dde:	91 05       	cpc	r25, r1
   14de0:	11 f0       	breq	.+4      	; 0x14de6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   14de2:	03 97       	sbiw	r24, 0x03	; 3
   14de4:	c9 f0       	breq	.+50     	; 0x14e18 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x24e>
   14de6:	8c 91       	ld	r24, X
   14de8:	28 23       	and	r18, r24
   14dea:	2c 93       	st	X, r18
   14dec:	88 a5       	ldd	r24, Y+40	; 0x28
   14dee:	82 b9       	out	0x02, r24	; 2
   14df0:	aa a9       	ldd	r26, Y+50	; 0x32
   14df2:	bb a9       	ldd	r27, Y+51	; 0x33
   14df4:	8c 91       	ld	r24, X
   14df6:	9c ad       	ldd	r25, Y+60	; 0x3c
   14df8:	89 23       	and	r24, r25
   14dfa:	8c 93       	st	X, r24
   14dfc:	aa a9       	ldd	r26, Y+50	; 0x32
   14dfe:	bb a9       	ldd	r27, Y+51	; 0x33
   14e00:	8c 91       	ld	r24, X
   14e02:	98 ad       	ldd	r25, Y+56	; 0x38
   14e04:	89 2b       	or	r24, r25
   14e06:	8c 93       	st	X, r24
   14e08:	a8 a9       	ldd	r26, Y+48	; 0x30
   14e0a:	b9 a9       	ldd	r27, Y+49	; 0x31
   14e0c:	8c 91       	ld	r24, X
   14e0e:	9f a9       	ldd	r25, Y+55	; 0x37
   14e10:	89 2b       	or	r24, r25
   14e12:	8c 93       	st	X, r24
   14e14:	e2 b9       	out	0x02, r30	; 2
   14e16:	42 cf       	rjmp	.-380    	; 0x14c9c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14e18:	e8 ea       	ldi	r30, 0xA8	; 168
   14e1a:	e5 cf       	rjmp	.-54     	; 0x14de6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   14e1c:	47 30       	cpi	r20, 0x07	; 7
   14e1e:	51 05       	cpc	r21, r1
   14e20:	51 f5       	brne	.+84     	; 0x14e76 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2ac>
   14e22:	81 30       	cpi	r24, 0x01	; 1
   14e24:	91 05       	cpc	r25, r1
   14e26:	f9 f0       	breq	.+62     	; 0x14e66 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x29c>
   14e28:	20 f1       	brcs	.+72     	; 0x14e72 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a8>
   14e2a:	82 30       	cpi	r24, 0x02	; 2
   14e2c:	91 05       	cpc	r25, r1
   14e2e:	e9 f0       	breq	.+58     	; 0x14e6a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a0>
   14e30:	03 97       	sbiw	r24, 0x03	; 3
   14e32:	e9 f0       	breq	.+58     	; 0x14e6e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a4>
   14e34:	8c 91       	ld	r24, X
   14e36:	28 23       	and	r18, r24
   14e38:	2c 93       	st	X, r18
   14e3a:	88 a5       	ldd	r24, Y+40	; 0x28
   14e3c:	82 b9       	out	0x02, r24	; 2
   14e3e:	ea a9       	ldd	r30, Y+50	; 0x32
   14e40:	fb a9       	ldd	r31, Y+51	; 0x33
   14e42:	80 81       	ld	r24, Z
   14e44:	9c ad       	ldd	r25, Y+60	; 0x3c
   14e46:	89 23       	and	r24, r25
   14e48:	80 83       	st	Z, r24
   14e4a:	ea a9       	ldd	r30, Y+50	; 0x32
   14e4c:	fb a9       	ldd	r31, Y+51	; 0x33
   14e4e:	80 81       	ld	r24, Z
   14e50:	98 ad       	ldd	r25, Y+56	; 0x38
   14e52:	89 2b       	or	r24, r25
   14e54:	80 83       	st	Z, r24
   14e56:	e8 a9       	ldd	r30, Y+48	; 0x30
   14e58:	f9 a9       	ldd	r31, Y+49	; 0x31
   14e5a:	80 81       	ld	r24, Z
   14e5c:	9f a9       	ldd	r25, Y+55	; 0x37
   14e5e:	89 2b       	or	r24, r25
   14e60:	80 83       	st	Z, r24
   14e62:	72 b9       	out	0x02, r23	; 2
   14e64:	1b cf       	rjmp	.-458    	; 0x14c9c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14e66:	78 ea       	ldi	r23, 0xA8	; 168
   14e68:	e5 cf       	rjmp	.-54     	; 0x14e34 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   14e6a:	78 e1       	ldi	r23, 0x18	; 24
   14e6c:	e3 cf       	rjmp	.-58     	; 0x14e34 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   14e6e:	78 e7       	ldi	r23, 0x78	; 120
   14e70:	e1 cf       	rjmp	.-62     	; 0x14e34 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   14e72:	78 ec       	ldi	r23, 0xC8	; 200
   14e74:	df cf       	rjmp	.-66     	; 0x14e34 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   14e76:	81 30       	cpi	r24, 0x01	; 1
   14e78:	91 05       	cpc	r25, r1
   14e7a:	f9 f0       	breq	.+62     	; 0x14eba <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f0>
   14e7c:	20 f1       	brcs	.+72     	; 0x14ec6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2fc>
   14e7e:	82 30       	cpi	r24, 0x02	; 2
   14e80:	91 05       	cpc	r25, r1
   14e82:	e9 f0       	breq	.+58     	; 0x14ebe <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f4>
   14e84:	03 97       	sbiw	r24, 0x03	; 3
   14e86:	e9 f0       	breq	.+58     	; 0x14ec2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f8>
   14e88:	8c 91       	ld	r24, X
   14e8a:	28 23       	and	r18, r24
   14e8c:	2c 93       	st	X, r18
   14e8e:	88 a5       	ldd	r24, Y+40	; 0x28
   14e90:	82 b9       	out	0x02, r24	; 2
   14e92:	ea a9       	ldd	r30, Y+50	; 0x32
   14e94:	fb a9       	ldd	r31, Y+51	; 0x33
   14e96:	80 81       	ld	r24, Z
   14e98:	9c ad       	ldd	r25, Y+60	; 0x3c
   14e9a:	89 23       	and	r24, r25
   14e9c:	80 83       	st	Z, r24
   14e9e:	ea a9       	ldd	r30, Y+50	; 0x32
   14ea0:	fb a9       	ldd	r31, Y+51	; 0x33
   14ea2:	80 81       	ld	r24, Z
   14ea4:	98 ad       	ldd	r25, Y+56	; 0x38
   14ea6:	89 2b       	or	r24, r25
   14ea8:	80 83       	st	Z, r24
   14eaa:	e8 a9       	ldd	r30, Y+48	; 0x30
   14eac:	f9 a9       	ldd	r31, Y+49	; 0x31
   14eae:	80 81       	ld	r24, Z
   14eb0:	9f a9       	ldd	r25, Y+55	; 0x37
   14eb2:	89 2b       	or	r24, r25
   14eb4:	80 83       	st	Z, r24
   14eb6:	32 b9       	out	0x02, r19	; 2
   14eb8:	f1 ce       	rjmp	.-542    	; 0x14c9c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14eba:	38 e2       	ldi	r19, 0x28	; 40
   14ebc:	e5 cf       	rjmp	.-54     	; 0x14e88 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   14ebe:	38 e9       	ldi	r19, 0x98	; 152
   14ec0:	e3 cf       	rjmp	.-58     	; 0x14e88 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   14ec2:	38 ef       	ldi	r19, 0xF8	; 248
   14ec4:	e1 cf       	rjmp	.-62     	; 0x14e88 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   14ec6:	38 e4       	ldi	r19, 0x48	; 72
   14ec8:	df cf       	rjmp	.-66     	; 0x14e88 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>

00014eca <LCDWIKI_KBV::Get_Rotation() const>:
_ZNK11LCDWIKI_KBV12Get_RotationEv():
   14eca:	fc 01       	movw	r30, r24
   14ecc:	86 89       	ldd	r24, Z+22	; 0x16
   14ece:	08 95       	ret

00014ed0 <LCDWIKI_KBV::Invert_Display(bool)>:
_ZN11LCDWIKI_KBV14Invert_DisplayEb():
   14ed0:	fc 01       	movw	r30, r24
   14ed2:	a6 a5       	ldd	r26, Z+46	; 0x2e
   14ed4:	b7 a5       	ldd	r27, Z+47	; 0x2f
   14ed6:	8c 91       	ld	r24, X
   14ed8:	92 ad       	ldd	r25, Z+58	; 0x3a
   14eda:	89 23       	and	r24, r25
   14edc:	8c 93       	st	X, r24
   14ede:	82 a5       	ldd	r24, Z+42	; 0x2a
   14ee0:	40 8d       	ldd	r20, Z+24	; 0x18
   14ee2:	51 8d       	ldd	r21, Z+25	; 0x19
   14ee4:	a0 a9       	ldd	r26, Z+48	; 0x30
   14ee6:	b1 a9       	ldd	r27, Z+49	; 0x31
   14ee8:	23 ad       	ldd	r18, Z+59	; 0x3b
   14eea:	9c 91       	ld	r25, X
   14eec:	92 23       	and	r25, r18
   14eee:	9c 93       	st	X, r25
   14ef0:	41 15       	cp	r20, r1
   14ef2:	51 05       	cpc	r21, r1
   14ef4:	49 f5       	brne	.+82     	; 0x14f48 <LCDWIKI_KBV::Invert_Display(bool)+0x78>
   14ef6:	91 e6       	ldi	r25, 0x61	; 97
   14ef8:	92 b9       	out	0x02, r25	; 2
   14efa:	a2 a9       	ldd	r26, Z+50	; 0x32
   14efc:	b3 a9       	ldd	r27, Z+51	; 0x33
   14efe:	9c 91       	ld	r25, X
   14f00:	24 ad       	ldd	r18, Z+60	; 0x3c
   14f02:	92 23       	and	r25, r18
   14f04:	9c 93       	st	X, r25
   14f06:	a2 a9       	ldd	r26, Z+50	; 0x32
   14f08:	b3 a9       	ldd	r27, Z+51	; 0x33
   14f0a:	9c 91       	ld	r25, X
   14f0c:	20 ad       	ldd	r18, Z+56	; 0x38
   14f0e:	92 2b       	or	r25, r18
   14f10:	9c 93       	st	X, r25
   14f12:	a0 a9       	ldd	r26, Z+48	; 0x30
   14f14:	b1 a9       	ldd	r27, Z+49	; 0x31
   14f16:	9c 91       	ld	r25, X
   14f18:	27 a9       	ldd	r18, Z+55	; 0x37
   14f1a:	92 2b       	or	r25, r18
   14f1c:	9c 93       	st	X, r25
   14f1e:	68 27       	eor	r22, r24
   14f20:	62 b9       	out	0x02, r22	; 2
   14f22:	a2 a9       	ldd	r26, Z+50	; 0x32
   14f24:	b3 a9       	ldd	r27, Z+51	; 0x33
   14f26:	8c 91       	ld	r24, X
   14f28:	94 ad       	ldd	r25, Z+60	; 0x3c
   14f2a:	89 23       	and	r24, r25
   14f2c:	8c 93       	st	X, r24
   14f2e:	a2 a9       	ldd	r26, Z+50	; 0x32
   14f30:	b3 a9       	ldd	r27, Z+51	; 0x33
   14f32:	8c 91       	ld	r24, X
   14f34:	90 ad       	ldd	r25, Z+56	; 0x38
   14f36:	89 2b       	or	r24, r25
   14f38:	8c 93       	st	X, r24
   14f3a:	a6 a5       	ldd	r26, Z+46	; 0x2e
   14f3c:	b7 a5       	ldd	r27, Z+47	; 0x2f
   14f3e:	8c 91       	ld	r24, X
   14f40:	96 a9       	ldd	r25, Z+54	; 0x36
   14f42:	89 2b       	or	r24, r25
   14f44:	8c 93       	st	X, r24
   14f46:	08 95       	ret
   14f48:	41 30       	cpi	r20, 0x01	; 1
   14f4a:	51 05       	cpc	r21, r1
   14f4c:	d9 f4       	brne	.+54     	; 0x14f84 <LCDWIKI_KBV::Invert_Display(bool)+0xb4>
   14f4e:	91 e0       	ldi	r25, 0x01	; 1
   14f50:	92 b9       	out	0x02, r25	; 2
   14f52:	a2 a9       	ldd	r26, Z+50	; 0x32
   14f54:	b3 a9       	ldd	r27, Z+51	; 0x33
   14f56:	9c 91       	ld	r25, X
   14f58:	24 ad       	ldd	r18, Z+60	; 0x3c
   14f5a:	92 23       	and	r25, r18
   14f5c:	9c 93       	st	X, r25
   14f5e:	a2 a9       	ldd	r26, Z+50	; 0x32
   14f60:	b3 a9       	ldd	r27, Z+51	; 0x33
   14f62:	9c 91       	ld	r25, X
   14f64:	20 ad       	ldd	r18, Z+56	; 0x38
   14f66:	92 2b       	or	r25, r18
   14f68:	9c 93       	st	X, r25
   14f6a:	a0 a9       	ldd	r26, Z+48	; 0x30
   14f6c:	b1 a9       	ldd	r27, Z+49	; 0x31
   14f6e:	9c 91       	ld	r25, X
   14f70:	27 a9       	ldd	r18, Z+55	; 0x37
   14f72:	92 2b       	or	r25, r18
   14f74:	9c 93       	st	X, r25
   14f76:	86 17       	cp	r24, r22
   14f78:	19 f0       	breq	.+6      	; 0x14f80 <LCDWIKI_KBV::Invert_Display(bool)+0xb0>
   14f7a:	88 e0       	ldi	r24, 0x08	; 8
   14f7c:	82 b9       	out	0x02, r24	; 2
   14f7e:	d1 cf       	rjmp	.-94     	; 0x14f22 <LCDWIKI_KBV::Invert_Display(bool)+0x52>
   14f80:	8a e0       	ldi	r24, 0x0A	; 10
   14f82:	fc cf       	rjmp	.-8      	; 0x14f7c <LCDWIKI_KBV::Invert_Display(bool)+0xac>
   14f84:	86 17       	cp	r24, r22
   14f86:	99 f0       	breq	.+38     	; 0x14fae <LCDWIKI_KBV::Invert_Display(bool)+0xde>
   14f88:	81 e2       	ldi	r24, 0x21	; 33
   14f8a:	82 b9       	out	0x02, r24	; 2
   14f8c:	a2 a9       	ldd	r26, Z+50	; 0x32
   14f8e:	b3 a9       	ldd	r27, Z+51	; 0x33
   14f90:	8c 91       	ld	r24, X
   14f92:	94 ad       	ldd	r25, Z+60	; 0x3c
   14f94:	89 23       	and	r24, r25
   14f96:	8c 93       	st	X, r24
   14f98:	a2 a9       	ldd	r26, Z+50	; 0x32
   14f9a:	b3 a9       	ldd	r27, Z+51	; 0x33
   14f9c:	8c 91       	ld	r24, X
   14f9e:	90 ad       	ldd	r25, Z+56	; 0x38
   14fa0:	89 2b       	or	r24, r25
   14fa2:	8c 93       	st	X, r24
   14fa4:	a0 a9       	ldd	r26, Z+48	; 0x30
   14fa6:	b1 a9       	ldd	r27, Z+49	; 0x31
   14fa8:	8c 91       	ld	r24, X
   14faa:	97 a9       	ldd	r25, Z+55	; 0x37
   14fac:	c4 cf       	rjmp	.-120    	; 0x14f36 <LCDWIKI_KBV::Invert_Display(bool)+0x66>
   14fae:	80 e2       	ldi	r24, 0x20	; 32
   14fb0:	ec cf       	rjmp	.-40     	; 0x14f8a <LCDWIKI_KBV::Invert_Display(bool)+0xba>

00014fb2 <LCDWIKI_KBV::init_table8(void const*, int)>:
_ZN11LCDWIKI_KBV11init_table8EPKvi():
   14fb2:	af 92       	push	r10
   14fb4:	bf 92       	push	r11
   14fb6:	cf 92       	push	r12
   14fb8:	df 92       	push	r13
   14fba:	ef 92       	push	r14
   14fbc:	ff 92       	push	r15
   14fbe:	1f 93       	push	r17
   14fc0:	cf 93       	push	r28
   14fc2:	df 93       	push	r29
   14fc4:	cd b7       	in	r28, 0x3d	; 61
   14fc6:	de b7       	in	r29, 0x3e	; 62
   14fc8:	68 97       	sbiw	r28, 0x18	; 24
   14fca:	0f b6       	in	r0, 0x3f	; 63
   14fcc:	f8 94       	cli
   14fce:	de bf       	out	0x3e, r29	; 62
   14fd0:	0f be       	out	0x3f, r0	; 63
   14fd2:	cd bf       	out	0x3d, r28	; 61
   14fd4:	5c 01       	movw	r10, r24
   14fd6:	7b 01       	movw	r14, r22
   14fd8:	6a 01       	movw	r12, r20
   14fda:	1c 14       	cp	r1, r12
   14fdc:	1d 04       	cpc	r1, r13
   14fde:	74 f5       	brge	.+92     	; 0x1503c <LCDWIKI_KBV::init_table8(void const*, int)+0x8a>
   14fe0:	f7 01       	movw	r30, r14
   14fe2:	64 91       	lpm	r22, Z
   14fe4:	31 96       	adiw	r30, 0x01	; 1
   14fe6:	14 91       	lpm	r17, Z
   14fe8:	f2 e0       	ldi	r31, 0x02	; 2
   14fea:	ef 0e       	add	r14, r31
   14fec:	f1 1c       	adc	r15, r1
   14fee:	6f 37       	cpi	r22, 0x7F	; 127
   14ff0:	79 f0       	breq	.+30     	; 0x15010 <LCDWIKI_KBV::init_table8(void const*, int)+0x5e>
   14ff2:	de 01       	movw	r26, r28
   14ff4:	11 96       	adiw	r26, 0x01	; 1
   14ff6:	30 e0       	ldi	r19, 0x00	; 0
   14ff8:	20 e0       	ldi	r18, 0x00	; 0
   14ffa:	ad 01       	movw	r20, r26
   14ffc:	21 17       	cp	r18, r17
   14ffe:	b0 f4       	brcc	.+44     	; 0x1502c <LCDWIKI_KBV::init_table8(void const*, int)+0x7a>
   15000:	f7 01       	movw	r30, r14
   15002:	e2 0f       	add	r30, r18
   15004:	f3 1f       	adc	r31, r19
   15006:	e4 91       	lpm	r30, Z
   15008:	ed 93       	st	X+, r30
   1500a:	2f 5f       	subi	r18, 0xFF	; 255
   1500c:	3f 4f       	sbci	r19, 0xFF	; 255
   1500e:	f6 cf       	rjmp	.-20     	; 0x14ffc <LCDWIKI_KBV::init_table8(void const*, int)+0x4a>
   15010:	61 2f       	mov	r22, r17
   15012:	70 e0       	ldi	r23, 0x00	; 0
   15014:	90 e0       	ldi	r25, 0x00	; 0
   15016:	80 e0       	ldi	r24, 0x00	; 0
   15018:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
   1501c:	10 e0       	ldi	r17, 0x00	; 0
   1501e:	61 2f       	mov	r22, r17
   15020:	70 e0       	ldi	r23, 0x00	; 0
   15022:	6e 5f       	subi	r22, 0xFE	; 254
   15024:	7f 4f       	sbci	r23, 0xFF	; 255
   15026:	c6 1a       	sub	r12, r22
   15028:	d7 0a       	sbc	r13, r23
   1502a:	d7 cf       	rjmp	.-82     	; 0x14fda <LCDWIKI_KBV::init_table8(void const*, int)+0x28>
   1502c:	e1 0e       	add	r14, r17
   1502e:	f1 1c       	adc	r15, r1
   15030:	70 e0       	ldi	r23, 0x00	; 0
   15032:	21 2f       	mov	r18, r17
   15034:	c5 01       	movw	r24, r10
   15036:	0e 94 88 9c 	call	0x13910	; 0x13910 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1503a:	f1 cf       	rjmp	.-30     	; 0x1501e <LCDWIKI_KBV::init_table8(void const*, int)+0x6c>
   1503c:	68 96       	adiw	r28, 0x18	; 24
   1503e:	0f b6       	in	r0, 0x3f	; 63
   15040:	f8 94       	cli
   15042:	de bf       	out	0x3e, r29	; 62
   15044:	0f be       	out	0x3f, r0	; 63
   15046:	cd bf       	out	0x3d, r28	; 61
   15048:	df 91       	pop	r29
   1504a:	cf 91       	pop	r28
   1504c:	1f 91       	pop	r17
   1504e:	ff 90       	pop	r15
   15050:	ef 90       	pop	r14
   15052:	df 90       	pop	r13
   15054:	cf 90       	pop	r12
   15056:	bf 90       	pop	r11
   15058:	af 90       	pop	r10
   1505a:	08 95       	ret

0001505c <LCDWIKI_KBV::start(unsigned int)>:
_ZN11LCDWIKI_KBV5startEj():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:954

void LCDWIKI_KBV::start(uint16_t ID)
{
   1505c:	0f 93       	push	r16
   1505e:	1f 93       	push	r17
   15060:	cf 93       	push	r28
   15062:	df 93       	push	r29
   15064:	ec 01       	movw	r28, r24
   15066:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
	reset();
   15068:	0e 94 32 9c 	call	0x13864	; 0x13864 <LCDWIKI_KBV::reset()>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
   1506c:	68 ec       	ldi	r22, 0xC8	; 200
   1506e:	70 e0       	ldi	r23, 0x00	; 0
   15070:	80 e0       	ldi	r24, 0x00	; 0
   15072:	90 e0       	ldi	r25, 0x00	; 0
   15074:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
   15078:	06 39       	cpi	r16, 0x96	; 150
   1507a:	17 47       	sbci	r17, 0x77	; 119
   1507c:	b9 f5       	brne	.+110    	; 0x150ec <LCDWIKI_KBV::start(unsigned int)+0x90>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
   1507e:	89 e0       	ldi	r24, 0x09	; 9
   15080:	90 e0       	ldi	r25, 0x00	; 0
   15082:	99 8f       	std	Y+25, r25	; 0x19
   15084:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   15086:	8a e2       	ldi	r24, 0x2A	; 42
   15088:	90 e0       	ldi	r25, 0x00	; 0
   1508a:	9d 8f       	std	Y+29, r25	; 0x1d
   1508c:	8c 8f       	std	Y+28, r24	; 0x1c
   1508e:	8b e2       	ldi	r24, 0x2B	; 43
   15090:	90 e0       	ldi	r25, 0x00	; 0
   15092:	9f 8f       	std	Y+31, r25	; 0x1f
   15094:	8e 8f       	std	Y+30, r24	; 0x1e
   15096:	8c e2       	ldi	r24, 0x2C	; 44
   15098:	90 e0       	ldi	r25, 0x00	; 0
   1509a:	99 a3       	std	Y+33, r25	; 0x21
   1509c:	88 a3       	std	Y+32, r24	; 0x20
   1509e:	8e e2       	ldi	r24, 0x2E	; 46
   150a0:	90 e0       	ldi	r25, 0x00	; 0
   150a2:	9b a3       	std	Y+35, r25	; 0x23
   150a4:	8a a3       	std	Y+34, r24	; 0x22
   150a6:	83 e3       	ldi	r24, 0x33	; 51
   150a8:	90 e0       	ldi	r25, 0x00	; 0
   150aa:	9d a3       	std	Y+37, r25	; 0x25
   150ac:	8c a3       	std	Y+36, r24	; 0x24
   150ae:	87 e3       	ldi	r24, 0x37	; 55
   150b0:	90 e0       	ldi	r25, 0x00	; 0
   150b2:	9f a3       	std	Y+39, r25	; 0x27
   150b4:	8e a3       	std	Y+38, r24	; 0x26
   150b6:	86 e3       	ldi	r24, 0x36	; 54
   150b8:	90 e0       	ldi	r25, 0x00	; 0
   150ba:	99 a7       	std	Y+41, r25	; 0x29
   150bc:	88 a7       	std	Y+40, r24	; 0x28
   150be:	1b a6       	std	Y+43, r1	; 0x2b
   150c0:	1a a6       	std	Y+42, r1	; 0x2a
   150c2:	1d a6       	std	Y+45, r1	; 0x2d
   150c4:	1c a6       	std	Y+44, r1	; 0x2c
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:996
            	0xF0, 1, 0x69,
            	0x13, 0,
            	0x11, 0,
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
   150c6:	4c e6       	ldi	r20, 0x6C	; 108
   150c8:	50 e0       	ldi	r21, 0x00	; 0
   150ca:	60 e4       	ldi	r22, 0x40	; 64
   150cc:	72 e6       	ldi	r23, 0x62	; 98
   150ce:	ce 01       	movw	r24, r28
   150d0:	0e 94 d9 a7 	call	0x14fb2	; 0x14fb2 <LCDWIKI_KBV::init_table8(void const*, int)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
   150d4:	6e 89       	ldd	r22, Y+22	; 0x16
   150d6:	ce 01       	movw	r24, r28
   150d8:	0e 94 e5 a5 	call	0x14bca	; 0x14bca <LCDWIKI_KBV::Set_Rotation(unsigned char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1003
	Invert_Display(false);
   150dc:	60 e0       	ldi	r22, 0x00	; 0
   150de:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1004
}
   150e0:	df 91       	pop	r29
   150e2:	cf 91       	pop	r28
   150e4:	1f 91       	pop	r17
   150e6:	0f 91       	pop	r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1003
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
	Invert_Display(false);
   150e8:	0c 94 68 a7 	jmp	0x14ed0	; 0x14ed0 <LCDWIKI_KBV::Invert_Display(bool)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
   150ec:	8f ef       	ldi	r24, 0xFF	; 255
   150ee:	90 e0       	ldi	r25, 0x00	; 0
   150f0:	99 8f       	std	Y+25, r25	; 0x19
   150f2:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1000
			break;		
   150f4:	ef cf       	rjmp	.-34     	; 0x150d4 <LCDWIKI_KBV::start(unsigned int)+0x78>

000150f6 <LCDWIKI_KBV::Init_LCD()>:
_ZN11LCDWIKI_KBV8Init_LCDEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:233
}
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
   150f6:	cf 93       	push	r28
   150f8:	df 93       	push	r29
   150fa:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
	reset();
   150fc:	0e 94 32 9c 	call	0x13864	; 0x13864 <LCDWIKI_KBV::reset()>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
   15100:	8a 8d       	ldd	r24, Y+26	; 0x1a
   15102:	9b 8d       	ldd	r25, Y+27	; 0x1b
   15104:	01 96       	adiw	r24, 0x01	; 1
   15106:	29 f4       	brne	.+10     	; 0x15112 <LCDWIKI_KBV::Init_LCD()+0x1c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
	{
		lcd_model = Read_ID(); 
   15108:	ce 01       	movw	r24, r28
   1510a:	0e 94 8e a4 	call	0x1491c	; 0x1491c <LCDWIKI_KBV::Read_ID()>
   1510e:	9b 8f       	std	Y+27, r25	; 0x1b
   15110:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   15112:	6a 8d       	ldd	r22, Y+26	; 0x1a
   15114:	7b 8d       	ldd	r23, Y+27	; 0x1b
   15116:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:242
//	Set_Rotation(0);
}
   15118:	df 91       	pop	r29
   1511a:	cf 91       	pop	r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   1511c:	0c 94 2e a8 	jmp	0x1505c	; 0x1505c <LCDWIKI_KBV::start(unsigned int)>

00015120 <delay_hus(unsigned long)>:
_Z9delay_husm():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:414
}

void LCDWIKI_TOUCH::TP_Set_State(uint8_t val)
{
	touch_statue = val;
}
   15120:	0f 93       	push	r16
   15122:	1f 93       	push	r17
   15124:	40 e0       	ldi	r20, 0x00	; 0
   15126:	04 2f       	mov	r16, r20
   15128:	10 e0       	ldi	r17, 0x00	; 0
   1512a:	30 e0       	ldi	r19, 0x00	; 0
   1512c:	20 e0       	ldi	r18, 0x00	; 0
   1512e:	06 17       	cp	r16, r22
   15130:	17 07       	cpc	r17, r23
   15132:	28 07       	cpc	r18, r24
   15134:	39 07       	cpc	r19, r25
   15136:	18 f4       	brcc	.+6      	; 0x1513e <delay_hus(unsigned long)+0x1e>
   15138:	00 00       	nop
   1513a:	4f 5f       	subi	r20, 0xFF	; 255
   1513c:	f4 cf       	rjmp	.-24     	; 0x15126 <delay_hus(unsigned long)+0x6>
   1513e:	1f 91       	pop	r17
   15140:	0f 91       	pop	r16
   15142:	08 95       	ret

00015144 <LCDWIKI_TOUCH::LCDWIKI_TOUCH(signed char, signed char, signed char, signed char, signed char, signed char)>:
_ZN13LCDWIKI_TOUCHC2Eaaaaaa():
   15144:	8f 92       	push	r8
   15146:	9f 92       	push	r9
   15148:	af 92       	push	r10
   1514a:	bf 92       	push	r11
   1514c:	cf 92       	push	r12
   1514e:	df 92       	push	r13
   15150:	ef 92       	push	r14
   15152:	ff 92       	push	r15
   15154:	0f 93       	push	r16
   15156:	1f 93       	push	r17
   15158:	cf 93       	push	r28
   1515a:	df 93       	push	r29
   1515c:	ec 01       	movw	r28, r24
   1515e:	86 2e       	mov	r8, r22
   15160:	d4 2e       	mov	r13, r20
   15162:	f2 2e       	mov	r15, r18
   15164:	90 2e       	mov	r9, r16
   15166:	86 2f       	mov	r24, r22
   15168:	66 0f       	add	r22, r22
   1516a:	99 0b       	sbc	r25, r25
   1516c:	fc 01       	movw	r30, r24
   1516e:	e5 55       	subi	r30, 0x55	; 85
   15170:	fb 49       	sbci	r31, 0x9B	; 155
   15172:	e4 91       	lpm	r30, Z
   15174:	f0 e0       	ldi	r31, 0x00	; 0
   15176:	ee 0f       	add	r30, r30
   15178:	ff 1f       	adc	r31, r31
   1517a:	ef 50       	subi	r30, 0x0F	; 15
   1517c:	fb 49       	sbci	r31, 0x9B	; 155
   1517e:	25 91       	lpm	r18, Z+
   15180:	34 91       	lpm	r19, Z
   15182:	39 8b       	std	Y+17, r19	; 0x11
   15184:	28 8b       	std	Y+16, r18	; 0x10
   15186:	04 2f       	mov	r16, r20
   15188:	44 0f       	add	r20, r20
   1518a:	11 0b       	sbc	r17, r17
   1518c:	f8 01       	movw	r30, r16
   1518e:	e5 55       	subi	r30, 0x55	; 85
   15190:	fb 49       	sbci	r31, 0x9B	; 155
   15192:	e4 91       	lpm	r30, Z
   15194:	f0 e0       	ldi	r31, 0x00	; 0
   15196:	ee 0f       	add	r30, r30
   15198:	ff 1f       	adc	r31, r31
   1519a:	ef 50       	subi	r30, 0x0F	; 15
   1519c:	fb 49       	sbci	r31, 0x9B	; 155
   1519e:	25 91       	lpm	r18, Z+
   151a0:	34 91       	lpm	r19, Z
   151a2:	3b 8b       	std	Y+19, r19	; 0x13
   151a4:	2a 8b       	std	Y+18, r18	; 0x12
   151a6:	af 2d       	mov	r26, r15
   151a8:	0f 2c       	mov	r0, r15
   151aa:	00 0c       	add	r0, r0
   151ac:	bb 0b       	sbc	r27, r27
   151ae:	fd 01       	movw	r30, r26
   151b0:	e5 55       	subi	r30, 0x55	; 85
   151b2:	fb 49       	sbci	r31, 0x9B	; 155
   151b4:	e4 91       	lpm	r30, Z
   151b6:	f0 e0       	ldi	r31, 0x00	; 0
   151b8:	ee 0f       	add	r30, r30
   151ba:	ff 1f       	adc	r31, r31
   151bc:	ef 51       	subi	r30, 0x1F	; 31
   151be:	fb 49       	sbci	r31, 0x9B	; 155
   151c0:	25 91       	lpm	r18, Z+
   151c2:	34 91       	lpm	r19, Z
   151c4:	3d 8b       	std	Y+21, r19	; 0x15
   151c6:	2c 8b       	std	Y+20, r18	; 0x14
   151c8:	69 2d       	mov	r22, r9
   151ca:	09 2c       	mov	r0, r9
   151cc:	00 0c       	add	r0, r0
   151ce:	77 0b       	sbc	r23, r23
   151d0:	fb 01       	movw	r30, r22
   151d2:	e5 55       	subi	r30, 0x55	; 85
   151d4:	fb 49       	sbci	r31, 0x9B	; 155
   151d6:	e4 91       	lpm	r30, Z
   151d8:	f0 e0       	ldi	r31, 0x00	; 0
   151da:	ee 0f       	add	r30, r30
   151dc:	ff 1f       	adc	r31, r31
   151de:	ef 50       	subi	r30, 0x0F	; 15
   151e0:	fb 49       	sbci	r31, 0x9B	; 155
   151e2:	25 91       	lpm	r18, Z+
   151e4:	34 91       	lpm	r19, Z
   151e6:	3f 8b       	std	Y+23, r19	; 0x17
   151e8:	2e 8b       	std	Y+22, r18	; 0x16
   151ea:	4e 2d       	mov	r20, r14
   151ec:	0e 2c       	mov	r0, r14
   151ee:	00 0c       	add	r0, r0
   151f0:	55 0b       	sbc	r21, r21
   151f2:	fa 01       	movw	r30, r20
   151f4:	e5 55       	subi	r30, 0x55	; 85
   151f6:	fb 49       	sbci	r31, 0x9B	; 155
   151f8:	e4 91       	lpm	r30, Z
   151fa:	f0 e0       	ldi	r31, 0x00	; 0
   151fc:	ee 0f       	add	r30, r30
   151fe:	ff 1f       	adc	r31, r31
   15200:	ef 51       	subi	r30, 0x1F	; 31
   15202:	fb 49       	sbci	r31, 0x9B	; 155
   15204:	25 91       	lpm	r18, Z+
   15206:	34 91       	lpm	r19, Z
   15208:	39 8f       	std	Y+25, r19	; 0x19
   1520a:	28 8f       	std	Y+24, r18	; 0x18
   1520c:	2c 2d       	mov	r18, r12
   1520e:	0c 2c       	mov	r0, r12
   15210:	00 0c       	add	r0, r0
   15212:	33 0b       	sbc	r19, r19
   15214:	f9 01       	movw	r30, r18
   15216:	e5 55       	subi	r30, 0x55	; 85
   15218:	fb 49       	sbci	r31, 0x9B	; 155
   1521a:	e4 91       	lpm	r30, Z
   1521c:	f0 e0       	ldi	r31, 0x00	; 0
   1521e:	ee 0f       	add	r30, r30
   15220:	ff 1f       	adc	r31, r31
   15222:	ef 50       	subi	r30, 0x0F	; 15
   15224:	fb 49       	sbci	r31, 0x9B	; 155
   15226:	a5 90       	lpm	r10, Z+
   15228:	b4 90       	lpm	r11, Z
   1522a:	bb 8e       	std	Y+27, r11	; 0x1b
   1522c:	aa 8e       	std	Y+26, r10	; 0x1a
   1522e:	fc 01       	movw	r30, r24
   15230:	eb 58       	subi	r30, 0x8B	; 139
   15232:	fb 49       	sbci	r31, 0x9B	; 155
   15234:	e4 91       	lpm	r30, Z
   15236:	ec 8f       	std	Y+28, r30	; 0x1c
   15238:	f8 01       	movw	r30, r16
   1523a:	eb 58       	subi	r30, 0x8B	; 139
   1523c:	fb 49       	sbci	r31, 0x9B	; 155
   1523e:	e4 91       	lpm	r30, Z
   15240:	ed 8f       	std	Y+29, r30	; 0x1d
   15242:	fd 01       	movw	r30, r26
   15244:	eb 58       	subi	r30, 0x8B	; 139
   15246:	fb 49       	sbci	r31, 0x9B	; 155
   15248:	e4 91       	lpm	r30, Z
   1524a:	ee 8f       	std	Y+30, r30	; 0x1e
   1524c:	fb 01       	movw	r30, r22
   1524e:	eb 58       	subi	r30, 0x8B	; 139
   15250:	fb 49       	sbci	r31, 0x9B	; 155
   15252:	e4 91       	lpm	r30, Z
   15254:	ef 8f       	std	Y+31, r30	; 0x1f
   15256:	fa 01       	movw	r30, r20
   15258:	eb 58       	subi	r30, 0x8B	; 139
   1525a:	fb 49       	sbci	r31, 0x9B	; 155
   1525c:	e4 91       	lpm	r30, Z
   1525e:	e8 a3       	std	Y+32, r30	; 0x20
   15260:	f9 01       	movw	r30, r18
   15262:	eb 58       	subi	r30, 0x8B	; 139
   15264:	fb 49       	sbci	r31, 0x9B	; 155
   15266:	e4 91       	lpm	r30, Z
   15268:	e9 a3       	std	Y+33, r30	; 0x21
   1526a:	61 e0       	ldi	r22, 0x01	; 1
   1526c:	88 2d       	mov	r24, r8
   1526e:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   15272:	61 e0       	ldi	r22, 0x01	; 1
   15274:	8d 2d       	mov	r24, r13
   15276:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   1527a:	60 e0       	ldi	r22, 0x00	; 0
   1527c:	8f 2d       	mov	r24, r15
   1527e:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   15282:	61 e0       	ldi	r22, 0x01	; 1
   15284:	89 2d       	mov	r24, r9
   15286:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   1528a:	60 e0       	ldi	r22, 0x00	; 0
   1528c:	8e 2d       	mov	r24, r14
   1528e:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   15292:	61 e0       	ldi	r22, 0x01	; 1
   15294:	8c 2d       	mov	r24, r12
   15296:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   1529a:	1c 86       	std	Y+12, r1	; 0x0c
   1529c:	1d 86       	std	Y+13, r1	; 0x0d
   1529e:	1e 86       	std	Y+14, r1	; 0x0e
   152a0:	1f 86       	std	Y+15, r1	; 0x0f
   152a2:	19 86       	std	Y+9, r1	; 0x09
   152a4:	18 86       	std	Y+8, r1	; 0x08
   152a6:	1b 86       	std	Y+11, r1	; 0x0b
   152a8:	1a 86       	std	Y+10, r1	; 0x0a
   152aa:	19 82       	std	Y+1, r1	; 0x01
   152ac:	18 82       	st	Y, r1
   152ae:	1b 82       	std	Y+3, r1	; 0x03
   152b0:	1a 82       	std	Y+2, r1	; 0x02
   152b2:	8f ef       	ldi	r24, 0xFF	; 255
   152b4:	9f ef       	ldi	r25, 0xFF	; 255
   152b6:	9d 83       	std	Y+5, r25	; 0x05
   152b8:	8c 83       	std	Y+4, r24	; 0x04
   152ba:	9f 83       	std	Y+7, r25	; 0x07
   152bc:	8e 83       	std	Y+6, r24	; 0x06
   152be:	df 91       	pop	r29
   152c0:	cf 91       	pop	r28
   152c2:	1f 91       	pop	r17
   152c4:	0f 91       	pop	r16
   152c6:	ff 90       	pop	r15
   152c8:	ef 90       	pop	r14
   152ca:	df 90       	pop	r13
   152cc:	cf 90       	pop	r12
   152ce:	bf 90       	pop	r11
   152d0:	af 90       	pop	r10
   152d2:	9f 90       	pop	r9
   152d4:	8f 90       	pop	r8
   152d6:	08 95       	ret

000152d8 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>:
_ZN13LCDWIKI_TOUCH22TP_Write_Byte_LowSpeedEh():
   152d8:	ef 92       	push	r14
   152da:	ff 92       	push	r15
   152dc:	0f 93       	push	r16
   152de:	1f 93       	push	r17
   152e0:	cf 93       	push	r28
   152e2:	df 93       	push	r29
   152e4:	ec 01       	movw	r28, r24
   152e6:	f1 2c       	mov	r15, r1
   152e8:	e1 2c       	mov	r14, r1
   152ea:	06 2f       	mov	r16, r22
   152ec:	10 e0       	ldi	r17, 0x00	; 0
   152ee:	ee 89       	ldd	r30, Y+22	; 0x16
   152f0:	ff 89       	ldd	r31, Y+23	; 0x17
   152f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
   152f4:	98 01       	movw	r18, r16
   152f6:	0e 2c       	mov	r0, r14
   152f8:	02 c0       	rjmp	.+4      	; 0x152fe <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x26>
   152fa:	35 95       	asr	r19
   152fc:	27 95       	ror	r18
   152fe:	0a 94       	dec	r0
   15300:	e2 f7       	brpl	.-8      	; 0x152fa <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x22>
   15302:	90 81       	ld	r25, Z
   15304:	20 ff       	sbrs	r18, 0
   15306:	2f c0       	rjmp	.+94     	; 0x15366 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x8e>
   15308:	89 2b       	or	r24, r25
   1530a:	80 83       	st	Z, r24
   1530c:	60 e5       	ldi	r22, 0x50	; 80
   1530e:	70 e0       	ldi	r23, 0x00	; 0
   15310:	80 e0       	ldi	r24, 0x00	; 0
   15312:	90 e0       	ldi	r25, 0x00	; 0
   15314:	0e 94 90 a8 	call	0x15120	; 0x15120 <delay_hus(unsigned long)>
   15318:	ea 89       	ldd	r30, Y+18	; 0x12
   1531a:	fb 89       	ldd	r31, Y+19	; 0x13
   1531c:	90 81       	ld	r25, Z
   1531e:	8d 8d       	ldd	r24, Y+29	; 0x1d
   15320:	80 95       	com	r24
   15322:	89 23       	and	r24, r25
   15324:	80 83       	st	Z, r24
   15326:	68 e7       	ldi	r22, 0x78	; 120
   15328:	70 e0       	ldi	r23, 0x00	; 0
   1532a:	80 e0       	ldi	r24, 0x00	; 0
   1532c:	90 e0       	ldi	r25, 0x00	; 0
   1532e:	0e 94 90 a8 	call	0x15120	; 0x15120 <delay_hus(unsigned long)>
   15332:	ea 89       	ldd	r30, Y+18	; 0x12
   15334:	fb 89       	ldd	r31, Y+19	; 0x13
   15336:	80 81       	ld	r24, Z
   15338:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1533a:	89 2b       	or	r24, r25
   1533c:	80 83       	st	Z, r24
   1533e:	68 e7       	ldi	r22, 0x78	; 120
   15340:	70 e0       	ldi	r23, 0x00	; 0
   15342:	80 e0       	ldi	r24, 0x00	; 0
   15344:	90 e0       	ldi	r25, 0x00	; 0
   15346:	0e 94 90 a8 	call	0x15120	; 0x15120 <delay_hus(unsigned long)>
   1534a:	8f ef       	ldi	r24, 0xFF	; 255
   1534c:	e8 1a       	sub	r14, r24
   1534e:	f8 0a       	sbc	r15, r24
   15350:	88 e0       	ldi	r24, 0x08	; 8
   15352:	e8 16       	cp	r14, r24
   15354:	f1 04       	cpc	r15, r1
   15356:	59 f6       	brne	.-106    	; 0x152ee <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x16>
   15358:	df 91       	pop	r29
   1535a:	cf 91       	pop	r28
   1535c:	1f 91       	pop	r17
   1535e:	0f 91       	pop	r16
   15360:	ff 90       	pop	r15
   15362:	ef 90       	pop	r14
   15364:	08 95       	ret
   15366:	80 95       	com	r24
   15368:	89 23       	and	r24, r25
   1536a:	cf cf       	rjmp	.-98     	; 0x1530a <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x32>

0001536c <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>:
_ZN13LCDWIKI_TOUCH15TP_SetBacklightEh():
   1536c:	1f 93       	push	r17
   1536e:	cf 93       	push	r28
   15370:	df 93       	push	r29
   15372:	ec 01       	movw	r28, r24
   15374:	16 2f       	mov	r17, r22
   15376:	6f 87       	std	Y+15, r22	; 0x0f
   15378:	e8 89       	ldd	r30, Y+16	; 0x10
   1537a:	f9 89       	ldd	r31, Y+17	; 0x11
   1537c:	90 81       	ld	r25, Z
   1537e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   15380:	80 95       	com	r24
   15382:	89 23       	and	r24, r25
   15384:	80 83       	st	Z, r24
   15386:	ea 8d       	ldd	r30, Y+26	; 0x1a
   15388:	fb 8d       	ldd	r31, Y+27	; 0x1b
   1538a:	90 81       	ld	r25, Z
   1538c:	89 a1       	ldd	r24, Y+33	; 0x21
   1538e:	80 95       	com	r24
   15390:	89 23       	and	r24, r25
   15392:	80 83       	st	Z, r24
   15394:	68 ec       	ldi	r22, 0xC8	; 200
   15396:	70 e0       	ldi	r23, 0x00	; 0
   15398:	80 e0       	ldi	r24, 0x00	; 0
   1539a:	90 e0       	ldi	r25, 0x00	; 0
   1539c:	0e 94 90 a8 	call	0x15120	; 0x15120 <delay_hus(unsigned long)>
   153a0:	e8 89       	ldd	r30, Y+16	; 0x10
   153a2:	f9 89       	ldd	r31, Y+17	; 0x11
   153a4:	80 81       	ld	r24, Z
   153a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
   153a8:	89 2b       	or	r24, r25
   153aa:	80 83       	st	Z, r24
   153ac:	ea 8d       	ldd	r30, Y+26	; 0x1a
   153ae:	fb 8d       	ldd	r31, Y+27	; 0x1b
   153b0:	80 81       	ld	r24, Z
   153b2:	99 a1       	ldd	r25, Y+33	; 0x21
   153b4:	89 2b       	or	r24, r25
   153b6:	80 83       	st	Z, r24
   153b8:	65 e5       	ldi	r22, 0x55	; 85
   153ba:	ce 01       	movw	r24, r28
   153bc:	0e 94 6c a9 	call	0x152d8	; 0x152d8 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>
   153c0:	61 2f       	mov	r22, r17
   153c2:	ce 01       	movw	r24, r28
   153c4:	df 91       	pop	r29
   153c6:	cf 91       	pop	r28
   153c8:	1f 91       	pop	r17
   153ca:	0c 94 6c a9 	jmp	0x152d8	; 0x152d8 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>

000153ce <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>:
_ZN13LCDWIKI_TOUCH7TP_InitEhjj():
   153ce:	fc 01       	movw	r30, r24
   153d0:	a6 89       	ldd	r26, Z+22	; 0x16
   153d2:	b7 89       	ldd	r27, Z+23	; 0x17
   153d4:	8c 91       	ld	r24, X
   153d6:	97 8d       	ldd	r25, Z+31	; 0x1f
   153d8:	89 2b       	or	r24, r25
   153da:	8c 93       	st	X, r24
   153dc:	a2 89       	ldd	r26, Z+18	; 0x12
   153de:	b3 89       	ldd	r27, Z+19	; 0x13
   153e0:	8c 91       	ld	r24, X
   153e2:	95 8d       	ldd	r25, Z+29	; 0x1d
   153e4:	89 2b       	or	r24, r25
   153e6:	8c 93       	st	X, r24
   153e8:	a0 89       	ldd	r26, Z+16	; 0x10
   153ea:	b1 89       	ldd	r27, Z+17	; 0x11
   153ec:	8c 91       	ld	r24, X
   153ee:	94 8d       	ldd	r25, Z+28	; 0x1c
   153f0:	89 2b       	or	r24, r25
   153f2:	8c 93       	st	X, r24
   153f4:	a2 8d       	ldd	r26, Z+26	; 0x1a
   153f6:	b3 8d       	ldd	r27, Z+27	; 0x1b
   153f8:	8c 91       	ld	r24, X
   153fa:	91 a1       	ldd	r25, Z+33	; 0x21
   153fc:	89 2b       	or	r24, r25
   153fe:	8c 93       	st	X, r24
   15400:	51 87       	std	Z+9, r21	; 0x09
   15402:	40 87       	std	Z+8, r20	; 0x08
   15404:	33 87       	std	Z+11, r19	; 0x0b
   15406:	22 87       	std	Z+10, r18	; 0x0a
_ZN13LCDWIKI_TOUCH16LCD_Set_RotationEh():
   15408:	66 87       	std	Z+14, r22	; 0x0e
_ZN13LCDWIKI_TOUCH7TP_InitEhjj():
   1540a:	6a e0       	ldi	r22, 0x0A	; 10
   1540c:	cf 01       	movw	r24, r30
   1540e:	0c 94 b6 a9 	jmp	0x1536c	; 0x1536c <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>

00015412 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)>:
_ZN13LCDWIKI_TOUCH13TP_Write_ByteEh():
   15412:	fc 01       	movw	r30, r24
   15414:	28 e0       	ldi	r18, 0x08	; 8
   15416:	30 e0       	ldi	r19, 0x00	; 0
   15418:	90 e8       	ldi	r25, 0x80	; 128
   1541a:	a6 89       	ldd	r26, Z+22	; 0x16
   1541c:	b7 89       	ldd	r27, Z+23	; 0x17
   1541e:	87 8d       	ldd	r24, Z+31	; 0x1f
   15420:	46 2f       	mov	r20, r22
   15422:	49 23       	and	r20, r25
   15424:	a9 f0       	breq	.+42     	; 0x15450 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x3e>
   15426:	4c 91       	ld	r20, X
   15428:	84 2b       	or	r24, r20
   1542a:	8c 93       	st	X, r24
   1542c:	a2 89       	ldd	r26, Z+18	; 0x12
   1542e:	b3 89       	ldd	r27, Z+19	; 0x13
   15430:	4c 91       	ld	r20, X
   15432:	85 8d       	ldd	r24, Z+29	; 0x1d
   15434:	80 95       	com	r24
   15436:	84 23       	and	r24, r20
   15438:	8c 93       	st	X, r24
   1543a:	a2 89       	ldd	r26, Z+18	; 0x12
   1543c:	b3 89       	ldd	r27, Z+19	; 0x13
   1543e:	8c 91       	ld	r24, X
   15440:	45 8d       	ldd	r20, Z+29	; 0x1d
   15442:	84 2b       	or	r24, r20
   15444:	8c 93       	st	X, r24
   15446:	96 95       	lsr	r25
   15448:	21 50       	subi	r18, 0x01	; 1
   1544a:	31 09       	sbc	r19, r1
   1544c:	31 f7       	brne	.-52     	; 0x1541a <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x8>
   1544e:	08 95       	ret
   15450:	4c 91       	ld	r20, X
   15452:	80 95       	com	r24
   15454:	84 23       	and	r24, r20
   15456:	e9 cf       	rjmp	.-46     	; 0x1542a <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x18>

00015458 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)>:
_ZN13LCDWIKI_TOUCH11TP_Read_ADCEh():
   15458:	cf 93       	push	r28
   1545a:	df 93       	push	r29
   1545c:	ec 01       	movw	r28, r24
   1545e:	e8 89       	ldd	r30, Y+16	; 0x10
   15460:	f9 89       	ldd	r31, Y+17	; 0x11
   15462:	90 81       	ld	r25, Z
   15464:	8c 8d       	ldd	r24, Y+28	; 0x1c
   15466:	80 95       	com	r24
   15468:	89 23       	and	r24, r25
   1546a:	80 83       	st	Z, r24
   1546c:	ea 89       	ldd	r30, Y+18	; 0x12
   1546e:	fb 89       	ldd	r31, Y+19	; 0x13
   15470:	90 81       	ld	r25, Z
   15472:	8d 8d       	ldd	r24, Y+29	; 0x1d
   15474:	80 95       	com	r24
   15476:	89 23       	and	r24, r25
   15478:	80 83       	st	Z, r24
   1547a:	ee 89       	ldd	r30, Y+22	; 0x16
   1547c:	ff 89       	ldd	r31, Y+23	; 0x17
   1547e:	90 81       	ld	r25, Z
   15480:	8f 8d       	ldd	r24, Y+31	; 0x1f
   15482:	80 95       	com	r24
   15484:	89 23       	and	r24, r25
   15486:	80 83       	st	Z, r24
   15488:	ce 01       	movw	r24, r28
   1548a:	0e 94 09 aa 	call	0x15412	; 0x15412 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)>
   1548e:	ea 89       	ldd	r30, Y+18	; 0x12
   15490:	fb 89       	ldd	r31, Y+19	; 0x13
   15492:	90 81       	ld	r25, Z
   15494:	8d 8d       	ldd	r24, Y+29	; 0x1d
   15496:	80 95       	com	r24
   15498:	89 23       	and	r24, r25
   1549a:	80 83       	st	Z, r24
   1549c:	61 e0       	ldi	r22, 0x01	; 1
   1549e:	70 e0       	ldi	r23, 0x00	; 0
   154a0:	80 e0       	ldi	r24, 0x00	; 0
   154a2:	90 e0       	ldi	r25, 0x00	; 0
   154a4:	0e 94 90 a8 	call	0x15120	; 0x15120 <delay_hus(unsigned long)>
   154a8:	ea 89       	ldd	r30, Y+18	; 0x12
   154aa:	fb 89       	ldd	r31, Y+19	; 0x13
   154ac:	80 81       	ld	r24, Z
   154ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
   154b0:	89 2b       	or	r24, r25
   154b2:	80 83       	st	Z, r24
   154b4:	ea 89       	ldd	r30, Y+18	; 0x12
   154b6:	fb 89       	ldd	r31, Y+19	; 0x13
   154b8:	90 81       	ld	r25, Z
   154ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
   154bc:	80 95       	com	r24
   154be:	89 23       	and	r24, r25
   154c0:	80 83       	st	Z, r24
   154c2:	30 e1       	ldi	r19, 0x10	; 16
   154c4:	90 e0       	ldi	r25, 0x00	; 0
   154c6:	80 e0       	ldi	r24, 0x00	; 0
   154c8:	88 0f       	add	r24, r24
   154ca:	99 1f       	adc	r25, r25
   154cc:	ea 89       	ldd	r30, Y+18	; 0x12
   154ce:	fb 89       	ldd	r31, Y+19	; 0x13
   154d0:	40 81       	ld	r20, Z
   154d2:	2d 8d       	ldd	r18, Y+29	; 0x1d
   154d4:	20 95       	com	r18
   154d6:	24 23       	and	r18, r20
   154d8:	20 83       	st	Z, r18
   154da:	ea 89       	ldd	r30, Y+18	; 0x12
   154dc:	fb 89       	ldd	r31, Y+19	; 0x13
   154de:	20 81       	ld	r18, Z
   154e0:	4d 8d       	ldd	r20, Y+29	; 0x1d
   154e2:	24 2b       	or	r18, r20
   154e4:	20 83       	st	Z, r18
   154e6:	ec 89       	ldd	r30, Y+20	; 0x14
   154e8:	fd 89       	ldd	r31, Y+21	; 0x15
   154ea:	20 81       	ld	r18, Z
   154ec:	4e 8d       	ldd	r20, Y+30	; 0x1e
   154ee:	24 23       	and	r18, r20
   154f0:	09 f0       	breq	.+2      	; 0x154f4 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0x9c>
   154f2:	01 96       	adiw	r24, 0x01	; 1
   154f4:	31 50       	subi	r19, 0x01	; 1
   154f6:	41 f7       	brne	.-48     	; 0x154c8 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0x70>
   154f8:	e8 89       	ldd	r30, Y+16	; 0x10
   154fa:	f9 89       	ldd	r31, Y+17	; 0x11
   154fc:	20 81       	ld	r18, Z
   154fe:	3c 8d       	ldd	r19, Y+28	; 0x1c
   15500:	23 2b       	or	r18, r19
   15502:	20 83       	st	Z, r18
   15504:	24 e0       	ldi	r18, 0x04	; 4
   15506:	96 95       	lsr	r25
   15508:	87 95       	ror	r24
   1550a:	2a 95       	dec	r18
   1550c:	e1 f7       	brne	.-8      	; 0x15506 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0xae>
   1550e:	df 91       	pop	r29
   15510:	cf 91       	pop	r28
   15512:	08 95       	ret

00015514 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh():
   15514:	9f 92       	push	r9
   15516:	af 92       	push	r10
   15518:	bf 92       	push	r11
   1551a:	cf 92       	push	r12
   1551c:	df 92       	push	r13
   1551e:	ef 92       	push	r14
   15520:	ff 92       	push	r15
   15522:	0f 93       	push	r16
   15524:	1f 93       	push	r17
   15526:	cf 93       	push	r28
   15528:	df 93       	push	r29
   1552a:	00 d0       	rcall	.+0      	; 0x1552c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x18>
   1552c:	00 d0       	rcall	.+0      	; 0x1552e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x1a>
   1552e:	00 d0       	rcall	.+0      	; 0x15530 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x1c>
   15530:	1f 92       	push	r1
   15532:	cd b7       	in	r28, 0x3d	; 61
   15534:	de b7       	in	r29, 0x3e	; 62
   15536:	5c 01       	movw	r10, r24
   15538:	96 2e       	mov	r9, r22
   1553a:	8e 01       	movw	r16, r28
   1553c:	0f 5f       	subi	r16, 0xFF	; 255
   1553e:	1f 4f       	sbci	r17, 0xFF	; 255
   15540:	6e 01       	movw	r12, r28
   15542:	8b e0       	ldi	r24, 0x0B	; 11
   15544:	c8 0e       	add	r12, r24
   15546:	d1 1c       	adc	r13, r1
   15548:	78 01       	movw	r14, r16
   1554a:	69 2d       	mov	r22, r9
   1554c:	c5 01       	movw	r24, r10
   1554e:	0e 94 2c aa 	call	0x15458	; 0x15458 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)>
   15552:	d7 01       	movw	r26, r14
   15554:	8d 93       	st	X+, r24
   15556:	9d 93       	st	X+, r25
   15558:	7d 01       	movw	r14, r26
   1555a:	ac 15       	cp	r26, r12
   1555c:	bd 05       	cpc	r27, r13
   1555e:	a9 f7       	brne	.-22     	; 0x1554a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x36>
   15560:	a8 01       	movw	r20, r16
   15562:	48 5f       	subi	r20, 0xF8	; 248
   15564:	5f 4f       	sbci	r21, 0xFF	; 255
   15566:	f8 01       	movw	r30, r16
   15568:	d8 01       	movw	r26, r16
   1556a:	8d 91       	ld	r24, X+
   1556c:	9c 91       	ld	r25, X
   1556e:	11 97       	sbiw	r26, 0x01	; 1
   15570:	22 81       	ldd	r18, Z+2	; 0x02
   15572:	33 81       	ldd	r19, Z+3	; 0x03
   15574:	28 17       	cp	r18, r24
   15576:	39 07       	cpc	r19, r25
   15578:	20 f4       	brcc	.+8      	; 0x15582 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x6e>
   1557a:	2d 93       	st	X+, r18
   1557c:	3c 93       	st	X, r19
   1557e:	93 83       	std	Z+3, r25	; 0x03
   15580:	82 83       	std	Z+2, r24	; 0x02
   15582:	32 96       	adiw	r30, 0x02	; 2
   15584:	e4 17       	cp	r30, r20
   15586:	f5 07       	cpc	r31, r21
   15588:	79 f7       	brne	.-34     	; 0x15568 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x54>
   1558a:	0e 5f       	subi	r16, 0xFE	; 254
   1558c:	1f 4f       	sbci	r17, 0xFF	; 255
   1558e:	e0 17       	cp	r30, r16
   15590:	f1 07       	cpc	r31, r17
   15592:	49 f7       	brne	.-46     	; 0x15566 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x52>
   15594:	8b 81       	ldd	r24, Y+3	; 0x03
   15596:	9c 81       	ldd	r25, Y+4	; 0x04
   15598:	2d 81       	ldd	r18, Y+5	; 0x05
   1559a:	3e 81       	ldd	r19, Y+6	; 0x06
   1559c:	82 0f       	add	r24, r18
   1559e:	93 1f       	adc	r25, r19
   155a0:	2f 81       	ldd	r18, Y+7	; 0x07
   155a2:	38 85       	ldd	r19, Y+8	; 0x08
   155a4:	82 0f       	add	r24, r18
   155a6:	93 1f       	adc	r25, r19
   155a8:	63 e0       	ldi	r22, 0x03	; 3
   155aa:	70 e0       	ldi	r23, 0x00	; 0
   155ac:	0e 94 06 de 	call	0x1bc0c	; 0x1bc0c <__udivmodhi4>
   155b0:	cb 01       	movw	r24, r22
   155b2:	2a 96       	adiw	r28, 0x0a	; 10
   155b4:	0f b6       	in	r0, 0x3f	; 63
   155b6:	f8 94       	cli
   155b8:	de bf       	out	0x3e, r29	; 62
   155ba:	0f be       	out	0x3f, r0	; 63
   155bc:	cd bf       	out	0x3d, r28	; 61
   155be:	df 91       	pop	r29
   155c0:	cf 91       	pop	r28
   155c2:	1f 91       	pop	r17
   155c4:	0f 91       	pop	r16
   155c6:	ff 90       	pop	r15
   155c8:	ef 90       	pop	r14
   155ca:	df 90       	pop	r13
   155cc:	cf 90       	pop	r12
   155ce:	bf 90       	pop	r11
   155d0:	af 90       	pop	r10
   155d2:	9f 90       	pop	r9
   155d4:	08 95       	ret

000155d6 <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>:
_ZN13LCDWIKI_TOUCH18TP_Read_CoordinateEPjS0_():
   155d6:	cf 92       	push	r12
   155d8:	df 92       	push	r13
   155da:	ef 92       	push	r14
   155dc:	ff 92       	push	r15
   155de:	0f 93       	push	r16
   155e0:	1f 93       	push	r17
   155e2:	cf 93       	push	r28
   155e4:	df 93       	push	r29
   155e6:	ec 01       	movw	r28, r24
   155e8:	7b 01       	movw	r14, r22
   155ea:	8a 01       	movw	r16, r20
   155ec:	60 ed       	ldi	r22, 0xD0	; 208
   155ee:	0e 94 8a aa 	call	0x15514	; 0x15514 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>
   155f2:	6c 01       	movw	r12, r24
   155f4:	60 e9       	ldi	r22, 0x90	; 144
   155f6:	ce 01       	movw	r24, r28
   155f8:	0e 94 8a aa 	call	0x15514	; 0x15514 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>
   155fc:	f7 01       	movw	r30, r14
   155fe:	d1 82       	std	Z+1, r13	; 0x01
   15600:	c0 82       	st	Z, r12
   15602:	f8 01       	movw	r30, r16
   15604:	91 83       	std	Z+1, r25	; 0x01
   15606:	80 83       	st	Z, r24
   15608:	81 e0       	ldi	r24, 0x01	; 1
   1560a:	df 91       	pop	r29
   1560c:	cf 91       	pop	r28
   1560e:	1f 91       	pop	r17
   15610:	0f 91       	pop	r16
   15612:	ff 90       	pop	r15
   15614:	ef 90       	pop	r14
   15616:	df 90       	pop	r13
   15618:	cf 90       	pop	r12
   1561a:	08 95       	ret

0001561c <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>:
_ZN13LCDWIKI_TOUCH19TP_Read_Coordinate2EPjS0_():
   1561c:	cf 92       	push	r12
   1561e:	df 92       	push	r13
   15620:	ef 92       	push	r14
   15622:	ff 92       	push	r15
   15624:	0f 93       	push	r16
   15626:	1f 93       	push	r17
   15628:	cf 93       	push	r28
   1562a:	df 93       	push	r29
   1562c:	00 d0       	rcall	.+0      	; 0x1562e <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x12>
   1562e:	00 d0       	rcall	.+0      	; 0x15630 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x14>
   15630:	1f 92       	push	r1
   15632:	1f 92       	push	r1
   15634:	cd b7       	in	r28, 0x3d	; 61
   15636:	de b7       	in	r29, 0x3e	; 62
   15638:	6c 01       	movw	r12, r24
   1563a:	7b 01       	movw	r14, r22
   1563c:	8a 01       	movw	r16, r20
   1563e:	ae 01       	movw	r20, r28
   15640:	4b 5f       	subi	r20, 0xFB	; 251
   15642:	5f 4f       	sbci	r21, 0xFF	; 255
   15644:	be 01       	movw	r22, r28
   15646:	69 5f       	subi	r22, 0xF9	; 249
   15648:	7f 4f       	sbci	r23, 0xFF	; 255
   1564a:	0e 94 eb aa 	call	0x155d6	; 0x155d6 <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>
   1564e:	81 11       	cpse	r24, r1
   15650:	10 c0       	rjmp	.+32     	; 0x15672 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x56>
   15652:	80 e0       	ldi	r24, 0x00	; 0
   15654:	28 96       	adiw	r28, 0x08	; 8
   15656:	0f b6       	in	r0, 0x3f	; 63
   15658:	f8 94       	cli
   1565a:	de bf       	out	0x3e, r29	; 62
   1565c:	0f be       	out	0x3f, r0	; 63
   1565e:	cd bf       	out	0x3d, r28	; 61
   15660:	df 91       	pop	r29
   15662:	cf 91       	pop	r28
   15664:	1f 91       	pop	r17
   15666:	0f 91       	pop	r16
   15668:	ff 90       	pop	r15
   1566a:	ef 90       	pop	r14
   1566c:	df 90       	pop	r13
   1566e:	cf 90       	pop	r12
   15670:	08 95       	ret
   15672:	ae 01       	movw	r20, r28
   15674:	4f 5f       	subi	r20, 0xFF	; 255
   15676:	5f 4f       	sbci	r21, 0xFF	; 255
   15678:	be 01       	movw	r22, r28
   1567a:	6d 5f       	subi	r22, 0xFD	; 253
   1567c:	7f 4f       	sbci	r23, 0xFF	; 255
   1567e:	c6 01       	movw	r24, r12
   15680:	0e 94 eb aa 	call	0x155d6	; 0x155d6 <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>
   15684:	88 23       	and	r24, r24
   15686:	29 f3       	breq	.-54     	; 0x15652 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   15688:	2b 81       	ldd	r18, Y+3	; 0x03
   1568a:	3c 81       	ldd	r19, Y+4	; 0x04
   1568c:	6f 81       	ldd	r22, Y+7	; 0x07
   1568e:	78 85       	ldd	r23, Y+8	; 0x08
   15690:	62 17       	cp	r22, r18
   15692:	73 07       	cpc	r23, r19
   15694:	40 f0       	brcs	.+16     	; 0x156a6 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x8a>
   15696:	c9 01       	movw	r24, r18
   15698:	c2 96       	adiw	r24, 0x32	; 50
   1569a:	68 17       	cp	r22, r24
   1569c:	79 07       	cpc	r23, r25
   1569e:	40 f0       	brcs	.+16     	; 0x156b0 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x94>
   156a0:	26 17       	cp	r18, r22
   156a2:	37 07       	cpc	r19, r23
   156a4:	b0 f2       	brcs	.-84     	; 0x15652 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   156a6:	cb 01       	movw	r24, r22
   156a8:	c2 96       	adiw	r24, 0x32	; 50
   156aa:	28 17       	cp	r18, r24
   156ac:	39 07       	cpc	r19, r25
   156ae:	88 f6       	brcc	.-94     	; 0x15652 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   156b0:	89 81       	ldd	r24, Y+1	; 0x01
   156b2:	9a 81       	ldd	r25, Y+2	; 0x02
   156b4:	4d 81       	ldd	r20, Y+5	; 0x05
   156b6:	5e 81       	ldd	r21, Y+6	; 0x06
   156b8:	48 17       	cp	r20, r24
   156ba:	59 07       	cpc	r21, r25
   156bc:	40 f0       	brcs	.+16     	; 0x156ce <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xb2>
   156be:	fc 01       	movw	r30, r24
   156c0:	f2 96       	adiw	r30, 0x32	; 50
   156c2:	4e 17       	cp	r20, r30
   156c4:	5f 07       	cpc	r21, r31
   156c6:	48 f0       	brcs	.+18     	; 0x156da <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xbe>
   156c8:	84 17       	cp	r24, r20
   156ca:	95 07       	cpc	r25, r21
   156cc:	10 f2       	brcs	.-124    	; 0x15652 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   156ce:	fa 01       	movw	r30, r20
   156d0:	f2 96       	adiw	r30, 0x32	; 50
   156d2:	8e 17       	cp	r24, r30
   156d4:	9f 07       	cpc	r25, r31
   156d6:	08 f0       	brcs	.+2      	; 0x156da <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xbe>
   156d8:	bc cf       	rjmp	.-136    	; 0x15652 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   156da:	26 0f       	add	r18, r22
   156dc:	37 1f       	adc	r19, r23
   156de:	36 95       	lsr	r19
   156e0:	27 95       	ror	r18
   156e2:	f7 01       	movw	r30, r14
   156e4:	31 83       	std	Z+1, r19	; 0x01
   156e6:	20 83       	st	Z, r18
   156e8:	84 0f       	add	r24, r20
   156ea:	95 1f       	adc	r25, r21
   156ec:	96 95       	lsr	r25
   156ee:	87 95       	ror	r24
   156f0:	f8 01       	movw	r30, r16
   156f2:	91 83       	std	Z+1, r25	; 0x01
   156f4:	80 83       	st	Z, r24
   156f6:	81 e0       	ldi	r24, 0x01	; 1
   156f8:	ad cf       	rjmp	.-166    	; 0x15654 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x38>

000156fa <LCDWIKI_TOUCH::TP_Scan(unsigned char)>:
_ZN13LCDWIKI_TOUCH7TP_ScanEh():
   156fa:	cf 92       	push	r12
   156fc:	df 92       	push	r13
   156fe:	ef 92       	push	r14
   15700:	ff 92       	push	r15
   15702:	0f 93       	push	r16
   15704:	1f 93       	push	r17
   15706:	cf 93       	push	r28
   15708:	df 93       	push	r29
   1570a:	ec 01       	movw	r28, r24
   1570c:	96 2f       	mov	r25, r22
   1570e:	e8 8d       	ldd	r30, Y+24	; 0x18
   15710:	f9 8d       	ldd	r31, Y+25	; 0x19
   15712:	80 81       	ld	r24, Z
   15714:	28 a1       	ldd	r18, Y+32	; 0x20
   15716:	82 23       	and	r24, r18
   15718:	09 f0       	breq	.+2      	; 0x1571c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x22>
   1571a:	ae c0       	rjmp	.+348    	; 0x15878 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x17e>
   1571c:	ae 01       	movw	r20, r28
   1571e:	4a 5f       	subi	r20, 0xFA	; 250
   15720:	5f 4f       	sbci	r21, 0xFF	; 255
   15722:	be 01       	movw	r22, r28
   15724:	6c 5f       	subi	r22, 0xFC	; 252
   15726:	7f 4f       	sbci	r23, 0xFF	; 255
   15728:	99 23       	and	r25, r25
   1572a:	d9 f0       	breq	.+54     	; 0x15762 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x68>
   1572c:	ce 01       	movw	r24, r28
   1572e:	0e 94 0e ab 	call	0x1561c	; 0x1561c <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>
   15732:	8c 85       	ldd	r24, Y+12	; 0x0c
   15734:	87 fd       	sbrc	r24, 7
   15736:	0a c0       	rjmp	.+20     	; 0x1574c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>
   15738:	80 ec       	ldi	r24, 0xC0	; 192
   1573a:	8c 87       	std	Y+12, r24	; 0x0c
   1573c:	8c 81       	ldd	r24, Y+4	; 0x04
   1573e:	9d 81       	ldd	r25, Y+5	; 0x05
   15740:	99 83       	std	Y+1, r25	; 0x01
   15742:	88 83       	st	Y, r24
   15744:	8e 81       	ldd	r24, Y+6	; 0x06
   15746:	9f 81       	ldd	r25, Y+7	; 0x07
   15748:	9b 83       	std	Y+3, r25	; 0x03
   1574a:	8a 83       	std	Y+2, r24	; 0x02
   1574c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1574e:	80 78       	andi	r24, 0x80	; 128
   15750:	df 91       	pop	r29
   15752:	cf 91       	pop	r28
   15754:	1f 91       	pop	r17
   15756:	0f 91       	pop	r16
   15758:	ff 90       	pop	r15
   1575a:	ef 90       	pop	r14
   1575c:	df 90       	pop	r13
   1575e:	cf 90       	pop	r12
   15760:	08 95       	ret
   15762:	ce 01       	movw	r24, r28
   15764:	0e 94 0e ab 	call	0x1561c	; 0x1561c <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>
   15768:	88 23       	and	r24, r24
   1576a:	19 f3       	breq	.-58     	; 0x15732 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1576c:	2c 81       	ldd	r18, Y+4	; 0x04
   1576e:	3d 81       	ldd	r19, Y+5	; 0x05
   15770:	a4 e5       	ldi	r26, 0x54	; 84
   15772:	b3 e0       	ldi	r27, 0x03	; 3
   15774:	0e 94 77 de 	call	0x1bcee	; 0x1bcee <__umulhisi3>
   15778:	20 e1       	ldi	r18, 0x10	; 16
   1577a:	c2 2e       	mov	r12, r18
   1577c:	27 e2       	ldi	r18, 0x27	; 39
   1577e:	d2 2e       	mov	r13, r18
   15780:	e1 2c       	mov	r14, r1
   15782:	f1 2c       	mov	r15, r1
   15784:	a7 01       	movw	r20, r14
   15786:	96 01       	movw	r18, r12
   15788:	0e 94 50 de 	call	0x1bca0	; 0x1bca0 <__divmodsi4>
   1578c:	89 01       	movw	r16, r18
   1578e:	0e 50       	subi	r16, 0x0E	; 14
   15790:	11 09       	sbc	r17, r1
   15792:	1d 83       	std	Y+5, r17	; 0x05
   15794:	0c 83       	std	Y+4, r16	; 0x04
   15796:	2e 81       	ldd	r18, Y+6	; 0x06
   15798:	3f 81       	ldd	r19, Y+7	; 0x07
   1579a:	a4 e0       	ldi	r26, 0x04	; 4
   1579c:	b5 e0       	ldi	r27, 0x05	; 5
   1579e:	0e 94 77 de 	call	0x1bcee	; 0x1bcee <__umulhisi3>
   157a2:	a7 01       	movw	r20, r14
   157a4:	96 01       	movw	r18, r12
   157a6:	0e 94 50 de 	call	0x1bca0	; 0x1bca0 <__divmodsi4>
   157aa:	2e 51       	subi	r18, 0x1E	; 30
   157ac:	31 09       	sbc	r19, r1
   157ae:	3f 83       	std	Y+7, r19	; 0x07
   157b0:	2e 83       	std	Y+6, r18	; 0x06
   157b2:	8d 85       	ldd	r24, Y+13	; 0x0d
   157b4:	81 30       	cpi	r24, 0x01	; 1
   157b6:	a9 f1       	breq	.+106    	; 0x15822 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x128>
   157b8:	90 f0       	brcs	.+36     	; 0x157de <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xe4>
   157ba:	82 30       	cpi	r24, 0x02	; 2
   157bc:	09 f4       	brne	.+2      	; 0x157c0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xc6>
   157be:	53 c0       	rjmp	.+166    	; 0x15866 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x16c>
   157c0:	83 30       	cpi	r24, 0x03	; 3
   157c2:	09 f0       	breq	.+2      	; 0x157c6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xcc>
   157c4:	b6 cf       	rjmp	.-148    	; 0x15732 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   157c6:	8e 85       	ldd	r24, Y+14	; 0x0e
   157c8:	88 23       	and	r24, r24
   157ca:	e1 f1       	breq	.+120    	; 0x15844 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x14a>
   157cc:	81 30       	cpi	r24, 0x01	; 1
   157ce:	09 f4       	brne	.+2      	; 0x157d2 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xd8>
   157d0:	43 c0       	rjmp	.+134    	; 0x15858 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x15e>
   157d2:	82 30       	cpi	r24, 0x02	; 2
   157d4:	49 f1       	breq	.+82     	; 0x15828 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x12e>
   157d6:	83 30       	cpi	r24, 0x03	; 3
   157d8:	09 f0       	breq	.+2      	; 0x157dc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xe2>
   157da:	ab cf       	rjmp	.-170    	; 0x15732 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   157dc:	2c c0       	rjmp	.+88     	; 0x15836 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x13c>
   157de:	8e 85       	ldd	r24, Y+14	; 0x0e
   157e0:	88 23       	and	r24, r24
   157e2:	09 f4       	brne	.+2      	; 0x157e6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xec>
   157e4:	a6 cf       	rjmp	.-180    	; 0x15732 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   157e6:	81 30       	cpi	r24, 0x01	; 1
   157e8:	39 f4       	brne	.+14     	; 0x157f8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xfe>
   157ea:	3d 83       	std	Y+5, r19	; 0x05
   157ec:	2c 83       	std	Y+4, r18	; 0x04
   157ee:	8a 85       	ldd	r24, Y+10	; 0x0a
   157f0:	9b 85       	ldd	r25, Y+11	; 0x0b
   157f2:	80 1b       	sub	r24, r16
   157f4:	91 0b       	sbc	r25, r17
   157f6:	2a c0       	rjmp	.+84     	; 0x1584c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x152>
   157f8:	82 30       	cpi	r24, 0x02	; 2
   157fa:	39 f4       	brne	.+14     	; 0x1580a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x110>
   157fc:	88 85       	ldd	r24, Y+8	; 0x08
   157fe:	99 85       	ldd	r25, Y+9	; 0x09
   15800:	80 1b       	sub	r24, r16
   15802:	91 0b       	sbc	r25, r17
   15804:	9d 83       	std	Y+5, r25	; 0x05
   15806:	8c 83       	std	Y+4, r24	; 0x04
   15808:	1d c0       	rjmp	.+58     	; 0x15844 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x14a>
   1580a:	83 30       	cpi	r24, 0x03	; 3
   1580c:	09 f0       	breq	.+2      	; 0x15810 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x116>
   1580e:	91 cf       	rjmp	.-222    	; 0x15732 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15810:	1f 83       	std	Y+7, r17	; 0x07
   15812:	0e 83       	std	Y+6, r16	; 0x06
   15814:	88 85       	ldd	r24, Y+8	; 0x08
   15816:	99 85       	ldd	r25, Y+9	; 0x09
   15818:	82 1b       	sub	r24, r18
   1581a:	93 0b       	sbc	r25, r19
   1581c:	9d 83       	std	Y+5, r25	; 0x05
   1581e:	8c 83       	std	Y+4, r24	; 0x04
   15820:	88 cf       	rjmp	.-240    	; 0x15732 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15822:	8e 85       	ldd	r24, Y+14	; 0x0e
   15824:	81 11       	cpse	r24, r1
   15826:	05 c0       	rjmp	.+10     	; 0x15832 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x138>
   15828:	88 85       	ldd	r24, Y+8	; 0x08
   1582a:	99 85       	ldd	r25, Y+9	; 0x09
   1582c:	80 1b       	sub	r24, r16
   1582e:	91 0b       	sbc	r25, r17
   15830:	f5 cf       	rjmp	.-22     	; 0x1581c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x122>
   15832:	81 30       	cpi	r24, 0x01	; 1
   15834:	29 f4       	brne	.+10     	; 0x15840 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x146>
   15836:	3d 83       	std	Y+5, r19	; 0x05
   15838:	2c 83       	std	Y+4, r18	; 0x04
   1583a:	1f 83       	std	Y+7, r17	; 0x07
   1583c:	0e 83       	std	Y+6, r16	; 0x06
   1583e:	79 cf       	rjmp	.-270    	; 0x15732 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15840:	82 30       	cpi	r24, 0x02	; 2
   15842:	39 f4       	brne	.+14     	; 0x15852 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x158>
   15844:	8a 85       	ldd	r24, Y+10	; 0x0a
   15846:	9b 85       	ldd	r25, Y+11	; 0x0b
   15848:	82 1b       	sub	r24, r18
   1584a:	93 0b       	sbc	r25, r19
   1584c:	9f 83       	std	Y+7, r25	; 0x07
   1584e:	8e 83       	std	Y+6, r24	; 0x06
   15850:	70 cf       	rjmp	.-288    	; 0x15732 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15852:	83 30       	cpi	r24, 0x03	; 3
   15854:	09 f0       	breq	.+2      	; 0x15858 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x15e>
   15856:	6d cf       	rjmp	.-294    	; 0x15732 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15858:	88 85       	ldd	r24, Y+8	; 0x08
   1585a:	99 85       	ldd	r25, Y+9	; 0x09
   1585c:	82 1b       	sub	r24, r18
   1585e:	93 0b       	sbc	r25, r19
   15860:	9d 83       	std	Y+5, r25	; 0x05
   15862:	8c 83       	std	Y+4, r24	; 0x04
   15864:	c4 cf       	rjmp	.-120    	; 0x157ee <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xf4>
   15866:	8e 85       	ldd	r24, Y+14	; 0x0e
   15868:	88 23       	and	r24, r24
   1586a:	41 f2       	breq	.-112    	; 0x157fc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x102>
   1586c:	81 30       	cpi	r24, 0x01	; 1
   1586e:	81 f2       	breq	.-96     	; 0x15810 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x116>
   15870:	83 30       	cpi	r24, 0x03	; 3
   15872:	09 f0       	breq	.+2      	; 0x15876 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x17c>
   15874:	5e cf       	rjmp	.-324    	; 0x15732 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15876:	b9 cf       	rjmp	.-142    	; 0x157ea <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xf0>
   15878:	8c 85       	ldd	r24, Y+12	; 0x0c
   1587a:	87 ff       	sbrs	r24, 7
   1587c:	03 c0       	rjmp	.+6      	; 0x15884 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x18a>
   1587e:	8f 77       	andi	r24, 0x7F	; 127
   15880:	8c 87       	std	Y+12, r24	; 0x0c
   15882:	64 cf       	rjmp	.-312    	; 0x1574c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>
   15884:	19 82       	std	Y+1, r1	; 0x01
   15886:	18 82       	st	Y, r1
   15888:	1b 82       	std	Y+3, r1	; 0x03
   1588a:	1a 82       	std	Y+2, r1	; 0x02
   1588c:	8f ef       	ldi	r24, 0xFF	; 255
   1588e:	9f ef       	ldi	r25, 0xFF	; 255
   15890:	9d 83       	std	Y+5, r25	; 0x05
   15892:	8c 83       	std	Y+4, r24	; 0x04
   15894:	9f 83       	std	Y+7, r25	; 0x07
   15896:	8e 83       	std	Y+6, r24	; 0x06
   15898:	59 cf       	rjmp	.-334    	; 0x1574c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>

0001589a <LCDWIKI_TOUCH::TP_Set_Rotation(unsigned char)>:
_ZN13LCDWIKI_TOUCH15TP_Set_RotationEh():
   1589a:	fc 01       	movw	r30, r24
   1589c:	65 87       	std	Z+13, r22	; 0x0d
   1589e:	08 95       	ret

000158a0 <LCDWIKI_TOUCH::TP_Get_State() const>:
_ZNK13LCDWIKI_TOUCH12TP_Get_StateEv():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:419

uint8_t LCDWIKI_TOUCH::TP_Get_State(void) const
{
	return touch_statue;
}
   158a0:	fc 01       	movw	r30, r24
   158a2:	84 85       	ldd	r24, Z+12	; 0x0c
   158a4:	08 95       	ret

000158a6 <SoftSPIB::SoftSPIB(unsigned char, unsigned char, unsigned char)>:
_ZN8SoftSPIBC2Ehhh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:48
            _cke = 0;
            break;
        case SPI_MODE3:
            _ckp = 1;
            _cke = 1;
            break;
   158a6:	fc 01       	movw	r30, r24
   158a8:	82 2f       	mov	r24, r18
   158aa:	64 83       	std	Z+4, r22	; 0x04
   158ac:	43 83       	std	Z+3, r20	; 0x03
   158ae:	25 83       	std	Z+5, r18	; 0x05
   158b0:	92 e0       	ldi	r25, 0x02	; 2
   158b2:	92 83       	std	Z+2, r25	; 0x02
   158b4:	10 82       	st	Z, r1
   158b6:	11 82       	std	Z+1, r1	; 0x01
   158b8:	16 82       	std	Z+6, r1	; 0x06
   158ba:	60 e0       	ldi	r22, 0x00	; 0
   158bc:	0c 94 31 d8 	jmp	0x1b062	; 0x1b062 <digitalWrite>

000158c0 <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
   158c0:	cf 93       	push	r28
   158c2:	df 93       	push	r29
   158c4:	ec 01       	movw	r28, r24
   158c6:	61 e0       	ldi	r22, 0x01	; 1
   158c8:	8c 81       	ldd	r24, Y+4	; 0x04
   158ca:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   158ce:	60 e0       	ldi	r22, 0x00	; 0
   158d0:	8b 81       	ldd	r24, Y+3	; 0x03
   158d2:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   158d6:	61 e0       	ldi	r22, 0x01	; 1
   158d8:	8d 81       	ldd	r24, Y+5	; 0x05
   158da:	df 91       	pop	r29
   158dc:	cf 91       	pop	r28
   158de:	0c 94 f5 d7 	jmp	0x1afea	; 0x1afea <pinMode>

000158e2 <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
   158e2:	8f 92       	push	r8
   158e4:	9f 92       	push	r9
   158e6:	af 92       	push	r10
   158e8:	bf 92       	push	r11
   158ea:	cf 92       	push	r12
   158ec:	df 92       	push	r13
   158ee:	ff 92       	push	r15
   158f0:	0f 93       	push	r16
   158f2:	1f 93       	push	r17
   158f4:	cf 93       	push	r28
   158f6:	df 93       	push	r29
   158f8:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
   158fa:	fc 01       	movw	r30, r24
   158fc:	86 81       	ldd	r24, Z+6	; 0x06
   158fe:	81 11       	cpse	r24, r1
   15900:	35 c0       	rjmp	.+106    	; 0x1596c <SoftSPIB::transfer(unsigned char)+0x8a>
   15902:	86 2f       	mov	r24, r22
   15904:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
   15906:	ec 01       	movw	r28, r24
   15908:	d6 95       	lsr	r29
   1590a:	dc 2f       	mov	r29, r28
   1590c:	cc 27       	eor	r28, r28
   1590e:	d7 95       	ror	r29
   15910:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
   15912:	66 1f       	adc	r22, r22
   15914:	66 27       	eor	r22, r22
   15916:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   15918:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
   1591a:	ec 01       	movw	r28, r24
   1591c:	35 e0       	ldi	r19, 0x05	; 5
   1591e:	cc 0f       	add	r28, r28
   15920:	dd 1f       	adc	r29, r29
   15922:	3a 95       	dec	r19
   15924:	e1 f7       	brne	.-8      	; 0x1591e <SoftSPIB::transfer(unsigned char)+0x3c>
   15926:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   15928:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
   1592a:	ec 01       	movw	r28, r24
   1592c:	43 e0       	ldi	r20, 0x03	; 3
   1592e:	cc 0f       	add	r28, r28
   15930:	dd 1f       	adc	r29, r29
   15932:	4a 95       	dec	r20
   15934:	e1 f7       	brne	.-8      	; 0x1592e <SoftSPIB::transfer(unsigned char)+0x4c>
   15936:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   15938:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
   1593a:	ec 01       	movw	r28, r24
   1593c:	cc 0f       	add	r28, r28
   1593e:	dd 1f       	adc	r29, r29
   15940:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   15942:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
   15944:	ec 01       	movw	r28, r24
   15946:	d5 95       	asr	r29
   15948:	c7 95       	ror	r28
   1594a:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   1594c:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
   1594e:	ec 01       	movw	r28, r24
   15950:	e3 e0       	ldi	r30, 0x03	; 3
   15952:	d5 95       	asr	r29
   15954:	c7 95       	ror	r28
   15956:	ea 95       	dec	r30
   15958:	e1 f7       	brne	.-8      	; 0x15952 <SoftSPIB::transfer(unsigned char)+0x70>
   1595a:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
   1595c:	6c 2b       	or	r22, r28
   1595e:	f5 e0       	ldi	r31, 0x05	; 5
   15960:	95 95       	asr	r25
   15962:	87 95       	ror	r24
   15964:	fa 95       	dec	r31
   15966:	e1 f7       	brne	.-8      	; 0x15960 <SoftSPIB::transfer(unsigned char)+0x7e>
   15968:	82 70       	andi	r24, 0x02	; 2
   1596a:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
   1596c:	91 e0       	ldi	r25, 0x01	; 1
   1596e:	80 e0       	ldi	r24, 0x00	; 0
   15970:	f8 01       	movw	r30, r16
   15972:	21 81       	ldd	r18, Z+1	; 0x01
   15974:	21 11       	cpse	r18, r1
   15976:	01 c0       	rjmp	.+2      	; 0x1597a <SoftSPIB::transfer(unsigned char)+0x98>
   15978:	90 e0       	ldi	r25, 0x00	; 0
   1597a:	c9 2e       	mov	r12, r25
   1597c:	d8 2e       	mov	r13, r24
   1597e:	b1 2c       	mov	r11, r1
   15980:	a1 2c       	mov	r10, r1
   15982:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   15984:	c6 2f       	mov	r28, r22
   15986:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
   15988:	f8 01       	movw	r30, r16
   1598a:	80 81       	ld	r24, Z
   1598c:	88 23       	and	r24, r24
   1598e:	39 f0       	breq	.+14     	; 0x1599e <SoftSPIB::transfer(unsigned char)+0xbc>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
   15990:	f1 e0       	ldi	r31, 0x01	; 1
   15992:	cf 26       	eor	r12, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
   15994:	6c 2d       	mov	r22, r12
   15996:	f8 01       	movw	r30, r16
   15998:	85 81       	ldd	r24, Z+5	; 0x05
   1599a:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   1599e:	be 01       	movw	r22, r28
   159a0:	0a 2c       	mov	r0, r10
   159a2:	02 c0       	rjmp	.+4      	; 0x159a8 <SoftSPIB::transfer(unsigned char)+0xc6>
   159a4:	75 95       	asr	r23
   159a6:	67 95       	ror	r22
   159a8:	0a 94       	dec	r0
   159aa:	e2 f7       	brpl	.-8      	; 0x159a4 <SoftSPIB::transfer(unsigned char)+0xc2>
   159ac:	61 70       	andi	r22, 0x01	; 1
   159ae:	f8 01       	movw	r30, r16
   159b0:	84 81       	ldd	r24, Z+4	; 0x04
   159b2:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
   159b6:	46 01       	movw	r8, r12
   159b8:	f1 e0       	ldi	r31, 0x01	; 1
   159ba:	8f 26       	eor	r8, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
   159bc:	68 2d       	mov	r22, r8
   159be:	f8 01       	movw	r30, r16
   159c0:	85 81       	ldd	r24, Z+5	; 0x05
   159c2:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:116

        /* ... Read bit */
        {
            bval = digitalRead(_miso);
   159c6:	f8 01       	movw	r30, r16
   159c8:	83 81       	ldd	r24, Z+3	; 0x03
   159ca:	0e 94 5f d8 	call	0x1b0be	; 0x1b0be <digitalRead>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

            if (_order == MSBFIRST) {
   159ce:	f8 01       	movw	r30, r16
   159d0:	96 81       	ldd	r25, Z+6	; 0x06
   159d2:	91 11       	cpse	r25, r1
   159d4:	1b c0       	rjmp	.+54     	; 0x15a0c <SoftSPIB::transfer(unsigned char)+0x12a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
   159d6:	ff 0c       	add	r15, r15
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   159d8:	f8 2a       	or	r15, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
   159da:	f8 01       	movw	r30, r16
   159dc:	80 81       	ld	r24, Z
   159de:	88 23       	and	r24, r24
   159e0:	d1 f0       	breq	.+52     	; 0x15a16 <SoftSPIB::transfer(unsigned char)+0x134>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
   159e2:	64 01       	movw	r12, r8
   159e4:	ff ef       	ldi	r31, 0xFF	; 255
   159e6:	af 1a       	sub	r10, r31
   159e8:	bf 0a       	sbc	r11, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98 (discriminator 2)

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
   159ea:	28 e0       	ldi	r18, 0x08	; 8
   159ec:	a2 16       	cp	r10, r18
   159ee:	b1 04       	cpc	r11, r1
   159f0:	59 f6       	brne	.-106    	; 0x15988 <SoftSPIB::transfer(unsigned char)+0xa6>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
   159f2:	8f 2d       	mov	r24, r15
   159f4:	df 91       	pop	r29
   159f6:	cf 91       	pop	r28
   159f8:	1f 91       	pop	r17
   159fa:	0f 91       	pop	r16
   159fc:	ff 90       	pop	r15
   159fe:	df 90       	pop	r13
   15a00:	cf 90       	pop	r12
   15a02:	bf 90       	pop	r11
   15a04:	af 90       	pop	r10
   15a06:	9f 90       	pop	r9
   15a08:	8f 90       	pop	r8
   15a0a:	08 95       	ret
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   15a0c:	87 95       	ror	r24
   15a0e:	88 27       	eor	r24, r24
   15a10:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
   15a12:	f6 94       	lsr	r15
   15a14:	e1 cf       	rjmp	.-62     	; 0x159d8 <SoftSPIB::transfer(unsigned char)+0xf6>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
   15a16:	6c 2d       	mov	r22, r12
   15a18:	85 81       	ldd	r24, Z+5	; 0x05
   15a1a:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
   15a1e:	e2 cf       	rjmp	.-60     	; 0x159e4 <SoftSPIB::transfer(unsigned char)+0x102>

00015a20 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)>:
_ZN9SRAM_23LCC2EP8SoftSPIBh17_SRAM_23LC_Device():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:62
  endCommand();
}

void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
   15a20:	fc 01       	movw	r30, r24
   15a22:	80 e0       	ldi	r24, 0x00	; 0
   15a24:	90 e0       	ldi	r25, 0x00	; 0
   15a26:	a2 e0       	ldi	r26, 0x02	; 2
   15a28:	b0 e0       	ldi	r27, 0x00	; 0
   15a2a:	23 30       	cpi	r18, 0x03	; 3
   15a2c:	31 05       	cpc	r19, r1
   15a2e:	40 f0       	brcs	.+16     	; 0x15a40 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>
   15a30:	c9 01       	movw	r24, r18
   15a32:	03 97       	sbiw	r24, 0x03	; 3
   15a34:	03 97       	sbiw	r24, 0x03	; 3
   15a36:	70 f4       	brcc	.+28     	; 0x15a54 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x34>
   15a38:	80 e0       	ldi	r24, 0x00	; 0
   15a3a:	90 e0       	ldi	r25, 0x00	; 0
   15a3c:	a1 e0       	ldi	r26, 0x01	; 1
   15a3e:	b0 e0       	ldi	r27, 0x00	; 0
   15a40:	84 83       	std	Z+4, r24	; 0x04
   15a42:	95 83       	std	Z+5, r25	; 0x05
   15a44:	a6 83       	std	Z+6, r26	; 0x06
   15a46:	b7 83       	std	Z+7, r27	; 0x07
   15a48:	33 83       	std	Z+3, r19	; 0x03
   15a4a:	22 83       	std	Z+2, r18	; 0x02
   15a4c:	71 83       	std	Z+1, r23	; 0x01
   15a4e:	60 83       	st	Z, r22
   15a50:	40 87       	std	Z+8, r20	; 0x08
   15a52:	08 95       	ret
   15a54:	c9 01       	movw	r24, r18
   15a56:	06 97       	sbiw	r24, 0x06	; 6
   15a58:	02 97       	sbiw	r24, 0x02	; 2
   15a5a:	28 f4       	brcc	.+10     	; 0x15a66 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x46>
   15a5c:	80 e0       	ldi	r24, 0x00	; 0
   15a5e:	90 e8       	ldi	r25, 0x80	; 128
   15a60:	a0 e0       	ldi	r26, 0x00	; 0
   15a62:	b0 e0       	ldi	r27, 0x00	; 0
   15a64:	ed cf       	rjmp	.-38     	; 0x15a40 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>
   15a66:	c9 01       	movw	r24, r18
   15a68:	08 97       	sbiw	r24, 0x08	; 8
   15a6a:	02 97       	sbiw	r24, 0x02	; 2
   15a6c:	68 f7       	brcc	.-38     	; 0x15a48 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x28>
   15a6e:	80 e0       	ldi	r24, 0x00	; 0
   15a70:	90 e2       	ldi	r25, 0x20	; 32
   15a72:	a0 e0       	ldi	r26, 0x00	; 0
   15a74:	b0 e0       	ldi	r27, 0x00	; 0
   15a76:	e4 cf       	rjmp	.-56     	; 0x15a40 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>

00015a78 <SRAM_23LC::sendAddressBytes(unsigned long)>:
_ZN9SRAM_23LC16sendAddressBytesEm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:134
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
{
   15a78:	cf 92       	push	r12
   15a7a:	df 92       	push	r13
   15a7c:	ef 92       	push	r14
   15a7e:	ff 92       	push	r15
   15a80:	cf 93       	push	r28
   15a82:	df 93       	push	r29
   15a84:	ec 01       	movw	r28, r24
   15a86:	6a 01       	movw	r12, r20
   15a88:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
  if (_capacity > 0x10000) {
   15a8a:	8c 81       	ldd	r24, Y+4	; 0x04
   15a8c:	9d 81       	ldd	r25, Y+5	; 0x05
   15a8e:	ae 81       	ldd	r26, Y+6	; 0x06
   15a90:	bf 81       	ldd	r27, Y+7	; 0x07
   15a92:	01 97       	sbiw	r24, 0x01	; 1
   15a94:	a1 40       	sbci	r26, 0x01	; 1
   15a96:	b1 05       	cpc	r27, r1
   15a98:	38 f0       	brcs	.+14     	; 0x15aa8 <SRAM_23LC::sendAddressBytes(unsigned long)+0x30>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   15a9a:	b7 01       	movw	r22, r14
   15a9c:	88 27       	eor	r24, r24
   15a9e:	99 27       	eor	r25, r25
   15aa0:	88 81       	ld	r24, Y
   15aa2:	99 81       	ldd	r25, Y+1	; 0x01
   15aa4:	0e 94 71 ac 	call	0x158e2	; 0x158e2 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   15aa8:	99 27       	eor	r25, r25
   15aaa:	8f 2d       	mov	r24, r15
   15aac:	7e 2d       	mov	r23, r14
   15aae:	6d 2d       	mov	r22, r13
   15ab0:	88 81       	ld	r24, Y
   15ab2:	99 81       	ldd	r25, Y+1	; 0x01
   15ab4:	0e 94 71 ac 	call	0x158e2	; 0x158e2 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   15ab8:	6c 2d       	mov	r22, r12
   15aba:	88 81       	ld	r24, Y
   15abc:	99 81       	ldd	r25, Y+1	; 0x01
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   15abe:	df 91       	pop	r29
   15ac0:	cf 91       	pop	r28
   15ac2:	ff 90       	pop	r15
   15ac4:	ef 90       	pop	r14
   15ac6:	df 90       	pop	r13
   15ac8:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   15aca:	0c 94 71 ac 	jmp	0x158e2	; 0x158e2 <SoftSPIB::transfer(unsigned char)>

00015ace <SRAM_23LC::startCommand(unsigned char, unsigned long)>:
_ZN9SRAM_23LC12startCommandEhm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:123

  return(length);
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
   15ace:	cf 92       	push	r12
   15ad0:	df 92       	push	r13
   15ad2:	ef 92       	push	r14
   15ad4:	ff 92       	push	r15
   15ad6:	0f 93       	push	r16
   15ad8:	1f 93       	push	r17
   15ada:	cf 93       	push	r28
   15adc:	8c 01       	movw	r16, r24
   15ade:	c6 2f       	mov	r28, r22
   15ae0:	69 01       	movw	r12, r18
   15ae2:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   15ae4:	60 e0       	ldi	r22, 0x00	; 0
   15ae6:	fc 01       	movw	r30, r24
   15ae8:	80 85       	ldd	r24, Z+8	; 0x08
   15aea:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   15aee:	6c 2f       	mov	r22, r28
   15af0:	f8 01       	movw	r30, r16
   15af2:	80 81       	ld	r24, Z
   15af4:	91 81       	ldd	r25, Z+1	; 0x01
   15af6:	0e 94 71 ac 	call	0x158e2	; 0x158e2 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:128
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
   15afa:	c2 50       	subi	r28, 0x02	; 2
   15afc:	c2 30       	cpi	r28, 0x02	; 2
   15afe:	60 f4       	brcc	.+24     	; 0x15b18 <SRAM_23LC::startCommand(unsigned char, unsigned long)+0x4a>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
    sendAddressBytes(address);
   15b00:	b7 01       	movw	r22, r14
   15b02:	a6 01       	movw	r20, r12
   15b04:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:131
  }
}
   15b06:	cf 91       	pop	r28
   15b08:	1f 91       	pop	r17
   15b0a:	0f 91       	pop	r16
   15b0c:	ff 90       	pop	r15
   15b0e:	ef 90       	pop	r14
   15b10:	df 90       	pop	r13
   15b12:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);

  _spi->transfer(command);
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   15b14:	0c 94 3c ad 	jmp	0x15a78	; 0x15a78 <SRAM_23LC::sendAddressBytes(unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:131
  }
}
   15b18:	cf 91       	pop	r28
   15b1a:	1f 91       	pop	r17
   15b1c:	0f 91       	pop	r16
   15b1e:	ff 90       	pop	r15
   15b20:	ef 90       	pop	r14
   15b22:	df 90       	pop	r13
   15b24:	cf 90       	pop	r12
   15b26:	08 95       	ret

00015b28 <SRAM_23LC::endCommand()>:
_ZN9SRAM_23LC10endCommandEv():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   15b28:	61 e0       	ldi	r22, 0x01	; 1
   15b2a:	fc 01       	movw	r30, r24
   15b2c:	80 85       	ldd	r24, Z+8	; 0x08
   15b2e:	0c 94 31 d8 	jmp	0x1b062	; 0x1b062 <digitalWrite>

00015b32 <SRAM_23LC::begin()>:
_ZN9SRAM_23LC5beginEv():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:49




void SRAM_23LC::begin(void)
{
   15b32:	cf 93       	push	r28
   15b34:	df 93       	push	r29
   15b36:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50
  digitalWrite(_chipSelect, HIGH);
   15b38:	61 e0       	ldi	r22, 0x01	; 1
   15b3a:	88 85       	ldd	r24, Y+8	; 0x08
   15b3c:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
   15b40:	61 e0       	ldi	r22, 0x01	; 1
   15b42:	88 85       	ldd	r24, Y+8	; 0x08
   15b44:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
   15b48:	88 81       	ld	r24, Y
   15b4a:	99 81       	ldd	r25, Y+1	; 0x01
   15b4c:	0e 94 60 ac 	call	0x158c0	; 0x158c0 <SoftSPIB::begin()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:55

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
   15b50:	20 e0       	ldi	r18, 0x00	; 0
   15b52:	30 e0       	ldi	r19, 0x00	; 0
   15b54:	a9 01       	movw	r20, r18
   15b56:	61 e0       	ldi	r22, 0x01	; 1
   15b58:	ce 01       	movw	r24, r28
   15b5a:	0e 94 67 ad 	call	0x15ace	; 0x15ace <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
   15b5e:	60 e4       	ldi	r22, 0x40	; 64
   15b60:	88 81       	ld	r24, Y
   15b62:	99 81       	ldd	r25, Y+1	; 0x01
   15b64:	0e 94 71 ac 	call	0x158e2	; 0x158e2 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:57
  endCommand();
   15b68:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:58
}
   15b6a:	df 91       	pop	r29
   15b6c:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:57

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
  endCommand();
   15b6e:	0c 94 94 ad 	jmp	0x15b28	; 0x15b28 <SRAM_23LC::endCommand()>

00015b72 <SRAM_23LC::readByte(unsigned long)>:
_ZN9SRAM_23LC8readByteEm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:66
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
   15b72:	0f 93       	push	r16
   15b74:	1f 93       	push	r17
   15b76:	cf 93       	push	r28
   15b78:	df 93       	push	r29
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
  if (address >= _capacity) {
   15b7a:	fc 01       	movw	r30, r24
   15b7c:	04 81       	ldd	r16, Z+4	; 0x04
   15b7e:	15 81       	ldd	r17, Z+5	; 0x05
   15b80:	26 81       	ldd	r18, Z+6	; 0x06
   15b82:	37 81       	ldd	r19, Z+7	; 0x07
   15b84:	40 17       	cp	r20, r16
   15b86:	51 07       	cpc	r21, r17
   15b88:	62 07       	cpc	r22, r18
   15b8a:	73 07       	cpc	r23, r19
   15b8c:	a8 f4       	brcc	.+42     	; 0x15bb8 <SRAM_23LC::readByte(unsigned long)+0x46>
   15b8e:	9a 01       	movw	r18, r20
   15b90:	ab 01       	movw	r20, r22
   15b92:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:71
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
   15b94:	63 e0       	ldi	r22, 0x03	; 3
   15b96:	0e 94 67 ad 	call	0x15ace	; 0x15ace <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   15b9a:	6f ef       	ldi	r22, 0xFF	; 255
   15b9c:	88 81       	ld	r24, Y
   15b9e:	99 81       	ldd	r25, Y+1	; 0x01
   15ba0:	0e 94 71 ac 	call	0x158e2	; 0x158e2 <SoftSPIB::transfer(unsigned char)>
   15ba4:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:73
  endCommand();
   15ba6:	ce 01       	movw	r24, r28
   15ba8:	0e 94 94 ad 	call	0x15b28	; 0x15b28 <SRAM_23LC::endCommand()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76

  return(ret);
}
   15bac:	81 2f       	mov	r24, r17
   15bae:	df 91       	pop	r29
   15bb0:	cf 91       	pop	r28
   15bb2:	1f 91       	pop	r17
   15bb4:	0f 91       	pop	r16
   15bb6:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   15bb8:	10 e0       	ldi	r17, 0x00	; 0
   15bba:	f8 cf       	rjmp	.-16     	; 0x15bac <SRAM_23LC::readByte(unsigned long)+0x3a>

00015bbc <SRAM_23LC::writeByte(unsigned long, unsigned char)>:
_ZN9SRAM_23LC9writeByteEmh():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:79

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
   15bbc:	cf 92       	push	r12
   15bbe:	df 92       	push	r13
   15bc0:	ef 92       	push	r14
   15bc2:	ff 92       	push	r15
   15bc4:	1f 93       	push	r17
   15bc6:	cf 93       	push	r28
   15bc8:	df 93       	push	r29
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
  if (address >= _capacity) {
   15bca:	fc 01       	movw	r30, r24
   15bcc:	c4 80       	ldd	r12, Z+4	; 0x04
   15bce:	d5 80       	ldd	r13, Z+5	; 0x05
   15bd0:	e6 80       	ldd	r14, Z+6	; 0x06
   15bd2:	f7 80       	ldd	r15, Z+7	; 0x07
   15bd4:	4c 15       	cp	r20, r12
   15bd6:	5d 05       	cpc	r21, r13
   15bd8:	6e 05       	cpc	r22, r14
   15bda:	7f 05       	cpc	r23, r15
   15bdc:	c8 f4       	brcc	.+50     	; 0x15c10 <SRAM_23LC::writeByte(unsigned long, unsigned char)+0x54>
   15bde:	12 2f       	mov	r17, r18
   15be0:	9a 01       	movw	r18, r20
   15be2:	ab 01       	movw	r20, r22
   15be4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:84
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
   15be6:	62 e0       	ldi	r22, 0x02	; 2
   15be8:	0e 94 67 ad 	call	0x15ace	; 0x15ace <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  _spi->transfer(byte);
   15bec:	61 2f       	mov	r22, r17
   15bee:	88 81       	ld	r24, Y
   15bf0:	99 81       	ldd	r25, Y+1	; 0x01
   15bf2:	0e 94 71 ac 	call	0x158e2	; 0x158e2 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:86
  endCommand();
   15bf6:	ce 01       	movw	r24, r28
   15bf8:	0e 94 94 ad 	call	0x15b28	; 0x15b28 <SRAM_23LC::endCommand()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:87
  return(1);
   15bfc:	81 e0       	ldi	r24, 0x01	; 1
   15bfe:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88
}
   15c00:	df 91       	pop	r29
   15c02:	cf 91       	pop	r28
   15c04:	1f 91       	pop	r17
   15c06:	ff 90       	pop	r15
   15c08:	ef 90       	pop	r14
   15c0a:	df 90       	pop	r13
   15c0c:	cf 90       	pop	r12
   15c0e:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   15c10:	90 e0       	ldi	r25, 0x00	; 0
   15c12:	80 e0       	ldi	r24, 0x00	; 0
   15c14:	f5 cf       	rjmp	.-22     	; 0x15c00 <SRAM_23LC::writeByte(unsigned long, unsigned char)+0x44>

00015c16 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
   15c16:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
   15c18:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
   15c1a:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
   15c1c:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <SPIClass::initialized>
   15c20:	81 11       	cpse	r24, r1
   15c22:	27 c0       	rjmp	.+78     	; 0x15c72 <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
   15c24:	e3 eb       	ldi	r30, 0xB3	; 179
   15c26:	f4 e6       	ldi	r31, 0x64	; 100
   15c28:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
   15c2a:	ed e7       	ldi	r30, 0x7D	; 125
   15c2c:	f4 e6       	ldi	r31, 0x64	; 100
   15c2e:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
   15c30:	e8 2f       	mov	r30, r24
   15c32:	f0 e0       	ldi	r31, 0x00	; 0
   15c34:	ee 0f       	add	r30, r30
   15c36:	ff 1f       	adc	r31, r31
   15c38:	ef 5f       	subi	r30, 0xFF	; 255
   15c3a:	fa 49       	sbci	r31, 0x9A	; 154
   15c3c:	a5 91       	lpm	r26, Z+
   15c3e:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
   15c40:	ec 91       	ld	r30, X
   15c42:	e9 23       	and	r30, r25
   15c44:	21 f4       	brne	.+8      	; 0x15c4e <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
   15c46:	61 e0       	ldi	r22, 0x01	; 1
   15c48:	88 e0       	ldi	r24, 0x08	; 8
   15c4a:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
   15c4e:	61 e0       	ldi	r22, 0x01	; 1
   15c50:	88 e0       	ldi	r24, 0x08	; 8
   15c52:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
   15c56:	8c b5       	in	r24, 0x2c	; 44
   15c58:	80 61       	ori	r24, 0x10	; 16
   15c5a:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
   15c5c:	8c b5       	in	r24, 0x2c	; 44
   15c5e:	80 64       	ori	r24, 0x40	; 64
   15c60:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
   15c62:	61 e0       	ldi	r22, 0x01	; 1
   15c64:	89 e0       	ldi	r24, 0x09	; 9
   15c66:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
   15c6a:	61 e0       	ldi	r22, 0x01	; 1
   15c6c:	8a e0       	ldi	r24, 0x0A	; 10
   15c6e:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
   15c72:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <SPIClass::initialized>
   15c76:	8f 5f       	subi	r24, 0xFF	; 255
   15c78:	80 93 ea 12 	sts	0x12EA, r24	; 0x8012ea <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
   15c7c:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:64
}
   15c7e:	cf 91       	pop	r28
   15c80:	08 95       	ret

00015c82 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)>:
_ZN12EEPROM_CAT25C2EP8SoftSPIBh20_EEPROM_CAT25_Device():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:67
}

void EEPROM_CAT25::disableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WRDI, 0);
  endCommand();
   15c82:	cf 92       	push	r12
   15c84:	df 92       	push	r13
   15c86:	ef 92       	push	r14
   15c88:	ff 92       	push	r15
   15c8a:	dc 01       	movw	r26, r24
   15c8c:	2e 30       	cpi	r18, 0x0E	; 14
   15c8e:	31 05       	cpc	r19, r1
   15c90:	30 f5       	brcc	.+76     	; 0x15cde <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x5c>
   15c92:	f9 01       	movw	r30, r18
   15c94:	88 27       	eor	r24, r24
   15c96:	e0 5b       	subi	r30, 0xB0	; 176
   15c98:	f1 45       	sbci	r31, 0x51	; 81
   15c9a:	8f 4f       	sbci	r24, 0xFF	; 255
   15c9c:	0c 94 6f de 	jmp	0x1bcde	; 0x1bcde <__tablejump2__>
   15ca0:	5e ae       	std	Y+62, r5	; 0x3e
   15ca2:	7d ae       	std	Y+61, r7	; 0x3d
   15ca4:	83 ae       	std	Z+59, r8	; 0x3b
   15ca6:	90 ae       	std	Z+56, r9	; 0x38
   15ca8:	9e ae       	std	Y+62, r9	; 0x3e
   15caa:	a4 ae       	std	Z+60, r10	; 0x3c
   15cac:	aa ae       	std	Y+58, r10	; 0x3a
   15cae:	b8 ae       	std	Y+56, r11	; 0x38
   15cb0:	b8 ae       	std	Y+56, r11	; 0x38
   15cb2:	be ae       	std	Y+62, r11	; 0x3e
   15cb4:	be ae       	std	Y+62, r11	; 0x3e
   15cb6:	c4 ae       	std	Z+60, r12	; 0x3c
   15cb8:	d2 ae       	std	Z+58, r13	; 0x3a
   15cba:	d7 ae       	std	Z+63, r13	; 0x3f
   15cbc:	c1 2c       	mov	r12, r1
   15cbe:	d1 2c       	mov	r13, r1
   15cc0:	94 e0       	ldi	r25, 0x04	; 4
   15cc2:	e9 2e       	mov	r14, r25
   15cc4:	f1 2c       	mov	r15, r1
   15cc6:	14 96       	adiw	r26, 0x04	; 4
   15cc8:	cd 92       	st	X+, r12
   15cca:	dd 92       	st	X+, r13
   15ccc:	ed 92       	st	X+, r14
   15cce:	fc 92       	st	X, r15
   15cd0:	17 97       	sbiw	r26, 0x07	; 7
   15cd2:	80 e0       	ldi	r24, 0x00	; 0
   15cd4:	91 e0       	ldi	r25, 0x01	; 1
   15cd6:	19 96       	adiw	r26, 0x09	; 9
   15cd8:	9c 93       	st	X, r25
   15cda:	8e 93       	st	-X, r24
   15cdc:	18 97       	sbiw	r26, 0x08	; 8
   15cde:	13 96       	adiw	r26, 0x03	; 3
   15ce0:	3c 93       	st	X, r19
   15ce2:	2e 93       	st	-X, r18
   15ce4:	12 97       	sbiw	r26, 0x02	; 2
   15ce6:	11 96       	adiw	r26, 0x01	; 1
   15ce8:	7c 93       	st	X, r23
   15cea:	6e 93       	st	-X, r22
   15cec:	1a 96       	adiw	r26, 0x0a	; 10
   15cee:	4c 93       	st	X, r20
   15cf0:	ff 90       	pop	r15
   15cf2:	ef 90       	pop	r14
   15cf4:	df 90       	pop	r13
   15cf6:	cf 90       	pop	r12
   15cf8:	08 95       	ret
   15cfa:	c1 2c       	mov	r12, r1
   15cfc:	d1 2c       	mov	r13, r1
   15cfe:	82 e0       	ldi	r24, 0x02	; 2
   15d00:	e8 2e       	mov	r14, r24
   15d02:	f1 2c       	mov	r15, r1
   15d04:	e0 cf       	rjmp	.-64     	; 0x15cc6 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x44>
   15d06:	c1 2c       	mov	r12, r1
   15d08:	d1 2c       	mov	r13, r1
   15d0a:	76 01       	movw	r14, r12
   15d0c:	e3 94       	inc	r14
   15d0e:	14 96       	adiw	r26, 0x04	; 4
   15d10:	cd 92       	st	X+, r12
   15d12:	dd 92       	st	X+, r13
   15d14:	ed 92       	st	X+, r14
   15d16:	fc 92       	st	X, r15
   15d18:	17 97       	sbiw	r26, 0x07	; 7
   15d1a:	80 e8       	ldi	r24, 0x80	; 128
   15d1c:	90 e0       	ldi	r25, 0x00	; 0
   15d1e:	db cf       	rjmp	.-74     	; 0x15cd6 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   15d20:	c1 2c       	mov	r12, r1
   15d22:	e0 e8       	ldi	r30, 0x80	; 128
   15d24:	de 2e       	mov	r13, r30
   15d26:	e1 2c       	mov	r14, r1
   15d28:	f1 2c       	mov	r15, r1
   15d2a:	14 96       	adiw	r26, 0x04	; 4
   15d2c:	cd 92       	st	X+, r12
   15d2e:	dd 92       	st	X+, r13
   15d30:	ed 92       	st	X+, r14
   15d32:	fc 92       	st	X, r15
   15d34:	17 97       	sbiw	r26, 0x07	; 7
   15d36:	80 e4       	ldi	r24, 0x40	; 64
   15d38:	90 e0       	ldi	r25, 0x00	; 0
   15d3a:	cd cf       	rjmp	.-102    	; 0x15cd6 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   15d3c:	c1 2c       	mov	r12, r1
   15d3e:	50 e4       	ldi	r21, 0x40	; 64
   15d40:	d5 2e       	mov	r13, r21
   15d42:	e1 2c       	mov	r14, r1
   15d44:	f1 2c       	mov	r15, r1
   15d46:	f1 cf       	rjmp	.-30     	; 0x15d2a <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xa8>
   15d48:	c1 2c       	mov	r12, r1
   15d4a:	90 e2       	ldi	r25, 0x20	; 32
   15d4c:	d9 2e       	mov	r13, r25
   15d4e:	e1 2c       	mov	r14, r1
   15d50:	f1 2c       	mov	r15, r1
   15d52:	eb cf       	rjmp	.-42     	; 0x15d2a <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xa8>
   15d54:	c1 2c       	mov	r12, r1
   15d56:	80 e1       	ldi	r24, 0x10	; 16
   15d58:	d8 2e       	mov	r13, r24
   15d5a:	e1 2c       	mov	r14, r1
   15d5c:	f1 2c       	mov	r15, r1
   15d5e:	14 96       	adiw	r26, 0x04	; 4
   15d60:	cd 92       	st	X+, r12
   15d62:	dd 92       	st	X+, r13
   15d64:	ed 92       	st	X+, r14
   15d66:	fc 92       	st	X, r15
   15d68:	17 97       	sbiw	r26, 0x07	; 7
   15d6a:	80 e2       	ldi	r24, 0x20	; 32
   15d6c:	90 e0       	ldi	r25, 0x00	; 0
   15d6e:	b3 cf       	rjmp	.-154    	; 0x15cd6 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   15d70:	c1 2c       	mov	r12, r1
   15d72:	f8 e0       	ldi	r31, 0x08	; 8
   15d74:	df 2e       	mov	r13, r31
   15d76:	e1 2c       	mov	r14, r1
   15d78:	f1 2c       	mov	r15, r1
   15d7a:	f1 cf       	rjmp	.-30     	; 0x15d5e <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xdc>
   15d7c:	c1 2c       	mov	r12, r1
   15d7e:	e4 e0       	ldi	r30, 0x04	; 4
   15d80:	de 2e       	mov	r13, r30
   15d82:	e1 2c       	mov	r14, r1
   15d84:	f1 2c       	mov	r15, r1
   15d86:	eb cf       	rjmp	.-42     	; 0x15d5e <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xdc>
   15d88:	c1 2c       	mov	r12, r1
   15d8a:	52 e0       	ldi	r21, 0x02	; 2
   15d8c:	d5 2e       	mov	r13, r21
   15d8e:	e1 2c       	mov	r14, r1
   15d90:	f1 2c       	mov	r15, r1
   15d92:	14 96       	adiw	r26, 0x04	; 4
   15d94:	cd 92       	st	X+, r12
   15d96:	dd 92       	st	X+, r13
   15d98:	ed 92       	st	X+, r14
   15d9a:	fc 92       	st	X, r15
   15d9c:	17 97       	sbiw	r26, 0x07	; 7
   15d9e:	80 e1       	ldi	r24, 0x10	; 16
   15da0:	90 e0       	ldi	r25, 0x00	; 0
   15da2:	99 cf       	rjmp	.-206    	; 0x15cd6 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   15da4:	c1 2c       	mov	r12, r1
   15da6:	d1 2c       	mov	r13, r1
   15da8:	76 01       	movw	r14, r12
   15daa:	d3 94       	inc	r13
   15dac:	f2 cf       	rjmp	.-28     	; 0x15d92 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x110>
   15dae:	80 e8       	ldi	r24, 0x80	; 128
   15db0:	c8 2e       	mov	r12, r24
   15db2:	d1 2c       	mov	r13, r1
   15db4:	e1 2c       	mov	r14, r1
   15db6:	f1 2c       	mov	r15, r1
   15db8:	ec cf       	rjmp	.-40     	; 0x15d92 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x110>

00015dba <EEPROM_CAT25::begin()>:
_ZN12EEPROM_CAT255beginEv():
   15dba:	cf 93       	push	r28
   15dbc:	df 93       	push	r29
   15dbe:	ec 01       	movw	r28, r24
   15dc0:	61 e0       	ldi	r22, 0x01	; 1
   15dc2:	8a 85       	ldd	r24, Y+10	; 0x0a
   15dc4:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
   15dc8:	61 e0       	ldi	r22, 0x01	; 1
   15dca:	8a 85       	ldd	r24, Y+10	; 0x0a
   15dcc:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   15dd0:	88 81       	ld	r24, Y
   15dd2:	99 81       	ldd	r25, Y+1	; 0x01
   15dd4:	df 91       	pop	r29
   15dd6:	cf 91       	pop	r28
   15dd8:	0c 94 60 ac 	jmp	0x158c0	; 0x158c0 <SoftSPIB::begin()>

00015ddc <EEPROM_CAT25::sendAddressBytes(unsigned long)>:
_ZN12EEPROM_CAT2516sendAddressBytesEm():
   15ddc:	cf 92       	push	r12
   15dde:	df 92       	push	r13
   15de0:	ef 92       	push	r14
   15de2:	ff 92       	push	r15
   15de4:	cf 93       	push	r28
   15de6:	df 93       	push	r29
   15de8:	ec 01       	movw	r28, r24
   15dea:	6a 01       	movw	r12, r20
   15dec:	7b 01       	movw	r14, r22
   15dee:	8c 81       	ldd	r24, Y+4	; 0x04
   15df0:	9d 81       	ldd	r25, Y+5	; 0x05
   15df2:	ae 81       	ldd	r26, Y+6	; 0x06
   15df4:	bf 81       	ldd	r27, Y+7	; 0x07
   15df6:	01 97       	sbiw	r24, 0x01	; 1
   15df8:	a1 40       	sbci	r26, 0x01	; 1
   15dfa:	b1 05       	cpc	r27, r1
   15dfc:	38 f0       	brcs	.+14     	; 0x15e0c <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x30>
   15dfe:	b7 01       	movw	r22, r14
   15e00:	88 27       	eor	r24, r24
   15e02:	99 27       	eor	r25, r25
   15e04:	88 81       	ld	r24, Y
   15e06:	99 81       	ldd	r25, Y+1	; 0x01
   15e08:	0e 94 71 ac 	call	0x158e2	; 0x158e2 <SoftSPIB::transfer(unsigned char)>
   15e0c:	8c 81       	ldd	r24, Y+4	; 0x04
   15e0e:	9d 81       	ldd	r25, Y+5	; 0x05
   15e10:	ae 81       	ldd	r26, Y+6	; 0x06
   15e12:	bf 81       	ldd	r27, Y+7	; 0x07
   15e14:	81 30       	cpi	r24, 0x01	; 1
   15e16:	91 40       	sbci	r25, 0x01	; 1
   15e18:	a1 05       	cpc	r26, r1
   15e1a:	b1 05       	cpc	r27, r1
   15e1c:	60 f0       	brcs	.+24     	; 0x15e36 <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x5a>
   15e1e:	8a 81       	ldd	r24, Y+2	; 0x02
   15e20:	9b 81       	ldd	r25, Y+3	; 0x03
   15e22:	0b 97       	sbiw	r24, 0x0b	; 11
   15e24:	41 f0       	breq	.+16     	; 0x15e36 <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x5a>
   15e26:	99 27       	eor	r25, r25
   15e28:	8f 2d       	mov	r24, r15
   15e2a:	7e 2d       	mov	r23, r14
   15e2c:	6d 2d       	mov	r22, r13
   15e2e:	88 81       	ld	r24, Y
   15e30:	99 81       	ldd	r25, Y+1	; 0x01
   15e32:	0e 94 71 ac 	call	0x158e2	; 0x158e2 <SoftSPIB::transfer(unsigned char)>
   15e36:	6c 2d       	mov	r22, r12
   15e38:	88 81       	ld	r24, Y
   15e3a:	99 81       	ldd	r25, Y+1	; 0x01
   15e3c:	df 91       	pop	r29
   15e3e:	cf 91       	pop	r28
   15e40:	ff 90       	pop	r15
   15e42:	ef 90       	pop	r14
   15e44:	df 90       	pop	r13
   15e46:	cf 90       	pop	r12
   15e48:	0c 94 71 ac 	jmp	0x158e2	; 0x158e2 <SoftSPIB::transfer(unsigned char)>

00015e4c <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>:
_ZN12EEPROM_CAT2512startCommandEhm():
   15e4c:	cf 92       	push	r12
   15e4e:	df 92       	push	r13
   15e50:	ef 92       	push	r14
   15e52:	ff 92       	push	r15
   15e54:	0f 93       	push	r16
   15e56:	1f 93       	push	r17
   15e58:	cf 93       	push	r28
   15e5a:	8c 01       	movw	r16, r24
   15e5c:	c6 2f       	mov	r28, r22
   15e5e:	69 01       	movw	r12, r18
   15e60:	7a 01       	movw	r14, r20
   15e62:	60 e0       	ldi	r22, 0x00	; 0
   15e64:	fc 01       	movw	r30, r24
   15e66:	82 85       	ldd	r24, Z+10	; 0x0a
   15e68:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
   15e6c:	f8 01       	movw	r30, r16
   15e6e:	82 81       	ldd	r24, Z+2	; 0x02
   15e70:	93 81       	ldd	r25, Z+3	; 0x03
   15e72:	0b 97       	sbiw	r24, 0x0b	; 11
   15e74:	71 f4       	brne	.+28     	; 0x15e92 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15e76:	ff ef       	ldi	r31, 0xFF	; 255
   15e78:	cf 16       	cp	r12, r31
   15e7a:	d1 04       	cpc	r13, r1
   15e7c:	e1 04       	cpc	r14, r1
   15e7e:	f1 04       	cpc	r15, r1
   15e80:	41 f0       	breq	.+16     	; 0x15e92 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15e82:	38 f0       	brcs	.+14     	; 0x15e92 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15e84:	c3 30       	cpi	r28, 0x03	; 3
   15e86:	21 f0       	breq	.+8      	; 0x15e90 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x44>
   15e88:	c2 30       	cpi	r28, 0x02	; 2
   15e8a:	19 f4       	brne	.+6      	; 0x15e92 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15e8c:	ca e0       	ldi	r28, 0x0A	; 10
   15e8e:	01 c0       	rjmp	.+2      	; 0x15e92 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15e90:	cb e0       	ldi	r28, 0x0B	; 11
   15e92:	6c 2f       	mov	r22, r28
   15e94:	f8 01       	movw	r30, r16
   15e96:	80 81       	ld	r24, Z
   15e98:	91 81       	ldd	r25, Z+1	; 0x01
   15e9a:	0e 94 71 ac 	call	0x158e2	; 0x158e2 <SoftSPIB::transfer(unsigned char)>
   15e9e:	c2 50       	subi	r28, 0x02	; 2
   15ea0:	c2 30       	cpi	r28, 0x02	; 2
   15ea2:	60 f4       	brcc	.+24     	; 0x15ebc <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x70>
   15ea4:	b7 01       	movw	r22, r14
   15ea6:	a6 01       	movw	r20, r12
   15ea8:	c8 01       	movw	r24, r16
   15eaa:	cf 91       	pop	r28
   15eac:	1f 91       	pop	r17
   15eae:	0f 91       	pop	r16
   15eb0:	ff 90       	pop	r15
   15eb2:	ef 90       	pop	r14
   15eb4:	df 90       	pop	r13
   15eb6:	cf 90       	pop	r12
   15eb8:	0c 94 ee ae 	jmp	0x15ddc	; 0x15ddc <EEPROM_CAT25::sendAddressBytes(unsigned long)>
   15ebc:	cf 91       	pop	r28
   15ebe:	1f 91       	pop	r17
   15ec0:	0f 91       	pop	r16
   15ec2:	ff 90       	pop	r15
   15ec4:	ef 90       	pop	r14
   15ec6:	df 90       	pop	r13
   15ec8:	cf 90       	pop	r12
   15eca:	08 95       	ret

00015ecc <EEPROM_CAT25::endCommand()>:
_ZN12EEPROM_CAT2510endCommandEv():
   15ecc:	61 e0       	ldi	r22, 0x01	; 1
   15ece:	fc 01       	movw	r30, r24
   15ed0:	82 85       	ldd	r24, Z+10	; 0x0a
   15ed2:	0c 94 31 d8 	jmp	0x1b062	; 0x1b062 <digitalWrite>

00015ed6 <EEPROM_CAT25::getStatusRegister()>:
_ZN12EEPROM_CAT2517getStatusRegisterEv():
   15ed6:	1f 93       	push	r17
   15ed8:	cf 93       	push	r28
   15eda:	df 93       	push	r29
   15edc:	ec 01       	movw	r28, r24
   15ede:	20 e0       	ldi	r18, 0x00	; 0
   15ee0:	30 e0       	ldi	r19, 0x00	; 0
   15ee2:	a9 01       	movw	r20, r18
   15ee4:	65 e0       	ldi	r22, 0x05	; 5
   15ee6:	0e 94 26 af 	call	0x15e4c	; 0x15e4c <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
   15eea:	6f ef       	ldi	r22, 0xFF	; 255
   15eec:	88 81       	ld	r24, Y
   15eee:	99 81       	ldd	r25, Y+1	; 0x01
   15ef0:	0e 94 71 ac 	call	0x158e2	; 0x158e2 <SoftSPIB::transfer(unsigned char)>
   15ef4:	18 2f       	mov	r17, r24
   15ef6:	ce 01       	movw	r24, r28
   15ef8:	0e 94 66 af 	call	0x15ecc	; 0x15ecc <EEPROM_CAT25::endCommand()>
   15efc:	81 2f       	mov	r24, r17
   15efe:	df 91       	pop	r29
   15f00:	cf 91       	pop	r28
   15f02:	1f 91       	pop	r17
   15f04:	08 95       	ret

00015f06 <EEPROM_CAT25::isReady()>:
_ZN12EEPROM_CAT257isReadyEv():
   15f06:	0e 94 6b af 	call	0x15ed6	; 0x15ed6 <EEPROM_CAT25::getStatusRegister()>
   15f0a:	80 95       	com	r24
   15f0c:	81 70       	andi	r24, 0x01	; 1
   15f0e:	08 95       	ret

00015f10 <EEPROM_CAT25::enableWrite()>:
_ZN12EEPROM_CAT2511enableWriteEv():
   15f10:	cf 93       	push	r28
   15f12:	df 93       	push	r29
   15f14:	ec 01       	movw	r28, r24
   15f16:	20 e0       	ldi	r18, 0x00	; 0
   15f18:	30 e0       	ldi	r19, 0x00	; 0
   15f1a:	a9 01       	movw	r20, r18
   15f1c:	66 e0       	ldi	r22, 0x06	; 6
   15f1e:	0e 94 26 af 	call	0x15e4c	; 0x15e4c <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
   15f22:	ce 01       	movw	r24, r28
   15f24:	df 91       	pop	r29
   15f26:	cf 91       	pop	r28
   15f28:	0c 94 66 af 	jmp	0x15ecc	; 0x15ecc <EEPROM_CAT25::endCommand()>

00015f2c <EEPROM_CAT25::readByte(unsigned long)>:
_ZN12EEPROM_CAT258readByteEm():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:71
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
   15f2c:	cf 92       	push	r12
   15f2e:	df 92       	push	r13
   15f30:	ef 92       	push	r14
   15f32:	ff 92       	push	r15
   15f34:	1f 93       	push	r17
   15f36:	cf 93       	push	r28
   15f38:	df 93       	push	r29
   15f3a:	ec 01       	movw	r28, r24
   15f3c:	6a 01       	movw	r12, r20
   15f3e:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  if (address >= _capacity) {
   15f40:	8c 81       	ldd	r24, Y+4	; 0x04
   15f42:	9d 81       	ldd	r25, Y+5	; 0x05
   15f44:	ae 81       	ldd	r26, Y+6	; 0x06
   15f46:	bf 81       	ldd	r27, Y+7	; 0x07
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:73
    return(0);
   15f48:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
   15f4a:	c8 16       	cp	r12, r24
   15f4c:	d9 06       	cpc	r13, r25
   15f4e:	ea 06       	cpc	r14, r26
   15f50:	fb 06       	cpc	r15, r27
   15f52:	b8 f4       	brcc	.+46     	; 0x15f82 <EEPROM_CAT25::readByte(unsigned long)+0x56>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:76
    return(0);
  }

  while (!isReady()) {
   15f54:	ce 01       	movw	r24, r28
   15f56:	0e 94 83 af 	call	0x15f06	; 0x15f06 <EEPROM_CAT25::isReady()>
   15f5a:	81 11       	cpse	r24, r1
   15f5c:	03 c0       	rjmp	.+6      	; 0x15f64 <EEPROM_CAT25::readByte(unsigned long)+0x38>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:77
    yield();
   15f5e:	0e 94 88 d6 	call	0x1ad10	; 0x1ad10 <yield>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:76
{
  if (address >= _capacity) {
    return(0);
  }

  while (!isReady()) {
   15f62:	f8 cf       	rjmp	.-16     	; 0x15f54 <EEPROM_CAT25::readByte(unsigned long)+0x28>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
   15f64:	a7 01       	movw	r20, r14
   15f66:	96 01       	movw	r18, r12
   15f68:	63 e0       	ldi	r22, 0x03	; 3
   15f6a:	ce 01       	movw	r24, r28
   15f6c:	0e 94 26 af 	call	0x15e4c	; 0x15e4c <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   15f70:	6f ef       	ldi	r22, 0xFF	; 255
   15f72:	88 81       	ld	r24, Y
   15f74:	99 81       	ldd	r25, Y+1	; 0x01
   15f76:	0e 94 71 ac 	call	0x158e2	; 0x158e2 <SoftSPIB::transfer(unsigned char)>
   15f7a:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
   15f7c:	ce 01       	movw	r24, r28
   15f7e:	0e 94 66 af 	call	0x15ecc	; 0x15ecc <EEPROM_CAT25::endCommand()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:85

  return(ret);
}
   15f82:	81 2f       	mov	r24, r17
   15f84:	df 91       	pop	r29
   15f86:	cf 91       	pop	r28
   15f88:	1f 91       	pop	r17
   15f8a:	ff 90       	pop	r15
   15f8c:	ef 90       	pop	r14
   15f8e:	df 90       	pop	r13
   15f90:	cf 90       	pop	r12
   15f92:	08 95       	ret

00015f94 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)>:
_ZN12EEPROM_CAT259writeByteEmh():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:88

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{
   15f94:	cf 92       	push	r12
   15f96:	df 92       	push	r13
   15f98:	ef 92       	push	r14
   15f9a:	ff 92       	push	r15
   15f9c:	1f 93       	push	r17
   15f9e:	cf 93       	push	r28
   15fa0:	df 93       	push	r29
   15fa2:	ec 01       	movw	r28, r24
   15fa4:	6a 01       	movw	r12, r20
   15fa6:	7b 01       	movw	r14, r22
   15fa8:	12 2f       	mov	r17, r18
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90

  if (address >= _capacity) {
   15faa:	8c 81       	ldd	r24, Y+4	; 0x04
   15fac:	9d 81       	ldd	r25, Y+5	; 0x05
   15fae:	ae 81       	ldd	r26, Y+6	; 0x06
   15fb0:	bf 81       	ldd	r27, Y+7	; 0x07
   15fb2:	c8 16       	cp	r12, r24
   15fb4:	d9 06       	cpc	r13, r25
   15fb6:	ea 06       	cpc	r14, r26
   15fb8:	fb 06       	cpc	r15, r27
   15fba:	18 f5       	brcc	.+70     	; 0x16002 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x6e>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:95
    return(0);
  }


  while (!isReady()) {
   15fbc:	ce 01       	movw	r24, r28
   15fbe:	0e 94 83 af 	call	0x15f06	; 0x15f06 <EEPROM_CAT25::isReady()>
   15fc2:	81 11       	cpse	r24, r1
   15fc4:	03 c0       	rjmp	.+6      	; 0x15fcc <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x38>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:96
    yield();
   15fc6:	0e 94 88 d6 	call	0x1ad10	; 0x1ad10 <yield>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:95
  if (address >= _capacity) {
    return(0);
  }


  while (!isReady()) {
   15fca:	f8 cf       	rjmp	.-16     	; 0x15fbc <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x28>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:99
    yield();
  }

  enableWrite();
   15fcc:	ce 01       	movw	r24, r28
   15fce:	0e 94 88 af 	call	0x15f10	; 0x15f10 <EEPROM_CAT25::enableWrite()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
   15fd2:	a7 01       	movw	r20, r14
   15fd4:	96 01       	movw	r18, r12
   15fd6:	62 e0       	ldi	r22, 0x02	; 2
   15fd8:	ce 01       	movw	r24, r28
   15fda:	0e 94 26 af 	call	0x15e4c	; 0x15e4c <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
   15fde:	61 2f       	mov	r22, r17
   15fe0:	88 81       	ld	r24, Y
   15fe2:	99 81       	ldd	r25, Y+1	; 0x01
   15fe4:	0e 94 71 ac 	call	0x158e2	; 0x158e2 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
   15fe8:	ce 01       	movw	r24, r28
   15fea:	0e 94 66 af 	call	0x15ecc	; 0x15ecc <EEPROM_CAT25::endCommand()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:104

  return(1);
   15fee:	81 e0       	ldi	r24, 0x01	; 1
   15ff0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:105
}
   15ff2:	df 91       	pop	r29
   15ff4:	cf 91       	pop	r28
   15ff6:	1f 91       	pop	r17
   15ff8:	ff 90       	pop	r15
   15ffa:	ef 90       	pop	r14
   15ffc:	df 90       	pop	r13
   15ffe:	cf 90       	pop	r12
   16000:	08 95       	ret
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:91

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
    return(0);
   16002:	90 e0       	ldi	r25, 0x00	; 0
   16004:	80 e0       	ldi	r24, 0x00	; 0
   16006:	f5 cf       	rjmp	.-22     	; 0x15ff2 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x5e>

00016008 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm():
/home/saric/Arduino/libraries/Ethernet2/src/Dhcp.cpp:518
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
   16008:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   1600a:	00 e0       	ldi	r16, 0x00	; 0
   1600c:	20 e0       	ldi	r18, 0x00	; 0
   1600e:	40 e0       	ldi	r20, 0x00	; 0
   16010:	60 e0       	ldi	r22, 0x00	; 0
   16012:	8b ee       	ldi	r24, 0xEB	; 235
   16014:	92 e1       	ldi	r25, 0x12	; 18
   16016:	0e 94 4b da 	call	0x1b496	; 0x1b496 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm():
/home/saric/Arduino/libraries/Ethernet2/src/Dhcp.cpp:518
   1601a:	0f 91       	pop	r16
   1601c:	08 95       	ret

0001601e <DNSClient::begin(IPAddress const&)>:
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   1601e:	fb 01       	movw	r30, r22
   16020:	42 81       	ldd	r20, Z+2	; 0x02
   16022:	53 81       	ldd	r21, Z+3	; 0x03
   16024:	64 81       	ldd	r22, Z+4	; 0x04
   16026:	75 81       	ldd	r23, Z+5	; 0x05
   16028:	fc 01       	movw	r30, r24
   1602a:	42 83       	std	Z+2, r20	; 0x02
   1602c:	53 83       	std	Z+3, r21	; 0x03
   1602e:	64 83       	std	Z+4, r22	; 0x04
   16030:	75 83       	std	Z+5, r23	; 0x05
_ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
   16032:	17 82       	std	Z+7, r1	; 0x07
   16034:	16 82       	std	Z+6, r1	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:55
}
   16036:	08 95       	ret

00016038 <DNSClient::inet_aton(char const*, IPAddress&)>:
_ZN9DNSClient9inet_atonEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:59


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
   16038:	fb 01       	movw	r30, r22
   1603a:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
   1603c:	8d 91       	ld	r24, X+
   1603e:	81 11       	cpse	r24, r1
   16040:	fd cf       	rjmp	.-6      	; 0x1603c <DNSClient::inet_aton(char const*, IPAddress&)+0x4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
   16042:	90 e0       	ldi	r25, 0x00	; 0
   16044:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
   16046:	70 e0       	ldi	r23, 0x00	; 0
   16048:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   1604a:	3a e0       	ldi	r19, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
   1604c:	21 91       	ld	r18, Z+
   1604e:	22 23       	and	r18, r18
   16050:	f9 f0       	breq	.+62     	; 0x16090 <DNSClient::inet_aton(char const*, IPAddress&)+0x58>
   16052:	64 30       	cpi	r22, 0x04	; 4
   16054:	71 05       	cpc	r23, r1
   16056:	54 f5       	brge	.+84     	; 0x160ac <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
   16058:	2e 32       	cpi	r18, 0x2E	; 46
   1605a:	71 f4       	brne	.+28     	; 0x16078 <DNSClient::inet_aton(char const*, IPAddress&)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
   1605c:	8f 3f       	cpi	r24, 0xFF	; 255
   1605e:	91 05       	cpc	r25, r1
   16060:	09 f0       	breq	.+2      	; 0x16064 <DNSClient::inet_aton(char const*, IPAddress&)+0x2c>
   16062:	24 f5       	brge	.+72     	; 0x160ac <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
   16064:	da 01       	movw	r26, r20
   16066:	a6 0f       	add	r26, r22
   16068:	b7 1f       	adc	r27, r23
   1606a:	12 96       	adiw	r26, 0x02	; 2
   1606c:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
   1606e:	6f 5f       	subi	r22, 0xFF	; 255
   16070:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
   16072:	90 e0       	ldi	r25, 0x00	; 0
   16074:	80 e0       	ldi	r24, 0x00	; 0
   16076:	ea cf       	rjmp	.-44     	; 0x1604c <DNSClient::inet_aton(char const*, IPAddress&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   16078:	38 9f       	mul	r19, r24
   1607a:	d0 01       	movw	r26, r0
   1607c:	39 9f       	mul	r19, r25
   1607e:	b0 0d       	add	r27, r0
   16080:	11 24       	eor	r1, r1
   16082:	82 2f       	mov	r24, r18
   16084:	22 0f       	add	r18, r18
   16086:	99 0b       	sbc	r25, r25
   16088:	c0 97       	sbiw	r24, 0x30	; 48
   1608a:	8a 0f       	add	r24, r26
   1608c:	9b 1f       	adc	r25, r27
   1608e:	de cf       	rjmp	.-68     	; 0x1604c <DNSClient::inet_aton(char const*, IPAddress&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
   16090:	8f 3f       	cpi	r24, 0xFF	; 255
   16092:	91 05       	cpc	r25, r1
   16094:	09 f0       	breq	.+2      	; 0x16098 <DNSClient::inet_aton(char const*, IPAddress&)+0x60>
   16096:	54 f4       	brge	.+20     	; 0x160ac <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
   16098:	64 30       	cpi	r22, 0x04	; 4
   1609a:	71 05       	cpc	r23, r1
   1609c:	3c f4       	brge	.+14     	; 0x160ac <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
   1609e:	46 0f       	add	r20, r22
   160a0:	57 1f       	adc	r21, r23
   160a2:	fa 01       	movw	r30, r20
   160a4:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:109
            return 1;
   160a6:	81 e0       	ldi	r24, 0x01	; 1
   160a8:	90 e0       	ldi	r25, 0x00	; 0
   160aa:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:104
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
   160ac:	90 e0       	ldi	r25, 0x00	; 0
   160ae:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:116
    }
    else
    {
        return 0;
    }
}
   160b0:	08 95       	ret

000160b2 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
   160b2:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   160b4:	00 e0       	ldi	r16, 0x00	; 0
   160b6:	20 e0       	ldi	r18, 0x00	; 0
   160b8:	40 e0       	ldi	r20, 0x00	; 0
   160ba:	60 e0       	ldi	r22, 0x00	; 0
   160bc:	81 ef       	ldi	r24, 0xF1	; 241
   160be:	92 e1       	ldi	r25, 0x12	; 18
   160c0:	0e 94 4b da 	call	0x1b496	; 0x1b496 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
   160c4:	0f 91       	pop	r16
   160c6:	08 95       	ret

000160c8 <DNSClient::BuildRequest(char const*)>:
_ZN9DNSClient12BuildRequestEPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:176

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
   160c8:	8f 92       	push	r8
   160ca:	9f 92       	push	r9
   160cc:	af 92       	push	r10
   160ce:	bf 92       	push	r11
   160d0:	cf 92       	push	r12
   160d2:	df 92       	push	r13
   160d4:	ef 92       	push	r14
   160d6:	ff 92       	push	r15
   160d8:	0f 93       	push	r16
   160da:	1f 93       	push	r17
   160dc:	cf 93       	push	r28
   160de:	df 93       	push	r29
   160e0:	00 d0       	rcall	.+0      	; 0x160e2 <DNSClient::BuildRequest(char const*)+0x1a>
   160e2:	cd b7       	in	r28, 0x3d	; 61
   160e4:	de b7       	in	r29, 0x3e	; 62
   160e6:	6c 01       	movw	r12, r24
   160e8:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
   160ea:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   160ee:	f6 01       	movw	r30, r12
   160f0:	77 83       	std	Z+7, r23	; 0x07
   160f2:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
   160f4:	86 01       	movw	r16, r12
   160f6:	08 5f       	subi	r16, 0xF8	; 248
   160f8:	1f 4f       	sbci	r17, 0xFF	; 255
   160fa:	b6 01       	movw	r22, r12
   160fc:	6a 5f       	subi	r22, 0xFA	; 250
   160fe:	7f 4f       	sbci	r23, 0xFF	; 255
   16100:	42 e0       	ldi	r20, 0x02	; 2
   16102:	50 e0       	ldi	r21, 0x00	; 0
   16104:	c8 01       	movw	r24, r16
   16106:	0e 94 96 b7 	call	0x16f2c	; 0x16f2c <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
   1610a:	81 e0       	ldi	r24, 0x01	; 1
   1610c:	90 e0       	ldi	r25, 0x00	; 0
   1610e:	9a 83       	std	Y+2, r25	; 0x02
   16110:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   16112:	42 e0       	ldi	r20, 0x02	; 2
   16114:	50 e0       	ldi	r21, 0x00	; 0
   16116:	be 01       	movw	r22, r28
   16118:	6f 5f       	subi	r22, 0xFF	; 255
   1611a:	7f 4f       	sbci	r23, 0xFF	; 255
   1611c:	c8 01       	movw	r24, r16
   1611e:	0e 94 96 b7 	call	0x16f2c	; 0x16f2c <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
   16122:	80 e0       	ldi	r24, 0x00	; 0
   16124:	91 e0       	ldi	r25, 0x01	; 1
   16126:	9a 83       	std	Y+2, r25	; 0x02
   16128:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   1612a:	42 e0       	ldi	r20, 0x02	; 2
   1612c:	50 e0       	ldi	r21, 0x00	; 0
   1612e:	be 01       	movw	r22, r28
   16130:	6f 5f       	subi	r22, 0xFF	; 255
   16132:	7f 4f       	sbci	r23, 0xFF	; 255
   16134:	c8 01       	movw	r24, r16
   16136:	0e 94 96 b7 	call	0x16f2c	; 0x16f2c <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
   1613a:	1a 82       	std	Y+2, r1	; 0x02
   1613c:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   1613e:	42 e0       	ldi	r20, 0x02	; 2
   16140:	50 e0       	ldi	r21, 0x00	; 0
   16142:	be 01       	movw	r22, r28
   16144:	6f 5f       	subi	r22, 0xFF	; 255
   16146:	7f 4f       	sbci	r23, 0xFF	; 255
   16148:	c8 01       	movw	r24, r16
   1614a:	0e 94 96 b7 	call	0x16f2c	; 0x16f2c <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   1614e:	42 e0       	ldi	r20, 0x02	; 2
   16150:	50 e0       	ldi	r21, 0x00	; 0
   16152:	be 01       	movw	r22, r28
   16154:	6f 5f       	subi	r22, 0xFF	; 255
   16156:	7f 4f       	sbci	r23, 0xFF	; 255
   16158:	c8 01       	movw	r24, r16
   1615a:	0e 94 96 b7 	call	0x16f2c	; 0x16f2c <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   1615e:	42 e0       	ldi	r20, 0x02	; 2
   16160:	50 e0       	ldi	r21, 0x00	; 0
   16162:	be 01       	movw	r22, r28
   16164:	6f 5f       	subi	r22, 0xFF	; 255
   16166:	7f 4f       	sbci	r23, 0xFF	; 255
   16168:	c8 01       	movw	r24, r16
   1616a:	0e 94 96 b7 	call	0x16f2c	; 0x16f2c <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
   1616e:	67 01       	movw	r12, r14
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
   16170:	f7 01       	movw	r30, r14
   16172:	80 81       	ld	r24, Z
   16174:	88 23       	and	r24, r24
   16176:	01 f1       	breq	.+64     	; 0x161b8 <DNSClient::BuildRequest(char const*)+0xf0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
   16178:	76 01       	movw	r14, r12
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
   1617a:	f7 01       	movw	r30, r14
   1617c:	81 91       	ld	r24, Z+
   1617e:	5f 01       	movw	r10, r30
   16180:	88 23       	and	r24, r24
   16182:	11 f0       	breq	.+4      	; 0x16188 <DNSClient::BuildRequest(char const*)+0xc0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224 (discriminator 1)
   16184:	8e 32       	cpi	r24, 0x2E	; 46
   16186:	b1 f4       	brne	.+44     	; 0x161b4 <DNSClient::BuildRequest(char const*)+0xec>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
   16188:	47 01       	movw	r8, r14
   1618a:	8c 18       	sub	r8, r12
   1618c:	9d 08       	sbc	r9, r13
   1618e:	18 14       	cp	r1, r8
   16190:	19 04       	cpc	r1, r9
   16192:	74 f4       	brge	.+28     	; 0x161b0 <DNSClient::BuildRequest(char const*)+0xe8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
   16194:	8b 82       	std	Y+3, r8	; 0x03
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
   16196:	41 e0       	ldi	r20, 0x01	; 1
   16198:	50 e0       	ldi	r21, 0x00	; 0
   1619a:	be 01       	movw	r22, r28
   1619c:	6d 5f       	subi	r22, 0xFD	; 253
   1619e:	7f 4f       	sbci	r23, 0xFF	; 255
   161a0:	c8 01       	movw	r24, r16
   161a2:	0e 94 96 b7 	call	0x16f2c	; 0x16f2c <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
   161a6:	a4 01       	movw	r20, r8
   161a8:	b6 01       	movw	r22, r12
   161aa:	c8 01       	movw	r24, r16
   161ac:	0e 94 96 b7 	call	0x16f2c	; 0x16f2c <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
   161b0:	65 01       	movw	r12, r10
   161b2:	de cf       	rjmp	.-68     	; 0x16170 <DNSClient::BuildRequest(char const*)+0xa8>
   161b4:	75 01       	movw	r14, r10
   161b6:	e1 cf       	rjmp	.-62     	; 0x1617a <DNSClient::BuildRequest(char const*)+0xb2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
   161b8:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
   161ba:	41 e0       	ldi	r20, 0x01	; 1
   161bc:	50 e0       	ldi	r21, 0x00	; 0
   161be:	be 01       	movw	r22, r28
   161c0:	6d 5f       	subi	r22, 0xFD	; 253
   161c2:	7f 4f       	sbci	r23, 0xFF	; 255
   161c4:	c8 01       	movw	r24, r16
   161c6:	0e 94 96 b7 	call	0x16f2c	; 0x16f2c <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
   161ca:	e1 2c       	mov	r14, r1
   161cc:	ff 24       	eor	r15, r15
   161ce:	f3 94       	inc	r15
   161d0:	fa 82       	std	Y+2, r15	; 0x02
   161d2:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   161d4:	42 e0       	ldi	r20, 0x02	; 2
   161d6:	50 e0       	ldi	r21, 0x00	; 0
   161d8:	be 01       	movw	r22, r28
   161da:	6f 5f       	subi	r22, 0xFF	; 255
   161dc:	7f 4f       	sbci	r23, 0xFF	; 255
   161de:	c8 01       	movw	r24, r16
   161e0:	0e 94 96 b7 	call	0x16f2c	; 0x16f2c <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
   161e4:	fa 82       	std	Y+2, r15	; 0x02
   161e6:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   161e8:	42 e0       	ldi	r20, 0x02	; 2
   161ea:	50 e0       	ldi	r21, 0x00	; 0
   161ec:	be 01       	movw	r22, r28
   161ee:	6f 5f       	subi	r22, 0xFF	; 255
   161f0:	7f 4f       	sbci	r23, 0xFF	; 255
   161f2:	c8 01       	movw	r24, r16
   161f4:	0e 94 96 b7 	call	0x16f2c	; 0x16f2c <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:252
    // Success!  Everything buffered okay
    return 1;
}
   161f8:	81 e0       	ldi	r24, 0x01	; 1
   161fa:	90 e0       	ldi	r25, 0x00	; 0
   161fc:	0f 90       	pop	r0
   161fe:	0f 90       	pop	r0
   16200:	0f 90       	pop	r0
   16202:	df 91       	pop	r29
   16204:	cf 91       	pop	r28
   16206:	1f 91       	pop	r17
   16208:	0f 91       	pop	r16
   1620a:	ff 90       	pop	r15
   1620c:	ef 90       	pop	r14
   1620e:	df 90       	pop	r13
   16210:	cf 90       	pop	r12
   16212:	bf 90       	pop	r11
   16214:	af 90       	pop	r10
   16216:	9f 90       	pop	r9
   16218:	8f 90       	pop	r8
   1621a:	08 95       	ret

0001621c <DNSClient::ProcessResponse(unsigned int, IPAddress&)>:
_ZN9DNSClient15ProcessResponseEjR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:256


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
   1621c:	2f 92       	push	r2
   1621e:	3f 92       	push	r3
   16220:	4f 92       	push	r4
   16222:	5f 92       	push	r5
   16224:	6f 92       	push	r6
   16226:	7f 92       	push	r7
   16228:	8f 92       	push	r8
   1622a:	9f 92       	push	r9
   1622c:	af 92       	push	r10
   1622e:	bf 92       	push	r11
   16230:	cf 92       	push	r12
   16232:	df 92       	push	r13
   16234:	ef 92       	push	r14
   16236:	ff 92       	push	r15
   16238:	0f 93       	push	r16
   1623a:	1f 93       	push	r17
   1623c:	cf 93       	push	r28
   1623e:	df 93       	push	r29
   16240:	cd b7       	in	r28, 0x3d	; 61
   16242:	de b7       	in	r29, 0x3e	; 62
   16244:	63 97       	sbiw	r28, 0x13	; 19
   16246:	0f b6       	in	r0, 0x3f	; 63
   16248:	f8 94       	cli
   1624a:	de bf       	out	0x3e, r29	; 62
   1624c:	0f be       	out	0x3f, r0	; 63
   1624e:	cd bf       	out	0x3d, r28	; 61
   16250:	7c 01       	movw	r14, r24
   16252:	2b 01       	movw	r4, r22
   16254:	1a 01       	movw	r2, r20
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
    uint32_t startTime = millis();
   16256:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   1625a:	4b 01       	movw	r8, r22
   1625c:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   1625e:	87 01       	movw	r16, r14
   16260:	08 5f       	subi	r16, 0xF8	; 248
   16262:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
   16264:	71 2c       	mov	r7, r1
   16266:	61 2c       	mov	r6, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   16268:	c8 01       	movw	r24, r16
   1626a:	0e 94 0b b8 	call	0x17016	; 0x17016 <EthernetUDP::parsePacket()>
   1626e:	18 16       	cp	r1, r24
   16270:	19 06       	cpc	r1, r25
   16272:	9c f0       	brlt	.+38     	; 0x1629a <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x7e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
   16274:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   16278:	68 19       	sub	r22, r8
   1627a:	79 09       	sbc	r23, r9
   1627c:	8a 09       	sbc	r24, r10
   1627e:	9b 09       	sbc	r25, r11
   16280:	46 16       	cp	r4, r22
   16282:	57 06       	cpc	r5, r23
   16284:	68 06       	cpc	r6, r24
   16286:	79 06       	cpc	r7, r25
   16288:	08 f4       	brcc	.+2      	; 0x1628c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x70>
   1628a:	31 c1       	rjmp	.+610    	; 0x164ee <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2d2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
   1628c:	62 e3       	ldi	r22, 0x32	; 50
   1628e:	70 e0       	ldi	r23, 0x00	; 0
   16290:	80 e0       	ldi	r24, 0x00	; 0
   16292:	90 e0       	ldi	r25, 0x00	; 0
   16294:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   16298:	e7 cf       	rjmp	.-50     	; 0x16268 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x4c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
   1629a:	f7 01       	movw	r30, r14
   1629c:	42 81       	ldd	r20, Z+2	; 0x02
   1629e:	53 81       	ldd	r21, Z+3	; 0x03
   162a0:	64 81       	ldd	r22, Z+4	; 0x04
   162a2:	75 81       	ldd	r23, Z+5	; 0x05
   162a4:	81 8d       	ldd	r24, Z+25	; 0x19
   162a6:	92 8d       	ldd	r25, Z+26	; 0x1a
   162a8:	a3 8d       	ldd	r26, Z+27	; 0x1b
   162aa:	b4 8d       	ldd	r27, Z+28	; 0x1c
   162ac:	48 17       	cp	r20, r24
   162ae:	59 07       	cpc	r21, r25
   162b0:	6a 07       	cpc	r22, r26
   162b2:	7b 07       	cpc	r23, r27
   162b4:	09 f0       	breq	.+2      	; 0x162b8 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x9c>
   162b6:	1f c1       	rjmp	.+574    	; 0x164f6 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2da>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271 (discriminator 2)
   162b8:	85 8d       	ldd	r24, Z+29	; 0x1d
   162ba:	96 8d       	ldd	r25, Z+30	; 0x1e
   162bc:	c5 97       	sbiw	r24, 0x35	; 53
   162be:	09 f0       	breq	.+2      	; 0x162c2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xa6>
   162c0:	1a c1       	rjmp	.+564    	; 0x164f6 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2da>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
   162c2:	c8 01       	movw	r24, r16
   162c4:	0e 94 49 b7 	call	0x16e92	; 0x16e92 <EthernetUDP::available()>
   162c8:	0c 97       	sbiw	r24, 0x0c	; 12
   162ca:	0c f4       	brge	.+2      	; 0x162ce <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xb2>
   162cc:	19 c1       	rjmp	.+562    	; 0x16500 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2e4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
   162ce:	4c e0       	ldi	r20, 0x0C	; 12
   162d0:	50 e0       	ldi	r21, 0x00	; 0
   162d2:	be 01       	movw	r22, r28
   162d4:	6f 5f       	subi	r22, 0xFF	; 255
   162d6:	7f 4f       	sbci	r23, 0xFF	; 255
   162d8:	c8 01       	movw	r24, r16
   162da:	0e 94 d4 b7 	call	0x16fa8	; 0x16fa8 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
   162de:	8b 81       	ldd	r24, Y+3	; 0x03
   162e0:	9c 81       	ldd	r25, Y+4	; 0x04
   162e2:	98 27       	eor	r25, r24
   162e4:	89 27       	eor	r24, r25
   162e6:	98 27       	eor	r25, r24
   162e8:	9a 8b       	std	Y+18, r25	; 0x12
   162ea:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
   162ec:	f7 01       	movw	r30, r14
   162ee:	46 81       	ldd	r20, Z+6	; 0x06
   162f0:	57 81       	ldd	r21, Z+7	; 0x07
   162f2:	29 81       	ldd	r18, Y+1	; 0x01
   162f4:	3a 81       	ldd	r19, Y+2	; 0x02
   162f6:	42 17       	cp	r20, r18
   162f8:	53 07       	cpc	r21, r19
   162fa:	11 f4       	brne	.+4      	; 0x16300 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xe4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287 (discriminator 1)
   162fc:	97 fd       	sbrc	r25, 7
   162fe:	21 c0       	rjmp	.+66     	; 0x16342 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
   16300:	c8 01       	movw	r24, r16
   16302:	0e 94 63 b7 	call	0x16ec6	; 0x16ec6 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
   16306:	7c ef       	ldi	r23, 0xFC	; 252
   16308:	e7 2e       	mov	r14, r23
   1630a:	ff 24       	eor	r15, r15
   1630c:	fa 94       	dec	r15
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
   1630e:	c7 01       	movw	r24, r14
   16310:	63 96       	adiw	r28, 0x13	; 19
   16312:	0f b6       	in	r0, 0x3f	; 63
   16314:	f8 94       	cli
   16316:	de bf       	out	0x3e, r29	; 62
   16318:	0f be       	out	0x3f, r0	; 63
   1631a:	cd bf       	out	0x3d, r28	; 61
   1631c:	df 91       	pop	r29
   1631e:	cf 91       	pop	r28
   16320:	1f 91       	pop	r17
   16322:	0f 91       	pop	r16
   16324:	ff 90       	pop	r15
   16326:	ef 90       	pop	r14
   16328:	df 90       	pop	r13
   1632a:	cf 90       	pop	r12
   1632c:	bf 90       	pop	r11
   1632e:	af 90       	pop	r10
   16330:	9f 90       	pop	r9
   16332:	8f 90       	pop	r8
   16334:	7f 90       	pop	r7
   16336:	6f 90       	pop	r6
   16338:	5f 90       	pop	r5
   1633a:	4f 90       	pop	r4
   1633c:	3f 90       	pop	r3
   1633e:	2f 90       	pop	r2
   16340:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
   16342:	8f 70       	andi	r24, 0x0F	; 15
   16344:	92 70       	andi	r25, 0x02	; 2
   16346:	89 2b       	or	r24, r25
   16348:	41 f0       	breq	.+16     	; 0x1635a <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x13e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
   1634a:	c8 01       	movw	r24, r16
   1634c:	0e 94 63 b7 	call	0x16ec6	; 0x16ec6 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
   16350:	6b ef       	ldi	r22, 0xFB	; 251
   16352:	e6 2e       	mov	r14, r22
   16354:	ff 24       	eor	r15, r15
   16356:	fa 94       	dec	r15
   16358:	da cf       	rjmp	.-76     	; 0x1630e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
   1635a:	cf 80       	ldd	r12, Y+7	; 0x07
   1635c:	d8 84       	ldd	r13, Y+8	; 0x08
   1635e:	dc 24       	eor	r13, r12
   16360:	cd 24       	eor	r12, r13
   16362:	dc 24       	eor	r13, r12
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   16364:	f1 2c       	mov	r15, r1
   16366:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
   16368:	c1 14       	cp	r12, r1
   1636a:	d1 04       	cpc	r13, r1
   1636c:	d1 f4       	brne	.+52     	; 0x163a2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x186>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
   1636e:	c8 01       	movw	r24, r16
   16370:	0e 94 63 b7 	call	0x16ec6	; 0x16ec6 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
   16374:	5a ef       	ldi	r21, 0xFA	; 250
   16376:	e5 2e       	mov	r14, r21
   16378:	ff 24       	eor	r15, r15
   1637a:	fa 94       	dec	r15
   1637c:	c8 cf       	rjmp	.-112    	; 0x1630e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
   1637e:	8d 85       	ldd	r24, Y+13	; 0x0d
   16380:	81 11       	cpse	r24, r1
   16382:	17 c0       	rjmp	.+46     	; 0x163b2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x196>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   16384:	c8 01       	movw	r24, r16
   16386:	0e 94 aa b7 	call	0x16f54	; 0x16f54 <EthernetUDP::read()>
   1638a:	c8 01       	movw	r24, r16
   1638c:	0e 94 aa b7 	call	0x16f54	; 0x16f54 <EthernetUDP::read()>
   16390:	c8 01       	movw	r24, r16
   16392:	0e 94 aa b7 	call	0x16f54	; 0x16f54 <EthernetUDP::read()>
   16396:	c8 01       	movw	r24, r16
   16398:	0e 94 aa b7 	call	0x16f54	; 0x16f54 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   1639c:	ff ef       	ldi	r31, 0xFF	; 255
   1639e:	ef 1a       	sub	r14, r31
   163a0:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313 (discriminator 1)
   163a2:	8d 81       	ldd	r24, Y+5	; 0x05
   163a4:	9e 81       	ldd	r25, Y+6	; 0x06
   163a6:	98 27       	eor	r25, r24
   163a8:	89 27       	eor	r24, r25
   163aa:	98 27       	eor	r25, r24
   163ac:	e8 16       	cp	r14, r24
   163ae:	f9 06       	cpc	r15, r25
   163b0:	a8 f4       	brcc	.+42     	; 0x163dc <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   163b2:	41 e0       	ldi	r20, 0x01	; 1
   163b4:	50 e0       	ldi	r21, 0x00	; 0
   163b6:	be 01       	movw	r22, r28
   163b8:	63 5f       	subi	r22, 0xF3	; 243
   163ba:	7f 4f       	sbci	r23, 0xFF	; 255
   163bc:	c8 01       	movw	r24, r16
   163be:	0e 94 d4 b7 	call	0x16fa8	; 0x16fa8 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
   163c2:	8d 85       	ldd	r24, Y+13	; 0x0d
   163c4:	88 23       	and	r24, r24
   163c6:	d9 f2       	breq	.-74     	; 0x1637e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x162>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
   163c8:	8d 85       	ldd	r24, Y+13	; 0x0d
   163ca:	9f ef       	ldi	r25, 0xFF	; 255
   163cc:	98 0f       	add	r25, r24
   163ce:	9d 87       	std	Y+13, r25	; 0x0d
   163d0:	88 23       	and	r24, r24
   163d2:	a9 f2       	breq	.-86     	; 0x1637e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x162>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
   163d4:	c8 01       	movw	r24, r16
   163d6:	0e 94 aa b7 	call	0x16f54	; 0x16f54 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
   163da:	f6 cf       	rjmp	.-20     	; 0x163c8 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1ac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   163dc:	b1 2c       	mov	r11, r1
   163de:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   163e0:	41 e0       	ldi	r20, 0x01	; 1
   163e2:	50 e0       	ldi	r21, 0x00	; 0
   163e4:	be 01       	movw	r22, r28
   163e6:	6d 5e       	subi	r22, 0xED	; 237
   163e8:	7f 4f       	sbci	r23, 0xFF	; 255
   163ea:	c8 01       	movw	r24, r16
   163ec:	0e 94 d4 b7 	call	0x16fa8	; 0x16fa8 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
   163f0:	8b 89       	ldd	r24, Y+19	; 0x13
   163f2:	98 2f       	mov	r25, r24
   163f4:	90 7c       	andi	r25, 0xC0	; 192
   163f6:	61 f4       	brne	.+24     	; 0x16410 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1f4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
   163f8:	88 23       	and	r24, r24
   163fa:	89 f0       	breq	.+34     	; 0x1641e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x202>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
   163fc:	8b 89       	ldd	r24, Y+19	; 0x13
   163fe:	9f ef       	ldi	r25, 0xFF	; 255
   16400:	98 0f       	add	r25, r24
   16402:	9b 8b       	std	Y+19, r25	; 0x13
   16404:	88 23       	and	r24, r24
   16406:	41 f0       	breq	.+16     	; 0x16418 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1fc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
   16408:	c8 01       	movw	r24, r16
   1640a:	0e 94 aa b7 	call	0x16f54	; 0x16f54 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
   1640e:	f6 cf       	rjmp	.-20     	; 0x163fc <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1e0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
   16410:	c8 01       	movw	r24, r16
   16412:	0e 94 aa b7 	call	0x16f54	; 0x16f54 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
   16416:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
   16418:	8b 89       	ldd	r24, Y+19	; 0x13
   1641a:	81 11       	cpse	r24, r1
   1641c:	e1 cf       	rjmp	.-62     	; 0x163e0 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
   1641e:	42 e0       	ldi	r20, 0x02	; 2
   16420:	50 e0       	ldi	r21, 0x00	; 0
   16422:	be 01       	movw	r22, r28
   16424:	61 5f       	subi	r22, 0xF1	; 241
   16426:	7f 4f       	sbci	r23, 0xFF	; 255
   16428:	c8 01       	movw	r24, r16
   1642a:	0e 94 d4 b7 	call	0x16fa8	; 0x16fa8 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
   1642e:	42 e0       	ldi	r20, 0x02	; 2
   16430:	50 e0       	ldi	r21, 0x00	; 0
   16432:	be 01       	movw	r22, r28
   16434:	63 5f       	subi	r22, 0xF3	; 243
   16436:	7f 4f       	sbci	r23, 0xFF	; 255
   16438:	c8 01       	movw	r24, r16
   1643a:	0e 94 d4 b7 	call	0x16fa8	; 0x16fa8 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   1643e:	c8 01       	movw	r24, r16
   16440:	0e 94 aa b7 	call	0x16f54	; 0x16f54 <EthernetUDP::read()>
   16444:	c8 01       	movw	r24, r16
   16446:	0e 94 aa b7 	call	0x16f54	; 0x16f54 <EthernetUDP::read()>
   1644a:	c8 01       	movw	r24, r16
   1644c:	0e 94 aa b7 	call	0x16f54	; 0x16f54 <EthernetUDP::read()>
   16450:	c8 01       	movw	r24, r16
   16452:	0e 94 aa b7 	call	0x16f54	; 0x16f54 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
   16456:	42 e0       	ldi	r20, 0x02	; 2
   16458:	50 e0       	ldi	r21, 0x00	; 0
   1645a:	be 01       	movw	r22, r28
   1645c:	6f 5e       	subi	r22, 0xEF	; 239
   1645e:	7f 4f       	sbci	r23, 0xFF	; 255
   16460:	c8 01       	movw	r24, r16
   16462:	0e 94 d4 b7 	call	0x16fa8	; 0x16fa8 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
   16466:	8f 85       	ldd	r24, Y+15	; 0x0f
   16468:	98 89       	ldd	r25, Y+16	; 0x10
   1646a:	81 15       	cp	r24, r1
   1646c:	91 40       	sbci	r25, 0x01	; 1
   1646e:	f9 f4       	brne	.+62     	; 0x164ae <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x292>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395 (discriminator 1)
   16470:	ed 84       	ldd	r14, Y+13	; 0x0d
   16472:	fe 84       	ldd	r15, Y+14	; 0x0e
   16474:	fe 24       	eor	r15, r14
   16476:	ef 24       	eor	r14, r15
   16478:	fe 24       	eor	r15, r14
   1647a:	81 e0       	ldi	r24, 0x01	; 1
   1647c:	e8 16       	cp	r14, r24
   1647e:	f1 04       	cpc	r15, r1
   16480:	b1 f4       	brne	.+44     	; 0x164ae <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x292>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
   16482:	89 89       	ldd	r24, Y+17	; 0x11
   16484:	9a 89       	ldd	r25, Y+18	; 0x12
   16486:	81 15       	cp	r24, r1
   16488:	94 40       	sbci	r25, 0x04	; 4
   1648a:	41 f0       	breq	.+16     	; 0x1649c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x280>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
   1648c:	c8 01       	movw	r24, r16
   1648e:	0e 94 63 b7 	call	0x16ec6	; 0x16ec6 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
   16492:	47 ef       	ldi	r20, 0xF7	; 247
   16494:	e4 2e       	mov	r14, r20
   16496:	ff 24       	eor	r15, r15
   16498:	fa 94       	dec	r15
   1649a:	39 cf       	rjmp	.-398    	; 0x1630e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   1649c:	b1 01       	movw	r22, r2
   1649e:	6e 5f       	subi	r22, 0xFE	; 254
   164a0:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN9DNSClient15ProcessResponseEjR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
   164a2:	44 e0       	ldi	r20, 0x04	; 4
   164a4:	50 e0       	ldi	r21, 0x00	; 0
   164a6:	c8 01       	movw	r24, r16
   164a8:	0e 94 d4 b7 	call	0x16fa8	; 0x16fa8 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:405
            return SUCCESS;
   164ac:	30 cf       	rjmp	.-416    	; 0x1630e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
   164ae:	f1 2c       	mov	r15, r1
   164b0:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410 (discriminator 3)
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   164b2:	89 89       	ldd	r24, Y+17	; 0x11
   164b4:	9a 89       	ldd	r25, Y+18	; 0x12
   164b6:	98 27       	eor	r25, r24
   164b8:	89 27       	eor	r24, r25
   164ba:	98 27       	eor	r25, r24
   164bc:	e8 16       	cp	r14, r24
   164be:	f9 06       	cpc	r15, r25
   164c0:	38 f4       	brcc	.+14     	; 0x164d0 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2b4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412 (discriminator 2)
            {
                iUdp.read(); // we don't care about the returned byte
   164c2:	c8 01       	movw	r24, r16
   164c4:	0e 94 aa b7 	call	0x16f54	; 0x16f54 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410 (discriminator 2)
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   164c8:	ff ef       	ldi	r31, 0xFF	; 255
   164ca:	ef 1a       	sub	r14, r31
   164cc:	ff 0a       	sbc	r15, r31
   164ce:	f1 cf       	rjmp	.-30     	; 0x164b2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x296>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   164d0:	2f ef       	ldi	r18, 0xFF	; 255
   164d2:	a2 1a       	sub	r10, r18
   164d4:	b2 0a       	sbc	r11, r18
   164d6:	ca 14       	cp	r12, r10
   164d8:	db 04       	cpc	r13, r11
   164da:	09 f0       	breq	.+2      	; 0x164de <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2c2>
   164dc:	81 cf       	rjmp	.-254    	; 0x163e0 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
   164de:	c8 01       	movw	r24, r16
   164e0:	0e 94 63 b7 	call	0x16ec6	; 0x16ec6 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
   164e4:	36 ef       	ldi	r19, 0xF6	; 246
   164e6:	e3 2e       	mov	r14, r19
   164e8:	ff 24       	eor	r15, r15
   164ea:	fa 94       	dec	r15
   164ec:	10 cf       	rjmp	.-480    	; 0x1630e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
   164ee:	ee 24       	eor	r14, r14
   164f0:	ea 94       	dec	r14
   164f2:	fe 2c       	mov	r15, r14
   164f4:	0c cf       	rjmp	.-488    	; 0x1630e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
   164f6:	9e ef       	ldi	r25, 0xFE	; 254
   164f8:	e9 2e       	mov	r14, r25
   164fa:	ff 24       	eor	r15, r15
   164fc:	fa 94       	dec	r15
   164fe:	07 cf       	rjmp	.-498    	; 0x1630e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
   16500:	8d ef       	ldi	r24, 0xFD	; 253
   16502:	e8 2e       	mov	r14, r24
   16504:	ff 24       	eor	r15, r15
   16506:	fa 94       	dec	r15
   16508:	02 cf       	rjmp	.-508    	; 0x1630e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>

0001650a <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
   1650a:	8f 92       	push	r8
   1650c:	9f 92       	push	r9
   1650e:	af 92       	push	r10
   16510:	bf 92       	push	r11
   16512:	cf 92       	push	r12
   16514:	df 92       	push	r13
   16516:	ef 92       	push	r14
   16518:	ff 92       	push	r15
   1651a:	0f 93       	push	r16
   1651c:	1f 93       	push	r17
   1651e:	cf 93       	push	r28
   16520:	df 93       	push	r29
   16522:	00 d0       	rcall	.+0      	; 0x16524 <DNSClient::getHostByName(char const*, IPAddress&)+0x1a>
   16524:	00 d0       	rcall	.+0      	; 0x16526 <DNSClient::getHostByName(char const*, IPAddress&)+0x1c>
   16526:	cd b7       	in	r28, 0x3d	; 61
   16528:	de b7       	in	r29, 0x3e	; 62
   1652a:	7c 01       	movw	r14, r24
   1652c:	4b 01       	movw	r8, r22
   1652e:	5a 01       	movw	r10, r20
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:123
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
   16530:	0e 94 1c b0 	call	0x16038	; 0x16038 <DNSClient::inet_aton(char const*, IPAddress&)>
   16534:	8c 01       	movw	r16, r24
   16536:	89 2b       	or	r24, r25
   16538:	09 f0       	breq	.+2      	; 0x1653c <DNSClient::getHostByName(char const*, IPAddress&)+0x32>
   1653a:	6d c0       	rjmp	.+218    	; 0x16616 <DNSClient::getHostByName(char const*, IPAddress&)+0x10c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
   1653c:	f7 01       	movw	r30, r14
   1653e:	42 81       	ldd	r20, Z+2	; 0x02
   16540:	53 81       	ldd	r21, Z+3	; 0x03
   16542:	64 81       	ldd	r22, Z+4	; 0x04
   16544:	75 81       	ldd	r23, Z+5	; 0x05
   16546:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <INADDR_NONE+0x2>
   1654a:	90 91 f4 12 	lds	r25, 0x12F4	; 0x8012f4 <INADDR_NONE+0x3>
   1654e:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <INADDR_NONE+0x4>
   16552:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <INADDR_NONE+0x5>
   16556:	48 17       	cp	r20, r24
   16558:	59 07       	cpc	r21, r25
   1655a:	6a 07       	cpc	r22, r26
   1655c:	7b 07       	cpc	r23, r27
   1655e:	09 f4       	brne	.+2      	; 0x16562 <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
   16560:	5d c0       	rjmp	.+186    	; 0x1661c <DNSClient::getHostByName(char const*, IPAddress&)+0x112>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
   16562:	67 01       	movw	r12, r14
   16564:	f8 e0       	ldi	r31, 0x08	; 8
   16566:	cf 0e       	add	r12, r31
   16568:	d1 1c       	adc	r13, r1
   1656a:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   1656e:	6f 70       	andi	r22, 0x0F	; 15
   16570:	77 27       	eor	r23, r23
   16572:	7c 5f       	subi	r23, 0xFC	; 252
   16574:	c6 01       	movw	r24, r12
   16576:	0e 94 5c b8 	call	0x170b8	; 0x170b8 <EthernetUDP::begin(unsigned int)>
   1657a:	81 30       	cpi	r24, 0x01	; 1
   1657c:	29 f5       	brne	.+74     	; 0x165c8 <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   1657e:	87 e4       	ldi	r24, 0x47	; 71
   16580:	99 e0       	ldi	r25, 0x09	; 9
   16582:	9a 83       	std	Y+2, r25	; 0x02
   16584:	89 83       	std	Y+1, r24	; 0x01
   16586:	f7 01       	movw	r30, r14
   16588:	82 81       	ldd	r24, Z+2	; 0x02
   1658a:	93 81       	ldd	r25, Z+3	; 0x03
   1658c:	a4 81       	ldd	r26, Z+4	; 0x04
   1658e:	b5 81       	ldd	r27, Z+5	; 0x05
   16590:	8b 83       	std	Y+3, r24	; 0x03
   16592:	9c 83       	std	Y+4, r25	; 0x04
   16594:	ad 83       	std	Y+5, r26	; 0x05
   16596:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
   16598:	45 e3       	ldi	r20, 0x35	; 53
   1659a:	50 e0       	ldi	r21, 0x00	; 0
   1659c:	be 01       	movw	r22, r28
   1659e:	6f 5f       	subi	r22, 0xFF	; 255
   165a0:	7f 4f       	sbci	r23, 0xFF	; 255
   165a2:	c6 01       	movw	r24, r12
   165a4:	0e 94 8a b7 	call	0x16f14	; 0x16f14 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
   165a8:	89 2b       	or	r24, r25
   165aa:	59 f0       	breq	.+22     	; 0x165c2 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:147
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
   165ac:	b4 01       	movw	r22, r8
   165ae:	c7 01       	movw	r24, r14
   165b0:	0e 94 64 b0 	call	0x160c8	; 0x160c8 <DNSClient::BuildRequest(char const*)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:148
                if (ret != 0)
   165b4:	89 2b       	or	r24, r25
   165b6:	29 f0       	breq	.+10     	; 0x165c2 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
   165b8:	c6 01       	movw	r24, r12
   165ba:	0e 94 92 b7 	call	0x16f24	; 0x16f24 <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
   165be:	89 2b       	or	r24, r25
   165c0:	31 f5       	brne	.+76     	; 0x1660e <DNSClient::getHostByName(char const*, IPAddress&)+0x104>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
   165c2:	c6 01       	movw	r24, r12
   165c4:	0e 94 75 b7 	call	0x16eea	; 0x16eea <EthernetUDP::stop()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
    }

    return ret;
}
   165c8:	c8 01       	movw	r24, r16
   165ca:	26 96       	adiw	r28, 0x06	; 6
   165cc:	0f b6       	in	r0, 0x3f	; 63
   165ce:	f8 94       	cli
   165d0:	de bf       	out	0x3e, r29	; 62
   165d2:	0f be       	out	0x3f, r0	; 63
   165d4:	cd bf       	out	0x3d, r28	; 61
   165d6:	df 91       	pop	r29
   165d8:	cf 91       	pop	r28
   165da:	1f 91       	pop	r17
   165dc:	0f 91       	pop	r16
   165de:	ff 90       	pop	r15
   165e0:	ef 90       	pop	r14
   165e2:	df 90       	pop	r13
   165e4:	cf 90       	pop	r12
   165e6:	bf 90       	pop	r11
   165e8:	af 90       	pop	r10
   165ea:	9f 90       	pop	r9
   165ec:	8f 90       	pop	r8
   165ee:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157 (discriminator 1)
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
   165f0:	0f 3f       	cpi	r16, 0xFF	; 255
   165f2:	10 07       	cpc	r17, r16
   165f4:	31 f7       	brne	.-52     	; 0x165c2 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:159
                        {
                            ret = ProcessResponse(5000, aResult);
   165f6:	a5 01       	movw	r20, r10
   165f8:	68 e8       	ldi	r22, 0x88	; 136
   165fa:	73 e1       	ldi	r23, 0x13	; 19
   165fc:	c7 01       	movw	r24, r14
   165fe:	0e 94 0e b1 	call	0x1621c	; 0x1621c <DNSClient::ProcessResponse(unsigned int, IPAddress&)>
   16602:	8c 01       	movw	r16, r24
   16604:	81 e0       	ldi	r24, 0x01	; 1
   16606:	88 1a       	sub	r8, r24
   16608:	91 08       	sbc	r9, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
   1660a:	91 f7       	brne	.-28     	; 0x165f0 <DNSClient::getHostByName(char const*, IPAddress&)+0xe6>
   1660c:	da cf       	rjmp	.-76     	; 0x165c2 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
   1660e:	83 e0       	ldi	r24, 0x03	; 3
   16610:	88 2e       	mov	r8, r24
   16612:	91 2c       	mov	r9, r1
   16614:	f0 cf       	rjmp	.-32     	; 0x165f6 <DNSClient::getHostByName(char const*, IPAddress&)+0xec>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
   16616:	01 e0       	ldi	r16, 0x01	; 1
   16618:	10 e0       	ldi	r17, 0x00	; 0
   1661a:	d6 cf       	rjmp	.-84     	; 0x165c8 <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
   1661c:	0e ef       	ldi	r16, 0xFE	; 254
   1661e:	1f ef       	ldi	r17, 0xFF	; 255
   16620:	d3 cf       	rjmp	.-90     	; 0x165c8 <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>

00016622 <W5500Class::writeGAR(unsigned char*)>:
_ZN10W5500Class8writeGAREPh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:207
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
   16622:	24 e0       	ldi	r18, 0x04	; 4
   16624:	30 e0       	ldi	r19, 0x00	; 0
   16626:	ac 01       	movw	r20, r24
   16628:	64 e0       	ldi	r22, 0x04	; 4
   1662a:	81 e0       	ldi	r24, 0x01	; 1
   1662c:	90 e0       	ldi	r25, 0x00	; 0
   1662e:	0c 94 75 bb 	jmp	0x176ea	; 0x176ea <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00016632 <W5500Class::writeSUBR(unsigned char*)>:
_ZN10W5500Class9writeSUBREPh():
   16632:	24 e0       	ldi	r18, 0x04	; 4
   16634:	30 e0       	ldi	r19, 0x00	; 0
   16636:	ac 01       	movw	r20, r24
   16638:	64 e0       	ldi	r22, 0x04	; 4
   1663a:	85 e0       	ldi	r24, 0x05	; 5
   1663c:	90 e0       	ldi	r25, 0x00	; 0
   1663e:	0c 94 75 bb 	jmp	0x176ea	; 0x176ea <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00016642 <W5500Class::writeSHAR(unsigned char*)>:
_ZN10W5500Class9writeSHAREPh():
   16642:	26 e0       	ldi	r18, 0x06	; 6
   16644:	30 e0       	ldi	r19, 0x00	; 0
   16646:	ac 01       	movw	r20, r24
   16648:	64 e0       	ldi	r22, 0x04	; 4
   1664a:	89 e0       	ldi	r24, 0x09	; 9
   1664c:	90 e0       	ldi	r25, 0x00	; 0
   1664e:	0c 94 75 bb 	jmp	0x176ea	; 0x176ea <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00016652 <W5500Class::writeSIPR(unsigned char*)>:
_ZN10W5500Class9writeSIPREPh():
   16652:	24 e0       	ldi	r18, 0x04	; 4
   16654:	30 e0       	ldi	r19, 0x00	; 0
   16656:	ac 01       	movw	r20, r24
   16658:	64 e0       	ldi	r22, 0x04	; 4
   1665a:	8f e0       	ldi	r24, 0x0F	; 15
   1665c:	90 e0       	ldi	r25, 0x00	; 0
   1665e:	0c 94 75 bb 	jmp	0x176ea	; 0x176ea <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00016662 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_():
   16662:	8f 92       	push	r8
   16664:	9f 92       	push	r9
   16666:	af 92       	push	r10
   16668:	bf 92       	push	r11
   1666a:	cf 92       	push	r12
   1666c:	df 92       	push	r13
   1666e:	ef 92       	push	r14
   16670:	ff 92       	push	r15
   16672:	0f 93       	push	r16
   16674:	1f 93       	push	r17
   16676:	cf 93       	push	r28
   16678:	df 93       	push	r29
   1667a:	4c 01       	movw	r8, r24
   1667c:	5b 01       	movw	r10, r22
   1667e:	6a 01       	movw	r12, r20
   16680:	e9 01       	movw	r28, r18
   16682:	fc 01       	movw	r30, r24
   16684:	64 85       	ldd	r22, Z+12	; 0x0c
   16686:	87 e3       	ldi	r24, 0x37	; 55
   16688:	93 e1       	ldi	r25, 0x13	; 19
   1668a:	0e 94 cd bb 	call	0x1779a	; 0x1779a <W5500Class::init(unsigned char)>
_ZN10W5500Class13setMACAddressEPh():
   1668e:	c5 01       	movw	r24, r10
   16690:	0e 94 21 b3 	call	0x16642	; 0x16642 <W5500Class::writeSHAR(unsigned char*)>
_ZN10W5500Class12setIPAddressEPh():
   16694:	c6 01       	movw	r24, r12
   16696:	02 96       	adiw	r24, 0x02	; 2
   16698:	0e 94 29 b3 	call	0x16652	; 0x16652 <W5500Class::writeSIPR(unsigned char*)>
_ZN10W5500Class12setGatewayIpEPh():
   1669c:	c8 01       	movw	r24, r16
   1669e:	02 96       	adiw	r24, 0x02	; 2
   166a0:	0e 94 11 b3 	call	0x16622	; 0x16622 <W5500Class::writeGAR(unsigned char*)>
_ZN10W5500Class13setSubnetMaskEPh():
   166a4:	c7 01       	movw	r24, r14
   166a6:	02 96       	adiw	r24, 0x02	; 2
   166a8:	0e 94 19 b3 	call	0x16632	; 0x16632 <W5500Class::writeSUBR(unsigned char*)>
_ZN9IPAddressaSERKS_():
   166ac:	8a 81       	ldd	r24, Y+2	; 0x02
   166ae:	9b 81       	ldd	r25, Y+3	; 0x03
   166b0:	ac 81       	ldd	r26, Y+4	; 0x04
   166b2:	bd 81       	ldd	r27, Y+5	; 0x05
   166b4:	f4 01       	movw	r30, r8
   166b6:	82 83       	std	Z+2, r24	; 0x02
   166b8:	93 83       	std	Z+3, r25	; 0x03
   166ba:	a4 83       	std	Z+4, r26	; 0x04
   166bc:	b5 83       	std	Z+5, r27	; 0x05
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_():
   166be:	df 91       	pop	r29
   166c0:	cf 91       	pop	r28
   166c2:	1f 91       	pop	r17
   166c4:	0f 91       	pop	r16
   166c6:	ff 90       	pop	r15
   166c8:	ef 90       	pop	r14
   166ca:	df 90       	pop	r13
   166cc:	cf 90       	pop	r12
   166ce:	bf 90       	pop	r11
   166d0:	af 90       	pop	r10
   166d2:	9f 90       	pop	r9
   166d4:	8f 90       	pop	r8
   166d6:	08 95       	ret

000166d8 <EthernetClass::dnsServerIP()>:
_ZN9IPAddressC4ERKS_():
   166d8:	27 e4       	ldi	r18, 0x47	; 71
   166da:	39 e0       	ldi	r19, 0x09	; 9
   166dc:	fc 01       	movw	r30, r24
   166de:	31 83       	std	Z+1, r19	; 0x01
   166e0:	20 83       	st	Z, r18
   166e2:	fb 01       	movw	r30, r22
   166e4:	42 81       	ldd	r20, Z+2	; 0x02
   166e6:	53 81       	ldd	r21, Z+3	; 0x03
   166e8:	64 81       	ldd	r22, Z+4	; 0x04
   166ea:	75 81       	ldd	r23, Z+5	; 0x05
   166ec:	fc 01       	movw	r30, r24
   166ee:	42 83       	std	Z+2, r20	; 0x02
   166f0:	53 83       	std	Z+3, r21	; 0x03
   166f2:	64 83       	std	Z+4, r22	; 0x04
   166f4:	75 83       	std	Z+5, r23	; 0x05
_ZN13EthernetClass11dnsServerIPEv():
   166f6:	08 95       	ret

000166f8 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:
_GLOBAL__sub_I__ZN13EthernetClass6_stateE():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:209

EthernetClass Ethernet;
   166f8:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   166fa:	00 e0       	ldi	r16, 0x00	; 0
   166fc:	20 e0       	ldi	r18, 0x00	; 0
   166fe:	40 e0       	ldi	r20, 0x00	; 0
   16700:	60 e0       	ldi	r22, 0x00	; 0
   16702:	84 e1       	ldi	r24, 0x14	; 20
   16704:	93 e1       	ldi	r25, 0x13	; 19
   16706:	0e 94 4b da 	call	0x1b496	; 0x1b496 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN13EthernetClassC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:34
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
   1670a:	87 ef       	ldi	r24, 0xF7	; 247
   1670c:	92 e1       	ldi	r25, 0x12	; 18
   1670e:	0e 94 41 da 	call	0x1b482	; 0x1b482 <IPAddress::IPAddress()>
   16712:	e7 ef       	ldi	r30, 0xF7	; 247
   16714:	f2 e1       	ldi	r31, 0x12	; 18
   16716:	13 86       	std	Z+11, r1	; 0x0b
   16718:	12 86       	std	Z+10, r1	; 0x0a
   1671a:	8a e0       	ldi	r24, 0x0A	; 10
   1671c:	84 87       	std	Z+12, r24	; 0x0c
_GLOBAL__sub_I__ZN13EthernetClass6_stateE():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:209
   1671e:	0f 91       	pop	r16
   16720:	08 95       	ret

00016722 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   16722:	90 e0       	ldi	r25, 0x00	; 0
   16724:	80 e0       	ldi	r24, 0x00	; 0
   16726:	08 95       	ret

00016728 <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
   16728:	dc 01       	movw	r26, r24
   1672a:	ed 91       	ld	r30, X+
   1672c:	fc 91       	ld	r31, X
   1672e:	02 8c       	ldd	r0, Z+26	; 0x1a
   16730:	f3 8d       	ldd	r31, Z+27	; 0x1b
   16732:	e0 2d       	mov	r30, r0
   16734:	19 95       	eicall
   16736:	91 e0       	ldi	r25, 0x01	; 1
   16738:	89 27       	eor	r24, r25
   1673a:	08 95       	ret

0001673c <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
   1673c:	cf 93       	push	r28
   1673e:	df 93       	push	r29
   16740:	1f 92       	push	r1
   16742:	cd b7       	in	r28, 0x3d	; 61
   16744:	de b7       	in	r29, 0x3e	; 62
   16746:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
   16748:	dc 01       	movw	r26, r24
   1674a:	ed 91       	ld	r30, X+
   1674c:	fc 91       	ld	r31, X
   1674e:	02 80       	ldd	r0, Z+2	; 0x02
   16750:	f3 81       	ldd	r31, Z+3	; 0x03
   16752:	e0 2d       	mov	r30, r0
   16754:	41 e0       	ldi	r20, 0x01	; 1
   16756:	50 e0       	ldi	r21, 0x00	; 0
   16758:	be 01       	movw	r22, r28
   1675a:	6f 5f       	subi	r22, 0xFF	; 255
   1675c:	7f 4f       	sbci	r23, 0xFF	; 255
   1675e:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
   16760:	0f 90       	pop	r0
   16762:	df 91       	pop	r29
   16764:	cf 91       	pop	r28
   16766:	08 95       	ret

00016768 <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
   16768:	21 e0       	ldi	r18, 0x01	; 1
   1676a:	fc 01       	movw	r30, r24
   1676c:	84 85       	ldd	r24, Z+12	; 0x0c
   1676e:	88 30       	cpi	r24, 0x08	; 8
   16770:	09 f4       	brne	.+2      	; 0x16774 <EthernetClient::operator bool()+0xc>
   16772:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
   16774:	82 2f       	mov	r24, r18
   16776:	08 95       	ret

00016778 <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
   16778:	fc 01       	movw	r30, r24
   1677a:	94 85       	ldd	r25, Z+12	; 0x0c
   1677c:	fb 01       	movw	r30, r22
   1677e:	84 85       	ldd	r24, Z+12	; 0x0c
   16780:	98 13       	cpse	r25, r24
   16782:	03 c0       	rjmp	.+6      	; 0x1678a <EthernetClient::operator==(EthernetClient const&)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167 (discriminator 1)
   16784:	81 e0       	ldi	r24, 0x01	; 1
   16786:	98 30       	cpi	r25, 0x08	; 8
   16788:	09 f4       	brne	.+2      	; 0x1678c <EthernetClient::operator==(EthernetClient const&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
   1678a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
   1678c:	08 95       	ret

0001678e <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
   1678e:	cf 92       	push	r12
   16790:	df 92       	push	r13
   16792:	ef 92       	push	r14
   16794:	ff 92       	push	r15
   16796:	0f 93       	push	r16
   16798:	1f 93       	push	r17
   1679a:	cf 93       	push	r28
   1679c:	df 93       	push	r29
   1679e:	cd b7       	in	r28, 0x3d	; 61
   167a0:	de b7       	in	r29, 0x3e	; 62
   167a2:	af 97       	sbiw	r28, 0x2f	; 47
   167a4:	0f b6       	in	r0, 0x3f	; 63
   167a6:	f8 94       	cli
   167a8:	de bf       	out	0x3e, r29	; 62
   167aa:	0f be       	out	0x3f, r0	; 63
   167ac:	cd bf       	out	0x3d, r28	; 61
   167ae:	8c 01       	movw	r16, r24
   167b0:	6b 01       	movw	r12, r22
   167b2:	7a 01       	movw	r14, r20
_ZN9DNSClientC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.h:10
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
   167b4:	ce 01       	movw	r24, r28
   167b6:	01 96       	adiw	r24, 0x01	; 1
   167b8:	0e 94 41 da 	call	0x1b482	; 0x1b482 <IPAddress::IPAddress()>
   167bc:	ce 01       	movw	r24, r28
   167be:	09 96       	adiw	r24, 0x09	; 9
   167c0:	0e 94 91 b8 	call	0x17122	; 0x17122 <EthernetUDP::EthernetUDP()>
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:27
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
   167c4:	ce 01       	movw	r24, r28
   167c6:	8a 96       	adiw	r24, 0x2a	; 42
   167c8:	0e 94 41 da 	call	0x1b482	; 0x1b482 <IPAddress::IPAddress()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:29

  dns.begin(Ethernet.dnsServerIP());
   167cc:	67 ef       	ldi	r22, 0xF7	; 247
   167ce:	72 e1       	ldi	r23, 0x12	; 18
   167d0:	ce 01       	movw	r24, r28
   167d2:	84 96       	adiw	r24, 0x24	; 36
   167d4:	0e 94 6c b3 	call	0x166d8	; 0x166d8 <EthernetClass::dnsServerIP()>
   167d8:	be 01       	movw	r22, r28
   167da:	6c 5d       	subi	r22, 0xDC	; 220
   167dc:	7f 4f       	sbci	r23, 0xFF	; 255
   167de:	ce 01       	movw	r24, r28
   167e0:	01 96       	adiw	r24, 0x01	; 1
   167e2:	0e 94 0f b0 	call	0x1601e	; 0x1601e <DNSClient::begin(IPAddress const&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  ret = dns.getHostByName(host, remote_addr);
   167e6:	ae 01       	movw	r20, r28
   167e8:	46 5d       	subi	r20, 0xD6	; 214
   167ea:	5f 4f       	sbci	r21, 0xFF	; 255
   167ec:	b6 01       	movw	r22, r12
   167ee:	ce 01       	movw	r24, r28
   167f0:	01 96       	adiw	r24, 0x01	; 1
   167f2:	0e 94 85 b2 	call	0x1650a	; 0x1650a <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
   167f6:	81 30       	cpi	r24, 0x01	; 1
   167f8:	91 05       	cpc	r25, r1
   167fa:	c1 f4       	brne	.+48     	; 0x1682c <EthernetClient::connect(char const*, unsigned int)+0x9e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
   167fc:	d8 01       	movw	r26, r16
   167fe:	ed 91       	ld	r30, X+
   16800:	fc 91       	ld	r31, X
   16802:	06 84       	ldd	r0, Z+14	; 0x0e
   16804:	f7 85       	ldd	r31, Z+15	; 0x0f
   16806:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   16808:	87 e4       	ldi	r24, 0x47	; 71
   1680a:	99 e0       	ldi	r25, 0x09	; 9
   1680c:	9d a3       	std	Y+37, r25	; 0x25
   1680e:	8c a3       	std	Y+36, r24	; 0x24
   16810:	8c a5       	ldd	r24, Y+44	; 0x2c
   16812:	9d a5       	ldd	r25, Y+45	; 0x2d
   16814:	ae a5       	ldd	r26, Y+46	; 0x2e
   16816:	bf a5       	ldd	r27, Y+47	; 0x2f
   16818:	8e a3       	std	Y+38, r24	; 0x26
   1681a:	9f a3       	std	Y+39, r25	; 0x27
   1681c:	a8 a7       	std	Y+40, r26	; 0x28
   1681e:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
   16820:	a7 01       	movw	r20, r14
   16822:	be 01       	movw	r22, r28
   16824:	6c 5d       	subi	r22, 0xDC	; 220
   16826:	7f 4f       	sbci	r23, 0xFF	; 255
   16828:	c8 01       	movw	r24, r16
   1682a:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
   1682c:	af 96       	adiw	r28, 0x2f	; 47
   1682e:	0f b6       	in	r0, 0x3f	; 63
   16830:	f8 94       	cli
   16832:	de bf       	out	0x3e, r29	; 62
   16834:	0f be       	out	0x3f, r0	; 63
   16836:	cd bf       	out	0x3d, r28	; 61
   16838:	df 91       	pop	r29
   1683a:	cf 91       	pop	r28
   1683c:	1f 91       	pop	r17
   1683e:	0f 91       	pop	r16
   16840:	ff 90       	pop	r15
   16842:	ef 90       	pop	r14
   16844:	df 90       	pop	r13
   16846:	cf 90       	pop	r12
   16848:	08 95       	ret

0001684a <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
   1684a:	0f 93       	push	r16
   1684c:	1f 93       	push	r17
   1684e:	cf 93       	push	r28
   16850:	df 93       	push	r29
   16852:	8c 01       	movw	r16, r24
   16854:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
   16856:	fc 01       	movw	r30, r24
   16858:	84 85       	ldd	r24, Z+12	; 0x0c
   1685a:	88 30       	cpi	r24, 0x08	; 8
   1685c:	69 f4       	brne	.+26     	; 0x16878 <EthernetClient::write(unsigned char const*, unsigned int)+0x2e>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   1685e:	81 e0       	ldi	r24, 0x01	; 1
   16860:	90 e0       	ldi	r25, 0x00	; 0
   16862:	f8 01       	movw	r30, r16
   16864:	93 83       	std	Z+3, r25	; 0x03
   16866:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
   16868:	d0 e0       	ldi	r29, 0x00	; 0
   1686a:	c0 e0       	ldi	r28, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
   1686c:	ce 01       	movw	r24, r28
   1686e:	df 91       	pop	r29
   16870:	cf 91       	pop	r28
   16872:	1f 91       	pop	r17
   16874:	0f 91       	pop	r16
   16876:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
   16878:	0e 94 f8 b9 	call	0x173f0	; 0x173f0 <send(unsigned char, unsigned char const*, unsigned int)>
   1687c:	89 2b       	or	r24, r25
   1687e:	79 f3       	breq	.-34     	; 0x1685e <EthernetClient::write(unsigned char const*, unsigned int)+0x14>
   16880:	f5 cf       	rjmp	.-22     	; 0x1686c <EthernetClient::write(unsigned char const*, unsigned int)+0x22>

00016882 <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
   16882:	fc 01       	movw	r30, r24
   16884:	64 85       	ldd	r22, Z+12	; 0x0c
   16886:	68 30       	cpi	r22, 0x08	; 8
   16888:	21 f0       	breq	.+8      	; 0x16892 <EthernetClient::available()+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
   1688a:	87 e3       	ldi	r24, 0x37	; 55
   1688c:	93 e1       	ldi	r25, 0x13	; 19
   1688e:	0c 94 50 bc 	jmp	0x178a0	; 0x178a0 <W5500Class::getRXReceivedSize(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
   16892:	90 e0       	ldi	r25, 0x00	; 0
   16894:	80 e0       	ldi	r24, 0x00	; 0
   16896:	08 95       	ret

00016898 <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95

int EthernetClient::read() {
   16898:	cf 93       	push	r28
   1689a:	df 93       	push	r29
   1689c:	1f 92       	push	r1
   1689e:	cd b7       	in	r28, 0x3d	; 61
   168a0:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
   168a2:	41 e0       	ldi	r20, 0x01	; 1
   168a4:	50 e0       	ldi	r21, 0x00	; 0
   168a6:	be 01       	movw	r22, r28
   168a8:	6f 5f       	subi	r22, 0xFF	; 255
   168aa:	7f 4f       	sbci	r23, 0xFF	; 255
   168ac:	fc 01       	movw	r30, r24
   168ae:	84 85       	ldd	r24, Z+12	; 0x0c
   168b0:	0e 94 49 ba 	call	0x17492	; 0x17492 <recv(unsigned char, unsigned char*, int)>
   168b4:	18 16       	cp	r1, r24
   168b6:	19 06       	cpc	r1, r25
   168b8:	34 f4       	brge	.+12     	; 0x168c6 <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
   168ba:	89 81       	ldd	r24, Y+1	; 0x01
   168bc:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
   168be:	0f 90       	pop	r0
   168c0:	df 91       	pop	r29
   168c2:	cf 91       	pop	r28
   168c4:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
   168c6:	8f ef       	ldi	r24, 0xFF	; 255
   168c8:	9f ef       	ldi	r25, 0xFF	; 255
   168ca:	f9 cf       	rjmp	.-14     	; 0x168be <EthernetClient::read()+0x26>

000168cc <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
   168cc:	fc 01       	movw	r30, r24
   168ce:	84 85       	ldd	r24, Z+12	; 0x0c
   168d0:	0c 94 49 ba 	jmp	0x17492	; 0x17492 <recv(unsigned char, unsigned char*, int)>

000168d4 <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113
}

int EthernetClient::peek() {
   168d4:	0f 93       	push	r16
   168d6:	1f 93       	push	r17
   168d8:	cf 93       	push	r28
   168da:	df 93       	push	r29
   168dc:	1f 92       	push	r1
   168de:	cd b7       	in	r28, 0x3d	; 61
   168e0:	de b7       	in	r29, 0x3e	; 62
   168e2:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
   168e4:	dc 01       	movw	r26, r24
   168e6:	ed 91       	ld	r30, X+
   168e8:	fc 91       	ld	r31, X
   168ea:	00 84       	ldd	r0, Z+8	; 0x08
   168ec:	f1 85       	ldd	r31, Z+9	; 0x09
   168ee:	e0 2d       	mov	r30, r0
   168f0:	19 95       	eicall
   168f2:	89 2b       	or	r24, r25
   168f4:	79 f0       	breq	.+30     	; 0x16914 <EthernetClient::peek()+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:118
    return -1;
  ::peek(_sock, &b);
   168f6:	be 01       	movw	r22, r28
   168f8:	6f 5f       	subi	r22, 0xFF	; 255
   168fa:	7f 4f       	sbci	r23, 0xFF	; 255
   168fc:	f8 01       	movw	r30, r16
   168fe:	84 85       	ldd	r24, Z+12	; 0x0c
   16900:	0e 94 8f ba 	call	0x1751e	; 0x1751e <peek(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
  return b;
   16904:	89 81       	ldd	r24, Y+1	; 0x01
   16906:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
   16908:	0f 90       	pop	r0
   1690a:	df 91       	pop	r29
   1690c:	cf 91       	pop	r28
   1690e:	1f 91       	pop	r17
   16910:	0f 91       	pop	r16
   16912:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
   16914:	8f ef       	ldi	r24, 0xFF	; 255
   16916:	9f ef       	ldi	r25, 0xFF	; 255
   16918:	f7 cf       	rjmp	.-18     	; 0x16908 <EthernetClient::peek()+0x34>

0001691a <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:123
  ::peek(_sock, &b);
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
   1691a:	fc 01       	movw	r30, r24
   1691c:	84 85       	ldd	r24, Z+12	; 0x0c
   1691e:	0c 94 9d ba 	jmp	0x1753a	; 0x1753a <flush(unsigned char)>

00016922 <EthernetClient::EthernetClient()>:
_ZN14EthernetClientC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:17
#include "EthernetServer.h"
#include "Dns.h"

uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
   16922:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
   16924:	13 82       	std	Z+3, r1	; 0x03
   16926:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   16928:	88 ee       	ldi	r24, 0xE8	; 232
   1692a:	93 e0       	ldi	r25, 0x03	; 3
   1692c:	a0 e0       	ldi	r26, 0x00	; 0
   1692e:	b0 e0       	ldi	r27, 0x00	; 0
   16930:	84 83       	std	Z+4, r24	; 0x04
   16932:	95 83       	std	Z+5, r25	; 0x05
   16934:	a6 83       	std	Z+6, r26	; 0x06
   16936:	b7 83       	std	Z+7, r27	; 0x07
_ZN14EthernetClientC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:17
   16938:	8c eb       	ldi	r24, 0xBC	; 188
   1693a:	98 e0       	ldi	r25, 0x08	; 8
   1693c:	91 83       	std	Z+1, r25	; 0x01
   1693e:	80 83       	st	Z, r24
   16940:	88 e0       	ldi	r24, 0x08	; 8
   16942:	84 87       	std	Z+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:18
}
   16944:	08 95       	ret

00016946 <EthernetClient::EthernetClient(unsigned char)>:
_ZN14EthernetClientC2Eh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
   16946:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   16948:	13 82       	std	Z+3, r1	; 0x03
   1694a:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1694c:	88 ee       	ldi	r24, 0xE8	; 232
   1694e:	93 e0       	ldi	r25, 0x03	; 3
   16950:	a0 e0       	ldi	r26, 0x00	; 0
   16952:	b0 e0       	ldi	r27, 0x00	; 0
   16954:	84 83       	std	Z+4, r24	; 0x04
   16956:	95 83       	std	Z+5, r25	; 0x05
   16958:	a6 83       	std	Z+6, r26	; 0x06
   1695a:	b7 83       	std	Z+7, r27	; 0x07
_ZN14EthernetClientC2Eh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   1695c:	8c eb       	ldi	r24, 0xBC	; 188
   1695e:	98 e0       	ldi	r25, 0x08	; 8
   16960:	91 83       	std	Z+1, r25	; 0x01
   16962:	80 83       	st	Z, r24
   16964:	64 87       	std	Z+12, r22	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:21
}
   16966:	08 95       	ret

00016968 <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   16968:	fc 01       	movw	r30, r24
   1696a:	64 85       	ldd	r22, Z+12	; 0x0c
   1696c:	68 30       	cpi	r22, 0x08	; 8
   1696e:	41 f0       	breq	.+16     	; 0x16980 <EthernetClient::status()+0x18>
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
   16970:	62 95       	swap	r22
   16972:	66 0f       	add	r22, r22
   16974:	60 7e       	andi	r22, 0xE0	; 224
   16976:	68 5f       	subi	r22, 0xF8	; 248
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
   16978:	83 e0       	ldi	r24, 0x03	; 3
   1697a:	90 e0       	ldi	r25, 0x00	; 0
   1697c:	0c 94 a9 bb 	jmp	0x17752	; 0x17752 <W5500Class::read(unsigned int, unsigned char)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   16980:	80 e0       	ldi	r24, 0x00	; 0
   16982:	08 95       	ret

00016984 <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
   16984:	cf 92       	push	r12
   16986:	df 92       	push	r13
   16988:	ef 92       	push	r14
   1698a:	ff 92       	push	r15
   1698c:	0f 93       	push	r16
   1698e:	1f 93       	push	r17
   16990:	cf 93       	push	r28
   16992:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
   16994:	fc 01       	movw	r30, r24
   16996:	e4 84       	ldd	r14, Z+12	; 0x0c
   16998:	f8 e0       	ldi	r31, 0x08	; 8
   1699a:	ef 16       	cp	r14, r31
   1699c:	59 f0       	breq	.+22     	; 0x169b4 <EthernetClient::connect(IPAddress, unsigned int)+0x30>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
   1699e:	90 e0       	ldi	r25, 0x00	; 0
   169a0:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
   169a2:	df 91       	pop	r29
   169a4:	cf 91       	pop	r28
   169a6:	1f 91       	pop	r17
   169a8:	0f 91       	pop	r16
   169aa:	ff 90       	pop	r15
   169ac:	ef 90       	pop	r14
   169ae:	df 90       	pop	r13
   169b0:	cf 90       	pop	r12
   169b2:	08 95       	ret
   169b4:	6a 01       	movw	r12, r20
   169b6:	8b 01       	movw	r16, r22
   169b8:	ec 01       	movw	r28, r24
   169ba:	f1 2c       	mov	r15, r1
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
   169bc:	6e 2d       	mov	r22, r14
   169be:	83 e0       	ldi	r24, 0x03	; 3
   169c0:	90 e0       	ldi	r25, 0x00	; 0
   169c2:	0e 94 a9 bb 	call	0x17752	; 0x17752 <W5500Class::read(unsigned int, unsigned char)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   169c6:	81 11       	cpse	r24, r1
   169c8:	23 c0       	rjmp	.+70     	; 0x16a10 <EthernetClient::connect(IPAddress, unsigned int)+0x8c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
   169ca:	fc 86       	std	Y+12, r15	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   169cc:	8c 85       	ldd	r24, Y+12	; 0x0c
   169ce:	88 30       	cpi	r24, 0x08	; 8
   169d0:	31 f3       	breq	.-52     	; 0x1699e <EthernetClient::connect(IPAddress, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
   169d2:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <EthernetClient::_srcport>
   169d6:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <EthernetClient::_srcport+0x1>
   169da:	2f 5f       	subi	r18, 0xFF	; 255
   169dc:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
   169de:	11 f1       	breq	.+68     	; 0x16a24 <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
   169e0:	30 93 7f 02 	sts	0x027F, r19	; 0x80027f <EthernetClient::_srcport+0x1>
   169e4:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <EthernetClient::_srcport>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:55
  socket(_sock, SnMR::TCP, _srcport, 0);
   169e8:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <EthernetClient::_srcport>
   169ec:	50 91 7f 02 	lds	r21, 0x027F	; 0x80027f <EthernetClient::_srcport+0x1>
   169f0:	20 e0       	ldi	r18, 0x00	; 0
   169f2:	61 e0       	ldi	r22, 0x01	; 1
   169f4:	0e 94 71 b9 	call	0x172e2	; 0x172e2 <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   169f8:	b8 01       	movw	r22, r16
   169fa:	6e 5f       	subi	r22, 0xFE	; 254
   169fc:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57

  if (!::connect(_sock, rawIPAddress(ip), port)) {
   169fe:	a6 01       	movw	r20, r12
   16a00:	8c 85       	ldd	r24, Y+12	; 0x0c
   16a02:	0e 94 bb b9 	call	0x17376	; 0x17376 <connect(unsigned char, unsigned char*, unsigned int)>
   16a06:	81 11       	cpse	r24, r1
   16a08:	10 c0       	rjmp	.+32     	; 0x16a2a <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
    _sock = MAX_SOCK_NUM;
   16a0a:	88 e0       	ldi	r24, 0x08	; 8
   16a0c:	8c 87       	std	Y+12, r24	; 0x0c
   16a0e:	c7 cf       	rjmp	.-114    	; 0x1699e <EthernetClient::connect(IPAddress, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   16a10:	8b 7f       	andi	r24, 0xFB	; 251
   16a12:	88 31       	cpi	r24, 0x18	; 24
   16a14:	d1 f2       	breq	.-76     	; 0x169ca <EthernetClient::connect(IPAddress, unsigned int)+0x46>
   16a16:	f3 94       	inc	r15
   16a18:	20 e2       	ldi	r18, 0x20	; 32
   16a1a:	e2 0e       	add	r14, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   16a1c:	88 e0       	ldi	r24, 0x08	; 8
   16a1e:	f8 12       	cpse	r15, r24
   16a20:	cd cf       	rjmp	.-102    	; 0x169bc <EthernetClient::connect(IPAddress, unsigned int)+0x38>
   16a22:	d4 cf       	rjmp	.-88     	; 0x169cc <EthernetClient::connect(IPAddress, unsigned int)+0x48>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
   16a24:	20 e0       	ldi	r18, 0x00	; 0
   16a26:	34 e0       	ldi	r19, 0x04	; 4
   16a28:	db cf       	rjmp	.-74     	; 0x169e0 <EthernetClient::connect(IPAddress, unsigned int)+0x5c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
   16a2a:	ce 01       	movw	r24, r28
   16a2c:	0e 94 b4 b4 	call	0x16968	; 0x16968 <EthernetClient::status()>
   16a30:	87 31       	cpi	r24, 0x17	; 23
   16a32:	51 f0       	breq	.+20     	; 0x16a48 <EthernetClient::connect(IPAddress, unsigned int)+0xc4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
   16a34:	61 e0       	ldi	r22, 0x01	; 1
   16a36:	70 e0       	ldi	r23, 0x00	; 0
   16a38:	80 e0       	ldi	r24, 0x00	; 0
   16a3a:	90 e0       	ldi	r25, 0x00	; 0
   16a3c:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
   16a40:	ce 01       	movw	r24, r28
   16a42:	0e 94 b4 b4 	call	0x16968	; 0x16968 <EthernetClient::status()>
   16a46:	df cf       	rjmp	.-66     	; 0x16a06 <EthernetClient::connect(IPAddress, unsigned int)+0x82>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
   16a48:	81 e0       	ldi	r24, 0x01	; 1
   16a4a:	90 e0       	ldi	r25, 0x00	; 0
   16a4c:	aa cf       	rjmp	.-172    	; 0x169a2 <EthernetClient::connect(IPAddress, unsigned int)+0x1e>

00016a4e <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
   16a4e:	cf 92       	push	r12
   16a50:	df 92       	push	r13
   16a52:	ef 92       	push	r14
   16a54:	ff 92       	push	r15
   16a56:	cf 93       	push	r28
   16a58:	df 93       	push	r29
   16a5a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
   16a5c:	8c 85       	ldd	r24, Y+12	; 0x0c
   16a5e:	88 30       	cpi	r24, 0x08	; 8
   16a60:	79 f1       	breq	.+94     	; 0x16ac0 <EthernetClient::stop()+0x72>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:131
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
   16a62:	0e 94 f1 b9 	call	0x173e2	; 0x173e2 <disconnect(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
  unsigned long start = millis();
   16a66:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   16a6a:	6b 01       	movw	r12, r22
   16a6c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   16a6e:	ce 01       	movw	r24, r28
   16a70:	0e 94 b4 b4 	call	0x16968	; 0x16968 <EthernetClient::status()>
   16a74:	88 23       	and	r24, r24
   16a76:	91 f0       	breq	.+36     	; 0x16a9c <EthernetClient::stop()+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135 (discriminator 1)
   16a78:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   16a7c:	6c 19       	sub	r22, r12
   16a7e:	7d 09       	sbc	r23, r13
   16a80:	8e 09       	sbc	r24, r14
   16a82:	9f 09       	sbc	r25, r15
   16a84:	68 3e       	cpi	r22, 0xE8	; 232
   16a86:	73 40       	sbci	r23, 0x03	; 3
   16a88:	81 05       	cpc	r24, r1
   16a8a:	91 05       	cpc	r25, r1
   16a8c:	38 f4       	brcc	.+14     	; 0x16a9c <EthernetClient::stop()+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
   16a8e:	61 e0       	ldi	r22, 0x01	; 1
   16a90:	70 e0       	ldi	r23, 0x00	; 0
   16a92:	80 e0       	ldi	r24, 0x00	; 0
   16a94:	90 e0       	ldi	r25, 0x00	; 0
   16a96:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135
  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   16a9a:	e9 cf       	rjmp	.-46     	; 0x16a6e <EthernetClient::stop()+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139
    delay(1);

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
   16a9c:	ce 01       	movw	r24, r28
   16a9e:	0e 94 b4 b4 	call	0x16968	; 0x16968 <EthernetClient::status()>
   16aa2:	88 23       	and	r24, r24
   16aa4:	19 f0       	breq	.+6      	; 0x16aac <EthernetClient::stop()+0x5e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
   16aa6:	8c 85       	ldd	r24, Y+12	; 0x0c
   16aa8:	0e 94 63 b9 	call	0x172c6	; 0x172c6 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:142

  EthernetClass::_server_port[_sock] = 0;
   16aac:	ec 85       	ldd	r30, Y+12	; 0x0c
   16aae:	f0 e0       	ldi	r31, 0x00	; 0
   16ab0:	ee 0f       	add	r30, r30
   16ab2:	ff 1f       	adc	r31, r31
   16ab4:	ec 5f       	subi	r30, 0xFC	; 252
   16ab6:	fc 4e       	sbci	r31, 0xEC	; 236
   16ab8:	11 82       	std	Z+1, r1	; 0x01
   16aba:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143
  _sock = MAX_SOCK_NUM;
   16abc:	88 e0       	ldi	r24, 0x08	; 8
   16abe:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
   16ac0:	df 91       	pop	r29
   16ac2:	cf 91       	pop	r28
   16ac4:	ff 90       	pop	r15
   16ac6:	ef 90       	pop	r14
   16ac8:	df 90       	pop	r13
   16aca:	cf 90       	pop	r12
   16acc:	08 95       	ret

00016ace <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

uint8_t EthernetClient::connected() {
   16ace:	cf 93       	push	r28
   16ad0:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
   16ad2:	fc 01       	movw	r30, r24
   16ad4:	24 85       	ldd	r18, Z+12	; 0x0c
   16ad6:	28 30       	cpi	r18, 0x08	; 8
   16ad8:	d9 f0       	breq	.+54     	; 0x16b10 <EthernetClient::connected()+0x42>
   16ada:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
   16adc:	0e 94 b4 b4 	call	0x16968	; 0x16968 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   16ae0:	84 31       	cpi	r24, 0x14	; 20
   16ae2:	89 f0       	breq	.+34     	; 0x16b06 <EthernetClient::connected()+0x38>
   16ae4:	88 23       	and	r24, r24
   16ae6:	79 f0       	breq	.+30     	; 0x16b06 <EthernetClient::connected()+0x38>
   16ae8:	88 31       	cpi	r24, 0x18	; 24
   16aea:	69 f0       	breq	.+26     	; 0x16b06 <EthernetClient::connected()+0x38>
   16aec:	21 e0       	ldi	r18, 0x01	; 1
   16aee:	8c 31       	cpi	r24, 0x1C	; 28
   16af0:	59 f4       	brne	.+22     	; 0x16b08 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   16af2:	e8 81       	ld	r30, Y
   16af4:	f9 81       	ldd	r31, Y+1	; 0x01
   16af6:	00 84       	ldd	r0, Z+8	; 0x08
   16af8:	f1 85       	ldd	r31, Z+9	; 0x09
   16afa:	e0 2d       	mov	r30, r0
   16afc:	ce 01       	movw	r24, r28
   16afe:	19 95       	eicall
   16b00:	21 e0       	ldi	r18, 0x01	; 1
   16b02:	89 2b       	or	r24, r25
   16b04:	09 f4       	brne	.+2      	; 0x16b08 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   16b06:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   16b08:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
   16b0a:	df 91       	pop	r29
   16b0c:	cf 91       	pop	r28
   16b0e:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
   16b10:	80 e0       	ldi	r24, 0x00	; 0
   16b12:	fb cf       	rjmp	.-10     	; 0x16b0a <EthernetClient::connected()+0x3c>

00016b14 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
_GLOBAL__sub_I__ZN14EthernetClient8_srcportE():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
   16b14:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   16b16:	00 e0       	ldi	r16, 0x00	; 0
   16b18:	20 e0       	ldi	r18, 0x00	; 0
   16b1a:	40 e0       	ldi	r20, 0x00	; 0
   16b1c:	60 e0       	ldi	r22, 0x00	; 0
   16b1e:	8a e1       	ldi	r24, 0x1A	; 26
   16b20:	93 e1       	ldi	r25, 0x13	; 19
   16b22:	0e 94 4b da 	call	0x1b496	; 0x1b496 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN14EthernetClient8_srcportE():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
   16b26:	0f 91       	pop	r16
   16b28:	08 95       	ret

00016b2a <Print::flush()>:
_ZN5Print5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   16b2a:	08 95       	ret

00016b2c <EthernetServer::write(unsigned char)>:
_ZN14EthernetServer5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:71

  return EthernetClient(MAX_SOCK_NUM);
}

size_t EthernetServer::write(uint8_t b) 
{
   16b2c:	cf 93       	push	r28
   16b2e:	df 93       	push	r29
   16b30:	1f 92       	push	r1
   16b32:	cd b7       	in	r28, 0x3d	; 61
   16b34:	de b7       	in	r29, 0x3e	; 62
   16b36:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:72
  return write(&b, 1);
   16b38:	dc 01       	movw	r26, r24
   16b3a:	ed 91       	ld	r30, X+
   16b3c:	fc 91       	ld	r31, X
   16b3e:	02 80       	ldd	r0, Z+2	; 0x02
   16b40:	f3 81       	ldd	r31, Z+3	; 0x03
   16b42:	e0 2d       	mov	r30, r0
   16b44:	41 e0       	ldi	r20, 0x01	; 1
   16b46:	50 e0       	ldi	r21, 0x00	; 0
   16b48:	be 01       	movw	r22, r28
   16b4a:	6f 5f       	subi	r22, 0xFF	; 255
   16b4c:	7f 4f       	sbci	r23, 0xFF	; 255
   16b4e:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:73
}
   16b50:	0f 90       	pop	r0
   16b52:	df 91       	pop	r29
   16b54:	cf 91       	pop	r28
   16b56:	08 95       	ret

00016b58 <EthernetServer::begin()>:
_ZN14EthernetServer5beginEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:17
{
  _port = port;
}

void EthernetServer::begin()
{
   16b58:	ef 92       	push	r14
   16b5a:	ff 92       	push	r15
   16b5c:	0f 93       	push	r16
   16b5e:	1f 93       	push	r17
   16b60:	cf 93       	push	r28
   16b62:	df 93       	push	r29
   16b64:	cd b7       	in	r28, 0x3d	; 61
   16b66:	de b7       	in	r29, 0x3e	; 62
   16b68:	2d 97       	sbiw	r28, 0x0d	; 13
   16b6a:	0f b6       	in	r0, 0x3f	; 63
   16b6c:	f8 94       	cli
   16b6e:	de bf       	out	0x3e, r29	; 62
   16b70:	0f be       	out	0x3f, r0	; 63
   16b72:	cd bf       	out	0x3d, r28	; 61
   16b74:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:18
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   16b76:	10 e0       	ldi	r17, 0x00	; 0
   16b78:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:19
    EthernetClient client(sock);
   16b7a:	60 2f       	mov	r22, r16
   16b7c:	ce 01       	movw	r24, r28
   16b7e:	01 96       	adiw	r24, 0x01	; 1
   16b80:	0e 94 a3 b4 	call	0x16946	; 0x16946 <EthernetClient::EthernetClient(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:20
    if (client.status() == SnSR::CLOSED) {
   16b84:	ce 01       	movw	r24, r28
   16b86:	01 96       	adiw	r24, 0x01	; 1
   16b88:	0e 94 b4 b4 	call	0x16968	; 0x16968 <EthernetClient::status()>
   16b8c:	81 11       	cpse	r24, r1
   16b8e:	22 c0       	rjmp	.+68     	; 0x16bd4 <EthernetServer::begin()+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:21
      socket(sock, SnMR::TCP, _port, 0);
   16b90:	f7 01       	movw	r30, r14
   16b92:	44 81       	ldd	r20, Z+4	; 0x04
   16b94:	55 81       	ldd	r21, Z+5	; 0x05
   16b96:	20 e0       	ldi	r18, 0x00	; 0
   16b98:	61 e0       	ldi	r22, 0x01	; 1
   16b9a:	80 2f       	mov	r24, r16
   16b9c:	0e 94 71 b9 	call	0x172e2	; 0x172e2 <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:22
      listen(sock);
   16ba0:	80 2f       	mov	r24, r16
   16ba2:	0e 94 a7 b9 	call	0x1734e	; 0x1734e <listen(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:23
      EthernetClass::_server_port[sock] = _port;
   16ba6:	f7 01       	movw	r30, r14
   16ba8:	84 81       	ldd	r24, Z+4	; 0x04
   16baa:	95 81       	ldd	r25, Z+5	; 0x05
   16bac:	00 0f       	add	r16, r16
   16bae:	11 1f       	adc	r17, r17
   16bb0:	f8 01       	movw	r30, r16
   16bb2:	ec 5f       	subi	r30, 0xFC	; 252
   16bb4:	fc 4e       	sbci	r31, 0xEC	; 236
   16bb6:	91 83       	std	Z+1, r25	; 0x01
   16bb8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:27
      break;
    }
  }  
}
   16bba:	2d 96       	adiw	r28, 0x0d	; 13
   16bbc:	0f b6       	in	r0, 0x3f	; 63
   16bbe:	f8 94       	cli
   16bc0:	de bf       	out	0x3e, r29	; 62
   16bc2:	0f be       	out	0x3f, r0	; 63
   16bc4:	cd bf       	out	0x3d, r28	; 61
   16bc6:	df 91       	pop	r29
   16bc8:	cf 91       	pop	r28
   16bca:	1f 91       	pop	r17
   16bcc:	0f 91       	pop	r16
   16bce:	ff 90       	pop	r15
   16bd0:	ef 90       	pop	r14
   16bd2:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:18
  _port = port;
}

void EthernetServer::begin()
{
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   16bd4:	0f 5f       	subi	r16, 0xFF	; 255
   16bd6:	1f 4f       	sbci	r17, 0xFF	; 255
   16bd8:	08 30       	cpi	r16, 0x08	; 8
   16bda:	11 05       	cpc	r17, r1
   16bdc:	71 f6       	brne	.-100    	; 0x16b7a <EthernetServer::begin()+0x22>
   16bde:	ed cf       	rjmp	.-38     	; 0x16bba <EthernetServer::begin()+0x62>

00016be0 <EthernetServer::EthernetServer(unsigned int)>:
_ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:11

#include "Ethernet2.h"
#include "EthernetClient.h"
#include "EthernetServer.h"

EthernetServer::EthernetServer(uint16_t port)
   16be0:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   16be2:	13 82       	std	Z+3, r1	; 0x03
   16be4:	12 82       	std	Z+2, r1	; 0x02
_ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:11
   16be6:	8e ed       	ldi	r24, 0xDE	; 222
   16be8:	98 e0       	ldi	r25, 0x08	; 8
   16bea:	91 83       	std	Z+1, r25	; 0x01
   16bec:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:13
{
  _port = port;
   16bee:	75 83       	std	Z+5, r23	; 0x05
   16bf0:	64 83       	std	Z+4, r22	; 0x04
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:14
}
   16bf2:	08 95       	ret

00016bf4 <EthernetServer::accept()>:
_ZN14EthernetServer6acceptEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:30
    }
  }  
}

void EthernetServer::accept()
{
   16bf4:	af 92       	push	r10
   16bf6:	bf 92       	push	r11
   16bf8:	cf 92       	push	r12
   16bfa:	df 92       	push	r13
   16bfc:	ef 92       	push	r14
   16bfe:	ff 92       	push	r15
   16c00:	1f 93       	push	r17
   16c02:	cf 93       	push	r28
   16c04:	df 93       	push	r29
   16c06:	cd b7       	in	r28, 0x3d	; 61
   16c08:	de b7       	in	r29, 0x3e	; 62
   16c0a:	2d 97       	sbiw	r28, 0x0d	; 13
   16c0c:	0f b6       	in	r0, 0x3f	; 63
   16c0e:	f8 94       	cli
   16c10:	de bf       	out	0x3e, r29	; 62
   16c12:	0f be       	out	0x3f, r0	; 63
   16c14:	cd bf       	out	0x3d, r28	; 61
   16c16:	7c 01       	movw	r14, r24
   16c18:	94 e0       	ldi	r25, 0x04	; 4
   16c1a:	a9 2e       	mov	r10, r25
   16c1c:	93 e1       	ldi	r25, 0x13	; 19
   16c1e:	b9 2e       	mov	r11, r25
   16c20:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:31
  int listening = 0;
   16c22:	d1 2c       	mov	r13, r1
   16c24:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:34

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
   16c26:	61 2f       	mov	r22, r17
   16c28:	ce 01       	movw	r24, r28
   16c2a:	01 96       	adiw	r24, 0x01	; 1
   16c2c:	0e 94 a3 b4 	call	0x16946	; 0x16946 <EthernetClient::EthernetClient(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:36

    if (EthernetClass::_server_port[sock] == _port) {
   16c30:	d5 01       	movw	r26, r10
   16c32:	2d 91       	ld	r18, X+
   16c34:	3d 91       	ld	r19, X+
   16c36:	5d 01       	movw	r10, r26
   16c38:	f7 01       	movw	r30, r14
   16c3a:	84 81       	ldd	r24, Z+4	; 0x04
   16c3c:	95 81       	ldd	r25, Z+5	; 0x05
   16c3e:	28 17       	cp	r18, r24
   16c40:	39 07       	cpc	r19, r25
   16c42:	b1 f4       	brne	.+44     	; 0x16c70 <EthernetServer::accept()+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:37
      if (client.status() == SnSR::LISTEN) {
   16c44:	ce 01       	movw	r24, r28
   16c46:	01 96       	adiw	r24, 0x01	; 1
   16c48:	0e 94 b4 b4 	call	0x16968	; 0x16968 <EthernetClient::status()>
   16c4c:	84 31       	cpi	r24, 0x14	; 20
   16c4e:	69 f1       	breq	.+90     	; 0x16caa <EthernetServer::accept()+0xb6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:40
        listening = 1;
      } 
      else if (client.status() == SnSR::CLOSE_WAIT && !client.available()) {
   16c50:	ce 01       	movw	r24, r28
   16c52:	01 96       	adiw	r24, 0x01	; 1
   16c54:	0e 94 b4 b4 	call	0x16968	; 0x16968 <EthernetClient::status()>
   16c58:	8c 31       	cpi	r24, 0x1C	; 28
   16c5a:	51 f4       	brne	.+20     	; 0x16c70 <EthernetServer::accept()+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:40 (discriminator 1)
   16c5c:	ce 01       	movw	r24, r28
   16c5e:	01 96       	adiw	r24, 0x01	; 1
   16c60:	0e 94 41 b4 	call	0x16882	; 0x16882 <EthernetClient::available()>
   16c64:	89 2b       	or	r24, r25
   16c66:	21 f4       	brne	.+8      	; 0x16c70 <EthernetServer::accept()+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:41
        client.stop();
   16c68:	ce 01       	movw	r24, r28
   16c6a:	01 96       	adiw	r24, 0x01	; 1
   16c6c:	0e 94 27 b5 	call	0x16a4e	; 0x16a4e <EthernetClient::stop()>
   16c70:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:33 (discriminator 1)

void EthernetServer::accept()
{
  int listening = 0;

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   16c72:	18 30       	cpi	r17, 0x08	; 8
   16c74:	c1 f6       	brne	.-80     	; 0x16c26 <EthernetServer::accept()+0x32>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:46
        client.stop();
      }
    } 
  }

  if (!listening) {
   16c76:	cd 28       	or	r12, r13
   16c78:	41 f4       	brne	.+16     	; 0x16c8a <EthernetServer::accept()+0x96>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:47
    begin();
   16c7a:	d7 01       	movw	r26, r14
   16c7c:	ed 91       	ld	r30, X+
   16c7e:	fc 91       	ld	r31, X
   16c80:	00 84       	ldd	r0, Z+8	; 0x08
   16c82:	f1 85       	ldd	r31, Z+9	; 0x09
   16c84:	e0 2d       	mov	r30, r0
   16c86:	c7 01       	movw	r24, r14
   16c88:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:49
  }
}
   16c8a:	2d 96       	adiw	r28, 0x0d	; 13
   16c8c:	0f b6       	in	r0, 0x3f	; 63
   16c8e:	f8 94       	cli
   16c90:	de bf       	out	0x3e, r29	; 62
   16c92:	0f be       	out	0x3f, r0	; 63
   16c94:	cd bf       	out	0x3d, r28	; 61
   16c96:	df 91       	pop	r29
   16c98:	cf 91       	pop	r28
   16c9a:	1f 91       	pop	r17
   16c9c:	ff 90       	pop	r15
   16c9e:	ef 90       	pop	r14
   16ca0:	df 90       	pop	r13
   16ca2:	cf 90       	pop	r12
   16ca4:	bf 90       	pop	r11
   16ca6:	af 90       	pop	r10
   16ca8:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:38
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port) {
      if (client.status() == SnSR::LISTEN) {
        listening = 1;
   16caa:	cc 24       	eor	r12, r12
   16cac:	c3 94       	inc	r12
   16cae:	d1 2c       	mov	r13, r1
   16cb0:	df cf       	rjmp	.-66     	; 0x16c70 <EthernetServer::accept()+0x7c>

00016cb2 <EthernetServer::write(unsigned char const*, unsigned int)>:
_ZN14EthernetServer5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:76
{
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
   16cb2:	7f 92       	push	r7
   16cb4:	8f 92       	push	r8
   16cb6:	9f 92       	push	r9
   16cb8:	af 92       	push	r10
   16cba:	bf 92       	push	r11
   16cbc:	cf 92       	push	r12
   16cbe:	df 92       	push	r13
   16cc0:	ef 92       	push	r14
   16cc2:	ff 92       	push	r15
   16cc4:	0f 93       	push	r16
   16cc6:	1f 93       	push	r17
   16cc8:	cf 93       	push	r28
   16cca:	df 93       	push	r29
   16ccc:	cd b7       	in	r28, 0x3d	; 61
   16cce:	de b7       	in	r29, 0x3e	; 62
   16cd0:	2d 97       	sbiw	r28, 0x0d	; 13
   16cd2:	0f b6       	in	r0, 0x3f	; 63
   16cd4:	f8 94       	cli
   16cd6:	de bf       	out	0x3e, r29	; 62
   16cd8:	0f be       	out	0x3f, r0	; 63
   16cda:	cd bf       	out	0x3d, r28	; 61
   16cdc:	6c 01       	movw	r12, r24
   16cde:	5b 01       	movw	r10, r22
   16ce0:	4a 01       	movw	r8, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:79
  size_t n = 0;
  
  accept();
   16ce2:	0e 94 fa b5 	call	0x16bf4	; 0x16bf4 <EthernetServer::accept()>
   16ce6:	84 e0       	ldi	r24, 0x04	; 4
   16ce8:	e8 2e       	mov	r14, r24
   16cea:	83 e1       	ldi	r24, 0x13	; 19
   16cec:	f8 2e       	mov	r15, r24
   16cee:	71 2c       	mov	r7, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:77
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
  size_t n = 0;
   16cf0:	10 e0       	ldi	r17, 0x00	; 0
   16cf2:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:82
  
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
   16cf4:	67 2d       	mov	r22, r7
   16cf6:	ce 01       	movw	r24, r28
   16cf8:	01 96       	adiw	r24, 0x01	; 1
   16cfa:	0e 94 a3 b4 	call	0x16946	; 0x16946 <EthernetClient::EthernetClient(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:84

    if (EthernetClass::_server_port[sock] == _port &&
   16cfe:	f7 01       	movw	r30, r14
   16d00:	21 91       	ld	r18, Z+
   16d02:	31 91       	ld	r19, Z+
   16d04:	7f 01       	movw	r14, r30
   16d06:	f6 01       	movw	r30, r12
   16d08:	84 81       	ldd	r24, Z+4	; 0x04
   16d0a:	95 81       	ldd	r25, Z+5	; 0x05
   16d0c:	28 17       	cp	r18, r24
   16d0e:	39 07       	cpc	r19, r25
   16d10:	71 f4       	brne	.+28     	; 0x16d2e <EthernetServer::write(unsigned char const*, unsigned int)+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:85 (discriminator 1)
      client.status() == SnSR::ESTABLISHED) {
   16d12:	ce 01       	movw	r24, r28
   16d14:	01 96       	adiw	r24, 0x01	; 1
   16d16:	0e 94 b4 b4 	call	0x16968	; 0x16968 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:84 (discriminator 1)
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port &&
   16d1a:	87 31       	cpi	r24, 0x17	; 23
   16d1c:	41 f4       	brne	.+16     	; 0x16d2e <EthernetServer::write(unsigned char const*, unsigned int)+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:86
      client.status() == SnSR::ESTABLISHED) {
      n += client.write(buffer, size);
   16d1e:	a4 01       	movw	r20, r8
   16d20:	b5 01       	movw	r22, r10
   16d22:	ce 01       	movw	r24, r28
   16d24:	01 96       	adiw	r24, 0x01	; 1
   16d26:	0e 94 25 b4 	call	0x1684a	; 0x1684a <EthernetClient::write(unsigned char const*, unsigned int)>
   16d2a:	08 0f       	add	r16, r24
   16d2c:	19 1f       	adc	r17, r25
   16d2e:	73 94       	inc	r7
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:81 (discriminator 2)
{
  size_t n = 0;
  
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   16d30:	f8 e0       	ldi	r31, 0x08	; 8
   16d32:	7f 12       	cpse	r7, r31
   16d34:	df cf       	rjmp	.-66     	; 0x16cf4 <EthernetServer::write(unsigned char const*, unsigned int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
   16d36:	c8 01       	movw	r24, r16
   16d38:	2d 96       	adiw	r28, 0x0d	; 13
   16d3a:	0f b6       	in	r0, 0x3f	; 63
   16d3c:	f8 94       	cli
   16d3e:	de bf       	out	0x3e, r29	; 62
   16d40:	0f be       	out	0x3f, r0	; 63
   16d42:	cd bf       	out	0x3d, r28	; 61
   16d44:	df 91       	pop	r29
   16d46:	cf 91       	pop	r28
   16d48:	1f 91       	pop	r17
   16d4a:	0f 91       	pop	r16
   16d4c:	ff 90       	pop	r15
   16d4e:	ef 90       	pop	r14
   16d50:	df 90       	pop	r13
   16d52:	cf 90       	pop	r12
   16d54:	bf 90       	pop	r11
   16d56:	af 90       	pop	r10
   16d58:	9f 90       	pop	r9
   16d5a:	8f 90       	pop	r8
   16d5c:	7f 90       	pop	r7
   16d5e:	08 95       	ret

00016d60 <EthernetServer::available()>:
_ZN14EthernetServer9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:52
    begin();
  }
}

EthernetClient EthernetServer::available()
{
   16d60:	af 92       	push	r10
   16d62:	bf 92       	push	r11
   16d64:	cf 92       	push	r12
   16d66:	df 92       	push	r13
   16d68:	ff 92       	push	r15
   16d6a:	0f 93       	push	r16
   16d6c:	1f 93       	push	r17
   16d6e:	cf 93       	push	r28
   16d70:	df 93       	push	r29
   16d72:	cd b7       	in	r28, 0x3d	; 61
   16d74:	de b7       	in	r29, 0x3e	; 62
   16d76:	2d 97       	sbiw	r28, 0x0d	; 13
   16d78:	0f b6       	in	r0, 0x3f	; 63
   16d7a:	f8 94       	cli
   16d7c:	de bf       	out	0x3e, r29	; 62
   16d7e:	0f be       	out	0x3f, r0	; 63
   16d80:	cd bf       	out	0x3d, r28	; 61
   16d82:	8c 01       	movw	r16, r24
   16d84:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:53
  accept();
   16d86:	cb 01       	movw	r24, r22
   16d88:	0e 94 fa b5 	call	0x16bf4	; 0x16bf4 <EthernetServer::accept()>
   16d8c:	84 e0       	ldi	r24, 0x04	; 4
   16d8e:	c8 2e       	mov	r12, r24
   16d90:	83 e1       	ldi	r24, 0x13	; 19
   16d92:	d8 2e       	mov	r13, r24
   16d94:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:56

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
   16d96:	6f 2d       	mov	r22, r15
   16d98:	ce 01       	movw	r24, r28
   16d9a:	01 96       	adiw	r24, 0x01	; 1
   16d9c:	0e 94 a3 b4 	call	0x16946	; 0x16946 <EthernetClient::EthernetClient(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:57
    if (EthernetClass::_server_port[sock] == _port &&
   16da0:	f6 01       	movw	r30, r12
   16da2:	21 91       	ld	r18, Z+
   16da4:	31 91       	ld	r19, Z+
   16da6:	6f 01       	movw	r12, r30
   16da8:	f5 01       	movw	r30, r10
   16daa:	84 81       	ldd	r24, Z+4	; 0x04
   16dac:	95 81       	ldd	r25, Z+5	; 0x05
   16dae:	28 17       	cp	r18, r24
   16db0:	39 07       	cpc	r19, r25
   16db2:	f1 f5       	brne	.+124    	; 0x16e30 <EthernetServer::available()+0xd0>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:58 (discriminator 1)
        (client.status() == SnSR::ESTABLISHED ||
   16db4:	ce 01       	movw	r24, r28
   16db6:	01 96       	adiw	r24, 0x01	; 1
   16db8:	0e 94 b4 b4 	call	0x16968	; 0x16968 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:57 (discriminator 1)
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
   16dbc:	87 31       	cpi	r24, 0x17	; 23
   16dbe:	91 f5       	brne	.+100    	; 0x16e24 <EthernetServer::available()+0xc4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:60
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
      if (client.available()) {
   16dc0:	ce 01       	movw	r24, r28
   16dc2:	01 96       	adiw	r24, 0x01	; 1
   16dc4:	0e 94 41 b4 	call	0x16882	; 0x16882 <EthernetClient::available()>
   16dc8:	89 2b       	or	r24, r25
   16dca:	91 f1       	breq	.+100    	; 0x16e30 <EthernetServer::available()+0xd0>
_ZN5PrintC4EOS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:37
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
   16dcc:	8b 81       	ldd	r24, Y+3	; 0x03
   16dce:	9c 81       	ldd	r25, Y+4	; 0x04
   16dd0:	f8 01       	movw	r30, r16
   16dd2:	93 83       	std	Z+3, r25	; 0x03
   16dd4:	82 83       	std	Z+2, r24	; 0x02
_ZN6StreamC4EOS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:49
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
   16dd6:	8d 81       	ldd	r24, Y+5	; 0x05
   16dd8:	9e 81       	ldd	r25, Y+6	; 0x06
   16dda:	af 81       	ldd	r26, Y+7	; 0x07
   16ddc:	b8 85       	ldd	r27, Y+8	; 0x08
   16dde:	84 83       	std	Z+4, r24	; 0x04
   16de0:	95 83       	std	Z+5, r25	; 0x05
   16de2:	a6 83       	std	Z+6, r26	; 0x06
   16de4:	b7 83       	std	Z+7, r27	; 0x07
   16de6:	89 85       	ldd	r24, Y+9	; 0x09
   16de8:	9a 85       	ldd	r25, Y+10	; 0x0a
   16dea:	ab 85       	ldd	r26, Y+11	; 0x0b
   16dec:	bc 85       	ldd	r27, Y+12	; 0x0c
   16dee:	80 87       	std	Z+8, r24	; 0x08
   16df0:	91 87       	std	Z+9, r25	; 0x09
   16df2:	a2 87       	std	Z+10, r26	; 0x0a
   16df4:	b3 87       	std	Z+11, r27	; 0x0b
_ZN14EthernetClientC4EOS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:8
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
   16df6:	8c eb       	ldi	r24, 0xBC	; 188
   16df8:	98 e0       	ldi	r25, 0x08	; 8
   16dfa:	91 83       	std	Z+1, r25	; 0x01
   16dfc:	80 83       	st	Z, r24
   16dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
   16e00:	84 87       	std	Z+12, r24	; 0x0c
_ZN14EthernetServer9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:68
      }
    }
  }

  return EthernetClient(MAX_SOCK_NUM);
}
   16e02:	c8 01       	movw	r24, r16
   16e04:	2d 96       	adiw	r28, 0x0d	; 13
   16e06:	0f b6       	in	r0, 0x3f	; 63
   16e08:	f8 94       	cli
   16e0a:	de bf       	out	0x3e, r29	; 62
   16e0c:	0f be       	out	0x3f, r0	; 63
   16e0e:	cd bf       	out	0x3d, r28	; 61
   16e10:	df 91       	pop	r29
   16e12:	cf 91       	pop	r28
   16e14:	1f 91       	pop	r17
   16e16:	0f 91       	pop	r16
   16e18:	ff 90       	pop	r15
   16e1a:	df 90       	pop	r13
   16e1c:	cf 90       	pop	r12
   16e1e:	bf 90       	pop	r11
   16e20:	af 90       	pop	r10
   16e22:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:59

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
   16e24:	ce 01       	movw	r24, r28
   16e26:	01 96       	adiw	r24, 0x01	; 1
   16e28:	0e 94 b4 b4 	call	0x16968	; 0x16968 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:58
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
   16e2c:	8c 31       	cpi	r24, 0x1C	; 28
   16e2e:	41 f2       	breq	.-112    	; 0x16dc0 <EthernetServer::available()+0x60>
   16e30:	f3 94       	inc	r15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:55

EthernetClient EthernetServer::available()
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   16e32:	f8 e0       	ldi	r31, 0x08	; 8
   16e34:	ff 12       	cpse	r15, r31
   16e36:	af cf       	rjmp	.-162    	; 0x16d96 <EthernetServer::available()+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:67
        return client;
      }
    }
  }

  return EthernetClient(MAX_SOCK_NUM);
   16e38:	68 e0       	ldi	r22, 0x08	; 8
   16e3a:	c8 01       	movw	r24, r16
   16e3c:	0e 94 a3 b4 	call	0x16946	; 0x16946 <EthernetClient::EthernetClient(unsigned char)>
   16e40:	e0 cf       	rjmp	.-64     	; 0x16e02 <EthernetServer::available()+0xa2>

00016e42 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
_GLOBAL__sub_I__ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
   16e42:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   16e44:	00 e0       	ldi	r16, 0x00	; 0
   16e46:	20 e0       	ldi	r18, 0x00	; 0
   16e48:	40 e0       	ldi	r20, 0x00	; 0
   16e4a:	60 e0       	ldi	r22, 0x00	; 0
   16e4c:	80 e2       	ldi	r24, 0x20	; 32
   16e4e:	93 e1       	ldi	r25, 0x13	; 19
   16e50:	0e 94 4b da 	call	0x1b496	; 0x1b496 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
   16e54:	0f 91       	pop	r16
   16e56:	08 95       	ret

00016e58 <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
   16e58:	80 e0       	ldi	r24, 0x00	; 0
   16e5a:	08 95       	ret

00016e5c <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   16e5c:	dc 01       	movw	r26, r24
   16e5e:	ed 91       	ld	r30, X+
   16e60:	fc 91       	ld	r31, X
   16e62:	04 8c       	ldd	r0, Z+28	; 0x1c
   16e64:	f5 8d       	ldd	r31, Z+29	; 0x1d
   16e66:	e0 2d       	mov	r30, r0
   16e68:	19 94       	eijmp

00016e6a <EthernetUDP::remoteIP()>:
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   16e6a:	27 e4       	ldi	r18, 0x47	; 71
   16e6c:	39 e0       	ldi	r19, 0x09	; 9
   16e6e:	fc 01       	movw	r30, r24
   16e70:	31 83       	std	Z+1, r19	; 0x01
   16e72:	20 83       	st	Z, r18
   16e74:	fb 01       	movw	r30, r22
   16e76:	41 89       	ldd	r20, Z+17	; 0x11
   16e78:	52 89       	ldd	r21, Z+18	; 0x12
   16e7a:	63 89       	ldd	r22, Z+19	; 0x13
   16e7c:	74 89       	ldd	r23, Z+20	; 0x14
   16e7e:	fc 01       	movw	r30, r24
   16e80:	42 83       	std	Z+2, r20	; 0x02
   16e82:	53 83       	std	Z+3, r21	; 0x03
   16e84:	64 83       	std	Z+4, r22	; 0x04
   16e86:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
   16e88:	08 95       	ret

00016e8a <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
   16e8a:	fc 01       	movw	r30, r24
   16e8c:	85 89       	ldd	r24, Z+21	; 0x15
   16e8e:	96 89       	ldd	r25, Z+22	; 0x16
   16e90:	08 95       	ret

00016e92 <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
   16e92:	fc 01       	movw	r30, r24
   16e94:	81 8d       	ldd	r24, Z+25	; 0x19
   16e96:	92 8d       	ldd	r25, Z+26	; 0x1a
   16e98:	08 95       	ret

00016e9a <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
   16e9a:	cf 93       	push	r28
   16e9c:	df 93       	push	r29
   16e9e:	1f 92       	push	r1
   16ea0:	cd b7       	in	r28, 0x3d	; 61
   16ea2:	de b7       	in	r29, 0x3e	; 62
   16ea4:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
   16ea6:	dc 01       	movw	r26, r24
   16ea8:	ed 91       	ld	r30, X+
   16eaa:	fc 91       	ld	r31, X
   16eac:	02 80       	ldd	r0, Z+2	; 0x02
   16eae:	f3 81       	ldd	r31, Z+3	; 0x03
   16eb0:	e0 2d       	mov	r30, r0
   16eb2:	41 e0       	ldi	r20, 0x01	; 1
   16eb4:	50 e0       	ldi	r21, 0x00	; 0
   16eb6:	be 01       	movw	r22, r28
   16eb8:	6f 5f       	subi	r22, 0xFF	; 255
   16eba:	7f 4f       	sbci	r23, 0xFF	; 255
   16ebc:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
   16ebe:	0f 90       	pop	r0
   16ec0:	df 91       	pop	r29
   16ec2:	cf 91       	pop	r28
   16ec4:	08 95       	ret

00016ec6 <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
   16ec6:	cf 93       	push	r28
   16ec8:	df 93       	push	r29
   16eca:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   16ecc:	89 8d       	ldd	r24, Y+25	; 0x19
   16ece:	9a 8d       	ldd	r25, Y+26	; 0x1a
   16ed0:	89 2b       	or	r24, r25
   16ed2:	41 f0       	breq	.+16     	; 0x16ee4 <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
   16ed4:	e8 81       	ld	r30, Y
   16ed6:	f9 81       	ldd	r31, Y+1	; 0x01
   16ed8:	02 84       	ldd	r0, Z+10	; 0x0a
   16eda:	f3 85       	ldd	r31, Z+11	; 0x0b
   16edc:	e0 2d       	mov	r30, r0
   16ede:	ce 01       	movw	r24, r28
   16ee0:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   16ee2:	f4 cf       	rjmp	.-24     	; 0x16ecc <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  {
    read();
  }
}
   16ee4:	df 91       	pop	r29
   16ee6:	cf 91       	pop	r28
   16ee8:	08 95       	ret

00016eea <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   16eea:	cf 93       	push	r28
   16eec:	df 93       	push	r29
   16eee:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   16ef0:	8c 85       	ldd	r24, Y+12	; 0x0c
   16ef2:	88 30       	cpi	r24, 0x08	; 8
   16ef4:	61 f0       	breq	.+24     	; 0x16f0e <EthernetUDP::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   16ef6:	0e 94 63 b9 	call	0x172c6	; 0x172c6 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:79

  EthernetClass::_server_port[_sock] = 0;
   16efa:	ec 85       	ldd	r30, Y+12	; 0x0c
   16efc:	f0 e0       	ldi	r31, 0x00	; 0
   16efe:	ee 0f       	add	r30, r30
   16f00:	ff 1f       	adc	r31, r31
   16f02:	ec 5f       	subi	r30, 0xFC	; 252
   16f04:	fc 4e       	sbci	r31, 0xEC	; 236
   16f06:	11 82       	std	Z+1, r1	; 0x01
   16f08:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80
  _sock = MAX_SOCK_NUM;
   16f0a:	88 e0       	ldi	r24, 0x08	; 8
   16f0c:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   16f0e:	df 91       	pop	r29
   16f10:	cf 91       	pop	r28
   16f12:	08 95       	ret

00016f14 <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
   16f14:	fc 01       	movw	r30, r24
   16f16:	10 8e       	std	Z+24, r1	; 0x18
   16f18:	17 8a       	std	Z+23, r1	; 0x17
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   16f1a:	6e 5f       	subi	r22, 0xFE	; 254
   16f1c:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   16f1e:	84 85       	ldd	r24, Z+12	; 0x0c
   16f20:	0c 94 cc ba 	jmp	0x17598	; 0x17598 <startUDP(unsigned char, unsigned char*, unsigned int)>

00016f24 <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
   16f24:	fc 01       	movw	r30, r24
   16f26:	84 85       	ldd	r24, Z+12	; 0x0c
   16f28:	0c 94 f1 ba 	jmp	0x175e2	; 0x175e2 <sendUDP(unsigned char)>

00016f2c <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
   16f2c:	cf 93       	push	r28
   16f2e:	df 93       	push	r29
   16f30:	ec 01       	movw	r28, r24
   16f32:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
   16f34:	8f 89       	ldd	r24, Y+23	; 0x17
   16f36:	98 8d       	ldd	r25, Y+24	; 0x18
   16f38:	ab 01       	movw	r20, r22
   16f3a:	bc 01       	movw	r22, r24
   16f3c:	8c 85       	ldd	r24, Y+12	; 0x0c
   16f3e:	0e 94 9e ba 	call	0x1753c	; 0x1753c <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
   16f42:	2f 89       	ldd	r18, Y+23	; 0x17
   16f44:	38 8d       	ldd	r19, Y+24	; 0x18
   16f46:	28 0f       	add	r18, r24
   16f48:	39 1f       	adc	r19, r25
   16f4a:	38 8f       	std	Y+24, r19	; 0x18
   16f4c:	2f 8b       	std	Y+23, r18	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
   16f4e:	df 91       	pop	r29
   16f50:	cf 91       	pop	r28
   16f52:	08 95       	ret

00016f54 <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   16f54:	0f 93       	push	r16
   16f56:	1f 93       	push	r17
   16f58:	cf 93       	push	r28
   16f5a:	df 93       	push	r29
   16f5c:	1f 92       	push	r1
   16f5e:	cd b7       	in	r28, 0x3d	; 61
   16f60:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   16f62:	fc 01       	movw	r30, r24
   16f64:	21 8d       	ldd	r18, Z+25	; 0x19
   16f66:	32 8d       	ldd	r19, Z+26	; 0x1a
   16f68:	23 2b       	or	r18, r19
   16f6a:	41 f4       	brne	.+16     	; 0x16f7c <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   16f6c:	8f ef       	ldi	r24, 0xFF	; 255
   16f6e:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   16f70:	0f 90       	pop	r0
   16f72:	df 91       	pop	r29
   16f74:	cf 91       	pop	r28
   16f76:	1f 91       	pop	r17
   16f78:	0f 91       	pop	r16
   16f7a:	08 95       	ret
   16f7c:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155 (discriminator 1)

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   16f7e:	41 e0       	ldi	r20, 0x01	; 1
   16f80:	50 e0       	ldi	r21, 0x00	; 0
   16f82:	be 01       	movw	r22, r28
   16f84:	6f 5f       	subi	r22, 0xFF	; 255
   16f86:	7f 4f       	sbci	r23, 0xFF	; 255
   16f88:	fc 01       	movw	r30, r24
   16f8a:	84 85       	ldd	r24, Z+12	; 0x0c
   16f8c:	0e 94 49 ba 	call	0x17492	; 0x17492 <recv(unsigned char, unsigned char*, int)>
   16f90:	18 16       	cp	r1, r24
   16f92:	19 06       	cpc	r1, r25
   16f94:	5c f7       	brge	.-42     	; 0x16f6c <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   16f96:	f8 01       	movw	r30, r16
   16f98:	81 8d       	ldd	r24, Z+25	; 0x19
   16f9a:	92 8d       	ldd	r25, Z+26	; 0x1a
   16f9c:	01 97       	sbiw	r24, 0x01	; 1
   16f9e:	92 8f       	std	Z+26, r25	; 0x1a
   16fa0:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   16fa2:	89 81       	ldd	r24, Y+1	; 0x01
   16fa4:	90 e0       	ldi	r25, 0x00	; 0
   16fa6:	e4 cf       	rjmp	.-56     	; 0x16f70 <EthernetUDP::read()+0x1c>

00016fa8 <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   16fa8:	cf 93       	push	r28
   16faa:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   16fac:	fc 01       	movw	r30, r24
   16fae:	21 8d       	ldd	r18, Z+25	; 0x19
   16fb0:	32 8d       	ldd	r19, Z+26	; 0x1a
   16fb2:	21 15       	cp	r18, r1
   16fb4:	31 05       	cpc	r19, r1
   16fb6:	29 f4       	brne	.+10     	; 0x16fc2 <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   16fb8:	8f ef       	ldi	r24, 0xFF	; 255
   16fba:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   16fbc:	df 91       	pop	r29
   16fbe:	cf 91       	pop	r28
   16fc0:	08 95       	ret
   16fc2:	ec 01       	movw	r28, r24
   16fc4:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   16fc6:	42 17       	cp	r20, r18
   16fc8:	53 07       	cpc	r21, r19
   16fca:	08 f0       	brcs	.+2      	; 0x16fce <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   16fcc:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   16fce:	0e 94 49 ba 	call	0x17492	; 0x17492 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   16fd2:	18 16       	cp	r1, r24
   16fd4:	19 06       	cpc	r1, r25
   16fd6:	84 f7       	brge	.-32     	; 0x16fb8 <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   16fd8:	29 8d       	ldd	r18, Y+25	; 0x19
   16fda:	3a 8d       	ldd	r19, Y+26	; 0x1a
   16fdc:	28 1b       	sub	r18, r24
   16fde:	39 0b       	sbc	r19, r25
   16fe0:	3a 8f       	std	Y+26, r19	; 0x1a
   16fe2:	29 8f       	std	Y+25, r18	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:189
      return got;
   16fe4:	eb cf       	rjmp	.-42     	; 0x16fbc <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

00016fe6 <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
   16fe6:	cf 93       	push	r28
   16fe8:	df 93       	push	r29
   16fea:	1f 92       	push	r1
   16fec:	cd b7       	in	r28, 0x3d	; 61
   16fee:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   16ff0:	fc 01       	movw	r30, r24
   16ff2:	21 8d       	ldd	r18, Z+25	; 0x19
   16ff4:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
   16ff6:	8f ef       	ldi	r24, 0xFF	; 255
   16ff8:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   16ffa:	23 2b       	or	r18, r19
   16ffc:	41 f0       	breq	.+16     	; 0x1700e <EthernetUDP::peek()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:207
    return -1;
  ::peek(_sock, &b);
   16ffe:	be 01       	movw	r22, r28
   17000:	6f 5f       	subi	r22, 0xFF	; 255
   17002:	7f 4f       	sbci	r23, 0xFF	; 255
   17004:	84 85       	ldd	r24, Z+12	; 0x0c
   17006:	0e 94 8f ba 	call	0x1751e	; 0x1751e <peek(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
  return b;
   1700a:	89 81       	ldd	r24, Y+1	; 0x01
   1700c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
   1700e:	0f 90       	pop	r0
   17010:	df 91       	pop	r29
   17012:	cf 91       	pop	r28
   17014:	08 95       	ret

00017016 <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   17016:	0f 93       	push	r16
   17018:	1f 93       	push	r17
   1701a:	cf 93       	push	r28
   1701c:	df 93       	push	r29
   1701e:	00 d0       	rcall	.+0      	; 0x17020 <EthernetUDP::parsePacket()+0xa>
   17020:	00 d0       	rcall	.+0      	; 0x17022 <EthernetUDP::parsePacket()+0xc>
   17022:	1f 92       	push	r1
   17024:	1f 92       	push	r1
   17026:	cd b7       	in	r28, 0x3d	; 61
   17028:	de b7       	in	r29, 0x3e	; 62
   1702a:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   1702c:	dc 01       	movw	r26, r24
   1702e:	ed 91       	ld	r30, X+
   17030:	fc 91       	ld	r31, X
   17032:	06 80       	ldd	r0, Z+6	; 0x06
   17034:	f7 81       	ldd	r31, Z+7	; 0x07
   17036:	e0 2d       	mov	r30, r0
   17038:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   1703a:	f8 01       	movw	r30, r16
   1703c:	64 85       	ldd	r22, Z+12	; 0x0c
   1703e:	87 e3       	ldi	r24, 0x37	; 55
   17040:	93 e1       	ldi	r25, 0x13	; 19
   17042:	0e 94 50 bc 	call	0x178a0	; 0x178a0 <W5500Class::getRXReceivedSize(unsigned char)>
   17046:	89 2b       	or	r24, r25
   17048:	a1 f1       	breq	.+104    	; 0x170b2 <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   1704a:	48 e0       	ldi	r20, 0x08	; 8
   1704c:	50 e0       	ldi	r21, 0x00	; 0
   1704e:	be 01       	movw	r22, r28
   17050:	6f 5f       	subi	r22, 0xFF	; 255
   17052:	7f 4f       	sbci	r23, 0xFF	; 255
   17054:	d8 01       	movw	r26, r16
   17056:	1c 96       	adiw	r26, 0x0c	; 12
   17058:	8c 91       	ld	r24, X
   1705a:	0e 94 49 ba 	call	0x17492	; 0x17492 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   1705e:	18 16       	cp	r1, r24
   17060:	19 06       	cpc	r1, r25
   17062:	e4 f4       	brge	.+56     	; 0x1709c <EthernetUDP::parsePacket()+0x86>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:136
    {
      _remoteIP = tmpBuf;
   17064:	be 01       	movw	r22, r28
   17066:	6f 5f       	subi	r22, 0xFF	; 255
   17068:	7f 4f       	sbci	r23, 0xFF	; 255
   1706a:	c8 01       	movw	r24, r16
   1706c:	0f 96       	adiw	r24, 0x0f	; 15
   1706e:	0e 94 63 da 	call	0x1b4c6	; 0x1b4c6 <IPAddress::operator=(unsigned char const*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
      _remotePort = tmpBuf[4];
   17072:	8d 81       	ldd	r24, Y+5	; 0x05
   17074:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   17076:	98 2f       	mov	r25, r24
   17078:	88 27       	eor	r24, r24
   1707a:	2e 81       	ldd	r18, Y+6	; 0x06
   1707c:	82 0f       	add	r24, r18
   1707e:	91 1d       	adc	r25, r1
   17080:	f8 01       	movw	r30, r16
   17082:	96 8b       	std	Z+22, r25	; 0x16
   17084:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   17086:	8f 81       	ldd	r24, Y+7	; 0x07
   17088:	28 2f       	mov	r18, r24
   1708a:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   1708c:	32 2f       	mov	r19, r18
   1708e:	22 27       	eor	r18, r18
   17090:	88 85       	ldd	r24, Y+8	; 0x08
   17092:	82 0f       	add	r24, r18
   17094:	93 2f       	mov	r25, r19
   17096:	91 1d       	adc	r25, r1
   17098:	92 8f       	std	Z+26, r25	; 0x1a
   1709a:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   1709c:	28 96       	adiw	r28, 0x08	; 8
   1709e:	0f b6       	in	r0, 0x3f	; 63
   170a0:	f8 94       	cli
   170a2:	de bf       	out	0x3e, r29	; 62
   170a4:	0f be       	out	0x3f, r0	; 63
   170a6:	cd bf       	out	0x3d, r28	; 61
   170a8:	df 91       	pop	r29
   170aa:	cf 91       	pop	r28
   170ac:	1f 91       	pop	r17
   170ae:	0f 91       	pop	r16
   170b0:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   170b2:	90 e0       	ldi	r25, 0x00	; 0
   170b4:	80 e0       	ldi	r24, 0x00	; 0
   170b6:	f2 cf       	rjmp	.-28     	; 0x1709c <EthernetUDP::parsePacket()+0x86>

000170b8 <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   170b8:	ef 92       	push	r14
   170ba:	ff 92       	push	r15
   170bc:	0f 93       	push	r16
   170be:	1f 93       	push	r17
   170c0:	cf 93       	push	r28
   170c2:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   170c4:	fc 01       	movw	r30, r24
   170c6:	e4 84       	ldd	r14, Z+12	; 0x0c
   170c8:	f8 e0       	ldi	r31, 0x08	; 8
   170ca:	ef 16       	cp	r14, r31
   170cc:	41 f0       	breq	.+16     	; 0x170de <EthernetUDP::begin(unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   170ce:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   170d0:	df 91       	pop	r29
   170d2:	cf 91       	pop	r28
   170d4:	1f 91       	pop	r17
   170d6:	0f 91       	pop	r16
   170d8:	ff 90       	pop	r15
   170da:	ef 90       	pop	r14
   170dc:	08 95       	ret
   170de:	8b 01       	movw	r16, r22
   170e0:	ec 01       	movw	r28, r24
   170e2:	f1 2c       	mov	r15, r1
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
   170e4:	6e 2d       	mov	r22, r14
   170e6:	83 e0       	ldi	r24, 0x03	; 3
   170e8:	90 e0       	ldi	r25, 0x00	; 0
   170ea:	0e 94 a9 bb 	call	0x17752	; 0x17752 <W5500Class::read(unsigned int, unsigned char)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   170ee:	81 11       	cpse	r24, r1
   170f0:	0f c0       	rjmp	.+30     	; 0x17110 <EthernetUDP::begin(unsigned int)+0x58>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   170f2:	fc 86       	std	Y+12, r15	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   170f4:	8c 85       	ldd	r24, Y+12	; 0x0c
   170f6:	88 30       	cpi	r24, 0x08	; 8
   170f8:	51 f3       	breq	.-44     	; 0x170ce <EthernetUDP::begin(unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   170fa:	1e 87       	std	Y+14, r17	; 0x0e
   170fc:	0d 87       	std	Y+13, r16	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   170fe:	1a 8e       	std	Y+26, r1	; 0x1a
   17100:	19 8e       	std	Y+25, r1	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:60
  socket(_sock, SnMR::UDP, _port, 0);
   17102:	20 e0       	ldi	r18, 0x00	; 0
   17104:	a8 01       	movw	r20, r16
   17106:	62 e0       	ldi	r22, 0x02	; 2
   17108:	0e 94 71 b9 	call	0x172e2	; 0x172e2 <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62

  return 1;
   1710c:	81 e0       	ldi	r24, 0x01	; 1
   1710e:	e0 cf       	rjmp	.-64     	; 0x170d0 <EthernetUDP::begin(unsigned int)+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   17110:	88 31       	cpi	r24, 0x18	; 24
   17112:	79 f3       	breq	.-34     	; 0x170f2 <EthernetUDP::begin(unsigned int)+0x3a>
   17114:	f3 94       	inc	r15
   17116:	20 e2       	ldi	r18, 0x20	; 32
   17118:	e2 0e       	add	r14, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   1711a:	88 e0       	ldi	r24, 0x08	; 8
   1711c:	f8 12       	cpse	r15, r24
   1711e:	e2 cf       	rjmp	.-60     	; 0x170e4 <EthernetUDP::begin(unsigned int)+0x2c>
   17120:	e9 cf       	rjmp	.-46     	; 0x170f4 <EthernetUDP::begin(unsigned int)+0x3c>

00017122 <EthernetUDP::EthernetUDP()>:
_ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   17122:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   17124:	13 82       	std	Z+3, r1	; 0x03
   17126:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   17128:	88 ee       	ldi	r24, 0xE8	; 232
   1712a:	93 e0       	ldi	r25, 0x03	; 3
   1712c:	a0 e0       	ldi	r26, 0x00	; 0
   1712e:	b0 e0       	ldi	r27, 0x00	; 0
   17130:	84 83       	std	Z+4, r24	; 0x04
   17132:	95 83       	std	Z+5, r25	; 0x05
   17134:	a6 83       	std	Z+6, r26	; 0x06
   17136:	b7 83       	std	Z+7, r27	; 0x07
_ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
   17138:	8c ee       	ldi	r24, 0xEC	; 236
   1713a:	98 e0       	ldi	r25, 0x08	; 8
   1713c:	91 83       	std	Z+1, r25	; 0x01
   1713e:	80 83       	st	Z, r24
   17140:	88 e0       	ldi	r24, 0x08	; 8
   17142:	84 87       	std	Z+12, r24	; 0x0c
   17144:	cf 01       	movw	r24, r30
   17146:	0f 96       	adiw	r24, 0x0f	; 15
   17148:	0c 94 41 da 	jmp	0x1b482	; 0x1b482 <IPAddress::IPAddress()>

0001714c <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
   1714c:	cf 92       	push	r12
   1714e:	df 92       	push	r13
   17150:	ef 92       	push	r14
   17152:	ff 92       	push	r15
   17154:	0f 93       	push	r16
   17156:	1f 93       	push	r17
   17158:	cf 93       	push	r28
   1715a:	df 93       	push	r29
   1715c:	cd b7       	in	r28, 0x3d	; 61
   1715e:	de b7       	in	r29, 0x3e	; 62
   17160:	af 97       	sbiw	r28, 0x2f	; 47
   17162:	0f b6       	in	r0, 0x3f	; 63
   17164:	f8 94       	cli
   17166:	de bf       	out	0x3e, r29	; 62
   17168:	0f be       	out	0x3f, r0	; 63
   1716a:	cd bf       	out	0x3d, r28	; 61
   1716c:	8c 01       	movw	r16, r24
   1716e:	6b 01       	movw	r12, r22
   17170:	7a 01       	movw	r14, r20
_ZN9DNSClientC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.h:10
   17172:	ce 01       	movw	r24, r28
   17174:	01 96       	adiw	r24, 0x01	; 1
   17176:	0e 94 41 da 	call	0x1b482	; 0x1b482 <IPAddress::IPAddress()>
   1717a:	ce 01       	movw	r24, r28
   1717c:	09 96       	adiw	r24, 0x09	; 9
   1717e:	0e 94 91 b8 	call	0x17122	; 0x17122 <EthernetUDP::EthernetUDP()>
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:88
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
   17182:	ce 01       	movw	r24, r28
   17184:	8a 96       	adiw	r24, 0x2a	; 42
   17186:	0e 94 41 da 	call	0x1b482	; 0x1b482 <IPAddress::IPAddress()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:90

  dns.begin(Ethernet.dnsServerIP());
   1718a:	67 ef       	ldi	r22, 0xF7	; 247
   1718c:	72 e1       	ldi	r23, 0x12	; 18
   1718e:	ce 01       	movw	r24, r28
   17190:	84 96       	adiw	r24, 0x24	; 36
   17192:	0e 94 6c b3 	call	0x166d8	; 0x166d8 <EthernetClass::dnsServerIP()>
   17196:	be 01       	movw	r22, r28
   17198:	6c 5d       	subi	r22, 0xDC	; 220
   1719a:	7f 4f       	sbci	r23, 0xFF	; 255
   1719c:	ce 01       	movw	r24, r28
   1719e:	01 96       	adiw	r24, 0x01	; 1
   171a0:	0e 94 0f b0 	call	0x1601e	; 0x1601e <DNSClient::begin(IPAddress const&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  ret = dns.getHostByName(host, remote_addr);
   171a4:	ae 01       	movw	r20, r28
   171a6:	46 5d       	subi	r20, 0xD6	; 214
   171a8:	5f 4f       	sbci	r21, 0xFF	; 255
   171aa:	b6 01       	movw	r22, r12
   171ac:	ce 01       	movw	r24, r28
   171ae:	01 96       	adiw	r24, 0x01	; 1
   171b0:	0e 94 85 b2 	call	0x1650a	; 0x1650a <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
   171b4:	81 30       	cpi	r24, 0x01	; 1
   171b6:	91 05       	cpc	r25, r1
   171b8:	c1 f4       	brne	.+48     	; 0x171ea <EthernetUDP::beginPacket(char const*, unsigned int)+0x9e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
   171ba:	d8 01       	movw	r26, r16
   171bc:	ed 91       	ld	r30, X+
   171be:	fc 91       	ld	r31, X
   171c0:	04 88       	ldd	r0, Z+20	; 0x14
   171c2:	f5 89       	ldd	r31, Z+21	; 0x15
   171c4:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   171c6:	87 e4       	ldi	r24, 0x47	; 71
   171c8:	99 e0       	ldi	r25, 0x09	; 9
   171ca:	9d a3       	std	Y+37, r25	; 0x25
   171cc:	8c a3       	std	Y+36, r24	; 0x24
   171ce:	8c a5       	ldd	r24, Y+44	; 0x2c
   171d0:	9d a5       	ldd	r25, Y+45	; 0x2d
   171d2:	ae a5       	ldd	r26, Y+46	; 0x2e
   171d4:	bf a5       	ldd	r27, Y+47	; 0x2f
   171d6:	8e a3       	std	Y+38, r24	; 0x26
   171d8:	9f a3       	std	Y+39, r25	; 0x27
   171da:	a8 a7       	std	Y+40, r26	; 0x28
   171dc:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
   171de:	a7 01       	movw	r20, r14
   171e0:	be 01       	movw	r22, r28
   171e2:	6c 5d       	subi	r22, 0xDC	; 220
   171e4:	7f 4f       	sbci	r23, 0xFF	; 255
   171e6:	c8 01       	movw	r24, r16
   171e8:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
   171ea:	af 96       	adiw	r28, 0x2f	; 47
   171ec:	0f b6       	in	r0, 0x3f	; 63
   171ee:	f8 94       	cli
   171f0:	de bf       	out	0x3e, r29	; 62
   171f2:	0f be       	out	0x3f, r0	; 63
   171f4:	cd bf       	out	0x3d, r28	; 61
   171f6:	df 91       	pop	r29
   171f8:	cf 91       	pop	r28
   171fa:	1f 91       	pop	r17
   171fc:	0f 91       	pop	r16
   171fe:	ff 90       	pop	r15
   17200:	ef 90       	pop	r14
   17202:	df 90       	pop	r13
   17204:	cf 90       	pop	r12
   17206:	08 95       	ret

00017208 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:
_GLOBAL__sub_I__ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221

  while (_remaining)
  {
    read();
  }
}
   17208:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   1720a:	00 e0       	ldi	r16, 0x00	; 0
   1720c:	20 e0       	ldi	r18, 0x00	; 0
   1720e:	40 e0       	ldi	r20, 0x00	; 0
   17210:	60 e0       	ldi	r22, 0x00	; 0
   17212:	86 e2       	ldi	r24, 0x26	; 38
   17214:	93 e1       	ldi	r25, 0x13	; 19
   17216:	0e 94 4b da 	call	0x1b496	; 0x1b496 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
   1721a:	0f 91       	pop	r16
   1721c:	08 95       	ret

0001721e <_GLOBAL__sub_I__ZN7TwitterC2EPKc>:
_GLOBAL__sub_I__ZN7TwitterC2EPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Twitter.cpp:91

int Twitter::wait(Print *debug)
{
	while (checkStatus(debug));
	return statusCode;
}
   1721e:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   17220:	00 e0       	ldi	r16, 0x00	; 0
   17222:	20 e0       	ldi	r18, 0x00	; 0
   17224:	40 e0       	ldi	r20, 0x00	; 0
   17226:	60 e0       	ldi	r22, 0x00	; 0
   17228:	8c e2       	ldi	r24, 0x2C	; 44
   1722a:	93 e1       	ldi	r25, 0x13	; 19
   1722c:	0e 94 4b da 	call	0x1b496	; 0x1b496 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN7TwitterC2EPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Twitter.cpp:91
   17230:	0f 91       	pop	r16
   17232:	08 95       	ret

00017234 <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>:
_ZN10W5500Class11writeSnDIPREhPh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:355
      return 0;
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
   17234:	ab 01       	movw	r20, r22
_ZN10W5500Class7writeSnEhjPhj():
   17236:	82 95       	swap	r24
   17238:	88 0f       	add	r24, r24
   1723a:	80 7e       	andi	r24, 0xE0	; 224
   1723c:	6c e0       	ldi	r22, 0x0C	; 12
   1723e:	68 0f       	add	r22, r24
   17240:	24 e0       	ldi	r18, 0x04	; 4
   17242:	30 e0       	ldi	r19, 0x00	; 0
   17244:	8c e0       	ldi	r24, 0x0C	; 12
   17246:	90 e0       	ldi	r25, 0x00	; 0
   17248:	0c 94 75 bb 	jmp	0x176ea	; 0x176ea <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

0001724c <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
   1724c:	9b 01       	movw	r18, r22
   1724e:	82 95       	swap	r24
   17250:	88 0f       	add	r24, r24
   17252:	80 7e       	andi	r24, 0xE0	; 224
   17254:	68 e0       	ldi	r22, 0x08	; 8
   17256:	68 0f       	add	r22, r24
   17258:	c9 01       	movw	r24, r18
   1725a:	0c 94 a9 bb 	jmp	0x17752	; 0x17752 <W5500Class::read(unsigned int, unsigned char)>

0001725e <W5500Class::readSnIR(unsigned char)>:
_ZN10W5500Class8readSnIREh():
   1725e:	62 e0       	ldi	r22, 0x02	; 2
   17260:	70 e0       	ldi	r23, 0x00	; 0
   17262:	0c 94 26 b9 	jmp	0x1724c	; 0x1724c <W5500Class::readSn(unsigned char, unsigned int)>

00017266 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
   17266:	9b 01       	movw	r18, r22
   17268:	82 95       	swap	r24
   1726a:	88 0f       	add	r24, r24
   1726c:	80 7e       	andi	r24, 0xE0	; 224
   1726e:	6c e0       	ldi	r22, 0x0C	; 12
   17270:	68 0f       	add	r22, r24
   17272:	c9 01       	movw	r24, r18
   17274:	0c 94 4f bb 	jmp	0x1769e	; 0x1769e <W5500Class::write(unsigned int, unsigned char, unsigned char)>

00017278 <W5500Class::writeSnPORT(unsigned char, unsigned int)>:
_ZN10W5500Class11writeSnPORTEhj():
   17278:	cf 93       	push	r28
   1727a:	df 93       	push	r29
   1727c:	c8 2f       	mov	r28, r24
   1727e:	d6 2f       	mov	r29, r22
   17280:	47 2f       	mov	r20, r23
   17282:	64 e0       	ldi	r22, 0x04	; 4
   17284:	70 e0       	ldi	r23, 0x00	; 0
   17286:	0e 94 33 b9 	call	0x17266	; 0x17266 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1728a:	4d 2f       	mov	r20, r29
   1728c:	65 e0       	ldi	r22, 0x05	; 5
   1728e:	70 e0       	ldi	r23, 0x00	; 0
   17290:	8c 2f       	mov	r24, r28
   17292:	df 91       	pop	r29
   17294:	cf 91       	pop	r28
   17296:	0c 94 33 b9 	jmp	0x17266	; 0x17266 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0001729a <W5500Class::writeSnIR(unsigned char, unsigned char)>:
_ZN10W5500Class9writeSnIREhh():
   1729a:	46 2f       	mov	r20, r22
   1729c:	62 e0       	ldi	r22, 0x02	; 2
   1729e:	70 e0       	ldi	r23, 0x00	; 0
   172a0:	0c 94 33 b9 	jmp	0x17266	; 0x17266 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

000172a4 <W5500Class::writeSnDPORT(unsigned char, unsigned int)>:
_ZN10W5500Class12writeSnDPORTEhj():
   172a4:	cf 93       	push	r28
   172a6:	df 93       	push	r29
   172a8:	c8 2f       	mov	r28, r24
   172aa:	d6 2f       	mov	r29, r22
   172ac:	47 2f       	mov	r20, r23
   172ae:	60 e1       	ldi	r22, 0x10	; 16
   172b0:	70 e0       	ldi	r23, 0x00	; 0
   172b2:	0e 94 33 b9 	call	0x17266	; 0x17266 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   172b6:	4d 2f       	mov	r20, r29
   172b8:	61 e1       	ldi	r22, 0x11	; 17
   172ba:	70 e0       	ldi	r23, 0x00	; 0
   172bc:	8c 2f       	mov	r24, r28
   172be:	df 91       	pop	r29
   172c0:	cf 91       	pop	r28
   172c2:	0c 94 33 b9 	jmp	0x17266	; 0x17266 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

000172c6 <close(unsigned char)>:
_Z5closeh():
   172c6:	cf 93       	push	r28
   172c8:	c8 2f       	mov	r28, r24
   172ca:	40 e1       	ldi	r20, 0x10	; 16
   172cc:	50 e0       	ldi	r21, 0x00	; 0
   172ce:	68 2f       	mov	r22, r24
   172d0:	87 e3       	ldi	r24, 0x37	; 55
   172d2:	93 e1       	ldi	r25, 0x13	; 19
   172d4:	0e 94 57 bd 	call	0x17aae	; 0x17aae <W5500Class::execCmdSn(unsigned char, SockCMD)>
   172d8:	6f ef       	ldi	r22, 0xFF	; 255
   172da:	8c 2f       	mov	r24, r28
   172dc:	cf 91       	pop	r28
   172de:	0c 94 4d b9 	jmp	0x1729a	; 0x1729a <W5500Class::writeSnIR(unsigned char, unsigned char)>

000172e2 <socket(unsigned char, unsigned char, unsigned int, unsigned char)>:
_Z6sockethhjh():
   172e2:	ff 92       	push	r15
   172e4:	0f 93       	push	r16
   172e6:	1f 93       	push	r17
   172e8:	cf 93       	push	r28
   172ea:	df 93       	push	r29
   172ec:	9f ef       	ldi	r25, 0xFF	; 255
   172ee:	96 0f       	add	r25, r22
   172f0:	95 30       	cpi	r25, 0x05	; 5
   172f2:	58 f5       	brcc	.+86     	; 0x1734a <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x68>
   172f4:	f2 2e       	mov	r15, r18
   172f6:	8a 01       	movw	r16, r20
   172f8:	d6 2f       	mov	r29, r22
   172fa:	c8 2f       	mov	r28, r24
   172fc:	0e 94 63 b9 	call	0x172c6	; 0x172c6 <close(unsigned char)>
   17300:	4d 2f       	mov	r20, r29
   17302:	4f 29       	or	r20, r15
_ZN10W5500Class9writeSnMREhh():
   17304:	70 e0       	ldi	r23, 0x00	; 0
   17306:	60 e0       	ldi	r22, 0x00	; 0
   17308:	8c 2f       	mov	r24, r28
   1730a:	0e 94 33 b9 	call	0x17266	; 0x17266 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh():
   1730e:	b8 01       	movw	r22, r16
   17310:	01 2b       	or	r16, r17
   17312:	51 f4       	brne	.+20     	; 0x17328 <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x46>
   17314:	60 91 32 13 	lds	r22, 0x1332	; 0x801332 <local_port>
   17318:	70 91 33 13 	lds	r23, 0x1333	; 0x801333 <local_port+0x1>
   1731c:	6f 5f       	subi	r22, 0xFF	; 255
   1731e:	7f 4f       	sbci	r23, 0xFF	; 255
   17320:	70 93 33 13 	sts	0x1333, r23	; 0x801333 <local_port+0x1>
   17324:	60 93 32 13 	sts	0x1332, r22	; 0x801332 <local_port>
   17328:	8c 2f       	mov	r24, r28
   1732a:	0e 94 3c b9 	call	0x17278	; 0x17278 <W5500Class::writeSnPORT(unsigned char, unsigned int)>
   1732e:	41 e0       	ldi	r20, 0x01	; 1
   17330:	50 e0       	ldi	r21, 0x00	; 0
   17332:	6c 2f       	mov	r22, r28
   17334:	87 e3       	ldi	r24, 0x37	; 55
   17336:	93 e1       	ldi	r25, 0x13	; 19
   17338:	0e 94 57 bd 	call	0x17aae	; 0x17aae <W5500Class::execCmdSn(unsigned char, SockCMD)>
   1733c:	81 e0       	ldi	r24, 0x01	; 1
   1733e:	df 91       	pop	r29
   17340:	cf 91       	pop	r28
   17342:	1f 91       	pop	r17
   17344:	0f 91       	pop	r16
   17346:	ff 90       	pop	r15
   17348:	08 95       	ret
   1734a:	80 e0       	ldi	r24, 0x00	; 0
   1734c:	f8 cf       	rjmp	.-16     	; 0x1733e <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x5c>

0001734e <listen(unsigned char)>:
_Z6listenh():
   1734e:	cf 93       	push	r28
   17350:	c8 2f       	mov	r28, r24
_ZN10W5500Class8readSnSREh():
   17352:	63 e0       	ldi	r22, 0x03	; 3
   17354:	70 e0       	ldi	r23, 0x00	; 0
   17356:	0e 94 26 b9 	call	0x1724c	; 0x1724c <W5500Class::readSn(unsigned char, unsigned int)>
_Z6listenh():
   1735a:	83 31       	cpi	r24, 0x13	; 19
   1735c:	51 f4       	brne	.+20     	; 0x17372 <listen(unsigned char)+0x24>
   1735e:	42 e0       	ldi	r20, 0x02	; 2
   17360:	50 e0       	ldi	r21, 0x00	; 0
   17362:	6c 2f       	mov	r22, r28
   17364:	87 e3       	ldi	r24, 0x37	; 55
   17366:	93 e1       	ldi	r25, 0x13	; 19
   17368:	0e 94 57 bd 	call	0x17aae	; 0x17aae <W5500Class::execCmdSn(unsigned char, SockCMD)>
   1736c:	81 e0       	ldi	r24, 0x01	; 1
   1736e:	cf 91       	pop	r28
   17370:	08 95       	ret
   17372:	80 e0       	ldi	r24, 0x00	; 0
   17374:	fc cf       	rjmp	.-8      	; 0x1736e <listen(unsigned char)+0x20>

00017376 <connect(unsigned char, unsigned char*, unsigned int)>:
_Z7connecthPhj():
   17376:	0f 93       	push	r16
   17378:	1f 93       	push	r17
   1737a:	cf 93       	push	r28
   1737c:	fb 01       	movw	r30, r22
   1737e:	90 81       	ld	r25, Z
   17380:	9f 3f       	cpi	r25, 0xFF	; 255
   17382:	59 f4       	brne	.+22     	; 0x1739a <connect(unsigned char, unsigned char*, unsigned int)+0x24>
   17384:	91 81       	ldd	r25, Z+1	; 0x01
   17386:	9f 3f       	cpi	r25, 0xFF	; 255
   17388:	99 f4       	brne	.+38     	; 0x173b0 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   1738a:	92 81       	ldd	r25, Z+2	; 0x02
   1738c:	9f 3f       	cpi	r25, 0xFF	; 255
   1738e:	81 f4       	brne	.+32     	; 0x173b0 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   17390:	93 81       	ldd	r25, Z+3	; 0x03
   17392:	9f 3f       	cpi	r25, 0xFF	; 255
   17394:	69 f4       	brne	.+26     	; 0x173b0 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   17396:	90 e0       	ldi	r25, 0x00	; 0
   17398:	1f c0       	rjmp	.+62     	; 0x173d8 <connect(unsigned char, unsigned char*, unsigned int)+0x62>
   1739a:	91 11       	cpse	r25, r1
   1739c:	09 c0       	rjmp	.+18     	; 0x173b0 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   1739e:	91 81       	ldd	r25, Z+1	; 0x01
   173a0:	91 11       	cpse	r25, r1
   173a2:	06 c0       	rjmp	.+12     	; 0x173b0 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   173a4:	92 81       	ldd	r25, Z+2	; 0x02
   173a6:	91 11       	cpse	r25, r1
   173a8:	03 c0       	rjmp	.+6      	; 0x173b0 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   173aa:	93 81       	ldd	r25, Z+3	; 0x03
   173ac:	99 23       	and	r25, r25
   173ae:	a1 f0       	breq	.+40     	; 0x173d8 <connect(unsigned char, unsigned char*, unsigned int)+0x62>
   173b0:	41 15       	cp	r20, r1
   173b2:	51 05       	cpc	r21, r1
   173b4:	81 f3       	breq	.-32     	; 0x17396 <connect(unsigned char, unsigned char*, unsigned int)+0x20>
   173b6:	8a 01       	movw	r16, r20
   173b8:	bf 01       	movw	r22, r30
   173ba:	c8 2f       	mov	r28, r24
   173bc:	0e 94 1a b9 	call	0x17234	; 0x17234 <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>
   173c0:	b8 01       	movw	r22, r16
   173c2:	8c 2f       	mov	r24, r28
   173c4:	0e 94 52 b9 	call	0x172a4	; 0x172a4 <W5500Class::writeSnDPORT(unsigned char, unsigned int)>
   173c8:	44 e0       	ldi	r20, 0x04	; 4
   173ca:	50 e0       	ldi	r21, 0x00	; 0
   173cc:	6c 2f       	mov	r22, r28
   173ce:	87 e3       	ldi	r24, 0x37	; 55
   173d0:	93 e1       	ldi	r25, 0x13	; 19
   173d2:	0e 94 57 bd 	call	0x17aae	; 0x17aae <W5500Class::execCmdSn(unsigned char, SockCMD)>
   173d6:	91 e0       	ldi	r25, 0x01	; 1
   173d8:	89 2f       	mov	r24, r25
   173da:	cf 91       	pop	r28
   173dc:	1f 91       	pop	r17
   173de:	0f 91       	pop	r16
   173e0:	08 95       	ret

000173e2 <disconnect(unsigned char)>:
_Z10disconnecth():
   173e2:	48 e0       	ldi	r20, 0x08	; 8
   173e4:	50 e0       	ldi	r21, 0x00	; 0
   173e6:	68 2f       	mov	r22, r24
   173e8:	87 e3       	ldi	r24, 0x37	; 55
   173ea:	93 e1       	ldi	r25, 0x13	; 19
   173ec:	0c 94 57 bd 	jmp	0x17aae	; 0x17aae <W5500Class::execCmdSn(unsigned char, SockCMD)>

000173f0 <send(unsigned char, unsigned char const*, unsigned int)>:
_Z4sendhPKhj():
   173f0:	cf 92       	push	r12
   173f2:	df 92       	push	r13
   173f4:	ef 92       	push	r14
   173f6:	ff 92       	push	r15
   173f8:	0f 93       	push	r16
   173fa:	1f 93       	push	r17
   173fc:	cf 93       	push	r28
   173fe:	c8 2f       	mov	r28, r24
   17400:	7b 01       	movw	r14, r22
   17402:	8a 01       	movw	r16, r20
   17404:	41 30       	cpi	r20, 0x01	; 1
   17406:	58 40       	sbci	r21, 0x08	; 8
   17408:	10 f0       	brcs	.+4      	; 0x1740e <send(unsigned char, unsigned char const*, unsigned int)+0x1e>
   1740a:	00 e0       	ldi	r16, 0x00	; 0
   1740c:	18 e0       	ldi	r17, 0x08	; 8
   1740e:	6c 2f       	mov	r22, r28
   17410:	87 e3       	ldi	r24, 0x37	; 55
   17412:	93 e1       	ldi	r25, 0x13	; 19
   17414:	0e 94 1c bc 	call	0x17838	; 0x17838 <W5500Class::getTXFreeSize(unsigned char)>
   17418:	6c 01       	movw	r12, r24
_ZN10W5500Class8readSnSREh():
   1741a:	63 e0       	ldi	r22, 0x03	; 3
   1741c:	70 e0       	ldi	r23, 0x00	; 0
   1741e:	8c 2f       	mov	r24, r28
   17420:	0e 94 26 b9 	call	0x1724c	; 0x1724c <W5500Class::readSn(unsigned char, unsigned int)>
_Z4sendhPKhj():
   17424:	87 31       	cpi	r24, 0x17	; 23
   17426:	11 f0       	breq	.+4      	; 0x1742c <send(unsigned char, unsigned char const*, unsigned int)+0x3c>
   17428:	8c 31       	cpi	r24, 0x1C	; 28
   1742a:	59 f5       	brne	.+86     	; 0x17482 <send(unsigned char, unsigned char const*, unsigned int)+0x92>
   1742c:	c0 16       	cp	r12, r16
   1742e:	d1 06       	cpc	r13, r17
   17430:	70 f3       	brcs	.-36     	; 0x1740e <send(unsigned char, unsigned char const*, unsigned int)+0x1e>
   17432:	98 01       	movw	r18, r16
   17434:	a7 01       	movw	r20, r14
   17436:	6c 2f       	mov	r22, r28
   17438:	87 e3       	ldi	r24, 0x37	; 55
   1743a:	93 e1       	ldi	r25, 0x13	; 19
   1743c:	0e 94 ac bc 	call	0x17958	; 0x17958 <W5500Class::send_data_processing(unsigned char, unsigned char const*, unsigned int)>
   17440:	40 e2       	ldi	r20, 0x20	; 32
   17442:	50 e0       	ldi	r21, 0x00	; 0
   17444:	6c 2f       	mov	r22, r28
   17446:	87 e3       	ldi	r24, 0x37	; 55
   17448:	93 e1       	ldi	r25, 0x13	; 19
   1744a:	0e 94 57 bd 	call	0x17aae	; 0x17aae <W5500Class::execCmdSn(unsigned char, SockCMD)>
   1744e:	8c 2f       	mov	r24, r28
   17450:	0e 94 2f b9 	call	0x1725e	; 0x1725e <W5500Class::readSnIR(unsigned char)>
   17454:	84 fd       	sbrc	r24, 4
   17456:	18 c0       	rjmp	.+48     	; 0x17488 <send(unsigned char, unsigned char const*, unsigned int)+0x98>
_ZN10W5500Class8readSnSREh():
   17458:	63 e0       	ldi	r22, 0x03	; 3
   1745a:	70 e0       	ldi	r23, 0x00	; 0
   1745c:	8c 2f       	mov	r24, r28
   1745e:	0e 94 26 b9 	call	0x1724c	; 0x1724c <W5500Class::readSn(unsigned char, unsigned int)>
_Z4sendhPKhj():
   17462:	81 11       	cpse	r24, r1
   17464:	f4 cf       	rjmp	.-24     	; 0x1744e <send(unsigned char, unsigned char const*, unsigned int)+0x5e>
   17466:	8c 2f       	mov	r24, r28
   17468:	0e 94 63 b9 	call	0x172c6	; 0x172c6 <close(unsigned char)>
   1746c:	10 e0       	ldi	r17, 0x00	; 0
   1746e:	00 e0       	ldi	r16, 0x00	; 0
   17470:	c8 01       	movw	r24, r16
   17472:	cf 91       	pop	r28
   17474:	1f 91       	pop	r17
   17476:	0f 91       	pop	r16
   17478:	ff 90       	pop	r15
   1747a:	ef 90       	pop	r14
   1747c:	df 90       	pop	r13
   1747e:	cf 90       	pop	r12
   17480:	08 95       	ret
   17482:	10 e0       	ldi	r17, 0x00	; 0
   17484:	00 e0       	ldi	r16, 0x00	; 0
   17486:	d5 cf       	rjmp	.-86     	; 0x17432 <send(unsigned char, unsigned char const*, unsigned int)+0x42>
   17488:	60 e1       	ldi	r22, 0x10	; 16
   1748a:	8c 2f       	mov	r24, r28
   1748c:	0e 94 4d b9 	call	0x1729a	; 0x1729a <W5500Class::writeSnIR(unsigned char, unsigned char)>
   17490:	ef cf       	rjmp	.-34     	; 0x17470 <send(unsigned char, unsigned char const*, unsigned int)+0x80>

00017492 <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
   17492:	cf 92       	push	r12
   17494:	df 92       	push	r13
   17496:	ef 92       	push	r14
   17498:	ff 92       	push	r15
   1749a:	0f 93       	push	r16
   1749c:	1f 93       	push	r17
   1749e:	cf 93       	push	r28
   174a0:	df 93       	push	r29
   174a2:	18 2f       	mov	r17, r24
   174a4:	6b 01       	movw	r12, r22
   174a6:	7a 01       	movw	r14, r20
   174a8:	68 2f       	mov	r22, r24
   174aa:	87 e3       	ldi	r24, 0x37	; 55
   174ac:	93 e1       	ldi	r25, 0x13	; 19
   174ae:	0e 94 50 bc 	call	0x178a0	; 0x178a0 <W5500Class::getRXReceivedSize(unsigned char)>
   174b2:	ec 01       	movw	r28, r24
   174b4:	00 97       	sbiw	r24, 0x00	; 0
   174b6:	e1 f4       	brne	.+56     	; 0x174f0 <recv(unsigned char, unsigned char*, int)+0x5e>
_ZN10W5500Class8readSnSREh():
   174b8:	63 e0       	ldi	r22, 0x03	; 3
   174ba:	70 e0       	ldi	r23, 0x00	; 0
   174bc:	81 2f       	mov	r24, r17
   174be:	0e 94 26 b9 	call	0x1724c	; 0x1724c <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
   174c2:	84 31       	cpi	r24, 0x14	; 20
   174c4:	59 f0       	breq	.+22     	; 0x174dc <recv(unsigned char, unsigned char*, int)+0x4a>
   174c6:	88 23       	and	r24, r24
   174c8:	49 f0       	breq	.+18     	; 0x174dc <recv(unsigned char, unsigned char*, int)+0x4a>
   174ca:	c1 e0       	ldi	r28, 0x01	; 1
   174cc:	d0 e0       	ldi	r29, 0x00	; 0
   174ce:	8c 31       	cpi	r24, 0x1C	; 28
   174d0:	11 f4       	brne	.+4      	; 0x174d6 <recv(unsigned char, unsigned char*, int)+0x44>
   174d2:	d0 e0       	ldi	r29, 0x00	; 0
   174d4:	c0 e0       	ldi	r28, 0x00	; 0
   174d6:	d1 95       	neg	r29
   174d8:	c1 95       	neg	r28
   174da:	d1 09       	sbc	r29, r1
   174dc:	ce 01       	movw	r24, r28
   174de:	df 91       	pop	r29
   174e0:	cf 91       	pop	r28
   174e2:	1f 91       	pop	r17
   174e4:	0f 91       	pop	r16
   174e6:	ff 90       	pop	r15
   174e8:	ef 90       	pop	r14
   174ea:	df 90       	pop	r13
   174ec:	cf 90       	pop	r12
   174ee:	08 95       	ret
   174f0:	e8 16       	cp	r14, r24
   174f2:	f9 06       	cpc	r15, r25
   174f4:	0c f4       	brge	.+2      	; 0x174f8 <recv(unsigned char, unsigned char*, int)+0x66>
   174f6:	e7 01       	movw	r28, r14
   174f8:	1c 16       	cp	r1, r28
   174fa:	1d 06       	cpc	r1, r29
   174fc:	7c f7       	brge	.-34     	; 0x174dc <recv(unsigned char, unsigned char*, int)+0x4a>
   174fe:	00 e0       	ldi	r16, 0x00	; 0
   17500:	9e 01       	movw	r18, r28
   17502:	a6 01       	movw	r20, r12
   17504:	61 2f       	mov	r22, r17
   17506:	87 e3       	ldi	r24, 0x37	; 55
   17508:	93 e1       	ldi	r25, 0x13	; 19
   1750a:	0e 94 06 bd 	call	0x17a0c	; 0x17a0c <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>
   1750e:	40 e4       	ldi	r20, 0x40	; 64
   17510:	50 e0       	ldi	r21, 0x00	; 0
   17512:	61 2f       	mov	r22, r17
   17514:	87 e3       	ldi	r24, 0x37	; 55
   17516:	93 e1       	ldi	r25, 0x13	; 19
   17518:	0e 94 57 bd 	call	0x17aae	; 0x17aae <W5500Class::execCmdSn(unsigned char, SockCMD)>
   1751c:	df cf       	rjmp	.-66     	; 0x174dc <recv(unsigned char, unsigned char*, int)+0x4a>

0001751e <peek(unsigned char, unsigned char*)>:
_Z4peekhPh():
   1751e:	0f 93       	push	r16
   17520:	ab 01       	movw	r20, r22
   17522:	01 e0       	ldi	r16, 0x01	; 1
   17524:	21 e0       	ldi	r18, 0x01	; 1
   17526:	30 e0       	ldi	r19, 0x00	; 0
   17528:	68 2f       	mov	r22, r24
   1752a:	87 e3       	ldi	r24, 0x37	; 55
   1752c:	93 e1       	ldi	r25, 0x13	; 19
   1752e:	0e 94 06 bd 	call	0x17a0c	; 0x17a0c <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>
   17532:	81 e0       	ldi	r24, 0x01	; 1
   17534:	90 e0       	ldi	r25, 0x00	; 0
   17536:	0f 91       	pop	r16
   17538:	08 95       	ret

0001753a <flush(unsigned char)>:
_Z5flushh():
   1753a:	08 95       	ret

0001753c <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)>:
_Z10bufferDatahjPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:359
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
   1753c:	af 92       	push	r10
   1753e:	bf 92       	push	r11
   17540:	cf 92       	push	r12
   17542:	df 92       	push	r13
   17544:	ff 92       	push	r15
   17546:	0f 93       	push	r16
   17548:	1f 93       	push	r17
   1754a:	cf 93       	push	r28
   1754c:	df 93       	push	r29
   1754e:	f8 2e       	mov	r15, r24
   17550:	6b 01       	movw	r12, r22
   17552:	5a 01       	movw	r10, r20
   17554:	e9 01       	movw	r28, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
   17556:	68 2f       	mov	r22, r24
   17558:	87 e3       	ldi	r24, 0x37	; 55
   1755a:	93 e1       	ldi	r25, 0x13	; 19
   1755c:	0e 94 1c bc 	call	0x17838	; 0x17838 <W5500Class::getTXFreeSize(unsigned char)>
   17560:	8c 17       	cp	r24, r28
   17562:	9d 07       	cpc	r25, r29
   17564:	30 f4       	brcc	.+12     	; 0x17572 <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
   17566:	6f 2d       	mov	r22, r15
   17568:	87 e3       	ldi	r24, 0x37	; 55
   1756a:	93 e1       	ldi	r25, 0x13	; 19
   1756c:	0e 94 1c bc 	call	0x17838	; 0x17838 <W5500Class::getTXFreeSize(unsigned char)>
   17570:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
   17572:	8e 01       	movw	r16, r28
   17574:	95 01       	movw	r18, r10
   17576:	a6 01       	movw	r20, r12
   17578:	6f 2d       	mov	r22, r15
   1757a:	87 e3       	ldi	r24, 0x37	; 55
   1757c:	93 e1       	ldi	r25, 0x13	; 19
   1757e:	0e 94 6c bc 	call	0x178d8	; 0x178d8 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:371
  return ret;
}
   17582:	ce 01       	movw	r24, r28
   17584:	df 91       	pop	r29
   17586:	cf 91       	pop	r28
   17588:	1f 91       	pop	r17
   1758a:	0f 91       	pop	r16
   1758c:	ff 90       	pop	r15
   1758e:	df 90       	pop	r13
   17590:	cf 90       	pop	r12
   17592:	bf 90       	pop	r11
   17594:	af 90       	pop	r10
   17596:	08 95       	ret

00017598 <startUDP(unsigned char, unsigned char*, unsigned int)>:
_Z8startUDPhPhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:374

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
   17598:	0f 93       	push	r16
   1759a:	1f 93       	push	r17
   1759c:	cf 93       	push	r28
   1759e:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  if
   175a0:	90 81       	ld	r25, Z
   175a2:	91 11       	cpse	r25, r1
   175a4:	09 c0       	rjmp	.+18     	; 0x175b8 <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   175a6:	91 81       	ldd	r25, Z+1	; 0x01
   175a8:	91 11       	cpse	r25, r1
   175aa:	06 c0       	rjmp	.+12     	; 0x175b8 <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 1)
   175ac:	92 81       	ldd	r25, Z+2	; 0x02
   175ae:	91 11       	cpse	r25, r1
   175b0:	03 c0       	rjmp	.+6      	; 0x175b8 <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 3)
   175b2:	93 81       	ldd	r25, Z+3	; 0x03
   175b4:	99 23       	and	r25, r25
   175b6:	91 f0       	breq	.+36     	; 0x175dc <startUDP(unsigned char, unsigned char*, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 5)
   175b8:	41 15       	cp	r20, r1
   175ba:	51 05       	cpc	r21, r1
   175bc:	79 f0       	breq	.+30     	; 0x175dc <startUDP(unsigned char, unsigned char*, unsigned int)+0x44>
   175be:	8a 01       	movw	r16, r20
   175c0:	bf 01       	movw	r22, r30
   175c2:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:385
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
   175c4:	0e 94 1a b9 	call	0x17234	; 0x17234 <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:386
    w5500.writeSnDPORT(s, port);
   175c8:	b8 01       	movw	r22, r16
   175ca:	8c 2f       	mov	r24, r28
   175cc:	0e 94 52 b9 	call	0x172a4	; 0x172a4 <W5500Class::writeSnDPORT(unsigned char, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:387
    return 1;
   175d0:	81 e0       	ldi	r24, 0x01	; 1
   175d2:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:389
  }
}
   175d4:	cf 91       	pop	r28
   175d6:	1f 91       	pop	r17
   175d8:	0f 91       	pop	r16
   175da:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
   175dc:	90 e0       	ldi	r25, 0x00	; 0
   175de:	80 e0       	ldi	r24, 0x00	; 0
   175e0:	f9 cf       	rjmp	.-14     	; 0x175d4 <startUDP(unsigned char, unsigned char*, unsigned int)+0x3c>

000175e2 <sendUDP(unsigned char)>:
_Z7sendUDPh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:392
    return 1;
  }
}

int sendUDP(SOCKET s)
{
   175e2:	cf 93       	push	r28
   175e4:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  w5500.execCmdSn(s, Sock_SEND);
   175e6:	40 e2       	ldi	r20, 0x20	; 32
   175e8:	50 e0       	ldi	r21, 0x00	; 0
   175ea:	68 2f       	mov	r22, r24
   175ec:	87 e3       	ldi	r24, 0x37	; 55
   175ee:	93 e1       	ldi	r25, 0x13	; 19
   175f0:	0e 94 57 bd 	call	0x17aae	; 0x17aae <W5500Class::execCmdSn(unsigned char, SockCMD)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   175f4:	8c 2f       	mov	r24, r28
   175f6:	0e 94 2f b9 	call	0x1725e	; 0x1725e <W5500Class::readSnIR(unsigned char)>
   175fa:	84 fd       	sbrc	r24, 4
   175fc:	0d c0       	rjmp	.+26     	; 0x17618 <sendUDP(unsigned char)+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   175fe:	8c 2f       	mov	r24, r28
   17600:	0e 94 2f b9 	call	0x1725e	; 0x1725e <W5500Class::readSnIR(unsigned char)>
   17604:	83 ff       	sbrs	r24, 3
   17606:	f6 cf       	rjmp	.-20     	; 0x175f4 <sendUDP(unsigned char)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:401
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
   17608:	68 e1       	ldi	r22, 0x18	; 24
   1760a:	8c 2f       	mov	r24, r28
   1760c:	0e 94 4d b9 	call	0x1729a	; 0x1729a <W5500Class::writeSnIR(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
      return 0;
   17610:	90 e0       	ldi	r25, 0x00	; 0
   17612:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:411
  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
}
   17614:	cf 91       	pop	r28
   17616:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:407
      return 0;
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
   17618:	60 e1       	ldi	r22, 0x10	; 16
   1761a:	8c 2f       	mov	r24, r28
   1761c:	0e 94 4d b9 	call	0x1729a	; 0x1729a <W5500Class::writeSnIR(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* Sent ok */
  return 1;
   17620:	81 e0       	ldi	r24, 0x01	; 1
   17622:	90 e0       	ldi	r25, 0x00	; 0
   17624:	f7 cf       	rjmp	.-18     	; 0x17614 <sendUDP(unsigned char)+0x32>

00017626 <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:184
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
   17626:	20 91 e9 12 	lds	r18, 0x12E9	; 0x8012e9 <SPIClass::interruptMode>
   1762a:	22 23       	and	r18, r18
   1762c:	81 f0       	breq	.+32     	; 0x1764e <SPIClass::beginTransaction(SPISettings)+0x28>
   1762e:	3f b7       	in	r19, 0x3f	; 63
   17630:	f8 94       	cli
   17632:	20 91 e9 12 	lds	r18, 0x12E9	; 0x8012e9 <SPIClass::interruptMode>
   17636:	21 30       	cpi	r18, 0x01	; 1
   17638:	69 f4       	brne	.+26     	; 0x17654 <SPIClass::beginTransaction(SPISettings)+0x2e>
   1763a:	2d b3       	in	r18, 0x1d	; 29
   1763c:	20 93 e7 12 	sts	0x12E7, r18	; 0x8012e7 <SPIClass::interruptSave>
   17640:	4d b3       	in	r20, 0x1d	; 29
   17642:	20 91 e8 12 	lds	r18, 0x12E8	; 0x8012e8 <SPIClass::interruptMask>
   17646:	20 95       	com	r18
   17648:	24 23       	and	r18, r20
   1764a:	2d bb       	out	0x1d, r18	; 29
   1764c:	3f bf       	out	0x3f, r19	; 63
   1764e:	8c bd       	out	0x2c, r24	; 44
   17650:	9d bd       	out	0x2d, r25	; 45
   17652:	08 95       	ret
   17654:	30 93 e7 12 	sts	0x12E7, r19	; 0x8012e7 <SPIClass::interruptSave>
   17658:	fa cf       	rjmp	.-12     	; 0x1764e <SPIClass::beginTransaction(SPISettings)+0x28>

0001765a <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
   1765a:	8e bd       	out	0x2e, r24	; 46
   1765c:	00 00       	nop
   1765e:	0d b4       	in	r0, 0x2d	; 45
   17660:	07 fe       	sbrs	r0, 7
   17662:	fd cf       	rjmp	.-6      	; 0x1765e <SPIClass::transfer(unsigned char)+0x4>
   17664:	8e b5       	in	r24, 0x2e	; 46
   17666:	08 95       	ret

00017668 <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
   17668:	80 91 e9 12 	lds	r24, 0x12E9	; 0x8012e9 <SPIClass::interruptMode>
   1766c:	88 23       	and	r24, r24
   1766e:	61 f0       	breq	.+24     	; 0x17688 <SPIClass::endTransaction()+0x20>
   17670:	9f b7       	in	r25, 0x3f	; 63
   17672:	f8 94       	cli
   17674:	20 91 e9 12 	lds	r18, 0x12E9	; 0x8012e9 <SPIClass::interruptMode>
   17678:	80 91 e7 12 	lds	r24, 0x12E7	; 0x8012e7 <SPIClass::interruptSave>
   1767c:	21 30       	cpi	r18, 0x01	; 1
   1767e:	19 f4       	brne	.+6      	; 0x17686 <SPIClass::endTransaction()+0x1e>
   17680:	8d bb       	out	0x1d, r24	; 29
   17682:	9f bf       	out	0x3f, r25	; 63
   17684:	08 95       	ret
   17686:	8f bf       	out	0x3f, r24	; 63
   17688:	08 95       	ret

0001768a <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
   1768a:	60 e0       	ldi	r22, 0x00	; 0
   1768c:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <SPI_CS>
   17690:	0c 94 31 d8 	jmp	0x1b062	; 0x1b062 <digitalWrite>

00017694 <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
   17694:	61 e0       	ldi	r22, 0x01	; 1
   17696:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <SPI_CS>
   1769a:	0c 94 31 d8 	jmp	0x1b062	; 0x1b062 <digitalWrite>

0001769e <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
   1769e:	0f 93       	push	r16
   176a0:	1f 93       	push	r17
   176a2:	cf 93       	push	r28
   176a4:	df 93       	push	r29
   176a6:	18 2f       	mov	r17, r24
   176a8:	09 2f       	mov	r16, r25
   176aa:	d6 2f       	mov	r29, r22
   176ac:	c4 2f       	mov	r28, r20
   176ae:	80 91 35 13 	lds	r24, 0x1335	; 0x801335 <wiznet_SPI_settings>
   176b2:	90 91 36 13 	lds	r25, 0x1336	; 0x801336 <wiznet_SPI_settings+0x1>
   176b6:	0e 94 13 bb 	call	0x17626	; 0x17626 <SPIClass::beginTransaction(SPISettings)>
   176ba:	0e 94 45 bb 	call	0x1768a	; 0x1768a <W5500Class::setSS()>
   176be:	80 2f       	mov	r24, r16
   176c0:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   176c4:	81 2f       	mov	r24, r17
   176c6:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   176ca:	8d 2f       	mov	r24, r29
   176cc:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   176d0:	8c 2f       	mov	r24, r28
   176d2:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   176d6:	0e 94 4a bb 	call	0x17694	; 0x17694 <W5500Class::resetSS()>
   176da:	0e 94 34 bb 	call	0x17668	; 0x17668 <SPIClass::endTransaction()>
   176de:	81 e0       	ldi	r24, 0x01	; 1
   176e0:	df 91       	pop	r29
   176e2:	cf 91       	pop	r28
   176e4:	1f 91       	pop	r17
   176e6:	0f 91       	pop	r16
   176e8:	08 95       	ret

000176ea <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
   176ea:	df 92       	push	r13
   176ec:	ef 92       	push	r14
   176ee:	ff 92       	push	r15
   176f0:	0f 93       	push	r16
   176f2:	1f 93       	push	r17
   176f4:	cf 93       	push	r28
   176f6:	df 93       	push	r29
   176f8:	d8 2f       	mov	r29, r24
   176fa:	d9 2e       	mov	r13, r25
   176fc:	c6 2f       	mov	r28, r22
   176fe:	7a 01       	movw	r14, r20
   17700:	89 01       	movw	r16, r18
   17702:	80 91 35 13 	lds	r24, 0x1335	; 0x801335 <wiznet_SPI_settings>
   17706:	90 91 36 13 	lds	r25, 0x1336	; 0x801336 <wiznet_SPI_settings+0x1>
   1770a:	0e 94 13 bb 	call	0x17626	; 0x17626 <SPIClass::beginTransaction(SPISettings)>
   1770e:	0e 94 45 bb 	call	0x1768a	; 0x1768a <W5500Class::setSS()>
   17712:	8d 2d       	mov	r24, r13
   17714:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   17718:	8d 2f       	mov	r24, r29
   1771a:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   1771e:	8c 2f       	mov	r24, r28
   17720:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   17724:	e7 01       	movw	r28, r14
   17726:	e0 0e       	add	r14, r16
   17728:	f1 1e       	adc	r15, r17
   1772a:	ce 15       	cp	r28, r14
   1772c:	df 05       	cpc	r29, r15
   1772e:	21 f0       	breq	.+8      	; 0x17738 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
   17730:	89 91       	ld	r24, Y+
   17732:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   17736:	f9 cf       	rjmp	.-14     	; 0x1772a <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
   17738:	0e 94 4a bb 	call	0x17694	; 0x17694 <W5500Class::resetSS()>
   1773c:	0e 94 34 bb 	call	0x17668	; 0x17668 <SPIClass::endTransaction()>
   17740:	c8 01       	movw	r24, r16
   17742:	df 91       	pop	r29
   17744:	cf 91       	pop	r28
   17746:	1f 91       	pop	r17
   17748:	0f 91       	pop	r16
   1774a:	ff 90       	pop	r15
   1774c:	ef 90       	pop	r14
   1774e:	df 90       	pop	r13
   17750:	08 95       	ret

00017752 <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
   17752:	1f 93       	push	r17
   17754:	cf 93       	push	r28
   17756:	df 93       	push	r29
   17758:	d8 2f       	mov	r29, r24
   1775a:	19 2f       	mov	r17, r25
   1775c:	c6 2f       	mov	r28, r22
   1775e:	80 91 35 13 	lds	r24, 0x1335	; 0x801335 <wiznet_SPI_settings>
   17762:	90 91 36 13 	lds	r25, 0x1336	; 0x801336 <wiznet_SPI_settings+0x1>
   17766:	0e 94 13 bb 	call	0x17626	; 0x17626 <SPIClass::beginTransaction(SPISettings)>
   1776a:	0e 94 45 bb 	call	0x1768a	; 0x1768a <W5500Class::setSS()>
   1776e:	81 2f       	mov	r24, r17
   17770:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   17774:	8d 2f       	mov	r24, r29
   17776:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   1777a:	8c 2f       	mov	r24, r28
   1777c:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   17780:	80 e0       	ldi	r24, 0x00	; 0
   17782:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   17786:	c8 2f       	mov	r28, r24
   17788:	0e 94 4a bb 	call	0x17694	; 0x17694 <W5500Class::resetSS()>
   1778c:	0e 94 34 bb 	call	0x17668	; 0x17668 <SPIClass::endTransaction()>
   17790:	8c 2f       	mov	r24, r28
   17792:	df 91       	pop	r29
   17794:	cf 91       	pop	r28
   17796:	1f 91       	pop	r17
   17798:	08 95       	ret

0001779a <W5500Class::init(unsigned char)>:
_ZN10W5500Class4initEh():
   1779a:	0f 93       	push	r16
   1779c:	1f 93       	push	r17
   1779e:	cf 93       	push	r28
   177a0:	60 93 34 13 	sts	0x1334, r22	; 0x801334 <SPI_CS>
   177a4:	68 ee       	ldi	r22, 0xE8	; 232
   177a6:	73 e0       	ldi	r23, 0x03	; 3
   177a8:	80 e0       	ldi	r24, 0x00	; 0
   177aa:	90 e0       	ldi	r25, 0x00	; 0
   177ac:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
_ZN10W5500Class6initSSEv():
   177b0:	61 e0       	ldi	r22, 0x01	; 1
   177b2:	80 91 34 13 	lds	r24, 0x1334	; 0x801334 <SPI_CS>
   177b6:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
_ZN10W5500Class4initEh():
   177ba:	0e 94 0b ae 	call	0x15c16	; 0x15c16 <SPIClass::begin()>
_ZN10W5500Class6readMREv():
   177be:	60 e0       	ldi	r22, 0x00	; 0
   177c0:	90 e0       	ldi	r25, 0x00	; 0
   177c2:	80 e0       	ldi	r24, 0x00	; 0
   177c4:	0e 94 a9 bb 	call	0x17752	; 0x17752 <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv():
   177c8:	48 2f       	mov	r20, r24
   177ca:	40 68       	ori	r20, 0x80	; 128
_ZN10W5500Class7writeMREh():
   177cc:	64 e0       	ldi	r22, 0x04	; 4
   177ce:	90 e0       	ldi	r25, 0x00	; 0
   177d0:	80 e0       	ldi	r24, 0x00	; 0
   177d2:	0e 94 4f bb 	call	0x1769e	; 0x1769e <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   177d6:	cc e0       	ldi	r28, 0x0C	; 12
   177d8:	08 e0       	ldi	r16, 0x08	; 8
   177da:	10 e0       	ldi	r17, 0x00	; 0
_ZN10W5500Class4initEh():
   177dc:	42 e0       	ldi	r20, 0x02	; 2
   177de:	6c 2f       	mov	r22, r28
   177e0:	8e e1       	ldi	r24, 0x1E	; 30
   177e2:	90 e0       	ldi	r25, 0x00	; 0
   177e4:	0e 94 4f bb 	call	0x1769e	; 0x1769e <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   177e8:	42 e0       	ldi	r20, 0x02	; 2
   177ea:	6c 2f       	mov	r22, r28
   177ec:	8f e1       	ldi	r24, 0x1F	; 31
   177ee:	90 e0       	ldi	r25, 0x00	; 0
   177f0:	0e 94 4f bb 	call	0x1769e	; 0x1769e <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   177f4:	01 50       	subi	r16, 0x01	; 1
   177f6:	11 09       	sbc	r17, r1
   177f8:	c0 5e       	subi	r28, 0xE0	; 224
   177fa:	01 15       	cp	r16, r1
   177fc:	11 05       	cpc	r17, r1
   177fe:	71 f7       	brne	.-36     	; 0x177dc <W5500Class::init(unsigned char)+0x42>
   17800:	cf 91       	pop	r28
   17802:	1f 91       	pop	r17
   17804:	0f 91       	pop	r16
   17806:	08 95       	ret

00017808 <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
   17808:	1f 93       	push	r17
   1780a:	cf 93       	push	r28
   1780c:	df 93       	push	r29
   1780e:	18 2f       	mov	r17, r24
   17810:	60 e2       	ldi	r22, 0x20	; 32
   17812:	70 e0       	ldi	r23, 0x00	; 0
   17814:	0e 94 26 b9 	call	0x1724c	; 0x1724c <W5500Class::readSn(unsigned char, unsigned int)>
   17818:	c8 2f       	mov	r28, r24
   1781a:	d0 e0       	ldi	r29, 0x00	; 0
   1781c:	dc 2f       	mov	r29, r28
   1781e:	cc 27       	eor	r28, r28
   17820:	61 e2       	ldi	r22, 0x21	; 33
   17822:	70 e0       	ldi	r23, 0x00	; 0
   17824:	81 2f       	mov	r24, r17
   17826:	0e 94 26 b9 	call	0x1724c	; 0x1724c <W5500Class::readSn(unsigned char, unsigned int)>
   1782a:	8c 0f       	add	r24, r28
   1782c:	9d 2f       	mov	r25, r29
   1782e:	91 1d       	adc	r25, r1
   17830:	df 91       	pop	r29
   17832:	cf 91       	pop	r28
   17834:	1f 91       	pop	r17
   17836:	08 95       	ret

00017838 <W5500Class::getTXFreeSize(unsigned char)>:
_ZN10W5500Class13getTXFreeSizeEh():
   17838:	ff 92       	push	r15
   1783a:	0f 93       	push	r16
   1783c:	1f 93       	push	r17
   1783e:	cf 93       	push	r28
   17840:	df 93       	push	r29
   17842:	f6 2e       	mov	r15, r22
   17844:	d0 e0       	ldi	r29, 0x00	; 0
   17846:	c0 e0       	ldi	r28, 0x00	; 0
   17848:	8f 2d       	mov	r24, r15
   1784a:	0e 94 04 bc 	call	0x17808	; 0x17808 <W5500Class::readSnTX_FSR(unsigned char)>
   1784e:	8c 01       	movw	r16, r24
   17850:	89 2b       	or	r24, r25
   17852:	21 f0       	breq	.+8      	; 0x1785c <W5500Class::getTXFreeSize(unsigned char)+0x24>
   17854:	8f 2d       	mov	r24, r15
   17856:	0e 94 04 bc 	call	0x17808	; 0x17808 <W5500Class::readSnTX_FSR(unsigned char)>
   1785a:	ec 01       	movw	r28, r24
   1785c:	c0 17       	cp	r28, r16
   1785e:	d1 07       	cpc	r29, r17
   17860:	99 f7       	brne	.-26     	; 0x17848 <W5500Class::getTXFreeSize(unsigned char)+0x10>
   17862:	ce 01       	movw	r24, r28
   17864:	df 91       	pop	r29
   17866:	cf 91       	pop	r28
   17868:	1f 91       	pop	r17
   1786a:	0f 91       	pop	r16
   1786c:	ff 90       	pop	r15
   1786e:	08 95       	ret

00017870 <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
   17870:	1f 93       	push	r17
   17872:	cf 93       	push	r28
   17874:	df 93       	push	r29
   17876:	18 2f       	mov	r17, r24
   17878:	66 e2       	ldi	r22, 0x26	; 38
   1787a:	70 e0       	ldi	r23, 0x00	; 0
   1787c:	0e 94 26 b9 	call	0x1724c	; 0x1724c <W5500Class::readSn(unsigned char, unsigned int)>
   17880:	c8 2f       	mov	r28, r24
   17882:	d0 e0       	ldi	r29, 0x00	; 0
   17884:	dc 2f       	mov	r29, r28
   17886:	cc 27       	eor	r28, r28
   17888:	67 e2       	ldi	r22, 0x27	; 39
   1788a:	70 e0       	ldi	r23, 0x00	; 0
   1788c:	81 2f       	mov	r24, r17
   1788e:	0e 94 26 b9 	call	0x1724c	; 0x1724c <W5500Class::readSn(unsigned char, unsigned int)>
   17892:	8c 0f       	add	r24, r28
   17894:	9d 2f       	mov	r25, r29
   17896:	91 1d       	adc	r25, r1
   17898:	df 91       	pop	r29
   1789a:	cf 91       	pop	r28
   1789c:	1f 91       	pop	r17
   1789e:	08 95       	ret

000178a0 <W5500Class::getRXReceivedSize(unsigned char)>:
_ZN10W5500Class17getRXReceivedSizeEh():
   178a0:	ff 92       	push	r15
   178a2:	0f 93       	push	r16
   178a4:	1f 93       	push	r17
   178a6:	cf 93       	push	r28
   178a8:	df 93       	push	r29
   178aa:	f6 2e       	mov	r15, r22
   178ac:	d0 e0       	ldi	r29, 0x00	; 0
   178ae:	c0 e0       	ldi	r28, 0x00	; 0
   178b0:	8f 2d       	mov	r24, r15
   178b2:	0e 94 38 bc 	call	0x17870	; 0x17870 <W5500Class::readSnRX_RSR(unsigned char)>
   178b6:	8c 01       	movw	r16, r24
   178b8:	89 2b       	or	r24, r25
   178ba:	21 f0       	breq	.+8      	; 0x178c4 <W5500Class::getRXReceivedSize(unsigned char)+0x24>
   178bc:	8f 2d       	mov	r24, r15
   178be:	0e 94 38 bc 	call	0x17870	; 0x17870 <W5500Class::readSnRX_RSR(unsigned char)>
   178c2:	ec 01       	movw	r28, r24
   178c4:	c0 17       	cp	r28, r16
   178c6:	d1 07       	cpc	r29, r17
   178c8:	99 f7       	brne	.-26     	; 0x178b0 <W5500Class::getRXReceivedSize(unsigned char)+0x10>
   178ca:	ce 01       	movw	r24, r28
   178cc:	df 91       	pop	r29
   178ce:	cf 91       	pop	r28
   178d0:	1f 91       	pop	r17
   178d2:	0f 91       	pop	r16
   178d4:	ff 90       	pop	r15
   178d6:	08 95       	ret

000178d8 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   178d8:	bf 92       	push	r11
   178da:	cf 92       	push	r12
   178dc:	df 92       	push	r13
   178de:	ef 92       	push	r14
   178e0:	ff 92       	push	r15
   178e2:	0f 93       	push	r16
   178e4:	1f 93       	push	r17
   178e6:	cf 93       	push	r28
   178e8:	df 93       	push	r29
   178ea:	b6 2e       	mov	r11, r22
   178ec:	7a 01       	movw	r14, r20
   178ee:	69 01       	movw	r12, r18
_ZN10W5500Class11readSnTX_WREh():
   178f0:	64 e2       	ldi	r22, 0x24	; 36
   178f2:	70 e0       	ldi	r23, 0x00	; 0
   178f4:	8b 2d       	mov	r24, r11
   178f6:	0e 94 26 b9 	call	0x1724c	; 0x1724c <W5500Class::readSn(unsigned char, unsigned int)>
   178fa:	c8 2f       	mov	r28, r24
   178fc:	65 e2       	ldi	r22, 0x25	; 37
   178fe:	70 e0       	ldi	r23, 0x00	; 0
   17900:	8b 2d       	mov	r24, r11
   17902:	0e 94 26 b9 	call	0x1724c	; 0x1724c <W5500Class::readSn(unsigned char, unsigned int)>
   17906:	d0 e0       	ldi	r29, 0x00	; 0
   17908:	dc 2f       	mov	r29, r28
   1790a:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   1790c:	8e 0d       	add	r24, r14
   1790e:	9f 2d       	mov	r25, r15
   17910:	91 1d       	adc	r25, r1
   17912:	c8 0f       	add	r28, r24
   17914:	d9 1f       	adc	r29, r25
   17916:	6b 2d       	mov	r22, r11
   17918:	62 95       	swap	r22
   1791a:	66 0f       	add	r22, r22
   1791c:	60 7e       	andi	r22, 0xE0	; 224
   1791e:	6c 5e       	subi	r22, 0xEC	; 236
   17920:	98 01       	movw	r18, r16
   17922:	a6 01       	movw	r20, r12
   17924:	ce 01       	movw	r24, r28
   17926:	0e 94 75 bb 	call	0x176ea	; 0x176ea <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
   1792a:	0c 0f       	add	r16, r28
   1792c:	1d 1f       	adc	r17, r29
_ZN10W5500Class12writeSnTX_WREhj():
   1792e:	41 2f       	mov	r20, r17
   17930:	64 e2       	ldi	r22, 0x24	; 36
   17932:	70 e0       	ldi	r23, 0x00	; 0
   17934:	8b 2d       	mov	r24, r11
   17936:	0e 94 33 b9 	call	0x17266	; 0x17266 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1793a:	40 2f       	mov	r20, r16
   1793c:	65 e2       	ldi	r22, 0x25	; 37
   1793e:	70 e0       	ldi	r23, 0x00	; 0
   17940:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   17942:	df 91       	pop	r29
   17944:	cf 91       	pop	r28
   17946:	1f 91       	pop	r17
   17948:	0f 91       	pop	r16
   1794a:	ff 90       	pop	r15
   1794c:	ef 90       	pop	r14
   1794e:	df 90       	pop	r13
   17950:	cf 90       	pop	r12
   17952:	bf 90       	pop	r11
_ZN10W5500Class12writeSnTX_WREhj():
   17954:	0c 94 33 b9 	jmp	0x17266	; 0x17266 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00017958 <W5500Class::send_data_processing(unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class20send_data_processingEhPKhj():
   17958:	0f 93       	push	r16
   1795a:	1f 93       	push	r17
   1795c:	89 01       	movw	r16, r18
   1795e:	9a 01       	movw	r18, r20
   17960:	50 e0       	ldi	r21, 0x00	; 0
   17962:	40 e0       	ldi	r20, 0x00	; 0
   17964:	0e 94 6c bc 	call	0x178d8	; 0x178d8 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>
   17968:	1f 91       	pop	r17
   1796a:	0f 91       	pop	r16
   1796c:	08 95       	ret

0001796e <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)>:
_ZN10W5500Class4readEjhPhj():
   1796e:	df 92       	push	r13
   17970:	ef 92       	push	r14
   17972:	ff 92       	push	r15
   17974:	0f 93       	push	r16
   17976:	1f 93       	push	r17
   17978:	cf 93       	push	r28
   1797a:	df 93       	push	r29
   1797c:	d8 2f       	mov	r29, r24
   1797e:	d9 2e       	mov	r13, r25
   17980:	c6 2f       	mov	r28, r22
   17982:	7a 01       	movw	r14, r20
   17984:	89 01       	movw	r16, r18
   17986:	80 91 35 13 	lds	r24, 0x1335	; 0x801335 <wiznet_SPI_settings>
   1798a:	90 91 36 13 	lds	r25, 0x1336	; 0x801336 <wiznet_SPI_settings+0x1>
   1798e:	0e 94 13 bb 	call	0x17626	; 0x17626 <SPIClass::beginTransaction(SPISettings)>
   17992:	0e 94 45 bb 	call	0x1768a	; 0x1768a <W5500Class::setSS()>
   17996:	8d 2d       	mov	r24, r13
   17998:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   1799c:	8d 2f       	mov	r24, r29
   1799e:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   179a2:	8c 2f       	mov	r24, r28
   179a4:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   179a8:	e7 01       	movw	r28, r14
   179aa:	e0 0e       	add	r14, r16
   179ac:	f1 1e       	adc	r15, r17
   179ae:	ce 15       	cp	r28, r14
   179b0:	df 05       	cpc	r29, r15
   179b2:	29 f0       	breq	.+10     	; 0x179be <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)+0x50>
   179b4:	80 e0       	ldi	r24, 0x00	; 0
   179b6:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   179ba:	89 93       	st	Y+, r24
   179bc:	f8 cf       	rjmp	.-16     	; 0x179ae <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)+0x40>
   179be:	0e 94 4a bb 	call	0x17694	; 0x17694 <W5500Class::resetSS()>
   179c2:	0e 94 34 bb 	call	0x17668	; 0x17668 <SPIClass::endTransaction()>
   179c6:	c8 01       	movw	r24, r16
   179c8:	df 91       	pop	r29
   179ca:	cf 91       	pop	r28
   179cc:	1f 91       	pop	r17
   179ce:	0f 91       	pop	r16
   179d0:	ff 90       	pop	r15
   179d2:	ef 90       	pop	r14
   179d4:	df 90       	pop	r13
   179d6:	08 95       	ret

000179d8 <W5500Class::read_data(unsigned char, unsigned int, unsigned char volatile*, unsigned int)>:
_ZN10W5500Class9read_dataEhjPVhj():
   179d8:	0f 93       	push	r16
   179da:	1f 93       	push	r17
   179dc:	cf 93       	push	r28
   179de:	df 93       	push	r29
   179e0:	1f 92       	push	r1
   179e2:	1f 92       	push	r1
   179e4:	cd b7       	in	r28, 0x3d	; 61
   179e6:	de b7       	in	r29, 0x3e	; 62
   179e8:	5a 83       	std	Y+2, r21	; 0x02
   179ea:	49 83       	std	Y+1, r20	; 0x01
   179ec:	a9 01       	movw	r20, r18
   179ee:	98 01       	movw	r18, r16
   179f0:	89 81       	ldd	r24, Y+1	; 0x01
   179f2:	9a 81       	ldd	r25, Y+2	; 0x02
   179f4:	62 95       	swap	r22
   179f6:	66 0f       	add	r22, r22
   179f8:	60 7e       	andi	r22, 0xE0	; 224
   179fa:	68 5e       	subi	r22, 0xE8	; 232
   179fc:	0f 90       	pop	r0
   179fe:	0f 90       	pop	r0
   17a00:	df 91       	pop	r29
   17a02:	cf 91       	pop	r28
   17a04:	1f 91       	pop	r17
   17a06:	0f 91       	pop	r16
   17a08:	0c 94 b7 bc 	jmp	0x1796e	; 0x1796e <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)>

00017a0c <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>:
_ZN10W5500Class20recv_data_processingEhPhjh():
   17a0c:	8f 92       	push	r8
   17a0e:	9f 92       	push	r9
   17a10:	af 92       	push	r10
   17a12:	bf 92       	push	r11
   17a14:	cf 92       	push	r12
   17a16:	df 92       	push	r13
   17a18:	ef 92       	push	r14
   17a1a:	ff 92       	push	r15
   17a1c:	0f 93       	push	r16
   17a1e:	1f 93       	push	r17
   17a20:	cf 93       	push	r28
   17a22:	df 93       	push	r29
   17a24:	6c 01       	movw	r12, r24
   17a26:	96 2e       	mov	r9, r22
   17a28:	5a 01       	movw	r10, r20
   17a2a:	79 01       	movw	r14, r18
   17a2c:	80 2e       	mov	r8, r16
_ZN10W5500Class11readSnRX_RDEh():
   17a2e:	68 e2       	ldi	r22, 0x28	; 40
   17a30:	70 e0       	ldi	r23, 0x00	; 0
   17a32:	89 2d       	mov	r24, r9
   17a34:	0e 94 26 b9 	call	0x1724c	; 0x1724c <W5500Class::readSn(unsigned char, unsigned int)>
   17a38:	c8 2f       	mov	r28, r24
   17a3a:	d0 e0       	ldi	r29, 0x00	; 0
   17a3c:	dc 2f       	mov	r29, r28
   17a3e:	cc 27       	eor	r28, r28
   17a40:	69 e2       	ldi	r22, 0x29	; 41
   17a42:	70 e0       	ldi	r23, 0x00	; 0
   17a44:	89 2d       	mov	r24, r9
   17a46:	0e 94 26 b9 	call	0x1724c	; 0x1724c <W5500Class::readSn(unsigned char, unsigned int)>
   17a4a:	c8 0f       	add	r28, r24
   17a4c:	d1 1d       	adc	r29, r1
_ZN10W5500Class20recv_data_processingEhPhjh():
   17a4e:	87 01       	movw	r16, r14
   17a50:	95 01       	movw	r18, r10
   17a52:	ae 01       	movw	r20, r28
   17a54:	69 2d       	mov	r22, r9
   17a56:	c6 01       	movw	r24, r12
   17a58:	0e 94 ec bc 	call	0x179d8	; 0x179d8 <W5500Class::read_data(unsigned char, unsigned int, unsigned char volatile*, unsigned int)>
   17a5c:	81 10       	cpse	r8, r1
   17a5e:	1a c0       	rjmp	.+52     	; 0x17a94 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)+0x88>
   17a60:	ce 0d       	add	r28, r14
   17a62:	df 1d       	adc	r29, r15
_ZN10W5500Class12writeSnRX_RDEhj():
   17a64:	4d 2f       	mov	r20, r29
   17a66:	68 e2       	ldi	r22, 0x28	; 40
   17a68:	70 e0       	ldi	r23, 0x00	; 0
   17a6a:	89 2d       	mov	r24, r9
   17a6c:	0e 94 33 b9 	call	0x17266	; 0x17266 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   17a70:	4c 2f       	mov	r20, r28
   17a72:	69 e2       	ldi	r22, 0x29	; 41
   17a74:	70 e0       	ldi	r23, 0x00	; 0
   17a76:	89 2d       	mov	r24, r9
_ZN10W5500Class20recv_data_processingEhPhjh():
   17a78:	df 91       	pop	r29
   17a7a:	cf 91       	pop	r28
   17a7c:	1f 91       	pop	r17
   17a7e:	0f 91       	pop	r16
   17a80:	ff 90       	pop	r15
   17a82:	ef 90       	pop	r14
   17a84:	df 90       	pop	r13
   17a86:	cf 90       	pop	r12
   17a88:	bf 90       	pop	r11
   17a8a:	af 90       	pop	r10
   17a8c:	9f 90       	pop	r9
   17a8e:	8f 90       	pop	r8
_ZN10W5500Class12writeSnRX_RDEhj():
   17a90:	0c 94 33 b9 	jmp	0x17266	; 0x17266 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh():
   17a94:	df 91       	pop	r29
   17a96:	cf 91       	pop	r28
   17a98:	1f 91       	pop	r17
   17a9a:	0f 91       	pop	r16
   17a9c:	ff 90       	pop	r15
   17a9e:	ef 90       	pop	r14
   17aa0:	df 90       	pop	r13
   17aa2:	cf 90       	pop	r12
   17aa4:	bf 90       	pop	r11
   17aa6:	af 90       	pop	r10
   17aa8:	9f 90       	pop	r9
   17aaa:	8f 90       	pop	r8
   17aac:	08 95       	ret

00017aae <W5500Class::execCmdSn(unsigned char, SockCMD)>:
_ZN10W5500Class9execCmdSnEh7SockCMD():
   17aae:	cf 93       	push	r28
   17ab0:	c6 2f       	mov	r28, r22
_ZN10W5500Class9writeSnCREhh():
   17ab2:	61 e0       	ldi	r22, 0x01	; 1
   17ab4:	70 e0       	ldi	r23, 0x00	; 0
   17ab6:	8c 2f       	mov	r24, r28
   17ab8:	0e 94 33 b9 	call	0x17266	; 0x17266 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class8readSnCREh():
   17abc:	61 e0       	ldi	r22, 0x01	; 1
   17abe:	70 e0       	ldi	r23, 0x00	; 0
   17ac0:	8c 2f       	mov	r24, r28
   17ac2:	0e 94 26 b9 	call	0x1724c	; 0x1724c <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD():
   17ac6:	81 11       	cpse	r24, r1
   17ac8:	f9 cf       	rjmp	.-14     	; 0x17abc <W5500Class::execCmdSn(unsigned char, SockCMD)+0xe>
   17aca:	cf 91       	pop	r28
   17acc:	08 95       	ret

00017ace <_GLOBAL__sub_I_w5500>:
_ZN11SPISettings17init_AlwaysInlineEmhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:149

    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
   17ace:	e5 e3       	ldi	r30, 0x35	; 53
   17ad0:	f3 e1       	ldi	r31, 0x13	; 19
   17ad2:	80 e5       	ldi	r24, 0x50	; 80
   17ad4:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:151
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    spsr = clockDiv & SPI_2XCLOCK_MASK;
   17ad6:	81 e0       	ldi	r24, 0x01	; 1
   17ad8:	81 83       	std	Z+1, r24	; 0x01
_GLOBAL__sub_I_w5500():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:184
   17ada:	08 95       	ret

00017adc <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:98
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}
   17adc:	cf 92       	push	r12
   17ade:	df 92       	push	r13
   17ae0:	ef 92       	push	r14
   17ae2:	ff 92       	push	r15
   17ae4:	0f 93       	push	r16
   17ae6:	1f 93       	push	r17
   17ae8:	cf 93       	push	r28
   17aea:	df 93       	push	r29
   17aec:	00 d0       	rcall	.+0      	; 0x17aee <EEPROMreadFloat(unsigned int)+0x12>
   17aee:	1f 92       	push	r1
   17af0:	cd b7       	in	r28, 0x3d	; 61
   17af2:	de b7       	in	r29, 0x3e	; 62
   17af4:	7e 01       	movw	r14, r28
   17af6:	25 e0       	ldi	r18, 0x05	; 5
   17af8:	e2 0e       	add	r14, r18
   17afa:	f1 1c       	adc	r15, r1
   17afc:	8e 01       	movw	r16, r28
   17afe:	0f 5f       	subi	r16, 0xFF	; 255
   17b00:	1f 4f       	sbci	r17, 0xFF	; 255
_ZNK5EERefdeEv():
   17b02:	6c 01       	movw	r12, r24
   17b04:	c0 1a       	sub	r12, r16
   17b06:	d1 0a       	sbc	r13, r17
   17b08:	c6 01       	movw	r24, r12
   17b0a:	80 0f       	add	r24, r16
   17b0c:	91 1f       	adc	r25, r17
   17b0e:	0e 94 19 ea 	call	0x1d432	; 0x1d432 <eeprom_read_byte>
_Z15EEPROMreadFloatj():
   17b12:	f8 01       	movw	r30, r16
   17b14:	81 93       	st	Z+, r24
   17b16:	8f 01       	movw	r16, r30
   17b18:	ee 15       	cp	r30, r14
   17b1a:	ff 05       	cpc	r31, r15
   17b1c:	a9 f7       	brne	.-22     	; 0x17b08 <EEPROMreadFloat(unsigned int)+0x2c>
   17b1e:	69 81       	ldd	r22, Y+1	; 0x01
   17b20:	7a 81       	ldd	r23, Y+2	; 0x02
   17b22:	8b 81       	ldd	r24, Y+3	; 0x03
   17b24:	9c 81       	ldd	r25, Y+4	; 0x04
   17b26:	0f 90       	pop	r0
   17b28:	0f 90       	pop	r0
   17b2a:	0f 90       	pop	r0
   17b2c:	0f 90       	pop	r0
   17b2e:	df 91       	pop	r29
   17b30:	cf 91       	pop	r28
   17b32:	1f 91       	pop	r17
   17b34:	0f 91       	pop	r16
   17b36:	ff 90       	pop	r15
   17b38:	ef 90       	pop	r14
   17b3a:	df 90       	pop	r13
   17b3c:	cf 90       	pop	r12
   17b3e:	08 95       	ret

00017b40 <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
   17b40:	cf 92       	push	r12
   17b42:	df 92       	push	r13
   17b44:	ef 92       	push	r14
   17b46:	ff 92       	push	r15
   17b48:	0f 93       	push	r16
   17b4a:	1f 93       	push	r17
   17b4c:	cf 93       	push	r28
   17b4e:	df 93       	push	r29
   17b50:	00 d0       	rcall	.+0      	; 0x17b52 <EEPROMwriteFloat(unsigned int, float)+0x12>
   17b52:	1f 92       	push	r1
   17b54:	cd b7       	in	r28, 0x3d	; 61
   17b56:	de b7       	in	r29, 0x3e	; 62
   17b58:	6c 01       	movw	r12, r24
   17b5a:	49 83       	std	Y+1, r20	; 0x01
   17b5c:	5a 83       	std	Y+2, r21	; 0x02
   17b5e:	6b 83       	std	Y+3, r22	; 0x03
   17b60:	7c 83       	std	Y+4, r23	; 0x04
   17b62:	ce 01       	movw	r24, r28
   17b64:	01 96       	adiw	r24, 0x01	; 1
   17b66:	7c 01       	movw	r14, r24
   17b68:	10 e0       	ldi	r17, 0x00	; 0
   17b6a:	00 e0       	ldi	r16, 0x00	; 0
   17b6c:	f7 01       	movw	r30, r14
   17b6e:	61 91       	ld	r22, Z+
   17b70:	7f 01       	movw	r14, r30
_ZN5EERefaSEh():
   17b72:	c8 01       	movw	r24, r16
   17b74:	8c 0d       	add	r24, r12
   17b76:	9d 1d       	adc	r25, r13
   17b78:	0e 94 21 ea 	call	0x1d442	; 0x1d442 <eeprom_write_byte>
_Z16EEPROMwriteFloatjf():
   17b7c:	0f 5f       	subi	r16, 0xFF	; 255
   17b7e:	1f 4f       	sbci	r17, 0xFF	; 255
   17b80:	04 30       	cpi	r16, 0x04	; 4
   17b82:	11 05       	cpc	r17, r1
   17b84:	99 f7       	brne	.-26     	; 0x17b6c <EEPROMwriteFloat(unsigned int, float)+0x2c>
   17b86:	0f 90       	pop	r0
   17b88:	0f 90       	pop	r0
   17b8a:	0f 90       	pop	r0
   17b8c:	0f 90       	pop	r0
   17b8e:	df 91       	pop	r29
   17b90:	cf 91       	pop	r28
   17b92:	1f 91       	pop	r17
   17b94:	0f 91       	pop	r16
   17b96:	ff 90       	pop	r15
   17b98:	ef 90       	pop	r14
   17b9a:	df 90       	pop	r13
   17b9c:	cf 90       	pop	r12
   17b9e:	08 95       	ret

00017ba0 <float_to_int(float)>:
_Z12float_to_intf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102

int float_to_int(float x)
{
 return x;
   17ba0:	0e 94 90 dc 	call	0x1b920	; 0x1b920 <__fixsfsi>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
}
   17ba4:	cb 01       	movw	r24, r22
   17ba6:	08 95       	ret

00017ba8 <parseBytes(char const*, char, unsigned char*, int, int)>:
_Z10parseBytesPKccPhii():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
{
   17ba8:	8f 92       	push	r8
   17baa:	9f 92       	push	r9
   17bac:	af 92       	push	r10
   17bae:	bf 92       	push	r11
   17bb0:	cf 92       	push	r12
   17bb2:	df 92       	push	r13
   17bb4:	ef 92       	push	r14
   17bb6:	ff 92       	push	r15
   17bb8:	0f 93       	push	r16
   17bba:	1f 93       	push	r17
   17bbc:	cf 93       	push	r28
   17bbe:	df 93       	push	r29
   17bc0:	ec 01       	movw	r28, r24
   17bc2:	5a 01       	movw	r10, r20
   17bc4:	49 01       	movw	r8, r18
   17bc6:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   17bc8:	c6 2e       	mov	r12, r22
   17bca:	66 0f       	add	r22, r22
   17bcc:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109 (discriminator 1)


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
   17bce:	c7 01       	movw	r24, r14
   17bd0:	8a 19       	sub	r24, r10
   17bd2:	9b 09       	sbc	r25, r11
   17bd4:	88 15       	cp	r24, r8
   17bd6:	99 05       	cpc	r25, r9
   17bd8:	b4 f4       	brge	.+44     	; 0x17c06 <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:110
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   17bda:	a8 01       	movw	r20, r16
   17bdc:	70 e0       	ldi	r23, 0x00	; 0
   17bde:	60 e0       	ldi	r22, 0x00	; 0
   17be0:	ce 01       	movw	r24, r28
   17be2:	0e 94 b5 e0 	call	0x1c16a	; 0x1c16a <strtoul>
   17be6:	f7 01       	movw	r30, r14
   17be8:	61 93       	st	Z+, r22
   17bea:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
    str = strchr(str, sep);               // Find next separator
   17bec:	b6 01       	movw	r22, r12
   17bee:	ce 01       	movw	r24, r28
   17bf0:	0e 94 12 e2 	call	0x1c424	; 0x1c424 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:112
    if (str == NULL || *str == '\0') {
   17bf4:	00 97       	sbiw	r24, 0x00	; 0
   17bf6:	39 f0       	breq	.+14     	; 0x17c06 <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:112 (discriminator 1)
   17bf8:	fc 01       	movw	r30, r24
   17bfa:	20 81       	ld	r18, Z
   17bfc:	22 23       	and	r18, r18
   17bfe:	19 f0       	breq	.+6      	; 0x17c06 <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:115 (discriminator 2)
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
   17c00:	ec 01       	movw	r28, r24
   17c02:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109 (discriminator 2)


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
   17c04:	e4 cf       	rjmp	.-56     	; 0x17bce <parseBytes(char const*, char, unsigned char*, int, int)+0x26>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:117
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
   17c06:	df 91       	pop	r29
   17c08:	cf 91       	pop	r28
   17c0a:	1f 91       	pop	r17
   17c0c:	0f 91       	pop	r16
   17c0e:	ff 90       	pop	r15
   17c10:	ef 90       	pop	r14
   17c12:	df 90       	pop	r13
   17c14:	cf 90       	pop	r12
   17c16:	bf 90       	pop	r11
   17c18:	af 90       	pop	r10
   17c1a:	9f 90       	pop	r9
   17c1c:	8f 90       	pop	r8
   17c1e:	08 95       	ret

00017c20 <parseBytes(char const*, char, unsigned int*, int, int)>:
_Z10parseBytesPKccPjii():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121


void parseBytes(const char* str, char sep, uint16_t* bytes, int maxBytes, int base) 
{
   17c20:	8f 92       	push	r8
   17c22:	9f 92       	push	r9
   17c24:	af 92       	push	r10
   17c26:	bf 92       	push	r11
   17c28:	cf 92       	push	r12
   17c2a:	df 92       	push	r13
   17c2c:	ef 92       	push	r14
   17c2e:	ff 92       	push	r15
   17c30:	0f 93       	push	r16
   17c32:	1f 93       	push	r17
   17c34:	cf 93       	push	r28
   17c36:	df 93       	push	r29
   17c38:	ec 01       	movw	r28, r24
   17c3a:	59 01       	movw	r10, r18
   17c3c:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122
  for (int i = 0; i < maxBytes; i++) {
   17c3e:	91 2c       	mov	r9, r1
   17c40:	81 2c       	mov	r8, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   17c42:	c6 2e       	mov	r12, r22
   17c44:	66 0f       	add	r22, r22
   17c46:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122 (discriminator 1)
}


void parseBytes(const char* str, char sep, uint16_t* bytes, int maxBytes, int base) 
{
  for (int i = 0; i < maxBytes; i++) {
   17c48:	8a 14       	cp	r8, r10
   17c4a:	9b 04       	cpc	r9, r11
   17c4c:	d4 f4       	brge	.+52     	; 0x17c82 <parseBytes(char const*, char, unsigned int*, int, int)+0x62>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   17c4e:	a8 01       	movw	r20, r16
   17c50:	70 e0       	ldi	r23, 0x00	; 0
   17c52:	60 e0       	ldi	r22, 0x00	; 0
   17c54:	ce 01       	movw	r24, r28
   17c56:	0e 94 b5 e0 	call	0x1c16a	; 0x1c16a <strtoul>
   17c5a:	f7 01       	movw	r30, r14
   17c5c:	61 93       	st	Z+, r22
   17c5e:	71 93       	st	Z+, r23
   17c60:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
    str = strchr(str, sep);               // Find next separator
   17c62:	b6 01       	movw	r22, r12
   17c64:	ce 01       	movw	r24, r28
   17c66:	0e 94 12 e2 	call	0x1c424	; 0x1c424 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    if (str == NULL || *str == '\0') {
   17c6a:	00 97       	sbiw	r24, 0x00	; 0
   17c6c:	51 f0       	breq	.+20     	; 0x17c82 <parseBytes(char const*, char, unsigned int*, int, int)+0x62>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125 (discriminator 1)
   17c6e:	fc 01       	movw	r30, r24
   17c70:	20 81       	ld	r18, Z
   17c72:	22 23       	and	r18, r18
   17c74:	31 f0       	breq	.+12     	; 0x17c82 <parseBytes(char const*, char, unsigned int*, int, int)+0x62>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:128 (discriminator 2)
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
   17c76:	ec 01       	movw	r28, r24
   17c78:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122 (discriminator 2)
}


void parseBytes(const char* str, char sep, uint16_t* bytes, int maxBytes, int base) 
{
  for (int i = 0; i < maxBytes; i++) {
   17c7a:	ff ef       	ldi	r31, 0xFF	; 255
   17c7c:	8f 1a       	sub	r8, r31
   17c7e:	9f 0a       	sbc	r9, r31
   17c80:	e3 cf       	rjmp	.-58     	; 0x17c48 <parseBytes(char const*, char, unsigned int*, int, int)+0x28>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
   17c82:	df 91       	pop	r29
   17c84:	cf 91       	pop	r28
   17c86:	1f 91       	pop	r17
   17c88:	0f 91       	pop	r16
   17c8a:	ff 90       	pop	r15
   17c8c:	ef 90       	pop	r14
   17c8e:	df 90       	pop	r13
   17c90:	cf 90       	pop	r12
   17c92:	bf 90       	pop	r11
   17c94:	af 90       	pop	r10
   17c96:	9f 90       	pop	r9
   17c98:	8f 90       	pop	r8
   17c9a:	08 95       	ret

00017c9c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:135



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
   17c9c:	3f 92       	push	r3
   17c9e:	4f 92       	push	r4
   17ca0:	5f 92       	push	r5
   17ca2:	6f 92       	push	r6
   17ca4:	7f 92       	push	r7
   17ca6:	8f 92       	push	r8
   17ca8:	9f 92       	push	r9
   17caa:	af 92       	push	r10
   17cac:	bf 92       	push	r11
   17cae:	cf 92       	push	r12
   17cb0:	df 92       	push	r13
   17cb2:	ef 92       	push	r14
   17cb4:	ff 92       	push	r15
   17cb6:	0f 93       	push	r16
   17cb8:	1f 93       	push	r17
   17cba:	cf 93       	push	r28
   17cbc:	df 93       	push	r29
   17cbe:	00 d0       	rcall	.+0      	; 0x17cc0 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
   17cc0:	00 d0       	rcall	.+0      	; 0x17cc2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x26>
   17cc2:	1f 92       	push	r1
   17cc4:	1f 92       	push	r1
   17cc6:	cd b7       	in	r28, 0x3d	; 61
   17cc8:	de b7       	in	r29, 0x3e	; 62
   17cca:	5c 01       	movw	r10, r24
   17ccc:	36 2e       	mov	r3, r22
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:137
  char tmp1[8];
  str[0] = 0;
   17cce:	fc 01       	movw	r30, r24
   17cd0:	10 82       	st	Z, r1
   17cd2:	2a 01       	movw	r4, r20
   17cd4:	c2 2e       	mov	r12, r18
   17cd6:	d1 2c       	mov	r13, r1
   17cd8:	f1 2c       	mov	r15, r1
   17cda:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:140
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   17cdc:	60 2e       	mov	r6, r16
   17cde:	71 2c       	mov	r7, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   17ce0:	8e 01       	movw	r16, r28
   17ce2:	0f 5f       	subi	r16, 0xFF	; 255
   17ce4:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:144
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   17ce6:	46 01       	movw	r8, r12
   17ce8:	f1 e0       	ldi	r31, 0x01	; 1
   17cea:	8f 1a       	sub	r8, r31
   17cec:	91 08       	sbc	r9, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:138 (discriminator 1)

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   17cee:	ec 14       	cp	r14, r12
   17cf0:	fd 04       	cpc	r15, r13
   17cf2:	39 f1       	breq	.+78     	; 0x17d42 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0xa6>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:140
  {
    itoa(bytes[a], tmp1, base);
   17cf4:	f2 01       	movw	r30, r4
   17cf6:	81 91       	ld	r24, Z+
   17cf8:	2f 01       	movw	r4, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
   17cfa:	a3 01       	movw	r20, r6
   17cfc:	b8 01       	movw	r22, r16
   17cfe:	90 e0       	ldi	r25, 0x00	; 0
   17d00:	0e 94 71 e2 	call	0x1c4e2	; 0x1c4e2 <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:141
    if (strlen(tmp1) < 2)
   17d04:	f8 01       	movw	r30, r16
   17d06:	01 90       	ld	r0, Z+
   17d08:	00 20       	and	r0, r0
   17d0a:	e9 f7       	brne	.-6      	; 0x17d06 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x6a>
   17d0c:	31 97       	sbiw	r30, 0x01	; 1
   17d0e:	e0 1b       	sub	r30, r16
   17d10:	f1 0b       	sbc	r31, r17
   17d12:	32 97       	sbiw	r30, 0x02	; 2
   17d14:	28 f4       	brcc	.+10     	; 0x17d20 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x84>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:142
      strcat(str, "0");
   17d16:	60 e1       	ldi	r22, 0x10	; 16
   17d18:	79 e0       	ldi	r23, 0x09	; 9
   17d1a:	c5 01       	movw	r24, r10
   17d1c:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:143
    strcat(str, tmp1); 
   17d20:	b8 01       	movw	r22, r16
   17d22:	c5 01       	movw	r24, r10
   17d24:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:144
    if (a < maxBytes - 1)
   17d28:	e8 14       	cp	r14, r8
   17d2a:	f9 04       	cpc	r15, r9
   17d2c:	34 f4       	brge	.+12     	; 0x17d3a <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x9e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:146
    {
      tmp1[0] = sep;
   17d2e:	39 82       	std	Y+1, r3	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:147
      tmp1[1] = 0;
   17d30:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:148
      strcat(str, tmp1);
   17d32:	b8 01       	movw	r22, r16
   17d34:	c5 01       	movw	r24, r10
   17d36:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <strcat>
   17d3a:	ff ef       	ldi	r31, 0xFF	; 255
   17d3c:	ef 1a       	sub	r14, r31
   17d3e:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:138 (discriminator 2)

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   17d40:	d6 cf       	rjmp	.-84     	; 0x17cee <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x52>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:151
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   17d42:	28 96       	adiw	r28, 0x08	; 8
   17d44:	0f b6       	in	r0, 0x3f	; 63
   17d46:	f8 94       	cli
   17d48:	de bf       	out	0x3e, r29	; 62
   17d4a:	0f be       	out	0x3f, r0	; 63
   17d4c:	cd bf       	out	0x3d, r28	; 61
   17d4e:	df 91       	pop	r29
   17d50:	cf 91       	pop	r28
   17d52:	1f 91       	pop	r17
   17d54:	0f 91       	pop	r16
   17d56:	ff 90       	pop	r15
   17d58:	ef 90       	pop	r14
   17d5a:	df 90       	pop	r13
   17d5c:	cf 90       	pop	r12
   17d5e:	bf 90       	pop	r11
   17d60:	af 90       	pop	r10
   17d62:	9f 90       	pop	r9
   17d64:	8f 90       	pop	r8
   17d66:	7f 90       	pop	r7
   17d68:	6f 90       	pop	r6
   17d6a:	5f 90       	pop	r5
   17d6c:	4f 90       	pop	r4
   17d6e:	3f 90       	pop	r3
   17d70:	08 95       	ret

00017d72 <PID::SetTunings(double, double, double, int)>:
_ZN3PID10SetTuningsEdddi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:103
 * This function allows the controller's dynamic performance to be adjusted.
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   17d72:	4f 92       	push	r4
   17d74:	5f 92       	push	r5
   17d76:	6f 92       	push	r6
   17d78:	7f 92       	push	r7
   17d7a:	8f 92       	push	r8
   17d7c:	9f 92       	push	r9
   17d7e:	af 92       	push	r10
   17d80:	bf 92       	push	r11
   17d82:	cf 92       	push	r12
   17d84:	df 92       	push	r13
   17d86:	ef 92       	push	r14
   17d88:	ff 92       	push	r15
   17d8a:	0f 93       	push	r16
   17d8c:	1f 93       	push	r17
   17d8e:	cf 93       	push	r28
   17d90:	df 93       	push	r29
   17d92:	00 d0       	rcall	.+0      	; 0x17d94 <PID::SetTunings(double, double, double, int)+0x22>
   17d94:	00 d0       	rcall	.+0      	; 0x17d96 <PID::SetTunings(double, double, double, int)+0x24>
   17d96:	cd b7       	in	r28, 0x3d	; 61
   17d98:	de b7       	in	r29, 0x3e	; 62
   17d9a:	9e 83       	std	Y+6, r25	; 0x06
   17d9c:	8d 83       	std	Y+5, r24	; 0x05
   17d9e:	49 83       	std	Y+1, r20	; 0x01
   17da0:	5a 83       	std	Y+2, r21	; 0x02
   17da2:	6b 83       	std	Y+3, r22	; 0x03
   17da4:	7c 83       	std	Y+4, r23	; 0x04
   17da6:	28 01       	movw	r4, r16
   17da8:	39 01       	movw	r6, r18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
   if (Kp<0 || Ki<0 || Kd<0) return;
   17daa:	20 e0       	ldi	r18, 0x00	; 0
   17dac:	30 e0       	ldi	r19, 0x00	; 0
   17dae:	a9 01       	movw	r20, r18
   17db0:	69 81       	ldd	r22, Y+1	; 0x01
   17db2:	7a 81       	ldd	r23, Y+2	; 0x02
   17db4:	8b 81       	ldd	r24, Y+3	; 0x03
   17db6:	9c 81       	ldd	r25, Y+4	; 0x04
   17db8:	0e 94 19 dc 	call	0x1b832	; 0x1b832 <__cmpsf2>
   17dbc:	87 fd       	sbrc	r24, 7
   17dbe:	97 c0       	rjmp	.+302    	; 0x17eee <PID::SetTunings(double, double, double, int)+0x17c>
   17dc0:	20 e0       	ldi	r18, 0x00	; 0
   17dc2:	30 e0       	ldi	r19, 0x00	; 0
   17dc4:	a9 01       	movw	r20, r18
   17dc6:	c3 01       	movw	r24, r6
   17dc8:	b8 01       	movw	r22, r16
   17dca:	0e 94 19 dc 	call	0x1b832	; 0x1b832 <__cmpsf2>
   17dce:	87 fd       	sbrc	r24, 7
   17dd0:	8e c0       	rjmp	.+284    	; 0x17eee <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104 (discriminator 2)
   17dd2:	20 e0       	ldi	r18, 0x00	; 0
   17dd4:	30 e0       	ldi	r19, 0x00	; 0
   17dd6:	a9 01       	movw	r20, r18
   17dd8:	c7 01       	movw	r24, r14
   17dda:	b6 01       	movw	r22, r12
   17ddc:	0e 94 19 dc 	call	0x1b832	; 0x1b832 <__cmpsf2>
   17de0:	87 fd       	sbrc	r24, 7
   17de2:	85 c0       	rjmp	.+266    	; 0x17eee <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106

   pOn = POn;
   17de4:	ad 81       	ldd	r26, Y+5	; 0x05
   17de6:	be 81       	ldd	r27, Y+6	; 0x06
   17de8:	5b 96       	adiw	r26, 0x1b	; 27
   17dea:	bc 92       	st	X, r11
   17dec:	ae 92       	st	-X, r10
   17dee:	5a 97       	sbiw	r26, 0x1a	; 26
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
   17df0:	81 e0       	ldi	r24, 0x01	; 1
   17df2:	aa 94       	dec	r10
   17df4:	ab 28       	or	r10, r11
   17df6:	09 f0       	breq	.+2      	; 0x17dfa <PID::SetTunings(double, double, double, int)+0x88>
   17df8:	80 e0       	ldi	r24, 0x00	; 0
   17dfa:	ed 81       	ldd	r30, Y+5	; 0x05
   17dfc:	fe 81       	ldd	r31, Y+6	; 0x06
   17dfe:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   17e00:	89 81       	ldd	r24, Y+1	; 0x01
   17e02:	9a 81       	ldd	r25, Y+2	; 0x02
   17e04:	ab 81       	ldd	r26, Y+3	; 0x03
   17e06:	bc 81       	ldd	r27, Y+4	; 0x04
   17e08:	80 83       	st	Z, r24
   17e0a:	91 83       	std	Z+1, r25	; 0x01
   17e0c:	a2 83       	std	Z+2, r26	; 0x02
   17e0e:	b3 83       	std	Z+3, r27	; 0x03
   17e10:	44 82       	std	Z+4, r4	; 0x04
   17e12:	55 82       	std	Z+5, r5	; 0x05
   17e14:	66 82       	std	Z+6, r6	; 0x06
   17e16:	77 82       	std	Z+7, r7	; 0x07
   17e18:	c0 86       	std	Z+8, r12	; 0x08
   17e1a:	d1 86       	std	Z+9, r13	; 0x09
   17e1c:	e2 86       	std	Z+10, r14	; 0x0a
   17e1e:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
   17e20:	66 a5       	ldd	r22, Z+46	; 0x2e
   17e22:	77 a5       	ldd	r23, Z+47	; 0x2f
   17e24:	80 a9       	ldd	r24, Z+48	; 0x30
   17e26:	91 a9       	ldd	r25, Z+49	; 0x31
   17e28:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
   17e2c:	20 e0       	ldi	r18, 0x00	; 0
   17e2e:	30 e0       	ldi	r19, 0x00	; 0
   17e30:	4a e7       	ldi	r20, 0x7A	; 122
   17e32:	54 e4       	ldi	r21, 0x44	; 68
   17e34:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
   17e38:	4b 01       	movw	r8, r22
   17e3a:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
   17e3c:	89 81       	ldd	r24, Y+1	; 0x01
   17e3e:	9a 81       	ldd	r25, Y+2	; 0x02
   17e40:	ab 81       	ldd	r26, Y+3	; 0x03
   17e42:	bc 81       	ldd	r27, Y+4	; 0x04
   17e44:	ed 81       	ldd	r30, Y+5	; 0x05
   17e46:	fe 81       	ldd	r31, Y+6	; 0x06
   17e48:	84 87       	std	Z+12, r24	; 0x0c
   17e4a:	95 87       	std	Z+13, r25	; 0x0d
   17e4c:	a6 87       	std	Z+14, r26	; 0x0e
   17e4e:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
   17e50:	a5 01       	movw	r20, r10
   17e52:	94 01       	movw	r18, r8
   17e54:	c3 01       	movw	r24, r6
   17e56:	b2 01       	movw	r22, r4
   17e58:	0e 94 7d dd 	call	0x1bafa	; 0x1bafa <__mulsf3>
   17e5c:	2b 01       	movw	r4, r22
   17e5e:	3c 01       	movw	r6, r24
   17e60:	ad 81       	ldd	r26, Y+5	; 0x05
   17e62:	be 81       	ldd	r27, Y+6	; 0x06
   17e64:	50 96       	adiw	r26, 0x10	; 16
   17e66:	4d 92       	st	X+, r4
   17e68:	5d 92       	st	X+, r5
   17e6a:	6d 92       	st	X+, r6
   17e6c:	7c 92       	st	X, r7
   17e6e:	53 97       	sbiw	r26, 0x13	; 19
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
   17e70:	a5 01       	movw	r20, r10
   17e72:	94 01       	movw	r18, r8
   17e74:	c7 01       	movw	r24, r14
   17e76:	b6 01       	movw	r22, r12
   17e78:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
   17e7c:	6b 01       	movw	r12, r22
   17e7e:	7c 01       	movw	r14, r24
   17e80:	ed 81       	ldd	r30, Y+5	; 0x05
   17e82:	fe 81       	ldd	r31, Y+6	; 0x06
   17e84:	c4 8a       	std	Z+20, r12	; 0x14
   17e86:	d5 8a       	std	Z+21, r13	; 0x15
   17e88:	e6 8a       	std	Z+22, r14	; 0x16
   17e8a:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
   17e8c:	80 8d       	ldd	r24, Z+24	; 0x18
   17e8e:	91 8d       	ldd	r25, Z+25	; 0x19
   17e90:	01 97       	sbiw	r24, 0x01	; 1
   17e92:	69 f5       	brne	.+90     	; 0x17eee <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
   17e94:	29 81       	ldd	r18, Y+1	; 0x01
   17e96:	3a 81       	ldd	r19, Y+2	; 0x02
   17e98:	4b 81       	ldd	r20, Y+3	; 0x03
   17e9a:	5c 81       	ldd	r21, Y+4	; 0x04
   17e9c:	60 e0       	ldi	r22, 0x00	; 0
   17e9e:	70 e0       	ldi	r23, 0x00	; 0
   17ea0:	cb 01       	movw	r24, r22
   17ea2:	0e 94 ac db 	call	0x1b758	; 0x1b758 <__subsf3>
   17ea6:	ad 81       	ldd	r26, Y+5	; 0x05
   17ea8:	be 81       	ldd	r27, Y+6	; 0x06
   17eaa:	1c 96       	adiw	r26, 0x0c	; 12
   17eac:	6d 93       	st	X+, r22
   17eae:	7d 93       	st	X+, r23
   17eb0:	8d 93       	st	X+, r24
   17eb2:	9c 93       	st	X, r25
   17eb4:	1f 97       	sbiw	r26, 0x0f	; 15
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
   17eb6:	a3 01       	movw	r20, r6
   17eb8:	92 01       	movw	r18, r4
   17eba:	60 e0       	ldi	r22, 0x00	; 0
   17ebc:	70 e0       	ldi	r23, 0x00	; 0
   17ebe:	cb 01       	movw	r24, r22
   17ec0:	0e 94 ac db 	call	0x1b758	; 0x1b758 <__subsf3>
   17ec4:	ed 81       	ldd	r30, Y+5	; 0x05
   17ec6:	fe 81       	ldd	r31, Y+6	; 0x06
   17ec8:	60 8b       	std	Z+16, r22	; 0x10
   17eca:	71 8b       	std	Z+17, r23	; 0x11
   17ecc:	82 8b       	std	Z+18, r24	; 0x12
   17ece:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
   17ed0:	a7 01       	movw	r20, r14
   17ed2:	96 01       	movw	r18, r12
   17ed4:	60 e0       	ldi	r22, 0x00	; 0
   17ed6:	70 e0       	ldi	r23, 0x00	; 0
   17ed8:	cb 01       	movw	r24, r22
   17eda:	0e 94 ac db 	call	0x1b758	; 0x1b758 <__subsf3>
   17ede:	ad 81       	ldd	r26, Y+5	; 0x05
   17ee0:	be 81       	ldd	r27, Y+6	; 0x06
   17ee2:	54 96       	adiw	r26, 0x14	; 20
   17ee4:	6d 93       	st	X+, r22
   17ee6:	7d 93       	st	X+, r23
   17ee8:	8d 93       	st	X+, r24
   17eea:	9c 93       	st	X, r25
   17eec:	57 97       	sbiw	r26, 0x17	; 23
/home/saric/Arduino/libraries/PID/PID_v1.cpp:122
   }
}
   17eee:	26 96       	adiw	r28, 0x06	; 6
   17ef0:	0f b6       	in	r0, 0x3f	; 63
   17ef2:	f8 94       	cli
   17ef4:	de bf       	out	0x3e, r29	; 62
   17ef6:	0f be       	out	0x3f, r0	; 63
   17ef8:	cd bf       	out	0x3d, r28	; 61
   17efa:	df 91       	pop	r29
   17efc:	cf 91       	pop	r28
   17efe:	1f 91       	pop	r17
   17f00:	0f 91       	pop	r16
   17f02:	ff 90       	pop	r15
   17f04:	ef 90       	pop	r14
   17f06:	df 90       	pop	r13
   17f08:	cf 90       	pop	r12
   17f0a:	bf 90       	pop	r11
   17f0c:	af 90       	pop	r10
   17f0e:	9f 90       	pop	r9
   17f10:	8f 90       	pop	r8
   17f12:	7f 90       	pop	r7
   17f14:	6f 90       	pop	r6
   17f16:	5f 90       	pop	r5
   17f18:	4f 90       	pop	r4
   17f1a:	08 95       	ret

00017f1c <PID::SetTunings(double, double, double)>:
_ZN3PID10SetTuningsEddd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:127

/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
   17f1c:	af 92       	push	r10
   17f1e:	bf 92       	push	r11
   17f20:	cf 92       	push	r12
   17f22:	df 92       	push	r13
   17f24:	ef 92       	push	r14
   17f26:	ff 92       	push	r15
   17f28:	0f 93       	push	r16
   17f2a:	1f 93       	push	r17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:128
    SetTunings(Kp, Ki, Kd, pOn); 
   17f2c:	fc 01       	movw	r30, r24
   17f2e:	a2 8c       	ldd	r10, Z+26	; 0x1a
   17f30:	b3 8c       	ldd	r11, Z+27	; 0x1b
   17f32:	0e 94 b9 be 	call	0x17d72	; 0x17d72 <PID::SetTunings(double, double, double, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:129
}
   17f36:	1f 91       	pop	r17
   17f38:	0f 91       	pop	r16
   17f3a:	ff 90       	pop	r15
   17f3c:	ef 90       	pop	r14
   17f3e:	df 90       	pop	r13
   17f40:	cf 90       	pop	r12
   17f42:	bf 90       	pop	r11
   17f44:	af 90       	pop	r10
   17f46:	08 95       	ret

00017f48 <PID::SetSampleTime(int)>:
_ZN3PID13SetSampleTimeEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:135

/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   17f48:	8f 92       	push	r8
   17f4a:	9f 92       	push	r9
   17f4c:	af 92       	push	r10
   17f4e:	bf 92       	push	r11
   17f50:	cf 92       	push	r12
   17f52:	df 92       	push	r13
   17f54:	ef 92       	push	r14
   17f56:	ff 92       	push	r15
   17f58:	cf 93       	push	r28
   17f5a:	df 93       	push	r29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
   if (NewSampleTime > 0)
   17f5c:	16 16       	cp	r1, r22
   17f5e:	17 06       	cpc	r1, r23
   17f60:	ac f5       	brge	.+106    	; 0x17fcc <PID::SetSampleTime(int)+0x84>
   17f62:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
   17f64:	6b 01       	movw	r12, r22
   17f66:	77 0f       	add	r23, r23
   17f68:	ee 08       	sbc	r14, r14
   17f6a:	ff 08       	sbc	r15, r15
   17f6c:	c7 01       	movw	r24, r14
   17f6e:	b6 01       	movw	r22, r12
   17f70:	0e 94 c8 dc 	call	0x1b990	; 0x1b990 <__floatsisf>
   17f74:	4b 01       	movw	r8, r22
   17f76:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
   17f78:	6e a5       	ldd	r22, Y+46	; 0x2e
   17f7a:	7f a5       	ldd	r23, Y+47	; 0x2f
   17f7c:	88 a9       	ldd	r24, Y+48	; 0x30
   17f7e:	99 a9       	ldd	r25, Y+49	; 0x31
   17f80:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
   17f84:	9b 01       	movw	r18, r22
   17f86:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
   17f88:	c5 01       	movw	r24, r10
   17f8a:	b4 01       	movw	r22, r8
   17f8c:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
   17f90:	4b 01       	movw	r8, r22
   17f92:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
   17f94:	ac 01       	movw	r20, r24
   17f96:	9b 01       	movw	r18, r22
   17f98:	68 89       	ldd	r22, Y+16	; 0x10
   17f9a:	79 89       	ldd	r23, Y+17	; 0x11
   17f9c:	8a 89       	ldd	r24, Y+18	; 0x12
   17f9e:	9b 89       	ldd	r25, Y+19	; 0x13
   17fa0:	0e 94 7d dd 	call	0x1bafa	; 0x1bafa <__mulsf3>
   17fa4:	68 8b       	std	Y+16, r22	; 0x10
   17fa6:	79 8b       	std	Y+17, r23	; 0x11
   17fa8:	8a 8b       	std	Y+18, r24	; 0x12
   17faa:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
   17fac:	a5 01       	movw	r20, r10
   17fae:	94 01       	movw	r18, r8
   17fb0:	6c 89       	ldd	r22, Y+20	; 0x14
   17fb2:	7d 89       	ldd	r23, Y+21	; 0x15
   17fb4:	8e 89       	ldd	r24, Y+22	; 0x16
   17fb6:	9f 89       	ldd	r25, Y+23	; 0x17
   17fb8:	0e 94 1e dc 	call	0x1b83c	; 0x1b83c <__divsf3>
   17fbc:	6c 8b       	std	Y+20, r22	; 0x14
   17fbe:	7d 8b       	std	Y+21, r23	; 0x15
   17fc0:	8e 8b       	std	Y+22, r24	; 0x16
   17fc2:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
   17fc4:	ce a6       	std	Y+46, r12	; 0x2e
   17fc6:	df a6       	std	Y+47, r13	; 0x2f
   17fc8:	e8 aa       	std	Y+48, r14	; 0x30
   17fca:	f9 aa       	std	Y+49, r15	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:144
   }
}
   17fcc:	df 91       	pop	r29
   17fce:	cf 91       	pop	r28
   17fd0:	ff 90       	pop	r15
   17fd2:	ef 90       	pop	r14
   17fd4:	df 90       	pop	r13
   17fd6:	cf 90       	pop	r12
   17fd8:	bf 90       	pop	r11
   17fda:	af 90       	pop	r10
   17fdc:	9f 90       	pop	r9
   17fde:	8f 90       	pop	r8
   17fe0:	08 95       	ret

00017fe2 <PID::SetOutputLimits(double, double)>:
_ZN3PID15SetOutputLimitsEdd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:155
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   17fe2:	2f 92       	push	r2
   17fe4:	3f 92       	push	r3
   17fe6:	4f 92       	push	r4
   17fe8:	5f 92       	push	r5
   17fea:	6f 92       	push	r6
   17fec:	7f 92       	push	r7
   17fee:	8f 92       	push	r8
   17ff0:	9f 92       	push	r9
   17ff2:	af 92       	push	r10
   17ff4:	bf 92       	push	r11
   17ff6:	cf 92       	push	r12
   17ff8:	df 92       	push	r13
   17ffa:	ef 92       	push	r14
   17ffc:	ff 92       	push	r15
   17ffe:	0f 93       	push	r16
   18000:	1f 93       	push	r17
   18002:	cf 93       	push	r28
   18004:	df 93       	push	r29
   18006:	ec 01       	movw	r28, r24
   18008:	6a 01       	movw	r12, r20
   1800a:	7b 01       	movw	r14, r22
   1800c:	48 01       	movw	r8, r16
   1800e:	59 01       	movw	r10, r18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:156
   if(Min >= Max) return;
   18010:	a9 01       	movw	r20, r18
   18012:	98 01       	movw	r18, r16
   18014:	cb 01       	movw	r24, r22
   18016:	b6 01       	movw	r22, r12
   18018:	0e 94 78 dd 	call	0x1baf0	; 0x1baf0 <__gesf2>
   1801c:	87 ff       	sbrs	r24, 7
   1801e:	4f c0       	rjmp	.+158    	; 0x180be <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
   outMin = Min;
   18020:	ca aa       	std	Y+50, r12	; 0x32
   18022:	db aa       	std	Y+51, r13	; 0x33
   18024:	ec aa       	std	Y+52, r14	; 0x34
   18026:	fd aa       	std	Y+53, r15	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   18028:	8e aa       	std	Y+54, r8	; 0x36
   1802a:	9f aa       	std	Y+55, r9	; 0x37
   1802c:	a8 ae       	std	Y+56, r10	; 0x38
   1802e:	b9 ae       	std	Y+57, r11	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:160

   if(inAuto)
   18030:	8a ad       	ldd	r24, Y+58	; 0x3a
   18032:	88 23       	and	r24, r24
   18034:	09 f4       	brne	.+2      	; 0x18038 <PID::SetOutputLimits(double, double)+0x56>
   18036:	43 c0       	rjmp	.+134    	; 0x180be <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   18038:	2e 8c       	ldd	r2, Y+30	; 0x1e
   1803a:	3f 8c       	ldd	r3, Y+31	; 0x1f
   1803c:	f1 01       	movw	r30, r2
   1803e:	40 80       	ld	r4, Z
   18040:	51 80       	ldd	r5, Z+1	; 0x01
   18042:	62 80       	ldd	r6, Z+2	; 0x02
   18044:	73 80       	ldd	r7, Z+3	; 0x03
   18046:	a3 01       	movw	r20, r6
   18048:	92 01       	movw	r18, r4
   1804a:	c5 01       	movw	r24, r10
   1804c:	b8 01       	movw	r22, r16
   1804e:	0e 94 19 dc 	call	0x1b832	; 0x1b832 <__cmpsf2>
   18052:	87 ff       	sbrs	r24, 7
   18054:	1a c0       	rjmp	.+52     	; 0x1808a <PID::SetOutputLimits(double, double)+0xa8>
   18056:	f1 01       	movw	r30, r2
   18058:	80 82       	st	Z, r8
   1805a:	91 82       	std	Z+1, r9	; 0x01
   1805c:	a2 82       	std	Z+2, r10	; 0x02
   1805e:	b3 82       	std	Z+3, r11	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
   18060:	8e a0       	ldd	r8, Y+38	; 0x26
   18062:	9f a0       	ldd	r9, Y+39	; 0x27
   18064:	a8 a4       	ldd	r10, Y+40	; 0x28
   18066:	b9 a4       	ldd	r11, Y+41	; 0x29
   18068:	ce a8       	ldd	r12, Y+54	; 0x36
   1806a:	df a8       	ldd	r13, Y+55	; 0x37
   1806c:	e8 ac       	ldd	r14, Y+56	; 0x38
   1806e:	f9 ac       	ldd	r15, Y+57	; 0x39
   18070:	a7 01       	movw	r20, r14
   18072:	96 01       	movw	r18, r12
   18074:	c5 01       	movw	r24, r10
   18076:	b4 01       	movw	r22, r8
   18078:	0e 94 78 dd 	call	0x1baf0	; 0x1baf0 <__gesf2>
   1807c:	18 16       	cp	r1, r24
   1807e:	9c f4       	brge	.+38     	; 0x180a6 <PID::SetOutputLimits(double, double)+0xc4>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
   18080:	ce a2       	std	Y+38, r12	; 0x26
   18082:	df a2       	std	Y+39, r13	; 0x27
   18084:	e8 a6       	std	Y+40, r14	; 0x28
   18086:	f9 a6       	std	Y+41, r15	; 0x29
   18088:	1a c0       	rjmp	.+52     	; 0x180be <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
   1808a:	a3 01       	movw	r20, r6
   1808c:	92 01       	movw	r18, r4
   1808e:	c7 01       	movw	r24, r14
   18090:	b6 01       	movw	r22, r12
   18092:	0e 94 78 dd 	call	0x1baf0	; 0x1baf0 <__gesf2>
   18096:	18 16       	cp	r1, r24
   18098:	1c f7       	brge	.-58     	; 0x18060 <PID::SetOutputLimits(double, double)+0x7e>
   1809a:	f1 01       	movw	r30, r2
   1809c:	c0 82       	st	Z, r12
   1809e:	d1 82       	std	Z+1, r13	; 0x01
   180a0:	e2 82       	std	Z+2, r14	; 0x02
   180a2:	f3 82       	std	Z+3, r15	; 0x03
   180a4:	dd cf       	rjmp	.-70     	; 0x18060 <PID::SetOutputLimits(double, double)+0x7e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   180a6:	ca a8       	ldd	r12, Y+50	; 0x32
   180a8:	db a8       	ldd	r13, Y+51	; 0x33
   180aa:	ec a8       	ldd	r14, Y+52	; 0x34
   180ac:	fd a8       	ldd	r15, Y+53	; 0x35
   180ae:	a7 01       	movw	r20, r14
   180b0:	96 01       	movw	r18, r12
   180b2:	c5 01       	movw	r24, r10
   180b4:	b4 01       	movw	r22, r8
   180b6:	0e 94 19 dc 	call	0x1b832	; 0x1b832 <__cmpsf2>
   180ba:	87 fd       	sbrc	r24, 7
   180bc:	e1 cf       	rjmp	.-62     	; 0x18080 <PID::SetOutputLimits(double, double)+0x9e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:168
   }
}
   180be:	df 91       	pop	r29
   180c0:	cf 91       	pop	r28
   180c2:	1f 91       	pop	r17
   180c4:	0f 91       	pop	r16
   180c6:	ff 90       	pop	r15
   180c8:	ef 90       	pop	r14
   180ca:	df 90       	pop	r13
   180cc:	cf 90       	pop	r12
   180ce:	bf 90       	pop	r11
   180d0:	af 90       	pop	r10
   180d2:	9f 90       	pop	r9
   180d4:	8f 90       	pop	r8
   180d6:	7f 90       	pop	r7
   180d8:	6f 90       	pop	r6
   180da:	5f 90       	pop	r5
   180dc:	4f 90       	pop	r4
   180de:	3f 90       	pop	r3
   180e0:	2f 90       	pop	r2
   180e2:	08 95       	ret

000180e4 <PID::Initialize()>:
_ZN3PID10InitializeEv():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:190
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   180e4:	8f 92       	push	r8
   180e6:	9f 92       	push	r9
   180e8:	af 92       	push	r10
   180ea:	bf 92       	push	r11
   180ec:	cf 92       	push	r12
   180ee:	df 92       	push	r13
   180f0:	ef 92       	push	r14
   180f2:	ff 92       	push	r15
   180f4:	cf 93       	push	r28
   180f6:	df 93       	push	r29
   180f8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
   outputSum = *myOutput;
   180fa:	ee 8d       	ldd	r30, Y+30	; 0x1e
   180fc:	ff 8d       	ldd	r31, Y+31	; 0x1f
   180fe:	c0 80       	ld	r12, Z
   18100:	d1 80       	ldd	r13, Z+1	; 0x01
   18102:	e2 80       	ldd	r14, Z+2	; 0x02
   18104:	f3 80       	ldd	r15, Z+3	; 0x03
   18106:	ce a2       	std	Y+38, r12	; 0x26
   18108:	df a2       	std	Y+39, r13	; 0x27
   1810a:	e8 a6       	std	Y+40, r14	; 0x28
   1810c:	f9 a6       	std	Y+41, r15	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
   1810e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   18110:	fd 8d       	ldd	r31, Y+29	; 0x1d
   18112:	80 81       	ld	r24, Z
   18114:	91 81       	ldd	r25, Z+1	; 0x01
   18116:	a2 81       	ldd	r26, Z+2	; 0x02
   18118:	b3 81       	ldd	r27, Z+3	; 0x03
   1811a:	8a a7       	std	Y+42, r24	; 0x2a
   1811c:	9b a7       	std	Y+43, r25	; 0x2b
   1811e:	ac a7       	std	Y+44, r26	; 0x2c
   18120:	bd a7       	std	Y+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
   18122:	8e a8       	ldd	r8, Y+54	; 0x36
   18124:	9f a8       	ldd	r9, Y+55	; 0x37
   18126:	a8 ac       	ldd	r10, Y+56	; 0x38
   18128:	b9 ac       	ldd	r11, Y+57	; 0x39
   1812a:	a5 01       	movw	r20, r10
   1812c:	94 01       	movw	r18, r8
   1812e:	c7 01       	movw	r24, r14
   18130:	b6 01       	movw	r22, r12
   18132:	0e 94 78 dd 	call	0x1baf0	; 0x1baf0 <__gesf2>
   18136:	18 16       	cp	r1, r24
   18138:	2c f4       	brge	.+10     	; 0x18144 <PID::Initialize()+0x60>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194 (discriminator 1)
   else if(outputSum < outMin) outputSum = outMin;
   1813a:	8e a2       	std	Y+38, r8	; 0x26
   1813c:	9f a2       	std	Y+39, r9	; 0x27
   1813e:	a8 a6       	std	Y+40, r10	; 0x28
   18140:	b9 a6       	std	Y+41, r11	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:195 (discriminator 1)
}
   18142:	0c c0       	rjmp	.+24     	; 0x1815c <PID::Initialize()+0x78>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
   18144:	8a a8       	ldd	r8, Y+50	; 0x32
   18146:	9b a8       	ldd	r9, Y+51	; 0x33
   18148:	ac a8       	ldd	r10, Y+52	; 0x34
   1814a:	bd a8       	ldd	r11, Y+53	; 0x35
   1814c:	a5 01       	movw	r20, r10
   1814e:	94 01       	movw	r18, r8
   18150:	c7 01       	movw	r24, r14
   18152:	b6 01       	movw	r22, r12
   18154:	0e 94 19 dc 	call	0x1b832	; 0x1b832 <__cmpsf2>
   18158:	87 fd       	sbrc	r24, 7
   1815a:	ef cf       	rjmp	.-34     	; 0x1813a <PID::Initialize()+0x56>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:195
}
   1815c:	df 91       	pop	r29
   1815e:	cf 91       	pop	r28
   18160:	ff 90       	pop	r15
   18162:	ef 90       	pop	r14
   18164:	df 90       	pop	r13
   18166:	cf 90       	pop	r12
   18168:	bf 90       	pop	r11
   1816a:	af 90       	pop	r10
   1816c:	9f 90       	pop	r9
   1816e:	8f 90       	pop	r8
   18170:	08 95       	ret

00018172 <PID::SetMode(int)>:
_ZN3PID7SetModeEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:176
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
   18172:	1f 93       	push	r17
   18174:	cf 93       	push	r28
   18176:	df 93       	push	r29
   18178:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:177
    bool newAuto = (Mode == AUTOMATIC);
   1817a:	11 e0       	ldi	r17, 0x01	; 1
   1817c:	61 30       	cpi	r22, 0x01	; 1
   1817e:	71 05       	cpc	r23, r1
   18180:	09 f0       	breq	.+2      	; 0x18184 <PID::SetMode(int)+0x12>
   18182:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
    if(newAuto && !inAuto)
   18184:	61 30       	cpi	r22, 0x01	; 1
   18186:	71 05       	cpc	r23, r1
   18188:	31 f4       	brne	.+12     	; 0x18196 <PID::SetMode(int)+0x24>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178 (discriminator 1)
   1818a:	8a ad       	ldd	r24, Y+58	; 0x3a
   1818c:	81 11       	cpse	r24, r1
   1818e:	03 c0       	rjmp	.+6      	; 0x18196 <PID::SetMode(int)+0x24>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:180
    {  /*we just went from manual to auto*/
        PID::Initialize();
   18190:	ce 01       	movw	r24, r28
   18192:	0e 94 72 c0 	call	0x180e4	; 0x180e4 <PID::Initialize()>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    }
    inAuto = newAuto;
   18196:	1a af       	std	Y+58, r17	; 0x3a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:183
}
   18198:	df 91       	pop	r29
   1819a:	cf 91       	pop	r28
   1819c:	1f 91       	pop	r17
   1819e:	08 95       	ret

000181a0 <PID::SetControllerDirection(int)>:
_ZN3PID22SetControllerDirectionEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:204
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
   181a0:	0f 93       	push	r16
   181a2:	1f 93       	push	r17
   181a4:	cf 93       	push	r28
   181a6:	df 93       	push	r29
   181a8:	ec 01       	movw	r28, r24
   181aa:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205
   if(inAuto && Direction !=controllerDirection)
   181ac:	8a ad       	ldd	r24, Y+58	; 0x3a
   181ae:	88 23       	and	r24, r24
   181b0:	61 f1       	breq	.+88     	; 0x1820a <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205 (discriminator 1)
   181b2:	88 8d       	ldd	r24, Y+24	; 0x18
   181b4:	99 8d       	ldd	r25, Y+25	; 0x19
   181b6:	86 17       	cp	r24, r22
   181b8:	97 07       	cpc	r25, r23
   181ba:	39 f1       	breq	.+78     	; 0x1820a <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:207
   {
	    kp = (0 - kp);
   181bc:	2c 85       	ldd	r18, Y+12	; 0x0c
   181be:	3d 85       	ldd	r19, Y+13	; 0x0d
   181c0:	4e 85       	ldd	r20, Y+14	; 0x0e
   181c2:	5f 85       	ldd	r21, Y+15	; 0x0f
   181c4:	60 e0       	ldi	r22, 0x00	; 0
   181c6:	70 e0       	ldi	r23, 0x00	; 0
   181c8:	cb 01       	movw	r24, r22
   181ca:	0e 94 ac db 	call	0x1b758	; 0x1b758 <__subsf3>
   181ce:	6c 87       	std	Y+12, r22	; 0x0c
   181d0:	7d 87       	std	Y+13, r23	; 0x0d
   181d2:	8e 87       	std	Y+14, r24	; 0x0e
   181d4:	9f 87       	std	Y+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:208
      ki = (0 - ki);
   181d6:	28 89       	ldd	r18, Y+16	; 0x10
   181d8:	39 89       	ldd	r19, Y+17	; 0x11
   181da:	4a 89       	ldd	r20, Y+18	; 0x12
   181dc:	5b 89       	ldd	r21, Y+19	; 0x13
   181de:	60 e0       	ldi	r22, 0x00	; 0
   181e0:	70 e0       	ldi	r23, 0x00	; 0
   181e2:	cb 01       	movw	r24, r22
   181e4:	0e 94 ac db 	call	0x1b758	; 0x1b758 <__subsf3>
   181e8:	68 8b       	std	Y+16, r22	; 0x10
   181ea:	79 8b       	std	Y+17, r23	; 0x11
   181ec:	8a 8b       	std	Y+18, r24	; 0x12
   181ee:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:209
      kd = (0 - kd);
   181f0:	2c 89       	ldd	r18, Y+20	; 0x14
   181f2:	3d 89       	ldd	r19, Y+21	; 0x15
   181f4:	4e 89       	ldd	r20, Y+22	; 0x16
   181f6:	5f 89       	ldd	r21, Y+23	; 0x17
   181f8:	60 e0       	ldi	r22, 0x00	; 0
   181fa:	70 e0       	ldi	r23, 0x00	; 0
   181fc:	cb 01       	movw	r24, r22
   181fe:	0e 94 ac db 	call	0x1b758	; 0x1b758 <__subsf3>
   18202:	6c 8b       	std	Y+20, r22	; 0x14
   18204:	7d 8b       	std	Y+21, r23	; 0x15
   18206:	8e 8b       	std	Y+22, r24	; 0x16
   18208:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   }
   controllerDirection = Direction;
   1820a:	19 8f       	std	Y+25, r17	; 0x19
   1820c:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:212
}
   1820e:	df 91       	pop	r29
   18210:	cf 91       	pop	r28
   18212:	1f 91       	pop	r17
   18214:	0f 91       	pop	r16
   18216:	08 95       	ret

00018218 <PID::PID(double*, double*, double*, double, double, double, int, int)>:
_ZN3PIDC2EPdS0_S0_dddii():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:20

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   18218:	4f 92       	push	r4
   1821a:	5f 92       	push	r5
   1821c:	6f 92       	push	r6
   1821e:	7f 92       	push	r7
   18220:	8f 92       	push	r8
   18222:	9f 92       	push	r9
   18224:	af 92       	push	r10
   18226:	bf 92       	push	r11
   18228:	cf 92       	push	r12
   1822a:	df 92       	push	r13
   1822c:	ef 92       	push	r14
   1822e:	ff 92       	push	r15
   18230:	0f 93       	push	r16
   18232:	1f 93       	push	r17
   18234:	cf 93       	push	r28
   18236:	df 93       	push	r29
   18238:	00 d0       	rcall	.+0      	; 0x1823a <PID::PID(double*, double*, double*, double, double, double, int, int)+0x22>
   1823a:	1f 92       	push	r1
   1823c:	cd b7       	in	r28, 0x3d	; 61
   1823e:	de b7       	in	r29, 0x3e	; 62
   18240:	4c 01       	movw	r8, r24
   18242:	27 01       	movw	r4, r14
   18244:	38 01       	movw	r6, r16
   18246:	a9 82       	std	Y+1, r10	; 0x01
   18248:	ba 82       	std	Y+2, r11	; 0x02
   1824a:	cb 82       	std	Y+3, r12	; 0x03
   1824c:	dc 82       	std	Y+4, r13	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
   1824e:	fc 01       	movw	r30, r24
   18250:	57 8f       	std	Z+31, r21	; 0x1f
   18252:	46 8f       	std	Z+30, r20	; 0x1e
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
   18254:	75 8f       	std	Z+29, r23	; 0x1d
   18256:	64 8f       	std	Z+28, r22	; 0x1c
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
   18258:	31 a3       	std	Z+33, r19	; 0x21
   1825a:	20 a3       	std	Z+32, r18	; 0x20
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
   1825c:	12 ae       	std	Z+58, r1	; 0x3a
_ZN3PID15SetOutputLimitsEdd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   1825e:	12 aa       	std	Z+50, r1	; 0x32
   18260:	13 aa       	std	Z+51, r1	; 0x33
   18262:	14 aa       	std	Z+52, r1	; 0x34
   18264:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   18266:	80 e0       	ldi	r24, 0x00	; 0
   18268:	90 e0       	ldi	r25, 0x00	; 0
   1826a:	af e7       	ldi	r26, 0x7F	; 127
   1826c:	b3 e4       	ldi	r27, 0x43	; 67
   1826e:	86 ab       	std	Z+54, r24	; 0x36
   18270:	97 ab       	std	Z+55, r25	; 0x37
   18272:	a0 af       	std	Z+56, r26	; 0x38
   18274:	b1 af       	std	Z+57, r27	; 0x39
_ZN3PIDC2EPdS0_S0_dddii():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   18276:	84 e6       	ldi	r24, 0x64	; 100
   18278:	90 e0       	ldi	r25, 0x00	; 0
   1827a:	a0 e0       	ldi	r26, 0x00	; 0
   1827c:	b0 e0       	ldi	r27, 0x00	; 0
   1827e:	86 a7       	std	Z+46, r24	; 0x2e
   18280:	97 a7       	std	Z+47, r25	; 0x2f
   18282:	a0 ab       	std	Z+48, r26	; 0x30
   18284:	b1 ab       	std	Z+49, r27	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:33

    PID::SetControllerDirection(ControllerDirection);
   18286:	6e 8d       	ldd	r22, Y+30	; 0x1e
   18288:	7f 8d       	ldd	r23, Y+31	; 0x1f
   1828a:	c4 01       	movw	r24, r8
   1828c:	0e 94 d0 c0 	call	0x181a0	; 0x181a0 <PID::SetControllerDirection(int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:34
    PID::SetTunings(Kp, Ki, Kd, POn);
   18290:	ac 8c       	ldd	r10, Y+28	; 0x1c
   18292:	bd 8c       	ldd	r11, Y+29	; 0x1d
   18294:	c8 8c       	ldd	r12, Y+24	; 0x18
   18296:	d9 8c       	ldd	r13, Y+25	; 0x19
   18298:	ea 8c       	ldd	r14, Y+26	; 0x1a
   1829a:	fb 8c       	ldd	r15, Y+27	; 0x1b
   1829c:	09 81       	ldd	r16, Y+1	; 0x01
   1829e:	1a 81       	ldd	r17, Y+2	; 0x02
   182a0:	2b 81       	ldd	r18, Y+3	; 0x03
   182a2:	3c 81       	ldd	r19, Y+4	; 0x04
   182a4:	b3 01       	movw	r22, r6
   182a6:	a2 01       	movw	r20, r4
   182a8:	c4 01       	movw	r24, r8
   182aa:	0e 94 b9 be 	call	0x17d72	; 0x17d72 <PID::SetTunings(double, double, double, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36

    lastTime = (millis() / 1000) - SampleTime;
   182ae:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   182b2:	28 ee       	ldi	r18, 0xE8	; 232
   182b4:	33 e0       	ldi	r19, 0x03	; 3
   182b6:	40 e0       	ldi	r20, 0x00	; 0
   182b8:	50 e0       	ldi	r21, 0x00	; 0
   182ba:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
   182be:	f4 01       	movw	r30, r8
   182c0:	86 a5       	ldd	r24, Z+46	; 0x2e
   182c2:	97 a5       	ldd	r25, Z+47	; 0x2f
   182c4:	a0 a9       	ldd	r26, Z+48	; 0x30
   182c6:	b1 a9       	ldd	r27, Z+49	; 0x31
   182c8:	28 1b       	sub	r18, r24
   182ca:	39 0b       	sbc	r19, r25
   182cc:	4a 0b       	sbc	r20, r26
   182ce:	5b 0b       	sbc	r21, r27
   182d0:	22 a3       	std	Z+34, r18	; 0x22
   182d2:	33 a3       	std	Z+35, r19	; 0x23
   182d4:	44 a3       	std	Z+36, r20	; 0x24
   182d6:	55 a3       	std	Z+37, r21	; 0x25
/home/saric/Arduino/libraries/PID/PID_v1.cpp:37
}
   182d8:	0f 90       	pop	r0
   182da:	0f 90       	pop	r0
   182dc:	0f 90       	pop	r0
   182de:	0f 90       	pop	r0
   182e0:	df 91       	pop	r29
   182e2:	cf 91       	pop	r28
   182e4:	1f 91       	pop	r17
   182e6:	0f 91       	pop	r16
   182e8:	ff 90       	pop	r15
   182ea:	ef 90       	pop	r14
   182ec:	df 90       	pop	r13
   182ee:	cf 90       	pop	r12
   182f0:	bf 90       	pop	r11
   182f2:	af 90       	pop	r10
   182f4:	9f 90       	pop	r9
   182f6:	8f 90       	pop	r8
   182f8:	7f 90       	pop	r7
   182fa:	6f 90       	pop	r6
   182fc:	5f 90       	pop	r5
   182fe:	4f 90       	pop	r4
   18300:	08 95       	ret

00018302 <PID::PID(double*, double*, double*, double, double, double, int)>:
_ZN3PIDC2EPdS0_S0_dddi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:44
/*Constructor (...)*********************************************************
 *    To allow backwards compatability for v1.1, or for people that just want
 *    to use Proportional on Error without explicitly saying so
 ***************************************************************************/

PID::PID(double* Input, double* Output, double* Setpoint,
   18302:	8f 92       	push	r8
   18304:	9f 92       	push	r9
   18306:	af 92       	push	r10
   18308:	bf 92       	push	r11
   1830a:	cf 92       	push	r12
   1830c:	df 92       	push	r13
   1830e:	ef 92       	push	r14
   18310:	ff 92       	push	r15
   18312:	0f 93       	push	r16
   18314:	1f 93       	push	r17
   18316:	cf 93       	push	r28
   18318:	df 93       	push	r29
   1831a:	cd b7       	in	r28, 0x3d	; 61
   1831c:	de b7       	in	r29, 0x3e	; 62
   1831e:	e8 89       	ldd	r30, Y+16	; 0x10
   18320:	f9 89       	ldd	r31, Y+17	; 0x11
   18322:	aa 89       	ldd	r26, Y+18	; 0x12
   18324:	bb 89       	ldd	r27, Y+19	; 0x13
   18326:	9c 88       	ldd	r9, Y+20	; 0x14
   18328:	8d 88       	ldd	r8, Y+21	; 0x15
/home/saric/Arduino/libraries/PID/PID_v1.cpp:46
        double Kp, double Ki, double Kd, int ControllerDirection)
    :PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, P_ON_E, ControllerDirection)
   1832a:	8f 92       	push	r8
   1832c:	9f 92       	push	r9
   1832e:	1f 92       	push	r1
   18330:	99 24       	eor	r9, r9
   18332:	93 94       	inc	r9
   18334:	9f 92       	push	r9
   18336:	bf 93       	push	r27
   18338:	af 93       	push	r26
   1833a:	ff 93       	push	r31
   1833c:	ef 93       	push	r30
   1833e:	0e 94 0c c1 	call	0x18218	; 0x18218 <PID::PID(double*, double*, double*, double, double, double, int, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:49
{

}
   18342:	0f b6       	in	r0, 0x3f	; 63
   18344:	f8 94       	cli
   18346:	de bf       	out	0x3e, r29	; 62
   18348:	0f be       	out	0x3f, r0	; 63
   1834a:	cd bf       	out	0x3d, r28	; 61
   1834c:	df 91       	pop	r29
   1834e:	cf 91       	pop	r28
   18350:	1f 91       	pop	r17
   18352:	0f 91       	pop	r16
   18354:	ff 90       	pop	r15
   18356:	ef 90       	pop	r14
   18358:	df 90       	pop	r13
   1835a:	cf 90       	pop	r12
   1835c:	bf 90       	pop	r11
   1835e:	af 90       	pop	r10
   18360:	9f 90       	pop	r9
   18362:	8f 90       	pop	r8
   18364:	08 95       	ret

00018366 <PubSubClient::PubSubClient(Client&)>:
_ZN12PubSubClientC2ER6Client():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:586
}

PubSubClient& PubSubClient::setStream(Stream& stream){
    this->stream = &stream;
    return *this;
}
   18366:	0f 93       	push	r16
   18368:	1f 93       	push	r17
   1836a:	cf 93       	push	r28
   1836c:	df 93       	push	r29
   1836e:	ec 01       	movw	r28, r24
   18370:	8b 01       	movw	r16, r22
   18372:	81 5f       	subi	r24, 0xF1	; 241
   18374:	9d 4f       	sbci	r25, 0xFD	; 253
   18376:	0e 94 41 da 	call	0x1b482	; 0x1b482 <IPAddress::IPAddress()>
   1837a:	fe 01       	movw	r30, r28
   1837c:	e5 5e       	subi	r30, 0xE5	; 229
   1837e:	fd 4f       	sbci	r31, 0xFD	; 253
   18380:	8f ef       	ldi	r24, 0xFF	; 255
   18382:	9f ef       	ldi	r25, 0xFF	; 255
   18384:	91 83       	std	Z+1, r25	; 0x01
   18386:	80 83       	st	Z, r24
_ZN12PubSubClient9setClientER6Client():
   18388:	19 83       	std	Y+1, r17	; 0x01
   1838a:	08 83       	st	Y, r16
_ZN12PubSubClientC2ER6Client():
   1838c:	c7 5e       	subi	r28, 0xE7	; 231
   1838e:	dd 4f       	sbci	r29, 0xFD	; 253
   18390:	19 82       	std	Y+1, r1	; 0x01
   18392:	18 82       	st	Y, r1
   18394:	df 91       	pop	r29
   18396:	cf 91       	pop	r28
   18398:	1f 91       	pop	r17
   1839a:	0f 91       	pop	r16
   1839c:	08 95       	ret

0001839e <PubSubClient::readByte(unsigned char*)>:
_ZN12PubSubClient8readByteEPh():
   1839e:	cf 92       	push	r12
   183a0:	df 92       	push	r13
   183a2:	ef 92       	push	r14
   183a4:	ff 92       	push	r15
   183a6:	0f 93       	push	r16
   183a8:	1f 93       	push	r17
   183aa:	cf 93       	push	r28
   183ac:	df 93       	push	r29
   183ae:	ec 01       	movw	r28, r24
   183b0:	8b 01       	movw	r16, r22
   183b2:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   183b6:	6b 01       	movw	r12, r22
   183b8:	7c 01       	movw	r14, r24
   183ba:	88 81       	ld	r24, Y
   183bc:	99 81       	ldd	r25, Y+1	; 0x01
   183be:	dc 01       	movw	r26, r24
   183c0:	ed 91       	ld	r30, X+
   183c2:	fc 91       	ld	r31, X
   183c4:	00 84       	ldd	r0, Z+8	; 0x08
   183c6:	f1 85       	ldd	r31, Z+9	; 0x09
   183c8:	e0 2d       	mov	r30, r0
   183ca:	19 95       	eicall
   183cc:	89 2b       	or	r24, r25
   183ce:	69 f4       	brne	.+26     	; 0x183ea <PubSubClient::readByte(unsigned char*)+0x4c>
   183d0:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   183d4:	6c 19       	sub	r22, r12
   183d6:	7d 09       	sbc	r23, r13
   183d8:	8e 09       	sbc	r24, r14
   183da:	9f 09       	sbc	r25, r15
   183dc:	62 33       	cpi	r22, 0x32	; 50
   183de:	71 05       	cpc	r23, r1
   183e0:	81 05       	cpc	r24, r1
   183e2:	91 05       	cpc	r25, r1
   183e4:	50 f3       	brcs	.-44     	; 0x183ba <PubSubClient::readByte(unsigned char*)+0x1c>
   183e6:	80 e0       	ldi	r24, 0x00	; 0
   183e8:	0c c0       	rjmp	.+24     	; 0x18402 <PubSubClient::readByte(unsigned char*)+0x64>
   183ea:	88 81       	ld	r24, Y
   183ec:	99 81       	ldd	r25, Y+1	; 0x01
   183ee:	dc 01       	movw	r26, r24
   183f0:	ed 91       	ld	r30, X+
   183f2:	fc 91       	ld	r31, X
   183f4:	02 84       	ldd	r0, Z+10	; 0x0a
   183f6:	f3 85       	ldd	r31, Z+11	; 0x0b
   183f8:	e0 2d       	mov	r30, r0
   183fa:	19 95       	eicall
   183fc:	f8 01       	movw	r30, r16
   183fe:	80 83       	st	Z, r24
   18400:	81 e0       	ldi	r24, 0x01	; 1
   18402:	df 91       	pop	r29
   18404:	cf 91       	pop	r28
   18406:	1f 91       	pop	r17
   18408:	0f 91       	pop	r16
   1840a:	ff 90       	pop	r15
   1840c:	ef 90       	pop	r14
   1840e:	df 90       	pop	r13
   18410:	cf 90       	pop	r12
   18412:	08 95       	ret

00018414 <PubSubClient::readByte(unsigned char*, unsigned int*)>:
_ZN12PubSubClient8readByteEPhPj():
   18414:	0f 93       	push	r16
   18416:	1f 93       	push	r17
   18418:	cf 93       	push	r28
   1841a:	df 93       	push	r29
   1841c:	8a 01       	movw	r16, r20
   1841e:	fa 01       	movw	r30, r20
   18420:	c0 81       	ld	r28, Z
   18422:	d1 81       	ldd	r29, Z+1	; 0x01
   18424:	6c 0f       	add	r22, r28
   18426:	7d 1f       	adc	r23, r29
   18428:	0e 94 cf c1 	call	0x1839e	; 0x1839e <PubSubClient::readByte(unsigned char*)>
   1842c:	88 23       	and	r24, r24
   1842e:	21 f0       	breq	.+8      	; 0x18438 <PubSubClient::readByte(unsigned char*, unsigned int*)+0x24>
   18430:	21 96       	adiw	r28, 0x01	; 1
   18432:	f8 01       	movw	r30, r16
   18434:	d1 83       	std	Z+1, r29	; 0x01
   18436:	c0 83       	st	Z, r28
   18438:	df 91       	pop	r29
   1843a:	cf 91       	pop	r28
   1843c:	1f 91       	pop	r17
   1843e:	0f 91       	pop	r16
   18440:	08 95       	ret

00018442 <PubSubClient::readPacket(unsigned char*)>:
_ZN12PubSubClient10readPacketEPh():
   18442:	4f 92       	push	r4
   18444:	5f 92       	push	r5
   18446:	6f 92       	push	r6
   18448:	7f 92       	push	r7
   1844a:	8f 92       	push	r8
   1844c:	9f 92       	push	r9
   1844e:	af 92       	push	r10
   18450:	bf 92       	push	r11
   18452:	cf 92       	push	r12
   18454:	df 92       	push	r13
   18456:	ef 92       	push	r14
   18458:	ff 92       	push	r15
   1845a:	0f 93       	push	r16
   1845c:	1f 93       	push	r17
   1845e:	cf 93       	push	r28
   18460:	df 93       	push	r29
   18462:	00 d0       	rcall	.+0      	; 0x18464 <PubSubClient::readPacket(unsigned char*)+0x22>
   18464:	1f 92       	push	r1
   18466:	cd b7       	in	r28, 0x3d	; 61
   18468:	de b7       	in	r29, 0x3e	; 62
   1846a:	8c 01       	movw	r16, r24
   1846c:	4b 01       	movw	r8, r22
   1846e:	1a 82       	std	Y+2, r1	; 0x02
   18470:	19 82       	std	Y+1, r1	; 0x01
   18472:	7c 01       	movw	r14, r24
   18474:	22 e0       	ldi	r18, 0x02	; 2
   18476:	e2 0e       	add	r14, r18
   18478:	f1 1c       	adc	r15, r1
   1847a:	ae 01       	movw	r20, r28
   1847c:	4f 5f       	subi	r20, 0xFF	; 255
   1847e:	5f 4f       	sbci	r21, 0xFF	; 255
   18480:	b7 01       	movw	r22, r14
   18482:	0e 94 0a c2 	call	0x18414	; 0x18414 <PubSubClient::readByte(unsigned char*, unsigned int*)>
   18486:	81 11       	cpse	r24, r1
   18488:	17 c0       	rjmp	.+46     	; 0x184b8 <PubSubClient::readPacket(unsigned char*)+0x76>
   1848a:	90 e0       	ldi	r25, 0x00	; 0
   1848c:	80 e0       	ldi	r24, 0x00	; 0
   1848e:	0f 90       	pop	r0
   18490:	0f 90       	pop	r0
   18492:	0f 90       	pop	r0
   18494:	0f 90       	pop	r0
   18496:	df 91       	pop	r29
   18498:	cf 91       	pop	r28
   1849a:	1f 91       	pop	r17
   1849c:	0f 91       	pop	r16
   1849e:	ff 90       	pop	r15
   184a0:	ef 90       	pop	r14
   184a2:	df 90       	pop	r13
   184a4:	cf 90       	pop	r12
   184a6:	bf 90       	pop	r11
   184a8:	af 90       	pop	r10
   184aa:	9f 90       	pop	r9
   184ac:	8f 90       	pop	r8
   184ae:	7f 90       	pop	r7
   184b0:	6f 90       	pop	r6
   184b2:	5f 90       	pop	r5
   184b4:	4f 90       	pop	r4
   184b6:	08 95       	ret
   184b8:	d8 01       	movw	r26, r16
   184ba:	12 96       	adiw	r26, 0x02	; 2
   184bc:	dc 90       	ld	r13, X
   184be:	1b 82       	std	Y+3, r1	; 0x03
   184c0:	b1 2c       	mov	r11, r1
   184c2:	a1 2c       	mov	r10, r1
   184c4:	41 2c       	mov	r4, r1
   184c6:	51 2c       	mov	r5, r1
   184c8:	32 01       	movw	r6, r4
   184ca:	43 94       	inc	r4
   184cc:	be 01       	movw	r22, r28
   184ce:	6d 5f       	subi	r22, 0xFD	; 253
   184d0:	7f 4f       	sbci	r23, 0xFF	; 255
   184d2:	c8 01       	movw	r24, r16
   184d4:	0e 94 cf c1 	call	0x1839e	; 0x1839e <PubSubClient::readByte(unsigned char*)>
   184d8:	88 23       	and	r24, r24
   184da:	b9 f2       	breq	.-82     	; 0x1848a <PubSubClient::readPacket(unsigned char*)+0x48>
   184dc:	29 81       	ldd	r18, Y+1	; 0x01
   184de:	3a 81       	ldd	r19, Y+2	; 0x02
   184e0:	c9 01       	movw	r24, r18
   184e2:	01 96       	adiw	r24, 0x01	; 1
   184e4:	9a 83       	std	Y+2, r25	; 0x02
   184e6:	89 83       	std	Y+1, r24	; 0x01
   184e8:	4b 81       	ldd	r20, Y+3	; 0x03
   184ea:	20 0f       	add	r18, r16
   184ec:	31 1f       	adc	r19, r17
   184ee:	f9 01       	movw	r30, r18
   184f0:	42 83       	std	Z+2, r20	; 0x02
   184f2:	24 2f       	mov	r18, r20
   184f4:	2f 77       	andi	r18, 0x7F	; 127
   184f6:	30 e0       	ldi	r19, 0x00	; 0
   184f8:	24 9d       	mul	r18, r4
   184fa:	b0 01       	movw	r22, r0
   184fc:	25 9d       	mul	r18, r5
   184fe:	70 0d       	add	r23, r0
   18500:	34 9d       	mul	r19, r4
   18502:	70 0d       	add	r23, r0
   18504:	11 24       	eor	r1, r1
   18506:	a6 0e       	add	r10, r22
   18508:	b7 1e       	adc	r11, r23
   1850a:	97 e0       	ldi	r25, 0x07	; 7
   1850c:	44 0c       	add	r4, r4
   1850e:	55 1c       	adc	r5, r5
   18510:	66 1c       	adc	r6, r6
   18512:	77 1c       	adc	r7, r7
   18514:	9a 95       	dec	r25
   18516:	d1 f7       	brne	.-12     	; 0x1850c <PubSubClient::readPacket(unsigned char*)+0xca>
   18518:	47 fd       	sbrc	r20, 7
   1851a:	d8 cf       	rjmp	.-80     	; 0x184cc <PubSubClient::readPacket(unsigned char*)+0x8a>
   1851c:	fd 2d       	mov	r31, r13
   1851e:	f0 7f       	andi	r31, 0xF0	; 240
   18520:	fc 83       	std	Y+4, r31	; 0x04
   18522:	81 50       	subi	r24, 0x01	; 1
   18524:	d4 01       	movw	r26, r8
   18526:	8c 93       	st	X, r24
   18528:	80 e0       	ldi	r24, 0x00	; 0
   1852a:	d1 2c       	mov	r13, r1
   1852c:	c1 2c       	mov	r12, r1
   1852e:	f0 33       	cpi	r31, 0x30	; 48
   18530:	41 f5       	brne	.+80     	; 0x18582 <PubSubClient::readPacket(unsigned char*)+0x140>
   18532:	ae 01       	movw	r20, r28
   18534:	4f 5f       	subi	r20, 0xFF	; 255
   18536:	5f 4f       	sbci	r21, 0xFF	; 255
   18538:	b7 01       	movw	r22, r14
   1853a:	c8 01       	movw	r24, r16
   1853c:	0e 94 0a c2 	call	0x18414	; 0x18414 <PubSubClient::readByte(unsigned char*, unsigned int*)>
   18540:	88 23       	and	r24, r24
   18542:	09 f4       	brne	.+2      	; 0x18546 <PubSubClient::readPacket(unsigned char*)+0x104>
   18544:	a2 cf       	rjmp	.-188    	; 0x1848a <PubSubClient::readPacket(unsigned char*)+0x48>
   18546:	ae 01       	movw	r20, r28
   18548:	4f 5f       	subi	r20, 0xFF	; 255
   1854a:	5f 4f       	sbci	r21, 0xFF	; 255
   1854c:	b7 01       	movw	r22, r14
   1854e:	c8 01       	movw	r24, r16
   18550:	0e 94 0a c2 	call	0x18414	; 0x18414 <PubSubClient::readByte(unsigned char*, unsigned int*)>
   18554:	88 23       	and	r24, r24
   18556:	09 f4       	brne	.+2      	; 0x1855a <PubSubClient::readPacket(unsigned char*)+0x118>
   18558:	98 cf       	rjmp	.-208    	; 0x1848a <PubSubClient::readPacket(unsigned char*)+0x48>
   1855a:	d4 01       	movw	r26, r8
   1855c:	ec 91       	ld	r30, X
   1855e:	e0 0f       	add	r30, r16
   18560:	f1 2f       	mov	r31, r17
   18562:	f1 1d       	adc	r31, r1
   18564:	c3 80       	ldd	r12, Z+3	; 0x03
   18566:	d1 2c       	mov	r13, r1
   18568:	dc 2c       	mov	r13, r12
   1856a:	cc 24       	eor	r12, r12
   1856c:	84 81       	ldd	r24, Z+4	; 0x04
   1856e:	c8 0e       	add	r12, r24
   18570:	d1 1c       	adc	r13, r1
   18572:	f8 01       	movw	r30, r16
   18574:	82 81       	ldd	r24, Z+2	; 0x02
   18576:	81 ff       	sbrs	r24, 1
   18578:	03 c0       	rjmp	.+6      	; 0x18580 <PubSubClient::readPacket(unsigned char*)+0x13e>
   1857a:	f2 e0       	ldi	r31, 0x02	; 2
   1857c:	cf 0e       	add	r12, r31
   1857e:	d1 1c       	adc	r13, r1
   18580:	82 e0       	ldi	r24, 0x02	; 2
   18582:	e8 2e       	mov	r14, r24
   18584:	f1 2c       	mov	r15, r1
   18586:	38 01       	movw	r6, r16
   18588:	27 ee       	ldi	r18, 0xE7	; 231
   1858a:	62 1a       	sub	r6, r18
   1858c:	2d ef       	ldi	r18, 0xFD	; 253
   1858e:	72 0a       	sbc	r7, r18
   18590:	ea 14       	cp	r14, r10
   18592:	fb 04       	cpc	r15, r11
   18594:	b0 f5       	brcc	.+108    	; 0x18602 <PubSubClient::readPacket(unsigned char*)+0x1c0>
   18596:	be 01       	movw	r22, r28
   18598:	6d 5f       	subi	r22, 0xFD	; 253
   1859a:	7f 4f       	sbci	r23, 0xFF	; 255
   1859c:	c8 01       	movw	r24, r16
   1859e:	0e 94 cf c1 	call	0x1839e	; 0x1839e <PubSubClient::readByte(unsigned char*)>
   185a2:	88 23       	and	r24, r24
   185a4:	09 f4       	brne	.+2      	; 0x185a8 <PubSubClient::readPacket(unsigned char*)+0x166>
   185a6:	71 cf       	rjmp	.-286    	; 0x1848a <PubSubClient::readPacket(unsigned char*)+0x48>
   185a8:	d3 01       	movw	r26, r6
   185aa:	8d 91       	ld	r24, X+
   185ac:	9c 91       	ld	r25, X
   185ae:	00 97       	sbiw	r24, 0x00	; 0
   185b0:	b1 f0       	breq	.+44     	; 0x185de <PubSubClient::readPacket(unsigned char*)+0x19c>
   185b2:	bc 81       	ldd	r27, Y+4	; 0x04
   185b4:	b0 33       	cpi	r27, 0x30	; 48
   185b6:	99 f4       	brne	.+38     	; 0x185de <PubSubClient::readPacket(unsigned char*)+0x19c>
   185b8:	29 81       	ldd	r18, Y+1	; 0x01
   185ba:	3a 81       	ldd	r19, Y+2	; 0x02
   185bc:	22 50       	subi	r18, 0x02	; 2
   185be:	31 09       	sbc	r19, r1
   185c0:	f4 01       	movw	r30, r8
   185c2:	40 81       	ld	r20, Z
   185c4:	24 1b       	sub	r18, r20
   185c6:	31 09       	sbc	r19, r1
   185c8:	c2 16       	cp	r12, r18
   185ca:	d3 06       	cpc	r13, r19
   185cc:	40 f4       	brcc	.+16     	; 0x185de <PubSubClient::readPacket(unsigned char*)+0x19c>
   185ce:	dc 01       	movw	r26, r24
   185d0:	ed 91       	ld	r30, X+
   185d2:	fc 91       	ld	r31, X
   185d4:	01 90       	ld	r0, Z+
   185d6:	f0 81       	ld	r31, Z
   185d8:	e0 2d       	mov	r30, r0
   185da:	6b 81       	ldd	r22, Y+3	; 0x03
   185dc:	19 95       	eicall
   185de:	89 81       	ldd	r24, Y+1	; 0x01
   185e0:	9a 81       	ldd	r25, Y+2	; 0x02
   185e2:	81 15       	cp	r24, r1
   185e4:	b2 e0       	ldi	r27, 0x02	; 2
   185e6:	9b 07       	cpc	r25, r27
   185e8:	28 f4       	brcc	.+10     	; 0x185f4 <PubSubClient::readPacket(unsigned char*)+0x1b2>
   185ea:	2b 81       	ldd	r18, Y+3	; 0x03
   185ec:	f8 01       	movw	r30, r16
   185ee:	e8 0f       	add	r30, r24
   185f0:	f9 1f       	adc	r31, r25
   185f2:	22 83       	std	Z+2, r18	; 0x02
   185f4:	01 96       	adiw	r24, 0x01	; 1
   185f6:	9a 83       	std	Y+2, r25	; 0x02
   185f8:	89 83       	std	Y+1, r24	; 0x01
   185fa:	ef ef       	ldi	r30, 0xFF	; 255
   185fc:	ee 1a       	sub	r14, r30
   185fe:	fe 0a       	sbc	r15, r30
   18600:	c7 cf       	rjmp	.-114    	; 0x18590 <PubSubClient::readPacket(unsigned char*)+0x14e>
   18602:	f8 01       	movw	r30, r16
   18604:	e7 5e       	subi	r30, 0xE7	; 231
   18606:	fd 4f       	sbci	r31, 0xFD	; 253
   18608:	80 81       	ld	r24, Z
   1860a:	91 81       	ldd	r25, Z+1	; 0x01
   1860c:	89 2b       	or	r24, r25
   1860e:	39 f4       	brne	.+14     	; 0x1861e <PubSubClient::readPacket(unsigned char*)+0x1dc>
   18610:	89 81       	ldd	r24, Y+1	; 0x01
   18612:	9a 81       	ldd	r25, Y+2	; 0x02
   18614:	81 30       	cpi	r24, 0x01	; 1
   18616:	92 40       	sbci	r25, 0x02	; 2
   18618:	10 f0       	brcs	.+4      	; 0x1861e <PubSubClient::readPacket(unsigned char*)+0x1dc>
   1861a:	1a 82       	std	Y+2, r1	; 0x02
   1861c:	19 82       	std	Y+1, r1	; 0x01
   1861e:	89 81       	ldd	r24, Y+1	; 0x01
   18620:	9a 81       	ldd	r25, Y+2	; 0x02
   18622:	35 cf       	rjmp	.-406    	; 0x1848e <PubSubClient::readPacket(unsigned char*)+0x4c>

00018624 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
   18624:	bf 92       	push	r11
   18626:	cf 92       	push	r12
   18628:	df 92       	push	r13
   1862a:	ef 92       	push	r14
   1862c:	ff 92       	push	r15
   1862e:	0f 93       	push	r16
   18630:	1f 93       	push	r17
   18632:	cf 93       	push	r28
   18634:	df 93       	push	r29
   18636:	00 d0       	rcall	.+0      	; 0x18638 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
   18638:	1f 92       	push	r1
   1863a:	cd b7       	in	r28, 0x3d	; 61
   1863c:	de b7       	in	r29, 0x3e	; 62
   1863e:	7c 01       	movw	r14, r24
   18640:	b6 2e       	mov	r11, r22
   18642:	89 01       	movw	r16, r18
   18644:	c9 01       	movw	r24, r18
   18646:	30 e0       	ldi	r19, 0x00	; 0
   18648:	be 01       	movw	r22, r28
   1864a:	6f 5f       	subi	r22, 0xFF	; 255
   1864c:	7f 4f       	sbci	r23, 0xFF	; 255
   1864e:	6b 01       	movw	r12, r22
   18650:	28 2f       	mov	r18, r24
   18652:	2f 77       	andi	r18, 0x7F	; 127
   18654:	88 0f       	add	r24, r24
   18656:	89 2f       	mov	r24, r25
   18658:	88 1f       	adc	r24, r24
   1865a:	99 0b       	sbc	r25, r25
   1865c:	91 95       	neg	r25
   1865e:	00 97       	sbiw	r24, 0x00	; 0
   18660:	09 f0       	breq	.+2      	; 0x18664 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
   18662:	20 68       	ori	r18, 0x80	; 128
   18664:	f6 01       	movw	r30, r12
   18666:	e3 0f       	add	r30, r19
   18668:	f1 1d       	adc	r31, r1
   1866a:	20 83       	st	Z, r18
   1866c:	3f 5f       	subi	r19, 0xFF	; 255
   1866e:	00 97       	sbiw	r24, 0x00	; 0
   18670:	79 f7       	brne	.-34     	; 0x18650 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
   18672:	e3 2f       	mov	r30, r19
   18674:	f0 e0       	ldi	r31, 0x00	; 0
   18676:	ba 01       	movw	r22, r20
   18678:	6e 1b       	sub	r22, r30
   1867a:	7f 0b       	sbc	r23, r31
   1867c:	6c 5f       	subi	r22, 0xFC	; 252
   1867e:	7f 4f       	sbci	r23, 0xFF	; 255
   18680:	db 01       	movw	r26, r22
   18682:	bc 92       	st	X, r11
   18684:	4e 1b       	sub	r20, r30
   18686:	5f 0b       	sbc	r21, r31
   18688:	4b 5f       	subi	r20, 0xFB	; 251
   1868a:	5f 4f       	sbci	r21, 0xFF	; 255
   1868c:	c6 01       	movw	r24, r12
   1868e:	9c 01       	movw	r18, r24
   18690:	2c 19       	sub	r18, r12
   18692:	3d 09       	sbc	r19, r13
   18694:	2e 17       	cp	r18, r30
   18696:	3f 07       	cpc	r19, r31
   18698:	3c f4       	brge	.+14     	; 0x186a8 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
   1869a:	dc 01       	movw	r26, r24
   1869c:	2d 91       	ld	r18, X+
   1869e:	cd 01       	movw	r24, r26
   186a0:	da 01       	movw	r26, r20
   186a2:	2d 93       	st	X+, r18
   186a4:	ad 01       	movw	r20, r26
   186a6:	f3 cf       	rjmp	.-26     	; 0x1868e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
   186a8:	d7 01       	movw	r26, r14
   186aa:	8d 91       	ld	r24, X+
   186ac:	9c 91       	ld	r25, X
   186ae:	0f 5f       	subi	r16, 0xFF	; 255
   186b0:	1f 4f       	sbci	r17, 0xFF	; 255
   186b2:	0e 0f       	add	r16, r30
   186b4:	1f 1f       	adc	r17, r31
   186b6:	dc 01       	movw	r26, r24
   186b8:	ed 91       	ld	r30, X+
   186ba:	fc 91       	ld	r31, X
   186bc:	02 80       	ldd	r0, Z+2	; 0x02
   186be:	f3 81       	ldd	r31, Z+3	; 0x03
   186c0:	e0 2d       	mov	r30, r0
   186c2:	a8 01       	movw	r20, r16
   186c4:	19 95       	eicall
   186c6:	6c 01       	movw	r12, r24
   186c8:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   186cc:	f7 01       	movw	r30, r14
   186ce:	ec 5f       	subi	r30, 0xFC	; 252
   186d0:	fd 4f       	sbci	r31, 0xFD	; 253
   186d2:	60 83       	st	Z, r22
   186d4:	71 83       	std	Z+1, r23	; 0x01
   186d6:	82 83       	std	Z+2, r24	; 0x02
   186d8:	93 83       	std	Z+3, r25	; 0x03
   186da:	81 e0       	ldi	r24, 0x01	; 1
   186dc:	0c 15       	cp	r16, r12
   186de:	1d 05       	cpc	r17, r13
   186e0:	09 f0       	breq	.+2      	; 0x186e4 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
   186e2:	80 e0       	ldi	r24, 0x00	; 0
   186e4:	0f 90       	pop	r0
   186e6:	0f 90       	pop	r0
   186e8:	0f 90       	pop	r0
   186ea:	0f 90       	pop	r0
   186ec:	df 91       	pop	r29
   186ee:	cf 91       	pop	r28
   186f0:	1f 91       	pop	r17
   186f2:	0f 91       	pop	r16
   186f4:	ff 90       	pop	r15
   186f6:	ef 90       	pop	r14
   186f8:	df 90       	pop	r13
   186fa:	cf 90       	pop	r12
   186fc:	bf 90       	pop	r11
   186fe:	08 95       	ret

00018700 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>:
_ZN12PubSubClient11writeStringEPKcPhj():
   18700:	cf 93       	push	r28
   18702:	df 93       	push	r29
   18704:	eb 01       	movw	r28, r22
   18706:	f9 01       	movw	r30, r18
   18708:	32 96       	adiw	r30, 0x02	; 2
   1870a:	e4 0f       	add	r30, r20
   1870c:	f5 1f       	adc	r31, r21
   1870e:	db 01       	movw	r26, r22
   18710:	9d 01       	movw	r18, r26
   18712:	2c 1b       	sub	r18, r28
   18714:	3d 0b       	sbc	r19, r29
   18716:	cf 01       	movw	r24, r30
   18718:	84 1b       	sub	r24, r20
   1871a:	95 0b       	sbc	r25, r21
   1871c:	7d 91       	ld	r23, X+
   1871e:	77 23       	and	r23, r23
   18720:	11 f0       	breq	.+4      	; 0x18726 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)+0x26>
   18722:	71 93       	st	Z+, r23
   18724:	f5 cf       	rjmp	.-22     	; 0x18710 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)+0x10>
   18726:	bc 01       	movw	r22, r24
   18728:	62 1b       	sub	r22, r18
   1872a:	73 0b       	sbc	r23, r19
   1872c:	46 0f       	add	r20, r22
   1872e:	57 1f       	adc	r21, r23
   18730:	fa 01       	movw	r30, r20
   18732:	32 97       	sbiw	r30, 0x02	; 2
   18734:	30 83       	st	Z, r19
   18736:	41 50       	subi	r20, 0x01	; 1
   18738:	51 09       	sbc	r21, r1
   1873a:	fa 01       	movw	r30, r20
   1873c:	20 83       	st	Z, r18
   1873e:	df 91       	pop	r29
   18740:	cf 91       	pop	r28
   18742:	08 95       	ret

00018744 <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
   18744:	cf 93       	push	r28
   18746:	df 93       	push	r29
   18748:	fc 01       	movw	r30, r24
   1874a:	a0 81       	ld	r26, Z
   1874c:	b1 81       	ldd	r27, Z+1	; 0x01
   1874e:	10 97       	sbiw	r26, 0x00	; 0
   18750:	21 f4       	brne	.+8      	; 0x1875a <PubSubClient::connected()+0x16>
   18752:	80 e0       	ldi	r24, 0x00	; 0
   18754:	df 91       	pop	r29
   18756:	cf 91       	pop	r28
   18758:	08 95       	ret
   1875a:	ec 01       	movw	r28, r24
   1875c:	ed 91       	ld	r30, X+
   1875e:	fc 91       	ld	r31, X
   18760:	11 97       	sbiw	r26, 0x01	; 1
   18762:	06 88       	ldd	r0, Z+22	; 0x16
   18764:	f7 89       	ldd	r31, Z+23	; 0x17
   18766:	e0 2d       	mov	r30, r0
   18768:	cd 01       	movw	r24, r26
   1876a:	19 95       	eicall
   1876c:	81 11       	cpse	r24, r1
   1876e:	1e c0       	rjmp	.+60     	; 0x187ac <PubSubClient::connected()+0x68>
   18770:	fe 01       	movw	r30, r28
   18772:	e5 5e       	subi	r30, 0xE5	; 229
   18774:	fd 4f       	sbci	r31, 0xFD	; 253
   18776:	80 81       	ld	r24, Z
   18778:	91 81       	ldd	r25, Z+1	; 0x01
   1877a:	89 2b       	or	r24, r25
   1877c:	51 f7       	brne	.-44     	; 0x18752 <PubSubClient::connected()+0xe>
   1877e:	8d ef       	ldi	r24, 0xFD	; 253
   18780:	9f ef       	ldi	r25, 0xFF	; 255
   18782:	91 83       	std	Z+1, r25	; 0x01
   18784:	80 83       	st	Z, r24
   18786:	88 81       	ld	r24, Y
   18788:	99 81       	ldd	r25, Y+1	; 0x01
   1878a:	dc 01       	movw	r26, r24
   1878c:	ed 91       	ld	r30, X+
   1878e:	fc 91       	ld	r31, X
   18790:	06 80       	ldd	r0, Z+6	; 0x06
   18792:	f7 81       	ldd	r31, Z+7	; 0x07
   18794:	e0 2d       	mov	r30, r0
   18796:	19 95       	eicall
   18798:	88 81       	ld	r24, Y
   1879a:	99 81       	ldd	r25, Y+1	; 0x01
   1879c:	dc 01       	movw	r26, r24
   1879e:	ed 91       	ld	r30, X+
   187a0:	fc 91       	ld	r31, X
   187a2:	04 88       	ldd	r0, Z+20	; 0x14
   187a4:	f5 89       	ldd	r31, Z+21	; 0x15
   187a6:	e0 2d       	mov	r30, r0
   187a8:	19 95       	eicall
   187aa:	d3 cf       	rjmp	.-90     	; 0x18752 <PubSubClient::connected()+0xe>
   187ac:	81 e0       	ldi	r24, 0x01	; 1
   187ae:	d2 cf       	rjmp	.-92     	; 0x18754 <PubSubClient::connected()+0x10>

000187b0 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)>:
_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_():
   187b0:	2f 92       	push	r2
   187b2:	3f 92       	push	r3
   187b4:	4f 92       	push	r4
   187b6:	5f 92       	push	r5
   187b8:	6f 92       	push	r6
   187ba:	7f 92       	push	r7
   187bc:	8f 92       	push	r8
   187be:	9f 92       	push	r9
   187c0:	af 92       	push	r10
   187c2:	bf 92       	push	r11
   187c4:	cf 92       	push	r12
   187c6:	df 92       	push	r13
   187c8:	ef 92       	push	r14
   187ca:	ff 92       	push	r15
   187cc:	0f 93       	push	r16
   187ce:	1f 93       	push	r17
   187d0:	cf 93       	push	r28
   187d2:	df 93       	push	r29
   187d4:	cd b7       	in	r28, 0x3d	; 61
   187d6:	de b7       	in	r29, 0x3e	; 62
   187d8:	2e 97       	sbiw	r28, 0x0e	; 14
   187da:	0f b6       	in	r0, 0x3f	; 63
   187dc:	f8 94       	cli
   187de:	de bf       	out	0x3e, r29	; 62
   187e0:	0f be       	out	0x3f, r0	; 63
   187e2:	cd bf       	out	0x3d, r28	; 61
   187e4:	4c 01       	movw	r8, r24
   187e6:	1b 01       	movw	r2, r22
   187e8:	2a 01       	movw	r4, r20
   187ea:	39 01       	movw	r6, r18
   187ec:	0e 94 a2 c3 	call	0x18744	; 0x18744 <PubSubClient::connected()>
   187f0:	d8 2e       	mov	r13, r24
   187f2:	81 11       	cpse	r24, r1
   187f4:	08 c1       	rjmp	.+528    	; 0x18a06 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>
   187f6:	f4 01       	movw	r30, r8
   187f8:	eb 5e       	subi	r30, 0xEB	; 235
   187fa:	fd 4f       	sbci	r31, 0xFD	; 253
   187fc:	60 81       	ld	r22, Z
   187fe:	71 81       	ldd	r23, Z+1	; 0x01
   18800:	d4 01       	movw	r26, r8
   18802:	8d 91       	ld	r24, X+
   18804:	9c 91       	ld	r25, X
   18806:	dc 01       	movw	r26, r24
   18808:	ed 91       	ld	r30, X+
   1880a:	fc 91       	ld	r31, X
   1880c:	d4 01       	movw	r26, r8
   1880e:	a9 5e       	subi	r26, 0xE9	; 233
   18810:	bd 4f       	sbci	r27, 0xFD	; 253
   18812:	2d 91       	ld	r18, X+
   18814:	3c 91       	ld	r19, X
   18816:	3e 87       	std	Y+14, r19	; 0x0e
   18818:	2d 87       	std	Y+13, r18	; 0x0d
   1881a:	61 15       	cp	r22, r1
   1881c:	71 05       	cpc	r23, r1
   1881e:	09 f4       	brne	.+2      	; 0x18822 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x72>
   18820:	b5 c0       	rjmp	.+362    	; 0x1898c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x1dc>
   18822:	00 88       	ldd	r0, Z+16	; 0x10
   18824:	f1 89       	ldd	r31, Z+17	; 0x11
   18826:	e0 2d       	mov	r30, r0
   18828:	a9 01       	movw	r20, r18
   1882a:	19 95       	eicall
   1882c:	f4 01       	movw	r30, r8
   1882e:	81 30       	cpi	r24, 0x01	; 1
   18830:	91 05       	cpc	r25, r1
   18832:	09 f0       	breq	.+2      	; 0x18836 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x86>
   18834:	0a c1       	rjmp	.+532    	; 0x18a4a <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x29a>
   18836:	ee 5f       	subi	r30, 0xFE	; 254
   18838:	fd 4f       	sbci	r31, 0xFD	; 253
   1883a:	91 83       	std	Z+1, r25	; 0x01
   1883c:	80 83       	st	Z, r24
   1883e:	87 e0       	ldi	r24, 0x07	; 7
   18840:	ed e8       	ldi	r30, 0x8D	; 141
   18842:	f2 e0       	ldi	r31, 0x02	; 2
   18844:	de 01       	movw	r26, r28
   18846:	11 96       	adiw	r26, 0x01	; 1
   18848:	01 90       	ld	r0, Z+
   1884a:	0d 92       	st	X+, r0
   1884c:	8a 95       	dec	r24
   1884e:	e1 f7       	brne	.-8      	; 0x18848 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x98>
   18850:	fe 01       	movw	r30, r28
   18852:	31 96       	adiw	r30, 0x01	; 1
   18854:	d4 01       	movw	r26, r8
   18856:	17 96       	adiw	r26, 0x07	; 7
   18858:	c4 01       	movw	r24, r8
   1885a:	0e 96       	adiw	r24, 0x0e	; 14
   1885c:	21 91       	ld	r18, Z+
   1885e:	2d 93       	st	X+, r18
   18860:	8a 17       	cp	r24, r26
   18862:	9b 07       	cpc	r25, r27
   18864:	d9 f7       	brne	.-10     	; 0x1885c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xac>
   18866:	82 e0       	ldi	r24, 0x02	; 2
   18868:	01 15       	cp	r16, r1
   1886a:	11 05       	cpc	r17, r1
   1886c:	51 f0       	breq	.+20     	; 0x18882 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xd2>
   1886e:	30 e2       	ldi	r19, 0x20	; 32
   18870:	c3 9e       	mul	r12, r19
   18872:	c0 01       	movw	r24, r0
   18874:	11 24       	eor	r1, r1
   18876:	86 60       	ori	r24, 0x06	; 6
   18878:	48 e0       	ldi	r20, 0x08	; 8
   1887a:	e4 9e       	mul	r14, r20
   1887c:	70 01       	movw	r14, r0
   1887e:	11 24       	eor	r1, r1
   18880:	8e 29       	or	r24, r14
   18882:	41 14       	cp	r4, r1
   18884:	51 04       	cpc	r5, r1
   18886:	29 f0       	breq	.+10     	; 0x18892 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe2>
   18888:	61 14       	cp	r6, r1
   1888a:	71 04       	cpc	r7, r1
   1888c:	09 f0       	breq	.+2      	; 0x18890 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe0>
   1888e:	98 c0       	rjmp	.+304    	; 0x189c0 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x210>
   18890:	80 68       	ori	r24, 0x80	; 128
   18892:	d4 01       	movw	r26, r8
   18894:	1e 96       	adiw	r26, 0x0e	; 14
   18896:	8c 93       	st	X, r24
   18898:	1e 97       	sbiw	r26, 0x0e	; 14
   1889a:	1f 96       	adiw	r26, 0x0f	; 15
   1889c:	1c 92       	st	X, r1
   1889e:	1f 97       	sbiw	r26, 0x0f	; 15
   188a0:	8f e0       	ldi	r24, 0x0F	; 15
   188a2:	50 96       	adiw	r26, 0x10	; 16
   188a4:	8c 93       	st	X, r24
   188a6:	74 01       	movw	r14, r8
   188a8:	b2 e0       	ldi	r27, 0x02	; 2
   188aa:	eb 0e       	add	r14, r27
   188ac:	f1 1c       	adc	r15, r1
   188ae:	2f e0       	ldi	r18, 0x0F	; 15
   188b0:	30 e0       	ldi	r19, 0x00	; 0
   188b2:	a7 01       	movw	r20, r14
   188b4:	b1 01       	movw	r22, r2
   188b6:	c4 01       	movw	r24, r8
   188b8:	0e 94 80 c3 	call	0x18700	; 0x18700 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   188bc:	01 15       	cp	r16, r1
   188be:	11 05       	cpc	r17, r1
   188c0:	61 f0       	breq	.+24     	; 0x188da <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x12a>
   188c2:	9c 01       	movw	r18, r24
   188c4:	a7 01       	movw	r20, r14
   188c6:	b8 01       	movw	r22, r16
   188c8:	c4 01       	movw	r24, r8
   188ca:	0e 94 80 c3 	call	0x18700	; 0x18700 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   188ce:	9c 01       	movw	r18, r24
   188d0:	a7 01       	movw	r20, r14
   188d2:	b5 01       	movw	r22, r10
   188d4:	c4 01       	movw	r24, r8
   188d6:	0e 94 80 c3 	call	0x18700	; 0x18700 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   188da:	41 14       	cp	r4, r1
   188dc:	51 04       	cpc	r5, r1
   188de:	79 f0       	breq	.+30     	; 0x188fe <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x14e>
   188e0:	9c 01       	movw	r18, r24
   188e2:	a7 01       	movw	r20, r14
   188e4:	b2 01       	movw	r22, r4
   188e6:	c4 01       	movw	r24, r8
   188e8:	0e 94 80 c3 	call	0x18700	; 0x18700 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   188ec:	61 14       	cp	r6, r1
   188ee:	71 04       	cpc	r7, r1
   188f0:	31 f0       	breq	.+12     	; 0x188fe <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x14e>
   188f2:	9c 01       	movw	r18, r24
   188f4:	a7 01       	movw	r20, r14
   188f6:	b3 01       	movw	r22, r6
   188f8:	c4 01       	movw	r24, r8
   188fa:	0e 94 80 c3 	call	0x18700	; 0x18700 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   188fe:	9c 01       	movw	r18, r24
   18900:	25 50       	subi	r18, 0x05	; 5
   18902:	31 09       	sbc	r19, r1
   18904:	a7 01       	movw	r20, r14
   18906:	60 e1       	ldi	r22, 0x10	; 16
   18908:	c4 01       	movw	r24, r8
   1890a:	0e 94 12 c3 	call	0x18624	; 0x18624 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   1890e:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   18912:	f4 01       	movw	r30, r8
   18914:	ec 5f       	subi	r30, 0xFC	; 252
   18916:	fd 4f       	sbci	r31, 0xFD	; 253
   18918:	60 83       	st	Z, r22
   1891a:	71 83       	std	Z+1, r23	; 0x01
   1891c:	82 83       	std	Z+2, r24	; 0x02
   1891e:	93 83       	std	Z+3, r25	; 0x03
   18920:	84 01       	movw	r16, r8
   18922:	08 5f       	subi	r16, 0xF8	; 248
   18924:	1d 4f       	sbci	r17, 0xFD	; 253
   18926:	f8 01       	movw	r30, r16
   18928:	60 83       	st	Z, r22
   1892a:	71 83       	std	Z+1, r23	; 0x01
   1892c:	82 83       	std	Z+2, r24	; 0x02
   1892e:	93 83       	std	Z+3, r25	; 0x03
   18930:	d4 01       	movw	r26, r8
   18932:	8d 91       	ld	r24, X+
   18934:	9c 91       	ld	r25, X
   18936:	dc 01       	movw	r26, r24
   18938:	ed 91       	ld	r30, X+
   1893a:	fc 91       	ld	r31, X
   1893c:	00 84       	ldd	r0, Z+8	; 0x08
   1893e:	f1 85       	ldd	r31, Z+9	; 0x09
   18940:	e0 2d       	mov	r30, r0
   18942:	19 95       	eicall
   18944:	89 2b       	or	r24, r25
   18946:	f1 f5       	brne	.+124    	; 0x189c4 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x214>
   18948:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   1894c:	f8 01       	movw	r30, r16
   1894e:	40 80       	ld	r4, Z
   18950:	51 80       	ldd	r5, Z+1	; 0x01
   18952:	62 80       	ldd	r6, Z+2	; 0x02
   18954:	73 80       	ldd	r7, Z+3	; 0x03
   18956:	64 19       	sub	r22, r4
   18958:	75 09       	sbc	r23, r5
   1895a:	86 09       	sbc	r24, r6
   1895c:	97 09       	sbc	r25, r7
   1895e:	62 33       	cpi	r22, 0x32	; 50
   18960:	71 05       	cpc	r23, r1
   18962:	81 05       	cpc	r24, r1
   18964:	91 05       	cpc	r25, r1
   18966:	20 f3       	brcs	.-56     	; 0x18930 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x180>
   18968:	f4 01       	movw	r30, r8
   1896a:	e5 5e       	subi	r30, 0xE5	; 229
   1896c:	fd 4f       	sbci	r31, 0xFD	; 253
   1896e:	8c ef       	ldi	r24, 0xFC	; 252
   18970:	9f ef       	ldi	r25, 0xFF	; 255
   18972:	91 83       	std	Z+1, r25	; 0x01
   18974:	80 83       	st	Z, r24
   18976:	d4 01       	movw	r26, r8
   18978:	8d 91       	ld	r24, X+
   1897a:	9c 91       	ld	r25, X
   1897c:	dc 01       	movw	r26, r24
   1897e:	ed 91       	ld	r30, X+
   18980:	fc 91       	ld	r31, X
   18982:	04 88       	ldd	r0, Z+20	; 0x14
   18984:	f5 89       	ldd	r31, Z+21	; 0x15
   18986:	e0 2d       	mov	r30, r0
   18988:	19 95       	eicall
   1898a:	3d c0       	rjmp	.+122    	; 0x18a06 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>
   1898c:	06 84       	ldd	r0, Z+14	; 0x0e
   1898e:	f7 85       	ldd	r31, Z+15	; 0x0f
   18990:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
   18992:	27 e4       	ldi	r18, 0x47	; 71
   18994:	39 e0       	ldi	r19, 0x09	; 9
   18996:	3a 83       	std	Y+2, r19	; 0x02
   18998:	29 83       	std	Y+1, r18	; 0x01
   1899a:	d4 01       	movw	r26, r8
   1899c:	a1 5f       	subi	r26, 0xF1	; 241
   1899e:	bd 4f       	sbci	r27, 0xFD	; 253
   189a0:	12 96       	adiw	r26, 0x02	; 2
   189a2:	2d 91       	ld	r18, X+
   189a4:	3d 91       	ld	r19, X+
   189a6:	4d 91       	ld	r20, X+
   189a8:	5c 91       	ld	r21, X
   189aa:	15 97       	sbiw	r26, 0x05	; 5
   189ac:	2b 83       	std	Y+3, r18	; 0x03
   189ae:	3c 83       	std	Y+4, r19	; 0x04
   189b0:	4d 83       	std	Y+5, r20	; 0x05
   189b2:	5e 83       	std	Y+6, r21	; 0x06
_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_():
   189b4:	4d 85       	ldd	r20, Y+13	; 0x0d
   189b6:	5e 85       	ldd	r21, Y+14	; 0x0e
   189b8:	be 01       	movw	r22, r28
   189ba:	6f 5f       	subi	r22, 0xFF	; 255
   189bc:	7f 4f       	sbci	r23, 0xFF	; 255
   189be:	35 cf       	rjmp	.-406    	; 0x1882a <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x7a>
   189c0:	80 6c       	ori	r24, 0xC0	; 192
   189c2:	67 cf       	rjmp	.-306    	; 0x18892 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe2>
   189c4:	be 01       	movw	r22, r28
   189c6:	68 5f       	subi	r22, 0xF8	; 248
   189c8:	7f 4f       	sbci	r23, 0xFF	; 255
   189ca:	c4 01       	movw	r24, r8
   189cc:	0e 94 21 c2 	call	0x18442	; 0x18442 <PubSubClient::readPacket(unsigned char*)>
   189d0:	04 97       	sbiw	r24, 0x04	; 4
   189d2:	b9 f5       	brne	.+110    	; 0x18a42 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x292>
   189d4:	f4 01       	movw	r30, r8
   189d6:	85 81       	ldd	r24, Z+5	; 0x05
   189d8:	94 01       	movw	r18, r8
   189da:	25 5e       	subi	r18, 0xE5	; 229
   189dc:	3d 4f       	sbci	r19, 0xFD	; 253
   189de:	79 01       	movw	r14, r18
   189e0:	81 11       	cpse	r24, r1
   189e2:	2b c0       	rjmp	.+86     	; 0x18a3a <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x28a>
   189e4:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   189e8:	d8 01       	movw	r26, r16
   189ea:	6d 93       	st	X+, r22
   189ec:	7d 93       	st	X+, r23
   189ee:	8d 93       	st	X+, r24
   189f0:	9c 93       	st	X, r25
   189f2:	13 97       	sbiw	r26, 0x03	; 3
   189f4:	f4 01       	movw	r30, r8
   189f6:	e4 5f       	subi	r30, 0xF4	; 244
   189f8:	fd 4f       	sbci	r31, 0xFD	; 253
   189fa:	10 82       	st	Z, r1
   189fc:	f7 01       	movw	r30, r14
   189fe:	11 82       	std	Z+1, r1	; 0x01
   18a00:	10 82       	st	Z, r1
   18a02:	dd 24       	eor	r13, r13
   18a04:	d3 94       	inc	r13
   18a06:	8d 2d       	mov	r24, r13
   18a08:	2e 96       	adiw	r28, 0x0e	; 14
   18a0a:	0f b6       	in	r0, 0x3f	; 63
   18a0c:	f8 94       	cli
   18a0e:	de bf       	out	0x3e, r29	; 62
   18a10:	0f be       	out	0x3f, r0	; 63
   18a12:	cd bf       	out	0x3d, r28	; 61
   18a14:	df 91       	pop	r29
   18a16:	cf 91       	pop	r28
   18a18:	1f 91       	pop	r17
   18a1a:	0f 91       	pop	r16
   18a1c:	ff 90       	pop	r15
   18a1e:	ef 90       	pop	r14
   18a20:	df 90       	pop	r13
   18a22:	cf 90       	pop	r12
   18a24:	bf 90       	pop	r11
   18a26:	af 90       	pop	r10
   18a28:	9f 90       	pop	r9
   18a2a:	8f 90       	pop	r8
   18a2c:	7f 90       	pop	r7
   18a2e:	6f 90       	pop	r6
   18a30:	5f 90       	pop	r5
   18a32:	4f 90       	pop	r4
   18a34:	3f 90       	pop	r3
   18a36:	2f 90       	pop	r2
   18a38:	08 95       	ret
   18a3a:	90 e0       	ldi	r25, 0x00	; 0
   18a3c:	d9 01       	movw	r26, r18
   18a3e:	8d 93       	st	X+, r24
   18a40:	9c 93       	st	X, r25
   18a42:	f4 01       	movw	r30, r8
   18a44:	80 81       	ld	r24, Z
   18a46:	91 81       	ldd	r25, Z+1	; 0x01
   18a48:	99 cf       	rjmp	.-206    	; 0x1897c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x1cc>
   18a4a:	e5 5e       	subi	r30, 0xE5	; 229
   18a4c:	fd 4f       	sbci	r31, 0xFD	; 253
   18a4e:	8e ef       	ldi	r24, 0xFE	; 254
   18a50:	9f ef       	ldi	r25, 0xFF	; 255
   18a52:	91 83       	std	Z+1, r25	; 0x01
   18a54:	80 83       	st	Z, r24
   18a56:	d7 cf       	rjmp	.-82     	; 0x18a06 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>

00018a58 <PubSubClient::connect(char const*)>:
_ZN12PubSubClient7connectEPKc():
   18a58:	af 92       	push	r10
   18a5a:	bf 92       	push	r11
   18a5c:	cf 92       	push	r12
   18a5e:	ef 92       	push	r14
   18a60:	0f 93       	push	r16
   18a62:	1f 93       	push	r17
   18a64:	b1 2c       	mov	r11, r1
   18a66:	a1 2c       	mov	r10, r1
   18a68:	c1 2c       	mov	r12, r1
   18a6a:	e1 2c       	mov	r14, r1
   18a6c:	10 e0       	ldi	r17, 0x00	; 0
   18a6e:	00 e0       	ldi	r16, 0x00	; 0
   18a70:	30 e0       	ldi	r19, 0x00	; 0
   18a72:	20 e0       	ldi	r18, 0x00	; 0
   18a74:	50 e0       	ldi	r21, 0x00	; 0
   18a76:	40 e0       	ldi	r20, 0x00	; 0
   18a78:	0e 94 d8 c3 	call	0x187b0	; 0x187b0 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)>
   18a7c:	1f 91       	pop	r17
   18a7e:	0f 91       	pop	r16
   18a80:	ef 90       	pop	r14
   18a82:	cf 90       	pop	r12
   18a84:	bf 90       	pop	r11
   18a86:	af 90       	pop	r10
   18a88:	08 95       	ret

00018a8a <PubSubClient::loop()>:
_ZN12PubSubClient4loopEv():
   18a8a:	2f 92       	push	r2
   18a8c:	3f 92       	push	r3
   18a8e:	4f 92       	push	r4
   18a90:	5f 92       	push	r5
   18a92:	6f 92       	push	r6
   18a94:	7f 92       	push	r7
   18a96:	8f 92       	push	r8
   18a98:	9f 92       	push	r9
   18a9a:	af 92       	push	r10
   18a9c:	bf 92       	push	r11
   18a9e:	cf 92       	push	r12
   18aa0:	df 92       	push	r13
   18aa2:	ef 92       	push	r14
   18aa4:	ff 92       	push	r15
   18aa6:	0f 93       	push	r16
   18aa8:	1f 93       	push	r17
   18aaa:	cf 93       	push	r28
   18aac:	df 93       	push	r29
   18aae:	00 d0       	rcall	.+0      	; 0x18ab0 <PubSubClient::loop()+0x26>
   18ab0:	1f 92       	push	r1
   18ab2:	1f 92       	push	r1
   18ab4:	cd b7       	in	r28, 0x3d	; 61
   18ab6:	de b7       	in	r29, 0x3e	; 62
   18ab8:	8c 01       	movw	r16, r24
   18aba:	2d b7       	in	r18, 0x3d	; 61
   18abc:	3e b7       	in	r19, 0x3e	; 62
   18abe:	3d 83       	std	Y+5, r19	; 0x05
   18ac0:	2c 83       	std	Y+4, r18	; 0x04
   18ac2:	0e 94 a2 c3 	call	0x18744	; 0x18744 <PubSubClient::connected()>
   18ac6:	58 2e       	mov	r5, r24
   18ac8:	88 23       	and	r24, r24
   18aca:	09 f4       	brne	.+2      	; 0x18ace <PubSubClient::loop()+0x44>
   18acc:	47 c0       	rjmp	.+142    	; 0x18b5c <PubSubClient::loop()+0xd2>
   18ace:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   18ad2:	4b 01       	movw	r8, r22
   18ad4:	5c 01       	movw	r10, r24
   18ad6:	78 01       	movw	r14, r16
   18ad8:	38 ef       	ldi	r19, 0xF8	; 248
   18ada:	e3 1a       	sub	r14, r19
   18adc:	3d ef       	ldi	r19, 0xFD	; 253
   18ade:	f3 0a       	sbc	r15, r19
   18ae0:	f7 01       	movw	r30, r14
   18ae2:	80 81       	ld	r24, Z
   18ae4:	91 81       	ldd	r25, Z+1	; 0x01
   18ae6:	a2 81       	ldd	r26, Z+2	; 0x02
   18ae8:	b3 81       	ldd	r27, Z+3	; 0x03
   18aea:	a5 01       	movw	r20, r10
   18aec:	94 01       	movw	r18, r8
   18aee:	28 1b       	sub	r18, r24
   18af0:	39 0b       	sbc	r19, r25
   18af2:	4a 0b       	sbc	r20, r26
   18af4:	5b 0b       	sbc	r21, r27
   18af6:	da 01       	movw	r26, r20
   18af8:	c9 01       	movw	r24, r18
   18afa:	89 39       	cpi	r24, 0x99	; 153
   18afc:	9a 43       	sbci	r25, 0x3A	; 58
   18afe:	a1 05       	cpc	r26, r1
   18b00:	b1 05       	cpc	r27, r1
   18b02:	98 f4       	brcc	.+38     	; 0x18b2a <PubSubClient::loop()+0xa0>
   18b04:	34 97       	sbiw	r30, 0x04	; 4
   18b06:	80 81       	ld	r24, Z
   18b08:	91 81       	ldd	r25, Z+1	; 0x01
   18b0a:	a2 81       	ldd	r26, Z+2	; 0x02
   18b0c:	b3 81       	ldd	r27, Z+3	; 0x03
   18b0e:	a5 01       	movw	r20, r10
   18b10:	94 01       	movw	r18, r8
   18b12:	28 1b       	sub	r18, r24
   18b14:	39 0b       	sbc	r19, r25
   18b16:	4a 0b       	sbc	r20, r26
   18b18:	5b 0b       	sbc	r21, r27
   18b1a:	da 01       	movw	r26, r20
   18b1c:	c9 01       	movw	r24, r18
   18b1e:	89 39       	cpi	r24, 0x99	; 153
   18b20:	9a 43       	sbci	r25, 0x3A	; 58
   18b22:	a1 05       	cpc	r26, r1
   18b24:	b1 05       	cpc	r27, r1
   18b26:	08 f4       	brcc	.+2      	; 0x18b2a <PubSubClient::loop()+0xa0>
   18b28:	58 c0       	rjmp	.+176    	; 0x18bda <PubSubClient::loop()+0x150>
   18b2a:	d8 01       	movw	r26, r16
   18b2c:	8d 91       	ld	r24, X+
   18b2e:	9c 91       	ld	r25, X
   18b30:	68 01       	movw	r12, r16
   18b32:	b4 ef       	ldi	r27, 0xF4	; 244
   18b34:	cb 1a       	sub	r12, r27
   18b36:	bd ef       	ldi	r27, 0xFD	; 253
   18b38:	db 0a       	sbc	r13, r27
   18b3a:	f6 01       	movw	r30, r12
   18b3c:	20 81       	ld	r18, Z
   18b3e:	22 23       	and	r18, r18
   18b40:	69 f1       	breq	.+90     	; 0x18b9c <PubSubClient::loop()+0x112>
   18b42:	3f 96       	adiw	r30, 0x0f	; 15
   18b44:	2c ef       	ldi	r18, 0xFC	; 252
   18b46:	3f ef       	ldi	r19, 0xFF	; 255
   18b48:	31 83       	std	Z+1, r19	; 0x01
   18b4a:	20 83       	st	Z, r18
   18b4c:	dc 01       	movw	r26, r24
   18b4e:	ed 91       	ld	r30, X+
   18b50:	fc 91       	ld	r31, X
   18b52:	04 88       	ldd	r0, Z+20	; 0x14
   18b54:	f5 89       	ldd	r31, Z+21	; 0x15
   18b56:	e0 2d       	mov	r30, r0
   18b58:	19 95       	eicall
   18b5a:	51 2c       	mov	r5, r1
   18b5c:	85 2d       	mov	r24, r5
   18b5e:	ec 81       	ldd	r30, Y+4	; 0x04
   18b60:	fd 81       	ldd	r31, Y+5	; 0x05
   18b62:	0f b6       	in	r0, 0x3f	; 63
   18b64:	f8 94       	cli
   18b66:	fe bf       	out	0x3e, r31	; 62
   18b68:	0f be       	out	0x3f, r0	; 63
   18b6a:	ed bf       	out	0x3d, r30	; 61
   18b6c:	0f 90       	pop	r0
   18b6e:	0f 90       	pop	r0
   18b70:	0f 90       	pop	r0
   18b72:	0f 90       	pop	r0
   18b74:	0f 90       	pop	r0
   18b76:	df 91       	pop	r29
   18b78:	cf 91       	pop	r28
   18b7a:	1f 91       	pop	r17
   18b7c:	0f 91       	pop	r16
   18b7e:	ff 90       	pop	r15
   18b80:	ef 90       	pop	r14
   18b82:	df 90       	pop	r13
   18b84:	cf 90       	pop	r12
   18b86:	bf 90       	pop	r11
   18b88:	af 90       	pop	r10
   18b8a:	9f 90       	pop	r9
   18b8c:	8f 90       	pop	r8
   18b8e:	7f 90       	pop	r7
   18b90:	6f 90       	pop	r6
   18b92:	5f 90       	pop	r5
   18b94:	4f 90       	pop	r4
   18b96:	3f 90       	pop	r3
   18b98:	2f 90       	pop	r2
   18b9a:	08 95       	ret
   18b9c:	20 ec       	ldi	r18, 0xC0	; 192
   18b9e:	f8 01       	movw	r30, r16
   18ba0:	22 83       	std	Z+2, r18	; 0x02
   18ba2:	13 82       	std	Z+3, r1	; 0x03
   18ba4:	dc 01       	movw	r26, r24
   18ba6:	ed 91       	ld	r30, X+
   18ba8:	fc 91       	ld	r31, X
   18baa:	02 80       	ldd	r0, Z+2	; 0x02
   18bac:	f3 81       	ldd	r31, Z+3	; 0x03
   18bae:	e0 2d       	mov	r30, r0
   18bb0:	42 e0       	ldi	r20, 0x02	; 2
   18bb2:	50 e0       	ldi	r21, 0x00	; 0
   18bb4:	b8 01       	movw	r22, r16
   18bb6:	6e 5f       	subi	r22, 0xFE	; 254
   18bb8:	7f 4f       	sbci	r23, 0xFF	; 255
   18bba:	19 95       	eicall
   18bbc:	f8 01       	movw	r30, r16
   18bbe:	ec 5f       	subi	r30, 0xFC	; 252
   18bc0:	fd 4f       	sbci	r31, 0xFD	; 253
   18bc2:	80 82       	st	Z, r8
   18bc4:	91 82       	std	Z+1, r9	; 0x01
   18bc6:	a2 82       	std	Z+2, r10	; 0x02
   18bc8:	b3 82       	std	Z+3, r11	; 0x03
   18bca:	f7 01       	movw	r30, r14
   18bcc:	80 82       	st	Z, r8
   18bce:	91 82       	std	Z+1, r9	; 0x01
   18bd0:	a2 82       	std	Z+2, r10	; 0x02
   18bd2:	b3 82       	std	Z+3, r11	; 0x03
   18bd4:	81 e0       	ldi	r24, 0x01	; 1
   18bd6:	d6 01       	movw	r26, r12
   18bd8:	8c 93       	st	X, r24
   18bda:	f8 01       	movw	r30, r16
   18bdc:	80 81       	ld	r24, Z
   18bde:	91 81       	ldd	r25, Z+1	; 0x01
   18be0:	dc 01       	movw	r26, r24
   18be2:	ed 91       	ld	r30, X+
   18be4:	fc 91       	ld	r31, X
   18be6:	00 84       	ldd	r0, Z+8	; 0x08
   18be8:	f1 85       	ldd	r31, Z+9	; 0x09
   18bea:	e0 2d       	mov	r30, r0
   18bec:	19 95       	eicall
   18bee:	89 2b       	or	r24, r25
   18bf0:	09 f4       	brne	.+2      	; 0x18bf4 <PubSubClient::loop()+0x16a>
   18bf2:	b4 cf       	rjmp	.-152    	; 0x18b5c <PubSubClient::loop()+0xd2>
   18bf4:	be 01       	movw	r22, r28
   18bf6:	6f 5f       	subi	r22, 0xFF	; 255
   18bf8:	7f 4f       	sbci	r23, 0xFF	; 255
   18bfa:	c8 01       	movw	r24, r16
   18bfc:	0e 94 21 c2 	call	0x18442	; 0x18442 <PubSubClient::readPacket(unsigned char*)>
   18c00:	6c 01       	movw	r12, r24
   18c02:	89 2b       	or	r24, r25
   18c04:	09 f4       	brne	.+2      	; 0x18c08 <PubSubClient::loop()+0x17e>
   18c06:	aa cf       	rjmp	.-172    	; 0x18b5c <PubSubClient::loop()+0xd2>
   18c08:	f7 01       	movw	r30, r14
   18c0a:	80 82       	st	Z, r8
   18c0c:	91 82       	std	Z+1, r9	; 0x01
   18c0e:	a2 82       	std	Z+2, r10	; 0x02
   18c10:	b3 82       	std	Z+3, r11	; 0x03
   18c12:	d8 01       	movw	r26, r16
   18c14:	12 96       	adiw	r26, 0x02	; 2
   18c16:	4c 90       	ld	r4, X
   18c18:	12 97       	sbiw	r26, 0x02	; 2
   18c1a:	84 2d       	mov	r24, r4
   18c1c:	80 7f       	andi	r24, 0xF0	; 240
   18c1e:	80 33       	cpi	r24, 0x30	; 48
   18c20:	09 f0       	breq	.+2      	; 0x18c24 <PubSubClient::loop()+0x19a>
   18c22:	9d c0       	rjmp	.+314    	; 0x18d5e <PubSubClient::loop()+0x2d4>
   18c24:	f8 01       	movw	r30, r16
   18c26:	e3 5f       	subi	r30, 0xF3	; 243
   18c28:	fd 4f       	sbci	r31, 0xFD	; 253
   18c2a:	60 80       	ld	r6, Z
   18c2c:	71 80       	ldd	r7, Z+1	; 0x01
   18c2e:	61 14       	cp	r6, r1
   18c30:	71 04       	cpc	r7, r1
   18c32:	09 f4       	brne	.+2      	; 0x18c36 <PubSubClient::loop()+0x1ac>
   18c34:	93 cf       	rjmp	.-218    	; 0x18b5c <PubSubClient::loop()+0xd2>
   18c36:	ed b7       	in	r30, 0x3d	; 61
   18c38:	fe b7       	in	r31, 0x3e	; 62
   18c3a:	fb 83       	std	Y+3, r31	; 0x03
   18c3c:	ea 83       	std	Y+2, r30	; 0x02
   18c3e:	29 81       	ldd	r18, Y+1	; 0x01
   18c40:	30 e0       	ldi	r19, 0x00	; 0
   18c42:	a2 0f       	add	r26, r18
   18c44:	b3 1f       	adc	r27, r19
   18c46:	13 96       	adiw	r26, 0x03	; 3
   18c48:	ec 91       	ld	r30, X
   18c4a:	13 97       	sbiw	r26, 0x03	; 3
   18c4c:	f0 e0       	ldi	r31, 0x00	; 0
   18c4e:	fe 2f       	mov	r31, r30
   18c50:	ee 27       	eor	r30, r30
   18c52:	14 96       	adiw	r26, 0x04	; 4
   18c54:	6c 91       	ld	r22, X
   18c56:	e6 0f       	add	r30, r22
   18c58:	f1 1d       	adc	r31, r1
   18c5a:	cf 01       	movw	r24, r30
   18c5c:	01 96       	adiw	r24, 0x01	; 1
   18c5e:	4d b7       	in	r20, 0x3d	; 61
   18c60:	5e b7       	in	r21, 0x3e	; 62
   18c62:	48 1b       	sub	r20, r24
   18c64:	59 0b       	sbc	r21, r25
   18c66:	0f b6       	in	r0, 0x3f	; 63
   18c68:	f8 94       	cli
   18c6a:	5e bf       	out	0x3e, r21	; 62
   18c6c:	0f be       	out	0x3f, r0	; 63
   18c6e:	4d bf       	out	0x3d, r20	; 61
   18c70:	8d b7       	in	r24, 0x3d	; 61
   18c72:	9e b7       	in	r25, 0x3e	; 62
   18c74:	01 96       	adiw	r24, 0x01	; 1
   18c76:	a9 01       	movw	r20, r18
   18c78:	4b 5f       	subi	r20, 0xFB	; 251
   18c7a:	5f 4f       	sbci	r21, 0xFF	; 255
   18c7c:	40 0f       	add	r20, r16
   18c7e:	51 1f       	adc	r21, r17
   18c80:	1c 01       	movw	r2, r24
   18c82:	bc 01       	movw	r22, r24
   18c84:	6e 0f       	add	r22, r30
   18c86:	7f 1f       	adc	r23, r31
   18c88:	26 16       	cp	r2, r22
   18c8a:	37 06       	cpc	r3, r23
   18c8c:	39 f0       	breq	.+14     	; 0x18c9c <PubSubClient::loop()+0x212>
   18c8e:	da 01       	movw	r26, r20
   18c90:	fd 90       	ld	r15, X+
   18c92:	ad 01       	movw	r20, r26
   18c94:	d1 01       	movw	r26, r2
   18c96:	fd 92       	st	X+, r15
   18c98:	1d 01       	movw	r2, r26
   18c9a:	f6 cf       	rjmp	.-20     	; 0x18c88 <PubSubClient::loop()+0x1fe>
   18c9c:	d1 01       	movw	r26, r2
   18c9e:	1c 92       	st	X, r1
   18ca0:	78 01       	movw	r14, r16
   18ca2:	b2 e0       	ldi	r27, 0x02	; 2
   18ca4:	eb 0e       	add	r14, r27
   18ca6:	f1 1c       	adc	r15, r1
   18ca8:	a6 01       	movw	r20, r12
   18caa:	42 1b       	sub	r20, r18
   18cac:	53 0b       	sbc	r21, r19
   18cae:	64 2d       	mov	r22, r4
   18cb0:	66 70       	andi	r22, 0x06	; 6
   18cb2:	46 2e       	mov	r4, r22
   18cb4:	a2 e0       	ldi	r26, 0x02	; 2
   18cb6:	6a 13       	cpse	r22, r26
   18cb8:	44 c0       	rjmp	.+136    	; 0x18d42 <PubSubClient::loop()+0x2b8>
   18cba:	b9 01       	movw	r22, r18
   18cbc:	6e 0f       	add	r22, r30
   18cbe:	7f 1f       	adc	r23, r31
   18cc0:	d8 01       	movw	r26, r16
   18cc2:	a6 0f       	add	r26, r22
   18cc4:	b7 1f       	adc	r27, r23
   18cc6:	15 96       	adiw	r26, 0x05	; 5
   18cc8:	2c 91       	ld	r18, X
   18cca:	15 97       	sbiw	r26, 0x05	; 5
   18ccc:	30 e0       	ldi	r19, 0x00	; 0
   18cce:	32 2f       	mov	r19, r18
   18cd0:	22 27       	eor	r18, r18
   18cd2:	16 96       	adiw	r26, 0x06	; 6
   18cd4:	2c 90       	ld	r2, X
   18cd6:	22 0e       	add	r2, r18
   18cd8:	33 2e       	mov	r3, r19
   18cda:	31 1c       	adc	r3, r1
   18cdc:	4e 1b       	sub	r20, r30
   18cde:	5f 0b       	sbc	r21, r31
   18ce0:	45 50       	subi	r20, 0x05	; 5
   18ce2:	51 09       	sbc	r21, r1
   18ce4:	6b 5f       	subi	r22, 0xFB	; 251
   18ce6:	7f 4f       	sbci	r23, 0xFF	; 255
   18ce8:	6e 0d       	add	r22, r14
   18cea:	7f 1d       	adc	r23, r15
   18cec:	f3 01       	movw	r30, r6
   18cee:	19 95       	eicall
   18cf0:	80 e4       	ldi	r24, 0x40	; 64
   18cf2:	d8 01       	movw	r26, r16
   18cf4:	12 96       	adiw	r26, 0x02	; 2
   18cf6:	8c 93       	st	X, r24
   18cf8:	12 97       	sbiw	r26, 0x02	; 2
   18cfa:	13 96       	adiw	r26, 0x03	; 3
   18cfc:	4c 92       	st	X, r4
   18cfe:	13 97       	sbiw	r26, 0x03	; 3
   18d00:	14 96       	adiw	r26, 0x04	; 4
   18d02:	3c 92       	st	X, r3
   18d04:	14 97       	sbiw	r26, 0x04	; 4
   18d06:	15 96       	adiw	r26, 0x05	; 5
   18d08:	2c 92       	st	X, r2
   18d0a:	15 97       	sbiw	r26, 0x05	; 5
   18d0c:	8d 91       	ld	r24, X+
   18d0e:	9c 91       	ld	r25, X
   18d10:	dc 01       	movw	r26, r24
   18d12:	ed 91       	ld	r30, X+
   18d14:	fc 91       	ld	r31, X
   18d16:	02 80       	ldd	r0, Z+2	; 0x02
   18d18:	f3 81       	ldd	r31, Z+3	; 0x03
   18d1a:	e0 2d       	mov	r30, r0
   18d1c:	44 e0       	ldi	r20, 0x04	; 4
   18d1e:	50 e0       	ldi	r21, 0x00	; 0
   18d20:	b7 01       	movw	r22, r14
   18d22:	19 95       	eicall
   18d24:	f8 01       	movw	r30, r16
   18d26:	ec 5f       	subi	r30, 0xFC	; 252
   18d28:	fd 4f       	sbci	r31, 0xFD	; 253
   18d2a:	80 82       	st	Z, r8
   18d2c:	91 82       	std	Z+1, r9	; 0x01
   18d2e:	a2 82       	std	Z+2, r10	; 0x02
   18d30:	b3 82       	std	Z+3, r11	; 0x03
   18d32:	2a 81       	ldd	r18, Y+2	; 0x02
   18d34:	3b 81       	ldd	r19, Y+3	; 0x03
   18d36:	0f b6       	in	r0, 0x3f	; 63
   18d38:	f8 94       	cli
   18d3a:	3e bf       	out	0x3e, r19	; 62
   18d3c:	0f be       	out	0x3f, r0	; 63
   18d3e:	2d bf       	out	0x3d, r18	; 61
   18d40:	0d cf       	rjmp	.-486    	; 0x18b5c <PubSubClient::loop()+0xd2>
   18d42:	4e 1b       	sub	r20, r30
   18d44:	5f 0b       	sbc	r21, r31
   18d46:	43 50       	subi	r20, 0x03	; 3
   18d48:	51 09       	sbc	r21, r1
   18d4a:	2d 5f       	subi	r18, 0xFD	; 253
   18d4c:	3f 4f       	sbci	r19, 0xFF	; 255
   18d4e:	e2 0f       	add	r30, r18
   18d50:	f3 1f       	adc	r31, r19
   18d52:	b7 01       	movw	r22, r14
   18d54:	6e 0f       	add	r22, r30
   18d56:	7f 1f       	adc	r23, r31
   18d58:	f3 01       	movw	r30, r6
   18d5a:	19 95       	eicall
   18d5c:	ea cf       	rjmp	.-44     	; 0x18d32 <PubSubClient::loop()+0x2a8>
   18d5e:	80 3c       	cpi	r24, 0xC0	; 192
   18d60:	a1 f4       	brne	.+40     	; 0x18d8a <PubSubClient::loop()+0x300>
   18d62:	80 ed       	ldi	r24, 0xD0	; 208
   18d64:	12 96       	adiw	r26, 0x02	; 2
   18d66:	8c 93       	st	X, r24
   18d68:	12 97       	sbiw	r26, 0x02	; 2
   18d6a:	13 96       	adiw	r26, 0x03	; 3
   18d6c:	1c 92       	st	X, r1
   18d6e:	f8 01       	movw	r30, r16
   18d70:	81 91       	ld	r24, Z+
   18d72:	91 91       	ld	r25, Z+
   18d74:	bf 01       	movw	r22, r30
   18d76:	dc 01       	movw	r26, r24
   18d78:	ed 91       	ld	r30, X+
   18d7a:	fc 91       	ld	r31, X
   18d7c:	02 80       	ldd	r0, Z+2	; 0x02
   18d7e:	f3 81       	ldd	r31, Z+3	; 0x03
   18d80:	e0 2d       	mov	r30, r0
   18d82:	42 e0       	ldi	r20, 0x02	; 2
   18d84:	50 e0       	ldi	r21, 0x00	; 0
   18d86:	19 95       	eicall
   18d88:	e9 ce       	rjmp	.-558    	; 0x18b5c <PubSubClient::loop()+0xd2>
   18d8a:	80 3d       	cpi	r24, 0xD0	; 208
   18d8c:	09 f0       	breq	.+2      	; 0x18d90 <PubSubClient::loop()+0x306>
   18d8e:	e6 ce       	rjmp	.-564    	; 0x18b5c <PubSubClient::loop()+0xd2>
   18d90:	f8 01       	movw	r30, r16
   18d92:	e4 5f       	subi	r30, 0xF4	; 244
   18d94:	fd 4f       	sbci	r31, 0xFD	; 253
   18d96:	10 82       	st	Z, r1
   18d98:	e1 ce       	rjmp	.-574    	; 0x18b5c <PubSubClient::loop()+0xd2>

00018d9a <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)>:
_ZN12PubSubClient7publishEPKcPKhjb():
   18d9a:	9f 92       	push	r9
   18d9c:	af 92       	push	r10
   18d9e:	bf 92       	push	r11
   18da0:	cf 92       	push	r12
   18da2:	df 92       	push	r13
   18da4:	ef 92       	push	r14
   18da6:	ff 92       	push	r15
   18da8:	0f 93       	push	r16
   18daa:	1f 93       	push	r17
   18dac:	cf 93       	push	r28
   18dae:	df 93       	push	r29
   18db0:	ec 01       	movw	r28, r24
   18db2:	6b 01       	movw	r12, r22
   18db4:	94 2e       	mov	r9, r20
   18db6:	15 2f       	mov	r17, r21
   18db8:	79 01       	movw	r14, r18
   18dba:	0e 94 a2 c3 	call	0x18744	; 0x18744 <PubSubClient::connected()>
   18dbe:	88 23       	and	r24, r24
   18dc0:	09 f4       	brne	.+2      	; 0x18dc4 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x2a>
   18dc2:	41 c0       	rjmp	.+130    	; 0x18e46 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0xac>
   18dc4:	f6 01       	movw	r30, r12
   18dc6:	01 90       	ld	r0, Z+
   18dc8:	00 20       	and	r0, r0
   18dca:	e9 f7       	brne	.-6      	; 0x18dc6 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x2c>
   18dcc:	31 97       	sbiw	r30, 0x01	; 1
   18dce:	ec 19       	sub	r30, r12
   18dd0:	fd 09       	sbc	r31, r13
   18dd2:	c7 01       	movw	r24, r14
   18dd4:	07 96       	adiw	r24, 0x07	; 7
   18dd6:	e8 0f       	add	r30, r24
   18dd8:	f9 1f       	adc	r31, r25
   18dda:	e1 30       	cpi	r30, 0x01	; 1
   18ddc:	f2 40       	sbci	r31, 0x02	; 2
   18dde:	98 f5       	brcc	.+102    	; 0x18e46 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0xac>
   18de0:	5e 01       	movw	r10, r28
   18de2:	82 e0       	ldi	r24, 0x02	; 2
   18de4:	a8 0e       	add	r10, r24
   18de6:	b1 1c       	adc	r11, r1
   18de8:	25 e0       	ldi	r18, 0x05	; 5
   18dea:	30 e0       	ldi	r19, 0x00	; 0
   18dec:	a5 01       	movw	r20, r10
   18dee:	b6 01       	movw	r22, r12
   18df0:	ce 01       	movw	r24, r28
   18df2:	0e 94 80 c3 	call	0x18700	; 0x18700 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   18df6:	e9 2d       	mov	r30, r9
   18df8:	f1 2f       	mov	r31, r17
   18dfa:	dc 01       	movw	r26, r24
   18dfc:	12 96       	adiw	r26, 0x02	; 2
   18dfe:	ac 0f       	add	r26, r28
   18e00:	bd 1f       	adc	r27, r29
   18e02:	af 01       	movw	r20, r30
   18e04:	4e 0d       	add	r20, r14
   18e06:	5f 1d       	adc	r21, r15
   18e08:	e4 17       	cp	r30, r20
   18e0a:	f5 07       	cpc	r31, r21
   18e0c:	19 f0       	breq	.+6      	; 0x18e14 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x7a>
   18e0e:	21 91       	ld	r18, Z+
   18e10:	2d 93       	st	X+, r18
   18e12:	fa cf       	rjmp	.-12     	; 0x18e08 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x6e>
   18e14:	25 e0       	ldi	r18, 0x05	; 5
   18e16:	e2 1a       	sub	r14, r18
   18e18:	f1 08       	sbc	r15, r1
   18e1a:	61 e3       	ldi	r22, 0x31	; 49
   18e1c:	01 11       	cpse	r16, r1
   18e1e:	01 c0       	rjmp	.+2      	; 0x18e22 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x88>
   18e20:	60 e3       	ldi	r22, 0x30	; 48
   18e22:	9c 01       	movw	r18, r24
   18e24:	2e 0d       	add	r18, r14
   18e26:	3f 1d       	adc	r19, r15
   18e28:	a5 01       	movw	r20, r10
   18e2a:	ce 01       	movw	r24, r28
   18e2c:	df 91       	pop	r29
   18e2e:	cf 91       	pop	r28
   18e30:	1f 91       	pop	r17
   18e32:	0f 91       	pop	r16
   18e34:	ff 90       	pop	r15
   18e36:	ef 90       	pop	r14
   18e38:	df 90       	pop	r13
   18e3a:	cf 90       	pop	r12
   18e3c:	bf 90       	pop	r11
   18e3e:	af 90       	pop	r10
   18e40:	9f 90       	pop	r9
   18e42:	0c 94 12 c3 	jmp	0x18624	; 0x18624 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   18e46:	80 e0       	ldi	r24, 0x00	; 0
   18e48:	df 91       	pop	r29
   18e4a:	cf 91       	pop	r28
   18e4c:	1f 91       	pop	r17
   18e4e:	0f 91       	pop	r16
   18e50:	ff 90       	pop	r15
   18e52:	ef 90       	pop	r14
   18e54:	df 90       	pop	r13
   18e56:	cf 90       	pop	r12
   18e58:	bf 90       	pop	r11
   18e5a:	af 90       	pop	r10
   18e5c:	9f 90       	pop	r9
   18e5e:	08 95       	ret

00018e60 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
   18e60:	0f 93       	push	r16
   18e62:	fa 01       	movw	r30, r20
   18e64:	01 90       	ld	r0, Z+
   18e66:	00 20       	and	r0, r0
   18e68:	e9 f7       	brne	.-6      	; 0x18e64 <PubSubClient::publish(char const*, char const*)+0x4>
   18e6a:	31 97       	sbiw	r30, 0x01	; 1
   18e6c:	9f 01       	movw	r18, r30
   18e6e:	24 1b       	sub	r18, r20
   18e70:	35 0b       	sbc	r19, r21
   18e72:	00 e0       	ldi	r16, 0x00	; 0
   18e74:	0e 94 cd c6 	call	0x18d9a	; 0x18d9a <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)>
   18e78:	0f 91       	pop	r16
   18e7a:	08 95       	ret

00018e7c <PubSubClient::subscribe(char const*, unsigned char)>:
_ZN12PubSubClient9subscribeEPKch():
   18e7c:	df 92       	push	r13
   18e7e:	ef 92       	push	r14
   18e80:	ff 92       	push	r15
   18e82:	0f 93       	push	r16
   18e84:	1f 93       	push	r17
   18e86:	cf 93       	push	r28
   18e88:	df 93       	push	r29
   18e8a:	42 30       	cpi	r20, 0x02	; 2
   18e8c:	08 f0       	brcs	.+2      	; 0x18e90 <PubSubClient::subscribe(char const*, unsigned char)+0x14>
   18e8e:	41 c0       	rjmp	.+130    	; 0x18f12 <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   18e90:	fb 01       	movw	r30, r22
   18e92:	01 90       	ld	r0, Z+
   18e94:	00 20       	and	r0, r0
   18e96:	e9 f7       	brne	.-6      	; 0x18e92 <PubSubClient::subscribe(char const*, unsigned char)+0x16>
   18e98:	9f 01       	movw	r18, r30
   18e9a:	26 1b       	sub	r18, r22
   18e9c:	37 0b       	sbc	r19, r23
   18e9e:	28 5f       	subi	r18, 0xF8	; 248
   18ea0:	3f 4f       	sbci	r19, 0xFF	; 255
   18ea2:	21 30       	cpi	r18, 0x01	; 1
   18ea4:	32 40       	sbci	r19, 0x02	; 2
   18ea6:	a8 f5       	brcc	.+106    	; 0x18f12 <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   18ea8:	d4 2e       	mov	r13, r20
   18eaa:	8b 01       	movw	r16, r22
   18eac:	ec 01       	movw	r28, r24
   18eae:	0e 94 a2 c3 	call	0x18744	; 0x18744 <PubSubClient::connected()>
   18eb2:	88 23       	and	r24, r24
   18eb4:	71 f1       	breq	.+92     	; 0x18f12 <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   18eb6:	fe 01       	movw	r30, r28
   18eb8:	ee 5f       	subi	r30, 0xFE	; 254
   18eba:	fd 4f       	sbci	r31, 0xFD	; 253
   18ebc:	80 81       	ld	r24, Z
   18ebe:	91 81       	ldd	r25, Z+1	; 0x01
   18ec0:	01 96       	adiw	r24, 0x01	; 1
   18ec2:	21 f1       	breq	.+72     	; 0x18f0c <PubSubClient::subscribe(char const*, unsigned char)+0x90>
   18ec4:	91 83       	std	Z+1, r25	; 0x01
   18ec6:	80 83       	st	Z, r24
   18ec8:	80 81       	ld	r24, Z
   18eca:	91 81       	ldd	r25, Z+1	; 0x01
   18ecc:	9f 83       	std	Y+7, r25	; 0x07
   18ece:	88 87       	std	Y+8, r24	; 0x08
   18ed0:	7e 01       	movw	r14, r28
   18ed2:	52 e0       	ldi	r21, 0x02	; 2
   18ed4:	e5 0e       	add	r14, r21
   18ed6:	f1 1c       	adc	r15, r1
   18ed8:	27 e0       	ldi	r18, 0x07	; 7
   18eda:	30 e0       	ldi	r19, 0x00	; 0
   18edc:	a7 01       	movw	r20, r14
   18ede:	b8 01       	movw	r22, r16
   18ee0:	ce 01       	movw	r24, r28
   18ee2:	0e 94 80 c3 	call	0x18700	; 0x18700 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   18ee6:	fe 01       	movw	r30, r28
   18ee8:	e8 0f       	add	r30, r24
   18eea:	f9 1f       	adc	r31, r25
   18eec:	d2 82       	std	Z+2, r13	; 0x02
   18eee:	9c 01       	movw	r18, r24
   18ef0:	24 50       	subi	r18, 0x04	; 4
   18ef2:	31 09       	sbc	r19, r1
   18ef4:	a7 01       	movw	r20, r14
   18ef6:	62 e8       	ldi	r22, 0x82	; 130
   18ef8:	ce 01       	movw	r24, r28
   18efa:	df 91       	pop	r29
   18efc:	cf 91       	pop	r28
   18efe:	1f 91       	pop	r17
   18f00:	0f 91       	pop	r16
   18f02:	ff 90       	pop	r15
   18f04:	ef 90       	pop	r14
   18f06:	df 90       	pop	r13
   18f08:	0c 94 12 c3 	jmp	0x18624	; 0x18624 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   18f0c:	81 e0       	ldi	r24, 0x01	; 1
   18f0e:	90 e0       	ldi	r25, 0x00	; 0
   18f10:	d9 cf       	rjmp	.-78     	; 0x18ec4 <PubSubClient::subscribe(char const*, unsigned char)+0x48>
   18f12:	80 e0       	ldi	r24, 0x00	; 0
   18f14:	df 91       	pop	r29
   18f16:	cf 91       	pop	r28
   18f18:	1f 91       	pop	r17
   18f1a:	0f 91       	pop	r16
   18f1c:	ff 90       	pop	r15
   18f1e:	ef 90       	pop	r14
   18f20:	df 90       	pop	r13
   18f22:	08 95       	ret

00018f24 <PubSubClient::subscribe(char const*)>:
_ZN12PubSubClient9subscribeEPKc():
   18f24:	40 e0       	ldi	r20, 0x00	; 0
   18f26:	0c 94 3e c7 	jmp	0x18e7c	; 0x18e7c <PubSubClient::subscribe(char const*, unsigned char)>

00018f2a <PubSubClient::unsubscribe(char const*)>:
_ZN12PubSubClient11unsubscribeEPKc():
   18f2a:	ef 92       	push	r14
   18f2c:	ff 92       	push	r15
   18f2e:	0f 93       	push	r16
   18f30:	1f 93       	push	r17
   18f32:	cf 93       	push	r28
   18f34:	df 93       	push	r29
   18f36:	fb 01       	movw	r30, r22
   18f38:	01 90       	ld	r0, Z+
   18f3a:	00 20       	and	r0, r0
   18f3c:	e9 f7       	brne	.-6      	; 0x18f38 <PubSubClient::unsubscribe(char const*)+0xe>
   18f3e:	9f 01       	movw	r18, r30
   18f40:	26 1b       	sub	r18, r22
   18f42:	37 0b       	sbc	r19, r23
   18f44:	28 5f       	subi	r18, 0xF8	; 248
   18f46:	3f 4f       	sbci	r19, 0xFF	; 255
   18f48:	21 30       	cpi	r18, 0x01	; 1
   18f4a:	32 40       	sbci	r19, 0x02	; 2
   18f4c:	78 f5       	brcc	.+94     	; 0x18fac <PubSubClient::unsubscribe(char const*)+0x82>
   18f4e:	8b 01       	movw	r16, r22
   18f50:	ec 01       	movw	r28, r24
   18f52:	0e 94 a2 c3 	call	0x18744	; 0x18744 <PubSubClient::connected()>
   18f56:	88 23       	and	r24, r24
   18f58:	49 f1       	breq	.+82     	; 0x18fac <PubSubClient::unsubscribe(char const*)+0x82>
   18f5a:	fe 01       	movw	r30, r28
   18f5c:	ee 5f       	subi	r30, 0xFE	; 254
   18f5e:	fd 4f       	sbci	r31, 0xFD	; 253
   18f60:	80 81       	ld	r24, Z
   18f62:	91 81       	ldd	r25, Z+1	; 0x01
   18f64:	01 96       	adiw	r24, 0x01	; 1
   18f66:	f9 f0       	breq	.+62     	; 0x18fa6 <PubSubClient::unsubscribe(char const*)+0x7c>
   18f68:	91 83       	std	Z+1, r25	; 0x01
   18f6a:	80 83       	st	Z, r24
   18f6c:	80 81       	ld	r24, Z
   18f6e:	91 81       	ldd	r25, Z+1	; 0x01
   18f70:	9f 83       	std	Y+7, r25	; 0x07
   18f72:	88 87       	std	Y+8, r24	; 0x08
   18f74:	7e 01       	movw	r14, r28
   18f76:	42 e0       	ldi	r20, 0x02	; 2
   18f78:	e4 0e       	add	r14, r20
   18f7a:	f1 1c       	adc	r15, r1
   18f7c:	27 e0       	ldi	r18, 0x07	; 7
   18f7e:	30 e0       	ldi	r19, 0x00	; 0
   18f80:	a7 01       	movw	r20, r14
   18f82:	b8 01       	movw	r22, r16
   18f84:	ce 01       	movw	r24, r28
   18f86:	0e 94 80 c3 	call	0x18700	; 0x18700 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   18f8a:	9c 01       	movw	r18, r24
   18f8c:	25 50       	subi	r18, 0x05	; 5
   18f8e:	31 09       	sbc	r19, r1
   18f90:	a7 01       	movw	r20, r14
   18f92:	62 ea       	ldi	r22, 0xA2	; 162
   18f94:	ce 01       	movw	r24, r28
   18f96:	df 91       	pop	r29
   18f98:	cf 91       	pop	r28
   18f9a:	1f 91       	pop	r17
   18f9c:	0f 91       	pop	r16
   18f9e:	ff 90       	pop	r15
   18fa0:	ef 90       	pop	r14
   18fa2:	0c 94 12 c3 	jmp	0x18624	; 0x18624 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   18fa6:	81 e0       	ldi	r24, 0x01	; 1
   18fa8:	90 e0       	ldi	r25, 0x00	; 0
   18faa:	de cf       	rjmp	.-68     	; 0x18f68 <PubSubClient::unsubscribe(char const*)+0x3e>
   18fac:	80 e0       	ldi	r24, 0x00	; 0
   18fae:	df 91       	pop	r29
   18fb0:	cf 91       	pop	r28
   18fb2:	1f 91       	pop	r17
   18fb4:	0f 91       	pop	r16
   18fb6:	ff 90       	pop	r15
   18fb8:	ef 90       	pop	r14
   18fba:	08 95       	ret

00018fbc <PubSubClient::setServer(unsigned char*, unsigned int)>:
_ZN12PubSubClient9setServerEPhj():
   18fbc:	cf 92       	push	r12
   18fbe:	df 92       	push	r13
   18fc0:	ef 92       	push	r14
   18fc2:	ff 92       	push	r15
   18fc4:	0f 93       	push	r16
   18fc6:	cf 93       	push	r28
   18fc8:	df 93       	push	r29
   18fca:	cd b7       	in	r28, 0x3d	; 61
   18fcc:	de b7       	in	r29, 0x3e	; 62
   18fce:	2c 97       	sbiw	r28, 0x0c	; 12
   18fd0:	0f b6       	in	r0, 0x3f	; 63
   18fd2:	f8 94       	cli
   18fd4:	de bf       	out	0x3e, r29	; 62
   18fd6:	0f be       	out	0x3f, r0	; 63
   18fd8:	cd bf       	out	0x3d, r28	; 61
   18fda:	7c 01       	movw	r14, r24
   18fdc:	fb 01       	movw	r30, r22
   18fde:	6a 01       	movw	r12, r20
   18fe0:	03 81       	ldd	r16, Z+3	; 0x03
   18fe2:	22 81       	ldd	r18, Z+2	; 0x02
   18fe4:	41 81       	ldd	r20, Z+1	; 0x01
   18fe6:	60 81       	ld	r22, Z
   18fe8:	ce 01       	movw	r24, r28
   18fea:	07 96       	adiw	r24, 0x07	; 7
   18fec:	0e 94 4b da 	call	0x1b496	; 0x1b496 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN9IPAddressC4ERKS_():
   18ff0:	89 85       	ldd	r24, Y+9	; 0x09
   18ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
   18ff4:	ab 85       	ldd	r26, Y+11	; 0x0b
   18ff6:	bc 85       	ldd	r27, Y+12	; 0x0c
_ZN9IPAddressaSERKS_():
   18ff8:	f7 01       	movw	r30, r14
   18ffa:	e1 5f       	subi	r30, 0xF1	; 241
   18ffc:	fd 4f       	sbci	r31, 0xFD	; 253
   18ffe:	82 83       	std	Z+2, r24	; 0x02
   19000:	93 83       	std	Z+3, r25	; 0x03
   19002:	a4 83       	std	Z+4, r26	; 0x04
   19004:	b5 83       	std	Z+5, r27	; 0x05
_ZN12PubSubClient9setServerE9IPAddressj():
   19006:	38 96       	adiw	r30, 0x08	; 8
   19008:	d1 82       	std	Z+1, r13	; 0x01
   1900a:	c0 82       	st	Z, r12
   1900c:	32 97       	sbiw	r30, 0x02	; 2
   1900e:	11 82       	std	Z+1, r1	; 0x01
   19010:	10 82       	st	Z, r1
_ZN12PubSubClient9setServerEPhj():
   19012:	c7 01       	movw	r24, r14
   19014:	2c 96       	adiw	r28, 0x0c	; 12
   19016:	0f b6       	in	r0, 0x3f	; 63
   19018:	f8 94       	cli
   1901a:	de bf       	out	0x3e, r29	; 62
   1901c:	0f be       	out	0x3f, r0	; 63
   1901e:	cd bf       	out	0x3d, r28	; 61
   19020:	df 91       	pop	r29
   19022:	cf 91       	pop	r28
   19024:	0f 91       	pop	r16
   19026:	ff 90       	pop	r15
   19028:	ef 90       	pop	r14
   1902a:	df 90       	pop	r13
   1902c:	cf 90       	pop	r12
   1902e:	08 95       	ret

00019030 <PubSubClient::setCallback(void (*)(char*, unsigned char*, unsigned int))>:
_ZN12PubSubClient11setCallbackEPFvPcPhjE():
   19030:	fc 01       	movw	r30, r24
   19032:	e3 5f       	subi	r30, 0xF3	; 243
   19034:	fd 4f       	sbci	r31, 0xFD	; 253
   19036:	71 83       	std	Z+1, r23	; 0x01
   19038:	60 83       	st	Z, r22
   1903a:	08 95       	ret

0001903c <PubSubClient::state()>:
_ZN12PubSubClient5stateEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:589

int PubSubClient::state() {
    return this->_state;
   1903c:	85 5e       	subi	r24, 0xE5	; 229
   1903e:	9d 4f       	sbci	r25, 0xFD	; 253
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:590
}
   19040:	fc 01       	movw	r30, r24
   19042:	80 81       	ld	r24, Z
   19044:	91 81       	ldd	r25, Z+1	; 0x01
   19046:	08 95       	ret

00019048 <_GLOBAL__sub_I__ZN12PubSubClientC2Ev>:
_GLOBAL__sub_I__ZN12PubSubClientC2Ev():
   19048:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   1904a:	00 e0       	ldi	r16, 0x00	; 0
   1904c:	20 e0       	ldi	r18, 0x00	; 0
   1904e:	40 e0       	ldi	r20, 0x00	; 0
   19050:	60 e0       	ldi	r22, 0x00	; 0
   19052:	88 e3       	ldi	r24, 0x38	; 56
   19054:	93 e1       	ldi	r25, 0x13	; 19
   19056:	0e 94 4b da 	call	0x1b496	; 0x1b496 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN12PubSubClientC2Ev():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:590
   1905a:	0f 91       	pop	r16
   1905c:	08 95       	ret

0001905e <RF24::csn(bool)>:
_ZN4RF243csnEb():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1552
    config |= _BV(EN_CRC);
  }
  else
  {
    config |= _BV(EN_CRC);
    config |= _BV( CRCO );
   1905e:	cf 93       	push	r28
   19060:	df 93       	push	r29
   19062:	ec 01       	movw	r28, r24
_ZN8SPIClass11setBitOrderEh():
   19064:	8c b5       	in	r24, 0x2c	; 44
   19066:	8f 7d       	andi	r24, 0xDF	; 223
   19068:	8c bd       	out	0x2c, r24	; 44
_ZN8SPIClass11setDataModeEh():
   1906a:	8c b5       	in	r24, 0x2c	; 44
   1906c:	83 7f       	andi	r24, 0xF3	; 243
   1906e:	8c bd       	out	0x2c, r24	; 44
_ZN8SPIClass15setClockDividerEh():
   19070:	8c b5       	in	r24, 0x2c	; 44
   19072:	8c 7f       	andi	r24, 0xFC	; 252
   19074:	8c bd       	out	0x2c, r24	; 44
   19076:	8d b5       	in	r24, 0x2d	; 45
   19078:	81 60       	ori	r24, 0x01	; 1
   1907a:	8d bd       	out	0x2d, r24	; 45
_ZN4RF243csnEb():
   1907c:	8a 81       	ldd	r24, Y+2	; 0x02
   1907e:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
   19082:	8c 89       	ldd	r24, Y+20	; 0x14
   19084:	9d 89       	ldd	r25, Y+21	; 0x15
   19086:	df 91       	pop	r29
   19088:	cf 91       	pop	r28
   1908a:	0c 94 3d d7 	jmp	0x1ae7a	; 0x1ae7a <delayMicroseconds>

0001908e <RF24::ce(bool)>:
_ZN4RF242ceEb():
   1908e:	fc 01       	movw	r30, r24
   19090:	20 81       	ld	r18, Z
   19092:	31 81       	ldd	r19, Z+1	; 0x01
   19094:	82 81       	ldd	r24, Z+2	; 0x02
   19096:	93 81       	ldd	r25, Z+3	; 0x03
   19098:	28 17       	cp	r18, r24
   1909a:	39 07       	cpc	r19, r25
   1909c:	19 f0       	breq	.+6      	; 0x190a4 <RF24::ce(bool)+0x16>
   1909e:	82 2f       	mov	r24, r18
   190a0:	0c 94 31 d8 	jmp	0x1b062	; 0x1b062 <digitalWrite>
   190a4:	08 95       	ret

000190a6 <RF24::beginTransaction()>:
_ZN4RF2416beginTransactionEv():
   190a6:	60 e0       	ldi	r22, 0x00	; 0
   190a8:	0c 94 2f c8 	jmp	0x1905e	; 0x1905e <RF24::csn(bool)>

000190ac <RF24::endTransaction()>:
_ZN4RF2414endTransactionEv():
   190ac:	61 e0       	ldi	r22, 0x01	; 1
   190ae:	0c 94 2f c8 	jmp	0x1905e	; 0x1905e <RF24::csn(bool)>

000190b2 <RF24::read_register(unsigned char, unsigned char*, unsigned char)>:
_ZN4RF2413read_registerEhPhh():
   190b2:	cf 92       	push	r12
   190b4:	df 92       	push	r13
   190b6:	ef 92       	push	r14
   190b8:	ff 92       	push	r15
   190ba:	0f 93       	push	r16
   190bc:	1f 93       	push	r17
   190be:	cf 93       	push	r28
   190c0:	df 93       	push	r29
   190c2:	7c 01       	movw	r14, r24
   190c4:	c6 2f       	mov	r28, r22
   190c6:	6a 01       	movw	r12, r20
   190c8:	12 2f       	mov	r17, r18
   190ca:	0e 94 53 c8 	call	0x190a6	; 0x190a6 <RF24::beginTransaction()>
   190ce:	8c 2f       	mov	r24, r28
   190d0:	8f 71       	andi	r24, 0x1F	; 31
   190d2:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   190d6:	08 2f       	mov	r16, r24
   190d8:	e6 01       	movw	r28, r12
   190da:	11 50       	subi	r17, 0x01	; 1
   190dc:	28 f0       	brcs	.+10     	; 0x190e8 <RF24::read_register(unsigned char, unsigned char*, unsigned char)+0x36>
   190de:	8f ef       	ldi	r24, 0xFF	; 255
   190e0:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   190e4:	89 93       	st	Y+, r24
   190e6:	f9 cf       	rjmp	.-14     	; 0x190da <RF24::read_register(unsigned char, unsigned char*, unsigned char)+0x28>
   190e8:	c7 01       	movw	r24, r14
   190ea:	0e 94 56 c8 	call	0x190ac	; 0x190ac <RF24::endTransaction()>
   190ee:	80 2f       	mov	r24, r16
   190f0:	df 91       	pop	r29
   190f2:	cf 91       	pop	r28
   190f4:	1f 91       	pop	r17
   190f6:	0f 91       	pop	r16
   190f8:	ff 90       	pop	r15
   190fa:	ef 90       	pop	r14
   190fc:	df 90       	pop	r13
   190fe:	cf 90       	pop	r12
   19100:	08 95       	ret

00019102 <RF24::read_register(unsigned char)>:
_ZN4RF2413read_registerEh():
   19102:	1f 93       	push	r17
   19104:	cf 93       	push	r28
   19106:	df 93       	push	r29
   19108:	ec 01       	movw	r28, r24
   1910a:	16 2f       	mov	r17, r22
   1910c:	0e 94 53 c8 	call	0x190a6	; 0x190a6 <RF24::beginTransaction()>
   19110:	81 2f       	mov	r24, r17
   19112:	8f 71       	andi	r24, 0x1F	; 31
   19114:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   19118:	8f ef       	ldi	r24, 0xFF	; 255
   1911a:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   1911e:	18 2f       	mov	r17, r24
   19120:	ce 01       	movw	r24, r28
   19122:	0e 94 56 c8 	call	0x190ac	; 0x190ac <RF24::endTransaction()>
   19126:	81 2f       	mov	r24, r17
   19128:	df 91       	pop	r29
   1912a:	cf 91       	pop	r28
   1912c:	1f 91       	pop	r17
   1912e:	08 95       	ret

00019130 <RF24::write_register(unsigned char, unsigned char)>:
_ZN4RF2414write_registerEhh():
   19130:	0f 93       	push	r16
   19132:	1f 93       	push	r17
   19134:	cf 93       	push	r28
   19136:	df 93       	push	r29
   19138:	8c 01       	movw	r16, r24
   1913a:	c6 2f       	mov	r28, r22
   1913c:	d4 2f       	mov	r29, r20
   1913e:	0e 94 53 c8 	call	0x190a6	; 0x190a6 <RF24::beginTransaction()>
   19142:	8c 2f       	mov	r24, r28
   19144:	8f 71       	andi	r24, 0x1F	; 31
   19146:	80 62       	ori	r24, 0x20	; 32
   19148:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   1914c:	c8 2f       	mov	r28, r24
   1914e:	8d 2f       	mov	r24, r29
   19150:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   19154:	c8 01       	movw	r24, r16
   19156:	0e 94 56 c8 	call	0x190ac	; 0x190ac <RF24::endTransaction()>
   1915a:	8c 2f       	mov	r24, r28
   1915c:	df 91       	pop	r29
   1915e:	cf 91       	pop	r28
   19160:	1f 91       	pop	r17
   19162:	0f 91       	pop	r16
   19164:	08 95       	ret

00019166 <RF24::spiTrans(unsigned char)>:
_ZN4RF248spiTransEh():
   19166:	1f 93       	push	r17
   19168:	cf 93       	push	r28
   1916a:	df 93       	push	r29
   1916c:	ec 01       	movw	r28, r24
   1916e:	16 2f       	mov	r17, r22
   19170:	0e 94 53 c8 	call	0x190a6	; 0x190a6 <RF24::beginTransaction()>
   19174:	81 2f       	mov	r24, r17
   19176:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   1917a:	18 2f       	mov	r17, r24
   1917c:	ce 01       	movw	r24, r28
   1917e:	0e 94 56 c8 	call	0x190ac	; 0x190ac <RF24::endTransaction()>
   19182:	81 2f       	mov	r24, r17
   19184:	df 91       	pop	r29
   19186:	cf 91       	pop	r28
   19188:	1f 91       	pop	r17
   1918a:	08 95       	ret

0001918c <RF24::flush_rx()>:
_ZN4RF248flush_rxEv():
   1918c:	62 ee       	ldi	r22, 0xE2	; 226
   1918e:	0c 94 b3 c8 	jmp	0x19166	; 0x19166 <RF24::spiTrans(unsigned char)>

00019192 <RF24::flush_tx()>:
_ZN4RF248flush_txEv():
   19192:	61 ee       	ldi	r22, 0xE1	; 225
   19194:	0c 94 b3 c8 	jmp	0x19166	; 0x19166 <RF24::spiTrans(unsigned char)>

00019198 <RF24::get_status()>:
_ZN4RF2410get_statusEv():
   19198:	6f ef       	ldi	r22, 0xFF	; 255
   1919a:	0c 94 b3 c8 	jmp	0x19166	; 0x19166 <RF24::spiTrans(unsigned char)>

0001919e <RF24::print_status(unsigned char)>:
_ZN4RF2412print_statusEh():
   1919e:	86 2f       	mov	r24, r22
   191a0:	90 e0       	ldi	r25, 0x00	; 0
   191a2:	26 2f       	mov	r18, r22
   191a4:	21 70       	andi	r18, 0x01	; 1
   191a6:	1f 92       	push	r1
   191a8:	2f 93       	push	r18
   191aa:	9c 01       	movw	r18, r24
   191ac:	35 95       	asr	r19
   191ae:	27 95       	ror	r18
   191b0:	27 70       	andi	r18, 0x07	; 7
   191b2:	33 27       	eor	r19, r19
   191b4:	3f 93       	push	r19
   191b6:	2f 93       	push	r18
   191b8:	64 fb       	bst	r22, 4
   191ba:	99 27       	eor	r25, r25
   191bc:	90 f9       	bld	r25, 0
   191be:	1f 92       	push	r1
   191c0:	9f 93       	push	r25
   191c2:	65 fb       	bst	r22, 5
   191c4:	99 27       	eor	r25, r25
   191c6:	90 f9       	bld	r25, 0
   191c8:	1f 92       	push	r1
   191ca:	9f 93       	push	r25
   191cc:	66 fb       	bst	r22, 6
   191ce:	88 27       	eor	r24, r24
   191d0:	80 f9       	bld	r24, 0
   191d2:	1f 92       	push	r1
   191d4:	8f 93       	push	r24
   191d6:	1f 92       	push	r1
   191d8:	6f 93       	push	r22
   191da:	8d ee       	ldi	r24, 0xED	; 237
   191dc:	93 e6       	ldi	r25, 0x63	; 99
   191de:	9f 93       	push	r25
   191e0:	8f 93       	push	r24
   191e2:	0e 94 f4 e2 	call	0x1c5e8	; 0x1c5e8 <printf_P>
   191e6:	8d b7       	in	r24, 0x3d	; 61
   191e8:	9e b7       	in	r25, 0x3e	; 62
   191ea:	0e 96       	adiw	r24, 0x0e	; 14
   191ec:	0f b6       	in	r0, 0x3f	; 63
   191ee:	f8 94       	cli
   191f0:	9e bf       	out	0x3e, r25	; 62
   191f2:	0f be       	out	0x3f, r0	; 63
   191f4:	8d bf       	out	0x3d, r24	; 61
   191f6:	08 95       	ret

000191f8 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>:
_ZN4RF2419print_byte_registerEPKchh():
   191f8:	cf 92       	push	r12
   191fa:	df 92       	push	r13
   191fc:	ff 92       	push	r15
   191fe:	0f 93       	push	r16
   19200:	1f 93       	push	r17
   19202:	cf 93       	push	r28
   19204:	df 93       	push	r29
   19206:	6c 01       	movw	r12, r24
   19208:	c4 2f       	mov	r28, r20
   1920a:	d2 2f       	mov	r29, r18
   1920c:	7f 93       	push	r23
   1920e:	6f 93       	push	r22
   19210:	87 ee       	ldi	r24, 0xE7	; 231
   19212:	93 e6       	ldi	r25, 0x63	; 99
   19214:	9f 93       	push	r25
   19216:	8f 93       	push	r24
   19218:	0e 94 f4 e2 	call	0x1c5e8	; 0x1c5e8 <printf_P>
   1921c:	dc 0f       	add	r29, r28
   1921e:	0f 90       	pop	r0
   19220:	0f 90       	pop	r0
   19222:	0f 90       	pop	r0
   19224:	0f 90       	pop	r0
   19226:	0f ed       	ldi	r16, 0xDF	; 223
   19228:	13 e6       	ldi	r17, 0x63	; 99
   1922a:	cd 17       	cp	r28, r29
   1922c:	99 f0       	breq	.+38     	; 0x19254 <RF24::print_byte_register(char const*, unsigned char, unsigned char)+0x5c>
   1922e:	ff 24       	eor	r15, r15
   19230:	f3 94       	inc	r15
   19232:	fc 0e       	add	r15, r28
   19234:	6c 2f       	mov	r22, r28
   19236:	c6 01       	movw	r24, r12
   19238:	0e 94 81 c8 	call	0x19102	; 0x19102 <RF24::read_register(unsigned char)>
   1923c:	1f 92       	push	r1
   1923e:	8f 93       	push	r24
   19240:	1f 93       	push	r17
   19242:	0f 93       	push	r16
   19244:	0e 94 f4 e2 	call	0x1c5e8	; 0x1c5e8 <printf_P>
   19248:	0f 90       	pop	r0
   1924a:	0f 90       	pop	r0
   1924c:	0f 90       	pop	r0
   1924e:	0f 90       	pop	r0
   19250:	cf 2d       	mov	r28, r15
   19252:	eb cf       	rjmp	.-42     	; 0x1922a <RF24::print_byte_register(char const*, unsigned char, unsigned char)+0x32>
   19254:	8c ed       	ldi	r24, 0xDC	; 220
   19256:	93 e6       	ldi	r25, 0x63	; 99
   19258:	9f 93       	push	r25
   1925a:	8f 93       	push	r24
   1925c:	0e 94 f4 e2 	call	0x1c5e8	; 0x1c5e8 <printf_P>
   19260:	0f 90       	pop	r0
   19262:	0f 90       	pop	r0
   19264:	df 91       	pop	r29
   19266:	cf 91       	pop	r28
   19268:	1f 91       	pop	r17
   1926a:	0f 91       	pop	r16
   1926c:	ff 90       	pop	r15
   1926e:	df 90       	pop	r13
   19270:	cf 90       	pop	r12
   19272:	08 95       	ret

00019274 <RF24::print_address_register(char const*, unsigned char, unsigned char)>:
_ZN4RF2422print_address_registerEPKchh():
   19274:	2f 92       	push	r2
   19276:	3f 92       	push	r3
   19278:	4f 92       	push	r4
   1927a:	5f 92       	push	r5
   1927c:	6f 92       	push	r6
   1927e:	7f 92       	push	r7
   19280:	8f 92       	push	r8
   19282:	9f 92       	push	r9
   19284:	af 92       	push	r10
   19286:	bf 92       	push	r11
   19288:	cf 92       	push	r12
   1928a:	df 92       	push	r13
   1928c:	ef 92       	push	r14
   1928e:	ff 92       	push	r15
   19290:	0f 93       	push	r16
   19292:	1f 93       	push	r17
   19294:	cf 93       	push	r28
   19296:	df 93       	push	r29
   19298:	1f 92       	push	r1
   1929a:	cd b7       	in	r28, 0x3d	; 61
   1929c:	de b7       	in	r29, 0x3e	; 62
   1929e:	6c 01       	movw	r12, r24
   192a0:	24 2e       	mov	r2, r20
   192a2:	32 2e       	mov	r3, r18
   192a4:	4d b6       	in	r4, 0x3d	; 61
   192a6:	5e b6       	in	r5, 0x3e	; 62
   192a8:	7f 93       	push	r23
   192aa:	6f 93       	push	r22
   192ac:	86 ed       	ldi	r24, 0xD6	; 214
   192ae:	93 e6       	ldi	r25, 0x63	; 99
   192b0:	9f 93       	push	r25
   192b2:	8f 93       	push	r24
   192b4:	0e 94 f4 e2 	call	0x1c5e8	; 0x1c5e8 <printf_P>
   192b8:	32 0c       	add	r3, r2
   192ba:	0f 90       	pop	r0
   192bc:	0f 90       	pop	r0
   192be:	0f 90       	pop	r0
   192c0:	0f 90       	pop	r0
   192c2:	82 ed       	ldi	r24, 0xD2	; 210
   192c4:	a8 2e       	mov	r10, r24
   192c6:	83 e6       	ldi	r24, 0x63	; 99
   192c8:	b8 2e       	mov	r11, r24
   192ca:	9d ec       	ldi	r25, 0xCD	; 205
   192cc:	89 2e       	mov	r8, r25
   192ce:	93 e6       	ldi	r25, 0x63	; 99
   192d0:	99 2e       	mov	r9, r25
   192d2:	23 14       	cp	r2, r3
   192d4:	e1 f1       	breq	.+120    	; 0x1934e <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xda>
   192d6:	6d b6       	in	r6, 0x3d	; 61
   192d8:	7e b6       	in	r7, 0x3e	; 62
   192da:	f6 01       	movw	r30, r12
   192dc:	26 85       	ldd	r18, Z+14	; 0x0e
   192de:	02 2f       	mov	r16, r18
   192e0:	10 e0       	ldi	r17, 0x00	; 0
   192e2:	8d b7       	in	r24, 0x3d	; 61
   192e4:	9e b7       	in	r25, 0x3e	; 62
   192e6:	80 1b       	sub	r24, r16
   192e8:	91 0b       	sbc	r25, r17
   192ea:	0f b6       	in	r0, 0x3f	; 63
   192ec:	f8 94       	cli
   192ee:	9e bf       	out	0x3e, r25	; 62
   192f0:	0f be       	out	0x3f, r0	; 63
   192f2:	8d bf       	out	0x3d, r24	; 61
   192f4:	ed b7       	in	r30, 0x3d	; 61
   192f6:	fe b7       	in	r31, 0x3e	; 62
   192f8:	31 96       	adiw	r30, 0x01	; 1
   192fa:	7f 01       	movw	r14, r30
   192fc:	f1 e0       	ldi	r31, 0x01	; 1
   192fe:	f2 0d       	add	r31, r2
   19300:	f9 83       	std	Y+1, r31	; 0x01
   19302:	a7 01       	movw	r20, r14
   19304:	62 2d       	mov	r22, r2
   19306:	c6 01       	movw	r24, r12
   19308:	0e 94 59 c8 	call	0x190b2	; 0x190b2 <RF24::read_register(unsigned char, unsigned char*, unsigned char)>
   1930c:	bf 92       	push	r11
   1930e:	af 92       	push	r10
   19310:	0e 94 f4 e2 	call	0x1c5e8	; 0x1c5e8 <printf_P>
   19314:	0e 0d       	add	r16, r14
   19316:	1f 1d       	adc	r17, r15
   19318:	0f 90       	pop	r0
   1931a:	0f 90       	pop	r0
   1931c:	01 50       	subi	r16, 0x01	; 1
   1931e:	11 09       	sbc	r17, r1
   19320:	0e 15       	cp	r16, r14
   19322:	1f 05       	cpc	r17, r15
   19324:	68 f0       	brcs	.+26     	; 0x19340 <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xcc>
   19326:	f8 01       	movw	r30, r16
   19328:	80 81       	ld	r24, Z
   1932a:	1f 92       	push	r1
   1932c:	8f 93       	push	r24
   1932e:	9f 92       	push	r9
   19330:	8f 92       	push	r8
   19332:	0e 94 f4 e2 	call	0x1c5e8	; 0x1c5e8 <printf_P>
   19336:	0f 90       	pop	r0
   19338:	0f 90       	pop	r0
   1933a:	0f 90       	pop	r0
   1933c:	0f 90       	pop	r0
   1933e:	ee cf       	rjmp	.-36     	; 0x1931c <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xa8>
   19340:	0f b6       	in	r0, 0x3f	; 63
   19342:	f8 94       	cli
   19344:	7e be       	out	0x3e, r7	; 62
   19346:	0f be       	out	0x3f, r0	; 63
   19348:	6d be       	out	0x3d, r6	; 61
   1934a:	29 80       	ldd	r2, Y+1	; 0x01
   1934c:	c2 cf       	rjmp	.-124    	; 0x192d2 <RF24::print_address_register(char const*, unsigned char, unsigned char)+0x5e>
   1934e:	8a ec       	ldi	r24, 0xCA	; 202
   19350:	93 e6       	ldi	r25, 0x63	; 99
   19352:	9f 93       	push	r25
   19354:	8f 93       	push	r24
   19356:	0e 94 f4 e2 	call	0x1c5e8	; 0x1c5e8 <printf_P>
   1935a:	0f 90       	pop	r0
   1935c:	0f 90       	pop	r0
   1935e:	0f b6       	in	r0, 0x3f	; 63
   19360:	f8 94       	cli
   19362:	5e be       	out	0x3e, r5	; 62
   19364:	0f be       	out	0x3f, r0	; 63
   19366:	4d be       	out	0x3d, r4	; 61
   19368:	0f 90       	pop	r0
   1936a:	df 91       	pop	r29
   1936c:	cf 91       	pop	r28
   1936e:	1f 91       	pop	r17
   19370:	0f 91       	pop	r16
   19372:	ff 90       	pop	r15
   19374:	ef 90       	pop	r14
   19376:	df 90       	pop	r13
   19378:	cf 90       	pop	r12
   1937a:	bf 90       	pop	r11
   1937c:	af 90       	pop	r10
   1937e:	9f 90       	pop	r9
   19380:	8f 90       	pop	r8
   19382:	7f 90       	pop	r7
   19384:	6f 90       	pop	r6
   19386:	5f 90       	pop	r5
   19388:	4f 90       	pop	r4
   1938a:	3f 90       	pop	r3
   1938c:	2f 90       	pop	r2
   1938e:	08 95       	ret

00019390 <RF24::RF24(unsigned int, unsigned int)>:
_ZN4RF24C2Ejj():
   19390:	fc 01       	movw	r30, r24
   19392:	71 83       	std	Z+1, r23	; 0x01
   19394:	60 83       	st	Z, r22
   19396:	53 83       	std	Z+3, r21	; 0x03
   19398:	42 83       	std	Z+2, r20	; 0x02
   1939a:	16 82       	std	Z+6, r1	; 0x06
   1939c:	80 e2       	ldi	r24, 0x20	; 32
   1939e:	87 83       	std	Z+7, r24	; 0x07
   193a0:	10 86       	std	Z+8, r1	; 0x08
   193a2:	85 e0       	ldi	r24, 0x05	; 5
   193a4:	86 87       	std	Z+14, r24	; 0x0e
   193a6:	85 e0       	ldi	r24, 0x05	; 5
   193a8:	90 e0       	ldi	r25, 0x00	; 0
   193aa:	a0 e0       	ldi	r26, 0x00	; 0
   193ac:	b0 e0       	ldi	r27, 0x00	; 0
   193ae:	84 8b       	std	Z+20, r24	; 0x14
   193b0:	95 8b       	std	Z+21, r25	; 0x15
   193b2:	a6 8b       	std	Z+22, r26	; 0x16
   193b4:	b7 8b       	std	Z+23, r27	; 0x17
   193b6:	11 86       	std	Z+9, r1	; 0x09
   193b8:	08 95       	ret

000193ba <RF24::setChannel(unsigned char)>:
_ZN4RF2410setChannelEh():
   193ba:	46 2f       	mov	r20, r22
   193bc:	6d 37       	cpi	r22, 0x7D	; 125
   193be:	08 f0       	brcs	.+2      	; 0x193c2 <RF24::setChannel(unsigned char)+0x8>
   193c0:	4d e7       	ldi	r20, 0x7D	; 125
   193c2:	65 e0       	ldi	r22, 0x05	; 5
   193c4:	0c 94 98 c8 	jmp	0x19130	; 0x19130 <RF24::write_register(unsigned char, unsigned char)>

000193c8 <RF24::powerUp()>:
_ZN4RF247powerUpEv():
   193c8:	cf 93       	push	r28
   193ca:	df 93       	push	r29
   193cc:	ec 01       	movw	r28, r24
   193ce:	60 e0       	ldi	r22, 0x00	; 0
   193d0:	0e 94 81 c8 	call	0x19102	; 0x19102 <RF24::read_register(unsigned char)>
   193d4:	81 fd       	sbrc	r24, 1
   193d6:	0e c0       	rjmp	.+28     	; 0x193f4 <RF24::powerUp()+0x2c>
   193d8:	48 2f       	mov	r20, r24
   193da:	42 60       	ori	r20, 0x02	; 2
   193dc:	60 e0       	ldi	r22, 0x00	; 0
   193de:	ce 01       	movw	r24, r28
   193e0:	0e 94 98 c8 	call	0x19130	; 0x19130 <RF24::write_register(unsigned char, unsigned char)>
   193e4:	65 e0       	ldi	r22, 0x05	; 5
   193e6:	70 e0       	ldi	r23, 0x00	; 0
   193e8:	80 e0       	ldi	r24, 0x00	; 0
   193ea:	90 e0       	ldi	r25, 0x00	; 0
   193ec:	df 91       	pop	r29
   193ee:	cf 91       	pop	r28
   193f0:	0c 94 04 d7 	jmp	0x1ae08	; 0x1ae08 <delay>
   193f4:	df 91       	pop	r29
   193f6:	cf 91       	pop	r28
   193f8:	08 95       	ret

000193fa <RF24::toggle_features()>:
_ZN4RF2415toggle_featuresEv():
   193fa:	cf 93       	push	r28
   193fc:	df 93       	push	r29
   193fe:	ec 01       	movw	r28, r24
   19400:	0e 94 53 c8 	call	0x190a6	; 0x190a6 <RF24::beginTransaction()>
   19404:	80 e5       	ldi	r24, 0x50	; 80
   19406:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   1940a:	83 e7       	ldi	r24, 0x73	; 115
   1940c:	0e 94 2d bb 	call	0x1765a	; 0x1765a <SPIClass::transfer(unsigned char)>
   19410:	ce 01       	movw	r24, r28
   19412:	df 91       	pop	r29
   19414:	cf 91       	pop	r28
   19416:	0c 94 56 c8 	jmp	0x190ac	; 0x190ac <RF24::endTransaction()>

0001941a <RF24::setPALevel(unsigned char)>:
_ZN4RF2410setPALevelEh():
   1941a:	0f 93       	push	r16
   1941c:	1f 93       	push	r17
   1941e:	cf 93       	push	r28
   19420:	8c 01       	movw	r16, r24
   19422:	c6 2f       	mov	r28, r22
   19424:	66 e0       	ldi	r22, 0x06	; 6
   19426:	0e 94 81 c8 	call	0x19102	; 0x19102 <RF24::read_register(unsigned char)>
   1942a:	88 7f       	andi	r24, 0xF8	; 248
   1942c:	c4 30       	cpi	r28, 0x04	; 4
   1942e:	58 f4       	brcc	.+22     	; 0x19446 <RF24::setPALevel(unsigned char)+0x2c>
   19430:	cc 0f       	add	r28, r28
   19432:	cf 5f       	subi	r28, 0xFF	; 255
   19434:	4c 2f       	mov	r20, r28
   19436:	48 2b       	or	r20, r24
   19438:	66 e0       	ldi	r22, 0x06	; 6
   1943a:	c8 01       	movw	r24, r16
   1943c:	cf 91       	pop	r28
   1943e:	1f 91       	pop	r17
   19440:	0f 91       	pop	r16
   19442:	0c 94 98 c8 	jmp	0x19130	; 0x19130 <RF24::write_register(unsigned char, unsigned char)>
   19446:	c7 e0       	ldi	r28, 0x07	; 7
   19448:	f5 cf       	rjmp	.-22     	; 0x19434 <RF24::setPALevel(unsigned char)+0x1a>

0001944a <RF24::getPALevel()>:
_ZN4RF2410getPALevelEv():
   1944a:	66 e0       	ldi	r22, 0x06	; 6
   1944c:	0e 94 81 c8 	call	0x19102	; 0x19102 <RF24::read_register(unsigned char)>
   19450:	90 e0       	ldi	r25, 0x00	; 0
   19452:	95 95       	asr	r25
   19454:	87 95       	ror	r24
   19456:	83 70       	andi	r24, 0x03	; 3
   19458:	08 95       	ret

0001945a <RF24::setDataRate(rf24_datarate_e)>:
_ZN4RF2411setDataRateE15rf24_datarate_e():
   1945a:	ef 92       	push	r14
   1945c:	ff 92       	push	r15
   1945e:	0f 93       	push	r16
   19460:	1f 93       	push	r17
   19462:	cf 93       	push	r28
   19464:	8c 01       	movw	r16, r24
   19466:	7b 01       	movw	r14, r22
   19468:	66 e0       	ldi	r22, 0x06	; 6
   1946a:	0e 94 81 c8 	call	0x19102	; 0x19102 <RF24::read_register(unsigned char)>
   1946e:	c8 2f       	mov	r28, r24
   19470:	c7 7d       	andi	r28, 0xD7	; 215
   19472:	82 e0       	ldi	r24, 0x02	; 2
   19474:	e8 16       	cp	r14, r24
   19476:	f1 04       	cpc	r15, r1
   19478:	e9 f4       	brne	.+58     	; 0x194b4 <RF24::setDataRate(rf24_datarate_e)+0x5a>
   1947a:	c0 62       	ori	r28, 0x20	; 32
   1947c:	8b e9       	ldi	r24, 0x9B	; 155
   1947e:	90 e0       	ldi	r25, 0x00	; 0
   19480:	a0 e0       	ldi	r26, 0x00	; 0
   19482:	b0 e0       	ldi	r27, 0x00	; 0
   19484:	f8 01       	movw	r30, r16
   19486:	80 8b       	std	Z+16, r24	; 0x10
   19488:	91 8b       	std	Z+17, r25	; 0x11
   1948a:	a2 8b       	std	Z+18, r26	; 0x12
   1948c:	b3 8b       	std	Z+19, r27	; 0x13
   1948e:	4c 2f       	mov	r20, r28
   19490:	66 e0       	ldi	r22, 0x06	; 6
   19492:	c8 01       	movw	r24, r16
   19494:	0e 94 98 c8 	call	0x19130	; 0x19130 <RF24::write_register(unsigned char, unsigned char)>
   19498:	66 e0       	ldi	r22, 0x06	; 6
   1949a:	c8 01       	movw	r24, r16
   1949c:	0e 94 81 c8 	call	0x19102	; 0x19102 <RF24::read_register(unsigned char)>
   194a0:	91 e0       	ldi	r25, 0x01	; 1
   194a2:	8c 13       	cpse	r24, r28
   194a4:	90 e0       	ldi	r25, 0x00	; 0
   194a6:	89 2f       	mov	r24, r25
   194a8:	cf 91       	pop	r28
   194aa:	1f 91       	pop	r17
   194ac:	0f 91       	pop	r16
   194ae:	ff 90       	pop	r15
   194b0:	ef 90       	pop	r14
   194b2:	08 95       	ret
   194b4:	85 e5       	ldi	r24, 0x55	; 85
   194b6:	90 e0       	ldi	r25, 0x00	; 0
   194b8:	a0 e0       	ldi	r26, 0x00	; 0
   194ba:	b0 e0       	ldi	r27, 0x00	; 0
   194bc:	ea 94       	dec	r14
   194be:	ef 28       	or	r14, r15
   194c0:	09 f7       	brne	.-62     	; 0x19484 <RF24::setDataRate(rf24_datarate_e)+0x2a>
   194c2:	c8 60       	ori	r28, 0x08	; 8
   194c4:	81 e4       	ldi	r24, 0x41	; 65
   194c6:	90 e0       	ldi	r25, 0x00	; 0
   194c8:	a0 e0       	ldi	r26, 0x00	; 0
   194ca:	b0 e0       	ldi	r27, 0x00	; 0
   194cc:	db cf       	rjmp	.-74     	; 0x19484 <RF24::setDataRate(rf24_datarate_e)+0x2a>

000194ce <RF24::begin()>:
_ZN4RF245beginEv():
   194ce:	1f 93       	push	r17
   194d0:	cf 93       	push	r28
   194d2:	df 93       	push	r29
   194d4:	ec 01       	movw	r28, r24
   194d6:	88 81       	ld	r24, Y
   194d8:	99 81       	ldd	r25, Y+1	; 0x01
   194da:	2a 81       	ldd	r18, Y+2	; 0x02
   194dc:	3b 81       	ldd	r19, Y+3	; 0x03
   194de:	82 17       	cp	r24, r18
   194e0:	93 07       	cpc	r25, r19
   194e2:	19 f0       	breq	.+6      	; 0x194ea <RF24::begin()+0x1c>
   194e4:	61 e0       	ldi	r22, 0x01	; 1
   194e6:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   194ea:	8a 81       	ldd	r24, Y+2	; 0x02
   194ec:	9b 81       	ldd	r25, Y+3	; 0x03
   194ee:	28 81       	ld	r18, Y
   194f0:	39 81       	ldd	r19, Y+1	; 0x01
   194f2:	28 17       	cp	r18, r24
   194f4:	39 07       	cpc	r19, r25
   194f6:	19 f0       	breq	.+6      	; 0x194fe <RF24::begin()+0x30>
   194f8:	61 e0       	ldi	r22, 0x01	; 1
   194fa:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <pinMode>
   194fe:	0e 94 0b ae 	call	0x15c16	; 0x15c16 <SPIClass::begin()>
   19502:	60 e0       	ldi	r22, 0x00	; 0
   19504:	ce 01       	movw	r24, r28
   19506:	0e 94 47 c8 	call	0x1908e	; 0x1908e <RF24::ce(bool)>
   1950a:	61 e0       	ldi	r22, 0x01	; 1
   1950c:	ce 01       	movw	r24, r28
   1950e:	0e 94 2f c8 	call	0x1905e	; 0x1905e <RF24::csn(bool)>
   19512:	65 e0       	ldi	r22, 0x05	; 5
   19514:	70 e0       	ldi	r23, 0x00	; 0
   19516:	80 e0       	ldi	r24, 0x00	; 0
   19518:	90 e0       	ldi	r25, 0x00	; 0
   1951a:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
   1951e:	4c e0       	ldi	r20, 0x0C	; 12
   19520:	60 e0       	ldi	r22, 0x00	; 0
   19522:	ce 01       	movw	r24, r28
   19524:	0e 94 98 c8 	call	0x19130	; 0x19130 <RF24::write_register(unsigned char, unsigned char)>
_ZN4RF2410setRetriesEhh():
   19528:	4f e5       	ldi	r20, 0x5F	; 95
   1952a:	64 e0       	ldi	r22, 0x04	; 4
   1952c:	ce 01       	movw	r24, r28
   1952e:	0e 94 98 c8 	call	0x19130	; 0x19130 <RF24::write_register(unsigned char, unsigned char)>
_ZN4RF245beginEv():
   19532:	60 e0       	ldi	r22, 0x00	; 0
   19534:	ce 01       	movw	r24, r28
   19536:	0e 94 0d ca 	call	0x1941a	; 0x1941a <RF24::setPALevel(unsigned char)>
   1953a:	62 e0       	ldi	r22, 0x02	; 2
   1953c:	70 e0       	ldi	r23, 0x00	; 0
   1953e:	ce 01       	movw	r24, r28
   19540:	0e 94 2d ca 	call	0x1945a	; 0x1945a <RF24::setDataRate(rf24_datarate_e)>
   19544:	88 23       	and	r24, r24
   19546:	11 f0       	breq	.+4      	; 0x1954c <RF24::begin()+0x7e>
   19548:	81 e0       	ldi	r24, 0x01	; 1
   1954a:	8e 83       	std	Y+6, r24	; 0x06
   1954c:	66 e0       	ldi	r22, 0x06	; 6
   1954e:	ce 01       	movw	r24, r28
   19550:	0e 94 81 c8 	call	0x19102	; 0x19102 <RF24::read_register(unsigned char)>
   19554:	18 2f       	mov	r17, r24
   19556:	70 e0       	ldi	r23, 0x00	; 0
   19558:	60 e0       	ldi	r22, 0x00	; 0
   1955a:	ce 01       	movw	r24, r28
   1955c:	0e 94 2d ca 	call	0x1945a	; 0x1945a <RF24::setDataRate(rf24_datarate_e)>
   19560:	ce 01       	movw	r24, r28
   19562:	0e 94 fd c9 	call	0x193fa	; 0x193fa <RF24::toggle_features()>
   19566:	40 e0       	ldi	r20, 0x00	; 0
   19568:	6d e1       	ldi	r22, 0x1D	; 29
   1956a:	ce 01       	movw	r24, r28
   1956c:	0e 94 98 c8 	call	0x19130	; 0x19130 <RF24::write_register(unsigned char, unsigned char)>
   19570:	40 e0       	ldi	r20, 0x00	; 0
   19572:	6c e1       	ldi	r22, 0x1C	; 28
   19574:	ce 01       	movw	r24, r28
   19576:	0e 94 98 c8 	call	0x19130	; 0x19130 <RF24::write_register(unsigned char, unsigned char)>
   1957a:	18 86       	std	Y+8, r1	; 0x08
   1957c:	40 e7       	ldi	r20, 0x70	; 112
   1957e:	67 e0       	ldi	r22, 0x07	; 7
   19580:	ce 01       	movw	r24, r28
   19582:	0e 94 98 c8 	call	0x19130	; 0x19130 <RF24::write_register(unsigned char, unsigned char)>
   19586:	6c e4       	ldi	r22, 0x4C	; 76
   19588:	ce 01       	movw	r24, r28
   1958a:	0e 94 dd c9 	call	0x193ba	; 0x193ba <RF24::setChannel(unsigned char)>
   1958e:	ce 01       	movw	r24, r28
   19590:	0e 94 c6 c8 	call	0x1918c	; 0x1918c <RF24::flush_rx()>
   19594:	ce 01       	movw	r24, r28
   19596:	0e 94 c9 c8 	call	0x19192	; 0x19192 <RF24::flush_tx()>
   1959a:	ce 01       	movw	r24, r28
   1959c:	0e 94 e4 c9 	call	0x193c8	; 0x193c8 <RF24::powerUp()>
   195a0:	60 e0       	ldi	r22, 0x00	; 0
   195a2:	ce 01       	movw	r24, r28
   195a4:	0e 94 81 c8 	call	0x19102	; 0x19102 <RF24::read_register(unsigned char)>
   195a8:	48 2f       	mov	r20, r24
   195aa:	4e 7f       	andi	r20, 0xFE	; 254
   195ac:	60 e0       	ldi	r22, 0x00	; 0
   195ae:	ce 01       	movw	r24, r28
   195b0:	0e 94 98 c8 	call	0x19130	; 0x19130 <RF24::write_register(unsigned char, unsigned char)>
   195b4:	64 e6       	ldi	r22, 0x64	; 100
   195b6:	70 e0       	ldi	r23, 0x00	; 0
   195b8:	80 e0       	ldi	r24, 0x00	; 0
   195ba:	90 e0       	ldi	r25, 0x00	; 0
   195bc:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
   195c0:	11 50       	subi	r17, 0x01	; 1
   195c2:	81 e0       	ldi	r24, 0x01	; 1
   195c4:	1e 3f       	cpi	r17, 0xFE	; 254
   195c6:	08 f0       	brcs	.+2      	; 0x195ca <RF24::begin()+0xfc>
   195c8:	80 e0       	ldi	r24, 0x00	; 0
   195ca:	df 91       	pop	r29
   195cc:	cf 91       	pop	r28
   195ce:	1f 91       	pop	r17
   195d0:	08 95       	ret

000195d2 <RF24::getDataRate()>:
_ZN4RF2411getDataRateEv():
   195d2:	66 e0       	ldi	r22, 0x06	; 6
   195d4:	0e 94 81 c8 	call	0x19102	; 0x19102 <RF24::read_register(unsigned char)>
   195d8:	28 2f       	mov	r18, r24
   195da:	28 72       	andi	r18, 0x28	; 40
   195dc:	20 32       	cpi	r18, 0x20	; 32
   195de:	31 f0       	breq	.+12     	; 0x195ec <RF24::getDataRate()+0x1a>
   195e0:	81 e0       	ldi	r24, 0x01	; 1
   195e2:	90 e0       	ldi	r25, 0x00	; 0
   195e4:	28 30       	cpi	r18, 0x08	; 8
   195e6:	21 f0       	breq	.+8      	; 0x195f0 <RF24::getDataRate()+0x1e>
   195e8:	80 e0       	ldi	r24, 0x00	; 0
   195ea:	08 95       	ret
   195ec:	82 e0       	ldi	r24, 0x02	; 2
   195ee:	90 e0       	ldi	r25, 0x00	; 0
   195f0:	08 95       	ret

000195f2 <RF24::getCRCLength()>:
_ZN4RF2412getCRCLengthEv():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1560
}

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
   195f2:	0f 93       	push	r16
   195f4:	1f 93       	push	r17
   195f6:	cf 93       	push	r28
   195f8:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:1563
  rf24_crclength_e result = RF24_CRC_DISABLED;
  
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
   195fa:	60 e0       	ldi	r22, 0x00	; 0
   195fc:	0e 94 81 c8 	call	0x19102	; 0x19102 <RF24::read_register(unsigned char)>
   19600:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:1564
  uint8_t AA = read_register(EN_AA);
   19602:	61 e0       	ldi	r22, 0x01	; 1
   19604:	c8 01       	movw	r24, r16
   19606:	0e 94 81 c8 	call	0x19102	; 0x19102 <RF24::read_register(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566
  
  if ( config & _BV(EN_CRC ) || AA)
   1960a:	c3 fd       	sbrc	r28, 3
   1960c:	02 c0       	rjmp	.+4      	; 0x19612 <RF24::getCRCLength()+0x20>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566 (discriminator 1)
   1960e:	88 23       	and	r24, r24
   19610:	39 f0       	breq	.+14     	; 0x19620 <RF24::getCRCLength()+0x2e>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1571
  {
    if ( config & _BV(CRCO) )
      result = RF24_CRC_16;
    else
      result = RF24_CRC_8;
   19612:	81 e0       	ldi	r24, 0x01	; 1
   19614:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/RF24/RF24.cpp:1568
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
  uint8_t AA = read_register(EN_AA);
  
  if ( config & _BV(EN_CRC ) || AA)
  {
    if ( config & _BV(CRCO) )
   19616:	c2 ff       	sbrs	r28, 2
   19618:	05 c0       	rjmp	.+10     	; 0x19624 <RF24::getCRCLength()+0x32>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1569
      result = RF24_CRC_16;
   1961a:	82 e0       	ldi	r24, 0x02	; 2
   1961c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/RF24/RF24.cpp:1574
    else
      result = RF24_CRC_8;
  }

  return result;
   1961e:	02 c0       	rjmp	.+4      	; 0x19624 <RF24::getCRCLength()+0x32>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1561

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
   19620:	90 e0       	ldi	r25, 0x00	; 0
   19622:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/RF24/RF24.cpp:1575
    else
      result = RF24_CRC_8;
  }

  return result;
}
   19624:	cf 91       	pop	r28
   19626:	1f 91       	pop	r17
   19628:	0f 91       	pop	r16
   1962a:	08 95       	ret

0001962c <RF24::printDetails()>:
_ZN4RF2412printDetailsEv():
/home/saric/Arduino/libraries/RF24/RF24.cpp:531
  rf24_csn_e_str_3,
};
#endif

void RF24::printDetails(void)
{
   1962c:	cf 93       	push	r28
   1962e:	df 93       	push	r29
   19630:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:565
	}
	printf("\n================ NRF Configuration ================\n");
 
#endif //Linux

  print_status(get_status());
   19632:	0e 94 cc c8 	call	0x19198	; 0x19198 <RF24::get_status()>
   19636:	68 2f       	mov	r22, r24
   19638:	ce 01       	movw	r24, r28
   1963a:	0e 94 cf c8 	call	0x1919e	; 0x1919e <RF24::print_status(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:567

  print_address_register(PSTR("RX_ADDR_P0-1"),RX_ADDR_P0,2);
   1963e:	22 e0       	ldi	r18, 0x02	; 2
   19640:	4a e0       	ldi	r20, 0x0A	; 10
   19642:	69 e4       	ldi	r22, 0x49	; 73
   19644:	73 e6       	ldi	r23, 0x63	; 99
   19646:	ce 01       	movw	r24, r28
   19648:	0e 94 3a c9 	call	0x19274	; 0x19274 <RF24::print_address_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:568
  print_byte_register(PSTR("RX_ADDR_P2-5"),RX_ADDR_P2,4);
   1964c:	24 e0       	ldi	r18, 0x04	; 4
   1964e:	4c e0       	ldi	r20, 0x0C	; 12
   19650:	6c e3       	ldi	r22, 0x3C	; 60
   19652:	73 e6       	ldi	r23, 0x63	; 99
   19654:	ce 01       	movw	r24, r28
   19656:	0e 94 fc c8 	call	0x191f8	; 0x191f8 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:569
  print_address_register(PSTR("TX_ADDR\t"),TX_ADDR);
   1965a:	21 e0       	ldi	r18, 0x01	; 1
   1965c:	40 e1       	ldi	r20, 0x10	; 16
   1965e:	63 e3       	ldi	r22, 0x33	; 51
   19660:	73 e6       	ldi	r23, 0x63	; 99
   19662:	ce 01       	movw	r24, r28
   19664:	0e 94 3a c9 	call	0x19274	; 0x19274 <RF24::print_address_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:571

  print_byte_register(PSTR("RX_PW_P0-6"),RX_PW_P0,6);
   19668:	26 e0       	ldi	r18, 0x06	; 6
   1966a:	41 e1       	ldi	r20, 0x11	; 17
   1966c:	68 e2       	ldi	r22, 0x28	; 40
   1966e:	73 e6       	ldi	r23, 0x63	; 99
   19670:	ce 01       	movw	r24, r28
   19672:	0e 94 fc c8 	call	0x191f8	; 0x191f8 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:572
  print_byte_register(PSTR("EN_AA\t"),EN_AA);
   19676:	21 e0       	ldi	r18, 0x01	; 1
   19678:	41 e0       	ldi	r20, 0x01	; 1
   1967a:	61 e2       	ldi	r22, 0x21	; 33
   1967c:	73 e6       	ldi	r23, 0x63	; 99
   1967e:	ce 01       	movw	r24, r28
   19680:	0e 94 fc c8 	call	0x191f8	; 0x191f8 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:573
  print_byte_register(PSTR("EN_RXADDR"),EN_RXADDR);
   19684:	21 e0       	ldi	r18, 0x01	; 1
   19686:	42 e0       	ldi	r20, 0x02	; 2
   19688:	67 e1       	ldi	r22, 0x17	; 23
   1968a:	73 e6       	ldi	r23, 0x63	; 99
   1968c:	ce 01       	movw	r24, r28
   1968e:	0e 94 fc c8 	call	0x191f8	; 0x191f8 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:574
  print_byte_register(PSTR("RF_CH\t"),RF_CH);
   19692:	21 e0       	ldi	r18, 0x01	; 1
   19694:	45 e0       	ldi	r20, 0x05	; 5
   19696:	60 e1       	ldi	r22, 0x10	; 16
   19698:	73 e6       	ldi	r23, 0x63	; 99
   1969a:	ce 01       	movw	r24, r28
   1969c:	0e 94 fc c8 	call	0x191f8	; 0x191f8 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:575
  print_byte_register(PSTR("RF_SETUP"),RF_SETUP);
   196a0:	21 e0       	ldi	r18, 0x01	; 1
   196a2:	46 e0       	ldi	r20, 0x06	; 6
   196a4:	67 e0       	ldi	r22, 0x07	; 7
   196a6:	73 e6       	ldi	r23, 0x63	; 99
   196a8:	ce 01       	movw	r24, r28
   196aa:	0e 94 fc c8 	call	0x191f8	; 0x191f8 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:576
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
   196ae:	21 e0       	ldi	r18, 0x01	; 1
   196b0:	40 e0       	ldi	r20, 0x00	; 0
   196b2:	6f ef       	ldi	r22, 0xFF	; 255
   196b4:	72 e6       	ldi	r23, 0x62	; 98
   196b6:	ce 01       	movw	r24, r28
   196b8:	0e 94 fc c8 	call	0x191f8	; 0x191f8 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:577
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);
   196bc:	22 e0       	ldi	r18, 0x02	; 2
   196be:	4c e1       	ldi	r20, 0x1C	; 28
   196c0:	61 ef       	ldi	r22, 0xF1	; 241
   196c2:	72 e6       	ldi	r23, 0x62	; 98
   196c4:	ce 01       	movw	r24, r28
   196c6:	0e 94 fc c8 	call	0x191f8	; 0x191f8 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:579

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
   196ca:	ce 01       	movw	r24, r28
   196cc:	0e 94 e9 ca 	call	0x195d2	; 0x195d2 <RF24::getDataRate()>
   196d0:	fc 01       	movw	r30, r24
   196d2:	ee 0f       	add	r30, r30
   196d4:	ff 1f       	adc	r31, r31
   196d6:	e0 55       	subi	r30, 0x50	; 80
   196d8:	fc 49       	sbci	r31, 0x9C	; 156
   196da:	85 91       	lpm	r24, Z+
   196dc:	94 91       	lpm	r25, Z
   196de:	9f 93       	push	r25
   196e0:	8f 93       	push	r24
   196e2:	8f ed       	ldi	r24, 0xDF	; 223
   196e4:	92 e6       	ldi	r25, 0x62	; 98
   196e6:	9f 93       	push	r25
   196e8:	8f 93       	push	r24
   196ea:	0e 94 f4 e2 	call	0x1c5e8	; 0x1c5e8 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:580
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
   196ee:	ee 81       	ldd	r30, Y+6	; 0x06
   196f0:	f0 e0       	ldi	r31, 0x00	; 0
   196f2:	ee 0f       	add	r30, r30
   196f4:	ff 1f       	adc	r31, r31
   196f6:	e7 56       	subi	r30, 0x67	; 103
   196f8:	fc 49       	sbci	r31, 0x9C	; 156
   196fa:	85 91       	lpm	r24, Z+
   196fc:	94 91       	lpm	r25, Z
   196fe:	9f 93       	push	r25
   19700:	8f 93       	push	r24
   19702:	80 ed       	ldi	r24, 0xD0	; 208
   19704:	92 e6       	ldi	r25, 0x62	; 98
   19706:	9f 93       	push	r25
   19708:	8f 93       	push	r24
   1970a:	0e 94 f4 e2 	call	0x1c5e8	; 0x1c5e8 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:581
  printf_P(PSTR("CRC Length\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
   1970e:	ce 01       	movw	r24, r28
   19710:	0e 94 f9 ca 	call	0x195f2	; 0x195f2 <RF24::getCRCLength()>
   19714:	fc 01       	movw	r30, r24
   19716:	ee 0f       	add	r30, r30
   19718:	ff 1f       	adc	r31, r31
   1971a:	e5 58       	subi	r30, 0x85	; 133
   1971c:	fc 49       	sbci	r31, 0x9C	; 156
   1971e:	85 91       	lpm	r24, Z+
   19720:	94 91       	lpm	r25, Z
   19722:	9f 93       	push	r25
   19724:	8f 93       	push	r24
   19726:	8d eb       	ldi	r24, 0xBD	; 189
   19728:	92 e6       	ldi	r25, 0x62	; 98
   1972a:	9f 93       	push	r25
   1972c:	8f 93       	push	r24
   1972e:	0e 94 f4 e2 	call	0x1c5e8	; 0x1c5e8 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:582
  printf_P(PSTR("PA Power\t = " PRIPSTR "\r\n"),  pgm_read_word(&rf24_pa_dbm_e_str_P[getPALevel()]));
   19732:	ce 01       	movw	r24, r28
   19734:	0e 94 25 ca 	call	0x1944a	; 0x1944a <RF24::getPALevel()>
   19738:	e8 2f       	mov	r30, r24
   1973a:	f0 e0       	ldi	r31, 0x00	; 0
   1973c:	ee 0f       	add	r30, r30
   1973e:	ff 1f       	adc	r31, r31
   19740:	ea 5a       	subi	r30, 0xAA	; 170
   19742:	fc 49       	sbci	r31, 0x9C	; 156
   19744:	85 91       	lpm	r24, Z+
   19746:	94 91       	lpm	r25, Z
   19748:	9f 93       	push	r25
   1974a:	8f 93       	push	r24
   1974c:	8c ea       	ldi	r24, 0xAC	; 172
   1974e:	92 e6       	ldi	r25, 0x62	; 98
   19750:	9f 93       	push	r25
   19752:	8f 93       	push	r24
   19754:	0e 94 f4 e2 	call	0x1c5e8	; 0x1c5e8 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:584

}
   19758:	8d b7       	in	r24, 0x3d	; 61
   1975a:	9e b7       	in	r25, 0x3e	; 62
   1975c:	40 96       	adiw	r24, 0x10	; 16
   1975e:	0f b6       	in	r0, 0x3f	; 63
   19760:	f8 94       	cli
   19762:	9e bf       	out	0x3e, r25	; 62
   19764:	0f be       	out	0x3f, r0	; 63
   19766:	8d bf       	out	0x3d, r24	; 61
   19768:	df 91       	pop	r29
   1976a:	cf 91       	pop	r28
   1976c:	08 95       	ret

0001976e <RF24Network::RF24Network(RF24&)>:
_ZN11RF24NetworkC2ER4RF24():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:63
  #endif
{
  txTime=0; networkFlags=0; returnSysMsgs=0; multicastRelay=0;
}
#elif !defined (DUAL_HEAD_RADIO)
RF24Network::RF24Network( RF24& _radio ): radio(_radio), next_frame(frame_queue) 
   1976e:	fc 01       	movw	r30, r24
   19770:	70 ab       	std	Z+48, r23	; 0x30
   19772:	67 a7       	std	Z+47, r22	; 0x2f
   19774:	dc 01       	movw	r26, r24
   19776:	a1 53       	subi	r26, 0x31	; 49
   19778:	bf 4f       	sbci	r27, 0xFF	; 255
   1977a:	c5 96       	adiw	r24, 0x35	; 53
   1977c:	11 96       	adiw	r26, 0x01	; 1
   1977e:	9c 93       	st	X, r25
   19780:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:66
{
  #if !defined ( DISABLE_FRAGMENTATION )
  frag_queue.message_buffer=&frag_queue_message_buffer[0];
   19782:	1c 96       	adiw	r26, 0x0c	; 12
   19784:	88 55       	subi	r24, 0x58	; 88
   19786:	9f 4f       	sbci	r25, 0xFF	; 255
   19788:	8d 93       	st	X+, r24
   1978a:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:63
  #endif
{
  txTime=0; networkFlags=0; returnSysMsgs=0; multicastRelay=0;
}
#elif !defined (DUAL_HEAD_RADIO)
RF24Network::RF24Network( RF24& _radio ): radio(_radio), next_frame(frame_queue) 
   1978c:	0c 97       	sbiw	r24, 0x0c	; 12
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:67
{
  #if !defined ( DISABLE_FRAGMENTATION )
  frag_queue.message_buffer=&frag_queue_message_buffer[0];
  frag_ptr = &frag_queue;
   1978e:	90 a7       	std	Z+40, r25	; 0x28
   19790:	87 a3       	std	Z+39, r24	; 0x27
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:69
  #endif
  txTime=0; networkFlags=0; returnSysMsgs=0; multicastRelay=0;
   19792:	13 a6       	std	Z+43, r1	; 0x2b
   19794:	14 a6       	std	Z+44, r1	; 0x2c
   19796:	15 a6       	std	Z+45, r1	; 0x2d
   19798:	16 a6       	std	Z+46, r1	; 0x2e
   1979a:	12 a6       	std	Z+42, r1	; 0x2a
   1979c:	11 a6       	std	Z+41, r1	; 0x29
   1979e:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:70
}
   197a0:	08 95       	ret

000197a2 <RF24Mesh::RF24Mesh(RF24&, RF24Network&)>:
_ZN8RF24MeshC2ER4RF24R11RF24Network():
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:11
#include "RF24Mesh_config.h"
#if defined (__linux) && !defined(__ARDUINO_X86__)
#include <fstream>
#endif

RF24Mesh::RF24Mesh( RF24& _radio,RF24Network& _network ): radio(_radio),network(_network){}
   197a2:	fc 01       	movw	r30, r24
   197a4:	77 83       	std	Z+7, r23	; 0x07
   197a6:	66 83       	std	Z+6, r22	; 0x06
   197a8:	51 87       	std	Z+9, r21	; 0x09
   197aa:	40 87       	std	Z+8, r20	; 0x08
   197ac:	08 95       	ret

000197ae <date2days(unsigned int, unsigned char, unsigned char)>:
_ZL9date2daysjhh():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:336
  return data;
}

void RTC_DS1307::writenvram(uint8_t address, uint8_t data) {
  writenvram(address, &data, 1);
}
   197ae:	dc 01       	movw	r26, r24
   197b0:	50 e0       	ldi	r21, 0x00	; 0
   197b2:	e3 e3       	ldi	r30, 0x33	; 51
   197b4:	f4 e6       	ldi	r31, 0x64	; 100
   197b6:	81 e0       	ldi	r24, 0x01	; 1
   197b8:	86 17       	cp	r24, r22
   197ba:	30 f4       	brcc	.+12     	; 0x197c8 <date2days(unsigned int, unsigned char, unsigned char)+0x1a>
   197bc:	94 91       	lpm	r25, Z
   197be:	49 0f       	add	r20, r25
   197c0:	51 1d       	adc	r21, r1
   197c2:	8f 5f       	subi	r24, 0xFF	; 255
   197c4:	31 96       	adiw	r30, 0x01	; 1
   197c6:	f8 cf       	rjmp	.-16     	; 0x197b8 <date2days(unsigned int, unsigned char, unsigned char)+0xa>
   197c8:	63 30       	cpi	r22, 0x03	; 3
   197ca:	38 f0       	brcs	.+14     	; 0x197da <date2days(unsigned int, unsigned char, unsigned char)+0x2c>
   197cc:	cd 01       	movw	r24, r26
   197ce:	83 70       	andi	r24, 0x03	; 3
   197d0:	99 27       	eor	r25, r25
   197d2:	89 2b       	or	r24, r25
   197d4:	11 f4       	brne	.+4      	; 0x197da <date2days(unsigned int, unsigned char, unsigned char)+0x2c>
   197d6:	4f 5f       	subi	r20, 0xFF	; 255
   197d8:	5f 4f       	sbci	r21, 0xFF	; 255
   197da:	9d 01       	movw	r18, r26
   197dc:	2d 5f       	subi	r18, 0xFD	; 253
   197de:	3f 4f       	sbci	r19, 0xFF	; 255
   197e0:	36 95       	lsr	r19
   197e2:	27 95       	ror	r18
   197e4:	36 95       	lsr	r19
   197e6:	27 95       	ror	r18
   197e8:	6d e6       	ldi	r22, 0x6D	; 109
   197ea:	71 e0       	ldi	r23, 0x01	; 1
   197ec:	a6 9f       	mul	r26, r22
   197ee:	c0 01       	movw	r24, r0
   197f0:	a7 9f       	mul	r26, r23
   197f2:	90 0d       	add	r25, r0
   197f4:	b6 9f       	mul	r27, r22
   197f6:	90 0d       	add	r25, r0
   197f8:	11 24       	eor	r1, r1
   197fa:	01 97       	sbiw	r24, 0x01	; 1
   197fc:	82 0f       	add	r24, r18
   197fe:	93 1f       	adc	r25, r19
   19800:	84 0f       	add	r24, r20
   19802:	95 1f       	adc	r25, r21
   19804:	08 95       	ret

00019806 <TwoWire::write(int)>:
_ZN7TwoWire5writeEi():
   19806:	dc 01       	movw	r26, r24
   19808:	ed 91       	ld	r30, X+
   1980a:	fc 91       	ld	r31, X
   1980c:	01 90       	ld	r0, Z+
   1980e:	f0 81       	ld	r31, Z
   19810:	e0 2d       	mov	r30, r0
   19812:	19 94       	eijmp

00019814 <DateTime::DateTime(unsigned long)>:
_ZN8DateTimeC2Em():
   19814:	8f 92       	push	r8
   19816:	9f 92       	push	r9
   19818:	af 92       	push	r10
   1981a:	bf 92       	push	r11
   1981c:	cf 92       	push	r12
   1981e:	df 92       	push	r13
   19820:	ef 92       	push	r14
   19822:	ff 92       	push	r15
   19824:	cf 93       	push	r28
   19826:	df 93       	push	r29
   19828:	ec 01       	movw	r28, r24
   1982a:	6a 01       	movw	r12, r20
   1982c:	7b 01       	movw	r14, r22
   1982e:	80 e8       	ldi	r24, 0x80	; 128
   19830:	c8 1a       	sub	r12, r24
   19832:	83 e4       	ldi	r24, 0x43	; 67
   19834:	d8 0a       	sbc	r13, r24
   19836:	8d e6       	ldi	r24, 0x6D	; 109
   19838:	e8 0a       	sbc	r14, r24
   1983a:	88 e3       	ldi	r24, 0x38	; 56
   1983c:	f8 0a       	sbc	r15, r24
   1983e:	8c e3       	ldi	r24, 0x3C	; 60
   19840:	88 2e       	mov	r8, r24
   19842:	91 2c       	mov	r9, r1
   19844:	a1 2c       	mov	r10, r1
   19846:	b1 2c       	mov	r11, r1
   19848:	c7 01       	movw	r24, r14
   1984a:	b6 01       	movw	r22, r12
   1984c:	a5 01       	movw	r20, r10
   1984e:	94 01       	movw	r18, r8
   19850:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
   19854:	6d 83       	std	Y+5, r22	; 0x05
   19856:	ca 01       	movw	r24, r20
   19858:	b9 01       	movw	r22, r18
   1985a:	a5 01       	movw	r20, r10
   1985c:	94 01       	movw	r18, r8
   1985e:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
   19862:	6c 83       	std	Y+4, r22	; 0x04
   19864:	c7 01       	movw	r24, r14
   19866:	b6 01       	movw	r22, r12
   19868:	20 e1       	ldi	r18, 0x10	; 16
   1986a:	3e e0       	ldi	r19, 0x0E	; 14
   1986c:	40 e0       	ldi	r20, 0x00	; 0
   1986e:	50 e0       	ldi	r21, 0x00	; 0
   19870:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
   19874:	ca 01       	movw	r24, r20
   19876:	b9 01       	movw	r22, r18
   19878:	28 e1       	ldi	r18, 0x18	; 24
   1987a:	30 e0       	ldi	r19, 0x00	; 0
   1987c:	40 e0       	ldi	r20, 0x00	; 0
   1987e:	50 e0       	ldi	r21, 0x00	; 0
   19880:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
   19884:	6b 83       	std	Y+3, r22	; 0x03
   19886:	c7 01       	movw	r24, r14
   19888:	b6 01       	movw	r22, r12
   1988a:	20 e8       	ldi	r18, 0x80	; 128
   1988c:	31 e5       	ldi	r19, 0x51	; 81
   1988e:	41 e0       	ldi	r20, 0x01	; 1
   19890:	50 e0       	ldi	r21, 0x00	; 0
   19892:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
   19896:	18 82       	st	Y, r1
   19898:	63 e9       	ldi	r22, 0x93	; 147
   1989a:	7e ef       	ldi	r23, 0xFE	; 254
   1989c:	48 81       	ld	r20, Y
   1989e:	54 2f       	mov	r21, r20
   198a0:	53 70       	andi	r21, 0x03	; 3
   198a2:	81 e0       	ldi	r24, 0x01	; 1
   198a4:	09 f0       	breq	.+2      	; 0x198a8 <DateTime::DateTime(unsigned long)+0x94>
   198a6:	80 e0       	ldi	r24, 0x00	; 0
   198a8:	90 e0       	ldi	r25, 0x00	; 0
   198aa:	fc 01       	movw	r30, r24
   198ac:	e3 59       	subi	r30, 0x93	; 147
   198ae:	fe 4f       	sbci	r31, 0xFE	; 254
   198b0:	2e 17       	cp	r18, r30
   198b2:	3f 07       	cpc	r19, r31
   198b4:	40 f0       	brcs	.+16     	; 0x198c6 <DateTime::DateTime(unsigned long)+0xb2>
   198b6:	fb 01       	movw	r30, r22
   198b8:	e8 1b       	sub	r30, r24
   198ba:	f9 0b       	sbc	r31, r25
   198bc:	2e 0f       	add	r18, r30
   198be:	3f 1f       	adc	r19, r31
   198c0:	4f 5f       	subi	r20, 0xFF	; 255
   198c2:	48 83       	st	Y, r20
   198c4:	eb cf       	rjmp	.-42     	; 0x1989c <DateTime::DateTime(unsigned long)+0x88>
   198c6:	81 e0       	ldi	r24, 0x01	; 1
   198c8:	89 83       	std	Y+1, r24	; 0x01
   198ca:	89 81       	ldd	r24, Y+1	; 0x01
   198cc:	68 2f       	mov	r22, r24
   198ce:	61 50       	subi	r22, 0x01	; 1
   198d0:	77 0b       	sbc	r23, r23
   198d2:	fb 01       	movw	r30, r22
   198d4:	ed 5c       	subi	r30, 0xCD	; 205
   198d6:	fb 49       	sbci	r31, 0x9B	; 155
   198d8:	e4 91       	lpm	r30, Z
   198da:	51 11       	cpse	r21, r1
   198dc:	03 c0       	rjmp	.+6      	; 0x198e4 <DateTime::DateTime(unsigned long)+0xd0>
   198de:	82 30       	cpi	r24, 0x02	; 2
   198e0:	09 f4       	brne	.+2      	; 0x198e4 <DateTime::DateTime(unsigned long)+0xd0>
   198e2:	ef 5f       	subi	r30, 0xFF	; 255
   198e4:	f0 e0       	ldi	r31, 0x00	; 0
   198e6:	2e 17       	cp	r18, r30
   198e8:	3f 07       	cpc	r19, r31
   198ea:	20 f0       	brcs	.+8      	; 0x198f4 <DateTime::DateTime(unsigned long)+0xe0>
   198ec:	2e 1b       	sub	r18, r30
   198ee:	3f 0b       	sbc	r19, r31
   198f0:	8f 5f       	subi	r24, 0xFF	; 255
   198f2:	ea cf       	rjmp	.-44     	; 0x198c8 <DateTime::DateTime(unsigned long)+0xb4>
   198f4:	2f 5f       	subi	r18, 0xFF	; 255
   198f6:	2a 83       	std	Y+2, r18	; 0x02
   198f8:	df 91       	pop	r29
   198fa:	cf 91       	pop	r28
   198fc:	ff 90       	pop	r15
   198fe:	ef 90       	pop	r14
   19900:	df 90       	pop	r13
   19902:	cf 90       	pop	r12
   19904:	bf 90       	pop	r11
   19906:	af 90       	pop	r10
   19908:	9f 90       	pop	r9
   1990a:	8f 90       	pop	r8
   1990c:	08 95       	ret

0001990e <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN8DateTimeC2Ejhhhhh():
   1990e:	cf 92       	push	r12
   19910:	ef 92       	push	r14
   19912:	0f 93       	push	r16
   19914:	fc 01       	movw	r30, r24
   19916:	60 3d       	cpi	r22, 0xD0	; 208
   19918:	87 e0       	ldi	r24, 0x07	; 7
   1991a:	78 07       	cpc	r23, r24
   1991c:	10 f0       	brcs	.+4      	; 0x19922 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x14>
   1991e:	60 5d       	subi	r22, 0xD0	; 208
   19920:	77 40       	sbci	r23, 0x07	; 7
   19922:	60 83       	st	Z, r22
   19924:	41 83       	std	Z+1, r20	; 0x01
   19926:	22 83       	std	Z+2, r18	; 0x02
   19928:	03 83       	std	Z+3, r16	; 0x03
   1992a:	e4 82       	std	Z+4, r14	; 0x04
   1992c:	c5 82       	std	Z+5, r12	; 0x05
   1992e:	0f 91       	pop	r16
   19930:	ef 90       	pop	r14
   19932:	cf 90       	pop	r12
   19934:	08 95       	ret

00019936 <DateTime::dayOfTheWeek() const>:
_ZNK8DateTime12dayOfTheWeekEv():
   19936:	fc 01       	movw	r30, r24
   19938:	80 81       	ld	r24, Z
   1993a:	42 81       	ldd	r20, Z+2	; 0x02
   1993c:	61 81       	ldd	r22, Z+1	; 0x01
   1993e:	90 e0       	ldi	r25, 0x00	; 0
   19940:	0e 94 d7 cb 	call	0x197ae	; 0x197ae <date2days(unsigned int, unsigned char, unsigned char)>
   19944:	06 96       	adiw	r24, 0x06	; 6
   19946:	67 e0       	ldi	r22, 0x07	; 7
   19948:	70 e0       	ldi	r23, 0x00	; 0
   1994a:	0e 94 06 de 	call	0x1bc0c	; 0x1bc0c <__udivmodhi4>
   1994e:	08 95       	ret

00019950 <RTC_DS1307::begin()>:
_ZN10RTC_DS13075beginEv():
   19950:	8e e3       	ldi	r24, 0x3E	; 62
   19952:	93 e1       	ldi	r25, 0x13	; 19
   19954:	0e 94 e7 ce 	call	0x19dce	; 0x19dce <TwoWire::begin()>
   19958:	81 e0       	ldi	r24, 0x01	; 1
   1995a:	08 95       	ret

0001995c <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
   1995c:	1f 93       	push	r17
   1995e:	cf 93       	push	r28
   19960:	df 93       	push	r29
   19962:	ec 01       	movw	r28, r24
   19964:	68 e6       	ldi	r22, 0x68	; 104
   19966:	70 e0       	ldi	r23, 0x00	; 0
   19968:	8e e3       	ldi	r24, 0x3E	; 62
   1996a:	93 e1       	ldi	r25, 0x13	; 19
   1996c:	0e 94 03 cf 	call	0x19e06	; 0x19e06 <TwoWire::beginTransmission(int)>
   19970:	60 e0       	ldi	r22, 0x00	; 0
   19972:	8e e3       	ldi	r24, 0x3E	; 62
   19974:	93 e1       	ldi	r25, 0x13	; 19
   19976:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <TwoWire::write(unsigned char)>
   1997a:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
   1997c:	1a e0       	ldi	r17, 0x0A	; 10
   1997e:	82 2f       	mov	r24, r18
   19980:	61 2f       	mov	r22, r17
   19982:	0e 94 fa dd 	call	0x1bbf4	; 0x1bbf4 <__udivmodqi4>
   19986:	68 2f       	mov	r22, r24
   19988:	66 0f       	add	r22, r22
   1998a:	68 0f       	add	r22, r24
   1998c:	66 0f       	add	r22, r22
   1998e:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   19990:	8e e3       	ldi	r24, 0x3E	; 62
   19992:	93 e1       	ldi	r25, 0x13	; 19
   19994:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <TwoWire::write(unsigned char)>
   19998:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
   1999a:	82 2f       	mov	r24, r18
   1999c:	61 2f       	mov	r22, r17
   1999e:	0e 94 fa dd 	call	0x1bbf4	; 0x1bbf4 <__udivmodqi4>
   199a2:	68 2f       	mov	r22, r24
   199a4:	66 0f       	add	r22, r22
   199a6:	68 0f       	add	r22, r24
   199a8:	66 0f       	add	r22, r22
   199aa:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   199ac:	8e e3       	ldi	r24, 0x3E	; 62
   199ae:	93 e1       	ldi	r25, 0x13	; 19
   199b0:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <TwoWire::write(unsigned char)>
   199b4:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
   199b6:	82 2f       	mov	r24, r18
   199b8:	61 2f       	mov	r22, r17
   199ba:	0e 94 fa dd 	call	0x1bbf4	; 0x1bbf4 <__udivmodqi4>
   199be:	68 2f       	mov	r22, r24
   199c0:	66 0f       	add	r22, r22
   199c2:	68 0f       	add	r22, r24
   199c4:	66 0f       	add	r22, r22
   199c6:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   199c8:	8e e3       	ldi	r24, 0x3E	; 62
   199ca:	93 e1       	ldi	r25, 0x13	; 19
   199cc:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <TwoWire::write(unsigned char)>
   199d0:	60 e0       	ldi	r22, 0x00	; 0
   199d2:	8e e3       	ldi	r24, 0x3E	; 62
   199d4:	93 e1       	ldi	r25, 0x13	; 19
   199d6:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <TwoWire::write(unsigned char)>
   199da:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
   199dc:	82 2f       	mov	r24, r18
   199de:	61 2f       	mov	r22, r17
   199e0:	0e 94 fa dd 	call	0x1bbf4	; 0x1bbf4 <__udivmodqi4>
   199e4:	68 2f       	mov	r22, r24
   199e6:	66 0f       	add	r22, r22
   199e8:	68 0f       	add	r22, r24
   199ea:	66 0f       	add	r22, r22
   199ec:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   199ee:	8e e3       	ldi	r24, 0x3E	; 62
   199f0:	93 e1       	ldi	r25, 0x13	; 19
   199f2:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <TwoWire::write(unsigned char)>
   199f6:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
   199f8:	82 2f       	mov	r24, r18
   199fa:	61 2f       	mov	r22, r17
   199fc:	0e 94 fa dd 	call	0x1bbf4	; 0x1bbf4 <__udivmodqi4>
   19a00:	68 2f       	mov	r22, r24
   19a02:	66 0f       	add	r22, r22
   19a04:	68 0f       	add	r22, r24
   19a06:	66 0f       	add	r22, r22
   19a08:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   19a0a:	8e e3       	ldi	r24, 0x3E	; 62
   19a0c:	93 e1       	ldi	r25, 0x13	; 19
   19a0e:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <TwoWire::write(unsigned char)>
   19a12:	28 81       	ld	r18, Y
bin2bcd():
   19a14:	82 2f       	mov	r24, r18
   19a16:	61 2f       	mov	r22, r17
   19a18:	0e 94 fa dd 	call	0x1bbf4	; 0x1bbf4 <__udivmodqi4>
   19a1c:	68 2f       	mov	r22, r24
   19a1e:	66 0f       	add	r22, r22
   19a20:	68 0f       	add	r22, r24
   19a22:	66 0f       	add	r22, r22
   19a24:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   19a26:	8e e3       	ldi	r24, 0x3E	; 62
   19a28:	93 e1       	ldi	r25, 0x13	; 19
   19a2a:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <TwoWire::write(unsigned char)>
   19a2e:	8e e3       	ldi	r24, 0x3E	; 62
   19a30:	93 e1       	ldi	r25, 0x13	; 19
   19a32:	df 91       	pop	r29
   19a34:	cf 91       	pop	r28
   19a36:	1f 91       	pop	r17
   19a38:	0c 94 81 cf 	jmp	0x19f02	; 0x19f02 <TwoWire::endTransmission()>

00019a3c <RTC_DS1307::isrunning()>:
_ZN10RTC_DS13079isrunningEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:245
  Wire.begin();
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
   19a3c:	68 e6       	ldi	r22, 0x68	; 104
   19a3e:	70 e0       	ldi	r23, 0x00	; 0
   19a40:	8e e3       	ldi	r24, 0x3E	; 62
   19a42:	93 e1       	ldi	r25, 0x13	; 19
   19a44:	0e 94 03 cf 	call	0x19e06	; 0x19e06 <TwoWire::beginTransmission(int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  Wire._I2C_WRITE((byte)0);
   19a48:	60 e0       	ldi	r22, 0x00	; 0
   19a4a:	8e e3       	ldi	r24, 0x3E	; 62
   19a4c:	93 e1       	ldi	r25, 0x13	; 19
   19a4e:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   19a52:	8e e3       	ldi	r24, 0x3E	; 62
   19a54:	93 e1       	ldi	r25, 0x13	; 19
   19a56:	0e 94 81 cf 	call	0x19f02	; 0x19f02 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   19a5a:	41 e0       	ldi	r20, 0x01	; 1
   19a5c:	50 e0       	ldi	r21, 0x00	; 0
   19a5e:	68 e6       	ldi	r22, 0x68	; 104
   19a60:	70 e0       	ldi	r23, 0x00	; 0
   19a62:	8e e3       	ldi	r24, 0x3E	; 62
   19a64:	93 e1       	ldi	r25, 0x13	; 19
   19a66:	0e 94 7e cf 	call	0x19efc	; 0x19efc <TwoWire::requestFrom(int, int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   19a6a:	8e e3       	ldi	r24, 0x3E	; 62
   19a6c:	93 e1       	ldi	r25, 0x13	; 19
   19a6e:	0e 94 32 ce 	call	0x19c64	; 0x19c64 <TwoWire::read()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   19a72:	80 58       	subi	r24, 0x80	; 128
   19a74:	87 fb       	bst	r24, 7
   19a76:	88 27       	eor	r24, r24
   19a78:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   19a7a:	08 95       	ret

00019a7c <RTC_DS1307::now()>:
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:268
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
}

DateTime RTC_DS1307::now() {
   19a7c:	cf 92       	push	r12
   19a7e:	df 92       	push	r13
   19a80:	ff 92       	push	r15
   19a82:	0f 93       	push	r16
   19a84:	1f 93       	push	r17
   19a86:	cf 93       	push	r28
   19a88:	df 93       	push	r29
   19a8a:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:269
  Wire.beginTransmission(DS1307_ADDRESS);
   19a8c:	68 e6       	ldi	r22, 0x68	; 104
   19a8e:	70 e0       	ldi	r23, 0x00	; 0
   19a90:	8e e3       	ldi	r24, 0x3E	; 62
   19a92:	93 e1       	ldi	r25, 0x13	; 19
   19a94:	0e 94 03 cf 	call	0x19e06	; 0x19e06 <TwoWire::beginTransmission(int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
  Wire._I2C_WRITE((byte)0);	
   19a98:	60 e0       	ldi	r22, 0x00	; 0
   19a9a:	8e e3       	ldi	r24, 0x3E	; 62
   19a9c:	93 e1       	ldi	r25, 0x13	; 19
   19a9e:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
   19aa2:	8e e3       	ldi	r24, 0x3E	; 62
   19aa4:	93 e1       	ldi	r25, 0x13	; 19
   19aa6:	0e 94 81 cf 	call	0x19f02	; 0x19f02 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
   19aaa:	47 e0       	ldi	r20, 0x07	; 7
   19aac:	50 e0       	ldi	r21, 0x00	; 0
   19aae:	68 e6       	ldi	r22, 0x68	; 104
   19ab0:	70 e0       	ldi	r23, 0x00	; 0
   19ab2:	8e e3       	ldi	r24, 0x3E	; 62
   19ab4:	93 e1       	ldi	r25, 0x13	; 19
   19ab6:	0e 94 7e cf 	call	0x19efc	; 0x19efc <TwoWire::requestFrom(int, int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   19aba:	8e e3       	ldi	r24, 0x3E	; 62
   19abc:	93 e1       	ldi	r25, 0x13	; 19
   19abe:	0e 94 32 ce 	call	0x19c64	; 0x19c64 <TwoWire::read()>
   19ac2:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   19ac4:	28 2f       	mov	r18, r24
   19ac6:	30 e0       	ldi	r19, 0x00	; 0
   19ac8:	94 e0       	ldi	r25, 0x04	; 4
   19aca:	35 95       	asr	r19
   19acc:	27 95       	ror	r18
   19ace:	9a 95       	dec	r25
   19ad0:	e1 f7       	brne	.-8      	; 0x19aca <RTC_DS1307::now()+0x4e>
   19ad2:	92 2f       	mov	r25, r18
   19ad4:	99 0f       	add	r25, r25
   19ad6:	99 0f       	add	r25, r25
   19ad8:	c2 2f       	mov	r28, r18
   19ada:	c9 1b       	sub	r28, r25
   19adc:	cc 0f       	add	r28, r28
   19ade:	c8 0f       	add	r28, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   19ae0:	8e e3       	ldi	r24, 0x3E	; 62
   19ae2:	93 e1       	ldi	r25, 0x13	; 19
   19ae4:	0e 94 32 ce 	call	0x19c64	; 0x19c64 <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   19ae8:	9c 01       	movw	r18, r24
   19aea:	44 e0       	ldi	r20, 0x04	; 4
   19aec:	35 95       	asr	r19
   19aee:	27 95       	ror	r18
   19af0:	4a 95       	dec	r20
   19af2:	e1 f7       	brne	.-8      	; 0x19aec <RTC_DS1307::now()+0x70>
   19af4:	2f 70       	andi	r18, 0x0F	; 15
   19af6:	33 27       	eor	r19, r19
   19af8:	92 2f       	mov	r25, r18
   19afa:	99 0f       	add	r25, r25
   19afc:	99 0f       	add	r25, r25
   19afe:	d2 2f       	mov	r29, r18
   19b00:	d9 1b       	sub	r29, r25
   19b02:	dd 0f       	add	r29, r29
   19b04:	d8 0f       	add	r29, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   19b06:	8e e3       	ldi	r24, 0x3E	; 62
   19b08:	93 e1       	ldi	r25, 0x13	; 19
   19b0a:	0e 94 32 ce 	call	0x19c64	; 0x19c64 <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   19b0e:	9c 01       	movw	r18, r24
   19b10:	54 e0       	ldi	r21, 0x04	; 4
   19b12:	35 95       	asr	r19
   19b14:	27 95       	ror	r18
   19b16:	5a 95       	dec	r21
   19b18:	e1 f7       	brne	.-8      	; 0x19b12 <RTC_DS1307::now()+0x96>
   19b1a:	2f 70       	andi	r18, 0x0F	; 15
   19b1c:	33 27       	eor	r19, r19
   19b1e:	92 2f       	mov	r25, r18
   19b20:	99 0f       	add	r25, r25
   19b22:	99 0f       	add	r25, r25
   19b24:	12 2f       	mov	r17, r18
   19b26:	19 1b       	sub	r17, r25
   19b28:	11 0f       	add	r17, r17
   19b2a:	18 0f       	add	r17, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   19b2c:	8e e3       	ldi	r24, 0x3E	; 62
   19b2e:	93 e1       	ldi	r25, 0x13	; 19
   19b30:	0e 94 32 ce 	call	0x19c64	; 0x19c64 <TwoWire::read()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
   19b34:	8e e3       	ldi	r24, 0x3E	; 62
   19b36:	93 e1       	ldi	r25, 0x13	; 19
   19b38:	0e 94 32 ce 	call	0x19c64	; 0x19c64 <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   19b3c:	9c 01       	movw	r18, r24
   19b3e:	64 e0       	ldi	r22, 0x04	; 4
   19b40:	35 95       	asr	r19
   19b42:	27 95       	ror	r18
   19b44:	6a 95       	dec	r22
   19b46:	e1 f7       	brne	.-8      	; 0x19b40 <RTC_DS1307::now()+0xc4>
   19b48:	2f 70       	andi	r18, 0x0F	; 15
   19b4a:	33 27       	eor	r19, r19
   19b4c:	92 2f       	mov	r25, r18
   19b4e:	99 0f       	add	r25, r25
   19b50:	99 0f       	add	r25, r25
   19b52:	02 2f       	mov	r16, r18
   19b54:	09 1b       	sub	r16, r25
   19b56:	00 0f       	add	r16, r16
   19b58:	08 0f       	add	r16, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   19b5a:	8e e3       	ldi	r24, 0x3E	; 62
   19b5c:	93 e1       	ldi	r25, 0x13	; 19
   19b5e:	0e 94 32 ce 	call	0x19c64	; 0x19c64 <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   19b62:	9c 01       	movw	r18, r24
   19b64:	74 e0       	ldi	r23, 0x04	; 4
   19b66:	35 95       	asr	r19
   19b68:	27 95       	ror	r18
   19b6a:	7a 95       	dec	r23
   19b6c:	e1 f7       	brne	.-8      	; 0x19b66 <RTC_DS1307::now()+0xea>
   19b6e:	2f 70       	andi	r18, 0x0F	; 15
   19b70:	33 27       	eor	r19, r19
   19b72:	92 2f       	mov	r25, r18
   19b74:	99 0f       	add	r25, r25
   19b76:	99 0f       	add	r25, r25
   19b78:	f2 2e       	mov	r15, r18
   19b7a:	f9 1a       	sub	r15, r25
   19b7c:	ff 0c       	add	r15, r15
   19b7e:	f8 0e       	add	r15, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   19b80:	8e e3       	ldi	r24, 0x3E	; 62
   19b82:	93 e1       	ldi	r25, 0x13	; 19
   19b84:	0e 94 32 ce 	call	0x19c64	; 0x19c64 <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   19b88:	9c 01       	movw	r18, r24
   19b8a:	e4 e0       	ldi	r30, 0x04	; 4
   19b8c:	35 95       	asr	r19
   19b8e:	27 95       	ror	r18
   19b90:	ea 95       	dec	r30
   19b92:	e1 f7       	brne	.-8      	; 0x19b8c <RTC_DS1307::now()+0x110>
   19b94:	2f 70       	andi	r18, 0x0F	; 15
   19b96:	33 27       	eor	r19, r19
   19b98:	92 2f       	mov	r25, r18
   19b9a:	99 0f       	add	r25, r25
   19b9c:	99 0f       	add	r25, r25
   19b9e:	29 1b       	sub	r18, r25
   19ba0:	22 0f       	add	r18, r18
   19ba2:	82 0f       	add	r24, r18
_ZN8DateTimeC4Ejhhhhh():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   19ba4:	f6 01       	movw	r30, r12
   19ba6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   19ba8:	f1 82       	std	Z+1, r15	; 0x01
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   19baa:	02 83       	std	Z+2, r16	; 0x02
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   19bac:	13 83       	std	Z+3, r17	; 0x03
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   19bae:	d4 83       	std	Z+4, r29	; 0x04
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   19bb0:	c5 83       	std	Z+5, r28	; 0x05
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:283
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
   19bb2:	c6 01       	movw	r24, r12
   19bb4:	df 91       	pop	r29
   19bb6:	cf 91       	pop	r28
   19bb8:	1f 91       	pop	r17
   19bba:	0f 91       	pop	r16
   19bbc:	ff 90       	pop	r15
   19bbe:	df 90       	pop	r13
   19bc0:	cf 90       	pop	r12
   19bc2:	08 95       	ret

00019bc4 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)>:
_ZN24Temperature_LM75_Derived30readIntegerTemperatureRegisterEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:51
  .default_temperature_frac_width = 8,
  .max_temperature_resolution     = 13,
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
   19bc4:	0f 93       	push	r16
   19bc6:	1f 93       	push	r17
   19bc8:	cf 93       	push	r28
   19bca:	df 93       	push	r29
   19bcc:	ec 01       	movw	r28, r24
   19bce:	16 2f       	mov	r17, r22
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
   19bd0:	6a 81       	ldd	r22, Y+2	; 0x02
   19bd2:	88 81       	ld	r24, Y
   19bd4:	99 81       	ldd	r25, Y+1	; 0x01
   19bd6:	0e 94 f9 ce 	call	0x19df2	; 0x19df2 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
   19bda:	88 81       	ld	r24, Y
   19bdc:	99 81       	ldd	r25, Y+1	; 0x01
   19bde:	dc 01       	movw	r26, r24
   19be0:	ed 91       	ld	r30, X+
   19be2:	fc 91       	ld	r31, X
   19be4:	01 90       	ld	r0, Z+
   19be6:	f0 81       	ld	r31, Z
   19be8:	e0 2d       	mov	r30, r0
   19bea:	61 2f       	mov	r22, r17
   19bec:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
   19bee:	88 81       	ld	r24, Y
   19bf0:	99 81       	ldd	r25, Y+1	; 0x01
   19bf2:	0e 94 81 cf 	call	0x19f02	; 0x19f02 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
   19bf6:	88 81       	ld	r24, Y
   19bf8:	99 81       	ldd	r25, Y+1	; 0x01
   19bfa:	2b 81       	ldd	r18, Y+3	; 0x03
   19bfc:	42 e0       	ldi	r20, 0x02	; 2
   19bfe:	29 30       	cpi	r18, 0x09	; 9
   19c00:	08 f4       	brcc	.+2      	; 0x19c04 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)+0x40>
   19c02:	41 e0       	ldi	r20, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58 (discriminator 4)
   19c04:	6a 81       	ldd	r22, Y+2	; 0x02
   19c06:	0e 94 7b cf 	call	0x19ef6	; 0x19ef6 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61 (discriminator 4)

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
   19c0a:	88 81       	ld	r24, Y
   19c0c:	99 81       	ldd	r25, Y+1	; 0x01
   19c0e:	dc 01       	movw	r26, r24
   19c10:	ed 91       	ld	r30, X+
   19c12:	fc 91       	ld	r31, X
   19c14:	02 84       	ldd	r0, Z+10	; 0x0a
   19c16:	f3 85       	ldd	r31, Z+11	; 0x0b
   19c18:	e0 2d       	mov	r30, r0
   19c1a:	19 95       	eicall
   19c1c:	00 e0       	ldi	r16, 0x00	; 0
   19c1e:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64 (discriminator 4)
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
   19c20:	8b 81       	ldd	r24, Y+3	; 0x03
   19c22:	89 30       	cpi	r24, 0x09	; 9
   19c24:	58 f0       	brcs	.+22     	; 0x19c3c <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)+0x78>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
   19c26:	88 81       	ld	r24, Y
   19c28:	99 81       	ldd	r25, Y+1	; 0x01
   19c2a:	dc 01       	movw	r26, r24
   19c2c:	ed 91       	ld	r30, X+
   19c2e:	fc 91       	ld	r31, X
   19c30:	02 84       	ldd	r0, Z+10	; 0x0a
   19c32:	f3 85       	ldd	r31, Z+11	; 0x0b
   19c34:	e0 2d       	mov	r30, r0
   19c36:	19 95       	eicall
   19c38:	08 2b       	or	r16, r24
   19c3a:	19 2b       	or	r17, r25
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
   19c3c:	88 81       	ld	r24, Y
   19c3e:	99 81       	ldd	r25, Y+1	; 0x01
   19c40:	0e 94 81 cf 	call	0x19f02	; 0x19f02 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
   19c44:	8c 81       	ldd	r24, Y+4	; 0x04
   19c46:	9d 81       	ldd	r25, Y+5	; 0x05
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:76

  // Read the raw memory as a 16-bit signed integer and return.
  return *(int16_t *)(&t);
}
   19c48:	80 23       	and	r24, r16
   19c4a:	91 23       	and	r25, r17
   19c4c:	df 91       	pop	r29
   19c4e:	cf 91       	pop	r28
   19c50:	1f 91       	pop	r17
   19c52:	0f 91       	pop	r16
   19c54:	08 95       	ret

00019c56 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:326

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
   19c56:	80 91 72 13 	lds	r24, 0x1372	; 0x801372 <TwoWire::rxBufferLength>
   19c5a:	90 91 73 13 	lds	r25, 0x1373	; 0x801373 <TwoWire::rxBufferIndex>
   19c5e:	89 1b       	sub	r24, r25
   19c60:	99 0b       	sbc	r25, r25
   19c62:	08 95       	ret

00019c64 <TwoWire::read()>:
_ZN7TwoWire4readEv():
   19c64:	90 91 73 13 	lds	r25, 0x1373	; 0x801373 <TwoWire::rxBufferIndex>
   19c68:	80 91 72 13 	lds	r24, 0x1372	; 0x801372 <TwoWire::rxBufferLength>
   19c6c:	2f ef       	ldi	r18, 0xFF	; 255
   19c6e:	3f ef       	ldi	r19, 0xFF	; 255
   19c70:	98 17       	cp	r25, r24
   19c72:	48 f4       	brcc	.+18     	; 0x19c86 <TwoWire::read()+0x22>
   19c74:	e9 2f       	mov	r30, r25
   19c76:	f0 e0       	ldi	r31, 0x00	; 0
   19c78:	ec 58       	subi	r30, 0x8C	; 140
   19c7a:	fc 4e       	sbci	r31, 0xEC	; 236
   19c7c:	20 81       	ld	r18, Z
   19c7e:	30 e0       	ldi	r19, 0x00	; 0
   19c80:	9f 5f       	subi	r25, 0xFF	; 255
   19c82:	90 93 73 13 	sts	0x1373, r25	; 0x801373 <TwoWire::rxBufferIndex>
   19c86:	c9 01       	movw	r24, r18
   19c88:	08 95       	ret

00019c8a <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
   19c8a:	e0 91 73 13 	lds	r30, 0x1373	; 0x801373 <TwoWire::rxBufferIndex>
   19c8e:	80 91 72 13 	lds	r24, 0x1372	; 0x801372 <TwoWire::rxBufferLength>
   19c92:	e8 17       	cp	r30, r24
   19c94:	30 f4       	brcc	.+12     	; 0x19ca2 <TwoWire::peek()+0x18>
   19c96:	f0 e0       	ldi	r31, 0x00	; 0
   19c98:	ec 58       	subi	r30, 0x8C	; 140
   19c9a:	fc 4e       	sbci	r31, 0xEC	; 236
   19c9c:	80 81       	ld	r24, Z
   19c9e:	90 e0       	ldi	r25, 0x00	; 0
   19ca0:	08 95       	ret
   19ca2:	8f ef       	ldi	r24, 0xFF	; 255
   19ca4:	9f ef       	ldi	r25, 0xFF	; 255
   19ca6:	08 95       	ret

00019ca8 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
   19ca8:	08 95       	ret

00019caa <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
   19caa:	cf 93       	push	r28
   19cac:	df 93       	push	r29
   19cae:	ec 01       	movw	r28, r24
   19cb0:	e0 91 4a 13 	lds	r30, 0x134A	; 0x80134a <TwoWire::user_onReceive>
   19cb4:	f0 91 4b 13 	lds	r31, 0x134B	; 0x80134b <TwoWire::user_onReceive+0x1>
   19cb8:	30 97       	sbiw	r30, 0x00	; 0
   19cba:	f1 f0       	breq	.+60     	; 0x19cf8 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
   19cbc:	90 91 73 13 	lds	r25, 0x1373	; 0x801373 <TwoWire::rxBufferIndex>
   19cc0:	80 91 72 13 	lds	r24, 0x1372	; 0x801372 <TwoWire::rxBufferLength>
   19cc4:	98 17       	cp	r25, r24
   19cc6:	c0 f0       	brcs	.+48     	; 0x19cf8 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
   19cc8:	90 e0       	ldi	r25, 0x00	; 0
   19cca:	29 2f       	mov	r18, r25
   19ccc:	30 e0       	ldi	r19, 0x00	; 0
   19cce:	26 17       	cp	r18, r22
   19cd0:	37 07       	cpc	r19, r23
   19cd2:	54 f4       	brge	.+20     	; 0x19ce8 <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
   19cd4:	de 01       	movw	r26, r28
   19cd6:	a2 0f       	add	r26, r18
   19cd8:	b3 1f       	adc	r27, r19
   19cda:	4c 91       	ld	r20, X
   19cdc:	2c 58       	subi	r18, 0x8C	; 140
   19cde:	3c 4e       	sbci	r19, 0xEC	; 236
   19ce0:	d9 01       	movw	r26, r18
   19ce2:	4c 93       	st	X, r20
   19ce4:	9f 5f       	subi	r25, 0xFF	; 255
   19ce6:	f1 cf       	rjmp	.-30     	; 0x19cca <TwoWire::onReceiveService(unsigned char*, int)+0x20>
   19ce8:	10 92 73 13 	sts	0x1373, r1	; 0x801373 <TwoWire::rxBufferIndex>
   19cec:	60 93 72 13 	sts	0x1372, r22	; 0x801372 <TwoWire::rxBufferLength>
   19cf0:	cb 01       	movw	r24, r22
   19cf2:	df 91       	pop	r29
   19cf4:	cf 91       	pop	r28
   19cf6:	19 94       	eijmp
   19cf8:	df 91       	pop	r29
   19cfa:	cf 91       	pop	r28
   19cfc:	08 95       	ret

00019cfe <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
   19cfe:	e0 91 4c 13 	lds	r30, 0x134C	; 0x80134c <TwoWire::user_onRequest>
   19d02:	f0 91 4d 13 	lds	r31, 0x134D	; 0x80134d <TwoWire::user_onRequest+0x1>
   19d06:	30 97       	sbiw	r30, 0x00	; 0
   19d08:	29 f0       	breq	.+10     	; 0x19d14 <TwoWire::onRequestService()+0x16>
   19d0a:	10 92 50 13 	sts	0x1350, r1	; 0x801350 <TwoWire::txBufferIndex>
   19d0e:	10 92 4f 13 	sts	0x134F, r1	; 0x80134f <TwoWire::txBufferLength>
   19d12:	19 94       	eijmp
   19d14:	08 95       	ret

00019d16 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
   19d16:	cf 93       	push	r28
   19d18:	df 93       	push	r29
   19d1a:	1f 92       	push	r1
   19d1c:	cd b7       	in	r28, 0x3d	; 61
   19d1e:	de b7       	in	r29, 0x3e	; 62
   19d20:	69 83       	std	Y+1, r22	; 0x01
   19d22:	20 91 4e 13 	lds	r18, 0x134E	; 0x80134e <TwoWire::transmitting>
   19d26:	22 23       	and	r18, r18
   19d28:	f9 f0       	breq	.+62     	; 0x19d68 <TwoWire::write(unsigned char)+0x52>
   19d2a:	20 91 4f 13 	lds	r18, 0x134F	; 0x80134f <TwoWire::txBufferLength>
   19d2e:	20 32       	cpi	r18, 0x20	; 32
   19d30:	58 f0       	brcs	.+22     	; 0x19d48 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
   19d32:	21 e0       	ldi	r18, 0x01	; 1
   19d34:	30 e0       	ldi	r19, 0x00	; 0
   19d36:	fc 01       	movw	r30, r24
   19d38:	33 83       	std	Z+3, r19	; 0x03
   19d3a:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
   19d3c:	90 e0       	ldi	r25, 0x00	; 0
   19d3e:	80 e0       	ldi	r24, 0x00	; 0
   19d40:	0f 90       	pop	r0
   19d42:	df 91       	pop	r29
   19d44:	cf 91       	pop	r28
   19d46:	08 95       	ret
   19d48:	80 91 50 13 	lds	r24, 0x1350	; 0x801350 <TwoWire::txBufferIndex>
   19d4c:	e8 2f       	mov	r30, r24
   19d4e:	f0 e0       	ldi	r31, 0x00	; 0
   19d50:	ef 5a       	subi	r30, 0xAF	; 175
   19d52:	fc 4e       	sbci	r31, 0xEC	; 236
   19d54:	99 81       	ldd	r25, Y+1	; 0x01
   19d56:	90 83       	st	Z, r25
   19d58:	8f 5f       	subi	r24, 0xFF	; 255
   19d5a:	80 93 50 13 	sts	0x1350, r24	; 0x801350 <TwoWire::txBufferIndex>
   19d5e:	80 93 4f 13 	sts	0x134F, r24	; 0x80134f <TwoWire::txBufferLength>
   19d62:	81 e0       	ldi	r24, 0x01	; 1
   19d64:	90 e0       	ldi	r25, 0x00	; 0
   19d66:	ec cf       	rjmp	.-40     	; 0x19d40 <TwoWire::write(unsigned char)+0x2a>
   19d68:	61 e0       	ldi	r22, 0x01	; 1
   19d6a:	ce 01       	movw	r24, r28
   19d6c:	01 96       	adiw	r24, 0x01	; 1
   19d6e:	0e 94 52 d0 	call	0x1a0a4	; 0x1a0a4 <twi_transmit>
   19d72:	f7 cf       	rjmp	.-18     	; 0x19d62 <TwoWire::write(unsigned char)+0x4c>

00019d74 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
   19d74:	cf 92       	push	r12
   19d76:	df 92       	push	r13
   19d78:	ef 92       	push	r14
   19d7a:	ff 92       	push	r15
   19d7c:	0f 93       	push	r16
   19d7e:	1f 93       	push	r17
   19d80:	cf 93       	push	r28
   19d82:	df 93       	push	r29
   19d84:	7c 01       	movw	r14, r24
   19d86:	cb 01       	movw	r24, r22
   19d88:	8a 01       	movw	r16, r20
   19d8a:	20 91 4e 13 	lds	r18, 0x134E	; 0x80134e <TwoWire::transmitting>
   19d8e:	22 23       	and	r18, r18
   19d90:	89 f0       	breq	.+34     	; 0x19db4 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
   19d92:	eb 01       	movw	r28, r22
   19d94:	6b 01       	movw	r12, r22
   19d96:	c4 0e       	add	r12, r20
   19d98:	d5 1e       	adc	r13, r21
   19d9a:	cc 15       	cp	r28, r12
   19d9c:	dd 05       	cpc	r29, r13
   19d9e:	69 f0       	breq	.+26     	; 0x19dba <TwoWire::write(unsigned char const*, unsigned int)+0x46>
   19da0:	69 91       	ld	r22, Y+
   19da2:	d7 01       	movw	r26, r14
   19da4:	ed 91       	ld	r30, X+
   19da6:	fc 91       	ld	r31, X
   19da8:	01 90       	ld	r0, Z+
   19daa:	f0 81       	ld	r31, Z
   19dac:	e0 2d       	mov	r30, r0
   19dae:	c7 01       	movw	r24, r14
   19db0:	19 95       	eicall
   19db2:	f3 cf       	rjmp	.-26     	; 0x19d9a <TwoWire::write(unsigned char const*, unsigned int)+0x26>
   19db4:	64 2f       	mov	r22, r20
   19db6:	0e 94 52 d0 	call	0x1a0a4	; 0x1a0a4 <twi_transmit>
   19dba:	c8 01       	movw	r24, r16
   19dbc:	df 91       	pop	r29
   19dbe:	cf 91       	pop	r28
   19dc0:	1f 91       	pop	r17
   19dc2:	0f 91       	pop	r16
   19dc4:	ff 90       	pop	r15
   19dc6:	ef 90       	pop	r14
   19dc8:	df 90       	pop	r13
   19dca:	cf 90       	pop	r12
   19dcc:	08 95       	ret

00019dce <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
   19dce:	10 92 73 13 	sts	0x1373, r1	; 0x801373 <TwoWire::rxBufferIndex>
   19dd2:	10 92 72 13 	sts	0x1372, r1	; 0x801372 <TwoWire::rxBufferLength>
   19dd6:	10 92 50 13 	sts	0x1350, r1	; 0x801350 <TwoWire::txBufferIndex>
   19dda:	10 92 4f 13 	sts	0x134F, r1	; 0x80134f <TwoWire::txBufferLength>
   19dde:	0e 94 95 cf 	call	0x19f2a	; 0x19f2a <twi_init>
   19de2:	8f e7       	ldi	r24, 0x7F	; 127
   19de4:	9e ec       	ldi	r25, 0xCE	; 206
   19de6:	0e 94 7e d0 	call	0x1a0fc	; 0x1a0fc <twi_attachSlaveTxEvent>
   19dea:	85 e5       	ldi	r24, 0x55	; 85
   19dec:	9e ec       	ldi	r25, 0xCE	; 206
   19dee:	0c 94 79 d0 	jmp	0x1a0f2	; 0x1a0f2 <twi_attachSlaveRxEvent>

00019df2 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
   19df2:	81 e0       	ldi	r24, 0x01	; 1
   19df4:	80 93 4e 13 	sts	0x134E, r24	; 0x80134e <TwoWire::transmitting>
   19df8:	60 93 71 13 	sts	0x1371, r22	; 0x801371 <TwoWire::txAddress>
   19dfc:	10 92 50 13 	sts	0x1350, r1	; 0x801350 <TwoWire::txBufferIndex>
   19e00:	10 92 4f 13 	sts	0x134F, r1	; 0x80134f <TwoWire::txBufferLength>
   19e04:	08 95       	ret

00019e06 <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
   19e06:	0c 94 f9 ce 	jmp	0x19df2	; 0x19df2 <TwoWire::beginTransmission(unsigned char)>

00019e0a <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
   19e0a:	0f 93       	push	r16
   19e0c:	06 2f       	mov	r16, r22
   19e0e:	21 e0       	ldi	r18, 0x01	; 1
   19e10:	40 91 4f 13 	lds	r20, 0x134F	; 0x80134f <TwoWire::txBufferLength>
   19e14:	61 e5       	ldi	r22, 0x51	; 81
   19e16:	73 e1       	ldi	r23, 0x13	; 19
   19e18:	80 91 71 13 	lds	r24, 0x1371	; 0x801371 <TwoWire::txAddress>
   19e1c:	0e 94 fb cf 	call	0x19ff6	; 0x19ff6 <twi_writeTo>
   19e20:	10 92 50 13 	sts	0x1350, r1	; 0x801350 <TwoWire::txBufferIndex>
   19e24:	10 92 4f 13 	sts	0x134F, r1	; 0x80134f <TwoWire::txBufferLength>
   19e28:	10 92 4e 13 	sts	0x134E, r1	; 0x80134e <TwoWire::transmitting>
   19e2c:	0f 91       	pop	r16
   19e2e:	08 95       	ret

00019e30 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
   19e30:	4f 92       	push	r4
   19e32:	5f 92       	push	r5
   19e34:	6f 92       	push	r6
   19e36:	7f 92       	push	r7
   19e38:	af 92       	push	r10
   19e3a:	bf 92       	push	r11
   19e3c:	cf 92       	push	r12
   19e3e:	ef 92       	push	r14
   19e40:	ff 92       	push	r15
   19e42:	0f 93       	push	r16
   19e44:	1f 93       	push	r17
   19e46:	cf 93       	push	r28
   19e48:	df 93       	push	r29
   19e4a:	5c 01       	movw	r10, r24
   19e4c:	f6 2e       	mov	r15, r22
   19e4e:	d4 2f       	mov	r29, r20
   19e50:	28 01       	movw	r4, r16
   19e52:	39 01       	movw	r6, r18
   19e54:	ee 20       	and	r14, r14
   19e56:	19 f1       	breq	.+70     	; 0x19e9e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
   19e58:	0e 94 f9 ce 	call	0x19df2	; 0x19df2 <TwoWire::beginTransmission(unsigned char)>
   19e5c:	ce 2d       	mov	r28, r14
   19e5e:	c4 30       	cpi	r28, 0x04	; 4
   19e60:	08 f0       	brcs	.+2      	; 0x19e64 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
   19e62:	c3 e0       	ldi	r28, 0x03	; 3
   19e64:	c1 50       	subi	r28, 0x01	; 1
   19e66:	b8 f0       	brcs	.+46     	; 0x19e96 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
   19e68:	28 e0       	ldi	r18, 0x08	; 8
   19e6a:	c2 9f       	mul	r28, r18
   19e6c:	c0 01       	movw	r24, r0
   19e6e:	11 24       	eor	r1, r1
   19e70:	a3 01       	movw	r20, r6
   19e72:	92 01       	movw	r18, r4
   19e74:	04 c0       	rjmp	.+8      	; 0x19e7e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
   19e76:	56 95       	lsr	r21
   19e78:	47 95       	ror	r20
   19e7a:	37 95       	ror	r19
   19e7c:	27 95       	ror	r18
   19e7e:	8a 95       	dec	r24
   19e80:	d2 f7       	brpl	.-12     	; 0x19e76 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
   19e82:	b9 01       	movw	r22, r18
   19e84:	d5 01       	movw	r26, r10
   19e86:	ed 91       	ld	r30, X+
   19e88:	fc 91       	ld	r31, X
   19e8a:	01 90       	ld	r0, Z+
   19e8c:	f0 81       	ld	r31, Z
   19e8e:	e0 2d       	mov	r30, r0
   19e90:	c5 01       	movw	r24, r10
   19e92:	19 95       	eicall
   19e94:	e7 cf       	rjmp	.-50     	; 0x19e64 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
   19e96:	60 e0       	ldi	r22, 0x00	; 0
   19e98:	c5 01       	movw	r24, r10
   19e9a:	0e 94 05 cf 	call	0x19e0a	; 0x19e0a <TwoWire::endTransmission(unsigned char)>
   19e9e:	4d 2f       	mov	r20, r29
   19ea0:	d1 32       	cpi	r29, 0x21	; 33
   19ea2:	08 f0       	brcs	.+2      	; 0x19ea6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
   19ea4:	40 e2       	ldi	r20, 0x20	; 32
   19ea6:	2c 2d       	mov	r18, r12
   19ea8:	64 e7       	ldi	r22, 0x74	; 116
   19eaa:	73 e1       	ldi	r23, 0x13	; 19
   19eac:	8f 2d       	mov	r24, r15
   19eae:	0e 94 b3 cf 	call	0x19f66	; 0x19f66 <twi_readFrom>
   19eb2:	10 92 73 13 	sts	0x1373, r1	; 0x801373 <TwoWire::rxBufferIndex>
   19eb6:	80 93 72 13 	sts	0x1372, r24	; 0x801372 <TwoWire::rxBufferLength>
   19eba:	df 91       	pop	r29
   19ebc:	cf 91       	pop	r28
   19ebe:	1f 91       	pop	r17
   19ec0:	0f 91       	pop	r16
   19ec2:	ff 90       	pop	r15
   19ec4:	ef 90       	pop	r14
   19ec6:	cf 90       	pop	r12
   19ec8:	bf 90       	pop	r11
   19eca:	af 90       	pop	r10
   19ecc:	7f 90       	pop	r7
   19ece:	6f 90       	pop	r6
   19ed0:	5f 90       	pop	r5
   19ed2:	4f 90       	pop	r4
   19ed4:	08 95       	ret

00019ed6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
   19ed6:	cf 92       	push	r12
   19ed8:	ef 92       	push	r14
   19eda:	0f 93       	push	r16
   19edc:	1f 93       	push	r17
   19ede:	c2 2e       	mov	r12, r18
   19ee0:	e1 2c       	mov	r14, r1
   19ee2:	00 e0       	ldi	r16, 0x00	; 0
   19ee4:	10 e0       	ldi	r17, 0x00	; 0
   19ee6:	98 01       	movw	r18, r16
   19ee8:	0e 94 18 cf 	call	0x19e30	; 0x19e30 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
   19eec:	1f 91       	pop	r17
   19eee:	0f 91       	pop	r16
   19ef0:	ef 90       	pop	r14
   19ef2:	cf 90       	pop	r12
   19ef4:	08 95       	ret

00019ef6 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
   19ef6:	21 e0       	ldi	r18, 0x01	; 1
   19ef8:	0c 94 6b cf 	jmp	0x19ed6	; 0x19ed6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00019efc <TwoWire::requestFrom(int, int)>:
_ZN7TwoWire11requestFromEii():
   19efc:	21 e0       	ldi	r18, 0x01	; 1
   19efe:	0c 94 6b cf 	jmp	0x19ed6	; 0x19ed6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00019f02 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
   19f02:	61 e0       	ldi	r22, 0x01	; 1
   19f04:	0c 94 05 cf 	jmp	0x19e0a	; 0x19e0a <TwoWire::endTransmission(unsigned char)>

00019f08 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   19f08:	ee e3       	ldi	r30, 0x3E	; 62
   19f0a:	f3 e1       	ldi	r31, 0x13	; 19
   19f0c:	13 82       	std	Z+3, r1	; 0x03
   19f0e:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   19f10:	88 ee       	ldi	r24, 0xE8	; 232
   19f12:	93 e0       	ldi	r25, 0x03	; 3
   19f14:	a0 e0       	ldi	r26, 0x00	; 0
   19f16:	b0 e0       	ldi	r27, 0x00	; 0
   19f18:	84 83       	std	Z+4, r24	; 0x04
   19f1a:	95 83       	std	Z+5, r25	; 0x05
   19f1c:	a6 83       	std	Z+6, r26	; 0x06
   19f1e:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:49
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
   19f20:	86 e1       	ldi	r24, 0x16	; 22
   19f22:	99 e0       	ldi	r25, 0x09	; 9
   19f24:	91 83       	std	Z+1, r25	; 0x01
   19f26:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:330
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
   19f28:	08 95       	ret

00019f2a <twi_init>:
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   19f2a:	10 92 01 14 	sts	0x1401, r1	; 0x801401 <twi_state>
   19f2e:	81 e0       	ldi	r24, 0x01	; 1
   19f30:	80 93 ff 13 	sts	0x13FF, r24	; 0x8013ff <twi_sendStop>
   19f34:	10 92 fe 13 	sts	0x13FE, r1	; 0x8013fe <twi_inRepStart>
   19f38:	61 e0       	ldi	r22, 0x01	; 1
   19f3a:	83 e1       	ldi	r24, 0x13	; 19
   19f3c:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
   19f40:	61 e0       	ldi	r22, 0x01	; 1
   19f42:	82 e1       	ldi	r24, 0x12	; 18
   19f44:	0e 94 31 d8 	call	0x1b062	; 0x1b062 <digitalWrite>
   19f48:	e9 eb       	ldi	r30, 0xB9	; 185
   19f4a:	f0 e0       	ldi	r31, 0x00	; 0
   19f4c:	80 81       	ld	r24, Z
   19f4e:	8e 7f       	andi	r24, 0xFE	; 254
   19f50:	80 83       	st	Z, r24
   19f52:	80 81       	ld	r24, Z
   19f54:	8d 7f       	andi	r24, 0xFD	; 253
   19f56:	80 83       	st	Z, r24
   19f58:	88 e4       	ldi	r24, 0x48	; 72
   19f5a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
   19f5e:	85 e4       	ldi	r24, 0x45	; 69
   19f60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   19f64:	08 95       	ret

00019f66 <twi_readFrom>:
twi_readFrom():
   19f66:	41 32       	cpi	r20, 0x21	; 33
   19f68:	08 f0       	brcs	.+2      	; 0x19f6c <twi_readFrom+0x6>
   19f6a:	43 c0       	rjmp	.+134    	; 0x19ff2 <twi_readFrom+0x8c>
   19f6c:	90 91 01 14 	lds	r25, 0x1401	; 0x801401 <twi_state>
   19f70:	91 11       	cpse	r25, r1
   19f72:	fc cf       	rjmp	.-8      	; 0x19f6c <twi_readFrom+0x6>
   19f74:	91 e0       	ldi	r25, 0x01	; 1
   19f76:	90 93 01 14 	sts	0x1401, r25	; 0x801401 <twi_state>
   19f7a:	20 93 ff 13 	sts	0x13FF, r18	; 0x8013ff <twi_sendStop>
   19f7e:	2f ef       	ldi	r18, 0xFF	; 255
   19f80:	20 93 94 13 	sts	0x1394, r18	; 0x801394 <twi_error>
   19f84:	10 92 d9 13 	sts	0x13D9, r1	; 0x8013d9 <twi_masterBufferIndex>
   19f88:	24 0f       	add	r18, r20
   19f8a:	20 93 d8 13 	sts	0x13D8, r18	; 0x8013d8 <twi_masterBufferLength>
   19f8e:	90 93 00 14 	sts	0x1400, r25	; 0x801400 <twi_slarw>
   19f92:	90 91 00 14 	lds	r25, 0x1400	; 0x801400 <twi_slarw>
   19f96:	88 0f       	add	r24, r24
   19f98:	89 2b       	or	r24, r25
   19f9a:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <twi_slarw>
   19f9e:	80 91 fe 13 	lds	r24, 0x13FE	; 0x8013fe <twi_inRepStart>
   19fa2:	81 30       	cpi	r24, 0x01	; 1
   19fa4:	09 f5       	brne	.+66     	; 0x19fe8 <twi_readFrom+0x82>
   19fa6:	10 92 fe 13 	sts	0x13FE, r1	; 0x8013fe <twi_inRepStart>
   19faa:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <twi_slarw>
   19fae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   19fb2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   19fb6:	83 fd       	sbrc	r24, 3
   19fb8:	f8 cf       	rjmp	.-16     	; 0x19faa <twi_readFrom+0x44>
   19fba:	85 ec       	ldi	r24, 0xC5	; 197
   19fbc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   19fc0:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <twi_state>
   19fc4:	81 30       	cpi	r24, 0x01	; 1
   19fc6:	e1 f3       	breq	.-8      	; 0x19fc0 <twi_readFrom+0x5a>
   19fc8:	80 91 d9 13 	lds	r24, 0x13D9	; 0x8013d9 <twi_masterBufferIndex>
   19fcc:	84 17       	cp	r24, r20
   19fce:	10 f4       	brcc	.+4      	; 0x19fd4 <twi_readFrom+0x6e>
   19fd0:	40 91 d9 13 	lds	r20, 0x13D9	; 0x8013d9 <twi_masterBufferIndex>
   19fd4:	aa ed       	ldi	r26, 0xDA	; 218
   19fd6:	b3 e1       	ldi	r27, 0x13	; 19
   19fd8:	96 2f       	mov	r25, r22
   19fda:	fb 01       	movw	r30, r22
   19fdc:	8e 2f       	mov	r24, r30
   19fde:	89 1b       	sub	r24, r25
   19fe0:	84 17       	cp	r24, r20
   19fe2:	20 f0       	brcs	.+8      	; 0x19fec <twi_readFrom+0x86>
   19fe4:	84 2f       	mov	r24, r20
   19fe6:	08 95       	ret
   19fe8:	85 ee       	ldi	r24, 0xE5	; 229
   19fea:	e8 cf       	rjmp	.-48     	; 0x19fbc <twi_readFrom+0x56>
   19fec:	8d 91       	ld	r24, X+
   19fee:	81 93       	st	Z+, r24
   19ff0:	f5 cf       	rjmp	.-22     	; 0x19fdc <twi_readFrom+0x76>
   19ff2:	40 e0       	ldi	r20, 0x00	; 0
   19ff4:	f7 cf       	rjmp	.-18     	; 0x19fe4 <twi_readFrom+0x7e>

00019ff6 <twi_writeTo>:
twi_writeTo():
   19ff6:	0f 93       	push	r16
   19ff8:	41 32       	cpi	r20, 0x21	; 33
   19ffa:	08 f0       	brcs	.+2      	; 0x19ffe <twi_writeTo+0x8>
   19ffc:	4b c0       	rjmp	.+150    	; 0x1a094 <twi_writeTo+0x9e>
   19ffe:	90 91 01 14 	lds	r25, 0x1401	; 0x801401 <twi_state>
   1a002:	91 11       	cpse	r25, r1
   1a004:	fc cf       	rjmp	.-8      	; 0x19ffe <twi_writeTo+0x8>
   1a006:	92 e0       	ldi	r25, 0x02	; 2
   1a008:	90 93 01 14 	sts	0x1401, r25	; 0x801401 <twi_state>
   1a00c:	00 93 ff 13 	sts	0x13FF, r16	; 0x8013ff <twi_sendStop>
   1a010:	9f ef       	ldi	r25, 0xFF	; 255
   1a012:	90 93 94 13 	sts	0x1394, r25	; 0x801394 <twi_error>
   1a016:	10 92 d9 13 	sts	0x13D9, r1	; 0x8013d9 <twi_masterBufferIndex>
   1a01a:	40 93 d8 13 	sts	0x13D8, r20	; 0x8013d8 <twi_masterBufferLength>
   1a01e:	36 2f       	mov	r19, r22
   1a020:	aa ed       	ldi	r26, 0xDA	; 218
   1a022:	b3 e1       	ldi	r27, 0x13	; 19
   1a024:	fb 01       	movw	r30, r22
   1a026:	9e 2f       	mov	r25, r30
   1a028:	93 1b       	sub	r25, r19
   1a02a:	94 17       	cp	r25, r20
   1a02c:	70 f1       	brcs	.+92     	; 0x1a08a <twi_writeTo+0x94>
   1a02e:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <twi_slarw>
   1a032:	90 91 00 14 	lds	r25, 0x1400	; 0x801400 <twi_slarw>
   1a036:	88 0f       	add	r24, r24
   1a038:	89 2b       	or	r24, r25
   1a03a:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <twi_slarw>
   1a03e:	80 91 fe 13 	lds	r24, 0x13FE	; 0x8013fe <twi_inRepStart>
   1a042:	81 30       	cpi	r24, 0x01	; 1
   1a044:	29 f5       	brne	.+74     	; 0x1a090 <twi_writeTo+0x9a>
   1a046:	10 92 fe 13 	sts	0x13FE, r1	; 0x8013fe <twi_inRepStart>
   1a04a:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <twi_slarw>
   1a04e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   1a052:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   1a056:	83 fd       	sbrc	r24, 3
   1a058:	f8 cf       	rjmp	.-16     	; 0x1a04a <twi_writeTo+0x54>
   1a05a:	85 ec       	ldi	r24, 0xC5	; 197
   1a05c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   1a060:	22 23       	and	r18, r18
   1a062:	21 f0       	breq	.+8      	; 0x1a06c <twi_writeTo+0x76>
   1a064:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <twi_state>
   1a068:	82 30       	cpi	r24, 0x02	; 2
   1a06a:	d1 f3       	breq	.-12     	; 0x1a060 <twi_writeTo+0x6a>
   1a06c:	80 91 94 13 	lds	r24, 0x1394	; 0x801394 <twi_error>
   1a070:	8f 3f       	cpi	r24, 0xFF	; 255
   1a072:	91 f0       	breq	.+36     	; 0x1a098 <twi_writeTo+0xa2>
   1a074:	80 91 94 13 	lds	r24, 0x1394	; 0x801394 <twi_error>
   1a078:	80 32       	cpi	r24, 0x20	; 32
   1a07a:	81 f0       	breq	.+32     	; 0x1a09c <twi_writeTo+0xa6>
   1a07c:	80 91 94 13 	lds	r24, 0x1394	; 0x801394 <twi_error>
   1a080:	80 33       	cpi	r24, 0x30	; 48
   1a082:	71 f0       	breq	.+28     	; 0x1a0a0 <twi_writeTo+0xaa>
   1a084:	84 e0       	ldi	r24, 0x04	; 4
   1a086:	0f 91       	pop	r16
   1a088:	08 95       	ret
   1a08a:	91 91       	ld	r25, Z+
   1a08c:	9d 93       	st	X+, r25
   1a08e:	cb cf       	rjmp	.-106    	; 0x1a026 <twi_writeTo+0x30>
   1a090:	85 ee       	ldi	r24, 0xE5	; 229
   1a092:	e4 cf       	rjmp	.-56     	; 0x1a05c <twi_writeTo+0x66>
   1a094:	81 e0       	ldi	r24, 0x01	; 1
   1a096:	f7 cf       	rjmp	.-18     	; 0x1a086 <twi_writeTo+0x90>
   1a098:	80 e0       	ldi	r24, 0x00	; 0
   1a09a:	f5 cf       	rjmp	.-22     	; 0x1a086 <twi_writeTo+0x90>
   1a09c:	82 e0       	ldi	r24, 0x02	; 2
   1a09e:	f3 cf       	rjmp	.-26     	; 0x1a086 <twi_writeTo+0x90>
   1a0a0:	83 e0       	ldi	r24, 0x03	; 3
   1a0a2:	f1 cf       	rjmp	.-30     	; 0x1a086 <twi_writeTo+0x90>

0001a0a4 <twi_transmit>:
twi_transmit():
   1a0a4:	20 91 b6 13 	lds	r18, 0x13B6	; 0x8013b6 <twi_txBufferLength>
   1a0a8:	26 0f       	add	r18, r22
   1a0aa:	33 27       	eor	r19, r19
   1a0ac:	33 1f       	adc	r19, r19
   1a0ae:	21 32       	cpi	r18, 0x21	; 33
   1a0b0:	31 05       	cpc	r19, r1
   1a0b2:	ec f4       	brge	.+58     	; 0x1a0ee <twi_transmit+0x4a>
   1a0b4:	20 91 01 14 	lds	r18, 0x1401	; 0x801401 <twi_state>
   1a0b8:	fc 01       	movw	r30, r24
   1a0ba:	90 e0       	ldi	r25, 0x00	; 0
   1a0bc:	80 e0       	ldi	r24, 0x00	; 0
   1a0be:	24 30       	cpi	r18, 0x04	; 4
   1a0c0:	69 f0       	breq	.+26     	; 0x1a0dc <twi_transmit+0x38>
   1a0c2:	82 e0       	ldi	r24, 0x02	; 2
   1a0c4:	08 95       	ret
   1a0c6:	a0 91 b6 13 	lds	r26, 0x13B6	; 0x8013b6 <twi_txBufferLength>
   1a0ca:	21 91       	ld	r18, Z+
   1a0cc:	ac 01       	movw	r20, r24
   1a0ce:	48 54       	subi	r20, 0x48	; 72
   1a0d0:	5c 4e       	sbci	r21, 0xEC	; 236
   1a0d2:	a4 0f       	add	r26, r20
   1a0d4:	b5 2f       	mov	r27, r21
   1a0d6:	b1 1d       	adc	r27, r1
   1a0d8:	2c 93       	st	X, r18
   1a0da:	01 96       	adiw	r24, 0x01	; 1
   1a0dc:	86 17       	cp	r24, r22
   1a0de:	98 f3       	brcs	.-26     	; 0x1a0c6 <twi_transmit+0x22>
   1a0e0:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <twi_txBufferLength>
   1a0e4:	68 0f       	add	r22, r24
   1a0e6:	60 93 b6 13 	sts	0x13B6, r22	; 0x8013b6 <twi_txBufferLength>
   1a0ea:	80 e0       	ldi	r24, 0x00	; 0
   1a0ec:	08 95       	ret
   1a0ee:	81 e0       	ldi	r24, 0x01	; 1
   1a0f0:	08 95       	ret

0001a0f2 <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
   1a0f2:	90 93 fb 13 	sts	0x13FB, r25	; 0x8013fb <twi_onSlaveReceive+0x1>
   1a0f6:	80 93 fa 13 	sts	0x13FA, r24	; 0x8013fa <twi_onSlaveReceive>
   1a0fa:	08 95       	ret

0001a0fc <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
   1a0fc:	90 93 fd 13 	sts	0x13FD, r25	; 0x8013fd <twi_onSlaveTransmit+0x1>
   1a100:	80 93 fc 13 	sts	0x13FC, r24	; 0x8013fc <twi_onSlaveTransmit>
   1a104:	08 95       	ret

0001a106 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
   1a106:	85 ed       	ldi	r24, 0xD5	; 213
   1a108:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
   1a10c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   1a110:	84 fd       	sbrc	r24, 4
   1a112:	fc cf       	rjmp	.-8      	; 0x1a10c <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
   1a114:	10 92 01 14 	sts	0x1401, r1	; 0x801401 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:382
}
   1a118:	08 95       	ret

0001a11a <twi_releaseBus>:
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
   1a11a:	85 ec       	ldi	r24, 0xC5	; 197
   1a11c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
   1a120:	10 92 01 14 	sts	0x1401, r1	; 0x801401 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:397
}
   1a124:	08 95       	ret

0001a126 <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:400

ISR(TWI_vect)
{
   1a126:	1f 92       	push	r1
   1a128:	0f 92       	push	r0
   1a12a:	0f b6       	in	r0, 0x3f	; 63
   1a12c:	0f 92       	push	r0
   1a12e:	11 24       	eor	r1, r1
   1a130:	0b b6       	in	r0, 0x3b	; 59
   1a132:	0f 92       	push	r0
   1a134:	2f 93       	push	r18
   1a136:	3f 93       	push	r19
   1a138:	4f 93       	push	r20
   1a13a:	5f 93       	push	r21
   1a13c:	6f 93       	push	r22
   1a13e:	7f 93       	push	r23
   1a140:	8f 93       	push	r24
   1a142:	9f 93       	push	r25
   1a144:	af 93       	push	r26
   1a146:	bf 93       	push	r27
   1a148:	ef 93       	push	r30
   1a14a:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
   1a14c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
   1a150:	88 7f       	andi	r24, 0xF8	; 248
   1a152:	80 36       	cpi	r24, 0x60	; 96
   1a154:	09 f4       	brne	.+2      	; 0x1a158 <__vector_39+0x32>
   1a156:	4e c0       	rjmp	.+156    	; 0x1a1f4 <__vector_39+0xce>
   1a158:	08 f0       	brcs	.+2      	; 0x1a15c <__vector_39+0x36>
   1a15a:	41 c0       	rjmp	.+130    	; 0x1a1de <__vector_39+0xb8>
   1a15c:	88 32       	cpi	r24, 0x28	; 40
   1a15e:	09 f4       	brne	.+2      	; 0x1a162 <__vector_39+0x3c>
   1a160:	aa c0       	rjmp	.+340    	; 0x1a2b6 <__vector_39+0x190>
   1a162:	28 f5       	brcc	.+74     	; 0x1a1ae <__vector_39+0x88>
   1a164:	80 31       	cpi	r24, 0x10	; 16
   1a166:	09 f4       	brne	.+2      	; 0x1a16a <__vector_39+0x44>
   1a168:	9e c0       	rjmp	.+316    	; 0x1a2a6 <__vector_39+0x180>
   1a16a:	c8 f4       	brcc	.+50     	; 0x1a19e <__vector_39+0x78>
   1a16c:	88 23       	and	r24, r24
   1a16e:	09 f4       	brne	.+2      	; 0x1a172 <__vector_39+0x4c>
   1a170:	fb c0       	rjmp	.+502    	; 0x1a368 <__vector_39+0x242>
   1a172:	88 30       	cpi	r24, 0x08	; 8
   1a174:	09 f4       	brne	.+2      	; 0x1a178 <__vector_39+0x52>
   1a176:	97 c0       	rjmp	.+302    	; 0x1a2a6 <__vector_39+0x180>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
   1a178:	ff 91       	pop	r31
   1a17a:	ef 91       	pop	r30
   1a17c:	bf 91       	pop	r27
   1a17e:	af 91       	pop	r26
   1a180:	9f 91       	pop	r25
   1a182:	8f 91       	pop	r24
   1a184:	7f 91       	pop	r23
   1a186:	6f 91       	pop	r22
   1a188:	5f 91       	pop	r21
   1a18a:	4f 91       	pop	r20
   1a18c:	3f 91       	pop	r19
   1a18e:	2f 91       	pop	r18
   1a190:	0f 90       	pop	r0
   1a192:	0b be       	out	0x3b, r0	; 59
   1a194:	0f 90       	pop	r0
   1a196:	0f be       	out	0x3f, r0	; 63
   1a198:	0f 90       	pop	r0
   1a19a:	1f 90       	pop	r1
   1a19c:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   1a19e:	88 31       	cpi	r24, 0x18	; 24
   1a1a0:	09 f4       	brne	.+2      	; 0x1a1a4 <__vector_39+0x7e>
   1a1a2:	89 c0       	rjmp	.+274    	; 0x1a2b6 <__vector_39+0x190>
   1a1a4:	80 32       	cpi	r24, 0x20	; 32
   1a1a6:	41 f7       	brne	.-48     	; 0x1a178 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
   1a1a8:	80 93 94 13 	sts	0x1394, r24	; 0x801394 <twi_error>
   1a1ac:	15 c0       	rjmp	.+42     	; 0x1a1d8 <__vector_39+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   1a1ae:	80 34       	cpi	r24, 0x40	; 64
   1a1b0:	09 f4       	brne	.+2      	; 0x1a1b4 <__vector_39+0x8e>
   1a1b2:	9e c0       	rjmp	.+316    	; 0x1a2f0 <__vector_39+0x1ca>
   1a1b4:	48 f4       	brcc	.+18     	; 0x1a1c8 <__vector_39+0xa2>
   1a1b6:	80 33       	cpi	r24, 0x30	; 48
   1a1b8:	b9 f3       	breq	.-18     	; 0x1a1a8 <__vector_39+0x82>
   1a1ba:	88 33       	cpi	r24, 0x38	; 56
   1a1bc:	e9 f6       	brne	.-70     	; 0x1a178 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
   1a1be:	80 93 94 13 	sts	0x1394, r24	; 0x801394 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:441
      twi_releaseBus();
   1a1c2:	0e 94 8d d0 	call	0x1a11a	; 0x1a11a <twi_releaseBus>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:442
      break;
   1a1c6:	d8 cf       	rjmp	.-80     	; 0x1a178 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   1a1c8:	80 35       	cpi	r24, 0x50	; 80
   1a1ca:	09 f4       	brne	.+2      	; 0x1a1ce <__vector_39+0xa8>
   1a1cc:	85 c0       	rjmp	.+266    	; 0x1a2d8 <__vector_39+0x1b2>
   1a1ce:	88 35       	cpi	r24, 0x58	; 88
   1a1d0:	09 f4       	brne	.+2      	; 0x1a1d4 <__vector_39+0xae>
   1a1d2:	96 c0       	rjmp	.+300    	; 0x1a300 <__vector_39+0x1da>
   1a1d4:	88 34       	cpi	r24, 0x48	; 72
   1a1d6:	81 f6       	brne	.-96     	; 0x1a178 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
   1a1d8:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <twi_stop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
      break;
  }
}
   1a1dc:	cd cf       	rjmp	.-102    	; 0x1a178 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   1a1de:	88 39       	cpi	r24, 0x98	; 152
   1a1e0:	09 f4       	brne	.+2      	; 0x1a1e4 <__vector_39+0xbe>
   1a1e2:	8c c0       	rjmp	.+280    	; 0x1a2fc <__vector_39+0x1d6>
   1a1e4:	38 f5       	brcc	.+78     	; 0x1a234 <__vector_39+0x10e>
   1a1e6:	88 37       	cpi	r24, 0x78	; 120
   1a1e8:	29 f0       	breq	.+10     	; 0x1a1f4 <__vector_39+0xce>
   1a1ea:	50 f4       	brcc	.+20     	; 0x1a200 <__vector_39+0xda>
   1a1ec:	88 36       	cpi	r24, 0x68	; 104
   1a1ee:	11 f0       	breq	.+4      	; 0x1a1f4 <__vector_39+0xce>
   1a1f0:	80 37       	cpi	r24, 0x70	; 112
   1a1f2:	11 f6       	brne	.-124    	; 0x1a178 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
   1a1f4:	83 e0       	ldi	r24, 0x03	; 3
   1a1f6:	80 93 01 14 	sts	0x1401, r24	; 0x801401 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
   1a1fa:	10 92 95 13 	sts	0x1395, r1	; 0x801395 <twi_rxBufferIndex>
   1a1fe:	57 c0       	rjmp	.+174    	; 0x1a2ae <__vector_39+0x188>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   1a200:	88 38       	cpi	r24, 0x88	; 136
   1a202:	09 f4       	brne	.+2      	; 0x1a206 <__vector_39+0xe0>
   1a204:	7b c0       	rjmp	.+246    	; 0x1a2fc <__vector_39+0x1d6>
   1a206:	80 39       	cpi	r24, 0x90	; 144
   1a208:	19 f0       	breq	.+6      	; 0x1a210 <__vector_39+0xea>
   1a20a:	80 38       	cpi	r24, 0x80	; 128
   1a20c:	09 f0       	breq	.+2      	; 0x1a210 <__vector_39+0xea>
   1a20e:	b4 cf       	rjmp	.-152    	; 0x1a178 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   1a210:	80 91 95 13 	lds	r24, 0x1395	; 0x801395 <twi_rxBufferIndex>
   1a214:	80 32       	cpi	r24, 0x20	; 32
   1a216:	08 f0       	brcs	.+2      	; 0x1a21a <__vector_39+0xf4>
   1a218:	71 c0       	rjmp	.+226    	; 0x1a2fc <__vector_39+0x1d6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
   1a21a:	e0 91 95 13 	lds	r30, 0x1395	; 0x801395 <twi_rxBufferIndex>
   1a21e:	81 e0       	ldi	r24, 0x01	; 1
   1a220:	8e 0f       	add	r24, r30
   1a222:	80 93 95 13 	sts	0x1395, r24	; 0x801395 <twi_rxBufferIndex>
   1a226:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   1a22a:	f0 e0       	ldi	r31, 0x00	; 0
   1a22c:	ea 56       	subi	r30, 0x6A	; 106
   1a22e:	fc 4e       	sbci	r31, 0xEC	; 236
   1a230:	80 83       	st	Z, r24
   1a232:	3d c0       	rjmp	.+122    	; 0x1a2ae <__vector_39+0x188>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   1a234:	80 3b       	cpi	r24, 0xB0	; 176
   1a236:	39 f0       	breq	.+14     	; 0x1a246 <__vector_39+0x120>
   1a238:	e0 f4       	brcc	.+56     	; 0x1a272 <__vector_39+0x14c>
   1a23a:	80 3a       	cpi	r24, 0xA0	; 160
   1a23c:	09 f4       	brne	.+2      	; 0x1a240 <__vector_39+0x11a>
   1a23e:	79 c0       	rjmp	.+242    	; 0x1a332 <__vector_39+0x20c>
   1a240:	88 3a       	cpi	r24, 0xA8	; 168
   1a242:	09 f0       	breq	.+2      	; 0x1a246 <__vector_39+0x120>
   1a244:	99 cf       	rjmp	.-206    	; 0x1a178 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
   1a246:	84 e0       	ldi	r24, 0x04	; 4
   1a248:	80 93 01 14 	sts	0x1401, r24	; 0x801401 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
   1a24c:	10 92 b7 13 	sts	0x13B7, r1	; 0x8013b7 <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
   1a250:	10 92 b6 13 	sts	0x13B6, r1	; 0x8013b6 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
   1a254:	e0 91 fc 13 	lds	r30, 0x13FC	; 0x8013fc <twi_onSlaveTransmit>
   1a258:	f0 91 fd 13 	lds	r31, 0x13FD	; 0x8013fd <twi_onSlaveTransmit+0x1>
   1a25c:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
   1a25e:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <twi_txBufferLength>
   1a262:	81 11       	cpse	r24, r1
   1a264:	0f c0       	rjmp	.+30     	; 0x1a284 <__vector_39+0x15e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
   1a266:	81 e0       	ldi	r24, 0x01	; 1
   1a268:	80 93 b6 13 	sts	0x13B6, r24	; 0x8013b6 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
   1a26c:	10 92 b8 13 	sts	0x13B8, r1	; 0x8013b8 <twi_txBuffer>
   1a270:	09 c0       	rjmp	.+18     	; 0x1a284 <__vector_39+0x15e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   1a272:	80 3c       	cpi	r24, 0xC0	; 192
   1a274:	09 f4       	brne	.+2      	; 0x1a278 <__vector_39+0x152>
   1a276:	76 c0       	rjmp	.+236    	; 0x1a364 <__vector_39+0x23e>
   1a278:	88 3c       	cpi	r24, 0xC8	; 200
   1a27a:	09 f4       	brne	.+2      	; 0x1a27e <__vector_39+0x158>
   1a27c:	73 c0       	rjmp	.+230    	; 0x1a364 <__vector_39+0x23e>
   1a27e:	88 3b       	cpi	r24, 0xB8	; 184
   1a280:	09 f0       	breq	.+2      	; 0x1a284 <__vector_39+0x15e>
   1a282:	7a cf       	rjmp	.-268    	; 0x1a178 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
   1a284:	e0 91 b7 13 	lds	r30, 0x13B7	; 0x8013b7 <twi_txBufferIndex>
   1a288:	81 e0       	ldi	r24, 0x01	; 1
   1a28a:	8e 0f       	add	r24, r30
   1a28c:	80 93 b7 13 	sts	0x13B7, r24	; 0x8013b7 <twi_txBufferIndex>
   1a290:	f0 e0       	ldi	r31, 0x00	; 0
   1a292:	e8 54       	subi	r30, 0x48	; 72
   1a294:	fc 4e       	sbci	r31, 0xEC	; 236
   1a296:	80 81       	ld	r24, Z
   1a298:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   1a29c:	90 91 b7 13 	lds	r25, 0x13B7	; 0x8013b7 <twi_txBufferIndex>
   1a2a0:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <twi_txBufferLength>
   1a2a4:	29 c0       	rjmp	.+82     	; 0x1a2f8 <__vector_39+0x1d2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
   1a2a6:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   1a2aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   1a2ae:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   1a2b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   1a2b4:	61 cf       	rjmp	.-318    	; 0x1a178 <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
   1a2b6:	90 91 d9 13 	lds	r25, 0x13D9	; 0x8013d9 <twi_masterBufferIndex>
   1a2ba:	80 91 d8 13 	lds	r24, 0x13D8	; 0x8013d8 <twi_masterBufferLength>
   1a2be:	98 17       	cp	r25, r24
   1a2c0:	58 f5       	brcc	.+86     	; 0x1a318 <__vector_39+0x1f2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   1a2c2:	e0 91 d9 13 	lds	r30, 0x13D9	; 0x8013d9 <twi_masterBufferIndex>
   1a2c6:	81 e0       	ldi	r24, 0x01	; 1
   1a2c8:	8e 0f       	add	r24, r30
   1a2ca:	80 93 d9 13 	sts	0x13D9, r24	; 0x8013d9 <twi_masterBufferIndex>
   1a2ce:	f0 e0       	ldi	r31, 0x00	; 0
   1a2d0:	e6 52       	subi	r30, 0x26	; 38
   1a2d2:	fc 4e       	sbci	r31, 0xEC	; 236
   1a2d4:	80 81       	ld	r24, Z
   1a2d6:	e9 cf       	rjmp	.-46     	; 0x1a2aa <__vector_39+0x184>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   1a2d8:	e0 91 d9 13 	lds	r30, 0x13D9	; 0x8013d9 <twi_masterBufferIndex>
   1a2dc:	81 e0       	ldi	r24, 0x01	; 1
   1a2de:	8e 0f       	add	r24, r30
   1a2e0:	80 93 d9 13 	sts	0x13D9, r24	; 0x8013d9 <twi_masterBufferIndex>
   1a2e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   1a2e8:	f0 e0       	ldi	r31, 0x00	; 0
   1a2ea:	e6 52       	subi	r30, 0x26	; 38
   1a2ec:	fc 4e       	sbci	r31, 0xEC	; 236
   1a2ee:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
   1a2f0:	90 91 d9 13 	lds	r25, 0x13D9	; 0x8013d9 <twi_masterBufferIndex>
   1a2f4:	80 91 d8 13 	lds	r24, 0x13D8	; 0x8013d8 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   1a2f8:	98 17       	cp	r25, r24
   1a2fa:	c8 f2       	brcs	.-78     	; 0x1a2ae <__vector_39+0x188>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   1a2fc:	85 e8       	ldi	r24, 0x85	; 133
   1a2fe:	d8 cf       	rjmp	.-80     	; 0x1a2b0 <__vector_39+0x18a>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   1a300:	e0 91 d9 13 	lds	r30, 0x13D9	; 0x8013d9 <twi_masterBufferIndex>
   1a304:	81 e0       	ldi	r24, 0x01	; 1
   1a306:	8e 0f       	add	r24, r30
   1a308:	80 93 d9 13 	sts	0x13D9, r24	; 0x8013d9 <twi_masterBufferIndex>
   1a30c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   1a310:	f0 e0       	ldi	r31, 0x00	; 0
   1a312:	e6 52       	subi	r30, 0x26	; 38
   1a314:	fc 4e       	sbci	r31, 0xEC	; 236
   1a316:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
   1a318:	80 91 ff 13 	lds	r24, 0x13FF	; 0x8013ff <twi_sendStop>
   1a31c:	81 11       	cpse	r24, r1
   1a31e:	5c cf       	rjmp	.-328    	; 0x1a1d8 <__vector_39+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
   1a320:	81 e0       	ldi	r24, 0x01	; 1
   1a322:	80 93 fe 13 	sts	0x13FE, r24	; 0x8013fe <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
   1a326:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   1a328:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
   1a32c:	10 92 01 14 	sts	0x1401, r1	; 0x801401 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:552
      break;
   1a330:	23 cf       	rjmp	.-442    	; 0x1a178 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
   1a332:	0e 94 8d d0 	call	0x1a11a	; 0x1a11a <twi_releaseBus>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   1a336:	80 91 95 13 	lds	r24, 0x1395	; 0x801395 <twi_rxBufferIndex>
   1a33a:	80 32       	cpi	r24, 0x20	; 32
   1a33c:	30 f4       	brcc	.+12     	; 0x1a34a <__vector_39+0x224>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
   1a33e:	e0 91 95 13 	lds	r30, 0x1395	; 0x801395 <twi_rxBufferIndex>
   1a342:	f0 e0       	ldi	r31, 0x00	; 0
   1a344:	ea 56       	subi	r30, 0x6A	; 106
   1a346:	fc 4e       	sbci	r31, 0xEC	; 236
   1a348:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
   1a34a:	60 91 95 13 	lds	r22, 0x1395	; 0x801395 <twi_rxBufferIndex>
   1a34e:	70 e0       	ldi	r23, 0x00	; 0
   1a350:	e0 91 fa 13 	lds	r30, 0x13FA	; 0x8013fa <twi_onSlaveReceive>
   1a354:	f0 91 fb 13 	lds	r31, 0x13FB	; 0x8013fb <twi_onSlaveReceive+0x1>
   1a358:	86 e9       	ldi	r24, 0x96	; 150
   1a35a:	93 e1       	ldi	r25, 0x13	; 19
   1a35c:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
   1a35e:	10 92 95 13 	sts	0x1395, r1	; 0x801395 <twi_rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:510
      break;
   1a362:	0a cf       	rjmp	.-492    	; 0x1a178 <__vector_39+0x52>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   1a364:	85 ec       	ldi	r24, 0xC5	; 197
   1a366:	e0 cf       	rjmp	.-64     	; 0x1a328 <__vector_39+0x202>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
   1a368:	10 92 94 13 	sts	0x1394, r1	; 0x801394 <twi_error>
   1a36c:	35 cf       	rjmp	.-406    	; 0x1a1d8 <__vector_39+0xb2>

0001a36e <owWriteBlock(unsigned char, unsigned char*, unsigned char)>:
_Z12owWriteBlockhPhh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:90
		if(r)
			return r;
	}

	return DS2482_ERR_OK;
}
   1a36e:	ff 92       	push	r15
   1a370:	0f 93       	push	r16
   1a372:	1f 93       	push	r17
   1a374:	cf 93       	push	r28
   1a376:	df 93       	push	r29
   1a378:	f8 2e       	mov	r15, r24
   1a37a:	eb 01       	movw	r28, r22
   1a37c:	8b 01       	movw	r16, r22
   1a37e:	04 0f       	add	r16, r20
   1a380:	11 1d       	adc	r17, r1
   1a382:	c0 17       	cp	r28, r16
   1a384:	d1 07       	cpc	r29, r17
   1a386:	61 f0       	breq	.+24     	; 0x1a3a0 <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x32>
   1a388:	69 91       	ld	r22, Y+
   1a38a:	8f 2d       	mov	r24, r15
   1a38c:	0e 94 0e d3 	call	0x1a61c	; 0x1a61c <ds2482owWriteByte(unsigned char, unsigned char)>
   1a390:	88 23       	and	r24, r24
   1a392:	b9 f3       	breq	.-18     	; 0x1a382 <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x14>
   1a394:	df 91       	pop	r29
   1a396:	cf 91       	pop	r28
   1a398:	1f 91       	pop	r17
   1a39a:	0f 91       	pop	r16
   1a39c:	ff 90       	pop	r15
   1a39e:	08 95       	ret
   1a3a0:	80 e0       	ldi	r24, 0x00	; 0
   1a3a2:	f8 cf       	rjmp	.-16     	; 0x1a394 <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x26>

0001a3a4 <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
   1a3a4:	0f 93       	push	r16
   1a3a6:	1f 93       	push	r17
   1a3a8:	cf 93       	push	r28
   1a3aa:	c8 2f       	mov	r28, r24
   1a3ac:	8b 01       	movw	r16, r22
   1a3ae:	65 e5       	ldi	r22, 0x55	; 85
   1a3b0:	0e 94 0e d3 	call	0x1a61c	; 0x1a61c <ds2482owWriteByte(unsigned char, unsigned char)>
   1a3b4:	81 11       	cpse	r24, r1
   1a3b6:	08 c0       	rjmp	.+16     	; 0x1a3c8 <owMatchRom(unsigned char, unsigned char*)+0x24>
   1a3b8:	48 e0       	ldi	r20, 0x08	; 8
   1a3ba:	b8 01       	movw	r22, r16
   1a3bc:	8c 2f       	mov	r24, r28
   1a3be:	cf 91       	pop	r28
   1a3c0:	1f 91       	pop	r17
   1a3c2:	0f 91       	pop	r16
   1a3c4:	0c 94 b7 d1 	jmp	0x1a36e	; 0x1a36e <owWriteBlock(unsigned char, unsigned char*, unsigned char)>
   1a3c8:	cf 91       	pop	r28
   1a3ca:	1f 91       	pop	r17
   1a3cc:	0f 91       	pop	r16
   1a3ce:	08 95       	ret

0001a3d0 <owMatchNext(unsigned char, unsigned char*)>:
_Z11owMatchNexthPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:123
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
   1a3d0:	bf 92       	push	r11
   1a3d2:	cf 92       	push	r12
   1a3d4:	df 92       	push	r13
   1a3d6:	ef 92       	push	r14
   1a3d8:	ff 92       	push	r15
   1a3da:	0f 93       	push	r16
   1a3dc:	1f 93       	push	r17
   1a3de:	cf 93       	push	r28
   1a3e0:	df 93       	push	r29
   1a3e2:	1f 92       	push	r1
   1a3e4:	cd b7       	in	r28, 0x3d	; 61
   1a3e6:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   1a3e8:	90 91 02 14 	lds	r25, 0x1402	; 0x801402 <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   1a3ec:	15 e0       	ldi	r17, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   1a3ee:	91 11       	cpse	r25, r1
   1a3f0:	12 c0       	rjmp	.+36     	; 0x1a416 <owMatchNext(unsigned char, unsigned char*)+0x46>
   1a3f2:	7b 01       	movw	r14, r22
   1a3f4:	b8 2e       	mov	r11, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   1a3f6:	0e 94 d3 d2 	call	0x1a5a6	; 0x1a5a6 <ds2482owReset(unsigned char)>
   1a3fa:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   1a3fc:	81 11       	cpse	r24, r1
   1a3fe:	0b c0       	rjmp	.+22     	; 0x1a416 <owMatchNext(unsigned char, unsigned char*)+0x46>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   1a400:	60 ef       	ldi	r22, 0xF0	; 240
   1a402:	8b 2d       	mov	r24, r11
   1a404:	0e 94 0e d3 	call	0x1a61c	; 0x1a61c <ds2482owWriteByte(unsigned char, unsigned char)>
   1a408:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   1a40a:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   1a40c:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   1a40e:	dd 24       	eor	r13, r13
   1a410:	d3 94       	inc	r13
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   1a412:	88 23       	and	r24, r24
   1a414:	81 f0       	breq	.+32     	; 0x1a436 <owMatchNext(unsigned char, unsigned char*)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   1a416:	81 2f       	mov	r24, r17
   1a418:	0f 90       	pop	r0
   1a41a:	df 91       	pop	r29
   1a41c:	cf 91       	pop	r28
   1a41e:	1f 91       	pop	r17
   1a420:	0f 91       	pop	r16
   1a422:	ff 90       	pop	r15
   1a424:	ef 90       	pop	r14
   1a426:	df 90       	pop	r13
   1a428:	cf 90       	pop	r12
   1a42a:	bf 90       	pop	r11
   1a42c:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   1a42e:	98 e0       	ldi	r25, 0x08	; 8
   1a430:	c9 16       	cp	r12, r25
   1a432:	09 f4       	brne	.+2      	; 0x1a436 <owMatchNext(unsigned char, unsigned char*)+0x66>
   1a434:	45 c0       	rjmp	.+138    	; 0x1a4c0 <owMatchNext(unsigned char, unsigned char*)+0xf0>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   1a436:	90 91 03 14 	lds	r25, 0x1403	; 0x801403 <lastDiscrepancy>
   1a43a:	d9 16       	cp	r13, r25
   1a43c:	88 f5       	brcc	.+98     	; 0x1a4a0 <owMatchNext(unsigned char, unsigned char*)+0xd0>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   1a43e:	f7 01       	movw	r30, r14
   1a440:	ec 0d       	add	r30, r12
   1a442:	f1 1d       	adc	r31, r1
   1a444:	80 81       	ld	r24, Z
   1a446:	80 23       	and	r24, r16
   1a448:	91 e0       	ldi	r25, 0x01	; 1
   1a44a:	09 f4       	brne	.+2      	; 0x1a44e <owMatchNext(unsigned char, unsigned char*)+0x7e>
   1a44c:	90 e0       	ldi	r25, 0x00	; 0
   1a44e:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:148
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);

		r=ds2482owWriteTriplet(ds2482_address, &direction);
   1a450:	be 01       	movw	r22, r28
   1a452:	6f 5f       	subi	r22, 0xFF	; 255
   1a454:	7f 4f       	sbci	r23, 0xFF	; 255
   1a456:	8b 2d       	mov	r24, r11
   1a458:	0e 94 4c d3 	call	0x1a698	; 0x1a698 <ds2482owWriteTriplet(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:149
		if(r) return r;
   1a45c:	81 11       	cpse	r24, r1
   1a45e:	3a c0       	rjmp	.+116    	; 0x1a4d4 <owMatchNext(unsigned char, unsigned char*)+0x104>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   1a460:	29 81       	ldd	r18, Y+1	; 0x01
   1a462:	30 e0       	ldi	r19, 0x00	; 0
   1a464:	a9 01       	movw	r20, r18
   1a466:	95 e0       	ldi	r25, 0x05	; 5
   1a468:	55 95       	asr	r21
   1a46a:	47 95       	ror	r20
   1a46c:	9a 95       	dec	r25
   1a46e:	e1 f7       	brne	.-8      	; 0x1a468 <owMatchNext(unsigned char, unsigned char*)+0x98>
   1a470:	43 70       	andi	r20, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   1a472:	22 0f       	add	r18, r18
   1a474:	23 2f       	mov	r18, r19
   1a476:	22 1f       	adc	r18, r18
   1a478:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   1a47a:	43 30       	cpi	r20, 0x03	; 3
   1a47c:	09 f1       	breq	.+66     	; 0x1a4c0 <owMatchNext(unsigned char, unsigned char*)+0xf0>
   1a47e:	ec 2d       	mov	r30, r12
   1a480:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   1a482:	41 11       	cpse	r20, r1
   1a484:	12 c0       	rjmp	.+36     	; 0x1a4aa <owMatchNext(unsigned char, unsigned char*)+0xda>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   1a486:	22 23       	and	r18, r18
   1a488:	c9 f0       	breq	.+50     	; 0x1a4bc <owMatchNext(unsigned char, unsigned char*)+0xec>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   1a48a:	ee 0d       	add	r30, r14
   1a48c:	ff 1d       	adc	r31, r15
   1a48e:	90 81       	ld	r25, Z
   1a490:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   1a492:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   1a494:	d3 94       	inc	r13
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   1a496:	00 0f       	add	r16, r16
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   1a498:	51 f6       	brne	.-108    	; 0x1a42e <owMatchNext(unsigned char, unsigned char*)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   1a49a:	c3 94       	inc	r12
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   1a49c:	01 e0       	ldi	r16, 0x01	; 1
   1a49e:	c7 cf       	rjmp	.-114    	; 0x1a42e <owMatchNext(unsigned char, unsigned char*)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   1a4a0:	81 e0       	ldi	r24, 0x01	; 1
   1a4a2:	9d 11       	cpse	r25, r13
   1a4a4:	80 e0       	ldi	r24, 0x00	; 0
   1a4a6:	89 83       	std	Y+1, r24	; 0x01
   1a4a8:	d3 cf       	rjmp	.-90     	; 0x1a450 <owMatchNext(unsigned char, unsigned char*)+0x80>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   1a4aa:	21 11       	cpse	r18, r1
   1a4ac:	ee cf       	rjmp	.-36     	; 0x1a48a <owMatchNext(unsigned char, unsigned char*)+0xba>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   1a4ae:	ee 0d       	add	r30, r14
   1a4b0:	ff 1d       	adc	r31, r15
   1a4b2:	90 81       	ld	r25, Z
   1a4b4:	20 2f       	mov	r18, r16
   1a4b6:	20 95       	com	r18
   1a4b8:	92 23       	and	r25, r18
   1a4ba:	eb cf       	rjmp	.-42     	; 0x1a492 <owMatchNext(unsigned char, unsigned char*)+0xc2>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   1a4bc:	1d 2d       	mov	r17, r13
   1a4be:	f7 cf       	rjmp	.-18     	; 0x1a4ae <owMatchNext(unsigned char, unsigned char*)+0xde>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   1a4c0:	90 e4       	ldi	r25, 0x40	; 64
   1a4c2:	9d 15       	cp	r25, r13
   1a4c4:	48 f4       	brcc	.+18     	; 0x1a4d8 <owMatchNext(unsigned char, unsigned char*)+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   1a4c6:	10 93 03 14 	sts	0x1403, r17	; 0x801403 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   1a4ca:	91 e0       	ldi	r25, 0x01	; 1
   1a4cc:	11 11       	cpse	r17, r1
   1a4ce:	90 e0       	ldi	r25, 0x00	; 0
   1a4d0:	90 93 02 14 	sts	0x1402, r25	; 0x801402 <lastDevice>
   1a4d4:	18 2f       	mov	r17, r24
   1a4d6:	9f cf       	rjmp	.-194    	; 0x1a416 <owMatchNext(unsigned char, unsigned char*)+0x46>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:187
	}else
	{
		return DS2482_ERR_NO_DEVICE;
   1a4d8:	85 e0       	ldi	r24, 0x05	; 5
   1a4da:	fc cf       	rjmp	.-8      	; 0x1a4d4 <owMatchNext(unsigned char, unsigned char*)+0x104>

0001a4dc <owMatchFirst(unsigned char, unsigned char*)>:
_Z12owMatchFirsthPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
   1a4dc:	10 92 02 14 	sts	0x1402, r1	; 0x801402 <lastDevice>
   1a4e0:	10 92 03 14 	sts	0x1403, r1	; 0x801403 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
   1a4e4:	0c 94 e8 d1 	jmp	0x1a3d0	; 0x1a3d0 <owMatchNext(unsigned char, unsigned char*)>

0001a4e8 <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:296
          {
          *config = Wire.read();
          return DS2482_ERR_OK;
          }
        else
          return DS2482_ERR_READ;
   1a4e8:	68 2f       	mov	r22, r24
   1a4ea:	8e e3       	ldi	r24, 0x3E	; 62
   1a4ec:	93 e1       	ldi	r25, 0x13	; 19
   1a4ee:	0e 94 f9 ce 	call	0x19df2	; 0x19df2 <TwoWire::beginTransmission(unsigned char)>
   1a4f2:	60 ef       	ldi	r22, 0xF0	; 240
   1a4f4:	70 e0       	ldi	r23, 0x00	; 0
   1a4f6:	8e e3       	ldi	r24, 0x3E	; 62
   1a4f8:	93 e1       	ldi	r25, 0x13	; 19
   1a4fa:	0e 94 03 cc 	call	0x19806	; 0x19806 <TwoWire::write(int)>
   1a4fe:	8e e3       	ldi	r24, 0x3E	; 62
   1a500:	93 e1       	ldi	r25, 0x13	; 19
   1a502:	0e 94 81 cf 	call	0x19f02	; 0x19f02 <TwoWire::endTransmission()>
   1a506:	81 11       	cpse	r24, r1
   1a508:	8a e0       	ldi	r24, 0x0A	; 10
   1a50a:	08 95       	ret

0001a50c <ds2482setReadPointer(unsigned char, unsigned char)>:
_Z20ds2482setReadPointerhh():
   1a50c:	cf 93       	push	r28
   1a50e:	c6 2f       	mov	r28, r22
   1a510:	68 2f       	mov	r22, r24
   1a512:	8e e3       	ldi	r24, 0x3E	; 62
   1a514:	93 e1       	ldi	r25, 0x13	; 19
   1a516:	0e 94 f9 ce 	call	0x19df2	; 0x19df2 <TwoWire::beginTransmission(unsigned char)>
   1a51a:	61 ee       	ldi	r22, 0xE1	; 225
   1a51c:	70 e0       	ldi	r23, 0x00	; 0
   1a51e:	8e e3       	ldi	r24, 0x3E	; 62
   1a520:	93 e1       	ldi	r25, 0x13	; 19
   1a522:	0e 94 03 cc 	call	0x19806	; 0x19806 <TwoWire::write(int)>
   1a526:	6c 2f       	mov	r22, r28
   1a528:	8e e3       	ldi	r24, 0x3E	; 62
   1a52a:	93 e1       	ldi	r25, 0x13	; 19
   1a52c:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <TwoWire::write(unsigned char)>
   1a530:	8e e3       	ldi	r24, 0x3E	; 62
   1a532:	93 e1       	ldi	r25, 0x13	; 19
   1a534:	0e 94 81 cf 	call	0x19f02	; 0x19f02 <TwoWire::endTransmission()>
   1a538:	81 11       	cpse	r24, r1
   1a53a:	83 e0       	ldi	r24, 0x03	; 3
   1a53c:	cf 91       	pop	r28
   1a53e:	08 95       	ret

0001a540 <ds2482setConfig(unsigned char, unsigned char)>:
_Z15ds2482setConfighh():
   1a540:	cf 93       	push	r28
   1a542:	c6 2f       	mov	r28, r22
   1a544:	68 2f       	mov	r22, r24
   1a546:	8e e3       	ldi	r24, 0x3E	; 62
   1a548:	93 e1       	ldi	r25, 0x13	; 19
   1a54a:	0e 94 f9 ce 	call	0x19df2	; 0x19df2 <TwoWire::beginTransmission(unsigned char)>
   1a54e:	62 ed       	ldi	r22, 0xD2	; 210
   1a550:	70 e0       	ldi	r23, 0x00	; 0
   1a552:	8e e3       	ldi	r24, 0x3E	; 62
   1a554:	93 e1       	ldi	r25, 0x13	; 19
   1a556:	0e 94 03 cc 	call	0x19806	; 0x19806 <TwoWire::write(int)>
   1a55a:	6c 2f       	mov	r22, r28
   1a55c:	8e e3       	ldi	r24, 0x3E	; 62
   1a55e:	93 e1       	ldi	r25, 0x13	; 19
   1a560:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <TwoWire::write(unsigned char)>
   1a564:	8e e3       	ldi	r24, 0x3E	; 62
   1a566:	93 e1       	ldi	r25, 0x13	; 19
   1a568:	0e 94 81 cf 	call	0x19f02	; 0x19f02 <TwoWire::endTransmission()>
   1a56c:	81 11       	cpse	r24, r1
   1a56e:	83 e0       	ldi	r24, 0x03	; 3
   1a570:	cf 91       	pop	r28
   1a572:	08 95       	ret

0001a574 <ds2482init(unsigned char)>:
_Z10ds2482inith():
   1a574:	cf 93       	push	r28
   1a576:	df 93       	push	r29
   1a578:	d8 2f       	mov	r29, r24
   1a57a:	68 2f       	mov	r22, r24
   1a57c:	8e e3       	ldi	r24, 0x3E	; 62
   1a57e:	93 e1       	ldi	r25, 0x13	; 19
   1a580:	0e 94 f9 ce 	call	0x19df2	; 0x19df2 <TwoWire::beginTransmission(unsigned char)>
   1a584:	8e e3       	ldi	r24, 0x3E	; 62
   1a586:	93 e1       	ldi	r25, 0x13	; 19
   1a588:	0e 94 81 cf 	call	0x19f02	; 0x19f02 <TwoWire::endTransmission()>
   1a58c:	c8 2f       	mov	r28, r24
   1a58e:	81 11       	cpse	r24, r1
   1a590:	08 c0       	rjmp	.+16     	; 0x1a5a2 <ds2482init(unsigned char)+0x2e>
   1a592:	60 e0       	ldi	r22, 0x00	; 0
   1a594:	8d 2f       	mov	r24, r29
   1a596:	0e 94 a0 d2 	call	0x1a540	; 0x1a540 <ds2482setConfig(unsigned char, unsigned char)>
   1a59a:	8c 2f       	mov	r24, r28
   1a59c:	df 91       	pop	r29
   1a59e:	cf 91       	pop	r28
   1a5a0:	08 95       	ret
   1a5a2:	ca e0       	ldi	r28, 0x0A	; 10
   1a5a4:	fa cf       	rjmp	.-12     	; 0x1a59a <ds2482init(unsigned char)+0x26>

0001a5a6 <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
   1a5a6:	0f 93       	push	r16
   1a5a8:	1f 93       	push	r17
   1a5aa:	cf 93       	push	r28
   1a5ac:	df 93       	push	r29
   1a5ae:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   1a5b0:	68 2f       	mov	r22, r24
   1a5b2:	8e e3       	ldi	r24, 0x3E	; 62
   1a5b4:	93 e1       	ldi	r25, 0x13	; 19
   1a5b6:	0e 94 f9 ce 	call	0x19df2	; 0x19df2 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
   1a5ba:	64 eb       	ldi	r22, 0xB4	; 180
   1a5bc:	70 e0       	ldi	r23, 0x00	; 0
   1a5be:	8e e3       	ldi	r24, 0x3E	; 62
   1a5c0:	93 e1       	ldi	r25, 0x13	; 19
   1a5c2:	0e 94 03 cc 	call	0x19806	; 0x19806 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1a5c6:	8e e3       	ldi	r24, 0x3E	; 62
   1a5c8:	93 e1       	ldi	r25, 0x13	; 19
   1a5ca:	0e 94 81 cf 	call	0x19f02	; 0x19f02 <TwoWire::endTransmission()>
   1a5ce:	c8 2f       	mov	r28, r24
   1a5d0:	81 11       	cpse	r24, r1
   1a5d2:	1b c0       	rjmp	.+54     	; 0x1a60a <ds2482owReset(unsigned char)+0x64>
   1a5d4:	de ef       	ldi	r29, 0xFE	; 254
   1a5d6:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
   1a5d8:	f9 f0       	breq	.+62     	; 0x1a618 <ds2482owReset(unsigned char)+0x72>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
   1a5da:	41 e0       	ldi	r20, 0x01	; 1
   1a5dc:	60 2f       	mov	r22, r16
   1a5de:	8e e3       	ldi	r24, 0x3E	; 62
   1a5e0:	93 e1       	ldi	r25, 0x13	; 19
   1a5e2:	0e 94 7b cf 	call	0x19ef6	; 0x19ef6 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
   1a5e6:	8e e3       	ldi	r24, 0x3E	; 62
   1a5e8:	93 e1       	ldi	r25, 0x13	; 19
   1a5ea:	0e 94 2b ce 	call	0x19c56	; 0x19c56 <TwoWire::available()>
   1a5ee:	18 16       	cp	r1, r24
   1a5f0:	19 06       	cpc	r1, r25
   1a5f2:	2c f4       	brge	.+10     	; 0x1a5fe <ds2482owReset(unsigned char)+0x58>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
   1a5f4:	8e e3       	ldi	r24, 0x3E	; 62
   1a5f6:	93 e1       	ldi	r25, 0x13	; 19
   1a5f8:	0e 94 32 ce 	call	0x19c64	; 0x19c64 <TwoWire::read()>
   1a5fc:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
   1a5fe:	10 fd       	sbrc	r17, 0
   1a600:	ea cf       	rjmp	.-44     	; 0x1a5d6 <ds2482owReset(unsigned char)+0x30>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
   1a602:	11 fd       	sbrc	r17, 1
   1a604:	03 c0       	rjmp	.+6      	; 0x1a60c <ds2482owReset(unsigned char)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
   1a606:	c5 e0       	ldi	r28, 0x05	; 5
   1a608:	01 c0       	rjmp	.+2      	; 0x1a60c <ds2482owReset(unsigned char)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   1a60a:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
   1a60c:	8c 2f       	mov	r24, r28
   1a60e:	df 91       	pop	r29
   1a610:	cf 91       	pop	r28
   1a612:	1f 91       	pop	r17
   1a614:	0f 91       	pop	r16
   1a616:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
   1a618:	c4 e0       	ldi	r28, 0x04	; 4
   1a61a:	f8 cf       	rjmp	.-16     	; 0x1a60c <ds2482owReset(unsigned char)+0x66>

0001a61c <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
   1a61c:	0f 93       	push	r16
   1a61e:	1f 93       	push	r17
   1a620:	cf 93       	push	r28
   1a622:	df 93       	push	r29
   1a624:	08 2f       	mov	r16, r24
   1a626:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   1a628:	68 2f       	mov	r22, r24
   1a62a:	8e e3       	ldi	r24, 0x3E	; 62
   1a62c:	93 e1       	ldi	r25, 0x13	; 19
   1a62e:	0e 94 f9 ce 	call	0x19df2	; 0x19df2 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
   1a632:	65 ea       	ldi	r22, 0xA5	; 165
   1a634:	70 e0       	ldi	r23, 0x00	; 0
   1a636:	8e e3       	ldi	r24, 0x3E	; 62
   1a638:	93 e1       	ldi	r25, 0x13	; 19
   1a63a:	0e 94 03 cc 	call	0x19806	; 0x19806 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
   1a63e:	6d 2f       	mov	r22, r29
   1a640:	8e e3       	ldi	r24, 0x3E	; 62
   1a642:	93 e1       	ldi	r25, 0x13	; 19
   1a644:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1a648:	8e e3       	ldi	r24, 0x3E	; 62
   1a64a:	93 e1       	ldi	r25, 0x13	; 19
   1a64c:	0e 94 81 cf 	call	0x19f02	; 0x19f02 <TwoWire::endTransmission()>
   1a650:	c8 2f       	mov	r28, r24
   1a652:	81 11       	cpse	r24, r1
   1a654:	1d c0       	rjmp	.+58     	; 0x1a690 <ds2482owWriteByte(unsigned char, unsigned char)+0x74>
   1a656:	1e ef       	ldi	r17, 0xFE	; 254
   1a658:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
   1a65a:	e1 f0       	breq	.+56     	; 0x1a694 <ds2482owWriteByte(unsigned char, unsigned char)+0x78>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   1a65c:	41 e0       	ldi	r20, 0x01	; 1
   1a65e:	60 2f       	mov	r22, r16
   1a660:	8e e3       	ldi	r24, 0x3E	; 62
   1a662:	93 e1       	ldi	r25, 0x13	; 19
   1a664:	0e 94 7b cf 	call	0x19ef6	; 0x19ef6 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
   1a668:	8e e3       	ldi	r24, 0x3E	; 62
   1a66a:	93 e1       	ldi	r25, 0x13	; 19
   1a66c:	0e 94 2b ce 	call	0x19c56	; 0x19c56 <TwoWire::available()>
   1a670:	18 16       	cp	r1, r24
   1a672:	19 06       	cpc	r1, r25
   1a674:	2c f4       	brge	.+10     	; 0x1a680 <ds2482owWriteByte(unsigned char, unsigned char)+0x64>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
   1a676:	8e e3       	ldi	r24, 0x3E	; 62
   1a678:	93 e1       	ldi	r25, 0x13	; 19
   1a67a:	0e 94 32 ce 	call	0x19c64	; 0x19c64 <TwoWire::read()>
   1a67e:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
   1a680:	d0 fd       	sbrc	r29, 0
   1a682:	ea cf       	rjmp	.-44     	; 0x1a658 <ds2482owWriteByte(unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
   1a684:	8c 2f       	mov	r24, r28
   1a686:	df 91       	pop	r29
   1a688:	cf 91       	pop	r28
   1a68a:	1f 91       	pop	r17
   1a68c:	0f 91       	pop	r16
   1a68e:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   1a690:	c3 e0       	ldi	r28, 0x03	; 3
   1a692:	f8 cf       	rjmp	.-16     	; 0x1a684 <ds2482owWriteByte(unsigned char, unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
   1a694:	c4 e0       	ldi	r28, 0x04	; 4
   1a696:	f6 cf       	rjmp	.-20     	; 0x1a684 <ds2482owWriteByte(unsigned char, unsigned char)+0x68>

0001a698 <ds2482owWriteTriplet(unsigned char, unsigned char*)>:
_Z20ds2482owWriteTriplethPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:645
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 */
uint8_t ds2482owWriteTriplet(uint8_t address, uint8_t *direction)
{
   1a698:	ff 92       	push	r15
   1a69a:	0f 93       	push	r16
   1a69c:	1f 93       	push	r17
   1a69e:	cf 93       	push	r28
   1a6a0:	df 93       	push	r29
   1a6a2:	f8 2e       	mov	r15, r24
   1a6a4:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   1a6a6:	68 2f       	mov	r22, r24
   1a6a8:	8e e3       	ldi	r24, 0x3E	; 62
   1a6aa:	93 e1       	ldi	r25, 0x13	; 19
   1a6ac:	0e 94 f9 ce 	call	0x19df2	; 0x19df2 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   1a6b0:	68 e7       	ldi	r22, 0x78	; 120
   1a6b2:	70 e0       	ldi	r23, 0x00	; 0
   1a6b4:	8e e3       	ldi	r24, 0x3E	; 62
   1a6b6:	93 e1       	ldi	r25, 0x13	; 19
   1a6b8:	0e 94 03 cc 	call	0x19806	; 0x19806 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   1a6bc:	f8 01       	movw	r30, r16
   1a6be:	80 81       	ld	r24, Z
   1a6c0:	70 e0       	ldi	r23, 0x00	; 0
   1a6c2:	60 e0       	ldi	r22, 0x00	; 0
   1a6c4:	88 23       	and	r24, r24
   1a6c6:	11 f0       	breq	.+4      	; 0x1a6cc <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x34>
   1a6c8:	60 e8       	ldi	r22, 0x80	; 128
   1a6ca:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668 (discriminator 4)
   1a6cc:	8e e3       	ldi	r24, 0x3E	; 62
   1a6ce:	93 e1       	ldi	r25, 0x13	; 19
   1a6d0:	0e 94 03 cc 	call	0x19806	; 0x19806 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669 (discriminator 4)
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1a6d4:	8e e3       	ldi	r24, 0x3E	; 62
   1a6d6:	93 e1       	ldi	r25, 0x13	; 19
   1a6d8:	0e 94 81 cf 	call	0x19f02	; 0x19f02 <TwoWire::endTransmission()>
   1a6dc:	c8 2f       	mov	r28, r24
   1a6de:	81 11       	cpse	r24, r1
   1a6e0:	21 c0       	rjmp	.+66     	; 0x1a724 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x8c>
   1a6e2:	de ef       	ldi	r29, 0xFE	; 254
   1a6e4:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   1a6e6:	01 f1       	breq	.+64     	; 0x1a728 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x90>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   1a6e8:	41 e0       	ldi	r20, 0x01	; 1
   1a6ea:	6f 2d       	mov	r22, r15
   1a6ec:	8e e3       	ldi	r24, 0x3E	; 62
   1a6ee:	93 e1       	ldi	r25, 0x13	; 19
   1a6f0:	0e 94 7b cf 	call	0x19ef6	; 0x19ef6 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   1a6f4:	8e e3       	ldi	r24, 0x3E	; 62
   1a6f6:	93 e1       	ldi	r25, 0x13	; 19
   1a6f8:	0e 94 2b ce 	call	0x19c56	; 0x19c56 <TwoWire::available()>
   1a6fc:	18 16       	cp	r1, r24
   1a6fe:	19 06       	cpc	r1, r25
   1a700:	34 f4       	brge	.+12     	; 0x1a70e <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x76>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   1a702:	8e e3       	ldi	r24, 0x3E	; 62
   1a704:	93 e1       	ldi	r25, 0x13	; 19
   1a706:	0e 94 32 ce 	call	0x19c64	; 0x19c64 <TwoWire::read()>
   1a70a:	f8 01       	movw	r30, r16
   1a70c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   1a70e:	f8 01       	movw	r30, r16
   1a710:	80 81       	ld	r24, Z
   1a712:	80 fd       	sbrc	r24, 0
   1a714:	e7 cf       	rjmp	.-50     	; 0x1a6e4 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x4c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:706
			break;
	}
	return DS2482_ERR_OK;
}
   1a716:	8c 2f       	mov	r24, r28
   1a718:	df 91       	pop	r29
   1a71a:	cf 91       	pop	r28
   1a71c:	1f 91       	pop	r17
   1a71e:	0f 91       	pop	r16
   1a720:	ff 90       	pop	r15
   1a722:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   1a724:	c3 e0       	ldi	r28, 0x03	; 3
   1a726:	f7 cf       	rjmp	.-18     	; 0x1a716 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x7e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   1a728:	c4 e0       	ldi	r28, 0x04	; 4
   1a72a:	f5 cf       	rjmp	.-22     	; 0x1a716 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x7e>

0001a72c <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
   1a72c:	ff 92       	push	r15
   1a72e:	0f 93       	push	r16
   1a730:	1f 93       	push	r17
   1a732:	cf 93       	push	r28
   1a734:	df 93       	push	r29
   1a736:	d8 2f       	mov	r29, r24
   1a738:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
   1a73a:	68 2f       	mov	r22, r24
   1a73c:	8e e3       	ldi	r24, 0x3E	; 62
   1a73e:	93 e1       	ldi	r25, 0x13	; 19
   1a740:	0e 94 f9 ce 	call	0x19df2	; 0x19df2 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
   1a744:	66 e9       	ldi	r22, 0x96	; 150
   1a746:	70 e0       	ldi	r23, 0x00	; 0
   1a748:	8e e3       	ldi	r24, 0x3E	; 62
   1a74a:	93 e1       	ldi	r25, 0x13	; 19
   1a74c:	0e 94 03 cc 	call	0x19806	; 0x19806 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1a750:	8e e3       	ldi	r24, 0x3E	; 62
   1a752:	93 e1       	ldi	r25, 0x13	; 19
   1a754:	0e 94 81 cf 	call	0x19f02	; 0x19f02 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
   1a758:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRB);
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1a75a:	81 11       	cpse	r24, r1
   1a75c:	31 c0       	rjmp	.+98     	; 0x1a7c0 <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
   1a75e:	ce ef       	ldi	r28, 0xFE	; 254
   1a760:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   1a762:	a9 f1       	breq	.+106    	; 0x1a7ce <ds2482owReadByte(unsigned char, unsigned char*)+0xa2>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   1a764:	41 e0       	ldi	r20, 0x01	; 1
   1a766:	6d 2f       	mov	r22, r29
   1a768:	8e e3       	ldi	r24, 0x3E	; 62
   1a76a:	93 e1       	ldi	r25, 0x13	; 19
   1a76c:	0e 94 7b cf 	call	0x19ef6	; 0x19ef6 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
   1a770:	8e e3       	ldi	r24, 0x3E	; 62
   1a772:	93 e1       	ldi	r25, 0x13	; 19
   1a774:	0e 94 2b ce 	call	0x19c56	; 0x19c56 <TwoWire::available()>
   1a778:	18 16       	cp	r1, r24
   1a77a:	19 06       	cpc	r1, r25
   1a77c:	2c f4       	brge	.+10     	; 0x1a788 <ds2482owReadByte(unsigned char, unsigned char*)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
   1a77e:	8e e3       	ldi	r24, 0x3E	; 62
   1a780:	93 e1       	ldi	r25, 0x13	; 19
   1a782:	0e 94 32 ce 	call	0x19c64	; 0x19c64 <TwoWire::read()>
   1a786:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
   1a788:	f0 fc       	sbrc	r15, 0
   1a78a:	ea cf       	rjmp	.-44     	; 0x1a760 <ds2482owReadByte(unsigned char, unsigned char*)+0x34>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:780
			break;
	}

	/* Now set read pointer to data register */
	t = ds2482setReadPointer(address, DS2482_P_DATA);
   1a78c:	61 ee       	ldi	r22, 0xE1	; 225
   1a78e:	8d 2f       	mov	r24, r29
   1a790:	0e 94 86 d2 	call	0x1a50c	; 0x1a50c <ds2482setReadPointer(unsigned char, unsigned char)>
   1a794:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:781
	if(t)	/* Error? */
   1a796:	81 11       	cpse	r24, r1
   1a798:	13 c0       	rjmp	.+38     	; 0x1a7c0 <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
   1a79a:	41 e0       	ldi	r20, 0x01	; 1
   1a79c:	6d 2f       	mov	r22, r29
   1a79e:	8e e3       	ldi	r24, 0x3E	; 62
   1a7a0:	93 e1       	ldi	r25, 0x13	; 19
   1a7a2:	0e 94 7b cf 	call	0x19ef6	; 0x19ef6 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
   1a7a6:	8e e3       	ldi	r24, 0x3E	; 62
   1a7a8:	93 e1       	ldi	r25, 0x13	; 19
   1a7aa:	0e 94 2b ce 	call	0x19c56	; 0x19c56 <TwoWire::available()>
   1a7ae:	18 16       	cp	r1, r24
   1a7b0:	19 06       	cpc	r1, r25
   1a7b2:	34 f4       	brge	.+12     	; 0x1a7c0 <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
   1a7b4:	8e e3       	ldi	r24, 0x3E	; 62
   1a7b6:	93 e1       	ldi	r25, 0x13	; 19
   1a7b8:	0e 94 32 ce 	call	0x19c64	; 0x19c64 <TwoWire::read()>
   1a7bc:	f8 01       	movw	r30, r16
   1a7be:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809

	return DS2482_ERR_OK;
}
   1a7c0:	8c 2f       	mov	r24, r28
   1a7c2:	df 91       	pop	r29
   1a7c4:	cf 91       	pop	r28
   1a7c6:	1f 91       	pop	r17
   1a7c8:	0f 91       	pop	r16
   1a7ca:	ff 90       	pop	r15
   1a7cc:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   1a7ce:	c4 e0       	ldi	r28, 0x04	; 4
   1a7d0:	f7 cf       	rjmp	.-18     	; 0x1a7c0 <ds2482owReadByte(unsigned char, unsigned char*)+0x94>

0001a7d2 <NTPClient::NTPClient(UDP&)>:
_ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:160 (discriminator 2)

  unsigned long minutes = (rawTime % 3600) / 60;
  String minuteStr = minutes < 10 ? "0" + String(minutes) : String(minutes);

  unsigned long seconds = rawTime % 60;
  String secondStr = seconds < 10 ? "0" + String(seconds) : String(seconds);
   1a7d2:	fc 01       	movw	r30, r24
   1a7d4:	12 82       	std	Z+2, r1	; 0x02
   1a7d6:	84 e2       	ldi	r24, 0x24	; 36
   1a7d8:	99 e0       	ldi	r25, 0x09	; 9
   1a7da:	94 83       	std	Z+4, r25	; 0x04
   1a7dc:	83 83       	std	Z+3, r24	; 0x03
   1a7de:	89 e3       	ldi	r24, 0x39	; 57
   1a7e0:	95 e0       	ldi	r25, 0x05	; 5
   1a7e2:	96 83       	std	Z+6, r25	; 0x06
   1a7e4:	85 83       	std	Z+5, r24	; 0x05
   1a7e6:	17 82       	std	Z+7, r1	; 0x07
   1a7e8:	10 86       	std	Z+8, r1	; 0x08
   1a7ea:	11 86       	std	Z+9, r1	; 0x09
   1a7ec:	12 86       	std	Z+10, r1	; 0x0a
   1a7ee:	80 e6       	ldi	r24, 0x60	; 96
   1a7f0:	9a ee       	ldi	r25, 0xEA	; 234
   1a7f2:	a0 e0       	ldi	r26, 0x00	; 0
   1a7f4:	b0 e0       	ldi	r27, 0x00	; 0
   1a7f6:	83 87       	std	Z+11, r24	; 0x0b
   1a7f8:	94 87       	std	Z+12, r25	; 0x0c
   1a7fa:	a5 87       	std	Z+13, r26	; 0x0d
   1a7fc:	b6 87       	std	Z+14, r27	; 0x0e
   1a7fe:	17 86       	std	Z+15, r1	; 0x0f
   1a800:	10 8a       	std	Z+16, r1	; 0x10
   1a802:	11 8a       	std	Z+17, r1	; 0x11
   1a804:	12 8a       	std	Z+18, r1	; 0x12
   1a806:	13 8a       	std	Z+19, r1	; 0x13
   1a808:	14 8a       	std	Z+20, r1	; 0x14
   1a80a:	15 8a       	std	Z+21, r1	; 0x15
   1a80c:	16 8a       	std	Z+22, r1	; 0x16
   1a80e:	71 83       	std	Z+1, r23	; 0x01
   1a810:	60 83       	st	Z, r22
   1a812:	08 95       	ret

0001a814 <NTPClient::begin(int)>:
_ZN9NTPClient5beginEi():
   1a814:	cf 93       	push	r28
   1a816:	df 93       	push	r29
   1a818:	ec 01       	movw	r28, r24
   1a81a:	7e 83       	std	Y+6, r23	; 0x06
   1a81c:	6d 83       	std	Y+5, r22	; 0x05
   1a81e:	88 81       	ld	r24, Y
   1a820:	99 81       	ldd	r25, Y+1	; 0x01
   1a822:	dc 01       	movw	r26, r24
   1a824:	ed 91       	ld	r30, X+
   1a826:	fc 91       	ld	r31, X
   1a828:	06 84       	ldd	r0, Z+14	; 0x0e
   1a82a:	f7 85       	ldd	r31, Z+15	; 0x0f
   1a82c:	e0 2d       	mov	r30, r0
   1a82e:	19 95       	eicall
   1a830:	81 e0       	ldi	r24, 0x01	; 1
   1a832:	8a 83       	std	Y+2, r24	; 0x02
   1a834:	df 91       	pop	r29
   1a836:	cf 91       	pop	r28
   1a838:	08 95       	ret

0001a83a <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
   1a83a:	69 e3       	ldi	r22, 0x39	; 57
   1a83c:	75 e0       	ldi	r23, 0x05	; 5
   1a83e:	0c 94 0a d4 	jmp	0x1a814	; 0x1a814 <NTPClient::begin(int)>

0001a842 <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
   1a842:	cf 92       	push	r12
   1a844:	df 92       	push	r13
   1a846:	ef 92       	push	r14
   1a848:	ff 92       	push	r15
   1a84a:	0f 93       	push	r16
   1a84c:	1f 93       	push	r17
   1a84e:	cf 93       	push	r28
   1a850:	df 93       	push	r29
   1a852:	ec 01       	movw	r28, r24
   1a854:	cf 80       	ldd	r12, Y+7	; 0x07
   1a856:	d8 84       	ldd	r13, Y+8	; 0x08
   1a858:	e9 84       	ldd	r14, Y+9	; 0x09
   1a85a:	fa 84       	ldd	r15, Y+10	; 0x0a
   1a85c:	8f 85       	ldd	r24, Y+15	; 0x0f
   1a85e:	98 89       	ldd	r25, Y+16	; 0x10
   1a860:	a9 89       	ldd	r26, Y+17	; 0x11
   1a862:	ba 89       	ldd	r27, Y+18	; 0x12
   1a864:	c8 0e       	add	r12, r24
   1a866:	d9 1e       	adc	r13, r25
   1a868:	ea 1e       	adc	r14, r26
   1a86a:	fb 1e       	adc	r15, r27
   1a86c:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   1a870:	0b 89       	ldd	r16, Y+19	; 0x13
   1a872:	1c 89       	ldd	r17, Y+20	; 0x14
   1a874:	2d 89       	ldd	r18, Y+21	; 0x15
   1a876:	3e 89       	ldd	r19, Y+22	; 0x16
   1a878:	60 1b       	sub	r22, r16
   1a87a:	71 0b       	sbc	r23, r17
   1a87c:	82 0b       	sbc	r24, r18
   1a87e:	93 0b       	sbc	r25, r19
   1a880:	28 ee       	ldi	r18, 0xE8	; 232
   1a882:	33 e0       	ldi	r19, 0x03	; 3
   1a884:	40 e0       	ldi	r20, 0x00	; 0
   1a886:	50 e0       	ldi	r21, 0x00	; 0
   1a888:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
   1a88c:	ca 01       	movw	r24, r20
   1a88e:	b9 01       	movw	r22, r18
   1a890:	6c 0d       	add	r22, r12
   1a892:	7d 1d       	adc	r23, r13
   1a894:	8e 1d       	adc	r24, r14
   1a896:	9f 1d       	adc	r25, r15
   1a898:	df 91       	pop	r29
   1a89a:	cf 91       	pop	r28
   1a89c:	1f 91       	pop	r17
   1a89e:	0f 91       	pop	r16
   1a8a0:	ff 90       	pop	r15
   1a8a2:	ef 90       	pop	r14
   1a8a4:	df 90       	pop	r13
   1a8a6:	cf 90       	pop	r12
   1a8a8:	08 95       	ret

0001a8aa <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
   1a8aa:	cf 93       	push	r28
   1a8ac:	df 93       	push	r29
   1a8ae:	00 d0       	rcall	.+0      	; 0x1a8b0 <NTPClient::getYear() const+0x6>
   1a8b0:	1f 92       	push	r1
   1a8b2:	cd b7       	in	r28, 0x3d	; 61
   1a8b4:	de b7       	in	r29, 0x3e	; 62
   1a8b6:	0e 94 21 d4 	call	0x1a842	; 0x1a842 <NTPClient::getEpochTime() const>
   1a8ba:	69 83       	std	Y+1, r22	; 0x01
   1a8bc:	7a 83       	std	Y+2, r23	; 0x02
   1a8be:	8b 83       	std	Y+3, r24	; 0x03
   1a8c0:	9c 83       	std	Y+4, r25	; 0x04
   1a8c2:	ce 01       	movw	r24, r28
   1a8c4:	01 96       	adiw	r24, 0x01	; 1
   1a8c6:	0e 94 cc 32 	call	0x6598	; 0x6598 <localtime>
   1a8ca:	fc 01       	movw	r30, r24
   1a8cc:	86 81       	ldd	r24, Z+6	; 0x06
   1a8ce:	97 81       	ldd	r25, Z+7	; 0x07
   1a8d0:	84 59       	subi	r24, 0x94	; 148
   1a8d2:	98 4f       	sbci	r25, 0xF8	; 248
   1a8d4:	0f 90       	pop	r0
   1a8d6:	0f 90       	pop	r0
   1a8d8:	0f 90       	pop	r0
   1a8da:	0f 90       	pop	r0
   1a8dc:	df 91       	pop	r29
   1a8de:	cf 91       	pop	r28
   1a8e0:	08 95       	ret

0001a8e2 <NTPClient::getMonth() const>:
_ZNK9NTPClient8getMonthEv():
   1a8e2:	cf 93       	push	r28
   1a8e4:	df 93       	push	r29
   1a8e6:	00 d0       	rcall	.+0      	; 0x1a8e8 <NTPClient::getMonth() const+0x6>
   1a8e8:	1f 92       	push	r1
   1a8ea:	cd b7       	in	r28, 0x3d	; 61
   1a8ec:	de b7       	in	r29, 0x3e	; 62
   1a8ee:	0e 94 21 d4 	call	0x1a842	; 0x1a842 <NTPClient::getEpochTime() const>
   1a8f2:	69 83       	std	Y+1, r22	; 0x01
   1a8f4:	7a 83       	std	Y+2, r23	; 0x02
   1a8f6:	8b 83       	std	Y+3, r24	; 0x03
   1a8f8:	9c 83       	std	Y+4, r25	; 0x04
   1a8fa:	ce 01       	movw	r24, r28
   1a8fc:	01 96       	adiw	r24, 0x01	; 1
   1a8fe:	0e 94 cc 32 	call	0x6598	; 0x6598 <localtime>
   1a902:	fc 01       	movw	r30, r24
   1a904:	85 81       	ldd	r24, Z+5	; 0x05
   1a906:	08 2e       	mov	r0, r24
   1a908:	00 0c       	add	r0, r0
   1a90a:	99 0b       	sbc	r25, r25
   1a90c:	01 96       	adiw	r24, 0x01	; 1
   1a90e:	0f 90       	pop	r0
   1a910:	0f 90       	pop	r0
   1a912:	0f 90       	pop	r0
   1a914:	0f 90       	pop	r0
   1a916:	df 91       	pop	r29
   1a918:	cf 91       	pop	r28
   1a91a:	08 95       	ret

0001a91c <NTPClient::getDate() const>:
_ZNK9NTPClient7getDateEv():
   1a91c:	cf 93       	push	r28
   1a91e:	df 93       	push	r29
   1a920:	00 d0       	rcall	.+0      	; 0x1a922 <NTPClient::getDate() const+0x6>
   1a922:	1f 92       	push	r1
   1a924:	cd b7       	in	r28, 0x3d	; 61
   1a926:	de b7       	in	r29, 0x3e	; 62
   1a928:	0e 94 21 d4 	call	0x1a842	; 0x1a842 <NTPClient::getEpochTime() const>
   1a92c:	69 83       	std	Y+1, r22	; 0x01
   1a92e:	7a 83       	std	Y+2, r23	; 0x02
   1a930:	8b 83       	std	Y+3, r24	; 0x03
   1a932:	9c 83       	std	Y+4, r25	; 0x04
   1a934:	ce 01       	movw	r24, r28
   1a936:	01 96       	adiw	r24, 0x01	; 1
   1a938:	0e 94 cc 32 	call	0x6598	; 0x6598 <localtime>
   1a93c:	fc 01       	movw	r30, r24
   1a93e:	83 81       	ldd	r24, Z+3	; 0x03
   1a940:	08 2e       	mov	r0, r24
   1a942:	00 0c       	add	r0, r0
   1a944:	99 0b       	sbc	r25, r25
   1a946:	0f 90       	pop	r0
   1a948:	0f 90       	pop	r0
   1a94a:	0f 90       	pop	r0
   1a94c:	0f 90       	pop	r0
   1a94e:	df 91       	pop	r29
   1a950:	cf 91       	pop	r28
   1a952:	08 95       	ret

0001a954 <NTPClient::getHours() const>:
_ZNK9NTPClient8getHoursEv():
   1a954:	0e 94 21 d4 	call	0x1a842	; 0x1a842 <NTPClient::getEpochTime() const>
   1a958:	20 e8       	ldi	r18, 0x80	; 128
   1a95a:	31 e5       	ldi	r19, 0x51	; 81
   1a95c:	41 e0       	ldi	r20, 0x01	; 1
   1a95e:	50 e0       	ldi	r21, 0x00	; 0
   1a960:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
   1a964:	20 e1       	ldi	r18, 0x10	; 16
   1a966:	3e e0       	ldi	r19, 0x0E	; 14
   1a968:	40 e0       	ldi	r20, 0x00	; 0
   1a96a:	50 e0       	ldi	r21, 0x00	; 0
   1a96c:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
   1a970:	c9 01       	movw	r24, r18
   1a972:	08 95       	ret

0001a974 <NTPClient::getMinutes() const>:
_ZNK9NTPClient10getMinutesEv():
   1a974:	0e 94 21 d4 	call	0x1a842	; 0x1a842 <NTPClient::getEpochTime() const>
   1a978:	20 e1       	ldi	r18, 0x10	; 16
   1a97a:	3e e0       	ldi	r19, 0x0E	; 14
   1a97c:	40 e0       	ldi	r20, 0x00	; 0
   1a97e:	50 e0       	ldi	r21, 0x00	; 0
   1a980:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
   1a984:	2c e3       	ldi	r18, 0x3C	; 60
   1a986:	30 e0       	ldi	r19, 0x00	; 0
   1a988:	40 e0       	ldi	r20, 0x00	; 0
   1a98a:	50 e0       	ldi	r21, 0x00	; 0
   1a98c:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
   1a990:	c9 01       	movw	r24, r18
   1a992:	08 95       	ret

0001a994 <NTPClient::getSeconds() const>:
_ZNK9NTPClient10getSecondsEv():
   1a994:	0e 94 21 d4 	call	0x1a842	; 0x1a842 <NTPClient::getEpochTime() const>
   1a998:	2c e3       	ldi	r18, 0x3C	; 60
   1a99a:	30 e0       	ldi	r19, 0x00	; 0
   1a99c:	40 e0       	ldi	r20, 0x00	; 0
   1a99e:	50 e0       	ldi	r21, 0x00	; 0
   1a9a0:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
   1a9a4:	cb 01       	movw	r24, r22
   1a9a6:	08 95       	ret

0001a9a8 <NTPClient::end()>:
_ZN9NTPClient3endEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:165

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
   1a9a8:	cf 93       	push	r28
   1a9aa:	df 93       	push	r29
   1a9ac:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166
  this->_udp->stop();
   1a9ae:	88 81       	ld	r24, Y
   1a9b0:	99 81       	ldd	r25, Y+1	; 0x01
   1a9b2:	dc 01       	movw	r26, r24
   1a9b4:	ed 91       	ld	r30, X+
   1a9b6:	fc 91       	ld	r31, X
   1a9b8:	02 88       	ldd	r0, Z+18	; 0x12
   1a9ba:	f3 89       	ldd	r31, Z+19	; 0x13
   1a9bc:	e0 2d       	mov	r30, r0
   1a9be:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   1a9c0:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:169
}
   1a9c2:	df 91       	pop	r29
   1a9c4:	cf 91       	pop	r28
   1a9c6:	08 95       	ret

0001a9c8 <NTPClient::setTimeOffset(int)>:
_ZN9NTPClient13setTimeOffsetEi():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   1a9c8:	ab 01       	movw	r20, r22
   1a9ca:	77 0f       	add	r23, r23
   1a9cc:	66 0b       	sbc	r22, r22
   1a9ce:	77 0b       	sbc	r23, r23
   1a9d0:	fc 01       	movw	r30, r24
   1a9d2:	47 83       	std	Z+7, r20	; 0x07
   1a9d4:	50 87       	std	Z+8, r21	; 0x08
   1a9d6:	61 87       	std	Z+9, r22	; 0x09
   1a9d8:	72 87       	std	Z+10, r23	; 0x0a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:173
}
   1a9da:	08 95       	ret

0001a9dc <NTPClient::setUpdateInterval(unsigned long)>:
_ZN9NTPClient17setUpdateIntervalEm():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
   1a9dc:	fc 01       	movw	r30, r24
   1a9de:	43 87       	std	Z+11, r20	; 0x0b
   1a9e0:	54 87       	std	Z+12, r21	; 0x0c
   1a9e2:	65 87       	std	Z+13, r22	; 0x0d
   1a9e4:	76 87       	std	Z+14, r23	; 0x0e
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:177
}
   1a9e6:	08 95       	ret

0001a9e8 <NTPClient::setPoolServerName(char const*)>:
_ZN9NTPClient17setPoolServerNameEPKc():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   1a9e8:	fc 01       	movw	r30, r24
   1a9ea:	74 83       	std	Z+4, r23	; 0x04
   1a9ec:	63 83       	std	Z+3, r22	; 0x03
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:181
}
   1a9ee:	08 95       	ret

0001a9f0 <NTPClient::sendNTPPacket()>:
_ZN9NTPClient13sendNTPPacketEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:183

void NTPClient::sendNTPPacket() {
   1a9f0:	cf 93       	push	r28
   1a9f2:	df 93       	push	r29
   1a9f4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   1a9f6:	fc 01       	movw	r30, r24
   1a9f8:	7b 96       	adiw	r30, 0x1b	; 27
   1a9fa:	8c e2       	ldi	r24, 0x2C	; 44
   1a9fc:	df 01       	movw	r26, r30
   1a9fe:	1d 92       	st	X+, r1
   1aa00:	8a 95       	dec	r24
   1aa02:	e9 f7       	brne	.-6      	; 0x1a9fe <NTPClient::sendNTPPacket()+0xe>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
   1aa04:	83 ee       	ldi	r24, 0xE3	; 227
   1aa06:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
   1aa08:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
   1aa0a:	86 e0       	ldi	r24, 0x06	; 6
   1aa0c:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
   1aa0e:	8c ee       	ldi	r24, 0xEC	; 236
   1aa10:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
   1aa12:	81 e3       	ldi	r24, 0x31	; 49
   1aa14:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
   1aa16:	9e e4       	ldi	r25, 0x4E	; 78
   1aa18:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
   1aa1a:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
   1aa1c:	84 e3       	ldi	r24, 0x34	; 52
   1aa1e:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
   1aa20:	88 81       	ld	r24, Y
   1aa22:	99 81       	ldd	r25, Y+1	; 0x01
   1aa24:	6b 81       	ldd	r22, Y+3	; 0x03
   1aa26:	7c 81       	ldd	r23, Y+4	; 0x04
   1aa28:	dc 01       	movw	r26, r24
   1aa2a:	ed 91       	ld	r30, X+
   1aa2c:	fc 91       	ld	r31, X
   1aa2e:	06 88       	ldd	r0, Z+22	; 0x16
   1aa30:	f7 89       	ldd	r31, Z+23	; 0x17
   1aa32:	e0 2d       	mov	r30, r0
   1aa34:	4b e7       	ldi	r20, 0x7B	; 123
   1aa36:	50 e0       	ldi	r21, 0x00	; 0
   1aa38:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   1aa3a:	88 81       	ld	r24, Y
   1aa3c:	99 81       	ldd	r25, Y+1	; 0x01
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   1aa3e:	be 01       	movw	r22, r28
   1aa40:	69 5e       	subi	r22, 0xE9	; 233
   1aa42:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_packetBuffer[15]  = 52;

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   1aa44:	dc 01       	movw	r26, r24
   1aa46:	ed 91       	ld	r30, X+
   1aa48:	fc 91       	ld	r31, X
   1aa4a:	02 80       	ldd	r0, Z+2	; 0x02
   1aa4c:	f3 81       	ldd	r31, Z+3	; 0x03
   1aa4e:	e0 2d       	mov	r30, r0
   1aa50:	40 e3       	ldi	r20, 0x30	; 48
   1aa52:	50 e0       	ldi	r21, 0x00	; 0
   1aa54:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
   1aa56:	88 81       	ld	r24, Y
   1aa58:	99 81       	ldd	r25, Y+1	; 0x01
   1aa5a:	dc 01       	movw	r26, r24
   1aa5c:	ed 91       	ld	r30, X+
   1aa5e:	fc 91       	ld	r31, X
   1aa60:	00 8c       	ldd	r0, Z+24	; 0x18
   1aa62:	f1 8d       	ldd	r31, Z+25	; 0x19
   1aa64:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
}
   1aa66:	df 91       	pop	r29
   1aa68:	cf 91       	pop	r28
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
  this->_udp->endPacket();
   1aa6a:	19 94       	eijmp

0001aa6c <NTPClient::forceUpdate()>:
_ZN9NTPClient11forceUpdateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:64
  this->_udp->begin(this->_port);

  this->_udpSetup = true;
}

bool NTPClient::forceUpdate() {
   1aa6c:	0f 93       	push	r16
   1aa6e:	1f 93       	push	r17
   1aa70:	cf 93       	push	r28
   1aa72:	df 93       	push	r29
   1aa74:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:69
  #ifdef DEBUG_NTPClient
    Serial.println("Update from NTP Server");
  #endif

  this->sendNTPPacket();
   1aa76:	0e 94 f8 d4 	call	0x1a9f0	; 0x1a9f0 <NTPClient::sendNTPPacket()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72

  // Wait till data is there or timeout...
  byte timeout = 0;
   1aa7a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
   1aa7c:	6a e0       	ldi	r22, 0x0A	; 10
   1aa7e:	70 e0       	ldi	r23, 0x00	; 0
   1aa80:	80 e0       	ldi	r24, 0x00	; 0
   1aa82:	90 e0       	ldi	r25, 0x00	; 0
   1aa84:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
   1aa88:	88 81       	ld	r24, Y
   1aa8a:	99 81       	ldd	r25, Y+1	; 0x01
   1aa8c:	dc 01       	movw	r26, r24
   1aa8e:	ed 91       	ld	r30, X+
   1aa90:	fc 91       	ld	r31, X
   1aa92:	02 8c       	ldd	r0, Z+26	; 0x1a
   1aa94:	f3 8d       	ldd	r31, Z+27	; 0x1b
   1aa96:	e0 2d       	mov	r30, r0
   1aa98:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
   1aa9a:	15 36       	cpi	r17, 0x65	; 101
   1aa9c:	09 f4       	brne	.+2      	; 0x1aaa0 <NTPClient::forceUpdate()+0x34>
   1aa9e:	59 c0       	rjmp	.+178    	; 0x1ab52 <NTPClient::forceUpdate()+0xe6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
   1aaa0:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
   1aaa2:	89 2b       	or	r24, r25
   1aaa4:	59 f3       	breq	.-42     	; 0x1aa7c <NTPClient::forceUpdate()+0x10>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
   1aaa6:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   1aaaa:	21 2f       	mov	r18, r17
   1aaac:	30 e0       	ldi	r19, 0x00	; 0
   1aaae:	a9 01       	movw	r20, r18
   1aab0:	4f 5f       	subi	r20, 0xFF	; 255
   1aab2:	5f 4f       	sbci	r21, 0xFF	; 255
   1aab4:	ea e0       	ldi	r30, 0x0A	; 10
   1aab6:	e4 9f       	mul	r30, r20
   1aab8:	90 01       	movw	r18, r0
   1aaba:	e5 9f       	mul	r30, r21
   1aabc:	30 0d       	add	r19, r0
   1aabe:	11 24       	eor	r1, r1
   1aac0:	89 01       	movw	r16, r18
   1aac2:	33 0f       	add	r19, r19
   1aac4:	22 0b       	sbc	r18, r18
   1aac6:	33 0b       	sbc	r19, r19
   1aac8:	ab 01       	movw	r20, r22
   1aaca:	bc 01       	movw	r22, r24
   1aacc:	40 1b       	sub	r20, r16
   1aace:	51 0b       	sbc	r21, r17
   1aad0:	62 0b       	sbc	r22, r18
   1aad2:	73 0b       	sbc	r23, r19
   1aad4:	4b 8b       	std	Y+19, r20	; 0x13
   1aad6:	5c 8b       	std	Y+20, r21	; 0x14
   1aad8:	6d 8b       	std	Y+21, r22	; 0x15
   1aada:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
   1aadc:	88 81       	ld	r24, Y
   1aade:	99 81       	ldd	r25, Y+1	; 0x01
   1aae0:	be 01       	movw	r22, r28
   1aae2:	69 5e       	subi	r22, 0xE9	; 233
   1aae4:	7f 4f       	sbci	r23, 0xFF	; 255
   1aae6:	dc 01       	movw	r26, r24
   1aae8:	ed 91       	ld	r30, X+
   1aaea:	fc 91       	ld	r31, X
   1aaec:	04 8c       	ldd	r0, Z+28	; 0x1c
   1aaee:	f5 8d       	ldd	r31, Z+29	; 0x1d
   1aaf0:	e0 2d       	mov	r30, r0
   1aaf2:	40 e3       	ldi	r20, 0x30	; 48
   1aaf4:	50 e0       	ldi	r21, 0x00	; 0
   1aaf6:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   1aaf8:	fe 01       	movw	r30, r28
   1aafa:	e0 5c       	subi	r30, 0xC0	; 192
   1aafc:	ff 4f       	sbci	r31, 0xFF	; 255
   1aafe:	60 81       	ld	r22, Z
   1ab00:	8f ad       	ldd	r24, Y+63	; 0x3f
   1ab02:	0e 94 0f db 	call	0x1b61e	; 0x1b61e <makeWord(unsigned char, unsigned char)>
   1ab06:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   1ab08:	de 01       	movw	r26, r28
   1ab0a:	ae 5b       	subi	r26, 0xBE	; 190
   1ab0c:	bf 4f       	sbci	r27, 0xFF	; 255
   1ab0e:	fe 01       	movw	r30, r28
   1ab10:	ef 5b       	subi	r30, 0xBF	; 191
   1ab12:	ff 4f       	sbci	r31, 0xFF	; 255
   1ab14:	6c 91       	ld	r22, X
   1ab16:	80 81       	ld	r24, Z
   1ab18:	0e 94 0f db 	call	0x1b61e	; 0x1b61e <makeWord(unsigned char, unsigned char)>
   1ab1c:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   1ab1e:	c8 01       	movw	r24, r16
   1ab20:	b0 e0       	ldi	r27, 0x00	; 0
   1ab22:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   1ab24:	dc 01       	movw	r26, r24
   1ab26:	99 27       	eor	r25, r25
   1ab28:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   1ab2a:	70 e0       	ldi	r23, 0x00	; 0
   1ab2c:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   1ab2e:	84 2b       	or	r24, r20
   1ab30:	95 2b       	or	r25, r21
   1ab32:	a6 2b       	or	r26, r22
   1ab34:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
   1ab36:	80 58       	subi	r24, 0x80	; 128
   1ab38:	9e 47       	sbci	r25, 0x7E	; 126
   1ab3a:	aa 4a       	sbci	r26, 0xAA	; 170
   1ab3c:	b3 48       	sbci	r27, 0x83	; 131
   1ab3e:	8f 87       	std	Y+15, r24	; 0x0f
   1ab40:	98 8b       	std	Y+16, r25	; 0x10
   1ab42:	a9 8b       	std	Y+17, r26	; 0x11
   1ab44:	ba 8b       	std	Y+18, r27	; 0x12
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:93

  return true;
   1ab46:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:94
}
   1ab48:	df 91       	pop	r29
   1ab4a:	cf 91       	pop	r28
   1ab4c:	1f 91       	pop	r17
   1ab4e:	0f 91       	pop	r16
   1ab50:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
   1ab52:	80 e0       	ldi	r24, 0x00	; 0
   1ab54:	f9 cf       	rjmp	.-14     	; 0x1ab48 <NTPClient::forceUpdate()+0xdc>

0001ab56 <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
   1ab56:	cf 92       	push	r12
   1ab58:	df 92       	push	r13
   1ab5a:	ef 92       	push	r14
   1ab5c:	ff 92       	push	r15
   1ab5e:	0f 93       	push	r16
   1ab60:	1f 93       	push	r17
   1ab62:	cf 93       	push	r28
   1ab64:	df 93       	push	r29
   1ab66:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
   1ab68:	0e 94 d3 d6 	call	0x1ada6	; 0x1ada6 <millis>
   1ab6c:	0b 89       	ldd	r16, Y+19	; 0x13
   1ab6e:	1c 89       	ldd	r17, Y+20	; 0x14
   1ab70:	2d 89       	ldd	r18, Y+21	; 0x15
   1ab72:	3e 89       	ldd	r19, Y+22	; 0x16
   1ab74:	60 1b       	sub	r22, r16
   1ab76:	71 0b       	sbc	r23, r17
   1ab78:	82 0b       	sbc	r24, r18
   1ab7a:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
   1ab7c:	cb 84       	ldd	r12, Y+11	; 0x0b
   1ab7e:	dc 84       	ldd	r13, Y+12	; 0x0c
   1ab80:	ed 84       	ldd	r14, Y+13	; 0x0d
   1ab82:	fe 84       	ldd	r15, Y+14	; 0x0e
   1ab84:	6c 15       	cp	r22, r12
   1ab86:	7d 05       	cpc	r23, r13
   1ab88:	8e 05       	cpc	r24, r14
   1ab8a:	9f 05       	cpc	r25, r15
   1ab8c:	20 f4       	brcc	.+8      	; 0x1ab96 <NTPClient::update()+0x40>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98 (discriminator 2)
   1ab8e:	01 2b       	or	r16, r17
   1ab90:	02 2b       	or	r16, r18
   1ab92:	03 2b       	or	r16, r19
   1ab94:	89 f4       	brne	.+34     	; 0x1abb8 <NTPClient::update()+0x62>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
   1ab96:	8a 81       	ldd	r24, Y+2	; 0x02
   1ab98:	81 11       	cpse	r24, r1
   1ab9a:	03 c0       	rjmp	.+6      	; 0x1aba2 <NTPClient::update()+0x4c>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99 (discriminator 1)
   1ab9c:	ce 01       	movw	r24, r28
   1ab9e:	0e 94 1d d4 	call	0x1a83a	; 0x1a83a <NTPClient::begin()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:100
    return this->forceUpdate();
   1aba2:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
  }
  return true;
}
   1aba4:	df 91       	pop	r29
   1aba6:	cf 91       	pop	r28
   1aba8:	1f 91       	pop	r17
   1abaa:	0f 91       	pop	r16
   1abac:	ff 90       	pop	r15
   1abae:	ef 90       	pop	r14
   1abb0:	df 90       	pop	r13
   1abb2:	cf 90       	pop	r12
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:100

bool NTPClient::update() {
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
   1abb4:	0c 94 36 d5 	jmp	0x1aa6c	; 0x1aa6c <NTPClient::forceUpdate()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
  }
  return true;
}
   1abb8:	81 e0       	ldi	r24, 0x01	; 1
   1abba:	df 91       	pop	r29
   1abbc:	cf 91       	pop	r28
   1abbe:	1f 91       	pop	r17
   1abc0:	0f 91       	pop	r16
   1abc2:	ff 90       	pop	r15
   1abc4:	ef 90       	pop	r14
   1abc6:	df 90       	pop	r13
   1abc8:	cf 90       	pop	r12
   1abca:	08 95       	ret

0001abcc <_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP>:
_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
  this->_udp->endPacket();
}
   1abcc:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   1abce:	00 e0       	ldi	r16, 0x00	; 0
   1abd0:	20 e0       	ldi	r18, 0x00	; 0
   1abd2:	40 e0       	ldi	r20, 0x00	; 0
   1abd4:	60 e0       	ldi	r22, 0x00	; 0
   1abd6:	84 e0       	ldi	r24, 0x04	; 4
   1abd8:	94 e1       	ldi	r25, 0x14	; 20
   1abda:	0e 94 4b da 	call	0x1b496	; 0x1b496 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
   1abde:	0f 91       	pop	r16
   1abe0:	08 95       	ret

0001abe2 <a2d_handler(void (*)(unsigned char, unsigned int))>:
_Z11a2d_handlerPFvhjE():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:53
/// deinicializace a2d prevodniku ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void deinit_a2d(void)
{
ADCSRA = 0;
ADMUX = 0;
}
   1abe2:	90 93 0b 14 	sts	0x140B, r25	; 0x80140b <a2d_interupt_func+0x1>
   1abe6:	80 93 0a 14 	sts	0x140A, r24	; 0x80140a <a2d_interupt_func>
   1abea:	08 95       	ret

0001abec <init_a2d(unsigned char, unsigned char, unsigned char)>:
_Z8init_a2dhhh():
   1abec:	80 93 0e 14 	sts	0x140E, r24	; 0x80140e <a2d_enable>
   1abf0:	40 93 0d 14 	sts	0x140D, r20	; 0x80140d <a2d_reference>
   1abf4:	60 93 0c 14 	sts	0x140C, r22	; 0x80140c <a2d_delicka>
   1abf8:	10 92 0f 14 	sts	0x140F, r1	; 0x80140f <a2d_index>
   1abfc:	10 92 12 14 	sts	0x1412, r1	; 0x801412 <a2d_input>
   1ac00:	10 92 11 14 	sts	0x1411, r1	; 0x801411 <a2d_data+0x1>
   1ac04:	10 92 10 14 	sts	0x1410, r1	; 0x801410 <a2d_data>
   1ac08:	67 70       	andi	r22, 0x07	; 7
   1ac0a:	68 57       	subi	r22, 0x78	; 120
   1ac0c:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   1ac10:	ec e7       	ldi	r30, 0x7C	; 124
   1ac12:	f0 e0       	ldi	r31, 0x00	; 0
   1ac14:	10 82       	st	Z, r1
   1ac16:	80 91 0d 14 	lds	r24, 0x140D	; 0x80140d <a2d_reference>
   1ac1a:	20 e4       	ldi	r18, 0x40	; 64
   1ac1c:	82 9f       	mul	r24, r18
   1ac1e:	c0 01       	movw	r24, r0
   1ac20:	11 24       	eor	r1, r1
   1ac22:	80 83       	st	Z, r24
   1ac24:	08 95       	ret

0001ac26 <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
   1ac26:	90 91 0d 14 	lds	r25, 0x140D	; 0x80140d <a2d_reference>
   1ac2a:	40 e4       	ldi	r20, 0x40	; 64
   1ac2c:	94 9f       	mul	r25, r20
   1ac2e:	90 01       	movw	r18, r0
   1ac30:	11 24       	eor	r1, r1
   1ac32:	98 2f       	mov	r25, r24
   1ac34:	97 70       	andi	r25, 0x07	; 7
   1ac36:	92 0f       	add	r25, r18
   1ac38:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
   1ac3c:	80 93 12 14 	sts	0x1412, r24	; 0x801412 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
   1ac40:	ea e7       	ldi	r30, 0x7A	; 122
   1ac42:	f0 e0       	ldi	r31, 0x00	; 0
   1ac44:	80 81       	ld	r24, Z
   1ac46:	80 64       	ori	r24, 0x40	; 64
   1ac48:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
   1ac4a:	08 95       	ret

0001ac4c <a2d_start_process()>:
_Z17a2d_start_processv():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   1ac4c:	30 91 0e 14 	lds	r19, 0x140E	; 0x80140e <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1ac50:	20 91 0f 14 	lds	r18, 0x140F	; 0x80140f <a2d_index>
   1ac54:	90 e0       	ldi	r25, 0x00	; 0
   1ac56:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   1ac58:	61 e0       	ldi	r22, 0x01	; 1
   1ac5a:	70 e0       	ldi	r23, 0x00	; 0
   1ac5c:	ab 01       	movw	r20, r22
   1ac5e:	08 2e       	mov	r0, r24
   1ac60:	01 c0       	rjmp	.+2      	; 0x1ac64 <a2d_start_process()+0x18>
   1ac62:	44 0f       	add	r20, r20
   1ac64:	0a 94       	dec	r0
   1ac66:	ea f7       	brpl	.-6      	; 0x1ac62 <a2d_start_process()+0x16>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   1ac68:	e3 2f       	mov	r30, r19
   1ac6a:	e4 23       	and	r30, r20
   1ac6c:	41 f0       	breq	.+16     	; 0x1ac7e <a2d_start_process()+0x32>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1ac6e:	e2 2f       	mov	r30, r18
   1ac70:	e4 23       	and	r30, r20
   1ac72:	29 f4       	brne	.+10     	; 0x1ac7e <a2d_start_process()+0x32>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   1ac74:	24 2b       	or	r18, r20
   1ac76:	20 93 0f 14 	sts	0x140F, r18	; 0x80140f <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   1ac7a:	0c 94 13 d6 	jmp	0x1ac26	; 0x1ac26 <a2d_start_first(unsigned char)>
   1ac7e:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67 (discriminator 2)
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   1ac80:	88 30       	cpi	r24, 0x08	; 8
   1ac82:	91 05       	cpc	r25, r1
   1ac84:	59 f7       	brne	.-42     	; 0x1ac5c <a2d_start_process()+0x10>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   1ac86:	10 92 0f 14 	sts	0x140F, r1	; 0x80140f <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:86
	//a2d_complete_funkce();
	}
}
   1ac8a:	08 95       	ret

0001ac8c <a2d_done()>:
_Z8a2d_donev():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:92
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t a2d_done(void)
{
  return a2d_index;
}
   1ac8c:	80 91 0f 14 	lds	r24, 0x140F	; 0x80140f <a2d_index>
   1ac90:	08 95       	ret

0001ac92 <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95

ISR(ADC_vect)
{
   1ac92:	1f 92       	push	r1
   1ac94:	0f 92       	push	r0
   1ac96:	0f b6       	in	r0, 0x3f	; 63
   1ac98:	0f 92       	push	r0
   1ac9a:	11 24       	eor	r1, r1
   1ac9c:	0b b6       	in	r0, 0x3b	; 59
   1ac9e:	0f 92       	push	r0
   1aca0:	2f 93       	push	r18
   1aca2:	3f 93       	push	r19
   1aca4:	4f 93       	push	r20
   1aca6:	5f 93       	push	r21
   1aca8:	6f 93       	push	r22
   1acaa:	7f 93       	push	r23
   1acac:	8f 93       	push	r24
   1acae:	9f 93       	push	r25
   1acb0:	af 93       	push	r26
   1acb2:	bf 93       	push	r27
   1acb4:	cf 93       	push	r28
   1acb6:	ef 93       	push	r30
   1acb8:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
   1acba:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
   1acbc:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
   1acc0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
   1acc4:	68 2f       	mov	r22, r24
   1acc6:	70 e0       	ldi	r23, 0x00	; 0
   1acc8:	76 2f       	mov	r23, r22
   1acca:	66 27       	eor	r22, r22
   1accc:	69 0f       	add	r22, r25
   1acce:	71 1d       	adc	r23, r1
   1acd0:	70 93 11 14 	sts	0x1411, r23	; 0x801411 <a2d_data+0x1>
   1acd4:	60 93 10 14 	sts	0x1410, r22	; 0x801410 <a2d_data>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   1acd8:	e0 91 0a 14 	lds	r30, 0x140A	; 0x80140a <a2d_interupt_func>
   1acdc:	f0 91 0b 14 	lds	r31, 0x140B	; 0x80140b <a2d_interupt_func+0x1>
   1ace0:	80 91 12 14 	lds	r24, 0x1412	; 0x801412 <a2d_input>
   1ace4:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
   1ace6:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
   1ace8:	ff 91       	pop	r31
   1acea:	ef 91       	pop	r30
   1acec:	cf 91       	pop	r28
   1acee:	bf 91       	pop	r27
   1acf0:	af 91       	pop	r26
   1acf2:	9f 91       	pop	r25
   1acf4:	8f 91       	pop	r24
   1acf6:	7f 91       	pop	r23
   1acf8:	6f 91       	pop	r22
   1acfa:	5f 91       	pop	r21
   1acfc:	4f 91       	pop	r20
   1acfe:	3f 91       	pop	r19
   1ad00:	2f 91       	pop	r18
   1ad02:	0f 90       	pop	r0
   1ad04:	0b be       	out	0x3b, r0	; 59
   1ad06:	0f 90       	pop	r0
   1ad08:	0f be       	out	0x3f, r0	; 63
   1ad0a:	0f 90       	pop	r0
   1ad0c:	1f 90       	pop	r1
   1ad0e:	18 95       	reti

0001ad10 <yield>:
__empty():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
   1ad10:	08 95       	ret

0001ad12 <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   1ad12:	1f 92       	push	r1
   1ad14:	0f 92       	push	r0
   1ad16:	0f b6       	in	r0, 0x3f	; 63
   1ad18:	0f 92       	push	r0
   1ad1a:	11 24       	eor	r1, r1
   1ad1c:	2f 93       	push	r18
   1ad1e:	3f 93       	push	r19
   1ad20:	8f 93       	push	r24
   1ad22:	9f 93       	push	r25
   1ad24:	af 93       	push	r26
   1ad26:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
   1ad28:	80 91 18 14 	lds	r24, 0x1418	; 0x801418 <timer0_millis>
   1ad2c:	90 91 19 14 	lds	r25, 0x1419	; 0x801419 <timer0_millis+0x1>
   1ad30:	a0 91 1a 14 	lds	r26, 0x141A	; 0x80141a <timer0_millis+0x2>
   1ad34:	b0 91 1b 14 	lds	r27, 0x141B	; 0x80141b <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
   1ad38:	30 91 17 14 	lds	r19, 0x1417	; 0x801417 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
   1ad3c:	23 e0       	ldi	r18, 0x03	; 3
   1ad3e:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
   1ad40:	2d 37       	cpi	r18, 0x7D	; 125
   1ad42:	68 f1       	brcs	.+90     	; 0x1ad9e <__vector_23+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
   1ad44:	26 e8       	ldi	r18, 0x86	; 134
   1ad46:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
   1ad48:	02 96       	adiw	r24, 0x02	; 2
   1ad4a:	a1 1d       	adc	r26, r1
   1ad4c:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
   1ad4e:	20 93 17 14 	sts	0x1417, r18	; 0x801417 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
   1ad52:	80 93 18 14 	sts	0x1418, r24	; 0x801418 <timer0_millis>
   1ad56:	90 93 19 14 	sts	0x1419, r25	; 0x801419 <timer0_millis+0x1>
   1ad5a:	a0 93 1a 14 	sts	0x141A, r26	; 0x80141a <timer0_millis+0x2>
   1ad5e:	b0 93 1b 14 	sts	0x141B, r27	; 0x80141b <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
   1ad62:	80 91 13 14 	lds	r24, 0x1413	; 0x801413 <timer0_overflow_count>
   1ad66:	90 91 14 14 	lds	r25, 0x1414	; 0x801414 <timer0_overflow_count+0x1>
   1ad6a:	a0 91 15 14 	lds	r26, 0x1415	; 0x801415 <timer0_overflow_count+0x2>
   1ad6e:	b0 91 16 14 	lds	r27, 0x1416	; 0x801416 <timer0_overflow_count+0x3>
   1ad72:	01 96       	adiw	r24, 0x01	; 1
   1ad74:	a1 1d       	adc	r26, r1
   1ad76:	b1 1d       	adc	r27, r1
   1ad78:	80 93 13 14 	sts	0x1413, r24	; 0x801413 <timer0_overflow_count>
   1ad7c:	90 93 14 14 	sts	0x1414, r25	; 0x801414 <timer0_overflow_count+0x1>
   1ad80:	a0 93 15 14 	sts	0x1415, r26	; 0x801415 <timer0_overflow_count+0x2>
   1ad84:	b0 93 16 14 	sts	0x1416, r27	; 0x801416 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:213
#endif
}
   1ad88:	bf 91       	pop	r27
   1ad8a:	af 91       	pop	r26
   1ad8c:	9f 91       	pop	r25
   1ad8e:	8f 91       	pop	r24
   1ad90:	3f 91       	pop	r19
   1ad92:	2f 91       	pop	r18
   1ad94:	0f 90       	pop	r0
   1ad96:	0f be       	out	0x3f, r0	; 63
   1ad98:	0f 90       	pop	r0
   1ad9a:	1f 90       	pop	r1
   1ad9c:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
   1ad9e:	01 96       	adiw	r24, 0x01	; 1
   1ada0:	a1 1d       	adc	r26, r1
   1ada2:	b1 1d       	adc	r27, r1
   1ada4:	d4 cf       	rjmp	.-88     	; 0x1ad4e <__vector_23+0x3c>

0001ada6 <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
   1ada6:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
   1ada8:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
   1adaa:	60 91 18 14 	lds	r22, 0x1418	; 0x801418 <timer0_millis>
   1adae:	70 91 19 14 	lds	r23, 0x1419	; 0x801419 <timer0_millis+0x1>
   1adb2:	80 91 1a 14 	lds	r24, 0x141A	; 0x80141a <timer0_millis+0x2>
   1adb6:	90 91 1b 14 	lds	r25, 0x141B	; 0x80141b <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
   1adba:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
   1adbc:	08 95       	ret

0001adbe <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
   1adbe:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
   1adc0:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
   1adc2:	80 91 13 14 	lds	r24, 0x1413	; 0x801413 <timer0_overflow_count>
   1adc6:	90 91 14 14 	lds	r25, 0x1414	; 0x801414 <timer0_overflow_count+0x1>
   1adca:	a0 91 15 14 	lds	r26, 0x1415	; 0x801415 <timer0_overflow_count+0x2>
   1adce:	b0 91 16 14 	lds	r27, 0x1416	; 0x801416 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
   1add2:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
   1add4:	a8 9b       	sbis	0x15, 0	; 21
   1add6:	05 c0       	rjmp	.+10     	; 0x1ade2 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
   1add8:	2f 3f       	cpi	r18, 0xFF	; 255
   1adda:	19 f0       	breq	.+6      	; 0x1ade2 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
   1addc:	01 96       	adiw	r24, 0x01	; 1
   1adde:	a1 1d       	adc	r26, r1
   1ade0:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
   1ade2:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
   1ade4:	ba 2f       	mov	r27, r26
   1ade6:	a9 2f       	mov	r26, r25
   1ade8:	98 2f       	mov	r25, r24
   1adea:	88 27       	eor	r24, r24
   1adec:	bc 01       	movw	r22, r24
   1adee:	cd 01       	movw	r24, r26
   1adf0:	62 0f       	add	r22, r18
   1adf2:	71 1d       	adc	r23, r1
   1adf4:	81 1d       	adc	r24, r1
   1adf6:	91 1d       	adc	r25, r1
   1adf8:	42 e0       	ldi	r20, 0x02	; 2
   1adfa:	66 0f       	add	r22, r22
   1adfc:	77 1f       	adc	r23, r23
   1adfe:	88 1f       	adc	r24, r24
   1ae00:	99 1f       	adc	r25, r25
   1ae02:	4a 95       	dec	r20
   1ae04:	d1 f7       	brne	.-12     	; 0x1adfa <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
   1ae06:	08 95       	ret

0001ae08 <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
   1ae08:	8f 92       	push	r8
   1ae0a:	9f 92       	push	r9
   1ae0c:	af 92       	push	r10
   1ae0e:	bf 92       	push	r11
   1ae10:	cf 92       	push	r12
   1ae12:	df 92       	push	r13
   1ae14:	ef 92       	push	r14
   1ae16:	ff 92       	push	r15
   1ae18:	6b 01       	movw	r12, r22
   1ae1a:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
   1ae1c:	0e 94 df d6 	call	0x1adbe	; 0x1adbe <micros>
   1ae20:	4b 01       	movw	r8, r22
   1ae22:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
   1ae24:	c1 14       	cp	r12, r1
   1ae26:	d1 04       	cpc	r13, r1
   1ae28:	e1 04       	cpc	r14, r1
   1ae2a:	f1 04       	cpc	r15, r1
   1ae2c:	e9 f0       	breq	.+58     	; 0x1ae68 <delay+0x60>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:400
    yield();
   1ae2e:	0e 94 88 d6 	call	0x1ad10	; 0x1ad10 <yield>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
   1ae32:	0e 94 df d6 	call	0x1adbe	; 0x1adbe <micros>
   1ae36:	68 19       	sub	r22, r8
   1ae38:	79 09       	sbc	r23, r9
   1ae3a:	8a 09       	sbc	r24, r10
   1ae3c:	9b 09       	sbc	r25, r11
   1ae3e:	68 3e       	cpi	r22, 0xE8	; 232
   1ae40:	73 40       	sbci	r23, 0x03	; 3
   1ae42:	81 05       	cpc	r24, r1
   1ae44:	91 05       	cpc	r25, r1
   1ae46:	70 f3       	brcs	.-36     	; 0x1ae24 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:402
      ms--;
   1ae48:	21 e0       	ldi	r18, 0x01	; 1
   1ae4a:	c2 1a       	sub	r12, r18
   1ae4c:	d1 08       	sbc	r13, r1
   1ae4e:	e1 08       	sbc	r14, r1
   1ae50:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
   1ae52:	88 ee       	ldi	r24, 0xE8	; 232
   1ae54:	88 0e       	add	r8, r24
   1ae56:	83 e0       	ldi	r24, 0x03	; 3
   1ae58:	98 1e       	adc	r9, r24
   1ae5a:	a1 1c       	adc	r10, r1
   1ae5c:	b1 1c       	adc	r11, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
   1ae5e:	c1 14       	cp	r12, r1
   1ae60:	d1 04       	cpc	r13, r1
   1ae62:	e1 04       	cpc	r14, r1
   1ae64:	f1 04       	cpc	r15, r1
   1ae66:	29 f7       	brne	.-54     	; 0x1ae32 <delay+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
   1ae68:	ff 90       	pop	r15
   1ae6a:	ef 90       	pop	r14
   1ae6c:	df 90       	pop	r13
   1ae6e:	cf 90       	pop	r12
   1ae70:	bf 90       	pop	r11
   1ae72:	af 90       	pop	r10
   1ae74:	9f 90       	pop	r9
   1ae76:	8f 90       	pop	r8
   1ae78:	08 95       	ret

0001ae7a <delayMicroseconds>:
delayMicroseconds():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
   1ae7a:	82 30       	cpi	r24, 0x02	; 2
   1ae7c:	91 05       	cpc	r25, r1
   1ae7e:	38 f0       	brcs	.+14     	; 0x1ae8e <delayMicroseconds+0x14>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
   1ae80:	88 0f       	add	r24, r24
   1ae82:	99 1f       	adc	r25, r25
   1ae84:	88 0f       	add	r24, r24
   1ae86:	99 1f       	adc	r25, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
   1ae88:	05 97       	sbiw	r24, 0x05	; 5
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
   1ae8a:	01 97       	sbiw	r24, 0x01	; 1
   1ae8c:	f1 f7       	brne	.-4      	; 0x1ae8a <delayMicroseconds+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
   1ae8e:	08 95       	ret

0001ae90 <init>:
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   1ae90:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   1ae92:	84 b5       	in	r24, 0x24	; 36
   1ae94:	83 60       	ori	r24, 0x03	; 3
   1ae96:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   1ae98:	85 b5       	in	r24, 0x25	; 37
   1ae9a:	83 60       	ori	r24, 0x03	; 3
   1ae9c:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   1ae9e:	ee e6       	ldi	r30, 0x6E	; 110
   1aea0:	f0 e0       	ldi	r31, 0x00	; 0
   1aea2:	80 81       	ld	r24, Z
   1aea4:	81 60       	ori	r24, 0x01	; 1
   1aea6:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   1aea8:	e1 e8       	ldi	r30, 0x81	; 129
   1aeaa:	f0 e0       	ldi	r31, 0x00	; 0
   1aeac:	82 e0       	ldi	r24, 0x02	; 2
   1aeae:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   1aeb0:	80 81       	ld	r24, Z
   1aeb2:	81 60       	ori	r24, 0x01	; 1
   1aeb4:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   1aeb6:	e0 e8       	ldi	r30, 0x80	; 128
   1aeb8:	f0 e0       	ldi	r31, 0x00	; 0
   1aeba:	80 81       	ld	r24, Z
   1aebc:	81 60       	ori	r24, 0x01	; 1
   1aebe:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   1aec0:	e1 eb       	ldi	r30, 0xB1	; 177
   1aec2:	f0 e0       	ldi	r31, 0x00	; 0
   1aec4:	80 81       	ld	r24, Z
   1aec6:	84 60       	ori	r24, 0x04	; 4
   1aec8:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   1aeca:	e0 eb       	ldi	r30, 0xB0	; 176
   1aecc:	f0 e0       	ldi	r31, 0x00	; 0
   1aece:	80 81       	ld	r24, Z
   1aed0:	81 60       	ori	r24, 0x01	; 1
   1aed2:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   1aed4:	e1 e9       	ldi	r30, 0x91	; 145
   1aed6:	f0 e0       	ldi	r31, 0x00	; 0
   1aed8:	80 81       	ld	r24, Z
   1aeda:	83 60       	ori	r24, 0x03	; 3
   1aedc:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   1aede:	e0 e9       	ldi	r30, 0x90	; 144
   1aee0:	f0 e0       	ldi	r31, 0x00	; 0
   1aee2:	80 81       	ld	r24, Z
   1aee4:	81 60       	ori	r24, 0x01	; 1
   1aee6:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   1aee8:	e1 ea       	ldi	r30, 0xA1	; 161
   1aeea:	f0 e0       	ldi	r31, 0x00	; 0
   1aeec:	80 81       	ld	r24, Z
   1aeee:	83 60       	ori	r24, 0x03	; 3
   1aef0:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   1aef2:	e0 ea       	ldi	r30, 0xA0	; 160
   1aef4:	f0 e0       	ldi	r31, 0x00	; 0
   1aef6:	80 81       	ld	r24, Z
   1aef8:	81 60       	ori	r24, 0x01	; 1
   1aefa:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   1aefc:	e1 e2       	ldi	r30, 0x21	; 33
   1aefe:	f1 e0       	ldi	r31, 0x01	; 1
   1af00:	80 81       	ld	r24, Z
   1af02:	83 60       	ori	r24, 0x03	; 3
   1af04:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   1af06:	e0 e2       	ldi	r30, 0x20	; 32
   1af08:	f1 e0       	ldi	r31, 0x01	; 1
   1af0a:	80 81       	ld	r24, Z
   1af0c:	81 60       	ori	r24, 0x01	; 1
   1af0e:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   1af10:	87 e8       	ldi	r24, 0x87	; 135
   1af12:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   1af16:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
   1af1a:	08 95       	ret

0001af1c <turnOffPWM>:
turnOffPWM():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   1af1c:	82 50       	subi	r24, 0x02	; 2
   1af1e:	82 31       	cpi	r24, 0x12	; 18
   1af20:	08 f0       	brcs	.+2      	; 0x1af24 <turnOffPWM+0x8>
   1af22:	5f c0       	rjmp	.+190    	; 0x1afe2 <turnOffPWM+0xc6>
   1af24:	e8 2f       	mov	r30, r24
   1af26:	f0 e0       	ldi	r31, 0x00	; 0
   1af28:	88 27       	eor	r24, r24
   1af2a:	e6 56       	subi	r30, 0x66	; 102
   1af2c:	f8 42       	sbci	r31, 0x28	; 40
   1af2e:	8f 4f       	sbci	r24, 0xFF	; 255
   1af30:	0c 94 6f de 	jmp	0x1bcde	; 0x1bcde <__tablejump2__>
   1af34:	ee d7       	rcall	.+4060   	; 0x1bf12 <free+0x7c>
   1af36:	f2 d7       	rcall	.+4068   	; 0x1bf1c <free+0x86>
   1af38:	ac d7       	rcall	.+3928   	; 0x1be92 <malloc+0x134>
   1af3a:	b2 d7       	rcall	.+3940   	; 0x1bea0 <free+0xa>
   1af3c:	b6 d7       	rcall	.+3948   	; 0x1beaa <free+0x14>
   1af3e:	f1 d7       	rcall	.+4066   	; 0x1bf22 <free+0x8c>
   1af40:	ba d7       	rcall	.+3956   	; 0x1beb6 <free+0x20>
   1af42:	c0 d7       	rcall	.+3968   	; 0x1bec4 <free+0x2e>
   1af44:	c4 d7       	rcall	.+3976   	; 0x1bece <free+0x38>
   1af46:	ca d7       	rcall	.+3988   	; 0x1bedc <free+0x46>
   1af48:	ce d7       	rcall	.+3996   	; 0x1bee6 <free+0x50>
   1af4a:	d2 d7       	rcall	.+4004   	; 0x1bef0 <free+0x5a>
   1af4c:	d8 d7       	rcall	.+4016   	; 0x1befe <free+0x68>
   1af4e:	dc d7       	rcall	.+4024   	; 0x1bf08 <free+0x72>
   1af50:	f1 d7       	rcall	.+4066   	; 0x1bf34 <free+0x9e>
   1af52:	e0 d7       	rcall	.+4032   	; 0x1bf14 <free+0x7e>
   1af54:	e6 d7       	rcall	.+4044   	; 0x1bf22 <free+0x8c>
   1af56:	ea d7       	rcall	.+4052   	; 0x1bf2c <free+0x96>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   1af58:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1af5c:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   1af5e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
   1af62:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   1af64:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1af68:	8f 7d       	andi	r24, 0xDF	; 223
   1af6a:	f9 cf       	rjmp	.-14     	; 0x1af5e <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   1af6c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1af70:	87 7f       	andi	r24, 0xF7	; 247
   1af72:	f5 cf       	rjmp	.-22     	; 0x1af5e <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   1af74:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1af78:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   1af7a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
   1af7e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   1af80:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1af84:	8f 7d       	andi	r24, 0xDF	; 223
   1af86:	f9 cf       	rjmp	.-14     	; 0x1af7a <turnOffPWM+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   1af88:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1af8c:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   1af8e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:127
        break;
   1af92:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   1af94:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1af98:	8f 7d       	andi	r24, 0xDF	; 223
   1af9a:	f9 cf       	rjmp	.-14     	; 0x1af8e <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   1af9c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1afa0:	87 7f       	andi	r24, 0xF7	; 247
   1afa2:	f5 cf       	rjmp	.-22     	; 0x1af8e <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   1afa4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1afa8:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   1afaa:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:144
        break;
   1afae:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   1afb0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1afb4:	8f 7d       	andi	r24, 0xDF	; 223
   1afb6:	f9 cf       	rjmp	.-14     	; 0x1afaa <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   1afb8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1afbc:	87 7f       	andi	r24, 0xF7	; 247
   1afbe:	f5 cf       	rjmp	.-22     	; 0x1afaa <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   1afc0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1afc4:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   1afc6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:162
        break;
   1afca:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   1afcc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1afd0:	8f 7d       	andi	r24, 0xDF	; 223
   1afd2:	f9 cf       	rjmp	.-14     	; 0x1afc6 <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   1afd4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1afd8:	87 7f       	andi	r24, 0xF7	; 247
   1afda:	f5 cf       	rjmp	.-22     	; 0x1afc6 <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   1afdc:	84 b5       	in	r24, 0x24	; 36
   1afde:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   1afe0:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   1afe2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   1afe4:	84 b5       	in	r24, 0x24	; 36
   1afe6:	8f 7d       	andi	r24, 0xDF	; 223
   1afe8:	fb cf       	rjmp	.-10     	; 0x1afe0 <turnOffPWM+0xc4>

0001afea <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   1afea:	cf 93       	push	r28
   1afec:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   1afee:	90 e0       	ldi	r25, 0x00	; 0
   1aff0:	fc 01       	movw	r30, r24
   1aff2:	eb 58       	subi	r30, 0x8B	; 139
   1aff4:	fb 49       	sbci	r31, 0x9B	; 155
   1aff6:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   1aff8:	85 55       	subi	r24, 0x55	; 85
   1affa:	9b 49       	sbci	r25, 0x9B	; 155
   1affc:	fc 01       	movw	r30, r24
   1affe:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   1b000:	88 23       	and	r24, r24
   1b002:	c9 f0       	breq	.+50     	; 0x1b036 <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   1b004:	90 e0       	ldi	r25, 0x00	; 0
   1b006:	88 0f       	add	r24, r24
   1b008:	99 1f       	adc	r25, r25
   1b00a:	fc 01       	movw	r30, r24
   1b00c:	ef 5f       	subi	r30, 0xFF	; 255
   1b00e:	fa 49       	sbci	r31, 0x9A	; 154
   1b010:	a5 91       	lpm	r26, Z+
   1b012:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   1b014:	fc 01       	movw	r30, r24
   1b016:	ef 50       	subi	r30, 0x0F	; 15
   1b018:	fb 49       	sbci	r31, 0x9B	; 155
   1b01a:	c5 91       	lpm	r28, Z+
   1b01c:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   1b01e:	61 11       	cpse	r22, r1
   1b020:	0d c0       	rjmp	.+26     	; 0x1b03c <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   1b022:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
   1b024:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   1b026:	8c 91       	ld	r24, X
   1b028:	20 95       	com	r18
   1b02a:	82 23       	and	r24, r18
   1b02c:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   1b02e:	88 81       	ld	r24, Y
   1b030:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   1b032:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   1b034:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   1b036:	df 91       	pop	r29
   1b038:	cf 91       	pop	r28
   1b03a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   1b03c:	62 30       	cpi	r22, 0x02	; 2
   1b03e:	51 f4       	brne	.+20     	; 0x1b054 <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   1b040:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
   1b042:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   1b044:	3c 91       	ld	r19, X
   1b046:	82 2f       	mov	r24, r18
   1b048:	80 95       	com	r24
   1b04a:	83 23       	and	r24, r19
   1b04c:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   1b04e:	e8 81       	ld	r30, Y
   1b050:	2e 2b       	or	r18, r30
   1b052:	ef cf       	rjmp	.-34     	; 0x1b032 <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   1b054:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
   1b056:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   1b058:	ec 91       	ld	r30, X
   1b05a:	2e 2b       	or	r18, r30
   1b05c:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   1b05e:	8f bf       	out	0x3f, r24	; 63
   1b060:	ea cf       	rjmp	.-44     	; 0x1b036 <pinMode+0x4c>

0001b062 <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   1b062:	1f 93       	push	r17
   1b064:	cf 93       	push	r28
   1b066:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   1b068:	28 2f       	mov	r18, r24
   1b06a:	30 e0       	ldi	r19, 0x00	; 0
   1b06c:	f9 01       	movw	r30, r18
   1b06e:	e1 5c       	subi	r30, 0xC1	; 193
   1b070:	fb 49       	sbci	r31, 0x9B	; 155
   1b072:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   1b074:	f9 01       	movw	r30, r18
   1b076:	eb 58       	subi	r30, 0x8B	; 139
   1b078:	fb 49       	sbci	r31, 0x9B	; 155
   1b07a:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   1b07c:	f9 01       	movw	r30, r18
   1b07e:	e5 55       	subi	r30, 0x55	; 85
   1b080:	fb 49       	sbci	r31, 0x9B	; 155
   1b082:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   1b084:	cc 23       	and	r28, r28
   1b086:	a9 f0       	breq	.+42     	; 0x1b0b2 <digitalWrite+0x50>
   1b088:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   1b08a:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
   1b08c:	0e 94 8e d7 	call	0x1af1c	; 0x1af1c <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   1b090:	ec 2f       	mov	r30, r28
   1b092:	f0 e0       	ldi	r31, 0x00	; 0
   1b094:	ee 0f       	add	r30, r30
   1b096:	ff 1f       	adc	r31, r31
   1b098:	ef 50       	subi	r30, 0x0F	; 15
   1b09a:	fb 49       	sbci	r31, 0x9B	; 155
   1b09c:	a5 91       	lpm	r26, Z+
   1b09e:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   1b0a0:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
   1b0a2:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   1b0a4:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   1b0a6:	11 11       	cpse	r17, r1
   1b0a8:	08 c0       	rjmp	.+16     	; 0x1b0ba <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   1b0aa:	d0 95       	com	r29
   1b0ac:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   1b0ae:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   1b0b0:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:212
}
   1b0b2:	df 91       	pop	r29
   1b0b4:	cf 91       	pop	r28
   1b0b6:	1f 91       	pop	r17
   1b0b8:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   1b0ba:	de 2b       	or	r29, r30
   1b0bc:	f8 cf       	rjmp	.-16     	; 0x1b0ae <digitalWrite+0x4c>

0001b0be <digitalRead>:
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   1b0be:	cf 93       	push	r28
   1b0c0:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
   1b0c2:	28 2f       	mov	r18, r24
   1b0c4:	30 e0       	ldi	r19, 0x00	; 0
   1b0c6:	f9 01       	movw	r30, r18
   1b0c8:	e1 5c       	subi	r30, 0xC1	; 193
   1b0ca:	fb 49       	sbci	r31, 0x9B	; 155
   1b0cc:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
   1b0ce:	f9 01       	movw	r30, r18
   1b0d0:	eb 58       	subi	r30, 0x8B	; 139
   1b0d2:	fb 49       	sbci	r31, 0x9B	; 155
   1b0d4:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
   1b0d6:	f9 01       	movw	r30, r18
   1b0d8:	e5 55       	subi	r30, 0x55	; 85
   1b0da:	fb 49       	sbci	r31, 0x9B	; 155
   1b0dc:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
   1b0de:	cc 23       	and	r28, r28
   1b0e0:	a1 f0       	breq	.+40     	; 0x1b10a <digitalRead+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   1b0e2:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
   1b0e4:	0e 94 8e d7 	call	0x1af1c	; 0x1af1c <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
   1b0e8:	ec 2f       	mov	r30, r28
   1b0ea:	f0 e0       	ldi	r31, 0x00	; 0
   1b0ec:	ee 0f       	add	r30, r30
   1b0ee:	ff 1f       	adc	r31, r31
   1b0f0:	ef 51       	subi	r30, 0x1F	; 31
   1b0f2:	fb 49       	sbci	r31, 0x9B	; 155
   1b0f4:	a5 91       	lpm	r26, Z+
   1b0f6:	b4 91       	lpm	r27, Z
   1b0f8:	ec 91       	ld	r30, X
   1b0fa:	ed 23       	and	r30, r29
   1b0fc:	81 e0       	ldi	r24, 0x01	; 1
   1b0fe:	90 e0       	ldi	r25, 0x00	; 0
   1b100:	09 f4       	brne	.+2      	; 0x1b104 <digitalRead+0x46>
   1b102:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
   1b104:	df 91       	pop	r29
   1b106:	cf 91       	pop	r28
   1b108:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
   1b10a:	80 e0       	ldi	r24, 0x00	; 0
   1b10c:	90 e0       	ldi	r25, 0x00	; 0
   1b10e:	fa cf       	rjmp	.-12     	; 0x1b104 <digitalRead+0x46>

0001b110 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
   1b110:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
   1b112:	91 8d       	ldd	r25, Z+25	; 0x19
   1b114:	22 8d       	ldd	r18, Z+26	; 0x1a
   1b116:	89 2f       	mov	r24, r25
   1b118:	90 e0       	ldi	r25, 0x00	; 0
   1b11a:	80 5c       	subi	r24, 0xC0	; 192
   1b11c:	9f 4f       	sbci	r25, 0xFF	; 255
   1b11e:	82 1b       	sub	r24, r18
   1b120:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
   1b122:	8f 73       	andi	r24, 0x3F	; 63
   1b124:	99 27       	eor	r25, r25
   1b126:	08 95       	ret

0001b128 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
   1b128:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
   1b12a:	91 8d       	ldd	r25, Z+25	; 0x19
   1b12c:	82 8d       	ldd	r24, Z+26	; 0x1a
   1b12e:	98 17       	cp	r25, r24
   1b130:	31 f0       	breq	.+12     	; 0x1b13e <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
   1b132:	82 8d       	ldd	r24, Z+26	; 0x1a
   1b134:	e8 0f       	add	r30, r24
   1b136:	f1 1d       	adc	r31, r1
   1b138:	85 8d       	ldd	r24, Z+29	; 0x1d
   1b13a:	90 e0       	ldi	r25, 0x00	; 0
   1b13c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   1b13e:	8f ef       	ldi	r24, 0xFF	; 255
   1b140:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
   1b142:	08 95       	ret

0001b144 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
   1b144:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
   1b146:	91 8d       	ldd	r25, Z+25	; 0x19
   1b148:	82 8d       	ldd	r24, Z+26	; 0x1a
   1b14a:	98 17       	cp	r25, r24
   1b14c:	61 f0       	breq	.+24     	; 0x1b166 <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
   1b14e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1b150:	ae 0f       	add	r26, r30
   1b152:	bf 2f       	mov	r27, r31
   1b154:	b1 1d       	adc	r27, r1
   1b156:	5d 96       	adiw	r26, 0x1d	; 29
   1b158:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
   1b15a:	92 8d       	ldd	r25, Z+26	; 0x1a
   1b15c:	9f 5f       	subi	r25, 0xFF	; 255
   1b15e:	9f 73       	andi	r25, 0x3F	; 63
   1b160:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
   1b162:	90 e0       	ldi	r25, 0x00	; 0
   1b164:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   1b166:	8f ef       	ldi	r24, 0xFF	; 255
   1b168:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
   1b16a:	08 95       	ret

0001b16c <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   1b16c:	fc 01       	movw	r30, r24
   1b16e:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
   1b170:	44 8d       	ldd	r20, Z+28	; 0x1c
   1b172:	25 2f       	mov	r18, r21
   1b174:	30 e0       	ldi	r19, 0x00	; 0
   1b176:	84 2f       	mov	r24, r20
   1b178:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   1b17a:	82 1b       	sub	r24, r18
   1b17c:	93 0b       	sbc	r25, r19
   1b17e:	54 17       	cp	r21, r20
   1b180:	10 f0       	brcs	.+4      	; 0x1b186 <HardwareSerial::availableForWrite()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
   1b182:	cf 96       	adiw	r24, 0x3f	; 63
   1b184:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
   1b186:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
   1b188:	08 95       	ret

0001b18a <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
   1b18a:	88 ec       	ldi	r24, 0xC8	; 200
   1b18c:	99 ed       	ldi	r25, 0xD9	; 217
   1b18e:	89 2b       	or	r24, r25
   1b190:	49 f0       	breq	.+18     	; 0x1b1a4 <serialEventRun()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
   1b192:	80 e0       	ldi	r24, 0x00	; 0
   1b194:	90 e0       	ldi	r25, 0x00	; 0
   1b196:	89 2b       	or	r24, r25
   1b198:	29 f0       	breq	.+10     	; 0x1b1a4 <serialEventRun()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
   1b19a:	0e 94 c8 d9 	call	0x1b390	; 0x1b390 <Serial0_available()>
   1b19e:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
   1b1a0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
   1b1a4:	80 e0       	ldi	r24, 0x00	; 0
   1b1a6:	90 e0       	ldi	r25, 0x00	; 0
   1b1a8:	89 2b       	or	r24, r25
   1b1aa:	49 f0       	breq	.+18     	; 0x1b1be <serialEventRun()+0x34>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
   1b1ac:	80 e0       	ldi	r24, 0x00	; 0
   1b1ae:	90 e0       	ldi	r25, 0x00	; 0
   1b1b0:	89 2b       	or	r24, r25
   1b1b2:	29 f0       	breq	.+10     	; 0x1b1be <serialEventRun()+0x34>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
   1b1b4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   1b1b8:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
   1b1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
   1b1be:	08 95       	ret

0001b1c0 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
   1b1c0:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
   1b1c2:	a4 8d       	ldd	r26, Z+28	; 0x1c
   1b1c4:	a8 0f       	add	r26, r24
   1b1c6:	b9 2f       	mov	r27, r25
   1b1c8:	b1 1d       	adc	r27, r1
   1b1ca:	a3 5a       	subi	r26, 0xA3	; 163
   1b1cc:	bf 4f       	sbci	r27, 0xFF	; 255
   1b1ce:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
   1b1d0:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b1d2:	90 e0       	ldi	r25, 0x00	; 0
   1b1d4:	01 96       	adiw	r24, 0x01	; 1
   1b1d6:	8f 73       	andi	r24, 0x3F	; 63
   1b1d8:	99 27       	eor	r25, r25
   1b1da:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
   1b1dc:	a6 89       	ldd	r26, Z+22	; 0x16
   1b1de:	b7 89       	ldd	r27, Z+23	; 0x17
   1b1e0:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
   1b1e2:	a0 89       	ldd	r26, Z+16	; 0x10
   1b1e4:	b1 89       	ldd	r27, Z+17	; 0x11
   1b1e6:	8c 91       	ld	r24, X
   1b1e8:	80 64       	ori	r24, 0x40	; 64
   1b1ea:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
   1b1ec:	93 8d       	ldd	r25, Z+27	; 0x1b
   1b1ee:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b1f0:	98 13       	cpse	r25, r24
   1b1f2:	06 c0       	rjmp	.+12     	; 0x1b200 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
   1b1f4:	02 88       	ldd	r0, Z+18	; 0x12
   1b1f6:	f3 89       	ldd	r31, Z+19	; 0x13
   1b1f8:	e0 2d       	mov	r30, r0
   1b1fa:	80 81       	ld	r24, Z
   1b1fc:	8f 7d       	andi	r24, 0xDF	; 223
   1b1fe:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
   1b200:	08 95       	ret

0001b202 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
   1b202:	cf 93       	push	r28
   1b204:	df 93       	push	r29
   1b206:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
   1b208:	88 8d       	ldd	r24, Y+24	; 0x18
   1b20a:	88 23       	and	r24, r24
   1b20c:	b9 f0       	breq	.+46     	; 0x1b23c <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
   1b20e:	aa 89       	ldd	r26, Y+18	; 0x12
   1b210:	bb 89       	ldd	r27, Y+19	; 0x13
   1b212:	e8 89       	ldd	r30, Y+16	; 0x10
   1b214:	f9 89       	ldd	r31, Y+17	; 0x11
   1b216:	8c 91       	ld	r24, X
   1b218:	85 fd       	sbrc	r24, 5
   1b21a:	03 c0       	rjmp	.+6      	; 0x1b222 <HardwareSerial::flush()+0x20>
   1b21c:	80 81       	ld	r24, Z
   1b21e:	86 fd       	sbrc	r24, 6
   1b220:	0d c0       	rjmp	.+26     	; 0x1b23c <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
   1b222:	0f b6       	in	r0, 0x3f	; 63
   1b224:	07 fc       	sbrc	r0, 7
   1b226:	f7 cf       	rjmp	.-18     	; 0x1b216 <HardwareSerial::flush()+0x14>
   1b228:	8c 91       	ld	r24, X
   1b22a:	85 ff       	sbrs	r24, 5
   1b22c:	f2 cf       	rjmp	.-28     	; 0x1b212 <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
   1b22e:	80 81       	ld	r24, Z
   1b230:	85 ff       	sbrs	r24, 5
   1b232:	ed cf       	rjmp	.-38     	; 0x1b20e <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
   1b234:	ce 01       	movw	r24, r28
   1b236:	0e 94 e0 d8 	call	0x1b1c0	; 0x1b1c0 <HardwareSerial::_tx_udr_empty_irq()>
   1b23a:	e9 cf       	rjmp	.-46     	; 0x1b20e <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
   1b23c:	df 91       	pop	r29
   1b23e:	cf 91       	pop	r28
   1b240:	08 95       	ret

0001b242 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
   1b242:	ef 92       	push	r14
   1b244:	ff 92       	push	r15
   1b246:	0f 93       	push	r16
   1b248:	1f 93       	push	r17
   1b24a:	cf 93       	push	r28
   1b24c:	df 93       	push	r29
   1b24e:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
   1b250:	81 e0       	ldi	r24, 0x01	; 1
   1b252:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
   1b254:	9b 8d       	ldd	r25, Y+27	; 0x1b
   1b256:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1b258:	98 13       	cpse	r25, r24
   1b25a:	16 c0       	rjmp	.+44     	; 0x1b288 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
   1b25c:	e8 89       	ldd	r30, Y+16	; 0x10
   1b25e:	f9 89       	ldd	r31, Y+17	; 0x11
   1b260:	80 81       	ld	r24, Z
   1b262:	85 ff       	sbrs	r24, 5
   1b264:	11 c0       	rjmp	.+34     	; 0x1b288 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
   1b266:	ee 89       	ldd	r30, Y+22	; 0x16
   1b268:	ff 89       	ldd	r31, Y+23	; 0x17
   1b26a:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
   1b26c:	e8 89       	ldd	r30, Y+16	; 0x10
   1b26e:	f9 89       	ldd	r31, Y+17	; 0x11
   1b270:	80 81       	ld	r24, Z
   1b272:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
   1b274:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
   1b276:	81 e0       	ldi	r24, 0x01	; 1
   1b278:	90 e0       	ldi	r25, 0x00	; 0
   1b27a:	df 91       	pop	r29
   1b27c:	cf 91       	pop	r28
   1b27e:	1f 91       	pop	r17
   1b280:	0f 91       	pop	r16
   1b282:	ff 90       	pop	r15
   1b284:	ef 90       	pop	r14
   1b286:	08 95       	ret
   1b288:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
   1b28a:	0b 8d       	ldd	r16, Y+27	; 0x1b
   1b28c:	10 e0       	ldi	r17, 0x00	; 0
   1b28e:	0f 5f       	subi	r16, 0xFF	; 255
   1b290:	1f 4f       	sbci	r17, 0xFF	; 255
   1b292:	0f 73       	andi	r16, 0x3F	; 63
   1b294:	11 27       	eor	r17, r17
   1b296:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
   1b298:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1b29a:	8e 11       	cpse	r24, r14
   1b29c:	0c c0       	rjmp	.+24     	; 0x1b2b6 <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
   1b29e:	0f b6       	in	r0, 0x3f	; 63
   1b2a0:	07 fc       	sbrc	r0, 7
   1b2a2:	fa cf       	rjmp	.-12     	; 0x1b298 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
   1b2a4:	e8 89       	ldd	r30, Y+16	; 0x10
   1b2a6:	f9 89       	ldd	r31, Y+17	; 0x11
   1b2a8:	80 81       	ld	r24, Z
   1b2aa:	85 ff       	sbrs	r24, 5
   1b2ac:	f5 cf       	rjmp	.-22     	; 0x1b298 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
   1b2ae:	ce 01       	movw	r24, r28
   1b2b0:	0e 94 e0 d8 	call	0x1b1c0	; 0x1b1c0 <HardwareSerial::_tx_udr_empty_irq()>
   1b2b4:	f1 cf       	rjmp	.-30     	; 0x1b298 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
   1b2b6:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1b2b8:	ec 0f       	add	r30, r28
   1b2ba:	fd 2f       	mov	r31, r29
   1b2bc:	f1 1d       	adc	r31, r1
   1b2be:	e3 5a       	subi	r30, 0xA3	; 163
   1b2c0:	ff 4f       	sbci	r31, 0xFF	; 255
   1b2c2:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
   1b2c4:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
   1b2c6:	ea 89       	ldd	r30, Y+18	; 0x12
   1b2c8:	fb 89       	ldd	r31, Y+19	; 0x13
   1b2ca:	80 81       	ld	r24, Z
   1b2cc:	80 62       	ori	r24, 0x20	; 32
   1b2ce:	d2 cf       	rjmp	.-92     	; 0x1b274 <HardwareSerial::write(unsigned char)+0x32>

0001b2d0 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   1b2d0:	1f 92       	push	r1
   1b2d2:	0f 92       	push	r0
   1b2d4:	0f b6       	in	r0, 0x3f	; 63
   1b2d6:	0f 92       	push	r0
   1b2d8:	11 24       	eor	r1, r1
   1b2da:	0b b6       	in	r0, 0x3b	; 59
   1b2dc:	0f 92       	push	r0
   1b2de:	2f 93       	push	r18
   1b2e0:	8f 93       	push	r24
   1b2e2:	9f 93       	push	r25
   1b2e4:	ef 93       	push	r30
   1b2e6:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   1b2e8:	e0 91 2c 14 	lds	r30, 0x142C	; 0x80142c <Serial+0x10>
   1b2ec:	f0 91 2d 14 	lds	r31, 0x142D	; 0x80142d <Serial+0x11>
   1b2f0:	80 81       	ld	r24, Z
   1b2f2:	e0 91 32 14 	lds	r30, 0x1432	; 0x801432 <Serial+0x16>
   1b2f6:	f0 91 33 14 	lds	r31, 0x1433	; 0x801433 <Serial+0x17>
   1b2fa:	82 fd       	sbrc	r24, 2
   1b2fc:	1d c0       	rjmp	.+58     	; 0x1b338 <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   1b2fe:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   1b300:	80 91 35 14 	lds	r24, 0x1435	; 0x801435 <Serial+0x19>
   1b304:	8f 5f       	subi	r24, 0xFF	; 255
   1b306:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   1b308:	20 91 36 14 	lds	r18, 0x1436	; 0x801436 <Serial+0x1a>
   1b30c:	82 17       	cp	r24, r18
   1b30e:	41 f0       	breq	.+16     	; 0x1b320 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   1b310:	e0 91 35 14 	lds	r30, 0x1435	; 0x801435 <Serial+0x19>
   1b314:	f0 e0       	ldi	r31, 0x00	; 0
   1b316:	e4 5e       	subi	r30, 0xE4	; 228
   1b318:	fb 4e       	sbci	r31, 0xEB	; 235
   1b31a:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   1b31c:	80 93 35 14 	sts	0x1435, r24	; 0x801435 <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   1b320:	ff 91       	pop	r31
   1b322:	ef 91       	pop	r30
   1b324:	9f 91       	pop	r25
   1b326:	8f 91       	pop	r24
   1b328:	2f 91       	pop	r18
   1b32a:	0f 90       	pop	r0
   1b32c:	0b be       	out	0x3b, r0	; 59
   1b32e:	0f 90       	pop	r0
   1b330:	0f be       	out	0x3f, r0	; 63
   1b332:	0f 90       	pop	r0
   1b334:	1f 90       	pop	r1
   1b336:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   1b338:	80 81       	ld	r24, Z
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
   1b33a:	f2 cf       	rjmp	.-28     	; 0x1b320 <__vector_25+0x50>

0001b33c <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   1b33c:	1f 92       	push	r1
   1b33e:	0f 92       	push	r0
   1b340:	0f b6       	in	r0, 0x3f	; 63
   1b342:	0f 92       	push	r0
   1b344:	11 24       	eor	r1, r1
   1b346:	0b b6       	in	r0, 0x3b	; 59
   1b348:	0f 92       	push	r0
   1b34a:	2f 93       	push	r18
   1b34c:	3f 93       	push	r19
   1b34e:	4f 93       	push	r20
   1b350:	5f 93       	push	r21
   1b352:	6f 93       	push	r22
   1b354:	7f 93       	push	r23
   1b356:	8f 93       	push	r24
   1b358:	9f 93       	push	r25
   1b35a:	af 93       	push	r26
   1b35c:	bf 93       	push	r27
   1b35e:	ef 93       	push	r30
   1b360:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   1b362:	8c e1       	ldi	r24, 0x1C	; 28
   1b364:	94 e1       	ldi	r25, 0x14	; 20
   1b366:	0e 94 e0 d8 	call	0x1b1c0	; 0x1b1c0 <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
   1b36a:	ff 91       	pop	r31
   1b36c:	ef 91       	pop	r30
   1b36e:	bf 91       	pop	r27
   1b370:	af 91       	pop	r26
   1b372:	9f 91       	pop	r25
   1b374:	8f 91       	pop	r24
   1b376:	7f 91       	pop	r23
   1b378:	6f 91       	pop	r22
   1b37a:	5f 91       	pop	r21
   1b37c:	4f 91       	pop	r20
   1b37e:	3f 91       	pop	r19
   1b380:	2f 91       	pop	r18
   1b382:	0f 90       	pop	r0
   1b384:	0b be       	out	0x3b, r0	; 59
   1b386:	0f 90       	pop	r0
   1b388:	0f be       	out	0x3f, r0	; 63
   1b38a:	0f 90       	pop	r0
   1b38c:	1f 90       	pop	r1
   1b38e:	18 95       	reti

0001b390 <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
   1b390:	8c e1       	ldi	r24, 0x1C	; 28
   1b392:	94 e1       	ldi	r25, 0x14	; 20
   1b394:	0e 94 88 d8 	call	0x1b110	; 0x1b110 <HardwareSerial::available()>
   1b398:	21 e0       	ldi	r18, 0x01	; 1
   1b39a:	89 2b       	or	r24, r25
   1b39c:	09 f4       	brne	.+2      	; 0x1b3a0 <Serial0_available()+0x10>
   1b39e:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
   1b3a0:	82 2f       	mov	r24, r18
   1b3a2:	08 95       	ret

0001b3a4 <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   1b3a4:	ec e1       	ldi	r30, 0x1C	; 28
   1b3a6:	f4 e1       	ldi	r31, 0x14	; 20
   1b3a8:	13 82       	std	Z+3, r1	; 0x03
   1b3aa:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1b3ac:	88 ee       	ldi	r24, 0xE8	; 232
   1b3ae:	93 e0       	ldi	r25, 0x03	; 3
   1b3b0:	a0 e0       	ldi	r26, 0x00	; 0
   1b3b2:	b0 e0       	ldi	r27, 0x00	; 0
   1b3b4:	84 83       	std	Z+4, r24	; 0x04
   1b3b6:	95 83       	std	Z+5, r25	; 0x05
   1b3b8:	a6 83       	std	Z+6, r26	; 0x06
   1b3ba:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
   1b3bc:	85 e3       	ldi	r24, 0x35	; 53
   1b3be:	99 e0       	ldi	r25, 0x09	; 9
   1b3c0:	91 83       	std	Z+1, r25	; 0x01
   1b3c2:	80 83       	st	Z, r24
   1b3c4:	85 ec       	ldi	r24, 0xC5	; 197
   1b3c6:	90 e0       	ldi	r25, 0x00	; 0
   1b3c8:	95 87       	std	Z+13, r25	; 0x0d
   1b3ca:	84 87       	std	Z+12, r24	; 0x0c
   1b3cc:	84 ec       	ldi	r24, 0xC4	; 196
   1b3ce:	90 e0       	ldi	r25, 0x00	; 0
   1b3d0:	97 87       	std	Z+15, r25	; 0x0f
   1b3d2:	86 87       	std	Z+14, r24	; 0x0e
   1b3d4:	80 ec       	ldi	r24, 0xC0	; 192
   1b3d6:	90 e0       	ldi	r25, 0x00	; 0
   1b3d8:	91 8b       	std	Z+17, r25	; 0x11
   1b3da:	80 8b       	std	Z+16, r24	; 0x10
   1b3dc:	81 ec       	ldi	r24, 0xC1	; 193
   1b3de:	90 e0       	ldi	r25, 0x00	; 0
   1b3e0:	93 8b       	std	Z+19, r25	; 0x13
   1b3e2:	82 8b       	std	Z+18, r24	; 0x12
   1b3e4:	82 ec       	ldi	r24, 0xC2	; 194
   1b3e6:	90 e0       	ldi	r25, 0x00	; 0
   1b3e8:	95 8b       	std	Z+21, r25	; 0x15
   1b3ea:	84 8b       	std	Z+20, r24	; 0x14
   1b3ec:	86 ec       	ldi	r24, 0xC6	; 198
   1b3ee:	90 e0       	ldi	r25, 0x00	; 0
   1b3f0:	97 8b       	std	Z+23, r25	; 0x17
   1b3f2:	86 8b       	std	Z+22, r24	; 0x16
   1b3f4:	11 8e       	std	Z+25, r1	; 0x19
   1b3f6:	12 8e       	std	Z+26, r1	; 0x1a
   1b3f8:	13 8e       	std	Z+27, r1	; 0x1b
   1b3fa:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
   1b3fc:	08 95       	ret

0001b3fe <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:83
    if (dots != 3) {
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
   1b3fe:	8f 92       	push	r8
   1b400:	9f 92       	push	r9
   1b402:	af 92       	push	r10
   1b404:	bf 92       	push	r11
   1b406:	cf 92       	push	r12
   1b408:	df 92       	push	r13
   1b40a:	ef 92       	push	r14
   1b40c:	ff 92       	push	r15
   1b40e:	0f 93       	push	r16
   1b410:	1f 93       	push	r17
   1b412:	cf 93       	push	r28
   1b414:	df 93       	push	r29
   1b416:	7c 01       	movw	r14, r24
   1b418:	8b 01       	movw	r16, r22
   1b41a:	4c 01       	movw	r8, r24
   1b41c:	82 e0       	ldi	r24, 0x02	; 2
   1b41e:	88 0e       	add	r8, r24
   1b420:	91 1c       	adc	r9, r1
   1b422:	57 01       	movw	r10, r14
   1b424:	e5 e0       	ldi	r30, 0x05	; 5
   1b426:	ae 0e       	add	r10, r30
   1b428:	b1 1c       	adc	r11, r1
   1b42a:	d0 e0       	ldi	r29, 0x00	; 0
   1b42c:	c0 e0       	ldi	r28, 0x00	; 0
   1b42e:	f4 01       	movw	r30, r8
   1b430:	61 91       	ld	r22, Z+
   1b432:	4f 01       	movw	r8, r30
   1b434:	4a e0       	ldi	r20, 0x0A	; 10
   1b436:	50 e0       	ldi	r21, 0x00	; 0
   1b438:	c8 01       	movw	r24, r16
   1b43a:	0e 94 08 db 	call	0x1b610	; 0x1b610 <Print::print(unsigned char, int)>
   1b43e:	6c 01       	movw	r12, r24
   1b440:	6e e2       	ldi	r22, 0x2E	; 46
   1b442:	c8 01       	movw	r24, r16
   1b444:	0e 94 a8 da 	call	0x1b550	; 0x1b550 <Print::print(char)>
   1b448:	8c 0d       	add	r24, r12
   1b44a:	9d 1d       	adc	r25, r13
   1b44c:	c8 0f       	add	r28, r24
   1b44e:	d9 1f       	adc	r29, r25
   1b450:	8a 14       	cp	r8, r10
   1b452:	9b 04       	cpc	r9, r11
   1b454:	61 f7       	brne	.-40     	; 0x1b42e <IPAddress::printTo(Print&) const+0x30>
   1b456:	4a e0       	ldi	r20, 0x0A	; 10
   1b458:	50 e0       	ldi	r21, 0x00	; 0
   1b45a:	f7 01       	movw	r30, r14
   1b45c:	65 81       	ldd	r22, Z+5	; 0x05
   1b45e:	c8 01       	movw	r24, r16
   1b460:	0e 94 08 db 	call	0x1b610	; 0x1b610 <Print::print(unsigned char, int)>
   1b464:	8c 0f       	add	r24, r28
   1b466:	9d 1f       	adc	r25, r29
   1b468:	df 91       	pop	r29
   1b46a:	cf 91       	pop	r28
   1b46c:	1f 91       	pop	r17
   1b46e:	0f 91       	pop	r16
   1b470:	ff 90       	pop	r15
   1b472:	ef 90       	pop	r14
   1b474:	df 90       	pop	r13
   1b476:	cf 90       	pop	r12
   1b478:	bf 90       	pop	r11
   1b47a:	af 90       	pop	r10
   1b47c:	9f 90       	pop	r9
   1b47e:	8f 90       	pop	r8
   1b480:	08 95       	ret

0001b482 <IPAddress::IPAddress()>:
_ZN9IPAddressC2Ev():
   1b482:	27 e4       	ldi	r18, 0x47	; 71
   1b484:	39 e0       	ldi	r19, 0x09	; 9
   1b486:	fc 01       	movw	r30, r24
   1b488:	31 83       	std	Z+1, r19	; 0x01
   1b48a:	20 83       	st	Z, r18
   1b48c:	12 82       	std	Z+2, r1	; 0x02
   1b48e:	13 82       	std	Z+3, r1	; 0x03
   1b490:	14 82       	std	Z+4, r1	; 0x04
   1b492:	15 82       	std	Z+5, r1	; 0x05
   1b494:	08 95       	ret

0001b496 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN9IPAddressC2Ehhhh():
   1b496:	0f 93       	push	r16
   1b498:	fc 01       	movw	r30, r24
   1b49a:	87 e4       	ldi	r24, 0x47	; 71
   1b49c:	99 e0       	ldi	r25, 0x09	; 9
   1b49e:	91 83       	std	Z+1, r25	; 0x01
   1b4a0:	80 83       	st	Z, r24
   1b4a2:	62 83       	std	Z+2, r22	; 0x02
   1b4a4:	43 83       	std	Z+3, r20	; 0x03
   1b4a6:	24 83       	std	Z+4, r18	; 0x04
   1b4a8:	05 83       	std	Z+5, r16	; 0x05
   1b4aa:	0f 91       	pop	r16
   1b4ac:	08 95       	ret

0001b4ae <IPAddress::IPAddress(unsigned char const*)>:
_ZN9IPAddressC2EPKh():
   1b4ae:	dc 01       	movw	r26, r24
   1b4b0:	87 e4       	ldi	r24, 0x47	; 71
   1b4b2:	99 e0       	ldi	r25, 0x09	; 9
   1b4b4:	8d 93       	st	X+, r24
   1b4b6:	9d 93       	st	X+, r25
   1b4b8:	84 e0       	ldi	r24, 0x04	; 4
   1b4ba:	fb 01       	movw	r30, r22
   1b4bc:	01 90       	ld	r0, Z+
   1b4be:	0d 92       	st	X+, r0
   1b4c0:	8a 95       	dec	r24
   1b4c2:	e1 f7       	brne	.-8      	; 0x1b4bc <IPAddress::IPAddress(unsigned char const*)+0xe>
   1b4c4:	08 95       	ret

0001b4c6 <IPAddress::operator=(unsigned char const*)>:
_ZN9IPAddressaSEPKh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:88
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   1b4c6:	dc 01       	movw	r26, r24
   1b4c8:	12 96       	adiw	r26, 0x02	; 2
   1b4ca:	24 e0       	ldi	r18, 0x04	; 4
   1b4cc:	fb 01       	movw	r30, r22
   1b4ce:	01 90       	ld	r0, Z+
   1b4d0:	0d 92       	st	X+, r0
   1b4d2:	2a 95       	dec	r18
   1b4d4:	e1 f7       	brne	.-8      	; 0x1b4ce <IPAddress::operator=(unsigned char const*)+0x8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:90
    return *this;
}
   1b4d6:	08 95       	ret

0001b4d8 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
   1b4d8:	af 92       	push	r10
   1b4da:	bf 92       	push	r11
   1b4dc:	cf 92       	push	r12
   1b4de:	df 92       	push	r13
   1b4e0:	ef 92       	push	r14
   1b4e2:	ff 92       	push	r15
   1b4e4:	0f 93       	push	r16
   1b4e6:	1f 93       	push	r17
   1b4e8:	cf 93       	push	r28
   1b4ea:	df 93       	push	r29
   1b4ec:	6c 01       	movw	r12, r24
   1b4ee:	7b 01       	movw	r14, r22
   1b4f0:	8b 01       	movw	r16, r22
   1b4f2:	04 0f       	add	r16, r20
   1b4f4:	15 1f       	adc	r17, r21
   1b4f6:	eb 01       	movw	r28, r22
   1b4f8:	5e 01       	movw	r10, r28
   1b4fa:	ae 18       	sub	r10, r14
   1b4fc:	bf 08       	sbc	r11, r15
   1b4fe:	c0 17       	cp	r28, r16
   1b500:	d1 07       	cpc	r29, r17
   1b502:	59 f0       	breq	.+22     	; 0x1b51a <Print::write(unsigned char const*, unsigned int)+0x42>
   1b504:	69 91       	ld	r22, Y+
   1b506:	d6 01       	movw	r26, r12
   1b508:	ed 91       	ld	r30, X+
   1b50a:	fc 91       	ld	r31, X
   1b50c:	01 90       	ld	r0, Z+
   1b50e:	f0 81       	ld	r31, Z
   1b510:	e0 2d       	mov	r30, r0
   1b512:	c6 01       	movw	r24, r12
   1b514:	19 95       	eicall
   1b516:	89 2b       	or	r24, r25
   1b518:	79 f7       	brne	.-34     	; 0x1b4f8 <Print::write(unsigned char const*, unsigned int)+0x20>
   1b51a:	c5 01       	movw	r24, r10
   1b51c:	df 91       	pop	r29
   1b51e:	cf 91       	pop	r28
   1b520:	1f 91       	pop	r17
   1b522:	0f 91       	pop	r16
   1b524:	ff 90       	pop	r15
   1b526:	ef 90       	pop	r14
   1b528:	df 90       	pop	r13
   1b52a:	cf 90       	pop	r12
   1b52c:	bf 90       	pop	r11
   1b52e:	af 90       	pop	r10
   1b530:	08 95       	ret

0001b532 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
   1b532:	fb 01       	movw	r30, r22
   1b534:	01 90       	ld	r0, Z+
   1b536:	00 20       	and	r0, r0
   1b538:	e9 f7       	brne	.-6      	; 0x1b534 <Print::write(char const*) [clone .part.2]+0x2>
   1b53a:	31 97       	sbiw	r30, 0x01	; 1
   1b53c:	af 01       	movw	r20, r30
   1b53e:	46 1b       	sub	r20, r22
   1b540:	57 0b       	sbc	r21, r23
   1b542:	dc 01       	movw	r26, r24
   1b544:	ed 91       	ld	r30, X+
   1b546:	fc 91       	ld	r31, X
   1b548:	02 80       	ldd	r0, Z+2	; 0x02
   1b54a:	f3 81       	ldd	r31, Z+3	; 0x03
   1b54c:	e0 2d       	mov	r30, r0
   1b54e:	19 94       	eijmp

0001b550 <Print::print(char)>:
_ZN5Print5printEc():
   1b550:	dc 01       	movw	r26, r24
   1b552:	ed 91       	ld	r30, X+
   1b554:	fc 91       	ld	r31, X
   1b556:	01 90       	ld	r0, Z+
   1b558:	f0 81       	ld	r31, Z
   1b55a:	e0 2d       	mov	r30, r0
   1b55c:	19 94       	eijmp

0001b55e <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
   1b55e:	8f 92       	push	r8
   1b560:	9f 92       	push	r9
   1b562:	af 92       	push	r10
   1b564:	bf 92       	push	r11
   1b566:	ef 92       	push	r14
   1b568:	ff 92       	push	r15
   1b56a:	0f 93       	push	r16
   1b56c:	1f 93       	push	r17
   1b56e:	cf 93       	push	r28
   1b570:	df 93       	push	r29
   1b572:	cd b7       	in	r28, 0x3d	; 61
   1b574:	de b7       	in	r29, 0x3e	; 62
   1b576:	a1 97       	sbiw	r28, 0x21	; 33
   1b578:	0f b6       	in	r0, 0x3f	; 63
   1b57a:	f8 94       	cli
   1b57c:	de bf       	out	0x3e, r29	; 62
   1b57e:	0f be       	out	0x3f, r0	; 63
   1b580:	cd bf       	out	0x3d, r28	; 61
   1b582:	7c 01       	movw	r14, r24
   1b584:	fa 01       	movw	r30, r20
   1b586:	cb 01       	movw	r24, r22
   1b588:	19 a2       	std	Y+33, r1	; 0x21
   1b58a:	22 30       	cpi	r18, 0x02	; 2
   1b58c:	08 f4       	brcc	.+2      	; 0x1b590 <Print::printNumber(unsigned long, unsigned char)+0x32>
   1b58e:	2a e0       	ldi	r18, 0x0A	; 10
   1b590:	8e 01       	movw	r16, r28
   1b592:	0f 5d       	subi	r16, 0xDF	; 223
   1b594:	1f 4f       	sbci	r17, 0xFF	; 255
   1b596:	82 2e       	mov	r8, r18
   1b598:	91 2c       	mov	r9, r1
   1b59a:	b1 2c       	mov	r11, r1
   1b59c:	a1 2c       	mov	r10, r1
   1b59e:	bf 01       	movw	r22, r30
   1b5a0:	a5 01       	movw	r20, r10
   1b5a2:	94 01       	movw	r18, r8
   1b5a4:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
   1b5a8:	f9 01       	movw	r30, r18
   1b5aa:	ca 01       	movw	r24, r20
   1b5ac:	6a 30       	cpi	r22, 0x0A	; 10
   1b5ae:	0c f5       	brge	.+66     	; 0x1b5f2 <Print::printNumber(unsigned long, unsigned char)+0x94>
   1b5b0:	60 5d       	subi	r22, 0xD0	; 208
   1b5b2:	d8 01       	movw	r26, r16
   1b5b4:	6e 93       	st	-X, r22
   1b5b6:	8d 01       	movw	r16, r26
   1b5b8:	23 2b       	or	r18, r19
   1b5ba:	24 2b       	or	r18, r20
   1b5bc:	25 2b       	or	r18, r21
   1b5be:	79 f7       	brne	.-34     	; 0x1b59e <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
   1b5c0:	90 e0       	ldi	r25, 0x00	; 0
   1b5c2:	80 e0       	ldi	r24, 0x00	; 0
   1b5c4:	10 97       	sbiw	r26, 0x00	; 0
   1b5c6:	21 f0       	breq	.+8      	; 0x1b5d0 <Print::printNumber(unsigned long, unsigned char)+0x72>
   1b5c8:	bd 01       	movw	r22, r26
   1b5ca:	c7 01       	movw	r24, r14
   1b5cc:	0e 94 99 da 	call	0x1b532	; 0x1b532 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
   1b5d0:	a1 96       	adiw	r28, 0x21	; 33
   1b5d2:	0f b6       	in	r0, 0x3f	; 63
   1b5d4:	f8 94       	cli
   1b5d6:	de bf       	out	0x3e, r29	; 62
   1b5d8:	0f be       	out	0x3f, r0	; 63
   1b5da:	cd bf       	out	0x3d, r28	; 61
   1b5dc:	df 91       	pop	r29
   1b5de:	cf 91       	pop	r28
   1b5e0:	1f 91       	pop	r17
   1b5e2:	0f 91       	pop	r16
   1b5e4:	ff 90       	pop	r15
   1b5e6:	ef 90       	pop	r14
   1b5e8:	bf 90       	pop	r11
   1b5ea:	af 90       	pop	r10
   1b5ec:	9f 90       	pop	r9
   1b5ee:	8f 90       	pop	r8
   1b5f0:	08 95       	ret
   1b5f2:	69 5c       	subi	r22, 0xC9	; 201
   1b5f4:	de cf       	rjmp	.-68     	; 0x1b5b2 <Print::printNumber(unsigned long, unsigned char)+0x54>

0001b5f6 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:105
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   1b5f6:	21 15       	cp	r18, r1
   1b5f8:	31 05       	cpc	r19, r1
   1b5fa:	41 f4       	brne	.+16     	; 0x1b60c <Print::print(unsigned long, int)+0x16>
   1b5fc:	dc 01       	movw	r26, r24
   1b5fe:	ed 91       	ld	r30, X+
   1b600:	fc 91       	ld	r31, X
   1b602:	01 90       	ld	r0, Z+
   1b604:	f0 81       	ld	r31, Z
   1b606:	e0 2d       	mov	r30, r0
   1b608:	64 2f       	mov	r22, r20
   1b60a:	19 94       	eijmp
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
  else return printNumber(n, base);
   1b60c:	0c 94 af da 	jmp	0x1b55e	; 0x1b55e <Print::printNumber(unsigned long, unsigned char)>

0001b610 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:73
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
   1b610:	9a 01       	movw	r18, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
  return print((unsigned long) b, base);
   1b612:	46 2f       	mov	r20, r22
   1b614:	50 e0       	ldi	r21, 0x00	; 0
   1b616:	70 e0       	ldi	r23, 0x00	; 0
   1b618:	60 e0       	ldi	r22, 0x00	; 0
   1b61a:	0c 94 fb da 	jmp	0x1b5f6	; 0x1b5f6 <Print::print(unsigned long, int)>

0001b61e <makeWord(unsigned char, unsigned char)>:
_Z8makeWordhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WMath.cpp:58
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
unsigned int makeWord(unsigned char h, unsigned char l) { return (h << 8) | l; }
   1b61e:	98 2f       	mov	r25, r24
   1b620:	86 2f       	mov	r24, r22
   1b622:	08 95       	ret

0001b624 <String::~String()>:
_ZN6StringD2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   1b624:	fc 01       	movw	r30, r24
   1b626:	80 81       	ld	r24, Z
   1b628:	91 81       	ldd	r25, Z+1	; 0x01
   1b62a:	0c 94 4b df 	jmp	0x1be96	; 0x1be96 <free>

0001b62e <String::invalidate()>:
_ZN6String10invalidateEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
   1b62e:	cf 93       	push	r28
   1b630:	df 93       	push	r29
   1b632:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
   1b634:	88 81       	ld	r24, Y
   1b636:	99 81       	ldd	r25, Y+1	; 0x01
   1b638:	00 97       	sbiw	r24, 0x00	; 0
   1b63a:	11 f0       	breq	.+4      	; 0x1b640 <String::invalidate()+0x12>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140 (discriminator 1)
   1b63c:	0e 94 4b df 	call	0x1be96	; 0x1be96 <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   1b640:	19 82       	std	Y+1, r1	; 0x01
   1b642:	18 82       	st	Y, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   1b644:	1d 82       	std	Y+5, r1	; 0x05
   1b646:	1c 82       	std	Y+4, r1	; 0x04
   1b648:	1b 82       	std	Y+3, r1	; 0x03
   1b64a:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:143
}
   1b64c:	df 91       	pop	r29
   1b64e:	cf 91       	pop	r28
   1b650:	08 95       	ret

0001b652 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:156
  }
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   1b652:	0f 93       	push	r16
   1b654:	1f 93       	push	r17
   1b656:	cf 93       	push	r28
   1b658:	df 93       	push	r29
   1b65a:	ec 01       	movw	r28, r24
   1b65c:	8b 01       	movw	r16, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:157
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   1b65e:	6f 5f       	subi	r22, 0xFF	; 255
   1b660:	7f 4f       	sbci	r23, 0xFF	; 255
   1b662:	88 81       	ld	r24, Y
   1b664:	99 81       	ldd	r25, Y+1	; 0x01
   1b666:	0e 94 d4 df 	call	0x1bfa8	; 0x1bfa8 <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   1b66a:	00 97       	sbiw	r24, 0x00	; 0
   1b66c:	51 f0       	breq	.+20     	; 0x1b682 <String::changeBuffer(unsigned int)+0x30>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   1b66e:	99 83       	std	Y+1, r25	; 0x01
   1b670:	88 83       	st	Y, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   1b672:	1b 83       	std	Y+3, r17	; 0x03
   1b674:	0a 83       	std	Y+2, r16	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:161
    return 1;
   1b676:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:164
  }
  return 0;
}
   1b678:	df 91       	pop	r29
   1b67a:	cf 91       	pop	r28
   1b67c:	1f 91       	pop	r17
   1b67e:	0f 91       	pop	r16
   1b680:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:163
  if (newbuffer) {
    buffer = newbuffer;
    capacity = maxStrLen;
    return 1;
  }
  return 0;
   1b682:	80 e0       	ldi	r24, 0x00	; 0
   1b684:	f9 cf       	rjmp	.-14     	; 0x1b678 <String::changeBuffer(unsigned int)+0x26>

0001b686 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:146
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   1b686:	cf 93       	push	r28
   1b688:	df 93       	push	r29
   1b68a:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
   1b68c:	88 81       	ld	r24, Y
   1b68e:	99 81       	ldd	r25, Y+1	; 0x01
   1b690:	89 2b       	or	r24, r25
   1b692:	49 f0       	breq	.+18     	; 0x1b6a6 <String::reserve(unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:147 (discriminator 1)
   1b694:	8a 81       	ldd	r24, Y+2	; 0x02
   1b696:	9b 81       	ldd	r25, Y+3	; 0x03
   1b698:	86 17       	cp	r24, r22
   1b69a:	97 07       	cpc	r25, r23
   1b69c:	20 f0       	brcs	.+8      	; 0x1b6a6 <String::reserve(unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   1b69e:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
   1b6a0:	df 91       	pop	r29
   1b6a2:	cf 91       	pop	r28
   1b6a4:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:148
}

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
   1b6a6:	ce 01       	movw	r24, r28
   1b6a8:	0e 94 29 db 	call	0x1b652	; 0x1b652 <String::changeBuffer(unsigned int)>
   1b6ac:	88 23       	and	r24, r24
   1b6ae:	c1 f3       	breq	.-16     	; 0x1b6a0 <String::reserve(unsigned int)+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149
    if (len == 0) buffer[0] = 0;
   1b6b0:	8c 81       	ldd	r24, Y+4	; 0x04
   1b6b2:	9d 81       	ldd	r25, Y+5	; 0x05
   1b6b4:	89 2b       	or	r24, r25
   1b6b6:	99 f7       	brne	.-26     	; 0x1b69e <String::reserve(unsigned int)+0x18>
   1b6b8:	e8 81       	ld	r30, Y
   1b6ba:	f9 81       	ldd	r31, Y+1	; 0x01
   1b6bc:	10 82       	st	Z, r1
   1b6be:	ef cf       	rjmp	.-34     	; 0x1b69e <String::reserve(unsigned int)+0x18>

0001b6c0 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   1b6c0:	ef 92       	push	r14
   1b6c2:	ff 92       	push	r15
   1b6c4:	0f 93       	push	r16
   1b6c6:	1f 93       	push	r17
   1b6c8:	cf 93       	push	r28
   1b6ca:	df 93       	push	r29
   1b6cc:	ec 01       	movw	r28, r24
   1b6ce:	7b 01       	movw	r14, r22
   1b6d0:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:172
  if (!reserve(length)) {
   1b6d2:	ba 01       	movw	r22, r20
   1b6d4:	0e 94 43 db 	call	0x1b686	; 0x1b686 <String::reserve(unsigned int)>
   1b6d8:	81 11       	cpse	r24, r1
   1b6da:	0b c0       	rjmp	.+22     	; 0x1b6f2 <String::copy(char const*, unsigned int)+0x32>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:173
    invalidate();
   1b6dc:	ce 01       	movw	r24, r28
   1b6de:	0e 94 17 db 	call	0x1b62e	; 0x1b62e <String::invalidate()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:179
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
   1b6e2:	ce 01       	movw	r24, r28
   1b6e4:	df 91       	pop	r29
   1b6e6:	cf 91       	pop	r28
   1b6e8:	1f 91       	pop	r17
   1b6ea:	0f 91       	pop	r16
   1b6ec:	ff 90       	pop	r15
   1b6ee:	ef 90       	pop	r14
   1b6f0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   1b6f2:	1d 83       	std	Y+5, r17	; 0x05
   1b6f4:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   1b6f6:	b7 01       	movw	r22, r14
   1b6f8:	88 81       	ld	r24, Y
   1b6fa:	99 81       	ldd	r25, Y+1	; 0x01
   1b6fc:	0e 94 26 e2 	call	0x1c44c	; 0x1c44c <strcpy>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:178
  return *this;
   1b700:	f0 cf       	rjmp	.-32     	; 0x1b6e2 <String::copy(char const*, unsigned int)+0x22>

0001b702 <String::String(char const*)>:
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   1b702:	fc 01       	movw	r30, r24
   1b704:	11 82       	std	Z+1, r1	; 0x01
   1b706:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   1b708:	13 82       	std	Z+3, r1	; 0x03
   1b70a:	12 82       	std	Z+2, r1	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   1b70c:	15 82       	std	Z+5, r1	; 0x05
   1b70e:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   1b710:	61 15       	cp	r22, r1
   1b712:	71 05       	cpc	r23, r1
   1b714:	51 f0       	breq	.+20     	; 0x1b72a <String::String(char const*)+0x28>
   1b716:	fb 01       	movw	r30, r22
   1b718:	01 90       	ld	r0, Z+
   1b71a:	00 20       	and	r0, r0
   1b71c:	e9 f7       	brne	.-6      	; 0x1b718 <String::String(char const*)+0x16>
   1b71e:	31 97       	sbiw	r30, 0x01	; 1
   1b720:	af 01       	movw	r20, r30
   1b722:	46 1b       	sub	r20, r22
   1b724:	57 0b       	sbc	r21, r23
   1b726:	0c 94 60 db 	jmp	0x1b6c0	; 0x1b6c0 <String::copy(char const*, unsigned int)>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:32
}
   1b72a:	08 95       	ret

0001b72c <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   1b72c:	0e 94 b8 e1 	call	0x1c370	; 0x1c370 <abort>

0001b730 <initVariant>:
initVariant():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
   1b730:	08 95       	ret

0001b732 <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
   1b732:	0e 94 48 d7 	call	0x1ae90	; 0x1ae90 <init>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
   1b736:	0e 94 98 db 	call	0x1b730	; 0x1b730 <initVariant>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   1b73a:	0e 94 4f 7a 	call	0xf49e	; 0xf49e <setup>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   1b73e:	c5 ec       	ldi	r28, 0xC5	; 197
   1b740:	d8 ed       	ldi	r29, 0xD8	; 216
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
   1b742:	0e 94 bd 82 	call	0x1057a	; 0x1057a <loop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
   1b746:	20 97       	sbiw	r28, 0x00	; 0
   1b748:	e1 f3       	breq	.-8      	; 0x1b742 <main+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
   1b74a:	0e 94 c5 d8 	call	0x1b18a	; 0x1b18a <serialEventRun()>
   1b74e:	f9 cf       	rjmp	.-14     	; 0x1b742 <main+0x10>

0001b750 <operator new(unsigned int)>:
_Znwj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   1b750:	0c 94 af de 	jmp	0x1bd5e	; 0x1bd5e <malloc>

0001b754 <operator new[](unsigned int)>:
_Znaj():
   1b754:	0c 94 af de 	jmp	0x1bd5e	; 0x1bd5e <malloc>

0001b758 <__subsf3>:
__subsf3():
   1b758:	50 58       	subi	r21, 0x80	; 128

0001b75a <__addsf3>:
   1b75a:	bb 27       	eor	r27, r27
   1b75c:	aa 27       	eor	r26, r26
   1b75e:	0e 94 c4 db 	call	0x1b788	; 0x1b788 <__addsf3x>
   1b762:	0c 94 3e dd 	jmp	0x1ba7c	; 0x1ba7c <__fp_round>
__addsf3():
   1b766:	0e 94 30 dd 	call	0x1ba60	; 0x1ba60 <__fp_pscA>
   1b76a:	38 f0       	brcs	.+14     	; 0x1b77a <__addsf3+0x20>
   1b76c:	0e 94 37 dd 	call	0x1ba6e	; 0x1ba6e <__fp_pscB>
   1b770:	20 f0       	brcs	.+8      	; 0x1b77a <__addsf3+0x20>
   1b772:	39 f4       	brne	.+14     	; 0x1b782 <__addsf3+0x28>
   1b774:	9f 3f       	cpi	r25, 0xFF	; 255
   1b776:	19 f4       	brne	.+6      	; 0x1b77e <__addsf3+0x24>
   1b778:	26 f4       	brtc	.+8      	; 0x1b782 <__addsf3+0x28>
   1b77a:	0c 94 2d dd 	jmp	0x1ba5a	; 0x1ba5a <__fp_nan>
   1b77e:	0e f4       	brtc	.+2      	; 0x1b782 <__addsf3+0x28>
   1b780:	e0 95       	com	r30
   1b782:	e7 fb       	bst	r30, 7
   1b784:	0c 94 27 dd 	jmp	0x1ba4e	; 0x1ba4e <__fp_inf>

0001b788 <__addsf3x>:
__addsf3x():
   1b788:	e9 2f       	mov	r30, r25
   1b78a:	0e 94 4f dd 	call	0x1ba9e	; 0x1ba9e <__fp_split3>
   1b78e:	58 f3       	brcs	.-42     	; 0x1b766 <__addsf3+0xc>
   1b790:	ba 17       	cp	r27, r26
   1b792:	62 07       	cpc	r22, r18
   1b794:	73 07       	cpc	r23, r19
   1b796:	84 07       	cpc	r24, r20
   1b798:	95 07       	cpc	r25, r21
   1b79a:	20 f0       	brcs	.+8      	; 0x1b7a4 <__addsf3x+0x1c>
   1b79c:	79 f4       	brne	.+30     	; 0x1b7bc <__addsf3x+0x34>
   1b79e:	a6 f5       	brtc	.+104    	; 0x1b808 <__addsf3x+0x80>
   1b7a0:	0c 94 71 dd 	jmp	0x1bae2	; 0x1bae2 <__fp_zero>
   1b7a4:	0e f4       	brtc	.+2      	; 0x1b7a8 <__addsf3x+0x20>
   1b7a6:	e0 95       	com	r30
   1b7a8:	0b 2e       	mov	r0, r27
   1b7aa:	ba 2f       	mov	r27, r26
   1b7ac:	a0 2d       	mov	r26, r0
   1b7ae:	0b 01       	movw	r0, r22
   1b7b0:	b9 01       	movw	r22, r18
   1b7b2:	90 01       	movw	r18, r0
   1b7b4:	0c 01       	movw	r0, r24
   1b7b6:	ca 01       	movw	r24, r20
   1b7b8:	a0 01       	movw	r20, r0
   1b7ba:	11 24       	eor	r1, r1
   1b7bc:	ff 27       	eor	r31, r31
   1b7be:	59 1b       	sub	r21, r25
   1b7c0:	99 f0       	breq	.+38     	; 0x1b7e8 <__addsf3x+0x60>
   1b7c2:	59 3f       	cpi	r21, 0xF9	; 249
   1b7c4:	50 f4       	brcc	.+20     	; 0x1b7da <__addsf3x+0x52>
   1b7c6:	50 3e       	cpi	r21, 0xE0	; 224
   1b7c8:	68 f1       	brcs	.+90     	; 0x1b824 <__addsf3x+0x9c>
   1b7ca:	1a 16       	cp	r1, r26
   1b7cc:	f0 40       	sbci	r31, 0x00	; 0
   1b7ce:	a2 2f       	mov	r26, r18
   1b7d0:	23 2f       	mov	r18, r19
   1b7d2:	34 2f       	mov	r19, r20
   1b7d4:	44 27       	eor	r20, r20
   1b7d6:	58 5f       	subi	r21, 0xF8	; 248
   1b7d8:	f3 cf       	rjmp	.-26     	; 0x1b7c0 <__addsf3x+0x38>
   1b7da:	46 95       	lsr	r20
   1b7dc:	37 95       	ror	r19
   1b7de:	27 95       	ror	r18
   1b7e0:	a7 95       	ror	r26
   1b7e2:	f0 40       	sbci	r31, 0x00	; 0
   1b7e4:	53 95       	inc	r21
   1b7e6:	c9 f7       	brne	.-14     	; 0x1b7da <__addsf3x+0x52>
   1b7e8:	7e f4       	brtc	.+30     	; 0x1b808 <__addsf3x+0x80>
   1b7ea:	1f 16       	cp	r1, r31
   1b7ec:	ba 0b       	sbc	r27, r26
   1b7ee:	62 0b       	sbc	r22, r18
   1b7f0:	73 0b       	sbc	r23, r19
   1b7f2:	84 0b       	sbc	r24, r20
   1b7f4:	ba f0       	brmi	.+46     	; 0x1b824 <__addsf3x+0x9c>
   1b7f6:	91 50       	subi	r25, 0x01	; 1
   1b7f8:	a1 f0       	breq	.+40     	; 0x1b822 <__addsf3x+0x9a>
   1b7fa:	ff 0f       	add	r31, r31
   1b7fc:	bb 1f       	adc	r27, r27
   1b7fe:	66 1f       	adc	r22, r22
   1b800:	77 1f       	adc	r23, r23
   1b802:	88 1f       	adc	r24, r24
   1b804:	c2 f7       	brpl	.-16     	; 0x1b7f6 <__addsf3x+0x6e>
   1b806:	0e c0       	rjmp	.+28     	; 0x1b824 <__addsf3x+0x9c>
   1b808:	ba 0f       	add	r27, r26
   1b80a:	62 1f       	adc	r22, r18
   1b80c:	73 1f       	adc	r23, r19
   1b80e:	84 1f       	adc	r24, r20
   1b810:	48 f4       	brcc	.+18     	; 0x1b824 <__addsf3x+0x9c>
   1b812:	87 95       	ror	r24
   1b814:	77 95       	ror	r23
   1b816:	67 95       	ror	r22
   1b818:	b7 95       	ror	r27
   1b81a:	f7 95       	ror	r31
   1b81c:	9e 3f       	cpi	r25, 0xFE	; 254
   1b81e:	08 f0       	brcs	.+2      	; 0x1b822 <__addsf3x+0x9a>
   1b820:	b0 cf       	rjmp	.-160    	; 0x1b782 <__addsf3+0x28>
   1b822:	93 95       	inc	r25
   1b824:	88 0f       	add	r24, r24
   1b826:	08 f0       	brcs	.+2      	; 0x1b82a <__addsf3x+0xa2>
   1b828:	99 27       	eor	r25, r25
   1b82a:	ee 0f       	add	r30, r30
   1b82c:	97 95       	ror	r25
   1b82e:	87 95       	ror	r24
   1b830:	08 95       	ret

0001b832 <__cmpsf2>:
   1b832:	0e 94 03 dd 	call	0x1ba06	; 0x1ba06 <__fp_cmp>
   1b836:	08 f4       	brcc	.+2      	; 0x1b83a <__cmpsf2+0x8>
   1b838:	81 e0       	ldi	r24, 0x01	; 1
   1b83a:	08 95       	ret

0001b83c <__divsf3>:
   1b83c:	0e 94 32 dc 	call	0x1b864	; 0x1b864 <__divsf3x>
   1b840:	0c 94 3e dd 	jmp	0x1ba7c	; 0x1ba7c <__fp_round>
   1b844:	0e 94 37 dd 	call	0x1ba6e	; 0x1ba6e <__fp_pscB>
   1b848:	58 f0       	brcs	.+22     	; 0x1b860 <__divsf3+0x24>
   1b84a:	0e 94 30 dd 	call	0x1ba60	; 0x1ba60 <__fp_pscA>
   1b84e:	40 f0       	brcs	.+16     	; 0x1b860 <__divsf3+0x24>
   1b850:	29 f4       	brne	.+10     	; 0x1b85c <__divsf3+0x20>
   1b852:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
   1b854:	29 f0       	breq	.+10     	; 0x1b860 <__divsf3+0x24>
   1b856:	0c 94 27 dd 	jmp	0x1ba4e	; 0x1ba4e <__fp_inf>
   1b85a:	51 11       	cpse	r21, r1
   1b85c:	0c 94 72 dd 	jmp	0x1bae4	; 0x1bae4 <__fp_szero>
   1b860:	0c 94 2d dd 	jmp	0x1ba5a	; 0x1ba5a <__fp_nan>

0001b864 <__divsf3x>:
__divsf3x():
   1b864:	0e 94 4f dd 	call	0x1ba9e	; 0x1ba9e <__fp_split3>
   1b868:	68 f3       	brcs	.-38     	; 0x1b844 <__divsf3+0x8>

0001b86a <__divsf3_pse>:
   1b86a:	99 23       	and	r25, r25
   1b86c:	b1 f3       	breq	.-20     	; 0x1b85a <__divsf3+0x1e>
   1b86e:	55 23       	and	r21, r21
   1b870:	91 f3       	breq	.-28     	; 0x1b856 <__divsf3+0x1a>
   1b872:	95 1b       	sub	r25, r21
   1b874:	55 0b       	sbc	r21, r21
   1b876:	bb 27       	eor	r27, r27
   1b878:	aa 27       	eor	r26, r26
   1b87a:	62 17       	cp	r22, r18
   1b87c:	73 07       	cpc	r23, r19
   1b87e:	84 07       	cpc	r24, r20
   1b880:	38 f0       	brcs	.+14     	; 0x1b890 <__divsf3_pse+0x26>
   1b882:	9f 5f       	subi	r25, 0xFF	; 255
   1b884:	5f 4f       	sbci	r21, 0xFF	; 255
   1b886:	22 0f       	add	r18, r18
   1b888:	33 1f       	adc	r19, r19
   1b88a:	44 1f       	adc	r20, r20
   1b88c:	aa 1f       	adc	r26, r26
   1b88e:	a9 f3       	breq	.-22     	; 0x1b87a <__divsf3_pse+0x10>
   1b890:	35 d0       	rcall	.+106    	; 0x1b8fc <__divsf3_pse+0x92>
   1b892:	0e 2e       	mov	r0, r30
   1b894:	3a f0       	brmi	.+14     	; 0x1b8a4 <__divsf3_pse+0x3a>
   1b896:	e0 e8       	ldi	r30, 0x80	; 128
   1b898:	32 d0       	rcall	.+100    	; 0x1b8fe <__divsf3_pse+0x94>
   1b89a:	91 50       	subi	r25, 0x01	; 1
   1b89c:	50 40       	sbci	r21, 0x00	; 0
   1b89e:	e6 95       	lsr	r30
   1b8a0:	00 1c       	adc	r0, r0
   1b8a2:	ca f7       	brpl	.-14     	; 0x1b896 <__divsf3_pse+0x2c>
   1b8a4:	2b d0       	rcall	.+86     	; 0x1b8fc <__divsf3_pse+0x92>
   1b8a6:	fe 2f       	mov	r31, r30
   1b8a8:	29 d0       	rcall	.+82     	; 0x1b8fc <__divsf3_pse+0x92>
   1b8aa:	66 0f       	add	r22, r22
   1b8ac:	77 1f       	adc	r23, r23
   1b8ae:	88 1f       	adc	r24, r24
   1b8b0:	bb 1f       	adc	r27, r27
   1b8b2:	26 17       	cp	r18, r22
   1b8b4:	37 07       	cpc	r19, r23
   1b8b6:	48 07       	cpc	r20, r24
   1b8b8:	ab 07       	cpc	r26, r27
   1b8ba:	b0 e8       	ldi	r27, 0x80	; 128
   1b8bc:	09 f0       	breq	.+2      	; 0x1b8c0 <__divsf3_pse+0x56>
   1b8be:	bb 0b       	sbc	r27, r27
   1b8c0:	80 2d       	mov	r24, r0
   1b8c2:	bf 01       	movw	r22, r30
   1b8c4:	ff 27       	eor	r31, r31
   1b8c6:	93 58       	subi	r25, 0x83	; 131
   1b8c8:	5f 4f       	sbci	r21, 0xFF	; 255
   1b8ca:	3a f0       	brmi	.+14     	; 0x1b8da <__divsf3_pse+0x70>
   1b8cc:	9e 3f       	cpi	r25, 0xFE	; 254
   1b8ce:	51 05       	cpc	r21, r1
   1b8d0:	78 f0       	brcs	.+30     	; 0x1b8f0 <__divsf3_pse+0x86>
   1b8d2:	0c 94 27 dd 	jmp	0x1ba4e	; 0x1ba4e <__fp_inf>
   1b8d6:	0c 94 72 dd 	jmp	0x1bae4	; 0x1bae4 <__fp_szero>
   1b8da:	5f 3f       	cpi	r21, 0xFF	; 255
   1b8dc:	e4 f3       	brlt	.-8      	; 0x1b8d6 <__divsf3_pse+0x6c>
   1b8de:	98 3e       	cpi	r25, 0xE8	; 232
   1b8e0:	d4 f3       	brlt	.-12     	; 0x1b8d6 <__divsf3_pse+0x6c>
   1b8e2:	86 95       	lsr	r24
   1b8e4:	77 95       	ror	r23
   1b8e6:	67 95       	ror	r22
   1b8e8:	b7 95       	ror	r27
   1b8ea:	f7 95       	ror	r31
   1b8ec:	9f 5f       	subi	r25, 0xFF	; 255
   1b8ee:	c9 f7       	brne	.-14     	; 0x1b8e2 <__divsf3_pse+0x78>
   1b8f0:	88 0f       	add	r24, r24
   1b8f2:	91 1d       	adc	r25, r1
   1b8f4:	96 95       	lsr	r25
   1b8f6:	87 95       	ror	r24
   1b8f8:	97 f9       	bld	r25, 7
   1b8fa:	08 95       	ret
   1b8fc:	e1 e0       	ldi	r30, 0x01	; 1
   1b8fe:	66 0f       	add	r22, r22
   1b900:	77 1f       	adc	r23, r23
   1b902:	88 1f       	adc	r24, r24
   1b904:	bb 1f       	adc	r27, r27
   1b906:	62 17       	cp	r22, r18
   1b908:	73 07       	cpc	r23, r19
   1b90a:	84 07       	cpc	r24, r20
   1b90c:	ba 07       	cpc	r27, r26
   1b90e:	20 f0       	brcs	.+8      	; 0x1b918 <__divsf3_pse+0xae>
   1b910:	62 1b       	sub	r22, r18
   1b912:	73 0b       	sbc	r23, r19
   1b914:	84 0b       	sbc	r24, r20
   1b916:	ba 0b       	sbc	r27, r26
   1b918:	ee 1f       	adc	r30, r30
   1b91a:	88 f7       	brcc	.-30     	; 0x1b8fe <__divsf3_pse+0x94>
   1b91c:	e0 95       	com	r30
   1b91e:	08 95       	ret

0001b920 <__fixsfsi>:
   1b920:	0e 94 97 dc 	call	0x1b92e	; 0x1b92e <__fixunssfsi>
   1b924:	68 94       	set
   1b926:	b1 11       	cpse	r27, r1
   1b928:	0c 94 72 dd 	jmp	0x1bae4	; 0x1bae4 <__fp_szero>
   1b92c:	08 95       	ret

0001b92e <__fixunssfsi>:
   1b92e:	0e 94 57 dd 	call	0x1baae	; 0x1baae <__fp_splitA>
   1b932:	88 f0       	brcs	.+34     	; 0x1b956 <__fixunssfsi+0x28>
   1b934:	9f 57       	subi	r25, 0x7F	; 127
   1b936:	98 f0       	brcs	.+38     	; 0x1b95e <__fixunssfsi+0x30>
   1b938:	b9 2f       	mov	r27, r25
   1b93a:	99 27       	eor	r25, r25
   1b93c:	b7 51       	subi	r27, 0x17	; 23
   1b93e:	b0 f0       	brcs	.+44     	; 0x1b96c <__fixunssfsi+0x3e>
__fixunssfsi():
   1b940:	e1 f0       	breq	.+56     	; 0x1b97a <__fixunssfsi+0x4c>
   1b942:	66 0f       	add	r22, r22
   1b944:	77 1f       	adc	r23, r23
   1b946:	88 1f       	adc	r24, r24
   1b948:	99 1f       	adc	r25, r25
   1b94a:	1a f0       	brmi	.+6      	; 0x1b952 <__fixunssfsi+0x24>
   1b94c:	ba 95       	dec	r27
   1b94e:	c9 f7       	brne	.-14     	; 0x1b942 <__fixunssfsi+0x14>
   1b950:	14 c0       	rjmp	.+40     	; 0x1b97a <__fixunssfsi+0x4c>
   1b952:	b1 30       	cpi	r27, 0x01	; 1
   1b954:	91 f0       	breq	.+36     	; 0x1b97a <__fixunssfsi+0x4c>
   1b956:	0e 94 71 dd 	call	0x1bae2	; 0x1bae2 <__fp_zero>
   1b95a:	b1 e0       	ldi	r27, 0x01	; 1
   1b95c:	08 95       	ret
   1b95e:	0c 94 71 dd 	jmp	0x1bae2	; 0x1bae2 <__fp_zero>
   1b962:	67 2f       	mov	r22, r23
   1b964:	78 2f       	mov	r23, r24
   1b966:	88 27       	eor	r24, r24
   1b968:	b8 5f       	subi	r27, 0xF8	; 248
   1b96a:	39 f0       	breq	.+14     	; 0x1b97a <__fixunssfsi+0x4c>
   1b96c:	b9 3f       	cpi	r27, 0xF9	; 249
   1b96e:	cc f3       	brlt	.-14     	; 0x1b962 <__fixunssfsi+0x34>
   1b970:	86 95       	lsr	r24
   1b972:	77 95       	ror	r23
   1b974:	67 95       	ror	r22
   1b976:	b3 95       	inc	r27
   1b978:	d9 f7       	brne	.-10     	; 0x1b970 <__fixunssfsi+0x42>
   1b97a:	3e f4       	brtc	.+14     	; 0x1b98a <__fixunssfsi+0x5c>
   1b97c:	90 95       	com	r25
   1b97e:	80 95       	com	r24
   1b980:	70 95       	com	r23
   1b982:	61 95       	neg	r22
   1b984:	7f 4f       	sbci	r23, 0xFF	; 255
   1b986:	8f 4f       	sbci	r24, 0xFF	; 255
   1b988:	9f 4f       	sbci	r25, 0xFF	; 255
   1b98a:	08 95       	ret

0001b98c <__floatunsisf>:
__floatunsisf():
   1b98c:	e8 94       	clt
   1b98e:	09 c0       	rjmp	.+18     	; 0x1b9a2 <__floatsisf+0x12>

0001b990 <__floatsisf>:
   1b990:	97 fb       	bst	r25, 7
   1b992:	3e f4       	brtc	.+14     	; 0x1b9a2 <__floatsisf+0x12>
   1b994:	90 95       	com	r25
   1b996:	80 95       	com	r24
   1b998:	70 95       	com	r23
   1b99a:	61 95       	neg	r22
   1b99c:	7f 4f       	sbci	r23, 0xFF	; 255
   1b99e:	8f 4f       	sbci	r24, 0xFF	; 255
   1b9a0:	9f 4f       	sbci	r25, 0xFF	; 255
   1b9a2:	99 23       	and	r25, r25
   1b9a4:	a9 f0       	breq	.+42     	; 0x1b9d0 <__floatsisf+0x40>
   1b9a6:	f9 2f       	mov	r31, r25
   1b9a8:	96 e9       	ldi	r25, 0x96	; 150
   1b9aa:	bb 27       	eor	r27, r27
   1b9ac:	93 95       	inc	r25
   1b9ae:	f6 95       	lsr	r31
   1b9b0:	87 95       	ror	r24
   1b9b2:	77 95       	ror	r23
   1b9b4:	67 95       	ror	r22
   1b9b6:	b7 95       	ror	r27
   1b9b8:	f1 11       	cpse	r31, r1
   1b9ba:	f8 cf       	rjmp	.-16     	; 0x1b9ac <__floatsisf+0x1c>
   1b9bc:	fa f4       	brpl	.+62     	; 0x1b9fc <__floatsisf+0x6c>
   1b9be:	bb 0f       	add	r27, r27
   1b9c0:	11 f4       	brne	.+4      	; 0x1b9c6 <__floatsisf+0x36>
   1b9c2:	60 ff       	sbrs	r22, 0
   1b9c4:	1b c0       	rjmp	.+54     	; 0x1b9fc <__floatsisf+0x6c>
   1b9c6:	6f 5f       	subi	r22, 0xFF	; 255
   1b9c8:	7f 4f       	sbci	r23, 0xFF	; 255
   1b9ca:	8f 4f       	sbci	r24, 0xFF	; 255
   1b9cc:	9f 4f       	sbci	r25, 0xFF	; 255
   1b9ce:	16 c0       	rjmp	.+44     	; 0x1b9fc <__floatsisf+0x6c>
   1b9d0:	88 23       	and	r24, r24
   1b9d2:	11 f0       	breq	.+4      	; 0x1b9d8 <__floatsisf+0x48>
   1b9d4:	96 e9       	ldi	r25, 0x96	; 150
   1b9d6:	11 c0       	rjmp	.+34     	; 0x1b9fa <__floatsisf+0x6a>
   1b9d8:	77 23       	and	r23, r23
   1b9da:	21 f0       	breq	.+8      	; 0x1b9e4 <__floatsisf+0x54>
   1b9dc:	9e e8       	ldi	r25, 0x8E	; 142
   1b9de:	87 2f       	mov	r24, r23
   1b9e0:	76 2f       	mov	r23, r22
   1b9e2:	05 c0       	rjmp	.+10     	; 0x1b9ee <__floatsisf+0x5e>
   1b9e4:	66 23       	and	r22, r22
   1b9e6:	71 f0       	breq	.+28     	; 0x1ba04 <__floatsisf+0x74>
   1b9e8:	96 e8       	ldi	r25, 0x86	; 134
   1b9ea:	86 2f       	mov	r24, r22
   1b9ec:	70 e0       	ldi	r23, 0x00	; 0
   1b9ee:	60 e0       	ldi	r22, 0x00	; 0
   1b9f0:	2a f0       	brmi	.+10     	; 0x1b9fc <__floatsisf+0x6c>
   1b9f2:	9a 95       	dec	r25
   1b9f4:	66 0f       	add	r22, r22
   1b9f6:	77 1f       	adc	r23, r23
   1b9f8:	88 1f       	adc	r24, r24
   1b9fa:	da f7       	brpl	.-10     	; 0x1b9f2 <__floatsisf+0x62>
   1b9fc:	88 0f       	add	r24, r24
   1b9fe:	96 95       	lsr	r25
   1ba00:	87 95       	ror	r24
   1ba02:	97 f9       	bld	r25, 7
   1ba04:	08 95       	ret

0001ba06 <__fp_cmp>:
__fp_cmp():
   1ba06:	99 0f       	add	r25, r25
   1ba08:	00 08       	sbc	r0, r0
   1ba0a:	55 0f       	add	r21, r21
   1ba0c:	aa 0b       	sbc	r26, r26
   1ba0e:	e0 e8       	ldi	r30, 0x80	; 128
   1ba10:	fe ef       	ldi	r31, 0xFE	; 254
   1ba12:	16 16       	cp	r1, r22
   1ba14:	17 06       	cpc	r1, r23
   1ba16:	e8 07       	cpc	r30, r24
   1ba18:	f9 07       	cpc	r31, r25
   1ba1a:	c0 f0       	brcs	.+48     	; 0x1ba4c <__fp_cmp+0x46>
   1ba1c:	12 16       	cp	r1, r18
   1ba1e:	13 06       	cpc	r1, r19
   1ba20:	e4 07       	cpc	r30, r20
   1ba22:	f5 07       	cpc	r31, r21
   1ba24:	98 f0       	brcs	.+38     	; 0x1ba4c <__fp_cmp+0x46>
   1ba26:	62 1b       	sub	r22, r18
   1ba28:	73 0b       	sbc	r23, r19
   1ba2a:	84 0b       	sbc	r24, r20
   1ba2c:	95 0b       	sbc	r25, r21
   1ba2e:	39 f4       	brne	.+14     	; 0x1ba3e <__fp_cmp+0x38>
   1ba30:	0a 26       	eor	r0, r26
   1ba32:	61 f0       	breq	.+24     	; 0x1ba4c <__fp_cmp+0x46>
   1ba34:	23 2b       	or	r18, r19
   1ba36:	24 2b       	or	r18, r20
   1ba38:	25 2b       	or	r18, r21
   1ba3a:	21 f4       	brne	.+8      	; 0x1ba44 <__fp_cmp+0x3e>
   1ba3c:	08 95       	ret
   1ba3e:	0a 26       	eor	r0, r26
   1ba40:	09 f4       	brne	.+2      	; 0x1ba44 <__fp_cmp+0x3e>
   1ba42:	a1 40       	sbci	r26, 0x01	; 1
   1ba44:	a6 95       	lsr	r26
   1ba46:	8f ef       	ldi	r24, 0xFF	; 255
   1ba48:	81 1d       	adc	r24, r1
   1ba4a:	81 1d       	adc	r24, r1
   1ba4c:	08 95       	ret

0001ba4e <__fp_inf>:
__fp_inf():
   1ba4e:	97 f9       	bld	r25, 7
   1ba50:	9f 67       	ori	r25, 0x7F	; 127
   1ba52:	80 e8       	ldi	r24, 0x80	; 128
   1ba54:	70 e0       	ldi	r23, 0x00	; 0
   1ba56:	60 e0       	ldi	r22, 0x00	; 0
   1ba58:	08 95       	ret

0001ba5a <__fp_nan>:
__fp_nan():
   1ba5a:	9f ef       	ldi	r25, 0xFF	; 255
   1ba5c:	80 ec       	ldi	r24, 0xC0	; 192
   1ba5e:	08 95       	ret

0001ba60 <__fp_pscA>:
__fp_pscA():
   1ba60:	00 24       	eor	r0, r0
   1ba62:	0a 94       	dec	r0
   1ba64:	16 16       	cp	r1, r22
   1ba66:	17 06       	cpc	r1, r23
   1ba68:	18 06       	cpc	r1, r24
   1ba6a:	09 06       	cpc	r0, r25
   1ba6c:	08 95       	ret

0001ba6e <__fp_pscB>:
__fp_pscB():
   1ba6e:	00 24       	eor	r0, r0
   1ba70:	0a 94       	dec	r0
   1ba72:	12 16       	cp	r1, r18
   1ba74:	13 06       	cpc	r1, r19
   1ba76:	14 06       	cpc	r1, r20
   1ba78:	05 06       	cpc	r0, r21
   1ba7a:	08 95       	ret

0001ba7c <__fp_round>:
__fp_round():
   1ba7c:	09 2e       	mov	r0, r25
   1ba7e:	03 94       	inc	r0
   1ba80:	00 0c       	add	r0, r0
   1ba82:	11 f4       	brne	.+4      	; 0x1ba88 <__fp_round+0xc>
   1ba84:	88 23       	and	r24, r24
   1ba86:	52 f0       	brmi	.+20     	; 0x1ba9c <__fp_round+0x20>
   1ba88:	bb 0f       	add	r27, r27
   1ba8a:	40 f4       	brcc	.+16     	; 0x1ba9c <__fp_round+0x20>
   1ba8c:	bf 2b       	or	r27, r31
   1ba8e:	11 f4       	brne	.+4      	; 0x1ba94 <__fp_round+0x18>
   1ba90:	60 ff       	sbrs	r22, 0
   1ba92:	04 c0       	rjmp	.+8      	; 0x1ba9c <__fp_round+0x20>
   1ba94:	6f 5f       	subi	r22, 0xFF	; 255
   1ba96:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba98:	8f 4f       	sbci	r24, 0xFF	; 255
   1ba9a:	9f 4f       	sbci	r25, 0xFF	; 255
   1ba9c:	08 95       	ret

0001ba9e <__fp_split3>:
__fp_split3():
   1ba9e:	57 fd       	sbrc	r21, 7
   1baa0:	90 58       	subi	r25, 0x80	; 128
   1baa2:	44 0f       	add	r20, r20
   1baa4:	55 1f       	adc	r21, r21
   1baa6:	59 f0       	breq	.+22     	; 0x1babe <__fp_splitA+0x10>
   1baa8:	5f 3f       	cpi	r21, 0xFF	; 255
   1baaa:	71 f0       	breq	.+28     	; 0x1bac8 <__fp_splitA+0x1a>
   1baac:	47 95       	ror	r20

0001baae <__fp_splitA>:
   1baae:	88 0f       	add	r24, r24
   1bab0:	97 fb       	bst	r25, 7
   1bab2:	99 1f       	adc	r25, r25
   1bab4:	61 f0       	breq	.+24     	; 0x1bace <__fp_splitA+0x20>
   1bab6:	9f 3f       	cpi	r25, 0xFF	; 255
   1bab8:	79 f0       	breq	.+30     	; 0x1bad8 <__fp_splitA+0x2a>
   1baba:	87 95       	ror	r24
   1babc:	08 95       	ret
   1babe:	12 16       	cp	r1, r18
   1bac0:	13 06       	cpc	r1, r19
   1bac2:	14 06       	cpc	r1, r20
   1bac4:	55 1f       	adc	r21, r21
   1bac6:	f2 cf       	rjmp	.-28     	; 0x1baac <__fp_split3+0xe>
   1bac8:	46 95       	lsr	r20
   1baca:	f1 df       	rcall	.-30     	; 0x1baae <__fp_splitA>
   1bacc:	08 c0       	rjmp	.+16     	; 0x1bade <__fp_splitA+0x30>
   1bace:	16 16       	cp	r1, r22
   1bad0:	17 06       	cpc	r1, r23
   1bad2:	18 06       	cpc	r1, r24
   1bad4:	99 1f       	adc	r25, r25
   1bad6:	f1 cf       	rjmp	.-30     	; 0x1baba <__fp_splitA+0xc>
   1bad8:	86 95       	lsr	r24
   1bada:	71 05       	cpc	r23, r1
   1badc:	61 05       	cpc	r22, r1
   1bade:	08 94       	sec
   1bae0:	08 95       	ret

0001bae2 <__fp_zero>:
__fp_zero():
   1bae2:	e8 94       	clt

0001bae4 <__fp_szero>:
   1bae4:	bb 27       	eor	r27, r27
   1bae6:	66 27       	eor	r22, r22
   1bae8:	77 27       	eor	r23, r23
   1baea:	cb 01       	movw	r24, r22
   1baec:	97 f9       	bld	r25, 7
   1baee:	08 95       	ret

0001baf0 <__gesf2>:
__gesf2():
   1baf0:	0e 94 03 dd 	call	0x1ba06	; 0x1ba06 <__fp_cmp>
   1baf4:	08 f4       	brcc	.+2      	; 0x1baf8 <__gesf2+0x8>
   1baf6:	8f ef       	ldi	r24, 0xFF	; 255
   1baf8:	08 95       	ret

0001bafa <__mulsf3>:
__mulsf3():
   1bafa:	0e 94 90 dd 	call	0x1bb20	; 0x1bb20 <__mulsf3x>
   1bafe:	0c 94 3e dd 	jmp	0x1ba7c	; 0x1ba7c <__fp_round>
   1bb02:	0e 94 30 dd 	call	0x1ba60	; 0x1ba60 <__fp_pscA>
   1bb06:	38 f0       	brcs	.+14     	; 0x1bb16 <__mulsf3+0x1c>
   1bb08:	0e 94 37 dd 	call	0x1ba6e	; 0x1ba6e <__fp_pscB>
   1bb0c:	20 f0       	brcs	.+8      	; 0x1bb16 <__mulsf3+0x1c>
   1bb0e:	95 23       	and	r25, r21
   1bb10:	11 f0       	breq	.+4      	; 0x1bb16 <__mulsf3+0x1c>
   1bb12:	0c 94 27 dd 	jmp	0x1ba4e	; 0x1ba4e <__fp_inf>
   1bb16:	0c 94 2d dd 	jmp	0x1ba5a	; 0x1ba5a <__fp_nan>
   1bb1a:	11 24       	eor	r1, r1
   1bb1c:	0c 94 72 dd 	jmp	0x1bae4	; 0x1bae4 <__fp_szero>

0001bb20 <__mulsf3x>:
__mulsf3x():
   1bb20:	0e 94 4f dd 	call	0x1ba9e	; 0x1ba9e <__fp_split3>
   1bb24:	70 f3       	brcs	.-36     	; 0x1bb02 <__mulsf3+0x8>

0001bb26 <__mulsf3_pse>:
   1bb26:	95 9f       	mul	r25, r21
   1bb28:	c1 f3       	breq	.-16     	; 0x1bb1a <__mulsf3+0x20>
   1bb2a:	95 0f       	add	r25, r21
   1bb2c:	50 e0       	ldi	r21, 0x00	; 0
   1bb2e:	55 1f       	adc	r21, r21
   1bb30:	62 9f       	mul	r22, r18
   1bb32:	f0 01       	movw	r30, r0
   1bb34:	72 9f       	mul	r23, r18
   1bb36:	bb 27       	eor	r27, r27
   1bb38:	f0 0d       	add	r31, r0
   1bb3a:	b1 1d       	adc	r27, r1
   1bb3c:	63 9f       	mul	r22, r19
   1bb3e:	aa 27       	eor	r26, r26
   1bb40:	f0 0d       	add	r31, r0
   1bb42:	b1 1d       	adc	r27, r1
   1bb44:	aa 1f       	adc	r26, r26
   1bb46:	64 9f       	mul	r22, r20
   1bb48:	66 27       	eor	r22, r22
   1bb4a:	b0 0d       	add	r27, r0
   1bb4c:	a1 1d       	adc	r26, r1
   1bb4e:	66 1f       	adc	r22, r22
   1bb50:	82 9f       	mul	r24, r18
   1bb52:	22 27       	eor	r18, r18
   1bb54:	b0 0d       	add	r27, r0
   1bb56:	a1 1d       	adc	r26, r1
   1bb58:	62 1f       	adc	r22, r18
   1bb5a:	73 9f       	mul	r23, r19
   1bb5c:	b0 0d       	add	r27, r0
   1bb5e:	a1 1d       	adc	r26, r1
   1bb60:	62 1f       	adc	r22, r18
   1bb62:	83 9f       	mul	r24, r19
   1bb64:	a0 0d       	add	r26, r0
   1bb66:	61 1d       	adc	r22, r1
   1bb68:	22 1f       	adc	r18, r18
   1bb6a:	74 9f       	mul	r23, r20
   1bb6c:	33 27       	eor	r19, r19
   1bb6e:	a0 0d       	add	r26, r0
   1bb70:	61 1d       	adc	r22, r1
   1bb72:	23 1f       	adc	r18, r19
   1bb74:	84 9f       	mul	r24, r20
   1bb76:	60 0d       	add	r22, r0
   1bb78:	21 1d       	adc	r18, r1
   1bb7a:	82 2f       	mov	r24, r18
   1bb7c:	76 2f       	mov	r23, r22
   1bb7e:	6a 2f       	mov	r22, r26
   1bb80:	11 24       	eor	r1, r1
   1bb82:	9f 57       	subi	r25, 0x7F	; 127
   1bb84:	50 40       	sbci	r21, 0x00	; 0
   1bb86:	9a f0       	brmi	.+38     	; 0x1bbae <__mulsf3_pse+0x88>
   1bb88:	f1 f0       	breq	.+60     	; 0x1bbc6 <__mulsf3_pse+0xa0>
   1bb8a:	88 23       	and	r24, r24
   1bb8c:	4a f0       	brmi	.+18     	; 0x1bba0 <__mulsf3_pse+0x7a>
   1bb8e:	ee 0f       	add	r30, r30
   1bb90:	ff 1f       	adc	r31, r31
   1bb92:	bb 1f       	adc	r27, r27
   1bb94:	66 1f       	adc	r22, r22
   1bb96:	77 1f       	adc	r23, r23
   1bb98:	88 1f       	adc	r24, r24
   1bb9a:	91 50       	subi	r25, 0x01	; 1
   1bb9c:	50 40       	sbci	r21, 0x00	; 0
   1bb9e:	a9 f7       	brne	.-22     	; 0x1bb8a <__mulsf3_pse+0x64>
   1bba0:	9e 3f       	cpi	r25, 0xFE	; 254
   1bba2:	51 05       	cpc	r21, r1
   1bba4:	80 f0       	brcs	.+32     	; 0x1bbc6 <__mulsf3_pse+0xa0>
   1bba6:	0c 94 27 dd 	jmp	0x1ba4e	; 0x1ba4e <__fp_inf>
   1bbaa:	0c 94 72 dd 	jmp	0x1bae4	; 0x1bae4 <__fp_szero>
   1bbae:	5f 3f       	cpi	r21, 0xFF	; 255
   1bbb0:	e4 f3       	brlt	.-8      	; 0x1bbaa <__mulsf3_pse+0x84>
   1bbb2:	98 3e       	cpi	r25, 0xE8	; 232
   1bbb4:	d4 f3       	brlt	.-12     	; 0x1bbaa <__mulsf3_pse+0x84>
   1bbb6:	86 95       	lsr	r24
   1bbb8:	77 95       	ror	r23
   1bbba:	67 95       	ror	r22
   1bbbc:	b7 95       	ror	r27
   1bbbe:	f7 95       	ror	r31
   1bbc0:	e7 95       	ror	r30
   1bbc2:	9f 5f       	subi	r25, 0xFF	; 255
   1bbc4:	c1 f7       	brne	.-16     	; 0x1bbb6 <__mulsf3_pse+0x90>
   1bbc6:	fe 2b       	or	r31, r30
   1bbc8:	88 0f       	add	r24, r24
   1bbca:	91 1d       	adc	r25, r1
   1bbcc:	96 95       	lsr	r25
   1bbce:	87 95       	ror	r24
   1bbd0:	97 f9       	bld	r25, 7
   1bbd2:	08 95       	ret

0001bbd4 <__mulsi3>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   1bbd4:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   1bbd6:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   1bbd8:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   1bbda:	0e 94 86 de 	call	0x1bd0c	; 0x1bd0c <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   1bbde:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   1bbe0:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   1bbe2:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   1bbe4:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   1bbe6:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   1bbe8:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   1bbea:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   1bbec:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   1bbee:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   1bbf0:	11 24       	eor	r1, r1
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   1bbf2:	08 95       	ret

0001bbf4 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   1bbf4:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   1bbf6:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   1bbf8:	04 c0       	rjmp	.+8      	; 0x1bc02 <__udivmodqi4_ep>

0001bbfa <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   1bbfa:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   1bbfc:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   1bbfe:	08 f0       	brcs	.+2      	; 0x1bc02 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   1bc00:	96 1b       	sub	r25, r22

0001bc02 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   1bc02:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   1bc04:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   1bc06:	c9 f7       	brne	.-14     	; 0x1bbfa <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   1bc08:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   1bc0a:	08 95       	ret

0001bc0c <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   1bc0c:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   1bc0e:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   1bc10:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   1bc12:	07 c0       	rjmp	.+14     	; 0x1bc22 <__udivmodhi4_ep>

0001bc14 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   1bc14:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   1bc16:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   1bc18:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   1bc1a:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   1bc1c:	10 f0       	brcs	.+4      	; 0x1bc22 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   1bc1e:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   1bc20:	b7 0b       	sbc	r27, r23

0001bc22 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   1bc22:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   1bc24:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   1bc26:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   1bc28:	a9 f7       	brne	.-22     	; 0x1bc14 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   1bc2a:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   1bc2c:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   1bc2e:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   1bc30:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   1bc32:	08 95       	ret

0001bc34 <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   1bc34:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   1bc36:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   1bc38:	16 f4       	brtc	.+4      	; 0x1bc3e <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   1bc3a:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   1bc3c:	07 d0       	rcall	.+14     	; 0x1bc4c <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   1bc3e:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   1bc40:	09 d0       	rcall	.+18     	; 0x1bc54 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   1bc42:	0e 94 06 de 	call	0x1bc0c	; 0x1bc0c <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   1bc46:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   1bc48:	05 d0       	rcall	.+10     	; 0x1bc54 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   1bc4a:	3e f4       	brtc	.+14     	; 0x1bc5a <__divmodhi4_exit>

0001bc4c <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   1bc4c:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   1bc4e:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   1bc50:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   1bc52:	08 95       	ret

0001bc54 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   1bc54:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   1bc56:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   1bc58:	7f 4f       	sbci	r23, 0xFF	; 255

0001bc5a <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   1bc5a:	08 95       	ret

0001bc5c <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   1bc5c:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   1bc5e:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   1bc60:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   1bc62:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   1bc64:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   1bc66:	0d c0       	rjmp	.+26     	; 0x1bc82 <__udivmodsi4_ep>

0001bc68 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   1bc68:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   1bc6a:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   1bc6c:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   1bc6e:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   1bc70:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   1bc72:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   1bc74:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   1bc76:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   1bc78:	20 f0       	brcs	.+8      	; 0x1bc82 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   1bc7a:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   1bc7c:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   1bc7e:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   1bc80:	f5 0b       	sbc	r31, r21

0001bc82 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   1bc82:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   1bc84:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   1bc86:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   1bc88:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   1bc8a:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   1bc8c:	69 f7       	brne	.-38     	; 0x1bc68 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   1bc8e:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   1bc90:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   1bc92:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   1bc94:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   1bc96:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   1bc98:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   1bc9a:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   1bc9c:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   1bc9e:	08 95       	ret

0001bca0 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   1bca0:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   1bca2:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   1bca4:	1e f4       	brtc	.+6      	; 0x1bcac <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   1bca6:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   1bca8:	0e 94 67 de 	call	0x1bcce	; 0x1bcce <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   1bcac:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   1bcae:	07 d0       	rcall	.+14     	; 0x1bcbe <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   1bcb0:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   1bcb4:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   1bcb6:	03 d0       	rcall	.+6      	; 0x1bcbe <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   1bcb8:	4e f4       	brtc	.+18     	; 0x1bccc <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   1bcba:	0c 94 67 de 	jmp	0x1bcce	; 0x1bcce <__negsi2>

0001bcbe <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   1bcbe:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   1bcc0:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   1bcc2:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   1bcc4:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   1bcc6:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   1bcc8:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   1bcca:	5f 4f       	sbci	r21, 0xFF	; 255

0001bccc <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   1bccc:	08 95       	ret

0001bcce <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   1bcce:	90 95       	com	r25
   1bcd0:	80 95       	com	r24
   1bcd2:	70 95       	com	r23
   1bcd4:	61 95       	neg	r22
   1bcd6:	7f 4f       	sbci	r23, 0xFF	; 255
   1bcd8:	8f 4f       	sbci	r24, 0xFF	; 255
   1bcda:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   1bcdc:	08 95       	ret

0001bcde <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   1bcde:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   1bce0:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   1bce2:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   1bce4:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   1bce6:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   1bce8:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   1bcea:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   1bcec:	19 94       	eijmp

0001bcee <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   1bcee:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   1bcf0:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   1bcf2:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   1bcf4:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   1bcf6:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   1bcf8:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   1bcfa:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   1bcfc:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   1bcfe:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   1bd00:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   1bd02:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   1bd04:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   1bd06:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   1bd08:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   1bd0a:	08 95       	ret

0001bd0c <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   1bd0c:	0e 94 77 de 	call	0x1bcee	; 0x1bcee <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   1bd10:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   1bd12:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   1bd14:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   1bd16:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   1bd18:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   1bd1a:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   1bd1c:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   1bd1e:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   1bd20:	08 95       	ret

0001bd22 <dtostrf>:
dtostrf():
   1bd22:	ef 92       	push	r14
   1bd24:	0f 93       	push	r16
   1bd26:	1f 93       	push	r17
   1bd28:	cf 93       	push	r28
   1bd2a:	df 93       	push	r29
   1bd2c:	e8 01       	movw	r28, r16
   1bd2e:	34 e0       	ldi	r19, 0x04	; 4
   1bd30:	47 fd       	sbrc	r20, 7
   1bd32:	34 e1       	ldi	r19, 0x14	; 20
   1bd34:	04 2e       	mov	r0, r20
   1bd36:	00 0c       	add	r0, r0
   1bd38:	55 0b       	sbc	r21, r21
   1bd3a:	57 ff       	sbrs	r21, 7
   1bd3c:	03 c0       	rjmp	.+6      	; 0x1bd44 <dtostrf+0x22>
   1bd3e:	51 95       	neg	r21
   1bd40:	41 95       	neg	r20
   1bd42:	51 09       	sbc	r21, r1
   1bd44:	e3 2e       	mov	r14, r19
   1bd46:	02 2f       	mov	r16, r18
   1bd48:	24 2f       	mov	r18, r20
   1bd4a:	ae 01       	movw	r20, r28
   1bd4c:	0e 94 94 e5 	call	0x1cb28	; 0x1cb28 <dtoa_prf>
   1bd50:	ce 01       	movw	r24, r28
   1bd52:	df 91       	pop	r29
   1bd54:	cf 91       	pop	r28
   1bd56:	1f 91       	pop	r17
   1bd58:	0f 91       	pop	r16
   1bd5a:	ef 90       	pop	r14
   1bd5c:	08 95       	ret

0001bd5e <malloc>:
malloc():
   1bd5e:	0f 93       	push	r16
   1bd60:	1f 93       	push	r17
   1bd62:	cf 93       	push	r28
   1bd64:	df 93       	push	r29
   1bd66:	82 30       	cpi	r24, 0x02	; 2
   1bd68:	91 05       	cpc	r25, r1
   1bd6a:	10 f4       	brcc	.+4      	; 0x1bd70 <malloc+0x12>
   1bd6c:	82 e0       	ldi	r24, 0x02	; 2
   1bd6e:	90 e0       	ldi	r25, 0x00	; 0
   1bd70:	e0 91 bb 14 	lds	r30, 0x14BB	; 0x8014bb <__flp>
   1bd74:	f0 91 bc 14 	lds	r31, 0x14BC	; 0x8014bc <__flp+0x1>
   1bd78:	30 e0       	ldi	r19, 0x00	; 0
   1bd7a:	20 e0       	ldi	r18, 0x00	; 0
   1bd7c:	b0 e0       	ldi	r27, 0x00	; 0
   1bd7e:	a0 e0       	ldi	r26, 0x00	; 0
   1bd80:	30 97       	sbiw	r30, 0x00	; 0
   1bd82:	99 f4       	brne	.+38     	; 0x1bdaa <malloc+0x4c>
   1bd84:	21 15       	cp	r18, r1
   1bd86:	31 05       	cpc	r19, r1
   1bd88:	09 f4       	brne	.+2      	; 0x1bd8c <malloc+0x2e>
   1bd8a:	4a c0       	rjmp	.+148    	; 0x1be20 <malloc+0xc2>
   1bd8c:	28 1b       	sub	r18, r24
   1bd8e:	39 0b       	sbc	r19, r25
   1bd90:	24 30       	cpi	r18, 0x04	; 4
   1bd92:	31 05       	cpc	r19, r1
   1bd94:	d8 f5       	brcc	.+118    	; 0x1be0c <malloc+0xae>
   1bd96:	8a 81       	ldd	r24, Y+2	; 0x02
   1bd98:	9b 81       	ldd	r25, Y+3	; 0x03
   1bd9a:	61 15       	cp	r22, r1
   1bd9c:	71 05       	cpc	r23, r1
   1bd9e:	89 f1       	breq	.+98     	; 0x1be02 <malloc+0xa4>
   1bda0:	fb 01       	movw	r30, r22
   1bda2:	93 83       	std	Z+3, r25	; 0x03
   1bda4:	82 83       	std	Z+2, r24	; 0x02
   1bda6:	fe 01       	movw	r30, r28
   1bda8:	11 c0       	rjmp	.+34     	; 0x1bdcc <malloc+0x6e>
   1bdaa:	40 81       	ld	r20, Z
   1bdac:	51 81       	ldd	r21, Z+1	; 0x01
   1bdae:	02 81       	ldd	r16, Z+2	; 0x02
   1bdb0:	13 81       	ldd	r17, Z+3	; 0x03
   1bdb2:	48 17       	cp	r20, r24
   1bdb4:	59 07       	cpc	r21, r25
   1bdb6:	e0 f0       	brcs	.+56     	; 0x1bdf0 <malloc+0x92>
   1bdb8:	48 17       	cp	r20, r24
   1bdba:	59 07       	cpc	r21, r25
   1bdbc:	99 f4       	brne	.+38     	; 0x1bde4 <malloc+0x86>
   1bdbe:	10 97       	sbiw	r26, 0x00	; 0
   1bdc0:	61 f0       	breq	.+24     	; 0x1bdda <malloc+0x7c>
   1bdc2:	12 96       	adiw	r26, 0x02	; 2
   1bdc4:	0c 93       	st	X, r16
   1bdc6:	12 97       	sbiw	r26, 0x02	; 2
   1bdc8:	13 96       	adiw	r26, 0x03	; 3
   1bdca:	1c 93       	st	X, r17
   1bdcc:	32 96       	adiw	r30, 0x02	; 2
   1bdce:	cf 01       	movw	r24, r30
   1bdd0:	df 91       	pop	r29
   1bdd2:	cf 91       	pop	r28
   1bdd4:	1f 91       	pop	r17
   1bdd6:	0f 91       	pop	r16
   1bdd8:	08 95       	ret
   1bdda:	00 93 bb 14 	sts	0x14BB, r16	; 0x8014bb <__flp>
   1bdde:	10 93 bc 14 	sts	0x14BC, r17	; 0x8014bc <__flp+0x1>
   1bde2:	f4 cf       	rjmp	.-24     	; 0x1bdcc <malloc+0x6e>
   1bde4:	21 15       	cp	r18, r1
   1bde6:	31 05       	cpc	r19, r1
   1bde8:	51 f0       	breq	.+20     	; 0x1bdfe <malloc+0xa0>
   1bdea:	42 17       	cp	r20, r18
   1bdec:	53 07       	cpc	r21, r19
   1bdee:	38 f0       	brcs	.+14     	; 0x1bdfe <malloc+0xa0>
   1bdf0:	a9 01       	movw	r20, r18
   1bdf2:	db 01       	movw	r26, r22
   1bdf4:	9a 01       	movw	r18, r20
   1bdf6:	bd 01       	movw	r22, r26
   1bdf8:	df 01       	movw	r26, r30
   1bdfa:	f8 01       	movw	r30, r16
   1bdfc:	c1 cf       	rjmp	.-126    	; 0x1bd80 <malloc+0x22>
   1bdfe:	ef 01       	movw	r28, r30
   1be00:	f9 cf       	rjmp	.-14     	; 0x1bdf4 <malloc+0x96>
   1be02:	90 93 bc 14 	sts	0x14BC, r25	; 0x8014bc <__flp+0x1>
   1be06:	80 93 bb 14 	sts	0x14BB, r24	; 0x8014bb <__flp>
   1be0a:	cd cf       	rjmp	.-102    	; 0x1bda6 <malloc+0x48>
   1be0c:	fe 01       	movw	r30, r28
   1be0e:	e2 0f       	add	r30, r18
   1be10:	f3 1f       	adc	r31, r19
   1be12:	81 93       	st	Z+, r24
   1be14:	91 93       	st	Z+, r25
   1be16:	22 50       	subi	r18, 0x02	; 2
   1be18:	31 09       	sbc	r19, r1
   1be1a:	39 83       	std	Y+1, r19	; 0x01
   1be1c:	28 83       	st	Y, r18
   1be1e:	d7 cf       	rjmp	.-82     	; 0x1bdce <malloc+0x70>
   1be20:	20 91 b9 14 	lds	r18, 0x14B9	; 0x8014b9 <__brkval>
   1be24:	30 91 ba 14 	lds	r19, 0x14BA	; 0x8014ba <__brkval+0x1>
   1be28:	23 2b       	or	r18, r19
   1be2a:	41 f4       	brne	.+16     	; 0x1be3c <malloc+0xde>
   1be2c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
   1be30:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
   1be34:	30 93 ba 14 	sts	0x14BA, r19	; 0x8014ba <__brkval+0x1>
   1be38:	20 93 b9 14 	sts	0x14B9, r18	; 0x8014b9 <__brkval>
   1be3c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   1be40:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   1be44:	21 15       	cp	r18, r1
   1be46:	31 05       	cpc	r19, r1
   1be48:	41 f4       	brne	.+16     	; 0x1be5a <malloc+0xfc>
   1be4a:	2d b7       	in	r18, 0x3d	; 61
   1be4c:	3e b7       	in	r19, 0x3e	; 62
   1be4e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   1be52:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   1be56:	24 1b       	sub	r18, r20
   1be58:	35 0b       	sbc	r19, r21
   1be5a:	e0 91 b9 14 	lds	r30, 0x14B9	; 0x8014b9 <__brkval>
   1be5e:	f0 91 ba 14 	lds	r31, 0x14BA	; 0x8014ba <__brkval+0x1>
   1be62:	e2 17       	cp	r30, r18
   1be64:	f3 07       	cpc	r31, r19
   1be66:	a0 f4       	brcc	.+40     	; 0x1be90 <malloc+0x132>
   1be68:	2e 1b       	sub	r18, r30
   1be6a:	3f 0b       	sbc	r19, r31
   1be6c:	28 17       	cp	r18, r24
   1be6e:	39 07       	cpc	r19, r25
   1be70:	78 f0       	brcs	.+30     	; 0x1be90 <malloc+0x132>
   1be72:	ac 01       	movw	r20, r24
   1be74:	4e 5f       	subi	r20, 0xFE	; 254
   1be76:	5f 4f       	sbci	r21, 0xFF	; 255
   1be78:	24 17       	cp	r18, r20
   1be7a:	35 07       	cpc	r19, r21
   1be7c:	48 f0       	brcs	.+18     	; 0x1be90 <malloc+0x132>
   1be7e:	4e 0f       	add	r20, r30
   1be80:	5f 1f       	adc	r21, r31
   1be82:	50 93 ba 14 	sts	0x14BA, r21	; 0x8014ba <__brkval+0x1>
   1be86:	40 93 b9 14 	sts	0x14B9, r20	; 0x8014b9 <__brkval>
   1be8a:	81 93       	st	Z+, r24
   1be8c:	91 93       	st	Z+, r25
   1be8e:	9f cf       	rjmp	.-194    	; 0x1bdce <malloc+0x70>
   1be90:	f0 e0       	ldi	r31, 0x00	; 0
   1be92:	e0 e0       	ldi	r30, 0x00	; 0
   1be94:	9c cf       	rjmp	.-200    	; 0x1bdce <malloc+0x70>

0001be96 <free>:
free():
   1be96:	cf 93       	push	r28
   1be98:	df 93       	push	r29
   1be9a:	00 97       	sbiw	r24, 0x00	; 0
   1be9c:	e9 f0       	breq	.+58     	; 0x1bed8 <free+0x42>
   1be9e:	fc 01       	movw	r30, r24
   1bea0:	32 97       	sbiw	r30, 0x02	; 2
   1bea2:	13 82       	std	Z+3, r1	; 0x03
   1bea4:	12 82       	std	Z+2, r1	; 0x02
   1bea6:	a0 91 bb 14 	lds	r26, 0x14BB	; 0x8014bb <__flp>
   1beaa:	b0 91 bc 14 	lds	r27, 0x14BC	; 0x8014bc <__flp+0x1>
   1beae:	ed 01       	movw	r28, r26
   1beb0:	30 e0       	ldi	r19, 0x00	; 0
   1beb2:	20 e0       	ldi	r18, 0x00	; 0
   1beb4:	10 97       	sbiw	r26, 0x00	; 0
   1beb6:	a1 f4       	brne	.+40     	; 0x1bee0 <free+0x4a>
   1beb8:	20 81       	ld	r18, Z
   1beba:	31 81       	ldd	r19, Z+1	; 0x01
   1bebc:	82 0f       	add	r24, r18
   1bebe:	93 1f       	adc	r25, r19
   1bec0:	20 91 b9 14 	lds	r18, 0x14B9	; 0x8014b9 <__brkval>
   1bec4:	30 91 ba 14 	lds	r19, 0x14BA	; 0x8014ba <__brkval+0x1>
   1bec8:	28 17       	cp	r18, r24
   1beca:	39 07       	cpc	r19, r25
   1becc:	09 f0       	breq	.+2      	; 0x1bed0 <free+0x3a>
   1bece:	61 c0       	rjmp	.+194    	; 0x1bf92 <free+0xfc>
   1bed0:	f0 93 ba 14 	sts	0x14BA, r31	; 0x8014ba <__brkval+0x1>
   1bed4:	e0 93 b9 14 	sts	0x14B9, r30	; 0x8014b9 <__brkval>
   1bed8:	df 91       	pop	r29
   1beda:	cf 91       	pop	r28
   1bedc:	08 95       	ret
   1bede:	ea 01       	movw	r28, r20
   1bee0:	ce 17       	cp	r28, r30
   1bee2:	df 07       	cpc	r29, r31
   1bee4:	e8 f5       	brcc	.+122    	; 0x1bf60 <free+0xca>
   1bee6:	4a 81       	ldd	r20, Y+2	; 0x02
   1bee8:	5b 81       	ldd	r21, Y+3	; 0x03
   1beea:	9e 01       	movw	r18, r28
   1beec:	41 15       	cp	r20, r1
   1beee:	51 05       	cpc	r21, r1
   1bef0:	b1 f7       	brne	.-20     	; 0x1bede <free+0x48>
   1bef2:	e9 01       	movw	r28, r18
   1bef4:	fb 83       	std	Y+3, r31	; 0x03
   1bef6:	ea 83       	std	Y+2, r30	; 0x02
   1bef8:	49 91       	ld	r20, Y+
   1befa:	59 91       	ld	r21, Y+
   1befc:	c4 0f       	add	r28, r20
   1befe:	d5 1f       	adc	r29, r21
   1bf00:	ec 17       	cp	r30, r28
   1bf02:	fd 07       	cpc	r31, r29
   1bf04:	61 f4       	brne	.+24     	; 0x1bf1e <free+0x88>
   1bf06:	80 81       	ld	r24, Z
   1bf08:	91 81       	ldd	r25, Z+1	; 0x01
   1bf0a:	02 96       	adiw	r24, 0x02	; 2
   1bf0c:	84 0f       	add	r24, r20
   1bf0e:	95 1f       	adc	r25, r21
   1bf10:	e9 01       	movw	r28, r18
   1bf12:	99 83       	std	Y+1, r25	; 0x01
   1bf14:	88 83       	st	Y, r24
   1bf16:	82 81       	ldd	r24, Z+2	; 0x02
   1bf18:	93 81       	ldd	r25, Z+3	; 0x03
   1bf1a:	9b 83       	std	Y+3, r25	; 0x03
   1bf1c:	8a 83       	std	Y+2, r24	; 0x02
   1bf1e:	f0 e0       	ldi	r31, 0x00	; 0
   1bf20:	e0 e0       	ldi	r30, 0x00	; 0
   1bf22:	12 96       	adiw	r26, 0x02	; 2
   1bf24:	8d 91       	ld	r24, X+
   1bf26:	9c 91       	ld	r25, X
   1bf28:	13 97       	sbiw	r26, 0x03	; 3
   1bf2a:	00 97       	sbiw	r24, 0x00	; 0
   1bf2c:	b9 f5       	brne	.+110    	; 0x1bf9c <free+0x106>
   1bf2e:	2d 91       	ld	r18, X+
   1bf30:	3c 91       	ld	r19, X
   1bf32:	11 97       	sbiw	r26, 0x01	; 1
   1bf34:	cd 01       	movw	r24, r26
   1bf36:	02 96       	adiw	r24, 0x02	; 2
   1bf38:	82 0f       	add	r24, r18
   1bf3a:	93 1f       	adc	r25, r19
   1bf3c:	20 91 b9 14 	lds	r18, 0x14B9	; 0x8014b9 <__brkval>
   1bf40:	30 91 ba 14 	lds	r19, 0x14BA	; 0x8014ba <__brkval+0x1>
   1bf44:	28 17       	cp	r18, r24
   1bf46:	39 07       	cpc	r19, r25
   1bf48:	39 f6       	brne	.-114    	; 0x1bed8 <free+0x42>
   1bf4a:	30 97       	sbiw	r30, 0x00	; 0
   1bf4c:	51 f5       	brne	.+84     	; 0x1bfa2 <free+0x10c>
   1bf4e:	10 92 bc 14 	sts	0x14BC, r1	; 0x8014bc <__flp+0x1>
   1bf52:	10 92 bb 14 	sts	0x14BB, r1	; 0x8014bb <__flp>
   1bf56:	b0 93 ba 14 	sts	0x14BA, r27	; 0x8014ba <__brkval+0x1>
   1bf5a:	a0 93 b9 14 	sts	0x14B9, r26	; 0x8014b9 <__brkval>
   1bf5e:	bc cf       	rjmp	.-136    	; 0x1bed8 <free+0x42>
   1bf60:	d3 83       	std	Z+3, r29	; 0x03
   1bf62:	c2 83       	std	Z+2, r28	; 0x02
   1bf64:	40 81       	ld	r20, Z
   1bf66:	51 81       	ldd	r21, Z+1	; 0x01
   1bf68:	84 0f       	add	r24, r20
   1bf6a:	95 1f       	adc	r25, r21
   1bf6c:	c8 17       	cp	r28, r24
   1bf6e:	d9 07       	cpc	r29, r25
   1bf70:	61 f4       	brne	.+24     	; 0x1bf8a <free+0xf4>
   1bf72:	4e 5f       	subi	r20, 0xFE	; 254
   1bf74:	5f 4f       	sbci	r21, 0xFF	; 255
   1bf76:	88 81       	ld	r24, Y
   1bf78:	99 81       	ldd	r25, Y+1	; 0x01
   1bf7a:	48 0f       	add	r20, r24
   1bf7c:	59 1f       	adc	r21, r25
   1bf7e:	51 83       	std	Z+1, r21	; 0x01
   1bf80:	40 83       	st	Z, r20
   1bf82:	8a 81       	ldd	r24, Y+2	; 0x02
   1bf84:	9b 81       	ldd	r25, Y+3	; 0x03
   1bf86:	93 83       	std	Z+3, r25	; 0x03
   1bf88:	82 83       	std	Z+2, r24	; 0x02
   1bf8a:	21 15       	cp	r18, r1
   1bf8c:	31 05       	cpc	r19, r1
   1bf8e:	09 f0       	breq	.+2      	; 0x1bf92 <free+0xfc>
   1bf90:	b0 cf       	rjmp	.-160    	; 0x1bef2 <free+0x5c>
   1bf92:	f0 93 bc 14 	sts	0x14BC, r31	; 0x8014bc <__flp+0x1>
   1bf96:	e0 93 bb 14 	sts	0x14BB, r30	; 0x8014bb <__flp>
   1bf9a:	9e cf       	rjmp	.-196    	; 0x1bed8 <free+0x42>
   1bf9c:	fd 01       	movw	r30, r26
   1bf9e:	dc 01       	movw	r26, r24
   1bfa0:	c0 cf       	rjmp	.-128    	; 0x1bf22 <free+0x8c>
   1bfa2:	13 82       	std	Z+3, r1	; 0x03
   1bfa4:	12 82       	std	Z+2, r1	; 0x02
   1bfa6:	d7 cf       	rjmp	.-82     	; 0x1bf56 <free+0xc0>

0001bfa8 <realloc>:
realloc():
   1bfa8:	4f 92       	push	r4
   1bfaa:	5f 92       	push	r5
   1bfac:	6f 92       	push	r6
   1bfae:	7f 92       	push	r7
   1bfb0:	8f 92       	push	r8
   1bfb2:	9f 92       	push	r9
   1bfb4:	af 92       	push	r10
   1bfb6:	bf 92       	push	r11
   1bfb8:	cf 92       	push	r12
   1bfba:	df 92       	push	r13
   1bfbc:	ef 92       	push	r14
   1bfbe:	ff 92       	push	r15
   1bfc0:	0f 93       	push	r16
   1bfc2:	1f 93       	push	r17
   1bfc4:	cf 93       	push	r28
   1bfc6:	df 93       	push	r29
   1bfc8:	8c 01       	movw	r16, r24
   1bfca:	00 97       	sbiw	r24, 0x00	; 0
   1bfcc:	99 f4       	brne	.+38     	; 0x1bff4 <realloc+0x4c>
   1bfce:	cb 01       	movw	r24, r22
   1bfd0:	df 91       	pop	r29
   1bfd2:	cf 91       	pop	r28
   1bfd4:	1f 91       	pop	r17
   1bfd6:	0f 91       	pop	r16
   1bfd8:	ff 90       	pop	r15
   1bfda:	ef 90       	pop	r14
   1bfdc:	df 90       	pop	r13
   1bfde:	cf 90       	pop	r12
   1bfe0:	bf 90       	pop	r11
   1bfe2:	af 90       	pop	r10
   1bfe4:	9f 90       	pop	r9
   1bfe6:	8f 90       	pop	r8
   1bfe8:	7f 90       	pop	r7
   1bfea:	6f 90       	pop	r6
   1bfec:	5f 90       	pop	r5
   1bfee:	4f 90       	pop	r4
   1bff0:	0c 94 af de 	jmp	0x1bd5e	; 0x1bd5e <malloc>
   1bff4:	fc 01       	movw	r30, r24
   1bff6:	e6 0f       	add	r30, r22
   1bff8:	f7 1f       	adc	r31, r23
   1bffa:	9c 01       	movw	r18, r24
   1bffc:	22 50       	subi	r18, 0x02	; 2
   1bffe:	31 09       	sbc	r19, r1
   1c000:	e2 17       	cp	r30, r18
   1c002:	f3 07       	cpc	r31, r19
   1c004:	08 f4       	brcc	.+2      	; 0x1c008 <realloc+0x60>
   1c006:	ae c0       	rjmp	.+348    	; 0x1c164 <realloc+0x1bc>
   1c008:	d9 01       	movw	r26, r18
   1c00a:	cd 91       	ld	r28, X+
   1c00c:	dc 91       	ld	r29, X
   1c00e:	11 97       	sbiw	r26, 0x01	; 1
   1c010:	c6 17       	cp	r28, r22
   1c012:	d7 07       	cpc	r29, r23
   1c014:	20 f1       	brcs	.+72     	; 0x1c05e <realloc+0xb6>
   1c016:	c5 30       	cpi	r28, 0x05	; 5
   1c018:	d1 05       	cpc	r29, r1
   1c01a:	78 f0       	brcs	.+30     	; 0x1c03a <realloc+0x92>
   1c01c:	ce 01       	movw	r24, r28
   1c01e:	04 97       	sbiw	r24, 0x04	; 4
   1c020:	86 17       	cp	r24, r22
   1c022:	97 07       	cpc	r25, r23
   1c024:	50 f0       	brcs	.+20     	; 0x1c03a <realloc+0x92>
   1c026:	c6 1b       	sub	r28, r22
   1c028:	d7 0b       	sbc	r29, r23
   1c02a:	22 97       	sbiw	r28, 0x02	; 2
   1c02c:	c1 93       	st	Z+, r28
   1c02e:	d1 93       	st	Z+, r29
   1c030:	6d 93       	st	X+, r22
   1c032:	7c 93       	st	X, r23
   1c034:	cf 01       	movw	r24, r30
   1c036:	0e 94 4b df 	call	0x1be96	; 0x1be96 <free>
   1c03a:	c8 01       	movw	r24, r16
   1c03c:	df 91       	pop	r29
   1c03e:	cf 91       	pop	r28
   1c040:	1f 91       	pop	r17
   1c042:	0f 91       	pop	r16
   1c044:	ff 90       	pop	r15
   1c046:	ef 90       	pop	r14
   1c048:	df 90       	pop	r13
   1c04a:	cf 90       	pop	r12
   1c04c:	bf 90       	pop	r11
   1c04e:	af 90       	pop	r10
   1c050:	9f 90       	pop	r9
   1c052:	8f 90       	pop	r8
   1c054:	7f 90       	pop	r7
   1c056:	6f 90       	pop	r6
   1c058:	5f 90       	pop	r5
   1c05a:	4f 90       	pop	r4
   1c05c:	08 95       	ret
   1c05e:	5b 01       	movw	r10, r22
   1c060:	ac 1a       	sub	r10, r28
   1c062:	bd 0a       	sbc	r11, r29
   1c064:	4c 01       	movw	r8, r24
   1c066:	8c 0e       	add	r8, r28
   1c068:	9d 1e       	adc	r9, r29
   1c06a:	a0 91 bb 14 	lds	r26, 0x14BB	; 0x8014bb <__flp>
   1c06e:	b0 91 bc 14 	lds	r27, 0x14BC	; 0x8014bc <__flp+0x1>
   1c072:	51 2c       	mov	r5, r1
   1c074:	41 2c       	mov	r4, r1
   1c076:	f1 2c       	mov	r15, r1
   1c078:	e1 2c       	mov	r14, r1
   1c07a:	10 97       	sbiw	r26, 0x00	; 0
   1c07c:	31 f5       	brne	.+76     	; 0x1c0ca <realloc+0x122>
   1c07e:	80 91 b9 14 	lds	r24, 0x14B9	; 0x8014b9 <__brkval>
   1c082:	90 91 ba 14 	lds	r25, 0x14BA	; 0x8014ba <__brkval+0x1>
   1c086:	88 15       	cp	r24, r8
   1c088:	99 05       	cpc	r25, r9
   1c08a:	09 f0       	breq	.+2      	; 0x1c08e <realloc+0xe6>
   1c08c:	5c c0       	rjmp	.+184    	; 0x1c146 <realloc+0x19e>
   1c08e:	46 16       	cp	r4, r22
   1c090:	57 06       	cpc	r5, r23
   1c092:	08 f0       	brcs	.+2      	; 0x1c096 <realloc+0xee>
   1c094:	58 c0       	rjmp	.+176    	; 0x1c146 <realloc+0x19e>
   1c096:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   1c09a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   1c09e:	00 97       	sbiw	r24, 0x00	; 0
   1c0a0:	41 f4       	brne	.+16     	; 0x1c0b2 <realloc+0x10a>
   1c0a2:	8d b7       	in	r24, 0x3d	; 61
   1c0a4:	9e b7       	in	r25, 0x3e	; 62
   1c0a6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   1c0aa:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   1c0ae:	84 1b       	sub	r24, r20
   1c0b0:	95 0b       	sbc	r25, r21
   1c0b2:	e8 17       	cp	r30, r24
   1c0b4:	f9 07       	cpc	r31, r25
   1c0b6:	08 f0       	brcs	.+2      	; 0x1c0ba <realloc+0x112>
   1c0b8:	55 c0       	rjmp	.+170    	; 0x1c164 <realloc+0x1bc>
   1c0ba:	f0 93 ba 14 	sts	0x14BA, r31	; 0x8014ba <__brkval+0x1>
   1c0be:	e0 93 b9 14 	sts	0x14B9, r30	; 0x8014b9 <__brkval>
   1c0c2:	f9 01       	movw	r30, r18
   1c0c4:	71 83       	std	Z+1, r23	; 0x01
   1c0c6:	60 83       	st	Z, r22
   1c0c8:	b8 cf       	rjmp	.-144    	; 0x1c03a <realloc+0x92>
   1c0ca:	8d 91       	ld	r24, X+
   1c0cc:	9c 91       	ld	r25, X
   1c0ce:	11 97       	sbiw	r26, 0x01	; 1
   1c0d0:	12 96       	adiw	r26, 0x02	; 2
   1c0d2:	6c 90       	ld	r6, X
   1c0d4:	12 97       	sbiw	r26, 0x02	; 2
   1c0d6:	13 96       	adiw	r26, 0x03	; 3
   1c0d8:	7c 90       	ld	r7, X
   1c0da:	13 97       	sbiw	r26, 0x03	; 3
   1c0dc:	a8 15       	cp	r26, r8
   1c0de:	b9 05       	cpc	r27, r9
   1c0e0:	59 f5       	brne	.+86     	; 0x1c138 <realloc+0x190>
   1c0e2:	6c 01       	movw	r12, r24
   1c0e4:	42 e0       	ldi	r20, 0x02	; 2
   1c0e6:	c4 0e       	add	r12, r20
   1c0e8:	d1 1c       	adc	r13, r1
   1c0ea:	ca 14       	cp	r12, r10
   1c0ec:	db 04       	cpc	r13, r11
   1c0ee:	20 f1       	brcs	.+72     	; 0x1c138 <realloc+0x190>
   1c0f0:	ac 01       	movw	r20, r24
   1c0f2:	4a 19       	sub	r20, r10
   1c0f4:	5b 09       	sbc	r21, r11
   1c0f6:	da 01       	movw	r26, r20
   1c0f8:	12 96       	adiw	r26, 0x02	; 2
   1c0fa:	15 97       	sbiw	r26, 0x05	; 5
   1c0fc:	80 f0       	brcs	.+32     	; 0x1c11e <realloc+0x176>
   1c0fe:	62 82       	std	Z+2, r6	; 0x02
   1c100:	73 82       	std	Z+3, r7	; 0x03
   1c102:	51 83       	std	Z+1, r21	; 0x01
   1c104:	40 83       	st	Z, r20
   1c106:	d9 01       	movw	r26, r18
   1c108:	6d 93       	st	X+, r22
   1c10a:	7c 93       	st	X, r23
   1c10c:	e1 14       	cp	r14, r1
   1c10e:	f1 04       	cpc	r15, r1
   1c110:	71 f0       	breq	.+28     	; 0x1c12e <realloc+0x186>
   1c112:	d7 01       	movw	r26, r14
   1c114:	13 96       	adiw	r26, 0x03	; 3
   1c116:	fc 93       	st	X, r31
   1c118:	ee 93       	st	-X, r30
   1c11a:	12 97       	sbiw	r26, 0x02	; 2
   1c11c:	8e cf       	rjmp	.-228    	; 0x1c03a <realloc+0x92>
   1c11e:	22 96       	adiw	r28, 0x02	; 2
   1c120:	8c 0f       	add	r24, r28
   1c122:	9d 1f       	adc	r25, r29
   1c124:	f9 01       	movw	r30, r18
   1c126:	91 83       	std	Z+1, r25	; 0x01
   1c128:	80 83       	st	Z, r24
   1c12a:	f3 01       	movw	r30, r6
   1c12c:	ef cf       	rjmp	.-34     	; 0x1c10c <realloc+0x164>
   1c12e:	f0 93 bc 14 	sts	0x14BC, r31	; 0x8014bc <__flp+0x1>
   1c132:	e0 93 bb 14 	sts	0x14BB, r30	; 0x8014bb <__flp>
   1c136:	81 cf       	rjmp	.-254    	; 0x1c03a <realloc+0x92>
   1c138:	48 16       	cp	r4, r24
   1c13a:	59 06       	cpc	r5, r25
   1c13c:	08 f4       	brcc	.+2      	; 0x1c140 <realloc+0x198>
   1c13e:	2c 01       	movw	r4, r24
   1c140:	7d 01       	movw	r14, r26
   1c142:	d3 01       	movw	r26, r6
   1c144:	9a cf       	rjmp	.-204    	; 0x1c07a <realloc+0xd2>
   1c146:	cb 01       	movw	r24, r22
   1c148:	0e 94 af de 	call	0x1bd5e	; 0x1bd5e <malloc>
   1c14c:	7c 01       	movw	r14, r24
   1c14e:	00 97       	sbiw	r24, 0x00	; 0
   1c150:	49 f0       	breq	.+18     	; 0x1c164 <realloc+0x1bc>
   1c152:	ae 01       	movw	r20, r28
   1c154:	b8 01       	movw	r22, r16
   1c156:	0e 94 fe e1 	call	0x1c3fc	; 0x1c3fc <memcpy>
   1c15a:	c8 01       	movw	r24, r16
   1c15c:	0e 94 4b df 	call	0x1be96	; 0x1be96 <free>
   1c160:	87 01       	movw	r16, r14
   1c162:	6b cf       	rjmp	.-298    	; 0x1c03a <realloc+0x92>
   1c164:	10 e0       	ldi	r17, 0x00	; 0
   1c166:	00 e0       	ldi	r16, 0x00	; 0
   1c168:	68 cf       	rjmp	.-304    	; 0x1c03a <realloc+0x92>

0001c16a <strtoul>:
strtoul():
   1c16a:	3f 92       	push	r3
   1c16c:	4f 92       	push	r4
   1c16e:	5f 92       	push	r5
   1c170:	6f 92       	push	r6
   1c172:	7f 92       	push	r7
   1c174:	8f 92       	push	r8
   1c176:	9f 92       	push	r9
   1c178:	af 92       	push	r10
   1c17a:	bf 92       	push	r11
   1c17c:	cf 92       	push	r12
   1c17e:	df 92       	push	r13
   1c180:	ef 92       	push	r14
   1c182:	ff 92       	push	r15
   1c184:	0f 93       	push	r16
   1c186:	1f 93       	push	r17
   1c188:	cf 93       	push	r28
   1c18a:	df 93       	push	r29
   1c18c:	5c 01       	movw	r10, r24
   1c18e:	6b 01       	movw	r12, r22
   1c190:	7a 01       	movw	r14, r20
   1c192:	61 15       	cp	r22, r1
   1c194:	71 05       	cpc	r23, r1
   1c196:	19 f0       	breq	.+6      	; 0x1c19e <strtoul+0x34>
   1c198:	fb 01       	movw	r30, r22
   1c19a:	91 83       	std	Z+1, r25	; 0x01
   1c19c:	80 83       	st	Z, r24
   1c19e:	e1 14       	cp	r14, r1
   1c1a0:	f1 04       	cpc	r15, r1
   1c1a2:	49 f0       	breq	.+18     	; 0x1c1b6 <strtoul+0x4c>
   1c1a4:	c7 01       	movw	r24, r14
   1c1a6:	02 97       	sbiw	r24, 0x02	; 2
   1c1a8:	83 97       	sbiw	r24, 0x23	; 35
   1c1aa:	28 f0       	brcs	.+10     	; 0x1c1b6 <strtoul+0x4c>
   1c1ac:	60 e0       	ldi	r22, 0x00	; 0
   1c1ae:	70 e0       	ldi	r23, 0x00	; 0
   1c1b0:	cb 01       	movw	r24, r22
   1c1b2:	9b c0       	rjmp	.+310    	; 0x1c2ea <strtoul+0x180>
   1c1b4:	5e 01       	movw	r10, r28
   1c1b6:	e5 01       	movw	r28, r10
   1c1b8:	21 96       	adiw	r28, 0x01	; 1
   1c1ba:	f5 01       	movw	r30, r10
   1c1bc:	10 81       	ld	r17, Z
   1c1be:	81 2f       	mov	r24, r17
   1c1c0:	90 e0       	ldi	r25, 0x00	; 0
   1c1c2:	0e 94 df e1 	call	0x1c3be	; 0x1c3be <isspace>
   1c1c6:	89 2b       	or	r24, r25
   1c1c8:	a9 f7       	brne	.-22     	; 0x1c1b4 <strtoul+0x4a>
   1c1ca:	1d 32       	cpi	r17, 0x2D	; 45
   1c1cc:	09 f0       	breq	.+2      	; 0x1c1d0 <strtoul+0x66>
   1c1ce:	5c c0       	rjmp	.+184    	; 0x1c288 <strtoul+0x11e>
   1c1d0:	21 96       	adiw	r28, 0x01	; 1
   1c1d2:	f5 01       	movw	r30, r10
   1c1d4:	11 81       	ldd	r17, Z+1	; 0x01
   1c1d6:	01 e0       	ldi	r16, 0x01	; 1
   1c1d8:	e1 14       	cp	r14, r1
   1c1da:	f1 04       	cpc	r15, r1
   1c1dc:	09 f4       	brne	.+2      	; 0x1c1e0 <strtoul+0x76>
   1c1de:	bb c0       	rjmp	.+374    	; 0x1c356 <strtoul+0x1ec>
   1c1e0:	f0 e1       	ldi	r31, 0x10	; 16
   1c1e2:	ef 16       	cp	r14, r31
   1c1e4:	f1 04       	cpc	r15, r1
   1c1e6:	09 f0       	breq	.+2      	; 0x1c1ea <strtoul+0x80>
   1c1e8:	9b c0       	rjmp	.+310    	; 0x1c320 <strtoul+0x1b6>
   1c1ea:	10 33       	cpi	r17, 0x30	; 48
   1c1ec:	41 f4       	brne	.+16     	; 0x1c1fe <strtoul+0x94>
   1c1ee:	88 81       	ld	r24, Y
   1c1f0:	8f 7d       	andi	r24, 0xDF	; 223
   1c1f2:	88 35       	cpi	r24, 0x58	; 88
   1c1f4:	09 f0       	breq	.+2      	; 0x1c1f8 <strtoul+0x8e>
   1c1f6:	8f c0       	rjmp	.+286    	; 0x1c316 <strtoul+0x1ac>
   1c1f8:	19 81       	ldd	r17, Y+1	; 0x01
   1c1fa:	22 96       	adiw	r28, 0x02	; 2
   1c1fc:	02 60       	ori	r16, 0x02	; 2
   1c1fe:	e0 e1       	ldi	r30, 0x10	; 16
   1c200:	ee 2e       	mov	r14, r30
   1c202:	f1 2c       	mov	r15, r1
   1c204:	88 24       	eor	r8, r8
   1c206:	8a 94       	dec	r8
   1c208:	98 2c       	mov	r9, r8
   1c20a:	a8 2c       	mov	r10, r8
   1c20c:	ff e0       	ldi	r31, 0x0F	; 15
   1c20e:	bf 2e       	mov	r11, r31
   1c210:	20 e0       	ldi	r18, 0x00	; 0
   1c212:	60 e0       	ldi	r22, 0x00	; 0
   1c214:	70 e0       	ldi	r23, 0x00	; 0
   1c216:	cb 01       	movw	r24, r22
   1c218:	27 01       	movw	r4, r14
   1c21a:	0f 2c       	mov	r0, r15
   1c21c:	00 0c       	add	r0, r0
   1c21e:	66 08       	sbc	r6, r6
   1c220:	77 08       	sbc	r7, r7
   1c222:	fe 01       	movw	r30, r28
   1c224:	50 ed       	ldi	r21, 0xD0	; 208
   1c226:	35 2e       	mov	r3, r21
   1c228:	31 0e       	add	r3, r17
   1c22a:	39 e0       	ldi	r19, 0x09	; 9
   1c22c:	33 15       	cp	r19, r3
   1c22e:	68 f4       	brcc	.+26     	; 0x1c24a <strtoul+0xe0>
   1c230:	3f eb       	ldi	r19, 0xBF	; 191
   1c232:	31 0f       	add	r19, r17
   1c234:	49 ec       	ldi	r20, 0xC9	; 201
   1c236:	34 2e       	mov	r3, r20
   1c238:	3a 31       	cpi	r19, 0x1A	; 26
   1c23a:	30 f0       	brcs	.+12     	; 0x1c248 <strtoul+0xde>
   1c23c:	3f e9       	ldi	r19, 0x9F	; 159
   1c23e:	31 0f       	add	r19, r17
   1c240:	3a 31       	cpi	r19, 0x1A	; 26
   1c242:	b0 f5       	brcc	.+108    	; 0x1c2b0 <strtoul+0x146>
   1c244:	39 ea       	ldi	r19, 0xA9	; 169
   1c246:	33 2e       	mov	r3, r19
   1c248:	31 0e       	add	r3, r17
   1c24a:	3e 14       	cp	r3, r14
   1c24c:	1f 04       	cpc	r1, r15
   1c24e:	84 f5       	brge	.+96     	; 0x1c2b0 <strtoul+0x146>
   1c250:	2f 3f       	cpi	r18, 0xFF	; 255
   1c252:	b9 f0       	breq	.+46     	; 0x1c282 <strtoul+0x118>
   1c254:	86 16       	cp	r8, r22
   1c256:	97 06       	cpc	r9, r23
   1c258:	a8 06       	cpc	r10, r24
   1c25a:	b9 06       	cpc	r11, r25
   1c25c:	38 f1       	brcs	.+78     	; 0x1c2ac <strtoul+0x142>
   1c25e:	a3 01       	movw	r20, r6
   1c260:	92 01       	movw	r18, r4
   1c262:	0e 94 ea dd 	call	0x1bbd4	; 0x1bbd4 <__mulsi3>
   1c266:	23 2d       	mov	r18, r3
   1c268:	30 e0       	ldi	r19, 0x00	; 0
   1c26a:	50 e0       	ldi	r21, 0x00	; 0
   1c26c:	40 e0       	ldi	r20, 0x00	; 0
   1c26e:	62 0f       	add	r22, r18
   1c270:	73 1f       	adc	r23, r19
   1c272:	84 1f       	adc	r24, r20
   1c274:	95 1f       	adc	r25, r21
   1c276:	62 17       	cp	r22, r18
   1c278:	73 07       	cpc	r23, r19
   1c27a:	84 07       	cpc	r24, r20
   1c27c:	95 07       	cpc	r25, r21
   1c27e:	b0 f0       	brcs	.+44     	; 0x1c2ac <strtoul+0x142>
   1c280:	21 e0       	ldi	r18, 0x01	; 1
   1c282:	21 96       	adiw	r28, 0x01	; 1
   1c284:	10 81       	ld	r17, Z
   1c286:	cd cf       	rjmp	.-102    	; 0x1c222 <strtoul+0xb8>
   1c288:	1b 32       	cpi	r17, 0x2B	; 43
   1c28a:	21 f4       	brne	.+8      	; 0x1c294 <strtoul+0x12a>
   1c28c:	e5 01       	movw	r28, r10
   1c28e:	22 96       	adiw	r28, 0x02	; 2
   1c290:	f5 01       	movw	r30, r10
   1c292:	11 81       	ldd	r17, Z+1	; 0x01
   1c294:	00 e0       	ldi	r16, 0x00	; 0
   1c296:	a0 cf       	rjmp	.-192    	; 0x1c1d8 <strtoul+0x6e>
   1c298:	78 e0       	ldi	r23, 0x08	; 8
   1c29a:	e7 2e       	mov	r14, r23
   1c29c:	f1 2c       	mov	r15, r1
   1c29e:	88 24       	eor	r8, r8
   1c2a0:	8a 94       	dec	r8
   1c2a2:	98 2c       	mov	r9, r8
   1c2a4:	a8 2c       	mov	r10, r8
   1c2a6:	6f e1       	ldi	r22, 0x1F	; 31
   1c2a8:	b6 2e       	mov	r11, r22
   1c2aa:	b2 cf       	rjmp	.-156    	; 0x1c210 <strtoul+0xa6>
   1c2ac:	2f ef       	ldi	r18, 0xFF	; 255
   1c2ae:	e9 cf       	rjmp	.-46     	; 0x1c282 <strtoul+0x118>
   1c2b0:	c1 14       	cp	r12, r1
   1c2b2:	d1 04       	cpc	r13, r1
   1c2b4:	31 f0       	breq	.+12     	; 0x1c2c2 <strtoul+0x158>
   1c2b6:	22 23       	and	r18, r18
   1c2b8:	51 f1       	breq	.+84     	; 0x1c30e <strtoul+0x1a4>
   1c2ba:	21 97       	sbiw	r28, 0x01	; 1
   1c2bc:	f6 01       	movw	r30, r12
   1c2be:	d1 83       	std	Z+1, r29	; 0x01
   1c2c0:	c0 83       	st	Z, r28
   1c2c2:	00 ff       	sbrs	r16, 0
   1c2c4:	07 c0       	rjmp	.+14     	; 0x1c2d4 <strtoul+0x16a>
   1c2c6:	90 95       	com	r25
   1c2c8:	80 95       	com	r24
   1c2ca:	70 95       	com	r23
   1c2cc:	61 95       	neg	r22
   1c2ce:	7f 4f       	sbci	r23, 0xFF	; 255
   1c2d0:	8f 4f       	sbci	r24, 0xFF	; 255
   1c2d2:	9f 4f       	sbci	r25, 0xFF	; 255
   1c2d4:	2f 3f       	cpi	r18, 0xFF	; 255
   1c2d6:	49 f4       	brne	.+18     	; 0x1c2ea <strtoul+0x180>
   1c2d8:	82 e2       	ldi	r24, 0x22	; 34
   1c2da:	90 e0       	ldi	r25, 0x00	; 0
   1c2dc:	90 93 d4 14 	sts	0x14D4, r25	; 0x8014d4 <errno+0x1>
   1c2e0:	80 93 d3 14 	sts	0x14D3, r24	; 0x8014d3 <errno>
   1c2e4:	6f ef       	ldi	r22, 0xFF	; 255
   1c2e6:	7f ef       	ldi	r23, 0xFF	; 255
   1c2e8:	cb 01       	movw	r24, r22
   1c2ea:	df 91       	pop	r29
   1c2ec:	cf 91       	pop	r28
   1c2ee:	1f 91       	pop	r17
   1c2f0:	0f 91       	pop	r16
   1c2f2:	ff 90       	pop	r15
   1c2f4:	ef 90       	pop	r14
   1c2f6:	df 90       	pop	r13
   1c2f8:	cf 90       	pop	r12
   1c2fa:	bf 90       	pop	r11
   1c2fc:	af 90       	pop	r10
   1c2fe:	9f 90       	pop	r9
   1c300:	8f 90       	pop	r8
   1c302:	7f 90       	pop	r7
   1c304:	6f 90       	pop	r6
   1c306:	5f 90       	pop	r5
   1c308:	4f 90       	pop	r4
   1c30a:	3f 90       	pop	r3
   1c30c:	08 95       	ret
   1c30e:	01 ff       	sbrs	r16, 1
   1c310:	d8 cf       	rjmp	.-80     	; 0x1c2c2 <strtoul+0x158>
   1c312:	22 97       	sbiw	r28, 0x02	; 2
   1c314:	d3 cf       	rjmp	.-90     	; 0x1c2bc <strtoul+0x152>
   1c316:	10 e3       	ldi	r17, 0x30	; 48
   1c318:	e1 14       	cp	r14, r1
   1c31a:	f1 04       	cpc	r15, r1
   1c31c:	09 f4       	brne	.+2      	; 0x1c320 <strtoul+0x1b6>
   1c31e:	bc cf       	rjmp	.-136    	; 0x1c298 <strtoul+0x12e>
   1c320:	3a e0       	ldi	r19, 0x0A	; 10
   1c322:	e3 16       	cp	r14, r19
   1c324:	f1 04       	cpc	r15, r1
   1c326:	e9 f0       	breq	.+58     	; 0x1c362 <strtoul+0x1f8>
   1c328:	80 e1       	ldi	r24, 0x10	; 16
   1c32a:	e8 16       	cp	r14, r24
   1c32c:	f1 04       	cpc	r15, r1
   1c32e:	09 f4       	brne	.+2      	; 0x1c332 <strtoul+0x1c8>
   1c330:	66 cf       	rjmp	.-308    	; 0x1c1fe <strtoul+0x94>
   1c332:	e8 e0       	ldi	r30, 0x08	; 8
   1c334:	ee 16       	cp	r14, r30
   1c336:	f1 04       	cpc	r15, r1
   1c338:	09 f4       	brne	.+2      	; 0x1c33c <strtoul+0x1d2>
   1c33a:	b1 cf       	rjmp	.-158    	; 0x1c29e <strtoul+0x134>
   1c33c:	6f ef       	ldi	r22, 0xFF	; 255
   1c33e:	7f ef       	ldi	r23, 0xFF	; 255
   1c340:	cb 01       	movw	r24, r22
   1c342:	97 01       	movw	r18, r14
   1c344:	0f 2c       	mov	r0, r15
   1c346:	00 0c       	add	r0, r0
   1c348:	44 0b       	sbc	r20, r20
   1c34a:	55 0b       	sbc	r21, r21
   1c34c:	0e 94 2e de 	call	0x1bc5c	; 0x1bc5c <__udivmodsi4>
   1c350:	49 01       	movw	r8, r18
   1c352:	5a 01       	movw	r10, r20
   1c354:	5d cf       	rjmp	.-326    	; 0x1c210 <strtoul+0xa6>
   1c356:	10 33       	cpi	r17, 0x30	; 48
   1c358:	09 f4       	brne	.+2      	; 0x1c35c <strtoul+0x1f2>
   1c35a:	49 cf       	rjmp	.-366    	; 0x1c1ee <strtoul+0x84>
   1c35c:	9a e0       	ldi	r25, 0x0A	; 10
   1c35e:	e9 2e       	mov	r14, r25
   1c360:	f1 2c       	mov	r15, r1
   1c362:	89 e9       	ldi	r24, 0x99	; 153
   1c364:	88 2e       	mov	r8, r24
   1c366:	98 2c       	mov	r9, r8
   1c368:	a8 2c       	mov	r10, r8
   1c36a:	89 e1       	ldi	r24, 0x19	; 25
   1c36c:	b8 2e       	mov	r11, r24
   1c36e:	50 cf       	rjmp	.-352    	; 0x1c210 <strtoul+0xa6>

0001c370 <abort>:
abort():
   1c370:	81 e0       	ldi	r24, 0x01	; 1
   1c372:	90 e0       	ldi	r25, 0x00	; 0
   1c374:	f8 94       	cli
   1c376:	0c 94 2f ea 	jmp	0x1d45e	; 0x1d45e <_exit>

0001c37a <atof>:
atof():
   1c37a:	66 27       	eor	r22, r22
   1c37c:	77 27       	eor	r23, r23
   1c37e:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <strtod>

0001c382 <atoi>:
atoi():
   1c382:	fc 01       	movw	r30, r24
   1c384:	88 27       	eor	r24, r24
   1c386:	99 27       	eor	r25, r25
   1c388:	e8 94       	clt
   1c38a:	21 91       	ld	r18, Z+
   1c38c:	20 32       	cpi	r18, 0x20	; 32
   1c38e:	e9 f3       	breq	.-6      	; 0x1c38a <atoi+0x8>
   1c390:	29 30       	cpi	r18, 0x09	; 9
   1c392:	10 f0       	brcs	.+4      	; 0x1c398 <atoi+0x16>
   1c394:	2e 30       	cpi	r18, 0x0E	; 14
   1c396:	c8 f3       	brcs	.-14     	; 0x1c38a <atoi+0x8>
   1c398:	2b 32       	cpi	r18, 0x2B	; 43
   1c39a:	41 f0       	breq	.+16     	; 0x1c3ac <atoi+0x2a>
   1c39c:	2d 32       	cpi	r18, 0x2D	; 45
   1c39e:	39 f4       	brne	.+14     	; 0x1c3ae <atoi+0x2c>
   1c3a0:	68 94       	set
   1c3a2:	04 c0       	rjmp	.+8      	; 0x1c3ac <atoi+0x2a>
   1c3a4:	0e 94 87 e2 	call	0x1c50e	; 0x1c50e <__mulhi_const_10>
   1c3a8:	82 0f       	add	r24, r18
   1c3aa:	91 1d       	adc	r25, r1
   1c3ac:	21 91       	ld	r18, Z+
   1c3ae:	20 53       	subi	r18, 0x30	; 48
   1c3b0:	2a 30       	cpi	r18, 0x0A	; 10
   1c3b2:	c0 f3       	brcs	.-16     	; 0x1c3a4 <atoi+0x22>
   1c3b4:	1e f4       	brtc	.+6      	; 0x1c3bc <atoi+0x3a>
   1c3b6:	90 95       	com	r25
   1c3b8:	81 95       	neg	r24
   1c3ba:	9f 4f       	sbci	r25, 0xFF	; 255
   1c3bc:	08 95       	ret

0001c3be <isspace>:
isspace():
   1c3be:	91 11       	cpse	r25, r1
   1c3c0:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__ctype_isfalse>
   1c3c4:	80 32       	cpi	r24, 0x20	; 32
   1c3c6:	19 f0       	breq	.+6      	; 0x1c3ce <isspace+0x10>
   1c3c8:	89 50       	subi	r24, 0x09	; 9
   1c3ca:	85 50       	subi	r24, 0x05	; 5
   1c3cc:	c8 f7       	brcc	.-14     	; 0x1c3c0 <isspace+0x2>
   1c3ce:	08 95       	ret

0001c3d0 <strcat_P>:
strcat_P():
   1c3d0:	fb 01       	movw	r30, r22
   1c3d2:	dc 01       	movw	r26, r24
   1c3d4:	0d 90       	ld	r0, X+
   1c3d6:	00 20       	and	r0, r0
   1c3d8:	e9 f7       	brne	.-6      	; 0x1c3d4 <strcat_P+0x4>
   1c3da:	11 97       	sbiw	r26, 0x01	; 1
   1c3dc:	05 90       	lpm	r0, Z+
   1c3de:	0d 92       	st	X+, r0
   1c3e0:	00 20       	and	r0, r0
   1c3e2:	e1 f7       	brne	.-8      	; 0x1c3dc <strcat_P+0xc>
   1c3e4:	08 95       	ret

0001c3e6 <strcpy_P>:
strcpy_P():
   1c3e6:	fb 01       	movw	r30, r22
   1c3e8:	dc 01       	movw	r26, r24
   1c3ea:	05 90       	lpm	r0, Z+
   1c3ec:	0d 92       	st	X+, r0
   1c3ee:	00 20       	and	r0, r0
   1c3f0:	e1 f7       	brne	.-8      	; 0x1c3ea <strcpy_P+0x4>
   1c3f2:	08 95       	ret

0001c3f4 <strtok>:
strtok():
   1c3f4:	4a e4       	ldi	r20, 0x4A	; 74
   1c3f6:	59 e0       	ldi	r21, 0x09	; 9
   1c3f8:	0c 94 4a e2 	jmp	0x1c494	; 0x1c494 <strtok_r>

0001c3fc <memcpy>:
memcpy():
   1c3fc:	fb 01       	movw	r30, r22
   1c3fe:	dc 01       	movw	r26, r24
   1c400:	02 c0       	rjmp	.+4      	; 0x1c406 <memcpy+0xa>
   1c402:	01 90       	ld	r0, Z+
   1c404:	0d 92       	st	X+, r0
   1c406:	41 50       	subi	r20, 0x01	; 1
   1c408:	50 40       	sbci	r21, 0x00	; 0
   1c40a:	d8 f7       	brcc	.-10     	; 0x1c402 <memcpy+0x6>
   1c40c:	08 95       	ret

0001c40e <strcat>:
strcat():
   1c40e:	fb 01       	movw	r30, r22
   1c410:	dc 01       	movw	r26, r24
   1c412:	0d 90       	ld	r0, X+
   1c414:	00 20       	and	r0, r0
   1c416:	e9 f7       	brne	.-6      	; 0x1c412 <strcat+0x4>
   1c418:	11 97       	sbiw	r26, 0x01	; 1
   1c41a:	01 90       	ld	r0, Z+
   1c41c:	0d 92       	st	X+, r0
   1c41e:	00 20       	and	r0, r0
   1c420:	e1 f7       	brne	.-8      	; 0x1c41a <strcat+0xc>
   1c422:	08 95       	ret

0001c424 <strchr>:
strchr():
   1c424:	fc 01       	movw	r30, r24
   1c426:	81 91       	ld	r24, Z+
   1c428:	86 17       	cp	r24, r22
   1c42a:	21 f0       	breq	.+8      	; 0x1c434 <strchr+0x10>
   1c42c:	88 23       	and	r24, r24
   1c42e:	d9 f7       	brne	.-10     	; 0x1c426 <strchr+0x2>
   1c430:	99 27       	eor	r25, r25
   1c432:	08 95       	ret
   1c434:	31 97       	sbiw	r30, 0x01	; 1
   1c436:	cf 01       	movw	r24, r30
   1c438:	08 95       	ret

0001c43a <strcmp>:
strcmp():
   1c43a:	fb 01       	movw	r30, r22
   1c43c:	dc 01       	movw	r26, r24
   1c43e:	8d 91       	ld	r24, X+
   1c440:	01 90       	ld	r0, Z+
   1c442:	80 19       	sub	r24, r0
   1c444:	01 10       	cpse	r0, r1
   1c446:	d9 f3       	breq	.-10     	; 0x1c43e <strcmp+0x4>
   1c448:	99 0b       	sbc	r25, r25
   1c44a:	08 95       	ret

0001c44c <strcpy>:
strcpy():
   1c44c:	fb 01       	movw	r30, r22
   1c44e:	dc 01       	movw	r26, r24
   1c450:	01 90       	ld	r0, Z+
   1c452:	0d 92       	st	X+, r0
   1c454:	00 20       	and	r0, r0
   1c456:	e1 f7       	brne	.-8      	; 0x1c450 <strcpy+0x4>
   1c458:	08 95       	ret

0001c45a <strncmp>:
strncmp():
   1c45a:	fb 01       	movw	r30, r22
   1c45c:	dc 01       	movw	r26, r24
   1c45e:	41 50       	subi	r20, 0x01	; 1
   1c460:	50 40       	sbci	r21, 0x00	; 0
   1c462:	30 f0       	brcs	.+12     	; 0x1c470 <strncmp+0x16>
   1c464:	8d 91       	ld	r24, X+
   1c466:	01 90       	ld	r0, Z+
   1c468:	80 19       	sub	r24, r0
   1c46a:	19 f4       	brne	.+6      	; 0x1c472 <strncmp+0x18>
   1c46c:	00 20       	and	r0, r0
   1c46e:	b9 f7       	brne	.-18     	; 0x1c45e <strncmp+0x4>
   1c470:	88 1b       	sub	r24, r24
   1c472:	99 0b       	sbc	r25, r25
   1c474:	08 95       	ret

0001c476 <strncpy>:
strncpy():
   1c476:	fb 01       	movw	r30, r22
   1c478:	dc 01       	movw	r26, r24
   1c47a:	41 50       	subi	r20, 0x01	; 1
   1c47c:	50 40       	sbci	r21, 0x00	; 0
   1c47e:	48 f0       	brcs	.+18     	; 0x1c492 <strncpy+0x1c>
   1c480:	01 90       	ld	r0, Z+
   1c482:	0d 92       	st	X+, r0
   1c484:	00 20       	and	r0, r0
   1c486:	c9 f7       	brne	.-14     	; 0x1c47a <strncpy+0x4>
   1c488:	01 c0       	rjmp	.+2      	; 0x1c48c <strncpy+0x16>
   1c48a:	1d 92       	st	X+, r1
   1c48c:	41 50       	subi	r20, 0x01	; 1
   1c48e:	50 40       	sbci	r21, 0x00	; 0
   1c490:	e0 f7       	brcc	.-8      	; 0x1c48a <strncpy+0x14>
   1c492:	08 95       	ret

0001c494 <strtok_r>:
strtok_r():
   1c494:	fa 01       	movw	r30, r20
   1c496:	a1 91       	ld	r26, Z+
   1c498:	b0 81       	ld	r27, Z
   1c49a:	00 97       	sbiw	r24, 0x00	; 0
   1c49c:	19 f4       	brne	.+6      	; 0x1c4a4 <strtok_r+0x10>
   1c49e:	10 97       	sbiw	r26, 0x00	; 0
   1c4a0:	e1 f0       	breq	.+56     	; 0x1c4da <strtok_r+0x46>
   1c4a2:	cd 01       	movw	r24, r26
   1c4a4:	dc 01       	movw	r26, r24
   1c4a6:	cd 01       	movw	r24, r26
   1c4a8:	0d 90       	ld	r0, X+
   1c4aa:	00 20       	and	r0, r0
   1c4ac:	11 f4       	brne	.+4      	; 0x1c4b2 <strtok_r+0x1e>
   1c4ae:	c0 01       	movw	r24, r0
   1c4b0:	13 c0       	rjmp	.+38     	; 0x1c4d8 <strtok_r+0x44>
   1c4b2:	fb 01       	movw	r30, r22
   1c4b4:	21 91       	ld	r18, Z+
   1c4b6:	22 23       	and	r18, r18
   1c4b8:	19 f0       	breq	.+6      	; 0x1c4c0 <strtok_r+0x2c>
   1c4ba:	20 15       	cp	r18, r0
   1c4bc:	d9 f7       	brne	.-10     	; 0x1c4b4 <strtok_r+0x20>
   1c4be:	f3 cf       	rjmp	.-26     	; 0x1c4a6 <strtok_r+0x12>
   1c4c0:	fb 01       	movw	r30, r22
   1c4c2:	21 91       	ld	r18, Z+
   1c4c4:	20 15       	cp	r18, r0
   1c4c6:	19 f4       	brne	.+6      	; 0x1c4ce <strtok_r+0x3a>
   1c4c8:	1e 92       	st	-X, r1
   1c4ca:	11 96       	adiw	r26, 0x01	; 1
   1c4cc:	06 c0       	rjmp	.+12     	; 0x1c4da <strtok_r+0x46>
   1c4ce:	22 23       	and	r18, r18
   1c4d0:	c1 f7       	brne	.-16     	; 0x1c4c2 <strtok_r+0x2e>
   1c4d2:	0d 90       	ld	r0, X+
   1c4d4:	00 20       	and	r0, r0
   1c4d6:	a1 f7       	brne	.-24     	; 0x1c4c0 <strtok_r+0x2c>
   1c4d8:	d0 01       	movw	r26, r0
   1c4da:	fa 01       	movw	r30, r20
   1c4dc:	a1 93       	st	Z+, r26
   1c4de:	b0 83       	st	Z, r27
   1c4e0:	08 95       	ret

0001c4e2 <itoa>:
itoa():
   1c4e2:	45 32       	cpi	r20, 0x25	; 37
   1c4e4:	51 05       	cpc	r21, r1
   1c4e6:	20 f4       	brcc	.+8      	; 0x1c4f0 <itoa+0xe>
   1c4e8:	42 30       	cpi	r20, 0x02	; 2
   1c4ea:	10 f0       	brcs	.+4      	; 0x1c4f0 <itoa+0xe>
   1c4ec:	0c 94 7c e2 	jmp	0x1c4f8	; 0x1c4f8 <__itoa_ncheck>
   1c4f0:	fb 01       	movw	r30, r22
   1c4f2:	10 82       	st	Z, r1
   1c4f4:	cb 01       	movw	r24, r22
   1c4f6:	08 95       	ret

0001c4f8 <__itoa_ncheck>:
__itoa_ncheck():
   1c4f8:	bb 27       	eor	r27, r27
   1c4fa:	4a 30       	cpi	r20, 0x0A	; 10
   1c4fc:	31 f4       	brne	.+12     	; 0x1c50a <__itoa_ncheck+0x12>
   1c4fe:	99 23       	and	r25, r25
   1c500:	22 f4       	brpl	.+8      	; 0x1c50a <__itoa_ncheck+0x12>
   1c502:	bd e2       	ldi	r27, 0x2D	; 45
   1c504:	90 95       	com	r25
   1c506:	81 95       	neg	r24
   1c508:	9f 4f       	sbci	r25, 0xFF	; 255
   1c50a:	0c 94 90 e2 	jmp	0x1c520	; 0x1c520 <__utoa_common>

0001c50e <__mulhi_const_10>:
__mulhi_const_10():
   1c50e:	7a e0       	ldi	r23, 0x0A	; 10
   1c510:	97 9f       	mul	r25, r23
   1c512:	90 2d       	mov	r25, r0
   1c514:	87 9f       	mul	r24, r23
   1c516:	80 2d       	mov	r24, r0
   1c518:	91 0d       	add	r25, r1
   1c51a:	11 24       	eor	r1, r1
   1c51c:	08 95       	ret

0001c51e <__utoa_ncheck>:
__utoa_ncheck():
   1c51e:	bb 27       	eor	r27, r27

0001c520 <__utoa_common>:
   1c520:	fb 01       	movw	r30, r22
   1c522:	55 27       	eor	r21, r21
   1c524:	aa 27       	eor	r26, r26
   1c526:	88 0f       	add	r24, r24
   1c528:	99 1f       	adc	r25, r25
   1c52a:	aa 1f       	adc	r26, r26
   1c52c:	a4 17       	cp	r26, r20
   1c52e:	10 f0       	brcs	.+4      	; 0x1c534 <__utoa_common+0x14>
   1c530:	a4 1b       	sub	r26, r20
   1c532:	83 95       	inc	r24
   1c534:	50 51       	subi	r21, 0x10	; 16
   1c536:	b9 f7       	brne	.-18     	; 0x1c526 <__utoa_common+0x6>
   1c538:	a0 5d       	subi	r26, 0xD0	; 208
   1c53a:	aa 33       	cpi	r26, 0x3A	; 58
   1c53c:	08 f0       	brcs	.+2      	; 0x1c540 <__utoa_common+0x20>
   1c53e:	a9 5d       	subi	r26, 0xD9	; 217
   1c540:	a1 93       	st	Z+, r26
   1c542:	00 97       	sbiw	r24, 0x00	; 0
   1c544:	79 f7       	brne	.-34     	; 0x1c524 <__utoa_common+0x4>
   1c546:	b1 11       	cpse	r27, r1
   1c548:	b1 93       	st	Z+, r27
   1c54a:	11 92       	st	Z+, r1
   1c54c:	cb 01       	movw	r24, r22
   1c54e:	0c 94 7b e9 	jmp	0x1d2f6	; 0x1d2f6 <strrev>

0001c552 <fdevopen>:
fdevopen():
   1c552:	0f 93       	push	r16
   1c554:	1f 93       	push	r17
   1c556:	cf 93       	push	r28
   1c558:	df 93       	push	r29
   1c55a:	00 97       	sbiw	r24, 0x00	; 0
   1c55c:	59 f4       	brne	.+22     	; 0x1c574 <fdevopen+0x22>
   1c55e:	61 15       	cp	r22, r1
   1c560:	71 05       	cpc	r23, r1
   1c562:	41 f4       	brne	.+16     	; 0x1c574 <fdevopen+0x22>
   1c564:	f0 e0       	ldi	r31, 0x00	; 0
   1c566:	e0 e0       	ldi	r30, 0x00	; 0
   1c568:	cf 01       	movw	r24, r30
   1c56a:	df 91       	pop	r29
   1c56c:	cf 91       	pop	r28
   1c56e:	1f 91       	pop	r17
   1c570:	0f 91       	pop	r16
   1c572:	08 95       	ret
   1c574:	8b 01       	movw	r16, r22
   1c576:	ec 01       	movw	r28, r24
   1c578:	6e e0       	ldi	r22, 0x0E	; 14
   1c57a:	70 e0       	ldi	r23, 0x00	; 0
   1c57c:	81 e0       	ldi	r24, 0x01	; 1
   1c57e:	90 e0       	ldi	r25, 0x00	; 0
   1c580:	0e 94 78 e5 	call	0x1caf0	; 0x1caf0 <calloc>
   1c584:	fc 01       	movw	r30, r24
   1c586:	89 2b       	or	r24, r25
   1c588:	69 f3       	breq	.-38     	; 0x1c564 <fdevopen+0x12>
   1c58a:	80 e8       	ldi	r24, 0x80	; 128
   1c58c:	83 83       	std	Z+3, r24	; 0x03
   1c58e:	01 15       	cp	r16, r1
   1c590:	11 05       	cpc	r17, r1
   1c592:	71 f0       	breq	.+28     	; 0x1c5b0 <fdevopen+0x5e>
   1c594:	13 87       	std	Z+11, r17	; 0x0b
   1c596:	02 87       	std	Z+10, r16	; 0x0a
   1c598:	81 e8       	ldi	r24, 0x81	; 129
   1c59a:	83 83       	std	Z+3, r24	; 0x03
   1c59c:	80 91 bd 14 	lds	r24, 0x14BD	; 0x8014bd <__iob>
   1c5a0:	90 91 be 14 	lds	r25, 0x14BE	; 0x8014be <__iob+0x1>
   1c5a4:	89 2b       	or	r24, r25
   1c5a6:	21 f4       	brne	.+8      	; 0x1c5b0 <fdevopen+0x5e>
   1c5a8:	f0 93 be 14 	sts	0x14BE, r31	; 0x8014be <__iob+0x1>
   1c5ac:	e0 93 bd 14 	sts	0x14BD, r30	; 0x8014bd <__iob>
   1c5b0:	20 97       	sbiw	r28, 0x00	; 0
   1c5b2:	d1 f2       	breq	.-76     	; 0x1c568 <fdevopen+0x16>
   1c5b4:	d1 87       	std	Z+9, r29	; 0x09
   1c5b6:	c0 87       	std	Z+8, r28	; 0x08
   1c5b8:	83 81       	ldd	r24, Z+3	; 0x03
   1c5ba:	82 60       	ori	r24, 0x02	; 2
   1c5bc:	83 83       	std	Z+3, r24	; 0x03
   1c5be:	80 91 bf 14 	lds	r24, 0x14BF	; 0x8014bf <__iob+0x2>
   1c5c2:	90 91 c0 14 	lds	r25, 0x14C0	; 0x8014c0 <__iob+0x3>
   1c5c6:	89 2b       	or	r24, r25
   1c5c8:	79 f6       	brne	.-98     	; 0x1c568 <fdevopen+0x16>
   1c5ca:	f0 93 c0 14 	sts	0x14C0, r31	; 0x8014c0 <__iob+0x3>
   1c5ce:	e0 93 bf 14 	sts	0x14BF, r30	; 0x8014bf <__iob+0x2>
   1c5d2:	80 91 c1 14 	lds	r24, 0x14C1	; 0x8014c1 <__iob+0x4>
   1c5d6:	90 91 c2 14 	lds	r25, 0x14C2	; 0x8014c2 <__iob+0x5>
   1c5da:	89 2b       	or	r24, r25
   1c5dc:	29 f6       	brne	.-118    	; 0x1c568 <fdevopen+0x16>
   1c5de:	f0 93 c2 14 	sts	0x14C2, r31	; 0x8014c2 <__iob+0x5>
   1c5e2:	e0 93 c1 14 	sts	0x14C1, r30	; 0x8014c1 <__iob+0x4>
   1c5e6:	c0 cf       	rjmp	.-128    	; 0x1c568 <fdevopen+0x16>

0001c5e8 <printf_P>:
printf_P():
   1c5e8:	0f 93       	push	r16
   1c5ea:	1f 93       	push	r17
   1c5ec:	cf 93       	push	r28
   1c5ee:	df 93       	push	r29
   1c5f0:	cd b7       	in	r28, 0x3d	; 61
   1c5f2:	de b7       	in	r29, 0x3e	; 62
   1c5f4:	ae 01       	movw	r20, r28
   1c5f6:	48 5f       	subi	r20, 0xF8	; 248
   1c5f8:	5f 4f       	sbci	r21, 0xFF	; 255
   1c5fa:	da 01       	movw	r26, r20
   1c5fc:	6d 91       	ld	r22, X+
   1c5fe:	7d 91       	ld	r23, X+
   1c600:	ad 01       	movw	r20, r26
   1c602:	0d eb       	ldi	r16, 0xBD	; 189
   1c604:	14 e1       	ldi	r17, 0x14	; 20
   1c606:	f8 01       	movw	r30, r16
   1c608:	82 81       	ldd	r24, Z+2	; 0x02
   1c60a:	93 81       	ldd	r25, Z+3	; 0x03
   1c60c:	dc 01       	movw	r26, r24
   1c60e:	13 96       	adiw	r26, 0x03	; 3
   1c610:	2c 91       	ld	r18, X
   1c612:	13 97       	sbiw	r26, 0x03	; 3
   1c614:	28 60       	ori	r18, 0x08	; 8
   1c616:	13 96       	adiw	r26, 0x03	; 3
   1c618:	2c 93       	st	X, r18
   1c61a:	0e 94 76 e3 	call	0x1c6ec	; 0x1c6ec <vfprintf>
   1c61e:	d8 01       	movw	r26, r16
   1c620:	12 96       	adiw	r26, 0x02	; 2
   1c622:	ed 91       	ld	r30, X+
   1c624:	fc 91       	ld	r31, X
   1c626:	23 81       	ldd	r18, Z+3	; 0x03
   1c628:	27 7f       	andi	r18, 0xF7	; 247
   1c62a:	23 83       	std	Z+3, r18	; 0x03
   1c62c:	df 91       	pop	r29
   1c62e:	cf 91       	pop	r28
   1c630:	1f 91       	pop	r17
   1c632:	0f 91       	pop	r16
   1c634:	08 95       	ret

0001c636 <puts>:
puts():
   1c636:	0f 93       	push	r16
   1c638:	1f 93       	push	r17
   1c63a:	cf 93       	push	r28
   1c63c:	df 93       	push	r29
   1c63e:	e0 91 bf 14 	lds	r30, 0x14BF	; 0x8014bf <__iob+0x2>
   1c642:	f0 91 c0 14 	lds	r31, 0x14C0	; 0x8014c0 <__iob+0x3>
   1c646:	23 81       	ldd	r18, Z+3	; 0x03
   1c648:	ec 01       	movw	r28, r24
   1c64a:	10 e0       	ldi	r17, 0x00	; 0
   1c64c:	00 e0       	ldi	r16, 0x00	; 0
   1c64e:	21 fd       	sbrc	r18, 1
   1c650:	08 c0       	rjmp	.+16     	; 0x1c662 <puts+0x2c>
   1c652:	0f ef       	ldi	r16, 0xFF	; 255
   1c654:	1f ef       	ldi	r17, 0xFF	; 255
   1c656:	14 c0       	rjmp	.+40     	; 0x1c680 <puts+0x4a>
   1c658:	19 95       	eicall
   1c65a:	89 2b       	or	r24, r25
   1c65c:	11 f0       	breq	.+4      	; 0x1c662 <puts+0x2c>
   1c65e:	0f ef       	ldi	r16, 0xFF	; 255
   1c660:	1f ef       	ldi	r17, 0xFF	; 255
   1c662:	89 91       	ld	r24, Y+
   1c664:	60 91 bf 14 	lds	r22, 0x14BF	; 0x8014bf <__iob+0x2>
   1c668:	70 91 c0 14 	lds	r23, 0x14C0	; 0x8014c0 <__iob+0x3>
   1c66c:	db 01       	movw	r26, r22
   1c66e:	18 96       	adiw	r26, 0x08	; 8
   1c670:	ed 91       	ld	r30, X+
   1c672:	fc 91       	ld	r31, X
   1c674:	81 11       	cpse	r24, r1
   1c676:	f0 cf       	rjmp	.-32     	; 0x1c658 <puts+0x22>
   1c678:	8a e0       	ldi	r24, 0x0A	; 10
   1c67a:	19 95       	eicall
   1c67c:	89 2b       	or	r24, r25
   1c67e:	49 f7       	brne	.-46     	; 0x1c652 <puts+0x1c>
   1c680:	c8 01       	movw	r24, r16
   1c682:	df 91       	pop	r29
   1c684:	cf 91       	pop	r28
   1c686:	1f 91       	pop	r17
   1c688:	0f 91       	pop	r16
   1c68a:	08 95       	ret

0001c68c <sprintf>:
sprintf():
   1c68c:	0f 93       	push	r16
   1c68e:	1f 93       	push	r17
   1c690:	cf 93       	push	r28
   1c692:	df 93       	push	r29
   1c694:	cd b7       	in	r28, 0x3d	; 61
   1c696:	de b7       	in	r29, 0x3e	; 62
   1c698:	2e 97       	sbiw	r28, 0x0e	; 14
   1c69a:	0f b6       	in	r0, 0x3f	; 63
   1c69c:	f8 94       	cli
   1c69e:	de bf       	out	0x3e, r29	; 62
   1c6a0:	0f be       	out	0x3f, r0	; 63
   1c6a2:	cd bf       	out	0x3d, r28	; 61
   1c6a4:	0e 89       	ldd	r16, Y+22	; 0x16
   1c6a6:	1f 89       	ldd	r17, Y+23	; 0x17
   1c6a8:	86 e0       	ldi	r24, 0x06	; 6
   1c6aa:	8c 83       	std	Y+4, r24	; 0x04
   1c6ac:	1a 83       	std	Y+2, r17	; 0x02
   1c6ae:	09 83       	std	Y+1, r16	; 0x01
   1c6b0:	8f ef       	ldi	r24, 0xFF	; 255
   1c6b2:	9f e7       	ldi	r25, 0x7F	; 127
   1c6b4:	9e 83       	std	Y+6, r25	; 0x06
   1c6b6:	8d 83       	std	Y+5, r24	; 0x05
   1c6b8:	ae 01       	movw	r20, r28
   1c6ba:	46 5e       	subi	r20, 0xE6	; 230
   1c6bc:	5f 4f       	sbci	r21, 0xFF	; 255
   1c6be:	68 8d       	ldd	r22, Y+24	; 0x18
   1c6c0:	79 8d       	ldd	r23, Y+25	; 0x19
   1c6c2:	ce 01       	movw	r24, r28
   1c6c4:	01 96       	adiw	r24, 0x01	; 1
   1c6c6:	0e 94 76 e3 	call	0x1c6ec	; 0x1c6ec <vfprintf>
   1c6ca:	2f 81       	ldd	r18, Y+7	; 0x07
   1c6cc:	38 85       	ldd	r19, Y+8	; 0x08
   1c6ce:	02 0f       	add	r16, r18
   1c6d0:	13 1f       	adc	r17, r19
   1c6d2:	f8 01       	movw	r30, r16
   1c6d4:	10 82       	st	Z, r1
   1c6d6:	2e 96       	adiw	r28, 0x0e	; 14
   1c6d8:	0f b6       	in	r0, 0x3f	; 63
   1c6da:	f8 94       	cli
   1c6dc:	de bf       	out	0x3e, r29	; 62
   1c6de:	0f be       	out	0x3f, r0	; 63
   1c6e0:	cd bf       	out	0x3d, r28	; 61
   1c6e2:	df 91       	pop	r29
   1c6e4:	cf 91       	pop	r28
   1c6e6:	1f 91       	pop	r17
   1c6e8:	0f 91       	pop	r16
   1c6ea:	08 95       	ret

0001c6ec <vfprintf>:
vfprintf():
   1c6ec:	2f 92       	push	r2
   1c6ee:	3f 92       	push	r3
   1c6f0:	4f 92       	push	r4
   1c6f2:	5f 92       	push	r5
   1c6f4:	6f 92       	push	r6
   1c6f6:	7f 92       	push	r7
   1c6f8:	8f 92       	push	r8
   1c6fa:	9f 92       	push	r9
   1c6fc:	af 92       	push	r10
   1c6fe:	bf 92       	push	r11
   1c700:	cf 92       	push	r12
   1c702:	df 92       	push	r13
   1c704:	ef 92       	push	r14
   1c706:	ff 92       	push	r15
   1c708:	0f 93       	push	r16
   1c70a:	1f 93       	push	r17
   1c70c:	cf 93       	push	r28
   1c70e:	df 93       	push	r29
   1c710:	00 d0       	rcall	.+0      	; 0x1c712 <vfprintf+0x26>
   1c712:	00 d0       	rcall	.+0      	; 0x1c714 <vfprintf+0x28>
   1c714:	00 d0       	rcall	.+0      	; 0x1c716 <vfprintf+0x2a>
   1c716:	1f 92       	push	r1
   1c718:	1f 92       	push	r1
   1c71a:	cd b7       	in	r28, 0x3d	; 61
   1c71c:	de b7       	in	r29, 0x3e	; 62
   1c71e:	7c 01       	movw	r14, r24
   1c720:	3b 01       	movw	r6, r22
   1c722:	8a 01       	movw	r16, r20
   1c724:	fc 01       	movw	r30, r24
   1c726:	17 82       	std	Z+7, r1	; 0x07
   1c728:	16 82       	std	Z+6, r1	; 0x06
   1c72a:	83 81       	ldd	r24, Z+3	; 0x03
   1c72c:	81 ff       	sbrs	r24, 1
   1c72e:	dd c1       	rjmp	.+954    	; 0x1caea <vfprintf+0x3fe>
   1c730:	ce 01       	movw	r24, r28
   1c732:	01 96       	adiw	r24, 0x01	; 1
   1c734:	5c 01       	movw	r10, r24
   1c736:	f7 01       	movw	r30, r14
   1c738:	93 81       	ldd	r25, Z+3	; 0x03
   1c73a:	f3 01       	movw	r30, r6
   1c73c:	93 fd       	sbrc	r25, 3
   1c73e:	85 91       	lpm	r24, Z+
   1c740:	93 ff       	sbrs	r25, 3
   1c742:	81 91       	ld	r24, Z+
   1c744:	3f 01       	movw	r6, r30
   1c746:	88 23       	and	r24, r24
   1c748:	09 f4       	brne	.+2      	; 0x1c74c <vfprintf+0x60>
   1c74a:	53 c1       	rjmp	.+678    	; 0x1c9f2 <vfprintf+0x306>
   1c74c:	85 32       	cpi	r24, 0x25	; 37
   1c74e:	39 f4       	brne	.+14     	; 0x1c75e <vfprintf+0x72>
   1c750:	93 fd       	sbrc	r25, 3
   1c752:	85 91       	lpm	r24, Z+
   1c754:	93 ff       	sbrs	r25, 3
   1c756:	81 91       	ld	r24, Z+
   1c758:	3f 01       	movw	r6, r30
   1c75a:	85 32       	cpi	r24, 0x25	; 37
   1c75c:	29 f4       	brne	.+10     	; 0x1c768 <vfprintf+0x7c>
   1c75e:	b7 01       	movw	r22, r14
   1c760:	90 e0       	ldi	r25, 0x00	; 0
   1c762:	0e 94 8b e9 	call	0x1d316	; 0x1d316 <fputc>
   1c766:	e7 cf       	rjmp	.-50     	; 0x1c736 <vfprintf+0x4a>
   1c768:	91 2c       	mov	r9, r1
   1c76a:	21 2c       	mov	r2, r1
   1c76c:	31 2c       	mov	r3, r1
   1c76e:	ff e1       	ldi	r31, 0x1F	; 31
   1c770:	f3 15       	cp	r31, r3
   1c772:	38 f0       	brcs	.+14     	; 0x1c782 <vfprintf+0x96>
   1c774:	8b 32       	cpi	r24, 0x2B	; 43
   1c776:	11 f1       	breq	.+68     	; 0x1c7bc <vfprintf+0xd0>
   1c778:	90 f4       	brcc	.+36     	; 0x1c79e <vfprintf+0xb2>
   1c77a:	80 32       	cpi	r24, 0x20	; 32
   1c77c:	09 f1       	breq	.+66     	; 0x1c7c0 <vfprintf+0xd4>
   1c77e:	83 32       	cpi	r24, 0x23	; 35
   1c780:	29 f1       	breq	.+74     	; 0x1c7cc <vfprintf+0xe0>
   1c782:	37 fc       	sbrc	r3, 7
   1c784:	3c c0       	rjmp	.+120    	; 0x1c7fe <vfprintf+0x112>
   1c786:	20 ed       	ldi	r18, 0xD0	; 208
   1c788:	28 0f       	add	r18, r24
   1c78a:	2a 30       	cpi	r18, 0x0A	; 10
   1c78c:	50 f5       	brcc	.+84     	; 0x1c7e2 <vfprintf+0xf6>
   1c78e:	36 fe       	sbrs	r3, 6
   1c790:	20 c0       	rjmp	.+64     	; 0x1c7d2 <vfprintf+0xe6>
   1c792:	8a e0       	ldi	r24, 0x0A	; 10
   1c794:	98 9e       	mul	r9, r24
   1c796:	20 0d       	add	r18, r0
   1c798:	11 24       	eor	r1, r1
   1c79a:	92 2e       	mov	r9, r18
   1c79c:	06 c0       	rjmp	.+12     	; 0x1c7aa <vfprintf+0xbe>
   1c79e:	8d 32       	cpi	r24, 0x2D	; 45
   1c7a0:	91 f0       	breq	.+36     	; 0x1c7c6 <vfprintf+0xda>
   1c7a2:	80 33       	cpi	r24, 0x30	; 48
   1c7a4:	71 f7       	brne	.-36     	; 0x1c782 <vfprintf+0x96>
   1c7a6:	68 94       	set
   1c7a8:	30 f8       	bld	r3, 0
   1c7aa:	f3 01       	movw	r30, r6
   1c7ac:	93 fd       	sbrc	r25, 3
   1c7ae:	85 91       	lpm	r24, Z+
   1c7b0:	93 ff       	sbrs	r25, 3
   1c7b2:	81 91       	ld	r24, Z+
   1c7b4:	3f 01       	movw	r6, r30
   1c7b6:	81 11       	cpse	r24, r1
   1c7b8:	da cf       	rjmp	.-76     	; 0x1c76e <vfprintf+0x82>
   1c7ba:	21 c0       	rjmp	.+66     	; 0x1c7fe <vfprintf+0x112>
   1c7bc:	68 94       	set
   1c7be:	31 f8       	bld	r3, 1
   1c7c0:	68 94       	set
   1c7c2:	32 f8       	bld	r3, 2
   1c7c4:	f2 cf       	rjmp	.-28     	; 0x1c7aa <vfprintf+0xbe>
   1c7c6:	68 94       	set
   1c7c8:	33 f8       	bld	r3, 3
   1c7ca:	ef cf       	rjmp	.-34     	; 0x1c7aa <vfprintf+0xbe>
   1c7cc:	68 94       	set
   1c7ce:	34 f8       	bld	r3, 4
   1c7d0:	ec cf       	rjmp	.-40     	; 0x1c7aa <vfprintf+0xbe>
   1c7d2:	ea e0       	ldi	r30, 0x0A	; 10
   1c7d4:	2e 9e       	mul	r2, r30
   1c7d6:	20 0d       	add	r18, r0
   1c7d8:	11 24       	eor	r1, r1
   1c7da:	22 2e       	mov	r2, r18
   1c7dc:	68 94       	set
   1c7de:	35 f8       	bld	r3, 5
   1c7e0:	e4 cf       	rjmp	.-56     	; 0x1c7aa <vfprintf+0xbe>
   1c7e2:	8e 32       	cpi	r24, 0x2E	; 46
   1c7e4:	29 f4       	brne	.+10     	; 0x1c7f0 <vfprintf+0x104>
   1c7e6:	36 fc       	sbrc	r3, 6
   1c7e8:	04 c1       	rjmp	.+520    	; 0x1c9f2 <vfprintf+0x306>
   1c7ea:	68 94       	set
   1c7ec:	36 f8       	bld	r3, 6
   1c7ee:	dd cf       	rjmp	.-70     	; 0x1c7aa <vfprintf+0xbe>
   1c7f0:	8c 36       	cpi	r24, 0x6C	; 108
   1c7f2:	19 f4       	brne	.+6      	; 0x1c7fa <vfprintf+0x10e>
   1c7f4:	68 94       	set
   1c7f6:	37 f8       	bld	r3, 7
   1c7f8:	d8 cf       	rjmp	.-80     	; 0x1c7aa <vfprintf+0xbe>
   1c7fa:	88 36       	cpi	r24, 0x68	; 104
   1c7fc:	b1 f2       	breq	.-84     	; 0x1c7aa <vfprintf+0xbe>
   1c7fe:	98 2f       	mov	r25, r24
   1c800:	9f 7d       	andi	r25, 0xDF	; 223
   1c802:	95 54       	subi	r25, 0x45	; 69
   1c804:	93 30       	cpi	r25, 0x03	; 3
   1c806:	e0 f0       	brcs	.+56     	; 0x1c840 <vfprintf+0x154>
   1c808:	83 36       	cpi	r24, 0x63	; 99
   1c80a:	a1 f1       	breq	.+104    	; 0x1c874 <vfprintf+0x188>
   1c80c:	83 37       	cpi	r24, 0x73	; 115
   1c80e:	c1 f1       	breq	.+112    	; 0x1c880 <vfprintf+0x194>
   1c810:	83 35       	cpi	r24, 0x53	; 83
   1c812:	09 f0       	breq	.+2      	; 0x1c816 <vfprintf+0x12a>
   1c814:	63 c0       	rjmp	.+198    	; 0x1c8dc <vfprintf+0x1f0>
   1c816:	28 01       	movw	r4, r16
   1c818:	f2 e0       	ldi	r31, 0x02	; 2
   1c81a:	4f 0e       	add	r4, r31
   1c81c:	51 1c       	adc	r5, r1
   1c81e:	f8 01       	movw	r30, r16
   1c820:	c0 80       	ld	r12, Z
   1c822:	d1 80       	ldd	r13, Z+1	; 0x01
   1c824:	69 2d       	mov	r22, r9
   1c826:	70 e0       	ldi	r23, 0x00	; 0
   1c828:	36 fc       	sbrc	r3, 6
   1c82a:	02 c0       	rjmp	.+4      	; 0x1c830 <vfprintf+0x144>
   1c82c:	6f ef       	ldi	r22, 0xFF	; 255
   1c82e:	7f ef       	ldi	r23, 0xFF	; 255
   1c830:	c6 01       	movw	r24, r12
   1c832:	0e 94 5e e9 	call	0x1d2bc	; 0x1d2bc <strnlen_P>
   1c836:	4c 01       	movw	r8, r24
   1c838:	68 94       	set
   1c83a:	37 f8       	bld	r3, 7
   1c83c:	82 01       	movw	r16, r4
   1c83e:	0a c0       	rjmp	.+20     	; 0x1c854 <vfprintf+0x168>
   1c840:	0c 5f       	subi	r16, 0xFC	; 252
   1c842:	1f 4f       	sbci	r17, 0xFF	; 255
   1c844:	ff e3       	ldi	r31, 0x3F	; 63
   1c846:	f9 83       	std	Y+1, r31	; 0x01
   1c848:	88 24       	eor	r8, r8
   1c84a:	83 94       	inc	r8
   1c84c:	91 2c       	mov	r9, r1
   1c84e:	65 01       	movw	r12, r10
   1c850:	e8 94       	clt
   1c852:	37 f8       	bld	r3, 7
   1c854:	33 fe       	sbrs	r3, 3
   1c856:	2d c0       	rjmp	.+90     	; 0x1c8b2 <vfprintf+0x1c6>
   1c858:	52 2c       	mov	r5, r2
   1c85a:	81 14       	cp	r8, r1
   1c85c:	91 04       	cpc	r9, r1
   1c85e:	71 f5       	brne	.+92     	; 0x1c8bc <vfprintf+0x1d0>
   1c860:	55 20       	and	r5, r5
   1c862:	09 f4       	brne	.+2      	; 0x1c866 <vfprintf+0x17a>
   1c864:	68 cf       	rjmp	.-304    	; 0x1c736 <vfprintf+0x4a>
   1c866:	b7 01       	movw	r22, r14
   1c868:	80 e2       	ldi	r24, 0x20	; 32
   1c86a:	90 e0       	ldi	r25, 0x00	; 0
   1c86c:	0e 94 8b e9 	call	0x1d316	; 0x1d316 <fputc>
   1c870:	5a 94       	dec	r5
   1c872:	f6 cf       	rjmp	.-20     	; 0x1c860 <vfprintf+0x174>
   1c874:	f8 01       	movw	r30, r16
   1c876:	80 81       	ld	r24, Z
   1c878:	89 83       	std	Y+1, r24	; 0x01
   1c87a:	0e 5f       	subi	r16, 0xFE	; 254
   1c87c:	1f 4f       	sbci	r17, 0xFF	; 255
   1c87e:	e4 cf       	rjmp	.-56     	; 0x1c848 <vfprintf+0x15c>
   1c880:	28 01       	movw	r4, r16
   1c882:	f2 e0       	ldi	r31, 0x02	; 2
   1c884:	4f 0e       	add	r4, r31
   1c886:	51 1c       	adc	r5, r1
   1c888:	f8 01       	movw	r30, r16
   1c88a:	c0 80       	ld	r12, Z
   1c88c:	d1 80       	ldd	r13, Z+1	; 0x01
   1c88e:	69 2d       	mov	r22, r9
   1c890:	70 e0       	ldi	r23, 0x00	; 0
   1c892:	36 fc       	sbrc	r3, 6
   1c894:	02 c0       	rjmp	.+4      	; 0x1c89a <vfprintf+0x1ae>
   1c896:	6f ef       	ldi	r22, 0xFF	; 255
   1c898:	7f ef       	ldi	r23, 0xFF	; 255
   1c89a:	c6 01       	movw	r24, r12
   1c89c:	0e 94 70 e9 	call	0x1d2e0	; 0x1d2e0 <strnlen>
   1c8a0:	4c 01       	movw	r8, r24
   1c8a2:	82 01       	movw	r16, r4
   1c8a4:	d5 cf       	rjmp	.-86     	; 0x1c850 <vfprintf+0x164>
   1c8a6:	b7 01       	movw	r22, r14
   1c8a8:	80 e2       	ldi	r24, 0x20	; 32
   1c8aa:	90 e0       	ldi	r25, 0x00	; 0
   1c8ac:	0e 94 8b e9 	call	0x1d316	; 0x1d316 <fputc>
   1c8b0:	2a 94       	dec	r2
   1c8b2:	28 14       	cp	r2, r8
   1c8b4:	19 04       	cpc	r1, r9
   1c8b6:	09 f0       	breq	.+2      	; 0x1c8ba <vfprintf+0x1ce>
   1c8b8:	b0 f7       	brcc	.-20     	; 0x1c8a6 <vfprintf+0x1ba>
   1c8ba:	ce cf       	rjmp	.-100    	; 0x1c858 <vfprintf+0x16c>
   1c8bc:	f6 01       	movw	r30, r12
   1c8be:	37 fc       	sbrc	r3, 7
   1c8c0:	85 91       	lpm	r24, Z+
   1c8c2:	37 fe       	sbrs	r3, 7
   1c8c4:	81 91       	ld	r24, Z+
   1c8c6:	6f 01       	movw	r12, r30
   1c8c8:	b7 01       	movw	r22, r14
   1c8ca:	90 e0       	ldi	r25, 0x00	; 0
   1c8cc:	0e 94 8b e9 	call	0x1d316	; 0x1d316 <fputc>
   1c8d0:	51 10       	cpse	r5, r1
   1c8d2:	5a 94       	dec	r5
   1c8d4:	f1 e0       	ldi	r31, 0x01	; 1
   1c8d6:	8f 1a       	sub	r8, r31
   1c8d8:	91 08       	sbc	r9, r1
   1c8da:	bf cf       	rjmp	.-130    	; 0x1c85a <vfprintf+0x16e>
   1c8dc:	84 36       	cpi	r24, 0x64	; 100
   1c8de:	19 f0       	breq	.+6      	; 0x1c8e6 <vfprintf+0x1fa>
   1c8e0:	89 36       	cpi	r24, 0x69	; 105
   1c8e2:	09 f0       	breq	.+2      	; 0x1c8e6 <vfprintf+0x1fa>
   1c8e4:	77 c0       	rjmp	.+238    	; 0x1c9d4 <vfprintf+0x2e8>
   1c8e6:	f8 01       	movw	r30, r16
   1c8e8:	37 fe       	sbrs	r3, 7
   1c8ea:	6b c0       	rjmp	.+214    	; 0x1c9c2 <vfprintf+0x2d6>
   1c8ec:	60 81       	ld	r22, Z
   1c8ee:	71 81       	ldd	r23, Z+1	; 0x01
   1c8f0:	82 81       	ldd	r24, Z+2	; 0x02
   1c8f2:	93 81       	ldd	r25, Z+3	; 0x03
   1c8f4:	0c 5f       	subi	r16, 0xFC	; 252
   1c8f6:	1f 4f       	sbci	r17, 0xFF	; 255
   1c8f8:	f3 2d       	mov	r31, r3
   1c8fa:	ff 76       	andi	r31, 0x6F	; 111
   1c8fc:	3f 2e       	mov	r3, r31
   1c8fe:	97 ff       	sbrs	r25, 7
   1c900:	09 c0       	rjmp	.+18     	; 0x1c914 <vfprintf+0x228>
   1c902:	90 95       	com	r25
   1c904:	80 95       	com	r24
   1c906:	70 95       	com	r23
   1c908:	61 95       	neg	r22
   1c90a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c90c:	8f 4f       	sbci	r24, 0xFF	; 255
   1c90e:	9f 4f       	sbci	r25, 0xFF	; 255
   1c910:	68 94       	set
   1c912:	37 f8       	bld	r3, 7
   1c914:	2a e0       	ldi	r18, 0x0A	; 10
   1c916:	30 e0       	ldi	r19, 0x00	; 0
   1c918:	a5 01       	movw	r20, r10
   1c91a:	0e 94 bb e9 	call	0x1d376	; 0x1d376 <__ultoa_invert>
   1c91e:	c8 2e       	mov	r12, r24
   1c920:	ca 18       	sub	r12, r10
   1c922:	8c 2c       	mov	r8, r12
   1c924:	43 2c       	mov	r4, r3
   1c926:	36 fe       	sbrs	r3, 6
   1c928:	0c c0       	rjmp	.+24     	; 0x1c942 <vfprintf+0x256>
   1c92a:	e8 94       	clt
   1c92c:	40 f8       	bld	r4, 0
   1c92e:	c9 14       	cp	r12, r9
   1c930:	40 f4       	brcc	.+16     	; 0x1c942 <vfprintf+0x256>
   1c932:	34 fe       	sbrs	r3, 4
   1c934:	05 c0       	rjmp	.+10     	; 0x1c940 <vfprintf+0x254>
   1c936:	32 fc       	sbrc	r3, 2
   1c938:	03 c0       	rjmp	.+6      	; 0x1c940 <vfprintf+0x254>
   1c93a:	f3 2d       	mov	r31, r3
   1c93c:	fe 7e       	andi	r31, 0xEE	; 238
   1c93e:	4f 2e       	mov	r4, r31
   1c940:	89 2c       	mov	r8, r9
   1c942:	44 fe       	sbrs	r4, 4
   1c944:	aa c0       	rjmp	.+340    	; 0x1ca9a <vfprintf+0x3ae>
   1c946:	fe 01       	movw	r30, r28
   1c948:	ec 0d       	add	r30, r12
   1c94a:	f1 1d       	adc	r31, r1
   1c94c:	80 81       	ld	r24, Z
   1c94e:	80 33       	cpi	r24, 0x30	; 48
   1c950:	09 f0       	breq	.+2      	; 0x1c954 <vfprintf+0x268>
   1c952:	9c c0       	rjmp	.+312    	; 0x1ca8c <vfprintf+0x3a0>
   1c954:	24 2d       	mov	r18, r4
   1c956:	29 7e       	andi	r18, 0xE9	; 233
   1c958:	42 2e       	mov	r4, r18
   1c95a:	84 2d       	mov	r24, r4
   1c95c:	88 70       	andi	r24, 0x08	; 8
   1c95e:	58 2e       	mov	r5, r24
   1c960:	43 fc       	sbrc	r4, 3
   1c962:	aa c0       	rjmp	.+340    	; 0x1cab8 <vfprintf+0x3cc>
   1c964:	40 fe       	sbrs	r4, 0
   1c966:	a4 c0       	rjmp	.+328    	; 0x1cab0 <vfprintf+0x3c4>
   1c968:	9c 2c       	mov	r9, r12
   1c96a:	82 14       	cp	r8, r2
   1c96c:	18 f4       	brcc	.+6      	; 0x1c974 <vfprintf+0x288>
   1c96e:	2c 0c       	add	r2, r12
   1c970:	92 2c       	mov	r9, r2
   1c972:	98 18       	sub	r9, r8
   1c974:	44 fe       	sbrs	r4, 4
   1c976:	a6 c0       	rjmp	.+332    	; 0x1cac4 <vfprintf+0x3d8>
   1c978:	b7 01       	movw	r22, r14
   1c97a:	80 e3       	ldi	r24, 0x30	; 48
   1c97c:	90 e0       	ldi	r25, 0x00	; 0
   1c97e:	0e 94 8b e9 	call	0x1d316	; 0x1d316 <fputc>
   1c982:	42 fe       	sbrs	r4, 2
   1c984:	09 c0       	rjmp	.+18     	; 0x1c998 <vfprintf+0x2ac>
   1c986:	88 e7       	ldi	r24, 0x78	; 120
   1c988:	90 e0       	ldi	r25, 0x00	; 0
   1c98a:	41 fe       	sbrs	r4, 1
   1c98c:	02 c0       	rjmp	.+4      	; 0x1c992 <vfprintf+0x2a6>
   1c98e:	88 e5       	ldi	r24, 0x58	; 88
   1c990:	90 e0       	ldi	r25, 0x00	; 0
   1c992:	b7 01       	movw	r22, r14
   1c994:	0e 94 8b e9 	call	0x1d316	; 0x1d316 <fputc>
   1c998:	c9 14       	cp	r12, r9
   1c99a:	08 f4       	brcc	.+2      	; 0x1c99e <vfprintf+0x2b2>
   1c99c:	9f c0       	rjmp	.+318    	; 0x1cadc <vfprintf+0x3f0>
   1c99e:	ca 94       	dec	r12
   1c9a0:	d1 2c       	mov	r13, r1
   1c9a2:	9f ef       	ldi	r25, 0xFF	; 255
   1c9a4:	c9 1a       	sub	r12, r25
   1c9a6:	d9 0a       	sbc	r13, r25
   1c9a8:	ca 0c       	add	r12, r10
   1c9aa:	db 1c       	adc	r13, r11
   1c9ac:	f6 01       	movw	r30, r12
   1c9ae:	82 91       	ld	r24, -Z
   1c9b0:	6f 01       	movw	r12, r30
   1c9b2:	b7 01       	movw	r22, r14
   1c9b4:	90 e0       	ldi	r25, 0x00	; 0
   1c9b6:	0e 94 8b e9 	call	0x1d316	; 0x1d316 <fputc>
   1c9ba:	ac 14       	cp	r10, r12
   1c9bc:	bd 04       	cpc	r11, r13
   1c9be:	b1 f7       	brne	.-20     	; 0x1c9ac <vfprintf+0x2c0>
   1c9c0:	4f cf       	rjmp	.-354    	; 0x1c860 <vfprintf+0x174>
   1c9c2:	60 81       	ld	r22, Z
   1c9c4:	71 81       	ldd	r23, Z+1	; 0x01
   1c9c6:	07 2e       	mov	r0, r23
   1c9c8:	00 0c       	add	r0, r0
   1c9ca:	88 0b       	sbc	r24, r24
   1c9cc:	99 0b       	sbc	r25, r25
   1c9ce:	0e 5f       	subi	r16, 0xFE	; 254
   1c9d0:	1f 4f       	sbci	r17, 0xFF	; 255
   1c9d2:	92 cf       	rjmp	.-220    	; 0x1c8f8 <vfprintf+0x20c>
   1c9d4:	d3 2c       	mov	r13, r3
   1c9d6:	e8 94       	clt
   1c9d8:	d4 f8       	bld	r13, 4
   1c9da:	2a e0       	ldi	r18, 0x0A	; 10
   1c9dc:	30 e0       	ldi	r19, 0x00	; 0
   1c9de:	85 37       	cpi	r24, 0x75	; 117
   1c9e0:	e1 f1       	breq	.+120    	; 0x1ca5a <vfprintf+0x36e>
   1c9e2:	23 2d       	mov	r18, r3
   1c9e4:	29 7f       	andi	r18, 0xF9	; 249
   1c9e6:	d2 2e       	mov	r13, r18
   1c9e8:	8f 36       	cpi	r24, 0x6F	; 111
   1c9ea:	a9 f1       	breq	.+106    	; 0x1ca56 <vfprintf+0x36a>
   1c9ec:	f0 f4       	brcc	.+60     	; 0x1ca2a <vfprintf+0x33e>
   1c9ee:	88 35       	cpi	r24, 0x58	; 88
   1c9f0:	51 f1       	breq	.+84     	; 0x1ca46 <vfprintf+0x35a>
   1c9f2:	f7 01       	movw	r30, r14
   1c9f4:	86 81       	ldd	r24, Z+6	; 0x06
   1c9f6:	97 81       	ldd	r25, Z+7	; 0x07
   1c9f8:	2b 96       	adiw	r28, 0x0b	; 11
   1c9fa:	0f b6       	in	r0, 0x3f	; 63
   1c9fc:	f8 94       	cli
   1c9fe:	de bf       	out	0x3e, r29	; 62
   1ca00:	0f be       	out	0x3f, r0	; 63
   1ca02:	cd bf       	out	0x3d, r28	; 61
   1ca04:	df 91       	pop	r29
   1ca06:	cf 91       	pop	r28
   1ca08:	1f 91       	pop	r17
   1ca0a:	0f 91       	pop	r16
   1ca0c:	ff 90       	pop	r15
   1ca0e:	ef 90       	pop	r14
   1ca10:	df 90       	pop	r13
   1ca12:	cf 90       	pop	r12
   1ca14:	bf 90       	pop	r11
   1ca16:	af 90       	pop	r10
   1ca18:	9f 90       	pop	r9
   1ca1a:	8f 90       	pop	r8
   1ca1c:	7f 90       	pop	r7
   1ca1e:	6f 90       	pop	r6
   1ca20:	5f 90       	pop	r5
   1ca22:	4f 90       	pop	r4
   1ca24:	3f 90       	pop	r3
   1ca26:	2f 90       	pop	r2
   1ca28:	08 95       	ret
   1ca2a:	80 37       	cpi	r24, 0x70	; 112
   1ca2c:	49 f0       	breq	.+18     	; 0x1ca40 <vfprintf+0x354>
   1ca2e:	88 37       	cpi	r24, 0x78	; 120
   1ca30:	01 f7       	brne	.-64     	; 0x1c9f2 <vfprintf+0x306>
   1ca32:	d4 fe       	sbrs	r13, 4
   1ca34:	02 c0       	rjmp	.+4      	; 0x1ca3a <vfprintf+0x34e>
   1ca36:	68 94       	set
   1ca38:	d2 f8       	bld	r13, 2
   1ca3a:	20 e1       	ldi	r18, 0x10	; 16
   1ca3c:	30 e0       	ldi	r19, 0x00	; 0
   1ca3e:	0d c0       	rjmp	.+26     	; 0x1ca5a <vfprintf+0x36e>
   1ca40:	68 94       	set
   1ca42:	d4 f8       	bld	r13, 4
   1ca44:	f6 cf       	rjmp	.-20     	; 0x1ca32 <vfprintf+0x346>
   1ca46:	34 fe       	sbrs	r3, 4
   1ca48:	03 c0       	rjmp	.+6      	; 0x1ca50 <vfprintf+0x364>
   1ca4a:	82 2f       	mov	r24, r18
   1ca4c:	86 60       	ori	r24, 0x06	; 6
   1ca4e:	d8 2e       	mov	r13, r24
   1ca50:	20 e1       	ldi	r18, 0x10	; 16
   1ca52:	32 e0       	ldi	r19, 0x02	; 2
   1ca54:	02 c0       	rjmp	.+4      	; 0x1ca5a <vfprintf+0x36e>
   1ca56:	28 e0       	ldi	r18, 0x08	; 8
   1ca58:	30 e0       	ldi	r19, 0x00	; 0
   1ca5a:	f8 01       	movw	r30, r16
   1ca5c:	d7 fe       	sbrs	r13, 7
   1ca5e:	0f c0       	rjmp	.+30     	; 0x1ca7e <vfprintf+0x392>
   1ca60:	60 81       	ld	r22, Z
   1ca62:	71 81       	ldd	r23, Z+1	; 0x01
   1ca64:	82 81       	ldd	r24, Z+2	; 0x02
   1ca66:	93 81       	ldd	r25, Z+3	; 0x03
   1ca68:	0c 5f       	subi	r16, 0xFC	; 252
   1ca6a:	1f 4f       	sbci	r17, 0xFF	; 255
   1ca6c:	a5 01       	movw	r20, r10
   1ca6e:	0e 94 bb e9 	call	0x1d376	; 0x1d376 <__ultoa_invert>
   1ca72:	c8 2e       	mov	r12, r24
   1ca74:	ca 18       	sub	r12, r10
   1ca76:	3d 2c       	mov	r3, r13
   1ca78:	e8 94       	clt
   1ca7a:	37 f8       	bld	r3, 7
   1ca7c:	52 cf       	rjmp	.-348    	; 0x1c922 <vfprintf+0x236>
   1ca7e:	60 81       	ld	r22, Z
   1ca80:	71 81       	ldd	r23, Z+1	; 0x01
   1ca82:	90 e0       	ldi	r25, 0x00	; 0
   1ca84:	80 e0       	ldi	r24, 0x00	; 0
   1ca86:	0e 5f       	subi	r16, 0xFE	; 254
   1ca88:	1f 4f       	sbci	r17, 0xFF	; 255
   1ca8a:	f0 cf       	rjmp	.-32     	; 0x1ca6c <vfprintf+0x380>
   1ca8c:	42 fc       	sbrc	r4, 2
   1ca8e:	02 c0       	rjmp	.+4      	; 0x1ca94 <vfprintf+0x3a8>
   1ca90:	83 94       	inc	r8
   1ca92:	63 cf       	rjmp	.-314    	; 0x1c95a <vfprintf+0x26e>
   1ca94:	83 94       	inc	r8
   1ca96:	83 94       	inc	r8
   1ca98:	60 cf       	rjmp	.-320    	; 0x1c95a <vfprintf+0x26e>
   1ca9a:	84 2d       	mov	r24, r4
   1ca9c:	86 78       	andi	r24, 0x86	; 134
   1ca9e:	09 f4       	brne	.+2      	; 0x1caa2 <vfprintf+0x3b6>
   1caa0:	5c cf       	rjmp	.-328    	; 0x1c95a <vfprintf+0x26e>
   1caa2:	f6 cf       	rjmp	.-20     	; 0x1ca90 <vfprintf+0x3a4>
   1caa4:	b7 01       	movw	r22, r14
   1caa6:	80 e2       	ldi	r24, 0x20	; 32
   1caa8:	90 e0       	ldi	r25, 0x00	; 0
   1caaa:	0e 94 8b e9 	call	0x1d316	; 0x1d316 <fputc>
   1caae:	83 94       	inc	r8
   1cab0:	82 14       	cp	r8, r2
   1cab2:	c0 f3       	brcs	.-16     	; 0x1caa4 <vfprintf+0x3b8>
   1cab4:	51 2c       	mov	r5, r1
   1cab6:	5e cf       	rjmp	.-324    	; 0x1c974 <vfprintf+0x288>
   1cab8:	52 2c       	mov	r5, r2
   1caba:	58 18       	sub	r5, r8
   1cabc:	82 14       	cp	r8, r2
   1cabe:	08 f4       	brcc	.+2      	; 0x1cac2 <vfprintf+0x3d6>
   1cac0:	59 cf       	rjmp	.-334    	; 0x1c974 <vfprintf+0x288>
   1cac2:	f8 cf       	rjmp	.-16     	; 0x1cab4 <vfprintf+0x3c8>
   1cac4:	84 2d       	mov	r24, r4
   1cac6:	86 78       	andi	r24, 0x86	; 134
   1cac8:	09 f4       	brne	.+2      	; 0x1cacc <vfprintf+0x3e0>
   1caca:	66 cf       	rjmp	.-308    	; 0x1c998 <vfprintf+0x2ac>
   1cacc:	8b e2       	ldi	r24, 0x2B	; 43
   1cace:	41 fe       	sbrs	r4, 1
   1cad0:	80 e2       	ldi	r24, 0x20	; 32
   1cad2:	47 fc       	sbrc	r4, 7
   1cad4:	8d e2       	ldi	r24, 0x2D	; 45
   1cad6:	b7 01       	movw	r22, r14
   1cad8:	90 e0       	ldi	r25, 0x00	; 0
   1cada:	5c cf       	rjmp	.-328    	; 0x1c994 <vfprintf+0x2a8>
   1cadc:	b7 01       	movw	r22, r14
   1cade:	80 e3       	ldi	r24, 0x30	; 48
   1cae0:	90 e0       	ldi	r25, 0x00	; 0
   1cae2:	0e 94 8b e9 	call	0x1d316	; 0x1d316 <fputc>
   1cae6:	9a 94       	dec	r9
   1cae8:	57 cf       	rjmp	.-338    	; 0x1c998 <vfprintf+0x2ac>
   1caea:	8f ef       	ldi	r24, 0xFF	; 255
   1caec:	9f ef       	ldi	r25, 0xFF	; 255
   1caee:	84 cf       	rjmp	.-248    	; 0x1c9f8 <vfprintf+0x30c>

0001caf0 <calloc>:
calloc():
   1caf0:	0f 93       	push	r16
   1caf2:	1f 93       	push	r17
   1caf4:	cf 93       	push	r28
   1caf6:	df 93       	push	r29
   1caf8:	86 9f       	mul	r24, r22
   1cafa:	80 01       	movw	r16, r0
   1cafc:	87 9f       	mul	r24, r23
   1cafe:	10 0d       	add	r17, r0
   1cb00:	96 9f       	mul	r25, r22
   1cb02:	10 0d       	add	r17, r0
   1cb04:	11 24       	eor	r1, r1
   1cb06:	c8 01       	movw	r24, r16
   1cb08:	0e 94 af de 	call	0x1bd5e	; 0x1bd5e <malloc>
   1cb0c:	ec 01       	movw	r28, r24
   1cb0e:	00 97       	sbiw	r24, 0x00	; 0
   1cb10:	29 f0       	breq	.+10     	; 0x1cb1c <calloc+0x2c>
   1cb12:	a8 01       	movw	r20, r16
   1cb14:	70 e0       	ldi	r23, 0x00	; 0
   1cb16:	60 e0       	ldi	r22, 0x00	; 0
   1cb18:	0e 94 69 e9 	call	0x1d2d2	; 0x1d2d2 <memset>
   1cb1c:	ce 01       	movw	r24, r28
   1cb1e:	df 91       	pop	r29
   1cb20:	cf 91       	pop	r28
   1cb22:	1f 91       	pop	r17
   1cb24:	0f 91       	pop	r16
   1cb26:	08 95       	ret

0001cb28 <dtoa_prf>:
dtoa_prf():
   1cb28:	8f 92       	push	r8
   1cb2a:	9f 92       	push	r9
   1cb2c:	af 92       	push	r10
   1cb2e:	bf 92       	push	r11
   1cb30:	cf 92       	push	r12
   1cb32:	df 92       	push	r13
   1cb34:	ef 92       	push	r14
   1cb36:	ff 92       	push	r15
   1cb38:	0f 93       	push	r16
   1cb3a:	1f 93       	push	r17
   1cb3c:	cf 93       	push	r28
   1cb3e:	df 93       	push	r29
   1cb40:	00 d0       	rcall	.+0      	; 0x1cb42 <dtoa_prf+0x1a>
   1cb42:	00 d0       	rcall	.+0      	; 0x1cb44 <dtoa_prf+0x1c>
   1cb44:	00 d0       	rcall	.+0      	; 0x1cb46 <dtoa_prf+0x1e>
   1cb46:	cd b7       	in	r28, 0x3d	; 61
   1cb48:	de b7       	in	r29, 0x3e	; 62
   1cb4a:	6a 01       	movw	r12, r20
   1cb4c:	f2 2e       	mov	r15, r18
   1cb4e:	b0 2e       	mov	r11, r16
   1cb50:	10 2f       	mov	r17, r16
   1cb52:	fb e3       	ldi	r31, 0x3B	; 59
   1cb54:	af 2e       	mov	r10, r31
   1cb56:	a0 16       	cp	r10, r16
   1cb58:	08 f4       	brcc	.+2      	; 0x1cb5c <dtoa_prf+0x34>
   1cb5a:	1b e3       	ldi	r17, 0x3B	; 59
   1cb5c:	1f 5f       	subi	r17, 0xFF	; 255
   1cb5e:	01 2f       	mov	r16, r17
   1cb60:	27 e0       	ldi	r18, 0x07	; 7
   1cb62:	ae 01       	movw	r20, r28
   1cb64:	4f 5f       	subi	r20, 0xFF	; 255
   1cb66:	5f 4f       	sbci	r21, 0xFF	; 255
   1cb68:	0e 94 6b e8 	call	0x1d0d6	; 0x1d0d6 <__ftoa_engine>
   1cb6c:	bc 01       	movw	r22, r24
   1cb6e:	89 81       	ldd	r24, Y+1	; 0x01
   1cb70:	98 2f       	mov	r25, r24
   1cb72:	99 70       	andi	r25, 0x09	; 9
   1cb74:	91 30       	cpi	r25, 0x01	; 1
   1cb76:	09 f4       	brne	.+2      	; 0x1cb7a <dtoa_prf+0x52>
   1cb78:	4e c0       	rjmp	.+156    	; 0x1cc16 <dtoa_prf+0xee>
   1cb7a:	9b e2       	ldi	r25, 0x2B	; 43
   1cb7c:	e1 fc       	sbrc	r14, 1
   1cb7e:	04 c0       	rjmp	.+8      	; 0x1cb88 <dtoa_prf+0x60>
   1cb80:	9e 2d       	mov	r25, r14
   1cb82:	91 70       	andi	r25, 0x01	; 1
   1cb84:	e0 fc       	sbrc	r14, 0
   1cb86:	49 c0       	rjmp	.+146    	; 0x1cc1a <dtoa_prf+0xf2>
   1cb88:	5e 2d       	mov	r21, r14
   1cb8a:	50 71       	andi	r21, 0x10	; 16
   1cb8c:	e8 2f       	mov	r30, r24
   1cb8e:	e8 70       	andi	r30, 0x08	; 8
   1cb90:	83 ff       	sbrs	r24, 3
   1cb92:	55 c0       	rjmp	.+170    	; 0x1cc3e <dtoa_prf+0x116>
   1cb94:	84 e0       	ldi	r24, 0x04	; 4
   1cb96:	91 11       	cpse	r25, r1
   1cb98:	01 c0       	rjmp	.+2      	; 0x1cb9c <dtoa_prf+0x74>
   1cb9a:	83 e0       	ldi	r24, 0x03	; 3
   1cb9c:	ef 2d       	mov	r30, r15
   1cb9e:	e8 1b       	sub	r30, r24
   1cba0:	8f 15       	cp	r24, r15
   1cba2:	08 f0       	brcs	.+2      	; 0x1cba6 <dtoa_prf+0x7e>
   1cba4:	e0 e0       	ldi	r30, 0x00	; 0
   1cba6:	d6 01       	movw	r26, r12
   1cba8:	8e 2f       	mov	r24, r30
   1cbaa:	20 e2       	ldi	r18, 0x20	; 32
   1cbac:	55 23       	and	r21, r21
   1cbae:	c9 f1       	breq	.+114    	; 0x1cc22 <dtoa_prf+0xfa>
   1cbb0:	99 23       	and	r25, r25
   1cbb2:	29 f0       	breq	.+10     	; 0x1cbbe <dtoa_prf+0x96>
   1cbb4:	d6 01       	movw	r26, r12
   1cbb6:	9c 93       	st	X, r25
   1cbb8:	c6 01       	movw	r24, r12
   1cbba:	01 96       	adiw	r24, 0x01	; 1
   1cbbc:	6c 01       	movw	r12, r24
   1cbbe:	96 01       	movw	r18, r12
   1cbc0:	2d 5f       	subi	r18, 0xFD	; 253
   1cbc2:	3f 4f       	sbci	r19, 0xFF	; 255
   1cbc4:	e2 fe       	sbrs	r14, 2
   1cbc6:	33 c0       	rjmp	.+102    	; 0x1cc2e <dtoa_prf+0x106>
   1cbc8:	8e e4       	ldi	r24, 0x4E	; 78
   1cbca:	d6 01       	movw	r26, r12
   1cbcc:	8c 93       	st	X, r24
   1cbce:	91 e4       	ldi	r25, 0x41	; 65
   1cbd0:	11 96       	adiw	r26, 0x01	; 1
   1cbd2:	9c 93       	st	X, r25
   1cbd4:	11 97       	sbiw	r26, 0x01	; 1
   1cbd6:	12 96       	adiw	r26, 0x02	; 2
   1cbd8:	8c 93       	st	X, r24
   1cbda:	d9 01       	movw	r26, r18
   1cbdc:	8e 2f       	mov	r24, r30
   1cbde:	90 e2       	ldi	r25, 0x20	; 32
   1cbe0:	81 11       	cpse	r24, r1
   1cbe2:	2a c0       	rjmp	.+84     	; 0x1cc38 <dtoa_prf+0x110>
   1cbe4:	e2 0f       	add	r30, r18
   1cbe6:	f3 2f       	mov	r31, r19
   1cbe8:	f1 1d       	adc	r31, r1
   1cbea:	10 82       	st	Z, r1
   1cbec:	8e ef       	ldi	r24, 0xFE	; 254
   1cbee:	9f ef       	ldi	r25, 0xFF	; 255
   1cbf0:	29 96       	adiw	r28, 0x09	; 9
   1cbf2:	0f b6       	in	r0, 0x3f	; 63
   1cbf4:	f8 94       	cli
   1cbf6:	de bf       	out	0x3e, r29	; 62
   1cbf8:	0f be       	out	0x3f, r0	; 63
   1cbfa:	cd bf       	out	0x3d, r28	; 61
   1cbfc:	df 91       	pop	r29
   1cbfe:	cf 91       	pop	r28
   1cc00:	1f 91       	pop	r17
   1cc02:	0f 91       	pop	r16
   1cc04:	ff 90       	pop	r15
   1cc06:	ef 90       	pop	r14
   1cc08:	df 90       	pop	r13
   1cc0a:	cf 90       	pop	r12
   1cc0c:	bf 90       	pop	r11
   1cc0e:	af 90       	pop	r10
   1cc10:	9f 90       	pop	r9
   1cc12:	8f 90       	pop	r8
   1cc14:	08 95       	ret
   1cc16:	9d e2       	ldi	r25, 0x2D	; 45
   1cc18:	b7 cf       	rjmp	.-146    	; 0x1cb88 <dtoa_prf+0x60>
   1cc1a:	90 e2       	ldi	r25, 0x20	; 32
   1cc1c:	b5 cf       	rjmp	.-150    	; 0x1cb88 <dtoa_prf+0x60>
   1cc1e:	2d 93       	st	X+, r18
   1cc20:	81 50       	subi	r24, 0x01	; 1
   1cc22:	81 11       	cpse	r24, r1
   1cc24:	fc cf       	rjmp	.-8      	; 0x1cc1e <dtoa_prf+0xf6>
   1cc26:	ce 0e       	add	r12, r30
   1cc28:	d1 1c       	adc	r13, r1
   1cc2a:	e0 e0       	ldi	r30, 0x00	; 0
   1cc2c:	c1 cf       	rjmp	.-126    	; 0x1cbb0 <dtoa_prf+0x88>
   1cc2e:	8e e6       	ldi	r24, 0x6E	; 110
   1cc30:	d6 01       	movw	r26, r12
   1cc32:	8c 93       	st	X, r24
   1cc34:	91 e6       	ldi	r25, 0x61	; 97
   1cc36:	cc cf       	rjmp	.-104    	; 0x1cbd0 <dtoa_prf+0xa8>
   1cc38:	9d 93       	st	X+, r25
   1cc3a:	81 50       	subi	r24, 0x01	; 1
   1cc3c:	d1 cf       	rjmp	.-94     	; 0x1cbe0 <dtoa_prf+0xb8>
   1cc3e:	48 2f       	mov	r20, r24
   1cc40:	44 70       	andi	r20, 0x04	; 4
   1cc42:	82 ff       	sbrs	r24, 2
   1cc44:	3d c0       	rjmp	.+122    	; 0x1ccc0 <dtoa_prf+0x198>
   1cc46:	84 e0       	ldi	r24, 0x04	; 4
   1cc48:	91 11       	cpse	r25, r1
   1cc4a:	01 c0       	rjmp	.+2      	; 0x1cc4e <dtoa_prf+0x126>
   1cc4c:	83 e0       	ldi	r24, 0x03	; 3
   1cc4e:	8f 15       	cp	r24, r15
   1cc50:	10 f4       	brcc	.+4      	; 0x1cc56 <dtoa_prf+0x12e>
   1cc52:	ef 2d       	mov	r30, r15
   1cc54:	e8 1b       	sub	r30, r24
   1cc56:	d6 01       	movw	r26, r12
   1cc58:	8e 2f       	mov	r24, r30
   1cc5a:	20 e2       	ldi	r18, 0x20	; 32
   1cc5c:	55 23       	and	r21, r21
   1cc5e:	09 f1       	breq	.+66     	; 0x1cca2 <dtoa_prf+0x17a>
   1cc60:	99 23       	and	r25, r25
   1cc62:	29 f0       	breq	.+10     	; 0x1cc6e <dtoa_prf+0x146>
   1cc64:	d6 01       	movw	r26, r12
   1cc66:	9c 93       	st	X, r25
   1cc68:	c6 01       	movw	r24, r12
   1cc6a:	01 96       	adiw	r24, 0x01	; 1
   1cc6c:	6c 01       	movw	r12, r24
   1cc6e:	96 01       	movw	r18, r12
   1cc70:	2d 5f       	subi	r18, 0xFD	; 253
   1cc72:	3f 4f       	sbci	r19, 0xFF	; 255
   1cc74:	e2 fe       	sbrs	r14, 2
   1cc76:	1b c0       	rjmp	.+54     	; 0x1ccae <dtoa_prf+0x186>
   1cc78:	89 e4       	ldi	r24, 0x49	; 73
   1cc7a:	d6 01       	movw	r26, r12
   1cc7c:	8c 93       	st	X, r24
   1cc7e:	8e e4       	ldi	r24, 0x4E	; 78
   1cc80:	11 96       	adiw	r26, 0x01	; 1
   1cc82:	8c 93       	st	X, r24
   1cc84:	11 97       	sbiw	r26, 0x01	; 1
   1cc86:	86 e4       	ldi	r24, 0x46	; 70
   1cc88:	12 96       	adiw	r26, 0x02	; 2
   1cc8a:	8c 93       	st	X, r24
   1cc8c:	d9 01       	movw	r26, r18
   1cc8e:	8e 2f       	mov	r24, r30
   1cc90:	90 e2       	ldi	r25, 0x20	; 32
   1cc92:	88 23       	and	r24, r24
   1cc94:	09 f4       	brne	.+2      	; 0x1cc98 <dtoa_prf+0x170>
   1cc96:	a6 cf       	rjmp	.-180    	; 0x1cbe4 <dtoa_prf+0xbc>
   1cc98:	9d 93       	st	X+, r25
   1cc9a:	81 50       	subi	r24, 0x01	; 1
   1cc9c:	fa cf       	rjmp	.-12     	; 0x1cc92 <dtoa_prf+0x16a>
   1cc9e:	2d 93       	st	X+, r18
   1cca0:	81 50       	subi	r24, 0x01	; 1
   1cca2:	81 11       	cpse	r24, r1
   1cca4:	fc cf       	rjmp	.-8      	; 0x1cc9e <dtoa_prf+0x176>
   1cca6:	ce 0e       	add	r12, r30
   1cca8:	d1 1c       	adc	r13, r1
   1ccaa:	e0 e0       	ldi	r30, 0x00	; 0
   1ccac:	d9 cf       	rjmp	.-78     	; 0x1cc60 <dtoa_prf+0x138>
   1ccae:	89 e6       	ldi	r24, 0x69	; 105
   1ccb0:	d6 01       	movw	r26, r12
   1ccb2:	8c 93       	st	X, r24
   1ccb4:	8e e6       	ldi	r24, 0x6E	; 110
   1ccb6:	11 96       	adiw	r26, 0x01	; 1
   1ccb8:	8c 93       	st	X, r24
   1ccba:	11 97       	sbiw	r26, 0x01	; 1
   1ccbc:	86 e6       	ldi	r24, 0x66	; 102
   1ccbe:	e4 cf       	rjmp	.-56     	; 0x1cc88 <dtoa_prf+0x160>
   1ccc0:	9b 01       	movw	r18, r22
   1ccc2:	77 ff       	sbrs	r23, 7
   1ccc4:	02 c0       	rjmp	.+4      	; 0x1ccca <dtoa_prf+0x1a2>
   1ccc6:	30 e0       	ldi	r19, 0x00	; 0
   1ccc8:	20 e0       	ldi	r18, 0x00	; 0
   1ccca:	a1 e0       	ldi	r26, 0x01	; 1
   1cccc:	b0 e0       	ldi	r27, 0x00	; 0
   1ccce:	91 11       	cpse	r25, r1
   1ccd0:	02 c0       	rjmp	.+4      	; 0x1ccd6 <dtoa_prf+0x1ae>
   1ccd2:	b0 e0       	ldi	r27, 0x00	; 0
   1ccd4:	a0 e0       	ldi	r26, 0x00	; 0
   1ccd6:	f9 01       	movw	r30, r18
   1ccd8:	31 96       	adiw	r30, 0x01	; 1
   1ccda:	ae 0f       	add	r26, r30
   1ccdc:	bf 1f       	adc	r27, r31
   1ccde:	8b 2c       	mov	r8, r11
   1cce0:	91 2c       	mov	r9, r1
   1cce2:	bb 20       	and	r11, r11
   1cce4:	09 f4       	brne	.+2      	; 0x1cce8 <dtoa_prf+0x1c0>
   1cce6:	61 c0       	rjmp	.+194    	; 0x1cdaa <dtoa_prf+0x282>
   1cce8:	54 01       	movw	r10, r8
   1ccea:	ef ef       	ldi	r30, 0xFF	; 255
   1ccec:	ae 1a       	sub	r10, r30
   1ccee:	be 0a       	sbc	r11, r30
   1ccf0:	aa 0d       	add	r26, r10
   1ccf2:	bb 1d       	adc	r27, r11
   1ccf4:	fa 16       	cp	r15, r26
   1ccf6:	1b 06       	cpc	r1, r27
   1ccf8:	19 f0       	breq	.+6      	; 0x1cd00 <dtoa_prf+0x1d8>
   1ccfa:	14 f0       	brlt	.+4      	; 0x1cd00 <dtoa_prf+0x1d8>
   1ccfc:	4f 2d       	mov	r20, r15
   1ccfe:	4a 1b       	sub	r20, r26
   1cd00:	51 11       	cpse	r21, r1
   1cd02:	88 c0       	rjmp	.+272    	; 0x1ce14 <dtoa_prf+0x2ec>
   1cd04:	e3 fc       	sbrc	r14, 3
   1cd06:	59 c0       	rjmp	.+178    	; 0x1cdba <dtoa_prf+0x292>
   1cd08:	76 01       	movw	r14, r12
   1cd0a:	a4 2f       	mov	r26, r20
   1cd0c:	b0 e2       	ldi	r27, 0x20	; 32
   1cd0e:	a1 11       	cpse	r26, r1
   1cd10:	4f c0       	rjmp	.+158    	; 0x1cdb0 <dtoa_prf+0x288>
   1cd12:	c4 0e       	add	r12, r20
   1cd14:	d1 1c       	adc	r13, r1
   1cd16:	99 23       	and	r25, r25
   1cd18:	09 f4       	brne	.+2      	; 0x1cd1c <dtoa_prf+0x1f4>
   1cd1a:	5b c0       	rjmp	.+182    	; 0x1cdd2 <dtoa_prf+0x2aa>
   1cd1c:	40 e0       	ldi	r20, 0x00	; 0
   1cd1e:	d6 01       	movw	r26, r12
   1cd20:	11 96       	adiw	r26, 0x01	; 1
   1cd22:	f6 01       	movw	r30, r12
   1cd24:	90 83       	st	Z, r25
   1cd26:	6d 01       	movw	r12, r26
   1cd28:	55 23       	and	r21, r21
   1cd2a:	09 f4       	brne	.+2      	; 0x1cd2e <dtoa_prf+0x206>
   1cd2c:	48 c0       	rjmp	.+144    	; 0x1cdbe <dtoa_prf+0x296>
   1cd2e:	01 2f       	mov	r16, r17
   1cd30:	06 0f       	add	r16, r22
   1cd32:	9a 81       	ldd	r25, Y+2	; 0x02
   1cd34:	58 2f       	mov	r21, r24
   1cd36:	50 71       	andi	r21, 0x10	; 16
   1cd38:	84 ff       	sbrs	r24, 4
   1cd3a:	03 c0       	rjmp	.+6      	; 0x1cd42 <dtoa_prf+0x21a>
   1cd3c:	91 33       	cpi	r25, 0x31	; 49
   1cd3e:	09 f4       	brne	.+2      	; 0x1cd42 <dtoa_prf+0x21a>
   1cd40:	01 50       	subi	r16, 0x01	; 1
   1cd42:	10 16       	cp	r1, r16
   1cd44:	0c f0       	brlt	.+2      	; 0x1cd48 <dtoa_prf+0x220>
   1cd46:	47 c0       	rjmp	.+142    	; 0x1cdd6 <dtoa_prf+0x2ae>
   1cd48:	09 30       	cpi	r16, 0x09	; 9
   1cd4a:	08 f0       	brcs	.+2      	; 0x1cd4e <dtoa_prf+0x226>
   1cd4c:	08 e0       	ldi	r16, 0x08	; 8
   1cd4e:	ee e2       	ldi	r30, 0x2E	; 46
   1cd50:	fe 2e       	mov	r15, r30
   1cd52:	5b 01       	movw	r10, r22
   1cd54:	a0 1a       	sub	r10, r16
   1cd56:	b1 08       	sbc	r11, r1
   1cd58:	85 01       	movw	r16, r10
   1cd5a:	91 94       	neg	r9
   1cd5c:	81 94       	neg	r8
   1cd5e:	91 08       	sbc	r9, r1
   1cd60:	2f 3f       	cpi	r18, 0xFF	; 255
   1cd62:	32 07       	cpc	r19, r18
   1cd64:	29 f4       	brne	.+10     	; 0x1cd70 <dtoa_prf+0x248>
   1cd66:	d6 01       	movw	r26, r12
   1cd68:	fc 92       	st	X, r15
   1cd6a:	f6 01       	movw	r30, r12
   1cd6c:	31 96       	adiw	r30, 0x01	; 1
   1cd6e:	6f 01       	movw	r12, r30
   1cd70:	62 17       	cp	r22, r18
   1cd72:	73 07       	cpc	r23, r19
   1cd74:	94 f1       	brlt	.+100    	; 0x1cdda <dtoa_prf+0x2b2>
   1cd76:	02 17       	cp	r16, r18
   1cd78:	13 07       	cpc	r17, r19
   1cd7a:	7c f5       	brge	.+94     	; 0x1cdda <dtoa_prf+0x2b2>
   1cd7c:	db 01       	movw	r26, r22
   1cd7e:	a2 1b       	sub	r26, r18
   1cd80:	b3 0b       	sbc	r27, r19
   1cd82:	aa 24       	eor	r10, r10
   1cd84:	a3 94       	inc	r10
   1cd86:	b1 2c       	mov	r11, r1
   1cd88:	ac 0e       	add	r10, r28
   1cd8a:	bd 1e       	adc	r11, r29
   1cd8c:	aa 0d       	add	r26, r10
   1cd8e:	bb 1d       	adc	r27, r11
   1cd90:	11 96       	adiw	r26, 0x01	; 1
   1cd92:	8c 91       	ld	r24, X
   1cd94:	21 50       	subi	r18, 0x01	; 1
   1cd96:	31 09       	sbc	r19, r1
   1cd98:	d6 01       	movw	r26, r12
   1cd9a:	11 96       	adiw	r26, 0x01	; 1
   1cd9c:	28 15       	cp	r18, r8
   1cd9e:	39 05       	cpc	r19, r9
   1cda0:	f4 f0       	brlt	.+60     	; 0x1cdde <dtoa_prf+0x2b6>
   1cda2:	f6 01       	movw	r30, r12
   1cda4:	80 83       	st	Z, r24
   1cda6:	6d 01       	movw	r12, r26
   1cda8:	db cf       	rjmp	.-74     	; 0x1cd60 <dtoa_prf+0x238>
   1cdaa:	b1 2c       	mov	r11, r1
   1cdac:	a1 2c       	mov	r10, r1
   1cdae:	a0 cf       	rjmp	.-192    	; 0x1ccf0 <dtoa_prf+0x1c8>
   1cdb0:	f7 01       	movw	r30, r14
   1cdb2:	b1 93       	st	Z+, r27
   1cdb4:	7f 01       	movw	r14, r30
   1cdb6:	a1 50       	subi	r26, 0x01	; 1
   1cdb8:	aa cf       	rjmp	.-172    	; 0x1cd0e <dtoa_prf+0x1e6>
   1cdba:	91 11       	cpse	r25, r1
   1cdbc:	b0 cf       	rjmp	.-160    	; 0x1cd1e <dtoa_prf+0x1f6>
   1cdbe:	d6 01       	movw	r26, r12
   1cdc0:	94 2f       	mov	r25, r20
   1cdc2:	50 e3       	ldi	r21, 0x30	; 48
   1cdc4:	02 c0       	rjmp	.+4      	; 0x1cdca <dtoa_prf+0x2a2>
   1cdc6:	5d 93       	st	X+, r21
   1cdc8:	91 50       	subi	r25, 0x01	; 1
   1cdca:	91 11       	cpse	r25, r1
   1cdcc:	fc cf       	rjmp	.-8      	; 0x1cdc6 <dtoa_prf+0x29e>
   1cdce:	c4 0e       	add	r12, r20
   1cdd0:	d1 1c       	adc	r13, r1
   1cdd2:	40 e0       	ldi	r20, 0x00	; 0
   1cdd4:	ac cf       	rjmp	.-168    	; 0x1cd2e <dtoa_prf+0x206>
   1cdd6:	01 e0       	ldi	r16, 0x01	; 1
   1cdd8:	ba cf       	rjmp	.-140    	; 0x1cd4e <dtoa_prf+0x226>
   1cdda:	80 e3       	ldi	r24, 0x30	; 48
   1cddc:	db cf       	rjmp	.-74     	; 0x1cd94 <dtoa_prf+0x26c>
   1cdde:	62 17       	cp	r22, r18
   1cde0:	73 07       	cpc	r23, r19
   1cde2:	31 f4       	brne	.+12     	; 0x1cdf0 <dtoa_prf+0x2c8>
   1cde4:	96 33       	cpi	r25, 0x36	; 54
   1cde6:	88 f4       	brcc	.+34     	; 0x1ce0a <dtoa_prf+0x2e2>
   1cde8:	95 33       	cpi	r25, 0x35	; 53
   1cdea:	11 f4       	brne	.+4      	; 0x1cdf0 <dtoa_prf+0x2c8>
   1cdec:	55 23       	and	r21, r21
   1cdee:	69 f0       	breq	.+26     	; 0x1ce0a <dtoa_prf+0x2e2>
   1cdf0:	f6 01       	movw	r30, r12
   1cdf2:	80 83       	st	Z, r24
   1cdf4:	fd 01       	movw	r30, r26
   1cdf6:	84 2f       	mov	r24, r20
   1cdf8:	90 e2       	ldi	r25, 0x20	; 32
   1cdfa:	81 11       	cpse	r24, r1
   1cdfc:	08 c0       	rjmp	.+16     	; 0x1ce0e <dtoa_prf+0x2e6>
   1cdfe:	a4 0f       	add	r26, r20
   1ce00:	b1 1d       	adc	r27, r1
   1ce02:	1c 92       	st	X, r1
   1ce04:	90 e0       	ldi	r25, 0x00	; 0
   1ce06:	80 e0       	ldi	r24, 0x00	; 0
   1ce08:	f3 ce       	rjmp	.-538    	; 0x1cbf0 <dtoa_prf+0xc8>
   1ce0a:	81 e3       	ldi	r24, 0x31	; 49
   1ce0c:	f1 cf       	rjmp	.-30     	; 0x1cdf0 <dtoa_prf+0x2c8>
   1ce0e:	91 93       	st	Z+, r25
   1ce10:	81 50       	subi	r24, 0x01	; 1
   1ce12:	f3 cf       	rjmp	.-26     	; 0x1cdfa <dtoa_prf+0x2d2>
   1ce14:	91 11       	cpse	r25, r1
   1ce16:	83 cf       	rjmp	.-250    	; 0x1cd1e <dtoa_prf+0x1f6>
   1ce18:	8a cf       	rjmp	.-236    	; 0x1cd2e <dtoa_prf+0x206>

0001ce1a <strtod>:
strtod():
   1ce1a:	8f 92       	push	r8
   1ce1c:	9f 92       	push	r9
   1ce1e:	af 92       	push	r10
   1ce20:	bf 92       	push	r11
   1ce22:	cf 92       	push	r12
   1ce24:	df 92       	push	r13
   1ce26:	ef 92       	push	r14
   1ce28:	ff 92       	push	r15
   1ce2a:	0f 93       	push	r16
   1ce2c:	1f 93       	push	r17
   1ce2e:	cf 93       	push	r28
   1ce30:	df 93       	push	r29
   1ce32:	5c 01       	movw	r10, r24
   1ce34:	7b 01       	movw	r14, r22
   1ce36:	61 15       	cp	r22, r1
   1ce38:	71 05       	cpc	r23, r1
   1ce3a:	19 f0       	breq	.+6      	; 0x1ce42 <strtod+0x28>
   1ce3c:	db 01       	movw	r26, r22
   1ce3e:	8d 93       	st	X+, r24
   1ce40:	9c 93       	st	X, r25
   1ce42:	85 01       	movw	r16, r10
   1ce44:	0f 5f       	subi	r16, 0xFF	; 255
   1ce46:	1f 4f       	sbci	r17, 0xFF	; 255
   1ce48:	f5 01       	movw	r30, r10
   1ce4a:	d0 81       	ld	r29, Z
   1ce4c:	8d 2f       	mov	r24, r29
   1ce4e:	90 e0       	ldi	r25, 0x00	; 0
   1ce50:	0e 94 df e1 	call	0x1c3be	; 0x1c3be <isspace>
   1ce54:	6c 01       	movw	r12, r24
   1ce56:	89 2b       	or	r24, r25
   1ce58:	b9 f5       	brne	.+110    	; 0x1cec8 <strtod+0xae>
   1ce5a:	dd 32       	cpi	r29, 0x2D	; 45
   1ce5c:	b9 f5       	brne	.+110    	; 0x1cecc <strtod+0xb2>
   1ce5e:	0f 5f       	subi	r16, 0xFF	; 255
   1ce60:	1f 4f       	sbci	r17, 0xFF	; 255
   1ce62:	d5 01       	movw	r26, r10
   1ce64:	11 96       	adiw	r26, 0x01	; 1
   1ce66:	dc 91       	ld	r29, X
   1ce68:	c1 e0       	ldi	r28, 0x01	; 1
   1ce6a:	58 01       	movw	r10, r16
   1ce6c:	f1 e0       	ldi	r31, 0x01	; 1
   1ce6e:	af 1a       	sub	r10, r31
   1ce70:	b1 08       	sbc	r11, r1
   1ce72:	43 e0       	ldi	r20, 0x03	; 3
   1ce74:	50 e0       	ldi	r21, 0x00	; 0
   1ce76:	68 ee       	ldi	r22, 0xE8	; 232
   1ce78:	73 e0       	ldi	r23, 0x03	; 3
   1ce7a:	c5 01       	movw	r24, r10
   1ce7c:	0e 94 46 e9 	call	0x1d28c	; 0x1d28c <strncasecmp_P>
   1ce80:	89 2b       	or	r24, r25
   1ce82:	69 f5       	brne	.+90     	; 0x1cede <strtod+0xc4>
   1ce84:	68 01       	movw	r12, r16
   1ce86:	82 e0       	ldi	r24, 0x02	; 2
   1ce88:	c8 0e       	add	r12, r24
   1ce8a:	d1 1c       	adc	r13, r1
   1ce8c:	45 e0       	ldi	r20, 0x05	; 5
   1ce8e:	50 e0       	ldi	r21, 0x00	; 0
   1ce90:	63 ee       	ldi	r22, 0xE3	; 227
   1ce92:	73 e0       	ldi	r23, 0x03	; 3
   1ce94:	c6 01       	movw	r24, r12
   1ce96:	0e 94 46 e9 	call	0x1d28c	; 0x1d28c <strncasecmp_P>
   1ce9a:	89 2b       	or	r24, r25
   1ce9c:	21 f4       	brne	.+8      	; 0x1cea6 <strtod+0x8c>
   1ce9e:	68 01       	movw	r12, r16
   1cea0:	97 e0       	ldi	r25, 0x07	; 7
   1cea2:	c9 0e       	add	r12, r25
   1cea4:	d1 1c       	adc	r13, r1
   1cea6:	e1 14       	cp	r14, r1
   1cea8:	f1 04       	cpc	r15, r1
   1ceaa:	19 f0       	breq	.+6      	; 0x1ceb2 <strtod+0x98>
   1ceac:	d7 01       	movw	r26, r14
   1ceae:	cd 92       	st	X+, r12
   1ceb0:	dc 92       	st	X, r13
   1ceb2:	60 e0       	ldi	r22, 0x00	; 0
   1ceb4:	70 e0       	ldi	r23, 0x00	; 0
   1ceb6:	80 e8       	ldi	r24, 0x80	; 128
   1ceb8:	9f ef       	ldi	r25, 0xFF	; 255
   1ceba:	c1 11       	cpse	r28, r1
   1cebc:	ff c0       	rjmp	.+510    	; 0x1d0bc <strtod+0x2a2>
   1cebe:	60 e0       	ldi	r22, 0x00	; 0
   1cec0:	70 e0       	ldi	r23, 0x00	; 0
   1cec2:	80 e8       	ldi	r24, 0x80	; 128
   1cec4:	9f e7       	ldi	r25, 0x7F	; 127
   1cec6:	fa c0       	rjmp	.+500    	; 0x1d0bc <strtod+0x2a2>
   1cec8:	58 01       	movw	r10, r16
   1ceca:	bb cf       	rjmp	.-138    	; 0x1ce42 <strtod+0x28>
   1cecc:	db 32       	cpi	r29, 0x2B	; 43
   1cece:	29 f4       	brne	.+10     	; 0x1ceda <strtod+0xc0>
   1ced0:	85 01       	movw	r16, r10
   1ced2:	0e 5f       	subi	r16, 0xFE	; 254
   1ced4:	1f 4f       	sbci	r17, 0xFF	; 255
   1ced6:	f5 01       	movw	r30, r10
   1ced8:	d1 81       	ldd	r29, Z+1	; 0x01
   1ceda:	c0 e0       	ldi	r28, 0x00	; 0
   1cedc:	c6 cf       	rjmp	.-116    	; 0x1ce6a <strtod+0x50>
   1cede:	43 e0       	ldi	r20, 0x03	; 3
   1cee0:	50 e0       	ldi	r21, 0x00	; 0
   1cee2:	60 ee       	ldi	r22, 0xE0	; 224
   1cee4:	73 e0       	ldi	r23, 0x03	; 3
   1cee6:	c5 01       	movw	r24, r10
   1cee8:	0e 94 46 e9 	call	0x1d28c	; 0x1d28c <strncasecmp_P>
   1ceec:	89 2b       	or	r24, r25
   1ceee:	e9 f0       	breq	.+58     	; 0x1cf2a <strtod+0x110>
   1cef0:	f8 01       	movw	r30, r16
   1cef2:	10 e0       	ldi	r17, 0x00	; 0
   1cef4:	00 e0       	ldi	r16, 0x00	; 0
   1cef6:	20 e0       	ldi	r18, 0x00	; 0
   1cef8:	30 e0       	ldi	r19, 0x00	; 0
   1cefa:	a9 01       	movw	r20, r18
   1cefc:	5f 01       	movw	r10, r30
   1cefe:	b0 ed       	ldi	r27, 0xD0	; 208
   1cf00:	8b 2e       	mov	r8, r27
   1cf02:	8d 0e       	add	r8, r29
   1cf04:	89 e0       	ldi	r24, 0x09	; 9
   1cf06:	88 15       	cp	r24, r8
   1cf08:	c8 f1       	brcs	.+114    	; 0x1cf7c <strtod+0x162>
   1cf0a:	9c 2e       	mov	r9, r28
   1cf0c:	68 94       	set
   1cf0e:	91 f8       	bld	r9, 1
   1cf10:	8c 2f       	mov	r24, r28
   1cf12:	88 70       	andi	r24, 0x08	; 8
   1cf14:	c2 ff       	sbrs	r28, 2
   1cf16:	16 c0       	rjmp	.+44     	; 0x1cf44 <strtod+0x12a>
   1cf18:	81 11       	cpse	r24, r1
   1cf1a:	02 c0       	rjmp	.+4      	; 0x1cf20 <strtod+0x106>
   1cf1c:	0f 5f       	subi	r16, 0xFF	; 255
   1cf1e:	1f 4f       	sbci	r17, 0xFF	; 255
   1cf20:	31 96       	adiw	r30, 0x01	; 1
   1cf22:	d5 01       	movw	r26, r10
   1cf24:	dc 91       	ld	r29, X
   1cf26:	c9 2d       	mov	r28, r9
   1cf28:	e9 cf       	rjmp	.-46     	; 0x1cefc <strtod+0xe2>
   1cf2a:	e1 14       	cp	r14, r1
   1cf2c:	f1 04       	cpc	r15, r1
   1cf2e:	29 f0       	breq	.+10     	; 0x1cf3a <strtod+0x120>
   1cf30:	0e 5f       	subi	r16, 0xFE	; 254
   1cf32:	1f 4f       	sbci	r17, 0xFF	; 255
   1cf34:	f7 01       	movw	r30, r14
   1cf36:	11 83       	std	Z+1, r17	; 0x01
   1cf38:	00 83       	st	Z, r16
   1cf3a:	60 e0       	ldi	r22, 0x00	; 0
   1cf3c:	70 e0       	ldi	r23, 0x00	; 0
   1cf3e:	80 ec       	ldi	r24, 0xC0	; 192
   1cf40:	9f e7       	ldi	r25, 0x7F	; 127
   1cf42:	bc c0       	rjmp	.+376    	; 0x1d0bc <strtod+0x2a2>
   1cf44:	88 23       	and	r24, r24
   1cf46:	11 f0       	breq	.+4      	; 0x1cf4c <strtod+0x132>
   1cf48:	01 50       	subi	r16, 0x01	; 1
   1cf4a:	11 09       	sbc	r17, r1
   1cf4c:	a5 e0       	ldi	r26, 0x05	; 5
   1cf4e:	b0 e0       	ldi	r27, 0x00	; 0
   1cf50:	0e 94 86 de 	call	0x1bd0c	; 0x1bd0c <__muluhisi3>
   1cf54:	9b 01       	movw	r18, r22
   1cf56:	ac 01       	movw	r20, r24
   1cf58:	22 0f       	add	r18, r18
   1cf5a:	33 1f       	adc	r19, r19
   1cf5c:	44 1f       	adc	r20, r20
   1cf5e:	55 1f       	adc	r21, r21
   1cf60:	28 0d       	add	r18, r8
   1cf62:	31 1d       	adc	r19, r1
   1cf64:	41 1d       	adc	r20, r1
   1cf66:	51 1d       	adc	r21, r1
   1cf68:	28 39       	cpi	r18, 0x98	; 152
   1cf6a:	99 e9       	ldi	r25, 0x99	; 153
   1cf6c:	39 07       	cpc	r19, r25
   1cf6e:	49 07       	cpc	r20, r25
   1cf70:	99 e1       	ldi	r25, 0x19	; 25
   1cf72:	59 07       	cpc	r21, r25
   1cf74:	a8 f2       	brcs	.-86     	; 0x1cf20 <strtod+0x106>
   1cf76:	c6 60       	ori	r28, 0x06	; 6
   1cf78:	9c 2e       	mov	r9, r28
   1cf7a:	d2 cf       	rjmp	.-92     	; 0x1cf20 <strtod+0x106>
   1cf7c:	ae ef       	ldi	r26, 0xFE	; 254
   1cf7e:	8a 12       	cpse	r8, r26
   1cf80:	06 c0       	rjmp	.+12     	; 0x1cf8e <strtod+0x174>
   1cf82:	c3 fd       	sbrc	r28, 3
   1cf84:	3c c0       	rjmp	.+120    	; 0x1cffe <strtod+0x1e4>
   1cf86:	9c 2e       	mov	r9, r28
   1cf88:	68 94       	set
   1cf8a:	93 f8       	bld	r9, 3
   1cf8c:	c9 cf       	rjmp	.-110    	; 0x1cf20 <strtod+0x106>
   1cf8e:	df 7d       	andi	r29, 0xDF	; 223
   1cf90:	d5 34       	cpi	r29, 0x45	; 69
   1cf92:	a9 f5       	brne	.+106    	; 0x1cffe <strtod+0x1e4>
   1cf94:	80 81       	ld	r24, Z
   1cf96:	8d 32       	cpi	r24, 0x2D	; 45
   1cf98:	39 f4       	brne	.+14     	; 0x1cfa8 <strtod+0x18e>
   1cf9a:	c0 61       	ori	r28, 0x10	; 16
   1cf9c:	df 01       	movw	r26, r30
   1cf9e:	12 96       	adiw	r26, 0x02	; 2
   1cfa0:	81 81       	ldd	r24, Z+1	; 0x01
   1cfa2:	62 e0       	ldi	r22, 0x02	; 2
   1cfa4:	70 e0       	ldi	r23, 0x00	; 0
   1cfa6:	06 c0       	rjmp	.+12     	; 0x1cfb4 <strtod+0x19a>
   1cfa8:	df 01       	movw	r26, r30
   1cfaa:	8b 32       	cpi	r24, 0x2B	; 43
   1cfac:	c1 f3       	breq	.-16     	; 0x1cf9e <strtod+0x184>
   1cfae:	11 96       	adiw	r26, 0x01	; 1
   1cfb0:	61 e0       	ldi	r22, 0x01	; 1
   1cfb2:	70 e0       	ldi	r23, 0x00	; 0
   1cfb4:	80 53       	subi	r24, 0x30	; 48
   1cfb6:	5d 01       	movw	r10, r26
   1cfb8:	a6 1a       	sub	r10, r22
   1cfba:	b7 0a       	sbc	r11, r23
   1cfbc:	8a 30       	cpi	r24, 0x0A	; 10
   1cfbe:	f8 f4       	brcc	.+62     	; 0x1cffe <strtod+0x1e4>
   1cfc0:	e0 e8       	ldi	r30, 0x80	; 128
   1cfc2:	ce 16       	cp	r12, r30
   1cfc4:	ec e0       	ldi	r30, 0x0C	; 12
   1cfc6:	de 06       	cpc	r13, r30
   1cfc8:	5c f4       	brge	.+22     	; 0x1cfe0 <strtod+0x1c6>
   1cfca:	b6 01       	movw	r22, r12
   1cfcc:	66 0f       	add	r22, r22
   1cfce:	77 1f       	adc	r23, r23
   1cfd0:	66 0f       	add	r22, r22
   1cfd2:	77 1f       	adc	r23, r23
   1cfd4:	c6 0e       	add	r12, r22
   1cfd6:	d7 1e       	adc	r13, r23
   1cfd8:	cc 0c       	add	r12, r12
   1cfda:	dd 1c       	adc	r13, r13
   1cfdc:	c8 0e       	add	r12, r24
   1cfde:	d1 1c       	adc	r13, r1
   1cfe0:	5d 01       	movw	r10, r26
   1cfe2:	ff ef       	ldi	r31, 0xFF	; 255
   1cfe4:	af 1a       	sub	r10, r31
   1cfe6:	bf 0a       	sbc	r11, r31
   1cfe8:	8c 91       	ld	r24, X
   1cfea:	80 53       	subi	r24, 0x30	; 48
   1cfec:	8a 30       	cpi	r24, 0x0A	; 10
   1cfee:	a8 f1       	brcs	.+106    	; 0x1d05a <strtod+0x240>
   1cff0:	c4 ff       	sbrs	r28, 4
   1cff2:	03 c0       	rjmp	.+6      	; 0x1cffa <strtod+0x1e0>
   1cff4:	d1 94       	neg	r13
   1cff6:	c1 94       	neg	r12
   1cff8:	d1 08       	sbc	r13, r1
   1cffa:	0c 0d       	add	r16, r12
   1cffc:	1d 1d       	adc	r17, r13
   1cffe:	c1 ff       	sbrs	r28, 1
   1d000:	09 c0       	rjmp	.+18     	; 0x1d014 <strtod+0x1fa>
   1d002:	e1 14       	cp	r14, r1
   1d004:	f1 04       	cpc	r15, r1
   1d006:	31 f0       	breq	.+12     	; 0x1d014 <strtod+0x1fa>
   1d008:	81 e0       	ldi	r24, 0x01	; 1
   1d00a:	a8 1a       	sub	r10, r24
   1d00c:	b1 08       	sbc	r11, r1
   1d00e:	d7 01       	movw	r26, r14
   1d010:	ad 92       	st	X+, r10
   1d012:	bc 92       	st	X, r11
   1d014:	ca 01       	movw	r24, r20
   1d016:	b9 01       	movw	r22, r18
   1d018:	0e 94 c6 dc 	call	0x1b98c	; 0x1b98c <__floatunsisf>
   1d01c:	c3 70       	andi	r28, 0x03	; 3
   1d01e:	c3 30       	cpi	r28, 0x03	; 3
   1d020:	09 f4       	brne	.+2      	; 0x1d024 <strtod+0x20a>
   1d022:	90 58       	subi	r25, 0x80	; 128
   1d024:	4b 01       	movw	r8, r22
   1d026:	5c 01       	movw	r10, r24
   1d028:	20 e0       	ldi	r18, 0x00	; 0
   1d02a:	30 e0       	ldi	r19, 0x00	; 0
   1d02c:	a9 01       	movw	r20, r18
   1d02e:	0e 94 19 dc 	call	0x1b832	; 0x1b832 <__cmpsf2>
   1d032:	88 23       	and	r24, r24
   1d034:	09 f4       	brne	.+2      	; 0x1d038 <strtod+0x21e>
   1d036:	40 c0       	rjmp	.+128    	; 0x1d0b8 <strtod+0x29e>
   1d038:	c7 e1       	ldi	r28, 0x17	; 23
   1d03a:	d4 e0       	ldi	r29, 0x04	; 4
   1d03c:	17 ff       	sbrs	r17, 7
   1d03e:	05 c0       	rjmp	.+10     	; 0x1d04a <strtod+0x230>
   1d040:	11 95       	neg	r17
   1d042:	01 95       	neg	r16
   1d044:	11 09       	sbc	r17, r1
   1d046:	cf ef       	ldi	r28, 0xFF	; 255
   1d048:	d3 e0       	ldi	r29, 0x03	; 3
   1d04a:	6e 01       	movw	r12, r28
   1d04c:	b8 e1       	ldi	r27, 0x18	; 24
   1d04e:	cb 1a       	sub	r12, r27
   1d050:	d1 08       	sbc	r13, r1
   1d052:	80 e2       	ldi	r24, 0x20	; 32
   1d054:	e8 2e       	mov	r14, r24
   1d056:	f1 2c       	mov	r15, r1
   1d058:	0f c0       	rjmp	.+30     	; 0x1d078 <strtod+0x25e>
   1d05a:	d5 01       	movw	r26, r10
   1d05c:	b1 cf       	rjmp	.-158    	; 0x1cfc0 <strtod+0x1a6>
   1d05e:	fe 01       	movw	r30, r28
   1d060:	25 91       	lpm	r18, Z+
   1d062:	35 91       	lpm	r19, Z+
   1d064:	45 91       	lpm	r20, Z+
   1d066:	54 91       	lpm	r21, Z
   1d068:	0e 19       	sub	r16, r14
   1d06a:	1f 09       	sbc	r17, r15
   1d06c:	c5 01       	movw	r24, r10
   1d06e:	b4 01       	movw	r22, r8
   1d070:	0e 94 7d dd 	call	0x1bafa	; 0x1bafa <__mulsf3>
   1d074:	4b 01       	movw	r8, r22
   1d076:	5c 01       	movw	r10, r24
   1d078:	d5 01       	movw	r26, r10
   1d07a:	c4 01       	movw	r24, r8
   1d07c:	0e 15       	cp	r16, r14
   1d07e:	1f 05       	cpc	r17, r15
   1d080:	74 f7       	brge	.-36     	; 0x1d05e <strtod+0x244>
   1d082:	24 97       	sbiw	r28, 0x04	; 4
   1d084:	f5 94       	asr	r15
   1d086:	e7 94       	ror	r14
   1d088:	cc 16       	cp	r12, r28
   1d08a:	dd 06       	cpc	r13, r29
   1d08c:	a9 f7       	brne	.-22     	; 0x1d078 <strtod+0x25e>
   1d08e:	8a 2f       	mov	r24, r26
   1d090:	88 0f       	add	r24, r24
   1d092:	8b 2f       	mov	r24, r27
   1d094:	88 1f       	adc	r24, r24
   1d096:	8f 3f       	cpi	r24, 0xFF	; 255
   1d098:	49 f0       	breq	.+18     	; 0x1d0ac <strtod+0x292>
   1d09a:	20 e0       	ldi	r18, 0x00	; 0
   1d09c:	30 e0       	ldi	r19, 0x00	; 0
   1d09e:	a9 01       	movw	r20, r18
   1d0a0:	c5 01       	movw	r24, r10
   1d0a2:	b4 01       	movw	r22, r8
   1d0a4:	0e 94 19 dc 	call	0x1b832	; 0x1b832 <__cmpsf2>
   1d0a8:	81 11       	cpse	r24, r1
   1d0aa:	06 c0       	rjmp	.+12     	; 0x1d0b8 <strtod+0x29e>
   1d0ac:	82 e2       	ldi	r24, 0x22	; 34
   1d0ae:	90 e0       	ldi	r25, 0x00	; 0
   1d0b0:	90 93 d4 14 	sts	0x14D4, r25	; 0x8014d4 <errno+0x1>
   1d0b4:	80 93 d3 14 	sts	0x14D3, r24	; 0x8014d3 <errno>
   1d0b8:	c5 01       	movw	r24, r10
   1d0ba:	b4 01       	movw	r22, r8
   1d0bc:	df 91       	pop	r29
   1d0be:	cf 91       	pop	r28
   1d0c0:	1f 91       	pop	r17
   1d0c2:	0f 91       	pop	r16
   1d0c4:	ff 90       	pop	r15
   1d0c6:	ef 90       	pop	r14
   1d0c8:	df 90       	pop	r13
   1d0ca:	cf 90       	pop	r12
   1d0cc:	bf 90       	pop	r11
   1d0ce:	af 90       	pop	r10
   1d0d0:	9f 90       	pop	r9
   1d0d2:	8f 90       	pop	r8
   1d0d4:	08 95       	ret

0001d0d6 <__ftoa_engine>:
__ftoa_engine():
   1d0d6:	28 30       	cpi	r18, 0x08	; 8
   1d0d8:	08 f0       	brcs	.+2      	; 0x1d0dc <__ftoa_engine+0x6>
   1d0da:	27 e0       	ldi	r18, 0x07	; 7
   1d0dc:	33 27       	eor	r19, r19
   1d0de:	da 01       	movw	r26, r20
   1d0e0:	99 0f       	add	r25, r25
   1d0e2:	31 1d       	adc	r19, r1
   1d0e4:	87 fd       	sbrc	r24, 7
   1d0e6:	91 60       	ori	r25, 0x01	; 1
   1d0e8:	00 96       	adiw	r24, 0x00	; 0
   1d0ea:	61 05       	cpc	r22, r1
   1d0ec:	71 05       	cpc	r23, r1
   1d0ee:	39 f4       	brne	.+14     	; 0x1d0fe <__ftoa_engine+0x28>
   1d0f0:	32 60       	ori	r19, 0x02	; 2
   1d0f2:	2e 5f       	subi	r18, 0xFE	; 254
   1d0f4:	3d 93       	st	X+, r19
   1d0f6:	30 e3       	ldi	r19, 0x30	; 48
   1d0f8:	2a 95       	dec	r18
   1d0fa:	e1 f7       	brne	.-8      	; 0x1d0f4 <__ftoa_engine+0x1e>
   1d0fc:	08 95       	ret
   1d0fe:	9f 3f       	cpi	r25, 0xFF	; 255
   1d100:	30 f0       	brcs	.+12     	; 0x1d10e <__ftoa_engine+0x38>
   1d102:	80 38       	cpi	r24, 0x80	; 128
   1d104:	71 05       	cpc	r23, r1
   1d106:	61 05       	cpc	r22, r1
   1d108:	09 f0       	breq	.+2      	; 0x1d10c <__ftoa_engine+0x36>
   1d10a:	3c 5f       	subi	r19, 0xFC	; 252
   1d10c:	3c 5f       	subi	r19, 0xFC	; 252
   1d10e:	3d 93       	st	X+, r19
   1d110:	91 30       	cpi	r25, 0x01	; 1
   1d112:	08 f0       	brcs	.+2      	; 0x1d116 <__ftoa_engine+0x40>
   1d114:	80 68       	ori	r24, 0x80	; 128
   1d116:	91 1d       	adc	r25, r1
   1d118:	df 93       	push	r29
   1d11a:	cf 93       	push	r28
   1d11c:	1f 93       	push	r17
   1d11e:	0f 93       	push	r16
   1d120:	ff 92       	push	r15
   1d122:	ef 92       	push	r14
   1d124:	19 2f       	mov	r17, r25
   1d126:	98 7f       	andi	r25, 0xF8	; 248
   1d128:	96 95       	lsr	r25
   1d12a:	e9 2f       	mov	r30, r25
   1d12c:	96 95       	lsr	r25
   1d12e:	96 95       	lsr	r25
   1d130:	e9 0f       	add	r30, r25
   1d132:	ff 27       	eor	r31, r31
   1d134:	eb 58       	subi	r30, 0x8B	; 139
   1d136:	fb 4f       	sbci	r31, 0xFB	; 251
   1d138:	99 27       	eor	r25, r25
   1d13a:	33 27       	eor	r19, r19
   1d13c:	ee 24       	eor	r14, r14
   1d13e:	ff 24       	eor	r15, r15
   1d140:	a7 01       	movw	r20, r14
   1d142:	e7 01       	movw	r28, r14
   1d144:	05 90       	lpm	r0, Z+
   1d146:	08 94       	sec
   1d148:	07 94       	ror	r0
   1d14a:	28 f4       	brcc	.+10     	; 0x1d156 <__ftoa_engine+0x80>
   1d14c:	36 0f       	add	r19, r22
   1d14e:	e7 1e       	adc	r14, r23
   1d150:	f8 1e       	adc	r15, r24
   1d152:	49 1f       	adc	r20, r25
   1d154:	51 1d       	adc	r21, r1
   1d156:	66 0f       	add	r22, r22
   1d158:	77 1f       	adc	r23, r23
   1d15a:	88 1f       	adc	r24, r24
   1d15c:	99 1f       	adc	r25, r25
   1d15e:	06 94       	lsr	r0
   1d160:	a1 f7       	brne	.-24     	; 0x1d14a <__ftoa_engine+0x74>
   1d162:	05 90       	lpm	r0, Z+
   1d164:	07 94       	ror	r0
   1d166:	28 f4       	brcc	.+10     	; 0x1d172 <__ftoa_engine+0x9c>
   1d168:	e7 0e       	add	r14, r23
   1d16a:	f8 1e       	adc	r15, r24
   1d16c:	49 1f       	adc	r20, r25
   1d16e:	56 1f       	adc	r21, r22
   1d170:	c1 1d       	adc	r28, r1
   1d172:	77 0f       	add	r23, r23
   1d174:	88 1f       	adc	r24, r24
   1d176:	99 1f       	adc	r25, r25
   1d178:	66 1f       	adc	r22, r22
   1d17a:	06 94       	lsr	r0
   1d17c:	a1 f7       	brne	.-24     	; 0x1d166 <__ftoa_engine+0x90>
   1d17e:	05 90       	lpm	r0, Z+
   1d180:	07 94       	ror	r0
   1d182:	28 f4       	brcc	.+10     	; 0x1d18e <__ftoa_engine+0xb8>
   1d184:	f8 0e       	add	r15, r24
   1d186:	49 1f       	adc	r20, r25
   1d188:	56 1f       	adc	r21, r22
   1d18a:	c7 1f       	adc	r28, r23
   1d18c:	d1 1d       	adc	r29, r1
   1d18e:	88 0f       	add	r24, r24
   1d190:	99 1f       	adc	r25, r25
   1d192:	66 1f       	adc	r22, r22
   1d194:	77 1f       	adc	r23, r23
   1d196:	06 94       	lsr	r0
   1d198:	a1 f7       	brne	.-24     	; 0x1d182 <__ftoa_engine+0xac>
   1d19a:	05 90       	lpm	r0, Z+
   1d19c:	07 94       	ror	r0
   1d19e:	20 f4       	brcc	.+8      	; 0x1d1a8 <__ftoa_engine+0xd2>
   1d1a0:	49 0f       	add	r20, r25
   1d1a2:	56 1f       	adc	r21, r22
   1d1a4:	c7 1f       	adc	r28, r23
   1d1a6:	d8 1f       	adc	r29, r24
   1d1a8:	99 0f       	add	r25, r25
   1d1aa:	66 1f       	adc	r22, r22
   1d1ac:	77 1f       	adc	r23, r23
   1d1ae:	88 1f       	adc	r24, r24
   1d1b0:	06 94       	lsr	r0
   1d1b2:	a9 f7       	brne	.-22     	; 0x1d19e <__ftoa_engine+0xc8>
   1d1b4:	84 91       	lpm	r24, Z
   1d1b6:	10 95       	com	r17
   1d1b8:	17 70       	andi	r17, 0x07	; 7
   1d1ba:	41 f0       	breq	.+16     	; 0x1d1cc <__ftoa_engine+0xf6>
   1d1bc:	d6 95       	lsr	r29
   1d1be:	c7 95       	ror	r28
   1d1c0:	57 95       	ror	r21
   1d1c2:	47 95       	ror	r20
   1d1c4:	f7 94       	ror	r15
   1d1c6:	e7 94       	ror	r14
   1d1c8:	1a 95       	dec	r17
   1d1ca:	c1 f7       	brne	.-16     	; 0x1d1bc <__ftoa_engine+0xe6>
   1d1cc:	eb e1       	ldi	r30, 0x1B	; 27
   1d1ce:	f4 e0       	ldi	r31, 0x04	; 4
   1d1d0:	68 94       	set
   1d1d2:	15 90       	lpm	r1, Z+
   1d1d4:	15 91       	lpm	r17, Z+
   1d1d6:	35 91       	lpm	r19, Z+
   1d1d8:	65 91       	lpm	r22, Z+
   1d1da:	95 91       	lpm	r25, Z+
   1d1dc:	05 90       	lpm	r0, Z+
   1d1de:	7f e2       	ldi	r23, 0x2F	; 47
   1d1e0:	73 95       	inc	r23
   1d1e2:	e1 18       	sub	r14, r1
   1d1e4:	f1 0a       	sbc	r15, r17
   1d1e6:	43 0b       	sbc	r20, r19
   1d1e8:	56 0b       	sbc	r21, r22
   1d1ea:	c9 0b       	sbc	r28, r25
   1d1ec:	d0 09       	sbc	r29, r0
   1d1ee:	c0 f7       	brcc	.-16     	; 0x1d1e0 <__ftoa_engine+0x10a>
   1d1f0:	e1 0c       	add	r14, r1
   1d1f2:	f1 1e       	adc	r15, r17
   1d1f4:	43 1f       	adc	r20, r19
   1d1f6:	56 1f       	adc	r21, r22
   1d1f8:	c9 1f       	adc	r28, r25
   1d1fa:	d0 1d       	adc	r29, r0
   1d1fc:	7e f4       	brtc	.+30     	; 0x1d21c <__ftoa_engine+0x146>
   1d1fe:	70 33       	cpi	r23, 0x30	; 48
   1d200:	11 f4       	brne	.+4      	; 0x1d206 <__ftoa_engine+0x130>
   1d202:	8a 95       	dec	r24
   1d204:	e6 cf       	rjmp	.-52     	; 0x1d1d2 <__ftoa_engine+0xfc>
   1d206:	e8 94       	clt
   1d208:	01 50       	subi	r16, 0x01	; 1
   1d20a:	30 f0       	brcs	.+12     	; 0x1d218 <__ftoa_engine+0x142>
   1d20c:	08 0f       	add	r16, r24
   1d20e:	0a f4       	brpl	.+2      	; 0x1d212 <__ftoa_engine+0x13c>
   1d210:	00 27       	eor	r16, r16
   1d212:	02 17       	cp	r16, r18
   1d214:	08 f4       	brcc	.+2      	; 0x1d218 <__ftoa_engine+0x142>
   1d216:	20 2f       	mov	r18, r16
   1d218:	23 95       	inc	r18
   1d21a:	02 2f       	mov	r16, r18
   1d21c:	7a 33       	cpi	r23, 0x3A	; 58
   1d21e:	28 f0       	brcs	.+10     	; 0x1d22a <__ftoa_engine+0x154>
   1d220:	79 e3       	ldi	r23, 0x39	; 57
   1d222:	7d 93       	st	X+, r23
   1d224:	2a 95       	dec	r18
   1d226:	e9 f7       	brne	.-6      	; 0x1d222 <__ftoa_engine+0x14c>
   1d228:	10 c0       	rjmp	.+32     	; 0x1d24a <__ftoa_engine+0x174>
   1d22a:	7d 93       	st	X+, r23
   1d22c:	2a 95       	dec	r18
   1d22e:	89 f6       	brne	.-94     	; 0x1d1d2 <__ftoa_engine+0xfc>
   1d230:	06 94       	lsr	r0
   1d232:	97 95       	ror	r25
   1d234:	67 95       	ror	r22
   1d236:	37 95       	ror	r19
   1d238:	17 95       	ror	r17
   1d23a:	17 94       	ror	r1
   1d23c:	e1 18       	sub	r14, r1
   1d23e:	f1 0a       	sbc	r15, r17
   1d240:	43 0b       	sbc	r20, r19
   1d242:	56 0b       	sbc	r21, r22
   1d244:	c9 0b       	sbc	r28, r25
   1d246:	d0 09       	sbc	r29, r0
   1d248:	98 f0       	brcs	.+38     	; 0x1d270 <__ftoa_engine+0x19a>
   1d24a:	23 95       	inc	r18
   1d24c:	7e 91       	ld	r23, -X
   1d24e:	73 95       	inc	r23
   1d250:	7a 33       	cpi	r23, 0x3A	; 58
   1d252:	08 f0       	brcs	.+2      	; 0x1d256 <__ftoa_engine+0x180>
   1d254:	70 e3       	ldi	r23, 0x30	; 48
   1d256:	7c 93       	st	X, r23
   1d258:	20 13       	cpse	r18, r16
   1d25a:	b8 f7       	brcc	.-18     	; 0x1d24a <__ftoa_engine+0x174>
   1d25c:	7e 91       	ld	r23, -X
   1d25e:	70 61       	ori	r23, 0x10	; 16
   1d260:	7d 93       	st	X+, r23
   1d262:	30 f0       	brcs	.+12     	; 0x1d270 <__ftoa_engine+0x19a>
   1d264:	83 95       	inc	r24
   1d266:	71 e3       	ldi	r23, 0x31	; 49
   1d268:	7d 93       	st	X+, r23
   1d26a:	70 e3       	ldi	r23, 0x30	; 48
   1d26c:	2a 95       	dec	r18
   1d26e:	e1 f7       	brne	.-8      	; 0x1d268 <__ftoa_engine+0x192>
   1d270:	11 24       	eor	r1, r1
   1d272:	ef 90       	pop	r14
   1d274:	ff 90       	pop	r15
   1d276:	0f 91       	pop	r16
   1d278:	1f 91       	pop	r17
   1d27a:	cf 91       	pop	r28
   1d27c:	df 91       	pop	r29
   1d27e:	99 27       	eor	r25, r25
   1d280:	87 fd       	sbrc	r24, 7
   1d282:	90 95       	com	r25
   1d284:	08 95       	ret

0001d286 <__ctype_isfalse>:
__ctype_isfalse():
   1d286:	99 27       	eor	r25, r25
   1d288:	88 27       	eor	r24, r24

0001d28a <__ctype_istrue>:
__ctype_istrue():
   1d28a:	08 95       	ret

0001d28c <strncasecmp_P>:
strncasecmp_P():
   1d28c:	fb 01       	movw	r30, r22
   1d28e:	dc 01       	movw	r26, r24
   1d290:	41 50       	subi	r20, 0x01	; 1
   1d292:	50 40       	sbci	r21, 0x00	; 0
   1d294:	88 f0       	brcs	.+34     	; 0x1d2b8 <strncasecmp_P+0x2c>
   1d296:	8d 91       	ld	r24, X+
   1d298:	81 34       	cpi	r24, 0x41	; 65
   1d29a:	1c f0       	brlt	.+6      	; 0x1d2a2 <strncasecmp_P+0x16>
   1d29c:	8b 35       	cpi	r24, 0x5B	; 91
   1d29e:	0c f4       	brge	.+2      	; 0x1d2a2 <strncasecmp_P+0x16>
   1d2a0:	80 5e       	subi	r24, 0xE0	; 224
   1d2a2:	65 91       	lpm	r22, Z+
   1d2a4:	61 34       	cpi	r22, 0x41	; 65
   1d2a6:	1c f0       	brlt	.+6      	; 0x1d2ae <strncasecmp_P+0x22>
   1d2a8:	6b 35       	cpi	r22, 0x5B	; 91
   1d2aa:	0c f4       	brge	.+2      	; 0x1d2ae <strncasecmp_P+0x22>
   1d2ac:	60 5e       	subi	r22, 0xE0	; 224
   1d2ae:	86 1b       	sub	r24, r22
   1d2b0:	61 11       	cpse	r22, r1
   1d2b2:	71 f3       	breq	.-36     	; 0x1d290 <strncasecmp_P+0x4>
   1d2b4:	99 0b       	sbc	r25, r25
   1d2b6:	08 95       	ret
   1d2b8:	88 1b       	sub	r24, r24
   1d2ba:	fc cf       	rjmp	.-8      	; 0x1d2b4 <strncasecmp_P+0x28>

0001d2bc <strnlen_P>:
strnlen_P():
   1d2bc:	fc 01       	movw	r30, r24
   1d2be:	05 90       	lpm	r0, Z+
   1d2c0:	61 50       	subi	r22, 0x01	; 1
   1d2c2:	70 40       	sbci	r23, 0x00	; 0
   1d2c4:	01 10       	cpse	r0, r1
   1d2c6:	d8 f7       	brcc	.-10     	; 0x1d2be <strnlen_P+0x2>
   1d2c8:	80 95       	com	r24
   1d2ca:	90 95       	com	r25
   1d2cc:	8e 0f       	add	r24, r30
   1d2ce:	9f 1f       	adc	r25, r31
   1d2d0:	08 95       	ret

0001d2d2 <memset>:
memset():
   1d2d2:	dc 01       	movw	r26, r24
   1d2d4:	01 c0       	rjmp	.+2      	; 0x1d2d8 <memset+0x6>
   1d2d6:	6d 93       	st	X+, r22
   1d2d8:	41 50       	subi	r20, 0x01	; 1
   1d2da:	50 40       	sbci	r21, 0x00	; 0
   1d2dc:	e0 f7       	brcc	.-8      	; 0x1d2d6 <memset+0x4>
   1d2de:	08 95       	ret

0001d2e0 <strnlen>:
strnlen():
   1d2e0:	fc 01       	movw	r30, r24
   1d2e2:	61 50       	subi	r22, 0x01	; 1
   1d2e4:	70 40       	sbci	r23, 0x00	; 0
   1d2e6:	01 90       	ld	r0, Z+
   1d2e8:	01 10       	cpse	r0, r1
   1d2ea:	d8 f7       	brcc	.-10     	; 0x1d2e2 <strnlen+0x2>
   1d2ec:	80 95       	com	r24
   1d2ee:	90 95       	com	r25
   1d2f0:	8e 0f       	add	r24, r30
   1d2f2:	9f 1f       	adc	r25, r31
   1d2f4:	08 95       	ret

0001d2f6 <strrev>:
strrev():
   1d2f6:	dc 01       	movw	r26, r24
   1d2f8:	fc 01       	movw	r30, r24
   1d2fa:	67 2f       	mov	r22, r23
   1d2fc:	71 91       	ld	r23, Z+
   1d2fe:	77 23       	and	r23, r23
   1d300:	e1 f7       	brne	.-8      	; 0x1d2fa <strrev+0x4>
   1d302:	32 97       	sbiw	r30, 0x02	; 2
   1d304:	04 c0       	rjmp	.+8      	; 0x1d30e <strrev+0x18>
   1d306:	7c 91       	ld	r23, X
   1d308:	6d 93       	st	X+, r22
   1d30a:	70 83       	st	Z, r23
   1d30c:	62 91       	ld	r22, -Z
   1d30e:	ae 17       	cp	r26, r30
   1d310:	bf 07       	cpc	r27, r31
   1d312:	c8 f3       	brcs	.-14     	; 0x1d306 <strrev+0x10>
   1d314:	08 95       	ret

0001d316 <fputc>:
fputc():
   1d316:	0f 93       	push	r16
   1d318:	1f 93       	push	r17
   1d31a:	cf 93       	push	r28
   1d31c:	df 93       	push	r29
   1d31e:	18 2f       	mov	r17, r24
   1d320:	09 2f       	mov	r16, r25
   1d322:	eb 01       	movw	r28, r22
   1d324:	8b 81       	ldd	r24, Y+3	; 0x03
   1d326:	81 fd       	sbrc	r24, 1
   1d328:	09 c0       	rjmp	.+18     	; 0x1d33c <fputc+0x26>
   1d32a:	1f ef       	ldi	r17, 0xFF	; 255
   1d32c:	0f ef       	ldi	r16, 0xFF	; 255
   1d32e:	81 2f       	mov	r24, r17
   1d330:	90 2f       	mov	r25, r16
   1d332:	df 91       	pop	r29
   1d334:	cf 91       	pop	r28
   1d336:	1f 91       	pop	r17
   1d338:	0f 91       	pop	r16
   1d33a:	08 95       	ret
   1d33c:	82 ff       	sbrs	r24, 2
   1d33e:	14 c0       	rjmp	.+40     	; 0x1d368 <fputc+0x52>
   1d340:	2e 81       	ldd	r18, Y+6	; 0x06
   1d342:	3f 81       	ldd	r19, Y+7	; 0x07
   1d344:	8c 81       	ldd	r24, Y+4	; 0x04
   1d346:	9d 81       	ldd	r25, Y+5	; 0x05
   1d348:	28 17       	cp	r18, r24
   1d34a:	39 07       	cpc	r19, r25
   1d34c:	3c f4       	brge	.+14     	; 0x1d35c <fputc+0x46>
   1d34e:	e8 81       	ld	r30, Y
   1d350:	f9 81       	ldd	r31, Y+1	; 0x01
   1d352:	cf 01       	movw	r24, r30
   1d354:	01 96       	adiw	r24, 0x01	; 1
   1d356:	99 83       	std	Y+1, r25	; 0x01
   1d358:	88 83       	st	Y, r24
   1d35a:	10 83       	st	Z, r17
   1d35c:	8e 81       	ldd	r24, Y+6	; 0x06
   1d35e:	9f 81       	ldd	r25, Y+7	; 0x07
   1d360:	01 96       	adiw	r24, 0x01	; 1
   1d362:	9f 83       	std	Y+7, r25	; 0x07
   1d364:	8e 83       	std	Y+6, r24	; 0x06
   1d366:	e3 cf       	rjmp	.-58     	; 0x1d32e <fputc+0x18>
   1d368:	e8 85       	ldd	r30, Y+8	; 0x08
   1d36a:	f9 85       	ldd	r31, Y+9	; 0x09
   1d36c:	81 2f       	mov	r24, r17
   1d36e:	19 95       	eicall
   1d370:	89 2b       	or	r24, r25
   1d372:	a1 f3       	breq	.-24     	; 0x1d35c <fputc+0x46>
   1d374:	da cf       	rjmp	.-76     	; 0x1d32a <fputc+0x14>

0001d376 <__ultoa_invert>:
__ultoa_invert():
   1d376:	fa 01       	movw	r30, r20
   1d378:	aa 27       	eor	r26, r26
   1d37a:	28 30       	cpi	r18, 0x08	; 8
   1d37c:	51 f1       	breq	.+84     	; 0x1d3d2 <__ultoa_invert+0x5c>
   1d37e:	20 31       	cpi	r18, 0x10	; 16
   1d380:	81 f1       	breq	.+96     	; 0x1d3e2 <__ultoa_invert+0x6c>
   1d382:	e8 94       	clt
   1d384:	6f 93       	push	r22
   1d386:	6e 7f       	andi	r22, 0xFE	; 254
   1d388:	6e 5f       	subi	r22, 0xFE	; 254
   1d38a:	7f 4f       	sbci	r23, 0xFF	; 255
   1d38c:	8f 4f       	sbci	r24, 0xFF	; 255
   1d38e:	9f 4f       	sbci	r25, 0xFF	; 255
   1d390:	af 4f       	sbci	r26, 0xFF	; 255
   1d392:	b1 e0       	ldi	r27, 0x01	; 1
   1d394:	3e d0       	rcall	.+124    	; 0x1d412 <__ultoa_invert+0x9c>
   1d396:	b4 e0       	ldi	r27, 0x04	; 4
   1d398:	3c d0       	rcall	.+120    	; 0x1d412 <__ultoa_invert+0x9c>
   1d39a:	67 0f       	add	r22, r23
   1d39c:	78 1f       	adc	r23, r24
   1d39e:	89 1f       	adc	r24, r25
   1d3a0:	9a 1f       	adc	r25, r26
   1d3a2:	a1 1d       	adc	r26, r1
   1d3a4:	68 0f       	add	r22, r24
   1d3a6:	79 1f       	adc	r23, r25
   1d3a8:	8a 1f       	adc	r24, r26
   1d3aa:	91 1d       	adc	r25, r1
   1d3ac:	a1 1d       	adc	r26, r1
   1d3ae:	6a 0f       	add	r22, r26
   1d3b0:	71 1d       	adc	r23, r1
   1d3b2:	81 1d       	adc	r24, r1
   1d3b4:	91 1d       	adc	r25, r1
   1d3b6:	a1 1d       	adc	r26, r1
   1d3b8:	20 d0       	rcall	.+64     	; 0x1d3fa <__ultoa_invert+0x84>
   1d3ba:	09 f4       	brne	.+2      	; 0x1d3be <__ultoa_invert+0x48>
   1d3bc:	68 94       	set
   1d3be:	3f 91       	pop	r19
   1d3c0:	2a e0       	ldi	r18, 0x0A	; 10
   1d3c2:	26 9f       	mul	r18, r22
   1d3c4:	11 24       	eor	r1, r1
   1d3c6:	30 19       	sub	r19, r0
   1d3c8:	30 5d       	subi	r19, 0xD0	; 208
   1d3ca:	31 93       	st	Z+, r19
   1d3cc:	de f6       	brtc	.-74     	; 0x1d384 <__ultoa_invert+0xe>
   1d3ce:	cf 01       	movw	r24, r30
   1d3d0:	08 95       	ret
   1d3d2:	46 2f       	mov	r20, r22
   1d3d4:	47 70       	andi	r20, 0x07	; 7
   1d3d6:	40 5d       	subi	r20, 0xD0	; 208
   1d3d8:	41 93       	st	Z+, r20
   1d3da:	b3 e0       	ldi	r27, 0x03	; 3
   1d3dc:	0f d0       	rcall	.+30     	; 0x1d3fc <__ultoa_invert+0x86>
   1d3de:	c9 f7       	brne	.-14     	; 0x1d3d2 <__ultoa_invert+0x5c>
   1d3e0:	f6 cf       	rjmp	.-20     	; 0x1d3ce <__ultoa_invert+0x58>
   1d3e2:	46 2f       	mov	r20, r22
   1d3e4:	4f 70       	andi	r20, 0x0F	; 15
   1d3e6:	40 5d       	subi	r20, 0xD0	; 208
   1d3e8:	4a 33       	cpi	r20, 0x3A	; 58
   1d3ea:	18 f0       	brcs	.+6      	; 0x1d3f2 <__ultoa_invert+0x7c>
   1d3ec:	49 5d       	subi	r20, 0xD9	; 217
   1d3ee:	31 fd       	sbrc	r19, 1
   1d3f0:	40 52       	subi	r20, 0x20	; 32
   1d3f2:	41 93       	st	Z+, r20
   1d3f4:	02 d0       	rcall	.+4      	; 0x1d3fa <__ultoa_invert+0x84>
   1d3f6:	a9 f7       	brne	.-22     	; 0x1d3e2 <__ultoa_invert+0x6c>
   1d3f8:	ea cf       	rjmp	.-44     	; 0x1d3ce <__ultoa_invert+0x58>
   1d3fa:	b4 e0       	ldi	r27, 0x04	; 4
   1d3fc:	a6 95       	lsr	r26
   1d3fe:	97 95       	ror	r25
   1d400:	87 95       	ror	r24
   1d402:	77 95       	ror	r23
   1d404:	67 95       	ror	r22
   1d406:	ba 95       	dec	r27
   1d408:	c9 f7       	brne	.-14     	; 0x1d3fc <__ultoa_invert+0x86>
   1d40a:	00 97       	sbiw	r24, 0x00	; 0
   1d40c:	61 05       	cpc	r22, r1
   1d40e:	71 05       	cpc	r23, r1
   1d410:	08 95       	ret
   1d412:	9b 01       	movw	r18, r22
   1d414:	ac 01       	movw	r20, r24
   1d416:	0a 2e       	mov	r0, r26
   1d418:	06 94       	lsr	r0
   1d41a:	57 95       	ror	r21
   1d41c:	47 95       	ror	r20
   1d41e:	37 95       	ror	r19
   1d420:	27 95       	ror	r18
   1d422:	ba 95       	dec	r27
   1d424:	c9 f7       	brne	.-14     	; 0x1d418 <__ultoa_invert+0xa2>
   1d426:	62 0f       	add	r22, r18
   1d428:	73 1f       	adc	r23, r19
   1d42a:	84 1f       	adc	r24, r20
   1d42c:	95 1f       	adc	r25, r21
   1d42e:	a0 1d       	adc	r26, r0
   1d430:	08 95       	ret

0001d432 <eeprom_read_byte>:
eeprom_read_byte():
   1d432:	f9 99       	sbic	0x1f, 1	; 31
   1d434:	fe cf       	rjmp	.-4      	; 0x1d432 <eeprom_read_byte>
   1d436:	92 bd       	out	0x22, r25	; 34
   1d438:	81 bd       	out	0x21, r24	; 33
   1d43a:	f8 9a       	sbi	0x1f, 0	; 31
   1d43c:	99 27       	eor	r25, r25
   1d43e:	80 b5       	in	r24, 0x20	; 32
   1d440:	08 95       	ret

0001d442 <eeprom_write_byte>:
eeprom_write_byte():
   1d442:	26 2f       	mov	r18, r22

0001d444 <eeprom_write_r18>:
   1d444:	f9 99       	sbic	0x1f, 1	; 31
   1d446:	fe cf       	rjmp	.-4      	; 0x1d444 <eeprom_write_r18>
   1d448:	1f ba       	out	0x1f, r1	; 31
   1d44a:	92 bd       	out	0x22, r25	; 34
   1d44c:	81 bd       	out	0x21, r24	; 33
   1d44e:	20 bd       	out	0x20, r18	; 32
   1d450:	0f b6       	in	r0, 0x3f	; 63
   1d452:	f8 94       	cli
   1d454:	fa 9a       	sbi	0x1f, 2	; 31
   1d456:	f9 9a       	sbi	0x1f, 1	; 31
   1d458:	0f be       	out	0x3f, r0	; 63
   1d45a:	01 96       	adiw	r24, 0x01	; 1
   1d45c:	08 95       	ret

0001d45e <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   1d45e:	f8 94       	cli

0001d460 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   1d460:	ff cf       	rjmp	.-2      	; 0x1d460 <__stop_program>
