
/tmp/arduino_build_41303/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 04 32 	jmp	0x6408	; 0x6408 <__ctors_end>
       4:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
       8:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
       c:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      10:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      14:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      18:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      1c:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      20:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      24:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      28:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      2c:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      30:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      34:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      38:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      3c:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      40:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      44:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      48:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      4c:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      50:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      54:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      58:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      5c:	0c 94 dc d0 	jmp	0x1a1b8	; 0x1a1b8 <__vector_23>
      60:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      64:	0c 94 bb d3 	jmp	0x1a776	; 0x1a776 <__vector_25>
      68:	0c 94 f1 d3 	jmp	0x1a7e2	; 0x1a7e2 <__vector_26>
      6c:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      70:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      74:	0c 94 9c d0 	jmp	0x1a138	; 0x1a138 <__vector_29>
      78:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      7c:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      80:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      84:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      88:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      8c:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      90:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      94:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      98:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      9c:	0c 94 e6 ca 	jmp	0x195cc	; 0x195cc <__vector_39>
      a0:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      a4:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      a8:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      ac:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      b0:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      b4:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      b8:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      bc:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      c0:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      c4:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>
      c8:	0c 94 35 32 	jmp	0x646a	; 0x646a <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 f1 b1 	jmp	0x163e2	; 0x163e2 <UDP::beginMulticast(IPAddress, unsigned int)>
      d0:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
      d4:	0c 94 0a b2 	jmp	0x16414	; 0x16414 <EthernetUDP::remotePort()>
      d8:	0c 94 e7 3b 	jmp	0x77ce	; 0x77ce <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>
      dc:	0c 94 af 70 	jmp	0xe15e	; 0xe15e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
      e0:	0c 94 d4 b3 	jmp	0x167a8	; 0x167a8 <_GLOBAL__sub_I__ZN7TwitterC2EPKc>
      e4:	0c 94 1c 81 	jmp	0x10238	; 0x10238 <serial_putc(char, __file*)>
      e8:	0c 94 ff d1 	jmp	0x1a3fe	; 0x1a3fe <turnOffPWM+0x3c>
      ec:	0c 94 6b 43 	jmp	0x86d6	; 0x86d6 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>
      f0:	0c 94 00 ab 	jmp	0x15600	; 0x15600 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xba>
      f4:	0c 94 6c 47 	jmp	0x8ed8	; 0x8ed8 <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>
      f8:	0c 94 0e b2 	jmp	0x1641c	; 0x1641c <EthernetUDP::available()>
      fc:	0c 94 39 ab 	jmp	0x15672	; 0x15672 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x12c>
     100:	0c 94 05 d2 	jmp	0x1a40a	; 0x1a40a <turnOffPWM+0x48>
     104:	0c 94 85 c8 	jmp	0x1910a	; 0x1910a <TwoWire::read()>
     108:	0c 94 7f 33 	jmp	0x66fe	; 0x66fe <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>
     10c:	0c 94 d7 34 	jmp	0x69ae	; 0x69ae <helper_thermostat_set_mezni(unsigned int, float, unsigned char)>
     110:	0c 94 62 45 	jmp	0x8ac4	; 0x8ac4 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     114:	0c 94 a7 c8 	jmp	0x1914e	; 0x1914e <TwoWire::flush()>
     118:	0c 94 1b d4 	jmp	0x1a836	; 0x1a836 <Serial0_available()>
     11c:	0c 94 de c8 	jmp	0x191bc	; 0x191bc <TwoWire::write(unsigned char)>
     120:	0c 94 df aa 	jmp	0x155be	; 0x155be <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x78>
     124:	0c 94 28 b2 	jmp	0x16450	; 0x16450 <EthernetUDP::flush()>
     128:	0c 94 45 3c 	jmp	0x788a	; 0x788a <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>
     12c:	0c 94 1f 3e 	jmp	0x7c3e	; 0x7c3e <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     130:	0c 94 ea 36 	jmp	0x6dd4	; 0x6dd4 <menu_tds_save_period(unsigned int, float, unsigned char)>
     134:	0c 94 21 b3 	jmp	0x16642	; 0x16642 <EthernetUDP::begin(unsigned int)>
     138:	0c 94 a1 37 	jmp	0x6f42	; 0x6f42 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>
     13c:	0c 94 4b 97 	jmp	0x12e96	; 0x12e96 <LCDWIKI_KBV::Get_Height() const>
     140:	0c 94 34 4e 	jmp	0x9c68	; 0x9c68 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>
     144:	0c 94 f6 af 	jmp	0x15fec	; 0x15fec <EthernetClient::operator!=(EthernetClient const&)>
     148:	0c 94 cb 33 	jmp	0x6796	; 0x6796 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>
     14c:	0c 94 d4 42 	jmp	0x85a8	; 0x85a8 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     150:	0c 94 ef 95 	jmp	0x12bde	; 0x12bde <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     154:	0c 94 0d 88 	jmp	0x1101a	; 0x1101a <_GLOBAL__sub_I_mqtt_error>
     158:	0c 94 3f 43 	jmp	0x867e	; 0x867e <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     15c:	0c 94 3e 38 	jmp	0x707c	; 0x707c <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)>
     160:	0c 94 f2 aa 	jmp	0x155e4	; 0x155e4 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x9e>
     164:	0c 94 46 39 	jmp	0x728c	; 0x728c <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>
     168:	0c 94 9c 9f 	jmp	0x13f38	; 0x13f38 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     16c:	0c 94 f3 b1 	jmp	0x163e6	; 0x163e6 <EthernetUDP::read(char*, unsigned int)>
     170:	0c 94 c2 3b 	jmp	0x7784	; 0x7784 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>
     174:	0c 94 57 b2 	jmp	0x164ae	; 0x164ae <EthernetUDP::endPacket()>
     178:	0c 94 87 b0 	jmp	0x1610e	; 0x1610e <EthernetClient::write(unsigned char const*, unsigned int)>
     17c:	0c 94 9e 3c 	jmp	0x793c	; 0x793c <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>
     180:	0c 94 16 34 	jmp	0x682c	; 0x682c <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     184:	0c 94 f8 35 	jmp	0x6bf0	; 0x6bf0 <button_click_ring_term_set_pid_default(unsigned int, unsigned int, unsigned char)>
     188:	0c 94 57 39 	jmp	0x72ae	; 0x72ae <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     18c:	0c 94 e6 b1 	jmp	0x163cc	; 0x163cc <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>
     190:	0c 94 d1 38 	jmp	0x71a2	; 0x71a2 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     194:	0c 94 09 37 	jmp	0x6e12	; 0x6e12 <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)>
     198:	0c 94 1c 37 	jmp	0x6e38	; 0x6e38 <button_click_set_show_default_ring_input(unsigned int, unsigned int, unsigned char)>
     19c:	0c 94 41 d2 	jmp	0x1a482	; 0x1a482 <turnOffPWM+0xc0>
     1a0:	0c 94 74 3e 	jmp	0x7ce8	; 0x7ce8 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     1a4:	0c 94 fd 36 	jmp	0x6dfa	; 0x6dfa <helper_tds_associate(unsigned int, unsigned int, unsigned char)>
     1a8:	0c 94 99 b2 	jmp	0x16532	; 0x16532 <EthernetUDP::read(unsigned char*, unsigned int)>
     1ac:	0c 94 c8 b0 	jmp	0x16190	; 0x16190 <EthernetClient::read(unsigned char*, unsigned int)>
     1b0:	0c 94 32 34 	jmp	0x6864	; 0x6864 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>
     1b4:	0c 94 09 d3 	jmp	0x1a612	; 0x1a612 <HardwareSerial::availableForWrite()>
     1b8:	0c 94 c9 b3 	jmp	0x16792	; 0x16792 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>
     1bc:	0c 94 a8 c8 	jmp	0x19150	; 0x19150 <TwoWire::onReceiveService(unsigned char*, int)>
     1c0:	0c 94 ff 36 	jmp	0x6dfe	; 0x6dfe <button_click_set_show_default_ring_program(unsigned int, unsigned int, unsigned char)>
     1c4:	0c 94 45 d2 	jmp	0x1a48a	; 0x1a48a <turnOffPWM+0xc8>
     1c8:	0c 94 86 43 	jmp	0x870c	; 0x870c <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
     1cc:	0c 94 13 b1 	jmp	0x16226	; 0x16226 <EthernetClient::connect(IPAddress, unsigned int)>
     1d0:	0c 94 eb 34 	jmp	0x69d6	; 0x69d6 <helper_thermostat_set_pid_d(unsigned int, float, unsigned char)>
     1d4:	0c 94 2f d2 	jmp	0x1a45e	; 0x1a45e <turnOffPWM+0x9c>
     1d8:	0c 94 7e 3d 	jmp	0x7afc	; 0x7afc <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)>
     1dc:	0c 94 1a ab 	jmp	0x15634	; 0x15634 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xee>
     1e0:	0c 94 3a b2 	jmp	0x16474	; 0x16474 <EthernetUDP::stop()>
     1e4:	0c 94 8c 3c 	jmp	0x7918	; 0x7918 <button_click_term_set_mode_via_dialog(unsigned int, unsigned int, unsigned char)>
     1e8:	0c 94 78 b1 	jmp	0x162f0	; 0x162f0 <EthernetClient::stop()>
     1ec:	0c 94 ed 34 	jmp	0x69da	; 0x69da <helper_thermostat_set_pid_time(unsigned int, float, unsigned char)>
     1f0:	0c 94 39 95 	jmp	0x12a72	; 0x12a72 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     1f4:	0c 94 39 d2 	jmp	0x1a472	; 0x1a472 <turnOffPWM+0xb0>
     1f8:	0c 94 1b 39 	jmp	0x7236	; 0x7236 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     1fc:	0c 94 fa b1 	jmp	0x163f4	; 0x163f4 <EthernetUDP::remoteIP()>
     200:	0c 94 c9 3b 	jmp	0x7792	; 0x7792 <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>
     204:	0c 94 35 39 	jmp	0x726a	; 0x726a <button_get_show_default_ring_program_active(unsigned int, unsigned int, unsigned char)>
     208:	0c 94 06 ab 	jmp	0x1560c	; 0x1560c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xc6>
     20c:	0c 94 a1 39 	jmp	0x7342	; 0x7342 <nullfce(unsigned int, unsigned int, unsigned char)>
     210:	0c 94 d7 c9 	jmp	0x193ae	; 0x193ae <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>
     214:	0c 94 f5 d2 	jmp	0x1a5ea	; 0x1a5ea <HardwareSerial::read()>
     218:	0c 94 3d d2 	jmp	0x1a47a	; 0x1a47a <turnOffPWM+0xb8>
     21c:	0c 94 39 d0 	jmp	0x1a072	; 0x1a072 <_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP>
     220:	0c 94 ab 38 	jmp	0x7156	; 0x7156 <button_get_show_default_ring_program(unsigned char, unsigned char, unsigned char, char*, char*)>
     224:	0c 94 b8 b2 	jmp	0x16570	; 0x16570 <EthernetUDP::peek()>
     228:	0c 94 cc b0 	jmp	0x16198	; 0x16198 <EthernetClient::peek()>
     22c:	0c 94 00 b0 	jmp	0x16000	; 0x16000 <EthernetClient::write(unsigned char)>
     230:	0c 94 d4 33 	jmp	0x67a8	; 0x67a8 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>
     234:	0c 94 38 34 	jmp	0x6870	; 0x6870 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     238:	0c 94 7c 44 	jmp	0x88f8	; 0x88f8 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>
     23c:	0c 94 5b b2 	jmp	0x164b6	; 0x164b6 <EthernetUDP::write(unsigned char const*, unsigned int)>
     240:	0c 94 a3 b0 	jmp	0x16146	; 0x16146 <EthernetClient::available()>
     244:	0c 94 c4 3c 	jmp	0x7988	; 0x7988 <click_thermostat_set_ring_via_dialog(unsigned int, unsigned int, unsigned char)>
     248:	0c 94 18 34 	jmp	0x6830	; 0x6830 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     24c:	0c 94 47 97 	jmp	0x12e8e	; 0x12e8e <LCDWIKI_KBV::Get_Width() const>
     250:	0c 94 6b b3 	jmp	0x166d6	; 0x166d6 <EthernetUDP::beginPacket(char const*, unsigned int)>
     254:	0c 94 32 3d 	jmp	0x7a64	; 0x7a64 <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)>
     258:	0c 94 25 d2 	jmp	0x1a44a	; 0x1a44a <turnOffPWM+0x88>
     25c:	0c 94 de af 	jmp	0x15fbc	; 0x15fbc <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>
     260:	0c 94 e7 d2 	jmp	0x1a5ce	; 0x1a5ce <HardwareSerial::peek()>
     264:	0c 94 e9 34 	jmp	0x69d2	; 0x69d2 <helper_thermostat_set_pid_i(unsigned int, float, unsigned char)>
     268:	0c 94 09 d2 	jmp	0x1a412	; 0x1a412 <turnOffPWM+0x50>
     26c:	0c 94 0d d2 	jmp	0x1a41a	; 0x1a41a <turnOffPWM+0x58>
     270:	0c 94 1e b0 	jmp	0x1603c	; 0x1603c <EthernetClient::operator==(EthernetClient const&)>
     274:	0c 94 fb 33 	jmp	0x67f6	; 0x67f6 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>
     278:	0c 94 b6 33 	jmp	0x676c	; 0x676c <click_keyboard_type(unsigned int, unsigned int, unsigned char)>
     27c:	0c 94 0c ab 	jmp	0x15618	; 0x15618 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xd2>
     280:	0c 94 16 b0 	jmp	0x1602c	; 0x1602c <EthernetClient::operator bool()>
     284:	0c 94 d5 33 	jmp	0x67aa	; 0x67aa <a2d_complete(unsigned char, unsigned int)>
     288:	0c 94 67 33 	jmp	0x66ce	; 0x66ce <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     28c:	0c 94 74 d3 	jmp	0x1a6e8	; 0x1a6e8 <HardwareSerial::write(unsigned char)>
     290:	0c 94 bb ac 	jmp	0x15976	; 0x15976 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>
     294:	0c 94 26 37 	jmp	0x6e4c	; 0x6e4c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     298:	0c 94 ad 37 	jmp	0x6f5a	; 0x6f5a <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>
     29c:	0c 94 63 76 	jmp	0xecc6	; 0xecc6 <mqtt_callback(char*, unsigned char*, unsigned int)>
     2a0:	0c 94 5f 3d 	jmp	0x7abe	; 0x7abe <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>
     2a4:	0c 94 72 38 	jmp	0x70e4	; 0x70e4 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>
     2a8:	0c 94 b8 b1 	jmp	0x16370	; 0x16370 <EthernetClient::connected()>
     2ac:	0c 94 f0 34 	jmp	0x69e0	; 0x69e0 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>
     2b0:	0c 94 fc 40 	jmp	0x81f8	; 0x81f8 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     2b4:	0c 94 7e c8 	jmp	0x190fc	; 0x190fc <TwoWire::available()>
     2b8:	0c 94 f7 3e 	jmp	0x7dee	; 0x7dee <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     2bc:	0c 94 44 d2 	jmp	0x1a488	; 0x1a488 <turnOffPWM+0xc6>
     2c0:	0c 94 4d 47 	jmp	0x8e9a	; 0x8e9a <button_click_deactivate_term_ring(unsigned int, unsigned int, unsigned char)>
     2c4:	0c 94 09 39 	jmp	0x7212	; 0x7212 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>
     2c8:	0c 94 21 d2 	jmp	0x1a442	; 0x1a442 <turnOffPWM+0x80>
     2cc:	0c 94 34 45 	jmp	0x8a68	; 0x8a68 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>
     2d0:	0c 94 17 40 	jmp	0x802e	; 0x802e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     2d4:	0c 94 97 c2 	jmp	0x1852e	; 0x1852e <_GLOBAL__sub_I__ZN12PubSubClientC2Ev>
     2d8:	0c 94 18 d3 	jmp	0x1a630	; 0x1a630 <serialEventRun()>
     2dc:	0c 94 7b 99 	jmp	0x132f6	; 0x132f6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     2e0:	0c 94 96 3b 	jmp	0x772c	; 0x772c <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>
     2e4:	0c 94 7b 33 	jmp	0x66f6	; 0x66f6 <returnnullfceargs(unsigned int, unsigned int, unsigned char)>
     2e8:	0c 94 c0 36 	jmp	0x6d80	; 0x6d80 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>
     2ec:	0c 94 8f 33 	jmp	0x671e	; 0x671e <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     2f0:	0c 94 6d 80 	jmp	0x100da	; 0x100da <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>
     2f4:	0c 94 25 d4 	jmp	0x1a84a	; 0x1a84a <_GLOBAL__sub_I___vector_25>
     2f8:	0c 94 1e 88 	jmp	0x1103c	; 0x1103c <_GLOBAL__sub_I_scan_rf_net_enable>
     2fc:	0c 94 8e 38 	jmp	0x711c	; 0x711c <button_get_show_default_ring_input_active(unsigned int, unsigned int, unsigned char)>
     300:	0c 94 f3 af 	jmp	0x15fe6	; 0x15fe6 <Print::availableForWrite()>
     304:	0c 94 c2 33 	jmp	0x6784	; 0x6784 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>
     308:	0c 94 bf d4 	jmp	0x1a97e	; 0x1a97e <Print::write(unsigned char const*, unsigned int)>
     30c:	0c 94 13 d2 	jmp	0x1a426	; 0x1a426 <turnOffPWM+0x64>
     310:	0c 94 2b d2 	jmp	0x1a456	; 0x1a456 <turnOffPWM+0x94>
     314:	0c 94 17 d2 	jmp	0x1a42e	; 0x1a42e <turnOffPWM+0x6c>
     318:	0c 94 e5 aa 	jmp	0x155ca	; 0x155ca <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x84>
     31c:	0c 94 52 d4 	jmp	0x1a8a4	; 0x1a8a4 <IPAddress::printTo(Print&) const>
     320:	0c 94 54 d3 	jmp	0x1a6a8	; 0x1a6a8 <HardwareSerial::flush()>
     324:	0c 94 e7 34 	jmp	0x69ce	; 0x69ce <helper_thermostat_set_pid_p(unsigned int, float, unsigned char)>
     328:	0c 94 db b1 	jmp	0x163b6	; 0x163b6 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>
     32c:	0c 94 2e 35 	jmp	0x6a5c	; 0x6a5c <preload_pid_menu(unsigned int, unsigned int, unsigned char)>
     330:	0c 94 0a 3d 	jmp	0x7a14	; 0x7a14 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>
     334:	0c 94 8f 41 	jmp	0x831e	; 0x831e <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     338:	0c 94 66 ac 	jmp	0x158cc	; 0x158cc <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>
     33c:	0c 94 81 33 	jmp	0x6702	; 0x6702 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     340:	0c 94 d6 44 	jmp	0x89ac	; 0x89ac <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>
     344:	0c 94 1d 42 	jmp	0x843a	; 0x843a <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     348:	0c 94 ae 3d 	jmp	0x7b5c	; 0x7b5c <click_keyboard_number(unsigned int, unsigned int, unsigned char)>
     34c:	0c 94 f5 4f 	jmp	0x9fea	; 0x9fea <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     350:	0c 94 4f b2 	jmp	0x1649e	; 0x1649e <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     354:	0c 94 29 b0 	jmp	0x16052	; 0x16052 <EthernetClient::connect(char const*, unsigned int)>
     358:	0c 94 96 3c 	jmp	0x792c	; 0x792c <button_click_nastaveni_ring_screen(unsigned int, unsigned int, unsigned char)>
     35c:	0c 94 0b 34 	jmp	0x6816	; 0x6816 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>
     360:	0c 94 6f b2 	jmp	0x164de	; 0x164de <EthernetUDP::read()>
     364:	0c 94 ae b0 	jmp	0x1615c	; 0x1615c <EthernetClient::read()>
     368:	0c 94 25 34 	jmp	0x684a	; 0x684a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
     36c:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>
     370:	0c 94 04 37 	jmp	0x6e08	; 0x6e08 <button_click_deassociate_default_ring_program_for_term(unsigned int, unsigned int, unsigned char)>
     374:	0c 94 26 ab 	jmp	0x1564c	; 0x1564c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x106>
     378:	0c 94 9a 38 	jmp	0x7134	; 0x7134 <button_get_show_default_ring_program_max_items(unsigned int, unsigned int, unsigned char)>
     37c:	0c 94 18 b8 	jmp	0x17030	; 0x17030 <_GLOBAL__sub_I_w5500>
     380:	0c 94 20 ab 	jmp	0x15640	; 0x15640 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xfa>
     384:	0c 94 58 47 	jmp	0x8eb0	; 0x8eb0 <term_ring_do_activate(unsigned int, unsigned int, unsigned char)>
     388:	0c 94 b5 3d 	jmp	0x7b6a	; 0x7b6a <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>
     38c:	0c 94 b4 36 	jmp	0x6d68	; 0x6d68 <get_function_budik_text_state(unsigned char, unsigned char, unsigned char, char*, char*)>
     390:	0c 94 a4 92 	jmp	0x12548	; 0x12548 <_GLOBAL__sub_I_PID_Input>
     394:	0c 94 12 b2 	jmp	0x16424	; 0x16424 <EthernetUDP::write(unsigned char)>
     398:	0c 94 07 3c 	jmp	0x780e	; 0x780e <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>
     39c:	0c 94 7d 33 	jmp	0x66fa	; 0x66fa <display_enable_show(unsigned int, unsigned int, unsigned char)>
     3a0:	0c 94 c0 aa 	jmp	0x15580	; 0x15580 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x3a>
     3a4:	0c 94 ef b0 	jmp	0x161de	; 0x161de <EthernetClient::flush()>
     3a8:	0c 94 49 34 	jmp	0x6892	; 0x6892 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     3ac:	0c 94 21 37 	jmp	0x6e42	; 0x6e42 <button_click_deassociate_default_ring_input_sensor_for_term(unsigned int, unsigned int, unsigned char)>
     3b0:	0c 94 0d c9 	jmp	0x1921a	; 0x1921a <TwoWire::write(unsigned char const*, unsigned int)>
     3b4:	0c 94 01 96 	jmp	0x12c02	; 0x12c02 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     3b8:	0c 94 1d d2 	jmp	0x1a43a	; 0x1a43a <turnOffPWM+0x78>
     3bc:	0c 94 98 c8 	jmp	0x19130	; 0x19130 <TwoWire::peek()>
     3c0:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>
     3c4:	0c 94 d2 c8 	jmp	0x191a4	; 0x191a4 <TwoWire::onRequestService()>
     3c8:	0c 94 b9 33 	jmp	0x6772	; 0x6772 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>
     3cc:	0c 94 9f 39 	jmp	0x733e	; 0x733e <get_function_budik_enabled(unsigned int, unsigned int, unsigned char)>
     3d0:	0c 94 68 36 	jmp	0x6cd0	; 0x6cd0 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>
     3d4:	0c 94 d1 36 	jmp	0x6da2	; 0x6da2 <menu_tds_save_offset(unsigned int, float, unsigned char)>
     3d8:	0c 94 34 ab 	jmp	0x15668	; 0x15668 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x122>
     3dc:	0c 94 fc 37 	jmp	0x6ff8	; 0x6ff8 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     3e0:	0c 94 3a 44 	jmp	0x8874	; 0x8874 <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     3e4:	0c 94 02 46 	jmp	0x8c04	; 0x8c04 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     3e8:	0c 94 e9 d5 	jmp	0x1abd2	; 0x1abd2 <__cxa_pure_virtual>
     3ec:	0c 94 af 33 	jmp	0x675e	; 0x675e <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>
     3f0:	0c 94 4f 97 	jmp	0x12e9e	; 0x12e9e <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     3f4:	0c 94 33 d2 	jmp	0x1a466	; 0x1a466 <turnOffPWM+0xa4>
     3f8:	0c 94 d0 b2 	jmp	0x165a0	; 0x165a0 <EthernetUDP::parsePacket()>
     3fc:	0c 94 aa 87 	jmp	0x10f54	; 0x10f54 <printf_via_mqtt(char, __file*)>
     400:	0c 94 a0 3b 	jmp	0x7740	; 0x7740 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>
     404:	0c 94 8c 3e 	jmp	0x7d18	; 0x7d18 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     408:	0c 94 db d2 	jmp	0x1a5b6	; 0x1a5b6 <HardwareSerial::available()>
     40c:	0c 94 84 38 	jmp	0x7108	; 0x7108 <display_enable_show_term_mode_prog(unsigned int, unsigned int, unsigned char)>

00000410 <__trampolines_end>:
__trampolines_end():
     410:	4e 41       	sbci	r20, 0x1E	; 30
     412:	4e 49       	Address 0x0000000000000412 is out of bounds.
.word	0xffff	; ????

00000413 <pstr_inity>:
     413:	49 4e 49 54 59                                      INITY

00000418 <pstr_inf>:
     418:	49 4e 46                                            INF

0000041b <pwr_m10>:
     41b:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     42b:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000433 <pwr_p10>:
     433:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     443:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     453:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     463:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     473:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     483:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     493:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     4a3:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     4b3:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     4c3:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     4d3:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     4e3:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     4f3:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     503:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     513:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     523:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     533:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     543:	3d 27                                               ='

00000545 <Menu_All>:
     545:	0a 06 06 00 08 5b 7d 59 22 01 96 00 aa 00 28 00     .....[}Y".....(.
     555:	02 05 a0 3b 08 7d 33 87 59 22 01 5a 00 aa 00 28     ...;.}3.Y".Z...(
     565:	00 02 01 a0 3b 08 7d 33 d5 59 22 01 1e 00 aa 00     ....;.}3.Y".....
     575:	28 00 02 02 a0 3b 08 7d 33 00 00 00 00 00 00 00     (....;.}3.......
	...
     5f5:	41 59 0a 00 dc 00 52 00 3c 00 03 9a d6 ff ff 00     AY....R.<.......
     605:	09 39 46 39 0a 7d 33 27 59 64 00 dc 00 52 00 3c     .9F9.}3'Yd...R.<
     615:	00 03 00 f8 ff ff 01 09 39 46 39 0a 7d 33 0d 59     ........9F9.}3.Y
     625:	be 00 dc 00 52 00 3c 00 03 1f 00 ff ff 07 09 39     ....R.<........9
     635:	46 39 0a 7d 33 f1 58 18 01 dc 00 52 00 3c 00 03     F9.}3.X....R.<..
     645:	e0 ff ff ff 02 09 39 46 39 0a 7d 33 d9 58 72 01     ......9F9.}3.Xr.
     655:	dc 00 52 00 3c 00 03 e0 07 ff ff 08 09 39 46 39     ..R.<........9F9
     665:	0a 7d 33 0a 00 82 00 00 af 70 00 00 00 00 0c a1     .}3......p......
     675:	39 7d 33 1c 56 18 01 22 01 00 1d 42 00 00 00 00     9}3.V.."...B....
     685:	0c a1 39 7d 33 1c 56 0a 00 1e 00 00 8f 41 00 00     ..9}3.V......A..
     695:	00 00 09 a1 39 7d 33 1c 56 00 00 00 00 00 00 00     ....9}3.V.......
	...
     805:	00 03 05 03 00 00 00 00 00 00 00 00 00 00 e0 01     ................
     815:	40 01 01 ff ff 08 b9 33 c2 33 cb 33 7b 33 d5 59     @......3.3.3{3.Y
     825:	65 58 0a 00 28 00 be 00 28 00 02 10 a0 3b 08 7d     eX..(...(....;.}
     835:	33 57 58 0a 00 64 00 be 00 28 00 02 00 a1 39 08     3WX..d...(....9.
     845:	7d 33 47 58 0a 00 a0 00 be 00 28 00 02 00 a1 39     }3GX......(....9
     855:	08 7d 33 45 59 0a 00 dc 00 be 00 28 00 02 00 96     .}3EY......(....
     865:	3b 08 7d 33 2a 58 18 01 64 00 be 00 28 00 02 06     ;.}3*X..d...(...
     875:	a0 3b 08 7d 33 39 58 18 01 28 00 be 00 28 00 02     .;.}39X..(...(..
     885:	03 a0 3b 08 7d 33 ed 56 18 01 a0 00 be 00 28 00     ..;.}3.V......(.
     895:	01 08 a0 3b 08 7d 33 83 56 18 01 dc 00 be 00 28     ...;.}3.V......(
     8a5:	00 01 0f a0 3b 08 7d 33 00 00 00 00 00 00 00 00     ....;.}3........
	...
     941:	00 18 01 22 01 00 1d 42 00 00 00 00 0c a1 39 7d     ..."...B......9}
     951:	33 1c 56 00 00 00 00 00 00 00 00 00 00 00 00 00     3.V.............
	...
     add:	00 00 00 08 00 01 00 00 00 00 00 02 00 00 00 00     ................
     aed:	e0 01 40 01 01 ff ff 08 7b 33 7b 33 7b 33 7b 33     ..@.....{3{3{3{3
     afd:	87 59 45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b     .YEY......(....;
     b0d:	08 7d 33 00 00 00 00 00 00 00 00 00 00 00 00 00     .}3.............
	...
     c19:	00 00 00 18 01 22 01 00 1d 42 00 00 00 00 0c a1     ....."...B......
     c29:	39 7d 33 1c 56 00 00 00 00 00 00 00 00 00 00 00     9}3.V...........
	...
     c61:	00 00 00 4a 59 0a 00 28 00 be 00 78 00 02 00 00     ...JY..(...x....
     c71:	00 00 01 a1 39 9f 39 b4 36 08 00 00 00 00 00 00     ....9.9.6.......
	...
     db9:	00 01 00 01 01 00 00 00 00 01 00 00 00 00 e0 01     ................
     dc9:	40 01 01 ff ff 08 7b 33 7b 33 7b 33 7b 33 39 58     @.....{3{3{3{39X
     dd9:	45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b 08 7d     EY......(....;.}
     de9:	33 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     3...............
	...
     ef5:	00 18 01 22 01 00 1d 42 00 00 00 00 0c a1 39 7d     ..."...B......9}
     f05:	33 1c 56 9a 01 48 00 00 49 34 28 00 7e 00 08 a1     3.V..H..I4(.~...
     f15:	39 7d 33 1c 56 dc 00 14 00 00 38 34 f0 00 f0 00     9}3.V.....84....
     f25:	08 a1 39 7d 33 1c 56 00 00 00 00 00 00 00 00 00     ..9}3.V.........
	...
     f81:	00 00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01     ....#...7..<<...
     f91:	00 01 26 37 cb 3c 18 34 08 00 00 00 00 00 00 00     ..&7.<.4........
	...
     fb1:	2b 9a 01 1e 00 28 00 28 00 02 00 0b 34 08 7d 33     +....(.(....4.}3
     fc1:	2d 9a 01 c8 00 28 00 28 00 02 00 fb 33 08 7d 33     -....(.(....3.}3
	...
    1091:	00 00 00 01 00 03 00 01 02 00 00 03 00 00 00 00     ................
    10a1:	e0 01 40 01 01 ff ff 08 7b 33 7b 33 7b 33 7b 33     ..@.....{3{3{3{3
    10b1:	0f 58 45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b     .XEY......(....;
    10c1:	08 7d 33 87 57 18 01 be 00 be 00 28 00 02 00 bd     .}3.W......(....
    10d1:	3b 08 7d 33 5a 57 18 01 8c 00 be 00 28 00 02 00     ;.}3ZW......(...
    10e1:	07 3c 08 7d 33 4b 57 18 01 5a 00 be 00 28 00 02     .<.}3KW..Z...(..
    10f1:	00 0a 3d 08 7d 33 3b 57 18 01 28 00 be 00 28 00     ..=.}3;W..(...(.
    1101:	02 00 45 3c 08 7d 33 00 00 00 00 00 00 00 00 00     ..E<.}3.........
	...
    11cd:	00 00 00 18 01 22 01 00 1d 42 00 00 00 00 0c a1     ....."...B......
    11dd:	39 7d 33 1c 56 14 00 14 00 00 f7 3e 00 00 00 00     9}3.V......>....
    11ed:	08 a1 39 7d 33 1c 56 14 00 14 00 00 8c 3e 00 00     ..9}3.V......>..
    11fd:	00 00 0c a1 39 7d 33 1c 56 00 00 00 00 00 00 00     ....9}3.V.......
	...
    136d:	00 05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01     ................
    137d:	40 01 01 ff ff 08 7b 33 7b 33 7b 33 7b 33 62 56     @.....{3{3{3{3bV
    138d:	42 56 0a 00 c8 00 82 00 28 00 02 00 c9 3b 08 7d     BV......(....;.}
    139d:	33 49 56 96 00 c8 00 82 00 28 00 02 00 96 3b 08     3IV......(....;.
    13ad:	7d 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00     }3..............
	...
    14a9:	00 64 00 2d 00 00 17 40 b4 00 28 00 08 a1 39 7d     .d.-...@..(...9}
    14b9:	33 1c 56 00 00 00 00 00 00 00 00 00 00 00 00 00     3.V.............
	...
    1565:	2b 3c 00 2d 00 28 00 28 00 02 00 68 36 08 7d 33     +<.-.(.(...h6.}3
    1575:	2d 18 01 2d 00 28 00 28 00 02 00 1c 36 08 7d 33     -..-.(.(....6.}3
	...
    1645:	00 00 00 02 00 01 00 00 02 00 00 66 0a 00 0a 00     ...........f....
    1655:	cc 01 04 01 06 e0 ff 08 7b 33 7b 33 7b 33 7b 33     ........{3{3{3{3
    1665:	ad 56 45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b     .VEY......(....;
    1675:	08 7d 33 69 57 d2 00 dc 00 be 00 28 00 02 00 04     .}3iW......(....
    1685:	37 08 7d 33 00 00 00 00 00 00 00 00 00 00 00 00     7.}3............
	...
    1901:	00 00 00 0a 00 28 00 78 00 32 00 01 01 e0 07 ff     .....(.x.2......
    1911:	ff 82 3c 02 03 03 ff 00 ab 38 ff 36 9a 38 35 39     ..<......8.6.859
    1921:	08 02 00 00 00 00 00 00 01 0d 0a 00 0a 00 cc 01     ................
    1931:	2c 01 06 e0 ff 08 7b 33 7b 33 7b 33 7b 33 9a 56     ,.....{3{3{3{3.V
    1941:	45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b 08 7d     EY......(....;.}
    1951:	33 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     3...............
	...
    1bf9:	00 00 00 01 00 00 00 00 00 00 00 0e 0a 00 0a 00     ................
    1c09:	cc 01 2c 01 06 e0 ff 08 7b 33 7b 33 7b 33 7b 33     ..,.....{3{3{3{3
    1c19:	83 56 45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b     .VEY......(....;
    1c29:	08 7d 33 00 00 00 00 00 00 00 00 00 00 00 00 00     .}3.............
	...
    1ed5:	00 01 00 00 00 00 00 00 00 0f 00 00 00 00 e0 01     ................
    1ee5:	40 01 01 ff ff 08 7b 33 7b 33 7b 33 7b 33 65 58     @.....{3{3{3{3eX
    1ef5:	45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b 08 7d     EY......(....;.}
    1f05:	33 6d 56 0a 00 28 00 be 00 28 00 01 00 34 4e 08     3mV..(...(...4N.
    1f15:	7d 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00     }3..............
	...
    21ad:	00 00 00 02 00 00 00 00 00 00 00 10 00 00 00 00     ................
    21bd:	e0 01 40 01 01 ff ff 08 7b 33 7b 33 7b 33 7b 33     ..@.....{3{3{3{3
    21cd:	57 56 42 56 0a 00 c8 00 82 00 28 00 02 00 c2 3b     WVBV......(....;
    21dd:	08 7d 33 49 56 96 00 c8 00 82 00 28 00 02 00 96     .}3IV......(....
    21ed:	3b 08 7d 33 38 56 2c 01 c8 00 82 00 28 00 02 00     ;.}38V,.....(...
    21fd:	c0 36 08 7d 33 2d 56 40 01 23 00 28 00 28 00 02     .6.}3-V@.#.(.(..
    220d:	00 b6 33 08 7d 33 2b 56 6d 01 23 00 28 00 28 00     ..3.}3+Vm.#.(.(.
    221d:	02 01 b6 33 08 7d 33 29 56 9a 01 23 00 28 00 28     ...3.}3)V..#.(.(
    222d:	00 02 02 b6 33 08 7d 33 00 00 00 00 00 00 00 00     ....3.}3........
	...
    22e9:	00 00 00 0a 00 23 00 00 fc 40 2c 01 28 00 08 a1     .....#...@,.(...
    22f9:	39 7d 33 1c 56 00 00 00 00 00 00 00 00 00 00 00     9}3.V...........
	...
    2425:	00 00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00     ....P......((...
    2435:	00 03 8f 33 b5 3d af 33 08 00 00 00 00 00 00 00     ...3.=.3........
	...
    2489:	00 06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01     .........g......
    2499:	04 01 06 e0 ff 08 7b 33 7b 33 7b 33 7b 33 62 56     ......{3{3{3{3bV
    24a9:	42 56 0a 00 c8 00 82 00 28 00 02 00 c2 3b 08 7d     BV......(....;.}
    24b9:	33 49 56 96 00 c8 00 82 00 28 00 02 00 96 3b 08     3IV......(....;.
    24c9:	7d 33 38 56 2c 01 c8 00 82 00 28 00 02 00 c0 36     }38V,.....(....6
    24d9:	08 7d 33 00 00 00 00 00 00 00 00 00 00 00 00 00     .}3.............
	...
    25c5:	00 0a 00 23 00 00 fc 40 2c 01 28 00 08 a1 39 7d     ...#...@,.(...9}
    25d5:	33 1c 56 00 00 00 00 00 00 00 00 00 00 00 00 00     3.V.............
	...
    2701:	0a 00 3c 00 1e 00 1e 00 02 28 28 02 09 00 00 02     ..<......((.....
    2711:	81 33 ae 3d 7f 33 08 00 00 00 00 00 00 00 00 00     .3.=.3..........
	...
    2761:	00 00 00 03 00 01 00 00 00 01 00 65 0a 00 0a 00     ...........e....
    2771:	cc 01 04 01 06 e0 ff 08 7b 33 7b 33 7b 33 7b 33     ........{3{3{3{3
    2781:	62 56 53 56 1e 00 3c 00 64 00 28 00 02 00 e7 3b     bVSV..<.d.(....;
    2791:	08 7d 33 50 56 fa 00 3c 00 64 00 28 00 02 00 96     .}3PV..<.d.(....
    27a1:	3b 08 7d 33 00 00 00 00 00 00 00 00 00 00 00 00     ;.}3............
	...
    289d:	00 00 00 14 00 23 00 00 74 3e 00 00 00 00 08 a1     .....#..t>......
    28ad:	39 7d 33 1c 56 00 00 00 00 00 00 00 00 00 00 00     9}3.V...........
	...
    2a3d:	00 02 00 01 00 00 00 00 00 64 32 00 32 00 7c 01     .........d2.2.|.
    2a4d:	8c 00 06 e0 ff 08 7b 33 7b 33 7b 33 7b 33 7d 59     ......{3{3{3{3}Y
    2a5d:	45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b 08 7d     EY......(....;.}
    2a6d:	33 c0 59 0a 00 a0 00 be 00 28 00 01 09 96 3c 08     3.Y......(....<.
    2a7d:	7d 33 ad 56 f0 00 28 00 be 00 28 00 01 0d a0 3b     }3.V..(...(....;
    2a8d:	08 84 38 9a 56 f0 00 5a 00 be 00 28 00 01 0e a0     ..8.V..Z...(....
    2a9d:	3b 08 84 38 00 00 00 00 00 00 00 00 00 00 00 00     ;..8............
	...
    2b05:	00 00 c3 58 f0 00 5a 00 64 00 28 00 01 00 f8 ff     ...X..Z.d.(.....
    2b15:	ff 03 1b 39 57 39 0a 72 38 ba 58 68 01 5a 00 64     ...9W9.r8.Xh.Z.d
    2b25:	00 28 00 01 1f 00 ff ff 05 1b 39 57 39 0a 72 38     .(........9W9.r8
	...
    2b79:	00 18 01 22 01 00 1d 42 00 00 00 00 0c a1 39 7d     ..."...B......9}
    2b89:	33 1c 56 8c 00 05 00 00 1f 3e 00 00 00 00 08 a1     3.V......>......
    2b99:	39 7d 33 1c 56 18 01 28 00 00 17 40 8c 00 28 00     9}3.V..(...@..(.
    2ba9:	08 a1 39 72 38 1c 56 00 00 00 00 00 00 00 00 00     ..9r8.V.........
	...
    2c05:	00 00 0a 00 28 00 be 00 28 00 01 01 01 00 01 01     ....(...(.......
    2c15:	00 01 fc 37 c4 3c d4 33 08 0a 00 64 00 be 00 28     ...7.<.3...d...(
    2c25:	00 01 01 01 00 01 01 00 01 f5 4f 8c 3c d4 33 08     ..........O.<.3.
    2c35:	2b a4 01 28 00 28 00 28 00 02 00 68 36 08 72 38     +..(.(.(...h6.r8
    2c45:	2d f0 00 28 00 28 00 28 00 02 00 1c 36 08 72 38     -..(.(.(....6.r8
	...
    2d15:	00 00 00 04 02 03 00 02 02 00 00 05 00 00 00 00     ................
    2d25:	e0 01 40 01 01 ff ff 08 7b 33 7b 33 7b 33 f0 34     ..@.....{3{3{3.4
    2d35:	2a 58 45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b     *XEY......(....;
    2d45:	08 7d 33 95 57 0a 00 28 00 be 00 28 00 01 00 d6     .}3.W..(...(....
    2d55:	44 08 7d 33 00 00 00 00 00 00 00 00 00 00 00 00     D.}3............
	...
    2e51:	00 00 00 dc 00 14 00 00 38 34 f0 00 f0 00 08 a1     ........84......
    2e61:	39 7d 33 1c 56 18 01 22 01 00 1d 42 00 00 00 00     9}3.V.."...B....
    2e71:	0c a1 39 7d 33 1c 56 9a 01 48 00 01 49 34 28 00     ..9}3.V..H..I4(.
    2e81:	7e 00 08 a1 39 7d 33 1c 56 00 00 00 00 00 00 00     ~...9}3.V.......
	...
    2ee1:	e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 01 04     ..#...7..<<.....
    2ef1:	3f 43 6b 43 16 34 08 00 00 00 00 00 00 00 00 00     ?CkC.4..........
	...
    2f0d:	00 00 2b 9a 01 1e 00 28 00 28 00 02 01 0b 34 08     ..+....(.(....4.
    2f1d:	7d 33 2d 9a 01 c8 00 28 00 28 00 02 01 fb 33 08     }3-....(.(....3.
    2f2d:	7d 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00     }3..............
	...
    2ff1:	00 02 00 03 00 01 02 00 00 06 00 00 00 00 e0 01     ................
    3001:	40 01 01 ff ff 08 7b 33 7b 33 7b 33 7b 33 2a 58     @.....{3{3{3{3*X
    3011:	45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b 08 7d     EY......(....;.}
    3021:	33 87 57 18 01 5a 00 be 00 28 00 02 00 3a 44 08     3.W..Z...(...:D.
    3031:	7d 33 4b 57 18 01 28 00 be 00 28 00 02 00 d4 42     }3KW..(...(....B
    3041:	08 7d 33 2b 57 18 01 8c 00 be 00 28 00 02 00 7c     .}3+W......(...|
    3051:	44 08 7d 33 00 00 00 00 00 00 00 00 00 00 00 00     D.}3............
	...
    312d:	00 14 00 14 00 00 02 46 00 00 00 00 0c a1 39 7d     .......F......9}
    313d:	33 1c 56 00 00 00 00 00 00 00 00 00 00 00 00 00     3.V.............
	...
    32c9:	00 00 00 04 00 01 00 00 00 00 00 07 00 00 00 00     ................
    32d9:	e0 01 40 01 01 ff ff 08 7b 33 7b 33 7b 33 7b 33     ..@.....{3{3{3{3
    32e9:	ed 56 45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b     .VEY......(....;
    32f9:	08 7d 33 00 00 00 00 00 00 00 00 00 00 00 00 00     .}3.............
	...
    3405:	00 00 00 18 01 22 01 00 1d 42 00 00 00 00 0c a1     ....."...B......
    3415:	39 7d 33 1c 56 9a 01 48 00 02 49 34 28 00 56 00     9}3.V..H..I4(.V.
    3425:	08 a1 39 7d 33 1c 56 05 00 1e 00 00 38 34 cc 01     ..9}3.V.....84..
    3435:	b4 00 08 a1 39 7d 33 1c 56 00 00 00 00 00 00 00     ....9}3.V.......
	...
    34c1:	00 00 2b 9a 01 1e 00 28 00 28 00 02 02 0b 34 08     ..+....(.(....4.
    34d1:	7d 33 2d 9a 01 a0 00 28 00 28 00 02 02 fb 33 08     }3-....(.(....3.
    34e1:	7d 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00     }3..............
	...
    3585:	00 00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff     .....(.x.<......
    3595:	ff 82 50 02 03 02 02 00 86 43 6c 47 25 34 32 34     ..P......ClG%424
    35a5:	08 01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01     ................
    35b5:	40 01 01 ff ff 08 7b 33 7b 33 7b 33 7b 33 60 59     @.....{3{3{3{3`Y
    35c5:	45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b 08 7d     EY......(....;.}
    35d5:	33 4b 57 18 01 28 00 be 00 28 00 02 00 32 3d 08     3KW..(...(...2=.
    35e5:	7d 33 d9 57 18 01 64 00 be 00 28 00 02 0b a0 3b     }3.W..d...(....;
    35f5:	08 7d 33 c9 57 18 01 a0 00 be 00 28 00 01 00 a1     .}3.W......(....
    3605:	39 08 7d 33 bf 57 18 01 dc 00 be 00 28 00 02 0c     9.}3.W......(...
    3615:	a0 3b 08 7d 33 74 58 0a 00 28 00 be 00 28 00 01     .;.}3tX..(...(..
    3625:	00 4d 47 08 7d 33 00 00 00 00 00 00 00 00 00 00     .MG.}3..........
	...
    36e1:	00 18 01 22 01 00 1d 42 00 00 00 00 0c a1 39 7d     ..."...B......9}
    36f1:	33 1c 56 8c 00 05 00 00 1f 3e 00 00 00 00 08 a1     3.V......>......
    3701:	39 7d 33 1c 56 00 00 00 00 00 00 00 00 00 00 00     9}3.V...........
	...
    387d:	00 00 00 06 00 02 00 00 00 00 00 09 00 00 00 00     ................
    388d:	e0 01 40 01 01 ff ff 08 7b 33 7b 33 7b 33 7b 33     ..@.....{3{3{3{3
    389d:	d7 56 45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b     .VEY......(....;
    38ad:	08 7d 33 00 00 00 00 00 00 00 00 00 00 00 00 00     .}3.............
	...
    3b39:	00 00 00 e6 00 28 00 c8 00 28 00 02 01 e0 07 ff     .....(...(......
    3b49:	ff 01 32 00 05 01 ff 05 d1 38 09 37 d4 33 3e 38     ..2......8.7.3>8
    3b59:	08 01 00 00 00 00 00 00 01 68 0a 00 0a 00 cc 01     .........h......
    3b69:	2c 01 06 e0 ff 08 7b 33 7b 33 7b 33 7b 33 bc 56     ,.....{3{3{3{3.V
    3b79:	45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b 08 7d     EY......(....;.}
    3b89:	33 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     3...............
	...
    3e15:	00 0a 00 28 00 78 00 32 00 02 01 e0 07 ff ff 82     ...(.x.2........
    3e25:	3c 02 03 03 ff 05 ad 37 9e 3c d4 33 a1 37 08 01     <......7.<.3.7..
    3e35:	00 00 00 00 00 00 01 0a 0a 00 0a 00 cc 01 2c 01     ..............,.
    3e45:	06 e0 ff 08 7b 33 7b 33 7b 33 7b 33 d9 57 45 59     ....{3{3{3{3.WEY
    3e55:	0a 00 dc 00 be 00 28 00 02 00 96 3b 08 7d 33 79     ......(....;.}3y
    3e65:	57 d2 00 dc 00 aa 00 28 00 02 00 21 37 08 7d 33     W......(...!7.}3
	...
    3f6d:	00 00 00 9a 01 52 00 03 49 34 28 00 56 00 08 a1     .....R..I4(.V...
    3f7d:	39 7d 33 1c 56 00 00 00 00 00 00 00 00 00 00 00     9}3.V...........
	...
    4029:	00 00 2b 9a 01 28 00 28 00 28 00 02 03 0b 34 08     ..+..(.(.(....4.
    4039:	7d 33 2d 9a 01 aa 00 28 00 28 00 02 03 fb 33 08     }3-....(.(....3.
    4049:	7d 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00     }3..............
	...
    40ed:	00 00 00 0a 00 28 00 78 00 32 00 01 01 e0 07 ff     .....(.x.2......
    40fd:	ff 82 3c 02 03 03 03 01 86 43 1c 37 25 34 8e 38     ..<......C.7%4.8
    410d:	08 02 00 01 00 00 02 00 01 0b 0a 00 0a 00 cc 01     ................
    411d:	2c 01 06 e0 ff 08 7b 33 7b 33 7b 33 7b 33 71 5a     ,.....{3{3{3{3qZ
    412d:	45 59 0a 00 dc 00 be 00 28 00 02 00 96 3b 08 7d     EY......(....;.}
    413d:	33 50 59 0a 00 28 00 be 00 28 00 01 00 f8 35 08     3PY..(...(....5.
    414d:	7d 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00     }3..............
	...
    4249:	00 0e 01 28 00 00 17 40 8c 00 28 00 08 a1 39 7d     ...(...@..(...9}
    4259:	33 23 56 0e 01 5a 00 01 17 40 8c 00 28 00 08 a1     3#V..Z...@..(...
    4269:	39 7d 33 21 56 0e 01 8c 00 02 17 40 8c 00 28 00     9}3!V......@..(.
    4279:	08 a1 39 7d 33 1f 56 0e 01 be 00 03 17 40 8c 00     ..9}3.V......@..
    4289:	28 00 08 a1 39 7d 33 1d 56 00 00 00 00 00 00 00     (...9}3.V.......
	...
    4305:	2b 9a 01 28 00 28 00 28 00 02 00 68 36 08 7d 33     +..(.(.(...h6.}3
    4315:	2d e6 00 28 00 28 00 28 00 02 00 1c 36 08 7d 33     -..(.(.(....6.}3
    4325:	2b 9a 01 5a 00 28 00 28 00 02 01 68 36 08 7d 33     +..Z.(.(...h6.}3
    4335:	2d e6 00 5a 00 28 00 28 00 02 01 1c 36 08 7d 33     -..Z.(.(....6.}3
    4345:	2b 9a 01 8c 00 28 00 28 00 02 02 68 36 08 7d 33     +....(.(...h6.}3
    4355:	2d e6 00 8c 00 28 00 28 00 02 02 1c 36 08 7d 33     -....(.(....6.}3
    4365:	2b 9a 01 be 00 28 00 28 00 02 03 68 36 08 7d 33     +....(.(...h6.}3
    4375:	2d e6 00 be 00 28 00 28 00 02 03 1c 36 08 7d 33     -....(.(....6.}3
	...
    43e5:	00 00 00 02 00 04 00 00 08 00 00 0c 0a 00 0a 00     ................
    43f5:	cc 01 2c 01 06 e0 ff 08 7b 33 7b 33 7b 33 2e 35     ..,.....{3{3{3.5
	...

00005521 <keyboad_number_char_special>:
    5521:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    5531:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

0000553b <keyboad_number_char_lower>:
    553b:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    554b:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

00005555 <keyboad_number_char_upper>:
    5555:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    5565:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

0000556f <termbig_subscribe>:
    556f:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    557f:	73 63 72 69 62 65 00                                scribe.

00005586 <thermctl_subscribe>:
    5586:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    5596:	62 73 63 72 69 62 65 00                             bscribe.

0000559e <lightctl_header_out>:
    559e:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

000055ad <termbig_header_out>:
    55ad:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

000055bb <termbig_header_in>:
    55bb:	2f 74 65 72 6d 62 69 67 2d 69 6e 2f 00              /termbig-in/.

000055c8 <thermctl_header_out>:
    55c8:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

000055d7 <thermctl_header_in>:
    55d7:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

000055e5 <global_time_offset>:
    55e5:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    55f5:	6f 66 66 73 65 74 00                                offset.

000055fc <global_time_ntp>:
    55fc:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

0000560c <global_time_set>:
    560c:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

0000561c <char_NULL>:
	...

0000561d <char_T>:
    561d:	54 00                                               T.

0000561f <char_D>:
    561f:	44 00                                               D.

00005621 <char_I>:
    5621:	49 00                                               I.

00005623 <char_P>:
    5623:	50 00                                               P.

00005625 <text_dashdash>:
    5625:	2d 2d 2d 00                                         ---.

00005629 <text_special_case>:
    5629:	40 00                                               @.

0000562b <text_lower_case>:
    562b:	61 00                                               a.

0000562d <text_upper_case>:
    562d:	41 00                                               A.

0000562f <text_ok>:
    562f:	4f 4b 00                                            OK.

00005632 <text_err>:
    5632:	45 72 72 6f 72 00                                   Error.

00005638 <text_delete_char>:
    5638:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

00005642 <text_ulozit>:
    5642:	55 6c 6f 7a 69 74 00                                Ulozit.

00005649 <text_zrusit>:
    5649:	5a 72 75 73 69 74 00                                Zrusit.

00005650 <text_no>:
    5650:	4e 65 00                                            Ne.

00005653 <text_yes>:
    5653:	41 6e 6f 00                                         Ano.

00005657 <text_klavesnice>:
    5657:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

00005662 <text_upozorneni>:
    5662:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

0000566d <text_ntp_sync_time>:
    566d:	41 6b 74 75 61 6c 69 7a 61 63 65 20 63 61 73 75     Aktualizace casu
	...

0000567e <text_prog>:
    567e:	50 52 4f 47 00                                      PROG.

00005683 <text_nastaveni_programator>:
    5683:	4e 61 73 74 61 76 65 6e 69 20 70 72 6f 67 72 61     Nastaveni progra
    5693:	6d 61 74 6f 72 75 00                                matoru.

0000569a <text_nastaveni_setup_program>:
    569a:	4e 61 73 74 61 76 65 6e 69 20 70 72 6f 67 72 61     Nastaveni progra
    56aa:	6d 75 00                                            mu.

000056ad <text_nastaveni_ring_program>:
    56ad:	56 79 62 65 72 20 70 72 6f 67 72 61 6d 75 00        Vyber programu.

000056bc <text_select_term_default_ring>:
    56bc:	56 79 62 65 72 20 76 79 63 68 6f 7a 69 68 6f 20     Vyber vychoziho 
    56cc:	72 65 67 75 6c 61 74 6f 72 75 00                    regulatoru.

000056d7 <text_select_term_mode>:
    56d7:	56 79 62 65 72 20 6d 6f 64 75 20 72 65 67 75 6c     Vyber modu regul
    56e7:	61 74 6f 72 75 00                                   atoru.

000056ed <text_select_default_temp>:
    56ed:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
    56fd:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

00005707 <text_last_update>:
    5707:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    5717:	7a 61 63 65 3a 00                                   zace:.

0000571d <text_online>:
    571d:	4f 6e 6c 69 6e 65 00                                Online.

00005724 <text_nazev>:
    5724:	4e 61 7a 65 76 3a 00                                Nazev:.

0000572b <nastaveni_rtds_subscribe>:
    572b:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

0000573b <nastaveni_tds_offset>:
    573b:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

0000574b <nastaveni_name_sensor>:
    574b:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

0000575a <nastaveni_tds_period>:
    575a:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

00005769 <nastaveni_deassociate_program>:
    5769:	55 76 6f 6c 6e 69 74 20 70 72 6f 67 72 61 6d 00     Uvolnit program.

00005779 <nastaveni_deassociate_sensor>:
    5779:	55 76 6f 6c 6e 69 74 20 63 69 64 6c 6f 00           Uvolnit cidlo.

00005787 <nastaveni_delete_sensor>:
    5787:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

00005795 <text_rtds_novy>:
    5795:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
    57a5:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

000057b0 <text_not_used>:
    57b0:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

000057bd <text_rtds_prefix>:
    57bd:	2f 00                                               /.

000057bf <text_nastavit_pid>:
    57bf:	50 49 44 20 76 6f 6c 62 79 00                       PID volby.

000057c9 <text_assocoivat_output>:
    57c9:	4e 61 73 74 61 76 69 74 20 76 79 73 74 75 70 00     Nastavit vystup.

000057d9 <text_assocoivat>:
    57d9:	4e 61 73 74 61 76 69 74 20 63 69 64 6c 6f 00        Nastavit cidlo.

000057e8 <text_nastavit_tds>:
    57e8:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    57f8:	6c 6f 00                                            lo.

000057fb <text_associovat_tds>:
    57fb:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    580b:	64 6c 6f 00                                         dlo.

0000580f <text_tds_sensors>:
    580f:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
    581f:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

0000582a <nastaveni_rtds>:
    582a:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

00005839 <nastaveni_onewire>:
    5839:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

00005847 <nastaveni_default>:
    5847:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

00005857 <nastaveni_nrf>:
    5857:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

00005865 <nastaveni_site>:
    5865:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

00005874 <text_term_do_deactivate>:
    5874:	44 65 61 6b 74 69 76 6f 76 61 74 20 72 65 67 75     Deaktivovat regu
    5884:	6c 61 74 6f 72 00                                   lator.

0000588a <text_term_do_activate>:
    588a:	41 6b 74 69 76 6f 76 61 74 20 6e 6f 76 79 20 72     Aktivovat novy r
    589a:	65 67 75 6c 61 74 6f 72 3f 00                       egulator?.

000058a4 <text_term_deactive>:
    58a4:	4e 65 61 6b 74 69 76 6e 69 00                       Neaktivni.

000058ae <text_term_active>:
    58ae:	41 6b 74 69 76 6e 69 00                             Aktivni.

000058b6 <text_button_term_fan>:
    58b6:	46 41 4e 00                                         FAN.

000058ba <text_button_mode_cool>:
    58ba:	43 68 6c 61 7a 65 6e 69 00                          Chlazeni.

000058c3 <text_button_mode_heat>:
    58c3:	54 6f 70 65 6e 69 00                                Topeni.

000058ca <text_button_term_man_comment>:
    58ca:	52 75 63 6e 69 20 6f 76 6c 61 64 61 6e 69 00        Rucni ovladani.

000058d9 <text_button_term_man>:
    58d9:	4d 41 4e 00                                         MAN.

000058dd <text_button_term_prog_comment>:
    58dd:	41 75 74 6f 6d 61 74 69 63 6b 79 20 70 72 6f 67     Automaticky prog
    58ed:	72 61 6d 00                                         ram.

000058f1 <text_button_term_prog>:
    58f1:	50 52 4f 47 00                                      PROG.

000058f6 <text_button_term_min_comment>:
    58f6:	43 68 6c 61 7a 65 6e 69 2c 20 62 65 7a 20 72 65     Chlazeni, bez re
    5906:	67 75 6c 61 63 65 00                                gulace.

0000590d <text_button_term_min>:
    590d:	4d 49 4e 00                                         MIN.

00005911 <text_button_term_max_comment>:
    5911:	5a 61 70 6e 75 74 6f 2c 20 62 65 7a 20 72 65 67     Zapnuto, bez reg
    5921:	75 6c 61 63 65 00                                   ulace.

00005927 <text_button_term_max>:
    5927:	4d 41 58 00                                         MAX.

0000592b <text_button_term_off_comment>:
    592b:	56 79 70 6e 75 74 6f 2c 20 6f 63 68 72 61 6e 6e     Vypnuto, ochrann
    593b:	79 20 6d 6f 64 00                                   y mod.

00005941 <text_button_term_off>:
    5941:	4f 46 46 00                                         OFF.

00005945 <button_zpet>:
    5945:	5a 70 65 74 00                                      Zpet.

0000594a <budik_text>:
    594a:	42 75 64 69 6b 00                                   Budik.

00005950 <text_set_default>:
    5950:	56 79 63 68 6f 7a 69 20 68 6f 64 6e 6f 74 79 00     Vychozi hodnoty.

00005960 <ring_text_setup>:
    5960:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

0000596a <regulator_default_text>:
    596a:	56 79 63 68 6f 7a 69 20 72 65 67 75 6c 61 74 6f     Vychozi regulato
    597a:	72 3a 00                                            r:.

0000597d <regulator_text>:
    597d:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

00005987 <funkce_text>:
    5987:	46 75 6e 6b 63 65 00                                Funkce.

0000598e <text_change_default_ring>:
    598e:	5a 6d 65 6e 69 74 20 76 79 63 68 6f 7a 69 20 72     Zmenit vychozi r
    599e:	65 67 75 6c 61 74 6f 72 75 00                       egulatoru.

000059a8 <text_current_ring_mode>:
    59a8:	41 6b 74 75 61 6c 6e 69 20 6d 6f 64 20 72 65 67     Aktualni mod reg
    59b8:	75 6c 61 74 6f 72 75 00                             ulatoru.

000059c0 <nastaveni_ring_text>:
    59c0:	4e 61 73 74 61 76 65 6e 69 20 72 65 67 75 6c 61     Nastaveni regula
    59d0:	74 6f 72 75 00                                      toru.

000059d5 <nastaveni_text>:
    59d5:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

000059df <temp_offset_short>:
    59df:	6f 66 66 73 65 74 3a 00                             offset:.

000059e7 <current_temp_short>:
    59e7:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

000059f0 <current_temp>:
    59f0:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    5a00:	3a 00                                               :.

00005a02 <current_time>:
    5a02:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00005a0f <text_test_eeprom>:
    5a0f:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

00005a1f <text_test_ram>:
    5a1f:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

00005a2c <text_bezny_start>:
    5a2c:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

00005a38 <text_vychozi_nastaveni>:
    5a38:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    5a48:	69 00                                               i.

00005a4a <text_rtc_cas>:
    5a4a:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    5a5a:	6e 79 00                                            ny.

00005a5d <text_ntp_cas>:
    5a5d:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    5a6d:	63 61 73 00                                         cas.

00005a71 <text_pid_regulator>:
    5a71:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

00005a7f <text_nrf_rozhrani>:
    5a7f:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

00005a8c <text_rest_rozhrani>:
    5a8c:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    5a9c:	69 00                                               i.

00005a9e <text_mqtt_rozhrani>:
    5a9e:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

00005aac <text_ethernet_rozhrani>:
    5aac:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    5abc:	69 00                                               i.

00005abe <text_vnitrni_ochrany>:
    5abe:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

00005ace <text_onewire_hledam>:
    5ace:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

00005adb <text_onewire_rozhrani>:
    5adb:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

00005aea <text_nastaveni_systemu>:
    5aea:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    5afa:	75 00                                               u.

00005afc <text_touchscreen>:
    5afc:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

00005b08 <term_title>:
    5b08:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    5b18:	6f 72 20 76 33 00                                   or v3.

00005b1e <network_mqtt_key>:
    5b1e:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

00005b2f <network_mqtt_user>:
    5b2f:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    5b3f:	72 00                                               r.

00005b41 <network_mqtt_port>:
    5b41:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    5b51:	74 00                                               t.

00005b53 <network_mqtt_host>:
    5b53:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    5b63:	74 00                                               t.

00005b65 <network_ntp>:
    5b65:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

00005b71 <network_dns>:
    5b71:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

00005b7d <network_gw>:
    5b7d:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

00005b88 <network_netmask>:
    5b88:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

00005b98 <network_mac>:
    5b98:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

00005ba4 <status_know_devices>:
    5ba4:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    5bb4:	63 65 73 00                                         ces.

00005bb8 <network_name>:
    5bb8:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

00005bc5 <network_ip>:
    5bc5:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

00005bd0 <status_mqtt_process>:
    5bd0:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    5be0:	65 73 73 00                                         ess.

00005be4 <status_mqtt_receive>:
    5be4:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    5bf4:	69 76 65 00                                         ive.

00005bf8 <status_mqtt_error>:
    5bf8:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    5c08:	72 00                                               r.

00005c0a <status_mqtt_send>:
    5c0a:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

00005c1b <lcd_font>:
    5c1b:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    5c2b:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    5c3b:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    5c4b:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    5c5b:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    5c6b:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    5c7b:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    5c8b:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    5c9b:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    5cab:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    5cbb:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    5ccb:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    5cdb:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    5ceb:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    5cfb:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    5d0b:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    5d1b:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    5d2b:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    5d3b:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    5d4b:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    5d5b:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    5d6b:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    5d7b:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    5d8b:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    5d9b:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    5dab:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    5dbb:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    5dcb:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    5ddb:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    5deb:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    5dfb:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    5e0b:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    5e1b:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    5e2b:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    5e3b:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    5e4b:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    5e5b:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    5e6b:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    5e7b:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    5e8b:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    5e9b:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    5eab:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    5ebb:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    5ecb:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    5edb:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    5eeb:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    5efb:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    5f0b:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    5f1b:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    5f2b:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    5f3b:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    5f4b:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    5f5b:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    5f6b:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    5f7b:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    5f8b:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    5f9b:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    5fab:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    5fbb:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    5fcb:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    5fdb:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    5feb:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    5ffb:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    600b:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    601b:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    602b:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    603b:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    604b:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    605b:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    606b:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    607b:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    608b:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    609b:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    60ab:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    60bb:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    60cb:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    60db:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    60eb:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    60fb:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    610b:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00006116 <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    6116:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    6126:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    6136:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    6146:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    6156:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    6166:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    6176:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

00006182 <_ZZN4RF2412printDetailsEvE3__c__12_>:
    6182:	50 41 20 50 6f 77 65 72 09 20 3d 20 25 53 0d 0a     PA Power. = %S..
	...

00006193 <_ZZN4RF2412printDetailsEvE3__c__11_>:
    6193:	43 52 43 20 4c 65 6e 67 74 68 09 20 3d 20 25 53     CRC Length. = %S
    61a3:	0d 0a 00                                            ...

000061a6 <_ZZN4RF2412printDetailsEvE3__c__10_>:
    61a6:	4d 6f 64 65 6c 09 09 20 3d 20 25 53 0d 0a 00        Model.. = %S...

000061b5 <RF24::printDetails()::__c>:
    61b5:	44 61 74 61 20 52 61 74 65 09 20 3d 20 25 53 0d     Data Rate. = %S.
    61c5:	0a 00                                               ..

000061c7 <RF24::printDetails()::__c>:
    61c7:	44 59 4e 50 44 2f 46 45 41 54 55 52 45 00           DYNPD/FEATURE.

000061d5 <RF24::printDetails()::__c>:
    61d5:	43 4f 4e 46 49 47 09 00                             CONFIG..

000061dd <RF24::printDetails()::__c>:
    61dd:	52 46 5f 53 45 54 55 50 00                          RF_SETUP.

000061e6 <RF24::printDetails()::__c>:
    61e6:	52 46 5f 43 48 09 00                                RF_CH..

000061ed <RF24::printDetails()::__c>:
    61ed:	45 4e 5f 52 58 41 44 44 52 00                       EN_RXADDR.

000061f7 <RF24::printDetails()::__c>:
    61f7:	45 4e 5f 41 41 09 00                                EN_AA..

000061fe <RF24::printDetails()::__c>:
    61fe:	52 58 5f 50 57 5f 50 30 2d 36 00                    RX_PW_P0-6.

00006209 <RF24::printDetails()::__c>:
    6209:	54 58 5f 41 44 44 52 09 00                          TX_ADDR..

00006212 <RF24::printDetails()::__c>:
    6212:	52 58 5f 41 44 44 52 5f 50 32 2d 35 00              RX_ADDR_P2-5.

0000621f <RF24::printDetails()::__c>:
    621f:	52 58 5f 41 44 44 52 5f 50 30 2d 31 00              RX_ADDR_P0-1.

0000622c <rf24_pa_dbm_e_str_P>:
    622c:	4a 62 43 62 3b 62 34 62                             JbCb;b4b

00006234 <rf24_pa_dbm_e_str_3>:
    6234:	50 41 5f 4d 41 58 00                                PA_MAX.

0000623b <rf24_pa_dbm_e_str_2>:
    623b:	50 41 5f 48 49 47 48 00                             PA_HIGH.

00006243 <rf24_pa_dbm_e_str_1>:
    6243:	50 41 5f 4c 4f 57 00                                PA_LOW.

0000624a <rf24_pa_dbm_e_str_0>:
    624a:	50 41 5f 4d 49 4e 00                                PA_MIN.

00006251 <rf24_crclength_e_str_P>:
    6251:	66 62 5f 62 57 62                                   fb_bWb

00006257 <rf24_crclength_e_str_2>:
    6257:	31 36 20 62 69 74 73 00                             16 bits.

0000625f <rf24_crclength_e_str_1>:
    625f:	38 20 62 69 74 73 00                                8 bits.

00006266 <rf24_crclength_e_str_0>:
    6266:	44 69 73 61 62 6c 65 64 00                          Disabled.

0000626f <rf24_model_e_str_P>:
    626f:	7d 62 73 62                                         }bsb

00006273 <rf24_model_e_str_1>:
    6273:	6e 52 46 32 34 4c 30 31 2b 00                       nRF24L01+.

0000627d <rf24_model_e_str_0>:
    627d:	6e 52 46 32 34 4c 30 31 00                          nRF24L01.

00006286 <rf24_datarate_e_str_P>:
    6286:	9a 62 94 62 8c 62                                   .b.b.b

0000628c <rf24_datarate_e_str_2>:
    628c:	32 35 30 4b 42 50 53 00                             250KBPS.

00006294 <rf24_datarate_e_str_1>:
    6294:	32 4d 42 50 53 00                                   2MBPS.

0000629a <rf24_datarate_e_str_0>:
    629a:	31 4d 42 50 53 00                                   1MBPS.

000062a0 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    62a0:	0d 0a 00                                            ...

000062a3 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    62a3:	25 30 32 78 00                                      %02x.

000062a8 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    62a8:	20 30 78 00                                          0x.

000062ac <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    62ac:	25 53 09 20 3d 00                                   %S. =.

000062b2 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    62b2:	0d 0a 00                                            ...

000062b5 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    62b5:	20 30 78 25 30 32 78 00                              0x%02x.

000062bd <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    62bd:	25 53 09 20 3d 00                                   %S. =.

000062c3 <RF24::print_status(unsigned char)::__c>:
    62c3:	53 54 41 54 55 53 09 09 20 3d 20 30 78 25 30 32     STATUS.. = 0x%02
    62d3:	78 20 52 58 5f 44 52 3d 25 78 20 54 58 5f 44 53     x RX_DR=%x TX_DS
    62e3:	3d 25 78 20 4d 41 58 5f 52 54 3d 25 78 20 52 58     =%x MAX_RT=%x RX
    62f3:	5f 50 5f 4e 4f 3d 25 78 20 54 58 5f 46 55 4c 4c     _P_NO=%x TX_FULL
    6303:	3d 25 78 0d 0a 00                                   =%x...

00006309 <daysInMonth>:
    6309:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00006315 <digital_pin_to_timer_PGM>:
    6315:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    6349:	00 03                                               ..

0000634b <digital_pin_to_bit_mask_PGM>:
    634b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    635b:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    636b:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    637b:	08 10 20 40 80 20                                   .. @. 

00006381 <digital_pin_to_port_PGM>:
    6381:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    6391:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    63a1:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    63b1:	06 06 06 06 06 07                                   ......

000063b7 <port_to_input_PGM>:
    63b7:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

000063c7 <port_to_output_PGM>:
    63c7:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

000063d7 <port_to_mode_PGM>:
    63d7:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
	...

000063e8 <__ctors_start>:
__ctors_start():
    63e8:	6d 80       	ldd	r6, Y+5	; 0x05
    63ea:	0d 88       	ldd	r0, Y+21	; 0x15
    63ec:	1e 88       	ldd	r1, Y+22	; 0x16
    63ee:	a4 92       	xch	Z, r10
    63f0:	66 ac       	ldd	r6, Z+62	; 0x3e
    63f2:	bb ac       	ldd	r11, Y+59	; 0x3b
    63f4:	de af       	std	Y+62, r29	; 0x3e
    63f6:	db b1       	in	r29, 0x0b	; 11
    63f8:	e6 b1       	in	r30, 0x06	; 6
    63fa:	c9 b3       	in	r28, 0x19	; 25
    63fc:	d4 b3       	in	r29, 0x14	; 20
    63fe:	18 b8       	out	0x08, r1	; 8
    6400:	97 c2       	rjmp	.+1326   	; 0x6930 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x9e>
    6402:	d7 c9       	rjmp	.-3154   	; 0x57b2 <text_not_used+0x2>
    6404:	39 d0       	rcall	.+114    	; 0x6478 <localtime+0xa>
    6406:	25 d4       	rcall	.+2122   	; 0x6c52 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x1a>

00006408 <__ctors_end>:
__dtors_end():
    6408:	11 24       	eor	r1, r1
    640a:	1f be       	out	0x3f, r1	; 63
    640c:	cf ef       	ldi	r28, 0xFF	; 255
    640e:	d1 e2       	ldi	r29, 0x21	; 33
    6410:	de bf       	out	0x3e, r29	; 62
    6412:	cd bf       	out	0x3d, r28	; 61
    6414:	00 e0       	ldi	r16, 0x00	; 0
    6416:	0c bf       	out	0x3c, r16	; 60

00006418 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    6418:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    641a:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    641c:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    641e:	e0 e3       	ldi	r30, 0x30	; 48
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    6420:	f9 ec       	ldi	r31, 0xC9	; 201
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    6422:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    6424:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    6426:	02 c0       	rjmp	.+4      	; 0x642c <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    6428:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    642a:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    642c:	ae 3d       	cpi	r26, 0xDE	; 222
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    642e:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    6430:	d9 f7       	brne	.-10     	; 0x6428 <__do_copy_data+0x10>

00006432 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    6432:	22 e1       	ldi	r18, 0x12	; 18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    6434:	ae ed       	ldi	r26, 0xDE	; 222
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    6436:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    6438:	01 c0       	rjmp	.+2      	; 0x643c <.do_clear_bss_start>

0000643a <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    643a:	1d 92       	st	X+, r1

0000643c <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    643c:	aa 3c       	cpi	r26, 0xCA	; 202
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    643e:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    6440:	e1 f7       	brne	.-8      	; 0x643a <.do_clear_bss_loop>

00006442 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    6442:	11 e3       	ldi	r17, 0x31	; 49
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    6444:	c4 e0       	ldi	r28, 0x04	; 4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    6446:	d2 e3       	ldi	r29, 0x32	; 50
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    6448:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    644a:	06 c0       	rjmp	.+12     	; 0x6458 <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    644c:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    644e:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    6450:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    6452:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    6454:	0e 94 c2 d8 	call	0x1b184	; 0x1b184 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    6458:	c4 3f       	cpi	r28, 0xF4	; 244
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    645a:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    645c:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    645e:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    6460:	a9 f7       	brne	.-22     	; 0x644c <__do_global_ctors+0xa>
    6462:	0e 94 ec d5 	call	0x1abd8	; 0x1abd8 <main>
    6466:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <_exit>

0000646a <__bad_interrupt>:
__vector_38():
    646a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000646e <localtime>:
localtime():
    646e:	66 eb       	ldi	r22, 0xB6	; 182
    6470:	72 e1       	ldi	r23, 0x12	; 18
    6472:	0e 94 3e 32 	call	0x647c	; 0x647c <localtime_r>
    6476:	86 eb       	ldi	r24, 0xB6	; 182
    6478:	92 e1       	ldi	r25, 0x12	; 18
    647a:	08 95       	ret

0000647c <localtime_r>:
localtime_r():
    647c:	cf 92       	push	r12
    647e:	df 92       	push	r13
    6480:	ef 92       	push	r14
    6482:	ff 92       	push	r15
    6484:	0f 93       	push	r16
    6486:	1f 93       	push	r17
    6488:	cf 93       	push	r28
    648a:	df 93       	push	r29
    648c:	00 d0       	rcall	.+0      	; 0x648e <localtime_r+0x12>
    648e:	1f 92       	push	r1
    6490:	cd b7       	in	r28, 0x3d	; 61
    6492:	de b7       	in	r29, 0x3e	; 62
    6494:	6c 01       	movw	r12, r24
    6496:	7b 01       	movw	r14, r22
    6498:	e0 91 c8 12 	lds	r30, 0x12C8	; 0x8012c8 <__dst_ptr>
    649c:	f0 91 c9 12 	lds	r31, 0x12C9	; 0x8012c9 <__dst_ptr+0x1>
    64a0:	0f ef       	ldi	r16, 0xFF	; 255
    64a2:	1f ef       	ldi	r17, 0xFF	; 255
    64a4:	30 97       	sbiw	r30, 0x00	; 0
    64a6:	21 f0       	breq	.+8      	; 0x64b0 <localtime_r+0x34>
    64a8:	62 ec       	ldi	r22, 0xC2	; 194
    64aa:	72 e1       	ldi	r23, 0x12	; 18
    64ac:	19 95       	eicall
    64ae:	8c 01       	movw	r16, r24
    64b0:	f6 01       	movw	r30, r12
    64b2:	80 81       	ld	r24, Z
    64b4:	91 81       	ldd	r25, Z+1	; 0x01
    64b6:	a2 81       	ldd	r26, Z+2	; 0x02
    64b8:	b3 81       	ldd	r27, Z+3	; 0x03
    64ba:	40 91 c2 12 	lds	r20, 0x12C2	; 0x8012c2 <__utc_offset>
    64be:	50 91 c3 12 	lds	r21, 0x12C3	; 0x8012c3 <__utc_offset+0x1>
    64c2:	60 91 c4 12 	lds	r22, 0x12C4	; 0x8012c4 <__utc_offset+0x2>
    64c6:	70 91 c5 12 	lds	r23, 0x12C5	; 0x8012c5 <__utc_offset+0x3>
    64ca:	84 0f       	add	r24, r20
    64cc:	95 1f       	adc	r25, r21
    64ce:	a6 1f       	adc	r26, r22
    64d0:	b7 1f       	adc	r27, r23
    64d2:	10 16       	cp	r1, r16
    64d4:	11 06       	cpc	r1, r17
    64d6:	cc f0       	brlt	.+50     	; 0x650a <localtime_r+0x8e>
    64d8:	89 83       	std	Y+1, r24	; 0x01
    64da:	9a 83       	std	Y+2, r25	; 0x02
    64dc:	ab 83       	std	Y+3, r26	; 0x03
    64de:	bc 83       	std	Y+4, r27	; 0x04
    64e0:	b7 01       	movw	r22, r14
    64e2:	ce 01       	movw	r24, r28
    64e4:	01 96       	adiw	r24, 0x01	; 1
    64e6:	0e 94 8f 32 	call	0x651e	; 0x651e <gmtime_r>
    64ea:	f7 01       	movw	r30, r14
    64ec:	13 87       	std	Z+11, r17	; 0x0b
    64ee:	02 87       	std	Z+10, r16	; 0x0a
    64f0:	0f 90       	pop	r0
    64f2:	0f 90       	pop	r0
    64f4:	0f 90       	pop	r0
    64f6:	0f 90       	pop	r0
    64f8:	df 91       	pop	r29
    64fa:	cf 91       	pop	r28
    64fc:	1f 91       	pop	r17
    64fe:	0f 91       	pop	r16
    6500:	ff 90       	pop	r15
    6502:	ef 90       	pop	r14
    6504:	df 90       	pop	r13
    6506:	cf 90       	pop	r12
    6508:	08 95       	ret
    650a:	a8 01       	movw	r20, r16
    650c:	01 2e       	mov	r0, r17
    650e:	00 0c       	add	r0, r0
    6510:	66 0b       	sbc	r22, r22
    6512:	77 0b       	sbc	r23, r23
    6514:	84 0f       	add	r24, r20
    6516:	95 1f       	adc	r25, r21
    6518:	a6 1f       	adc	r26, r22
    651a:	b7 1f       	adc	r27, r23
    651c:	dd cf       	rjmp	.-70     	; 0x64d8 <localtime_r+0x5c>

0000651e <gmtime_r>:
gmtime_r():
    651e:	cf 92       	push	r12
    6520:	df 92       	push	r13
    6522:	ef 92       	push	r14
    6524:	ff 92       	push	r15
    6526:	0f 93       	push	r16
    6528:	1f 93       	push	r17
    652a:	cf 93       	push	r28
    652c:	df 93       	push	r29
    652e:	00 d0       	rcall	.+0      	; 0x6530 <gmtime_r+0x12>
    6530:	00 d0       	rcall	.+0      	; 0x6532 <gmtime_r+0x14>
    6532:	1f 92       	push	r1
    6534:	1f 92       	push	r1
    6536:	cd b7       	in	r28, 0x3d	; 61
    6538:	de b7       	in	r29, 0x3e	; 62
    653a:	8b 01       	movw	r16, r22
    653c:	fc 01       	movw	r30, r24
    653e:	60 81       	ld	r22, Z
    6540:	71 81       	ldd	r23, Z+1	; 0x01
    6542:	82 81       	ldd	r24, Z+2	; 0x02
    6544:	93 81       	ldd	r25, Z+3	; 0x03
    6546:	20 e8       	ldi	r18, 0x80	; 128
    6548:	31 e5       	ldi	r19, 0x51	; 81
    654a:	41 e0       	ldi	r20, 0x01	; 1
    654c:	50 e0       	ldi	r21, 0x00	; 0
    654e:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
    6552:	69 01       	movw	r12, r18
    6554:	7a 01       	movw	r14, r20
    6556:	2c e3       	ldi	r18, 0x3C	; 60
    6558:	30 e0       	ldi	r19, 0x00	; 0
    655a:	40 e0       	ldi	r20, 0x00	; 0
    655c:	50 e0       	ldi	r21, 0x00	; 0
    655e:	0e 94 a3 d8 	call	0x1b146	; 0x1b146 <__divmodsi4>
    6562:	29 83       	std	Y+1, r18	; 0x01
    6564:	3a 83       	std	Y+2, r19	; 0x02
    6566:	4b 83       	std	Y+3, r20	; 0x03
    6568:	5c 83       	std	Y+4, r21	; 0x04
    656a:	89 81       	ldd	r24, Y+1	; 0x01
    656c:	9a 81       	ldd	r25, Y+2	; 0x02
    656e:	ab 81       	ldd	r26, Y+3	; 0x03
    6570:	bc 81       	ldd	r27, Y+4	; 0x04
    6572:	f8 01       	movw	r30, r16
    6574:	60 83       	st	Z, r22
    6576:	6c e3       	ldi	r22, 0x3C	; 60
    6578:	70 e0       	ldi	r23, 0x00	; 0
    657a:	0e 94 6d d8 	call	0x1b0da	; 0x1b0da <__divmodhi4>
    657e:	dc 01       	movw	r26, r24
    6580:	f8 01       	movw	r30, r16
    6582:	a1 83       	std	Z+1, r26	; 0x01
    6584:	62 83       	std	Z+2, r22	; 0x02
    6586:	c6 01       	movw	r24, r12
    6588:	06 96       	adiw	r24, 0x06	; 6
    658a:	67 e0       	ldi	r22, 0x07	; 7
    658c:	70 e0       	ldi	r23, 0x00	; 0
    658e:	0e 94 59 d8 	call	0x1b0b2	; 0x1b0b2 <__udivmodhi4>
    6592:	84 83       	std	Z+4, r24	; 0x04
    6594:	2d ea       	ldi	r18, 0xAD	; 173
    6596:	3e e8       	ldi	r19, 0x8E	; 142
    6598:	40 e0       	ldi	r20, 0x00	; 0
    659a:	50 e0       	ldi	r21, 0x00	; 0
    659c:	c7 01       	movw	r24, r14
    659e:	b6 01       	movw	r22, r12
    65a0:	0e 94 a3 d8 	call	0x1b146	; 0x1b146 <__divmodsi4>
    65a4:	29 83       	std	Y+1, r18	; 0x01
    65a6:	3a 83       	std	Y+2, r19	; 0x02
    65a8:	6d 83       	std	Y+5, r22	; 0x05
    65aa:	7e 83       	std	Y+6, r23	; 0x06
    65ac:	8f 83       	std	Y+7, r24	; 0x07
    65ae:	98 87       	std	Y+8, r25	; 0x08
    65b0:	89 81       	ldd	r24, Y+1	; 0x01
    65b2:	9a 81       	ldd	r25, Y+2	; 0x02
    65b4:	24 e6       	ldi	r18, 0x64	; 100
    65b6:	28 9f       	mul	r18, r24
    65b8:	60 01       	movw	r12, r0
    65ba:	29 9f       	mul	r18, r25
    65bc:	d0 0c       	add	r13, r0
    65be:	11 24       	eor	r1, r1
    65c0:	6d 81       	ldd	r22, Y+5	; 0x05
    65c2:	7e 81       	ldd	r23, Y+6	; 0x06
    65c4:	8f 81       	ldd	r24, Y+7	; 0x07
    65c6:	98 85       	ldd	r25, Y+8	; 0x08
    65c8:	25 eb       	ldi	r18, 0xB5	; 181
    65ca:	35 e0       	ldi	r19, 0x05	; 5
    65cc:	40 e0       	ldi	r20, 0x00	; 0
    65ce:	50 e0       	ldi	r21, 0x00	; 0
    65d0:	0e 94 a3 d8 	call	0x1b146	; 0x1b146 <__divmodsi4>
    65d4:	29 83       	std	Y+1, r18	; 0x01
    65d6:	3a 83       	std	Y+2, r19	; 0x02
    65d8:	6d 83       	std	Y+5, r22	; 0x05
    65da:	7e 83       	std	Y+6, r23	; 0x06
    65dc:	e9 80       	ldd	r14, Y+1	; 0x01
    65de:	fa 80       	ldd	r15, Y+2	; 0x02
    65e0:	ee 0c       	add	r14, r14
    65e2:	ff 1c       	adc	r15, r15
    65e4:	ee 0c       	add	r14, r14
    65e6:	ff 1c       	adc	r15, r15
    65e8:	ec 0c       	add	r14, r12
    65ea:	fd 1c       	adc	r15, r13
    65ec:	8d 81       	ldd	r24, Y+5	; 0x05
    65ee:	9e 81       	ldd	r25, Y+6	; 0x06
    65f0:	f5 e6       	ldi	r31, 0x65	; 101
    65f2:	ef 16       	cp	r14, r31
    65f4:	f1 04       	cpc	r15, r1
    65f6:	08 f4       	brcc	.+2      	; 0x65fa <gmtime_r+0xdc>
    65f8:	3f c0       	rjmp	.+126    	; 0x6678 <gmtime_r+0x15a>
    65fa:	01 96       	adiw	r24, 0x01	; 1
    65fc:	21 e0       	ldi	r18, 0x01	; 1
    65fe:	30 e0       	ldi	r19, 0x00	; 0
    6600:	a9 01       	movw	r20, r18
    6602:	44 59       	subi	r20, 0x94	; 148
    6604:	5e 4f       	sbci	r21, 0xFE	; 254
    6606:	48 17       	cp	r20, r24
    6608:	59 07       	cpc	r21, r25
    660a:	60 f4       	brcc	.+24     	; 0x6624 <gmtime_r+0x106>
    660c:	6d e6       	ldi	r22, 0x6D	; 109
    660e:	71 e0       	ldi	r23, 0x01	; 1
    6610:	82 1b       	sub	r24, r18
    6612:	93 0b       	sbc	r25, r19
    6614:	0e 94 6d d8 	call	0x1b0da	; 0x1b0da <__divmodhi4>
    6618:	dc 01       	movw	r26, r24
    661a:	e6 0e       	add	r14, r22
    661c:	f7 1e       	adc	r15, r23
    661e:	cd 01       	movw	r24, r26
    6620:	30 e0       	ldi	r19, 0x00	; 0
    6622:	20 e0       	ldi	r18, 0x00	; 0
    6624:	44 e6       	ldi	r20, 0x64	; 100
    6626:	e4 0e       	add	r14, r20
    6628:	f1 1c       	adc	r15, r1
    662a:	f8 01       	movw	r30, r16
    662c:	f7 82       	std	Z+7, r15	; 0x07
    662e:	e6 82       	std	Z+6, r14	; 0x06
    6630:	91 87       	std	Z+9, r25	; 0x09
    6632:	80 87       	std	Z+8, r24	; 0x08
    6634:	25 5c       	subi	r18, 0xC5	; 197
    6636:	3f 4f       	sbci	r19, 0xFF	; 255
    6638:	82 17       	cp	r24, r18
    663a:	93 07       	cpc	r25, r19
    663c:	38 f5       	brcc	.+78     	; 0x668c <gmtime_r+0x16e>
    663e:	6f e1       	ldi	r22, 0x1F	; 31
    6640:	70 e0       	ldi	r23, 0x00	; 0
    6642:	0e 94 6d d8 	call	0x1b0da	; 0x1b0da <__divmodhi4>
    6646:	dc 01       	movw	r26, r24
    6648:	f8 01       	movw	r30, r16
    664a:	65 83       	std	Z+5, r22	; 0x05
    664c:	a3 83       	std	Z+3, r26	; 0x03
    664e:	f8 01       	movw	r30, r16
    6650:	13 86       	std	Z+11, r1	; 0x0b
    6652:	12 86       	std	Z+10, r1	; 0x0a
    6654:	83 81       	ldd	r24, Z+3	; 0x03
    6656:	8f 5f       	subi	r24, 0xFF	; 255
    6658:	83 83       	std	Z+3, r24	; 0x03
    665a:	28 96       	adiw	r28, 0x08	; 8
    665c:	0f b6       	in	r0, 0x3f	; 63
    665e:	f8 94       	cli
    6660:	de bf       	out	0x3e, r29	; 62
    6662:	0f be       	out	0x3f, r0	; 63
    6664:	cd bf       	out	0x3d, r28	; 61
    6666:	df 91       	pop	r29
    6668:	cf 91       	pop	r28
    666a:	1f 91       	pop	r17
    666c:	0f 91       	pop	r16
    666e:	ff 90       	pop	r15
    6670:	ef 90       	pop	r14
    6672:	df 90       	pop	r13
    6674:	cf 90       	pop	r12
    6676:	08 95       	ret
    6678:	51 e0       	ldi	r21, 0x01	; 1
    667a:	40 e0       	ldi	r20, 0x00	; 0
    667c:	24 e6       	ldi	r18, 0x64	; 100
    667e:	e2 16       	cp	r14, r18
    6680:	f1 04       	cpc	r15, r1
    6682:	09 f4       	brne	.+2      	; 0x6686 <gmtime_r+0x168>
    6684:	50 e0       	ldi	r21, 0x00	; 0
    6686:	25 2f       	mov	r18, r21
    6688:	34 2f       	mov	r19, r20
    668a:	ba cf       	rjmp	.-140    	; 0x6600 <gmtime_r+0xe2>
    668c:	69 e9       	ldi	r22, 0x99	; 153
    668e:	70 e0       	ldi	r23, 0x00	; 0
    6690:	82 1b       	sub	r24, r18
    6692:	93 0b       	sbc	r25, r19
    6694:	0e 94 6d d8 	call	0x1b0da	; 0x1b0da <__divmodhi4>
    6698:	dc 01       	movw	r26, r24
    669a:	26 2f       	mov	r18, r22
    669c:	22 0f       	add	r18, r18
    669e:	22 0f       	add	r18, r18
    66a0:	f2 2e       	mov	r15, r18
    66a2:	f6 0e       	add	r15, r22
    66a4:	6d e3       	ldi	r22, 0x3D	; 61
    66a6:	70 e0       	ldi	r23, 0x00	; 0
    66a8:	cd 01       	movw	r24, r26
    66aa:	0e 94 6d d8 	call	0x1b0da	; 0x1b0da <__divmodhi4>
    66ae:	dc 01       	movw	r26, r24
    66b0:	e6 2e       	mov	r14, r22
    66b2:	ee 0c       	add	r14, r14
    66b4:	6f e1       	ldi	r22, 0x1F	; 31
    66b6:	70 e0       	ldi	r23, 0x00	; 0
    66b8:	cd 01       	movw	r24, r26
    66ba:	0e 94 6d d8 	call	0x1b0da	; 0x1b0da <__divmodhi4>
    66be:	dc 01       	movw	r26, r24
    66c0:	22 e0       	ldi	r18, 0x02	; 2
    66c2:	26 0f       	add	r18, r22
    66c4:	2f 0d       	add	r18, r15
    66c6:	2e 0d       	add	r18, r14
    66c8:	f8 01       	movw	r30, r16
    66ca:	25 83       	std	Z+5, r18	; 0x05
    66cc:	bf cf       	rjmp	.-130    	; 0x664c <gmtime_r+0x12e>

000066ce <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4995
}
//////////////////////////////
void click_select_default_temp(uint8_t args1, uint8_t args2)
{

}
    66ce:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
    66d0:	86 81       	ldd	r24, Z+6	; 0x06
    66d2:	97 81       	ldd	r25, Z+7	; 0x07
    66d4:	68 0f       	add	r22, r24
    66d6:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
    66d8:	24 81       	ldd	r18, Z+4	; 0x04
    66da:	35 81       	ldd	r19, Z+5	; 0x05
    66dc:	26 17       	cp	r18, r22
    66de:	37 07       	cpc	r19, r23
    66e0:	38 f0       	brcs	.+14     	; 0x66f0 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
    66e2:	22 81       	ldd	r18, Z+2	; 0x02
    66e4:	33 81       	ldd	r19, Z+3	; 0x03
    66e6:	82 0f       	add	r24, r18
    66e8:	93 1f       	adc	r25, r19
    66ea:	77 83       	std	Z+7, r23	; 0x07
    66ec:	66 83       	std	Z+6, r22	; 0x06
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
    66ee:	08 95       	ret
    66f0:	90 e0       	ldi	r25, 0x00	; 0
    66f2:	80 e0       	ldi	r24, 0x00	; 0
    66f4:	08 95       	ret

000066f6 <returnnullfceargs(unsigned int, unsigned int, unsigned char)>:
_Z17returnnullfceargsjjh():
    66f6:	80 e0       	ldi	r24, 0x00	; 0
    66f8:	08 95       	ret

000066fa <display_enable_show(unsigned int, unsigned int, unsigned char)>:
_Z19display_enable_showjjh():
    66fa:	81 e0       	ldi	r24, 0x01	; 1
    66fc:	08 95       	ret

000066fe <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_keyboard_number_max_keysjjh():
    66fe:	8b e0       	ldi	r24, 0x0B	; 11
    6700:	08 95       	ret

00006702 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhhPcS_():
    6702:	0f 93       	push	r16
    6704:	1f 93       	push	r17
    6706:	8a 30       	cpi	r24, 0x0A	; 10
    6708:	41 f0       	breq	.+16     	; 0x671a <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    670a:	80 5d       	subi	r24, 0xD0	; 208
    670c:	f9 01       	movw	r30, r18
    670e:	80 83       	st	Z, r24
    6710:	f8 01       	movw	r30, r16
    6712:	10 82       	st	Z, r1
    6714:	1f 91       	pop	r17
    6716:	0f 91       	pop	r16
    6718:	08 95       	ret
    671a:	8e e2       	ldi	r24, 0x2E	; 46
    671c:	f7 cf       	rjmp	.-18     	; 0x670c <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>

0000671e <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhhPcS_():
    671e:	0f 93       	push	r16
    6720:	1f 93       	push	r17
    6722:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <dialog_set_string_keyboard_type>
    6726:	91 11       	cpse	r25, r1
    6728:	0c c0       	rjmp	.+24     	; 0x6742 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
    672a:	e8 2f       	mov	r30, r24
    672c:	f0 e0       	ldi	r31, 0x00	; 0
    672e:	eb 5a       	subi	r30, 0xAB	; 171
    6730:	fa 4a       	sbci	r31, 0xAA	; 170
    6732:	e4 91       	lpm	r30, Z
    6734:	d9 01       	movw	r26, r18
    6736:	ec 93       	st	X, r30
    6738:	f8 01       	movw	r30, r16
    673a:	10 82       	st	Z, r1
    673c:	1f 91       	pop	r17
    673e:	0f 91       	pop	r16
    6740:	08 95       	ret
    6742:	91 30       	cpi	r25, 0x01	; 1
    6744:	29 f4       	brne	.+10     	; 0x6750 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x32>
    6746:	e8 2f       	mov	r30, r24
    6748:	f0 e0       	ldi	r31, 0x00	; 0
    674a:	e5 5c       	subi	r30, 0xC5	; 197
    674c:	fa 4a       	sbci	r31, 0xAA	; 170
    674e:	f1 cf       	rjmp	.-30     	; 0x6732 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
    6750:	92 30       	cpi	r25, 0x02	; 2
    6752:	81 f7       	brne	.-32     	; 0x6734 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
    6754:	e8 2f       	mov	r30, r24
    6756:	f0 e0       	ldi	r31, 0x00	; 0
    6758:	ef 5d       	subi	r30, 0xDF	; 223
    675a:	fa 4a       	sbci	r31, 0xAA	; 170
    675c:	ea cf       	rjmp	.-44     	; 0x6732 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>

0000675e <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
    675e:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <dialog_set_string_keyboard_type>
    6762:	83 30       	cpi	r24, 0x03	; 3
    6764:	08 f0       	brcs	.+2      	; 0x6768 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    6766:	08 95       	ret
    6768:	8a e1       	ldi	r24, 0x1A	; 26
    676a:	08 95       	ret

0000676c <click_keyboard_type(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_typejjh():
    676c:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <dialog_set_string_keyboard_type>
    6770:	08 95       	ret

00006772 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>:
_Z19menu_redraw_time05sjjh():
    6772:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <menu_redraw05s>
    6776:	81 30       	cpi	r24, 0x01	; 1
    6778:	19 f4       	brne	.+6      	; 0x6780 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0xe>
    677a:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <menu_redraw05s>
    677e:	08 95       	ret
    6780:	80 e0       	ldi	r24, 0x00	; 0
    6782:	08 95       	ret

00006784 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>:
_Z28menu_redraw_change_term_modejjh():
    6784:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <change_term_mode>
    6788:	81 30       	cpi	r24, 0x01	; 1
    678a:	19 f4       	brne	.+6      	; 0x6792 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)+0xe>
    678c:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <change_term_mode>
    6790:	08 95       	ret
    6792:	80 e0       	ldi	r24, 0x00	; 0
    6794:	08 95       	ret

00006796 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>:
_Z23menu_redraw_update_tempjjh():
    6796:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <menu_redraw10s>
    679a:	81 30       	cpi	r24, 0x01	; 1
    679c:	19 f4       	brne	.+6      	; 0x67a4 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)+0xe>
    679e:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <menu_redraw10s>
    67a2:	08 95       	ret
    67a4:	80 e0       	ldi	r24, 0x00	; 0
    67a6:	08 95       	ret

000067a8 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_return_args_1jjh():
    67a8:	08 95       	ret

000067aa <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
    67aa:	83 30       	cpi	r24, 0x03	; 3
    67ac:	41 f4       	brne	.+16     	; 0x67be <a2d_complete(unsigned char, unsigned int)+0x14>
    67ae:	70 93 47 0a 	sts	0x0A47, r23	; 0x800a47 <proud+0x1>
    67b2:	60 93 46 0a 	sts	0x0A46, r22	; 0x800a46 <proud>
    67b6:	81 e0       	ldi	r24, 0x01	; 1
    67b8:	80 93 43 0a 	sts	0x0A43, r24	; 0x800a43 <a2d_run_now>
    67bc:	08 95       	ret
    67be:	86 30       	cpi	r24, 0x06	; 6
    67c0:	29 f4       	brne	.+10     	; 0x67cc <a2d_complete(unsigned char, unsigned int)+0x22>
    67c2:	70 93 4d 0a 	sts	0x0A4D, r23	; 0x800a4d <tritri+0x1>
    67c6:	60 93 4c 0a 	sts	0x0A4C, r22	; 0x800a4c <tritri>
    67ca:	f5 cf       	rjmp	.-22     	; 0x67b6 <a2d_complete(unsigned char, unsigned int)+0xc>
    67cc:	85 30       	cpi	r24, 0x05	; 5
    67ce:	29 f4       	brne	.+10     	; 0x67da <a2d_complete(unsigned char, unsigned int)+0x30>
    67d0:	70 93 4b 0a 	sts	0x0A4B, r23	; 0x800a4b <petnula+0x1>
    67d4:	60 93 4a 0a 	sts	0x0A4A, r22	; 0x800a4a <petnula>
    67d8:	ee cf       	rjmp	.-36     	; 0x67b6 <a2d_complete(unsigned char, unsigned int)+0xc>
    67da:	84 30       	cpi	r24, 0x04	; 4
    67dc:	29 f4       	brne	.+10     	; 0x67e8 <a2d_complete(unsigned char, unsigned int)+0x3e>
    67de:	70 93 49 0a 	sts	0x0A49, r23	; 0x800a49 <dvanact+0x1>
    67e2:	60 93 48 0a 	sts	0x0A48, r22	; 0x800a48 <dvanact>
    67e6:	e7 cf       	rjmp	.-50     	; 0x67b6 <a2d_complete(unsigned char, unsigned int)+0xc>
    67e8:	87 30       	cpi	r24, 0x07	; 7
    67ea:	29 f7       	brne	.-54     	; 0x67b6 <a2d_complete(unsigned char, unsigned int)+0xc>
    67ec:	70 93 45 0a 	sts	0x0A45, r23	; 0x800a45 <light_curr+0x1>
    67f0:	60 93 44 0a 	sts	0x0A44, r22	; 0x800a44 <light_curr>
    67f4:	e0 cf       	rjmp	.-64     	; 0x67b6 <a2d_complete(unsigned char, unsigned int)+0xc>

000067f6 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_incjjh():
    67f6:	fc 01       	movw	r30, r24
    67f8:	e7 5e       	subi	r30, 0xE7	; 231
    67fa:	f5 4f       	sbci	r31, 0xF5	; 245
    67fc:	90 81       	ld	r25, Z
    67fe:	20 91 18 0a 	lds	r18, 0x0A18	; 0x800a18 <menu_slider_data_max>
    6802:	80 91 16 0a 	lds	r24, 0x0A16	; 0x800a16 <menu_slider_data_max_element>
    6806:	28 1b       	sub	r18, r24
    6808:	33 0b       	sbc	r19, r19
    680a:	92 17       	cp	r25, r18
    680c:	13 06       	cpc	r1, r19
    680e:	14 f4       	brge	.+4      	; 0x6814 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)+0x1e>
    6810:	9f 5f       	subi	r25, 0xFF	; 255
    6812:	90 83       	st	Z, r25
    6814:	08 95       	ret

00006816 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_decjjh():
    6816:	fc 01       	movw	r30, r24
    6818:	e7 5e       	subi	r30, 0xE7	; 231
    681a:	f5 4f       	sbci	r31, 0xF5	; 245
    681c:	90 81       	ld	r25, Z
    681e:	80 91 17 0a 	lds	r24, 0x0A17	; 0x800a17 <menu_slider_data_min>
    6822:	89 17       	cp	r24, r25
    6824:	10 f4       	brcc	.+4      	; 0x682a <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)+0x14>
    6826:	91 50       	subi	r25, 0x01	; 1
    6828:	90 83       	st	Z, r25
    682a:	08 95       	ret

0000682c <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
    682c:	8a e0       	ldi	r24, 0x0A	; 10
    682e:	08 95       	ret

00006830 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
    6830:	e2 e5       	ldi	r30, 0x52	; 82
    6832:	ff e0       	ldi	r31, 0x0F	; 15
    6834:	80 e0       	ldi	r24, 0x00	; 0
    6836:	91 85       	ldd	r25, Z+9	; 0x09
    6838:	91 30       	cpi	r25, 0x01	; 1
    683a:	09 f4       	brne	.+2      	; 0x683e <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    683c:	8f 5f       	subi	r24, 0xFF	; 255
    683e:	3b 96       	adiw	r30, 0x0b	; 11
    6840:	9f e0       	ldi	r25, 0x0F	; 15
    6842:	e4 39       	cpi	r30, 0x94	; 148
    6844:	f9 07       	cpc	r31, r25
    6846:	b9 f7       	brne	.-18     	; 0x6836 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
    6848:	08 95       	ret

0000684a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z38button_get_show_default_temp_max_itemsjjh():
    684a:	00 97       	sbiw	r24, 0x00	; 0
    684c:	31 f4       	brne	.+12     	; 0x685a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x10>
    684e:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <use_tds>
    6852:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <use_rtds>
    6856:	89 0f       	add	r24, r25
    6858:	08 95       	ret
    685a:	01 97       	sbiw	r24, 0x01	; 1
    685c:	09 f0       	breq	.+2      	; 0x6860 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x16>
    685e:	08 95       	ret
    6860:	80 e1       	ldi	r24, 0x10	; 16
    6862:	08 95       	ret

00006864 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z35button_get_show_default_temp_activejjh():
    6864:	81 e0       	ldi	r24, 0x01	; 1
    6866:	90 91 2d 0a 	lds	r25, 0x0A2D	; 0x800a2d <default_show_temp>
    686a:	94 13       	cpse	r25, r20
    686c:	80 e0       	ldi	r24, 0x00	; 0
    686e:	08 95       	ret

00006870 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z25display_element_rectanglejjjjhhPc():
    6870:	0f 93       	push	r16
    6872:	1f 93       	push	r17
    6874:	8b 01       	movw	r16, r22
    6876:	02 0f       	add	r16, r18
    6878:	13 1f       	adc	r17, r19
    687a:	9c 01       	movw	r18, r24
    687c:	24 0f       	add	r18, r20
    687e:	35 1f       	adc	r19, r21
    6880:	ab 01       	movw	r20, r22
    6882:	bc 01       	movw	r22, r24
    6884:	85 ea       	ldi	r24, 0xA5	; 165
    6886:	9b e0       	ldi	r25, 0x0B	; 11
    6888:	0e 94 4b 93 	call	0x12696	; 0x12696 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    688c:	1f 91       	pop	r17
    688e:	0f 91       	pop	r16
    6890:	08 95       	ret

00006892 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z31display_element_vertical_sliderjjjjhhPc():
    6892:	3f 92       	push	r3
    6894:	4f 92       	push	r4
    6896:	5f 92       	push	r5
    6898:	6f 92       	push	r6
    689a:	7f 92       	push	r7
    689c:	8f 92       	push	r8
    689e:	9f 92       	push	r9
    68a0:	af 92       	push	r10
    68a2:	bf 92       	push	r11
    68a4:	cf 92       	push	r12
    68a6:	df 92       	push	r13
    68a8:	ef 92       	push	r14
    68aa:	ff 92       	push	r15
    68ac:	0f 93       	push	r16
    68ae:	1f 93       	push	r17
    68b0:	cf 93       	push	r28
    68b2:	df 93       	push	r29
    68b4:	3c 01       	movw	r6, r24
    68b6:	6b 01       	movw	r12, r22
    68b8:	ea 01       	movw	r28, r20
    68ba:	29 01       	movw	r4, r18
    68bc:	30 2e       	mov	r3, r16
    68be:	70 e0       	ldi	r23, 0x00	; 0
    68c0:	60 e0       	ldi	r22, 0x00	; 0
    68c2:	85 ea       	ldi	r24, 0xA5	; 165
    68c4:	9b e0       	ldi	r25, 0x0B	; 11
    68c6:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    68ca:	f1 2c       	mov	r15, r1
    68cc:	e1 2c       	mov	r14, r1
    68ce:	46 01       	movw	r8, r12
    68d0:	84 0c       	add	r8, r4
    68d2:	95 1c       	adc	r9, r5
    68d4:	53 01       	movw	r10, r6
    68d6:	ac 0e       	add	r10, r28
    68d8:	bd 1e       	adc	r11, r29
    68da:	84 01       	movw	r16, r8
    68dc:	0e 19       	sub	r16, r14
    68de:	1f 09       	sbc	r17, r15
    68e0:	95 01       	movw	r18, r10
    68e2:	2e 19       	sub	r18, r14
    68e4:	3f 09       	sbc	r19, r15
    68e6:	a7 01       	movw	r20, r14
    68e8:	4c 0d       	add	r20, r12
    68ea:	5d 1d       	adc	r21, r13
    68ec:	b7 01       	movw	r22, r14
    68ee:	66 0d       	add	r22, r6
    68f0:	77 1d       	adc	r23, r7
    68f2:	85 ea       	ldi	r24, 0xA5	; 165
    68f4:	9b e0       	ldi	r25, 0x0B	; 11
    68f6:	0e 94 4b 93 	call	0x12696	; 0x12696 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    68fa:	8f ef       	ldi	r24, 0xFF	; 255
    68fc:	e8 1a       	sub	r14, r24
    68fe:	f8 0a       	sbc	r15, r24
    6900:	83 e0       	ldi	r24, 0x03	; 3
    6902:	e8 16       	cp	r14, r24
    6904:	f1 04       	cpc	r15, r1
    6906:	49 f7       	brne	.-46     	; 0x68da <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x48>
    6908:	6f ef       	ldi	r22, 0xFF	; 255
    690a:	7f ef       	ldi	r23, 0xFF	; 255
    690c:	85 ea       	ldi	r24, 0xA5	; 165
    690e:	9b e0       	ldi	r25, 0x0B	; 11
    6910:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    6914:	23 97       	sbiw	r28, 0x03	; 3
    6916:	c6 0d       	add	r28, r6
    6918:	d7 1d       	adc	r29, r7
    691a:	83 e0       	ldi	r24, 0x03	; 3
    691c:	68 0e       	add	r6, r24
    691e:	71 1c       	adc	r7, r1
    6920:	82 01       	movw	r16, r4
    6922:	03 50       	subi	r16, 0x03	; 3
    6924:	11 09       	sbc	r17, r1
    6926:	0c 0d       	add	r16, r12
    6928:	1d 1d       	adc	r17, r13
    692a:	a6 01       	movw	r20, r12
    692c:	4d 5f       	subi	r20, 0xFD	; 253
    692e:	5f 4f       	sbci	r21, 0xFF	; 255
    6930:	9e 01       	movw	r18, r28
    6932:	b3 01       	movw	r22, r6
    6934:	85 ea       	ldi	r24, 0xA5	; 165
    6936:	9b e0       	ldi	r25, 0x0B	; 11
    6938:	0e 94 c4 92 	call	0x12588	; 0x12588 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    693c:	60 91 18 0a 	lds	r22, 0x0A18	; 0x800a18 <menu_slider_data_max>
    6940:	80 91 16 0a 	lds	r24, 0x0A16	; 0x800a16 <menu_slider_data_max_element>
    6944:	68 1b       	sub	r22, r24
    6946:	77 0b       	sbc	r23, r23
    6948:	6f 5f       	subi	r22, 0xFF	; 255
    694a:	7f 4f       	sbci	r23, 0xFF	; 255
    694c:	c2 01       	movw	r24, r4
    694e:	0e 94 59 d8 	call	0x1b0b2	; 0x1b0b2 <__udivmodhi4>
    6952:	e3 2d       	mov	r30, r3
    6954:	f0 e0       	ldi	r31, 0x00	; 0
    6956:	e7 5e       	subi	r30, 0xE7	; 231
    6958:	f5 4f       	sbci	r31, 0xF5	; 245
    695a:	f0 80       	ld	r15, Z
    695c:	f6 9e       	mul	r15, r22
    695e:	f0 2c       	mov	r15, r0
    6960:	11 24       	eor	r1, r1
    6962:	6a e9       	ldi	r22, 0x9A	; 154
    6964:	76 ed       	ldi	r23, 0xD6	; 214
    6966:	85 ea       	ldi	r24, 0xA5	; 165
    6968:	9b e0       	ldi	r25, 0x0B	; 11
    696a:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    696e:	cf 0c       	add	r12, r15
    6970:	d1 1c       	adc	r13, r1
    6972:	86 01       	movw	r16, r12
    6974:	06 5f       	subi	r16, 0xF6	; 246
    6976:	1f 4f       	sbci	r17, 0xFF	; 255
    6978:	a6 01       	movw	r20, r12
    697a:	4b 5f       	subi	r20, 0xFB	; 251
    697c:	5f 4f       	sbci	r21, 0xFF	; 255
    697e:	9e 01       	movw	r18, r28
    6980:	b3 01       	movw	r22, r6
    6982:	85 ea       	ldi	r24, 0xA5	; 165
    6984:	9b e0       	ldi	r25, 0x0B	; 11
    6986:	0e 94 c4 92 	call	0x12588	; 0x12588 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    698a:	df 91       	pop	r29
    698c:	cf 91       	pop	r28
    698e:	1f 91       	pop	r17
    6990:	0f 91       	pop	r16
    6992:	ff 90       	pop	r15
    6994:	ef 90       	pop	r14
    6996:	df 90       	pop	r13
    6998:	cf 90       	pop	r12
    699a:	bf 90       	pop	r11
    699c:	af 90       	pop	r10
    699e:	9f 90       	pop	r9
    69a0:	8f 90       	pop	r8
    69a2:	7f 90       	pop	r7
    69a4:	6f 90       	pop	r6
    69a6:	5f 90       	pop	r5
    69a8:	4f 90       	pop	r4
    69aa:	3f 90       	pop	r3
    69ac:	08 95       	ret

000069ae <helper_thermostat_set_mezni(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_meznijfh():
    69ae:	cf 93       	push	r28
    69b0:	c8 2f       	mov	r28, r24
    69b2:	cb 01       	movw	r24, r22
    69b4:	ba 01       	movw	r22, r20
    69b6:	20 e0       	ldi	r18, 0x00	; 0
    69b8:	30 e0       	ldi	r19, 0x00	; 0
    69ba:	40 e2       	ldi	r20, 0x20	; 32
    69bc:	51 e4       	ldi	r21, 0x41	; 65
    69be:	0e 94 d0 d7 	call	0x1afa0	; 0x1afa0 <__mulsf3>
    69c2:	0e 94 e3 d6 	call	0x1adc6	; 0x1adc6 <__fixsfsi>
    69c6:	8c 2f       	mov	r24, r28
    69c8:	cf 91       	pop	r28
    69ca:	0c 94 4e 8e 	jmp	0x11c9c	; 0x11c9c <thermostat_ring_set_mezni(unsigned char, int)>

000069ce <helper_thermostat_set_pid_p(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_pjfh():
    69ce:	0c 94 a1 8f 	jmp	0x11f42	; 0x11f42 <thermostat_ring_pid_set_kp(unsigned char, float)>

000069d2 <helper_thermostat_set_pid_i(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_ijfh():
    69d2:	0c 94 b4 8f 	jmp	0x11f68	; 0x11f68 <thermostat_ring_pid_set_ki(unsigned char, float)>

000069d6 <helper_thermostat_set_pid_d(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_djfh():
    69d6:	0c 94 c7 8f 	jmp	0x11f8e	; 0x11f8e <thermostat_ring_pid_set_kd(unsigned char, float)>

000069da <helper_thermostat_set_pid_time(unsigned int, float, unsigned char)>:
_Z30helper_thermostat_set_pid_timejfh():
    69da:	62 2f       	mov	r22, r18
    69dc:	0c 94 da 8f 	jmp	0x11fb4	; 0x11fb4 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>

000069e0 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>:
_Z22preload_regulator_menujjh():
    69e0:	1f 93       	push	r17
    69e2:	cf 93       	push	r28
    69e4:	df 93       	push	r29
    69e6:	10 91 2e 0a 	lds	r17, 0x0A2E	; 0x800a2e <default_ring>
    69ea:	81 2f       	mov	r24, r17
    69ec:	0e 94 31 8e 	call	0x11c62	; 0x11c62 <thermostat_ring_get_mezni(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    69f0:	c2 ec       	ldi	r28, 0xC2	; 194
    69f2:	d9 e0       	ldi	r29, 0x09	; 9
_Z22preload_regulator_menujjh():
    69f4:	bc 01       	movw	r22, r24
    69f6:	99 0f       	add	r25, r25
    69f8:	88 0b       	sbc	r24, r24
    69fa:	99 0b       	sbc	r25, r25
    69fc:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
    6a00:	20 e0       	ldi	r18, 0x00	; 0
    6a02:	30 e0       	ldi	r19, 0x00	; 0
    6a04:	40 e2       	ldi	r20, 0x20	; 32
    6a06:	51 e4       	ldi	r21, 0x41	; 65
    6a08:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    6a0c:	68 83       	st	Y, r22
    6a0e:	79 83       	std	Y+1, r23	; 0x01
    6a10:	8a 83       	std	Y+2, r24	; 0x02
    6a12:	9b 83       	std	Y+3, r25	; 0x03
    6a14:	80 e0       	ldi	r24, 0x00	; 0
    6a16:	90 e0       	ldi	r25, 0x00	; 0
    6a18:	a0 e8       	ldi	r26, 0x80	; 128
    6a1a:	b1 e4       	ldi	r27, 0x41	; 65
    6a1c:	88 87       	std	Y+8, r24	; 0x08
    6a1e:	99 87       	std	Y+9, r25	; 0x09
    6a20:	aa 87       	std	Y+10, r26	; 0x0a
    6a22:	bb 87       	std	Y+11, r27	; 0x0b
    6a24:	80 e0       	ldi	r24, 0x00	; 0
    6a26:	90 e0       	ldi	r25, 0x00	; 0
    6a28:	a0 e0       	ldi	r26, 0x00	; 0
    6a2a:	b2 e4       	ldi	r27, 0x42	; 66
    6a2c:	8c 83       	std	Y+4, r24	; 0x04
    6a2e:	9d 83       	std	Y+5, r25	; 0x05
    6a30:	ae 83       	std	Y+6, r26	; 0x06
    6a32:	bf 83       	std	Y+7, r27	; 0x07
    6a34:	80 e0       	ldi	r24, 0x00	; 0
    6a36:	90 e0       	ldi	r25, 0x00	; 0
    6a38:	a0 e0       	ldi	r26, 0x00	; 0
    6a3a:	bf e3       	ldi	r27, 0x3F	; 63
    6a3c:	8e 87       	std	Y+14, r24	; 0x0e
    6a3e:	9f 87       	std	Y+15, r25	; 0x0f
    6a40:	a8 8b       	std	Y+16, r26	; 0x10
    6a42:	b9 8b       	std	Y+17, r27	; 0x11
    6a44:	1d 86       	std	Y+13, r1	; 0x0d
    6a46:	1a 8b       	std	Y+18, r17	; 0x12
    6a48:	81 e0       	ldi	r24, 0x01	; 1
    6a4a:	8c 87       	std	Y+12, r24	; 0x0c
    6a4c:	87 ed       	ldi	r24, 0xD7	; 215
    6a4e:	94 e3       	ldi	r25, 0x34	; 52
    6a50:	9c 8b       	std	Y+20, r25	; 0x14
    6a52:	8b 8b       	std	Y+19, r24	; 0x13
_Z22preload_regulator_menujjh():
    6a54:	df 91       	pop	r29
    6a56:	cf 91       	pop	r28
    6a58:	1f 91       	pop	r17
    6a5a:	08 95       	ret

00006a5c <preload_pid_menu(unsigned int, unsigned int, unsigned char)>:
_Z16preload_pid_menujjh():
    6a5c:	4f 92       	push	r4
    6a5e:	5f 92       	push	r5
    6a60:	6f 92       	push	r6
    6a62:	7f 92       	push	r7
    6a64:	8f 92       	push	r8
    6a66:	9f 92       	push	r9
    6a68:	af 92       	push	r10
    6a6a:	bf 92       	push	r11
    6a6c:	cf 92       	push	r12
    6a6e:	df 92       	push	r13
    6a70:	ef 92       	push	r14
    6a72:	ff 92       	push	r15
    6a74:	0f 93       	push	r16
    6a76:	1f 93       	push	r17
    6a78:	cf 93       	push	r28
    6a7a:	df 93       	push	r29
    6a7c:	10 91 2e 0a 	lds	r17, 0x0A2E	; 0x800a2e <default_ring>
    6a80:	81 2f       	mov	r24, r17
    6a82:	0e 94 6b 8d 	call	0x11ad6	; 0x11ad6 <thermostat_get_pid_p(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    6a86:	c2 ec       	ldi	r28, 0xC2	; 194
    6a88:	d9 e0       	ldi	r29, 0x09	; 9
    6a8a:	68 83       	st	Y, r22
    6a8c:	79 83       	std	Y+1, r23	; 0x01
    6a8e:	8a 83       	std	Y+2, r24	; 0x02
    6a90:	9b 83       	std	Y+3, r25	; 0x03
    6a92:	41 2c       	mov	r4, r1
    6a94:	51 2c       	mov	r5, r1
    6a96:	80 e2       	ldi	r24, 0x20	; 32
    6a98:	68 2e       	mov	r6, r24
    6a9a:	81 ec       	ldi	r24, 0xC1	; 193
    6a9c:	78 2e       	mov	r7, r24
    6a9e:	48 86       	std	Y+8, r4	; 0x08
    6aa0:	59 86       	std	Y+9, r5	; 0x09
    6aa2:	6a 86       	std	Y+10, r6	; 0x0a
    6aa4:	7b 86       	std	Y+11, r7	; 0x0b
    6aa6:	c1 2c       	mov	r12, r1
    6aa8:	d1 2c       	mov	r13, r1
    6aaa:	90 e2       	ldi	r25, 0x20	; 32
    6aac:	e9 2e       	mov	r14, r25
    6aae:	91 e4       	ldi	r25, 0x41	; 65
    6ab0:	f9 2e       	mov	r15, r25
    6ab2:	cc 82       	std	Y+4, r12	; 0x04
    6ab4:	dd 82       	std	Y+5, r13	; 0x05
    6ab6:	ee 82       	std	Y+6, r14	; 0x06
    6ab8:	ff 82       	std	Y+7, r15	; 0x07
    6aba:	2d ec       	ldi	r18, 0xCD	; 205
    6abc:	82 2e       	mov	r8, r18
    6abe:	2c ec       	ldi	r18, 0xCC	; 204
    6ac0:	92 2e       	mov	r9, r18
    6ac2:	a9 2c       	mov	r10, r9
    6ac4:	2d e3       	ldi	r18, 0x3D	; 61
    6ac6:	b2 2e       	mov	r11, r18
    6ac8:	8e 86       	std	Y+14, r8	; 0x0e
    6aca:	9f 86       	std	Y+15, r9	; 0x0f
    6acc:	a8 8a       	std	Y+16, r10	; 0x10
    6ace:	b9 8a       	std	Y+17, r11	; 0x11
    6ad0:	1d 86       	std	Y+13, r1	; 0x0d
    6ad2:	1a 8b       	std	Y+18, r17	; 0x12
    6ad4:	11 e0       	ldi	r17, 0x01	; 1
    6ad6:	1c 87       	std	Y+12, r17	; 0x0c
    6ad8:	87 ee       	ldi	r24, 0xE7	; 231
    6ada:	94 e3       	ldi	r25, 0x34	; 52
    6adc:	9c 8b       	std	Y+20, r25	; 0x14
    6ade:	8b 8b       	std	Y+19, r24	; 0x13
_Z16preload_pid_menujjh():
    6ae0:	00 91 2e 0a 	lds	r16, 0x0A2E	; 0x800a2e <default_ring>
    6ae4:	80 2f       	mov	r24, r16
    6ae6:	0e 94 9a 8d 	call	0x11b34	; 0x11b34 <thermostat_get_pid_i(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    6aea:	6d 8b       	std	Y+21, r22	; 0x15
    6aec:	7e 8b       	std	Y+22, r23	; 0x16
    6aee:	8f 8b       	std	Y+23, r24	; 0x17
    6af0:	98 8f       	std	Y+24, r25	; 0x18
    6af2:	4d 8e       	std	Y+29, r4	; 0x1d
    6af4:	5e 8e       	std	Y+30, r5	; 0x1e
    6af6:	6f 8e       	std	Y+31, r6	; 0x1f
    6af8:	78 a2       	std	Y+32, r7	; 0x20
    6afa:	c9 8e       	std	Y+25, r12	; 0x19
    6afc:	da 8e       	std	Y+26, r13	; 0x1a
    6afe:	eb 8e       	std	Y+27, r14	; 0x1b
    6b00:	fc 8e       	std	Y+28, r15	; 0x1c
    6b02:	8b a2       	std	Y+35, r8	; 0x23
    6b04:	9c a2       	std	Y+36, r9	; 0x24
    6b06:	ad a2       	std	Y+37, r10	; 0x25
    6b08:	be a2       	std	Y+38, r11	; 0x26
    6b0a:	1a a2       	std	Y+34, r1	; 0x22
    6b0c:	0f a3       	std	Y+39, r16	; 0x27
    6b0e:	19 a3       	std	Y+33, r17	; 0x21
    6b10:	89 ee       	ldi	r24, 0xE9	; 233
    6b12:	94 e3       	ldi	r25, 0x34	; 52
    6b14:	99 a7       	std	Y+41, r25	; 0x29
    6b16:	88 a7       	std	Y+40, r24	; 0x28
_Z16preload_pid_menujjh():
    6b18:	00 91 2e 0a 	lds	r16, 0x0A2E	; 0x800a2e <default_ring>
    6b1c:	80 2f       	mov	r24, r16
    6b1e:	0e 94 a5 8d 	call	0x11b4a	; 0x11b4a <thermostat_get_pid_d(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    6b22:	6a a7       	std	Y+42, r22	; 0x2a
    6b24:	7b a7       	std	Y+43, r23	; 0x2b
    6b26:	8c a7       	std	Y+44, r24	; 0x2c
    6b28:	9d a7       	std	Y+45, r25	; 0x2d
    6b2a:	4a aa       	std	Y+50, r4	; 0x32
    6b2c:	5b aa       	std	Y+51, r5	; 0x33
    6b2e:	6c aa       	std	Y+52, r6	; 0x34
    6b30:	7d aa       	std	Y+53, r7	; 0x35
    6b32:	ce a6       	std	Y+46, r12	; 0x2e
    6b34:	df a6       	std	Y+47, r13	; 0x2f
    6b36:	e8 aa       	std	Y+48, r14	; 0x30
    6b38:	f9 aa       	std	Y+49, r15	; 0x31
    6b3a:	88 ae       	std	Y+56, r8	; 0x38
    6b3c:	99 ae       	std	Y+57, r9	; 0x39
    6b3e:	aa ae       	std	Y+58, r10	; 0x3a
    6b40:	bb ae       	std	Y+59, r11	; 0x3b
    6b42:	1f aa       	std	Y+55, r1	; 0x37
    6b44:	0c af       	std	Y+60, r16	; 0x3c
    6b46:	1e ab       	std	Y+54, r17	; 0x36
    6b48:	8b ee       	ldi	r24, 0xEB	; 235
    6b4a:	94 e3       	ldi	r25, 0x34	; 52
    6b4c:	9e af       	std	Y+62, r25	; 0x3e
    6b4e:	8d af       	std	Y+61, r24	; 0x3d
_Z16preload_pid_menujjh():
    6b50:	c0 91 2e 0a 	lds	r28, 0x0A2E	; 0x800a2e <default_ring>
    6b54:	8c 2f       	mov	r24, r28
    6b56:	0e 94 b0 8d 	call	0x11b60	; 0x11b60 <thermostat_get_pid_time(unsigned char)>
    6b5a:	68 2f       	mov	r22, r24
    6b5c:	70 e0       	ldi	r23, 0x00	; 0
    6b5e:	90 e0       	ldi	r25, 0x00	; 0
    6b60:	80 e0       	ldi	r24, 0x00	; 0
    6b62:	0e 94 19 d7 	call	0x1ae32	; 0x1ae32 <__floatunsisf>
    6b66:	60 93 01 0a 	sts	0x0A01, r22	; 0x800a01 <menu_dialog_variable+0x3f>
    6b6a:	70 93 02 0a 	sts	0x0A02, r23	; 0x800a02 <menu_dialog_variable+0x40>
    6b6e:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <menu_dialog_variable+0x41>
    6b72:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <menu_dialog_variable+0x42>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    6b76:	c0 92 09 0a 	sts	0x0A09, r12	; 0x800a09 <menu_dialog_variable+0x47>
    6b7a:	d0 92 0a 0a 	sts	0x0A0A, r13	; 0x800a0a <menu_dialog_variable+0x48>
    6b7e:	e0 92 0b 0a 	sts	0x0A0B, r14	; 0x800a0b <menu_dialog_variable+0x49>
    6b82:	f0 92 0c 0a 	sts	0x0A0C, r15	; 0x800a0c <menu_dialog_variable+0x4a>
    6b86:	80 e0       	ldi	r24, 0x00	; 0
    6b88:	90 e0       	ldi	r25, 0x00	; 0
    6b8a:	ae e7       	ldi	r26, 0x7E	; 126
    6b8c:	b3 e4       	ldi	r27, 0x43	; 67
    6b8e:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <menu_dialog_variable+0x43>
    6b92:	90 93 06 0a 	sts	0x0A06, r25	; 0x800a06 <menu_dialog_variable+0x44>
    6b96:	a0 93 07 0a 	sts	0x0A07, r26	; 0x800a07 <menu_dialog_variable+0x45>
    6b9a:	b0 93 08 0a 	sts	0x0A08, r27	; 0x800a08 <menu_dialog_variable+0x46>
    6b9e:	80 e0       	ldi	r24, 0x00	; 0
    6ba0:	90 e0       	ldi	r25, 0x00	; 0
    6ba2:	a0 e0       	ldi	r26, 0x00	; 0
    6ba4:	b0 e4       	ldi	r27, 0x40	; 64
    6ba6:	80 93 0f 0a 	sts	0x0A0F, r24	; 0x800a0f <menu_dialog_variable+0x4d>
    6baa:	90 93 10 0a 	sts	0x0A10, r25	; 0x800a10 <menu_dialog_variable+0x4e>
    6bae:	a0 93 11 0a 	sts	0x0A11, r26	; 0x800a11 <menu_dialog_variable+0x4f>
    6bb2:	b0 93 12 0a 	sts	0x0A12, r27	; 0x800a12 <menu_dialog_variable+0x50>
    6bb6:	10 93 0e 0a 	sts	0x0A0E, r17	; 0x800a0e <menu_dialog_variable+0x4c>
    6bba:	c0 93 13 0a 	sts	0x0A13, r28	; 0x800a13 <menu_dialog_variable+0x51>
    6bbe:	10 93 0d 0a 	sts	0x0A0D, r17	; 0x800a0d <menu_dialog_variable+0x4b>
    6bc2:	8d ee       	ldi	r24, 0xED	; 237
    6bc4:	94 e3       	ldi	r25, 0x34	; 52
    6bc6:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <menu_dialog_variable+0x53>
    6bca:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <menu_dialog_variable+0x52>
_Z16preload_pid_menujjh():
    6bce:	df 91       	pop	r29
    6bd0:	cf 91       	pop	r28
    6bd2:	1f 91       	pop	r17
    6bd4:	0f 91       	pop	r16
    6bd6:	ff 90       	pop	r15
    6bd8:	ef 90       	pop	r14
    6bda:	df 90       	pop	r13
    6bdc:	cf 90       	pop	r12
    6bde:	bf 90       	pop	r11
    6be0:	af 90       	pop	r10
    6be2:	9f 90       	pop	r9
    6be4:	8f 90       	pop	r8
    6be6:	7f 90       	pop	r7
    6be8:	6f 90       	pop	r6
    6bea:	5f 90       	pop	r5
    6bec:	4f 90       	pop	r4
    6bee:	08 95       	ret

00006bf0 <button_click_ring_term_set_pid_default(unsigned int, unsigned int, unsigned char)>:
_Z38button_click_ring_term_set_pid_defaultjjh():
    6bf0:	40 e0       	ldi	r20, 0x00	; 0
    6bf2:	50 e0       	ldi	r21, 0x00	; 0
    6bf4:	60 e8       	ldi	r22, 0x80	; 128
    6bf6:	7f e3       	ldi	r23, 0x3F	; 63
    6bf8:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6bfc:	0e 94 a1 8f 	call	0x11f42	; 0x11f42 <thermostat_ring_pid_set_kp(unsigned char, float)>
    6c00:	40 e0       	ldi	r20, 0x00	; 0
    6c02:	50 e0       	ldi	r21, 0x00	; 0
    6c04:	60 e0       	ldi	r22, 0x00	; 0
    6c06:	7f e3       	ldi	r23, 0x3F	; 63
    6c08:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6c0c:	0e 94 b4 8f 	call	0x11f68	; 0x11f68 <thermostat_ring_pid_set_ki(unsigned char, float)>
    6c10:	40 e0       	ldi	r20, 0x00	; 0
    6c12:	50 e0       	ldi	r21, 0x00	; 0
    6c14:	60 e8       	ldi	r22, 0x80	; 128
    6c16:	7f e3       	ldi	r23, 0x3F	; 63
    6c18:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6c1c:	0e 94 c7 8f 	call	0x11f8e	; 0x11f8e <thermostat_ring_pid_set_kd(unsigned char, float)>
    6c20:	6c e3       	ldi	r22, 0x3C	; 60
    6c22:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6c26:	0e 94 da 8f 	call	0x11fb4	; 0x11fb4 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
    6c2a:	40 e0       	ldi	r20, 0x00	; 0
    6c2c:	70 e0       	ldi	r23, 0x00	; 0
    6c2e:	60 e0       	ldi	r22, 0x00	; 0
    6c30:	90 e0       	ldi	r25, 0x00	; 0
    6c32:	80 e0       	ldi	r24, 0x00	; 0
    6c34:	0c 94 2e 35 	jmp	0x6a5c	; 0x6a5c <preload_pid_menu(unsigned int, unsigned int, unsigned char)>

00006c38 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>:
_Z35display_function_set_variable_minusjjh():
    6c38:	cf 92       	push	r12
    6c3a:	df 92       	push	r13
    6c3c:	ef 92       	push	r14
    6c3e:	ff 92       	push	r15
    6c40:	0f 93       	push	r16
    6c42:	1f 93       	push	r17
    6c44:	cf 93       	push	r28
    6c46:	df 93       	push	r29
    6c48:	25 e1       	ldi	r18, 0x15	; 21
    6c4a:	28 9f       	mul	r18, r24
    6c4c:	e0 01       	movw	r28, r0
    6c4e:	29 9f       	mul	r18, r25
    6c50:	d0 0d       	add	r29, r0
    6c52:	11 24       	eor	r1, r1
    6c54:	ce 53       	subi	r28, 0x3E	; 62
    6c56:	d6 4f       	sbci	r29, 0xF6	; 246
    6c58:	2e 85       	ldd	r18, Y+14	; 0x0e
    6c5a:	3f 85       	ldd	r19, Y+15	; 0x0f
    6c5c:	48 89       	ldd	r20, Y+16	; 0x10
    6c5e:	59 89       	ldd	r21, Y+17	; 0x11
    6c60:	68 81       	ld	r22, Y
    6c62:	79 81       	ldd	r23, Y+1	; 0x01
    6c64:	8a 81       	ldd	r24, Y+2	; 0x02
    6c66:	9b 81       	ldd	r25, Y+3	; 0x03
    6c68:	0e 94 ff d5 	call	0x1abfe	; 0x1abfe <__subsf3>
    6c6c:	6b 01       	movw	r12, r22
    6c6e:	7c 01       	movw	r14, r24
    6c70:	28 85       	ldd	r18, Y+8	; 0x08
    6c72:	39 85       	ldd	r19, Y+9	; 0x09
    6c74:	4a 85       	ldd	r20, Y+10	; 0x0a
    6c76:	5b 85       	ldd	r21, Y+11	; 0x0b
    6c78:	0e 94 cb d7 	call	0x1af96	; 0x1af96 <__gesf2>
    6c7c:	87 fd       	sbrc	r24, 7
    6c7e:	1f c0       	rjmp	.+62     	; 0x6cbe <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x86>
    6c80:	c8 82       	st	Y, r12
    6c82:	d9 82       	std	Y+1, r13	; 0x01
    6c84:	ea 82       	std	Y+2, r14	; 0x02
    6c86:	fb 82       	std	Y+3, r15	; 0x03
    6c88:	8c 85       	ldd	r24, Y+12	; 0x0c
    6c8a:	81 30       	cpi	r24, 0x01	; 1
    6c8c:	c1 f4       	brne	.+48     	; 0x6cbe <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x86>
    6c8e:	0b 89       	ldd	r16, Y+19	; 0x13
    6c90:	1c 89       	ldd	r17, Y+20	; 0x14
    6c92:	c7 01       	movw	r24, r14
    6c94:	b6 01       	movw	r22, r12
    6c96:	0e 94 81 b8 	call	0x17102	; 0x17102 <float_to_int(float)>
    6c9a:	48 81       	ld	r20, Y
    6c9c:	59 81       	ldd	r21, Y+1	; 0x01
    6c9e:	6a 81       	ldd	r22, Y+2	; 0x02
    6ca0:	7b 81       	ldd	r23, Y+3	; 0x03
    6ca2:	9a 89       	ldd	r25, Y+18	; 0x12
    6ca4:	28 2f       	mov	r18, r24
    6ca6:	89 2f       	mov	r24, r25
    6ca8:	90 e0       	ldi	r25, 0x00	; 0
    6caa:	f8 01       	movw	r30, r16
    6cac:	df 91       	pop	r29
    6cae:	cf 91       	pop	r28
    6cb0:	1f 91       	pop	r17
    6cb2:	0f 91       	pop	r16
    6cb4:	ff 90       	pop	r15
    6cb6:	ef 90       	pop	r14
    6cb8:	df 90       	pop	r13
    6cba:	cf 90       	pop	r12
    6cbc:	19 94       	eijmp
    6cbe:	df 91       	pop	r29
    6cc0:	cf 91       	pop	r28
    6cc2:	1f 91       	pop	r17
    6cc4:	0f 91       	pop	r16
    6cc6:	ff 90       	pop	r15
    6cc8:	ef 90       	pop	r14
    6cca:	df 90       	pop	r13
    6ccc:	cf 90       	pop	r12
    6cce:	08 95       	ret

00006cd0 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>:
_Z34display_function_set_variable_plusjjh():
    6cd0:	cf 92       	push	r12
    6cd2:	df 92       	push	r13
    6cd4:	ef 92       	push	r14
    6cd6:	ff 92       	push	r15
    6cd8:	0f 93       	push	r16
    6cda:	1f 93       	push	r17
    6cdc:	cf 93       	push	r28
    6cde:	df 93       	push	r29
    6ce0:	25 e1       	ldi	r18, 0x15	; 21
    6ce2:	28 9f       	mul	r18, r24
    6ce4:	e0 01       	movw	r28, r0
    6ce6:	29 9f       	mul	r18, r25
    6ce8:	d0 0d       	add	r29, r0
    6cea:	11 24       	eor	r1, r1
    6cec:	ce 53       	subi	r28, 0x3E	; 62
    6cee:	d6 4f       	sbci	r29, 0xF6	; 246
    6cf0:	2e 85       	ldd	r18, Y+14	; 0x0e
    6cf2:	3f 85       	ldd	r19, Y+15	; 0x0f
    6cf4:	48 89       	ldd	r20, Y+16	; 0x10
    6cf6:	59 89       	ldd	r21, Y+17	; 0x11
    6cf8:	68 81       	ld	r22, Y
    6cfa:	79 81       	ldd	r23, Y+1	; 0x01
    6cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    6cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    6d00:	0e 94 00 d6 	call	0x1ac00	; 0x1ac00 <__addsf3>
    6d04:	6b 01       	movw	r12, r22
    6d06:	7c 01       	movw	r14, r24
    6d08:	2c 81       	ldd	r18, Y+4	; 0x04
    6d0a:	3d 81       	ldd	r19, Y+5	; 0x05
    6d0c:	4e 81       	ldd	r20, Y+6	; 0x06
    6d0e:	5f 81       	ldd	r21, Y+7	; 0x07
    6d10:	0e 94 6c d6 	call	0x1acd8	; 0x1acd8 <__cmpsf2>
    6d14:	18 16       	cp	r1, r24
    6d16:	fc f0       	brlt	.+62     	; 0x6d56 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x86>
    6d18:	c8 82       	st	Y, r12
    6d1a:	d9 82       	std	Y+1, r13	; 0x01
    6d1c:	ea 82       	std	Y+2, r14	; 0x02
    6d1e:	fb 82       	std	Y+3, r15	; 0x03
    6d20:	8c 85       	ldd	r24, Y+12	; 0x0c
    6d22:	81 30       	cpi	r24, 0x01	; 1
    6d24:	c1 f4       	brne	.+48     	; 0x6d56 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x86>
    6d26:	0b 89       	ldd	r16, Y+19	; 0x13
    6d28:	1c 89       	ldd	r17, Y+20	; 0x14
    6d2a:	c7 01       	movw	r24, r14
    6d2c:	b6 01       	movw	r22, r12
    6d2e:	0e 94 81 b8 	call	0x17102	; 0x17102 <float_to_int(float)>
    6d32:	48 81       	ld	r20, Y
    6d34:	59 81       	ldd	r21, Y+1	; 0x01
    6d36:	6a 81       	ldd	r22, Y+2	; 0x02
    6d38:	7b 81       	ldd	r23, Y+3	; 0x03
    6d3a:	9a 89       	ldd	r25, Y+18	; 0x12
    6d3c:	28 2f       	mov	r18, r24
    6d3e:	89 2f       	mov	r24, r25
    6d40:	90 e0       	ldi	r25, 0x00	; 0
    6d42:	f8 01       	movw	r30, r16
    6d44:	df 91       	pop	r29
    6d46:	cf 91       	pop	r28
    6d48:	1f 91       	pop	r17
    6d4a:	0f 91       	pop	r16
    6d4c:	ff 90       	pop	r15
    6d4e:	ef 90       	pop	r14
    6d50:	df 90       	pop	r13
    6d52:	cf 90       	pop	r12
    6d54:	19 94       	eijmp
    6d56:	df 91       	pop	r29
    6d58:	cf 91       	pop	r28
    6d5a:	1f 91       	pop	r17
    6d5c:	0f 91       	pop	r16
    6d5e:	ff 90       	pop	r15
    6d60:	ef 90       	pop	r14
    6d62:	df 90       	pop	r13
    6d64:	cf 90       	pop	r12
    6d66:	08 95       	ret

00006d68 <get_function_budik_text_state(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_budik_text_statehhhPcS_():
    6d68:	0f 93       	push	r16
    6d6a:	1f 93       	push	r17
    6d6c:	c9 01       	movw	r24, r18
    6d6e:	62 e9       	ldi	r22, 0x92	; 146
    6d70:	72 e0       	ldi	r23, 0x02	; 2
    6d72:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    6d76:	f8 01       	movw	r30, r16
    6d78:	10 82       	st	Z, r1
    6d7a:	1f 91       	pop	r17
    6d7c:	0f 91       	pop	r16
    6d7e:	08 95       	ret

00006d80 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>:
_Z35display_element_set_string_del_charjjh():
    6d80:	81 e8       	ldi	r24, 0x81	; 129
    6d82:	99 e0       	ldi	r25, 0x09	; 9
    6d84:	fc 01       	movw	r30, r24
    6d86:	01 90       	ld	r0, Z+
    6d88:	00 20       	and	r0, r0
    6d8a:	e9 f7       	brne	.-6      	; 0x6d86 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x6>
    6d8c:	cf 01       	movw	r24, r30
    6d8e:	82 58       	subi	r24, 0x82	; 130
    6d90:	99 40       	sbci	r25, 0x09	; 9
    6d92:	88 23       	and	r24, r24
    6d94:	29 f0       	breq	.+10     	; 0x6da0 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x20>
    6d96:	99 27       	eor	r25, r25
    6d98:	fc 01       	movw	r30, r24
    6d9a:	e0 58       	subi	r30, 0x80	; 128
    6d9c:	f6 4f       	sbci	r31, 0xF6	; 246
    6d9e:	10 82       	st	Z, r1
    6da0:	08 95       	ret

00006da2 <menu_tds_save_offset(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_offsetjfh():
    6da2:	cf 93       	push	r28
    6da4:	df 93       	push	r29
_Z29display_function_get_variableh():
    6da6:	95 e1       	ldi	r25, 0x15	; 21
    6da8:	89 9f       	mul	r24, r25
    6daa:	e0 01       	movw	r28, r0
    6dac:	11 24       	eor	r1, r1
    6dae:	ce 53       	subi	r28, 0x3E	; 62
    6db0:	d6 4f       	sbci	r29, 0xF6	; 246
_Z20menu_tds_save_offsetjfh():
    6db2:	20 e0       	ldi	r18, 0x00	; 0
    6db4:	30 e0       	ldi	r19, 0x00	; 0
    6db6:	4a e7       	ldi	r20, 0x7A	; 122
    6db8:	54 e4       	ldi	r21, 0x44	; 68
    6dba:	68 81       	ld	r22, Y
    6dbc:	79 81       	ldd	r23, Y+1	; 0x01
    6dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    6dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    6dc2:	0e 94 d0 d7 	call	0x1afa0	; 0x1afa0 <__mulsf3>
    6dc6:	0e 94 e3 d6 	call	0x1adc6	; 0x1adc6 <__fixsfsi>
    6dca:	8a 89       	ldd	r24, Y+18	; 0x12
    6dcc:	df 91       	pop	r29
    6dce:	cf 91       	pop	r28
    6dd0:	0c 94 62 89 	jmp	0x112c4	; 0x112c4 <tds_set_offset(unsigned char, int)>

00006dd4 <menu_tds_save_period(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_periodjfh():
    6dd4:	cf 93       	push	r28
    6dd6:	df 93       	push	r29
_Z29display_function_get_variableh():
    6dd8:	95 e1       	ldi	r25, 0x15	; 21
    6dda:	89 9f       	mul	r24, r25
    6ddc:	e0 01       	movw	r28, r0
    6dde:	11 24       	eor	r1, r1
    6de0:	ce 53       	subi	r28, 0x3E	; 62
    6de2:	d6 4f       	sbci	r29, 0xF6	; 246
_Z20menu_tds_save_periodjfh():
    6de4:	68 81       	ld	r22, Y
    6de6:	79 81       	ldd	r23, Y+1	; 0x01
    6de8:	8a 81       	ldd	r24, Y+2	; 0x02
    6dea:	9b 81       	ldd	r25, Y+3	; 0x03
    6dec:	0e 94 ea d6 	call	0x1add4	; 0x1add4 <__fixunssfsi>
    6df0:	8a 89       	ldd	r24, Y+18	; 0x12
    6df2:	df 91       	pop	r29
    6df4:	cf 91       	pop	r28
    6df6:	0c 94 a4 89 	jmp	0x11348	; 0x11348 <tds_set_period(unsigned char, unsigned char)>

00006dfa <helper_tds_associate(unsigned int, unsigned int, unsigned char)>:
_Z20helper_tds_associatejjh():
    6dfa:	0c 94 b9 8a 	jmp	0x11572	; 0x11572 <tds_associate(unsigned char)>

00006dfe <button_click_set_show_default_ring_program(unsigned int, unsigned int, unsigned char)>:
_Z42button_click_set_show_default_ring_programjjh():
    6dfe:	64 2f       	mov	r22, r20
    6e00:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6e04:	0c 94 29 8e 	jmp	0x11c52	; 0x11c52 <thermostat_ring_set_program_id(unsigned char, unsigned char)>

00006e08 <button_click_deassociate_default_ring_program_for_term(unsigned int, unsigned int, unsigned char)>:
_Z54button_click_deassociate_default_ring_program_for_termjjh():
    6e08:	6f ef       	ldi	r22, 0xFF	; 255
    6e0a:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6e0e:	0c 94 29 8e 	jmp	0x11c52	; 0x11c52 <thermostat_ring_set_program_id(unsigned char, unsigned char)>

00006e12 <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)>:
_Z26button_click_term_set_modejjh():
    6e12:	86 2f       	mov	r24, r22
    6e14:	60 e0       	ldi	r22, 0x00	; 0
    6e16:	44 23       	and	r20, r20
    6e18:	61 f0       	breq	.+24     	; 0x6e32 <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
    6e1a:	61 e0       	ldi	r22, 0x01	; 1
    6e1c:	41 30       	cpi	r20, 0x01	; 1
    6e1e:	49 f0       	breq	.+18     	; 0x6e32 <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
    6e20:	67 e0       	ldi	r22, 0x07	; 7
    6e22:	42 30       	cpi	r20, 0x02	; 2
    6e24:	31 f0       	breq	.+12     	; 0x6e32 <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
    6e26:	62 e0       	ldi	r22, 0x02	; 2
    6e28:	43 30       	cpi	r20, 0x03	; 3
    6e2a:	19 f0       	breq	.+6      	; 0x6e32 <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
    6e2c:	44 30       	cpi	r20, 0x04	; 4
    6e2e:	19 f4       	brne	.+6      	; 0x6e36 <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x24>
    6e30:	68 e0       	ldi	r22, 0x08	; 8
    6e32:	0c 94 7d 8e 	jmp	0x11cfa	; 0x11cfa <thermostat_ring_set_mode(unsigned char, unsigned char)>
    6e36:	08 95       	ret

00006e38 <button_click_set_show_default_ring_input(unsigned int, unsigned int, unsigned char)>:
_Z40button_click_set_show_default_ring_inputjjh():
    6e38:	64 2f       	mov	r22, r20
    6e3a:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6e3e:	0c 94 6d 8e 	jmp	0x11cda	; 0x11cda <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>

00006e42 <button_click_deassociate_default_ring_input_sensor_for_term(unsigned int, unsigned int, unsigned char)>:
_Z59button_click_deassociate_default_ring_input_sensor_for_termjjh():
    6e42:	6f ef       	ldi	r22, 0xFF	; 255
    6e44:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6e48:	0c 94 6d 8e 	jmp	0x11cda	; 0x11cda <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>

00006e4c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
    6e4c:	7f 92       	push	r7
    6e4e:	8f 92       	push	r8
    6e50:	9f 92       	push	r9
    6e52:	af 92       	push	r10
    6e54:	bf 92       	push	r11
    6e56:	cf 92       	push	r12
    6e58:	df 92       	push	r13
    6e5a:	ef 92       	push	r14
    6e5c:	ff 92       	push	r15
    6e5e:	0f 93       	push	r16
    6e60:	1f 93       	push	r17
    6e62:	cf 93       	push	r28
    6e64:	df 93       	push	r29
    6e66:	cd b7       	in	r28, 0x3d	; 61
    6e68:	de b7       	in	r29, 0x3e	; 62
    6e6a:	6a 97       	sbiw	r28, 0x1a	; 26
    6e6c:	0f b6       	in	r0, 0x3f	; 63
    6e6e:	f8 94       	cli
    6e70:	de bf       	out	0x3e, r29	; 62
    6e72:	0f be       	out	0x3f, r0	; 63
    6e74:	cd bf       	out	0x3d, r28	; 61
    6e76:	98 2e       	mov	r9, r24
    6e78:	82 2e       	mov	r8, r18
    6e7a:	73 2e       	mov	r7, r19
    6e7c:	78 01       	movw	r14, r16
    6e7e:	60 eb       	ldi	r22, 0xB0	; 176
    6e80:	77 e5       	ldi	r23, 0x57	; 87
    6e82:	82 2f       	mov	r24, r18
    6e84:	93 2f       	mov	r25, r19
    6e86:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    6e8a:	6c e2       	ldi	r22, 0x2C	; 44
    6e8c:	73 e0       	ldi	r23, 0x03	; 3
    6e8e:	c8 01       	movw	r24, r16
    6e90:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    6e94:	4b e0       	ldi	r20, 0x0B	; 11
    6e96:	49 9d       	mul	r20, r9
    6e98:	c0 01       	movw	r24, r0
    6e9a:	11 24       	eor	r1, r1
    6e9c:	9c 01       	movw	r18, r24
    6e9e:	2e 5a       	subi	r18, 0xAE	; 174
    6ea0:	30 4f       	sbci	r19, 0xF0	; 240
    6ea2:	69 01       	movw	r12, r18
    6ea4:	f9 01       	movw	r30, r18
    6ea6:	81 85       	ldd	r24, Z+9	; 0x09
    6ea8:	81 30       	cpi	r24, 0x01	; 1
    6eaa:	89 f5       	brne	.+98     	; 0x6f0e <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>
    6eac:	a9 01       	movw	r20, r18
    6eae:	00 e1       	ldi	r16, 0x10	; 16
    6eb0:	28 e0       	ldi	r18, 0x08	; 8
    6eb2:	6a e3       	ldi	r22, 0x3A	; 58
    6eb4:	ce 01       	movw	r24, r28
    6eb6:	01 96       	adiw	r24, 0x01	; 1
    6eb8:	5c 01       	movw	r10, r24
    6eba:	0e 94 c1 b8 	call	0x17182	; 0x17182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    6ebe:	bf 92       	push	r11
    6ec0:	af 92       	push	r10
    6ec2:	1f 92       	push	r1
    6ec4:	9f 92       	push	r9
    6ec6:	80 ea       	ldi	r24, 0xA0	; 160
    6ec8:	92 e0       	ldi	r25, 0x02	; 2
    6eca:	9f 93       	push	r25
    6ecc:	8f 93       	push	r24
    6ece:	7f 92       	push	r7
    6ed0:	8f 92       	push	r8
    6ed2:	0e 94 ad dd 	call	0x1bb5a	; 0x1bb5a <sprintf>
    6ed6:	0f b6       	in	r0, 0x3f	; 63
    6ed8:	f8 94       	cli
    6eda:	de bf       	out	0x3e, r29	; 62
    6edc:	0f be       	out	0x3f, r0	; 63
    6ede:	cd bf       	out	0x3d, r28	; 61
    6ee0:	f6 01       	movw	r30, r12
    6ee2:	82 85       	ldd	r24, Z+10	; 0x0a
    6ee4:	8f 3f       	cpi	r24, 0xFF	; 255
    6ee6:	39 f1       	breq	.+78     	; 0x6f36 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xea>
    6ee8:	68 ee       	ldi	r22, 0xE8	; 232
    6eea:	77 e5       	ldi	r23, 0x57	; 87
    6eec:	c7 01       	movw	r24, r14
    6eee:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    6ef2:	b5 01       	movw	r22, r10
    6ef4:	f6 01       	movw	r30, r12
    6ef6:	82 85       	ldd	r24, Z+10	; 0x0a
    6ef8:	0e 94 14 89 	call	0x11228	; 0x11228 <tds_get_name(unsigned char, char*)>
    6efc:	63 e8       	ldi	r22, 0x83	; 131
    6efe:	77 e0       	ldi	r23, 0x07	; 7
    6f00:	c7 01       	movw	r24, r14
    6f02:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    6f06:	b5 01       	movw	r22, r10
    6f08:	c7 01       	movw	r24, r14
    6f0a:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    6f0e:	6a 96       	adiw	r28, 0x1a	; 26
    6f10:	0f b6       	in	r0, 0x3f	; 63
    6f12:	f8 94       	cli
    6f14:	de bf       	out	0x3e, r29	; 62
    6f16:	0f be       	out	0x3f, r0	; 63
    6f18:	cd bf       	out	0x3d, r28	; 61
    6f1a:	df 91       	pop	r29
    6f1c:	cf 91       	pop	r28
    6f1e:	1f 91       	pop	r17
    6f20:	0f 91       	pop	r16
    6f22:	ff 90       	pop	r15
    6f24:	ef 90       	pop	r14
    6f26:	df 90       	pop	r13
    6f28:	cf 90       	pop	r12
    6f2a:	bf 90       	pop	r11
    6f2c:	af 90       	pop	r10
    6f2e:	9f 90       	pop	r9
    6f30:	8f 90       	pop	r8
    6f32:	7f 90       	pop	r7
    6f34:	08 95       	ret
    6f36:	6b ef       	ldi	r22, 0xFB	; 251
    6f38:	77 e5       	ldi	r23, 0x57	; 87
    6f3a:	c7 01       	movw	r24, r14
    6f3c:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    6f40:	e6 cf       	rjmp	.-52     	; 0x6f0e <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>

00006f42 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_ring_is_selectedjjh():
    6f42:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6f46:	84 13       	cpse	r24, r20
    6f48:	05 c0       	rjmp	.+10     	; 0x6f54 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x12>
    6f4a:	0e 94 11 8e 	call	0x11c22	; 0x11c22 <thermostat_ring_get_active(unsigned char)>
    6f4e:	91 e0       	ldi	r25, 0x01	; 1
    6f50:	81 30       	cpi	r24, 0x01	; 1
    6f52:	09 f0       	breq	.+2      	; 0x6f56 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x14>
    6f54:	90 e0       	ldi	r25, 0x00	; 0
    6f56:	89 2f       	mov	r24, r25
    6f58:	08 95       	ret

00006f5a <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z43button_change_default_ring_labels_in_dialoghhhPcS_():
    6f5a:	af 92       	push	r10
    6f5c:	bf 92       	push	r11
    6f5e:	cf 92       	push	r12
    6f60:	df 92       	push	r13
    6f62:	ff 92       	push	r15
    6f64:	0f 93       	push	r16
    6f66:	1f 93       	push	r17
    6f68:	cf 93       	push	r28
    6f6a:	df 93       	push	r29
    6f6c:	cd b7       	in	r28, 0x3d	; 61
    6f6e:	de b7       	in	r29, 0x3e	; 62
    6f70:	66 97       	sbiw	r28, 0x16	; 22
    6f72:	0f b6       	in	r0, 0x3f	; 63
    6f74:	f8 94       	cli
    6f76:	de bf       	out	0x3e, r29	; 62
    6f78:	0f be       	out	0x3f, r0	; 63
    6f7a:	cd bf       	out	0x3d, r28	; 61
    6f7c:	f8 2e       	mov	r15, r24
    6f7e:	59 01       	movw	r10, r18
    6f80:	0e 94 11 8e 	call	0x11c22	; 0x11c22 <thermostat_ring_get_active(unsigned char)>
    6f84:	9e 01       	movw	r18, r28
    6f86:	2f 5f       	subi	r18, 0xFF	; 255
    6f88:	3f 4f       	sbci	r19, 0xFF	; 255
    6f8a:	69 01       	movw	r12, r18
    6f8c:	6e ea       	ldi	r22, 0xAE	; 174
    6f8e:	78 e5       	ldi	r23, 0x58	; 88
    6f90:	8f 3f       	cpi	r24, 0xFF	; 255
    6f92:	11 f4       	brne	.+4      	; 0x6f98 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)+0x3e>
    6f94:	64 ea       	ldi	r22, 0xA4	; 164
    6f96:	78 e5       	ldi	r23, 0x58	; 88
    6f98:	c6 01       	movw	r24, r12
    6f9a:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    6f9e:	be 01       	movw	r22, r28
    6fa0:	63 5f       	subi	r22, 0xF3	; 243
    6fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    6fa4:	8f 2d       	mov	r24, r15
    6fa6:	0e 94 b6 8d 	call	0x11b6c	; 0x11b6c <thermostat_ring_get_name(unsigned char, char*)>
    6faa:	df 92       	push	r13
    6fac:	cf 92       	push	r12
    6fae:	1f 92       	push	r1
    6fb0:	ff 92       	push	r15
    6fb2:	87 ea       	ldi	r24, 0xA7	; 167
    6fb4:	92 e0       	ldi	r25, 0x02	; 2
    6fb6:	9f 93       	push	r25
    6fb8:	8f 93       	push	r24
    6fba:	1f 93       	push	r17
    6fbc:	0f 93       	push	r16
    6fbe:	0e 94 ad dd 	call	0x1bb5a	; 0x1bb5a <sprintf>
    6fc2:	be 01       	movw	r22, r28
    6fc4:	63 5f       	subi	r22, 0xF3	; 243
    6fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    6fc8:	c5 01       	movw	r24, r10
    6fca:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    6fce:	0f b6       	in	r0, 0x3f	; 63
    6fd0:	f8 94       	cli
    6fd2:	de bf       	out	0x3e, r29	; 62
    6fd4:	0f be       	out	0x3f, r0	; 63
    6fd6:	cd bf       	out	0x3d, r28	; 61
    6fd8:	66 96       	adiw	r28, 0x16	; 22
    6fda:	0f b6       	in	r0, 0x3f	; 63
    6fdc:	f8 94       	cli
    6fde:	de bf       	out	0x3e, r29	; 62
    6fe0:	0f be       	out	0x3f, r0	; 63
    6fe2:	cd bf       	out	0x3d, r28	; 61
    6fe4:	df 91       	pop	r29
    6fe6:	cf 91       	pop	r28
    6fe8:	1f 91       	pop	r17
    6fea:	0f 91       	pop	r16
    6fec:	ff 90       	pop	r15
    6fee:	df 90       	pop	r13
    6ff0:	cf 90       	pop	r12
    6ff2:	bf 90       	pop	r11
    6ff4:	af 90       	pop	r10
    6ff6:	08 95       	ret

00006ff8 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z30button_get_default_ring_labelshhhPcS_():
    6ff8:	ef 92       	push	r14
    6ffa:	ff 92       	push	r15
    6ffc:	0f 93       	push	r16
    6ffe:	1f 93       	push	r17
    7000:	cf 93       	push	r28
    7002:	df 93       	push	r29
    7004:	00 d0       	rcall	.+0      	; 0x7006 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0xe>
    7006:	00 d0       	rcall	.+0      	; 0x7008 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x10>
    7008:	00 d0       	rcall	.+0      	; 0x700a <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x12>
    700a:	1f 92       	push	r1
    700c:	cd b7       	in	r28, 0x3d	; 61
    700e:	de b7       	in	r29, 0x3e	; 62
    7010:	c9 01       	movw	r24, r18
    7012:	6e e8       	ldi	r22, 0x8E	; 142
    7014:	79 e5       	ldi	r23, 0x59	; 89
    7016:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    701a:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    701e:	8f 3f       	cpi	r24, 0xFF	; 255
    7020:	39 f1       	breq	.+78     	; 0x7070 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x78>
    7022:	9e 01       	movw	r18, r28
    7024:	2f 5f       	subi	r18, 0xFF	; 255
    7026:	3f 4f       	sbci	r19, 0xFF	; 255
    7028:	79 01       	movw	r14, r18
    702a:	b9 01       	movw	r22, r18
    702c:	0e 94 b6 8d 	call	0x11b6c	; 0x11b6c <thermostat_ring_get_name(unsigned char, char*)>
    7030:	ff 92       	push	r15
    7032:	ef 92       	push	r14
    7034:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    7038:	1f 92       	push	r1
    703a:	8f 93       	push	r24
    703c:	82 eb       	ldi	r24, 0xB2	; 178
    703e:	92 e0       	ldi	r25, 0x02	; 2
    7040:	9f 93       	push	r25
    7042:	8f 93       	push	r24
    7044:	1f 93       	push	r17
    7046:	0f 93       	push	r16
    7048:	0e 94 ad dd 	call	0x1bb5a	; 0x1bb5a <sprintf>
    704c:	0f b6       	in	r0, 0x3f	; 63
    704e:	f8 94       	cli
    7050:	de bf       	out	0x3e, r29	; 62
    7052:	0f be       	out	0x3f, r0	; 63
    7054:	cd bf       	out	0x3d, r28	; 61
    7056:	2a 96       	adiw	r28, 0x0a	; 10
    7058:	0f b6       	in	r0, 0x3f	; 63
    705a:	f8 94       	cli
    705c:	de bf       	out	0x3e, r29	; 62
    705e:	0f be       	out	0x3f, r0	; 63
    7060:	cd bf       	out	0x3d, r28	; 61
    7062:	df 91       	pop	r29
    7064:	cf 91       	pop	r28
    7066:	1f 91       	pop	r17
    7068:	0f 91       	pop	r16
    706a:	ff 90       	pop	r15
    706c:	ef 90       	pop	r14
    706e:	08 95       	ret
    7070:	65 e2       	ldi	r22, 0x25	; 37
    7072:	76 e5       	ldi	r23, 0x56	; 86
    7074:	c8 01       	movw	r24, r16
    7076:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    707a:	ed cf       	rjmp	.-38     	; 0x7056 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x5e>

0000707c <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_mode_is_selectedjjh():
    707c:	cf 93       	push	r28
    707e:	df 93       	push	r29
    7080:	d6 2f       	mov	r29, r22
    7082:	c4 2f       	mov	r28, r20
    7084:	86 2f       	mov	r24, r22
    7086:	0e 94 11 8e 	call	0x11c22	; 0x11c22 <thermostat_ring_get_active(unsigned char)>
    708a:	8f 3f       	cpi	r24, 0xFF	; 255
    708c:	49 f1       	breq	.+82     	; 0x70e0 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x64>
    708e:	8d 2f       	mov	r24, r29
    7090:	0e 94 75 8e 	call	0x11cea	; 0x11cea <thermostat_ring_get_mode(unsigned char)>
    7094:	98 2f       	mov	r25, r24
    7096:	c1 11       	cpse	r28, r1
    7098:	05 c0       	rjmp	.+10     	; 0x70a4 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x28>
    709a:	81 e0       	ldi	r24, 0x01	; 1
    709c:	99 23       	and	r25, r25
    709e:	39 f0       	breq	.+14     	; 0x70ae <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>
    70a0:	80 e0       	ldi	r24, 0x00	; 0
    70a2:	05 c0       	rjmp	.+10     	; 0x70ae <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>
    70a4:	c1 30       	cpi	r28, 0x01	; 1
    70a6:	31 f4       	brne	.+12     	; 0x70b4 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x38>
    70a8:	81 e0       	ldi	r24, 0x01	; 1
    70aa:	91 30       	cpi	r25, 0x01	; 1
    70ac:	c9 f7       	brne	.-14     	; 0x70a0 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    70ae:	df 91       	pop	r29
    70b0:	cf 91       	pop	r28
    70b2:	08 95       	ret
    70b4:	c2 30       	cpi	r28, 0x02	; 2
    70b6:	21 f4       	brne	.+8      	; 0x70c0 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x44>
    70b8:	81 e0       	ldi	r24, 0x01	; 1
    70ba:	97 30       	cpi	r25, 0x07	; 7
    70bc:	89 f7       	brne	.-30     	; 0x70a0 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    70be:	f7 cf       	rjmp	.-18     	; 0x70ae <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>
    70c0:	c3 30       	cpi	r28, 0x03	; 3
    70c2:	21 f4       	brne	.+8      	; 0x70cc <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x50>
    70c4:	81 e0       	ldi	r24, 0x01	; 1
    70c6:	92 30       	cpi	r25, 0x02	; 2
    70c8:	59 f7       	brne	.-42     	; 0x70a0 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    70ca:	f1 cf       	rjmp	.-30     	; 0x70ae <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>
    70cc:	c4 30       	cpi	r28, 0x04	; 4
    70ce:	41 f7       	brne	.-48     	; 0x70a0 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    70d0:	81 e0       	ldi	r24, 0x01	; 1
    70d2:	98 30       	cpi	r25, 0x08	; 8
    70d4:	61 f3       	breq	.-40     	; 0x70ae <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>
    70d6:	93 30       	cpi	r25, 0x03	; 3
    70d8:	51 f3       	breq	.-44     	; 0x70ae <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>
    70da:	95 30       	cpi	r25, 0x05	; 5
    70dc:	09 f7       	brne	.-62     	; 0x70a0 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    70de:	e7 cf       	rjmp	.-50     	; 0x70ae <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>
    70e0:	82 e0       	ldi	r24, 0x02	; 2
    70e2:	e5 cf       	rjmp	.-54     	; 0x70ae <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>

000070e4 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>:
_Z33display_enable_show_term_mode_manjjh():
    70e4:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    70e8:	8f 3f       	cpi	r24, 0xFF	; 255
    70ea:	51 f0       	breq	.+20     	; 0x7100 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1c>
    70ec:	0e 94 75 8e 	call	0x11cea	; 0x11cea <thermostat_ring_get_mode(unsigned char)>
    70f0:	98 2f       	mov	r25, r24
    70f2:	81 e0       	ldi	r24, 0x01	; 1
    70f4:	93 30       	cpi	r25, 0x03	; 3
    70f6:	31 f0       	breq	.+12     	; 0x7104 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x20>
    70f8:	95 30       	cpi	r25, 0x05	; 5
    70fa:	29 f0       	breq	.+10     	; 0x7106 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x22>
    70fc:	98 30       	cpi	r25, 0x08	; 8
    70fe:	19 f0       	breq	.+6      	; 0x7106 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x22>
    7100:	80 e0       	ldi	r24, 0x00	; 0
    7102:	08 95       	ret
    7104:	08 95       	ret
    7106:	08 95       	ret

00007108 <display_enable_show_term_mode_prog(unsigned int, unsigned int, unsigned char)>:
_Z34display_enable_show_term_mode_progjjh():
    7108:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    710c:	0e 94 75 8e 	call	0x11cea	; 0x11cea <thermostat_ring_get_mode(unsigned char)>
    7110:	91 e0       	ldi	r25, 0x01	; 1
    7112:	82 30       	cpi	r24, 0x02	; 2
    7114:	09 f0       	breq	.+2      	; 0x7118 <display_enable_show_term_mode_prog(unsigned int, unsigned int, unsigned char)+0x10>
    7116:	90 e0       	ldi	r25, 0x00	; 0
    7118:	89 2f       	mov	r24, r25
    711a:	08 95       	ret

0000711c <button_get_show_default_ring_input_active(unsigned int, unsigned int, unsigned char)>:
_Z41button_get_show_default_ring_input_activejjh():
    711c:	cf 93       	push	r28
    711e:	c4 2f       	mov	r28, r20
    7120:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    7124:	0e 94 65 8e 	call	0x11cca	; 0x11cca <thermostat_ring_get_asociate_tds(unsigned char)>
    7128:	91 e0       	ldi	r25, 0x01	; 1
    712a:	8c 13       	cpse	r24, r28
    712c:	90 e0       	ldi	r25, 0x00	; 0
    712e:	89 2f       	mov	r24, r25
    7130:	cf 91       	pop	r28
    7132:	08 95       	ret

00007134 <button_get_show_default_ring_program_max_items(unsigned int, unsigned int, unsigned char)>:
_Z46button_get_show_default_ring_program_max_itemsjjh():
    7134:	cf 93       	push	r28
    7136:	df 93       	push	r29
    7138:	c0 e0       	ldi	r28, 0x00	; 0
    713a:	d0 e0       	ldi	r29, 0x00	; 0
    713c:	8c 2f       	mov	r24, r28
    713e:	0e 94 33 90 	call	0x12066	; 0x12066 <thermostat_program_get_active(unsigned char)>
    7142:	8f 3f       	cpi	r24, 0xFF	; 255
    7144:	09 f0       	breq	.+2      	; 0x7148 <button_get_show_default_ring_program_max_items(unsigned int, unsigned int, unsigned char)+0x14>
    7146:	df 5f       	subi	r29, 0xFF	; 255
    7148:	cf 5f       	subi	r28, 0xFF	; 255
    714a:	c8 30       	cpi	r28, 0x08	; 8
    714c:	b9 f7       	brne	.-18     	; 0x713c <button_get_show_default_ring_program_max_items(unsigned int, unsigned int, unsigned char)+0x8>
    714e:	8d 2f       	mov	r24, r29
    7150:	df 91       	pop	r29
    7152:	cf 91       	pop	r28
    7154:	08 95       	ret

00007156 <button_get_show_default_ring_program(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z36button_get_show_default_ring_programhhhPcS_():
    7156:	0f 93       	push	r16
    7158:	1f 93       	push	r17
    715a:	cf 93       	push	r28
    715c:	c8 2f       	mov	r28, r24
    715e:	1f 92       	push	r1
    7160:	8f 93       	push	r24
    7162:	84 ec       	ldi	r24, 0xC4	; 196
    7164:	92 e0       	ldi	r25, 0x02	; 2
    7166:	9f 93       	push	r25
    7168:	8f 93       	push	r24
    716a:	3f 93       	push	r19
    716c:	2f 93       	push	r18
    716e:	0e 94 ad dd 	call	0x1bb5a	; 0x1bb5a <sprintf>
    7172:	f8 01       	movw	r30, r16
    7174:	10 82       	st	Z, r1
    7176:	8c 2f       	mov	r24, r28
    7178:	0e 94 33 90 	call	0x12066	; 0x12066 <thermostat_program_get_active(unsigned char)>
    717c:	0f 90       	pop	r0
    717e:	0f 90       	pop	r0
    7180:	0f 90       	pop	r0
    7182:	0f 90       	pop	r0
    7184:	0f 90       	pop	r0
    7186:	0f 90       	pop	r0
    7188:	81 30       	cpi	r24, 0x01	; 1
    718a:	39 f4       	brne	.+14     	; 0x719a <button_get_show_default_ring_program(unsigned char, unsigned char, unsigned char, char*, char*)+0x44>
    718c:	b8 01       	movw	r22, r16
    718e:	8c 2f       	mov	r24, r28
    7190:	cf 91       	pop	r28
    7192:	1f 91       	pop	r17
    7194:	0f 91       	pop	r16
    7196:	0c 94 e7 8f 	jmp	0x11fce	; 0x11fce <thermostat_program_get_name(unsigned char, char*)>
    719a:	cf 91       	pop	r28
    719c:	1f 91       	pop	r17
    719e:	0f 91       	pop	r16
    71a0:	08 95       	ret

000071a2 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z27button_get_term_mode_labelshhhPcS_():
    71a2:	0f 93       	push	r16
    71a4:	1f 93       	push	r17
    71a6:	48 2f       	mov	r20, r24
    71a8:	c9 01       	movw	r24, r18
    71aa:	41 11       	cpse	r20, r1
    71ac:	0b c0       	rjmp	.+22     	; 0x71c4 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x22>
    71ae:	61 e4       	ldi	r22, 0x41	; 65
    71b0:	79 e5       	ldi	r23, 0x59	; 89
    71b2:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    71b6:	6b e2       	ldi	r22, 0x2B	; 43
    71b8:	79 e5       	ldi	r23, 0x59	; 89
    71ba:	c8 01       	movw	r24, r16
    71bc:	1f 91       	pop	r17
    71be:	0f 91       	pop	r16
    71c0:	0c 94 46 dc 	jmp	0x1b88c	; 0x1b88c <strcpy_P>
    71c4:	41 30       	cpi	r20, 0x01	; 1
    71c6:	39 f4       	brne	.+14     	; 0x71d6 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x34>
    71c8:	67 e2       	ldi	r22, 0x27	; 39
    71ca:	79 e5       	ldi	r23, 0x59	; 89
    71cc:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    71d0:	61 e1       	ldi	r22, 0x11	; 17
    71d2:	79 e5       	ldi	r23, 0x59	; 89
    71d4:	f2 cf       	rjmp	.-28     	; 0x71ba <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    71d6:	42 30       	cpi	r20, 0x02	; 2
    71d8:	39 f4       	brne	.+14     	; 0x71e8 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
    71da:	6d e0       	ldi	r22, 0x0D	; 13
    71dc:	79 e5       	ldi	r23, 0x59	; 89
    71de:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    71e2:	66 ef       	ldi	r22, 0xF6	; 246
    71e4:	78 e5       	ldi	r23, 0x58	; 88
    71e6:	e9 cf       	rjmp	.-46     	; 0x71ba <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    71e8:	43 30       	cpi	r20, 0x03	; 3
    71ea:	39 f4       	brne	.+14     	; 0x71fa <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
    71ec:	61 ef       	ldi	r22, 0xF1	; 241
    71ee:	78 e5       	ldi	r23, 0x58	; 88
    71f0:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    71f4:	6d ed       	ldi	r22, 0xDD	; 221
    71f6:	78 e5       	ldi	r23, 0x58	; 88
    71f8:	e0 cf       	rjmp	.-64     	; 0x71ba <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    71fa:	44 30       	cpi	r20, 0x04	; 4
    71fc:	39 f4       	brne	.+14     	; 0x720c <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x6a>
    71fe:	69 ed       	ldi	r22, 0xD9	; 217
    7200:	78 e5       	ldi	r23, 0x58	; 88
    7202:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    7206:	6a ec       	ldi	r22, 0xCA	; 202
    7208:	78 e5       	ldi	r23, 0x58	; 88
    720a:	d7 cf       	rjmp	.-82     	; 0x71ba <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    720c:	1f 91       	pop	r17
    720e:	0f 91       	pop	r16
    7210:	08 95       	ret

00007212 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_default_term_set_modejjh():
    7212:	cf 93       	push	r28
    7214:	c8 2f       	mov	r28, r24
    7216:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    721a:	0e 94 11 8e 	call	0x11c22	; 0x11c22 <thermostat_ring_get_active(unsigned char)>
    721e:	8f 3f       	cpi	r24, 0xFF	; 255
    7220:	41 f0       	breq	.+16     	; 0x7232 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
    7222:	6c 2f       	mov	r22, r28
    7224:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    7228:	0e 94 7d 8e 	call	0x11cfa	; 0x11cfa <thermostat_ring_set_mode(unsigned char, unsigned char)>
    722c:	81 e0       	ldi	r24, 0x01	; 1
    722e:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <change_term_mode>
    7232:	cf 91       	pop	r28
    7234:	08 95       	ret

00007236 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_term_heat_or_cooljjh():
    7236:	cf 93       	push	r28
    7238:	df 93       	push	r29
    723a:	ec 01       	movw	r28, r24
    723c:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    7240:	0e 94 11 8e 	call	0x11c22	; 0x11c22 <thermostat_ring_get_active(unsigned char)>
    7244:	8f 3f       	cpi	r24, 0xFF	; 255
    7246:	71 f0       	breq	.+28     	; 0x7264 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2e>
    7248:	40 e0       	ldi	r20, 0x00	; 0
    724a:	c3 30       	cpi	r28, 0x03	; 3
    724c:	d1 05       	cpc	r29, r1
    724e:	19 f0       	breq	.+6      	; 0x7256 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x20>
    7250:	25 97       	sbiw	r28, 0x05	; 5
    7252:	41 f4       	brne	.+16     	; 0x7264 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2e>
    7254:	41 e0       	ldi	r20, 0x01	; 1
    7256:	60 e0       	ldi	r22, 0x00	; 0
    7258:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    725c:	df 91       	pop	r29
    725e:	cf 91       	pop	r28
    7260:	0c 94 b2 8e 	jmp	0x11d64	; 0x11d64 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
    7264:	df 91       	pop	r29
    7266:	cf 91       	pop	r28
    7268:	08 95       	ret

0000726a <button_get_show_default_ring_program_active(unsigned int, unsigned int, unsigned char)>:
_Z43button_get_show_default_ring_program_activejjh():
    726a:	cf 93       	push	r28
    726c:	c4 2f       	mov	r28, r20
    726e:	84 2f       	mov	r24, r20
    7270:	0e 94 33 90 	call	0x12066	; 0x12066 <thermostat_program_get_active(unsigned char)>
    7274:	8f 3f       	cpi	r24, 0xFF	; 255
    7276:	31 f0       	breq	.+12     	; 0x7284 <button_get_show_default_ring_program_active(unsigned int, unsigned int, unsigned char)+0x1a>
    7278:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    727c:	0e 94 21 8e 	call	0x11c42	; 0x11c42 <thermostat_ring_get_program_id(unsigned char)>
    7280:	91 e0       	ldi	r25, 0x01	; 1
    7282:	c8 13       	cpse	r28, r24
    7284:	90 e0       	ldi	r25, 0x00	; 0
    7286:	89 2f       	mov	r24, r25
    7288:	cf 91       	pop	r28
    728a:	08 95       	ret

0000728c <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>:
_Z40button_status_default_ring_term_has_modejjh():
    728c:	cf 93       	push	r28
    728e:	c8 2f       	mov	r28, r24
    7290:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    7294:	0e 94 11 8e 	call	0x11c22	; 0x11c22 <thermostat_ring_get_active(unsigned char)>
    7298:	8f 3f       	cpi	r24, 0xFF	; 255
    729a:	31 f0       	breq	.+12     	; 0x72a8 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x1c>
    729c:	6c 2f       	mov	r22, r28
    729e:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    72a2:	cf 91       	pop	r28
    72a4:	0c 94 85 8e 	jmp	0x11d0a	; 0x11d0a <thermostat_ring_get_mode_1(unsigned char, unsigned char)>
    72a8:	80 e0       	ldi	r24, 0x00	; 0
    72aa:	cf 91       	pop	r28
    72ac:	08 95       	ret

000072ae <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z28button_get_term_heat_or_cooljjh():
    72ae:	cf 93       	push	r28
    72b0:	df 93       	push	r29
    72b2:	ec 01       	movw	r28, r24
    72b4:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    72b8:	0e 94 11 8e 	call	0x11c22	; 0x11c22 <thermostat_ring_get_active(unsigned char)>
    72bc:	8f 3f       	cpi	r24, 0xFF	; 255
    72be:	61 f0       	breq	.+24     	; 0x72d8 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2a>
    72c0:	60 e0       	ldi	r22, 0x00	; 0
    72c2:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    72c6:	0e 94 97 8e 	call	0x11d2e	; 0x11d2e <thermostat_ring_get_status_bites(unsigned char, unsigned char)>
    72ca:	81 11       	cpse	r24, r1
    72cc:	09 c0       	rjmp	.+18     	; 0x72e0 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x32>
    72ce:	81 e0       	ldi	r24, 0x01	; 1
    72d0:	23 97       	sbiw	r28, 0x03	; 3
    72d2:	19 f0       	breq	.+6      	; 0x72da <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2c>
    72d4:	80 e0       	ldi	r24, 0x00	; 0
    72d6:	01 c0       	rjmp	.+2      	; 0x72da <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2c>
    72d8:	82 e0       	ldi	r24, 0x02	; 2
    72da:	df 91       	pop	r29
    72dc:	cf 91       	pop	r28
    72de:	08 95       	ret
    72e0:	81 e0       	ldi	r24, 0x01	; 1
    72e2:	25 97       	sbiw	r28, 0x05	; 5
    72e4:	b9 f7       	brne	.-18     	; 0x72d4 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x26>
    72e6:	f9 cf       	rjmp	.-14     	; 0x72da <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2c>

000072e8 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>:
_ZN5EERefaSEh():
    72e8:	0c 94 88 e4 	jmp	0x1c910	; 0x1c910 <eeprom_write_byte>

000072ec <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    72ec:	0f 93       	push	r16
    72ee:	1f 93       	push	r17
    72f0:	cf 93       	push	r28
    72f2:	df 93       	push	r29
    72f4:	00 97       	sbiw	r24, 0x00	; 0
    72f6:	01 f1       	breq	.+64     	; 0x7338 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x4c>
    72f8:	8b 01       	movw	r16, r22
    72fa:	fc 01       	movw	r30, r24
    72fc:	c0 81       	ld	r28, Z
    72fe:	d1 81       	ldd	r29, Z+1	; 0x01
    7300:	20 97       	sbiw	r28, 0x00	; 0
    7302:	d1 f0       	breq	.+52     	; 0x7338 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x4c>
    7304:	6a 85       	ldd	r22, Y+10	; 0x0a
    7306:	7b 85       	ldd	r23, Y+11	; 0x0b
_ZNK11ArduinoJson9Internals23ZeroTerminatedRamString6equalsEPKc():
    7308:	01 15       	cp	r16, r1
    730a:	11 05       	cpc	r17, r1
    730c:	19 f0       	breq	.+6      	; 0x7314 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x28>
    730e:	61 15       	cp	r22, r1
    7310:	71 05       	cpc	r23, r1
    7312:	49 f4       	brne	.+18     	; 0x7326 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x3a>
    7314:	06 17       	cp	r16, r22
    7316:	17 07       	cpc	r17, r23
    7318:	59 f4       	brne	.+22     	; 0x7330 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    731a:	ce 01       	movw	r24, r28
    731c:	df 91       	pop	r29
    731e:	cf 91       	pop	r28
    7320:	1f 91       	pop	r17
    7322:	0f 91       	pop	r16
    7324:	08 95       	ret
_ZNK11ArduinoJson9Internals23ZeroTerminatedRamString6equalsEPKc():
    7326:	c8 01       	movw	r24, r16
    7328:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    732c:	89 2b       	or	r24, r25
    732e:	a9 f3       	breq	.-22     	; 0x731a <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    7330:	0e 80       	ldd	r0, Y+6	; 0x06
    7332:	df 81       	ldd	r29, Y+7	; 0x07
    7334:	c0 2d       	mov	r28, r0
    7336:	e4 cf       	rjmp	.-56     	; 0x7300 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x14>
    7338:	d0 e0       	ldi	r29, 0x00	; 0
    733a:	c0 e0       	ldi	r28, 0x00	; 0
    733c:	ee cf       	rjmp	.-36     	; 0x731a <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x2e>

0000733e <get_function_budik_enabled(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_budik_enabledjjh():
    733e:	81 e0       	ldi	r24, 0x01	; 1
    7340:	08 95       	ret

00007342 <nullfce(unsigned int, unsigned int, unsigned char)>:
_Z7nullfcejjh():
    7342:	08 95       	ret

00007344 <ArduinoJson::JsonArray::add()>:
_ZN11ArduinoJson9JsonArray3addEv():
    7344:	0f 93       	push	r16
    7346:	1f 93       	push	r17
    7348:	cf 93       	push	r28
    734a:	df 93       	push	r29
    734c:	dc 01       	movw	r26, r24
    734e:	12 96       	adiw	r26, 0x02	; 2
    7350:	2d 91       	ld	r18, X+
    7352:	3c 91       	ld	r19, X
    7354:	23 2b       	or	r18, r19
    7356:	41 f4       	brne	.+16     	; 0x7368 <ArduinoJson::JsonArray::add()+0x24>
    7358:	60 e0       	ldi	r22, 0x00	; 0
    735a:	70 e0       	ldi	r23, 0x00	; 0
    735c:	cb 01       	movw	r24, r22
    735e:	df 91       	pop	r29
    7360:	cf 91       	pop	r28
    7362:	1f 91       	pop	r17
    7364:	0f 91       	pop	r16
    7366:	08 95       	ret
    7368:	8c 01       	movw	r16, r24
    736a:	ec 01       	movw	r28, r24
    736c:	88 81       	ld	r24, Y
    736e:	99 81       	ldd	r25, Y+1	; 0x01
_ZN11ArduinoJson9Internals21AllocableInMemoryPoolnwEjPNS0_10MemoryPoolE():
    7370:	dc 01       	movw	r26, r24
    7372:	ed 91       	ld	r30, X+
    7374:	fc 91       	ld	r31, X
    7376:	01 90       	ld	r0, Z+
    7378:	f0 81       	ld	r31, Z
    737a:	e0 2d       	mov	r30, r0
    737c:	6c e0       	ldi	r22, 0x0C	; 12
    737e:	70 e0       	ldi	r23, 0x00	; 0
    7380:	19 95       	eicall
    7382:	fc 01       	movw	r30, r24
_ZN11ArduinoJson9JsonArray3addEv():
    7384:	89 2b       	or	r24, r25
    7386:	31 f1       	breq	.+76     	; 0x73d4 <ArduinoJson::JsonArray::add()+0x90>
    7388:	8c e0       	ldi	r24, 0x0C	; 12
    738a:	ef 01       	movw	r28, r30
    738c:	19 92       	st	Y+, r1
    738e:	8a 95       	dec	r24
    7390:	e9 f7       	brne	.-6      	; 0x738c <ArduinoJson::JsonArray::add()+0x48>
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
    7392:	11 82       	std	Z+1, r1	; 0x01
    7394:	10 82       	st	Z, r1
_ZN11ArduinoJson9JsonArray3addEv():
    7396:	e8 01       	movw	r28, r16
    7398:	aa 81       	ldd	r26, Y+2	; 0x02
    739a:	bb 81       	ldd	r27, Y+3	; 0x03
    739c:	12 96       	adiw	r26, 0x02	; 2
    739e:	8d 91       	ld	r24, X+
    73a0:	9c 91       	ld	r25, X
    73a2:	13 97       	sbiw	r26, 0x03	; 3
    73a4:	00 97       	sbiw	r24, 0x00	; 0
    73a6:	91 f0       	breq	.+36     	; 0x73cc <ArduinoJson::JsonArray::add()+0x88>
    73a8:	91 87       	std	Z+9, r25	; 0x09
    73aa:	80 87       	std	Z+8, r24	; 0x08
    73ac:	ec 01       	movw	r28, r24
    73ae:	ff 83       	std	Y+7, r31	; 0x07
    73b0:	ee 83       	std	Y+6, r30	; 0x06
    73b2:	13 96       	adiw	r26, 0x03	; 3
    73b4:	fc 93       	st	X, r31
    73b6:	ee 93       	st	-X, r30
    73b8:	12 97       	sbiw	r26, 0x02	; 2
    73ba:	3e 2f       	mov	r19, r30
    73bc:	2f 2f       	mov	r18, r31
    73be:	f8 01       	movw	r30, r16
    73c0:	40 81       	ld	r20, Z
    73c2:	51 81       	ldd	r21, Z+1	; 0x01
    73c4:	ba 01       	movw	r22, r20
    73c6:	83 2f       	mov	r24, r19
    73c8:	92 2f       	mov	r25, r18
    73ca:	c9 cf       	rjmp	.-110    	; 0x735e <ArduinoJson::JsonArray::add()+0x1a>
    73cc:	11 96       	adiw	r26, 0x01	; 1
    73ce:	fc 93       	st	X, r31
    73d0:	ee 93       	st	-X, r30
    73d2:	ef cf       	rjmp	.-34     	; 0x73b2 <ArduinoJson::JsonArray::add()+0x6e>
    73d4:	30 e0       	ldi	r19, 0x00	; 0
    73d6:	20 e0       	ldi	r18, 0x00	; 0
    73d8:	50 e0       	ldi	r21, 0x00	; 0
    73da:	40 e0       	ldi	r20, 0x00	; 0
    73dc:	f3 cf       	rjmp	.-26     	; 0x73c4 <ArduinoJson::JsonArray::add()+0x80>

000073de <ArduinoJson::Internals::isFloat(char const*)>:
_ZN11ArduinoJson9Internals7isFloatEPKc():
    73de:	cf 93       	push	r28
    73e0:	df 93       	push	r29
    73e2:	ec 01       	movw	r28, r24
    73e4:	00 97       	sbiw	r24, 0x00	; 0
    73e6:	09 f4       	brne	.+2      	; 0x73ea <ArduinoJson::Internals::isFloat(char const*)+0xc>
    73e8:	3f c0       	rjmp	.+126    	; 0x7468 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    73ea:	6f ec       	ldi	r22, 0xCF	; 207
    73ec:	72 e0       	ldi	r23, 0x02	; 2
    73ee:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    73f2:	89 2b       	or	r24, r25
    73f4:	e9 f1       	breq	.+122    	; 0x7470 <ArduinoJson::Internals::isFloat(char const*)+0x92>
    73f6:	88 81       	ld	r24, Y
_ZN11ArduinoJson9Internals6issignEc():
    73f8:	8d 32       	cpi	r24, 0x2D	; 45
    73fa:	11 f0       	breq	.+4      	; 0x7400 <ArduinoJson::Internals::isFloat(char const*)+0x22>
    73fc:	8b 32       	cpi	r24, 0x2B	; 43
    73fe:	09 f4       	brne	.+2      	; 0x7402 <ArduinoJson::Internals::isFloat(char const*)+0x24>
_ZN11ArduinoJson9Internals7isFloatEPKc():
    7400:	21 96       	adiw	r28, 0x01	; 1
    7402:	63 ed       	ldi	r22, 0xD3	; 211
    7404:	72 e0       	ldi	r23, 0x02	; 2
    7406:	ce 01       	movw	r24, r28
    7408:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    740c:	89 2b       	or	r24, r25
    740e:	81 f1       	breq	.+96     	; 0x7470 <ArduinoJson::Internals::isFloat(char const*)+0x92>
    7410:	88 81       	ld	r24, Y
    7412:	88 23       	and	r24, r24
    7414:	49 f1       	breq	.+82     	; 0x7468 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    7416:	fe 01       	movw	r30, r28
    7418:	89 91       	ld	r24, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
    741a:	90 ed       	ldi	r25, 0xD0	; 208
    741c:	98 0f       	add	r25, r24
_ZN11ArduinoJson9Internals7isFloatEPKc():
    741e:	9a 30       	cpi	r25, 0x0A	; 10
    7420:	d0 f3       	brcs	.-12     	; 0x7416 <ArduinoJson::Internals::isFloat(char const*)+0x38>
    7422:	8e 32       	cpi	r24, 0x2E	; 46
    7424:	41 f4       	brne	.+16     	; 0x7436 <ArduinoJson::Internals::isFloat(char const*)+0x58>
    7426:	9e 01       	movw	r18, r28
    7428:	f9 01       	movw	r30, r18
    742a:	2f 5f       	subi	r18, 0xFF	; 255
    742c:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
    742e:	80 81       	ld	r24, Z
    7430:	80 53       	subi	r24, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    7432:	8a 30       	cpi	r24, 0x0A	; 10
    7434:	c8 f3       	brcs	.-14     	; 0x7428 <ArduinoJson::Internals::isFloat(char const*)+0x4a>
    7436:	80 81       	ld	r24, Z
    7438:	8f 7d       	andi	r24, 0xDF	; 223
    743a:	85 34       	cpi	r24, 0x45	; 69
    743c:	89 f4       	brne	.+34     	; 0x7460 <ArduinoJson::Internals::isFloat(char const*)+0x82>
    743e:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals6issignEc():
    7440:	8d 32       	cpi	r24, 0x2D	; 45
    7442:	a1 f0       	breq	.+40     	; 0x746c <ArduinoJson::Internals::isFloat(char const*)+0x8e>
    7444:	8b 32       	cpi	r24, 0x2B	; 43
    7446:	91 f0       	breq	.+36     	; 0x746c <ArduinoJson::Internals::isFloat(char const*)+0x8e>
_ZN11ArduinoJson9Internals7isFloatEPKc():
    7448:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
    744a:	80 81       	ld	r24, Z
    744c:	80 53       	subi	r24, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    744e:	8a 30       	cpi	r24, 0x0A	; 10
    7450:	58 f4       	brcc	.+22     	; 0x7468 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    7452:	cf 01       	movw	r24, r30
    7454:	fc 01       	movw	r30, r24
    7456:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
    7458:	20 81       	ld	r18, Z
    745a:	20 53       	subi	r18, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    745c:	2a 30       	cpi	r18, 0x0A	; 10
    745e:	d0 f3       	brcs	.-12     	; 0x7454 <ArduinoJson::Internals::isFloat(char const*)+0x76>
    7460:	81 e0       	ldi	r24, 0x01	; 1
    7462:	90 81       	ld	r25, Z
    7464:	99 23       	and	r25, r25
    7466:	29 f0       	breq	.+10     	; 0x7472 <ArduinoJson::Internals::isFloat(char const*)+0x94>
    7468:	80 e0       	ldi	r24, 0x00	; 0
    746a:	03 c0       	rjmp	.+6      	; 0x7472 <ArduinoJson::Internals::isFloat(char const*)+0x94>
    746c:	32 96       	adiw	r30, 0x02	; 2
    746e:	ed cf       	rjmp	.-38     	; 0x744a <ArduinoJson::Internals::isFloat(char const*)+0x6c>
    7470:	81 e0       	ldi	r24, 0x01	; 1
    7472:	df 91       	pop	r29
    7474:	cf 91       	pop	r28
    7476:	08 95       	ret

00007478 <printf_begin()>:
_Z12printf_beginv():
    7478:	70 e0       	ldi	r23, 0x00	; 0
    747a:	60 e0       	ldi	r22, 0x00	; 0
    747c:	8c e1       	ldi	r24, 0x1C	; 28
    747e:	91 e8       	ldi	r25, 0x81	; 129
    7480:	0c 94 fc dc 	jmp	0x1b9f8	; 0x1b9f8 <fdevopen>

00007484 <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
    7484:	30 e0       	ldi	r19, 0x00	; 0
    7486:	20 e0       	ldi	r18, 0x00	; 0
    7488:	e1 e0       	ldi	r30, 0x01	; 1
    748a:	f0 e0       	ldi	r31, 0x00	; 0
    748c:	af 01       	movw	r20, r30
    748e:	02 2e       	mov	r0, r18
    7490:	01 c0       	rjmp	.+2      	; 0x7494 <enable_redraw(unsigned char, unsigned char)+0x10>
    7492:	44 0f       	add	r20, r20
    7494:	0a 94       	dec	r0
    7496:	ea f7       	brpl	.-6      	; 0x7492 <enable_redraw(unsigned char, unsigned char)+0xe>
    7498:	98 2f       	mov	r25, r24
    749a:	94 23       	and	r25, r20
    749c:	11 f0       	breq	.+4      	; 0x74a2 <enable_redraw(unsigned char, unsigned char)+0x1e>
    749e:	46 23       	and	r20, r22
    74a0:	39 f4       	brne	.+14     	; 0x74b0 <enable_redraw(unsigned char, unsigned char)+0x2c>
    74a2:	2f 5f       	subi	r18, 0xFF	; 255
    74a4:	3f 4f       	sbci	r19, 0xFF	; 255
    74a6:	28 30       	cpi	r18, 0x08	; 8
    74a8:	31 05       	cpc	r19, r1
    74aa:	81 f7       	brne	.-32     	; 0x748c <enable_redraw(unsigned char, unsigned char)+0x8>
    74ac:	80 e0       	ldi	r24, 0x00	; 0
    74ae:	08 95       	ret
    74b0:	81 e0       	ldi	r24, 0x01	; 1
    74b2:	08 95       	ret

000074b4 <MenuHistoryInit()>:
_Z15MenuHistoryInitv():
    74b4:	e0 91 64 09 	lds	r30, 0x0964	; 0x800964 <MenuHistoryIndex>
    74b8:	f0 e0       	ldi	r31, 0x00	; 0
    74ba:	e1 59       	subi	r30, 0x91	; 145
    74bc:	f6 4f       	sbci	r31, 0xF6	; 246
    74be:	10 82       	st	Z, r1
    74c0:	08 95       	ret

000074c2 <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
    74c2:	ff 92       	push	r15
    74c4:	0f 93       	push	r16
    74c6:	1f 93       	push	r17
    74c8:	cf 93       	push	r28
    74ca:	df 93       	push	r29
    74cc:	dc 01       	movw	r26, r24
    74ce:	20 91 64 09 	lds	r18, 0x0964	; 0x800964 <MenuHistoryIndex>
    74d2:	30 e0       	ldi	r19, 0x00	; 0
    74d4:	80 e0       	ldi	r24, 0x00	; 0
    74d6:	65 e4       	ldi	r22, 0x45	; 69
    74d8:	75 e0       	ldi	r23, 0x05	; 5
    74da:	ca ed       	ldi	r28, 0xDA	; 218
    74dc:	d2 e0       	ldi	r29, 0x02	; 2
    74de:	89 01       	movw	r16, r18
    74e0:	01 59       	subi	r16, 0x91	; 145
    74e2:	16 4f       	sbci	r17, 0xF6	; 246
    74e4:	fb 01       	movw	r30, r22
    74e6:	94 91       	lpm	r25, Z
    74e8:	89 17       	cp	r24, r25
    74ea:	e8 f4       	brcc	.+58     	; 0x7526 <MenuHistoryGetMenu(unsigned char*)+0x64>
    74ec:	8c 9f       	mul	r24, r28
    74ee:	a0 01       	movw	r20, r0
    74f0:	8d 9f       	mul	r24, r29
    74f2:	50 0d       	add	r21, r0
    74f4:	11 24       	eor	r1, r1
    74f6:	fa 01       	movw	r30, r20
    74f8:	e2 5f       	subi	r30, 0xF2	; 242
    74fa:	f7 4f       	sbci	r31, 0xF7	; 247
    74fc:	f4 90       	lpm	r15, Z
    74fe:	f8 01       	movw	r30, r16
    7500:	90 81       	ld	r25, Z
    7502:	9f 11       	cpse	r25, r15
    7504:	0e c0       	rjmp	.+28     	; 0x7522 <MenuHistoryGetMenu(unsigned char*)+0x60>
    7506:	47 5b       	subi	r20, 0xB7	; 183
    7508:	5a 4f       	sbci	r21, 0xFA	; 250
    750a:	2b 59       	subi	r18, 0x9B	; 155
    750c:	36 4f       	sbci	r19, 0xF6	; 246
    750e:	f9 01       	movw	r30, r18
    7510:	20 81       	ld	r18, Z
    7512:	2c 93       	st	X, r18
    7514:	ca 01       	movw	r24, r20
    7516:	df 91       	pop	r29
    7518:	cf 91       	pop	r28
    751a:	1f 91       	pop	r17
    751c:	0f 91       	pop	r16
    751e:	ff 90       	pop	r15
    7520:	08 95       	ret
    7522:	8f 5f       	subi	r24, 0xFF	; 255
    7524:	df cf       	rjmp	.-66     	; 0x74e4 <MenuHistoryGetMenu(unsigned char*)+0x22>
    7526:	80 e0       	ldi	r24, 0x00	; 0
    7528:	66 e4       	ldi	r22, 0x46	; 70
    752a:	75 e0       	ldi	r23, 0x05	; 5
    752c:	ca ed       	ldi	r28, 0xDA	; 218
    752e:	d2 e0       	ldi	r29, 0x02	; 2
    7530:	89 01       	movw	r16, r18
    7532:	01 59       	subi	r16, 0x91	; 145
    7534:	16 4f       	sbci	r17, 0xF6	; 246
    7536:	fb 01       	movw	r30, r22
    7538:	94 91       	lpm	r25, Z
    753a:	89 17       	cp	r24, r25
    753c:	90 f4       	brcc	.+36     	; 0x7562 <MenuHistoryGetMenu(unsigned char*)+0xa0>
    753e:	8c 9f       	mul	r24, r28
    7540:	a0 01       	movw	r20, r0
    7542:	8d 9f       	mul	r24, r29
    7544:	50 0d       	add	r21, r0
    7546:	11 24       	eor	r1, r1
    7548:	fa 01       	movw	r30, r20
    754a:	ee 56       	subi	r30, 0x6E	; 110
    754c:	fb 4d       	sbci	r31, 0xDB	; 219
    754e:	f4 90       	lpm	r15, Z
    7550:	f8 01       	movw	r30, r16
    7552:	90 81       	ld	r25, Z
    7554:	9f 11       	cpse	r25, r15
    7556:	03 c0       	rjmp	.+6      	; 0x755e <MenuHistoryGetMenu(unsigned char*)+0x9c>
    7558:	43 53       	subi	r20, 0x33	; 51
    755a:	5e 4d       	sbci	r21, 0xDE	; 222
    755c:	d6 cf       	rjmp	.-84     	; 0x750a <MenuHistoryGetMenu(unsigned char*)+0x48>
    755e:	8f 5f       	subi	r24, 0xFF	; 255
    7560:	ea cf       	rjmp	.-44     	; 0x7536 <MenuHistoryGetMenu(unsigned char*)+0x74>
    7562:	80 e0       	ldi	r24, 0x00	; 0
    7564:	67 e4       	ldi	r22, 0x47	; 71
    7566:	75 e0       	ldi	r23, 0x05	; 5
    7568:	ca ed       	ldi	r28, 0xDA	; 218
    756a:	d2 e0       	ldi	r29, 0x02	; 2
    756c:	89 01       	movw	r16, r18
    756e:	01 59       	subi	r16, 0x91	; 145
    7570:	16 4f       	sbci	r17, 0xF6	; 246
    7572:	fb 01       	movw	r30, r22
    7574:	94 91       	lpm	r25, Z
    7576:	89 17       	cp	r24, r25
    7578:	90 f4       	brcc	.+36     	; 0x759e <MenuHistoryGetMenu(unsigned char*)+0xdc>
    757a:	8c 9f       	mul	r24, r28
    757c:	a0 01       	movw	r20, r0
    757e:	8d 9f       	mul	r24, r29
    7580:	50 0d       	add	r21, r0
    7582:	11 24       	eor	r1, r1
    7584:	fa 01       	movw	r30, r20
    7586:	e2 55       	subi	r30, 0x52	; 82
    7588:	fa 4c       	sbci	r31, 0xCA	; 202
    758a:	f4 90       	lpm	r15, Z
    758c:	f8 01       	movw	r30, r16
    758e:	90 81       	ld	r25, Z
    7590:	9f 11       	cpse	r25, r15
    7592:	03 c0       	rjmp	.+6      	; 0x759a <MenuHistoryGetMenu(unsigned char*)+0xd8>
    7594:	47 51       	subi	r20, 0x17	; 23
    7596:	5d 4c       	sbci	r21, 0xCD	; 205
    7598:	b8 cf       	rjmp	.-144    	; 0x750a <MenuHistoryGetMenu(unsigned char*)+0x48>
    759a:	8f 5f       	subi	r24, 0xFF	; 255
    759c:	ea cf       	rjmp	.-44     	; 0x7572 <MenuHistoryGetMenu(unsigned char*)+0xb0>
    759e:	90 e0       	ldi	r25, 0x00	; 0
    75a0:	68 e4       	ldi	r22, 0x48	; 72
    75a2:	75 e0       	ldi	r23, 0x05	; 5
    75a4:	ca ed       	ldi	r28, 0xDA	; 218
    75a6:	d2 e0       	ldi	r29, 0x02	; 2
    75a8:	89 01       	movw	r16, r18
    75aa:	01 59       	subi	r16, 0x91	; 145
    75ac:	16 4f       	sbci	r17, 0xF6	; 246
    75ae:	fb 01       	movw	r30, r22
    75b0:	84 91       	lpm	r24, Z
    75b2:	98 17       	cp	r25, r24
    75b4:	08 f0       	brcs	.+2      	; 0x75b8 <MenuHistoryGetMenu(unsigned char*)+0xf6>
    75b6:	ae cf       	rjmp	.-164    	; 0x7514 <MenuHistoryGetMenu(unsigned char*)+0x52>
    75b8:	9c 9f       	mul	r25, r28
    75ba:	a0 01       	movw	r20, r0
    75bc:	9d 9f       	mul	r25, r29
    75be:	50 0d       	add	r21, r0
    75c0:	11 24       	eor	r1, r1
    75c2:	fa 01       	movw	r30, r20
    75c4:	e6 53       	subi	r30, 0x36	; 54
    75c6:	f9 4b       	sbci	r31, 0xB9	; 185
    75c8:	f4 90       	lpm	r15, Z
    75ca:	f8 01       	movw	r30, r16
    75cc:	80 81       	ld	r24, Z
    75ce:	8f 11       	cpse	r24, r15
    75d0:	03 c0       	rjmp	.+6      	; 0x75d8 <MenuHistoryGetMenu(unsigned char*)+0x116>
    75d2:	4b 5f       	subi	r20, 0xFB	; 251
    75d4:	5b 4b       	sbci	r21, 0xBB	; 187
    75d6:	99 cf       	rjmp	.-206    	; 0x750a <MenuHistoryGetMenu(unsigned char*)+0x48>
    75d8:	9f 5f       	subi	r25, 0xFF	; 255
    75da:	e9 cf       	rjmp	.-46     	; 0x75ae <MenuHistoryGetMenu(unsigned char*)+0xec>

000075dc <DisplayClean(unsigned int)>:
_Z12DisplayCleanj():
    75dc:	bc 01       	movw	r22, r24
    75de:	85 ea       	ldi	r24, 0xA5	; 165
    75e0:	9b e0       	ldi	r25, 0x0B	; 11
    75e2:	0c 94 20 93 	jmp	0x12640	; 0x12640 <LCDWIKI_GUI::Fill_Screen(unsigned int)>

000075e6 <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
    75e6:	2f 92       	push	r2
    75e8:	3f 92       	push	r3
    75ea:	4f 92       	push	r4
    75ec:	5f 92       	push	r5
    75ee:	6f 92       	push	r6
    75f0:	7f 92       	push	r7
    75f2:	8f 92       	push	r8
    75f4:	9f 92       	push	r9
    75f6:	af 92       	push	r10
    75f8:	bf 92       	push	r11
    75fa:	cf 92       	push	r12
    75fc:	df 92       	push	r13
    75fe:	ef 92       	push	r14
    7600:	ff 92       	push	r15
    7602:	0f 93       	push	r16
    7604:	1f 93       	push	r17
    7606:	cf 93       	push	r28
    7608:	df 93       	push	r29
    760a:	1f 92       	push	r1
    760c:	cd b7       	in	r28, 0x3d	; 61
    760e:	de b7       	in	r29, 0x3e	; 62
    7610:	ce 01       	movw	r24, r28
    7612:	01 96       	adiw	r24, 0x01	; 1
    7614:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <MenuHistoryGetMenu(unsigned char*)>
    7618:	7c 01       	movw	r14, r24
    761a:	fc 01       	movw	r30, r24
    761c:	e2 53       	subi	r30, 0x32	; 50
    761e:	fd 4f       	sbci	r31, 0xFD	; 253
    7620:	b4 90       	lpm	r11, Z
    7622:	38 97       	sbiw	r30, 0x08	; 8
    7624:	85 90       	lpm	r8, Z+
    7626:	94 90       	lpm	r9, Z
    7628:	fc 01       	movw	r30, r24
    762a:	e8 53       	subi	r30, 0x38	; 56
    762c:	fd 4f       	sbci	r31, 0xFD	; 253
    762e:	c5 90       	lpm	r12, Z+
    7630:	d4 90       	lpm	r13, Z
    7632:	fc 01       	movw	r30, r24
    7634:	e6 53       	subi	r30, 0x36	; 54
    7636:	fd 4f       	sbci	r31, 0xFD	; 253
    7638:	65 90       	lpm	r6, Z+
    763a:	74 90       	lpm	r7, Z
    763c:	fc 01       	movw	r30, r24
    763e:	e4 53       	subi	r30, 0x34	; 52
    7640:	fd 4f       	sbci	r31, 0xFD	; 253
    7642:	45 90       	lpm	r4, Z+
    7644:	54 90       	lpm	r5, Z
    7646:	fc 01       	movw	r30, r24
    7648:	e1 53       	subi	r30, 0x31	; 49
    764a:	fd 4f       	sbci	r31, 0xFD	; 253
    764c:	25 90       	lpm	r2, Z+
    764e:	34 90       	lpm	r3, Z
    7650:	b0 fe       	sbrs	r11, 0
    7652:	03 c0       	rjmp	.+6      	; 0x765a <MenuPrepareStyle()+0x74>
    7654:	c1 01       	movw	r24, r2
    7656:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <DisplayClean(unsigned int)>
    765a:	b1 fe       	sbrs	r11, 1
    765c:	11 c0       	rjmp	.+34     	; 0x7680 <MenuPrepareStyle()+0x9a>
    765e:	b1 01       	movw	r22, r2
    7660:	85 ea       	ldi	r24, 0xA5	; 165
    7662:	9b e0       	ldi	r25, 0x0B	; 11
    7664:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7668:	86 01       	movw	r16, r12
    766a:	04 0d       	add	r16, r4
    766c:	15 1d       	adc	r17, r5
    766e:	94 01       	movw	r18, r8
    7670:	26 0d       	add	r18, r6
    7672:	37 1d       	adc	r19, r7
    7674:	a6 01       	movw	r20, r12
    7676:	b4 01       	movw	r22, r8
    7678:	85 ea       	ldi	r24, 0xA5	; 165
    767a:	9b e0       	ldi	r25, 0x0B	; 11
    767c:	0e 94 c4 92 	call	0x12588	; 0x12588 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    7680:	b2 fe       	sbrs	r11, 2
    7682:	30 c0       	rjmp	.+96     	; 0x76e4 <MenuPrepareStyle()+0xfe>
    7684:	70 e0       	ldi	r23, 0x00	; 0
    7686:	60 e0       	ldi	r22, 0x00	; 0
    7688:	85 ea       	ldi	r24, 0xA5	; 165
    768a:	9b e0       	ldi	r25, 0x0B	; 11
    768c:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7690:	b1 2c       	mov	r11, r1
    7692:	a1 2c       	mov	r10, r1
    7694:	4c 0c       	add	r4, r12
    7696:	5d 1c       	adc	r5, r13
    7698:	14 01       	movw	r2, r8
    769a:	26 0c       	add	r2, r6
    769c:	37 1c       	adc	r3, r7
    769e:	82 01       	movw	r16, r4
    76a0:	0a 19       	sub	r16, r10
    76a2:	1b 09       	sbc	r17, r11
    76a4:	91 01       	movw	r18, r2
    76a6:	2a 19       	sub	r18, r10
    76a8:	3b 09       	sbc	r19, r11
    76aa:	b4 01       	movw	r22, r8
    76ac:	6a 0d       	add	r22, r10
    76ae:	7b 1d       	adc	r23, r11
    76b0:	a6 01       	movw	r20, r12
    76b2:	85 ea       	ldi	r24, 0xA5	; 165
    76b4:	9b e0       	ldi	r25, 0x0B	; 11
    76b6:	0e 94 4b 93 	call	0x12696	; 0x12696 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    76ba:	93 01       	movw	r18, r6
    76bc:	2a 19       	sub	r18, r10
    76be:	3b 09       	sbc	r19, r11
    76c0:	a6 01       	movw	r20, r12
    76c2:	49 5e       	subi	r20, 0xE9	; 233
    76c4:	5f 4f       	sbci	r21, 0xFF	; 255
    76c6:	b4 01       	movw	r22, r8
    76c8:	85 ea       	ldi	r24, 0xA5	; 165
    76ca:	9b e0       	ldi	r25, 0x0B	; 11
    76cc:	0e 94 0a 93 	call	0x12614	; 0x12614 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    76d0:	8f ef       	ldi	r24, 0xFF	; 255
    76d2:	a8 1a       	sub	r10, r24
    76d4:	b8 0a       	sbc	r11, r24
    76d6:	ef ef       	ldi	r30, 0xFF	; 255
    76d8:	ce 1a       	sub	r12, r30
    76da:	de 0a       	sbc	r13, r30
    76dc:	f4 e0       	ldi	r31, 0x04	; 4
    76de:	af 16       	cp	r10, r31
    76e0:	b1 04       	cpc	r11, r1
    76e2:	e9 f6       	brne	.-70     	; 0x769e <MenuPrepareStyle()+0xb8>
    76e4:	f7 01       	movw	r30, r14
    76e6:	e8 52       	subi	r30, 0x28	; 40
    76e8:	fd 4f       	sbci	r31, 0xFD	; 253
    76ea:	25 91       	lpm	r18, Z+
    76ec:	34 91       	lpm	r19, Z
    76ee:	f7 01       	movw	r30, r14
    76f0:	eb 53       	subi	r30, 0x3B	; 59
    76f2:	fd 4f       	sbci	r31, 0xFD	; 253
    76f4:	e4 91       	lpm	r30, Z
    76f6:	40 e0       	ldi	r20, 0x00	; 0
    76f8:	70 e0       	ldi	r23, 0x00	; 0
    76fa:	60 e0       	ldi	r22, 0x00	; 0
    76fc:	8e 2f       	mov	r24, r30
    76fe:	90 e0       	ldi	r25, 0x00	; 0
    7700:	f9 01       	movw	r30, r18
    7702:	19 95       	eicall
    7704:	0f 90       	pop	r0
    7706:	df 91       	pop	r29
    7708:	cf 91       	pop	r28
    770a:	1f 91       	pop	r17
    770c:	0f 91       	pop	r16
    770e:	ff 90       	pop	r15
    7710:	ef 90       	pop	r14
    7712:	df 90       	pop	r13
    7714:	cf 90       	pop	r12
    7716:	bf 90       	pop	r11
    7718:	af 90       	pop	r10
    771a:	9f 90       	pop	r9
    771c:	8f 90       	pop	r8
    771e:	7f 90       	pop	r7
    7720:	6f 90       	pop	r6
    7722:	5f 90       	pop	r5
    7724:	4f 90       	pop	r4
    7726:	3f 90       	pop	r3
    7728:	2f 90       	pop	r2
    772a:	08 95       	ret

0000772c <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryPrevMenujjh():
    772c:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <MenuHistoryIndex>
    7730:	88 23       	and	r24, r24
    7732:	29 f0       	breq	.+10     	; 0x773e <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)+0x12>
    7734:	81 50       	subi	r24, 0x01	; 1
    7736:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <MenuHistoryIndex>
    773a:	0c 94 f3 3a 	jmp	0x75e6	; 0x75e6 <MenuPrepareStyle()>
    773e:	08 95       	ret

00007740 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryNextMenujjh():
    7740:	20 91 64 09 	lds	r18, 0x0964	; 0x800964 <MenuHistoryIndex>
    7744:	2a 30       	cpi	r18, 0x0A	; 10
    7746:	70 f4       	brcc	.+28     	; 0x7764 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)+0x24>
    7748:	2f 5f       	subi	r18, 0xFF	; 255
    774a:	20 93 64 09 	sts	0x0964, r18	; 0x800964 <MenuHistoryIndex>
    774e:	30 e0       	ldi	r19, 0x00	; 0
    7750:	f9 01       	movw	r30, r18
    7752:	e1 59       	subi	r30, 0x91	; 145
    7754:	f6 4f       	sbci	r31, 0xF6	; 246
    7756:	80 83       	st	Z, r24
    7758:	2b 59       	subi	r18, 0x9B	; 155
    775a:	36 4f       	sbci	r19, 0xF6	; 246
    775c:	f9 01       	movw	r30, r18
    775e:	60 83       	st	Z, r22
    7760:	0c 94 f3 3a 	jmp	0x75e6	; 0x75e6 <MenuPrepareStyle()>
    7764:	08 95       	ret

00007766 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>:
_Z19MenuHistoryPrevMenujjh():
    7766:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <MenuHistoryIndex>
    776a:	88 23       	and	r24, r24
    776c:	29 f0       	breq	.+10     	; 0x7778 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]+0x12>
    776e:	81 50       	subi	r24, 0x01	; 1
    7770:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <MenuHistoryIndex>
    7774:	0c 94 f3 3a 	jmp	0x75e6	; 0x75e6 <MenuPrepareStyle()>
    7778:	08 95       	ret

0000777a <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z29click_tds_deassociate_onewirejjh():
    777a:	86 2f       	mov	r24, r22
    777c:	0e 94 75 8a 	call	0x114ea	; 0x114ea <tds_set_clear_wrom_id(unsigned char)>
    7780:	0c 94 b3 3b 	jmp	0x7766	; 0x7766 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

00007784 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>:
_Z30dialog_set_string_button_clickjjh():
    7784:	e0 91 7c 09 	lds	r30, 0x097C	; 0x80097c <dialog_save_string_function>
    7788:	f0 91 7d 09 	lds	r31, 0x097D	; 0x80097d <dialog_save_string_function+0x1>
    778c:	19 95       	eicall
    778e:	0c 94 b3 3b 	jmp	0x7766	; 0x7766 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

00007792 <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>:
_Z32dialog_set_variable_button_clickjjh():
    7792:	1f 93       	push	r17
    7794:	cf 93       	push	r28
    7796:	df 93       	push	r29
    7798:	ec 01       	movw	r28, r24
    779a:	14 2f       	mov	r17, r20
    779c:	90 e0       	ldi	r25, 0x00	; 0
    779e:	80 e0       	ldi	r24, 0x00	; 0
    77a0:	0e 94 19 d7 	call	0x1ae32	; 0x1ae32 <__floatunsisf>
    77a4:	ab 01       	movw	r20, r22
    77a6:	bc 01       	movw	r22, r24
    77a8:	85 e1       	ldi	r24, 0x15	; 21
    77aa:	8c 9f       	mul	r24, r28
    77ac:	f0 01       	movw	r30, r0
    77ae:	8d 9f       	mul	r24, r29
    77b0:	f0 0d       	add	r31, r0
    77b2:	11 24       	eor	r1, r1
    77b4:	ee 53       	subi	r30, 0x3E	; 62
    77b6:	f6 4f       	sbci	r31, 0xF6	; 246
    77b8:	03 88       	ldd	r0, Z+19	; 0x13
    77ba:	f4 89       	ldd	r31, Z+20	; 0x14
    77bc:	e0 2d       	mov	r30, r0
    77be:	21 2f       	mov	r18, r17
    77c0:	ce 01       	movw	r24, r28
    77c2:	19 95       	eicall
    77c4:	df 91       	pop	r29
    77c6:	cf 91       	pop	r28
    77c8:	1f 91       	pop	r17
    77ca:	0c 94 b3 3b 	jmp	0x7766	; 0x7766 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

000077ce <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>:
_Z23click_dialog_button_yesjjh():
    77ce:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <dialog_yes_args1>
    77d2:	e0 91 62 09 	lds	r30, 0x0962	; 0x800962 <dialog_yes_function>
    77d6:	f0 91 63 09 	lds	r31, 0x0963	; 0x800963 <dialog_yes_function+0x1>
    77da:	40 e0       	ldi	r20, 0x00	; 0
    77dc:	70 e0       	ldi	r23, 0x00	; 0
    77de:	60 e0       	ldi	r22, 0x00	; 0
    77e0:	90 e0       	ldi	r25, 0x00	; 0
    77e2:	19 95       	eicall
    77e4:	0c 94 b3 3b 	jmp	0x7766	; 0x7766 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

000077e8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>:
_Z19MenuHistoryNextMenujjh():
    77e8:	20 91 64 09 	lds	r18, 0x0964	; 0x800964 <MenuHistoryIndex>
    77ec:	2a 30       	cpi	r18, 0x0A	; 10
    77ee:	70 f4       	brcc	.+28     	; 0x780c <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]+0x24>
    77f0:	2f 5f       	subi	r18, 0xFF	; 255
    77f2:	20 93 64 09 	sts	0x0964, r18	; 0x800964 <MenuHistoryIndex>
    77f6:	30 e0       	ldi	r19, 0x00	; 0
    77f8:	f9 01       	movw	r30, r18
    77fa:	e1 59       	subi	r30, 0x91	; 145
    77fc:	f6 4f       	sbci	r31, 0xF6	; 246
    77fe:	80 83       	st	Z, r24
    7800:	2b 59       	subi	r18, 0x9B	; 155
    7802:	36 4f       	sbci	r19, 0xF6	; 246
    7804:	f9 01       	movw	r30, r18
    7806:	60 83       	st	Z, r22
    7808:	0c 94 f3 3a 	jmp	0x75e6	; 0x75e6 <MenuPrepareStyle()>
    780c:	08 95       	ret

0000780e <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_periodjjh():
    780e:	1f 93       	push	r17
    7810:	cf 93       	push	r28
    7812:	df 93       	push	r29
    7814:	c8 2f       	mov	r28, r24
    7816:	16 2f       	mov	r17, r22
    7818:	70 e0       	ldi	r23, 0x00	; 0
    781a:	60 e0       	ldi	r22, 0x00	; 0
    781c:	86 e6       	ldi	r24, 0x66	; 102
    781e:	90 e0       	ldi	r25, 0x00	; 0
    7820:	0e 94 f4 3b 	call	0x77e8	; 0x77e8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    7824:	81 2f       	mov	r24, r17
    7826:	0e 94 c9 89 	call	0x11392	; 0x11392 <tds_get_period(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    782a:	25 e1       	ldi	r18, 0x15	; 21
    782c:	c2 9f       	mul	r28, r18
    782e:	e0 01       	movw	r28, r0
    7830:	11 24       	eor	r1, r1
    7832:	ce 53       	subi	r28, 0x3E	; 62
    7834:	d6 4f       	sbci	r29, 0xF6	; 246
_Z27display_menu_tds_set_periodjjh():
    7836:	bc 01       	movw	r22, r24
    7838:	99 0f       	add	r25, r25
    783a:	88 0b       	sbc	r24, r24
    783c:	99 0b       	sbc	r25, r25
    783e:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
    7842:	68 83       	st	Y, r22
    7844:	79 83       	std	Y+1, r23	; 0x01
    7846:	8a 83       	std	Y+2, r24	; 0x02
    7848:	9b 83       	std	Y+3, r25	; 0x03
_Z29display_function_set_variableffffhhhhPFvjfhE():
    784a:	80 e0       	ldi	r24, 0x00	; 0
    784c:	90 e0       	ldi	r25, 0x00	; 0
    784e:	a0 e8       	ldi	r26, 0x80	; 128
    7850:	bf e3       	ldi	r27, 0x3F	; 63
    7852:	88 87       	std	Y+8, r24	; 0x08
    7854:	99 87       	std	Y+9, r25	; 0x09
    7856:	aa 87       	std	Y+10, r26	; 0x0a
    7858:	bb 87       	std	Y+11, r27	; 0x0b
    785a:	40 e0       	ldi	r20, 0x00	; 0
    785c:	50 e0       	ldi	r21, 0x00	; 0
    785e:	6f e7       	ldi	r22, 0x7F	; 127
    7860:	73 e4       	ldi	r23, 0x43	; 67
    7862:	4c 83       	std	Y+4, r20	; 0x04
    7864:	5d 83       	std	Y+5, r21	; 0x05
    7866:	6e 83       	std	Y+6, r22	; 0x06
    7868:	7f 83       	std	Y+7, r23	; 0x07
    786a:	8e 87       	std	Y+14, r24	; 0x0e
    786c:	9f 87       	std	Y+15, r25	; 0x0f
    786e:	a8 8b       	std	Y+16, r26	; 0x10
    7870:	b9 8b       	std	Y+17, r27	; 0x11
    7872:	81 e0       	ldi	r24, 0x01	; 1
    7874:	8d 87       	std	Y+13, r24	; 0x0d
    7876:	1a 8b       	std	Y+18, r17	; 0x12
    7878:	1c 86       	std	Y+12, r1	; 0x0c
    787a:	8a ee       	ldi	r24, 0xEA	; 234
    787c:	96 e3       	ldi	r25, 0x36	; 54
    787e:	9c 8b       	std	Y+20, r25	; 0x14
    7880:	8b 8b       	std	Y+19, r24	; 0x13
_Z27display_menu_tds_set_periodjjh():
    7882:	df 91       	pop	r29
    7884:	cf 91       	pop	r28
    7886:	1f 91       	pop	r17
    7888:	08 95       	ret

0000788a <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_offsetjjh():
    788a:	1f 93       	push	r17
    788c:	cf 93       	push	r28
    788e:	df 93       	push	r29
    7890:	c8 2f       	mov	r28, r24
    7892:	16 2f       	mov	r17, r22
    7894:	70 e0       	ldi	r23, 0x00	; 0
    7896:	60 e0       	ldi	r22, 0x00	; 0
    7898:	86 e6       	ldi	r24, 0x66	; 102
    789a:	90 e0       	ldi	r25, 0x00	; 0
    789c:	0e 94 f4 3b 	call	0x77e8	; 0x77e8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    78a0:	81 2f       	mov	r24, r17
    78a2:	0e 94 8a 89 	call	0x11314	; 0x11314 <tds_get_offset(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    78a6:	25 e1       	ldi	r18, 0x15	; 21
    78a8:	c2 9f       	mul	r28, r18
    78aa:	e0 01       	movw	r28, r0
    78ac:	11 24       	eor	r1, r1
    78ae:	ce 53       	subi	r28, 0x3E	; 62
    78b0:	d6 4f       	sbci	r29, 0xF6	; 246
_Z27display_menu_tds_set_offsetjjh():
    78b2:	bc 01       	movw	r22, r24
    78b4:	99 0f       	add	r25, r25
    78b6:	88 0b       	sbc	r24, r24
    78b8:	99 0b       	sbc	r25, r25
    78ba:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
    78be:	20 e0       	ldi	r18, 0x00	; 0
    78c0:	30 e0       	ldi	r19, 0x00	; 0
    78c2:	4a e7       	ldi	r20, 0x7A	; 122
    78c4:	54 e4       	ldi	r21, 0x44	; 68
    78c6:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    78ca:	68 83       	st	Y, r22
    78cc:	79 83       	std	Y+1, r23	; 0x01
    78ce:	8a 83       	std	Y+2, r24	; 0x02
    78d0:	9b 83       	std	Y+3, r25	; 0x03
    78d2:	80 e0       	ldi	r24, 0x00	; 0
    78d4:	90 e0       	ldi	r25, 0x00	; 0
    78d6:	a0 e2       	ldi	r26, 0x20	; 32
    78d8:	b1 ec       	ldi	r27, 0xC1	; 193
    78da:	88 87       	std	Y+8, r24	; 0x08
    78dc:	99 87       	std	Y+9, r25	; 0x09
    78de:	aa 87       	std	Y+10, r26	; 0x0a
    78e0:	bb 87       	std	Y+11, r27	; 0x0b
    78e2:	80 e0       	ldi	r24, 0x00	; 0
    78e4:	90 e0       	ldi	r25, 0x00	; 0
    78e6:	a0 e2       	ldi	r26, 0x20	; 32
    78e8:	b1 e4       	ldi	r27, 0x41	; 65
    78ea:	8c 83       	std	Y+4, r24	; 0x04
    78ec:	9d 83       	std	Y+5, r25	; 0x05
    78ee:	ae 83       	std	Y+6, r26	; 0x06
    78f0:	bf 83       	std	Y+7, r27	; 0x07
    78f2:	8d ec       	ldi	r24, 0xCD	; 205
    78f4:	9c ec       	ldi	r25, 0xCC	; 204
    78f6:	ac ec       	ldi	r26, 0xCC	; 204
    78f8:	bd e3       	ldi	r27, 0x3D	; 61
    78fa:	8e 87       	std	Y+14, r24	; 0x0e
    78fc:	9f 87       	std	Y+15, r25	; 0x0f
    78fe:	a8 8b       	std	Y+16, r26	; 0x10
    7900:	b9 8b       	std	Y+17, r27	; 0x11
    7902:	1d 86       	std	Y+13, r1	; 0x0d
    7904:	1a 8b       	std	Y+18, r17	; 0x12
    7906:	1c 86       	std	Y+12, r1	; 0x0c
    7908:	81 ed       	ldi	r24, 0xD1	; 209
    790a:	96 e3       	ldi	r25, 0x36	; 54
    790c:	9c 8b       	std	Y+20, r25	; 0x14
    790e:	8b 8b       	std	Y+19, r24	; 0x13
_Z27display_menu_tds_set_offsetjjh():
    7910:	df 91       	pop	r29
    7912:	cf 91       	pop	r28
    7914:	1f 91       	pop	r17
    7916:	08 95       	ret

00007918 <button_click_term_set_mode_via_dialog(unsigned int, unsigned int, unsigned char)>:
_Z37button_click_term_set_mode_via_dialogjjh():
    7918:	60 91 2e 0a 	lds	r22, 0x0A2E	; 0x800a2e <default_ring>
    791c:	6f 3f       	cpi	r22, 0xFF	; 255
    791e:	29 f0       	breq	.+10     	; 0x792a <button_click_term_set_mode_via_dialog(unsigned int, unsigned int, unsigned char)+0x12>
    7920:	70 e0       	ldi	r23, 0x00	; 0
    7922:	88 e6       	ldi	r24, 0x68	; 104
    7924:	90 e0       	ldi	r25, 0x00	; 0
    7926:	0c 94 f4 3b 	jmp	0x77e8	; 0x77e8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    792a:	08 95       	ret

0000792c <button_click_nastaveni_ring_screen(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_nastaveni_ring_screenjjh():
    792c:	60 91 2e 0a 	lds	r22, 0x0A2E	; 0x800a2e <default_ring>
    7930:	6f 3f       	cpi	r22, 0xFF	; 255
    7932:	19 f0       	breq	.+6      	; 0x793a <button_click_nastaveni_ring_screen(unsigned int, unsigned int, unsigned char)+0xe>
    7934:	70 e0       	ldi	r23, 0x00	; 0
    7936:	0c 94 f4 3b 	jmp	0x77e8	; 0x77e8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    793a:	08 95       	ret

0000793c <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>:
_Z43button_click_set_new_default_ring_in_dialogjjh():
    793c:	cf 93       	push	r28
    793e:	c4 2f       	mov	r28, r20
    7940:	84 2f       	mov	r24, r20
    7942:	0e 94 11 8e 	call	0x11c22	; 0x11c22 <thermostat_ring_get_active(unsigned char)>
    7946:	8f 3f       	cpi	r24, 0xFF	; 255
    7948:	51 f0       	breq	.+20     	; 0x795e <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)+0x22>
    794a:	c0 93 2e 0a 	sts	0x0A2E, r28	; 0x800a2e <default_ring>
_Z22MenuHistoryUpdateArgs1h():
    794e:	e0 91 64 09 	lds	r30, 0x0964	; 0x800964 <MenuHistoryIndex>
    7952:	f0 e0       	ldi	r31, 0x00	; 0
    7954:	eb 59       	subi	r30, 0x9B	; 155
    7956:	f6 4f       	sbci	r31, 0xF6	; 246
    7958:	c0 83       	st	Z, r28
_Z43button_click_set_new_default_ring_in_dialogjjh():
    795a:	cf 91       	pop	r28
    795c:	08 95       	ret
    795e:	70 e0       	ldi	r23, 0x00	; 0
    7960:	60 e0       	ldi	r22, 0x00	; 0
    7962:	84 e6       	ldi	r24, 0x64	; 100
    7964:	90 e0       	ldi	r25, 0x00	; 0
    7966:	0e 94 f4 3b 	call	0x77e8	; 0x77e8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    796a:	88 e5       	ldi	r24, 0x58	; 88
    796c:	97 e4       	ldi	r25, 0x47	; 71
    796e:	90 93 63 09 	sts	0x0963, r25	; 0x800963 <dialog_yes_function+0x1>
    7972:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <dialog_yes_function>
    7976:	c0 93 c1 09 	sts	0x09C1, r28	; 0x8009c1 <dialog_yes_args1>
    797a:	6a e8       	ldi	r22, 0x8A	; 138
    797c:	78 e5       	ldi	r23, 0x58	; 88
    797e:	81 ea       	ldi	r24, 0xA1	; 161
    7980:	99 e0       	ldi	r25, 0x09	; 9
    7982:	cf 91       	pop	r28
    7984:	0c 94 46 dc 	jmp	0x1b88c	; 0x1b88c <strcpy_P>

00007988 <click_thermostat_set_ring_via_dialog(unsigned int, unsigned int, unsigned char)>:
_Z36click_thermostat_set_ring_via_dialogjjh():
    7988:	60 91 2e 0a 	lds	r22, 0x0A2E	; 0x800a2e <default_ring>
    798c:	70 e0       	ldi	r23, 0x00	; 0
    798e:	8a e0       	ldi	r24, 0x0A	; 10
    7990:	90 e0       	ldi	r25, 0x00	; 0
    7992:	0c 94 f4 3b 	jmp	0x77e8	; 0x77e8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>

00007996 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirejjh():
    7996:	cf 93       	push	r28
    7998:	8b e0       	ldi	r24, 0x0B	; 11
    799a:	48 9f       	mul	r20, r24
    799c:	f0 01       	movw	r30, r0
    799e:	11 24       	eor	r1, r1
    79a0:	ee 5a       	subi	r30, 0xAE	; 174
    79a2:	f0 4f       	sbci	r31, 0xF0	; 240
    79a4:	62 85       	ldd	r22, Z+10	; 0x0a
    79a6:	6f 3f       	cpi	r22, 0xFF	; 255
    79a8:	b1 f4       	brne	.+44     	; 0x79d6 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)+0x40>
    79aa:	c4 2f       	mov	r28, r20
    79ac:	70 e0       	ldi	r23, 0x00	; 0
    79ae:	60 e0       	ldi	r22, 0x00	; 0
    79b0:	84 e6       	ldi	r24, 0x64	; 100
    79b2:	90 e0       	ldi	r25, 0x00	; 0
    79b4:	0e 94 f4 3b 	call	0x77e8	; 0x77e8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    79b8:	8d ef       	ldi	r24, 0xFD	; 253
    79ba:	96 e3       	ldi	r25, 0x36	; 54
    79bc:	90 93 63 09 	sts	0x0963, r25	; 0x800963 <dialog_yes_function+0x1>
    79c0:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <dialog_yes_function>
    79c4:	c0 93 c1 09 	sts	0x09C1, r28	; 0x8009c1 <dialog_yes_args1>
    79c8:	6b ef       	ldi	r22, 0xFB	; 251
    79ca:	77 e5       	ldi	r23, 0x57	; 87
    79cc:	81 ea       	ldi	r24, 0xA1	; 161
    79ce:	99 e0       	ldi	r25, 0x09	; 9
    79d0:	cf 91       	pop	r28
    79d2:	0c 94 46 dc 	jmp	0x1b88c	; 0x1b88c <strcpy_P>
    79d6:	70 e0       	ldi	r23, 0x00	; 0
    79d8:	84 e0       	ldi	r24, 0x04	; 4
    79da:	90 e0       	ldi	r25, 0x00	; 0
    79dc:	cf 91       	pop	r28
    79de:	0c 94 f4 3b 	jmp	0x77e8	; 0x77e8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>

000079e2 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>:
_Z26display_element_set_stringPchhPFvjjhE():
    79e2:	0f 93       	push	r16
    79e4:	1f 93       	push	r17
    79e6:	cf 93       	push	r28
    79e8:	df 93       	push	r29
    79ea:	06 2f       	mov	r16, r22
    79ec:	14 2f       	mov	r17, r20
    79ee:	e9 01       	movw	r28, r18
    79f0:	bc 01       	movw	r22, r24
    79f2:	81 e8       	ldi	r24, 0x81	; 129
    79f4:	99 e0       	ldi	r25, 0x09	; 9
    79f6:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    79fa:	00 93 80 09 	sts	0x0980, r16	; 0x800980 <dialog_set_string_max_length>
    79fe:	10 93 7f 09 	sts	0x097F, r17	; 0x80097f <dialog_set_string_args>
    7a02:	d0 93 7d 09 	sts	0x097D, r29	; 0x80097d <dialog_save_string_function+0x1>
    7a06:	c0 93 7c 09 	sts	0x097C, r28	; 0x80097c <dialog_save_string_function>
    7a0a:	df 91       	pop	r29
    7a0c:	cf 91       	pop	r28
    7a0e:	1f 91       	pop	r17
    7a10:	0f 91       	pop	r16
    7a12:	08 95       	ret

00007a14 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>:
_Z25display_menu_tds_set_namejjh():
    7a14:	1f 93       	push	r17
    7a16:	cf 93       	push	r28
    7a18:	df 93       	push	r29
    7a1a:	00 d0       	rcall	.+0      	; 0x7a1c <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0x8>
    7a1c:	00 d0       	rcall	.+0      	; 0x7a1e <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0xa>
    7a1e:	00 d0       	rcall	.+0      	; 0x7a20 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0xc>
    7a20:	1f 92       	push	r1
    7a22:	cd b7       	in	r28, 0x3d	; 61
    7a24:	de b7       	in	r29, 0x3e	; 62
    7a26:	16 2f       	mov	r17, r22
    7a28:	be 01       	movw	r22, r28
    7a2a:	6f 5f       	subi	r22, 0xFF	; 255
    7a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    7a2e:	81 2f       	mov	r24, r17
    7a30:	0e 94 14 89 	call	0x11228	; 0x11228 <tds_get_name(unsigned char, char*)>
    7a34:	70 e0       	ldi	r23, 0x00	; 0
    7a36:	60 e0       	ldi	r22, 0x00	; 0
    7a38:	87 e6       	ldi	r24, 0x67	; 103
    7a3a:	90 e0       	ldi	r25, 0x00	; 0
    7a3c:	0e 94 f4 3b 	call	0x77e8	; 0x77e8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    7a40:	2f e5       	ldi	r18, 0x5F	; 95
    7a42:	3d e3       	ldi	r19, 0x3D	; 61
    7a44:	41 2f       	mov	r20, r17
    7a46:	68 e0       	ldi	r22, 0x08	; 8
    7a48:	ce 01       	movw	r24, r28
    7a4a:	01 96       	adiw	r24, 0x01	; 1
    7a4c:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    7a50:	2a 96       	adiw	r28, 0x0a	; 10
    7a52:	0f b6       	in	r0, 0x3f	; 63
    7a54:	f8 94       	cli
    7a56:	de bf       	out	0x3e, r29	; 62
    7a58:	0f be       	out	0x3f, r0	; 63
    7a5a:	cd bf       	out	0x3d, r28	; 61
    7a5c:	df 91       	pop	r29
    7a5e:	cf 91       	pop	r28
    7a60:	1f 91       	pop	r17
    7a62:	08 95       	ret

00007a64 <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)>:
_Z44button_click_set_term_ring_name_via_keyboardjjh():
    7a64:	1f 93       	push	r17
    7a66:	cf 93       	push	r28
    7a68:	df 93       	push	r29
    7a6a:	00 d0       	rcall	.+0      	; 0x7a6c <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0x8>
    7a6c:	00 d0       	rcall	.+0      	; 0x7a6e <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0xa>
    7a6e:	00 d0       	rcall	.+0      	; 0x7a70 <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0xc>
    7a70:	1f 92       	push	r1
    7a72:	cd b7       	in	r28, 0x3d	; 61
    7a74:	de b7       	in	r29, 0x3e	; 62
    7a76:	10 91 2e 0a 	lds	r17, 0x0A2E	; 0x800a2e <default_ring>
    7a7a:	be 01       	movw	r22, r28
    7a7c:	6f 5f       	subi	r22, 0xFF	; 255
    7a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    7a80:	81 2f       	mov	r24, r17
    7a82:	0e 94 b6 8d 	call	0x11b6c	; 0x11b6c <thermostat_ring_get_name(unsigned char, char*)>
    7a86:	70 e0       	ldi	r23, 0x00	; 0
    7a88:	60 e0       	ldi	r22, 0x00	; 0
    7a8a:	87 e6       	ldi	r24, 0x67	; 103
    7a8c:	90 e0       	ldi	r25, 0x00	; 0
    7a8e:	0e 94 f4 3b 	call	0x77e8	; 0x77e8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    7a92:	2e e7       	ldi	r18, 0x7E	; 126
    7a94:	3d e3       	ldi	r19, 0x3D	; 61
    7a96:	41 2f       	mov	r20, r17
    7a98:	69 e0       	ldi	r22, 0x09	; 9
    7a9a:	ce 01       	movw	r24, r28
    7a9c:	01 96       	adiw	r24, 0x01	; 1
    7a9e:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    7aa2:	2a 96       	adiw	r28, 0x0a	; 10
    7aa4:	0f b6       	in	r0, 0x3f	; 63
    7aa6:	f8 94       	cli
    7aa8:	de bf       	out	0x3e, r29	; 62
    7aaa:	0f be       	out	0x3f, r0	; 63
    7aac:	cd bf       	out	0x3d, r28	; 61
    7aae:	df 91       	pop	r29
    7ab0:	cf 91       	pop	r28
    7ab2:	1f 91       	pop	r17
    7ab4:	08 95       	ret

00007ab6 <display_element_get_string(char*)>:
_Z26display_element_get_stringPc():
    7ab6:	61 e8       	ldi	r22, 0x81	; 129
    7ab8:	79 e0       	ldi	r23, 0x09	; 9
    7aba:	0c 94 79 dc 	jmp	0x1b8f2	; 0x1b8f2 <strcpy>

00007abe <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>:
_Z18menu_tds_save_namejjh():
    7abe:	cf 93       	push	r28
    7ac0:	df 93       	push	r29
    7ac2:	00 d0       	rcall	.+0      	; 0x7ac4 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x6>
    7ac4:	00 d0       	rcall	.+0      	; 0x7ac6 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x8>
    7ac6:	00 d0       	rcall	.+0      	; 0x7ac8 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0xa>
    7ac8:	1f 92       	push	r1
    7aca:	cd b7       	in	r28, 0x3d	; 61
    7acc:	de b7       	in	r29, 0x3e	; 62
    7ace:	ce 01       	movw	r24, r28
    7ad0:	01 96       	adiw	r24, 0x01	; 1
    7ad2:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <display_element_get_string(char*)>
    7ad6:	89 81       	ldd	r24, Y+1	; 0x01
    7ad8:	88 23       	and	r24, r24
    7ada:	39 f0       	breq	.+14     	; 0x7aea <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x2c>
    7adc:	be 01       	movw	r22, r28
    7ade:	6f 5f       	subi	r22, 0xFF	; 255
    7ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    7ae2:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <dialog_set_string_args>
    7ae6:	0e 94 37 89 	call	0x1126e	; 0x1126e <tds_set_name(unsigned char, char*)>
    7aea:	2a 96       	adiw	r28, 0x0a	; 10
    7aec:	0f b6       	in	r0, 0x3f	; 63
    7aee:	f8 94       	cli
    7af0:	de bf       	out	0x3e, r29	; 62
    7af2:	0f be       	out	0x3f, r0	; 63
    7af4:	cd bf       	out	0x3d, r28	; 61
    7af6:	df 91       	pop	r29
    7af8:	cf 91       	pop	r28
    7afa:	08 95       	ret

00007afc <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)>:
_Z25helper_set_term_ring_namejjh():
    7afc:	cf 93       	push	r28
    7afe:	df 93       	push	r29
    7b00:	00 d0       	rcall	.+0      	; 0x7b02 <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)+0x6>
    7b02:	00 d0       	rcall	.+0      	; 0x7b04 <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)+0x8>
    7b04:	00 d0       	rcall	.+0      	; 0x7b06 <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)+0xa>
    7b06:	1f 92       	push	r1
    7b08:	cd b7       	in	r28, 0x3d	; 61
    7b0a:	de b7       	in	r29, 0x3e	; 62
    7b0c:	ce 01       	movw	r24, r28
    7b0e:	01 96       	adiw	r24, 0x01	; 1
    7b10:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <display_element_get_string(char*)>
    7b14:	be 01       	movw	r22, r28
    7b16:	6f 5f       	subi	r22, 0xFF	; 255
    7b18:	7f 4f       	sbci	r23, 0xFF	; 255
    7b1a:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <dialog_set_string_args>
    7b1e:	0e 94 da 8d 	call	0x11bb4	; 0x11bb4 <thermostat_ring_set_name(unsigned char, char*)>
    7b22:	2a 96       	adiw	r28, 0x0a	; 10
    7b24:	0f b6       	in	r0, 0x3f	; 63
    7b26:	f8 94       	cli
    7b28:	de bf       	out	0x3e, r29	; 62
    7b2a:	0f be       	out	0x3f, r0	; 63
    7b2c:	cd bf       	out	0x3d, r28	; 61
    7b2e:	df 91       	pop	r29
    7b30:	cf 91       	pop	r28
    7b32:	08 95       	ret

00007b34 <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
    7b34:	e1 e8       	ldi	r30, 0x81	; 129
    7b36:	f9 e0       	ldi	r31, 0x09	; 9
    7b38:	01 90       	ld	r0, Z+
    7b3a:	00 20       	and	r0, r0
    7b3c:	e9 f7       	brne	.-6      	; 0x7b38 <display_element_set_string_add_char(char)+0x4>
    7b3e:	e2 58       	subi	r30, 0x82	; 130
    7b40:	f9 40       	sbci	r31, 0x09	; 9
    7b42:	ff 27       	eor	r31, r31
    7b44:	20 91 80 09 	lds	r18, 0x0980	; 0x800980 <dialog_set_string_max_length>
    7b48:	21 50       	subi	r18, 0x01	; 1
    7b4a:	33 0b       	sbc	r19, r19
    7b4c:	e2 17       	cp	r30, r18
    7b4e:	f3 07       	cpc	r31, r19
    7b50:	24 f4       	brge	.+8      	; 0x7b5a <display_element_set_string_add_char(char)+0x26>
    7b52:	ef 57       	subi	r30, 0x7F	; 127
    7b54:	f6 4f       	sbci	r31, 0xF6	; 246
    7b56:	80 83       	st	Z, r24
    7b58:	11 82       	std	Z+1, r1	; 0x01
    7b5a:	08 95       	ret

00007b5c <click_keyboard_number(unsigned int, unsigned int, unsigned char)>:
_Z21click_keyboard_numberjjh():
    7b5c:	80 e3       	ldi	r24, 0x30	; 48
    7b5e:	84 0f       	add	r24, r20
    7b60:	4a 30       	cpi	r20, 0x0A	; 10
    7b62:	09 f4       	brne	.+2      	; 0x7b66 <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0xa>
    7b64:	8e e2       	ldi	r24, 0x2E	; 46
    7b66:	0c 94 9a 3d 	jmp	0x7b34	; 0x7b34 <display_element_set_string_add_char(char)>

00007b6a <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_alfajjh():
    7b6a:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <dialog_set_string_keyboard_type>
    7b6e:	91 11       	cpse	r25, r1
    7b70:	07 c0       	rjmp	.+14     	; 0x7b80 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x16>
    7b72:	e4 2f       	mov	r30, r20
    7b74:	f0 e0       	ldi	r31, 0x00	; 0
    7b76:	eb 5a       	subi	r30, 0xAB	; 171
    7b78:	fa 4a       	sbci	r31, 0xAA	; 170
    7b7a:	84 91       	lpm	r24, Z
    7b7c:	0c 94 9a 3d 	jmp	0x7b34	; 0x7b34 <display_element_set_string_add_char(char)>
    7b80:	91 30       	cpi	r25, 0x01	; 1
    7b82:	29 f4       	brne	.+10     	; 0x7b8e <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x24>
    7b84:	e4 2f       	mov	r30, r20
    7b86:	f0 e0       	ldi	r31, 0x00	; 0
    7b88:	e5 5c       	subi	r30, 0xC5	; 197
    7b8a:	fa 4a       	sbci	r31, 0xAA	; 170
    7b8c:	f6 cf       	rjmp	.-20     	; 0x7b7a <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>
    7b8e:	92 30       	cpi	r25, 0x02	; 2
    7b90:	a9 f7       	brne	.-22     	; 0x7b7c <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x12>
    7b92:	e4 2f       	mov	r30, r20
    7b94:	f0 e0       	ldi	r31, 0x00	; 0
    7b96:	ef 5d       	subi	r30, 0xDF	; 223
    7b98:	fa 4a       	sbci	r31, 0xAA	; 170
    7b9a:	ef cf       	rjmp	.-34     	; 0x7b7a <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>

00007b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>:
_Z11show_stringPciihjjb():
    7b9c:	6f 92       	push	r6
    7b9e:	7f 92       	push	r7
    7ba0:	8f 92       	push	r8
    7ba2:	9f 92       	push	r9
    7ba4:	af 92       	push	r10
    7ba6:	bf 92       	push	r11
    7ba8:	cf 92       	push	r12
    7baa:	df 92       	push	r13
    7bac:	ef 92       	push	r14
    7bae:	ff 92       	push	r15
    7bb0:	0f 93       	push	r16
    7bb2:	1f 93       	push	r17
    7bb4:	cf 93       	push	r28
    7bb6:	df 93       	push	r29
    7bb8:	00 d0       	rcall	.+0      	; 0x7bba <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)+0x1e>
    7bba:	00 d0       	rcall	.+0      	; 0x7bbc <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)+0x20>
    7bbc:	cd b7       	in	r28, 0x3d	; 61
    7bbe:	de b7       	in	r29, 0x3e	; 62
    7bc0:	3c 01       	movw	r6, r24
    7bc2:	5b 01       	movw	r10, r22
    7bc4:	4a 01       	movw	r8, r20
    7bc6:	d2 2e       	mov	r13, r18
    7bc8:	6c 2d       	mov	r22, r12
    7bca:	85 ea       	ldi	r24, 0xA5	; 165
    7bcc:	9b e0       	ldi	r25, 0x0B	; 11
    7bce:	0e 94 a7 93 	call	0x1274e	; 0x1274e <LCDWIKI_GUI::Set_Text_Mode(bool)>
    7bd2:	6d 2d       	mov	r22, r13
    7bd4:	85 ea       	ldi	r24, 0xA5	; 165
    7bd6:	9b e0       	ldi	r25, 0x0B	; 11
    7bd8:	0e 94 a4 93 	call	0x12748	; 0x12748 <LCDWIKI_GUI::Set_Text_Size(unsigned char)>
    7bdc:	b8 01       	movw	r22, r16
    7bde:	85 ea       	ldi	r24, 0xA5	; 165
    7be0:	9b e0       	ldi	r25, 0x0B	; 11
    7be2:	0e 94 9c 93 	call	0x12738	; 0x12738 <LCDWIKI_GUI::Set_Text_colour(unsigned int)>
    7be6:	b7 01       	movw	r22, r14
    7be8:	85 ea       	ldi	r24, 0xA5	; 165
    7bea:	9b e0       	ldi	r25, 0x0B	; 11
    7bec:	0e 94 a0 93 	call	0x12740	; 0x12740 <LCDWIKI_GUI::Set_Text_Back_colour(unsigned int)>
    7bf0:	b3 01       	movw	r22, r6
    7bf2:	ce 01       	movw	r24, r28
    7bf4:	01 96       	adiw	r24, 0x01	; 1
    7bf6:	0e 94 d4 d5 	call	0x1aba8	; 0x1aba8 <String::String(char const*)>
    7bfa:	94 01       	movw	r18, r8
    7bfc:	a5 01       	movw	r20, r10
    7bfe:	be 01       	movw	r22, r28
    7c00:	6f 5f       	subi	r22, 0xFF	; 255
    7c02:	7f 4f       	sbci	r23, 0xFF	; 255
    7c04:	85 ea       	ldi	r24, 0xA5	; 165
    7c06:	9b e0       	ldi	r25, 0x0B	; 11
    7c08:	0e 94 2d 95 	call	0x12a5a	; 0x12a5a <LCDWIKI_GUI::Print_String(String, int, int)>
    7c0c:	ce 01       	movw	r24, r28
    7c0e:	01 96       	adiw	r24, 0x01	; 1
    7c10:	0e 94 65 d5 	call	0x1aaca	; 0x1aaca <String::~String()>
    7c14:	26 96       	adiw	r28, 0x06	; 6
    7c16:	0f b6       	in	r0, 0x3f	; 63
    7c18:	f8 94       	cli
    7c1a:	de bf       	out	0x3e, r29	; 62
    7c1c:	0f be       	out	0x3f, r0	; 63
    7c1e:	cd bf       	out	0x3d, r28	; 61
    7c20:	df 91       	pop	r29
    7c22:	cf 91       	pop	r28
    7c24:	1f 91       	pop	r17
    7c26:	0f 91       	pop	r16
    7c28:	ff 90       	pop	r15
    7c2a:	ef 90       	pop	r14
    7c2c:	df 90       	pop	r13
    7c2e:	cf 90       	pop	r12
    7c30:	bf 90       	pop	r11
    7c32:	af 90       	pop	r10
    7c34:	9f 90       	pop	r9
    7c36:	8f 90       	pop	r8
    7c38:	7f 90       	pop	r7
    7c3a:	6f 90       	pop	r6
    7c3c:	08 95       	ret

00007c3e <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_dialog_default_ringjjjjhhPc():
    7c3e:	8f 92       	push	r8
    7c40:	9f 92       	push	r9
    7c42:	af 92       	push	r10
    7c44:	bf 92       	push	r11
    7c46:	cf 92       	push	r12
    7c48:	ef 92       	push	r14
    7c4a:	ff 92       	push	r15
    7c4c:	0f 93       	push	r16
    7c4e:	1f 93       	push	r17
    7c50:	cf 93       	push	r28
    7c52:	df 93       	push	r29
    7c54:	cd b7       	in	r28, 0x3d	; 61
    7c56:	de b7       	in	r29, 0x3e	; 62
    7c58:	a8 97       	sbiw	r28, 0x28	; 40
    7c5a:	0f b6       	in	r0, 0x3f	; 63
    7c5c:	f8 94       	cli
    7c5e:	de bf       	out	0x3e, r29	; 62
    7c60:	0f be       	out	0x3f, r0	; 63
    7c62:	cd bf       	out	0x3d, r28	; 61
    7c64:	5c 01       	movw	r10, r24
    7c66:	4b 01       	movw	r8, r22
    7c68:	6a e6       	ldi	r22, 0x6A	; 106
    7c6a:	79 e5       	ldi	r23, 0x59	; 89
    7c6c:	ce 01       	movw	r24, r28
    7c6e:	01 96       	adiw	r24, 0x01	; 1
    7c70:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    7c74:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    7c78:	0e 94 11 8e 	call	0x11c22	; 0x11c22 <thermostat_ring_get_active(unsigned char)>
    7c7c:	8f 3f       	cpi	r24, 0xFF	; 255
    7c7e:	69 f1       	breq	.+90     	; 0x7cda <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x9c>
    7c80:	be 01       	movw	r22, r28
    7c82:	61 5e       	subi	r22, 0xE1	; 225
    7c84:	7f 4f       	sbci	r23, 0xFF	; 255
    7c86:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    7c8a:	0e 94 b6 8d 	call	0x11b6c	; 0x11b6c <thermostat_ring_get_name(unsigned char, char*)>
    7c8e:	be 01       	movw	r22, r28
    7c90:	61 5e       	subi	r22, 0xE1	; 225
    7c92:	7f 4f       	sbci	r23, 0xFF	; 255
    7c94:	ce 01       	movw	r24, r28
    7c96:	01 96       	adiw	r24, 0x01	; 1
    7c98:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    7c9c:	c1 2c       	mov	r12, r1
    7c9e:	ee 24       	eor	r14, r14
    7ca0:	ea 94       	dec	r14
    7ca2:	fe 2c       	mov	r15, r14
    7ca4:	10 e0       	ldi	r17, 0x00	; 0
    7ca6:	00 e0       	ldi	r16, 0x00	; 0
    7ca8:	22 e0       	ldi	r18, 0x02	; 2
    7caa:	a4 01       	movw	r20, r8
    7cac:	b5 01       	movw	r22, r10
    7cae:	ce 01       	movw	r24, r28
    7cb0:	01 96       	adiw	r24, 0x01	; 1
    7cb2:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7cb6:	a8 96       	adiw	r28, 0x28	; 40
    7cb8:	0f b6       	in	r0, 0x3f	; 63
    7cba:	f8 94       	cli
    7cbc:	de bf       	out	0x3e, r29	; 62
    7cbe:	0f be       	out	0x3f, r0	; 63
    7cc0:	cd bf       	out	0x3d, r28	; 61
    7cc2:	df 91       	pop	r29
    7cc4:	cf 91       	pop	r28
    7cc6:	1f 91       	pop	r17
    7cc8:	0f 91       	pop	r16
    7cca:	ff 90       	pop	r15
    7ccc:	ef 90       	pop	r14
    7cce:	cf 90       	pop	r12
    7cd0:	bf 90       	pop	r11
    7cd2:	af 90       	pop	r10
    7cd4:	9f 90       	pop	r9
    7cd6:	8f 90       	pop	r8
    7cd8:	08 95       	ret
    7cda:	64 ea       	ldi	r22, 0xA4	; 164
    7cdc:	78 e5       	ldi	r23, 0x58	; 88
    7cde:	ce 01       	movw	r24, r28
    7ce0:	4f 96       	adiw	r24, 0x1f	; 31
    7ce2:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    7ce6:	d3 cf       	rjmp	.-90     	; 0x7c8e <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x50>

00007ce8 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z32display_element_dialog_show_textjjjjhhPc():
    7ce8:	cf 92       	push	r12
    7cea:	ef 92       	push	r14
    7cec:	ff 92       	push	r15
    7cee:	0f 93       	push	r16
    7cf0:	1f 93       	push	r17
    7cf2:	ab 01       	movw	r20, r22
    7cf4:	c1 2c       	mov	r12, r1
    7cf6:	ee 24       	eor	r14, r14
    7cf8:	ea 94       	dec	r14
    7cfa:	fe 2c       	mov	r15, r14
    7cfc:	10 e0       	ldi	r17, 0x00	; 0
    7cfe:	00 e0       	ldi	r16, 0x00	; 0
    7d00:	22 e0       	ldi	r18, 0x02	; 2
    7d02:	bc 01       	movw	r22, r24
    7d04:	81 ea       	ldi	r24, 0xA1	; 161
    7d06:	99 e0       	ldi	r25, 0x09	; 9
    7d08:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7d0c:	1f 91       	pop	r17
    7d0e:	0f 91       	pop	r16
    7d10:	ff 90       	pop	r15
    7d12:	ef 90       	pop	r14
    7d14:	cf 90       	pop	r12
    7d16:	08 95       	ret

00007d18 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z38display_element_show_tds_info_dynamicsjjjjhhPc():
    7d18:	af 92       	push	r10
    7d1a:	bf 92       	push	r11
    7d1c:	cf 92       	push	r12
    7d1e:	df 92       	push	r13
    7d20:	ef 92       	push	r14
    7d22:	ff 92       	push	r15
    7d24:	0f 93       	push	r16
    7d26:	1f 93       	push	r17
    7d28:	cf 93       	push	r28
    7d2a:	df 93       	push	r29
    7d2c:	cd b7       	in	r28, 0x3d	; 61
    7d2e:	de b7       	in	r29, 0x3e	; 62
    7d30:	ca 54       	subi	r28, 0x4A	; 74
    7d32:	d1 09       	sbc	r29, r1
    7d34:	0f b6       	in	r0, 0x3f	; 63
    7d36:	f8 94       	cli
    7d38:	de bf       	out	0x3e, r29	; 62
    7d3a:	0f be       	out	0x3f, r0	; 63
    7d3c:	cd bf       	out	0x3d, r28	; 61
    7d3e:	6c 01       	movw	r12, r24
    7d40:	5b 01       	movw	r10, r22
    7d42:	be 01       	movw	r22, r28
    7d44:	6b 5c       	subi	r22, 0xCB	; 203
    7d46:	7f 4f       	sbci	r23, 0xFF	; 255
    7d48:	8e 2d       	mov	r24, r14
    7d4a:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
    7d4e:	81 30       	cpi	r24, 0x01	; 1
    7d50:	e1 f5       	brne	.+120    	; 0x7dca <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb2>
    7d52:	8e e1       	ldi	r24, 0x1E	; 30
    7d54:	e8 9e       	mul	r14, r24
    7d56:	f0 01       	movw	r30, r0
    7d58:	11 24       	eor	r1, r1
    7d5a:	eb 56       	subi	r30, 0x6B	; 107
    7d5c:	f0 4f       	sbci	r31, 0xF0	; 240
    7d5e:	65 81       	ldd	r22, Z+5	; 0x05
    7d60:	76 81       	ldd	r23, Z+6	; 0x06
    7d62:	07 2e       	mov	r0, r23
    7d64:	00 0c       	add	r0, r0
    7d66:	88 0b       	sbc	r24, r24
    7d68:	99 0b       	sbc	r25, r25
    7d6a:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
    7d6e:	20 e0       	ldi	r18, 0x00	; 0
    7d70:	30 e0       	ldi	r19, 0x00	; 0
    7d72:	4a e7       	ldi	r20, 0x7A	; 122
    7d74:	54 e4       	ldi	r21, 0x44	; 68
    7d76:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
    7d7a:	8e 01       	movw	r16, r28
    7d7c:	05 5e       	subi	r16, 0xE5	; 229
    7d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    7d80:	22 e0       	ldi	r18, 0x02	; 2
    7d82:	44 e0       	ldi	r20, 0x04	; 4
    7d84:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
    7d88:	6e e7       	ldi	r22, 0x7E	; 126
    7d8a:	75 e0       	ldi	r23, 0x05	; 5
    7d8c:	c8 01       	movw	r24, r16
    7d8e:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    7d92:	67 ee       	ldi	r22, 0xE7	; 231
    7d94:	79 e5       	ldi	r23, 0x59	; 89
    7d96:	ce 01       	movw	r24, r28
    7d98:	01 96       	adiw	r24, 0x01	; 1
    7d9a:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    7d9e:	b8 01       	movw	r22, r16
    7da0:	ce 01       	movw	r24, r28
    7da2:	01 96       	adiw	r24, 0x01	; 1
    7da4:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    7da8:	a5 01       	movw	r20, r10
    7daa:	44 57       	subi	r20, 0x74	; 116
    7dac:	5f 4f       	sbci	r21, 0xFF	; 255
    7dae:	b6 01       	movw	r22, r12
    7db0:	66 5f       	subi	r22, 0xF6	; 246
    7db2:	7f 4f       	sbci	r23, 0xFF	; 255
    7db4:	c1 2c       	mov	r12, r1
    7db6:	ee 24       	eor	r14, r14
    7db8:	ea 94       	dec	r14
    7dba:	fe 2c       	mov	r15, r14
    7dbc:	10 e0       	ldi	r17, 0x00	; 0
    7dbe:	00 e0       	ldi	r16, 0x00	; 0
    7dc0:	22 e0       	ldi	r18, 0x02	; 2
    7dc2:	ce 01       	movw	r24, r28
    7dc4:	01 96       	adiw	r24, 0x01	; 1
    7dc6:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7dca:	c6 5b       	subi	r28, 0xB6	; 182
    7dcc:	df 4f       	sbci	r29, 0xFF	; 255
    7dce:	0f b6       	in	r0, 0x3f	; 63
    7dd0:	f8 94       	cli
    7dd2:	de bf       	out	0x3e, r29	; 62
    7dd4:	0f be       	out	0x3f, r0	; 63
    7dd6:	cd bf       	out	0x3d, r28	; 61
    7dd8:	df 91       	pop	r29
    7dda:	cf 91       	pop	r28
    7ddc:	1f 91       	pop	r17
    7dde:	0f 91       	pop	r16
    7de0:	ff 90       	pop	r15
    7de2:	ef 90       	pop	r14
    7de4:	df 90       	pop	r13
    7de6:	cf 90       	pop	r12
    7de8:	bf 90       	pop	r11
    7dea:	af 90       	pop	r10
    7dec:	08 95       	ret

00007dee <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z36display_element_show_tds_info_staticjjjjhhPc():
    7dee:	2f 92       	push	r2
    7df0:	3f 92       	push	r3
    7df2:	4f 92       	push	r4
    7df4:	5f 92       	push	r5
    7df6:	6f 92       	push	r6
    7df8:	7f 92       	push	r7
    7dfa:	8f 92       	push	r8
    7dfc:	9f 92       	push	r9
    7dfe:	af 92       	push	r10
    7e00:	bf 92       	push	r11
    7e02:	cf 92       	push	r12
    7e04:	df 92       	push	r13
    7e06:	ef 92       	push	r14
    7e08:	ff 92       	push	r15
    7e0a:	0f 93       	push	r16
    7e0c:	1f 93       	push	r17
    7e0e:	cf 93       	push	r28
    7e10:	df 93       	push	r29
    7e12:	cd b7       	in	r28, 0x3d	; 61
    7e14:	de b7       	in	r29, 0x3e	; 62
    7e16:	ca 54       	subi	r28, 0x4A	; 74
    7e18:	d1 09       	sbc	r29, r1
    7e1a:	0f b6       	in	r0, 0x3f	; 63
    7e1c:	f8 94       	cli
    7e1e:	de bf       	out	0x3e, r29	; 62
    7e20:	0f be       	out	0x3f, r0	; 63
    7e22:	cd bf       	out	0x3d, r28	; 61
    7e24:	4c 01       	movw	r8, r24
    7e26:	2b 01       	movw	r4, r22
    7e28:	5a 01       	movw	r10, r20
    7e2a:	89 01       	movw	r16, r18
    7e2c:	de 2c       	mov	r13, r14
    7e2e:	70 e0       	ldi	r23, 0x00	; 0
    7e30:	60 e0       	ldi	r22, 0x00	; 0
    7e32:	85 ea       	ldi	r24, 0xA5	; 165
    7e34:	9b e0       	ldi	r25, 0x0B	; 11
    7e36:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7e3a:	04 0d       	add	r16, r4
    7e3c:	15 1d       	adc	r17, r5
    7e3e:	94 01       	movw	r18, r8
    7e40:	2a 0d       	add	r18, r10
    7e42:	3b 1d       	adc	r19, r11
    7e44:	a2 01       	movw	r20, r4
    7e46:	b4 01       	movw	r22, r8
    7e48:	85 ea       	ldi	r24, 0xA5	; 165
    7e4a:	9b e0       	ldi	r25, 0x0B	; 11
    7e4c:	0e 94 4b 93 	call	0x12696	; 0x12696 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    7e50:	be 01       	movw	r22, r28
    7e52:	6b 5c       	subi	r22, 0xCB	; 203
    7e54:	7f 4f       	sbci	r23, 0xFF	; 255
    7e56:	8e 2d       	mov	r24, r14
    7e58:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
    7e5c:	12 01       	movw	r2, r4
    7e5e:	28 e2       	ldi	r18, 0x28	; 40
    7e60:	22 0e       	add	r2, r18
    7e62:	31 1c       	adc	r3, r1
    7e64:	9e 01       	movw	r18, r28
    7e66:	25 5e       	subi	r18, 0xE5	; 229
    7e68:	3f 4f       	sbci	r19, 0xFF	; 255
    7e6a:	59 01       	movw	r10, r18
    7e6c:	81 30       	cpi	r24, 0x01	; 1
    7e6e:	09 f0       	breq	.+2      	; 0x7e72 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x84>
    7e70:	ca c0       	rjmp	.+404    	; 0x8006 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x218>
    7e72:	00 e1       	ldi	r16, 0x10	; 16
    7e74:	28 e0       	ldi	r18, 0x08	; 8
    7e76:	ae 01       	movw	r20, r28
    7e78:	4a 5c       	subi	r20, 0xCA	; 202
    7e7a:	5f 4f       	sbci	r21, 0xFF	; 255
    7e7c:	6a e3       	ldi	r22, 0x3A	; 58
    7e7e:	ce 01       	movw	r24, r28
    7e80:	01 96       	adiw	r24, 0x01	; 1
    7e82:	3c 01       	movw	r6, r24
    7e84:	0e 94 c1 b8 	call	0x17182	; 0x17182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    7e88:	7f 92       	push	r7
    7e8a:	6f 92       	push	r6
    7e8c:	8c ed       	ldi	r24, 0xDC	; 220
    7e8e:	92 e0       	ldi	r25, 0x02	; 2
    7e90:	9f 93       	push	r25
    7e92:	8f 93       	push	r24
    7e94:	bf 92       	push	r11
    7e96:	af 92       	push	r10
    7e98:	0e 94 ad dd 	call	0x1bb5a	; 0x1bb5a <sprintf>
    7e9c:	9a e0       	ldi	r25, 0x0A	; 10
    7e9e:	89 0e       	add	r8, r25
    7ea0:	91 1c       	adc	r9, r1
    7ea2:	a2 01       	movw	r20, r4
    7ea4:	4b 5a       	subi	r20, 0xAB	; 171
    7ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    7ea8:	c1 2c       	mov	r12, r1
    7eaa:	ee 24       	eor	r14, r14
    7eac:	ea 94       	dec	r14
    7eae:	fe 2c       	mov	r15, r14
    7eb0:	10 e0       	ldi	r17, 0x00	; 0
    7eb2:	00 e0       	ldi	r16, 0x00	; 0
    7eb4:	21 e0       	ldi	r18, 0x01	; 1
    7eb6:	b4 01       	movw	r22, r8
    7eb8:	c5 01       	movw	r24, r10
    7eba:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7ebe:	64 e2       	ldi	r22, 0x24	; 36
    7ec0:	77 e5       	ldi	r23, 0x57	; 87
    7ec2:	c3 01       	movw	r24, r6
    7ec4:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    7ec8:	85 e3       	ldi	r24, 0x35	; 53
    7eca:	90 e0       	ldi	r25, 0x00	; 0
    7ecc:	8c 0f       	add	r24, r28
    7ece:	9d 1f       	adc	r25, r29
    7ed0:	0c 96       	adiw	r24, 0x0c	; 12
    7ed2:	9f 93       	push	r25
    7ed4:	8f 93       	push	r24
    7ed6:	7f 92       	push	r7
    7ed8:	6f 92       	push	r6
    7eda:	84 ee       	ldi	r24, 0xE4	; 228
    7edc:	92 e0       	ldi	r25, 0x02	; 2
    7ede:	9f 93       	push	r25
    7ee0:	8f 93       	push	r24
    7ee2:	bf 92       	push	r11
    7ee4:	af 92       	push	r10
    7ee6:	0e 94 ad dd 	call	0x1bb5a	; 0x1bb5a <sprintf>
    7eea:	22 e0       	ldi	r18, 0x02	; 2
    7eec:	a1 01       	movw	r20, r2
    7eee:	b4 01       	movw	r22, r8
    7ef0:	c5 01       	movw	r24, r10
    7ef2:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7ef6:	21 96       	adiw	r28, 0x01	; 1
    7ef8:	6e ad       	ldd	r22, Y+62	; 0x3e
    7efa:	7f ad       	ldd	r23, Y+63	; 0x3f
    7efc:	21 97       	sbiw	r28, 0x01	; 1
    7efe:	07 2e       	mov	r0, r23
    7f00:	00 0c       	add	r0, r0
    7f02:	88 0b       	sbc	r24, r24
    7f04:	99 0b       	sbc	r25, r25
    7f06:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
    7f0a:	20 e0       	ldi	r18, 0x00	; 0
    7f0c:	30 e0       	ldi	r19, 0x00	; 0
    7f0e:	4a e7       	ldi	r20, 0x7A	; 122
    7f10:	54 e4       	ldi	r21, 0x44	; 68
    7f12:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
    7f16:	85 01       	movw	r16, r10
    7f18:	22 e0       	ldi	r18, 0x02	; 2
    7f1a:	44 e0       	ldi	r20, 0x04	; 4
    7f1c:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
    7f20:	6e e7       	ldi	r22, 0x7E	; 126
    7f22:	75 e0       	ldi	r23, 0x05	; 5
    7f24:	c5 01       	movw	r24, r10
    7f26:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    7f2a:	6f ed       	ldi	r22, 0xDF	; 223
    7f2c:	79 e5       	ldi	r23, 0x59	; 89
    7f2e:	c3 01       	movw	r24, r6
    7f30:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    7f34:	b5 01       	movw	r22, r10
    7f36:	c3 01       	movw	r24, r6
    7f38:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    7f3c:	a2 01       	movw	r20, r4
    7f3e:	44 5c       	subi	r20, 0xC4	; 196
    7f40:	5f 4f       	sbci	r21, 0xFF	; 255
    7f42:	10 e0       	ldi	r17, 0x00	; 0
    7f44:	00 e0       	ldi	r16, 0x00	; 0
    7f46:	22 e0       	ldi	r18, 0x02	; 2
    7f48:	b4 01       	movw	r22, r8
    7f4a:	c3 01       	movw	r24, r6
    7f4c:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7f50:	6a e5       	ldi	r22, 0x5A	; 90
    7f52:	77 e5       	ldi	r23, 0x57	; 87
    7f54:	c3 01       	movw	r24, r6
    7f56:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    7f5a:	2a 96       	adiw	r28, 0x0a	; 10
    7f5c:	8f ad       	ldd	r24, Y+63	; 0x3f
    7f5e:	2a 97       	sbiw	r28, 0x0a	; 10
    7f60:	1f 92       	push	r1
    7f62:	8f 93       	push	r24
    7f64:	7f 92       	push	r7
    7f66:	6f 92       	push	r6
    7f68:	8b ee       	ldi	r24, 0xEB	; 235
    7f6a:	92 e0       	ldi	r25, 0x02	; 2
    7f6c:	9f 93       	push	r25
    7f6e:	8f 93       	push	r24
    7f70:	bf 92       	push	r11
    7f72:	af 92       	push	r10
    7f74:	0e 94 ad dd 	call	0x1bb5a	; 0x1bb5a <sprintf>
    7f78:	a2 01       	movw	r20, r4
    7f7a:	4c 59       	subi	r20, 0x9C	; 156
    7f7c:	5f 4f       	sbci	r21, 0xFF	; 255
    7f7e:	22 e0       	ldi	r18, 0x02	; 2
    7f80:	b4 01       	movw	r22, r8
    7f82:	c5 01       	movw	r24, r10
    7f84:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7f88:	6d e1       	ldi	r22, 0x1D	; 29
    7f8a:	77 e5       	ldi	r23, 0x57	; 87
    7f8c:	c3 01       	movw	r24, r6
    7f8e:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    7f92:	2e e1       	ldi	r18, 0x1E	; 30
    7f94:	d2 9e       	mul	r13, r18
    7f96:	f0 01       	movw	r30, r0
    7f98:	11 24       	eor	r1, r1
    7f9a:	eb 56       	subi	r30, 0x6B	; 107
    7f9c:	f0 4f       	sbci	r31, 0xF0	; 240
    7f9e:	83 8d       	ldd	r24, Z+27	; 0x1b
    7fa0:	1f 92       	push	r1
    7fa2:	8f 93       	push	r24
    7fa4:	7f 92       	push	r7
    7fa6:	6f 92       	push	r6
    7fa8:	83 ef       	ldi	r24, 0xF3	; 243
    7faa:	92 e0       	ldi	r25, 0x02	; 2
    7fac:	9f 93       	push	r25
    7fae:	8f 93       	push	r24
    7fb0:	bf 92       	push	r11
    7fb2:	af 92       	push	r10
    7fb4:	0e 94 ad dd 	call	0x1bb5a	; 0x1bb5a <sprintf>
    7fb8:	a2 01       	movw	r20, r4
    7fba:	48 58       	subi	r20, 0x88	; 136
    7fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    7fbe:	22 e0       	ldi	r18, 0x02	; 2
    7fc0:	b4 01       	movw	r22, r8
    7fc2:	c5 01       	movw	r24, r10
    7fc4:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7fc8:	0f b6       	in	r0, 0x3f	; 63
    7fca:	f8 94       	cli
    7fcc:	de bf       	out	0x3e, r29	; 62
    7fce:	0f be       	out	0x3f, r0	; 63
    7fd0:	cd bf       	out	0x3d, r28	; 61
    7fd2:	c6 5b       	subi	r28, 0xB6	; 182
    7fd4:	df 4f       	sbci	r29, 0xFF	; 255
    7fd6:	0f b6       	in	r0, 0x3f	; 63
    7fd8:	f8 94       	cli
    7fda:	de bf       	out	0x3e, r29	; 62
    7fdc:	0f be       	out	0x3f, r0	; 63
    7fde:	cd bf       	out	0x3d, r28	; 61
    7fe0:	df 91       	pop	r29
    7fe2:	cf 91       	pop	r28
    7fe4:	1f 91       	pop	r17
    7fe6:	0f 91       	pop	r16
    7fe8:	ff 90       	pop	r15
    7fea:	ef 90       	pop	r14
    7fec:	df 90       	pop	r13
    7fee:	cf 90       	pop	r12
    7ff0:	bf 90       	pop	r11
    7ff2:	af 90       	pop	r10
    7ff4:	9f 90       	pop	r9
    7ff6:	8f 90       	pop	r8
    7ff8:	7f 90       	pop	r7
    7ffa:	6f 90       	pop	r6
    7ffc:	5f 90       	pop	r5
    7ffe:	4f 90       	pop	r4
    8000:	3f 90       	pop	r3
    8002:	2f 90       	pop	r2
    8004:	08 95       	ret
    8006:	62 e3       	ldi	r22, 0x32	; 50
    8008:	76 e5       	ldi	r23, 0x56	; 86
    800a:	c9 01       	movw	r24, r18
    800c:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    8010:	b4 01       	movw	r22, r8
    8012:	67 5e       	subi	r22, 0xE7	; 231
    8014:	7f 4f       	sbci	r23, 0xFF	; 255
    8016:	c1 2c       	mov	r12, r1
    8018:	ee 24       	eor	r14, r14
    801a:	ea 94       	dec	r14
    801c:	fe 2c       	mov	r15, r14
    801e:	00 e0       	ldi	r16, 0x00	; 0
    8020:	18 ef       	ldi	r17, 0xF8	; 248
    8022:	24 e0       	ldi	r18, 0x04	; 4
    8024:	a1 01       	movw	r20, r2
    8026:	c5 01       	movw	r24, r10
    8028:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    802c:	d2 cf       	rjmp	.-92     	; 0x7fd2 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1e4>

0000802e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_dialog_set_variablejjjjhhPc():
    802e:	2f 92       	push	r2
    8030:	3f 92       	push	r3
    8032:	4f 92       	push	r4
    8034:	5f 92       	push	r5
    8036:	6f 92       	push	r6
    8038:	7f 92       	push	r7
    803a:	8f 92       	push	r8
    803c:	9f 92       	push	r9
    803e:	af 92       	push	r10
    8040:	bf 92       	push	r11
    8042:	cf 92       	push	r12
    8044:	df 92       	push	r13
    8046:	ef 92       	push	r14
    8048:	ff 92       	push	r15
    804a:	0f 93       	push	r16
    804c:	1f 93       	push	r17
    804e:	cf 93       	push	r28
    8050:	df 93       	push	r29
    8052:	cd b7       	in	r28, 0x3d	; 61
    8054:	de b7       	in	r29, 0x3e	; 62
    8056:	2c 97       	sbiw	r28, 0x0c	; 12
    8058:	0f b6       	in	r0, 0x3f	; 63
    805a:	f8 94       	cli
    805c:	de bf       	out	0x3e, r29	; 62
    805e:	0f be       	out	0x3f, r0	; 63
    8060:	cd bf       	out	0x3d, r28	; 61
    8062:	5c 01       	movw	r10, r24
    8064:	7b 01       	movw	r14, r22
    8066:	1a 01       	movw	r2, r20
    8068:	29 01       	movw	r4, r18
    806a:	0c 87       	std	Y+12, r16	; 0x0c
    806c:	36 01       	movw	r6, r12
    806e:	70 e0       	ldi	r23, 0x00	; 0
    8070:	60 e0       	ldi	r22, 0x00	; 0
    8072:	85 ea       	ldi	r24, 0xA5	; 165
    8074:	9b e0       	ldi	r25, 0x0B	; 11
    8076:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    807a:	d1 2c       	mov	r13, r1
    807c:	c1 2c       	mov	r12, r1
    807e:	97 01       	movw	r18, r14
    8080:	24 0d       	add	r18, r4
    8082:	35 1d       	adc	r19, r5
    8084:	3b 87       	std	Y+11, r19	; 0x0b
    8086:	2a 87       	std	Y+10, r18	; 0x0a
    8088:	45 01       	movw	r8, r10
    808a:	82 0c       	add	r8, r2
    808c:	93 1c       	adc	r9, r3
    808e:	0a 85       	ldd	r16, Y+10	; 0x0a
    8090:	1b 85       	ldd	r17, Y+11	; 0x0b
    8092:	0c 19       	sub	r16, r12
    8094:	1d 09       	sbc	r17, r13
    8096:	94 01       	movw	r18, r8
    8098:	2c 19       	sub	r18, r12
    809a:	3d 09       	sbc	r19, r13
    809c:	a6 01       	movw	r20, r12
    809e:	4e 0d       	add	r20, r14
    80a0:	5f 1d       	adc	r21, r15
    80a2:	b6 01       	movw	r22, r12
    80a4:	6a 0d       	add	r22, r10
    80a6:	7b 1d       	adc	r23, r11
    80a8:	85 ea       	ldi	r24, 0xA5	; 165
    80aa:	9b e0       	ldi	r25, 0x0B	; 11
    80ac:	0e 94 4b 93 	call	0x12696	; 0x12696 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    80b0:	3f ef       	ldi	r19, 0xFF	; 255
    80b2:	c3 1a       	sub	r12, r19
    80b4:	d3 0a       	sbc	r13, r19
    80b6:	83 e0       	ldi	r24, 0x03	; 3
    80b8:	c8 16       	cp	r12, r24
    80ba:	d1 04       	cpc	r13, r1
    80bc:	41 f7       	brne	.-48     	; 0x808e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x60>
    80be:	6f ef       	ldi	r22, 0xFF	; 255
    80c0:	7f ef       	ldi	r23, 0xFF	; 255
    80c2:	85 ea       	ldi	r24, 0xA5	; 165
    80c4:	9b e0       	ldi	r25, 0x0B	; 11
    80c6:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    80ca:	82 01       	movw	r16, r4
    80cc:	03 50       	subi	r16, 0x03	; 3
    80ce:	11 09       	sbc	r17, r1
    80d0:	0e 0d       	add	r16, r14
    80d2:	1f 1d       	adc	r17, r15
    80d4:	91 01       	movw	r18, r2
    80d6:	23 50       	subi	r18, 0x03	; 3
    80d8:	31 09       	sbc	r19, r1
    80da:	2a 0d       	add	r18, r10
    80dc:	3b 1d       	adc	r19, r11
    80de:	a7 01       	movw	r20, r14
    80e0:	4d 5f       	subi	r20, 0xFD	; 253
    80e2:	5f 4f       	sbci	r21, 0xFF	; 255
    80e4:	b5 01       	movw	r22, r10
    80e6:	6d 5f       	subi	r22, 0xFD	; 253
    80e8:	7f 4f       	sbci	r23, 0xFF	; 255
    80ea:	85 ea       	ldi	r24, 0xA5	; 165
    80ec:	9b e0       	ldi	r25, 0x0B	; 11
    80ee:	0e 94 c4 92 	call	0x12588	; 0x12588 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    80f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    80f4:	c9 2e       	mov	r12, r25
    80f6:	d1 2c       	mov	r13, r1
    80f8:	25 e1       	ldi	r18, 0x15	; 21
    80fa:	92 9f       	mul	r25, r18
    80fc:	f0 01       	movw	r30, r0
    80fe:	11 24       	eor	r1, r1
    8100:	ee 53       	subi	r30, 0x3E	; 62
    8102:	f6 4f       	sbci	r31, 0xF6	; 246
    8104:	85 85       	ldd	r24, Z+13	; 0x0d
    8106:	9e 01       	movw	r18, r28
    8108:	2f 5f       	subi	r18, 0xFF	; 255
    810a:	3f 4f       	sbci	r19, 0xFF	; 255
    810c:	49 01       	movw	r8, r18
    810e:	81 11       	cpse	r24, r1
    8110:	09 c0       	rjmp	.+18     	; 0x8124 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xf6>
    8112:	60 81       	ld	r22, Z
    8114:	71 81       	ldd	r23, Z+1	; 0x01
    8116:	82 81       	ldd	r24, Z+2	; 0x02
    8118:	93 81       	ldd	r25, Z+3	; 0x03
    811a:	89 01       	movw	r16, r18
    811c:	22 e0       	ldi	r18, 0x02	; 2
    811e:	44 e0       	ldi	r20, 0x04	; 4
    8120:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
    8124:	85 e1       	ldi	r24, 0x15	; 21
    8126:	8c 9d       	mul	r24, r12
    8128:	f0 01       	movw	r30, r0
    812a:	8d 9d       	mul	r24, r13
    812c:	f0 0d       	add	r31, r0
    812e:	11 24       	eor	r1, r1
    8130:	ee 53       	subi	r30, 0x3E	; 62
    8132:	f6 4f       	sbci	r31, 0xF6	; 246
    8134:	85 85       	ldd	r24, Z+13	; 0x0d
    8136:	81 30       	cpi	r24, 0x01	; 1
    8138:	59 f4       	brne	.+22     	; 0x8150 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x122>
    813a:	60 81       	ld	r22, Z
    813c:	71 81       	ldd	r23, Z+1	; 0x01
    813e:	82 81       	ldd	r24, Z+2	; 0x02
    8140:	93 81       	ldd	r25, Z+3	; 0x03
    8142:	0e 94 e3 d6 	call	0x1adc6	; 0x1adc6 <__fixsfsi>
    8146:	cb 01       	movw	r24, r22
itoa():
    8148:	4a e0       	ldi	r20, 0x0A	; 10
    814a:	b4 01       	movw	r22, r8
    814c:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z35display_element_dialog_set_variablejjjjhhPc():
    8150:	70 e0       	ldi	r23, 0x00	; 0
    8152:	60 e0       	ldi	r22, 0x00	; 0
    8154:	85 ea       	ldi	r24, 0xA5	; 165
    8156:	9b e0       	ldi	r25, 0x0B	; 11
    8158:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    815c:	f4 01       	movw	r30, r8
    815e:	01 90       	ld	r0, Z+
    8160:	00 20       	and	r0, r0
    8162:	e9 f7       	brne	.-6      	; 0x815e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x130>
    8164:	31 97       	sbiw	r30, 0x01	; 1
    8166:	e8 19       	sub	r30, r8
    8168:	f9 09       	sbc	r31, r9
    816a:	3c e0       	ldi	r19, 0x0C	; 12
    816c:	43 1a       	sub	r4, r19
    816e:	51 08       	sbc	r5, r1
    8170:	56 94       	lsr	r5
    8172:	47 94       	ror	r4
    8174:	81 e0       	ldi	r24, 0x01	; 1
    8176:	e8 1a       	sub	r14, r24
    8178:	f1 08       	sbc	r15, r1
    817a:	4e 0c       	add	r4, r14
    817c:	5f 1c       	adc	r5, r15
_Z22show_string_size_widthhh():
    817e:	96 e0       	ldi	r25, 0x06	; 6
    8180:	e9 9f       	mul	r30, r25
    8182:	f0 01       	movw	r30, r0
    8184:	11 24       	eor	r1, r1
    8186:	ee 0f       	add	r30, r30
    8188:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhhPc():
    818a:	b1 01       	movw	r22, r2
    818c:	6e 1b       	sub	r22, r30
    818e:	7f 0b       	sbc	r23, r31
    8190:	76 95       	lsr	r23
    8192:	67 95       	ror	r22
    8194:	6a 0d       	add	r22, r10
    8196:	7b 1d       	adc	r23, r11
    8198:	c1 2c       	mov	r12, r1
    819a:	ee 24       	eor	r14, r14
    819c:	ea 94       	dec	r14
    819e:	fe 2c       	mov	r15, r14
    81a0:	10 e0       	ldi	r17, 0x00	; 0
    81a2:	00 e0       	ldi	r16, 0x00	; 0
    81a4:	22 e0       	ldi	r18, 0x02	; 2
    81a6:	a2 01       	movw	r20, r4
    81a8:	c4 01       	movw	r24, r8
    81aa:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    81ae:	f3 01       	movw	r30, r6
    81b0:	80 81       	ld	r24, Z
    81b2:	88 23       	and	r24, r24
    81b4:	41 f0       	breq	.+16     	; 0x81c6 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x198>
    81b6:	b5 01       	movw	r22, r10
    81b8:	6b 5f       	subi	r22, 0xFB	; 251
    81ba:	7f 4f       	sbci	r23, 0xFF	; 255
    81bc:	22 e0       	ldi	r18, 0x02	; 2
    81be:	a2 01       	movw	r20, r4
    81c0:	c3 01       	movw	r24, r6
    81c2:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    81c6:	2c 96       	adiw	r28, 0x0c	; 12
    81c8:	0f b6       	in	r0, 0x3f	; 63
    81ca:	f8 94       	cli
    81cc:	de bf       	out	0x3e, r29	; 62
    81ce:	0f be       	out	0x3f, r0	; 63
    81d0:	cd bf       	out	0x3d, r28	; 61
    81d2:	df 91       	pop	r29
    81d4:	cf 91       	pop	r28
    81d6:	1f 91       	pop	r17
    81d8:	0f 91       	pop	r16
    81da:	ff 90       	pop	r15
    81dc:	ef 90       	pop	r14
    81de:	df 90       	pop	r13
    81e0:	cf 90       	pop	r12
    81e2:	bf 90       	pop	r11
    81e4:	af 90       	pop	r10
    81e6:	9f 90       	pop	r9
    81e8:	8f 90       	pop	r8
    81ea:	7f 90       	pop	r7
    81ec:	6f 90       	pop	r6
    81ee:	5f 90       	pop	r5
    81f0:	4f 90       	pop	r4
    81f2:	3f 90       	pop	r3
    81f4:	2f 90       	pop	r2
    81f6:	08 95       	ret

000081f8 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z33display_element_dialog_set_stringjjjjhhPc():
    81f8:	4f 92       	push	r4
    81fa:	5f 92       	push	r5
    81fc:	6f 92       	push	r6
    81fe:	7f 92       	push	r7
    8200:	8f 92       	push	r8
    8202:	9f 92       	push	r9
    8204:	af 92       	push	r10
    8206:	bf 92       	push	r11
    8208:	cf 92       	push	r12
    820a:	df 92       	push	r13
    820c:	ef 92       	push	r14
    820e:	ff 92       	push	r15
    8210:	0f 93       	push	r16
    8212:	1f 93       	push	r17
    8214:	cf 93       	push	r28
    8216:	df 93       	push	r29
    8218:	6c 01       	movw	r12, r24
    821a:	eb 01       	movw	r28, r22
    821c:	2a 01       	movw	r4, r20
    821e:	39 01       	movw	r6, r18
    8220:	70 e0       	ldi	r23, 0x00	; 0
    8222:	60 e0       	ldi	r22, 0x00	; 0
    8224:	85 ea       	ldi	r24, 0xA5	; 165
    8226:	9b e0       	ldi	r25, 0x0B	; 11
    8228:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    822c:	f1 2c       	mov	r15, r1
    822e:	e1 2c       	mov	r14, r1
    8230:	4e 01       	movw	r8, r28
    8232:	86 0c       	add	r8, r6
    8234:	97 1c       	adc	r9, r7
    8236:	56 01       	movw	r10, r12
    8238:	a4 0c       	add	r10, r4
    823a:	b5 1c       	adc	r11, r5
    823c:	84 01       	movw	r16, r8
    823e:	0e 19       	sub	r16, r14
    8240:	1f 09       	sbc	r17, r15
    8242:	95 01       	movw	r18, r10
    8244:	2e 19       	sub	r18, r14
    8246:	3f 09       	sbc	r19, r15
    8248:	a7 01       	movw	r20, r14
    824a:	4c 0f       	add	r20, r28
    824c:	5d 1f       	adc	r21, r29
    824e:	b7 01       	movw	r22, r14
    8250:	6c 0d       	add	r22, r12
    8252:	7d 1d       	adc	r23, r13
    8254:	85 ea       	ldi	r24, 0xA5	; 165
    8256:	9b e0       	ldi	r25, 0x0B	; 11
    8258:	0e 94 4b 93 	call	0x12696	; 0x12696 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    825c:	2f ef       	ldi	r18, 0xFF	; 255
    825e:	e2 1a       	sub	r14, r18
    8260:	f2 0a       	sbc	r15, r18
    8262:	83 e0       	ldi	r24, 0x03	; 3
    8264:	e8 16       	cp	r14, r24
    8266:	f1 04       	cpc	r15, r1
    8268:	49 f7       	brne	.-46     	; 0x823c <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x44>
    826a:	6f ef       	ldi	r22, 0xFF	; 255
    826c:	7f ef       	ldi	r23, 0xFF	; 255
    826e:	85 ea       	ldi	r24, 0xA5	; 165
    8270:	9b e0       	ldi	r25, 0x0B	; 11
    8272:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    8276:	83 01       	movw	r16, r6
    8278:	03 50       	subi	r16, 0x03	; 3
    827a:	11 09       	sbc	r17, r1
    827c:	0c 0f       	add	r16, r28
    827e:	1d 1f       	adc	r17, r29
    8280:	92 01       	movw	r18, r4
    8282:	23 50       	subi	r18, 0x03	; 3
    8284:	31 09       	sbc	r19, r1
    8286:	2c 0d       	add	r18, r12
    8288:	3d 1d       	adc	r19, r13
    828a:	ae 01       	movw	r20, r28
    828c:	4d 5f       	subi	r20, 0xFD	; 253
    828e:	5f 4f       	sbci	r21, 0xFF	; 255
    8290:	b6 01       	movw	r22, r12
    8292:	6d 5f       	subi	r22, 0xFD	; 253
    8294:	7f 4f       	sbci	r23, 0xFF	; 255
    8296:	85 ea       	ldi	r24, 0xA5	; 165
    8298:	9b e0       	ldi	r25, 0x0B	; 11
    829a:	0e 94 c4 92 	call	0x12588	; 0x12588 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    829e:	70 e0       	ldi	r23, 0x00	; 0
    82a0:	60 e0       	ldi	r22, 0x00	; 0
    82a2:	85 ea       	ldi	r24, 0xA5	; 165
    82a4:	9b e0       	ldi	r25, 0x0B	; 11
    82a6:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    82aa:	81 e8       	ldi	r24, 0x81	; 129
    82ac:	99 e0       	ldi	r25, 0x09	; 9
    82ae:	fc 01       	movw	r30, r24
    82b0:	01 90       	ld	r0, Z+
    82b2:	00 20       	and	r0, r0
    82b4:	e9 f7       	brne	.-6      	; 0x82b0 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb8>
    82b6:	cf 01       	movw	r24, r30
    82b8:	82 58       	subi	r24, 0x82	; 130
    82ba:	99 40       	sbci	r25, 0x09	; 9
    82bc:	a3 01       	movw	r20, r6
    82be:	4c 50       	subi	r20, 0x0C	; 12
    82c0:	51 09       	sbc	r21, r1
    82c2:	56 95       	lsr	r21
    82c4:	47 95       	ror	r20
    82c6:	21 97       	sbiw	r28, 0x01	; 1
    82c8:	4c 0f       	add	r20, r28
    82ca:	5d 1f       	adc	r21, r29
_Z22show_string_size_widthhh():
    82cc:	f6 e0       	ldi	r31, 0x06	; 6
    82ce:	8f 9f       	mul	r24, r31
    82d0:	c0 01       	movw	r24, r0
    82d2:	11 24       	eor	r1, r1
    82d4:	88 0f       	add	r24, r24
    82d6:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhhPc():
    82d8:	b2 01       	movw	r22, r4
    82da:	68 1b       	sub	r22, r24
    82dc:	79 0b       	sbc	r23, r25
    82de:	76 95       	lsr	r23
    82e0:	67 95       	ror	r22
    82e2:	6c 0d       	add	r22, r12
    82e4:	7d 1d       	adc	r23, r13
    82e6:	c1 2c       	mov	r12, r1
    82e8:	ee 24       	eor	r14, r14
    82ea:	ea 94       	dec	r14
    82ec:	fe 2c       	mov	r15, r14
    82ee:	10 e0       	ldi	r17, 0x00	; 0
    82f0:	00 e0       	ldi	r16, 0x00	; 0
    82f2:	22 e0       	ldi	r18, 0x02	; 2
    82f4:	81 e8       	ldi	r24, 0x81	; 129
    82f6:	99 e0       	ldi	r25, 0x09	; 9
    82f8:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    82fc:	df 91       	pop	r29
    82fe:	cf 91       	pop	r28
    8300:	1f 91       	pop	r17
    8302:	0f 91       	pop	r16
    8304:	ff 90       	pop	r15
    8306:	ef 90       	pop	r14
    8308:	df 90       	pop	r13
    830a:	cf 90       	pop	r12
    830c:	bf 90       	pop	r11
    830e:	af 90       	pop	r10
    8310:	9f 90       	pop	r9
    8312:	8f 90       	pop	r8
    8314:	7f 90       	pop	r7
    8316:	6f 90       	pop	r6
    8318:	5f 90       	pop	r5
    831a:	4f 90       	pop	r4
    831c:	08 95       	ret

0000831e <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_time_1jjjjhhPc():
    831e:	6f 92       	push	r6
    8320:	7f 92       	push	r7
    8322:	8f 92       	push	r8
    8324:	9f 92       	push	r9
    8326:	af 92       	push	r10
    8328:	bf 92       	push	r11
    832a:	cf 92       	push	r12
    832c:	ef 92       	push	r14
    832e:	ff 92       	push	r15
    8330:	0f 93       	push	r16
    8332:	1f 93       	push	r17
    8334:	cf 93       	push	r28
    8336:	df 93       	push	r29
    8338:	cd b7       	in	r28, 0x3d	; 61
    833a:	de b7       	in	r29, 0x3e	; 62
    833c:	68 97       	sbiw	r28, 0x18	; 24
    833e:	0f b6       	in	r0, 0x3f	; 63
    8340:	f8 94       	cli
    8342:	de bf       	out	0x3e, r29	; 62
    8344:	0f be       	out	0x3f, r0	; 63
    8346:	cd bf       	out	0x3d, r28	; 61
    8348:	4c 01       	movw	r8, r24
    834a:	3b 01       	movw	r6, r22
    834c:	62 e0       	ldi	r22, 0x02	; 2
    834e:	7a e5       	ldi	r23, 0x5A	; 90
    8350:	ce 01       	movw	r24, r28
    8352:	01 96       	adiw	r24, 0x01	; 1
    8354:	5c 01       	movw	r10, r24
    8356:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    835a:	a3 01       	movw	r20, r6
    835c:	4b 5f       	subi	r20, 0xFB	; 251
    835e:	5f 4f       	sbci	r21, 0xFF	; 255
    8360:	b4 01       	movw	r22, r8
    8362:	61 5b       	subi	r22, 0xB1	; 177
    8364:	7f 4f       	sbci	r23, 0xFF	; 255
    8366:	c1 2c       	mov	r12, r1
    8368:	ee 24       	eor	r14, r14
    836a:	ea 94       	dec	r14
    836c:	fe 2c       	mov	r15, r14
    836e:	10 e0       	ldi	r17, 0x00	; 0
    8370:	00 e0       	ldi	r16, 0x00	; 0
    8372:	21 e0       	ldi	r18, 0x01	; 1
    8374:	c5 01       	movw	r24, r10
    8376:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
_Z14selftest_get_0h():
    837a:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <selftest_data>
_Z27display_element_show_time_1jjjjhhPc():
    837e:	80 fd       	sbrc	r24, 0
    8380:	56 c0       	rjmp	.+172    	; 0x842e <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x110>
    8382:	90 91 52 0e 	lds	r25, 0x0E52	; 0x800e52 <now+0x4>
    8386:	80 91 51 0e 	lds	r24, 0x0E51	; 0x800e51 <now+0x3>
    838a:	20 91 3f 0a 	lds	r18, 0x0A3F	; 0x800a3f <uptime>
    838e:	20 ff       	sbrs	r18, 0
    8390:	47 c0       	rjmp	.+142    	; 0x8420 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x102>
    8392:	1f 92       	push	r1
    8394:	9f 93       	push	r25
    8396:	1f 92       	push	r1
    8398:	8f 93       	push	r24
    839a:	8a ef       	ldi	r24, 0xFA	; 250
    839c:	92 e0       	ldi	r25, 0x02	; 2
    839e:	9f 93       	push	r25
    83a0:	8f 93       	push	r24
    83a2:	bf 92       	push	r11
    83a4:	af 92       	push	r10
    83a6:	0e 94 ad dd 	call	0x1bb5a	; 0x1bb5a <sprintf>
    83aa:	0f b6       	in	r0, 0x3f	; 63
    83ac:	f8 94       	cli
    83ae:	de bf       	out	0x3e, r29	; 62
    83b0:	0f be       	out	0x3f, r0	; 63
    83b2:	cd bf       	out	0x3d, r28	; 61
    83b4:	70 e0       	ldi	r23, 0x00	; 0
    83b6:	60 e0       	ldi	r22, 0x00	; 0
    83b8:	85 ea       	ldi	r24, 0xA5	; 165
    83ba:	9b e0       	ldi	r25, 0x0B	; 11
    83bc:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    83c0:	a3 01       	movw	r20, r6
    83c2:	4c 5e       	subi	r20, 0xEC	; 236
    83c4:	5f 4f       	sbci	r21, 0xFF	; 255
    83c6:	b4 01       	movw	r22, r8
    83c8:	6c 5f       	subi	r22, 0xFC	; 252
    83ca:	7f 4f       	sbci	r23, 0xFF	; 255
    83cc:	c1 2c       	mov	r12, r1
    83ce:	ee 24       	eor	r14, r14
    83d0:	ea 94       	dec	r14
    83d2:	fe 2c       	mov	r15, r14
    83d4:	10 e0       	ldi	r17, 0x00	; 0
    83d6:	00 e0       	ldi	r16, 0x00	; 0
    83d8:	28 e0       	ldi	r18, 0x08	; 8
    83da:	c5 01       	movw	r24, r10
    83dc:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    83e0:	83 01       	movw	r16, r6
    83e2:	0c 5a       	subi	r16, 0xAC	; 172
    83e4:	1f 4f       	sbci	r17, 0xFF	; 255
    83e6:	94 01       	movw	r18, r8
    83e8:	2c 50       	subi	r18, 0x0C	; 12
    83ea:	3f 4f       	sbci	r19, 0xFF	; 255
    83ec:	a3 01       	movw	r20, r6
    83ee:	b4 01       	movw	r22, r8
    83f0:	85 ea       	ldi	r24, 0xA5	; 165
    83f2:	9b e0       	ldi	r25, 0x0B	; 11
    83f4:	0e 94 4b 93 	call	0x12696	; 0x12696 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    83f8:	68 96       	adiw	r28, 0x18	; 24
    83fa:	0f b6       	in	r0, 0x3f	; 63
    83fc:	f8 94       	cli
    83fe:	de bf       	out	0x3e, r29	; 62
    8400:	0f be       	out	0x3f, r0	; 63
    8402:	cd bf       	out	0x3d, r28	; 61
    8404:	df 91       	pop	r29
    8406:	cf 91       	pop	r28
    8408:	1f 91       	pop	r17
    840a:	0f 91       	pop	r16
    840c:	ff 90       	pop	r15
    840e:	ef 90       	pop	r14
    8410:	cf 90       	pop	r12
    8412:	bf 90       	pop	r11
    8414:	af 90       	pop	r10
    8416:	9f 90       	pop	r9
    8418:	8f 90       	pop	r8
    841a:	7f 90       	pop	r7
    841c:	6f 90       	pop	r6
    841e:	08 95       	ret
    8420:	1f 92       	push	r1
    8422:	9f 93       	push	r25
    8424:	1f 92       	push	r1
    8426:	8f 93       	push	r24
    8428:	84 e0       	ldi	r24, 0x04	; 4
    842a:	93 e0       	ldi	r25, 0x03	; 3
    842c:	b8 cf       	rjmp	.-144    	; 0x839e <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x80>
    842e:	6e e0       	ldi	r22, 0x0E	; 14
    8430:	73 e0       	ldi	r23, 0x03	; 3
    8432:	c5 01       	movw	r24, r10
    8434:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    8438:	bd cf       	rjmp	.-134    	; 0x83b4 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x96>

0000843a <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_date_1jjjjhhPc():
    843a:	8f 92       	push	r8
    843c:	9f 92       	push	r9
    843e:	af 92       	push	r10
    8440:	bf 92       	push	r11
    8442:	cf 92       	push	r12
    8444:	ef 92       	push	r14
    8446:	ff 92       	push	r15
    8448:	0f 93       	push	r16
    844a:	1f 93       	push	r17
    844c:	cf 93       	push	r28
    844e:	df 93       	push	r29
    8450:	cd b7       	in	r28, 0x3d	; 61
    8452:	de b7       	in	r29, 0x3e	; 62
    8454:	60 97       	sbiw	r28, 0x10	; 16
    8456:	0f b6       	in	r0, 0x3f	; 63
    8458:	f8 94       	cli
    845a:	de bf       	out	0x3e, r29	; 62
    845c:	0f be       	out	0x3f, r0	; 63
    845e:	cd bf       	out	0x3d, r28	; 61
    8460:	4c 01       	movw	r8, r24
    8462:	8b 01       	movw	r16, r22
_Z14selftest_get_0h():
    8464:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <selftest_data>
    8468:	9e 01       	movw	r18, r28
    846a:	2f 5f       	subi	r18, 0xFF	; 255
    846c:	3f 4f       	sbci	r19, 0xFF	; 255
    846e:	59 01       	movw	r10, r18
_Z27display_element_show_date_1jjjjhhPc():
    8470:	80 fd       	sbrc	r24, 0
    8472:	54 c0       	rjmp	.+168    	; 0x851c <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xe2>
_ZNK8DateTime4yearEv():
    8474:	80 91 4e 0e 	lds	r24, 0x0E4E	; 0x800e4e <now>
    8478:	90 e0       	ldi	r25, 0x00	; 0
    847a:	80 53       	subi	r24, 0x30	; 48
    847c:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhhPc():
    847e:	9f 93       	push	r25
    8480:	8f 93       	push	r24
    8482:	80 91 4f 0e 	lds	r24, 0x0E4F	; 0x800e4f <now+0x1>
    8486:	1f 92       	push	r1
    8488:	8f 93       	push	r24
    848a:	80 91 50 0e 	lds	r24, 0x0E50	; 0x800e50 <now+0x2>
    848e:	1f 92       	push	r1
    8490:	8f 93       	push	r24
    8492:	84 e1       	ldi	r24, 0x14	; 20
    8494:	93 e0       	ldi	r25, 0x03	; 3
    8496:	9f 93       	push	r25
    8498:	8f 93       	push	r24
    849a:	3f 93       	push	r19
    849c:	2f 93       	push	r18
    849e:	0e 94 ad dd 	call	0x1bb5a	; 0x1bb5a <sprintf>
    84a2:	0f b6       	in	r0, 0x3f	; 63
    84a4:	f8 94       	cli
    84a6:	de bf       	out	0x3e, r29	; 62
    84a8:	0f be       	out	0x3f, r0	; 63
    84aa:	cd bf       	out	0x3d, r28	; 61
    84ac:	6f ef       	ldi	r22, 0xFF	; 255
    84ae:	7f ef       	ldi	r23, 0xFF	; 255
    84b0:	85 ea       	ldi	r24, 0xA5	; 165
    84b2:	9b e0       	ldi	r25, 0x0B	; 11
    84b4:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    84b8:	2e e8       	ldi	r18, 0x8E	; 142
    84ba:	30 e0       	ldi	r19, 0x00	; 0
    84bc:	a8 01       	movw	r20, r16
    84be:	b4 01       	movw	r22, r8
    84c0:	85 ea       	ldi	r24, 0xA5	; 165
    84c2:	9b e0       	ldi	r25, 0x0B	; 11
    84c4:	0e 94 0a 93 	call	0x12614	; 0x12614 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    84c8:	a8 01       	movw	r20, r16
    84ca:	4f 5f       	subi	r20, 0xFF	; 255
    84cc:	5f 4f       	sbci	r21, 0xFF	; 255
    84ce:	2e e8       	ldi	r18, 0x8E	; 142
    84d0:	30 e0       	ldi	r19, 0x00	; 0
    84d2:	b4 01       	movw	r22, r8
    84d4:	85 ea       	ldi	r24, 0xA5	; 165
    84d6:	9b e0       	ldi	r25, 0x0B	; 11
    84d8:	0e 94 0a 93 	call	0x12614	; 0x12614 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    84dc:	a8 01       	movw	r20, r16
    84de:	4e 5f       	subi	r20, 0xFE	; 254
    84e0:	5f 4f       	sbci	r21, 0xFF	; 255
    84e2:	c1 2c       	mov	r12, r1
    84e4:	ee 24       	eor	r14, r14
    84e6:	ea 94       	dec	r14
    84e8:	fe 2c       	mov	r15, r14
    84ea:	10 e0       	ldi	r17, 0x00	; 0
    84ec:	00 e0       	ldi	r16, 0x00	; 0
    84ee:	23 e0       	ldi	r18, 0x03	; 3
    84f0:	b4 01       	movw	r22, r8
    84f2:	c5 01       	movw	r24, r10
    84f4:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    84f8:	60 96       	adiw	r28, 0x10	; 16
    84fa:	0f b6       	in	r0, 0x3f	; 63
    84fc:	f8 94       	cli
    84fe:	de bf       	out	0x3e, r29	; 62
    8500:	0f be       	out	0x3f, r0	; 63
    8502:	cd bf       	out	0x3d, r28	; 61
    8504:	df 91       	pop	r29
    8506:	cf 91       	pop	r28
    8508:	1f 91       	pop	r17
    850a:	0f 91       	pop	r16
    850c:	ff 90       	pop	r15
    850e:	ef 90       	pop	r14
    8510:	cf 90       	pop	r12
    8512:	bf 90       	pop	r11
    8514:	af 90       	pop	r10
    8516:	9f 90       	pop	r9
    8518:	8f 90       	pop	r8
    851a:	08 95       	ret
    851c:	63 e2       	ldi	r22, 0x23	; 35
    851e:	73 e0       	ldi	r23, 0x03	; 3
    8520:	c9 01       	movw	r24, r18
    8522:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    8526:	c2 cf       	rjmp	.-124    	; 0x84ac <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x72>

00008528 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
    8528:	af 92       	push	r10
    852a:	bf 92       	push	r11
    852c:	cf 92       	push	r12
    852e:	df 92       	push	r13
    8530:	ef 92       	push	r14
    8532:	ff 92       	push	r15
    8534:	0f 93       	push	r16
    8536:	1f 93       	push	r17
    8538:	cf 93       	push	r28
    853a:	df 93       	push	r29
    853c:	8a 30       	cpi	r24, 0x0A	; 10
    853e:	88 f5       	brcc	.+98     	; 0x85a2 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    8540:	7b 01       	movw	r14, r22
    8542:	94 e1       	ldi	r25, 0x14	; 20
    8544:	89 9f       	mul	r24, r25
    8546:	e0 01       	movw	r28, r0
    8548:	11 24       	eor	r1, r1
    854a:	6e 01       	movw	r12, r28
    854c:	e6 e5       	ldi	r30, 0x56	; 86
    854e:	ce 1a       	sub	r12, r30
    8550:	ea ef       	ldi	r30, 0xFA	; 250
    8552:	de 0a       	sbc	r13, r30
    8554:	8a 01       	movw	r16, r20
    8556:	5e 01       	movw	r10, r28
    8558:	f4 e4       	ldi	r31, 0x44	; 68
    855a:	af 1a       	sub	r10, r31
    855c:	fa ef       	ldi	r31, 0xFA	; 250
    855e:	bf 0a       	sbc	r11, r31
_ZNK5EERefdeEv():
    8560:	c6 01       	movw	r24, r12
    8562:	0e 94 80 e4 	call	0x1c900	; 0x1c900 <eeprom_read_byte>
_Z23remote_tds_get_completehPhPc():
    8566:	f8 01       	movw	r30, r16
    8568:	81 93       	st	Z+, r24
    856a:	8f 01       	movw	r16, r30
    856c:	10 82       	st	Z, r1
    856e:	88 23       	and	r24, r24
    8570:	31 f0       	breq	.+12     	; 0x857e <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    8572:	ff ef       	ldi	r31, 0xFF	; 255
    8574:	cf 1a       	sub	r12, r31
    8576:	df 0a       	sbc	r13, r31
    8578:	ac 14       	cp	r10, r12
    857a:	bd 04       	cpc	r11, r13
    857c:	89 f7       	brne	.-30     	; 0x8560 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
_ZNK5EERefdeEv():
    857e:	ce 01       	movw	r24, r28
    8580:	83 54       	subi	r24, 0x43	; 67
    8582:	9a 4f       	sbci	r25, 0xFA	; 250
    8584:	0e 94 80 e4 	call	0x1c900	; 0x1c900 <eeprom_read_byte>
_Z23remote_tds_get_completehPhPc():
    8588:	f7 01       	movw	r30, r14
    858a:	80 83       	st	Z, r24
    858c:	df 91       	pop	r29
    858e:	cf 91       	pop	r28
    8590:	1f 91       	pop	r17
    8592:	0f 91       	pop	r16
    8594:	ff 90       	pop	r15
    8596:	ef 90       	pop	r14
    8598:	df 90       	pop	r13
    859a:	cf 90       	pop	r12
    859c:	bf 90       	pop	r11
    859e:	af 90       	pop	r10
    85a0:	08 95       	ret
    85a2:	8f ef       	ldi	r24, 0xFF	; 255
    85a4:	fb 01       	movw	r30, r22
    85a6:	f1 cf       	rjmp	.-30     	; 0x858a <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

000085a8 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z29display_menu_rtds_update_namejjh():
    85a8:	1f 93       	push	r17
    85aa:	cf 93       	push	r28
    85ac:	df 93       	push	r29
    85ae:	cd b7       	in	r28, 0x3d	; 61
    85b0:	de b7       	in	r29, 0x3e	; 62
    85b2:	63 97       	sbiw	r28, 0x13	; 19
    85b4:	0f b6       	in	r0, 0x3f	; 63
    85b6:	f8 94       	cli
    85b8:	de bf       	out	0x3e, r29	; 62
    85ba:	0f be       	out	0x3f, r0	; 63
    85bc:	cd bf       	out	0x3d, r28	; 61
    85be:	16 2f       	mov	r17, r22
    85c0:	ae 01       	movw	r20, r28
    85c2:	4f 5f       	subi	r20, 0xFF	; 255
    85c4:	5f 4f       	sbci	r21, 0xFF	; 255
    85c6:	be 01       	movw	r22, r28
    85c8:	6d 5e       	subi	r22, 0xED	; 237
    85ca:	7f 4f       	sbci	r23, 0xFF	; 255
    85cc:	81 2f       	mov	r24, r17
    85ce:	0e 94 94 42 	call	0x8528	; 0x8528 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    85d2:	70 e0       	ldi	r23, 0x00	; 0
    85d4:	60 e0       	ldi	r22, 0x00	; 0
    85d6:	87 e6       	ldi	r24, 0x67	; 103
    85d8:	90 e0       	ldi	r25, 0x00	; 0
    85da:	0e 94 f4 3b 	call	0x77e8	; 0x77e8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    85de:	22 e6       	ldi	r18, 0x62	; 98
    85e0:	35 e4       	ldi	r19, 0x45	; 69
    85e2:	41 2f       	mov	r20, r17
    85e4:	62 e1       	ldi	r22, 0x12	; 18
    85e6:	ce 01       	movw	r24, r28
    85e8:	01 96       	adiw	r24, 0x01	; 1
    85ea:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    85ee:	63 96       	adiw	r28, 0x13	; 19
    85f0:	0f b6       	in	r0, 0x3f	; 63
    85f2:	f8 94       	cli
    85f4:	de bf       	out	0x3e, r29	; 62
    85f6:	0f be       	out	0x3f, r0	; 63
    85f8:	cd bf       	out	0x3d, r28	; 61
    85fa:	df 91       	pop	r29
    85fc:	cf 91       	pop	r28
    85fe:	1f 91       	pop	r17
    8600:	08 95       	ret

00008602 <remote_tds_set_name(unsigned char, char*)>:
_Z19remote_tds_set_namehPc():
    8602:	df 92       	push	r13
    8604:	ef 92       	push	r14
    8606:	ff 92       	push	r15
    8608:	0f 93       	push	r16
    860a:	1f 93       	push	r17
    860c:	cf 93       	push	r28
    860e:	df 93       	push	r29
    8610:	8a 30       	cpi	r24, 0x0A	; 10
    8612:	c0 f4       	brcc	.+48     	; 0x8644 <remote_tds_set_name(unsigned char, char*)+0x42>
    8614:	94 e1       	ldi	r25, 0x14	; 20
    8616:	89 9f       	mul	r24, r25
    8618:	e0 01       	movw	r28, r0
    861a:	11 24       	eor	r1, r1
    861c:	7b 01       	movw	r14, r22
    861e:	8e 01       	movw	r16, r28
    8620:	06 55       	subi	r16, 0x56	; 86
    8622:	1a 4f       	sbci	r17, 0xFA	; 250
    8624:	c4 54       	subi	r28, 0x44	; 68
    8626:	da 4f       	sbci	r29, 0xFA	; 250
    8628:	f7 01       	movw	r30, r14
    862a:	d1 90       	ld	r13, Z+
    862c:	7f 01       	movw	r14, r30
    862e:	6d 2d       	mov	r22, r13
    8630:	c8 01       	movw	r24, r16
    8632:	0e 94 74 39 	call	0x72e8	; 0x72e8 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>
    8636:	dd 20       	and	r13, r13
    8638:	29 f0       	breq	.+10     	; 0x8644 <remote_tds_set_name(unsigned char, char*)+0x42>
    863a:	0f 5f       	subi	r16, 0xFF	; 255
    863c:	1f 4f       	sbci	r17, 0xFF	; 255
    863e:	0c 17       	cp	r16, r28
    8640:	1d 07       	cpc	r17, r29
    8642:	91 f7       	brne	.-28     	; 0x8628 <remote_tds_set_name(unsigned char, char*)+0x26>
    8644:	df 91       	pop	r29
    8646:	cf 91       	pop	r28
    8648:	1f 91       	pop	r17
    864a:	0f 91       	pop	r16
    864c:	ff 90       	pop	r15
    864e:	ef 90       	pop	r14
    8650:	df 90       	pop	r13
    8652:	08 95       	ret

00008654 <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
    8654:	cf 93       	push	r28
    8656:	df 93       	push	r29
    8658:	8a 30       	cpi	r24, 0x0A	; 10
    865a:	68 f4       	brcc	.+26     	; 0x8676 <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    865c:	eb 01       	movw	r28, r22
    865e:	24 e1       	ldi	r18, 0x14	; 20
    8660:	82 9f       	mul	r24, r18
    8662:	c0 01       	movw	r24, r0
    8664:	11 24       	eor	r1, r1
_ZNK5EERefdeEv():
    8666:	83 54       	subi	r24, 0x43	; 67
    8668:	9a 4f       	sbci	r25, 0xFA	; 250
    866a:	0e 94 80 e4 	call	0x1c900	; 0x1c900 <eeprom_read_byte>
_Z21remote_tds_get_activehPh():
    866e:	88 83       	st	Y, r24
    8670:	df 91       	pop	r29
    8672:	cf 91       	pop	r28
    8674:	08 95       	ret
    8676:	8f ef       	ldi	r24, 0xFF	; 255
    8678:	fb 01       	movw	r30, r22
    867a:	80 83       	st	Z, r24
    867c:	f9 cf       	rjmp	.-14     	; 0x8670 <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

0000867e <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhhPcS_():
    867e:	cf 92       	push	r12
    8680:	df 92       	push	r13
    8682:	ff 92       	push	r15
    8684:	0f 93       	push	r16
    8686:	1f 93       	push	r17
    8688:	cf 93       	push	r28
    868a:	df 93       	push	r29
    868c:	1f 92       	push	r1
    868e:	cd b7       	in	r28, 0x3d	; 61
    8690:	de b7       	in	r29, 0x3e	; 62
    8692:	f8 2e       	mov	r15, r24
    8694:	69 01       	movw	r12, r18
    8696:	60 eb       	ldi	r22, 0xB0	; 176
    8698:	77 e5       	ldi	r23, 0x57	; 87
    869a:	c9 01       	movw	r24, r18
    869c:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    86a0:	f8 01       	movw	r30, r16
    86a2:	10 82       	st	Z, r1
    86a4:	be 01       	movw	r22, r28
    86a6:	6f 5f       	subi	r22, 0xFF	; 255
    86a8:	7f 4f       	sbci	r23, 0xFF	; 255
    86aa:	8f 2d       	mov	r24, r15
    86ac:	0e 94 2a 43 	call	0x8654	; 0x8654 <remote_tds_get_active(unsigned char, unsigned char*)>
    86b0:	89 81       	ldd	r24, Y+1	; 0x01
    86b2:	81 30       	cpi	r24, 0x01	; 1
    86b4:	39 f4       	brne	.+14     	; 0x86c4 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
    86b6:	a6 01       	movw	r20, r12
    86b8:	be 01       	movw	r22, r28
    86ba:	6f 5f       	subi	r22, 0xFF	; 255
    86bc:	7f 4f       	sbci	r23, 0xFF	; 255
    86be:	8f 2d       	mov	r24, r15
    86c0:	0e 94 94 42 	call	0x8528	; 0x8528 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    86c4:	0f 90       	pop	r0
    86c6:	df 91       	pop	r29
    86c8:	cf 91       	pop	r28
    86ca:	1f 91       	pop	r17
    86cc:	0f 91       	pop	r16
    86ce:	ff 90       	pop	r15
    86d0:	df 90       	pop	r13
    86d2:	cf 90       	pop	r12
    86d4:	08 95       	ret

000086d6 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>:
_Z25click_rtds_setting_sensorjjh():
    86d6:	1f 93       	push	r17
    86d8:	cf 93       	push	r28
    86da:	df 93       	push	r29
    86dc:	1f 92       	push	r1
    86de:	cd b7       	in	r28, 0x3d	; 61
    86e0:	de b7       	in	r29, 0x3e	; 62
    86e2:	14 2f       	mov	r17, r20
    86e4:	be 01       	movw	r22, r28
    86e6:	6f 5f       	subi	r22, 0xFF	; 255
    86e8:	7f 4f       	sbci	r23, 0xFF	; 255
    86ea:	84 2f       	mov	r24, r20
    86ec:	0e 94 2a 43 	call	0x8654	; 0x8654 <remote_tds_get_active(unsigned char, unsigned char*)>
    86f0:	89 81       	ldd	r24, Y+1	; 0x01
    86f2:	81 30       	cpi	r24, 0x01	; 1
    86f4:	31 f4       	brne	.+12     	; 0x8702 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)+0x2c>
    86f6:	61 2f       	mov	r22, r17
    86f8:	70 e0       	ldi	r23, 0x00	; 0
    86fa:	87 e0       	ldi	r24, 0x07	; 7
    86fc:	90 e0       	ldi	r25, 0x00	; 0
    86fe:	0e 94 f4 3b 	call	0x77e8	; 0x77e8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    8702:	0f 90       	pop	r0
    8704:	df 91       	pop	r29
    8706:	cf 91       	pop	r28
    8708:	1f 91       	pop	r17
    870a:	08 95       	ret

0000870c <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z28button_get_show_default_temphhhPcS_():
    870c:	9f 92       	push	r9
    870e:	af 92       	push	r10
    8710:	bf 92       	push	r11
    8712:	cf 92       	push	r12
    8714:	df 92       	push	r13
    8716:	ef 92       	push	r14
    8718:	0f 93       	push	r16
    871a:	1f 93       	push	r17
    871c:	cf 93       	push	r28
    871e:	df 93       	push	r29
    8720:	cd b7       	in	r28, 0x3d	; 61
    8722:	de b7       	in	r29, 0x3e	; 62
    8724:	65 97       	sbiw	r28, 0x15	; 21
    8726:	0f b6       	in	r0, 0x3f	; 63
    8728:	f8 94       	cli
    872a:	de bf       	out	0x3e, r29	; 62
    872c:	0f be       	out	0x3f, r0	; 63
    872e:	cd bf       	out	0x3d, r28	; 61
    8730:	98 2e       	mov	r9, r24
    8732:	e4 2e       	mov	r14, r20
    8734:	69 01       	movw	r12, r18
    8736:	58 01       	movw	r10, r16
    8738:	69 eb       	ldi	r22, 0xB9	; 185
    873a:	75 e0       	ldi	r23, 0x05	; 5
    873c:	c9 01       	movw	r24, r18
    873e:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    8742:	69 eb       	ldi	r22, 0xB9	; 185
    8744:	75 e0       	ldi	r23, 0x05	; 5
    8746:	c8 01       	movw	r24, r16
    8748:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    874c:	00 e0       	ldi	r16, 0x00	; 0
    874e:	10 e0       	ldi	r17, 0x00	; 0
    8750:	80 2f       	mov	r24, r16
    8752:	0e 94 43 88 	call	0x11086	; 0x11086 <tds_used(unsigned char)>
    8756:	81 30       	cpi	r24, 0x01	; 1
    8758:	11 f4       	brne	.+4      	; 0x875e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x52>
    875a:	ee 20       	and	r14, r14
    875c:	19 f0       	breq	.+6      	; 0x8764 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
    875e:	81 e0       	ldi	r24, 0x01	; 1
    8760:	e8 12       	cpse	r14, r24
    8762:	25 c0       	rjmp	.+74     	; 0x87ae <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xa2>
    8764:	91 12       	cpse	r9, r17
    8766:	22 c0       	rjmp	.+68     	; 0x87ac <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xa0>
    8768:	be 01       	movw	r22, r28
    876a:	6f 5f       	subi	r22, 0xFF	; 255
    876c:	7f 4f       	sbci	r23, 0xFF	; 255
    876e:	80 2f       	mov	r24, r16
    8770:	0e 94 14 89 	call	0x11228	; 0x11228 <tds_get_name(unsigned char, char*)>
    8774:	be 01       	movw	r22, r28
    8776:	6f 5f       	subi	r22, 0xFF	; 255
    8778:	7f 4f       	sbci	r23, 0xFF	; 255
    877a:	c5 01       	movw	r24, r10
    877c:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    8780:	69 e3       	ldi	r22, 0x39	; 57
    8782:	78 e5       	ldi	r23, 0x58	; 88
    8784:	c6 01       	movw	r24, r12
    8786:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    878a:	65 96       	adiw	r28, 0x15	; 21
    878c:	0f b6       	in	r0, 0x3f	; 63
    878e:	f8 94       	cli
    8790:	de bf       	out	0x3e, r29	; 62
    8792:	0f be       	out	0x3f, r0	; 63
    8794:	cd bf       	out	0x3d, r28	; 61
    8796:	df 91       	pop	r29
    8798:	cf 91       	pop	r28
    879a:	1f 91       	pop	r17
    879c:	0f 91       	pop	r16
    879e:	ef 90       	pop	r14
    87a0:	df 90       	pop	r13
    87a2:	cf 90       	pop	r12
    87a4:	bf 90       	pop	r11
    87a6:	af 90       	pop	r10
    87a8:	9f 90       	pop	r9
    87aa:	08 95       	ret
    87ac:	1f 5f       	subi	r17, 0xFF	; 255
    87ae:	0f 5f       	subi	r16, 0xFF	; 255
    87b0:	06 30       	cpi	r16, 0x06	; 6
    87b2:	71 f6       	brne	.-100    	; 0x8750 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x44>
    87b4:	00 e0       	ldi	r16, 0x00	; 0
    87b6:	be 01       	movw	r22, r28
    87b8:	6b 5e       	subi	r22, 0xEB	; 235
    87ba:	7f 4f       	sbci	r23, 0xFF	; 255
    87bc:	80 2f       	mov	r24, r16
    87be:	0e 94 2a 43 	call	0x8654	; 0x8654 <remote_tds_get_active(unsigned char, unsigned char*)>
    87c2:	8d 89       	ldd	r24, Y+21	; 0x15
    87c4:	81 30       	cpi	r24, 0x01	; 1
    87c6:	11 f4       	brne	.+4      	; 0x87cc <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc0>
    87c8:	ee 20       	and	r14, r14
    87ca:	19 f0       	breq	.+6      	; 0x87d2 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc6>
    87cc:	81 e0       	ldi	r24, 0x01	; 1
    87ce:	e8 12       	cpse	r14, r24
    87d0:	15 c0       	rjmp	.+42     	; 0x87fc <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xf0>
    87d2:	91 12       	cpse	r9, r17
    87d4:	12 c0       	rjmp	.+36     	; 0x87fa <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xee>
    87d6:	ae 01       	movw	r20, r28
    87d8:	4f 5f       	subi	r20, 0xFF	; 255
    87da:	5f 4f       	sbci	r21, 0xFF	; 255
    87dc:	be 01       	movw	r22, r28
    87de:	6b 5e       	subi	r22, 0xEB	; 235
    87e0:	7f 4f       	sbci	r23, 0xFF	; 255
    87e2:	80 2f       	mov	r24, r16
    87e4:	0e 94 94 42 	call	0x8528	; 0x8528 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    87e8:	be 01       	movw	r22, r28
    87ea:	6f 5f       	subi	r22, 0xFF	; 255
    87ec:	7f 4f       	sbci	r23, 0xFF	; 255
    87ee:	c5 01       	movw	r24, r10
    87f0:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    87f4:	6a e2       	ldi	r22, 0x2A	; 42
    87f6:	78 e5       	ldi	r23, 0x58	; 88
    87f8:	c5 cf       	rjmp	.-118    	; 0x8784 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x78>
    87fa:	1f 5f       	subi	r17, 0xFF	; 255
    87fc:	0f 5f       	subi	r16, 0xFF	; 255
    87fe:	0a 30       	cpi	r16, 0x0A	; 10
    8800:	d1 f6       	brne	.-76     	; 0x87b6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xaa>
    8802:	c3 cf       	rjmp	.-122    	; 0x878a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x7e>

00008804 <remote_tds_set_active(unsigned char, unsigned char)>:
_Z21remote_tds_set_activehh():
    8804:	8a 30       	cpi	r24, 0x0A	; 10
    8806:	40 f4       	brcc	.+16     	; 0x8818 <remote_tds_set_active(unsigned char, unsigned char)+0x14>
    8808:	24 e1       	ldi	r18, 0x14	; 20
    880a:	82 9f       	mul	r24, r18
    880c:	c0 01       	movw	r24, r0
    880e:	11 24       	eor	r1, r1
    8810:	83 54       	subi	r24, 0x43	; 67
    8812:	9a 4f       	sbci	r25, 0xFA	; 250
    8814:	0c 94 74 39 	jmp	0x72e8	; 0x72e8 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>
    8818:	08 95       	ret

0000881a <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
    881a:	cf 93       	push	r28
    881c:	df 93       	push	r29
    881e:	c8 2f       	mov	r28, r24
    8820:	d6 2f       	mov	r29, r22
    8822:	ba 01       	movw	r22, r20
    8824:	0e 94 01 43 	call	0x8602	; 0x8602 <remote_tds_set_name(unsigned char, char*)>
    8828:	6d 2f       	mov	r22, r29
    882a:	8c 2f       	mov	r24, r28
    882c:	df 91       	pop	r29
    882e:	cf 91       	pop	r28
    8830:	0c 94 02 44 	jmp	0x8804	; 0x8804 <remote_tds_set_active(unsigned char, unsigned char)>

00008834 <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
    8834:	cf 93       	push	r28
    8836:	df 93       	push	r29
    8838:	cd b7       	in	r28, 0x3d	; 61
    883a:	de b7       	in	r29, 0x3e	; 62
    883c:	62 97       	sbiw	r28, 0x12	; 18
    883e:	0f b6       	in	r0, 0x3f	; 63
    8840:	f8 94       	cli
    8842:	de bf       	out	0x3e, r29	; 62
    8844:	0f be       	out	0x3f, r0	; 63
    8846:	cd bf       	out	0x3d, r28	; 61
    8848:	e1 e0       	ldi	r30, 0x01	; 1
    884a:	f0 e0       	ldi	r31, 0x00	; 0
    884c:	ec 0f       	add	r30, r28
    884e:	fd 1f       	adc	r31, r29
    8850:	e8 0f       	add	r30, r24
    8852:	f1 1d       	adc	r31, r1
    8854:	10 82       	st	Z, r1
    8856:	ae 01       	movw	r20, r28
    8858:	4f 5f       	subi	r20, 0xFF	; 255
    885a:	5f 4f       	sbci	r21, 0xFF	; 255
    885c:	60 e0       	ldi	r22, 0x00	; 0
    885e:	0e 94 0d 44 	call	0x881a	; 0x881a <remote_tds_set_complete(unsigned char, unsigned char, char*)>
    8862:	62 96       	adiw	r28, 0x12	; 18
    8864:	0f b6       	in	r0, 0x3f	; 63
    8866:	f8 94       	cli
    8868:	de bf       	out	0x3e, r29	; 62
    886a:	0f be       	out	0x3f, r0	; 63
    886c:	cd bf       	out	0x3d, r28	; 61
    886e:	df 91       	pop	r29
    8870:	cf 91       	pop	r28
    8872:	08 95       	ret

00008874 <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z30click_rtds_deassociate_onewirejjh():
    8874:	86 2f       	mov	r24, r22
    8876:	0e 94 1a 44 	call	0x8834	; 0x8834 <remote_tds_clear(unsigned char)>
    887a:	0c 94 b3 3b 	jmp	0x7766	; 0x7766 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

0000887e <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
    887e:	cf 93       	push	r28
    8880:	df 93       	push	r29
    8882:	cd b7       	in	r28, 0x3d	; 61
    8884:	de b7       	in	r29, 0x3e	; 62
    8886:	c1 58       	subi	r28, 0x81	; 129
    8888:	d1 09       	sbc	r29, r1
    888a:	0f b6       	in	r0, 0x3f	; 63
    888c:	f8 94       	cli
    888e:	de bf       	out	0x3e, r29	; 62
    8890:	0f be       	out	0x3f, r0	; 63
    8892:	cd bf       	out	0x3d, r28	; 61
    8894:	cf 57       	subi	r28, 0x7F	; 127
    8896:	df 4f       	sbci	r29, 0xFF	; 255
    8898:	18 82       	st	Y, r1
    889a:	c1 58       	subi	r28, 0x81	; 129
    889c:	d0 40       	sbci	r29, 0x00	; 0
    889e:	ae 01       	movw	r20, r28
    88a0:	4f 5b       	subi	r20, 0xBF	; 191
    88a2:	5f 4f       	sbci	r21, 0xFF	; 255
    88a4:	be 01       	movw	r22, r28
    88a6:	6f 57       	subi	r22, 0x7F	; 127
    88a8:	7f 4f       	sbci	r23, 0xFF	; 255
    88aa:	0e 94 94 42 	call	0x8528	; 0x8528 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    88ae:	cf 57       	subi	r28, 0x7F	; 127
    88b0:	df 4f       	sbci	r29, 0xFF	; 255
    88b2:	88 81       	ld	r24, Y
    88b4:	c1 58       	subi	r28, 0x81	; 129
    88b6:	d0 40       	sbci	r29, 0x00	; 0
    88b8:	81 30       	cpi	r24, 0x01	; 1
    88ba:	a1 f4       	brne	.+40     	; 0x88e4 <remote_tds_subscibe_topic(unsigned char)+0x66>
    88bc:	6e e2       	ldi	r22, 0x2E	; 46
    88be:	73 e0       	ldi	r23, 0x03	; 3
    88c0:	ce 01       	movw	r24, r28
    88c2:	01 96       	adiw	r24, 0x01	; 1
    88c4:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    88c8:	be 01       	movw	r22, r28
    88ca:	6f 5b       	subi	r22, 0xBF	; 191
    88cc:	7f 4f       	sbci	r23, 0xFF	; 255
    88ce:	ce 01       	movw	r24, r28
    88d0:	01 96       	adiw	r24, 0x01	; 1
    88d2:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    88d6:	be 01       	movw	r22, r28
    88d8:	6f 5f       	subi	r22, 0xFF	; 255
    88da:	7f 4f       	sbci	r23, 0xFF	; 255
    88dc:	89 e0       	ldi	r24, 0x09	; 9
    88de:	9c e0       	ldi	r25, 0x0C	; 12
    88e0:	0e 94 05 c2 	call	0x1840a	; 0x1840a <PubSubClient::subscribe(char const*)>
    88e4:	cf 57       	subi	r28, 0x7F	; 127
    88e6:	df 4f       	sbci	r29, 0xFF	; 255
    88e8:	0f b6       	in	r0, 0x3f	; 63
    88ea:	f8 94       	cli
    88ec:	de bf       	out	0x3e, r29	; 62
    88ee:	0f be       	out	0x3f, r0	; 63
    88f0:	cd bf       	out	0x3d, r28	; 61
    88f2:	df 91       	pop	r29
    88f4:	cf 91       	pop	r28
    88f6:	08 95       	ret

000088f8 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>:
_Z20click_rtds_subscribejjh():
    88f8:	86 2f       	mov	r24, r22
    88fa:	0c 94 3f 44 	jmp	0x887e	; 0x887e <remote_tds_subscibe_topic(unsigned char)>

000088fe <remote_tds_unsubscibe_topic(unsigned char)>:
_Z27remote_tds_unsubscibe_topich():
    88fe:	cf 93       	push	r28
    8900:	df 93       	push	r29
    8902:	cd b7       	in	r28, 0x3d	; 61
    8904:	de b7       	in	r29, 0x3e	; 62
    8906:	c1 58       	subi	r28, 0x81	; 129
    8908:	d1 09       	sbc	r29, r1
    890a:	0f b6       	in	r0, 0x3f	; 63
    890c:	f8 94       	cli
    890e:	de bf       	out	0x3e, r29	; 62
    8910:	0f be       	out	0x3f, r0	; 63
    8912:	cd bf       	out	0x3d, r28	; 61
    8914:	cf 57       	subi	r28, 0x7F	; 127
    8916:	df 4f       	sbci	r29, 0xFF	; 255
    8918:	18 82       	st	Y, r1
    891a:	c1 58       	subi	r28, 0x81	; 129
    891c:	d0 40       	sbci	r29, 0x00	; 0
    891e:	ae 01       	movw	r20, r28
    8920:	4f 5b       	subi	r20, 0xBF	; 191
    8922:	5f 4f       	sbci	r21, 0xFF	; 255
    8924:	be 01       	movw	r22, r28
    8926:	6f 57       	subi	r22, 0x7F	; 127
    8928:	7f 4f       	sbci	r23, 0xFF	; 255
    892a:	0e 94 94 42 	call	0x8528	; 0x8528 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    892e:	cf 57       	subi	r28, 0x7F	; 127
    8930:	df 4f       	sbci	r29, 0xFF	; 255
    8932:	88 81       	ld	r24, Y
    8934:	c1 58       	subi	r28, 0x81	; 129
    8936:	d0 40       	sbci	r29, 0x00	; 0
    8938:	81 30       	cpi	r24, 0x01	; 1
    893a:	a1 f4       	brne	.+40     	; 0x8964 <remote_tds_unsubscibe_topic(unsigned char)+0x66>
    893c:	6e e2       	ldi	r22, 0x2E	; 46
    893e:	73 e0       	ldi	r23, 0x03	; 3
    8940:	ce 01       	movw	r24, r28
    8942:	01 96       	adiw	r24, 0x01	; 1
    8944:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    8948:	be 01       	movw	r22, r28
    894a:	6f 5b       	subi	r22, 0xBF	; 191
    894c:	7f 4f       	sbci	r23, 0xFF	; 255
    894e:	ce 01       	movw	r24, r28
    8950:	01 96       	adiw	r24, 0x01	; 1
    8952:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    8956:	be 01       	movw	r22, r28
    8958:	6f 5f       	subi	r22, 0xFF	; 255
    895a:	7f 4f       	sbci	r23, 0xFF	; 255
    895c:	89 e0       	ldi	r24, 0x09	; 9
    895e:	9c e0       	ldi	r25, 0x0C	; 12
    8960:	0e 94 08 c2 	call	0x18410	; 0x18410 <PubSubClient::unsubscribe(char const*)>
    8964:	cf 57       	subi	r28, 0x7F	; 127
    8966:	df 4f       	sbci	r29, 0xFF	; 255
    8968:	0f b6       	in	r0, 0x3f	; 63
    896a:	f8 94       	cli
    896c:	de bf       	out	0x3e, r29	; 62
    896e:	0f be       	out	0x3f, r0	; 63
    8970:	cd bf       	out	0x3d, r28	; 61
    8972:	df 91       	pop	r29
    8974:	cf 91       	pop	r28
    8976:	08 95       	ret

00008978 <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
    8978:	1f 93       	push	r17
    897a:	cf 93       	push	r28
    897c:	df 93       	push	r29
    897e:	1f 92       	push	r1
    8980:	cd b7       	in	r28, 0x3d	; 61
    8982:	de b7       	in	r29, 0x3e	; 62
    8984:	10 e0       	ldi	r17, 0x00	; 0
    8986:	be 01       	movw	r22, r28
    8988:	6f 5f       	subi	r22, 0xFF	; 255
    898a:	7f 4f       	sbci	r23, 0xFF	; 255
    898c:	81 2f       	mov	r24, r17
    898e:	0e 94 2a 43 	call	0x8654	; 0x8654 <remote_tds_get_active(unsigned char, unsigned char*)>
    8992:	89 81       	ldd	r24, Y+1	; 0x01
    8994:	88 23       	and	r24, r24
    8996:	21 f0       	breq	.+8      	; 0x89a0 <remote_tds_find_free()+0x28>
    8998:	1f 5f       	subi	r17, 0xFF	; 255
    899a:	1a 30       	cpi	r17, 0x0A	; 10
    899c:	a1 f7       	brne	.-24     	; 0x8986 <remote_tds_find_free()+0xe>
    899e:	1f ef       	ldi	r17, 0xFF	; 255
    89a0:	81 2f       	mov	r24, r17
    89a2:	0f 90       	pop	r0
    89a4:	df 91       	pop	r29
    89a6:	cf 91       	pop	r28
    89a8:	1f 91       	pop	r17
    89aa:	08 95       	ret

000089ac <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>:
_Z21click_rtds_add_sensorjjh():
    89ac:	1f 93       	push	r17
    89ae:	cf 93       	push	r28
    89b0:	df 93       	push	r29
    89b2:	00 d0       	rcall	.+0      	; 0x89b4 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x8>
    89b4:	1f 92       	push	r1
    89b6:	1f 92       	push	r1
    89b8:	cd b7       	in	r28, 0x3d	; 61
    89ba:	de b7       	in	r29, 0x3e	; 62
    89bc:	0e 94 bc 44 	call	0x8978	; 0x8978 <remote_tds_find_free()>
    89c0:	18 2f       	mov	r17, r24
    89c2:	8f 3f       	cpi	r24, 0xFF	; 255
    89c4:	a1 f0       	breq	.+40     	; 0x89ee <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x42>
    89c6:	6d eb       	ldi	r22, 0xBD	; 189
    89c8:	77 e5       	ldi	r23, 0x57	; 87
    89ca:	ce 01       	movw	r24, r28
    89cc:	01 96       	adiw	r24, 0x01	; 1
    89ce:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    89d2:	70 e0       	ldi	r23, 0x00	; 0
    89d4:	60 e0       	ldi	r22, 0x00	; 0
    89d6:	87 e6       	ldi	r24, 0x67	; 103
    89d8:	90 e0       	ldi	r25, 0x00	; 0
    89da:	0e 94 f4 3b 	call	0x77e8	; 0x77e8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    89de:	24 e3       	ldi	r18, 0x34	; 52
    89e0:	35 e4       	ldi	r19, 0x45	; 69
    89e2:	41 2f       	mov	r20, r17
    89e4:	62 e1       	ldi	r22, 0x12	; 18
    89e6:	ce 01       	movw	r24, r28
    89e8:	01 96       	adiw	r24, 0x01	; 1
    89ea:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    89ee:	0f 90       	pop	r0
    89f0:	0f 90       	pop	r0
    89f2:	0f 90       	pop	r0
    89f4:	0f 90       	pop	r0
    89f6:	0f 90       	pop	r0
    89f8:	df 91       	pop	r29
    89fa:	cf 91       	pop	r28
    89fc:	1f 91       	pop	r17
    89fe:	08 95       	ret

00008a00 <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
    8a00:	ef 92       	push	r14
    8a02:	ff 92       	push	r15
    8a04:	0f 93       	push	r16
    8a06:	1f 93       	push	r17
    8a08:	cf 93       	push	r28
    8a0a:	df 93       	push	r29
    8a0c:	cd b7       	in	r28, 0x3d	; 61
    8a0e:	de b7       	in	r29, 0x3e	; 62
    8a10:	63 97       	sbiw	r28, 0x13	; 19
    8a12:	0f b6       	in	r0, 0x3f	; 63
    8a14:	f8 94       	cli
    8a16:	de bf       	out	0x3e, r29	; 62
    8a18:	0f be       	out	0x3f, r0	; 63
    8a1a:	cd bf       	out	0x3d, r28	; 61
    8a1c:	7c 01       	movw	r14, r24
    8a1e:	10 e0       	ldi	r17, 0x00	; 0
    8a20:	0f ef       	ldi	r16, 0xFF	; 255
    8a22:	ae 01       	movw	r20, r28
    8a24:	4f 5f       	subi	r20, 0xFF	; 255
    8a26:	5f 4f       	sbci	r21, 0xFF	; 255
    8a28:	be 01       	movw	r22, r28
    8a2a:	6d 5e       	subi	r22, 0xED	; 237
    8a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    8a2e:	81 2f       	mov	r24, r17
    8a30:	0e 94 94 42 	call	0x8528	; 0x8528 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8a34:	be 01       	movw	r22, r28
    8a36:	6f 5f       	subi	r22, 0xFF	; 255
    8a38:	7f 4f       	sbci	r23, 0xFF	; 255
    8a3a:	c7 01       	movw	r24, r14
    8a3c:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    8a40:	89 2b       	or	r24, r25
    8a42:	09 f4       	brne	.+2      	; 0x8a46 <remote_tds_name_exist(char*)+0x46>
    8a44:	01 2f       	mov	r16, r17
    8a46:	1f 5f       	subi	r17, 0xFF	; 255
    8a48:	1a 30       	cpi	r17, 0x0A	; 10
    8a4a:	59 f7       	brne	.-42     	; 0x8a22 <remote_tds_name_exist(char*)+0x22>
    8a4c:	80 2f       	mov	r24, r16
    8a4e:	63 96       	adiw	r28, 0x13	; 19
    8a50:	0f b6       	in	r0, 0x3f	; 63
    8a52:	f8 94       	cli
    8a54:	de bf       	out	0x3e, r29	; 62
    8a56:	0f be       	out	0x3f, r0	; 63
    8a58:	cd bf       	out	0x3d, r28	; 61
    8a5a:	df 91       	pop	r29
    8a5c:	cf 91       	pop	r28
    8a5e:	1f 91       	pop	r17
    8a60:	0f 91       	pop	r16
    8a62:	ff 90       	pop	r15
    8a64:	ef 90       	pop	r14
    8a66:	08 95       	ret

00008a68 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_create_namejjh():
    8a68:	1f 93       	push	r17
    8a6a:	cf 93       	push	r28
    8a6c:	df 93       	push	r29
    8a6e:	cd b7       	in	r28, 0x3d	; 61
    8a70:	de b7       	in	r29, 0x3e	; 62
    8a72:	62 97       	sbiw	r28, 0x12	; 18
    8a74:	0f b6       	in	r0, 0x3f	; 63
    8a76:	f8 94       	cli
    8a78:	de bf       	out	0x3e, r29	; 62
    8a7a:	0f be       	out	0x3f, r0	; 63
    8a7c:	cd bf       	out	0x3d, r28	; 61
_Z31display_element_get_string_argsv():
    8a7e:	10 91 7f 09 	lds	r17, 0x097F	; 0x80097f <dialog_set_string_args>
_Z21menu_rtds_create_namejjh():
    8a82:	ce 01       	movw	r24, r28
    8a84:	01 96       	adiw	r24, 0x01	; 1
    8a86:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <display_element_get_string(char*)>
    8a8a:	89 81       	ldd	r24, Y+1	; 0x01
    8a8c:	88 23       	and	r24, r24
    8a8e:	81 f0       	breq	.+32     	; 0x8ab0 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
    8a90:	ce 01       	movw	r24, r28
    8a92:	01 96       	adiw	r24, 0x01	; 1
    8a94:	0e 94 00 45 	call	0x8a00	; 0x8a00 <remote_tds_name_exist(char*)>
    8a98:	8f 3f       	cpi	r24, 0xFF	; 255
    8a9a:	51 f4       	brne	.+20     	; 0x8ab0 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
    8a9c:	ae 01       	movw	r20, r28
    8a9e:	4f 5f       	subi	r20, 0xFF	; 255
    8aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    8aa2:	61 e0       	ldi	r22, 0x01	; 1
    8aa4:	81 2f       	mov	r24, r17
    8aa6:	0e 94 0d 44 	call	0x881a	; 0x881a <remote_tds_set_complete(unsigned char, unsigned char, char*)>
    8aaa:	81 2f       	mov	r24, r17
    8aac:	0e 94 3f 44 	call	0x887e	; 0x887e <remote_tds_subscibe_topic(unsigned char)>
    8ab0:	62 96       	adiw	r28, 0x12	; 18
    8ab2:	0f b6       	in	r0, 0x3f	; 63
    8ab4:	f8 94       	cli
    8ab6:	de bf       	out	0x3e, r29	; 62
    8ab8:	0f be       	out	0x3f, r0	; 63
    8aba:	cd bf       	out	0x3d, r28	; 61
    8abc:	df 91       	pop	r29
    8abe:	cf 91       	pop	r28
    8ac0:	1f 91       	pop	r17
    8ac2:	08 95       	ret

00008ac4 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_update_namejjh():
    8ac4:	1f 93       	push	r17
    8ac6:	cf 93       	push	r28
    8ac8:	df 93       	push	r29
    8aca:	cd b7       	in	r28, 0x3d	; 61
    8acc:	de b7       	in	r29, 0x3e	; 62
    8ace:	62 97       	sbiw	r28, 0x12	; 18
    8ad0:	0f b6       	in	r0, 0x3f	; 63
    8ad2:	f8 94       	cli
    8ad4:	de bf       	out	0x3e, r29	; 62
    8ad6:	0f be       	out	0x3f, r0	; 63
    8ad8:	cd bf       	out	0x3d, r28	; 61
_Z31display_element_get_string_argsv():
    8ada:	10 91 7f 09 	lds	r17, 0x097F	; 0x80097f <dialog_set_string_args>
_Z21menu_rtds_update_namejjh():
    8ade:	ce 01       	movw	r24, r28
    8ae0:	01 96       	adiw	r24, 0x01	; 1
    8ae2:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <display_element_get_string(char*)>
    8ae6:	89 81       	ldd	r24, Y+1	; 0x01
    8ae8:	88 23       	and	r24, r24
    8aea:	61 f0       	breq	.+24     	; 0x8b04 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x40>
    8aec:	ce 01       	movw	r24, r28
    8aee:	01 96       	adiw	r24, 0x01	; 1
    8af0:	0e 94 00 45 	call	0x8a00	; 0x8a00 <remote_tds_name_exist(char*)>
    8af4:	8f 3f       	cpi	r24, 0xFF	; 255
    8af6:	31 f4       	brne	.+12     	; 0x8b04 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x40>
    8af8:	be 01       	movw	r22, r28
    8afa:	6f 5f       	subi	r22, 0xFF	; 255
    8afc:	7f 4f       	sbci	r23, 0xFF	; 255
    8afe:	81 2f       	mov	r24, r17
    8b00:	0e 94 01 43 	call	0x8602	; 0x8602 <remote_tds_set_name(unsigned char, char*)>
    8b04:	62 96       	adiw	r28, 0x12	; 18
    8b06:	0f b6       	in	r0, 0x3f	; 63
    8b08:	f8 94       	cli
    8b0a:	de bf       	out	0x3e, r29	; 62
    8b0c:	0f be       	out	0x3f, r0	; 63
    8b0e:	cd bf       	out	0x3d, r28	; 61
    8b10:	df 91       	pop	r29
    8b12:	cf 91       	pop	r28
    8b14:	1f 91       	pop	r17
    8b16:	08 95       	ret

00008b18 <remote_tds_set_data(unsigned char, int)>:
_Z19remote_tds_set_datahi():
    8b18:	1f 93       	push	r17
    8b1a:	cf 93       	push	r28
    8b1c:	df 93       	push	r29
    8b1e:	8a 30       	cpi	r24, 0x0A	; 10
    8b20:	60 f5       	brcc	.+88     	; 0x8b7a <remote_tds_set_data(unsigned char, int)+0x62>
    8b22:	17 2f       	mov	r17, r23
    8b24:	26 2f       	mov	r18, r22
    8b26:	93 e0       	ldi	r25, 0x03	; 3
    8b28:	89 9f       	mul	r24, r25
    8b2a:	e0 01       	movw	r28, r0
    8b2c:	11 24       	eor	r1, r1
    8b2e:	ae 01       	movw	r20, r28
    8b30:	4c 59       	subi	r20, 0x9C	; 156
    8b32:	5f 4f       	sbci	r21, 0xFF	; 255
    8b34:	05 2e       	mov	r0, r21
    8b36:	00 0c       	add	r0, r0
    8b38:	66 0b       	sbc	r22, r22
    8b3a:	77 0b       	sbc	r23, r23
    8b3c:	87 e6       	ldi	r24, 0x67	; 103
    8b3e:	9a e0       	ldi	r25, 0x0A	; 10
    8b40:	0e 94 40 aa 	call	0x15480	; 0x15480 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    8b44:	ae 01       	movw	r20, r28
    8b46:	4b 59       	subi	r20, 0x9B	; 155
    8b48:	5f 4f       	sbci	r21, 0xFF	; 255
    8b4a:	05 2e       	mov	r0, r21
    8b4c:	00 0c       	add	r0, r0
    8b4e:	66 0b       	sbc	r22, r22
    8b50:	77 0b       	sbc	r23, r23
    8b52:	21 2f       	mov	r18, r17
    8b54:	87 e6       	ldi	r24, 0x67	; 103
    8b56:	9a e0       	ldi	r25, 0x0A	; 10
    8b58:	0e 94 40 aa 	call	0x15480	; 0x15480 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    8b5c:	ae 01       	movw	r20, r28
    8b5e:	4a 59       	subi	r20, 0x9A	; 154
    8b60:	5f 4f       	sbci	r21, 0xFF	; 255
    8b62:	05 2e       	mov	r0, r21
    8b64:	00 0c       	add	r0, r0
    8b66:	66 0b       	sbc	r22, r22
    8b68:	77 0b       	sbc	r23, r23
    8b6a:	20 e0       	ldi	r18, 0x00	; 0
    8b6c:	87 e6       	ldi	r24, 0x67	; 103
    8b6e:	9a e0       	ldi	r25, 0x0A	; 10
    8b70:	df 91       	pop	r29
    8b72:	cf 91       	pop	r28
    8b74:	1f 91       	pop	r17
    8b76:	0c 94 40 aa 	jmp	0x15480	; 0x15480 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    8b7a:	df 91       	pop	r29
    8b7c:	cf 91       	pop	r28
    8b7e:	1f 91       	pop	r17
    8b80:	08 95       	ret

00008b82 <remote_tds_get_data(unsigned char)>:
_Z19remote_tds_get_datah():
    8b82:	0f 93       	push	r16
    8b84:	1f 93       	push	r17
    8b86:	cf 93       	push	r28
    8b88:	df 93       	push	r29
    8b8a:	8a 30       	cpi	r24, 0x0A	; 10
    8b8c:	30 f5       	brcc	.+76     	; 0x8bda <remote_tds_get_data(unsigned char)+0x58>
    8b8e:	93 e0       	ldi	r25, 0x03	; 3
    8b90:	89 9f       	mul	r24, r25
    8b92:	80 01       	movw	r16, r0
    8b94:	11 24       	eor	r1, r1
    8b96:	a8 01       	movw	r20, r16
    8b98:	4b 59       	subi	r20, 0x9B	; 155
    8b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    8b9c:	05 2e       	mov	r0, r21
    8b9e:	00 0c       	add	r0, r0
    8ba0:	66 0b       	sbc	r22, r22
    8ba2:	77 0b       	sbc	r23, r23
    8ba4:	87 e6       	ldi	r24, 0x67	; 103
    8ba6:	9a e0       	ldi	r25, 0x0A	; 10
    8ba8:	0e 94 1b aa 	call	0x15436	; 0x15436 <SRAM_23LC::readByte(unsigned long)>
    8bac:	c8 2f       	mov	r28, r24
    8bae:	d0 e0       	ldi	r29, 0x00	; 0
    8bb0:	dc 2f       	mov	r29, r28
    8bb2:	cc 27       	eor	r28, r28
    8bb4:	a8 01       	movw	r20, r16
    8bb6:	4c 59       	subi	r20, 0x9C	; 156
    8bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    8bba:	05 2e       	mov	r0, r21
    8bbc:	00 0c       	add	r0, r0
    8bbe:	66 0b       	sbc	r22, r22
    8bc0:	77 0b       	sbc	r23, r23
    8bc2:	87 e6       	ldi	r24, 0x67	; 103
    8bc4:	9a e0       	ldi	r25, 0x0A	; 10
    8bc6:	0e 94 1b aa 	call	0x15436	; 0x15436 <SRAM_23LC::readByte(unsigned long)>
    8bca:	8c 0f       	add	r24, r28
    8bcc:	9d 2f       	mov	r25, r29
    8bce:	91 1d       	adc	r25, r1
    8bd0:	df 91       	pop	r29
    8bd2:	cf 91       	pop	r28
    8bd4:	1f 91       	pop	r17
    8bd6:	0f 91       	pop	r16
    8bd8:	08 95       	ret
    8bda:	90 e0       	ldi	r25, 0x00	; 0
    8bdc:	80 e0       	ldi	r24, 0x00	; 0
    8bde:	f8 cf       	rjmp	.-16     	; 0x8bd0 <remote_tds_get_data(unsigned char)+0x4e>

00008be0 <remote_tds_get_last_update(unsigned char)>:
_Z26remote_tds_get_last_updateh():
    8be0:	8a 30       	cpi	r24, 0x0A	; 10
    8be2:	70 f4       	brcc	.+28     	; 0x8c00 <remote_tds_get_last_update(unsigned char)+0x20>
    8be4:	93 e0       	ldi	r25, 0x03	; 3
    8be6:	89 9f       	mul	r24, r25
    8be8:	a0 01       	movw	r20, r0
    8bea:	11 24       	eor	r1, r1
    8bec:	4a 59       	subi	r20, 0x9A	; 154
    8bee:	5f 4f       	sbci	r21, 0xFF	; 255
    8bf0:	05 2e       	mov	r0, r21
    8bf2:	00 0c       	add	r0, r0
    8bf4:	66 0b       	sbc	r22, r22
    8bf6:	77 0b       	sbc	r23, r23
    8bf8:	87 e6       	ldi	r24, 0x67	; 103
    8bfa:	9a e0       	ldi	r25, 0x0A	; 10
    8bfc:	0c 94 1b aa 	jmp	0x15436	; 0x15436 <SRAM_23LC::readByte(unsigned long)>
    8c00:	8f ef       	ldi	r24, 0xFF	; 255
    8c02:	08 95       	ret

00008c04 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
    8c04:	3f 92       	push	r3
    8c06:	4f 92       	push	r4
    8c08:	5f 92       	push	r5
    8c0a:	6f 92       	push	r6
    8c0c:	7f 92       	push	r7
    8c0e:	8f 92       	push	r8
    8c10:	9f 92       	push	r9
    8c12:	af 92       	push	r10
    8c14:	bf 92       	push	r11
    8c16:	cf 92       	push	r12
    8c18:	df 92       	push	r13
    8c1a:	ef 92       	push	r14
    8c1c:	ff 92       	push	r15
    8c1e:	0f 93       	push	r16
    8c20:	1f 93       	push	r17
    8c22:	cf 93       	push	r28
    8c24:	df 93       	push	r29
    8c26:	cd b7       	in	r28, 0x3d	; 61
    8c28:	de b7       	in	r29, 0x3e	; 62
    8c2a:	cd 54       	subi	r28, 0x4D	; 77
    8c2c:	d1 09       	sbc	r29, r1
    8c2e:	0f b6       	in	r0, 0x3f	; 63
    8c30:	f8 94       	cli
    8c32:	de bf       	out	0x3e, r29	; 62
    8c34:	0f be       	out	0x3f, r0	; 63
    8c36:	cd bf       	out	0x3d, r28	; 61
    8c38:	3c 01       	movw	r6, r24
    8c3a:	4b 01       	movw	r8, r22
    8c3c:	5a 01       	movw	r10, r20
    8c3e:	89 01       	movw	r16, r18
    8c40:	de 2c       	mov	r13, r14
    8c42:	70 e0       	ldi	r23, 0x00	; 0
    8c44:	60 e0       	ldi	r22, 0x00	; 0
    8c46:	85 ea       	ldi	r24, 0xA5	; 165
    8c48:	9b e0       	ldi	r25, 0x0B	; 11
    8c4a:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    8c4e:	08 0d       	add	r16, r8
    8c50:	19 1d       	adc	r17, r9
    8c52:	93 01       	movw	r18, r6
    8c54:	2a 0d       	add	r18, r10
    8c56:	3b 1d       	adc	r19, r11
    8c58:	a4 01       	movw	r20, r8
    8c5a:	b3 01       	movw	r22, r6
    8c5c:	85 ea       	ldi	r24, 0xA5	; 165
    8c5e:	9b e0       	ldi	r25, 0x0B	; 11
    8c60:	0e 94 4b 93 	call	0x12696	; 0x12696 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    8c64:	ae 01       	movw	r20, r28
    8c66:	45 5c       	subi	r20, 0xC5	; 197
    8c68:	5f 4f       	sbci	r21, 0xFF	; 255
    8c6a:	be 01       	movw	r22, r28
    8c6c:	63 5b       	subi	r22, 0xB3	; 179
    8c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    8c70:	8e 2d       	mov	r24, r14
    8c72:	0e 94 94 42 	call	0x8528	; 0x8528 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8c76:	2e 96       	adiw	r28, 0x0e	; 14
    8c78:	3f ac       	ldd	r3, Y+63	; 0x3f
    8c7a:	2e 97       	sbiw	r28, 0x0e	; 14
    8c7c:	81 e0       	ldi	r24, 0x01	; 1
    8c7e:	38 12       	cpse	r3, r24
    8c80:	a9 c0       	rjmp	.+338    	; 0x8dd4 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1d0>
    8c82:	64 e2       	ldi	r22, 0x24	; 36
    8c84:	77 e5       	ldi	r23, 0x57	; 87
    8c86:	ce 01       	movw	r24, r28
    8c88:	01 96       	adiw	r24, 0x01	; 1
    8c8a:	5c 01       	movw	r10, r24
    8c8c:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    8c90:	23 01       	movw	r4, r6
    8c92:	95 e0       	ldi	r25, 0x05	; 5
    8c94:	49 0e       	add	r4, r25
    8c96:	51 1c       	adc	r5, r1
    8c98:	c1 2c       	mov	r12, r1
    8c9a:	ee 24       	eor	r14, r14
    8c9c:	ea 94       	dec	r14
    8c9e:	fe 2c       	mov	r15, r14
    8ca0:	10 e0       	ldi	r17, 0x00	; 0
    8ca2:	00 e0       	ldi	r16, 0x00	; 0
    8ca4:	22 e0       	ldi	r18, 0x02	; 2
    8ca6:	a4 01       	movw	r20, r8
    8ca8:	46 5f       	subi	r20, 0xF6	; 246
    8caa:	5f 4f       	sbci	r21, 0xFF	; 255
    8cac:	b2 01       	movw	r22, r4
    8cae:	c5 01       	movw	r24, r10
    8cb0:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8cb4:	be 01       	movw	r22, r28
    8cb6:	65 5c       	subi	r22, 0xC5	; 197
    8cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    8cba:	c5 01       	movw	r24, r10
    8cbc:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    8cc0:	b3 01       	movw	r22, r6
    8cc2:	6c 5e       	subi	r22, 0xEC	; 236
    8cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    8cc6:	22 e0       	ldi	r18, 0x02	; 2
    8cc8:	a4 01       	movw	r20, r8
    8cca:	42 5e       	subi	r20, 0xE2	; 226
    8ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    8cce:	c5 01       	movw	r24, r10
    8cd0:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8cd4:	8d 2d       	mov	r24, r13
    8cd6:	0e 94 c1 45 	call	0x8b82	; 0x8b82 <remote_tds_get_data(unsigned char)>
    8cda:	bc 01       	movw	r22, r24
    8cdc:	99 0f       	add	r25, r25
    8cde:	88 0b       	sbc	r24, r24
    8ce0:	99 0b       	sbc	r25, r25
    8ce2:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
    8ce6:	20 e0       	ldi	r18, 0x00	; 0
    8ce8:	30 e0       	ldi	r19, 0x00	; 0
    8cea:	4a e7       	ldi	r20, 0x7A	; 122
    8cec:	54 e4       	ldi	r21, 0x44	; 68
    8cee:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
    8cf2:	85 01       	movw	r16, r10
    8cf4:	22 e0       	ldi	r18, 0x02	; 2
    8cf6:	44 e0       	ldi	r20, 0x04	; 4
    8cf8:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
    8cfc:	6e e7       	ldi	r22, 0x7E	; 126
    8cfe:	75 e0       	ldi	r23, 0x05	; 5
    8d00:	c5 01       	movw	r24, r10
    8d02:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    8d06:	3e 01       	movw	r6, r28
    8d08:	81 e2       	ldi	r24, 0x21	; 33
    8d0a:	68 0e       	add	r6, r24
    8d0c:	71 1c       	adc	r7, r1
    8d0e:	67 ee       	ldi	r22, 0xE7	; 231
    8d10:	79 e5       	ldi	r23, 0x59	; 89
    8d12:	c3 01       	movw	r24, r6
    8d14:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    8d18:	b5 01       	movw	r22, r10
    8d1a:	c3 01       	movw	r24, r6
    8d1c:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    8d20:	10 e0       	ldi	r17, 0x00	; 0
    8d22:	00 e0       	ldi	r16, 0x00	; 0
    8d24:	22 e0       	ldi	r18, 0x02	; 2
    8d26:	a4 01       	movw	r20, r8
    8d28:	44 5c       	subi	r20, 0xC4	; 196
    8d2a:	5f 4f       	sbci	r21, 0xFF	; 255
    8d2c:	b2 01       	movw	r22, r4
    8d2e:	c3 01       	movw	r24, r6
    8d30:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8d34:	8d 2d       	mov	r24, r13
    8d36:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <remote_tds_get_last_update(unsigned char)>
    8d3a:	d8 2e       	mov	r13, r24
    8d3c:	67 e0       	ldi	r22, 0x07	; 7
    8d3e:	77 e5       	ldi	r23, 0x57	; 87
    8d40:	c3 01       	movw	r24, r6
    8d42:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    8d46:	1f 92       	push	r1
    8d48:	df 92       	push	r13
    8d4a:	7f 92       	push	r7
    8d4c:	6f 92       	push	r6
    8d4e:	83 ef       	ldi	r24, 0xF3	; 243
    8d50:	92 e0       	ldi	r25, 0x02	; 2
    8d52:	9f 93       	push	r25
    8d54:	8f 93       	push	r24
    8d56:	bf 92       	push	r11
    8d58:	af 92       	push	r10
    8d5a:	0e 94 ad dd 	call	0x1bb5a	; 0x1bb5a <sprintf>
    8d5e:	21 e0       	ldi	r18, 0x01	; 1
    8d60:	a4 01       	movw	r20, r8
    8d62:	40 5b       	subi	r20, 0xB0	; 176
    8d64:	5f 4f       	sbci	r21, 0xFF	; 255
    8d66:	b2 01       	movw	r22, r4
    8d68:	c5 01       	movw	r24, r10
    8d6a:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8d6e:	0f b6       	in	r0, 0x3f	; 63
    8d70:	f8 94       	cli
    8d72:	de bf       	out	0x3e, r29	; 62
    8d74:	0f be       	out	0x3f, r0	; 63
    8d76:	cd bf       	out	0x3d, r28	; 61
    8d78:	99 ef       	ldi	r25, 0xF9	; 249
    8d7a:	9d 15       	cp	r25, r13
    8d7c:	08 f4       	brcc	.+2      	; 0x8d80 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x17c>
    8d7e:	43 c0       	rjmp	.+134    	; 0x8e06 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x202>
    8d80:	2e 96       	adiw	r28, 0x0e	; 14
    8d82:	3f ae       	std	Y+63, r3	; 0x3f
    8d84:	2e 97       	sbiw	r28, 0x0e	; 14
    8d86:	6d e1       	ldi	r22, 0x1D	; 29
    8d88:	77 e5       	ldi	r23, 0x57	; 87
    8d8a:	c3 01       	movw	r24, r6
    8d8c:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    8d90:	2e 96       	adiw	r28, 0x0e	; 14
    8d92:	8f ad       	ldd	r24, Y+63	; 0x3f
    8d94:	2e 97       	sbiw	r28, 0x0e	; 14
    8d96:	1f 92       	push	r1
    8d98:	8f 93       	push	r24
    8d9a:	7f 92       	push	r7
    8d9c:	6f 92       	push	r6
    8d9e:	83 ef       	ldi	r24, 0xF3	; 243
    8da0:	92 e0       	ldi	r25, 0x02	; 2
    8da2:	9f 93       	push	r25
    8da4:	8f 93       	push	r24
    8da6:	bf 92       	push	r11
    8da8:	af 92       	push	r10
    8daa:	0e 94 ad dd 	call	0x1bb5a	; 0x1bb5a <sprintf>
    8dae:	a4 01       	movw	r20, r8
    8db0:	4c 59       	subi	r20, 0x9C	; 156
    8db2:	5f 4f       	sbci	r21, 0xFF	; 255
    8db4:	c1 2c       	mov	r12, r1
    8db6:	ee 24       	eor	r14, r14
    8db8:	ea 94       	dec	r14
    8dba:	fe 2c       	mov	r15, r14
    8dbc:	10 e0       	ldi	r17, 0x00	; 0
    8dbe:	00 e0       	ldi	r16, 0x00	; 0
    8dc0:	22 e0       	ldi	r18, 0x02	; 2
    8dc2:	b2 01       	movw	r22, r4
    8dc4:	c5 01       	movw	r24, r10
    8dc6:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8dca:	0f b6       	in	r0, 0x3f	; 63
    8dcc:	f8 94       	cli
    8dce:	de bf       	out	0x3e, r29	; 62
    8dd0:	0f be       	out	0x3f, r0	; 63
    8dd2:	cd bf       	out	0x3d, r28	; 61
    8dd4:	c3 5b       	subi	r28, 0xB3	; 179
    8dd6:	df 4f       	sbci	r29, 0xFF	; 255
    8dd8:	0f b6       	in	r0, 0x3f	; 63
    8dda:	f8 94       	cli
    8ddc:	de bf       	out	0x3e, r29	; 62
    8dde:	0f be       	out	0x3f, r0	; 63
    8de0:	cd bf       	out	0x3d, r28	; 61
    8de2:	df 91       	pop	r29
    8de4:	cf 91       	pop	r28
    8de6:	1f 91       	pop	r17
    8de8:	0f 91       	pop	r16
    8dea:	ff 90       	pop	r15
    8dec:	ef 90       	pop	r14
    8dee:	df 90       	pop	r13
    8df0:	cf 90       	pop	r12
    8df2:	bf 90       	pop	r11
    8df4:	af 90       	pop	r10
    8df6:	9f 90       	pop	r9
    8df8:	8f 90       	pop	r8
    8dfa:	7f 90       	pop	r7
    8dfc:	6f 90       	pop	r6
    8dfe:	5f 90       	pop	r5
    8e00:	4f 90       	pop	r4
    8e02:	3f 90       	pop	r3
    8e04:	08 95       	ret
    8e06:	2e 96       	adiw	r28, 0x0e	; 14
    8e08:	1f ae       	std	Y+63, r1	; 0x3f
    8e0a:	2e 97       	sbiw	r28, 0x0e	; 14
    8e0c:	bc cf       	rjmp	.-136    	; 0x8d86 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x182>

00008e0e <remote_tds_inc_last_update(unsigned char)>:
_Z26remote_tds_inc_last_updateh():
    8e0e:	cf 92       	push	r12
    8e10:	df 92       	push	r13
    8e12:	ef 92       	push	r14
    8e14:	ff 92       	push	r15
    8e16:	8a 30       	cpi	r24, 0x0A	; 10
    8e18:	d8 f4       	brcc	.+54     	; 0x8e50 <remote_tds_inc_last_update(unsigned char)+0x42>
    8e1a:	93 e0       	ldi	r25, 0x03	; 3
    8e1c:	89 9f       	mul	r24, r25
    8e1e:	60 01       	movw	r12, r0
    8e20:	11 24       	eor	r1, r1
    8e22:	86 e6       	ldi	r24, 0x66	; 102
    8e24:	c8 0e       	add	r12, r24
    8e26:	d1 1c       	adc	r13, r1
    8e28:	0d 2c       	mov	r0, r13
    8e2a:	00 0c       	add	r0, r0
    8e2c:	ee 08       	sbc	r14, r14
    8e2e:	ff 08       	sbc	r15, r15
    8e30:	b7 01       	movw	r22, r14
    8e32:	a6 01       	movw	r20, r12
    8e34:	87 e6       	ldi	r24, 0x67	; 103
    8e36:	9a e0       	ldi	r25, 0x0A	; 10
    8e38:	0e 94 1b aa 	call	0x15436	; 0x15436 <SRAM_23LC::readByte(unsigned long)>
    8e3c:	8a 3f       	cpi	r24, 0xFA	; 250
    8e3e:	08 f4       	brcc	.+2      	; 0x8e42 <remote_tds_inc_last_update(unsigned char)+0x34>
    8e40:	8f 5f       	subi	r24, 0xFF	; 255
    8e42:	28 2f       	mov	r18, r24
    8e44:	b7 01       	movw	r22, r14
    8e46:	a6 01       	movw	r20, r12
    8e48:	87 e6       	ldi	r24, 0x67	; 103
    8e4a:	9a e0       	ldi	r25, 0x0A	; 10
    8e4c:	0e 94 40 aa 	call	0x15480	; 0x15480 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    8e50:	ff 90       	pop	r15
    8e52:	ef 90       	pop	r14
    8e54:	df 90       	pop	r13
    8e56:	cf 90       	pop	r12
    8e58:	08 95       	ret

00008e5a <remote_tds_update_last_update()>:
_Z29remote_tds_update_last_updatev():
    8e5a:	1f 93       	push	r17
    8e5c:	cf 93       	push	r28
    8e5e:	df 93       	push	r29
    8e60:	1f 92       	push	r1
    8e62:	cd b7       	in	r28, 0x3d	; 61
    8e64:	de b7       	in	r29, 0x3e	; 62
    8e66:	10 e0       	ldi	r17, 0x00	; 0
    8e68:	be 01       	movw	r22, r28
    8e6a:	6f 5f       	subi	r22, 0xFF	; 255
    8e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    8e6e:	81 2f       	mov	r24, r17
    8e70:	0e 94 2a 43 	call	0x8654	; 0x8654 <remote_tds_get_active(unsigned char, unsigned char*)>
    8e74:	89 81       	ldd	r24, Y+1	; 0x01
    8e76:	81 30       	cpi	r24, 0x01	; 1
    8e78:	19 f4       	brne	.+6      	; 0x8e80 <remote_tds_update_last_update()+0x26>
    8e7a:	81 2f       	mov	r24, r17
    8e7c:	0e 94 07 47 	call	0x8e0e	; 0x8e0e <remote_tds_inc_last_update(unsigned char)>
    8e80:	1f 5f       	subi	r17, 0xFF	; 255
    8e82:	1a 30       	cpi	r17, 0x0A	; 10
    8e84:	89 f7       	brne	.-30     	; 0x8e68 <remote_tds_update_last_update()+0xe>
    8e86:	0f 90       	pop	r0
    8e88:	df 91       	pop	r29
    8e8a:	cf 91       	pop	r28
    8e8c:	1f 91       	pop	r17
    8e8e:	08 95       	ret

00008e90 <set_default_ring(unsigned char)>:
_Z16set_default_ringh():
    8e90:	68 2f       	mov	r22, r24
    8e92:	8c e5       	ldi	r24, 0x5C	; 92
    8e94:	90 e0       	ldi	r25, 0x00	; 0
    8e96:	0c 94 74 39 	jmp	0x72e8	; 0x72e8 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>

00008e9a <button_click_deactivate_term_ring(unsigned int, unsigned int, unsigned char)>:
_Z33button_click_deactivate_term_ringjjh():
    8e9a:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    8e9e:	0e 94 5d 92 	call	0x124ba	; 0x124ba <thermostat_ring_clear(unsigned char)>
    8ea2:	8f ef       	ldi	r24, 0xFF	; 255
    8ea4:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <default_ring>
    8ea8:	0e 94 48 47 	call	0x8e90	; 0x8e90 <set_default_ring(unsigned char)>
    8eac:	0c 94 b3 3b 	jmp	0x7766	; 0x7766 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

00008eb0 <term_ring_do_activate(unsigned int, unsigned int, unsigned char)>:
_Z21term_ring_do_activatejjh():
    8eb0:	cf 93       	push	r28
    8eb2:	c8 2f       	mov	r28, r24
    8eb4:	61 e0       	ldi	r22, 0x01	; 1
    8eb6:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <thermostat_ring_set_active(unsigned char, unsigned char)>
    8eba:	c0 93 2e 0a 	sts	0x0A2E, r28	; 0x800a2e <default_ring>
    8ebe:	8c 2f       	mov	r24, r28
    8ec0:	cf 91       	pop	r28
    8ec2:	0c 94 48 47 	jmp	0x8e90	; 0x8e90 <set_default_ring(unsigned char)>

00008ec6 <get_default_ring()>:
_ZNK5EERefdeEv():
    8ec6:	8c e5       	ldi	r24, 0x5C	; 92
    8ec8:	90 e0       	ldi	r25, 0x00	; 0
    8eca:	0c 94 80 e4 	jmp	0x1c900	; 0x1c900 <eeprom_read_byte>

00008ece <set_default_show_temp(unsigned char)>:
_Z21set_default_show_temph():
    8ece:	68 2f       	mov	r22, r24
    8ed0:	8d e5       	ldi	r24, 0x5D	; 93
    8ed2:	90 e0       	ldi	r25, 0x00	; 0
    8ed4:	0c 94 74 39 	jmp	0x72e8	; 0x72e8 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>

00008ed8 <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_show_default_tempjjh():
    8ed8:	84 2f       	mov	r24, r20
    8eda:	40 93 2d 0a 	sts	0x0A2D, r20	; 0x800a2d <default_show_temp>
    8ede:	0c 94 67 47 	jmp	0x8ece	; 0x8ece <set_default_show_temp(unsigned char)>

00008ee2 <get_default_show_temp()>:
_ZNK5EERefdeEv():
    8ee2:	8d e5       	ldi	r24, 0x5D	; 93
    8ee4:	90 e0       	ldi	r25, 0x00	; 0
    8ee6:	0c 94 80 e4 	jmp	0x1c900	; 0x1c900 <eeprom_read_byte>

00008eea <tds_extended_memory_store()>:
_Z25tds_extended_memory_storev():
    8eea:	1f 93       	push	r17
    8eec:	cf 93       	push	r28
    8eee:	df 93       	push	r29
    8ef0:	cd b7       	in	r28, 0x3d	; 61
    8ef2:	de b7       	in	r29, 0x3e	; 62
    8ef4:	66 97       	sbiw	r28, 0x16	; 22
    8ef6:	0f b6       	in	r0, 0x3f	; 63
    8ef8:	f8 94       	cli
    8efa:	de bf       	out	0x3e, r29	; 62
    8efc:	0f be       	out	0x3f, r0	; 63
    8efe:	cd bf       	out	0x3d, r28	; 61
    8f00:	10 e0       	ldi	r17, 0x00	; 0
    8f02:	be 01       	movw	r22, r28
    8f04:	6f 5f       	subi	r22, 0xFF	; 255
    8f06:	7f 4f       	sbci	r23, 0xFF	; 255
    8f08:	81 2f       	mov	r24, r17
    8f0a:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
    8f0e:	1f 5f       	subi	r17, 0xFF	; 255
    8f10:	16 30       	cpi	r17, 0x06	; 6
    8f12:	b9 f7       	brne	.-18     	; 0x8f02 <tds_extended_memory_store()+0x18>
    8f14:	66 96       	adiw	r28, 0x16	; 22
    8f16:	0f b6       	in	r0, 0x3f	; 63
    8f18:	f8 94       	cli
    8f1a:	de bf       	out	0x3e, r29	; 62
    8f1c:	0f be       	out	0x3f, r0	; 63
    8f1e:	cd bf       	out	0x3d, r28	; 61
    8f20:	df 91       	pop	r29
    8f22:	cf 91       	pop	r28
    8f24:	1f 91       	pop	r17
    8f26:	08 95       	ret

00008f28 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
    8f28:	0f 93       	push	r16
    8f2a:	1f 93       	push	r17
    8f2c:	cf 93       	push	r28
    8f2e:	df 93       	push	r29
    8f30:	cd b7       	in	r28, 0x3d	; 61
    8f32:	de b7       	in	r29, 0x3e	; 62
    8f34:	a4 97       	sbiw	r28, 0x24	; 36
    8f36:	0f b6       	in	r0, 0x3f	; 63
    8f38:	f8 94       	cli
    8f3a:	de bf       	out	0x3e, r29	; 62
    8f3c:	0f be       	out	0x3f, r0	; 63
    8f3e:	cd bf       	out	0x3d, r28	; 61
    8f40:	89 e0       	ldi	r24, 0x09	; 9
    8f42:	9c e0       	ldi	r25, 0x0C	; 12
    8f44:	0e 94 15 be 	call	0x17c2a	; 0x17c2a <PubSubClient::connected()>
    8f48:	81 11       	cpse	r24, r1
    8f4a:	98 c0       	rjmp	.+304    	; 0x907c <mqtt_reconnect()+0x154>
    8f4c:	ce 01       	movw	r24, r28
    8f4e:	4b 96       	adiw	r24, 0x1b	; 27
    8f50:	0e 94 72 82 	call	0x104e4	; 0x104e4 <device_get_name(char*)>
    8f54:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    8f58:	00 91 54 0a 	lds	r16, 0x0A54	; 0x800a54 <lastmqttconnect>
    8f5c:	10 91 55 0a 	lds	r17, 0x0A55	; 0x800a55 <lastmqttconnect+0x1>
    8f60:	20 91 56 0a 	lds	r18, 0x0A56	; 0x800a56 <lastmqttconnect+0x2>
    8f64:	30 91 57 0a 	lds	r19, 0x0A57	; 0x800a57 <lastmqttconnect+0x3>
    8f68:	06 17       	cp	r16, r22
    8f6a:	17 07       	cpc	r17, r23
    8f6c:	28 07       	cpc	r18, r24
    8f6e:	39 07       	cpc	r19, r25
    8f70:	0c f0       	brlt	.+2      	; 0x8f74 <mqtt_reconnect()+0x4c>
    8f72:	84 c0       	rjmp	.+264    	; 0x907c <mqtt_reconnect()+0x154>
    8f74:	68 57       	subi	r22, 0x78	; 120
    8f76:	7c 4e       	sbci	r23, 0xEC	; 236
    8f78:	8f 4f       	sbci	r24, 0xFF	; 255
    8f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    8f7c:	60 93 54 0a 	sts	0x0A54, r22	; 0x800a54 <lastmqttconnect>
    8f80:	70 93 55 0a 	sts	0x0A55, r23	; 0x800a55 <lastmqttconnect+0x1>
    8f84:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <lastmqttconnect+0x2>
    8f88:	90 93 57 0a 	sts	0x0A57, r25	; 0x800a57 <lastmqttconnect+0x3>
    8f8c:	be 01       	movw	r22, r28
    8f8e:	65 5e       	subi	r22, 0xE5	; 229
    8f90:	7f 4f       	sbci	r23, 0xFF	; 255
    8f92:	89 e0       	ldi	r24, 0x09	; 9
    8f94:	9c e0       	ldi	r25, 0x0C	; 12
    8f96:	0e 94 9f bf 	call	0x17f3e	; 0x17f3e <PubSubClient::connect(char const*)>
    8f9a:	88 23       	and	r24, r24
    8f9c:	09 f4       	brne	.+2      	; 0x8fa0 <mqtt_reconnect()+0x78>
    8f9e:	6e c0       	rjmp	.+220    	; 0x907c <mqtt_reconnect()+0x154>
    8fa0:	67 ed       	ldi	r22, 0xD7	; 215
    8fa2:	75 e5       	ldi	r23, 0x55	; 85
    8fa4:	ce 01       	movw	r24, r28
    8fa6:	01 96       	adiw	r24, 0x01	; 1
    8fa8:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    8fac:	be 01       	movw	r22, r28
    8fae:	65 5e       	subi	r22, 0xE5	; 229
    8fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    8fb2:	ce 01       	movw	r24, r28
    8fb4:	01 96       	adiw	r24, 0x01	; 1
    8fb6:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    8fba:	6b e3       	ldi	r22, 0x3B	; 59
    8fbc:	73 e0       	ldi	r23, 0x03	; 3
    8fbe:	ce 01       	movw	r24, r28
    8fc0:	01 96       	adiw	r24, 0x01	; 1
    8fc2:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    8fc6:	be 01       	movw	r22, r28
    8fc8:	6f 5f       	subi	r22, 0xFF	; 255
    8fca:	7f 4f       	sbci	r23, 0xFF	; 255
    8fcc:	89 e0       	ldi	r24, 0x09	; 9
    8fce:	9c e0       	ldi	r25, 0x0C	; 12
    8fd0:	0e 94 05 c2 	call	0x1840a	; 0x1840a <PubSubClient::subscribe(char const*)>
    8fd4:	67 ed       	ldi	r22, 0xD7	; 215
    8fd6:	75 e5       	ldi	r23, 0x55	; 85
    8fd8:	ce 01       	movw	r24, r28
    8fda:	01 96       	adiw	r24, 0x01	; 1
    8fdc:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    8fe0:	65 e3       	ldi	r22, 0x35	; 53
    8fe2:	73 e0       	ldi	r23, 0x03	; 3
    8fe4:	ce 01       	movw	r24, r28
    8fe6:	01 96       	adiw	r24, 0x01	; 1
    8fe8:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    8fec:	be 01       	movw	r22, r28
    8fee:	6f 5f       	subi	r22, 0xFF	; 255
    8ff0:	7f 4f       	sbci	r23, 0xFF	; 255
    8ff2:	89 e0       	ldi	r24, 0x09	; 9
    8ff4:	9c e0       	ldi	r25, 0x0C	; 12
    8ff6:	0e 94 05 c2 	call	0x1840a	; 0x1840a <PubSubClient::subscribe(char const*)>
    8ffa:	10 e0       	ldi	r17, 0x00	; 0
    8ffc:	81 2f       	mov	r24, r17
    8ffe:	0e 94 3f 44 	call	0x887e	; 0x887e <remote_tds_subscibe_topic(unsigned char)>
    9002:	1f 5f       	subi	r17, 0xFF	; 255
    9004:	1a 30       	cpi	r17, 0x0A	; 10
    9006:	d1 f7       	brne	.-12     	; 0x8ffc <mqtt_reconnect()+0xd4>
    9008:	6e e9       	ldi	r22, 0x9E	; 158
    900a:	75 e5       	ldi	r23, 0x55	; 85
    900c:	ce 01       	movw	r24, r28
    900e:	01 96       	adiw	r24, 0x01	; 1
    9010:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    9014:	6b e3       	ldi	r22, 0x3B	; 59
    9016:	73 e0       	ldi	r23, 0x03	; 3
    9018:	ce 01       	movw	r24, r28
    901a:	01 96       	adiw	r24, 0x01	; 1
    901c:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    9020:	be 01       	movw	r22, r28
    9022:	6f 5f       	subi	r22, 0xFF	; 255
    9024:	7f 4f       	sbci	r23, 0xFF	; 255
    9026:	89 e0       	ldi	r24, 0x09	; 9
    9028:	9c e0       	ldi	r25, 0x0C	; 12
    902a:	0e 94 05 c2 	call	0x1840a	; 0x1840a <PubSubClient::subscribe(char const*)>
    902e:	66 e8       	ldi	r22, 0x86	; 134
    9030:	75 e5       	ldi	r23, 0x55	; 85
    9032:	ce 01       	movw	r24, r28
    9034:	01 96       	adiw	r24, 0x01	; 1
    9036:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    903a:	be 01       	movw	r22, r28
    903c:	6f 5f       	subi	r22, 0xFF	; 255
    903e:	7f 4f       	sbci	r23, 0xFF	; 255
    9040:	89 e0       	ldi	r24, 0x09	; 9
    9042:	9c e0       	ldi	r25, 0x0C	; 12
    9044:	0e 94 05 c2 	call	0x1840a	; 0x1840a <PubSubClient::subscribe(char const*)>
    9048:	6f e6       	ldi	r22, 0x6F	; 111
    904a:	75 e5       	ldi	r23, 0x55	; 85
    904c:	ce 01       	movw	r24, r28
    904e:	01 96       	adiw	r24, 0x01	; 1
    9050:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    9054:	be 01       	movw	r22, r28
    9056:	6f 5f       	subi	r22, 0xFF	; 255
    9058:	7f 4f       	sbci	r23, 0xFF	; 255
    905a:	89 e0       	ldi	r24, 0x09	; 9
    905c:	9c e0       	ldi	r25, 0x0C	; 12
    905e:	0e 94 05 c2 	call	0x1840a	; 0x1840a <PubSubClient::subscribe(char const*)>
    9062:	6d ea       	ldi	r22, 0xAD	; 173
    9064:	75 e5       	ldi	r23, 0x55	; 85
    9066:	ce 01       	movw	r24, r28
    9068:	01 96       	adiw	r24, 0x01	; 1
    906a:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    906e:	be 01       	movw	r22, r28
    9070:	6f 5f       	subi	r22, 0xFF	; 255
    9072:	7f 4f       	sbci	r23, 0xFF	; 255
    9074:	89 e0       	ldi	r24, 0x09	; 9
    9076:	9c e0       	ldi	r25, 0x0C	; 12
    9078:	0e 94 05 c2 	call	0x1840a	; 0x1840a <PubSubClient::subscribe(char const*)>
    907c:	89 e0       	ldi	r24, 0x09	; 9
    907e:	9c e0       	ldi	r25, 0x0C	; 12
    9080:	0e 94 91 c2 	call	0x18522	; 0x18522 <PubSubClient::state()>
    9084:	a4 96       	adiw	r28, 0x24	; 36
    9086:	0f b6       	in	r0, 0x3f	; 63
    9088:	f8 94       	cli
    908a:	de bf       	out	0x3e, r29	; 62
    908c:	0f be       	out	0x3f, r0	; 63
    908e:	cd bf       	out	0x3d, r28	; 61
    9090:	df 91       	pop	r29
    9092:	cf 91       	pop	r28
    9094:	1f 91       	pop	r17
    9096:	0f 91       	pop	r16
    9098:	08 95       	ret

0000909a <send_mqtt_onewire()>:
_Z17send_mqtt_onewirev():
    909a:	cf 92       	push	r12
    909c:	df 92       	push	r13
    909e:	ef 92       	push	r14
    90a0:	ff 92       	push	r15
    90a2:	0f 93       	push	r16
    90a4:	1f 93       	push	r17
    90a6:	cf 93       	push	r28
    90a8:	df 93       	push	r29
    90aa:	cd b7       	in	r28, 0x3d	; 61
    90ac:	de b7       	in	r29, 0x3e	; 62
    90ae:	c0 54       	subi	r28, 0x40	; 64
    90b0:	d1 09       	sbc	r29, r1
    90b2:	0f b6       	in	r0, 0x3f	; 63
    90b4:	f8 94       	cli
    90b6:	de bf       	out	0x3e, r29	; 62
    90b8:	0f be       	out	0x3f, r0	; 63
    90ba:	cd bf       	out	0x3d, r28	; 61
    90bc:	80 91 94 0f 	lds	r24, 0x0F94	; 0x800f94 <Global_HWwirenum>
itoa():
    90c0:	4a e0       	ldi	r20, 0x0A	; 10
    90c2:	be 01       	movw	r22, r28
    90c4:	6f 5f       	subi	r22, 0xFF	; 255
    90c6:	7f 4f       	sbci	r23, 0xFF	; 255
    90c8:	90 e0       	ldi	r25, 0x00	; 0
    90ca:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    90ce:	ae 01       	movw	r20, r28
    90d0:	4f 5f       	subi	r20, 0xFF	; 255
    90d2:	5f 4f       	sbci	r21, 0xFF	; 255
    90d4:	6e e3       	ldi	r22, 0x3E	; 62
    90d6:	73 e0       	ldi	r23, 0x03	; 3
    90d8:	89 e0       	ldi	r24, 0x09	; 9
    90da:	9c e0       	ldi	r25, 0x0C	; 12
    90dc:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    90e0:	f1 2c       	mov	r15, r1
    90e2:	8b e0       	ldi	r24, 0x0B	; 11
    90e4:	e8 2e       	mov	r14, r24
    90e6:	80 91 94 0f 	lds	r24, 0x0F94	; 0x800f94 <Global_HWwirenum>
    90ea:	f8 16       	cp	r15, r24
    90ec:	e8 f5       	brcc	.+122    	; 0x9168 <send_mqtt_onewire()+0xce>
    90ee:	fe 9c       	mul	r15, r14
    90f0:	c0 01       	movw	r24, r0
    90f2:	11 24       	eor	r1, r1
    90f4:	9c 01       	movw	r18, r24
    90f6:	2e 5a       	subi	r18, 0xAE	; 174
    90f8:	30 4f       	sbci	r19, 0xF0	; 240
    90fa:	69 01       	movw	r12, r18
    90fc:	00 e1       	ldi	r16, 0x10	; 16
    90fe:	28 e0       	ldi	r18, 0x08	; 8
    9100:	a6 01       	movw	r20, r12
    9102:	6a e3       	ldi	r22, 0x3A	; 58
    9104:	ce 01       	movw	r24, r28
    9106:	01 96       	adiw	r24, 0x01	; 1
    9108:	0e 94 c1 b8 	call	0x17182	; 0x17182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    910c:	8e 01       	movw	r16, r28
    910e:	0f 5f       	subi	r16, 0xFF	; 255
    9110:	1f 4f       	sbci	r17, 0xFF	; 255
    9112:	2a e4       	ldi	r18, 0x4A	; 74
    9114:	33 e0       	ldi	r19, 0x03	; 3
    9116:	4f 2d       	mov	r20, r15
    9118:	6e e4       	ldi	r22, 0x4E	; 78
    911a:	73 e0       	ldi	r23, 0x03	; 3
    911c:	89 e0       	ldi	r24, 0x09	; 9
    911e:	9c e0       	ldi	r25, 0x0C	; 12
    9120:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9124:	f6 01       	movw	r30, r12
    9126:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
    9128:	4a e0       	ldi	r20, 0x0A	; 10
    912a:	b8 01       	movw	r22, r16
    912c:	90 e0       	ldi	r25, 0x00	; 0
    912e:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    9132:	24 e5       	ldi	r18, 0x54	; 84
    9134:	33 e0       	ldi	r19, 0x03	; 3
    9136:	4f 2d       	mov	r20, r15
    9138:	6e e4       	ldi	r22, 0x4E	; 78
    913a:	73 e0       	ldi	r23, 0x03	; 3
    913c:	89 e0       	ldi	r24, 0x09	; 9
    913e:	9c e0       	ldi	r25, 0x0C	; 12
    9140:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9144:	f6 01       	movw	r30, r12
    9146:	82 85       	ldd	r24, Z+10	; 0x0a
itoa():
    9148:	4a e0       	ldi	r20, 0x0A	; 10
    914a:	b8 01       	movw	r22, r16
    914c:	90 e0       	ldi	r25, 0x00	; 0
    914e:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    9152:	2d e5       	ldi	r18, 0x5D	; 93
    9154:	33 e0       	ldi	r19, 0x03	; 3
    9156:	4f 2d       	mov	r20, r15
    9158:	6e e4       	ldi	r22, 0x4E	; 78
    915a:	73 e0       	ldi	r23, 0x03	; 3
    915c:	89 e0       	ldi	r24, 0x09	; 9
    915e:	9c e0       	ldi	r25, 0x0C	; 12
    9160:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9164:	f3 94       	inc	r15
    9166:	bf cf       	rjmp	.-130    	; 0x90e6 <send_mqtt_onewire()+0x4c>
    9168:	c0 5c       	subi	r28, 0xC0	; 192
    916a:	df 4f       	sbci	r29, 0xFF	; 255
    916c:	0f b6       	in	r0, 0x3f	; 63
    916e:	f8 94       	cli
    9170:	de bf       	out	0x3e, r29	; 62
    9172:	0f be       	out	0x3f, r0	; 63
    9174:	cd bf       	out	0x3d, r28	; 61
    9176:	df 91       	pop	r29
    9178:	cf 91       	pop	r28
    917a:	1f 91       	pop	r17
    917c:	0f 91       	pop	r16
    917e:	ff 90       	pop	r15
    9180:	ef 90       	pop	r14
    9182:	df 90       	pop	r13
    9184:	cf 90       	pop	r12
    9186:	08 95       	ret

00009188 <send_mqtt_tds()>:
_Z13send_mqtt_tdsv():
    9188:	2f 92       	push	r2
    918a:	3f 92       	push	r3
    918c:	4f 92       	push	r4
    918e:	5f 92       	push	r5
    9190:	6f 92       	push	r6
    9192:	7f 92       	push	r7
    9194:	8f 92       	push	r8
    9196:	9f 92       	push	r9
    9198:	af 92       	push	r10
    919a:	bf 92       	push	r11
    919c:	cf 92       	push	r12
    919e:	df 92       	push	r13
    91a0:	ff 92       	push	r15
    91a2:	0f 93       	push	r16
    91a4:	1f 93       	push	r17
    91a6:	cf 93       	push	r28
    91a8:	df 93       	push	r29
    91aa:	cd b7       	in	r28, 0x3d	; 61
    91ac:	de b7       	in	r29, 0x3e	; 62
    91ae:	c6 55       	subi	r28, 0x56	; 86
    91b0:	d1 09       	sbc	r29, r1
    91b2:	0f b6       	in	r0, 0x3f	; 63
    91b4:	f8 94       	cli
    91b6:	de bf       	out	0x3e, r29	; 62
    91b8:	0f be       	out	0x3f, r0	; 63
    91ba:	cd bf       	out	0x3d, r28	; 61
    91bc:	35 e9       	ldi	r19, 0x95	; 149
    91be:	c3 2e       	mov	r12, r19
    91c0:	3f e0       	ldi	r19, 0x0F	; 15
    91c2:	d3 2e       	mov	r13, r19
    91c4:	f1 2c       	mov	r15, r1
    91c6:	4a e0       	ldi	r20, 0x0A	; 10
    91c8:	a4 2e       	mov	r10, r20
    91ca:	b1 2c       	mov	r11, r1
    91cc:	54 e6       	ldi	r21, 0x64	; 100
    91ce:	25 2e       	mov	r2, r21
    91d0:	31 2c       	mov	r3, r1
    91d2:	41 2c       	mov	r4, r1
    91d4:	51 2c       	mov	r5, r1
    91d6:	61 e4       	ldi	r22, 0x41	; 65
    91d8:	86 2e       	mov	r8, r22
    91da:	91 2c       	mov	r9, r1
    91dc:	8c 0e       	add	r8, r28
    91de:	9d 1e       	adc	r9, r29
    91e0:	8c e0       	ldi	r24, 0x0C	; 12
    91e2:	88 0e       	add	r8, r24
    91e4:	91 1c       	adc	r9, r1
    91e6:	71 e4       	ldi	r23, 0x41	; 65
    91e8:	67 2e       	mov	r6, r23
    91ea:	71 2c       	mov	r7, r1
    91ec:	6c 0e       	add	r6, r28
    91ee:	7d 1e       	adc	r7, r29
    91f0:	ef ef       	ldi	r30, 0xFF	; 255
    91f2:	6e 1a       	sub	r6, r30
    91f4:	7e 0a       	sbc	r7, r30
    91f6:	be 01       	movw	r22, r28
    91f8:	6f 5b       	subi	r22, 0xBF	; 191
    91fa:	7f 4f       	sbci	r23, 0xFF	; 255
    91fc:	8f 2d       	mov	r24, r15
    91fe:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
    9202:	81 30       	cpi	r24, 0x01	; 1
    9204:	09 f0       	breq	.+2      	; 0x9208 <send_mqtt_tds()+0x80>
    9206:	ba c0       	rjmp	.+372    	; 0x937c <send_mqtt_tds()+0x1f4>
    9208:	22 96       	adiw	r28, 0x02	; 2
    920a:	8f ad       	ldd	r24, Y+63	; 0x3f
    920c:	22 97       	sbiw	r28, 0x02	; 2
    920e:	81 30       	cpi	r24, 0x01	; 1
    9210:	09 f0       	breq	.+2      	; 0x9214 <send_mqtt_tds()+0x8c>
    9212:	b4 c0       	rjmp	.+360    	; 0x937c <send_mqtt_tds()+0x1f4>
    9214:	f6 01       	movw	r30, r12
    9216:	83 8d       	ldd	r24, Z+27	; 0x1b
    9218:	81 30       	cpi	r24, 0x01	; 1
    921a:	09 f0       	breq	.+2      	; 0x921e <send_mqtt_tds()+0x96>
    921c:	af c0       	rjmp	.+350    	; 0x937c <send_mqtt_tds()+0x1f4>
    921e:	85 81       	ldd	r24, Z+5	; 0x05
    9220:	96 81       	ldd	r25, Z+6	; 0x06
    9222:	b5 01       	movw	r22, r10
    9224:	0e 94 6d d8 	call	0x1b0da	; 0x1b0da <__divmodhi4>
    9228:	cb 01       	movw	r24, r22
itoa():
    922a:	4a e0       	ldi	r20, 0x0A	; 10
    922c:	be 01       	movw	r22, r28
    922e:	6f 5f       	subi	r22, 0xFF	; 255
    9230:	7f 4f       	sbci	r23, 0xFF	; 255
    9232:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    9236:	8e 01       	movw	r16, r28
    9238:	0f 5f       	subi	r16, 0xFF	; 255
    923a:	1f 4f       	sbci	r17, 0xFF	; 255
    923c:	25 e6       	ldi	r18, 0x65	; 101
    923e:	33 e0       	ldi	r19, 0x03	; 3
    9240:	4f 2d       	mov	r20, r15
    9242:	6f eb       	ldi	r22, 0xBF	; 191
    9244:	73 e0       	ldi	r23, 0x03	; 3
    9246:	89 e0       	ldi	r24, 0x09	; 9
    9248:	9c e0       	ldi	r25, 0x0C	; 12
    924a:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    924e:	50 e0       	ldi	r21, 0x00	; 0
    9250:	40 e0       	ldi	r20, 0x00	; 0
    9252:	60 e0       	ldi	r22, 0x00	; 0
    9254:	70 e0       	ldi	r23, 0x00	; 0
    9256:	cb 01       	movw	r24, r22
    9258:	fa 01       	movw	r30, r20
    925a:	ee 0f       	add	r30, r30
    925c:	ff 1f       	adc	r31, r31
    925e:	ec 0d       	add	r30, r12
    9260:	fd 1d       	adc	r31, r13
    9262:	07 81       	ldd	r16, Z+7	; 0x07
    9264:	10 85       	ldd	r17, Z+8	; 0x08
    9266:	01 2e       	mov	r0, r17
    9268:	00 0c       	add	r0, r0
    926a:	22 0b       	sbc	r18, r18
    926c:	33 0b       	sbc	r19, r19
    926e:	60 0f       	add	r22, r16
    9270:	71 1f       	adc	r23, r17
    9272:	82 1f       	adc	r24, r18
    9274:	93 1f       	adc	r25, r19
    9276:	4f 5f       	subi	r20, 0xFF	; 255
    9278:	5f 4f       	sbci	r21, 0xFF	; 255
    927a:	4a 30       	cpi	r20, 0x0A	; 10
    927c:	51 05       	cpc	r21, r1
    927e:	61 f7       	brne	.-40     	; 0x9258 <send_mqtt_tds()+0xd0>
    9280:	a2 01       	movw	r20, r4
    9282:	91 01       	movw	r18, r2
    9284:	0e 94 a3 d8 	call	0x1b146	; 0x1b146 <__divmodsi4>
    9288:	c9 01       	movw	r24, r18
itoa():
    928a:	4a e0       	ldi	r20, 0x0A	; 10
    928c:	be 01       	movw	r22, r28
    928e:	6f 5f       	subi	r22, 0xFF	; 255
    9290:	7f 4f       	sbci	r23, 0xFF	; 255
    9292:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    9296:	8e 01       	movw	r16, r28
    9298:	0f 5f       	subi	r16, 0xFF	; 255
    929a:	1f 4f       	sbci	r17, 0xFF	; 255
    929c:	2a e6       	ldi	r18, 0x6A	; 106
    929e:	33 e0       	ldi	r19, 0x03	; 3
    92a0:	4f 2d       	mov	r20, r15
    92a2:	6f eb       	ldi	r22, 0xBF	; 191
    92a4:	73 e0       	ldi	r23, 0x03	; 3
    92a6:	89 e0       	ldi	r24, 0x09	; 9
    92a8:	9c e0       	ldi	r25, 0x0C	; 12
    92aa:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    92ae:	b4 01       	movw	r22, r8
    92b0:	c8 01       	movw	r24, r16
    92b2:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    92b6:	23 e7       	ldi	r18, 0x73	; 115
    92b8:	33 e0       	ldi	r19, 0x03	; 3
    92ba:	4f 2d       	mov	r20, r15
    92bc:	6f eb       	ldi	r22, 0xBF	; 191
    92be:	73 e0       	ldi	r23, 0x03	; 3
    92c0:	89 e0       	ldi	r24, 0x09	; 9
    92c2:	9c e0       	ldi	r25, 0x0C	; 12
    92c4:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
itoa():
    92c8:	4a e0       	ldi	r20, 0x0A	; 10
    92ca:	b8 01       	movw	r22, r16
    92cc:	2d 96       	adiw	r28, 0x0d	; 13
    92ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    92d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    92d2:	2d 97       	sbiw	r28, 0x0d	; 13
    92d4:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    92d8:	25 e9       	ldi	r18, 0x95	; 149
    92da:	34 e0       	ldi	r19, 0x04	; 4
    92dc:	4f 2d       	mov	r20, r15
    92de:	6f eb       	ldi	r22, 0xBF	; 191
    92e0:	73 e0       	ldi	r23, 0x03	; 3
    92e2:	89 e0       	ldi	r24, 0x09	; 9
    92e4:	9c e0       	ldi	r25, 0x0C	; 12
    92e6:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    92ea:	f6 01       	movw	r30, r12
    92ec:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
    92ee:	4a e0       	ldi	r20, 0x0A	; 10
    92f0:	b8 01       	movw	r22, r16
    92f2:	90 e0       	ldi	r25, 0x00	; 0
    92f4:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    92f8:	28 e7       	ldi	r18, 0x78	; 120
    92fa:	33 e0       	ldi	r19, 0x03	; 3
    92fc:	4f 2d       	mov	r20, r15
    92fe:	6f eb       	ldi	r22, 0xBF	; 191
    9300:	73 e0       	ldi	r23, 0x03	; 3
    9302:	89 e0       	ldi	r24, 0x09	; 9
    9304:	9c e0       	ldi	r25, 0x0C	; 12
    9306:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    930a:	19 82       	std	Y+1, r1	; 0x01
    930c:	00 e1       	ldi	r16, 0x10	; 16
    930e:	28 e0       	ldi	r18, 0x08	; 8
    9310:	a3 01       	movw	r20, r6
    9312:	6a e3       	ldi	r22, 0x3A	; 58
    9314:	ce 01       	movw	r24, r28
    9316:	01 96       	adiw	r24, 0x01	; 1
    9318:	0e 94 c1 b8 	call	0x17182	; 0x17182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    931c:	8e 01       	movw	r16, r28
    931e:	0f 5f       	subi	r16, 0xFF	; 255
    9320:	1f 4f       	sbci	r17, 0xFF	; 255
    9322:	2a e4       	ldi	r18, 0x4A	; 74
    9324:	33 e0       	ldi	r19, 0x03	; 3
    9326:	4f 2d       	mov	r20, r15
    9328:	6f eb       	ldi	r22, 0xBF	; 191
    932a:	73 e0       	ldi	r23, 0x03	; 3
    932c:	89 e0       	ldi	r24, 0x09	; 9
    932e:	9c e0       	ldi	r25, 0x0C	; 12
    9330:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9334:	66 96       	adiw	r28, 0x16	; 22
    9336:	8f ad       	ldd	r24, Y+63	; 0x3f
    9338:	66 97       	sbiw	r28, 0x16	; 22
itoa():
    933a:	4a e0       	ldi	r20, 0x0A	; 10
    933c:	b8 01       	movw	r22, r16
    933e:	90 e0       	ldi	r25, 0x00	; 0
    9340:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    9344:	2f e7       	ldi	r18, 0x7F	; 127
    9346:	33 e0       	ldi	r19, 0x03	; 3
    9348:	4f 2d       	mov	r20, r15
    934a:	6f eb       	ldi	r22, 0xBF	; 191
    934c:	73 e0       	ldi	r23, 0x03	; 3
    934e:	89 e0       	ldi	r24, 0x09	; 9
    9350:	9c e0       	ldi	r25, 0x0C	; 12
    9352:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9356:	80 91 3f 0a 	lds	r24, 0x0A3F	; 0x800a3f <uptime>
    935a:	f6 01       	movw	r30, r12
    935c:	94 8d       	ldd	r25, Z+28	; 0x1c
itoa():
    935e:	4a e0       	ldi	r20, 0x0A	; 10
    9360:	b8 01       	movw	r22, r16
    9362:	89 1b       	sub	r24, r25
    9364:	99 0b       	sbc	r25, r25
    9366:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    936a:	26 e8       	ldi	r18, 0x86	; 134
    936c:	33 e0       	ldi	r19, 0x03	; 3
    936e:	4f 2d       	mov	r20, r15
    9370:	6f eb       	ldi	r22, 0xBF	; 191
    9372:	73 e0       	ldi	r23, 0x03	; 3
    9374:	89 e0       	ldi	r24, 0x09	; 9
    9376:	9c e0       	ldi	r25, 0x0C	; 12
    9378:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    937c:	f3 94       	inc	r15
    937e:	fe e1       	ldi	r31, 0x1E	; 30
    9380:	cf 0e       	add	r12, r31
    9382:	d1 1c       	adc	r13, r1
    9384:	86 e0       	ldi	r24, 0x06	; 6
    9386:	f8 12       	cpse	r15, r24
    9388:	36 cf       	rjmp	.-404    	; 0x91f6 <send_mqtt_tds()+0x6e>
    938a:	ca 5a       	subi	r28, 0xAA	; 170
    938c:	df 4f       	sbci	r29, 0xFF	; 255
    938e:	0f b6       	in	r0, 0x3f	; 63
    9390:	f8 94       	cli
    9392:	de bf       	out	0x3e, r29	; 62
    9394:	0f be       	out	0x3f, r0	; 63
    9396:	cd bf       	out	0x3d, r28	; 61
    9398:	df 91       	pop	r29
    939a:	cf 91       	pop	r28
    939c:	1f 91       	pop	r17
    939e:	0f 91       	pop	r16
    93a0:	ff 90       	pop	r15
    93a2:	df 90       	pop	r13
    93a4:	cf 90       	pop	r12
    93a6:	bf 90       	pop	r11
    93a8:	af 90       	pop	r10
    93aa:	9f 90       	pop	r9
    93ac:	8f 90       	pop	r8
    93ae:	7f 90       	pop	r7
    93b0:	6f 90       	pop	r6
    93b2:	5f 90       	pop	r5
    93b4:	4f 90       	pop	r4
    93b6:	3f 90       	pop	r3
    93b8:	2f 90       	pop	r2
    93ba:	08 95       	ret

000093bc <send_mqtt_program()>:
_Z17send_mqtt_programv():
    93bc:	af 92       	push	r10
    93be:	bf 92       	push	r11
    93c0:	cf 92       	push	r12
    93c2:	df 92       	push	r13
    93c4:	ef 92       	push	r14
    93c6:	ff 92       	push	r15
    93c8:	0f 93       	push	r16
    93ca:	1f 93       	push	r17
    93cc:	cf 93       	push	r28
    93ce:	df 93       	push	r29
    93d0:	cd b7       	in	r28, 0x3d	; 61
    93d2:	de b7       	in	r29, 0x3e	; 62
    93d4:	cb 54       	subi	r28, 0x4B	; 75
    93d6:	d1 09       	sbc	r29, r1
    93d8:	0f b6       	in	r0, 0x3f	; 63
    93da:	f8 94       	cli
    93dc:	de bf       	out	0x3e, r29	; 62
    93de:	0f be       	out	0x3f, r0	; 63
    93e0:	cd bf       	out	0x3d, r28	; 61
    93e2:	b1 2c       	mov	r11, r1
    93e4:	8b 2d       	mov	r24, r11
    93e6:	0e 94 33 90 	call	0x12066	; 0x12066 <thermostat_program_get_active(unsigned char)>
    93ea:	a8 2e       	mov	r10, r24
    93ec:	8f ef       	ldi	r24, 0xFF	; 255
    93ee:	a8 16       	cp	r10, r24
    93f0:	09 f4       	brne	.+2      	; 0x93f4 <send_mqtt_program()+0x38>
    93f2:	e9 c0       	rjmp	.+466    	; 0x95c6 <send_mqtt_program()+0x20a>
    93f4:	be 01       	movw	r22, r28
    93f6:	6f 5f       	subi	r22, 0xFF	; 255
    93f8:	7f 4f       	sbci	r23, 0xFF	; 255
    93fa:	8b 2d       	mov	r24, r11
    93fc:	0e 94 e7 8f 	call	0x11fce	; 0x11fce <thermostat_program_get_name(unsigned char, char*)>
    9400:	8e 01       	movw	r16, r28
    9402:	0f 5f       	subi	r16, 0xFF	; 255
    9404:	1f 4f       	sbci	r17, 0xFF	; 255
    9406:	23 e7       	ldi	r18, 0x73	; 115
    9408:	33 e0       	ldi	r19, 0x03	; 3
    940a:	4b 2d       	mov	r20, r11
    940c:	6f e8       	ldi	r22, 0x8F	; 143
    940e:	73 e0       	ldi	r23, 0x03	; 3
    9410:	89 e0       	ldi	r24, 0x09	; 9
    9412:	9c e0       	ldi	r25, 0x0C	; 12
    9414:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
itoa():
    9418:	4a e0       	ldi	r20, 0x0A	; 10
    941a:	b8 01       	movw	r22, r16
    941c:	8a 2d       	mov	r24, r10
    941e:	90 e0       	ldi	r25, 0x00	; 0
    9420:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z17send_mqtt_programv():
    9424:	24 e9       	ldi	r18, 0x94	; 148
    9426:	33 e0       	ldi	r19, 0x03	; 3
    9428:	4b 2d       	mov	r20, r11
    942a:	6f e8       	ldi	r22, 0x8F	; 143
    942c:	73 e0       	ldi	r23, 0x03	; 3
    942e:	89 e0       	ldi	r24, 0x09	; 9
    9430:	9c e0       	ldi	r25, 0x0C	; 12
    9432:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9436:	a1 2c       	mov	r10, r1
    9438:	ce 01       	movw	r24, r28
    943a:	89 5b       	subi	r24, 0xB9	; 185
    943c:	9f 4f       	sbci	r25, 0xFF	; 255
    943e:	6c 01       	movw	r12, r24
    9440:	01 96       	adiw	r24, 0x01	; 1
    9442:	7c 01       	movw	r14, r24
    9444:	8e 01       	movw	r16, r28
    9446:	07 5b       	subi	r16, 0xB7	; 183
    9448:	1f 4f       	sbci	r17, 0xFF	; 255
    944a:	9e 01       	movw	r18, r28
    944c:	26 5b       	subi	r18, 0xB6	; 182
    944e:	3f 4f       	sbci	r19, 0xFF	; 255
    9450:	ae 01       	movw	r20, r28
    9452:	45 5b       	subi	r20, 0xB5	; 181
    9454:	5f 4f       	sbci	r21, 0xFF	; 255
    9456:	6a 2d       	mov	r22, r10
    9458:	8b 2d       	mov	r24, r11
    945a:	0e 94 43 90 	call	0x12086	; 0x12086 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
    945e:	28 96       	adiw	r28, 0x08	; 8
    9460:	8f ad       	ldd	r24, Y+63	; 0x3f
    9462:	28 97       	sbiw	r28, 0x08	; 8
    9464:	81 30       	cpi	r24, 0x01	; 1
    9466:	09 f0       	breq	.+2      	; 0x946a <send_mqtt_program()+0xae>
    9468:	aa c0       	rjmp	.+340    	; 0x95be <send_mqtt_program()+0x202>
    946a:	2c 96       	adiw	r28, 0x0c	; 12
    946c:	8f ad       	ldd	r24, Y+63	; 0x3f
    946e:	2c 97       	sbiw	r28, 0x0c	; 12
itoa():
    9470:	4a e0       	ldi	r20, 0x0A	; 10
    9472:	be 01       	movw	r22, r28
    9474:	6f 5b       	subi	r22, 0xBF	; 191
    9476:	7f 4f       	sbci	r23, 0xFF	; 255
    9478:	90 e0       	ldi	r25, 0x00	; 0
    947a:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z17send_mqtt_programv():
    947e:	be 01       	movw	r22, r28
    9480:	6f 5b       	subi	r22, 0xBF	; 191
    9482:	7f 4f       	sbci	r23, 0xFF	; 255
    9484:	ce 01       	movw	r24, r28
    9486:	01 96       	adiw	r24, 0x01	; 1
    9488:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    948c:	6b e9       	ldi	r22, 0x9B	; 155
    948e:	73 e0       	ldi	r23, 0x03	; 3
    9490:	ce 01       	movw	r24, r28
    9492:	01 96       	adiw	r24, 0x01	; 1
    9494:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    9498:	2b 96       	adiw	r28, 0x0b	; 11
    949a:	8f ad       	ldd	r24, Y+63	; 0x3f
    949c:	2b 97       	sbiw	r28, 0x0b	; 11
itoa():
    949e:	4a e0       	ldi	r20, 0x0A	; 10
    94a0:	be 01       	movw	r22, r28
    94a2:	6f 5b       	subi	r22, 0xBF	; 191
    94a4:	7f 4f       	sbci	r23, 0xFF	; 255
    94a6:	90 e0       	ldi	r25, 0x00	; 0
    94a8:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z17send_mqtt_programv():
    94ac:	be 01       	movw	r22, r28
    94ae:	6f 5b       	subi	r22, 0xBF	; 191
    94b0:	7f 4f       	sbci	r23, 0xFF	; 255
    94b2:	ce 01       	movw	r24, r28
    94b4:	01 96       	adiw	r24, 0x01	; 1
    94b6:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    94ba:	6b e9       	ldi	r22, 0x9B	; 155
    94bc:	73 e0       	ldi	r23, 0x03	; 3
    94be:	ce 01       	movw	r24, r28
    94c0:	01 96       	adiw	r24, 0x01	; 1
    94c2:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    94c6:	2a 96       	adiw	r28, 0x0a	; 10
    94c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    94ca:	2a 97       	sbiw	r28, 0x0a	; 10
itoa():
    94cc:	4a e0       	ldi	r20, 0x0A	; 10
    94ce:	be 01       	movw	r22, r28
    94d0:	6f 5b       	subi	r22, 0xBF	; 191
    94d2:	7f 4f       	sbci	r23, 0xFF	; 255
    94d4:	90 e0       	ldi	r25, 0x00	; 0
    94d6:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z17send_mqtt_programv():
    94da:	be 01       	movw	r22, r28
    94dc:	6f 5b       	subi	r22, 0xBF	; 191
    94de:	7f 4f       	sbci	r23, 0xFF	; 255
    94e0:	ce 01       	movw	r24, r28
    94e2:	01 96       	adiw	r24, 0x01	; 1
    94e4:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    94e8:	6b e9       	ldi	r22, 0x9B	; 155
    94ea:	73 e0       	ldi	r23, 0x03	; 3
    94ec:	ce 01       	movw	r24, r28
    94ee:	01 96       	adiw	r24, 0x01	; 1
    94f0:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    94f4:	29 96       	adiw	r28, 0x09	; 9
    94f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    94f8:	29 97       	sbiw	r28, 0x09	; 9
itoa():
    94fa:	4a e0       	ldi	r20, 0x0A	; 10
    94fc:	be 01       	movw	r22, r28
    94fe:	6f 5b       	subi	r22, 0xBF	; 191
    9500:	7f 4f       	sbci	r23, 0xFF	; 255
    9502:	90 e0       	ldi	r25, 0x00	; 0
    9504:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z17send_mqtt_programv():
    9508:	be 01       	movw	r22, r28
    950a:	6f 5b       	subi	r22, 0xBF	; 191
    950c:	7f 4f       	sbci	r23, 0xFF	; 255
    950e:	ce 01       	movw	r24, r28
    9510:	01 96       	adiw	r24, 0x01	; 1
    9512:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    9516:	ce 01       	movw	r24, r28
    9518:	01 96       	adiw	r24, 0x01	; 1
    951a:	7c 01       	movw	r14, r24
    951c:	08 ec       	ldi	r16, 0xC8	; 200
    951e:	17 e0       	ldi	r17, 0x07	; 7
    9520:	2a 2d       	mov	r18, r10
    9522:	4b 2d       	mov	r20, r11
    9524:	6d e9       	ldi	r22, 0x9D	; 157
    9526:	73 e0       	ldi	r23, 0x03	; 3
    9528:	89 e0       	ldi	r24, 0x09	; 9
    952a:	9c e0       	ldi	r25, 0x0C	; 12
    952c:	0e 94 14 84 	call	0x10828	; 0x10828 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    9530:	28 96       	adiw	r28, 0x08	; 8
    9532:	8f ad       	ldd	r24, Y+63	; 0x3f
    9534:	28 97       	sbiw	r28, 0x08	; 8
itoa():
    9536:	4a e0       	ldi	r20, 0x0A	; 10
    9538:	be 01       	movw	r22, r28
    953a:	6f 5b       	subi	r22, 0xBF	; 191
    953c:	7f 4f       	sbci	r23, 0xFF	; 255
    953e:	90 e0       	ldi	r25, 0x00	; 0
    9540:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z17send_mqtt_programv():
    9544:	be 01       	movw	r22, r28
    9546:	6f 5b       	subi	r22, 0xBF	; 191
    9548:	7f 4f       	sbci	r23, 0xFF	; 255
    954a:	c7 01       	movw	r24, r14
    954c:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    9550:	04 e9       	ldi	r16, 0x94	; 148
    9552:	13 e0       	ldi	r17, 0x03	; 3
    9554:	2a 2d       	mov	r18, r10
    9556:	4b 2d       	mov	r20, r11
    9558:	6d e9       	ldi	r22, 0x9D	; 157
    955a:	73 e0       	ldi	r23, 0x03	; 3
    955c:	89 e0       	ldi	r24, 0x09	; 9
    955e:	9c e0       	ldi	r25, 0x0C	; 12
    9560:	0e 94 14 84 	call	0x10828	; 0x10828 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    9564:	6a 2d       	mov	r22, r10
    9566:	8b 2d       	mov	r24, r11
    9568:	0e 94 d2 90 	call	0x121a4	; 0x121a4 <thermostat_program_get_threshold(unsigned char, unsigned char)>
itoa():
    956c:	4a e0       	ldi	r20, 0x0A	; 10
    956e:	be 01       	movw	r22, r28
    9570:	6f 5b       	subi	r22, 0xBF	; 191
    9572:	7f 4f       	sbci	r23, 0xFF	; 255
    9574:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z17send_mqtt_programv():
    9578:	be 01       	movw	r22, r28
    957a:	6f 5b       	subi	r22, 0xBF	; 191
    957c:	7f 4f       	sbci	r23, 0xFF	; 255
    957e:	c7 01       	movw	r24, r14
    9580:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    9584:	0b ea       	ldi	r16, 0xAB	; 171
    9586:	13 e0       	ldi	r17, 0x03	; 3
    9588:	2a 2d       	mov	r18, r10
    958a:	4b 2d       	mov	r20, r11
    958c:	6d e9       	ldi	r22, 0x9D	; 157
    958e:	73 e0       	ldi	r23, 0x03	; 3
    9590:	89 e0       	ldi	r24, 0x09	; 9
    9592:	9c e0       	ldi	r25, 0x0C	; 12
    9594:	0e 94 14 84 	call	0x10828	; 0x10828 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    9598:	6a 2d       	mov	r22, r10
    959a:	8b 2d       	mov	r24, r11
    959c:	0e 94 10 91 	call	0x12220	; 0x12220 <thermostat_program_get_week(unsigned char, unsigned char)>
itoa():
    95a0:	4a e0       	ldi	r20, 0x0A	; 10
    95a2:	b7 01       	movw	r22, r14
    95a4:	90 e0       	ldi	r25, 0x00	; 0
    95a6:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z17send_mqtt_programv():
    95aa:	05 eb       	ldi	r16, 0xB5	; 181
    95ac:	13 e0       	ldi	r17, 0x03	; 3
    95ae:	2a 2d       	mov	r18, r10
    95b0:	4b 2d       	mov	r20, r11
    95b2:	6d e9       	ldi	r22, 0x9D	; 157
    95b4:	73 e0       	ldi	r23, 0x03	; 3
    95b6:	89 e0       	ldi	r24, 0x09	; 9
    95b8:	9c e0       	ldi	r25, 0x0C	; 12
    95ba:	0e 94 14 84 	call	0x10828	; 0x10828 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    95be:	a3 94       	inc	r10
    95c0:	9b e0       	ldi	r25, 0x0B	; 11
    95c2:	a9 12       	cpse	r10, r25
    95c4:	39 cf       	rjmp	.-398    	; 0x9438 <send_mqtt_program()+0x7c>
    95c6:	b3 94       	inc	r11
    95c8:	88 e0       	ldi	r24, 0x08	; 8
    95ca:	b8 12       	cpse	r11, r24
    95cc:	0b cf       	rjmp	.-490    	; 0x93e4 <send_mqtt_program()+0x28>
    95ce:	c5 5b       	subi	r28, 0xB5	; 181
    95d0:	df 4f       	sbci	r29, 0xFF	; 255
    95d2:	0f b6       	in	r0, 0x3f	; 63
    95d4:	f8 94       	cli
    95d6:	de bf       	out	0x3e, r29	; 62
    95d8:	0f be       	out	0x3f, r0	; 63
    95da:	cd bf       	out	0x3d, r28	; 61
    95dc:	df 91       	pop	r29
    95de:	cf 91       	pop	r28
    95e0:	1f 91       	pop	r17
    95e2:	0f 91       	pop	r16
    95e4:	ff 90       	pop	r15
    95e6:	ef 90       	pop	r14
    95e8:	df 90       	pop	r13
    95ea:	cf 90       	pop	r12
    95ec:	bf 90       	pop	r11
    95ee:	af 90       	pop	r10
    95f0:	08 95       	ret

000095f2 <mqtt_send_pid_variable(unsigned char)>:
_Z22mqtt_send_pid_variableh():
    95f2:	ff 92       	push	r15
    95f4:	0f 93       	push	r16
    95f6:	1f 93       	push	r17
    95f8:	cf 93       	push	r28
    95fa:	df 93       	push	r29
    95fc:	cd b7       	in	r28, 0x3d	; 61
    95fe:	de b7       	in	r29, 0x3e	; 62
    9600:	a0 97       	sbiw	r28, 0x20	; 32
    9602:	0f b6       	in	r0, 0x3f	; 63
    9604:	f8 94       	cli
    9606:	de bf       	out	0x3e, r29	; 62
    9608:	0f be       	out	0x3f, r0	; 63
    960a:	cd bf       	out	0x3d, r28	; 61
    960c:	f8 2e       	mov	r15, r24
    960e:	0e 94 6b 8d 	call	0x11ad6	; 0x11ad6 <thermostat_get_pid_p(unsigned char)>
    9612:	8e 01       	movw	r16, r28
    9614:	0f 5f       	subi	r16, 0xFF	; 255
    9616:	1f 4f       	sbci	r17, 0xFF	; 255
    9618:	22 e0       	ldi	r18, 0x02	; 2
    961a:	47 e0       	ldi	r20, 0x07	; 7
    961c:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
    9620:	23 eb       	ldi	r18, 0xB3	; 179
    9622:	37 e0       	ldi	r19, 0x07	; 7
    9624:	4f 2d       	mov	r20, r15
    9626:	6a eb       	ldi	r22, 0xBA	; 186
    9628:	73 e0       	ldi	r23, 0x03	; 3
    962a:	89 e0       	ldi	r24, 0x09	; 9
    962c:	9c e0       	ldi	r25, 0x0C	; 12
    962e:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9632:	8f 2d       	mov	r24, r15
    9634:	0e 94 9a 8d 	call	0x11b34	; 0x11b34 <thermostat_get_pid_i(unsigned char)>
    9638:	22 e0       	ldi	r18, 0x02	; 2
    963a:	47 e0       	ldi	r20, 0x07	; 7
    963c:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
    9640:	2a eb       	ldi	r18, 0xBA	; 186
    9642:	37 e0       	ldi	r19, 0x07	; 7
    9644:	4f 2d       	mov	r20, r15
    9646:	6a eb       	ldi	r22, 0xBA	; 186
    9648:	73 e0       	ldi	r23, 0x03	; 3
    964a:	89 e0       	ldi	r24, 0x09	; 9
    964c:	9c e0       	ldi	r25, 0x0C	; 12
    964e:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9652:	8f 2d       	mov	r24, r15
    9654:	0e 94 a5 8d 	call	0x11b4a	; 0x11b4a <thermostat_get_pid_d(unsigned char)>
    9658:	22 e0       	ldi	r18, 0x02	; 2
    965a:	47 e0       	ldi	r20, 0x07	; 7
    965c:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
    9660:	21 ec       	ldi	r18, 0xC1	; 193
    9662:	37 e0       	ldi	r19, 0x07	; 7
    9664:	4f 2d       	mov	r20, r15
    9666:	6a eb       	ldi	r22, 0xBA	; 186
    9668:	73 e0       	ldi	r23, 0x03	; 3
    966a:	89 e0       	ldi	r24, 0x09	; 9
    966c:	9c e0       	ldi	r25, 0x0C	; 12
    966e:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9672:	8f 2d       	mov	r24, r15
    9674:	0e 94 b0 8d 	call	0x11b60	; 0x11b60 <thermostat_get_pid_time(unsigned char)>
itoa():
    9678:	4a e0       	ldi	r20, 0x0A	; 10
    967a:	b8 01       	movw	r22, r16
    967c:	90 e0       	ldi	r25, 0x00	; 0
    967e:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z22mqtt_send_pid_variableh():
    9682:	28 ec       	ldi	r18, 0xC8	; 200
    9684:	37 e0       	ldi	r19, 0x07	; 7
    9686:	4f 2d       	mov	r20, r15
    9688:	6a eb       	ldi	r22, 0xBA	; 186
    968a:	73 e0       	ldi	r23, 0x03	; 3
    968c:	89 e0       	ldi	r24, 0x09	; 9
    968e:	9c e0       	ldi	r25, 0x0C	; 12
    9690:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9694:	a0 96       	adiw	r28, 0x20	; 32
    9696:	0f b6       	in	r0, 0x3f	; 63
    9698:	f8 94       	cli
    969a:	de bf       	out	0x3e, r29	; 62
    969c:	0f be       	out	0x3f, r0	; 63
    969e:	cd bf       	out	0x3d, r28	; 61
    96a0:	df 91       	pop	r29
    96a2:	cf 91       	pop	r28
    96a4:	1f 91       	pop	r17
    96a6:	0f 91       	pop	r16
    96a8:	ff 90       	pop	r15
    96aa:	08 95       	ret

000096ac <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
    96ac:	ff 92       	push	r15
    96ae:	0f 93       	push	r16
    96b0:	1f 93       	push	r17
    96b2:	cf 93       	push	r28
    96b4:	df 93       	push	r29
    96b6:	cd b7       	in	r28, 0x3d	; 61
    96b8:	de b7       	in	r29, 0x3e	; 62
    96ba:	63 97       	sbiw	r28, 0x13	; 19
    96bc:	0f b6       	in	r0, 0x3f	; 63
    96be:	f8 94       	cli
    96c0:	de bf       	out	0x3e, r29	; 62
    96c2:	0f be       	out	0x3f, r0	; 63
    96c4:	cd bf       	out	0x3d, r28	; 61
    96c6:	1b 8a       	std	Y+19, r1	; 0x13
    96c8:	f1 2c       	mov	r15, r1
    96ca:	ae 01       	movw	r20, r28
    96cc:	4f 5f       	subi	r20, 0xFF	; 255
    96ce:	5f 4f       	sbci	r21, 0xFF	; 255
    96d0:	be 01       	movw	r22, r28
    96d2:	6d 5e       	subi	r22, 0xED	; 237
    96d4:	7f 4f       	sbci	r23, 0xFF	; 255
    96d6:	8f 2d       	mov	r24, r15
    96d8:	0e 94 94 42 	call	0x8528	; 0x8528 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    96dc:	8b 89       	ldd	r24, Y+19	; 0x13
    96de:	81 30       	cpi	r24, 0x01	; 1
    96e0:	e1 f5       	brne	.+120    	; 0x975a <send_mqtt_remote_tds_status()+0xae>
    96e2:	8e 01       	movw	r16, r28
    96e4:	0f 5f       	subi	r16, 0xFF	; 255
    96e6:	1f 4f       	sbci	r17, 0xFF	; 255
    96e8:	23 e7       	ldi	r18, 0x73	; 115
    96ea:	33 e0       	ldi	r19, 0x03	; 3
    96ec:	4f 2d       	mov	r20, r15
    96ee:	6e eb       	ldi	r22, 0xBE	; 190
    96f0:	73 e0       	ldi	r23, 0x03	; 3
    96f2:	89 e0       	ldi	r24, 0x09	; 9
    96f4:	9c e0       	ldi	r25, 0x0C	; 12
    96f6:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    96fa:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
    96fc:	4a e0       	ldi	r20, 0x0A	; 10
    96fe:	b8 01       	movw	r22, r16
    9700:	90 e0       	ldi	r25, 0x00	; 0
    9702:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    9706:	24 e9       	ldi	r18, 0x94	; 148
    9708:	33 e0       	ldi	r19, 0x03	; 3
    970a:	4f 2d       	mov	r20, r15
    970c:	6e eb       	ldi	r22, 0xBE	; 190
    970e:	73 e0       	ldi	r23, 0x03	; 3
    9710:	89 e0       	ldi	r24, 0x09	; 9
    9712:	9c e0       	ldi	r25, 0x0C	; 12
    9714:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9718:	8f 2d       	mov	r24, r15
    971a:	0e 94 c1 45 	call	0x8b82	; 0x8b82 <remote_tds_get_data(unsigned char)>
itoa():
    971e:	4a e0       	ldi	r20, 0x0A	; 10
    9720:	b8 01       	movw	r22, r16
    9722:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    9726:	25 e6       	ldi	r18, 0x65	; 101
    9728:	33 e0       	ldi	r19, 0x03	; 3
    972a:	4f 2d       	mov	r20, r15
    972c:	6e eb       	ldi	r22, 0xBE	; 190
    972e:	73 e0       	ldi	r23, 0x03	; 3
    9730:	89 e0       	ldi	r24, 0x09	; 9
    9732:	9c e0       	ldi	r25, 0x0C	; 12
    9734:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9738:	8f 2d       	mov	r24, r15
    973a:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <remote_tds_get_last_update(unsigned char)>
itoa():
    973e:	4a e0       	ldi	r20, 0x0A	; 10
    9740:	b8 01       	movw	r22, r16
    9742:	90 e0       	ldi	r25, 0x00	; 0
    9744:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    9748:	23 ec       	ldi	r18, 0xC3	; 195
    974a:	33 e0       	ldi	r19, 0x03	; 3
    974c:	4f 2d       	mov	r20, r15
    974e:	6e eb       	ldi	r22, 0xBE	; 190
    9750:	73 e0       	ldi	r23, 0x03	; 3
    9752:	89 e0       	ldi	r24, 0x09	; 9
    9754:	9c e0       	ldi	r25, 0x0C	; 12
    9756:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    975a:	f3 94       	inc	r15
    975c:	8a e0       	ldi	r24, 0x0A	; 10
    975e:	f8 12       	cpse	r15, r24
    9760:	b4 cf       	rjmp	.-152    	; 0x96ca <send_mqtt_remote_tds_status()+0x1e>
    9762:	63 96       	adiw	r28, 0x13	; 19
    9764:	0f b6       	in	r0, 0x3f	; 63
    9766:	f8 94       	cli
    9768:	de bf       	out	0x3e, r29	; 62
    976a:	0f be       	out	0x3f, r0	; 63
    976c:	cd bf       	out	0x3d, r28	; 61
    976e:	df 91       	pop	r29
    9770:	cf 91       	pop	r28
    9772:	1f 91       	pop	r17
    9774:	0f 91       	pop	r16
    9776:	ff 90       	pop	r15
    9778:	08 95       	ret

0000977a <mqtt_publis_output(unsigned char, unsigned char)>:
_Z18mqtt_publis_outputhh():
    977a:	0f 93       	push	r16
    977c:	1f 93       	push	r17
    977e:	cf 93       	push	r28
    9780:	df 93       	push	r29
    9782:	cd b7       	in	r28, 0x3d	; 61
    9784:	de b7       	in	r29, 0x3e	; 62
    9786:	c8 58       	subi	r28, 0x88	; 136
    9788:	d1 09       	sbc	r29, r1
    978a:	0f b6       	in	r0, 0x3f	; 63
    978c:	f8 94       	cli
    978e:	de bf       	out	0x3e, r29	; 62
    9790:	0f be       	out	0x3f, r0	; 63
    9792:	cd bf       	out	0x3d, r28	; 61
    9794:	8f 3f       	cpi	r24, 0xFF	; 255
    9796:	c9 f1       	breq	.+114    	; 0x980a <mqtt_publis_output(unsigned char, unsigned char)+0x90>
    9798:	06 2f       	mov	r16, r22
    979a:	18 2f       	mov	r17, r24
    979c:	6b eb       	ldi	r22, 0xBB	; 187
    979e:	75 e5       	ldi	r23, 0x55	; 85
    97a0:	ce 01       	movw	r24, r28
    97a2:	8f 5b       	subi	r24, 0xBF	; 191
    97a4:	9f 4f       	sbci	r25, 0xFF	; 255
    97a6:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    97aa:	6f ec       	ldi	r22, 0xCF	; 207
    97ac:	73 e0       	ldi	r23, 0x03	; 3
    97ae:	ce 01       	movw	r24, r28
    97b0:	8f 5b       	subi	r24, 0xBF	; 191
    97b2:	9f 4f       	sbci	r25, 0xFF	; 255
    97b4:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
itoa():
    97b8:	4a e0       	ldi	r20, 0x0A	; 10
    97ba:	be 01       	movw	r22, r28
    97bc:	6f 57       	subi	r22, 0x7F	; 127
    97be:	7f 4f       	sbci	r23, 0xFF	; 255
    97c0:	81 2f       	mov	r24, r17
    97c2:	90 e0       	ldi	r25, 0x00	; 0
    97c4:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z18mqtt_publis_outputhh():
    97c8:	be 01       	movw	r22, r28
    97ca:	6f 57       	subi	r22, 0x7F	; 127
    97cc:	7f 4f       	sbci	r23, 0xFF	; 255
    97ce:	ce 01       	movw	r24, r28
    97d0:	8f 5b       	subi	r24, 0xBF	; 191
    97d2:	9f 4f       	sbci	r25, 0xFF	; 255
    97d4:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    97d8:	6d ed       	ldi	r22, 0xDD	; 221
    97da:	73 e0       	ldi	r23, 0x03	; 3
    97dc:	ce 01       	movw	r24, r28
    97de:	8f 5b       	subi	r24, 0xBF	; 191
    97e0:	9f 4f       	sbci	r25, 0xFF	; 255
    97e2:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
itoa():
    97e6:	4a e0       	ldi	r20, 0x0A	; 10
    97e8:	be 01       	movw	r22, r28
    97ea:	6f 5f       	subi	r22, 0xFF	; 255
    97ec:	7f 4f       	sbci	r23, 0xFF	; 255
    97ee:	80 2f       	mov	r24, r16
    97f0:	90 e0       	ldi	r25, 0x00	; 0
    97f2:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z18mqtt_publis_outputhh():
    97f6:	ae 01       	movw	r20, r28
    97f8:	4f 5f       	subi	r20, 0xFF	; 255
    97fa:	5f 4f       	sbci	r21, 0xFF	; 255
    97fc:	be 01       	movw	r22, r28
    97fe:	6f 5b       	subi	r22, 0xBF	; 191
    9800:	7f 4f       	sbci	r23, 0xFF	; 255
    9802:	89 e0       	ldi	r24, 0x09	; 9
    9804:	9c e0       	ldi	r25, 0x0C	; 12
    9806:	0e 94 a3 c1 	call	0x18346	; 0x18346 <PubSubClient::publish(char const*, char const*)>
    980a:	c8 57       	subi	r28, 0x78	; 120
    980c:	df 4f       	sbci	r29, 0xFF	; 255
    980e:	0f b6       	in	r0, 0x3f	; 63
    9810:	f8 94       	cli
    9812:	de bf       	out	0x3e, r29	; 62
    9814:	0f be       	out	0x3f, r0	; 63
    9816:	cd bf       	out	0x3d, r28	; 61
    9818:	df 91       	pop	r29
    981a:	cf 91       	pop	r28
    981c:	1f 91       	pop	r17
    981e:	0f 91       	pop	r16
    9820:	08 95       	ret

00009822 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)>:
_Z22mqtt_publis_output_pwmhhh():
    9822:	ff 92       	push	r15
    9824:	0f 93       	push	r16
    9826:	1f 93       	push	r17
    9828:	cf 93       	push	r28
    982a:	df 93       	push	r29
    982c:	cd b7       	in	r28, 0x3d	; 61
    982e:	de b7       	in	r29, 0x3e	; 62
    9830:	c8 58       	subi	r28, 0x88	; 136
    9832:	d1 09       	sbc	r29, r1
    9834:	0f b6       	in	r0, 0x3f	; 63
    9836:	f8 94       	cli
    9838:	de bf       	out	0x3e, r29	; 62
    983a:	0f be       	out	0x3f, r0	; 63
    983c:	cd bf       	out	0x3d, r28	; 61
    983e:	8f 3f       	cpi	r24, 0xFF	; 255
    9840:	09 f4       	brne	.+2      	; 0x9844 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x22>
    9842:	4f c0       	rjmp	.+158    	; 0x98e2 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0xc0>
    9844:	f4 2e       	mov	r15, r20
    9846:	16 2f       	mov	r17, r22
    9848:	08 2f       	mov	r16, r24
    984a:	6b eb       	ldi	r22, 0xBB	; 187
    984c:	75 e5       	ldi	r23, 0x55	; 85
    984e:	ce 01       	movw	r24, r28
    9850:	8f 5b       	subi	r24, 0xBF	; 191
    9852:	9f 4f       	sbci	r25, 0xFF	; 255
    9854:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    9858:	6f ec       	ldi	r22, 0xCF	; 207
    985a:	73 e0       	ldi	r23, 0x03	; 3
    985c:	ce 01       	movw	r24, r28
    985e:	8f 5b       	subi	r24, 0xBF	; 191
    9860:	9f 4f       	sbci	r25, 0xFF	; 255
    9862:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
itoa():
    9866:	4a e0       	ldi	r20, 0x0A	; 10
    9868:	be 01       	movw	r22, r28
    986a:	6f 57       	subi	r22, 0x7F	; 127
    986c:	7f 4f       	sbci	r23, 0xFF	; 255
    986e:	80 2f       	mov	r24, r16
    9870:	90 e0       	ldi	r25, 0x00	; 0
    9872:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z22mqtt_publis_output_pwmhhh():
    9876:	be 01       	movw	r22, r28
    9878:	6f 57       	subi	r22, 0x7F	; 127
    987a:	7f 4f       	sbci	r23, 0xFF	; 255
    987c:	ce 01       	movw	r24, r28
    987e:	8f 5b       	subi	r24, 0xBF	; 191
    9880:	9f 4f       	sbci	r25, 0xFF	; 255
    9882:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    9886:	64 ee       	ldi	r22, 0xE4	; 228
    9888:	73 e0       	ldi	r23, 0x03	; 3
    988a:	13 30       	cpi	r17, 0x03	; 3
    988c:	61 f0       	breq	.+24     	; 0x98a6 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    988e:	6a ee       	ldi	r22, 0xEA	; 234
    9890:	73 e0       	ldi	r23, 0x03	; 3
    9892:	15 30       	cpi	r17, 0x05	; 5
    9894:	41 f0       	breq	.+16     	; 0x98a6 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    9896:	60 ef       	ldi	r22, 0xF0	; 240
    9898:	73 e0       	ldi	r23, 0x03	; 3
    989a:	16 30       	cpi	r17, 0x06	; 6
    989c:	21 f0       	breq	.+8      	; 0x98a6 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    989e:	1e 3f       	cpi	r17, 0xFE	; 254
    98a0:	39 f4       	brne	.+14     	; 0x98b0 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x8e>
    98a2:	65 ef       	ldi	r22, 0xF5	; 245
    98a4:	73 e0       	ldi	r23, 0x03	; 3
    98a6:	ce 01       	movw	r24, r28
    98a8:	8f 5b       	subi	r24, 0xBF	; 191
    98aa:	9f 4f       	sbci	r25, 0xFF	; 255
    98ac:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    98b0:	6a ef       	ldi	r22, 0xFA	; 250
    98b2:	73 e0       	ldi	r23, 0x03	; 3
    98b4:	ce 01       	movw	r24, r28
    98b6:	8f 5b       	subi	r24, 0xBF	; 191
    98b8:	9f 4f       	sbci	r25, 0xFF	; 255
    98ba:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
itoa():
    98be:	4a e0       	ldi	r20, 0x0A	; 10
    98c0:	be 01       	movw	r22, r28
    98c2:	6f 5f       	subi	r22, 0xFF	; 255
    98c4:	7f 4f       	sbci	r23, 0xFF	; 255
    98c6:	8f 2d       	mov	r24, r15
    98c8:	90 e0       	ldi	r25, 0x00	; 0
    98ca:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z22mqtt_publis_output_pwmhhh():
    98ce:	ae 01       	movw	r20, r28
    98d0:	4f 5f       	subi	r20, 0xFF	; 255
    98d2:	5f 4f       	sbci	r21, 0xFF	; 255
    98d4:	be 01       	movw	r22, r28
    98d6:	6f 5b       	subi	r22, 0xBF	; 191
    98d8:	7f 4f       	sbci	r23, 0xFF	; 255
    98da:	89 e0       	ldi	r24, 0x09	; 9
    98dc:	9c e0       	ldi	r25, 0x0C	; 12
    98de:	0e 94 a3 c1 	call	0x18346	; 0x18346 <PubSubClient::publish(char const*, char const*)>
    98e2:	c8 57       	subi	r28, 0x78	; 120
    98e4:	df 4f       	sbci	r29, 0xFF	; 255
    98e6:	0f b6       	in	r0, 0x3f	; 63
    98e8:	f8 94       	cli
    98ea:	de bf       	out	0x3e, r29	; 62
    98ec:	0f be       	out	0x3f, r0	; 63
    98ee:	cd bf       	out	0x3d, r28	; 61
    98f0:	df 91       	pop	r29
    98f2:	cf 91       	pop	r28
    98f4:	1f 91       	pop	r17
    98f6:	0f 91       	pop	r16
    98f8:	ff 90       	pop	r15
    98fa:	08 95       	ret

000098fc <selftest_set_0(unsigned char)>:
_Z14selftest_set_0h():
    98fc:	21 e0       	ldi	r18, 0x01	; 1
    98fe:	30 e0       	ldi	r19, 0x00	; 0
    9900:	01 c0       	rjmp	.+2      	; 0x9904 <selftest_set_0(unsigned char)+0x8>
    9902:	22 0f       	add	r18, r18
    9904:	8a 95       	dec	r24
    9906:	ea f7       	brpl	.-6      	; 0x9902 <selftest_set_0(unsigned char)+0x6>
    9908:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <selftest_data>
    990c:	82 2b       	or	r24, r18
    990e:	80 93 4e 0a 	sts	0x0A4E, r24	; 0x800a4e <selftest_data>
    9912:	08 95       	ret

00009914 <selftest_clear_0(unsigned char)>:
_Z16selftest_clear_0h():
    9914:	21 e0       	ldi	r18, 0x01	; 1
    9916:	30 e0       	ldi	r19, 0x00	; 0
    9918:	01 c0       	rjmp	.+2      	; 0x991c <selftest_clear_0(unsigned char)+0x8>
    991a:	22 0f       	add	r18, r18
    991c:	8a 95       	dec	r24
    991e:	ea f7       	brpl	.-6      	; 0x991a <selftest_clear_0(unsigned char)+0x6>
    9920:	20 95       	com	r18
    9922:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <selftest_data>
    9926:	28 23       	and	r18, r24
    9928:	20 93 4e 0a 	sts	0x0A4E, r18	; 0x800a4e <selftest_data>
    992c:	08 95       	ret

0000992e <selftest()>:
_Z8selftestv():
    992e:	85 e5       	ldi	r24, 0x55	; 85
    9930:	9e e0       	ldi	r25, 0x0E	; 14
    9932:	0e 94 71 c7 	call	0x18ee2	; 0x18ee2 <RTC_DS1307::isrunning()>
    9936:	90 91 4e 0a 	lds	r25, 0x0A4E	; 0x800a4e <selftest_data>
    993a:	81 11       	cpse	r24, r1
    993c:	04 c0       	rjmp	.+8      	; 0x9946 <selftest()+0x18>
    993e:	91 60       	ori	r25, 0x01	; 1
    9940:	90 93 4e 0a 	sts	0x0A4E, r25	; 0x800a4e <selftest_data>
    9944:	08 95       	ret
    9946:	9e 7f       	andi	r25, 0xFE	; 254
    9948:	fb cf       	rjmp	.-10     	; 0x9940 <selftest()+0x12>

0000994a <time_get_offset()>:
_ZNK5EERefdeEv():
    994a:	81 e0       	ldi	r24, 0x01	; 1
    994c:	90 e0       	ldi	r25, 0x00	; 0
    994e:	0c 94 80 e4 	jmp	0x1c900	; 0x1c900 <eeprom_read_byte>

00009952 <send_device_status()>:
_Z18send_device_statusv():
    9952:	0f 93       	push	r16
    9954:	1f 93       	push	r17
    9956:	cf 93       	push	r28
    9958:	df 93       	push	r29
    995a:	cd b7       	in	r28, 0x3d	; 61
    995c:	de b7       	in	r29, 0x3e	; 62
    995e:	c0 58       	subi	r28, 0x80	; 128
    9960:	d1 09       	sbc	r29, r1
    9962:	0f b6       	in	r0, 0x3f	; 63
    9964:	f8 94       	cli
    9966:	de bf       	out	0x3e, r29	; 62
    9968:	0f be       	out	0x3f, r0	; 63
    996a:	cd bf       	out	0x3d, r28	; 61
    996c:	89 e0       	ldi	r24, 0x09	; 9
    996e:	9c e0       	ldi	r25, 0x0C	; 12
    9970:	0e 94 15 be 	call	0x17c2a	; 0x17c2a <PubSubClient::connected()>
    9974:	88 23       	and	r24, r24
    9976:	09 f4       	brne	.+2      	; 0x997a <send_device_status()+0x28>
    9978:	6b c1       	rjmp	.+726    	; 0x9c50 <send_device_status()+0x2fe>
    997a:	6f ef       	ldi	r22, 0xFF	; 255
    997c:	73 e0       	ldi	r23, 0x03	; 3
    997e:	ce 01       	movw	r24, r28
    9980:	8f 5b       	subi	r24, 0xBF	; 191
    9982:	9f 4f       	sbci	r25, 0xFF	; 255
    9984:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
itoa():
    9988:	4a e0       	ldi	r20, 0x0A	; 10
    998a:	be 01       	movw	r22, r28
    998c:	6f 5f       	subi	r22, 0xFF	; 255
    998e:	7f 4f       	sbci	r23, 0xFF	; 255
    9990:	80 91 3f 0a 	lds	r24, 0x0A3F	; 0x800a3f <uptime>
    9994:	90 91 40 0a 	lds	r25, 0x0A40	; 0x800a40 <uptime+0x1>
    9998:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z18send_device_statusv():
    999c:	ae 01       	movw	r20, r28
    999e:	4f 5f       	subi	r20, 0xFF	; 255
    99a0:	5f 4f       	sbci	r21, 0xFF	; 255
    99a2:	be 01       	movw	r22, r28
    99a4:	6f 5b       	subi	r22, 0xBF	; 191
    99a6:	7f 4f       	sbci	r23, 0xFF	; 255
    99a8:	89 e0       	ldi	r24, 0x09	; 9
    99aa:	9c e0       	ldi	r25, 0x0C	; 12
    99ac:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    99b0:	6d e0       	ldi	r22, 0x0D	; 13
    99b2:	74 e0       	ldi	r23, 0x04	; 4
    99b4:	ce 01       	movw	r24, r28
    99b6:	8f 5b       	subi	r24, 0xBF	; 191
    99b8:	9f 4f       	sbci	r25, 0xFF	; 255
    99ba:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
itoa():
    99be:	4a e0       	ldi	r20, 0x0A	; 10
    99c0:	be 01       	movw	r22, r28
    99c2:	6f 5f       	subi	r22, 0xFF	; 255
    99c4:	7f 4f       	sbci	r23, 0xFF	; 255
    99c6:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <light_curr>
    99ca:	90 91 45 0a 	lds	r25, 0x0A45	; 0x800a45 <light_curr+0x1>
    99ce:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z18send_device_statusv():
    99d2:	ae 01       	movw	r20, r28
    99d4:	4f 5f       	subi	r20, 0xFF	; 255
    99d6:	5f 4f       	sbci	r21, 0xFF	; 255
    99d8:	be 01       	movw	r22, r28
    99da:	6f 5b       	subi	r22, 0xBF	; 191
    99dc:	7f 4f       	sbci	r23, 0xFF	; 255
    99de:	89 e0       	ldi	r24, 0x09	; 9
    99e0:	9c e0       	ldi	r25, 0x0C	; 12
    99e2:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    99e6:	6f e1       	ldi	r22, 0x1F	; 31
    99e8:	74 e0       	ldi	r23, 0x04	; 4
    99ea:	ce 01       	movw	r24, r28
    99ec:	8f 5b       	subi	r24, 0xBF	; 191
    99ee:	9f 4f       	sbci	r25, 0xFF	; 255
    99f0:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    99f4:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <auto_jas>
itoa():
    99f8:	4a e0       	ldi	r20, 0x0A	; 10
    99fa:	be 01       	movw	r22, r28
    99fc:	6f 5f       	subi	r22, 0xFF	; 255
    99fe:	7f 4f       	sbci	r23, 0xFF	; 255
    9a00:	90 e0       	ldi	r25, 0x00	; 0
    9a02:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z18send_device_statusv():
    9a06:	ae 01       	movw	r20, r28
    9a08:	4f 5f       	subi	r20, 0xFF	; 255
    9a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    9a0c:	be 01       	movw	r22, r28
    9a0e:	6f 5b       	subi	r22, 0xBF	; 191
    9a10:	7f 4f       	sbci	r23, 0xFF	; 255
    9a12:	89 e0       	ldi	r24, 0x09	; 9
    9a14:	9c e0       	ldi	r25, 0x0C	; 12
    9a16:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9a1a:	66 e3       	ldi	r22, 0x36	; 54
    9a1c:	74 e0       	ldi	r23, 0x04	; 4
    9a1e:	ce 01       	movw	r24, r28
    9a20:	8f 5b       	subi	r24, 0xBF	; 191
    9a22:	9f 4f       	sbci	r25, 0xFF	; 255
    9a24:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
itoa():
    9a28:	4a e0       	ldi	r20, 0x0A	; 10
    9a2a:	be 01       	movw	r22, r28
    9a2c:	6f 5f       	subi	r22, 0xFF	; 255
    9a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    9a30:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <load_min>
    9a34:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <load_min+0x1>
    9a38:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z18send_device_statusv():
    9a3c:	ae 01       	movw	r20, r28
    9a3e:	4f 5f       	subi	r20, 0xFF	; 255
    9a40:	5f 4f       	sbci	r21, 0xFF	; 255
    9a42:	be 01       	movw	r22, r28
    9a44:	6f 5b       	subi	r22, 0xBF	; 191
    9a46:	7f 4f       	sbci	r23, 0xFF	; 255
    9a48:	89 e0       	ldi	r24, 0x09	; 9
    9a4a:	9c e0       	ldi	r25, 0x0C	; 12
    9a4c:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9a50:	66 e4       	ldi	r22, 0x46	; 70
    9a52:	74 e0       	ldi	r23, 0x04	; 4
    9a54:	ce 01       	movw	r24, r28
    9a56:	8f 5b       	subi	r24, 0xBF	; 191
    9a58:	9f 4f       	sbci	r25, 0xFF	; 255
    9a5a:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
itoa():
    9a5e:	4a e0       	ldi	r20, 0x0A	; 10
    9a60:	be 01       	movw	r22, r28
    9a62:	6f 5f       	subi	r22, 0xFF	; 255
    9a64:	7f 4f       	sbci	r23, 0xFF	; 255
    9a66:	80 91 25 0a 	lds	r24, 0x0A25	; 0x800a25 <load_max>
    9a6a:	90 91 26 0a 	lds	r25, 0x0A26	; 0x800a26 <load_max+0x1>
    9a6e:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z18send_device_statusv():
    9a72:	ae 01       	movw	r20, r28
    9a74:	4f 5f       	subi	r20, 0xFF	; 255
    9a76:	5f 4f       	sbci	r21, 0xFF	; 255
    9a78:	be 01       	movw	r22, r28
    9a7a:	6f 5b       	subi	r22, 0xBF	; 191
    9a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    9a7e:	89 e0       	ldi	r24, 0x09	; 9
    9a80:	9c e0       	ldi	r25, 0x0C	; 12
    9a82:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9a86:	10 92 25 0a 	sts	0x0A25, r1	; 0x800a25 <load_max>
    9a8a:	10 92 26 0a 	sts	0x0A26, r1	; 0x800a26 <load_max+0x1>
    9a8e:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <load_max+0x2>
    9a92:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <load_max+0x3>
    9a96:	8f ef       	ldi	r24, 0xFF	; 255
    9a98:	9f ef       	ldi	r25, 0xFF	; 255
    9a9a:	dc 01       	movw	r26, r24
    9a9c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <load_min>
    9aa0:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <load_min+0x1>
    9aa4:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <load_min+0x2>
    9aa8:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <load_min+0x3>
    9aac:	66 e5       	ldi	r22, 0x56	; 86
    9aae:	74 e0       	ldi	r23, 0x04	; 4
    9ab0:	ce 01       	movw	r24, r28
    9ab2:	8f 5b       	subi	r24, 0xBF	; 191
    9ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    9ab6:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    9aba:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
itoa():
    9abe:	4a e0       	ldi	r20, 0x0A	; 10
    9ac0:	be 01       	movw	r22, r28
    9ac2:	6f 5f       	subi	r22, 0xFF	; 255
    9ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    9ac6:	90 e0       	ldi	r25, 0x00	; 0
    9ac8:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z18send_device_statusv():
    9acc:	ae 01       	movw	r20, r28
    9ace:	4f 5f       	subi	r20, 0xFF	; 255
    9ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    9ad2:	be 01       	movw	r22, r28
    9ad4:	6f 5b       	subi	r22, 0xBF	; 191
    9ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    9ad8:	89 e0       	ldi	r24, 0x09	; 9
    9ada:	9c e0       	ldi	r25, 0x0C	; 12
    9adc:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9ae0:	6a e6       	ldi	r22, 0x6A	; 106
    9ae2:	74 e0       	ldi	r23, 0x04	; 4
    9ae4:	ce 01       	movw	r24, r28
    9ae6:	8f 5b       	subi	r24, 0xBF	; 191
    9ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    9aea:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    9aee:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <selftest_data>
itoa():
    9af2:	4a e0       	ldi	r20, 0x0A	; 10
    9af4:	be 01       	movw	r22, r28
    9af6:	6f 5f       	subi	r22, 0xFF	; 255
    9af8:	7f 4f       	sbci	r23, 0xFF	; 255
    9afa:	90 e0       	ldi	r25, 0x00	; 0
    9afc:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z18send_device_statusv():
    9b00:	ae 01       	movw	r20, r28
    9b02:	4f 5f       	subi	r20, 0xFF	; 255
    9b04:	5f 4f       	sbci	r21, 0xFF	; 255
    9b06:	be 01       	movw	r22, r28
    9b08:	6f 5b       	subi	r22, 0xBF	; 191
    9b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    9b0c:	89 e0       	ldi	r24, 0x09	; 9
    9b0e:	9c e0       	ldi	r25, 0x0C	; 12
    9b10:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9b14:	6a e7       	ldi	r22, 0x7A	; 122
    9b16:	74 e0       	ldi	r23, 0x04	; 4
    9b18:	ce 01       	movw	r24, r28
    9b1a:	8f 5b       	subi	r24, 0xBF	; 191
    9b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    9b1e:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    9b22:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <use_rtds>
itoa():
    9b26:	4a e0       	ldi	r20, 0x0A	; 10
    9b28:	be 01       	movw	r22, r28
    9b2a:	6f 5f       	subi	r22, 0xFF	; 255
    9b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    9b2e:	90 e0       	ldi	r25, 0x00	; 0
    9b30:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z18send_device_statusv():
    9b34:	ae 01       	movw	r20, r28
    9b36:	4f 5f       	subi	r20, 0xFF	; 255
    9b38:	5f 4f       	sbci	r21, 0xFF	; 255
    9b3a:	be 01       	movw	r22, r28
    9b3c:	6f 5b       	subi	r22, 0xBF	; 191
    9b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    9b40:	89 e0       	ldi	r24, 0x09	; 9
    9b42:	9c e0       	ldi	r25, 0x0C	; 12
    9b44:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9b48:	0e 94 a5 4c 	call	0x994a	; 0x994a <time_get_offset()>
itoa():
    9b4c:	4a e0       	ldi	r20, 0x0A	; 10
    9b4e:	be 01       	movw	r22, r28
    9b50:	6f 5f       	subi	r22, 0xFF	; 255
    9b52:	7f 4f       	sbci	r23, 0xFF	; 255
    9b54:	90 e0       	ldi	r25, 0x00	; 0
    9b56:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z18send_device_statusv():
    9b5a:	ae 01       	movw	r20, r28
    9b5c:	4f 5f       	subi	r20, 0xFF	; 255
    9b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    9b60:	6c e8       	ldi	r22, 0x8C	; 140
    9b62:	74 e0       	ldi	r23, 0x04	; 4
    9b64:	89 e0       	ldi	r24, 0x09	; 9
    9b66:	9c e0       	ldi	r25, 0x0C	; 12
    9b68:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    9b6c:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <tritri>
    9b70:	90 91 4d 0a 	lds	r25, 0x0A4D	; 0x800a4d <tritri+0x1>
    9b74:	25 e0       	ldi	r18, 0x05	; 5
    9b76:	28 9f       	mul	r18, r24
    9b78:	b0 01       	movw	r22, r0
    9b7a:	29 9f       	mul	r18, r25
    9b7c:	70 0d       	add	r23, r0
    9b7e:	11 24       	eor	r1, r1
    9b80:	90 e0       	ldi	r25, 0x00	; 0
    9b82:	80 e0       	ldi	r24, 0x00	; 0
    9b84:	0e 94 19 d7 	call	0x1ae32	; 0x1ae32 <__floatunsisf>
    9b88:	20 e0       	ldi	r18, 0x00	; 0
    9b8a:	30 e0       	ldi	r19, 0x00	; 0
    9b8c:	4a e7       	ldi	r20, 0x7A	; 122
    9b8e:	54 e4       	ldi	r21, 0x44	; 68
    9b90:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
_Z18send_device_statusv():
    9b94:	8e 01       	movw	r16, r28
    9b96:	0f 5f       	subi	r16, 0xFF	; 255
    9b98:	1f 4f       	sbci	r17, 0xFF	; 255
    9b9a:	22 e0       	ldi	r18, 0x02	; 2
    9b9c:	44 e0       	ldi	r20, 0x04	; 4
    9b9e:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
    9ba2:	a8 01       	movw	r20, r16
    9ba4:	6c e9       	ldi	r22, 0x9C	; 156
    9ba6:	74 e0       	ldi	r23, 0x04	; 4
    9ba8:	89 e0       	ldi	r24, 0x09	; 9
    9baa:	9c e0       	ldi	r25, 0x0C	; 12
    9bac:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    9bb0:	60 91 4a 0a 	lds	r22, 0x0A4A	; 0x800a4a <petnula>
    9bb4:	70 91 4b 0a 	lds	r23, 0x0A4B	; 0x800a4b <petnula+0x1>
    9bb8:	83 e0       	ldi	r24, 0x03	; 3
    9bba:	66 0f       	add	r22, r22
    9bbc:	77 1f       	adc	r23, r23
    9bbe:	8a 95       	dec	r24
    9bc0:	e1 f7       	brne	.-8      	; 0x9bba <send_device_status()+0x268>
    9bc2:	90 e0       	ldi	r25, 0x00	; 0
    9bc4:	80 e0       	ldi	r24, 0x00	; 0
    9bc6:	0e 94 19 d7 	call	0x1ae32	; 0x1ae32 <__floatunsisf>
    9bca:	20 e0       	ldi	r18, 0x00	; 0
    9bcc:	30 e0       	ldi	r19, 0x00	; 0
    9bce:	4a e7       	ldi	r20, 0x7A	; 122
    9bd0:	54 e4       	ldi	r21, 0x44	; 68
    9bd2:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
_Z18send_device_statusv():
    9bd6:	22 e0       	ldi	r18, 0x02	; 2
    9bd8:	44 e0       	ldi	r20, 0x04	; 4
    9bda:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
    9bde:	a8 01       	movw	r20, r16
    9be0:	6f ea       	ldi	r22, 0xAF	; 175
    9be2:	74 e0       	ldi	r23, 0x04	; 4
    9be4:	89 e0       	ldi	r24, 0x09	; 9
    9be6:	9c e0       	ldi	r25, 0x0C	; 12
    9be8:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    9bec:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <dvanact>
    9bf0:	90 91 49 0a 	lds	r25, 0x0A49	; 0x800a49 <dvanact+0x1>
    9bf4:	29 e3       	ldi	r18, 0x39	; 57
    9bf6:	28 9f       	mul	r18, r24
    9bf8:	b0 01       	movw	r22, r0
    9bfa:	29 9f       	mul	r18, r25
    9bfc:	70 0d       	add	r23, r0
    9bfe:	11 24       	eor	r1, r1
    9c00:	90 e0       	ldi	r25, 0x00	; 0
    9c02:	80 e0       	ldi	r24, 0x00	; 0
    9c04:	0e 94 19 d7 	call	0x1ae32	; 0x1ae32 <__floatunsisf>
    9c08:	20 e0       	ldi	r18, 0x00	; 0
    9c0a:	30 e0       	ldi	r19, 0x00	; 0
    9c0c:	4a e7       	ldi	r20, 0x7A	; 122
    9c0e:	54 e4       	ldi	r21, 0x44	; 68
    9c10:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
_Z18send_device_statusv():
    9c14:	22 e0       	ldi	r18, 0x02	; 2
    9c16:	44 e0       	ldi	r20, 0x04	; 4
    9c18:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
    9c1c:	a8 01       	movw	r20, r16
    9c1e:	62 ec       	ldi	r22, 0xC2	; 194
    9c20:	74 e0       	ldi	r23, 0x04	; 4
    9c22:	89 e0       	ldi	r24, 0x09	; 9
    9c24:	9c e0       	ldi	r25, 0x0C	; 12
    9c26:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_prouduj():
    9c2a:	60 91 46 0a 	lds	r22, 0x0A46	; 0x800a46 <proud>
    9c2e:	70 91 47 0a 	lds	r23, 0x0A47	; 0x800a47 <proud+0x1>
    9c32:	90 e0       	ldi	r25, 0x00	; 0
    9c34:	80 e0       	ldi	r24, 0x00	; 0
    9c36:	0e 94 19 d7 	call	0x1ae32	; 0x1ae32 <__floatunsisf>
_Z18send_device_statusv():
    9c3a:	22 e0       	ldi	r18, 0x02	; 2
    9c3c:	44 e0       	ldi	r20, 0x04	; 4
    9c3e:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
    9c42:	a8 01       	movw	r20, r16
    9c44:	65 ed       	ldi	r22, 0xD5	; 213
    9c46:	74 e0       	ldi	r23, 0x04	; 4
    9c48:	89 e0       	ldi	r24, 0x09	; 9
    9c4a:	9c e0       	ldi	r25, 0x0C	; 12
    9c4c:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9c50:	c0 58       	subi	r28, 0x80	; 128
    9c52:	df 4f       	sbci	r29, 0xFF	; 255
    9c54:	0f b6       	in	r0, 0x3f	; 63
    9c56:	f8 94       	cli
    9c58:	de bf       	out	0x3e, r29	; 62
    9c5a:	0f be       	out	0x3f, r0	; 63
    9c5c:	cd bf       	out	0x3d, r28	; 61
    9c5e:	df 91       	pop	r29
    9c60:	cf 91       	pop	r28
    9c62:	1f 91       	pop	r17
    9c64:	0f 91       	pop	r16
    9c66:	08 95       	ret

00009c68 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>:
_Z26button_click_ntp_sync_timejjh():
    9c68:	cf 93       	push	r28
    9c6a:	df 93       	push	r29
    9c6c:	cd b7       	in	r28, 0x3d	; 61
    9c6e:	de b7       	in	r29, 0x3e	; 62
    9c70:	c7 54       	subi	r28, 0x47	; 71
    9c72:	d1 09       	sbc	r29, r1
    9c74:	0f b6       	in	r0, 0x3f	; 63
    9c76:	f8 94       	cli
    9c78:	de bf       	out	0x3e, r29	; 62
    9c7a:	0f be       	out	0x3f, r0	; 63
    9c7c:	cd bf       	out	0x3d, r28	; 61
    9c7e:	66 e2       	ldi	r22, 0x26	; 38
    9c80:	7e e0       	ldi	r23, 0x0E	; 14
    9c82:	ce 01       	movw	r24, r28
    9c84:	01 96       	adiw	r24, 0x01	; 1
    9c86:	0e 94 3c ce 	call	0x19c78	; 0x19c78 <NTPClient::NTPClient(UDP&)>
    9c8a:	0e 94 a5 4c 	call	0x994a	; 0x994a <time_get_offset()>
    9c8e:	48 2f       	mov	r20, r24
    9c90:	65 e5       	ldi	r22, 0x55	; 85
    9c92:	7e e0       	ldi	r23, 0x0E	; 14
    9c94:	ce 01       	movw	r24, r28
    9c96:	01 96       	adiw	r24, 0x01	; 1
    9c98:	0e 94 eb 86 	call	0x10dd6	; 0x10dd6 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char)>
    9c9c:	81 30       	cpi	r24, 0x01	; 1
    9c9e:	61 f4       	brne	.+24     	; 0x9cb8 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x50>
    9ca0:	0e 94 8a 4c 	call	0x9914	; 0x9914 <selftest_clear_0(unsigned char)>
    9ca4:	c9 5b       	subi	r28, 0xB9	; 185
    9ca6:	df 4f       	sbci	r29, 0xFF	; 255
    9ca8:	0f b6       	in	r0, 0x3f	; 63
    9caa:	f8 94       	cli
    9cac:	de bf       	out	0x3e, r29	; 62
    9cae:	0f be       	out	0x3f, r0	; 63
    9cb0:	cd bf       	out	0x3d, r28	; 61
    9cb2:	df 91       	pop	r29
    9cb4:	cf 91       	pop	r28
    9cb6:	08 95       	ret
    9cb8:	81 e0       	ldi	r24, 0x01	; 1
    9cba:	0e 94 7e 4c 	call	0x98fc	; 0x98fc <selftest_set_0(unsigned char)>
    9cbe:	f2 cf       	rjmp	.-28     	; 0x9ca4 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x3c>

00009cc0 <time_set_offset(unsigned char)>:
_Z15time_set_offseth():
    9cc0:	68 2f       	mov	r22, r24
    9cc2:	81 e0       	ldi	r24, 0x01	; 1
    9cc4:	90 e0       	ldi	r25, 0x00	; 0
    9cc6:	0c 94 74 39 	jmp	0x72e8	; 0x72e8 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>

00009cca <setup_io_pin()>:
_Z12setup_io_pinv():
    9cca:	61 e0       	ldi	r22, 0x01	; 1
    9ccc:	86 e0       	ldi	r24, 0x06	; 6
    9cce:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
    9cd2:	61 e0       	ldi	r22, 0x01	; 1
    9cd4:	8f e0       	ldi	r24, 0x0F	; 15
    9cd6:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
    9cda:	61 e0       	ldi	r22, 0x01	; 1
    9cdc:	88 e0       	ldi	r24, 0x08	; 8
    9cde:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
    9ce2:	61 e0       	ldi	r22, 0x01	; 1
    9ce4:	8c e0       	ldi	r24, 0x0C	; 12
    9ce6:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
    9cea:	61 e0       	ldi	r22, 0x01	; 1
    9cec:	86 e1       	ldi	r24, 0x16	; 22
    9cee:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
    9cf2:	61 e0       	ldi	r22, 0x01	; 1
    9cf4:	87 e1       	ldi	r24, 0x17	; 23
    9cf6:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
    9cfa:	62 e0       	ldi	r22, 0x02	; 2
    9cfc:	8e e0       	ldi	r24, 0x0E	; 14
    9cfe:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
    9d02:	60 e0       	ldi	r22, 0x00	; 0
    9d04:	8c e0       	ldi	r24, 0x0C	; 12
    9d06:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
    9d0a:	68 ee       	ldi	r22, 0xE8	; 232
    9d0c:	73 e0       	ldi	r23, 0x03	; 3
    9d0e:	80 e0       	ldi	r24, 0x00	; 0
    9d10:	90 e0       	ldi	r25, 0x00	; 0
    9d12:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
    9d16:	61 e0       	ldi	r22, 0x01	; 1
    9d18:	8c e0       	ldi	r24, 0x0C	; 12
    9d1a:	0c 94 84 d2 	jmp	0x1a508	; 0x1a508 <digitalWrite>

00009d1e <convert_text_mode(char*)>:
_Z17convert_text_modePc():
    9d1e:	ef 92       	push	r14
    9d20:	ff 92       	push	r15
    9d22:	0f 93       	push	r16
    9d24:	1f 93       	push	r17
    9d26:	cf 93       	push	r28
    9d28:	8c 01       	movw	r16, r24
    9d2a:	65 ee       	ldi	r22, 0xE5	; 229
    9d2c:	73 e0       	ldi	r23, 0x03	; 3
    9d2e:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    9d32:	7c 01       	movw	r14, r24
    9d34:	6c ee       	ldi	r22, 0xEC	; 236
    9d36:	74 e0       	ldi	r23, 0x04	; 4
    9d38:	c8 01       	movw	r24, r16
    9d3a:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    9d3e:	c3 e0       	ldi	r28, 0x03	; 3
    9d40:	89 2b       	or	r24, r25
    9d42:	21 f0       	breq	.+8      	; 0x9d4c <convert_text_mode(char*)+0x2e>
    9d44:	c1 e0       	ldi	r28, 0x01	; 1
    9d46:	ef 28       	or	r14, r15
    9d48:	09 f0       	breq	.+2      	; 0x9d4c <convert_text_mode(char*)+0x2e>
    9d4a:	c0 e0       	ldi	r28, 0x00	; 0
    9d4c:	63 ef       	ldi	r22, 0xF3	; 243
    9d4e:	74 e0       	ldi	r23, 0x04	; 4
    9d50:	c8 01       	movw	r24, r16
    9d52:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    9d56:	89 2b       	or	r24, r25
    9d58:	09 f4       	brne	.+2      	; 0x9d5c <convert_text_mode(char*)+0x3e>
    9d5a:	c2 e0       	ldi	r28, 0x02	; 2
    9d5c:	6b ee       	ldi	r22, 0xEB	; 235
    9d5e:	73 e0       	ldi	r23, 0x03	; 3
    9d60:	c8 01       	movw	r24, r16
    9d62:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    9d66:	89 2b       	or	r24, r25
    9d68:	09 f4       	brne	.+2      	; 0x9d6c <convert_text_mode(char*)+0x4e>
    9d6a:	c4 e0       	ldi	r28, 0x04	; 4
    9d6c:	68 ef       	ldi	r22, 0xF8	; 248
    9d6e:	74 e0       	ldi	r23, 0x04	; 4
    9d70:	c8 01       	movw	r24, r16
    9d72:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    9d76:	89 2b       	or	r24, r25
    9d78:	09 f4       	brne	.+2      	; 0x9d7c <convert_text_mode(char*)+0x5e>
    9d7a:	c6 e0       	ldi	r28, 0x06	; 6
    9d7c:	8c 2f       	mov	r24, r28
    9d7e:	cf 91       	pop	r28
    9d80:	1f 91       	pop	r17
    9d82:	0f 91       	pop	r16
    9d84:	ff 90       	pop	r15
    9d86:	ef 90       	pop	r14
    9d88:	08 95       	ret

00009d8a <convert_mode_text(unsigned char, char*)>:
_Z17convert_mode_texthPc():
    9d8a:	28 2f       	mov	r18, r24
    9d8c:	cb 01       	movw	r24, r22
    9d8e:	61 e0       	ldi	r22, 0x01	; 1
    9d90:	75 e0       	ldi	r23, 0x05	; 5
    9d92:	22 23       	and	r18, r18
    9d94:	21 f0       	breq	.+8      	; 0x9d9e <convert_mode_text(unsigned char, char*)+0x14>
    9d96:	21 30       	cpi	r18, 0x01	; 1
    9d98:	29 f4       	brne	.+10     	; 0x9da4 <convert_mode_text(unsigned char, char*)+0x1a>
    9d9a:	65 ee       	ldi	r22, 0xE5	; 229
    9d9c:	73 e0       	ldi	r23, 0x03	; 3
    9d9e:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    9da2:	08 95       	ret
    9da4:	6c ee       	ldi	r22, 0xEC	; 236
    9da6:	74 e0       	ldi	r23, 0x04	; 4
    9da8:	23 30       	cpi	r18, 0x03	; 3
    9daa:	61 f0       	breq	.+24     	; 0x9dc4 <convert_mode_text(unsigned char, char*)+0x3a>
    9dac:	63 ef       	ldi	r22, 0xF3	; 243
    9dae:	74 e0       	ldi	r23, 0x04	; 4
    9db0:	22 30       	cpi	r18, 0x02	; 2
    9db2:	41 f0       	breq	.+16     	; 0x9dc4 <convert_mode_text(unsigned char, char*)+0x3a>
    9db4:	6b ee       	ldi	r22, 0xEB	; 235
    9db6:	73 e0       	ldi	r23, 0x03	; 3
    9db8:	24 30       	cpi	r18, 0x04	; 4
    9dba:	21 f0       	breq	.+8      	; 0x9dc4 <convert_mode_text(unsigned char, char*)+0x3a>
    9dbc:	26 30       	cpi	r18, 0x06	; 6
    9dbe:	21 f4       	brne	.+8      	; 0x9dc8 <convert_mode_text(unsigned char, char*)+0x3e>
    9dc0:	68 ef       	ldi	r22, 0xF8	; 248
    9dc2:	74 e0       	ldi	r23, 0x04	; 4
    9dc4:	0c 94 79 dc 	jmp	0x1b8f2	; 0x1b8f2 <strcpy>
    9dc8:	08 95       	ret

00009dca <send_mqtt_ring()>:
_Z14send_mqtt_ringv():
    9dca:	cf 92       	push	r12
    9dcc:	df 92       	push	r13
    9dce:	ff 92       	push	r15
    9dd0:	0f 93       	push	r16
    9dd2:	1f 93       	push	r17
    9dd4:	cf 93       	push	r28
    9dd6:	df 93       	push	r29
    9dd8:	cd b7       	in	r28, 0x3d	; 61
    9dda:	de b7       	in	r29, 0x3e	; 62
    9ddc:	c0 54       	subi	r28, 0x40	; 64
    9dde:	d1 09       	sbc	r29, r1
    9de0:	0f b6       	in	r0, 0x3f	; 63
    9de2:	f8 94       	cli
    9de4:	de bf       	out	0x3e, r29	; 62
    9de6:	0f be       	out	0x3f, r0	; 63
    9de8:	cd bf       	out	0x3d, r28	; 61
    9dea:	8f e4       	ldi	r24, 0x4F	; 79
    9dec:	c8 2e       	mov	r12, r24
    9dee:	8a e0       	ldi	r24, 0x0A	; 10
    9df0:	d8 2e       	mov	r13, r24
    9df2:	f1 2c       	mov	r15, r1
    9df4:	8f 2d       	mov	r24, r15
    9df6:	0e 94 11 8e 	call	0x11c22	; 0x11c22 <thermostat_ring_get_active(unsigned char)>
    9dfa:	8f 3f       	cpi	r24, 0xFF	; 255
    9dfc:	09 f4       	brne	.+2      	; 0x9e00 <send_mqtt_ring()+0x36>
    9dfe:	b8 c0       	rjmp	.+368    	; 0x9f70 <send_mqtt_ring()+0x1a6>
    9e00:	be 01       	movw	r22, r28
    9e02:	6f 5f       	subi	r22, 0xFF	; 255
    9e04:	7f 4f       	sbci	r23, 0xFF	; 255
    9e06:	8f 2d       	mov	r24, r15
    9e08:	0e 94 b6 8d 	call	0x11b6c	; 0x11b6c <thermostat_ring_get_name(unsigned char, char*)>
    9e0c:	8e 01       	movw	r16, r28
    9e0e:	0f 5f       	subi	r16, 0xFF	; 255
    9e10:	1f 4f       	sbci	r17, 0xFF	; 255
    9e12:	23 e7       	ldi	r18, 0x73	; 115
    9e14:	33 e0       	ldi	r19, 0x03	; 3
    9e16:	4f 2d       	mov	r20, r15
    9e18:	65 e6       	ldi	r22, 0x65	; 101
    9e1a:	74 e0       	ldi	r23, 0x04	; 4
    9e1c:	89 e0       	ldi	r24, 0x09	; 9
    9e1e:	9c e0       	ldi	r25, 0x0C	; 12
    9e20:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9e24:	8f 2d       	mov	r24, r15
    9e26:	0e 94 11 8e 	call	0x11c22	; 0x11c22 <thermostat_ring_get_active(unsigned char)>
itoa():
    9e2a:	4a e0       	ldi	r20, 0x0A	; 10
    9e2c:	b8 01       	movw	r22, r16
    9e2e:	90 e0       	ldi	r25, 0x00	; 0
    9e30:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9e34:	24 e9       	ldi	r18, 0x94	; 148
    9e36:	33 e0       	ldi	r19, 0x03	; 3
    9e38:	4f 2d       	mov	r20, r15
    9e3a:	65 e6       	ldi	r22, 0x65	; 101
    9e3c:	74 e0       	ldi	r23, 0x04	; 4
    9e3e:	89 e0       	ldi	r24, 0x09	; 9
    9e40:	9c e0       	ldi	r25, 0x0C	; 12
    9e42:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9e46:	8f 2d       	mov	r24, r15
    9e48:	0e 94 21 8e 	call	0x11c42	; 0x11c42 <thermostat_ring_get_program_id(unsigned char)>
itoa():
    9e4c:	4a e0       	ldi	r20, 0x0A	; 10
    9e4e:	b8 01       	movw	r22, r16
    9e50:	90 e0       	ldi	r25, 0x00	; 0
    9e52:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9e56:	25 e0       	ldi	r18, 0x05	; 5
    9e58:	35 e0       	ldi	r19, 0x05	; 5
    9e5a:	4f 2d       	mov	r20, r15
    9e5c:	65 e6       	ldi	r22, 0x65	; 101
    9e5e:	74 e0       	ldi	r23, 0x04	; 4
    9e60:	89 e0       	ldi	r24, 0x09	; 9
    9e62:	9c e0       	ldi	r25, 0x0C	; 12
    9e64:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9e68:	8f 2d       	mov	r24, r15
    9e6a:	0e 94 31 8e 	call	0x11c62	; 0x11c62 <thermostat_ring_get_mezni(unsigned char)>
itoa():
    9e6e:	4a e0       	ldi	r20, 0x0A	; 10
    9e70:	b8 01       	movw	r22, r16
    9e72:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9e76:	2b ea       	ldi	r18, 0xAB	; 171
    9e78:	33 e0       	ldi	r19, 0x03	; 3
    9e7a:	4f 2d       	mov	r20, r15
    9e7c:	65 e6       	ldi	r22, 0x65	; 101
    9e7e:	74 e0       	ldi	r23, 0x04	; 4
    9e80:	89 e0       	ldi	r24, 0x09	; 9
    9e82:	9c e0       	ldi	r25, 0x0C	; 12
    9e84:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9e88:	8f 2d       	mov	r24, r15
    9e8a:	0e 94 75 8e 	call	0x11cea	; 0x11cea <thermostat_ring_get_mode(unsigned char)>
itoa():
    9e8e:	4a e0       	ldi	r20, 0x0A	; 10
    9e90:	b8 01       	movw	r22, r16
    9e92:	90 e0       	ldi	r25, 0x00	; 0
    9e94:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9e98:	22 e1       	ldi	r18, 0x12	; 18
    9e9a:	35 e0       	ldi	r19, 0x05	; 5
    9e9c:	4f 2d       	mov	r20, r15
    9e9e:	65 e6       	ldi	r22, 0x65	; 101
    9ea0:	74 e0       	ldi	r23, 0x04	; 4
    9ea2:	89 e0       	ldi	r24, 0x09	; 9
    9ea4:	9c e0       	ldi	r25, 0x0C	; 12
    9ea6:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9eaa:	8f 2d       	mov	r24, r15
    9eac:	0e 94 75 8e 	call	0x11cea	; 0x11cea <thermostat_ring_get_mode(unsigned char)>
    9eb0:	b8 01       	movw	r22, r16
    9eb2:	0e 94 c5 4e 	call	0x9d8a	; 0x9d8a <convert_mode_text(unsigned char, char*)>
    9eb6:	2d e0       	ldi	r18, 0x0D	; 13
    9eb8:	35 e0       	ldi	r19, 0x05	; 5
    9eba:	4f 2d       	mov	r20, r15
    9ebc:	65 e6       	ldi	r22, 0x65	; 101
    9ebe:	74 e0       	ldi	r23, 0x04	; 4
    9ec0:	89 e0       	ldi	r24, 0x09	; 9
    9ec2:	9c e0       	ldi	r25, 0x0C	; 12
    9ec4:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9ec8:	8f 2d       	mov	r24, r15
    9eca:	0e 94 b7 8c 	call	0x1196e	; 0x1196e <thermostat_ring_get_state(unsigned char)>
itoa():
    9ece:	4a e0       	ldi	r20, 0x0A	; 10
    9ed0:	b8 01       	movw	r22, r16
    9ed2:	90 e0       	ldi	r25, 0x00	; 0
    9ed4:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9ed8:	27 e1       	ldi	r18, 0x17	; 23
    9eda:	35 e0       	ldi	r19, 0x05	; 5
    9edc:	4f 2d       	mov	r20, r15
    9ede:	65 e6       	ldi	r22, 0x65	; 101
    9ee0:	74 e0       	ldi	r23, 0x04	; 4
    9ee2:	89 e0       	ldi	r24, 0x09	; 9
    9ee4:	9c e0       	ldi	r25, 0x0C	; 12
    9ee6:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9eea:	8f 2d       	mov	r24, r15
    9eec:	0e 94 65 8e 	call	0x11cca	; 0x11cca <thermostat_ring_get_asociate_tds(unsigned char)>
itoa():
    9ef0:	4a e0       	ldi	r20, 0x0A	; 10
    9ef2:	b8 01       	movw	r22, r16
    9ef4:	90 e0       	ldi	r25, 0x00	; 0
    9ef6:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9efa:	2e e1       	ldi	r18, 0x1E	; 30
    9efc:	35 e0       	ldi	r19, 0x05	; 5
    9efe:	4f 2d       	mov	r20, r15
    9f00:	65 e6       	ldi	r22, 0x65	; 101
    9f02:	74 e0       	ldi	r23, 0x04	; 4
    9f04:	89 e0       	ldi	r24, 0x09	; 9
    9f06:	9c e0       	ldi	r25, 0x0C	; 12
    9f08:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9f0c:	8f 2d       	mov	r24, r15
    9f0e:	0e 94 01 8e 	call	0x11c02	; 0x11c02 <thermostat_ring_get_output(unsigned char)>
itoa():
    9f12:	4a e0       	ldi	r20, 0x0A	; 10
    9f14:	b8 01       	movw	r22, r16
    9f16:	90 e0       	ldi	r25, 0x00	; 0
    9f18:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9f1c:	24 e2       	ldi	r18, 0x24	; 36
    9f1e:	35 e0       	ldi	r19, 0x05	; 5
    9f20:	4f 2d       	mov	r20, r15
    9f22:	65 e6       	ldi	r22, 0x65	; 101
    9f24:	74 e0       	ldi	r23, 0x04	; 4
    9f26:	89 e0       	ldi	r24, 0x09	; 9
    9f28:	9c e0       	ldi	r25, 0x0C	; 12
    9f2a:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9f2e:	8f 2d       	mov	r24, r15
    9f30:	0e 94 8f 8e 	call	0x11d1e	; 0x11d1e <thermostat_ring_get_status_data(unsigned char)>
itoa():
    9f34:	4a e0       	ldi	r20, 0x0A	; 10
    9f36:	b8 01       	movw	r22, r16
    9f38:	90 e0       	ldi	r25, 0x00	; 0
    9f3a:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9f3e:	2b e2       	ldi	r18, 0x2B	; 43
    9f40:	35 e0       	ldi	r19, 0x05	; 5
    9f42:	4f 2d       	mov	r20, r15
    9f44:	65 e6       	ldi	r22, 0x65	; 101
    9f46:	74 e0       	ldi	r23, 0x04	; 4
    9f48:	89 e0       	ldi	r24, 0x09	; 9
    9f4a:	9c e0       	ldi	r25, 0x0C	; 12
    9f4c:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9f50:	f6 01       	movw	r30, r12
    9f52:	80 81       	ld	r24, Z
itoa():
    9f54:	4a e0       	ldi	r20, 0x0A	; 10
    9f56:	b8 01       	movw	r22, r16
    9f58:	90 e0       	ldi	r25, 0x00	; 0
    9f5a:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9f5e:	28 e3       	ldi	r18, 0x38	; 56
    9f60:	35 e0       	ldi	r19, 0x05	; 5
    9f62:	4f 2d       	mov	r20, r15
    9f64:	65 e6       	ldi	r22, 0x65	; 101
    9f66:	74 e0       	ldi	r23, 0x04	; 4
    9f68:	89 e0       	ldi	r24, 0x09	; 9
    9f6a:	9c e0       	ldi	r25, 0x0C	; 12
    9f6c:	0e 94 8a 83 	call	0x10714	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9f70:	f3 94       	inc	r15
    9f72:	ff ef       	ldi	r31, 0xFF	; 255
    9f74:	cf 1a       	sub	r12, r31
    9f76:	df 0a       	sbc	r13, r31
    9f78:	85 e0       	ldi	r24, 0x05	; 5
    9f7a:	f8 12       	cpse	r15, r24
    9f7c:	3b cf       	rjmp	.-394    	; 0x9df4 <send_mqtt_ring()+0x2a>
    9f7e:	c0 5c       	subi	r28, 0xC0	; 192
    9f80:	df 4f       	sbci	r29, 0xFF	; 255
    9f82:	0f b6       	in	r0, 0x3f	; 63
    9f84:	f8 94       	cli
    9f86:	de bf       	out	0x3e, r29	; 62
    9f88:	0f be       	out	0x3f, r0	; 63
    9f8a:	cd bf       	out	0x3d, r28	; 61
    9f8c:	df 91       	pop	r29
    9f8e:	cf 91       	pop	r28
    9f90:	1f 91       	pop	r17
    9f92:	0f 91       	pop	r16
    9f94:	ff 90       	pop	r15
    9f96:	df 90       	pop	r13
    9f98:	cf 90       	pop	r12
    9f9a:	08 95       	ret

00009f9c <convert_mode_text_1(unsigned char, char*)>:
_Z19convert_mode_text_1hPc():
    9f9c:	28 2f       	mov	r18, r24
    9f9e:	cb 01       	movw	r24, r22
    9fa0:	61 e4       	ldi	r22, 0x41	; 65
    9fa2:	79 e5       	ldi	r23, 0x59	; 89
    9fa4:	22 23       	and	r18, r18
    9fa6:	61 f0       	breq	.+24     	; 0x9fc0 <convert_mode_text_1(unsigned char, char*)+0x24>
    9fa8:	67 e2       	ldi	r22, 0x27	; 39
    9faa:	79 e5       	ldi	r23, 0x59	; 89
    9fac:	21 30       	cpi	r18, 0x01	; 1
    9fae:	41 f0       	breq	.+16     	; 0x9fc0 <convert_mode_text_1(unsigned char, char*)+0x24>
    9fb0:	69 ed       	ldi	r22, 0xD9	; 217
    9fb2:	78 e5       	ldi	r23, 0x58	; 88
    9fb4:	23 30       	cpi	r18, 0x03	; 3
    9fb6:	21 f0       	breq	.+8      	; 0x9fc0 <convert_mode_text_1(unsigned char, char*)+0x24>
    9fb8:	22 30       	cpi	r18, 0x02	; 2
    9fba:	29 f4       	brne	.+10     	; 0x9fc6 <convert_mode_text_1(unsigned char, char*)+0x2a>
    9fbc:	61 ef       	ldi	r22, 0xF1	; 241
    9fbe:	78 e5       	ldi	r23, 0x58	; 88
    9fc0:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    9fc4:	08 95       	ret
    9fc6:	24 30       	cpi	r18, 0x04	; 4
    9fc8:	21 f4       	brne	.+8      	; 0x9fd2 <convert_mode_text_1(unsigned char, char*)+0x36>
    9fca:	69 ed       	ldi	r22, 0xD9	; 217
    9fcc:	78 e5       	ldi	r23, 0x58	; 88
    9fce:	0c 94 46 dc 	jmp	0x1b88c	; 0x1b88c <strcpy_P>
    9fd2:	66 eb       	ldi	r22, 0xB6	; 182
    9fd4:	78 e5       	ldi	r23, 0x58	; 88
    9fd6:	26 30       	cpi	r18, 0x06	; 6
    9fd8:	d1 f3       	breq	.-12     	; 0x9fce <convert_mode_text_1(unsigned char, char*)+0x32>
    9fda:	28 30       	cpi	r18, 0x08	; 8
    9fdc:	b1 f3       	breq	.-20     	; 0x9fca <convert_mode_text_1(unsigned char, char*)+0x2e>
    9fde:	27 30       	cpi	r18, 0x07	; 7
    9fe0:	19 f4       	brne	.+6      	; 0x9fe8 <convert_mode_text_1(unsigned char, char*)+0x4c>
    9fe2:	6d e0       	ldi	r22, 0x0D	; 13
    9fe4:	79 e5       	ldi	r23, 0x59	; 89
    9fe6:	f3 cf       	rjmp	.-26     	; 0x9fce <convert_mode_text_1(unsigned char, char*)+0x32>
    9fe8:	08 95       	ret

00009fea <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z40button_get_default_ring_term_mode_labelshhhPcS_():
    9fea:	0f 93       	push	r16
    9fec:	1f 93       	push	r17
    9fee:	c9 01       	movw	r24, r18
    9ff0:	68 ea       	ldi	r22, 0xA8	; 168
    9ff2:	79 e5       	ldi	r23, 0x59	; 89
    9ff4:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    9ff8:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    9ffc:	8f 3f       	cpi	r24, 0xFF	; 255
    9ffe:	39 f0       	breq	.+14     	; 0xa00e <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
    a000:	0e 94 75 8e 	call	0x11cea	; 0x11cea <thermostat_ring_get_mode(unsigned char)>
    a004:	b8 01       	movw	r22, r16
    a006:	1f 91       	pop	r17
    a008:	0f 91       	pop	r16
    a00a:	0c 94 ce 4f 	jmp	0x9f9c	; 0x9f9c <convert_mode_text_1(unsigned char, char*)>
    a00e:	65 e2       	ldi	r22, 0x25	; 37
    a010:	76 e5       	ldi	r23, 0x56	; 86
    a012:	c8 01       	movw	r24, r16
    a014:	1f 91       	pop	r17
    a016:	0f 91       	pop	r16
    a018:	0c 94 46 dc 	jmp	0x1b88c	; 0x1b88c <strcpy_P>

0000a01c <thermostat()>:
_Z10thermostatv():
    a01c:	af 92       	push	r10
    a01e:	bf 92       	push	r11
    a020:	cf 92       	push	r12
    a022:	df 92       	push	r13
    a024:	ef 92       	push	r14
    a026:	ff 92       	push	r15
    a028:	0f 93       	push	r16
    a02a:	1f 93       	push	r17
    a02c:	cf 93       	push	r28
    a02e:	df 93       	push	r29
    a030:	cd b7       	in	r28, 0x3d	; 61
    a032:	de b7       	in	r29, 0x3e	; 62
    a034:	69 97       	sbiw	r28, 0x19	; 25
    a036:	0f b6       	in	r0, 0x3f	; 63
    a038:	f8 94       	cli
    a03a:	de bf       	out	0x3e, r29	; 62
    a03c:	0f be       	out	0x3f, r0	; 63
    a03e:	cd bf       	out	0x3d, r28	; 61
    a040:	18 8e       	std	Y+24, r1	; 0x18
    a042:	1f 8a       	std	Y+23, r1	; 0x17
    a044:	19 8e       	std	Y+25, r1	; 0x19
    a046:	10 e0       	ldi	r17, 0x00	; 0
    a048:	58 ec       	ldi	r21, 0xC8	; 200
    a04a:	d5 2e       	mov	r13, r21
    a04c:	6e e1       	ldi	r22, 0x1E	; 30
    a04e:	b6 2e       	mov	r11, r22
    a050:	81 2f       	mov	r24, r17
    a052:	0e 94 65 8e 	call	0x11cca	; 0x11cca <thermostat_ring_get_asociate_tds(unsigned char)>
    a056:	e8 2e       	mov	r14, r24
    a058:	81 2f       	mov	r24, r17
    a05a:	0e 94 75 8e 	call	0x11cea	; 0x11cea <thermostat_ring_get_mode(unsigned char)>
    a05e:	f8 2e       	mov	r15, r24
    a060:	81 2f       	mov	r24, r17
    a062:	0e 94 01 8e 	call	0x11c02	; 0x11c02 <thermostat_ring_get_output(unsigned char)>
    a066:	c8 2e       	mov	r12, r24
    a068:	81 2f       	mov	r24, r17
    a06a:	0e 94 31 8e 	call	0x11c62	; 0x11c62 <thermostat_ring_get_mezni(unsigned char)>
    a06e:	98 8f       	std	Y+24, r25	; 0x18
    a070:	8f 8b       	std	Y+23, r24	; 0x17
    a072:	82 e0       	ldi	r24, 0x02	; 2
    a074:	f8 12       	cpse	r15, r24
    a076:	9b c0       	rjmp	.+310    	; 0xa1ae <thermostat()+0x192>
    a078:	81 2f       	mov	r24, r17
    a07a:	0e 94 21 8e 	call	0x11c42	; 0x11c42 <thermostat_ring_get_program_id(unsigned char)>
    a07e:	a8 2e       	mov	r10, r24
    a080:	8e e4       	ldi	r24, 0x4E	; 78
    a082:	9e e0       	ldi	r25, 0x0E	; 14
    a084:	0e 94 ee c6 	call	0x18ddc	; 0x18ddc <DateTime::dayOfTheWeek() const>
    a088:	08 2f       	mov	r16, r24
    a08a:	20 91 52 0e 	lds	r18, 0x0E52	; 0x800e52 <now+0x4>
    a08e:	40 91 51 0e 	lds	r20, 0x0E51	; 0x800e51 <now+0x3>
    a092:	be 01       	movw	r22, r28
    a094:	69 5e       	subi	r22, 0xE9	; 233
    a096:	7f 4f       	sbci	r23, 0xFF	; 255
    a098:	8a 2d       	mov	r24, r10
    a09a:	0e 94 d0 91 	call	0x123a0	; 0x123a0 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)>
    a09e:	8e 3f       	cpi	r24, 0xFE	; 254
    a0a0:	09 f4       	brne	.+2      	; 0xa0a4 <thermostat()+0x88>
    a0a2:	69 c0       	rjmp	.+210    	; 0xa176 <thermostat()+0x15a>
    a0a4:	08 f0       	brcs	.+2      	; 0xa0a8 <thermostat()+0x8c>
    a0a6:	5f c0       	rjmp	.+190    	; 0xa166 <thermostat()+0x14a>
    a0a8:	8d 3f       	cpi	r24, 0xFD	; 253
    a0aa:	09 f4       	brne	.+2      	; 0xa0ae <thermostat()+0x92>
    a0ac:	6e c0       	rjmp	.+220    	; 0xa18a <thermostat()+0x16e>
    a0ae:	85 e0       	ldi	r24, 0x05	; 5
    a0b0:	8e 15       	cp	r24, r14
    a0b2:	e8 f1       	brcs	.+122    	; 0xa12e <thermostat()+0x112>
    a0b4:	be 01       	movw	r22, r28
    a0b6:	6f 5f       	subi	r22, 0xFF	; 255
    a0b8:	7f 4f       	sbci	r23, 0xFF	; 255
    a0ba:	8e 2d       	mov	r24, r14
    a0bc:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
    a0c0:	81 30       	cpi	r24, 0x01	; 1
    a0c2:	a9 f5       	brne	.+106    	; 0xa12e <thermostat()+0x112>
    a0c4:	89 81       	ldd	r24, Y+1	; 0x01
    a0c6:	81 30       	cpi	r24, 0x01	; 1
    a0c8:	09 f0       	breq	.+2      	; 0xa0cc <thermostat()+0xb0>
    a0ca:	7e c0       	rjmp	.+252    	; 0xa1c8 <thermostat()+0x1ac>
    a0cc:	be 9c       	mul	r11, r14
    a0ce:	f0 01       	movw	r30, r0
    a0d0:	11 24       	eor	r1, r1
    a0d2:	eb 56       	subi	r30, 0x6B	; 107
    a0d4:	f0 4f       	sbci	r31, 0xF0	; 240
    a0d6:	83 8d       	ldd	r24, Z+27	; 0x1b
    a0d8:	81 30       	cpi	r24, 0x01	; 1
    a0da:	09 f0       	breq	.+2      	; 0xa0de <thermostat()+0xc2>
    a0dc:	75 c0       	rjmp	.+234    	; 0xa1c8 <thermostat()+0x1ac>
    a0de:	65 81       	ldd	r22, Z+5	; 0x05
    a0e0:	76 81       	ldd	r23, Z+6	; 0x06
    a0e2:	07 2e       	mov	r0, r23
    a0e4:	00 0c       	add	r0, r0
    a0e6:	88 0b       	sbc	r24, r24
    a0e8:	99 0b       	sbc	r25, r25
    a0ea:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
    a0ee:	20 e0       	ldi	r18, 0x00	; 0
    a0f0:	30 e0       	ldi	r19, 0x00	; 0
    a0f2:	48 ec       	ldi	r20, 0xC8	; 200
    a0f4:	52 e4       	ldi	r21, 0x42	; 66
    a0f6:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
    a0fa:	ab 01       	movw	r20, r22
    a0fc:	bc 01       	movw	r22, r24
    a0fe:	81 2f       	mov	r24, r17
    a100:	0e 94 76 8d 	call	0x11aec	; 0x11aec <thermostat_pid_input(unsigned char, double)>
    a104:	6f 89       	ldd	r22, Y+23	; 0x17
    a106:	78 8d       	ldd	r23, Y+24	; 0x18
    a108:	07 2e       	mov	r0, r23
    a10a:	00 0c       	add	r0, r0
    a10c:	88 0b       	sbc	r24, r24
    a10e:	99 0b       	sbc	r25, r25
    a110:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
    a114:	ab 01       	movw	r20, r22
    a116:	bc 01       	movw	r22, r24
    a118:	81 2f       	mov	r24, r17
    a11a:	0e 94 81 8d 	call	0x11b02	; 0x11b02 <thermostat_pid_setpoint(unsigned char, double)>
    a11e:	81 2f       	mov	r24, r17
    a120:	0e 94 8c 8d 	call	0x11b18	; 0x11b18 <thermostat_pid_output(unsigned char)>
    a124:	d8 2e       	mov	r13, r24
    a126:	68 2f       	mov	r22, r24
    a128:	81 2f       	mov	r24, r17
    a12a:	0e 94 c3 8c 	call	0x11986	; 0x11986 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a12e:	0a ef       	ldi	r16, 0xFA	; 250
    a130:	0e 0d       	add	r16, r14
    a132:	0a 30       	cpi	r16, 0x0A	; 10
    a134:	08 f0       	brcs	.+2      	; 0xa138 <thermostat()+0x11c>
    a136:	7f c0       	rjmp	.+254    	; 0xa236 <thermostat()+0x21a>
    a138:	be 01       	movw	r22, r28
    a13a:	67 5e       	subi	r22, 0xE7	; 231
    a13c:	7f 4f       	sbci	r23, 0xFF	; 255
    a13e:	80 2f       	mov	r24, r16
    a140:	0e 94 2a 43 	call	0x8654	; 0x8654 <remote_tds_get_active(unsigned char, unsigned char*)>
    a144:	89 8d       	ldd	r24, Y+25	; 0x19
    a146:	81 30       	cpi	r24, 0x01	; 1
    a148:	09 f4       	brne	.+2      	; 0xa14c <thermostat()+0x130>
    a14a:	46 c0       	rjmp	.+140    	; 0xa1d8 <thermostat()+0x1bc>
    a14c:	60 e0       	ldi	r22, 0x00	; 0
    a14e:	81 2f       	mov	r24, r17
    a150:	0e 94 c3 8c 	call	0x11986	; 0x11986 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a154:	9e ef       	ldi	r25, 0xFE	; 254
    a156:	f9 2e       	mov	r15, r25
    a158:	d1 2c       	mov	r13, r1
    a15a:	4d 2d       	mov	r20, r13
    a15c:	6f 2d       	mov	r22, r15
    a15e:	8c 2d       	mov	r24, r12
    a160:	0e 94 11 4c 	call	0x9822	; 0x9822 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)>
    a164:	72 c0       	rjmp	.+228    	; 0xa24a <thermostat()+0x22e>
    a166:	60 e0       	ldi	r22, 0x00	; 0
    a168:	81 2f       	mov	r24, r17
    a16a:	0e 94 bd 8c 	call	0x1197a	; 0x1197a <thermostat_ring_set_state(unsigned char, unsigned char)>
    a16e:	60 e0       	ldi	r22, 0x00	; 0
    a170:	81 2f       	mov	r24, r17
    a172:	0e 94 c3 8c 	call	0x11986	; 0x11986 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a176:	60 e0       	ldi	r22, 0x00	; 0
    a178:	81 2f       	mov	r24, r17
    a17a:	0e 94 bd 8c 	call	0x1197a	; 0x1197a <thermostat_ring_set_state(unsigned char, unsigned char)>
    a17e:	60 e0       	ldi	r22, 0x00	; 0
    a180:	81 2f       	mov	r24, r17
    a182:	0e 94 c3 8c 	call	0x11986	; 0x11986 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a186:	f1 2c       	mov	r15, r1
    a188:	92 cf       	rjmp	.-220    	; 0xa0ae <thermostat()+0x92>
    a18a:	61 e0       	ldi	r22, 0x01	; 1
    a18c:	81 2f       	mov	r24, r17
    a18e:	0e 94 bd 8c 	call	0x1197a	; 0x1197a <thermostat_ring_set_state(unsigned char, unsigned char)>
    a192:	8a 2d       	mov	r24, r10
    a194:	0e 94 33 90 	call	0x12066	; 0x12066 <thermostat_program_get_active(unsigned char)>
    a198:	81 30       	cpi	r24, 0x01	; 1
    a19a:	61 f0       	breq	.+24     	; 0xa1b4 <thermostat()+0x198>
    a19c:	82 30       	cpi	r24, 0x02	; 2
    a19e:	09 f0       	breq	.+2      	; 0xa1a2 <thermostat()+0x186>
    a1a0:	87 c0       	rjmp	.+270    	; 0xa2b0 <thermostat()+0x294>
    a1a2:	81 2f       	mov	r24, r17
    a1a4:	0e 94 5b 8d 	call	0x11ab6	; 0x11ab6 <thermostat_pid_setdirection_reverse(unsigned char)>
    a1a8:	45 e0       	ldi	r20, 0x05	; 5
    a1aa:	f4 2e       	mov	r15, r20
    a1ac:	80 cf       	rjmp	.-256    	; 0xa0ae <thermostat()+0x92>
    a1ae:	83 e0       	ldi	r24, 0x03	; 3
    a1b0:	f8 12       	cpse	r15, r24
    a1b2:	06 c0       	rjmp	.+12     	; 0xa1c0 <thermostat()+0x1a4>
    a1b4:	81 2f       	mov	r24, r17
    a1b6:	0e 94 4b 8d 	call	0x11a96	; 0x11a96 <thermostat_pid_setdirection_direct(unsigned char)>
    a1ba:	33 e0       	ldi	r19, 0x03	; 3
    a1bc:	f3 2e       	mov	r15, r19
    a1be:	77 cf       	rjmp	.-274    	; 0xa0ae <thermostat()+0x92>
    a1c0:	85 e0       	ldi	r24, 0x05	; 5
    a1c2:	f8 12       	cpse	r15, r24
    a1c4:	74 cf       	rjmp	.-280    	; 0xa0ae <thermostat()+0x92>
    a1c6:	ed cf       	rjmp	.-38     	; 0xa1a2 <thermostat()+0x186>
    a1c8:	60 e0       	ldi	r22, 0x00	; 0
    a1ca:	81 2f       	mov	r24, r17
    a1cc:	0e 94 c3 8c 	call	0x11986	; 0x11986 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a1d0:	d1 2c       	mov	r13, r1
    a1d2:	2e ef       	ldi	r18, 0xFE	; 254
    a1d4:	f2 2e       	mov	r15, r18
    a1d6:	ab cf       	rjmp	.-170    	; 0xa12e <thermostat()+0x112>
    a1d8:	80 2f       	mov	r24, r16
    a1da:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <remote_tds_get_last_update(unsigned char)>
    a1de:	84 3b       	cpi	r24, 0xB4	; 180
    a1e0:	08 f0       	brcs	.+2      	; 0xa1e4 <thermostat()+0x1c8>
    a1e2:	b4 cf       	rjmp	.-152    	; 0xa14c <thermostat()+0x130>
    a1e4:	80 2f       	mov	r24, r16
    a1e6:	0e 94 c1 45 	call	0x8b82	; 0x8b82 <remote_tds_get_data(unsigned char)>
    a1ea:	bc 01       	movw	r22, r24
    a1ec:	99 0f       	add	r25, r25
    a1ee:	88 0b       	sbc	r24, r24
    a1f0:	99 0b       	sbc	r25, r25
    a1f2:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
    a1f6:	20 e0       	ldi	r18, 0x00	; 0
    a1f8:	30 e0       	ldi	r19, 0x00	; 0
    a1fa:	4a e7       	ldi	r20, 0x7A	; 122
    a1fc:	54 e4       	ldi	r21, 0x44	; 68
    a1fe:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
    a202:	ab 01       	movw	r20, r22
    a204:	bc 01       	movw	r22, r24
    a206:	81 2f       	mov	r24, r17
    a208:	0e 94 76 8d 	call	0x11aec	; 0x11aec <thermostat_pid_input(unsigned char, double)>
    a20c:	6f 89       	ldd	r22, Y+23	; 0x17
    a20e:	78 8d       	ldd	r23, Y+24	; 0x18
    a210:	07 2e       	mov	r0, r23
    a212:	00 0c       	add	r0, r0
    a214:	88 0b       	sbc	r24, r24
    a216:	99 0b       	sbc	r25, r25
    a218:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
    a21c:	ab 01       	movw	r20, r22
    a21e:	bc 01       	movw	r22, r24
    a220:	81 2f       	mov	r24, r17
    a222:	0e 94 81 8d 	call	0x11b02	; 0x11b02 <thermostat_pid_setpoint(unsigned char, double)>
    a226:	81 2f       	mov	r24, r17
    a228:	0e 94 8c 8d 	call	0x11b18	; 0x11b18 <thermostat_pid_output(unsigned char)>
    a22c:	d8 2e       	mov	r13, r24
    a22e:	68 2f       	mov	r22, r24
    a230:	81 2f       	mov	r24, r17
    a232:	0e 94 c3 8c 	call	0x11986	; 0x11986 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a236:	f1 10       	cpse	r15, r1
    a238:	1d c0       	rjmp	.+58     	; 0xa274 <thermostat()+0x258>
    a23a:	6e ef       	ldi	r22, 0xFE	; 254
    a23c:	8c 2d       	mov	r24, r12
    a23e:	0e 94 bd 4b 	call	0x977a	; 0x977a <mqtt_publis_output(unsigned char, unsigned char)>
    a242:	60 e0       	ldi	r22, 0x00	; 0
    a244:	81 2f       	mov	r24, r17
    a246:	0e 94 c3 8c 	call	0x11986	; 0x11986 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a24a:	1f 5f       	subi	r17, 0xFF	; 255
    a24c:	15 30       	cpi	r17, 0x05	; 5
    a24e:	09 f0       	breq	.+2      	; 0xa252 <thermostat()+0x236>
    a250:	ff ce       	rjmp	.-514    	; 0xa050 <thermostat()+0x34>
    a252:	69 96       	adiw	r28, 0x19	; 25
    a254:	0f b6       	in	r0, 0x3f	; 63
    a256:	f8 94       	cli
    a258:	de bf       	out	0x3e, r29	; 62
    a25a:	0f be       	out	0x3f, r0	; 63
    a25c:	cd bf       	out	0x3d, r28	; 61
    a25e:	df 91       	pop	r29
    a260:	cf 91       	pop	r28
    a262:	1f 91       	pop	r17
    a264:	0f 91       	pop	r16
    a266:	ff 90       	pop	r15
    a268:	ef 90       	pop	r14
    a26a:	df 90       	pop	r13
    a26c:	cf 90       	pop	r12
    a26e:	bf 90       	pop	r11
    a270:	af 90       	pop	r10
    a272:	08 95       	ret
    a274:	81 e0       	ldi	r24, 0x01	; 1
    a276:	6a e0       	ldi	r22, 0x0A	; 10
    a278:	f8 16       	cp	r15, r24
    a27a:	21 f0       	breq	.+8      	; 0xa284 <thermostat()+0x268>
    a27c:	84 e0       	ldi	r24, 0x04	; 4
    a27e:	f8 12       	cpse	r15, r24
    a280:	06 c0       	rjmp	.+12     	; 0xa28e <thermostat()+0x272>
    a282:	6b e0       	ldi	r22, 0x0B	; 11
    a284:	8c 2d       	mov	r24, r12
    a286:	0e 94 bd 4b 	call	0x977a	; 0x977a <mqtt_publis_output(unsigned char, unsigned char)>
    a28a:	6f ef       	ldi	r22, 0xFF	; 255
    a28c:	db cf       	rjmp	.-74     	; 0xa244 <thermostat()+0x228>
    a28e:	83 e0       	ldi	r24, 0x03	; 3
    a290:	f8 16       	cp	r15, r24
    a292:	09 f4       	brne	.+2      	; 0xa296 <thermostat()+0x27a>
    a294:	62 cf       	rjmp	.-316    	; 0xa15a <thermostat()+0x13e>
    a296:	85 e0       	ldi	r24, 0x05	; 5
    a298:	f8 16       	cp	r15, r24
    a29a:	09 f4       	brne	.+2      	; 0xa29e <thermostat()+0x282>
    a29c:	5e cf       	rjmp	.-324    	; 0xa15a <thermostat()+0x13e>
    a29e:	86 e0       	ldi	r24, 0x06	; 6
    a2a0:	f8 16       	cp	r15, r24
    a2a2:	09 f4       	brne	.+2      	; 0xa2a6 <thermostat()+0x28a>
    a2a4:	5a cf       	rjmp	.-332    	; 0xa15a <thermostat()+0x13e>
    a2a6:	8e ef       	ldi	r24, 0xFE	; 254
    a2a8:	f8 16       	cp	r15, r24
    a2aa:	09 f4       	brne	.+2      	; 0xa2ae <thermostat()+0x292>
    a2ac:	56 cf       	rjmp	.-340    	; 0xa15a <thermostat()+0x13e>
    a2ae:	cd cf       	rjmp	.-102    	; 0xa24a <thermostat()+0x22e>
    a2b0:	83 30       	cpi	r24, 0x03	; 3
    a2b2:	09 f0       	breq	.+2      	; 0xa2b6 <thermostat()+0x29a>
    a2b4:	fc ce       	rjmp	.-520    	; 0xa0ae <thermostat()+0x92>
    a2b6:	86 e0       	ldi	r24, 0x06	; 6
    a2b8:	f8 2e       	mov	r15, r24
    a2ba:	f9 ce       	rjmp	.-526    	; 0xa0ae <thermostat()+0x92>

0000a2bc <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
    a2bc:	cf 93       	push	r28
    a2be:	df 93       	push	r29
    a2c0:	fc 01       	movw	r30, r24
    a2c2:	eb 01       	movw	r28, r22
    a2c4:	22 23       	and	r18, r18
    a2c6:	89 f1       	breq	.+98     	; 0xa32a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x6e>
    a2c8:	88 81       	ld	r24, Y
    a2ca:	80 93 18 0a 	sts	0x0A18, r24	; 0x800a18 <menu_slider_data_max>
    a2ce:	80 81       	ld	r24, Z
    a2d0:	80 93 17 0a 	sts	0x0A17, r24	; 0x800a17 <menu_slider_data_min>
    a2d4:	20 93 16 0a 	sts	0x0A16, r18	; 0x800a16 <menu_slider_data_max_element>
    a2d8:	a4 2f       	mov	r26, r20
    a2da:	b0 e0       	ldi	r27, 0x00	; 0
    a2dc:	a7 5e       	subi	r26, 0xE7	; 231
    a2de:	b5 4f       	sbci	r27, 0xF5	; 245
    a2e0:	ac 91       	ld	r26, X
    a2e2:	a0 83       	st	Z, r26
    a2e4:	80 91 18 0a 	lds	r24, 0x0A18	; 0x800a18 <menu_slider_data_max>
    a2e8:	48 2f       	mov	r20, r24
    a2ea:	50 e0       	ldi	r21, 0x00	; 0
    a2ec:	a2 0f       	add	r26, r18
    a2ee:	bb 27       	eor	r27, r27
    a2f0:	bb 1f       	adc	r27, r27
    a2f2:	4a 17       	cp	r20, r26
    a2f4:	5b 07       	cpc	r21, r27
    a2f6:	5c f4       	brge	.+22     	; 0xa30e <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x52>
    a2f8:	90 91 17 0a 	lds	r25, 0x0A17	; 0x800a17 <menu_slider_data_min>
    a2fc:	49 1b       	sub	r20, r25
    a2fe:	51 09       	sbc	r21, r1
    a300:	90 91 16 0a 	lds	r25, 0x0A16	; 0x800a16 <menu_slider_data_max_element>
    a304:	94 17       	cp	r25, r20
    a306:	15 06       	cpc	r1, r21
    a308:	14 f4       	brge	.+4      	; 0xa30e <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x52>
    a30a:	82 1b       	sub	r24, r18
    a30c:	80 83       	st	Z, r24
    a30e:	80 91 18 0a 	lds	r24, 0x0A18	; 0x800a18 <menu_slider_data_max>
    a312:	90 81       	ld	r25, Z
    a314:	89 17       	cp	r24, r25
    a316:	08 f4       	brcc	.+2      	; 0xa31a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x5e>
    a318:	80 83       	st	Z, r24
    a31a:	80 81       	ld	r24, Z
    a31c:	82 0f       	add	r24, r18
    a31e:	88 83       	st	Y, r24
    a320:	80 91 18 0a 	lds	r24, 0x0A18	; 0x800a18 <menu_slider_data_max>
    a324:	28 17       	cp	r18, r24
    a326:	08 f0       	brcs	.+2      	; 0xa32a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x6e>
    a328:	88 83       	st	Y, r24
    a32a:	df 91       	pop	r29
    a32c:	cf 91       	pop	r28
    a32e:	08 95       	ret

0000a330 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
    a330:	2f 92       	push	r2
    a332:	3f 92       	push	r3
    a334:	4f 92       	push	r4
    a336:	5f 92       	push	r5
    a338:	6f 92       	push	r6
    a33a:	7f 92       	push	r7
    a33c:	8f 92       	push	r8
    a33e:	9f 92       	push	r9
    a340:	af 92       	push	r10
    a342:	bf 92       	push	r11
    a344:	cf 92       	push	r12
    a346:	df 92       	push	r13
    a348:	ef 92       	push	r14
    a34a:	ff 92       	push	r15
    a34c:	0f 93       	push	r16
    a34e:	1f 93       	push	r17
    a350:	cf 93       	push	r28
    a352:	df 93       	push	r29
    a354:	00 d0       	rcall	.+0      	; 0xa356 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    a356:	00 d0       	rcall	.+0      	; 0xa358 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x28>
    a358:	1f 92       	push	r1
    a35a:	cd b7       	in	r28, 0x3d	; 61
    a35c:	de b7       	in	r29, 0x3e	; 62
    a35e:	1c 01       	movw	r2, r24
    a360:	2b 01       	movw	r4, r22
    a362:	3a 01       	movw	r6, r20
    a364:	3a 83       	std	Y+2, r19	; 0x02
    a366:	29 83       	std	Y+1, r18	; 0x01
    a368:	0b 83       	std	Y+3, r16	; 0x03
    a36a:	9e 2c       	mov	r9, r14
    a36c:	dd 82       	std	Y+5, r13	; 0x05
    a36e:	cc 82       	std	Y+4, r12	; 0x04
    a370:	bf 82       	std	Y+7, r11	; 0x07
    a372:	ae 82       	std	Y+6, r10	; 0x06
    a374:	70 e0       	ldi	r23, 0x00	; 0
    a376:	60 e0       	ldi	r22, 0x00	; 0
    a378:	85 ea       	ldi	r24, 0xA5	; 165
    a37a:	9b e0       	ldi	r25, 0x0B	; 11
    a37c:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a380:	f1 2c       	mov	r15, r1
    a382:	e1 2c       	mov	r14, r1
    a384:	a9 80       	ldd	r10, Y+1	; 0x01
    a386:	ba 80       	ldd	r11, Y+2	; 0x02
    a388:	a4 0c       	add	r10, r4
    a38a:	b5 1c       	adc	r11, r5
    a38c:	61 01       	movw	r12, r2
    a38e:	c6 0c       	add	r12, r6
    a390:	d7 1c       	adc	r13, r7
    a392:	85 01       	movw	r16, r10
    a394:	0e 19       	sub	r16, r14
    a396:	1f 09       	sbc	r17, r15
    a398:	96 01       	movw	r18, r12
    a39a:	2e 19       	sub	r18, r14
    a39c:	3f 09       	sbc	r19, r15
    a39e:	a7 01       	movw	r20, r14
    a3a0:	44 0d       	add	r20, r4
    a3a2:	55 1d       	adc	r21, r5
    a3a4:	b7 01       	movw	r22, r14
    a3a6:	62 0d       	add	r22, r2
    a3a8:	73 1d       	adc	r23, r3
    a3aa:	85 ea       	ldi	r24, 0xA5	; 165
    a3ac:	9b e0       	ldi	r25, 0x0B	; 11
    a3ae:	0e 94 4b 93 	call	0x12696	; 0x12696 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    a3b2:	2f ef       	ldi	r18, 0xFF	; 255
    a3b4:	e2 1a       	sub	r14, r18
    a3b6:	f2 0a       	sbc	r15, r18
    a3b8:	43 e0       	ldi	r20, 0x03	; 3
    a3ba:	e4 16       	cp	r14, r20
    a3bc:	f1 04       	cpc	r15, r1
    a3be:	49 f7       	brne	.-46     	; 0xa392 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x62>
    a3c0:	09 81       	ldd	r16, Y+1	; 0x01
    a3c2:	1a 81       	ldd	r17, Y+2	; 0x02
    a3c4:	03 50       	subi	r16, 0x03	; 3
    a3c6:	11 09       	sbc	r17, r1
    a3c8:	73 01       	movw	r14, r6
    a3ca:	53 e0       	ldi	r21, 0x03	; 3
    a3cc:	e5 1a       	sub	r14, r21
    a3ce:	f1 08       	sbc	r15, r1
    a3d0:	81 e0       	ldi	r24, 0x01	; 1
    a3d2:	88 12       	cpse	r8, r24
    a3d4:	15 c0       	rjmp	.+42     	; 0xa400 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xd0>
    a3d6:	6f ef       	ldi	r22, 0xFF	; 255
    a3d8:	7f ef       	ldi	r23, 0xFF	; 255
    a3da:	85 ea       	ldi	r24, 0xA5	; 165
    a3dc:	9b e0       	ldi	r25, 0x0B	; 11
    a3de:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a3e2:	04 0d       	add	r16, r4
    a3e4:	15 1d       	adc	r17, r5
    a3e6:	91 01       	movw	r18, r2
    a3e8:	2e 0d       	add	r18, r14
    a3ea:	3f 1d       	adc	r19, r15
    a3ec:	a2 01       	movw	r20, r4
    a3ee:	4d 5f       	subi	r20, 0xFD	; 253
    a3f0:	5f 4f       	sbci	r21, 0xFF	; 255
    a3f2:	b1 01       	movw	r22, r2
    a3f4:	6d 5f       	subi	r22, 0xFD	; 253
    a3f6:	7f 4f       	sbci	r23, 0xFF	; 255
    a3f8:	85 ea       	ldi	r24, 0xA5	; 165
    a3fa:	9b e0       	ldi	r25, 0x0B	; 11
    a3fc:	0e 94 c4 92 	call	0x12588	; 0x12588 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    a400:	ec 81       	ldd	r30, Y+4	; 0x04
    a402:	fd 81       	ldd	r31, Y+5	; 0x05
    a404:	80 81       	ld	r24, Z
    a406:	60 e0       	ldi	r22, 0x00	; 0
    a408:	b1 2c       	mov	r11, r1
    a40a:	a1 2c       	mov	r10, r1
    a40c:	88 23       	and	r24, r24
    a40e:	a1 f1       	breq	.+104    	; 0xa478 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x148>
    a410:	01 90       	ld	r0, Z+
    a412:	00 20       	and	r0, r0
    a414:	e9 f7       	brne	.-6      	; 0xa410 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xe0>
    a416:	31 97       	sbiw	r30, 0x01	; 1
    a418:	4c 81       	ldd	r20, Y+4	; 0x04
    a41a:	5d 81       	ldd	r21, Y+5	; 0x05
    a41c:	e4 1b       	sub	r30, r20
    a41e:	f5 0b       	sbc	r31, r21
_Z22show_string_size_highth():
    a420:	8b 81       	ldd	r24, Y+3	; 0x03
    a422:	88 0f       	add	r24, r24
    a424:	5b 81       	ldd	r21, Y+3	; 0x03
    a426:	85 0f       	add	r24, r21
    a428:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
    a42a:	a9 80       	ldd	r10, Y+1	; 0x01
    a42c:	ba 80       	ldd	r11, Y+2	; 0x02
    a42e:	a8 1a       	sub	r10, r24
    a430:	b1 08       	sbc	r11, r1
    a432:	b6 94       	lsr	r11
    a434:	a7 94       	ror	r10
    a436:	a2 01       	movw	r20, r4
    a438:	41 50       	subi	r20, 0x01	; 1
    a43a:	51 09       	sbc	r21, r1
    a43c:	4a 0d       	add	r20, r10
    a43e:	5b 1d       	adc	r21, r11
_Z22show_string_size_widthhh():
    a440:	86 e0       	ldi	r24, 0x06	; 6
    a442:	e8 9f       	mul	r30, r24
    a444:	f0 01       	movw	r30, r0
    a446:	11 24       	eor	r1, r1
    a448:	2b 81       	ldd	r18, Y+3	; 0x03
    a44a:	2e 9f       	mul	r18, r30
    a44c:	c0 01       	movw	r24, r0
    a44e:	2f 9f       	mul	r18, r31
    a450:	90 0d       	add	r25, r0
    a452:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
    a454:	b3 01       	movw	r22, r6
    a456:	68 1b       	sub	r22, r24
    a458:	79 0b       	sbc	r23, r25
    a45a:	76 95       	lsr	r23
    a45c:	67 95       	ror	r22
    a45e:	62 0d       	add	r22, r2
    a460:	73 1d       	adc	r23, r3
    a462:	c1 2c       	mov	r12, r1
    a464:	ee 24       	eor	r14, r14
    a466:	ea 94       	dec	r14
    a468:	fe 2c       	mov	r15, r14
    a46a:	10 e0       	ldi	r17, 0x00	; 0
    a46c:	00 e0       	ldi	r16, 0x00	; 0
    a46e:	8c 81       	ldd	r24, Y+4	; 0x04
    a470:	9d 81       	ldd	r25, Y+5	; 0x05
    a472:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a476:	62 e0       	ldi	r22, 0x02	; 2
    a478:	ee 81       	ldd	r30, Y+6	; 0x06
    a47a:	ff 81       	ldd	r31, Y+7	; 0x07
    a47c:	80 81       	ld	r24, Z
    a47e:	88 23       	and	r24, r24
    a480:	d1 f1       	breq	.+116    	; 0xa4f6 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x1c6>
    a482:	01 90       	ld	r0, Z+
    a484:	00 20       	and	r0, r0
    a486:	e9 f7       	brne	.-6      	; 0xa482 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x152>
    a488:	9f 01       	movw	r18, r30
    a48a:	21 50       	subi	r18, 0x01	; 1
    a48c:	31 09       	sbc	r19, r1
    a48e:	4e 81       	ldd	r20, Y+6	; 0x06
    a490:	5f 81       	ldd	r21, Y+7	; 0x07
    a492:	24 1b       	sub	r18, r20
    a494:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    a496:	89 2d       	mov	r24, r9
    a498:	88 0f       	add	r24, r24
    a49a:	89 0d       	add	r24, r9
    a49c:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
    a49e:	e9 81       	ldd	r30, Y+1	; 0x01
    a4a0:	fa 81       	ldd	r31, Y+2	; 0x02
    a4a2:	e8 1b       	sub	r30, r24
    a4a4:	f1 09       	sbc	r31, r1
    a4a6:	cf 01       	movw	r24, r30
    a4a8:	6e 5f       	subi	r22, 0xFE	; 254
    a4aa:	70 e0       	ldi	r23, 0x00	; 0
    a4ac:	0e 94 59 d8 	call	0x1b0b2	; 0x1b0b2 <__udivmodhi4>
    a4b0:	f1 e0       	ldi	r31, 0x01	; 1
    a4b2:	4f 1a       	sub	r4, r31
    a4b4:	51 08       	sbc	r5, r1
    a4b6:	a4 0c       	add	r10, r4
    a4b8:	b5 1c       	adc	r11, r5
    a4ba:	ab 01       	movw	r20, r22
    a4bc:	4a 0d       	add	r20, r10
    a4be:	5b 1d       	adc	r21, r11
_Z22show_string_size_widthhh():
    a4c0:	86 e0       	ldi	r24, 0x06	; 6
    a4c2:	28 9f       	mul	r18, r24
    a4c4:	90 01       	movw	r18, r0
    a4c6:	11 24       	eor	r1, r1
    a4c8:	92 9e       	mul	r9, r18
    a4ca:	c0 01       	movw	r24, r0
    a4cc:	93 9e       	mul	r9, r19
    a4ce:	90 0d       	add	r25, r0
    a4d0:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
    a4d2:	b3 01       	movw	r22, r6
    a4d4:	68 1b       	sub	r22, r24
    a4d6:	79 0b       	sbc	r23, r25
    a4d8:	76 95       	lsr	r23
    a4da:	67 95       	ror	r22
    a4dc:	62 0d       	add	r22, r2
    a4de:	73 1d       	adc	r23, r3
    a4e0:	c1 2c       	mov	r12, r1
    a4e2:	ee 24       	eor	r14, r14
    a4e4:	ea 94       	dec	r14
    a4e6:	fe 2c       	mov	r15, r14
    a4e8:	10 e0       	ldi	r17, 0x00	; 0
    a4ea:	00 e0       	ldi	r16, 0x00	; 0
    a4ec:	29 2d       	mov	r18, r9
    a4ee:	8e 81       	ldd	r24, Y+6	; 0x06
    a4f0:	9f 81       	ldd	r25, Y+7	; 0x07
    a4f2:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a4f6:	27 96       	adiw	r28, 0x07	; 7
    a4f8:	0f b6       	in	r0, 0x3f	; 63
    a4fa:	f8 94       	cli
    a4fc:	de bf       	out	0x3e, r29	; 62
    a4fe:	0f be       	out	0x3f, r0	; 63
    a500:	cd bf       	out	0x3d, r28	; 61
    a502:	df 91       	pop	r29
    a504:	cf 91       	pop	r28
    a506:	1f 91       	pop	r17
    a508:	0f 91       	pop	r16
    a50a:	ff 90       	pop	r15
    a50c:	ef 90       	pop	r14
    a50e:	df 90       	pop	r13
    a510:	cf 90       	pop	r12
    a512:	bf 90       	pop	r11
    a514:	af 90       	pop	r10
    a516:	9f 90       	pop	r9
    a518:	8f 90       	pop	r8
    a51a:	7f 90       	pop	r7
    a51c:	6f 90       	pop	r6
    a51e:	5f 90       	pop	r5
    a520:	4f 90       	pop	r4
    a522:	3f 90       	pop	r3
    a524:	2f 90       	pop	r2
    a526:	08 95       	ret

0000a528 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
    a528:	2f 92       	push	r2
    a52a:	3f 92       	push	r3
    a52c:	4f 92       	push	r4
    a52e:	5f 92       	push	r5
    a530:	6f 92       	push	r6
    a532:	7f 92       	push	r7
    a534:	8f 92       	push	r8
    a536:	9f 92       	push	r9
    a538:	af 92       	push	r10
    a53a:	bf 92       	push	r11
    a53c:	cf 92       	push	r12
    a53e:	df 92       	push	r13
    a540:	ef 92       	push	r14
    a542:	ff 92       	push	r15
    a544:	0f 93       	push	r16
    a546:	1f 93       	push	r17
    a548:	cf 93       	push	r28
    a54a:	df 93       	push	r29
    a54c:	00 d0       	rcall	.+0      	; 0xa54e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
    a54e:	1f 92       	push	r1
    a550:	1f 92       	push	r1
    a552:	cd b7       	in	r28, 0x3d	; 61
    a554:	de b7       	in	r29, 0x3e	; 62
    a556:	3c 01       	movw	r6, r24
    a558:	1b 01       	movw	r2, r22
    a55a:	54 2e       	mov	r5, r20
    a55c:	42 2e       	mov	r4, r18
    a55e:	0b 83       	std	Y+3, r16	; 0x03
    a560:	ec 82       	std	Y+4, r14	; 0x04
    a562:	88 20       	and	r8, r8
    a564:	41 f0       	breq	.+16     	; 0xa576 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x4e>
    a566:	41 e0       	ldi	r20, 0x01	; 1
    a568:	56 01       	movw	r10, r12
    a56a:	84 16       	cp	r8, r20
    a56c:	21 f0       	breq	.+8      	; 0xa576 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x4e>
    a56e:	18 e1       	ldi	r17, 0x18	; 24
    a570:	a1 2e       	mov	r10, r17
    a572:	06 ec       	ldi	r16, 0xC6	; 198
    a574:	b0 2e       	mov	r11, r16
    a576:	70 e0       	ldi	r23, 0x00	; 0
    a578:	60 e0       	ldi	r22, 0x00	; 0
    a57a:	85 ea       	ldi	r24, 0xA5	; 165
    a57c:	9b e0       	ldi	r25, 0x0B	; 11
    a57e:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a582:	f1 2c       	mov	r15, r1
    a584:	e1 2c       	mov	r14, r1
    a586:	84 2d       	mov	r24, r4
    a588:	90 e0       	ldi	r25, 0x00	; 0
    a58a:	9a 83       	std	Y+2, r25	; 0x02
    a58c:	89 83       	std	Y+1, r24	; 0x01
    a58e:	85 2c       	mov	r8, r5
    a590:	91 2c       	mov	r9, r1
    a592:	2c 01       	movw	r4, r24
    a594:	42 0c       	add	r4, r2
    a596:	53 1c       	adc	r5, r3
    a598:	64 01       	movw	r12, r8
    a59a:	c6 0c       	add	r12, r6
    a59c:	d7 1c       	adc	r13, r7
    a59e:	82 01       	movw	r16, r4
    a5a0:	0e 19       	sub	r16, r14
    a5a2:	1f 09       	sbc	r17, r15
    a5a4:	96 01       	movw	r18, r12
    a5a6:	2e 19       	sub	r18, r14
    a5a8:	3f 09       	sbc	r19, r15
    a5aa:	a1 01       	movw	r20, r2
    a5ac:	4e 0d       	add	r20, r14
    a5ae:	5f 1d       	adc	r21, r15
    a5b0:	b3 01       	movw	r22, r6
    a5b2:	6e 0d       	add	r22, r14
    a5b4:	7f 1d       	adc	r23, r15
    a5b6:	85 ea       	ldi	r24, 0xA5	; 165
    a5b8:	9b e0       	ldi	r25, 0x0B	; 11
    a5ba:	0e 94 4b 93 	call	0x12696	; 0x12696 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    a5be:	9f ef       	ldi	r25, 0xFF	; 255
    a5c0:	e9 1a       	sub	r14, r25
    a5c2:	f9 0a       	sbc	r15, r25
    a5c4:	e3 e0       	ldi	r30, 0x03	; 3
    a5c6:	ee 16       	cp	r14, r30
    a5c8:	f1 04       	cpc	r15, r1
    a5ca:	49 f7       	brne	.-46     	; 0xa59e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x76>
    a5cc:	b5 01       	movw	r22, r10
    a5ce:	85 ea       	ldi	r24, 0xA5	; 165
    a5d0:	9b e0       	ldi	r25, 0x0B	; 11
    a5d2:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a5d6:	81 01       	movw	r16, r2
    a5d8:	03 50       	subi	r16, 0x03	; 3
    a5da:	11 09       	sbc	r17, r1
    a5dc:	49 81       	ldd	r20, Y+1	; 0x01
    a5de:	5a 81       	ldd	r21, Y+2	; 0x02
    a5e0:	04 0f       	add	r16, r20
    a5e2:	15 1f       	adc	r17, r21
    a5e4:	93 01       	movw	r18, r6
    a5e6:	23 50       	subi	r18, 0x03	; 3
    a5e8:	31 09       	sbc	r19, r1
    a5ea:	28 0d       	add	r18, r8
    a5ec:	39 1d       	adc	r19, r9
    a5ee:	a1 01       	movw	r20, r2
    a5f0:	4d 5f       	subi	r20, 0xFD	; 253
    a5f2:	5f 4f       	sbci	r21, 0xFF	; 255
    a5f4:	b3 01       	movw	r22, r6
    a5f6:	6d 5f       	subi	r22, 0xFD	; 253
    a5f8:	7f 4f       	sbci	r23, 0xFF	; 255
    a5fa:	85 ea       	ldi	r24, 0xA5	; 165
    a5fc:	9b e0       	ldi	r25, 0x0B	; 11
    a5fe:	0e 94 c4 92 	call	0x12588	; 0x12588 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    a602:	eb 8d       	ldd	r30, Y+27	; 0x1b
    a604:	fc 8d       	ldd	r31, Y+28	; 0x1c
    a606:	80 81       	ld	r24, Z
    a608:	88 23       	and	r24, r24
    a60a:	09 f4       	brne	.+2      	; 0xa60e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xe6>
    a60c:	a4 c0       	rjmp	.+328    	; 0xa756 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x22e>
    a60e:	81 e0       	ldi	r24, 0x01	; 1
    a610:	b2 e0       	ldi	r27, 0x02	; 2
    a612:	db 2e       	mov	r13, r27
    a614:	ed 8d       	ldd	r30, Y+29	; 0x1d
    a616:	fe 8d       	ldd	r31, Y+30	; 0x1e
    a618:	90 81       	ld	r25, Z
    a61a:	99 23       	and	r25, r25
    a61c:	09 f4       	brne	.+2      	; 0xa620 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xf8>
    a61e:	9e c0       	rjmp	.+316    	; 0xa75c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x234>
    a620:	d3 94       	inc	r13
    a622:	d3 94       	inc	r13
    a624:	f1 e0       	ldi	r31, 0x01	; 1
    a626:	fd 83       	std	Y+5, r31	; 0x05
    a628:	51 2c       	mov	r5, r1
    a62a:	41 2c       	mov	r4, r1
    a62c:	81 30       	cpi	r24, 0x01	; 1
    a62e:	d1 f5       	brne	.+116    	; 0xa6a4 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x17c>
    a630:	eb 8d       	ldd	r30, Y+27	; 0x1b
    a632:	fc 8d       	ldd	r31, Y+28	; 0x1c
    a634:	01 90       	ld	r0, Z+
    a636:	00 20       	and	r0, r0
    a638:	e9 f7       	brne	.-6      	; 0xa634 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x10c>
    a63a:	9f 01       	movw	r18, r30
    a63c:	21 50       	subi	r18, 0x01	; 1
    a63e:	31 09       	sbc	r19, r1
    a640:	4b 8d       	ldd	r20, Y+27	; 0x1b
    a642:	5c 8d       	ldd	r21, Y+28	; 0x1c
    a644:	24 1b       	sub	r18, r20
    a646:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    a648:	8b 81       	ldd	r24, Y+3	; 0x03
    a64a:	88 0f       	add	r24, r24
    a64c:	5b 81       	ldd	r21, Y+3	; 0x03
    a64e:	85 0f       	add	r24, r21
    a650:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
    a652:	e9 81       	ldd	r30, Y+1	; 0x01
    a654:	fa 81       	ldd	r31, Y+2	; 0x02
    a656:	e8 1b       	sub	r30, r24
    a658:	f1 09       	sbc	r31, r1
    a65a:	cf 01       	movw	r24, r30
    a65c:	6d 2d       	mov	r22, r13
    a65e:	70 e0       	ldi	r23, 0x00	; 0
    a660:	0e 94 6d d8 	call	0x1b0da	; 0x1b0da <__divmodhi4>
    a664:	2b 01       	movw	r4, r22
    a666:	a1 01       	movw	r20, r2
    a668:	41 50       	subi	r20, 0x01	; 1
    a66a:	51 09       	sbc	r21, r1
    a66c:	46 0f       	add	r20, r22
    a66e:	57 1f       	adc	r21, r23
_Z22show_string_size_widthhh():
    a670:	f6 e0       	ldi	r31, 0x06	; 6
    a672:	2f 9f       	mul	r18, r31
    a674:	90 01       	movw	r18, r0
    a676:	11 24       	eor	r1, r1
    a678:	6b 81       	ldd	r22, Y+3	; 0x03
    a67a:	62 9f       	mul	r22, r18
    a67c:	c0 01       	movw	r24, r0
    a67e:	63 9f       	mul	r22, r19
    a680:	90 0d       	add	r25, r0
    a682:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
    a684:	b4 01       	movw	r22, r8
    a686:	68 1b       	sub	r22, r24
    a688:	79 0b       	sbc	r23, r25
    a68a:	76 95       	lsr	r23
    a68c:	67 95       	ror	r22
    a68e:	66 0d       	add	r22, r6
    a690:	77 1d       	adc	r23, r7
    a692:	c1 2c       	mov	r12, r1
    a694:	75 01       	movw	r14, r10
    a696:	10 e0       	ldi	r17, 0x00	; 0
    a698:	00 e0       	ldi	r16, 0x00	; 0
    a69a:	2b 81       	ldd	r18, Y+3	; 0x03
    a69c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    a69e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    a6a0:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a6a4:	8d 81       	ldd	r24, Y+5	; 0x05
    a6a6:	81 30       	cpi	r24, 0x01	; 1
    a6a8:	f1 f5       	brne	.+124    	; 0xa726 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1fe>
    a6aa:	ed 8d       	ldd	r30, Y+29	; 0x1d
    a6ac:	fe 8d       	ldd	r31, Y+30	; 0x1e
    a6ae:	01 90       	ld	r0, Z+
    a6b0:	00 20       	and	r0, r0
    a6b2:	e9 f7       	brne	.-6      	; 0xa6ae <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x186>
    a6b4:	9f 01       	movw	r18, r30
    a6b6:	21 50       	subi	r18, 0x01	; 1
    a6b8:	31 09       	sbc	r19, r1
    a6ba:	4d 8d       	ldd	r20, Y+29	; 0x1d
    a6bc:	5e 8d       	ldd	r21, Y+30	; 0x1e
    a6be:	24 1b       	sub	r18, r20
    a6c0:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    a6c2:	8c 81       	ldd	r24, Y+4	; 0x04
    a6c4:	88 0f       	add	r24, r24
    a6c6:	5c 81       	ldd	r21, Y+4	; 0x04
    a6c8:	85 0f       	add	r24, r21
    a6ca:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
    a6cc:	e9 81       	ldd	r30, Y+1	; 0x01
    a6ce:	fa 81       	ldd	r31, Y+2	; 0x02
    a6d0:	e8 1b       	sub	r30, r24
    a6d2:	f1 09       	sbc	r31, r1
    a6d4:	cf 01       	movw	r24, r30
    a6d6:	88 0f       	add	r24, r24
    a6d8:	99 1f       	adc	r25, r25
    a6da:	6d 2d       	mov	r22, r13
    a6dc:	70 e0       	ldi	r23, 0x00	; 0
    a6de:	0e 94 6d d8 	call	0x1b0da	; 0x1b0da <__divmodhi4>
    a6e2:	f1 e0       	ldi	r31, 0x01	; 1
    a6e4:	2f 1a       	sub	r2, r31
    a6e6:	31 08       	sbc	r3, r1
    a6e8:	26 0e       	add	r2, r22
    a6ea:	37 1e       	adc	r3, r23
    a6ec:	a1 01       	movw	r20, r2
    a6ee:	44 0d       	add	r20, r4
    a6f0:	55 1d       	adc	r21, r5
_Z22show_string_size_widthhh():
    a6f2:	66 e0       	ldi	r22, 0x06	; 6
    a6f4:	26 9f       	mul	r18, r22
    a6f6:	90 01       	movw	r18, r0
    a6f8:	11 24       	eor	r1, r1
    a6fa:	ec 81       	ldd	r30, Y+4	; 0x04
    a6fc:	e2 9f       	mul	r30, r18
    a6fe:	c0 01       	movw	r24, r0
    a700:	e3 9f       	mul	r30, r19
    a702:	90 0d       	add	r25, r0
    a704:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
    a706:	b4 01       	movw	r22, r8
    a708:	68 1b       	sub	r22, r24
    a70a:	79 0b       	sbc	r23, r25
    a70c:	76 95       	lsr	r23
    a70e:	67 95       	ror	r22
    a710:	66 0d       	add	r22, r6
    a712:	77 1d       	adc	r23, r7
    a714:	c1 2c       	mov	r12, r1
    a716:	75 01       	movw	r14, r10
    a718:	10 e0       	ldi	r17, 0x00	; 0
    a71a:	00 e0       	ldi	r16, 0x00	; 0
    a71c:	2e 2f       	mov	r18, r30
    a71e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    a720:	9e 8d       	ldd	r25, Y+30	; 0x1e
    a722:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a726:	0f 90       	pop	r0
    a728:	0f 90       	pop	r0
    a72a:	0f 90       	pop	r0
    a72c:	0f 90       	pop	r0
    a72e:	0f 90       	pop	r0
    a730:	df 91       	pop	r29
    a732:	cf 91       	pop	r28
    a734:	1f 91       	pop	r17
    a736:	0f 91       	pop	r16
    a738:	ff 90       	pop	r15
    a73a:	ef 90       	pop	r14
    a73c:	df 90       	pop	r13
    a73e:	cf 90       	pop	r12
    a740:	bf 90       	pop	r11
    a742:	af 90       	pop	r10
    a744:	9f 90       	pop	r9
    a746:	8f 90       	pop	r8
    a748:	7f 90       	pop	r7
    a74a:	6f 90       	pop	r6
    a74c:	5f 90       	pop	r5
    a74e:	4f 90       	pop	r4
    a750:	3f 90       	pop	r3
    a752:	2f 90       	pop	r2
    a754:	08 95       	ret
    a756:	80 e0       	ldi	r24, 0x00	; 0
    a758:	d1 2c       	mov	r13, r1
    a75a:	5c cf       	rjmp	.-328    	; 0xa614 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xec>
    a75c:	1d 82       	std	Y+5, r1	; 0x05
    a75e:	64 cf       	rjmp	.-312    	; 0xa628 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x100>

0000a760 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z15button_switch_1jjhhhhPcS_():
    a760:	2f 92       	push	r2
    a762:	3f 92       	push	r3
    a764:	4f 92       	push	r4
    a766:	5f 92       	push	r5
    a768:	6f 92       	push	r6
    a76a:	7f 92       	push	r7
    a76c:	8f 92       	push	r8
    a76e:	9f 92       	push	r9
    a770:	af 92       	push	r10
    a772:	bf 92       	push	r11
    a774:	cf 92       	push	r12
    a776:	df 92       	push	r13
    a778:	ef 92       	push	r14
    a77a:	ff 92       	push	r15
    a77c:	0f 93       	push	r16
    a77e:	1f 93       	push	r17
    a780:	cf 93       	push	r28
    a782:	df 93       	push	r29
    a784:	00 d0       	rcall	.+0      	; 0xa786 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x26>
    a786:	1f 92       	push	r1
    a788:	1f 92       	push	r1
    a78a:	cd b7       	in	r28, 0x3d	; 61
    a78c:	de b7       	in	r29, 0x3e	; 62
    a78e:	4c 01       	movw	r8, r24
    a790:	3b 01       	movw	r6, r22
    a792:	44 2e       	mov	r4, r20
    a794:	f2 2e       	mov	r15, r18
    a796:	09 83       	std	Y+1, r16	; 0x01
    a798:	db 82       	std	Y+3, r13	; 0x03
    a79a:	ca 82       	std	Y+2, r12	; 0x02
    a79c:	15 01       	movw	r2, r10
    a79e:	70 e0       	ldi	r23, 0x00	; 0
    a7a0:	60 e0       	ldi	r22, 0x00	; 0
    a7a2:	85 ea       	ldi	r24, 0xA5	; 165
    a7a4:	9b e0       	ldi	r25, 0x0B	; 11
    a7a6:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a7aa:	1d 82       	std	Y+5, r1	; 0x05
    a7ac:	1c 82       	std	Y+4, r1	; 0x04
    a7ae:	af 2c       	mov	r10, r15
    a7b0:	b1 2c       	mov	r11, r1
    a7b2:	65 01       	movw	r12, r10
    a7b4:	c6 0c       	add	r12, r6
    a7b6:	d7 1c       	adc	r13, r7
    a7b8:	51 2c       	mov	r5, r1
    a7ba:	72 01       	movw	r14, r4
    a7bc:	e8 0c       	add	r14, r8
    a7be:	f9 1c       	adc	r15, r9
    a7c0:	86 01       	movw	r16, r12
    a7c2:	8c 81       	ldd	r24, Y+4	; 0x04
    a7c4:	9d 81       	ldd	r25, Y+5	; 0x05
    a7c6:	08 1b       	sub	r16, r24
    a7c8:	19 0b       	sbc	r17, r25
    a7ca:	97 01       	movw	r18, r14
    a7cc:	28 1b       	sub	r18, r24
    a7ce:	39 0b       	sbc	r19, r25
    a7d0:	ac 01       	movw	r20, r24
    a7d2:	46 0d       	add	r20, r6
    a7d4:	57 1d       	adc	r21, r7
    a7d6:	bc 01       	movw	r22, r24
    a7d8:	68 0d       	add	r22, r8
    a7da:	79 1d       	adc	r23, r9
    a7dc:	85 ea       	ldi	r24, 0xA5	; 165
    a7de:	9b e0       	ldi	r25, 0x0B	; 11
    a7e0:	0e 94 4b 93 	call	0x12696	; 0x12696 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    a7e4:	8c 81       	ldd	r24, Y+4	; 0x04
    a7e6:	9d 81       	ldd	r25, Y+5	; 0x05
    a7e8:	01 96       	adiw	r24, 0x01	; 1
    a7ea:	9d 83       	std	Y+5, r25	; 0x05
    a7ec:	8c 83       	std	Y+4, r24	; 0x04
    a7ee:	03 97       	sbiw	r24, 0x03	; 3
    a7f0:	39 f7       	brne	.-50     	; 0xa7c0 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x60>
    a7f2:	ea 81       	ldd	r30, Y+2	; 0x02
    a7f4:	fb 81       	ldd	r31, Y+3	; 0x03
    a7f6:	01 90       	ld	r0, Z+
    a7f8:	00 20       	and	r0, r0
    a7fa:	e9 f7       	brne	.-6      	; 0xa7f6 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x96>
    a7fc:	31 97       	sbiw	r30, 0x01	; 1
    a7fe:	8a 81       	ldd	r24, Y+2	; 0x02
    a800:	9b 81       	ldd	r25, Y+3	; 0x03
    a802:	e8 1b       	sub	r30, r24
    a804:	f9 0b       	sbc	r31, r25
_Z22show_string_size_highth():
    a806:	89 81       	ldd	r24, Y+1	; 0x01
    a808:	88 0f       	add	r24, r24
    a80a:	99 81       	ldd	r25, Y+1	; 0x01
    a80c:	89 0f       	add	r24, r25
    a80e:	88 0f       	add	r24, r24
_Z15button_switch_1jjhhhhPcS_():
    a810:	a5 01       	movw	r20, r10
    a812:	48 1b       	sub	r20, r24
    a814:	51 09       	sbc	r21, r1
    a816:	57 ff       	sbrs	r21, 7
    a818:	02 c0       	rjmp	.+4      	; 0xa81e <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0xbe>
    a81a:	4d 5f       	subi	r20, 0xFD	; 253
    a81c:	5f 4f       	sbci	r21, 0xFF	; 255
    a81e:	55 95       	asr	r21
    a820:	47 95       	ror	r20
    a822:	55 95       	asr	r21
    a824:	47 95       	ror	r20
    a826:	46 0d       	add	r20, r6
    a828:	57 2d       	mov	r21, r7
    a82a:	51 1d       	adc	r21, r1
_Z22show_string_size_widthhh():
    a82c:	26 e0       	ldi	r18, 0x06	; 6
    a82e:	e2 9f       	mul	r30, r18
    a830:	f0 01       	movw	r30, r0
    a832:	11 24       	eor	r1, r1
    a834:	29 81       	ldd	r18, Y+1	; 0x01
    a836:	2e 9f       	mul	r18, r30
    a838:	c0 01       	movw	r24, r0
    a83a:	2f 9f       	mul	r18, r31
    a83c:	90 0d       	add	r25, r0
    a83e:	11 24       	eor	r1, r1
_Z15button_switch_1jjhhhhPcS_():
    a840:	99 27       	eor	r25, r25
    a842:	b2 01       	movw	r22, r4
    a844:	68 1b       	sub	r22, r24
    a846:	79 0b       	sbc	r23, r25
    a848:	77 ff       	sbrs	r23, 7
    a84a:	02 c0       	rjmp	.+4      	; 0xa850 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0xf0>
    a84c:	6f 5f       	subi	r22, 0xFF	; 255
    a84e:	7f 4f       	sbci	r23, 0xFF	; 255
    a850:	75 95       	asr	r23
    a852:	67 95       	ror	r22
    a854:	68 0d       	add	r22, r8
    a856:	79 2d       	mov	r23, r9
    a858:	71 1d       	adc	r23, r1
    a85a:	c1 2c       	mov	r12, r1
    a85c:	ee 24       	eor	r14, r14
    a85e:	ea 94       	dec	r14
    a860:	fe 2c       	mov	r15, r14
    a862:	10 e0       	ldi	r17, 0x00	; 0
    a864:	00 e0       	ldi	r16, 0x00	; 0
    a866:	29 81       	ldd	r18, Y+1	; 0x01
    a868:	8a 81       	ldd	r24, Y+2	; 0x02
    a86a:	9b 81       	ldd	r25, Y+3	; 0x03
    a86c:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a870:	f1 01       	movw	r30, r2
    a872:	01 90       	ld	r0, Z+
    a874:	00 20       	and	r0, r0
    a876:	e9 f7       	brne	.-6      	; 0xa872 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x112>
    a878:	31 97       	sbiw	r30, 0x01	; 1
    a87a:	e2 19       	sub	r30, r2
    a87c:	f3 09       	sbc	r31, r3
    a87e:	a5 01       	movw	r20, r10
    a880:	46 50       	subi	r20, 0x06	; 6
    a882:	51 09       	sbc	r21, r1
    a884:	57 ff       	sbrs	r21, 7
    a886:	02 c0       	rjmp	.+4      	; 0xa88c <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x12c>
    a888:	4d 5f       	subi	r20, 0xFD	; 253
    a88a:	5f 4f       	sbci	r21, 0xFF	; 255
    a88c:	55 95       	asr	r21
    a88e:	47 95       	ror	r20
    a890:	55 95       	asr	r21
    a892:	47 95       	ror	r20
    a894:	55 27       	eor	r21, r21
    a896:	ca 01       	movw	r24, r20
    a898:	88 0f       	add	r24, r24
    a89a:	99 1f       	adc	r25, r25
    a89c:	48 0f       	add	r20, r24
    a89e:	59 1f       	adc	r21, r25
    a8a0:	46 0d       	add	r20, r6
    a8a2:	57 1d       	adc	r21, r7
_Z22show_string_size_widthhh():
    a8a4:	86 e0       	ldi	r24, 0x06	; 6
    a8a6:	e8 9f       	mul	r30, r24
    a8a8:	f0 01       	movw	r30, r0
    a8aa:	11 24       	eor	r1, r1
_Z15button_switch_1jjhhhhPcS_():
    a8ac:	ff 27       	eor	r31, r31
    a8ae:	b2 01       	movw	r22, r4
    a8b0:	6e 1b       	sub	r22, r30
    a8b2:	7f 0b       	sbc	r23, r31
    a8b4:	77 ff       	sbrs	r23, 7
    a8b6:	02 c0       	rjmp	.+4      	; 0xa8bc <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x15c>
    a8b8:	6f 5f       	subi	r22, 0xFF	; 255
    a8ba:	7f 4f       	sbci	r23, 0xFF	; 255
    a8bc:	75 95       	asr	r23
    a8be:	67 95       	ror	r22
    a8c0:	68 0d       	add	r22, r8
    a8c2:	79 2d       	mov	r23, r9
    a8c4:	71 1d       	adc	r23, r1
    a8c6:	c1 2c       	mov	r12, r1
    a8c8:	ee 24       	eor	r14, r14
    a8ca:	ea 94       	dec	r14
    a8cc:	fe 2c       	mov	r15, r14
    a8ce:	10 e0       	ldi	r17, 0x00	; 0
    a8d0:	00 e0       	ldi	r16, 0x00	; 0
    a8d2:	21 e0       	ldi	r18, 0x01	; 1
    a8d4:	c1 01       	movw	r24, r2
    a8d6:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a8da:	0f 90       	pop	r0
    a8dc:	0f 90       	pop	r0
    a8de:	0f 90       	pop	r0
    a8e0:	0f 90       	pop	r0
    a8e2:	0f 90       	pop	r0
    a8e4:	df 91       	pop	r29
    a8e6:	cf 91       	pop	r28
    a8e8:	1f 91       	pop	r17
    a8ea:	0f 91       	pop	r16
    a8ec:	ff 90       	pop	r15
    a8ee:	ef 90       	pop	r14
    a8f0:	df 90       	pop	r13
    a8f2:	cf 90       	pop	r12
    a8f4:	bf 90       	pop	r11
    a8f6:	af 90       	pop	r10
    a8f8:	9f 90       	pop	r9
    a8fa:	8f 90       	pop	r8
    a8fc:	7f 90       	pop	r7
    a8fe:	6f 90       	pop	r6
    a900:	5f 90       	pop	r5
    a902:	4f 90       	pop	r4
    a904:	3f 90       	pop	r3
    a906:	2f 90       	pop	r2
    a908:	08 95       	ret

0000a90a <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
    a90a:	2f 92       	push	r2
    a90c:	3f 92       	push	r3
    a90e:	4f 92       	push	r4
    a910:	5f 92       	push	r5
    a912:	6f 92       	push	r6
    a914:	7f 92       	push	r7
    a916:	8f 92       	push	r8
    a918:	9f 92       	push	r9
    a91a:	af 92       	push	r10
    a91c:	bf 92       	push	r11
    a91e:	cf 92       	push	r12
    a920:	df 92       	push	r13
    a922:	ef 92       	push	r14
    a924:	ff 92       	push	r15
    a926:	0f 93       	push	r16
    a928:	1f 93       	push	r17
    a92a:	cf 93       	push	r28
    a92c:	df 93       	push	r29
    a92e:	00 d0       	rcall	.+0      	; 0xa930 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x26>
    a930:	1f 92       	push	r1
    a932:	1f 92       	push	r1
    a934:	cd b7       	in	r28, 0x3d	; 61
    a936:	de b7       	in	r29, 0x3e	; 62
    a938:	6c 01       	movw	r12, r24
    a93a:	5b 01       	movw	r10, r22
    a93c:	1a 01       	movw	r2, r20
    a93e:	29 01       	movw	r4, r18
    a940:	90 2e       	mov	r9, r16
    a942:	8e 2c       	mov	r8, r14
    a944:	70 e0       	ldi	r23, 0x00	; 0
    a946:	60 e0       	ldi	r22, 0x00	; 0
    a948:	85 ea       	ldi	r24, 0xA5	; 165
    a94a:	9b e0       	ldi	r25, 0x0B	; 11
    a94c:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a950:	f1 2c       	mov	r15, r1
    a952:	e1 2c       	mov	r14, r1
    a954:	35 01       	movw	r6, r10
    a956:	64 0c       	add	r6, r4
    a958:	75 1c       	adc	r7, r5
    a95a:	c6 01       	movw	r24, r12
    a95c:	82 0d       	add	r24, r2
    a95e:	93 1d       	adc	r25, r3
    a960:	9d 83       	std	Y+5, r25	; 0x05
    a962:	8c 83       	std	Y+4, r24	; 0x04
    a964:	83 01       	movw	r16, r6
    a966:	0e 19       	sub	r16, r14
    a968:	1f 09       	sbc	r17, r15
    a96a:	2c 81       	ldd	r18, Y+4	; 0x04
    a96c:	3d 81       	ldd	r19, Y+5	; 0x05
    a96e:	2e 19       	sub	r18, r14
    a970:	3f 09       	sbc	r19, r15
    a972:	a5 01       	movw	r20, r10
    a974:	4e 0d       	add	r20, r14
    a976:	5f 1d       	adc	r21, r15
    a978:	b6 01       	movw	r22, r12
    a97a:	6e 0d       	add	r22, r14
    a97c:	7f 1d       	adc	r23, r15
    a97e:	85 ea       	ldi	r24, 0xA5	; 165
    a980:	9b e0       	ldi	r25, 0x0B	; 11
    a982:	0e 94 4b 93 	call	0x12696	; 0x12696 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    a986:	9f ef       	ldi	r25, 0xFF	; 255
    a988:	e9 1a       	sub	r14, r25
    a98a:	f9 0a       	sbc	r15, r25
    a98c:	23 e0       	ldi	r18, 0x03	; 3
    a98e:	e2 16       	cp	r14, r18
    a990:	f1 04       	cpc	r15, r1
    a992:	41 f7       	brne	.-48     	; 0xa964 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x5a>
    a994:	89 82       	std	Y+1, r8	; 0x01
    a996:	1a 82       	std	Y+2, r1	; 0x02
    a998:	ce 01       	movw	r24, r28
    a99a:	01 96       	adiw	r24, 0x01	; 1
    a99c:	fc 01       	movw	r30, r24
    a99e:	01 90       	ld	r0, Z+
    a9a0:	00 20       	and	r0, r0
    a9a2:	e9 f7       	brne	.-6      	; 0xa99e <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x94>
    a9a4:	31 97       	sbiw	r30, 0x01	; 1
    a9a6:	e8 1b       	sub	r30, r24
    a9a8:	f9 0b       	sbc	r31, r25
_Z22show_string_size_highth():
    a9aa:	29 2d       	mov	r18, r9
    a9ac:	22 0f       	add	r18, r18
    a9ae:	29 0d       	add	r18, r9
    a9b0:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
    a9b2:	a2 01       	movw	r20, r4
    a9b4:	42 1b       	sub	r20, r18
    a9b6:	51 09       	sbc	r21, r1
    a9b8:	56 95       	lsr	r21
    a9ba:	47 95       	ror	r20
    a9bc:	56 95       	lsr	r21
    a9be:	47 95       	ror	r20
    a9c0:	4a 0d       	add	r20, r10
    a9c2:	5b 2d       	mov	r21, r11
    a9c4:	51 1d       	adc	r21, r1
_Z22show_string_size_widthhh():
    a9c6:	26 e0       	ldi	r18, 0x06	; 6
    a9c8:	e2 9f       	mul	r30, r18
    a9ca:	f0 01       	movw	r30, r0
    a9cc:	11 24       	eor	r1, r1
    a9ce:	9e 9e       	mul	r9, r30
    a9d0:	90 01       	movw	r18, r0
    a9d2:	9f 9e       	mul	r9, r31
    a9d4:	30 0d       	add	r19, r0
    a9d6:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
    a9d8:	33 27       	eor	r19, r19
    a9da:	b1 01       	movw	r22, r2
    a9dc:	62 1b       	sub	r22, r18
    a9de:	73 0b       	sbc	r23, r19
    a9e0:	76 95       	lsr	r23
    a9e2:	67 95       	ror	r22
    a9e4:	6c 0d       	add	r22, r12
    a9e6:	7d 2d       	mov	r23, r13
    a9e8:	71 1d       	adc	r23, r1
    a9ea:	c1 2c       	mov	r12, r1
    a9ec:	ee 24       	eor	r14, r14
    a9ee:	ea 94       	dec	r14
    a9f0:	fe 2c       	mov	r15, r14
    a9f2:	10 e0       	ldi	r17, 0x00	; 0
    a9f4:	00 e0       	ldi	r16, 0x00	; 0
    a9f6:	29 2d       	mov	r18, r9
    a9f8:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a9fc:	0f 90       	pop	r0
    a9fe:	0f 90       	pop	r0
    aa00:	0f 90       	pop	r0
    aa02:	0f 90       	pop	r0
    aa04:	0f 90       	pop	r0
    aa06:	df 91       	pop	r29
    aa08:	cf 91       	pop	r28
    aa0a:	1f 91       	pop	r17
    aa0c:	0f 91       	pop	r16
    aa0e:	ff 90       	pop	r15
    aa10:	ef 90       	pop	r14
    aa12:	df 90       	pop	r13
    aa14:	cf 90       	pop	r12
    aa16:	bf 90       	pop	r11
    aa18:	af 90       	pop	r10
    aa1a:	9f 90       	pop	r9
    aa1c:	8f 90       	pop	r8
    aa1e:	7f 90       	pop	r7
    aa20:	6f 90       	pop	r6
    aa22:	5f 90       	pop	r5
    aa24:	4f 90       	pop	r4
    aa26:	3f 90       	pop	r3
    aa28:	2f 90       	pop	r2
    aa2a:	08 95       	ret

0000aa2c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
    aa2c:	ef 92       	push	r14
    aa2e:	ff 92       	push	r15
    aa30:	0f 93       	push	r16
    aa32:	1f 93       	push	r17
_Z10is_pressediiiiii():
    aa34:	80 17       	cp	r24, r16
    aa36:	91 07       	cpc	r25, r17
    aa38:	74 f4       	brge	.+28     	; 0xaa56 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
    aa3a:	84 0f       	add	r24, r20
    aa3c:	95 1f       	adc	r25, r21
_Z10is_pressediiiiii():
    aa3e:	08 17       	cp	r16, r24
    aa40:	19 07       	cpc	r17, r25
    aa42:	4c f4       	brge	.+18     	; 0xaa56 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
    aa44:	6e 15       	cp	r22, r14
    aa46:	7f 05       	cpc	r23, r15
    aa48:	34 f4       	brge	.+12     	; 0xaa56 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
    aa4a:	62 0f       	add	r22, r18
    aa4c:	73 1f       	adc	r23, r19
_Z10is_pressediiiiii():
    aa4e:	81 e0       	ldi	r24, 0x01	; 1
    aa50:	e6 16       	cp	r14, r22
    aa52:	f7 06       	cpc	r15, r23
    aa54:	0c f0       	brlt	.+2      	; 0xaa58 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
    aa56:	80 e0       	ldi	r24, 0x00	; 0
    aa58:	1f 91       	pop	r17
    aa5a:	0f 91       	pop	r16
    aa5c:	ff 90       	pop	r15
    aa5e:	ef 90       	pop	r14
    aa60:	08 95       	ret

0000aa62 <draw_menu(bool)>:
_Z9draw_menub():
    aa62:	2f 92       	push	r2
    aa64:	3f 92       	push	r3
    aa66:	4f 92       	push	r4
    aa68:	5f 92       	push	r5
    aa6a:	6f 92       	push	r6
    aa6c:	7f 92       	push	r7
    aa6e:	8f 92       	push	r8
    aa70:	9f 92       	push	r9
    aa72:	af 92       	push	r10
    aa74:	bf 92       	push	r11
    aa76:	cf 92       	push	r12
    aa78:	df 92       	push	r13
    aa7a:	ef 92       	push	r14
    aa7c:	ff 92       	push	r15
    aa7e:	0f 93       	push	r16
    aa80:	1f 93       	push	r17
    aa82:	cf 93       	push	r28
    aa84:	df 93       	push	r29
    aa86:	cd b7       	in	r28, 0x3d	; 61
    aa88:	de b7       	in	r29, 0x3e	; 62
    aa8a:	c3 5e       	subi	r28, 0xE3	; 227
    aa8c:	d1 09       	sbc	r29, r1
    aa8e:	0f b6       	in	r0, 0x3f	; 63
    aa90:	f8 94       	cli
    aa92:	de bf       	out	0x3e, r29	; 62
    aa94:	0f be       	out	0x3f, r0	; 63
    aa96:	cd bf       	out	0x3d, r28	; 61
    aa98:	f8 2e       	mov	r15, r24
    aa9a:	ce 01       	movw	r24, r28
    aa9c:	8f 54       	subi	r24, 0x4F	; 79
    aa9e:	9f 4f       	sbci	r25, 0xFF	; 255
    aaa0:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <MenuHistoryGetMenu(unsigned char*)>
    aaa4:	3c 01       	movw	r6, r24
    aaa6:	60 e0       	ldi	r22, 0x00	; 0
    aaa8:	83 e8       	ldi	r24, 0x83	; 131
    aaaa:	9b e0       	ldi	r25, 0x0B	; 11
    aaac:	0e 94 df a7 	call	0x14fbe	; 0x14fbe <LCDWIKI_TOUCH::TP_Scan(unsigned char)>
    aab0:	83 e8       	ldi	r24, 0x83	; 131
    aab2:	9b e0       	ldi	r25, 0x0B	; 11
    aab4:	0e 94 b2 a8 	call	0x15164	; 0x15164 <LCDWIKI_TOUCH::TP_Get_State() const>
    aab8:	87 ff       	sbrs	r24, 7
    aaba:	98 c1       	rjmp	.+816    	; 0xadec <draw_menu(bool)+0x38a>
    aabc:	f1 10       	cpse	r15, r1
    aabe:	96 c1       	rjmp	.+812    	; 0xadec <draw_menu(bool)+0x38a>
    aac0:	20 91 87 0b 	lds	r18, 0x0B87	; 0x800b87 <my_touch+0x4>
    aac4:	30 91 88 0b 	lds	r19, 0x0B88	; 0x800b88 <my_touch+0x5>
    aac8:	ce 53       	subi	r28, 0x3E	; 62
    aaca:	df 4f       	sbci	r29, 0xFF	; 255
    aacc:	39 83       	std	Y+1, r19	; 0x01
    aace:	28 83       	st	Y, r18
    aad0:	c2 5c       	subi	r28, 0xC2	; 194
    aad2:	d0 40       	sbci	r29, 0x00	; 0
    aad4:	40 91 89 0b 	lds	r20, 0x0B89	; 0x800b89 <my_touch+0x6>
    aad8:	50 91 8a 0b 	lds	r21, 0x0B8A	; 0x800b8a <my_touch+0x7>
    aadc:	cc 53       	subi	r28, 0x3C	; 60
    aade:	df 4f       	sbci	r29, 0xFF	; 255
    aae0:	59 83       	std	Y+1, r21	; 0x01
    aae2:	48 83       	st	Y, r20
    aae4:	c4 5c       	subi	r28, 0xC4	; 196
    aae6:	d0 40       	sbci	r29, 0x00	; 0
    aae8:	83 01       	movw	r16, r6
    aaea:	0a 53       	subi	r16, 0x3A	; 58
    aaec:	1d 4f       	sbci	r17, 0xFD	; 253
    aaee:	f8 01       	movw	r30, r16
    aaf0:	65 91       	lpm	r22, Z+
    aaf2:	74 91       	lpm	r23, Z
    aaf4:	ca 54       	subi	r28, 0x4A	; 74
    aaf6:	df 4f       	sbci	r29, 0xFF	; 255
    aaf8:	79 83       	std	Y+1, r23	; 0x01
    aafa:	68 83       	st	Y, r22
    aafc:	c6 5b       	subi	r28, 0xB6	; 182
    aafe:	d0 40       	sbci	r29, 0x00	; 0
    ab00:	63 01       	movw	r12, r6
    ab02:	78 e3       	ldi	r23, 0x38	; 56
    ab04:	c7 1a       	sub	r12, r23
    ab06:	7d ef       	ldi	r23, 0xFD	; 253
    ab08:	d7 0a       	sbc	r13, r23
    ab0a:	f6 01       	movw	r30, r12
    ab0c:	85 91       	lpm	r24, Z+
    ab0e:	94 91       	lpm	r25, Z
    ab10:	c8 54       	subi	r28, 0x48	; 72
    ab12:	df 4f       	sbci	r29, 0xFF	; 255
    ab14:	99 83       	std	Y+1, r25	; 0x01
    ab16:	88 83       	st	Y, r24
    ab18:	c8 5b       	subi	r28, 0xB8	; 184
    ab1a:	d0 40       	sbci	r29, 0x00	; 0
    ab1c:	f3 01       	movw	r30, r6
    ab1e:	ee 52       	subi	r30, 0x2E	; 46
    ab20:	fd 4f       	sbci	r31, 0xFD	; 253
    ab22:	25 91       	lpm	r18, Z+
    ab24:	34 91       	lpm	r19, Z
    ab26:	53 01       	movw	r10, r6
    ab28:	9b e3       	ldi	r25, 0x3B	; 59
    ab2a:	a9 1a       	sub	r10, r25
    ab2c:	9d ef       	ldi	r25, 0xFD	; 253
    ab2e:	b9 0a       	sbc	r11, r25
    ab30:	f5 01       	movw	r30, r10
    ab32:	84 91       	lpm	r24, Z
    ab34:	cf 54       	subi	r28, 0x4F	; 79
    ab36:	df 4f       	sbci	r29, 0xFF	; 255
    ab38:	68 81       	ld	r22, Y
    ab3a:	c1 5b       	subi	r28, 0xB1	; 177
    ab3c:	d0 40       	sbci	r29, 0x00	; 0
    ab3e:	70 e0       	ldi	r23, 0x00	; 0
    ab40:	4f ef       	ldi	r20, 0xFF	; 255
    ab42:	90 e0       	ldi	r25, 0x00	; 0
    ab44:	f9 01       	movw	r30, r18
    ab46:	19 95       	eicall
    ab48:	91 2c       	mov	r9, r1
    ab4a:	88 23       	and	r24, r24
    ab4c:	11 f0       	breq	.+4      	; 0xab52 <draw_menu(bool)+0xf0>
    ab4e:	99 24       	eor	r9, r9
    ab50:	93 94       	inc	r9
    ab52:	f3 01       	movw	r30, r6
    ab54:	ec 52       	subi	r30, 0x2C	; 44
    ab56:	fd 4f       	sbci	r31, 0xFD	; 253
    ab58:	25 91       	lpm	r18, Z+
    ab5a:	34 91       	lpm	r19, Z
    ab5c:	f5 01       	movw	r30, r10
    ab5e:	84 91       	lpm	r24, Z
    ab60:	cf 54       	subi	r28, 0x4F	; 79
    ab62:	df 4f       	sbci	r29, 0xFF	; 255
    ab64:	68 81       	ld	r22, Y
    ab66:	c1 5b       	subi	r28, 0xB1	; 177
    ab68:	d0 40       	sbci	r29, 0x00	; 0
    ab6a:	70 e0       	ldi	r23, 0x00	; 0
    ab6c:	4f ef       	ldi	r20, 0xFF	; 255
    ab6e:	90 e0       	ldi	r25, 0x00	; 0
    ab70:	f9 01       	movw	r30, r18
    ab72:	19 95       	eicall
    ab74:	81 11       	cpse	r24, r1
    ab76:	47 c1       	rjmp	.+654    	; 0xae06 <draw_menu(bool)+0x3a4>
    ab78:	e8 94       	clt
    ab7a:	91 f8       	bld	r9, 1
    ab7c:	f3 01       	movw	r30, r6
    ab7e:	ea 52       	subi	r30, 0x2A	; 42
    ab80:	fd 4f       	sbci	r31, 0xFD	; 253
    ab82:	25 91       	lpm	r18, Z+
    ab84:	34 91       	lpm	r19, Z
    ab86:	f5 01       	movw	r30, r10
    ab88:	84 91       	lpm	r24, Z
    ab8a:	cf 54       	subi	r28, 0x4F	; 79
    ab8c:	df 4f       	sbci	r29, 0xFF	; 255
    ab8e:	68 81       	ld	r22, Y
    ab90:	c1 5b       	subi	r28, 0xB1	; 177
    ab92:	d0 40       	sbci	r29, 0x00	; 0
    ab94:	70 e0       	ldi	r23, 0x00	; 0
    ab96:	4f ef       	ldi	r20, 0xFF	; 255
    ab98:	90 e0       	ldi	r25, 0x00	; 0
    ab9a:	f9 01       	movw	r30, r18
    ab9c:	19 95       	eicall
    ab9e:	81 11       	cpse	r24, r1
    aba0:	35 c1       	rjmp	.+618    	; 0xae0c <draw_menu(bool)+0x3aa>
    aba2:	89 2d       	mov	r24, r9
    aba4:	8b 7f       	andi	r24, 0xFB	; 251
    aba6:	f1 10       	cpse	r15, r1
    aba8:	34 c1       	rjmp	.+616    	; 0xae12 <draw_menu(bool)+0x3b0>
    abaa:	87 7f       	andi	r24, 0xF7	; 247
    abac:	cd 52       	subi	r28, 0x2D	; 45
    abae:	df 4f       	sbci	r29, 0xFF	; 255
    abb0:	88 83       	st	Y, r24
    abb2:	c3 5d       	subi	r28, 0xD3	; 211
    abb4:	d0 40       	sbci	r29, 0x00	; 0
    abb6:	f3 01       	movw	r30, r6
    abb8:	ef 52       	subi	r30, 0x2F	; 47
    abba:	fd 4f       	sbci	r31, 0xFD	; 253
    abbc:	84 91       	lpm	r24, Z
    abbe:	cd 52       	subi	r28, 0x2D	; 45
    abc0:	df 4f       	sbci	r29, 0xFF	; 255
    abc2:	68 81       	ld	r22, Y
    abc4:	c3 5d       	subi	r28, 0xD3	; 211
    abc6:	d0 40       	sbci	r29, 0x00	; 0
    abc8:	0e 94 42 3a 	call	0x7484	; 0x7484 <enable_redraw(unsigned char, unsigned char)>
    abcc:	88 23       	and	r24, r24
    abce:	e1 f0       	breq	.+56     	; 0xac08 <draw_menu(bool)+0x1a6>
    abd0:	f3 01       	movw	r30, r6
    abd2:	65 91       	lpm	r22, Z+
    abd4:	74 91       	lpm	r23, Z
    abd6:	ce 01       	movw	r24, r28
    abd8:	01 96       	adiw	r24, 0x01	; 1
    abda:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    abde:	f6 01       	movw	r30, r12
    abe0:	45 91       	lpm	r20, Z+
    abe2:	54 91       	lpm	r21, Z
    abe4:	f8 01       	movw	r30, r16
    abe6:	65 91       	lpm	r22, Z+
    abe8:	74 91       	lpm	r23, Z
    abea:	4b 5f       	subi	r20, 0xFB	; 251
    abec:	5f 4f       	sbci	r21, 0xFF	; 255
    abee:	6b 5f       	subi	r22, 0xFB	; 251
    abf0:	7f 4f       	sbci	r23, 0xFF	; 255
    abf2:	c1 2c       	mov	r12, r1
    abf4:	ee 24       	eor	r14, r14
    abf6:	ea 94       	dec	r14
    abf8:	fe 2c       	mov	r15, r14
    abfa:	10 e0       	ldi	r17, 0x00	; 0
    abfc:	00 e0       	ldi	r16, 0x00	; 0
    abfe:	22 e0       	ldi	r18, 0x02	; 2
    ac00:	ce 01       	movw	r24, r28
    ac02:	01 96       	adiw	r24, 0x01	; 1
    ac04:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ac08:	91 2c       	mov	r9, r1
    ac0a:	c6 53       	subi	r28, 0x36	; 54
    ac0c:	df 4f       	sbci	r29, 0xFF	; 255
    ac0e:	18 82       	st	Y, r1
    ac10:	ca 5c       	subi	r28, 0xCA	; 202
    ac12:	d0 40       	sbci	r29, 0x00	; 0
    ac14:	93 01       	movw	r18, r6
    ac16:	23 54       	subi	r18, 0x43	; 67
    ac18:	3d 4f       	sbci	r19, 0xFD	; 253
    ac1a:	c6 54       	subi	r28, 0x46	; 70
    ac1c:	df 4f       	sbci	r29, 0xFF	; 255
    ac1e:	39 83       	std	Y+1, r19	; 0x01
    ac20:	28 83       	st	Y, r18
    ac22:	ca 5b       	subi	r28, 0xBA	; 186
    ac24:	d0 40       	sbci	r29, 0x00	; 0
    ac26:	c6 54       	subi	r28, 0x46	; 70
    ac28:	df 4f       	sbci	r29, 0xFF	; 255
    ac2a:	e8 81       	ld	r30, Y
    ac2c:	f9 81       	ldd	r31, Y+1	; 0x01
    ac2e:	ca 5b       	subi	r28, 0xBA	; 186
    ac30:	d0 40       	sbci	r29, 0x00	; 0
    ac32:	84 91       	lpm	r24, Z
    ac34:	98 16       	cp	r9, r24
    ac36:	08 f0       	brcs	.+2      	; 0xac3a <draw_menu(bool)+0x1d8>
    ac38:	ee c0       	rjmp	.+476    	; 0xae16 <draw_menu(bool)+0x3b4>
    ac3a:	89 2d       	mov	r24, r9
    ac3c:	90 e0       	ldi	r25, 0x00	; 0
    ac3e:	01 96       	adiw	r24, 0x01	; 1
    ac40:	f1 e1       	ldi	r31, 0x11	; 17
    ac42:	f8 9f       	mul	r31, r24
    ac44:	20 01       	movw	r4, r0
    ac46:	f9 9f       	mul	r31, r25
    ac48:	50 0c       	add	r5, r0
    ac4a:	11 24       	eor	r1, r1
    ac4c:	f3 01       	movw	r30, r6
    ac4e:	e4 0d       	add	r30, r4
    ac50:	f5 1d       	adc	r31, r5
    ac52:	25 91       	lpm	r18, Z+
    ac54:	34 91       	lpm	r19, Z
    ac56:	12 01       	movw	r2, r4
    ac58:	44 e0       	ldi	r20, 0x04	; 4
    ac5a:	24 1a       	sub	r2, r20
    ac5c:	31 08       	sbc	r3, r1
    ac5e:	26 0c       	add	r2, r6
    ac60:	37 1c       	adc	r3, r7
    ac62:	f1 01       	movw	r30, r2
    ac64:	84 91       	lpm	r24, Z
    ac66:	cf 54       	subi	r28, 0x4F	; 79
    ac68:	df 4f       	sbci	r29, 0xFF	; 255
    ac6a:	68 81       	ld	r22, Y
    ac6c:	c1 5b       	subi	r28, 0xB1	; 177
    ac6e:	d0 40       	sbci	r29, 0x00	; 0
    ac70:	70 e0       	ldi	r23, 0x00	; 0
    ac72:	49 2d       	mov	r20, r9
    ac74:	90 e0       	ldi	r25, 0x00	; 0
    ac76:	f9 01       	movw	r30, r18
    ac78:	19 95       	eicall
    ac7a:	88 23       	and	r24, r24
    ac7c:	09 f4       	brne	.+2      	; 0xac80 <draw_menu(bool)+0x21e>
    ac7e:	b4 c0       	rjmp	.+360    	; 0xade8 <draw_menu(bool)+0x386>
    ac80:	f2 01       	movw	r30, r4
    ac82:	31 97       	sbiw	r30, 0x01	; 1
    ac84:	e6 0d       	add	r30, r6
    ac86:	f7 1d       	adc	r31, r7
    ac88:	84 91       	lpm	r24, Z
    ac8a:	cd 52       	subi	r28, 0x2D	; 45
    ac8c:	df 4f       	sbci	r29, 0xFF	; 255
    ac8e:	68 81       	ld	r22, Y
    ac90:	c3 5d       	subi	r28, 0xD3	; 211
    ac92:	d0 40       	sbci	r29, 0x00	; 0
    ac94:	0e 94 42 3a 	call	0x7484	; 0x7484 <enable_redraw(unsigned char, unsigned char)>
    ac98:	88 23       	and	r24, r24
    ac9a:	09 f4       	brne	.+2      	; 0xac9e <draw_menu(bool)+0x23c>
    ac9c:	43 c0       	rjmp	.+134    	; 0xad24 <draw_menu(bool)+0x2c2>
    ac9e:	f2 01       	movw	r30, r4
    aca0:	3f 97       	sbiw	r30, 0x0f	; 15
    aca2:	e6 0d       	add	r30, r6
    aca4:	f7 1d       	adc	r31, r7
    aca6:	65 91       	lpm	r22, Z+
    aca8:	74 91       	lpm	r23, Z
    acaa:	ce 01       	movw	r24, r28
    acac:	8f 57       	subi	r24, 0x7F	; 127
    acae:	9f 4f       	sbci	r25, 0xFF	; 255
    acb0:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    acb4:	19 82       	std	Y+1, r1	; 0x01
    acb6:	f2 01       	movw	r30, r4
    acb8:	35 97       	sbiw	r30, 0x05	; 5
    acba:	e6 0d       	add	r30, r6
    acbc:	f7 1d       	adc	r31, r7
    acbe:	e4 90       	lpm	r14, Z
    acc0:	04 91       	lpm	r16, Z
    acc2:	f2 01       	movw	r30, r4
    acc4:	37 97       	sbiw	r30, 0x07	; 7
    acc6:	e6 0d       	add	r30, r6
    acc8:	f7 1d       	adc	r31, r7
    acca:	25 91       	lpm	r18, Z+
    accc:	34 91       	lpm	r19, Z
    acce:	f2 01       	movw	r30, r4
    acd0:	39 97       	sbiw	r30, 0x09	; 9
    acd2:	e6 0d       	add	r30, r6
    acd4:	f7 1d       	adc	r31, r7
    acd6:	45 91       	lpm	r20, Z+
    acd8:	54 91       	lpm	r21, Z
    acda:	f2 01       	movw	r30, r4
    acdc:	3b 97       	sbiw	r30, 0x0b	; 11
    acde:	e6 0d       	add	r30, r6
    ace0:	f7 1d       	adc	r31, r7
    ace2:	65 91       	lpm	r22, Z+
    ace4:	74 91       	lpm	r23, Z
    ace6:	f2 01       	movw	r30, r4
    ace8:	3d 97       	sbiw	r30, 0x0d	; 13
    acea:	e6 0d       	add	r30, r6
    acec:	f7 1d       	adc	r31, r7
    acee:	85 91       	lpm	r24, Z+
    acf0:	94 91       	lpm	r25, Z
    acf2:	c8 54       	subi	r28, 0x48	; 72
    acf4:	df 4f       	sbci	r29, 0xFF	; 255
    acf6:	e8 81       	ld	r30, Y
    acf8:	f9 81       	ldd	r31, Y+1	; 0x01
    acfa:	c8 5b       	subi	r28, 0xB8	; 184
    acfc:	d0 40       	sbci	r29, 0x00	; 0
    acfe:	6e 0f       	add	r22, r30
    ad00:	7f 1f       	adc	r23, r31
    ad02:	81 2c       	mov	r8, r1
    ad04:	fe 01       	movw	r30, r28
    ad06:	31 96       	adiw	r30, 0x01	; 1
    ad08:	5f 01       	movw	r10, r30
    ad0a:	e0 58       	subi	r30, 0x80	; 128
    ad0c:	ff 4f       	sbci	r31, 0xFF	; 255
    ad0e:	6f 01       	movw	r12, r30
    ad10:	ca 54       	subi	r28, 0x4A	; 74
    ad12:	df 4f       	sbci	r29, 0xFF	; 255
    ad14:	e8 81       	ld	r30, Y
    ad16:	f9 81       	ldd	r31, Y+1	; 0x01
    ad18:	c6 5b       	subi	r28, 0xB6	; 182
    ad1a:	d0 40       	sbci	r29, 0x00	; 0
    ad1c:	8e 0f       	add	r24, r30
    ad1e:	9f 1f       	adc	r25, r31
    ad20:	0e 94 98 51 	call	0xa330	; 0xa330 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
    ad24:	ce 53       	subi	r28, 0x3E	; 62
    ad26:	df 4f       	sbci	r29, 0xFF	; 255
    ad28:	28 81       	ld	r18, Y
    ad2a:	39 81       	ldd	r19, Y+1	; 0x01
    ad2c:	c2 5c       	subi	r28, 0xC2	; 194
    ad2e:	d0 40       	sbci	r29, 0x00	; 0
    ad30:	23 2b       	or	r18, r19
    ad32:	09 f4       	brne	.+2      	; 0xad36 <draw_menu(bool)+0x2d4>
    ad34:	59 c0       	rjmp	.+178    	; 0xade8 <draw_menu(bool)+0x386>
    ad36:	cc 53       	subi	r28, 0x3C	; 60
    ad38:	df 4f       	sbci	r29, 0xFF	; 255
    ad3a:	48 81       	ld	r20, Y
    ad3c:	59 81       	ldd	r21, Y+1	; 0x01
    ad3e:	c4 5c       	subi	r28, 0xC4	; 196
    ad40:	d0 40       	sbci	r29, 0x00	; 0
    ad42:	45 2b       	or	r20, r21
    ad44:	09 f4       	brne	.+2      	; 0xad48 <draw_menu(bool)+0x2e6>
    ad46:	50 c0       	rjmp	.+160    	; 0xade8 <draw_menu(bool)+0x386>
    ad48:	f2 01       	movw	r30, r4
    ad4a:	37 97       	sbiw	r30, 0x07	; 7
    ad4c:	e6 0d       	add	r30, r6
    ad4e:	f7 1d       	adc	r31, r7
    ad50:	25 91       	lpm	r18, Z+
    ad52:	34 91       	lpm	r19, Z
    ad54:	f2 01       	movw	r30, r4
    ad56:	39 97       	sbiw	r30, 0x09	; 9
    ad58:	e6 0d       	add	r30, r6
    ad5a:	f7 1d       	adc	r31, r7
    ad5c:	45 91       	lpm	r20, Z+
    ad5e:	54 91       	lpm	r21, Z
    ad60:	f2 01       	movw	r30, r4
    ad62:	3b 97       	sbiw	r30, 0x0b	; 11
    ad64:	e6 0d       	add	r30, r6
    ad66:	f7 1d       	adc	r31, r7
    ad68:	65 91       	lpm	r22, Z+
    ad6a:	74 91       	lpm	r23, Z
    ad6c:	f2 01       	movw	r30, r4
    ad6e:	3d 97       	sbiw	r30, 0x0d	; 13
    ad70:	e6 0d       	add	r30, r6
    ad72:	f7 1d       	adc	r31, r7
    ad74:	85 91       	lpm	r24, Z+
    ad76:	94 91       	lpm	r25, Z
    ad78:	c8 54       	subi	r28, 0x48	; 72
    ad7a:	df 4f       	sbci	r29, 0xFF	; 255
    ad7c:	e8 81       	ld	r30, Y
    ad7e:	f9 81       	ldd	r31, Y+1	; 0x01
    ad80:	c8 5b       	subi	r28, 0xB8	; 184
    ad82:	d0 40       	sbci	r29, 0x00	; 0
    ad84:	6e 0f       	add	r22, r30
    ad86:	7f 1f       	adc	r23, r31
    ad88:	cc 53       	subi	r28, 0x3C	; 60
    ad8a:	df 4f       	sbci	r29, 0xFF	; 255
    ad8c:	e8 80       	ld	r14, Y
    ad8e:	f9 80       	ldd	r15, Y+1	; 0x01
    ad90:	c4 5c       	subi	r28, 0xC4	; 196
    ad92:	d0 40       	sbci	r29, 0x00	; 0
    ad94:	ce 53       	subi	r28, 0x3E	; 62
    ad96:	df 4f       	sbci	r29, 0xFF	; 255
    ad98:	08 81       	ld	r16, Y
    ad9a:	19 81       	ldd	r17, Y+1	; 0x01
    ad9c:	c2 5c       	subi	r28, 0xC2	; 194
    ad9e:	d0 40       	sbci	r29, 0x00	; 0
    ada0:	ca 54       	subi	r28, 0x4A	; 74
    ada2:	df 4f       	sbci	r29, 0xFF	; 255
    ada4:	e8 81       	ld	r30, Y
    ada6:	f9 81       	ldd	r31, Y+1	; 0x01
    ada8:	c6 5b       	subi	r28, 0xB6	; 182
    adaa:	d0 40       	sbci	r29, 0x00	; 0
    adac:	8e 0f       	add	r24, r30
    adae:	9f 1f       	adc	r25, r31
    adb0:	0e 94 16 55 	call	0xaa2c	; 0xaa2c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    adb4:	18 2f       	mov	r17, r24
    adb6:	88 23       	and	r24, r24
    adb8:	b9 f0       	breq	.+46     	; 0xade8 <draw_menu(bool)+0x386>
    adba:	f2 01       	movw	r30, r4
    adbc:	33 97       	sbiw	r30, 0x03	; 3
    adbe:	e6 0d       	add	r30, r6
    adc0:	f7 1d       	adc	r31, r7
    adc2:	25 91       	lpm	r18, Z+
    adc4:	34 91       	lpm	r19, Z
    adc6:	f1 01       	movw	r30, r2
    adc8:	84 91       	lpm	r24, Z
    adca:	cf 54       	subi	r28, 0x4F	; 79
    adcc:	df 4f       	sbci	r29, 0xFF	; 255
    adce:	68 81       	ld	r22, Y
    add0:	c1 5b       	subi	r28, 0xB1	; 177
    add2:	d0 40       	sbci	r29, 0x00	; 0
    add4:	70 e0       	ldi	r23, 0x00	; 0
    add6:	49 2d       	mov	r20, r9
    add8:	90 e0       	ldi	r25, 0x00	; 0
    adda:	f9 01       	movw	r30, r18
    addc:	19 95       	eicall
    adde:	c6 53       	subi	r28, 0x36	; 54
    ade0:	df 4f       	sbci	r29, 0xFF	; 255
    ade2:	18 83       	st	Y, r17
    ade4:	ca 5c       	subi	r28, 0xCA	; 202
    ade6:	d0 40       	sbci	r29, 0x00	; 0
    ade8:	93 94       	inc	r9
    adea:	1d cf       	rjmp	.-454    	; 0xac26 <draw_menu(bool)+0x1c4>
    adec:	cc 53       	subi	r28, 0x3C	; 60
    adee:	df 4f       	sbci	r29, 0xFF	; 255
    adf0:	19 82       	std	Y+1, r1	; 0x01
    adf2:	18 82       	st	Y, r1
    adf4:	c4 5c       	subi	r28, 0xC4	; 196
    adf6:	d0 40       	sbci	r29, 0x00	; 0
    adf8:	ce 53       	subi	r28, 0x3E	; 62
    adfa:	df 4f       	sbci	r29, 0xFF	; 255
    adfc:	19 82       	std	Y+1, r1	; 0x01
    adfe:	18 82       	st	Y, r1
    ae00:	c2 5c       	subi	r28, 0xC2	; 194
    ae02:	d0 40       	sbci	r29, 0x00	; 0
    ae04:	71 ce       	rjmp	.-798    	; 0xaae8 <draw_menu(bool)+0x86>
    ae06:	68 94       	set
    ae08:	91 f8       	bld	r9, 1
    ae0a:	b8 ce       	rjmp	.-656    	; 0xab7c <draw_menu(bool)+0x11a>
    ae0c:	89 2d       	mov	r24, r9
    ae0e:	84 60       	ori	r24, 0x04	; 4
    ae10:	ca ce       	rjmp	.-620    	; 0xaba6 <draw_menu(bool)+0x144>
    ae12:	88 60       	ori	r24, 0x08	; 8
    ae14:	cb ce       	rjmp	.-618    	; 0xabac <draw_menu(bool)+0x14a>
    ae16:	c6 53       	subi	r28, 0x36	; 54
    ae18:	df 4f       	sbci	r29, 0xFF	; 255
    ae1a:	f8 81       	ld	r31, Y
    ae1c:	ca 5c       	subi	r28, 0xCA	; 202
    ae1e:	d0 40       	sbci	r29, 0x00	; 0
    ae20:	f1 11       	cpse	r31, r1
    ae22:	0c 94 39 66 	jmp	0xcc72	; 0xcc72 <draw_menu(bool)+0x2210>
    ae26:	91 2c       	mov	r9, r1
    ae28:	93 01       	movw	r18, r6
    ae2a:	22 54       	subi	r18, 0x42	; 66
    ae2c:	3d 4f       	sbci	r19, 0xFD	; 253
    ae2e:	c0 54       	subi	r28, 0x40	; 64
    ae30:	df 4f       	sbci	r29, 0xFF	; 255
    ae32:	39 83       	std	Y+1, r19	; 0x01
    ae34:	28 83       	st	Y, r18
    ae36:	c0 5c       	subi	r28, 0xC0	; 192
    ae38:	d0 40       	sbci	r29, 0x00	; 0
    ae3a:	1e 01       	movw	r2, r28
    ae3c:	31 e8       	ldi	r19, 0x81	; 129
    ae3e:	23 0e       	add	r2, r19
    ae40:	31 1c       	adc	r3, r1
    ae42:	c0 54       	subi	r28, 0x40	; 64
    ae44:	df 4f       	sbci	r29, 0xFF	; 255
    ae46:	e8 81       	ld	r30, Y
    ae48:	f9 81       	ldd	r31, Y+1	; 0x01
    ae4a:	c0 5c       	subi	r28, 0xC0	; 192
    ae4c:	d0 40       	sbci	r29, 0x00	; 0
    ae4e:	84 91       	lpm	r24, Z
    ae50:	98 16       	cp	r9, r24
    ae52:	08 f0       	brcs	.+2      	; 0xae56 <draw_menu(bool)+0x3f4>
    ae54:	1c c1       	rjmp	.+568    	; 0xb08e <draw_menu(bool)+0x62c>
    ae56:	f7 e1       	ldi	r31, 0x17	; 23
    ae58:	9f 9e       	mul	r9, r31
    ae5a:	20 01       	movw	r4, r0
    ae5c:	11 24       	eor	r1, r1
    ae5e:	f2 01       	movw	r30, r4
    ae60:	ef 53       	subi	r30, 0x3F	; 63
    ae62:	ff 4f       	sbci	r31, 0xFF	; 255
    ae64:	e6 0d       	add	r30, r6
    ae66:	f7 1d       	adc	r31, r7
    ae68:	25 91       	lpm	r18, Z+
    ae6a:	34 91       	lpm	r19, Z
    ae6c:	c2 01       	movw	r24, r4
    ae6e:	85 54       	subi	r24, 0x45	; 69
    ae70:	9f 4f       	sbci	r25, 0xFF	; 255
    ae72:	a3 01       	movw	r20, r6
    ae74:	48 0f       	add	r20, r24
    ae76:	59 1f       	adc	r21, r25
    ae78:	c6 54       	subi	r28, 0x46	; 70
    ae7a:	df 4f       	sbci	r29, 0xFF	; 255
    ae7c:	59 83       	std	Y+1, r21	; 0x01
    ae7e:	48 83       	st	Y, r20
    ae80:	ca 5b       	subi	r28, 0xBA	; 186
    ae82:	d0 40       	sbci	r29, 0x00	; 0
    ae84:	fa 01       	movw	r30, r20
    ae86:	84 91       	lpm	r24, Z
    ae88:	cf 54       	subi	r28, 0x4F	; 79
    ae8a:	df 4f       	sbci	r29, 0xFF	; 255
    ae8c:	68 81       	ld	r22, Y
    ae8e:	c1 5b       	subi	r28, 0xB1	; 177
    ae90:	d0 40       	sbci	r29, 0x00	; 0
    ae92:	70 e0       	ldi	r23, 0x00	; 0
    ae94:	49 2d       	mov	r20, r9
    ae96:	90 e0       	ldi	r25, 0x00	; 0
    ae98:	f9 01       	movw	r30, r18
    ae9a:	19 95       	eicall
    ae9c:	88 23       	and	r24, r24
    ae9e:	09 f4       	brne	.+2      	; 0xaea2 <draw_menu(bool)+0x440>
    aea0:	f4 c0       	rjmp	.+488    	; 0xb08a <draw_menu(bool)+0x628>
    aea2:	f2 01       	movw	r30, r4
    aea4:	e0 54       	subi	r30, 0x40	; 64
    aea6:	ff 4f       	sbci	r31, 0xFF	; 255
    aea8:	e6 0d       	add	r30, r6
    aeaa:	f7 1d       	adc	r31, r7
    aeac:	84 91       	lpm	r24, Z
    aeae:	cd 52       	subi	r28, 0x2D	; 45
    aeb0:	df 4f       	sbci	r29, 0xFF	; 255
    aeb2:	68 81       	ld	r22, Y
    aeb4:	c3 5d       	subi	r28, 0xD3	; 211
    aeb6:	d0 40       	sbci	r29, 0x00	; 0
    aeb8:	0e 94 42 3a 	call	0x7484	; 0x7484 <enable_redraw(unsigned char, unsigned char)>
    aebc:	88 23       	and	r24, r24
    aebe:	09 f4       	brne	.+2      	; 0xaec2 <draw_menu(bool)+0x460>
    aec0:	78 c0       	rjmp	.+240    	; 0xafb2 <draw_menu(bool)+0x550>
    aec2:	f2 01       	movw	r30, r4
    aec4:	e4 55       	subi	r30, 0x54	; 84
    aec6:	ff 4f       	sbci	r31, 0xFF	; 255
    aec8:	e6 0d       	add	r30, r6
    aeca:	f7 1d       	adc	r31, r7
    aecc:	65 91       	lpm	r22, Z+
    aece:	74 91       	lpm	r23, Z
    aed0:	c1 01       	movw	r24, r2
    aed2:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    aed6:	f2 01       	movw	r30, r4
    aed8:	e2 54       	subi	r30, 0x42	; 66
    aeda:	ff 4f       	sbci	r31, 0xFF	; 255
    aedc:	e6 0d       	add	r30, r6
    aede:	f7 1d       	adc	r31, r7
    aee0:	25 91       	lpm	r18, Z+
    aee2:	34 91       	lpm	r19, Z
    aee4:	c6 54       	subi	r28, 0x46	; 70
    aee6:	df 4f       	sbci	r29, 0xFF	; 255
    aee8:	e8 81       	ld	r30, Y
    aeea:	f9 81       	ldd	r31, Y+1	; 0x01
    aeec:	ca 5b       	subi	r28, 0xBA	; 186
    aeee:	d0 40       	sbci	r29, 0x00	; 0
    aef0:	84 91       	lpm	r24, Z
    aef2:	cf 54       	subi	r28, 0x4F	; 79
    aef4:	df 4f       	sbci	r29, 0xFF	; 255
    aef6:	68 81       	ld	r22, Y
    aef8:	c1 5b       	subi	r28, 0xB1	; 177
    aefa:	d0 40       	sbci	r29, 0x00	; 0
    aefc:	70 e0       	ldi	r23, 0x00	; 0
    aefe:	49 2d       	mov	r20, r9
    af00:	90 e0       	ldi	r25, 0x00	; 0
    af02:	f9 01       	movw	r30, r18
    af04:	19 95       	eicall
    af06:	19 82       	std	Y+1, r1	; 0x01
    af08:	f2 01       	movw	r30, r4
    af0a:	e7 54       	subi	r30, 0x47	; 71
    af0c:	ff 4f       	sbci	r31, 0xFF	; 255
    af0e:	e6 0d       	add	r30, r6
    af10:	f7 1d       	adc	r31, r7
    af12:	a5 90       	lpm	r10, Z+
    af14:	b4 90       	lpm	r11, Z
    af16:	f2 01       	movw	r30, r4
    af18:	e9 54       	subi	r30, 0x49	; 73
    af1a:	ff 4f       	sbci	r31, 0xFF	; 255
    af1c:	e6 0d       	add	r30, r6
    af1e:	f7 1d       	adc	r31, r7
    af20:	c5 90       	lpm	r12, Z+
    af22:	d4 90       	lpm	r13, Z
    af24:	82 01       	movw	r16, r4
    af26:	0a 54       	subi	r16, 0x4A	; 74
    af28:	1f 4f       	sbci	r17, 0xFF	; 255
    af2a:	06 0d       	add	r16, r6
    af2c:	17 1d       	adc	r17, r7
    af2e:	f8 01       	movw	r30, r16
    af30:	04 91       	lpm	r16, Z
    af32:	f2 01       	movw	r30, r4
    af34:	ec 54       	subi	r30, 0x4C	; 76
    af36:	ff 4f       	sbci	r31, 0xFF	; 255
    af38:	e6 0d       	add	r30, r6
    af3a:	f7 1d       	adc	r31, r7
    af3c:	25 91       	lpm	r18, Z+
    af3e:	34 91       	lpm	r19, Z
    af40:	f2 01       	movw	r30, r4
    af42:	ee 54       	subi	r30, 0x4E	; 78
    af44:	ff 4f       	sbci	r31, 0xFF	; 255
    af46:	e6 0d       	add	r30, r6
    af48:	f7 1d       	adc	r31, r7
    af4a:	45 91       	lpm	r20, Z+
    af4c:	54 91       	lpm	r21, Z
    af4e:	f2 01       	movw	r30, r4
    af50:	e0 55       	subi	r30, 0x50	; 80
    af52:	ff 4f       	sbci	r31, 0xFF	; 255
    af54:	e6 0d       	add	r30, r6
    af56:	f7 1d       	adc	r31, r7
    af58:	65 91       	lpm	r22, Z+
    af5a:	74 91       	lpm	r23, Z
    af5c:	f2 01       	movw	r30, r4
    af5e:	e2 55       	subi	r30, 0x52	; 82
    af60:	ff 4f       	sbci	r31, 0xFF	; 255
    af62:	e6 0d       	add	r30, r6
    af64:	f7 1d       	adc	r31, r7
    af66:	a5 91       	lpm	r26, Z+
    af68:	b4 91       	lpm	r27, Z
    af6a:	88 24       	eor	r8, r8
    af6c:	83 94       	inc	r8
    af6e:	81 11       	cpse	r24, r1
    af70:	01 c0       	rjmp	.+2      	; 0xaf74 <draw_menu(bool)+0x512>
    af72:	81 2c       	mov	r8, r1
    af74:	c8 54       	subi	r28, 0x48	; 72
    af76:	df 4f       	sbci	r29, 0xFF	; 255
    af78:	88 81       	ld	r24, Y
    af7a:	99 81       	ldd	r25, Y+1	; 0x01
    af7c:	c8 5b       	subi	r28, 0xB8	; 184
    af7e:	d0 40       	sbci	r29, 0x00	; 0
    af80:	68 0f       	add	r22, r24
    af82:	79 1f       	adc	r23, r25
    af84:	e1 e0       	ldi	r30, 0x01	; 1
    af86:	f0 e0       	ldi	r31, 0x00	; 0
    af88:	ec 0f       	add	r30, r28
    af8a:	fd 1f       	adc	r31, r29
    af8c:	ff 93       	push	r31
    af8e:	ef 93       	push	r30
    af90:	3f 92       	push	r3
    af92:	2f 92       	push	r2
    af94:	e1 2c       	mov	r14, r1
    af96:	ca 54       	subi	r28, 0x4A	; 74
    af98:	df 4f       	sbci	r29, 0xFF	; 255
    af9a:	88 81       	ld	r24, Y
    af9c:	99 81       	ldd	r25, Y+1	; 0x01
    af9e:	c6 5b       	subi	r28, 0xB6	; 182
    afa0:	d0 40       	sbci	r29, 0x00	; 0
    afa2:	8a 0f       	add	r24, r26
    afa4:	9b 1f       	adc	r25, r27
    afa6:	0e 94 94 52 	call	0xa528	; 0xa528 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    afaa:	0f 90       	pop	r0
    afac:	0f 90       	pop	r0
    afae:	0f 90       	pop	r0
    afb0:	0f 90       	pop	r0
    afb2:	ce 53       	subi	r28, 0x3E	; 62
    afb4:	df 4f       	sbci	r29, 0xFF	; 255
    afb6:	28 81       	ld	r18, Y
    afb8:	39 81       	ldd	r19, Y+1	; 0x01
    afba:	c2 5c       	subi	r28, 0xC2	; 194
    afbc:	d0 40       	sbci	r29, 0x00	; 0
    afbe:	23 2b       	or	r18, r19
    afc0:	09 f4       	brne	.+2      	; 0xafc4 <draw_menu(bool)+0x562>
    afc2:	63 c0       	rjmp	.+198    	; 0xb08a <draw_menu(bool)+0x628>
    afc4:	cc 53       	subi	r28, 0x3C	; 60
    afc6:	df 4f       	sbci	r29, 0xFF	; 255
    afc8:	48 81       	ld	r20, Y
    afca:	59 81       	ldd	r21, Y+1	; 0x01
    afcc:	c4 5c       	subi	r28, 0xC4	; 196
    afce:	d0 40       	sbci	r29, 0x00	; 0
    afd0:	45 2b       	or	r20, r21
    afd2:	09 f4       	brne	.+2      	; 0xafd6 <draw_menu(bool)+0x574>
    afd4:	5a c0       	rjmp	.+180    	; 0xb08a <draw_menu(bool)+0x628>
    afd6:	f2 01       	movw	r30, r4
    afd8:	ec 54       	subi	r30, 0x4C	; 76
    afda:	ff 4f       	sbci	r31, 0xFF	; 255
    afdc:	e6 0d       	add	r30, r6
    afde:	f7 1d       	adc	r31, r7
    afe0:	25 91       	lpm	r18, Z+
    afe2:	34 91       	lpm	r19, Z
    afe4:	f2 01       	movw	r30, r4
    afe6:	ee 54       	subi	r30, 0x4E	; 78
    afe8:	ff 4f       	sbci	r31, 0xFF	; 255
    afea:	e6 0d       	add	r30, r6
    afec:	f7 1d       	adc	r31, r7
    afee:	45 91       	lpm	r20, Z+
    aff0:	54 91       	lpm	r21, Z
    aff2:	f2 01       	movw	r30, r4
    aff4:	e0 55       	subi	r30, 0x50	; 80
    aff6:	ff 4f       	sbci	r31, 0xFF	; 255
    aff8:	e6 0d       	add	r30, r6
    affa:	f7 1d       	adc	r31, r7
    affc:	65 91       	lpm	r22, Z+
    affe:	74 91       	lpm	r23, Z
    b000:	f2 01       	movw	r30, r4
    b002:	e2 55       	subi	r30, 0x52	; 82
    b004:	ff 4f       	sbci	r31, 0xFF	; 255
    b006:	e6 0d       	add	r30, r6
    b008:	f7 1d       	adc	r31, r7
    b00a:	85 91       	lpm	r24, Z+
    b00c:	94 91       	lpm	r25, Z
    b00e:	c8 54       	subi	r28, 0x48	; 72
    b010:	df 4f       	sbci	r29, 0xFF	; 255
    b012:	e8 81       	ld	r30, Y
    b014:	f9 81       	ldd	r31, Y+1	; 0x01
    b016:	c8 5b       	subi	r28, 0xB8	; 184
    b018:	d0 40       	sbci	r29, 0x00	; 0
    b01a:	6e 0f       	add	r22, r30
    b01c:	7f 1f       	adc	r23, r31
    b01e:	cc 53       	subi	r28, 0x3C	; 60
    b020:	df 4f       	sbci	r29, 0xFF	; 255
    b022:	e8 80       	ld	r14, Y
    b024:	f9 80       	ldd	r15, Y+1	; 0x01
    b026:	c4 5c       	subi	r28, 0xC4	; 196
    b028:	d0 40       	sbci	r29, 0x00	; 0
    b02a:	ce 53       	subi	r28, 0x3E	; 62
    b02c:	df 4f       	sbci	r29, 0xFF	; 255
    b02e:	08 81       	ld	r16, Y
    b030:	19 81       	ldd	r17, Y+1	; 0x01
    b032:	c2 5c       	subi	r28, 0xC2	; 194
    b034:	d0 40       	sbci	r29, 0x00	; 0
    b036:	ca 54       	subi	r28, 0x4A	; 74
    b038:	df 4f       	sbci	r29, 0xFF	; 255
    b03a:	e8 81       	ld	r30, Y
    b03c:	f9 81       	ldd	r31, Y+1	; 0x01
    b03e:	c6 5b       	subi	r28, 0xB6	; 182
    b040:	d0 40       	sbci	r29, 0x00	; 0
    b042:	8e 0f       	add	r24, r30
    b044:	9f 1f       	adc	r25, r31
    b046:	0e 94 16 55 	call	0xaa2c	; 0xaa2c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b04a:	18 2f       	mov	r17, r24
    b04c:	88 23       	and	r24, r24
    b04e:	e9 f0       	breq	.+58     	; 0xb08a <draw_menu(bool)+0x628>
    b050:	f2 01       	movw	r30, r4
    b052:	e4 54       	subi	r30, 0x44	; 68
    b054:	ff 4f       	sbci	r31, 0xFF	; 255
    b056:	e6 0d       	add	r30, r6
    b058:	f7 1d       	adc	r31, r7
    b05a:	25 91       	lpm	r18, Z+
    b05c:	34 91       	lpm	r19, Z
    b05e:	c6 54       	subi	r28, 0x46	; 70
    b060:	df 4f       	sbci	r29, 0xFF	; 255
    b062:	e8 81       	ld	r30, Y
    b064:	f9 81       	ldd	r31, Y+1	; 0x01
    b066:	ca 5b       	subi	r28, 0xBA	; 186
    b068:	d0 40       	sbci	r29, 0x00	; 0
    b06a:	84 91       	lpm	r24, Z
    b06c:	cf 54       	subi	r28, 0x4F	; 79
    b06e:	df 4f       	sbci	r29, 0xFF	; 255
    b070:	68 81       	ld	r22, Y
    b072:	c1 5b       	subi	r28, 0xB1	; 177
    b074:	d0 40       	sbci	r29, 0x00	; 0
    b076:	70 e0       	ldi	r23, 0x00	; 0
    b078:	49 2d       	mov	r20, r9
    b07a:	90 e0       	ldi	r25, 0x00	; 0
    b07c:	f9 01       	movw	r30, r18
    b07e:	19 95       	eicall
    b080:	c6 53       	subi	r28, 0x36	; 54
    b082:	df 4f       	sbci	r29, 0xFF	; 255
    b084:	18 83       	st	Y, r17
    b086:	ca 5c       	subi	r28, 0xCA	; 202
    b088:	d0 40       	sbci	r29, 0x00	; 0
    b08a:	93 94       	inc	r9
    b08c:	da ce       	rjmp	.-588    	; 0xae42 <draw_menu(bool)+0x3e0>
    b08e:	c6 53       	subi	r28, 0x36	; 54
    b090:	df 4f       	sbci	r29, 0xFF	; 255
    b092:	f8 81       	ld	r31, Y
    b094:	ca 5c       	subi	r28, 0xCA	; 202
    b096:	d0 40       	sbci	r29, 0x00	; 0
    b098:	f1 11       	cpse	r31, r1
    b09a:	0c 94 39 66 	jmp	0xcc72	; 0xcc72 <draw_menu(bool)+0x2210>
    b09e:	91 2c       	mov	r9, r1
    b0a0:	23 01       	movw	r4, r6
    b0a2:	21 e4       	ldi	r18, 0x41	; 65
    b0a4:	42 1a       	sub	r4, r18
    b0a6:	2d ef       	ldi	r18, 0xFD	; 253
    b0a8:	52 0a       	sbc	r5, r18
    b0aa:	92 e1       	ldi	r25, 0x12	; 18
    b0ac:	89 2e       	mov	r8, r25
    b0ae:	f2 01       	movw	r30, r4
    b0b0:	84 91       	lpm	r24, Z
    b0b2:	98 16       	cp	r9, r24
    b0b4:	08 f0       	brcs	.+2      	; 0xb0b8 <draw_menu(bool)+0x656>
    b0b6:	cc c0       	rjmp	.+408    	; 0xb250 <draw_menu(bool)+0x7ee>
    b0b8:	98 9c       	mul	r9, r8
    b0ba:	50 01       	movw	r10, r0
    b0bc:	11 24       	eor	r1, r1
    b0be:	f5 01       	movw	r30, r10
    b0c0:	e3 5d       	subi	r30, 0xD3	; 211
    b0c2:	fe 4f       	sbci	r31, 0xFE	; 254
    b0c4:	e6 0d       	add	r30, r6
    b0c6:	f7 1d       	adc	r31, r7
    b0c8:	25 91       	lpm	r18, Z+
    b0ca:	34 91       	lpm	r19, Z
    b0cc:	85 01       	movw	r16, r10
    b0ce:	0d 5d       	subi	r16, 0xDD	; 221
    b0d0:	1e 4f       	sbci	r17, 0xFE	; 254
    b0d2:	06 0d       	add	r16, r6
    b0d4:	17 1d       	adc	r17, r7
    b0d6:	f8 01       	movw	r30, r16
    b0d8:	84 91       	lpm	r24, Z
    b0da:	cf 54       	subi	r28, 0x4F	; 79
    b0dc:	df 4f       	sbci	r29, 0xFF	; 255
    b0de:	68 81       	ld	r22, Y
    b0e0:	c1 5b       	subi	r28, 0xB1	; 177
    b0e2:	d0 40       	sbci	r29, 0x00	; 0
    b0e4:	70 e0       	ldi	r23, 0x00	; 0
    b0e6:	49 2d       	mov	r20, r9
    b0e8:	90 e0       	ldi	r25, 0x00	; 0
    b0ea:	f9 01       	movw	r30, r18
    b0ec:	19 95       	eicall
    b0ee:	88 23       	and	r24, r24
    b0f0:	09 f4       	brne	.+2      	; 0xb0f4 <draw_menu(bool)+0x692>
    b0f2:	ac c0       	rjmp	.+344    	; 0xb24c <draw_menu(bool)+0x7ea>
    b0f4:	f5 01       	movw	r30, r10
    b0f6:	e6 5d       	subi	r30, 0xD6	; 214
    b0f8:	fe 4f       	sbci	r31, 0xFE	; 254
    b0fa:	e6 0d       	add	r30, r6
    b0fc:	f7 1d       	adc	r31, r7
    b0fe:	84 91       	lpm	r24, Z
    b100:	cd 52       	subi	r28, 0x2D	; 45
    b102:	df 4f       	sbci	r29, 0xFF	; 255
    b104:	68 81       	ld	r22, Y
    b106:	c3 5d       	subi	r28, 0xD3	; 211
    b108:	d0 40       	sbci	r29, 0x00	; 0
    b10a:	0e 94 42 3a 	call	0x7484	; 0x7484 <enable_redraw(unsigned char, unsigned char)>
    b10e:	88 23       	and	r24, r24
    b110:	09 f4       	brne	.+2      	; 0xb114 <draw_menu(bool)+0x6b2>
    b112:	4a c0       	rjmp	.+148    	; 0xb1a8 <draw_menu(bool)+0x746>
    b114:	f5 01       	movw	r30, r10
    b116:	e1 5d       	subi	r30, 0xD1	; 209
    b118:	fe 4f       	sbci	r31, 0xFE	; 254
    b11a:	e6 0d       	add	r30, r6
    b11c:	f7 1d       	adc	r31, r7
    b11e:	65 91       	lpm	r22, Z+
    b120:	74 91       	lpm	r23, Z
    b122:	ce 01       	movw	r24, r28
    b124:	01 96       	adiw	r24, 0x01	; 1
    b126:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    b12a:	f5 01       	movw	r30, r10
    b12c:	ec 5d       	subi	r30, 0xDC	; 220
    b12e:	fe 4f       	sbci	r31, 0xFE	; 254
    b130:	e6 0d       	add	r30, r6
    b132:	f7 1d       	adc	r31, r7
    b134:	a5 91       	lpm	r26, Z+
    b136:	b4 91       	lpm	r27, Z
    b138:	f8 01       	movw	r30, r16
    b13a:	04 91       	lpm	r16, Z
    b13c:	f5 01       	movw	r30, r10
    b13e:	e8 5d       	subi	r30, 0xD8	; 216
    b140:	fe 4f       	sbci	r31, 0xFE	; 254
    b142:	e6 0d       	add	r30, r6
    b144:	f7 1d       	adc	r31, r7
    b146:	25 91       	lpm	r18, Z+
    b148:	34 91       	lpm	r19, Z
    b14a:	f5 01       	movw	r30, r10
    b14c:	ea 5d       	subi	r30, 0xDA	; 218
    b14e:	fe 4f       	sbci	r31, 0xFE	; 254
    b150:	e6 0d       	add	r30, r6
    b152:	f7 1d       	adc	r31, r7
    b154:	45 91       	lpm	r20, Z+
    b156:	54 91       	lpm	r21, Z
    b158:	f5 01       	movw	r30, r10
    b15a:	ef 5d       	subi	r30, 0xDF	; 223
    b15c:	fe 4f       	sbci	r31, 0xFE	; 254
    b15e:	e6 0d       	add	r30, r6
    b160:	f7 1d       	adc	r31, r7
    b162:	65 91       	lpm	r22, Z+
    b164:	74 91       	lpm	r23, Z
    b166:	f5 01       	movw	r30, r10
    b168:	e1 5e       	subi	r30, 0xE1	; 225
    b16a:	fe 4f       	sbci	r31, 0xFE	; 254
    b16c:	e6 0d       	add	r30, r6
    b16e:	f7 1d       	adc	r31, r7
    b170:	85 91       	lpm	r24, Z+
    b172:	94 91       	lpm	r25, Z
    b174:	c8 54       	subi	r28, 0x48	; 72
    b176:	df 4f       	sbci	r29, 0xFF	; 255
    b178:	e8 81       	ld	r30, Y
    b17a:	f9 81       	ldd	r31, Y+1	; 0x01
    b17c:	c8 5b       	subi	r28, 0xB8	; 184
    b17e:	d0 40       	sbci	r29, 0x00	; 0
    b180:	6e 0f       	add	r22, r30
    b182:	7f 1f       	adc	r23, r31
    b184:	fe 01       	movw	r30, r28
    b186:	31 96       	adiw	r30, 0x01	; 1
    b188:	6f 01       	movw	r12, r30
    b18a:	cf 54       	subi	r28, 0x4F	; 79
    b18c:	df 4f       	sbci	r29, 0xFF	; 255
    b18e:	e8 80       	ld	r14, Y
    b190:	c1 5b       	subi	r28, 0xB1	; 177
    b192:	d0 40       	sbci	r29, 0x00	; 0
    b194:	ca 54       	subi	r28, 0x4A	; 74
    b196:	df 4f       	sbci	r29, 0xFF	; 255
    b198:	e8 81       	ld	r30, Y
    b19a:	f9 81       	ldd	r31, Y+1	; 0x01
    b19c:	c6 5b       	subi	r28, 0xB6	; 182
    b19e:	d0 40       	sbci	r29, 0x00	; 0
    b1a0:	8e 0f       	add	r24, r30
    b1a2:	9f 1f       	adc	r25, r31
    b1a4:	fd 01       	movw	r30, r26
    b1a6:	19 95       	eicall
    b1a8:	ce 53       	subi	r28, 0x3E	; 62
    b1aa:	df 4f       	sbci	r29, 0xFF	; 255
    b1ac:	28 81       	ld	r18, Y
    b1ae:	39 81       	ldd	r19, Y+1	; 0x01
    b1b0:	c2 5c       	subi	r28, 0xC2	; 194
    b1b2:	d0 40       	sbci	r29, 0x00	; 0
    b1b4:	23 2b       	or	r18, r19
    b1b6:	09 f4       	brne	.+2      	; 0xb1ba <draw_menu(bool)+0x758>
    b1b8:	49 c0       	rjmp	.+146    	; 0xb24c <draw_menu(bool)+0x7ea>
    b1ba:	cc 53       	subi	r28, 0x3C	; 60
    b1bc:	df 4f       	sbci	r29, 0xFF	; 255
    b1be:	48 81       	ld	r20, Y
    b1c0:	59 81       	ldd	r21, Y+1	; 0x01
    b1c2:	c4 5c       	subi	r28, 0xC4	; 196
    b1c4:	d0 40       	sbci	r29, 0x00	; 0
    b1c6:	45 2b       	or	r20, r21
    b1c8:	09 f4       	brne	.+2      	; 0xb1cc <draw_menu(bool)+0x76a>
    b1ca:	40 c0       	rjmp	.+128    	; 0xb24c <draw_menu(bool)+0x7ea>
    b1cc:	f5 01       	movw	r30, r10
    b1ce:	e8 5d       	subi	r30, 0xD8	; 216
    b1d0:	fe 4f       	sbci	r31, 0xFE	; 254
    b1d2:	e6 0d       	add	r30, r6
    b1d4:	f7 1d       	adc	r31, r7
    b1d6:	25 91       	lpm	r18, Z+
    b1d8:	34 91       	lpm	r19, Z
    b1da:	f5 01       	movw	r30, r10
    b1dc:	ea 5d       	subi	r30, 0xDA	; 218
    b1de:	fe 4f       	sbci	r31, 0xFE	; 254
    b1e0:	e6 0d       	add	r30, r6
    b1e2:	f7 1d       	adc	r31, r7
    b1e4:	45 91       	lpm	r20, Z+
    b1e6:	54 91       	lpm	r21, Z
    b1e8:	f5 01       	movw	r30, r10
    b1ea:	ef 5d       	subi	r30, 0xDF	; 223
    b1ec:	fe 4f       	sbci	r31, 0xFE	; 254
    b1ee:	e6 0d       	add	r30, r6
    b1f0:	f7 1d       	adc	r31, r7
    b1f2:	65 91       	lpm	r22, Z+
    b1f4:	74 91       	lpm	r23, Z
    b1f6:	f5 01       	movw	r30, r10
    b1f8:	e1 5e       	subi	r30, 0xE1	; 225
    b1fa:	fe 4f       	sbci	r31, 0xFE	; 254
    b1fc:	e6 0d       	add	r30, r6
    b1fe:	f7 1d       	adc	r31, r7
    b200:	85 91       	lpm	r24, Z+
    b202:	94 91       	lpm	r25, Z
    b204:	c8 54       	subi	r28, 0x48	; 72
    b206:	df 4f       	sbci	r29, 0xFF	; 255
    b208:	e8 81       	ld	r30, Y
    b20a:	f9 81       	ldd	r31, Y+1	; 0x01
    b20c:	c8 5b       	subi	r28, 0xB8	; 184
    b20e:	d0 40       	sbci	r29, 0x00	; 0
    b210:	6e 0f       	add	r22, r30
    b212:	7f 1f       	adc	r23, r31
    b214:	cc 53       	subi	r28, 0x3C	; 60
    b216:	df 4f       	sbci	r29, 0xFF	; 255
    b218:	e8 80       	ld	r14, Y
    b21a:	f9 80       	ldd	r15, Y+1	; 0x01
    b21c:	c4 5c       	subi	r28, 0xC4	; 196
    b21e:	d0 40       	sbci	r29, 0x00	; 0
    b220:	ce 53       	subi	r28, 0x3E	; 62
    b222:	df 4f       	sbci	r29, 0xFF	; 255
    b224:	08 81       	ld	r16, Y
    b226:	19 81       	ldd	r17, Y+1	; 0x01
    b228:	c2 5c       	subi	r28, 0xC2	; 194
    b22a:	d0 40       	sbci	r29, 0x00	; 0
    b22c:	ca 54       	subi	r28, 0x4A	; 74
    b22e:	df 4f       	sbci	r29, 0xFF	; 255
    b230:	e8 81       	ld	r30, Y
    b232:	f9 81       	ldd	r31, Y+1	; 0x01
    b234:	c6 5b       	subi	r28, 0xB6	; 182
    b236:	d0 40       	sbci	r29, 0x00	; 0
    b238:	8e 0f       	add	r24, r30
    b23a:	9f 1f       	adc	r25, r31
    b23c:	0e 94 16 55 	call	0xaa2c	; 0xaa2c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b240:	88 23       	and	r24, r24
    b242:	21 f0       	breq	.+8      	; 0xb24c <draw_menu(bool)+0x7ea>
    b244:	86 e4       	ldi	r24, 0x46	; 70
    b246:	95 e0       	ldi	r25, 0x05	; 5
    b248:	0e 94 82 dd 	call	0x1bb04	; 0x1bb04 <puts>
    b24c:	93 94       	inc	r9
    b24e:	2f cf       	rjmp	.-418    	; 0xb0ae <draw_menu(bool)+0x64c>
    b250:	51 2c       	mov	r5, r1
    b252:	13 01       	movw	r2, r6
    b254:	f0 e4       	ldi	r31, 0x40	; 64
    b256:	2f 1a       	sub	r2, r31
    b258:	fd ef       	ldi	r31, 0xFD	; 253
    b25a:	3f 0a       	sbc	r3, r31
    b25c:	87 e1       	ldi	r24, 0x17	; 23
    b25e:	48 2e       	mov	r4, r24
    b260:	f1 01       	movw	r30, r2
    b262:	84 91       	lpm	r24, Z
    b264:	58 16       	cp	r5, r24
    b266:	08 f0       	brcs	.+2      	; 0xb26a <draw_menu(bool)+0x808>
    b268:	01 c1       	rjmp	.+514    	; 0xb46c <draw_menu(bool)+0xa0a>
    b26a:	54 9c       	mul	r5, r4
    b26c:	40 01       	movw	r8, r0
    b26e:	11 24       	eor	r1, r1
    b270:	f4 01       	movw	r30, r8
    b272:	e3 58       	subi	r30, 0x83	; 131
    b274:	fe 4f       	sbci	r31, 0xFE	; 254
    b276:	e6 0d       	add	r30, r6
    b278:	f7 1d       	adc	r31, r7
    b27a:	84 91       	lpm	r24, Z
    b27c:	cd 52       	subi	r28, 0x2D	; 45
    b27e:	df 4f       	sbci	r29, 0xFF	; 255
    b280:	68 81       	ld	r22, Y
    b282:	c3 5d       	subi	r28, 0xD3	; 211
    b284:	d0 40       	sbci	r29, 0x00	; 0
    b286:	0e 94 42 3a 	call	0x7484	; 0x7484 <enable_redraw(unsigned char, unsigned char)>
    b28a:	88 23       	and	r24, r24
    b28c:	09 f4       	brne	.+2      	; 0xb290 <draw_menu(bool)+0x82e>
    b28e:	81 c0       	rjmp	.+258    	; 0xb392 <draw_menu(bool)+0x930>
    b290:	f4 01       	movw	r30, r8
    b292:	e9 59       	subi	r30, 0x99	; 153
    b294:	fe 4f       	sbci	r31, 0xFE	; 254
    b296:	e6 0d       	add	r30, r6
    b298:	f7 1d       	adc	r31, r7
    b29a:	65 91       	lpm	r22, Z+
    b29c:	74 91       	lpm	r23, Z
    b29e:	ce 01       	movw	r24, r28
    b2a0:	8f 57       	subi	r24, 0x7F	; 127
    b2a2:	9f 4f       	sbci	r25, 0xFF	; 255
    b2a4:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    b2a8:	f4 01       	movw	r30, r8
    b2aa:	e7 58       	subi	r30, 0x87	; 135
    b2ac:	fe 4f       	sbci	r31, 0xFE	; 254
    b2ae:	e6 0d       	add	r30, r6
    b2b0:	f7 1d       	adc	r31, r7
    b2b2:	25 91       	lpm	r18, Z+
    b2b4:	34 91       	lpm	r19, Z
    b2b6:	f4 01       	movw	r30, r8
    b2b8:	e5 58       	subi	r30, 0x85	; 133
    b2ba:	fe 4f       	sbci	r31, 0xFE	; 254
    b2bc:	e6 0d       	add	r30, r6
    b2be:	f7 1d       	adc	r31, r7
    b2c0:	c5 90       	lpm	r12, Z+
    b2c2:	d4 90       	lpm	r13, Z
    b2c4:	84 01       	movw	r16, r8
    b2c6:	0a 58       	subi	r16, 0x8A	; 138
    b2c8:	1e 4f       	sbci	r17, 0xFE	; 254
    b2ca:	06 0d       	add	r16, r6
    b2cc:	17 1d       	adc	r17, r7
    b2ce:	f8 01       	movw	r30, r16
    b2d0:	84 91       	lpm	r24, Z
    b2d2:	cf 54       	subi	r28, 0x4F	; 79
    b2d4:	df 4f       	sbci	r29, 0xFF	; 255
    b2d6:	68 81       	ld	r22, Y
    b2d8:	c1 5b       	subi	r28, 0xB1	; 177
    b2da:	d0 40       	sbci	r29, 0x00	; 0
    b2dc:	70 e0       	ldi	r23, 0x00	; 0
    b2de:	45 2d       	mov	r20, r5
    b2e0:	90 e0       	ldi	r25, 0x00	; 0
    b2e2:	f9 01       	movw	r30, r18
    b2e4:	19 95       	eicall
    b2e6:	f8 2e       	mov	r15, r24
    b2e8:	cf 55       	subi	r28, 0x5F	; 95
    b2ea:	df 4f       	sbci	r29, 0xFF	; 255
    b2ec:	18 82       	st	Y, r1
    b2ee:	c1 5a       	subi	r28, 0xA1	; 161
    b2f0:	d0 40       	sbci	r29, 0x00	; 0
    b2f2:	f8 01       	movw	r30, r16
    b2f4:	44 91       	lpm	r20, Z
    b2f6:	84 91       	lpm	r24, Z
    b2f8:	8e 01       	movw	r16, r28
    b2fa:	0f 55       	subi	r16, 0x5F	; 95
    b2fc:	1f 4f       	sbci	r17, 0xFF	; 255
    b2fe:	9e 01       	movw	r18, r28
    b300:	2f 5f       	subi	r18, 0xFF	; 255
    b302:	3f 4f       	sbci	r19, 0xFF	; 255
    b304:	cf 54       	subi	r28, 0x4F	; 79
    b306:	df 4f       	sbci	r29, 0xFF	; 255
    b308:	68 81       	ld	r22, Y
    b30a:	c1 5b       	subi	r28, 0xB1	; 177
    b30c:	d0 40       	sbci	r29, 0x00	; 0
    b30e:	f6 01       	movw	r30, r12
    b310:	19 95       	eicall
    b312:	f4 01       	movw	r30, r8
    b314:	ef 58       	subi	r30, 0x8F	; 143
    b316:	fe 4f       	sbci	r31, 0xFE	; 254
    b318:	e6 0d       	add	r30, r6
    b31a:	f7 1d       	adc	r31, r7
    b31c:	05 91       	lpm	r16, Z+
    b31e:	14 91       	lpm	r17, Z
    b320:	f4 01       	movw	r30, r8
    b322:	e1 59       	subi	r30, 0x91	; 145
    b324:	fe 4f       	sbci	r31, 0xFE	; 254
    b326:	e6 0d       	add	r30, r6
    b328:	f7 1d       	adc	r31, r7
    b32a:	25 91       	lpm	r18, Z+
    b32c:	34 91       	lpm	r19, Z
    b32e:	f4 01       	movw	r30, r8
    b330:	e3 59       	subi	r30, 0x93	; 147
    b332:	fe 4f       	sbci	r31, 0xFE	; 254
    b334:	e6 0d       	add	r30, r6
    b336:	f7 1d       	adc	r31, r7
    b338:	45 91       	lpm	r20, Z+
    b33a:	54 91       	lpm	r21, Z
    b33c:	f4 01       	movw	r30, r8
    b33e:	e5 59       	subi	r30, 0x95	; 149
    b340:	fe 4f       	sbci	r31, 0xFE	; 254
    b342:	e6 0d       	add	r30, r6
    b344:	f7 1d       	adc	r31, r7
    b346:	65 91       	lpm	r22, Z+
    b348:	74 91       	lpm	r23, Z
    b34a:	f4 01       	movw	r30, r8
    b34c:	e7 59       	subi	r30, 0x97	; 151
    b34e:	fe 4f       	sbci	r31, 0xFE	; 254
    b350:	e6 0d       	add	r30, r6
    b352:	f7 1d       	adc	r31, r7
    b354:	85 91       	lpm	r24, Z+
    b356:	94 91       	lpm	r25, Z
    b358:	ee 24       	eor	r14, r14
    b35a:	e3 94       	inc	r14
    b35c:	f1 10       	cpse	r15, r1
    b35e:	01 c0       	rjmp	.+2      	; 0xb362 <draw_menu(bool)+0x900>
    b360:	e1 2c       	mov	r14, r1
    b362:	c8 54       	subi	r28, 0x48	; 72
    b364:	df 4f       	sbci	r29, 0xFF	; 255
    b366:	e8 81       	ld	r30, Y
    b368:	f9 81       	ldd	r31, Y+1	; 0x01
    b36a:	c8 5b       	subi	r28, 0xB8	; 184
    b36c:	d0 40       	sbci	r29, 0x00	; 0
    b36e:	6e 0f       	add	r22, r30
    b370:	7f 1f       	adc	r23, r31
    b372:	fe 01       	movw	r30, r28
    b374:	31 96       	adiw	r30, 0x01	; 1
    b376:	5f 01       	movw	r10, r30
    b378:	e0 58       	subi	r30, 0x80	; 128
    b37a:	ff 4f       	sbci	r31, 0xFF	; 255
    b37c:	6f 01       	movw	r12, r30
    b37e:	ca 54       	subi	r28, 0x4A	; 74
    b380:	df 4f       	sbci	r29, 0xFF	; 255
    b382:	e8 81       	ld	r30, Y
    b384:	f9 81       	ldd	r31, Y+1	; 0x01
    b386:	c6 5b       	subi	r28, 0xB6	; 182
    b388:	d0 40       	sbci	r29, 0x00	; 0
    b38a:	8e 0f       	add	r24, r30
    b38c:	9f 1f       	adc	r25, r31
    b38e:	0e 94 b0 53 	call	0xa760	; 0xa760 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)>
    b392:	ce 53       	subi	r28, 0x3E	; 62
    b394:	df 4f       	sbci	r29, 0xFF	; 255
    b396:	28 81       	ld	r18, Y
    b398:	39 81       	ldd	r19, Y+1	; 0x01
    b39a:	c2 5c       	subi	r28, 0xC2	; 194
    b39c:	d0 40       	sbci	r29, 0x00	; 0
    b39e:	23 2b       	or	r18, r19
    b3a0:	09 f4       	brne	.+2      	; 0xb3a4 <draw_menu(bool)+0x942>
    b3a2:	62 c0       	rjmp	.+196    	; 0xb468 <draw_menu(bool)+0xa06>
    b3a4:	cc 53       	subi	r28, 0x3C	; 60
    b3a6:	df 4f       	sbci	r29, 0xFF	; 255
    b3a8:	48 81       	ld	r20, Y
    b3aa:	59 81       	ldd	r21, Y+1	; 0x01
    b3ac:	c4 5c       	subi	r28, 0xC4	; 196
    b3ae:	d0 40       	sbci	r29, 0x00	; 0
    b3b0:	45 2b       	or	r20, r21
    b3b2:	09 f4       	brne	.+2      	; 0xb3b6 <draw_menu(bool)+0x954>
    b3b4:	59 c0       	rjmp	.+178    	; 0xb468 <draw_menu(bool)+0xa06>
    b3b6:	f4 01       	movw	r30, r8
    b3b8:	e1 59       	subi	r30, 0x91	; 145
    b3ba:	fe 4f       	sbci	r31, 0xFE	; 254
    b3bc:	e6 0d       	add	r30, r6
    b3be:	f7 1d       	adc	r31, r7
    b3c0:	25 91       	lpm	r18, Z+
    b3c2:	34 91       	lpm	r19, Z
    b3c4:	f4 01       	movw	r30, r8
    b3c6:	e3 59       	subi	r30, 0x93	; 147
    b3c8:	fe 4f       	sbci	r31, 0xFE	; 254
    b3ca:	e6 0d       	add	r30, r6
    b3cc:	f7 1d       	adc	r31, r7
    b3ce:	45 91       	lpm	r20, Z+
    b3d0:	54 91       	lpm	r21, Z
    b3d2:	f4 01       	movw	r30, r8
    b3d4:	e5 59       	subi	r30, 0x95	; 149
    b3d6:	fe 4f       	sbci	r31, 0xFE	; 254
    b3d8:	e6 0d       	add	r30, r6
    b3da:	f7 1d       	adc	r31, r7
    b3dc:	65 91       	lpm	r22, Z+
    b3de:	74 91       	lpm	r23, Z
    b3e0:	f4 01       	movw	r30, r8
    b3e2:	e7 59       	subi	r30, 0x97	; 151
    b3e4:	fe 4f       	sbci	r31, 0xFE	; 254
    b3e6:	e6 0d       	add	r30, r6
    b3e8:	f7 1d       	adc	r31, r7
    b3ea:	85 91       	lpm	r24, Z+
    b3ec:	94 91       	lpm	r25, Z
    b3ee:	c8 54       	subi	r28, 0x48	; 72
    b3f0:	df 4f       	sbci	r29, 0xFF	; 255
    b3f2:	e8 81       	ld	r30, Y
    b3f4:	f9 81       	ldd	r31, Y+1	; 0x01
    b3f6:	c8 5b       	subi	r28, 0xB8	; 184
    b3f8:	d0 40       	sbci	r29, 0x00	; 0
    b3fa:	6e 0f       	add	r22, r30
    b3fc:	7f 1f       	adc	r23, r31
    b3fe:	cc 53       	subi	r28, 0x3C	; 60
    b400:	df 4f       	sbci	r29, 0xFF	; 255
    b402:	e8 80       	ld	r14, Y
    b404:	f9 80       	ldd	r15, Y+1	; 0x01
    b406:	c4 5c       	subi	r28, 0xC4	; 196
    b408:	d0 40       	sbci	r29, 0x00	; 0
    b40a:	ce 53       	subi	r28, 0x3E	; 62
    b40c:	df 4f       	sbci	r29, 0xFF	; 255
    b40e:	08 81       	ld	r16, Y
    b410:	19 81       	ldd	r17, Y+1	; 0x01
    b412:	c2 5c       	subi	r28, 0xC2	; 194
    b414:	d0 40       	sbci	r29, 0x00	; 0
    b416:	ca 54       	subi	r28, 0x4A	; 74
    b418:	df 4f       	sbci	r29, 0xFF	; 255
    b41a:	e8 81       	ld	r30, Y
    b41c:	f9 81       	ldd	r31, Y+1	; 0x01
    b41e:	c6 5b       	subi	r28, 0xB6	; 182
    b420:	d0 40       	sbci	r29, 0x00	; 0
    b422:	8e 0f       	add	r24, r30
    b424:	9f 1f       	adc	r25, r31
    b426:	0e 94 16 55 	call	0xaa2c	; 0xaa2c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b42a:	18 2f       	mov	r17, r24
    b42c:	88 23       	and	r24, r24
    b42e:	e1 f0       	breq	.+56     	; 0xb468 <draw_menu(bool)+0xa06>
    b430:	f4 01       	movw	r30, r8
    b432:	e9 58       	subi	r30, 0x89	; 137
    b434:	fe 4f       	sbci	r31, 0xFE	; 254
    b436:	e6 0d       	add	r30, r6
    b438:	f7 1d       	adc	r31, r7
    b43a:	25 91       	lpm	r18, Z+
    b43c:	34 91       	lpm	r19, Z
    b43e:	f4 01       	movw	r30, r8
    b440:	ea 58       	subi	r30, 0x8A	; 138
    b442:	fe 4f       	sbci	r31, 0xFE	; 254
    b444:	e6 0d       	add	r30, r6
    b446:	f7 1d       	adc	r31, r7
    b448:	84 91       	lpm	r24, Z
    b44a:	cf 54       	subi	r28, 0x4F	; 79
    b44c:	df 4f       	sbci	r29, 0xFF	; 255
    b44e:	68 81       	ld	r22, Y
    b450:	c1 5b       	subi	r28, 0xB1	; 177
    b452:	d0 40       	sbci	r29, 0x00	; 0
    b454:	70 e0       	ldi	r23, 0x00	; 0
    b456:	45 2d       	mov	r20, r5
    b458:	90 e0       	ldi	r25, 0x00	; 0
    b45a:	f9 01       	movw	r30, r18
    b45c:	19 95       	eicall
    b45e:	c6 53       	subi	r28, 0x36	; 54
    b460:	df 4f       	sbci	r29, 0xFF	; 255
    b462:	18 83       	st	Y, r17
    b464:	ca 5c       	subi	r28, 0xCA	; 202
    b466:	d0 40       	sbci	r29, 0x00	; 0
    b468:	53 94       	inc	r5
    b46a:	fa ce       	rjmp	.-524    	; 0xb260 <draw_menu(bool)+0x7fe>
    b46c:	c6 53       	subi	r28, 0x36	; 54
    b46e:	df 4f       	sbci	r29, 0xFF	; 255
    b470:	f8 81       	ld	r31, Y
    b472:	ca 5c       	subi	r28, 0xCA	; 202
    b474:	d0 40       	sbci	r29, 0x00	; 0
    b476:	f1 11       	cpse	r31, r1
    b478:	0c 94 39 66 	jmp	0xcc72	; 0xcc72 <draw_menu(bool)+0x2210>
    b47c:	51 2c       	mov	r5, r1
    b47e:	43 01       	movw	r8, r6
    b480:	2e e3       	ldi	r18, 0x3E	; 62
    b482:	82 1a       	sub	r8, r18
    b484:	2d ef       	ldi	r18, 0xFD	; 253
    b486:	92 0a       	sbc	r9, r18
    b488:	f4 01       	movw	r30, r8
    b48a:	84 91       	lpm	r24, Z
    b48c:	58 16       	cp	r5, r24
    b48e:	08 f0       	brcs	.+2      	; 0xb492 <draw_menu(bool)+0xa30>
    b490:	d6 c0       	rjmp	.+428    	; 0xb63e <draw_menu(bool)+0xbdc>
    b492:	f0 e1       	ldi	r31, 0x10	; 16
    b494:	5f 9e       	mul	r5, r31
    b496:	60 01       	movw	r12, r0
    b498:	11 24       	eor	r1, r1
    b49a:	f6 01       	movw	r30, r12
    b49c:	e8 51       	subi	r30, 0x18	; 24
    b49e:	fe 4f       	sbci	r31, 0xFE	; 254
    b4a0:	e6 0d       	add	r30, r6
    b4a2:	f7 1d       	adc	r31, r7
    b4a4:	25 91       	lpm	r18, Z+
    b4a6:	34 91       	lpm	r19, Z
    b4a8:	56 01       	movw	r10, r12
    b4aa:	4c e1       	ldi	r20, 0x1C	; 28
    b4ac:	a4 1a       	sub	r10, r20
    b4ae:	4e ef       	ldi	r20, 0xFE	; 254
    b4b0:	b4 0a       	sbc	r11, r20
    b4b2:	a6 0c       	add	r10, r6
    b4b4:	b7 1c       	adc	r11, r7
    b4b6:	f5 01       	movw	r30, r10
    b4b8:	84 91       	lpm	r24, Z
    b4ba:	cf 54       	subi	r28, 0x4F	; 79
    b4bc:	df 4f       	sbci	r29, 0xFF	; 255
    b4be:	68 81       	ld	r22, Y
    b4c0:	c1 5b       	subi	r28, 0xB1	; 177
    b4c2:	d0 40       	sbci	r29, 0x00	; 0
    b4c4:	70 e0       	ldi	r23, 0x00	; 0
    b4c6:	45 2d       	mov	r20, r5
    b4c8:	90 e0       	ldi	r25, 0x00	; 0
    b4ca:	f9 01       	movw	r30, r18
    b4cc:	19 95       	eicall
    b4ce:	88 23       	and	r24, r24
    b4d0:	09 f4       	brne	.+2      	; 0xb4d4 <draw_menu(bool)+0xa72>
    b4d2:	b3 c0       	rjmp	.+358    	; 0xb63a <draw_menu(bool)+0xbd8>
    b4d4:	f6 01       	movw	r30, r12
    b4d6:	e9 51       	subi	r30, 0x19	; 25
    b4d8:	fe 4f       	sbci	r31, 0xFE	; 254
    b4da:	e6 0d       	add	r30, r6
    b4dc:	f7 1d       	adc	r31, r7
    b4de:	84 91       	lpm	r24, Z
    b4e0:	cd 52       	subi	r28, 0x2D	; 45
    b4e2:	df 4f       	sbci	r29, 0xFF	; 255
    b4e4:	68 81       	ld	r22, Y
    b4e6:	c3 5d       	subi	r28, 0xD3	; 211
    b4e8:	d0 40       	sbci	r29, 0x00	; 0
    b4ea:	0e 94 42 3a 	call	0x7484	; 0x7484 <enable_redraw(unsigned char, unsigned char)>
    b4ee:	88 23       	and	r24, r24
    b4f0:	09 f4       	brne	.+2      	; 0xb4f4 <draw_menu(bool)+0xa92>
    b4f2:	3c c0       	rjmp	.+120    	; 0xb56c <draw_menu(bool)+0xb0a>
    b4f4:	f6 01       	movw	r30, r12
    b4f6:	e6 52       	subi	r30, 0x26	; 38
    b4f8:	fe 4f       	sbci	r31, 0xFE	; 254
    b4fa:	e6 0d       	add	r30, r6
    b4fc:	f7 1d       	adc	r31, r7
    b4fe:	e5 90       	lpm	r14, Z+
    b500:	f4 90       	lpm	r15, Z
    b502:	f6 01       	movw	r30, r12
    b504:	ed 51       	subi	r30, 0x1D	; 29
    b506:	fe 4f       	sbci	r31, 0xFE	; 254
    b508:	e6 0d       	add	r30, r6
    b50a:	f7 1d       	adc	r31, r7
    b50c:	05 91       	lpm	r16, Z+
    b50e:	14 91       	lpm	r17, Z
    b510:	f6 01       	movw	r30, r12
    b512:	ef 51       	subi	r30, 0x1F	; 31
    b514:	fe 4f       	sbci	r31, 0xFE	; 254
    b516:	e6 0d       	add	r30, r6
    b518:	f7 1d       	adc	r31, r7
    b51a:	25 91       	lpm	r18, Z+
    b51c:	34 91       	lpm	r19, Z
    b51e:	f6 01       	movw	r30, r12
    b520:	e1 52       	subi	r30, 0x21	; 33
    b522:	fe 4f       	sbci	r31, 0xFE	; 254
    b524:	e6 0d       	add	r30, r6
    b526:	f7 1d       	adc	r31, r7
    b528:	45 91       	lpm	r20, Z+
    b52a:	54 91       	lpm	r21, Z
    b52c:	f6 01       	movw	r30, r12
    b52e:	e3 52       	subi	r30, 0x23	; 35
    b530:	fe 4f       	sbci	r31, 0xFE	; 254
    b532:	e6 0d       	add	r30, r6
    b534:	f7 1d       	adc	r31, r7
    b536:	65 91       	lpm	r22, Z+
    b538:	74 91       	lpm	r23, Z
    b53a:	f6 01       	movw	r30, r12
    b53c:	e5 52       	subi	r30, 0x25	; 37
    b53e:	fe 4f       	sbci	r31, 0xFE	; 254
    b540:	e6 0d       	add	r30, r6
    b542:	f7 1d       	adc	r31, r7
    b544:	85 91       	lpm	r24, Z+
    b546:	94 91       	lpm	r25, Z
    b548:	c8 54       	subi	r28, 0x48	; 72
    b54a:	df 4f       	sbci	r29, 0xFF	; 255
    b54c:	e8 81       	ld	r30, Y
    b54e:	f9 81       	ldd	r31, Y+1	; 0x01
    b550:	c8 5b       	subi	r28, 0xB8	; 184
    b552:	d0 40       	sbci	r29, 0x00	; 0
    b554:	6e 0f       	add	r22, r30
    b556:	7f 1f       	adc	r23, r31
    b558:	ca 54       	subi	r28, 0x4A	; 74
    b55a:	df 4f       	sbci	r29, 0xFF	; 255
    b55c:	e8 81       	ld	r30, Y
    b55e:	f9 81       	ldd	r31, Y+1	; 0x01
    b560:	c6 5b       	subi	r28, 0xB6	; 182
    b562:	d0 40       	sbci	r29, 0x00	; 0
    b564:	8e 0f       	add	r24, r30
    b566:	9f 1f       	adc	r25, r31
    b568:	0e 94 85 54 	call	0xa90a	; 0xa90a <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
    b56c:	ce 53       	subi	r28, 0x3E	; 62
    b56e:	df 4f       	sbci	r29, 0xFF	; 255
    b570:	28 81       	ld	r18, Y
    b572:	39 81       	ldd	r19, Y+1	; 0x01
    b574:	c2 5c       	subi	r28, 0xC2	; 194
    b576:	d0 40       	sbci	r29, 0x00	; 0
    b578:	23 2b       	or	r18, r19
    b57a:	09 f4       	brne	.+2      	; 0xb57e <draw_menu(bool)+0xb1c>
    b57c:	5e c0       	rjmp	.+188    	; 0xb63a <draw_menu(bool)+0xbd8>
    b57e:	cc 53       	subi	r28, 0x3C	; 60
    b580:	df 4f       	sbci	r29, 0xFF	; 255
    b582:	48 81       	ld	r20, Y
    b584:	59 81       	ldd	r21, Y+1	; 0x01
    b586:	c4 5c       	subi	r28, 0xC4	; 196
    b588:	d0 40       	sbci	r29, 0x00	; 0
    b58a:	45 2b       	or	r20, r21
    b58c:	09 f4       	brne	.+2      	; 0xb590 <draw_menu(bool)+0xb2e>
    b58e:	55 c0       	rjmp	.+170    	; 0xb63a <draw_menu(bool)+0xbd8>
    b590:	f6 01       	movw	r30, r12
    b592:	ef 51       	subi	r30, 0x1F	; 31
    b594:	fe 4f       	sbci	r31, 0xFE	; 254
    b596:	e6 0d       	add	r30, r6
    b598:	f7 1d       	adc	r31, r7
    b59a:	25 91       	lpm	r18, Z+
    b59c:	34 91       	lpm	r19, Z
    b59e:	f6 01       	movw	r30, r12
    b5a0:	e1 52       	subi	r30, 0x21	; 33
    b5a2:	fe 4f       	sbci	r31, 0xFE	; 254
    b5a4:	e6 0d       	add	r30, r6
    b5a6:	f7 1d       	adc	r31, r7
    b5a8:	45 91       	lpm	r20, Z+
    b5aa:	54 91       	lpm	r21, Z
    b5ac:	f6 01       	movw	r30, r12
    b5ae:	e3 52       	subi	r30, 0x23	; 35
    b5b0:	fe 4f       	sbci	r31, 0xFE	; 254
    b5b2:	e6 0d       	add	r30, r6
    b5b4:	f7 1d       	adc	r31, r7
    b5b6:	65 91       	lpm	r22, Z+
    b5b8:	74 91       	lpm	r23, Z
    b5ba:	f6 01       	movw	r30, r12
    b5bc:	e5 52       	subi	r30, 0x25	; 37
    b5be:	fe 4f       	sbci	r31, 0xFE	; 254
    b5c0:	e6 0d       	add	r30, r6
    b5c2:	f7 1d       	adc	r31, r7
    b5c4:	85 91       	lpm	r24, Z+
    b5c6:	94 91       	lpm	r25, Z
    b5c8:	c8 54       	subi	r28, 0x48	; 72
    b5ca:	df 4f       	sbci	r29, 0xFF	; 255
    b5cc:	e8 81       	ld	r30, Y
    b5ce:	f9 81       	ldd	r31, Y+1	; 0x01
    b5d0:	c8 5b       	subi	r28, 0xB8	; 184
    b5d2:	d0 40       	sbci	r29, 0x00	; 0
    b5d4:	6e 0f       	add	r22, r30
    b5d6:	7f 1f       	adc	r23, r31
    b5d8:	cc 53       	subi	r28, 0x3C	; 60
    b5da:	df 4f       	sbci	r29, 0xFF	; 255
    b5dc:	e8 80       	ld	r14, Y
    b5de:	f9 80       	ldd	r15, Y+1	; 0x01
    b5e0:	c4 5c       	subi	r28, 0xC4	; 196
    b5e2:	d0 40       	sbci	r29, 0x00	; 0
    b5e4:	ce 53       	subi	r28, 0x3E	; 62
    b5e6:	df 4f       	sbci	r29, 0xFF	; 255
    b5e8:	08 81       	ld	r16, Y
    b5ea:	19 81       	ldd	r17, Y+1	; 0x01
    b5ec:	c2 5c       	subi	r28, 0xC2	; 194
    b5ee:	d0 40       	sbci	r29, 0x00	; 0
    b5f0:	ca 54       	subi	r28, 0x4A	; 74
    b5f2:	df 4f       	sbci	r29, 0xFF	; 255
    b5f4:	e8 81       	ld	r30, Y
    b5f6:	f9 81       	ldd	r31, Y+1	; 0x01
    b5f8:	c6 5b       	subi	r28, 0xB6	; 182
    b5fa:	d0 40       	sbci	r29, 0x00	; 0
    b5fc:	8e 0f       	add	r24, r30
    b5fe:	9f 1f       	adc	r25, r31
    b600:	0e 94 16 55 	call	0xaa2c	; 0xaa2c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b604:	18 2f       	mov	r17, r24
    b606:	88 23       	and	r24, r24
    b608:	c1 f0       	breq	.+48     	; 0xb63a <draw_menu(bool)+0xbd8>
    b60a:	f6 01       	movw	r30, r12
    b60c:	eb 51       	subi	r30, 0x1B	; 27
    b60e:	fe 4f       	sbci	r31, 0xFE	; 254
    b610:	e6 0d       	add	r30, r6
    b612:	f7 1d       	adc	r31, r7
    b614:	25 91       	lpm	r18, Z+
    b616:	34 91       	lpm	r19, Z
    b618:	f5 01       	movw	r30, r10
    b61a:	84 91       	lpm	r24, Z
    b61c:	cf 54       	subi	r28, 0x4F	; 79
    b61e:	df 4f       	sbci	r29, 0xFF	; 255
    b620:	68 81       	ld	r22, Y
    b622:	c1 5b       	subi	r28, 0xB1	; 177
    b624:	d0 40       	sbci	r29, 0x00	; 0
    b626:	70 e0       	ldi	r23, 0x00	; 0
    b628:	45 2d       	mov	r20, r5
    b62a:	90 e0       	ldi	r25, 0x00	; 0
    b62c:	f9 01       	movw	r30, r18
    b62e:	19 95       	eicall
    b630:	c6 53       	subi	r28, 0x36	; 54
    b632:	df 4f       	sbci	r29, 0xFF	; 255
    b634:	18 83       	st	Y, r17
    b636:	ca 5c       	subi	r28, 0xCA	; 202
    b638:	d0 40       	sbci	r29, 0x00	; 0
    b63a:	53 94       	inc	r5
    b63c:	25 cf       	rjmp	.-438    	; 0xb488 <draw_menu(bool)+0xa26>
    b63e:	c6 53       	subi	r28, 0x36	; 54
    b640:	df 4f       	sbci	r29, 0xFF	; 255
    b642:	f8 81       	ld	r31, Y
    b644:	ca 5c       	subi	r28, 0xCA	; 202
    b646:	d0 40       	sbci	r29, 0x00	; 0
    b648:	f1 11       	cpse	r31, r1
    b64a:	0c 94 39 66 	jmp	0xcc72	; 0xcc72 <draw_menu(bool)+0x2210>
    b64e:	51 2c       	mov	r5, r1
    b650:	93 01       	movw	r18, r6
    b652:	2d 53       	subi	r18, 0x3D	; 61
    b654:	3d 4f       	sbci	r19, 0xFD	; 253
    b656:	cc 52       	subi	r28, 0x2C	; 44
    b658:	df 4f       	sbci	r29, 0xFF	; 255
    b65a:	39 83       	std	Y+1, r19	; 0x01
    b65c:	28 83       	st	Y, r18
    b65e:	c4 5d       	subi	r28, 0xD4	; 212
    b660:	d0 40       	sbci	r29, 0x00	; 0
    b662:	cc 52       	subi	r28, 0x2C	; 44
    b664:	df 4f       	sbci	r29, 0xFF	; 255
    b666:	e8 81       	ld	r30, Y
    b668:	f9 81       	ldd	r31, Y+1	; 0x01
    b66a:	c4 5d       	subi	r28, 0xD4	; 212
    b66c:	d0 40       	sbci	r29, 0x00	; 0
    b66e:	84 91       	lpm	r24, Z
    b670:	58 16       	cp	r5, r24
    b672:	08 f0       	brcs	.+2      	; 0xb676 <draw_menu(bool)+0xc14>
    b674:	60 c3       	rjmp	.+1728   	; 0xbd36 <draw_menu(bool)+0x12d4>
    b676:	f7 e1       	ldi	r31, 0x17	; 23
    b678:	5f 9e       	mul	r5, r31
    b67a:	60 01       	movw	r12, r0
    b67c:	11 24       	eor	r1, r1
    b67e:	f6 01       	movw	r30, r12
    b680:	e0 59       	subi	r30, 0x90	; 144
    b682:	fd 4f       	sbci	r31, 0xFD	; 253
    b684:	e6 0d       	add	r30, r6
    b686:	f7 1d       	adc	r31, r7
    b688:	84 91       	lpm	r24, Z
    b68a:	cd 52       	subi	r28, 0x2D	; 45
    b68c:	df 4f       	sbci	r29, 0xFF	; 255
    b68e:	68 81       	ld	r22, Y
    b690:	c3 5d       	subi	r28, 0xD3	; 211
    b692:	d0 40       	sbci	r29, 0x00	; 0
    b694:	0e 94 42 3a 	call	0x7484	; 0x7484 <enable_redraw(unsigned char, unsigned char)>
    b698:	88 23       	and	r24, r24
    b69a:	09 f4       	brne	.+2      	; 0xb69e <draw_menu(bool)+0xc3c>
    b69c:	98 c1       	rjmp	.+816    	; 0xb9ce <draw_menu(bool)+0xf6c>
    b69e:	ce 54       	subi	r28, 0x4E	; 78
    b6a0:	df 4f       	sbci	r29, 0xFF	; 255
    b6a2:	18 82       	st	Y, r1
    b6a4:	c2 5b       	subi	r28, 0xB2	; 178
    b6a6:	d0 40       	sbci	r29, 0x00	; 0
    b6a8:	f6 01       	movw	r30, r12
    b6aa:	e2 59       	subi	r30, 0x92	; 146
    b6ac:	fd 4f       	sbci	r31, 0xFD	; 253
    b6ae:	e6 0d       	add	r30, r6
    b6b0:	f7 1d       	adc	r31, r7
    b6b2:	25 91       	lpm	r18, Z+
    b6b4:	34 91       	lpm	r19, Z
    b6b6:	c6 01       	movw	r24, r12
    b6b8:	87 59       	subi	r24, 0x97	; 151
    b6ba:	9d 4f       	sbci	r25, 0xFD	; 253
    b6bc:	a3 01       	movw	r20, r6
    b6be:	48 0f       	add	r20, r24
    b6c0:	59 1f       	adc	r21, r25
    b6c2:	c6 54       	subi	r28, 0x46	; 70
    b6c4:	df 4f       	sbci	r29, 0xFF	; 255
    b6c6:	59 83       	std	Y+1, r21	; 0x01
    b6c8:	48 83       	st	Y, r20
    b6ca:	ca 5b       	subi	r28, 0xBA	; 186
    b6cc:	d0 40       	sbci	r29, 0x00	; 0
    b6ce:	fa 01       	movw	r30, r20
    b6d0:	84 91       	lpm	r24, Z
    b6d2:	cf 54       	subi	r28, 0x4F	; 79
    b6d4:	df 4f       	sbci	r29, 0xFF	; 255
    b6d6:	68 81       	ld	r22, Y
    b6d8:	c1 5b       	subi	r28, 0xB1	; 177
    b6da:	d0 40       	sbci	r29, 0x00	; 0
    b6dc:	70 e0       	ldi	r23, 0x00	; 0
    b6de:	40 e0       	ldi	r20, 0x00	; 0
    b6e0:	90 e0       	ldi	r25, 0x00	; 0
    b6e2:	f9 01       	movw	r30, r18
    b6e4:	19 95       	eicall
    b6e6:	cd 54       	subi	r28, 0x4D	; 77
    b6e8:	df 4f       	sbci	r29, 0xFF	; 255
    b6ea:	88 83       	st	Y, r24
    b6ec:	c3 5b       	subi	r28, 0xB3	; 179
    b6ee:	d0 40       	sbci	r29, 0x00	; 0
    b6f0:	f6 01       	movw	r30, r12
    b6f2:	e6 59       	subi	r30, 0x96	; 150
    b6f4:	fd 4f       	sbci	r31, 0xFD	; 253
    b6f6:	e6 0d       	add	r30, r6
    b6f8:	f7 1d       	adc	r31, r7
    b6fa:	25 91       	lpm	r18, Z+
    b6fc:	34 91       	lpm	r19, Z
    b6fe:	cf 52       	subi	r28, 0x2F	; 47
    b700:	df 4f       	sbci	r29, 0xFF	; 255
    b702:	39 83       	std	Y+1, r19	; 0x01
    b704:	28 83       	st	Y, r18
    b706:	c1 5d       	subi	r28, 0xD1	; 209
    b708:	d0 40       	sbci	r29, 0x00	; 0
    b70a:	46 01       	movw	r8, r12
    b70c:	36 ea       	ldi	r19, 0xA6	; 166
    b70e:	83 1a       	sub	r8, r19
    b710:	3d ef       	ldi	r19, 0xFD	; 253
    b712:	93 0a       	sbc	r9, r19
    b714:	86 0c       	add	r8, r6
    b716:	97 1c       	adc	r9, r7
    b718:	56 01       	movw	r10, r12
    b71a:	44 ea       	ldi	r20, 0xA4	; 164
    b71c:	a4 1a       	sub	r10, r20
    b71e:	4d ef       	ldi	r20, 0xFD	; 253
    b720:	b4 0a       	sbc	r11, r20
    b722:	a6 0c       	add	r10, r6
    b724:	b7 1c       	adc	r11, r7
    b726:	16 01       	movw	r2, r12
    b728:	5b e9       	ldi	r21, 0x9B	; 155
    b72a:	25 1a       	sub	r2, r21
    b72c:	5d ef       	ldi	r21, 0xFD	; 253
    b72e:	35 0a       	sbc	r3, r21
    b730:	26 0c       	add	r2, r6
    b732:	37 1c       	adc	r3, r7
    b734:	c6 01       	movw	r24, r12
    b736:	8c 59       	subi	r24, 0x9C	; 156
    b738:	9d 4f       	sbci	r25, 0xFD	; 253
    b73a:	b3 01       	movw	r22, r6
    b73c:	68 0f       	add	r22, r24
    b73e:	79 1f       	adc	r23, r25
    b740:	c0 54       	subi	r28, 0x40	; 64
    b742:	df 4f       	sbci	r29, 0xFF	; 255
    b744:	79 83       	std	Y+1, r23	; 0x01
    b746:	68 83       	st	Y, r22
    b748:	c0 5c       	subi	r28, 0xC0	; 192
    b74a:	d0 40       	sbci	r29, 0x00	; 0
    b74c:	01 97       	sbiw	r24, 0x01	; 1
    b74e:	f3 01       	movw	r30, r6
    b750:	e8 0f       	add	r30, r24
    b752:	f9 1f       	adc	r31, r25
    b754:	ca 53       	subi	r28, 0x3A	; 58
    b756:	df 4f       	sbci	r29, 0xFF	; 255
    b758:	f9 83       	std	Y+1, r31	; 0x01
    b75a:	e8 83       	st	Y, r30
    b75c:	c6 5c       	subi	r28, 0xC6	; 198
    b75e:	d0 40       	sbci	r29, 0x00	; 0
    b760:	03 96       	adiw	r24, 0x03	; 3
    b762:	93 01       	movw	r18, r6
    b764:	28 0f       	add	r18, r24
    b766:	39 1f       	adc	r19, r25
    b768:	c8 53       	subi	r28, 0x38	; 56
    b76a:	df 4f       	sbci	r29, 0xFF	; 255
    b76c:	39 83       	std	Y+1, r19	; 0x01
    b76e:	28 83       	st	Y, r18
    b770:	c8 5c       	subi	r28, 0xC8	; 200
    b772:	d0 40       	sbci	r29, 0x00	; 0
    b774:	04 97       	sbiw	r24, 0x04	; 4
    b776:	a3 01       	movw	r20, r6
    b778:	48 0f       	add	r20, r24
    b77a:	59 1f       	adc	r21, r25
    b77c:	c5 53       	subi	r28, 0x35	; 53
    b77e:	df 4f       	sbci	r29, 0xFF	; 255
    b780:	59 83       	std	Y+1, r21	; 0x01
    b782:	48 83       	st	Y, r20
    b784:	cb 5c       	subi	r28, 0xCB	; 203
    b786:	d0 40       	sbci	r29, 0x00	; 0
    b788:	02 97       	sbiw	r24, 0x02	; 2
    b78a:	b3 01       	movw	r22, r6
    b78c:	68 0f       	add	r22, r24
    b78e:	79 1f       	adc	r23, r25
    b790:	c3 53       	subi	r28, 0x33	; 51
    b792:	df 4f       	sbci	r29, 0xFF	; 255
    b794:	79 83       	std	Y+1, r23	; 0x01
    b796:	68 83       	st	Y, r22
    b798:	cd 5c       	subi	r28, 0xCD	; 205
    b79a:	d0 40       	sbci	r29, 0x00	; 0
    b79c:	02 97       	sbiw	r24, 0x02	; 2
    b79e:	f3 01       	movw	r30, r6
    b7a0:	e8 0f       	add	r30, r24
    b7a2:	f9 1f       	adc	r31, r25
    b7a4:	c1 53       	subi	r28, 0x31	; 49
    b7a6:	df 4f       	sbci	r29, 0xFF	; 255
    b7a8:	f9 83       	std	Y+1, r31	; 0x01
    b7aa:	e8 83       	st	Y, r30
    b7ac:	cf 5c       	subi	r28, 0xCF	; 207
    b7ae:	d0 40       	sbci	r29, 0x00	; 0
    b7b0:	f1 2c       	mov	r15, r1
    b7b2:	41 2c       	mov	r4, r1
    b7b4:	ce 54       	subi	r28, 0x4E	; 78
    b7b6:	df 4f       	sbci	r29, 0xFF	; 255
    b7b8:	88 81       	ld	r24, Y
    b7ba:	c2 5b       	subi	r28, 0xB2	; 178
    b7bc:	d0 40       	sbci	r29, 0x00	; 0
    b7be:	cd 54       	subi	r28, 0x4D	; 77
    b7c0:	df 4f       	sbci	r29, 0xFF	; 255
    b7c2:	98 81       	ld	r25, Y
    b7c4:	c3 5b       	subi	r28, 0xB3	; 179
    b7c6:	d0 40       	sbci	r29, 0x00	; 0
    b7c8:	89 17       	cp	r24, r25
    b7ca:	08 f0       	brcs	.+2      	; 0xb7ce <draw_menu(bool)+0xd6c>
    b7cc:	00 c1       	rjmp	.+512    	; 0xb9ce <draw_menu(bool)+0xf6c>
    b7ce:	f4 01       	movw	r30, r8
    b7d0:	45 91       	lpm	r20, Z+
    b7d2:	54 91       	lpm	r21, Z
    b7d4:	f5 01       	movw	r30, r10
    b7d6:	25 91       	lpm	r18, Z+
    b7d8:	34 91       	lpm	r19, Z
    b7da:	f1 01       	movw	r30, r2
    b7dc:	94 91       	lpm	r25, Z
    b7de:	99 23       	and	r25, r25
    b7e0:	09 f4       	brne	.+2      	; 0xb7e4 <draw_menu(bool)+0xd82>
    b7e2:	b7 c0       	rjmp	.+366    	; 0xb952 <draw_menu(bool)+0xef0>
    b7e4:	c8 54       	subi	r28, 0x48	; 72
    b7e6:	df 4f       	sbci	r29, 0xFF	; 255
    b7e8:	68 81       	ld	r22, Y
    b7ea:	79 81       	ldd	r23, Y+1	; 0x01
    b7ec:	c8 5b       	subi	r28, 0xB8	; 184
    b7ee:	d0 40       	sbci	r29, 0x00	; 0
    b7f0:	62 0f       	add	r22, r18
    b7f2:	73 1f       	adc	r23, r19
    b7f4:	c2 54       	subi	r28, 0x42	; 66
    b7f6:	df 4f       	sbci	r29, 0xFF	; 255
    b7f8:	79 83       	std	Y+1, r23	; 0x01
    b7fa:	68 83       	st	Y, r22
    b7fc:	ce 5b       	subi	r28, 0xBE	; 190
    b7fe:	d0 40       	sbci	r29, 0x00	; 0
    b800:	f1 01       	movw	r30, r2
    b802:	94 91       	lpm	r25, Z
    b804:	91 30       	cpi	r25, 0x01	; 1
    b806:	09 f4       	brne	.+2      	; 0xb80a <draw_menu(bool)+0xda8>
    b808:	c3 c0       	rjmp	.+390    	; 0xb990 <draw_menu(bool)+0xf2e>
    b80a:	ca 54       	subi	r28, 0x4A	; 74
    b80c:	df 4f       	sbci	r29, 0xFF	; 255
    b80e:	28 81       	ld	r18, Y
    b810:	39 81       	ldd	r19, Y+1	; 0x01
    b812:	c6 5b       	subi	r28, 0xB6	; 182
    b814:	d0 40       	sbci	r29, 0x00	; 0
    b816:	24 0f       	add	r18, r20
    b818:	35 1f       	adc	r19, r21
    b81a:	c4 54       	subi	r28, 0x44	; 68
    b81c:	df 4f       	sbci	r29, 0xFF	; 255
    b81e:	39 83       	std	Y+1, r19	; 0x01
    b820:	28 83       	st	Y, r18
    b822:	cc 5b       	subi	r28, 0xBC	; 188
    b824:	d0 40       	sbci	r29, 0x00	; 0
    b826:	f1 01       	movw	r30, r2
    b828:	94 91       	lpm	r25, Z
    b82a:	92 30       	cpi	r25, 0x02	; 2
    b82c:	09 f0       	breq	.+2      	; 0xb830 <draw_menu(bool)+0xdce>
    b82e:	46 c0       	rjmp	.+140    	; 0xb8bc <draw_menu(bool)+0xe5a>
    b830:	f4 01       	movw	r30, r8
    b832:	25 91       	lpm	r18, Z+
    b834:	34 91       	lpm	r19, Z
    b836:	ca 53       	subi	r28, 0x3A	; 58
    b838:	df 4f       	sbci	r29, 0xFF	; 255
    b83a:	e8 81       	ld	r30, Y
    b83c:	f9 81       	ldd	r31, Y+1	; 0x01
    b83e:	c6 5c       	subi	r28, 0xC6	; 198
    b840:	d0 40       	sbci	r29, 0x00	; 0
    b842:	94 91       	lpm	r25, Z
    b844:	ca 54       	subi	r28, 0x4A	; 74
    b846:	df 4f       	sbci	r29, 0xFF	; 255
    b848:	48 81       	ld	r20, Y
    b84a:	59 81       	ldd	r21, Y+1	; 0x01
    b84c:	c6 5b       	subi	r28, 0xB6	; 182
    b84e:	d0 40       	sbci	r29, 0x00	; 0
    b850:	24 0f       	add	r18, r20
    b852:	35 1f       	adc	r19, r21
    b854:	b9 01       	movw	r22, r18
    b856:	94 9d       	mul	r25, r4
    b858:	60 0d       	add	r22, r0
    b85a:	71 1d       	adc	r23, r1
    b85c:	11 24       	eor	r1, r1
    b85e:	c4 54       	subi	r28, 0x44	; 68
    b860:	df 4f       	sbci	r29, 0xFF	; 255
    b862:	79 83       	std	Y+1, r23	; 0x01
    b864:	68 83       	st	Y, r22
    b866:	cc 5b       	subi	r28, 0xBC	; 188
    b868:	d0 40       	sbci	r29, 0x00	; 0
    b86a:	f5 01       	movw	r30, r10
    b86c:	25 91       	lpm	r18, Z+
    b86e:	34 91       	lpm	r19, Z
    b870:	c0 54       	subi	r28, 0x40	; 64
    b872:	df 4f       	sbci	r29, 0xFF	; 255
    b874:	e8 81       	ld	r30, Y
    b876:	f9 81       	ldd	r31, Y+1	; 0x01
    b878:	c0 5c       	subi	r28, 0xC0	; 192
    b87a:	d0 40       	sbci	r29, 0x00	; 0
    b87c:	94 91       	lpm	r25, Z
    b87e:	c8 54       	subi	r28, 0x48	; 72
    b880:	df 4f       	sbci	r29, 0xFF	; 255
    b882:	48 81       	ld	r20, Y
    b884:	59 81       	ldd	r21, Y+1	; 0x01
    b886:	c8 5b       	subi	r28, 0xB8	; 184
    b888:	d0 40       	sbci	r29, 0x00	; 0
    b88a:	24 0f       	add	r18, r20
    b88c:	35 1f       	adc	r19, r21
    b88e:	b9 01       	movw	r22, r18
    b890:	9f 9d       	mul	r25, r15
    b892:	60 0d       	add	r22, r0
    b894:	71 1d       	adc	r23, r1
    b896:	11 24       	eor	r1, r1
    b898:	c2 54       	subi	r28, 0x42	; 66
    b89a:	df 4f       	sbci	r29, 0xFF	; 255
    b89c:	79 83       	std	Y+1, r23	; 0x01
    b89e:	68 83       	st	Y, r22
    b8a0:	ce 5b       	subi	r28, 0xBE	; 190
    b8a2:	d0 40       	sbci	r29, 0x00	; 0
    b8a4:	43 94       	inc	r4
    b8a6:	c8 53       	subi	r28, 0x38	; 56
    b8a8:	df 4f       	sbci	r29, 0xFF	; 255
    b8aa:	e8 81       	ld	r30, Y
    b8ac:	f9 81       	ldd	r31, Y+1	; 0x01
    b8ae:	c8 5c       	subi	r28, 0xC8	; 200
    b8b0:	d0 40       	sbci	r29, 0x00	; 0
    b8b2:	94 91       	lpm	r25, Z
    b8b4:	49 16       	cp	r4, r25
    b8b6:	10 f0       	brcs	.+4      	; 0xb8bc <draw_menu(bool)+0xe5a>
    b8b8:	f3 94       	inc	r15
    b8ba:	41 2c       	mov	r4, r1
    b8bc:	c6 54       	subi	r28, 0x46	; 70
    b8be:	df 4f       	sbci	r29, 0xFF	; 255
    b8c0:	e8 81       	ld	r30, Y
    b8c2:	f9 81       	ldd	r31, Y+1	; 0x01
    b8c4:	ca 5b       	subi	r28, 0xBA	; 186
    b8c6:	d0 40       	sbci	r29, 0x00	; 0
    b8c8:	44 91       	lpm	r20, Z
    b8ca:	8e 01       	movw	r16, r28
    b8cc:	0f 57       	subi	r16, 0x7F	; 127
    b8ce:	1f 4f       	sbci	r17, 0xFF	; 255
    b8d0:	9e 01       	movw	r18, r28
    b8d2:	2f 5f       	subi	r18, 0xFF	; 255
    b8d4:	3f 4f       	sbci	r19, 0xFF	; 255
    b8d6:	cf 54       	subi	r28, 0x4F	; 79
    b8d8:	df 4f       	sbci	r29, 0xFF	; 255
    b8da:	68 81       	ld	r22, Y
    b8dc:	c1 5b       	subi	r28, 0xB1	; 177
    b8de:	d0 40       	sbci	r29, 0x00	; 0
    b8e0:	cf 52       	subi	r28, 0x2F	; 47
    b8e2:	df 4f       	sbci	r29, 0xFF	; 255
    b8e4:	e8 81       	ld	r30, Y
    b8e6:	f9 81       	ldd	r31, Y+1	; 0x01
    b8e8:	c1 5d       	subi	r28, 0xD1	; 209
    b8ea:	d0 40       	sbci	r29, 0x00	; 0
    b8ec:	19 95       	eicall
    b8ee:	c5 53       	subi	r28, 0x35	; 53
    b8f0:	df 4f       	sbci	r29, 0xFF	; 255
    b8f2:	e8 81       	ld	r30, Y
    b8f4:	f9 81       	ldd	r31, Y+1	; 0x01
    b8f6:	cb 5c       	subi	r28, 0xCB	; 203
    b8f8:	d0 40       	sbci	r29, 0x00	; 0
    b8fa:	04 91       	lpm	r16, Z
    b8fc:	c3 53       	subi	r28, 0x33	; 51
    b8fe:	df 4f       	sbci	r29, 0xFF	; 255
    b900:	e8 81       	ld	r30, Y
    b902:	f9 81       	ldd	r31, Y+1	; 0x01
    b904:	cd 5c       	subi	r28, 0xCD	; 205
    b906:	d0 40       	sbci	r29, 0x00	; 0
    b908:	25 91       	lpm	r18, Z+
    b90a:	34 91       	lpm	r19, Z
    b90c:	c1 53       	subi	r28, 0x31	; 49
    b90e:	df 4f       	sbci	r29, 0xFF	; 255
    b910:	e8 81       	ld	r30, Y
    b912:	f9 81       	ldd	r31, Y+1	; 0x01
    b914:	cf 5c       	subi	r28, 0xCF	; 207
    b916:	d0 40       	sbci	r29, 0x00	; 0
    b918:	45 91       	lpm	r20, Z+
    b91a:	54 91       	lpm	r21, Z
    b91c:	e9 80       	ldd	r14, Y+1	; 0x01
    b91e:	c2 54       	subi	r28, 0x42	; 66
    b920:	df 4f       	sbci	r29, 0xFF	; 255
    b922:	68 81       	ld	r22, Y
    b924:	79 81       	ldd	r23, Y+1	; 0x01
    b926:	ce 5b       	subi	r28, 0xBE	; 190
    b928:	d0 40       	sbci	r29, 0x00	; 0
    b92a:	c4 54       	subi	r28, 0x44	; 68
    b92c:	df 4f       	sbci	r29, 0xFF	; 255
    b92e:	88 81       	ld	r24, Y
    b930:	99 81       	ldd	r25, Y+1	; 0x01
    b932:	cc 5b       	subi	r28, 0xBC	; 188
    b934:	d0 40       	sbci	r29, 0x00	; 0
    b936:	0e 94 85 54 	call	0xa90a	; 0xa90a <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
    b93a:	ce 54       	subi	r28, 0x4E	; 78
    b93c:	df 4f       	sbci	r29, 0xFF	; 255
    b93e:	88 81       	ld	r24, Y
    b940:	c2 5b       	subi	r28, 0xB2	; 178
    b942:	d0 40       	sbci	r29, 0x00	; 0
    b944:	8f 5f       	subi	r24, 0xFF	; 255
    b946:	ce 54       	subi	r28, 0x4E	; 78
    b948:	df 4f       	sbci	r29, 0xFF	; 255
    b94a:	88 83       	st	Y, r24
    b94c:	c2 5b       	subi	r28, 0xB2	; 178
    b94e:	d0 40       	sbci	r29, 0x00	; 0
    b950:	31 cf       	rjmp	.-414    	; 0xb7b4 <draw_menu(bool)+0xd52>
    b952:	f5 01       	movw	r30, r10
    b954:	25 91       	lpm	r18, Z+
    b956:	34 91       	lpm	r19, Z
    b958:	c0 54       	subi	r28, 0x40	; 64
    b95a:	df 4f       	sbci	r29, 0xFF	; 255
    b95c:	e8 81       	ld	r30, Y
    b95e:	f9 81       	ldd	r31, Y+1	; 0x01
    b960:	c0 5c       	subi	r28, 0xC0	; 192
    b962:	d0 40       	sbci	r29, 0x00	; 0
    b964:	94 91       	lpm	r25, Z
    b966:	c8 54       	subi	r28, 0x48	; 72
    b968:	df 4f       	sbci	r29, 0xFF	; 255
    b96a:	68 81       	ld	r22, Y
    b96c:	79 81       	ldd	r23, Y+1	; 0x01
    b96e:	c8 5b       	subi	r28, 0xB8	; 184
    b970:	d0 40       	sbci	r29, 0x00	; 0
    b972:	26 0f       	add	r18, r22
    b974:	37 1f       	adc	r19, r23
    b976:	f9 01       	movw	r30, r18
    b978:	94 9d       	mul	r25, r4
    b97a:	e0 0d       	add	r30, r0
    b97c:	f1 1d       	adc	r31, r1
    b97e:	11 24       	eor	r1, r1
    b980:	c2 54       	subi	r28, 0x42	; 66
    b982:	df 4f       	sbci	r29, 0xFF	; 255
    b984:	f9 83       	std	Y+1, r31	; 0x01
    b986:	e8 83       	st	Y, r30
    b988:	ce 5b       	subi	r28, 0xBE	; 190
    b98a:	d0 40       	sbci	r29, 0x00	; 0
    b98c:	43 94       	inc	r4
    b98e:	38 cf       	rjmp	.-400    	; 0xb800 <draw_menu(bool)+0xd9e>
    b990:	f4 01       	movw	r30, r8
    b992:	25 91       	lpm	r18, Z+
    b994:	34 91       	lpm	r19, Z
    b996:	ca 53       	subi	r28, 0x3A	; 58
    b998:	df 4f       	sbci	r29, 0xFF	; 255
    b99a:	e8 81       	ld	r30, Y
    b99c:	f9 81       	ldd	r31, Y+1	; 0x01
    b99e:	c6 5c       	subi	r28, 0xC6	; 198
    b9a0:	d0 40       	sbci	r29, 0x00	; 0
    b9a2:	94 91       	lpm	r25, Z
    b9a4:	ca 54       	subi	r28, 0x4A	; 74
    b9a6:	df 4f       	sbci	r29, 0xFF	; 255
    b9a8:	48 81       	ld	r20, Y
    b9aa:	59 81       	ldd	r21, Y+1	; 0x01
    b9ac:	c6 5b       	subi	r28, 0xB6	; 182
    b9ae:	d0 40       	sbci	r29, 0x00	; 0
    b9b0:	24 0f       	add	r18, r20
    b9b2:	35 1f       	adc	r19, r21
    b9b4:	b9 01       	movw	r22, r18
    b9b6:	94 9d       	mul	r25, r4
    b9b8:	60 0d       	add	r22, r0
    b9ba:	71 1d       	adc	r23, r1
    b9bc:	11 24       	eor	r1, r1
    b9be:	c4 54       	subi	r28, 0x44	; 68
    b9c0:	df 4f       	sbci	r29, 0xFF	; 255
    b9c2:	79 83       	std	Y+1, r23	; 0x01
    b9c4:	68 83       	st	Y, r22
    b9c6:	cc 5b       	subi	r28, 0xBC	; 188
    b9c8:	d0 40       	sbci	r29, 0x00	; 0
    b9ca:	43 94       	inc	r4
    b9cc:	2c cf       	rjmp	.-424    	; 0xb826 <draw_menu(bool)+0xdc4>
    b9ce:	ce 53       	subi	r28, 0x3E	; 62
    b9d0:	df 4f       	sbci	r29, 0xFF	; 255
    b9d2:	28 81       	ld	r18, Y
    b9d4:	39 81       	ldd	r19, Y+1	; 0x01
    b9d6:	c2 5c       	subi	r28, 0xC2	; 194
    b9d8:	d0 40       	sbci	r29, 0x00	; 0
    b9da:	23 2b       	or	r18, r19
    b9dc:	09 f4       	brne	.+2      	; 0xb9e0 <draw_menu(bool)+0xf7e>
    b9de:	69 c1       	rjmp	.+722    	; 0xbcb2 <draw_menu(bool)+0x1250>
    b9e0:	cc 53       	subi	r28, 0x3C	; 60
    b9e2:	df 4f       	sbci	r29, 0xFF	; 255
    b9e4:	48 81       	ld	r20, Y
    b9e6:	59 81       	ldd	r21, Y+1	; 0x01
    b9e8:	c4 5c       	subi	r28, 0xC4	; 196
    b9ea:	d0 40       	sbci	r29, 0x00	; 0
    b9ec:	45 2b       	or	r20, r21
    b9ee:	09 f4       	brne	.+2      	; 0xb9f2 <draw_menu(bool)+0xf90>
    b9f0:	60 c1       	rjmp	.+704    	; 0xbcb2 <draw_menu(bool)+0x1250>
    b9f2:	ce 54       	subi	r28, 0x4E	; 78
    b9f4:	df 4f       	sbci	r29, 0xFF	; 255
    b9f6:	18 82       	st	Y, r1
    b9f8:	c2 5b       	subi	r28, 0xB2	; 178
    b9fa:	d0 40       	sbci	r29, 0x00	; 0
    b9fc:	f6 01       	movw	r30, r12
    b9fe:	e2 59       	subi	r30, 0x92	; 146
    ba00:	fd 4f       	sbci	r31, 0xFD	; 253
    ba02:	e6 0d       	add	r30, r6
    ba04:	f7 1d       	adc	r31, r7
    ba06:	25 91       	lpm	r18, Z+
    ba08:	34 91       	lpm	r19, Z
    ba0a:	c6 01       	movw	r24, r12
    ba0c:	87 59       	subi	r24, 0x97	; 151
    ba0e:	9d 4f       	sbci	r25, 0xFD	; 253
    ba10:	b3 01       	movw	r22, r6
    ba12:	68 0f       	add	r22, r24
    ba14:	79 1f       	adc	r23, r25
    ba16:	ca 53       	subi	r28, 0x3A	; 58
    ba18:	df 4f       	sbci	r29, 0xFF	; 255
    ba1a:	79 83       	std	Y+1, r23	; 0x01
    ba1c:	68 83       	st	Y, r22
    ba1e:	c6 5c       	subi	r28, 0xC6	; 198
    ba20:	d0 40       	sbci	r29, 0x00	; 0
    ba22:	fb 01       	movw	r30, r22
    ba24:	84 91       	lpm	r24, Z
    ba26:	cf 54       	subi	r28, 0x4F	; 79
    ba28:	df 4f       	sbci	r29, 0xFF	; 255
    ba2a:	68 81       	ld	r22, Y
    ba2c:	c1 5b       	subi	r28, 0xB1	; 177
    ba2e:	d0 40       	sbci	r29, 0x00	; 0
    ba30:	70 e0       	ldi	r23, 0x00	; 0
    ba32:	40 e0       	ldi	r20, 0x00	; 0
    ba34:	90 e0       	ldi	r25, 0x00	; 0
    ba36:	f9 01       	movw	r30, r18
    ba38:	19 95       	eicall
    ba3a:	c0 54       	subi	r28, 0x40	; 64
    ba3c:	df 4f       	sbci	r29, 0xFF	; 255
    ba3e:	88 83       	st	Y, r24
    ba40:	c0 5c       	subi	r28, 0xC0	; 192
    ba42:	d0 40       	sbci	r29, 0x00	; 0
    ba44:	cd 54       	subi	r28, 0x4D	; 77
    ba46:	df 4f       	sbci	r29, 0xFF	; 255
    ba48:	88 83       	st	Y, r24
    ba4a:	c3 5b       	subi	r28, 0xB3	; 179
    ba4c:	d0 40       	sbci	r29, 0x00	; 0
    ba4e:	ce 54       	subi	r28, 0x4E	; 78
    ba50:	df 4f       	sbci	r29, 0xFF	; 255
    ba52:	a8 80       	ld	r10, Y
    ba54:	c2 5b       	subi	r28, 0xB2	; 178
    ba56:	d0 40       	sbci	r29, 0x00	; 0
    ba58:	16 01       	movw	r2, r12
    ba5a:	f6 ea       	ldi	r31, 0xA6	; 166
    ba5c:	2f 1a       	sub	r2, r31
    ba5e:	fd ef       	ldi	r31, 0xFD	; 253
    ba60:	3f 0a       	sbc	r3, r31
    ba62:	26 0c       	add	r2, r6
    ba64:	37 1c       	adc	r3, r7
    ba66:	46 01       	movw	r8, r12
    ba68:	24 ea       	ldi	r18, 0xA4	; 164
    ba6a:	82 1a       	sub	r8, r18
    ba6c:	2d ef       	ldi	r18, 0xFD	; 253
    ba6e:	92 0a       	sbc	r9, r18
    ba70:	86 0c       	add	r8, r6
    ba72:	97 1c       	adc	r9, r7
    ba74:	c6 01       	movw	r24, r12
    ba76:	8b 59       	subi	r24, 0x9B	; 155
    ba78:	9d 4f       	sbci	r25, 0xFD	; 253
    ba7a:	a3 01       	movw	r20, r6
    ba7c:	48 0f       	add	r20, r24
    ba7e:	59 1f       	adc	r21, r25
    ba80:	c6 54       	subi	r28, 0x46	; 70
    ba82:	df 4f       	sbci	r29, 0xFF	; 255
    ba84:	59 83       	std	Y+1, r21	; 0x01
    ba86:	48 83       	st	Y, r20
    ba88:	ca 5b       	subi	r28, 0xBA	; 186
    ba8a:	d0 40       	sbci	r29, 0x00	; 0
    ba8c:	01 97       	sbiw	r24, 0x01	; 1
    ba8e:	b3 01       	movw	r22, r6
    ba90:	68 0f       	add	r22, r24
    ba92:	79 1f       	adc	r23, r25
    ba94:	c8 53       	subi	r28, 0x38	; 56
    ba96:	df 4f       	sbci	r29, 0xFF	; 255
    ba98:	79 83       	std	Y+1, r23	; 0x01
    ba9a:	68 83       	st	Y, r22
    ba9c:	c8 5c       	subi	r28, 0xC8	; 200
    ba9e:	d0 40       	sbci	r29, 0x00	; 0
    baa0:	01 97       	sbiw	r24, 0x01	; 1
    baa2:	f3 01       	movw	r30, r6
    baa4:	e8 0f       	add	r30, r24
    baa6:	f9 1f       	adc	r31, r25
    baa8:	c5 53       	subi	r28, 0x35	; 53
    baaa:	df 4f       	sbci	r29, 0xFF	; 255
    baac:	f9 83       	std	Y+1, r31	; 0x01
    baae:	e8 83       	st	Y, r30
    bab0:	cb 5c       	subi	r28, 0xCB	; 203
    bab2:	d0 40       	sbci	r29, 0x00	; 0
    bab4:	03 96       	adiw	r24, 0x03	; 3
    bab6:	93 01       	movw	r18, r6
    bab8:	28 0f       	add	r18, r24
    baba:	39 1f       	adc	r19, r25
    babc:	c3 53       	subi	r28, 0x33	; 51
    babe:	df 4f       	sbci	r29, 0xFF	; 255
    bac0:	39 83       	std	Y+1, r19	; 0x01
    bac2:	28 83       	st	Y, r18
    bac4:	cd 5c       	subi	r28, 0xCD	; 205
    bac6:	d0 40       	sbci	r29, 0x00	; 0
    bac8:	06 97       	sbiw	r24, 0x06	; 6
    baca:	a3 01       	movw	r20, r6
    bacc:	48 0f       	add	r20, r24
    bace:	59 1f       	adc	r21, r25
    bad0:	c1 53       	subi	r28, 0x31	; 49
    bad2:	df 4f       	sbci	r29, 0xFF	; 255
    bad4:	59 83       	std	Y+1, r21	; 0x01
    bad6:	48 83       	st	Y, r20
    bad8:	cf 5c       	subi	r28, 0xCF	; 207
    bada:	d0 40       	sbci	r29, 0x00	; 0
    badc:	02 97       	sbiw	r24, 0x02	; 2
    bade:	b3 01       	movw	r22, r6
    bae0:	68 0f       	add	r22, r24
    bae2:	79 1f       	adc	r23, r25
    bae4:	cf 52       	subi	r28, 0x2F	; 47
    bae6:	df 4f       	sbci	r29, 0xFF	; 255
    bae8:	79 83       	std	Y+1, r23	; 0x01
    baea:	68 83       	st	Y, r22
    baec:	c1 5d       	subi	r28, 0xD1	; 209
    baee:	d0 40       	sbci	r29, 0x00	; 0
    baf0:	41 2c       	mov	r4, r1
    baf2:	b1 2c       	mov	r11, r1
    baf4:	c0 54       	subi	r28, 0x40	; 64
    baf6:	df 4f       	sbci	r29, 0xFF	; 255
    baf8:	78 81       	ld	r23, Y
    bafa:	c0 5c       	subi	r28, 0xC0	; 192
    bafc:	d0 40       	sbci	r29, 0x00	; 0
    bafe:	a7 16       	cp	r10, r23
    bb00:	08 f0       	brcs	.+2      	; 0xbb04 <draw_menu(bool)+0x10a2>
    bb02:	d7 c0       	rjmp	.+430    	; 0xbcb2 <draw_menu(bool)+0x1250>
    bb04:	f1 01       	movw	r30, r2
    bb06:	25 91       	lpm	r18, Z+
    bb08:	34 91       	lpm	r19, Z
    bb0a:	f4 01       	movw	r30, r8
    bb0c:	85 91       	lpm	r24, Z+
    bb0e:	94 91       	lpm	r25, Z
    bb10:	c6 54       	subi	r28, 0x46	; 70
    bb12:	df 4f       	sbci	r29, 0xFF	; 255
    bb14:	e8 81       	ld	r30, Y
    bb16:	f9 81       	ldd	r31, Y+1	; 0x01
    bb18:	ca 5b       	subi	r28, 0xBA	; 186
    bb1a:	d0 40       	sbci	r29, 0x00	; 0
    bb1c:	44 91       	lpm	r20, Z
    bb1e:	44 23       	and	r20, r20
    bb20:	09 f4       	brne	.+2      	; 0xbb24 <draw_menu(bool)+0x10c2>
    bb22:	cb c0       	rjmp	.+406    	; 0xbcba <draw_menu(bool)+0x1258>
    bb24:	c8 54       	subi	r28, 0x48	; 72
    bb26:	df 4f       	sbci	r29, 0xFF	; 255
    bb28:	48 81       	ld	r20, Y
    bb2a:	59 81       	ldd	r21, Y+1	; 0x01
    bb2c:	c8 5b       	subi	r28, 0xB8	; 184
    bb2e:	d0 40       	sbci	r29, 0x00	; 0
    bb30:	48 0f       	add	r20, r24
    bb32:	59 1f       	adc	r21, r25
    bb34:	c2 54       	subi	r28, 0x42	; 66
    bb36:	df 4f       	sbci	r29, 0xFF	; 255
    bb38:	59 83       	std	Y+1, r21	; 0x01
    bb3a:	48 83       	st	Y, r20
    bb3c:	ce 5b       	subi	r28, 0xBE	; 190
    bb3e:	d0 40       	sbci	r29, 0x00	; 0
    bb40:	c6 54       	subi	r28, 0x46	; 70
    bb42:	df 4f       	sbci	r29, 0xFF	; 255
    bb44:	e8 81       	ld	r30, Y
    bb46:	f9 81       	ldd	r31, Y+1	; 0x01
    bb48:	ca 5b       	subi	r28, 0xBA	; 186
    bb4a:	d0 40       	sbci	r29, 0x00	; 0
    bb4c:	84 91       	lpm	r24, Z
    bb4e:	81 30       	cpi	r24, 0x01	; 1
    bb50:	09 f4       	brne	.+2      	; 0xbb54 <draw_menu(bool)+0x10f2>
    bb52:	d2 c0       	rjmp	.+420    	; 0xbcf8 <draw_menu(bool)+0x1296>
    bb54:	ca 54       	subi	r28, 0x4A	; 74
    bb56:	df 4f       	sbci	r29, 0xFF	; 255
    bb58:	48 81       	ld	r20, Y
    bb5a:	59 81       	ldd	r21, Y+1	; 0x01
    bb5c:	c6 5b       	subi	r28, 0xB6	; 182
    bb5e:	d0 40       	sbci	r29, 0x00	; 0
    bb60:	42 0f       	add	r20, r18
    bb62:	53 1f       	adc	r21, r19
    bb64:	c4 54       	subi	r28, 0x44	; 68
    bb66:	df 4f       	sbci	r29, 0xFF	; 255
    bb68:	59 83       	std	Y+1, r21	; 0x01
    bb6a:	48 83       	st	Y, r20
    bb6c:	cc 5b       	subi	r28, 0xBC	; 188
    bb6e:	d0 40       	sbci	r29, 0x00	; 0
    bb70:	c6 54       	subi	r28, 0x46	; 70
    bb72:	df 4f       	sbci	r29, 0xFF	; 255
    bb74:	e8 81       	ld	r30, Y
    bb76:	f9 81       	ldd	r31, Y+1	; 0x01
    bb78:	ca 5b       	subi	r28, 0xBA	; 186
    bb7a:	d0 40       	sbci	r29, 0x00	; 0
    bb7c:	84 91       	lpm	r24, Z
    bb7e:	82 30       	cpi	r24, 0x02	; 2
    bb80:	09 f0       	breq	.+2      	; 0xbb84 <draw_menu(bool)+0x1122>
    bb82:	46 c0       	rjmp	.+140    	; 0xbc10 <draw_menu(bool)+0x11ae>
    bb84:	f1 01       	movw	r30, r2
    bb86:	85 91       	lpm	r24, Z+
    bb88:	94 91       	lpm	r25, Z
    bb8a:	c5 53       	subi	r28, 0x35	; 53
    bb8c:	df 4f       	sbci	r29, 0xFF	; 255
    bb8e:	e8 81       	ld	r30, Y
    bb90:	f9 81       	ldd	r31, Y+1	; 0x01
    bb92:	cb 5c       	subi	r28, 0xCB	; 203
    bb94:	d0 40       	sbci	r29, 0x00	; 0
    bb96:	24 91       	lpm	r18, Z
    bb98:	ca 54       	subi	r28, 0x4A	; 74
    bb9a:	df 4f       	sbci	r29, 0xFF	; 255
    bb9c:	48 81       	ld	r20, Y
    bb9e:	59 81       	ldd	r21, Y+1	; 0x01
    bba0:	c6 5b       	subi	r28, 0xB6	; 182
    bba2:	d0 40       	sbci	r29, 0x00	; 0
    bba4:	84 0f       	add	r24, r20
    bba6:	95 1f       	adc	r25, r21
    bba8:	bc 01       	movw	r22, r24
    bbaa:	2b 9d       	mul	r18, r11
    bbac:	60 0d       	add	r22, r0
    bbae:	71 1d       	adc	r23, r1
    bbb0:	11 24       	eor	r1, r1
    bbb2:	c4 54       	subi	r28, 0x44	; 68
    bbb4:	df 4f       	sbci	r29, 0xFF	; 255
    bbb6:	79 83       	std	Y+1, r23	; 0x01
    bbb8:	68 83       	st	Y, r22
    bbba:	cc 5b       	subi	r28, 0xBC	; 188
    bbbc:	d0 40       	sbci	r29, 0x00	; 0
    bbbe:	f4 01       	movw	r30, r8
    bbc0:	85 91       	lpm	r24, Z+
    bbc2:	94 91       	lpm	r25, Z
    bbc4:	c8 53       	subi	r28, 0x38	; 56
    bbc6:	df 4f       	sbci	r29, 0xFF	; 255
    bbc8:	e8 81       	ld	r30, Y
    bbca:	f9 81       	ldd	r31, Y+1	; 0x01
    bbcc:	c8 5c       	subi	r28, 0xC8	; 200
    bbce:	d0 40       	sbci	r29, 0x00	; 0
    bbd0:	24 91       	lpm	r18, Z
    bbd2:	c8 54       	subi	r28, 0x48	; 72
    bbd4:	df 4f       	sbci	r29, 0xFF	; 255
    bbd6:	48 81       	ld	r20, Y
    bbd8:	59 81       	ldd	r21, Y+1	; 0x01
    bbda:	c8 5b       	subi	r28, 0xB8	; 184
    bbdc:	d0 40       	sbci	r29, 0x00	; 0
    bbde:	84 0f       	add	r24, r20
    bbe0:	95 1f       	adc	r25, r21
    bbe2:	bc 01       	movw	r22, r24
    bbe4:	24 9d       	mul	r18, r4
    bbe6:	60 0d       	add	r22, r0
    bbe8:	71 1d       	adc	r23, r1
    bbea:	11 24       	eor	r1, r1
    bbec:	c2 54       	subi	r28, 0x42	; 66
    bbee:	df 4f       	sbci	r29, 0xFF	; 255
    bbf0:	79 83       	std	Y+1, r23	; 0x01
    bbf2:	68 83       	st	Y, r22
    bbf4:	ce 5b       	subi	r28, 0xBE	; 190
    bbf6:	d0 40       	sbci	r29, 0x00	; 0
    bbf8:	b3 94       	inc	r11
    bbfa:	c3 53       	subi	r28, 0x33	; 51
    bbfc:	df 4f       	sbci	r29, 0xFF	; 255
    bbfe:	e8 81       	ld	r30, Y
    bc00:	f9 81       	ldd	r31, Y+1	; 0x01
    bc02:	cd 5c       	subi	r28, 0xCD	; 205
    bc04:	d0 40       	sbci	r29, 0x00	; 0
    bc06:	84 91       	lpm	r24, Z
    bc08:	b8 16       	cp	r11, r24
    bc0a:	10 f0       	brcs	.+4      	; 0xbc10 <draw_menu(bool)+0x11ae>
    bc0c:	43 94       	inc	r4
    bc0e:	b1 2c       	mov	r11, r1
    bc10:	c1 53       	subi	r28, 0x31	; 49
    bc12:	df 4f       	sbci	r29, 0xFF	; 255
    bc14:	e8 81       	ld	r30, Y
    bc16:	f9 81       	ldd	r31, Y+1	; 0x01
    bc18:	cf 5c       	subi	r28, 0xCF	; 207
    bc1a:	d0 40       	sbci	r29, 0x00	; 0
    bc1c:	25 91       	lpm	r18, Z+
    bc1e:	34 91       	lpm	r19, Z
    bc20:	cf 52       	subi	r28, 0x2F	; 47
    bc22:	df 4f       	sbci	r29, 0xFF	; 255
    bc24:	e8 81       	ld	r30, Y
    bc26:	f9 81       	ldd	r31, Y+1	; 0x01
    bc28:	c1 5d       	subi	r28, 0xD1	; 209
    bc2a:	d0 40       	sbci	r29, 0x00	; 0
    bc2c:	45 91       	lpm	r20, Z+
    bc2e:	54 91       	lpm	r21, Z
    bc30:	cc 53       	subi	r28, 0x3C	; 60
    bc32:	df 4f       	sbci	r29, 0xFF	; 255
    bc34:	e8 80       	ld	r14, Y
    bc36:	f9 80       	ldd	r15, Y+1	; 0x01
    bc38:	c4 5c       	subi	r28, 0xC4	; 196
    bc3a:	d0 40       	sbci	r29, 0x00	; 0
    bc3c:	ce 53       	subi	r28, 0x3E	; 62
    bc3e:	df 4f       	sbci	r29, 0xFF	; 255
    bc40:	08 81       	ld	r16, Y
    bc42:	19 81       	ldd	r17, Y+1	; 0x01
    bc44:	c2 5c       	subi	r28, 0xC2	; 194
    bc46:	d0 40       	sbci	r29, 0x00	; 0
    bc48:	c2 54       	subi	r28, 0x42	; 66
    bc4a:	df 4f       	sbci	r29, 0xFF	; 255
    bc4c:	68 81       	ld	r22, Y
    bc4e:	79 81       	ldd	r23, Y+1	; 0x01
    bc50:	ce 5b       	subi	r28, 0xBE	; 190
    bc52:	d0 40       	sbci	r29, 0x00	; 0
    bc54:	c4 54       	subi	r28, 0x44	; 68
    bc56:	df 4f       	sbci	r29, 0xFF	; 255
    bc58:	88 81       	ld	r24, Y
    bc5a:	99 81       	ldd	r25, Y+1	; 0x01
    bc5c:	cc 5b       	subi	r28, 0xBC	; 188
    bc5e:	d0 40       	sbci	r29, 0x00	; 0
    bc60:	0e 94 16 55 	call	0xaa2c	; 0xaa2c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    bc64:	18 2f       	mov	r17, r24
    bc66:	81 e0       	ldi	r24, 0x01	; 1
    bc68:	8a 0d       	add	r24, r10
    bc6a:	11 23       	and	r17, r17
    bc6c:	21 f1       	breq	.+72     	; 0xbcb6 <draw_menu(bool)+0x1254>
    bc6e:	ce 54       	subi	r28, 0x4E	; 78
    bc70:	df 4f       	sbci	r29, 0xFF	; 255
    bc72:	a8 82       	st	Y, r10
    bc74:	c2 5b       	subi	r28, 0xB2	; 178
    bc76:	d0 40       	sbci	r29, 0x00	; 0
    bc78:	f6 01       	movw	r30, r12
    bc7a:	e4 59       	subi	r30, 0x94	; 148
    bc7c:	fd 4f       	sbci	r31, 0xFD	; 253
    bc7e:	e6 0d       	add	r30, r6
    bc80:	f7 1d       	adc	r31, r7
    bc82:	25 91       	lpm	r18, Z+
    bc84:	34 91       	lpm	r19, Z
    bc86:	ca 53       	subi	r28, 0x3A	; 58
    bc88:	df 4f       	sbci	r29, 0xFF	; 255
    bc8a:	e8 81       	ld	r30, Y
    bc8c:	f9 81       	ldd	r31, Y+1	; 0x01
    bc8e:	c6 5c       	subi	r28, 0xC6	; 198
    bc90:	d0 40       	sbci	r29, 0x00	; 0
    bc92:	84 91       	lpm	r24, Z
    bc94:	cf 54       	subi	r28, 0x4F	; 79
    bc96:	df 4f       	sbci	r29, 0xFF	; 255
    bc98:	68 81       	ld	r22, Y
    bc9a:	c1 5b       	subi	r28, 0xB1	; 177
    bc9c:	d0 40       	sbci	r29, 0x00	; 0
    bc9e:	70 e0       	ldi	r23, 0x00	; 0
    bca0:	4a 2d       	mov	r20, r10
    bca2:	90 e0       	ldi	r25, 0x00	; 0
    bca4:	f9 01       	movw	r30, r18
    bca6:	19 95       	eicall
    bca8:	c6 53       	subi	r28, 0x36	; 54
    bcaa:	df 4f       	sbci	r29, 0xFF	; 255
    bcac:	18 83       	st	Y, r17
    bcae:	ca 5c       	subi	r28, 0xCA	; 202
    bcb0:	d0 40       	sbci	r29, 0x00	; 0
    bcb2:	53 94       	inc	r5
    bcb4:	d6 cc       	rjmp	.-1620   	; 0xb662 <draw_menu(bool)+0xc00>
    bcb6:	a8 2e       	mov	r10, r24
    bcb8:	1d cf       	rjmp	.-454    	; 0xbaf4 <draw_menu(bool)+0x1092>
    bcba:	f4 01       	movw	r30, r8
    bcbc:	85 91       	lpm	r24, Z+
    bcbe:	94 91       	lpm	r25, Z
    bcc0:	c8 53       	subi	r28, 0x38	; 56
    bcc2:	df 4f       	sbci	r29, 0xFF	; 255
    bcc4:	e8 81       	ld	r30, Y
    bcc6:	f9 81       	ldd	r31, Y+1	; 0x01
    bcc8:	c8 5c       	subi	r28, 0xC8	; 200
    bcca:	d0 40       	sbci	r29, 0x00	; 0
    bccc:	44 91       	lpm	r20, Z
    bcce:	c8 54       	subi	r28, 0x48	; 72
    bcd0:	df 4f       	sbci	r29, 0xFF	; 255
    bcd2:	68 81       	ld	r22, Y
    bcd4:	79 81       	ldd	r23, Y+1	; 0x01
    bcd6:	c8 5b       	subi	r28, 0xB8	; 184
    bcd8:	d0 40       	sbci	r29, 0x00	; 0
    bcda:	86 0f       	add	r24, r22
    bcdc:	97 1f       	adc	r25, r23
    bcde:	fc 01       	movw	r30, r24
    bce0:	4b 9d       	mul	r20, r11
    bce2:	e0 0d       	add	r30, r0
    bce4:	f1 1d       	adc	r31, r1
    bce6:	11 24       	eor	r1, r1
    bce8:	c2 54       	subi	r28, 0x42	; 66
    bcea:	df 4f       	sbci	r29, 0xFF	; 255
    bcec:	f9 83       	std	Y+1, r31	; 0x01
    bcee:	e8 83       	st	Y, r30
    bcf0:	ce 5b       	subi	r28, 0xBE	; 190
    bcf2:	d0 40       	sbci	r29, 0x00	; 0
    bcf4:	b3 94       	inc	r11
    bcf6:	24 cf       	rjmp	.-440    	; 0xbb40 <draw_menu(bool)+0x10de>
    bcf8:	f1 01       	movw	r30, r2
    bcfa:	85 91       	lpm	r24, Z+
    bcfc:	94 91       	lpm	r25, Z
    bcfe:	c5 53       	subi	r28, 0x35	; 53
    bd00:	df 4f       	sbci	r29, 0xFF	; 255
    bd02:	e8 81       	ld	r30, Y
    bd04:	f9 81       	ldd	r31, Y+1	; 0x01
    bd06:	cb 5c       	subi	r28, 0xCB	; 203
    bd08:	d0 40       	sbci	r29, 0x00	; 0
    bd0a:	24 91       	lpm	r18, Z
    bd0c:	ca 54       	subi	r28, 0x4A	; 74
    bd0e:	df 4f       	sbci	r29, 0xFF	; 255
    bd10:	48 81       	ld	r20, Y
    bd12:	59 81       	ldd	r21, Y+1	; 0x01
    bd14:	c6 5b       	subi	r28, 0xB6	; 182
    bd16:	d0 40       	sbci	r29, 0x00	; 0
    bd18:	84 0f       	add	r24, r20
    bd1a:	95 1f       	adc	r25, r21
    bd1c:	bc 01       	movw	r22, r24
    bd1e:	2b 9d       	mul	r18, r11
    bd20:	60 0d       	add	r22, r0
    bd22:	71 1d       	adc	r23, r1
    bd24:	11 24       	eor	r1, r1
    bd26:	c4 54       	subi	r28, 0x44	; 68
    bd28:	df 4f       	sbci	r29, 0xFF	; 255
    bd2a:	79 83       	std	Y+1, r23	; 0x01
    bd2c:	68 83       	st	Y, r22
    bd2e:	cc 5b       	subi	r28, 0xBC	; 188
    bd30:	d0 40       	sbci	r29, 0x00	; 0
    bd32:	b3 94       	inc	r11
    bd34:	1d cf       	rjmp	.-454    	; 0xbb70 <draw_menu(bool)+0x110e>
    bd36:	c6 53       	subi	r28, 0x36	; 54
    bd38:	df 4f       	sbci	r29, 0xFF	; 255
    bd3a:	f8 81       	ld	r31, Y
    bd3c:	ca 5c       	subi	r28, 0xCA	; 202
    bd3e:	d0 40       	sbci	r29, 0x00	; 0
    bd40:	f1 11       	cpse	r31, r1
    bd42:	0c 94 39 66 	jmp	0xcc72	; 0xcc72 <draw_menu(bool)+0x2210>
    bd46:	91 2c       	mov	r9, r1
    bd48:	93 01       	movw	r18, r6
    bd4a:	2f 53       	subi	r18, 0x3F	; 63
    bd4c:	3d 4f       	sbci	r19, 0xFD	; 253
    bd4e:	cc 52       	subi	r28, 0x2C	; 44
    bd50:	df 4f       	sbci	r29, 0xFF	; 255
    bd52:	39 83       	std	Y+1, r19	; 0x01
    bd54:	28 83       	st	Y, r18
    bd56:	c4 5d       	subi	r28, 0xD4	; 212
    bd58:	d0 40       	sbci	r29, 0x00	; 0
    bd5a:	cc 52       	subi	r28, 0x2C	; 44
    bd5c:	df 4f       	sbci	r29, 0xFF	; 255
    bd5e:	e8 81       	ld	r30, Y
    bd60:	f9 81       	ldd	r31, Y+1	; 0x01
    bd62:	c4 5d       	subi	r28, 0xD4	; 212
    bd64:	d0 40       	sbci	r29, 0x00	; 0
    bd66:	84 91       	lpm	r24, Z
    bd68:	98 16       	cp	r9, r24
    bd6a:	08 f0       	brcs	.+2      	; 0xbd6e <draw_menu(bool)+0x130c>
    bd6c:	1a c3       	rjmp	.+1588   	; 0xc3a2 <draw_menu(bool)+0x1940>
    bd6e:	f7 e1       	ldi	r31, 0x17	; 23
    bd70:	9f 9e       	mul	r9, r31
    bd72:	20 01       	movw	r4, r0
    bd74:	11 24       	eor	r1, r1
    bd76:	f2 01       	movw	r30, r4
    bd78:	ee 53       	subi	r30, 0x3E	; 62
    bd7a:	fe 4f       	sbci	r31, 0xFE	; 254
    bd7c:	e6 0d       	add	r30, r6
    bd7e:	f7 1d       	adc	r31, r7
    bd80:	84 91       	lpm	r24, Z
    bd82:	cd 52       	subi	r28, 0x2D	; 45
    bd84:	df 4f       	sbci	r29, 0xFF	; 255
    bd86:	68 81       	ld	r22, Y
    bd88:	c3 5d       	subi	r28, 0xD3	; 211
    bd8a:	d0 40       	sbci	r29, 0x00	; 0
    bd8c:	0e 94 42 3a 	call	0x7484	; 0x7484 <enable_redraw(unsigned char, unsigned char)>
    bd90:	88 23       	and	r24, r24
    bd92:	09 f4       	brne	.+2      	; 0xbd96 <draw_menu(bool)+0x1334>
    bd94:	83 c1       	rjmp	.+774    	; 0xc09c <draw_menu(bool)+0x163a>
    bd96:	ce 54       	subi	r28, 0x4E	; 78
    bd98:	df 4f       	sbci	r29, 0xFF	; 255
    bd9a:	18 82       	st	Y, r1
    bd9c:	c2 5b       	subi	r28, 0xB2	; 178
    bd9e:	d0 40       	sbci	r29, 0x00	; 0
    bda0:	f2 01       	movw	r30, r4
    bda2:	e0 54       	subi	r30, 0x40	; 64
    bda4:	fe 4f       	sbci	r31, 0xFE	; 254
    bda6:	e6 0d       	add	r30, r6
    bda8:	f7 1d       	adc	r31, r7
    bdaa:	25 91       	lpm	r18, Z+
    bdac:	34 91       	lpm	r19, Z
    bdae:	c2 01       	movw	r24, r4
    bdb0:	85 54       	subi	r24, 0x45	; 69
    bdb2:	9e 4f       	sbci	r25, 0xFE	; 254
    bdb4:	a3 01       	movw	r20, r6
    bdb6:	48 0f       	add	r20, r24
    bdb8:	59 1f       	adc	r21, r25
    bdba:	c6 54       	subi	r28, 0x46	; 70
    bdbc:	df 4f       	sbci	r29, 0xFF	; 255
    bdbe:	59 83       	std	Y+1, r21	; 0x01
    bdc0:	48 83       	st	Y, r20
    bdc2:	ca 5b       	subi	r28, 0xBA	; 186
    bdc4:	d0 40       	sbci	r29, 0x00	; 0
    bdc6:	fa 01       	movw	r30, r20
    bdc8:	84 91       	lpm	r24, Z
    bdca:	cf 54       	subi	r28, 0x4F	; 79
    bdcc:	df 4f       	sbci	r29, 0xFF	; 255
    bdce:	68 81       	ld	r22, Y
    bdd0:	c1 5b       	subi	r28, 0xB1	; 177
    bdd2:	d0 40       	sbci	r29, 0x00	; 0
    bdd4:	70 e0       	ldi	r23, 0x00	; 0
    bdd6:	40 e0       	ldi	r20, 0x00	; 0
    bdd8:	90 e0       	ldi	r25, 0x00	; 0
    bdda:	f9 01       	movw	r30, r18
    bddc:	19 95       	eicall
    bdde:	cd 54       	subi	r28, 0x4D	; 77
    bde0:	df 4f       	sbci	r29, 0xFF	; 255
    bde2:	88 83       	st	Y, r24
    bde4:	c3 5b       	subi	r28, 0xB3	; 179
    bde6:	d0 40       	sbci	r29, 0x00	; 0
    bde8:	f2 01       	movw	r30, r4
    bdea:	e4 54       	subi	r30, 0x44	; 68
    bdec:	fe 4f       	sbci	r31, 0xFE	; 254
    bdee:	e6 0d       	add	r30, r6
    bdf0:	f7 1d       	adc	r31, r7
    bdf2:	25 91       	lpm	r18, Z+
    bdf4:	34 91       	lpm	r19, Z
    bdf6:	ca 52       	subi	r28, 0x2A	; 42
    bdf8:	df 4f       	sbci	r29, 0xFF	; 255
    bdfa:	39 83       	std	Y+1, r19	; 0x01
    bdfc:	28 83       	st	Y, r18
    bdfe:	c6 5d       	subi	r28, 0xD6	; 214
    be00:	d0 40       	sbci	r29, 0x00	; 0
    be02:	f2 01       	movw	r30, r4
    be04:	e6 54       	subi	r30, 0x46	; 70
    be06:	fe 4f       	sbci	r31, 0xFE	; 254
    be08:	e6 0d       	add	r30, r6
    be0a:	f7 1d       	adc	r31, r7
    be0c:	44 91       	lpm	r20, Z
    be0e:	4f 3f       	cpi	r20, 0xFF	; 255
    be10:	b9 f0       	breq	.+46     	; 0xbe40 <draw_menu(bool)+0x13de>
    be12:	f2 01       	movw	r30, r4
    be14:	e8 54       	subi	r30, 0x48	; 72
    be16:	fe 4f       	sbci	r31, 0xFE	; 254
    be18:	e6 0d       	add	r30, r6
    be1a:	f7 1d       	adc	r31, r7
    be1c:	24 91       	lpm	r18, Z
    be1e:	f2 01       	movw	r30, r4
    be20:	e7 54       	subi	r30, 0x47	; 71
    be22:	fe 4f       	sbci	r31, 0xFE	; 254
    be24:	e6 0d       	add	r30, r6
    be26:	f7 1d       	adc	r31, r7
    be28:	e4 91       	lpm	r30, Z
    be2a:	2e 9f       	mul	r18, r30
    be2c:	20 2d       	mov	r18, r0
    be2e:	11 24       	eor	r1, r1
    be30:	be 01       	movw	r22, r28
    be32:	6d 54       	subi	r22, 0x4D	; 77
    be34:	7f 4f       	sbci	r23, 0xFF	; 255
    be36:	ce 01       	movw	r24, r28
    be38:	8e 54       	subi	r24, 0x4E	; 78
    be3a:	9f 4f       	sbci	r25, 0xFF	; 255
    be3c:	0e 94 5e 51 	call	0xa2bc	; 0xa2bc <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    be40:	12 01       	movw	r2, r4
    be42:	34 e5       	ldi	r19, 0x54	; 84
    be44:	23 1a       	sub	r2, r19
    be46:	3e ef       	ldi	r19, 0xFE	; 254
    be48:	33 0a       	sbc	r3, r19
    be4a:	26 0c       	add	r2, r6
    be4c:	37 1c       	adc	r3, r7
    be4e:	c2 01       	movw	r24, r4
    be50:	82 55       	subi	r24, 0x52	; 82
    be52:	9e 4f       	sbci	r25, 0xFE	; 254
    be54:	a3 01       	movw	r20, r6
    be56:	48 0f       	add	r20, r24
    be58:	59 1f       	adc	r21, r25
    be5a:	c0 54       	subi	r28, 0x40	; 64
    be5c:	df 4f       	sbci	r29, 0xFF	; 255
    be5e:	59 83       	std	Y+1, r21	; 0x01
    be60:	48 83       	st	Y, r20
    be62:	c0 5c       	subi	r28, 0xC0	; 192
    be64:	d0 40       	sbci	r29, 0x00	; 0
    be66:	09 96       	adiw	r24, 0x09	; 9
    be68:	b3 01       	movw	r22, r6
    be6a:	68 0f       	add	r22, r24
    be6c:	79 1f       	adc	r23, r25
    be6e:	ca 53       	subi	r28, 0x3A	; 58
    be70:	df 4f       	sbci	r29, 0xFF	; 255
    be72:	79 83       	std	Y+1, r23	; 0x01
    be74:	68 83       	st	Y, r22
    be76:	c6 5c       	subi	r28, 0xC6	; 198
    be78:	d0 40       	sbci	r29, 0x00	; 0
    be7a:	01 97       	sbiw	r24, 0x01	; 1
    be7c:	f3 01       	movw	r30, r6
    be7e:	e8 0f       	add	r30, r24
    be80:	f9 1f       	adc	r31, r25
    be82:	c5 53       	subi	r28, 0x35	; 53
    be84:	df 4f       	sbci	r29, 0xFF	; 255
    be86:	f9 83       	std	Y+1, r31	; 0x01
    be88:	e8 83       	st	Y, r30
    be8a:	cb 5c       	subi	r28, 0xCB	; 203
    be8c:	d0 40       	sbci	r29, 0x00	; 0
    be8e:	01 97       	sbiw	r24, 0x01	; 1
    be90:	93 01       	movw	r18, r6
    be92:	28 0f       	add	r18, r24
    be94:	39 1f       	adc	r19, r25
    be96:	c3 53       	subi	r28, 0x33	; 51
    be98:	df 4f       	sbci	r29, 0xFF	; 255
    be9a:	39 83       	std	Y+1, r19	; 0x01
    be9c:	28 83       	st	Y, r18
    be9e:	cd 5c       	subi	r28, 0xCD	; 205
    bea0:	d0 40       	sbci	r29, 0x00	; 0
    bea2:	01 97       	sbiw	r24, 0x01	; 1
    bea4:	a3 01       	movw	r20, r6
    bea6:	48 0f       	add	r20, r24
    bea8:	59 1f       	adc	r21, r25
    beaa:	c8 53       	subi	r28, 0x38	; 56
    beac:	df 4f       	sbci	r29, 0xFF	; 255
    beae:	59 83       	std	Y+1, r21	; 0x01
    beb0:	48 83       	st	Y, r20
    beb2:	c8 5c       	subi	r28, 0xC8	; 200
    beb4:	d0 40       	sbci	r29, 0x00	; 0
    beb6:	02 97       	sbiw	r24, 0x02	; 2
    beb8:	b3 01       	movw	r22, r6
    beba:	68 0f       	add	r22, r24
    bebc:	79 1f       	adc	r23, r25
    bebe:	c1 53       	subi	r28, 0x31	; 49
    bec0:	df 4f       	sbci	r29, 0xFF	; 255
    bec2:	79 83       	std	Y+1, r23	; 0x01
    bec4:	68 83       	st	Y, r22
    bec6:	cf 5c       	subi	r28, 0xCF	; 207
    bec8:	d0 40       	sbci	r29, 0x00	; 0
    beca:	02 97       	sbiw	r24, 0x02	; 2
    becc:	f3 01       	movw	r30, r6
    bece:	e8 0f       	add	r30, r24
    bed0:	f9 1f       	adc	r31, r25
    bed2:	cf 52       	subi	r28, 0x2F	; 47
    bed4:	df 4f       	sbci	r29, 0xFF	; 255
    bed6:	f9 83       	std	Y+1, r31	; 0x01
    bed8:	e8 83       	st	Y, r30
    beda:	c1 5d       	subi	r28, 0xD1	; 209
    bedc:	d0 40       	sbci	r29, 0x00	; 0
    bede:	f1 2c       	mov	r15, r1
    bee0:	ce 54       	subi	r28, 0x4E	; 78
    bee2:	df 4f       	sbci	r29, 0xFF	; 255
    bee4:	88 81       	ld	r24, Y
    bee6:	c2 5b       	subi	r28, 0xB2	; 178
    bee8:	d0 40       	sbci	r29, 0x00	; 0
    beea:	cd 54       	subi	r28, 0x4D	; 77
    beec:	df 4f       	sbci	r29, 0xFF	; 255
    beee:	98 81       	ld	r25, Y
    bef0:	c3 5b       	subi	r28, 0xB3	; 179
    bef2:	d0 40       	sbci	r29, 0x00	; 0
    bef4:	89 17       	cp	r24, r25
    bef6:	08 f0       	brcs	.+2      	; 0xbefa <draw_menu(bool)+0x1498>
    bef8:	d1 c0       	rjmp	.+418    	; 0xc09c <draw_menu(bool)+0x163a>
    befa:	f1 01       	movw	r30, r2
    befc:	45 91       	lpm	r20, Z+
    befe:	54 91       	lpm	r21, Z
    bf00:	c0 54       	subi	r28, 0x40	; 64
    bf02:	df 4f       	sbci	r29, 0xFF	; 255
    bf04:	e8 81       	ld	r30, Y
    bf06:	f9 81       	ldd	r31, Y+1	; 0x01
    bf08:	c0 5c       	subi	r28, 0xC0	; 192
    bf0a:	d0 40       	sbci	r29, 0x00	; 0
    bf0c:	25 91       	lpm	r18, Z+
    bf0e:	34 91       	lpm	r19, Z
    bf10:	ca 53       	subi	r28, 0x3A	; 58
    bf12:	df 4f       	sbci	r29, 0xFF	; 255
    bf14:	e8 81       	ld	r30, Y
    bf16:	f9 81       	ldd	r31, Y+1	; 0x01
    bf18:	c6 5c       	subi	r28, 0xC6	; 198
    bf1a:	d0 40       	sbci	r29, 0x00	; 0
    bf1c:	94 91       	lpm	r25, Z
    bf1e:	99 23       	and	r25, r25
    bf20:	09 f4       	brne	.+2      	; 0xbf24 <draw_menu(bool)+0x14c2>
    bf22:	7b c0       	rjmp	.+246    	; 0xc01a <draw_menu(bool)+0x15b8>
    bf24:	c8 54       	subi	r28, 0x48	; 72
    bf26:	df 4f       	sbci	r29, 0xFF	; 255
    bf28:	68 81       	ld	r22, Y
    bf2a:	79 81       	ldd	r23, Y+1	; 0x01
    bf2c:	c8 5b       	subi	r28, 0xB8	; 184
    bf2e:	d0 40       	sbci	r29, 0x00	; 0
    bf30:	62 0f       	add	r22, r18
    bf32:	73 1f       	adc	r23, r19
    bf34:	c2 54       	subi	r28, 0x42	; 66
    bf36:	df 4f       	sbci	r29, 0xFF	; 255
    bf38:	79 83       	std	Y+1, r23	; 0x01
    bf3a:	68 83       	st	Y, r22
    bf3c:	ce 5b       	subi	r28, 0xBE	; 190
    bf3e:	d0 40       	sbci	r29, 0x00	; 0
    bf40:	ca 53       	subi	r28, 0x3A	; 58
    bf42:	df 4f       	sbci	r29, 0xFF	; 255
    bf44:	e8 81       	ld	r30, Y
    bf46:	f9 81       	ldd	r31, Y+1	; 0x01
    bf48:	c6 5c       	subi	r28, 0xC6	; 198
    bf4a:	d0 40       	sbci	r29, 0x00	; 0
    bf4c:	94 91       	lpm	r25, Z
    bf4e:	91 30       	cpi	r25, 0x01	; 1
    bf50:	09 f4       	brne	.+2      	; 0xbf54 <draw_menu(bool)+0x14f2>
    bf52:	86 c0       	rjmp	.+268    	; 0xc060 <draw_menu(bool)+0x15fe>
    bf54:	ca 54       	subi	r28, 0x4A	; 74
    bf56:	df 4f       	sbci	r29, 0xFF	; 255
    bf58:	28 81       	ld	r18, Y
    bf5a:	39 81       	ldd	r19, Y+1	; 0x01
    bf5c:	c6 5b       	subi	r28, 0xB6	; 182
    bf5e:	d0 40       	sbci	r29, 0x00	; 0
    bf60:	24 0f       	add	r18, r20
    bf62:	35 1f       	adc	r19, r21
    bf64:	c4 54       	subi	r28, 0x44	; 68
    bf66:	df 4f       	sbci	r29, 0xFF	; 255
    bf68:	39 83       	std	Y+1, r19	; 0x01
    bf6a:	28 83       	st	Y, r18
    bf6c:	cc 5b       	subi	r28, 0xBC	; 188
    bf6e:	d0 40       	sbci	r29, 0x00	; 0
    bf70:	c6 54       	subi	r28, 0x46	; 70
    bf72:	df 4f       	sbci	r29, 0xFF	; 255
    bf74:	e8 81       	ld	r30, Y
    bf76:	f9 81       	ldd	r31, Y+1	; 0x01
    bf78:	ca 5b       	subi	r28, 0xBA	; 186
    bf7a:	d0 40       	sbci	r29, 0x00	; 0
    bf7c:	44 91       	lpm	r20, Z
    bf7e:	8e 01       	movw	r16, r28
    bf80:	0f 57       	subi	r16, 0x7F	; 127
    bf82:	1f 4f       	sbci	r17, 0xFF	; 255
    bf84:	9e 01       	movw	r18, r28
    bf86:	2f 5f       	subi	r18, 0xFF	; 255
    bf88:	3f 4f       	sbci	r19, 0xFF	; 255
    bf8a:	cf 54       	subi	r28, 0x4F	; 79
    bf8c:	df 4f       	sbci	r29, 0xFF	; 255
    bf8e:	68 81       	ld	r22, Y
    bf90:	c1 5b       	subi	r28, 0xB1	; 177
    bf92:	d0 40       	sbci	r29, 0x00	; 0
    bf94:	ca 52       	subi	r28, 0x2A	; 42
    bf96:	df 4f       	sbci	r29, 0xFF	; 255
    bf98:	e8 81       	ld	r30, Y
    bf9a:	f9 81       	ldd	r31, Y+1	; 0x01
    bf9c:	c6 5d       	subi	r28, 0xD6	; 214
    bf9e:	d0 40       	sbci	r29, 0x00	; 0
    bfa0:	19 95       	eicall
    bfa2:	c8 53       	subi	r28, 0x38	; 56
    bfa4:	df 4f       	sbci	r29, 0xFF	; 255
    bfa6:	e8 81       	ld	r30, Y
    bfa8:	f9 81       	ldd	r31, Y+1	; 0x01
    bfaa:	c8 5c       	subi	r28, 0xC8	; 200
    bfac:	d0 40       	sbci	r29, 0x00	; 0
    bfae:	e4 90       	lpm	r14, Z
    bfb0:	04 91       	lpm	r16, Z
    bfb2:	c1 53       	subi	r28, 0x31	; 49
    bfb4:	df 4f       	sbci	r29, 0xFF	; 255
    bfb6:	e8 81       	ld	r30, Y
    bfb8:	f9 81       	ldd	r31, Y+1	; 0x01
    bfba:	cf 5c       	subi	r28, 0xCF	; 207
    bfbc:	d0 40       	sbci	r29, 0x00	; 0
    bfbe:	25 91       	lpm	r18, Z+
    bfc0:	34 91       	lpm	r19, Z
    bfc2:	cf 52       	subi	r28, 0x2F	; 47
    bfc4:	df 4f       	sbci	r29, 0xFF	; 255
    bfc6:	e8 81       	ld	r30, Y
    bfc8:	f9 81       	ldd	r31, Y+1	; 0x01
    bfca:	c1 5d       	subi	r28, 0xD1	; 209
    bfcc:	d0 40       	sbci	r29, 0x00	; 0
    bfce:	45 91       	lpm	r20, Z+
    bfd0:	54 91       	lpm	r21, Z
    bfd2:	88 24       	eor	r8, r8
    bfd4:	83 94       	inc	r8
    bfd6:	be 01       	movw	r22, r28
    bfd8:	6f 57       	subi	r22, 0x7F	; 127
    bfda:	7f 4f       	sbci	r23, 0xFF	; 255
    bfdc:	5b 01       	movw	r10, r22
    bfde:	ce 01       	movw	r24, r28
    bfe0:	01 96       	adiw	r24, 0x01	; 1
    bfe2:	6c 01       	movw	r12, r24
    bfe4:	c2 54       	subi	r28, 0x42	; 66
    bfe6:	df 4f       	sbci	r29, 0xFF	; 255
    bfe8:	68 81       	ld	r22, Y
    bfea:	79 81       	ldd	r23, Y+1	; 0x01
    bfec:	ce 5b       	subi	r28, 0xBE	; 190
    bfee:	d0 40       	sbci	r29, 0x00	; 0
    bff0:	c4 54       	subi	r28, 0x44	; 68
    bff2:	df 4f       	sbci	r29, 0xFF	; 255
    bff4:	88 81       	ld	r24, Y
    bff6:	99 81       	ldd	r25, Y+1	; 0x01
    bff8:	cc 5b       	subi	r28, 0xBC	; 188
    bffa:	d0 40       	sbci	r29, 0x00	; 0
    bffc:	0e 94 98 51 	call	0xa330	; 0xa330 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
    c000:	f3 94       	inc	r15
    c002:	ce 54       	subi	r28, 0x4E	; 78
    c004:	df 4f       	sbci	r29, 0xFF	; 255
    c006:	88 81       	ld	r24, Y
    c008:	c2 5b       	subi	r28, 0xB2	; 178
    c00a:	d0 40       	sbci	r29, 0x00	; 0
    c00c:	8f 5f       	subi	r24, 0xFF	; 255
    c00e:	ce 54       	subi	r28, 0x4E	; 78
    c010:	df 4f       	sbci	r29, 0xFF	; 255
    c012:	88 83       	st	Y, r24
    c014:	c2 5b       	subi	r28, 0xB2	; 178
    c016:	d0 40       	sbci	r29, 0x00	; 0
    c018:	63 cf       	rjmp	.-314    	; 0xbee0 <draw_menu(bool)+0x147e>
    c01a:	c0 54       	subi	r28, 0x40	; 64
    c01c:	df 4f       	sbci	r29, 0xFF	; 255
    c01e:	e8 81       	ld	r30, Y
    c020:	f9 81       	ldd	r31, Y+1	; 0x01
    c022:	c0 5c       	subi	r28, 0xC0	; 192
    c024:	d0 40       	sbci	r29, 0x00	; 0
    c026:	25 91       	lpm	r18, Z+
    c028:	34 91       	lpm	r19, Z
    c02a:	c5 53       	subi	r28, 0x35	; 53
    c02c:	df 4f       	sbci	r29, 0xFF	; 255
    c02e:	e8 81       	ld	r30, Y
    c030:	f9 81       	ldd	r31, Y+1	; 0x01
    c032:	cb 5c       	subi	r28, 0xCB	; 203
    c034:	d0 40       	sbci	r29, 0x00	; 0
    c036:	94 91       	lpm	r25, Z
    c038:	c8 54       	subi	r28, 0x48	; 72
    c03a:	df 4f       	sbci	r29, 0xFF	; 255
    c03c:	68 81       	ld	r22, Y
    c03e:	79 81       	ldd	r23, Y+1	; 0x01
    c040:	c8 5b       	subi	r28, 0xB8	; 184
    c042:	d0 40       	sbci	r29, 0x00	; 0
    c044:	26 0f       	add	r18, r22
    c046:	37 1f       	adc	r19, r23
    c048:	f9 01       	movw	r30, r18
    c04a:	9f 9d       	mul	r25, r15
    c04c:	e0 0d       	add	r30, r0
    c04e:	f1 1d       	adc	r31, r1
    c050:	11 24       	eor	r1, r1
    c052:	c2 54       	subi	r28, 0x42	; 66
    c054:	df 4f       	sbci	r29, 0xFF	; 255
    c056:	f9 83       	std	Y+1, r31	; 0x01
    c058:	e8 83       	st	Y, r30
    c05a:	ce 5b       	subi	r28, 0xBE	; 190
    c05c:	d0 40       	sbci	r29, 0x00	; 0
    c05e:	70 cf       	rjmp	.-288    	; 0xbf40 <draw_menu(bool)+0x14de>
    c060:	f1 01       	movw	r30, r2
    c062:	25 91       	lpm	r18, Z+
    c064:	34 91       	lpm	r19, Z
    c066:	c3 53       	subi	r28, 0x33	; 51
    c068:	df 4f       	sbci	r29, 0xFF	; 255
    c06a:	e8 81       	ld	r30, Y
    c06c:	f9 81       	ldd	r31, Y+1	; 0x01
    c06e:	cd 5c       	subi	r28, 0xCD	; 205
    c070:	d0 40       	sbci	r29, 0x00	; 0
    c072:	94 91       	lpm	r25, Z
    c074:	ca 54       	subi	r28, 0x4A	; 74
    c076:	df 4f       	sbci	r29, 0xFF	; 255
    c078:	48 81       	ld	r20, Y
    c07a:	59 81       	ldd	r21, Y+1	; 0x01
    c07c:	c6 5b       	subi	r28, 0xB6	; 182
    c07e:	d0 40       	sbci	r29, 0x00	; 0
    c080:	24 0f       	add	r18, r20
    c082:	35 1f       	adc	r19, r21
    c084:	b9 01       	movw	r22, r18
    c086:	9f 9d       	mul	r25, r15
    c088:	60 0d       	add	r22, r0
    c08a:	71 1d       	adc	r23, r1
    c08c:	11 24       	eor	r1, r1
    c08e:	c4 54       	subi	r28, 0x44	; 68
    c090:	df 4f       	sbci	r29, 0xFF	; 255
    c092:	79 83       	std	Y+1, r23	; 0x01
    c094:	68 83       	st	Y, r22
    c096:	cc 5b       	subi	r28, 0xBC	; 188
    c098:	d0 40       	sbci	r29, 0x00	; 0
    c09a:	6a cf       	rjmp	.-300    	; 0xbf70 <draw_menu(bool)+0x150e>
    c09c:	ce 53       	subi	r28, 0x3E	; 62
    c09e:	df 4f       	sbci	r29, 0xFF	; 255
    c0a0:	e8 81       	ld	r30, Y
    c0a2:	f9 81       	ldd	r31, Y+1	; 0x01
    c0a4:	c2 5c       	subi	r28, 0xC2	; 194
    c0a6:	d0 40       	sbci	r29, 0x00	; 0
    c0a8:	ef 2b       	or	r30, r31
    c0aa:	09 f4       	brne	.+2      	; 0xc0ae <draw_menu(bool)+0x164c>
    c0ac:	57 c1       	rjmp	.+686    	; 0xc35c <draw_menu(bool)+0x18fa>
    c0ae:	cc 53       	subi	r28, 0x3C	; 60
    c0b0:	df 4f       	sbci	r29, 0xFF	; 255
    c0b2:	28 81       	ld	r18, Y
    c0b4:	39 81       	ldd	r19, Y+1	; 0x01
    c0b6:	c4 5c       	subi	r28, 0xC4	; 196
    c0b8:	d0 40       	sbci	r29, 0x00	; 0
    c0ba:	23 2b       	or	r18, r19
    c0bc:	09 f4       	brne	.+2      	; 0xc0c0 <draw_menu(bool)+0x165e>
    c0be:	4e c1       	rjmp	.+668    	; 0xc35c <draw_menu(bool)+0x18fa>
    c0c0:	ce 54       	subi	r28, 0x4E	; 78
    c0c2:	df 4f       	sbci	r29, 0xFF	; 255
    c0c4:	18 82       	st	Y, r1
    c0c6:	c2 5b       	subi	r28, 0xB2	; 178
    c0c8:	d0 40       	sbci	r29, 0x00	; 0
    c0ca:	f2 01       	movw	r30, r4
    c0cc:	e0 54       	subi	r30, 0x40	; 64
    c0ce:	fe 4f       	sbci	r31, 0xFE	; 254
    c0d0:	e6 0d       	add	r30, r6
    c0d2:	f7 1d       	adc	r31, r7
    c0d4:	25 91       	lpm	r18, Z+
    c0d6:	34 91       	lpm	r19, Z
    c0d8:	c2 01       	movw	r24, r4
    c0da:	85 54       	subi	r24, 0x45	; 69
    c0dc:	9e 4f       	sbci	r25, 0xFE	; 254
    c0de:	a3 01       	movw	r20, r6
    c0e0:	48 0f       	add	r20, r24
    c0e2:	59 1f       	adc	r21, r25
    c0e4:	c6 54       	subi	r28, 0x46	; 70
    c0e6:	df 4f       	sbci	r29, 0xFF	; 255
    c0e8:	59 83       	std	Y+1, r21	; 0x01
    c0ea:	48 83       	st	Y, r20
    c0ec:	ca 5b       	subi	r28, 0xBA	; 186
    c0ee:	d0 40       	sbci	r29, 0x00	; 0
    c0f0:	fa 01       	movw	r30, r20
    c0f2:	84 91       	lpm	r24, Z
    c0f4:	cf 54       	subi	r28, 0x4F	; 79
    c0f6:	df 4f       	sbci	r29, 0xFF	; 255
    c0f8:	68 81       	ld	r22, Y
    c0fa:	c1 5b       	subi	r28, 0xB1	; 177
    c0fc:	d0 40       	sbci	r29, 0x00	; 0
    c0fe:	70 e0       	ldi	r23, 0x00	; 0
    c100:	40 e0       	ldi	r20, 0x00	; 0
    c102:	90 e0       	ldi	r25, 0x00	; 0
    c104:	f9 01       	movw	r30, r18
    c106:	19 95       	eicall
    c108:	cd 54       	subi	r28, 0x4D	; 77
    c10a:	df 4f       	sbci	r29, 0xFF	; 255
    c10c:	88 83       	st	Y, r24
    c10e:	c3 5b       	subi	r28, 0xB3	; 179
    c110:	d0 40       	sbci	r29, 0x00	; 0
    c112:	f2 01       	movw	r30, r4
    c114:	e6 54       	subi	r30, 0x46	; 70
    c116:	fe 4f       	sbci	r31, 0xFE	; 254
    c118:	e6 0d       	add	r30, r6
    c11a:	f7 1d       	adc	r31, r7
    c11c:	44 91       	lpm	r20, Z
    c11e:	4f 3f       	cpi	r20, 0xFF	; 255
    c120:	b9 f0       	breq	.+46     	; 0xc150 <draw_menu(bool)+0x16ee>
    c122:	f2 01       	movw	r30, r4
    c124:	e8 54       	subi	r30, 0x48	; 72
    c126:	fe 4f       	sbci	r31, 0xFE	; 254
    c128:	e6 0d       	add	r30, r6
    c12a:	f7 1d       	adc	r31, r7
    c12c:	24 91       	lpm	r18, Z
    c12e:	f2 01       	movw	r30, r4
    c130:	e7 54       	subi	r30, 0x47	; 71
    c132:	fe 4f       	sbci	r31, 0xFE	; 254
    c134:	e6 0d       	add	r30, r6
    c136:	f7 1d       	adc	r31, r7
    c138:	e4 91       	lpm	r30, Z
    c13a:	2e 9f       	mul	r18, r30
    c13c:	20 2d       	mov	r18, r0
    c13e:	11 24       	eor	r1, r1
    c140:	be 01       	movw	r22, r28
    c142:	6d 54       	subi	r22, 0x4D	; 77
    c144:	7f 4f       	sbci	r23, 0xFF	; 255
    c146:	ce 01       	movw	r24, r28
    c148:	8e 54       	subi	r24, 0x4E	; 78
    c14a:	9f 4f       	sbci	r25, 0xFF	; 255
    c14c:	0e 94 5e 51 	call	0xa2bc	; 0xa2bc <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    c150:	ce 54       	subi	r28, 0x4E	; 78
    c152:	df 4f       	sbci	r29, 0xFF	; 255
    c154:	f8 81       	ld	r31, Y
    c156:	c2 5b       	subi	r28, 0xB2	; 178
    c158:	d0 40       	sbci	r29, 0x00	; 0
    c15a:	cf 52       	subi	r28, 0x2F	; 47
    c15c:	df 4f       	sbci	r29, 0xFF	; 255
    c15e:	f8 83       	st	Y, r31
    c160:	c1 5d       	subi	r28, 0xD1	; 209
    c162:	d0 40       	sbci	r29, 0x00	; 0
    c164:	cd 54       	subi	r28, 0x4D	; 77
    c166:	df 4f       	sbci	r29, 0xFF	; 255
    c168:	28 81       	ld	r18, Y
    c16a:	c3 5b       	subi	r28, 0xB3	; 179
    c16c:	d0 40       	sbci	r29, 0x00	; 0
    c16e:	ca 53       	subi	r28, 0x3A	; 58
    c170:	df 4f       	sbci	r29, 0xFF	; 255
    c172:	28 83       	st	Y, r18
    c174:	c6 5c       	subi	r28, 0xC6	; 198
    c176:	d0 40       	sbci	r29, 0x00	; 0
    c178:	62 01       	movw	r12, r4
    c17a:	34 e5       	ldi	r19, 0x54	; 84
    c17c:	c3 1a       	sub	r12, r19
    c17e:	3e ef       	ldi	r19, 0xFE	; 254
    c180:	d3 0a       	sbc	r13, r19
    c182:	c6 0c       	add	r12, r6
    c184:	d7 1c       	adc	r13, r7
    c186:	12 01       	movw	r2, r4
    c188:	42 e5       	ldi	r20, 0x52	; 82
    c18a:	24 1a       	sub	r2, r20
    c18c:	4e ef       	ldi	r20, 0xFE	; 254
    c18e:	34 0a       	sbc	r3, r20
    c190:	26 0c       	add	r2, r6
    c192:	37 1c       	adc	r3, r7
    c194:	c2 01       	movw	r24, r4
    c196:	89 54       	subi	r24, 0x49	; 73
    c198:	9e 4f       	sbci	r25, 0xFE	; 254
    c19a:	b3 01       	movw	r22, r6
    c19c:	68 0f       	add	r22, r24
    c19e:	79 1f       	adc	r23, r25
    c1a0:	c0 54       	subi	r28, 0x40	; 64
    c1a2:	df 4f       	sbci	r29, 0xFF	; 255
    c1a4:	79 83       	std	Y+1, r23	; 0x01
    c1a6:	68 83       	st	Y, r22
    c1a8:	c0 5c       	subi	r28, 0xC0	; 192
    c1aa:	d0 40       	sbci	r29, 0x00	; 0
    c1ac:	01 97       	sbiw	r24, 0x01	; 1
    c1ae:	f3 01       	movw	r30, r6
    c1b0:	e8 0f       	add	r30, r24
    c1b2:	f9 1f       	adc	r31, r25
    c1b4:	c8 53       	subi	r28, 0x38	; 56
    c1b6:	df 4f       	sbci	r29, 0xFF	; 255
    c1b8:	f9 83       	std	Y+1, r31	; 0x01
    c1ba:	e8 83       	st	Y, r30
    c1bc:	c8 5c       	subi	r28, 0xC8	; 200
    c1be:	d0 40       	sbci	r29, 0x00	; 0
    c1c0:	01 97       	sbiw	r24, 0x01	; 1
    c1c2:	93 01       	movw	r18, r6
    c1c4:	28 0f       	add	r18, r24
    c1c6:	39 1f       	adc	r19, r25
    c1c8:	c5 53       	subi	r28, 0x35	; 53
    c1ca:	df 4f       	sbci	r29, 0xFF	; 255
    c1cc:	39 83       	std	Y+1, r19	; 0x01
    c1ce:	28 83       	st	Y, r18
    c1d0:	cb 5c       	subi	r28, 0xCB	; 203
    c1d2:	d0 40       	sbci	r29, 0x00	; 0
    c1d4:	03 97       	sbiw	r24, 0x03	; 3
    c1d6:	a3 01       	movw	r20, r6
    c1d8:	48 0f       	add	r20, r24
    c1da:	59 1f       	adc	r21, r25
    c1dc:	c3 53       	subi	r28, 0x33	; 51
    c1de:	df 4f       	sbci	r29, 0xFF	; 255
    c1e0:	59 83       	std	Y+1, r21	; 0x01
    c1e2:	48 83       	st	Y, r20
    c1e4:	cd 5c       	subi	r28, 0xCD	; 205
    c1e6:	d0 40       	sbci	r29, 0x00	; 0
    c1e8:	02 97       	sbiw	r24, 0x02	; 2
    c1ea:	b3 01       	movw	r22, r6
    c1ec:	68 0f       	add	r22, r24
    c1ee:	79 1f       	adc	r23, r25
    c1f0:	c1 53       	subi	r28, 0x31	; 49
    c1f2:	df 4f       	sbci	r29, 0xFF	; 255
    c1f4:	79 83       	std	Y+1, r23	; 0x01
    c1f6:	68 83       	st	Y, r22
    c1f8:	cf 5c       	subi	r28, 0xCF	; 207
    c1fa:	d0 40       	sbci	r29, 0x00	; 0
    c1fc:	b1 2c       	mov	r11, r1
    c1fe:	a1 2c       	mov	r10, r1
    c200:	cf 52       	subi	r28, 0x2F	; 47
    c202:	df 4f       	sbci	r29, 0xFF	; 255
    c204:	88 80       	ld	r8, Y
    c206:	c1 5d       	subi	r28, 0xD1	; 209
    c208:	d0 40       	sbci	r29, 0x00	; 0
    c20a:	8a 0c       	add	r8, r10
    c20c:	ca 53       	subi	r28, 0x3A	; 58
    c20e:	df 4f       	sbci	r29, 0xFF	; 255
    c210:	78 81       	ld	r23, Y
    c212:	c6 5c       	subi	r28, 0xC6	; 198
    c214:	d0 40       	sbci	r29, 0x00	; 0
    c216:	87 16       	cp	r8, r23
    c218:	08 f0       	brcs	.+2      	; 0xc21c <draw_menu(bool)+0x17ba>
    c21a:	a0 c0       	rjmp	.+320    	; 0xc35c <draw_menu(bool)+0x18fa>
    c21c:	f6 01       	movw	r30, r12
    c21e:	25 91       	lpm	r18, Z+
    c220:	34 91       	lpm	r19, Z
    c222:	f1 01       	movw	r30, r2
    c224:	85 91       	lpm	r24, Z+
    c226:	94 91       	lpm	r25, Z
    c228:	c0 54       	subi	r28, 0x40	; 64
    c22a:	df 4f       	sbci	r29, 0xFF	; 255
    c22c:	e8 81       	ld	r30, Y
    c22e:	f9 81       	ldd	r31, Y+1	; 0x01
    c230:	c0 5c       	subi	r28, 0xC0	; 192
    c232:	d0 40       	sbci	r29, 0x00	; 0
    c234:	44 91       	lpm	r20, Z
    c236:	44 23       	and	r20, r20
    c238:	09 f4       	brne	.+2      	; 0xc23c <draw_menu(bool)+0x17da>
    c23a:	92 c0       	rjmp	.+292    	; 0xc360 <draw_menu(bool)+0x18fe>
    c23c:	c8 54       	subi	r28, 0x48	; 72
    c23e:	df 4f       	sbci	r29, 0xFF	; 255
    c240:	48 81       	ld	r20, Y
    c242:	59 81       	ldd	r21, Y+1	; 0x01
    c244:	c8 5b       	subi	r28, 0xB8	; 184
    c246:	d0 40       	sbci	r29, 0x00	; 0
    c248:	48 0f       	add	r20, r24
    c24a:	59 1f       	adc	r21, r25
    c24c:	c2 54       	subi	r28, 0x42	; 66
    c24e:	df 4f       	sbci	r29, 0xFF	; 255
    c250:	59 83       	std	Y+1, r21	; 0x01
    c252:	48 83       	st	Y, r20
    c254:	ce 5b       	subi	r28, 0xBE	; 190
    c256:	d0 40       	sbci	r29, 0x00	; 0
    c258:	c0 54       	subi	r28, 0x40	; 64
    c25a:	df 4f       	sbci	r29, 0xFF	; 255
    c25c:	e8 81       	ld	r30, Y
    c25e:	f9 81       	ldd	r31, Y+1	; 0x01
    c260:	c0 5c       	subi	r28, 0xC0	; 192
    c262:	d0 40       	sbci	r29, 0x00	; 0
    c264:	84 91       	lpm	r24, Z
    c266:	ca 54       	subi	r28, 0x4A	; 74
    c268:	df 4f       	sbci	r29, 0xFF	; 255
    c26a:	48 81       	ld	r20, Y
    c26c:	59 81       	ldd	r21, Y+1	; 0x01
    c26e:	c6 5b       	subi	r28, 0xB6	; 182
    c270:	d0 40       	sbci	r29, 0x00	; 0
    c272:	81 30       	cpi	r24, 0x01	; 1
    c274:	c1 f4       	brne	.+48     	; 0xc2a6 <draw_menu(bool)+0x1844>
    c276:	f6 01       	movw	r30, r12
    c278:	85 91       	lpm	r24, Z+
    c27a:	94 91       	lpm	r25, Z
    c27c:	c5 53       	subi	r28, 0x35	; 53
    c27e:	df 4f       	sbci	r29, 0xFF	; 255
    c280:	e8 81       	ld	r30, Y
    c282:	f9 81       	ldd	r31, Y+1	; 0x01
    c284:	cb 5c       	subi	r28, 0xCB	; 203
    c286:	d0 40       	sbci	r29, 0x00	; 0
    c288:	44 91       	lpm	r20, Z
    c28a:	ca 54       	subi	r28, 0x4A	; 74
    c28c:	df 4f       	sbci	r29, 0xFF	; 255
    c28e:	28 81       	ld	r18, Y
    c290:	39 81       	ldd	r19, Y+1	; 0x01
    c292:	c6 5b       	subi	r28, 0xB6	; 182
    c294:	d0 40       	sbci	r29, 0x00	; 0
    c296:	82 0f       	add	r24, r18
    c298:	93 1f       	adc	r25, r19
    c29a:	4a 9d       	mul	r20, r10
    c29c:	90 01       	movw	r18, r0
    c29e:	4b 9d       	mul	r20, r11
    c2a0:	30 0d       	add	r19, r0
    c2a2:	11 24       	eor	r1, r1
    c2a4:	ac 01       	movw	r20, r24
    c2a6:	42 0f       	add	r20, r18
    c2a8:	53 1f       	adc	r21, r19
    c2aa:	c4 54       	subi	r28, 0x44	; 68
    c2ac:	df 4f       	sbci	r29, 0xFF	; 255
    c2ae:	59 83       	std	Y+1, r21	; 0x01
    c2b0:	48 83       	st	Y, r20
    c2b2:	cc 5b       	subi	r28, 0xBC	; 188
    c2b4:	d0 40       	sbci	r29, 0x00	; 0
    c2b6:	c3 53       	subi	r28, 0x33	; 51
    c2b8:	df 4f       	sbci	r29, 0xFF	; 255
    c2ba:	e8 81       	ld	r30, Y
    c2bc:	f9 81       	ldd	r31, Y+1	; 0x01
    c2be:	cd 5c       	subi	r28, 0xCD	; 205
    c2c0:	d0 40       	sbci	r29, 0x00	; 0
    c2c2:	25 91       	lpm	r18, Z+
    c2c4:	34 91       	lpm	r19, Z
    c2c6:	c1 53       	subi	r28, 0x31	; 49
    c2c8:	df 4f       	sbci	r29, 0xFF	; 255
    c2ca:	e8 81       	ld	r30, Y
    c2cc:	f9 81       	ldd	r31, Y+1	; 0x01
    c2ce:	cf 5c       	subi	r28, 0xCF	; 207
    c2d0:	d0 40       	sbci	r29, 0x00	; 0
    c2d2:	45 91       	lpm	r20, Z+
    c2d4:	54 91       	lpm	r21, Z
    c2d6:	cc 53       	subi	r28, 0x3C	; 60
    c2d8:	df 4f       	sbci	r29, 0xFF	; 255
    c2da:	e8 80       	ld	r14, Y
    c2dc:	f9 80       	ldd	r15, Y+1	; 0x01
    c2de:	c4 5c       	subi	r28, 0xC4	; 196
    c2e0:	d0 40       	sbci	r29, 0x00	; 0
    c2e2:	ce 53       	subi	r28, 0x3E	; 62
    c2e4:	df 4f       	sbci	r29, 0xFF	; 255
    c2e6:	08 81       	ld	r16, Y
    c2e8:	19 81       	ldd	r17, Y+1	; 0x01
    c2ea:	c2 5c       	subi	r28, 0xC2	; 194
    c2ec:	d0 40       	sbci	r29, 0x00	; 0
    c2ee:	c2 54       	subi	r28, 0x42	; 66
    c2f0:	df 4f       	sbci	r29, 0xFF	; 255
    c2f2:	68 81       	ld	r22, Y
    c2f4:	79 81       	ldd	r23, Y+1	; 0x01
    c2f6:	ce 5b       	subi	r28, 0xBE	; 190
    c2f8:	d0 40       	sbci	r29, 0x00	; 0
    c2fa:	c4 54       	subi	r28, 0x44	; 68
    c2fc:	df 4f       	sbci	r29, 0xFF	; 255
    c2fe:	88 81       	ld	r24, Y
    c300:	99 81       	ldd	r25, Y+1	; 0x01
    c302:	cc 5b       	subi	r28, 0xBC	; 188
    c304:	d0 40       	sbci	r29, 0x00	; 0
    c306:	0e 94 16 55 	call	0xaa2c	; 0xaa2c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    c30a:	18 2f       	mov	r17, r24
    c30c:	5f ef       	ldi	r21, 0xFF	; 255
    c30e:	a5 1a       	sub	r10, r21
    c310:	b5 0a       	sbc	r11, r21
    c312:	88 23       	and	r24, r24
    c314:	09 f4       	brne	.+2      	; 0xc318 <draw_menu(bool)+0x18b6>
    c316:	74 cf       	rjmp	.-280    	; 0xc200 <draw_menu(bool)+0x179e>
    c318:	ce 54       	subi	r28, 0x4E	; 78
    c31a:	df 4f       	sbci	r29, 0xFF	; 255
    c31c:	88 82       	st	Y, r8
    c31e:	c2 5b       	subi	r28, 0xB2	; 178
    c320:	d0 40       	sbci	r29, 0x00	; 0
    c322:	f2 01       	movw	r30, r4
    c324:	e2 54       	subi	r30, 0x42	; 66
    c326:	fe 4f       	sbci	r31, 0xFE	; 254
    c328:	e6 0d       	add	r30, r6
    c32a:	f7 1d       	adc	r31, r7
    c32c:	25 91       	lpm	r18, Z+
    c32e:	34 91       	lpm	r19, Z
    c330:	c6 54       	subi	r28, 0x46	; 70
    c332:	df 4f       	sbci	r29, 0xFF	; 255
    c334:	e8 81       	ld	r30, Y
    c336:	f9 81       	ldd	r31, Y+1	; 0x01
    c338:	ca 5b       	subi	r28, 0xBA	; 186
    c33a:	d0 40       	sbci	r29, 0x00	; 0
    c33c:	84 91       	lpm	r24, Z
    c33e:	cf 54       	subi	r28, 0x4F	; 79
    c340:	df 4f       	sbci	r29, 0xFF	; 255
    c342:	68 81       	ld	r22, Y
    c344:	c1 5b       	subi	r28, 0xB1	; 177
    c346:	d0 40       	sbci	r29, 0x00	; 0
    c348:	70 e0       	ldi	r23, 0x00	; 0
    c34a:	48 2d       	mov	r20, r8
    c34c:	90 e0       	ldi	r25, 0x00	; 0
    c34e:	f9 01       	movw	r30, r18
    c350:	19 95       	eicall
    c352:	c6 53       	subi	r28, 0x36	; 54
    c354:	df 4f       	sbci	r29, 0xFF	; 255
    c356:	18 83       	st	Y, r17
    c358:	ca 5c       	subi	r28, 0xCA	; 202
    c35a:	d0 40       	sbci	r29, 0x00	; 0
    c35c:	93 94       	inc	r9
    c35e:	fd cc       	rjmp	.-1542   	; 0xbd5a <draw_menu(bool)+0x12f8>
    c360:	f1 01       	movw	r30, r2
    c362:	85 91       	lpm	r24, Z+
    c364:	94 91       	lpm	r25, Z
    c366:	c8 53       	subi	r28, 0x38	; 56
    c368:	df 4f       	sbci	r29, 0xFF	; 255
    c36a:	e8 81       	ld	r30, Y
    c36c:	f9 81       	ldd	r31, Y+1	; 0x01
    c36e:	c8 5c       	subi	r28, 0xC8	; 200
    c370:	d0 40       	sbci	r29, 0x00	; 0
    c372:	64 91       	lpm	r22, Z
    c374:	c8 54       	subi	r28, 0x48	; 72
    c376:	df 4f       	sbci	r29, 0xFF	; 255
    c378:	48 81       	ld	r20, Y
    c37a:	59 81       	ldd	r21, Y+1	; 0x01
    c37c:	c8 5b       	subi	r28, 0xB8	; 184
    c37e:	d0 40       	sbci	r29, 0x00	; 0
    c380:	84 0f       	add	r24, r20
    c382:	95 1f       	adc	r25, r21
    c384:	6a 9d       	mul	r22, r10
    c386:	a0 01       	movw	r20, r0
    c388:	6b 9d       	mul	r22, r11
    c38a:	50 0d       	add	r21, r0
    c38c:	11 24       	eor	r1, r1
    c38e:	bc 01       	movw	r22, r24
    c390:	64 0f       	add	r22, r20
    c392:	75 1f       	adc	r23, r21
    c394:	c2 54       	subi	r28, 0x42	; 66
    c396:	df 4f       	sbci	r29, 0xFF	; 255
    c398:	79 83       	std	Y+1, r23	; 0x01
    c39a:	68 83       	st	Y, r22
    c39c:	ce 5b       	subi	r28, 0xBE	; 190
    c39e:	d0 40       	sbci	r29, 0x00	; 0
    c3a0:	5b cf       	rjmp	.-330    	; 0xc258 <draw_menu(bool)+0x17f6>
    c3a2:	c6 53       	subi	r28, 0x36	; 54
    c3a4:	df 4f       	sbci	r29, 0xFF	; 255
    c3a6:	f8 81       	ld	r31, Y
    c3a8:	ca 5c       	subi	r28, 0xCA	; 202
    c3aa:	d0 40       	sbci	r29, 0x00	; 0
    c3ac:	f1 11       	cpse	r31, r1
    c3ae:	61 c4       	rjmp	.+2242   	; 0xcc72 <draw_menu(bool)+0x2210>
    c3b0:	21 2c       	mov	r2, r1
    c3b2:	93 01       	movw	r18, r6
    c3b4:	2c 53       	subi	r18, 0x3C	; 60
    c3b6:	3d 4f       	sbci	r19, 0xFD	; 253
    c3b8:	c0 52       	subi	r28, 0x20	; 32
    c3ba:	df 4f       	sbci	r29, 0xFF	; 255
    c3bc:	39 83       	std	Y+1, r19	; 0x01
    c3be:	28 83       	st	Y, r18
    c3c0:	c0 5e       	subi	r28, 0xE0	; 224
    c3c2:	d0 40       	sbci	r29, 0x00	; 0
    c3c4:	ae 01       	movw	r20, r28
    c3c6:	4f 57       	subi	r20, 0x7F	; 127
    c3c8:	5f 4f       	sbci	r21, 0xFF	; 255
    c3ca:	cc 54       	subi	r28, 0x4C	; 76
    c3cc:	df 4f       	sbci	r29, 0xFF	; 255
    c3ce:	59 83       	std	Y+1, r21	; 0x01
    c3d0:	48 83       	st	Y, r20
    c3d2:	c4 5b       	subi	r28, 0xB4	; 180
    c3d4:	d0 40       	sbci	r29, 0x00	; 0
    c3d6:	c0 52       	subi	r28, 0x20	; 32
    c3d8:	df 4f       	sbci	r29, 0xFF	; 255
    c3da:	e8 81       	ld	r30, Y
    c3dc:	f9 81       	ldd	r31, Y+1	; 0x01
    c3de:	c0 5e       	subi	r28, 0xE0	; 224
    c3e0:	d0 40       	sbci	r29, 0x00	; 0
    c3e2:	84 91       	lpm	r24, Z
    c3e4:	28 16       	cp	r2, r24
    c3e6:	08 f0       	brcs	.+2      	; 0xc3ea <draw_menu(bool)+0x1988>
    c3e8:	4a c4       	rjmp	.+2196   	; 0xcc7e <draw_menu(bool)+0x221c>
    c3ea:	fe e1       	ldi	r31, 0x1E	; 30
    c3ec:	2f 9e       	mul	r2, r31
    c3ee:	20 01       	movw	r4, r0
    c3f0:	11 24       	eor	r1, r1
    c3f2:	f2 01       	movw	r30, r4
    c3f4:	e4 54       	subi	r30, 0x44	; 68
    c3f6:	fd 4f       	sbci	r31, 0xFD	; 253
    c3f8:	e6 0d       	add	r30, r6
    c3fa:	f7 1d       	adc	r31, r7
    c3fc:	84 91       	lpm	r24, Z
    c3fe:	cd 52       	subi	r28, 0x2D	; 45
    c400:	df 4f       	sbci	r29, 0xFF	; 255
    c402:	68 81       	ld	r22, Y
    c404:	c3 5d       	subi	r28, 0xD3	; 211
    c406:	d0 40       	sbci	r29, 0x00	; 0
    c408:	0e 94 42 3a 	call	0x7484	; 0x7484 <enable_redraw(unsigned char, unsigned char)>
    c40c:	88 23       	and	r24, r24
    c40e:	09 f4       	brne	.+2      	; 0xc412 <draw_menu(bool)+0x19b0>
    c410:	5e c2       	rjmp	.+1212   	; 0xc8ce <draw_menu(bool)+0x1e6c>
    c412:	ce 54       	subi	r28, 0x4E	; 78
    c414:	df 4f       	sbci	r29, 0xFF	; 255
    c416:	18 82       	st	Y, r1
    c418:	c2 5b       	subi	r28, 0xB2	; 178
    c41a:	d0 40       	sbci	r29, 0x00	; 0
    c41c:	f2 01       	movw	r30, r4
    c41e:	e8 54       	subi	r30, 0x48	; 72
    c420:	fd 4f       	sbci	r31, 0xFD	; 253
    c422:	e6 0d       	add	r30, r6
    c424:	f7 1d       	adc	r31, r7
    c426:	25 91       	lpm	r18, Z+
    c428:	34 91       	lpm	r19, Z
    c42a:	c2 01       	movw	r24, r4
    c42c:	8d 54       	subi	r24, 0x4D	; 77
    c42e:	9d 4f       	sbci	r25, 0xFD	; 253
    c430:	a3 01       	movw	r20, r6
    c432:	48 0f       	add	r20, r24
    c434:	59 1f       	adc	r21, r25
    c436:	c6 54       	subi	r28, 0x46	; 70
    c438:	df 4f       	sbci	r29, 0xFF	; 255
    c43a:	59 83       	std	Y+1, r21	; 0x01
    c43c:	48 83       	st	Y, r20
    c43e:	ca 5b       	subi	r28, 0xBA	; 186
    c440:	d0 40       	sbci	r29, 0x00	; 0
    c442:	fa 01       	movw	r30, r20
    c444:	84 91       	lpm	r24, Z
    c446:	cf 54       	subi	r28, 0x4F	; 79
    c448:	df 4f       	sbci	r29, 0xFF	; 255
    c44a:	68 81       	ld	r22, Y
    c44c:	c1 5b       	subi	r28, 0xB1	; 177
    c44e:	d0 40       	sbci	r29, 0x00	; 0
    c450:	70 e0       	ldi	r23, 0x00	; 0
    c452:	40 e0       	ldi	r20, 0x00	; 0
    c454:	90 e0       	ldi	r25, 0x00	; 0
    c456:	f9 01       	movw	r30, r18
    c458:	19 95       	eicall
    c45a:	cd 54       	subi	r28, 0x4D	; 77
    c45c:	df 4f       	sbci	r29, 0xFF	; 255
    c45e:	88 83       	st	Y, r24
    c460:	c3 5b       	subi	r28, 0xB3	; 179
    c462:	d0 40       	sbci	r29, 0x00	; 0
    c464:	f2 01       	movw	r30, r4
    c466:	ec 54       	subi	r30, 0x4C	; 76
    c468:	fd 4f       	sbci	r31, 0xFD	; 253
    c46a:	e6 0d       	add	r30, r6
    c46c:	f7 1d       	adc	r31, r7
    c46e:	25 91       	lpm	r18, Z+
    c470:	34 91       	lpm	r19, Z
    c472:	ce 51       	subi	r28, 0x1E	; 30
    c474:	df 4f       	sbci	r29, 0xFF	; 255
    c476:	39 83       	std	Y+1, r19	; 0x01
    c478:	28 83       	st	Y, r18
    c47a:	c2 5e       	subi	r28, 0xE2	; 226
    c47c:	d0 40       	sbci	r29, 0x00	; 0
    c47e:	f2 01       	movw	r30, r4
    c480:	ee 54       	subi	r30, 0x4E	; 78
    c482:	fd 4f       	sbci	r31, 0xFD	; 253
    c484:	e6 0d       	add	r30, r6
    c486:	f7 1d       	adc	r31, r7
    c488:	44 91       	lpm	r20, Z
    c48a:	c2 01       	movw	r24, r4
    c48c:	80 55       	subi	r24, 0x50	; 80
    c48e:	9d 4f       	sbci	r25, 0xFD	; 253
    c490:	b3 01       	movw	r22, r6
    c492:	68 0f       	add	r22, r24
    c494:	79 1f       	adc	r23, r25
    c496:	c1 53       	subi	r28, 0x31	; 49
    c498:	df 4f       	sbci	r29, 0xFF	; 255
    c49a:	79 83       	std	Y+1, r23	; 0x01
    c49c:	68 83       	st	Y, r22
    c49e:	cf 5c       	subi	r28, 0xCF	; 207
    c4a0:	d0 40       	sbci	r29, 0x00	; 0
    c4a2:	4f 3f       	cpi	r20, 0xFF	; 255
    c4a4:	99 f0       	breq	.+38     	; 0xc4cc <draw_menu(bool)+0x1a6a>
    c4a6:	fb 01       	movw	r30, r22
    c4a8:	24 91       	lpm	r18, Z
    c4aa:	f2 01       	movw	r30, r4
    c4ac:	ef 54       	subi	r30, 0x4F	; 79
    c4ae:	fd 4f       	sbci	r31, 0xFD	; 253
    c4b0:	e6 0d       	add	r30, r6
    c4b2:	f7 1d       	adc	r31, r7
    c4b4:	e4 91       	lpm	r30, Z
    c4b6:	2e 9f       	mul	r18, r30
    c4b8:	20 2d       	mov	r18, r0
    c4ba:	11 24       	eor	r1, r1
    c4bc:	be 01       	movw	r22, r28
    c4be:	6d 54       	subi	r22, 0x4D	; 77
    c4c0:	7f 4f       	sbci	r23, 0xFF	; 255
    c4c2:	ce 01       	movw	r24, r28
    c4c4:	8e 54       	subi	r24, 0x4E	; 78
    c4c6:	9f 4f       	sbci	r25, 0xFF	; 255
    c4c8:	0e 94 5e 51 	call	0xa2bc	; 0xa2bc <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    c4cc:	c2 01       	movw	r24, r4
    c4ce:	81 55       	subi	r24, 0x51	; 81
    c4d0:	9d 4f       	sbci	r25, 0xFD	; 253
    c4d2:	93 01       	movw	r18, r6
    c4d4:	28 0f       	add	r18, r24
    c4d6:	39 1f       	adc	r19, r25
    c4d8:	c0 54       	subi	r28, 0x40	; 64
    c4da:	df 4f       	sbci	r29, 0xFF	; 255
    c4dc:	39 83       	std	Y+1, r19	; 0x01
    c4de:	28 83       	st	Y, r18
    c4e0:	c0 5c       	subi	r28, 0xC0	; 192
    c4e2:	d0 40       	sbci	r29, 0x00	; 0
    c4e4:	40 97       	sbiw	r24, 0x10	; 16
    c4e6:	a3 01       	movw	r20, r6
    c4e8:	48 0f       	add	r20, r24
    c4ea:	59 1f       	adc	r21, r25
    c4ec:	ca 53       	subi	r28, 0x3A	; 58
    c4ee:	df 4f       	sbci	r29, 0xFF	; 255
    c4f0:	59 83       	std	Y+1, r21	; 0x01
    c4f2:	48 83       	st	Y, r20
    c4f4:	c6 5c       	subi	r28, 0xC6	; 198
    c4f6:	d0 40       	sbci	r29, 0x00	; 0
    c4f8:	02 96       	adiw	r24, 0x02	; 2
    c4fa:	b3 01       	movw	r22, r6
    c4fc:	68 0f       	add	r22, r24
    c4fe:	79 1f       	adc	r23, r25
    c500:	c8 53       	subi	r28, 0x38	; 56
    c502:	df 4f       	sbci	r29, 0xFF	; 255
    c504:	79 83       	std	Y+1, r23	; 0x01
    c506:	68 83       	st	Y, r22
    c508:	c8 5c       	subi	r28, 0xC8	; 200
    c50a:	d0 40       	sbci	r29, 0x00	; 0
    c50c:	0d 96       	adiw	r24, 0x0d	; 13
    c50e:	f3 01       	movw	r30, r6
    c510:	e8 0f       	add	r30, r24
    c512:	f9 1f       	adc	r31, r25
    c514:	c5 53       	subi	r28, 0x35	; 53
    c516:	df 4f       	sbci	r29, 0xFF	; 255
    c518:	f9 83       	std	Y+1, r31	; 0x01
    c51a:	e8 83       	st	Y, r30
    c51c:	cb 5c       	subi	r28, 0xCB	; 203
    c51e:	d0 40       	sbci	r29, 0x00	; 0
    c520:	01 97       	sbiw	r24, 0x01	; 1
    c522:	93 01       	movw	r18, r6
    c524:	28 0f       	add	r18, r24
    c526:	39 1f       	adc	r19, r25
    c528:	c3 53       	subi	r28, 0x33	; 51
    c52a:	df 4f       	sbci	r29, 0xFF	; 255
    c52c:	39 83       	std	Y+1, r19	; 0x01
    c52e:	28 83       	st	Y, r18
    c530:	cd 5c       	subi	r28, 0xCD	; 205
    c532:	d0 40       	sbci	r29, 0x00	; 0
    c534:	0d 96       	adiw	r24, 0x0d	; 13
    c536:	a3 01       	movw	r20, r6
    c538:	48 0f       	add	r20, r24
    c53a:	59 1f       	adc	r21, r25
    c53c:	cf 52       	subi	r28, 0x2F	; 47
    c53e:	df 4f       	sbci	r29, 0xFF	; 255
    c540:	59 83       	std	Y+1, r21	; 0x01
    c542:	48 83       	st	Y, r20
    c544:	c1 5d       	subi	r28, 0xD1	; 209
    c546:	d0 40       	sbci	r29, 0x00	; 0
    c548:	0f 97       	sbiw	r24, 0x0f	; 15
    c54a:	b3 01       	movw	r22, r6
    c54c:	68 0f       	add	r22, r24
    c54e:	79 1f       	adc	r23, r25
    c550:	cc 52       	subi	r28, 0x2C	; 44
    c552:	df 4f       	sbci	r29, 0xFF	; 255
    c554:	79 83       	std	Y+1, r23	; 0x01
    c556:	68 83       	st	Y, r22
    c558:	c4 5d       	subi	r28, 0xD4	; 212
    c55a:	d0 40       	sbci	r29, 0x00	; 0
    c55c:	02 97       	sbiw	r24, 0x02	; 2
    c55e:	f3 01       	movw	r30, r6
    c560:	e8 0f       	add	r30, r24
    c562:	f9 1f       	adc	r31, r25
    c564:	ca 52       	subi	r28, 0x2A	; 42
    c566:	df 4f       	sbci	r29, 0xFF	; 255
    c568:	f9 83       	std	Y+1, r31	; 0x01
    c56a:	e8 83       	st	Y, r30
    c56c:	c6 5d       	subi	r28, 0xD6	; 214
    c56e:	d0 40       	sbci	r29, 0x00	; 0
    c570:	01 97       	sbiw	r24, 0x01	; 1
    c572:	93 01       	movw	r18, r6
    c574:	28 0f       	add	r18, r24
    c576:	39 1f       	adc	r19, r25
    c578:	c8 52       	subi	r28, 0x28	; 40
    c57a:	df 4f       	sbci	r29, 0xFF	; 255
    c57c:	39 83       	std	Y+1, r19	; 0x01
    c57e:	28 83       	st	Y, r18
    c580:	c8 5d       	subi	r28, 0xD8	; 216
    c582:	d0 40       	sbci	r29, 0x00	; 0
    c584:	01 97       	sbiw	r24, 0x01	; 1
    c586:	a3 01       	movw	r20, r6
    c588:	48 0f       	add	r20, r24
    c58a:	59 1f       	adc	r21, r25
    c58c:	c6 52       	subi	r28, 0x26	; 38
    c58e:	df 4f       	sbci	r29, 0xFF	; 255
    c590:	59 83       	std	Y+1, r21	; 0x01
    c592:	48 83       	st	Y, r20
    c594:	ca 5d       	subi	r28, 0xDA	; 218
    c596:	d0 40       	sbci	r29, 0x00	; 0
    c598:	02 97       	sbiw	r24, 0x02	; 2
    c59a:	b3 01       	movw	r22, r6
    c59c:	68 0f       	add	r22, r24
    c59e:	79 1f       	adc	r23, r25
    c5a0:	c4 52       	subi	r28, 0x24	; 36
    c5a2:	df 4f       	sbci	r29, 0xFF	; 255
    c5a4:	79 83       	std	Y+1, r23	; 0x01
    c5a6:	68 83       	st	Y, r22
    c5a8:	cc 5d       	subi	r28, 0xDC	; 220
    c5aa:	d0 40       	sbci	r29, 0x00	; 0
    c5ac:	02 97       	sbiw	r24, 0x02	; 2
    c5ae:	f3 01       	movw	r30, r6
    c5b0:	e8 0f       	add	r30, r24
    c5b2:	f9 1f       	adc	r31, r25
    c5b4:	c2 52       	subi	r28, 0x22	; 34
    c5b6:	df 4f       	sbci	r29, 0xFF	; 255
    c5b8:	f9 83       	std	Y+1, r31	; 0x01
    c5ba:	e8 83       	st	Y, r30
    c5bc:	ce 5d       	subi	r28, 0xDE	; 222
    c5be:	d0 40       	sbci	r29, 0x00	; 0
    c5c0:	31 2c       	mov	r3, r1
    c5c2:	91 2c       	mov	r9, r1
    c5c4:	ce 54       	subi	r28, 0x4E	; 78
    c5c6:	df 4f       	sbci	r29, 0xFF	; 255
    c5c8:	88 81       	ld	r24, Y
    c5ca:	c2 5b       	subi	r28, 0xB2	; 178
    c5cc:	d0 40       	sbci	r29, 0x00	; 0
    c5ce:	cd 54       	subi	r28, 0x4D	; 77
    c5d0:	df 4f       	sbci	r29, 0xFF	; 255
    c5d2:	98 81       	ld	r25, Y
    c5d4:	c3 5b       	subi	r28, 0xB3	; 179
    c5d6:	d0 40       	sbci	r29, 0x00	; 0
    c5d8:	89 17       	cp	r24, r25
    c5da:	08 f0       	brcs	.+2      	; 0xc5de <draw_menu(bool)+0x1b7c>
    c5dc:	78 c1       	rjmp	.+752    	; 0xc8ce <draw_menu(bool)+0x1e6c>
    c5de:	c0 54       	subi	r28, 0x40	; 64
    c5e0:	df 4f       	sbci	r29, 0xFF	; 255
    c5e2:	e8 81       	ld	r30, Y
    c5e4:	f9 81       	ldd	r31, Y+1	; 0x01
    c5e6:	c0 5c       	subi	r28, 0xC0	; 192
    c5e8:	d0 40       	sbci	r29, 0x00	; 0
    c5ea:	94 91       	lpm	r25, Z
    c5ec:	91 11       	cpse	r25, r1
    c5ee:	39 c0       	rjmp	.+114    	; 0xc662 <draw_menu(bool)+0x1c00>
    c5f0:	ca 53       	subi	r28, 0x3A	; 58
    c5f2:	df 4f       	sbci	r29, 0xFF	; 255
    c5f4:	e8 81       	ld	r30, Y
    c5f6:	f9 81       	ldd	r31, Y+1	; 0x01
    c5f8:	c6 5c       	subi	r28, 0xC6	; 198
    c5fa:	d0 40       	sbci	r29, 0x00	; 0
    c5fc:	25 91       	lpm	r18, Z+
    c5fe:	34 91       	lpm	r19, Z
    c600:	ca 54       	subi	r28, 0x4A	; 74
    c602:	df 4f       	sbci	r29, 0xFF	; 255
    c604:	48 81       	ld	r20, Y
    c606:	59 81       	ldd	r21, Y+1	; 0x01
    c608:	c6 5b       	subi	r28, 0xB6	; 182
    c60a:	d0 40       	sbci	r29, 0x00	; 0
    c60c:	42 0f       	add	r20, r18
    c60e:	53 1f       	adc	r21, r19
    c610:	c4 54       	subi	r28, 0x44	; 68
    c612:	df 4f       	sbci	r29, 0xFF	; 255
    c614:	59 83       	std	Y+1, r21	; 0x01
    c616:	48 83       	st	Y, r20
    c618:	cc 5b       	subi	r28, 0xBC	; 188
    c61a:	d0 40       	sbci	r29, 0x00	; 0
    c61c:	c8 53       	subi	r28, 0x38	; 56
    c61e:	df 4f       	sbci	r29, 0xFF	; 255
    c620:	e8 81       	ld	r30, Y
    c622:	f9 81       	ldd	r31, Y+1	; 0x01
    c624:	c8 5c       	subi	r28, 0xC8	; 200
    c626:	d0 40       	sbci	r29, 0x00	; 0
    c628:	25 91       	lpm	r18, Z+
    c62a:	34 91       	lpm	r19, Z
    c62c:	c5 53       	subi	r28, 0x35	; 53
    c62e:	df 4f       	sbci	r29, 0xFF	; 255
    c630:	e8 81       	ld	r30, Y
    c632:	f9 81       	ldd	r31, Y+1	; 0x01
    c634:	cb 5c       	subi	r28, 0xCB	; 203
    c636:	d0 40       	sbci	r29, 0x00	; 0
    c638:	94 91       	lpm	r25, Z
    c63a:	c8 54       	subi	r28, 0x48	; 72
    c63c:	df 4f       	sbci	r29, 0xFF	; 255
    c63e:	48 81       	ld	r20, Y
    c640:	59 81       	ldd	r21, Y+1	; 0x01
    c642:	c8 5b       	subi	r28, 0xB8	; 184
    c644:	d0 40       	sbci	r29, 0x00	; 0
    c646:	24 0f       	add	r18, r20
    c648:	35 1f       	adc	r19, r21
    c64a:	b9 01       	movw	r22, r18
    c64c:	99 9d       	mul	r25, r9
    c64e:	60 0d       	add	r22, r0
    c650:	71 1d       	adc	r23, r1
    c652:	11 24       	eor	r1, r1
    c654:	c2 54       	subi	r28, 0x42	; 66
    c656:	df 4f       	sbci	r29, 0xFF	; 255
    c658:	79 83       	std	Y+1, r23	; 0x01
    c65a:	68 83       	st	Y, r22
    c65c:	ce 5b       	subi	r28, 0xBE	; 190
    c65e:	d0 40       	sbci	r29, 0x00	; 0
    c660:	93 94       	inc	r9
    c662:	c0 54       	subi	r28, 0x40	; 64
    c664:	df 4f       	sbci	r29, 0xFF	; 255
    c666:	e8 81       	ld	r30, Y
    c668:	f9 81       	ldd	r31, Y+1	; 0x01
    c66a:	c0 5c       	subi	r28, 0xC0	; 192
    c66c:	d0 40       	sbci	r29, 0x00	; 0
    c66e:	94 91       	lpm	r25, Z
    c670:	91 30       	cpi	r25, 0x01	; 1
    c672:	09 f0       	breq	.+2      	; 0xc676 <draw_menu(bool)+0x1c14>
    c674:	39 c0       	rjmp	.+114    	; 0xc6e8 <draw_menu(bool)+0x1c86>
    c676:	c8 53       	subi	r28, 0x38	; 56
    c678:	df 4f       	sbci	r29, 0xFF	; 255
    c67a:	e8 81       	ld	r30, Y
    c67c:	f9 81       	ldd	r31, Y+1	; 0x01
    c67e:	c8 5c       	subi	r28, 0xC8	; 200
    c680:	d0 40       	sbci	r29, 0x00	; 0
    c682:	25 91       	lpm	r18, Z+
    c684:	34 91       	lpm	r19, Z
    c686:	c8 54       	subi	r28, 0x48	; 72
    c688:	df 4f       	sbci	r29, 0xFF	; 255
    c68a:	48 81       	ld	r20, Y
    c68c:	59 81       	ldd	r21, Y+1	; 0x01
    c68e:	c8 5b       	subi	r28, 0xB8	; 184
    c690:	d0 40       	sbci	r29, 0x00	; 0
    c692:	42 0f       	add	r20, r18
    c694:	53 1f       	adc	r21, r19
    c696:	c2 54       	subi	r28, 0x42	; 66
    c698:	df 4f       	sbci	r29, 0xFF	; 255
    c69a:	59 83       	std	Y+1, r21	; 0x01
    c69c:	48 83       	st	Y, r20
    c69e:	ce 5b       	subi	r28, 0xBE	; 190
    c6a0:	d0 40       	sbci	r29, 0x00	; 0
    c6a2:	ca 53       	subi	r28, 0x3A	; 58
    c6a4:	df 4f       	sbci	r29, 0xFF	; 255
    c6a6:	e8 81       	ld	r30, Y
    c6a8:	f9 81       	ldd	r31, Y+1	; 0x01
    c6aa:	c6 5c       	subi	r28, 0xC6	; 198
    c6ac:	d0 40       	sbci	r29, 0x00	; 0
    c6ae:	25 91       	lpm	r18, Z+
    c6b0:	34 91       	lpm	r19, Z
    c6b2:	c3 53       	subi	r28, 0x33	; 51
    c6b4:	df 4f       	sbci	r29, 0xFF	; 255
    c6b6:	e8 81       	ld	r30, Y
    c6b8:	f9 81       	ldd	r31, Y+1	; 0x01
    c6ba:	cd 5c       	subi	r28, 0xCD	; 205
    c6bc:	d0 40       	sbci	r29, 0x00	; 0
    c6be:	94 91       	lpm	r25, Z
    c6c0:	ca 54       	subi	r28, 0x4A	; 74
    c6c2:	df 4f       	sbci	r29, 0xFF	; 255
    c6c4:	48 81       	ld	r20, Y
    c6c6:	59 81       	ldd	r21, Y+1	; 0x01
    c6c8:	c6 5b       	subi	r28, 0xB6	; 182
    c6ca:	d0 40       	sbci	r29, 0x00	; 0
    c6cc:	24 0f       	add	r18, r20
    c6ce:	35 1f       	adc	r19, r21
    c6d0:	b9 01       	movw	r22, r18
    c6d2:	99 9d       	mul	r25, r9
    c6d4:	60 0d       	add	r22, r0
    c6d6:	71 1d       	adc	r23, r1
    c6d8:	11 24       	eor	r1, r1
    c6da:	c4 54       	subi	r28, 0x44	; 68
    c6dc:	df 4f       	sbci	r29, 0xFF	; 255
    c6de:	79 83       	std	Y+1, r23	; 0x01
    c6e0:	68 83       	st	Y, r22
    c6e2:	cc 5b       	subi	r28, 0xBC	; 188
    c6e4:	d0 40       	sbci	r29, 0x00	; 0
    c6e6:	93 94       	inc	r9
    c6e8:	c0 54       	subi	r28, 0x40	; 64
    c6ea:	df 4f       	sbci	r29, 0xFF	; 255
    c6ec:	e8 81       	ld	r30, Y
    c6ee:	f9 81       	ldd	r31, Y+1	; 0x01
    c6f0:	c0 5c       	subi	r28, 0xC0	; 192
    c6f2:	d0 40       	sbci	r29, 0x00	; 0
    c6f4:	94 91       	lpm	r25, Z
    c6f6:	92 30       	cpi	r25, 0x02	; 2
    c6f8:	09 f0       	breq	.+2      	; 0xc6fc <draw_menu(bool)+0x1c9a>
    c6fa:	50 c0       	rjmp	.+160    	; 0xc79c <draw_menu(bool)+0x1d3a>
    c6fc:	ca 53       	subi	r28, 0x3A	; 58
    c6fe:	df 4f       	sbci	r29, 0xFF	; 255
    c700:	e8 81       	ld	r30, Y
    c702:	f9 81       	ldd	r31, Y+1	; 0x01
    c704:	c6 5c       	subi	r28, 0xC6	; 198
    c706:	d0 40       	sbci	r29, 0x00	; 0
    c708:	25 91       	lpm	r18, Z+
    c70a:	34 91       	lpm	r19, Z
    c70c:	c3 53       	subi	r28, 0x33	; 51
    c70e:	df 4f       	sbci	r29, 0xFF	; 255
    c710:	e8 81       	ld	r30, Y
    c712:	f9 81       	ldd	r31, Y+1	; 0x01
    c714:	cd 5c       	subi	r28, 0xCD	; 205
    c716:	d0 40       	sbci	r29, 0x00	; 0
    c718:	94 91       	lpm	r25, Z
    c71a:	ca 54       	subi	r28, 0x4A	; 74
    c71c:	df 4f       	sbci	r29, 0xFF	; 255
    c71e:	48 81       	ld	r20, Y
    c720:	59 81       	ldd	r21, Y+1	; 0x01
    c722:	c6 5b       	subi	r28, 0xB6	; 182
    c724:	d0 40       	sbci	r29, 0x00	; 0
    c726:	24 0f       	add	r18, r20
    c728:	35 1f       	adc	r19, r21
    c72a:	b9 01       	movw	r22, r18
    c72c:	99 9d       	mul	r25, r9
    c72e:	60 0d       	add	r22, r0
    c730:	71 1d       	adc	r23, r1
    c732:	11 24       	eor	r1, r1
    c734:	c4 54       	subi	r28, 0x44	; 68
    c736:	df 4f       	sbci	r29, 0xFF	; 255
    c738:	79 83       	std	Y+1, r23	; 0x01
    c73a:	68 83       	st	Y, r22
    c73c:	cc 5b       	subi	r28, 0xBC	; 188
    c73e:	d0 40       	sbci	r29, 0x00	; 0
    c740:	c8 53       	subi	r28, 0x38	; 56
    c742:	df 4f       	sbci	r29, 0xFF	; 255
    c744:	e8 81       	ld	r30, Y
    c746:	f9 81       	ldd	r31, Y+1	; 0x01
    c748:	c8 5c       	subi	r28, 0xC8	; 200
    c74a:	d0 40       	sbci	r29, 0x00	; 0
    c74c:	25 91       	lpm	r18, Z+
    c74e:	34 91       	lpm	r19, Z
    c750:	c5 53       	subi	r28, 0x35	; 53
    c752:	df 4f       	sbci	r29, 0xFF	; 255
    c754:	e8 81       	ld	r30, Y
    c756:	f9 81       	ldd	r31, Y+1	; 0x01
    c758:	cb 5c       	subi	r28, 0xCB	; 203
    c75a:	d0 40       	sbci	r29, 0x00	; 0
    c75c:	94 91       	lpm	r25, Z
    c75e:	c8 54       	subi	r28, 0x48	; 72
    c760:	df 4f       	sbci	r29, 0xFF	; 255
    c762:	48 81       	ld	r20, Y
    c764:	59 81       	ldd	r21, Y+1	; 0x01
    c766:	c8 5b       	subi	r28, 0xB8	; 184
    c768:	d0 40       	sbci	r29, 0x00	; 0
    c76a:	24 0f       	add	r18, r20
    c76c:	35 1f       	adc	r19, r21
    c76e:	b9 01       	movw	r22, r18
    c770:	93 9d       	mul	r25, r3
    c772:	60 0d       	add	r22, r0
    c774:	71 1d       	adc	r23, r1
    c776:	11 24       	eor	r1, r1
    c778:	c2 54       	subi	r28, 0x42	; 66
    c77a:	df 4f       	sbci	r29, 0xFF	; 255
    c77c:	79 83       	std	Y+1, r23	; 0x01
    c77e:	68 83       	st	Y, r22
    c780:	ce 5b       	subi	r28, 0xBE	; 190
    c782:	d0 40       	sbci	r29, 0x00	; 0
    c784:	93 94       	inc	r9
    c786:	c1 53       	subi	r28, 0x31	; 49
    c788:	df 4f       	sbci	r29, 0xFF	; 255
    c78a:	e8 81       	ld	r30, Y
    c78c:	f9 81       	ldd	r31, Y+1	; 0x01
    c78e:	cf 5c       	subi	r28, 0xCF	; 207
    c790:	d0 40       	sbci	r29, 0x00	; 0
    c792:	94 91       	lpm	r25, Z
    c794:	99 16       	cp	r9, r25
    c796:	10 f0       	brcs	.+4      	; 0xc79c <draw_menu(bool)+0x1d3a>
    c798:	33 94       	inc	r3
    c79a:	91 2c       	mov	r9, r1
    c79c:	c6 54       	subi	r28, 0x46	; 70
    c79e:	df 4f       	sbci	r29, 0xFF	; 255
    c7a0:	e8 81       	ld	r30, Y
    c7a2:	f9 81       	ldd	r31, Y+1	; 0x01
    c7a4:	ca 5b       	subi	r28, 0xBA	; 186
    c7a6:	d0 40       	sbci	r29, 0x00	; 0
    c7a8:	44 91       	lpm	r20, Z
    c7aa:	8e 01       	movw	r16, r28
    c7ac:	0f 57       	subi	r16, 0x7F	; 127
    c7ae:	1f 4f       	sbci	r17, 0xFF	; 255
    c7b0:	9e 01       	movw	r18, r28
    c7b2:	2f 5f       	subi	r18, 0xFF	; 255
    c7b4:	3f 4f       	sbci	r19, 0xFF	; 255
    c7b6:	cf 54       	subi	r28, 0x4F	; 79
    c7b8:	df 4f       	sbci	r29, 0xFF	; 255
    c7ba:	68 81       	ld	r22, Y
    c7bc:	c1 5b       	subi	r28, 0xB1	; 177
    c7be:	d0 40       	sbci	r29, 0x00	; 0
    c7c0:	ce 51       	subi	r28, 0x1E	; 30
    c7c2:	df 4f       	sbci	r29, 0xFF	; 255
    c7c4:	e8 81       	ld	r30, Y
    c7c6:	f9 81       	ldd	r31, Y+1	; 0x01
    c7c8:	c2 5e       	subi	r28, 0xE2	; 226
    c7ca:	d0 40       	sbci	r29, 0x00	; 0
    c7cc:	19 95       	eicall
    c7ce:	cf 52       	subi	r28, 0x2F	; 47
    c7d0:	df 4f       	sbci	r29, 0xFF	; 255
    c7d2:	e8 81       	ld	r30, Y
    c7d4:	f9 81       	ldd	r31, Y+1	; 0x01
    c7d6:	c1 5d       	subi	r28, 0xD1	; 209
    c7d8:	d0 40       	sbci	r29, 0x00	; 0
    c7da:	25 91       	lpm	r18, Z+
    c7dc:	34 91       	lpm	r19, Z
    c7de:	c6 54       	subi	r28, 0x46	; 70
    c7e0:	df 4f       	sbci	r29, 0xFF	; 255
    c7e2:	e8 81       	ld	r30, Y
    c7e4:	f9 81       	ldd	r31, Y+1	; 0x01
    c7e6:	ca 5b       	subi	r28, 0xBA	; 186
    c7e8:	d0 40       	sbci	r29, 0x00	; 0
    c7ea:	84 91       	lpm	r24, Z
    c7ec:	cf 54       	subi	r28, 0x4F	; 79
    c7ee:	df 4f       	sbci	r29, 0xFF	; 255
    c7f0:	68 81       	ld	r22, Y
    c7f2:	c1 5b       	subi	r28, 0xB1	; 177
    c7f4:	d0 40       	sbci	r29, 0x00	; 0
    c7f6:	70 e0       	ldi	r23, 0x00	; 0
    c7f8:	ce 54       	subi	r28, 0x4E	; 78
    c7fa:	df 4f       	sbci	r29, 0xFF	; 255
    c7fc:	48 81       	ld	r20, Y
    c7fe:	c2 5b       	subi	r28, 0xB2	; 178
    c800:	d0 40       	sbci	r29, 0x00	; 0
    c802:	90 e0       	ldi	r25, 0x00	; 0
    c804:	f9 01       	movw	r30, r18
    c806:	19 95       	eicall
    c808:	cc 52       	subi	r28, 0x2C	; 44
    c80a:	df 4f       	sbci	r29, 0xFF	; 255
    c80c:	e8 81       	ld	r30, Y
    c80e:	f9 81       	ldd	r31, Y+1	; 0x01
    c810:	c4 5d       	subi	r28, 0xD4	; 212
    c812:	d0 40       	sbci	r29, 0x00	; 0
    c814:	a5 90       	lpm	r10, Z+
    c816:	b4 90       	lpm	r11, Z
    c818:	ca 52       	subi	r28, 0x2A	; 42
    c81a:	df 4f       	sbci	r29, 0xFF	; 255
    c81c:	e8 81       	ld	r30, Y
    c81e:	f9 81       	ldd	r31, Y+1	; 0x01
    c820:	c6 5d       	subi	r28, 0xD6	; 214
    c822:	d0 40       	sbci	r29, 0x00	; 0
    c824:	c5 90       	lpm	r12, Z+
    c826:	d4 90       	lpm	r13, Z
    c828:	c8 52       	subi	r28, 0x28	; 40
    c82a:	df 4f       	sbci	r29, 0xFF	; 255
    c82c:	e8 81       	ld	r30, Y
    c82e:	f9 81       	ldd	r31, Y+1	; 0x01
    c830:	c8 5d       	subi	r28, 0xD8	; 216
    c832:	d0 40       	sbci	r29, 0x00	; 0
    c834:	e4 90       	lpm	r14, Z
    c836:	c6 52       	subi	r28, 0x26	; 38
    c838:	df 4f       	sbci	r29, 0xFF	; 255
    c83a:	e8 81       	ld	r30, Y
    c83c:	f9 81       	ldd	r31, Y+1	; 0x01
    c83e:	ca 5d       	subi	r28, 0xDA	; 218
    c840:	d0 40       	sbci	r29, 0x00	; 0
    c842:	04 91       	lpm	r16, Z
    c844:	c4 52       	subi	r28, 0x24	; 36
    c846:	df 4f       	sbci	r29, 0xFF	; 255
    c848:	e8 81       	ld	r30, Y
    c84a:	f9 81       	ldd	r31, Y+1	; 0x01
    c84c:	cc 5d       	subi	r28, 0xDC	; 220
    c84e:	d0 40       	sbci	r29, 0x00	; 0
    c850:	25 91       	lpm	r18, Z+
    c852:	34 91       	lpm	r19, Z
    c854:	c2 52       	subi	r28, 0x22	; 34
    c856:	df 4f       	sbci	r29, 0xFF	; 255
    c858:	e8 81       	ld	r30, Y
    c85a:	f9 81       	ldd	r31, Y+1	; 0x01
    c85c:	ce 5d       	subi	r28, 0xDE	; 222
    c85e:	d0 40       	sbci	r29, 0x00	; 0
    c860:	45 91       	lpm	r20, Z+
    c862:	54 91       	lpm	r21, Z
    c864:	88 24       	eor	r8, r8
    c866:	83 94       	inc	r8
    c868:	81 11       	cpse	r24, r1
    c86a:	01 c0       	rjmp	.+2      	; 0xc86e <draw_menu(bool)+0x1e0c>
    c86c:	81 2c       	mov	r8, r1
    c86e:	cb 54       	subi	r28, 0x4B	; 75
    c870:	df 4f       	sbci	r29, 0xFF	; 255
    c872:	f8 81       	ld	r31, Y
    c874:	c5 5b       	subi	r28, 0xB5	; 181
    c876:	d0 40       	sbci	r29, 0x00	; 0
    c878:	ff 93       	push	r31
    c87a:	cc 54       	subi	r28, 0x4C	; 76
    c87c:	df 4f       	sbci	r29, 0xFF	; 255
    c87e:	68 81       	ld	r22, Y
    c880:	c4 5b       	subi	r28, 0xB4	; 180
    c882:	d0 40       	sbci	r29, 0x00	; 0
    c884:	6f 93       	push	r22
    c886:	81 e0       	ldi	r24, 0x01	; 1
    c888:	90 e0       	ldi	r25, 0x00	; 0
    c88a:	8c 0f       	add	r24, r28
    c88c:	9d 1f       	adc	r25, r29
    c88e:	9f 93       	push	r25
    c890:	8f 93       	push	r24
    c892:	c2 54       	subi	r28, 0x42	; 66
    c894:	df 4f       	sbci	r29, 0xFF	; 255
    c896:	68 81       	ld	r22, Y
    c898:	79 81       	ldd	r23, Y+1	; 0x01
    c89a:	ce 5b       	subi	r28, 0xBE	; 190
    c89c:	d0 40       	sbci	r29, 0x00	; 0
    c89e:	c4 54       	subi	r28, 0x44	; 68
    c8a0:	df 4f       	sbci	r29, 0xFF	; 255
    c8a2:	88 81       	ld	r24, Y
    c8a4:	99 81       	ldd	r25, Y+1	; 0x01
    c8a6:	cc 5b       	subi	r28, 0xBC	; 188
    c8a8:	d0 40       	sbci	r29, 0x00	; 0
    c8aa:	0e 94 94 52 	call	0xa528	; 0xa528 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    c8ae:	ce 54       	subi	r28, 0x4E	; 78
    c8b0:	df 4f       	sbci	r29, 0xFF	; 255
    c8b2:	88 81       	ld	r24, Y
    c8b4:	c2 5b       	subi	r28, 0xB2	; 178
    c8b6:	d0 40       	sbci	r29, 0x00	; 0
    c8b8:	8f 5f       	subi	r24, 0xFF	; 255
    c8ba:	ce 54       	subi	r28, 0x4E	; 78
    c8bc:	df 4f       	sbci	r29, 0xFF	; 255
    c8be:	88 83       	st	Y, r24
    c8c0:	c2 5b       	subi	r28, 0xB2	; 178
    c8c2:	d0 40       	sbci	r29, 0x00	; 0
    c8c4:	0f 90       	pop	r0
    c8c6:	0f 90       	pop	r0
    c8c8:	0f 90       	pop	r0
    c8ca:	0f 90       	pop	r0
    c8cc:	7b ce       	rjmp	.-778    	; 0xc5c4 <draw_menu(bool)+0x1b62>
    c8ce:	ce 53       	subi	r28, 0x3E	; 62
    c8d0:	df 4f       	sbci	r29, 0xFF	; 255
    c8d2:	e8 81       	ld	r30, Y
    c8d4:	f9 81       	ldd	r31, Y+1	; 0x01
    c8d6:	c2 5c       	subi	r28, 0xC2	; 194
    c8d8:	d0 40       	sbci	r29, 0x00	; 0
    c8da:	ef 2b       	or	r30, r31
    c8dc:	09 f4       	brne	.+2      	; 0xc8e0 <draw_menu(bool)+0x1e7e>
    c8de:	c5 c1       	rjmp	.+906    	; 0xcc6a <draw_menu(bool)+0x2208>
    c8e0:	cc 53       	subi	r28, 0x3C	; 60
    c8e2:	df 4f       	sbci	r29, 0xFF	; 255
    c8e4:	28 81       	ld	r18, Y
    c8e6:	39 81       	ldd	r19, Y+1	; 0x01
    c8e8:	c4 5c       	subi	r28, 0xC4	; 196
    c8ea:	d0 40       	sbci	r29, 0x00	; 0
    c8ec:	23 2b       	or	r18, r19
    c8ee:	09 f4       	brne	.+2      	; 0xc8f2 <draw_menu(bool)+0x1e90>
    c8f0:	bc c1       	rjmp	.+888    	; 0xcc6a <draw_menu(bool)+0x2208>
    c8f2:	ce 54       	subi	r28, 0x4E	; 78
    c8f4:	df 4f       	sbci	r29, 0xFF	; 255
    c8f6:	18 82       	st	Y, r1
    c8f8:	c2 5b       	subi	r28, 0xB2	; 178
    c8fa:	d0 40       	sbci	r29, 0x00	; 0
    c8fc:	f2 01       	movw	r30, r4
    c8fe:	e8 54       	subi	r30, 0x48	; 72
    c900:	fd 4f       	sbci	r31, 0xFD	; 253
    c902:	e6 0d       	add	r30, r6
    c904:	f7 1d       	adc	r31, r7
    c906:	25 91       	lpm	r18, Z+
    c908:	34 91       	lpm	r19, Z
    c90a:	c2 01       	movw	r24, r4
    c90c:	8d 54       	subi	r24, 0x4D	; 77
    c90e:	9d 4f       	sbci	r25, 0xFD	; 253
    c910:	a3 01       	movw	r20, r6
    c912:	48 0f       	add	r20, r24
    c914:	59 1f       	adc	r21, r25
    c916:	c0 54       	subi	r28, 0x40	; 64
    c918:	df 4f       	sbci	r29, 0xFF	; 255
    c91a:	59 83       	std	Y+1, r21	; 0x01
    c91c:	48 83       	st	Y, r20
    c91e:	c0 5c       	subi	r28, 0xC0	; 192
    c920:	d0 40       	sbci	r29, 0x00	; 0
    c922:	fa 01       	movw	r30, r20
    c924:	84 91       	lpm	r24, Z
    c926:	cf 54       	subi	r28, 0x4F	; 79
    c928:	df 4f       	sbci	r29, 0xFF	; 255
    c92a:	68 81       	ld	r22, Y
    c92c:	c1 5b       	subi	r28, 0xB1	; 177
    c92e:	d0 40       	sbci	r29, 0x00	; 0
    c930:	70 e0       	ldi	r23, 0x00	; 0
    c932:	40 e0       	ldi	r20, 0x00	; 0
    c934:	90 e0       	ldi	r25, 0x00	; 0
    c936:	f9 01       	movw	r30, r18
    c938:	19 95       	eicall
    c93a:	cd 54       	subi	r28, 0x4D	; 77
    c93c:	df 4f       	sbci	r29, 0xFF	; 255
    c93e:	88 83       	st	Y, r24
    c940:	c3 5b       	subi	r28, 0xB3	; 179
    c942:	d0 40       	sbci	r29, 0x00	; 0
    c944:	f2 01       	movw	r30, r4
    c946:	ee 54       	subi	r30, 0x4E	; 78
    c948:	fd 4f       	sbci	r31, 0xFD	; 253
    c94a:	e6 0d       	add	r30, r6
    c94c:	f7 1d       	adc	r31, r7
    c94e:	44 91       	lpm	r20, Z
    c950:	c2 01       	movw	r24, r4
    c952:	80 55       	subi	r24, 0x50	; 80
    c954:	9d 4f       	sbci	r25, 0xFD	; 253
    c956:	93 01       	movw	r18, r6
    c958:	28 0f       	add	r18, r24
    c95a:	39 1f       	adc	r19, r25
    c95c:	c5 53       	subi	r28, 0x35	; 53
    c95e:	df 4f       	sbci	r29, 0xFF	; 255
    c960:	39 83       	std	Y+1, r19	; 0x01
    c962:	28 83       	st	Y, r18
    c964:	cb 5c       	subi	r28, 0xCB	; 203
    c966:	d0 40       	sbci	r29, 0x00	; 0
    c968:	4f 3f       	cpi	r20, 0xFF	; 255
    c96a:	99 f0       	breq	.+38     	; 0xc992 <draw_menu(bool)+0x1f30>
    c96c:	f9 01       	movw	r30, r18
    c96e:	24 91       	lpm	r18, Z
    c970:	f2 01       	movw	r30, r4
    c972:	ef 54       	subi	r30, 0x4F	; 79
    c974:	fd 4f       	sbci	r31, 0xFD	; 253
    c976:	e6 0d       	add	r30, r6
    c978:	f7 1d       	adc	r31, r7
    c97a:	e4 91       	lpm	r30, Z
    c97c:	2e 9f       	mul	r18, r30
    c97e:	20 2d       	mov	r18, r0
    c980:	11 24       	eor	r1, r1
    c982:	be 01       	movw	r22, r28
    c984:	6d 54       	subi	r22, 0x4D	; 77
    c986:	7f 4f       	sbci	r23, 0xFF	; 255
    c988:	ce 01       	movw	r24, r28
    c98a:	8e 54       	subi	r24, 0x4E	; 78
    c98c:	9f 4f       	sbci	r25, 0xFF	; 255
    c98e:	0e 94 5e 51 	call	0xa2bc	; 0xa2bc <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    c992:	ce 54       	subi	r28, 0x4E	; 78
    c994:	df 4f       	sbci	r29, 0xFF	; 255
    c996:	88 80       	ld	r8, Y
    c998:	c2 5b       	subi	r28, 0xB2	; 178
    c99a:	d0 40       	sbci	r29, 0x00	; 0
    c99c:	cd 54       	subi	r28, 0x4D	; 77
    c99e:	df 4f       	sbci	r29, 0xFF	; 255
    c9a0:	f8 81       	ld	r31, Y
    c9a2:	c3 5b       	subi	r28, 0xB3	; 179
    c9a4:	d0 40       	sbci	r29, 0x00	; 0
    c9a6:	c3 53       	subi	r28, 0x33	; 51
    c9a8:	df 4f       	sbci	r29, 0xFF	; 255
    c9aa:	f8 83       	st	Y, r31
    c9ac:	cd 5c       	subi	r28, 0xCD	; 205
    c9ae:	d0 40       	sbci	r29, 0x00	; 0
    c9b0:	c2 01       	movw	r24, r4
    c9b2:	81 55       	subi	r24, 0x51	; 81
    c9b4:	9d 4f       	sbci	r25, 0xFD	; 253
    c9b6:	93 01       	movw	r18, r6
    c9b8:	28 0f       	add	r18, r24
    c9ba:	39 1f       	adc	r19, r25
    c9bc:	c6 54       	subi	r28, 0x46	; 70
    c9be:	df 4f       	sbci	r29, 0xFF	; 255
    c9c0:	39 83       	std	Y+1, r19	; 0x01
    c9c2:	28 83       	st	Y, r18
    c9c4:	ca 5b       	subi	r28, 0xBA	; 186
    c9c6:	d0 40       	sbci	r29, 0x00	; 0
    c9c8:	62 01       	movw	r12, r4
    c9ca:	31 e6       	ldi	r19, 0x61	; 97
    c9cc:	c3 1a       	sub	r12, r19
    c9ce:	3d ef       	ldi	r19, 0xFD	; 253
    c9d0:	d3 0a       	sbc	r13, r19
    c9d2:	c6 0c       	add	r12, r6
    c9d4:	d7 1c       	adc	r13, r7
    c9d6:	52 01       	movw	r10, r4
    c9d8:	4f e5       	ldi	r20, 0x5F	; 95
    c9da:	a4 1a       	sub	r10, r20
    c9dc:	4d ef       	ldi	r20, 0xFD	; 253
    c9de:	b4 0a       	sbc	r11, r20
    c9e0:	a6 0c       	add	r10, r6
    c9e2:	b7 1c       	adc	r11, r7
    c9e4:	01 97       	sbiw	r24, 0x01	; 1
    c9e6:	b3 01       	movw	r22, r6
    c9e8:	68 0f       	add	r22, r24
    c9ea:	79 1f       	adc	r23, r25
    c9ec:	ca 53       	subi	r28, 0x3A	; 58
    c9ee:	df 4f       	sbci	r29, 0xFF	; 255
    c9f0:	79 83       	std	Y+1, r23	; 0x01
    c9f2:	68 83       	st	Y, r22
    c9f4:	c6 5c       	subi	r28, 0xC6	; 198
    c9f6:	d0 40       	sbci	r29, 0x00	; 0
    c9f8:	01 97       	sbiw	r24, 0x01	; 1
    c9fa:	f3 01       	movw	r30, r6
    c9fc:	e8 0f       	add	r30, r24
    c9fe:	f9 1f       	adc	r31, r25
    ca00:	c8 53       	subi	r28, 0x38	; 56
    ca02:	df 4f       	sbci	r29, 0xFF	; 255
    ca04:	f9 83       	std	Y+1, r31	; 0x01
    ca06:	e8 83       	st	Y, r30
    ca08:	c8 5c       	subi	r28, 0xC8	; 200
    ca0a:	d0 40       	sbci	r29, 0x00	; 0
    ca0c:	08 97       	sbiw	r24, 0x08	; 8
    ca0e:	93 01       	movw	r18, r6
    ca10:	28 0f       	add	r18, r24
    ca12:	39 1f       	adc	r19, r25
    ca14:	c1 53       	subi	r28, 0x31	; 49
    ca16:	df 4f       	sbci	r29, 0xFF	; 255
    ca18:	39 83       	std	Y+1, r19	; 0x01
    ca1a:	28 83       	st	Y, r18
    ca1c:	cf 5c       	subi	r28, 0xCF	; 207
    ca1e:	d0 40       	sbci	r29, 0x00	; 0
    ca20:	02 97       	sbiw	r24, 0x02	; 2
    ca22:	a3 01       	movw	r20, r6
    ca24:	48 0f       	add	r20, r24
    ca26:	59 1f       	adc	r21, r25
    ca28:	cf 52       	subi	r28, 0x2F	; 47
    ca2a:	df 4f       	sbci	r29, 0xFF	; 255
    ca2c:	59 83       	std	Y+1, r21	; 0x01
    ca2e:	48 83       	st	Y, r20
    ca30:	c1 5d       	subi	r28, 0xD1	; 209
    ca32:	d0 40       	sbci	r29, 0x00	; 0
    ca34:	31 2c       	mov	r3, r1
    ca36:	91 2c       	mov	r9, r1
    ca38:	c3 53       	subi	r28, 0x33	; 51
    ca3a:	df 4f       	sbci	r29, 0xFF	; 255
    ca3c:	58 81       	ld	r21, Y
    ca3e:	cd 5c       	subi	r28, 0xCD	; 205
    ca40:	d0 40       	sbci	r29, 0x00	; 0
    ca42:	85 16       	cp	r8, r21
    ca44:	08 f0       	brcs	.+2      	; 0xca48 <draw_menu(bool)+0x1fe6>
    ca46:	11 c1       	rjmp	.+546    	; 0xcc6a <draw_menu(bool)+0x2208>
    ca48:	c6 54       	subi	r28, 0x46	; 70
    ca4a:	df 4f       	sbci	r29, 0xFF	; 255
    ca4c:	e8 81       	ld	r30, Y
    ca4e:	f9 81       	ldd	r31, Y+1	; 0x01
    ca50:	ca 5b       	subi	r28, 0xBA	; 186
    ca52:	d0 40       	sbci	r29, 0x00	; 0
    ca54:	84 91       	lpm	r24, Z
    ca56:	81 11       	cpse	r24, r1
    ca58:	2f c0       	rjmp	.+94     	; 0xcab8 <draw_menu(bool)+0x2056>
    ca5a:	f6 01       	movw	r30, r12
    ca5c:	85 91       	lpm	r24, Z+
    ca5e:	94 91       	lpm	r25, Z
    ca60:	ca 54       	subi	r28, 0x4A	; 74
    ca62:	df 4f       	sbci	r29, 0xFF	; 255
    ca64:	28 81       	ld	r18, Y
    ca66:	39 81       	ldd	r19, Y+1	; 0x01
    ca68:	c6 5b       	subi	r28, 0xB6	; 182
    ca6a:	d0 40       	sbci	r29, 0x00	; 0
    ca6c:	28 0f       	add	r18, r24
    ca6e:	39 1f       	adc	r19, r25
    ca70:	c4 54       	subi	r28, 0x44	; 68
    ca72:	df 4f       	sbci	r29, 0xFF	; 255
    ca74:	39 83       	std	Y+1, r19	; 0x01
    ca76:	28 83       	st	Y, r18
    ca78:	cc 5b       	subi	r28, 0xBC	; 188
    ca7a:	d0 40       	sbci	r29, 0x00	; 0
    ca7c:	f5 01       	movw	r30, r10
    ca7e:	85 91       	lpm	r24, Z+
    ca80:	94 91       	lpm	r25, Z
    ca82:	ca 53       	subi	r28, 0x3A	; 58
    ca84:	df 4f       	sbci	r29, 0xFF	; 255
    ca86:	e8 81       	ld	r30, Y
    ca88:	f9 81       	ldd	r31, Y+1	; 0x01
    ca8a:	c6 5c       	subi	r28, 0xC6	; 198
    ca8c:	d0 40       	sbci	r29, 0x00	; 0
    ca8e:	24 91       	lpm	r18, Z
    ca90:	c8 54       	subi	r28, 0x48	; 72
    ca92:	df 4f       	sbci	r29, 0xFF	; 255
    ca94:	48 81       	ld	r20, Y
    ca96:	59 81       	ldd	r21, Y+1	; 0x01
    ca98:	c8 5b       	subi	r28, 0xB8	; 184
    ca9a:	d0 40       	sbci	r29, 0x00	; 0
    ca9c:	84 0f       	add	r24, r20
    ca9e:	95 1f       	adc	r25, r21
    caa0:	bc 01       	movw	r22, r24
    caa2:	29 9d       	mul	r18, r9
    caa4:	60 0d       	add	r22, r0
    caa6:	71 1d       	adc	r23, r1
    caa8:	11 24       	eor	r1, r1
    caaa:	c2 54       	subi	r28, 0x42	; 66
    caac:	df 4f       	sbci	r29, 0xFF	; 255
    caae:	79 83       	std	Y+1, r23	; 0x01
    cab0:	68 83       	st	Y, r22
    cab2:	ce 5b       	subi	r28, 0xBE	; 190
    cab4:	d0 40       	sbci	r29, 0x00	; 0
    cab6:	93 94       	inc	r9
    cab8:	c6 54       	subi	r28, 0x46	; 70
    caba:	df 4f       	sbci	r29, 0xFF	; 255
    cabc:	e8 81       	ld	r30, Y
    cabe:	f9 81       	ldd	r31, Y+1	; 0x01
    cac0:	ca 5b       	subi	r28, 0xBA	; 186
    cac2:	d0 40       	sbci	r29, 0x00	; 0
    cac4:	84 91       	lpm	r24, Z
    cac6:	81 30       	cpi	r24, 0x01	; 1
    cac8:	79 f5       	brne	.+94     	; 0xcb28 <draw_menu(bool)+0x20c6>
    caca:	f5 01       	movw	r30, r10
    cacc:	85 91       	lpm	r24, Z+
    cace:	94 91       	lpm	r25, Z
    cad0:	c8 54       	subi	r28, 0x48	; 72
    cad2:	df 4f       	sbci	r29, 0xFF	; 255
    cad4:	28 81       	ld	r18, Y
    cad6:	39 81       	ldd	r19, Y+1	; 0x01
    cad8:	c8 5b       	subi	r28, 0xB8	; 184
    cada:	d0 40       	sbci	r29, 0x00	; 0
    cadc:	28 0f       	add	r18, r24
    cade:	39 1f       	adc	r19, r25
    cae0:	c2 54       	subi	r28, 0x42	; 66
    cae2:	df 4f       	sbci	r29, 0xFF	; 255
    cae4:	39 83       	std	Y+1, r19	; 0x01
    cae6:	28 83       	st	Y, r18
    cae8:	ce 5b       	subi	r28, 0xBE	; 190
    caea:	d0 40       	sbci	r29, 0x00	; 0
    caec:	f6 01       	movw	r30, r12
    caee:	85 91       	lpm	r24, Z+
    caf0:	94 91       	lpm	r25, Z
    caf2:	c8 53       	subi	r28, 0x38	; 56
    caf4:	df 4f       	sbci	r29, 0xFF	; 255
    caf6:	e8 81       	ld	r30, Y
    caf8:	f9 81       	ldd	r31, Y+1	; 0x01
    cafa:	c8 5c       	subi	r28, 0xC8	; 200
    cafc:	d0 40       	sbci	r29, 0x00	; 0
    cafe:	24 91       	lpm	r18, Z
    cb00:	ca 54       	subi	r28, 0x4A	; 74
    cb02:	df 4f       	sbci	r29, 0xFF	; 255
    cb04:	48 81       	ld	r20, Y
    cb06:	59 81       	ldd	r21, Y+1	; 0x01
    cb08:	c6 5b       	subi	r28, 0xB6	; 182
    cb0a:	d0 40       	sbci	r29, 0x00	; 0
    cb0c:	84 0f       	add	r24, r20
    cb0e:	95 1f       	adc	r25, r21
    cb10:	bc 01       	movw	r22, r24
    cb12:	29 9d       	mul	r18, r9
    cb14:	60 0d       	add	r22, r0
    cb16:	71 1d       	adc	r23, r1
    cb18:	11 24       	eor	r1, r1
    cb1a:	c4 54       	subi	r28, 0x44	; 68
    cb1c:	df 4f       	sbci	r29, 0xFF	; 255
    cb1e:	79 83       	std	Y+1, r23	; 0x01
    cb20:	68 83       	st	Y, r22
    cb22:	cc 5b       	subi	r28, 0xBC	; 188
    cb24:	d0 40       	sbci	r29, 0x00	; 0
    cb26:	93 94       	inc	r9
    cb28:	c6 54       	subi	r28, 0x46	; 70
    cb2a:	df 4f       	sbci	r29, 0xFF	; 255
    cb2c:	e8 81       	ld	r30, Y
    cb2e:	f9 81       	ldd	r31, Y+1	; 0x01
    cb30:	ca 5b       	subi	r28, 0xBA	; 186
    cb32:	d0 40       	sbci	r29, 0x00	; 0
    cb34:	84 91       	lpm	r24, Z
    cb36:	82 30       	cpi	r24, 0x02	; 2
    cb38:	09 f0       	breq	.+2      	; 0xcb3c <draw_menu(bool)+0x20da>
    cb3a:	46 c0       	rjmp	.+140    	; 0xcbc8 <draw_menu(bool)+0x2166>
    cb3c:	f6 01       	movw	r30, r12
    cb3e:	85 91       	lpm	r24, Z+
    cb40:	94 91       	lpm	r25, Z
    cb42:	c8 53       	subi	r28, 0x38	; 56
    cb44:	df 4f       	sbci	r29, 0xFF	; 255
    cb46:	e8 81       	ld	r30, Y
    cb48:	f9 81       	ldd	r31, Y+1	; 0x01
    cb4a:	c8 5c       	subi	r28, 0xC8	; 200
    cb4c:	d0 40       	sbci	r29, 0x00	; 0
    cb4e:	24 91       	lpm	r18, Z
    cb50:	ca 54       	subi	r28, 0x4A	; 74
    cb52:	df 4f       	sbci	r29, 0xFF	; 255
    cb54:	48 81       	ld	r20, Y
    cb56:	59 81       	ldd	r21, Y+1	; 0x01
    cb58:	c6 5b       	subi	r28, 0xB6	; 182
    cb5a:	d0 40       	sbci	r29, 0x00	; 0
    cb5c:	84 0f       	add	r24, r20
    cb5e:	95 1f       	adc	r25, r21
    cb60:	bc 01       	movw	r22, r24
    cb62:	29 9d       	mul	r18, r9
    cb64:	60 0d       	add	r22, r0
    cb66:	71 1d       	adc	r23, r1
    cb68:	11 24       	eor	r1, r1
    cb6a:	c4 54       	subi	r28, 0x44	; 68
    cb6c:	df 4f       	sbci	r29, 0xFF	; 255
    cb6e:	79 83       	std	Y+1, r23	; 0x01
    cb70:	68 83       	st	Y, r22
    cb72:	cc 5b       	subi	r28, 0xBC	; 188
    cb74:	d0 40       	sbci	r29, 0x00	; 0
    cb76:	f5 01       	movw	r30, r10
    cb78:	85 91       	lpm	r24, Z+
    cb7a:	94 91       	lpm	r25, Z
    cb7c:	ca 53       	subi	r28, 0x3A	; 58
    cb7e:	df 4f       	sbci	r29, 0xFF	; 255
    cb80:	e8 81       	ld	r30, Y
    cb82:	f9 81       	ldd	r31, Y+1	; 0x01
    cb84:	c6 5c       	subi	r28, 0xC6	; 198
    cb86:	d0 40       	sbci	r29, 0x00	; 0
    cb88:	24 91       	lpm	r18, Z
    cb8a:	c8 54       	subi	r28, 0x48	; 72
    cb8c:	df 4f       	sbci	r29, 0xFF	; 255
    cb8e:	48 81       	ld	r20, Y
    cb90:	59 81       	ldd	r21, Y+1	; 0x01
    cb92:	c8 5b       	subi	r28, 0xB8	; 184
    cb94:	d0 40       	sbci	r29, 0x00	; 0
    cb96:	84 0f       	add	r24, r20
    cb98:	95 1f       	adc	r25, r21
    cb9a:	bc 01       	movw	r22, r24
    cb9c:	23 9d       	mul	r18, r3
    cb9e:	60 0d       	add	r22, r0
    cba0:	71 1d       	adc	r23, r1
    cba2:	11 24       	eor	r1, r1
    cba4:	c2 54       	subi	r28, 0x42	; 66
    cba6:	df 4f       	sbci	r29, 0xFF	; 255
    cba8:	79 83       	std	Y+1, r23	; 0x01
    cbaa:	68 83       	st	Y, r22
    cbac:	ce 5b       	subi	r28, 0xBE	; 190
    cbae:	d0 40       	sbci	r29, 0x00	; 0
    cbb0:	93 94       	inc	r9
    cbb2:	c5 53       	subi	r28, 0x35	; 53
    cbb4:	df 4f       	sbci	r29, 0xFF	; 255
    cbb6:	e8 81       	ld	r30, Y
    cbb8:	f9 81       	ldd	r31, Y+1	; 0x01
    cbba:	cb 5c       	subi	r28, 0xCB	; 203
    cbbc:	d0 40       	sbci	r29, 0x00	; 0
    cbbe:	84 91       	lpm	r24, Z
    cbc0:	98 16       	cp	r9, r24
    cbc2:	10 f0       	brcs	.+4      	; 0xcbc8 <draw_menu(bool)+0x2166>
    cbc4:	33 94       	inc	r3
    cbc6:	91 2c       	mov	r9, r1
    cbc8:	c1 53       	subi	r28, 0x31	; 49
    cbca:	df 4f       	sbci	r29, 0xFF	; 255
    cbcc:	e8 81       	ld	r30, Y
    cbce:	f9 81       	ldd	r31, Y+1	; 0x01
    cbd0:	cf 5c       	subi	r28, 0xCF	; 207
    cbd2:	d0 40       	sbci	r29, 0x00	; 0
    cbd4:	25 91       	lpm	r18, Z+
    cbd6:	34 91       	lpm	r19, Z
    cbd8:	cf 52       	subi	r28, 0x2F	; 47
    cbda:	df 4f       	sbci	r29, 0xFF	; 255
    cbdc:	e8 81       	ld	r30, Y
    cbde:	f9 81       	ldd	r31, Y+1	; 0x01
    cbe0:	c1 5d       	subi	r28, 0xD1	; 209
    cbe2:	d0 40       	sbci	r29, 0x00	; 0
    cbe4:	45 91       	lpm	r20, Z+
    cbe6:	54 91       	lpm	r21, Z
    cbe8:	cc 53       	subi	r28, 0x3C	; 60
    cbea:	df 4f       	sbci	r29, 0xFF	; 255
    cbec:	e8 80       	ld	r14, Y
    cbee:	f9 80       	ldd	r15, Y+1	; 0x01
    cbf0:	c4 5c       	subi	r28, 0xC4	; 196
    cbf2:	d0 40       	sbci	r29, 0x00	; 0
    cbf4:	ce 53       	subi	r28, 0x3E	; 62
    cbf6:	df 4f       	sbci	r29, 0xFF	; 255
    cbf8:	08 81       	ld	r16, Y
    cbfa:	19 81       	ldd	r17, Y+1	; 0x01
    cbfc:	c2 5c       	subi	r28, 0xC2	; 194
    cbfe:	d0 40       	sbci	r29, 0x00	; 0
    cc00:	c2 54       	subi	r28, 0x42	; 66
    cc02:	df 4f       	sbci	r29, 0xFF	; 255
    cc04:	68 81       	ld	r22, Y
    cc06:	79 81       	ldd	r23, Y+1	; 0x01
    cc08:	ce 5b       	subi	r28, 0xBE	; 190
    cc0a:	d0 40       	sbci	r29, 0x00	; 0
    cc0c:	c4 54       	subi	r28, 0x44	; 68
    cc0e:	df 4f       	sbci	r29, 0xFF	; 255
    cc10:	88 81       	ld	r24, Y
    cc12:	99 81       	ldd	r25, Y+1	; 0x01
    cc14:	cc 5b       	subi	r28, 0xBC	; 188
    cc16:	d0 40       	sbci	r29, 0x00	; 0
    cc18:	0e 94 16 55 	call	0xaa2c	; 0xaa2c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    cc1c:	18 2f       	mov	r17, r24
    cc1e:	81 e0       	ldi	r24, 0x01	; 1
    cc20:	88 0d       	add	r24, r8
    cc22:	11 23       	and	r17, r17
    cc24:	21 f1       	breq	.+72     	; 0xcc6e <draw_menu(bool)+0x220c>
    cc26:	ce 54       	subi	r28, 0x4E	; 78
    cc28:	df 4f       	sbci	r29, 0xFF	; 255
    cc2a:	88 82       	st	Y, r8
    cc2c:	c2 5b       	subi	r28, 0xB2	; 178
    cc2e:	d0 40       	sbci	r29, 0x00	; 0
    cc30:	f2 01       	movw	r30, r4
    cc32:	ea 54       	subi	r30, 0x4A	; 74
    cc34:	fd 4f       	sbci	r31, 0xFD	; 253
    cc36:	e6 0d       	add	r30, r6
    cc38:	f7 1d       	adc	r31, r7
    cc3a:	25 91       	lpm	r18, Z+
    cc3c:	34 91       	lpm	r19, Z
    cc3e:	c0 54       	subi	r28, 0x40	; 64
    cc40:	df 4f       	sbci	r29, 0xFF	; 255
    cc42:	e8 81       	ld	r30, Y
    cc44:	f9 81       	ldd	r31, Y+1	; 0x01
    cc46:	c0 5c       	subi	r28, 0xC0	; 192
    cc48:	d0 40       	sbci	r29, 0x00	; 0
    cc4a:	84 91       	lpm	r24, Z
    cc4c:	cf 54       	subi	r28, 0x4F	; 79
    cc4e:	df 4f       	sbci	r29, 0xFF	; 255
    cc50:	68 81       	ld	r22, Y
    cc52:	c1 5b       	subi	r28, 0xB1	; 177
    cc54:	d0 40       	sbci	r29, 0x00	; 0
    cc56:	70 e0       	ldi	r23, 0x00	; 0
    cc58:	48 2d       	mov	r20, r8
    cc5a:	90 e0       	ldi	r25, 0x00	; 0
    cc5c:	f9 01       	movw	r30, r18
    cc5e:	19 95       	eicall
    cc60:	c6 53       	subi	r28, 0x36	; 54
    cc62:	df 4f       	sbci	r29, 0xFF	; 255
    cc64:	18 83       	st	Y, r17
    cc66:	ca 5c       	subi	r28, 0xCA	; 202
    cc68:	d0 40       	sbci	r29, 0x00	; 0
    cc6a:	23 94       	inc	r2
    cc6c:	b4 cb       	rjmp	.-2200   	; 0xc3d6 <draw_menu(bool)+0x1974>
    cc6e:	88 2e       	mov	r8, r24
    cc70:	e3 ce       	rjmp	.-570    	; 0xca38 <draw_menu(bool)+0x1fd6>
    cc72:	f1 e0       	ldi	r31, 0x01	; 1
    cc74:	c6 53       	subi	r28, 0x36	; 54
    cc76:	df 4f       	sbci	r29, 0xFF	; 255
    cc78:	f8 83       	st	Y, r31
    cc7a:	ca 5c       	subi	r28, 0xCA	; 202
    cc7c:	d0 40       	sbci	r29, 0x00	; 0
    cc7e:	c6 53       	subi	r28, 0x36	; 54
    cc80:	df 4f       	sbci	r29, 0xFF	; 255
    cc82:	88 81       	ld	r24, Y
    cc84:	ca 5c       	subi	r28, 0xCA	; 202
    cc86:	d0 40       	sbci	r29, 0x00	; 0
    cc88:	cd 51       	subi	r28, 0x1D	; 29
    cc8a:	df 4f       	sbci	r29, 0xFF	; 255
    cc8c:	0f b6       	in	r0, 0x3f	; 63
    cc8e:	f8 94       	cli
    cc90:	de bf       	out	0x3e, r29	; 62
    cc92:	0f be       	out	0x3f, r0	; 63
    cc94:	cd bf       	out	0x3d, r28	; 61
    cc96:	df 91       	pop	r29
    cc98:	cf 91       	pop	r28
    cc9a:	1f 91       	pop	r17
    cc9c:	0f 91       	pop	r16
    cc9e:	ff 90       	pop	r15
    cca0:	ef 90       	pop	r14
    cca2:	df 90       	pop	r13
    cca4:	cf 90       	pop	r12
    cca6:	bf 90       	pop	r11
    cca8:	af 90       	pop	r10
    ccaa:	9f 90       	pop	r9
    ccac:	8f 90       	pop	r8
    ccae:	7f 90       	pop	r7
    ccb0:	6f 90       	pop	r6
    ccb2:	5f 90       	pop	r5
    ccb4:	4f 90       	pop	r4
    ccb6:	3f 90       	pop	r3
    ccb8:	2f 90       	pop	r2
    ccba:	08 95       	ret

0000ccbc <setup>:
setup():
    ccbc:	2f 92       	push	r2
    ccbe:	3f 92       	push	r3
    ccc0:	4f 92       	push	r4
    ccc2:	5f 92       	push	r5
    ccc4:	6f 92       	push	r6
    ccc6:	7f 92       	push	r7
    ccc8:	8f 92       	push	r8
    ccca:	9f 92       	push	r9
    cccc:	af 92       	push	r10
    ccce:	bf 92       	push	r11
    ccd0:	cf 92       	push	r12
    ccd2:	df 92       	push	r13
    ccd4:	ef 92       	push	r14
    ccd6:	ff 92       	push	r15
    ccd8:	0f 93       	push	r16
    ccda:	1f 93       	push	r17
    ccdc:	cf 93       	push	r28
    ccde:	df 93       	push	r29
    cce0:	cd b7       	in	r28, 0x3d	; 61
    cce2:	de b7       	in	r29, 0x3e	; 62
    cce4:	c2 53       	subi	r28, 0x32	; 50
    cce6:	d1 40       	sbci	r29, 0x01	; 1
    cce8:	0f b6       	in	r0, 0x3f	; 63
    ccea:	f8 94       	cli
    ccec:	de bf       	out	0x3e, r29	; 62
    ccee:	0f be       	out	0x3f, r0	; 63
    ccf0:	cd bf       	out	0x3d, r28	; 61
    ccf2:	66 e2       	ldi	r22, 0x26	; 38
    ccf4:	7e e0       	ldi	r23, 0x0E	; 14
    ccf6:	ce 01       	movw	r24, r28
    ccf8:	01 96       	adiw	r24, 0x01	; 1
    ccfa:	0e 94 3c ce 	call	0x19c78	; 0x19c78 <NTPClient::NTPClient(UDP&)>
    ccfe:	0e 94 65 4e 	call	0x9cca	; 0x9cca <setup_io_pin()>
    cd02:	78 94       	sei
    cd04:	0e 94 6d aa 	call	0x154da	; 0x154da <SPIClass::begin()>
    cd08:	81 e3       	ldi	r24, 0x31	; 49
    cd0a:	91 e1       	ldi	r25, 0x11	; 17
    cd0c:	0e 94 3a c9 	call	0x19274	; 0x19274 <TwoWire::begin()>
    cd10:	85 e5       	ldi	r24, 0x55	; 85
    cd12:	9e e0       	ldi	r25, 0x0E	; 14
    cd14:	0e 94 fb c6 	call	0x18df6	; 0x18df6 <RTC_DS1307::begin()>
    cd18:	89 e0       	ldi	r24, 0x09	; 9
    cd1a:	9c e0       	ldi	r25, 0x0C	; 12
    cd1c:	0e 94 08 88 	call	0x11010	; 0x11010 <mqtt_set_public_mqtt_client(PubSubClient*)>
    cd20:	70 e0       	ldi	r23, 0x00	; 0
    cd22:	60 e0       	ldi	r22, 0x00	; 0
    cd24:	8a ea       	ldi	r24, 0xAA	; 170
    cd26:	97 e8       	ldi	r25, 0x87	; 135
    cd28:	0e 94 fc dc 	call	0x1b9f8	; 0x1b9f8 <fdevopen>
    cd2c:	0e 94 3c 3a 	call	0x7478	; 0x7478 <printf_begin()>
    cd30:	86 e5       	ldi	r24, 0x56	; 86
    cd32:	9e e0       	ldi	r25, 0x0E	; 14
    cd34:	0e 94 c2 a8 	call	0x15184	; 0x15184 <SoftSPIB::begin()>
    cd38:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <MenuHistoryInit()>
    cd3c:	85 ea       	ldi	r24, 0xA5	; 165
    cd3e:	9b e0       	ldi	r25, 0x0B	; 11
    cd40:	0e 94 f1 a4 	call	0x149e2	; 0x149e2 <LCDWIKI_KBV::Init_LCD()>
    cd44:	63 e0       	ldi	r22, 0x03	; 3
    cd46:	85 ea       	ldi	r24, 0xA5	; 165
    cd48:	9b e0       	ldi	r25, 0x0B	; 11
    cd4a:	0e 94 5b a2 	call	0x144b6	; 0x144b6 <LCDWIKI_KBV::Set_Rotation(unsigned char)>
    cd4e:	63 e0       	ldi	r22, 0x03	; 3
    cd50:	83 e8       	ldi	r24, 0x83	; 131
    cd52:	9b e0       	ldi	r25, 0x0B	; 11
    cd54:	0e 94 af a8 	call	0x1515e	; 0x1515e <LCDWIKI_TOUCH::TP_Set_Rotation(unsigned char)>
    cd58:	85 ea       	ldi	r24, 0xA5	; 165
    cd5a:	9b e0       	ldi	r25, 0x0B	; 11
    cd5c:	0e 94 32 95 	call	0x12a64	; 0x12a64 <LCDWIKI_GUI::Get_Display_Height() const>
    cd60:	7c 01       	movw	r14, r24
    cd62:	85 ea       	ldi	r24, 0xA5	; 165
    cd64:	9b e0       	ldi	r25, 0x0B	; 11
    cd66:	0e 94 d1 94 	call	0x129a2	; 0x129a2 <LCDWIKI_GUI::Get_Display_Width() const>
    cd6a:	8c 01       	movw	r16, r24
    cd6c:	85 ea       	ldi	r24, 0xA5	; 165
    cd6e:	9b e0       	ldi	r25, 0x0B	; 11
    cd70:	0e 94 db a3 	call	0x147b6	; 0x147b6 <LCDWIKI_KBV::Get_Rotation() const>
    cd74:	97 01       	movw	r18, r14
    cd76:	a8 01       	movw	r20, r16
    cd78:	68 2f       	mov	r22, r24
    cd7a:	83 e8       	ldi	r24, 0x83	; 131
    cd7c:	9b e0       	ldi	r25, 0x0B	; 11
    cd7e:	0e 94 49 a6 	call	0x14c92	; 0x14c92 <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>
    cd82:	6f ef       	ldi	r22, 0xFF	; 255
    cd84:	7f ef       	ldi	r23, 0xFF	; 255
    cd86:	85 ea       	ldi	r24, 0xA5	; 165
    cd88:	9b e0       	ldi	r25, 0x0B	; 11
    cd8a:	0e 94 20 93 	call	0x12640	; 0x12640 <LCDWIKI_GUI::Fill_Screen(unsigned int)>
    cd8e:	6f e1       	ldi	r22, 0x1F	; 31
    cd90:	70 e0       	ldi	r23, 0x00	; 0
    cd92:	85 ea       	ldi	r24, 0xA5	; 165
    cd94:	9b e0       	ldi	r25, 0x0B	; 11
    cd96:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    cd9a:	68 e0       	ldi	r22, 0x08	; 8
    cd9c:	7b e5       	ldi	r23, 0x5B	; 91
    cd9e:	ce 01       	movw	r24, r28
    cda0:	88 57       	subi	r24, 0x78	; 120
    cda2:	9f 4f       	sbci	r25, 0xFF	; 255
    cda4:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    cda8:	c1 2c       	mov	r12, r1
    cdaa:	ee 24       	eor	r14, r14
    cdac:	ea 94       	dec	r14
    cdae:	fe 2c       	mov	r15, r14
    cdb0:	0f e1       	ldi	r16, 0x1F	; 31
    cdb2:	10 e0       	ldi	r17, 0x00	; 0
    cdb4:	22 e0       	ldi	r18, 0x02	; 2
    cdb6:	4a e0       	ldi	r20, 0x0A	; 10
    cdb8:	50 e0       	ldi	r21, 0x00	; 0
    cdba:	6e e1       	ldi	r22, 0x1E	; 30
    cdbc:	70 e0       	ldi	r23, 0x00	; 0
    cdbe:	ce 01       	movw	r24, r28
    cdc0:	88 57       	subi	r24, 0x78	; 120
    cdc2:	9f 4f       	sbci	r25, 0xFF	; 255
    cdc4:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cdc8:	1e e1       	ldi	r17, 0x1E	; 30
    cdca:	61 2e       	mov	r6, r17
    cdcc:	71 2c       	mov	r7, r1
    cdce:	c0 5d       	subi	r28, 0xD0	; 208
    cdd0:	de 4f       	sbci	r29, 0xFE	; 254
    cdd2:	18 82       	st	Y, r1
    cdd4:	c0 53       	subi	r28, 0x30	; 48
    cdd6:	d1 40       	sbci	r29, 0x01	; 1
itoa():
    cdd8:	5e 01       	movw	r10, r28
    cdda:	28 e4       	ldi	r18, 0x48	; 72
    cddc:	a2 0e       	add	r10, r18
    cdde:	b1 1c       	adc	r11, r1
setup():
    cde0:	68 ec       	ldi	r22, 0xC8	; 200
    cde2:	70 e0       	ldi	r23, 0x00	; 0
    cde4:	6c 0f       	add	r22, r28
    cde6:	7d 1f       	adc	r23, r29
    cde8:	64 5f       	subi	r22, 0xF4	; 244
    cdea:	7f 4f       	sbci	r23, 0xFF	; 255
    cdec:	cf 5c       	subi	r28, 0xCF	; 207
    cdee:	de 4f       	sbci	r29, 0xFE	; 254
    cdf0:	79 83       	std	Y+1, r23	; 0x01
    cdf2:	68 83       	st	Y, r22
    cdf4:	c1 53       	subi	r28, 0x31	; 49
    cdf6:	d1 40       	sbci	r29, 0x01	; 1
    cdf8:	4e 01       	movw	r8, r28
    cdfa:	7c ef       	ldi	r23, 0xFC	; 252
    cdfc:	87 0e       	add	r8, r23
    cdfe:	91 1c       	adc	r9, r1
    ce00:	ce 01       	movw	r24, r28
    ce02:	8c 5e       	subi	r24, 0xEC	; 236
    ce04:	9e 4f       	sbci	r25, 0xFE	; 254
    ce06:	c2 5d       	subi	r28, 0xD2	; 210
    ce08:	de 4f       	sbci	r29, 0xFE	; 254
    ce0a:	99 83       	std	Y+1, r25	; 0x01
    ce0c:	88 83       	st	Y, r24
    ce0e:	ce 52       	subi	r28, 0x2E	; 46
    ce10:	d1 40       	sbci	r29, 0x01	; 1
    ce12:	1e 01       	movw	r2, r28
    ce14:	94 ef       	ldi	r25, 0xF4	; 244
    ce16:	29 1a       	sub	r2, r25
    ce18:	9e ef       	ldi	r25, 0xFE	; 254
    ce1a:	39 0a       	sbc	r3, r25
    ce1c:	2e 01       	movw	r4, r28
    ce1e:	2c ef       	ldi	r18, 0xFC	; 252
    ce20:	42 1a       	sub	r4, r18
    ce22:	2e ef       	ldi	r18, 0xFE	; 254
    ce24:	52 0a       	sbc	r5, r18
    ce26:	c1 2c       	mov	r12, r1
    ce28:	ee 24       	eor	r14, r14
    ce2a:	ea 94       	dec	r14
    ce2c:	fe 2c       	mov	r15, r14
    ce2e:	00 e0       	ldi	r16, 0x00	; 0
    ce30:	18 ef       	ldi	r17, 0xF8	; 248
    ce32:	21 e0       	ldi	r18, 0x01	; 1
    ce34:	4e e1       	ldi	r20, 0x1E	; 30
    ce36:	50 e0       	ldi	r21, 0x00	; 0
    ce38:	b3 01       	movw	r22, r6
    ce3a:	83 e5       	ldi	r24, 0x53	; 83
    ce3c:	95 e0       	ldi	r25, 0x05	; 5
    ce3e:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ce42:	c0 5d       	subi	r28, 0xD0	; 208
    ce44:	de 4f       	sbci	r29, 0xFE	; 254
    ce46:	68 81       	ld	r22, Y
    ce48:	c0 53       	subi	r28, 0x30	; 48
    ce4a:	d1 40       	sbci	r29, 0x01	; 1
    ce4c:	61 11       	cpse	r22, r1
    ce4e:	6d c1       	rjmp	.+730    	; 0xd12a <setup+0x46e>
    ce50:	6e eb       	ldi	r22, 0xBE	; 190
    ce52:	7a e5       	ldi	r23, 0x5A	; 90
    ce54:	ce 01       	movw	r24, r28
    ce56:	88 57       	subi	r24, 0x78	; 120
    ce58:	9f 4f       	sbci	r25, 0xFF	; 255
    ce5a:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    ce5e:	65 e5       	ldi	r22, 0x55	; 85
    ce60:	75 e0       	ldi	r23, 0x05	; 5
    ce62:	ce 01       	movw	r24, r28
    ce64:	88 57       	subi	r24, 0x78	; 120
    ce66:	9f 4f       	sbci	r25, 0xFF	; 255
    ce68:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    ce6c:	00 ee       	ldi	r16, 0xE0	; 224
    ce6e:	17 e0       	ldi	r17, 0x07	; 7
    ce70:	21 e0       	ldi	r18, 0x01	; 1
    ce72:	42 e3       	ldi	r20, 0x32	; 50
    ce74:	50 e0       	ldi	r21, 0x00	; 0
    ce76:	6e e1       	ldi	r22, 0x1E	; 30
    ce78:	70 e0       	ldi	r23, 0x00	; 0
    ce7a:	ce 01       	movw	r24, r28
    ce7c:	88 57       	subi	r24, 0x78	; 120
    ce7e:	9f 4f       	sbci	r25, 0xFF	; 255
    ce80:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ce84:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <tritri+0x1>
    ce88:	10 92 4c 0a 	sts	0x0A4C, r1	; 0x800a4c <tritri>
    ce8c:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <petnula+0x1>
    ce90:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <petnula>
    ce94:	10 92 49 0a 	sts	0x0A49, r1	; 0x800a49 <dvanact+0x1>
    ce98:	10 92 48 0a 	sts	0x0A48, r1	; 0x800a48 <dvanact>
    ce9c:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <light_curr+0x1>
    cea0:	10 92 44 0a 	sts	0x0A44, r1	; 0x800a44 <light_curr>
    cea4:	43 e0       	ldi	r20, 0x03	; 3
    cea6:	66 e0       	ldi	r22, 0x06	; 6
    cea8:	88 ef       	ldi	r24, 0xF8	; 248
    ceaa:	0e 94 49 d0 	call	0x1a092	; 0x1a092 <init_a2d(unsigned char, unsigned char, unsigned char)>
    ceae:	85 ed       	ldi	r24, 0xD5	; 213
    ceb0:	93 e3       	ldi	r25, 0x33	; 51
    ceb2:	0e 94 44 d0 	call	0x1a088	; 0x1a088 <a2d_handler(void (*)(unsigned char, unsigned int))>
    ceb6:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <a2d_run_now>
    ceba:	83 e0       	ldi	r24, 0x03	; 3
    cebc:	0e 94 66 d0 	call	0x1a0cc	; 0x1a0cc <a2d_start_first(unsigned char)>
    cec0:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    cec4:	6b 01       	movw	r12, r22
    cec6:	7c 01       	movw	r14, r24
    cec8:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <a2d_run_now>
    cecc:	81 11       	cpse	r24, r1
    cece:	0b c0       	rjmp	.+22     	; 0xcee6 <setup+0x22a>
    ced0:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    ced4:	6c 19       	sub	r22, r12
    ced6:	7d 09       	sbc	r23, r13
    ced8:	8e 09       	sbc	r24, r14
    ceda:	9f 09       	sbc	r25, r15
    cedc:	6a 30       	cpi	r22, 0x0A	; 10
    cede:	71 05       	cpc	r23, r1
    cee0:	81 05       	cpc	r24, r1
    cee2:	91 05       	cpc	r25, r1
    cee4:	88 f3       	brcs	.-30     	; 0xcec8 <setup+0x20c>
    cee6:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <a2d_run_now>
    ceea:	86 e0       	ldi	r24, 0x06	; 6
    ceec:	0e 94 66 d0 	call	0x1a0cc	; 0x1a0cc <a2d_start_first(unsigned char)>
    cef0:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    cef4:	6b 01       	movw	r12, r22
    cef6:	7c 01       	movw	r14, r24
    cef8:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <a2d_run_now>
    cefc:	81 11       	cpse	r24, r1
    cefe:	0b c0       	rjmp	.+22     	; 0xcf16 <setup+0x25a>
    cf00:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    cf04:	6c 19       	sub	r22, r12
    cf06:	7d 09       	sbc	r23, r13
    cf08:	8e 09       	sbc	r24, r14
    cf0a:	9f 09       	sbc	r25, r15
    cf0c:	6a 30       	cpi	r22, 0x0A	; 10
    cf0e:	71 05       	cpc	r23, r1
    cf10:	81 05       	cpc	r24, r1
    cf12:	91 05       	cpc	r25, r1
    cf14:	88 f3       	brcs	.-30     	; 0xcef8 <setup+0x23c>
    cf16:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <a2d_run_now>
    cf1a:	85 e0       	ldi	r24, 0x05	; 5
    cf1c:	0e 94 66 d0 	call	0x1a0cc	; 0x1a0cc <a2d_start_first(unsigned char)>
    cf20:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    cf24:	6b 01       	movw	r12, r22
    cf26:	7c 01       	movw	r14, r24
    cf28:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <a2d_run_now>
    cf2c:	81 11       	cpse	r24, r1
    cf2e:	0b c0       	rjmp	.+22     	; 0xcf46 <setup+0x28a>
    cf30:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    cf34:	6c 19       	sub	r22, r12
    cf36:	7d 09       	sbc	r23, r13
    cf38:	8e 09       	sbc	r24, r14
    cf3a:	9f 09       	sbc	r25, r15
    cf3c:	6a 30       	cpi	r22, 0x0A	; 10
    cf3e:	71 05       	cpc	r23, r1
    cf40:	81 05       	cpc	r24, r1
    cf42:	91 05       	cpc	r25, r1
    cf44:	88 f3       	brcs	.-30     	; 0xcf28 <setup+0x26c>
    cf46:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <a2d_run_now>
    cf4a:	84 e0       	ldi	r24, 0x04	; 4
    cf4c:	0e 94 66 d0 	call	0x1a0cc	; 0x1a0cc <a2d_start_first(unsigned char)>
    cf50:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    cf54:	6b 01       	movw	r12, r22
    cf56:	7c 01       	movw	r14, r24
    cf58:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <a2d_run_now>
    cf5c:	81 11       	cpse	r24, r1
    cf5e:	0b c0       	rjmp	.+22     	; 0xcf76 <setup+0x2ba>
    cf60:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    cf64:	6c 19       	sub	r22, r12
    cf66:	7d 09       	sbc	r23, r13
    cf68:	8e 09       	sbc	r24, r14
    cf6a:	9f 09       	sbc	r25, r15
    cf6c:	6a 30       	cpi	r22, 0x0A	; 10
    cf6e:	71 05       	cpc	r23, r1
    cf70:	81 05       	cpc	r24, r1
    cf72:	91 05       	cpc	r25, r1
    cf74:	88 f3       	brcs	.-30     	; 0xcf58 <setup+0x29c>
    cf76:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <a2d_run_now>
    cf7a:	87 e0       	ldi	r24, 0x07	; 7
    cf7c:	0e 94 66 d0 	call	0x1a0cc	; 0x1a0cc <a2d_start_first(unsigned char)>
    cf80:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    cf84:	6b 01       	movw	r12, r22
    cf86:	7c 01       	movw	r14, r24
    cf88:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <a2d_run_now>
    cf8c:	81 11       	cpse	r24, r1
    cf8e:	0b c0       	rjmp	.+22     	; 0xcfa6 <setup+0x2ea>
    cf90:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    cf94:	6c 19       	sub	r22, r12
    cf96:	7d 09       	sbc	r23, r13
    cf98:	8e 09       	sbc	r24, r14
    cf9a:	9f 09       	sbc	r25, r15
    cf9c:	6a 30       	cpi	r22, 0x0A	; 10
    cf9e:	71 05       	cpc	r23, r1
    cfa0:	81 05       	cpc	r24, r1
    cfa2:	91 05       	cpc	r25, r1
    cfa4:	88 f3       	brcs	.-30     	; 0xcf88 <setup+0x2cc>
    cfa6:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <a2d_run_now>
_Z15prepocet_napetijh():
    cfaa:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <tritri>
    cfae:	90 91 4d 0a 	lds	r25, 0x0A4D	; 0x800a4d <tritri+0x1>
    cfb2:	25 e0       	ldi	r18, 0x05	; 5
    cfb4:	28 9f       	mul	r18, r24
    cfb6:	b0 01       	movw	r22, r0
    cfb8:	29 9f       	mul	r18, r25
    cfba:	70 0d       	add	r23, r0
    cfbc:	11 24       	eor	r1, r1
    cfbe:	90 e0       	ldi	r25, 0x00	; 0
    cfc0:	80 e0       	ldi	r24, 0x00	; 0
    cfc2:	0e 94 19 d7 	call	0x1ae32	; 0x1ae32 <__floatunsisf>
    cfc6:	20 e0       	ldi	r18, 0x00	; 0
    cfc8:	30 e0       	ldi	r19, 0x00	; 0
    cfca:	4a e7       	ldi	r20, 0x7A	; 122
    cfcc:	54 e4       	ldi	r21, 0x44	; 68
    cfce:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
setup():
    cfd2:	8e 01       	movw	r16, r28
    cfd4:	0c 5e       	subi	r16, 0xEC	; 236
    cfd6:	1e 4f       	sbci	r17, 0xFE	; 254
    cfd8:	22 e0       	ldi	r18, 0x02	; 2
    cfda:	44 e0       	ldi	r20, 0x04	; 4
    cfdc:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
_Z15prepocet_napetijh():
    cfe0:	60 91 4a 0a 	lds	r22, 0x0A4A	; 0x800a4a <petnula>
    cfe4:	70 91 4b 0a 	lds	r23, 0x0A4B	; 0x800a4b <petnula+0x1>
    cfe8:	e3 e0       	ldi	r30, 0x03	; 3
    cfea:	66 0f       	add	r22, r22
    cfec:	77 1f       	adc	r23, r23
    cfee:	ea 95       	dec	r30
    cff0:	e1 f7       	brne	.-8      	; 0xcfea <setup+0x32e>
    cff2:	90 e0       	ldi	r25, 0x00	; 0
    cff4:	80 e0       	ldi	r24, 0x00	; 0
    cff6:	0e 94 19 d7 	call	0x1ae32	; 0x1ae32 <__floatunsisf>
    cffa:	20 e0       	ldi	r18, 0x00	; 0
    cffc:	30 e0       	ldi	r19, 0x00	; 0
    cffe:	4a e7       	ldi	r20, 0x7A	; 122
    d000:	54 e4       	ldi	r21, 0x44	; 68
    d002:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
setup():
    d006:	81 01       	movw	r16, r2
    d008:	22 e0       	ldi	r18, 0x02	; 2
    d00a:	44 e0       	ldi	r20, 0x04	; 4
    d00c:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
_Z15prepocet_napetijh():
    d010:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <dvanact>
    d014:	90 91 49 0a 	lds	r25, 0x0A49	; 0x800a49 <dvanact+0x1>
    d018:	29 e3       	ldi	r18, 0x39	; 57
    d01a:	28 9f       	mul	r18, r24
    d01c:	b0 01       	movw	r22, r0
    d01e:	29 9f       	mul	r18, r25
    d020:	70 0d       	add	r23, r0
    d022:	11 24       	eor	r1, r1
    d024:	90 e0       	ldi	r25, 0x00	; 0
    d026:	80 e0       	ldi	r24, 0x00	; 0
    d028:	0e 94 19 d7 	call	0x1ae32	; 0x1ae32 <__floatunsisf>
    d02c:	20 e0       	ldi	r18, 0x00	; 0
    d02e:	30 e0       	ldi	r19, 0x00	; 0
    d030:	4a e7       	ldi	r20, 0x7A	; 122
    d032:	54 e4       	ldi	r21, 0x44	; 68
    d034:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
setup():
    d038:	82 01       	movw	r16, r4
    d03a:	22 e0       	ldi	r18, 0x02	; 2
    d03c:	44 e0       	ldi	r20, 0x04	; 4
    d03e:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
_Z15prepocet_prouduj():
    d042:	60 91 46 0a 	lds	r22, 0x0A46	; 0x800a46 <proud>
    d046:	70 91 47 0a 	lds	r23, 0x0A47	; 0x800a47 <proud+0x1>
    d04a:	90 e0       	ldi	r25, 0x00	; 0
    d04c:	80 e0       	ldi	r24, 0x00	; 0
    d04e:	0e 94 19 d7 	call	0x1ae32	; 0x1ae32 <__floatunsisf>
setup():
    d052:	84 01       	movw	r16, r8
    d054:	22 e0       	ldi	r18, 0x02	; 2
    d056:	44 e0       	ldi	r20, 0x04	; 4
    d058:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
    d05c:	9f 92       	push	r9
    d05e:	8f 92       	push	r8
    d060:	5f 92       	push	r5
    d062:	4f 92       	push	r4
    d064:	3f 92       	push	r3
    d066:	2f 92       	push	r2
    d068:	c1 5d       	subi	r28, 0xD1	; 209
    d06a:	de 4f       	sbci	r29, 0xFE	; 254
    d06c:	78 81       	ld	r23, Y
    d06e:	cf 52       	subi	r28, 0x2F	; 47
    d070:	d1 40       	sbci	r29, 0x01	; 1
    d072:	7f 93       	push	r23
    d074:	c2 5d       	subi	r28, 0xD2	; 210
    d076:	de 4f       	sbci	r29, 0xFE	; 254
    d078:	88 81       	ld	r24, Y
    d07a:	ce 52       	subi	r28, 0x2E	; 46
    d07c:	d1 40       	sbci	r29, 0x01	; 1
    d07e:	8f 93       	push	r24
    d080:	88 e5       	ldi	r24, 0x58	; 88
    d082:	95 e0       	ldi	r25, 0x05	; 5
    d084:	9f 93       	push	r25
    d086:	8f 93       	push	r24
    d088:	bf 92       	push	r11
    d08a:	af 92       	push	r10
    d08c:	0e 94 ad dd 	call	0x1bb5a	; 0x1bb5a <sprintf>
    d090:	c1 2c       	mov	r12, r1
    d092:	ee 24       	eor	r14, r14
    d094:	ea 94       	dec	r14
    d096:	fe 2c       	mov	r15, r14
    d098:	00 ee       	ldi	r16, 0xE0	; 224
    d09a:	17 e0       	ldi	r17, 0x07	; 7
    d09c:	21 e0       	ldi	r18, 0x01	; 1
    d09e:	42 e3       	ldi	r20, 0x32	; 50
    d0a0:	50 e0       	ldi	r21, 0x00	; 0
    d0a2:	60 ea       	ldi	r22, 0xA0	; 160
    d0a4:	70 e0       	ldi	r23, 0x00	; 0
    d0a6:	c5 01       	movw	r24, r10
    d0a8:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d0ac:	0f b6       	in	r0, 0x3f	; 63
    d0ae:	f8 94       	cli
    d0b0:	de bf       	out	0x3e, r29	; 62
    d0b2:	0f be       	out	0x3f, r0	; 63
    d0b4:	cd bf       	out	0x3d, r28	; 61
    d0b6:	c0 5d       	subi	r28, 0xD0	; 208
    d0b8:	de 4f       	sbci	r29, 0xFE	; 254
    d0ba:	88 81       	ld	r24, Y
    d0bc:	c0 53       	subi	r28, 0x30	; 48
    d0be:	d1 40       	sbci	r29, 0x01	; 1
    d0c0:	8e 30       	cpi	r24, 0x0E	; 14
    d0c2:	09 f0       	breq	.+2      	; 0xd0c6 <setup+0x40a>
    d0c4:	b7 c4       	rjmp	.+2414   	; 0xda34 <setup+0xd78>
    d0c6:	6d e5       	ldi	r22, 0x5D	; 93
    d0c8:	7a e5       	ldi	r23, 0x5A	; 90
    d0ca:	ce 01       	movw	r24, r28
    d0cc:	88 57       	subi	r24, 0x78	; 120
    d0ce:	9f 4f       	sbci	r25, 0xFF	; 255
    d0d0:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d0d4:	c1 2c       	mov	r12, r1
    d0d6:	ee 24       	eor	r14, r14
    d0d8:	ea 94       	dec	r14
    d0da:	fe 2c       	mov	r15, r14
    d0dc:	00 ee       	ldi	r16, 0xE0	; 224
    d0de:	17 e0       	ldi	r17, 0x07	; 7
    d0e0:	21 e0       	ldi	r18, 0x01	; 1
    d0e2:	4e eb       	ldi	r20, 0xBE	; 190
    d0e4:	50 e0       	ldi	r21, 0x00	; 0
    d0e6:	6e e1       	ldi	r22, 0x1E	; 30
    d0e8:	70 e0       	ldi	r23, 0x00	; 0
    d0ea:	ce 01       	movw	r24, r28
    d0ec:	88 57       	subi	r24, 0x78	; 120
    d0ee:	9f 4f       	sbci	r25, 0xFF	; 255
    d0f0:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d0f4:	ce 01       	movw	r24, r28
    d0f6:	01 96       	adiw	r24, 0x01	; 1
    d0f8:	0e 94 67 87 	call	0x10ece	; 0x10ece <ntp_check(NTPClient*)>
    d0fc:	81 11       	cpse	r24, r1
    d0fe:	81 c4       	rjmp	.+2306   	; 0xda02 <setup+0xd46>
    d100:	62 e3       	ldi	r22, 0x32	; 50
    d102:	76 e5       	ldi	r23, 0x56	; 86
    d104:	ce 01       	movw	r24, r28
    d106:	88 57       	subi	r24, 0x78	; 120
    d108:	9f 4f       	sbci	r25, 0xFF	; 255
    d10a:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d10e:	00 e0       	ldi	r16, 0x00	; 0
    d110:	18 ef       	ldi	r17, 0xF8	; 248
    d112:	21 e0       	ldi	r18, 0x01	; 1
    d114:	4e eb       	ldi	r20, 0xBE	; 190
    d116:	50 e0       	ldi	r21, 0x00	; 0
    d118:	60 ea       	ldi	r22, 0xA0	; 160
    d11a:	70 e0       	ldi	r23, 0x00	; 0
    d11c:	ce 01       	movw	r24, r28
    d11e:	88 57       	subi	r24, 0x78	; 120
    d120:	9f 4f       	sbci	r25, 0xFF	; 255
    d122:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d126:	81 e0       	ldi	r24, 0x01	; 1
    d128:	63 c3       	rjmp	.+1734   	; 0xd7f0 <setup+0xb34>
    d12a:	c0 5d       	subi	r28, 0xD0	; 208
    d12c:	de 4f       	sbci	r29, 0xFE	; 254
    d12e:	78 81       	ld	r23, Y
    d130:	c0 53       	subi	r28, 0x30	; 48
    d132:	d1 40       	sbci	r29, 0x01	; 1
    d134:	71 30       	cpi	r23, 0x01	; 1
    d136:	09 f0       	breq	.+2      	; 0xd13a <setup+0x47e>
    d138:	5a c0       	rjmp	.+180    	; 0xd1ee <setup+0x532>
    d13a:	6e eb       	ldi	r22, 0xBE	; 190
    d13c:	7a e5       	ldi	r23, 0x5A	; 90
    d13e:	ce 01       	movw	r24, r28
    d140:	88 57       	subi	r24, 0x78	; 120
    d142:	9f 4f       	sbci	r25, 0xFF	; 255
    d144:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d148:	66 e7       	ldi	r22, 0x76	; 118
    d14a:	75 e0       	ldi	r23, 0x05	; 5
    d14c:	ce 01       	movw	r24, r28
    d14e:	88 57       	subi	r24, 0x78	; 120
    d150:	9f 4f       	sbci	r25, 0xFF	; 255
    d152:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    d156:	c1 2c       	mov	r12, r1
    d158:	ee 24       	eor	r14, r14
    d15a:	ea 94       	dec	r14
    d15c:	fe 2c       	mov	r15, r14
    d15e:	00 ee       	ldi	r16, 0xE0	; 224
    d160:	17 e0       	ldi	r17, 0x07	; 7
    d162:	21 e0       	ldi	r18, 0x01	; 1
    d164:	4c e3       	ldi	r20, 0x3C	; 60
    d166:	50 e0       	ldi	r21, 0x00	; 0
    d168:	6e e1       	ldi	r22, 0x1E	; 30
    d16a:	70 e0       	ldi	r23, 0x00	; 0
    d16c:	ce 01       	movw	r24, r28
    d16e:	88 57       	subi	r24, 0x78	; 120
    d170:	9f 4f       	sbci	r25, 0xFF	; 255
    d172:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
_ZN24Temperature_LM75_Derived16readTemperatureCEv():
    d176:	e0 91 ef 0b 	lds	r30, 0x0BEF	; 0x800bef <lm75_temp+0xb>
    d17a:	f0 91 f0 0b 	lds	r31, 0x0BF0	; 0x800bf0 <lm75_temp+0xc>
    d17e:	04 80       	ldd	r0, Z+4	; 0x04
    d180:	f5 81       	ldd	r31, Z+5	; 0x05
    d182:	e0 2d       	mov	r30, r0
    d184:	60 81       	ld	r22, Z
    d186:	84 ee       	ldi	r24, 0xE4	; 228
    d188:	9b e0       	ldi	r25, 0x0B	; 11
    d18a:	0e 94 35 c8 	call	0x1906a	; 0x1906a <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)>
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
    d18e:	bc 01       	movw	r22, r24
    d190:	99 0f       	add	r25, r25
    d192:	88 0b       	sbc	r24, r24
    d194:	99 0b       	sbc	r25, r25
    d196:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
    d19a:	20 91 eb 0b 	lds	r18, 0x0BEB	; 0x800beb <lm75_temp+0x7>
    d19e:	30 91 ec 0b 	lds	r19, 0x0BEC	; 0x800bec <lm75_temp+0x8>
    d1a2:	40 91 ed 0b 	lds	r20, 0x0BED	; 0x800bed <lm75_temp+0x9>
    d1a6:	50 91 ee 0b 	lds	r21, 0x0BEE	; 0x800bee <lm75_temp+0xa>
    d1aa:	0e 94 d0 d7 	call	0x1afa0	; 0x1afa0 <__mulsf3>
setup():
    d1ae:	84 01       	movw	r16, r8
    d1b0:	22 e0       	ldi	r18, 0x02	; 2
    d1b2:	44 e0       	ldi	r20, 0x04	; 4
    d1b4:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
    d1b8:	9f 92       	push	r9
    d1ba:	8f 92       	push	r8
    d1bc:	89 e7       	ldi	r24, 0x79	; 121
    d1be:	95 e0       	ldi	r25, 0x05	; 5
    d1c0:	9f 93       	push	r25
    d1c2:	8f 93       	push	r24
    d1c4:	bf 92       	push	r11
    d1c6:	af 92       	push	r10
    d1c8:	0e 94 ad dd 	call	0x1bb5a	; 0x1bb5a <sprintf>
    d1cc:	00 ee       	ldi	r16, 0xE0	; 224
    d1ce:	17 e0       	ldi	r17, 0x07	; 7
    d1d0:	21 e0       	ldi	r18, 0x01	; 1
    d1d2:	4c e3       	ldi	r20, 0x3C	; 60
    d1d4:	50 e0       	ldi	r21, 0x00	; 0
    d1d6:	60 ea       	ldi	r22, 0xA0	; 160
    d1d8:	70 e0       	ldi	r23, 0x00	; 0
    d1da:	c5 01       	movw	r24, r10
    d1dc:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d1e0:	0f 90       	pop	r0
    d1e2:	0f 90       	pop	r0
    d1e4:	0f 90       	pop	r0
    d1e6:	0f 90       	pop	r0
    d1e8:	0f 90       	pop	r0
    d1ea:	0f 90       	pop	r0
    d1ec:	64 cf       	rjmp	.-312    	; 0xd0b6 <setup+0x3fa>
    d1ee:	c0 5d       	subi	r28, 0xD0	; 208
    d1f0:	de 4f       	sbci	r29, 0xFE	; 254
    d1f2:	88 81       	ld	r24, Y
    d1f4:	c0 53       	subi	r28, 0x30	; 48
    d1f6:	d1 40       	sbci	r29, 0x01	; 1
    d1f8:	82 30       	cpi	r24, 0x02	; 2
    d1fa:	09 f0       	breq	.+2      	; 0xd1fe <setup+0x542>
    d1fc:	6d c1       	rjmp	.+730    	; 0xd4d8 <setup+0x81c>
_ZNK5EERefdeEv():
    d1fe:	8a e5       	ldi	r24, 0x5A	; 90
    d200:	90 e0       	ldi	r25, 0x00	; 0
    d202:	0e 94 80 e4 	call	0x1c900	; 0x1c900 <eeprom_read_byte>
setup():
    d206:	8f 3f       	cpi	r24, 0xFF	; 255
    d208:	09 f0       	breq	.+2      	; 0xd20c <setup+0x550>
    d20a:	53 c1       	rjmp	.+678    	; 0xd4b2 <setup+0x7f6>
    d20c:	60 e0       	ldi	r22, 0x00	; 0
    d20e:	8a e5       	ldi	r24, 0x5A	; 90
    d210:	90 e0       	ldi	r25, 0x00	; 0
    d212:	0e 94 74 39 	call	0x72e8	; 0x72e8 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>
    d216:	68 e3       	ldi	r22, 0x38	; 56
    d218:	7a e5       	ldi	r23, 0x5A	; 90
    d21a:	ce 01       	movw	r24, r28
    d21c:	88 57       	subi	r24, 0x78	; 120
    d21e:	9f 4f       	sbci	r25, 0xFF	; 255
    d220:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d224:	c1 2c       	mov	r12, r1
    d226:	ee 24       	eor	r14, r14
    d228:	ea 94       	dec	r14
    d22a:	fe 2c       	mov	r15, r14
    d22c:	00 e0       	ldi	r16, 0x00	; 0
    d22e:	18 ef       	ldi	r17, 0xF8	; 248
    d230:	21 e0       	ldi	r18, 0x01	; 1
    d232:	46 e4       	ldi	r20, 0x46	; 70
    d234:	50 e0       	ldi	r21, 0x00	; 0
    d236:	6e e1       	ldi	r22, 0x1E	; 30
    d238:	70 e0       	ldi	r23, 0x00	; 0
    d23a:	ce 01       	movw	r24, r28
    d23c:	88 57       	subi	r24, 0x78	; 120
    d23e:	9f 4f       	sbci	r25, 0xFF	; 255
    d240:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d244:	8f ef       	ldi	r24, 0xFF	; 255
    d246:	0e 94 67 47 	call	0x8ece	; 0x8ece <set_default_show_temp(unsigned char)>
    d24a:	80 e0       	ldi	r24, 0x00	; 0
    d24c:	0e 94 5d 92 	call	0x124ba	; 0x124ba <thermostat_ring_clear(unsigned char)>
    d250:	81 e0       	ldi	r24, 0x01	; 1
    d252:	0e 94 5d 92 	call	0x124ba	; 0x124ba <thermostat_ring_clear(unsigned char)>
    d256:	82 e0       	ldi	r24, 0x02	; 2
    d258:	0e 94 5d 92 	call	0x124ba	; 0x124ba <thermostat_ring_clear(unsigned char)>
    d25c:	83 e0       	ldi	r24, 0x03	; 3
    d25e:	0e 94 5d 92 	call	0x124ba	; 0x124ba <thermostat_ring_clear(unsigned char)>
    d262:	84 e0       	ldi	r24, 0x04	; 4
    d264:	0e 94 5d 92 	call	0x124ba	; 0x124ba <thermostat_ring_clear(unsigned char)>
    d268:	10 e0       	ldi	r17, 0x00	; 0
    d26a:	69 eb       	ldi	r22, 0xB9	; 185
    d26c:	75 e0       	ldi	r23, 0x05	; 5
    d26e:	ce 01       	movw	r24, r28
    d270:	82 52       	subi	r24, 0x22	; 34
    d272:	9f 4f       	sbci	r25, 0xFF	; 255
    d274:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    d278:	81 2f       	mov	r24, r17
    d27a:	0e 94 1a 44 	call	0x8834	; 0x8834 <remote_tds_clear(unsigned char)>
    d27e:	1f 5f       	subi	r17, 0xFF	; 255
    d280:	1a 30       	cpi	r17, 0x0A	; 10
    d282:	99 f7       	brne	.-26     	; 0xd26a <setup+0x5ae>
    d284:	10 e0       	ldi	r17, 0x00	; 0
    d286:	6e e7       	ldi	r22, 0x7E	; 126
    d288:	76 e5       	ldi	r23, 0x56	; 86
    d28a:	c5 01       	movw	r24, r10
    d28c:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d290:	b5 01       	movw	r22, r10
    d292:	81 2f       	mov	r24, r17
    d294:	0e 94 0b 90 	call	0x12016	; 0x12016 <thermostat_program_set_name(unsigned char, char*)>
    d298:	6f ef       	ldi	r22, 0xFF	; 255
    d29a:	81 2f       	mov	r24, r17
    d29c:	0e 94 3b 90 	call	0x12076	; 0x12076 <thermostat_program_set_active(unsigned char, unsigned char)>
    d2a0:	f1 2c       	mov	r15, r1
    d2a2:	c1 2c       	mov	r12, r1
    d2a4:	e1 2c       	mov	r14, r1
    d2a6:	00 e0       	ldi	r16, 0x00	; 0
    d2a8:	20 e0       	ldi	r18, 0x00	; 0
    d2aa:	40 e0       	ldi	r20, 0x00	; 0
    d2ac:	6f 2d       	mov	r22, r15
    d2ae:	81 2f       	mov	r24, r17
    d2b0:	0e 94 96 90 	call	0x1212c	; 0x1212c <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    d2b4:	4c ed       	ldi	r20, 0xDC	; 220
    d2b6:	50 e0       	ldi	r21, 0x00	; 0
    d2b8:	6f 2d       	mov	r22, r15
    d2ba:	81 2f       	mov	r24, r17
    d2bc:	0e 94 f4 90 	call	0x121e8	; 0x121e8 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
    d2c0:	40 e0       	ldi	r20, 0x00	; 0
    d2c2:	6f 2d       	mov	r22, r15
    d2c4:	81 2f       	mov	r24, r17
    d2c6:	0e 94 1d 91 	call	0x1223a	; 0x1223a <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
    d2ca:	f3 94       	inc	r15
    d2cc:	9b e0       	ldi	r25, 0x0B	; 11
    d2ce:	f9 12       	cpse	r15, r25
    d2d0:	e8 cf       	rjmp	.-48     	; 0xd2a2 <setup+0x5e6>
    d2d2:	1f 5f       	subi	r17, 0xFF	; 255
    d2d4:	18 30       	cpi	r17, 0x08	; 8
    d2d6:	b9 f6       	brne	.-82     	; 0xd286 <setup+0x5ca>
    d2d8:	5a e0       	ldi	r21, 0x0A	; 10
    d2da:	f5 2e       	mov	r15, r21
    d2dc:	1f ef       	ldi	r17, 0xFF	; 255
    d2de:	be 01       	movw	r22, r28
    d2e0:	68 53       	subi	r22, 0x38	; 56
    d2e2:	7f 4f       	sbci	r23, 0xFF	; 255
    d2e4:	80 2f       	mov	r24, r16
    d2e6:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
    d2ea:	60 e8       	ldi	r22, 0x80	; 128
    d2ec:	75 e0       	ldi	r23, 0x05	; 5
    d2ee:	cf 5c       	subi	r28, 0xCF	; 207
    d2f0:	de 4f       	sbci	r29, 0xFE	; 254
    d2f2:	88 81       	ld	r24, Y
    d2f4:	99 81       	ldd	r25, Y+1	; 0x01
    d2f6:	c1 53       	subi	r28, 0x31	; 49
    d2f8:	d1 40       	sbci	r29, 0x01	; 1
    d2fa:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    d2fe:	c8 53       	subi	r28, 0x38	; 56
    d300:	df 4f       	sbci	r29, 0xFF	; 255
    d302:	18 82       	st	Y, r1
    d304:	c8 5c       	subi	r28, 0xC8	; 200
    d306:	d0 40       	sbci	r29, 0x00	; 0
    d308:	ce 52       	subi	r28, 0x2E	; 46
    d30a:	df 4f       	sbci	r29, 0xFF	; 255
    d30c:	19 82       	std	Y+1, r1	; 0x01
    d30e:	18 82       	st	Y, r1
    d310:	c2 5d       	subi	r28, 0xD2	; 210
    d312:	d0 40       	sbci	r29, 0x00	; 0
    d314:	cf 52       	subi	r28, 0x2F	; 47
    d316:	df 4f       	sbci	r29, 0xFF	; 255
    d318:	18 82       	st	Y, r1
    d31a:	c1 5d       	subi	r28, 0xD1	; 209
    d31c:	d0 40       	sbci	r29, 0x00	; 0
    d31e:	c4 52       	subi	r28, 0x24	; 36
    d320:	df 4f       	sbci	r29, 0xFF	; 255
    d322:	f8 82       	st	Y, r15
    d324:	cc 5d       	subi	r28, 0xDC	; 220
    d326:	d0 40       	sbci	r29, 0x00	; 0
    d328:	c7 53       	subi	r28, 0x37	; 55
    d32a:	df 4f       	sbci	r29, 0xFF	; 255
    d32c:	18 83       	st	Y, r17
    d32e:	c9 5c       	subi	r28, 0xC9	; 201
    d330:	d0 40       	sbci	r29, 0x00	; 0
    d332:	c6 53       	subi	r28, 0x36	; 54
    d334:	df 4f       	sbci	r29, 0xFF	; 255
    d336:	18 83       	st	Y, r17
    d338:	ca 5c       	subi	r28, 0xCA	; 202
    d33a:	d0 40       	sbci	r29, 0x00	; 0
    d33c:	c5 53       	subi	r28, 0x35	; 53
    d33e:	df 4f       	sbci	r29, 0xFF	; 255
    d340:	18 83       	st	Y, r17
    d342:	cb 5c       	subi	r28, 0xCB	; 203
    d344:	d0 40       	sbci	r29, 0x00	; 0
    d346:	c4 53       	subi	r28, 0x34	; 52
    d348:	df 4f       	sbci	r29, 0xFF	; 255
    d34a:	18 83       	st	Y, r17
    d34c:	cc 5c       	subi	r28, 0xCC	; 204
    d34e:	d0 40       	sbci	r29, 0x00	; 0
    d350:	c3 53       	subi	r28, 0x33	; 51
    d352:	df 4f       	sbci	r29, 0xFF	; 255
    d354:	18 83       	st	Y, r17
    d356:	cd 5c       	subi	r28, 0xCD	; 205
    d358:	d0 40       	sbci	r29, 0x00	; 0
    d35a:	c2 53       	subi	r28, 0x32	; 50
    d35c:	df 4f       	sbci	r29, 0xFF	; 255
    d35e:	18 83       	st	Y, r17
    d360:	ce 5c       	subi	r28, 0xCE	; 206
    d362:	d0 40       	sbci	r29, 0x00	; 0
    d364:	c1 53       	subi	r28, 0x31	; 49
    d366:	df 4f       	sbci	r29, 0xFF	; 255
    d368:	18 83       	st	Y, r17
    d36a:	cf 5c       	subi	r28, 0xCF	; 207
    d36c:	d0 40       	sbci	r29, 0x00	; 0
    d36e:	c0 53       	subi	r28, 0x30	; 48
    d370:	df 4f       	sbci	r29, 0xFF	; 255
    d372:	18 83       	st	Y, r17
    d374:	c0 5d       	subi	r28, 0xD0	; 208
    d376:	d0 40       	sbci	r29, 0x00	; 0
    d378:	be 01       	movw	r22, r28
    d37a:	68 53       	subi	r22, 0x38	; 56
    d37c:	7f 4f       	sbci	r23, 0xFF	; 255
    d37e:	80 2f       	mov	r24, r16
    d380:	0e 94 b3 88 	call	0x11166	; 0x11166 <set_tds18s20(unsigned char, struct_DDS18s20*)>
    d384:	0f 5f       	subi	r16, 0xFF	; 255
    d386:	06 30       	cpi	r16, 0x06	; 6
    d388:	09 f0       	breq	.+2      	; 0xd38c <setup+0x6d0>
    d38a:	a9 cf       	rjmp	.-174    	; 0xd2de <setup+0x622>
    d38c:	c1 2c       	mov	r12, r1
    d38e:	ae e0       	ldi	r26, 0x0E	; 14
    d390:	ea 2e       	mov	r14, r26
    d392:	01 e1       	ldi	r16, 0x11	; 17
    d394:	2e e0       	ldi	r18, 0x0E	; 14
    d396:	4c e0       	ldi	r20, 0x0C	; 12
    d398:	64 ee       	ldi	r22, 0xE4	; 228
    d39a:	77 e0       	ldi	r23, 0x07	; 7
    d39c:	ce 01       	movw	r24, r28
    d39e:	8e 50       	subi	r24, 0x0E	; 14
    d3a0:	9f 4f       	sbci	r25, 0xFF	; 255
    d3a2:	0e 94 da c6 	call	0x18db4	; 0x18db4 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    d3a6:	ce 01       	movw	r24, r28
    d3a8:	8e 50       	subi	r24, 0x0E	; 14
    d3aa:	9f 4f       	sbci	r25, 0xFF	; 255
    d3ac:	0e 94 01 c7 	call	0x18e02	; 0x18e02 <RTC_DS1307::adjust(DateTime const&)>
    d3b0:	81 e0       	ldi	r24, 0x01	; 1
    d3b2:	0e 94 60 4e 	call	0x9cc0	; 0x9cc0 <time_set_offset(unsigned char)>
    d3b6:	82 e0       	ldi	r24, 0x02	; 2
    d3b8:	80 93 ef 0e 	sts	0x0EEF, r24	; 0x800eef <device>
    d3bc:	91 e0       	ldi	r25, 0x01	; 1
    d3be:	90 93 f0 0e 	sts	0x0EF0, r25	; 0x800ef0 <device+0x1>
    d3c2:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <device+0x2>
    d3c6:	20 91 48 0a 	lds	r18, 0x0A48	; 0x800a48 <dvanact>
    d3ca:	30 91 49 0a 	lds	r19, 0x0A49	; 0x800a49 <dvanact+0x1>
    d3ce:	36 95       	lsr	r19
    d3d0:	27 95       	ror	r18
    d3d2:	20 93 f2 0e 	sts	0x0EF2, r18	; 0x800ef2 <device+0x3>
    d3d6:	20 91 44 0a 	lds	r18, 0x0A44	; 0x800a44 <light_curr>
    d3da:	30 91 45 0a 	lds	r19, 0x0A45	; 0x800a45 <light_curr+0x1>
    d3de:	36 95       	lsr	r19
    d3e0:	27 95       	ror	r18
    d3e2:	20 93 f3 0e 	sts	0x0EF3, r18	; 0x800ef3 <device+0x4>
    d3e6:	20 91 46 0a 	lds	r18, 0x0A46	; 0x800a46 <proud>
    d3ea:	30 91 47 0a 	lds	r19, 0x0A47	; 0x800a47 <proud+0x1>
    d3ee:	36 95       	lsr	r19
    d3f0:	27 95       	ror	r18
    d3f2:	20 93 f4 0e 	sts	0x0EF4, r18	; 0x800ef4 <device+0x5>
    d3f6:	30 ec       	ldi	r19, 0xC0	; 192
    d3f8:	30 93 f5 0e 	sts	0x0EF5, r19	; 0x800ef5 <device+0x6>
    d3fc:	28 ea       	ldi	r18, 0xA8	; 168
    d3fe:	20 93 f6 0e 	sts	0x0EF6, r18	; 0x800ef6 <device+0x7>
    d402:	80 93 f7 0e 	sts	0x0EF7, r24	; 0x800ef7 <device+0x8>
    d406:	4f e6       	ldi	r20, 0x6F	; 111
    d408:	40 93 f8 0e 	sts	0x0EF8, r20	; 0x800ef8 <device+0x9>
    d40c:	10 93 f9 0e 	sts	0x0EF9, r17	; 0x800ef9 <device+0xa>
    d410:	10 93 fa 0e 	sts	0x0EFA, r17	; 0x800efa <device+0xb>
    d414:	10 93 fb 0e 	sts	0x0EFB, r17	; 0x800efb <device+0xc>
    d418:	10 92 fc 0e 	sts	0x0EFC, r1	; 0x800efc <device+0xd>
    d41c:	30 93 01 0f 	sts	0x0F01, r19	; 0x800f01 <device+0x12>
    d420:	20 93 02 0f 	sts	0x0F02, r18	; 0x800f02 <device+0x13>
    d424:	80 93 03 0f 	sts	0x0F03, r24	; 0x800f03 <device+0x14>
    d428:	90 93 04 0f 	sts	0x0F04, r25	; 0x800f04 <device+0x15>
    d42c:	30 93 fd 0e 	sts	0x0EFD, r19	; 0x800efd <device+0xe>
    d430:	20 93 fe 0e 	sts	0x0EFE, r18	; 0x800efe <device+0xf>
    d434:	80 93 ff 0e 	sts	0x0EFF, r24	; 0x800eff <device+0x10>
    d438:	90 93 00 0f 	sts	0x0F00, r25	; 0x800f00 <device+0x11>
    d43c:	30 93 0f 0f 	sts	0x0F0F, r19	; 0x800f0f <device+0x20>
    d440:	20 93 10 0f 	sts	0x0F10, r18	; 0x800f10 <device+0x21>
    d444:	80 93 11 0f 	sts	0x0F11, r24	; 0x800f11 <device+0x22>
    d448:	90 93 12 0f 	sts	0x0F12, r25	; 0x800f12 <device+0x23>
    d44c:	30 93 3d 0f 	sts	0x0F3D, r19	; 0x800f3d <device+0x4e>
    d450:	20 93 3e 0f 	sts	0x0F3E, r18	; 0x800f3e <device+0x4f>
    d454:	80 93 3f 0f 	sts	0x0F3F, r24	; 0x800f3f <device+0x50>
    d458:	90 93 40 0f 	sts	0x0F40, r25	; 0x800f40 <device+0x51>
    d45c:	8b e5       	ldi	r24, 0x5B	; 91
    d45e:	97 e0       	ldi	r25, 0x07	; 7
    d460:	90 93 14 0f 	sts	0x0F14, r25	; 0x800f14 <device+0x25>
    d464:	80 93 13 0f 	sts	0x0F13, r24	; 0x800f13 <device+0x24>
    d468:	65 e8       	ldi	r22, 0x85	; 133
    d46a:	75 e0       	ldi	r23, 0x05	; 5
    d46c:	85 e1       	ldi	r24, 0x15	; 21
    d46e:	9f e0       	ldi	r25, 0x0F	; 15
    d470:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    d474:	6b e8       	ldi	r22, 0x8B	; 139
    d476:	75 e0       	ldi	r23, 0x05	; 5
    d478:	89 e2       	ldi	r24, 0x29	; 41
    d47a:	9f e0       	ldi	r25, 0x0F	; 15
    d47c:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    d480:	0e 94 d3 81 	call	0x103a6	; 0x103a6 <save_setup_network()>
    d484:	6e e8       	ldi	r22, 0x8E	; 142
    d486:	75 e0       	ldi	r23, 0x05	; 5
    d488:	ce 01       	movw	r24, r28
    d48a:	88 57       	subi	r24, 0x78	; 120
    d48c:	9f 4f       	sbci	r25, 0xFF	; 255
    d48e:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    d492:	ce 01       	movw	r24, r28
    d494:	88 57       	subi	r24, 0x78	; 120
    d496:	9f 4f       	sbci	r25, 0xFF	; 255
    d498:	0e 94 8b 82 	call	0x10516	; 0x10516 <device_set_name(char*)>
    d49c:	ce 01       	movw	r24, r28
    d49e:	8e 50       	subi	r24, 0x0E	; 14
    d4a0:	9f 4f       	sbci	r25, 0xFF	; 255
    d4a2:	0e 94 72 82 	call	0x104e4	; 0x104e4 <device_get_name(char*)>
    d4a6:	10 93 2e 0a 	sts	0x0A2E, r17	; 0x800a2e <default_ring>
    d4aa:	8f ef       	ldi	r24, 0xFF	; 255
    d4ac:	0e 94 48 47 	call	0x8e90	; 0x8e90 <set_default_ring(unsigned char)>
    d4b0:	02 ce       	rjmp	.-1020   	; 0xd0b6 <setup+0x3fa>
    d4b2:	6c e2       	ldi	r22, 0x2C	; 44
    d4b4:	7a e5       	ldi	r23, 0x5A	; 90
    d4b6:	ce 01       	movw	r24, r28
    d4b8:	88 57       	subi	r24, 0x78	; 120
    d4ba:	9f 4f       	sbci	r25, 0xFF	; 255
    d4bc:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d4c0:	c1 2c       	mov	r12, r1
    d4c2:	ee 24       	eor	r14, r14
    d4c4:	ea 94       	dec	r14
    d4c6:	fe 2c       	mov	r15, r14
    d4c8:	00 ee       	ldi	r16, 0xE0	; 224
    d4ca:	17 e0       	ldi	r17, 0x07	; 7
    d4cc:	21 e0       	ldi	r18, 0x01	; 1
    d4ce:	46 e4       	ldi	r20, 0x46	; 70
    d4d0:	50 e0       	ldi	r21, 0x00	; 0
    d4d2:	6e e1       	ldi	r22, 0x1E	; 30
    d4d4:	70 e0       	ldi	r23, 0x00	; 0
    d4d6:	47 c0       	rjmp	.+142    	; 0xd566 <setup+0x8aa>
    d4d8:	c0 5d       	subi	r28, 0xD0	; 208
    d4da:	de 4f       	sbci	r29, 0xFE	; 254
    d4dc:	28 81       	ld	r18, Y
    d4de:	c0 53       	subi	r28, 0x30	; 48
    d4e0:	d1 40       	sbci	r29, 0x01	; 1
    d4e2:	23 30       	cpi	r18, 0x03	; 3
    d4e4:	09 f0       	breq	.+2      	; 0xd4e8 <setup+0x82c>
    d4e6:	5b c0       	rjmp	.+182    	; 0xd59e <setup+0x8e2>
    d4e8:	87 e6       	ldi	r24, 0x67	; 103
    d4ea:	9a e0       	ldi	r25, 0x0A	; 10
    d4ec:	0e 94 fb a9 	call	0x153f6	; 0x153f6 <SRAM_23LC::begin()>
    d4f0:	2b ea       	ldi	r18, 0xAB	; 171
    d4f2:	40 e0       	ldi	r20, 0x00	; 0
    d4f4:	50 e0       	ldi	r21, 0x00	; 0
    d4f6:	ba 01       	movw	r22, r20
    d4f8:	87 e6       	ldi	r24, 0x67	; 103
    d4fa:	9a e0       	ldi	r25, 0x0A	; 10
    d4fc:	0e 94 40 aa 	call	0x15480	; 0x15480 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    d500:	40 e0       	ldi	r20, 0x00	; 0
    d502:	50 e0       	ldi	r21, 0x00	; 0
    d504:	ba 01       	movw	r22, r20
    d506:	87 e6       	ldi	r24, 0x67	; 103
    d508:	9a e0       	ldi	r25, 0x0A	; 10
    d50a:	0e 94 1b aa 	call	0x15436	; 0x15436 <SRAM_23LC::readByte(unsigned long)>
    d50e:	6f e1       	ldi	r22, 0x1F	; 31
    d510:	7a e5       	ldi	r23, 0x5A	; 90
    d512:	8b 3a       	cpi	r24, 0xAB	; 171
    d514:	71 f5       	brne	.+92     	; 0xd572 <setup+0x8b6>
    d516:	ce 01       	movw	r24, r28
    d518:	88 57       	subi	r24, 0x78	; 120
    d51a:	9f 4f       	sbci	r25, 0xFF	; 255
    d51c:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d520:	66 e9       	ldi	r22, 0x96	; 150
    d522:	75 e0       	ldi	r23, 0x05	; 5
    d524:	ce 01       	movw	r24, r28
    d526:	88 57       	subi	r24, 0x78	; 120
    d528:	9f 4f       	sbci	r25, 0xFF	; 255
    d52a:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    d52e:	c1 2c       	mov	r12, r1
    d530:	ee 24       	eor	r14, r14
    d532:	ea 94       	dec	r14
    d534:	fe 2c       	mov	r15, r14
    d536:	00 ee       	ldi	r16, 0xE0	; 224
    d538:	17 e0       	ldi	r17, 0x07	; 7
    d53a:	21 e0       	ldi	r18, 0x01	; 1
    d53c:	40 e5       	ldi	r20, 0x50	; 80
    d53e:	50 e0       	ldi	r21, 0x00	; 0
    d540:	6e e1       	ldi	r22, 0x1E	; 30
    d542:	70 e0       	ldi	r23, 0x00	; 0
    d544:	ce 01       	movw	r24, r28
    d546:	88 57       	subi	r24, 0x78	; 120
    d548:	9f 4f       	sbci	r25, 0xFF	; 255
    d54a:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d54e:	6f e2       	ldi	r22, 0x2F	; 47
    d550:	76 e5       	ldi	r23, 0x56	; 86
    d552:	ce 01       	movw	r24, r28
    d554:	88 57       	subi	r24, 0x78	; 120
    d556:	9f 4f       	sbci	r25, 0xFF	; 255
    d558:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d55c:	21 e0       	ldi	r18, 0x01	; 1
    d55e:	40 e5       	ldi	r20, 0x50	; 80
    d560:	50 e0       	ldi	r21, 0x00	; 0
    d562:	62 ed       	ldi	r22, 0xD2	; 210
    d564:	70 e0       	ldi	r23, 0x00	; 0
    d566:	ce 01       	movw	r24, r28
    d568:	88 57       	subi	r24, 0x78	; 120
    d56a:	9f 4f       	sbci	r25, 0xFF	; 255
    d56c:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d570:	a2 cd       	rjmp	.-1212   	; 0xd0b6 <setup+0x3fa>
    d572:	ce 01       	movw	r24, r28
    d574:	88 57       	subi	r24, 0x78	; 120
    d576:	9f 4f       	sbci	r25, 0xFF	; 255
    d578:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d57c:	62 e3       	ldi	r22, 0x32	; 50
    d57e:	76 e5       	ldi	r23, 0x56	; 86
    d580:	ce 01       	movw	r24, r28
    d582:	88 57       	subi	r24, 0x78	; 120
    d584:	9f 4f       	sbci	r25, 0xFF	; 255
    d586:	0e 94 3b dc 	call	0x1b876	; 0x1b876 <strcat_P>
    d58a:	c1 2c       	mov	r12, r1
    d58c:	ee 24       	eor	r14, r14
    d58e:	ea 94       	dec	r14
    d590:	fe 2c       	mov	r15, r14
    d592:	00 e0       	ldi	r16, 0x00	; 0
    d594:	18 ef       	ldi	r17, 0xF8	; 248
    d596:	21 e0       	ldi	r18, 0x01	; 1
    d598:	40 e5       	ldi	r20, 0x50	; 80
    d59a:	50 e0       	ldi	r21, 0x00	; 0
    d59c:	9a cf       	rjmp	.-204    	; 0xd4d2 <setup+0x816>
    d59e:	c0 5d       	subi	r28, 0xD0	; 208
    d5a0:	de 4f       	sbci	r29, 0xFE	; 254
    d5a2:	68 81       	ld	r22, Y
    d5a4:	c0 53       	subi	r28, 0x30	; 48
    d5a6:	d1 40       	sbci	r29, 0x01	; 1
    d5a8:	64 30       	cpi	r22, 0x04	; 4
    d5aa:	09 f0       	breq	.+2      	; 0xd5ae <setup+0x8f2>
    d5ac:	94 c2       	rjmp	.+1320   	; 0xdad6 <setup+0xe1a>
    d5ae:	88 e5       	ldi	r24, 0x58	; 88
    d5b0:	9a e0       	ldi	r25, 0x0A	; 10
    d5b2:	0e 94 3f ab 	call	0x1567e	; 0x1567e <EEPROM_CAT25::begin()>
    d5b6:	2a eb       	ldi	r18, 0xBA	; 186
    d5b8:	40 e0       	ldi	r20, 0x00	; 0
    d5ba:	50 e0       	ldi	r21, 0x00	; 0
    d5bc:	ba 01       	movw	r22, r20
    d5be:	88 e5       	ldi	r24, 0x58	; 88
    d5c0:	9a e0       	ldi	r25, 0x0A	; 10
    d5c2:	0e 94 2c ac 	call	0x15858	; 0x15858 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)>
    d5c6:	40 e0       	ldi	r20, 0x00	; 0
    d5c8:	50 e0       	ldi	r21, 0x00	; 0
    d5ca:	ba 01       	movw	r22, r20
    d5cc:	88 e5       	ldi	r24, 0x58	; 88
    d5ce:	9a e0       	ldi	r25, 0x0A	; 10
    d5d0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <EEPROM_CAT25::readByte(unsigned long)>
    d5d4:	6f e0       	ldi	r22, 0x0F	; 15
    d5d6:	7a e5       	ldi	r23, 0x5A	; 90
    d5d8:	8a 3b       	cpi	r24, 0xBA	; 186
    d5da:	e9 f4       	brne	.+58     	; 0xd616 <setup+0x95a>
    d5dc:	ce 01       	movw	r24, r28
    d5de:	88 57       	subi	r24, 0x78	; 120
    d5e0:	9f 4f       	sbci	r25, 0xFF	; 255
    d5e2:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d5e6:	6f e2       	ldi	r22, 0x2F	; 47
    d5e8:	76 e5       	ldi	r23, 0x56	; 86
    d5ea:	ce 01       	movw	r24, r28
    d5ec:	88 57       	subi	r24, 0x78	; 120
    d5ee:	9f 4f       	sbci	r25, 0xFF	; 255
    d5f0:	0e 94 3b dc 	call	0x1b876	; 0x1b876 <strcat_P>
    d5f4:	c1 2c       	mov	r12, r1
    d5f6:	ee 24       	eor	r14, r14
    d5f8:	ea 94       	dec	r14
    d5fa:	fe 2c       	mov	r15, r14
    d5fc:	00 ee       	ldi	r16, 0xE0	; 224
    d5fe:	17 e0       	ldi	r17, 0x07	; 7
    d600:	21 e0       	ldi	r18, 0x01	; 1
    d602:	4a e5       	ldi	r20, 0x5A	; 90
    d604:	50 e0       	ldi	r21, 0x00	; 0
    d606:	6e e1       	ldi	r22, 0x1E	; 30
    d608:	70 e0       	ldi	r23, 0x00	; 0
    d60a:	ce 01       	movw	r24, r28
    d60c:	88 57       	subi	r24, 0x78	; 120
    d60e:	9f 4f       	sbci	r25, 0xFF	; 255
    d610:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d614:	4d c0       	rjmp	.+154    	; 0xd6b0 <setup+0x9f4>
    d616:	ce 01       	movw	r24, r28
    d618:	88 57       	subi	r24, 0x78	; 120
    d61a:	9f 4f       	sbci	r25, 0xFF	; 255
    d61c:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d620:	62 e3       	ldi	r22, 0x32	; 50
    d622:	76 e5       	ldi	r23, 0x56	; 86
    d624:	ce 01       	movw	r24, r28
    d626:	88 57       	subi	r24, 0x78	; 120
    d628:	9f 4f       	sbci	r25, 0xFF	; 255
    d62a:	0e 94 3b dc 	call	0x1b876	; 0x1b876 <strcat_P>
    d62e:	c1 2c       	mov	r12, r1
    d630:	ee 24       	eor	r14, r14
    d632:	ea 94       	dec	r14
    d634:	fe 2c       	mov	r15, r14
    d636:	00 e0       	ldi	r16, 0x00	; 0
    d638:	18 ef       	ldi	r17, 0xF8	; 248
    d63a:	e2 cf       	rjmp	.-60     	; 0xd600 <setup+0x944>
    d63c:	6a ee       	ldi	r22, 0xEA	; 234
    d63e:	7a e5       	ldi	r23, 0x5A	; 90
    d640:	ce 01       	movw	r24, r28
    d642:	88 57       	subi	r24, 0x78	; 120
    d644:	9f 4f       	sbci	r25, 0xFF	; 255
    d646:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d64a:	c1 2c       	mov	r12, r1
    d64c:	ee 24       	eor	r14, r14
    d64e:	ea 94       	dec	r14
    d650:	fe 2c       	mov	r15, r14
    d652:	00 ee       	ldi	r16, 0xE0	; 224
    d654:	17 e0       	ldi	r17, 0x07	; 7
    d656:	21 e0       	ldi	r18, 0x01	; 1
    d658:	44 e6       	ldi	r20, 0x64	; 100
    d65a:	50 e0       	ldi	r21, 0x00	; 0
    d65c:	6e e1       	ldi	r22, 0x1E	; 30
    d65e:	70 e0       	ldi	r23, 0x00	; 0
    d660:	ce 01       	movw	r24, r28
    d662:	88 57       	subi	r24, 0x78	; 120
    d664:	9f 4f       	sbci	r25, 0xFF	; 255
    d666:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d66a:	0e 94 2c 81 	call	0x10258	; 0x10258 <load_setup_network()>
    d66e:	45 e9       	ldi	r20, 0x95	; 149
    d670:	5f e0       	ldi	r21, 0x0F	; 15
    d672:	26 e0       	ldi	r18, 0x06	; 6
    d674:	90 e0       	ldi	r25, 0x00	; 0
    d676:	80 e0       	ldi	r24, 0x00	; 0
    d678:	fc 01       	movw	r30, r24
    d67a:	ee 0f       	add	r30, r30
    d67c:	ff 1f       	adc	r31, r31
    d67e:	e4 0f       	add	r30, r20
    d680:	f5 1f       	adc	r31, r21
    d682:	60 e2       	ldi	r22, 0x20	; 32
    d684:	7e e4       	ldi	r23, 0x4E	; 78
    d686:	70 87       	std	Z+8, r23	; 0x08
    d688:	67 83       	std	Z+7, r22	; 0x07
    d68a:	01 96       	adiw	r24, 0x01	; 1
    d68c:	8a 30       	cpi	r24, 0x0A	; 10
    d68e:	91 05       	cpc	r25, r1
    d690:	99 f7       	brne	.-26     	; 0xd678 <setup+0x9bc>
    d692:	21 50       	subi	r18, 0x01	; 1
    d694:	42 5e       	subi	r20, 0xE2	; 226
    d696:	5f 4f       	sbci	r21, 0xFF	; 255
    d698:	21 11       	cpse	r18, r1
    d69a:	ec cf       	rjmp	.-40     	; 0xd674 <setup+0x9b8>
    d69c:	10 92 4f 0a 	sts	0x0A4F, r1	; 0x800a4f <last_output_update>
    d6a0:	10 92 50 0a 	sts	0x0A50, r1	; 0x800a50 <last_output_update+0x1>
    d6a4:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <last_output_update+0x2>
    d6a8:	10 92 52 0a 	sts	0x0A52, r1	; 0x800a52 <last_output_update+0x3>
    d6ac:	10 92 53 0a 	sts	0x0A53, r1	; 0x800a53 <last_output_update+0x4>
    d6b0:	c0 5d       	subi	r28, 0xD0	; 208
    d6b2:	de 4f       	sbci	r29, 0xFE	; 254
    d6b4:	28 81       	ld	r18, Y
    d6b6:	c0 53       	subi	r28, 0x30	; 48
    d6b8:	d1 40       	sbci	r29, 0x01	; 1
    d6ba:	2f 5f       	subi	r18, 0xFF	; 255
    d6bc:	c0 5d       	subi	r28, 0xD0	; 208
    d6be:	de 4f       	sbci	r29, 0xFE	; 254
    d6c0:	28 83       	st	Y, r18
    d6c2:	c0 53       	subi	r28, 0x30	; 48
    d6c4:	d1 40       	sbci	r29, 0x01	; 1
    d6c6:	6f e0       	ldi	r22, 0x0F	; 15
    d6c8:	66 0e       	add	r6, r22
    d6ca:	71 1c       	adc	r7, r1
    d6cc:	20 31       	cpi	r18, 0x10	; 16
    d6ce:	09 f0       	breq	.+2      	; 0xd6d2 <setup+0xa16>
    d6d0:	aa cb       	rjmp	.-2220   	; 0xce26 <setup+0x16a>
    d6d2:	64 ef       	ldi	r22, 0xF4	; 244
    d6d4:	71 e0       	ldi	r23, 0x01	; 1
    d6d6:	80 e0       	ldi	r24, 0x00	; 0
    d6d8:	90 e0       	ldi	r25, 0x00	; 0
    d6da:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
    d6de:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <MenuPrepareStyle()>
    d6e2:	81 e0       	ldi	r24, 0x01	; 1
    d6e4:	0e 94 31 55 	call	0xaa62	; 0xaa62 <draw_menu(bool)>
    d6e8:	81 e0       	ldi	r24, 0x01	; 1
    d6ea:	80 93 43 0a 	sts	0x0A43, r24	; 0x800a43 <a2d_run_now>
    d6ee:	ce 5c       	subi	r28, 0xCE	; 206
    d6f0:	de 4f       	sbci	r29, 0xFE	; 254
    d6f2:	0f b6       	in	r0, 0x3f	; 63
    d6f4:	f8 94       	cli
    d6f6:	de bf       	out	0x3e, r29	; 62
    d6f8:	0f be       	out	0x3f, r0	; 63
    d6fa:	cd bf       	out	0x3d, r28	; 61
    d6fc:	df 91       	pop	r29
    d6fe:	cf 91       	pop	r28
    d700:	1f 91       	pop	r17
    d702:	0f 91       	pop	r16
    d704:	ff 90       	pop	r15
    d706:	ef 90       	pop	r14
    d708:	df 90       	pop	r13
    d70a:	cf 90       	pop	r12
    d70c:	bf 90       	pop	r11
    d70e:	af 90       	pop	r10
    d710:	9f 90       	pop	r9
    d712:	8f 90       	pop	r8
    d714:	7f 90       	pop	r7
    d716:	6f 90       	pop	r6
    d718:	5f 90       	pop	r5
    d71a:	4f 90       	pop	r4
    d71c:	3f 90       	pop	r3
    d71e:	2f 90       	pop	r2
    d720:	08 95       	ret
    d722:	6c ef       	ldi	r22, 0xFC	; 252
    d724:	7a e5       	ldi	r23, 0x5A	; 90
    d726:	ce 01       	movw	r24, r28
    d728:	88 57       	subi	r24, 0x78	; 120
    d72a:	9f 4f       	sbci	r25, 0xFF	; 255
    d72c:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d730:	c1 2c       	mov	r12, r1
    d732:	ee 24       	eor	r14, r14
    d734:	ea 94       	dec	r14
    d736:	fe 2c       	mov	r15, r14
    d738:	00 ee       	ldi	r16, 0xE0	; 224
    d73a:	17 e0       	ldi	r17, 0x07	; 7
    d73c:	21 e0       	ldi	r18, 0x01	; 1
    d73e:	4e e6       	ldi	r20, 0x6E	; 110
    d740:	50 e0       	ldi	r21, 0x00	; 0
    d742:	6e e1       	ldi	r22, 0x1E	; 30
    d744:	70 e0       	ldi	r23, 0x00	; 0
    d746:	ce 01       	movw	r24, r28
    d748:	88 57       	subi	r24, 0x78	; 120
    d74a:	9f 4f       	sbci	r25, 0xFF	; 255
    d74c:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d750:	85 ea       	ldi	r24, 0xA5	; 165
    d752:	9b e0       	ldi	r25, 0x0B	; 11
    d754:	0e 94 32 95 	call	0x12a64	; 0x12a64 <LCDWIKI_GUI::Get_Display_Height() const>
    d758:	8c 01       	movw	r16, r24
    d75a:	85 ea       	ldi	r24, 0xA5	; 165
    d75c:	9b e0       	ldi	r25, 0x0B	; 11
    d75e:	0e 94 d1 94 	call	0x129a2	; 0x129a2 <LCDWIKI_GUI::Get_Display_Width() const>
    d762:	7c 01       	movw	r14, r24
    d764:	85 ea       	ldi	r24, 0xA5	; 165
    d766:	9b e0       	ldi	r25, 0x0B	; 11
    d768:	0e 94 db a3 	call	0x147b6	; 0x147b6 <LCDWIKI_KBV::Get_Rotation() const>
    d76c:	98 01       	movw	r18, r16
    d76e:	a7 01       	movw	r20, r14
    d770:	68 2f       	mov	r22, r24
    d772:	83 e8       	ldi	r24, 0x83	; 131
    d774:	9b e0       	ldi	r25, 0x0B	; 11
    d776:	0e 94 49 a6 	call	0x14c92	; 0x14c92 <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>
    d77a:	1b e0       	ldi	r17, 0x0B	; 11
    d77c:	60 e0       	ldi	r22, 0x00	; 0
    d77e:	88 e0       	ldi	r24, 0x08	; 8
    d780:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
    d784:	61 2f       	mov	r22, r17
    d786:	83 e8       	ldi	r24, 0x83	; 131
    d788:	9b e0       	ldi	r25, 0x0B	; 11
    d78a:	0e 94 2c a6 	call	0x14c58	; 0x14c58 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
    d78e:	64 e6       	ldi	r22, 0x64	; 100
    d790:	70 e0       	ldi	r23, 0x00	; 0
    d792:	80 e0       	ldi	r24, 0x00	; 0
    d794:	90 e0       	ldi	r25, 0x00	; 0
    d796:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
    d79a:	61 e0       	ldi	r22, 0x01	; 1
    d79c:	88 e0       	ldi	r24, 0x08	; 8
    d79e:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
    d7a2:	64 e6       	ldi	r22, 0x64	; 100
    d7a4:	70 e0       	ldi	r23, 0x00	; 0
    d7a6:	80 e0       	ldi	r24, 0x00	; 0
    d7a8:	90 e0       	ldi	r25, 0x00	; 0
    d7aa:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
    d7ae:	15 5f       	subi	r17, 0xF5	; 245
    d7b0:	18 35       	cpi	r17, 0x58	; 88
    d7b2:	21 f7       	brne	.-56     	; 0xd77c <setup+0xac0>
    d7b4:	62 e3       	ldi	r22, 0x32	; 50
    d7b6:	83 e8       	ldi	r24, 0x83	; 131
    d7b8:	9b e0       	ldi	r25, 0x0B	; 11
    d7ba:	0e 94 2c a6 	call	0x14c58	; 0x14c58 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
    d7be:	78 cf       	rjmp	.-272    	; 0xd6b0 <setup+0x9f4>
    d7c0:	62 e3       	ldi	r22, 0x32	; 50
    d7c2:	76 e5       	ldi	r23, 0x56	; 86
    d7c4:	ce 01       	movw	r24, r28
    d7c6:	88 57       	subi	r24, 0x78	; 120
    d7c8:	9f 4f       	sbci	r25, 0xFF	; 255
    d7ca:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d7ce:	c1 2c       	mov	r12, r1
    d7d0:	ee 24       	eor	r14, r14
    d7d2:	ea 94       	dec	r14
    d7d4:	fe 2c       	mov	r15, r14
    d7d6:	00 e0       	ldi	r16, 0x00	; 0
    d7d8:	18 ef       	ldi	r17, 0xF8	; 248
    d7da:	21 e0       	ldi	r18, 0x01	; 1
    d7dc:	48 e7       	ldi	r20, 0x78	; 120
    d7de:	50 e0       	ldi	r21, 0x00	; 0
    d7e0:	60 ea       	ldi	r22, 0xA0	; 160
    d7e2:	70 e0       	ldi	r23, 0x00	; 0
    d7e4:	ce 01       	movw	r24, r28
    d7e6:	88 57       	subi	r24, 0x78	; 120
    d7e8:	9f 4f       	sbci	r25, 0xFF	; 255
    d7ea:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d7ee:	82 e0       	ldi	r24, 0x02	; 2
    d7f0:	0e 94 7e 4c 	call	0x98fc	; 0x98fc <selftest_set_0(unsigned char)>
    d7f4:	5d cf       	rjmp	.-326    	; 0xd6b0 <setup+0x9f4>
    d7f6:	c0 5d       	subi	r28, 0xD0	; 208
    d7f8:	de 4f       	sbci	r29, 0xFE	; 254
    d7fa:	88 81       	ld	r24, Y
    d7fc:	c0 53       	subi	r28, 0x30	; 48
    d7fe:	d1 40       	sbci	r29, 0x01	; 1
    d800:	88 30       	cpi	r24, 0x08	; 8
    d802:	c1 f5       	brne	.+112    	; 0xd874 <setup+0xbb8>
    d804:	6e ec       	ldi	r22, 0xCE	; 206
    d806:	7a e5       	ldi	r23, 0x5A	; 90
    d808:	ce 01       	movw	r24, r28
    d80a:	88 57       	subi	r24, 0x78	; 120
    d80c:	9f 4f       	sbci	r25, 0xFF	; 255
    d80e:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d812:	c1 2c       	mov	r12, r1
    d814:	ee 24       	eor	r14, r14
    d816:	ea 94       	dec	r14
    d818:	fe 2c       	mov	r15, r14
    d81a:	00 ee       	ldi	r16, 0xE0	; 224
    d81c:	17 e0       	ldi	r17, 0x07	; 7
    d81e:	21 e0       	ldi	r18, 0x01	; 1
    d820:	42 e8       	ldi	r20, 0x82	; 130
    d822:	50 e0       	ldi	r21, 0x00	; 0
    d824:	6e e1       	ldi	r22, 0x1E	; 30
    d826:	70 e0       	ldi	r23, 0x00	; 0
    d828:	ce 01       	movw	r24, r28
    d82a:	88 57       	subi	r24, 0x78	; 120
    d82c:	9f 4f       	sbci	r25, 0xFF	; 255
    d82e:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d832:	10 92 94 0f 	sts	0x0F94, r1	; 0x800f94 <Global_HWwirenum>
    d836:	80 e0       	ldi	r24, 0x00	; 0
    d838:	0e 94 3a 8b 	call	0x11674	; 0x11674 <one_hw_search_device(unsigned char)>
    d83c:	0e 94 f4 89 	call	0x113e8	; 0x113e8 <tds_update_associate()>
    d840:	60 ea       	ldi	r22, 0xA0	; 160
    d842:	75 e0       	ldi	r23, 0x05	; 5
    d844:	ce 01       	movw	r24, r28
    d846:	88 57       	subi	r24, 0x78	; 120
    d848:	9f 4f       	sbci	r25, 0xFF	; 255
    d84a:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
    d84e:	80 91 94 0f 	lds	r24, 0x0F94	; 0x800f94 <Global_HWwirenum>
itoa():
    d852:	4a e0       	ldi	r20, 0x0A	; 10
    d854:	b5 01       	movw	r22, r10
    d856:	90 e0       	ldi	r25, 0x00	; 0
    d858:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
setup():
    d85c:	b5 01       	movw	r22, r10
    d85e:	ce 01       	movw	r24, r28
    d860:	88 57       	subi	r24, 0x78	; 120
    d862:	9f 4f       	sbci	r25, 0xFF	; 255
    d864:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
    d868:	21 e0       	ldi	r18, 0x01	; 1
    d86a:	42 e8       	ldi	r20, 0x82	; 130
    d86c:	50 e0       	ldi	r21, 0x00	; 0
    d86e:	60 ea       	ldi	r22, 0xA0	; 160
    d870:	70 e0       	ldi	r23, 0x00	; 0
    d872:	cb ce       	rjmp	.-618    	; 0xd60a <setup+0x94e>
    d874:	c0 5d       	subi	r28, 0xD0	; 208
    d876:	de 4f       	sbci	r29, 0xFE	; 254
    d878:	98 81       	ld	r25, Y
    d87a:	c0 53       	subi	r28, 0x30	; 48
    d87c:	d1 40       	sbci	r29, 0x01	; 1
    d87e:	99 30       	cpi	r25, 0x09	; 9
    d880:	09 f0       	breq	.+2      	; 0xd884 <setup+0xbc8>
    d882:	85 c1       	rjmp	.+778    	; 0xdb8e <setup+0xed2>
    d884:	61 e0       	ldi	r22, 0x01	; 1
    d886:	86 e0       	ldi	r24, 0x06	; 6
    d888:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
    d88c:	6a e0       	ldi	r22, 0x0A	; 10
    d88e:	70 e0       	ldi	r23, 0x00	; 0
    d890:	80 e0       	ldi	r24, 0x00	; 0
    d892:	90 e0       	ldi	r25, 0x00	; 0
    d894:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
    d898:	60 e0       	ldi	r22, 0x00	; 0
    d89a:	86 e0       	ldi	r24, 0x06	; 6
    d89c:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
    d8a0:	6a e0       	ldi	r22, 0x0A	; 10
    d8a2:	70 e0       	ldi	r23, 0x00	; 0
    d8a4:	80 e0       	ldi	r24, 0x00	; 0
    d8a6:	90 e0       	ldi	r25, 0x00	; 0
    d8a8:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
    d8ac:	61 e0       	ldi	r22, 0x01	; 1
    d8ae:	86 e0       	ldi	r24, 0x06	; 6
    d8b0:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
    d8b4:	64 e6       	ldi	r22, 0x64	; 100
    d8b6:	70 e0       	ldi	r23, 0x00	; 0
    d8b8:	80 e0       	ldi	r24, 0x00	; 0
    d8ba:	90 e0       	ldi	r25, 0x00	; 0
    d8bc:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
_ZN13EthernetClass4initEh():
    d8c0:	8f e0       	ldi	r24, 0x0F	; 15
    d8c2:	80 93 f6 10 	sts	0x10F6, r24	; 0x8010f6 <Ethernet+0xc>
setup():
    d8c6:	69 ef       	ldi	r22, 0xF9	; 249
    d8c8:	7e e0       	ldi	r23, 0x0E	; 14
    d8ca:	ce 01       	movw	r24, r28
    d8cc:	8e 50       	subi	r24, 0x0E	; 14
    d8ce:	9f 4f       	sbci	r25, 0xFF	; 255
    d8d0:	0e 94 aa d4 	call	0x1a954	; 0x1a954 <IPAddress::IPAddress(unsigned char const*)>
    d8d4:	61 e0       	ldi	r22, 0x01	; 1
    d8d6:	7f e0       	ldi	r23, 0x0F	; 15
    d8d8:	ce 01       	movw	r24, r28
    d8da:	84 5e       	subi	r24, 0xE4	; 228
    d8dc:	9e 4f       	sbci	r25, 0xFE	; 254
    d8de:	0e 94 aa d4 	call	0x1a954	; 0x1a954 <IPAddress::IPAddress(unsigned char const*)>
    d8e2:	6d ef       	ldi	r22, 0xFD	; 253
    d8e4:	7e e0       	ldi	r23, 0x0E	; 14
    d8e6:	ce 01       	movw	r24, r28
    d8e8:	8e 5d       	subi	r24, 0xDE	; 222
    d8ea:	9e 4f       	sbci	r25, 0xFE	; 254
    d8ec:	0e 94 aa d4 	call	0x1a954	; 0x1a954 <IPAddress::IPAddress(unsigned char const*)>
    d8f0:	65 ef       	ldi	r22, 0xF5	; 245
    d8f2:	7e e0       	ldi	r23, 0x0E	; 14
    d8f4:	ce 01       	movw	r24, r28
    d8f6:	88 5d       	subi	r24, 0xD8	; 216
    d8f8:	9e 4f       	sbci	r25, 0xFE	; 254
    d8fa:	0e 94 aa d4 	call	0x1a954	; 0x1a954 <IPAddress::IPAddress(unsigned char const*)>
    d8fe:	be 01       	movw	r22, r28
    d900:	6e 50       	subi	r22, 0x0E	; 14
    d902:	7f 4f       	sbci	r23, 0xFF	; 255
    d904:	7b 01       	movw	r14, r22
    d906:	8e 01       	movw	r16, r28
    d908:	04 5e       	subi	r16, 0xE4	; 228
    d90a:	1e 4f       	sbci	r17, 0xFE	; 254
    d90c:	9e 01       	movw	r18, r28
    d90e:	2e 5d       	subi	r18, 0xDE	; 222
    d910:	3e 4f       	sbci	r19, 0xFE	; 254
    d912:	ae 01       	movw	r20, r28
    d914:	48 5d       	subi	r20, 0xD8	; 216
    d916:	5e 4f       	sbci	r21, 0xFE	; 254
    d918:	6f ee       	ldi	r22, 0xEF	; 239
    d91a:	7e e0       	ldi	r23, 0x0E	; 14
    d91c:	8a ee       	ldi	r24, 0xEA	; 234
    d91e:	90 e1       	ldi	r25, 0x10	; 16
    d920:	0e 94 93 af 	call	0x15f26	; 0x15f26 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)>
    d924:	6c ea       	ldi	r22, 0xAC	; 172
    d926:	7a e5       	ldi	r23, 0x5A	; 90
    d928:	ce 01       	movw	r24, r28
    d92a:	88 57       	subi	r24, 0x78	; 120
    d92c:	9f 4f       	sbci	r25, 0xFF	; 255
    d92e:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d932:	c1 2c       	mov	r12, r1
    d934:	ee 24       	eor	r14, r14
    d936:	ea 94       	dec	r14
    d938:	fe 2c       	mov	r15, r14
    d93a:	00 ee       	ldi	r16, 0xE0	; 224
    d93c:	17 e0       	ldi	r17, 0x07	; 7
    d93e:	21 e0       	ldi	r18, 0x01	; 1
    d940:	4c e8       	ldi	r20, 0x8C	; 140
    d942:	50 e0       	ldi	r21, 0x00	; 0
    d944:	6e e1       	ldi	r22, 0x1E	; 30
    d946:	70 e0       	ldi	r23, 0x00	; 0
    d948:	ce 01       	movw	r24, r28
    d94a:	88 57       	subi	r24, 0x78	; 120
    d94c:	9f 4f       	sbci	r25, 0xFF	; 255
    d94e:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d952:	64 e6       	ldi	r22, 0x64	; 100
    d954:	70 e0       	ldi	r23, 0x00	; 0
    d956:	80 e0       	ldi	r24, 0x00	; 0
    d958:	90 e0       	ldi	r25, 0x00	; 0
    d95a:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
    d95e:	a8 ce       	rjmp	.-688    	; 0xd6b0 <setup+0x9f4>
    d960:	85 e0       	ldi	r24, 0x05	; 5
    d962:	0e 94 7e 4c 	call	0x98fc	; 0x98fc <selftest_set_0(unsigned char)>
    d966:	4a c1       	rjmp	.+660    	; 0xdbfc <setup+0xf40>
    d968:	6f e2       	ldi	r22, 0x2F	; 47
    d96a:	76 e5       	ldi	r23, 0x56	; 86
    d96c:	ce 01       	movw	r24, r28
    d96e:	88 57       	subi	r24, 0x78	; 120
    d970:	9f 4f       	sbci	r25, 0xFF	; 255
    d972:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d976:	c1 2c       	mov	r12, r1
    d978:	ee 24       	eor	r14, r14
    d97a:	ea 94       	dec	r14
    d97c:	fe 2c       	mov	r15, r14
    d97e:	00 ee       	ldi	r16, 0xE0	; 224
    d980:	17 e0       	ldi	r17, 0x07	; 7
    d982:	73 c1       	rjmp	.+742    	; 0xdc6a <setup+0xfae>
    d984:	c0 5d       	subi	r28, 0xD0	; 208
    d986:	de 4f       	sbci	r29, 0xFE	; 254
    d988:	68 81       	ld	r22, Y
    d98a:	c0 53       	subi	r28, 0x30	; 48
    d98c:	d1 40       	sbci	r29, 0x01	; 1
    d98e:	6b 30       	cpi	r22, 0x0B	; 11
    d990:	89 f4       	brne	.+34     	; 0xd9b4 <setup+0xcf8>
    d992:	6c e8       	ldi	r22, 0x8C	; 140
    d994:	7a e5       	ldi	r23, 0x5A	; 90
    d996:	ce 01       	movw	r24, r28
    d998:	88 57       	subi	r24, 0x78	; 120
    d99a:	9f 4f       	sbci	r25, 0xFF	; 255
    d99c:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d9a0:	c1 2c       	mov	r12, r1
    d9a2:	ee 24       	eor	r14, r14
    d9a4:	ea 94       	dec	r14
    d9a6:	fe 2c       	mov	r15, r14
    d9a8:	00 ee       	ldi	r16, 0xE0	; 224
    d9aa:	17 e0       	ldi	r17, 0x07	; 7
    d9ac:	21 e0       	ldi	r18, 0x01	; 1
    d9ae:	40 ea       	ldi	r20, 0xA0	; 160
    d9b0:	50 e0       	ldi	r21, 0x00	; 0
    d9b2:	29 ce       	rjmp	.-942    	; 0xd606 <setup+0x94a>
    d9b4:	c0 5d       	subi	r28, 0xD0	; 208
    d9b6:	de 4f       	sbci	r29, 0xFE	; 254
    d9b8:	78 81       	ld	r23, Y
    d9ba:	c0 53       	subi	r28, 0x30	; 48
    d9bc:	d1 40       	sbci	r29, 0x01	; 1
    d9be:	7c 30       	cpi	r23, 0x0C	; 12
    d9c0:	09 f0       	breq	.+2      	; 0xd9c4 <setup+0xd08>
    d9c2:	57 c1       	rjmp	.+686    	; 0xdc72 <setup+0xfb6>
    d9c4:	6f e7       	ldi	r22, 0x7F	; 127
    d9c6:	7a e5       	ldi	r23, 0x5A	; 90
    d9c8:	ce 01       	movw	r24, r28
    d9ca:	88 57       	subi	r24, 0x78	; 120
    d9cc:	9f 4f       	sbci	r25, 0xFF	; 255
    d9ce:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    d9d2:	c1 2c       	mov	r12, r1
    d9d4:	ee 24       	eor	r14, r14
    d9d6:	ea 94       	dec	r14
    d9d8:	fe 2c       	mov	r15, r14
    d9da:	00 ee       	ldi	r16, 0xE0	; 224
    d9dc:	17 e0       	ldi	r17, 0x07	; 7
    d9de:	21 e0       	ldi	r18, 0x01	; 1
    d9e0:	4a ea       	ldi	r20, 0xAA	; 170
    d9e2:	50 e0       	ldi	r21, 0x00	; 0
    d9e4:	6e e1       	ldi	r22, 0x1E	; 30
    d9e6:	70 e0       	ldi	r23, 0x00	; 0
    d9e8:	ce 01       	movw	r24, r28
    d9ea:	88 57       	subi	r24, 0x78	; 120
    d9ec:	9f 4f       	sbci	r25, 0xFF	; 255
    d9ee:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d9f2:	82 e0       	ldi	r24, 0x02	; 2
    d9f4:	80 93 49 0f 	sts	0x0F49, r24	; 0x800f49 <scan_rf_net_enable>
    d9f8:	81 ef       	ldi	r24, 0xF1	; 241
    d9fa:	9b e0       	ldi	r25, 0x0B	; 11
    d9fc:	0e 94 da c4 	call	0x189b4	; 0x189b4 <RF24::begin()>
    da00:	57 ce       	rjmp	.-850    	; 0xd6b0 <setup+0x9f4>
    da02:	6f e2       	ldi	r22, 0x2F	; 47
    da04:	76 e5       	ldi	r23, 0x56	; 86
    da06:	ce 01       	movw	r24, r28
    da08:	88 57       	subi	r24, 0x78	; 120
    da0a:	9f 4f       	sbci	r25, 0xFF	; 255
    da0c:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    da10:	c1 2c       	mov	r12, r1
    da12:	ee 24       	eor	r14, r14
    da14:	ea 94       	dec	r14
    da16:	fe 2c       	mov	r15, r14
    da18:	00 ee       	ldi	r16, 0xE0	; 224
    da1a:	17 e0       	ldi	r17, 0x07	; 7
    da1c:	21 e0       	ldi	r18, 0x01	; 1
    da1e:	4e eb       	ldi	r20, 0xBE	; 190
    da20:	50 e0       	ldi	r21, 0x00	; 0
    da22:	60 ea       	ldi	r22, 0xA0	; 160
    da24:	70 e0       	ldi	r23, 0x00	; 0
    da26:	ce 01       	movw	r24, r28
    da28:	88 57       	subi	r24, 0x78	; 120
    da2a:	9f 4f       	sbci	r25, 0xFF	; 255
    da2c:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    da30:	81 e0       	ldi	r24, 0x01	; 1
    da32:	aa c0       	rjmp	.+340    	; 0xdb88 <setup+0xecc>
    da34:	c0 5d       	subi	r28, 0xD0	; 208
    da36:	de 4f       	sbci	r29, 0xFE	; 254
    da38:	98 81       	ld	r25, Y
    da3a:	c0 53       	subi	r28, 0x30	; 48
    da3c:	d1 40       	sbci	r29, 0x01	; 1
    da3e:	9f 30       	cpi	r25, 0x0F	; 15
    da40:	09 f0       	breq	.+2      	; 0xda44 <setup+0xd88>
    da42:	36 ce       	rjmp	.-916    	; 0xd6b0 <setup+0x9f4>
    da44:	6a e4       	ldi	r22, 0x4A	; 74
    da46:	7a e5       	ldi	r23, 0x5A	; 90
    da48:	ce 01       	movw	r24, r28
    da4a:	88 57       	subi	r24, 0x78	; 120
    da4c:	9f 4f       	sbci	r25, 0xFF	; 255
    da4e:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    da52:	c1 2c       	mov	r12, r1
    da54:	ee 24       	eor	r14, r14
    da56:	ea 94       	dec	r14
    da58:	fe 2c       	mov	r15, r14
    da5a:	00 ee       	ldi	r16, 0xE0	; 224
    da5c:	17 e0       	ldi	r17, 0x07	; 7
    da5e:	21 e0       	ldi	r18, 0x01	; 1
    da60:	48 ec       	ldi	r20, 0xC8	; 200
    da62:	50 e0       	ldi	r21, 0x00	; 0
    da64:	6e e1       	ldi	r22, 0x1E	; 30
    da66:	70 e0       	ldi	r23, 0x00	; 0
    da68:	ce 01       	movw	r24, r28
    da6a:	88 57       	subi	r24, 0x78	; 120
    da6c:	9f 4f       	sbci	r25, 0xFF	; 255
    da6e:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    da72:	85 e5       	ldi	r24, 0x55	; 85
    da74:	9e e0       	ldi	r25, 0x0E	; 14
    da76:	0e 94 71 c7 	call	0x18ee2	; 0x18ee2 <RTC_DS1307::isrunning()>
    da7a:	88 23       	and	r24, r24
    da7c:	99 f0       	breq	.+38     	; 0xdaa4 <setup+0xde8>
    da7e:	6f e2       	ldi	r22, 0x2F	; 47
    da80:	76 e5       	ldi	r23, 0x56	; 86
    da82:	ce 01       	movw	r24, r28
    da84:	88 57       	subi	r24, 0x78	; 120
    da86:	9f 4f       	sbci	r25, 0xFF	; 255
    da88:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    da8c:	21 e0       	ldi	r18, 0x01	; 1
    da8e:	48 ec       	ldi	r20, 0xC8	; 200
    da90:	50 e0       	ldi	r21, 0x00	; 0
    da92:	60 ea       	ldi	r22, 0xA0	; 160
    da94:	70 e0       	ldi	r23, 0x00	; 0
    da96:	ce 01       	movw	r24, r28
    da98:	88 57       	subi	r24, 0x78	; 120
    da9a:	9f 4f       	sbci	r25, 0xFF	; 255
    da9c:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    daa0:	80 e0       	ldi	r24, 0x00	; 0
    daa2:	72 c0       	rjmp	.+228    	; 0xdb88 <setup+0xecc>
    daa4:	62 e3       	ldi	r22, 0x32	; 50
    daa6:	76 e5       	ldi	r23, 0x56	; 86
    daa8:	ce 01       	movw	r24, r28
    daaa:	88 57       	subi	r24, 0x78	; 120
    daac:	9f 4f       	sbci	r25, 0xFF	; 255
    daae:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    dab2:	c1 2c       	mov	r12, r1
    dab4:	ee 24       	eor	r14, r14
    dab6:	ea 94       	dec	r14
    dab8:	fe 2c       	mov	r15, r14
    daba:	00 e0       	ldi	r16, 0x00	; 0
    dabc:	18 ef       	ldi	r17, 0xF8	; 248
    dabe:	21 e0       	ldi	r18, 0x01	; 1
    dac0:	48 ec       	ldi	r20, 0xC8	; 200
    dac2:	50 e0       	ldi	r21, 0x00	; 0
    dac4:	60 ea       	ldi	r22, 0xA0	; 160
    dac6:	70 e0       	ldi	r23, 0x00	; 0
    dac8:	ce 01       	movw	r24, r28
    daca:	88 57       	subi	r24, 0x78	; 120
    dacc:	9f 4f       	sbci	r25, 0xFF	; 255
    dace:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    dad2:	80 e0       	ldi	r24, 0x00	; 0
    dad4:	8d ce       	rjmp	.-742    	; 0xd7f0 <setup+0xb34>
    dad6:	c0 5d       	subi	r28, 0xD0	; 208
    dad8:	de 4f       	sbci	r29, 0xFE	; 254
    dada:	78 81       	ld	r23, Y
    dadc:	c0 53       	subi	r28, 0x30	; 48
    dade:	d1 40       	sbci	r29, 0x01	; 1
    dae0:	75 30       	cpi	r23, 0x05	; 5
    dae2:	09 f4       	brne	.+2      	; 0xdae6 <setup+0xe2a>
    dae4:	ab cd       	rjmp	.-1194   	; 0xd63c <setup+0x980>
    dae6:	76 30       	cpi	r23, 0x06	; 6
    dae8:	09 f4       	brne	.+2      	; 0xdaec <setup+0xe30>
    daea:	1b ce       	rjmp	.-970    	; 0xd722 <setup+0xa66>
    daec:	77 30       	cpi	r23, 0x07	; 7
    daee:	09 f0       	breq	.+2      	; 0xdaf2 <setup+0xe36>
    daf0:	82 ce       	rjmp	.-764    	; 0xd7f6 <setup+0xb3a>
    daf2:	6b ed       	ldi	r22, 0xDB	; 219
    daf4:	7a e5       	ldi	r23, 0x5A	; 90
    daf6:	ce 01       	movw	r24, r28
    daf8:	88 57       	subi	r24, 0x78	; 120
    dafa:	9f 4f       	sbci	r25, 0xFF	; 255
    dafc:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    db00:	c1 2c       	mov	r12, r1
    db02:	ee 24       	eor	r14, r14
    db04:	ea 94       	dec	r14
    db06:	fe 2c       	mov	r15, r14
    db08:	00 ee       	ldi	r16, 0xE0	; 224
    db0a:	17 e0       	ldi	r17, 0x07	; 7
    db0c:	21 e0       	ldi	r18, 0x01	; 1
    db0e:	48 e7       	ldi	r20, 0x78	; 120
    db10:	50 e0       	ldi	r21, 0x00	; 0
    db12:	6e e1       	ldi	r22, 0x1E	; 30
    db14:	70 e0       	ldi	r23, 0x00	; 0
    db16:	ce 01       	movw	r24, r28
    db18:	88 57       	subi	r24, 0x78	; 120
    db1a:	9f 4f       	sbci	r25, 0xFF	; 255
    db1c:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    db20:	88 e1       	ldi	r24, 0x18	; 24
    db22:	80 93 50 0f 	sts	0x0F50, r24	; 0x800f50 <ds2482_address>
    db26:	10 92 51 0f 	sts	0x0F51, r1	; 0x800f51 <ds2482_address+0x1>
    db2a:	e5 e9       	ldi	r30, 0x95	; 149
    db2c:	ff e0       	ldi	r31, 0x0F	; 15
    db2e:	15 8e       	std	Z+29, r1	; 0x1d
    db30:	14 8e       	std	Z+28, r1	; 0x1c
    db32:	7e 96       	adiw	r30, 0x1e	; 30
    db34:	70 e1       	ldi	r23, 0x10	; 16
    db36:	e9 34       	cpi	r30, 0x49	; 73
    db38:	f7 07       	cpc	r31, r23
    db3a:	c9 f7       	brne	.-14     	; 0xdb2e <setup+0xe72>
itoa():
    db3c:	4a e0       	ldi	r20, 0x0A	; 10
    db3e:	be 01       	movw	r22, r28
    db40:	62 52       	subi	r22, 0x22	; 34
    db42:	7f 4f       	sbci	r23, 0xFF	; 255
    db44:	88 e1       	ldi	r24, 0x18	; 24
    db46:	90 e0       	ldi	r25, 0x00	; 0
    db48:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
setup():
    db4c:	80 91 50 0f 	lds	r24, 0x0F50	; 0x800f50 <ds2482_address>
    db50:	0e 94 c7 cc 	call	0x1998e	; 0x1998e <ds2482reset(unsigned char)>
    db54:	81 11       	cpse	r24, r1
    db56:	34 ce       	rjmp	.-920    	; 0xd7c0 <setup+0xb04>
    db58:	6f e2       	ldi	r22, 0x2F	; 47
    db5a:	76 e5       	ldi	r23, 0x56	; 86
    db5c:	ce 01       	movw	r24, r28
    db5e:	88 57       	subi	r24, 0x78	; 120
    db60:	9f 4f       	sbci	r25, 0xFF	; 255
    db62:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    db66:	c1 2c       	mov	r12, r1
    db68:	ee 24       	eor	r14, r14
    db6a:	ea 94       	dec	r14
    db6c:	fe 2c       	mov	r15, r14
    db6e:	00 ee       	ldi	r16, 0xE0	; 224
    db70:	17 e0       	ldi	r17, 0x07	; 7
    db72:	21 e0       	ldi	r18, 0x01	; 1
    db74:	48 e7       	ldi	r20, 0x78	; 120
    db76:	50 e0       	ldi	r21, 0x00	; 0
    db78:	60 ea       	ldi	r22, 0xA0	; 160
    db7a:	70 e0       	ldi	r23, 0x00	; 0
    db7c:	ce 01       	movw	r24, r28
    db7e:	88 57       	subi	r24, 0x78	; 120
    db80:	9f 4f       	sbci	r25, 0xFF	; 255
    db82:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    db86:	82 e0       	ldi	r24, 0x02	; 2
    db88:	0e 94 8a 4c 	call	0x9914	; 0x9914 <selftest_clear_0(unsigned char)>
    db8c:	91 cd       	rjmp	.-1246   	; 0xd6b0 <setup+0x9f4>
    db8e:	c0 5d       	subi	r28, 0xD0	; 208
    db90:	de 4f       	sbci	r29, 0xFE	; 254
    db92:	88 81       	ld	r24, Y
    db94:	c0 53       	subi	r28, 0x30	; 48
    db96:	d1 40       	sbci	r29, 0x01	; 1
    db98:	8a 30       	cpi	r24, 0x0A	; 10
    db9a:	09 f0       	breq	.+2      	; 0xdb9e <setup+0xee2>
    db9c:	f3 ce       	rjmp	.-538    	; 0xd984 <setup+0xcc8>
    db9e:	6e e9       	ldi	r22, 0x9E	; 158
    dba0:	7a e5       	ldi	r23, 0x5A	; 90
    dba2:	ce 01       	movw	r24, r28
    dba4:	88 57       	subi	r24, 0x78	; 120
    dba6:	9f 4f       	sbci	r25, 0xFF	; 255
    dba8:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    dbac:	c1 2c       	mov	r12, r1
    dbae:	ee 24       	eor	r14, r14
    dbb0:	ea 94       	dec	r14
    dbb2:	fe 2c       	mov	r15, r14
    dbb4:	00 ee       	ldi	r16, 0xE0	; 224
    dbb6:	17 e0       	ldi	r17, 0x07	; 7
    dbb8:	21 e0       	ldi	r18, 0x01	; 1
    dbba:	46 e9       	ldi	r20, 0x96	; 150
    dbbc:	50 e0       	ldi	r21, 0x00	; 0
    dbbe:	6e e1       	ldi	r22, 0x1E	; 30
    dbc0:	70 e0       	ldi	r23, 0x00	; 0
    dbc2:	ce 01       	movw	r24, r28
    dbc4:	88 57       	subi	r24, 0x78	; 120
    dbc6:	9f 4f       	sbci	r25, 0xFF	; 255
    dbc8:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    dbcc:	40 91 13 0f 	lds	r20, 0x0F13	; 0x800f13 <device+0x24>
    dbd0:	50 91 14 0f 	lds	r21, 0x0F14	; 0x800f14 <device+0x25>
    dbd4:	6f e0       	ldi	r22, 0x0F	; 15
    dbd6:	7f e0       	ldi	r23, 0x0F	; 15
    dbd8:	89 e0       	ldi	r24, 0x09	; 9
    dbda:	9c e0       	ldi	r25, 0x0C	; 12
    dbdc:	0e 94 51 c2 	call	0x184a2	; 0x184a2 <PubSubClient::setServer(unsigned char*, unsigned int)>
    dbe0:	63 e6       	ldi	r22, 0x63	; 99
    dbe2:	76 e7       	ldi	r23, 0x76	; 118
    dbe4:	89 e0       	ldi	r24, 0x09	; 9
    dbe6:	9c e0       	ldi	r25, 0x0C	; 12
    dbe8:	0e 94 8b c2 	call	0x18516	; 0x18516 <PubSubClient::setCallback(void (*)(char*, unsigned char*, unsigned int))>
    dbec:	88 ec       	ldi	r24, 0xC8	; 200
    dbee:	95 e5       	ldi	r25, 0x55	; 85
    dbf0:	0e 94 85 83 	call	0x1070a	; 0x1070a <send_mqtt_set_header(char const*)>
    dbf4:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    dbf8:	6b 01       	movw	r12, r22
    dbfa:	7c 01       	movw	r14, r24
    dbfc:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    dc00:	6c 19       	sub	r22, r12
    dc02:	7d 09       	sbc	r23, r13
    dc04:	8e 09       	sbc	r24, r14
    dc06:	9f 09       	sbc	r25, r15
    dc08:	68 3b       	cpi	r22, 0xB8	; 184
    dc0a:	7b 40       	sbci	r23, 0x0B	; 11
    dc0c:	81 05       	cpc	r24, r1
    dc0e:	91 05       	cpc	r25, r1
    dc10:	98 f4       	brcc	.+38     	; 0xdc38 <setup+0xf7c>
    dc12:	10 92 54 0a 	sts	0x0A54, r1	; 0x800a54 <lastmqttconnect>
    dc16:	10 92 55 0a 	sts	0x0A55, r1	; 0x800a55 <lastmqttconnect+0x1>
    dc1a:	10 92 56 0a 	sts	0x0A56, r1	; 0x800a56 <lastmqttconnect+0x2>
    dc1e:	10 92 57 0a 	sts	0x0A57, r1	; 0x800a57 <lastmqttconnect+0x3>
    dc22:	89 e0       	ldi	r24, 0x09	; 9
    dc24:	9c e0       	ldi	r25, 0x0C	; 12
    dc26:	0e 94 b8 bf 	call	0x17f70	; 0x17f70 <PubSubClient::loop()>
    dc2a:	0e 94 94 47 	call	0x8f28	; 0x8f28 <mqtt_reconnect()>
    dc2e:	81 11       	cpse	r24, r1
    dc30:	97 ce       	rjmp	.-722    	; 0xd960 <setup+0xca4>
    dc32:	85 e0       	ldi	r24, 0x05	; 5
    dc34:	0e 94 8a 4c 	call	0x9914	; 0x9914 <selftest_clear_0(unsigned char)>
    dc38:	10 92 54 0a 	sts	0x0A54, r1	; 0x800a54 <lastmqttconnect>
    dc3c:	10 92 55 0a 	sts	0x0A55, r1	; 0x800a55 <lastmqttconnect+0x1>
    dc40:	10 92 56 0a 	sts	0x0A56, r1	; 0x800a56 <lastmqttconnect+0x2>
    dc44:	10 92 57 0a 	sts	0x0A57, r1	; 0x800a57 <lastmqttconnect+0x3>
_Z14selftest_get_0h():
    dc48:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <selftest_data>
setup():
    dc4c:	85 ff       	sbrs	r24, 5
    dc4e:	8c ce       	rjmp	.-744    	; 0xd968 <setup+0xcac>
    dc50:	62 e3       	ldi	r22, 0x32	; 50
    dc52:	76 e5       	ldi	r23, 0x56	; 86
    dc54:	ce 01       	movw	r24, r28
    dc56:	88 57       	subi	r24, 0x78	; 120
    dc58:	9f 4f       	sbci	r25, 0xFF	; 255
    dc5a:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    dc5e:	c1 2c       	mov	r12, r1
    dc60:	ee 24       	eor	r14, r14
    dc62:	ea 94       	dec	r14
    dc64:	fe 2c       	mov	r15, r14
    dc66:	00 e0       	ldi	r16, 0x00	; 0
    dc68:	18 ef       	ldi	r17, 0xF8	; 248
    dc6a:	21 e0       	ldi	r18, 0x01	; 1
    dc6c:	46 e9       	ldi	r20, 0x96	; 150
    dc6e:	50 e0       	ldi	r21, 0x00	; 0
    dc70:	fe cd       	rjmp	.-1028   	; 0xd86e <setup+0xbb2>
    dc72:	c0 5d       	subi	r28, 0xD0	; 208
    dc74:	de 4f       	sbci	r29, 0xFE	; 254
    dc76:	98 81       	ld	r25, Y
    dc78:	c0 53       	subi	r28, 0x30	; 48
    dc7a:	d1 40       	sbci	r29, 0x01	; 1
    dc7c:	9d 30       	cpi	r25, 0x0D	; 13
    dc7e:	09 f0       	breq	.+2      	; 0xdc82 <setup+0xfc6>
    dc80:	1a ca       	rjmp	.-3020   	; 0xd0b6 <setup+0x3fa>
    dc82:	61 e7       	ldi	r22, 0x71	; 113
    dc84:	7a e5       	ldi	r23, 0x5A	; 90
    dc86:	ce 01       	movw	r24, r28
    dc88:	88 57       	subi	r24, 0x78	; 120
    dc8a:	9f 4f       	sbci	r25, 0xFF	; 255
    dc8c:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
    dc90:	c1 2c       	mov	r12, r1
    dc92:	ee 24       	eor	r14, r14
    dc94:	ea 94       	dec	r14
    dc96:	fe 2c       	mov	r15, r14
    dc98:	00 ee       	ldi	r16, 0xE0	; 224
    dc9a:	17 e0       	ldi	r17, 0x07	; 7
    dc9c:	21 e0       	ldi	r18, 0x01	; 1
    dc9e:	44 eb       	ldi	r20, 0xB4	; 180
    dca0:	50 e0       	ldi	r21, 0x00	; 0
    dca2:	6e e1       	ldi	r22, 0x1E	; 30
    dca4:	70 e0       	ldi	r23, 0x00	; 0
    dca6:	ce 01       	movw	r24, r28
    dca8:	88 57       	subi	r24, 0x78	; 120
    dcaa:	9f 4f       	sbci	r25, 0xFF	; 255
    dcac:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    dcb0:	0e 94 c9 8c 	call	0x11992	; 0x11992 <thermostat_init_pid()>
    dcb4:	10 e0       	ldi	r17, 0x00	; 0
    dcb6:	60 e0       	ldi	r22, 0x00	; 0
    dcb8:	81 2f       	mov	r24, r17
    dcba:	0e 94 bd 8c 	call	0x1197a	; 0x1197a <thermostat_ring_set_state(unsigned char, unsigned char)>
    dcbe:	60 e0       	ldi	r22, 0x00	; 0
    dcc0:	81 2f       	mov	r24, r17
    dcc2:	0e 94 c3 8c 	call	0x11986	; 0x11986 <thermostat_ring_set_power(unsigned char, unsigned char)>
    dcc6:	81 2f       	mov	r24, r17
    dcc8:	0e 94 18 8f 	call	0x11e30	; 0x11e30 <thermostat_ring_get_pid_eeprom(unsigned char)>
    dccc:	81 2f       	mov	r24, r17
    dcce:	0e 94 cc 8e 	call	0x11d98	; 0x11d98 <thermostat_ring_update_pid_parameters(unsigned char)>
    dcd2:	1f 5f       	subi	r17, 0xFF	; 255
    dcd4:	15 30       	cpi	r17, 0x05	; 5
    dcd6:	79 f7       	brne	.-34     	; 0xdcb6 <setup+0xffa>
    dcd8:	0e 94 63 47 	call	0x8ec6	; 0x8ec6 <get_default_ring()>
    dcdc:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <default_ring>
    dce0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <get_default_show_temp()>
    dce4:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <default_show_temp>
    dce8:	e3 cc       	rjmp	.-1594   	; 0xd6b0 <setup+0x9f4>

0000dcea <count_use_rtds()>:
_Z14count_use_rtdsv():
    dcea:	0f 93       	push	r16
    dcec:	1f 93       	push	r17
    dcee:	cf 93       	push	r28
    dcf0:	df 93       	push	r29
    dcf2:	1f 92       	push	r1
    dcf4:	cd b7       	in	r28, 0x3d	; 61
    dcf6:	de b7       	in	r29, 0x3e	; 62
    dcf8:	19 82       	std	Y+1, r1	; 0x01
    dcfa:	10 e0       	ldi	r17, 0x00	; 0
    dcfc:	00 e0       	ldi	r16, 0x00	; 0
    dcfe:	be 01       	movw	r22, r28
    dd00:	6f 5f       	subi	r22, 0xFF	; 255
    dd02:	7f 4f       	sbci	r23, 0xFF	; 255
    dd04:	81 2f       	mov	r24, r17
    dd06:	0e 94 2a 43 	call	0x8654	; 0x8654 <remote_tds_get_active(unsigned char, unsigned char*)>
    dd0a:	89 81       	ldd	r24, Y+1	; 0x01
    dd0c:	81 30       	cpi	r24, 0x01	; 1
    dd0e:	09 f4       	brne	.+2      	; 0xdd12 <count_use_rtds()+0x28>
    dd10:	0f 5f       	subi	r16, 0xFF	; 255
    dd12:	1f 5f       	subi	r17, 0xFF	; 255
    dd14:	1a 30       	cpi	r17, 0x0A	; 10
    dd16:	99 f7       	brne	.-26     	; 0xdcfe <count_use_rtds()+0x14>
    dd18:	80 2f       	mov	r24, r16
    dd1a:	0f 90       	pop	r0
    dd1c:	df 91       	pop	r29
    dd1e:	cf 91       	pop	r28
    dd20:	1f 91       	pop	r17
    dd22:	0f 91       	pop	r16
    dd24:	08 95       	ret

0000dd26 <loop>:
loop():
    dd26:	cf 92       	push	r12
    dd28:	df 92       	push	r13
    dd2a:	ef 92       	push	r14
    dd2c:	ff 92       	push	r15
    dd2e:	0f 93       	push	r16
    dd30:	1f 93       	push	r17
    dd32:	cf 93       	push	r28
    dd34:	df 93       	push	r29
    dd36:	00 d0       	rcall	.+0      	; 0xdd38 <loop+0x12>
    dd38:	00 d0       	rcall	.+0      	; 0xdd3a <loop+0x14>
    dd3a:	1f 92       	push	r1
    dd3c:	cd b7       	in	r28, 0x3d	; 61
    dd3e:	de b7       	in	r29, 0x3e	; 62
    dd40:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    dd44:	6b 01       	movw	r12, r22
    dd46:	7c 01       	movw	r14, r24
    dd48:	0e 94 94 47 	call	0x8f28	; 0x8f28 <mqtt_reconnect()>
    dd4c:	81 11       	cpse	r24, r1
    dd4e:	69 c1       	rjmp	.+722    	; 0xe022 <loop+0x2fc>
    dd50:	85 e0       	ldi	r24, 0x05	; 5
    dd52:	0e 94 8a 4c 	call	0x9914	; 0x9914 <selftest_clear_0(unsigned char)>
    dd56:	89 e0       	ldi	r24, 0x09	; 9
    dd58:	9c e0       	ldi	r25, 0x0C	; 12
    dd5a:	0e 94 b8 bf 	call	0x17f70	; 0x17f70 <PubSubClient::loop()>
    dd5e:	80 e0       	ldi	r24, 0x00	; 0
    dd60:	0e 94 31 55 	call	0xaa62	; 0xaa62 <draw_menu(bool)>
    dd64:	88 23       	and	r24, r24
    dd66:	19 f0       	breq	.+6      	; 0xdd6e <loop+0x48>
    dd68:	81 e0       	ldi	r24, 0x01	; 1
    dd6a:	0e 94 31 55 	call	0xaa62	; 0xaa62 <draw_menu(bool)>
    dd6e:	80 91 49 0f 	lds	r24, 0x0F49	; 0x800f49 <scan_rf_net_enable>
    dd72:	82 30       	cpi	r24, 0x02	; 2
    dd74:	31 f4       	brne	.+12     	; 0xdd82 <loop+0x5c>
    dd76:	10 92 49 0f 	sts	0x0F49, r1	; 0x800f49 <scan_rf_net_enable>
    dd7a:	81 ef       	ldi	r24, 0xF1	; 241
    dd7c:	9b e0       	ldi	r25, 0x0B	; 11
    dd7e:	0e 94 89 c5 	call	0x18b12	; 0x18b12 <RF24::printDetails()>
    dd82:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    dd86:	00 91 2f 0a 	lds	r16, 0x0A2F	; 0x800a2f <milis_10s>
    dd8a:	10 91 30 0a 	lds	r17, 0x0A30	; 0x800a30 <milis_10s+0x1>
    dd8e:	20 91 31 0a 	lds	r18, 0x0A31	; 0x800a31 <milis_10s+0x2>
    dd92:	30 91 32 0a 	lds	r19, 0x0A32	; 0x800a32 <milis_10s+0x3>
    dd96:	ab 01       	movw	r20, r22
    dd98:	bc 01       	movw	r22, r24
    dd9a:	40 1b       	sub	r20, r16
    dd9c:	51 0b       	sbc	r21, r17
    dd9e:	62 0b       	sbc	r22, r18
    dda0:	73 0b       	sbc	r23, r19
    dda2:	40 31       	cpi	r20, 0x10	; 16
    dda4:	57 42       	sbci	r21, 0x27	; 39
    dda6:	61 05       	cpc	r22, r1
    dda8:	71 05       	cpc	r23, r1
    ddaa:	78 f1       	brcs	.+94     	; 0xde0a <loop+0xe4>
    ddac:	d9 01       	movw	r26, r18
    ddae:	c8 01       	movw	r24, r16
    ddb0:	80 5f       	subi	r24, 0xF0	; 240
    ddb2:	98 4d       	sbci	r25, 0xD8	; 216
    ddb4:	af 4f       	sbci	r26, 0xFF	; 255
    ddb6:	bf 4f       	sbci	r27, 0xFF	; 255
    ddb8:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <milis_10s>
    ddbc:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <milis_10s+0x1>
    ddc0:	a0 93 31 0a 	sts	0x0A31, r26	; 0x800a31 <milis_10s+0x2>
    ddc4:	b0 93 32 0a 	sts	0x0A32, r27	; 0x800a32 <milis_10s+0x3>
    ddc8:	81 e0       	ldi	r24, 0x01	; 1
    ddca:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <menu_redraw10s>
    ddce:	0e 94 4d 48 	call	0x909a	; 0x909a <send_mqtt_onewire()>
    ddd2:	89 e0       	ldi	r24, 0x09	; 9
    ddd4:	9c e0       	ldi	r25, 0x0C	; 12
    ddd6:	0e 94 1e 86 	call	0x10c3c	; 0x10c3c <send_mqtt_status(PubSubClient*)>
    ddda:	0e 94 a9 4c 	call	0x9952	; 0x9952 <send_device_status()>
    ddde:	0e 94 e5 4e 	call	0x9dca	; 0x9dca <send_mqtt_ring()>
    dde2:	0e 94 c4 48 	call	0x9188	; 0x9188 <send_mqtt_tds()>
    dde6:	0e 94 de 49 	call	0x93bc	; 0x93bc <send_mqtt_program()>
    ddea:	0e 94 0e 50 	call	0xa01c	; 0xa01c <thermostat()>
    ddee:	10 e0       	ldi	r17, 0x00	; 0
    ddf0:	81 2f       	mov	r24, r17
    ddf2:	0e 94 43 88 	call	0x11086	; 0x11086 <tds_used(unsigned char)>
    ddf6:	81 30       	cpi	r24, 0x01	; 1
    ddf8:	19 f4       	brne	.+6      	; 0xde00 <loop+0xda>
    ddfa:	81 2f       	mov	r24, r17
    ddfc:	0e 94 f9 4a 	call	0x95f2	; 0x95f2 <mqtt_send_pid_variable(unsigned char)>
    de00:	1f 5f       	subi	r17, 0xFF	; 255
    de02:	15 30       	cpi	r17, 0x05	; 5
    de04:	a9 f7       	brne	.-22     	; 0xddf0 <loop+0xca>
    de06:	0e 94 56 4b 	call	0x96ac	; 0x96ac <send_mqtt_remote_tds_status()>
    de0a:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    de0e:	00 91 33 0a 	lds	r16, 0x0A33	; 0x800a33 <milis_1s>
    de12:	10 91 34 0a 	lds	r17, 0x0A34	; 0x800a34 <milis_1s+0x1>
    de16:	20 91 35 0a 	lds	r18, 0x0A35	; 0x800a35 <milis_1s+0x2>
    de1a:	30 91 36 0a 	lds	r19, 0x0A36	; 0x800a36 <milis_1s+0x3>
    de1e:	ab 01       	movw	r20, r22
    de20:	bc 01       	movw	r22, r24
    de22:	40 1b       	sub	r20, r16
    de24:	51 0b       	sbc	r21, r17
    de26:	62 0b       	sbc	r22, r18
    de28:	73 0b       	sbc	r23, r19
    de2a:	48 3e       	cpi	r20, 0xE8	; 232
    de2c:	53 40       	sbci	r21, 0x03	; 3
    de2e:	61 05       	cpc	r22, r1
    de30:	71 05       	cpc	r23, r1
    de32:	38 f1       	brcs	.+78     	; 0xde82 <loop+0x15c>
    de34:	d9 01       	movw	r26, r18
    de36:	c8 01       	movw	r24, r16
    de38:	88 51       	subi	r24, 0x18	; 24
    de3a:	9c 4f       	sbci	r25, 0xFC	; 252
    de3c:	af 4f       	sbci	r26, 0xFF	; 255
    de3e:	bf 4f       	sbci	r27, 0xFF	; 255
    de40:	80 93 33 0a 	sts	0x0A33, r24	; 0x800a33 <milis_1s>
    de44:	90 93 34 0a 	sts	0x0A34, r25	; 0x800a34 <milis_1s+0x1>
    de48:	a0 93 35 0a 	sts	0x0A35, r26	; 0x800a35 <milis_1s+0x2>
    de4c:	b0 93 36 0a 	sts	0x0A36, r27	; 0x800a36 <milis_1s+0x3>
    de50:	80 91 3f 0a 	lds	r24, 0x0A3F	; 0x800a3f <uptime>
    de54:	90 91 40 0a 	lds	r25, 0x0A40	; 0x800a40 <uptime+0x1>
    de58:	a0 91 41 0a 	lds	r26, 0x0A41	; 0x800a41 <uptime+0x2>
    de5c:	b0 91 42 0a 	lds	r27, 0x0A42	; 0x800a42 <uptime+0x3>
    de60:	01 96       	adiw	r24, 0x01	; 1
    de62:	a1 1d       	adc	r26, r1
    de64:	b1 1d       	adc	r27, r1
    de66:	80 93 3f 0a 	sts	0x0A3F, r24	; 0x800a3f <uptime>
    de6a:	90 93 40 0a 	sts	0x0A40, r25	; 0x800a40 <uptime+0x1>
    de6e:	a0 93 41 0a 	sts	0x0A41, r26	; 0x800a41 <uptime+0x2>
    de72:	b0 93 42 0a 	sts	0x0A42, r27	; 0x800a42 <uptime+0x3>
    de76:	0e 94 9b 8b 	call	0x11736	; 0x11736 <mereni_hwwire(unsigned int)>
    de7a:	0e 94 75 47 	call	0x8eea	; 0x8eea <tds_extended_memory_store()>
    de7e:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <remote_tds_update_last_update()>
    de82:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    de86:	00 91 37 0a 	lds	r16, 0x0A37	; 0x800a37 <milis_05s>
    de8a:	10 91 38 0a 	lds	r17, 0x0A38	; 0x800a38 <milis_05s+0x1>
    de8e:	20 91 39 0a 	lds	r18, 0x0A39	; 0x800a39 <milis_05s+0x2>
    de92:	30 91 3a 0a 	lds	r19, 0x0A3A	; 0x800a3a <milis_05s+0x3>
    de96:	ab 01       	movw	r20, r22
    de98:	bc 01       	movw	r22, r24
    de9a:	40 1b       	sub	r20, r16
    de9c:	51 0b       	sbc	r21, r17
    de9e:	62 0b       	sbc	r22, r18
    dea0:	73 0b       	sbc	r23, r19
    dea2:	44 3f       	cpi	r20, 0xF4	; 244
    dea4:	51 40       	sbci	r21, 0x01	; 1
    dea6:	61 05       	cpc	r22, r1
    dea8:	71 05       	cpc	r23, r1
    deaa:	40 f1       	brcs	.+80     	; 0xdefc <loop+0x1d6>
    deac:	d9 01       	movw	r26, r18
    deae:	c8 01       	movw	r24, r16
    deb0:	8c 50       	subi	r24, 0x0C	; 12
    deb2:	9e 4f       	sbci	r25, 0xFE	; 254
    deb4:	af 4f       	sbci	r26, 0xFF	; 255
    deb6:	bf 4f       	sbci	r27, 0xFF	; 255
    deb8:	80 93 37 0a 	sts	0x0A37, r24	; 0x800a37 <milis_05s>
    debc:	90 93 38 0a 	sts	0x0A38, r25	; 0x800a38 <milis_05s+0x1>
    dec0:	a0 93 39 0a 	sts	0x0A39, r26	; 0x800a39 <milis_05s+0x2>
    dec4:	b0 93 3a 0a 	sts	0x0A3A, r27	; 0x800a3a <milis_05s+0x3>
    dec8:	ce 01       	movw	r24, r28
    deca:	01 96       	adiw	r24, 0x01	; 1
    decc:	0e 94 91 c7 	call	0x18f22	; 0x18f22 <RTC_DS1307::now()>
    ded0:	87 e0       	ldi	r24, 0x07	; 7
    ded2:	fe 01       	movw	r30, r28
    ded4:	31 96       	adiw	r30, 0x01	; 1
    ded6:	ae e4       	ldi	r26, 0x4E	; 78
    ded8:	be e0       	ldi	r27, 0x0E	; 14
    deda:	01 90       	ld	r0, Z+
    dedc:	0d 92       	st	X+, r0
    dede:	8a 95       	dec	r24
    dee0:	e1 f7       	brne	.-8      	; 0xdeda <loop+0x1b4>
    dee2:	0e 94 97 4c 	call	0x992e	; 0x992e <selftest()>
    dee6:	81 e0       	ldi	r24, 0x01	; 1
    dee8:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <menu_redraw05s>
    deec:	0e 94 75 6e 	call	0xdcea	; 0xdcea <count_use_rtds()>
    def0:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <use_rtds>
    def4:	0e 94 2d 88 	call	0x1105a	; 0x1105a <count_use_tds()>
    def8:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <use_tds>
    defc:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    df00:	00 91 3b 0a 	lds	r16, 0x0A3B	; 0x800a3b <milis_005s>
    df04:	10 91 3c 0a 	lds	r17, 0x0A3C	; 0x800a3c <milis_005s+0x1>
    df08:	20 91 3d 0a 	lds	r18, 0x0A3D	; 0x800a3d <milis_005s+0x2>
    df0c:	30 91 3e 0a 	lds	r19, 0x0A3E	; 0x800a3e <milis_005s+0x3>
    df10:	ab 01       	movw	r20, r22
    df12:	bc 01       	movw	r22, r24
    df14:	40 1b       	sub	r20, r16
    df16:	51 0b       	sbc	r21, r17
    df18:	62 0b       	sbc	r22, r18
    df1a:	73 0b       	sbc	r23, r19
    df1c:	42 33       	cpi	r20, 0x32	; 50
    df1e:	51 05       	cpc	r21, r1
    df20:	61 05       	cpc	r22, r1
    df22:	71 05       	cpc	r23, r1
    df24:	d8 f0       	brcs	.+54     	; 0xdf5c <loop+0x236>
    df26:	d9 01       	movw	r26, r18
    df28:	c8 01       	movw	r24, r16
    df2a:	c2 96       	adiw	r24, 0x32	; 50
    df2c:	a1 1d       	adc	r26, r1
    df2e:	b1 1d       	adc	r27, r1
    df30:	80 93 3b 0a 	sts	0x0A3B, r24	; 0x800a3b <milis_005s>
    df34:	90 93 3c 0a 	sts	0x0A3C, r25	; 0x800a3c <milis_005s+0x1>
    df38:	a0 93 3d 0a 	sts	0x0A3D, r26	; 0x800a3d <milis_005s+0x2>
    df3c:	b0 93 3e 0a 	sts	0x0A3E, r27	; 0x800a3e <milis_005s+0x3>
    df40:	10 91 43 0a 	lds	r17, 0x0A43	; 0x800a43 <a2d_run_now>
    df44:	11 30       	cpi	r17, 0x01	; 1
    df46:	51 f4       	brne	.+20     	; 0xdf5c <loop+0x236>
    df48:	0e 94 79 d0 	call	0x1a0f2	; 0x1a0f2 <a2d_start_process()>
    df4c:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <a2d_run_now>
    df50:	0e 94 99 d0 	call	0x1a132	; 0x1a132 <a2d_done()>
    df54:	81 11       	cpse	r24, r1
    df56:	02 c0       	rjmp	.+4      	; 0xdf5c <loop+0x236>
    df58:	10 93 43 0a 	sts	0x0A43, r17	; 0x800a43 <a2d_run_now>
    df5c:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
    df60:	dc 01       	movw	r26, r24
    df62:	cb 01       	movw	r24, r22
    df64:	8c 19       	sub	r24, r12
    df66:	9d 09       	sbc	r25, r13
    df68:	ae 09       	sbc	r26, r14
    df6a:	bf 09       	sbc	r27, r15
    df6c:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <load>
    df70:	90 93 2a 0a 	sts	0x0A2A, r25	; 0x800a2a <load+0x1>
    df74:	a0 93 2b 0a 	sts	0x0A2B, r26	; 0x800a2b <load+0x2>
    df78:	b0 93 2c 0a 	sts	0x0A2C, r27	; 0x800a2c <load+0x3>
    df7c:	c0 90 36 02 	lds	r12, 0x0236	; 0x800236 <load_min>
    df80:	d0 90 37 02 	lds	r13, 0x0237	; 0x800237 <load_min+0x1>
    df84:	e0 90 38 02 	lds	r14, 0x0238	; 0x800238 <load_min+0x2>
    df88:	f0 90 39 02 	lds	r15, 0x0239	; 0x800239 <load_min+0x3>
    df8c:	8c 15       	cp	r24, r12
    df8e:	9d 05       	cpc	r25, r13
    df90:	ae 05       	cpc	r26, r14
    df92:	bf 05       	cpc	r27, r15
    df94:	44 f4       	brge	.+16     	; 0xdfa6 <loop+0x280>
    df96:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <load_min>
    df9a:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <load_min+0x1>
    df9e:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <load_min+0x2>
    dfa2:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <load_min+0x3>
    dfa6:	c0 90 25 0a 	lds	r12, 0x0A25	; 0x800a25 <load_max>
    dfaa:	d0 90 26 0a 	lds	r13, 0x0A26	; 0x800a26 <load_max+0x1>
    dfae:	e0 90 27 0a 	lds	r14, 0x0A27	; 0x800a27 <load_max+0x2>
    dfb2:	f0 90 28 0a 	lds	r15, 0x0A28	; 0x800a28 <load_max+0x3>
    dfb6:	c8 16       	cp	r12, r24
    dfb8:	d9 06       	cpc	r13, r25
    dfba:	ea 06       	cpc	r14, r26
    dfbc:	fb 06       	cpc	r15, r27
    dfbe:	44 f4       	brge	.+16     	; 0xdfd0 <loop+0x2aa>
    dfc0:	80 93 25 0a 	sts	0x0A25, r24	; 0x800a25 <load_max>
    dfc4:	90 93 26 0a 	sts	0x0A26, r25	; 0x800a26 <load_max+0x1>
    dfc8:	a0 93 27 0a 	sts	0x0A27, r26	; 0x800a27 <load_max+0x2>
    dfcc:	b0 93 28 0a 	sts	0x0A28, r27	; 0x800a28 <load_max+0x3>
    dfd0:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <light_curr>
    dfd4:	90 91 45 0a 	lds	r25, 0x0A45	; 0x800a45 <light_curr+0x1>
    dfd8:	20 91 23 0a 	lds	r18, 0x0A23	; 0x800a23 <light_min>
    dfdc:	30 91 24 0a 	lds	r19, 0x0A24	; 0x800a24 <light_min+0x1>
    dfe0:	82 17       	cp	r24, r18
    dfe2:	93 07       	cpc	r25, r19
    dfe4:	20 f4       	brcc	.+8      	; 0xdfee <loop+0x2c8>
    dfe6:	90 93 24 0a 	sts	0x0A24, r25	; 0x800a24 <light_min+0x1>
    dfea:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <light_min>
    dfee:	20 91 21 0a 	lds	r18, 0x0A21	; 0x800a21 <light_max>
    dff2:	30 91 22 0a 	lds	r19, 0x0A22	; 0x800a22 <light_max+0x1>
    dff6:	28 17       	cp	r18, r24
    dff8:	39 07       	cpc	r19, r25
    dffa:	20 f4       	brcc	.+8      	; 0xe004 <loop+0x2de>
    dffc:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <light_max+0x1>
    e000:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <light_max>
    e004:	27 96       	adiw	r28, 0x07	; 7
    e006:	0f b6       	in	r0, 0x3f	; 63
    e008:	f8 94       	cli
    e00a:	de bf       	out	0x3e, r29	; 62
    e00c:	0f be       	out	0x3f, r0	; 63
    e00e:	cd bf       	out	0x3d, r28	; 61
    e010:	df 91       	pop	r29
    e012:	cf 91       	pop	r28
    e014:	1f 91       	pop	r17
    e016:	0f 91       	pop	r16
    e018:	ff 90       	pop	r15
    e01a:	ef 90       	pop	r14
    e01c:	df 90       	pop	r13
    e01e:	cf 90       	pop	r12
    e020:	08 95       	ret
    e022:	85 e0       	ldi	r24, 0x05	; 5
    e024:	0e 94 7e 4c 	call	0x98fc	; 0x98fc <selftest_set_0(unsigned char)>
    e028:	96 ce       	rjmp	.-724    	; 0xdd56 <loop+0x30>

0000e02a <get_global_temp(unsigned char, char*, float*)>:
_Z15get_global_temphPcPf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4999
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
    e02a:	8f 92       	push	r8
    e02c:	9f 92       	push	r9
    e02e:	af 92       	push	r10
    e030:	bf 92       	push	r11
    e032:	cf 92       	push	r12
    e034:	df 92       	push	r13
    e036:	ef 92       	push	r14
    e038:	ff 92       	push	r15
    e03a:	0f 93       	push	r16
    e03c:	1f 93       	push	r17
    e03e:	cf 93       	push	r28
    e040:	df 93       	push	r29
    e042:	cd b7       	in	r28, 0x3d	; 61
    e044:	de b7       	in	r29, 0x3e	; 62
    e046:	67 97       	sbiw	r28, 0x17	; 23
    e048:	0f b6       	in	r0, 0x3f	; 63
    e04a:	f8 94       	cli
    e04c:	de bf       	out	0x3e, r29	; 62
    e04e:	0f be       	out	0x3f, r0	; 63
    e050:	cd bf       	out	0x3d, r28	; 61
    e052:	e8 2e       	mov	r14, r24
    e054:	5b 01       	movw	r10, r22
    e056:	4a 01       	movw	r8, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5004
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
    e058:	62 e3       	ldi	r22, 0x32	; 50
    e05a:	76 e5       	ldi	r23, 0x56	; 86
    e05c:	c5 01       	movw	r24, r10
    e05e:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5005
  *temp = 0.0;
    e062:	f4 01       	movw	r30, r8
    e064:	10 82       	st	Z, r1
    e066:	11 82       	std	Z+1, r1	; 0x01
    e068:	12 82       	std	Z+2, r1	; 0x02
    e06a:	13 82       	std	Z+3, r1	; 0x03
    e06c:	d1 2c       	mov	r13, r1
    e06e:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5001
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
    e070:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5014
      if (tds.used == 1)
      {
        if (cri == device)
        {
          strcpy(name, tds.name);
          if (status_tds18s20[idx].online == True)
    e072:	1e e1       	ldi	r17, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5008
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if (get_tds18s20(idx, &tds) == 1)
    e074:	be 01       	movw	r22, r28
    e076:	6f 5f       	subi	r22, 0xFF	; 255
    e078:	7f 4f       	sbci	r23, 0xFF	; 255
    e07a:	8c 2d       	mov	r24, r12
    e07c:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
    e080:	81 30       	cpi	r24, 0x01	; 1
    e082:	f1 f5       	brne	.+124    	; 0xe100 <get_global_temp(unsigned char, char*, float*)+0xd6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5009
      if (tds.used == 1)
    e084:	89 81       	ldd	r24, Y+1	; 0x01
    e086:	81 30       	cpi	r24, 0x01	; 1
    e088:	d9 f5       	brne	.+118    	; 0xe100 <get_global_temp(unsigned char, char*, float*)+0xd6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5011
      {
        if (cri == device)
    e08a:	e0 12       	cpse	r14, r16
    e08c:	38 c0       	rjmp	.+112    	; 0xe0fe <get_global_temp(unsigned char, char*, float*)+0xd4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5013
        {
          strcpy(name, tds.name);
    e08e:	be 01       	movw	r22, r28
    e090:	63 5f       	subi	r22, 0xF3	; 243
    e092:	7f 4f       	sbci	r23, 0xFF	; 255
    e094:	c5 01       	movw	r24, r10
    e096:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5014
          if (status_tds18s20[idx].online == True)
    e09a:	1c 9d       	mul	r17, r12
    e09c:	f0 01       	movw	r30, r0
    e09e:	1d 9d       	mul	r17, r13
    e0a0:	f0 0d       	add	r31, r0
    e0a2:	11 24       	eor	r1, r1
    e0a4:	eb 56       	subi	r30, 0x6B	; 107
    e0a6:	f0 4f       	sbci	r31, 0xF0	; 240
    e0a8:	f3 8c       	ldd	r15, Z+27	; 0x1b
    e0aa:	81 e0       	ldi	r24, 0x01	; 1
    e0ac:	f8 12       	cpse	r15, r24
    e0ae:	27 c0       	rjmp	.+78     	; 0xe0fe <get_global_temp(unsigned char, char*, float*)+0xd4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5016
          {
            *temp = status_tds18s20[idx].temp / 1000.0;
    e0b0:	65 81       	ldd	r22, Z+5	; 0x05
    e0b2:	76 81       	ldd	r23, Z+6	; 0x06
    e0b4:	07 2e       	mov	r0, r23
    e0b6:	00 0c       	add	r0, r0
    e0b8:	88 0b       	sbc	r24, r24
    e0ba:	99 0b       	sbc	r25, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5034
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    e0bc:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
    e0c0:	20 e0       	ldi	r18, 0x00	; 0
    e0c2:	30 e0       	ldi	r19, 0x00	; 0
    e0c4:	4a e7       	ldi	r20, 0x7A	; 122
    e0c6:	54 e4       	ldi	r21, 0x44	; 68
    e0c8:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
    e0cc:	f4 01       	movw	r30, r8
    e0ce:	60 83       	st	Z, r22
    e0d0:	71 83       	std	Z+1, r23	; 0x01
    e0d2:	82 83       	std	Z+2, r24	; 0x02
    e0d4:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5045
    }
  }
  /// goto skok
get_global_temp_end:
  return ret;
}
    e0d6:	8f 2d       	mov	r24, r15
    e0d8:	67 96       	adiw	r28, 0x17	; 23
    e0da:	0f b6       	in	r0, 0x3f	; 63
    e0dc:	f8 94       	cli
    e0de:	de bf       	out	0x3e, r29	; 62
    e0e0:	0f be       	out	0x3f, r0	; 63
    e0e2:	cd bf       	out	0x3d, r28	; 61
    e0e4:	df 91       	pop	r29
    e0e6:	cf 91       	pop	r28
    e0e8:	1f 91       	pop	r17
    e0ea:	0f 91       	pop	r16
    e0ec:	ff 90       	pop	r15
    e0ee:	ef 90       	pop	r14
    e0f0:	df 90       	pop	r13
    e0f2:	cf 90       	pop	r12
    e0f4:	bf 90       	pop	r11
    e0f6:	af 90       	pop	r10
    e0f8:	9f 90       	pop	r9
    e0fa:	8f 90       	pop	r8
    e0fc:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5021
            *temp = status_tds18s20[idx].temp / 1000.0;
            ret = 1;
            goto get_global_temp_end;
          }
        }
        cri++;
    e0fe:	0f 5f       	subi	r16, 0xFF	; 255
    e100:	ff ef       	ldi	r31, 0xFF	; 255
    e102:	cf 1a       	sub	r12, r31
    e104:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5007 (discriminator 2)
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    e106:	86 e0       	ldi	r24, 0x06	; 6
    e108:	c8 16       	cp	r12, r24
    e10a:	d1 04       	cpc	r13, r1
    e10c:	09 f0       	breq	.+2      	; 0xe110 <get_global_temp(unsigned char, char*, float*)+0xe6>
    e10e:	b2 cf       	rjmp	.-156    	; 0xe074 <get_global_temp(unsigned char, char*, float*)+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5024
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e110:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5026
  {
    remote_tds_get_active(idx, &active);
    e112:	be 01       	movw	r22, r28
    e114:	69 5e       	subi	r22, 0xE9	; 233
    e116:	7f 4f       	sbci	r23, 0xFF	; 255
    e118:	81 2f       	mov	r24, r17
    e11a:	0e 94 2a 43 	call	0x8654	; 0x8654 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5027
    if (active == 1)
    e11e:	ff 88       	ldd	r15, Y+23	; 0x17
    e120:	e1 e0       	ldi	r30, 0x01	; 1
    e122:	fe 12       	cpse	r15, r30
    e124:	17 c0       	rjmp	.+46     	; 0xe154 <get_global_temp(unsigned char, char*, float*)+0x12a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5029
    {
      if (cri == device)
    e126:	e0 12       	cpse	r14, r16
    e128:	14 c0       	rjmp	.+40     	; 0xe152 <get_global_temp(unsigned char, char*, float*)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5031
      {
        remote_tds_get_complete(idx, &active, name);
    e12a:	a5 01       	movw	r20, r10
    e12c:	be 01       	movw	r22, r28
    e12e:	69 5e       	subi	r22, 0xE9	; 233
    e130:	7f 4f       	sbci	r23, 0xFF	; 255
    e132:	81 2f       	mov	r24, r17
    e134:	0e 94 94 42 	call	0x8528	; 0x8528 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5032
        if (remote_tds_get_last_update(idx) < 250)
    e138:	81 2f       	mov	r24, r17
    e13a:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <remote_tds_get_last_update(unsigned char)>
    e13e:	8a 3f       	cpi	r24, 0xFA	; 250
    e140:	40 f4       	brcc	.+16     	; 0xe152 <get_global_temp(unsigned char, char*, float*)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5034
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    e142:	81 2f       	mov	r24, r17
    e144:	0e 94 c1 45 	call	0x8b82	; 0x8b82 <remote_tds_get_data(unsigned char)>
    e148:	bc 01       	movw	r22, r24
    e14a:	99 0f       	add	r25, r25
    e14c:	88 0b       	sbc	r24, r24
    e14e:	99 0b       	sbc	r25, r25
    e150:	b5 cf       	rjmp	.-150    	; 0xe0bc <get_global_temp(unsigned char, char*, float*)+0x92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5039
          ret = 1;
          goto get_global_temp_end;
        }
      }
      cri++;
    e152:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5024 (discriminator 2)
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e154:	1f 5f       	subi	r17, 0xFF	; 255
    e156:	1a 30       	cpi	r17, 0x0A	; 10
    e158:	e1 f6       	brne	.-72     	; 0xe112 <get_global_temp(unsigned char, char*, float*)+0xe8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5002
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
    e15a:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5044
      cri++;
    }
  }
  /// goto skok
get_global_temp_end:
  return ret;
    e15c:	bc cf       	rjmp	.-136    	; 0xe0d6 <get_global_temp(unsigned char, char*, float*)+0xac>

0000e15e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4412
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
///
/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    e15e:	2f 92       	push	r2
    e160:	3f 92       	push	r3
    e162:	4f 92       	push	r4
    e164:	5f 92       	push	r5
    e166:	6f 92       	push	r6
    e168:	7f 92       	push	r7
    e16a:	8f 92       	push	r8
    e16c:	9f 92       	push	r9
    e16e:	af 92       	push	r10
    e170:	bf 92       	push	r11
    e172:	cf 92       	push	r12
    e174:	df 92       	push	r13
    e176:	ef 92       	push	r14
    e178:	ff 92       	push	r15
    e17a:	0f 93       	push	r16
    e17c:	1f 93       	push	r17
    e17e:	cf 93       	push	r28
    e180:	df 93       	push	r29
    e182:	cd b7       	in	r28, 0x3d	; 61
    e184:	de b7       	in	r29, 0x3e	; 62
    e186:	e8 97       	sbiw	r28, 0x38	; 56
    e188:	0f b6       	in	r0, 0x3f	; 63
    e18a:	f8 94       	cli
    e18c:	de bf       	out	0x3e, r29	; 62
    e18e:	0f be       	out	0x3f, r0	; 63
    e190:	cd bf       	out	0x3d, r28	; 61
    e192:	4c 01       	movw	r8, r24
    e194:	3b 01       	movw	r6, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4417
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
    e196:	60 ef       	ldi	r22, 0xF0	; 240
    e198:	79 e5       	ldi	r23, 0x59	; 89
    e19a:	ce 01       	movw	r24, r28
    e19c:	01 96       	adiw	r24, 0x01	; 1
    e19e:	5c 01       	movw	r10, r24
    e1a0:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4418
  stat = get_global_temp(default_show_temp, str2, &te);
    e1a4:	ae 01       	movw	r20, r28
    e1a6:	4b 5c       	subi	r20, 0xCB	; 203
    e1a8:	5f 4f       	sbci	r21, 0xFF	; 255
    e1aa:	be 01       	movw	r22, r28
    e1ac:	6f 5d       	subi	r22, 0xDF	; 223
    e1ae:	7f 4f       	sbci	r23, 0xFF	; 255
    e1b0:	80 91 2d 0a 	lds	r24, 0x0A2D	; 0x800a2d <default_show_temp>
    e1b4:	0e 94 15 70 	call	0xe02a	; 0xe02a <get_global_temp(unsigned char, char*, float*)>
    e1b8:	d8 2e       	mov	r13, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4419
  strcat(str1, str2);
    e1ba:	be 01       	movw	r22, r28
    e1bc:	6f 5d       	subi	r22, 0xDF	; 223
    e1be:	7f 4f       	sbci	r23, 0xFF	; 255
    e1c0:	c5 01       	movw	r24, r10
    e1c2:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4420
  show_string(str1, x + 5, y + 5, 1, BLACK, WHITE, 0);
    e1c6:	a3 01       	movw	r20, r6
    e1c8:	4b 5f       	subi	r20, 0xFB	; 251
    e1ca:	5f 4f       	sbci	r21, 0xFF	; 255
    e1cc:	b4 01       	movw	r22, r8
    e1ce:	6b 5f       	subi	r22, 0xFB	; 251
    e1d0:	7f 4f       	sbci	r23, 0xFF	; 255
    e1d2:	c1 2c       	mov	r12, r1
    e1d4:	ee 24       	eor	r14, r14
    e1d6:	ea 94       	dec	r14
    e1d8:	fe 2c       	mov	r15, r14
    e1da:	10 e0       	ldi	r17, 0x00	; 0
    e1dc:	00 e0       	ldi	r16, 0x00	; 0
    e1de:	21 e0       	ldi	r18, 0x01	; 1
    e1e0:	c5 01       	movw	r24, r10
    e1e2:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    e1e6:	23 01       	movw	r4, r6
    e1e8:	94 e1       	ldi	r25, 0x14	; 20
    e1ea:	49 0e       	add	r4, r25
    e1ec:	51 1c       	adc	r5, r1
    e1ee:	14 01       	movw	r2, r8
    e1f0:	84 e0       	ldi	r24, 0x04	; 4
    e1f2:	28 0e       	add	r2, r24
    e1f4:	31 1c       	adc	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4421
  if (stat == 1)
    e1f6:	91 e0       	ldi	r25, 0x01	; 1
    e1f8:	d9 12       	cpse	r13, r25
    e1fa:	4e c0       	rjmp	.+156    	; 0xe298 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x13a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4423
  {
    dtostrf(te, 4, 1, str1);
    e1fc:	6d a9       	ldd	r22, Y+53	; 0x35
    e1fe:	7e a9       	ldd	r23, Y+54	; 0x36
    e200:	8f a9       	ldd	r24, Y+55	; 0x37
    e202:	98 ad       	ldd	r25, Y+56	; 0x38
    e204:	85 01       	movw	r16, r10
    e206:	21 e0       	ldi	r18, 0x01	; 1
    e208:	44 e0       	ldi	r20, 0x04	; 4
    e20a:	0e 94 e4 d8 	call	0x1b1c8	; 0x1b1c8 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4424
    if (strlen(str1) <= 4)
    e20e:	f5 01       	movw	r30, r10
    e210:	01 90       	ld	r0, Z+
    e212:	00 20       	and	r0, r0
    e214:	e9 f7       	brne	.-6      	; 0xe210 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb2>
    e216:	31 97       	sbiw	r30, 0x01	; 1
    e218:	ea 19       	sub	r30, r10
    e21a:	fb 09       	sbc	r31, r11
    e21c:	35 97       	sbiw	r30, 0x05	; 5
    e21e:	28 f4       	brcc	.+10     	; 0xe22a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xcc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4425
      strcat(str1, "C");
    e220:	6e e7       	ldi	r22, 0x7E	; 126
    e222:	75 e0       	ldi	r23, 0x05	; 5
    e224:	c5 01       	movw	r24, r10
    e226:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4426
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    e22a:	c1 2c       	mov	r12, r1
    e22c:	ee 24       	eor	r14, r14
    e22e:	ea 94       	dec	r14
    e230:	fe 2c       	mov	r15, r14
    e232:	10 e0       	ldi	r17, 0x00	; 0
    e234:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4431
  }
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    e236:	28 e0       	ldi	r18, 0x08	; 8
    e238:	a2 01       	movw	r20, r4
    e23a:	b1 01       	movw	r22, r2
    e23c:	c5 01       	movw	r24, r10
    e23e:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4433
  }
  my_lcd.Set_Draw_color(BLACK);
    e242:	70 e0       	ldi	r23, 0x00	; 0
    e244:	60 e0       	ldi	r22, 0x00	; 0
    e246:	85 ea       	ldi	r24, 0xA5	; 165
    e248:	9b e0       	ldi	r25, 0x0B	; 11
    e24a:	0e 94 c0 92 	call	0x12580	; 0x12580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4434
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    e24e:	83 01       	movw	r16, r6
    e250:	0c 5a       	subi	r16, 0xAC	; 172
    e252:	1f 4f       	sbci	r17, 0xFF	; 255
    e254:	94 01       	movw	r18, r8
    e256:	2c 50       	subi	r18, 0x0C	; 12
    e258:	3f 4f       	sbci	r19, 0xFF	; 255
    e25a:	a3 01       	movw	r20, r6
    e25c:	b4 01       	movw	r22, r8
    e25e:	85 ea       	ldi	r24, 0xA5	; 165
    e260:	9b e0       	ldi	r25, 0x0B	; 11
    e262:	0e 94 4b 93 	call	0x12696	; 0x12696 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4435
}
    e266:	e8 96       	adiw	r28, 0x38	; 56
    e268:	0f b6       	in	r0, 0x3f	; 63
    e26a:	f8 94       	cli
    e26c:	de bf       	out	0x3e, r29	; 62
    e26e:	0f be       	out	0x3f, r0	; 63
    e270:	cd bf       	out	0x3d, r28	; 61
    e272:	df 91       	pop	r29
    e274:	cf 91       	pop	r28
    e276:	1f 91       	pop	r17
    e278:	0f 91       	pop	r16
    e27a:	ff 90       	pop	r15
    e27c:	ef 90       	pop	r14
    e27e:	df 90       	pop	r13
    e280:	cf 90       	pop	r12
    e282:	bf 90       	pop	r11
    e284:	af 90       	pop	r10
    e286:	9f 90       	pop	r9
    e288:	8f 90       	pop	r8
    e28a:	7f 90       	pop	r7
    e28c:	6f 90       	pop	r6
    e28e:	5f 90       	pop	r5
    e290:	4f 90       	pop	r4
    e292:	3f 90       	pop	r3
    e294:	2f 90       	pop	r2
    e296:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4430
      strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    e298:	62 e3       	ldi	r22, 0x32	; 50
    e29a:	76 e5       	ldi	r23, 0x56	; 86
    e29c:	c5 01       	movw	r24, r10
    e29e:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4431
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    e2a2:	c1 2c       	mov	r12, r1
    e2a4:	ee 24       	eor	r14, r14
    e2a6:	ea 94       	dec	r14
    e2a8:	fe 2c       	mov	r15, r14
    e2aa:	00 e0       	ldi	r16, 0x00	; 0
    e2ac:	18 ef       	ldi	r17, 0xF8	; 248
    e2ae:	c3 cf       	rjmp	.-122    	; 0xe236 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xd8>

0000e2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    e2b0:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    e2b2:	80 85       	ldd	r24, Z+8	; 0x08
    e2b4:	81 11       	cpse	r24, r1
    e2b6:	0a c0       	rjmp	.+20     	; 0xe2cc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    e2b8:	a2 81       	ldd	r26, Z+2	; 0x02
    e2ba:	b3 81       	ldd	r27, Z+3	; 0x03
    e2bc:	cd 01       	movw	r24, r26
    e2be:	01 96       	adiw	r24, 0x01	; 1
    e2c0:	93 83       	std	Z+3, r25	; 0x03
    e2c2:	82 83       	std	Z+2, r24	; 0x02
    e2c4:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    e2c6:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    e2c8:	81 e0       	ldi	r24, 0x01	; 1
    e2ca:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    e2cc:	87 81       	ldd	r24, Z+7	; 0x07
    e2ce:	08 95       	ret

0000e2d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    e2d0:	1f 93       	push	r17
    e2d2:	cf 93       	push	r28
    e2d4:	df 93       	push	r29
    e2d6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    e2d8:	ce 01       	movw	r24, r28
    e2da:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e2de:	8b 30       	cpi	r24, 0x0B	; 11
    e2e0:	3c f4       	brge	.+14     	; 0xe2f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    e2e2:	89 30       	cpi	r24, 0x09	; 9
    e2e4:	5c f4       	brge	.+22     	; 0xe2fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    e2e6:	88 23       	and	r24, r24
    e2e8:	e9 f0       	breq	.+58     	; 0xe324 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    e2ea:	90 e0       	ldi	r25, 0x00	; 0
    e2ec:	80 e0       	ldi	r24, 0x00	; 0
    e2ee:	1c c0       	rjmp	.+56     	; 0xe328 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    e2f0:	80 32       	cpi	r24, 0x20	; 32
    e2f2:	21 f0       	breq	.+8      	; 0xe2fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    e2f4:	8f 32       	cpi	r24, 0x2F	; 47
    e2f6:	21 f0       	breq	.+8      	; 0xe300 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    e2f8:	8d 30       	cpi	r24, 0x0D	; 13
    e2fa:	b9 f7       	brne	.-18     	; 0xe2ea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e2fc:	18 86       	std	Y+8, r1	; 0x08
    e2fe:	ec cf       	rjmp	.-40     	; 0xe2d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    e300:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    e302:	ce 01       	movw	r24, r28
    e304:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e308:	8a 32       	cpi	r24, 0x2A	; 42
    e30a:	29 f0       	breq	.+10     	; 0xe316 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    e30c:	8f 32       	cpi	r24, 0x2F	; 47
    e30e:	d1 f0       	breq	.+52     	; 0xe344 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    e310:	82 e0       	ldi	r24, 0x02	; 2
    e312:	90 e0       	ldi	r25, 0x00	; 0
    e314:	09 c0       	rjmp	.+18     	; 0xe328 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e316:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    e318:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    e31a:	ce 01       	movw	r24, r28
    e31c:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    e320:	81 11       	cpse	r24, r1
    e322:	06 c0       	rjmp	.+12     	; 0xe330 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    e324:	81 e0       	ldi	r24, 0x01	; 1
    e326:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    e328:	df 91       	pop	r29
    e32a:	cf 91       	pop	r28
    e32c:	1f 91       	pop	r17
    e32e:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    e330:	8f 32       	cpi	r24, 0x2F	; 47
    e332:	11 f4       	brne	.+4      	; 0xe338 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303 (discriminator 1)
    e334:	11 11       	cpse	r17, r1
    e336:	e2 cf       	rjmp	.-60     	; 0xe2fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    e338:	11 e0       	ldi	r17, 0x01	; 1
    e33a:	8a 32       	cpi	r24, 0x2A	; 42
    e33c:	09 f0       	breq	.+2      	; 0xe340 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    e33e:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e340:	18 86       	std	Y+8, r1	; 0x08
    e342:	eb cf       	rjmp	.-42     	; 0xe31a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    e344:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    e346:	ce 01       	movw	r24, r28
    e348:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    e34c:	88 23       	and	r24, r24
    e34e:	51 f3       	breq	.-44     	; 0xe324 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    e350:	8a 30       	cpi	r24, 0x0A	; 10
    e352:	c1 f7       	brne	.-16     	; 0xe344 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    e354:	c1 cf       	rjmp	.-126    	; 0xe2d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

0000e356 <float ArduinoJson::Internals::parseFloat<float>(char const*)>:
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:15

namespace ArduinoJson {
namespace Internals {

template <typename T>
inline T parseFloat(const char* s) {
    e356:	ff 92       	push	r15
    e358:	0f 93       	push	r16
    e35a:	1f 93       	push	r17
    e35c:	cf 93       	push	r28
    e35e:	df 93       	push	r29
    e360:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:20
  typedef FloatTraits<T> traits;
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL
    e362:	89 2b       	or	r24, r25
    e364:	09 f4       	brne	.+2      	; 0xe368 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x12>
    e366:	8b c0       	rjmp	.+278    	; 0xe47e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x128>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23

  bool negative_result = false;
  switch (*s) {
    e368:	88 81       	ld	r24, Y
    e36a:	8b 32       	cpi	r24, 0x2B	; 43
    e36c:	91 f1       	breq	.+100    	; 0xe3d2 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x7c>
    e36e:	8d 32       	cpi	r24, 0x2D	; 45
    e370:	89 f5       	brne	.+98     	; 0xe3d4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x7e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    e372:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    e374:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    e376:	88 81       	ld	r24, Y
    e378:	84 37       	cpi	r24, 0x74	; 116
    e37a:	09 f4       	brne	.+2      	; 0xe37e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x28>
    e37c:	db c0       	rjmp	.+438    	; 0xe534 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34 (discriminator 2)
  if (*s == 'n' || *s == 'N') return traits::nan();
    e37e:	8f 7d       	andi	r24, 0xDF	; 223
    e380:	8e 34       	cpi	r24, 0x4E	; 78
    e382:	09 f4       	brne	.+2      	; 0xe386 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x30>
    e384:	dc c0       	rjmp	.+440    	; 0xe53e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1e8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35 (discriminator 1)
  if (*s == 'i' || *s == 'I')
    e386:	89 34       	cpi	r24, 0x49	; 73
    e388:	09 f4       	brne	.+2      	; 0xe38c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x36>
    e38a:	84 c0       	rjmp	.+264    	; 0xe494 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    e38c:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    e38e:	20 e0       	ldi	r18, 0x00	; 0
    e390:	30 e0       	ldi	r19, 0x00	; 0
    e392:	a9 01       	movw	r20, r18
    e394:	fe 01       	movw	r30, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    e396:	09 91       	ld	r16, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    e398:	80 ed       	ldi	r24, 0xD0	; 208
    e39a:	80 0f       	add	r24, r16
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    e39c:	8a 30       	cpi	r24, 0x0A	; 10
    e39e:	f0 f4       	brcc	.+60     	; 0xe3dc <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x86>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    e3a0:	2c 3c       	cpi	r18, 0xCC	; 204
    e3a2:	8c ec       	ldi	r24, 0xCC	; 204
    e3a4:	38 07       	cpc	r19, r24
    e3a6:	8c e0       	ldi	r24, 0x0C	; 12
    e3a8:	48 07       	cpc	r20, r24
    e3aa:	51 05       	cpc	r21, r1
    e3ac:	ac f4       	brge	.+42     	; 0xe3d8 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x82>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    e3ae:	aa e0       	ldi	r26, 0x0A	; 10
    e3b0:	b0 e0       	ldi	r27, 0x00	; 0
    e3b2:	0e 94 d9 d8 	call	0x1b1b2	; 0x1b1b2 <__muluhisi3>
    e3b6:	20 2f       	mov	r18, r16
    e3b8:	00 0f       	add	r16, r16
    e3ba:	33 0b       	sbc	r19, r19
    e3bc:	20 53       	subi	r18, 0x30	; 48
    e3be:	31 09       	sbc	r19, r1
    e3c0:	03 2e       	mov	r0, r19
    e3c2:	00 0c       	add	r0, r0
    e3c4:	44 0b       	sbc	r20, r20
    e3c6:	55 0b       	sbc	r21, r21
    e3c8:	26 0f       	add	r18, r22
    e3ca:	37 1f       	adc	r19, r23
    e3cc:	48 1f       	adc	r20, r24
    e3ce:	59 1f       	adc	r21, r25
    e3d0:	e1 cf       	rjmp	.-62     	; 0xe394 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    e3d2:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    e3d4:	10 e0       	ldi	r17, 0x00	; 0
    e3d6:	cf cf       	rjmp	.-98     	; 0xe376 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x20>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    e3d8:	f3 94       	inc	r15
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    e3da:	dc cf       	rjmp	.-72     	; 0xe394 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    else
      exponent_offset++;
    s++;
  }

  if (*s == '.') {
    e3dc:	0e 32       	cpi	r16, 0x2E	; 46
    e3de:	11 f5       	brne	.+68     	; 0xe424 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    e3e0:	ef 01       	movw	r28, r30
    e3e2:	21 96       	adiw	r28, 0x01	; 1
    e3e4:	fe 01       	movw	r30, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    e3e6:	09 91       	ld	r16, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    e3e8:	80 ed       	ldi	r24, 0xD0	; 208
    e3ea:	80 0f       	add	r24, r16
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    e3ec:	8a 30       	cpi	r24, 0x0A	; 10
    e3ee:	d0 f4       	brcc	.+52     	; 0xe424 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    e3f0:	2c 3c       	cpi	r18, 0xCC	; 204
    e3f2:	8c ec       	ldi	r24, 0xCC	; 204
    e3f4:	38 07       	cpc	r19, r24
    e3f6:	8c e0       	ldi	r24, 0x0C	; 12
    e3f8:	48 07       	cpc	r20, r24
    e3fa:	51 05       	cpc	r21, r1
    e3fc:	9c f7       	brge	.-26     	; 0xe3e4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x8e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    e3fe:	aa e0       	ldi	r26, 0x0A	; 10
    e400:	b0 e0       	ldi	r27, 0x00	; 0
    e402:	0e 94 d9 d8 	call	0x1b1b2	; 0x1b1b2 <__muluhisi3>
    e406:	20 2f       	mov	r18, r16
    e408:	00 0f       	add	r16, r16
    e40a:	33 0b       	sbc	r19, r19
    e40c:	20 53       	subi	r18, 0x30	; 48
    e40e:	31 09       	sbc	r19, r1
    e410:	03 2e       	mov	r0, r19
    e412:	00 0c       	add	r0, r0
    e414:	44 0b       	sbc	r20, r20
    e416:	55 0b       	sbc	r21, r21
    e418:	26 0f       	add	r18, r22
    e41a:	37 1f       	adc	r19, r23
    e41c:	48 1f       	adc	r20, r24
    e41e:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    e420:	fa 94       	dec	r15
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
    e422:	e0 cf       	rjmp	.-64     	; 0xe3e4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x8e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    e424:	80 81       	ld	r24, Z
    e426:	8f 7d       	andi	r24, 0xDF	; 223
    e428:	cf 2d       	mov	r28, r15
    e42a:	ff 0c       	add	r15, r15
    e42c:	dd 0b       	sbc	r29, r29
    e42e:	85 34       	cpi	r24, 0x45	; 69
    e430:	09 f0       	breq	.+2      	; 0xe434 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xde>
    e432:	65 c0       	rjmp	.+202    	; 0xe4fe <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    e434:	81 81       	ldd	r24, Z+1	; 0x01
    e436:	8d 32       	cpi	r24, 0x2D	; 45
    e438:	31 f5       	brne	.+76     	; 0xe486 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x130>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    e43a:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    e43c:	71 e0       	ldi	r23, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    e43e:	90 e0       	ldi	r25, 0x00	; 0
    e440:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    e442:	0a e0       	ldi	r16, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    e444:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    e446:	a0 ed       	ldi	r26, 0xD0	; 208
    e448:	a6 0f       	add	r26, r22
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    e44a:	aa 30       	cpi	r26, 0x0A	; 10
    e44c:	70 f5       	brcc	.+92     	; 0xe4aa <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x154>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    e44e:	08 9f       	mul	r16, r24
    e450:	d0 01       	movw	r26, r0
    e452:	09 9f       	mul	r16, r25
    e454:	b0 0d       	add	r27, r0
    e456:	11 24       	eor	r1, r1
    e458:	86 2f       	mov	r24, r22
    e45a:	66 0f       	add	r22, r22
    e45c:	99 0b       	sbc	r25, r25
    e45e:	c0 97       	sbiw	r24, 0x30	; 48
    e460:	8a 0f       	add	r24, r26
    e462:	9b 1f       	adc	r25, r27
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    e464:	dc 01       	movw	r26, r24
    e466:	ac 0f       	add	r26, r28
    e468:	bd 1f       	adc	r27, r29
    e46a:	97 97       	sbiw	r26, 0x27	; 39
    e46c:	5c f3       	brlt	.-42     	; 0xe444 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xee>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    e46e:	77 23       	and	r23, r23
    e470:	89 f0       	breq	.+34     	; 0xe494 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    e472:	60 e0       	ldi	r22, 0x00	; 0
    e474:	70 e0       	ldi	r23, 0x00	; 0
    e476:	80 e0       	ldi	r24, 0x00	; 0
    e478:	90 e8       	ldi	r25, 0x80	; 128
    e47a:	11 11       	cpse	r17, r1
    e47c:	3a c0       	rjmp	.+116    	; 0xe4f2 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
    e47e:	60 e0       	ldi	r22, 0x00	; 0
    e480:	70 e0       	ldi	r23, 0x00	; 0
    e482:	cb 01       	movw	r24, r22
    e484:	36 c0       	rjmp	.+108    	; 0xe4f2 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    e486:	8b 32       	cpi	r24, 0x2B	; 43
    e488:	19 f0       	breq	.+6      	; 0xe490 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    e48a:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    e48c:	70 e0       	ldi	r23, 0x00	; 0
    e48e:	d7 cf       	rjmp	.-82     	; 0xe43e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xe8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    e490:	32 96       	adiw	r30, 0x02	; 2
    e492:	fc cf       	rjmp	.-8      	; 0xe48c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x136>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    e494:	60 e0       	ldi	r22, 0x00	; 0
    e496:	70 e0       	ldi	r23, 0x00	; 0
    e498:	80 e8       	ldi	r24, 0x80	; 128
    e49a:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    e49c:	11 11       	cpse	r17, r1
    e49e:	29 c0       	rjmp	.+82     	; 0xe4f2 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    e4a0:	60 e0       	ldi	r22, 0x00	; 0
    e4a2:	70 e0       	ldi	r23, 0x00	; 0
    e4a4:	80 e8       	ldi	r24, 0x80	; 128
    e4a6:	9f e7       	ldi	r25, 0x7F	; 127
    e4a8:	24 c0       	rjmp	.+72     	; 0xe4f2 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    e4aa:	77 23       	and	r23, r23
    e4ac:	19 f0       	breq	.+6      	; 0xe4b4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x15e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81 (discriminator 1)
    e4ae:	91 95       	neg	r25
    e4b0:	81 95       	neg	r24
    e4b2:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    e4b4:	c8 0f       	add	r28, r24
    e4b6:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    e4b8:	ca 01       	movw	r24, r20
    e4ba:	b9 01       	movw	r22, r18
    e4bc:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    e4c0:	1c 16       	cp	r1, r28
    e4c2:	1d 06       	cpc	r1, r29
    e4c4:	fc f4       	brge	.+62     	; 0xe504 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    e4c6:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    e4c8:	c0 ff       	sbrs	r28, 0
    e4ca:	0c c0       	rjmp	.+24     	; 0xe4e4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x18e>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    e4cc:	24 e0       	ldi	r18, 0x04	; 4
    e4ce:	02 9f       	mul	r16, r18
    e4d0:	f0 01       	movw	r30, r0
    e4d2:	11 24       	eor	r1, r1
    e4d4:	e2 5e       	subi	r30, 0xE2	; 226
    e4d6:	fd 4f       	sbci	r31, 0xFD	; 253
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    e4d8:	20 81       	ld	r18, Z
    e4da:	31 81       	ldd	r19, Z+1	; 0x01
    e4dc:	42 81       	ldd	r20, Z+2	; 0x02
    e4de:	53 81       	ldd	r21, Z+3	; 0x03
    e4e0:	0e 94 d0 d7 	call	0x1afa0	; 0x1afa0 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    e4e4:	d5 95       	asr	r29
    e4e6:	c7 95       	ror	r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    e4e8:	0f 5f       	subi	r16, 0xFF	; 255
    e4ea:	20 97       	sbiw	r28, 0x00	; 0
    e4ec:	69 f7       	brne	.-38     	; 0xe4c8 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x172>
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    e4ee:	11 11       	cpse	r17, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87 (discriminator 1)
    e4f0:	90 58       	subi	r25, 0x80	; 128
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:88
}
    e4f2:	df 91       	pop	r29
    e4f4:	cf 91       	pop	r28
    e4f6:	1f 91       	pop	r17
    e4f8:	0f 91       	pop	r16
    e4fa:	ff 90       	pop	r15
    e4fc:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    e4fe:	90 e0       	ldi	r25, 0x00	; 0
    e500:	80 e0       	ldi	r24, 0x00	; 0
    e502:	d8 cf       	rjmp	.-80     	; 0xe4b4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x15e>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    e504:	d1 95       	neg	r29
    e506:	c1 95       	neg	r28
    e508:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    e50a:	00 e0       	ldi	r16, 0x00	; 0
    e50c:	20 97       	sbiw	r28, 0x00	; 0
    e50e:	79 f3       	breq	.-34     	; 0xe4ee <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x198>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    e510:	c0 ff       	sbrs	r28, 0
    e512:	0c c0       	rjmp	.+24     	; 0xe52c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1d6>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    e514:	24 e0       	ldi	r18, 0x04	; 4
    e516:	02 9f       	mul	r16, r18
    e518:	f0 01       	movw	r30, r0
    e51a:	11 24       	eor	r1, r1
    e51c:	ea 5f       	subi	r30, 0xFA	; 250
    e51e:	fd 4f       	sbci	r31, 0xFD	; 253
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    e520:	20 81       	ld	r18, Z
    e522:	31 81       	ldd	r19, Z+1	; 0x01
    e524:	42 81       	ldd	r20, Z+2	; 0x02
    e526:	53 81       	ldd	r21, Z+3	; 0x03
    e528:	0e 94 d0 d7 	call	0x1afa0	; 0x1afa0 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    e52c:	d5 95       	asr	r29
    e52e:	c7 95       	ror	r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    e530:	0f 5f       	subi	r16, 0xFF	; 255
    e532:	ec cf       	rjmp	.-40     	; 0xe50c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1b6>
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    e534:	60 e0       	ldi	r22, 0x00	; 0
    e536:	70 e0       	ldi	r23, 0x00	; 0
    e538:	80 e8       	ldi	r24, 0x80	; 128
    e53a:	9f e3       	ldi	r25, 0x3F	; 63
    e53c:	da cf       	rjmp	.-76     	; 0xe4f2 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    e53e:	60 e0       	ldi	r22, 0x00	; 0
    e540:	70 e0       	ldi	r23, 0x00	; 0
    e542:	80 ec       	ldi	r24, 0xC0	; 192
    e544:	9f e7       	ldi	r25, 0x7F	; 127
    e546:	d5 cf       	rjmp	.-86     	; 0xe4f2 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>

0000e548 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    e548:	df 92       	push	r13
    e54a:	ef 92       	push	r14
    e54c:	ff 92       	push	r15
    e54e:	0f 93       	push	r16
    e550:	1f 93       	push	r17
    e552:	cf 93       	push	r28
    e554:	df 93       	push	r29
    e556:	ec 01       	movw	r28, r24
    e558:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC4EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    e55a:	0c 81       	ldd	r16, Y+4	; 0x04
    e55c:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    e55e:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e562:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e564:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    e566:	ce 01       	movw	r24, r28
    e568:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e56c:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    e56e:	d8 16       	cp	r13, r24
    e570:	89 f1       	breq	.+98     	; 0xe5d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    e572:	81 11       	cpse	r24, r1
    e574:	0a c0       	rjmp	.+20     	; 0xe58a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    e576:	81 e0       	ldi	r24, 0x01	; 1
    e578:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    e57a:	df 91       	pop	r29
    e57c:	cf 91       	pop	r28
    e57e:	1f 91       	pop	r17
    e580:	0f 91       	pop	r16
    e582:	ff 90       	pop	r15
    e584:	ef 90       	pop	r14
    e586:	df 90       	pop	r13
    e588:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    e58a:	8c 35       	cpi	r24, 0x5C	; 92
    e58c:	d1 f4       	brne	.+52     	; 0xe5c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    e58e:	ce 01       	movw	r24, r28
    e590:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    e594:	88 23       	and	r24, r24
    e596:	79 f3       	breq	.-34     	; 0xe576 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    e598:	85 37       	cpi	r24, 0x75	; 117
    e59a:	19 f4       	brne	.+6      	; 0xe5a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    e59c:	84 e0       	ldi	r24, 0x04	; 4
    e59e:	90 e0       	ldi	r25, 0x00	; 0
    e5a0:	ec cf       	rjmp	.-40     	; 0xe57a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
_ZN11ArduinoJson9Internals14EscapeSequence12unescapeCharEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    e5a2:	ef ea       	ldi	r30, 0xAF	; 175
    e5a4:	f5 e0       	ldi	r31, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    e5a6:	90 81       	ld	r25, Z
    e5a8:	99 23       	and	r25, r25
    e5aa:	51 f0       	breq	.+20     	; 0xe5c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    e5ac:	89 13       	cpse	r24, r25
    e5ae:	06 c0       	rjmp	.+12     	; 0xe5bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    e5b0:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    e5b2:	81 11       	cpse	r24, r1
    e5b4:	05 c0       	rjmp	.+10     	; 0xe5c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    e5b6:	82 e0       	ldi	r24, 0x02	; 2
    e5b8:	90 e0       	ldi	r25, 0x00	; 0
    e5ba:	df cf       	rjmp	.-66     	; 0xe57a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
_ZN11ArduinoJson9Internals14EscapeSequence12unescapeCharEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    e5bc:	32 96       	adiw	r30, 0x02	; 2
    e5be:	f3 cf       	rjmp	.-26     	; 0xe5a6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e5c0:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    e5c2:	ec 81       	ldd	r30, Y+4	; 0x04
    e5c4:	fd 81       	ldd	r31, Y+5	; 0x05
    e5c6:	9f 01       	movw	r18, r30
    e5c8:	2f 5f       	subi	r18, 0xFF	; 255
    e5ca:	3f 4f       	sbci	r19, 0xFF	; 255
    e5cc:	3d 83       	std	Y+5, r19	; 0x05
    e5ce:	2c 83       	std	Y+4, r18	; 0x04
    e5d0:	80 83       	st	Z, r24
    e5d2:	c9 cf       	rjmp	.-110    	; 0xe566 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
_ZNK11ArduinoJson9Internals11StringMoverIcE6String5c_strEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    e5d4:	ec 81       	ldd	r30, Y+4	; 0x04
    e5d6:	fd 81       	ldd	r31, Y+5	; 0x05
    e5d8:	cf 01       	movw	r24, r30
    e5da:	01 96       	adiw	r24, 0x01	; 1
    e5dc:	9d 83       	std	Y+5, r25	; 0x05
    e5de:	8c 83       	std	Y+4, r24	; 0x04
    e5e0:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    e5e2:	f7 01       	movw	r30, r14
    e5e4:	11 83       	std	Z+1, r17	; 0x01
    e5e6:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    e5e8:	83 e0       	ldi	r24, 0x03	; 3
    e5ea:	90 e0       	ldi	r25, 0x00	; 0
    e5ec:	01 2b       	or	r16, r17
    e5ee:	29 f2       	breq	.-118    	; 0xe57a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    e5f0:	90 e0       	ldi	r25, 0x00	; 0
    e5f2:	80 e0       	ldi	r24, 0x00	; 0
    e5f4:	c2 cf       	rjmp	.-124    	; 0xe57a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

0000e5f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    e5f6:	80 33       	cpi	r24, 0x30	; 48
    e5f8:	9c f0       	brlt	.+38     	; 0xe620 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    e5fa:	8a 33       	cpi	r24, 0x3A	; 58
    e5fc:	24 f0       	brlt	.+8      	; 0xe606 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    e5fe:	8f 35       	cpi	r24, 0x5F	; 95
    e600:	24 f0       	brlt	.+8      	; 0xe60a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    e602:	8b 37       	cpi	r24, 0x7B	; 123
    e604:	24 f4       	brge	.+8      	; 0xe60e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    e606:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    e608:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    e60a:	81 34       	cpi	r24, 0x41	; 65
    e60c:	4c f0       	brlt	.+18     	; 0xe620 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    e60e:	8b 35       	cpi	r24, 0x5B	; 91
    e610:	d4 f3       	brlt	.-12     	; 0xe606 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    e612:	93 ed       	ldi	r25, 0xD3	; 211
    e614:	98 0f       	add	r25, r24
    e616:	81 e0       	ldi	r24, 0x01	; 1
    e618:	92 30       	cpi	r25, 0x02	; 2
    e61a:	b0 f3       	brcs	.-20     	; 0xe608 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    e61c:	80 e0       	ldi	r24, 0x00	; 0
    e61e:	08 95       	ret
    e620:	8b 32       	cpi	r24, 0x2B	; 43
    e622:	b9 f7       	brne	.-18     	; 0xe612 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    e624:	f0 cf       	rjmp	.-32     	; 0xe606 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

0000e626 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:236
    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    e626:	8f 92       	push	r8
    e628:	9f 92       	push	r9
    e62a:	af 92       	push	r10
    e62c:	bf 92       	push	r11
    e62e:	cf 92       	push	r12
    e630:	df 92       	push	r13
    e632:	ef 92       	push	r14
    e634:	ff 92       	push	r15
    e636:	0f 93       	push	r16
    e638:	1f 93       	push	r17
    e63a:	cf 93       	push	r28
    e63c:	df 93       	push	r29
    e63e:	cd b7       	in	r28, 0x3d	; 61
    e640:	de b7       	in	r29, 0x3e	; 62
    e642:	c0 54       	subi	r28, 0x40	; 64
    e644:	d1 09       	sbc	r29, r1
    e646:	0f b6       	in	r0, 0x3f	; 63
    e648:	f8 94       	cli
    e64a:	de bf       	out	0x3e, r29	; 62
    e64c:	0f be       	out	0x3f, r0	; 63
    e64e:	cd bf       	out	0x3d, r28	; 61
    e650:	5c 01       	movw	r10, r24
    e652:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    e654:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e658:	c8 2e       	mov	r12, r24
    e65a:	ce 01       	movw	r24, r28
    e65c:	01 96       	adiw	r24, 0x01	; 1
    e65e:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    e660:	d1 2c       	mov	r13, r1
    e662:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    e664:	8c 2d       	mov	r24, r12
    e666:	0e 94 fb 72 	call	0xe5f6	; 0xe5f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    e66a:	88 23       	and	r24, r24
    e66c:	71 f0       	breq	.+28     	; 0xe68a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x64>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241 (discriminator 1)
    e66e:	9f e3       	ldi	r25, 0x3F	; 63
    e670:	d9 16       	cp	r13, r25
    e672:	59 f0       	breq	.+22     	; 0xe68a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x64>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e674:	f5 01       	movw	r30, r10
    e676:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    e678:	d3 94       	inc	r13
    e67a:	f4 01       	movw	r30, r8
    e67c:	c1 92       	st	Z+, r12
    e67e:	4f 01       	movw	r8, r30
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    e680:	c5 01       	movw	r24, r10
    e682:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e686:	c8 2e       	mov	r12, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241
  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    e688:	ed cf       	rjmp	.-38     	; 0xe664 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    e68a:	f7 01       	movw	r30, r14
    e68c:	ed 0d       	add	r30, r13
    e68e:	f1 1d       	adc	r31, r1
    e690:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    e692:	89 81       	ldd	r24, Y+1	; 0x01
    e694:	88 23       	and	r24, r24
    e696:	09 f4       	brne	.+2      	; 0xe69a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x74>
    e698:	56 c0       	rjmp	.+172    	; 0xe746 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x120>
_ZN11ArduinoJson9Internals6issignEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    e69a:	8d 32       	cpi	r24, 0x2D	; 45
    e69c:	19 f0       	breq	.+6      	; 0xe6a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x7e>
    e69e:	f7 01       	movw	r30, r14
    e6a0:	8b 32       	cpi	r24, 0x2B	; 43
    e6a2:	11 f4       	brne	.+4      	; 0xe6a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x82>
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    e6a4:	fe 01       	movw	r30, r28
    e6a6:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
  while (isdigit(*s)) s++;
    e6a8:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    e6aa:	20 ed       	ldi	r18, 0xD0	; 208
    e6ac:	29 0f       	add	r18, r25
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    e6ae:	2a 30       	cpi	r18, 0x0A	; 10
    e6b0:	d8 f3       	brcs	.-10     	; 0xe6a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x82>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    e6b2:	91 11       	cpse	r25, r1
    e6b4:	48 c0       	rjmp	.+144    	; 0xe746 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x120>
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    e6b6:	84 37       	cpi	r24, 0x74	; 116
    e6b8:	09 f4       	brne	.+2      	; 0xe6bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x96>
    e6ba:	a4 c0       	rjmp	.+328    	; 0xe804 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    e6bc:	8b 32       	cpi	r24, 0x2B	; 43
    e6be:	51 f0       	breq	.+20     	; 0xe6d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    e6c0:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    e6c2:	8d 32       	cpi	r24, 0x2D	; 45
    e6c4:	61 f4       	brne	.+24     	; 0xe6de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xb8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
    case '-':
      negative_result = true;
    e6c6:	dd 24       	eor	r13, r13
    e6c8:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
      s++;
    e6ca:	7e 01       	movw	r14, r28
    e6cc:	82 e0       	ldi	r24, 0x02	; 2
    e6ce:	e8 0e       	add	r14, r24
    e6d0:	f1 1c       	adc	r15, r1
    e6d2:	05 c0       	rjmp	.+10     	; 0xe6de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xb8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    e6d4:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    e6d6:	7e 01       	movw	r14, r28
    e6d8:	f2 e0       	ldi	r31, 0x02	; 2
    e6da:	ef 0e       	add	r14, r31
    e6dc:	f1 1c       	adc	r15, r1
    e6de:	f7 01       	movw	r30, r14
    e6e0:	20 e0       	ldi	r18, 0x00	; 0
    e6e2:	30 e0       	ldi	r19, 0x00	; 0
    e6e4:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
      break;
  }

  while (isdigit(*s)) {
    e6e6:	f1 90       	ld	r15, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    e6e8:	80 ed       	ldi	r24, 0xD0	; 208
    e6ea:	8f 0d       	add	r24, r15
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    e6ec:	8a 30       	cpi	r24, 0x0A	; 10
    e6ee:	90 f4       	brcc	.+36     	; 0xe714 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xee>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    e6f0:	aa e0       	ldi	r26, 0x0A	; 10
    e6f2:	b0 e0       	ldi	r27, 0x00	; 0
    e6f4:	0e 94 d9 d8 	call	0x1b1b2	; 0x1b1b2 <__muluhisi3>
    e6f8:	2f 2d       	mov	r18, r15
    e6fa:	ff 0c       	add	r15, r15
    e6fc:	33 0b       	sbc	r19, r19
    e6fe:	20 53       	subi	r18, 0x30	; 48
    e700:	31 09       	sbc	r19, r1
    e702:	03 2e       	mov	r0, r19
    e704:	00 0c       	add	r0, r0
    e706:	44 0b       	sbc	r20, r20
    e708:	55 0b       	sbc	r21, r21
    e70a:	26 0f       	add	r18, r22
    e70c:	37 1f       	adc	r19, r23
    e70e:	48 1f       	adc	r20, r24
    e710:	59 1f       	adc	r21, r25
    e712:	e9 cf       	rjmp	.-46     	; 0xe6e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xc0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    e714:	dd 20       	and	r13, r13
    e716:	09 f4       	brne	.+2      	; 0xe71a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xf4>
    e718:	79 c0       	rjmp	.+242    	; 0xe80c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1e6>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    e71a:	01 15       	cp	r16, r1
    e71c:	11 05       	cpc	r17, r1
    e71e:	81 f0       	breq	.+32     	; 0xe740 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    e720:	87 e0       	ldi	r24, 0x07	; 7
    e722:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    e724:	21 15       	cp	r18, r1
    e726:	31 05       	cpc	r19, r1
    e728:	41 05       	cpc	r20, r1
    e72a:	51 05       	cpc	r21, r1
    e72c:	11 f4       	brne	.+4      	; 0xe732 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x10c>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    e72e:	86 e0       	ldi	r24, 0x06	; 6
    e730:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    e732:	f8 01       	movw	r30, r16
    e734:	91 83       	std	Z+1, r25	; 0x01
    e736:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    e738:	22 83       	std	Z+2, r18	; 0x02
    e73a:	33 83       	std	Z+3, r19	; 0x03
    e73c:	44 83       	std	Z+4, r20	; 0x04
    e73e:	55 83       	std	Z+5, r21	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    e740:	90 e0       	ldi	r25, 0x00	; 0
    e742:	80 e0       	ldi	r24, 0x00	; 0
    e744:	4b c0       	rjmp	.+150    	; 0xe7dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1b6>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
    }
    buffer[n] = 0;

    if (isInteger(buffer)) {
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    e746:	c7 01       	movw	r24, r14
    e748:	0e 94 ef 39 	call	0x73de	; 0x73de <ArduinoJson::Internals::isFloat(char const*)>
    e74c:	88 23       	and	r24, r24
    e74e:	81 f0       	breq	.+32     	; 0xe770 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x14a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:251
      result.set(parseFloat<JsonFloat>(buffer));
    e750:	c7 01       	movw	r24, r14
    e752:	0e 94 ab 71 	call	0xe356	; 0xe356 <float ArduinoJson::Internals::parseFloat<float>(char const*)>
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    e756:	01 15       	cp	r16, r1
    e758:	11 05       	cpc	r17, r1
    e75a:	91 f3       	breq	.-28     	; 0xe740 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    e75c:	2a e0       	ldi	r18, 0x0A	; 10
    e75e:	30 e0       	ldi	r19, 0x00	; 0
    e760:	f8 01       	movw	r30, r16
    e762:	31 83       	std	Z+1, r19	; 0x01
    e764:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    e766:	62 83       	std	Z+2, r22	; 0x02
    e768:	73 83       	std	Z+3, r23	; 0x03
    e76a:	84 83       	std	Z+4, r24	; 0x04
    e76c:	95 83       	std	Z+5, r25	; 0x05
    e76e:	e8 cf       	rjmp	.-48     	; 0xe740 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
    } else if (!strcmp(buffer, "true")) {
    e770:	6a eb       	ldi	r22, 0xBA	; 186
    e772:	75 e0       	ldi	r23, 0x05	; 5
    e774:	c7 01       	movw	r24, r14
    e776:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    e77a:	89 2b       	or	r24, r25
    e77c:	89 f4       	brne	.+34     	; 0xe7a0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x17a>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    e77e:	01 15       	cp	r16, r1
    e780:	11 05       	cpc	r17, r1
    e782:	f1 f2       	breq	.-68     	; 0xe740 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    e784:	85 e0       	ldi	r24, 0x05	; 5
    e786:	90 e0       	ldi	r25, 0x00	; 0
    e788:	f8 01       	movw	r30, r16
    e78a:	91 83       	std	Z+1, r25	; 0x01
    e78c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    e78e:	81 e0       	ldi	r24, 0x01	; 1
    e790:	90 e0       	ldi	r25, 0x00	; 0
    e792:	a0 e0       	ldi	r26, 0x00	; 0
    e794:	b0 e0       	ldi	r27, 0x00	; 0
    e796:	82 83       	std	Z+2, r24	; 0x02
    e798:	93 83       	std	Z+3, r25	; 0x03
    e79a:	a4 83       	std	Z+4, r26	; 0x04
    e79c:	b5 83       	std	Z+5, r27	; 0x05
    e79e:	d0 cf       	rjmp	.-96     	; 0xe740 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    e7a0:	6f eb       	ldi	r22, 0xBF	; 191
    e7a2:	75 e0       	ldi	r23, 0x05	; 5
    e7a4:	c7 01       	movw	r24, r14
    e7a6:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    e7aa:	89 2b       	or	r24, r25
    e7ac:	69 f4       	brne	.+26     	; 0xe7c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1a2>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    e7ae:	01 15       	cp	r16, r1
    e7b0:	11 05       	cpc	r17, r1
    e7b2:	31 f2       	breq	.-116    	; 0xe740 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    e7b4:	85 e0       	ldi	r24, 0x05	; 5
    e7b6:	90 e0       	ldi	r25, 0x00	; 0
    e7b8:	f8 01       	movw	r30, r16
    e7ba:	91 83       	std	Z+1, r25	; 0x01
    e7bc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    e7be:	12 82       	std	Z+2, r1	; 0x02
    e7c0:	13 82       	std	Z+3, r1	; 0x03
    e7c2:	14 82       	std	Z+4, r1	; 0x04
    e7c4:	15 82       	std	Z+5, r1	; 0x05
    e7c6:	bc cf       	rjmp	.-136    	; 0xe740 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    e7c8:	65 ec       	ldi	r22, 0xC5	; 197
    e7ca:	75 e0       	ldi	r23, 0x05	; 5
    e7cc:	c7 01       	movw	r24, r14
    e7ce:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    e7d2:	89 2b       	or	r24, r25
    e7d4:	09 f4       	brne	.+2      	; 0xe7d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1b2>
    e7d6:	b4 cf       	rjmp	.-152    	; 0xe740 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    e7d8:	82 e0       	ldi	r24, 0x02	; 2
    e7da:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:262
    }
    return DeserializationError::Ok;
  }
    e7dc:	c0 5c       	subi	r28, 0xC0	; 192
    e7de:	df 4f       	sbci	r29, 0xFF	; 255
    e7e0:	0f b6       	in	r0, 0x3f	; 63
    e7e2:	f8 94       	cli
    e7e4:	de bf       	out	0x3e, r29	; 62
    e7e6:	0f be       	out	0x3f, r0	; 63
    e7e8:	cd bf       	out	0x3d, r28	; 61
    e7ea:	df 91       	pop	r29
    e7ec:	cf 91       	pop	r28
    e7ee:	1f 91       	pop	r17
    e7f0:	0f 91       	pop	r16
    e7f2:	ff 90       	pop	r15
    e7f4:	ef 90       	pop	r14
    e7f6:	df 90       	pop	r13
    e7f8:	cf 90       	pop	r12
    e7fa:	bf 90       	pop	r11
    e7fc:	af 90       	pop	r10
    e7fe:	9f 90       	pop	r9
    e800:	8f 90       	pop	r8
    e802:	08 95       	ret
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    e804:	21 e0       	ldi	r18, 0x01	; 1
    e806:	30 e0       	ldi	r19, 0x00	; 0
    e808:	40 e0       	ldi	r20, 0x00	; 0
    e80a:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    e80c:	01 15       	cp	r16, r1
    e80e:	11 05       	cpc	r17, r1
    e810:	09 f0       	breq	.+2      	; 0xe814 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1ee>
    e812:	8d cf       	rjmp	.-230    	; 0xe72e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x108>
    e814:	95 cf       	rjmp	.-214    	; 0xe740 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>

0000e816 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE8parseKeyEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:166
    } else {
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    e816:	cf 92       	push	r12
    e818:	df 92       	push	r13
    e81a:	ef 92       	push	r14
    e81c:	ff 92       	push	r15
    e81e:	1f 93       	push	r17
    e820:	cf 93       	push	r28
    e822:	df 93       	push	r29
    e824:	ec 01       	movw	r28, r24
    e826:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
    if (isQuote(current())) {
    e828:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7isQuoteEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    e82c:	87 32       	cpi	r24, 0x27	; 39
    e82e:	a1 f0       	breq	.+40     	; 0xe858 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x42>
    e830:	82 32       	cpi	r24, 0x22	; 34
    e832:	91 f0       	breq	.+36     	; 0xe858 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x42>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC4EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    e834:	ec 80       	ldd	r14, Y+4	; 0x04
    e836:	fd 80       	ldd	r15, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    e838:	ce 01       	movw	r24, r28
    e83a:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e83e:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    e840:	81 11       	cpse	r24, r1
    e842:	15 c0       	rjmp	.+42     	; 0xe86e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x58>
    e844:	81 e0       	ldi	r24, 0x01	; 1
    e846:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE8parseKeyEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:172
    if (isQuote(current())) {
      return parseQuotedString(key);
    } else {
      return parseNonQuotedString(key);
    }
  }
    e848:	df 91       	pop	r29
    e84a:	cf 91       	pop	r28
    e84c:	1f 91       	pop	r17
    e84e:	ff 90       	pop	r15
    e850:	ef 90       	pop	r14
    e852:	df 90       	pop	r13
    e854:	cf 90       	pop	r12
    e856:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    e858:	b6 01       	movw	r22, r12
    e85a:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:172
    } else {
      return parseNonQuotedString(key);
    }
  }
    e85c:	df 91       	pop	r29
    e85e:	cf 91       	pop	r28
    e860:	1f 91       	pop	r17
    e862:	ff 90       	pop	r15
    e864:	ef 90       	pop	r14
    e866:	df 90       	pop	r13
    e868:	cf 90       	pop	r12
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    e86a:	0c 94 a4 72 	jmp	0xe548	; 0xe548 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    e86e:	0e 94 fb 72 	call	0xe5f6	; 0xe5f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    e872:	88 23       	and	r24, r24
    e874:	09 f1       	breq	.+66     	; 0xe8b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0xa2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e876:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    e878:	ec 81       	ldd	r30, Y+4	; 0x04
    e87a:	fd 81       	ldd	r31, Y+5	; 0x05
    e87c:	cf 01       	movw	r24, r30
    e87e:	01 96       	adiw	r24, 0x01	; 1
    e880:	9d 83       	std	Y+5, r25	; 0x05
    e882:	8c 83       	std	Y+4, r24	; 0x04
    e884:	10 83       	st	Z, r17
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    e886:	ce 01       	movw	r24, r28
    e888:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e88c:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    e88e:	0e 94 fb 72 	call	0xe5f6	; 0xe5f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    e892:	81 11       	cpse	r24, r1
    e894:	f0 cf       	rjmp	.-32     	; 0xe876 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x60>
_ZNK11ArduinoJson9Internals11StringMoverIcE6String5c_strEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    e896:	ec 81       	ldd	r30, Y+4	; 0x04
    e898:	fd 81       	ldd	r31, Y+5	; 0x05
    e89a:	cf 01       	movw	r24, r30
    e89c:	01 96       	adiw	r24, 0x01	; 1
    e89e:	9d 83       	std	Y+5, r25	; 0x05
    e8a0:	8c 83       	std	Y+4, r24	; 0x04
    e8a2:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    e8a4:	f6 01       	movw	r30, r12
    e8a6:	f1 82       	std	Z+1, r15	; 0x01
    e8a8:	e0 82       	st	Z, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:233
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
    e8aa:	90 e0       	ldi	r25, 0x00	; 0
    e8ac:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    e8ae:	ef 28       	or	r14, r15
    e8b0:	59 f6       	brne	.-106    	; 0xe848 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>
    e8b2:	83 e0       	ldi	r24, 0x03	; 3
    e8b4:	90 e0       	ldi	r25, 0x00	; 0
    e8b6:	c8 cf       	rjmp	.-112    	; 0xe848 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:228
        move();
        str.append(c);
        c = current();
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
    e8b8:	82 e0       	ldi	r24, 0x02	; 2
    e8ba:	90 e0       	ldi	r25, 0x00	; 0
    e8bc:	c5 cf       	rjmp	.-118    	; 0xe848 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>

0000e8be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:106
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    e8be:	3f 92       	push	r3
    e8c0:	4f 92       	push	r4
    e8c2:	5f 92       	push	r5
    e8c4:	6f 92       	push	r6
    e8c6:	7f 92       	push	r7
    e8c8:	8f 92       	push	r8
    e8ca:	9f 92       	push	r9
    e8cc:	af 92       	push	r10
    e8ce:	bf 92       	push	r11
    e8d0:	cf 92       	push	r12
    e8d2:	df 92       	push	r13
    e8d4:	ef 92       	push	r14
    e8d6:	ff 92       	push	r15
    e8d8:	0f 93       	push	r16
    e8da:	1f 93       	push	r17
    e8dc:	cf 93       	push	r28
    e8de:	df 93       	push	r29
    e8e0:	1f 92       	push	r1
    e8e2:	1f 92       	push	r1
    e8e4:	cd b7       	in	r28, 0x3d	; 61
    e8e6:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    e8e8:	dc 01       	movw	r26, r24
    e8ea:	16 96       	adiw	r26, 0x06	; 6
    e8ec:	2c 91       	ld	r18, X
    e8ee:	16 97       	sbiw	r26, 0x06	; 6
    e8f0:	21 11       	cpse	r18, r1
    e8f2:	16 c0       	rjmp	.+44     	; 0xe920 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x62>
    e8f4:	85 e0       	ldi	r24, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    e8f6:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:156

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;
    }
  }
    e8f8:	0f 90       	pop	r0
    e8fa:	0f 90       	pop	r0
    e8fc:	df 91       	pop	r29
    e8fe:	cf 91       	pop	r28
    e900:	1f 91       	pop	r17
    e902:	0f 91       	pop	r16
    e904:	ff 90       	pop	r15
    e906:	ef 90       	pop	r14
    e908:	df 90       	pop	r13
    e90a:	cf 90       	pop	r12
    e90c:	bf 90       	pop	r11
    e90e:	af 90       	pop	r10
    e910:	9f 90       	pop	r9
    e912:	8f 90       	pop	r8
    e914:	7f 90       	pop	r7
    e916:	6f 90       	pop	r6
    e918:	5f 90       	pop	r5
    e91a:	4f 90       	pop	r4
    e91c:	3f 90       	pop	r3
    e91e:	08 95       	ret
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    e920:	6b 01       	movw	r12, r22
    e922:	61 15       	cp	r22, r1
    e924:	71 05       	cpc	r23, r1
    e926:	11 f4       	brne	.+4      	; 0xe92c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x6e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    e928:	83 e0       	ldi	r24, 0x03	; 3
    e92a:	e5 cf       	rjmp	.-54     	; 0xe8f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
    e92c:	8c 01       	movw	r16, r24
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    e92e:	89 e0       	ldi	r24, 0x09	; 9
    e930:	90 e0       	ldi	r25, 0x00	; 0
    e932:	fb 01       	movw	r30, r22
    e934:	91 83       	std	Z+1, r25	; 0x01
    e936:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    e938:	13 82       	std	Z+3, r1	; 0x03
    e93a:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    e93c:	15 82       	std	Z+5, r1	; 0x05
    e93e:	14 82       	std	Z+4, r1	; 0x04
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    e940:	4b 01       	movw	r8, r22
    e942:	f2 e0       	ldi	r31, 0x02	; 2
    e944:	8f 0e       	add	r8, r31
    e946:	91 1c       	adc	r9, r1
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    e948:	7a 01       	movw	r14, r20
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e94a:	cd 01       	movw	r24, r26
    e94c:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e950:	8b 37       	cpi	r24, 0x7B	; 123
    e952:	11 f0       	breq	.+4      	; 0xe958 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x9a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:132
      if (err) return err;

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;
    e954:	82 e0       	ldi	r24, 0x02	; 2
    e956:	cf cf       	rjmp	.-98     	; 0xe8f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e958:	d8 01       	movw	r26, r16
    e95a:	18 96       	adiw	r26, 0x08	; 8
    e95c:	1c 92       	st	X, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    e95e:	c8 01       	movw	r24, r16
    e960:	0e 94 68 71 	call	0xe2d0	; 0xe2d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    e964:	00 97       	sbiw	r24, 0x00	; 0
    e966:	41 f6       	brne	.-112    	; 0xe8f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e968:	c8 01       	movw	r24, r16
    e96a:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e96e:	8d 37       	cpi	r24, 0x7D	; 125
    e970:	09 f4       	brne	.+2      	; 0xe974 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xb6>
    e972:	4b c0       	rjmp	.+150    	; 0xea0a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x14c>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    e974:	8c e0       	ldi	r24, 0x0C	; 12
    e976:	38 2e       	mov	r3, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:126

    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
    e978:	be 01       	movw	r22, r28
    e97a:	6f 5f       	subi	r22, 0xFF	; 255
    e97c:	7f 4f       	sbci	r23, 0xFF	; 255
    e97e:	c8 01       	movw	r24, r16
    e980:	0e 94 0b 74 	call	0xe816	; 0xe816 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
      if (err) return err;
    e984:	00 97       	sbiw	r24, 0x00	; 0
    e986:	09 f0       	breq	.+2      	; 0xe98a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xcc>
    e988:	b7 cf       	rjmp	.-146    	; 0xe8f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    e98a:	c8 01       	movw	r24, r16
    e98c:	0e 94 68 71 	call	0xe2d0	; 0xe2d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    e990:	00 97       	sbiw	r24, 0x00	; 0
    e992:	09 f0       	breq	.+2      	; 0xe996 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xd8>
    e994:	b1 cf       	rjmp	.-158    	; 0xe8f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e996:	c8 01       	movw	r24, r16
    e998:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e99c:	8a 33       	cpi	r24, 0x3A	; 58
    e99e:	d1 f6       	brne	.-76     	; 0xe954 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x96>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e9a0:	d8 01       	movw	r26, r16
    e9a2:	18 96       	adiw	r26, 0x08	; 8
    e9a4:	1c 92       	st	X, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    e9a6:	a9 80       	ldd	r10, Y+1	; 0x01
    e9a8:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    e9aa:	a1 14       	cp	r10, r1
    e9ac:	b1 04       	cpc	r11, r1
    e9ae:	89 f5       	brne	.+98     	; 0xea12 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x154>
    e9b0:	90 e0       	ldi	r25, 0x00	; 0
    e9b2:	80 e0       	ldi	r24, 0x00	; 0
    e9b4:	30 e0       	ldi	r19, 0x00	; 0
    e9b6:	20 e0       	ldi	r18, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    e9b8:	43 2e       	mov	r4, r19
    e9ba:	52 2e       	mov	r5, r18
    e9bc:	3c 01       	movw	r6, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    e9be:	89 2b       	or	r24, r25
    e9c0:	09 f4       	brne	.+2      	; 0xe9c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x106>
    e9c2:	b2 cf       	rjmp	.-156    	; 0xe928 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x6a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    e9c4:	d8 01       	movw	r26, r16
    e9c6:	16 96       	adiw	r26, 0x06	; 6
    e9c8:	8c 91       	ld	r24, X
    e9ca:	16 97       	sbiw	r26, 0x06	; 6
    e9cc:	81 50       	subi	r24, 0x01	; 1
    e9ce:	16 96       	adiw	r26, 0x06	; 6
    e9d0:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    e9d2:	b3 01       	movw	r22, r6
    e9d4:	a2 01       	movw	r20, r4
    e9d6:	c8 01       	movw	r24, r16
    e9d8:	0e 94 53 75 	call	0xeaa6	; 0xeaa6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    e9dc:	f8 01       	movw	r30, r16
    e9de:	26 81       	ldd	r18, Z+6	; 0x06
    e9e0:	2f 5f       	subi	r18, 0xFF	; 255
    e9e2:	26 83       	std	Z+6, r18	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    e9e4:	00 97       	sbiw	r24, 0x00	; 0
    e9e6:	09 f0       	breq	.+2      	; 0xe9ea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x12c>
    e9e8:	87 cf       	rjmp	.-242    	; 0xe8f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    e9ea:	c8 01       	movw	r24, r16
    e9ec:	0e 94 68 71 	call	0xe2d0	; 0xe2d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    e9f0:	00 97       	sbiw	r24, 0x00	; 0
    e9f2:	09 f0       	breq	.+2      	; 0xe9f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x138>
    e9f4:	81 cf       	rjmp	.-254    	; 0xe8f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e9f6:	c8 01       	movw	r24, r16
    e9f8:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e9fc:	8d 37       	cpi	r24, 0x7D	; 125
    e9fe:	09 f0       	breq	.+2      	; 0xea02 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x144>
    ea00:	43 c0       	rjmp	.+134    	; 0xea88 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1ca>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    ea02:	d8 01       	movw	r26, r16
    ea04:	18 96       	adiw	r26, 0x08	; 8
    ea06:	1c 92       	st	X, r1
    ea08:	02 c0       	rjmp	.+4      	; 0xea0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x150>
    ea0a:	f8 01       	movw	r30, r16
    ea0c:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:149
      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;

      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
    ea0e:	80 e0       	ldi	r24, 0x00	; 0
    ea10:	72 cf       	rjmp	.-284    	; 0xe8f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    ea12:	b5 01       	movw	r22, r10
    ea14:	c4 01       	movw	r24, r8
    ea16:	0e 94 76 39 	call	0x72ec	; 0x72ec <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    ea1a:	00 97       	sbiw	r24, 0x00	; 0
    ea1c:	49 f5       	brne	.+82     	; 0xea70 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1b2>
_ZN11ArduinoJson9Internals21AllocableInMemoryPoolnwEjPNS0_10MemoryPoolE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    ea1e:	d7 01       	movw	r26, r14
    ea20:	ed 91       	ld	r30, X+
    ea22:	fc 91       	ld	r31, X
    ea24:	01 90       	ld	r0, Z+
    ea26:	f0 81       	ld	r31, Z
    ea28:	e0 2d       	mov	r30, r0
    ea2a:	6c e0       	ldi	r22, 0x0C	; 12
    ea2c:	70 e0       	ldi	r23, 0x00	; 0
    ea2e:	c7 01       	movw	r24, r14
    ea30:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    ea32:	00 97       	sbiw	r24, 0x00	; 0
    ea34:	09 f4       	brne	.+2      	; 0xea38 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x17a>
    ea36:	bc cf       	rjmp	.-136    	; 0xe9b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xf2>
    ea38:	fc 01       	movw	r30, r24
    ea3a:	23 2d       	mov	r18, r3
    ea3c:	11 92       	st	Z+, r1
    ea3e:	2a 95       	dec	r18
    ea40:	e9 f7       	brne	.-6      	; 0xea3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x17e>
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    ea42:	dc 01       	movw	r26, r24
    ea44:	1d 92       	st	X+, r1
    ea46:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    ea48:	d6 01       	movw	r26, r12
    ea4a:	14 96       	adiw	r26, 0x04	; 4
    ea4c:	ed 91       	ld	r30, X+
    ea4e:	fc 91       	ld	r31, X
    ea50:	15 97       	sbiw	r26, 0x05	; 5
    ea52:	30 97       	sbiw	r30, 0x00	; 0
    ea54:	81 f0       	breq	.+32     	; 0xea76 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    ea56:	dc 01       	movw	r26, r24
    ea58:	19 96       	adiw	r26, 0x09	; 9
    ea5a:	fc 93       	st	X, r31
    ea5c:	ee 93       	st	-X, r30
    ea5e:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    ea60:	97 83       	std	Z+7, r25	; 0x07
    ea62:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    ea64:	f6 01       	movw	r30, r12
    ea66:	95 83       	std	Z+5, r25	; 0x05
    ea68:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    ea6a:	fc 01       	movw	r30, r24
    ea6c:	b3 86       	std	Z+11, r11	; 0x0b
    ea6e:	a2 86       	std	Z+10, r10	; 0x0a
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
    ea70:	3e 2d       	mov	r19, r14
    ea72:	2f 2d       	mov	r18, r15
    ea74:	a1 cf       	rjmp	.-190    	; 0xe9b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xfa>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    ea76:	13 96       	adiw	r26, 0x03	; 3
    ea78:	9c 93       	st	X, r25
    ea7a:	8e 93       	st	-X, r24
    ea7c:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    ea7e:	15 96       	adiw	r26, 0x05	; 5
    ea80:	9c 93       	st	X, r25
    ea82:	8e 93       	st	-X, r24
    ea84:	14 97       	sbiw	r26, 0x04	; 4
    ea86:	f1 cf       	rjmp	.-30     	; 0xea6a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1ac>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    ea88:	c8 01       	movw	r24, r16
    ea8a:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    ea8e:	8c 32       	cpi	r24, 0x2C	; 44
    ea90:	09 f0       	breq	.+2      	; 0xea94 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1d6>
    ea92:	60 cf       	rjmp	.-320    	; 0xe954 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x96>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    ea94:	f8 01       	movw	r30, r16
    ea96:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    ea98:	c8 01       	movw	r24, r16
    ea9a:	0e 94 68 71 	call	0xe2d0	; 0xe2d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    ea9e:	00 97       	sbiw	r24, 0x00	; 0
    eaa0:	09 f4       	brne	.+2      	; 0xeaa4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1e6>
    eaa2:	6a cf       	rjmp	.-300    	; 0xe978 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xba>
    eaa4:	29 cf       	rjmp	.-430    	; 0xe8f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>

0000eaa6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    eaa6:	8f 92       	push	r8
    eaa8:	9f 92       	push	r9
    eaaa:	af 92       	push	r10
    eaac:	bf 92       	push	r11
    eaae:	ef 92       	push	r14
    eab0:	ff 92       	push	r15
    eab2:	0f 93       	push	r16
    eab4:	1f 93       	push	r17
    eab6:	cf 93       	push	r28
    eab8:	df 93       	push	r29
    eaba:	1f 92       	push	r1
    eabc:	1f 92       	push	r1
    eabe:	cd b7       	in	r28, 0x3d	; 61
    eac0:	de b7       	in	r29, 0x3e	; 62
    eac2:	8c 01       	movw	r16, r24
    eac4:	4a 01       	movw	r8, r20
    eac6:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    eac8:	0e 94 68 71 	call	0xe2d0	; 0xe2d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    eacc:	00 97       	sbiw	r24, 0x00	; 0
    eace:	e1 f4       	brne	.+56     	; 0xeb08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    ead0:	c8 01       	movw	r24, r16
    ead2:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    ead6:	8b 35       	cpi	r24, 0x5B	; 91
    ead8:	91 f0       	breq	.+36     	; 0xeafe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58>
    eada:	8b 37       	cpi	r24, 0x7B	; 123
    eadc:	11 f1       	breq	.+68     	; 0xeb22 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7c>
    eade:	75 01       	movw	r14, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    eae0:	c8 01       	movw	r24, r16
    eae2:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7isQuoteEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    eae6:	87 32       	cpi	r24, 0x27	; 39
    eae8:	11 f1       	breq	.+68     	; 0xeb2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    eaea:	82 32       	cpi	r24, 0x22	; 34
    eaec:	01 f1       	breq	.+64     	; 0xeb2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:162

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
      return parseStringValue(variant);
    } else {
      return parseNumericValue(variant);
    eaee:	b5 01       	movw	r22, r10
    eaf0:	a4 01       	movw	r20, r8
    eaf2:	c8 01       	movw	r24, r16
    eaf4:	0e 94 13 73 	call	0xe626	; 0xe626 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)>
    eaf8:	9c 01       	movw	r18, r24
    eafa:	c9 01       	movw	r24, r18
    eafc:	05 c0       	rjmp	.+10     	; 0xeb08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:34
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    switch (current()) {
      case '[':
        return parseArray(variant);
    eafe:	b5 01       	movw	r22, r10
    eb00:	a4 01       	movw	r20, r8
    eb02:	c8 01       	movw	r24, r16
    eb04:	0e 94 af 75 	call	0xeb5e	; 0xeb5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    eb08:	0f 90       	pop	r0
    eb0a:	0f 90       	pop	r0
    eb0c:	df 91       	pop	r29
    eb0e:	cf 91       	pop	r28
    eb10:	1f 91       	pop	r17
    eb12:	0f 91       	pop	r16
    eb14:	ff 90       	pop	r15
    eb16:	ef 90       	pop	r14
    eb18:	bf 90       	pop	r11
    eb1a:	af 90       	pop	r10
    eb1c:	9f 90       	pop	r9
    eb1e:	8f 90       	pop	r8
    eb20:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:37
    switch (current()) {
      case '[':
        return parseArray(variant);

      case '{':
        return parseObject(variant);
    eb22:	b5 01       	movw	r22, r10
    eb24:	a4 01       	movw	r20, r8
    eb26:	c8 01       	movw	r24, r16
    eb28:	0e 94 5f 74 	call	0xe8be	; 0xe8be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)>
    eb2c:	ed cf       	rjmp	.-38     	; 0xeb08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    eb2e:	be 01       	movw	r22, r28
    eb30:	6f 5f       	subi	r22, 0xFF	; 255
    eb32:	7f 4f       	sbci	r23, 0xFF	; 255
    eb34:	c8 01       	movw	r24, r16
    eb36:	0e 94 a4 72 	call	0xe548	; 0xe548 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    eb3a:	9c 01       	movw	r18, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    eb3c:	89 2b       	or	r24, r25
    eb3e:	e9 f6       	brne	.-70     	; 0xeafa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x54>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    eb40:	e1 14       	cp	r14, r1
    eb42:	f1 04       	cpc	r15, r1
    eb44:	49 f0       	breq	.+18     	; 0xeb58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    eb46:	89 81       	ldd	r24, Y+1	; 0x01
    eb48:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    eb4a:	23 e0       	ldi	r18, 0x03	; 3
    eb4c:	30 e0       	ldi	r19, 0x00	; 0
    eb4e:	f7 01       	movw	r30, r14
    eb50:	31 83       	std	Z+1, r19	; 0x01
    eb52:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    eb54:	93 83       	std	Z+3, r25	; 0x03
    eb56:	82 83       	std	Z+2, r24	; 0x02
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:179
    return DeserializationError::Ok;
    eb58:	30 e0       	ldi	r19, 0x00	; 0
    eb5a:	20 e0       	ldi	r18, 0x00	; 0
    eb5c:	ce cf       	rjmp	.-100    	; 0xeafa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x54>

0000eb5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:68
    if (current() != charToSkip) return false;
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    eb5e:	0f 93       	push	r16
    eb60:	1f 93       	push	r17
    eb62:	cf 93       	push	r28
    eb64:	df 93       	push	r29
    eb66:	00 d0       	rcall	.+0      	; 0xeb68 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xa>
    eb68:	1f 92       	push	r1
    eb6a:	cd b7       	in	r28, 0x3d	; 61
    eb6c:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    eb6e:	fc 01       	movw	r30, r24
    eb70:	26 81       	ldd	r18, Z+6	; 0x06
    eb72:	21 11       	cpse	r18, r1
    eb74:	0b c0       	rjmp	.+22     	; 0xeb8c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x2e>
    eb76:	85 e0       	ldi	r24, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:102
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    eb78:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:104 (discriminator 2)
    }
  }
    eb7a:	0f 90       	pop	r0
    eb7c:	0f 90       	pop	r0
    eb7e:	0f 90       	pop	r0
    eb80:	0f 90       	pop	r0
    eb82:	df 91       	pop	r29
    eb84:	cf 91       	pop	r28
    eb86:	1f 91       	pop	r17
    eb88:	0f 91       	pop	r16
    eb8a:	08 95       	ret
_ZN11ArduinoJson11JsonVariant2toINS_9JsonArrayEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    eb8c:	fb 01       	movw	r30, r22
    eb8e:	30 97       	sbiw	r30, 0x00	; 0
    eb90:	99 f0       	breq	.+38     	; 0xebb8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x5a>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    eb92:	28 e0       	ldi	r18, 0x08	; 8
    eb94:	30 e0       	ldi	r19, 0x00	; 0
    eb96:	31 83       	std	Z+1, r19	; 0x01
    eb98:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    eb9a:	13 82       	std	Z+3, r1	; 0x03
    eb9c:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    eb9e:	15 82       	std	Z+5, r1	; 0x05
    eba0:	14 82       	std	Z+4, r1	; 0x04
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:73
    return &content.asArray;
    eba2:	9b 01       	movw	r18, r22
    eba4:	2e 5f       	subi	r18, 0xFE	; 254
    eba6:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:71
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonArray array = variant.to<JsonArray>();
    eba8:	5a 83       	std	Y+2, r21	; 0x02
    ebaa:	49 83       	std	Y+1, r20	; 0x01
    ebac:	3c 83       	std	Y+4, r19	; 0x04
    ebae:	2b 83       	std	Y+3, r18	; 0x03
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:72
    if (array.isNull()) return DeserializationError::NoMemory;
    ebb0:	23 2b       	or	r18, r19
    ebb2:	39 f4       	brne	.+14     	; 0xebc2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x64>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    ebb4:	83 e0       	ldi	r24, 0x03	; 3
    ebb6:	e0 cf       	rjmp	.-64     	; 0xeb78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
_ZN11ArduinoJson11JsonVariant2toINS_9JsonArrayEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78
    ebb8:	30 e0       	ldi	r19, 0x00	; 0
    ebba:	20 e0       	ldi	r18, 0x00	; 0
    ebbc:	50 e0       	ldi	r21, 0x00	; 0
    ebbe:	40 e0       	ldi	r20, 0x00	; 0
    ebc0:	f3 cf       	rjmp	.-26     	; 0xeba8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x4a>
    ebc2:	8c 01       	movw	r16, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    ebc4:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    ebc8:	8b 35       	cpi	r24, 0x5B	; 91
    ebca:	11 f0       	breq	.+4      	; 0xebd0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x72>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:102
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    ebcc:	82 e0       	ldi	r24, 0x02	; 2
    ebce:	d4 cf       	rjmp	.-88     	; 0xeb78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    ebd0:	f8 01       	movw	r30, r16
    ebd2:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    ebd4:	c8 01       	movw	r24, r16
    ebd6:	0e 94 68 71 	call	0xe2d0	; 0xe2d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    ebda:	00 97       	sbiw	r24, 0x00	; 0
    ebdc:	71 f6       	brne	.-100    	; 0xeb7a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    ebde:	c8 01       	movw	r24, r16
    ebe0:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    ebe4:	8d 35       	cpi	r24, 0x5D	; 93
    ebe6:	21 f4       	brne	.+8      	; 0xebf0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x92>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    ebe8:	f8 01       	movw	r30, r16
    ebea:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:101
      // 2 - Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
    ebec:	80 e0       	ldi	r24, 0x00	; 0
    ebee:	c4 cf       	rjmp	.-120    	; 0xeb78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:87
    if (eat(']')) return DeserializationError::Ok;

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
    ebf0:	ce 01       	movw	r24, r28
    ebf2:	01 96       	adiw	r24, 0x01	; 1
    ebf4:	0e 94 a2 39 	call	0x7344	; 0x7344 <ArduinoJson::JsonArray::add()>
    ebf8:	ab 01       	movw	r20, r22
    ebfa:	bc 01       	movw	r22, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88
      if (value.isInvalid()) return DeserializationError::NoMemory;
    ebfc:	89 2b       	or	r24, r25
    ebfe:	d1 f2       	breq	.-76     	; 0xebb4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x56>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    ec00:	f8 01       	movw	r30, r16
    ec02:	86 81       	ldd	r24, Z+6	; 0x06
    ec04:	81 50       	subi	r24, 0x01	; 1
    ec06:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    ec08:	c8 01       	movw	r24, r16
    ec0a:	0e 94 53 75 	call	0xeaa6	; 0xeaa6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    ec0e:	f8 01       	movw	r30, r16
    ec10:	26 81       	ldd	r18, Z+6	; 0x06
    ec12:	2f 5f       	subi	r18, 0xFF	; 255
    ec14:	26 83       	std	Z+6, r18	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    ec16:	00 97       	sbiw	r24, 0x00	; 0
    ec18:	09 f0       	breq	.+2      	; 0xec1c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xbe>
    ec1a:	af cf       	rjmp	.-162    	; 0xeb7a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    ec1c:	c8 01       	movw	r24, r16
    ec1e:	0e 94 68 71 	call	0xe2d0	; 0xe2d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    ec22:	00 97       	sbiw	r24, 0x00	; 0
    ec24:	09 f0       	breq	.+2      	; 0xec28 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xca>
    ec26:	a9 cf       	rjmp	.-174    	; 0xeb7a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    ec28:	c8 01       	movw	r24, r16
    ec2a:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    ec2e:	8d 35       	cpi	r24, 0x5D	; 93
    ec30:	d9 f2       	breq	.-74     	; 0xebe8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x8a>
    ec32:	c8 01       	movw	r24, r16
    ec34:	0e 94 58 71 	call	0xe2b0	; 0xe2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    ec38:	8c 32       	cpi	r24, 0x2C	; 44
    ec3a:	41 f6       	brne	.-112    	; 0xebcc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x6e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    ec3c:	f8 01       	movw	r30, r16
    ec3e:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:85

    // Empty array?
    if (eat(']')) return DeserializationError::Ok;

    // Read each value
    for (;;) {
    ec40:	d7 cf       	rjmp	.-82     	; 0xebf0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x92>

0000ec42 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
    ec42:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
    ec44:	80 81       	ld	r24, Z
    ec46:	91 81       	ldd	r25, Z+1	; 0x01
    ec48:	87 30       	cpi	r24, 0x07	; 7
    ec4a:	91 05       	cpc	r25, r1
    ec4c:	38 f4       	brcc	.+14     	; 0xec5c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
    ec4e:	85 30       	cpi	r24, 0x05	; 5
    ec50:	91 05       	cpc	r25, r1
    ec52:	88 f4       	brcc	.+34     	; 0xec76 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
    ec54:	03 97       	sbiw	r24, 0x03	; 3
    ec56:	a0 f4       	brcc	.+40     	; 0xec80 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    ec58:	80 e0       	ldi	r24, 0x00	; 0
    ec5a:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    ec5c:	87 30       	cpi	r24, 0x07	; 7
    ec5e:	91 05       	cpc	r25, r1
    ec60:	61 f0       	breq	.+24     	; 0xec7a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
    ec62:	0a 97       	sbiw	r24, 0x0a	; 10
    ec64:	c9 f7       	brne	.-14     	; 0xec58 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    ec66:	62 81       	ldd	r22, Z+2	; 0x02
    ec68:	73 81       	ldd	r23, Z+3	; 0x03
    ec6a:	84 81       	ldd	r24, Z+4	; 0x04
    ec6c:	95 81       	ldd	r25, Z+5	; 0x05
    ec6e:	0e 94 ea d6 	call	0x1add4	; 0x1add4 <__fixunssfsi>
    ec72:	86 2f       	mov	r24, r22
    ec74:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    ec76:	82 81       	ldd	r24, Z+2	; 0x02
    ec78:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    ec7a:	82 81       	ldd	r24, Z+2	; 0x02
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    ec7c:	81 95       	neg	r24
    ec7e:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    ec80:	02 80       	ldd	r0, Z+2	; 0x02
    ec82:	f3 81       	ldd	r31, Z+3	; 0x03
    ec84:	e0 2d       	mov	r30, r0
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    ec86:	30 97       	sbiw	r30, 0x00	; 0
    ec88:	39 f3       	breq	.-50     	; 0xec58 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    ec8a:	80 81       	ld	r24, Z
    ec8c:	84 37       	cpi	r24, 0x74	; 116
    ec8e:	c9 f0       	breq	.+50     	; 0xecc2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    ec90:	8b 32       	cpi	r24, 0x2B	; 43
    ec92:	89 f0       	breq	.+34     	; 0xecb6 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
    ec94:	8d 32       	cpi	r24, 0x2D	; 45
    ec96:	81 f4       	brne	.+32     	; 0xecb8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    ec98:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    ec9a:	91 e0       	ldi	r25, 0x01	; 1
    ec9c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    ec9e:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    eca0:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    eca2:	30 ed       	ldi	r19, 0xD0	; 208
    eca4:	36 0f       	add	r19, r22
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    eca6:	3a 30       	cpi	r19, 0x0A	; 10
    eca8:	48 f4       	brcc	.+18     	; 0xecbc <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
    ecaa:	82 9f       	mul	r24, r18
    ecac:	60 0d       	add	r22, r0
    ecae:	11 24       	eor	r1, r1
    ecb0:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    ecb2:	80 53       	subi	r24, 0x30	; 48
    ecb4:	f5 cf       	rjmp	.-22     	; 0xeca0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    ecb6:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    ecb8:	90 e0       	ldi	r25, 0x00	; 0
    ecba:	f0 cf       	rjmp	.-32     	; 0xec9c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    ecbc:	91 11       	cpse	r25, r1
    ecbe:	de cf       	rjmp	.-68     	; 0xec7c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
    ecc0:	08 95       	ret
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    ecc2:	81 e0       	ldi	r24, 0x01	; 1
    ecc4:	fd cf       	rjmp	.-6      	; 0xecc0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

0000ecc6 <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2466
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
    ecc6:	2f 92       	push	r2
    ecc8:	3f 92       	push	r3
    ecca:	4f 92       	push	r4
    eccc:	5f 92       	push	r5
    ecce:	6f 92       	push	r6
    ecd0:	7f 92       	push	r7
    ecd2:	8f 92       	push	r8
    ecd4:	9f 92       	push	r9
    ecd6:	af 92       	push	r10
    ecd8:	bf 92       	push	r11
    ecda:	cf 92       	push	r12
    ecdc:	df 92       	push	r13
    ecde:	ef 92       	push	r14
    ece0:	ff 92       	push	r15
    ece2:	0f 93       	push	r16
    ece4:	1f 93       	push	r17
    ece6:	cf 93       	push	r28
    ece8:	df 93       	push	r29
    ecea:	cd b7       	in	r28, 0x3d	; 61
    ecec:	de b7       	in	r29, 0x3e	; 62
    ecee:	c8 5c       	subi	r28, 0xC8	; 200
    ecf0:	d1 09       	sbc	r29, r1
    ecf2:	0f b6       	in	r0, 0x3f	; 63
    ecf4:	f8 94       	cli
    ecf6:	de bf       	out	0x3e, r29	; 62
    ecf8:	0f be       	out	0x3f, r0	; 63
    ecfa:	cd bf       	out	0x3d, r28	; 61
    ecfc:	4c 01       	movw	r8, r24
    ecfe:	8b 01       	movw	r16, r22
    ed00:	7a 01       	movw	r14, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2479
  uint8_t id_interval = 0;
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;

  NTPClient timeClient(udpClient);
    ed02:	66 e2       	ldi	r22, 0x26	; 38
    ed04:	7e e0       	ldi	r23, 0x0E	; 14
    ed06:	ce 01       	movw	r24, r28
    ed08:	01 96       	adiw	r24, 0x01	; 1
    ed0a:	0e 94 3c ce 	call	0x19c78	; 0x19c78 <NTPClient::NTPClient(UDP&)>
    ed0e:	e0 ee       	ldi	r30, 0xE0	; 224
    ed10:	f8 e0       	ldi	r31, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2481

  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    ed12:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2481 (discriminator 2)
    ed14:	11 92       	st	Z+, r1
    ed16:	8f 5f       	subi	r24, 0xFF	; 255
    ed18:	80 38       	cpi	r24, 0x80	; 128
    ed1a:	e1 f7       	brne	.-8      	; 0xed14 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2483
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    ed1c:	80 91 e9 0e 	lds	r24, 0x0EE9	; 0x800ee9 <mqtt_receive_message>
    ed20:	90 91 ea 0e 	lds	r25, 0x0EEA	; 0x800eea <mqtt_receive_message+0x1>
    ed24:	01 96       	adiw	r24, 0x01	; 1
    ed26:	90 93 ea 0e 	sts	0x0EEA, r25	; 0x800eea <mqtt_receive_message+0x1>
    ed2a:	80 93 e9 0e 	sts	0x0EE9, r24	; 0x800ee9 <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2484
  strncpy(my_payload, (char*) payload, length);
    ed2e:	a7 01       	movw	r20, r14
    ed30:	b8 01       	movw	r22, r16
    ed32:	80 ee       	ldi	r24, 0xE0	; 224
    ed34:	98 e0       	ldi	r25, 0x08	; 8
    ed36:	0e 94 8e dc 	call	0x1b91c	; 0x1b91c <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2487
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    ed3a:	5e 01       	movw	r10, r28
    ed3c:	88 e4       	ldi	r24, 0x48	; 72
    ed3e:	a8 0e       	add	r10, r24
    ed40:	b1 1c       	adc	r11, r1
    ed42:	6f e6       	ldi	r22, 0x6F	; 111
    ed44:	75 e5       	ldi	r23, 0x55	; 85
    ed46:	c5 01       	movw	r24, r10
    ed48:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2488
  if (strcmp(str1, topic) == 0)
    ed4c:	b4 01       	movw	r22, r8
    ed4e:	c5 01       	movw	r24, r10
    ed50:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    ed54:	89 2b       	or	r24, r25
    ed56:	71 f4       	brne	.+28     	; 0xed74 <mqtt_callback(char*, unsigned char*, unsigned int)+0xae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2490
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    ed58:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    ed5c:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    ed60:	01 96       	adiw	r24, 0x01	; 1
    ed62:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    ed66:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2491
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
    ed6a:	62 e0       	ldi	r22, 0x02	; 2
    ed6c:	80 ee       	ldi	r24, 0xE0	; 224
    ed6e:	98 e0       	ldi	r25, 0x08	; 8
    ed70:	0e 94 ea 86 	call	0x10dd4	; 0x10dd4 <know_mqtt_create_or_update(char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2493
  }
  strcpy_P(str1, thermctl_subscribe);
    ed74:	66 e8       	ldi	r22, 0x86	; 134
    ed76:	75 e5       	ldi	r23, 0x55	; 85
    ed78:	c5 01       	movw	r24, r10
    ed7a:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2494
  if (strcmp(str1, topic) == 0)
    ed7e:	b4 01       	movw	r22, r8
    ed80:	c5 01       	movw	r24, r10
    ed82:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    ed86:	89 2b       	or	r24, r25
    ed88:	71 f4       	brne	.+28     	; 0xeda6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2496
  {
    mqtt_process_message++;
    ed8a:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    ed8e:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    ed92:	01 96       	adiw	r24, 0x01	; 1
    ed94:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    ed98:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2497
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
    ed9c:	61 e0       	ldi	r22, 0x01	; 1
    ed9e:	80 ee       	ldi	r24, 0xE0	; 224
    eda0:	98 e0       	ldi	r25, 0x08	; 8
    eda2:	0e 94 ea 86 	call	0x10dd4	; 0x10dd4 <know_mqtt_create_or_update(char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2502
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    eda6:	67 ed       	ldi	r22, 0xD7	; 215
    eda8:	75 e5       	ldi	r23, 0x55	; 85
    edaa:	c5 01       	movw	r24, r10
    edac:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2503
  strcat_P(str1, global_time_set);
    edb0:	6c e0       	ldi	r22, 0x0C	; 12
    edb2:	76 e5       	ldi	r23, 0x56	; 86
    edb4:	c5 01       	movw	r24, r10
    edb6:	0e 94 3b dc 	call	0x1b876	; 0x1b876 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2504
  if (strcmp(str1, topic) == 0)
    edba:	b4 01       	movw	r22, r8
    edbc:	c5 01       	movw	r24, r10
    edbe:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    edc2:	89 2b       	or	r24, r25
    edc4:	09 f0       	breq	.+2      	; 0xedc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x102>
    edc6:	bc c0       	rjmp	.+376    	; 0xef40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2506
  {
    mqtt_process_message++;
    edc8:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    edcc:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    edd0:	01 96       	adiw	r24, 0x01	; 1
    edd2:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    edd6:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
_ZN11ArduinoJson9Internals11deserializeINS0_16JsonDeserializerENS_18StaticJsonDocumentILj256EEEcEENS_20DeserializationErrorERT0_PT1_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    edda:	20 91 74 0a 	lds	r18, 0x0A74	; 0x800a74 <doc>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC4ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    edde:	85 e7       	ldi	r24, 0x75	; 117
    ede0:	9a e0       	ldi	r25, 0x0A	; 10
    ede2:	c8 57       	subi	r28, 0x78	; 120
    ede4:	df 4f       	sbci	r29, 0xFF	; 255
    ede6:	99 83       	std	Y+1, r25	; 0x01
    ede8:	88 83       	st	Y, r24
    edea:	c8 58       	subi	r28, 0x88	; 136
    edec:	d0 40       	sbci	r29, 0x00	; 0
    edee:	80 ee       	ldi	r24, 0xE0	; 224
    edf0:	98 e0       	ldi	r25, 0x08	; 8
    edf2:	c6 57       	subi	r28, 0x76	; 118
    edf4:	df 4f       	sbci	r29, 0xFF	; 255
    edf6:	99 83       	std	Y+1, r25	; 0x01
    edf8:	88 83       	st	Y, r24
    edfa:	ca 58       	subi	r28, 0x8A	; 138
    edfc:	d0 40       	sbci	r29, 0x00	; 0
    edfe:	c4 57       	subi	r28, 0x74	; 116
    ee00:	df 4f       	sbci	r29, 0xFF	; 255
    ee02:	99 83       	std	Y+1, r25	; 0x01
    ee04:	88 83       	st	Y, r24
    ee06:	cc 58       	subi	r28, 0x8C	; 140
    ee08:	d0 40       	sbci	r29, 0x00	; 0
    ee0a:	c2 57       	subi	r28, 0x72	; 114
    ee0c:	df 4f       	sbci	r29, 0xFF	; 255
    ee0e:	28 83       	st	Y, r18
    ee10:	ce 58       	subi	r28, 0x8E	; 142
    ee12:	d0 40       	sbci	r29, 0x00	; 0
    ee14:	c0 57       	subi	r28, 0x70	; 112
    ee16:	df 4f       	sbci	r29, 0xFF	; 255
    ee18:	18 82       	st	Y, r1
    ee1a:	c0 59       	subi	r28, 0x90	; 144
    ee1c:	d0 40       	sbci	r29, 0x00	; 0
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66
  }

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    ee1e:	10 92 7c 0a 	sts	0x0A7C, r1	; 0x800a7c <doc+0x8>
    ee22:	10 92 7b 0a 	sts	0x0A7B, r1	; 0x800a7b <doc+0x7>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    ee26:	10 92 7e 0b 	sts	0x0B7E, r1	; 0x800b7e <doc+0x10a>
    ee2a:	10 92 7d 0b 	sts	0x0B7D, r1	; 0x800b7d <doc+0x109>
    ee2e:	45 e7       	ldi	r20, 0x75	; 117
    ee30:	5a e0       	ldi	r21, 0x0A	; 10
    ee32:	6d e7       	ldi	r22, 0x7D	; 125
    ee34:	7b e0       	ldi	r23, 0x0B	; 11
_ZN11ArduinoJson9Internals11deserializeINS0_16JsonDeserializerENS_18StaticJsonDocumentILj256EEEcEENS_20DeserializationErrorERT0_PT1_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    ee36:	ce 01       	movw	r24, r28
    ee38:	88 57       	subi	r24, 0x78	; 120
    ee3a:	9f 4f       	sbci	r25, 0xFF	; 255
    ee3c:	0e 94 53 75 	call	0xeaa6	; 0xeaa6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    ee40:	80 91 7d 0b 	lds	r24, 0x0B7D	; 0x800b7d <doc+0x109>
    ee44:	90 91 7e 0b 	lds	r25, 0x0B7E	; 0x800b7e <doc+0x10a>
    ee48:	71 2c       	mov	r7, r1
    ee4a:	61 2c       	mov	r6, r1
    ee4c:	09 97       	sbiw	r24, 0x09	; 9
    ee4e:	21 f4       	brne	.+8      	; 0xee58 <mqtt_callback(char*, unsigned char*, unsigned int)+0x192>
    ee50:	8f e7       	ldi	r24, 0x7F	; 127
    ee52:	68 2e       	mov	r6, r24
    ee54:	8b e0       	ldi	r24, 0x0B	; 11
    ee56:	78 2e       	mov	r7, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    ee58:	6a ec       	ldi	r22, 0xCA	; 202
    ee5a:	75 e0       	ldi	r23, 0x05	; 5
    ee5c:	c3 01       	movw	r24, r6
    ee5e:	0e 94 76 39 	call	0x72ec	; 0x72ec <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>
    ee62:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    ee64:	89 2b       	or	r24, r25
    ee66:	09 f4       	brne	.+2      	; 0xee6a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a4>
    ee68:	6b c0       	rjmp	.+214    	; 0xef40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    ee6a:	6f ec       	ldi	r22, 0xCF	; 207
    ee6c:	75 e0       	ldi	r23, 0x05	; 5
    ee6e:	c3 01       	movw	r24, r6
    ee70:	0e 94 76 39 	call	0x72ec	; 0x72ec <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>
    ee74:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509
    ee76:	89 2b       	or	r24, r25
    ee78:	09 f4       	brne	.+2      	; 0xee7c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b6>
    ee7a:	62 c0       	rjmp	.+196    	; 0xef40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    ee7c:	65 ed       	ldi	r22, 0xD5	; 213
    ee7e:	75 e0       	ldi	r23, 0x05	; 5
    ee80:	c3 01       	movw	r24, r6
    ee82:	0e 94 76 39 	call	0x72ec	; 0x72ec <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>
    ee86:	1c 01       	movw	r2, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509
    ee88:	89 2b       	or	r24, r25
    ee8a:	09 f4       	brne	.+2      	; 0xee8e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c8>
    ee8c:	59 c0       	rjmp	.+178    	; 0xef40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    ee8e:	6a ed       	ldi	r22, 0xDA	; 218
    ee90:	75 e0       	ldi	r23, 0x05	; 5
    ee92:	c3 01       	movw	r24, r6
    ee94:	0e 94 76 39 	call	0x72ec	; 0x72ec <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>
    ee98:	8c 01       	movw	r16, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509
    ee9a:	89 2b       	or	r24, r25
    ee9c:	09 f4       	brne	.+2      	; 0xeea0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1da>
    ee9e:	50 c0       	rjmp	.+160    	; 0xef40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    eea0:	61 ee       	ldi	r22, 0xE1	; 225
    eea2:	75 e0       	ldi	r23, 0x05	; 5
    eea4:	c3 01       	movw	r24, r6
    eea6:	0e 94 76 39 	call	0x72ec	; 0x72ec <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509
    eeaa:	00 97       	sbiw	r24, 0x00	; 0
    eeac:	09 f4       	brne	.+2      	; 0xeeb0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ea>
    eeae:	48 c0       	rjmp	.+144    	; 0xef40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    eeb0:	0e 94 21 76 	call	0xec42	; 0xec42 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    eeb4:	c8 2e       	mov	r12, r24
    eeb6:	c8 01       	movw	r24, r16
    eeb8:	0e 94 21 76 	call	0xec42	; 0xec42 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    eebc:	d8 2e       	mov	r13, r24
    eebe:	c1 01       	movw	r24, r2
    eec0:	0e 94 21 76 	call	0xec42	; 0xec42 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    eec4:	08 2f       	mov	r16, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    eec6:	68 ee       	ldi	r22, 0xE8	; 232
    eec8:	75 e0       	ldi	r23, 0x05	; 5
    eeca:	c3 01       	movw	r24, r6
    eecc:	0e 94 76 39 	call	0x72ec	; 0x72ec <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    eed0:	10 e0       	ldi	r17, 0x00	; 0
    eed2:	00 97       	sbiw	r24, 0x00	; 0
    eed4:	19 f0       	breq	.+6      	; 0xeedc <mqtt_callback(char*, unsigned char*, unsigned int)+0x216>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    eed6:	0e 94 21 76 	call	0xec42	; 0xec42 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    eeda:	18 2f       	mov	r17, r24
    eedc:	c7 01       	movw	r24, r14
    eede:	0e 94 21 76 	call	0xec42	; 0xec42 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    eee2:	f8 2e       	mov	r15, r24
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    eee4:	d2 01       	movw	r26, r4
    eee6:	8d 91       	ld	r24, X+
    eee8:	9c 91       	ld	r25, X
    eeea:	11 97       	sbiw	r26, 0x01	; 1
    eeec:	87 30       	cpi	r24, 0x07	; 7
    eeee:	91 05       	cpc	r25, r1
    eef0:	48 f4       	brcc	.+18     	; 0xef04 <mqtt_callback(char*, unsigned char*, unsigned int)+0x23e>
    eef2:	85 30       	cpi	r24, 0x05	; 5
    eef4:	91 05       	cpc	r25, r1
    eef6:	a0 f4       	brcc	.+40     	; 0xef20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x25a>
    eef8:	03 97       	sbiw	r24, 0x03	; 3
    eefa:	08 f0       	brcs	.+2      	; 0xeefe <mqtt_callback(char*, unsigned char*, unsigned int)+0x238>
    eefc:	e7 c0       	rjmp	.+462    	; 0xf0cc <mqtt_callback(char*, unsigned char*, unsigned int)+0x406>
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    eefe:	70 e0       	ldi	r23, 0x00	; 0
    ef00:	60 e0       	ldi	r22, 0x00	; 0
    ef02:	11 c0       	rjmp	.+34     	; 0xef26 <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    ef04:	87 30       	cpi	r24, 0x07	; 7
    ef06:	91 05       	cpc	r25, r1
    ef08:	09 f4       	brne	.+2      	; 0xef0c <mqtt_callback(char*, unsigned char*, unsigned int)+0x246>
    ef0a:	d9 c0       	rjmp	.+434    	; 0xf0be <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f8>
    ef0c:	0a 97       	sbiw	r24, 0x0a	; 10
    ef0e:	b9 f7       	brne	.-18     	; 0xeefe <mqtt_callback(char*, unsigned char*, unsigned int)+0x238>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    ef10:	f2 01       	movw	r30, r4
    ef12:	62 81       	ldd	r22, Z+2	; 0x02
    ef14:	73 81       	ldd	r23, Z+3	; 0x03
    ef16:	84 81       	ldd	r24, Z+4	; 0x04
    ef18:	95 81       	ldd	r25, Z+5	; 0x05
    ef1a:	0e 94 ea d6 	call	0x1add4	; 0x1add4 <__fixunssfsi>
    ef1e:	03 c0       	rjmp	.+6      	; 0xef26 <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    ef20:	f2 01       	movw	r30, r4
    ef22:	62 81       	ldd	r22, Z+2	; 0x02
    ef24:	73 81       	ldd	r23, Z+3	; 0x03
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2510
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    ef26:	ed 2c       	mov	r14, r13
    ef28:	21 2f       	mov	r18, r17
    ef2a:	4f 2d       	mov	r20, r15
    ef2c:	ce 01       	movw	r24, r28
    ef2e:	88 57       	subi	r24, 0x78	; 120
    ef30:	9f 4f       	sbci	r25, 0xFF	; 255
    ef32:	0e 94 da c6 	call	0x18db4	; 0x18db4 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    ef36:	ce 01       	movw	r24, r28
    ef38:	88 57       	subi	r24, 0x78	; 120
    ef3a:	9f 4f       	sbci	r25, 0xFF	; 255
    ef3c:	0e 94 01 c7 	call	0x18e02	; 0x18e02 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2513
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    ef40:	67 ed       	ldi	r22, 0xD7	; 215
    ef42:	75 e5       	ldi	r23, 0x55	; 85
    ef44:	c5 01       	movw	r24, r10
    ef46:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2514
  strcat_P(str1, global_time_ntp);
    ef4a:	6c ef       	ldi	r22, 0xFC	; 252
    ef4c:	75 e5       	ldi	r23, 0x55	; 85
    ef4e:	c5 01       	movw	r24, r10
    ef50:	0e 94 3b dc 	call	0x1b876	; 0x1b876 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2515
  if (strcmp(str1, topic) == 0)
    ef54:	b4 01       	movw	r22, r8
    ef56:	c5 01       	movw	r24, r10
    ef58:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    ef5c:	89 2b       	or	r24, r25
    ef5e:	b9 f4       	brne	.+46     	; 0xef8e <mqtt_callback(char*, unsigned char*, unsigned int)+0x2c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2517
  {
    mqtt_process_message++;
    ef60:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    ef64:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    ef68:	01 96       	adiw	r24, 0x01	; 1
    ef6a:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    ef6e:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2518
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
    ef72:	0e 94 a5 4c 	call	0x994a	; 0x994a <time_get_offset()>
    ef76:	48 2f       	mov	r20, r24
    ef78:	65 e5       	ldi	r22, 0x55	; 85
    ef7a:	7e e0       	ldi	r23, 0x0E	; 14
    ef7c:	ce 01       	movw	r24, r28
    ef7e:	01 96       	adiw	r24, 0x01	; 1
    ef80:	0e 94 eb 86 	call	0x10dd6	; 0x10dd6 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char)>
    ef84:	81 30       	cpi	r24, 0x01	; 1
    ef86:	09 f0       	breq	.+2      	; 0xef8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x2c4>
    ef88:	ce c0       	rjmp	.+412    	; 0xf126 <mqtt_callback(char*, unsigned char*, unsigned int)+0x460>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2519
      selftest_clear_0(SELFTEST_ERR_NTP);
    ef8a:	0e 94 8a 4c 	call	0x9914	; 0x9914 <selftest_clear_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2524
    else
      selftest_set_0(SELFTEST_ERR_NTP);
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    ef8e:	67 ed       	ldi	r22, 0xD7	; 215
    ef90:	75 e5       	ldi	r23, 0x55	; 85
    ef92:	c5 01       	movw	r24, r10
    ef94:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2525
  strcat_P(str1, global_time_offset);
    ef98:	65 ee       	ldi	r22, 0xE5	; 229
    ef9a:	75 e5       	ldi	r23, 0x55	; 85
    ef9c:	c5 01       	movw	r24, r10
    ef9e:	0e 94 3b dc 	call	0x1b876	; 0x1b876 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2526
  if (strcmp(str1, topic) == 0)
    efa2:	b4 01       	movw	r22, r8
    efa4:	c5 01       	movw	r24, r10
    efa6:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    efaa:	89 2b       	or	r24, r25
    efac:	79 f4       	brne	.+30     	; 0xefcc <mqtt_callback(char*, unsigned char*, unsigned int)+0x306>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2528
  {
    mqtt_process_message++;
    efae:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    efb2:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    efb6:	01 96       	adiw	r24, 0x01	; 1
    efb8:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    efbc:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2529
    time_set_offset(atoi(my_payload));
    efc0:	80 ee       	ldi	r24, 0xE0	; 224
    efc2:	98 e0       	ldi	r25, 0x08	; 8
    efc4:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    efc8:	0e 94 60 4e 	call	0x9cc0	; 0x9cc0 <time_set_offset(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2533
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    efcc:	67 ed       	ldi	r22, 0xD7	; 215
    efce:	75 e5       	ldi	r23, 0x55	; 85
    efd0:	c5 01       	movw	r24, r10
    efd2:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2534
  strcat(str1, device.nazev);
    efd6:	65 e0       	ldi	r22, 0x05	; 5
    efd8:	7f e0       	ldi	r23, 0x0F	; 15
    efda:	c5 01       	movw	r24, r10
    efdc:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2535
  strcat(str1, "/tds/associate");
    efe0:	6c ee       	ldi	r22, 0xEC	; 236
    efe2:	75 e0       	ldi	r23, 0x05	; 5
    efe4:	c5 01       	movw	r24, r10
    efe6:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2536
  if (strcmp(str1, topic) == 0)
    efea:	b4 01       	movw	r22, r8
    efec:	c5 01       	movw	r24, r10
    efee:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2473
  char tmp1[32];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    eff2:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2536
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    eff4:	89 2b       	or	r24, r25
    eff6:	c1 f4       	brne	.+48     	; 0xf028 <mqtt_callback(char*, unsigned char*, unsigned int)+0x362>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2538
  {
    mqtt_process_message++;
    eff8:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    effc:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    f000:	01 96       	adiw	r24, 0x01	; 1
    f002:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    f006:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2539
    id = atoi(my_payload);
    f00a:	80 ee       	ldi	r24, 0xE0	; 224
    f00c:	98 e0       	ldi	r25, 0x08	; 8
    f00e:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f012:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2540
    if (tds_associate(id) == 255)
    f014:	0e 94 b9 8a 	call	0x11572	; 0x11572 <tds_associate(unsigned char)>
    f018:	8f 3f       	cpi	r24, 0xFF	; 255
    f01a:	31 f4       	brne	.+12     	; 0xf028 <mqtt_callback(char*, unsigned char*, unsigned int)+0x362>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2541
      log_error(&mqtt_client, "tds/associate full or bad id");
    f01c:	6b ef       	ldi	r22, 0xFB	; 251
    f01e:	75 e0       	ldi	r23, 0x05	; 5
    f020:	89 e0       	ldi	r24, 0x09	; 9
    f022:	9c e0       	ldi	r25, 0x0C	; 12
    f024:	0e 94 e1 87 	call	0x10fc2	; 0x10fc2 <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2547
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    f028:	67 ed       	ldi	r22, 0xD7	; 215
    f02a:	75 e5       	ldi	r23, 0x55	; 85
    f02c:	c5 01       	movw	r24, r10
    f02e:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2548
  strcat(str1, device.nazev);
    f032:	65 e0       	ldi	r22, 0x05	; 5
    f034:	7f e0       	ldi	r23, 0x0F	; 15
    f036:	c5 01       	movw	r24, r10
    f038:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2549
  strcat(str1, "/tds/set/");
    f03c:	68 e1       	ldi	r22, 0x18	; 24
    f03e:	76 e0       	ldi	r23, 0x06	; 6
    f040:	c5 01       	movw	r24, r10
    f042:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2550
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f046:	f5 01       	movw	r30, r10
    f048:	01 90       	ld	r0, Z+
    f04a:	00 20       	and	r0, r0
    f04c:	e9 f7       	brne	.-6      	; 0xf048 <mqtt_callback(char*, unsigned char*, unsigned int)+0x382>
    f04e:	31 97       	sbiw	r30, 0x01	; 1
    f050:	af 01       	movw	r20, r30
    f052:	4a 19       	sub	r20, r10
    f054:	5b 09       	sbc	r21, r11
    f056:	b4 01       	movw	r22, r8
    f058:	c5 01       	movw	r24, r10
    f05a:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    f05e:	89 2b       	or	r24, r25
    f060:	09 f0       	breq	.+2      	; 0xf064 <mqtt_callback(char*, unsigned char*, unsigned int)+0x39e>
    f062:	b6 c0       	rjmp	.+364    	; 0xf1d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2552
  {
    mqtt_process_message++;
    f064:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    f068:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    f06c:	01 96       	adiw	r24, 0x01	; 1
    f06e:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    f072:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f076:	f5 01       	movw	r30, r10
    f078:	01 90       	ld	r0, Z+
    f07a:	00 20       	and	r0, r0
    f07c:	e9 f7       	brne	.-6      	; 0xf078 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3b2>
    f07e:	31 97       	sbiw	r30, 0x01	; 1
    f080:	ea 19       	sub	r30, r10
    f082:	fb 09       	sbc	r31, r11
    f084:	9e 2f       	mov	r25, r30
    f086:	4e 2f       	mov	r20, r30
    f088:	84 2f       	mov	r24, r20
    f08a:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554 (discriminator 3)
    f08c:	24 2f       	mov	r18, r20
    f08e:	30 e0       	ldi	r19, 0x00	; 0
    f090:	d4 01       	movw	r26, r8
    f092:	0d 90       	ld	r0, X+
    f094:	00 20       	and	r0, r0
    f096:	e9 f7       	brne	.-6      	; 0xf092 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3cc>
    f098:	11 97       	sbiw	r26, 0x01	; 1
    f09a:	a8 19       	sub	r26, r8
    f09c:	b9 09       	sbc	r27, r9
    f09e:	2a 17       	cp	r18, r26
    f0a0:	3b 07       	cpc	r19, r27
    f0a2:	08 f0       	brcs	.+2      	; 0xf0a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3e0>
    f0a4:	44 c0       	rjmp	.+136    	; 0xf12e <mqtt_callback(char*, unsigned char*, unsigned int)+0x468>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2556 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f0a6:	d5 01       	movw	r26, r10
    f0a8:	a8 0f       	add	r26, r24
    f0aa:	b1 1d       	adc	r27, r1
    f0ac:	28 0d       	add	r18, r8
    f0ae:	39 1d       	adc	r19, r9
    f0b0:	f9 01       	movw	r30, r18
    f0b2:	80 81       	ld	r24, Z
    f0b4:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2557 (discriminator 2)
      str1[cnt + 1] = 0;
    f0b6:	11 96       	adiw	r26, 0x01	; 1
    f0b8:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554 (discriminator 2)
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f0ba:	4f 5f       	subi	r20, 0xFF	; 255
    f0bc:	e5 cf       	rjmp	.-54     	; 0xf088 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3c2>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    f0be:	12 96       	adiw	r26, 0x02	; 2
    f0c0:	6d 91       	ld	r22, X+
    f0c2:	7c 91       	ld	r23, X
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    f0c4:	71 95       	neg	r23
    f0c6:	61 95       	neg	r22
    f0c8:	71 09       	sbc	r23, r1
    f0ca:	2d cf       	rjmp	.-422    	; 0xef26 <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    f0cc:	12 96       	adiw	r26, 0x02	; 2
    f0ce:	ed 91       	ld	r30, X+
    f0d0:	fc 91       	ld	r31, X
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    f0d2:	30 97       	sbiw	r30, 0x00	; 0
    f0d4:	09 f4       	brne	.+2      	; 0xf0d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x412>
    f0d6:	13 cf       	rjmp	.-474    	; 0xeefe <mqtt_callback(char*, unsigned char*, unsigned int)+0x238>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    f0d8:	80 81       	ld	r24, Z
    f0da:	61 e0       	ldi	r22, 0x01	; 1
    f0dc:	70 e0       	ldi	r23, 0x00	; 0
    f0de:	84 37       	cpi	r24, 0x74	; 116
    f0e0:	09 f4       	brne	.+2      	; 0xf0e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x41e>
    f0e2:	21 cf       	rjmp	.-446    	; 0xef26 <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    f0e4:	8b 32       	cpi	r24, 0x2B	; 43
    f0e6:	c9 f0       	breq	.+50     	; 0xf11a <mqtt_callback(char*, unsigned char*, unsigned int)+0x454>
    f0e8:	8d 32       	cpi	r24, 0x2D	; 45
    f0ea:	c1 f4       	brne	.+48     	; 0xf11c <mqtt_callback(char*, unsigned char*, unsigned int)+0x456>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    f0ec:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    f0ee:	81 e0       	ldi	r24, 0x01	; 1
    f0f0:	70 e0       	ldi	r23, 0x00	; 0
    f0f2:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    f0f4:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    f0f6:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    f0f8:	20 ed       	ldi	r18, 0xD0	; 208
    f0fa:	29 0f       	add	r18, r25
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    f0fc:	2a 30       	cpi	r18, 0x0A	; 10
    f0fe:	80 f4       	brcc	.+32     	; 0xf120 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    f100:	46 9f       	mul	r20, r22
    f102:	90 01       	movw	r18, r0
    f104:	47 9f       	mul	r20, r23
    f106:	30 0d       	add	r19, r0
    f108:	11 24       	eor	r1, r1
    f10a:	b9 01       	movw	r22, r18
    f10c:	60 53       	subi	r22, 0x30	; 48
    f10e:	71 09       	sbc	r23, r1
    f110:	69 0f       	add	r22, r25
    f112:	71 1d       	adc	r23, r1
    f114:	97 fd       	sbrc	r25, 7
    f116:	7a 95       	dec	r23
    f118:	ee cf       	rjmp	.-36     	; 0xf0f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x430>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    f11a:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    f11c:	80 e0       	ldi	r24, 0x00	; 0
    f11e:	e8 cf       	rjmp	.-48     	; 0xf0f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x42a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    f120:	81 11       	cpse	r24, r1
    f122:	d0 cf       	rjmp	.-96     	; 0xf0c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3fe>
    f124:	00 cf       	rjmp	.-512    	; 0xef26 <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2521
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
    f126:	81 e0       	ldi	r24, 0x01	; 1
    f128:	0e 94 7e 4c 	call	0x98fc	; 0x98fc <selftest_set_0(unsigned char)>
    f12c:	30 cf       	rjmp	.-416    	; 0xef8e <mqtt_callback(char*, unsigned char*, unsigned int)+0x2c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2561
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f12e:	63 e3       	ldi	r22, 0x33	; 51
    f130:	73 e0       	ldi	r23, 0x03	; 3
    f132:	c5 01       	movw	r24, r10
    f134:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
    f138:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2560
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f13a:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2562
    pch = strtok (str1, "/");
    while (pch != NULL)
    f13c:	e1 14       	cp	r14, r1
    f13e:	f1 04       	cpc	r15, r1
    f140:	09 f4       	brne	.+2      	; 0xf144 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47e>
    f142:	46 c0       	rjmp	.+140    	; 0xf1d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2564
    {
      if (cnt == 0) id = atoi(pch);
    f144:	01 11       	cpse	r16, r1
    f146:	0d c0       	rjmp	.+26     	; 0xf162 <mqtt_callback(char*, unsigned char*, unsigned int)+0x49c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2564 (discriminator 1)
    f148:	c7 01       	movw	r24, r14
    f14a:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f14e:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2565 (discriminator 1)
      if (id < HW_ONEWIRE_MAXROMS)
    f150:	86 30       	cpi	r24, 0x06	; 6
    f152:	a8 f1       	brcs	.+106    	; 0xf1be <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2573
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    f154:	69 e5       	ldi	r22, 0x59	; 89
    f156:	76 e0       	ldi	r23, 0x06	; 6
    f158:	89 e0       	ldi	r24, 0x09	; 9
    f15a:	9c e0       	ldi	r25, 0x0C	; 12
    f15c:	0e 94 e1 87 	call	0x10fc2	; 0x10fc2 <log_error(PubSubClient*, char*)>
    f160:	2e c0       	rjmp	.+92     	; 0xf1be <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2565
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    f162:	16 30       	cpi	r17, 0x06	; 6
    f164:	b8 f7       	brcc	.-18     	; 0xf154 <mqtt_callback(char*, unsigned char*, unsigned int)+0x48e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2567
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    f166:	01 30       	cpi	r16, 0x01	; 1
    f168:	51 f5       	brne	.+84     	; 0xf1be <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2567 (discriminator 1)
    f16a:	63 e7       	ldi	r22, 0x73	; 115
    f16c:	73 e0       	ldi	r23, 0x03	; 3
    f16e:	c7 01       	movw	r24, r14
    f170:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    f174:	89 2b       	or	r24, r25
    f176:	29 f4       	brne	.+10     	; 0xf182 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2567 (discriminator 2)
    f178:	60 ee       	ldi	r22, 0xE0	; 224
    f17a:	78 e0       	ldi	r23, 0x08	; 8
    f17c:	81 2f       	mov	r24, r17
    f17e:	0e 94 37 89 	call	0x1126e	; 0x1126e <tds_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2568
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    f182:	65 e9       	ldi	r22, 0x95	; 149
    f184:	74 e0       	ldi	r23, 0x04	; 4
    f186:	c7 01       	movw	r24, r14
    f188:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    f18c:	89 2b       	or	r24, r25
    f18e:	41 f4       	brne	.+16     	; 0xf1a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2568 (discriminator 2)
    f190:	80 ee       	ldi	r24, 0xE0	; 224
    f192:	98 e0       	ldi	r25, 0x08	; 8
    f194:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f198:	bc 01       	movw	r22, r24
    f19a:	81 2f       	mov	r24, r17
    f19c:	0e 94 62 89 	call	0x112c4	; 0x112c4 <tds_set_offset(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2569
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    f1a0:	6f e7       	ldi	r22, 0x7F	; 127
    f1a2:	73 e0       	ldi	r23, 0x03	; 3
    f1a4:	c7 01       	movw	r24, r14
    f1a6:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    f1aa:	89 2b       	or	r24, r25
    f1ac:	41 f4       	brne	.+16     	; 0xf1be <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2569 (discriminator 2)
    f1ae:	80 ee       	ldi	r24, 0xE0	; 224
    f1b0:	98 e0       	ldi	r25, 0x08	; 8
    f1b2:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f1b6:	68 2f       	mov	r22, r24
    f1b8:	81 2f       	mov	r24, r17
    f1ba:	0e 94 a4 89 	call	0x11348	; 0x11348 <tds_set_period(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2575
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    f1be:	63 e3       	ldi	r22, 0x33	; 51
    f1c0:	73 e0       	ldi	r23, 0x03	; 3
    f1c2:	90 e0       	ldi	r25, 0x00	; 0
    f1c4:	80 e0       	ldi	r24, 0x00	; 0
    f1c6:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
    f1ca:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2576
      cnt++;
    f1cc:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2562
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    f1ce:	b6 cf       	rjmp	.-148    	; 0xf13c <mqtt_callback(char*, unsigned char*, unsigned int)+0x476>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2581
      cnt++;
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    f1d0:	67 ed       	ldi	r22, 0xD7	; 215
    f1d2:	75 e5       	ldi	r23, 0x55	; 85
    f1d4:	c5 01       	movw	r24, r10
    f1d6:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
  strcat(str1, device.nazev);
    f1da:	65 e0       	ldi	r22, 0x05	; 5
    f1dc:	7f e0       	ldi	r23, 0x0F	; 15
    f1de:	c5 01       	movw	r24, r10
    f1e0:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2583
  strcat(str1, "/tds/clear");
    f1e4:	62 e2       	ldi	r22, 0x22	; 34
    f1e6:	76 e0       	ldi	r23, 0x06	; 6
    f1e8:	c5 01       	movw	r24, r10
    f1ea:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2584
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f1ee:	f5 01       	movw	r30, r10
    f1f0:	01 90       	ld	r0, Z+
    f1f2:	00 20       	and	r0, r0
    f1f4:	e9 f7       	brne	.-6      	; 0xf1f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x52a>
    f1f6:	31 97       	sbiw	r30, 0x01	; 1
    f1f8:	af 01       	movw	r20, r30
    f1fa:	4a 19       	sub	r20, r10
    f1fc:	5b 09       	sbc	r21, r11
    f1fe:	b4 01       	movw	r22, r8
    f200:	c5 01       	movw	r24, r10
    f202:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    f206:	89 2b       	or	r24, r25
    f208:	99 f4       	brne	.+38     	; 0xf230 <mqtt_callback(char*, unsigned char*, unsigned int)+0x56a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2586
  {
    mqtt_process_message++;
    f20a:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    f20e:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    f212:	01 96       	adiw	r24, 0x01	; 1
    f214:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    f218:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
    id = atoi(my_payload);
    f21c:	80 ee       	ldi	r24, 0xE0	; 224
    f21e:	98 e0       	ldi	r25, 0x08	; 8
    f220:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f224:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2588
    if (id < HW_ONEWIRE_MAXROMS)
    f226:	86 30       	cpi	r24, 0x06	; 6
    f228:	08 f0       	brcs	.+2      	; 0xf22c <mqtt_callback(char*, unsigned char*, unsigned int)+0x566>
    f22a:	83 c0       	rjmp	.+262    	; 0xf332 <mqtt_callback(char*, unsigned char*, unsigned int)+0x66c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2589
      tds_set_clear(id);
    f22c:	0e 94 3e 8a 	call	0x1147c	; 0x1147c <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2598
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///

  //// thermctl-in/XXXXX/rtds/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
    f230:	67 ed       	ldi	r22, 0xD7	; 215
    f232:	75 e5       	ldi	r23, 0x55	; 85
    f234:	c5 01       	movw	r24, r10
    f236:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2599
  strcat(str1, device.nazev);
    f23a:	65 e0       	ldi	r22, 0x05	; 5
    f23c:	7f e0       	ldi	r23, 0x0F	; 15
    f23e:	c5 01       	movw	r24, r10
    f240:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2600
  strcat(str1, "/rtds/register");
    f244:	6e e3       	ldi	r22, 0x3E	; 62
    f246:	76 e0       	ldi	r23, 0x06	; 6
    f248:	c5 01       	movw	r24, r10
    f24a:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2601
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f24e:	f5 01       	movw	r30, r10
    f250:	01 90       	ld	r0, Z+
    f252:	00 20       	and	r0, r0
    f254:	e9 f7       	brne	.-6      	; 0xf250 <mqtt_callback(char*, unsigned char*, unsigned int)+0x58a>
    f256:	31 97       	sbiw	r30, 0x01	; 1
    f258:	af 01       	movw	r20, r30
    f25a:	4a 19       	sub	r20, r10
    f25c:	5b 09       	sbc	r21, r11
    f25e:	b4 01       	movw	r22, r8
    f260:	c5 01       	movw	r24, r10
    f262:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    f266:	89 2b       	or	r24, r25
    f268:	d1 f4       	brne	.+52     	; 0xf29e <mqtt_callback(char*, unsigned char*, unsigned int)+0x5d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2603
  {
    mqtt_process_message++;
    f26a:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    f26e:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    f272:	01 96       	adiw	r24, 0x01	; 1
    f274:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    f278:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2604
    if (remote_tds_name_exist(my_payload) == 255)
    f27c:	80 ee       	ldi	r24, 0xE0	; 224
    f27e:	98 e0       	ldi	r25, 0x08	; 8
    f280:	0e 94 00 45 	call	0x8a00	; 0x8a00 <remote_tds_name_exist(char*)>
    f284:	8f 3f       	cpi	r24, 0xFF	; 255
    f286:	59 f4       	brne	.+22     	; 0xf29e <mqtt_callback(char*, unsigned char*, unsigned int)+0x5d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2606
    {
      id = remote_tds_find_free();
    f288:	0e 94 bc 44 	call	0x8978	; 0x8978 <remote_tds_find_free()>
    f28c:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2607
      remote_tds_set_complete(id, 1, my_payload);
    f28e:	40 ee       	ldi	r20, 0xE0	; 224
    f290:	58 e0       	ldi	r21, 0x08	; 8
    f292:	61 e0       	ldi	r22, 0x01	; 1
    f294:	0e 94 0d 44 	call	0x881a	; 0x881a <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2608
      remote_tds_subscibe_topic(id);
    f298:	81 2f       	mov	r24, r17
    f29a:	0e 94 3f 44 	call	0x887e	; 0x887e <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2614
    }
    ///TODO - vratit ze jiz existuje
  }

  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    f29e:	67 ed       	ldi	r22, 0xD7	; 215
    f2a0:	75 e5       	ldi	r23, 0x55	; 85
    f2a2:	c5 01       	movw	r24, r10
    f2a4:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
  strcat(str1, device.nazev);
    f2a8:	65 e0       	ldi	r22, 0x05	; 5
    f2aa:	7f e0       	ldi	r23, 0x0F	; 15
    f2ac:	c5 01       	movw	r24, r10
    f2ae:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2616
  strcat(str1, "/rtds/set/");
    f2b2:	6d e4       	ldi	r22, 0x4D	; 77
    f2b4:	76 e0       	ldi	r23, 0x06	; 6
    f2b6:	c5 01       	movw	r24, r10
    f2b8:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2617
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f2bc:	f5 01       	movw	r30, r10
    f2be:	01 90       	ld	r0, Z+
    f2c0:	00 20       	and	r0, r0
    f2c2:	e9 f7       	brne	.-6      	; 0xf2be <mqtt_callback(char*, unsigned char*, unsigned int)+0x5f8>
    f2c4:	31 97       	sbiw	r30, 0x01	; 1
    f2c6:	af 01       	movw	r20, r30
    f2c8:	4a 19       	sub	r20, r10
    f2ca:	5b 09       	sbc	r21, r11
    f2cc:	b4 01       	movw	r22, r8
    f2ce:	c5 01       	movw	r24, r10
    f2d0:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    f2d4:	89 2b       	or	r24, r25
    f2d6:	09 f0       	breq	.+2      	; 0xf2da <mqtt_callback(char*, unsigned char*, unsigned int)+0x614>
    f2d8:	6e c0       	rjmp	.+220    	; 0xf3b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2619
  {
    mqtt_process_message++;
    f2da:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    f2de:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    f2e2:	01 96       	adiw	r24, 0x01	; 1
    f2e4:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    f2e8:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2621
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f2ec:	f5 01       	movw	r30, r10
    f2ee:	01 90       	ld	r0, Z+
    f2f0:	00 20       	and	r0, r0
    f2f2:	e9 f7       	brne	.-6      	; 0xf2ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x628>
    f2f4:	31 97       	sbiw	r30, 0x01	; 1
    f2f6:	ea 19       	sub	r30, r10
    f2f8:	fb 09       	sbc	r31, r11
    f2fa:	9e 2f       	mov	r25, r30
    f2fc:	4e 2f       	mov	r20, r30
    f2fe:	84 2f       	mov	r24, r20
    f300:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2621 (discriminator 3)
    f302:	24 2f       	mov	r18, r20
    f304:	30 e0       	ldi	r19, 0x00	; 0
    f306:	d4 01       	movw	r26, r8
    f308:	0d 90       	ld	r0, X+
    f30a:	00 20       	and	r0, r0
    f30c:	e9 f7       	brne	.-6      	; 0xf308 <mqtt_callback(char*, unsigned char*, unsigned int)+0x642>
    f30e:	11 97       	sbiw	r26, 0x01	; 1
    f310:	a8 19       	sub	r26, r8
    f312:	b9 09       	sbc	r27, r9
    f314:	2a 17       	cp	r18, r26
    f316:	3b 07       	cpc	r19, r27
    f318:	98 f4       	brcc	.+38     	; 0xf340 <mqtt_callback(char*, unsigned char*, unsigned int)+0x67a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2623 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f31a:	d5 01       	movw	r26, r10
    f31c:	a8 0f       	add	r26, r24
    f31e:	b1 1d       	adc	r27, r1
    f320:	28 0d       	add	r18, r8
    f322:	39 1d       	adc	r19, r9
    f324:	f9 01       	movw	r30, r18
    f326:	80 81       	ld	r24, Z
    f328:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2624 (discriminator 2)
      str1[cnt + 1] = 0;
    f32a:	11 96       	adiw	r26, 0x01	; 1
    f32c:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2621 (discriminator 2)
  strcat(str1, "/rtds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f32e:	4f 5f       	subi	r20, 0xFF	; 255
    f330:	e6 cf       	rjmp	.-52     	; 0xf2fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x638>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2591
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    f332:	6d e2       	ldi	r22, 0x2D	; 45
    f334:	76 e0       	ldi	r23, 0x06	; 6
    f336:	89 e0       	ldi	r24, 0x09	; 9
    f338:	9c e0       	ldi	r25, 0x0C	; 12
    f33a:	0e 94 e1 87 	call	0x10fc2	; 0x10fc2 <log_error(PubSubClient*, char*)>
    f33e:	78 cf       	rjmp	.-272    	; 0xf230 <mqtt_callback(char*, unsigned char*, unsigned int)+0x56a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2628
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f340:	63 e3       	ldi	r22, 0x33	; 51
    f342:	73 e0       	ldi	r23, 0x03	; 3
    f344:	c5 01       	movw	r24, r10
    f346:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2627
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f34a:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2629
    pch = strtok (str1, "/");
    while (pch != NULL)
    f34c:	00 97       	sbiw	r24, 0x00	; 0
    f34e:	99 f1       	breq	.+102    	; 0xf3b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2631
    {
      if (cnt == 0) id = atoi(pch);
    f350:	01 11       	cpse	r16, r1
    f352:	0b c0       	rjmp	.+22     	; 0xf36a <mqtt_callback(char*, unsigned char*, unsigned int)+0x6a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2631 (discriminator 1)
    f354:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f358:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2645
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
    f35a:	63 e3       	ldi	r22, 0x33	; 51
    f35c:	73 e0       	ldi	r23, 0x03	; 3
    f35e:	90 e0       	ldi	r25, 0x00	; 0
    f360:	80 e0       	ldi	r24, 0x00	; 0
    f362:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2646
      cnt++;
    f366:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2629
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    f368:	f1 cf       	rjmp	.-30     	; 0xf34c <mqtt_callback(char*, unsigned char*, unsigned int)+0x686>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2632
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
    f36a:	01 30       	cpi	r16, 0x01	; 1
    f36c:	b1 f7       	brne	.-20     	; 0xf35a <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2632 (discriminator 1)
    f36e:	63 e7       	ldi	r22, 0x73	; 115
    f370:	73 e0       	ldi	r23, 0x03	; 3
    f372:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    f376:	89 2b       	or	r24, r25
    f378:	81 f7       	brne	.-32     	; 0xf35a <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2634
      {
        remote_tds_get_active(id, &active);
    f37a:	be 01       	movw	r22, r28
    f37c:	68 53       	subi	r22, 0x38	; 56
    f37e:	7f 4f       	sbci	r23, 0xFF	; 255
    f380:	81 2f       	mov	r24, r17
    f382:	0e 94 2a 43 	call	0x8654	; 0x8654 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2635
        if (active == 0)
    f386:	c8 53       	subi	r28, 0x38	; 56
    f388:	df 4f       	sbci	r29, 0xFF	; 255
    f38a:	88 81       	ld	r24, Y
    f38c:	c8 5c       	subi	r28, 0xC8	; 200
    f38e:	d0 40       	sbci	r29, 0x00	; 0
    f390:	81 11       	cpse	r24, r1
    f392:	0a c0       	rjmp	.+20     	; 0xf3a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2637
        {
          remote_tds_set_complete(id, 1, my_payload);
    f394:	40 ee       	ldi	r20, 0xE0	; 224
    f396:	58 e0       	ldi	r21, 0x08	; 8
    f398:	61 e0       	ldi	r22, 0x01	; 1
    f39a:	81 2f       	mov	r24, r17
    f39c:	0e 94 0d 44 	call	0x881a	; 0x881a <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2638
          remote_tds_subscibe_topic(id);
    f3a0:	81 2f       	mov	r24, r17
    f3a2:	0e 94 3f 44 	call	0x887e	; 0x887e <remote_tds_subscibe_topic(unsigned char)>
    f3a6:	d9 cf       	rjmp	.-78     	; 0xf35a <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2642
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
    f3a8:	68 e5       	ldi	r22, 0x58	; 88
    f3aa:	76 e0       	ldi	r23, 0x06	; 6
    f3ac:	89 e0       	ldi	r24, 0x09	; 9
    f3ae:	9c e0       	ldi	r25, 0x0C	; 12
    f3b0:	0e 94 e1 87 	call	0x10fc2	; 0x10fc2 <log_error(PubSubClient*, char*)>
    f3b4:	d2 cf       	rjmp	.-92     	; 0xf35a <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2652
    }
  }

  ////
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    f3b6:	67 ed       	ldi	r22, 0xD7	; 215
    f3b8:	75 e5       	ldi	r23, 0x55	; 85
    f3ba:	c5 01       	movw	r24, r10
    f3bc:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2653
  strcat(str1, device.nazev);
    f3c0:	65 e0       	ldi	r22, 0x05	; 5
    f3c2:	7f e0       	ldi	r23, 0x0F	; 15
    f3c4:	c5 01       	movw	r24, r10
    f3c6:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2654
  strcat(str1, "/rtds/clear");
    f3ca:	68 e6       	ldi	r22, 0x68	; 104
    f3cc:	76 e0       	ldi	r23, 0x06	; 6
    f3ce:	c5 01       	movw	r24, r10
    f3d0:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2655
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f3d4:	f5 01       	movw	r30, r10
    f3d6:	01 90       	ld	r0, Z+
    f3d8:	00 20       	and	r0, r0
    f3da:	e9 f7       	brne	.-6      	; 0xf3d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x710>
    f3dc:	31 97       	sbiw	r30, 0x01	; 1
    f3de:	af 01       	movw	r20, r30
    f3e0:	4a 19       	sub	r20, r10
    f3e2:	5b 09       	sbc	r21, r11
    f3e4:	b4 01       	movw	r22, r8
    f3e6:	c5 01       	movw	r24, r10
    f3e8:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    f3ec:	89 2b       	or	r24, r25
    f3ee:	99 f4       	brne	.+38     	; 0xf416 <mqtt_callback(char*, unsigned char*, unsigned int)+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2657
  {
    mqtt_process_message++;
    f3f0:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    f3f4:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    f3f8:	01 96       	adiw	r24, 0x01	; 1
    f3fa:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    f3fe:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2658
    id = atoi(my_payload);
    f402:	80 ee       	ldi	r24, 0xE0	; 224
    f404:	98 e0       	ldi	r25, 0x08	; 8
    f406:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f40a:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2659
    remote_tds_unsubscibe_topic(id);
    f40c:	0e 94 7f 44 	call	0x88fe	; 0x88fe <remote_tds_unsubscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2661
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
    f410:	81 2f       	mov	r24, r17
    f412:	0e 94 1a 44 	call	0x8834	; 0x8834 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    f416:	67 ed       	ldi	r22, 0xD7	; 215
    f418:	75 e5       	ldi	r23, 0x55	; 85
    f41a:	c5 01       	movw	r24, r10
    f41c:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2666
  strcat(str1, device.nazev);
    f420:	65 e0       	ldi	r22, 0x05	; 5
    f422:	7f e0       	ldi	r23, 0x0F	; 15
    f424:	c5 01       	movw	r24, r10
    f426:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2667
  strcat(str1, "/rtds/get");
    f42a:	64 e7       	ldi	r22, 0x74	; 116
    f42c:	76 e0       	ldi	r23, 0x06	; 6
    f42e:	c5 01       	movw	r24, r10
    f430:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f434:	f5 01       	movw	r30, r10
    f436:	01 90       	ld	r0, Z+
    f438:	00 20       	and	r0, r0
    f43a:	e9 f7       	brne	.-6      	; 0xf436 <mqtt_callback(char*, unsigned char*, unsigned int)+0x770>
    f43c:	31 97       	sbiw	r30, 0x01	; 1
    f43e:	af 01       	movw	r20, r30
    f440:	4a 19       	sub	r20, r10
    f442:	5b 09       	sbc	r21, r11
    f444:	b4 01       	movw	r22, r8
    f446:	c5 01       	movw	r24, r10
    f448:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    f44c:	89 2b       	or	r24, r25
    f44e:	11 f4       	brne	.+4      	; 0xf454 <mqtt_callback(char*, unsigned char*, unsigned int)+0x78e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2670
  {
    send_mqtt_remote_tds_status();
    f450:	0e 94 56 4b 	call	0x96ac	; 0x96ac <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2674
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy(str1, "/rtds/");
    f454:	6e e2       	ldi	r22, 0x2E	; 46
    f456:	73 e0       	ldi	r23, 0x03	; 3
    f458:	c5 01       	movw	r24, r10
    f45a:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2675
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f45e:	f5 01       	movw	r30, r10
    f460:	01 90       	ld	r0, Z+
    f462:	00 20       	and	r0, r0
    f464:	e9 f7       	brne	.-6      	; 0xf460 <mqtt_callback(char*, unsigned char*, unsigned int)+0x79a>
    f466:	31 97       	sbiw	r30, 0x01	; 1
    f468:	af 01       	movw	r20, r30
    f46a:	4a 19       	sub	r20, r10
    f46c:	5b 09       	sbc	r21, r11
    f46e:	b4 01       	movw	r22, r8
    f470:	c5 01       	movw	r24, r10
    f472:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    f476:	89 2b       	or	r24, r25
    f478:	09 f0       	breq	.+2      	; 0xf47c <mqtt_callback(char*, unsigned char*, unsigned int)+0x7b6>
    f47a:	55 c0       	rjmp	.+170    	; 0xf526 <mqtt_callback(char*, unsigned char*, unsigned int)+0x860>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677
  {
    mqtt_process_message++;
    f47c:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    f480:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    f484:	01 96       	adiw	r24, 0x01	; 1
    f486:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    f48a:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f48e:	f5 01       	movw	r30, r10
    f490:	01 90       	ld	r0, Z+
    f492:	00 20       	and	r0, r0
    f494:	e9 f7       	brne	.-6      	; 0xf490 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7ca>
    f496:	31 97       	sbiw	r30, 0x01	; 1
    f498:	ea 19       	sub	r30, r10
    f49a:	fb 09       	sbc	r31, r11
    f49c:	9e 2f       	mov	r25, r30
    f49e:	4e 2f       	mov	r20, r30
    f4a0:	84 2f       	mov	r24, r20
    f4a2:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679 (discriminator 3)
    f4a4:	24 2f       	mov	r18, r20
    f4a6:	30 e0       	ldi	r19, 0x00	; 0
    f4a8:	d4 01       	movw	r26, r8
    f4aa:	0d 90       	ld	r0, X+
    f4ac:	00 20       	and	r0, r0
    f4ae:	e9 f7       	brne	.-6      	; 0xf4aa <mqtt_callback(char*, unsigned char*, unsigned int)+0x7e4>
    f4b0:	11 97       	sbiw	r26, 0x01	; 1
    f4b2:	a8 19       	sub	r26, r8
    f4b4:	b9 09       	sbc	r27, r9
    f4b6:	2a 17       	cp	r18, r26
    f4b8:	3b 07       	cpc	r19, r27
    f4ba:	60 f4       	brcc	.+24     	; 0xf4d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x80e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2681 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f4bc:	d5 01       	movw	r26, r10
    f4be:	a8 0f       	add	r26, r24
    f4c0:	b1 1d       	adc	r27, r1
    f4c2:	28 0d       	add	r18, r8
    f4c4:	39 1d       	adc	r19, r9
    f4c6:	f9 01       	movw	r30, r18
    f4c8:	80 81       	ld	r24, Z
    f4ca:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2682 (discriminator 2)
      str1[cnt + 1] = 0;
    f4cc:	11 96       	adiw	r26, 0x01	; 1
    f4ce:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679 (discriminator 2)
  strcpy(str1, "/rtds/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f4d0:	4f 5f       	subi	r20, 0xFF	; 255
    f4d2:	e6 cf       	rjmp	.-52     	; 0xf4a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2685
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f4d4:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2687
    {
      uint8_t active = 0;
    f4d6:	c8 57       	subi	r28, 0x78	; 120
    f4d8:	df 4f       	sbci	r29, 0xFF	; 255
    f4da:	18 82       	st	Y, r1
    f4dc:	c8 58       	subi	r28, 0x88	; 136
    f4de:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2688
      remote_tds_get_complete(idx, &active, tmp1);
    f4e0:	ae 01       	movw	r20, r28
    f4e2:	48 55       	subi	r20, 0x58	; 88
    f4e4:	5f 4f       	sbci	r21, 0xFF	; 255
    f4e6:	be 01       	movw	r22, r28
    f4e8:	68 57       	subi	r22, 0x78	; 120
    f4ea:	7f 4f       	sbci	r23, 0xFF	; 255
    f4ec:	80 2f       	mov	r24, r16
    f4ee:	0e 94 94 42 	call	0x8528	; 0x8528 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2689
      if (active == 1 && strcmp(tmp1, str1) == 0)
    f4f2:	c8 57       	subi	r28, 0x78	; 120
    f4f4:	df 4f       	sbci	r29, 0xFF	; 255
    f4f6:	88 81       	ld	r24, Y
    f4f8:	c8 58       	subi	r28, 0x88	; 136
    f4fa:	d0 40       	sbci	r29, 0x00	; 0
    f4fc:	81 30       	cpi	r24, 0x01	; 1
    f4fe:	81 f4       	brne	.+32     	; 0xf520 <mqtt_callback(char*, unsigned char*, unsigned int)+0x85a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2689 (discriminator 1)
    f500:	b5 01       	movw	r22, r10
    f502:	ce 01       	movw	r24, r28
    f504:	88 55       	subi	r24, 0x58	; 88
    f506:	9f 4f       	sbci	r25, 0xFF	; 255
    f508:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    f50c:	89 2b       	or	r24, r25
    f50e:	41 f4       	brne	.+16     	; 0xf520 <mqtt_callback(char*, unsigned char*, unsigned int)+0x85a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2691
      {
        remote_tds_set_data(idx, atoi(my_payload));
    f510:	80 ee       	ldi	r24, 0xE0	; 224
    f512:	98 e0       	ldi	r25, 0x08	; 8
    f514:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f518:	bc 01       	movw	r22, r24
    f51a:	80 2f       	mov	r24, r16
    f51c:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <remote_tds_set_data(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2685 (discriminator 2)
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f520:	0f 5f       	subi	r16, 0xFF	; 255
    f522:	0a 30       	cpi	r16, 0x0A	; 10
    f524:	c1 f6       	brne	.-80     	; 0xf4d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x810>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2695
      {
        remote_tds_set_data(idx, atoi(my_payload));
      }
    }
  }
  strcpy(str1, "/rtds/list");
    f526:	6e e7       	ldi	r22, 0x7E	; 126
    f528:	76 e0       	ldi	r23, 0x06	; 6
    f52a:	c5 01       	movw	r24, r10
    f52c:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2710
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    f530:	67 ed       	ldi	r22, 0xD7	; 215
    f532:	75 e5       	ldi	r23, 0x55	; 85
    f534:	c5 01       	movw	r24, r10
    f536:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2711
  strcat(str1, device.nazev);
    f53a:	65 e0       	ldi	r22, 0x05	; 5
    f53c:	7f e0       	ldi	r23, 0x0F	; 15
    f53e:	c5 01       	movw	r24, r10
    f540:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2712
  strcat(str1, "/prog/set/");
    f544:	69 e8       	ldi	r22, 0x89	; 137
    f546:	76 e0       	ldi	r23, 0x06	; 6
    f548:	c5 01       	movw	r24, r10
    f54a:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2713
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f54e:	f5 01       	movw	r30, r10
    f550:	01 90       	ld	r0, Z+
    f552:	00 20       	and	r0, r0
    f554:	e9 f7       	brne	.-6      	; 0xf550 <mqtt_callback(char*, unsigned char*, unsigned int)+0x88a>
    f556:	31 97       	sbiw	r30, 0x01	; 1
    f558:	af 01       	movw	r20, r30
    f55a:	4a 19       	sub	r20, r10
    f55c:	5b 09       	sbc	r21, r11
    f55e:	b4 01       	movw	r22, r8
    f560:	c5 01       	movw	r24, r10
    f562:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    f566:	89 2b       	or	r24, r25
    f568:	09 f0       	breq	.+2      	; 0xf56c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8a6>
    f56a:	45 c0       	rjmp	.+138    	; 0xf5f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x930>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2715
  {
    mqtt_process_message++;
    f56c:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    f570:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    f574:	01 96       	adiw	r24, 0x01	; 1
    f576:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    f57a:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2717
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f57e:	f5 01       	movw	r30, r10
    f580:	01 90       	ld	r0, Z+
    f582:	00 20       	and	r0, r0
    f584:	e9 f7       	brne	.-6      	; 0xf580 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ba>
    f586:	31 97       	sbiw	r30, 0x01	; 1
    f588:	ea 19       	sub	r30, r10
    f58a:	fb 09       	sbc	r31, r11
    f58c:	9e 2f       	mov	r25, r30
    f58e:	4e 2f       	mov	r20, r30
    f590:	84 2f       	mov	r24, r20
    f592:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2717 (discriminator 3)
    f594:	24 2f       	mov	r18, r20
    f596:	30 e0       	ldi	r19, 0x00	; 0
    f598:	d4 01       	movw	r26, r8
    f59a:	0d 90       	ld	r0, X+
    f59c:	00 20       	and	r0, r0
    f59e:	e9 f7       	brne	.-6      	; 0xf59a <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d4>
    f5a0:	11 97       	sbiw	r26, 0x01	; 1
    f5a2:	a8 19       	sub	r26, r8
    f5a4:	b9 09       	sbc	r27, r9
    f5a6:	2a 17       	cp	r18, r26
    f5a8:	3b 07       	cpc	r19, r27
    f5aa:	60 f4       	brcc	.+24     	; 0xf5c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2719 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f5ac:	d5 01       	movw	r26, r10
    f5ae:	a8 0f       	add	r26, r24
    f5b0:	b1 1d       	adc	r27, r1
    f5b2:	28 0d       	add	r18, r8
    f5b4:	39 1d       	adc	r19, r9
    f5b6:	f9 01       	movw	r30, r18
    f5b8:	80 81       	ld	r24, Z
    f5ba:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2720 (discriminator 2)
      str1[cnt + 1] = 0;
    f5bc:	11 96       	adiw	r26, 0x01	; 1
    f5be:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2717 (discriminator 2)
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f5c0:	4f 5f       	subi	r20, 0xFF	; 255
    f5c2:	e6 cf       	rjmp	.-52     	; 0xf590 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2724
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f5c4:	63 e3       	ldi	r22, 0x33	; 51
    f5c6:	73 e0       	ldi	r23, 0x03	; 3
    f5c8:	c5 01       	movw	r24, r10
    f5ca:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
    f5ce:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2723
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f5d0:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2725
    pch = strtok (str1, "/");
    while (pch != NULL)
    f5d2:	e1 14       	cp	r14, r1
    f5d4:	f1 04       	cpc	r15, r1
    f5d6:	79 f0       	breq	.+30     	; 0xf5f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x930>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2727
    {
      if (cnt == 0) id = atoi(pch);
    f5d8:	01 11       	cpse	r16, r1
    f5da:	bc c0       	rjmp	.+376    	; 0xf754 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2727 (discriminator 1)
    f5dc:	c7 01       	movw	r24, r14
    f5de:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f5e2:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2728 (discriminator 1)
      if (id < AVAILABLE_PROGRAM)
    f5e4:	88 30       	cpi	r24, 0x08	; 8
    f5e6:	08 f4       	brcc	.+2      	; 0xf5ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x924>
    f5e8:	d5 c0       	rjmp	.+426    	; 0xf794 <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    f5ea:	64 e9       	ldi	r22, 0x94	; 148
    f5ec:	76 e0       	ldi	r23, 0x06	; 6
    f5ee:	89 e0       	ldi	r24, 0x09	; 9
    f5f0:	9c e0       	ldi	r25, 0x0C	; 12
    f5f2:	0e 94 e1 87 	call	0x10fc2	; 0x10fc2 <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743
      pch = strtok (NULL, "/");
      cnt++;
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    f5f6:	67 ed       	ldi	r22, 0xD7	; 215
    f5f8:	75 e5       	ldi	r23, 0x55	; 85
    f5fa:	c5 01       	movw	r24, r10
    f5fc:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
  strcat(str1, device.nazev);
    f600:	65 e0       	ldi	r22, 0x05	; 5
    f602:	7f e0       	ldi	r23, 0x0F	; 15
    f604:	c5 01       	movw	r24, r10
    f606:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2745
  strcat(str1, "/prog/clear");
    f60a:	64 ea       	ldi	r22, 0xA4	; 164
    f60c:	76 e0       	ldi	r23, 0x06	; 6
    f60e:	c5 01       	movw	r24, r10
    f610:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f614:	f5 01       	movw	r30, r10
    f616:	01 90       	ld	r0, Z+
    f618:	00 20       	and	r0, r0
    f61a:	e9 f7       	brne	.-6      	; 0xf616 <mqtt_callback(char*, unsigned char*, unsigned int)+0x950>
    f61c:	31 97       	sbiw	r30, 0x01	; 1
    f61e:	af 01       	movw	r20, r30
    f620:	4a 19       	sub	r20, r10
    f622:	5b 09       	sbc	r21, r11
    f624:	b4 01       	movw	r22, r8
    f626:	c5 01       	movw	r24, r10
    f628:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    f62c:	89 2b       	or	r24, r25
    f62e:	09 f0       	breq	.+2      	; 0xf632 <mqtt_callback(char*, unsigned char*, unsigned int)+0x96c>
    f630:	47 c0       	rjmp	.+142    	; 0xf6c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2748
  {
    mqtt_process_message++;
    f632:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    f636:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    f63a:	01 96       	adiw	r24, 0x01	; 1
    f63c:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    f640:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2749
    id = atoi(my_payload);
    f644:	80 ee       	ldi	r24, 0xE0	; 224
    f646:	98 e0       	ldi	r25, 0x08	; 8
    f648:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f64c:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2750
    if (id < AVAILABLE_PROGRAM)
    f64e:	88 30       	cpi	r24, 0x08	; 8
    f650:	08 f0       	brcs	.+2      	; 0xf654 <mqtt_callback(char*, unsigned char*, unsigned int)+0x98e>
    f652:	a9 c0       	rjmp	.+338    	; 0xf7a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xae0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2752
    {
      strcpy_P(tmp2, text_prog);
    f654:	6e e7       	ldi	r22, 0x7E	; 126
    f656:	76 e5       	ldi	r23, 0x56	; 86
    f658:	ce 01       	movw	r24, r28
    f65a:	88 57       	subi	r24, 0x78	; 120
    f65c:	9f 4f       	sbci	r25, 0xFF	; 255
    f65e:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2753
      thermostat_program_set_name(id, tmp2);
    f662:	be 01       	movw	r22, r28
    f664:	68 57       	subi	r22, 0x78	; 120
    f666:	7f 4f       	sbci	r23, 0xFF	; 255
    f668:	81 2f       	mov	r24, r17
    f66a:	0e 94 0b 90 	call	0x12016	; 0x12016 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2754
      thermostat_program_set_active(id, PROG_FREE);
    f66e:	6f ef       	ldi	r22, 0xFF	; 255
    f670:	81 2f       	mov	r24, r17
    f672:	0e 94 3b 90 	call	0x12076	; 0x12076 <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2755
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    f676:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2757 (discriminator 2)
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    f678:	c1 2c       	mov	r12, r1
    f67a:	e1 2c       	mov	r14, r1
    f67c:	00 e0       	ldi	r16, 0x00	; 0
    f67e:	20 e0       	ldi	r18, 0x00	; 0
    f680:	40 e0       	ldi	r20, 0x00	; 0
    f682:	6f 2d       	mov	r22, r15
    f684:	81 2f       	mov	r24, r17
    f686:	0e 94 96 90 	call	0x1212c	; 0x1212c <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2758 (discriminator 2)
        thermostat_program_set_threshold(id, progid, 220);
    f68a:	4c ed       	ldi	r20, 0xDC	; 220
    f68c:	50 e0       	ldi	r21, 0x00	; 0
    f68e:	6f 2d       	mov	r22, r15
    f690:	81 2f       	mov	r24, r17
    f692:	0e 94 f4 90 	call	0x121e8	; 0x121e8 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2759 (discriminator 2)
        thermostat_program_set_week(id, progid, 0);
    f696:	40 e0       	ldi	r20, 0x00	; 0
    f698:	6f 2d       	mov	r22, r15
    f69a:	81 2f       	mov	r24, r17
    f69c:	0e 94 1d 91 	call	0x1223a	; 0x1223a <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2755 (discriminator 2)
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy_P(tmp2, text_prog);
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    f6a0:	f3 94       	inc	r15
    f6a2:	fb e0       	ldi	r31, 0x0B	; 11
    f6a4:	ff 12       	cpse	r15, r31
    f6a6:	e8 cf       	rjmp	.-48     	; 0xf678 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2763
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
    f6a8:	80 2f       	mov	r24, r16
    f6aa:	0e 94 21 8e 	call	0x11c42	; 0x11c42 <thermostat_ring_get_program_id(unsigned char)>
    f6ae:	81 13       	cpse	r24, r17
    f6b0:	04 c0       	rjmp	.+8      	; 0xf6ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x9f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2765
        {
          thermostat_ring_set_program_id(tix, PROG_FREE);
    f6b2:	6f ef       	ldi	r22, 0xFF	; 255
    f6b4:	80 2f       	mov	r24, r16
    f6b6:	0e 94 29 8e 	call	0x11c52	; 0x11c52 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2761 (discriminator 2)
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    f6ba:	0f 5f       	subi	r16, 0xFF	; 255
    f6bc:	05 30       	cpi	r16, 0x05	; 5
    f6be:	a1 f7       	brne	.-24     	; 0xf6a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2775
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    f6c0:	67 ed       	ldi	r22, 0xD7	; 215
    f6c2:	75 e5       	ldi	r23, 0x55	; 85
    f6c4:	c5 01       	movw	r24, r10
    f6c6:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2776
  strcat(str1, device.nazev);
    f6ca:	65 e0       	ldi	r22, 0x05	; 5
    f6cc:	7f e0       	ldi	r23, 0x0F	; 15
    f6ce:	c5 01       	movw	r24, r10
    f6d0:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
  strcat(str1, "/prog_interval/set/");
    f6d4:	62 ec       	ldi	r22, 0xC2	; 194
    f6d6:	76 e0       	ldi	r23, 0x06	; 6
    f6d8:	c5 01       	movw	r24, r10
    f6da:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2778
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f6de:	f5 01       	movw	r30, r10
    f6e0:	01 90       	ld	r0, Z+
    f6e2:	00 20       	and	r0, r0
    f6e4:	e9 f7       	brne	.-6      	; 0xf6e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa1a>
    f6e6:	31 97       	sbiw	r30, 0x01	; 1
    f6e8:	af 01       	movw	r20, r30
    f6ea:	4a 19       	sub	r20, r10
    f6ec:	5b 09       	sbc	r21, r11
    f6ee:	b4 01       	movw	r22, r8
    f6f0:	c5 01       	movw	r24, r10
    f6f2:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    f6f6:	89 2b       	or	r24, r25
    f6f8:	09 f0       	breq	.+2      	; 0xf6fc <mqtt_callback(char*, unsigned char*, unsigned int)+0xa36>
    f6fa:	bb c0       	rjmp	.+374    	; 0xf872 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2780
  {
    mqtt_process_message++;
    f6fc:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    f700:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    f704:	01 96       	adiw	r24, 0x01	; 1
    f706:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    f70a:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2782
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f70e:	f5 01       	movw	r30, r10
    f710:	01 90       	ld	r0, Z+
    f712:	00 20       	and	r0, r0
    f714:	e9 f7       	brne	.-6      	; 0xf710 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4a>
    f716:	31 97       	sbiw	r30, 0x01	; 1
    f718:	ea 19       	sub	r30, r10
    f71a:	fb 09       	sbc	r31, r11
    f71c:	9e 2f       	mov	r25, r30
    f71e:	4e 2f       	mov	r20, r30
    f720:	84 2f       	mov	r24, r20
    f722:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2782 (discriminator 3)
    f724:	24 2f       	mov	r18, r20
    f726:	30 e0       	ldi	r19, 0x00	; 0
    f728:	d4 01       	movw	r26, r8
    f72a:	0d 90       	ld	r0, X+
    f72c:	00 20       	and	r0, r0
    f72e:	e9 f7       	brne	.-6      	; 0xf72a <mqtt_callback(char*, unsigned char*, unsigned int)+0xa64>
    f730:	11 97       	sbiw	r26, 0x01	; 1
    f732:	a8 19       	sub	r26, r8
    f734:	b9 09       	sbc	r27, r9
    f736:	2a 17       	cp	r18, r26
    f738:	3b 07       	cpc	r19, r27
    f73a:	e0 f5       	brcc	.+120    	; 0xf7b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xaee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2784 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f73c:	d5 01       	movw	r26, r10
    f73e:	a8 0f       	add	r26, r24
    f740:	b1 1d       	adc	r27, r1
    f742:	28 0d       	add	r18, r8
    f744:	39 1d       	adc	r19, r9
    f746:	f9 01       	movw	r30, r18
    f748:	80 81       	ld	r24, Z
    f74a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2785 (discriminator 2)
      str1[cnt + 1] = 0;
    f74c:	11 96       	adiw	r26, 0x01	; 1
    f74e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2782 (discriminator 2)
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f750:	4f 5f       	subi	r20, 0xFF	; 255
    f752:	e6 cf       	rjmp	.-52     	; 0xf720 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2728
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    f754:	18 30       	cpi	r17, 0x08	; 8
    f756:	08 f0       	brcs	.+2      	; 0xf75a <mqtt_callback(char*, unsigned char*, unsigned int)+0xa94>
    f758:	48 cf       	rjmp	.-368    	; 0xf5ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x924>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2730
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    f75a:	01 30       	cpi	r16, 0x01	; 1
    f75c:	d9 f4       	brne	.+54     	; 0xf794 <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2730 (discriminator 1)
    f75e:	63 e7       	ldi	r22, 0x73	; 115
    f760:	73 e0       	ldi	r23, 0x03	; 3
    f762:	c7 01       	movw	r24, r14
    f764:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    f768:	89 2b       	or	r24, r25
    f76a:	29 f4       	brne	.+10     	; 0xf776 <mqtt_callback(char*, unsigned char*, unsigned int)+0xab0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2730 (discriminator 2)
    f76c:	60 ee       	ldi	r22, 0xE0	; 224
    f76e:	78 e0       	ldi	r23, 0x08	; 8
    f770:	81 2f       	mov	r24, r17
    f772:	0e 94 0b 90 	call	0x12016	; 0x12016 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    f776:	64 e9       	ldi	r22, 0x94	; 148
    f778:	73 e0       	ldi	r23, 0x03	; 3
    f77a:	c7 01       	movw	r24, r14
    f77c:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    f780:	89 2b       	or	r24, r25
    f782:	41 f4       	brne	.+16     	; 0xf794 <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731 (discriminator 2)
    f784:	80 ee       	ldi	r24, 0xE0	; 224
    f786:	98 e0       	ldi	r25, 0x08	; 8
    f788:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f78c:	68 2f       	mov	r22, r24
    f78e:	81 2f       	mov	r24, r17
    f790:	0e 94 3b 90 	call	0x12076	; 0x12076 <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
    f794:	63 e3       	ldi	r22, 0x33	; 51
    f796:	73 e0       	ldi	r23, 0x03	; 3
    f798:	90 e0       	ldi	r25, 0x00	; 0
    f79a:	80 e0       	ldi	r24, 0x00	; 0
    f79c:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
    f7a0:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2739
      cnt++;
    f7a2:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2725
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    f7a4:	16 cf       	rjmp	.-468    	; 0xf5d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x90c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2771
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    f7a6:	60 eb       	ldi	r22, 0xB0	; 176
    f7a8:	76 e0       	ldi	r23, 0x06	; 6
    f7aa:	89 e0       	ldi	r24, 0x09	; 9
    f7ac:	9c e0       	ldi	r25, 0x0C	; 12
    f7ae:	0e 94 e1 87 	call	0x10fc2	; 0x10fc2 <log_error(PubSubClient*, char*)>
    f7b2:	86 cf       	rjmp	.-244    	; 0xf6c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2789
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f7b4:	63 e3       	ldi	r22, 0x33	; 51
    f7b6:	73 e0       	ldi	r23, 0x03	; 3
    f7b8:	c5 01       	movw	r24, r10
    f7ba:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
    f7be:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2474
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    f7c0:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2788
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f7c2:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
    pch = strtok (str1, "/");
    while (pch != NULL)
    f7c4:	e1 14       	cp	r14, r1
    f7c6:	f1 04       	cpc	r15, r1
    f7c8:	09 f4       	brne	.+2      	; 0xf7cc <mqtt_callback(char*, unsigned char*, unsigned int)+0xb06>
    f7ca:	53 c0       	rjmp	.+166    	; 0xf872 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792
    {
      if (cnt == 0) id = atoi(pch);
    f7cc:	01 11       	cpse	r16, r1
    f7ce:	43 c0       	rjmp	.+134    	; 0xf856 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792 (discriminator 1)
    f7d0:	c7 01       	movw	r24, r14
    f7d2:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f7d6:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2794
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    f7d8:	18 30       	cpi	r17, 0x08	; 8
    f7da:	08 f0       	brcs	.+2      	; 0xf7de <mqtt_callback(char*, unsigned char*, unsigned int)+0xb18>
    f7dc:	44 c0       	rjmp	.+136    	; 0xf866 <mqtt_callback(char*, unsigned char*, unsigned int)+0xba0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2794 (discriminator 1)
    f7de:	fa e0       	ldi	r31, 0x0A	; 10
    f7e0:	fd 15       	cp	r31, r13
    f7e2:	08 f4       	brcc	.+2      	; 0xf7e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb20>
    f7e4:	40 c0       	rjmp	.+128    	; 0xf866 <mqtt_callback(char*, unsigned char*, unsigned int)+0xba0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2796
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    f7e6:	02 30       	cpi	r16, 0x02	; 2
    f7e8:	69 f5       	brne	.+90     	; 0xf844 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb7e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2796 (discriminator 1)
    f7ea:	64 e9       	ldi	r22, 0x94	; 148
    f7ec:	73 e0       	ldi	r23, 0x03	; 3
    f7ee:	c7 01       	movw	r24, r14
    f7f0:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    f7f4:	89 2b       	or	r24, r25
    f7f6:	49 f4       	brne	.+18     	; 0xf80a <mqtt_callback(char*, unsigned char*, unsigned int)+0xb44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2796 (discriminator 2)
    f7f8:	80 ee       	ldi	r24, 0xE0	; 224
    f7fa:	98 e0       	ldi	r25, 0x08	; 8
    f7fc:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f800:	48 2f       	mov	r20, r24
    f802:	6d 2d       	mov	r22, r13
    f804:	81 2f       	mov	r24, r17
    f806:	0e 94 8f 91 	call	0x1231e	; 0x1231e <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2797
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
    f80a:	6b ea       	ldi	r22, 0xAB	; 171
    f80c:	73 e0       	ldi	r23, 0x03	; 3
    f80e:	c7 01       	movw	r24, r14
    f810:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    f814:	89 2b       	or	r24, r25
    f816:	49 f4       	brne	.+18     	; 0xf82a <mqtt_callback(char*, unsigned char*, unsigned int)+0xb64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2797 (discriminator 2)
    f818:	80 ee       	ldi	r24, 0xE0	; 224
    f81a:	98 e0       	ldi	r25, 0x08	; 8
    f81c:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f820:	ac 01       	movw	r20, r24
    f822:	6d 2d       	mov	r22, r13
    f824:	81 2f       	mov	r24, r17
    f826:	0e 94 f4 90 	call	0x121e8	; 0x121e8 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2798
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
    f82a:	68 ec       	ldi	r22, 0xC8	; 200
    f82c:	77 e0       	ldi	r23, 0x07	; 7
    f82e:	c7 01       	movw	r24, r14
    f830:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    f834:	89 2b       	or	r24, r25
    f836:	31 f4       	brne	.+12     	; 0xf844 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb7e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2798 (discriminator 2)
    f838:	40 ee       	ldi	r20, 0xE0	; 224
    f83a:	58 e0       	ldi	r21, 0x08	; 8
    f83c:	6d 2d       	mov	r22, r13
    f83e:	81 2f       	mov	r24, r17
    f840:	0e 94 2b 91 	call	0x12256	; 0x12256 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2805
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
    f844:	63 e3       	ldi	r22, 0x33	; 51
    f846:	73 e0       	ldi	r23, 0x03	; 3
    f848:	90 e0       	ldi	r25, 0x00	; 0
    f84a:	80 e0       	ldi	r24, 0x00	; 0
    f84c:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
    f850:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2806
      cnt++;
    f852:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    f854:	b7 cf       	rjmp	.-146    	; 0xf7c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xafe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2793
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
    f856:	01 30       	cpi	r16, 0x01	; 1
    f858:	09 f0       	breq	.+2      	; 0xf85c <mqtt_callback(char*, unsigned char*, unsigned int)+0xb96>
    f85a:	be cf       	rjmp	.-132    	; 0xf7d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2793 (discriminator 1)
    f85c:	c7 01       	movw	r24, r14
    f85e:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f862:	d8 2e       	mov	r13, r24
    f864:	b9 cf       	rjmp	.-142    	; 0xf7d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2802
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
    f866:	66 ed       	ldi	r22, 0xD6	; 214
    f868:	76 e0       	ldi	r23, 0x06	; 6
    f86a:	89 e0       	ldi	r24, 0x09	; 9
    f86c:	9c e0       	ldi	r25, 0x0C	; 12
    f86e:	0e 94 e1 87 	call	0x10fc2	; 0x10fc2 <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2811
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
    f872:	67 ed       	ldi	r22, 0xD7	; 215
    f874:	75 e5       	ldi	r23, 0x55	; 85
    f876:	c5 01       	movw	r24, r10
    f878:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2812
  strcat(str1, device.nazev);
    f87c:	65 e0       	ldi	r22, 0x05	; 5
    f87e:	7f e0       	ldi	r23, 0x0F	; 15
    f880:	c5 01       	movw	r24, r10
    f882:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2813
  strcat(str1, "/ring/default");
    f886:	6f ee       	ldi	r22, 0xEF	; 239
    f888:	76 e0       	ldi	r23, 0x06	; 6
    f88a:	c5 01       	movw	r24, r10
    f88c:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2814
  if (strcmp(str1, topic) == 0)
    f890:	b4 01       	movw	r22, r8
    f892:	c5 01       	movw	r24, r10
    f894:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    f898:	89 2b       	or	r24, r25
    f89a:	89 f4       	brne	.+34     	; 0xf8be <mqtt_callback(char*, unsigned char*, unsigned int)+0xbf8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2816
  {
    mqtt_process_message++;
    f89c:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    f8a0:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    f8a4:	01 96       	adiw	r24, 0x01	; 1
    f8a6:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    f8aa:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2817
    default_ring = atoi(my_payload);
    f8ae:	80 ee       	ldi	r24, 0xE0	; 224
    f8b0:	98 e0       	ldi	r25, 0x08	; 8
    f8b2:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f8b6:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2818
    set_default_ring(default_ring);
    f8ba:	0e 94 48 47 	call	0x8e90	; 0x8e90 <set_default_ring(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2822
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
    f8be:	67 ed       	ldi	r22, 0xD7	; 215
    f8c0:	75 e5       	ldi	r23, 0x55	; 85
    f8c2:	c5 01       	movw	r24, r10
    f8c4:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2823
  strcat(str1, device.nazev);
    f8c8:	65 e0       	ldi	r22, 0x05	; 5
    f8ca:	7f e0       	ldi	r23, 0x0F	; 15
    f8cc:	c5 01       	movw	r24, r10
    f8ce:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2824
  strcat(str1, "/ring/get/");
    f8d2:	6d ef       	ldi	r22, 0xFD	; 253
    f8d4:	76 e0       	ldi	r23, 0x06	; 6
    f8d6:	c5 01       	movw	r24, r10
    f8d8:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2825
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f8dc:	f5 01       	movw	r30, r10
    f8de:	01 90       	ld	r0, Z+
    f8e0:	00 20       	and	r0, r0
    f8e2:	e9 f7       	brne	.-6      	; 0xf8de <mqtt_callback(char*, unsigned char*, unsigned int)+0xc18>
    f8e4:	31 97       	sbiw	r30, 0x01	; 1
    f8e6:	7f 01       	movw	r14, r30
    f8e8:	ea 18       	sub	r14, r10
    f8ea:	fb 08       	sbc	r15, r11
    f8ec:	a7 01       	movw	r20, r14
    f8ee:	b4 01       	movw	r22, r8
    f8f0:	c5 01       	movw	r24, r10
    f8f2:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    f8f6:	89 2b       	or	r24, r25
    f8f8:	09 f0       	breq	.+2      	; 0xf8fc <mqtt_callback(char*, unsigned char*, unsigned int)+0xc36>
    f8fa:	47 c0       	rjmp	.+142    	; 0xf98a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2828
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f8fc:	9e 2d       	mov	r25, r14
    f8fe:	8e 2d       	mov	r24, r14
    f900:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2828 (discriminator 3)
    f902:	2e 2d       	mov	r18, r14
    f904:	30 e0       	ldi	r19, 0x00	; 0
    f906:	f4 01       	movw	r30, r8
    f908:	01 90       	ld	r0, Z+
    f90a:	00 20       	and	r0, r0
    f90c:	e9 f7       	brne	.-6      	; 0xf908 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc42>
    f90e:	31 97       	sbiw	r30, 0x01	; 1
    f910:	e8 19       	sub	r30, r8
    f912:	f9 09       	sbc	r31, r9
    f914:	2e 17       	cp	r18, r30
    f916:	3f 07       	cpc	r19, r31
    f918:	58 f4       	brcc	.+22     	; 0xf930 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2830 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f91a:	f5 01       	movw	r30, r10
    f91c:	e8 0f       	add	r30, r24
    f91e:	f1 1d       	adc	r31, r1
    f920:	28 0d       	add	r18, r8
    f922:	39 1d       	adc	r19, r9
    f924:	d9 01       	movw	r26, r18
    f926:	8c 91       	ld	r24, X
    f928:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2831 (discriminator 2)
      str1[cnt + 1] = 0;
    f92a:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2828 (discriminator 2)
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f92c:	e3 94       	inc	r14
    f92e:	e7 cf       	rjmp	.-50     	; 0xf8fe <mqtt_callback(char*, unsigned char*, unsigned int)+0xc38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2835
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f930:	63 e3       	ldi	r22, 0x33	; 51
    f932:	73 e0       	ldi	r23, 0x03	; 3
    f934:	c5 01       	movw	r24, r10
    f936:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2834
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f93a:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2836
    pch = strtok (str1, "/");
    while (pch != NULL)
    f93c:	00 97       	sbiw	r24, 0x00	; 0
    f93e:	29 f1       	breq	.+74     	; 0xf98a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2838
    {
      if (cnt == 0) id = atoi(my_payload);
    f940:	01 11       	cpse	r16, r1
    f942:	0e c0       	rjmp	.+28     	; 0xf960 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc9a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2838 (discriminator 1)
    f944:	80 ee       	ldi	r24, 0xE0	; 224
    f946:	98 e0       	ldi	r25, 0x08	; 8
    f948:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    f94c:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2839 (discriminator 1)
      if (id < MAX_THERMOSTAT)
    f94e:	85 30       	cpi	r24, 0x05	; 5
    f950:	a0 f0       	brcs	.+40     	; 0xf97a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2845
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    f952:	68 e0       	ldi	r22, 0x08	; 8
    f954:	77 e0       	ldi	r23, 0x07	; 7
    f956:	89 e0       	ldi	r24, 0x09	; 9
    f958:	9c e0       	ldi	r25, 0x0C	; 12
    f95a:	0e 94 e1 87 	call	0x10fc2	; 0x10fc2 <log_error(PubSubClient*, char*)>
    f95e:	0d c0       	rjmp	.+26     	; 0xf97a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2839
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
    f960:	15 30       	cpi	r17, 0x05	; 5
    f962:	b8 f7       	brcc	.-18     	; 0xf952 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2841
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
    f964:	01 30       	cpi	r16, 0x01	; 1
    f966:	49 f4       	brne	.+18     	; 0xf97a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2841 (discriminator 1)
    f968:	6a eb       	ldi	r22, 0xBA	; 186
    f96a:	73 e0       	ldi	r23, 0x03	; 3
    f96c:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    f970:	89 2b       	or	r24, r25
    f972:	19 f4       	brne	.+6      	; 0xf97a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2841 (discriminator 2)
    f974:	81 2f       	mov	r24, r17
    f976:	0e 94 f9 4a 	call	0x95f2	; 0x95f2 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2847
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    f97a:	63 e3       	ldi	r22, 0x33	; 51
    f97c:	73 e0       	ldi	r23, 0x03	; 3
    f97e:	90 e0       	ldi	r25, 0x00	; 0
    f980:	80 e0       	ldi	r24, 0x00	; 0
    f982:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2848
      cnt++;
    f986:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2836
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    f988:	d9 cf       	rjmp	.-78     	; 0xf93c <mqtt_callback(char*, unsigned char*, unsigned int)+0xc76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2867
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
    f98a:	67 ed       	ldi	r22, 0xD7	; 215
    f98c:	75 e5       	ldi	r23, 0x55	; 85
    f98e:	c5 01       	movw	r24, r10
    f990:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2868
  strcat(str1, device.nazev);
    f994:	65 e0       	ldi	r22, 0x05	; 5
    f996:	7f e0       	ldi	r23, 0x0F	; 15
    f998:	c5 01       	movw	r24, r10
    f99a:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2869
  strcat(str1, "/ring/set/");
    f99e:	68 e1       	ldi	r22, 0x18	; 24
    f9a0:	77 e0       	ldi	r23, 0x07	; 7
    f9a2:	c5 01       	movw	r24, r10
    f9a4:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2870
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f9a8:	f5 01       	movw	r30, r10
    f9aa:	01 90       	ld	r0, Z+
    f9ac:	00 20       	and	r0, r0
    f9ae:	e9 f7       	brne	.-6      	; 0xf9aa <mqtt_callback(char*, unsigned char*, unsigned int)+0xce4>
    f9b0:	31 97       	sbiw	r30, 0x01	; 1
    f9b2:	7f 01       	movw	r14, r30
    f9b4:	ea 18       	sub	r14, r10
    f9b6:	fb 08       	sbc	r15, r11
    f9b8:	a7 01       	movw	r20, r14
    f9ba:	b4 01       	movw	r22, r8
    f9bc:	c5 01       	movw	r24, r10
    f9be:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    f9c2:	89 2b       	or	r24, r25
    f9c4:	09 f0       	breq	.+2      	; 0xf9c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd02>
    f9c6:	4a c1       	rjmp	.+660    	; 0xfc5c <mqtt_callback(char*, unsigned char*, unsigned int)+0xf96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2873
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f9c8:	9e 2d       	mov	r25, r14
    f9ca:	8e 2d       	mov	r24, r14
    f9cc:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2873 (discriminator 3)
    f9ce:	2e 2d       	mov	r18, r14
    f9d0:	30 e0       	ldi	r19, 0x00	; 0
    f9d2:	f4 01       	movw	r30, r8
    f9d4:	01 90       	ld	r0, Z+
    f9d6:	00 20       	and	r0, r0
    f9d8:	e9 f7       	brne	.-6      	; 0xf9d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd0e>
    f9da:	31 97       	sbiw	r30, 0x01	; 1
    f9dc:	e8 19       	sub	r30, r8
    f9de:	f9 09       	sbc	r31, r9
    f9e0:	2e 17       	cp	r18, r30
    f9e2:	3f 07       	cpc	r19, r31
    f9e4:	58 f4       	brcc	.+22     	; 0xf9fc <mqtt_callback(char*, unsigned char*, unsigned int)+0xd36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2875 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f9e6:	f5 01       	movw	r30, r10
    f9e8:	e8 0f       	add	r30, r24
    f9ea:	f1 1d       	adc	r31, r1
    f9ec:	28 0d       	add	r18, r8
    f9ee:	39 1d       	adc	r19, r9
    f9f0:	d9 01       	movw	r26, r18
    f9f2:	8c 91       	ld	r24, X
    f9f4:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2876 (discriminator 2)
      str1[cnt + 1] = 0;
    f9f6:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2873 (discriminator 2)
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f9f8:	e3 94       	inc	r14
    f9fa:	e7 cf       	rjmp	.-50     	; 0xf9ca <mqtt_callback(char*, unsigned char*, unsigned int)+0xd04>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2880
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f9fc:	63 e3       	ldi	r22, 0x33	; 51
    f9fe:	73 e0       	ldi	r23, 0x03	; 3
    fa00:	c5 01       	movw	r24, r10
    fa02:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
    fa06:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2879
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    fa08:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2881
    pch = strtok (str1, "/");
    while (pch != NULL)
    fa0a:	e1 14       	cp	r14, r1
    fa0c:	f1 04       	cpc	r15, r1
    fa0e:	09 f4       	brne	.+2      	; 0xfa12 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd4c>
    fa10:	25 c1       	rjmp	.+586    	; 0xfc5c <mqtt_callback(char*, unsigned char*, unsigned int)+0xf96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2883
    {
      if (cnt == 0) id = atoi(pch);
    fa12:	01 11       	cpse	r16, r1
    fa14:	0e c0       	rjmp	.+28     	; 0xfa32 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd6c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2883 (discriminator 1)
    fa16:	c7 01       	movw	r24, r14
    fa18:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    fa1c:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2884 (discriminator 1)
      if (id < MAX_THERMOSTAT)
    fa1e:	85 30       	cpi	r24, 0x05	; 5
    fa20:	08 f4       	brcc	.+2      	; 0xfa24 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd5e>
    fa22:	13 c1       	rjmp	.+550    	; 0xfc4a <mqtt_callback(char*, unsigned char*, unsigned int)+0xf84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2921
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    fa24:	68 e0       	ldi	r22, 0x08	; 8
    fa26:	77 e0       	ldi	r23, 0x07	; 7
    fa28:	89 e0       	ldi	r24, 0x09	; 9
    fa2a:	9c e0       	ldi	r25, 0x0C	; 12
    fa2c:	0e 94 e1 87 	call	0x10fc2	; 0x10fc2 <log_error(PubSubClient*, char*)>
    fa30:	0c c1       	rjmp	.+536    	; 0xfc4a <mqtt_callback(char*, unsigned char*, unsigned int)+0xf84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2884
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
    fa32:	15 30       	cpi	r17, 0x05	; 5
    fa34:	b8 f7       	brcc	.-18     	; 0xfa24 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2886
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
    fa36:	01 30       	cpi	r16, 0x01	; 1
    fa38:	09 f0       	breq	.+2      	; 0xfa3c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd76>
    fa3a:	07 c1       	rjmp	.+526    	; 0xfc4a <mqtt_callback(char*, unsigned char*, unsigned int)+0xf84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2886 (discriminator 1)
    fa3c:	63 e7       	ldi	r22, 0x73	; 115
    fa3e:	73 e0       	ldi	r23, 0x03	; 3
    fa40:	c7 01       	movw	r24, r14
    fa42:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    fa46:	89 2b       	or	r24, r25
    fa48:	29 f4       	brne	.+10     	; 0xfa54 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2886 (discriminator 2)
    fa4a:	60 ee       	ldi	r22, 0xE0	; 224
    fa4c:	78 e0       	ldi	r23, 0x08	; 8
    fa4e:	81 2f       	mov	r24, r17
    fa50:	0e 94 da 8d 	call	0x11bb4	; 0x11bb4 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2887
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
    fa54:	65 e0       	ldi	r22, 0x05	; 5
    fa56:	75 e0       	ldi	r23, 0x05	; 5
    fa58:	c7 01       	movw	r24, r14
    fa5a:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    fa5e:	89 2b       	or	r24, r25
    fa60:	59 f4       	brne	.+22     	; 0xfa78 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2888
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
    fa62:	80 ee       	ldi	r24, 0xE0	; 224
    fa64:	98 e0       	ldi	r25, 0x08	; 8
    fa66:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    fa6a:	88 30       	cpi	r24, 0x08	; 8
    fa6c:	91 05       	cpc	r25, r1
    fa6e:	24 f4       	brge	.+8      	; 0xfa78 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2889
            thermostat_ring_set_program_id(id, atoi(my_payload));
    fa70:	68 2f       	mov	r22, r24
    fa72:	81 2f       	mov	r24, r17
    fa74:	0e 94 29 8e 	call	0x11c52	; 0x11c52 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2890
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
    fa78:	63 ea       	ldi	r22, 0xA3	; 163
    fa7a:	77 e0       	ldi	r23, 0x07	; 7
    fa7c:	c7 01       	movw	r24, r14
    fa7e:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    fa82:	89 2b       	or	r24, r25
    fa84:	79 f4       	brne	.+30     	; 0xfaa4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdde>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2890 (discriminator 2)
    fa86:	80 ee       	ldi	r24, 0xE0	; 224
    fa88:	98 e0       	ldi	r25, 0x08	; 8
    fa8a:	0e 94 10 dc 	call	0x1b820	; 0x1b820 <atof>
    fa8e:	20 e0       	ldi	r18, 0x00	; 0
    fa90:	30 e0       	ldi	r19, 0x00	; 0
    fa92:	40 e2       	ldi	r20, 0x20	; 32
    fa94:	51 e4       	ldi	r21, 0x41	; 65
    fa96:	0e 94 d0 d7 	call	0x1afa0	; 0x1afa0 <__mulsf3>
    fa9a:	0e 94 e3 d6 	call	0x1adc6	; 0x1adc6 <__fixsfsi>
    fa9e:	81 2f       	mov	r24, r17
    faa0:	0e 94 4e 8e 	call	0x11c9c	; 0x11c9c <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2891
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
    faa4:	6b ea       	ldi	r22, 0xAB	; 171
    faa6:	73 e0       	ldi	r23, 0x03	; 3
    faa8:	c7 01       	movw	r24, r14
    faaa:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    faae:	89 2b       	or	r24, r25
    fab0:	41 f4       	brne	.+16     	; 0xfac2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdfc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2891 (discriminator 2)
    fab2:	80 ee       	ldi	r24, 0xE0	; 224
    fab4:	98 e0       	ldi	r25, 0x08	; 8
    fab6:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    faba:	bc 01       	movw	r22, r24
    fabc:	81 2f       	mov	r24, r17
    fabe:	0e 94 4e 8e 	call	0x11c9c	; 0x11c9c <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2892
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
    fac2:	6d e0       	ldi	r22, 0x0D	; 13
    fac4:	75 e0       	ldi	r23, 0x05	; 5
    fac6:	c7 01       	movw	r24, r14
    fac8:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    facc:	89 2b       	or	r24, r25
    face:	29 f5       	brne	.+74     	; 0xfb1a <mqtt_callback(char*, unsigned char*, unsigned int)+0xe54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2894
        {
          active = convert_text_mode(my_payload);
    fad0:	80 ee       	ldi	r24, 0xE0	; 224
    fad2:	98 e0       	ldi	r25, 0x08	; 8
    fad4:	0e 94 8f 4e 	call	0x9d1e	; 0x9d1e <convert_text_mode(char*)>
    fad8:	c8 53       	subi	r28, 0x38	; 56
    fada:	df 4f       	sbci	r29, 0xFF	; 255
    fadc:	88 83       	st	Y, r24
    fade:	c8 5c       	subi	r28, 0xC8	; 200
    fae0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2895
          thermostat_ring_set_mode(id, active);
    fae2:	68 2f       	mov	r22, r24
    fae4:	81 2f       	mov	r24, r17
    fae6:	0e 94 7d 8e 	call	0x11cfa	; 0x11cfa <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2896
          if (active == TERM_MODE_MAN_HEAT)
    faea:	c8 53       	subi	r28, 0x38	; 56
    faec:	df 4f       	sbci	r29, 0xFF	; 255
    faee:	88 81       	ld	r24, Y
    faf0:	c8 5c       	subi	r28, 0xC8	; 200
    faf2:	d0 40       	sbci	r29, 0x00	; 0
    faf4:	83 30       	cpi	r24, 0x03	; 3
    faf6:	29 f4       	brne	.+10     	; 0xfb02 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2897
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    faf8:	40 e0       	ldi	r20, 0x00	; 0
    fafa:	60 e0       	ldi	r22, 0x00	; 0
    fafc:	81 2f       	mov	r24, r17
    fafe:	0e 94 b2 8e 	call	0x11d64	; 0x11d64 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2898
          if (active == TERM_MODE_MAN_COOL)
    fb02:	c8 53       	subi	r28, 0x38	; 56
    fb04:	df 4f       	sbci	r29, 0xFF	; 255
    fb06:	88 81       	ld	r24, Y
    fb08:	c8 5c       	subi	r28, 0xC8	; 200
    fb0a:	d0 40       	sbci	r29, 0x00	; 0
    fb0c:	85 30       	cpi	r24, 0x05	; 5
    fb0e:	29 f4       	brne	.+10     	; 0xfb1a <mqtt_callback(char*, unsigned char*, unsigned int)+0xe54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2899
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    fb10:	41 e0       	ldi	r20, 0x01	; 1
    fb12:	60 e0       	ldi	r22, 0x00	; 0
    fb14:	81 2f       	mov	r24, r17
    fb16:	0e 94 b2 8e 	call	0x11d64	; 0x11d64 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2901
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
    fb1a:	62 e1       	ldi	r22, 0x12	; 18
    fb1c:	75 e0       	ldi	r23, 0x05	; 5
    fb1e:	c7 01       	movw	r24, r14
    fb20:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    fb24:	89 2b       	or	r24, r25
    fb26:	29 f5       	brne	.+74     	; 0xfb72 <mqtt_callback(char*, unsigned char*, unsigned int)+0xeac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2903
        {
          active = atoi(my_payload);
    fb28:	80 ee       	ldi	r24, 0xE0	; 224
    fb2a:	98 e0       	ldi	r25, 0x08	; 8
    fb2c:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    fb30:	c8 53       	subi	r28, 0x38	; 56
    fb32:	df 4f       	sbci	r29, 0xFF	; 255
    fb34:	88 83       	st	Y, r24
    fb36:	c8 5c       	subi	r28, 0xC8	; 200
    fb38:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2904
          thermostat_ring_set_mode(id, active);
    fb3a:	68 2f       	mov	r22, r24
    fb3c:	81 2f       	mov	r24, r17
    fb3e:	0e 94 7d 8e 	call	0x11cfa	; 0x11cfa <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2905
          if (active == TERM_MODE_MAN_HEAT)
    fb42:	c8 53       	subi	r28, 0x38	; 56
    fb44:	df 4f       	sbci	r29, 0xFF	; 255
    fb46:	88 81       	ld	r24, Y
    fb48:	c8 5c       	subi	r28, 0xC8	; 200
    fb4a:	d0 40       	sbci	r29, 0x00	; 0
    fb4c:	83 30       	cpi	r24, 0x03	; 3
    fb4e:	29 f4       	brne	.+10     	; 0xfb5a <mqtt_callback(char*, unsigned char*, unsigned int)+0xe94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2906
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    fb50:	40 e0       	ldi	r20, 0x00	; 0
    fb52:	60 e0       	ldi	r22, 0x00	; 0
    fb54:	81 2f       	mov	r24, r17
    fb56:	0e 94 b2 8e 	call	0x11d64	; 0x11d64 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2907
          if (active == TERM_MODE_MAN_COOL)
    fb5a:	c8 53       	subi	r28, 0x38	; 56
    fb5c:	df 4f       	sbci	r29, 0xFF	; 255
    fb5e:	88 81       	ld	r24, Y
    fb60:	c8 5c       	subi	r28, 0xC8	; 200
    fb62:	d0 40       	sbci	r29, 0x00	; 0
    fb64:	85 30       	cpi	r24, 0x05	; 5
    fb66:	29 f4       	brne	.+10     	; 0xfb72 <mqtt_callback(char*, unsigned char*, unsigned int)+0xeac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2908
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    fb68:	41 e0       	ldi	r20, 0x01	; 1
    fb6a:	60 e0       	ldi	r22, 0x00	; 0
    fb6c:	81 2f       	mov	r24, r17
    fb6e:	0e 94 b2 8e 	call	0x11d64	; 0x11d64 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2910
        }
        if ((cnt == 1) && (strcmp(pch, "input") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
    fb72:	6e e1       	ldi	r22, 0x1E	; 30
    fb74:	75 e0       	ldi	r23, 0x05	; 5
    fb76:	c7 01       	movw	r24, r14
    fb78:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    fb7c:	89 2b       	or	r24, r25
    fb7e:	41 f4       	brne	.+16     	; 0xfb90 <mqtt_callback(char*, unsigned char*, unsigned int)+0xeca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2910 (discriminator 2)
    fb80:	80 ee       	ldi	r24, 0xE0	; 224
    fb82:	98 e0       	ldi	r25, 0x08	; 8
    fb84:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    fb88:	68 2f       	mov	r22, r24
    fb8a:	81 2f       	mov	r24, r17
    fb8c:	0e 94 6d 8e 	call	0x11cda	; 0x11cda <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2912
        //if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
    fb90:	64 e9       	ldi	r22, 0x94	; 148
    fb92:	73 e0       	ldi	r23, 0x03	; 3
    fb94:	c7 01       	movw	r24, r14
    fb96:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    fb9a:	89 2b       	or	r24, r25
    fb9c:	41 f4       	brne	.+16     	; 0xfbae <mqtt_callback(char*, unsigned char*, unsigned int)+0xee8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2912 (discriminator 2)
    fb9e:	80 ee       	ldi	r24, 0xE0	; 224
    fba0:	98 e0       	ldi	r25, 0x08	; 8
    fba2:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    fba6:	68 2f       	mov	r22, r24
    fba8:	81 2f       	mov	r24, r17
    fbaa:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <thermostat_ring_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2913
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
    fbae:	64 e2       	ldi	r22, 0x24	; 36
    fbb0:	75 e0       	ldi	r23, 0x05	; 5
    fbb2:	c7 01       	movw	r24, r14
    fbb4:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    fbb8:	89 2b       	or	r24, r25
    fbba:	41 f4       	brne	.+16     	; 0xfbcc <mqtt_callback(char*, unsigned char*, unsigned int)+0xf06>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2913 (discriminator 2)
    fbbc:	80 ee       	ldi	r24, 0xE0	; 224
    fbbe:	98 e0       	ldi	r25, 0x08	; 8
    fbc0:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    fbc4:	68 2f       	mov	r22, r24
    fbc6:	81 2f       	mov	r24, r17
    fbc8:	0e 94 09 8e 	call	0x11c12	; 0x11c12 <thermostat_ring_set_output(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2914
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
    fbcc:	6f ea       	ldi	r22, 0xAF	; 175
    fbce:	77 e0       	ldi	r23, 0x07	; 7
    fbd0:	c7 01       	movw	r24, r14
    fbd2:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    fbd6:	89 2b       	or	r24, r25
    fbd8:	49 f4       	brne	.+18     	; 0xfbec <mqtt_callback(char*, unsigned char*, unsigned int)+0xf26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2914 (discriminator 2)
    fbda:	80 ee       	ldi	r24, 0xE0	; 224
    fbdc:	98 e0       	ldi	r25, 0x08	; 8
    fbde:	0e 94 10 dc 	call	0x1b820	; 0x1b820 <atof>
    fbe2:	ab 01       	movw	r20, r22
    fbe4:	bc 01       	movw	r22, r24
    fbe6:	81 2f       	mov	r24, r17
    fbe8:	0e 94 a1 8f 	call	0x11f42	; 0x11f42 <thermostat_ring_pid_set_kp(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2915
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
    fbec:	66 eb       	ldi	r22, 0xB6	; 182
    fbee:	77 e0       	ldi	r23, 0x07	; 7
    fbf0:	c7 01       	movw	r24, r14
    fbf2:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    fbf6:	89 2b       	or	r24, r25
    fbf8:	49 f4       	brne	.+18     	; 0xfc0c <mqtt_callback(char*, unsigned char*, unsigned int)+0xf46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2915 (discriminator 2)
    fbfa:	80 ee       	ldi	r24, 0xE0	; 224
    fbfc:	98 e0       	ldi	r25, 0x08	; 8
    fbfe:	0e 94 10 dc 	call	0x1b820	; 0x1b820 <atof>
    fc02:	ab 01       	movw	r20, r22
    fc04:	bc 01       	movw	r22, r24
    fc06:	81 2f       	mov	r24, r17
    fc08:	0e 94 b4 8f 	call	0x11f68	; 0x11f68 <thermostat_ring_pid_set_ki(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2916
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
    fc0c:	6d eb       	ldi	r22, 0xBD	; 189
    fc0e:	77 e0       	ldi	r23, 0x07	; 7
    fc10:	c7 01       	movw	r24, r14
    fc12:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    fc16:	89 2b       	or	r24, r25
    fc18:	49 f4       	brne	.+18     	; 0xfc2c <mqtt_callback(char*, unsigned char*, unsigned int)+0xf66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2916 (discriminator 2)
    fc1a:	80 ee       	ldi	r24, 0xE0	; 224
    fc1c:	98 e0       	ldi	r25, 0x08	; 8
    fc1e:	0e 94 10 dc 	call	0x1b820	; 0x1b820 <atof>
    fc22:	ab 01       	movw	r20, r22
    fc24:	bc 01       	movw	r22, r24
    fc26:	81 2f       	mov	r24, r17
    fc28:	0e 94 c7 8f 	call	0x11f8e	; 0x11f8e <thermostat_ring_pid_set_kd(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2917
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
    fc2c:	64 ec       	ldi	r22, 0xC4	; 196
    fc2e:	77 e0       	ldi	r23, 0x07	; 7
    fc30:	c7 01       	movw	r24, r14
    fc32:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    fc36:	89 2b       	or	r24, r25
    fc38:	41 f4       	brne	.+16     	; 0xfc4a <mqtt_callback(char*, unsigned char*, unsigned int)+0xf84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2917 (discriminator 2)
    fc3a:	80 ee       	ldi	r24, 0xE0	; 224
    fc3c:	98 e0       	ldi	r25, 0x08	; 8
    fc3e:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    fc42:	68 2f       	mov	r22, r24
    fc44:	81 2f       	mov	r24, r17
    fc46:	0e 94 da 8f 	call	0x11fb4	; 0x11fb4 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2923
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    fc4a:	63 e3       	ldi	r22, 0x33	; 51
    fc4c:	73 e0       	ldi	r23, 0x03	; 3
    fc4e:	90 e0       	ldi	r25, 0x00	; 0
    fc50:	80 e0       	ldi	r24, 0x00	; 0
    fc52:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
    fc56:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2924
      cnt++;
    fc58:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2881
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    fc5a:	d7 ce       	rjmp	.-594    	; 0xfa0a <mqtt_callback(char*, unsigned char*, unsigned int)+0xd44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2929
      cnt++;
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
    fc5c:	67 ed       	ldi	r22, 0xD7	; 215
    fc5e:	75 e5       	ldi	r23, 0x55	; 85
    fc60:	c5 01       	movw	r24, r10
    fc62:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2930
  strcat(str1, device.nazev);
    fc66:	65 e0       	ldi	r22, 0x05	; 5
    fc68:	7f e0       	ldi	r23, 0x0F	; 15
    fc6a:	c5 01       	movw	r24, r10
    fc6c:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2931
  strcat(str1, "/ring/clear");
    fc70:	63 e2       	ldi	r22, 0x23	; 35
    fc72:	77 e0       	ldi	r23, 0x07	; 7
    fc74:	c5 01       	movw	r24, r10
    fc76:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2932
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fc7a:	f5 01       	movw	r30, r10
    fc7c:	01 90       	ld	r0, Z+
    fc7e:	00 20       	and	r0, r0
    fc80:	e9 f7       	brne	.-6      	; 0xfc7c <mqtt_callback(char*, unsigned char*, unsigned int)+0xfb6>
    fc82:	31 97       	sbiw	r30, 0x01	; 1
    fc84:	af 01       	movw	r20, r30
    fc86:	4a 19       	sub	r20, r10
    fc88:	5b 09       	sbc	r21, r11
    fc8a:	b4 01       	movw	r22, r8
    fc8c:	c5 01       	movw	r24, r10
    fc8e:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    fc92:	89 2b       	or	r24, r25
    fc94:	99 f4       	brne	.+38     	; 0xfcbc <mqtt_callback(char*, unsigned char*, unsigned int)+0xff6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2934
  {
    mqtt_process_message++;
    fc96:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    fc9a:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    fc9e:	01 96       	adiw	r24, 0x01	; 1
    fca0:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    fca4:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2935
    id = atoi(my_payload);
    fca8:	80 ee       	ldi	r24, 0xE0	; 224
    fcaa:	98 e0       	ldi	r25, 0x08	; 8
    fcac:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    fcb0:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2936
    if (id < MAX_THERMOSTAT)
    fcb2:	85 30       	cpi	r24, 0x05	; 5
    fcb4:	08 f0       	brcs	.+2      	; 0xfcb8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xff2>
    fcb6:	76 c0       	rjmp	.+236    	; 0xfda4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2938
    {
      thermostat_ring_clear(id);
    fcb8:	0e 94 5d 92 	call	0x124ba	; 0x124ba <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2949
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
    fcbc:	67 ed       	ldi	r22, 0xD7	; 215
    fcbe:	75 e5       	ldi	r23, 0x55	; 85
    fcc0:	c5 01       	movw	r24, r10
    fcc2:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2950
  strcat(str1, device.nazev);
    fcc6:	65 e0       	ldi	r22, 0x05	; 5
    fcc8:	7f e0       	ldi	r23, 0x0F	; 15
    fcca:	c5 01       	movw	r24, r10
    fccc:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2951
  strcat(str1, "/network/get/config");
    fcd0:	61 e4       	ldi	r22, 0x41	; 65
    fcd2:	77 e0       	ldi	r23, 0x07	; 7
    fcd4:	c5 01       	movw	r24, r10
    fcd6:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2952
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fcda:	f5 01       	movw	r30, r10
    fcdc:	01 90       	ld	r0, Z+
    fcde:	00 20       	and	r0, r0
    fce0:	e9 f7       	brne	.-6      	; 0xfcdc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1016>
    fce2:	31 97       	sbiw	r30, 0x01	; 1
    fce4:	af 01       	movw	r20, r30
    fce6:	4a 19       	sub	r20, r10
    fce8:	5b 09       	sbc	r21, r11
    fcea:	b4 01       	movw	r22, r8
    fcec:	c5 01       	movw	r24, r10
    fcee:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    fcf2:	89 2b       	or	r24, r25
    fcf4:	69 f4       	brne	.+26     	; 0xfd10 <mqtt_callback(char*, unsigned char*, unsigned int)+0x104a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2954
  {
    mqtt_process_message++;
    fcf6:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    fcfa:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    fcfe:	01 96       	adiw	r24, 0x01	; 1
    fd00:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    fd04:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2955
    send_network_config(&mqtt_client);
    fd08:	89 e0       	ldi	r24, 0x09	; 9
    fd0a:	9c e0       	ldi	r25, 0x0C	; 12
    fd0c:	0e 94 17 85 	call	0x10a2e	; 0x10a2e <send_network_config(PubSubClient*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2969
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
    fd10:	67 ed       	ldi	r22, 0xD7	; 215
    fd12:	75 e5       	ldi	r23, 0x55	; 85
    fd14:	c5 01       	movw	r24, r10
    fd16:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2970
  strcat(str1, device.nazev);
    fd1a:	65 e0       	ldi	r22, 0x05	; 5
    fd1c:	7f e0       	ldi	r23, 0x0F	; 15
    fd1e:	c5 01       	movw	r24, r10
    fd20:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2971
  strcat(str1, "/network/set/");
    fd24:	65 e5       	ldi	r22, 0x55	; 85
    fd26:	77 e0       	ldi	r23, 0x07	; 7
    fd28:	c5 01       	movw	r24, r10
    fd2a:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2972
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fd2e:	f5 01       	movw	r30, r10
    fd30:	01 90       	ld	r0, Z+
    fd32:	00 20       	and	r0, r0
    fd34:	e9 f7       	brne	.-6      	; 0xfd30 <mqtt_callback(char*, unsigned char*, unsigned int)+0x106a>
    fd36:	31 97       	sbiw	r30, 0x01	; 1
    fd38:	af 01       	movw	r20, r30
    fd3a:	4a 19       	sub	r20, r10
    fd3c:	5b 09       	sbc	r21, r11
    fd3e:	b4 01       	movw	r22, r8
    fd40:	c5 01       	movw	r24, r10
    fd42:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    fd46:	89 2b       	or	r24, r25
    fd48:	09 f0       	breq	.+2      	; 0xfd4c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1086>
    fd4a:	44 c0       	rjmp	.+136    	; 0xfdd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x110e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2974
  {
    mqtt_process_message++;
    fd4c:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    fd50:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    fd54:	01 96       	adiw	r24, 0x01	; 1
    fd56:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    fd5a:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2976
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fd5e:	f5 01       	movw	r30, r10
    fd60:	01 90       	ld	r0, Z+
    fd62:	00 20       	and	r0, r0
    fd64:	e9 f7       	brne	.-6      	; 0xfd60 <mqtt_callback(char*, unsigned char*, unsigned int)+0x109a>
    fd66:	31 97       	sbiw	r30, 0x01	; 1
    fd68:	ea 19       	sub	r30, r10
    fd6a:	fb 09       	sbc	r31, r11
    fd6c:	9e 2f       	mov	r25, r30
    fd6e:	4e 2f       	mov	r20, r30
    fd70:	84 2f       	mov	r24, r20
    fd72:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2976 (discriminator 3)
    fd74:	24 2f       	mov	r18, r20
    fd76:	30 e0       	ldi	r19, 0x00	; 0
    fd78:	d4 01       	movw	r26, r8
    fd7a:	0d 90       	ld	r0, X+
    fd7c:	00 20       	and	r0, r0
    fd7e:	e9 f7       	brne	.-6      	; 0xfd7a <mqtt_callback(char*, unsigned char*, unsigned int)+0x10b4>
    fd80:	11 97       	sbiw	r26, 0x01	; 1
    fd82:	a8 19       	sub	r26, r8
    fd84:	b9 09       	sbc	r27, r9
    fd86:	2a 17       	cp	r18, r26
    fd88:	3b 07       	cpc	r19, r27
    fd8a:	98 f4       	brcc	.+38     	; 0xfdb2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2978 (discriminator 2)
    {
      str1[cnt] = topic[f];
    fd8c:	d5 01       	movw	r26, r10
    fd8e:	a8 0f       	add	r26, r24
    fd90:	b1 1d       	adc	r27, r1
    fd92:	28 0d       	add	r18, r8
    fd94:	39 1d       	adc	r19, r9
    fd96:	f9 01       	movw	r30, r18
    fd98:	80 81       	ld	r24, Z
    fd9a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2979 (discriminator 2)
      str1[cnt + 1] = 0;
    fd9c:	11 96       	adiw	r26, 0x01	; 1
    fd9e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2976 (discriminator 2)
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fda0:	4f 5f       	subi	r20, 0xFF	; 255
    fda2:	e6 cf       	rjmp	.-52     	; 0xfd70 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2942
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
    fda4:	6f e2       	ldi	r22, 0x2F	; 47
    fda6:	77 e0       	ldi	r23, 0x07	; 7
    fda8:	89 e0       	ldi	r24, 0x09	; 9
    fdaa:	9c e0       	ldi	r25, 0x0C	; 12
    fdac:	0e 94 e1 87 	call	0x10fc2	; 0x10fc2 <log_error(PubSubClient*, char*)>
    fdb0:	85 cf       	rjmp	.-246    	; 0xfcbc <mqtt_callback(char*, unsigned char*, unsigned int)+0xff6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2982
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    fdb2:	60 ee       	ldi	r22, 0xE0	; 224
    fdb4:	78 e0       	ldi	r23, 0x08	; 8
    fdb6:	c5 01       	movw	r24, r10
    fdb8:	0e 94 b3 82 	call	0x10566	; 0x10566 <setting_network(char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2983
    if (cnt == 1)
    fdbc:	81 30       	cpi	r24, 0x01	; 1
    fdbe:	41 f4       	brne	.+16     	; 0xfdd0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x110a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2985
    {
      save_setup_network();
    fdc0:	0e 94 d3 81 	call	0x103a6	; 0x103a6 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2990
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    fdc4:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <selftest_data>
    fdc8:	80 68       	ori	r24, 0x80	; 128
    fdca:	80 93 4e 0a 	sts	0x0A4E, r24	; 0x800a4e <selftest_data>
    fdce:	02 c0       	rjmp	.+4      	; 0xfdd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x110e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2988
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    fdd0:	82 30       	cpi	r24, 0x02	; 2
    fdd2:	c1 f3       	breq	.-16     	; 0xfdc4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2995
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
    fdd4:	67 ed       	ldi	r22, 0xD7	; 215
    fdd6:	75 e5       	ldi	r23, 0x55	; 85
    fdd8:	c5 01       	movw	r24, r10
    fdda:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2996
  strcat(str1, device.nazev);
    fdde:	65 e0       	ldi	r22, 0x05	; 5
    fde0:	7f e0       	ldi	r23, 0x0F	; 15
    fde2:	c5 01       	movw	r24, r10
    fde4:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2997
  strcat(str1, "/light/set/");
    fde8:	63 e6       	ldi	r22, 0x63	; 99
    fdea:	77 e0       	ldi	r23, 0x07	; 7
    fdec:	c5 01       	movw	r24, r10
    fdee:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2998
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fdf2:	f5 01       	movw	r30, r10
    fdf4:	01 90       	ld	r0, Z+
    fdf6:	00 20       	and	r0, r0
    fdf8:	e9 f7       	brne	.-6      	; 0xfdf4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x112e>
    fdfa:	31 97       	sbiw	r30, 0x01	; 1
    fdfc:	af 01       	movw	r20, r30
    fdfe:	4a 19       	sub	r20, r10
    fe00:	5b 09       	sbc	r21, r11
    fe02:	b4 01       	movw	r22, r8
    fe04:	c5 01       	movw	r24, r10
    fe06:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    fe0a:	89 2b       	or	r24, r25
    fe0c:	09 f0       	breq	.+2      	; 0xfe10 <__DATA_REGION_LENGTH__+0x10>
    fe0e:	41 c0       	rjmp	.+130    	; 0xfe92 <__DATA_REGION_LENGTH__+0x92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3000
  {
    mqtt_process_message++;
    fe10:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    fe14:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    fe18:	01 96       	adiw	r24, 0x01	; 1
    fe1a:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    fe1e:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3003
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fe22:	f5 01       	movw	r30, r10
    fe24:	01 90       	ld	r0, Z+
    fe26:	00 20       	and	r0, r0
    fe28:	e9 f7       	brne	.-6      	; 0xfe24 <__DATA_REGION_LENGTH__+0x24>
    fe2a:	31 97       	sbiw	r30, 0x01	; 1
    fe2c:	ea 19       	sub	r30, r10
    fe2e:	fb 09       	sbc	r31, r11
    fe30:	9e 2f       	mov	r25, r30
    fe32:	4e 2f       	mov	r20, r30
    fe34:	84 2f       	mov	r24, r20
    fe36:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3003 (discriminator 3)
    fe38:	24 2f       	mov	r18, r20
    fe3a:	30 e0       	ldi	r19, 0x00	; 0
    fe3c:	d4 01       	movw	r26, r8
    fe3e:	0d 90       	ld	r0, X+
    fe40:	00 20       	and	r0, r0
    fe42:	e9 f7       	brne	.-6      	; 0xfe3e <__DATA_REGION_LENGTH__+0x3e>
    fe44:	11 97       	sbiw	r26, 0x01	; 1
    fe46:	a8 19       	sub	r26, r8
    fe48:	b9 09       	sbc	r27, r9
    fe4a:	2a 17       	cp	r18, r26
    fe4c:	3b 07       	cpc	r19, r27
    fe4e:	60 f4       	brcc	.+24     	; 0xfe68 <__DATA_REGION_LENGTH__+0x68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3005 (discriminator 2)
    {
      str1[cnt] = topic[f];
    fe50:	d5 01       	movw	r26, r10
    fe52:	a8 0f       	add	r26, r24
    fe54:	b1 1d       	adc	r27, r1
    fe56:	28 0d       	add	r18, r8
    fe58:	39 1d       	adc	r19, r9
    fe5a:	f9 01       	movw	r30, r18
    fe5c:	80 81       	ld	r24, Z
    fe5e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3006 (discriminator 2)
      str1[cnt + 1] = 0;
    fe60:	11 96       	adiw	r26, 0x01	; 1
    fe62:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3003 (discriminator 2)
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fe64:	4f 5f       	subi	r20, 0xFF	; 255
    fe66:	e6 cf       	rjmp	.-52     	; 0xfe34 <__DATA_REGION_LENGTH__+0x34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3010
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    fe68:	63 e3       	ldi	r22, 0x33	; 51
    fe6a:	73 e0       	ldi	r23, 0x03	; 3
    fe6c:	c5 01       	movw	r24, r10
    fe6e:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3009
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    fe72:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3011
    pch = strtok (str1, "/");
    while (pch != NULL)
    fe74:	00 97       	sbiw	r24, 0x00	; 0
    fe76:	69 f0       	breq	.+26     	; 0xfe92 <__DATA_REGION_LENGTH__+0x92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3013
    {
      if (cnt == 0) id = atoi(pch);
    fe78:	01 11       	cpse	r16, r1
    fe7a:	03 c0       	rjmp	.+6      	; 0xfe82 <__DATA_REGION_LENGTH__+0x82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3013 (discriminator 1)
    fe7c:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    fe80:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3016
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
    fe82:	63 e3       	ldi	r22, 0x33	; 51
    fe84:	73 e0       	ldi	r23, 0x03	; 3
    fe86:	90 e0       	ldi	r25, 0x00	; 0
    fe88:	80 e0       	ldi	r24, 0x00	; 0
    fe8a:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3017
      cnt++;
    fe8e:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3011
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    fe90:	f1 cf       	rjmp	.-30     	; 0xfe74 <__DATA_REGION_LENGTH__+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3022
      cnt++;
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
    fe92:	6d ea       	ldi	r22, 0xAD	; 173
    fe94:	75 e5       	ldi	r23, 0x55	; 85
    fe96:	c5 01       	movw	r24, r10
    fe98:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3023
  strcat(str1, "output/");
    fe9c:	65 ed       	ldi	r22, 0xD5	; 213
    fe9e:	73 e0       	ldi	r23, 0x03	; 3
    fea0:	c5 01       	movw	r24, r10
    fea2:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3024
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fea6:	f5 01       	movw	r30, r10
    fea8:	01 90       	ld	r0, Z+
    feaa:	00 20       	and	r0, r0
    feac:	e9 f7       	brne	.-6      	; 0xfea8 <__DATA_REGION_LENGTH__+0xa8>
    feae:	31 97       	sbiw	r30, 0x01	; 1
    feb0:	af 01       	movw	r20, r30
    feb2:	4a 19       	sub	r20, r10
    feb4:	5b 09       	sbc	r21, r11
    feb6:	b4 01       	movw	r22, r8
    feb8:	c5 01       	movw	r24, r10
    feba:	0e 94 80 dc 	call	0x1b900	; 0x1b900 <strncmp>
    febe:	89 2b       	or	r24, r25
    fec0:	09 f0       	breq	.+2      	; 0xfec4 <__DATA_REGION_LENGTH__+0xc4>
    fec2:	6d c0       	rjmp	.+218    	; 0xff9e <__DATA_REGION_LENGTH__+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3026
  {
    mqtt_process_message++;
    fec4:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    fec8:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    fecc:	01 96       	adiw	r24, 0x01	; 1
    fece:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    fed2:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3028
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fed6:	f5 01       	movw	r30, r10
    fed8:	01 90       	ld	r0, Z+
    feda:	00 20       	and	r0, r0
    fedc:	e9 f7       	brne	.-6      	; 0xfed8 <__DATA_REGION_LENGTH__+0xd8>
    fede:	31 97       	sbiw	r30, 0x01	; 1
    fee0:	ea 19       	sub	r30, r10
    fee2:	fb 09       	sbc	r31, r11
    fee4:	9e 2f       	mov	r25, r30
    fee6:	4e 2f       	mov	r20, r30
    fee8:	84 2f       	mov	r24, r20
    feea:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3028 (discriminator 3)
    feec:	24 2f       	mov	r18, r20
    feee:	30 e0       	ldi	r19, 0x00	; 0
    fef0:	d4 01       	movw	r26, r8
    fef2:	0d 90       	ld	r0, X+
    fef4:	00 20       	and	r0, r0
    fef6:	e9 f7       	brne	.-6      	; 0xfef2 <__DATA_REGION_LENGTH__+0xf2>
    fef8:	11 97       	sbiw	r26, 0x01	; 1
    fefa:	a8 19       	sub	r26, r8
    fefc:	b9 09       	sbc	r27, r9
    fefe:	2a 17       	cp	r18, r26
    ff00:	3b 07       	cpc	r19, r27
    ff02:	60 f4       	brcc	.+24     	; 0xff1c <__DATA_REGION_LENGTH__+0x11c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3030 (discriminator 2)
    {
      str1[cnt] = topic[f];
    ff04:	d5 01       	movw	r26, r10
    ff06:	a8 0f       	add	r26, r24
    ff08:	b1 1d       	adc	r27, r1
    ff0a:	28 0d       	add	r18, r8
    ff0c:	39 1d       	adc	r19, r9
    ff0e:	f9 01       	movw	r30, r18
    ff10:	80 81       	ld	r24, Z
    ff12:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3031 (discriminator 2)
      str1[cnt + 1] = 0;
    ff14:	11 96       	adiw	r26, 0x01	; 1
    ff16:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3028 (discriminator 2)
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ff18:	4f 5f       	subi	r20, 0xFF	; 255
    ff1a:	e6 cf       	rjmp	.-52     	; 0xfee8 <__DATA_REGION_LENGTH__+0xe8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3035
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    ff1c:	63 e3       	ldi	r22, 0x33	; 51
    ff1e:	73 e0       	ldi	r23, 0x03	; 3
    ff20:	c5 01       	movw	r24, r10
    ff22:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
    ff26:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3034
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    ff28:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3036
    pch = strtok (str1, "/");
    while (pch != NULL)
    ff2a:	e1 14       	cp	r14, r1
    ff2c:	f1 04       	cpc	r15, r1
    ff2e:	b9 f1       	breq	.+110    	; 0xff9e <__DATA_REGION_LENGTH__+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3038
    {
      if (cnt == 0) id = atoi(pch);
    ff30:	01 11       	cpse	r16, r1
    ff32:	0d c0       	rjmp	.+26     	; 0xff4e <__DATA_REGION_LENGTH__+0x14e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3038 (discriminator 1)
    ff34:	c7 01       	movw	r24, r14
    ff36:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
    ff3a:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3049
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
    ff3c:	63 e3       	ldi	r22, 0x33	; 51
    ff3e:	73 e0       	ldi	r23, 0x03	; 3
    ff40:	90 e0       	ldi	r25, 0x00	; 0
    ff42:	80 e0       	ldi	r24, 0x00	; 0
    ff44:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
    ff48:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3050
      cnt++;
    ff4a:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3036
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    ff4c:	ee cf       	rjmp	.-36     	; 0xff2a <__DATA_REGION_LENGTH__+0x12a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3039
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
    ff4e:	01 30       	cpi	r16, 0x01	; 1
    ff50:	a9 f7       	brne	.-22     	; 0xff3c <__DATA_REGION_LENGTH__+0x13c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3041
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    ff52:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3042
          if (thermostat_ring_get_output(idx) == id)
    ff54:	8d 2d       	mov	r24, r13
    ff56:	0e 94 01 8e 	call	0x11c02	; 0x11c02 <thermostat_ring_get_output(unsigned char)>
    ff5a:	c8 2e       	mov	r12, r24
    ff5c:	81 13       	cpse	r24, r17
    ff5e:	1a c0       	rjmp	.+52     	; 0xff94 <__DATA_REGION_LENGTH__+0x194>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3044
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
    ff60:	6b ef       	ldi	r22, 0xFB	; 251
    ff62:	73 e0       	ldi	r23, 0x03	; 3
    ff64:	c7 01       	movw	r24, r14
    ff66:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    ff6a:	89 2b       	or	r24, r25
    ff6c:	29 f0       	breq	.+10     	; 0xff78 <__DATA_REGION_LENGTH__+0x178>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3044 (discriminator 1)
    ff6e:	e1 2f       	mov	r30, r17
    ff70:	f0 e0       	ldi	r31, 0x00	; 0
    ff72:	e1 5b       	subi	r30, 0xB1	; 177
    ff74:	f5 4f       	sbci	r31, 0xF5	; 245
    ff76:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3045
            if (strcmp(pch, "state")) last_output_update[id] = 0;
    ff78:	6e ed       	ldi	r22, 0xDE	; 222
    ff7a:	73 e0       	ldi	r23, 0x03	; 3
    ff7c:	c7 01       	movw	r24, r14
    ff7e:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    ff82:	89 2b       	or	r24, r25
    ff84:	29 f0       	breq	.+10     	; 0xff90 <__DATA_REGION_LENGTH__+0x190>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3045 (discriminator 1)
    ff86:	e1 2f       	mov	r30, r17
    ff88:	f0 e0       	ldi	r31, 0x00	; 0
    ff8a:	e1 5b       	subi	r30, 0xB1	; 177
    ff8c:	f5 4f       	sbci	r31, 0xF5	; 245
    ff8e:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3042
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
    ff90:	1c 2d       	mov	r17, r12
    ff92:	d4 cf       	rjmp	.-88     	; 0xff3c <__DATA_REGION_LENGTH__+0x13c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3041 (discriminator 2)
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    ff94:	d3 94       	inc	r13
    ff96:	f5 e0       	ldi	r31, 0x05	; 5
    ff98:	df 12       	cpse	r13, r31
    ff9a:	dc cf       	rjmp	.-72     	; 0xff54 <__DATA_REGION_LENGTH__+0x154>
    ff9c:	cf cf       	rjmp	.-98     	; 0xff3c <__DATA_REGION_LENGTH__+0x13c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3055
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    ff9e:	67 ed       	ldi	r22, 0xD7	; 215
    ffa0:	75 e5       	ldi	r23, 0x55	; 85
    ffa2:	c5 01       	movw	r24, r10
    ffa4:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3056
  strcat(str1, device.nazev);
    ffa8:	65 e0       	ldi	r22, 0x05	; 5
    ffaa:	7f e0       	ldi	r23, 0x0F	; 15
    ffac:	c5 01       	movw	r24, r10
    ffae:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3057
  strcat(str1, "/reload");
    ffb2:	6f e6       	ldi	r22, 0x6F	; 111
    ffb4:	77 e0       	ldi	r23, 0x07	; 7
    ffb6:	c5 01       	movw	r24, r10
    ffb8:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3058
  if (strcmp(str1, topic) == 0)
    ffbc:	b4 01       	movw	r22, r8
    ffbe:	c5 01       	movw	r24, r10
    ffc0:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
    ffc4:	89 2b       	or	r24, r25
    ffc6:	a1 f4       	brne	.+40     	; 0xfff0 <__DATA_REGION_LENGTH__+0x1f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3060
  {
    mqtt_process_message++;
    ffc8:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
    ffcc:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
    ffd0:	01 96       	adiw	r24, 0x01	; 1
    ffd2:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
    ffd6:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3061
    log_error(&mqtt_client, "reload ..... ");
    ffda:	67 e7       	ldi	r22, 0x77	; 119
    ffdc:	77 e0       	ldi	r23, 0x07	; 7
    ffde:	89 e0       	ldi	r24, 0x09	; 9
    ffe0:	9c e0       	ldi	r25, 0x0C	; 12
    ffe2:	0e 94 e1 87 	call	0x10fc2	; 0x10fc2 <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3062
    resetFunc();
    ffe6:	e0 91 60 09 	lds	r30, 0x0960	; 0x800960 <resetFunc>
    ffea:	f0 91 61 09 	lds	r31, 0x0961	; 0x800961 <resetFunc+0x1>
    ffee:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3066
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    fff0:	67 ed       	ldi	r22, 0xD7	; 215
    fff2:	75 e5       	ldi	r23, 0x55	; 85
    fff4:	c5 01       	movw	r24, r10
    fff6:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3067
  strcat(str1, device.nazev);
    fffa:	65 e0       	ldi	r22, 0x05	; 5
    fffc:	7f e0       	ldi	r23, 0x0F	; 15
    fffe:	c5 01       	movw	r24, r10
   10000:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3068
  strcat(str1, "/bootloader");
   10004:	65 e8       	ldi	r22, 0x85	; 133
   10006:	77 e0       	ldi	r23, 0x07	; 7
   10008:	c5 01       	movw	r24, r10
   1000a:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3069
  if (strcmp(str1, topic) == 0)
   1000e:	b4 01       	movw	r22, r8
   10010:	c5 01       	movw	r24, r10
   10012:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
   10016:	89 2b       	or	r24, r25
   10018:	f9 f4       	brne	.+62     	; 0x10058 <__EEPROM_REGION_LENGTH__+0x58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3071
  {
    mqtt_process_message++;
   1001a:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
   1001e:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
   10022:	01 96       	adiw	r24, 0x01	; 1
   10024:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
   10028:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3072
    log_error(&mqtt_client, "bootloader ..... ");
   1002c:	61 e9       	ldi	r22, 0x91	; 145
   1002e:	77 e0       	ldi	r23, 0x07	; 7
   10030:	89 e0       	ldi	r24, 0x09	; 9
   10032:	9c e0       	ldi	r25, 0x0C	; 12
   10034:	0e 94 e1 87 	call	0x10fc2	; 0x10fc2 <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3073
    EEPROM.write(bootloader_tag, 255);
   10038:	6f ef       	ldi	r22, 0xFF	; 255
   1003a:	90 e0       	ldi	r25, 0x00	; 0
   1003c:	80 e0       	ldi	r24, 0x00	; 0
   1003e:	0e 94 74 39 	call	0x72e8	; 0x72e8 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
   10042:	88 e1       	ldi	r24, 0x18	; 24
   10044:	9e e0       	ldi	r25, 0x0E	; 14
   10046:	0f b6       	in	r0, 0x3f	; 63
   10048:	f8 94       	cli
   1004a:	a8 95       	wdr
   1004c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   10050:	0f be       	out	0x3f, r0	; 63
   10052:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   10056:	ff cf       	rjmp	.-2      	; 0x10056 <__EEPROM_REGION_LENGTH__+0x56>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3079
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
   10058:	67 ed       	ldi	r22, 0xD7	; 215
   1005a:	75 e5       	ldi	r23, 0x55	; 85
   1005c:	c5 01       	movw	r24, r10
   1005e:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3080
  strcat(str1, device.nazev);
   10062:	65 e0       	ldi	r22, 0x05	; 5
   10064:	7f e0       	ldi	r23, 0x0F	; 15
   10066:	c5 01       	movw	r24, r10
   10068:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3081
  strcat(str1, "/default");
   1006c:	64 ef       	ldi	r22, 0xF4	; 244
   1006e:	76 e0       	ldi	r23, 0x06	; 6
   10070:	c5 01       	movw	r24, r10
   10072:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3082
  if (strcmp(str1, topic) == 0)
   10076:	b4 01       	movw	r22, r8
   10078:	c5 01       	movw	r24, r10
   1007a:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
   1007e:	89 2b       	or	r24, r25
   10080:	91 f4       	brne	.+36     	; 0x100a6 <__EEPROM_REGION_LENGTH__+0xa6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3084
  {
    mqtt_process_message++;
   10082:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
   10086:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
   1008a:	01 96       	adiw	r24, 0x01	; 1
   1008c:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <mqtt_process_message+0x1>
   10090:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3086
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
   10094:	80 ee       	ldi	r24, 0xE0	; 224
   10096:	98 e0       	ldi	r25, 0x08	; 8
   10098:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
   1009c:	68 2f       	mov	r22, r24
   1009e:	8a e5       	ldi	r24, 0x5A	; 90
   100a0:	90 e0       	ldi	r25, 0x00	; 0
   100a2:	0e 94 74 39 	call	0x72e8	; 0x72e8 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3089
  }

}
   100a6:	c8 53       	subi	r28, 0x38	; 56
   100a8:	df 4f       	sbci	r29, 0xFF	; 255
   100aa:	0f b6       	in	r0, 0x3f	; 63
   100ac:	f8 94       	cli
   100ae:	de bf       	out	0x3e, r29	; 62
   100b0:	0f be       	out	0x3f, r0	; 63
   100b2:	cd bf       	out	0x3d, r28	; 61
   100b4:	df 91       	pop	r29
   100b6:	cf 91       	pop	r28
   100b8:	1f 91       	pop	r17
   100ba:	0f 91       	pop	r16
   100bc:	ff 90       	pop	r15
   100be:	ef 90       	pop	r14
   100c0:	df 90       	pop	r13
   100c2:	cf 90       	pop	r12
   100c4:	bf 90       	pop	r11
   100c6:	af 90       	pop	r10
   100c8:	9f 90       	pop	r9
   100ca:	8f 90       	pop	r8
   100cc:	7f 90       	pop	r7
   100ce:	6f 90       	pop	r6
   100d0:	5f 90       	pop	r5
   100d2:	4f 90       	pop	r4
   100d4:	3f 90       	pop	r3
   100d6:	2f 90       	pop	r2
   100d8:	08 95       	ret

000100da <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>:
_GLOBAL__sub_I__Z11serial_putccP6__file():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5627
  else
  {
    selftest_set_0(SELFTEST_ERR_NTP);

  }
}
   100da:	cf 92       	push	r12
   100dc:	ef 92       	push	r14
   100de:	0f 93       	push	r16
   100e0:	cf 93       	push	r28
   100e2:	df 93       	push	r29
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   100e4:	00 e0       	ldi	r16, 0x00	; 0
   100e6:	20 e0       	ldi	r18, 0x00	; 0
   100e8:	40 e0       	ldi	r20, 0x00	; 0
   100ea:	60 e0       	ldi	r22, 0x00	; 0
   100ec:	8d e5       	ldi	r24, 0x5D	; 93
   100ee:	9e e0       	ldi	r25, 0x0E	; 14
   100f0:	0e 94 9e d4 	call	0x1a93c	; 0x1a93c <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:34
#include "NetworkSettingsMenu.h"
#include "pidDialogMenu.h"
#include "OneWireMenu.h"


SoftSPIB swSPI(STORAGE_MOSI, STORAGE_MISO, STORAGE_CLK);
   100f4:	29 e1       	ldi	r18, 0x19	; 25
   100f6:	4a e1       	ldi	r20, 0x1A	; 26
   100f8:	68 e1       	ldi	r22, 0x18	; 24
   100fa:	86 e5       	ldi	r24, 0x56	; 86
   100fc:	9e e0       	ldi	r25, 0x0E	; 14
   100fe:	0e 94 b5 a8 	call	0x1516a	; 0x1516a <SoftSPIB::SoftSPIB(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:38


RTC_DS1307 rtc;
DateTime now;
   10102:	40 e0       	ldi	r20, 0x00	; 0
   10104:	50 e0       	ldi	r21, 0x00	; 0
   10106:	ba 01       	movw	r22, r20
   10108:	8e e4       	ldi	r24, 0x4E	; 78
   1010a:	9e e0       	ldi	r25, 0x0E	; 14
   1010c:	0e 94 5d c6 	call	0x18cba	; 0x18cba <DateTime::DateTime(unsigned long)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:40

EthernetClient ethClient;
   10110:	81 e4       	ldi	r24, 0x41	; 65
   10112:	9e e0       	ldi	r25, 0x0E	; 14
   10114:	0e 94 f3 b0 	call	0x161e6	; 0x161e6 <EthernetClient::EthernetClient()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:41
EthernetUDP udpClient;
   10118:	86 e2       	ldi	r24, 0x26	; 38
   1011a:	9e e0       	ldi	r25, 0x0E	; 14
   1011c:	0e 94 56 b3 	call	0x166ac	; 0x166ac <EthernetUDP::EthernetUDP()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:42
PubSubClient mqtt_client(ethClient);
   10120:	61 e4       	ldi	r22, 0x41	; 65
   10122:	7e e0       	ldi	r23, 0x0E	; 14
   10124:	89 e0       	ldi	r24, 0x09	; 9
   10126:	9c e0       	ldi	r25, 0x0C	; 12
   10128:	0e 94 26 bc 	call	0x1784c	; 0x1784c <PubSubClient::PubSubClient(Client&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:46



RF24 radio(NRF_CE, NRF_CS);
   1012c:	42 e0       	ldi	r20, 0x02	; 2
   1012e:	50 e0       	ldi	r21, 0x00	; 0
   10130:	63 e0       	ldi	r22, 0x03	; 3
   10132:	70 e0       	ldi	r23, 0x00	; 0
   10134:	81 ef       	ldi	r24, 0xF1	; 241
   10136:	9b e0       	ldi	r25, 0x0B	; 11
   10138:	0e 94 3b c4 	call	0x18876	; 0x18876 <RF24::RF24(unsigned int, unsigned int)>
_ZN24Temperature_LM75_DerivedC4EP7TwoWirehPNS_10AttributesE():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:66
  void writeIntegerTemperatureRegister(uint8_t register_index, int16_t value);

public:

  Temperature_LM75_Derived(TwoWire *bus, uint8_t i2c_address, Attributes *attributes) {
    this->bus = bus;
   1013c:	c4 ee       	ldi	r28, 0xE4	; 228
   1013e:	db e0       	ldi	r29, 0x0B	; 11
   10140:	81 e3       	ldi	r24, 0x31	; 49
   10142:	91 e1       	ldi	r25, 0x11	; 17
   10144:	99 83       	std	Y+1, r25	; 0x01
   10146:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:67
    this->i2c_address = i2c_address;
   10148:	88 e4       	ldi	r24, 0x48	; 72
   1014a:	8a 83       	std	Y+2, r24	; 0x02
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:68
    this->attributes = attributes;
   1014c:	ee e7       	ldi	r30, 0x7E	; 126
   1014e:	f2 e0       	ldi	r31, 0x02	; 2
   10150:	fc 87       	std	Y+12, r31	; 0x0c
   10152:	eb 87       	std	Y+11, r30	; 0x0b
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:70

    setInternalResolution(attributes->default_temperature_resolution);
   10154:	91 81       	ldd	r25, Z+1	; 0x01
_ZN24Temperature_LM75_Derived21setInternalResolutionEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:51
  Attributes *attributes;

  // Set the internal resolution of the temperature sensor, which affects
  // conversions and which bits are discarded.
  void setInternalResolution(uint8_t resolution) {
    this->resolution = resolution;
   10156:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:52
    this->resolution_mask = ~(uint16_t)((1 << (attributes->temperature_width - resolution)) - 1);
   10158:	80 81       	ld	r24, Z
   1015a:	89 1b       	sub	r24, r25
   1015c:	99 0b       	sbc	r25, r25
   1015e:	61 e0       	ldi	r22, 0x01	; 1
   10160:	70 e0       	ldi	r23, 0x00	; 0
   10162:	9b 01       	movw	r18, r22
   10164:	02 c0       	rjmp	.+4      	; 0x1016a <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0x90>
   10166:	22 0f       	add	r18, r18
   10168:	33 1f       	adc	r19, r19
   1016a:	8a 95       	dec	r24
   1016c:	e2 f7       	brpl	.-8      	; 0x10166 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0x8c>
   1016e:	c9 01       	movw	r24, r18
   10170:	91 95       	neg	r25
   10172:	81 95       	neg	r24
   10174:	91 09       	sbc	r25, r1
   10176:	9d 83       	std	Y+5, r25	; 0x05
   10178:	8c 83       	std	Y+4, r24	; 0x04
_ZN24Temperature_LM75_DerivedC4EP7TwoWirehPNS_10AttributesE():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:71
    this->bus = bus;
    this->i2c_address = i2c_address;
    this->attributes = attributes;

    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
   1017a:	82 81       	ldd	r24, Z+2	; 0x02
_ZN24Temperature_LM75_Derived31setInternalTemperatureFracWidthEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:56
    this->resolution = resolution;
    this->resolution_mask = ~(uint16_t)((1 << (attributes->temperature_width - resolution)) - 1);
  }

  void setInternalTemperatureFracWidth(uint8_t temperature_frac_width) {
    this->temperature_frac_width = temperature_frac_width;
   1017c:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:57
    temperature_frac_factor = 1.0 / (float)(1 << temperature_frac_width);
   1017e:	02 c0       	rjmp	.+4      	; 0x10184 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xaa>
   10180:	66 0f       	add	r22, r22
   10182:	77 1f       	adc	r23, r23
   10184:	8a 95       	dec	r24
   10186:	e2 f7       	brpl	.-8      	; 0x10180 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xa6>
   10188:	07 2e       	mov	r0, r23
   1018a:	00 0c       	add	r0, r0
   1018c:	88 0b       	sbc	r24, r24
   1018e:	99 0b       	sbc	r25, r25
   10190:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
   10194:	9b 01       	movw	r18, r22
   10196:	ac 01       	movw	r20, r24
   10198:	60 e0       	ldi	r22, 0x00	; 0
   1019a:	70 e0       	ldi	r23, 0x00	; 0
   1019c:	80 e8       	ldi	r24, 0x80	; 128
   1019e:	9f e3       	ldi	r25, 0x3F	; 63
   101a0:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
   101a4:	6f 83       	std	Y+7, r22	; 0x07
   101a6:	78 87       	std	Y+8, r23	; 0x08
   101a8:	89 87       	std	Y+9, r24	; 0x09
   101aa:	9a 87       	std	Y+10, r25	; 0x0a
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:53
//RF24Mesh mesh(radio, network);

Generic_LM75_11Bit lm75_temp;


LCDWIKI_KBV my_lcd(ST7796S, 33, 35, 36, 32, 34); //model,cs,cd,wr,rd,reset
   101ac:	82 e2       	ldi	r24, 0x22	; 34
   101ae:	c8 2e       	mov	r12, r24
   101b0:	90 e2       	ldi	r25, 0x20	; 32
   101b2:	e9 2e       	mov	r14, r25
   101b4:	04 e2       	ldi	r16, 0x24	; 36
   101b6:	23 e2       	ldi	r18, 0x23	; 35
   101b8:	41 e2       	ldi	r20, 0x21	; 33
   101ba:	6a e0       	ldi	r22, 0x0A	; 10
   101bc:	70 e0       	ldi	r23, 0x00	; 0
   101be:	85 ea       	ldi	r24, 0xA5	; 165
   101c0:	9b e0       	ldi	r25, 0x0B	; 11
   101c2:	0e 94 db 97 	call	0x12fb6	; 0x12fb6 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:54
LCDWIKI_TOUCH my_touch(28, 27, 29, 30, 7, 31); //tcs,tclk,tdout,tdin,tirq, sdcd
   101c6:	2f e1       	ldi	r18, 0x1F	; 31
   101c8:	c2 2e       	mov	r12, r18
   101ca:	37 e0       	ldi	r19, 0x07	; 7
   101cc:	e3 2e       	mov	r14, r19
   101ce:	0e e1       	ldi	r16, 0x1E	; 30
   101d0:	2d e1       	ldi	r18, 0x1D	; 29
   101d2:	4b e1       	ldi	r20, 0x1B	; 27
   101d4:	6c e1       	ldi	r22, 0x1C	; 28
   101d6:	83 e8       	ldi	r24, 0x83	; 131
   101d8:	9b e0       	ldi	r25, 0x0B	; 11
   101da:	0e 94 18 a5 	call	0x14a30	; 0x14a30 <LCDWIKI_TOUCH::LCDWIKI_TOUCH(signed char, signed char, signed char, signed char, signed char, signed char)>
_ZN11ArduinoJson18StaticJsonDocumentILj256EEC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/StaticJsonDocument.hpp:18
template <size_t CAPACITY>
class StaticJsonDocument {
 public:
  uint8_t nestingLimit;

  StaticJsonDocument() : nestingLimit(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
   101de:	e4 e7       	ldi	r30, 0x74	; 116
   101e0:	fa e0       	ldi	r31, 0x0A	; 10
   101e2:	8a e0       	ldi	r24, 0x0A	; 10
   101e4:	80 83       	st	Z, r24
_ZN11ArduinoJson9Internals20StaticMemoryPoolBaseC4EPcj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:44
    StaticMemoryPoolBase* _parent;
    char* _start;
  };

  StaticMemoryPoolBase(char* memoryPool, size_t capa)
      : _buffer(memoryPool), _capacity(capa), _size(0) {}
   101e6:	8d e7       	ldi	r24, 0x7D	; 125
   101e8:	9a e0       	ldi	r25, 0x0A	; 10
   101ea:	94 83       	std	Z+4, r25	; 0x04
   101ec:	83 83       	std	Z+3, r24	; 0x03
   101ee:	80 e0       	ldi	r24, 0x00	; 0
   101f0:	91 e0       	ldi	r25, 0x01	; 1
   101f2:	96 83       	std	Z+6, r25	; 0x06
   101f4:	85 83       	std	Z+5, r24	; 0x05
   101f6:	10 86       	std	Z+8, r1	; 0x08
   101f8:	17 82       	std	Z+7, r1	; 0x07
_ZN11ArduinoJson9Internals16StaticMemoryPoolILj256EEC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:115
class StaticMemoryPool : public StaticMemoryPoolBase {
  static const size_t ACTUAL_CAPACITY = Max<1, CAPACITY>::value;

 public:
  explicit StaticMemoryPool()
      : StaticMemoryPoolBase(_buffer, ACTUAL_CAPACITY) {}
   101fa:	81 ed       	ldi	r24, 0xD1	; 209
   101fc:	97 e0       	ldi	r25, 0x07	; 7
   101fe:	92 83       	std	Z+2, r25	; 0x02
   10200:	81 83       	std	Z+1, r24	; 0x01
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
   10202:	10 92 7e 0b 	sts	0x0B7E, r1	; 0x800b7e <doc+0x10a>
   10206:	10 92 7d 0b 	sts	0x0B7D, r1	; 0x800b7d <doc+0x109>
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:58

StaticJsonDocument<256> doc;

SRAM_23LC SRAM(&swSPI, STORAGE_RAM_CS, SRAM_23LC1024);
   1020a:	21 e0       	ldi	r18, 0x01	; 1
   1020c:	30 e0       	ldi	r19, 0x00	; 0
   1020e:	46 e1       	ldi	r20, 0x16	; 22
   10210:	66 e5       	ldi	r22, 0x56	; 86
   10212:	7e e0       	ldi	r23, 0x0E	; 14
   10214:	87 e6       	ldi	r24, 0x67	; 103
   10216:	9a e0       	ldi	r25, 0x0A	; 10
   10218:	0e 94 72 a9 	call	0x152e4	; 0x152e4 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:59
EEPROM_CAT25 SROM(&swSPI, STORAGE_EEPROM_CS , CAT25M02);
   1021c:	30 e0       	ldi	r19, 0x00	; 0
   1021e:	20 e0       	ldi	r18, 0x00	; 0
   10220:	47 e1       	ldi	r20, 0x17	; 23
   10222:	66 e5       	ldi	r22, 0x56	; 86
   10224:	7e e0       	ldi	r23, 0x0E	; 14
   10226:	88 e5       	ldi	r24, 0x58	; 88
   10228:	9a e0       	ldi	r25, 0x0A	; 10
_GLOBAL__sub_I__Z11serial_putccP6__file():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5627
  else
  {
    selftest_set_0(SELFTEST_ERR_NTP);

  }
}
   1022a:	df 91       	pop	r29
   1022c:	cf 91       	pop	r28
   1022e:	0f 91       	pop	r16
   10230:	ef 90       	pop	r14
   10232:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:59
LCDWIKI_TOUCH my_touch(28, 27, 29, 30, 7, 31); //tcs,tclk,tdout,tdin,tirq, sdcd

StaticJsonDocument<256> doc;

SRAM_23LC SRAM(&swSPI, STORAGE_RAM_CS, SRAM_23LC1024);
EEPROM_CAT25 SROM(&swSPI, STORAGE_EEPROM_CS , CAT25M02);
   10234:	0c 94 a3 aa 	jmp	0x15546	; 0x15546 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)>

00010238 <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
   10238:	cf 93       	push	r28
   1023a:	c8 2f       	mov	r28, r24
_ZN14HardwareSerial5writeEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   1023c:	68 2f       	mov	r22, r24
   1023e:	8f e0       	ldi	r24, 0x0F	; 15
   10240:	92 e1       	ldi	r25, 0x12	; 18
   10242:	0e 94 74 d3 	call	0x1a6e8	; 0x1a6e8 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
   10246:	8c 2f       	mov	r24, r28
   10248:	cc 0f       	add	r28, r28
   1024a:	99 0b       	sbc	r25, r25
   1024c:	cf 91       	pop	r28
   1024e:	08 95       	ret

00010250 <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:466
}

PubSubClient * mqtt_get_public_mqtt_client(void)
{
  return pub_mqtt_client;
}
   10250:	0c 94 80 e4 	jmp	0x1c900	; 0x1c900 <eeprom_read_byte>

00010254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   10254:	0c 94 88 e4 	jmp	0x1c910	; 0x1c910 <eeprom_write_byte>

00010258 <load_setup_network()>:
_Z18load_setup_networkv():
   10258:	ef 92       	push	r14
   1025a:	ff 92       	push	r15
   1025c:	0f 93       	push	r16
   1025e:	1f 93       	push	r17
   10260:	cf 93       	push	r28
   10262:	df 93       	push	r29
   10264:	0f ee       	ldi	r16, 0xEF	; 239
   10266:	1e e0       	ldi	r17, 0x0E	; 14
   10268:	ce e6       	ldi	r28, 0x6E	; 110
   1026a:	d0 e0       	ldi	r29, 0x00	; 0
   1026c:	ce 01       	movw	r24, r28
   1026e:	0e 94 28 81 	call	0x10250	; 0x10250 <EEPROMClass::read(int) [clone .isra.0]>
   10272:	f8 01       	movw	r30, r16
   10274:	81 93       	st	Z+, r24
   10276:	8f 01       	movw	r16, r30
   10278:	21 96       	adiw	r28, 0x01	; 1
   1027a:	c4 37       	cpi	r28, 0x74	; 116
   1027c:	d1 05       	cpc	r29, r1
   1027e:	b1 f7       	brne	.-20     	; 0x1026c <load_setup_network()+0x14>
   10280:	05 ef       	ldi	r16, 0xF5	; 245
   10282:	1e e0       	ldi	r17, 0x0E	; 14
   10284:	ce 01       	movw	r24, r28
   10286:	0e 94 28 81 	call	0x10250	; 0x10250 <EEPROMClass::read(int) [clone .isra.0]>
   1028a:	f8 01       	movw	r30, r16
   1028c:	81 93       	st	Z+, r24
   1028e:	8f 01       	movw	r16, r30
   10290:	21 96       	adiw	r28, 0x01	; 1
   10292:	c8 37       	cpi	r28, 0x78	; 120
   10294:	d1 05       	cpc	r29, r1
   10296:	b1 f7       	brne	.-20     	; 0x10284 <load_setup_network()+0x2c>
   10298:	09 ef       	ldi	r16, 0xF9	; 249
   1029a:	1e e0       	ldi	r17, 0x0E	; 14
   1029c:	ce 01       	movw	r24, r28
   1029e:	0e 94 28 81 	call	0x10250	; 0x10250 <EEPROMClass::read(int) [clone .isra.0]>
   102a2:	f8 01       	movw	r30, r16
   102a4:	81 93       	st	Z+, r24
   102a6:	8f 01       	movw	r16, r30
   102a8:	21 96       	adiw	r28, 0x01	; 1
   102aa:	cc 37       	cpi	r28, 0x7C	; 124
   102ac:	d1 05       	cpc	r29, r1
   102ae:	b1 f7       	brne	.-20     	; 0x1029c <load_setup_network()+0x44>
   102b0:	41 e0       	ldi	r20, 0x01	; 1
   102b2:	e4 2e       	mov	r14, r20
   102b4:	4f e0       	ldi	r20, 0x0F	; 15
   102b6:	f4 2e       	mov	r15, r20
   102b8:	00 e8       	ldi	r16, 0x80	; 128
   102ba:	10 e0       	ldi	r17, 0x00	; 0
   102bc:	c8 01       	movw	r24, r16
   102be:	0e 94 28 81 	call	0x10250	; 0x10250 <EEPROMClass::read(int) [clone .isra.0]>
   102c2:	f7 01       	movw	r30, r14
   102c4:	81 93       	st	Z+, r24
   102c6:	7f 01       	movw	r14, r30
   102c8:	0f 5f       	subi	r16, 0xFF	; 255
   102ca:	1f 4f       	sbci	r17, 0xFF	; 255
   102cc:	04 38       	cpi	r16, 0x84	; 132
   102ce:	11 05       	cpc	r17, r1
   102d0:	a9 f7       	brne	.-22     	; 0x102bc <load_setup_network()+0x64>
   102d2:	3d ef       	ldi	r19, 0xFD	; 253
   102d4:	e3 2e       	mov	r14, r19
   102d6:	3e e0       	ldi	r19, 0x0E	; 14
   102d8:	f3 2e       	mov	r15, r19
   102da:	ce 01       	movw	r24, r28
   102dc:	0e 94 28 81 	call	0x10250	; 0x10250 <EEPROMClass::read(int) [clone .isra.0]>
   102e0:	f7 01       	movw	r30, r14
   102e2:	81 93       	st	Z+, r24
   102e4:	7f 01       	movw	r14, r30
   102e6:	21 96       	adiw	r28, 0x01	; 1
   102e8:	c0 38       	cpi	r28, 0x80	; 128
   102ea:	d1 05       	cpc	r29, r1
   102ec:	b1 f7       	brne	.-20     	; 0x102da <load_setup_network()+0x82>
   102ee:	25 e0       	ldi	r18, 0x05	; 5
   102f0:	e2 2e       	mov	r14, r18
   102f2:	2f e0       	ldi	r18, 0x0F	; 15
   102f4:	f2 2e       	mov	r15, r18
   102f6:	c4 e6       	ldi	r28, 0x64	; 100
   102f8:	d0 e0       	ldi	r29, 0x00	; 0
   102fa:	ce 01       	movw	r24, r28
   102fc:	0e 94 28 81 	call	0x10250	; 0x10250 <EEPROMClass::read(int) [clone .isra.0]>
   10300:	f7 01       	movw	r30, r14
   10302:	81 93       	st	Z+, r24
   10304:	7f 01       	movw	r14, r30
   10306:	21 96       	adiw	r28, 0x01	; 1
   10308:	cd 36       	cpi	r28, 0x6D	; 109
   1030a:	d1 05       	cpc	r29, r1
   1030c:	b1 f7       	brne	.-20     	; 0x102fa <load_setup_network()+0xa2>
   1030e:	cf e0       	ldi	r28, 0x0F	; 15
   10310:	df e0       	ldi	r29, 0x0F	; 15
   10312:	c8 01       	movw	r24, r16
   10314:	0e 94 28 81 	call	0x10250	; 0x10250 <EEPROMClass::read(int) [clone .isra.0]>
   10318:	89 93       	st	Y+, r24
   1031a:	0f 5f       	subi	r16, 0xFF	; 255
   1031c:	1f 4f       	sbci	r17, 0xFF	; 255
   1031e:	08 38       	cpi	r16, 0x88	; 136
   10320:	11 05       	cpc	r17, r1
   10322:	b9 f7       	brne	.-18     	; 0x10312 <load_setup_network()+0xba>
   10324:	88 e8       	ldi	r24, 0x88	; 136
   10326:	90 e0       	ldi	r25, 0x00	; 0
   10328:	0e 94 28 81 	call	0x10250	; 0x10250 <EEPROMClass::read(int) [clone .isra.0]>
   1032c:	c8 2f       	mov	r28, r24
   1032e:	89 e8       	ldi	r24, 0x89	; 137
   10330:	90 e0       	ldi	r25, 0x00	; 0
   10332:	0e 94 28 81 	call	0x10250	; 0x10250 <EEPROMClass::read(int) [clone .isra.0]>
   10336:	2c 2f       	mov	r18, r28
   10338:	30 e0       	ldi	r19, 0x00	; 0
   1033a:	32 2f       	mov	r19, r18
   1033c:	22 27       	eor	r18, r18
   1033e:	82 0f       	add	r24, r18
   10340:	93 2f       	mov	r25, r19
   10342:	91 1d       	adc	r25, r1
   10344:	90 93 14 0f 	sts	0x0F14, r25	; 0x800f14 <device+0x25>
   10348:	80 93 13 0f 	sts	0x0F13, r24	; 0x800f13 <device+0x24>
   1034c:	05 e1       	ldi	r16, 0x15	; 21
   1034e:	1f e0       	ldi	r17, 0x0F	; 15
   10350:	ca e8       	ldi	r28, 0x8A	; 138
   10352:	d0 e0       	ldi	r29, 0x00	; 0
   10354:	ce 01       	movw	r24, r28
   10356:	0e 94 28 81 	call	0x10250	; 0x10250 <EEPROMClass::read(int) [clone .isra.0]>
   1035a:	f8 01       	movw	r30, r16
   1035c:	81 93       	st	Z+, r24
   1035e:	8f 01       	movw	r16, r30
   10360:	21 96       	adiw	r28, 0x01	; 1
   10362:	ce 39       	cpi	r28, 0x9E	; 158
   10364:	d1 05       	cpc	r29, r1
   10366:	b1 f7       	brne	.-20     	; 0x10354 <load_setup_network()+0xfc>
   10368:	09 e2       	ldi	r16, 0x29	; 41
   1036a:	1f e0       	ldi	r17, 0x0F	; 15
   1036c:	ce 01       	movw	r24, r28
   1036e:	0e 94 28 81 	call	0x10250	; 0x10250 <EEPROMClass::read(int) [clone .isra.0]>
   10372:	f8 01       	movw	r30, r16
   10374:	81 93       	st	Z+, r24
   10376:	8f 01       	movw	r16, r30
   10378:	21 96       	adiw	r28, 0x01	; 1
   1037a:	c2 3b       	cpi	r28, 0xB2	; 178
   1037c:	d1 05       	cpc	r29, r1
   1037e:	b1 f7       	brne	.-20     	; 0x1036c <load_setup_network()+0x114>
   10380:	0d e3       	ldi	r16, 0x3D	; 61
   10382:	1f e0       	ldi	r17, 0x0F	; 15
   10384:	ce 01       	movw	r24, r28
   10386:	0e 94 28 81 	call	0x10250	; 0x10250 <EEPROMClass::read(int) [clone .isra.0]>
   1038a:	f8 01       	movw	r30, r16
   1038c:	81 93       	st	Z+, r24
   1038e:	8f 01       	movw	r16, r30
   10390:	21 96       	adiw	r28, 0x01	; 1
   10392:	c6 3b       	cpi	r28, 0xB6	; 182
   10394:	d1 05       	cpc	r29, r1
   10396:	b1 f7       	brne	.-20     	; 0x10384 <load_setup_network()+0x12c>
   10398:	df 91       	pop	r29
   1039a:	cf 91       	pop	r28
   1039c:	1f 91       	pop	r17
   1039e:	0f 91       	pop	r16
   103a0:	ff 90       	pop	r15
   103a2:	ef 90       	pop	r14
   103a4:	08 95       	ret

000103a6 <save_setup_network()>:
_Z18save_setup_networkv():
   103a6:	ef 92       	push	r14
   103a8:	ff 92       	push	r15
   103aa:	0f 93       	push	r16
   103ac:	1f 93       	push	r17
   103ae:	cf 93       	push	r28
   103b0:	df 93       	push	r29
   103b2:	0f ee       	ldi	r16, 0xEF	; 239
   103b4:	1e e0       	ldi	r17, 0x0E	; 14
   103b6:	ce e6       	ldi	r28, 0x6E	; 110
   103b8:	d0 e0       	ldi	r29, 0x00	; 0
   103ba:	f8 01       	movw	r30, r16
   103bc:	61 91       	ld	r22, Z+
   103be:	8f 01       	movw	r16, r30
   103c0:	ce 01       	movw	r24, r28
   103c2:	0e 94 2a 81 	call	0x10254	; 0x10254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   103c6:	21 96       	adiw	r28, 0x01	; 1
   103c8:	c4 37       	cpi	r28, 0x74	; 116
   103ca:	d1 05       	cpc	r29, r1
   103cc:	b1 f7       	brne	.-20     	; 0x103ba <save_setup_network()+0x14>
   103ce:	05 ef       	ldi	r16, 0xF5	; 245
   103d0:	1e e0       	ldi	r17, 0x0E	; 14
   103d2:	f8 01       	movw	r30, r16
   103d4:	61 91       	ld	r22, Z+
   103d6:	8f 01       	movw	r16, r30
   103d8:	ce 01       	movw	r24, r28
   103da:	0e 94 2a 81 	call	0x10254	; 0x10254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   103de:	21 96       	adiw	r28, 0x01	; 1
   103e0:	c8 37       	cpi	r28, 0x78	; 120
   103e2:	d1 05       	cpc	r29, r1
   103e4:	b1 f7       	brne	.-20     	; 0x103d2 <save_setup_network()+0x2c>
   103e6:	09 ef       	ldi	r16, 0xF9	; 249
   103e8:	1e e0       	ldi	r17, 0x0E	; 14
   103ea:	f8 01       	movw	r30, r16
   103ec:	61 91       	ld	r22, Z+
   103ee:	8f 01       	movw	r16, r30
   103f0:	ce 01       	movw	r24, r28
   103f2:	0e 94 2a 81 	call	0x10254	; 0x10254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   103f6:	21 96       	adiw	r28, 0x01	; 1
   103f8:	cc 37       	cpi	r28, 0x7C	; 124
   103fa:	d1 05       	cpc	r29, r1
   103fc:	b1 f7       	brne	.-20     	; 0x103ea <save_setup_network()+0x44>
   103fe:	21 e0       	ldi	r18, 0x01	; 1
   10400:	e2 2e       	mov	r14, r18
   10402:	2f e0       	ldi	r18, 0x0F	; 15
   10404:	f2 2e       	mov	r15, r18
   10406:	00 e8       	ldi	r16, 0x80	; 128
   10408:	10 e0       	ldi	r17, 0x00	; 0
   1040a:	f7 01       	movw	r30, r14
   1040c:	61 91       	ld	r22, Z+
   1040e:	7f 01       	movw	r14, r30
   10410:	c8 01       	movw	r24, r16
   10412:	0e 94 2a 81 	call	0x10254	; 0x10254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10416:	0f 5f       	subi	r16, 0xFF	; 255
   10418:	1f 4f       	sbci	r17, 0xFF	; 255
   1041a:	04 38       	cpi	r16, 0x84	; 132
   1041c:	11 05       	cpc	r17, r1
   1041e:	a9 f7       	brne	.-22     	; 0x1040a <save_setup_network()+0x64>
   10420:	9d ef       	ldi	r25, 0xFD	; 253
   10422:	e9 2e       	mov	r14, r25
   10424:	9e e0       	ldi	r25, 0x0E	; 14
   10426:	f9 2e       	mov	r15, r25
   10428:	f7 01       	movw	r30, r14
   1042a:	61 91       	ld	r22, Z+
   1042c:	7f 01       	movw	r14, r30
   1042e:	ce 01       	movw	r24, r28
   10430:	0e 94 2a 81 	call	0x10254	; 0x10254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10434:	21 96       	adiw	r28, 0x01	; 1
   10436:	c0 38       	cpi	r28, 0x80	; 128
   10438:	d1 05       	cpc	r29, r1
   1043a:	b1 f7       	brne	.-20     	; 0x10428 <save_setup_network()+0x82>
   1043c:	85 e0       	ldi	r24, 0x05	; 5
   1043e:	e8 2e       	mov	r14, r24
   10440:	8f e0       	ldi	r24, 0x0F	; 15
   10442:	f8 2e       	mov	r15, r24
   10444:	c4 e6       	ldi	r28, 0x64	; 100
   10446:	d0 e0       	ldi	r29, 0x00	; 0
   10448:	f7 01       	movw	r30, r14
   1044a:	61 91       	ld	r22, Z+
   1044c:	7f 01       	movw	r14, r30
   1044e:	ce 01       	movw	r24, r28
   10450:	0e 94 2a 81 	call	0x10254	; 0x10254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10454:	21 96       	adiw	r28, 0x01	; 1
   10456:	cd 36       	cpi	r28, 0x6D	; 109
   10458:	d1 05       	cpc	r29, r1
   1045a:	b1 f7       	brne	.-20     	; 0x10448 <save_setup_network()+0xa2>
   1045c:	cf e0       	ldi	r28, 0x0F	; 15
   1045e:	df e0       	ldi	r29, 0x0F	; 15
   10460:	69 91       	ld	r22, Y+
   10462:	c8 01       	movw	r24, r16
   10464:	0e 94 2a 81 	call	0x10254	; 0x10254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10468:	0f 5f       	subi	r16, 0xFF	; 255
   1046a:	1f 4f       	sbci	r17, 0xFF	; 255
   1046c:	08 38       	cpi	r16, 0x88	; 136
   1046e:	11 05       	cpc	r17, r1
   10470:	b9 f7       	brne	.-18     	; 0x10460 <save_setup_network()+0xba>
   10472:	60 91 14 0f 	lds	r22, 0x0F14	; 0x800f14 <device+0x25>
   10476:	88 e8       	ldi	r24, 0x88	; 136
   10478:	90 e0       	ldi	r25, 0x00	; 0
   1047a:	0e 94 2a 81 	call	0x10254	; 0x10254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1047e:	60 91 13 0f 	lds	r22, 0x0F13	; 0x800f13 <device+0x24>
   10482:	89 e8       	ldi	r24, 0x89	; 137
   10484:	90 e0       	ldi	r25, 0x00	; 0
   10486:	0e 94 2a 81 	call	0x10254	; 0x10254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1048a:	05 e1       	ldi	r16, 0x15	; 21
   1048c:	1f e0       	ldi	r17, 0x0F	; 15
   1048e:	ca e8       	ldi	r28, 0x8A	; 138
   10490:	d0 e0       	ldi	r29, 0x00	; 0
   10492:	f8 01       	movw	r30, r16
   10494:	61 91       	ld	r22, Z+
   10496:	8f 01       	movw	r16, r30
   10498:	ce 01       	movw	r24, r28
   1049a:	0e 94 2a 81 	call	0x10254	; 0x10254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1049e:	21 96       	adiw	r28, 0x01	; 1
   104a0:	ce 39       	cpi	r28, 0x9E	; 158
   104a2:	d1 05       	cpc	r29, r1
   104a4:	b1 f7       	brne	.-20     	; 0x10492 <save_setup_network()+0xec>
   104a6:	09 e2       	ldi	r16, 0x29	; 41
   104a8:	1f e0       	ldi	r17, 0x0F	; 15
   104aa:	f8 01       	movw	r30, r16
   104ac:	61 91       	ld	r22, Z+
   104ae:	8f 01       	movw	r16, r30
   104b0:	ce 01       	movw	r24, r28
   104b2:	0e 94 2a 81 	call	0x10254	; 0x10254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   104b6:	21 96       	adiw	r28, 0x01	; 1
   104b8:	c2 3b       	cpi	r28, 0xB2	; 178
   104ba:	d1 05       	cpc	r29, r1
   104bc:	b1 f7       	brne	.-20     	; 0x104aa <save_setup_network()+0x104>
   104be:	0d e3       	ldi	r16, 0x3D	; 61
   104c0:	1f e0       	ldi	r17, 0x0F	; 15
   104c2:	f8 01       	movw	r30, r16
   104c4:	61 91       	ld	r22, Z+
   104c6:	8f 01       	movw	r16, r30
   104c8:	ce 01       	movw	r24, r28
   104ca:	0e 94 2a 81 	call	0x10254	; 0x10254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   104ce:	21 96       	adiw	r28, 0x01	; 1
   104d0:	c6 3b       	cpi	r28, 0xB6	; 182
   104d2:	d1 05       	cpc	r29, r1
   104d4:	b1 f7       	brne	.-20     	; 0x104c2 <save_setup_network()+0x11c>
   104d6:	df 91       	pop	r29
   104d8:	cf 91       	pop	r28
   104da:	1f 91       	pop	r17
   104dc:	0f 91       	pop	r16
   104de:	ff 90       	pop	r15
   104e0:	ef 90       	pop	r14
   104e2:	08 95       	ret

000104e4 <device_get_name(char*)>:
_Z15device_get_namePc():
   104e4:	0f 93       	push	r16
   104e6:	1f 93       	push	r17
   104e8:	cf 93       	push	r28
   104ea:	df 93       	push	r29
   104ec:	8c 01       	movw	r16, r24
   104ee:	c4 e6       	ldi	r28, 0x64	; 100
   104f0:	d0 e0       	ldi	r29, 0x00	; 0
   104f2:	ce 01       	movw	r24, r28
   104f4:	0e 94 28 81 	call	0x10250	; 0x10250 <EEPROMClass::read(int) [clone .isra.0]>
   104f8:	f8 01       	movw	r30, r16
   104fa:	81 93       	st	Z+, r24
   104fc:	8f 01       	movw	r16, r30
   104fe:	10 82       	st	Z, r1
   10500:	88 23       	and	r24, r24
   10502:	21 f0       	breq	.+8      	; 0x1050c <device_get_name(char*)+0x28>
   10504:	21 96       	adiw	r28, 0x01	; 1
   10506:	cd 36       	cpi	r28, 0x6D	; 109
   10508:	d1 05       	cpc	r29, r1
   1050a:	99 f7       	brne	.-26     	; 0x104f2 <device_get_name(char*)+0xe>
   1050c:	df 91       	pop	r29
   1050e:	cf 91       	pop	r28
   10510:	1f 91       	pop	r17
   10512:	0f 91       	pop	r16
   10514:	08 95       	ret

00010516 <device_set_name(char*)>:
_Z15device_set_namePc():
   10516:	ff 92       	push	r15
   10518:	0f 93       	push	r16
   1051a:	1f 93       	push	r17
   1051c:	cf 93       	push	r28
   1051e:	df 93       	push	r29
   10520:	8c 01       	movw	r16, r24
   10522:	d0 e0       	ldi	r29, 0x00	; 0
   10524:	c0 e0       	ldi	r28, 0x00	; 0
   10526:	f8 01       	movw	r30, r16
   10528:	f1 90       	ld	r15, Z+
   1052a:	8f 01       	movw	r16, r30
   1052c:	6f 2d       	mov	r22, r15
   1052e:	ce 01       	movw	r24, r28
   10530:	8c 59       	subi	r24, 0x9C	; 156
   10532:	9f 4f       	sbci	r25, 0xFF	; 255
   10534:	0e 94 2a 81 	call	0x10254	; 0x10254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10538:	f1 10       	cpse	r15, r1
   1053a:	0b c0       	rjmp	.+22     	; 0x10552 <device_set_name(char*)+0x3c>
   1053c:	60 e0       	ldi	r22, 0x00	; 0
   1053e:	ce 01       	movw	r24, r28
   10540:	8b 59       	subi	r24, 0x9B	; 155
   10542:	9f 4f       	sbci	r25, 0xFF	; 255
   10544:	df 91       	pop	r29
   10546:	cf 91       	pop	r28
   10548:	1f 91       	pop	r17
   1054a:	0f 91       	pop	r16
   1054c:	ff 90       	pop	r15
   1054e:	0c 94 2a 81 	jmp	0x10254	; 0x10254 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10552:	21 96       	adiw	r28, 0x01	; 1
   10554:	c9 30       	cpi	r28, 0x09	; 9
   10556:	d1 05       	cpc	r29, r1
   10558:	31 f7       	brne	.-52     	; 0x10526 <device_set_name(char*)+0x10>
   1055a:	df 91       	pop	r29
   1055c:	cf 91       	pop	r28
   1055e:	1f 91       	pop	r17
   10560:	0f 91       	pop	r16
   10562:	ff 90       	pop	r15
   10564:	08 95       	ret

00010566 <setting_network(char*, char*)>:
_Z15setting_networkPcS_():
   10566:	ef 92       	push	r14
   10568:	ff 92       	push	r15
   1056a:	0f 93       	push	r16
   1056c:	1f 93       	push	r17
   1056e:	cf 93       	push	r28
   10570:	df 93       	push	r29
   10572:	7b 01       	movw	r14, r22
   10574:	63 e3       	ldi	r22, 0x33	; 51
   10576:	73 e0       	ldi	r23, 0x03	; 3
   10578:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
   1057c:	ec 01       	movw	r28, r24
   1057e:	10 e0       	ldi	r17, 0x00	; 0
   10580:	20 97       	sbiw	r28, 0x00	; 0
   10582:	09 f4       	brne	.+2      	; 0x10586 <setting_network(char*, char*)+0x20>
   10584:	ba c0       	rjmp	.+372    	; 0x106fa <setting_network(char*, char*)+0x194>
   10586:	63 ed       	ldi	r22, 0xD3	; 211
   10588:	77 e0       	ldi	r23, 0x07	; 7
   1058a:	ce 01       	movw	r24, r28
   1058c:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
   10590:	89 2b       	or	r24, r25
   10592:	59 f4       	brne	.+22     	; 0x105aa <setting_network(char*, char*)+0x44>
   10594:	0a e0       	ldi	r16, 0x0A	; 10
   10596:	10 e0       	ldi	r17, 0x00	; 0
   10598:	26 e0       	ldi	r18, 0x06	; 6
   1059a:	30 e0       	ldi	r19, 0x00	; 0
   1059c:	4f ee       	ldi	r20, 0xEF	; 239
   1059e:	5e e0       	ldi	r21, 0x0E	; 14
   105a0:	6a e3       	ldi	r22, 0x3A	; 58
   105a2:	c7 01       	movw	r24, r14
   105a4:	0e 94 85 b8 	call	0x1710a	; 0x1710a <parseBytes(char const*, char, unsigned char*, int, int)>
   105a8:	11 e0       	ldi	r17, 0x01	; 1
   105aa:	67 ed       	ldi	r22, 0xD7	; 215
   105ac:	77 e0       	ldi	r23, 0x07	; 7
   105ae:	ce 01       	movw	r24, r28
   105b0:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
   105b4:	89 2b       	or	r24, r25
   105b6:	59 f4       	brne	.+22     	; 0x105ce <setting_network(char*, char*)+0x68>
   105b8:	0a e0       	ldi	r16, 0x0A	; 10
   105ba:	10 e0       	ldi	r17, 0x00	; 0
   105bc:	24 e0       	ldi	r18, 0x04	; 4
   105be:	30 e0       	ldi	r19, 0x00	; 0
   105c0:	45 ef       	ldi	r20, 0xF5	; 245
   105c2:	5e e0       	ldi	r21, 0x0E	; 14
   105c4:	6e e2       	ldi	r22, 0x2E	; 46
   105c6:	c7 01       	movw	r24, r14
   105c8:	0e 94 85 b8 	call	0x1710a	; 0x1710a <parseBytes(char const*, char, unsigned char*, int, int)>
   105cc:	11 e0       	ldi	r17, 0x01	; 1
   105ce:	6a ed       	ldi	r22, 0xDA	; 218
   105d0:	77 e0       	ldi	r23, 0x07	; 7
   105d2:	ce 01       	movw	r24, r28
   105d4:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
   105d8:	89 2b       	or	r24, r25
   105da:	59 f4       	brne	.+22     	; 0x105f2 <setting_network(char*, char*)+0x8c>
   105dc:	0a e0       	ldi	r16, 0x0A	; 10
   105de:	10 e0       	ldi	r17, 0x00	; 0
   105e0:	24 e0       	ldi	r18, 0x04	; 4
   105e2:	30 e0       	ldi	r19, 0x00	; 0
   105e4:	49 ef       	ldi	r20, 0xF9	; 249
   105e6:	5e e0       	ldi	r21, 0x0E	; 14
   105e8:	6e e2       	ldi	r22, 0x2E	; 46
   105ea:	c7 01       	movw	r24, r14
   105ec:	0e 94 85 b8 	call	0x1710a	; 0x1710a <parseBytes(char const*, char, unsigned char*, int, int)>
   105f0:	11 e0       	ldi	r17, 0x01	; 1
   105f2:	62 ee       	ldi	r22, 0xE2	; 226
   105f4:	77 e0       	ldi	r23, 0x07	; 7
   105f6:	ce 01       	movw	r24, r28
   105f8:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
   105fc:	89 2b       	or	r24, r25
   105fe:	59 f4       	brne	.+22     	; 0x10616 <setting_network(char*, char*)+0xb0>
   10600:	0a e0       	ldi	r16, 0x0A	; 10
   10602:	10 e0       	ldi	r17, 0x00	; 0
   10604:	24 e0       	ldi	r18, 0x04	; 4
   10606:	30 e0       	ldi	r19, 0x00	; 0
   10608:	41 e0       	ldi	r20, 0x01	; 1
   1060a:	5f e0       	ldi	r21, 0x0F	; 15
   1060c:	6e e2       	ldi	r22, 0x2E	; 46
   1060e:	c7 01       	movw	r24, r14
   10610:	0e 94 85 b8 	call	0x1710a	; 0x1710a <parseBytes(char const*, char, unsigned char*, int, int)>
   10614:	11 e0       	ldi	r17, 0x01	; 1
   10616:	65 ee       	ldi	r22, 0xE5	; 229
   10618:	77 e0       	ldi	r23, 0x07	; 7
   1061a:	ce 01       	movw	r24, r28
   1061c:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
   10620:	89 2b       	or	r24, r25
   10622:	59 f4       	brne	.+22     	; 0x1063a <setting_network(char*, char*)+0xd4>
   10624:	0a e0       	ldi	r16, 0x0A	; 10
   10626:	10 e0       	ldi	r17, 0x00	; 0
   10628:	24 e0       	ldi	r18, 0x04	; 4
   1062a:	30 e0       	ldi	r19, 0x00	; 0
   1062c:	4d ef       	ldi	r20, 0xFD	; 253
   1062e:	5e e0       	ldi	r21, 0x0E	; 14
   10630:	6e e2       	ldi	r22, 0x2E	; 46
   10632:	c7 01       	movw	r24, r14
   10634:	0e 94 85 b8 	call	0x1710a	; 0x1710a <parseBytes(char const*, char, unsigned char*, int, int)>
   10638:	11 e0       	ldi	r17, 0x01	; 1
   1063a:	69 ee       	ldi	r22, 0xE9	; 233
   1063c:	77 e0       	ldi	r23, 0x07	; 7
   1063e:	ce 01       	movw	r24, r28
   10640:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
   10644:	89 2b       	or	r24, r25
   10646:	59 f4       	brne	.+22     	; 0x1065e <setting_network(char*, char*)+0xf8>
   10648:	0a e0       	ldi	r16, 0x0A	; 10
   1064a:	10 e0       	ldi	r17, 0x00	; 0
   1064c:	24 e0       	ldi	r18, 0x04	; 4
   1064e:	30 e0       	ldi	r19, 0x00	; 0
   10650:	4d e3       	ldi	r20, 0x3D	; 61
   10652:	5f e0       	ldi	r21, 0x0F	; 15
   10654:	6e e2       	ldi	r22, 0x2E	; 46
   10656:	c7 01       	movw	r24, r14
   10658:	0e 94 85 b8 	call	0x1710a	; 0x1710a <parseBytes(char const*, char, unsigned char*, int, int)>
   1065c:	11 e0       	ldi	r17, 0x01	; 1
   1065e:	6d ee       	ldi	r22, 0xED	; 237
   10660:	77 e0       	ldi	r23, 0x07	; 7
   10662:	ce 01       	movw	r24, r28
   10664:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
   10668:	89 2b       	or	r24, r25
   1066a:	59 f4       	brne	.+22     	; 0x10682 <setting_network(char*, char*)+0x11c>
   1066c:	0a e0       	ldi	r16, 0x0A	; 10
   1066e:	10 e0       	ldi	r17, 0x00	; 0
   10670:	24 e0       	ldi	r18, 0x04	; 4
   10672:	30 e0       	ldi	r19, 0x00	; 0
   10674:	4f e0       	ldi	r20, 0x0F	; 15
   10676:	5f e0       	ldi	r21, 0x0F	; 15
   10678:	6e e2       	ldi	r22, 0x2E	; 46
   1067a:	c7 01       	movw	r24, r14
   1067c:	0e 94 85 b8 	call	0x1710a	; 0x1710a <parseBytes(char const*, char, unsigned char*, int, int)>
   10680:	11 e0       	ldi	r17, 0x01	; 1
   10682:	67 ef       	ldi	r22, 0xF7	; 247
   10684:	77 e0       	ldi	r23, 0x07	; 7
   10686:	ce 01       	movw	r24, r28
   10688:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
   1068c:	89 2b       	or	r24, r25
   1068e:	41 f4       	brne	.+16     	; 0x106a0 <setting_network(char*, char*)+0x13a>
   10690:	c7 01       	movw	r24, r14
   10692:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
   10696:	90 93 14 0f 	sts	0x0F14, r25	; 0x800f14 <device+0x25>
   1069a:	80 93 13 0f 	sts	0x0F13, r24	; 0x800f13 <device+0x24>
   1069e:	11 e0       	ldi	r17, 0x01	; 1
   106a0:	61 e0       	ldi	r22, 0x01	; 1
   106a2:	78 e0       	ldi	r23, 0x08	; 8
   106a4:	ce 01       	movw	r24, r28
   106a6:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
   106aa:	89 2b       	or	r24, r25
   106ac:	31 f4       	brne	.+12     	; 0x106ba <setting_network(char*, char*)+0x154>
   106ae:	b7 01       	movw	r22, r14
   106b0:	85 e1       	ldi	r24, 0x15	; 21
   106b2:	9f e0       	ldi	r25, 0x0F	; 15
   106b4:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
   106b8:	11 e0       	ldi	r17, 0x01	; 1
   106ba:	6b e0       	ldi	r22, 0x0B	; 11
   106bc:	78 e0       	ldi	r23, 0x08	; 8
   106be:	ce 01       	movw	r24, r28
   106c0:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
   106c4:	89 2b       	or	r24, r25
   106c6:	31 f4       	brne	.+12     	; 0x106d4 <setting_network(char*, char*)+0x16e>
   106c8:	b7 01       	movw	r22, r14
   106ca:	89 e2       	ldi	r24, 0x29	; 41
   106cc:	9f e0       	ldi	r25, 0x0F	; 15
   106ce:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
   106d2:	11 e0       	ldi	r17, 0x01	; 1
   106d4:	63 e7       	ldi	r22, 0x73	; 115
   106d6:	73 e0       	ldi	r23, 0x03	; 3
   106d8:	ce 01       	movw	r24, r28
   106da:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <strcmp>
   106de:	89 2b       	or	r24, r25
   106e0:	21 f4       	brne	.+8      	; 0x106ea <setting_network(char*, char*)+0x184>
   106e2:	c7 01       	movw	r24, r14
   106e4:	0e 94 8b 82 	call	0x10516	; 0x10516 <device_set_name(char*)>
   106e8:	12 e0       	ldi	r17, 0x02	; 2
   106ea:	63 e3       	ldi	r22, 0x33	; 51
   106ec:	73 e0       	ldi	r23, 0x03	; 3
   106ee:	90 e0       	ldi	r25, 0x00	; 0
   106f0:	80 e0       	ldi	r24, 0x00	; 0
   106f2:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
   106f6:	ec 01       	movw	r28, r24
   106f8:	43 cf       	rjmp	.-378    	; 0x10580 <setting_network(char*, char*)+0x1a>
   106fa:	81 2f       	mov	r24, r17
   106fc:	df 91       	pop	r29
   106fe:	cf 91       	pop	r28
   10700:	1f 91       	pop	r17
   10702:	0f 91       	pop	r16
   10704:	ff 90       	pop	r15
   10706:	ef 90       	pop	r14
   10708:	08 95       	ret

0001070a <send_mqtt_set_header(char const*)>:
_Z20send_mqtt_set_headerPKc():
   1070a:	90 93 ec 0e 	sts	0x0EEC, r25	; 0x800eec <header_out+0x1>
   1070e:	80 93 eb 0e 	sts	0x0EEB, r24	; 0x800eeb <header_out>
   10712:	08 95       	ret

00010714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_():
   10714:	9f 92       	push	r9
   10716:	af 92       	push	r10
   10718:	bf 92       	push	r11
   1071a:	cf 92       	push	r12
   1071c:	df 92       	push	r13
   1071e:	ef 92       	push	r14
   10720:	ff 92       	push	r15
   10722:	0f 93       	push	r16
   10724:	1f 93       	push	r17
   10726:	cf 93       	push	r28
   10728:	df 93       	push	r29
   1072a:	cd b7       	in	r28, 0x3d	; 61
   1072c:	de b7       	in	r29, 0x3e	; 62
   1072e:	c6 55       	subi	r28, 0x56	; 86
   10730:	d1 09       	sbc	r29, r1
   10732:	0f b6       	in	r0, 0x3f	; 63
   10734:	f8 94       	cli
   10736:	de bf       	out	0x3e, r29	; 62
   10738:	0f be       	out	0x3f, r0	; 63
   1073a:	cd bf       	out	0x3d, r28	; 61
   1073c:	7c 01       	movw	r14, r24
   1073e:	5b 01       	movw	r10, r22
   10740:	94 2e       	mov	r9, r20
   10742:	69 01       	movw	r12, r18
   10744:	0e 94 15 be 	call	0x17c2a	; 0x17c2a <PubSubClient::connected()>
   10748:	88 23       	and	r24, r24
   1074a:	09 f4       	brne	.+2      	; 0x1074e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0x3a>
   1074c:	51 c0       	rjmp	.+162    	; 0x107f0 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0xdc>
   1074e:	80 91 ed 0e 	lds	r24, 0x0EED	; 0x800eed <mqtt_send_message>
   10752:	90 91 ee 0e 	lds	r25, 0x0EEE	; 0x800eee <mqtt_send_message+0x1>
   10756:	01 96       	adiw	r24, 0x01	; 1
   10758:	90 93 ee 0e 	sts	0x0EEE, r25	; 0x800eee <mqtt_send_message+0x1>
   1075c:	80 93 ed 0e 	sts	0x0EED, r24	; 0x800eed <mqtt_send_message>
   10760:	ce 01       	movw	r24, r28
   10762:	83 5b       	subi	r24, 0xB3	; 179
   10764:	9f 4f       	sbci	r25, 0xFF	; 255
   10766:	0e 94 72 82 	call	0x104e4	; 0x104e4 <device_get_name(char*)>
   1076a:	60 91 eb 0e 	lds	r22, 0x0EEB	; 0x800eeb <header_out>
   1076e:	70 91 ec 0e 	lds	r23, 0x0EEC	; 0x800eec <header_out+0x1>
   10772:	ce 01       	movw	r24, r28
   10774:	01 96       	adiw	r24, 0x01	; 1
   10776:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   1077a:	be 01       	movw	r22, r28
   1077c:	63 5b       	subi	r22, 0xB3	; 179
   1077e:	7f 4f       	sbci	r23, 0xFF	; 255
   10780:	ce 01       	movw	r24, r28
   10782:	01 96       	adiw	r24, 0x01	; 1
   10784:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   10788:	63 e3       	ldi	r22, 0x33	; 51
   1078a:	73 e0       	ldi	r23, 0x03	; 3
   1078c:	ce 01       	movw	r24, r28
   1078e:	01 96       	adiw	r24, 0x01	; 1
   10790:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   10794:	b5 01       	movw	r22, r10
   10796:	ce 01       	movw	r24, r28
   10798:	01 96       	adiw	r24, 0x01	; 1
   1079a:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   1079e:	63 e3       	ldi	r22, 0x33	; 51
   107a0:	73 e0       	ldi	r23, 0x03	; 3
   107a2:	ce 01       	movw	r24, r28
   107a4:	01 96       	adiw	r24, 0x01	; 1
   107a6:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
itoa():
   107aa:	4a e0       	ldi	r20, 0x0A	; 10
   107ac:	be 01       	movw	r22, r28
   107ae:	6f 5b       	subi	r22, 0xBF	; 191
   107b0:	7f 4f       	sbci	r23, 0xFF	; 255
   107b2:	89 2d       	mov	r24, r9
   107b4:	90 e0       	ldi	r25, 0x00	; 0
   107b6:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_():
   107ba:	be 01       	movw	r22, r28
   107bc:	6f 5b       	subi	r22, 0xBF	; 191
   107be:	7f 4f       	sbci	r23, 0xFF	; 255
   107c0:	ce 01       	movw	r24, r28
   107c2:	01 96       	adiw	r24, 0x01	; 1
   107c4:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   107c8:	63 e3       	ldi	r22, 0x33	; 51
   107ca:	73 e0       	ldi	r23, 0x03	; 3
   107cc:	ce 01       	movw	r24, r28
   107ce:	01 96       	adiw	r24, 0x01	; 1
   107d0:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   107d4:	b6 01       	movw	r22, r12
   107d6:	ce 01       	movw	r24, r28
   107d8:	01 96       	adiw	r24, 0x01	; 1
   107da:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   107de:	a8 01       	movw	r20, r16
   107e0:	be 01       	movw	r22, r28
   107e2:	6f 5f       	subi	r22, 0xFF	; 255
   107e4:	7f 4f       	sbci	r23, 0xFF	; 255
   107e6:	c7 01       	movw	r24, r14
   107e8:	0e 94 a3 c1 	call	0x18346	; 0x18346 <PubSubClient::publish(char const*, char const*)>
   107ec:	81 11       	cpse	r24, r1
   107ee:	09 c0       	rjmp	.+18     	; 0x10802 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0xee>
   107f0:	80 91 41 0f 	lds	r24, 0x0F41	; 0x800f41 <mqtt_error>
   107f4:	90 91 42 0f 	lds	r25, 0x0F42	; 0x800f42 <mqtt_error+0x1>
   107f8:	01 96       	adiw	r24, 0x01	; 1
   107fa:	90 93 42 0f 	sts	0x0F42, r25	; 0x800f42 <mqtt_error+0x1>
   107fe:	80 93 41 0f 	sts	0x0F41, r24	; 0x800f41 <mqtt_error>
   10802:	ca 5a       	subi	r28, 0xAA	; 170
   10804:	df 4f       	sbci	r29, 0xFF	; 255
   10806:	0f b6       	in	r0, 0x3f	; 63
   10808:	f8 94       	cli
   1080a:	de bf       	out	0x3e, r29	; 62
   1080c:	0f be       	out	0x3f, r0	; 63
   1080e:	cd bf       	out	0x3d, r28	; 61
   10810:	df 91       	pop	r29
   10812:	cf 91       	pop	r28
   10814:	1f 91       	pop	r17
   10816:	0f 91       	pop	r16
   10818:	ff 90       	pop	r15
   1081a:	ef 90       	pop	r14
   1081c:	df 90       	pop	r13
   1081e:	cf 90       	pop	r12
   10820:	bf 90       	pop	r11
   10822:	af 90       	pop	r10
   10824:	9f 90       	pop	r9
   10826:	08 95       	ret

00010828 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>:
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   10828:	8f 92       	push	r8
   1082a:	9f 92       	push	r9
   1082c:	af 92       	push	r10
   1082e:	bf 92       	push	r11
   10830:	cf 92       	push	r12
   10832:	df 92       	push	r13
   10834:	ef 92       	push	r14
   10836:	ff 92       	push	r15
   10838:	0f 93       	push	r16
   1083a:	1f 93       	push	r17
   1083c:	cf 93       	push	r28
   1083e:	df 93       	push	r29
   10840:	cd b7       	in	r28, 0x3d	; 61
   10842:	de b7       	in	r29, 0x3e	; 62
   10844:	c6 55       	subi	r28, 0x56	; 86
   10846:	d1 09       	sbc	r29, r1
   10848:	0f b6       	in	r0, 0x3f	; 63
   1084a:	f8 94       	cli
   1084c:	de bf       	out	0x3e, r29	; 62
   1084e:	0f be       	out	0x3f, r0	; 63
   10850:	cd bf       	out	0x3d, r28	; 61
   10852:	6c 01       	movw	r12, r24
   10854:	5b 01       	movw	r10, r22
   10856:	84 2e       	mov	r8, r20
   10858:	92 2e       	mov	r9, r18
   1085a:	0e 94 15 be 	call	0x17c2a	; 0x17c2a <PubSubClient::connected()>
   1085e:	88 23       	and	r24, r24
   10860:	09 f4       	brne	.+2      	; 0x10864 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x3c>
   10862:	66 c0       	rjmp	.+204    	; 0x10930 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x108>
   10864:	80 91 ed 0e 	lds	r24, 0x0EED	; 0x800eed <mqtt_send_message>
   10868:	90 91 ee 0e 	lds	r25, 0x0EEE	; 0x800eee <mqtt_send_message+0x1>
   1086c:	01 96       	adiw	r24, 0x01	; 1
   1086e:	90 93 ee 0e 	sts	0x0EEE, r25	; 0x800eee <mqtt_send_message+0x1>
   10872:	80 93 ed 0e 	sts	0x0EED, r24	; 0x800eed <mqtt_send_message>
   10876:	ce 01       	movw	r24, r28
   10878:	83 5b       	subi	r24, 0xB3	; 179
   1087a:	9f 4f       	sbci	r25, 0xFF	; 255
   1087c:	0e 94 72 82 	call	0x104e4	; 0x104e4 <device_get_name(char*)>
   10880:	60 91 eb 0e 	lds	r22, 0x0EEB	; 0x800eeb <header_out>
   10884:	70 91 ec 0e 	lds	r23, 0x0EEC	; 0x800eec <header_out+0x1>
   10888:	ce 01       	movw	r24, r28
   1088a:	01 96       	adiw	r24, 0x01	; 1
   1088c:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   10890:	be 01       	movw	r22, r28
   10892:	63 5b       	subi	r22, 0xB3	; 179
   10894:	7f 4f       	sbci	r23, 0xFF	; 255
   10896:	ce 01       	movw	r24, r28
   10898:	01 96       	adiw	r24, 0x01	; 1
   1089a:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   1089e:	63 e3       	ldi	r22, 0x33	; 51
   108a0:	73 e0       	ldi	r23, 0x03	; 3
   108a2:	ce 01       	movw	r24, r28
   108a4:	01 96       	adiw	r24, 0x01	; 1
   108a6:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   108aa:	b5 01       	movw	r22, r10
   108ac:	ce 01       	movw	r24, r28
   108ae:	01 96       	adiw	r24, 0x01	; 1
   108b0:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   108b4:	63 e3       	ldi	r22, 0x33	; 51
   108b6:	73 e0       	ldi	r23, 0x03	; 3
   108b8:	ce 01       	movw	r24, r28
   108ba:	01 96       	adiw	r24, 0x01	; 1
   108bc:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
itoa():
   108c0:	4a e0       	ldi	r20, 0x0A	; 10
   108c2:	be 01       	movw	r22, r28
   108c4:	6f 5b       	subi	r22, 0xBF	; 191
   108c6:	7f 4f       	sbci	r23, 0xFF	; 255
   108c8:	88 2d       	mov	r24, r8
   108ca:	90 e0       	ldi	r25, 0x00	; 0
   108cc:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   108d0:	be 01       	movw	r22, r28
   108d2:	6f 5b       	subi	r22, 0xBF	; 191
   108d4:	7f 4f       	sbci	r23, 0xFF	; 255
   108d6:	ce 01       	movw	r24, r28
   108d8:	01 96       	adiw	r24, 0x01	; 1
   108da:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   108de:	63 e3       	ldi	r22, 0x33	; 51
   108e0:	73 e0       	ldi	r23, 0x03	; 3
   108e2:	ce 01       	movw	r24, r28
   108e4:	01 96       	adiw	r24, 0x01	; 1
   108e6:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
itoa():
   108ea:	4a e0       	ldi	r20, 0x0A	; 10
   108ec:	be 01       	movw	r22, r28
   108ee:	6f 5b       	subi	r22, 0xBF	; 191
   108f0:	7f 4f       	sbci	r23, 0xFF	; 255
   108f2:	89 2d       	mov	r24, r9
   108f4:	90 e0       	ldi	r25, 0x00	; 0
   108f6:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   108fa:	be 01       	movw	r22, r28
   108fc:	6f 5b       	subi	r22, 0xBF	; 191
   108fe:	7f 4f       	sbci	r23, 0xFF	; 255
   10900:	ce 01       	movw	r24, r28
   10902:	01 96       	adiw	r24, 0x01	; 1
   10904:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   10908:	63 e3       	ldi	r22, 0x33	; 51
   1090a:	73 e0       	ldi	r23, 0x03	; 3
   1090c:	ce 01       	movw	r24, r28
   1090e:	01 96       	adiw	r24, 0x01	; 1
   10910:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   10914:	b8 01       	movw	r22, r16
   10916:	ce 01       	movw	r24, r28
   10918:	01 96       	adiw	r24, 0x01	; 1
   1091a:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   1091e:	a7 01       	movw	r20, r14
   10920:	be 01       	movw	r22, r28
   10922:	6f 5f       	subi	r22, 0xFF	; 255
   10924:	7f 4f       	sbci	r23, 0xFF	; 255
   10926:	c6 01       	movw	r24, r12
   10928:	0e 94 a3 c1 	call	0x18346	; 0x18346 <PubSubClient::publish(char const*, char const*)>
   1092c:	81 11       	cpse	r24, r1
   1092e:	09 c0       	rjmp	.+18     	; 0x10942 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x11a>
   10930:	80 91 41 0f 	lds	r24, 0x0F41	; 0x800f41 <mqtt_error>
   10934:	90 91 42 0f 	lds	r25, 0x0F42	; 0x800f42 <mqtt_error+0x1>
   10938:	01 96       	adiw	r24, 0x01	; 1
   1093a:	90 93 42 0f 	sts	0x0F42, r25	; 0x800f42 <mqtt_error+0x1>
   1093e:	80 93 41 0f 	sts	0x0F41, r24	; 0x800f41 <mqtt_error>
   10942:	ca 5a       	subi	r28, 0xAA	; 170
   10944:	df 4f       	sbci	r29, 0xFF	; 255
   10946:	0f b6       	in	r0, 0x3f	; 63
   10948:	f8 94       	cli
   1094a:	de bf       	out	0x3e, r29	; 62
   1094c:	0f be       	out	0x3f, r0	; 63
   1094e:	cd bf       	out	0x3d, r28	; 61
   10950:	df 91       	pop	r29
   10952:	cf 91       	pop	r28
   10954:	1f 91       	pop	r17
   10956:	0f 91       	pop	r16
   10958:	ff 90       	pop	r15
   1095a:	ef 90       	pop	r14
   1095c:	df 90       	pop	r13
   1095e:	cf 90       	pop	r12
   10960:	bf 90       	pop	r11
   10962:	af 90       	pop	r10
   10964:	9f 90       	pop	r9
   10966:	8f 90       	pop	r8
   10968:	08 95       	ret

0001096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
   1096a:	cf 92       	push	r12
   1096c:	df 92       	push	r13
   1096e:	ef 92       	push	r14
   10970:	ff 92       	push	r15
   10972:	0f 93       	push	r16
   10974:	1f 93       	push	r17
   10976:	cf 93       	push	r28
   10978:	df 93       	push	r29
   1097a:	cd b7       	in	r28, 0x3d	; 61
   1097c:	de b7       	in	r29, 0x3e	; 62
   1097e:	ca 54       	subi	r28, 0x4A	; 74
   10980:	d1 09       	sbc	r29, r1
   10982:	0f b6       	in	r0, 0x3f	; 63
   10984:	f8 94       	cli
   10986:	de bf       	out	0x3e, r29	; 62
   10988:	0f be       	out	0x3f, r0	; 63
   1098a:	cd bf       	out	0x3d, r28	; 61
   1098c:	8c 01       	movw	r16, r24
   1098e:	6b 01       	movw	r12, r22
   10990:	7a 01       	movw	r14, r20
   10992:	0e 94 15 be 	call	0x17c2a	; 0x17c2a <PubSubClient::connected()>
   10996:	88 23       	and	r24, r24
   10998:	89 f1       	breq	.+98     	; 0x109fc <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
   1099a:	80 91 ed 0e 	lds	r24, 0x0EED	; 0x800eed <mqtt_send_message>
   1099e:	90 91 ee 0e 	lds	r25, 0x0EEE	; 0x800eee <mqtt_send_message+0x1>
   109a2:	01 96       	adiw	r24, 0x01	; 1
   109a4:	90 93 ee 0e 	sts	0x0EEE, r25	; 0x800eee <mqtt_send_message+0x1>
   109a8:	80 93 ed 0e 	sts	0x0EED, r24	; 0x800eed <mqtt_send_message>
   109ac:	ce 01       	movw	r24, r28
   109ae:	8f 5b       	subi	r24, 0xBF	; 191
   109b0:	9f 4f       	sbci	r25, 0xFF	; 255
   109b2:	0e 94 72 82 	call	0x104e4	; 0x104e4 <device_get_name(char*)>
   109b6:	60 91 eb 0e 	lds	r22, 0x0EEB	; 0x800eeb <header_out>
   109ba:	70 91 ec 0e 	lds	r23, 0x0EEC	; 0x800eec <header_out+0x1>
   109be:	ce 01       	movw	r24, r28
   109c0:	01 96       	adiw	r24, 0x01	; 1
   109c2:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   109c6:	be 01       	movw	r22, r28
   109c8:	6f 5b       	subi	r22, 0xBF	; 191
   109ca:	7f 4f       	sbci	r23, 0xFF	; 255
   109cc:	ce 01       	movw	r24, r28
   109ce:	01 96       	adiw	r24, 0x01	; 1
   109d0:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   109d4:	63 e3       	ldi	r22, 0x33	; 51
   109d6:	73 e0       	ldi	r23, 0x03	; 3
   109d8:	ce 01       	movw	r24, r28
   109da:	01 96       	adiw	r24, 0x01	; 1
   109dc:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   109e0:	b6 01       	movw	r22, r12
   109e2:	ce 01       	movw	r24, r28
   109e4:	01 96       	adiw	r24, 0x01	; 1
   109e6:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   109ea:	a7 01       	movw	r20, r14
   109ec:	be 01       	movw	r22, r28
   109ee:	6f 5f       	subi	r22, 0xFF	; 255
   109f0:	7f 4f       	sbci	r23, 0xFF	; 255
   109f2:	c8 01       	movw	r24, r16
   109f4:	0e 94 a3 c1 	call	0x18346	; 0x18346 <PubSubClient::publish(char const*, char const*)>
   109f8:	81 11       	cpse	r24, r1
   109fa:	09 c0       	rjmp	.+18     	; 0x10a0e <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
   109fc:	80 91 41 0f 	lds	r24, 0x0F41	; 0x800f41 <mqtt_error>
   10a00:	90 91 42 0f 	lds	r25, 0x0F42	; 0x800f42 <mqtt_error+0x1>
   10a04:	01 96       	adiw	r24, 0x01	; 1
   10a06:	90 93 42 0f 	sts	0x0F42, r25	; 0x800f42 <mqtt_error+0x1>
   10a0a:	80 93 41 0f 	sts	0x0F41, r24	; 0x800f41 <mqtt_error>
   10a0e:	c6 5b       	subi	r28, 0xB6	; 182
   10a10:	df 4f       	sbci	r29, 0xFF	; 255
   10a12:	0f b6       	in	r0, 0x3f	; 63
   10a14:	f8 94       	cli
   10a16:	de bf       	out	0x3e, r29	; 62
   10a18:	0f be       	out	0x3f, r0	; 63
   10a1a:	cd bf       	out	0x3d, r28	; 61
   10a1c:	df 91       	pop	r29
   10a1e:	cf 91       	pop	r28
   10a20:	1f 91       	pop	r17
   10a22:	0f 91       	pop	r16
   10a24:	ff 90       	pop	r15
   10a26:	ef 90       	pop	r14
   10a28:	df 90       	pop	r13
   10a2a:	cf 90       	pop	r12
   10a2c:	08 95       	ret

00010a2e <send_network_config(PubSubClient*)>:
_Z19send_network_configP12PubSubClient():
   10a2e:	ef 92       	push	r14
   10a30:	ff 92       	push	r15
   10a32:	0f 93       	push	r16
   10a34:	cf 93       	push	r28
   10a36:	df 93       	push	r29
   10a38:	cd b7       	in	r28, 0x3d	; 61
   10a3a:	de b7       	in	r29, 0x3e	; 62
   10a3c:	e4 97       	sbiw	r28, 0x34	; 52
   10a3e:	0f b6       	in	r0, 0x3f	; 63
   10a40:	f8 94       	cli
   10a42:	de bf       	out	0x3e, r29	; 62
   10a44:	0f be       	out	0x3f, r0	; 63
   10a46:	cd bf       	out	0x3d, r28	; 61
   10a48:	7c 01       	movw	r14, r24
   10a4a:	19 a2       	std	Y+33, r1	; 0x21
   10a4c:	00 e1       	ldi	r16, 0x10	; 16
   10a4e:	26 e0       	ldi	r18, 0x06	; 6
   10a50:	4f ee       	ldi	r20, 0xEF	; 239
   10a52:	5e e0       	ldi	r21, 0x0E	; 14
   10a54:	6a e3       	ldi	r22, 0x3A	; 58
   10a56:	ce 01       	movw	r24, r28
   10a58:	81 96       	adiw	r24, 0x21	; 33
   10a5a:	0e 94 c1 b8 	call	0x17182	; 0x17182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10a5e:	68 e9       	ldi	r22, 0x98	; 152
   10a60:	7b e5       	ldi	r23, 0x5B	; 91
   10a62:	ce 01       	movw	r24, r28
   10a64:	01 96       	adiw	r24, 0x01	; 1
   10a66:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   10a6a:	ae 01       	movw	r20, r28
   10a6c:	4f 5d       	subi	r20, 0xDF	; 223
   10a6e:	5f 4f       	sbci	r21, 0xFF	; 255
   10a70:	be 01       	movw	r22, r28
   10a72:	6f 5f       	subi	r22, 0xFF	; 255
   10a74:	7f 4f       	sbci	r23, 0xFF	; 255
   10a76:	c7 01       	movw	r24, r14
   10a78:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10a7c:	19 a2       	std	Y+33, r1	; 0x21
   10a7e:	0a e0       	ldi	r16, 0x0A	; 10
   10a80:	24 e0       	ldi	r18, 0x04	; 4
   10a82:	45 ef       	ldi	r20, 0xF5	; 245
   10a84:	5e e0       	ldi	r21, 0x0E	; 14
   10a86:	6e e2       	ldi	r22, 0x2E	; 46
   10a88:	ce 01       	movw	r24, r28
   10a8a:	81 96       	adiw	r24, 0x21	; 33
   10a8c:	0e 94 c1 b8 	call	0x17182	; 0x17182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10a90:	65 ec       	ldi	r22, 0xC5	; 197
   10a92:	7b e5       	ldi	r23, 0x5B	; 91
   10a94:	ce 01       	movw	r24, r28
   10a96:	01 96       	adiw	r24, 0x01	; 1
   10a98:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   10a9c:	ae 01       	movw	r20, r28
   10a9e:	4f 5d       	subi	r20, 0xDF	; 223
   10aa0:	5f 4f       	sbci	r21, 0xFF	; 255
   10aa2:	be 01       	movw	r22, r28
   10aa4:	6f 5f       	subi	r22, 0xFF	; 255
   10aa6:	7f 4f       	sbci	r23, 0xFF	; 255
   10aa8:	c7 01       	movw	r24, r14
   10aaa:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10aae:	19 a2       	std	Y+33, r1	; 0x21
   10ab0:	24 e0       	ldi	r18, 0x04	; 4
   10ab2:	49 ef       	ldi	r20, 0xF9	; 249
   10ab4:	5e e0       	ldi	r21, 0x0E	; 14
   10ab6:	6e e2       	ldi	r22, 0x2E	; 46
   10ab8:	ce 01       	movw	r24, r28
   10aba:	81 96       	adiw	r24, 0x21	; 33
   10abc:	0e 94 c1 b8 	call	0x17182	; 0x17182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10ac0:	68 e8       	ldi	r22, 0x88	; 136
   10ac2:	7b e5       	ldi	r23, 0x5B	; 91
   10ac4:	ce 01       	movw	r24, r28
   10ac6:	01 96       	adiw	r24, 0x01	; 1
   10ac8:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   10acc:	ae 01       	movw	r20, r28
   10ace:	4f 5d       	subi	r20, 0xDF	; 223
   10ad0:	5f 4f       	sbci	r21, 0xFF	; 255
   10ad2:	be 01       	movw	r22, r28
   10ad4:	6f 5f       	subi	r22, 0xFF	; 255
   10ad6:	7f 4f       	sbci	r23, 0xFF	; 255
   10ad8:	c7 01       	movw	r24, r14
   10ada:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10ade:	19 a2       	std	Y+33, r1	; 0x21
   10ae0:	24 e0       	ldi	r18, 0x04	; 4
   10ae2:	41 e0       	ldi	r20, 0x01	; 1
   10ae4:	5f e0       	ldi	r21, 0x0F	; 15
   10ae6:	6e e2       	ldi	r22, 0x2E	; 46
   10ae8:	ce 01       	movw	r24, r28
   10aea:	81 96       	adiw	r24, 0x21	; 33
   10aec:	0e 94 c1 b8 	call	0x17182	; 0x17182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10af0:	6d e7       	ldi	r22, 0x7D	; 125
   10af2:	7b e5       	ldi	r23, 0x5B	; 91
   10af4:	ce 01       	movw	r24, r28
   10af6:	01 96       	adiw	r24, 0x01	; 1
   10af8:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   10afc:	ae 01       	movw	r20, r28
   10afe:	4f 5d       	subi	r20, 0xDF	; 223
   10b00:	5f 4f       	sbci	r21, 0xFF	; 255
   10b02:	be 01       	movw	r22, r28
   10b04:	6f 5f       	subi	r22, 0xFF	; 255
   10b06:	7f 4f       	sbci	r23, 0xFF	; 255
   10b08:	c7 01       	movw	r24, r14
   10b0a:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10b0e:	19 a2       	std	Y+33, r1	; 0x21
   10b10:	24 e0       	ldi	r18, 0x04	; 4
   10b12:	4d ef       	ldi	r20, 0xFD	; 253
   10b14:	5e e0       	ldi	r21, 0x0E	; 14
   10b16:	6e e2       	ldi	r22, 0x2E	; 46
   10b18:	ce 01       	movw	r24, r28
   10b1a:	81 96       	adiw	r24, 0x21	; 33
   10b1c:	0e 94 c1 b8 	call	0x17182	; 0x17182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10b20:	61 e7       	ldi	r22, 0x71	; 113
   10b22:	7b e5       	ldi	r23, 0x5B	; 91
   10b24:	ce 01       	movw	r24, r28
   10b26:	01 96       	adiw	r24, 0x01	; 1
   10b28:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   10b2c:	ae 01       	movw	r20, r28
   10b2e:	4f 5d       	subi	r20, 0xDF	; 223
   10b30:	5f 4f       	sbci	r21, 0xFF	; 255
   10b32:	be 01       	movw	r22, r28
   10b34:	6f 5f       	subi	r22, 0xFF	; 255
   10b36:	7f 4f       	sbci	r23, 0xFF	; 255
   10b38:	c7 01       	movw	r24, r14
   10b3a:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10b3e:	19 a2       	std	Y+33, r1	; 0x21
   10b40:	24 e0       	ldi	r18, 0x04	; 4
   10b42:	4d e3       	ldi	r20, 0x3D	; 61
   10b44:	5f e0       	ldi	r21, 0x0F	; 15
   10b46:	6e e2       	ldi	r22, 0x2E	; 46
   10b48:	ce 01       	movw	r24, r28
   10b4a:	81 96       	adiw	r24, 0x21	; 33
   10b4c:	0e 94 c1 b8 	call	0x17182	; 0x17182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10b50:	65 e6       	ldi	r22, 0x65	; 101
   10b52:	7b e5       	ldi	r23, 0x5B	; 91
   10b54:	ce 01       	movw	r24, r28
   10b56:	01 96       	adiw	r24, 0x01	; 1
   10b58:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   10b5c:	ae 01       	movw	r20, r28
   10b5e:	4f 5d       	subi	r20, 0xDF	; 223
   10b60:	5f 4f       	sbci	r21, 0xFF	; 255
   10b62:	be 01       	movw	r22, r28
   10b64:	6f 5f       	subi	r22, 0xFF	; 255
   10b66:	7f 4f       	sbci	r23, 0xFF	; 255
   10b68:	c7 01       	movw	r24, r14
   10b6a:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10b6e:	19 a2       	std	Y+33, r1	; 0x21
   10b70:	24 e0       	ldi	r18, 0x04	; 4
   10b72:	4f e0       	ldi	r20, 0x0F	; 15
   10b74:	5f e0       	ldi	r21, 0x0F	; 15
   10b76:	6e e2       	ldi	r22, 0x2E	; 46
   10b78:	ce 01       	movw	r24, r28
   10b7a:	81 96       	adiw	r24, 0x21	; 33
   10b7c:	0e 94 c1 b8 	call	0x17182	; 0x17182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10b80:	63 e5       	ldi	r22, 0x53	; 83
   10b82:	7b e5       	ldi	r23, 0x5B	; 91
   10b84:	ce 01       	movw	r24, r28
   10b86:	01 96       	adiw	r24, 0x01	; 1
   10b88:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   10b8c:	ae 01       	movw	r20, r28
   10b8e:	4f 5d       	subi	r20, 0xDF	; 223
   10b90:	5f 4f       	sbci	r21, 0xFF	; 255
   10b92:	be 01       	movw	r22, r28
   10b94:	6f 5f       	subi	r22, 0xFF	; 255
   10b96:	7f 4f       	sbci	r23, 0xFF	; 255
   10b98:	c7 01       	movw	r24, r14
   10b9a:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
   10b9e:	4a e0       	ldi	r20, 0x0A	; 10
   10ba0:	be 01       	movw	r22, r28
   10ba2:	6f 5d       	subi	r22, 0xDF	; 223
   10ba4:	7f 4f       	sbci	r23, 0xFF	; 255
   10ba6:	80 91 13 0f 	lds	r24, 0x0F13	; 0x800f13 <device+0x24>
   10baa:	90 91 14 0f 	lds	r25, 0x0F14	; 0x800f14 <device+0x25>
   10bae:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z19send_network_configP12PubSubClient():
   10bb2:	61 e4       	ldi	r22, 0x41	; 65
   10bb4:	7b e5       	ldi	r23, 0x5B	; 91
   10bb6:	ce 01       	movw	r24, r28
   10bb8:	01 96       	adiw	r24, 0x01	; 1
   10bba:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   10bbe:	ae 01       	movw	r20, r28
   10bc0:	4f 5d       	subi	r20, 0xDF	; 223
   10bc2:	5f 4f       	sbci	r21, 0xFF	; 255
   10bc4:	be 01       	movw	r22, r28
   10bc6:	6f 5f       	subi	r22, 0xFF	; 255
   10bc8:	7f 4f       	sbci	r23, 0xFF	; 255
   10bca:	c7 01       	movw	r24, r14
   10bcc:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10bd0:	6f e2       	ldi	r22, 0x2F	; 47
   10bd2:	7b e5       	ldi	r23, 0x5B	; 91
   10bd4:	ce 01       	movw	r24, r28
   10bd6:	01 96       	adiw	r24, 0x01	; 1
   10bd8:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   10bdc:	45 e1       	ldi	r20, 0x15	; 21
   10bde:	5f e0       	ldi	r21, 0x0F	; 15
   10be0:	be 01       	movw	r22, r28
   10be2:	6f 5f       	subi	r22, 0xFF	; 255
   10be4:	7f 4f       	sbci	r23, 0xFF	; 255
   10be6:	c7 01       	movw	r24, r14
   10be8:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10bec:	6e e1       	ldi	r22, 0x1E	; 30
   10bee:	7b e5       	ldi	r23, 0x5B	; 91
   10bf0:	ce 01       	movw	r24, r28
   10bf2:	01 96       	adiw	r24, 0x01	; 1
   10bf4:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   10bf8:	49 e2       	ldi	r20, 0x29	; 41
   10bfa:	5f e0       	ldi	r21, 0x0F	; 15
   10bfc:	be 01       	movw	r22, r28
   10bfe:	6f 5f       	subi	r22, 0xFF	; 255
   10c00:	7f 4f       	sbci	r23, 0xFF	; 255
   10c02:	c7 01       	movw	r24, r14
   10c04:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10c08:	68 eb       	ldi	r22, 0xB8	; 184
   10c0a:	7b e5       	ldi	r23, 0x5B	; 91
   10c0c:	ce 01       	movw	r24, r28
   10c0e:	01 96       	adiw	r24, 0x01	; 1
   10c10:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   10c14:	45 e0       	ldi	r20, 0x05	; 5
   10c16:	5f e0       	ldi	r21, 0x0F	; 15
   10c18:	be 01       	movw	r22, r28
   10c1a:	6f 5f       	subi	r22, 0xFF	; 255
   10c1c:	7f 4f       	sbci	r23, 0xFF	; 255
   10c1e:	c7 01       	movw	r24, r14
   10c20:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10c24:	e4 96       	adiw	r28, 0x34	; 52
   10c26:	0f b6       	in	r0, 0x3f	; 63
   10c28:	f8 94       	cli
   10c2a:	de bf       	out	0x3e, r29	; 62
   10c2c:	0f be       	out	0x3f, r0	; 63
   10c2e:	cd bf       	out	0x3d, r28	; 61
   10c30:	df 91       	pop	r29
   10c32:	cf 91       	pop	r28
   10c34:	0f 91       	pop	r16
   10c36:	ff 90       	pop	r15
   10c38:	ef 90       	pop	r14
   10c3a:	08 95       	ret

00010c3c <send_mqtt_status(PubSubClient*)>:
_Z16send_mqtt_statusP12PubSubClient():
   10c3c:	ef 92       	push	r14
   10c3e:	ff 92       	push	r15
   10c40:	0f 93       	push	r16
   10c42:	cf 93       	push	r28
   10c44:	df 93       	push	r29
   10c46:	cd b7       	in	r28, 0x3d	; 61
   10c48:	de b7       	in	r29, 0x3e	; 62
   10c4a:	c0 58       	subi	r28, 0x80	; 128
   10c4c:	d1 09       	sbc	r29, r1
   10c4e:	0f b6       	in	r0, 0x3f	; 63
   10c50:	f8 94       	cli
   10c52:	de bf       	out	0x3e, r29	; 62
   10c54:	0f be       	out	0x3f, r0	; 63
   10c56:	cd bf       	out	0x3d, r28	; 61
   10c58:	7c 01       	movw	r14, r24
   10c5a:	0e 94 15 be 	call	0x17c2a	; 0x17c2a <PubSubClient::connected()>
   10c5e:	88 23       	and	r24, r24
   10c60:	09 f4       	brne	.+2      	; 0x10c64 <send_mqtt_status(PubSubClient*)+0x28>
   10c62:	a7 c0       	rjmp	.+334    	; 0x10db2 <send_mqtt_status(PubSubClient*)+0x176>
   10c64:	6a e0       	ldi	r22, 0x0A	; 10
   10c66:	7c e5       	ldi	r23, 0x5C	; 92
   10c68:	ce 01       	movw	r24, r28
   10c6a:	8f 5b       	subi	r24, 0xBF	; 191
   10c6c:	9f 4f       	sbci	r25, 0xFF	; 255
   10c6e:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
itoa():
   10c72:	4a e0       	ldi	r20, 0x0A	; 10
   10c74:	be 01       	movw	r22, r28
   10c76:	6f 5f       	subi	r22, 0xFF	; 255
   10c78:	7f 4f       	sbci	r23, 0xFF	; 255
   10c7a:	80 91 ed 0e 	lds	r24, 0x0EED	; 0x800eed <mqtt_send_message>
   10c7e:	90 91 ee 0e 	lds	r25, 0x0EEE	; 0x800eee <mqtt_send_message+0x1>
   10c82:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   10c86:	10 92 ee 0e 	sts	0x0EEE, r1	; 0x800eee <mqtt_send_message+0x1>
   10c8a:	10 92 ed 0e 	sts	0x0EED, r1	; 0x800eed <mqtt_send_message>
   10c8e:	ae 01       	movw	r20, r28
   10c90:	4f 5f       	subi	r20, 0xFF	; 255
   10c92:	5f 4f       	sbci	r21, 0xFF	; 255
   10c94:	be 01       	movw	r22, r28
   10c96:	6f 5b       	subi	r22, 0xBF	; 191
   10c98:	7f 4f       	sbci	r23, 0xFF	; 255
   10c9a:	c7 01       	movw	r24, r14
   10c9c:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10ca0:	68 ef       	ldi	r22, 0xF8	; 248
   10ca2:	7b e5       	ldi	r23, 0x5B	; 91
   10ca4:	ce 01       	movw	r24, r28
   10ca6:	8f 5b       	subi	r24, 0xBF	; 191
   10ca8:	9f 4f       	sbci	r25, 0xFF	; 255
   10caa:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
itoa():
   10cae:	4a e0       	ldi	r20, 0x0A	; 10
   10cb0:	be 01       	movw	r22, r28
   10cb2:	6f 5f       	subi	r22, 0xFF	; 255
   10cb4:	7f 4f       	sbci	r23, 0xFF	; 255
   10cb6:	80 91 41 0f 	lds	r24, 0x0F41	; 0x800f41 <mqtt_error>
   10cba:	90 91 42 0f 	lds	r25, 0x0F42	; 0x800f42 <mqtt_error+0x1>
   10cbe:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   10cc2:	ae 01       	movw	r20, r28
   10cc4:	4f 5f       	subi	r20, 0xFF	; 255
   10cc6:	5f 4f       	sbci	r21, 0xFF	; 255
   10cc8:	be 01       	movw	r22, r28
   10cca:	6f 5b       	subi	r22, 0xBF	; 191
   10ccc:	7f 4f       	sbci	r23, 0xFF	; 255
   10cce:	c7 01       	movw	r24, r14
   10cd0:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10cd4:	64 ee       	ldi	r22, 0xE4	; 228
   10cd6:	7b e5       	ldi	r23, 0x5B	; 91
   10cd8:	ce 01       	movw	r24, r28
   10cda:	8f 5b       	subi	r24, 0xBF	; 191
   10cdc:	9f 4f       	sbci	r25, 0xFF	; 255
   10cde:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
itoa():
   10ce2:	4a e0       	ldi	r20, 0x0A	; 10
   10ce4:	be 01       	movw	r22, r28
   10ce6:	6f 5f       	subi	r22, 0xFF	; 255
   10ce8:	7f 4f       	sbci	r23, 0xFF	; 255
   10cea:	80 91 e9 0e 	lds	r24, 0x0EE9	; 0x800ee9 <mqtt_receive_message>
   10cee:	90 91 ea 0e 	lds	r25, 0x0EEA	; 0x800eea <mqtt_receive_message+0x1>
   10cf2:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   10cf6:	10 92 ea 0e 	sts	0x0EEA, r1	; 0x800eea <mqtt_receive_message+0x1>
   10cfa:	10 92 e9 0e 	sts	0x0EE9, r1	; 0x800ee9 <mqtt_receive_message>
   10cfe:	ae 01       	movw	r20, r28
   10d00:	4f 5f       	subi	r20, 0xFF	; 255
   10d02:	5f 4f       	sbci	r21, 0xFF	; 255
   10d04:	be 01       	movw	r22, r28
   10d06:	6f 5b       	subi	r22, 0xBF	; 191
   10d08:	7f 4f       	sbci	r23, 0xFF	; 255
   10d0a:	c7 01       	movw	r24, r14
   10d0c:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10d10:	60 ed       	ldi	r22, 0xD0	; 208
   10d12:	7b e5       	ldi	r23, 0x5B	; 91
   10d14:	ce 01       	movw	r24, r28
   10d16:	8f 5b       	subi	r24, 0xBF	; 191
   10d18:	9f 4f       	sbci	r25, 0xFF	; 255
   10d1a:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
itoa():
   10d1e:	4a e0       	ldi	r20, 0x0A	; 10
   10d20:	be 01       	movw	r22, r28
   10d22:	6f 5f       	subi	r22, 0xFF	; 255
   10d24:	7f 4f       	sbci	r23, 0xFF	; 255
   10d26:	80 91 e7 0e 	lds	r24, 0x0EE7	; 0x800ee7 <mqtt_process_message>
   10d2a:	90 91 e8 0e 	lds	r25, 0x0EE8	; 0x800ee8 <mqtt_process_message+0x1>
   10d2e:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   10d32:	10 92 e8 0e 	sts	0x0EE8, r1	; 0x800ee8 <mqtt_process_message+0x1>
   10d36:	10 92 e7 0e 	sts	0x0EE7, r1	; 0x800ee7 <mqtt_process_message>
   10d3a:	ae 01       	movw	r20, r28
   10d3c:	4f 5f       	subi	r20, 0xFF	; 255
   10d3e:	5f 4f       	sbci	r21, 0xFF	; 255
   10d40:	be 01       	movw	r22, r28
   10d42:	6f 5b       	subi	r22, 0xBF	; 191
   10d44:	7f 4f       	sbci	r23, 0xFF	; 255
   10d46:	c7 01       	movw	r24, r14
   10d48:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10d4c:	19 82       	std	Y+1, r1	; 0x01
   10d4e:	0a e0       	ldi	r16, 0x0A	; 10
   10d50:	24 e0       	ldi	r18, 0x04	; 4
   10d52:	45 ef       	ldi	r20, 0xF5	; 245
   10d54:	5e e0       	ldi	r21, 0x0E	; 14
   10d56:	6e e2       	ldi	r22, 0x2E	; 46
   10d58:	ce 01       	movw	r24, r28
   10d5a:	01 96       	adiw	r24, 0x01	; 1
   10d5c:	0e 94 c1 b8 	call	0x17182	; 0x17182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10d60:	65 ec       	ldi	r22, 0xC5	; 197
   10d62:	7b e5       	ldi	r23, 0x5B	; 91
   10d64:	ce 01       	movw	r24, r28
   10d66:	8f 5b       	subi	r24, 0xBF	; 191
   10d68:	9f 4f       	sbci	r25, 0xFF	; 255
   10d6a:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   10d6e:	ae 01       	movw	r20, r28
   10d70:	4f 5f       	subi	r20, 0xFF	; 255
   10d72:	5f 4f       	sbci	r21, 0xFF	; 255
   10d74:	be 01       	movw	r22, r28
   10d76:	6f 5b       	subi	r22, 0xBF	; 191
   10d78:	7f 4f       	sbci	r23, 0xFF	; 255
   10d7a:	c7 01       	movw	r24, r14
   10d7c:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10d80:	64 ea       	ldi	r22, 0xA4	; 164
   10d82:	7b e5       	ldi	r23, 0x5B	; 91
   10d84:	ce 01       	movw	r24, r28
   10d86:	8f 5b       	subi	r24, 0xBF	; 191
   10d88:	9f 4f       	sbci	r25, 0xFF	; 255
   10d8a:	0e 94 46 dc 	call	0x1b88c	; 0x1b88c <strcpy_P>
   10d8e:	80 91 e6 0e 	lds	r24, 0x0EE6	; 0x800ee6 <count_know_mqtt>
itoa():
   10d92:	4a e0       	ldi	r20, 0x0A	; 10
   10d94:	be 01       	movw	r22, r28
   10d96:	6f 5f       	subi	r22, 0xFF	; 255
   10d98:	7f 4f       	sbci	r23, 0xFF	; 255
   10d9a:	90 e0       	ldi	r25, 0x00	; 0
   10d9c:	0e 94 cf dc 	call	0x1b99e	; 0x1b99e <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   10da0:	ae 01       	movw	r20, r28
   10da2:	4f 5f       	subi	r20, 0xFF	; 255
   10da4:	5f 4f       	sbci	r21, 0xFF	; 255
   10da6:	be 01       	movw	r22, r28
   10da8:	6f 5b       	subi	r22, 0xBF	; 191
   10daa:	7f 4f       	sbci	r23, 0xFF	; 255
   10dac:	c7 01       	movw	r24, r14
   10dae:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10db2:	10 92 42 0f 	sts	0x0F42, r1	; 0x800f42 <mqtt_error+0x1>
   10db6:	10 92 41 0f 	sts	0x0F41, r1	; 0x800f41 <mqtt_error>
   10dba:	c0 58       	subi	r28, 0x80	; 128
   10dbc:	df 4f       	sbci	r29, 0xFF	; 255
   10dbe:	0f b6       	in	r0, 0x3f	; 63
   10dc0:	f8 94       	cli
   10dc2:	de bf       	out	0x3e, r29	; 62
   10dc4:	0f be       	out	0x3f, r0	; 63
   10dc6:	cd bf       	out	0x3d, r28	; 61
   10dc8:	df 91       	pop	r29
   10dca:	cf 91       	pop	r28
   10dcc:	0f 91       	pop	r16
   10dce:	ff 90       	pop	r15
   10dd0:	ef 90       	pop	r14
   10dd2:	08 95       	ret

00010dd4 <know_mqtt_create_or_update(char*, unsigned char)>:
_Z26know_mqtt_create_or_updatePch():
   10dd4:	08 95       	ret

00010dd6 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char)>:
_Z10ntp_updateP9NTPClientP10RTC_DS1307h():
   10dd6:	af 92       	push	r10
   10dd8:	bf 92       	push	r11
   10dda:	cf 92       	push	r12
   10ddc:	ef 92       	push	r14
   10dde:	ff 92       	push	r15
   10de0:	0f 93       	push	r16
   10de2:	1f 93       	push	r17
   10de4:	cf 93       	push	r28
   10de6:	df 93       	push	r29
   10de8:	cd b7       	in	r28, 0x3d	; 61
   10dea:	de b7       	in	r29, 0x3e	; 62
   10dec:	6b 97       	sbiw	r28, 0x1b	; 27
   10dee:	0f b6       	in	r0, 0x3f	; 63
   10df0:	f8 94       	cli
   10df2:	de bf       	out	0x3e, r29	; 62
   10df4:	0f be       	out	0x3f, r0	; 63
   10df6:	cd bf       	out	0x3d, r28	; 61
   10df8:	5c 01       	movw	r10, r24
   10dfa:	14 2f       	mov	r17, r20
   10dfc:	19 82       	std	Y+1, r1	; 0x01
   10dfe:	0a e0       	ldi	r16, 0x0A	; 10
   10e00:	24 e0       	ldi	r18, 0x04	; 4
   10e02:	4d e3       	ldi	r20, 0x3D	; 61
   10e04:	5f e0       	ldi	r21, 0x0F	; 15
   10e06:	6e e2       	ldi	r22, 0x2E	; 46
   10e08:	ce 01       	movw	r24, r28
   10e0a:	01 96       	adiw	r24, 0x01	; 1
   10e0c:	0e 94 c1 b8 	call	0x17182	; 0x17182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10e10:	c5 01       	movw	r24, r10
   10e12:	0e 94 70 ce 	call	0x19ce0	; 0x19ce0 <NTPClient::begin()>
   10e16:	80 e1       	ldi	r24, 0x10	; 16
   10e18:	9e e0       	ldi	r25, 0x0E	; 14
   10e1a:	18 9f       	mul	r17, r24
   10e1c:	b0 01       	movw	r22, r0
   10e1e:	19 9f       	mul	r17, r25
   10e20:	70 0d       	add	r23, r0
   10e22:	11 24       	eor	r1, r1
   10e24:	c5 01       	movw	r24, r10
   10e26:	0e 94 37 cf 	call	0x19e6e	; 0x19e6e <NTPClient::setTimeOffset(int)>
   10e2a:	be 01       	movw	r22, r28
   10e2c:	6f 5f       	subi	r22, 0xFF	; 255
   10e2e:	7f 4f       	sbci	r23, 0xFF	; 255
   10e30:	c5 01       	movw	r24, r10
   10e32:	0e 94 47 cf 	call	0x19e8e	; 0x19e8e <NTPClient::setPoolServerName(char const*)>
   10e36:	c5 01       	movw	r24, r10
   10e38:	0e 94 fe cf 	call	0x19ffc	; 0x19ffc <NTPClient::update()>
   10e3c:	10 e0       	ldi	r17, 0x00	; 0
   10e3e:	88 23       	and	r24, r24
   10e40:	91 f1       	breq	.+100    	; 0x10ea6 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char)+0xd0>
   10e42:	c5 01       	movw	r24, r10
   10e44:	0e 94 1d cf 	call	0x19e3a	; 0x19e3a <NTPClient::getSeconds() const>
   10e48:	c8 2e       	mov	r12, r24
   10e4a:	c5 01       	movw	r24, r10
   10e4c:	0e 94 0d cf 	call	0x19e1a	; 0x19e1a <NTPClient::getMinutes() const>
   10e50:	e8 2e       	mov	r14, r24
   10e52:	c5 01       	movw	r24, r10
   10e54:	0e 94 fd ce 	call	0x19dfa	; 0x19dfa <NTPClient::getHours() const>
   10e58:	08 2f       	mov	r16, r24
   10e5a:	c5 01       	movw	r24, r10
   10e5c:	0e 94 e1 ce 	call	0x19dc2	; 0x19dc2 <NTPClient::getDate() const>
   10e60:	f8 2e       	mov	r15, r24
   10e62:	c5 01       	movw	r24, r10
   10e64:	0e 94 c4 ce 	call	0x19d88	; 0x19d88 <NTPClient::getMonth() const>
   10e68:	18 2f       	mov	r17, r24
   10e6a:	c5 01       	movw	r24, r10
   10e6c:	0e 94 a8 ce 	call	0x19d50	; 0x19d50 <NTPClient::getYear() const>
   10e70:	2f 2d       	mov	r18, r15
   10e72:	41 2f       	mov	r20, r17
   10e74:	bc 01       	movw	r22, r24
   10e76:	ce 01       	movw	r24, r28
   10e78:	45 96       	adiw	r24, 0x15	; 21
   10e7a:	0e 94 da c6 	call	0x18db4	; 0x18db4 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
   10e7e:	ce 01       	movw	r24, r28
   10e80:	45 96       	adiw	r24, 0x15	; 21
   10e82:	0e 94 01 c7 	call	0x18e02	; 0x18e02 <RTC_DS1307::adjust(DateTime const&)>
   10e86:	c5 01       	movw	r24, r10
   10e88:	0e 94 a8 ce 	call	0x19d50	; 0x19d50 <NTPClient::getYear() const>
   10e8c:	9f 93       	push	r25
   10e8e:	8f 93       	push	r24
   10e90:	85 e1       	ldi	r24, 0x15	; 21
   10e92:	98 e0       	ldi	r25, 0x08	; 8
   10e94:	9f 93       	push	r25
   10e96:	8f 93       	push	r24
   10e98:	0e 94 47 dd 	call	0x1ba8e	; 0x1ba8e <printf>
   10e9c:	0f 90       	pop	r0
   10e9e:	0f 90       	pop	r0
   10ea0:	0f 90       	pop	r0
   10ea2:	0f 90       	pop	r0
   10ea4:	11 e0       	ldi	r17, 0x01	; 1
   10ea6:	c5 01       	movw	r24, r10
   10ea8:	0e 94 27 cf 	call	0x19e4e	; 0x19e4e <NTPClient::end()>
   10eac:	81 2f       	mov	r24, r17
   10eae:	6b 96       	adiw	r28, 0x1b	; 27
   10eb0:	0f b6       	in	r0, 0x3f	; 63
   10eb2:	f8 94       	cli
   10eb4:	de bf       	out	0x3e, r29	; 62
   10eb6:	0f be       	out	0x3f, r0	; 63
   10eb8:	cd bf       	out	0x3d, r28	; 61
   10eba:	df 91       	pop	r29
   10ebc:	cf 91       	pop	r28
   10ebe:	1f 91       	pop	r17
   10ec0:	0f 91       	pop	r16
   10ec2:	ff 90       	pop	r15
   10ec4:	ef 90       	pop	r14
   10ec6:	cf 90       	pop	r12
   10ec8:	bf 90       	pop	r11
   10eca:	af 90       	pop	r10
   10ecc:	08 95       	ret

00010ece <ntp_check(NTPClient*)>:
_Z9ntp_checkP9NTPClient():
   10ece:	ef 92       	push	r14
   10ed0:	ff 92       	push	r15
   10ed2:	0f 93       	push	r16
   10ed4:	1f 93       	push	r17
   10ed6:	cf 93       	push	r28
   10ed8:	df 93       	push	r29
   10eda:	cd b7       	in	r28, 0x3d	; 61
   10edc:	de b7       	in	r29, 0x3e	; 62
   10ede:	64 97       	sbiw	r28, 0x14	; 20
   10ee0:	0f b6       	in	r0, 0x3f	; 63
   10ee2:	f8 94       	cli
   10ee4:	de bf       	out	0x3e, r29	; 62
   10ee6:	0f be       	out	0x3f, r0	; 63
   10ee8:	cd bf       	out	0x3d, r28	; 61
   10eea:	7c 01       	movw	r14, r24
   10eec:	19 82       	std	Y+1, r1	; 0x01
   10eee:	0a e0       	ldi	r16, 0x0A	; 10
   10ef0:	24 e0       	ldi	r18, 0x04	; 4
   10ef2:	4d e3       	ldi	r20, 0x3D	; 61
   10ef4:	5f e0       	ldi	r21, 0x0F	; 15
   10ef6:	6e e2       	ldi	r22, 0x2E	; 46
   10ef8:	ce 01       	movw	r24, r28
   10efa:	01 96       	adiw	r24, 0x01	; 1
   10efc:	0e 94 c1 b8 	call	0x17182	; 0x17182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10f00:	c7 01       	movw	r24, r14
   10f02:	0e 94 70 ce 	call	0x19ce0	; 0x19ce0 <NTPClient::begin()>
   10f06:	60 e1       	ldi	r22, 0x10	; 16
   10f08:	7e e0       	ldi	r23, 0x0E	; 14
   10f0a:	c7 01       	movw	r24, r14
   10f0c:	0e 94 37 cf 	call	0x19e6e	; 0x19e6e <NTPClient::setTimeOffset(int)>
   10f10:	be 01       	movw	r22, r28
   10f12:	6f 5f       	subi	r22, 0xFF	; 255
   10f14:	7f 4f       	sbci	r23, 0xFF	; 255
   10f16:	c7 01       	movw	r24, r14
   10f18:	0e 94 47 cf 	call	0x19e8e	; 0x19e8e <NTPClient::setPoolServerName(char const*)>
   10f1c:	41 e0       	ldi	r20, 0x01	; 1
   10f1e:	50 e0       	ldi	r21, 0x00	; 0
   10f20:	60 e0       	ldi	r22, 0x00	; 0
   10f22:	70 e0       	ldi	r23, 0x00	; 0
   10f24:	c7 01       	movw	r24, r14
   10f26:	0e 94 41 cf 	call	0x19e82	; 0x19e82 <NTPClient::setUpdateInterval(unsigned long)>
   10f2a:	c7 01       	movw	r24, r14
   10f2c:	0e 94 fe cf 	call	0x19ffc	; 0x19ffc <NTPClient::update()>
   10f30:	18 2f       	mov	r17, r24
   10f32:	c7 01       	movw	r24, r14
   10f34:	0e 94 27 cf 	call	0x19e4e	; 0x19e4e <NTPClient::end()>
   10f38:	81 2f       	mov	r24, r17
   10f3a:	64 96       	adiw	r28, 0x14	; 20
   10f3c:	0f b6       	in	r0, 0x3f	; 63
   10f3e:	f8 94       	cli
   10f40:	de bf       	out	0x3e, r29	; 62
   10f42:	0f be       	out	0x3f, r0	; 63
   10f44:	cd bf       	out	0x3d, r28	; 61
   10f46:	df 91       	pop	r29
   10f48:	cf 91       	pop	r28
   10f4a:	1f 91       	pop	r17
   10f4c:	0f 91       	pop	r16
   10f4e:	ff 90       	pop	r15
   10f50:	ef 90       	pop	r14
   10f52:	08 95       	ret

00010f54 <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
   10f54:	cf 93       	push	r28
   10f56:	df 93       	push	r29
   10f58:	cd b7       	in	r28, 0x3d	; 61
   10f5a:	de b7       	in	r29, 0x3e	; 62
   10f5c:	60 97       	sbiw	r28, 0x10	; 16
   10f5e:	0f b6       	in	r0, 0x3f	; 63
   10f60:	f8 94       	cli
   10f62:	de bf       	out	0x3e, r29	; 62
   10f64:	0f be       	out	0x3f, r0	; 63
   10f66:	cd bf       	out	0x3d, r28	; 61
   10f68:	90 91 e5 0e 	lds	r25, 0x0EE5	; 0x800ee5 <mqtt_log_cnt>
   10f6c:	e9 2f       	mov	r30, r25
   10f6e:	f0 e0       	ldi	r31, 0x00	; 0
   10f70:	eb 59       	subi	r30, 0x9B	; 155
   10f72:	f1 4f       	sbci	r31, 0xF1	; 241
   10f74:	80 83       	st	Z, r24
   10f76:	11 82       	std	Z+1, r1	; 0x01
   10f78:	9f 5f       	subi	r25, 0xFF	; 255
   10f7a:	90 93 e5 0e 	sts	0x0EE5, r25	; 0x800ee5 <mqtt_log_cnt>
   10f7e:	97 fd       	sbrc	r25, 7
   10f80:	04 c0       	rjmp	.+8      	; 0x10f8a <printf_via_mqtt(char, __file*)+0x36>
   10f82:	8a 30       	cpi	r24, 0x0A	; 10
   10f84:	11 f0       	breq	.+4      	; 0x10f8a <printf_via_mqtt(char, __file*)+0x36>
   10f86:	81 11       	cpse	r24, r1
   10f88:	13 c0       	rjmp	.+38     	; 0x10fb0 <printf_via_mqtt(char, __file*)+0x5c>
   10f8a:	6a e1       	ldi	r22, 0x1A	; 26
   10f8c:	78 e0       	ldi	r23, 0x08	; 8
   10f8e:	ce 01       	movw	r24, r28
   10f90:	01 96       	adiw	r24, 0x01	; 1
   10f92:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
   10f96:	45 e6       	ldi	r20, 0x65	; 101
   10f98:	5e e0       	ldi	r21, 0x0E	; 14
   10f9a:	be 01       	movw	r22, r28
   10f9c:	6f 5f       	subi	r22, 0xFF	; 255
   10f9e:	7f 4f       	sbci	r23, 0xFF	; 255
   10fa0:	80 91 63 0e 	lds	r24, 0x0E63	; 0x800e63 <pub_mqtt_client>
   10fa4:	90 91 64 0e 	lds	r25, 0x0E64	; 0x800e64 <pub_mqtt_client+0x1>
   10fa8:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10fac:	10 92 e5 0e 	sts	0x0EE5, r1	; 0x800ee5 <mqtt_log_cnt>
   10fb0:	60 96       	adiw	r28, 0x10	; 16
   10fb2:	0f b6       	in	r0, 0x3f	; 63
   10fb4:	f8 94       	cli
   10fb6:	de bf       	out	0x3e, r29	; 62
   10fb8:	0f be       	out	0x3f, r0	; 63
   10fba:	cd bf       	out	0x3d, r28	; 61
   10fbc:	df 91       	pop	r29
   10fbe:	cf 91       	pop	r28
   10fc0:	08 95       	ret

00010fc2 <log_error(PubSubClient*, char*)>:
_Z9log_errorP12PubSubClientPc():
   10fc2:	ef 92       	push	r14
   10fc4:	ff 92       	push	r15
   10fc6:	0f 93       	push	r16
   10fc8:	1f 93       	push	r17
   10fca:	cf 93       	push	r28
   10fcc:	df 93       	push	r29
   10fce:	00 d0       	rcall	.+0      	; 0x10fd0 <log_error(PubSubClient*, char*)+0xe>
   10fd0:	00 d0       	rcall	.+0      	; 0x10fd2 <log_error(PubSubClient*, char*)+0x10>
   10fd2:	00 d0       	rcall	.+0      	; 0x10fd4 <log_error(PubSubClient*, char*)+0x12>
   10fd4:	cd b7       	in	r28, 0x3d	; 61
   10fd6:	de b7       	in	r29, 0x3e	; 62
   10fd8:	8c 01       	movw	r16, r24
   10fda:	7b 01       	movw	r14, r22
   10fdc:	65 e2       	ldi	r22, 0x25	; 37
   10fde:	78 e0       	ldi	r23, 0x08	; 8
   10fe0:	ce 01       	movw	r24, r28
   10fe2:	01 96       	adiw	r24, 0x01	; 1
   10fe4:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
   10fe8:	a7 01       	movw	r20, r14
   10fea:	be 01       	movw	r22, r28
   10fec:	6f 5f       	subi	r22, 0xFF	; 255
   10fee:	7f 4f       	sbci	r23, 0xFF	; 255
   10ff0:	c8 01       	movw	r24, r16
   10ff2:	0e 94 b5 84 	call	0x1096a	; 0x1096a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10ff6:	29 96       	adiw	r28, 0x09	; 9
   10ff8:	0f b6       	in	r0, 0x3f	; 63
   10ffa:	f8 94       	cli
   10ffc:	de bf       	out	0x3e, r29	; 62
   10ffe:	0f be       	out	0x3f, r0	; 63
   11000:	cd bf       	out	0x3d, r28	; 61
   11002:	df 91       	pop	r29
   11004:	cf 91       	pop	r28
   11006:	1f 91       	pop	r17
   11008:	0f 91       	pop	r16
   1100a:	ff 90       	pop	r15
   1100c:	ef 90       	pop	r14
   1100e:	08 95       	ret

00011010 <mqtt_set_public_mqtt_client(PubSubClient*)>:
_Z27mqtt_set_public_mqtt_clientP12PubSubClient():
   11010:	90 93 64 0e 	sts	0x0E64, r25	; 0x800e64 <pub_mqtt_client+0x1>
   11014:	80 93 63 0e 	sts	0x0E63, r24	; 0x800e63 <pub_mqtt_client>
   11018:	08 95       	ret

0001101a <_GLOBAL__sub_I_mqtt_error>:
_GLOBAL__sub_I_mqtt_error():
   1101a:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   1101c:	00 e0       	ldi	r16, 0x00	; 0
   1101e:	20 e0       	ldi	r18, 0x00	; 0
   11020:	40 e0       	ldi	r20, 0x00	; 0
   11022:	60 e0       	ldi	r22, 0x00	; 0
   11024:	83 e4       	ldi	r24, 0x43	; 67
   11026:	9f e0       	ldi	r25, 0x0F	; 15
   11028:	0e 94 9e d4 	call	0x1a93c	; 0x1a93c <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN16struct_my_deviceC4Ev():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.h:55
#define TYPE_THERMCTL 1
#define TYPE_TERMBIG 2
#define TYPE_BRANA 3
#define TYPE_MASTER 4

typedef struct struct_my_device
   1102c:	8b e5       	ldi	r24, 0x5B	; 91
   1102e:	97 e0       	ldi	r25, 0x07	; 7
   11030:	90 93 14 0f 	sts	0x0F14, r25	; 0x800f14 <device+0x25>
   11034:	80 93 13 0f 	sts	0x0F13, r24	; 0x800f13 <device+0x24>
_GLOBAL__sub_I_mqtt_error():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:466
   11038:	0f 91       	pop	r16
   1103a:	08 95       	ret

0001103c <_GLOBAL__sub_I_scan_rf_net_enable>:
_GLOBAL__sub_I_scan_rf_net_enable():
/tmp/arduino_build_41303/sketch/saric_nrf.cpp:93
      strcat(payload, tmp1);
      strcat(payload, " ");
    }
    send_mqtt_general_payload(mqtt_client, topic, payload);
  }
}
   1103c:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   1103e:	00 e0       	ldi	r16, 0x00	; 0
   11040:	20 e0       	ldi	r18, 0x00	; 0
   11042:	40 e0       	ldi	r20, 0x00	; 0
   11044:	60 e0       	ldi	r22, 0x00	; 0
   11046:	8a e4       	ldi	r24, 0x4A	; 74
   11048:	9f e0       	ldi	r25, 0x0F	; 15
   1104a:	0e 94 9e d4 	call	0x1a93c	; 0x1a93c <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I_scan_rf_net_enable():
/tmp/arduino_build_41303/sketch/saric_nrf.cpp:93
   1104e:	0f 91       	pop	r16
   11050:	08 95       	ret

00011052 <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:199
}

uint8_t tds_get_idx_from_wrom(uint8_t id)
{
  return w_rom[id].tds_idx;
}
   11052:	0c 94 80 e4 	jmp	0x1c900	; 0x1c900 <eeprom_read_byte>

00011056 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   11056:	0c 94 88 e4 	jmp	0x1c910	; 0x1c910 <eeprom_write_byte>

0001105a <count_use_tds()>:
_Z13count_use_tdsv():
   1105a:	1f 93       	push	r17
   1105c:	cf 93       	push	r28
   1105e:	df 93       	push	r29
   11060:	c8 ec       	ldi	r28, 0xC8	; 200
   11062:	d0 e0       	ldi	r29, 0x00	; 0
   11064:	10 e0       	ldi	r17, 0x00	; 0
   11066:	ce 01       	movw	r24, r28
   11068:	0e 94 29 88 	call	0x11052	; 0x11052 <EEPROMClass::read(int) [clone .isra.0]>
   1106c:	81 30       	cpi	r24, 0x01	; 1
   1106e:	09 f4       	brne	.+2      	; 0x11072 <count_use_tds()+0x18>
   11070:	1f 5f       	subi	r17, 0xFF	; 255
   11072:	66 96       	adiw	r28, 0x16	; 22
   11074:	cc 34       	cpi	r28, 0x4C	; 76
   11076:	81 e0       	ldi	r24, 0x01	; 1
   11078:	d8 07       	cpc	r29, r24
   1107a:	a9 f7       	brne	.-22     	; 0x11066 <count_use_tds()+0xc>
   1107c:	81 2f       	mov	r24, r17
   1107e:	df 91       	pop	r29
   11080:	cf 91       	pop	r28
   11082:	1f 91       	pop	r17
   11084:	08 95       	ret

00011086 <tds_used(unsigned char)>:
_Z8tds_usedh():
   11086:	86 30       	cpi	r24, 0x06	; 6
   11088:	40 f4       	brcc	.+16     	; 0x1109a <tds_used(unsigned char)+0x14>
   1108a:	26 e1       	ldi	r18, 0x16	; 22
   1108c:	82 9f       	mul	r24, r18
   1108e:	c0 01       	movw	r24, r0
   11090:	11 24       	eor	r1, r1
   11092:	88 53       	subi	r24, 0x38	; 56
   11094:	9f 4f       	sbci	r25, 0xFF	; 255
   11096:	0c 94 29 88 	jmp	0x11052	; 0x11052 <EEPROMClass::read(int) [clone .isra.0]>
   1109a:	08 95       	ret

0001109c <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
   1109c:	af 92       	push	r10
   1109e:	bf 92       	push	r11
   110a0:	cf 92       	push	r12
   110a2:	df 92       	push	r13
   110a4:	ef 92       	push	r14
   110a6:	ff 92       	push	r15
   110a8:	0f 93       	push	r16
   110aa:	1f 93       	push	r17
   110ac:	cf 93       	push	r28
   110ae:	df 93       	push	r29
   110b0:	86 30       	cpi	r24, 0x06	; 6
   110b2:	08 f0       	brcs	.+2      	; 0x110b6 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
   110b4:	56 c0       	rjmp	.+172    	; 0x11162 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
   110b6:	8b 01       	movw	r16, r22
   110b8:	96 e1       	ldi	r25, 0x16	; 22
   110ba:	89 9f       	mul	r24, r25
   110bc:	e0 01       	movw	r28, r0
   110be:	11 24       	eor	r1, r1
   110c0:	ce 01       	movw	r24, r28
   110c2:	88 53       	subi	r24, 0x38	; 56
   110c4:	9f 4f       	sbci	r25, 0xFF	; 255
   110c6:	0e 94 29 88 	call	0x11052	; 0x11052 <EEPROMClass::read(int) [clone .isra.0]>
   110ca:	f8 01       	movw	r30, r16
   110cc:	81 93       	st	Z+, r24
   110ce:	6f 01       	movw	r12, r30
   110d0:	7e 01       	movw	r14, r28
   110d2:	f9 ec       	ldi	r31, 0xC9	; 201
   110d4:	ef 0e       	add	r14, r31
   110d6:	f1 1c       	adc	r15, r1
   110d8:	5e 01       	movw	r10, r28
   110da:	81 ed       	ldi	r24, 0xD1	; 209
   110dc:	a8 0e       	add	r10, r24
   110de:	b1 1c       	adc	r11, r1
   110e0:	c7 01       	movw	r24, r14
   110e2:	0e 94 29 88 	call	0x11052	; 0x11052 <EEPROMClass::read(int) [clone .isra.0]>
   110e6:	f6 01       	movw	r30, r12
   110e8:	81 93       	st	Z+, r24
   110ea:	6f 01       	movw	r12, r30
   110ec:	c7 01       	movw	r24, r14
   110ee:	0b 96       	adiw	r24, 0x0b	; 11
   110f0:	0e 94 29 88 	call	0x11052	; 0x11052 <EEPROMClass::read(int) [clone .isra.0]>
   110f4:	f6 01       	movw	r30, r12
   110f6:	82 87       	std	Z+10, r24	; 0x0a
   110f8:	ff ef       	ldi	r31, 0xFF	; 255
   110fa:	ef 1a       	sub	r14, r31
   110fc:	ff 0a       	sbc	r15, r31
   110fe:	ea 14       	cp	r14, r10
   11100:	fb 04       	cpc	r15, r11
   11102:	71 f7       	brne	.-36     	; 0x110e0 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
   11104:	f8 01       	movw	r30, r16
   11106:	13 8a       	std	Z+19, r1	; 0x13
   11108:	c7 01       	movw	r24, r14
   1110a:	0e 94 29 88 	call	0x11052	; 0x11052 <EEPROMClass::read(int) [clone .isra.0]>
   1110e:	f8 01       	movw	r30, r16
   11110:	81 87       	std	Z+9, r24	; 0x09
   11112:	ce 01       	movw	r24, r28
   11114:	8e 52       	subi	r24, 0x2E	; 46
   11116:	9f 4f       	sbci	r25, 0xFF	; 255
   11118:	0e 94 29 88 	call	0x11052	; 0x11052 <EEPROMClass::read(int) [clone .isra.0]>
   1111c:	f8 2e       	mov	r15, r24
   1111e:	ce 01       	movw	r24, r28
   11120:	8d 52       	subi	r24, 0x2D	; 45
   11122:	9f 4f       	sbci	r25, 0xFF	; 255
   11124:	0e 94 29 88 	call	0x11052	; 0x11052 <EEPROMClass::read(int) [clone .isra.0]>
   11128:	2f 2d       	mov	r18, r15
   1112a:	30 e0       	ldi	r19, 0x00	; 0
   1112c:	32 2f       	mov	r19, r18
   1112e:	22 27       	eor	r18, r18
   11130:	82 0f       	add	r24, r18
   11132:	93 2f       	mov	r25, r19
   11134:	91 1d       	adc	r25, r1
   11136:	f8 01       	movw	r30, r16
   11138:	93 87       	std	Z+11, r25	; 0x0b
   1113a:	82 87       	std	Z+10, r24	; 0x0a
   1113c:	ce 01       	movw	r24, r28
   1113e:	84 52       	subi	r24, 0x24	; 36
   11140:	9f 4f       	sbci	r25, 0xFF	; 255
   11142:	0e 94 29 88 	call	0x11052	; 0x11052 <EEPROMClass::read(int) [clone .isra.0]>
   11146:	f8 01       	movw	r30, r16
   11148:	84 8b       	std	Z+20, r24	; 0x14
   1114a:	81 e0       	ldi	r24, 0x01	; 1
   1114c:	df 91       	pop	r29
   1114e:	cf 91       	pop	r28
   11150:	1f 91       	pop	r17
   11152:	0f 91       	pop	r16
   11154:	ff 90       	pop	r15
   11156:	ef 90       	pop	r14
   11158:	df 90       	pop	r13
   1115a:	cf 90       	pop	r12
   1115c:	bf 90       	pop	r11
   1115e:	af 90       	pop	r10
   11160:	08 95       	ret
   11162:	80 e0       	ldi	r24, 0x00	; 0
   11164:	f3 cf       	rjmp	.-26     	; 0x1114c <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

00011166 <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
   11166:	af 92       	push	r10
   11168:	bf 92       	push	r11
   1116a:	cf 92       	push	r12
   1116c:	df 92       	push	r13
   1116e:	ef 92       	push	r14
   11170:	ff 92       	push	r15
   11172:	0f 93       	push	r16
   11174:	1f 93       	push	r17
   11176:	cf 93       	push	r28
   11178:	df 93       	push	r29
   1117a:	86 30       	cpi	r24, 0x06	; 6
   1117c:	08 f0       	brcs	.+2      	; 0x11180 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
   1117e:	49 c0       	rjmp	.+146    	; 0x11212 <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
   11180:	6b 01       	movw	r12, r22
   11182:	96 e1       	ldi	r25, 0x16	; 22
   11184:	89 9f       	mul	r24, r25
   11186:	e0 01       	movw	r28, r0
   11188:	11 24       	eor	r1, r1
   1118a:	f6 01       	movw	r30, r12
   1118c:	61 91       	ld	r22, Z+
   1118e:	7f 01       	movw	r14, r30
   11190:	ce 01       	movw	r24, r28
   11192:	88 53       	subi	r24, 0x38	; 56
   11194:	9f 4f       	sbci	r25, 0xFF	; 255
   11196:	0e 94 2b 88 	call	0x11056	; 0x11056 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1119a:	8e 01       	movw	r16, r28
   1119c:	07 53       	subi	r16, 0x37	; 55
   1119e:	1f 4f       	sbci	r17, 0xFF	; 255
   111a0:	5e 01       	movw	r10, r28
   111a2:	f1 ed       	ldi	r31, 0xD1	; 209
   111a4:	af 0e       	add	r10, r31
   111a6:	b1 1c       	adc	r11, r1
   111a8:	f7 01       	movw	r30, r14
   111aa:	61 91       	ld	r22, Z+
   111ac:	7f 01       	movw	r14, r30
_ZN5EERefaSEh():
   111ae:	c8 01       	movw	r24, r16
   111b0:	0e 94 88 e4 	call	0x1c910	; 0x1c910 <eeprom_write_byte>
   111b4:	f7 01       	movw	r30, r14
   111b6:	62 85       	ldd	r22, Z+10	; 0x0a
   111b8:	c8 01       	movw	r24, r16
   111ba:	0b 96       	adiw	r24, 0x0b	; 11
   111bc:	0e 94 88 e4 	call	0x1c910	; 0x1c910 <eeprom_write_byte>
   111c0:	0f 5f       	subi	r16, 0xFF	; 255
   111c2:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12set_tds18s20hP15struct_DDS18s20():
   111c4:	0a 15       	cp	r16, r10
   111c6:	1b 05       	cpc	r17, r11
   111c8:	79 f7       	brne	.-34     	; 0x111a8 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
   111ca:	f6 01       	movw	r30, r12
   111cc:	61 85       	ldd	r22, Z+9	; 0x09
   111ce:	c8 01       	movw	r24, r16
   111d0:	0e 94 2b 88 	call	0x11056	; 0x11056 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   111d4:	f6 01       	movw	r30, r12
   111d6:	63 85       	ldd	r22, Z+11	; 0x0b
   111d8:	ce 01       	movw	r24, r28
   111da:	8e 52       	subi	r24, 0x2E	; 46
   111dc:	9f 4f       	sbci	r25, 0xFF	; 255
   111de:	0e 94 2b 88 	call	0x11056	; 0x11056 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   111e2:	f6 01       	movw	r30, r12
   111e4:	62 85       	ldd	r22, Z+10	; 0x0a
   111e6:	ce 01       	movw	r24, r28
   111e8:	8d 52       	subi	r24, 0x2D	; 45
   111ea:	9f 4f       	sbci	r25, 0xFF	; 255
   111ec:	0e 94 2b 88 	call	0x11056	; 0x11056 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   111f0:	f6 01       	movw	r30, r12
   111f2:	64 89       	ldd	r22, Z+20	; 0x14
   111f4:	ce 01       	movw	r24, r28
   111f6:	84 52       	subi	r24, 0x24	; 36
   111f8:	9f 4f       	sbci	r25, 0xFF	; 255
   111fa:	df 91       	pop	r29
   111fc:	cf 91       	pop	r28
   111fe:	1f 91       	pop	r17
   11200:	0f 91       	pop	r16
   11202:	ff 90       	pop	r15
   11204:	ef 90       	pop	r14
   11206:	df 90       	pop	r13
   11208:	cf 90       	pop	r12
   1120a:	bf 90       	pop	r11
   1120c:	af 90       	pop	r10
   1120e:	0c 94 2b 88 	jmp	0x11056	; 0x11056 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   11212:	df 91       	pop	r29
   11214:	cf 91       	pop	r28
   11216:	1f 91       	pop	r17
   11218:	0f 91       	pop	r16
   1121a:	ff 90       	pop	r15
   1121c:	ef 90       	pop	r14
   1121e:	df 90       	pop	r13
   11220:	cf 90       	pop	r12
   11222:	bf 90       	pop	r11
   11224:	af 90       	pop	r10
   11226:	08 95       	ret

00011228 <tds_get_name(unsigned char, char*)>:
_Z12tds_get_namehPc():
   11228:	0f 93       	push	r16
   1122a:	1f 93       	push	r17
   1122c:	cf 93       	push	r28
   1122e:	df 93       	push	r29
   11230:	cd b7       	in	r28, 0x3d	; 61
   11232:	de b7       	in	r29, 0x3e	; 62
   11234:	66 97       	sbiw	r28, 0x16	; 22
   11236:	0f b6       	in	r0, 0x3f	; 63
   11238:	f8 94       	cli
   1123a:	de bf       	out	0x3e, r29	; 62
   1123c:	0f be       	out	0x3f, r0	; 63
   1123e:	cd bf       	out	0x3d, r28	; 61
   11240:	8b 01       	movw	r16, r22
   11242:	be 01       	movw	r22, r28
   11244:	6f 5f       	subi	r22, 0xFF	; 255
   11246:	7f 4f       	sbci	r23, 0xFF	; 255
   11248:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1124c:	be 01       	movw	r22, r28
   1124e:	63 5f       	subi	r22, 0xF3	; 243
   11250:	7f 4f       	sbci	r23, 0xFF	; 255
   11252:	c8 01       	movw	r24, r16
   11254:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
   11258:	66 96       	adiw	r28, 0x16	; 22
   1125a:	0f b6       	in	r0, 0x3f	; 63
   1125c:	f8 94       	cli
   1125e:	de bf       	out	0x3e, r29	; 62
   11260:	0f be       	out	0x3f, r0	; 63
   11262:	cd bf       	out	0x3d, r28	; 61
   11264:	df 91       	pop	r29
   11266:	cf 91       	pop	r28
   11268:	1f 91       	pop	r17
   1126a:	0f 91       	pop	r16
   1126c:	08 95       	ret

0001126e <tds_set_name(unsigned char, char*)>:
_Z12tds_set_namehPc():
   1126e:	ef 92       	push	r14
   11270:	ff 92       	push	r15
   11272:	1f 93       	push	r17
   11274:	cf 93       	push	r28
   11276:	df 93       	push	r29
   11278:	cd b7       	in	r28, 0x3d	; 61
   1127a:	de b7       	in	r29, 0x3e	; 62
   1127c:	66 97       	sbiw	r28, 0x16	; 22
   1127e:	0f b6       	in	r0, 0x3f	; 63
   11280:	f8 94       	cli
   11282:	de bf       	out	0x3e, r29	; 62
   11284:	0f be       	out	0x3f, r0	; 63
   11286:	cd bf       	out	0x3d, r28	; 61
   11288:	18 2f       	mov	r17, r24
   1128a:	7b 01       	movw	r14, r22
   1128c:	be 01       	movw	r22, r28
   1128e:	6f 5f       	subi	r22, 0xFF	; 255
   11290:	7f 4f       	sbci	r23, 0xFF	; 255
   11292:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11296:	b7 01       	movw	r22, r14
   11298:	ce 01       	movw	r24, r28
   1129a:	0d 96       	adiw	r24, 0x0d	; 13
   1129c:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
   112a0:	be 01       	movw	r22, r28
   112a2:	6f 5f       	subi	r22, 0xFF	; 255
   112a4:	7f 4f       	sbci	r23, 0xFF	; 255
   112a6:	81 2f       	mov	r24, r17
   112a8:	0e 94 b3 88 	call	0x11166	; 0x11166 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   112ac:	66 96       	adiw	r28, 0x16	; 22
   112ae:	0f b6       	in	r0, 0x3f	; 63
   112b0:	f8 94       	cli
   112b2:	de bf       	out	0x3e, r29	; 62
   112b4:	0f be       	out	0x3f, r0	; 63
   112b6:	cd bf       	out	0x3d, r28	; 61
   112b8:	df 91       	pop	r29
   112ba:	cf 91       	pop	r28
   112bc:	1f 91       	pop	r17
   112be:	ff 90       	pop	r15
   112c0:	ef 90       	pop	r14
   112c2:	08 95       	ret

000112c4 <tds_set_offset(unsigned char, int)>:
_Z14tds_set_offsethi():
   112c4:	ef 92       	push	r14
   112c6:	ff 92       	push	r15
   112c8:	1f 93       	push	r17
   112ca:	cf 93       	push	r28
   112cc:	df 93       	push	r29
   112ce:	cd b7       	in	r28, 0x3d	; 61
   112d0:	de b7       	in	r29, 0x3e	; 62
   112d2:	66 97       	sbiw	r28, 0x16	; 22
   112d4:	0f b6       	in	r0, 0x3f	; 63
   112d6:	f8 94       	cli
   112d8:	de bf       	out	0x3e, r29	; 62
   112da:	0f be       	out	0x3f, r0	; 63
   112dc:	cd bf       	out	0x3d, r28	; 61
   112de:	18 2f       	mov	r17, r24
   112e0:	7b 01       	movw	r14, r22
   112e2:	be 01       	movw	r22, r28
   112e4:	6f 5f       	subi	r22, 0xFF	; 255
   112e6:	7f 4f       	sbci	r23, 0xFF	; 255
   112e8:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
   112ec:	fc 86       	std	Y+12, r15	; 0x0c
   112ee:	eb 86       	std	Y+11, r14	; 0x0b
   112f0:	be 01       	movw	r22, r28
   112f2:	6f 5f       	subi	r22, 0xFF	; 255
   112f4:	7f 4f       	sbci	r23, 0xFF	; 255
   112f6:	81 2f       	mov	r24, r17
   112f8:	0e 94 b3 88 	call	0x11166	; 0x11166 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   112fc:	66 96       	adiw	r28, 0x16	; 22
   112fe:	0f b6       	in	r0, 0x3f	; 63
   11300:	f8 94       	cli
   11302:	de bf       	out	0x3e, r29	; 62
   11304:	0f be       	out	0x3f, r0	; 63
   11306:	cd bf       	out	0x3d, r28	; 61
   11308:	df 91       	pop	r29
   1130a:	cf 91       	pop	r28
   1130c:	1f 91       	pop	r17
   1130e:	ff 90       	pop	r15
   11310:	ef 90       	pop	r14
   11312:	08 95       	ret

00011314 <tds_get_offset(unsigned char)>:
_Z14tds_get_offseth():
   11314:	cf 93       	push	r28
   11316:	df 93       	push	r29
   11318:	cd b7       	in	r28, 0x3d	; 61
   1131a:	de b7       	in	r29, 0x3e	; 62
   1131c:	66 97       	sbiw	r28, 0x16	; 22
   1131e:	0f b6       	in	r0, 0x3f	; 63
   11320:	f8 94       	cli
   11322:	de bf       	out	0x3e, r29	; 62
   11324:	0f be       	out	0x3f, r0	; 63
   11326:	cd bf       	out	0x3d, r28	; 61
   11328:	be 01       	movw	r22, r28
   1132a:	6f 5f       	subi	r22, 0xFF	; 255
   1132c:	7f 4f       	sbci	r23, 0xFF	; 255
   1132e:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11332:	8b 85       	ldd	r24, Y+11	; 0x0b
   11334:	9c 85       	ldd	r25, Y+12	; 0x0c
   11336:	66 96       	adiw	r28, 0x16	; 22
   11338:	0f b6       	in	r0, 0x3f	; 63
   1133a:	f8 94       	cli
   1133c:	de bf       	out	0x3e, r29	; 62
   1133e:	0f be       	out	0x3f, r0	; 63
   11340:	cd bf       	out	0x3d, r28	; 61
   11342:	df 91       	pop	r29
   11344:	cf 91       	pop	r28
   11346:	08 95       	ret

00011348 <tds_set_period(unsigned char, unsigned char)>:
_Z14tds_set_periodhh():
   11348:	0f 93       	push	r16
   1134a:	1f 93       	push	r17
   1134c:	cf 93       	push	r28
   1134e:	df 93       	push	r29
   11350:	cd b7       	in	r28, 0x3d	; 61
   11352:	de b7       	in	r29, 0x3e	; 62
   11354:	66 97       	sbiw	r28, 0x16	; 22
   11356:	0f b6       	in	r0, 0x3f	; 63
   11358:	f8 94       	cli
   1135a:	de bf       	out	0x3e, r29	; 62
   1135c:	0f be       	out	0x3f, r0	; 63
   1135e:	cd bf       	out	0x3d, r28	; 61
   11360:	18 2f       	mov	r17, r24
   11362:	06 2f       	mov	r16, r22
   11364:	be 01       	movw	r22, r28
   11366:	6f 5f       	subi	r22, 0xFF	; 255
   11368:	7f 4f       	sbci	r23, 0xFF	; 255
   1136a:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1136e:	0d 8b       	std	Y+21, r16	; 0x15
   11370:	be 01       	movw	r22, r28
   11372:	6f 5f       	subi	r22, 0xFF	; 255
   11374:	7f 4f       	sbci	r23, 0xFF	; 255
   11376:	81 2f       	mov	r24, r17
   11378:	0e 94 b3 88 	call	0x11166	; 0x11166 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   1137c:	66 96       	adiw	r28, 0x16	; 22
   1137e:	0f b6       	in	r0, 0x3f	; 63
   11380:	f8 94       	cli
   11382:	de bf       	out	0x3e, r29	; 62
   11384:	0f be       	out	0x3f, r0	; 63
   11386:	cd bf       	out	0x3d, r28	; 61
   11388:	df 91       	pop	r29
   1138a:	cf 91       	pop	r28
   1138c:	1f 91       	pop	r17
   1138e:	0f 91       	pop	r16
   11390:	08 95       	ret

00011392 <tds_get_period(unsigned char)>:
_Z14tds_get_periodh():
   11392:	cf 93       	push	r28
   11394:	df 93       	push	r29
   11396:	cd b7       	in	r28, 0x3d	; 61
   11398:	de b7       	in	r29, 0x3e	; 62
   1139a:	66 97       	sbiw	r28, 0x16	; 22
   1139c:	0f b6       	in	r0, 0x3f	; 63
   1139e:	f8 94       	cli
   113a0:	de bf       	out	0x3e, r29	; 62
   113a2:	0f be       	out	0x3f, r0	; 63
   113a4:	cd bf       	out	0x3d, r28	; 61
   113a6:	be 01       	movw	r22, r28
   113a8:	6f 5f       	subi	r22, 0xFF	; 255
   113aa:	7f 4f       	sbci	r23, 0xFF	; 255
   113ac:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
   113b0:	8d 89       	ldd	r24, Y+21	; 0x15
   113b2:	90 e0       	ldi	r25, 0x00	; 0
   113b4:	66 96       	adiw	r28, 0x16	; 22
   113b6:	0f b6       	in	r0, 0x3f	; 63
   113b8:	f8 94       	cli
   113ba:	de bf       	out	0x3e, r29	; 62
   113bc:	0f be       	out	0x3f, r0	; 63
   113be:	cd bf       	out	0x3d, r28	; 61
   113c0:	df 91       	pop	r29
   113c2:	cf 91       	pop	r28
   113c4:	08 95       	ret

000113c6 <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
   113c6:	fb 01       	movw	r30, r22
   113c8:	9c 01       	movw	r18, r24
   113ca:	28 5f       	subi	r18, 0xF8	; 248
   113cc:	3f 4f       	sbci	r19, 0xFF	; 255
   113ce:	dc 01       	movw	r26, r24
   113d0:	5d 91       	ld	r21, X+
   113d2:	cd 01       	movw	r24, r26
   113d4:	41 91       	ld	r20, Z+
   113d6:	54 13       	cpse	r21, r20
   113d8:	05 c0       	rjmp	.+10     	; 0x113e4 <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
   113da:	a2 17       	cp	r26, r18
   113dc:	b3 07       	cpc	r27, r19
   113de:	b9 f7       	brne	.-18     	; 0x113ce <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
   113e0:	81 e0       	ldi	r24, 0x01	; 1
   113e2:	08 95       	ret
   113e4:	80 e0       	ldi	r24, 0x00	; 0
   113e6:	08 95       	ret

000113e8 <tds_update_associate()>:
_Z20tds_update_associatev():
   113e8:	ef 92       	push	r14
   113ea:	ff 92       	push	r15
   113ec:	0f 93       	push	r16
   113ee:	1f 93       	push	r17
   113f0:	cf 93       	push	r28
   113f2:	df 93       	push	r29
   113f4:	cd b7       	in	r28, 0x3d	; 61
   113f6:	de b7       	in	r29, 0x3e	; 62
   113f8:	6e 97       	sbiw	r28, 0x1e	; 30
   113fa:	0f b6       	in	r0, 0x3f	; 63
   113fc:	f8 94       	cli
   113fe:	de bf       	out	0x3e, r29	; 62
   11400:	0f be       	out	0x3f, r0	; 63
   11402:	cd bf       	out	0x3d, r28	; 61
   11404:	1f 8a       	std	Y+23, r1	; 0x17
   11406:	18 8e       	std	Y+24, r1	; 0x18
   11408:	19 8e       	std	Y+25, r1	; 0x19
   1140a:	1a 8e       	std	Y+26, r1	; 0x1a
   1140c:	1b 8e       	std	Y+27, r1	; 0x1b
   1140e:	1c 8e       	std	Y+28, r1	; 0x1c
   11410:	1d 8e       	std	Y+29, r1	; 0x1d
   11412:	1e 8e       	std	Y+30, r1	; 0x1e
   11414:	02 e5       	ldi	r16, 0x52	; 82
   11416:	1f e0       	ldi	r17, 0x0F	; 15
   11418:	ee 24       	eor	r14, r14
   1141a:	ea 94       	dec	r14
   1141c:	f8 01       	movw	r30, r16
   1141e:	e2 86       	std	Z+10, r14	; 0x0a
   11420:	b8 01       	movw	r22, r16
   11422:	ce 01       	movw	r24, r28
   11424:	47 96       	adiw	r24, 0x17	; 23
   11426:	0e 94 e3 89 	call	0x113c6	; 0x113c6 <tds_compare_rom(unsigned char*, unsigned char*)>
   1142a:	81 11       	cpse	r24, r1
   1142c:	14 c0       	rjmp	.+40     	; 0x11456 <tds_update_associate()+0x6e>
   1142e:	f1 2c       	mov	r15, r1
   11430:	be 01       	movw	r22, r28
   11432:	6f 5f       	subi	r22, 0xFF	; 255
   11434:	7f 4f       	sbci	r23, 0xFF	; 255
   11436:	8f 2d       	mov	r24, r15
   11438:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1143c:	b8 01       	movw	r22, r16
   1143e:	ce 01       	movw	r24, r28
   11440:	02 96       	adiw	r24, 0x02	; 2
   11442:	0e 94 e3 89 	call	0x113c6	; 0x113c6 <tds_compare_rom(unsigned char*, unsigned char*)>
   11446:	88 23       	and	r24, r24
   11448:	11 f0       	breq	.+4      	; 0x1144e <tds_update_associate()+0x66>
   1144a:	f8 01       	movw	r30, r16
   1144c:	f2 86       	std	Z+10, r15	; 0x0a
   1144e:	f3 94       	inc	r15
   11450:	f6 e0       	ldi	r31, 0x06	; 6
   11452:	ff 12       	cpse	r15, r31
   11454:	ed cf       	rjmp	.-38     	; 0x11430 <tds_update_associate()+0x48>
   11456:	05 5f       	subi	r16, 0xF5	; 245
   11458:	1f 4f       	sbci	r17, 0xFF	; 255
   1145a:	8f e0       	ldi	r24, 0x0F	; 15
   1145c:	04 39       	cpi	r16, 0x94	; 148
   1145e:	18 07       	cpc	r17, r24
   11460:	e9 f6       	brne	.-70     	; 0x1141c <tds_update_associate()+0x34>
   11462:	6e 96       	adiw	r28, 0x1e	; 30
   11464:	0f b6       	in	r0, 0x3f	; 63
   11466:	f8 94       	cli
   11468:	de bf       	out	0x3e, r29	; 62
   1146a:	0f be       	out	0x3f, r0	; 63
   1146c:	cd bf       	out	0x3d, r28	; 61
   1146e:	df 91       	pop	r29
   11470:	cf 91       	pop	r28
   11472:	1f 91       	pop	r17
   11474:	0f 91       	pop	r16
   11476:	ff 90       	pop	r15
   11478:	ef 90       	pop	r14
   1147a:	08 95       	ret

0001147c <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
   1147c:	1f 93       	push	r17
   1147e:	cf 93       	push	r28
   11480:	df 93       	push	r29
   11482:	cd b7       	in	r28, 0x3d	; 61
   11484:	de b7       	in	r29, 0x3e	; 62
   11486:	66 97       	sbiw	r28, 0x16	; 22
   11488:	0f b6       	in	r0, 0x3f	; 63
   1148a:	f8 94       	cli
   1148c:	de bf       	out	0x3e, r29	; 62
   1148e:	0f be       	out	0x3f, r0	; 63
   11490:	cd bf       	out	0x3d, r28	; 61
   11492:	18 2f       	mov	r17, r24
   11494:	be 01       	movw	r22, r28
   11496:	6f 5f       	subi	r22, 0xFF	; 255
   11498:	7f 4f       	sbci	r23, 0xFF	; 255
   1149a:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1149e:	19 82       	std	Y+1, r1	; 0x01
   114a0:	60 e8       	ldi	r22, 0x80	; 128
   114a2:	75 e0       	ldi	r23, 0x05	; 5
   114a4:	ce 01       	movw	r24, r28
   114a6:	0d 96       	adiw	r24, 0x0d	; 13
   114a8:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
   114ac:	1c 86       	std	Y+12, r1	; 0x0c
   114ae:	1b 86       	std	Y+11, r1	; 0x0b
   114b0:	8a e0       	ldi	r24, 0x0A	; 10
   114b2:	8d 8b       	std	Y+21, r24	; 0x15
   114b4:	1a 82       	std	Y+2, r1	; 0x02
   114b6:	1b 82       	std	Y+3, r1	; 0x03
   114b8:	1c 82       	std	Y+4, r1	; 0x04
   114ba:	1d 82       	std	Y+5, r1	; 0x05
   114bc:	1e 82       	std	Y+6, r1	; 0x06
   114be:	1f 82       	std	Y+7, r1	; 0x07
   114c0:	18 86       	std	Y+8, r1	; 0x08
   114c2:	19 86       	std	Y+9, r1	; 0x09
   114c4:	1a 86       	std	Y+10, r1	; 0x0a
   114c6:	be 01       	movw	r22, r28
   114c8:	6f 5f       	subi	r22, 0xFF	; 255
   114ca:	7f 4f       	sbci	r23, 0xFF	; 255
   114cc:	81 2f       	mov	r24, r17
   114ce:	0e 94 b3 88 	call	0x11166	; 0x11166 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   114d2:	0e 94 f4 89 	call	0x113e8	; 0x113e8 <tds_update_associate()>
   114d6:	66 96       	adiw	r28, 0x16	; 22
   114d8:	0f b6       	in	r0, 0x3f	; 63
   114da:	f8 94       	cli
   114dc:	de bf       	out	0x3e, r29	; 62
   114de:	0f be       	out	0x3f, r0	; 63
   114e0:	cd bf       	out	0x3d, r28	; 61
   114e2:	df 91       	pop	r29
   114e4:	cf 91       	pop	r28
   114e6:	1f 91       	pop	r17
   114e8:	08 95       	ret

000114ea <tds_set_clear_wrom_id(unsigned char)>:
_Z21tds_set_clear_wrom_idh():
   114ea:	9b e0       	ldi	r25, 0x0B	; 11
   114ec:	89 9f       	mul	r24, r25
   114ee:	f0 01       	movw	r30, r0
   114f0:	11 24       	eor	r1, r1
   114f2:	ee 5a       	subi	r30, 0xAE	; 174
   114f4:	f0 4f       	sbci	r31, 0xF0	; 240
   114f6:	82 85       	ldd	r24, Z+10	; 0x0a
   114f8:	0c 94 3e 8a 	jmp	0x1147c	; 0x1147c <tds_set_clear(unsigned char)>

000114fc <tds_check_associate(unsigned char)>:
_Z19tds_check_associateh():
   114fc:	ff 92       	push	r15
   114fe:	0f 93       	push	r16
   11500:	1f 93       	push	r17
   11502:	cf 93       	push	r28
   11504:	df 93       	push	r29
   11506:	cd b7       	in	r28, 0x3d	; 61
   11508:	de b7       	in	r29, 0x3e	; 62
   1150a:	66 97       	sbiw	r28, 0x16	; 22
   1150c:	0f b6       	in	r0, 0x3f	; 63
   1150e:	f8 94       	cli
   11510:	de bf       	out	0x3e, r29	; 62
   11512:	0f be       	out	0x3f, r0	; 63
   11514:	cd bf       	out	0x3d, r28	; 61
   11516:	90 91 94 0f 	lds	r25, 0x0F94	; 0x800f94 <Global_HWwirenum>
   1151a:	89 17       	cp	r24, r25
   1151c:	38 f5       	brcc	.+78     	; 0x1156c <tds_check_associate(unsigned char)+0x70>
   1151e:	9b e0       	ldi	r25, 0x0B	; 11
   11520:	89 9f       	mul	r24, r25
   11522:	80 01       	movw	r16, r0
   11524:	11 24       	eor	r1, r1
   11526:	0e 5a       	subi	r16, 0xAE	; 174
   11528:	10 4f       	sbci	r17, 0xF0	; 240
   1152a:	f1 2c       	mov	r15, r1
   1152c:	be 01       	movw	r22, r28
   1152e:	6f 5f       	subi	r22, 0xFF	; 255
   11530:	7f 4f       	sbci	r23, 0xFF	; 255
   11532:	8f 2d       	mov	r24, r15
   11534:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11538:	b8 01       	movw	r22, r16
   1153a:	ce 01       	movw	r24, r28
   1153c:	02 96       	adiw	r24, 0x02	; 2
   1153e:	0e 94 e3 89 	call	0x113c6	; 0x113c6 <tds_compare_rom(unsigned char*, unsigned char*)>
   11542:	81 11       	cpse	r24, r1
   11544:	06 c0       	rjmp	.+12     	; 0x11552 <tds_check_associate(unsigned char)+0x56>
   11546:	f3 94       	inc	r15
   11548:	86 e0       	ldi	r24, 0x06	; 6
   1154a:	f8 12       	cpse	r15, r24
   1154c:	ef cf       	rjmp	.-34     	; 0x1152c <tds_check_associate(unsigned char)+0x30>
   1154e:	ff 24       	eor	r15, r15
   11550:	fa 94       	dec	r15
   11552:	8f 2d       	mov	r24, r15
   11554:	66 96       	adiw	r28, 0x16	; 22
   11556:	0f b6       	in	r0, 0x3f	; 63
   11558:	f8 94       	cli
   1155a:	de bf       	out	0x3e, r29	; 62
   1155c:	0f be       	out	0x3f, r0	; 63
   1155e:	cd bf       	out	0x3d, r28	; 61
   11560:	df 91       	pop	r29
   11562:	cf 91       	pop	r28
   11564:	1f 91       	pop	r17
   11566:	0f 91       	pop	r16
   11568:	ff 90       	pop	r15
   1156a:	08 95       	ret
   1156c:	8e ef       	ldi	r24, 0xFE	; 254
   1156e:	f8 2e       	mov	r15, r24
   11570:	f0 cf       	rjmp	.-32     	; 0x11552 <tds_check_associate(unsigned char)+0x56>

00011572 <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:202

uint8_t tds_associate(uint8_t id)
{
   11572:	df 92       	push	r13
   11574:	ef 92       	push	r14
   11576:	ff 92       	push	r15
   11578:	0f 93       	push	r16
   1157a:	1f 93       	push	r17
   1157c:	cf 93       	push	r28
   1157e:	df 93       	push	r29
   11580:	cd b7       	in	r28, 0x3d	; 61
   11582:	de b7       	in	r29, 0x3e	; 62
   11584:	66 97       	sbiw	r28, 0x16	; 22
   11586:	0f b6       	in	r0, 0x3f	; 63
   11588:	f8 94       	cli
   1158a:	de bf       	out	0x3e, r29	; 62
   1158c:	0f be       	out	0x3f, r0	; 63
   1158e:	cd bf       	out	0x3d, r28	; 61
   11590:	08 2f       	mov	r16, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:205
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
   11592:	0e 94 7e 8a 	call	0x114fc	; 0x114fc <tds_check_associate(unsigned char)>
   11596:	8f 3f       	cpi	r24, 0xFF	; 255
   11598:	09 f0       	breq	.+2      	; 0x1159c <tds_associate(unsigned char)+0x2a>
   1159a:	6a c0       	rjmp	.+212    	; 0x11670 <tds_associate(unsigned char)+0xfe>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:207
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   1159c:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
   1159e:	eb e0       	ldi	r30, 0x0B	; 11
   115a0:	de 2e       	mov	r13, r30
   115a2:	d0 9e       	mul	r13, r16
   115a4:	c0 01       	movw	r24, r0
   115a6:	11 24       	eor	r1, r1
   115a8:	9c 01       	movw	r18, r24
   115aa:	25 5a       	subi	r18, 0xA5	; 165
   115ac:	30 4f       	sbci	r19, 0xF0	; 240
   115ae:	79 01       	movw	r14, r18
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:209
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
   115b0:	be 01       	movw	r22, r28
   115b2:	6f 5f       	subi	r22, 0xFF	; 255
   115b4:	7f 4f       	sbci	r23, 0xFF	; 255
   115b6:	81 2f       	mov	r24, r17
   115b8:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
   115bc:	89 81       	ldd	r24, Y+1	; 0x01
   115be:	81 11       	cpse	r24, r1
   115c0:	53 c0       	rjmp	.+166    	; 0x11668 <tds_associate(unsigned char)+0xf6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210 (discriminator 1)
   115c2:	f7 01       	movw	r30, r14
   115c4:	80 81       	ld	r24, Z
   115c6:	81 30       	cpi	r24, 0x01	; 1
   115c8:	09 f0       	breq	.+2      	; 0x115cc <tds_associate(unsigned char)+0x5a>
   115ca:	4e c0       	rjmp	.+156    	; 0x11668 <tds_associate(unsigned char)+0xf6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
   115cc:	89 83       	std	Y+1, r24	; 0x01
   115ce:	de 01       	movw	r26, r28
   115d0:	12 96       	adiw	r26, 0x02	; 2
   115d2:	0d 9d       	mul	r16, r13
   115d4:	c0 01       	movw	r24, r0
   115d6:	11 24       	eor	r1, r1
   115d8:	30 e0       	ldi	r19, 0x00	; 0
   115da:	20 e0       	ldi	r18, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:214 (discriminator 2)
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
   115dc:	f9 01       	movw	r30, r18
   115de:	e8 0f       	add	r30, r24
   115e0:	f9 1f       	adc	r31, r25
   115e2:	ee 5a       	subi	r30, 0xAE	; 174
   115e4:	f0 4f       	sbci	r31, 0xF0	; 240
   115e6:	40 81       	ld	r20, Z
   115e8:	4d 93       	st	X+, r20
   115ea:	2f 5f       	subi	r18, 0xFF	; 255
   115ec:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:213 (discriminator 2)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
   115ee:	28 30       	cpi	r18, 0x08	; 8
   115f0:	31 05       	cpc	r19, r1
   115f2:	a1 f7       	brne	.-24     	; 0x115dc <tds_associate(unsigned char)+0x6a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
   115f4:	2b e0       	ldi	r18, 0x0B	; 11
   115f6:	12 9f       	mul	r17, r18
   115f8:	f0 01       	movw	r30, r0
   115fa:	11 24       	eor	r1, r1
   115fc:	ee 5a       	subi	r30, 0xAE	; 174
   115fe:	f0 4f       	sbci	r31, 0xF0	; 240
   11600:	e0 85       	ldd	r30, Z+8	; 0x08
   11602:	f0 e0       	ldi	r31, 0x00	; 0
   11604:	ee 0f       	add	r30, r30
   11606:	ff 1f       	adc	r31, r31
   11608:	e0 5b       	subi	r30, 0xB0	; 176
   1160a:	f0 4f       	sbci	r31, 0xF0	; 240
   1160c:	80 81       	ld	r24, Z
   1160e:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
   11610:	be 01       	movw	r22, r28
   11612:	6f 5f       	subi	r22, 0xFF	; 255
   11614:	7f 4f       	sbci	r23, 0xFF	; 255
   11616:	81 2f       	mov	r24, r17
   11618:	0e 94 b3 88 	call	0x11166	; 0x11166 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   1161c:	3e e1       	ldi	r19, 0x1E	; 30
   1161e:	13 9f       	mul	r17, r19
   11620:	a0 01       	movw	r20, r0
   11622:	11 24       	eor	r1, r1
   11624:	90 e0       	ldi	r25, 0x00	; 0
   11626:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
   11628:	20 e2       	ldi	r18, 0x20	; 32
   1162a:	3e e4       	ldi	r19, 0x4E	; 78
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:218 (discriminator 2)
   1162c:	fc 01       	movw	r30, r24
   1162e:	ee 0f       	add	r30, r30
   11630:	ff 1f       	adc	r31, r31
   11632:	e4 0f       	add	r30, r20
   11634:	f5 1f       	adc	r31, r21
   11636:	eb 56       	subi	r30, 0x6B	; 107
   11638:	f0 4f       	sbci	r31, 0xF0	; 240
   1163a:	30 87       	std	Z+8, r19	; 0x08
   1163c:	27 83       	std	Z+7, r18	; 0x07
   1163e:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:217 (discriminator 2)
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
   11640:	8a 30       	cpi	r24, 0x0A	; 10
   11642:	91 05       	cpc	r25, r1
   11644:	99 f7       	brne	.-26     	; 0x1162c <tds_associate(unsigned char)+0xba>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
   11646:	0e 94 f4 89 	call	0x113e8	; 0x113e8 <tds_update_associate()>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:226
  return ret;
}
   1164a:	81 2f       	mov	r24, r17
   1164c:	66 96       	adiw	r28, 0x16	; 22
   1164e:	0f b6       	in	r0, 0x3f	; 63
   11650:	f8 94       	cli
   11652:	de bf       	out	0x3e, r29	; 62
   11654:	0f be       	out	0x3f, r0	; 63
   11656:	cd bf       	out	0x3d, r28	; 61
   11658:	df 91       	pop	r29
   1165a:	cf 91       	pop	r28
   1165c:	1f 91       	pop	r17
   1165e:	0f 91       	pop	r16
   11660:	ff 90       	pop	r15
   11662:	ef 90       	pop	r14
   11664:	df 90       	pop	r13
   11666:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:207 (discriminator 2)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   11668:	1f 5f       	subi	r17, 0xFF	; 255
   1166a:	16 30       	cpi	r17, 0x06	; 6
   1166c:	09 f0       	breq	.+2      	; 0x11670 <tds_associate(unsigned char)+0xfe>
   1166e:	a0 cf       	rjmp	.-192    	; 0x115b0 <tds_associate(unsigned char)+0x3e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
   11670:	1f ef       	ldi	r17, 0xFF	; 255
   11672:	e9 cf       	rjmp	.-46     	; 0x11646 <tds_associate(unsigned char)+0xd4>

00011674 <one_hw_search_device(unsigned char)>:
_Z20one_hw_search_deviceh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:232

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
   11674:	df 92       	push	r13
   11676:	ef 92       	push	r14
   11678:	ff 92       	push	r15
   1167a:	0f 93       	push	r16
   1167c:	1f 93       	push	r17
   1167e:	cf 93       	push	r28
   11680:	df 93       	push	r29
   11682:	f8 2e       	mov	r15, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:234
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
   11684:	c8 2f       	mov	r28, r24
   11686:	d0 e0       	ldi	r29, 0x00	; 0
   11688:	cc 0f       	add	r28, r28
   1168a:	dd 1f       	adc	r29, r29
   1168c:	c0 5b       	subi	r28, 0xB0	; 176
   1168e:	d0 4f       	sbci	r29, 0xF0	; 240
   11690:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
   11692:	88 81       	ld	r24, Y
   11694:	0e 94 0d cd 	call	0x19a1a	; 0x19a1a <ds2482init(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
   11698:	88 81       	ld	r24, Y
   1169a:	0e 94 c7 cc 	call	0x1998e	; 0x1998e <ds2482reset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
   1169e:	88 81       	ld	r24, Y
   116a0:	0e 94 26 cd 	call	0x19a4c	; 0x19a4c <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
   116a4:	69 e4       	ldi	r22, 0x49	; 73
   116a6:	70 e1       	ldi	r23, 0x10	; 16
   116a8:	88 81       	ld	r24, Y
   116aa:	0e 94 c1 cc 	call	0x19982	; 0x19982 <owMatchFirst(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
   116ae:	81 11       	cpse	r24, r1
   116b0:	3a c0       	rjmp	.+116    	; 0x11726 <one_hw_search_device(unsigned char)+0xb2>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:248
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   116b2:	8e 01       	movw	r16, r28
   116b4:	0f 5f       	subi	r16, 0xFF	; 255
   116b6:	1f 4f       	sbci	r17, 0xFF	; 255
   116b8:	9b e0       	ldi	r25, 0x0B	; 11
   116ba:	e9 2e       	mov	r14, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
   116bc:	dd 24       	eor	r13, r13
   116be:	d3 94       	inc	r13
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   116c0:	f8 01       	movw	r30, r16
   116c2:	90 81       	ld	r25, Z
   116c4:	96 30       	cpi	r25, 0x06	; 6
   116c6:	78 f5       	brcc	.+94     	; 0x11726 <one_hw_search_device(unsigned char)+0xb2>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
   116c8:	20 91 94 0f 	lds	r18, 0x0F94	; 0x800f94 <Global_HWwirenum>
   116cc:	42 2f       	mov	r20, r18
   116ce:	50 e0       	ldi	r21, 0x00	; 0
   116d0:	a9 e4       	ldi	r26, 0x49	; 73
   116d2:	b0 e1       	ldi	r27, 0x10	; 16
   116d4:	2e 9d       	mul	r18, r14
   116d6:	90 01       	movw	r18, r0
   116d8:	11 24       	eor	r1, r1
   116da:	90 e0       	ldi	r25, 0x00	; 0
   116dc:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:249 (discriminator 2)
   116de:	6d 91       	ld	r22, X+
   116e0:	fc 01       	movw	r30, r24
   116e2:	e2 0f       	add	r30, r18
   116e4:	f3 1f       	adc	r31, r19
   116e6:	ee 5a       	subi	r30, 0xAE	; 174
   116e8:	f0 4f       	sbci	r31, 0xF0	; 240
   116ea:	60 83       	st	Z, r22
   116ec:	01 96       	adiw	r24, 0x01	; 1
   116ee:	88 30       	cpi	r24, 0x08	; 8
   116f0:	91 05       	cpc	r25, r1
   116f2:	a9 f7       	brne	.-22     	; 0x116de <one_hw_search_device(unsigned char)+0x6a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
   116f4:	e4 9e       	mul	r14, r20
   116f6:	f0 01       	movw	r30, r0
   116f8:	e5 9e       	mul	r14, r21
   116fa:	f0 0d       	add	r31, r0
   116fc:	11 24       	eor	r1, r1
   116fe:	ee 5a       	subi	r30, 0xAE	; 174
   11700:	f0 4f       	sbci	r31, 0xF0	; 240
   11702:	f0 86       	std	Z+8, r15	; 0x08
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
   11704:	d1 86       	std	Z+9, r13	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
   11706:	69 e4       	ldi	r22, 0x49	; 73
   11708:	70 e1       	ldi	r23, 0x10	; 16
   1170a:	88 81       	ld	r24, Y
   1170c:	0e 94 3b cc 	call	0x19876	; 0x19876 <owMatchNext(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
   11710:	f8 01       	movw	r30, r16
   11712:	90 81       	ld	r25, Z
   11714:	9f 5f       	subi	r25, 0xFF	; 255
   11716:	90 83       	st	Z, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
   11718:	90 91 94 0f 	lds	r25, 0x0F94	; 0x800f94 <Global_HWwirenum>
   1171c:	9f 5f       	subi	r25, 0xFF	; 255
   1171e:	90 93 94 0f 	sts	0x0F94, r25	; 0x800f94 <Global_HWwirenum>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
   11722:	85 30       	cpi	r24, 0x05	; 5
   11724:	69 f6       	brne	.-102    	; 0x116c0 <one_hw_search_device(unsigned char)+0x4c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:262
      { ///hledani dokonceno
        break;
      }
    }
  return r;
}
   11726:	df 91       	pop	r29
   11728:	cf 91       	pop	r28
   1172a:	1f 91       	pop	r17
   1172c:	0f 91       	pop	r16
   1172e:	ff 90       	pop	r15
   11730:	ef 90       	pop	r14
   11732:	df 90       	pop	r13
   11734:	08 95       	ret

00011736 <mereni_hwwire(unsigned int)>:
_Z13mereni_hwwirej():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:266
//////
/// funkce mereni na sbernici
uint8_t mereni_hwwire(uint16_t uptime)
{
   11736:	af 92       	push	r10
   11738:	bf 92       	push	r11
   1173a:	cf 92       	push	r12
   1173c:	df 92       	push	r13
   1173e:	ef 92       	push	r14
   11740:	ff 92       	push	r15
   11742:	0f 93       	push	r16
   11744:	1f 93       	push	r17
   11746:	cf 93       	push	r28
   11748:	df 93       	push	r29
   1174a:	cd b7       	in	r28, 0x3d	; 61
   1174c:	de b7       	in	r29, 0x3e	; 62
   1174e:	68 97       	sbiw	r28, 0x18	; 24
   11750:	0f b6       	in	r0, 0x3f	; 63
   11752:	f8 94       	cli
   11754:	de bf       	out	0x3e, r29	; 62
   11756:	0f be       	out	0x3f, r0	; 63
   11758:	cd bf       	out	0x3d, r28	; 61
   1175a:	55 e9       	ldi	r21, 0x95	; 149
   1175c:	e5 2e       	mov	r14, r21
   1175e:	5f e0       	ldi	r21, 0x0F	; 15
   11760:	f5 2e       	mov	r15, r21
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   11762:	00 e0       	ldi	r16, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   11764:	6c 01       	movw	r12, r24
   11766:	dd 24       	eor	r13, r13
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   11768:	6e e1       	ldi	r22, 0x1E	; 30
   1176a:	a6 2e       	mov	r10, r22
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   1176c:	be 01       	movw	r22, r28
   1176e:	6f 5f       	subi	r22, 0xFF	; 255
   11770:	7f 4f       	sbci	r23, 0xFF	; 255
   11772:	80 2f       	mov	r24, r16
   11774:	0e 94 4e 88 	call	0x1109c	; 0x1109c <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   11778:	19 81       	ldd	r17, Y+1	; 0x01
   1177a:	11 30       	cpi	r17, 0x01	; 1
   1177c:	09 f0       	breq	.+2      	; 0x11780 <mereni_hwwire(unsigned int)+0x4a>
   1177e:	d9 c0       	rjmp	.+434    	; 0x11932 <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273 (discriminator 1)
   11780:	f7 01       	movw	r30, r14
   11782:	84 8d       	ldd	r24, Z+28	; 0x1c
   11784:	9d 89       	ldd	r25, Y+21	; 0x15
   11786:	96 01       	movw	r18, r12
   11788:	28 1b       	sub	r18, r24
   1178a:	31 09       	sbc	r19, r1
   1178c:	92 17       	cp	r25, r18
   1178e:	13 06       	cpc	r1, r19
   11790:	11 f0       	breq	.+4      	; 0x11796 <mereni_hwwire(unsigned int)+0x60>
   11792:	08 f0       	brcs	.+2      	; 0x11796 <mereni_hwwire(unsigned int)+0x60>
   11794:	ce c0       	rjmp	.+412    	; 0x11932 <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:275
    {
      status_tds18s20[w].period_now += tds.period;
   11796:	89 0f       	add	r24, r25
   11798:	84 8f       	std	Z+28, r24	; 0x1c
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:276
      if (status_tds18s20[w].wait == false)
   1179a:	85 8d       	ldd	r24, Z+29	; 0x1d
   1179c:	81 11       	cpse	r24, r1
   1179e:	0f c0       	rjmp	.+30     	; 0x117be <mereni_hwwire(unsigned int)+0x88>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:278
      {
        owReset(tds.assigned_ds2482);
   117a0:	8a 85       	ldd	r24, Y+10	; 0x0a
   117a2:	0e 94 26 cd 	call	0x19a4c	; 0x19a4c <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:279
        owMatchRom(tds.assigned_ds2482, tds.rom);
   117a6:	be 01       	movw	r22, r28
   117a8:	6e 5f       	subi	r22, 0xFE	; 254
   117aa:	7f 4f       	sbci	r23, 0xFF	; 255
   117ac:	8a 85       	ldd	r24, Y+10	; 0x0a
   117ae:	0e 94 25 cc 	call	0x1984a	; 0x1984a <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:280
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   117b2:	64 e4       	ldi	r22, 0x44	; 68
   117b4:	8a 85       	ldd	r24, Y+10	; 0x0a
   117b6:	0e 94 61 cd 	call	0x19ac2	; 0x19ac2 <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:281
        status_tds18s20[w].wait = true;
   117ba:	f7 01       	movw	r30, r14
   117bc:	15 8f       	std	Z+29, r17	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:283
      }
      if (status_tds18s20[w].wait == true)
   117be:	f7 01       	movw	r30, r14
   117c0:	b5 8c       	ldd	r11, Z+29	; 0x1d
   117c2:	f1 e0       	ldi	r31, 0x01	; 1
   117c4:	bf 12       	cpse	r11, r31
   117c6:	b5 c0       	rjmp	.+362    	; 0x11932 <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:285
      {
        owReset(tds.assigned_ds2482);
   117c8:	8a 85       	ldd	r24, Y+10	; 0x0a
   117ca:	0e 94 26 cd 	call	0x19a4c	; 0x19a4c <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:286
        owMatchRom(tds.assigned_ds2482, tds.rom);
   117ce:	be 01       	movw	r22, r28
   117d0:	6e 5f       	subi	r22, 0xFE	; 254
   117d2:	7f 4f       	sbci	r23, 0xFF	; 255
   117d4:	8a 85       	ldd	r24, Y+10	; 0x0a
   117d6:	0e 94 25 cc 	call	0x1984a	; 0x1984a <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:287
        owReadByte(tds.assigned_ds2482, &t);
   117da:	be 01       	movw	r22, r28
   117dc:	68 5e       	subi	r22, 0xE8	; 232
   117de:	7f 4f       	sbci	r23, 0xFF	; 255
   117e0:	8a 85       	ldd	r24, Y+10	; 0x0a
   117e2:	0e 94 e9 cd 	call	0x19bd2	; 0x19bd2 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:288
        if (t != 0) 
   117e6:	88 8d       	ldd	r24, Y+24	; 0x18
   117e8:	88 23       	and	r24, r24
   117ea:	09 f4       	brne	.+2      	; 0x117ee <mereni_hwwire(unsigned int)+0xb8>
   117ec:	a2 c0       	rjmp	.+324    	; 0x11932 <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:290
        {
          status_tds18s20[w].wait = false;
   117ee:	f7 01       	movw	r30, r14
   117f0:	15 8e       	std	Z+29, r1	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:291
          status = owReset(tds.assigned_ds2482);
   117f2:	8a 85       	ldd	r24, Y+10	; 0x0a
   117f4:	0e 94 26 cd 	call	0x19a4c	; 0x19a4c <ds2482owReset(unsigned char)>
   117f8:	18 2f       	mov	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:292
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   117fa:	be 01       	movw	r22, r28
   117fc:	6e 5f       	subi	r22, 0xFE	; 254
   117fe:	7f 4f       	sbci	r23, 0xFF	; 255
   11800:	8a 85       	ldd	r24, Y+10	; 0x0a
   11802:	0e 94 25 cc 	call	0x1984a	; 0x1984a <owMatchRom(unsigned char, unsigned char*)>
   11806:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:293
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   11808:	6e eb       	ldi	r22, 0xBE	; 190
   1180a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1180c:	0e 94 61 cd 	call	0x19ac2	; 0x19ac2 <ds2482owWriteByte(unsigned char, unsigned char)>
   11810:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:294
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   11812:	be 01       	movw	r22, r28
   11814:	69 5e       	subi	r22, 0xE9	; 233
   11816:	7f 4f       	sbci	r23, 0xFF	; 255
   11818:	8a 85       	ldd	r24, Y+10	; 0x0a
   1181a:	0e 94 e9 cd 	call	0x19bd2	; 0x19bd2 <ds2482owReadByte(unsigned char, unsigned char*)>
   1181e:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:295
          status_tds18s20[w].tempL = e;
   11820:	8f 89       	ldd	r24, Y+23	; 0x17
   11822:	f7 01       	movw	r30, r14
   11824:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:296
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   11826:	be 01       	movw	r22, r28
   11828:	69 5e       	subi	r22, 0xE9	; 233
   1182a:	7f 4f       	sbci	r23, 0xFF	; 255
   1182c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1182e:	0e 94 e9 cd 	call	0x19bd2	; 0x19bd2 <ds2482owReadByte(unsigned char, unsigned char*)>
   11832:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:297
          status_tds18s20[w].tempH = e;
   11834:	8f 89       	ldd	r24, Y+23	; 0x17
   11836:	f7 01       	movw	r30, r14
   11838:	81 83       	std	Z+1, r24	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   1183a:	be 01       	movw	r22, r28
   1183c:	69 5e       	subi	r22, 0xE9	; 233
   1183e:	7f 4f       	sbci	r23, 0xFF	; 255
   11840:	8a 85       	ldd	r24, Y+10	; 0x0a
   11842:	0e 94 e9 cd 	call	0x19bd2	; 0x19bd2 <ds2482owReadByte(unsigned char, unsigned char*)>
   11846:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   11848:	be 01       	movw	r22, r28
   1184a:	69 5e       	subi	r22, 0xE9	; 233
   1184c:	7f 4f       	sbci	r23, 0xFF	; 255
   1184e:	8a 85       	ldd	r24, Y+10	; 0x0a
   11850:	0e 94 e9 cd 	call	0x19bd2	; 0x19bd2 <ds2482owReadByte(unsigned char, unsigned char*)>
   11854:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   11856:	be 01       	movw	r22, r28
   11858:	69 5e       	subi	r22, 0xE9	; 233
   1185a:	7f 4f       	sbci	r23, 0xFF	; 255
   1185c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1185e:	0e 94 e9 cd 	call	0x19bd2	; 0x19bd2 <ds2482owReadByte(unsigned char, unsigned char*)>
   11862:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   11864:	be 01       	movw	r22, r28
   11866:	69 5e       	subi	r22, 0xE9	; 233
   11868:	7f 4f       	sbci	r23, 0xFF	; 255
   1186a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1186c:	0e 94 e9 cd 	call	0x19bd2	; 0x19bd2 <ds2482owReadByte(unsigned char, unsigned char*)>
   11870:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:302
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   11872:	be 01       	movw	r22, r28
   11874:	69 5e       	subi	r22, 0xE9	; 233
   11876:	7f 4f       	sbci	r23, 0xFF	; 255
   11878:	8a 85       	ldd	r24, Y+10	; 0x0a
   1187a:	0e 94 e9 cd 	call	0x19bd2	; 0x19bd2 <ds2482owReadByte(unsigned char, unsigned char*)>
   1187e:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:303
          status_tds18s20[w].CR = e; //count remain
   11880:	8f 89       	ldd	r24, Y+23	; 0x17
   11882:	f7 01       	movw	r30, r14
   11884:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:304
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   11886:	be 01       	movw	r22, r28
   11888:	69 5e       	subi	r22, 0xE9	; 233
   1188a:	7f 4f       	sbci	r23, 0xFF	; 255
   1188c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1188e:	0e 94 e9 cd 	call	0x19bd2	; 0x19bd2 <ds2482owReadByte(unsigned char, unsigned char*)>
   11892:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:305
          status_tds18s20[w].CP = e; // count per
   11894:	8f 89       	ldd	r24, Y+23	; 0x17
   11896:	f7 01       	movw	r30, r14
   11898:	83 83       	std	Z+3, r24	; 0x03
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   1189a:	be 01       	movw	r22, r28
   1189c:	69 5e       	subi	r22, 0xE9	; 233
   1189e:	7f 4f       	sbci	r23, 0xFF	; 255
   118a0:	8a 85       	ldd	r24, Y+10	; 0x0a
   118a2:	0e 94 e9 cd 	call	0x19bd2	; 0x19bd2 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
   118a6:	9f 89       	ldd	r25, Y+23	; 0x17
   118a8:	f7 01       	movw	r30, r14
   118aa:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   118ac:	81 0f       	add	r24, r17
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:308
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   118ae:	09 f0       	breq	.+2      	; 0x118b2 <mereni_hwwire(unsigned int)+0x17c>
   118b0:	58 c0       	rjmp	.+176    	; 0x11962 <mereni_hwwire(unsigned int)+0x22c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   118b2:	63 81       	ldd	r22, Z+3	; 0x03
   118b4:	70 e0       	ldi	r23, 0x00	; 0
   118b6:	e8 8d       	ldd	r30, Y+24	; 0x18
   118b8:	ae 9e       	mul	r10, r30
   118ba:	f0 01       	movw	r30, r0
   118bc:	11 24       	eor	r1, r1
   118be:	eb 56       	subi	r30, 0x6B	; 107
   118c0:	f0 4f       	sbci	r31, 0xF0	; 240
   118c2:	82 81       	ldd	r24, Z+2	; 0x02
   118c4:	9b 01       	movw	r18, r22
   118c6:	28 1b       	sub	r18, r24
   118c8:	31 09       	sbc	r19, r1
   118ca:	c9 01       	movw	r24, r18
   118cc:	96 95       	lsr	r25
   118ce:	98 2f       	mov	r25, r24
   118d0:	88 27       	eor	r24, r24
   118d2:	97 95       	ror	r25
   118d4:	87 95       	ror	r24
   118d6:	0e 94 6d d8 	call	0x1b0da	; 0x1b0da <__divmodhi4>
   118da:	8b 85       	ldd	r24, Y+11	; 0x0b
   118dc:	9c 85       	ldd	r25, Y+12	; 0x0c
   118de:	40 97       	sbiw	r24, 0x10	; 16
   118e0:	68 0f       	add	r22, r24
   118e2:	79 1f       	adc	r23, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:310
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   118e4:	f7 01       	movw	r30, r14
   118e6:	81 81       	ldd	r24, Z+1	; 0x01
   118e8:	90 e0       	ldi	r25, 0x00	; 0
   118ea:	98 2f       	mov	r25, r24
   118ec:	88 27       	eor	r24, r24
   118ee:	99 0f       	add	r25, r25
   118f0:	99 0f       	add	r25, r25
   118f2:	99 0f       	add	r25, r25
   118f4:	20 81       	ld	r18, Z
   118f6:	f8 e0       	ldi	r31, 0x08	; 8
   118f8:	2f 9f       	mul	r18, r31
   118fa:	90 01       	movw	r18, r0
   118fc:	11 24       	eor	r1, r1
   118fe:	82 2b       	or	r24, r18
   11900:	93 2b       	or	r25, r19
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   11902:	43 e0       	ldi	r20, 0x03	; 3
   11904:	88 0f       	add	r24, r24
   11906:	99 1f       	adc	r25, r25
   11908:	4a 95       	dec	r20
   1190a:	e1 f7       	brne	.-8      	; 0x11904 <mereni_hwwire(unsigned int)+0x1ce>
   1190c:	80 78       	andi	r24, 0x80	; 128
   1190e:	68 0f       	add	r22, r24
   11910:	79 1f       	adc	r23, r25
   11912:	f7 01       	movw	r30, r14
   11914:	76 83       	std	Z+6, r23	; 0x06
   11916:	65 83       	std	Z+5, r22	; 0x05
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:312
            status_tds18s20[w].online = True;
   11918:	b3 8e       	std	Z+27, r11	; 0x1b
   1191a:	89 e0       	ldi	r24, 0x09	; 9
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:313 (discriminator 2)
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   1191c:	27 89       	ldd	r18, Z+23	; 0x17
   1191e:	30 8d       	ldd	r19, Z+24	; 0x18
   11920:	32 8f       	std	Z+26, r19	; 0x1a
   11922:	21 8f       	std	Z+25, r18	; 0x19
   11924:	81 50       	subi	r24, 0x01	; 1
   11926:	32 97       	sbiw	r30, 0x02	; 2
   11928:	81 11       	cpse	r24, r1
   1192a:	f8 cf       	rjmp	.-16     	; 0x1191c <mereni_hwwire(unsigned int)+0x1e6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   1192c:	f7 01       	movw	r30, r14
   1192e:	70 87       	std	Z+8, r23	; 0x08
   11930:	67 83       	std	Z+7, r22	; 0x07
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270 (discriminator 2)
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   11932:	0f 5f       	subi	r16, 0xFF	; 255
   11934:	fe e1       	ldi	r31, 0x1E	; 30
   11936:	ef 0e       	add	r14, r31
   11938:	f1 1c       	adc	r15, r1
   1193a:	06 30       	cpi	r16, 0x06	; 6
   1193c:	09 f0       	breq	.+2      	; 0x11940 <mereni_hwwire(unsigned int)+0x20a>
   1193e:	16 cf       	rjmp	.-468    	; 0x1176c <mereni_hwwire(unsigned int)+0x36>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:326
          }
        }
      }
    }
  }
}
   11940:	68 96       	adiw	r28, 0x18	; 24
   11942:	0f b6       	in	r0, 0x3f	; 63
   11944:	f8 94       	cli
   11946:	de bf       	out	0x3e, r29	; 62
   11948:	0f be       	out	0x3f, r0	; 63
   1194a:	cd bf       	out	0x3d, r28	; 61
   1194c:	df 91       	pop	r29
   1194e:	cf 91       	pop	r28
   11950:	1f 91       	pop	r17
   11952:	0f 91       	pop	r16
   11954:	ff 90       	pop	r15
   11956:	ef 90       	pop	r14
   11958:	df 90       	pop	r13
   1195a:	cf 90       	pop	r12
   1195c:	bf 90       	pop	r11
   1195e:	af 90       	pop	r10
   11960:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:320
            
          }

          else
          {
            status_tds18s20[w].online = False;
   11962:	13 8e       	std	Z+27, r1	; 0x1b
   11964:	e6 cf       	rjmp	.-52     	; 0x11932 <mereni_hwwire(unsigned int)+0x1fc>

00011966 <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:60
  array_pids[idx]->SetControllerDirection(REVERSE);
}

void thermostat_pid_compute(uint8_t idx)
{
  array_pids[idx]->Compute();
   11966:	0c 94 80 e4 	jmp	0x1c900	; 0x1c900 <eeprom_read_byte>

0001196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   1196a:	0c 94 88 e4 	jmp	0x1c910	; 0x1c910 <eeprom_write_byte>

0001196e <thermostat_ring_get_state(unsigned char)>:
_Z25thermostat_ring_get_stateh():
   1196e:	e8 2f       	mov	r30, r24
   11970:	f0 e0       	ldi	r31, 0x00	; 0
   11972:	e8 5a       	subi	r30, 0xA8	; 168
   11974:	ff 4e       	sbci	r31, 0xEF	; 239
   11976:	80 81       	ld	r24, Z
   11978:	08 95       	ret

0001197a <thermostat_ring_set_state(unsigned char, unsigned char)>:
_Z25thermostat_ring_set_statehh():
   1197a:	e8 2f       	mov	r30, r24
   1197c:	f0 e0       	ldi	r31, 0x00	; 0
   1197e:	e8 5a       	subi	r30, 0xA8	; 168
   11980:	ff 4e       	sbci	r31, 0xEF	; 239
   11982:	60 83       	st	Z, r22
   11984:	08 95       	ret

00011986 <thermostat_ring_set_power(unsigned char, unsigned char)>:
_Z25thermostat_ring_set_powerhh():
   11986:	e8 2f       	mov	r30, r24
   11988:	f0 e0       	ldi	r31, 0x00	; 0
   1198a:	ed 5a       	subi	r30, 0xAD	; 173
   1198c:	ff 4e       	sbci	r31, 0xEF	; 239
   1198e:	60 83       	st	Z, r22
   11990:	08 95       	ret

00011992 <thermostat_init_pid()>:
_Z19thermostat_init_pidv():
   11992:	2f 92       	push	r2
   11994:	3f 92       	push	r3
   11996:	4f 92       	push	r4
   11998:	5f 92       	push	r5
   1199a:	6f 92       	push	r6
   1199c:	7f 92       	push	r7
   1199e:	8f 92       	push	r8
   119a0:	9f 92       	push	r9
   119a2:	af 92       	push	r10
   119a4:	bf 92       	push	r11
   119a6:	cf 92       	push	r12
   119a8:	df 92       	push	r13
   119aa:	ef 92       	push	r14
   119ac:	ff 92       	push	r15
   119ae:	0f 93       	push	r16
   119b0:	1f 93       	push	r17
   119b2:	cf 93       	push	r28
   119b4:	df 93       	push	r29
   119b6:	26 ec       	ldi	r18, 0xC6	; 198
   119b8:	82 2e       	mov	r8, r18
   119ba:	20 e1       	ldi	r18, 0x10	; 16
   119bc:	92 2e       	mov	r9, r18
   119be:	32 eb       	ldi	r19, 0xB2	; 178
   119c0:	43 2e       	mov	r4, r19
   119c2:	30 e1       	ldi	r19, 0x10	; 16
   119c4:	53 2e       	mov	r5, r19
   119c6:	4e e9       	ldi	r20, 0x9E	; 158
   119c8:	24 2e       	mov	r2, r20
   119ca:	40 e1       	ldi	r20, 0x10	; 16
   119cc:	34 2e       	mov	r3, r20
   119ce:	d0 e0       	ldi	r29, 0x00	; 0
   119d0:	c0 e0       	ldi	r28, 0x00	; 0
   119d2:	8c e3       	ldi	r24, 0x3C	; 60
   119d4:	90 e0       	ldi	r25, 0x00	; 0
   119d6:	0e 94 fb d5 	call	0x1abf6	; 0x1abf6 <operator new(unsigned int)>
   119da:	3c 01       	movw	r6, r24
   119dc:	1f 92       	push	r1
   119de:	1f 92       	push	r1
   119e0:	8f e3       	ldi	r24, 0x3F	; 63
   119e2:	8f 93       	push	r24
   119e4:	80 e8       	ldi	r24, 0x80	; 128
   119e6:	8f 93       	push	r24
   119e8:	1f 92       	push	r1
   119ea:	1f 92       	push	r1
   119ec:	a1 2c       	mov	r10, r1
   119ee:	b1 2c       	mov	r11, r1
   119f0:	80 ea       	ldi	r24, 0xA0	; 160
   119f2:	c8 2e       	mov	r12, r24
   119f4:	80 e4       	ldi	r24, 0x40	; 64
   119f6:	d8 2e       	mov	r13, r24
   119f8:	e1 2c       	mov	r14, r1
   119fa:	f1 2c       	mov	r15, r1
   119fc:	00 e0       	ldi	r16, 0x00	; 0
   119fe:	10 e4       	ldi	r17, 0x40	; 64
   11a00:	91 01       	movw	r18, r2
   11a02:	a2 01       	movw	r20, r4
   11a04:	b4 01       	movw	r22, r8
   11a06:	c3 01       	movw	r24, r6
   11a08:	0e 94 f4 bb 	call	0x177e8	; 0x177e8 <PID::PID(double*, double*, double*, double, double, double, int)>
   11a0c:	e0 91 51 10 	lds	r30, 0x1051	; 0x801051 <array_pids>
   11a10:	f0 91 52 10 	lds	r31, 0x1052	; 0x801052 <array_pids+0x1>
   11a14:	ec 0f       	add	r30, r28
   11a16:	fd 1f       	adc	r31, r29
   11a18:	71 82       	std	Z+1, r7	; 0x01
   11a1a:	60 82       	st	Z, r6
   11a1c:	61 e0       	ldi	r22, 0x01	; 1
   11a1e:	70 e0       	ldi	r23, 0x00	; 0
   11a20:	c3 01       	movw	r24, r6
   11a22:	0e 94 2c bb 	call	0x17658	; 0x17658 <PID::SetMode(int)>
   11a26:	e0 91 51 10 	lds	r30, 0x1051	; 0x801051 <array_pids>
   11a2a:	f0 91 52 10 	lds	r31, 0x1052	; 0x801052 <array_pids+0x1>
   11a2e:	ec 0f       	add	r30, r28
   11a30:	fd 1f       	adc	r31, r29
   11a32:	00 e0       	ldi	r16, 0x00	; 0
   11a34:	10 e0       	ldi	r17, 0x00	; 0
   11a36:	2f e7       	ldi	r18, 0x7F	; 127
   11a38:	33 e4       	ldi	r19, 0x43	; 67
   11a3a:	40 e0       	ldi	r20, 0x00	; 0
   11a3c:	50 e0       	ldi	r21, 0x00	; 0
   11a3e:	ba 01       	movw	r22, r20
   11a40:	80 81       	ld	r24, Z
   11a42:	91 81       	ldd	r25, Z+1	; 0x01
   11a44:	0e 94 64 ba 	call	0x174c8	; 0x174c8 <PID::SetOutputLimits(double, double)>
   11a48:	84 e0       	ldi	r24, 0x04	; 4
   11a4a:	88 0e       	add	r8, r24
   11a4c:	91 1c       	adc	r9, r1
   11a4e:	84 e0       	ldi	r24, 0x04	; 4
   11a50:	48 0e       	add	r4, r24
   11a52:	51 1c       	adc	r5, r1
   11a54:	84 e0       	ldi	r24, 0x04	; 4
   11a56:	28 0e       	add	r2, r24
   11a58:	31 1c       	adc	r3, r1
   11a5a:	22 96       	adiw	r28, 0x02	; 2
   11a5c:	0f 90       	pop	r0
   11a5e:	0f 90       	pop	r0
   11a60:	0f 90       	pop	r0
   11a62:	0f 90       	pop	r0
   11a64:	0f 90       	pop	r0
   11a66:	0f 90       	pop	r0
   11a68:	ca 30       	cpi	r28, 0x0A	; 10
   11a6a:	d1 05       	cpc	r29, r1
   11a6c:	09 f0       	breq	.+2      	; 0x11a70 <thermostat_init_pid()+0xde>
   11a6e:	b1 cf       	rjmp	.-158    	; 0x119d2 <thermostat_init_pid()+0x40>
   11a70:	df 91       	pop	r29
   11a72:	cf 91       	pop	r28
   11a74:	1f 91       	pop	r17
   11a76:	0f 91       	pop	r16
   11a78:	ff 90       	pop	r15
   11a7a:	ef 90       	pop	r14
   11a7c:	df 90       	pop	r13
   11a7e:	cf 90       	pop	r12
   11a80:	bf 90       	pop	r11
   11a82:	af 90       	pop	r10
   11a84:	9f 90       	pop	r9
   11a86:	8f 90       	pop	r8
   11a88:	7f 90       	pop	r7
   11a8a:	6f 90       	pop	r6
   11a8c:	5f 90       	pop	r5
   11a8e:	4f 90       	pop	r4
   11a90:	3f 90       	pop	r3
   11a92:	2f 90       	pop	r2
   11a94:	08 95       	ret

00011a96 <thermostat_pid_setdirection_direct(unsigned char)>:
_Z34thermostat_pid_setdirection_directh():
   11a96:	90 e0       	ldi	r25, 0x00	; 0
   11a98:	88 0f       	add	r24, r24
   11a9a:	99 1f       	adc	r25, r25
   11a9c:	20 91 51 10 	lds	r18, 0x1051	; 0x801051 <array_pids>
   11aa0:	30 91 52 10 	lds	r19, 0x1052	; 0x801052 <array_pids+0x1>
   11aa4:	82 0f       	add	r24, r18
   11aa6:	93 1f       	adc	r25, r19
   11aa8:	70 e0       	ldi	r23, 0x00	; 0
   11aaa:	60 e0       	ldi	r22, 0x00	; 0
   11aac:	fc 01       	movw	r30, r24
   11aae:	80 81       	ld	r24, Z
   11ab0:	91 81       	ldd	r25, Z+1	; 0x01
   11ab2:	0c 94 43 bb 	jmp	0x17686	; 0x17686 <PID::SetControllerDirection(int)>

00011ab6 <thermostat_pid_setdirection_reverse(unsigned char)>:
_Z35thermostat_pid_setdirection_reverseh():
   11ab6:	90 e0       	ldi	r25, 0x00	; 0
   11ab8:	88 0f       	add	r24, r24
   11aba:	99 1f       	adc	r25, r25
   11abc:	20 91 51 10 	lds	r18, 0x1051	; 0x801051 <array_pids>
   11ac0:	30 91 52 10 	lds	r19, 0x1052	; 0x801052 <array_pids+0x1>
   11ac4:	82 0f       	add	r24, r18
   11ac6:	93 1f       	adc	r25, r19
   11ac8:	61 e0       	ldi	r22, 0x01	; 1
   11aca:	70 e0       	ldi	r23, 0x00	; 0
   11acc:	fc 01       	movw	r30, r24
   11ace:	80 81       	ld	r24, Z
   11ad0:	91 81       	ldd	r25, Z+1	; 0x01
   11ad2:	0c 94 43 bb 	jmp	0x17686	; 0x17686 <PID::SetControllerDirection(int)>

00011ad6 <thermostat_get_pid_p(unsigned char)>:
_Z20thermostat_get_pid_ph():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:65
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
   11ad6:	94 e0       	ldi	r25, 0x04	; 4
   11ad8:	89 9f       	mul	r24, r25
   11ada:	f0 01       	movw	r30, r0
   11adc:	11 24       	eor	r1, r1
   11ade:	e6 57       	subi	r30, 0x76	; 118
   11ae0:	ff 4e       	sbci	r31, 0xEF	; 239
   11ae2:	60 81       	ld	r22, Z
   11ae4:	71 81       	ldd	r23, Z+1	; 0x01
   11ae6:	82 81       	ldd	r24, Z+2	; 0x02
   11ae8:	93 81       	ldd	r25, Z+3	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:66
}
   11aea:	08 95       	ret

00011aec <thermostat_pid_input(unsigned char, double)>:
_Z20thermostat_pid_inputhd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70

void thermostat_pid_input(uint8_t idx, double value)
{
  PID_Input[idx] = value;
   11aec:	94 e0       	ldi	r25, 0x04	; 4
   11aee:	89 9f       	mul	r24, r25
   11af0:	f0 01       	movw	r30, r0
   11af2:	11 24       	eor	r1, r1
   11af4:	ea 53       	subi	r30, 0x3A	; 58
   11af6:	ff 4e       	sbci	r31, 0xEF	; 239
   11af8:	40 83       	st	Z, r20
   11afa:	51 83       	std	Z+1, r21	; 0x01
   11afc:	62 83       	std	Z+2, r22	; 0x02
   11afe:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:71
}
   11b00:	08 95       	ret

00011b02 <thermostat_pid_setpoint(unsigned char, double)>:
_Z23thermostat_pid_setpointhd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:75

void thermostat_pid_setpoint(uint8_t idx, double value)
{
  PID_Setpoint[idx] = value;
   11b02:	94 e0       	ldi	r25, 0x04	; 4
   11b04:	89 9f       	mul	r24, r25
   11b06:	f0 01       	movw	r30, r0
   11b08:	11 24       	eor	r1, r1
   11b0a:	e2 56       	subi	r30, 0x62	; 98
   11b0c:	ff 4e       	sbci	r31, 0xEF	; 239
   11b0e:	40 83       	st	Z, r20
   11b10:	51 83       	std	Z+1, r21	; 0x01
   11b12:	62 83       	std	Z+2, r22	; 0x02
   11b14:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:76
}
   11b16:	08 95       	ret

00011b18 <thermostat_pid_output(unsigned char)>:
_Z21thermostat_pid_outputh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:80

uint8_t thermostat_pid_output(uint8_t idx)
{
  return PID_Output[idx];
   11b18:	94 e0       	ldi	r25, 0x04	; 4
   11b1a:	89 9f       	mul	r24, r25
   11b1c:	f0 01       	movw	r30, r0
   11b1e:	11 24       	eor	r1, r1
   11b20:	ee 54       	subi	r30, 0x4E	; 78
   11b22:	ff 4e       	sbci	r31, 0xEF	; 239
   11b24:	60 81       	ld	r22, Z
   11b26:	71 81       	ldd	r23, Z+1	; 0x01
   11b28:	82 81       	ldd	r24, Z+2	; 0x02
   11b2a:	93 81       	ldd	r25, Z+3	; 0x03
   11b2c:	0e 94 ea d6 	call	0x1add4	; 0x1add4 <__fixunssfsi>
   11b30:	86 2f       	mov	r24, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:81
}
   11b32:	08 95       	ret

00011b34 <thermostat_get_pid_i(unsigned char)>:
_Z20thermostat_get_pid_ih():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:85

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
   11b34:	94 e0       	ldi	r25, 0x04	; 4
   11b36:	89 9f       	mul	r24, r25
   11b38:	f0 01       	movw	r30, r0
   11b3a:	11 24       	eor	r1, r1
   11b3c:	ea 58       	subi	r30, 0x8A	; 138
   11b3e:	ff 4e       	sbci	r31, 0xEF	; 239
   11b40:	60 81       	ld	r22, Z
   11b42:	71 81       	ldd	r23, Z+1	; 0x01
   11b44:	82 81       	ldd	r24, Z+2	; 0x02
   11b46:	93 81       	ldd	r25, Z+3	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:86
}
   11b48:	08 95       	ret

00011b4a <thermostat_get_pid_d(unsigned char)>:
_Z20thermostat_get_pid_dh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:90

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
   11b4a:	94 e0       	ldi	r25, 0x04	; 4
   11b4c:	89 9f       	mul	r24, r25
   11b4e:	f0 01       	movw	r30, r0
   11b50:	11 24       	eor	r1, r1
   11b52:	ee 59       	subi	r30, 0x9E	; 158
   11b54:	ff 4e       	sbci	r31, 0xEF	; 239
   11b56:	60 81       	ld	r22, Z
   11b58:	71 81       	ldd	r23, Z+1	; 0x01
   11b5a:	82 81       	ldd	r24, Z+2	; 0x02
   11b5c:	93 81       	ldd	r25, Z+3	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:91
}
   11b5e:	08 95       	ret

00011b60 <thermostat_get_pid_time(unsigned char)>:
_Z23thermostat_get_pid_timeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:95

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
   11b60:	e8 2f       	mov	r30, r24
   11b62:	f0 e0       	ldi	r31, 0x00	; 0
   11b64:	e3 5a       	subi	r30, 0xA3	; 163
   11b66:	ff 4e       	sbci	r31, 0xEF	; 239
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:96
}
   11b68:	80 81       	ld	r24, Z
   11b6a:	08 95       	ret

00011b6c <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:100

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
   11b6c:	ef 92       	push	r14
   11b6e:	ff 92       	push	r15
   11b70:	0f 93       	push	r16
   11b72:	1f 93       	push	r17
   11b74:	cf 93       	push	r28
   11b76:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:104
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
   11b78:	91 e2       	ldi	r25, 0x21	; 33
   11b7a:	89 9f       	mul	r24, r25
   11b7c:	e0 01       	movw	r28, r0
   11b7e:	11 24       	eor	r1, r1
   11b80:	8e 01       	movw	r16, r28
   11b82:	04 5b       	subi	r16, 0xB4	; 180
   11b84:	1e 4f       	sbci	r17, 0xFE	; 254
   11b86:	7b 01       	movw	r14, r22
   11b88:	cb 5a       	subi	r28, 0xAB	; 171
   11b8a:	de 4f       	sbci	r29, 0xFE	; 254
   11b8c:	c8 01       	movw	r24, r16
   11b8e:	0e 94 b3 8c 	call	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:105
    name[i] = t;
   11b92:	f7 01       	movw	r30, r14
   11b94:	81 93       	st	Z+, r24
   11b96:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
   11b98:	88 23       	and	r24, r24
   11b9a:	29 f0       	breq	.+10     	; 0x11ba6 <thermostat_ring_get_name(unsigned char, char*)+0x3a>
   11b9c:	0f 5f       	subi	r16, 0xFF	; 255
   11b9e:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:102 (discriminator 2)

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
   11ba0:	0c 17       	cp	r16, r28
   11ba2:	1d 07       	cpc	r17, r29
   11ba4:	99 f7       	brne	.-26     	; 0x11b8c <thermostat_ring_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:108
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    name[i] = t;
    if (t == 0) break;
  }
}
   11ba6:	df 91       	pop	r29
   11ba8:	cf 91       	pop	r28
   11baa:	1f 91       	pop	r17
   11bac:	0f 91       	pop	r16
   11bae:	ff 90       	pop	r15
   11bb0:	ef 90       	pop	r14
   11bb2:	08 95       	ret

00011bb4 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:110
void thermostat_ring_set_name(uint8_t idx, char *name)
{
   11bb4:	df 92       	push	r13
   11bb6:	ef 92       	push	r14
   11bb8:	ff 92       	push	r15
   11bba:	0f 93       	push	r16
   11bbc:	1f 93       	push	r17
   11bbe:	cf 93       	push	r28
   11bc0:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
   11bc2:	91 e2       	ldi	r25, 0x21	; 33
   11bc4:	89 9f       	mul	r24, r25
   11bc6:	e0 01       	movw	r28, r0
   11bc8:	11 24       	eor	r1, r1
   11bca:	7b 01       	movw	r14, r22
   11bcc:	8e 01       	movw	r16, r28
   11bce:	04 5b       	subi	r16, 0xB4	; 180
   11bd0:	1e 4f       	sbci	r17, 0xFE	; 254
   11bd2:	cb 5a       	subi	r28, 0xAB	; 171
   11bd4:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
   11bd6:	f7 01       	movw	r30, r14
   11bd8:	d1 90       	ld	r13, Z+
   11bda:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
   11bdc:	6d 2d       	mov	r22, r13
   11bde:	c8 01       	movw	r24, r16
   11be0:	0e 94 b5 8c 	call	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
   11be4:	dd 20       	and	r13, r13
   11be6:	29 f0       	breq	.+10     	; 0x11bf2 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
   11be8:	0f 5f       	subi	r16, 0xFF	; 255
   11bea:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:112 (discriminator 2)
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
   11bec:	0c 17       	cp	r16, r28
   11bee:	1d 07       	cpc	r17, r29
   11bf0:	91 f7       	brne	.-28     	; 0x11bd6 <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
   11bf2:	df 91       	pop	r29
   11bf4:	cf 91       	pop	r28
   11bf6:	1f 91       	pop	r17
   11bf8:	0f 91       	pop	r16
   11bfa:	ff 90       	pop	r15
   11bfc:	ef 90       	pop	r14
   11bfe:	df 90       	pop	r13
   11c00:	08 95       	ret

00011c02 <thermostat_ring_get_output(unsigned char)>:
_Z26thermostat_ring_get_outputh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:123

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   11c02:	21 e2       	ldi	r18, 0x21	; 33
   11c04:	82 9f       	mul	r24, r18
   11c06:	c0 01       	movw	r24, r0
   11c08:	11 24       	eor	r1, r1
   11c0a:	81 5a       	subi	r24, 0xA1	; 161
   11c0c:	9e 4f       	sbci	r25, 0xFE	; 254
   11c0e:	0c 94 b3 8c 	jmp	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>

00011c12 <thermostat_ring_set_output(unsigned char, unsigned char)>:
_Z26thermostat_ring_set_outputhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:127
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
   11c12:	21 e2       	ldi	r18, 0x21	; 33
   11c14:	82 9f       	mul	r24, r18
   11c16:	c0 01       	movw	r24, r0
   11c18:	11 24       	eor	r1, r1
   11c1a:	81 5a       	subi	r24, 0xA1	; 161
   11c1c:	9e 4f       	sbci	r25, 0xFE	; 254
   11c1e:	0c 94 b5 8c 	jmp	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011c22 <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
   11c22:	21 e2       	ldi	r18, 0x21	; 33
   11c24:	82 9f       	mul	r24, r18
   11c26:	c0 01       	movw	r24, r0
   11c28:	11 24       	eor	r1, r1
   11c2a:	83 5a       	subi	r24, 0xA3	; 163
   11c2c:	9e 4f       	sbci	r25, 0xFE	; 254
   11c2e:	0c 94 b3 8c 	jmp	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>

00011c32 <thermostat_ring_set_active(unsigned char, unsigned char)>:
_Z26thermostat_ring_set_activehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
   11c32:	21 e2       	ldi	r18, 0x21	; 33
   11c34:	82 9f       	mul	r24, r18
   11c36:	c0 01       	movw	r24, r0
   11c38:	11 24       	eor	r1, r1
   11c3a:	83 5a       	subi	r24, 0xA3	; 163
   11c3c:	9e 4f       	sbci	r25, 0xFE	; 254
   11c3e:	0c 94 b5 8c 	jmp	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011c42 <thermostat_ring_get_program_id(unsigned char)>:
_Z30thermostat_ring_get_program_idh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   11c42:	21 e2       	ldi	r18, 0x21	; 33
   11c44:	82 9f       	mul	r24, r18
   11c46:	c0 01       	movw	r24, r0
   11c48:	11 24       	eor	r1, r1
   11c4a:	85 5a       	subi	r24, 0xA5	; 165
   11c4c:	9e 4f       	sbci	r25, 0xFE	; 254
   11c4e:	0c 94 b3 8c 	jmp	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>

00011c52 <thermostat_ring_set_program_id(unsigned char, unsigned char)>:
_Z30thermostat_ring_set_program_idhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
   11c52:	21 e2       	ldi	r18, 0x21	; 33
   11c54:	82 9f       	mul	r24, r18
   11c56:	c0 01       	movw	r24, r0
   11c58:	11 24       	eor	r1, r1
   11c5a:	85 5a       	subi	r24, 0xA5	; 165
   11c5c:	9e 4f       	sbci	r25, 0xFE	; 254
   11c5e:	0c 94 b5 8c 	jmp	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011c62 <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:153
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
   11c62:	0f 93       	push	r16
   11c64:	1f 93       	push	r17
   11c66:	cf 93       	push	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:154
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
   11c68:	91 e2       	ldi	r25, 0x21	; 33
   11c6a:	89 9f       	mul	r24, r25
   11c6c:	80 01       	movw	r16, r0
   11c6e:	11 24       	eor	r1, r1
   11c70:	c8 01       	movw	r24, r16
   11c72:	8a 5a       	subi	r24, 0xAA	; 170
   11c74:	9e 4f       	sbci	r25, 0xFE	; 254
   11c76:	0e 94 b3 8c 	call	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>
   11c7a:	c8 2f       	mov	r28, r24
   11c7c:	c8 01       	movw	r24, r16
   11c7e:	89 5a       	subi	r24, 0xA9	; 169
   11c80:	9e 4f       	sbci	r25, 0xFE	; 254
   11c82:	0e 94 b3 8c 	call	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>
   11c86:	2c 2f       	mov	r18, r28
   11c88:	30 e0       	ldi	r19, 0x00	; 0
   11c8a:	32 2f       	mov	r19, r18
   11c8c:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:155
}
   11c8e:	82 0f       	add	r24, r18
   11c90:	93 2f       	mov	r25, r19
   11c92:	91 1d       	adc	r25, r1
   11c94:	cf 91       	pop	r28
   11c96:	1f 91       	pop	r17
   11c98:	0f 91       	pop	r16
   11c9a:	08 95       	ret

00011c9c <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:157
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
   11c9c:	1f 93       	push	r17
   11c9e:	cf 93       	push	r28
   11ca0:	df 93       	push	r29
   11ca2:	16 2f       	mov	r17, r22
   11ca4:	67 2f       	mov	r22, r23
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
   11ca6:	91 e2       	ldi	r25, 0x21	; 33
   11ca8:	89 9f       	mul	r24, r25
   11caa:	e0 01       	movw	r28, r0
   11cac:	11 24       	eor	r1, r1
   11cae:	ce 01       	movw	r24, r28
   11cb0:	8a 5a       	subi	r24, 0xAA	; 170
   11cb2:	9e 4f       	sbci	r25, 0xFE	; 254
   11cb4:	0e 94 b5 8c 	call	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
   11cb8:	61 2f       	mov	r22, r17
   11cba:	ce 01       	movw	r24, r28
   11cbc:	89 5a       	subi	r24, 0xA9	; 169
   11cbe:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:160
}
   11cc0:	df 91       	pop	r29
   11cc2:	cf 91       	pop	r28
   11cc4:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
   11cc6:	0c 94 b5 8c 	jmp	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011cca <thermostat_ring_get_asociate_tds(unsigned char)>:
_Z32thermostat_ring_get_asociate_tdsh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   11cca:	21 e2       	ldi	r18, 0x21	; 33
   11ccc:	82 9f       	mul	r24, r18
   11cce:	c0 01       	movw	r24, r0
   11cd0:	11 24       	eor	r1, r1
   11cd2:	84 5a       	subi	r24, 0xA4	; 164
   11cd4:	9e 4f       	sbci	r25, 0xFE	; 254
   11cd6:	0c 94 b3 8c 	jmp	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>

00011cda <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>:
_Z32thermostat_ring_set_asociate_tdshh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:170
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
   11cda:	21 e2       	ldi	r18, 0x21	; 33
   11cdc:	82 9f       	mul	r24, r18
   11cde:	c0 01       	movw	r24, r0
   11ce0:	11 24       	eor	r1, r1
   11ce2:	84 5a       	subi	r24, 0xA4	; 164
   11ce4:	9e 4f       	sbci	r25, 0xFE	; 254
   11ce6:	0c 94 b5 8c 	jmp	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011cea <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
   11cea:	21 e2       	ldi	r18, 0x21	; 33
   11cec:	82 9f       	mul	r24, r18
   11cee:	c0 01       	movw	r24, r0
   11cf0:	11 24       	eor	r1, r1
   11cf2:	82 5a       	subi	r24, 0xA2	; 162
   11cf4:	9e 4f       	sbci	r25, 0xFE	; 254
   11cf6:	0c 94 b3 8c 	jmp	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>

00011cfa <thermostat_ring_set_mode(unsigned char, unsigned char)>:
_Z24thermostat_ring_set_modehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:180
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
   11cfa:	21 e2       	ldi	r18, 0x21	; 33
   11cfc:	82 9f       	mul	r24, r18
   11cfe:	c0 01       	movw	r24, r0
   11d00:	11 24       	eor	r1, r1
   11d02:	82 5a       	subi	r24, 0xA2	; 162
   11d04:	9e 4f       	sbci	r25, 0xFE	; 254
   11d06:	0c 94 b5 8c 	jmp	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011d0a <thermostat_ring_get_mode_1(unsigned char, unsigned char)>:
_Z26thermostat_ring_get_mode_1hh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:183
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
   11d0a:	cf 93       	push	r28
   11d0c:	c6 2f       	mov	r28, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:185
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
   11d0e:	0e 94 75 8e 	call	0x11cea	; 0x11cea <thermostat_ring_get_mode(unsigned char)>
   11d12:	91 e0       	ldi	r25, 0x01	; 1
   11d14:	8c 13       	cpse	r24, r28
   11d16:	90 e0       	ldi	r25, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:188
    ret = true;
  return ret;
}
   11d18:	89 2f       	mov	r24, r25
   11d1a:	cf 91       	pop	r28
   11d1c:	08 95       	ret

00011d1e <thermostat_ring_get_status_data(unsigned char)>:
_Z31thermostat_ring_get_status_datah():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:193
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   11d1e:	21 e2       	ldi	r18, 0x21	; 33
   11d20:	82 9f       	mul	r24, r18
   11d22:	c0 01       	movw	r24, r0
   11d24:	11 24       	eor	r1, r1
   11d26:	88 5a       	subi	r24, 0xA8	; 168
   11d28:	9e 4f       	sbci	r25, 0xFE	; 254
   11d2a:	0c 94 b3 8c 	jmp	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>

00011d2e <thermostat_ring_get_status_bites(unsigned char, unsigned char)>:
_Z32thermostat_ring_get_status_biteshh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:196
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
   11d2e:	cf 93       	push	r28
   11d30:	c6 2f       	mov	r28, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:197
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
   11d32:	21 e2       	ldi	r18, 0x21	; 33
   11d34:	82 9f       	mul	r24, r18
   11d36:	c0 01       	movw	r24, r0
   11d38:	11 24       	eor	r1, r1
   11d3a:	88 5a       	subi	r24, 0xA8	; 168
   11d3c:	9e 4f       	sbci	r25, 0xFE	; 254
   11d3e:	0e 94 b3 8c 	call	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>
   11d42:	21 e0       	ldi	r18, 0x01	; 1
   11d44:	30 e0       	ldi	r19, 0x00	; 0
   11d46:	01 c0       	rjmp	.+2      	; 0x11d4a <thermostat_ring_get_status_bites(unsigned char, unsigned char)+0x1c>
   11d48:	22 0f       	add	r18, r18
   11d4a:	ca 95       	dec	r28
   11d4c:	ea f7       	brpl	.-6      	; 0x11d48 <thermostat_ring_get_status_bites(unsigned char, unsigned char)+0x1a>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:198
}
   11d4e:	82 23       	and	r24, r18
   11d50:	cf 91       	pop	r28
   11d52:	08 95       	ret

00011d54 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>:
_Z32thermostat_ring_set_status_biteshh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   11d54:	21 e2       	ldi	r18, 0x21	; 33
   11d56:	82 9f       	mul	r24, r18
   11d58:	c0 01       	movw	r24, r0
   11d5a:	11 24       	eor	r1, r1
   11d5c:	88 5a       	subi	r24, 0xA8	; 168
   11d5e:	9e 4f       	sbci	r25, 0xFE	; 254
   11d60:	0c 94 b5 8c 	jmp	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011d64 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>:
_Z28thermostat_ring_update_biteshhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:204
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
   11d64:	1f 93       	push	r17
   11d66:	cf 93       	push	r28
   11d68:	df 93       	push	r29
   11d6a:	c8 2f       	mov	r28, r24
   11d6c:	16 2f       	mov	r17, r22
   11d6e:	d4 2f       	mov	r29, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:205
  uint8_t b = thermostat_ring_get_status_data(idx);
   11d70:	0e 94 8f 8e 	call	0x11d1e	; 0x11d1e <thermostat_ring_get_status_data(unsigned char)>
   11d74:	61 e0       	ldi	r22, 0x01	; 1
   11d76:	70 e0       	ldi	r23, 0x00	; 0
   11d78:	01 c0       	rjmp	.+2      	; 0x11d7c <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x18>
   11d7a:	66 0f       	add	r22, r22
   11d7c:	1a 95       	dec	r17
   11d7e:	ea f7       	brpl	.-6      	; 0x11d7a <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x16>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:206
  if (sets == 0) cbi(b, bits);
   11d80:	d1 11       	cpse	r29, r1
   11d82:	08 c0       	rjmp	.+16     	; 0x11d94 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x30>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:206 (discriminator 1)
   11d84:	60 95       	com	r22
   11d86:	68 23       	and	r22, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:208
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
   11d88:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:209
}
   11d8a:	df 91       	pop	r29
   11d8c:	cf 91       	pop	r28
   11d8e:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:208
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
   11d90:	0c 94 aa 8e 	jmp	0x11d54	; 0x11d54 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   11d94:	68 2b       	or	r22, r24
   11d96:	f8 cf       	rjmp	.-16     	; 0x11d88 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x24>

00011d98 <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
   11d98:	af 92       	push	r10
   11d9a:	bf 92       	push	r11
   11d9c:	cf 92       	push	r12
   11d9e:	df 92       	push	r13
   11da0:	ef 92       	push	r14
   11da2:	ff 92       	push	r15
   11da4:	0f 93       	push	r16
   11da6:	1f 93       	push	r17
   11da8:	cf 93       	push	r28
   11daa:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
   11dac:	c8 2f       	mov	r28, r24
   11dae:	d0 e0       	ldi	r29, 0x00	; 0
   11db0:	5e 01       	movw	r10, r28
   11db2:	aa 0c       	add	r10, r10
   11db4:	bb 1c       	adc	r11, r11
   11db6:	ce 01       	movw	r24, r28
   11db8:	88 0f       	add	r24, r24
   11dba:	99 1f       	adc	r25, r25
   11dbc:	88 0f       	add	r24, r24
   11dbe:	99 1f       	adc	r25, r25
   11dc0:	fc 01       	movw	r30, r24
   11dc2:	ee 59       	subi	r30, 0x9E	; 158
   11dc4:	ff 4e       	sbci	r31, 0xEF	; 239
   11dc6:	c0 80       	ld	r12, Z
   11dc8:	d1 80       	ldd	r13, Z+1	; 0x01
   11dca:	e2 80       	ldd	r14, Z+2	; 0x02
   11dcc:	f3 80       	ldd	r15, Z+3	; 0x03
   11dce:	fc 01       	movw	r30, r24
   11dd0:	ea 58       	subi	r30, 0x8A	; 138
   11dd2:	ff 4e       	sbci	r31, 0xEF	; 239
   11dd4:	00 81       	ld	r16, Z
   11dd6:	11 81       	ldd	r17, Z+1	; 0x01
   11dd8:	22 81       	ldd	r18, Z+2	; 0x02
   11dda:	33 81       	ldd	r19, Z+3	; 0x03
   11ddc:	86 57       	subi	r24, 0x76	; 118
   11dde:	9f 4e       	sbci	r25, 0xEF	; 239
   11de0:	fc 01       	movw	r30, r24
   11de2:	40 81       	ld	r20, Z
   11de4:	51 81       	ldd	r21, Z+1	; 0x01
   11de6:	62 81       	ldd	r22, Z+2	; 0x02
   11de8:	73 81       	ldd	r23, Z+3	; 0x03
   11dea:	e0 91 51 10 	lds	r30, 0x1051	; 0x801051 <array_pids>
   11dee:	f0 91 52 10 	lds	r31, 0x1052	; 0x801052 <array_pids+0x1>
   11df2:	ea 0d       	add	r30, r10
   11df4:	fb 1d       	adc	r31, r11
   11df6:	80 81       	ld	r24, Z
   11df8:	91 81       	ldd	r25, Z+1	; 0x01
   11dfa:	0e 94 01 ba 	call	0x17402	; 0x17402 <PID::SetTunings(double, double, double)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
   11dfe:	c3 5a       	subi	r28, 0xA3	; 163
   11e00:	df 4e       	sbci	r29, 0xEF	; 239
   11e02:	68 81       	ld	r22, Y
   11e04:	70 e0       	ldi	r23, 0x00	; 0
   11e06:	80 91 51 10 	lds	r24, 0x1051	; 0x801051 <array_pids>
   11e0a:	90 91 52 10 	lds	r25, 0x1052	; 0x801052 <array_pids+0x1>
   11e0e:	a8 0e       	add	r10, r24
   11e10:	b9 1e       	adc	r11, r25
   11e12:	f5 01       	movw	r30, r10
   11e14:	80 81       	ld	r24, Z
   11e16:	91 81       	ldd	r25, Z+1	; 0x01
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:221
}
   11e18:	df 91       	pop	r29
   11e1a:	cf 91       	pop	r28
   11e1c:	1f 91       	pop	r17
   11e1e:	0f 91       	pop	r16
   11e20:	ff 90       	pop	r15
   11e22:	ef 90       	pop	r14
   11e24:	df 90       	pop	r13
   11e26:	cf 90       	pop	r12
   11e28:	bf 90       	pop	r11
   11e2a:	af 90       	pop	r10
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:220


void thermostat_ring_update_pid_parameters(uint8_t idx)
{
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
  array_pids[idx]->SetSampleTime(PID_time[idx]);
   11e2c:	0c 94 17 ba 	jmp	0x1742e	; 0x1742e <PID::SetSampleTime(int)>

00011e30 <thermostat_ring_get_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_get_pid_eepromh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:224
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
   11e30:	ef 92       	push	r14
   11e32:	ff 92       	push	r15
   11e34:	0f 93       	push	r16
   11e36:	1f 93       	push	r17
   11e38:	cf 93       	push	r28
   11e3a:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:225
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
   11e3c:	e8 2e       	mov	r14, r24
   11e3e:	f1 2c       	mov	r15, r1
   11e40:	91 e2       	ldi	r25, 0x21	; 33
   11e42:	89 9f       	mul	r24, r25
   11e44:	e0 01       	movw	r28, r0
   11e46:	11 24       	eor	r1, r1
   11e48:	ce 01       	movw	r24, r28
   11e4a:	80 5a       	subi	r24, 0xA0	; 160
   11e4c:	9e 4f       	sbci	r25, 0xFE	; 254
   11e4e:	0e 94 1f b8 	call	0x1703e	; 0x1703e <EEPROMreadFloat(unsigned int)>
   11e52:	87 01       	movw	r16, r14
   11e54:	00 0f       	add	r16, r16
   11e56:	11 1f       	adc	r17, r17
   11e58:	00 0f       	add	r16, r16
   11e5a:	11 1f       	adc	r17, r17
   11e5c:	f8 01       	movw	r30, r16
   11e5e:	e6 57       	subi	r30, 0x76	; 118
   11e60:	ff 4e       	sbci	r31, 0xEF	; 239
   11e62:	60 83       	st	Z, r22
   11e64:	71 83       	std	Z+1, r23	; 0x01
   11e66:	82 83       	std	Z+2, r24	; 0x02
   11e68:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
   11e6a:	ce 01       	movw	r24, r28
   11e6c:	8c 59       	subi	r24, 0x9C	; 156
   11e6e:	9e 4f       	sbci	r25, 0xFE	; 254
   11e70:	0e 94 1f b8 	call	0x1703e	; 0x1703e <EEPROMreadFloat(unsigned int)>
   11e74:	f8 01       	movw	r30, r16
   11e76:	ea 58       	subi	r30, 0x8A	; 138
   11e78:	ff 4e       	sbci	r31, 0xEF	; 239
   11e7a:	60 83       	st	Z, r22
   11e7c:	71 83       	std	Z+1, r23	; 0x01
   11e7e:	82 83       	std	Z+2, r24	; 0x02
   11e80:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
   11e82:	ce 01       	movw	r24, r28
   11e84:	88 59       	subi	r24, 0x98	; 152
   11e86:	9e 4f       	sbci	r25, 0xFE	; 254
   11e88:	0e 94 1f b8 	call	0x1703e	; 0x1703e <EEPROMreadFloat(unsigned int)>
   11e8c:	f8 01       	movw	r30, r16
   11e8e:	ee 59       	subi	r30, 0x9E	; 158
   11e90:	ff 4e       	sbci	r31, 0xEF	; 239
   11e92:	60 83       	st	Z, r22
   11e94:	71 83       	std	Z+1, r23	; 0x01
   11e96:	82 83       	std	Z+2, r24	; 0x02
   11e98:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
   11e9a:	ce 01       	movw	r24, r28
   11e9c:	84 59       	subi	r24, 0x94	; 148
   11e9e:	9e 4f       	sbci	r25, 0xFE	; 254
   11ea0:	0e 94 b3 8c 	call	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>
   11ea4:	f7 01       	movw	r30, r14
   11ea6:	e3 5a       	subi	r30, 0xA3	; 163
   11ea8:	ff 4e       	sbci	r31, 0xEF	; 239
   11eaa:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:229
}
   11eac:	df 91       	pop	r29
   11eae:	cf 91       	pop	r28
   11eb0:	1f 91       	pop	r17
   11eb2:	0f 91       	pop	r16
   11eb4:	ff 90       	pop	r15
   11eb6:	ef 90       	pop	r14
   11eb8:	08 95       	ret

00011eba <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:232

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
   11eba:	ef 92       	push	r14
   11ebc:	ff 92       	push	r15
   11ebe:	0f 93       	push	r16
   11ec0:	1f 93       	push	r17
   11ec2:	cf 93       	push	r28
   11ec4:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
   11ec6:	e8 2e       	mov	r14, r24
   11ec8:	f1 2c       	mov	r15, r1
   11eca:	91 e2       	ldi	r25, 0x21	; 33
   11ecc:	89 9f       	mul	r24, r25
   11ece:	e0 01       	movw	r28, r0
   11ed0:	11 24       	eor	r1, r1
   11ed2:	87 01       	movw	r16, r14
   11ed4:	00 0f       	add	r16, r16
   11ed6:	11 1f       	adc	r17, r17
   11ed8:	00 0f       	add	r16, r16
   11eda:	11 1f       	adc	r17, r17
   11edc:	f8 01       	movw	r30, r16
   11ede:	e6 57       	subi	r30, 0x76	; 118
   11ee0:	ff 4e       	sbci	r31, 0xEF	; 239
   11ee2:	40 81       	ld	r20, Z
   11ee4:	51 81       	ldd	r21, Z+1	; 0x01
   11ee6:	62 81       	ldd	r22, Z+2	; 0x02
   11ee8:	73 81       	ldd	r23, Z+3	; 0x03
   11eea:	ce 01       	movw	r24, r28
   11eec:	80 5a       	subi	r24, 0xA0	; 160
   11eee:	9e 4f       	sbci	r25, 0xFE	; 254
   11ef0:	0e 94 51 b8 	call	0x170a2	; 0x170a2 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
   11ef4:	f8 01       	movw	r30, r16
   11ef6:	ea 58       	subi	r30, 0x8A	; 138
   11ef8:	ff 4e       	sbci	r31, 0xEF	; 239
   11efa:	40 81       	ld	r20, Z
   11efc:	51 81       	ldd	r21, Z+1	; 0x01
   11efe:	62 81       	ldd	r22, Z+2	; 0x02
   11f00:	73 81       	ldd	r23, Z+3	; 0x03
   11f02:	ce 01       	movw	r24, r28
   11f04:	8c 59       	subi	r24, 0x9C	; 156
   11f06:	9e 4f       	sbci	r25, 0xFE	; 254
   11f08:	0e 94 51 b8 	call	0x170a2	; 0x170a2 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
   11f0c:	f8 01       	movw	r30, r16
   11f0e:	ee 59       	subi	r30, 0x9E	; 158
   11f10:	ff 4e       	sbci	r31, 0xEF	; 239
   11f12:	40 81       	ld	r20, Z
   11f14:	51 81       	ldd	r21, Z+1	; 0x01
   11f16:	62 81       	ldd	r22, Z+2	; 0x02
   11f18:	73 81       	ldd	r23, Z+3	; 0x03
   11f1a:	ce 01       	movw	r24, r28
   11f1c:	88 59       	subi	r24, 0x98	; 152
   11f1e:	9e 4f       	sbci	r25, 0xFE	; 254
   11f20:	0e 94 51 b8 	call	0x170a2	; 0x170a2 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
   11f24:	f7 01       	movw	r30, r14
   11f26:	e3 5a       	subi	r30, 0xA3	; 163
   11f28:	ff 4e       	sbci	r31, 0xEF	; 239
   11f2a:	60 81       	ld	r22, Z
   11f2c:	ce 01       	movw	r24, r28
   11f2e:	84 59       	subi	r24, 0x94	; 148
   11f30:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:237
}
   11f32:	df 91       	pop	r29
   11f34:	cf 91       	pop	r28
   11f36:	1f 91       	pop	r17
   11f38:	0f 91       	pop	r16
   11f3a:	ff 90       	pop	r15
   11f3c:	ef 90       	pop	r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
   11f3e:	0c 94 b5 8c 	jmp	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011f42 <thermostat_ring_pid_set_kp(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kphf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:240
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
   11f42:	cf 93       	push	r28
   11f44:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  PID_p[id] = x;
   11f46:	84 e0       	ldi	r24, 0x04	; 4
   11f48:	c8 9f       	mul	r28, r24
   11f4a:	f0 01       	movw	r30, r0
   11f4c:	11 24       	eor	r1, r1
   11f4e:	e6 57       	subi	r30, 0x76	; 118
   11f50:	ff 4e       	sbci	r31, 0xEF	; 239
   11f52:	40 83       	st	Z, r20
   11f54:	51 83       	std	Z+1, r21	; 0x01
   11f56:	62 83       	std	Z+2, r22	; 0x02
   11f58:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
   11f5a:	8c 2f       	mov	r24, r28
   11f5c:	0e 94 cc 8e 	call	0x11d98	; 0x11d98 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
   11f60:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:244
}
   11f62:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   11f64:	0c 94 5d 8f 	jmp	0x11eba	; 0x11eba <thermostat_ring_set_pid_eeprom(unsigned char)>

00011f68 <thermostat_ring_pid_set_ki(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kihf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:246
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
   11f68:	cf 93       	push	r28
   11f6a:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
  PID_i[id] = x;
   11f6c:	84 e0       	ldi	r24, 0x04	; 4
   11f6e:	c8 9f       	mul	r28, r24
   11f70:	f0 01       	movw	r30, r0
   11f72:	11 24       	eor	r1, r1
   11f74:	ea 58       	subi	r30, 0x8A	; 138
   11f76:	ff 4e       	sbci	r31, 0xEF	; 239
   11f78:	40 83       	st	Z, r20
   11f7a:	51 83       	std	Z+1, r21	; 0x01
   11f7c:	62 83       	std	Z+2, r22	; 0x02
   11f7e:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
   11f80:	8c 2f       	mov	r24, r28
   11f82:	0e 94 cc 8e 	call	0x11d98	; 0x11d98 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
   11f86:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:250
}
   11f88:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   11f8a:	0c 94 5d 8f 	jmp	0x11eba	; 0x11eba <thermostat_ring_set_pid_eeprom(unsigned char)>

00011f8e <thermostat_ring_pid_set_kd(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kdhf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:252
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
   11f8e:	cf 93       	push	r28
   11f90:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
  PID_d[id] = x;
   11f92:	84 e0       	ldi	r24, 0x04	; 4
   11f94:	c8 9f       	mul	r28, r24
   11f96:	f0 01       	movw	r30, r0
   11f98:	11 24       	eor	r1, r1
   11f9a:	ee 59       	subi	r30, 0x9E	; 158
   11f9c:	ff 4e       	sbci	r31, 0xEF	; 239
   11f9e:	40 83       	st	Z, r20
   11fa0:	51 83       	std	Z+1, r21	; 0x01
   11fa2:	62 83       	std	Z+2, r22	; 0x02
   11fa4:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
   11fa6:	8c 2f       	mov	r24, r28
   11fa8:	0e 94 cc 8e 	call	0x11d98	; 0x11d98 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
   11fac:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:256
}
   11fae:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   11fb0:	0c 94 5d 8f 	jmp	0x11eba	; 0x11eba <thermostat_ring_set_pid_eeprom(unsigned char)>

00011fb4 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>:
_Z28thermostat_ring_pid_set_timehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:259
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
   11fb4:	cf 93       	push	r28
   11fb6:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
  PID_time[id] = timer;
   11fb8:	e8 2f       	mov	r30, r24
   11fba:	f0 e0       	ldi	r31, 0x00	; 0
   11fbc:	e3 5a       	subi	r30, 0xA3	; 163
   11fbe:	ff 4e       	sbci	r31, 0xEF	; 239
   11fc0:	60 83       	st	Z, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
   11fc2:	0e 94 cc 8e 	call	0x11d98	; 0x11d98 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
   11fc6:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:263
}
   11fc8:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   11fca:	0c 94 5d 8f 	jmp	0x11eba	; 0x11eba <thermostat_ring_set_pid_eeprom(unsigned char)>

00011fce <thermostat_program_get_name(unsigned char, char*)>:
_Z27thermostat_program_get_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:270


//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
   11fce:	ef 92       	push	r14
   11fd0:	ff 92       	push	r15
   11fd2:	0f 93       	push	r16
   11fd4:	1f 93       	push	r17
   11fd6:	cf 93       	push	r28
   11fd8:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:274
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
   11fda:	9d e4       	ldi	r25, 0x4D	; 77
   11fdc:	89 9f       	mul	r24, r25
   11fde:	e0 01       	movw	r28, r0
   11fe0:	11 24       	eor	r1, r1
   11fe2:	8e 01       	movw	r16, r28
   11fe4:	0c 5c       	subi	r16, 0xCC	; 204
   11fe6:	1d 4f       	sbci	r17, 0xFD	; 253
   11fe8:	7b 01       	movw	r14, r22
   11fea:	c2 5c       	subi	r28, 0xC2	; 194
   11fec:	dd 4f       	sbci	r29, 0xFD	; 253
   11fee:	c8 01       	movw	r24, r16
   11ff0:	0e 94 b3 8c 	call	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:275
    name[i] = t;
   11ff4:	f7 01       	movw	r30, r14
   11ff6:	81 93       	st	Z+, r24
   11ff8:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:276
    if (t == 0) break;
   11ffa:	88 23       	and	r24, r24
   11ffc:	29 f0       	breq	.+10     	; 0x12008 <thermostat_program_get_name(unsigned char, char*)+0x3a>
   11ffe:	0f 5f       	subi	r16, 0xFF	; 255
   12000:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:272 (discriminator 2)
//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   12002:	0c 17       	cp	r16, r28
   12004:	1d 07       	cpc	r17, r29
   12006:	99 f7       	brne	.-26     	; 0x11fee <thermostat_program_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:278
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
    name[i] = t;
    if (t == 0) break;
  }
}
   12008:	df 91       	pop	r29
   1200a:	cf 91       	pop	r28
   1200c:	1f 91       	pop	r17
   1200e:	0f 91       	pop	r16
   12010:	ff 90       	pop	r15
   12012:	ef 90       	pop	r14
   12014:	08 95       	ret

00012016 <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:281
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
   12016:	ef 92       	push	r14
   12018:	ff 92       	push	r15
   1201a:	0f 93       	push	r16
   1201c:	1f 93       	push	r17
   1201e:	cf 93       	push	r28
   12020:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
   12022:	9d e4       	ldi	r25, 0x4D	; 77
   12024:	89 9f       	mul	r24, r25
   12026:	80 01       	movw	r16, r0
   12028:	11 24       	eor	r1, r1
   1202a:	eb 01       	movw	r28, r22
   1202c:	78 01       	movw	r14, r16
   1202e:	8c ec       	ldi	r24, 0xCC	; 204
   12030:	e8 1a       	sub	r14, r24
   12032:	8d ef       	ldi	r24, 0xFD	; 253
   12034:	f8 0a       	sbc	r15, r24
   12036:	02 5c       	subi	r16, 0xC2	; 194
   12038:	1d 4f       	sbci	r17, 0xFD	; 253
   1203a:	69 91       	ld	r22, Y+
   1203c:	c7 01       	movw	r24, r14
   1203e:	0e 94 b5 8c 	call	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
   12042:	fe 01       	movw	r30, r28
   12044:	31 97       	sbiw	r30, 0x01	; 1
   12046:	80 81       	ld	r24, Z
   12048:	88 23       	and	r24, r24
   1204a:	31 f0       	breq	.+12     	; 0x12058 <thermostat_program_set_name(unsigned char, char*)+0x42>
   1204c:	9f ef       	ldi	r25, 0xFF	; 255
   1204e:	e9 1a       	sub	r14, r25
   12050:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:282 (discriminator 2)
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   12052:	e0 16       	cp	r14, r16
   12054:	f1 06       	cpc	r15, r17
   12056:	89 f7       	brne	.-30     	; 0x1203a <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
   12058:	df 91       	pop	r29
   1205a:	cf 91       	pop	r28
   1205c:	1f 91       	pop	r17
   1205e:	0f 91       	pop	r16
   12060:	ff 90       	pop	r15
   12062:	ef 90       	pop	r14
   12064:	08 95       	ret

00012066 <thermostat_program_get_active(unsigned char)>:
_Z29thermostat_program_get_activeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:291
//// globalni povoleni programu a nastaveni rezimu
uint8_t thermostat_program_get_active(uint8_t program_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
   12066:	2d e4       	ldi	r18, 0x4D	; 77
   12068:	82 9f       	mul	r24, r18
   1206a:	c0 01       	movw	r24, r0
   1206c:	11 24       	eor	r1, r1
   1206e:	8f 50       	subi	r24, 0x0F	; 15
   12070:	9e 4f       	sbci	r25, 0xFE	; 254
   12072:	0c 94 b3 8c 	jmp	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>

00012076 <thermostat_program_set_active(unsigned char, unsigned char)>:
_Z29thermostat_program_set_activehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   12076:	2d e4       	ldi	r18, 0x4D	; 77
   12078:	82 9f       	mul	r24, r18
   1207a:	c0 01       	movw	r24, r0
   1207c:	11 24       	eor	r1, r1
   1207e:	8f 50       	subi	r24, 0x0F	; 15
   12080:	9e 4f       	sbci	r25, 0xFE	; 254
   12082:	0c 94 b5 8c 	jmp	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012086 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>:
_Z27thermostat_program_get_timehhPhS_S_S_S_():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:301
}


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
   12086:	7f 92       	push	r7
   12088:	8f 92       	push	r8
   1208a:	9f 92       	push	r9
   1208c:	af 92       	push	r10
   1208e:	bf 92       	push	r11
   12090:	cf 92       	push	r12
   12092:	df 92       	push	r13
   12094:	ef 92       	push	r14
   12096:	ff 92       	push	r15
   12098:	0f 93       	push	r16
   1209a:	1f 93       	push	r17
   1209c:	cf 93       	push	r28
   1209e:	df 93       	push	r29
   120a0:	5a 01       	movw	r10, r20
   120a2:	e9 01       	movw	r28, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:302
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
   120a4:	9d e4       	ldi	r25, 0x4D	; 77
   120a6:	89 9f       	mul	r24, r25
   120a8:	40 01       	movw	r8, r0
   120aa:	11 24       	eor	r1, r1
   120ac:	ef e0       	ldi	r30, 0x0F	; 15
   120ae:	8e 1a       	sub	r8, r30
   120b0:	ee ef       	ldi	r30, 0xFE	; 254
   120b2:	9e 0a       	sbc	r9, r30
   120b4:	f6 e0       	ldi	r31, 0x06	; 6
   120b6:	6f 9f       	mul	r22, r31
   120b8:	80 0c       	add	r8, r0
   120ba:	91 1c       	adc	r9, r1
   120bc:	11 24       	eor	r1, r1
   120be:	c4 01       	movw	r24, r8
   120c0:	02 96       	adiw	r24, 0x02	; 2
   120c2:	0e 94 b3 8c 	call	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>
   120c6:	78 2e       	mov	r7, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
   120c8:	c4 01       	movw	r24, r8
   120ca:	03 96       	adiw	r24, 0x03	; 3
   120cc:	0e 94 b3 8c 	call	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
   120d0:	97 2d       	mov	r25, r7
   120d2:	96 95       	lsr	r25
   120d4:	96 95       	lsr	r25
   120d6:	96 95       	lsr	r25
   120d8:	f5 01       	movw	r30, r10
   120da:	90 83       	st	Z, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
   120dc:	27 2d       	mov	r18, r7
   120de:	30 e0       	ldi	r19, 0x00	; 0
   120e0:	35 95       	asr	r19
   120e2:	27 95       	ror	r18
   120e4:	23 70       	andi	r18, 0x03	; 3
   120e6:	9f e0       	ldi	r25, 0x0F	; 15
   120e8:	29 9f       	mul	r18, r25
   120ea:	20 2d       	mov	r18, r0
   120ec:	11 24       	eor	r1, r1
   120ee:	28 83       	st	Y, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
   120f0:	28 2f       	mov	r18, r24
   120f2:	26 95       	lsr	r18
   120f4:	26 95       	lsr	r18
   120f6:	26 95       	lsr	r18
   120f8:	f8 01       	movw	r30, r16
   120fa:	20 83       	st	Z, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
   120fc:	83 70       	andi	r24, 0x03	; 3
   120fe:	89 9f       	mul	r24, r25
   12100:	80 2d       	mov	r24, r0
   12102:	11 24       	eor	r1, r1
   12104:	f7 01       	movw	r30, r14
   12106:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
   12108:	87 2d       	mov	r24, r7
   1210a:	81 70       	andi	r24, 0x01	; 1
   1210c:	f6 01       	movw	r30, r12
   1210e:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:309
}
   12110:	df 91       	pop	r29
   12112:	cf 91       	pop	r28
   12114:	1f 91       	pop	r17
   12116:	0f 91       	pop	r16
   12118:	ff 90       	pop	r15
   1211a:	ef 90       	pop	r14
   1211c:	df 90       	pop	r13
   1211e:	cf 90       	pop	r12
   12120:	bf 90       	pop	r11
   12122:	af 90       	pop	r10
   12124:	9f 90       	pop	r9
   12126:	8f 90       	pop	r8
   12128:	7f 90       	pop	r7
   1212a:	08 95       	ret

0001212c <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:312
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
   1212c:	cf 92       	push	r12
   1212e:	ef 92       	push	r14
   12130:	0f 93       	push	r16
   12132:	1f 93       	push	r17
   12134:	cf 93       	push	r28
   12136:	df 93       	push	r29
   12138:	c8 2f       	mov	r28, r24
   1213a:	56 2f       	mov	r21, r22
   1213c:	8e 2d       	mov	r24, r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
   1213e:	3f e0       	ldi	r19, 0x0F	; 15
   12140:	63 2f       	mov	r22, r19
   12142:	0e 94 4d d8 	call	0x1b09a	; 0x1b09a <__udivmodqi4>
   12146:	83 70       	andi	r24, 0x03	; 3
   12148:	98 e0       	ldi	r25, 0x08	; 8
   1214a:	09 9f       	mul	r16, r25
   1214c:	80 01       	movw	r16, r0
   1214e:	11 24       	eor	r1, r1
   12150:	08 0f       	add	r16, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
   12152:	8d e4       	ldi	r24, 0x4D	; 77
   12154:	c8 9f       	mul	r28, r24
   12156:	e0 01       	movw	r28, r0
   12158:	11 24       	eor	r1, r1
   1215a:	cf 50       	subi	r28, 0x0F	; 15
   1215c:	de 4f       	sbci	r29, 0xFE	; 254
   1215e:	96 e0       	ldi	r25, 0x06	; 6
   12160:	59 9f       	mul	r21, r25
   12162:	c0 0d       	add	r28, r0
   12164:	d1 1d       	adc	r29, r1
   12166:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
   12168:	82 2f       	mov	r24, r18
   1216a:	0e 94 4d d8 	call	0x1b09a	; 0x1b09a <__udivmodqi4>
   1216e:	68 2f       	mov	r22, r24
   12170:	66 0f       	add	r22, r22
   12172:	66 70       	andi	r22, 0x06	; 6
   12174:	88 e0       	ldi	r24, 0x08	; 8
   12176:	48 9f       	mul	r20, r24
   12178:	a0 01       	movw	r20, r0
   1217a:	11 24       	eor	r1, r1
   1217c:	9c 2d       	mov	r25, r12
   1217e:	91 70       	andi	r25, 0x01	; 1
   12180:	c9 2e       	mov	r12, r25
   12182:	c4 0e       	add	r12, r20
   12184:	6c 0d       	add	r22, r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
   12186:	ce 01       	movw	r24, r28
   12188:	02 96       	adiw	r24, 0x02	; 2
   1218a:	0e 94 b5 8c 	call	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
   1218e:	60 2f       	mov	r22, r16
   12190:	ce 01       	movw	r24, r28
   12192:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:318
}
   12194:	df 91       	pop	r29
   12196:	cf 91       	pop	r28
   12198:	1f 91       	pop	r17
   1219a:	0f 91       	pop	r16
   1219c:	ef 90       	pop	r14
   1219e:	cf 90       	pop	r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
   121a0:	0c 94 b5 8c 	jmp	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

000121a4 <thermostat_program_get_threshold(unsigned char, unsigned char)>:
_Z32thermostat_program_get_thresholdhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:323
}


//// ziska rozhodovaci uroven termostatu
uint16_t thermostat_program_get_threshold(uint8_t program_id, uint8_t interval_id)
{
   121a4:	1f 93       	push	r17
   121a6:	cf 93       	push	r28
   121a8:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:325
  uint16_t ret = 0;
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
   121aa:	9d e4       	ldi	r25, 0x4D	; 77
   121ac:	89 9f       	mul	r24, r25
   121ae:	e0 01       	movw	r28, r0
   121b0:	11 24       	eor	r1, r1
   121b2:	cf 50       	subi	r28, 0x0F	; 15
   121b4:	de 4f       	sbci	r29, 0xFE	; 254
   121b6:	86 e0       	ldi	r24, 0x06	; 6
   121b8:	68 9f       	mul	r22, r24
   121ba:	c0 0d       	add	r28, r0
   121bc:	d1 1d       	adc	r29, r1
   121be:	11 24       	eor	r1, r1
   121c0:	ce 01       	movw	r24, r28
   121c2:	05 96       	adiw	r24, 0x05	; 5
   121c4:	0e 94 b3 8c 	call	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>
   121c8:	18 2f       	mov	r17, r24
   121ca:	ce 01       	movw	r24, r28
   121cc:	04 96       	adiw	r24, 0x04	; 4
   121ce:	0e 94 b3 8c 	call	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>
   121d2:	21 2f       	mov	r18, r17
   121d4:	30 e0       	ldi	r19, 0x00	; 0
   121d6:	32 2f       	mov	r19, r18
   121d8:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:327
  return ret;
}
   121da:	82 0f       	add	r24, r18
   121dc:	93 2f       	mov	r25, r19
   121de:	91 1d       	adc	r25, r1
   121e0:	df 91       	pop	r29
   121e2:	cf 91       	pop	r28
   121e4:	1f 91       	pop	r17
   121e6:	08 95       	ret

000121e8 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:330
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
   121e8:	1f 93       	push	r17
   121ea:	cf 93       	push	r28
   121ec:	df 93       	push	r29
   121ee:	14 2f       	mov	r17, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
   121f0:	9d e4       	ldi	r25, 0x4D	; 77
   121f2:	89 9f       	mul	r24, r25
   121f4:	e0 01       	movw	r28, r0
   121f6:	11 24       	eor	r1, r1
   121f8:	cf 50       	subi	r28, 0x0F	; 15
   121fa:	de 4f       	sbci	r29, 0xFE	; 254
   121fc:	86 e0       	ldi	r24, 0x06	; 6
   121fe:	68 9f       	mul	r22, r24
   12200:	c0 0d       	add	r28, r0
   12202:	d1 1d       	adc	r29, r1
   12204:	11 24       	eor	r1, r1
   12206:	65 2f       	mov	r22, r21
   12208:	ce 01       	movw	r24, r28
   1220a:	05 96       	adiw	r24, 0x05	; 5
   1220c:	0e 94 b5 8c 	call	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
   12210:	61 2f       	mov	r22, r17
   12212:	ce 01       	movw	r24, r28
   12214:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:333
}
   12216:	df 91       	pop	r29
   12218:	cf 91       	pop	r28
   1221a:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
   1221c:	0c 94 b5 8c 	jmp	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012220 <thermostat_program_get_week(unsigned char, unsigned char)>:
_Z27thermostat_program_get_weekhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   12220:	2d e4       	ldi	r18, 0x4D	; 77
   12222:	82 9f       	mul	r24, r18
   12224:	c0 01       	movw	r24, r0
   12226:	11 24       	eor	r1, r1
   12228:	26 e0       	ldi	r18, 0x06	; 6
   1222a:	62 9f       	mul	r22, r18
   1222c:	80 0d       	add	r24, r0
   1222e:	91 1d       	adc	r25, r1
   12230:	11 24       	eor	r1, r1
   12232:	8e 50       	subi	r24, 0x0E	; 14
   12234:	9e 4f       	sbci	r25, 0xFE	; 254
   12236:	0c 94 b3 8c 	jmp	0x11966	; 0x11966 <EEPROMClass::read(int) [clone .isra.0]>

0001223a <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:371
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
   1223a:	2d e4       	ldi	r18, 0x4D	; 77
   1223c:	82 9f       	mul	r24, r18
   1223e:	c0 01       	movw	r24, r0
   12240:	11 24       	eor	r1, r1
   12242:	26 e0       	ldi	r18, 0x06	; 6
   12244:	62 9f       	mul	r22, r18
   12246:	80 0d       	add	r24, r0
   12248:	91 1d       	adc	r25, r1
   1224a:	11 24       	eor	r1, r1
   1224c:	64 2f       	mov	r22, r20
   1224e:	8e 50       	subi	r24, 0x0E	; 14
   12250:	9e 4f       	sbci	r25, 0xFE	; 254
   12252:	0c 94 b5 8c 	jmp	0x1196a	; 0x1196a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012256 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)>:
_Z37thermostat_program_set_parse_intervalhhPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:338
}


//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
   12256:	bf 92       	push	r11
   12258:	cf 92       	push	r12
   1225a:	df 92       	push	r13
   1225c:	ef 92       	push	r14
   1225e:	ff 92       	push	r15
   12260:	0f 93       	push	r16
   12262:	1f 93       	push	r17
   12264:	cf 93       	push	r28
   12266:	df 93       	push	r29
   12268:	d8 2f       	mov	r29, r24
   1226a:	16 2f       	mov	r17, r22
   1226c:	ca 01       	movw	r24, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:343
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
   1226e:	6b e9       	ldi	r22, 0x9B	; 155
   12270:	73 e0       	ldi	r23, 0x03	; 3
   12272:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
   12276:	f1 2c       	mov	r15, r1
   12278:	c1 2c       	mov	r12, r1
   1227a:	e1 2c       	mov	r14, r1
   1227c:	00 e0       	ldi	r16, 0x00	; 0
   1227e:	b1 2c       	mov	r11, r1
   12280:	d1 2c       	mov	r13, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
   12282:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
   12284:	00 97       	sbiw	r24, 0x00	; 0
   12286:	59 f1       	breq	.+86     	; 0x122de <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x88>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
   12288:	c1 11       	cpse	r28, r1
   1228a:	0b c0       	rjmp	.+22     	; 0x122a2 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x4c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:346 (discriminator 1)
   1228c:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
   12290:	d8 2e       	mov	r13, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
   12292:	6b e9       	ldi	r22, 0x9B	; 155
   12294:	73 e0       	ldi	r23, 0x03	; 3
   12296:	90 e0       	ldi	r25, 0x00	; 0
   12298:	80 e0       	ldi	r24, 0x00	; 0
   1229a:	0e 94 4d dc 	call	0x1b89a	; 0x1b89a <strtok>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:354
    cnt++;
   1229e:	cf 5f       	subi	r28, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:344
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
   122a0:	f1 cf       	rjmp	.-30     	; 0x12284 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x2e>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:347
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
   122a2:	c1 30       	cpi	r28, 0x01	; 1
   122a4:	21 f4       	brne	.+8      	; 0x122ae <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x58>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:347 (discriminator 1)
   122a6:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
   122aa:	b8 2e       	mov	r11, r24
   122ac:	f2 cf       	rjmp	.-28     	; 0x12292 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
   122ae:	c2 30       	cpi	r28, 0x02	; 2
   122b0:	21 f4       	brne	.+8      	; 0x122ba <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x64>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:348 (discriminator 1)
   122b2:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
   122b6:	08 2f       	mov	r16, r24
   122b8:	ec cf       	rjmp	.-40     	; 0x12292 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
   122ba:	c3 30       	cpi	r28, 0x03	; 3
   122bc:	21 f4       	brne	.+8      	; 0x122c6 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x70>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:349 (discriminator 1)
   122be:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
   122c2:	e8 2e       	mov	r14, r24
   122c4:	e6 cf       	rjmp	.-52     	; 0x12292 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
   122c6:	c4 30       	cpi	r28, 0x04	; 4
   122c8:	21 f4       	brne	.+8      	; 0x122d2 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x7c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:350 (discriminator 1)
   122ca:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
   122ce:	f8 2e       	mov	r15, r24
   122d0:	e0 cf       	rjmp	.-64     	; 0x12292 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
   122d2:	c5 30       	cpi	r28, 0x05	; 5
   122d4:	f1 f6       	brne	.-68     	; 0x12292 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:351 (discriminator 1)
   122d6:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <atoi>
   122da:	c8 2e       	mov	r12, r24
   122dc:	da cf       	rjmp	.-76     	; 0x12292 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
   122de:	c6 30       	cpi	r28, 0x06	; 6
   122e0:	a1 f4       	brne	.+40     	; 0x1230a <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0xb4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
   122e2:	2b 2d       	mov	r18, r11
   122e4:	4d 2d       	mov	r20, r13
   122e6:	61 2f       	mov	r22, r17
   122e8:	8d 2f       	mov	r24, r29
   122ea:	0e 94 96 90 	call	0x1212c	; 0x1212c <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
   122ee:	4f 2d       	mov	r20, r15
   122f0:	61 2f       	mov	r22, r17
   122f2:	8d 2f       	mov	r24, r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:361
  }
}
   122f4:	df 91       	pop	r29
   122f6:	cf 91       	pop	r28
   122f8:	1f 91       	pop	r17
   122fa:	0f 91       	pop	r16
   122fc:	ff 90       	pop	r15
   122fe:	ef 90       	pop	r14
   12300:	df 90       	pop	r13
   12302:	cf 90       	pop	r12
   12304:	bf 90       	pop	r11
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:359
    cnt++;
  }
  if (cnt == 6)
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    thermostat_program_set_week(program_id, interval_id, week);
   12306:	0c 94 1d 91 	jmp	0x1223a	; 0x1223a <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:361
  }
}
   1230a:	df 91       	pop	r29
   1230c:	cf 91       	pop	r28
   1230e:	1f 91       	pop	r17
   12310:	0f 91       	pop	r16
   12312:	ff 90       	pop	r15
   12314:	ef 90       	pop	r14
   12316:	df 90       	pop	r13
   12318:	cf 90       	pop	r12
   1231a:	bf 90       	pop	r11
   1231c:	08 95       	ret

0001231e <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)>:
_Z38thermostat_program_set_interval_activehhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:377
}


/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
   1231e:	9f 92       	push	r9
   12320:	af 92       	push	r10
   12322:	bf 92       	push	r11
   12324:	cf 92       	push	r12
   12326:	df 92       	push	r13
   12328:	ef 92       	push	r14
   1232a:	ff 92       	push	r15
   1232c:	0f 93       	push	r16
   1232e:	1f 93       	push	r17
   12330:	cf 93       	push	r28
   12332:	df 93       	push	r29
   12334:	00 d0       	rcall	.+0      	; 0x12336 <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)+0x18>
   12336:	1f 92       	push	r1
   12338:	1f 92       	push	r1
   1233a:	cd b7       	in	r28, 0x3d	; 61
   1233c:	de b7       	in	r29, 0x3e	; 62
   1233e:	b8 2e       	mov	r11, r24
   12340:	a6 2e       	mov	r10, r22
   12342:	94 2e       	mov	r9, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:379
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   12344:	ce 01       	movw	r24, r28
   12346:	01 96       	adiw	r24, 0x01	; 1
   12348:	6c 01       	movw	r12, r24
   1234a:	01 96       	adiw	r24, 0x01	; 1
   1234c:	7c 01       	movw	r14, r24
   1234e:	8e 01       	movw	r16, r28
   12350:	0d 5f       	subi	r16, 0xFD	; 253
   12352:	1f 4f       	sbci	r17, 0xFF	; 255
   12354:	9e 01       	movw	r18, r28
   12356:	2c 5f       	subi	r18, 0xFC	; 252
   12358:	3f 4f       	sbci	r19, 0xFF	; 255
   1235a:	ae 01       	movw	r20, r28
   1235c:	4b 5f       	subi	r20, 0xFB	; 251
   1235e:	5f 4f       	sbci	r21, 0xFF	; 255
   12360:	8b 2d       	mov	r24, r11
   12362:	0e 94 43 90 	call	0x12086	; 0x12086 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:380
  if (active != set_active)
   12366:	89 81       	ldd	r24, Y+1	; 0x01
   12368:	89 15       	cp	r24, r9
   1236a:	49 f0       	breq	.+18     	; 0x1237e <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)+0x60>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
   1236c:	c9 2c       	mov	r12, r9
   1236e:	ea 80       	ldd	r14, Y+2	; 0x02
   12370:	0b 81       	ldd	r16, Y+3	; 0x03
   12372:	2c 81       	ldd	r18, Y+4	; 0x04
   12374:	4d 81       	ldd	r20, Y+5	; 0x05
   12376:	6a 2d       	mov	r22, r10
   12378:	8b 2d       	mov	r24, r11
   1237a:	0e 94 96 90 	call	0x1212c	; 0x1212c <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:382
}
   1237e:	0f 90       	pop	r0
   12380:	0f 90       	pop	r0
   12382:	0f 90       	pop	r0
   12384:	0f 90       	pop	r0
   12386:	0f 90       	pop	r0
   12388:	df 91       	pop	r29
   1238a:	cf 91       	pop	r28
   1238c:	1f 91       	pop	r17
   1238e:	0f 91       	pop	r16
   12390:	ff 90       	pop	r15
   12392:	ef 90       	pop	r14
   12394:	df 90       	pop	r13
   12396:	cf 90       	pop	r12
   12398:	bf 90       	pop	r11
   1239a:	af 90       	pop	r10
   1239c:	9f 90       	pop	r9
   1239e:	08 95       	ret

000123a0 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)>:
_Z18thermostat_runninghPihhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:387
/***************************************************************************************************************/
///// vraci 1 pokud je termostat aktivni
/// now.dayOfTheWeek() 0..nedele; 6..sobota
uint8_t thermostat_running(uint8_t program, int16_t *threshold, uint8_t now_hour, uint8_t now_minute, uint8_t now_dayweek)
{
   123a0:	3f 92       	push	r3
   123a2:	4f 92       	push	r4
   123a4:	5f 92       	push	r5
   123a6:	6f 92       	push	r6
   123a8:	7f 92       	push	r7
   123aa:	8f 92       	push	r8
   123ac:	9f 92       	push	r9
   123ae:	af 92       	push	r10
   123b0:	bf 92       	push	r11
   123b2:	cf 92       	push	r12
   123b4:	df 92       	push	r13
   123b6:	ef 92       	push	r14
   123b8:	ff 92       	push	r15
   123ba:	0f 93       	push	r16
   123bc:	1f 93       	push	r17
   123be:	cf 93       	push	r28
   123c0:	df 93       	push	r29
   123c2:	00 d0       	rcall	.+0      	; 0x123c4 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x24>
   123c4:	1f 92       	push	r1
   123c6:	1f 92       	push	r1
   123c8:	cd b7       	in	r28, 0x3d	; 61
   123ca:	de b7       	in	r29, 0x3e	; 62
   123cc:	b8 2e       	mov	r11, r24
   123ce:	2b 01       	movw	r4, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:392
  uint8_t ret = PROG_FREE;
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
   123d0:	8f ef       	ldi	r24, 0xFF	; 255
   123d2:	b8 16       	cp	r11, r24
   123d4:	09 f4       	brne	.+2      	; 0x123d8 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x38>
   123d6:	54 c0       	rjmp	.+168    	; 0x12480 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0xe0>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:402
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
   123d8:	82 2e       	mov	r8, r18
   123da:	91 2c       	mov	r9, r1
   123dc:	9c e3       	ldi	r25, 0x3C	; 60
   123de:	49 9f       	mul	r20, r25
   123e0:	80 0c       	add	r8, r0
   123e2:	91 1c       	adc	r9, r1
   123e4:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   123e6:	81 e0       	ldi	r24, 0x01	; 1
   123e8:	90 e0       	ldi	r25, 0x00	; 0
   123ea:	02 c0       	rjmp	.+4      	; 0x123f0 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x50>
   123ec:	88 0f       	add	r24, r24
   123ee:	99 1f       	adc	r25, r25
   123f0:	0a 95       	dec	r16
   123f2:	e2 f7       	brpl	.-8      	; 0x123ec <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x4c>
   123f4:	66 24       	eor	r6, r6
   123f6:	63 94       	inc	r6
   123f8:	71 2c       	mov	r7, r1
   123fa:	89 2b       	or	r24, r25
   123fc:	11 f4       	brne	.+4      	; 0x12402 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x62>
   123fe:	71 2c       	mov	r7, r1
   12400:	61 2c       	mov	r6, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:394
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   12402:	a1 2c       	mov	r10, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:400
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
   12404:	9c e3       	ldi	r25, 0x3C	; 60
   12406:	39 2e       	mov	r3, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:396
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   12408:	fe 01       	movw	r30, r28
   1240a:	31 96       	adiw	r30, 0x01	; 1
   1240c:	6f 01       	movw	r12, r30
   1240e:	ce 01       	movw	r24, r28
   12410:	02 96       	adiw	r24, 0x02	; 2
   12412:	7c 01       	movw	r14, r24
   12414:	8e 01       	movw	r16, r28
   12416:	0d 5f       	subi	r16, 0xFD	; 253
   12418:	1f 4f       	sbci	r17, 0xFF	; 255
   1241a:	9e 01       	movw	r18, r28
   1241c:	2c 5f       	subi	r18, 0xFC	; 252
   1241e:	3f 4f       	sbci	r19, 0xFF	; 255
   12420:	ae 01       	movw	r20, r28
   12422:	4b 5f       	subi	r20, 0xFB	; 251
   12424:	5f 4f       	sbci	r21, 0xFF	; 255
   12426:	6a 2d       	mov	r22, r10
   12428:	8b 2d       	mov	r24, r11
   1242a:	0e 94 43 90 	call	0x12086	; 0x12086 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:397
      if (active == 1)
   1242e:	89 81       	ldd	r24, Y+1	; 0x01
   12430:	81 30       	cpi	r24, 0x01	; 1
   12432:	f1 f5       	brne	.+124    	; 0x124b0 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:399
      {
        week = thermostat_program_get_week(program, interval_id);
   12434:	6a 2d       	mov	r22, r10
   12436:	8b 2d       	mov	r24, r11
   12438:	0e 94 10 91 	call	0x12220	; 0x12220 <thermostat_program_get_week(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:400
        t_start = start_hour * 60 + start_min;
   1243c:	9d 81       	ldd	r25, Y+5	; 0x05
   1243e:	2c 81       	ldd	r18, Y+4	; 0x04
   12440:	30 e0       	ldi	r19, 0x00	; 0
   12442:	93 9d       	mul	r25, r3
   12444:	20 0d       	add	r18, r0
   12446:	31 1d       	adc	r19, r1
   12448:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   1244a:	82 16       	cp	r8, r18
   1244c:	93 06       	cpc	r9, r19
   1244e:	84 f1       	brlt	.+96     	; 0x124b0 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:401 (discriminator 1)
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
   12450:	9b 81       	ldd	r25, Y+3	; 0x03
   12452:	2a 81       	ldd	r18, Y+2	; 0x02
   12454:	30 e0       	ldi	r19, 0x00	; 0
   12456:	93 9d       	mul	r25, r3
   12458:	20 0d       	add	r18, r0
   1245a:	31 1d       	adc	r19, r1
   1245c:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403 (discriminator 1)
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   1245e:	82 16       	cp	r8, r18
   12460:	93 06       	cpc	r9, r19
   12462:	34 f5       	brge	.+76     	; 0x124b0 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403 (discriminator 2)
   12464:	90 e0       	ldi	r25, 0x00	; 0
   12466:	86 21       	and	r24, r6
   12468:	97 21       	and	r25, r7
   1246a:	89 2b       	or	r24, r25
   1246c:	09 f1       	breq	.+66     	; 0x124b0 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:405
        {
          *threshold = thermostat_program_get_threshold(program, interval_id);
   1246e:	6a 2d       	mov	r22, r10
   12470:	8b 2d       	mov	r24, r11
   12472:	0e 94 d2 90 	call	0x121a4	; 0x121a4 <thermostat_program_get_threshold(unsigned char, unsigned char)>
   12476:	f2 01       	movw	r30, r4
   12478:	91 83       	std	Z+1, r25	; 0x01
   1247a:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:411
          ret = PROG_ACTIVE;
          break;
        }
      }
    }
    ret = PROG_NO_INTERVAL;
   1247c:	8e ef       	ldi	r24, 0xFE	; 254
   1247e:	b8 2e       	mov	r11, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:414
  }
  return ret;
}
   12480:	8b 2d       	mov	r24, r11
   12482:	0f 90       	pop	r0
   12484:	0f 90       	pop	r0
   12486:	0f 90       	pop	r0
   12488:	0f 90       	pop	r0
   1248a:	0f 90       	pop	r0
   1248c:	df 91       	pop	r29
   1248e:	cf 91       	pop	r28
   12490:	1f 91       	pop	r17
   12492:	0f 91       	pop	r16
   12494:	ff 90       	pop	r15
   12496:	ef 90       	pop	r14
   12498:	df 90       	pop	r13
   1249a:	cf 90       	pop	r12
   1249c:	bf 90       	pop	r11
   1249e:	af 90       	pop	r10
   124a0:	9f 90       	pop	r9
   124a2:	8f 90       	pop	r8
   124a4:	7f 90       	pop	r7
   124a6:	6f 90       	pop	r6
   124a8:	5f 90       	pop	r5
   124aa:	4f 90       	pop	r4
   124ac:	3f 90       	pop	r3
   124ae:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:394 (discriminator 2)
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   124b0:	a3 94       	inc	r10
   124b2:	fb e0       	ldi	r31, 0x0B	; 11
   124b4:	af 12       	cpse	r10, r31
   124b6:	a8 cf       	rjmp	.-176    	; 0x12408 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x68>
   124b8:	e1 cf       	rjmp	.-62     	; 0x1247c <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0xdc>

000124ba <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
   124ba:	cf 93       	push	r28
   124bc:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:419
  thermostat_ring_pid_set_kp(idx, 1);
   124be:	40 e0       	ldi	r20, 0x00	; 0
   124c0:	50 e0       	ldi	r21, 0x00	; 0
   124c2:	60 e8       	ldi	r22, 0x80	; 128
   124c4:	7f e3       	ldi	r23, 0x3F	; 63
   124c6:	0e 94 a1 8f 	call	0x11f42	; 0x11f42 <thermostat_ring_pid_set_kp(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:420
  thermostat_ring_pid_set_ki(idx, 0.5);
   124ca:	40 e0       	ldi	r20, 0x00	; 0
   124cc:	50 e0       	ldi	r21, 0x00	; 0
   124ce:	60 e0       	ldi	r22, 0x00	; 0
   124d0:	7f e3       	ldi	r23, 0x3F	; 63
   124d2:	8c 2f       	mov	r24, r28
   124d4:	0e 94 b4 8f 	call	0x11f68	; 0x11f68 <thermostat_ring_pid_set_ki(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:421
  thermostat_ring_pid_set_kd(idx, 1);
   124d8:	40 e0       	ldi	r20, 0x00	; 0
   124da:	50 e0       	ldi	r21, 0x00	; 0
   124dc:	60 e8       	ldi	r22, 0x80	; 128
   124de:	7f e3       	ldi	r23, 0x3F	; 63
   124e0:	8c 2f       	mov	r24, r28
   124e2:	0e 94 c7 8f 	call	0x11f8e	; 0x11f8e <thermostat_ring_pid_set_kd(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:422
  thermostat_ring_pid_set_time(idx, 60);
   124e6:	6c e3       	ldi	r22, 0x3C	; 60
   124e8:	8c 2f       	mov	r24, r28
   124ea:	0e 94 da 8f 	call	0x11fb4	; 0x11fb4 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:423
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
   124ee:	6f ef       	ldi	r22, 0xFF	; 255
   124f0:	8c 2f       	mov	r24, r28
   124f2:	0e 94 6d 8e 	call	0x11cda	; 0x11cda <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:424
  thermostat_ring_set_mezni(idx, 220);
   124f6:	6c ed       	ldi	r22, 0xDC	; 220
   124f8:	70 e0       	ldi	r23, 0x00	; 0
   124fa:	8c 2f       	mov	r24, r28
   124fc:	0e 94 4e 8e 	call	0x11c9c	; 0x11c9c <thermostat_ring_set_mezni(unsigned char, int)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:425
  thermostat_ring_set_program_id(idx, PROG_FREE);
   12500:	6f ef       	ldi	r22, 0xFF	; 255
   12502:	8c 2f       	mov	r24, r28
   12504:	0e 94 29 8e 	call	0x11c52	; 0x11c52 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
_Z25thermostat_ring_set_statehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   12508:	8c 2f       	mov	r24, r28
   1250a:	90 e0       	ldi	r25, 0x00	; 0
   1250c:	fc 01       	movw	r30, r24
   1250e:	e8 5a       	subi	r30, 0xA8	; 168
   12510:	ff 4e       	sbci	r31, 0xEF	; 239
   12512:	10 82       	st	Z, r1
_Z25thermostat_ring_set_powerhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:33
{
  return therm_power[idx];
}
void thermostat_ring_set_power(uint8_t idx, uint8_t stav)
{
  therm_power[idx] = stav;
   12514:	8d 5a       	subi	r24, 0xAD	; 173
   12516:	9f 4e       	sbci	r25, 0xEF	; 239
   12518:	fc 01       	movw	r30, r24
   1251a:	10 82       	st	Z, r1
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:428
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
  thermostat_ring_set_mezni(idx, 220);
  thermostat_ring_set_program_id(idx, PROG_FREE);
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
   1251c:	6f ef       	ldi	r22, 0xFF	; 255
   1251e:	8c 2f       	mov	r24, r28
   12520:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <thermostat_ring_set_active(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:429
  thermostat_ring_set_output(idx, 255);
   12524:	6f ef       	ldi	r22, 0xFF	; 255
   12526:	8c 2f       	mov	r24, r28
   12528:	0e 94 09 8e 	call	0x11c12	; 0x11c12 <thermostat_ring_set_output(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:430
  thermostat_ring_set_mode(idx, 0);
   1252c:	60 e0       	ldi	r22, 0x00	; 0
   1252e:	8c 2f       	mov	r24, r28
   12530:	0e 94 7d 8e 	call	0x11cfa	; 0x11cfa <thermostat_ring_set_mode(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_name(idx, "FREE");
   12534:	60 e8       	ldi	r22, 0x80	; 128
   12536:	75 e0       	ldi	r23, 0x05	; 5
   12538:	8c 2f       	mov	r24, r28
   1253a:	0e 94 da 8d 	call	0x11bb4	; 0x11bb4 <thermostat_ring_set_name(unsigned char, char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_status_bites(idx, 0);
   1253e:	60 e0       	ldi	r22, 0x00	; 0
   12540:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:433
}
   12542:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
   12544:	0c 94 aa 8e 	jmp	0x11d54	; 0x11d54 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>

00012548 <_GLOBAL__sub_I_PID_Input>:
_GLOBAL__sub_I_PID_Input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:36
void thermostat_ring_set_power(uint8_t idx, uint8_t stav)
{
  therm_power[idx] = stav;
}

PID** array_pids = new PID*[MAX_THERMOSTAT];
   12548:	8a e0       	ldi	r24, 0x0A	; 10
   1254a:	90 e0       	ldi	r25, 0x00	; 0
   1254c:	0e 94 fd d5 	call	0x1abfa	; 0x1abfa <operator new[](unsigned int)>
   12550:	90 93 52 10 	sts	0x1052, r25	; 0x801052 <array_pids+0x1>
   12554:	80 93 51 10 	sts	0x1051, r24	; 0x801051 <array_pids>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
   12558:	08 95       	ret

0001255a <LCDWIKI_GUI::LCDWIKI_GUI()>:
_ZN11LCDWIKI_GUIC2Ev():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:787
				}
			}
		}
	}
	Print(st, x, y);
}
   1255a:	fc 01       	movw	r30, r24
   1255c:	81 e3       	ldi	r24, 0x31	; 49
   1255e:	98 e0       	ldi	r25, 0x08	; 8
   12560:	91 83       	std	Z+1, r25	; 0x01
   12562:	80 83       	st	Z, r24
   12564:	80 e0       	ldi	r24, 0x00	; 0
   12566:	98 ef       	ldi	r25, 0xF8	; 248
   12568:	91 87       	std	Z+9, r25	; 0x09
   1256a:	80 87       	std	Z+8, r24	; 0x08
   1256c:	20 ee       	ldi	r18, 0xE0	; 224
   1256e:	37 e0       	ldi	r19, 0x07	; 7
   12570:	37 83       	std	Z+7, r19	; 0x07
   12572:	26 83       	std	Z+6, r18	; 0x06
   12574:	93 87       	std	Z+11, r25	; 0x0b
   12576:	82 87       	std	Z+10, r24	; 0x0a
   12578:	81 e0       	ldi	r24, 0x01	; 1
   1257a:	84 87       	std	Z+12, r24	; 0x0c
   1257c:	15 86       	std	Z+13, r1	; 0x0d
   1257e:	08 95       	ret

00012580 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>:
_ZN11LCDWIKI_GUI14Set_Draw_colorEj():
   12580:	fc 01       	movw	r30, r24
   12582:	73 87       	std	Z+11, r23	; 0x0b
   12584:	62 87       	std	Z+10, r22	; 0x0a
   12586:	08 95       	ret

00012588 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii():
   12588:	ef 92       	push	r14
   1258a:	ff 92       	push	r15
   1258c:	0f 93       	push	r16
   1258e:	1f 93       	push	r17
   12590:	cf 93       	push	r28
   12592:	df 93       	push	r29
   12594:	e9 01       	movw	r28, r18
   12596:	79 01       	movw	r14, r18
   12598:	e6 1a       	sub	r14, r22
   1259a:	f7 0a       	sbc	r15, r23
   1259c:	97 01       	movw	r18, r14
   1259e:	2f 5f       	subi	r18, 0xFF	; 255
   125a0:	3f 4f       	sbci	r19, 0xFF	; 255
   125a2:	f8 01       	movw	r30, r16
   125a4:	e4 1b       	sub	r30, r20
   125a6:	f5 0b       	sbc	r31, r21
   125a8:	df 01       	movw	r26, r30
   125aa:	11 96       	adiw	r26, 0x01	; 1
   125ac:	37 ff       	sbrs	r19, 7
   125ae:	04 c0       	rjmp	.+8      	; 0x125b8 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)+0x30>
   125b0:	97 01       	movw	r18, r14
   125b2:	20 95       	com	r18
   125b4:	30 95       	com	r19
   125b6:	be 01       	movw	r22, r28
   125b8:	b7 ff       	sbrs	r27, 7
   125ba:	04 c0       	rjmp	.+8      	; 0x125c4 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)+0x3c>
   125bc:	df 01       	movw	r26, r30
   125be:	a0 95       	com	r26
   125c0:	b0 95       	com	r27
   125c2:	a8 01       	movw	r20, r16
   125c4:	ec 01       	movw	r28, r24
   125c6:	ea 84       	ldd	r14, Y+10	; 0x0a
   125c8:	fb 84       	ldd	r15, Y+11	; 0x0b
   125ca:	e8 81       	ld	r30, Y
   125cc:	f9 81       	ldd	r31, Y+1	; 0x01
   125ce:	04 80       	ldd	r0, Z+4	; 0x04
   125d0:	f5 81       	ldd	r31, Z+5	; 0x05
   125d2:	e0 2d       	mov	r30, r0
   125d4:	8d 01       	movw	r16, r26
   125d6:	19 95       	eicall
   125d8:	df 91       	pop	r29
   125da:	cf 91       	pop	r28
   125dc:	1f 91       	pop	r17
   125de:	0f 91       	pop	r16
   125e0:	ff 90       	pop	r15
   125e2:	ef 90       	pop	r14
   125e4:	08 95       	ret

000125e6 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>:
_ZN11LCDWIKI_GUI15Draw_Fast_VLineEiii():
   125e6:	ef 92       	push	r14
   125e8:	ff 92       	push	r15
   125ea:	0f 93       	push	r16
   125ec:	1f 93       	push	r17
   125ee:	dc 01       	movw	r26, r24
   125f0:	1a 96       	adiw	r26, 0x0a	; 10
   125f2:	ed 90       	ld	r14, X+
   125f4:	fc 90       	ld	r15, X
   125f6:	1b 97       	sbiw	r26, 0x0b	; 11
   125f8:	ed 91       	ld	r30, X+
   125fa:	fc 91       	ld	r31, X
   125fc:	04 80       	ldd	r0, Z+4	; 0x04
   125fe:	f5 81       	ldd	r31, Z+5	; 0x05
   12600:	e0 2d       	mov	r30, r0
   12602:	89 01       	movw	r16, r18
   12604:	21 e0       	ldi	r18, 0x01	; 1
   12606:	30 e0       	ldi	r19, 0x00	; 0
   12608:	19 95       	eicall
   1260a:	1f 91       	pop	r17
   1260c:	0f 91       	pop	r16
   1260e:	ff 90       	pop	r15
   12610:	ef 90       	pop	r14
   12612:	08 95       	ret

00012614 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii():
   12614:	ef 92       	push	r14
   12616:	ff 92       	push	r15
   12618:	0f 93       	push	r16
   1261a:	1f 93       	push	r17
   1261c:	dc 01       	movw	r26, r24
   1261e:	1a 96       	adiw	r26, 0x0a	; 10
   12620:	ed 90       	ld	r14, X+
   12622:	fc 90       	ld	r15, X
   12624:	1b 97       	sbiw	r26, 0x0b	; 11
   12626:	ed 91       	ld	r30, X+
   12628:	fc 91       	ld	r31, X
   1262a:	04 80       	ldd	r0, Z+4	; 0x04
   1262c:	f5 81       	ldd	r31, Z+5	; 0x05
   1262e:	e0 2d       	mov	r30, r0
   12630:	01 e0       	ldi	r16, 0x01	; 1
   12632:	10 e0       	ldi	r17, 0x00	; 0
   12634:	19 95       	eicall
   12636:	1f 91       	pop	r17
   12638:	0f 91       	pop	r16
   1263a:	ff 90       	pop	r15
   1263c:	ef 90       	pop	r14
   1263e:	08 95       	ret

00012640 <LCDWIKI_GUI::Fill_Screen(unsigned int)>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj():
   12640:	cf 92       	push	r12
   12642:	df 92       	push	r13
   12644:	ef 92       	push	r14
   12646:	ff 92       	push	r15
   12648:	0f 93       	push	r16
   1264a:	1f 93       	push	r17
   1264c:	cf 93       	push	r28
   1264e:	df 93       	push	r29
   12650:	ec 01       	movw	r28, r24
   12652:	7b 01       	movw	r14, r22
   12654:	e8 81       	ld	r30, Y
   12656:	f9 81       	ldd	r31, Y+1	; 0x01
   12658:	c4 80       	ldd	r12, Z+4	; 0x04
   1265a:	d5 80       	ldd	r13, Z+5	; 0x05
   1265c:	04 84       	ldd	r0, Z+12	; 0x0c
   1265e:	f5 85       	ldd	r31, Z+13	; 0x0d
   12660:	e0 2d       	mov	r30, r0
   12662:	19 95       	eicall
   12664:	8c 01       	movw	r16, r24
   12666:	e8 81       	ld	r30, Y
   12668:	f9 81       	ldd	r31, Y+1	; 0x01
   1266a:	06 84       	ldd	r0, Z+14	; 0x0e
   1266c:	f7 85       	ldd	r31, Z+15	; 0x0f
   1266e:	e0 2d       	mov	r30, r0
   12670:	ce 01       	movw	r24, r28
   12672:	19 95       	eicall
   12674:	9c 01       	movw	r18, r24
   12676:	50 e0       	ldi	r21, 0x00	; 0
   12678:	40 e0       	ldi	r20, 0x00	; 0
   1267a:	70 e0       	ldi	r23, 0x00	; 0
   1267c:	60 e0       	ldi	r22, 0x00	; 0
   1267e:	ce 01       	movw	r24, r28
   12680:	f6 01       	movw	r30, r12
   12682:	19 95       	eicall
   12684:	df 91       	pop	r29
   12686:	cf 91       	pop	r28
   12688:	1f 91       	pop	r17
   1268a:	0f 91       	pop	r16
   1268c:	ff 90       	pop	r15
   1268e:	ef 90       	pop	r14
   12690:	df 90       	pop	r13
   12692:	cf 90       	pop	r12
   12694:	08 95       	ret

00012696 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii():
   12696:	6f 92       	push	r6
   12698:	7f 92       	push	r7
   1269a:	8f 92       	push	r8
   1269c:	9f 92       	push	r9
   1269e:	af 92       	push	r10
   126a0:	bf 92       	push	r11
   126a2:	cf 92       	push	r12
   126a4:	df 92       	push	r13
   126a6:	ef 92       	push	r14
   126a8:	ff 92       	push	r15
   126aa:	0f 93       	push	r16
   126ac:	1f 93       	push	r17
   126ae:	cf 93       	push	r28
   126b0:	df 93       	push	r29
   126b2:	3c 01       	movw	r6, r24
   126b4:	7b 01       	movw	r14, r22
   126b6:	ea 01       	movw	r28, r20
   126b8:	49 01       	movw	r8, r18
   126ba:	26 1b       	sub	r18, r22
   126bc:	37 0b       	sbc	r19, r23
   126be:	59 01       	movw	r10, r18
   126c0:	4f ef       	ldi	r20, 0xFF	; 255
   126c2:	a4 1a       	sub	r10, r20
   126c4:	b4 0a       	sbc	r11, r20
   126c6:	c8 01       	movw	r24, r16
   126c8:	8c 1b       	sub	r24, r28
   126ca:	9d 0b       	sbc	r25, r29
   126cc:	6c 01       	movw	r12, r24
   126ce:	4f ef       	ldi	r20, 0xFF	; 255
   126d0:	c4 1a       	sub	r12, r20
   126d2:	d4 0a       	sbc	r13, r20
   126d4:	b7 fe       	sbrs	r11, 7
   126d6:	04 c0       	rjmp	.+8      	; 0x126e0 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)+0x4a>
   126d8:	59 01       	movw	r10, r18
   126da:	a0 94       	com	r10
   126dc:	b0 94       	com	r11
   126de:	74 01       	movw	r14, r8
   126e0:	d7 fe       	sbrs	r13, 7
   126e2:	04 c0       	rjmp	.+8      	; 0x126ec <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)+0x56>
   126e4:	6c 01       	movw	r12, r24
   126e6:	c0 94       	com	r12
   126e8:	d0 94       	com	r13
   126ea:	e8 01       	movw	r28, r16
   126ec:	95 01       	movw	r18, r10
   126ee:	ae 01       	movw	r20, r28
   126f0:	b7 01       	movw	r22, r14
   126f2:	c3 01       	movw	r24, r6
   126f4:	0e 94 0a 93 	call	0x12614	; 0x12614 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
   126f8:	95 01       	movw	r18, r10
   126fa:	a8 01       	movw	r20, r16
   126fc:	b7 01       	movw	r22, r14
   126fe:	c3 01       	movw	r24, r6
   12700:	0e 94 0a 93 	call	0x12614	; 0x12614 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
   12704:	96 01       	movw	r18, r12
   12706:	ae 01       	movw	r20, r28
   12708:	b7 01       	movw	r22, r14
   1270a:	c3 01       	movw	r24, r6
   1270c:	0e 94 f3 92 	call	0x125e6	; 0x125e6 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>
   12710:	96 01       	movw	r18, r12
   12712:	ae 01       	movw	r20, r28
   12714:	b4 01       	movw	r22, r8
   12716:	c3 01       	movw	r24, r6
   12718:	df 91       	pop	r29
   1271a:	cf 91       	pop	r28
   1271c:	1f 91       	pop	r17
   1271e:	0f 91       	pop	r16
   12720:	ff 90       	pop	r15
   12722:	ef 90       	pop	r14
   12724:	df 90       	pop	r13
   12726:	cf 90       	pop	r12
   12728:	bf 90       	pop	r11
   1272a:	af 90       	pop	r10
   1272c:	9f 90       	pop	r9
   1272e:	8f 90       	pop	r8
   12730:	7f 90       	pop	r7
   12732:	6f 90       	pop	r6
   12734:	0c 94 f3 92 	jmp	0x125e6	; 0x125e6 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>

00012738 <LCDWIKI_GUI::Set_Text_colour(unsigned int)>:
_ZN11LCDWIKI_GUI15Set_Text_colourEj():
   12738:	fc 01       	movw	r30, r24
   1273a:	77 83       	std	Z+7, r23	; 0x07
   1273c:	66 83       	std	Z+6, r22	; 0x06
   1273e:	08 95       	ret

00012740 <LCDWIKI_GUI::Set_Text_Back_colour(unsigned int)>:
_ZN11LCDWIKI_GUI20Set_Text_Back_colourEj():
   12740:	fc 01       	movw	r30, r24
   12742:	71 87       	std	Z+9, r23	; 0x09
   12744:	60 87       	std	Z+8, r22	; 0x08
   12746:	08 95       	ret

00012748 <LCDWIKI_GUI::Set_Text_Size(unsigned char)>:
_ZN11LCDWIKI_GUI13Set_Text_SizeEh():
   12748:	fc 01       	movw	r30, r24
   1274a:	64 87       	std	Z+12, r22	; 0x0c
   1274c:	08 95       	ret

0001274e <LCDWIKI_GUI::Set_Text_Mode(bool)>:
_ZN11LCDWIKI_GUI13Set_Text_ModeEb():
   1274e:	fc 01       	movw	r30, r24
   12750:	65 87       	std	Z+13, r22	; 0x0d
   12752:	08 95       	ret

00012754 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)>:
_ZN11LCDWIKI_GUI9Draw_CharEiihjjhb():
   12754:	2f 92       	push	r2
   12756:	3f 92       	push	r3
   12758:	4f 92       	push	r4
   1275a:	5f 92       	push	r5
   1275c:	6f 92       	push	r6
   1275e:	7f 92       	push	r7
   12760:	8f 92       	push	r8
   12762:	9f 92       	push	r9
   12764:	af 92       	push	r10
   12766:	bf 92       	push	r11
   12768:	cf 92       	push	r12
   1276a:	df 92       	push	r13
   1276c:	ef 92       	push	r14
   1276e:	ff 92       	push	r15
   12770:	0f 93       	push	r16
   12772:	1f 93       	push	r17
   12774:	cf 93       	push	r28
   12776:	df 93       	push	r29
   12778:	cd b7       	in	r28, 0x3d	; 61
   1277a:	de b7       	in	r29, 0x3e	; 62
   1277c:	2d 97       	sbiw	r28, 0x0d	; 13
   1277e:	0f b6       	in	r0, 0x3f	; 63
   12780:	f8 94       	cli
   12782:	de bf       	out	0x3e, r29	; 62
   12784:	0f be       	out	0x3f, r0	; 63
   12786:	cd bf       	out	0x3d, r28	; 61
   12788:	3c 01       	movw	r6, r24
   1278a:	4b 01       	movw	r8, r22
   1278c:	2a 01       	movw	r4, r20
   1278e:	d2 2e       	mov	r13, r18
   12790:	1c 83       	std	Y+4, r17	; 0x04
   12792:	0b 83       	std	Y+3, r16	; 0x03
   12794:	fe 82       	std	Y+6, r15	; 0x06
   12796:	ed 82       	std	Y+5, r14	; 0x05
   12798:	ca 82       	std	Y+2, r12	; 0x02
   1279a:	a9 86       	std	Y+9, r10	; 0x09
   1279c:	dc 01       	movw	r26, r24
   1279e:	ed 91       	ld	r30, X+
   127a0:	fc 91       	ld	r31, X
   127a2:	06 84       	ldd	r0, Z+14	; 0x0e
   127a4:	f7 85       	ldd	r31, Z+15	; 0x0f
   127a6:	e0 2d       	mov	r30, r0
   127a8:	19 95       	eicall
   127aa:	88 16       	cp	r8, r24
   127ac:	99 06       	cpc	r9, r25
   127ae:	0c f0       	brlt	.+2      	; 0x127b2 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x5e>
   127b0:	7a c0       	rjmp	.+244    	; 0x128a6 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   127b2:	d3 01       	movw	r26, r6
   127b4:	ed 91       	ld	r30, X+
   127b6:	fc 91       	ld	r31, X
   127b8:	04 84       	ldd	r0, Z+12	; 0x0c
   127ba:	f5 85       	ldd	r31, Z+13	; 0x0d
   127bc:	e0 2d       	mov	r30, r0
   127be:	c3 01       	movw	r24, r6
   127c0:	19 95       	eicall
   127c2:	48 16       	cp	r4, r24
   127c4:	59 06       	cpc	r5, r25
   127c6:	0c f0       	brlt	.+2      	; 0x127ca <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x76>
   127c8:	6e c0       	rjmp	.+220    	; 0x128a6 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   127ca:	3a 81       	ldd	r19, Y+2	; 0x02
   127cc:	23 2f       	mov	r18, r19
   127ce:	30 e0       	ldi	r19, 0x00	; 0
   127d0:	3d 87       	std	Y+13, r19	; 0x0d
   127d2:	2c 87       	std	Y+12, r18	; 0x0c
   127d4:	c4 01       	movw	r24, r8
   127d6:	aa 81       	ldd	r26, Y+2	; 0x02
   127d8:	46 e0       	ldi	r20, 0x06	; 6
   127da:	a4 9f       	mul	r26, r20
   127dc:	80 0d       	add	r24, r0
   127de:	91 1d       	adc	r25, r1
   127e0:	11 24       	eor	r1, r1
   127e2:	18 16       	cp	r1, r24
   127e4:	19 06       	cpc	r1, r25
   127e6:	0c f0       	brlt	.+2      	; 0x127ea <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x96>
   127e8:	5e c0       	rjmp	.+188    	; 0x128a6 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   127ea:	c9 01       	movw	r24, r18
   127ec:	23 e0       	ldi	r18, 0x03	; 3
   127ee:	88 0f       	add	r24, r24
   127f0:	99 1f       	adc	r25, r25
   127f2:	2a 95       	dec	r18
   127f4:	e1 f7       	brne	.-8      	; 0x127ee <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x9a>
   127f6:	84 0d       	add	r24, r4
   127f8:	95 1d       	adc	r25, r5
   127fa:	18 16       	cp	r1, r24
   127fc:	19 06       	cpc	r1, r25
   127fe:	0c f0       	brlt	.+2      	; 0x12802 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xae>
   12800:	52 c0       	rjmp	.+164    	; 0x128a6 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   12802:	bf ea       	ldi	r27, 0xAF	; 175
   12804:	bd 15       	cp	r27, r13
   12806:	08 f4       	brcc	.+2      	; 0x1280a <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xb6>
   12808:	d3 94       	inc	r13
   1280a:	54 01       	movw	r10, r8
   1280c:	19 82       	std	Y+1, r1	; 0x01
   1280e:	8b e1       	ldi	r24, 0x1B	; 27
   12810:	9c e5       	ldi	r25, 0x5C	; 92
   12812:	88 19       	sub	r24, r8
   12814:	99 09       	sbc	r25, r9
   12816:	9c 01       	movw	r18, r24
   12818:	45 e0       	ldi	r20, 0x05	; 5
   1281a:	d4 9e       	mul	r13, r20
   1281c:	20 0d       	add	r18, r0
   1281e:	31 1d       	adc	r19, r1
   12820:	11 24       	eor	r1, r1
   12822:	3b 87       	std	Y+11, r19	; 0x0b
   12824:	2a 87       	std	Y+10, r18	; 0x0a
   12826:	89 81       	ldd	r24, Y+1	; 0x01
   12828:	e0 e0       	ldi	r30, 0x00	; 0
   1282a:	85 30       	cpi	r24, 0x05	; 5
   1282c:	29 f0       	breq	.+10     	; 0x12838 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xe4>
   1282e:	ea 85       	ldd	r30, Y+10	; 0x0a
   12830:	fb 85       	ldd	r31, Y+11	; 0x0b
   12832:	ea 0d       	add	r30, r10
   12834:	fb 1d       	adc	r31, r11
   12836:	e4 91       	lpm	r30, Z
   12838:	62 01       	movw	r12, r4
   1283a:	31 2c       	mov	r3, r1
   1283c:	21 2c       	mov	r2, r1
   1283e:	ae 2f       	mov	r26, r30
   12840:	b0 e0       	ldi	r27, 0x00	; 0
   12842:	b8 87       	std	Y+8, r27	; 0x08
   12844:	af 83       	std	Y+7, r26	; 0x07
   12846:	e0 ff       	sbrs	r30, 0
   12848:	54 c0       	rjmp	.+168    	; 0x128f2 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x19e>
   1284a:	d3 01       	movw	r26, r6
   1284c:	ed 91       	ld	r30, X+
   1284e:	fc 91       	ld	r31, X
   12850:	ba 81       	ldd	r27, Y+2	; 0x02
   12852:	b1 30       	cpi	r27, 0x01	; 1
   12854:	09 f0       	breq	.+2      	; 0x12858 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x104>
   12856:	40 c0       	rjmp	.+128    	; 0x128d8 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x184>
   12858:	02 80       	ldd	r0, Z+2	; 0x02
   1285a:	f3 81       	ldd	r31, Z+3	; 0x03
   1285c:	e0 2d       	mov	r30, r0
   1285e:	2b 81       	ldd	r18, Y+3	; 0x03
   12860:	3c 81       	ldd	r19, Y+4	; 0x04
   12862:	a2 01       	movw	r20, r4
   12864:	42 0d       	add	r20, r2
   12866:	53 1d       	adc	r21, r3
   12868:	b5 01       	movw	r22, r10
   1286a:	c3 01       	movw	r24, r6
   1286c:	19 95       	eicall
   1286e:	ef 81       	ldd	r30, Y+7	; 0x07
   12870:	f8 85       	ldd	r31, Y+8	; 0x08
   12872:	f5 95       	asr	r31
   12874:	e7 95       	ror	r30
   12876:	2f ef       	ldi	r18, 0xFF	; 255
   12878:	22 1a       	sub	r2, r18
   1287a:	32 0a       	sbc	r3, r18
   1287c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1287e:	9d 85       	ldd	r25, Y+13	; 0x0d
   12880:	c8 0e       	add	r12, r24
   12882:	d9 1e       	adc	r13, r25
   12884:	98 e0       	ldi	r25, 0x08	; 8
   12886:	29 16       	cp	r2, r25
   12888:	31 04       	cpc	r3, r1
   1288a:	c9 f6       	brne	.-78     	; 0x1283e <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xea>
   1288c:	af ef       	ldi	r26, 0xFF	; 255
   1288e:	aa 1a       	sub	r10, r26
   12890:	ba 0a       	sbc	r11, r26
   12892:	2c 85       	ldd	r18, Y+12	; 0x0c
   12894:	3d 85       	ldd	r19, Y+13	; 0x0d
   12896:	82 0e       	add	r8, r18
   12898:	93 1e       	adc	r9, r19
   1289a:	39 81       	ldd	r19, Y+1	; 0x01
   1289c:	3f 5f       	subi	r19, 0xFF	; 255
   1289e:	39 83       	std	Y+1, r19	; 0x01
   128a0:	36 30       	cpi	r19, 0x06	; 6
   128a2:	09 f0       	breq	.+2      	; 0x128a6 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   128a4:	c0 cf       	rjmp	.-128    	; 0x12826 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xd2>
   128a6:	2d 96       	adiw	r28, 0x0d	; 13
   128a8:	0f b6       	in	r0, 0x3f	; 63
   128aa:	f8 94       	cli
   128ac:	de bf       	out	0x3e, r29	; 62
   128ae:	0f be       	out	0x3f, r0	; 63
   128b0:	cd bf       	out	0x3d, r28	; 61
   128b2:	df 91       	pop	r29
   128b4:	cf 91       	pop	r28
   128b6:	1f 91       	pop	r17
   128b8:	0f 91       	pop	r16
   128ba:	ff 90       	pop	r15
   128bc:	ef 90       	pop	r14
   128be:	df 90       	pop	r13
   128c0:	cf 90       	pop	r12
   128c2:	bf 90       	pop	r11
   128c4:	af 90       	pop	r10
   128c6:	9f 90       	pop	r9
   128c8:	8f 90       	pop	r8
   128ca:	7f 90       	pop	r7
   128cc:	6f 90       	pop	r6
   128ce:	5f 90       	pop	r5
   128d0:	4f 90       	pop	r4
   128d2:	3f 90       	pop	r3
   128d4:	2f 90       	pop	r2
   128d6:	08 95       	ret
   128d8:	04 80       	ldd	r0, Z+4	; 0x04
   128da:	f5 81       	ldd	r31, Z+5	; 0x05
   128dc:	e0 2d       	mov	r30, r0
   128de:	eb 80       	ldd	r14, Y+3	; 0x03
   128e0:	fc 80       	ldd	r15, Y+4	; 0x04
   128e2:	0c 85       	ldd	r16, Y+12	; 0x0c
   128e4:	1d 85       	ldd	r17, Y+13	; 0x0d
   128e6:	98 01       	movw	r18, r16
   128e8:	a6 01       	movw	r20, r12
   128ea:	b4 01       	movw	r22, r8
   128ec:	c3 01       	movw	r24, r6
   128ee:	19 95       	eicall
   128f0:	be cf       	rjmp	.-132    	; 0x1286e <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   128f2:	2d 81       	ldd	r18, Y+5	; 0x05
   128f4:	3e 81       	ldd	r19, Y+6	; 0x06
   128f6:	8b 81       	ldd	r24, Y+3	; 0x03
   128f8:	9c 81       	ldd	r25, Y+4	; 0x04
   128fa:	28 17       	cp	r18, r24
   128fc:	39 07       	cpc	r19, r25
   128fe:	09 f4       	brne	.+2      	; 0x12902 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x1ae>
   12900:	b6 cf       	rjmp	.-148    	; 0x1286e <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   12902:	99 85       	ldd	r25, Y+9	; 0x09
   12904:	91 11       	cpse	r25, r1
   12906:	b3 cf       	rjmp	.-154    	; 0x1286e <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   12908:	d3 01       	movw	r26, r6
   1290a:	ed 91       	ld	r30, X+
   1290c:	fc 91       	ld	r31, X
   1290e:	ba 81       	ldd	r27, Y+2	; 0x02
   12910:	b1 30       	cpi	r27, 0x01	; 1
   12912:	21 f4       	brne	.+8      	; 0x1291c <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x1c8>
   12914:	02 80       	ldd	r0, Z+2	; 0x02
   12916:	f3 81       	ldd	r31, Z+3	; 0x03
   12918:	e0 2d       	mov	r30, r0
   1291a:	a3 cf       	rjmp	.-186    	; 0x12862 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x10e>
   1291c:	04 80       	ldd	r0, Z+4	; 0x04
   1291e:	f5 81       	ldd	r31, Z+5	; 0x05
   12920:	e0 2d       	mov	r30, r0
   12922:	ed 80       	ldd	r14, Y+5	; 0x05
   12924:	fe 80       	ldd	r15, Y+6	; 0x06
   12926:	dd cf       	rjmp	.-70     	; 0x128e2 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x18e>

00012928 <LCDWIKI_GUI::write(unsigned char)>:
_ZN11LCDWIKI_GUI5writeEh():
   12928:	af 92       	push	r10
   1292a:	cf 92       	push	r12
   1292c:	ef 92       	push	r14
   1292e:	ff 92       	push	r15
   12930:	0f 93       	push	r16
   12932:	1f 93       	push	r17
   12934:	cf 93       	push	r28
   12936:	df 93       	push	r29
   12938:	ec 01       	movw	r28, r24
   1293a:	6a 30       	cpi	r22, 0x0A	; 10
   1293c:	c1 f4       	brne	.+48     	; 0x1296e <LCDWIKI_GUI::write(unsigned char)+0x46>
   1293e:	8c 85       	ldd	r24, Y+12	; 0x0c
   12940:	98 e0       	ldi	r25, 0x08	; 8
   12942:	89 9f       	mul	r24, r25
   12944:	90 01       	movw	r18, r0
   12946:	11 24       	eor	r1, r1
   12948:	8c 81       	ldd	r24, Y+4	; 0x04
   1294a:	9d 81       	ldd	r25, Y+5	; 0x05
   1294c:	82 0f       	add	r24, r18
   1294e:	93 1f       	adc	r25, r19
   12950:	9d 83       	std	Y+5, r25	; 0x05
   12952:	8c 83       	std	Y+4, r24	; 0x04
   12954:	1b 82       	std	Y+3, r1	; 0x03
   12956:	1a 82       	std	Y+2, r1	; 0x02
   12958:	81 e0       	ldi	r24, 0x01	; 1
   1295a:	90 e0       	ldi	r25, 0x00	; 0
   1295c:	df 91       	pop	r29
   1295e:	cf 91       	pop	r28
   12960:	1f 91       	pop	r17
   12962:	0f 91       	pop	r16
   12964:	ff 90       	pop	r15
   12966:	ef 90       	pop	r14
   12968:	cf 90       	pop	r12
   1296a:	af 90       	pop	r10
   1296c:	08 95       	ret
   1296e:	6d 30       	cpi	r22, 0x0D	; 13
   12970:	99 f3       	breq	.-26     	; 0x12958 <LCDWIKI_GUI::write(unsigned char)+0x30>
   12972:	26 2f       	mov	r18, r22
   12974:	e8 84       	ldd	r14, Y+8	; 0x08
   12976:	f9 84       	ldd	r15, Y+9	; 0x09
   12978:	0e 81       	ldd	r16, Y+6	; 0x06
   1297a:	1f 81       	ldd	r17, Y+7	; 0x07
   1297c:	4c 81       	ldd	r20, Y+4	; 0x04
   1297e:	5d 81       	ldd	r21, Y+5	; 0x05
   12980:	6a 81       	ldd	r22, Y+2	; 0x02
   12982:	7b 81       	ldd	r23, Y+3	; 0x03
   12984:	ad 84       	ldd	r10, Y+13	; 0x0d
   12986:	cc 84       	ldd	r12, Y+12	; 0x0c
   12988:	0e 94 aa 93 	call	0x12754	; 0x12754 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)>
   1298c:	2c 85       	ldd	r18, Y+12	; 0x0c
   1298e:	8a 81       	ldd	r24, Y+2	; 0x02
   12990:	9b 81       	ldd	r25, Y+3	; 0x03
   12992:	36 e0       	ldi	r19, 0x06	; 6
   12994:	23 9f       	mul	r18, r19
   12996:	80 0d       	add	r24, r0
   12998:	91 1d       	adc	r25, r1
   1299a:	11 24       	eor	r1, r1
   1299c:	9b 83       	std	Y+3, r25	; 0x03
   1299e:	8a 83       	std	Y+2, r24	; 0x02
   129a0:	db cf       	rjmp	.-74     	; 0x12958 <LCDWIKI_GUI::write(unsigned char)+0x30>

000129a2 <LCDWIKI_GUI::Get_Display_Width() const>:
_ZNK11LCDWIKI_GUI17Get_Display_WidthEv():
   129a2:	dc 01       	movw	r26, r24
   129a4:	ed 91       	ld	r30, X+
   129a6:	fc 91       	ld	r31, X
   129a8:	06 84       	ldd	r0, Z+14	; 0x0e
   129aa:	f7 85       	ldd	r31, Z+15	; 0x0f
   129ac:	e0 2d       	mov	r30, r0
   129ae:	19 94       	eijmp

000129b0 <LCDWIKI_GUI::Print(unsigned char*, int, int)>:
_ZN11LCDWIKI_GUI5PrintEPhii():
   129b0:	af 92       	push	r10
   129b2:	bf 92       	push	r11
   129b4:	cf 92       	push	r12
   129b6:	df 92       	push	r13
   129b8:	ef 92       	push	r14
   129ba:	ff 92       	push	r15
   129bc:	0f 93       	push	r16
   129be:	1f 93       	push	r17
   129c0:	cf 93       	push	r28
   129c2:	df 93       	push	r29
   129c4:	ec 01       	movw	r28, r24
   129c6:	6b 01       	movw	r12, r22
   129c8:	8a 01       	movw	r16, r20
   129ca:	79 01       	movw	r14, r18
   129cc:	ca 01       	movw	r24, r20
   129ce:	8e 50       	subi	r24, 0x0E	; 14
   129d0:	97 42       	sbci	r25, 0x27	; 39
   129d2:	02 97       	sbiw	r24, 0x02	; 2
   129d4:	00 f5       	brcc	.+64     	; 0x12a16 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x66>
   129d6:	fb 01       	movw	r30, r22
   129d8:	01 90       	ld	r0, Z+
   129da:	00 20       	and	r0, r0
   129dc:	e9 f7       	brne	.-6      	; 0x129d8 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x28>
   129de:	31 97       	sbiw	r30, 0x01	; 1
   129e0:	e6 1b       	sub	r30, r22
   129e2:	f7 0b       	sbc	r31, r23
   129e4:	8c 85       	ldd	r24, Y+12	; 0x0c
   129e6:	26 e0       	ldi	r18, 0x06	; 6
   129e8:	82 9f       	mul	r24, r18
   129ea:	c0 01       	movw	r24, r0
   129ec:	11 24       	eor	r1, r1
   129ee:	8e 9f       	mul	r24, r30
   129f0:	50 01       	movw	r10, r0
   129f2:	8f 9f       	mul	r24, r31
   129f4:	b0 0c       	add	r11, r0
   129f6:	9e 9f       	mul	r25, r30
   129f8:	b0 0c       	add	r11, r0
   129fa:	11 24       	eor	r1, r1
   129fc:	ce 01       	movw	r24, r28
   129fe:	0e 94 d1 94 	call	0x129a2	; 0x129a2 <LCDWIKI_GUI::Get_Display_Width() const>
   12a02:	8a 19       	sub	r24, r10
   12a04:	9b 09       	sbc	r25, r11
   12a06:	0e 30       	cpi	r16, 0x0E	; 14
   12a08:	17 42       	sbci	r17, 0x27	; 39
   12a0a:	19 f5       	brne	.+70     	; 0x12a52 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0xa2>
   12a0c:	97 fd       	sbrc	r25, 7
   12a0e:	01 96       	adiw	r24, 0x01	; 1
   12a10:	8c 01       	movw	r16, r24
   12a12:	15 95       	asr	r17
   12a14:	07 95       	ror	r16
_ZN11LCDWIKI_GUI15Set_Text_CousurEii():
   12a16:	1b 83       	std	Y+3, r17	; 0x03
   12a18:	0a 83       	std	Y+2, r16	; 0x02
   12a1a:	fd 82       	std	Y+5, r15	; 0x05
   12a1c:	ec 82       	std	Y+4, r14	; 0x04
   12a1e:	86 01       	movw	r16, r12
   12a20:	78 01       	movw	r14, r16
   12a22:	ec 18       	sub	r14, r12
   12a24:	fd 08       	sbc	r15, r13
_ZN11LCDWIKI_GUI5PrintEPhii():
   12a26:	f8 01       	movw	r30, r16
   12a28:	61 91       	ld	r22, Z+
   12a2a:	8f 01       	movw	r16, r30
   12a2c:	66 23       	and	r22, r22
   12a2e:	29 f0       	breq	.+10     	; 0x12a3a <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x8a>
   12a30:	ce 01       	movw	r24, r28
   12a32:	0e 94 94 94 	call	0x12928	; 0x12928 <LCDWIKI_GUI::write(unsigned char)>
   12a36:	89 2b       	or	r24, r25
   12a38:	99 f7       	brne	.-26     	; 0x12a20 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x70>
   12a3a:	c7 01       	movw	r24, r14
   12a3c:	df 91       	pop	r29
   12a3e:	cf 91       	pop	r28
   12a40:	1f 91       	pop	r17
   12a42:	0f 91       	pop	r16
   12a44:	ff 90       	pop	r15
   12a46:	ef 90       	pop	r14
   12a48:	df 90       	pop	r13
   12a4a:	cf 90       	pop	r12
   12a4c:	bf 90       	pop	r11
   12a4e:	af 90       	pop	r10
   12a50:	08 95       	ret
   12a52:	8c 01       	movw	r16, r24
   12a54:	01 50       	subi	r16, 0x01	; 1
   12a56:	11 09       	sbc	r17, r1
   12a58:	de cf       	rjmp	.-68     	; 0x12a16 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x66>

00012a5a <LCDWIKI_GUI::Print_String(String, int, int)>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii():
   12a5a:	fb 01       	movw	r30, r22
   12a5c:	60 81       	ld	r22, Z
   12a5e:	71 81       	ldd	r23, Z+1	; 0x01
   12a60:	0c 94 d8 94 	jmp	0x129b0	; 0x129b0 <LCDWIKI_GUI::Print(unsigned char*, int, int)>

00012a64 <LCDWIKI_GUI::Get_Display_Height() const>:
_ZNK11LCDWIKI_GUI18Get_Display_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:817
}

//get lcd height 
int16_t LCDWIKI_GUI::Get_Display_Height(void) const
{
	return Get_Height();
   12a64:	dc 01       	movw	r26, r24
   12a66:	ed 91       	ld	r30, X+
   12a68:	fc 91       	ld	r31, X
   12a6a:	04 84       	ldd	r0, Z+12	; 0x0c
   12a6c:	f5 85       	ldd	r31, Z+13	; 0x0d
   12a6e:	e0 2d       	mov	r30, r0
   12a70:	19 94       	eijmp

00012a72 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:951
		{
			Write_Cmd_Data(cmd, d);                      //static function
        }
        size -= 2 * sizeof(int16_t);
    }
}
   12a72:	0f 93       	push	r16
   12a74:	cf 93       	push	r28
   12a76:	df 93       	push	r29
   12a78:	dc 01       	movw	r26, r24
   12a7a:	01 70       	andi	r16, 0x01	; 1
   12a7c:	9e 96       	adiw	r26, 0x2e	; 46
   12a7e:	ed 91       	ld	r30, X+
   12a80:	fc 91       	ld	r31, X
   12a82:	9f 97       	sbiw	r26, 0x2f	; 47
   12a84:	80 81       	ld	r24, Z
   12a86:	da 96       	adiw	r26, 0x3a	; 58
   12a88:	9c 91       	ld	r25, X
   12a8a:	da 97       	sbiw	r26, 0x3a	; 58
   12a8c:	89 23       	and	r24, r25
   12a8e:	80 83       	st	Z, r24
   12a90:	22 23       	and	r18, r18
   12a92:	09 f4       	brne	.+2      	; 0x12a96 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
   12a94:	5b c0       	rjmp	.+182    	; 0x12b4c <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
   12a96:	58 96       	adiw	r26, 0x18	; 24
   12a98:	8d 91       	ld	r24, X+
   12a9a:	9c 91       	ld	r25, X
   12a9c:	59 97       	sbiw	r26, 0x19	; 25
   12a9e:	89 2b       	or	r24, r25
   12aa0:	49 f5       	brne	.+82     	; 0x12af4 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
   12aa2:	d0 96       	adiw	r26, 0x30	; 48
   12aa4:	ed 91       	ld	r30, X+
   12aa6:	fc 91       	ld	r31, X
   12aa8:	d1 97       	sbiw	r26, 0x31	; 49
   12aaa:	80 81       	ld	r24, Z
   12aac:	db 96       	adiw	r26, 0x3b	; 59
   12aae:	9c 91       	ld	r25, X
   12ab0:	db 97       	sbiw	r26, 0x3b	; 59
   12ab2:	89 23       	and	r24, r25
   12ab4:	80 83       	st	Z, r24
   12ab6:	12 b8       	out	0x02, r1	; 2
   12ab8:	d2 96       	adiw	r26, 0x32	; 50
   12aba:	ed 91       	ld	r30, X+
   12abc:	fc 91       	ld	r31, X
   12abe:	d3 97       	sbiw	r26, 0x33	; 51
   12ac0:	80 81       	ld	r24, Z
   12ac2:	dc 96       	adiw	r26, 0x3c	; 60
   12ac4:	9c 91       	ld	r25, X
   12ac6:	dc 97       	sbiw	r26, 0x3c	; 60
   12ac8:	89 23       	and	r24, r25
   12aca:	80 83       	st	Z, r24
   12acc:	d2 96       	adiw	r26, 0x32	; 50
   12ace:	ed 91       	ld	r30, X+
   12ad0:	fc 91       	ld	r31, X
   12ad2:	d3 97       	sbiw	r26, 0x33	; 51
   12ad4:	80 81       	ld	r24, Z
   12ad6:	d8 96       	adiw	r26, 0x38	; 56
   12ad8:	9c 91       	ld	r25, X
   12ada:	d8 97       	sbiw	r26, 0x38	; 56
   12adc:	89 2b       	or	r24, r25
   12ade:	80 83       	st	Z, r24
   12ae0:	d0 96       	adiw	r26, 0x30	; 48
   12ae2:	ed 91       	ld	r30, X+
   12ae4:	fc 91       	ld	r31, X
   12ae6:	d1 97       	sbiw	r26, 0x31	; 49
   12ae8:	80 81       	ld	r24, Z
   12aea:	d7 96       	adiw	r26, 0x37	; 55
   12aec:	9c 91       	ld	r25, X
   12aee:	d7 97       	sbiw	r26, 0x37	; 55
   12af0:	89 2b       	or	r24, r25
   12af2:	80 83       	st	Z, r24
   12af4:	d0 96       	adiw	r26, 0x30	; 48
   12af6:	ed 91       	ld	r30, X+
   12af8:	fc 91       	ld	r31, X
   12afa:	d1 97       	sbiw	r26, 0x31	; 49
   12afc:	80 81       	ld	r24, Z
   12afe:	db 96       	adiw	r26, 0x3b	; 59
   12b00:	9c 91       	ld	r25, X
   12b02:	db 97       	sbiw	r26, 0x3b	; 59
   12b04:	89 23       	and	r24, r25
   12b06:	80 83       	st	Z, r24
   12b08:	90 96       	adiw	r26, 0x20	; 32
   12b0a:	8c 91       	ld	r24, X
   12b0c:	90 97       	sbiw	r26, 0x20	; 32
   12b0e:	82 b9       	out	0x02, r24	; 2
   12b10:	d2 96       	adiw	r26, 0x32	; 50
   12b12:	ed 91       	ld	r30, X+
   12b14:	fc 91       	ld	r31, X
   12b16:	d3 97       	sbiw	r26, 0x33	; 51
   12b18:	80 81       	ld	r24, Z
   12b1a:	dc 96       	adiw	r26, 0x3c	; 60
   12b1c:	9c 91       	ld	r25, X
   12b1e:	dc 97       	sbiw	r26, 0x3c	; 60
   12b20:	89 23       	and	r24, r25
   12b22:	80 83       	st	Z, r24
   12b24:	d2 96       	adiw	r26, 0x32	; 50
   12b26:	ed 91       	ld	r30, X+
   12b28:	fc 91       	ld	r31, X
   12b2a:	d3 97       	sbiw	r26, 0x33	; 51
   12b2c:	80 81       	ld	r24, Z
   12b2e:	d8 96       	adiw	r26, 0x38	; 56
   12b30:	9c 91       	ld	r25, X
   12b32:	d8 97       	sbiw	r26, 0x38	; 56
   12b34:	89 2b       	or	r24, r25
   12b36:	80 83       	st	Z, r24
   12b38:	d0 96       	adiw	r26, 0x30	; 48
   12b3a:	ed 91       	ld	r30, X+
   12b3c:	fc 91       	ld	r31, X
   12b3e:	d1 97       	sbiw	r26, 0x31	; 49
   12b40:	80 81       	ld	r24, Z
   12b42:	d7 96       	adiw	r26, 0x37	; 55
   12b44:	9c 91       	ld	r25, X
   12b46:	d7 97       	sbiw	r26, 0x37	; 55
   12b48:	89 2b       	or	r24, r25
   12b4a:	80 83       	st	Z, r24
   12b4c:	eb 01       	movw	r28, r22
   12b4e:	ca 01       	movw	r24, r20
   12b50:	18 16       	cp	r1, r24
   12b52:	19 06       	cpc	r1, r25
   12b54:	bc f5       	brge	.+110    	; 0x12bc4 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
   12b56:	00 23       	and	r16, r16
   12b58:	91 f1       	breq	.+100    	; 0x12bbe <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
   12b5a:	fe 01       	movw	r30, r28
   12b5c:	45 91       	lpm	r20, Z+
   12b5e:	54 91       	lpm	r21, Z
   12b60:	34 2f       	mov	r19, r20
   12b62:	25 2f       	mov	r18, r21
   12b64:	22 b9       	out	0x02, r18	; 2
   12b66:	d2 96       	adiw	r26, 0x32	; 50
   12b68:	ed 91       	ld	r30, X+
   12b6a:	fc 91       	ld	r31, X
   12b6c:	d3 97       	sbiw	r26, 0x33	; 51
   12b6e:	20 81       	ld	r18, Z
   12b70:	dc 96       	adiw	r26, 0x3c	; 60
   12b72:	4c 91       	ld	r20, X
   12b74:	dc 97       	sbiw	r26, 0x3c	; 60
   12b76:	24 23       	and	r18, r20
   12b78:	20 83       	st	Z, r18
   12b7a:	d2 96       	adiw	r26, 0x32	; 50
   12b7c:	ed 91       	ld	r30, X+
   12b7e:	fc 91       	ld	r31, X
   12b80:	d3 97       	sbiw	r26, 0x33	; 51
   12b82:	20 81       	ld	r18, Z
   12b84:	d8 96       	adiw	r26, 0x38	; 56
   12b86:	4c 91       	ld	r20, X
   12b88:	d8 97       	sbiw	r26, 0x38	; 56
   12b8a:	24 2b       	or	r18, r20
   12b8c:	20 83       	st	Z, r18
   12b8e:	32 b9       	out	0x02, r19	; 2
   12b90:	d2 96       	adiw	r26, 0x32	; 50
   12b92:	ed 91       	ld	r30, X+
   12b94:	fc 91       	ld	r31, X
   12b96:	d3 97       	sbiw	r26, 0x33	; 51
   12b98:	20 81       	ld	r18, Z
   12b9a:	dc 96       	adiw	r26, 0x3c	; 60
   12b9c:	3c 91       	ld	r19, X
   12b9e:	dc 97       	sbiw	r26, 0x3c	; 60
   12ba0:	23 23       	and	r18, r19
   12ba2:	20 83       	st	Z, r18
   12ba4:	d2 96       	adiw	r26, 0x32	; 50
   12ba6:	ed 91       	ld	r30, X+
   12ba8:	fc 91       	ld	r31, X
   12baa:	d3 97       	sbiw	r26, 0x33	; 51
   12bac:	20 81       	ld	r18, Z
   12bae:	d8 96       	adiw	r26, 0x38	; 56
   12bb0:	3c 91       	ld	r19, X
   12bb2:	d8 97       	sbiw	r26, 0x38	; 56
   12bb4:	23 2b       	or	r18, r19
   12bb6:	20 83       	st	Z, r18
   12bb8:	22 96       	adiw	r28, 0x02	; 2
   12bba:	01 97       	sbiw	r24, 0x01	; 1
   12bbc:	c9 cf       	rjmp	.-110    	; 0x12b50 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
   12bbe:	38 81       	ld	r19, Y
   12bc0:	29 81       	ldd	r18, Y+1	; 0x01
   12bc2:	d0 cf       	rjmp	.-96     	; 0x12b64 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
   12bc4:	9e 96       	adiw	r26, 0x2e	; 46
   12bc6:	ed 91       	ld	r30, X+
   12bc8:	fc 91       	ld	r31, X
   12bca:	9f 97       	sbiw	r26, 0x2f	; 47
   12bcc:	80 81       	ld	r24, Z
   12bce:	d6 96       	adiw	r26, 0x36	; 54
   12bd0:	9c 91       	ld	r25, X
   12bd2:	89 2b       	or	r24, r25
   12bd4:	80 83       	st	Z, r24
   12bd6:	df 91       	pop	r29
   12bd8:	cf 91       	pop	r28
   12bda:	0f 91       	pop	r16
   12bdc:	08 95       	ret

00012bde <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
   12bde:	38 e0       	ldi	r19, 0x08	; 8
   12be0:	43 9f       	mul	r20, r19
   12be2:	c0 01       	movw	r24, r0
   12be4:	11 24       	eor	r1, r1
   12be6:	80 7e       	andi	r24, 0xE0	; 224
   12be8:	97 70       	andi	r25, 0x07	; 7
   12bea:	26 95       	lsr	r18
   12bec:	26 95       	lsr	r18
   12bee:	26 95       	lsr	r18
   12bf0:	82 2b       	or	r24, r18
   12bf2:	70 e0       	ldi	r23, 0x00	; 0
   12bf4:	76 2f       	mov	r23, r22
   12bf6:	66 27       	eor	r22, r22
   12bf8:	66 27       	eor	r22, r22
   12bfa:	78 7f       	andi	r23, 0xF8	; 248
   12bfc:	86 2b       	or	r24, r22
   12bfe:	97 2b       	or	r25, r23
   12c00:	08 95       	ret

00012c02 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
   12c02:	7f 92       	push	r7
   12c04:	8f 92       	push	r8
   12c06:	9f 92       	push	r9
   12c08:	af 92       	push	r10
   12c0a:	bf 92       	push	r11
   12c0c:	cf 92       	push	r12
   12c0e:	df 92       	push	r13
   12c10:	ef 92       	push	r14
   12c12:	ff 92       	push	r15
   12c14:	0f 93       	push	r16
   12c16:	1f 93       	push	r17
   12c18:	cf 93       	push	r28
   12c1a:	df 93       	push	r29
   12c1c:	ec 01       	movw	r28, r24
   12c1e:	59 01       	movw	r10, r18
   12c20:	98 01       	movw	r18, r16
   12c22:	0e 9d       	mul	r16, r14
   12c24:	60 01       	movw	r12, r0
   12c26:	0f 9d       	mul	r16, r15
   12c28:	d0 0c       	add	r13, r0
   12c2a:	1e 9d       	mul	r17, r14
   12c2c:	d0 0c       	add	r13, r0
   12c2e:	11 24       	eor	r1, r1
   12c30:	87 01       	movw	r16, r14
   12c32:	04 0f       	add	r16, r20
   12c34:	15 1f       	adc	r17, r21
   12c36:	01 50       	subi	r16, 0x01	; 1
   12c38:	11 09       	sbc	r17, r1
   12c3a:	26 0f       	add	r18, r22
   12c3c:	37 1f       	adc	r19, r23
   12c3e:	21 50       	subi	r18, 0x01	; 1
   12c40:	31 09       	sbc	r19, r1
   12c42:	e8 81       	ld	r30, Y
   12c44:	f9 81       	ldd	r31, Y+1	; 0x01
   12c46:	06 80       	ldd	r0, Z+6	; 0x06
   12c48:	f7 81       	ldd	r31, Z+7	; 0x07
   12c4a:	e0 2d       	mov	r30, r0
   12c4c:	19 95       	eicall
   12c4e:	77 24       	eor	r7, r7
   12c50:	7a 94       	dec	r7
   12c52:	1c 14       	cp	r1, r12
   12c54:	1d 04       	cpc	r1, r13
   12c56:	0c f0       	brlt	.+2      	; 0x12c5a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
   12c58:	0a c1       	rjmp	.+532    	; 0x12e6e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
   12c5a:	ee a5       	ldd	r30, Y+46	; 0x2e
   12c5c:	ff a5       	ldd	r31, Y+47	; 0x2f
   12c5e:	80 81       	ld	r24, Z
   12c60:	9a ad       	ldd	r25, Y+58	; 0x3a
   12c62:	89 23       	and	r24, r25
   12c64:	80 83       	st	Z, r24
   12c66:	e8 a9       	ldd	r30, Y+48	; 0x30
   12c68:	f9 a9       	ldd	r31, Y+49	; 0x31
   12c6a:	80 81       	ld	r24, Z
   12c6c:	9b ad       	ldd	r25, Y+59	; 0x3b
   12c6e:	89 23       	and	r24, r25
   12c70:	80 83       	st	Z, r24
   12c72:	9a a1       	ldd	r25, Y+34	; 0x22
   12c74:	8b a1       	ldd	r24, Y+35	; 0x23
   12c76:	82 b9       	out	0x02, r24	; 2
   12c78:	ea a9       	ldd	r30, Y+50	; 0x32
   12c7a:	fb a9       	ldd	r31, Y+51	; 0x33
   12c7c:	80 81       	ld	r24, Z
   12c7e:	2c ad       	ldd	r18, Y+60	; 0x3c
   12c80:	82 23       	and	r24, r18
   12c82:	80 83       	st	Z, r24
   12c84:	ea a9       	ldd	r30, Y+50	; 0x32
   12c86:	fb a9       	ldd	r31, Y+51	; 0x33
   12c88:	80 81       	ld	r24, Z
   12c8a:	28 ad       	ldd	r18, Y+56	; 0x38
   12c8c:	82 2b       	or	r24, r18
   12c8e:	80 83       	st	Z, r24
   12c90:	92 b9       	out	0x02, r25	; 2
   12c92:	ea a9       	ldd	r30, Y+50	; 0x32
   12c94:	fb a9       	ldd	r31, Y+51	; 0x33
   12c96:	80 81       	ld	r24, Z
   12c98:	9c ad       	ldd	r25, Y+60	; 0x3c
   12c9a:	89 23       	and	r24, r25
   12c9c:	80 83       	st	Z, r24
   12c9e:	ea a9       	ldd	r30, Y+50	; 0x32
   12ca0:	fb a9       	ldd	r31, Y+51	; 0x33
   12ca2:	80 81       	ld	r24, Z
   12ca4:	98 ad       	ldd	r25, Y+56	; 0x38
   12ca6:	89 2b       	or	r24, r25
   12ca8:	80 83       	st	Z, r24
   12caa:	e8 a9       	ldd	r30, Y+48	; 0x30
   12cac:	f9 a9       	ldd	r31, Y+49	; 0x31
   12cae:	80 81       	ld	r24, Z
   12cb0:	9f a9       	ldd	r25, Y+55	; 0x37
   12cb2:	89 2b       	or	r24, r25
   12cb4:	80 83       	st	Z, r24
   12cb6:	81 b1       	in	r24, 0x01	; 1
   12cb8:	11 b8       	out	0x01, r1	; 1
   12cba:	88 8d       	ldd	r24, Y+24	; 0x18
   12cbc:	99 8d       	ldd	r25, Y+25	; 0x19
   12cbe:	89 2b       	or	r24, r25
   12cc0:	09 f0       	breq	.+2      	; 0x12cc4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
   12cc2:	67 c0       	rjmp	.+206    	; 0x12d92 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
   12cc4:	f5 01       	movw	r30, r10
   12cc6:	c6 01       	movw	r24, r12
   12cc8:	42 e0       	ldi	r20, 0x02	; 2
   12cca:	50 e0       	ldi	r21, 0x00	; 0
   12ccc:	ac a9       	ldd	r26, Y+52	; 0x34
   12cce:	bd a9       	ldd	r27, Y+53	; 0x35
   12cd0:	2c 91       	ld	r18, X
   12cd2:	3d ad       	ldd	r19, Y+61	; 0x3d
   12cd4:	23 23       	and	r18, r19
   12cd6:	2c 93       	st	X, r18
   12cd8:	20 b1       	in	r18, 0x00	; 0
   12cda:	ac a9       	ldd	r26, Y+52	; 0x34
   12cdc:	bd a9       	ldd	r27, Y+53	; 0x35
   12cde:	2c 91       	ld	r18, X
   12ce0:	39 ad       	ldd	r19, Y+57	; 0x39
   12ce2:	23 2b       	or	r18, r19
   12ce4:	2c 93       	st	X, r18
   12ce6:	ac a9       	ldd	r26, Y+52	; 0x34
   12ce8:	bd a9       	ldd	r27, Y+53	; 0x35
   12cea:	2c 91       	ld	r18, X
   12cec:	3d ad       	ldd	r19, Y+61	; 0x3d
   12cee:	23 23       	and	r18, r19
   12cf0:	2c 93       	st	X, r18
   12cf2:	20 b1       	in	r18, 0x00	; 0
   12cf4:	ac a9       	ldd	r26, Y+52	; 0x34
   12cf6:	bd a9       	ldd	r27, Y+53	; 0x35
   12cf8:	2c 91       	ld	r18, X
   12cfa:	39 ad       	ldd	r19, Y+57	; 0x39
   12cfc:	23 2b       	or	r18, r19
   12cfe:	2c 93       	st	X, r18
   12d00:	ac a9       	ldd	r26, Y+52	; 0x34
   12d02:	bd a9       	ldd	r27, Y+53	; 0x35
   12d04:	2c 91       	ld	r18, X
   12d06:	3d ad       	ldd	r19, Y+61	; 0x3d
   12d08:	23 23       	and	r18, r19
   12d0a:	2c 93       	st	X, r18
   12d0c:	20 b1       	in	r18, 0x00	; 0
   12d0e:	ac a9       	ldd	r26, Y+52	; 0x34
   12d10:	bd a9       	ldd	r27, Y+53	; 0x35
   12d12:	3c 91       	ld	r19, X
   12d14:	69 ad       	ldd	r22, Y+57	; 0x39
   12d16:	36 2b       	or	r19, r22
   12d18:	3c 93       	st	X, r19
   12d1a:	ac a9       	ldd	r26, Y+52	; 0x34
   12d1c:	bd a9       	ldd	r27, Y+53	; 0x35
   12d1e:	3c 91       	ld	r19, X
   12d20:	6d ad       	ldd	r22, Y+61	; 0x3d
   12d22:	36 23       	and	r19, r22
   12d24:	3c 93       	st	X, r19
   12d26:	60 b1       	in	r22, 0x00	; 0
   12d28:	ac a9       	ldd	r26, Y+52	; 0x34
   12d2a:	bd a9       	ldd	r27, Y+53	; 0x35
   12d2c:	3c 91       	ld	r19, X
   12d2e:	79 ad       	ldd	r23, Y+57	; 0x39
   12d30:	37 2b       	or	r19, r23
   12d32:	3c 93       	st	X, r19
   12d34:	41 30       	cpi	r20, 0x01	; 1
   12d36:	51 05       	cpc	r21, r1
   12d38:	49 f5       	brne	.+82     	; 0x12d8c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
   12d3a:	32 2f       	mov	r19, r18
   12d3c:	26 2f       	mov	r18, r22
   12d3e:	21 93       	st	Z+, r18
   12d40:	31 93       	st	Z+, r19
   12d42:	01 97       	sbiw	r24, 0x01	; 1
   12d44:	09 f0       	breq	.+2      	; 0x12d48 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
   12d46:	c0 cf       	rjmp	.-128    	; 0x12cc8 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
   12d48:	cc 0c       	add	r12, r12
   12d4a:	dd 1c       	adc	r13, r13
   12d4c:	ac 0c       	add	r10, r12
   12d4e:	bd 1c       	adc	r11, r13
   12d50:	0c 89       	ldd	r16, Y+20	; 0x14
   12d52:	1d 89       	ldd	r17, Y+21	; 0x15
   12d54:	01 50       	subi	r16, 0x01	; 1
   12d56:	11 09       	sbc	r17, r1
   12d58:	2a 89       	ldd	r18, Y+18	; 0x12
   12d5a:	3b 89       	ldd	r19, Y+19	; 0x13
   12d5c:	21 50       	subi	r18, 0x01	; 1
   12d5e:	31 09       	sbc	r19, r1
   12d60:	e8 81       	ld	r30, Y
   12d62:	f9 81       	ldd	r31, Y+1	; 0x01
   12d64:	06 80       	ldd	r0, Z+6	; 0x06
   12d66:	f7 81       	ldd	r31, Z+7	; 0x07
   12d68:	e0 2d       	mov	r30, r0
   12d6a:	50 e0       	ldi	r21, 0x00	; 0
   12d6c:	40 e0       	ldi	r20, 0x00	; 0
   12d6e:	70 e0       	ldi	r23, 0x00	; 0
   12d70:	60 e0       	ldi	r22, 0x00	; 0
   12d72:	ce 01       	movw	r24, r28
   12d74:	19 95       	eicall
   12d76:	ee a5       	ldd	r30, Y+46	; 0x2e
   12d78:	ff a5       	ldd	r31, Y+47	; 0x2f
   12d7a:	80 81       	ld	r24, Z
   12d7c:	9e a9       	ldd	r25, Y+54	; 0x36
   12d7e:	89 2b       	or	r24, r25
   12d80:	80 83       	st	Z, r24
   12d82:	81 b1       	in	r24, 0x01	; 1
   12d84:	71 b8       	out	0x01, r7	; 1
   12d86:	d1 2c       	mov	r13, r1
   12d88:	c1 2c       	mov	r12, r1
   12d8a:	63 cf       	rjmp	.-314    	; 0x12c52 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
   12d8c:	41 e0       	ldi	r20, 0x01	; 1
   12d8e:	50 e0       	ldi	r21, 0x00	; 0
   12d90:	9d cf       	rjmp	.-198    	; 0x12ccc <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
   12d92:	ec a9       	ldd	r30, Y+52	; 0x34
   12d94:	fd a9       	ldd	r31, Y+53	; 0x35
   12d96:	80 81       	ld	r24, Z
   12d98:	9d ad       	ldd	r25, Y+61	; 0x3d
   12d9a:	89 23       	and	r24, r25
   12d9c:	80 83       	st	Z, r24
   12d9e:	80 b1       	in	r24, 0x00	; 0
   12da0:	ec a9       	ldd	r30, Y+52	; 0x34
   12da2:	fd a9       	ldd	r31, Y+53	; 0x35
   12da4:	80 81       	ld	r24, Z
   12da6:	99 ad       	ldd	r25, Y+57	; 0x39
   12da8:	89 2b       	or	r24, r25
   12daa:	80 83       	st	Z, r24
   12dac:	75 01       	movw	r14, r10
   12dae:	86 01       	movw	r16, r12
   12db0:	8c a5       	ldd	r24, Y+44	; 0x2c
   12db2:	9d a5       	ldd	r25, Y+45	; 0x2d
   12db4:	81 30       	cpi	r24, 0x01	; 1
   12db6:	91 05       	cpc	r25, r1
   12db8:	d9 f5       	brne	.+118    	; 0x12e30 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
   12dba:	ec a9       	ldd	r30, Y+52	; 0x34
   12dbc:	fd a9       	ldd	r31, Y+53	; 0x35
   12dbe:	80 81       	ld	r24, Z
   12dc0:	9d ad       	ldd	r25, Y+61	; 0x3d
   12dc2:	89 23       	and	r24, r25
   12dc4:	80 83       	st	Z, r24
   12dc6:	60 b1       	in	r22, 0x00	; 0
   12dc8:	ec a9       	ldd	r30, Y+52	; 0x34
   12dca:	fd a9       	ldd	r31, Y+53	; 0x35
   12dcc:	80 81       	ld	r24, Z
   12dce:	99 ad       	ldd	r25, Y+57	; 0x39
   12dd0:	89 2b       	or	r24, r25
   12dd2:	80 83       	st	Z, r24
   12dd4:	ec a9       	ldd	r30, Y+52	; 0x34
   12dd6:	fd a9       	ldd	r31, Y+53	; 0x35
   12dd8:	80 81       	ld	r24, Z
   12dda:	9d ad       	ldd	r25, Y+61	; 0x3d
   12ddc:	89 23       	and	r24, r25
   12dde:	80 83       	st	Z, r24
   12de0:	40 b1       	in	r20, 0x00	; 0
   12de2:	ec a9       	ldd	r30, Y+52	; 0x34
   12de4:	fd a9       	ldd	r31, Y+53	; 0x35
   12de6:	80 81       	ld	r24, Z
   12de8:	99 ad       	ldd	r25, Y+57	; 0x39
   12dea:	89 2b       	or	r24, r25
   12dec:	80 83       	st	Z, r24
   12dee:	ec a9       	ldd	r30, Y+52	; 0x34
   12df0:	fd a9       	ldd	r31, Y+53	; 0x35
   12df2:	80 81       	ld	r24, Z
   12df4:	9d ad       	ldd	r25, Y+61	; 0x3d
   12df6:	89 23       	and	r24, r25
   12df8:	80 83       	st	Z, r24
   12dfa:	20 b1       	in	r18, 0x00	; 0
   12dfc:	ec a9       	ldd	r30, Y+52	; 0x34
   12dfe:	fd a9       	ldd	r31, Y+53	; 0x35
   12e00:	80 81       	ld	r24, Z
   12e02:	99 ad       	ldd	r25, Y+57	; 0x39
   12e04:	89 2b       	or	r24, r25
   12e06:	80 83       	st	Z, r24
   12e08:	e8 81       	ld	r30, Y
   12e0a:	f9 81       	ldd	r31, Y+1	; 0x01
   12e0c:	01 90       	ld	r0, Z+
   12e0e:	f0 81       	ld	r31, Z
   12e10:	e0 2d       	mov	r30, r0
   12e12:	ce 01       	movw	r24, r28
   12e14:	19 95       	eicall
   12e16:	4c 01       	movw	r8, r24
   12e18:	f7 01       	movw	r30, r14
   12e1a:	81 92       	st	Z+, r8
   12e1c:	91 92       	st	Z+, r9
   12e1e:	7f 01       	movw	r14, r30
   12e20:	01 50       	subi	r16, 0x01	; 1
   12e22:	11 09       	sbc	r17, r1
   12e24:	29 f6       	brne	.-118    	; 0x12db0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
   12e26:	cc 0c       	add	r12, r12
   12e28:	dd 1c       	adc	r13, r13
   12e2a:	ac 0c       	add	r10, r12
   12e2c:	bd 1c       	adc	r11, r13
   12e2e:	a3 cf       	rjmp	.-186    	; 0x12d76 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
   12e30:	89 2b       	or	r24, r25
   12e32:	91 f7       	brne	.-28     	; 0x12e18 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
   12e34:	ec a9       	ldd	r30, Y+52	; 0x34
   12e36:	fd a9       	ldd	r31, Y+53	; 0x35
   12e38:	80 81       	ld	r24, Z
   12e3a:	9d ad       	ldd	r25, Y+61	; 0x3d
   12e3c:	89 23       	and	r24, r25
   12e3e:	80 83       	st	Z, r24
   12e40:	80 b0       	in	r8, 0x00	; 0
   12e42:	ec a9       	ldd	r30, Y+52	; 0x34
   12e44:	fd a9       	ldd	r31, Y+53	; 0x35
   12e46:	80 81       	ld	r24, Z
   12e48:	99 ad       	ldd	r25, Y+57	; 0x39
   12e4a:	89 2b       	or	r24, r25
   12e4c:	80 83       	st	Z, r24
   12e4e:	ec a9       	ldd	r30, Y+52	; 0x34
   12e50:	fd a9       	ldd	r31, Y+53	; 0x35
   12e52:	80 81       	ld	r24, Z
   12e54:	9d ad       	ldd	r25, Y+61	; 0x3d
   12e56:	89 23       	and	r24, r25
   12e58:	80 83       	st	Z, r24
   12e5a:	90 b1       	in	r25, 0x00	; 0
   12e5c:	ec a9       	ldd	r30, Y+52	; 0x34
   12e5e:	fd a9       	ldd	r31, Y+53	; 0x35
   12e60:	80 81       	ld	r24, Z
   12e62:	29 ad       	ldd	r18, Y+57	; 0x39
   12e64:	82 2b       	or	r24, r18
   12e66:	80 83       	st	Z, r24
   12e68:	98 2c       	mov	r9, r8
   12e6a:	89 2e       	mov	r8, r25
   12e6c:	d5 cf       	rjmp	.-86     	; 0x12e18 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
   12e6e:	90 e0       	ldi	r25, 0x00	; 0
   12e70:	80 e0       	ldi	r24, 0x00	; 0
   12e72:	df 91       	pop	r29
   12e74:	cf 91       	pop	r28
   12e76:	1f 91       	pop	r17
   12e78:	0f 91       	pop	r16
   12e7a:	ff 90       	pop	r15
   12e7c:	ef 90       	pop	r14
   12e7e:	df 90       	pop	r13
   12e80:	cf 90       	pop	r12
   12e82:	bf 90       	pop	r11
   12e84:	af 90       	pop	r10
   12e86:	9f 90       	pop	r9
   12e88:	8f 90       	pop	r8
   12e8a:	7f 90       	pop	r7
   12e8c:	08 95       	ret

00012e8e <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
   12e8e:	fc 01       	movw	r30, r24
   12e90:	82 89       	ldd	r24, Z+18	; 0x12
   12e92:	93 89       	ldd	r25, Z+19	; 0x13
   12e94:	08 95       	ret

00012e96 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
   12e96:	fc 01       	movw	r30, r24
   12e98:	84 89       	ldd	r24, Z+20	; 0x14
   12e9a:	95 89       	ldd	r25, Z+21	; 0x15
   12e9c:	08 95       	ret

00012e9e <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
   12e9e:	af 92       	push	r10
   12ea0:	bf 92       	push	r11
   12ea2:	cf 92       	push	r12
   12ea4:	df 92       	push	r13
   12ea6:	ef 92       	push	r14
   12ea8:	ff 92       	push	r15
   12eaa:	0f 93       	push	r16
   12eac:	1f 93       	push	r17
   12eae:	cf 93       	push	r28
   12eb0:	df 93       	push	r29
   12eb2:	77 fd       	sbrc	r23, 7
   12eb4:	75 c0       	rjmp	.+234    	; 0x12fa0 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   12eb6:	57 fd       	sbrc	r21, 7
   12eb8:	73 c0       	rjmp	.+230    	; 0x12fa0 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   12eba:	c3 2e       	mov	r12, r19
   12ebc:	d2 2e       	mov	r13, r18
   12ebe:	5a 01       	movw	r10, r20
   12ec0:	7b 01       	movw	r14, r22
   12ec2:	ec 01       	movw	r28, r24
   12ec4:	e8 81       	ld	r30, Y
   12ec6:	f9 81       	ldd	r31, Y+1	; 0x01
   12ec8:	06 84       	ldd	r0, Z+14	; 0x0e
   12eca:	f7 85       	ldd	r31, Z+15	; 0x0f
   12ecc:	e0 2d       	mov	r30, r0
   12ece:	19 95       	eicall
   12ed0:	8e 15       	cp	r24, r14
   12ed2:	9f 05       	cpc	r25, r15
   12ed4:	0c f4       	brge	.+2      	; 0x12ed8 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
   12ed6:	64 c0       	rjmp	.+200    	; 0x12fa0 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   12ed8:	e8 81       	ld	r30, Y
   12eda:	f9 81       	ldd	r31, Y+1	; 0x01
   12edc:	04 84       	ldd	r0, Z+12	; 0x0c
   12ede:	f5 85       	ldd	r31, Z+13	; 0x0d
   12ee0:	e0 2d       	mov	r30, r0
   12ee2:	ce 01       	movw	r24, r28
   12ee4:	19 95       	eicall
   12ee6:	8a 15       	cp	r24, r10
   12ee8:	9b 05       	cpc	r25, r11
   12eea:	0c f4       	brge	.+2      	; 0x12eee <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
   12eec:	59 c0       	rjmp	.+178    	; 0x12fa0 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   12eee:	e8 81       	ld	r30, Y
   12ef0:	f9 81       	ldd	r31, Y+1	; 0x01
   12ef2:	06 80       	ldd	r0, Z+6	; 0x06
   12ef4:	f7 81       	ldd	r31, Z+7	; 0x07
   12ef6:	e0 2d       	mov	r30, r0
   12ef8:	85 01       	movw	r16, r10
   12efa:	97 01       	movw	r18, r14
   12efc:	a5 01       	movw	r20, r10
   12efe:	b7 01       	movw	r22, r14
   12f00:	ce 01       	movw	r24, r28
   12f02:	19 95       	eicall
   12f04:	ee a5       	ldd	r30, Y+46	; 0x2e
   12f06:	ff a5       	ldd	r31, Y+47	; 0x2f
   12f08:	80 81       	ld	r24, Z
   12f0a:	9a ad       	ldd	r25, Y+58	; 0x3a
   12f0c:	89 23       	and	r24, r25
   12f0e:	80 83       	st	Z, r24
   12f10:	98 a1       	ldd	r25, Y+32	; 0x20
   12f12:	29 a1       	ldd	r18, Y+33	; 0x21
   12f14:	e8 a9       	ldd	r30, Y+48	; 0x30
   12f16:	f9 a9       	ldd	r31, Y+49	; 0x31
   12f18:	80 81       	ld	r24, Z
   12f1a:	3b ad       	ldd	r19, Y+59	; 0x3b
   12f1c:	83 23       	and	r24, r19
   12f1e:	80 83       	st	Z, r24
   12f20:	22 b9       	out	0x02, r18	; 2
   12f22:	ea a9       	ldd	r30, Y+50	; 0x32
   12f24:	fb a9       	ldd	r31, Y+51	; 0x33
   12f26:	80 81       	ld	r24, Z
   12f28:	2c ad       	ldd	r18, Y+60	; 0x3c
   12f2a:	82 23       	and	r24, r18
   12f2c:	80 83       	st	Z, r24
   12f2e:	ea a9       	ldd	r30, Y+50	; 0x32
   12f30:	fb a9       	ldd	r31, Y+51	; 0x33
   12f32:	80 81       	ld	r24, Z
   12f34:	28 ad       	ldd	r18, Y+56	; 0x38
   12f36:	82 2b       	or	r24, r18
   12f38:	80 83       	st	Z, r24
   12f3a:	92 b9       	out	0x02, r25	; 2
   12f3c:	ea a9       	ldd	r30, Y+50	; 0x32
   12f3e:	fb a9       	ldd	r31, Y+51	; 0x33
   12f40:	80 81       	ld	r24, Z
   12f42:	9c ad       	ldd	r25, Y+60	; 0x3c
   12f44:	89 23       	and	r24, r25
   12f46:	80 83       	st	Z, r24
   12f48:	ea a9       	ldd	r30, Y+50	; 0x32
   12f4a:	fb a9       	ldd	r31, Y+51	; 0x33
   12f4c:	80 81       	ld	r24, Z
   12f4e:	98 ad       	ldd	r25, Y+56	; 0x38
   12f50:	89 2b       	or	r24, r25
   12f52:	80 83       	st	Z, r24
   12f54:	e8 a9       	ldd	r30, Y+48	; 0x30
   12f56:	f9 a9       	ldd	r31, Y+49	; 0x31
   12f58:	80 81       	ld	r24, Z
   12f5a:	9f a9       	ldd	r25, Y+55	; 0x37
   12f5c:	89 2b       	or	r24, r25
   12f5e:	80 83       	st	Z, r24
   12f60:	c2 b8       	out	0x02, r12	; 2
   12f62:	ea a9       	ldd	r30, Y+50	; 0x32
   12f64:	fb a9       	ldd	r31, Y+51	; 0x33
   12f66:	80 81       	ld	r24, Z
   12f68:	9c ad       	ldd	r25, Y+60	; 0x3c
   12f6a:	89 23       	and	r24, r25
   12f6c:	80 83       	st	Z, r24
   12f6e:	ea a9       	ldd	r30, Y+50	; 0x32
   12f70:	fb a9       	ldd	r31, Y+51	; 0x33
   12f72:	80 81       	ld	r24, Z
   12f74:	98 ad       	ldd	r25, Y+56	; 0x38
   12f76:	89 2b       	or	r24, r25
   12f78:	80 83       	st	Z, r24
   12f7a:	d2 b8       	out	0x02, r13	; 2
   12f7c:	ea a9       	ldd	r30, Y+50	; 0x32
   12f7e:	fb a9       	ldd	r31, Y+51	; 0x33
   12f80:	80 81       	ld	r24, Z
   12f82:	9c ad       	ldd	r25, Y+60	; 0x3c
   12f84:	89 23       	and	r24, r25
   12f86:	80 83       	st	Z, r24
   12f88:	ea a9       	ldd	r30, Y+50	; 0x32
   12f8a:	fb a9       	ldd	r31, Y+51	; 0x33
   12f8c:	80 81       	ld	r24, Z
   12f8e:	98 ad       	ldd	r25, Y+56	; 0x38
   12f90:	89 2b       	or	r24, r25
   12f92:	80 83       	st	Z, r24
   12f94:	ee a5       	ldd	r30, Y+46	; 0x2e
   12f96:	ff a5       	ldd	r31, Y+47	; 0x2f
   12f98:	80 81       	ld	r24, Z
   12f9a:	9e a9       	ldd	r25, Y+54	; 0x36
   12f9c:	89 2b       	or	r24, r25
   12f9e:	80 83       	st	Z, r24
   12fa0:	df 91       	pop	r29
   12fa2:	cf 91       	pop	r28
   12fa4:	1f 91       	pop	r17
   12fa6:	0f 91       	pop	r16
   12fa8:	ff 90       	pop	r15
   12faa:	ef 90       	pop	r14
   12fac:	df 90       	pop	r13
   12fae:	cf 90       	pop	r12
   12fb0:	bf 90       	pop	r11
   12fb2:	af 90       	pop	r10
   12fb4:	08 95       	ret

00012fb6 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBVC2Ejhhhhh():
   12fb6:	9f 92       	push	r9
   12fb8:	af 92       	push	r10
   12fba:	bf 92       	push	r11
   12fbc:	cf 92       	push	r12
   12fbe:	df 92       	push	r13
   12fc0:	ef 92       	push	r14
   12fc2:	ff 92       	push	r15
   12fc4:	0f 93       	push	r16
   12fc6:	1f 93       	push	r17
   12fc8:	cf 93       	push	r28
   12fca:	df 93       	push	r29
   12fcc:	ec 01       	movw	r28, r24
   12fce:	5b 01       	movw	r10, r22
   12fd0:	14 2f       	mov	r17, r20
   12fd2:	d2 2e       	mov	r13, r18
   12fd4:	9e 2c       	mov	r9, r14
   12fd6:	0e 94 ad 92 	call	0x1255a	; 0x1255a <LCDWIKI_GUI::LCDWIKI_GUI()>
   12fda:	8b e4       	ldi	r24, 0x4B	; 75
   12fdc:	98 e0       	ldi	r25, 0x08	; 8
   12fde:	99 83       	std	Y+1, r25	; 0x01
   12fe0:	88 83       	st	Y, r24
   12fe2:	ce ae       	std	Y+62, r12	; 0x3e
   12fe4:	61 2f       	mov	r22, r17
   12fe6:	70 e0       	ldi	r23, 0x00	; 0
   12fe8:	fb 01       	movw	r30, r22
   12fea:	ef 57       	subi	r30, 0x7F	; 127
   12fec:	fc 49       	sbci	r31, 0x9C	; 156
   12fee:	e4 91       	lpm	r30, Z
   12ff0:	f0 e0       	ldi	r31, 0x00	; 0
   12ff2:	ee 0f       	add	r30, r30
   12ff4:	ff 1f       	adc	r31, r31
   12ff6:	e9 53       	subi	r30, 0x39	; 57
   12ff8:	fc 49       	sbci	r31, 0x9C	; 156
   12ffa:	a5 91       	lpm	r26, Z+
   12ffc:	b4 91       	lpm	r27, Z
   12ffe:	bf a7       	std	Y+47, r27	; 0x2f
   13000:	ae a7       	std	Y+46, r26	; 0x2e
   13002:	4d 2d       	mov	r20, r13
   13004:	50 e0       	ldi	r21, 0x00	; 0
   13006:	fa 01       	movw	r30, r20
   13008:	ef 57       	subi	r30, 0x7F	; 127
   1300a:	fc 49       	sbci	r31, 0x9C	; 156
   1300c:	e4 91       	lpm	r30, Z
   1300e:	f0 e0       	ldi	r31, 0x00	; 0
   13010:	ee 0f       	add	r30, r30
   13012:	ff 1f       	adc	r31, r31
   13014:	e9 53       	subi	r30, 0x39	; 57
   13016:	fc 49       	sbci	r31, 0x9C	; 156
   13018:	85 91       	lpm	r24, Z+
   1301a:	94 91       	lpm	r25, Z
   1301c:	99 ab       	std	Y+49, r25	; 0x31
   1301e:	88 ab       	std	Y+48, r24	; 0x30
   13020:	20 2f       	mov	r18, r16
   13022:	30 e0       	ldi	r19, 0x00	; 0
   13024:	f9 01       	movw	r30, r18
   13026:	ef 57       	subi	r30, 0x7F	; 127
   13028:	fc 49       	sbci	r31, 0x9C	; 156
   1302a:	e4 91       	lpm	r30, Z
   1302c:	f0 e0       	ldi	r31, 0x00	; 0
   1302e:	ee 0f       	add	r30, r30
   13030:	ff 1f       	adc	r31, r31
   13032:	e9 53       	subi	r30, 0x39	; 57
   13034:	fc 49       	sbci	r31, 0x9C	; 156
   13036:	85 91       	lpm	r24, Z+
   13038:	94 91       	lpm	r25, Z
   1303a:	9b ab       	std	Y+51, r25	; 0x33
   1303c:	8a ab       	std	Y+50, r24	; 0x32
   1303e:	8e 2d       	mov	r24, r14
   13040:	90 e0       	ldi	r25, 0x00	; 0
   13042:	fc 01       	movw	r30, r24
   13044:	ef 57       	subi	r30, 0x7F	; 127
   13046:	fc 49       	sbci	r31, 0x9C	; 156
   13048:	e4 91       	lpm	r30, Z
   1304a:	f0 e0       	ldi	r31, 0x00	; 0
   1304c:	ee 0f       	add	r30, r30
   1304e:	ff 1f       	adc	r31, r31
   13050:	e9 53       	subi	r30, 0x39	; 57
   13052:	fc 49       	sbci	r31, 0x9C	; 156
   13054:	e5 90       	lpm	r14, Z+
   13056:	f4 90       	lpm	r15, Z
   13058:	fd aa       	std	Y+53, r15	; 0x35
   1305a:	ec aa       	std	Y+52, r14	; 0x34
   1305c:	65 5b       	subi	r22, 0xB5	; 181
   1305e:	7c 49       	sbci	r23, 0x9C	; 156
   13060:	fb 01       	movw	r30, r22
   13062:	64 91       	lpm	r22, Z
   13064:	6e ab       	std	Y+54, r22	; 0x36
   13066:	45 5b       	subi	r20, 0xB5	; 181
   13068:	5c 49       	sbci	r21, 0x9C	; 156
   1306a:	fa 01       	movw	r30, r20
   1306c:	44 91       	lpm	r20, Z
   1306e:	4f ab       	std	Y+55, r20	; 0x37
   13070:	25 5b       	subi	r18, 0xB5	; 181
   13072:	3c 49       	sbci	r19, 0x9C	; 156
   13074:	f9 01       	movw	r30, r18
   13076:	24 91       	lpm	r18, Z
   13078:	28 af       	std	Y+56, r18	; 0x38
   1307a:	85 5b       	subi	r24, 0xB5	; 181
   1307c:	9c 49       	sbci	r25, 0x9C	; 156
   1307e:	fc 01       	movw	r30, r24
   13080:	84 91       	lpm	r24, Z
   13082:	89 af       	std	Y+57, r24	; 0x39
   13084:	96 2f       	mov	r25, r22
   13086:	90 95       	com	r25
   13088:	9a af       	std	Y+58, r25	; 0x3a
   1308a:	e4 2f       	mov	r30, r20
   1308c:	e0 95       	com	r30
   1308e:	eb af       	std	Y+59, r30	; 0x3b
   13090:	20 95       	com	r18
   13092:	2c af       	std	Y+60, r18	; 0x3c
   13094:	80 95       	com	r24
   13096:	8d af       	std	Y+61, r24	; 0x3d
   13098:	ec 91       	ld	r30, X
   1309a:	6e 2b       	or	r22, r30
   1309c:	6c 93       	st	X, r22
   1309e:	e8 a9       	ldd	r30, Y+48	; 0x30
   130a0:	f9 a9       	ldd	r31, Y+49	; 0x31
   130a2:	80 81       	ld	r24, Z
   130a4:	9f a9       	ldd	r25, Y+55	; 0x37
   130a6:	89 2b       	or	r24, r25
   130a8:	80 83       	st	Z, r24
   130aa:	ea a9       	ldd	r30, Y+50	; 0x32
   130ac:	fb a9       	ldd	r31, Y+51	; 0x33
   130ae:	80 81       	ld	r24, Z
   130b0:	98 ad       	ldd	r25, Y+56	; 0x38
   130b2:	89 2b       	or	r24, r25
   130b4:	80 83       	st	Z, r24
   130b6:	ec a9       	ldd	r30, Y+52	; 0x34
   130b8:	fd a9       	ldd	r31, Y+53	; 0x35
   130ba:	80 81       	ld	r24, Z
   130bc:	99 ad       	ldd	r25, Y+57	; 0x39
   130be:	89 2b       	or	r24, r25
   130c0:	80 83       	st	Z, r24
   130c2:	61 e0       	ldi	r22, 0x01	; 1
   130c4:	81 2f       	mov	r24, r17
   130c6:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   130ca:	61 e0       	ldi	r22, 0x01	; 1
   130cc:	8d 2d       	mov	r24, r13
   130ce:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   130d2:	61 e0       	ldi	r22, 0x01	; 1
   130d4:	80 2f       	mov	r24, r16
   130d6:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   130da:	61 e0       	ldi	r22, 0x01	; 1
   130dc:	89 2d       	mov	r24, r9
   130de:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   130e2:	cc 20       	and	r12, r12
   130e4:	41 f0       	breq	.+16     	; 0x130f6 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x140>
   130e6:	61 e0       	ldi	r22, 0x01	; 1
   130e8:	8c 2d       	mov	r24, r12
   130ea:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
   130ee:	61 e0       	ldi	r22, 0x01	; 1
   130f0:	8c 2d       	mov	r24, r12
   130f2:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   130f6:	1f 8a       	std	Y+23, r1	; 0x17
   130f8:	1e 8a       	std	Y+22, r1	; 0x16
   130fa:	86 e0       	ldi	r24, 0x06	; 6
   130fc:	8a 9d       	mul	r24, r10
   130fe:	f0 01       	movw	r30, r0
   13100:	8b 9d       	mul	r24, r11
   13102:	f0 0d       	add	r31, r0
   13104:	11 24       	eor	r1, r1
   13106:	e6 5c       	subi	r30, 0xC6	; 198
   13108:	fd 4f       	sbci	r31, 0xFD	; 253
   1310a:	80 81       	ld	r24, Z
   1310c:	91 81       	ldd	r25, Z+1	; 0x01
   1310e:	9b 8f       	std	Y+27, r25	; 0x1b
   13110:	8a 8f       	std	Y+26, r24	; 0x1a
   13112:	82 81       	ldd	r24, Z+2	; 0x02
   13114:	93 81       	ldd	r25, Z+3	; 0x03
   13116:	9f 87       	std	Y+15, r25	; 0x0f
   13118:	8e 87       	std	Y+14, r24	; 0x0e
   1311a:	84 81       	ldd	r24, Z+4	; 0x04
   1311c:	95 81       	ldd	r25, Z+5	; 0x05
   1311e:	99 8b       	std	Y+17, r25	; 0x11
   13120:	88 8b       	std	Y+16, r24	; 0x10
   13122:	81 b1       	in	r24, 0x01	; 1
   13124:	8f ef       	ldi	r24, 0xFF	; 255
   13126:	81 b9       	out	0x01, r24	; 1
   13128:	8e 85       	ldd	r24, Y+14	; 0x0e
   1312a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1312c:	9b 8b       	std	Y+19, r25	; 0x13
   1312e:	8a 8b       	std	Y+18, r24	; 0x12
   13130:	88 89       	ldd	r24, Y+16	; 0x10
   13132:	99 89       	ldd	r25, Y+17	; 0x11
   13134:	9d 8b       	std	Y+21, r25	; 0x15
   13136:	8c 8b       	std	Y+20, r24	; 0x14
   13138:	df 91       	pop	r29
   1313a:	cf 91       	pop	r28
   1313c:	1f 91       	pop	r17
   1313e:	0f 91       	pop	r16
   13140:	ff 90       	pop	r15
   13142:	ef 90       	pop	r14
   13144:	df 90       	pop	r13
   13146:	cf 90       	pop	r12
   13148:	bf 90       	pop	r11
   1314a:	af 90       	pop	r10
   1314c:	9f 90       	pop	r9
   1314e:	08 95       	ret

00013150 <LCDWIKI_KBV::reset()>:
_ZN11LCDWIKI_KBV5resetEv():
   13150:	cf 93       	push	r28
   13152:	df 93       	push	r29
   13154:	ec 01       	movw	r28, r24
   13156:	ee a5       	ldd	r30, Y+46	; 0x2e
   13158:	ff a5       	ldd	r31, Y+47	; 0x2f
   1315a:	80 81       	ld	r24, Z
   1315c:	9e a9       	ldd	r25, Y+54	; 0x36
   1315e:	89 2b       	or	r24, r25
   13160:	80 83       	st	Z, r24
   13162:	ec a9       	ldd	r30, Y+52	; 0x34
   13164:	fd a9       	ldd	r31, Y+53	; 0x35
   13166:	80 81       	ld	r24, Z
   13168:	99 ad       	ldd	r25, Y+57	; 0x39
   1316a:	89 2b       	or	r24, r25
   1316c:	80 83       	st	Z, r24
   1316e:	ea a9       	ldd	r30, Y+50	; 0x32
   13170:	fb a9       	ldd	r31, Y+51	; 0x33
   13172:	80 81       	ld	r24, Z
   13174:	98 ad       	ldd	r25, Y+56	; 0x38
   13176:	89 2b       	or	r24, r25
   13178:	80 83       	st	Z, r24
   1317a:	8e ad       	ldd	r24, Y+62	; 0x3e
   1317c:	88 23       	and	r24, r24
   1317e:	69 f0       	breq	.+26     	; 0x1319a <LCDWIKI_KBV::reset()+0x4a>
   13180:	60 e0       	ldi	r22, 0x00	; 0
   13182:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
   13186:	62 e0       	ldi	r22, 0x02	; 2
   13188:	70 e0       	ldi	r23, 0x00	; 0
   1318a:	80 e0       	ldi	r24, 0x00	; 0
   1318c:	90 e0       	ldi	r25, 0x00	; 0
   1318e:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
   13192:	61 e0       	ldi	r22, 0x01	; 1
   13194:	8e ad       	ldd	r24, Y+62	; 0x3e
   13196:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
   1319a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1319c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1319e:	80 81       	ld	r24, Z
   131a0:	9a ad       	ldd	r25, Y+58	; 0x3a
   131a2:	89 23       	and	r24, r25
   131a4:	80 83       	st	Z, r24
   131a6:	e8 a9       	ldd	r30, Y+48	; 0x30
   131a8:	f9 a9       	ldd	r31, Y+49	; 0x31
   131aa:	80 81       	ld	r24, Z
   131ac:	9b ad       	ldd	r25, Y+59	; 0x3b
   131ae:	89 23       	and	r24, r25
   131b0:	80 83       	st	Z, r24
   131b2:	12 b8       	out	0x02, r1	; 2
   131b4:	ea a9       	ldd	r30, Y+50	; 0x32
   131b6:	fb a9       	ldd	r31, Y+51	; 0x33
   131b8:	80 81       	ld	r24, Z
   131ba:	9c ad       	ldd	r25, Y+60	; 0x3c
   131bc:	89 23       	and	r24, r25
   131be:	80 83       	st	Z, r24
   131c0:	ea a9       	ldd	r30, Y+50	; 0x32
   131c2:	fb a9       	ldd	r31, Y+51	; 0x33
   131c4:	80 81       	ld	r24, Z
   131c6:	98 ad       	ldd	r25, Y+56	; 0x38
   131c8:	89 2b       	or	r24, r25
   131ca:	80 83       	st	Z, r24
   131cc:	83 e0       	ldi	r24, 0x03	; 3
   131ce:	ea a9       	ldd	r30, Y+50	; 0x32
   131d0:	fb a9       	ldd	r31, Y+51	; 0x33
   131d2:	90 81       	ld	r25, Z
   131d4:	2c ad       	ldd	r18, Y+60	; 0x3c
   131d6:	92 23       	and	r25, r18
   131d8:	90 83       	st	Z, r25
   131da:	ea a9       	ldd	r30, Y+50	; 0x32
   131dc:	fb a9       	ldd	r31, Y+51	; 0x33
   131de:	90 81       	ld	r25, Z
   131e0:	28 ad       	ldd	r18, Y+56	; 0x38
   131e2:	92 2b       	or	r25, r18
   131e4:	90 83       	st	Z, r25
   131e6:	81 50       	subi	r24, 0x01	; 1
   131e8:	91 f7       	brne	.-28     	; 0x131ce <LCDWIKI_KBV::reset()+0x7e>
   131ea:	ee a5       	ldd	r30, Y+46	; 0x2e
   131ec:	ff a5       	ldd	r31, Y+47	; 0x2f
   131ee:	80 81       	ld	r24, Z
   131f0:	9e a9       	ldd	r25, Y+54	; 0x36
   131f2:	89 2b       	or	r24, r25
   131f4:	80 83       	st	Z, r24
   131f6:	df 91       	pop	r29
   131f8:	cf 91       	pop	r28
   131fa:	08 95       	ret

000131fc <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
   131fc:	cf 93       	push	r28
   131fe:	df 93       	push	r29
   13200:	fc 01       	movw	r30, r24
   13202:	a6 a5       	ldd	r26, Z+46	; 0x2e
   13204:	b7 a5       	ldd	r27, Z+47	; 0x2f
   13206:	8c 91       	ld	r24, X
   13208:	92 ad       	ldd	r25, Z+58	; 0x3a
   1320a:	89 23       	and	r24, r25
   1320c:	8c 93       	st	X, r24
   1320e:	a0 a9       	ldd	r26, Z+48	; 0x30
   13210:	b1 a9       	ldd	r27, Z+49	; 0x31
   13212:	8c 91       	ld	r24, X
   13214:	93 ad       	ldd	r25, Z+59	; 0x3b
   13216:	89 23       	and	r24, r25
   13218:	8c 93       	st	X, r24
   1321a:	72 b9       	out	0x02, r23	; 2
   1321c:	a2 a9       	ldd	r26, Z+50	; 0x32
   1321e:	b3 a9       	ldd	r27, Z+51	; 0x33
   13220:	8c 91       	ld	r24, X
   13222:	94 ad       	ldd	r25, Z+60	; 0x3c
   13224:	89 23       	and	r24, r25
   13226:	8c 93       	st	X, r24
   13228:	a2 a9       	ldd	r26, Z+50	; 0x32
   1322a:	b3 a9       	ldd	r27, Z+51	; 0x33
   1322c:	8c 91       	ld	r24, X
   1322e:	90 ad       	ldd	r25, Z+56	; 0x38
   13230:	89 2b       	or	r24, r25
   13232:	8c 93       	st	X, r24
   13234:	62 b9       	out	0x02, r22	; 2
   13236:	a2 a9       	ldd	r26, Z+50	; 0x32
   13238:	b3 a9       	ldd	r27, Z+51	; 0x33
   1323a:	8c 91       	ld	r24, X
   1323c:	94 ad       	ldd	r25, Z+60	; 0x3c
   1323e:	89 23       	and	r24, r25
   13240:	8c 93       	st	X, r24
   13242:	a2 a9       	ldd	r26, Z+50	; 0x32
   13244:	b3 a9       	ldd	r27, Z+51	; 0x33
   13246:	8c 91       	ld	r24, X
   13248:	90 ad       	ldd	r25, Z+56	; 0x38
   1324a:	89 2b       	or	r24, r25
   1324c:	8c 93       	st	X, r24
   1324e:	a0 a9       	ldd	r26, Z+48	; 0x30
   13250:	b1 a9       	ldd	r27, Z+49	; 0x31
   13252:	8c 91       	ld	r24, X
   13254:	97 a9       	ldd	r25, Z+55	; 0x37
   13256:	89 2b       	or	r24, r25
   13258:	8c 93       	st	X, r24
   1325a:	da 01       	movw	r26, r20
   1325c:	9f ef       	ldi	r25, 0xFF	; 255
   1325e:	92 0f       	add	r25, r18
   13260:	12 16       	cp	r1, r18
   13262:	0c f0       	brlt	.+2      	; 0x13266 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
   13264:	3f c0       	rjmp	.+126    	; 0x132e4 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
   13266:	8d 91       	ld	r24, X+
   13268:	82 b9       	out	0x02, r24	; 2
   1326a:	c2 a9       	ldd	r28, Z+50	; 0x32
   1326c:	d3 a9       	ldd	r29, Z+51	; 0x33
   1326e:	88 81       	ld	r24, Y
   13270:	24 ad       	ldd	r18, Z+60	; 0x3c
   13272:	82 23       	and	r24, r18
   13274:	88 83       	st	Y, r24
   13276:	c2 a9       	ldd	r28, Z+50	; 0x32
   13278:	d3 a9       	ldd	r29, Z+51	; 0x33
   1327a:	88 81       	ld	r24, Y
   1327c:	20 ad       	ldd	r18, Z+56	; 0x38
   1327e:	82 2b       	or	r24, r18
   13280:	88 83       	st	Y, r24
   13282:	99 23       	and	r25, r25
   13284:	69 f1       	breq	.+90     	; 0x132e0 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   13286:	20 8d       	ldd	r18, Z+24	; 0x18
   13288:	31 8d       	ldd	r19, Z+25	; 0x19
   1328a:	21 30       	cpi	r18, 0x01	; 1
   1328c:	31 05       	cpc	r19, r1
   1328e:	41 f5       	brne	.+80     	; 0x132e0 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   13290:	6f 5f       	subi	r22, 0xFF	; 255
   13292:	7f 4f       	sbci	r23, 0xFF	; 255
   13294:	c0 a9       	ldd	r28, Z+48	; 0x30
   13296:	d1 a9       	ldd	r29, Z+49	; 0x31
   13298:	88 81       	ld	r24, Y
   1329a:	23 ad       	ldd	r18, Z+59	; 0x3b
   1329c:	82 23       	and	r24, r18
   1329e:	88 83       	st	Y, r24
   132a0:	72 b9       	out	0x02, r23	; 2
   132a2:	c2 a9       	ldd	r28, Z+50	; 0x32
   132a4:	d3 a9       	ldd	r29, Z+51	; 0x33
   132a6:	88 81       	ld	r24, Y
   132a8:	24 ad       	ldd	r18, Z+60	; 0x3c
   132aa:	82 23       	and	r24, r18
   132ac:	88 83       	st	Y, r24
   132ae:	c2 a9       	ldd	r28, Z+50	; 0x32
   132b0:	d3 a9       	ldd	r29, Z+51	; 0x33
   132b2:	88 81       	ld	r24, Y
   132b4:	20 ad       	ldd	r18, Z+56	; 0x38
   132b6:	82 2b       	or	r24, r18
   132b8:	88 83       	st	Y, r24
   132ba:	62 b9       	out	0x02, r22	; 2
   132bc:	c2 a9       	ldd	r28, Z+50	; 0x32
   132be:	d3 a9       	ldd	r29, Z+51	; 0x33
   132c0:	88 81       	ld	r24, Y
   132c2:	24 ad       	ldd	r18, Z+60	; 0x3c
   132c4:	82 23       	and	r24, r18
   132c6:	88 83       	st	Y, r24
   132c8:	c2 a9       	ldd	r28, Z+50	; 0x32
   132ca:	d3 a9       	ldd	r29, Z+51	; 0x33
   132cc:	88 81       	ld	r24, Y
   132ce:	20 ad       	ldd	r18, Z+56	; 0x38
   132d0:	82 2b       	or	r24, r18
   132d2:	88 83       	st	Y, r24
   132d4:	c0 a9       	ldd	r28, Z+48	; 0x30
   132d6:	d1 a9       	ldd	r29, Z+49	; 0x31
   132d8:	88 81       	ld	r24, Y
   132da:	27 a9       	ldd	r18, Z+55	; 0x37
   132dc:	82 2b       	or	r24, r18
   132de:	88 83       	st	Y, r24
   132e0:	29 2f       	mov	r18, r25
   132e2:	bc cf       	rjmp	.-136    	; 0x1325c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
   132e4:	a6 a5       	ldd	r26, Z+46	; 0x2e
   132e6:	b7 a5       	ldd	r27, Z+47	; 0x2f
   132e8:	8c 91       	ld	r24, X
   132ea:	96 a9       	ldd	r25, Z+54	; 0x36
   132ec:	89 2b       	or	r24, r25
   132ee:	8c 93       	st	X, r24
   132f0:	df 91       	pop	r29
   132f2:	cf 91       	pop	r28
   132f4:	08 95       	ret

000132f6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
   132f6:	af 92       	push	r10
   132f8:	bf 92       	push	r11
   132fa:	cf 92       	push	r12
   132fc:	df 92       	push	r13
   132fe:	ef 92       	push	r14
   13300:	ff 92       	push	r15
   13302:	0f 93       	push	r16
   13304:	1f 93       	push	r17
   13306:	cf 93       	push	r28
   13308:	df 93       	push	r29
   1330a:	00 d0       	rcall	.+0      	; 0x1330c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
   1330c:	00 d0       	rcall	.+0      	; 0x1330e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
   1330e:	1f 92       	push	r1
   13310:	1f 92       	push	r1
   13312:	cd b7       	in	r28, 0x3d	; 61
   13314:	de b7       	in	r29, 0x3e	; 62
   13316:	7c 01       	movw	r14, r24
   13318:	dc 01       	movw	r26, r24
   1331a:	9e 96       	adiw	r26, 0x2e	; 46
   1331c:	ed 91       	ld	r30, X+
   1331e:	fc 91       	ld	r31, X
   13320:	9f 97       	sbiw	r26, 0x2f	; 47
   13322:	80 81       	ld	r24, Z
   13324:	da 96       	adiw	r26, 0x3a	; 58
   13326:	9c 91       	ld	r25, X
   13328:	da 97       	sbiw	r26, 0x3a	; 58
   1332a:	89 23       	and	r24, r25
   1332c:	80 83       	st	Z, r24
   1332e:	58 96       	adiw	r26, 0x18	; 24
   13330:	8d 91       	ld	r24, X+
   13332:	9c 91       	ld	r25, X
   13334:	59 97       	sbiw	r26, 0x19	; 25
   13336:	00 97       	sbiw	r24, 0x00	; 0
   13338:	09 f0       	breq	.+2      	; 0x1333c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
   1333a:	44 c3       	rjmp	.+1672   	; 0x139c4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
   1333c:	56 96       	adiw	r26, 0x16	; 22
   1333e:	8d 91       	ld	r24, X+
   13340:	9c 91       	ld	r25, X
   13342:	57 97       	sbiw	r26, 0x17	; 23
   13344:	82 30       	cpi	r24, 0x02	; 2
   13346:	91 05       	cpc	r25, r1
   13348:	09 f4       	brne	.+2      	; 0x1334c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
   1334a:	0b c3       	rjmp	.+1558   	; 0x13962 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
   1334c:	83 30       	cpi	r24, 0x03	; 3
   1334e:	91 05       	cpc	r25, r1
   13350:	09 f4       	brne	.+2      	; 0x13354 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
   13352:	23 c3       	rjmp	.+1606   	; 0x1399a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
   13354:	01 97       	sbiw	r24, 0x01	; 1
   13356:	09 f0       	breq	.+2      	; 0x1335a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
   13358:	32 c3       	rjmp	.+1636   	; 0x139be <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
   1335a:	1e 96       	adiw	r26, 0x0e	; 14
   1335c:	0d 90       	ld	r0, X+
   1335e:	bc 91       	ld	r27, X
   13360:	a0 2d       	mov	r26, r0
   13362:	68 01       	movw	r12, r16
   13364:	c0 94       	com	r12
   13366:	d0 94       	com	r13
   13368:	40 95       	com	r20
   1336a:	50 95       	com	r21
   1336c:	fa 01       	movw	r30, r20
   1336e:	ea 0f       	add	r30, r26
   13370:	fb 1f       	adc	r31, r27
   13372:	cb 01       	movw	r24, r22
   13374:	89 01       	movw	r16, r18
   13376:	9f 01       	movw	r18, r30
   13378:	ab 01       	movw	r20, r22
   1337a:	b6 01       	movw	r22, r12
   1337c:	6a 0f       	add	r22, r26
   1337e:	7b 1f       	adc	r23, r27
   13380:	d7 01       	movw	r26, r14
   13382:	d0 96       	adiw	r26, 0x30	; 48
   13384:	cd 90       	ld	r12, X+
   13386:	dc 90       	ld	r13, X
   13388:	d6 01       	movw	r26, r12
   1338a:	bc 90       	ld	r11, X
   1338c:	d7 01       	movw	r26, r14
   1338e:	db 96       	adiw	r26, 0x3b	; 59
   13390:	ac 90       	ld	r10, X
   13392:	ba 20       	and	r11, r10
   13394:	d6 01       	movw	r26, r12
   13396:	bc 92       	st	X, r11
   13398:	12 b8       	out	0x02, r1	; 2
   1339a:	d7 01       	movw	r26, r14
   1339c:	d2 96       	adiw	r26, 0x32	; 50
   1339e:	cd 90       	ld	r12, X+
   133a0:	dc 90       	ld	r13, X
   133a2:	d6 01       	movw	r26, r12
   133a4:	bc 90       	ld	r11, X
   133a6:	d7 01       	movw	r26, r14
   133a8:	dc 96       	adiw	r26, 0x3c	; 60
   133aa:	ac 90       	ld	r10, X
   133ac:	ba 20       	and	r11, r10
   133ae:	d6 01       	movw	r26, r12
   133b0:	bc 92       	st	X, r11
   133b2:	d7 01       	movw	r26, r14
   133b4:	d2 96       	adiw	r26, 0x32	; 50
   133b6:	cd 90       	ld	r12, X+
   133b8:	dc 90       	ld	r13, X
   133ba:	d6 01       	movw	r26, r12
   133bc:	bc 90       	ld	r11, X
   133be:	d7 01       	movw	r26, r14
   133c0:	d8 96       	adiw	r26, 0x38	; 56
   133c2:	ac 90       	ld	r10, X
   133c4:	ba 28       	or	r11, r10
   133c6:	d6 01       	movw	r26, r12
   133c8:	bc 92       	st	X, r11
   133ca:	a0 e5       	ldi	r26, 0x50	; 80
   133cc:	a2 b9       	out	0x02, r26	; 2
   133ce:	d7 01       	movw	r26, r14
   133d0:	d2 96       	adiw	r26, 0x32	; 50
   133d2:	cd 90       	ld	r12, X+
   133d4:	dc 90       	ld	r13, X
   133d6:	d6 01       	movw	r26, r12
   133d8:	bc 90       	ld	r11, X
   133da:	d7 01       	movw	r26, r14
   133dc:	dc 96       	adiw	r26, 0x3c	; 60
   133de:	ac 90       	ld	r10, X
   133e0:	ba 20       	and	r11, r10
   133e2:	d6 01       	movw	r26, r12
   133e4:	bc 92       	st	X, r11
   133e6:	d7 01       	movw	r26, r14
   133e8:	d2 96       	adiw	r26, 0x32	; 50
   133ea:	cd 90       	ld	r12, X+
   133ec:	dc 90       	ld	r13, X
   133ee:	d6 01       	movw	r26, r12
   133f0:	bc 90       	ld	r11, X
   133f2:	d7 01       	movw	r26, r14
   133f4:	d8 96       	adiw	r26, 0x38	; 56
   133f6:	ac 90       	ld	r10, X
   133f8:	ba 28       	or	r11, r10
   133fa:	d6 01       	movw	r26, r12
   133fc:	bc 92       	st	X, r11
   133fe:	d7 01       	movw	r26, r14
   13400:	d0 96       	adiw	r26, 0x30	; 48
   13402:	cd 90       	ld	r12, X+
   13404:	dc 90       	ld	r13, X
   13406:	d6 01       	movw	r26, r12
   13408:	bc 90       	ld	r11, X
   1340a:	d7 01       	movw	r26, r14
   1340c:	d7 96       	adiw	r26, 0x37	; 55
   1340e:	ac 90       	ld	r10, X
   13410:	ba 28       	or	r11, r10
   13412:	d6 01       	movw	r26, r12
   13414:	bc 92       	st	X, r11
   13416:	72 b9       	out	0x02, r23	; 2
   13418:	d7 01       	movw	r26, r14
   1341a:	d2 96       	adiw	r26, 0x32	; 50
   1341c:	ad 90       	ld	r10, X+
   1341e:	bc 90       	ld	r11, X
   13420:	d5 01       	movw	r26, r10
   13422:	7c 91       	ld	r23, X
   13424:	d7 01       	movw	r26, r14
   13426:	dc 96       	adiw	r26, 0x3c	; 60
   13428:	dc 90       	ld	r13, X
   1342a:	7d 21       	and	r23, r13
   1342c:	d5 01       	movw	r26, r10
   1342e:	7c 93       	st	X, r23
   13430:	d7 01       	movw	r26, r14
   13432:	d2 96       	adiw	r26, 0x32	; 50
   13434:	ad 90       	ld	r10, X+
   13436:	bc 90       	ld	r11, X
   13438:	d5 01       	movw	r26, r10
   1343a:	7c 91       	ld	r23, X
   1343c:	d7 01       	movw	r26, r14
   1343e:	d8 96       	adiw	r26, 0x38	; 56
   13440:	dc 90       	ld	r13, X
   13442:	7d 29       	or	r23, r13
   13444:	d5 01       	movw	r26, r10
   13446:	7c 93       	st	X, r23
   13448:	62 b9       	out	0x02, r22	; 2
   1344a:	d7 01       	movw	r26, r14
   1344c:	d2 96       	adiw	r26, 0x32	; 50
   1344e:	cd 90       	ld	r12, X+
   13450:	dc 90       	ld	r13, X
   13452:	d6 01       	movw	r26, r12
   13454:	6c 91       	ld	r22, X
   13456:	d7 01       	movw	r26, r14
   13458:	dc 96       	adiw	r26, 0x3c	; 60
   1345a:	7c 91       	ld	r23, X
   1345c:	67 23       	and	r22, r23
   1345e:	d6 01       	movw	r26, r12
   13460:	6c 93       	st	X, r22
   13462:	d7 01       	movw	r26, r14
   13464:	d2 96       	adiw	r26, 0x32	; 50
   13466:	cd 90       	ld	r12, X+
   13468:	dc 90       	ld	r13, X
   1346a:	d6 01       	movw	r26, r12
   1346c:	6c 91       	ld	r22, X
   1346e:	d7 01       	movw	r26, r14
   13470:	d8 96       	adiw	r26, 0x38	; 56
   13472:	7c 91       	ld	r23, X
   13474:	67 2b       	or	r22, r23
   13476:	d6 01       	movw	r26, r12
   13478:	6c 93       	st	X, r22
   1347a:	d7 01       	movw	r26, r14
   1347c:	d0 96       	adiw	r26, 0x30	; 48
   1347e:	cd 90       	ld	r12, X+
   13480:	dc 90       	ld	r13, X
   13482:	d6 01       	movw	r26, r12
   13484:	6c 91       	ld	r22, X
   13486:	d7 01       	movw	r26, r14
   13488:	db 96       	adiw	r26, 0x3b	; 59
   1348a:	7c 91       	ld	r23, X
   1348c:	67 23       	and	r22, r23
   1348e:	d6 01       	movw	r26, r12
   13490:	6c 93       	st	X, r22
   13492:	12 b8       	out	0x02, r1	; 2
   13494:	d7 01       	movw	r26, r14
   13496:	d2 96       	adiw	r26, 0x32	; 50
   13498:	cd 90       	ld	r12, X+
   1349a:	dc 90       	ld	r13, X
   1349c:	d6 01       	movw	r26, r12
   1349e:	6c 91       	ld	r22, X
   134a0:	d7 01       	movw	r26, r14
   134a2:	dc 96       	adiw	r26, 0x3c	; 60
   134a4:	7c 91       	ld	r23, X
   134a6:	67 23       	and	r22, r23
   134a8:	d6 01       	movw	r26, r12
   134aa:	6c 93       	st	X, r22
   134ac:	d7 01       	movw	r26, r14
   134ae:	d2 96       	adiw	r26, 0x32	; 50
   134b0:	cd 90       	ld	r12, X+
   134b2:	dc 90       	ld	r13, X
   134b4:	d6 01       	movw	r26, r12
   134b6:	6c 91       	ld	r22, X
   134b8:	d7 01       	movw	r26, r14
   134ba:	d8 96       	adiw	r26, 0x38	; 56
   134bc:	7c 91       	ld	r23, X
   134be:	67 2b       	or	r22, r23
   134c0:	d6 01       	movw	r26, r12
   134c2:	6c 93       	st	X, r22
   134c4:	61 e5       	ldi	r22, 0x51	; 81
   134c6:	62 b9       	out	0x02, r22	; 2
   134c8:	d7 01       	movw	r26, r14
   134ca:	d2 96       	adiw	r26, 0x32	; 50
   134cc:	cd 90       	ld	r12, X+
   134ce:	dc 90       	ld	r13, X
   134d0:	d6 01       	movw	r26, r12
   134d2:	6c 91       	ld	r22, X
   134d4:	d7 01       	movw	r26, r14
   134d6:	dc 96       	adiw	r26, 0x3c	; 60
   134d8:	7c 91       	ld	r23, X
   134da:	67 23       	and	r22, r23
   134dc:	d6 01       	movw	r26, r12
   134de:	6c 93       	st	X, r22
   134e0:	d7 01       	movw	r26, r14
   134e2:	d2 96       	adiw	r26, 0x32	; 50
   134e4:	cd 90       	ld	r12, X+
   134e6:	dc 90       	ld	r13, X
   134e8:	d6 01       	movw	r26, r12
   134ea:	6c 91       	ld	r22, X
   134ec:	d7 01       	movw	r26, r14
   134ee:	d8 96       	adiw	r26, 0x38	; 56
   134f0:	7c 91       	ld	r23, X
   134f2:	67 2b       	or	r22, r23
   134f4:	d6 01       	movw	r26, r12
   134f6:	6c 93       	st	X, r22
   134f8:	d7 01       	movw	r26, r14
   134fa:	d0 96       	adiw	r26, 0x30	; 48
   134fc:	cd 90       	ld	r12, X+
   134fe:	dc 90       	ld	r13, X
   13500:	d6 01       	movw	r26, r12
   13502:	6c 91       	ld	r22, X
   13504:	d7 01       	movw	r26, r14
   13506:	d7 96       	adiw	r26, 0x37	; 55
   13508:	7c 91       	ld	r23, X
   1350a:	67 2b       	or	r22, r23
   1350c:	d6 01       	movw	r26, r12
   1350e:	6c 93       	st	X, r22
   13510:	32 b9       	out	0x02, r19	; 2
   13512:	d7 01       	movw	r26, r14
   13514:	d2 96       	adiw	r26, 0x32	; 50
   13516:	cd 90       	ld	r12, X+
   13518:	dc 90       	ld	r13, X
   1351a:	d6 01       	movw	r26, r12
   1351c:	3c 91       	ld	r19, X
   1351e:	d7 01       	movw	r26, r14
   13520:	dc 96       	adiw	r26, 0x3c	; 60
   13522:	6c 91       	ld	r22, X
   13524:	36 23       	and	r19, r22
   13526:	d6 01       	movw	r26, r12
   13528:	3c 93       	st	X, r19
   1352a:	d7 01       	movw	r26, r14
   1352c:	d2 96       	adiw	r26, 0x32	; 50
   1352e:	cd 90       	ld	r12, X+
   13530:	dc 90       	ld	r13, X
   13532:	d6 01       	movw	r26, r12
   13534:	3c 91       	ld	r19, X
   13536:	d7 01       	movw	r26, r14
   13538:	d8 96       	adiw	r26, 0x38	; 56
   1353a:	6c 91       	ld	r22, X
   1353c:	36 2b       	or	r19, r22
   1353e:	d6 01       	movw	r26, r12
   13540:	3c 93       	st	X, r19
   13542:	22 b9       	out	0x02, r18	; 2
   13544:	d7 01       	movw	r26, r14
   13546:	d2 96       	adiw	r26, 0x32	; 50
   13548:	6d 91       	ld	r22, X+
   1354a:	7c 91       	ld	r23, X
   1354c:	db 01       	movw	r26, r22
   1354e:	2c 91       	ld	r18, X
   13550:	d7 01       	movw	r26, r14
   13552:	dc 96       	adiw	r26, 0x3c	; 60
   13554:	3c 91       	ld	r19, X
   13556:	23 23       	and	r18, r19
   13558:	db 01       	movw	r26, r22
   1355a:	2c 93       	st	X, r18
   1355c:	d7 01       	movw	r26, r14
   1355e:	d2 96       	adiw	r26, 0x32	; 50
   13560:	6d 91       	ld	r22, X+
   13562:	7c 91       	ld	r23, X
   13564:	db 01       	movw	r26, r22
   13566:	2c 91       	ld	r18, X
   13568:	d7 01       	movw	r26, r14
   1356a:	d8 96       	adiw	r26, 0x38	; 56
   1356c:	3c 91       	ld	r19, X
   1356e:	23 2b       	or	r18, r19
   13570:	db 01       	movw	r26, r22
   13572:	2c 93       	st	X, r18
   13574:	d7 01       	movw	r26, r14
   13576:	d0 96       	adiw	r26, 0x30	; 48
   13578:	6d 91       	ld	r22, X+
   1357a:	7c 91       	ld	r23, X
   1357c:	db 01       	movw	r26, r22
   1357e:	2c 91       	ld	r18, X
   13580:	d7 01       	movw	r26, r14
   13582:	db 96       	adiw	r26, 0x3b	; 59
   13584:	3c 91       	ld	r19, X
   13586:	23 23       	and	r18, r19
   13588:	db 01       	movw	r26, r22
   1358a:	2c 93       	st	X, r18
   1358c:	12 b8       	out	0x02, r1	; 2
   1358e:	d7 01       	movw	r26, r14
   13590:	d2 96       	adiw	r26, 0x32	; 50
   13592:	6d 91       	ld	r22, X+
   13594:	7c 91       	ld	r23, X
   13596:	db 01       	movw	r26, r22
   13598:	2c 91       	ld	r18, X
   1359a:	d7 01       	movw	r26, r14
   1359c:	dc 96       	adiw	r26, 0x3c	; 60
   1359e:	3c 91       	ld	r19, X
   135a0:	23 23       	and	r18, r19
   135a2:	db 01       	movw	r26, r22
   135a4:	2c 93       	st	X, r18
   135a6:	d7 01       	movw	r26, r14
   135a8:	d2 96       	adiw	r26, 0x32	; 50
   135aa:	6d 91       	ld	r22, X+
   135ac:	7c 91       	ld	r23, X
   135ae:	db 01       	movw	r26, r22
   135b0:	2c 91       	ld	r18, X
   135b2:	d7 01       	movw	r26, r14
   135b4:	d8 96       	adiw	r26, 0x38	; 56
   135b6:	3c 91       	ld	r19, X
   135b8:	23 2b       	or	r18, r19
   135ba:	db 01       	movw	r26, r22
   135bc:	2c 93       	st	X, r18
   135be:	22 e5       	ldi	r18, 0x52	; 82
   135c0:	22 b9       	out	0x02, r18	; 2
   135c2:	d7 01       	movw	r26, r14
   135c4:	d2 96       	adiw	r26, 0x32	; 50
   135c6:	6d 91       	ld	r22, X+
   135c8:	7c 91       	ld	r23, X
   135ca:	db 01       	movw	r26, r22
   135cc:	2c 91       	ld	r18, X
   135ce:	d7 01       	movw	r26, r14
   135d0:	dc 96       	adiw	r26, 0x3c	; 60
   135d2:	3c 91       	ld	r19, X
   135d4:	23 23       	and	r18, r19
   135d6:	db 01       	movw	r26, r22
   135d8:	2c 93       	st	X, r18
   135da:	d7 01       	movw	r26, r14
   135dc:	d2 96       	adiw	r26, 0x32	; 50
   135de:	6d 91       	ld	r22, X+
   135e0:	7c 91       	ld	r23, X
   135e2:	db 01       	movw	r26, r22
   135e4:	2c 91       	ld	r18, X
   135e6:	d7 01       	movw	r26, r14
   135e8:	d8 96       	adiw	r26, 0x38	; 56
   135ea:	3c 91       	ld	r19, X
   135ec:	23 2b       	or	r18, r19
   135ee:	db 01       	movw	r26, r22
   135f0:	2c 93       	st	X, r18
   135f2:	d7 01       	movw	r26, r14
   135f4:	d0 96       	adiw	r26, 0x30	; 48
   135f6:	6d 91       	ld	r22, X+
   135f8:	7c 91       	ld	r23, X
   135fa:	db 01       	movw	r26, r22
   135fc:	2c 91       	ld	r18, X
   135fe:	d7 01       	movw	r26, r14
   13600:	d7 96       	adiw	r26, 0x37	; 55
   13602:	3c 91       	ld	r19, X
   13604:	23 2b       	or	r18, r19
   13606:	db 01       	movw	r26, r22
   13608:	2c 93       	st	X, r18
   1360a:	52 b9       	out	0x02, r21	; 2
   1360c:	d7 01       	movw	r26, r14
   1360e:	d2 96       	adiw	r26, 0x32	; 50
   13610:	6d 91       	ld	r22, X+
   13612:	7c 91       	ld	r23, X
   13614:	db 01       	movw	r26, r22
   13616:	2c 91       	ld	r18, X
   13618:	d7 01       	movw	r26, r14
   1361a:	dc 96       	adiw	r26, 0x3c	; 60
   1361c:	3c 91       	ld	r19, X
   1361e:	23 23       	and	r18, r19
   13620:	db 01       	movw	r26, r22
   13622:	2c 93       	st	X, r18
   13624:	d7 01       	movw	r26, r14
   13626:	d2 96       	adiw	r26, 0x32	; 50
   13628:	6d 91       	ld	r22, X+
   1362a:	7c 91       	ld	r23, X
   1362c:	db 01       	movw	r26, r22
   1362e:	2c 91       	ld	r18, X
   13630:	d7 01       	movw	r26, r14
   13632:	d8 96       	adiw	r26, 0x38	; 56
   13634:	3c 91       	ld	r19, X
   13636:	23 2b       	or	r18, r19
   13638:	db 01       	movw	r26, r22
   1363a:	2c 93       	st	X, r18
   1363c:	42 b9       	out	0x02, r20	; 2
   1363e:	d7 01       	movw	r26, r14
   13640:	d2 96       	adiw	r26, 0x32	; 50
   13642:	4d 91       	ld	r20, X+
   13644:	5c 91       	ld	r21, X
   13646:	da 01       	movw	r26, r20
   13648:	2c 91       	ld	r18, X
   1364a:	d7 01       	movw	r26, r14
   1364c:	dc 96       	adiw	r26, 0x3c	; 60
   1364e:	3c 91       	ld	r19, X
   13650:	23 23       	and	r18, r19
   13652:	da 01       	movw	r26, r20
   13654:	2c 93       	st	X, r18
   13656:	d7 01       	movw	r26, r14
   13658:	d2 96       	adiw	r26, 0x32	; 50
   1365a:	4d 91       	ld	r20, X+
   1365c:	5c 91       	ld	r21, X
   1365e:	da 01       	movw	r26, r20
   13660:	2c 91       	ld	r18, X
   13662:	d7 01       	movw	r26, r14
   13664:	d8 96       	adiw	r26, 0x38	; 56
   13666:	3c 91       	ld	r19, X
   13668:	23 2b       	or	r18, r19
   1366a:	da 01       	movw	r26, r20
   1366c:	2c 93       	st	X, r18
   1366e:	d7 01       	movw	r26, r14
   13670:	d0 96       	adiw	r26, 0x30	; 48
   13672:	4d 91       	ld	r20, X+
   13674:	5c 91       	ld	r21, X
   13676:	da 01       	movw	r26, r20
   13678:	2c 91       	ld	r18, X
   1367a:	d7 01       	movw	r26, r14
   1367c:	db 96       	adiw	r26, 0x3b	; 59
   1367e:	3c 91       	ld	r19, X
   13680:	23 23       	and	r18, r19
   13682:	da 01       	movw	r26, r20
   13684:	2c 93       	st	X, r18
   13686:	12 b8       	out	0x02, r1	; 2
   13688:	d7 01       	movw	r26, r14
   1368a:	d2 96       	adiw	r26, 0x32	; 50
   1368c:	4d 91       	ld	r20, X+
   1368e:	5c 91       	ld	r21, X
   13690:	da 01       	movw	r26, r20
   13692:	2c 91       	ld	r18, X
   13694:	d7 01       	movw	r26, r14
   13696:	dc 96       	adiw	r26, 0x3c	; 60
   13698:	3c 91       	ld	r19, X
   1369a:	23 23       	and	r18, r19
   1369c:	da 01       	movw	r26, r20
   1369e:	2c 93       	st	X, r18
   136a0:	d7 01       	movw	r26, r14
   136a2:	d2 96       	adiw	r26, 0x32	; 50
   136a4:	4d 91       	ld	r20, X+
   136a6:	5c 91       	ld	r21, X
   136a8:	da 01       	movw	r26, r20
   136aa:	2c 91       	ld	r18, X
   136ac:	d7 01       	movw	r26, r14
   136ae:	d8 96       	adiw	r26, 0x38	; 56
   136b0:	3c 91       	ld	r19, X
   136b2:	23 2b       	or	r18, r19
   136b4:	da 01       	movw	r26, r20
   136b6:	2c 93       	st	X, r18
   136b8:	23 e5       	ldi	r18, 0x53	; 83
   136ba:	22 b9       	out	0x02, r18	; 2
   136bc:	d7 01       	movw	r26, r14
   136be:	d2 96       	adiw	r26, 0x32	; 50
   136c0:	4d 91       	ld	r20, X+
   136c2:	5c 91       	ld	r21, X
   136c4:	da 01       	movw	r26, r20
   136c6:	2c 91       	ld	r18, X
   136c8:	d7 01       	movw	r26, r14
   136ca:	dc 96       	adiw	r26, 0x3c	; 60
   136cc:	3c 91       	ld	r19, X
   136ce:	23 23       	and	r18, r19
   136d0:	da 01       	movw	r26, r20
   136d2:	2c 93       	st	X, r18
   136d4:	d7 01       	movw	r26, r14
   136d6:	d2 96       	adiw	r26, 0x32	; 50
   136d8:	4d 91       	ld	r20, X+
   136da:	5c 91       	ld	r21, X
   136dc:	da 01       	movw	r26, r20
   136de:	2c 91       	ld	r18, X
   136e0:	d7 01       	movw	r26, r14
   136e2:	d8 96       	adiw	r26, 0x38	; 56
   136e4:	3c 91       	ld	r19, X
   136e6:	23 2b       	or	r18, r19
   136e8:	da 01       	movw	r26, r20
   136ea:	2c 93       	st	X, r18
   136ec:	d7 01       	movw	r26, r14
   136ee:	d0 96       	adiw	r26, 0x30	; 48
   136f0:	4d 91       	ld	r20, X+
   136f2:	5c 91       	ld	r21, X
   136f4:	da 01       	movw	r26, r20
   136f6:	2c 91       	ld	r18, X
   136f8:	d7 01       	movw	r26, r14
   136fa:	d7 96       	adiw	r26, 0x37	; 55
   136fc:	3c 91       	ld	r19, X
   136fe:	23 2b       	or	r18, r19
   13700:	da 01       	movw	r26, r20
   13702:	2c 93       	st	X, r18
   13704:	12 b9       	out	0x02, r17	; 2
   13706:	d7 01       	movw	r26, r14
   13708:	d2 96       	adiw	r26, 0x32	; 50
   1370a:	4d 91       	ld	r20, X+
   1370c:	5c 91       	ld	r21, X
   1370e:	da 01       	movw	r26, r20
   13710:	2c 91       	ld	r18, X
   13712:	d7 01       	movw	r26, r14
   13714:	dc 96       	adiw	r26, 0x3c	; 60
   13716:	3c 91       	ld	r19, X
   13718:	23 23       	and	r18, r19
   1371a:	da 01       	movw	r26, r20
   1371c:	2c 93       	st	X, r18
   1371e:	d7 01       	movw	r26, r14
   13720:	d2 96       	adiw	r26, 0x32	; 50
   13722:	4d 91       	ld	r20, X+
   13724:	5c 91       	ld	r21, X
   13726:	da 01       	movw	r26, r20
   13728:	2c 91       	ld	r18, X
   1372a:	d7 01       	movw	r26, r14
   1372c:	d8 96       	adiw	r26, 0x38	; 56
   1372e:	3c 91       	ld	r19, X
   13730:	23 2b       	or	r18, r19
   13732:	da 01       	movw	r26, r20
   13734:	2c 93       	st	X, r18
   13736:	02 b9       	out	0x02, r16	; 2
   13738:	d7 01       	movw	r26, r14
   1373a:	d2 96       	adiw	r26, 0x32	; 50
   1373c:	4d 91       	ld	r20, X+
   1373e:	5c 91       	ld	r21, X
   13740:	da 01       	movw	r26, r20
   13742:	2c 91       	ld	r18, X
   13744:	d7 01       	movw	r26, r14
   13746:	dc 96       	adiw	r26, 0x3c	; 60
   13748:	3c 91       	ld	r19, X
   1374a:	23 23       	and	r18, r19
   1374c:	da 01       	movw	r26, r20
   1374e:	2c 93       	st	X, r18
   13750:	d7 01       	movw	r26, r14
   13752:	d2 96       	adiw	r26, 0x32	; 50
   13754:	4d 91       	ld	r20, X+
   13756:	5c 91       	ld	r21, X
   13758:	da 01       	movw	r26, r20
   1375a:	2c 91       	ld	r18, X
   1375c:	d7 01       	movw	r26, r14
   1375e:	d8 96       	adiw	r26, 0x38	; 56
   13760:	3c 91       	ld	r19, X
   13762:	23 2b       	or	r18, r19
   13764:	da 01       	movw	r26, r20
   13766:	2c 93       	st	X, r18
   13768:	d7 01       	movw	r26, r14
   1376a:	d0 96       	adiw	r26, 0x30	; 48
   1376c:	4d 91       	ld	r20, X+
   1376e:	5c 91       	ld	r21, X
   13770:	da 01       	movw	r26, r20
   13772:	2c 91       	ld	r18, X
   13774:	d7 01       	movw	r26, r14
   13776:	db 96       	adiw	r26, 0x3b	; 59
   13778:	3c 91       	ld	r19, X
   1377a:	23 23       	and	r18, r19
   1377c:	da 01       	movw	r26, r20
   1377e:	2c 93       	st	X, r18
   13780:	12 b8       	out	0x02, r1	; 2
   13782:	d7 01       	movw	r26, r14
   13784:	d2 96       	adiw	r26, 0x32	; 50
   13786:	4d 91       	ld	r20, X+
   13788:	5c 91       	ld	r21, X
   1378a:	da 01       	movw	r26, r20
   1378c:	2c 91       	ld	r18, X
   1378e:	d7 01       	movw	r26, r14
   13790:	dc 96       	adiw	r26, 0x3c	; 60
   13792:	3c 91       	ld	r19, X
   13794:	23 23       	and	r18, r19
   13796:	da 01       	movw	r26, r20
   13798:	2c 93       	st	X, r18
   1379a:	d7 01       	movw	r26, r14
   1379c:	d2 96       	adiw	r26, 0x32	; 50
   1379e:	4d 91       	ld	r20, X+
   137a0:	5c 91       	ld	r21, X
   137a2:	da 01       	movw	r26, r20
   137a4:	2c 91       	ld	r18, X
   137a6:	d7 01       	movw	r26, r14
   137a8:	d8 96       	adiw	r26, 0x38	; 56
   137aa:	3c 91       	ld	r19, X
   137ac:	23 2b       	or	r18, r19
   137ae:	da 01       	movw	r26, r20
   137b0:	2c 93       	st	X, r18
   137b2:	20 e2       	ldi	r18, 0x20	; 32
   137b4:	22 b9       	out	0x02, r18	; 2
   137b6:	d7 01       	movw	r26, r14
   137b8:	d2 96       	adiw	r26, 0x32	; 50
   137ba:	4d 91       	ld	r20, X+
   137bc:	5c 91       	ld	r21, X
   137be:	da 01       	movw	r26, r20
   137c0:	2c 91       	ld	r18, X
   137c2:	d7 01       	movw	r26, r14
   137c4:	dc 96       	adiw	r26, 0x3c	; 60
   137c6:	3c 91       	ld	r19, X
   137c8:	23 23       	and	r18, r19
   137ca:	da 01       	movw	r26, r20
   137cc:	2c 93       	st	X, r18
   137ce:	d7 01       	movw	r26, r14
   137d0:	d2 96       	adiw	r26, 0x32	; 50
   137d2:	4d 91       	ld	r20, X+
   137d4:	5c 91       	ld	r21, X
   137d6:	da 01       	movw	r26, r20
   137d8:	2c 91       	ld	r18, X
   137da:	d7 01       	movw	r26, r14
   137dc:	d8 96       	adiw	r26, 0x38	; 56
   137de:	3c 91       	ld	r19, X
   137e0:	23 2b       	or	r18, r19
   137e2:	da 01       	movw	r26, r20
   137e4:	2c 93       	st	X, r18
   137e6:	d7 01       	movw	r26, r14
   137e8:	d0 96       	adiw	r26, 0x30	; 48
   137ea:	4d 91       	ld	r20, X+
   137ec:	5c 91       	ld	r21, X
   137ee:	da 01       	movw	r26, r20
   137f0:	2c 91       	ld	r18, X
   137f2:	d7 01       	movw	r26, r14
   137f4:	d7 96       	adiw	r26, 0x37	; 55
   137f6:	3c 91       	ld	r19, X
   137f8:	23 2b       	or	r18, r19
   137fa:	da 01       	movw	r26, r20
   137fc:	2c 93       	st	X, r18
   137fe:	f2 b9       	out	0x02, r31	; 2
   13800:	d7 01       	movw	r26, r14
   13802:	d2 96       	adiw	r26, 0x32	; 50
   13804:	4d 91       	ld	r20, X+
   13806:	5c 91       	ld	r21, X
   13808:	da 01       	movw	r26, r20
   1380a:	2c 91       	ld	r18, X
   1380c:	d7 01       	movw	r26, r14
   1380e:	dc 96       	adiw	r26, 0x3c	; 60
   13810:	3c 91       	ld	r19, X
   13812:	23 23       	and	r18, r19
   13814:	da 01       	movw	r26, r20
   13816:	2c 93       	st	X, r18
   13818:	d7 01       	movw	r26, r14
   1381a:	d2 96       	adiw	r26, 0x32	; 50
   1381c:	4d 91       	ld	r20, X+
   1381e:	5c 91       	ld	r21, X
   13820:	da 01       	movw	r26, r20
   13822:	2c 91       	ld	r18, X
   13824:	d7 01       	movw	r26, r14
   13826:	d8 96       	adiw	r26, 0x38	; 56
   13828:	3c 91       	ld	r19, X
   1382a:	23 2b       	or	r18, r19
   1382c:	da 01       	movw	r26, r20
   1382e:	2c 93       	st	X, r18
   13830:	e2 b9       	out	0x02, r30	; 2
   13832:	d7 01       	movw	r26, r14
   13834:	d2 96       	adiw	r26, 0x32	; 50
   13836:	ed 91       	ld	r30, X+
   13838:	fc 91       	ld	r31, X
   1383a:	d3 97       	sbiw	r26, 0x33	; 51
   1383c:	20 81       	ld	r18, Z
   1383e:	dc 96       	adiw	r26, 0x3c	; 60
   13840:	3c 91       	ld	r19, X
   13842:	dc 97       	sbiw	r26, 0x3c	; 60
   13844:	23 23       	and	r18, r19
   13846:	20 83       	st	Z, r18
   13848:	d2 96       	adiw	r26, 0x32	; 50
   1384a:	ed 91       	ld	r30, X+
   1384c:	fc 91       	ld	r31, X
   1384e:	d3 97       	sbiw	r26, 0x33	; 51
   13850:	20 81       	ld	r18, Z
   13852:	d8 96       	adiw	r26, 0x38	; 56
   13854:	3c 91       	ld	r19, X
   13856:	d8 97       	sbiw	r26, 0x38	; 56
   13858:	23 2b       	or	r18, r19
   1385a:	20 83       	st	Z, r18
   1385c:	d0 96       	adiw	r26, 0x30	; 48
   1385e:	ed 91       	ld	r30, X+
   13860:	fc 91       	ld	r31, X
   13862:	d1 97       	sbiw	r26, 0x31	; 49
   13864:	20 81       	ld	r18, Z
   13866:	db 96       	adiw	r26, 0x3b	; 59
   13868:	3c 91       	ld	r19, X
   1386a:	db 97       	sbiw	r26, 0x3b	; 59
   1386c:	23 23       	and	r18, r19
   1386e:	20 83       	st	Z, r18
   13870:	12 b8       	out	0x02, r1	; 2
   13872:	d2 96       	adiw	r26, 0x32	; 50
   13874:	ed 91       	ld	r30, X+
   13876:	fc 91       	ld	r31, X
   13878:	d3 97       	sbiw	r26, 0x33	; 51
   1387a:	20 81       	ld	r18, Z
   1387c:	dc 96       	adiw	r26, 0x3c	; 60
   1387e:	3c 91       	ld	r19, X
   13880:	dc 97       	sbiw	r26, 0x3c	; 60
   13882:	23 23       	and	r18, r19
   13884:	20 83       	st	Z, r18
   13886:	d2 96       	adiw	r26, 0x32	; 50
   13888:	ed 91       	ld	r30, X+
   1388a:	fc 91       	ld	r31, X
   1388c:	d3 97       	sbiw	r26, 0x33	; 51
   1388e:	20 81       	ld	r18, Z
   13890:	d8 96       	adiw	r26, 0x38	; 56
   13892:	3c 91       	ld	r19, X
   13894:	d8 97       	sbiw	r26, 0x38	; 56
   13896:	23 2b       	or	r18, r19
   13898:	20 83       	st	Z, r18
   1389a:	21 e2       	ldi	r18, 0x21	; 33
   1389c:	22 b9       	out	0x02, r18	; 2
   1389e:	d2 96       	adiw	r26, 0x32	; 50
   138a0:	ed 91       	ld	r30, X+
   138a2:	fc 91       	ld	r31, X
   138a4:	d3 97       	sbiw	r26, 0x33	; 51
   138a6:	20 81       	ld	r18, Z
   138a8:	dc 96       	adiw	r26, 0x3c	; 60
   138aa:	3c 91       	ld	r19, X
   138ac:	dc 97       	sbiw	r26, 0x3c	; 60
   138ae:	23 23       	and	r18, r19
   138b0:	20 83       	st	Z, r18
   138b2:	d2 96       	adiw	r26, 0x32	; 50
   138b4:	ed 91       	ld	r30, X+
   138b6:	fc 91       	ld	r31, X
   138b8:	d3 97       	sbiw	r26, 0x33	; 51
   138ba:	20 81       	ld	r18, Z
   138bc:	d8 96       	adiw	r26, 0x38	; 56
   138be:	3c 91       	ld	r19, X
   138c0:	d8 97       	sbiw	r26, 0x38	; 56
   138c2:	23 2b       	or	r18, r19
   138c4:	20 83       	st	Z, r18
   138c6:	d0 96       	adiw	r26, 0x30	; 48
   138c8:	ed 91       	ld	r30, X+
   138ca:	fc 91       	ld	r31, X
   138cc:	d1 97       	sbiw	r26, 0x31	; 49
   138ce:	20 81       	ld	r18, Z
   138d0:	d7 96       	adiw	r26, 0x37	; 55
   138d2:	3c 91       	ld	r19, X
   138d4:	d7 97       	sbiw	r26, 0x37	; 55
   138d6:	23 2b       	or	r18, r19
   138d8:	20 83       	st	Z, r18
   138da:	92 b9       	out	0x02, r25	; 2
   138dc:	d2 96       	adiw	r26, 0x32	; 50
   138de:	ed 91       	ld	r30, X+
   138e0:	fc 91       	ld	r31, X
   138e2:	d3 97       	sbiw	r26, 0x33	; 51
   138e4:	90 81       	ld	r25, Z
   138e6:	dc 96       	adiw	r26, 0x3c	; 60
   138e8:	2c 91       	ld	r18, X
   138ea:	dc 97       	sbiw	r26, 0x3c	; 60
   138ec:	92 23       	and	r25, r18
   138ee:	90 83       	st	Z, r25
   138f0:	d2 96       	adiw	r26, 0x32	; 50
   138f2:	ed 91       	ld	r30, X+
   138f4:	fc 91       	ld	r31, X
   138f6:	d3 97       	sbiw	r26, 0x33	; 51
   138f8:	90 81       	ld	r25, Z
   138fa:	d8 96       	adiw	r26, 0x38	; 56
   138fc:	2c 91       	ld	r18, X
   138fe:	d8 97       	sbiw	r26, 0x38	; 56
   13900:	92 2b       	or	r25, r18
   13902:	90 83       	st	Z, r25
   13904:	82 b9       	out	0x02, r24	; 2
   13906:	d2 96       	adiw	r26, 0x32	; 50
   13908:	ed 91       	ld	r30, X+
   1390a:	fc 91       	ld	r31, X
   1390c:	d3 97       	sbiw	r26, 0x33	; 51
   1390e:	80 81       	ld	r24, Z
   13910:	dc 96       	adiw	r26, 0x3c	; 60
   13912:	9c 91       	ld	r25, X
   13914:	dc 97       	sbiw	r26, 0x3c	; 60
   13916:	89 23       	and	r24, r25
   13918:	80 83       	st	Z, r24
   1391a:	d2 96       	adiw	r26, 0x32	; 50
   1391c:	ed 91       	ld	r30, X+
   1391e:	fc 91       	ld	r31, X
   13920:	d3 97       	sbiw	r26, 0x33	; 51
   13922:	80 81       	ld	r24, Z
   13924:	d8 96       	adiw	r26, 0x38	; 56
   13926:	9c 91       	ld	r25, X
   13928:	89 2b       	or	r24, r25
   1392a:	80 83       	st	Z, r24
   1392c:	d7 01       	movw	r26, r14
   1392e:	9e 96       	adiw	r26, 0x2e	; 46
   13930:	ed 91       	ld	r30, X+
   13932:	fc 91       	ld	r31, X
   13934:	9f 97       	sbiw	r26, 0x2f	; 47
   13936:	80 81       	ld	r24, Z
   13938:	d6 96       	adiw	r26, 0x36	; 54
   1393a:	9c 91       	ld	r25, X
   1393c:	89 2b       	or	r24, r25
   1393e:	80 83       	st	Z, r24
   13940:	28 96       	adiw	r28, 0x08	; 8
   13942:	0f b6       	in	r0, 0x3f	; 63
   13944:	f8 94       	cli
   13946:	de bf       	out	0x3e, r29	; 62
   13948:	0f be       	out	0x3f, r0	; 63
   1394a:	cd bf       	out	0x3d, r28	; 61
   1394c:	df 91       	pop	r29
   1394e:	cf 91       	pop	r28
   13950:	1f 91       	pop	r17
   13952:	0f 91       	pop	r16
   13954:	ff 90       	pop	r15
   13956:	ef 90       	pop	r14
   13958:	df 90       	pop	r13
   1395a:	cf 90       	pop	r12
   1395c:	bf 90       	pop	r11
   1395e:	af 90       	pop	r10
   13960:	08 95       	ret
   13962:	f7 01       	movw	r30, r14
   13964:	a6 85       	ldd	r26, Z+14	; 0x0e
   13966:	b7 85       	ldd	r27, Z+15	; 0x0f
   13968:	59 01       	movw	r10, r18
   1396a:	a0 94       	com	r10
   1396c:	b0 94       	com	r11
   1396e:	9d 01       	movw	r18, r26
   13970:	26 1b       	sub	r18, r22
   13972:	37 0b       	sbc	r19, r23
   13974:	21 50       	subi	r18, 0x01	; 1
   13976:	31 09       	sbc	r19, r1
   13978:	60 89       	ldd	r22, Z+16	; 0x10
   1397a:	71 89       	ldd	r23, Z+17	; 0x11
   1397c:	68 01       	movw	r12, r16
   1397e:	c0 94       	com	r12
   13980:	d0 94       	com	r13
   13982:	8a 01       	movw	r16, r20
   13984:	00 95       	com	r16
   13986:	10 95       	com	r17
   13988:	06 0f       	add	r16, r22
   1398a:	17 1f       	adc	r17, r23
   1398c:	c8 01       	movw	r24, r16
   1398e:	f9 01       	movw	r30, r18
   13990:	a6 01       	movw	r20, r12
   13992:	46 0f       	add	r20, r22
   13994:	57 1f       	adc	r21, r23
   13996:	b5 01       	movw	r22, r10
   13998:	f1 cc       	rjmp	.-1566   	; 0x1337c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
   1399a:	f7 01       	movw	r30, r14
   1399c:	a0 89       	ldd	r26, Z+16	; 0x10
   1399e:	b1 89       	ldd	r27, Z+17	; 0x11
   139a0:	69 01       	movw	r12, r18
   139a2:	c0 94       	com	r12
   139a4:	d0 94       	com	r13
   139a6:	cd 01       	movw	r24, r26
   139a8:	86 1b       	sub	r24, r22
   139aa:	97 0b       	sbc	r25, r23
   139ac:	01 97       	sbiw	r24, 0x01	; 1
   139ae:	fa 01       	movw	r30, r20
   139b0:	98 01       	movw	r18, r16
   139b2:	8c 01       	movw	r16, r24
   139b4:	ba 01       	movw	r22, r20
   139b6:	a6 01       	movw	r20, r12
   139b8:	4a 0f       	add	r20, r26
   139ba:	5b 1f       	adc	r21, r27
   139bc:	e1 cc       	rjmp	.-1598   	; 0x13380 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
   139be:	ca 01       	movw	r24, r20
   139c0:	fb 01       	movw	r30, r22
   139c2:	de cc       	rjmp	.-1604   	; 0x13380 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
   139c4:	01 97       	sbiw	r24, 0x01	; 1
   139c6:	09 f0       	breq	.+2      	; 0x139ca <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
   139c8:	e5 c1       	rjmp	.+970    	; 0x13d94 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
   139ca:	d0 96       	adiw	r26, 0x30	; 48
   139cc:	ed 91       	ld	r30, X+
   139ce:	fc 91       	ld	r31, X
   139d0:	d1 97       	sbiw	r26, 0x31	; 49
   139d2:	80 81       	ld	r24, Z
   139d4:	db 96       	adiw	r26, 0x3b	; 59
   139d6:	9c 91       	ld	r25, X
   139d8:	db 97       	sbiw	r26, 0x3b	; 59
   139da:	89 23       	and	r24, r25
   139dc:	80 83       	st	Z, r24
   139de:	82 e0       	ldi	r24, 0x02	; 2
   139e0:	82 b9       	out	0x02, r24	; 2
   139e2:	d2 96       	adiw	r26, 0x32	; 50
   139e4:	ed 91       	ld	r30, X+
   139e6:	fc 91       	ld	r31, X
   139e8:	d3 97       	sbiw	r26, 0x33	; 51
   139ea:	80 81       	ld	r24, Z
   139ec:	dc 96       	adiw	r26, 0x3c	; 60
   139ee:	9c 91       	ld	r25, X
   139f0:	dc 97       	sbiw	r26, 0x3c	; 60
   139f2:	89 23       	and	r24, r25
   139f4:	80 83       	st	Z, r24
   139f6:	d2 96       	adiw	r26, 0x32	; 50
   139f8:	ed 91       	ld	r30, X+
   139fa:	fc 91       	ld	r31, X
   139fc:	d3 97       	sbiw	r26, 0x33	; 51
   139fe:	80 81       	ld	r24, Z
   13a00:	d8 96       	adiw	r26, 0x38	; 56
   13a02:	9c 91       	ld	r25, X
   13a04:	d8 97       	sbiw	r26, 0x38	; 56
   13a06:	89 2b       	or	r24, r25
   13a08:	80 83       	st	Z, r24
   13a0a:	d0 96       	adiw	r26, 0x30	; 48
   13a0c:	ed 91       	ld	r30, X+
   13a0e:	fc 91       	ld	r31, X
   13a10:	d1 97       	sbiw	r26, 0x31	; 49
   13a12:	80 81       	ld	r24, Z
   13a14:	d7 96       	adiw	r26, 0x37	; 55
   13a16:	9c 91       	ld	r25, X
   13a18:	d7 97       	sbiw	r26, 0x37	; 55
   13a1a:	89 2b       	or	r24, r25
   13a1c:	80 83       	st	Z, r24
   13a1e:	72 b9       	out	0x02, r23	; 2
   13a20:	d2 96       	adiw	r26, 0x32	; 50
   13a22:	ed 91       	ld	r30, X+
   13a24:	fc 91       	ld	r31, X
   13a26:	d3 97       	sbiw	r26, 0x33	; 51
   13a28:	80 81       	ld	r24, Z
   13a2a:	dc 96       	adiw	r26, 0x3c	; 60
   13a2c:	9c 91       	ld	r25, X
   13a2e:	dc 97       	sbiw	r26, 0x3c	; 60
   13a30:	89 23       	and	r24, r25
   13a32:	80 83       	st	Z, r24
   13a34:	d2 96       	adiw	r26, 0x32	; 50
   13a36:	ed 91       	ld	r30, X+
   13a38:	fc 91       	ld	r31, X
   13a3a:	d3 97       	sbiw	r26, 0x33	; 51
   13a3c:	80 81       	ld	r24, Z
   13a3e:	d8 96       	adiw	r26, 0x38	; 56
   13a40:	9c 91       	ld	r25, X
   13a42:	d8 97       	sbiw	r26, 0x38	; 56
   13a44:	89 2b       	or	r24, r25
   13a46:	80 83       	st	Z, r24
   13a48:	d0 96       	adiw	r26, 0x30	; 48
   13a4a:	ed 91       	ld	r30, X+
   13a4c:	fc 91       	ld	r31, X
   13a4e:	d1 97       	sbiw	r26, 0x31	; 49
   13a50:	80 81       	ld	r24, Z
   13a52:	db 96       	adiw	r26, 0x3b	; 59
   13a54:	9c 91       	ld	r25, X
   13a56:	db 97       	sbiw	r26, 0x3b	; 59
   13a58:	89 23       	and	r24, r25
   13a5a:	80 83       	st	Z, r24
   13a5c:	83 e0       	ldi	r24, 0x03	; 3
   13a5e:	82 b9       	out	0x02, r24	; 2
   13a60:	d2 96       	adiw	r26, 0x32	; 50
   13a62:	ed 91       	ld	r30, X+
   13a64:	fc 91       	ld	r31, X
   13a66:	d3 97       	sbiw	r26, 0x33	; 51
   13a68:	80 81       	ld	r24, Z
   13a6a:	dc 96       	adiw	r26, 0x3c	; 60
   13a6c:	9c 91       	ld	r25, X
   13a6e:	dc 97       	sbiw	r26, 0x3c	; 60
   13a70:	89 23       	and	r24, r25
   13a72:	80 83       	st	Z, r24
   13a74:	d2 96       	adiw	r26, 0x32	; 50
   13a76:	ed 91       	ld	r30, X+
   13a78:	fc 91       	ld	r31, X
   13a7a:	d3 97       	sbiw	r26, 0x33	; 51
   13a7c:	80 81       	ld	r24, Z
   13a7e:	d8 96       	adiw	r26, 0x38	; 56
   13a80:	9c 91       	ld	r25, X
   13a82:	d8 97       	sbiw	r26, 0x38	; 56
   13a84:	89 2b       	or	r24, r25
   13a86:	80 83       	st	Z, r24
   13a88:	d0 96       	adiw	r26, 0x30	; 48
   13a8a:	ed 91       	ld	r30, X+
   13a8c:	fc 91       	ld	r31, X
   13a8e:	d1 97       	sbiw	r26, 0x31	; 49
   13a90:	80 81       	ld	r24, Z
   13a92:	d7 96       	adiw	r26, 0x37	; 55
   13a94:	9c 91       	ld	r25, X
   13a96:	d7 97       	sbiw	r26, 0x37	; 55
   13a98:	89 2b       	or	r24, r25
   13a9a:	80 83       	st	Z, r24
   13a9c:	62 b9       	out	0x02, r22	; 2
   13a9e:	d2 96       	adiw	r26, 0x32	; 50
   13aa0:	ed 91       	ld	r30, X+
   13aa2:	fc 91       	ld	r31, X
   13aa4:	d3 97       	sbiw	r26, 0x33	; 51
   13aa6:	80 81       	ld	r24, Z
   13aa8:	dc 96       	adiw	r26, 0x3c	; 60
   13aaa:	9c 91       	ld	r25, X
   13aac:	dc 97       	sbiw	r26, 0x3c	; 60
   13aae:	89 23       	and	r24, r25
   13ab0:	80 83       	st	Z, r24
   13ab2:	d2 96       	adiw	r26, 0x32	; 50
   13ab4:	ed 91       	ld	r30, X+
   13ab6:	fc 91       	ld	r31, X
   13ab8:	d3 97       	sbiw	r26, 0x33	; 51
   13aba:	80 81       	ld	r24, Z
   13abc:	d8 96       	adiw	r26, 0x38	; 56
   13abe:	9c 91       	ld	r25, X
   13ac0:	d8 97       	sbiw	r26, 0x38	; 56
   13ac2:	89 2b       	or	r24, r25
   13ac4:	80 83       	st	Z, r24
   13ac6:	d0 96       	adiw	r26, 0x30	; 48
   13ac8:	ed 91       	ld	r30, X+
   13aca:	fc 91       	ld	r31, X
   13acc:	d1 97       	sbiw	r26, 0x31	; 49
   13ace:	80 81       	ld	r24, Z
   13ad0:	db 96       	adiw	r26, 0x3b	; 59
   13ad2:	9c 91       	ld	r25, X
   13ad4:	db 97       	sbiw	r26, 0x3b	; 59
   13ad6:	89 23       	and	r24, r25
   13ad8:	80 83       	st	Z, r24
   13ada:	86 e0       	ldi	r24, 0x06	; 6
   13adc:	82 b9       	out	0x02, r24	; 2
   13ade:	d2 96       	adiw	r26, 0x32	; 50
   13ae0:	ed 91       	ld	r30, X+
   13ae2:	fc 91       	ld	r31, X
   13ae4:	d3 97       	sbiw	r26, 0x33	; 51
   13ae6:	80 81       	ld	r24, Z
   13ae8:	dc 96       	adiw	r26, 0x3c	; 60
   13aea:	9c 91       	ld	r25, X
   13aec:	dc 97       	sbiw	r26, 0x3c	; 60
   13aee:	89 23       	and	r24, r25
   13af0:	80 83       	st	Z, r24
   13af2:	d2 96       	adiw	r26, 0x32	; 50
   13af4:	ed 91       	ld	r30, X+
   13af6:	fc 91       	ld	r31, X
   13af8:	d3 97       	sbiw	r26, 0x33	; 51
   13afa:	80 81       	ld	r24, Z
   13afc:	d8 96       	adiw	r26, 0x38	; 56
   13afe:	9c 91       	ld	r25, X
   13b00:	d8 97       	sbiw	r26, 0x38	; 56
   13b02:	89 2b       	or	r24, r25
   13b04:	80 83       	st	Z, r24
   13b06:	d0 96       	adiw	r26, 0x30	; 48
   13b08:	ed 91       	ld	r30, X+
   13b0a:	fc 91       	ld	r31, X
   13b0c:	d1 97       	sbiw	r26, 0x31	; 49
   13b0e:	80 81       	ld	r24, Z
   13b10:	d7 96       	adiw	r26, 0x37	; 55
   13b12:	9c 91       	ld	r25, X
   13b14:	d7 97       	sbiw	r26, 0x37	; 55
   13b16:	89 2b       	or	r24, r25
   13b18:	80 83       	st	Z, r24
   13b1a:	52 b9       	out	0x02, r21	; 2
   13b1c:	d2 96       	adiw	r26, 0x32	; 50
   13b1e:	ed 91       	ld	r30, X+
   13b20:	fc 91       	ld	r31, X
   13b22:	d3 97       	sbiw	r26, 0x33	; 51
   13b24:	80 81       	ld	r24, Z
   13b26:	dc 96       	adiw	r26, 0x3c	; 60
   13b28:	9c 91       	ld	r25, X
   13b2a:	dc 97       	sbiw	r26, 0x3c	; 60
   13b2c:	89 23       	and	r24, r25
   13b2e:	80 83       	st	Z, r24
   13b30:	d2 96       	adiw	r26, 0x32	; 50
   13b32:	ed 91       	ld	r30, X+
   13b34:	fc 91       	ld	r31, X
   13b36:	d3 97       	sbiw	r26, 0x33	; 51
   13b38:	80 81       	ld	r24, Z
   13b3a:	d8 96       	adiw	r26, 0x38	; 56
   13b3c:	9c 91       	ld	r25, X
   13b3e:	d8 97       	sbiw	r26, 0x38	; 56
   13b40:	89 2b       	or	r24, r25
   13b42:	80 83       	st	Z, r24
   13b44:	d0 96       	adiw	r26, 0x30	; 48
   13b46:	ed 91       	ld	r30, X+
   13b48:	fc 91       	ld	r31, X
   13b4a:	d1 97       	sbiw	r26, 0x31	; 49
   13b4c:	80 81       	ld	r24, Z
   13b4e:	db 96       	adiw	r26, 0x3b	; 59
   13b50:	9c 91       	ld	r25, X
   13b52:	db 97       	sbiw	r26, 0x3b	; 59
   13b54:	89 23       	and	r24, r25
   13b56:	80 83       	st	Z, r24
   13b58:	87 e0       	ldi	r24, 0x07	; 7
   13b5a:	82 b9       	out	0x02, r24	; 2
   13b5c:	d2 96       	adiw	r26, 0x32	; 50
   13b5e:	ed 91       	ld	r30, X+
   13b60:	fc 91       	ld	r31, X
   13b62:	d3 97       	sbiw	r26, 0x33	; 51
   13b64:	80 81       	ld	r24, Z
   13b66:	dc 96       	adiw	r26, 0x3c	; 60
   13b68:	9c 91       	ld	r25, X
   13b6a:	dc 97       	sbiw	r26, 0x3c	; 60
   13b6c:	89 23       	and	r24, r25
   13b6e:	80 83       	st	Z, r24
   13b70:	d2 96       	adiw	r26, 0x32	; 50
   13b72:	ed 91       	ld	r30, X+
   13b74:	fc 91       	ld	r31, X
   13b76:	d3 97       	sbiw	r26, 0x33	; 51
   13b78:	80 81       	ld	r24, Z
   13b7a:	d8 96       	adiw	r26, 0x38	; 56
   13b7c:	9c 91       	ld	r25, X
   13b7e:	d8 97       	sbiw	r26, 0x38	; 56
   13b80:	89 2b       	or	r24, r25
   13b82:	80 83       	st	Z, r24
   13b84:	d0 96       	adiw	r26, 0x30	; 48
   13b86:	ed 91       	ld	r30, X+
   13b88:	fc 91       	ld	r31, X
   13b8a:	d1 97       	sbiw	r26, 0x31	; 49
   13b8c:	80 81       	ld	r24, Z
   13b8e:	d7 96       	adiw	r26, 0x37	; 55
   13b90:	9c 91       	ld	r25, X
   13b92:	d7 97       	sbiw	r26, 0x37	; 55
   13b94:	89 2b       	or	r24, r25
   13b96:	80 83       	st	Z, r24
   13b98:	42 b9       	out	0x02, r20	; 2
   13b9a:	d2 96       	adiw	r26, 0x32	; 50
   13b9c:	ed 91       	ld	r30, X+
   13b9e:	fc 91       	ld	r31, X
   13ba0:	d3 97       	sbiw	r26, 0x33	; 51
   13ba2:	80 81       	ld	r24, Z
   13ba4:	dc 96       	adiw	r26, 0x3c	; 60
   13ba6:	9c 91       	ld	r25, X
   13ba8:	dc 97       	sbiw	r26, 0x3c	; 60
   13baa:	89 23       	and	r24, r25
   13bac:	80 83       	st	Z, r24
   13bae:	d2 96       	adiw	r26, 0x32	; 50
   13bb0:	ed 91       	ld	r30, X+
   13bb2:	fc 91       	ld	r31, X
   13bb4:	d3 97       	sbiw	r26, 0x33	; 51
   13bb6:	80 81       	ld	r24, Z
   13bb8:	d8 96       	adiw	r26, 0x38	; 56
   13bba:	9c 91       	ld	r25, X
   13bbc:	d8 97       	sbiw	r26, 0x38	; 56
   13bbe:	89 2b       	or	r24, r25
   13bc0:	80 83       	st	Z, r24
   13bc2:	d0 96       	adiw	r26, 0x30	; 48
   13bc4:	ed 91       	ld	r30, X+
   13bc6:	fc 91       	ld	r31, X
   13bc8:	d1 97       	sbiw	r26, 0x31	; 49
   13bca:	80 81       	ld	r24, Z
   13bcc:	db 96       	adiw	r26, 0x3b	; 59
   13bce:	9c 91       	ld	r25, X
   13bd0:	db 97       	sbiw	r26, 0x3b	; 59
   13bd2:	89 23       	and	r24, r25
   13bd4:	80 83       	st	Z, r24
   13bd6:	84 e0       	ldi	r24, 0x04	; 4
   13bd8:	82 b9       	out	0x02, r24	; 2
   13bda:	d2 96       	adiw	r26, 0x32	; 50
   13bdc:	ed 91       	ld	r30, X+
   13bde:	fc 91       	ld	r31, X
   13be0:	d3 97       	sbiw	r26, 0x33	; 51
   13be2:	80 81       	ld	r24, Z
   13be4:	dc 96       	adiw	r26, 0x3c	; 60
   13be6:	9c 91       	ld	r25, X
   13be8:	dc 97       	sbiw	r26, 0x3c	; 60
   13bea:	89 23       	and	r24, r25
   13bec:	80 83       	st	Z, r24
   13bee:	d2 96       	adiw	r26, 0x32	; 50
   13bf0:	ed 91       	ld	r30, X+
   13bf2:	fc 91       	ld	r31, X
   13bf4:	d3 97       	sbiw	r26, 0x33	; 51
   13bf6:	80 81       	ld	r24, Z
   13bf8:	d8 96       	adiw	r26, 0x38	; 56
   13bfa:	9c 91       	ld	r25, X
   13bfc:	d8 97       	sbiw	r26, 0x38	; 56
   13bfe:	89 2b       	or	r24, r25
   13c00:	80 83       	st	Z, r24
   13c02:	d0 96       	adiw	r26, 0x30	; 48
   13c04:	ed 91       	ld	r30, X+
   13c06:	fc 91       	ld	r31, X
   13c08:	d1 97       	sbiw	r26, 0x31	; 49
   13c0a:	80 81       	ld	r24, Z
   13c0c:	d7 96       	adiw	r26, 0x37	; 55
   13c0e:	9c 91       	ld	r25, X
   13c10:	d7 97       	sbiw	r26, 0x37	; 55
   13c12:	89 2b       	or	r24, r25
   13c14:	80 83       	st	Z, r24
   13c16:	32 b9       	out	0x02, r19	; 2
   13c18:	d2 96       	adiw	r26, 0x32	; 50
   13c1a:	ed 91       	ld	r30, X+
   13c1c:	fc 91       	ld	r31, X
   13c1e:	d3 97       	sbiw	r26, 0x33	; 51
   13c20:	80 81       	ld	r24, Z
   13c22:	dc 96       	adiw	r26, 0x3c	; 60
   13c24:	9c 91       	ld	r25, X
   13c26:	dc 97       	sbiw	r26, 0x3c	; 60
   13c28:	89 23       	and	r24, r25
   13c2a:	80 83       	st	Z, r24
   13c2c:	d2 96       	adiw	r26, 0x32	; 50
   13c2e:	ed 91       	ld	r30, X+
   13c30:	fc 91       	ld	r31, X
   13c32:	d3 97       	sbiw	r26, 0x33	; 51
   13c34:	80 81       	ld	r24, Z
   13c36:	d8 96       	adiw	r26, 0x38	; 56
   13c38:	9c 91       	ld	r25, X
   13c3a:	d8 97       	sbiw	r26, 0x38	; 56
   13c3c:	89 2b       	or	r24, r25
   13c3e:	80 83       	st	Z, r24
   13c40:	d0 96       	adiw	r26, 0x30	; 48
   13c42:	ed 91       	ld	r30, X+
   13c44:	fc 91       	ld	r31, X
   13c46:	d1 97       	sbiw	r26, 0x31	; 49
   13c48:	80 81       	ld	r24, Z
   13c4a:	db 96       	adiw	r26, 0x3b	; 59
   13c4c:	9c 91       	ld	r25, X
   13c4e:	db 97       	sbiw	r26, 0x3b	; 59
   13c50:	89 23       	and	r24, r25
   13c52:	80 83       	st	Z, r24
   13c54:	85 e0       	ldi	r24, 0x05	; 5
   13c56:	82 b9       	out	0x02, r24	; 2
   13c58:	d2 96       	adiw	r26, 0x32	; 50
   13c5a:	ed 91       	ld	r30, X+
   13c5c:	fc 91       	ld	r31, X
   13c5e:	d3 97       	sbiw	r26, 0x33	; 51
   13c60:	80 81       	ld	r24, Z
   13c62:	dc 96       	adiw	r26, 0x3c	; 60
   13c64:	9c 91       	ld	r25, X
   13c66:	dc 97       	sbiw	r26, 0x3c	; 60
   13c68:	89 23       	and	r24, r25
   13c6a:	80 83       	st	Z, r24
   13c6c:	d2 96       	adiw	r26, 0x32	; 50
   13c6e:	ed 91       	ld	r30, X+
   13c70:	fc 91       	ld	r31, X
   13c72:	d3 97       	sbiw	r26, 0x33	; 51
   13c74:	80 81       	ld	r24, Z
   13c76:	d8 96       	adiw	r26, 0x38	; 56
   13c78:	9c 91       	ld	r25, X
   13c7a:	d8 97       	sbiw	r26, 0x38	; 56
   13c7c:	89 2b       	or	r24, r25
   13c7e:	80 83       	st	Z, r24
   13c80:	d0 96       	adiw	r26, 0x30	; 48
   13c82:	ed 91       	ld	r30, X+
   13c84:	fc 91       	ld	r31, X
   13c86:	d1 97       	sbiw	r26, 0x31	; 49
   13c88:	80 81       	ld	r24, Z
   13c8a:	d7 96       	adiw	r26, 0x37	; 55
   13c8c:	9c 91       	ld	r25, X
   13c8e:	d7 97       	sbiw	r26, 0x37	; 55
   13c90:	89 2b       	or	r24, r25
   13c92:	80 83       	st	Z, r24
   13c94:	22 b9       	out	0x02, r18	; 2
   13c96:	d2 96       	adiw	r26, 0x32	; 50
   13c98:	ed 91       	ld	r30, X+
   13c9a:	fc 91       	ld	r31, X
   13c9c:	d3 97       	sbiw	r26, 0x33	; 51
   13c9e:	80 81       	ld	r24, Z
   13ca0:	dc 96       	adiw	r26, 0x3c	; 60
   13ca2:	9c 91       	ld	r25, X
   13ca4:	dc 97       	sbiw	r26, 0x3c	; 60
   13ca6:	89 23       	and	r24, r25
   13ca8:	80 83       	st	Z, r24
   13caa:	d2 96       	adiw	r26, 0x32	; 50
   13cac:	ed 91       	ld	r30, X+
   13cae:	fc 91       	ld	r31, X
   13cb0:	d3 97       	sbiw	r26, 0x33	; 51
   13cb2:	80 81       	ld	r24, Z
   13cb4:	d8 96       	adiw	r26, 0x38	; 56
   13cb6:	9c 91       	ld	r25, X
   13cb8:	d8 97       	sbiw	r26, 0x38	; 56
   13cba:	89 2b       	or	r24, r25
   13cbc:	80 83       	st	Z, r24
   13cbe:	d0 96       	adiw	r26, 0x30	; 48
   13cc0:	ed 91       	ld	r30, X+
   13cc2:	fc 91       	ld	r31, X
   13cc4:	d1 97       	sbiw	r26, 0x31	; 49
   13cc6:	80 81       	ld	r24, Z
   13cc8:	db 96       	adiw	r26, 0x3b	; 59
   13cca:	9c 91       	ld	r25, X
   13ccc:	db 97       	sbiw	r26, 0x3b	; 59
   13cce:	89 23       	and	r24, r25
   13cd0:	80 83       	st	Z, r24
   13cd2:	88 e0       	ldi	r24, 0x08	; 8
   13cd4:	82 b9       	out	0x02, r24	; 2
   13cd6:	d2 96       	adiw	r26, 0x32	; 50
   13cd8:	ed 91       	ld	r30, X+
   13cda:	fc 91       	ld	r31, X
   13cdc:	d3 97       	sbiw	r26, 0x33	; 51
   13cde:	80 81       	ld	r24, Z
   13ce0:	dc 96       	adiw	r26, 0x3c	; 60
   13ce2:	9c 91       	ld	r25, X
   13ce4:	dc 97       	sbiw	r26, 0x3c	; 60
   13ce6:	89 23       	and	r24, r25
   13ce8:	80 83       	st	Z, r24
   13cea:	d2 96       	adiw	r26, 0x32	; 50
   13cec:	ed 91       	ld	r30, X+
   13cee:	fc 91       	ld	r31, X
   13cf0:	d3 97       	sbiw	r26, 0x33	; 51
   13cf2:	80 81       	ld	r24, Z
   13cf4:	d8 96       	adiw	r26, 0x38	; 56
   13cf6:	9c 91       	ld	r25, X
   13cf8:	d8 97       	sbiw	r26, 0x38	; 56
   13cfa:	89 2b       	or	r24, r25
   13cfc:	80 83       	st	Z, r24
   13cfe:	d0 96       	adiw	r26, 0x30	; 48
   13d00:	ed 91       	ld	r30, X+
   13d02:	fc 91       	ld	r31, X
   13d04:	d1 97       	sbiw	r26, 0x31	; 49
   13d06:	80 81       	ld	r24, Z
   13d08:	d7 96       	adiw	r26, 0x37	; 55
   13d0a:	9c 91       	ld	r25, X
   13d0c:	d7 97       	sbiw	r26, 0x37	; 55
   13d0e:	89 2b       	or	r24, r25
   13d10:	80 83       	st	Z, r24
   13d12:	12 b9       	out	0x02, r17	; 2
   13d14:	d2 96       	adiw	r26, 0x32	; 50
   13d16:	ed 91       	ld	r30, X+
   13d18:	fc 91       	ld	r31, X
   13d1a:	d3 97       	sbiw	r26, 0x33	; 51
   13d1c:	80 81       	ld	r24, Z
   13d1e:	dc 96       	adiw	r26, 0x3c	; 60
   13d20:	9c 91       	ld	r25, X
   13d22:	dc 97       	sbiw	r26, 0x3c	; 60
   13d24:	89 23       	and	r24, r25
   13d26:	80 83       	st	Z, r24
   13d28:	d2 96       	adiw	r26, 0x32	; 50
   13d2a:	ed 91       	ld	r30, X+
   13d2c:	fc 91       	ld	r31, X
   13d2e:	d3 97       	sbiw	r26, 0x33	; 51
   13d30:	80 81       	ld	r24, Z
   13d32:	d8 96       	adiw	r26, 0x38	; 56
   13d34:	9c 91       	ld	r25, X
   13d36:	d8 97       	sbiw	r26, 0x38	; 56
   13d38:	89 2b       	or	r24, r25
   13d3a:	80 83       	st	Z, r24
   13d3c:	d0 96       	adiw	r26, 0x30	; 48
   13d3e:	ed 91       	ld	r30, X+
   13d40:	fc 91       	ld	r31, X
   13d42:	d1 97       	sbiw	r26, 0x31	; 49
   13d44:	80 81       	ld	r24, Z
   13d46:	db 96       	adiw	r26, 0x3b	; 59
   13d48:	9c 91       	ld	r25, X
   13d4a:	db 97       	sbiw	r26, 0x3b	; 59
   13d4c:	89 23       	and	r24, r25
   13d4e:	80 83       	st	Z, r24
   13d50:	89 e0       	ldi	r24, 0x09	; 9
   13d52:	82 b9       	out	0x02, r24	; 2
   13d54:	d2 96       	adiw	r26, 0x32	; 50
   13d56:	ed 91       	ld	r30, X+
   13d58:	fc 91       	ld	r31, X
   13d5a:	d3 97       	sbiw	r26, 0x33	; 51
   13d5c:	80 81       	ld	r24, Z
   13d5e:	dc 96       	adiw	r26, 0x3c	; 60
   13d60:	9c 91       	ld	r25, X
   13d62:	dc 97       	sbiw	r26, 0x3c	; 60
   13d64:	89 23       	and	r24, r25
   13d66:	80 83       	st	Z, r24
   13d68:	d2 96       	adiw	r26, 0x32	; 50
   13d6a:	ed 91       	ld	r30, X+
   13d6c:	fc 91       	ld	r31, X
   13d6e:	d3 97       	sbiw	r26, 0x33	; 51
   13d70:	80 81       	ld	r24, Z
   13d72:	d8 96       	adiw	r26, 0x38	; 56
   13d74:	9c 91       	ld	r25, X
   13d76:	d8 97       	sbiw	r26, 0x38	; 56
   13d78:	89 2b       	or	r24, r25
   13d7a:	80 83       	st	Z, r24
   13d7c:	d0 96       	adiw	r26, 0x30	; 48
   13d7e:	ed 91       	ld	r30, X+
   13d80:	fc 91       	ld	r31, X
   13d82:	d1 97       	sbiw	r26, 0x31	; 49
   13d84:	80 81       	ld	r24, Z
   13d86:	d7 96       	adiw	r26, 0x37	; 55
   13d88:	9c 91       	ld	r25, X
   13d8a:	d7 97       	sbiw	r26, 0x37	; 55
   13d8c:	89 2b       	or	r24, r25
   13d8e:	80 83       	st	Z, r24
   13d90:	02 b9       	out	0x02, r16	; 2
   13d92:	b9 cd       	rjmp	.-1166   	; 0x13906 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
   13d94:	7d 83       	std	Y+5, r23	; 0x05
   13d96:	6e 83       	std	Y+6, r22	; 0x06
   13d98:	3f 83       	std	Y+7, r19	; 0x07
   13d9a:	28 87       	std	Y+8, r18	; 0x08
   13d9c:	59 83       	std	Y+1, r21	; 0x01
   13d9e:	4a 83       	std	Y+2, r20	; 0x02
   13da0:	1b 83       	std	Y+3, r17	; 0x03
   13da2:	0c 83       	std	Y+4, r16	; 0x04
   13da4:	f7 01       	movw	r30, r14
   13da6:	64 8d       	ldd	r22, Z+28	; 0x1c
   13da8:	75 8d       	ldd	r23, Z+29	; 0x1d
   13daa:	24 e0       	ldi	r18, 0x04	; 4
   13dac:	ae 01       	movw	r20, r28
   13dae:	4b 5f       	subi	r20, 0xFB	; 251
   13db0:	5f 4f       	sbci	r21, 0xFF	; 255
   13db2:	c7 01       	movw	r24, r14
   13db4:	0e 94 fe 98 	call	0x131fc	; 0x131fc <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   13db8:	d7 01       	movw	r26, r14
   13dba:	5e 96       	adiw	r26, 0x1e	; 30
   13dbc:	6d 91       	ld	r22, X+
   13dbe:	7c 91       	ld	r23, X
   13dc0:	24 e0       	ldi	r18, 0x04	; 4
   13dc2:	ae 01       	movw	r20, r28
   13dc4:	4f 5f       	subi	r20, 0xFF	; 255
   13dc6:	5f 4f       	sbci	r21, 0xFF	; 255
   13dc8:	c7 01       	movw	r24, r14
   13dca:	0e 94 fe 98 	call	0x131fc	; 0x131fc <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   13dce:	ae cd       	rjmp	.-1188   	; 0x1392c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

00013dd0 <LCDWIKI_KBV::Set_LR()>:
_ZN11LCDWIKI_KBV6Set_LREv():
   13dd0:	fc 01       	movw	r30, r24
   13dd2:	a6 a5       	ldd	r26, Z+46	; 0x2e
   13dd4:	b7 a5       	ldd	r27, Z+47	; 0x2f
   13dd6:	8c 91       	ld	r24, X
   13dd8:	92 ad       	ldd	r25, Z+58	; 0x3a
   13dda:	89 23       	and	r24, r25
   13ddc:	8c 93       	st	X, r24
   13dde:	a0 a9       	ldd	r26, Z+48	; 0x30
   13de0:	b1 a9       	ldd	r27, Z+49	; 0x31
   13de2:	8c 91       	ld	r24, X
   13de4:	93 ad       	ldd	r25, Z+59	; 0x3b
   13de6:	89 23       	and	r24, r25
   13de8:	8c 93       	st	X, r24
   13dea:	84 e0       	ldi	r24, 0x04	; 4
   13dec:	82 b9       	out	0x02, r24	; 2
   13dee:	a2 a9       	ldd	r26, Z+50	; 0x32
   13df0:	b3 a9       	ldd	r27, Z+51	; 0x33
   13df2:	8c 91       	ld	r24, X
   13df4:	94 ad       	ldd	r25, Z+60	; 0x3c
   13df6:	89 23       	and	r24, r25
   13df8:	8c 93       	st	X, r24
   13dfa:	a2 a9       	ldd	r26, Z+50	; 0x32
   13dfc:	b3 a9       	ldd	r27, Z+51	; 0x33
   13dfe:	8c 91       	ld	r24, X
   13e00:	90 ad       	ldd	r25, Z+56	; 0x38
   13e02:	89 2b       	or	r24, r25
   13e04:	8c 93       	st	X, r24
   13e06:	a0 a9       	ldd	r26, Z+48	; 0x30
   13e08:	b1 a9       	ldd	r27, Z+49	; 0x31
   13e0a:	8c 91       	ld	r24, X
   13e0c:	97 a9       	ldd	r25, Z+55	; 0x37
   13e0e:	89 2b       	or	r24, r25
   13e10:	8c 93       	st	X, r24
   13e12:	82 89       	ldd	r24, Z+18	; 0x12
   13e14:	93 89       	ldd	r25, Z+19	; 0x13
   13e16:	01 97       	sbiw	r24, 0x01	; 1
   13e18:	92 b9       	out	0x02, r25	; 2
   13e1a:	a2 a9       	ldd	r26, Z+50	; 0x32
   13e1c:	b3 a9       	ldd	r27, Z+51	; 0x33
   13e1e:	8c 91       	ld	r24, X
   13e20:	94 ad       	ldd	r25, Z+60	; 0x3c
   13e22:	89 23       	and	r24, r25
   13e24:	8c 93       	st	X, r24
   13e26:	a2 a9       	ldd	r26, Z+50	; 0x32
   13e28:	b3 a9       	ldd	r27, Z+51	; 0x33
   13e2a:	8c 91       	ld	r24, X
   13e2c:	90 ad       	ldd	r25, Z+56	; 0x38
   13e2e:	89 2b       	or	r24, r25
   13e30:	8c 93       	st	X, r24
   13e32:	a0 a9       	ldd	r26, Z+48	; 0x30
   13e34:	b1 a9       	ldd	r27, Z+49	; 0x31
   13e36:	8c 91       	ld	r24, X
   13e38:	93 ad       	ldd	r25, Z+59	; 0x3b
   13e3a:	89 23       	and	r24, r25
   13e3c:	8c 93       	st	X, r24
   13e3e:	85 e0       	ldi	r24, 0x05	; 5
   13e40:	82 b9       	out	0x02, r24	; 2
   13e42:	a2 a9       	ldd	r26, Z+50	; 0x32
   13e44:	b3 a9       	ldd	r27, Z+51	; 0x33
   13e46:	8c 91       	ld	r24, X
   13e48:	94 ad       	ldd	r25, Z+60	; 0x3c
   13e4a:	89 23       	and	r24, r25
   13e4c:	8c 93       	st	X, r24
   13e4e:	a2 a9       	ldd	r26, Z+50	; 0x32
   13e50:	b3 a9       	ldd	r27, Z+51	; 0x33
   13e52:	8c 91       	ld	r24, X
   13e54:	90 ad       	ldd	r25, Z+56	; 0x38
   13e56:	89 2b       	or	r24, r25
   13e58:	8c 93       	st	X, r24
   13e5a:	a0 a9       	ldd	r26, Z+48	; 0x30
   13e5c:	b1 a9       	ldd	r27, Z+49	; 0x31
   13e5e:	8c 91       	ld	r24, X
   13e60:	97 a9       	ldd	r25, Z+55	; 0x37
   13e62:	89 2b       	or	r24, r25
   13e64:	8c 93       	st	X, r24
   13e66:	82 89       	ldd	r24, Z+18	; 0x12
   13e68:	81 50       	subi	r24, 0x01	; 1
   13e6a:	82 b9       	out	0x02, r24	; 2
   13e6c:	a2 a9       	ldd	r26, Z+50	; 0x32
   13e6e:	b3 a9       	ldd	r27, Z+51	; 0x33
   13e70:	8c 91       	ld	r24, X
   13e72:	94 ad       	ldd	r25, Z+60	; 0x3c
   13e74:	89 23       	and	r24, r25
   13e76:	8c 93       	st	X, r24
   13e78:	a2 a9       	ldd	r26, Z+50	; 0x32
   13e7a:	b3 a9       	ldd	r27, Z+51	; 0x33
   13e7c:	8c 91       	ld	r24, X
   13e7e:	90 ad       	ldd	r25, Z+56	; 0x38
   13e80:	89 2b       	or	r24, r25
   13e82:	8c 93       	st	X, r24
   13e84:	a0 a9       	ldd	r26, Z+48	; 0x30
   13e86:	b1 a9       	ldd	r27, Z+49	; 0x31
   13e88:	8c 91       	ld	r24, X
   13e8a:	93 ad       	ldd	r25, Z+59	; 0x3b
   13e8c:	89 23       	and	r24, r25
   13e8e:	8c 93       	st	X, r24
   13e90:	88 e0       	ldi	r24, 0x08	; 8
   13e92:	82 b9       	out	0x02, r24	; 2
   13e94:	a2 a9       	ldd	r26, Z+50	; 0x32
   13e96:	b3 a9       	ldd	r27, Z+51	; 0x33
   13e98:	8c 91       	ld	r24, X
   13e9a:	94 ad       	ldd	r25, Z+60	; 0x3c
   13e9c:	89 23       	and	r24, r25
   13e9e:	8c 93       	st	X, r24
   13ea0:	a2 a9       	ldd	r26, Z+50	; 0x32
   13ea2:	b3 a9       	ldd	r27, Z+51	; 0x33
   13ea4:	8c 91       	ld	r24, X
   13ea6:	90 ad       	ldd	r25, Z+56	; 0x38
   13ea8:	89 2b       	or	r24, r25
   13eaa:	8c 93       	st	X, r24
   13eac:	a0 a9       	ldd	r26, Z+48	; 0x30
   13eae:	b1 a9       	ldd	r27, Z+49	; 0x31
   13eb0:	8c 91       	ld	r24, X
   13eb2:	97 a9       	ldd	r25, Z+55	; 0x37
   13eb4:	89 2b       	or	r24, r25
   13eb6:	8c 93       	st	X, r24
   13eb8:	84 89       	ldd	r24, Z+20	; 0x14
   13eba:	95 89       	ldd	r25, Z+21	; 0x15
   13ebc:	01 97       	sbiw	r24, 0x01	; 1
   13ebe:	92 b9       	out	0x02, r25	; 2
   13ec0:	a2 a9       	ldd	r26, Z+50	; 0x32
   13ec2:	b3 a9       	ldd	r27, Z+51	; 0x33
   13ec4:	8c 91       	ld	r24, X
   13ec6:	94 ad       	ldd	r25, Z+60	; 0x3c
   13ec8:	89 23       	and	r24, r25
   13eca:	8c 93       	st	X, r24
   13ecc:	a2 a9       	ldd	r26, Z+50	; 0x32
   13ece:	b3 a9       	ldd	r27, Z+51	; 0x33
   13ed0:	8c 91       	ld	r24, X
   13ed2:	90 ad       	ldd	r25, Z+56	; 0x38
   13ed4:	89 2b       	or	r24, r25
   13ed6:	8c 93       	st	X, r24
   13ed8:	a0 a9       	ldd	r26, Z+48	; 0x30
   13eda:	b1 a9       	ldd	r27, Z+49	; 0x31
   13edc:	8c 91       	ld	r24, X
   13ede:	93 ad       	ldd	r25, Z+59	; 0x3b
   13ee0:	89 23       	and	r24, r25
   13ee2:	8c 93       	st	X, r24
   13ee4:	89 e0       	ldi	r24, 0x09	; 9
   13ee6:	82 b9       	out	0x02, r24	; 2
   13ee8:	a2 a9       	ldd	r26, Z+50	; 0x32
   13eea:	b3 a9       	ldd	r27, Z+51	; 0x33
   13eec:	8c 91       	ld	r24, X
   13eee:	94 ad       	ldd	r25, Z+60	; 0x3c
   13ef0:	89 23       	and	r24, r25
   13ef2:	8c 93       	st	X, r24
   13ef4:	a2 a9       	ldd	r26, Z+50	; 0x32
   13ef6:	b3 a9       	ldd	r27, Z+51	; 0x33
   13ef8:	8c 91       	ld	r24, X
   13efa:	90 ad       	ldd	r25, Z+56	; 0x38
   13efc:	89 2b       	or	r24, r25
   13efe:	8c 93       	st	X, r24
   13f00:	a0 a9       	ldd	r26, Z+48	; 0x30
   13f02:	b1 a9       	ldd	r27, Z+49	; 0x31
   13f04:	8c 91       	ld	r24, X
   13f06:	97 a9       	ldd	r25, Z+55	; 0x37
   13f08:	89 2b       	or	r24, r25
   13f0a:	8c 93       	st	X, r24
   13f0c:	84 89       	ldd	r24, Z+20	; 0x14
   13f0e:	81 50       	subi	r24, 0x01	; 1
   13f10:	82 b9       	out	0x02, r24	; 2
   13f12:	a2 a9       	ldd	r26, Z+50	; 0x32
   13f14:	b3 a9       	ldd	r27, Z+51	; 0x33
   13f16:	8c 91       	ld	r24, X
   13f18:	94 ad       	ldd	r25, Z+60	; 0x3c
   13f1a:	89 23       	and	r24, r25
   13f1c:	8c 93       	st	X, r24
   13f1e:	a2 a9       	ldd	r26, Z+50	; 0x32
   13f20:	b3 a9       	ldd	r27, Z+51	; 0x33
   13f22:	8c 91       	ld	r24, X
   13f24:	90 ad       	ldd	r25, Z+56	; 0x38
   13f26:	89 2b       	or	r24, r25
   13f28:	8c 93       	st	X, r24
   13f2a:	a6 a5       	ldd	r26, Z+46	; 0x2e
   13f2c:	b7 a5       	ldd	r27, Z+47	; 0x2f
   13f2e:	8c 91       	ld	r24, X
   13f30:	96 a9       	ldd	r25, Z+54	; 0x36
   13f32:	89 2b       	or	r24, r25
   13f34:	8c 93       	st	X, r24
   13f36:	08 95       	ret

00013f38 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
   13f38:	4f 92       	push	r4
   13f3a:	5f 92       	push	r5
   13f3c:	6f 92       	push	r6
   13f3e:	7f 92       	push	r7
   13f40:	8f 92       	push	r8
   13f42:	9f 92       	push	r9
   13f44:	af 92       	push	r10
   13f46:	bf 92       	push	r11
   13f48:	cf 92       	push	r12
   13f4a:	df 92       	push	r13
   13f4c:	ef 92       	push	r14
   13f4e:	ff 92       	push	r15
   13f50:	0f 93       	push	r16
   13f52:	1f 93       	push	r17
   13f54:	cf 93       	push	r28
   13f56:	df 93       	push	r29
   13f58:	ec 01       	movw	r28, r24
   13f5a:	5a 01       	movw	r10, r20
   13f5c:	27 01       	movw	r4, r14
   13f5e:	37 ff       	sbrs	r19, 7
   13f60:	05 c0       	rjmp	.+10     	; 0x13f6c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
   13f62:	62 0f       	add	r22, r18
   13f64:	73 1f       	adc	r23, r19
   13f66:	31 95       	neg	r19
   13f68:	21 95       	neg	r18
   13f6a:	31 09       	sbc	r19, r1
   13f6c:	7b 01       	movw	r14, r22
   13f6e:	e2 0e       	add	r14, r18
   13f70:	f3 1e       	adc	r15, r19
   13f72:	6b 01       	movw	r12, r22
   13f74:	77 ff       	sbrs	r23, 7
   13f76:	02 c0       	rjmp	.+4      	; 0x13f7c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
   13f78:	d1 2c       	mov	r13, r1
   13f7a:	c1 2c       	mov	r12, r1
   13f7c:	e8 81       	ld	r30, Y
   13f7e:	f9 81       	ldd	r31, Y+1	; 0x01
   13f80:	06 84       	ldd	r0, Z+14	; 0x0e
   13f82:	f7 85       	ldd	r31, Z+15	; 0x0f
   13f84:	e0 2d       	mov	r30, r0
   13f86:	ce 01       	movw	r24, r28
   13f88:	19 95       	eicall
   13f8a:	8e 15       	cp	r24, r14
   13f8c:	9f 05       	cpc	r25, r15
   13f8e:	44 f4       	brge	.+16     	; 0x13fa0 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
   13f90:	e8 81       	ld	r30, Y
   13f92:	f9 81       	ldd	r31, Y+1	; 0x01
   13f94:	06 84       	ldd	r0, Z+14	; 0x0e
   13f96:	f7 85       	ldd	r31, Z+15	; 0x0f
   13f98:	e0 2d       	mov	r30, r0
   13f9a:	ce 01       	movw	r24, r28
   13f9c:	19 95       	eicall
   13f9e:	7c 01       	movw	r14, r24
   13fa0:	47 01       	movw	r8, r14
   13fa2:	8c 18       	sub	r8, r12
   13fa4:	9d 08       	sbc	r9, r13
   13fa6:	17 ff       	sbrs	r17, 7
   13fa8:	05 c0       	rjmp	.+10     	; 0x13fb4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
   13faa:	a0 0e       	add	r10, r16
   13fac:	b1 1e       	adc	r11, r17
   13fae:	11 95       	neg	r17
   13fb0:	01 95       	neg	r16
   13fb2:	11 09       	sbc	r17, r1
   13fb4:	0a 0d       	add	r16, r10
   13fb6:	1b 1d       	adc	r17, r11
   13fb8:	b7 fe       	sbrs	r11, 7
   13fba:	02 c0       	rjmp	.+4      	; 0x13fc0 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
   13fbc:	b1 2c       	mov	r11, r1
   13fbe:	a1 2c       	mov	r10, r1
   13fc0:	e8 81       	ld	r30, Y
   13fc2:	f9 81       	ldd	r31, Y+1	; 0x01
   13fc4:	04 84       	ldd	r0, Z+12	; 0x0c
   13fc6:	f5 85       	ldd	r31, Z+13	; 0x0d
   13fc8:	e0 2d       	mov	r30, r0
   13fca:	ce 01       	movw	r24, r28
   13fcc:	19 95       	eicall
   13fce:	80 17       	cp	r24, r16
   13fd0:	91 07       	cpc	r25, r17
   13fd2:	44 f4       	brge	.+16     	; 0x13fe4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
   13fd4:	e8 81       	ld	r30, Y
   13fd6:	f9 81       	ldd	r31, Y+1	; 0x01
   13fd8:	04 84       	ldd	r0, Z+12	; 0x0c
   13fda:	f5 85       	ldd	r31, Z+13	; 0x0d
   13fdc:	e0 2d       	mov	r30, r0
   13fde:	ce 01       	movw	r24, r28
   13fe0:	19 95       	eicall
   13fe2:	8c 01       	movw	r16, r24
   13fe4:	38 01       	movw	r6, r16
   13fe6:	6a 18       	sub	r6, r10
   13fe8:	7b 08       	sbc	r7, r11
   13fea:	01 50       	subi	r16, 0x01	; 1
   13fec:	11 09       	sbc	r17, r1
   13fee:	97 01       	movw	r18, r14
   13ff0:	21 50       	subi	r18, 0x01	; 1
   13ff2:	31 09       	sbc	r19, r1
   13ff4:	e8 81       	ld	r30, Y
   13ff6:	f9 81       	ldd	r31, Y+1	; 0x01
   13ff8:	06 80       	ldd	r0, Z+6	; 0x06
   13ffa:	f7 81       	ldd	r31, Z+7	; 0x07
   13ffc:	e0 2d       	mov	r30, r0
   13ffe:	a5 01       	movw	r20, r10
   14000:	b6 01       	movw	r22, r12
   14002:	ce 01       	movw	r24, r28
   14004:	19 95       	eicall
   14006:	ee a5       	ldd	r30, Y+46	; 0x2e
   14008:	ff a5       	ldd	r31, Y+47	; 0x2f
   1400a:	80 81       	ld	r24, Z
   1400c:	9a ad       	ldd	r25, Y+58	; 0x3a
   1400e:	89 23       	and	r24, r25
   14010:	80 83       	st	Z, r24
   14012:	88 8d       	ldd	r24, Y+24	; 0x18
   14014:	99 8d       	ldd	r25, Y+25	; 0x19
   14016:	89 2b       	or	r24, r25
   14018:	c9 f4       	brne	.+50     	; 0x1404c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
   1401a:	e8 a9       	ldd	r30, Y+48	; 0x30
   1401c:	f9 a9       	ldd	r31, Y+49	; 0x31
   1401e:	80 81       	ld	r24, Z
   14020:	9b ad       	ldd	r25, Y+59	; 0x3b
   14022:	89 23       	and	r24, r25
   14024:	80 83       	st	Z, r24
   14026:	12 b8       	out	0x02, r1	; 2
   14028:	ea a9       	ldd	r30, Y+50	; 0x32
   1402a:	fb a9       	ldd	r31, Y+51	; 0x33
   1402c:	80 81       	ld	r24, Z
   1402e:	9c ad       	ldd	r25, Y+60	; 0x3c
   14030:	89 23       	and	r24, r25
   14032:	80 83       	st	Z, r24
   14034:	ea a9       	ldd	r30, Y+50	; 0x32
   14036:	fb a9       	ldd	r31, Y+51	; 0x33
   14038:	80 81       	ld	r24, Z
   1403a:	98 ad       	ldd	r25, Y+56	; 0x38
   1403c:	89 2b       	or	r24, r25
   1403e:	80 83       	st	Z, r24
   14040:	e8 a9       	ldd	r30, Y+48	; 0x30
   14042:	f9 a9       	ldd	r31, Y+49	; 0x31
   14044:	80 81       	ld	r24, Z
   14046:	9f a9       	ldd	r25, Y+55	; 0x37
   14048:	89 2b       	or	r24, r25
   1404a:	80 83       	st	Z, r24
   1404c:	e8 a9       	ldd	r30, Y+48	; 0x30
   1404e:	f9 a9       	ldd	r31, Y+49	; 0x31
   14050:	80 81       	ld	r24, Z
   14052:	9b ad       	ldd	r25, Y+59	; 0x3b
   14054:	89 23       	and	r24, r25
   14056:	80 83       	st	Z, r24
   14058:	88 a1       	ldd	r24, Y+32	; 0x20
   1405a:	82 b9       	out	0x02, r24	; 2
   1405c:	ea a9       	ldd	r30, Y+50	; 0x32
   1405e:	fb a9       	ldd	r31, Y+51	; 0x33
   14060:	80 81       	ld	r24, Z
   14062:	9c ad       	ldd	r25, Y+60	; 0x3c
   14064:	89 23       	and	r24, r25
   14066:	80 83       	st	Z, r24
   14068:	ea a9       	ldd	r30, Y+50	; 0x32
   1406a:	fb a9       	ldd	r31, Y+51	; 0x33
   1406c:	80 81       	ld	r24, Z
   1406e:	98 ad       	ldd	r25, Y+56	; 0x38
   14070:	89 2b       	or	r24, r25
   14072:	80 83       	st	Z, r24
   14074:	e8 a9       	ldd	r30, Y+48	; 0x30
   14076:	f9 a9       	ldd	r31, Y+49	; 0x31
   14078:	80 81       	ld	r24, Z
   1407a:	9f a9       	ldd	r25, Y+55	; 0x37
   1407c:	89 2b       	or	r24, r25
   1407e:	80 83       	st	Z, r24
   14080:	86 14       	cp	r8, r6
   14082:	97 04       	cpc	r9, r7
   14084:	2c f0       	brlt	.+10     	; 0x14090 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
   14086:	96 2d       	mov	r25, r6
   14088:	87 2d       	mov	r24, r7
   1408a:	34 01       	movw	r6, r8
   1408c:	89 2e       	mov	r8, r25
   1408e:	98 2e       	mov	r9, r24
   14090:	18 14       	cp	r1, r8
   14092:	19 04       	cpc	r1, r9
   14094:	0c f5       	brge	.+66     	; 0x140d8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
   14096:	c3 01       	movw	r24, r6
   14098:	52 b8       	out	0x02, r5	; 2
   1409a:	ea a9       	ldd	r30, Y+50	; 0x32
   1409c:	fb a9       	ldd	r31, Y+51	; 0x33
   1409e:	20 81       	ld	r18, Z
   140a0:	3c ad       	ldd	r19, Y+60	; 0x3c
   140a2:	23 23       	and	r18, r19
   140a4:	20 83       	st	Z, r18
   140a6:	ea a9       	ldd	r30, Y+50	; 0x32
   140a8:	fb a9       	ldd	r31, Y+51	; 0x33
   140aa:	20 81       	ld	r18, Z
   140ac:	38 ad       	ldd	r19, Y+56	; 0x38
   140ae:	23 2b       	or	r18, r19
   140b0:	20 83       	st	Z, r18
   140b2:	42 b8       	out	0x02, r4	; 2
   140b4:	ea a9       	ldd	r30, Y+50	; 0x32
   140b6:	fb a9       	ldd	r31, Y+51	; 0x33
   140b8:	20 81       	ld	r18, Z
   140ba:	3c ad       	ldd	r19, Y+60	; 0x3c
   140bc:	23 23       	and	r18, r19
   140be:	20 83       	st	Z, r18
   140c0:	ea a9       	ldd	r30, Y+50	; 0x32
   140c2:	fb a9       	ldd	r31, Y+51	; 0x33
   140c4:	20 81       	ld	r18, Z
   140c6:	38 ad       	ldd	r19, Y+56	; 0x38
   140c8:	23 2b       	or	r18, r19
   140ca:	20 83       	st	Z, r18
   140cc:	01 97       	sbiw	r24, 0x01	; 1
   140ce:	21 f7       	brne	.-56     	; 0x14098 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
   140d0:	81 e0       	ldi	r24, 0x01	; 1
   140d2:	88 1a       	sub	r8, r24
   140d4:	91 08       	sbc	r9, r1
   140d6:	dc cf       	rjmp	.-72     	; 0x14090 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
   140d8:	88 8d       	ldd	r24, Y+24	; 0x18
   140da:	99 8d       	ldd	r25, Y+25	; 0x19
   140dc:	00 97       	sbiw	r24, 0x00	; 0
   140de:	51 f5       	brne	.+84     	; 0x14134 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
   140e0:	0c 89       	ldd	r16, Y+20	; 0x14
   140e2:	1d 89       	ldd	r17, Y+21	; 0x15
   140e4:	01 50       	subi	r16, 0x01	; 1
   140e6:	11 09       	sbc	r17, r1
   140e8:	2a 89       	ldd	r18, Y+18	; 0x12
   140ea:	3b 89       	ldd	r19, Y+19	; 0x13
   140ec:	21 50       	subi	r18, 0x01	; 1
   140ee:	31 09       	sbc	r19, r1
   140f0:	e8 81       	ld	r30, Y
   140f2:	f9 81       	ldd	r31, Y+1	; 0x01
   140f4:	06 80       	ldd	r0, Z+6	; 0x06
   140f6:	f7 81       	ldd	r31, Z+7	; 0x07
   140f8:	e0 2d       	mov	r30, r0
   140fa:	50 e0       	ldi	r21, 0x00	; 0
   140fc:	40 e0       	ldi	r20, 0x00	; 0
   140fe:	70 e0       	ldi	r23, 0x00	; 0
   14100:	60 e0       	ldi	r22, 0x00	; 0
   14102:	ce 01       	movw	r24, r28
   14104:	19 95       	eicall
   14106:	ee a5       	ldd	r30, Y+46	; 0x2e
   14108:	ff a5       	ldd	r31, Y+47	; 0x2f
   1410a:	80 81       	ld	r24, Z
   1410c:	9e a9       	ldd	r25, Y+54	; 0x36
   1410e:	89 2b       	or	r24, r25
   14110:	80 83       	st	Z, r24
   14112:	df 91       	pop	r29
   14114:	cf 91       	pop	r28
   14116:	1f 91       	pop	r17
   14118:	0f 91       	pop	r16
   1411a:	ff 90       	pop	r15
   1411c:	ef 90       	pop	r14
   1411e:	df 90       	pop	r13
   14120:	cf 90       	pop	r12
   14122:	bf 90       	pop	r11
   14124:	af 90       	pop	r10
   14126:	9f 90       	pop	r9
   14128:	8f 90       	pop	r8
   1412a:	7f 90       	pop	r7
   1412c:	6f 90       	pop	r6
   1412e:	5f 90       	pop	r5
   14130:	4f 90       	pop	r4
   14132:	08 95       	ret
   14134:	01 97       	sbiw	r24, 0x01	; 1
   14136:	39 f7       	brne	.-50     	; 0x14106 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
   14138:	ce 01       	movw	r24, r28
   1413a:	0e 94 e8 9e 	call	0x13dd0	; 0x13dd0 <LCDWIKI_KBV::Set_LR()>
   1413e:	e3 cf       	rjmp	.-58     	; 0x14106 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

00014140 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>:
_ZN11LCDWIKI_KBV8Read_RegEja():
   14140:	1f 93       	push	r17
   14142:	cf 93       	push	r28
   14144:	df 93       	push	r29
   14146:	ec 01       	movw	r28, r24
   14148:	14 2f       	mov	r17, r20
   1414a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1414c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1414e:	80 81       	ld	r24, Z
   14150:	9a ad       	ldd	r25, Y+58	; 0x3a
   14152:	89 23       	and	r24, r25
   14154:	80 83       	st	Z, r24
   14156:	e8 a9       	ldd	r30, Y+48	; 0x30
   14158:	f9 a9       	ldd	r31, Y+49	; 0x31
   1415a:	80 81       	ld	r24, Z
   1415c:	9b ad       	ldd	r25, Y+59	; 0x3b
   1415e:	89 23       	and	r24, r25
   14160:	80 83       	st	Z, r24
   14162:	72 b9       	out	0x02, r23	; 2
   14164:	ea a9       	ldd	r30, Y+50	; 0x32
   14166:	fb a9       	ldd	r31, Y+51	; 0x33
   14168:	80 81       	ld	r24, Z
   1416a:	9c ad       	ldd	r25, Y+60	; 0x3c
   1416c:	89 23       	and	r24, r25
   1416e:	80 83       	st	Z, r24
   14170:	ea a9       	ldd	r30, Y+50	; 0x32
   14172:	fb a9       	ldd	r31, Y+51	; 0x33
   14174:	80 81       	ld	r24, Z
   14176:	98 ad       	ldd	r25, Y+56	; 0x38
   14178:	89 2b       	or	r24, r25
   1417a:	80 83       	st	Z, r24
   1417c:	62 b9       	out	0x02, r22	; 2
   1417e:	ea a9       	ldd	r30, Y+50	; 0x32
   14180:	fb a9       	ldd	r31, Y+51	; 0x33
   14182:	80 81       	ld	r24, Z
   14184:	9c ad       	ldd	r25, Y+60	; 0x3c
   14186:	89 23       	and	r24, r25
   14188:	80 83       	st	Z, r24
   1418a:	ea a9       	ldd	r30, Y+50	; 0x32
   1418c:	fb a9       	ldd	r31, Y+51	; 0x33
   1418e:	80 81       	ld	r24, Z
   14190:	98 ad       	ldd	r25, Y+56	; 0x38
   14192:	89 2b       	or	r24, r25
   14194:	80 83       	st	Z, r24
   14196:	e8 a9       	ldd	r30, Y+48	; 0x30
   14198:	f9 a9       	ldd	r31, Y+49	; 0x31
   1419a:	80 81       	ld	r24, Z
   1419c:	9f a9       	ldd	r25, Y+55	; 0x37
   1419e:	89 2b       	or	r24, r25
   141a0:	80 83       	st	Z, r24
   141a2:	81 b1       	in	r24, 0x01	; 1
   141a4:	11 b8       	out	0x01, r1	; 1
   141a6:	61 e0       	ldi	r22, 0x01	; 1
   141a8:	70 e0       	ldi	r23, 0x00	; 0
   141aa:	80 e0       	ldi	r24, 0x00	; 0
   141ac:	90 e0       	ldi	r25, 0x00	; 0
   141ae:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
   141b2:	ec a9       	ldd	r30, Y+52	; 0x34
   141b4:	fd a9       	ldd	r31, Y+53	; 0x35
   141b6:	80 81       	ld	r24, Z
   141b8:	9d ad       	ldd	r25, Y+61	; 0x3d
   141ba:	89 23       	and	r24, r25
   141bc:	80 83       	st	Z, r24
   141be:	20 b1       	in	r18, 0x00	; 0
   141c0:	ec a9       	ldd	r30, Y+52	; 0x34
   141c2:	fd a9       	ldd	r31, Y+53	; 0x35
   141c4:	90 81       	ld	r25, Z
   141c6:	89 ad       	ldd	r24, Y+57	; 0x39
   141c8:	98 2b       	or	r25, r24
   141ca:	90 83       	st	Z, r25
   141cc:	ec a9       	ldd	r30, Y+52	; 0x34
   141ce:	fd a9       	ldd	r31, Y+53	; 0x35
   141d0:	90 81       	ld	r25, Z
   141d2:	8d ad       	ldd	r24, Y+61	; 0x3d
   141d4:	98 23       	and	r25, r24
   141d6:	90 83       	st	Z, r25
   141d8:	80 b1       	in	r24, 0x00	; 0
   141da:	ec a9       	ldd	r30, Y+52	; 0x34
   141dc:	fd a9       	ldd	r31, Y+53	; 0x35
   141de:	90 81       	ld	r25, Z
   141e0:	39 ad       	ldd	r19, Y+57	; 0x39
   141e2:	93 2b       	or	r25, r19
   141e4:	90 83       	st	Z, r25
   141e6:	11 50       	subi	r17, 0x01	; 1
   141e8:	17 ff       	sbrs	r17, 7
   141ea:	e3 cf       	rjmp	.-58     	; 0x141b2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)+0x72>
   141ec:	ee a5       	ldd	r30, Y+46	; 0x2e
   141ee:	ff a5       	ldd	r31, Y+47	; 0x2f
   141f0:	90 81       	ld	r25, Z
   141f2:	3e a9       	ldd	r19, Y+54	; 0x36
   141f4:	93 2b       	or	r25, r19
   141f6:	90 83       	st	Z, r25
   141f8:	91 b1       	in	r25, 0x01	; 1
   141fa:	9f ef       	ldi	r25, 0xFF	; 255
   141fc:	91 b9       	out	0x01, r25	; 1
   141fe:	92 2f       	mov	r25, r18
   14200:	df 91       	pop	r29
   14202:	cf 91       	pop	r28
   14204:	1f 91       	pop	r17
   14206:	08 95       	ret

00014208 <LCDWIKI_KBV::Read_ID()>:
_ZN11LCDWIKI_KBV7Read_IDEv():
   14208:	0f 93       	push	r16
   1420a:	1f 93       	push	r17
   1420c:	cf 93       	push	r28
   1420e:	df 93       	push	r29
   14210:	00 d0       	rcall	.+0      	; 0x14212 <LCDWIKI_KBV::Read_ID()+0xa>
   14212:	cd b7       	in	r28, 0x3d	; 61
   14214:	de b7       	in	r29, 0x3e	; 62
   14216:	8c 01       	movw	r16, r24
   14218:	40 e0       	ldi	r20, 0x00	; 0
   1421a:	64 e0       	ldi	r22, 0x04	; 4
   1421c:	70 e0       	ldi	r23, 0x00	; 0
   1421e:	0e 94 a0 a0 	call	0x14140	; 0x14140 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   14222:	89 2b       	or	r24, r25
   14224:	39 f5       	brne	.+78     	; 0x14274 <LCDWIKI_KBV::Read_ID()+0x6c>
   14226:	41 e0       	ldi	r20, 0x01	; 1
   14228:	64 e0       	ldi	r22, 0x04	; 4
   1422a:	70 e0       	ldi	r23, 0x00	; 0
   1422c:	c8 01       	movw	r24, r16
   1422e:	0e 94 a0 a0 	call	0x14140	; 0x14140 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   14232:	81 15       	cp	r24, r1
   14234:	90 48       	sbci	r25, 0x80	; 128
   14236:	f1 f4       	brne	.+60     	; 0x14274 <LCDWIKI_KBV::Read_ID()+0x6c>
   14238:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <LM75_Compatible_Registers+0x4>
   1423c:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <LM75_Compatible_Registers+0x5>
   14240:	a0 91 8a 02 	lds	r26, 0x028A	; 0x80028a <LM75_Compatible_Registers+0x6>
   14244:	89 83       	std	Y+1, r24	; 0x01
   14246:	9a 83       	std	Y+2, r25	; 0x02
   14248:	ab 83       	std	Y+3, r26	; 0x03
   1424a:	23 e0       	ldi	r18, 0x03	; 3
   1424c:	ae 01       	movw	r20, r28
   1424e:	4f 5f       	subi	r20, 0xFF	; 255
   14250:	5f 4f       	sbci	r21, 0xFF	; 255
   14252:	69 eb       	ldi	r22, 0xB9	; 185
   14254:	70 e0       	ldi	r23, 0x00	; 0
   14256:	c8 01       	movw	r24, r16
   14258:	0e 94 fe 98 	call	0x131fc	; 0x131fc <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1425c:	40 e0       	ldi	r20, 0x00	; 0
   1425e:	60 ed       	ldi	r22, 0xD0	; 208
   14260:	70 e0       	ldi	r23, 0x00	; 0
   14262:	c8 01       	movw	r24, r16
   14264:	0e 94 a0 a0 	call	0x14140	; 0x14140 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   14268:	41 e0       	ldi	r20, 0x01	; 1
   1426a:	60 ed       	ldi	r22, 0xD0	; 208
   1426c:	70 e0       	ldi	r23, 0x00	; 0
   1426e:	c8 01       	movw	r24, r16
   14270:	0e 94 a0 a0 	call	0x14140	; 0x14140 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   14274:	41 e0       	ldi	r20, 0x01	; 1
   14276:	63 ed       	ldi	r22, 0xD3	; 211
   14278:	70 e0       	ldi	r23, 0x00	; 0
   1427a:	c8 01       	movw	r24, r16
   1427c:	0e 94 a0 a0 	call	0x14140	; 0x14140 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   14280:	81 34       	cpi	r24, 0x41	; 65
   14282:	23 e9       	ldi	r18, 0x93	; 147
   14284:	92 07       	cpc	r25, r18
   14286:	91 f0       	breq	.+36     	; 0x142ac <LCDWIKI_KBV::Read_ID()+0xa4>
   14288:	86 38       	cpi	r24, 0x86	; 134
   1428a:	24 e9       	ldi	r18, 0x94	; 148
   1428c:	92 07       	cpc	r25, r18
   1428e:	71 f0       	breq	.+28     	; 0x142ac <LCDWIKI_KBV::Read_ID()+0xa4>
   14290:	88 38       	cpi	r24, 0x88	; 136
   14292:	24 e9       	ldi	r18, 0x94	; 148
   14294:	92 07       	cpc	r25, r18
   14296:	51 f0       	breq	.+20     	; 0x142ac <LCDWIKI_KBV::Read_ID()+0xa4>
   14298:	86 39       	cpi	r24, 0x96	; 150
   1429a:	27 e7       	ldi	r18, 0x77	; 119
   1429c:	92 07       	cpc	r25, r18
   1429e:	31 f0       	breq	.+12     	; 0x142ac <LCDWIKI_KBV::Read_ID()+0xa4>
   142a0:	40 e0       	ldi	r20, 0x00	; 0
   142a2:	70 e0       	ldi	r23, 0x00	; 0
   142a4:	60 e0       	ldi	r22, 0x00	; 0
   142a6:	c8 01       	movw	r24, r16
   142a8:	0e 94 a0 a0 	call	0x14140	; 0x14140 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   142ac:	0f 90       	pop	r0
   142ae:	0f 90       	pop	r0
   142b0:	0f 90       	pop	r0
   142b2:	df 91       	pop	r29
   142b4:	cf 91       	pop	r28
   142b6:	1f 91       	pop	r17
   142b8:	0f 91       	pop	r16
   142ba:	08 95       	ret

000142bc <LCDWIKI_KBV::Vert_Scroll(int, int, int)>:
_ZN11LCDWIKI_KBV11Vert_ScrollEiii():
   142bc:	cf 92       	push	r12
   142be:	df 92       	push	r13
   142c0:	ef 92       	push	r14
   142c2:	ff 92       	push	r15
   142c4:	0f 93       	push	r16
   142c6:	1f 93       	push	r17
   142c8:	cf 93       	push	r28
   142ca:	df 93       	push	r29
   142cc:	00 d0       	rcall	.+0      	; 0x142ce <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x12>
   142ce:	00 d0       	rcall	.+0      	; 0x142d0 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x14>
   142d0:	cd b7       	in	r28, 0x3d	; 61
   142d2:	de b7       	in	r29, 0x3e	; 62
   142d4:	8c 01       	movw	r16, r24
   142d6:	79 01       	movw	r14, r18
   142d8:	88 27       	eor	r24, r24
   142da:	99 27       	eor	r25, r25
   142dc:	84 1b       	sub	r24, r20
   142de:	95 0b       	sbc	r25, r21
   142e0:	6b 01       	movw	r12, r22
   142e2:	82 17       	cp	r24, r18
   142e4:	93 07       	cpc	r25, r19
   142e6:	0c f0       	brlt	.+2      	; 0x142ea <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x2e>
   142e8:	a3 c0       	rjmp	.+326    	; 0x14430 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x174>
   142ea:	24 17       	cp	r18, r20
   142ec:	35 07       	cpc	r19, r21
   142ee:	0c f0       	brlt	.+2      	; 0x142f2 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x36>
   142f0:	9f c0       	rjmp	.+318    	; 0x14430 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x174>
   142f2:	c2 0e       	add	r12, r18
   142f4:	d3 1e       	adc	r13, r19
   142f6:	37 ff       	sbrs	r19, 7
   142f8:	02 c0       	rjmp	.+4      	; 0x142fe <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x42>
   142fa:	c4 0e       	add	r12, r20
   142fc:	d5 1e       	adc	r13, r21
   142fe:	d8 01       	movw	r26, r16
   14300:	58 96       	adiw	r26, 0x18	; 24
   14302:	8d 91       	ld	r24, X+
   14304:	9c 91       	ld	r25, X
   14306:	59 97       	sbiw	r26, 0x19	; 25
   14308:	89 2b       	or	r24, r25
   1430a:	09 f0       	breq	.+2      	; 0x1430e <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x52>
   1430c:	94 c0       	rjmp	.+296    	; 0x14436 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x17a>
   1430e:	d0 96       	adiw	r26, 0x30	; 48
   14310:	ed 91       	ld	r30, X+
   14312:	fc 91       	ld	r31, X
   14314:	d1 97       	sbiw	r26, 0x31	; 49
   14316:	80 81       	ld	r24, Z
   14318:	db 96       	adiw	r26, 0x3b	; 59
   1431a:	9c 91       	ld	r25, X
   1431c:	db 97       	sbiw	r26, 0x3b	; 59
   1431e:	89 23       	and	r24, r25
   14320:	80 83       	st	Z, r24
   14322:	94 96       	adiw	r26, 0x24	; 36
   14324:	8c 91       	ld	r24, X
   14326:	94 97       	sbiw	r26, 0x24	; 36
   14328:	82 b9       	out	0x02, r24	; 2
   1432a:	d2 96       	adiw	r26, 0x32	; 50
   1432c:	ed 91       	ld	r30, X+
   1432e:	fc 91       	ld	r31, X
   14330:	d3 97       	sbiw	r26, 0x33	; 51
   14332:	80 81       	ld	r24, Z
   14334:	dc 96       	adiw	r26, 0x3c	; 60
   14336:	9c 91       	ld	r25, X
   14338:	dc 97       	sbiw	r26, 0x3c	; 60
   1433a:	89 23       	and	r24, r25
   1433c:	80 83       	st	Z, r24
   1433e:	d2 96       	adiw	r26, 0x32	; 50
   14340:	ed 91       	ld	r30, X+
   14342:	fc 91       	ld	r31, X
   14344:	d3 97       	sbiw	r26, 0x33	; 51
   14346:	80 81       	ld	r24, Z
   14348:	d8 96       	adiw	r26, 0x38	; 56
   1434a:	9c 91       	ld	r25, X
   1434c:	d8 97       	sbiw	r26, 0x38	; 56
   1434e:	89 2b       	or	r24, r25
   14350:	80 83       	st	Z, r24
   14352:	d0 96       	adiw	r26, 0x30	; 48
   14354:	ed 91       	ld	r30, X+
   14356:	fc 91       	ld	r31, X
   14358:	d1 97       	sbiw	r26, 0x31	; 49
   1435a:	80 81       	ld	r24, Z
   1435c:	d7 96       	adiw	r26, 0x37	; 55
   1435e:	9c 91       	ld	r25, X
   14360:	d7 97       	sbiw	r26, 0x37	; 55
   14362:	89 2b       	or	r24, r25
   14364:	80 83       	st	Z, r24
   14366:	83 e0       	ldi	r24, 0x03	; 3
   14368:	82 b9       	out	0x02, r24	; 2
   1436a:	d2 96       	adiw	r26, 0x32	; 50
   1436c:	ed 91       	ld	r30, X+
   1436e:	fc 91       	ld	r31, X
   14370:	d3 97       	sbiw	r26, 0x33	; 51
   14372:	80 81       	ld	r24, Z
   14374:	dc 96       	adiw	r26, 0x3c	; 60
   14376:	9c 91       	ld	r25, X
   14378:	dc 97       	sbiw	r26, 0x3c	; 60
   1437a:	89 23       	and	r24, r25
   1437c:	80 83       	st	Z, r24
   1437e:	d2 96       	adiw	r26, 0x32	; 50
   14380:	ed 91       	ld	r30, X+
   14382:	fc 91       	ld	r31, X
   14384:	d3 97       	sbiw	r26, 0x33	; 51
   14386:	80 81       	ld	r24, Z
   14388:	d8 96       	adiw	r26, 0x38	; 56
   1438a:	9c 91       	ld	r25, X
   1438c:	d8 97       	sbiw	r26, 0x38	; 56
   1438e:	89 2b       	or	r24, r25
   14390:	80 83       	st	Z, r24
   14392:	d0 96       	adiw	r26, 0x30	; 48
   14394:	ed 91       	ld	r30, X+
   14396:	fc 91       	ld	r31, X
   14398:	d1 97       	sbiw	r26, 0x31	; 49
   1439a:	80 81       	ld	r24, Z
   1439c:	db 96       	adiw	r26, 0x3b	; 59
   1439e:	9c 91       	ld	r25, X
   143a0:	db 97       	sbiw	r26, 0x3b	; 59
   143a2:	89 23       	and	r24, r25
   143a4:	80 83       	st	Z, r24
   143a6:	96 96       	adiw	r26, 0x26	; 38
   143a8:	8c 91       	ld	r24, X
   143aa:	96 97       	sbiw	r26, 0x26	; 38
   143ac:	82 b9       	out	0x02, r24	; 2
   143ae:	d2 96       	adiw	r26, 0x32	; 50
   143b0:	ed 91       	ld	r30, X+
   143b2:	fc 91       	ld	r31, X
   143b4:	d3 97       	sbiw	r26, 0x33	; 51
   143b6:	80 81       	ld	r24, Z
   143b8:	dc 96       	adiw	r26, 0x3c	; 60
   143ba:	9c 91       	ld	r25, X
   143bc:	dc 97       	sbiw	r26, 0x3c	; 60
   143be:	89 23       	and	r24, r25
   143c0:	80 83       	st	Z, r24
   143c2:	d2 96       	adiw	r26, 0x32	; 50
   143c4:	ed 91       	ld	r30, X+
   143c6:	fc 91       	ld	r31, X
   143c8:	d3 97       	sbiw	r26, 0x33	; 51
   143ca:	80 81       	ld	r24, Z
   143cc:	d8 96       	adiw	r26, 0x38	; 56
   143ce:	9c 91       	ld	r25, X
   143d0:	d8 97       	sbiw	r26, 0x38	; 56
   143d2:	89 2b       	or	r24, r25
   143d4:	80 83       	st	Z, r24
   143d6:	d0 96       	adiw	r26, 0x30	; 48
   143d8:	ed 91       	ld	r30, X+
   143da:	fc 91       	ld	r31, X
   143dc:	d1 97       	sbiw	r26, 0x31	; 49
   143de:	80 81       	ld	r24, Z
   143e0:	d7 96       	adiw	r26, 0x37	; 55
   143e2:	9c 91       	ld	r25, X
   143e4:	d7 97       	sbiw	r26, 0x37	; 55
   143e6:	89 2b       	or	r24, r25
   143e8:	80 83       	st	Z, r24
   143ea:	c2 b8       	out	0x02, r12	; 2
   143ec:	d2 96       	adiw	r26, 0x32	; 50
   143ee:	ed 91       	ld	r30, X+
   143f0:	fc 91       	ld	r31, X
   143f2:	d3 97       	sbiw	r26, 0x33	; 51
   143f4:	80 81       	ld	r24, Z
   143f6:	dc 96       	adiw	r26, 0x3c	; 60
   143f8:	9c 91       	ld	r25, X
   143fa:	dc 97       	sbiw	r26, 0x3c	; 60
   143fc:	89 23       	and	r24, r25
   143fe:	80 83       	st	Z, r24
   14400:	d2 96       	adiw	r26, 0x32	; 50
   14402:	ed 91       	ld	r30, X+
   14404:	fc 91       	ld	r31, X
   14406:	d3 97       	sbiw	r26, 0x33	; 51
   14408:	80 81       	ld	r24, Z
   1440a:	d8 96       	adiw	r26, 0x38	; 56
   1440c:	9c 91       	ld	r25, X
   1440e:	89 2b       	or	r24, r25
   14410:	80 83       	st	Z, r24
   14412:	26 96       	adiw	r28, 0x06	; 6
   14414:	0f b6       	in	r0, 0x3f	; 63
   14416:	f8 94       	cli
   14418:	de bf       	out	0x3e, r29	; 62
   1441a:	0f be       	out	0x3f, r0	; 63
   1441c:	cd bf       	out	0x3d, r28	; 61
   1441e:	df 91       	pop	r29
   14420:	cf 91       	pop	r28
   14422:	1f 91       	pop	r17
   14424:	0f 91       	pop	r16
   14426:	ff 90       	pop	r15
   14428:	ef 90       	pop	r14
   1442a:	df 90       	pop	r13
   1442c:	cf 90       	pop	r12
   1442e:	08 95       	ret
   14430:	f1 2c       	mov	r15, r1
   14432:	e1 2c       	mov	r14, r1
   14434:	64 cf       	rjmp	.-312    	; 0x142fe <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x42>
   14436:	f8 01       	movw	r30, r16
   14438:	80 89       	ldd	r24, Z+16	; 0x10
   1443a:	91 89       	ldd	r25, Z+17	; 0x11
   1443c:	86 1b       	sub	r24, r22
   1443e:	97 0b       	sbc	r25, r23
   14440:	84 1b       	sub	r24, r20
   14442:	95 0b       	sbc	r25, r21
   14444:	79 83       	std	Y+1, r23	; 0x01
   14446:	6a 83       	std	Y+2, r22	; 0x02
   14448:	5b 83       	std	Y+3, r21	; 0x03
   1444a:	4c 83       	std	Y+4, r20	; 0x04
   1444c:	9d 83       	std	Y+5, r25	; 0x05
   1444e:	8e 83       	std	Y+6, r24	; 0x06
   14450:	64 a1       	ldd	r22, Z+36	; 0x24
   14452:	75 a1       	ldd	r23, Z+37	; 0x25
   14454:	26 e0       	ldi	r18, 0x06	; 6
   14456:	ae 01       	movw	r20, r28
   14458:	4f 5f       	subi	r20, 0xFF	; 255
   1445a:	5f 4f       	sbci	r21, 0xFF	; 255
   1445c:	c8 01       	movw	r24, r16
   1445e:	0e 94 fe 98 	call	0x131fc	; 0x131fc <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   14462:	d9 82       	std	Y+1, r13	; 0x01
   14464:	ca 82       	std	Y+2, r12	; 0x02
   14466:	d8 01       	movw	r26, r16
   14468:	96 96       	adiw	r26, 0x26	; 38
   1446a:	6d 91       	ld	r22, X+
   1446c:	7c 91       	ld	r23, X
   1446e:	22 e0       	ldi	r18, 0x02	; 2
   14470:	ae 01       	movw	r20, r28
   14472:	4f 5f       	subi	r20, 0xFF	; 255
   14474:	5f 4f       	sbci	r21, 0xFF	; 255
   14476:	c8 01       	movw	r24, r16
   14478:	0e 94 fe 98 	call	0x131fc	; 0x131fc <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1447c:	f8 01       	movw	r30, r16
   1447e:	80 8d       	ldd	r24, Z+24	; 0x18
   14480:	91 8d       	ldd	r25, Z+25	; 0x19
   14482:	01 97       	sbiw	r24, 0x01	; 1
   14484:	79 f4       	brne	.+30     	; 0x144a4 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1e8>
   14486:	88 e0       	ldi	r24, 0x08	; 8
   14488:	ef 28       	or	r14, r15
   1448a:	09 f4       	brne	.+2      	; 0x1448e <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1d2>
   1448c:	80 e0       	ldi	r24, 0x00	; 0
   1448e:	89 83       	std	Y+1, r24	; 0x01
   14490:	21 e0       	ldi	r18, 0x01	; 1
   14492:	ae 01       	movw	r20, r28
   14494:	4f 5f       	subi	r20, 0xFF	; 255
   14496:	5f 4f       	sbci	r21, 0xFF	; 255
   14498:	61 e0       	ldi	r22, 0x01	; 1
   1449a:	70 e0       	ldi	r23, 0x00	; 0
   1449c:	c8 01       	movw	r24, r16
   1449e:	0e 94 fe 98 	call	0x131fc	; 0x131fc <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   144a2:	b7 cf       	rjmp	.-146    	; 0x14412 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x156>
   144a4:	ef 28       	or	r14, r15
   144a6:	09 f0       	breq	.+2      	; 0x144aa <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1ee>
   144a8:	b4 cf       	rjmp	.-152    	; 0x14412 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x156>
   144aa:	20 e0       	ldi	r18, 0x00	; 0
   144ac:	50 e0       	ldi	r21, 0x00	; 0
   144ae:	40 e0       	ldi	r20, 0x00	; 0
   144b0:	63 e1       	ldi	r22, 0x13	; 19
   144b2:	70 e0       	ldi	r23, 0x00	; 0
   144b4:	f3 cf       	rjmp	.-26     	; 0x1449c <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1e0>

000144b6 <LCDWIKI_KBV::Set_Rotation(unsigned char)>:
_ZN11LCDWIKI_KBV12Set_RotationEh():
   144b6:	0f 93       	push	r16
   144b8:	1f 93       	push	r17
   144ba:	cf 93       	push	r28
   144bc:	df 93       	push	r29
   144be:	ec 01       	movw	r28, r24
   144c0:	86 2f       	mov	r24, r22
   144c2:	83 70       	andi	r24, 0x03	; 3
   144c4:	90 e0       	ldi	r25, 0x00	; 0
   144c6:	9f 8b       	std	Y+23, r25	; 0x17
   144c8:	8e 8b       	std	Y+22, r24	; 0x16
   144ca:	26 2f       	mov	r18, r22
   144cc:	21 70       	andi	r18, 0x01	; 1
   144ce:	60 ff       	sbrs	r22, 0
   144d0:	8e c0       	rjmp	.+284    	; 0x145ee <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x138>
   144d2:	88 89       	ldd	r24, Y+16	; 0x10
   144d4:	99 89       	ldd	r25, Y+17	; 0x11
   144d6:	9b 8b       	std	Y+19, r25	; 0x13
   144d8:	8a 8b       	std	Y+18, r24	; 0x12
   144da:	22 23       	and	r18, r18
   144dc:	09 f4       	brne	.+2      	; 0x144e0 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a>
   144de:	8a c0       	rjmp	.+276    	; 0x145f4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x13e>
   144e0:	8e 85       	ldd	r24, Y+14	; 0x0e
   144e2:	9f 85       	ldd	r25, Y+15	; 0x0f
   144e4:	9d 8b       	std	Y+21, r25	; 0x15
   144e6:	8c 8b       	std	Y+20, r24	; 0x14
   144e8:	ae a5       	ldd	r26, Y+46	; 0x2e
   144ea:	bf a5       	ldd	r27, Y+47	; 0x2f
   144ec:	8c 91       	ld	r24, X
   144ee:	9a ad       	ldd	r25, Y+58	; 0x3a
   144f0:	89 23       	and	r24, r25
   144f2:	8c 93       	st	X, r24
   144f4:	48 8d       	ldd	r20, Y+24	; 0x18
   144f6:	59 8d       	ldd	r21, Y+25	; 0x19
   144f8:	8e 89       	ldd	r24, Y+22	; 0x16
   144fa:	9f 89       	ldd	r25, Y+23	; 0x17
   144fc:	a8 a9       	ldd	r26, Y+48	; 0x30
   144fe:	b9 a9       	ldd	r27, Y+49	; 0x31
   14500:	2b ad       	ldd	r18, Y+59	; 0x3b
   14502:	41 15       	cp	r20, r1
   14504:	51 05       	cpc	r21, r1
   14506:	09 f0       	breq	.+2      	; 0x1450a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x54>
   14508:	7a c0       	rjmp	.+244    	; 0x145fe <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x148>
   1450a:	01 97       	sbiw	r24, 0x01	; 1
   1450c:	83 30       	cpi	r24, 0x03	; 3
   1450e:	91 05       	cpc	r25, r1
   14510:	08 f0       	brcs	.+2      	; 0x14514 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x5e>
   14512:	73 c0       	rjmp	.+230    	; 0x145fa <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x144>
   14514:	88 0f       	add	r24, r24
   14516:	99 1f       	adc	r25, r25
   14518:	fc 01       	movw	r30, r24
   1451a:	ef 5b       	subi	r30, 0xBF	; 191
   1451c:	f7 4f       	sbci	r31, 0xF7	; 247
   1451e:	90 81       	ld	r25, Z
   14520:	38 a5       	ldd	r19, Y+40	; 0x28
   14522:	49 a5       	ldd	r20, Y+41	; 0x29
   14524:	8c 91       	ld	r24, X
   14526:	28 23       	and	r18, r24
   14528:	2c 93       	st	X, r18
   1452a:	42 b9       	out	0x02, r20	; 2
   1452c:	ea a9       	ldd	r30, Y+50	; 0x32
   1452e:	fb a9       	ldd	r31, Y+51	; 0x33
   14530:	80 81       	ld	r24, Z
   14532:	2c ad       	ldd	r18, Y+60	; 0x3c
   14534:	82 23       	and	r24, r18
   14536:	80 83       	st	Z, r24
   14538:	ea a9       	ldd	r30, Y+50	; 0x32
   1453a:	fb a9       	ldd	r31, Y+51	; 0x33
   1453c:	80 81       	ld	r24, Z
   1453e:	28 ad       	ldd	r18, Y+56	; 0x38
   14540:	82 2b       	or	r24, r18
   14542:	80 83       	st	Z, r24
   14544:	32 b9       	out	0x02, r19	; 2
   14546:	ea a9       	ldd	r30, Y+50	; 0x32
   14548:	fb a9       	ldd	r31, Y+51	; 0x33
   1454a:	80 81       	ld	r24, Z
   1454c:	2c ad       	ldd	r18, Y+60	; 0x3c
   1454e:	82 23       	and	r24, r18
   14550:	80 83       	st	Z, r24
   14552:	ea a9       	ldd	r30, Y+50	; 0x32
   14554:	fb a9       	ldd	r31, Y+51	; 0x33
   14556:	80 81       	ld	r24, Z
   14558:	28 ad       	ldd	r18, Y+56	; 0x38
   1455a:	82 2b       	or	r24, r18
   1455c:	80 83       	st	Z, r24
   1455e:	e8 a9       	ldd	r30, Y+48	; 0x30
   14560:	f9 a9       	ldd	r31, Y+49	; 0x31
   14562:	80 81       	ld	r24, Z
   14564:	2f a9       	ldd	r18, Y+55	; 0x37
   14566:	82 2b       	or	r24, r18
   14568:	80 83       	st	Z, r24
   1456a:	80 e1       	ldi	r24, 0x10	; 16
   1456c:	82 b9       	out	0x02, r24	; 2
   1456e:	ea a9       	ldd	r30, Y+50	; 0x32
   14570:	fb a9       	ldd	r31, Y+51	; 0x33
   14572:	80 81       	ld	r24, Z
   14574:	2c ad       	ldd	r18, Y+60	; 0x3c
   14576:	82 23       	and	r24, r18
   14578:	80 83       	st	Z, r24
   1457a:	ea a9       	ldd	r30, Y+50	; 0x32
   1457c:	fb a9       	ldd	r31, Y+51	; 0x33
   1457e:	80 81       	ld	r24, Z
   14580:	28 ad       	ldd	r18, Y+56	; 0x38
   14582:	82 2b       	or	r24, r18
   14584:	80 83       	st	Z, r24
   14586:	92 b9       	out	0x02, r25	; 2
   14588:	ea a9       	ldd	r30, Y+50	; 0x32
   1458a:	fb a9       	ldd	r31, Y+51	; 0x33
   1458c:	80 81       	ld	r24, Z
   1458e:	9c ad       	ldd	r25, Y+60	; 0x3c
   14590:	89 23       	and	r24, r25
   14592:	80 83       	st	Z, r24
   14594:	ea a9       	ldd	r30, Y+50	; 0x32
   14596:	fb a9       	ldd	r31, Y+51	; 0x33
   14598:	80 81       	ld	r24, Z
   1459a:	98 ad       	ldd	r25, Y+56	; 0x38
   1459c:	89 2b       	or	r24, r25
   1459e:	80 83       	st	Z, r24
   145a0:	0c 89       	ldd	r16, Y+20	; 0x14
   145a2:	1d 89       	ldd	r17, Y+21	; 0x15
   145a4:	01 50       	subi	r16, 0x01	; 1
   145a6:	11 09       	sbc	r17, r1
   145a8:	2a 89       	ldd	r18, Y+18	; 0x12
   145aa:	3b 89       	ldd	r19, Y+19	; 0x13
   145ac:	21 50       	subi	r18, 0x01	; 1
   145ae:	31 09       	sbc	r19, r1
   145b0:	e8 81       	ld	r30, Y
   145b2:	f9 81       	ldd	r31, Y+1	; 0x01
   145b4:	06 80       	ldd	r0, Z+6	; 0x06
   145b6:	f7 81       	ldd	r31, Z+7	; 0x07
   145b8:	e0 2d       	mov	r30, r0
   145ba:	50 e0       	ldi	r21, 0x00	; 0
   145bc:	40 e0       	ldi	r20, 0x00	; 0
   145be:	70 e0       	ldi	r23, 0x00	; 0
   145c0:	60 e0       	ldi	r22, 0x00	; 0
   145c2:	ce 01       	movw	r24, r28
   145c4:	19 95       	eicall
   145c6:	48 89       	ldd	r20, Y+16	; 0x10
   145c8:	59 89       	ldd	r21, Y+17	; 0x11
   145ca:	30 e0       	ldi	r19, 0x00	; 0
   145cc:	20 e0       	ldi	r18, 0x00	; 0
   145ce:	70 e0       	ldi	r23, 0x00	; 0
   145d0:	60 e0       	ldi	r22, 0x00	; 0
   145d2:	ce 01       	movw	r24, r28
   145d4:	0e 94 5e a1 	call	0x142bc	; 0x142bc <LCDWIKI_KBV::Vert_Scroll(int, int, int)>
   145d8:	ee a5       	ldd	r30, Y+46	; 0x2e
   145da:	ff a5       	ldd	r31, Y+47	; 0x2f
   145dc:	80 81       	ld	r24, Z
   145de:	9e a9       	ldd	r25, Y+54	; 0x36
   145e0:	89 2b       	or	r24, r25
   145e2:	80 83       	st	Z, r24
   145e4:	df 91       	pop	r29
   145e6:	cf 91       	pop	r28
   145e8:	1f 91       	pop	r17
   145ea:	0f 91       	pop	r16
   145ec:	08 95       	ret
   145ee:	8e 85       	ldd	r24, Y+14	; 0x0e
   145f0:	9f 85       	ldd	r25, Y+15	; 0x0f
   145f2:	71 cf       	rjmp	.-286    	; 0x144d6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x20>
   145f4:	88 89       	ldd	r24, Y+16	; 0x10
   145f6:	99 89       	ldd	r25, Y+17	; 0x11
   145f8:	75 cf       	rjmp	.-278    	; 0x144e4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2e>
   145fa:	90 e3       	ldi	r25, 0x30	; 48
   145fc:	91 cf       	rjmp	.-222    	; 0x14520 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x6a>
   145fe:	46 30       	cpi	r20, 0x06	; 6
   14600:	51 05       	cpc	r21, r1
   14602:	51 f5       	brne	.+84     	; 0x14658 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1a2>
   14604:	81 30       	cpi	r24, 0x01	; 1
   14606:	91 05       	cpc	r25, r1
   14608:	f9 f0       	breq	.+62     	; 0x14648 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x192>
   1460a:	20 f1       	brcs	.+72     	; 0x14654 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x19e>
   1460c:	82 30       	cpi	r24, 0x02	; 2
   1460e:	91 05       	cpc	r25, r1
   14610:	e9 f0       	breq	.+58     	; 0x1464c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x196>
   14612:	03 97       	sbiw	r24, 0x03	; 3
   14614:	e9 f0       	breq	.+58     	; 0x14650 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x19a>
   14616:	8c 91       	ld	r24, X
   14618:	28 23       	and	r18, r24
   1461a:	2c 93       	st	X, r18
   1461c:	88 a5       	ldd	r24, Y+40	; 0x28
   1461e:	82 b9       	out	0x02, r24	; 2
   14620:	ea a9       	ldd	r30, Y+50	; 0x32
   14622:	fb a9       	ldd	r31, Y+51	; 0x33
   14624:	80 81       	ld	r24, Z
   14626:	9c ad       	ldd	r25, Y+60	; 0x3c
   14628:	89 23       	and	r24, r25
   1462a:	80 83       	st	Z, r24
   1462c:	ea a9       	ldd	r30, Y+50	; 0x32
   1462e:	fb a9       	ldd	r31, Y+51	; 0x33
   14630:	80 81       	ld	r24, Z
   14632:	98 ad       	ldd	r25, Y+56	; 0x38
   14634:	89 2b       	or	r24, r25
   14636:	80 83       	st	Z, r24
   14638:	e8 a9       	ldd	r30, Y+48	; 0x30
   1463a:	f9 a9       	ldd	r31, Y+49	; 0x31
   1463c:	80 81       	ld	r24, Z
   1463e:	9f a9       	ldd	r25, Y+55	; 0x37
   14640:	89 2b       	or	r24, r25
   14642:	80 83       	st	Z, r24
   14644:	12 b9       	out	0x02, r17	; 2
   14646:	a0 cf       	rjmp	.-192    	; 0x14588 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14648:	10 ea       	ldi	r17, 0xA0	; 160
   1464a:	e5 cf       	rjmp	.-54     	; 0x14616 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   1464c:	10 e0       	ldi	r17, 0x00	; 0
   1464e:	e3 cf       	rjmp	.-58     	; 0x14616 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   14650:	10 e6       	ldi	r17, 0x60	; 96
   14652:	e1 cf       	rjmp	.-62     	; 0x14616 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   14654:	10 ed       	ldi	r17, 0xD0	; 208
   14656:	df cf       	rjmp	.-66     	; 0x14616 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   14658:	48 30       	cpi	r20, 0x08	; 8
   1465a:	51 05       	cpc	r21, r1
   1465c:	49 f5       	brne	.+82     	; 0x146b0 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1fa>
   1465e:	fb e2       	ldi	r31, 0x2B	; 43
   14660:	81 30       	cpi	r24, 0x01	; 1
   14662:	91 05       	cpc	r25, r1
   14664:	51 f0       	breq	.+20     	; 0x1467a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   14666:	f9 e0       	ldi	r31, 0x09	; 9
   14668:	81 30       	cpi	r24, 0x01	; 1
   1466a:	91 05       	cpc	r25, r1
   1466c:	30 f0       	brcs	.+12     	; 0x1467a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   1466e:	fa e0       	ldi	r31, 0x0A	; 10
   14670:	82 30       	cpi	r24, 0x02	; 2
   14672:	91 05       	cpc	r25, r1
   14674:	11 f0       	breq	.+4      	; 0x1467a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   14676:	03 97       	sbiw	r24, 0x03	; 3
   14678:	c9 f0       	breq	.+50     	; 0x146ac <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1f6>
   1467a:	8c 91       	ld	r24, X
   1467c:	28 23       	and	r18, r24
   1467e:	2c 93       	st	X, r18
   14680:	88 a5       	ldd	r24, Y+40	; 0x28
   14682:	82 b9       	out	0x02, r24	; 2
   14684:	aa a9       	ldd	r26, Y+50	; 0x32
   14686:	bb a9       	ldd	r27, Y+51	; 0x33
   14688:	8c 91       	ld	r24, X
   1468a:	9c ad       	ldd	r25, Y+60	; 0x3c
   1468c:	89 23       	and	r24, r25
   1468e:	8c 93       	st	X, r24
   14690:	aa a9       	ldd	r26, Y+50	; 0x32
   14692:	bb a9       	ldd	r27, Y+51	; 0x33
   14694:	8c 91       	ld	r24, X
   14696:	98 ad       	ldd	r25, Y+56	; 0x38
   14698:	89 2b       	or	r24, r25
   1469a:	8c 93       	st	X, r24
   1469c:	a8 a9       	ldd	r26, Y+48	; 0x30
   1469e:	b9 a9       	ldd	r27, Y+49	; 0x31
   146a0:	8c 91       	ld	r24, X
   146a2:	9f a9       	ldd	r25, Y+55	; 0x37
   146a4:	89 2b       	or	r24, r25
   146a6:	8c 93       	st	X, r24
   146a8:	f2 b9       	out	0x02, r31	; 2
   146aa:	6e cf       	rjmp	.-292    	; 0x14588 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   146ac:	f8 e2       	ldi	r31, 0x28	; 40
   146ae:	e5 cf       	rjmp	.-54     	; 0x1467a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   146b0:	45 30       	cpi	r20, 0x05	; 5
   146b2:	51 05       	cpc	r21, r1
   146b4:	49 f5       	brne	.+82     	; 0x14708 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x252>
   146b6:	e8 e7       	ldi	r30, 0x78	; 120
   146b8:	81 30       	cpi	r24, 0x01	; 1
   146ba:	91 05       	cpc	r25, r1
   146bc:	51 f0       	breq	.+20     	; 0x146d2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   146be:	e8 e0       	ldi	r30, 0x08	; 8
   146c0:	81 30       	cpi	r24, 0x01	; 1
   146c2:	91 05       	cpc	r25, r1
   146c4:	30 f0       	brcs	.+12     	; 0x146d2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   146c6:	e8 ec       	ldi	r30, 0xC8	; 200
   146c8:	82 30       	cpi	r24, 0x02	; 2
   146ca:	91 05       	cpc	r25, r1
   146cc:	11 f0       	breq	.+4      	; 0x146d2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   146ce:	03 97       	sbiw	r24, 0x03	; 3
   146d0:	c9 f0       	breq	.+50     	; 0x14704 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x24e>
   146d2:	8c 91       	ld	r24, X
   146d4:	28 23       	and	r18, r24
   146d6:	2c 93       	st	X, r18
   146d8:	88 a5       	ldd	r24, Y+40	; 0x28
   146da:	82 b9       	out	0x02, r24	; 2
   146dc:	aa a9       	ldd	r26, Y+50	; 0x32
   146de:	bb a9       	ldd	r27, Y+51	; 0x33
   146e0:	8c 91       	ld	r24, X
   146e2:	9c ad       	ldd	r25, Y+60	; 0x3c
   146e4:	89 23       	and	r24, r25
   146e6:	8c 93       	st	X, r24
   146e8:	aa a9       	ldd	r26, Y+50	; 0x32
   146ea:	bb a9       	ldd	r27, Y+51	; 0x33
   146ec:	8c 91       	ld	r24, X
   146ee:	98 ad       	ldd	r25, Y+56	; 0x38
   146f0:	89 2b       	or	r24, r25
   146f2:	8c 93       	st	X, r24
   146f4:	a8 a9       	ldd	r26, Y+48	; 0x30
   146f6:	b9 a9       	ldd	r27, Y+49	; 0x31
   146f8:	8c 91       	ld	r24, X
   146fa:	9f a9       	ldd	r25, Y+55	; 0x37
   146fc:	89 2b       	or	r24, r25
   146fe:	8c 93       	st	X, r24
   14700:	e2 b9       	out	0x02, r30	; 2
   14702:	42 cf       	rjmp	.-380    	; 0x14588 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14704:	e8 ea       	ldi	r30, 0xA8	; 168
   14706:	e5 cf       	rjmp	.-54     	; 0x146d2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   14708:	47 30       	cpi	r20, 0x07	; 7
   1470a:	51 05       	cpc	r21, r1
   1470c:	51 f5       	brne	.+84     	; 0x14762 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2ac>
   1470e:	81 30       	cpi	r24, 0x01	; 1
   14710:	91 05       	cpc	r25, r1
   14712:	f9 f0       	breq	.+62     	; 0x14752 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x29c>
   14714:	20 f1       	brcs	.+72     	; 0x1475e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a8>
   14716:	82 30       	cpi	r24, 0x02	; 2
   14718:	91 05       	cpc	r25, r1
   1471a:	e9 f0       	breq	.+58     	; 0x14756 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a0>
   1471c:	03 97       	sbiw	r24, 0x03	; 3
   1471e:	e9 f0       	breq	.+58     	; 0x1475a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a4>
   14720:	8c 91       	ld	r24, X
   14722:	28 23       	and	r18, r24
   14724:	2c 93       	st	X, r18
   14726:	88 a5       	ldd	r24, Y+40	; 0x28
   14728:	82 b9       	out	0x02, r24	; 2
   1472a:	ea a9       	ldd	r30, Y+50	; 0x32
   1472c:	fb a9       	ldd	r31, Y+51	; 0x33
   1472e:	80 81       	ld	r24, Z
   14730:	9c ad       	ldd	r25, Y+60	; 0x3c
   14732:	89 23       	and	r24, r25
   14734:	80 83       	st	Z, r24
   14736:	ea a9       	ldd	r30, Y+50	; 0x32
   14738:	fb a9       	ldd	r31, Y+51	; 0x33
   1473a:	80 81       	ld	r24, Z
   1473c:	98 ad       	ldd	r25, Y+56	; 0x38
   1473e:	89 2b       	or	r24, r25
   14740:	80 83       	st	Z, r24
   14742:	e8 a9       	ldd	r30, Y+48	; 0x30
   14744:	f9 a9       	ldd	r31, Y+49	; 0x31
   14746:	80 81       	ld	r24, Z
   14748:	9f a9       	ldd	r25, Y+55	; 0x37
   1474a:	89 2b       	or	r24, r25
   1474c:	80 83       	st	Z, r24
   1474e:	72 b9       	out	0x02, r23	; 2
   14750:	1b cf       	rjmp	.-458    	; 0x14588 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14752:	78 ea       	ldi	r23, 0xA8	; 168
   14754:	e5 cf       	rjmp	.-54     	; 0x14720 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   14756:	78 e1       	ldi	r23, 0x18	; 24
   14758:	e3 cf       	rjmp	.-58     	; 0x14720 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   1475a:	78 e7       	ldi	r23, 0x78	; 120
   1475c:	e1 cf       	rjmp	.-62     	; 0x14720 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   1475e:	78 ec       	ldi	r23, 0xC8	; 200
   14760:	df cf       	rjmp	.-66     	; 0x14720 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   14762:	81 30       	cpi	r24, 0x01	; 1
   14764:	91 05       	cpc	r25, r1
   14766:	f9 f0       	breq	.+62     	; 0x147a6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f0>
   14768:	20 f1       	brcs	.+72     	; 0x147b2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2fc>
   1476a:	82 30       	cpi	r24, 0x02	; 2
   1476c:	91 05       	cpc	r25, r1
   1476e:	e9 f0       	breq	.+58     	; 0x147aa <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f4>
   14770:	03 97       	sbiw	r24, 0x03	; 3
   14772:	e9 f0       	breq	.+58     	; 0x147ae <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f8>
   14774:	8c 91       	ld	r24, X
   14776:	28 23       	and	r18, r24
   14778:	2c 93       	st	X, r18
   1477a:	88 a5       	ldd	r24, Y+40	; 0x28
   1477c:	82 b9       	out	0x02, r24	; 2
   1477e:	ea a9       	ldd	r30, Y+50	; 0x32
   14780:	fb a9       	ldd	r31, Y+51	; 0x33
   14782:	80 81       	ld	r24, Z
   14784:	9c ad       	ldd	r25, Y+60	; 0x3c
   14786:	89 23       	and	r24, r25
   14788:	80 83       	st	Z, r24
   1478a:	ea a9       	ldd	r30, Y+50	; 0x32
   1478c:	fb a9       	ldd	r31, Y+51	; 0x33
   1478e:	80 81       	ld	r24, Z
   14790:	98 ad       	ldd	r25, Y+56	; 0x38
   14792:	89 2b       	or	r24, r25
   14794:	80 83       	st	Z, r24
   14796:	e8 a9       	ldd	r30, Y+48	; 0x30
   14798:	f9 a9       	ldd	r31, Y+49	; 0x31
   1479a:	80 81       	ld	r24, Z
   1479c:	9f a9       	ldd	r25, Y+55	; 0x37
   1479e:	89 2b       	or	r24, r25
   147a0:	80 83       	st	Z, r24
   147a2:	32 b9       	out	0x02, r19	; 2
   147a4:	f1 ce       	rjmp	.-542    	; 0x14588 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   147a6:	38 e2       	ldi	r19, 0x28	; 40
   147a8:	e5 cf       	rjmp	.-54     	; 0x14774 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   147aa:	38 e9       	ldi	r19, 0x98	; 152
   147ac:	e3 cf       	rjmp	.-58     	; 0x14774 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   147ae:	38 ef       	ldi	r19, 0xF8	; 248
   147b0:	e1 cf       	rjmp	.-62     	; 0x14774 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   147b2:	38 e4       	ldi	r19, 0x48	; 72
   147b4:	df cf       	rjmp	.-66     	; 0x14774 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>

000147b6 <LCDWIKI_KBV::Get_Rotation() const>:
_ZNK11LCDWIKI_KBV12Get_RotationEv():
   147b6:	fc 01       	movw	r30, r24
   147b8:	86 89       	ldd	r24, Z+22	; 0x16
   147ba:	08 95       	ret

000147bc <LCDWIKI_KBV::Invert_Display(bool)>:
_ZN11LCDWIKI_KBV14Invert_DisplayEb():
   147bc:	fc 01       	movw	r30, r24
   147be:	a6 a5       	ldd	r26, Z+46	; 0x2e
   147c0:	b7 a5       	ldd	r27, Z+47	; 0x2f
   147c2:	8c 91       	ld	r24, X
   147c4:	92 ad       	ldd	r25, Z+58	; 0x3a
   147c6:	89 23       	and	r24, r25
   147c8:	8c 93       	st	X, r24
   147ca:	82 a5       	ldd	r24, Z+42	; 0x2a
   147cc:	40 8d       	ldd	r20, Z+24	; 0x18
   147ce:	51 8d       	ldd	r21, Z+25	; 0x19
   147d0:	a0 a9       	ldd	r26, Z+48	; 0x30
   147d2:	b1 a9       	ldd	r27, Z+49	; 0x31
   147d4:	23 ad       	ldd	r18, Z+59	; 0x3b
   147d6:	9c 91       	ld	r25, X
   147d8:	92 23       	and	r25, r18
   147da:	9c 93       	st	X, r25
   147dc:	41 15       	cp	r20, r1
   147de:	51 05       	cpc	r21, r1
   147e0:	49 f5       	brne	.+82     	; 0x14834 <LCDWIKI_KBV::Invert_Display(bool)+0x78>
   147e2:	91 e6       	ldi	r25, 0x61	; 97
   147e4:	92 b9       	out	0x02, r25	; 2
   147e6:	a2 a9       	ldd	r26, Z+50	; 0x32
   147e8:	b3 a9       	ldd	r27, Z+51	; 0x33
   147ea:	9c 91       	ld	r25, X
   147ec:	24 ad       	ldd	r18, Z+60	; 0x3c
   147ee:	92 23       	and	r25, r18
   147f0:	9c 93       	st	X, r25
   147f2:	a2 a9       	ldd	r26, Z+50	; 0x32
   147f4:	b3 a9       	ldd	r27, Z+51	; 0x33
   147f6:	9c 91       	ld	r25, X
   147f8:	20 ad       	ldd	r18, Z+56	; 0x38
   147fa:	92 2b       	or	r25, r18
   147fc:	9c 93       	st	X, r25
   147fe:	a0 a9       	ldd	r26, Z+48	; 0x30
   14800:	b1 a9       	ldd	r27, Z+49	; 0x31
   14802:	9c 91       	ld	r25, X
   14804:	27 a9       	ldd	r18, Z+55	; 0x37
   14806:	92 2b       	or	r25, r18
   14808:	9c 93       	st	X, r25
   1480a:	68 27       	eor	r22, r24
   1480c:	62 b9       	out	0x02, r22	; 2
   1480e:	a2 a9       	ldd	r26, Z+50	; 0x32
   14810:	b3 a9       	ldd	r27, Z+51	; 0x33
   14812:	8c 91       	ld	r24, X
   14814:	94 ad       	ldd	r25, Z+60	; 0x3c
   14816:	89 23       	and	r24, r25
   14818:	8c 93       	st	X, r24
   1481a:	a2 a9       	ldd	r26, Z+50	; 0x32
   1481c:	b3 a9       	ldd	r27, Z+51	; 0x33
   1481e:	8c 91       	ld	r24, X
   14820:	90 ad       	ldd	r25, Z+56	; 0x38
   14822:	89 2b       	or	r24, r25
   14824:	8c 93       	st	X, r24
   14826:	a6 a5       	ldd	r26, Z+46	; 0x2e
   14828:	b7 a5       	ldd	r27, Z+47	; 0x2f
   1482a:	8c 91       	ld	r24, X
   1482c:	96 a9       	ldd	r25, Z+54	; 0x36
   1482e:	89 2b       	or	r24, r25
   14830:	8c 93       	st	X, r24
   14832:	08 95       	ret
   14834:	41 30       	cpi	r20, 0x01	; 1
   14836:	51 05       	cpc	r21, r1
   14838:	d9 f4       	brne	.+54     	; 0x14870 <LCDWIKI_KBV::Invert_Display(bool)+0xb4>
   1483a:	91 e0       	ldi	r25, 0x01	; 1
   1483c:	92 b9       	out	0x02, r25	; 2
   1483e:	a2 a9       	ldd	r26, Z+50	; 0x32
   14840:	b3 a9       	ldd	r27, Z+51	; 0x33
   14842:	9c 91       	ld	r25, X
   14844:	24 ad       	ldd	r18, Z+60	; 0x3c
   14846:	92 23       	and	r25, r18
   14848:	9c 93       	st	X, r25
   1484a:	a2 a9       	ldd	r26, Z+50	; 0x32
   1484c:	b3 a9       	ldd	r27, Z+51	; 0x33
   1484e:	9c 91       	ld	r25, X
   14850:	20 ad       	ldd	r18, Z+56	; 0x38
   14852:	92 2b       	or	r25, r18
   14854:	9c 93       	st	X, r25
   14856:	a0 a9       	ldd	r26, Z+48	; 0x30
   14858:	b1 a9       	ldd	r27, Z+49	; 0x31
   1485a:	9c 91       	ld	r25, X
   1485c:	27 a9       	ldd	r18, Z+55	; 0x37
   1485e:	92 2b       	or	r25, r18
   14860:	9c 93       	st	X, r25
   14862:	86 17       	cp	r24, r22
   14864:	19 f0       	breq	.+6      	; 0x1486c <LCDWIKI_KBV::Invert_Display(bool)+0xb0>
   14866:	88 e0       	ldi	r24, 0x08	; 8
   14868:	82 b9       	out	0x02, r24	; 2
   1486a:	d1 cf       	rjmp	.-94     	; 0x1480e <LCDWIKI_KBV::Invert_Display(bool)+0x52>
   1486c:	8a e0       	ldi	r24, 0x0A	; 10
   1486e:	fc cf       	rjmp	.-8      	; 0x14868 <LCDWIKI_KBV::Invert_Display(bool)+0xac>
   14870:	86 17       	cp	r24, r22
   14872:	99 f0       	breq	.+38     	; 0x1489a <LCDWIKI_KBV::Invert_Display(bool)+0xde>
   14874:	81 e2       	ldi	r24, 0x21	; 33
   14876:	82 b9       	out	0x02, r24	; 2
   14878:	a2 a9       	ldd	r26, Z+50	; 0x32
   1487a:	b3 a9       	ldd	r27, Z+51	; 0x33
   1487c:	8c 91       	ld	r24, X
   1487e:	94 ad       	ldd	r25, Z+60	; 0x3c
   14880:	89 23       	and	r24, r25
   14882:	8c 93       	st	X, r24
   14884:	a2 a9       	ldd	r26, Z+50	; 0x32
   14886:	b3 a9       	ldd	r27, Z+51	; 0x33
   14888:	8c 91       	ld	r24, X
   1488a:	90 ad       	ldd	r25, Z+56	; 0x38
   1488c:	89 2b       	or	r24, r25
   1488e:	8c 93       	st	X, r24
   14890:	a0 a9       	ldd	r26, Z+48	; 0x30
   14892:	b1 a9       	ldd	r27, Z+49	; 0x31
   14894:	8c 91       	ld	r24, X
   14896:	97 a9       	ldd	r25, Z+55	; 0x37
   14898:	c4 cf       	rjmp	.-120    	; 0x14822 <LCDWIKI_KBV::Invert_Display(bool)+0x66>
   1489a:	80 e2       	ldi	r24, 0x20	; 32
   1489c:	ec cf       	rjmp	.-40     	; 0x14876 <LCDWIKI_KBV::Invert_Display(bool)+0xba>

0001489e <LCDWIKI_KBV::init_table8(void const*, int)>:
_ZN11LCDWIKI_KBV11init_table8EPKvi():
   1489e:	af 92       	push	r10
   148a0:	bf 92       	push	r11
   148a2:	cf 92       	push	r12
   148a4:	df 92       	push	r13
   148a6:	ef 92       	push	r14
   148a8:	ff 92       	push	r15
   148aa:	1f 93       	push	r17
   148ac:	cf 93       	push	r28
   148ae:	df 93       	push	r29
   148b0:	cd b7       	in	r28, 0x3d	; 61
   148b2:	de b7       	in	r29, 0x3e	; 62
   148b4:	68 97       	sbiw	r28, 0x18	; 24
   148b6:	0f b6       	in	r0, 0x3f	; 63
   148b8:	f8 94       	cli
   148ba:	de bf       	out	0x3e, r29	; 62
   148bc:	0f be       	out	0x3f, r0	; 63
   148be:	cd bf       	out	0x3d, r28	; 61
   148c0:	5c 01       	movw	r10, r24
   148c2:	7b 01       	movw	r14, r22
   148c4:	6a 01       	movw	r12, r20
   148c6:	1c 14       	cp	r1, r12
   148c8:	1d 04       	cpc	r1, r13
   148ca:	74 f5       	brge	.+92     	; 0x14928 <LCDWIKI_KBV::init_table8(void const*, int)+0x8a>
   148cc:	f7 01       	movw	r30, r14
   148ce:	64 91       	lpm	r22, Z
   148d0:	31 96       	adiw	r30, 0x01	; 1
   148d2:	14 91       	lpm	r17, Z
   148d4:	f2 e0       	ldi	r31, 0x02	; 2
   148d6:	ef 0e       	add	r14, r31
   148d8:	f1 1c       	adc	r15, r1
   148da:	6f 37       	cpi	r22, 0x7F	; 127
   148dc:	79 f0       	breq	.+30     	; 0x148fc <LCDWIKI_KBV::init_table8(void const*, int)+0x5e>
   148de:	de 01       	movw	r26, r28
   148e0:	11 96       	adiw	r26, 0x01	; 1
   148e2:	30 e0       	ldi	r19, 0x00	; 0
   148e4:	20 e0       	ldi	r18, 0x00	; 0
   148e6:	ad 01       	movw	r20, r26
   148e8:	21 17       	cp	r18, r17
   148ea:	b0 f4       	brcc	.+44     	; 0x14918 <LCDWIKI_KBV::init_table8(void const*, int)+0x7a>
   148ec:	f7 01       	movw	r30, r14
   148ee:	e2 0f       	add	r30, r18
   148f0:	f3 1f       	adc	r31, r19
   148f2:	e4 91       	lpm	r30, Z
   148f4:	ed 93       	st	X+, r30
   148f6:	2f 5f       	subi	r18, 0xFF	; 255
   148f8:	3f 4f       	sbci	r19, 0xFF	; 255
   148fa:	f6 cf       	rjmp	.-20     	; 0x148e8 <LCDWIKI_KBV::init_table8(void const*, int)+0x4a>
   148fc:	61 2f       	mov	r22, r17
   148fe:	70 e0       	ldi	r23, 0x00	; 0
   14900:	90 e0       	ldi	r25, 0x00	; 0
   14902:	80 e0       	ldi	r24, 0x00	; 0
   14904:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
   14908:	10 e0       	ldi	r17, 0x00	; 0
   1490a:	61 2f       	mov	r22, r17
   1490c:	70 e0       	ldi	r23, 0x00	; 0
   1490e:	6e 5f       	subi	r22, 0xFE	; 254
   14910:	7f 4f       	sbci	r23, 0xFF	; 255
   14912:	c6 1a       	sub	r12, r22
   14914:	d7 0a       	sbc	r13, r23
   14916:	d7 cf       	rjmp	.-82     	; 0x148c6 <LCDWIKI_KBV::init_table8(void const*, int)+0x28>
   14918:	e1 0e       	add	r14, r17
   1491a:	f1 1c       	adc	r15, r1
   1491c:	70 e0       	ldi	r23, 0x00	; 0
   1491e:	21 2f       	mov	r18, r17
   14920:	c5 01       	movw	r24, r10
   14922:	0e 94 fe 98 	call	0x131fc	; 0x131fc <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   14926:	f1 cf       	rjmp	.-30     	; 0x1490a <LCDWIKI_KBV::init_table8(void const*, int)+0x6c>
   14928:	68 96       	adiw	r28, 0x18	; 24
   1492a:	0f b6       	in	r0, 0x3f	; 63
   1492c:	f8 94       	cli
   1492e:	de bf       	out	0x3e, r29	; 62
   14930:	0f be       	out	0x3f, r0	; 63
   14932:	cd bf       	out	0x3d, r28	; 61
   14934:	df 91       	pop	r29
   14936:	cf 91       	pop	r28
   14938:	1f 91       	pop	r17
   1493a:	ff 90       	pop	r15
   1493c:	ef 90       	pop	r14
   1493e:	df 90       	pop	r13
   14940:	cf 90       	pop	r12
   14942:	bf 90       	pop	r11
   14944:	af 90       	pop	r10
   14946:	08 95       	ret

00014948 <LCDWIKI_KBV::start(unsigned int)>:
_ZN11LCDWIKI_KBV5startEj():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:954

void LCDWIKI_KBV::start(uint16_t ID)
{
   14948:	0f 93       	push	r16
   1494a:	1f 93       	push	r17
   1494c:	cf 93       	push	r28
   1494e:	df 93       	push	r29
   14950:	ec 01       	movw	r28, r24
   14952:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
	reset();
   14954:	0e 94 a8 98 	call	0x13150	; 0x13150 <LCDWIKI_KBV::reset()>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
   14958:	68 ec       	ldi	r22, 0xC8	; 200
   1495a:	70 e0       	ldi	r23, 0x00	; 0
   1495c:	80 e0       	ldi	r24, 0x00	; 0
   1495e:	90 e0       	ldi	r25, 0x00	; 0
   14960:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
   14964:	06 39       	cpi	r16, 0x96	; 150
   14966:	17 47       	sbci	r17, 0x77	; 119
   14968:	b9 f5       	brne	.+110    	; 0x149d8 <LCDWIKI_KBV::start(unsigned int)+0x90>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
   1496a:	89 e0       	ldi	r24, 0x09	; 9
   1496c:	90 e0       	ldi	r25, 0x00	; 0
   1496e:	99 8f       	std	Y+25, r25	; 0x19
   14970:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   14972:	8a e2       	ldi	r24, 0x2A	; 42
   14974:	90 e0       	ldi	r25, 0x00	; 0
   14976:	9d 8f       	std	Y+29, r25	; 0x1d
   14978:	8c 8f       	std	Y+28, r24	; 0x1c
   1497a:	8b e2       	ldi	r24, 0x2B	; 43
   1497c:	90 e0       	ldi	r25, 0x00	; 0
   1497e:	9f 8f       	std	Y+31, r25	; 0x1f
   14980:	8e 8f       	std	Y+30, r24	; 0x1e
   14982:	8c e2       	ldi	r24, 0x2C	; 44
   14984:	90 e0       	ldi	r25, 0x00	; 0
   14986:	99 a3       	std	Y+33, r25	; 0x21
   14988:	88 a3       	std	Y+32, r24	; 0x20
   1498a:	8e e2       	ldi	r24, 0x2E	; 46
   1498c:	90 e0       	ldi	r25, 0x00	; 0
   1498e:	9b a3       	std	Y+35, r25	; 0x23
   14990:	8a a3       	std	Y+34, r24	; 0x22
   14992:	83 e3       	ldi	r24, 0x33	; 51
   14994:	90 e0       	ldi	r25, 0x00	; 0
   14996:	9d a3       	std	Y+37, r25	; 0x25
   14998:	8c a3       	std	Y+36, r24	; 0x24
   1499a:	87 e3       	ldi	r24, 0x37	; 55
   1499c:	90 e0       	ldi	r25, 0x00	; 0
   1499e:	9f a3       	std	Y+39, r25	; 0x27
   149a0:	8e a3       	std	Y+38, r24	; 0x26
   149a2:	86 e3       	ldi	r24, 0x36	; 54
   149a4:	90 e0       	ldi	r25, 0x00	; 0
   149a6:	99 a7       	std	Y+41, r25	; 0x29
   149a8:	88 a7       	std	Y+40, r24	; 0x28
   149aa:	1b a6       	std	Y+43, r1	; 0x2b
   149ac:	1a a6       	std	Y+42, r1	; 0x2a
   149ae:	1d a6       	std	Y+45, r1	; 0x2d
   149b0:	1c a6       	std	Y+44, r1	; 0x2c
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:996
            	0xF0, 1, 0x69,
            	0x13, 0,
            	0x11, 0,
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
   149b2:	4c e6       	ldi	r20, 0x6C	; 108
   149b4:	50 e0       	ldi	r21, 0x00	; 0
   149b6:	66 e1       	ldi	r22, 0x16	; 22
   149b8:	71 e6       	ldi	r23, 0x61	; 97
   149ba:	ce 01       	movw	r24, r28
   149bc:	0e 94 4f a4 	call	0x1489e	; 0x1489e <LCDWIKI_KBV::init_table8(void const*, int)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
   149c0:	6e 89       	ldd	r22, Y+22	; 0x16
   149c2:	ce 01       	movw	r24, r28
   149c4:	0e 94 5b a2 	call	0x144b6	; 0x144b6 <LCDWIKI_KBV::Set_Rotation(unsigned char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1003
	Invert_Display(false);
   149c8:	60 e0       	ldi	r22, 0x00	; 0
   149ca:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1004
}
   149cc:	df 91       	pop	r29
   149ce:	cf 91       	pop	r28
   149d0:	1f 91       	pop	r17
   149d2:	0f 91       	pop	r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1003
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
	Invert_Display(false);
   149d4:	0c 94 de a3 	jmp	0x147bc	; 0x147bc <LCDWIKI_KBV::Invert_Display(bool)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
   149d8:	8f ef       	ldi	r24, 0xFF	; 255
   149da:	90 e0       	ldi	r25, 0x00	; 0
   149dc:	99 8f       	std	Y+25, r25	; 0x19
   149de:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1000
			break;		
   149e0:	ef cf       	rjmp	.-34     	; 0x149c0 <LCDWIKI_KBV::start(unsigned int)+0x78>

000149e2 <LCDWIKI_KBV::Init_LCD()>:
_ZN11LCDWIKI_KBV8Init_LCDEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:233
}
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
   149e2:	cf 93       	push	r28
   149e4:	df 93       	push	r29
   149e6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
	reset();
   149e8:	0e 94 a8 98 	call	0x13150	; 0x13150 <LCDWIKI_KBV::reset()>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
   149ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
   149ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
   149f0:	01 96       	adiw	r24, 0x01	; 1
   149f2:	29 f4       	brne	.+10     	; 0x149fe <LCDWIKI_KBV::Init_LCD()+0x1c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
	{
		lcd_model = Read_ID(); 
   149f4:	ce 01       	movw	r24, r28
   149f6:	0e 94 04 a1 	call	0x14208	; 0x14208 <LCDWIKI_KBV::Read_ID()>
   149fa:	9b 8f       	std	Y+27, r25	; 0x1b
   149fc:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   149fe:	6a 8d       	ldd	r22, Y+26	; 0x1a
   14a00:	7b 8d       	ldd	r23, Y+27	; 0x1b
   14a02:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:242
//	Set_Rotation(0);
}
   14a04:	df 91       	pop	r29
   14a06:	cf 91       	pop	r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   14a08:	0c 94 a4 a4 	jmp	0x14948	; 0x14948 <LCDWIKI_KBV::start(unsigned int)>

00014a0c <delay_hus(unsigned long)>:
_Z9delay_husm():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:412
}

void LCDWIKI_TOUCH::TP_Set_State(uint8_t val)
{
	touch_statue = val;
}
   14a0c:	0f 93       	push	r16
   14a0e:	1f 93       	push	r17
   14a10:	40 e0       	ldi	r20, 0x00	; 0
   14a12:	04 2f       	mov	r16, r20
   14a14:	10 e0       	ldi	r17, 0x00	; 0
   14a16:	30 e0       	ldi	r19, 0x00	; 0
   14a18:	20 e0       	ldi	r18, 0x00	; 0
   14a1a:	06 17       	cp	r16, r22
   14a1c:	17 07       	cpc	r17, r23
   14a1e:	28 07       	cpc	r18, r24
   14a20:	39 07       	cpc	r19, r25
   14a22:	18 f4       	brcc	.+6      	; 0x14a2a <delay_hus(unsigned long)+0x1e>
   14a24:	00 00       	nop
   14a26:	4f 5f       	subi	r20, 0xFF	; 255
   14a28:	f4 cf       	rjmp	.-24     	; 0x14a12 <delay_hus(unsigned long)+0x6>
   14a2a:	1f 91       	pop	r17
   14a2c:	0f 91       	pop	r16
   14a2e:	08 95       	ret

00014a30 <LCDWIKI_TOUCH::LCDWIKI_TOUCH(signed char, signed char, signed char, signed char, signed char, signed char)>:
_ZN13LCDWIKI_TOUCHC2Eaaaaaa():
   14a30:	8f 92       	push	r8
   14a32:	9f 92       	push	r9
   14a34:	af 92       	push	r10
   14a36:	bf 92       	push	r11
   14a38:	cf 92       	push	r12
   14a3a:	df 92       	push	r13
   14a3c:	ef 92       	push	r14
   14a3e:	ff 92       	push	r15
   14a40:	0f 93       	push	r16
   14a42:	1f 93       	push	r17
   14a44:	cf 93       	push	r28
   14a46:	df 93       	push	r29
   14a48:	ec 01       	movw	r28, r24
   14a4a:	86 2e       	mov	r8, r22
   14a4c:	d4 2e       	mov	r13, r20
   14a4e:	f2 2e       	mov	r15, r18
   14a50:	90 2e       	mov	r9, r16
   14a52:	86 2f       	mov	r24, r22
   14a54:	66 0f       	add	r22, r22
   14a56:	99 0b       	sbc	r25, r25
   14a58:	fc 01       	movw	r30, r24
   14a5a:	ef 57       	subi	r30, 0x7F	; 127
   14a5c:	fc 49       	sbci	r31, 0x9C	; 156
   14a5e:	e4 91       	lpm	r30, Z
   14a60:	f0 e0       	ldi	r31, 0x00	; 0
   14a62:	ee 0f       	add	r30, r30
   14a64:	ff 1f       	adc	r31, r31
   14a66:	e9 53       	subi	r30, 0x39	; 57
   14a68:	fc 49       	sbci	r31, 0x9C	; 156
   14a6a:	25 91       	lpm	r18, Z+
   14a6c:	34 91       	lpm	r19, Z
   14a6e:	39 8b       	std	Y+17, r19	; 0x11
   14a70:	28 8b       	std	Y+16, r18	; 0x10
   14a72:	04 2f       	mov	r16, r20
   14a74:	44 0f       	add	r20, r20
   14a76:	11 0b       	sbc	r17, r17
   14a78:	f8 01       	movw	r30, r16
   14a7a:	ef 57       	subi	r30, 0x7F	; 127
   14a7c:	fc 49       	sbci	r31, 0x9C	; 156
   14a7e:	e4 91       	lpm	r30, Z
   14a80:	f0 e0       	ldi	r31, 0x00	; 0
   14a82:	ee 0f       	add	r30, r30
   14a84:	ff 1f       	adc	r31, r31
   14a86:	e9 53       	subi	r30, 0x39	; 57
   14a88:	fc 49       	sbci	r31, 0x9C	; 156
   14a8a:	25 91       	lpm	r18, Z+
   14a8c:	34 91       	lpm	r19, Z
   14a8e:	3b 8b       	std	Y+19, r19	; 0x13
   14a90:	2a 8b       	std	Y+18, r18	; 0x12
   14a92:	af 2d       	mov	r26, r15
   14a94:	0f 2c       	mov	r0, r15
   14a96:	00 0c       	add	r0, r0
   14a98:	bb 0b       	sbc	r27, r27
   14a9a:	fd 01       	movw	r30, r26
   14a9c:	ef 57       	subi	r30, 0x7F	; 127
   14a9e:	fc 49       	sbci	r31, 0x9C	; 156
   14aa0:	e4 91       	lpm	r30, Z
   14aa2:	f0 e0       	ldi	r31, 0x00	; 0
   14aa4:	ee 0f       	add	r30, r30
   14aa6:	ff 1f       	adc	r31, r31
   14aa8:	e9 54       	subi	r30, 0x49	; 73
   14aaa:	fc 49       	sbci	r31, 0x9C	; 156
   14aac:	25 91       	lpm	r18, Z+
   14aae:	34 91       	lpm	r19, Z
   14ab0:	3d 8b       	std	Y+21, r19	; 0x15
   14ab2:	2c 8b       	std	Y+20, r18	; 0x14
   14ab4:	69 2d       	mov	r22, r9
   14ab6:	09 2c       	mov	r0, r9
   14ab8:	00 0c       	add	r0, r0
   14aba:	77 0b       	sbc	r23, r23
   14abc:	fb 01       	movw	r30, r22
   14abe:	ef 57       	subi	r30, 0x7F	; 127
   14ac0:	fc 49       	sbci	r31, 0x9C	; 156
   14ac2:	e4 91       	lpm	r30, Z
   14ac4:	f0 e0       	ldi	r31, 0x00	; 0
   14ac6:	ee 0f       	add	r30, r30
   14ac8:	ff 1f       	adc	r31, r31
   14aca:	e9 53       	subi	r30, 0x39	; 57
   14acc:	fc 49       	sbci	r31, 0x9C	; 156
   14ace:	25 91       	lpm	r18, Z+
   14ad0:	34 91       	lpm	r19, Z
   14ad2:	3f 8b       	std	Y+23, r19	; 0x17
   14ad4:	2e 8b       	std	Y+22, r18	; 0x16
   14ad6:	4e 2d       	mov	r20, r14
   14ad8:	0e 2c       	mov	r0, r14
   14ada:	00 0c       	add	r0, r0
   14adc:	55 0b       	sbc	r21, r21
   14ade:	fa 01       	movw	r30, r20
   14ae0:	ef 57       	subi	r30, 0x7F	; 127
   14ae2:	fc 49       	sbci	r31, 0x9C	; 156
   14ae4:	e4 91       	lpm	r30, Z
   14ae6:	f0 e0       	ldi	r31, 0x00	; 0
   14ae8:	ee 0f       	add	r30, r30
   14aea:	ff 1f       	adc	r31, r31
   14aec:	e9 54       	subi	r30, 0x49	; 73
   14aee:	fc 49       	sbci	r31, 0x9C	; 156
   14af0:	25 91       	lpm	r18, Z+
   14af2:	34 91       	lpm	r19, Z
   14af4:	39 8f       	std	Y+25, r19	; 0x19
   14af6:	28 8f       	std	Y+24, r18	; 0x18
   14af8:	2c 2d       	mov	r18, r12
   14afa:	0c 2c       	mov	r0, r12
   14afc:	00 0c       	add	r0, r0
   14afe:	33 0b       	sbc	r19, r19
   14b00:	f9 01       	movw	r30, r18
   14b02:	ef 57       	subi	r30, 0x7F	; 127
   14b04:	fc 49       	sbci	r31, 0x9C	; 156
   14b06:	e4 91       	lpm	r30, Z
   14b08:	f0 e0       	ldi	r31, 0x00	; 0
   14b0a:	ee 0f       	add	r30, r30
   14b0c:	ff 1f       	adc	r31, r31
   14b0e:	e9 53       	subi	r30, 0x39	; 57
   14b10:	fc 49       	sbci	r31, 0x9C	; 156
   14b12:	a5 90       	lpm	r10, Z+
   14b14:	b4 90       	lpm	r11, Z
   14b16:	bb 8e       	std	Y+27, r11	; 0x1b
   14b18:	aa 8e       	std	Y+26, r10	; 0x1a
   14b1a:	fc 01       	movw	r30, r24
   14b1c:	e5 5b       	subi	r30, 0xB5	; 181
   14b1e:	fc 49       	sbci	r31, 0x9C	; 156
   14b20:	e4 91       	lpm	r30, Z
   14b22:	ec 8f       	std	Y+28, r30	; 0x1c
   14b24:	f8 01       	movw	r30, r16
   14b26:	e5 5b       	subi	r30, 0xB5	; 181
   14b28:	fc 49       	sbci	r31, 0x9C	; 156
   14b2a:	e4 91       	lpm	r30, Z
   14b2c:	ed 8f       	std	Y+29, r30	; 0x1d
   14b2e:	fd 01       	movw	r30, r26
   14b30:	e5 5b       	subi	r30, 0xB5	; 181
   14b32:	fc 49       	sbci	r31, 0x9C	; 156
   14b34:	e4 91       	lpm	r30, Z
   14b36:	ee 8f       	std	Y+30, r30	; 0x1e
   14b38:	fb 01       	movw	r30, r22
   14b3a:	e5 5b       	subi	r30, 0xB5	; 181
   14b3c:	fc 49       	sbci	r31, 0x9C	; 156
   14b3e:	e4 91       	lpm	r30, Z
   14b40:	ef 8f       	std	Y+31, r30	; 0x1f
   14b42:	fa 01       	movw	r30, r20
   14b44:	e5 5b       	subi	r30, 0xB5	; 181
   14b46:	fc 49       	sbci	r31, 0x9C	; 156
   14b48:	e4 91       	lpm	r30, Z
   14b4a:	e8 a3       	std	Y+32, r30	; 0x20
   14b4c:	f9 01       	movw	r30, r18
   14b4e:	e5 5b       	subi	r30, 0xB5	; 181
   14b50:	fc 49       	sbci	r31, 0x9C	; 156
   14b52:	e4 91       	lpm	r30, Z
   14b54:	e9 a3       	std	Y+33, r30	; 0x21
   14b56:	61 e0       	ldi	r22, 0x01	; 1
   14b58:	88 2d       	mov	r24, r8
   14b5a:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   14b5e:	61 e0       	ldi	r22, 0x01	; 1
   14b60:	8d 2d       	mov	r24, r13
   14b62:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   14b66:	60 e0       	ldi	r22, 0x00	; 0
   14b68:	8f 2d       	mov	r24, r15
   14b6a:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   14b6e:	61 e0       	ldi	r22, 0x01	; 1
   14b70:	89 2d       	mov	r24, r9
   14b72:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   14b76:	60 e0       	ldi	r22, 0x00	; 0
   14b78:	8e 2d       	mov	r24, r14
   14b7a:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   14b7e:	61 e0       	ldi	r22, 0x01	; 1
   14b80:	8c 2d       	mov	r24, r12
   14b82:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   14b86:	1c 86       	std	Y+12, r1	; 0x0c
   14b88:	1d 86       	std	Y+13, r1	; 0x0d
   14b8a:	1e 86       	std	Y+14, r1	; 0x0e
   14b8c:	1f 86       	std	Y+15, r1	; 0x0f
   14b8e:	19 86       	std	Y+9, r1	; 0x09
   14b90:	18 86       	std	Y+8, r1	; 0x08
   14b92:	1b 86       	std	Y+11, r1	; 0x0b
   14b94:	1a 86       	std	Y+10, r1	; 0x0a
   14b96:	19 82       	std	Y+1, r1	; 0x01
   14b98:	18 82       	st	Y, r1
   14b9a:	1b 82       	std	Y+3, r1	; 0x03
   14b9c:	1a 82       	std	Y+2, r1	; 0x02
   14b9e:	8f ef       	ldi	r24, 0xFF	; 255
   14ba0:	9f ef       	ldi	r25, 0xFF	; 255
   14ba2:	9d 83       	std	Y+5, r25	; 0x05
   14ba4:	8c 83       	std	Y+4, r24	; 0x04
   14ba6:	9f 83       	std	Y+7, r25	; 0x07
   14ba8:	8e 83       	std	Y+6, r24	; 0x06
   14baa:	df 91       	pop	r29
   14bac:	cf 91       	pop	r28
   14bae:	1f 91       	pop	r17
   14bb0:	0f 91       	pop	r16
   14bb2:	ff 90       	pop	r15
   14bb4:	ef 90       	pop	r14
   14bb6:	df 90       	pop	r13
   14bb8:	cf 90       	pop	r12
   14bba:	bf 90       	pop	r11
   14bbc:	af 90       	pop	r10
   14bbe:	9f 90       	pop	r9
   14bc0:	8f 90       	pop	r8
   14bc2:	08 95       	ret

00014bc4 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>:
_ZN13LCDWIKI_TOUCH22TP_Write_Byte_LowSpeedEh():
   14bc4:	ef 92       	push	r14
   14bc6:	ff 92       	push	r15
   14bc8:	0f 93       	push	r16
   14bca:	1f 93       	push	r17
   14bcc:	cf 93       	push	r28
   14bce:	df 93       	push	r29
   14bd0:	ec 01       	movw	r28, r24
   14bd2:	f1 2c       	mov	r15, r1
   14bd4:	e1 2c       	mov	r14, r1
   14bd6:	06 2f       	mov	r16, r22
   14bd8:	10 e0       	ldi	r17, 0x00	; 0
   14bda:	ee 89       	ldd	r30, Y+22	; 0x16
   14bdc:	ff 89       	ldd	r31, Y+23	; 0x17
   14bde:	8f 8d       	ldd	r24, Y+31	; 0x1f
   14be0:	98 01       	movw	r18, r16
   14be2:	0e 2c       	mov	r0, r14
   14be4:	02 c0       	rjmp	.+4      	; 0x14bea <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x26>
   14be6:	35 95       	asr	r19
   14be8:	27 95       	ror	r18
   14bea:	0a 94       	dec	r0
   14bec:	e2 f7       	brpl	.-8      	; 0x14be6 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x22>
   14bee:	90 81       	ld	r25, Z
   14bf0:	20 ff       	sbrs	r18, 0
   14bf2:	2f c0       	rjmp	.+94     	; 0x14c52 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x8e>
   14bf4:	89 2b       	or	r24, r25
   14bf6:	80 83       	st	Z, r24
   14bf8:	60 e5       	ldi	r22, 0x50	; 80
   14bfa:	70 e0       	ldi	r23, 0x00	; 0
   14bfc:	80 e0       	ldi	r24, 0x00	; 0
   14bfe:	90 e0       	ldi	r25, 0x00	; 0
   14c00:	0e 94 06 a5 	call	0x14a0c	; 0x14a0c <delay_hus(unsigned long)>
   14c04:	ea 89       	ldd	r30, Y+18	; 0x12
   14c06:	fb 89       	ldd	r31, Y+19	; 0x13
   14c08:	90 81       	ld	r25, Z
   14c0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
   14c0c:	80 95       	com	r24
   14c0e:	89 23       	and	r24, r25
   14c10:	80 83       	st	Z, r24
   14c12:	68 e7       	ldi	r22, 0x78	; 120
   14c14:	70 e0       	ldi	r23, 0x00	; 0
   14c16:	80 e0       	ldi	r24, 0x00	; 0
   14c18:	90 e0       	ldi	r25, 0x00	; 0
   14c1a:	0e 94 06 a5 	call	0x14a0c	; 0x14a0c <delay_hus(unsigned long)>
   14c1e:	ea 89       	ldd	r30, Y+18	; 0x12
   14c20:	fb 89       	ldd	r31, Y+19	; 0x13
   14c22:	80 81       	ld	r24, Z
   14c24:	9d 8d       	ldd	r25, Y+29	; 0x1d
   14c26:	89 2b       	or	r24, r25
   14c28:	80 83       	st	Z, r24
   14c2a:	68 e7       	ldi	r22, 0x78	; 120
   14c2c:	70 e0       	ldi	r23, 0x00	; 0
   14c2e:	80 e0       	ldi	r24, 0x00	; 0
   14c30:	90 e0       	ldi	r25, 0x00	; 0
   14c32:	0e 94 06 a5 	call	0x14a0c	; 0x14a0c <delay_hus(unsigned long)>
   14c36:	8f ef       	ldi	r24, 0xFF	; 255
   14c38:	e8 1a       	sub	r14, r24
   14c3a:	f8 0a       	sbc	r15, r24
   14c3c:	88 e0       	ldi	r24, 0x08	; 8
   14c3e:	e8 16       	cp	r14, r24
   14c40:	f1 04       	cpc	r15, r1
   14c42:	59 f6       	brne	.-106    	; 0x14bda <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x16>
   14c44:	df 91       	pop	r29
   14c46:	cf 91       	pop	r28
   14c48:	1f 91       	pop	r17
   14c4a:	0f 91       	pop	r16
   14c4c:	ff 90       	pop	r15
   14c4e:	ef 90       	pop	r14
   14c50:	08 95       	ret
   14c52:	80 95       	com	r24
   14c54:	89 23       	and	r24, r25
   14c56:	cf cf       	rjmp	.-98     	; 0x14bf6 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x32>

00014c58 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>:
_ZN13LCDWIKI_TOUCH15TP_SetBacklightEh():
   14c58:	1f 93       	push	r17
   14c5a:	cf 93       	push	r28
   14c5c:	df 93       	push	r29
   14c5e:	ec 01       	movw	r28, r24
   14c60:	16 2f       	mov	r17, r22
   14c62:	6f 87       	std	Y+15, r22	; 0x0f
   14c64:	e8 89       	ldd	r30, Y+16	; 0x10
   14c66:	f9 89       	ldd	r31, Y+17	; 0x11
   14c68:	80 81       	ld	r24, Z
   14c6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
   14c6c:	89 2b       	or	r24, r25
   14c6e:	80 83       	st	Z, r24
   14c70:	ea 8d       	ldd	r30, Y+26	; 0x1a
   14c72:	fb 8d       	ldd	r31, Y+27	; 0x1b
   14c74:	80 81       	ld	r24, Z
   14c76:	99 a1       	ldd	r25, Y+33	; 0x21
   14c78:	89 2b       	or	r24, r25
   14c7a:	80 83       	st	Z, r24
   14c7c:	65 e5       	ldi	r22, 0x55	; 85
   14c7e:	ce 01       	movw	r24, r28
   14c80:	0e 94 e2 a5 	call	0x14bc4	; 0x14bc4 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>
   14c84:	61 2f       	mov	r22, r17
   14c86:	ce 01       	movw	r24, r28
   14c88:	df 91       	pop	r29
   14c8a:	cf 91       	pop	r28
   14c8c:	1f 91       	pop	r17
   14c8e:	0c 94 e2 a5 	jmp	0x14bc4	; 0x14bc4 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>

00014c92 <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>:
_ZN13LCDWIKI_TOUCH7TP_InitEhjj():
   14c92:	fc 01       	movw	r30, r24
   14c94:	a6 89       	ldd	r26, Z+22	; 0x16
   14c96:	b7 89       	ldd	r27, Z+23	; 0x17
   14c98:	8c 91       	ld	r24, X
   14c9a:	97 8d       	ldd	r25, Z+31	; 0x1f
   14c9c:	89 2b       	or	r24, r25
   14c9e:	8c 93       	st	X, r24
   14ca0:	a2 89       	ldd	r26, Z+18	; 0x12
   14ca2:	b3 89       	ldd	r27, Z+19	; 0x13
   14ca4:	8c 91       	ld	r24, X
   14ca6:	95 8d       	ldd	r25, Z+29	; 0x1d
   14ca8:	89 2b       	or	r24, r25
   14caa:	8c 93       	st	X, r24
   14cac:	a0 89       	ldd	r26, Z+16	; 0x10
   14cae:	b1 89       	ldd	r27, Z+17	; 0x11
   14cb0:	8c 91       	ld	r24, X
   14cb2:	94 8d       	ldd	r25, Z+28	; 0x1c
   14cb4:	89 2b       	or	r24, r25
   14cb6:	8c 93       	st	X, r24
   14cb8:	a2 8d       	ldd	r26, Z+26	; 0x1a
   14cba:	b3 8d       	ldd	r27, Z+27	; 0x1b
   14cbc:	8c 91       	ld	r24, X
   14cbe:	91 a1       	ldd	r25, Z+33	; 0x21
   14cc0:	89 2b       	or	r24, r25
   14cc2:	8c 93       	st	X, r24
   14cc4:	51 87       	std	Z+9, r21	; 0x09
   14cc6:	40 87       	std	Z+8, r20	; 0x08
   14cc8:	33 87       	std	Z+11, r19	; 0x0b
   14cca:	22 87       	std	Z+10, r18	; 0x0a
_ZN13LCDWIKI_TOUCH16LCD_Set_RotationEh():
   14ccc:	66 87       	std	Z+14, r22	; 0x0e
_ZN13LCDWIKI_TOUCH7TP_InitEhjj():
   14cce:	6f e7       	ldi	r22, 0x7F	; 127
   14cd0:	cf 01       	movw	r24, r30
   14cd2:	0c 94 2c a6 	jmp	0x14c58	; 0x14c58 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>

00014cd6 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)>:
_ZN13LCDWIKI_TOUCH13TP_Write_ByteEh():
   14cd6:	fc 01       	movw	r30, r24
   14cd8:	28 e0       	ldi	r18, 0x08	; 8
   14cda:	30 e0       	ldi	r19, 0x00	; 0
   14cdc:	90 e8       	ldi	r25, 0x80	; 128
   14cde:	a6 89       	ldd	r26, Z+22	; 0x16
   14ce0:	b7 89       	ldd	r27, Z+23	; 0x17
   14ce2:	87 8d       	ldd	r24, Z+31	; 0x1f
   14ce4:	46 2f       	mov	r20, r22
   14ce6:	49 23       	and	r20, r25
   14ce8:	a9 f0       	breq	.+42     	; 0x14d14 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x3e>
   14cea:	4c 91       	ld	r20, X
   14cec:	84 2b       	or	r24, r20
   14cee:	8c 93       	st	X, r24
   14cf0:	a2 89       	ldd	r26, Z+18	; 0x12
   14cf2:	b3 89       	ldd	r27, Z+19	; 0x13
   14cf4:	4c 91       	ld	r20, X
   14cf6:	85 8d       	ldd	r24, Z+29	; 0x1d
   14cf8:	80 95       	com	r24
   14cfa:	84 23       	and	r24, r20
   14cfc:	8c 93       	st	X, r24
   14cfe:	a2 89       	ldd	r26, Z+18	; 0x12
   14d00:	b3 89       	ldd	r27, Z+19	; 0x13
   14d02:	8c 91       	ld	r24, X
   14d04:	45 8d       	ldd	r20, Z+29	; 0x1d
   14d06:	84 2b       	or	r24, r20
   14d08:	8c 93       	st	X, r24
   14d0a:	96 95       	lsr	r25
   14d0c:	21 50       	subi	r18, 0x01	; 1
   14d0e:	31 09       	sbc	r19, r1
   14d10:	31 f7       	brne	.-52     	; 0x14cde <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x8>
   14d12:	08 95       	ret
   14d14:	4c 91       	ld	r20, X
   14d16:	80 95       	com	r24
   14d18:	84 23       	and	r24, r20
   14d1a:	e9 cf       	rjmp	.-46     	; 0x14cee <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x18>

00014d1c <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)>:
_ZN13LCDWIKI_TOUCH11TP_Read_ADCEh():
   14d1c:	cf 93       	push	r28
   14d1e:	df 93       	push	r29
   14d20:	ec 01       	movw	r28, r24
   14d22:	e8 89       	ldd	r30, Y+16	; 0x10
   14d24:	f9 89       	ldd	r31, Y+17	; 0x11
   14d26:	90 81       	ld	r25, Z
   14d28:	8c 8d       	ldd	r24, Y+28	; 0x1c
   14d2a:	80 95       	com	r24
   14d2c:	89 23       	and	r24, r25
   14d2e:	80 83       	st	Z, r24
   14d30:	ea 89       	ldd	r30, Y+18	; 0x12
   14d32:	fb 89       	ldd	r31, Y+19	; 0x13
   14d34:	90 81       	ld	r25, Z
   14d36:	8d 8d       	ldd	r24, Y+29	; 0x1d
   14d38:	80 95       	com	r24
   14d3a:	89 23       	and	r24, r25
   14d3c:	80 83       	st	Z, r24
   14d3e:	ee 89       	ldd	r30, Y+22	; 0x16
   14d40:	ff 89       	ldd	r31, Y+23	; 0x17
   14d42:	90 81       	ld	r25, Z
   14d44:	8f 8d       	ldd	r24, Y+31	; 0x1f
   14d46:	80 95       	com	r24
   14d48:	89 23       	and	r24, r25
   14d4a:	80 83       	st	Z, r24
   14d4c:	ce 01       	movw	r24, r28
   14d4e:	0e 94 6b a6 	call	0x14cd6	; 0x14cd6 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)>
   14d52:	ea 89       	ldd	r30, Y+18	; 0x12
   14d54:	fb 89       	ldd	r31, Y+19	; 0x13
   14d56:	90 81       	ld	r25, Z
   14d58:	8d 8d       	ldd	r24, Y+29	; 0x1d
   14d5a:	80 95       	com	r24
   14d5c:	89 23       	and	r24, r25
   14d5e:	80 83       	st	Z, r24
   14d60:	61 e0       	ldi	r22, 0x01	; 1
   14d62:	70 e0       	ldi	r23, 0x00	; 0
   14d64:	80 e0       	ldi	r24, 0x00	; 0
   14d66:	90 e0       	ldi	r25, 0x00	; 0
   14d68:	0e 94 06 a5 	call	0x14a0c	; 0x14a0c <delay_hus(unsigned long)>
   14d6c:	ea 89       	ldd	r30, Y+18	; 0x12
   14d6e:	fb 89       	ldd	r31, Y+19	; 0x13
   14d70:	80 81       	ld	r24, Z
   14d72:	9d 8d       	ldd	r25, Y+29	; 0x1d
   14d74:	89 2b       	or	r24, r25
   14d76:	80 83       	st	Z, r24
   14d78:	ea 89       	ldd	r30, Y+18	; 0x12
   14d7a:	fb 89       	ldd	r31, Y+19	; 0x13
   14d7c:	90 81       	ld	r25, Z
   14d7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
   14d80:	80 95       	com	r24
   14d82:	89 23       	and	r24, r25
   14d84:	80 83       	st	Z, r24
   14d86:	30 e1       	ldi	r19, 0x10	; 16
   14d88:	90 e0       	ldi	r25, 0x00	; 0
   14d8a:	80 e0       	ldi	r24, 0x00	; 0
   14d8c:	88 0f       	add	r24, r24
   14d8e:	99 1f       	adc	r25, r25
   14d90:	ea 89       	ldd	r30, Y+18	; 0x12
   14d92:	fb 89       	ldd	r31, Y+19	; 0x13
   14d94:	40 81       	ld	r20, Z
   14d96:	2d 8d       	ldd	r18, Y+29	; 0x1d
   14d98:	20 95       	com	r18
   14d9a:	24 23       	and	r18, r20
   14d9c:	20 83       	st	Z, r18
   14d9e:	ea 89       	ldd	r30, Y+18	; 0x12
   14da0:	fb 89       	ldd	r31, Y+19	; 0x13
   14da2:	20 81       	ld	r18, Z
   14da4:	4d 8d       	ldd	r20, Y+29	; 0x1d
   14da6:	24 2b       	or	r18, r20
   14da8:	20 83       	st	Z, r18
   14daa:	ec 89       	ldd	r30, Y+20	; 0x14
   14dac:	fd 89       	ldd	r31, Y+21	; 0x15
   14dae:	20 81       	ld	r18, Z
   14db0:	4e 8d       	ldd	r20, Y+30	; 0x1e
   14db2:	24 23       	and	r18, r20
   14db4:	09 f0       	breq	.+2      	; 0x14db8 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0x9c>
   14db6:	01 96       	adiw	r24, 0x01	; 1
   14db8:	31 50       	subi	r19, 0x01	; 1
   14dba:	41 f7       	brne	.-48     	; 0x14d8c <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0x70>
   14dbc:	e8 89       	ldd	r30, Y+16	; 0x10
   14dbe:	f9 89       	ldd	r31, Y+17	; 0x11
   14dc0:	20 81       	ld	r18, Z
   14dc2:	3c 8d       	ldd	r19, Y+28	; 0x1c
   14dc4:	23 2b       	or	r18, r19
   14dc6:	20 83       	st	Z, r18
   14dc8:	24 e0       	ldi	r18, 0x04	; 4
   14dca:	96 95       	lsr	r25
   14dcc:	87 95       	ror	r24
   14dce:	2a 95       	dec	r18
   14dd0:	e1 f7       	brne	.-8      	; 0x14dca <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0xae>
   14dd2:	df 91       	pop	r29
   14dd4:	cf 91       	pop	r28
   14dd6:	08 95       	ret

00014dd8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh():
   14dd8:	9f 92       	push	r9
   14dda:	af 92       	push	r10
   14ddc:	bf 92       	push	r11
   14dde:	cf 92       	push	r12
   14de0:	df 92       	push	r13
   14de2:	ef 92       	push	r14
   14de4:	ff 92       	push	r15
   14de6:	0f 93       	push	r16
   14de8:	1f 93       	push	r17
   14dea:	cf 93       	push	r28
   14dec:	df 93       	push	r29
   14dee:	00 d0       	rcall	.+0      	; 0x14df0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x18>
   14df0:	00 d0       	rcall	.+0      	; 0x14df2 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x1a>
   14df2:	00 d0       	rcall	.+0      	; 0x14df4 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x1c>
   14df4:	1f 92       	push	r1
   14df6:	cd b7       	in	r28, 0x3d	; 61
   14df8:	de b7       	in	r29, 0x3e	; 62
   14dfa:	5c 01       	movw	r10, r24
   14dfc:	96 2e       	mov	r9, r22
   14dfe:	8e 01       	movw	r16, r28
   14e00:	0f 5f       	subi	r16, 0xFF	; 255
   14e02:	1f 4f       	sbci	r17, 0xFF	; 255
   14e04:	6e 01       	movw	r12, r28
   14e06:	8b e0       	ldi	r24, 0x0B	; 11
   14e08:	c8 0e       	add	r12, r24
   14e0a:	d1 1c       	adc	r13, r1
   14e0c:	78 01       	movw	r14, r16
   14e0e:	69 2d       	mov	r22, r9
   14e10:	c5 01       	movw	r24, r10
   14e12:	0e 94 8e a6 	call	0x14d1c	; 0x14d1c <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)>
   14e16:	d7 01       	movw	r26, r14
   14e18:	8d 93       	st	X+, r24
   14e1a:	9d 93       	st	X+, r25
   14e1c:	7d 01       	movw	r14, r26
   14e1e:	ac 15       	cp	r26, r12
   14e20:	bd 05       	cpc	r27, r13
   14e22:	a9 f7       	brne	.-22     	; 0x14e0e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x36>
   14e24:	a8 01       	movw	r20, r16
   14e26:	48 5f       	subi	r20, 0xF8	; 248
   14e28:	5f 4f       	sbci	r21, 0xFF	; 255
   14e2a:	f8 01       	movw	r30, r16
   14e2c:	d8 01       	movw	r26, r16
   14e2e:	8d 91       	ld	r24, X+
   14e30:	9c 91       	ld	r25, X
   14e32:	11 97       	sbiw	r26, 0x01	; 1
   14e34:	22 81       	ldd	r18, Z+2	; 0x02
   14e36:	33 81       	ldd	r19, Z+3	; 0x03
   14e38:	28 17       	cp	r18, r24
   14e3a:	39 07       	cpc	r19, r25
   14e3c:	20 f4       	brcc	.+8      	; 0x14e46 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x6e>
   14e3e:	2d 93       	st	X+, r18
   14e40:	3c 93       	st	X, r19
   14e42:	93 83       	std	Z+3, r25	; 0x03
   14e44:	82 83       	std	Z+2, r24	; 0x02
   14e46:	32 96       	adiw	r30, 0x02	; 2
   14e48:	e4 17       	cp	r30, r20
   14e4a:	f5 07       	cpc	r31, r21
   14e4c:	79 f7       	brne	.-34     	; 0x14e2c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x54>
   14e4e:	0e 5f       	subi	r16, 0xFE	; 254
   14e50:	1f 4f       	sbci	r17, 0xFF	; 255
   14e52:	e0 17       	cp	r30, r16
   14e54:	f1 07       	cpc	r31, r17
   14e56:	49 f7       	brne	.-46     	; 0x14e2a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x52>
   14e58:	8b 81       	ldd	r24, Y+3	; 0x03
   14e5a:	9c 81       	ldd	r25, Y+4	; 0x04
   14e5c:	2d 81       	ldd	r18, Y+5	; 0x05
   14e5e:	3e 81       	ldd	r19, Y+6	; 0x06
   14e60:	82 0f       	add	r24, r18
   14e62:	93 1f       	adc	r25, r19
   14e64:	2f 81       	ldd	r18, Y+7	; 0x07
   14e66:	38 85       	ldd	r19, Y+8	; 0x08
   14e68:	82 0f       	add	r24, r18
   14e6a:	93 1f       	adc	r25, r19
   14e6c:	63 e0       	ldi	r22, 0x03	; 3
   14e6e:	70 e0       	ldi	r23, 0x00	; 0
   14e70:	0e 94 59 d8 	call	0x1b0b2	; 0x1b0b2 <__udivmodhi4>
   14e74:	cb 01       	movw	r24, r22
   14e76:	2a 96       	adiw	r28, 0x0a	; 10
   14e78:	0f b6       	in	r0, 0x3f	; 63
   14e7a:	f8 94       	cli
   14e7c:	de bf       	out	0x3e, r29	; 62
   14e7e:	0f be       	out	0x3f, r0	; 63
   14e80:	cd bf       	out	0x3d, r28	; 61
   14e82:	df 91       	pop	r29
   14e84:	cf 91       	pop	r28
   14e86:	1f 91       	pop	r17
   14e88:	0f 91       	pop	r16
   14e8a:	ff 90       	pop	r15
   14e8c:	ef 90       	pop	r14
   14e8e:	df 90       	pop	r13
   14e90:	cf 90       	pop	r12
   14e92:	bf 90       	pop	r11
   14e94:	af 90       	pop	r10
   14e96:	9f 90       	pop	r9
   14e98:	08 95       	ret

00014e9a <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>:
_ZN13LCDWIKI_TOUCH18TP_Read_CoordinateEPjS0_():
   14e9a:	cf 92       	push	r12
   14e9c:	df 92       	push	r13
   14e9e:	ef 92       	push	r14
   14ea0:	ff 92       	push	r15
   14ea2:	0f 93       	push	r16
   14ea4:	1f 93       	push	r17
   14ea6:	cf 93       	push	r28
   14ea8:	df 93       	push	r29
   14eaa:	ec 01       	movw	r28, r24
   14eac:	7b 01       	movw	r14, r22
   14eae:	8a 01       	movw	r16, r20
   14eb0:	60 ed       	ldi	r22, 0xD0	; 208
   14eb2:	0e 94 ec a6 	call	0x14dd8	; 0x14dd8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>
   14eb6:	6c 01       	movw	r12, r24
   14eb8:	60 e9       	ldi	r22, 0x90	; 144
   14eba:	ce 01       	movw	r24, r28
   14ebc:	0e 94 ec a6 	call	0x14dd8	; 0x14dd8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>
   14ec0:	f7 01       	movw	r30, r14
   14ec2:	d1 82       	std	Z+1, r13	; 0x01
   14ec4:	c0 82       	st	Z, r12
   14ec6:	f8 01       	movw	r30, r16
   14ec8:	91 83       	std	Z+1, r25	; 0x01
   14eca:	80 83       	st	Z, r24
   14ecc:	81 e0       	ldi	r24, 0x01	; 1
   14ece:	df 91       	pop	r29
   14ed0:	cf 91       	pop	r28
   14ed2:	1f 91       	pop	r17
   14ed4:	0f 91       	pop	r16
   14ed6:	ff 90       	pop	r15
   14ed8:	ef 90       	pop	r14
   14eda:	df 90       	pop	r13
   14edc:	cf 90       	pop	r12
   14ede:	08 95       	ret

00014ee0 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>:
_ZN13LCDWIKI_TOUCH19TP_Read_Coordinate2EPjS0_():
   14ee0:	cf 92       	push	r12
   14ee2:	df 92       	push	r13
   14ee4:	ef 92       	push	r14
   14ee6:	ff 92       	push	r15
   14ee8:	0f 93       	push	r16
   14eea:	1f 93       	push	r17
   14eec:	cf 93       	push	r28
   14eee:	df 93       	push	r29
   14ef0:	00 d0       	rcall	.+0      	; 0x14ef2 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x12>
   14ef2:	00 d0       	rcall	.+0      	; 0x14ef4 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x14>
   14ef4:	1f 92       	push	r1
   14ef6:	1f 92       	push	r1
   14ef8:	cd b7       	in	r28, 0x3d	; 61
   14efa:	de b7       	in	r29, 0x3e	; 62
   14efc:	6c 01       	movw	r12, r24
   14efe:	7b 01       	movw	r14, r22
   14f00:	8a 01       	movw	r16, r20
   14f02:	ae 01       	movw	r20, r28
   14f04:	4b 5f       	subi	r20, 0xFB	; 251
   14f06:	5f 4f       	sbci	r21, 0xFF	; 255
   14f08:	be 01       	movw	r22, r28
   14f0a:	69 5f       	subi	r22, 0xF9	; 249
   14f0c:	7f 4f       	sbci	r23, 0xFF	; 255
   14f0e:	0e 94 4d a7 	call	0x14e9a	; 0x14e9a <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>
   14f12:	81 11       	cpse	r24, r1
   14f14:	10 c0       	rjmp	.+32     	; 0x14f36 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x56>
   14f16:	80 e0       	ldi	r24, 0x00	; 0
   14f18:	28 96       	adiw	r28, 0x08	; 8
   14f1a:	0f b6       	in	r0, 0x3f	; 63
   14f1c:	f8 94       	cli
   14f1e:	de bf       	out	0x3e, r29	; 62
   14f20:	0f be       	out	0x3f, r0	; 63
   14f22:	cd bf       	out	0x3d, r28	; 61
   14f24:	df 91       	pop	r29
   14f26:	cf 91       	pop	r28
   14f28:	1f 91       	pop	r17
   14f2a:	0f 91       	pop	r16
   14f2c:	ff 90       	pop	r15
   14f2e:	ef 90       	pop	r14
   14f30:	df 90       	pop	r13
   14f32:	cf 90       	pop	r12
   14f34:	08 95       	ret
   14f36:	ae 01       	movw	r20, r28
   14f38:	4f 5f       	subi	r20, 0xFF	; 255
   14f3a:	5f 4f       	sbci	r21, 0xFF	; 255
   14f3c:	be 01       	movw	r22, r28
   14f3e:	6d 5f       	subi	r22, 0xFD	; 253
   14f40:	7f 4f       	sbci	r23, 0xFF	; 255
   14f42:	c6 01       	movw	r24, r12
   14f44:	0e 94 4d a7 	call	0x14e9a	; 0x14e9a <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>
   14f48:	88 23       	and	r24, r24
   14f4a:	29 f3       	breq	.-54     	; 0x14f16 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   14f4c:	2b 81       	ldd	r18, Y+3	; 0x03
   14f4e:	3c 81       	ldd	r19, Y+4	; 0x04
   14f50:	6f 81       	ldd	r22, Y+7	; 0x07
   14f52:	78 85       	ldd	r23, Y+8	; 0x08
   14f54:	62 17       	cp	r22, r18
   14f56:	73 07       	cpc	r23, r19
   14f58:	40 f0       	brcs	.+16     	; 0x14f6a <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x8a>
   14f5a:	c9 01       	movw	r24, r18
   14f5c:	c2 96       	adiw	r24, 0x32	; 50
   14f5e:	68 17       	cp	r22, r24
   14f60:	79 07       	cpc	r23, r25
   14f62:	40 f0       	brcs	.+16     	; 0x14f74 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x94>
   14f64:	26 17       	cp	r18, r22
   14f66:	37 07       	cpc	r19, r23
   14f68:	b0 f2       	brcs	.-84     	; 0x14f16 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   14f6a:	cb 01       	movw	r24, r22
   14f6c:	c2 96       	adiw	r24, 0x32	; 50
   14f6e:	28 17       	cp	r18, r24
   14f70:	39 07       	cpc	r19, r25
   14f72:	88 f6       	brcc	.-94     	; 0x14f16 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   14f74:	89 81       	ldd	r24, Y+1	; 0x01
   14f76:	9a 81       	ldd	r25, Y+2	; 0x02
   14f78:	4d 81       	ldd	r20, Y+5	; 0x05
   14f7a:	5e 81       	ldd	r21, Y+6	; 0x06
   14f7c:	48 17       	cp	r20, r24
   14f7e:	59 07       	cpc	r21, r25
   14f80:	40 f0       	brcs	.+16     	; 0x14f92 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xb2>
   14f82:	fc 01       	movw	r30, r24
   14f84:	f2 96       	adiw	r30, 0x32	; 50
   14f86:	4e 17       	cp	r20, r30
   14f88:	5f 07       	cpc	r21, r31
   14f8a:	48 f0       	brcs	.+18     	; 0x14f9e <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xbe>
   14f8c:	84 17       	cp	r24, r20
   14f8e:	95 07       	cpc	r25, r21
   14f90:	10 f2       	brcs	.-124    	; 0x14f16 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   14f92:	fa 01       	movw	r30, r20
   14f94:	f2 96       	adiw	r30, 0x32	; 50
   14f96:	8e 17       	cp	r24, r30
   14f98:	9f 07       	cpc	r25, r31
   14f9a:	08 f0       	brcs	.+2      	; 0x14f9e <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xbe>
   14f9c:	bc cf       	rjmp	.-136    	; 0x14f16 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   14f9e:	26 0f       	add	r18, r22
   14fa0:	37 1f       	adc	r19, r23
   14fa2:	36 95       	lsr	r19
   14fa4:	27 95       	ror	r18
   14fa6:	f7 01       	movw	r30, r14
   14fa8:	31 83       	std	Z+1, r19	; 0x01
   14faa:	20 83       	st	Z, r18
   14fac:	84 0f       	add	r24, r20
   14fae:	95 1f       	adc	r25, r21
   14fb0:	96 95       	lsr	r25
   14fb2:	87 95       	ror	r24
   14fb4:	f8 01       	movw	r30, r16
   14fb6:	91 83       	std	Z+1, r25	; 0x01
   14fb8:	80 83       	st	Z, r24
   14fba:	81 e0       	ldi	r24, 0x01	; 1
   14fbc:	ad cf       	rjmp	.-166    	; 0x14f18 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x38>

00014fbe <LCDWIKI_TOUCH::TP_Scan(unsigned char)>:
_ZN13LCDWIKI_TOUCH7TP_ScanEh():
   14fbe:	cf 92       	push	r12
   14fc0:	df 92       	push	r13
   14fc2:	ef 92       	push	r14
   14fc4:	ff 92       	push	r15
   14fc6:	0f 93       	push	r16
   14fc8:	1f 93       	push	r17
   14fca:	cf 93       	push	r28
   14fcc:	df 93       	push	r29
   14fce:	ec 01       	movw	r28, r24
   14fd0:	96 2f       	mov	r25, r22
   14fd2:	e8 8d       	ldd	r30, Y+24	; 0x18
   14fd4:	f9 8d       	ldd	r31, Y+25	; 0x19
   14fd6:	80 81       	ld	r24, Z
   14fd8:	28 a1       	ldd	r18, Y+32	; 0x20
   14fda:	82 23       	and	r24, r18
   14fdc:	09 f0       	breq	.+2      	; 0x14fe0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x22>
   14fde:	ae c0       	rjmp	.+348    	; 0x1513c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x17e>
   14fe0:	ae 01       	movw	r20, r28
   14fe2:	4a 5f       	subi	r20, 0xFA	; 250
   14fe4:	5f 4f       	sbci	r21, 0xFF	; 255
   14fe6:	be 01       	movw	r22, r28
   14fe8:	6c 5f       	subi	r22, 0xFC	; 252
   14fea:	7f 4f       	sbci	r23, 0xFF	; 255
   14fec:	99 23       	and	r25, r25
   14fee:	d9 f0       	breq	.+54     	; 0x15026 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x68>
   14ff0:	ce 01       	movw	r24, r28
   14ff2:	0e 94 70 a7 	call	0x14ee0	; 0x14ee0 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>
   14ff6:	8c 85       	ldd	r24, Y+12	; 0x0c
   14ff8:	87 fd       	sbrc	r24, 7
   14ffa:	0a c0       	rjmp	.+20     	; 0x15010 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>
   14ffc:	80 ec       	ldi	r24, 0xC0	; 192
   14ffe:	8c 87       	std	Y+12, r24	; 0x0c
   15000:	8c 81       	ldd	r24, Y+4	; 0x04
   15002:	9d 81       	ldd	r25, Y+5	; 0x05
   15004:	99 83       	std	Y+1, r25	; 0x01
   15006:	88 83       	st	Y, r24
   15008:	8e 81       	ldd	r24, Y+6	; 0x06
   1500a:	9f 81       	ldd	r25, Y+7	; 0x07
   1500c:	9b 83       	std	Y+3, r25	; 0x03
   1500e:	8a 83       	std	Y+2, r24	; 0x02
   15010:	8c 85       	ldd	r24, Y+12	; 0x0c
   15012:	80 78       	andi	r24, 0x80	; 128
   15014:	df 91       	pop	r29
   15016:	cf 91       	pop	r28
   15018:	1f 91       	pop	r17
   1501a:	0f 91       	pop	r16
   1501c:	ff 90       	pop	r15
   1501e:	ef 90       	pop	r14
   15020:	df 90       	pop	r13
   15022:	cf 90       	pop	r12
   15024:	08 95       	ret
   15026:	ce 01       	movw	r24, r28
   15028:	0e 94 70 a7 	call	0x14ee0	; 0x14ee0 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>
   1502c:	88 23       	and	r24, r24
   1502e:	19 f3       	breq	.-58     	; 0x14ff6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15030:	2c 81       	ldd	r18, Y+4	; 0x04
   15032:	3d 81       	ldd	r19, Y+5	; 0x05
   15034:	a4 e5       	ldi	r26, 0x54	; 84
   15036:	b3 e0       	ldi	r27, 0x03	; 3
   15038:	0e 94 ca d8 	call	0x1b194	; 0x1b194 <__umulhisi3>
   1503c:	20 e1       	ldi	r18, 0x10	; 16
   1503e:	c2 2e       	mov	r12, r18
   15040:	27 e2       	ldi	r18, 0x27	; 39
   15042:	d2 2e       	mov	r13, r18
   15044:	e1 2c       	mov	r14, r1
   15046:	f1 2c       	mov	r15, r1
   15048:	a7 01       	movw	r20, r14
   1504a:	96 01       	movw	r18, r12
   1504c:	0e 94 a3 d8 	call	0x1b146	; 0x1b146 <__divmodsi4>
   15050:	89 01       	movw	r16, r18
   15052:	0e 50       	subi	r16, 0x0E	; 14
   15054:	11 09       	sbc	r17, r1
   15056:	1d 83       	std	Y+5, r17	; 0x05
   15058:	0c 83       	std	Y+4, r16	; 0x04
   1505a:	2e 81       	ldd	r18, Y+6	; 0x06
   1505c:	3f 81       	ldd	r19, Y+7	; 0x07
   1505e:	a4 e0       	ldi	r26, 0x04	; 4
   15060:	b5 e0       	ldi	r27, 0x05	; 5
   15062:	0e 94 ca d8 	call	0x1b194	; 0x1b194 <__umulhisi3>
   15066:	a7 01       	movw	r20, r14
   15068:	96 01       	movw	r18, r12
   1506a:	0e 94 a3 d8 	call	0x1b146	; 0x1b146 <__divmodsi4>
   1506e:	2e 51       	subi	r18, 0x1E	; 30
   15070:	31 09       	sbc	r19, r1
   15072:	3f 83       	std	Y+7, r19	; 0x07
   15074:	2e 83       	std	Y+6, r18	; 0x06
   15076:	8d 85       	ldd	r24, Y+13	; 0x0d
   15078:	81 30       	cpi	r24, 0x01	; 1
   1507a:	a9 f1       	breq	.+106    	; 0x150e6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x128>
   1507c:	90 f0       	brcs	.+36     	; 0x150a2 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xe4>
   1507e:	82 30       	cpi	r24, 0x02	; 2
   15080:	09 f4       	brne	.+2      	; 0x15084 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xc6>
   15082:	53 c0       	rjmp	.+166    	; 0x1512a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x16c>
   15084:	83 30       	cpi	r24, 0x03	; 3
   15086:	09 f0       	breq	.+2      	; 0x1508a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xcc>
   15088:	b6 cf       	rjmp	.-148    	; 0x14ff6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1508a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1508c:	88 23       	and	r24, r24
   1508e:	e1 f1       	breq	.+120    	; 0x15108 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x14a>
   15090:	81 30       	cpi	r24, 0x01	; 1
   15092:	09 f4       	brne	.+2      	; 0x15096 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xd8>
   15094:	43 c0       	rjmp	.+134    	; 0x1511c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x15e>
   15096:	82 30       	cpi	r24, 0x02	; 2
   15098:	49 f1       	breq	.+82     	; 0x150ec <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x12e>
   1509a:	83 30       	cpi	r24, 0x03	; 3
   1509c:	09 f0       	breq	.+2      	; 0x150a0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xe2>
   1509e:	ab cf       	rjmp	.-170    	; 0x14ff6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   150a0:	2c c0       	rjmp	.+88     	; 0x150fa <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x13c>
   150a2:	8e 85       	ldd	r24, Y+14	; 0x0e
   150a4:	88 23       	and	r24, r24
   150a6:	09 f4       	brne	.+2      	; 0x150aa <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xec>
   150a8:	a6 cf       	rjmp	.-180    	; 0x14ff6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   150aa:	81 30       	cpi	r24, 0x01	; 1
   150ac:	39 f4       	brne	.+14     	; 0x150bc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xfe>
   150ae:	3d 83       	std	Y+5, r19	; 0x05
   150b0:	2c 83       	std	Y+4, r18	; 0x04
   150b2:	8a 85       	ldd	r24, Y+10	; 0x0a
   150b4:	9b 85       	ldd	r25, Y+11	; 0x0b
   150b6:	80 1b       	sub	r24, r16
   150b8:	91 0b       	sbc	r25, r17
   150ba:	2a c0       	rjmp	.+84     	; 0x15110 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x152>
   150bc:	82 30       	cpi	r24, 0x02	; 2
   150be:	39 f4       	brne	.+14     	; 0x150ce <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x110>
   150c0:	88 85       	ldd	r24, Y+8	; 0x08
   150c2:	99 85       	ldd	r25, Y+9	; 0x09
   150c4:	80 1b       	sub	r24, r16
   150c6:	91 0b       	sbc	r25, r17
   150c8:	9d 83       	std	Y+5, r25	; 0x05
   150ca:	8c 83       	std	Y+4, r24	; 0x04
   150cc:	1d c0       	rjmp	.+58     	; 0x15108 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x14a>
   150ce:	83 30       	cpi	r24, 0x03	; 3
   150d0:	09 f0       	breq	.+2      	; 0x150d4 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x116>
   150d2:	91 cf       	rjmp	.-222    	; 0x14ff6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   150d4:	1f 83       	std	Y+7, r17	; 0x07
   150d6:	0e 83       	std	Y+6, r16	; 0x06
   150d8:	88 85       	ldd	r24, Y+8	; 0x08
   150da:	99 85       	ldd	r25, Y+9	; 0x09
   150dc:	82 1b       	sub	r24, r18
   150de:	93 0b       	sbc	r25, r19
   150e0:	9d 83       	std	Y+5, r25	; 0x05
   150e2:	8c 83       	std	Y+4, r24	; 0x04
   150e4:	88 cf       	rjmp	.-240    	; 0x14ff6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   150e6:	8e 85       	ldd	r24, Y+14	; 0x0e
   150e8:	81 11       	cpse	r24, r1
   150ea:	05 c0       	rjmp	.+10     	; 0x150f6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x138>
   150ec:	88 85       	ldd	r24, Y+8	; 0x08
   150ee:	99 85       	ldd	r25, Y+9	; 0x09
   150f0:	80 1b       	sub	r24, r16
   150f2:	91 0b       	sbc	r25, r17
   150f4:	f5 cf       	rjmp	.-22     	; 0x150e0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x122>
   150f6:	81 30       	cpi	r24, 0x01	; 1
   150f8:	29 f4       	brne	.+10     	; 0x15104 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x146>
   150fa:	3d 83       	std	Y+5, r19	; 0x05
   150fc:	2c 83       	std	Y+4, r18	; 0x04
   150fe:	1f 83       	std	Y+7, r17	; 0x07
   15100:	0e 83       	std	Y+6, r16	; 0x06
   15102:	79 cf       	rjmp	.-270    	; 0x14ff6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15104:	82 30       	cpi	r24, 0x02	; 2
   15106:	39 f4       	brne	.+14     	; 0x15116 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x158>
   15108:	8a 85       	ldd	r24, Y+10	; 0x0a
   1510a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1510c:	82 1b       	sub	r24, r18
   1510e:	93 0b       	sbc	r25, r19
   15110:	9f 83       	std	Y+7, r25	; 0x07
   15112:	8e 83       	std	Y+6, r24	; 0x06
   15114:	70 cf       	rjmp	.-288    	; 0x14ff6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15116:	83 30       	cpi	r24, 0x03	; 3
   15118:	09 f0       	breq	.+2      	; 0x1511c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x15e>
   1511a:	6d cf       	rjmp	.-294    	; 0x14ff6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1511c:	88 85       	ldd	r24, Y+8	; 0x08
   1511e:	99 85       	ldd	r25, Y+9	; 0x09
   15120:	82 1b       	sub	r24, r18
   15122:	93 0b       	sbc	r25, r19
   15124:	9d 83       	std	Y+5, r25	; 0x05
   15126:	8c 83       	std	Y+4, r24	; 0x04
   15128:	c4 cf       	rjmp	.-120    	; 0x150b2 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xf4>
   1512a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1512c:	88 23       	and	r24, r24
   1512e:	41 f2       	breq	.-112    	; 0x150c0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x102>
   15130:	81 30       	cpi	r24, 0x01	; 1
   15132:	81 f2       	breq	.-96     	; 0x150d4 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x116>
   15134:	83 30       	cpi	r24, 0x03	; 3
   15136:	09 f0       	breq	.+2      	; 0x1513a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x17c>
   15138:	5e cf       	rjmp	.-324    	; 0x14ff6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1513a:	b9 cf       	rjmp	.-142    	; 0x150ae <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xf0>
   1513c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1513e:	87 ff       	sbrs	r24, 7
   15140:	03 c0       	rjmp	.+6      	; 0x15148 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x18a>
   15142:	8f 77       	andi	r24, 0x7F	; 127
   15144:	8c 87       	std	Y+12, r24	; 0x0c
   15146:	64 cf       	rjmp	.-312    	; 0x15010 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>
   15148:	19 82       	std	Y+1, r1	; 0x01
   1514a:	18 82       	st	Y, r1
   1514c:	1b 82       	std	Y+3, r1	; 0x03
   1514e:	1a 82       	std	Y+2, r1	; 0x02
   15150:	8f ef       	ldi	r24, 0xFF	; 255
   15152:	9f ef       	ldi	r25, 0xFF	; 255
   15154:	9d 83       	std	Y+5, r25	; 0x05
   15156:	8c 83       	std	Y+4, r24	; 0x04
   15158:	9f 83       	std	Y+7, r25	; 0x07
   1515a:	8e 83       	std	Y+6, r24	; 0x06
   1515c:	59 cf       	rjmp	.-334    	; 0x15010 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>

0001515e <LCDWIKI_TOUCH::TP_Set_Rotation(unsigned char)>:
_ZN13LCDWIKI_TOUCH15TP_Set_RotationEh():
   1515e:	fc 01       	movw	r30, r24
   15160:	65 87       	std	Z+13, r22	; 0x0d
   15162:	08 95       	ret

00015164 <LCDWIKI_TOUCH::TP_Get_State() const>:
_ZNK13LCDWIKI_TOUCH12TP_Get_StateEv():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:417

uint8_t LCDWIKI_TOUCH::TP_Get_State(void) const
{
	return touch_statue;
}
   15164:	fc 01       	movw	r30, r24
   15166:	84 85       	ldd	r24, Z+12	; 0x0c
   15168:	08 95       	ret

0001516a <SoftSPIB::SoftSPIB(unsigned char, unsigned char, unsigned char)>:
_ZN8SoftSPIBC2Ehhh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:48
            _cke = 0;
            break;
        case SPI_MODE3:
            _ckp = 1;
            _cke = 1;
            break;
   1516a:	fc 01       	movw	r30, r24
   1516c:	82 2f       	mov	r24, r18
   1516e:	64 83       	std	Z+4, r22	; 0x04
   15170:	43 83       	std	Z+3, r20	; 0x03
   15172:	25 83       	std	Z+5, r18	; 0x05
   15174:	92 e0       	ldi	r25, 0x02	; 2
   15176:	92 83       	std	Z+2, r25	; 0x02
   15178:	10 82       	st	Z, r1
   1517a:	11 82       	std	Z+1, r1	; 0x01
   1517c:	16 82       	std	Z+6, r1	; 0x06
   1517e:	60 e0       	ldi	r22, 0x00	; 0
   15180:	0c 94 84 d2 	jmp	0x1a508	; 0x1a508 <digitalWrite>

00015184 <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
   15184:	cf 93       	push	r28
   15186:	df 93       	push	r29
   15188:	ec 01       	movw	r28, r24
   1518a:	61 e0       	ldi	r22, 0x01	; 1
   1518c:	8c 81       	ldd	r24, Y+4	; 0x04
   1518e:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   15192:	60 e0       	ldi	r22, 0x00	; 0
   15194:	8b 81       	ldd	r24, Y+3	; 0x03
   15196:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   1519a:	61 e0       	ldi	r22, 0x01	; 1
   1519c:	8d 81       	ldd	r24, Y+5	; 0x05
   1519e:	df 91       	pop	r29
   151a0:	cf 91       	pop	r28
   151a2:	0c 94 48 d2 	jmp	0x1a490	; 0x1a490 <pinMode>

000151a6 <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
   151a6:	8f 92       	push	r8
   151a8:	9f 92       	push	r9
   151aa:	af 92       	push	r10
   151ac:	bf 92       	push	r11
   151ae:	cf 92       	push	r12
   151b0:	df 92       	push	r13
   151b2:	ff 92       	push	r15
   151b4:	0f 93       	push	r16
   151b6:	1f 93       	push	r17
   151b8:	cf 93       	push	r28
   151ba:	df 93       	push	r29
   151bc:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
   151be:	fc 01       	movw	r30, r24
   151c0:	86 81       	ldd	r24, Z+6	; 0x06
   151c2:	81 11       	cpse	r24, r1
   151c4:	35 c0       	rjmp	.+106    	; 0x15230 <SoftSPIB::transfer(unsigned char)+0x8a>
   151c6:	86 2f       	mov	r24, r22
   151c8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
   151ca:	ec 01       	movw	r28, r24
   151cc:	d6 95       	lsr	r29
   151ce:	dc 2f       	mov	r29, r28
   151d0:	cc 27       	eor	r28, r28
   151d2:	d7 95       	ror	r29
   151d4:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
   151d6:	66 1f       	adc	r22, r22
   151d8:	66 27       	eor	r22, r22
   151da:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   151dc:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
   151de:	ec 01       	movw	r28, r24
   151e0:	35 e0       	ldi	r19, 0x05	; 5
   151e2:	cc 0f       	add	r28, r28
   151e4:	dd 1f       	adc	r29, r29
   151e6:	3a 95       	dec	r19
   151e8:	e1 f7       	brne	.-8      	; 0x151e2 <SoftSPIB::transfer(unsigned char)+0x3c>
   151ea:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   151ec:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
   151ee:	ec 01       	movw	r28, r24
   151f0:	43 e0       	ldi	r20, 0x03	; 3
   151f2:	cc 0f       	add	r28, r28
   151f4:	dd 1f       	adc	r29, r29
   151f6:	4a 95       	dec	r20
   151f8:	e1 f7       	brne	.-8      	; 0x151f2 <SoftSPIB::transfer(unsigned char)+0x4c>
   151fa:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   151fc:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
   151fe:	ec 01       	movw	r28, r24
   15200:	cc 0f       	add	r28, r28
   15202:	dd 1f       	adc	r29, r29
   15204:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   15206:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
   15208:	ec 01       	movw	r28, r24
   1520a:	d5 95       	asr	r29
   1520c:	c7 95       	ror	r28
   1520e:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   15210:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
   15212:	ec 01       	movw	r28, r24
   15214:	e3 e0       	ldi	r30, 0x03	; 3
   15216:	d5 95       	asr	r29
   15218:	c7 95       	ror	r28
   1521a:	ea 95       	dec	r30
   1521c:	e1 f7       	brne	.-8      	; 0x15216 <SoftSPIB::transfer(unsigned char)+0x70>
   1521e:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
   15220:	6c 2b       	or	r22, r28
   15222:	f5 e0       	ldi	r31, 0x05	; 5
   15224:	95 95       	asr	r25
   15226:	87 95       	ror	r24
   15228:	fa 95       	dec	r31
   1522a:	e1 f7       	brne	.-8      	; 0x15224 <SoftSPIB::transfer(unsigned char)+0x7e>
   1522c:	82 70       	andi	r24, 0x02	; 2
   1522e:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
   15230:	91 e0       	ldi	r25, 0x01	; 1
   15232:	80 e0       	ldi	r24, 0x00	; 0
   15234:	f8 01       	movw	r30, r16
   15236:	21 81       	ldd	r18, Z+1	; 0x01
   15238:	21 11       	cpse	r18, r1
   1523a:	01 c0       	rjmp	.+2      	; 0x1523e <SoftSPIB::transfer(unsigned char)+0x98>
   1523c:	90 e0       	ldi	r25, 0x00	; 0
   1523e:	c9 2e       	mov	r12, r25
   15240:	d8 2e       	mov	r13, r24
   15242:	b1 2c       	mov	r11, r1
   15244:	a1 2c       	mov	r10, r1
   15246:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   15248:	c6 2f       	mov	r28, r22
   1524a:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
   1524c:	f8 01       	movw	r30, r16
   1524e:	80 81       	ld	r24, Z
   15250:	88 23       	and	r24, r24
   15252:	39 f0       	breq	.+14     	; 0x15262 <SoftSPIB::transfer(unsigned char)+0xbc>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
   15254:	f1 e0       	ldi	r31, 0x01	; 1
   15256:	cf 26       	eor	r12, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
   15258:	6c 2d       	mov	r22, r12
   1525a:	f8 01       	movw	r30, r16
   1525c:	85 81       	ldd	r24, Z+5	; 0x05
   1525e:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   15262:	be 01       	movw	r22, r28
   15264:	0a 2c       	mov	r0, r10
   15266:	02 c0       	rjmp	.+4      	; 0x1526c <SoftSPIB::transfer(unsigned char)+0xc6>
   15268:	75 95       	asr	r23
   1526a:	67 95       	ror	r22
   1526c:	0a 94       	dec	r0
   1526e:	e2 f7       	brpl	.-8      	; 0x15268 <SoftSPIB::transfer(unsigned char)+0xc2>
   15270:	61 70       	andi	r22, 0x01	; 1
   15272:	f8 01       	movw	r30, r16
   15274:	84 81       	ldd	r24, Z+4	; 0x04
   15276:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
   1527a:	46 01       	movw	r8, r12
   1527c:	f1 e0       	ldi	r31, 0x01	; 1
   1527e:	8f 26       	eor	r8, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
   15280:	68 2d       	mov	r22, r8
   15282:	f8 01       	movw	r30, r16
   15284:	85 81       	ldd	r24, Z+5	; 0x05
   15286:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:116

        /* ... Read bit */
        {
            bval = digitalRead(_miso);
   1528a:	f8 01       	movw	r30, r16
   1528c:	83 81       	ldd	r24, Z+3	; 0x03
   1528e:	0e 94 b2 d2 	call	0x1a564	; 0x1a564 <digitalRead>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

            if (_order == MSBFIRST) {
   15292:	f8 01       	movw	r30, r16
   15294:	96 81       	ldd	r25, Z+6	; 0x06
   15296:	91 11       	cpse	r25, r1
   15298:	1b c0       	rjmp	.+54     	; 0x152d0 <SoftSPIB::transfer(unsigned char)+0x12a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
   1529a:	ff 0c       	add	r15, r15
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   1529c:	f8 2a       	or	r15, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
   1529e:	f8 01       	movw	r30, r16
   152a0:	80 81       	ld	r24, Z
   152a2:	88 23       	and	r24, r24
   152a4:	d1 f0       	breq	.+52     	; 0x152da <SoftSPIB::transfer(unsigned char)+0x134>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
   152a6:	64 01       	movw	r12, r8
   152a8:	ff ef       	ldi	r31, 0xFF	; 255
   152aa:	af 1a       	sub	r10, r31
   152ac:	bf 0a       	sbc	r11, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98 (discriminator 2)

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
   152ae:	28 e0       	ldi	r18, 0x08	; 8
   152b0:	a2 16       	cp	r10, r18
   152b2:	b1 04       	cpc	r11, r1
   152b4:	59 f6       	brne	.-106    	; 0x1524c <SoftSPIB::transfer(unsigned char)+0xa6>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
   152b6:	8f 2d       	mov	r24, r15
   152b8:	df 91       	pop	r29
   152ba:	cf 91       	pop	r28
   152bc:	1f 91       	pop	r17
   152be:	0f 91       	pop	r16
   152c0:	ff 90       	pop	r15
   152c2:	df 90       	pop	r13
   152c4:	cf 90       	pop	r12
   152c6:	bf 90       	pop	r11
   152c8:	af 90       	pop	r10
   152ca:	9f 90       	pop	r9
   152cc:	8f 90       	pop	r8
   152ce:	08 95       	ret
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   152d0:	87 95       	ror	r24
   152d2:	88 27       	eor	r24, r24
   152d4:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
   152d6:	f6 94       	lsr	r15
   152d8:	e1 cf       	rjmp	.-62     	; 0x1529c <SoftSPIB::transfer(unsigned char)+0xf6>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
   152da:	6c 2d       	mov	r22, r12
   152dc:	85 81       	ldd	r24, Z+5	; 0x05
   152de:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
   152e2:	e2 cf       	rjmp	.-60     	; 0x152a8 <SoftSPIB::transfer(unsigned char)+0x102>

000152e4 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)>:
_ZN9SRAM_23LCC2EP8SoftSPIBh17_SRAM_23LC_Device():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:62
  endCommand();
}

void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
   152e4:	fc 01       	movw	r30, r24
   152e6:	80 e0       	ldi	r24, 0x00	; 0
   152e8:	90 e0       	ldi	r25, 0x00	; 0
   152ea:	a2 e0       	ldi	r26, 0x02	; 2
   152ec:	b0 e0       	ldi	r27, 0x00	; 0
   152ee:	23 30       	cpi	r18, 0x03	; 3
   152f0:	31 05       	cpc	r19, r1
   152f2:	40 f0       	brcs	.+16     	; 0x15304 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>
   152f4:	c9 01       	movw	r24, r18
   152f6:	03 97       	sbiw	r24, 0x03	; 3
   152f8:	03 97       	sbiw	r24, 0x03	; 3
   152fa:	70 f4       	brcc	.+28     	; 0x15318 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x34>
   152fc:	80 e0       	ldi	r24, 0x00	; 0
   152fe:	90 e0       	ldi	r25, 0x00	; 0
   15300:	a1 e0       	ldi	r26, 0x01	; 1
   15302:	b0 e0       	ldi	r27, 0x00	; 0
   15304:	84 83       	std	Z+4, r24	; 0x04
   15306:	95 83       	std	Z+5, r25	; 0x05
   15308:	a6 83       	std	Z+6, r26	; 0x06
   1530a:	b7 83       	std	Z+7, r27	; 0x07
   1530c:	33 83       	std	Z+3, r19	; 0x03
   1530e:	22 83       	std	Z+2, r18	; 0x02
   15310:	71 83       	std	Z+1, r23	; 0x01
   15312:	60 83       	st	Z, r22
   15314:	40 87       	std	Z+8, r20	; 0x08
   15316:	08 95       	ret
   15318:	c9 01       	movw	r24, r18
   1531a:	06 97       	sbiw	r24, 0x06	; 6
   1531c:	02 97       	sbiw	r24, 0x02	; 2
   1531e:	28 f4       	brcc	.+10     	; 0x1532a <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x46>
   15320:	80 e0       	ldi	r24, 0x00	; 0
   15322:	90 e8       	ldi	r25, 0x80	; 128
   15324:	a0 e0       	ldi	r26, 0x00	; 0
   15326:	b0 e0       	ldi	r27, 0x00	; 0
   15328:	ed cf       	rjmp	.-38     	; 0x15304 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>
   1532a:	c9 01       	movw	r24, r18
   1532c:	08 97       	sbiw	r24, 0x08	; 8
   1532e:	02 97       	sbiw	r24, 0x02	; 2
   15330:	68 f7       	brcc	.-38     	; 0x1530c <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x28>
   15332:	80 e0       	ldi	r24, 0x00	; 0
   15334:	90 e2       	ldi	r25, 0x20	; 32
   15336:	a0 e0       	ldi	r26, 0x00	; 0
   15338:	b0 e0       	ldi	r27, 0x00	; 0
   1533a:	e4 cf       	rjmp	.-56     	; 0x15304 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>

0001533c <SRAM_23LC::sendAddressBytes(unsigned long)>:
_ZN9SRAM_23LC16sendAddressBytesEm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:134
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
{
   1533c:	cf 92       	push	r12
   1533e:	df 92       	push	r13
   15340:	ef 92       	push	r14
   15342:	ff 92       	push	r15
   15344:	cf 93       	push	r28
   15346:	df 93       	push	r29
   15348:	ec 01       	movw	r28, r24
   1534a:	6a 01       	movw	r12, r20
   1534c:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
  if (_capacity > 0x10000) {
   1534e:	8c 81       	ldd	r24, Y+4	; 0x04
   15350:	9d 81       	ldd	r25, Y+5	; 0x05
   15352:	ae 81       	ldd	r26, Y+6	; 0x06
   15354:	bf 81       	ldd	r27, Y+7	; 0x07
   15356:	01 97       	sbiw	r24, 0x01	; 1
   15358:	a1 40       	sbci	r26, 0x01	; 1
   1535a:	b1 05       	cpc	r27, r1
   1535c:	38 f0       	brcs	.+14     	; 0x1536c <SRAM_23LC::sendAddressBytes(unsigned long)+0x30>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   1535e:	b7 01       	movw	r22, r14
   15360:	88 27       	eor	r24, r24
   15362:	99 27       	eor	r25, r25
   15364:	88 81       	ld	r24, Y
   15366:	99 81       	ldd	r25, Y+1	; 0x01
   15368:	0e 94 d3 a8 	call	0x151a6	; 0x151a6 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   1536c:	99 27       	eor	r25, r25
   1536e:	8f 2d       	mov	r24, r15
   15370:	7e 2d       	mov	r23, r14
   15372:	6d 2d       	mov	r22, r13
   15374:	88 81       	ld	r24, Y
   15376:	99 81       	ldd	r25, Y+1	; 0x01
   15378:	0e 94 d3 a8 	call	0x151a6	; 0x151a6 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   1537c:	6c 2d       	mov	r22, r12
   1537e:	88 81       	ld	r24, Y
   15380:	99 81       	ldd	r25, Y+1	; 0x01
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   15382:	df 91       	pop	r29
   15384:	cf 91       	pop	r28
   15386:	ff 90       	pop	r15
   15388:	ef 90       	pop	r14
   1538a:	df 90       	pop	r13
   1538c:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   1538e:	0c 94 d3 a8 	jmp	0x151a6	; 0x151a6 <SoftSPIB::transfer(unsigned char)>

00015392 <SRAM_23LC::startCommand(unsigned char, unsigned long)>:
_ZN9SRAM_23LC12startCommandEhm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:123

  return(length);
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
   15392:	cf 92       	push	r12
   15394:	df 92       	push	r13
   15396:	ef 92       	push	r14
   15398:	ff 92       	push	r15
   1539a:	0f 93       	push	r16
   1539c:	1f 93       	push	r17
   1539e:	cf 93       	push	r28
   153a0:	8c 01       	movw	r16, r24
   153a2:	c6 2f       	mov	r28, r22
   153a4:	69 01       	movw	r12, r18
   153a6:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   153a8:	60 e0       	ldi	r22, 0x00	; 0
   153aa:	fc 01       	movw	r30, r24
   153ac:	80 85       	ldd	r24, Z+8	; 0x08
   153ae:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   153b2:	6c 2f       	mov	r22, r28
   153b4:	f8 01       	movw	r30, r16
   153b6:	80 81       	ld	r24, Z
   153b8:	91 81       	ldd	r25, Z+1	; 0x01
   153ba:	0e 94 d3 a8 	call	0x151a6	; 0x151a6 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:128
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
   153be:	c2 50       	subi	r28, 0x02	; 2
   153c0:	c2 30       	cpi	r28, 0x02	; 2
   153c2:	60 f4       	brcc	.+24     	; 0x153dc <SRAM_23LC::startCommand(unsigned char, unsigned long)+0x4a>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
    sendAddressBytes(address);
   153c4:	b7 01       	movw	r22, r14
   153c6:	a6 01       	movw	r20, r12
   153c8:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:131
  }
}
   153ca:	cf 91       	pop	r28
   153cc:	1f 91       	pop	r17
   153ce:	0f 91       	pop	r16
   153d0:	ff 90       	pop	r15
   153d2:	ef 90       	pop	r14
   153d4:	df 90       	pop	r13
   153d6:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);

  _spi->transfer(command);
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   153d8:	0c 94 9e a9 	jmp	0x1533c	; 0x1533c <SRAM_23LC::sendAddressBytes(unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:131
  }
}
   153dc:	cf 91       	pop	r28
   153de:	1f 91       	pop	r17
   153e0:	0f 91       	pop	r16
   153e2:	ff 90       	pop	r15
   153e4:	ef 90       	pop	r14
   153e6:	df 90       	pop	r13
   153e8:	cf 90       	pop	r12
   153ea:	08 95       	ret

000153ec <SRAM_23LC::endCommand()>:
_ZN9SRAM_23LC10endCommandEv():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   153ec:	61 e0       	ldi	r22, 0x01	; 1
   153ee:	fc 01       	movw	r30, r24
   153f0:	80 85       	ldd	r24, Z+8	; 0x08
   153f2:	0c 94 84 d2 	jmp	0x1a508	; 0x1a508 <digitalWrite>

000153f6 <SRAM_23LC::begin()>:
_ZN9SRAM_23LC5beginEv():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:49




void SRAM_23LC::begin(void)
{
   153f6:	cf 93       	push	r28
   153f8:	df 93       	push	r29
   153fa:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50
  digitalWrite(_chipSelect, HIGH);
   153fc:	61 e0       	ldi	r22, 0x01	; 1
   153fe:	88 85       	ldd	r24, Y+8	; 0x08
   15400:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
   15404:	61 e0       	ldi	r22, 0x01	; 1
   15406:	88 85       	ldd	r24, Y+8	; 0x08
   15408:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
   1540c:	88 81       	ld	r24, Y
   1540e:	99 81       	ldd	r25, Y+1	; 0x01
   15410:	0e 94 c2 a8 	call	0x15184	; 0x15184 <SoftSPIB::begin()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:55

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
   15414:	20 e0       	ldi	r18, 0x00	; 0
   15416:	30 e0       	ldi	r19, 0x00	; 0
   15418:	a9 01       	movw	r20, r18
   1541a:	61 e0       	ldi	r22, 0x01	; 1
   1541c:	ce 01       	movw	r24, r28
   1541e:	0e 94 c9 a9 	call	0x15392	; 0x15392 <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
   15422:	60 e4       	ldi	r22, 0x40	; 64
   15424:	88 81       	ld	r24, Y
   15426:	99 81       	ldd	r25, Y+1	; 0x01
   15428:	0e 94 d3 a8 	call	0x151a6	; 0x151a6 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:57
  endCommand();
   1542c:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:58
}
   1542e:	df 91       	pop	r29
   15430:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:57

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
  endCommand();
   15432:	0c 94 f6 a9 	jmp	0x153ec	; 0x153ec <SRAM_23LC::endCommand()>

00015436 <SRAM_23LC::readByte(unsigned long)>:
_ZN9SRAM_23LC8readByteEm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:66
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
   15436:	0f 93       	push	r16
   15438:	1f 93       	push	r17
   1543a:	cf 93       	push	r28
   1543c:	df 93       	push	r29
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
  if (address >= _capacity) {
   1543e:	fc 01       	movw	r30, r24
   15440:	04 81       	ldd	r16, Z+4	; 0x04
   15442:	15 81       	ldd	r17, Z+5	; 0x05
   15444:	26 81       	ldd	r18, Z+6	; 0x06
   15446:	37 81       	ldd	r19, Z+7	; 0x07
   15448:	40 17       	cp	r20, r16
   1544a:	51 07       	cpc	r21, r17
   1544c:	62 07       	cpc	r22, r18
   1544e:	73 07       	cpc	r23, r19
   15450:	a8 f4       	brcc	.+42     	; 0x1547c <SRAM_23LC::readByte(unsigned long)+0x46>
   15452:	9a 01       	movw	r18, r20
   15454:	ab 01       	movw	r20, r22
   15456:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:71
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
   15458:	63 e0       	ldi	r22, 0x03	; 3
   1545a:	0e 94 c9 a9 	call	0x15392	; 0x15392 <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   1545e:	6f ef       	ldi	r22, 0xFF	; 255
   15460:	88 81       	ld	r24, Y
   15462:	99 81       	ldd	r25, Y+1	; 0x01
   15464:	0e 94 d3 a8 	call	0x151a6	; 0x151a6 <SoftSPIB::transfer(unsigned char)>
   15468:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:73
  endCommand();
   1546a:	ce 01       	movw	r24, r28
   1546c:	0e 94 f6 a9 	call	0x153ec	; 0x153ec <SRAM_23LC::endCommand()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76

  return(ret);
}
   15470:	81 2f       	mov	r24, r17
   15472:	df 91       	pop	r29
   15474:	cf 91       	pop	r28
   15476:	1f 91       	pop	r17
   15478:	0f 91       	pop	r16
   1547a:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   1547c:	10 e0       	ldi	r17, 0x00	; 0
   1547e:	f8 cf       	rjmp	.-16     	; 0x15470 <SRAM_23LC::readByte(unsigned long)+0x3a>

00015480 <SRAM_23LC::writeByte(unsigned long, unsigned char)>:
_ZN9SRAM_23LC9writeByteEmh():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:79

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
   15480:	cf 92       	push	r12
   15482:	df 92       	push	r13
   15484:	ef 92       	push	r14
   15486:	ff 92       	push	r15
   15488:	1f 93       	push	r17
   1548a:	cf 93       	push	r28
   1548c:	df 93       	push	r29
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
  if (address >= _capacity) {
   1548e:	fc 01       	movw	r30, r24
   15490:	c4 80       	ldd	r12, Z+4	; 0x04
   15492:	d5 80       	ldd	r13, Z+5	; 0x05
   15494:	e6 80       	ldd	r14, Z+6	; 0x06
   15496:	f7 80       	ldd	r15, Z+7	; 0x07
   15498:	4c 15       	cp	r20, r12
   1549a:	5d 05       	cpc	r21, r13
   1549c:	6e 05       	cpc	r22, r14
   1549e:	7f 05       	cpc	r23, r15
   154a0:	c8 f4       	brcc	.+50     	; 0x154d4 <SRAM_23LC::writeByte(unsigned long, unsigned char)+0x54>
   154a2:	12 2f       	mov	r17, r18
   154a4:	9a 01       	movw	r18, r20
   154a6:	ab 01       	movw	r20, r22
   154a8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:84
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
   154aa:	62 e0       	ldi	r22, 0x02	; 2
   154ac:	0e 94 c9 a9 	call	0x15392	; 0x15392 <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  _spi->transfer(byte);
   154b0:	61 2f       	mov	r22, r17
   154b2:	88 81       	ld	r24, Y
   154b4:	99 81       	ldd	r25, Y+1	; 0x01
   154b6:	0e 94 d3 a8 	call	0x151a6	; 0x151a6 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:86
  endCommand();
   154ba:	ce 01       	movw	r24, r28
   154bc:	0e 94 f6 a9 	call	0x153ec	; 0x153ec <SRAM_23LC::endCommand()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:87
  return(1);
   154c0:	81 e0       	ldi	r24, 0x01	; 1
   154c2:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88
}
   154c4:	df 91       	pop	r29
   154c6:	cf 91       	pop	r28
   154c8:	1f 91       	pop	r17
   154ca:	ff 90       	pop	r15
   154cc:	ef 90       	pop	r14
   154ce:	df 90       	pop	r13
   154d0:	cf 90       	pop	r12
   154d2:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   154d4:	90 e0       	ldi	r25, 0x00	; 0
   154d6:	80 e0       	ldi	r24, 0x00	; 0
   154d8:	f5 cf       	rjmp	.-22     	; 0x154c4 <SRAM_23LC::writeByte(unsigned long, unsigned char)+0x44>

000154da <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
   154da:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
   154dc:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
   154de:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
   154e0:	80 91 dd 10 	lds	r24, 0x10DD	; 0x8010dd <SPIClass::initialized>
   154e4:	81 11       	cpse	r24, r1
   154e6:	27 c0       	rjmp	.+78     	; 0x15536 <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
   154e8:	e9 e8       	ldi	r30, 0x89	; 137
   154ea:	f3 e6       	ldi	r31, 0x63	; 99
   154ec:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
   154ee:	e3 e5       	ldi	r30, 0x53	; 83
   154f0:	f3 e6       	ldi	r31, 0x63	; 99
   154f2:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
   154f4:	e8 2f       	mov	r30, r24
   154f6:	f0 e0       	ldi	r31, 0x00	; 0
   154f8:	ee 0f       	add	r30, r30
   154fa:	ff 1f       	adc	r31, r31
   154fc:	e9 52       	subi	r30, 0x29	; 41
   154fe:	fc 49       	sbci	r31, 0x9C	; 156
   15500:	a5 91       	lpm	r26, Z+
   15502:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
   15504:	ec 91       	ld	r30, X
   15506:	e9 23       	and	r30, r25
   15508:	21 f4       	brne	.+8      	; 0x15512 <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
   1550a:	61 e0       	ldi	r22, 0x01	; 1
   1550c:	88 e0       	ldi	r24, 0x08	; 8
   1550e:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
   15512:	61 e0       	ldi	r22, 0x01	; 1
   15514:	88 e0       	ldi	r24, 0x08	; 8
   15516:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
   1551a:	8c b5       	in	r24, 0x2c	; 44
   1551c:	80 61       	ori	r24, 0x10	; 16
   1551e:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
   15520:	8c b5       	in	r24, 0x2c	; 44
   15522:	80 64       	ori	r24, 0x40	; 64
   15524:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
   15526:	61 e0       	ldi	r22, 0x01	; 1
   15528:	89 e0       	ldi	r24, 0x09	; 9
   1552a:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
   1552e:	61 e0       	ldi	r22, 0x01	; 1
   15530:	8a e0       	ldi	r24, 0x0A	; 10
   15532:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
   15536:	80 91 dd 10 	lds	r24, 0x10DD	; 0x8010dd <SPIClass::initialized>
   1553a:	8f 5f       	subi	r24, 0xFF	; 255
   1553c:	80 93 dd 10 	sts	0x10DD, r24	; 0x8010dd <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
   15540:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:64
}
   15542:	cf 91       	pop	r28
   15544:	08 95       	ret

00015546 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)>:
_ZN12EEPROM_CAT25C2EP8SoftSPIBh20_EEPROM_CAT25_Device():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:67
}

void EEPROM_CAT25::disableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WRDI, 0);
  endCommand();
   15546:	cf 92       	push	r12
   15548:	df 92       	push	r13
   1554a:	ef 92       	push	r14
   1554c:	ff 92       	push	r15
   1554e:	dc 01       	movw	r26, r24
   15550:	2e 30       	cpi	r18, 0x0E	; 14
   15552:	31 05       	cpc	r19, r1
   15554:	30 f5       	brcc	.+76     	; 0x155a2 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x5c>
   15556:	f9 01       	movw	r30, r18
   15558:	88 27       	eor	r24, r24
   1555a:	ee 54       	subi	r30, 0x4E	; 78
   1555c:	f5 45       	sbci	r31, 0x55	; 85
   1555e:	8f 4f       	sbci	r24, 0xFF	; 255
   15560:	0c 94 c2 d8 	jmp	0x1b184	; 0x1b184 <__tablejump2__>
   15564:	c0 aa       	std	Z+48, r12	; 0x30
   15566:	df aa       	std	Y+55, r13	; 0x37
   15568:	e5 aa       	std	Z+53, r14	; 0x35
   1556a:	f2 aa       	std	Z+50, r15	; 0x32
   1556c:	00 ab       	std	Z+48, r16	; 0x30
   1556e:	06 ab       	std	Z+54, r16	; 0x36
   15570:	0c ab       	std	Y+52, r16	; 0x34
   15572:	1a ab       	std	Y+50, r17	; 0x32
   15574:	1a ab       	std	Y+50, r17	; 0x32
   15576:	20 ab       	std	Z+48, r18	; 0x30
   15578:	20 ab       	std	Z+48, r18	; 0x30
   1557a:	26 ab       	std	Z+54, r18	; 0x36
   1557c:	34 ab       	std	Z+52, r19	; 0x34
   1557e:	39 ab       	std	Y+49, r19	; 0x31
   15580:	c1 2c       	mov	r12, r1
   15582:	d1 2c       	mov	r13, r1
   15584:	94 e0       	ldi	r25, 0x04	; 4
   15586:	e9 2e       	mov	r14, r25
   15588:	f1 2c       	mov	r15, r1
   1558a:	14 96       	adiw	r26, 0x04	; 4
   1558c:	cd 92       	st	X+, r12
   1558e:	dd 92       	st	X+, r13
   15590:	ed 92       	st	X+, r14
   15592:	fc 92       	st	X, r15
   15594:	17 97       	sbiw	r26, 0x07	; 7
   15596:	80 e0       	ldi	r24, 0x00	; 0
   15598:	91 e0       	ldi	r25, 0x01	; 1
   1559a:	19 96       	adiw	r26, 0x09	; 9
   1559c:	9c 93       	st	X, r25
   1559e:	8e 93       	st	-X, r24
   155a0:	18 97       	sbiw	r26, 0x08	; 8
   155a2:	13 96       	adiw	r26, 0x03	; 3
   155a4:	3c 93       	st	X, r19
   155a6:	2e 93       	st	-X, r18
   155a8:	12 97       	sbiw	r26, 0x02	; 2
   155aa:	11 96       	adiw	r26, 0x01	; 1
   155ac:	7c 93       	st	X, r23
   155ae:	6e 93       	st	-X, r22
   155b0:	1a 96       	adiw	r26, 0x0a	; 10
   155b2:	4c 93       	st	X, r20
   155b4:	ff 90       	pop	r15
   155b6:	ef 90       	pop	r14
   155b8:	df 90       	pop	r13
   155ba:	cf 90       	pop	r12
   155bc:	08 95       	ret
   155be:	c1 2c       	mov	r12, r1
   155c0:	d1 2c       	mov	r13, r1
   155c2:	82 e0       	ldi	r24, 0x02	; 2
   155c4:	e8 2e       	mov	r14, r24
   155c6:	f1 2c       	mov	r15, r1
   155c8:	e0 cf       	rjmp	.-64     	; 0x1558a <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x44>
   155ca:	c1 2c       	mov	r12, r1
   155cc:	d1 2c       	mov	r13, r1
   155ce:	76 01       	movw	r14, r12
   155d0:	e3 94       	inc	r14
   155d2:	14 96       	adiw	r26, 0x04	; 4
   155d4:	cd 92       	st	X+, r12
   155d6:	dd 92       	st	X+, r13
   155d8:	ed 92       	st	X+, r14
   155da:	fc 92       	st	X, r15
   155dc:	17 97       	sbiw	r26, 0x07	; 7
   155de:	80 e8       	ldi	r24, 0x80	; 128
   155e0:	90 e0       	ldi	r25, 0x00	; 0
   155e2:	db cf       	rjmp	.-74     	; 0x1559a <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   155e4:	c1 2c       	mov	r12, r1
   155e6:	e0 e8       	ldi	r30, 0x80	; 128
   155e8:	de 2e       	mov	r13, r30
   155ea:	e1 2c       	mov	r14, r1
   155ec:	f1 2c       	mov	r15, r1
   155ee:	14 96       	adiw	r26, 0x04	; 4
   155f0:	cd 92       	st	X+, r12
   155f2:	dd 92       	st	X+, r13
   155f4:	ed 92       	st	X+, r14
   155f6:	fc 92       	st	X, r15
   155f8:	17 97       	sbiw	r26, 0x07	; 7
   155fa:	80 e4       	ldi	r24, 0x40	; 64
   155fc:	90 e0       	ldi	r25, 0x00	; 0
   155fe:	cd cf       	rjmp	.-102    	; 0x1559a <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   15600:	c1 2c       	mov	r12, r1
   15602:	50 e4       	ldi	r21, 0x40	; 64
   15604:	d5 2e       	mov	r13, r21
   15606:	e1 2c       	mov	r14, r1
   15608:	f1 2c       	mov	r15, r1
   1560a:	f1 cf       	rjmp	.-30     	; 0x155ee <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xa8>
   1560c:	c1 2c       	mov	r12, r1
   1560e:	90 e2       	ldi	r25, 0x20	; 32
   15610:	d9 2e       	mov	r13, r25
   15612:	e1 2c       	mov	r14, r1
   15614:	f1 2c       	mov	r15, r1
   15616:	eb cf       	rjmp	.-42     	; 0x155ee <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xa8>
   15618:	c1 2c       	mov	r12, r1
   1561a:	80 e1       	ldi	r24, 0x10	; 16
   1561c:	d8 2e       	mov	r13, r24
   1561e:	e1 2c       	mov	r14, r1
   15620:	f1 2c       	mov	r15, r1
   15622:	14 96       	adiw	r26, 0x04	; 4
   15624:	cd 92       	st	X+, r12
   15626:	dd 92       	st	X+, r13
   15628:	ed 92       	st	X+, r14
   1562a:	fc 92       	st	X, r15
   1562c:	17 97       	sbiw	r26, 0x07	; 7
   1562e:	80 e2       	ldi	r24, 0x20	; 32
   15630:	90 e0       	ldi	r25, 0x00	; 0
   15632:	b3 cf       	rjmp	.-154    	; 0x1559a <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   15634:	c1 2c       	mov	r12, r1
   15636:	f8 e0       	ldi	r31, 0x08	; 8
   15638:	df 2e       	mov	r13, r31
   1563a:	e1 2c       	mov	r14, r1
   1563c:	f1 2c       	mov	r15, r1
   1563e:	f1 cf       	rjmp	.-30     	; 0x15622 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xdc>
   15640:	c1 2c       	mov	r12, r1
   15642:	e4 e0       	ldi	r30, 0x04	; 4
   15644:	de 2e       	mov	r13, r30
   15646:	e1 2c       	mov	r14, r1
   15648:	f1 2c       	mov	r15, r1
   1564a:	eb cf       	rjmp	.-42     	; 0x15622 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xdc>
   1564c:	c1 2c       	mov	r12, r1
   1564e:	52 e0       	ldi	r21, 0x02	; 2
   15650:	d5 2e       	mov	r13, r21
   15652:	e1 2c       	mov	r14, r1
   15654:	f1 2c       	mov	r15, r1
   15656:	14 96       	adiw	r26, 0x04	; 4
   15658:	cd 92       	st	X+, r12
   1565a:	dd 92       	st	X+, r13
   1565c:	ed 92       	st	X+, r14
   1565e:	fc 92       	st	X, r15
   15660:	17 97       	sbiw	r26, 0x07	; 7
   15662:	80 e1       	ldi	r24, 0x10	; 16
   15664:	90 e0       	ldi	r25, 0x00	; 0
   15666:	99 cf       	rjmp	.-206    	; 0x1559a <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   15668:	c1 2c       	mov	r12, r1
   1566a:	d1 2c       	mov	r13, r1
   1566c:	76 01       	movw	r14, r12
   1566e:	d3 94       	inc	r13
   15670:	f2 cf       	rjmp	.-28     	; 0x15656 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x110>
   15672:	80 e8       	ldi	r24, 0x80	; 128
   15674:	c8 2e       	mov	r12, r24
   15676:	d1 2c       	mov	r13, r1
   15678:	e1 2c       	mov	r14, r1
   1567a:	f1 2c       	mov	r15, r1
   1567c:	ec cf       	rjmp	.-40     	; 0x15656 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x110>

0001567e <EEPROM_CAT25::begin()>:
_ZN12EEPROM_CAT255beginEv():
   1567e:	cf 93       	push	r28
   15680:	df 93       	push	r29
   15682:	ec 01       	movw	r28, r24
   15684:	61 e0       	ldi	r22, 0x01	; 1
   15686:	8a 85       	ldd	r24, Y+10	; 0x0a
   15688:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
   1568c:	61 e0       	ldi	r22, 0x01	; 1
   1568e:	8a 85       	ldd	r24, Y+10	; 0x0a
   15690:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   15694:	88 81       	ld	r24, Y
   15696:	99 81       	ldd	r25, Y+1	; 0x01
   15698:	df 91       	pop	r29
   1569a:	cf 91       	pop	r28
   1569c:	0c 94 c2 a8 	jmp	0x15184	; 0x15184 <SoftSPIB::begin()>

000156a0 <EEPROM_CAT25::sendAddressBytes(unsigned long)>:
_ZN12EEPROM_CAT2516sendAddressBytesEm():
   156a0:	cf 92       	push	r12
   156a2:	df 92       	push	r13
   156a4:	ef 92       	push	r14
   156a6:	ff 92       	push	r15
   156a8:	cf 93       	push	r28
   156aa:	df 93       	push	r29
   156ac:	ec 01       	movw	r28, r24
   156ae:	6a 01       	movw	r12, r20
   156b0:	7b 01       	movw	r14, r22
   156b2:	8c 81       	ldd	r24, Y+4	; 0x04
   156b4:	9d 81       	ldd	r25, Y+5	; 0x05
   156b6:	ae 81       	ldd	r26, Y+6	; 0x06
   156b8:	bf 81       	ldd	r27, Y+7	; 0x07
   156ba:	01 97       	sbiw	r24, 0x01	; 1
   156bc:	a1 40       	sbci	r26, 0x01	; 1
   156be:	b1 05       	cpc	r27, r1
   156c0:	38 f0       	brcs	.+14     	; 0x156d0 <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x30>
   156c2:	b7 01       	movw	r22, r14
   156c4:	88 27       	eor	r24, r24
   156c6:	99 27       	eor	r25, r25
   156c8:	88 81       	ld	r24, Y
   156ca:	99 81       	ldd	r25, Y+1	; 0x01
   156cc:	0e 94 d3 a8 	call	0x151a6	; 0x151a6 <SoftSPIB::transfer(unsigned char)>
   156d0:	8c 81       	ldd	r24, Y+4	; 0x04
   156d2:	9d 81       	ldd	r25, Y+5	; 0x05
   156d4:	ae 81       	ldd	r26, Y+6	; 0x06
   156d6:	bf 81       	ldd	r27, Y+7	; 0x07
   156d8:	81 30       	cpi	r24, 0x01	; 1
   156da:	91 40       	sbci	r25, 0x01	; 1
   156dc:	a1 05       	cpc	r26, r1
   156de:	b1 05       	cpc	r27, r1
   156e0:	60 f0       	brcs	.+24     	; 0x156fa <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x5a>
   156e2:	8a 81       	ldd	r24, Y+2	; 0x02
   156e4:	9b 81       	ldd	r25, Y+3	; 0x03
   156e6:	0b 97       	sbiw	r24, 0x0b	; 11
   156e8:	41 f0       	breq	.+16     	; 0x156fa <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x5a>
   156ea:	99 27       	eor	r25, r25
   156ec:	8f 2d       	mov	r24, r15
   156ee:	7e 2d       	mov	r23, r14
   156f0:	6d 2d       	mov	r22, r13
   156f2:	88 81       	ld	r24, Y
   156f4:	99 81       	ldd	r25, Y+1	; 0x01
   156f6:	0e 94 d3 a8 	call	0x151a6	; 0x151a6 <SoftSPIB::transfer(unsigned char)>
   156fa:	6c 2d       	mov	r22, r12
   156fc:	88 81       	ld	r24, Y
   156fe:	99 81       	ldd	r25, Y+1	; 0x01
   15700:	df 91       	pop	r29
   15702:	cf 91       	pop	r28
   15704:	ff 90       	pop	r15
   15706:	ef 90       	pop	r14
   15708:	df 90       	pop	r13
   1570a:	cf 90       	pop	r12
   1570c:	0c 94 d3 a8 	jmp	0x151a6	; 0x151a6 <SoftSPIB::transfer(unsigned char)>

00015710 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>:
_ZN12EEPROM_CAT2512startCommandEhm():
   15710:	cf 92       	push	r12
   15712:	df 92       	push	r13
   15714:	ef 92       	push	r14
   15716:	ff 92       	push	r15
   15718:	0f 93       	push	r16
   1571a:	1f 93       	push	r17
   1571c:	cf 93       	push	r28
   1571e:	8c 01       	movw	r16, r24
   15720:	c6 2f       	mov	r28, r22
   15722:	69 01       	movw	r12, r18
   15724:	7a 01       	movw	r14, r20
   15726:	60 e0       	ldi	r22, 0x00	; 0
   15728:	fc 01       	movw	r30, r24
   1572a:	82 85       	ldd	r24, Z+10	; 0x0a
   1572c:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
   15730:	f8 01       	movw	r30, r16
   15732:	82 81       	ldd	r24, Z+2	; 0x02
   15734:	93 81       	ldd	r25, Z+3	; 0x03
   15736:	0b 97       	sbiw	r24, 0x0b	; 11
   15738:	71 f4       	brne	.+28     	; 0x15756 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   1573a:	ff ef       	ldi	r31, 0xFF	; 255
   1573c:	cf 16       	cp	r12, r31
   1573e:	d1 04       	cpc	r13, r1
   15740:	e1 04       	cpc	r14, r1
   15742:	f1 04       	cpc	r15, r1
   15744:	41 f0       	breq	.+16     	; 0x15756 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15746:	38 f0       	brcs	.+14     	; 0x15756 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15748:	c3 30       	cpi	r28, 0x03	; 3
   1574a:	21 f0       	breq	.+8      	; 0x15754 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x44>
   1574c:	c2 30       	cpi	r28, 0x02	; 2
   1574e:	19 f4       	brne	.+6      	; 0x15756 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15750:	ca e0       	ldi	r28, 0x0A	; 10
   15752:	01 c0       	rjmp	.+2      	; 0x15756 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15754:	cb e0       	ldi	r28, 0x0B	; 11
   15756:	6c 2f       	mov	r22, r28
   15758:	f8 01       	movw	r30, r16
   1575a:	80 81       	ld	r24, Z
   1575c:	91 81       	ldd	r25, Z+1	; 0x01
   1575e:	0e 94 d3 a8 	call	0x151a6	; 0x151a6 <SoftSPIB::transfer(unsigned char)>
   15762:	c2 50       	subi	r28, 0x02	; 2
   15764:	c2 30       	cpi	r28, 0x02	; 2
   15766:	60 f4       	brcc	.+24     	; 0x15780 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x70>
   15768:	b7 01       	movw	r22, r14
   1576a:	a6 01       	movw	r20, r12
   1576c:	c8 01       	movw	r24, r16
   1576e:	cf 91       	pop	r28
   15770:	1f 91       	pop	r17
   15772:	0f 91       	pop	r16
   15774:	ff 90       	pop	r15
   15776:	ef 90       	pop	r14
   15778:	df 90       	pop	r13
   1577a:	cf 90       	pop	r12
   1577c:	0c 94 50 ab 	jmp	0x156a0	; 0x156a0 <EEPROM_CAT25::sendAddressBytes(unsigned long)>
   15780:	cf 91       	pop	r28
   15782:	1f 91       	pop	r17
   15784:	0f 91       	pop	r16
   15786:	ff 90       	pop	r15
   15788:	ef 90       	pop	r14
   1578a:	df 90       	pop	r13
   1578c:	cf 90       	pop	r12
   1578e:	08 95       	ret

00015790 <EEPROM_CAT25::endCommand()>:
_ZN12EEPROM_CAT2510endCommandEv():
   15790:	61 e0       	ldi	r22, 0x01	; 1
   15792:	fc 01       	movw	r30, r24
   15794:	82 85       	ldd	r24, Z+10	; 0x0a
   15796:	0c 94 84 d2 	jmp	0x1a508	; 0x1a508 <digitalWrite>

0001579a <EEPROM_CAT25::getStatusRegister()>:
_ZN12EEPROM_CAT2517getStatusRegisterEv():
   1579a:	1f 93       	push	r17
   1579c:	cf 93       	push	r28
   1579e:	df 93       	push	r29
   157a0:	ec 01       	movw	r28, r24
   157a2:	20 e0       	ldi	r18, 0x00	; 0
   157a4:	30 e0       	ldi	r19, 0x00	; 0
   157a6:	a9 01       	movw	r20, r18
   157a8:	65 e0       	ldi	r22, 0x05	; 5
   157aa:	0e 94 88 ab 	call	0x15710	; 0x15710 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
   157ae:	6f ef       	ldi	r22, 0xFF	; 255
   157b0:	88 81       	ld	r24, Y
   157b2:	99 81       	ldd	r25, Y+1	; 0x01
   157b4:	0e 94 d3 a8 	call	0x151a6	; 0x151a6 <SoftSPIB::transfer(unsigned char)>
   157b8:	18 2f       	mov	r17, r24
   157ba:	ce 01       	movw	r24, r28
   157bc:	0e 94 c8 ab 	call	0x15790	; 0x15790 <EEPROM_CAT25::endCommand()>
   157c0:	81 2f       	mov	r24, r17
   157c2:	df 91       	pop	r29
   157c4:	cf 91       	pop	r28
   157c6:	1f 91       	pop	r17
   157c8:	08 95       	ret

000157ca <EEPROM_CAT25::isReady()>:
_ZN12EEPROM_CAT257isReadyEv():
   157ca:	0e 94 cd ab 	call	0x1579a	; 0x1579a <EEPROM_CAT25::getStatusRegister()>
   157ce:	80 95       	com	r24
   157d0:	81 70       	andi	r24, 0x01	; 1
   157d2:	08 95       	ret

000157d4 <EEPROM_CAT25::enableWrite()>:
_ZN12EEPROM_CAT2511enableWriteEv():
   157d4:	cf 93       	push	r28
   157d6:	df 93       	push	r29
   157d8:	ec 01       	movw	r28, r24
   157da:	20 e0       	ldi	r18, 0x00	; 0
   157dc:	30 e0       	ldi	r19, 0x00	; 0
   157de:	a9 01       	movw	r20, r18
   157e0:	66 e0       	ldi	r22, 0x06	; 6
   157e2:	0e 94 88 ab 	call	0x15710	; 0x15710 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
   157e6:	ce 01       	movw	r24, r28
   157e8:	df 91       	pop	r29
   157ea:	cf 91       	pop	r28
   157ec:	0c 94 c8 ab 	jmp	0x15790	; 0x15790 <EEPROM_CAT25::endCommand()>

000157f0 <EEPROM_CAT25::readByte(unsigned long)>:
_ZN12EEPROM_CAT258readByteEm():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:71
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
   157f0:	cf 92       	push	r12
   157f2:	df 92       	push	r13
   157f4:	ef 92       	push	r14
   157f6:	ff 92       	push	r15
   157f8:	1f 93       	push	r17
   157fa:	cf 93       	push	r28
   157fc:	df 93       	push	r29
   157fe:	ec 01       	movw	r28, r24
   15800:	6a 01       	movw	r12, r20
   15802:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  if (address >= _capacity) {
   15804:	8c 81       	ldd	r24, Y+4	; 0x04
   15806:	9d 81       	ldd	r25, Y+5	; 0x05
   15808:	ae 81       	ldd	r26, Y+6	; 0x06
   1580a:	bf 81       	ldd	r27, Y+7	; 0x07
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:73
    return(0);
   1580c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
   1580e:	c8 16       	cp	r12, r24
   15810:	d9 06       	cpc	r13, r25
   15812:	ea 06       	cpc	r14, r26
   15814:	fb 06       	cpc	r15, r27
   15816:	b8 f4       	brcc	.+46     	; 0x15846 <EEPROM_CAT25::readByte(unsigned long)+0x56>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:76
    return(0);
  }

  while (!isReady()) {
   15818:	ce 01       	movw	r24, r28
   1581a:	0e 94 e5 ab 	call	0x157ca	; 0x157ca <EEPROM_CAT25::isReady()>
   1581e:	81 11       	cpse	r24, r1
   15820:	03 c0       	rjmp	.+6      	; 0x15828 <EEPROM_CAT25::readByte(unsigned long)+0x38>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:77
    yield();
   15822:	0e 94 db d0 	call	0x1a1b6	; 0x1a1b6 <yield>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:76
{
  if (address >= _capacity) {
    return(0);
  }

  while (!isReady()) {
   15826:	f8 cf       	rjmp	.-16     	; 0x15818 <EEPROM_CAT25::readByte(unsigned long)+0x28>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
   15828:	a7 01       	movw	r20, r14
   1582a:	96 01       	movw	r18, r12
   1582c:	63 e0       	ldi	r22, 0x03	; 3
   1582e:	ce 01       	movw	r24, r28
   15830:	0e 94 88 ab 	call	0x15710	; 0x15710 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   15834:	6f ef       	ldi	r22, 0xFF	; 255
   15836:	88 81       	ld	r24, Y
   15838:	99 81       	ldd	r25, Y+1	; 0x01
   1583a:	0e 94 d3 a8 	call	0x151a6	; 0x151a6 <SoftSPIB::transfer(unsigned char)>
   1583e:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
   15840:	ce 01       	movw	r24, r28
   15842:	0e 94 c8 ab 	call	0x15790	; 0x15790 <EEPROM_CAT25::endCommand()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:85

  return(ret);
}
   15846:	81 2f       	mov	r24, r17
   15848:	df 91       	pop	r29
   1584a:	cf 91       	pop	r28
   1584c:	1f 91       	pop	r17
   1584e:	ff 90       	pop	r15
   15850:	ef 90       	pop	r14
   15852:	df 90       	pop	r13
   15854:	cf 90       	pop	r12
   15856:	08 95       	ret

00015858 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)>:
_ZN12EEPROM_CAT259writeByteEmh():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:88

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{
   15858:	cf 92       	push	r12
   1585a:	df 92       	push	r13
   1585c:	ef 92       	push	r14
   1585e:	ff 92       	push	r15
   15860:	1f 93       	push	r17
   15862:	cf 93       	push	r28
   15864:	df 93       	push	r29
   15866:	ec 01       	movw	r28, r24
   15868:	6a 01       	movw	r12, r20
   1586a:	7b 01       	movw	r14, r22
   1586c:	12 2f       	mov	r17, r18
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90

  if (address >= _capacity) {
   1586e:	8c 81       	ldd	r24, Y+4	; 0x04
   15870:	9d 81       	ldd	r25, Y+5	; 0x05
   15872:	ae 81       	ldd	r26, Y+6	; 0x06
   15874:	bf 81       	ldd	r27, Y+7	; 0x07
   15876:	c8 16       	cp	r12, r24
   15878:	d9 06       	cpc	r13, r25
   1587a:	ea 06       	cpc	r14, r26
   1587c:	fb 06       	cpc	r15, r27
   1587e:	18 f5       	brcc	.+70     	; 0x158c6 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x6e>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:95
    return(0);
  }


  while (!isReady()) {
   15880:	ce 01       	movw	r24, r28
   15882:	0e 94 e5 ab 	call	0x157ca	; 0x157ca <EEPROM_CAT25::isReady()>
   15886:	81 11       	cpse	r24, r1
   15888:	03 c0       	rjmp	.+6      	; 0x15890 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x38>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:96
    yield();
   1588a:	0e 94 db d0 	call	0x1a1b6	; 0x1a1b6 <yield>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:95
  if (address >= _capacity) {
    return(0);
  }


  while (!isReady()) {
   1588e:	f8 cf       	rjmp	.-16     	; 0x15880 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x28>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:99
    yield();
  }

  enableWrite();
   15890:	ce 01       	movw	r24, r28
   15892:	0e 94 ea ab 	call	0x157d4	; 0x157d4 <EEPROM_CAT25::enableWrite()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
   15896:	a7 01       	movw	r20, r14
   15898:	96 01       	movw	r18, r12
   1589a:	62 e0       	ldi	r22, 0x02	; 2
   1589c:	ce 01       	movw	r24, r28
   1589e:	0e 94 88 ab 	call	0x15710	; 0x15710 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
   158a2:	61 2f       	mov	r22, r17
   158a4:	88 81       	ld	r24, Y
   158a6:	99 81       	ldd	r25, Y+1	; 0x01
   158a8:	0e 94 d3 a8 	call	0x151a6	; 0x151a6 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
   158ac:	ce 01       	movw	r24, r28
   158ae:	0e 94 c8 ab 	call	0x15790	; 0x15790 <EEPROM_CAT25::endCommand()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:104

  return(1);
   158b2:	81 e0       	ldi	r24, 0x01	; 1
   158b4:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:105
}
   158b6:	df 91       	pop	r29
   158b8:	cf 91       	pop	r28
   158ba:	1f 91       	pop	r17
   158bc:	ff 90       	pop	r15
   158be:	ef 90       	pop	r14
   158c0:	df 90       	pop	r13
   158c2:	cf 90       	pop	r12
   158c4:	08 95       	ret
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:91

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
    return(0);
   158c6:	90 e0       	ldi	r25, 0x00	; 0
   158c8:	80 e0       	ldi	r24, 0x00	; 0
   158ca:	f5 cf       	rjmp	.-22     	; 0x158b6 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x5e>

000158cc <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm():
/home/saric/Arduino/libraries/Ethernet2/src/Dhcp.cpp:518
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
   158cc:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   158ce:	00 e0       	ldi	r16, 0x00	; 0
   158d0:	20 e0       	ldi	r18, 0x00	; 0
   158d2:	40 e0       	ldi	r20, 0x00	; 0
   158d4:	60 e0       	ldi	r22, 0x00	; 0
   158d6:	8e ed       	ldi	r24, 0xDE	; 222
   158d8:	90 e1       	ldi	r25, 0x10	; 16
   158da:	0e 94 9e d4 	call	0x1a93c	; 0x1a93c <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm():
/home/saric/Arduino/libraries/Ethernet2/src/Dhcp.cpp:518
   158de:	0f 91       	pop	r16
   158e0:	08 95       	ret

000158e2 <DNSClient::begin(IPAddress const&)>:
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   158e2:	fb 01       	movw	r30, r22
   158e4:	42 81       	ldd	r20, Z+2	; 0x02
   158e6:	53 81       	ldd	r21, Z+3	; 0x03
   158e8:	64 81       	ldd	r22, Z+4	; 0x04
   158ea:	75 81       	ldd	r23, Z+5	; 0x05
   158ec:	fc 01       	movw	r30, r24
   158ee:	42 83       	std	Z+2, r20	; 0x02
   158f0:	53 83       	std	Z+3, r21	; 0x03
   158f2:	64 83       	std	Z+4, r22	; 0x04
   158f4:	75 83       	std	Z+5, r23	; 0x05
_ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
   158f6:	17 82       	std	Z+7, r1	; 0x07
   158f8:	16 82       	std	Z+6, r1	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:55
}
   158fa:	08 95       	ret

000158fc <DNSClient::inet_aton(char const*, IPAddress&)>:
_ZN9DNSClient9inet_atonEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:59


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
   158fc:	fb 01       	movw	r30, r22
   158fe:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
   15900:	8d 91       	ld	r24, X+
   15902:	81 11       	cpse	r24, r1
   15904:	fd cf       	rjmp	.-6      	; 0x15900 <DNSClient::inet_aton(char const*, IPAddress&)+0x4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
   15906:	90 e0       	ldi	r25, 0x00	; 0
   15908:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
   1590a:	70 e0       	ldi	r23, 0x00	; 0
   1590c:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   1590e:	3a e0       	ldi	r19, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
   15910:	21 91       	ld	r18, Z+
   15912:	22 23       	and	r18, r18
   15914:	f9 f0       	breq	.+62     	; 0x15954 <DNSClient::inet_aton(char const*, IPAddress&)+0x58>
   15916:	64 30       	cpi	r22, 0x04	; 4
   15918:	71 05       	cpc	r23, r1
   1591a:	54 f5       	brge	.+84     	; 0x15970 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
   1591c:	2e 32       	cpi	r18, 0x2E	; 46
   1591e:	71 f4       	brne	.+28     	; 0x1593c <DNSClient::inet_aton(char const*, IPAddress&)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
   15920:	8f 3f       	cpi	r24, 0xFF	; 255
   15922:	91 05       	cpc	r25, r1
   15924:	09 f0       	breq	.+2      	; 0x15928 <DNSClient::inet_aton(char const*, IPAddress&)+0x2c>
   15926:	24 f5       	brge	.+72     	; 0x15970 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
   15928:	da 01       	movw	r26, r20
   1592a:	a6 0f       	add	r26, r22
   1592c:	b7 1f       	adc	r27, r23
   1592e:	12 96       	adiw	r26, 0x02	; 2
   15930:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
   15932:	6f 5f       	subi	r22, 0xFF	; 255
   15934:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
   15936:	90 e0       	ldi	r25, 0x00	; 0
   15938:	80 e0       	ldi	r24, 0x00	; 0
   1593a:	ea cf       	rjmp	.-44     	; 0x15910 <DNSClient::inet_aton(char const*, IPAddress&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   1593c:	38 9f       	mul	r19, r24
   1593e:	d0 01       	movw	r26, r0
   15940:	39 9f       	mul	r19, r25
   15942:	b0 0d       	add	r27, r0
   15944:	11 24       	eor	r1, r1
   15946:	82 2f       	mov	r24, r18
   15948:	22 0f       	add	r18, r18
   1594a:	99 0b       	sbc	r25, r25
   1594c:	c0 97       	sbiw	r24, 0x30	; 48
   1594e:	8a 0f       	add	r24, r26
   15950:	9b 1f       	adc	r25, r27
   15952:	de cf       	rjmp	.-68     	; 0x15910 <DNSClient::inet_aton(char const*, IPAddress&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
   15954:	8f 3f       	cpi	r24, 0xFF	; 255
   15956:	91 05       	cpc	r25, r1
   15958:	09 f0       	breq	.+2      	; 0x1595c <DNSClient::inet_aton(char const*, IPAddress&)+0x60>
   1595a:	54 f4       	brge	.+20     	; 0x15970 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
   1595c:	64 30       	cpi	r22, 0x04	; 4
   1595e:	71 05       	cpc	r23, r1
   15960:	3c f4       	brge	.+14     	; 0x15970 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
   15962:	46 0f       	add	r20, r22
   15964:	57 1f       	adc	r21, r23
   15966:	fa 01       	movw	r30, r20
   15968:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:109
            return 1;
   1596a:	81 e0       	ldi	r24, 0x01	; 1
   1596c:	90 e0       	ldi	r25, 0x00	; 0
   1596e:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:104
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
   15970:	90 e0       	ldi	r25, 0x00	; 0
   15972:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:116
    }
    else
    {
        return 0;
    }
}
   15974:	08 95       	ret

00015976 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
   15976:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   15978:	00 e0       	ldi	r16, 0x00	; 0
   1597a:	20 e0       	ldi	r18, 0x00	; 0
   1597c:	40 e0       	ldi	r20, 0x00	; 0
   1597e:	60 e0       	ldi	r22, 0x00	; 0
   15980:	84 ee       	ldi	r24, 0xE4	; 228
   15982:	90 e1       	ldi	r25, 0x10	; 16
   15984:	0e 94 9e d4 	call	0x1a93c	; 0x1a93c <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
   15988:	0f 91       	pop	r16
   1598a:	08 95       	ret

0001598c <DNSClient::BuildRequest(char const*)>:
_ZN9DNSClient12BuildRequestEPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:176

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
   1598c:	8f 92       	push	r8
   1598e:	9f 92       	push	r9
   15990:	af 92       	push	r10
   15992:	bf 92       	push	r11
   15994:	cf 92       	push	r12
   15996:	df 92       	push	r13
   15998:	ef 92       	push	r14
   1599a:	ff 92       	push	r15
   1599c:	0f 93       	push	r16
   1599e:	1f 93       	push	r17
   159a0:	cf 93       	push	r28
   159a2:	df 93       	push	r29
   159a4:	00 d0       	rcall	.+0      	; 0x159a6 <DNSClient::BuildRequest(char const*)+0x1a>
   159a6:	cd b7       	in	r28, 0x3d	; 61
   159a8:	de b7       	in	r29, 0x3e	; 62
   159aa:	6c 01       	movw	r12, r24
   159ac:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
   159ae:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   159b2:	f6 01       	movw	r30, r12
   159b4:	77 83       	std	Z+7, r23	; 0x07
   159b6:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
   159b8:	86 01       	movw	r16, r12
   159ba:	08 5f       	subi	r16, 0xF8	; 248
   159bc:	1f 4f       	sbci	r17, 0xFF	; 255
   159be:	b6 01       	movw	r22, r12
   159c0:	6a 5f       	subi	r22, 0xFA	; 250
   159c2:	7f 4f       	sbci	r23, 0xFF	; 255
   159c4:	42 e0       	ldi	r20, 0x02	; 2
   159c6:	50 e0       	ldi	r21, 0x00	; 0
   159c8:	c8 01       	movw	r24, r16
   159ca:	0e 94 5b b2 	call	0x164b6	; 0x164b6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
   159ce:	81 e0       	ldi	r24, 0x01	; 1
   159d0:	90 e0       	ldi	r25, 0x00	; 0
   159d2:	9a 83       	std	Y+2, r25	; 0x02
   159d4:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   159d6:	42 e0       	ldi	r20, 0x02	; 2
   159d8:	50 e0       	ldi	r21, 0x00	; 0
   159da:	be 01       	movw	r22, r28
   159dc:	6f 5f       	subi	r22, 0xFF	; 255
   159de:	7f 4f       	sbci	r23, 0xFF	; 255
   159e0:	c8 01       	movw	r24, r16
   159e2:	0e 94 5b b2 	call	0x164b6	; 0x164b6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
   159e6:	80 e0       	ldi	r24, 0x00	; 0
   159e8:	91 e0       	ldi	r25, 0x01	; 1
   159ea:	9a 83       	std	Y+2, r25	; 0x02
   159ec:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   159ee:	42 e0       	ldi	r20, 0x02	; 2
   159f0:	50 e0       	ldi	r21, 0x00	; 0
   159f2:	be 01       	movw	r22, r28
   159f4:	6f 5f       	subi	r22, 0xFF	; 255
   159f6:	7f 4f       	sbci	r23, 0xFF	; 255
   159f8:	c8 01       	movw	r24, r16
   159fa:	0e 94 5b b2 	call	0x164b6	; 0x164b6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
   159fe:	1a 82       	std	Y+2, r1	; 0x02
   15a00:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15a02:	42 e0       	ldi	r20, 0x02	; 2
   15a04:	50 e0       	ldi	r21, 0x00	; 0
   15a06:	be 01       	movw	r22, r28
   15a08:	6f 5f       	subi	r22, 0xFF	; 255
   15a0a:	7f 4f       	sbci	r23, 0xFF	; 255
   15a0c:	c8 01       	movw	r24, r16
   15a0e:	0e 94 5b b2 	call	0x164b6	; 0x164b6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15a12:	42 e0       	ldi	r20, 0x02	; 2
   15a14:	50 e0       	ldi	r21, 0x00	; 0
   15a16:	be 01       	movw	r22, r28
   15a18:	6f 5f       	subi	r22, 0xFF	; 255
   15a1a:	7f 4f       	sbci	r23, 0xFF	; 255
   15a1c:	c8 01       	movw	r24, r16
   15a1e:	0e 94 5b b2 	call	0x164b6	; 0x164b6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15a22:	42 e0       	ldi	r20, 0x02	; 2
   15a24:	50 e0       	ldi	r21, 0x00	; 0
   15a26:	be 01       	movw	r22, r28
   15a28:	6f 5f       	subi	r22, 0xFF	; 255
   15a2a:	7f 4f       	sbci	r23, 0xFF	; 255
   15a2c:	c8 01       	movw	r24, r16
   15a2e:	0e 94 5b b2 	call	0x164b6	; 0x164b6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
   15a32:	67 01       	movw	r12, r14
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
   15a34:	f7 01       	movw	r30, r14
   15a36:	80 81       	ld	r24, Z
   15a38:	88 23       	and	r24, r24
   15a3a:	01 f1       	breq	.+64     	; 0x15a7c <DNSClient::BuildRequest(char const*)+0xf0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
   15a3c:	76 01       	movw	r14, r12
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
   15a3e:	f7 01       	movw	r30, r14
   15a40:	81 91       	ld	r24, Z+
   15a42:	5f 01       	movw	r10, r30
   15a44:	88 23       	and	r24, r24
   15a46:	11 f0       	breq	.+4      	; 0x15a4c <DNSClient::BuildRequest(char const*)+0xc0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224 (discriminator 1)
   15a48:	8e 32       	cpi	r24, 0x2E	; 46
   15a4a:	b1 f4       	brne	.+44     	; 0x15a78 <DNSClient::BuildRequest(char const*)+0xec>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
   15a4c:	47 01       	movw	r8, r14
   15a4e:	8c 18       	sub	r8, r12
   15a50:	9d 08       	sbc	r9, r13
   15a52:	18 14       	cp	r1, r8
   15a54:	19 04       	cpc	r1, r9
   15a56:	74 f4       	brge	.+28     	; 0x15a74 <DNSClient::BuildRequest(char const*)+0xe8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
   15a58:	8b 82       	std	Y+3, r8	; 0x03
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
   15a5a:	41 e0       	ldi	r20, 0x01	; 1
   15a5c:	50 e0       	ldi	r21, 0x00	; 0
   15a5e:	be 01       	movw	r22, r28
   15a60:	6d 5f       	subi	r22, 0xFD	; 253
   15a62:	7f 4f       	sbci	r23, 0xFF	; 255
   15a64:	c8 01       	movw	r24, r16
   15a66:	0e 94 5b b2 	call	0x164b6	; 0x164b6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
   15a6a:	a4 01       	movw	r20, r8
   15a6c:	b6 01       	movw	r22, r12
   15a6e:	c8 01       	movw	r24, r16
   15a70:	0e 94 5b b2 	call	0x164b6	; 0x164b6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
   15a74:	65 01       	movw	r12, r10
   15a76:	de cf       	rjmp	.-68     	; 0x15a34 <DNSClient::BuildRequest(char const*)+0xa8>
   15a78:	75 01       	movw	r14, r10
   15a7a:	e1 cf       	rjmp	.-62     	; 0x15a3e <DNSClient::BuildRequest(char const*)+0xb2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
   15a7c:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
   15a7e:	41 e0       	ldi	r20, 0x01	; 1
   15a80:	50 e0       	ldi	r21, 0x00	; 0
   15a82:	be 01       	movw	r22, r28
   15a84:	6d 5f       	subi	r22, 0xFD	; 253
   15a86:	7f 4f       	sbci	r23, 0xFF	; 255
   15a88:	c8 01       	movw	r24, r16
   15a8a:	0e 94 5b b2 	call	0x164b6	; 0x164b6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
   15a8e:	e1 2c       	mov	r14, r1
   15a90:	ff 24       	eor	r15, r15
   15a92:	f3 94       	inc	r15
   15a94:	fa 82       	std	Y+2, r15	; 0x02
   15a96:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15a98:	42 e0       	ldi	r20, 0x02	; 2
   15a9a:	50 e0       	ldi	r21, 0x00	; 0
   15a9c:	be 01       	movw	r22, r28
   15a9e:	6f 5f       	subi	r22, 0xFF	; 255
   15aa0:	7f 4f       	sbci	r23, 0xFF	; 255
   15aa2:	c8 01       	movw	r24, r16
   15aa4:	0e 94 5b b2 	call	0x164b6	; 0x164b6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
   15aa8:	fa 82       	std	Y+2, r15	; 0x02
   15aaa:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15aac:	42 e0       	ldi	r20, 0x02	; 2
   15aae:	50 e0       	ldi	r21, 0x00	; 0
   15ab0:	be 01       	movw	r22, r28
   15ab2:	6f 5f       	subi	r22, 0xFF	; 255
   15ab4:	7f 4f       	sbci	r23, 0xFF	; 255
   15ab6:	c8 01       	movw	r24, r16
   15ab8:	0e 94 5b b2 	call	0x164b6	; 0x164b6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:252
    // Success!  Everything buffered okay
    return 1;
}
   15abc:	81 e0       	ldi	r24, 0x01	; 1
   15abe:	90 e0       	ldi	r25, 0x00	; 0
   15ac0:	0f 90       	pop	r0
   15ac2:	0f 90       	pop	r0
   15ac4:	0f 90       	pop	r0
   15ac6:	df 91       	pop	r29
   15ac8:	cf 91       	pop	r28
   15aca:	1f 91       	pop	r17
   15acc:	0f 91       	pop	r16
   15ace:	ff 90       	pop	r15
   15ad0:	ef 90       	pop	r14
   15ad2:	df 90       	pop	r13
   15ad4:	cf 90       	pop	r12
   15ad6:	bf 90       	pop	r11
   15ad8:	af 90       	pop	r10
   15ada:	9f 90       	pop	r9
   15adc:	8f 90       	pop	r8
   15ade:	08 95       	ret

00015ae0 <DNSClient::ProcessResponse(unsigned int, IPAddress&)>:
_ZN9DNSClient15ProcessResponseEjR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:256


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
   15ae0:	2f 92       	push	r2
   15ae2:	3f 92       	push	r3
   15ae4:	4f 92       	push	r4
   15ae6:	5f 92       	push	r5
   15ae8:	6f 92       	push	r6
   15aea:	7f 92       	push	r7
   15aec:	8f 92       	push	r8
   15aee:	9f 92       	push	r9
   15af0:	af 92       	push	r10
   15af2:	bf 92       	push	r11
   15af4:	cf 92       	push	r12
   15af6:	df 92       	push	r13
   15af8:	ef 92       	push	r14
   15afa:	ff 92       	push	r15
   15afc:	0f 93       	push	r16
   15afe:	1f 93       	push	r17
   15b00:	cf 93       	push	r28
   15b02:	df 93       	push	r29
   15b04:	cd b7       	in	r28, 0x3d	; 61
   15b06:	de b7       	in	r29, 0x3e	; 62
   15b08:	63 97       	sbiw	r28, 0x13	; 19
   15b0a:	0f b6       	in	r0, 0x3f	; 63
   15b0c:	f8 94       	cli
   15b0e:	de bf       	out	0x3e, r29	; 62
   15b10:	0f be       	out	0x3f, r0	; 63
   15b12:	cd bf       	out	0x3d, r28	; 61
   15b14:	7c 01       	movw	r14, r24
   15b16:	2b 01       	movw	r4, r22
   15b18:	1a 01       	movw	r2, r20
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
    uint32_t startTime = millis();
   15b1a:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   15b1e:	4b 01       	movw	r8, r22
   15b20:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   15b22:	87 01       	movw	r16, r14
   15b24:	08 5f       	subi	r16, 0xF8	; 248
   15b26:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
   15b28:	71 2c       	mov	r7, r1
   15b2a:	61 2c       	mov	r6, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   15b2c:	c8 01       	movw	r24, r16
   15b2e:	0e 94 d0 b2 	call	0x165a0	; 0x165a0 <EthernetUDP::parsePacket()>
   15b32:	18 16       	cp	r1, r24
   15b34:	19 06       	cpc	r1, r25
   15b36:	9c f0       	brlt	.+38     	; 0x15b5e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x7e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
   15b38:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   15b3c:	68 19       	sub	r22, r8
   15b3e:	79 09       	sbc	r23, r9
   15b40:	8a 09       	sbc	r24, r10
   15b42:	9b 09       	sbc	r25, r11
   15b44:	46 16       	cp	r4, r22
   15b46:	57 06       	cpc	r5, r23
   15b48:	68 06       	cpc	r6, r24
   15b4a:	79 06       	cpc	r7, r25
   15b4c:	08 f4       	brcc	.+2      	; 0x15b50 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x70>
   15b4e:	31 c1       	rjmp	.+610    	; 0x15db2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2d2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
   15b50:	62 e3       	ldi	r22, 0x32	; 50
   15b52:	70 e0       	ldi	r23, 0x00	; 0
   15b54:	80 e0       	ldi	r24, 0x00	; 0
   15b56:	90 e0       	ldi	r25, 0x00	; 0
   15b58:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   15b5c:	e7 cf       	rjmp	.-50     	; 0x15b2c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x4c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
   15b5e:	f7 01       	movw	r30, r14
   15b60:	42 81       	ldd	r20, Z+2	; 0x02
   15b62:	53 81       	ldd	r21, Z+3	; 0x03
   15b64:	64 81       	ldd	r22, Z+4	; 0x04
   15b66:	75 81       	ldd	r23, Z+5	; 0x05
   15b68:	81 8d       	ldd	r24, Z+25	; 0x19
   15b6a:	92 8d       	ldd	r25, Z+26	; 0x1a
   15b6c:	a3 8d       	ldd	r26, Z+27	; 0x1b
   15b6e:	b4 8d       	ldd	r27, Z+28	; 0x1c
   15b70:	48 17       	cp	r20, r24
   15b72:	59 07       	cpc	r21, r25
   15b74:	6a 07       	cpc	r22, r26
   15b76:	7b 07       	cpc	r23, r27
   15b78:	09 f0       	breq	.+2      	; 0x15b7c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x9c>
   15b7a:	1f c1       	rjmp	.+574    	; 0x15dba <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2da>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271 (discriminator 2)
   15b7c:	85 8d       	ldd	r24, Z+29	; 0x1d
   15b7e:	96 8d       	ldd	r25, Z+30	; 0x1e
   15b80:	c5 97       	sbiw	r24, 0x35	; 53
   15b82:	09 f0       	breq	.+2      	; 0x15b86 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xa6>
   15b84:	1a c1       	rjmp	.+564    	; 0x15dba <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2da>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
   15b86:	c8 01       	movw	r24, r16
   15b88:	0e 94 0e b2 	call	0x1641c	; 0x1641c <EthernetUDP::available()>
   15b8c:	0c 97       	sbiw	r24, 0x0c	; 12
   15b8e:	0c f4       	brge	.+2      	; 0x15b92 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xb2>
   15b90:	19 c1       	rjmp	.+562    	; 0x15dc4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2e4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
   15b92:	4c e0       	ldi	r20, 0x0C	; 12
   15b94:	50 e0       	ldi	r21, 0x00	; 0
   15b96:	be 01       	movw	r22, r28
   15b98:	6f 5f       	subi	r22, 0xFF	; 255
   15b9a:	7f 4f       	sbci	r23, 0xFF	; 255
   15b9c:	c8 01       	movw	r24, r16
   15b9e:	0e 94 99 b2 	call	0x16532	; 0x16532 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
   15ba2:	8b 81       	ldd	r24, Y+3	; 0x03
   15ba4:	9c 81       	ldd	r25, Y+4	; 0x04
   15ba6:	98 27       	eor	r25, r24
   15ba8:	89 27       	eor	r24, r25
   15baa:	98 27       	eor	r25, r24
   15bac:	9a 8b       	std	Y+18, r25	; 0x12
   15bae:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
   15bb0:	f7 01       	movw	r30, r14
   15bb2:	46 81       	ldd	r20, Z+6	; 0x06
   15bb4:	57 81       	ldd	r21, Z+7	; 0x07
   15bb6:	29 81       	ldd	r18, Y+1	; 0x01
   15bb8:	3a 81       	ldd	r19, Y+2	; 0x02
   15bba:	42 17       	cp	r20, r18
   15bbc:	53 07       	cpc	r21, r19
   15bbe:	11 f4       	brne	.+4      	; 0x15bc4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xe4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287 (discriminator 1)
   15bc0:	97 fd       	sbrc	r25, 7
   15bc2:	21 c0       	rjmp	.+66     	; 0x15c06 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
   15bc4:	c8 01       	movw	r24, r16
   15bc6:	0e 94 28 b2 	call	0x16450	; 0x16450 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
   15bca:	7c ef       	ldi	r23, 0xFC	; 252
   15bcc:	e7 2e       	mov	r14, r23
   15bce:	ff 24       	eor	r15, r15
   15bd0:	fa 94       	dec	r15
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
   15bd2:	c7 01       	movw	r24, r14
   15bd4:	63 96       	adiw	r28, 0x13	; 19
   15bd6:	0f b6       	in	r0, 0x3f	; 63
   15bd8:	f8 94       	cli
   15bda:	de bf       	out	0x3e, r29	; 62
   15bdc:	0f be       	out	0x3f, r0	; 63
   15bde:	cd bf       	out	0x3d, r28	; 61
   15be0:	df 91       	pop	r29
   15be2:	cf 91       	pop	r28
   15be4:	1f 91       	pop	r17
   15be6:	0f 91       	pop	r16
   15be8:	ff 90       	pop	r15
   15bea:	ef 90       	pop	r14
   15bec:	df 90       	pop	r13
   15bee:	cf 90       	pop	r12
   15bf0:	bf 90       	pop	r11
   15bf2:	af 90       	pop	r10
   15bf4:	9f 90       	pop	r9
   15bf6:	8f 90       	pop	r8
   15bf8:	7f 90       	pop	r7
   15bfa:	6f 90       	pop	r6
   15bfc:	5f 90       	pop	r5
   15bfe:	4f 90       	pop	r4
   15c00:	3f 90       	pop	r3
   15c02:	2f 90       	pop	r2
   15c04:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
   15c06:	8f 70       	andi	r24, 0x0F	; 15
   15c08:	92 70       	andi	r25, 0x02	; 2
   15c0a:	89 2b       	or	r24, r25
   15c0c:	41 f0       	breq	.+16     	; 0x15c1e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x13e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
   15c0e:	c8 01       	movw	r24, r16
   15c10:	0e 94 28 b2 	call	0x16450	; 0x16450 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
   15c14:	6b ef       	ldi	r22, 0xFB	; 251
   15c16:	e6 2e       	mov	r14, r22
   15c18:	ff 24       	eor	r15, r15
   15c1a:	fa 94       	dec	r15
   15c1c:	da cf       	rjmp	.-76     	; 0x15bd2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
   15c1e:	cf 80       	ldd	r12, Y+7	; 0x07
   15c20:	d8 84       	ldd	r13, Y+8	; 0x08
   15c22:	dc 24       	eor	r13, r12
   15c24:	cd 24       	eor	r12, r13
   15c26:	dc 24       	eor	r13, r12
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   15c28:	f1 2c       	mov	r15, r1
   15c2a:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
   15c2c:	c1 14       	cp	r12, r1
   15c2e:	d1 04       	cpc	r13, r1
   15c30:	d1 f4       	brne	.+52     	; 0x15c66 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x186>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
   15c32:	c8 01       	movw	r24, r16
   15c34:	0e 94 28 b2 	call	0x16450	; 0x16450 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
   15c38:	5a ef       	ldi	r21, 0xFA	; 250
   15c3a:	e5 2e       	mov	r14, r21
   15c3c:	ff 24       	eor	r15, r15
   15c3e:	fa 94       	dec	r15
   15c40:	c8 cf       	rjmp	.-112    	; 0x15bd2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
   15c42:	8d 85       	ldd	r24, Y+13	; 0x0d
   15c44:	81 11       	cpse	r24, r1
   15c46:	17 c0       	rjmp	.+46     	; 0x15c76 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x196>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   15c48:	c8 01       	movw	r24, r16
   15c4a:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
   15c4e:	c8 01       	movw	r24, r16
   15c50:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
   15c54:	c8 01       	movw	r24, r16
   15c56:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
   15c5a:	c8 01       	movw	r24, r16
   15c5c:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   15c60:	ff ef       	ldi	r31, 0xFF	; 255
   15c62:	ef 1a       	sub	r14, r31
   15c64:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313 (discriminator 1)
   15c66:	8d 81       	ldd	r24, Y+5	; 0x05
   15c68:	9e 81       	ldd	r25, Y+6	; 0x06
   15c6a:	98 27       	eor	r25, r24
   15c6c:	89 27       	eor	r24, r25
   15c6e:	98 27       	eor	r25, r24
   15c70:	e8 16       	cp	r14, r24
   15c72:	f9 06       	cpc	r15, r25
   15c74:	a8 f4       	brcc	.+42     	; 0x15ca0 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   15c76:	41 e0       	ldi	r20, 0x01	; 1
   15c78:	50 e0       	ldi	r21, 0x00	; 0
   15c7a:	be 01       	movw	r22, r28
   15c7c:	63 5f       	subi	r22, 0xF3	; 243
   15c7e:	7f 4f       	sbci	r23, 0xFF	; 255
   15c80:	c8 01       	movw	r24, r16
   15c82:	0e 94 99 b2 	call	0x16532	; 0x16532 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
   15c86:	8d 85       	ldd	r24, Y+13	; 0x0d
   15c88:	88 23       	and	r24, r24
   15c8a:	d9 f2       	breq	.-74     	; 0x15c42 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x162>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
   15c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
   15c8e:	9f ef       	ldi	r25, 0xFF	; 255
   15c90:	98 0f       	add	r25, r24
   15c92:	9d 87       	std	Y+13, r25	; 0x0d
   15c94:	88 23       	and	r24, r24
   15c96:	a9 f2       	breq	.-86     	; 0x15c42 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x162>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
   15c98:	c8 01       	movw	r24, r16
   15c9a:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
   15c9e:	f6 cf       	rjmp	.-20     	; 0x15c8c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1ac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   15ca0:	b1 2c       	mov	r11, r1
   15ca2:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   15ca4:	41 e0       	ldi	r20, 0x01	; 1
   15ca6:	50 e0       	ldi	r21, 0x00	; 0
   15ca8:	be 01       	movw	r22, r28
   15caa:	6d 5e       	subi	r22, 0xED	; 237
   15cac:	7f 4f       	sbci	r23, 0xFF	; 255
   15cae:	c8 01       	movw	r24, r16
   15cb0:	0e 94 99 b2 	call	0x16532	; 0x16532 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
   15cb4:	8b 89       	ldd	r24, Y+19	; 0x13
   15cb6:	98 2f       	mov	r25, r24
   15cb8:	90 7c       	andi	r25, 0xC0	; 192
   15cba:	61 f4       	brne	.+24     	; 0x15cd4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1f4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
   15cbc:	88 23       	and	r24, r24
   15cbe:	89 f0       	breq	.+34     	; 0x15ce2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x202>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
   15cc0:	8b 89       	ldd	r24, Y+19	; 0x13
   15cc2:	9f ef       	ldi	r25, 0xFF	; 255
   15cc4:	98 0f       	add	r25, r24
   15cc6:	9b 8b       	std	Y+19, r25	; 0x13
   15cc8:	88 23       	and	r24, r24
   15cca:	41 f0       	breq	.+16     	; 0x15cdc <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1fc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
   15ccc:	c8 01       	movw	r24, r16
   15cce:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
   15cd2:	f6 cf       	rjmp	.-20     	; 0x15cc0 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1e0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
   15cd4:	c8 01       	movw	r24, r16
   15cd6:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
   15cda:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
   15cdc:	8b 89       	ldd	r24, Y+19	; 0x13
   15cde:	81 11       	cpse	r24, r1
   15ce0:	e1 cf       	rjmp	.-62     	; 0x15ca4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
   15ce2:	42 e0       	ldi	r20, 0x02	; 2
   15ce4:	50 e0       	ldi	r21, 0x00	; 0
   15ce6:	be 01       	movw	r22, r28
   15ce8:	61 5f       	subi	r22, 0xF1	; 241
   15cea:	7f 4f       	sbci	r23, 0xFF	; 255
   15cec:	c8 01       	movw	r24, r16
   15cee:	0e 94 99 b2 	call	0x16532	; 0x16532 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
   15cf2:	42 e0       	ldi	r20, 0x02	; 2
   15cf4:	50 e0       	ldi	r21, 0x00	; 0
   15cf6:	be 01       	movw	r22, r28
   15cf8:	63 5f       	subi	r22, 0xF3	; 243
   15cfa:	7f 4f       	sbci	r23, 0xFF	; 255
   15cfc:	c8 01       	movw	r24, r16
   15cfe:	0e 94 99 b2 	call	0x16532	; 0x16532 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   15d02:	c8 01       	movw	r24, r16
   15d04:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
   15d08:	c8 01       	movw	r24, r16
   15d0a:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
   15d0e:	c8 01       	movw	r24, r16
   15d10:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
   15d14:	c8 01       	movw	r24, r16
   15d16:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
   15d1a:	42 e0       	ldi	r20, 0x02	; 2
   15d1c:	50 e0       	ldi	r21, 0x00	; 0
   15d1e:	be 01       	movw	r22, r28
   15d20:	6f 5e       	subi	r22, 0xEF	; 239
   15d22:	7f 4f       	sbci	r23, 0xFF	; 255
   15d24:	c8 01       	movw	r24, r16
   15d26:	0e 94 99 b2 	call	0x16532	; 0x16532 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
   15d2a:	8f 85       	ldd	r24, Y+15	; 0x0f
   15d2c:	98 89       	ldd	r25, Y+16	; 0x10
   15d2e:	81 15       	cp	r24, r1
   15d30:	91 40       	sbci	r25, 0x01	; 1
   15d32:	f9 f4       	brne	.+62     	; 0x15d72 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x292>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395 (discriminator 1)
   15d34:	ed 84       	ldd	r14, Y+13	; 0x0d
   15d36:	fe 84       	ldd	r15, Y+14	; 0x0e
   15d38:	fe 24       	eor	r15, r14
   15d3a:	ef 24       	eor	r14, r15
   15d3c:	fe 24       	eor	r15, r14
   15d3e:	81 e0       	ldi	r24, 0x01	; 1
   15d40:	e8 16       	cp	r14, r24
   15d42:	f1 04       	cpc	r15, r1
   15d44:	b1 f4       	brne	.+44     	; 0x15d72 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x292>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
   15d46:	89 89       	ldd	r24, Y+17	; 0x11
   15d48:	9a 89       	ldd	r25, Y+18	; 0x12
   15d4a:	81 15       	cp	r24, r1
   15d4c:	94 40       	sbci	r25, 0x04	; 4
   15d4e:	41 f0       	breq	.+16     	; 0x15d60 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x280>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
   15d50:	c8 01       	movw	r24, r16
   15d52:	0e 94 28 b2 	call	0x16450	; 0x16450 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
   15d56:	47 ef       	ldi	r20, 0xF7	; 247
   15d58:	e4 2e       	mov	r14, r20
   15d5a:	ff 24       	eor	r15, r15
   15d5c:	fa 94       	dec	r15
   15d5e:	39 cf       	rjmp	.-398    	; 0x15bd2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   15d60:	b1 01       	movw	r22, r2
   15d62:	6e 5f       	subi	r22, 0xFE	; 254
   15d64:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN9DNSClient15ProcessResponseEjR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
   15d66:	44 e0       	ldi	r20, 0x04	; 4
   15d68:	50 e0       	ldi	r21, 0x00	; 0
   15d6a:	c8 01       	movw	r24, r16
   15d6c:	0e 94 99 b2 	call	0x16532	; 0x16532 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:405
            return SUCCESS;
   15d70:	30 cf       	rjmp	.-416    	; 0x15bd2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
   15d72:	f1 2c       	mov	r15, r1
   15d74:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410 (discriminator 3)
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   15d76:	89 89       	ldd	r24, Y+17	; 0x11
   15d78:	9a 89       	ldd	r25, Y+18	; 0x12
   15d7a:	98 27       	eor	r25, r24
   15d7c:	89 27       	eor	r24, r25
   15d7e:	98 27       	eor	r25, r24
   15d80:	e8 16       	cp	r14, r24
   15d82:	f9 06       	cpc	r15, r25
   15d84:	38 f4       	brcc	.+14     	; 0x15d94 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2b4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412 (discriminator 2)
            {
                iUdp.read(); // we don't care about the returned byte
   15d86:	c8 01       	movw	r24, r16
   15d88:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410 (discriminator 2)
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   15d8c:	ff ef       	ldi	r31, 0xFF	; 255
   15d8e:	ef 1a       	sub	r14, r31
   15d90:	ff 0a       	sbc	r15, r31
   15d92:	f1 cf       	rjmp	.-30     	; 0x15d76 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x296>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   15d94:	2f ef       	ldi	r18, 0xFF	; 255
   15d96:	a2 1a       	sub	r10, r18
   15d98:	b2 0a       	sbc	r11, r18
   15d9a:	ca 14       	cp	r12, r10
   15d9c:	db 04       	cpc	r13, r11
   15d9e:	09 f0       	breq	.+2      	; 0x15da2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2c2>
   15da0:	81 cf       	rjmp	.-254    	; 0x15ca4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
   15da2:	c8 01       	movw	r24, r16
   15da4:	0e 94 28 b2 	call	0x16450	; 0x16450 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
   15da8:	36 ef       	ldi	r19, 0xF6	; 246
   15daa:	e3 2e       	mov	r14, r19
   15dac:	ff 24       	eor	r15, r15
   15dae:	fa 94       	dec	r15
   15db0:	10 cf       	rjmp	.-480    	; 0x15bd2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
   15db2:	ee 24       	eor	r14, r14
   15db4:	ea 94       	dec	r14
   15db6:	fe 2c       	mov	r15, r14
   15db8:	0c cf       	rjmp	.-488    	; 0x15bd2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
   15dba:	9e ef       	ldi	r25, 0xFE	; 254
   15dbc:	e9 2e       	mov	r14, r25
   15dbe:	ff 24       	eor	r15, r15
   15dc0:	fa 94       	dec	r15
   15dc2:	07 cf       	rjmp	.-498    	; 0x15bd2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
   15dc4:	8d ef       	ldi	r24, 0xFD	; 253
   15dc6:	e8 2e       	mov	r14, r24
   15dc8:	ff 24       	eor	r15, r15
   15dca:	fa 94       	dec	r15
   15dcc:	02 cf       	rjmp	.-508    	; 0x15bd2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>

00015dce <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
   15dce:	8f 92       	push	r8
   15dd0:	9f 92       	push	r9
   15dd2:	af 92       	push	r10
   15dd4:	bf 92       	push	r11
   15dd6:	cf 92       	push	r12
   15dd8:	df 92       	push	r13
   15dda:	ef 92       	push	r14
   15ddc:	ff 92       	push	r15
   15dde:	0f 93       	push	r16
   15de0:	1f 93       	push	r17
   15de2:	cf 93       	push	r28
   15de4:	df 93       	push	r29
   15de6:	00 d0       	rcall	.+0      	; 0x15de8 <DNSClient::getHostByName(char const*, IPAddress&)+0x1a>
   15de8:	00 d0       	rcall	.+0      	; 0x15dea <DNSClient::getHostByName(char const*, IPAddress&)+0x1c>
   15dea:	cd b7       	in	r28, 0x3d	; 61
   15dec:	de b7       	in	r29, 0x3e	; 62
   15dee:	7c 01       	movw	r14, r24
   15df0:	4b 01       	movw	r8, r22
   15df2:	5a 01       	movw	r10, r20
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:123
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
   15df4:	0e 94 7e ac 	call	0x158fc	; 0x158fc <DNSClient::inet_aton(char const*, IPAddress&)>
   15df8:	8c 01       	movw	r16, r24
   15dfa:	89 2b       	or	r24, r25
   15dfc:	09 f0       	breq	.+2      	; 0x15e00 <DNSClient::getHostByName(char const*, IPAddress&)+0x32>
   15dfe:	6d c0       	rjmp	.+218    	; 0x15eda <DNSClient::getHostByName(char const*, IPAddress&)+0x10c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
   15e00:	f7 01       	movw	r30, r14
   15e02:	42 81       	ldd	r20, Z+2	; 0x02
   15e04:	53 81       	ldd	r21, Z+3	; 0x03
   15e06:	64 81       	ldd	r22, Z+4	; 0x04
   15e08:	75 81       	ldd	r23, Z+5	; 0x05
   15e0a:	80 91 e6 10 	lds	r24, 0x10E6	; 0x8010e6 <INADDR_NONE+0x2>
   15e0e:	90 91 e7 10 	lds	r25, 0x10E7	; 0x8010e7 <INADDR_NONE+0x3>
   15e12:	a0 91 e8 10 	lds	r26, 0x10E8	; 0x8010e8 <INADDR_NONE+0x4>
   15e16:	b0 91 e9 10 	lds	r27, 0x10E9	; 0x8010e9 <INADDR_NONE+0x5>
   15e1a:	48 17       	cp	r20, r24
   15e1c:	59 07       	cpc	r21, r25
   15e1e:	6a 07       	cpc	r22, r26
   15e20:	7b 07       	cpc	r23, r27
   15e22:	09 f4       	brne	.+2      	; 0x15e26 <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
   15e24:	5d c0       	rjmp	.+186    	; 0x15ee0 <DNSClient::getHostByName(char const*, IPAddress&)+0x112>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
   15e26:	67 01       	movw	r12, r14
   15e28:	f8 e0       	ldi	r31, 0x08	; 8
   15e2a:	cf 0e       	add	r12, r31
   15e2c:	d1 1c       	adc	r13, r1
   15e2e:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   15e32:	6f 70       	andi	r22, 0x0F	; 15
   15e34:	77 27       	eor	r23, r23
   15e36:	7c 5f       	subi	r23, 0xFC	; 252
   15e38:	c6 01       	movw	r24, r12
   15e3a:	0e 94 21 b3 	call	0x16642	; 0x16642 <EthernetUDP::begin(unsigned int)>
   15e3e:	81 30       	cpi	r24, 0x01	; 1
   15e40:	29 f5       	brne	.+74     	; 0x15e8c <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   15e42:	8c ed       	ldi	r24, 0xDC	; 220
   15e44:	98 e0       	ldi	r25, 0x08	; 8
   15e46:	9a 83       	std	Y+2, r25	; 0x02
   15e48:	89 83       	std	Y+1, r24	; 0x01
   15e4a:	f7 01       	movw	r30, r14
   15e4c:	82 81       	ldd	r24, Z+2	; 0x02
   15e4e:	93 81       	ldd	r25, Z+3	; 0x03
   15e50:	a4 81       	ldd	r26, Z+4	; 0x04
   15e52:	b5 81       	ldd	r27, Z+5	; 0x05
   15e54:	8b 83       	std	Y+3, r24	; 0x03
   15e56:	9c 83       	std	Y+4, r25	; 0x04
   15e58:	ad 83       	std	Y+5, r26	; 0x05
   15e5a:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
   15e5c:	45 e3       	ldi	r20, 0x35	; 53
   15e5e:	50 e0       	ldi	r21, 0x00	; 0
   15e60:	be 01       	movw	r22, r28
   15e62:	6f 5f       	subi	r22, 0xFF	; 255
   15e64:	7f 4f       	sbci	r23, 0xFF	; 255
   15e66:	c6 01       	movw	r24, r12
   15e68:	0e 94 4f b2 	call	0x1649e	; 0x1649e <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
   15e6c:	89 2b       	or	r24, r25
   15e6e:	59 f0       	breq	.+22     	; 0x15e86 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:147
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
   15e70:	b4 01       	movw	r22, r8
   15e72:	c7 01       	movw	r24, r14
   15e74:	0e 94 c6 ac 	call	0x1598c	; 0x1598c <DNSClient::BuildRequest(char const*)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:148
                if (ret != 0)
   15e78:	89 2b       	or	r24, r25
   15e7a:	29 f0       	breq	.+10     	; 0x15e86 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
   15e7c:	c6 01       	movw	r24, r12
   15e7e:	0e 94 57 b2 	call	0x164ae	; 0x164ae <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
   15e82:	89 2b       	or	r24, r25
   15e84:	31 f5       	brne	.+76     	; 0x15ed2 <DNSClient::getHostByName(char const*, IPAddress&)+0x104>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
   15e86:	c6 01       	movw	r24, r12
   15e88:	0e 94 3a b2 	call	0x16474	; 0x16474 <EthernetUDP::stop()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
    }

    return ret;
}
   15e8c:	c8 01       	movw	r24, r16
   15e8e:	26 96       	adiw	r28, 0x06	; 6
   15e90:	0f b6       	in	r0, 0x3f	; 63
   15e92:	f8 94       	cli
   15e94:	de bf       	out	0x3e, r29	; 62
   15e96:	0f be       	out	0x3f, r0	; 63
   15e98:	cd bf       	out	0x3d, r28	; 61
   15e9a:	df 91       	pop	r29
   15e9c:	cf 91       	pop	r28
   15e9e:	1f 91       	pop	r17
   15ea0:	0f 91       	pop	r16
   15ea2:	ff 90       	pop	r15
   15ea4:	ef 90       	pop	r14
   15ea6:	df 90       	pop	r13
   15ea8:	cf 90       	pop	r12
   15eaa:	bf 90       	pop	r11
   15eac:	af 90       	pop	r10
   15eae:	9f 90       	pop	r9
   15eb0:	8f 90       	pop	r8
   15eb2:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157 (discriminator 1)
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
   15eb4:	0f 3f       	cpi	r16, 0xFF	; 255
   15eb6:	10 07       	cpc	r17, r16
   15eb8:	31 f7       	brne	.-52     	; 0x15e86 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:159
                        {
                            ret = ProcessResponse(5000, aResult);
   15eba:	a5 01       	movw	r20, r10
   15ebc:	68 e8       	ldi	r22, 0x88	; 136
   15ebe:	73 e1       	ldi	r23, 0x13	; 19
   15ec0:	c7 01       	movw	r24, r14
   15ec2:	0e 94 70 ad 	call	0x15ae0	; 0x15ae0 <DNSClient::ProcessResponse(unsigned int, IPAddress&)>
   15ec6:	8c 01       	movw	r16, r24
   15ec8:	81 e0       	ldi	r24, 0x01	; 1
   15eca:	88 1a       	sub	r8, r24
   15ecc:	91 08       	sbc	r9, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
   15ece:	91 f7       	brne	.-28     	; 0x15eb4 <DNSClient::getHostByName(char const*, IPAddress&)+0xe6>
   15ed0:	da cf       	rjmp	.-76     	; 0x15e86 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
   15ed2:	83 e0       	ldi	r24, 0x03	; 3
   15ed4:	88 2e       	mov	r8, r24
   15ed6:	91 2c       	mov	r9, r1
   15ed8:	f0 cf       	rjmp	.-32     	; 0x15eba <DNSClient::getHostByName(char const*, IPAddress&)+0xec>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
   15eda:	01 e0       	ldi	r16, 0x01	; 1
   15edc:	10 e0       	ldi	r17, 0x00	; 0
   15ede:	d6 cf       	rjmp	.-84     	; 0x15e8c <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
   15ee0:	0e ef       	ldi	r16, 0xFE	; 254
   15ee2:	1f ef       	ldi	r17, 0xFF	; 255
   15ee4:	d3 cf       	rjmp	.-90     	; 0x15e8c <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>

00015ee6 <W5500Class::writeGAR(unsigned char*)>:
_ZN10W5500Class8writeGAREPh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:207
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
   15ee6:	24 e0       	ldi	r18, 0x04	; 4
   15ee8:	30 e0       	ldi	r19, 0x00	; 0
   15eea:	ac 01       	movw	r20, r24
   15eec:	64 e0       	ldi	r22, 0x04	; 4
   15eee:	81 e0       	ldi	r24, 0x01	; 1
   15ef0:	90 e0       	ldi	r25, 0x00	; 0
   15ef2:	0c 94 26 b6 	jmp	0x16c4c	; 0x16c4c <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00015ef6 <W5500Class::writeSUBR(unsigned char*)>:
_ZN10W5500Class9writeSUBREPh():
   15ef6:	24 e0       	ldi	r18, 0x04	; 4
   15ef8:	30 e0       	ldi	r19, 0x00	; 0
   15efa:	ac 01       	movw	r20, r24
   15efc:	64 e0       	ldi	r22, 0x04	; 4
   15efe:	85 e0       	ldi	r24, 0x05	; 5
   15f00:	90 e0       	ldi	r25, 0x00	; 0
   15f02:	0c 94 26 b6 	jmp	0x16c4c	; 0x16c4c <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00015f06 <W5500Class::writeSHAR(unsigned char*)>:
_ZN10W5500Class9writeSHAREPh():
   15f06:	26 e0       	ldi	r18, 0x06	; 6
   15f08:	30 e0       	ldi	r19, 0x00	; 0
   15f0a:	ac 01       	movw	r20, r24
   15f0c:	64 e0       	ldi	r22, 0x04	; 4
   15f0e:	89 e0       	ldi	r24, 0x09	; 9
   15f10:	90 e0       	ldi	r25, 0x00	; 0
   15f12:	0c 94 26 b6 	jmp	0x16c4c	; 0x16c4c <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00015f16 <W5500Class::writeSIPR(unsigned char*)>:
_ZN10W5500Class9writeSIPREPh():
   15f16:	24 e0       	ldi	r18, 0x04	; 4
   15f18:	30 e0       	ldi	r19, 0x00	; 0
   15f1a:	ac 01       	movw	r20, r24
   15f1c:	64 e0       	ldi	r22, 0x04	; 4
   15f1e:	8f e0       	ldi	r24, 0x0F	; 15
   15f20:	90 e0       	ldi	r25, 0x00	; 0
   15f22:	0c 94 26 b6 	jmp	0x16c4c	; 0x16c4c <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00015f26 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_():
   15f26:	8f 92       	push	r8
   15f28:	9f 92       	push	r9
   15f2a:	af 92       	push	r10
   15f2c:	bf 92       	push	r11
   15f2e:	cf 92       	push	r12
   15f30:	df 92       	push	r13
   15f32:	ef 92       	push	r14
   15f34:	ff 92       	push	r15
   15f36:	0f 93       	push	r16
   15f38:	1f 93       	push	r17
   15f3a:	cf 93       	push	r28
   15f3c:	df 93       	push	r29
   15f3e:	4c 01       	movw	r8, r24
   15f40:	5b 01       	movw	r10, r22
   15f42:	6a 01       	movw	r12, r20
   15f44:	e9 01       	movw	r28, r18
   15f46:	fc 01       	movw	r30, r24
   15f48:	64 85       	ldd	r22, Z+12	; 0x0c
   15f4a:	8a e2       	ldi	r24, 0x2A	; 42
   15f4c:	91 e1       	ldi	r25, 0x11	; 17
   15f4e:	0e 94 7e b6 	call	0x16cfc	; 0x16cfc <W5500Class::init(unsigned char)>
_ZN10W5500Class13setMACAddressEPh():
   15f52:	c5 01       	movw	r24, r10
   15f54:	0e 94 83 af 	call	0x15f06	; 0x15f06 <W5500Class::writeSHAR(unsigned char*)>
_ZN10W5500Class12setIPAddressEPh():
   15f58:	c6 01       	movw	r24, r12
   15f5a:	02 96       	adiw	r24, 0x02	; 2
   15f5c:	0e 94 8b af 	call	0x15f16	; 0x15f16 <W5500Class::writeSIPR(unsigned char*)>
_ZN10W5500Class12setGatewayIpEPh():
   15f60:	c8 01       	movw	r24, r16
   15f62:	02 96       	adiw	r24, 0x02	; 2
   15f64:	0e 94 73 af 	call	0x15ee6	; 0x15ee6 <W5500Class::writeGAR(unsigned char*)>
_ZN10W5500Class13setSubnetMaskEPh():
   15f68:	c7 01       	movw	r24, r14
   15f6a:	02 96       	adiw	r24, 0x02	; 2
   15f6c:	0e 94 7b af 	call	0x15ef6	; 0x15ef6 <W5500Class::writeSUBR(unsigned char*)>
_ZN9IPAddressaSERKS_():
   15f70:	8a 81       	ldd	r24, Y+2	; 0x02
   15f72:	9b 81       	ldd	r25, Y+3	; 0x03
   15f74:	ac 81       	ldd	r26, Y+4	; 0x04
   15f76:	bd 81       	ldd	r27, Y+5	; 0x05
   15f78:	f4 01       	movw	r30, r8
   15f7a:	82 83       	std	Z+2, r24	; 0x02
   15f7c:	93 83       	std	Z+3, r25	; 0x03
   15f7e:	a4 83       	std	Z+4, r26	; 0x04
   15f80:	b5 83       	std	Z+5, r27	; 0x05
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_():
   15f82:	df 91       	pop	r29
   15f84:	cf 91       	pop	r28
   15f86:	1f 91       	pop	r17
   15f88:	0f 91       	pop	r16
   15f8a:	ff 90       	pop	r15
   15f8c:	ef 90       	pop	r14
   15f8e:	df 90       	pop	r13
   15f90:	cf 90       	pop	r12
   15f92:	bf 90       	pop	r11
   15f94:	af 90       	pop	r10
   15f96:	9f 90       	pop	r9
   15f98:	8f 90       	pop	r8
   15f9a:	08 95       	ret

00015f9c <EthernetClass::dnsServerIP()>:
_ZN9IPAddressC4ERKS_():
   15f9c:	2c ed       	ldi	r18, 0xDC	; 220
   15f9e:	38 e0       	ldi	r19, 0x08	; 8
   15fa0:	fc 01       	movw	r30, r24
   15fa2:	31 83       	std	Z+1, r19	; 0x01
   15fa4:	20 83       	st	Z, r18
   15fa6:	fb 01       	movw	r30, r22
   15fa8:	42 81       	ldd	r20, Z+2	; 0x02
   15faa:	53 81       	ldd	r21, Z+3	; 0x03
   15fac:	64 81       	ldd	r22, Z+4	; 0x04
   15fae:	75 81       	ldd	r23, Z+5	; 0x05
   15fb0:	fc 01       	movw	r30, r24
   15fb2:	42 83       	std	Z+2, r20	; 0x02
   15fb4:	53 83       	std	Z+3, r21	; 0x03
   15fb6:	64 83       	std	Z+4, r22	; 0x04
   15fb8:	75 83       	std	Z+5, r23	; 0x05
_ZN13EthernetClass11dnsServerIPEv():
   15fba:	08 95       	ret

00015fbc <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:
_GLOBAL__sub_I__ZN13EthernetClass6_stateE():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:209

EthernetClass Ethernet;
   15fbc:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   15fbe:	00 e0       	ldi	r16, 0x00	; 0
   15fc0:	20 e0       	ldi	r18, 0x00	; 0
   15fc2:	40 e0       	ldi	r20, 0x00	; 0
   15fc4:	60 e0       	ldi	r22, 0x00	; 0
   15fc6:	87 e0       	ldi	r24, 0x07	; 7
   15fc8:	91 e1       	ldi	r25, 0x11	; 17
   15fca:	0e 94 9e d4 	call	0x1a93c	; 0x1a93c <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN13EthernetClassC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:34
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
   15fce:	8a ee       	ldi	r24, 0xEA	; 234
   15fd0:	90 e1       	ldi	r25, 0x10	; 16
   15fd2:	0e 94 94 d4 	call	0x1a928	; 0x1a928 <IPAddress::IPAddress()>
   15fd6:	ea ee       	ldi	r30, 0xEA	; 234
   15fd8:	f0 e1       	ldi	r31, 0x10	; 16
   15fda:	13 86       	std	Z+11, r1	; 0x0b
   15fdc:	12 86       	std	Z+10, r1	; 0x0a
   15fde:	8a e0       	ldi	r24, 0x0A	; 10
   15fe0:	84 87       	std	Z+12, r24	; 0x0c
_GLOBAL__sub_I__ZN13EthernetClass6_stateE():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:209
   15fe2:	0f 91       	pop	r16
   15fe4:	08 95       	ret

00015fe6 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   15fe6:	90 e0       	ldi	r25, 0x00	; 0
   15fe8:	80 e0       	ldi	r24, 0x00	; 0
   15fea:	08 95       	ret

00015fec <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:21

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}
   15fec:	dc 01       	movw	r26, r24
   15fee:	ed 91       	ld	r30, X+
   15ff0:	fc 91       	ld	r31, X
   15ff2:	02 8c       	ldd	r0, Z+26	; 0x1a
   15ff4:	f3 8d       	ldd	r31, Z+27	; 0x1b
   15ff6:	e0 2d       	mov	r30, r0
   15ff8:	19 95       	eicall
   15ffa:	91 e0       	ldi	r25, 0x01	; 1
   15ffc:	89 27       	eor	r24, r25
   15ffe:	08 95       	ret

00016000 <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
   16000:	cf 93       	push	r28
   16002:	df 93       	push	r29
   16004:	1f 92       	push	r1
   16006:	cd b7       	in	r28, 0x3d	; 61
   16008:	de b7       	in	r29, 0x3e	; 62
   1600a:	69 83       	std	Y+1, r22	; 0x01
   1600c:	dc 01       	movw	r26, r24
   1600e:	ed 91       	ld	r30, X+
   16010:	fc 91       	ld	r31, X
   16012:	02 80       	ldd	r0, Z+2	; 0x02
   16014:	f3 81       	ldd	r31, Z+3	; 0x03
   16016:	e0 2d       	mov	r30, r0
   16018:	41 e0       	ldi	r20, 0x01	; 1
   1601a:	50 e0       	ldi	r21, 0x00	; 0
   1601c:	be 01       	movw	r22, r28
   1601e:	6f 5f       	subi	r22, 0xFF	; 255
   16020:	7f 4f       	sbci	r23, 0xFF	; 255
   16022:	19 95       	eicall
   16024:	0f 90       	pop	r0
   16026:	df 91       	pop	r29
   16028:	cf 91       	pop	r28
   1602a:	08 95       	ret

0001602c <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
   1602c:	21 e0       	ldi	r18, 0x01	; 1
   1602e:	fc 01       	movw	r30, r24
   16030:	84 85       	ldd	r24, Z+12	; 0x0c
   16032:	88 30       	cpi	r24, 0x08	; 8
   16034:	09 f4       	brne	.+2      	; 0x16038 <EthernetClient::operator bool()+0xc>
   16036:	20 e0       	ldi	r18, 0x00	; 0
   16038:	82 2f       	mov	r24, r18
   1603a:	08 95       	ret

0001603c <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
   1603c:	fc 01       	movw	r30, r24
   1603e:	94 85       	ldd	r25, Z+12	; 0x0c
   16040:	fb 01       	movw	r30, r22
   16042:	84 85       	ldd	r24, Z+12	; 0x0c
   16044:	98 13       	cpse	r25, r24
   16046:	03 c0       	rjmp	.+6      	; 0x1604e <EthernetClient::operator==(EthernetClient const&)+0x12>
   16048:	81 e0       	ldi	r24, 0x01	; 1
   1604a:	98 30       	cpi	r25, 0x08	; 8
   1604c:	09 f4       	brne	.+2      	; 0x16050 <EthernetClient::operator==(EthernetClient const&)+0x14>
   1604e:	80 e0       	ldi	r24, 0x00	; 0
   16050:	08 95       	ret

00016052 <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
   16052:	cf 92       	push	r12
   16054:	df 92       	push	r13
   16056:	ef 92       	push	r14
   16058:	ff 92       	push	r15
   1605a:	0f 93       	push	r16
   1605c:	1f 93       	push	r17
   1605e:	cf 93       	push	r28
   16060:	df 93       	push	r29
   16062:	cd b7       	in	r28, 0x3d	; 61
   16064:	de b7       	in	r29, 0x3e	; 62
   16066:	af 97       	sbiw	r28, 0x2f	; 47
   16068:	0f b6       	in	r0, 0x3f	; 63
   1606a:	f8 94       	cli
   1606c:	de bf       	out	0x3e, r29	; 62
   1606e:	0f be       	out	0x3f, r0	; 63
   16070:	cd bf       	out	0x3d, r28	; 61
   16072:	8c 01       	movw	r16, r24
   16074:	6b 01       	movw	r12, r22
   16076:	7a 01       	movw	r14, r20
_ZN9DNSClientC4Ev():
   16078:	ce 01       	movw	r24, r28
   1607a:	01 96       	adiw	r24, 0x01	; 1
   1607c:	0e 94 94 d4 	call	0x1a928	; 0x1a928 <IPAddress::IPAddress()>
   16080:	ce 01       	movw	r24, r28
   16082:	09 96       	adiw	r24, 0x09	; 9
   16084:	0e 94 56 b3 	call	0x166ac	; 0x166ac <EthernetUDP::EthernetUDP()>
_ZN14EthernetClient7connectEPKcj():
   16088:	ce 01       	movw	r24, r28
   1608a:	8a 96       	adiw	r24, 0x2a	; 42
   1608c:	0e 94 94 d4 	call	0x1a928	; 0x1a928 <IPAddress::IPAddress()>
   16090:	6a ee       	ldi	r22, 0xEA	; 234
   16092:	70 e1       	ldi	r23, 0x10	; 16
   16094:	ce 01       	movw	r24, r28
   16096:	84 96       	adiw	r24, 0x24	; 36
   16098:	0e 94 ce af 	call	0x15f9c	; 0x15f9c <EthernetClass::dnsServerIP()>
   1609c:	be 01       	movw	r22, r28
   1609e:	6c 5d       	subi	r22, 0xDC	; 220
   160a0:	7f 4f       	sbci	r23, 0xFF	; 255
   160a2:	ce 01       	movw	r24, r28
   160a4:	01 96       	adiw	r24, 0x01	; 1
   160a6:	0e 94 71 ac 	call	0x158e2	; 0x158e2 <DNSClient::begin(IPAddress const&)>
   160aa:	ae 01       	movw	r20, r28
   160ac:	46 5d       	subi	r20, 0xD6	; 214
   160ae:	5f 4f       	sbci	r21, 0xFF	; 255
   160b0:	b6 01       	movw	r22, r12
   160b2:	ce 01       	movw	r24, r28
   160b4:	01 96       	adiw	r24, 0x01	; 1
   160b6:	0e 94 e7 ae 	call	0x15dce	; 0x15dce <DNSClient::getHostByName(char const*, IPAddress&)>
   160ba:	81 30       	cpi	r24, 0x01	; 1
   160bc:	91 05       	cpc	r25, r1
   160be:	c1 f4       	brne	.+48     	; 0x160f0 <EthernetClient::connect(char const*, unsigned int)+0x9e>
   160c0:	d8 01       	movw	r26, r16
   160c2:	ed 91       	ld	r30, X+
   160c4:	fc 91       	ld	r31, X
   160c6:	06 84       	ldd	r0, Z+14	; 0x0e
   160c8:	f7 85       	ldd	r31, Z+15	; 0x0f
   160ca:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
   160cc:	8c ed       	ldi	r24, 0xDC	; 220
   160ce:	98 e0       	ldi	r25, 0x08	; 8
   160d0:	9d a3       	std	Y+37, r25	; 0x25
   160d2:	8c a3       	std	Y+36, r24	; 0x24
   160d4:	8c a5       	ldd	r24, Y+44	; 0x2c
   160d6:	9d a5       	ldd	r25, Y+45	; 0x2d
   160d8:	ae a5       	ldd	r26, Y+46	; 0x2e
   160da:	bf a5       	ldd	r27, Y+47	; 0x2f
   160dc:	8e a3       	std	Y+38, r24	; 0x26
   160de:	9f a3       	std	Y+39, r25	; 0x27
   160e0:	a8 a7       	std	Y+40, r26	; 0x28
   160e2:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
   160e4:	a7 01       	movw	r20, r14
   160e6:	be 01       	movw	r22, r28
   160e8:	6c 5d       	subi	r22, 0xDC	; 220
   160ea:	7f 4f       	sbci	r23, 0xFF	; 255
   160ec:	c8 01       	movw	r24, r16
   160ee:	19 95       	eicall
   160f0:	af 96       	adiw	r28, 0x2f	; 47
   160f2:	0f b6       	in	r0, 0x3f	; 63
   160f4:	f8 94       	cli
   160f6:	de bf       	out	0x3e, r29	; 62
   160f8:	0f be       	out	0x3f, r0	; 63
   160fa:	cd bf       	out	0x3d, r28	; 61
   160fc:	df 91       	pop	r29
   160fe:	cf 91       	pop	r28
   16100:	1f 91       	pop	r17
   16102:	0f 91       	pop	r16
   16104:	ff 90       	pop	r15
   16106:	ef 90       	pop	r14
   16108:	df 90       	pop	r13
   1610a:	cf 90       	pop	r12
   1610c:	08 95       	ret

0001610e <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
   1610e:	0f 93       	push	r16
   16110:	1f 93       	push	r17
   16112:	cf 93       	push	r28
   16114:	df 93       	push	r29
   16116:	8c 01       	movw	r16, r24
   16118:	ea 01       	movw	r28, r20
   1611a:	fc 01       	movw	r30, r24
   1611c:	84 85       	ldd	r24, Z+12	; 0x0c
   1611e:	88 30       	cpi	r24, 0x08	; 8
   16120:	69 f4       	brne	.+26     	; 0x1613c <EthernetClient::write(unsigned char const*, unsigned int)+0x2e>
_ZN5Print13setWriteErrorEi():
   16122:	81 e0       	ldi	r24, 0x01	; 1
   16124:	90 e0       	ldi	r25, 0x00	; 0
   16126:	f8 01       	movw	r30, r16
   16128:	93 83       	std	Z+3, r25	; 0x03
   1612a:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
   1612c:	d0 e0       	ldi	r29, 0x00	; 0
   1612e:	c0 e0       	ldi	r28, 0x00	; 0
   16130:	ce 01       	movw	r24, r28
   16132:	df 91       	pop	r29
   16134:	cf 91       	pop	r28
   16136:	1f 91       	pop	r17
   16138:	0f 91       	pop	r16
   1613a:	08 95       	ret
   1613c:	0e 94 a9 b4 	call	0x16952	; 0x16952 <send(unsigned char, unsigned char const*, unsigned int)>
   16140:	89 2b       	or	r24, r25
   16142:	79 f3       	breq	.-34     	; 0x16122 <EthernetClient::write(unsigned char const*, unsigned int)+0x14>
   16144:	f5 cf       	rjmp	.-22     	; 0x16130 <EthernetClient::write(unsigned char const*, unsigned int)+0x22>

00016146 <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
   16146:	fc 01       	movw	r30, r24
   16148:	64 85       	ldd	r22, Z+12	; 0x0c
   1614a:	68 30       	cpi	r22, 0x08	; 8
   1614c:	21 f0       	breq	.+8      	; 0x16156 <EthernetClient::available()+0x10>
   1614e:	8a e2       	ldi	r24, 0x2A	; 42
   16150:	91 e1       	ldi	r25, 0x11	; 17
   16152:	0c 94 01 b7 	jmp	0x16e02	; 0x16e02 <W5500Class::getRXReceivedSize(unsigned char)>
   16156:	90 e0       	ldi	r25, 0x00	; 0
   16158:	80 e0       	ldi	r24, 0x00	; 0
   1615a:	08 95       	ret

0001615c <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
   1615c:	cf 93       	push	r28
   1615e:	df 93       	push	r29
   16160:	1f 92       	push	r1
   16162:	cd b7       	in	r28, 0x3d	; 61
   16164:	de b7       	in	r29, 0x3e	; 62
   16166:	41 e0       	ldi	r20, 0x01	; 1
   16168:	50 e0       	ldi	r21, 0x00	; 0
   1616a:	be 01       	movw	r22, r28
   1616c:	6f 5f       	subi	r22, 0xFF	; 255
   1616e:	7f 4f       	sbci	r23, 0xFF	; 255
   16170:	fc 01       	movw	r30, r24
   16172:	84 85       	ldd	r24, Z+12	; 0x0c
   16174:	0e 94 fa b4 	call	0x169f4	; 0x169f4 <recv(unsigned char, unsigned char*, int)>
   16178:	18 16       	cp	r1, r24
   1617a:	19 06       	cpc	r1, r25
   1617c:	34 f4       	brge	.+12     	; 0x1618a <EthernetClient::read()+0x2e>
   1617e:	89 81       	ldd	r24, Y+1	; 0x01
   16180:	90 e0       	ldi	r25, 0x00	; 0
   16182:	0f 90       	pop	r0
   16184:	df 91       	pop	r29
   16186:	cf 91       	pop	r28
   16188:	08 95       	ret
   1618a:	8f ef       	ldi	r24, 0xFF	; 255
   1618c:	9f ef       	ldi	r25, 0xFF	; 255
   1618e:	f9 cf       	rjmp	.-14     	; 0x16182 <EthernetClient::read()+0x26>

00016190 <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
   16190:	fc 01       	movw	r30, r24
   16192:	84 85       	ldd	r24, Z+12	; 0x0c
   16194:	0c 94 fa b4 	jmp	0x169f4	; 0x169f4 <recv(unsigned char, unsigned char*, int)>

00016198 <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
   16198:	0f 93       	push	r16
   1619a:	1f 93       	push	r17
   1619c:	cf 93       	push	r28
   1619e:	df 93       	push	r29
   161a0:	1f 92       	push	r1
   161a2:	cd b7       	in	r28, 0x3d	; 61
   161a4:	de b7       	in	r29, 0x3e	; 62
   161a6:	8c 01       	movw	r16, r24
   161a8:	dc 01       	movw	r26, r24
   161aa:	ed 91       	ld	r30, X+
   161ac:	fc 91       	ld	r31, X
   161ae:	00 84       	ldd	r0, Z+8	; 0x08
   161b0:	f1 85       	ldd	r31, Z+9	; 0x09
   161b2:	e0 2d       	mov	r30, r0
   161b4:	19 95       	eicall
   161b6:	89 2b       	or	r24, r25
   161b8:	79 f0       	breq	.+30     	; 0x161d8 <EthernetClient::peek()+0x40>
   161ba:	be 01       	movw	r22, r28
   161bc:	6f 5f       	subi	r22, 0xFF	; 255
   161be:	7f 4f       	sbci	r23, 0xFF	; 255
   161c0:	f8 01       	movw	r30, r16
   161c2:	84 85       	ldd	r24, Z+12	; 0x0c
   161c4:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <peek(unsigned char, unsigned char*)>
   161c8:	89 81       	ldd	r24, Y+1	; 0x01
   161ca:	90 e0       	ldi	r25, 0x00	; 0
   161cc:	0f 90       	pop	r0
   161ce:	df 91       	pop	r29
   161d0:	cf 91       	pop	r28
   161d2:	1f 91       	pop	r17
   161d4:	0f 91       	pop	r16
   161d6:	08 95       	ret
   161d8:	8f ef       	ldi	r24, 0xFF	; 255
   161da:	9f ef       	ldi	r25, 0xFF	; 255
   161dc:	f7 cf       	rjmp	.-18     	; 0x161cc <EthernetClient::peek()+0x34>

000161de <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
   161de:	fc 01       	movw	r30, r24
   161e0:	84 85       	ldd	r24, Z+12	; 0x0c
   161e2:	0c 94 4e b5 	jmp	0x16a9c	; 0x16a9c <flush(unsigned char)>

000161e6 <EthernetClient::EthernetClient()>:
_ZN14EthernetClientC2Ev():
   161e6:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
   161e8:	13 82       	std	Z+3, r1	; 0x03
   161ea:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
   161ec:	88 ee       	ldi	r24, 0xE8	; 232
   161ee:	93 e0       	ldi	r25, 0x03	; 3
   161f0:	a0 e0       	ldi	r26, 0x00	; 0
   161f2:	b0 e0       	ldi	r27, 0x00	; 0
   161f4:	84 83       	std	Z+4, r24	; 0x04
   161f6:	95 83       	std	Z+5, r25	; 0x05
   161f8:	a6 83       	std	Z+6, r26	; 0x06
   161fa:	b7 83       	std	Z+7, r27	; 0x07
_ZN14EthernetClientC2Ev():
   161fc:	8f e5       	ldi	r24, 0x5F	; 95
   161fe:	98 e0       	ldi	r25, 0x08	; 8
   16200:	91 83       	std	Z+1, r25	; 0x01
   16202:	80 83       	st	Z, r24
   16204:	88 e0       	ldi	r24, 0x08	; 8
   16206:	84 87       	std	Z+12, r24	; 0x0c
   16208:	08 95       	ret

0001620a <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   1620a:	fc 01       	movw	r30, r24
   1620c:	64 85       	ldd	r22, Z+12	; 0x0c
   1620e:	68 30       	cpi	r22, 0x08	; 8
   16210:	41 f0       	breq	.+16     	; 0x16222 <EthernetClient::status()+0x18>
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
   16212:	62 95       	swap	r22
   16214:	66 0f       	add	r22, r22
   16216:	60 7e       	andi	r22, 0xE0	; 224
   16218:	68 5f       	subi	r22, 0xF8	; 248
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
   1621a:	83 e0       	ldi	r24, 0x03	; 3
   1621c:	90 e0       	ldi	r25, 0x00	; 0
   1621e:	0c 94 5a b6 	jmp	0x16cb4	; 0x16cb4 <W5500Class::read(unsigned int, unsigned char)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   16222:	80 e0       	ldi	r24, 0x00	; 0
   16224:	08 95       	ret

00016226 <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
   16226:	cf 92       	push	r12
   16228:	df 92       	push	r13
   1622a:	ef 92       	push	r14
   1622c:	ff 92       	push	r15
   1622e:	0f 93       	push	r16
   16230:	1f 93       	push	r17
   16232:	cf 93       	push	r28
   16234:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
   16236:	fc 01       	movw	r30, r24
   16238:	e4 84       	ldd	r14, Z+12	; 0x0c
   1623a:	f8 e0       	ldi	r31, 0x08	; 8
   1623c:	ef 16       	cp	r14, r31
   1623e:	59 f0       	breq	.+22     	; 0x16256 <EthernetClient::connect(IPAddress, unsigned int)+0x30>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
   16240:	90 e0       	ldi	r25, 0x00	; 0
   16242:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
   16244:	df 91       	pop	r29
   16246:	cf 91       	pop	r28
   16248:	1f 91       	pop	r17
   1624a:	0f 91       	pop	r16
   1624c:	ff 90       	pop	r15
   1624e:	ef 90       	pop	r14
   16250:	df 90       	pop	r13
   16252:	cf 90       	pop	r12
   16254:	08 95       	ret
   16256:	6a 01       	movw	r12, r20
   16258:	8b 01       	movw	r16, r22
   1625a:	ec 01       	movw	r28, r24
   1625c:	f1 2c       	mov	r15, r1
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
   1625e:	6e 2d       	mov	r22, r14
   16260:	83 e0       	ldi	r24, 0x03	; 3
   16262:	90 e0       	ldi	r25, 0x00	; 0
   16264:	0e 94 5a b6 	call	0x16cb4	; 0x16cb4 <W5500Class::read(unsigned int, unsigned char)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   16268:	81 11       	cpse	r24, r1
   1626a:	23 c0       	rjmp	.+70     	; 0x162b2 <EthernetClient::connect(IPAddress, unsigned int)+0x8c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
   1626c:	fc 86       	std	Y+12, r15	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   1626e:	8c 85       	ldd	r24, Y+12	; 0x0c
   16270:	88 30       	cpi	r24, 0x08	; 8
   16272:	31 f3       	breq	.-52     	; 0x16240 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
   16274:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <EthernetClient::_srcport>
   16278:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <EthernetClient::_srcport+0x1>
   1627c:	2f 5f       	subi	r18, 0xFF	; 255
   1627e:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
   16280:	11 f1       	breq	.+68     	; 0x162c6 <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
   16282:	30 93 7d 02 	sts	0x027D, r19	; 0x80027d <EthernetClient::_srcport+0x1>
   16286:	20 93 7c 02 	sts	0x027C, r18	; 0x80027c <EthernetClient::_srcport>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:55
  socket(_sock, SnMR::TCP, _srcport, 0);
   1628a:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <EthernetClient::_srcport>
   1628e:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <EthernetClient::_srcport+0x1>
   16292:	20 e0       	ldi	r18, 0x00	; 0
   16294:	61 e0       	ldi	r22, 0x01	; 1
   16296:	0e 94 36 b4 	call	0x1686c	; 0x1686c <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   1629a:	b8 01       	movw	r22, r16
   1629c:	6e 5f       	subi	r22, 0xFE	; 254
   1629e:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57

  if (!::connect(_sock, rawIPAddress(ip), port)) {
   162a0:	a6 01       	movw	r20, r12
   162a2:	8c 85       	ldd	r24, Y+12	; 0x0c
   162a4:	0e 94 6c b4 	call	0x168d8	; 0x168d8 <connect(unsigned char, unsigned char*, unsigned int)>
   162a8:	81 11       	cpse	r24, r1
   162aa:	10 c0       	rjmp	.+32     	; 0x162cc <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
    _sock = MAX_SOCK_NUM;
   162ac:	88 e0       	ldi	r24, 0x08	; 8
   162ae:	8c 87       	std	Y+12, r24	; 0x0c
   162b0:	c7 cf       	rjmp	.-114    	; 0x16240 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   162b2:	8b 7f       	andi	r24, 0xFB	; 251
   162b4:	88 31       	cpi	r24, 0x18	; 24
   162b6:	d1 f2       	breq	.-76     	; 0x1626c <EthernetClient::connect(IPAddress, unsigned int)+0x46>
   162b8:	f3 94       	inc	r15
   162ba:	20 e2       	ldi	r18, 0x20	; 32
   162bc:	e2 0e       	add	r14, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   162be:	88 e0       	ldi	r24, 0x08	; 8
   162c0:	f8 12       	cpse	r15, r24
   162c2:	cd cf       	rjmp	.-102    	; 0x1625e <EthernetClient::connect(IPAddress, unsigned int)+0x38>
   162c4:	d4 cf       	rjmp	.-88     	; 0x1626e <EthernetClient::connect(IPAddress, unsigned int)+0x48>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
   162c6:	20 e0       	ldi	r18, 0x00	; 0
   162c8:	34 e0       	ldi	r19, 0x04	; 4
   162ca:	db cf       	rjmp	.-74     	; 0x16282 <EthernetClient::connect(IPAddress, unsigned int)+0x5c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
   162cc:	ce 01       	movw	r24, r28
   162ce:	0e 94 05 b1 	call	0x1620a	; 0x1620a <EthernetClient::status()>
   162d2:	87 31       	cpi	r24, 0x17	; 23
   162d4:	51 f0       	breq	.+20     	; 0x162ea <EthernetClient::connect(IPAddress, unsigned int)+0xc4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
   162d6:	61 e0       	ldi	r22, 0x01	; 1
   162d8:	70 e0       	ldi	r23, 0x00	; 0
   162da:	80 e0       	ldi	r24, 0x00	; 0
   162dc:	90 e0       	ldi	r25, 0x00	; 0
   162de:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
   162e2:	ce 01       	movw	r24, r28
   162e4:	0e 94 05 b1 	call	0x1620a	; 0x1620a <EthernetClient::status()>
   162e8:	df cf       	rjmp	.-66     	; 0x162a8 <EthernetClient::connect(IPAddress, unsigned int)+0x82>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
   162ea:	81 e0       	ldi	r24, 0x01	; 1
   162ec:	90 e0       	ldi	r25, 0x00	; 0
   162ee:	aa cf       	rjmp	.-172    	; 0x16244 <EthernetClient::connect(IPAddress, unsigned int)+0x1e>

000162f0 <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
   162f0:	cf 92       	push	r12
   162f2:	df 92       	push	r13
   162f4:	ef 92       	push	r14
   162f6:	ff 92       	push	r15
   162f8:	cf 93       	push	r28
   162fa:	df 93       	push	r29
   162fc:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
   162fe:	8c 85       	ldd	r24, Y+12	; 0x0c
   16300:	88 30       	cpi	r24, 0x08	; 8
   16302:	79 f1       	breq	.+94     	; 0x16362 <EthernetClient::stop()+0x72>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:131
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
   16304:	0e 94 a2 b4 	call	0x16944	; 0x16944 <disconnect(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
  unsigned long start = millis();
   16308:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   1630c:	6b 01       	movw	r12, r22
   1630e:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   16310:	ce 01       	movw	r24, r28
   16312:	0e 94 05 b1 	call	0x1620a	; 0x1620a <EthernetClient::status()>
   16316:	88 23       	and	r24, r24
   16318:	91 f0       	breq	.+36     	; 0x1633e <EthernetClient::stop()+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135 (discriminator 1)
   1631a:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   1631e:	6c 19       	sub	r22, r12
   16320:	7d 09       	sbc	r23, r13
   16322:	8e 09       	sbc	r24, r14
   16324:	9f 09       	sbc	r25, r15
   16326:	68 3e       	cpi	r22, 0xE8	; 232
   16328:	73 40       	sbci	r23, 0x03	; 3
   1632a:	81 05       	cpc	r24, r1
   1632c:	91 05       	cpc	r25, r1
   1632e:	38 f4       	brcc	.+14     	; 0x1633e <EthernetClient::stop()+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
   16330:	61 e0       	ldi	r22, 0x01	; 1
   16332:	70 e0       	ldi	r23, 0x00	; 0
   16334:	80 e0       	ldi	r24, 0x00	; 0
   16336:	90 e0       	ldi	r25, 0x00	; 0
   16338:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135
  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   1633c:	e9 cf       	rjmp	.-46     	; 0x16310 <EthernetClient::stop()+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139
    delay(1);

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
   1633e:	ce 01       	movw	r24, r28
   16340:	0e 94 05 b1 	call	0x1620a	; 0x1620a <EthernetClient::status()>
   16344:	88 23       	and	r24, r24
   16346:	19 f0       	breq	.+6      	; 0x1634e <EthernetClient::stop()+0x5e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
   16348:	8c 85       	ldd	r24, Y+12	; 0x0c
   1634a:	0e 94 28 b4 	call	0x16850	; 0x16850 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:142

  EthernetClass::_server_port[_sock] = 0;
   1634e:	ec 85       	ldd	r30, Y+12	; 0x0c
   16350:	f0 e0       	ldi	r31, 0x00	; 0
   16352:	ee 0f       	add	r30, r30
   16354:	ff 1f       	adc	r31, r31
   16356:	e9 50       	subi	r30, 0x09	; 9
   16358:	ff 4e       	sbci	r31, 0xEF	; 239
   1635a:	11 82       	std	Z+1, r1	; 0x01
   1635c:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143
  _sock = MAX_SOCK_NUM;
   1635e:	88 e0       	ldi	r24, 0x08	; 8
   16360:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
   16362:	df 91       	pop	r29
   16364:	cf 91       	pop	r28
   16366:	ff 90       	pop	r15
   16368:	ef 90       	pop	r14
   1636a:	df 90       	pop	r13
   1636c:	cf 90       	pop	r12
   1636e:	08 95       	ret

00016370 <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

uint8_t EthernetClient::connected() {
   16370:	cf 93       	push	r28
   16372:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
   16374:	fc 01       	movw	r30, r24
   16376:	24 85       	ldd	r18, Z+12	; 0x0c
   16378:	28 30       	cpi	r18, 0x08	; 8
   1637a:	d9 f0       	breq	.+54     	; 0x163b2 <EthernetClient::connected()+0x42>
   1637c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
   1637e:	0e 94 05 b1 	call	0x1620a	; 0x1620a <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   16382:	84 31       	cpi	r24, 0x14	; 20
   16384:	89 f0       	breq	.+34     	; 0x163a8 <EthernetClient::connected()+0x38>
   16386:	88 23       	and	r24, r24
   16388:	79 f0       	breq	.+30     	; 0x163a8 <EthernetClient::connected()+0x38>
   1638a:	88 31       	cpi	r24, 0x18	; 24
   1638c:	69 f0       	breq	.+26     	; 0x163a8 <EthernetClient::connected()+0x38>
   1638e:	21 e0       	ldi	r18, 0x01	; 1
   16390:	8c 31       	cpi	r24, 0x1C	; 28
   16392:	59 f4       	brne	.+22     	; 0x163aa <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   16394:	e8 81       	ld	r30, Y
   16396:	f9 81       	ldd	r31, Y+1	; 0x01
   16398:	00 84       	ldd	r0, Z+8	; 0x08
   1639a:	f1 85       	ldd	r31, Z+9	; 0x09
   1639c:	e0 2d       	mov	r30, r0
   1639e:	ce 01       	movw	r24, r28
   163a0:	19 95       	eicall
   163a2:	21 e0       	ldi	r18, 0x01	; 1
   163a4:	89 2b       	or	r24, r25
   163a6:	09 f4       	brne	.+2      	; 0x163aa <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   163a8:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   163aa:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
   163ac:	df 91       	pop	r29
   163ae:	cf 91       	pop	r28
   163b0:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
   163b2:	80 e0       	ldi	r24, 0x00	; 0
   163b4:	fb cf       	rjmp	.-10     	; 0x163ac <EthernetClient::connected()+0x3c>

000163b6 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
_GLOBAL__sub_I__ZN14EthernetClient8_srcportE():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
   163b6:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   163b8:	00 e0       	ldi	r16, 0x00	; 0
   163ba:	20 e0       	ldi	r18, 0x00	; 0
   163bc:	40 e0       	ldi	r20, 0x00	; 0
   163be:	60 e0       	ldi	r22, 0x00	; 0
   163c0:	8d e0       	ldi	r24, 0x0D	; 13
   163c2:	91 e1       	ldi	r25, 0x11	; 17
   163c4:	0e 94 9e d4 	call	0x1a93c	; 0x1a93c <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN14EthernetClient8_srcportE():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
   163c8:	0f 91       	pop	r16
   163ca:	08 95       	ret

000163cc <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
_GLOBAL__sub_I__ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
   163cc:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   163ce:	00 e0       	ldi	r16, 0x00	; 0
   163d0:	20 e0       	ldi	r18, 0x00	; 0
   163d2:	40 e0       	ldi	r20, 0x00	; 0
   163d4:	60 e0       	ldi	r22, 0x00	; 0
   163d6:	83 e1       	ldi	r24, 0x13	; 19
   163d8:	91 e1       	ldi	r25, 0x11	; 17
   163da:	0e 94 9e d4 	call	0x1a93c	; 0x1a93c <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
   163de:	0f 91       	pop	r16
   163e0:	08 95       	ret

000163e2 <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
   163e2:	80 e0       	ldi	r24, 0x00	; 0
   163e4:	08 95       	ret

000163e6 <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   163e6:	dc 01       	movw	r26, r24
   163e8:	ed 91       	ld	r30, X+
   163ea:	fc 91       	ld	r31, X
   163ec:	04 8c       	ldd	r0, Z+28	; 0x1c
   163ee:	f5 8d       	ldd	r31, Z+29	; 0x1d
   163f0:	e0 2d       	mov	r30, r0
   163f2:	19 94       	eijmp

000163f4 <EthernetUDP::remoteIP()>:
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   163f4:	2c ed       	ldi	r18, 0xDC	; 220
   163f6:	38 e0       	ldi	r19, 0x08	; 8
   163f8:	fc 01       	movw	r30, r24
   163fa:	31 83       	std	Z+1, r19	; 0x01
   163fc:	20 83       	st	Z, r18
   163fe:	fb 01       	movw	r30, r22
   16400:	41 89       	ldd	r20, Z+17	; 0x11
   16402:	52 89       	ldd	r21, Z+18	; 0x12
   16404:	63 89       	ldd	r22, Z+19	; 0x13
   16406:	74 89       	ldd	r23, Z+20	; 0x14
   16408:	fc 01       	movw	r30, r24
   1640a:	42 83       	std	Z+2, r20	; 0x02
   1640c:	53 83       	std	Z+3, r21	; 0x03
   1640e:	64 83       	std	Z+4, r22	; 0x04
   16410:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
   16412:	08 95       	ret

00016414 <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
   16414:	fc 01       	movw	r30, r24
   16416:	85 89       	ldd	r24, Z+21	; 0x15
   16418:	96 89       	ldd	r25, Z+22	; 0x16
   1641a:	08 95       	ret

0001641c <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
   1641c:	fc 01       	movw	r30, r24
   1641e:	81 8d       	ldd	r24, Z+25	; 0x19
   16420:	92 8d       	ldd	r25, Z+26	; 0x1a
   16422:	08 95       	ret

00016424 <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
   16424:	cf 93       	push	r28
   16426:	df 93       	push	r29
   16428:	1f 92       	push	r1
   1642a:	cd b7       	in	r28, 0x3d	; 61
   1642c:	de b7       	in	r29, 0x3e	; 62
   1642e:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
   16430:	dc 01       	movw	r26, r24
   16432:	ed 91       	ld	r30, X+
   16434:	fc 91       	ld	r31, X
   16436:	02 80       	ldd	r0, Z+2	; 0x02
   16438:	f3 81       	ldd	r31, Z+3	; 0x03
   1643a:	e0 2d       	mov	r30, r0
   1643c:	41 e0       	ldi	r20, 0x01	; 1
   1643e:	50 e0       	ldi	r21, 0x00	; 0
   16440:	be 01       	movw	r22, r28
   16442:	6f 5f       	subi	r22, 0xFF	; 255
   16444:	7f 4f       	sbci	r23, 0xFF	; 255
   16446:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
   16448:	0f 90       	pop	r0
   1644a:	df 91       	pop	r29
   1644c:	cf 91       	pop	r28
   1644e:	08 95       	ret

00016450 <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
   16450:	cf 93       	push	r28
   16452:	df 93       	push	r29
   16454:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   16456:	89 8d       	ldd	r24, Y+25	; 0x19
   16458:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1645a:	89 2b       	or	r24, r25
   1645c:	41 f0       	breq	.+16     	; 0x1646e <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
   1645e:	e8 81       	ld	r30, Y
   16460:	f9 81       	ldd	r31, Y+1	; 0x01
   16462:	02 84       	ldd	r0, Z+10	; 0x0a
   16464:	f3 85       	ldd	r31, Z+11	; 0x0b
   16466:	e0 2d       	mov	r30, r0
   16468:	ce 01       	movw	r24, r28
   1646a:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   1646c:	f4 cf       	rjmp	.-24     	; 0x16456 <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  {
    read();
  }
}
   1646e:	df 91       	pop	r29
   16470:	cf 91       	pop	r28
   16472:	08 95       	ret

00016474 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   16474:	cf 93       	push	r28
   16476:	df 93       	push	r29
   16478:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   1647a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1647c:	88 30       	cpi	r24, 0x08	; 8
   1647e:	61 f0       	breq	.+24     	; 0x16498 <EthernetUDP::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   16480:	0e 94 28 b4 	call	0x16850	; 0x16850 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:79

  EthernetClass::_server_port[_sock] = 0;
   16484:	ec 85       	ldd	r30, Y+12	; 0x0c
   16486:	f0 e0       	ldi	r31, 0x00	; 0
   16488:	ee 0f       	add	r30, r30
   1648a:	ff 1f       	adc	r31, r31
   1648c:	e9 50       	subi	r30, 0x09	; 9
   1648e:	ff 4e       	sbci	r31, 0xEF	; 239
   16490:	11 82       	std	Z+1, r1	; 0x01
   16492:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80
  _sock = MAX_SOCK_NUM;
   16494:	88 e0       	ldi	r24, 0x08	; 8
   16496:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   16498:	df 91       	pop	r29
   1649a:	cf 91       	pop	r28
   1649c:	08 95       	ret

0001649e <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
   1649e:	fc 01       	movw	r30, r24
   164a0:	10 8e       	std	Z+24, r1	; 0x18
   164a2:	17 8a       	std	Z+23, r1	; 0x17
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   164a4:	6e 5f       	subi	r22, 0xFE	; 254
   164a6:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   164a8:	84 85       	ldd	r24, Z+12	; 0x0c
   164aa:	0c 94 7d b5 	jmp	0x16afa	; 0x16afa <startUDP(unsigned char, unsigned char*, unsigned int)>

000164ae <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
   164ae:	fc 01       	movw	r30, r24
   164b0:	84 85       	ldd	r24, Z+12	; 0x0c
   164b2:	0c 94 a2 b5 	jmp	0x16b44	; 0x16b44 <sendUDP(unsigned char)>

000164b6 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
   164b6:	cf 93       	push	r28
   164b8:	df 93       	push	r29
   164ba:	ec 01       	movw	r28, r24
   164bc:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
   164be:	8f 89       	ldd	r24, Y+23	; 0x17
   164c0:	98 8d       	ldd	r25, Y+24	; 0x18
   164c2:	ab 01       	movw	r20, r22
   164c4:	bc 01       	movw	r22, r24
   164c6:	8c 85       	ldd	r24, Y+12	; 0x0c
   164c8:	0e 94 4f b5 	call	0x16a9e	; 0x16a9e <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
   164cc:	2f 89       	ldd	r18, Y+23	; 0x17
   164ce:	38 8d       	ldd	r19, Y+24	; 0x18
   164d0:	28 0f       	add	r18, r24
   164d2:	39 1f       	adc	r19, r25
   164d4:	38 8f       	std	Y+24, r19	; 0x18
   164d6:	2f 8b       	std	Y+23, r18	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
   164d8:	df 91       	pop	r29
   164da:	cf 91       	pop	r28
   164dc:	08 95       	ret

000164de <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   164de:	0f 93       	push	r16
   164e0:	1f 93       	push	r17
   164e2:	cf 93       	push	r28
   164e4:	df 93       	push	r29
   164e6:	1f 92       	push	r1
   164e8:	cd b7       	in	r28, 0x3d	; 61
   164ea:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   164ec:	fc 01       	movw	r30, r24
   164ee:	21 8d       	ldd	r18, Z+25	; 0x19
   164f0:	32 8d       	ldd	r19, Z+26	; 0x1a
   164f2:	23 2b       	or	r18, r19
   164f4:	41 f4       	brne	.+16     	; 0x16506 <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   164f6:	8f ef       	ldi	r24, 0xFF	; 255
   164f8:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   164fa:	0f 90       	pop	r0
   164fc:	df 91       	pop	r29
   164fe:	cf 91       	pop	r28
   16500:	1f 91       	pop	r17
   16502:	0f 91       	pop	r16
   16504:	08 95       	ret
   16506:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155 (discriminator 1)

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   16508:	41 e0       	ldi	r20, 0x01	; 1
   1650a:	50 e0       	ldi	r21, 0x00	; 0
   1650c:	be 01       	movw	r22, r28
   1650e:	6f 5f       	subi	r22, 0xFF	; 255
   16510:	7f 4f       	sbci	r23, 0xFF	; 255
   16512:	fc 01       	movw	r30, r24
   16514:	84 85       	ldd	r24, Z+12	; 0x0c
   16516:	0e 94 fa b4 	call	0x169f4	; 0x169f4 <recv(unsigned char, unsigned char*, int)>
   1651a:	18 16       	cp	r1, r24
   1651c:	19 06       	cpc	r1, r25
   1651e:	5c f7       	brge	.-42     	; 0x164f6 <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   16520:	f8 01       	movw	r30, r16
   16522:	81 8d       	ldd	r24, Z+25	; 0x19
   16524:	92 8d       	ldd	r25, Z+26	; 0x1a
   16526:	01 97       	sbiw	r24, 0x01	; 1
   16528:	92 8f       	std	Z+26, r25	; 0x1a
   1652a:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   1652c:	89 81       	ldd	r24, Y+1	; 0x01
   1652e:	90 e0       	ldi	r25, 0x00	; 0
   16530:	e4 cf       	rjmp	.-56     	; 0x164fa <EthernetUDP::read()+0x1c>

00016532 <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   16532:	cf 93       	push	r28
   16534:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   16536:	fc 01       	movw	r30, r24
   16538:	21 8d       	ldd	r18, Z+25	; 0x19
   1653a:	32 8d       	ldd	r19, Z+26	; 0x1a
   1653c:	21 15       	cp	r18, r1
   1653e:	31 05       	cpc	r19, r1
   16540:	29 f4       	brne	.+10     	; 0x1654c <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   16542:	8f ef       	ldi	r24, 0xFF	; 255
   16544:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   16546:	df 91       	pop	r29
   16548:	cf 91       	pop	r28
   1654a:	08 95       	ret
   1654c:	ec 01       	movw	r28, r24
   1654e:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   16550:	42 17       	cp	r20, r18
   16552:	53 07       	cpc	r21, r19
   16554:	08 f0       	brcs	.+2      	; 0x16558 <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   16556:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   16558:	0e 94 fa b4 	call	0x169f4	; 0x169f4 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   1655c:	18 16       	cp	r1, r24
   1655e:	19 06       	cpc	r1, r25
   16560:	84 f7       	brge	.-32     	; 0x16542 <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   16562:	29 8d       	ldd	r18, Y+25	; 0x19
   16564:	3a 8d       	ldd	r19, Y+26	; 0x1a
   16566:	28 1b       	sub	r18, r24
   16568:	39 0b       	sbc	r19, r25
   1656a:	3a 8f       	std	Y+26, r19	; 0x1a
   1656c:	29 8f       	std	Y+25, r18	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:189
      return got;
   1656e:	eb cf       	rjmp	.-42     	; 0x16546 <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

00016570 <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
   16570:	cf 93       	push	r28
   16572:	df 93       	push	r29
   16574:	1f 92       	push	r1
   16576:	cd b7       	in	r28, 0x3d	; 61
   16578:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   1657a:	fc 01       	movw	r30, r24
   1657c:	21 8d       	ldd	r18, Z+25	; 0x19
   1657e:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
   16580:	8f ef       	ldi	r24, 0xFF	; 255
   16582:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   16584:	23 2b       	or	r18, r19
   16586:	41 f0       	breq	.+16     	; 0x16598 <EthernetUDP::peek()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:207
    return -1;
  ::peek(_sock, &b);
   16588:	be 01       	movw	r22, r28
   1658a:	6f 5f       	subi	r22, 0xFF	; 255
   1658c:	7f 4f       	sbci	r23, 0xFF	; 255
   1658e:	84 85       	ldd	r24, Z+12	; 0x0c
   16590:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <peek(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
  return b;
   16594:	89 81       	ldd	r24, Y+1	; 0x01
   16596:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
   16598:	0f 90       	pop	r0
   1659a:	df 91       	pop	r29
   1659c:	cf 91       	pop	r28
   1659e:	08 95       	ret

000165a0 <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   165a0:	0f 93       	push	r16
   165a2:	1f 93       	push	r17
   165a4:	cf 93       	push	r28
   165a6:	df 93       	push	r29
   165a8:	00 d0       	rcall	.+0      	; 0x165aa <EthernetUDP::parsePacket()+0xa>
   165aa:	00 d0       	rcall	.+0      	; 0x165ac <EthernetUDP::parsePacket()+0xc>
   165ac:	1f 92       	push	r1
   165ae:	1f 92       	push	r1
   165b0:	cd b7       	in	r28, 0x3d	; 61
   165b2:	de b7       	in	r29, 0x3e	; 62
   165b4:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   165b6:	dc 01       	movw	r26, r24
   165b8:	ed 91       	ld	r30, X+
   165ba:	fc 91       	ld	r31, X
   165bc:	06 80       	ldd	r0, Z+6	; 0x06
   165be:	f7 81       	ldd	r31, Z+7	; 0x07
   165c0:	e0 2d       	mov	r30, r0
   165c2:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   165c4:	f8 01       	movw	r30, r16
   165c6:	64 85       	ldd	r22, Z+12	; 0x0c
   165c8:	8a e2       	ldi	r24, 0x2A	; 42
   165ca:	91 e1       	ldi	r25, 0x11	; 17
   165cc:	0e 94 01 b7 	call	0x16e02	; 0x16e02 <W5500Class::getRXReceivedSize(unsigned char)>
   165d0:	89 2b       	or	r24, r25
   165d2:	a1 f1       	breq	.+104    	; 0x1663c <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   165d4:	48 e0       	ldi	r20, 0x08	; 8
   165d6:	50 e0       	ldi	r21, 0x00	; 0
   165d8:	be 01       	movw	r22, r28
   165da:	6f 5f       	subi	r22, 0xFF	; 255
   165dc:	7f 4f       	sbci	r23, 0xFF	; 255
   165de:	d8 01       	movw	r26, r16
   165e0:	1c 96       	adiw	r26, 0x0c	; 12
   165e2:	8c 91       	ld	r24, X
   165e4:	0e 94 fa b4 	call	0x169f4	; 0x169f4 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   165e8:	18 16       	cp	r1, r24
   165ea:	19 06       	cpc	r1, r25
   165ec:	e4 f4       	brge	.+56     	; 0x16626 <EthernetUDP::parsePacket()+0x86>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:136
    {
      _remoteIP = tmpBuf;
   165ee:	be 01       	movw	r22, r28
   165f0:	6f 5f       	subi	r22, 0xFF	; 255
   165f2:	7f 4f       	sbci	r23, 0xFF	; 255
   165f4:	c8 01       	movw	r24, r16
   165f6:	0f 96       	adiw	r24, 0x0f	; 15
   165f8:	0e 94 b6 d4 	call	0x1a96c	; 0x1a96c <IPAddress::operator=(unsigned char const*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
      _remotePort = tmpBuf[4];
   165fc:	8d 81       	ldd	r24, Y+5	; 0x05
   165fe:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   16600:	98 2f       	mov	r25, r24
   16602:	88 27       	eor	r24, r24
   16604:	2e 81       	ldd	r18, Y+6	; 0x06
   16606:	82 0f       	add	r24, r18
   16608:	91 1d       	adc	r25, r1
   1660a:	f8 01       	movw	r30, r16
   1660c:	96 8b       	std	Z+22, r25	; 0x16
   1660e:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   16610:	8f 81       	ldd	r24, Y+7	; 0x07
   16612:	28 2f       	mov	r18, r24
   16614:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   16616:	32 2f       	mov	r19, r18
   16618:	22 27       	eor	r18, r18
   1661a:	88 85       	ldd	r24, Y+8	; 0x08
   1661c:	82 0f       	add	r24, r18
   1661e:	93 2f       	mov	r25, r19
   16620:	91 1d       	adc	r25, r1
   16622:	92 8f       	std	Z+26, r25	; 0x1a
   16624:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   16626:	28 96       	adiw	r28, 0x08	; 8
   16628:	0f b6       	in	r0, 0x3f	; 63
   1662a:	f8 94       	cli
   1662c:	de bf       	out	0x3e, r29	; 62
   1662e:	0f be       	out	0x3f, r0	; 63
   16630:	cd bf       	out	0x3d, r28	; 61
   16632:	df 91       	pop	r29
   16634:	cf 91       	pop	r28
   16636:	1f 91       	pop	r17
   16638:	0f 91       	pop	r16
   1663a:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   1663c:	90 e0       	ldi	r25, 0x00	; 0
   1663e:	80 e0       	ldi	r24, 0x00	; 0
   16640:	f2 cf       	rjmp	.-28     	; 0x16626 <EthernetUDP::parsePacket()+0x86>

00016642 <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   16642:	ef 92       	push	r14
   16644:	ff 92       	push	r15
   16646:	0f 93       	push	r16
   16648:	1f 93       	push	r17
   1664a:	cf 93       	push	r28
   1664c:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   1664e:	fc 01       	movw	r30, r24
   16650:	e4 84       	ldd	r14, Z+12	; 0x0c
   16652:	f8 e0       	ldi	r31, 0x08	; 8
   16654:	ef 16       	cp	r14, r31
   16656:	41 f0       	breq	.+16     	; 0x16668 <EthernetUDP::begin(unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   16658:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   1665a:	df 91       	pop	r29
   1665c:	cf 91       	pop	r28
   1665e:	1f 91       	pop	r17
   16660:	0f 91       	pop	r16
   16662:	ff 90       	pop	r15
   16664:	ef 90       	pop	r14
   16666:	08 95       	ret
   16668:	8b 01       	movw	r16, r22
   1666a:	ec 01       	movw	r28, r24
   1666c:	f1 2c       	mov	r15, r1
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
   1666e:	6e 2d       	mov	r22, r14
   16670:	83 e0       	ldi	r24, 0x03	; 3
   16672:	90 e0       	ldi	r25, 0x00	; 0
   16674:	0e 94 5a b6 	call	0x16cb4	; 0x16cb4 <W5500Class::read(unsigned int, unsigned char)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   16678:	81 11       	cpse	r24, r1
   1667a:	0f c0       	rjmp	.+30     	; 0x1669a <EthernetUDP::begin(unsigned int)+0x58>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   1667c:	fc 86       	std	Y+12, r15	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   1667e:	8c 85       	ldd	r24, Y+12	; 0x0c
   16680:	88 30       	cpi	r24, 0x08	; 8
   16682:	51 f3       	breq	.-44     	; 0x16658 <EthernetUDP::begin(unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   16684:	1e 87       	std	Y+14, r17	; 0x0e
   16686:	0d 87       	std	Y+13, r16	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   16688:	1a 8e       	std	Y+26, r1	; 0x1a
   1668a:	19 8e       	std	Y+25, r1	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:60
  socket(_sock, SnMR::UDP, _port, 0);
   1668c:	20 e0       	ldi	r18, 0x00	; 0
   1668e:	a8 01       	movw	r20, r16
   16690:	62 e0       	ldi	r22, 0x02	; 2
   16692:	0e 94 36 b4 	call	0x1686c	; 0x1686c <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62

  return 1;
   16696:	81 e0       	ldi	r24, 0x01	; 1
   16698:	e0 cf       	rjmp	.-64     	; 0x1665a <EthernetUDP::begin(unsigned int)+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   1669a:	88 31       	cpi	r24, 0x18	; 24
   1669c:	79 f3       	breq	.-34     	; 0x1667c <EthernetUDP::begin(unsigned int)+0x3a>
   1669e:	f3 94       	inc	r15
   166a0:	20 e2       	ldi	r18, 0x20	; 32
   166a2:	e2 0e       	add	r14, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   166a4:	88 e0       	ldi	r24, 0x08	; 8
   166a6:	f8 12       	cpse	r15, r24
   166a8:	e2 cf       	rjmp	.-60     	; 0x1666e <EthernetUDP::begin(unsigned int)+0x2c>
   166aa:	e9 cf       	rjmp	.-46     	; 0x1667e <EthernetUDP::begin(unsigned int)+0x3c>

000166ac <EthernetUDP::EthernetUDP()>:
_ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   166ac:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   166ae:	13 82       	std	Z+3, r1	; 0x03
   166b0:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   166b2:	88 ee       	ldi	r24, 0xE8	; 232
   166b4:	93 e0       	ldi	r25, 0x03	; 3
   166b6:	a0 e0       	ldi	r26, 0x00	; 0
   166b8:	b0 e0       	ldi	r27, 0x00	; 0
   166ba:	84 83       	std	Z+4, r24	; 0x04
   166bc:	95 83       	std	Z+5, r25	; 0x05
   166be:	a6 83       	std	Z+6, r26	; 0x06
   166c0:	b7 83       	std	Z+7, r27	; 0x07
_ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
   166c2:	81 e8       	ldi	r24, 0x81	; 129
   166c4:	98 e0       	ldi	r25, 0x08	; 8
   166c6:	91 83       	std	Z+1, r25	; 0x01
   166c8:	80 83       	st	Z, r24
   166ca:	88 e0       	ldi	r24, 0x08	; 8
   166cc:	84 87       	std	Z+12, r24	; 0x0c
   166ce:	cf 01       	movw	r24, r30
   166d0:	0f 96       	adiw	r24, 0x0f	; 15
   166d2:	0c 94 94 d4 	jmp	0x1a928	; 0x1a928 <IPAddress::IPAddress()>

000166d6 <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
   166d6:	cf 92       	push	r12
   166d8:	df 92       	push	r13
   166da:	ef 92       	push	r14
   166dc:	ff 92       	push	r15
   166de:	0f 93       	push	r16
   166e0:	1f 93       	push	r17
   166e2:	cf 93       	push	r28
   166e4:	df 93       	push	r29
   166e6:	cd b7       	in	r28, 0x3d	; 61
   166e8:	de b7       	in	r29, 0x3e	; 62
   166ea:	af 97       	sbiw	r28, 0x2f	; 47
   166ec:	0f b6       	in	r0, 0x3f	; 63
   166ee:	f8 94       	cli
   166f0:	de bf       	out	0x3e, r29	; 62
   166f2:	0f be       	out	0x3f, r0	; 63
   166f4:	cd bf       	out	0x3d, r28	; 61
   166f6:	8c 01       	movw	r16, r24
   166f8:	6b 01       	movw	r12, r22
   166fa:	7a 01       	movw	r14, r20
_ZN9DNSClientC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.h:10
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
   166fc:	ce 01       	movw	r24, r28
   166fe:	01 96       	adiw	r24, 0x01	; 1
   16700:	0e 94 94 d4 	call	0x1a928	; 0x1a928 <IPAddress::IPAddress()>
   16704:	ce 01       	movw	r24, r28
   16706:	09 96       	adiw	r24, 0x09	; 9
   16708:	0e 94 56 b3 	call	0x166ac	; 0x166ac <EthernetUDP::EthernetUDP()>
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:88
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
   1670c:	ce 01       	movw	r24, r28
   1670e:	8a 96       	adiw	r24, 0x2a	; 42
   16710:	0e 94 94 d4 	call	0x1a928	; 0x1a928 <IPAddress::IPAddress()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:90

  dns.begin(Ethernet.dnsServerIP());
   16714:	6a ee       	ldi	r22, 0xEA	; 234
   16716:	70 e1       	ldi	r23, 0x10	; 16
   16718:	ce 01       	movw	r24, r28
   1671a:	84 96       	adiw	r24, 0x24	; 36
   1671c:	0e 94 ce af 	call	0x15f9c	; 0x15f9c <EthernetClass::dnsServerIP()>
   16720:	be 01       	movw	r22, r28
   16722:	6c 5d       	subi	r22, 0xDC	; 220
   16724:	7f 4f       	sbci	r23, 0xFF	; 255
   16726:	ce 01       	movw	r24, r28
   16728:	01 96       	adiw	r24, 0x01	; 1
   1672a:	0e 94 71 ac 	call	0x158e2	; 0x158e2 <DNSClient::begin(IPAddress const&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  ret = dns.getHostByName(host, remote_addr);
   1672e:	ae 01       	movw	r20, r28
   16730:	46 5d       	subi	r20, 0xD6	; 214
   16732:	5f 4f       	sbci	r21, 0xFF	; 255
   16734:	b6 01       	movw	r22, r12
   16736:	ce 01       	movw	r24, r28
   16738:	01 96       	adiw	r24, 0x01	; 1
   1673a:	0e 94 e7 ae 	call	0x15dce	; 0x15dce <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
   1673e:	81 30       	cpi	r24, 0x01	; 1
   16740:	91 05       	cpc	r25, r1
   16742:	c1 f4       	brne	.+48     	; 0x16774 <EthernetUDP::beginPacket(char const*, unsigned int)+0x9e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
   16744:	d8 01       	movw	r26, r16
   16746:	ed 91       	ld	r30, X+
   16748:	fc 91       	ld	r31, X
   1674a:	04 88       	ldd	r0, Z+20	; 0x14
   1674c:	f5 89       	ldd	r31, Z+21	; 0x15
   1674e:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   16750:	8c ed       	ldi	r24, 0xDC	; 220
   16752:	98 e0       	ldi	r25, 0x08	; 8
   16754:	9d a3       	std	Y+37, r25	; 0x25
   16756:	8c a3       	std	Y+36, r24	; 0x24
   16758:	8c a5       	ldd	r24, Y+44	; 0x2c
   1675a:	9d a5       	ldd	r25, Y+45	; 0x2d
   1675c:	ae a5       	ldd	r26, Y+46	; 0x2e
   1675e:	bf a5       	ldd	r27, Y+47	; 0x2f
   16760:	8e a3       	std	Y+38, r24	; 0x26
   16762:	9f a3       	std	Y+39, r25	; 0x27
   16764:	a8 a7       	std	Y+40, r26	; 0x28
   16766:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
   16768:	a7 01       	movw	r20, r14
   1676a:	be 01       	movw	r22, r28
   1676c:	6c 5d       	subi	r22, 0xDC	; 220
   1676e:	7f 4f       	sbci	r23, 0xFF	; 255
   16770:	c8 01       	movw	r24, r16
   16772:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
   16774:	af 96       	adiw	r28, 0x2f	; 47
   16776:	0f b6       	in	r0, 0x3f	; 63
   16778:	f8 94       	cli
   1677a:	de bf       	out	0x3e, r29	; 62
   1677c:	0f be       	out	0x3f, r0	; 63
   1677e:	cd bf       	out	0x3d, r28	; 61
   16780:	df 91       	pop	r29
   16782:	cf 91       	pop	r28
   16784:	1f 91       	pop	r17
   16786:	0f 91       	pop	r16
   16788:	ff 90       	pop	r15
   1678a:	ef 90       	pop	r14
   1678c:	df 90       	pop	r13
   1678e:	cf 90       	pop	r12
   16790:	08 95       	ret

00016792 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:
_GLOBAL__sub_I__ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221

  while (_remaining)
  {
    read();
  }
}
   16792:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   16794:	00 e0       	ldi	r16, 0x00	; 0
   16796:	20 e0       	ldi	r18, 0x00	; 0
   16798:	40 e0       	ldi	r20, 0x00	; 0
   1679a:	60 e0       	ldi	r22, 0x00	; 0
   1679c:	89 e1       	ldi	r24, 0x19	; 25
   1679e:	91 e1       	ldi	r25, 0x11	; 17
   167a0:	0e 94 9e d4 	call	0x1a93c	; 0x1a93c <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
   167a4:	0f 91       	pop	r16
   167a6:	08 95       	ret

000167a8 <_GLOBAL__sub_I__ZN7TwitterC2EPKc>:
_GLOBAL__sub_I__ZN7TwitterC2EPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Twitter.cpp:91

int Twitter::wait(Print *debug)
{
	while (checkStatus(debug));
	return statusCode;
}
   167a8:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   167aa:	00 e0       	ldi	r16, 0x00	; 0
   167ac:	20 e0       	ldi	r18, 0x00	; 0
   167ae:	40 e0       	ldi	r20, 0x00	; 0
   167b0:	60 e0       	ldi	r22, 0x00	; 0
   167b2:	8f e1       	ldi	r24, 0x1F	; 31
   167b4:	91 e1       	ldi	r25, 0x11	; 17
   167b6:	0e 94 9e d4 	call	0x1a93c	; 0x1a93c <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN7TwitterC2EPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Twitter.cpp:91
   167ba:	0f 91       	pop	r16
   167bc:	08 95       	ret

000167be <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>:
_ZN10W5500Class11writeSnDIPREhPh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:355
      return 0;
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
   167be:	ab 01       	movw	r20, r22
_ZN10W5500Class7writeSnEhjPhj():
   167c0:	82 95       	swap	r24
   167c2:	88 0f       	add	r24, r24
   167c4:	80 7e       	andi	r24, 0xE0	; 224
   167c6:	6c e0       	ldi	r22, 0x0C	; 12
   167c8:	68 0f       	add	r22, r24
   167ca:	24 e0       	ldi	r18, 0x04	; 4
   167cc:	30 e0       	ldi	r19, 0x00	; 0
   167ce:	8c e0       	ldi	r24, 0x0C	; 12
   167d0:	90 e0       	ldi	r25, 0x00	; 0
   167d2:	0c 94 26 b6 	jmp	0x16c4c	; 0x16c4c <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

000167d6 <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
   167d6:	9b 01       	movw	r18, r22
   167d8:	82 95       	swap	r24
   167da:	88 0f       	add	r24, r24
   167dc:	80 7e       	andi	r24, 0xE0	; 224
   167de:	68 e0       	ldi	r22, 0x08	; 8
   167e0:	68 0f       	add	r22, r24
   167e2:	c9 01       	movw	r24, r18
   167e4:	0c 94 5a b6 	jmp	0x16cb4	; 0x16cb4 <W5500Class::read(unsigned int, unsigned char)>

000167e8 <W5500Class::readSnIR(unsigned char)>:
_ZN10W5500Class8readSnIREh():
   167e8:	62 e0       	ldi	r22, 0x02	; 2
   167ea:	70 e0       	ldi	r23, 0x00	; 0
   167ec:	0c 94 eb b3 	jmp	0x167d6	; 0x167d6 <W5500Class::readSn(unsigned char, unsigned int)>

000167f0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
   167f0:	9b 01       	movw	r18, r22
   167f2:	82 95       	swap	r24
   167f4:	88 0f       	add	r24, r24
   167f6:	80 7e       	andi	r24, 0xE0	; 224
   167f8:	6c e0       	ldi	r22, 0x0C	; 12
   167fa:	68 0f       	add	r22, r24
   167fc:	c9 01       	movw	r24, r18
   167fe:	0c 94 00 b6 	jmp	0x16c00	; 0x16c00 <W5500Class::write(unsigned int, unsigned char, unsigned char)>

00016802 <W5500Class::writeSnPORT(unsigned char, unsigned int)>:
_ZN10W5500Class11writeSnPORTEhj():
   16802:	cf 93       	push	r28
   16804:	df 93       	push	r29
   16806:	c8 2f       	mov	r28, r24
   16808:	d6 2f       	mov	r29, r22
   1680a:	47 2f       	mov	r20, r23
   1680c:	64 e0       	ldi	r22, 0x04	; 4
   1680e:	70 e0       	ldi	r23, 0x00	; 0
   16810:	0e 94 f8 b3 	call	0x167f0	; 0x167f0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   16814:	4d 2f       	mov	r20, r29
   16816:	65 e0       	ldi	r22, 0x05	; 5
   16818:	70 e0       	ldi	r23, 0x00	; 0
   1681a:	8c 2f       	mov	r24, r28
   1681c:	df 91       	pop	r29
   1681e:	cf 91       	pop	r28
   16820:	0c 94 f8 b3 	jmp	0x167f0	; 0x167f0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00016824 <W5500Class::writeSnIR(unsigned char, unsigned char)>:
_ZN10W5500Class9writeSnIREhh():
   16824:	46 2f       	mov	r20, r22
   16826:	62 e0       	ldi	r22, 0x02	; 2
   16828:	70 e0       	ldi	r23, 0x00	; 0
   1682a:	0c 94 f8 b3 	jmp	0x167f0	; 0x167f0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0001682e <W5500Class::writeSnDPORT(unsigned char, unsigned int)>:
_ZN10W5500Class12writeSnDPORTEhj():
   1682e:	cf 93       	push	r28
   16830:	df 93       	push	r29
   16832:	c8 2f       	mov	r28, r24
   16834:	d6 2f       	mov	r29, r22
   16836:	47 2f       	mov	r20, r23
   16838:	60 e1       	ldi	r22, 0x10	; 16
   1683a:	70 e0       	ldi	r23, 0x00	; 0
   1683c:	0e 94 f8 b3 	call	0x167f0	; 0x167f0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   16840:	4d 2f       	mov	r20, r29
   16842:	61 e1       	ldi	r22, 0x11	; 17
   16844:	70 e0       	ldi	r23, 0x00	; 0
   16846:	8c 2f       	mov	r24, r28
   16848:	df 91       	pop	r29
   1684a:	cf 91       	pop	r28
   1684c:	0c 94 f8 b3 	jmp	0x167f0	; 0x167f0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00016850 <close(unsigned char)>:
_Z5closeh():
   16850:	cf 93       	push	r28
   16852:	c8 2f       	mov	r28, r24
   16854:	40 e1       	ldi	r20, 0x10	; 16
   16856:	50 e0       	ldi	r21, 0x00	; 0
   16858:	68 2f       	mov	r22, r24
   1685a:	8a e2       	ldi	r24, 0x2A	; 42
   1685c:	91 e1       	ldi	r25, 0x11	; 17
   1685e:	0e 94 08 b8 	call	0x17010	; 0x17010 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   16862:	6f ef       	ldi	r22, 0xFF	; 255
   16864:	8c 2f       	mov	r24, r28
   16866:	cf 91       	pop	r28
   16868:	0c 94 12 b4 	jmp	0x16824	; 0x16824 <W5500Class::writeSnIR(unsigned char, unsigned char)>

0001686c <socket(unsigned char, unsigned char, unsigned int, unsigned char)>:
_Z6sockethhjh():
   1686c:	ff 92       	push	r15
   1686e:	0f 93       	push	r16
   16870:	1f 93       	push	r17
   16872:	cf 93       	push	r28
   16874:	df 93       	push	r29
   16876:	9f ef       	ldi	r25, 0xFF	; 255
   16878:	96 0f       	add	r25, r22
   1687a:	95 30       	cpi	r25, 0x05	; 5
   1687c:	58 f5       	brcc	.+86     	; 0x168d4 <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x68>
   1687e:	f2 2e       	mov	r15, r18
   16880:	8a 01       	movw	r16, r20
   16882:	d6 2f       	mov	r29, r22
   16884:	c8 2f       	mov	r28, r24
   16886:	0e 94 28 b4 	call	0x16850	; 0x16850 <close(unsigned char)>
   1688a:	4d 2f       	mov	r20, r29
   1688c:	4f 29       	or	r20, r15
_ZN10W5500Class9writeSnMREhh():
   1688e:	70 e0       	ldi	r23, 0x00	; 0
   16890:	60 e0       	ldi	r22, 0x00	; 0
   16892:	8c 2f       	mov	r24, r28
   16894:	0e 94 f8 b3 	call	0x167f0	; 0x167f0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh():
   16898:	b8 01       	movw	r22, r16
   1689a:	01 2b       	or	r16, r17
   1689c:	51 f4       	brne	.+20     	; 0x168b2 <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x46>
   1689e:	60 91 25 11 	lds	r22, 0x1125	; 0x801125 <local_port>
   168a2:	70 91 26 11 	lds	r23, 0x1126	; 0x801126 <local_port+0x1>
   168a6:	6f 5f       	subi	r22, 0xFF	; 255
   168a8:	7f 4f       	sbci	r23, 0xFF	; 255
   168aa:	70 93 26 11 	sts	0x1126, r23	; 0x801126 <local_port+0x1>
   168ae:	60 93 25 11 	sts	0x1125, r22	; 0x801125 <local_port>
   168b2:	8c 2f       	mov	r24, r28
   168b4:	0e 94 01 b4 	call	0x16802	; 0x16802 <W5500Class::writeSnPORT(unsigned char, unsigned int)>
   168b8:	41 e0       	ldi	r20, 0x01	; 1
   168ba:	50 e0       	ldi	r21, 0x00	; 0
   168bc:	6c 2f       	mov	r22, r28
   168be:	8a e2       	ldi	r24, 0x2A	; 42
   168c0:	91 e1       	ldi	r25, 0x11	; 17
   168c2:	0e 94 08 b8 	call	0x17010	; 0x17010 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   168c6:	81 e0       	ldi	r24, 0x01	; 1
   168c8:	df 91       	pop	r29
   168ca:	cf 91       	pop	r28
   168cc:	1f 91       	pop	r17
   168ce:	0f 91       	pop	r16
   168d0:	ff 90       	pop	r15
   168d2:	08 95       	ret
   168d4:	80 e0       	ldi	r24, 0x00	; 0
   168d6:	f8 cf       	rjmp	.-16     	; 0x168c8 <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x5c>

000168d8 <connect(unsigned char, unsigned char*, unsigned int)>:
_Z7connecthPhj():
   168d8:	0f 93       	push	r16
   168da:	1f 93       	push	r17
   168dc:	cf 93       	push	r28
   168de:	fb 01       	movw	r30, r22
   168e0:	90 81       	ld	r25, Z
   168e2:	9f 3f       	cpi	r25, 0xFF	; 255
   168e4:	59 f4       	brne	.+22     	; 0x168fc <connect(unsigned char, unsigned char*, unsigned int)+0x24>
   168e6:	91 81       	ldd	r25, Z+1	; 0x01
   168e8:	9f 3f       	cpi	r25, 0xFF	; 255
   168ea:	99 f4       	brne	.+38     	; 0x16912 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   168ec:	92 81       	ldd	r25, Z+2	; 0x02
   168ee:	9f 3f       	cpi	r25, 0xFF	; 255
   168f0:	81 f4       	brne	.+32     	; 0x16912 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   168f2:	93 81       	ldd	r25, Z+3	; 0x03
   168f4:	9f 3f       	cpi	r25, 0xFF	; 255
   168f6:	69 f4       	brne	.+26     	; 0x16912 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   168f8:	90 e0       	ldi	r25, 0x00	; 0
   168fa:	1f c0       	rjmp	.+62     	; 0x1693a <connect(unsigned char, unsigned char*, unsigned int)+0x62>
   168fc:	91 11       	cpse	r25, r1
   168fe:	09 c0       	rjmp	.+18     	; 0x16912 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   16900:	91 81       	ldd	r25, Z+1	; 0x01
   16902:	91 11       	cpse	r25, r1
   16904:	06 c0       	rjmp	.+12     	; 0x16912 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   16906:	92 81       	ldd	r25, Z+2	; 0x02
   16908:	91 11       	cpse	r25, r1
   1690a:	03 c0       	rjmp	.+6      	; 0x16912 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   1690c:	93 81       	ldd	r25, Z+3	; 0x03
   1690e:	99 23       	and	r25, r25
   16910:	a1 f0       	breq	.+40     	; 0x1693a <connect(unsigned char, unsigned char*, unsigned int)+0x62>
   16912:	41 15       	cp	r20, r1
   16914:	51 05       	cpc	r21, r1
   16916:	81 f3       	breq	.-32     	; 0x168f8 <connect(unsigned char, unsigned char*, unsigned int)+0x20>
   16918:	8a 01       	movw	r16, r20
   1691a:	bf 01       	movw	r22, r30
   1691c:	c8 2f       	mov	r28, r24
   1691e:	0e 94 df b3 	call	0x167be	; 0x167be <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>
   16922:	b8 01       	movw	r22, r16
   16924:	8c 2f       	mov	r24, r28
   16926:	0e 94 17 b4 	call	0x1682e	; 0x1682e <W5500Class::writeSnDPORT(unsigned char, unsigned int)>
   1692a:	44 e0       	ldi	r20, 0x04	; 4
   1692c:	50 e0       	ldi	r21, 0x00	; 0
   1692e:	6c 2f       	mov	r22, r28
   16930:	8a e2       	ldi	r24, 0x2A	; 42
   16932:	91 e1       	ldi	r25, 0x11	; 17
   16934:	0e 94 08 b8 	call	0x17010	; 0x17010 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   16938:	91 e0       	ldi	r25, 0x01	; 1
   1693a:	89 2f       	mov	r24, r25
   1693c:	cf 91       	pop	r28
   1693e:	1f 91       	pop	r17
   16940:	0f 91       	pop	r16
   16942:	08 95       	ret

00016944 <disconnect(unsigned char)>:
_Z10disconnecth():
   16944:	48 e0       	ldi	r20, 0x08	; 8
   16946:	50 e0       	ldi	r21, 0x00	; 0
   16948:	68 2f       	mov	r22, r24
   1694a:	8a e2       	ldi	r24, 0x2A	; 42
   1694c:	91 e1       	ldi	r25, 0x11	; 17
   1694e:	0c 94 08 b8 	jmp	0x17010	; 0x17010 <W5500Class::execCmdSn(unsigned char, SockCMD)>

00016952 <send(unsigned char, unsigned char const*, unsigned int)>:
_Z4sendhPKhj():
   16952:	cf 92       	push	r12
   16954:	df 92       	push	r13
   16956:	ef 92       	push	r14
   16958:	ff 92       	push	r15
   1695a:	0f 93       	push	r16
   1695c:	1f 93       	push	r17
   1695e:	cf 93       	push	r28
   16960:	c8 2f       	mov	r28, r24
   16962:	7b 01       	movw	r14, r22
   16964:	8a 01       	movw	r16, r20
   16966:	41 30       	cpi	r20, 0x01	; 1
   16968:	58 40       	sbci	r21, 0x08	; 8
   1696a:	10 f0       	brcs	.+4      	; 0x16970 <send(unsigned char, unsigned char const*, unsigned int)+0x1e>
   1696c:	00 e0       	ldi	r16, 0x00	; 0
   1696e:	18 e0       	ldi	r17, 0x08	; 8
   16970:	6c 2f       	mov	r22, r28
   16972:	8a e2       	ldi	r24, 0x2A	; 42
   16974:	91 e1       	ldi	r25, 0x11	; 17
   16976:	0e 94 cd b6 	call	0x16d9a	; 0x16d9a <W5500Class::getTXFreeSize(unsigned char)>
   1697a:	6c 01       	movw	r12, r24
_ZN10W5500Class8readSnSREh():
   1697c:	63 e0       	ldi	r22, 0x03	; 3
   1697e:	70 e0       	ldi	r23, 0x00	; 0
   16980:	8c 2f       	mov	r24, r28
   16982:	0e 94 eb b3 	call	0x167d6	; 0x167d6 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4sendhPKhj():
   16986:	87 31       	cpi	r24, 0x17	; 23
   16988:	11 f0       	breq	.+4      	; 0x1698e <send(unsigned char, unsigned char const*, unsigned int)+0x3c>
   1698a:	8c 31       	cpi	r24, 0x1C	; 28
   1698c:	59 f5       	brne	.+86     	; 0x169e4 <send(unsigned char, unsigned char const*, unsigned int)+0x92>
   1698e:	c0 16       	cp	r12, r16
   16990:	d1 06       	cpc	r13, r17
   16992:	70 f3       	brcs	.-36     	; 0x16970 <send(unsigned char, unsigned char const*, unsigned int)+0x1e>
   16994:	98 01       	movw	r18, r16
   16996:	a7 01       	movw	r20, r14
   16998:	6c 2f       	mov	r22, r28
   1699a:	8a e2       	ldi	r24, 0x2A	; 42
   1699c:	91 e1       	ldi	r25, 0x11	; 17
   1699e:	0e 94 5d b7 	call	0x16eba	; 0x16eba <W5500Class::send_data_processing(unsigned char, unsigned char const*, unsigned int)>
   169a2:	40 e2       	ldi	r20, 0x20	; 32
   169a4:	50 e0       	ldi	r21, 0x00	; 0
   169a6:	6c 2f       	mov	r22, r28
   169a8:	8a e2       	ldi	r24, 0x2A	; 42
   169aa:	91 e1       	ldi	r25, 0x11	; 17
   169ac:	0e 94 08 b8 	call	0x17010	; 0x17010 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   169b0:	8c 2f       	mov	r24, r28
   169b2:	0e 94 f4 b3 	call	0x167e8	; 0x167e8 <W5500Class::readSnIR(unsigned char)>
   169b6:	84 fd       	sbrc	r24, 4
   169b8:	18 c0       	rjmp	.+48     	; 0x169ea <send(unsigned char, unsigned char const*, unsigned int)+0x98>
_ZN10W5500Class8readSnSREh():
   169ba:	63 e0       	ldi	r22, 0x03	; 3
   169bc:	70 e0       	ldi	r23, 0x00	; 0
   169be:	8c 2f       	mov	r24, r28
   169c0:	0e 94 eb b3 	call	0x167d6	; 0x167d6 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4sendhPKhj():
   169c4:	81 11       	cpse	r24, r1
   169c6:	f4 cf       	rjmp	.-24     	; 0x169b0 <send(unsigned char, unsigned char const*, unsigned int)+0x5e>
   169c8:	8c 2f       	mov	r24, r28
   169ca:	0e 94 28 b4 	call	0x16850	; 0x16850 <close(unsigned char)>
   169ce:	10 e0       	ldi	r17, 0x00	; 0
   169d0:	00 e0       	ldi	r16, 0x00	; 0
   169d2:	c8 01       	movw	r24, r16
   169d4:	cf 91       	pop	r28
   169d6:	1f 91       	pop	r17
   169d8:	0f 91       	pop	r16
   169da:	ff 90       	pop	r15
   169dc:	ef 90       	pop	r14
   169de:	df 90       	pop	r13
   169e0:	cf 90       	pop	r12
   169e2:	08 95       	ret
   169e4:	10 e0       	ldi	r17, 0x00	; 0
   169e6:	00 e0       	ldi	r16, 0x00	; 0
   169e8:	d5 cf       	rjmp	.-86     	; 0x16994 <send(unsigned char, unsigned char const*, unsigned int)+0x42>
   169ea:	60 e1       	ldi	r22, 0x10	; 16
   169ec:	8c 2f       	mov	r24, r28
   169ee:	0e 94 12 b4 	call	0x16824	; 0x16824 <W5500Class::writeSnIR(unsigned char, unsigned char)>
   169f2:	ef cf       	rjmp	.-34     	; 0x169d2 <send(unsigned char, unsigned char const*, unsigned int)+0x80>

000169f4 <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
   169f4:	cf 92       	push	r12
   169f6:	df 92       	push	r13
   169f8:	ef 92       	push	r14
   169fa:	ff 92       	push	r15
   169fc:	0f 93       	push	r16
   169fe:	1f 93       	push	r17
   16a00:	cf 93       	push	r28
   16a02:	df 93       	push	r29
   16a04:	18 2f       	mov	r17, r24
   16a06:	6b 01       	movw	r12, r22
   16a08:	7a 01       	movw	r14, r20
   16a0a:	68 2f       	mov	r22, r24
   16a0c:	8a e2       	ldi	r24, 0x2A	; 42
   16a0e:	91 e1       	ldi	r25, 0x11	; 17
   16a10:	0e 94 01 b7 	call	0x16e02	; 0x16e02 <W5500Class::getRXReceivedSize(unsigned char)>
   16a14:	ec 01       	movw	r28, r24
   16a16:	00 97       	sbiw	r24, 0x00	; 0
   16a18:	e1 f4       	brne	.+56     	; 0x16a52 <recv(unsigned char, unsigned char*, int)+0x5e>
_ZN10W5500Class8readSnSREh():
   16a1a:	63 e0       	ldi	r22, 0x03	; 3
   16a1c:	70 e0       	ldi	r23, 0x00	; 0
   16a1e:	81 2f       	mov	r24, r17
   16a20:	0e 94 eb b3 	call	0x167d6	; 0x167d6 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
   16a24:	84 31       	cpi	r24, 0x14	; 20
   16a26:	59 f0       	breq	.+22     	; 0x16a3e <recv(unsigned char, unsigned char*, int)+0x4a>
   16a28:	88 23       	and	r24, r24
   16a2a:	49 f0       	breq	.+18     	; 0x16a3e <recv(unsigned char, unsigned char*, int)+0x4a>
   16a2c:	c1 e0       	ldi	r28, 0x01	; 1
   16a2e:	d0 e0       	ldi	r29, 0x00	; 0
   16a30:	8c 31       	cpi	r24, 0x1C	; 28
   16a32:	11 f4       	brne	.+4      	; 0x16a38 <recv(unsigned char, unsigned char*, int)+0x44>
   16a34:	d0 e0       	ldi	r29, 0x00	; 0
   16a36:	c0 e0       	ldi	r28, 0x00	; 0
   16a38:	d1 95       	neg	r29
   16a3a:	c1 95       	neg	r28
   16a3c:	d1 09       	sbc	r29, r1
   16a3e:	ce 01       	movw	r24, r28
   16a40:	df 91       	pop	r29
   16a42:	cf 91       	pop	r28
   16a44:	1f 91       	pop	r17
   16a46:	0f 91       	pop	r16
   16a48:	ff 90       	pop	r15
   16a4a:	ef 90       	pop	r14
   16a4c:	df 90       	pop	r13
   16a4e:	cf 90       	pop	r12
   16a50:	08 95       	ret
   16a52:	e8 16       	cp	r14, r24
   16a54:	f9 06       	cpc	r15, r25
   16a56:	0c f4       	brge	.+2      	; 0x16a5a <recv(unsigned char, unsigned char*, int)+0x66>
   16a58:	e7 01       	movw	r28, r14
   16a5a:	1c 16       	cp	r1, r28
   16a5c:	1d 06       	cpc	r1, r29
   16a5e:	7c f7       	brge	.-34     	; 0x16a3e <recv(unsigned char, unsigned char*, int)+0x4a>
   16a60:	00 e0       	ldi	r16, 0x00	; 0
   16a62:	9e 01       	movw	r18, r28
   16a64:	a6 01       	movw	r20, r12
   16a66:	61 2f       	mov	r22, r17
   16a68:	8a e2       	ldi	r24, 0x2A	; 42
   16a6a:	91 e1       	ldi	r25, 0x11	; 17
   16a6c:	0e 94 b7 b7 	call	0x16f6e	; 0x16f6e <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>
   16a70:	40 e4       	ldi	r20, 0x40	; 64
   16a72:	50 e0       	ldi	r21, 0x00	; 0
   16a74:	61 2f       	mov	r22, r17
   16a76:	8a e2       	ldi	r24, 0x2A	; 42
   16a78:	91 e1       	ldi	r25, 0x11	; 17
   16a7a:	0e 94 08 b8 	call	0x17010	; 0x17010 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   16a7e:	df cf       	rjmp	.-66     	; 0x16a3e <recv(unsigned char, unsigned char*, int)+0x4a>

00016a80 <peek(unsigned char, unsigned char*)>:
_Z4peekhPh():
   16a80:	0f 93       	push	r16
   16a82:	ab 01       	movw	r20, r22
   16a84:	01 e0       	ldi	r16, 0x01	; 1
   16a86:	21 e0       	ldi	r18, 0x01	; 1
   16a88:	30 e0       	ldi	r19, 0x00	; 0
   16a8a:	68 2f       	mov	r22, r24
   16a8c:	8a e2       	ldi	r24, 0x2A	; 42
   16a8e:	91 e1       	ldi	r25, 0x11	; 17
   16a90:	0e 94 b7 b7 	call	0x16f6e	; 0x16f6e <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>
   16a94:	81 e0       	ldi	r24, 0x01	; 1
   16a96:	90 e0       	ldi	r25, 0x00	; 0
   16a98:	0f 91       	pop	r16
   16a9a:	08 95       	ret

00016a9c <flush(unsigned char)>:
_Z5flushh():
   16a9c:	08 95       	ret

00016a9e <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)>:
_Z10bufferDatahjPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:359
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
   16a9e:	af 92       	push	r10
   16aa0:	bf 92       	push	r11
   16aa2:	cf 92       	push	r12
   16aa4:	df 92       	push	r13
   16aa6:	ff 92       	push	r15
   16aa8:	0f 93       	push	r16
   16aaa:	1f 93       	push	r17
   16aac:	cf 93       	push	r28
   16aae:	df 93       	push	r29
   16ab0:	f8 2e       	mov	r15, r24
   16ab2:	6b 01       	movw	r12, r22
   16ab4:	5a 01       	movw	r10, r20
   16ab6:	e9 01       	movw	r28, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
   16ab8:	68 2f       	mov	r22, r24
   16aba:	8a e2       	ldi	r24, 0x2A	; 42
   16abc:	91 e1       	ldi	r25, 0x11	; 17
   16abe:	0e 94 cd b6 	call	0x16d9a	; 0x16d9a <W5500Class::getTXFreeSize(unsigned char)>
   16ac2:	8c 17       	cp	r24, r28
   16ac4:	9d 07       	cpc	r25, r29
   16ac6:	30 f4       	brcc	.+12     	; 0x16ad4 <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
   16ac8:	6f 2d       	mov	r22, r15
   16aca:	8a e2       	ldi	r24, 0x2A	; 42
   16acc:	91 e1       	ldi	r25, 0x11	; 17
   16ace:	0e 94 cd b6 	call	0x16d9a	; 0x16d9a <W5500Class::getTXFreeSize(unsigned char)>
   16ad2:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
   16ad4:	8e 01       	movw	r16, r28
   16ad6:	95 01       	movw	r18, r10
   16ad8:	a6 01       	movw	r20, r12
   16ada:	6f 2d       	mov	r22, r15
   16adc:	8a e2       	ldi	r24, 0x2A	; 42
   16ade:	91 e1       	ldi	r25, 0x11	; 17
   16ae0:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:371
  return ret;
}
   16ae4:	ce 01       	movw	r24, r28
   16ae6:	df 91       	pop	r29
   16ae8:	cf 91       	pop	r28
   16aea:	1f 91       	pop	r17
   16aec:	0f 91       	pop	r16
   16aee:	ff 90       	pop	r15
   16af0:	df 90       	pop	r13
   16af2:	cf 90       	pop	r12
   16af4:	bf 90       	pop	r11
   16af6:	af 90       	pop	r10
   16af8:	08 95       	ret

00016afa <startUDP(unsigned char, unsigned char*, unsigned int)>:
_Z8startUDPhPhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:374

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
   16afa:	0f 93       	push	r16
   16afc:	1f 93       	push	r17
   16afe:	cf 93       	push	r28
   16b00:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  if
   16b02:	90 81       	ld	r25, Z
   16b04:	91 11       	cpse	r25, r1
   16b06:	09 c0       	rjmp	.+18     	; 0x16b1a <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   16b08:	91 81       	ldd	r25, Z+1	; 0x01
   16b0a:	91 11       	cpse	r25, r1
   16b0c:	06 c0       	rjmp	.+12     	; 0x16b1a <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 1)
   16b0e:	92 81       	ldd	r25, Z+2	; 0x02
   16b10:	91 11       	cpse	r25, r1
   16b12:	03 c0       	rjmp	.+6      	; 0x16b1a <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 3)
   16b14:	93 81       	ldd	r25, Z+3	; 0x03
   16b16:	99 23       	and	r25, r25
   16b18:	91 f0       	breq	.+36     	; 0x16b3e <startUDP(unsigned char, unsigned char*, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 5)
   16b1a:	41 15       	cp	r20, r1
   16b1c:	51 05       	cpc	r21, r1
   16b1e:	79 f0       	breq	.+30     	; 0x16b3e <startUDP(unsigned char, unsigned char*, unsigned int)+0x44>
   16b20:	8a 01       	movw	r16, r20
   16b22:	bf 01       	movw	r22, r30
   16b24:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:385
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
   16b26:	0e 94 df b3 	call	0x167be	; 0x167be <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:386
    w5500.writeSnDPORT(s, port);
   16b2a:	b8 01       	movw	r22, r16
   16b2c:	8c 2f       	mov	r24, r28
   16b2e:	0e 94 17 b4 	call	0x1682e	; 0x1682e <W5500Class::writeSnDPORT(unsigned char, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:387
    return 1;
   16b32:	81 e0       	ldi	r24, 0x01	; 1
   16b34:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:389
  }
}
   16b36:	cf 91       	pop	r28
   16b38:	1f 91       	pop	r17
   16b3a:	0f 91       	pop	r16
   16b3c:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
   16b3e:	90 e0       	ldi	r25, 0x00	; 0
   16b40:	80 e0       	ldi	r24, 0x00	; 0
   16b42:	f9 cf       	rjmp	.-14     	; 0x16b36 <startUDP(unsigned char, unsigned char*, unsigned int)+0x3c>

00016b44 <sendUDP(unsigned char)>:
_Z7sendUDPh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:392
    return 1;
  }
}

int sendUDP(SOCKET s)
{
   16b44:	cf 93       	push	r28
   16b46:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  w5500.execCmdSn(s, Sock_SEND);
   16b48:	40 e2       	ldi	r20, 0x20	; 32
   16b4a:	50 e0       	ldi	r21, 0x00	; 0
   16b4c:	68 2f       	mov	r22, r24
   16b4e:	8a e2       	ldi	r24, 0x2A	; 42
   16b50:	91 e1       	ldi	r25, 0x11	; 17
   16b52:	0e 94 08 b8 	call	0x17010	; 0x17010 <W5500Class::execCmdSn(unsigned char, SockCMD)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   16b56:	8c 2f       	mov	r24, r28
   16b58:	0e 94 f4 b3 	call	0x167e8	; 0x167e8 <W5500Class::readSnIR(unsigned char)>
   16b5c:	84 fd       	sbrc	r24, 4
   16b5e:	0d c0       	rjmp	.+26     	; 0x16b7a <sendUDP(unsigned char)+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   16b60:	8c 2f       	mov	r24, r28
   16b62:	0e 94 f4 b3 	call	0x167e8	; 0x167e8 <W5500Class::readSnIR(unsigned char)>
   16b66:	83 ff       	sbrs	r24, 3
   16b68:	f6 cf       	rjmp	.-20     	; 0x16b56 <sendUDP(unsigned char)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:401
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
   16b6a:	68 e1       	ldi	r22, 0x18	; 24
   16b6c:	8c 2f       	mov	r24, r28
   16b6e:	0e 94 12 b4 	call	0x16824	; 0x16824 <W5500Class::writeSnIR(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
      return 0;
   16b72:	90 e0       	ldi	r25, 0x00	; 0
   16b74:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:411
  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
}
   16b76:	cf 91       	pop	r28
   16b78:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:407
      return 0;
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
   16b7a:	60 e1       	ldi	r22, 0x10	; 16
   16b7c:	8c 2f       	mov	r24, r28
   16b7e:	0e 94 12 b4 	call	0x16824	; 0x16824 <W5500Class::writeSnIR(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* Sent ok */
  return 1;
   16b82:	81 e0       	ldi	r24, 0x01	; 1
   16b84:	90 e0       	ldi	r25, 0x00	; 0
   16b86:	f7 cf       	rjmp	.-18     	; 0x16b76 <sendUDP(unsigned char)+0x32>

00016b88 <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:184
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
   16b88:	20 91 dc 10 	lds	r18, 0x10DC	; 0x8010dc <SPIClass::interruptMode>
   16b8c:	22 23       	and	r18, r18
   16b8e:	81 f0       	breq	.+32     	; 0x16bb0 <SPIClass::beginTransaction(SPISettings)+0x28>
   16b90:	3f b7       	in	r19, 0x3f	; 63
   16b92:	f8 94       	cli
   16b94:	20 91 dc 10 	lds	r18, 0x10DC	; 0x8010dc <SPIClass::interruptMode>
   16b98:	21 30       	cpi	r18, 0x01	; 1
   16b9a:	69 f4       	brne	.+26     	; 0x16bb6 <SPIClass::beginTransaction(SPISettings)+0x2e>
   16b9c:	2d b3       	in	r18, 0x1d	; 29
   16b9e:	20 93 da 10 	sts	0x10DA, r18	; 0x8010da <SPIClass::interruptSave>
   16ba2:	4d b3       	in	r20, 0x1d	; 29
   16ba4:	20 91 db 10 	lds	r18, 0x10DB	; 0x8010db <SPIClass::interruptMask>
   16ba8:	20 95       	com	r18
   16baa:	24 23       	and	r18, r20
   16bac:	2d bb       	out	0x1d, r18	; 29
   16bae:	3f bf       	out	0x3f, r19	; 63
   16bb0:	8c bd       	out	0x2c, r24	; 44
   16bb2:	9d bd       	out	0x2d, r25	; 45
   16bb4:	08 95       	ret
   16bb6:	30 93 da 10 	sts	0x10DA, r19	; 0x8010da <SPIClass::interruptSave>
   16bba:	fa cf       	rjmp	.-12     	; 0x16bb0 <SPIClass::beginTransaction(SPISettings)+0x28>

00016bbc <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
   16bbc:	8e bd       	out	0x2e, r24	; 46
   16bbe:	00 00       	nop
   16bc0:	0d b4       	in	r0, 0x2d	; 45
   16bc2:	07 fe       	sbrs	r0, 7
   16bc4:	fd cf       	rjmp	.-6      	; 0x16bc0 <SPIClass::transfer(unsigned char)+0x4>
   16bc6:	8e b5       	in	r24, 0x2e	; 46
   16bc8:	08 95       	ret

00016bca <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
   16bca:	80 91 dc 10 	lds	r24, 0x10DC	; 0x8010dc <SPIClass::interruptMode>
   16bce:	88 23       	and	r24, r24
   16bd0:	61 f0       	breq	.+24     	; 0x16bea <SPIClass::endTransaction()+0x20>
   16bd2:	9f b7       	in	r25, 0x3f	; 63
   16bd4:	f8 94       	cli
   16bd6:	20 91 dc 10 	lds	r18, 0x10DC	; 0x8010dc <SPIClass::interruptMode>
   16bda:	80 91 da 10 	lds	r24, 0x10DA	; 0x8010da <SPIClass::interruptSave>
   16bde:	21 30       	cpi	r18, 0x01	; 1
   16be0:	19 f4       	brne	.+6      	; 0x16be8 <SPIClass::endTransaction()+0x1e>
   16be2:	8d bb       	out	0x1d, r24	; 29
   16be4:	9f bf       	out	0x3f, r25	; 63
   16be6:	08 95       	ret
   16be8:	8f bf       	out	0x3f, r24	; 63
   16bea:	08 95       	ret

00016bec <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
   16bec:	60 e0       	ldi	r22, 0x00	; 0
   16bee:	80 91 27 11 	lds	r24, 0x1127	; 0x801127 <SPI_CS>
   16bf2:	0c 94 84 d2 	jmp	0x1a508	; 0x1a508 <digitalWrite>

00016bf6 <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
   16bf6:	61 e0       	ldi	r22, 0x01	; 1
   16bf8:	80 91 27 11 	lds	r24, 0x1127	; 0x801127 <SPI_CS>
   16bfc:	0c 94 84 d2 	jmp	0x1a508	; 0x1a508 <digitalWrite>

00016c00 <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
   16c00:	0f 93       	push	r16
   16c02:	1f 93       	push	r17
   16c04:	cf 93       	push	r28
   16c06:	df 93       	push	r29
   16c08:	18 2f       	mov	r17, r24
   16c0a:	09 2f       	mov	r16, r25
   16c0c:	d6 2f       	mov	r29, r22
   16c0e:	c4 2f       	mov	r28, r20
   16c10:	80 91 28 11 	lds	r24, 0x1128	; 0x801128 <wiznet_SPI_settings>
   16c14:	90 91 29 11 	lds	r25, 0x1129	; 0x801129 <wiznet_SPI_settings+0x1>
   16c18:	0e 94 c4 b5 	call	0x16b88	; 0x16b88 <SPIClass::beginTransaction(SPISettings)>
   16c1c:	0e 94 f6 b5 	call	0x16bec	; 0x16bec <W5500Class::setSS()>
   16c20:	80 2f       	mov	r24, r16
   16c22:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16c26:	81 2f       	mov	r24, r17
   16c28:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16c2c:	8d 2f       	mov	r24, r29
   16c2e:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16c32:	8c 2f       	mov	r24, r28
   16c34:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16c38:	0e 94 fb b5 	call	0x16bf6	; 0x16bf6 <W5500Class::resetSS()>
   16c3c:	0e 94 e5 b5 	call	0x16bca	; 0x16bca <SPIClass::endTransaction()>
   16c40:	81 e0       	ldi	r24, 0x01	; 1
   16c42:	df 91       	pop	r29
   16c44:	cf 91       	pop	r28
   16c46:	1f 91       	pop	r17
   16c48:	0f 91       	pop	r16
   16c4a:	08 95       	ret

00016c4c <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
   16c4c:	df 92       	push	r13
   16c4e:	ef 92       	push	r14
   16c50:	ff 92       	push	r15
   16c52:	0f 93       	push	r16
   16c54:	1f 93       	push	r17
   16c56:	cf 93       	push	r28
   16c58:	df 93       	push	r29
   16c5a:	d8 2f       	mov	r29, r24
   16c5c:	d9 2e       	mov	r13, r25
   16c5e:	c6 2f       	mov	r28, r22
   16c60:	7a 01       	movw	r14, r20
   16c62:	89 01       	movw	r16, r18
   16c64:	80 91 28 11 	lds	r24, 0x1128	; 0x801128 <wiznet_SPI_settings>
   16c68:	90 91 29 11 	lds	r25, 0x1129	; 0x801129 <wiznet_SPI_settings+0x1>
   16c6c:	0e 94 c4 b5 	call	0x16b88	; 0x16b88 <SPIClass::beginTransaction(SPISettings)>
   16c70:	0e 94 f6 b5 	call	0x16bec	; 0x16bec <W5500Class::setSS()>
   16c74:	8d 2d       	mov	r24, r13
   16c76:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16c7a:	8d 2f       	mov	r24, r29
   16c7c:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16c80:	8c 2f       	mov	r24, r28
   16c82:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16c86:	e7 01       	movw	r28, r14
   16c88:	e0 0e       	add	r14, r16
   16c8a:	f1 1e       	adc	r15, r17
   16c8c:	ce 15       	cp	r28, r14
   16c8e:	df 05       	cpc	r29, r15
   16c90:	21 f0       	breq	.+8      	; 0x16c9a <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
   16c92:	89 91       	ld	r24, Y+
   16c94:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16c98:	f9 cf       	rjmp	.-14     	; 0x16c8c <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
   16c9a:	0e 94 fb b5 	call	0x16bf6	; 0x16bf6 <W5500Class::resetSS()>
   16c9e:	0e 94 e5 b5 	call	0x16bca	; 0x16bca <SPIClass::endTransaction()>
   16ca2:	c8 01       	movw	r24, r16
   16ca4:	df 91       	pop	r29
   16ca6:	cf 91       	pop	r28
   16ca8:	1f 91       	pop	r17
   16caa:	0f 91       	pop	r16
   16cac:	ff 90       	pop	r15
   16cae:	ef 90       	pop	r14
   16cb0:	df 90       	pop	r13
   16cb2:	08 95       	ret

00016cb4 <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
   16cb4:	1f 93       	push	r17
   16cb6:	cf 93       	push	r28
   16cb8:	df 93       	push	r29
   16cba:	d8 2f       	mov	r29, r24
   16cbc:	19 2f       	mov	r17, r25
   16cbe:	c6 2f       	mov	r28, r22
   16cc0:	80 91 28 11 	lds	r24, 0x1128	; 0x801128 <wiznet_SPI_settings>
   16cc4:	90 91 29 11 	lds	r25, 0x1129	; 0x801129 <wiznet_SPI_settings+0x1>
   16cc8:	0e 94 c4 b5 	call	0x16b88	; 0x16b88 <SPIClass::beginTransaction(SPISettings)>
   16ccc:	0e 94 f6 b5 	call	0x16bec	; 0x16bec <W5500Class::setSS()>
   16cd0:	81 2f       	mov	r24, r17
   16cd2:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16cd6:	8d 2f       	mov	r24, r29
   16cd8:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16cdc:	8c 2f       	mov	r24, r28
   16cde:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16ce2:	80 e0       	ldi	r24, 0x00	; 0
   16ce4:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16ce8:	c8 2f       	mov	r28, r24
   16cea:	0e 94 fb b5 	call	0x16bf6	; 0x16bf6 <W5500Class::resetSS()>
   16cee:	0e 94 e5 b5 	call	0x16bca	; 0x16bca <SPIClass::endTransaction()>
   16cf2:	8c 2f       	mov	r24, r28
   16cf4:	df 91       	pop	r29
   16cf6:	cf 91       	pop	r28
   16cf8:	1f 91       	pop	r17
   16cfa:	08 95       	ret

00016cfc <W5500Class::init(unsigned char)>:
_ZN10W5500Class4initEh():
   16cfc:	0f 93       	push	r16
   16cfe:	1f 93       	push	r17
   16d00:	cf 93       	push	r28
   16d02:	60 93 27 11 	sts	0x1127, r22	; 0x801127 <SPI_CS>
   16d06:	68 ee       	ldi	r22, 0xE8	; 232
   16d08:	73 e0       	ldi	r23, 0x03	; 3
   16d0a:	80 e0       	ldi	r24, 0x00	; 0
   16d0c:	90 e0       	ldi	r25, 0x00	; 0
   16d0e:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
_ZN10W5500Class6initSSEv():
   16d12:	61 e0       	ldi	r22, 0x01	; 1
   16d14:	80 91 27 11 	lds	r24, 0x1127	; 0x801127 <SPI_CS>
   16d18:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
_ZN10W5500Class4initEh():
   16d1c:	0e 94 6d aa 	call	0x154da	; 0x154da <SPIClass::begin()>
_ZN10W5500Class6readMREv():
   16d20:	60 e0       	ldi	r22, 0x00	; 0
   16d22:	90 e0       	ldi	r25, 0x00	; 0
   16d24:	80 e0       	ldi	r24, 0x00	; 0
   16d26:	0e 94 5a b6 	call	0x16cb4	; 0x16cb4 <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv():
   16d2a:	48 2f       	mov	r20, r24
   16d2c:	40 68       	ori	r20, 0x80	; 128
_ZN10W5500Class7writeMREh():
   16d2e:	64 e0       	ldi	r22, 0x04	; 4
   16d30:	90 e0       	ldi	r25, 0x00	; 0
   16d32:	80 e0       	ldi	r24, 0x00	; 0
   16d34:	0e 94 00 b6 	call	0x16c00	; 0x16c00 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   16d38:	cc e0       	ldi	r28, 0x0C	; 12
   16d3a:	08 e0       	ldi	r16, 0x08	; 8
   16d3c:	10 e0       	ldi	r17, 0x00	; 0
_ZN10W5500Class4initEh():
   16d3e:	42 e0       	ldi	r20, 0x02	; 2
   16d40:	6c 2f       	mov	r22, r28
   16d42:	8e e1       	ldi	r24, 0x1E	; 30
   16d44:	90 e0       	ldi	r25, 0x00	; 0
   16d46:	0e 94 00 b6 	call	0x16c00	; 0x16c00 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   16d4a:	42 e0       	ldi	r20, 0x02	; 2
   16d4c:	6c 2f       	mov	r22, r28
   16d4e:	8f e1       	ldi	r24, 0x1F	; 31
   16d50:	90 e0       	ldi	r25, 0x00	; 0
   16d52:	0e 94 00 b6 	call	0x16c00	; 0x16c00 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   16d56:	01 50       	subi	r16, 0x01	; 1
   16d58:	11 09       	sbc	r17, r1
   16d5a:	c0 5e       	subi	r28, 0xE0	; 224
   16d5c:	01 15       	cp	r16, r1
   16d5e:	11 05       	cpc	r17, r1
   16d60:	71 f7       	brne	.-36     	; 0x16d3e <W5500Class::init(unsigned char)+0x42>
   16d62:	cf 91       	pop	r28
   16d64:	1f 91       	pop	r17
   16d66:	0f 91       	pop	r16
   16d68:	08 95       	ret

00016d6a <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
   16d6a:	1f 93       	push	r17
   16d6c:	cf 93       	push	r28
   16d6e:	df 93       	push	r29
   16d70:	18 2f       	mov	r17, r24
   16d72:	60 e2       	ldi	r22, 0x20	; 32
   16d74:	70 e0       	ldi	r23, 0x00	; 0
   16d76:	0e 94 eb b3 	call	0x167d6	; 0x167d6 <W5500Class::readSn(unsigned char, unsigned int)>
   16d7a:	c8 2f       	mov	r28, r24
   16d7c:	d0 e0       	ldi	r29, 0x00	; 0
   16d7e:	dc 2f       	mov	r29, r28
   16d80:	cc 27       	eor	r28, r28
   16d82:	61 e2       	ldi	r22, 0x21	; 33
   16d84:	70 e0       	ldi	r23, 0x00	; 0
   16d86:	81 2f       	mov	r24, r17
   16d88:	0e 94 eb b3 	call	0x167d6	; 0x167d6 <W5500Class::readSn(unsigned char, unsigned int)>
   16d8c:	8c 0f       	add	r24, r28
   16d8e:	9d 2f       	mov	r25, r29
   16d90:	91 1d       	adc	r25, r1
   16d92:	df 91       	pop	r29
   16d94:	cf 91       	pop	r28
   16d96:	1f 91       	pop	r17
   16d98:	08 95       	ret

00016d9a <W5500Class::getTXFreeSize(unsigned char)>:
_ZN10W5500Class13getTXFreeSizeEh():
   16d9a:	ff 92       	push	r15
   16d9c:	0f 93       	push	r16
   16d9e:	1f 93       	push	r17
   16da0:	cf 93       	push	r28
   16da2:	df 93       	push	r29
   16da4:	f6 2e       	mov	r15, r22
   16da6:	d0 e0       	ldi	r29, 0x00	; 0
   16da8:	c0 e0       	ldi	r28, 0x00	; 0
   16daa:	8f 2d       	mov	r24, r15
   16dac:	0e 94 b5 b6 	call	0x16d6a	; 0x16d6a <W5500Class::readSnTX_FSR(unsigned char)>
   16db0:	8c 01       	movw	r16, r24
   16db2:	89 2b       	or	r24, r25
   16db4:	21 f0       	breq	.+8      	; 0x16dbe <W5500Class::getTXFreeSize(unsigned char)+0x24>
   16db6:	8f 2d       	mov	r24, r15
   16db8:	0e 94 b5 b6 	call	0x16d6a	; 0x16d6a <W5500Class::readSnTX_FSR(unsigned char)>
   16dbc:	ec 01       	movw	r28, r24
   16dbe:	c0 17       	cp	r28, r16
   16dc0:	d1 07       	cpc	r29, r17
   16dc2:	99 f7       	brne	.-26     	; 0x16daa <W5500Class::getTXFreeSize(unsigned char)+0x10>
   16dc4:	ce 01       	movw	r24, r28
   16dc6:	df 91       	pop	r29
   16dc8:	cf 91       	pop	r28
   16dca:	1f 91       	pop	r17
   16dcc:	0f 91       	pop	r16
   16dce:	ff 90       	pop	r15
   16dd0:	08 95       	ret

00016dd2 <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
   16dd2:	1f 93       	push	r17
   16dd4:	cf 93       	push	r28
   16dd6:	df 93       	push	r29
   16dd8:	18 2f       	mov	r17, r24
   16dda:	66 e2       	ldi	r22, 0x26	; 38
   16ddc:	70 e0       	ldi	r23, 0x00	; 0
   16dde:	0e 94 eb b3 	call	0x167d6	; 0x167d6 <W5500Class::readSn(unsigned char, unsigned int)>
   16de2:	c8 2f       	mov	r28, r24
   16de4:	d0 e0       	ldi	r29, 0x00	; 0
   16de6:	dc 2f       	mov	r29, r28
   16de8:	cc 27       	eor	r28, r28
   16dea:	67 e2       	ldi	r22, 0x27	; 39
   16dec:	70 e0       	ldi	r23, 0x00	; 0
   16dee:	81 2f       	mov	r24, r17
   16df0:	0e 94 eb b3 	call	0x167d6	; 0x167d6 <W5500Class::readSn(unsigned char, unsigned int)>
   16df4:	8c 0f       	add	r24, r28
   16df6:	9d 2f       	mov	r25, r29
   16df8:	91 1d       	adc	r25, r1
   16dfa:	df 91       	pop	r29
   16dfc:	cf 91       	pop	r28
   16dfe:	1f 91       	pop	r17
   16e00:	08 95       	ret

00016e02 <W5500Class::getRXReceivedSize(unsigned char)>:
_ZN10W5500Class17getRXReceivedSizeEh():
   16e02:	ff 92       	push	r15
   16e04:	0f 93       	push	r16
   16e06:	1f 93       	push	r17
   16e08:	cf 93       	push	r28
   16e0a:	df 93       	push	r29
   16e0c:	f6 2e       	mov	r15, r22
   16e0e:	d0 e0       	ldi	r29, 0x00	; 0
   16e10:	c0 e0       	ldi	r28, 0x00	; 0
   16e12:	8f 2d       	mov	r24, r15
   16e14:	0e 94 e9 b6 	call	0x16dd2	; 0x16dd2 <W5500Class::readSnRX_RSR(unsigned char)>
   16e18:	8c 01       	movw	r16, r24
   16e1a:	89 2b       	or	r24, r25
   16e1c:	21 f0       	breq	.+8      	; 0x16e26 <W5500Class::getRXReceivedSize(unsigned char)+0x24>
   16e1e:	8f 2d       	mov	r24, r15
   16e20:	0e 94 e9 b6 	call	0x16dd2	; 0x16dd2 <W5500Class::readSnRX_RSR(unsigned char)>
   16e24:	ec 01       	movw	r28, r24
   16e26:	c0 17       	cp	r28, r16
   16e28:	d1 07       	cpc	r29, r17
   16e2a:	99 f7       	brne	.-26     	; 0x16e12 <W5500Class::getRXReceivedSize(unsigned char)+0x10>
   16e2c:	ce 01       	movw	r24, r28
   16e2e:	df 91       	pop	r29
   16e30:	cf 91       	pop	r28
   16e32:	1f 91       	pop	r17
   16e34:	0f 91       	pop	r16
   16e36:	ff 90       	pop	r15
   16e38:	08 95       	ret

00016e3a <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   16e3a:	bf 92       	push	r11
   16e3c:	cf 92       	push	r12
   16e3e:	df 92       	push	r13
   16e40:	ef 92       	push	r14
   16e42:	ff 92       	push	r15
   16e44:	0f 93       	push	r16
   16e46:	1f 93       	push	r17
   16e48:	cf 93       	push	r28
   16e4a:	df 93       	push	r29
   16e4c:	b6 2e       	mov	r11, r22
   16e4e:	7a 01       	movw	r14, r20
   16e50:	69 01       	movw	r12, r18
_ZN10W5500Class11readSnTX_WREh():
   16e52:	64 e2       	ldi	r22, 0x24	; 36
   16e54:	70 e0       	ldi	r23, 0x00	; 0
   16e56:	8b 2d       	mov	r24, r11
   16e58:	0e 94 eb b3 	call	0x167d6	; 0x167d6 <W5500Class::readSn(unsigned char, unsigned int)>
   16e5c:	c8 2f       	mov	r28, r24
   16e5e:	65 e2       	ldi	r22, 0x25	; 37
   16e60:	70 e0       	ldi	r23, 0x00	; 0
   16e62:	8b 2d       	mov	r24, r11
   16e64:	0e 94 eb b3 	call	0x167d6	; 0x167d6 <W5500Class::readSn(unsigned char, unsigned int)>
   16e68:	d0 e0       	ldi	r29, 0x00	; 0
   16e6a:	dc 2f       	mov	r29, r28
   16e6c:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   16e6e:	8e 0d       	add	r24, r14
   16e70:	9f 2d       	mov	r25, r15
   16e72:	91 1d       	adc	r25, r1
   16e74:	c8 0f       	add	r28, r24
   16e76:	d9 1f       	adc	r29, r25
   16e78:	6b 2d       	mov	r22, r11
   16e7a:	62 95       	swap	r22
   16e7c:	66 0f       	add	r22, r22
   16e7e:	60 7e       	andi	r22, 0xE0	; 224
   16e80:	6c 5e       	subi	r22, 0xEC	; 236
   16e82:	98 01       	movw	r18, r16
   16e84:	a6 01       	movw	r20, r12
   16e86:	ce 01       	movw	r24, r28
   16e88:	0e 94 26 b6 	call	0x16c4c	; 0x16c4c <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
   16e8c:	0c 0f       	add	r16, r28
   16e8e:	1d 1f       	adc	r17, r29
_ZN10W5500Class12writeSnTX_WREhj():
   16e90:	41 2f       	mov	r20, r17
   16e92:	64 e2       	ldi	r22, 0x24	; 36
   16e94:	70 e0       	ldi	r23, 0x00	; 0
   16e96:	8b 2d       	mov	r24, r11
   16e98:	0e 94 f8 b3 	call	0x167f0	; 0x167f0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   16e9c:	40 2f       	mov	r20, r16
   16e9e:	65 e2       	ldi	r22, 0x25	; 37
   16ea0:	70 e0       	ldi	r23, 0x00	; 0
   16ea2:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   16ea4:	df 91       	pop	r29
   16ea6:	cf 91       	pop	r28
   16ea8:	1f 91       	pop	r17
   16eaa:	0f 91       	pop	r16
   16eac:	ff 90       	pop	r15
   16eae:	ef 90       	pop	r14
   16eb0:	df 90       	pop	r13
   16eb2:	cf 90       	pop	r12
   16eb4:	bf 90       	pop	r11
_ZN10W5500Class12writeSnTX_WREhj():
   16eb6:	0c 94 f8 b3 	jmp	0x167f0	; 0x167f0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00016eba <W5500Class::send_data_processing(unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class20send_data_processingEhPKhj():
   16eba:	0f 93       	push	r16
   16ebc:	1f 93       	push	r17
   16ebe:	89 01       	movw	r16, r18
   16ec0:	9a 01       	movw	r18, r20
   16ec2:	50 e0       	ldi	r21, 0x00	; 0
   16ec4:	40 e0       	ldi	r20, 0x00	; 0
   16ec6:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>
   16eca:	1f 91       	pop	r17
   16ecc:	0f 91       	pop	r16
   16ece:	08 95       	ret

00016ed0 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)>:
_ZN10W5500Class4readEjhPhj():
   16ed0:	df 92       	push	r13
   16ed2:	ef 92       	push	r14
   16ed4:	ff 92       	push	r15
   16ed6:	0f 93       	push	r16
   16ed8:	1f 93       	push	r17
   16eda:	cf 93       	push	r28
   16edc:	df 93       	push	r29
   16ede:	d8 2f       	mov	r29, r24
   16ee0:	d9 2e       	mov	r13, r25
   16ee2:	c6 2f       	mov	r28, r22
   16ee4:	7a 01       	movw	r14, r20
   16ee6:	89 01       	movw	r16, r18
   16ee8:	80 91 28 11 	lds	r24, 0x1128	; 0x801128 <wiznet_SPI_settings>
   16eec:	90 91 29 11 	lds	r25, 0x1129	; 0x801129 <wiznet_SPI_settings+0x1>
   16ef0:	0e 94 c4 b5 	call	0x16b88	; 0x16b88 <SPIClass::beginTransaction(SPISettings)>
   16ef4:	0e 94 f6 b5 	call	0x16bec	; 0x16bec <W5500Class::setSS()>
   16ef8:	8d 2d       	mov	r24, r13
   16efa:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16efe:	8d 2f       	mov	r24, r29
   16f00:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16f04:	8c 2f       	mov	r24, r28
   16f06:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16f0a:	e7 01       	movw	r28, r14
   16f0c:	e0 0e       	add	r14, r16
   16f0e:	f1 1e       	adc	r15, r17
   16f10:	ce 15       	cp	r28, r14
   16f12:	df 05       	cpc	r29, r15
   16f14:	29 f0       	breq	.+10     	; 0x16f20 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)+0x50>
   16f16:	80 e0       	ldi	r24, 0x00	; 0
   16f18:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   16f1c:	89 93       	st	Y+, r24
   16f1e:	f8 cf       	rjmp	.-16     	; 0x16f10 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)+0x40>
   16f20:	0e 94 fb b5 	call	0x16bf6	; 0x16bf6 <W5500Class::resetSS()>
   16f24:	0e 94 e5 b5 	call	0x16bca	; 0x16bca <SPIClass::endTransaction()>
   16f28:	c8 01       	movw	r24, r16
   16f2a:	df 91       	pop	r29
   16f2c:	cf 91       	pop	r28
   16f2e:	1f 91       	pop	r17
   16f30:	0f 91       	pop	r16
   16f32:	ff 90       	pop	r15
   16f34:	ef 90       	pop	r14
   16f36:	df 90       	pop	r13
   16f38:	08 95       	ret

00016f3a <W5500Class::read_data(unsigned char, unsigned int, unsigned char volatile*, unsigned int)>:
_ZN10W5500Class9read_dataEhjPVhj():
   16f3a:	0f 93       	push	r16
   16f3c:	1f 93       	push	r17
   16f3e:	cf 93       	push	r28
   16f40:	df 93       	push	r29
   16f42:	1f 92       	push	r1
   16f44:	1f 92       	push	r1
   16f46:	cd b7       	in	r28, 0x3d	; 61
   16f48:	de b7       	in	r29, 0x3e	; 62
   16f4a:	5a 83       	std	Y+2, r21	; 0x02
   16f4c:	49 83       	std	Y+1, r20	; 0x01
   16f4e:	a9 01       	movw	r20, r18
   16f50:	98 01       	movw	r18, r16
   16f52:	89 81       	ldd	r24, Y+1	; 0x01
   16f54:	9a 81       	ldd	r25, Y+2	; 0x02
   16f56:	62 95       	swap	r22
   16f58:	66 0f       	add	r22, r22
   16f5a:	60 7e       	andi	r22, 0xE0	; 224
   16f5c:	68 5e       	subi	r22, 0xE8	; 232
   16f5e:	0f 90       	pop	r0
   16f60:	0f 90       	pop	r0
   16f62:	df 91       	pop	r29
   16f64:	cf 91       	pop	r28
   16f66:	1f 91       	pop	r17
   16f68:	0f 91       	pop	r16
   16f6a:	0c 94 68 b7 	jmp	0x16ed0	; 0x16ed0 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)>

00016f6e <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>:
_ZN10W5500Class20recv_data_processingEhPhjh():
   16f6e:	8f 92       	push	r8
   16f70:	9f 92       	push	r9
   16f72:	af 92       	push	r10
   16f74:	bf 92       	push	r11
   16f76:	cf 92       	push	r12
   16f78:	df 92       	push	r13
   16f7a:	ef 92       	push	r14
   16f7c:	ff 92       	push	r15
   16f7e:	0f 93       	push	r16
   16f80:	1f 93       	push	r17
   16f82:	cf 93       	push	r28
   16f84:	df 93       	push	r29
   16f86:	6c 01       	movw	r12, r24
   16f88:	96 2e       	mov	r9, r22
   16f8a:	5a 01       	movw	r10, r20
   16f8c:	79 01       	movw	r14, r18
   16f8e:	80 2e       	mov	r8, r16
_ZN10W5500Class11readSnRX_RDEh():
   16f90:	68 e2       	ldi	r22, 0x28	; 40
   16f92:	70 e0       	ldi	r23, 0x00	; 0
   16f94:	89 2d       	mov	r24, r9
   16f96:	0e 94 eb b3 	call	0x167d6	; 0x167d6 <W5500Class::readSn(unsigned char, unsigned int)>
   16f9a:	c8 2f       	mov	r28, r24
   16f9c:	d0 e0       	ldi	r29, 0x00	; 0
   16f9e:	dc 2f       	mov	r29, r28
   16fa0:	cc 27       	eor	r28, r28
   16fa2:	69 e2       	ldi	r22, 0x29	; 41
   16fa4:	70 e0       	ldi	r23, 0x00	; 0
   16fa6:	89 2d       	mov	r24, r9
   16fa8:	0e 94 eb b3 	call	0x167d6	; 0x167d6 <W5500Class::readSn(unsigned char, unsigned int)>
   16fac:	c8 0f       	add	r28, r24
   16fae:	d1 1d       	adc	r29, r1
_ZN10W5500Class20recv_data_processingEhPhjh():
   16fb0:	87 01       	movw	r16, r14
   16fb2:	95 01       	movw	r18, r10
   16fb4:	ae 01       	movw	r20, r28
   16fb6:	69 2d       	mov	r22, r9
   16fb8:	c6 01       	movw	r24, r12
   16fba:	0e 94 9d b7 	call	0x16f3a	; 0x16f3a <W5500Class::read_data(unsigned char, unsigned int, unsigned char volatile*, unsigned int)>
   16fbe:	81 10       	cpse	r8, r1
   16fc0:	1a c0       	rjmp	.+52     	; 0x16ff6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)+0x88>
   16fc2:	ce 0d       	add	r28, r14
   16fc4:	df 1d       	adc	r29, r15
_ZN10W5500Class12writeSnRX_RDEhj():
   16fc6:	4d 2f       	mov	r20, r29
   16fc8:	68 e2       	ldi	r22, 0x28	; 40
   16fca:	70 e0       	ldi	r23, 0x00	; 0
   16fcc:	89 2d       	mov	r24, r9
   16fce:	0e 94 f8 b3 	call	0x167f0	; 0x167f0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   16fd2:	4c 2f       	mov	r20, r28
   16fd4:	69 e2       	ldi	r22, 0x29	; 41
   16fd6:	70 e0       	ldi	r23, 0x00	; 0
   16fd8:	89 2d       	mov	r24, r9
_ZN10W5500Class20recv_data_processingEhPhjh():
   16fda:	df 91       	pop	r29
   16fdc:	cf 91       	pop	r28
   16fde:	1f 91       	pop	r17
   16fe0:	0f 91       	pop	r16
   16fe2:	ff 90       	pop	r15
   16fe4:	ef 90       	pop	r14
   16fe6:	df 90       	pop	r13
   16fe8:	cf 90       	pop	r12
   16fea:	bf 90       	pop	r11
   16fec:	af 90       	pop	r10
   16fee:	9f 90       	pop	r9
   16ff0:	8f 90       	pop	r8
_ZN10W5500Class12writeSnRX_RDEhj():
   16ff2:	0c 94 f8 b3 	jmp	0x167f0	; 0x167f0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh():
   16ff6:	df 91       	pop	r29
   16ff8:	cf 91       	pop	r28
   16ffa:	1f 91       	pop	r17
   16ffc:	0f 91       	pop	r16
   16ffe:	ff 90       	pop	r15
   17000:	ef 90       	pop	r14
   17002:	df 90       	pop	r13
   17004:	cf 90       	pop	r12
   17006:	bf 90       	pop	r11
   17008:	af 90       	pop	r10
   1700a:	9f 90       	pop	r9
   1700c:	8f 90       	pop	r8
   1700e:	08 95       	ret

00017010 <W5500Class::execCmdSn(unsigned char, SockCMD)>:
_ZN10W5500Class9execCmdSnEh7SockCMD():
   17010:	cf 93       	push	r28
   17012:	c6 2f       	mov	r28, r22
_ZN10W5500Class9writeSnCREhh():
   17014:	61 e0       	ldi	r22, 0x01	; 1
   17016:	70 e0       	ldi	r23, 0x00	; 0
   17018:	8c 2f       	mov	r24, r28
   1701a:	0e 94 f8 b3 	call	0x167f0	; 0x167f0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class8readSnCREh():
   1701e:	61 e0       	ldi	r22, 0x01	; 1
   17020:	70 e0       	ldi	r23, 0x00	; 0
   17022:	8c 2f       	mov	r24, r28
   17024:	0e 94 eb b3 	call	0x167d6	; 0x167d6 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD():
   17028:	81 11       	cpse	r24, r1
   1702a:	f9 cf       	rjmp	.-14     	; 0x1701e <W5500Class::execCmdSn(unsigned char, SockCMD)+0xe>
   1702c:	cf 91       	pop	r28
   1702e:	08 95       	ret

00017030 <_GLOBAL__sub_I_w5500>:
_ZN11SPISettings17init_AlwaysInlineEmhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:149

    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
   17030:	e8 e2       	ldi	r30, 0x28	; 40
   17032:	f1 e1       	ldi	r31, 0x11	; 17
   17034:	80 e5       	ldi	r24, 0x50	; 80
   17036:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:151
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    spsr = clockDiv & SPI_2XCLOCK_MASK;
   17038:	81 e0       	ldi	r24, 0x01	; 1
   1703a:	81 83       	std	Z+1, r24	; 0x01
_GLOBAL__sub_I_w5500():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:184
   1703c:	08 95       	ret

0001703e <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:98
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}
   1703e:	cf 92       	push	r12
   17040:	df 92       	push	r13
   17042:	ef 92       	push	r14
   17044:	ff 92       	push	r15
   17046:	0f 93       	push	r16
   17048:	1f 93       	push	r17
   1704a:	cf 93       	push	r28
   1704c:	df 93       	push	r29
   1704e:	00 d0       	rcall	.+0      	; 0x17050 <EEPROMreadFloat(unsigned int)+0x12>
   17050:	1f 92       	push	r1
   17052:	cd b7       	in	r28, 0x3d	; 61
   17054:	de b7       	in	r29, 0x3e	; 62
   17056:	7e 01       	movw	r14, r28
   17058:	25 e0       	ldi	r18, 0x05	; 5
   1705a:	e2 0e       	add	r14, r18
   1705c:	f1 1c       	adc	r15, r1
   1705e:	8e 01       	movw	r16, r28
   17060:	0f 5f       	subi	r16, 0xFF	; 255
   17062:	1f 4f       	sbci	r17, 0xFF	; 255
_ZNK5EERefdeEv():
   17064:	6c 01       	movw	r12, r24
   17066:	c0 1a       	sub	r12, r16
   17068:	d1 0a       	sbc	r13, r17
   1706a:	c6 01       	movw	r24, r12
   1706c:	80 0f       	add	r24, r16
   1706e:	91 1f       	adc	r25, r17
   17070:	0e 94 80 e4 	call	0x1c900	; 0x1c900 <eeprom_read_byte>
_Z15EEPROMreadFloatj():
   17074:	f8 01       	movw	r30, r16
   17076:	81 93       	st	Z+, r24
   17078:	8f 01       	movw	r16, r30
   1707a:	ee 15       	cp	r30, r14
   1707c:	ff 05       	cpc	r31, r15
   1707e:	a9 f7       	brne	.-22     	; 0x1706a <EEPROMreadFloat(unsigned int)+0x2c>
   17080:	69 81       	ldd	r22, Y+1	; 0x01
   17082:	7a 81       	ldd	r23, Y+2	; 0x02
   17084:	8b 81       	ldd	r24, Y+3	; 0x03
   17086:	9c 81       	ldd	r25, Y+4	; 0x04
   17088:	0f 90       	pop	r0
   1708a:	0f 90       	pop	r0
   1708c:	0f 90       	pop	r0
   1708e:	0f 90       	pop	r0
   17090:	df 91       	pop	r29
   17092:	cf 91       	pop	r28
   17094:	1f 91       	pop	r17
   17096:	0f 91       	pop	r16
   17098:	ff 90       	pop	r15
   1709a:	ef 90       	pop	r14
   1709c:	df 90       	pop	r13
   1709e:	cf 90       	pop	r12
   170a0:	08 95       	ret

000170a2 <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
   170a2:	cf 92       	push	r12
   170a4:	df 92       	push	r13
   170a6:	ef 92       	push	r14
   170a8:	ff 92       	push	r15
   170aa:	0f 93       	push	r16
   170ac:	1f 93       	push	r17
   170ae:	cf 93       	push	r28
   170b0:	df 93       	push	r29
   170b2:	00 d0       	rcall	.+0      	; 0x170b4 <EEPROMwriteFloat(unsigned int, float)+0x12>
   170b4:	1f 92       	push	r1
   170b6:	cd b7       	in	r28, 0x3d	; 61
   170b8:	de b7       	in	r29, 0x3e	; 62
   170ba:	6c 01       	movw	r12, r24
   170bc:	49 83       	std	Y+1, r20	; 0x01
   170be:	5a 83       	std	Y+2, r21	; 0x02
   170c0:	6b 83       	std	Y+3, r22	; 0x03
   170c2:	7c 83       	std	Y+4, r23	; 0x04
   170c4:	ce 01       	movw	r24, r28
   170c6:	01 96       	adiw	r24, 0x01	; 1
   170c8:	7c 01       	movw	r14, r24
   170ca:	10 e0       	ldi	r17, 0x00	; 0
   170cc:	00 e0       	ldi	r16, 0x00	; 0
   170ce:	f7 01       	movw	r30, r14
   170d0:	61 91       	ld	r22, Z+
   170d2:	7f 01       	movw	r14, r30
_ZN5EERefaSEh():
   170d4:	c8 01       	movw	r24, r16
   170d6:	8c 0d       	add	r24, r12
   170d8:	9d 1d       	adc	r25, r13
   170da:	0e 94 88 e4 	call	0x1c910	; 0x1c910 <eeprom_write_byte>
_Z16EEPROMwriteFloatjf():
   170de:	0f 5f       	subi	r16, 0xFF	; 255
   170e0:	1f 4f       	sbci	r17, 0xFF	; 255
   170e2:	04 30       	cpi	r16, 0x04	; 4
   170e4:	11 05       	cpc	r17, r1
   170e6:	99 f7       	brne	.-26     	; 0x170ce <EEPROMwriteFloat(unsigned int, float)+0x2c>
   170e8:	0f 90       	pop	r0
   170ea:	0f 90       	pop	r0
   170ec:	0f 90       	pop	r0
   170ee:	0f 90       	pop	r0
   170f0:	df 91       	pop	r29
   170f2:	cf 91       	pop	r28
   170f4:	1f 91       	pop	r17
   170f6:	0f 91       	pop	r16
   170f8:	ff 90       	pop	r15
   170fa:	ef 90       	pop	r14
   170fc:	df 90       	pop	r13
   170fe:	cf 90       	pop	r12
   17100:	08 95       	ret

00017102 <float_to_int(float)>:
_Z12float_to_intf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102

int float_to_int(float x)
{
 return x;
   17102:	0e 94 e3 d6 	call	0x1adc6	; 0x1adc6 <__fixsfsi>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
}
   17106:	cb 01       	movw	r24, r22
   17108:	08 95       	ret

0001710a <parseBytes(char const*, char, unsigned char*, int, int)>:
_Z10parseBytesPKccPhii():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:105

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
   1710a:	8f 92       	push	r8
   1710c:	9f 92       	push	r9
   1710e:	af 92       	push	r10
   17110:	bf 92       	push	r11
   17112:	cf 92       	push	r12
   17114:	df 92       	push	r13
   17116:	ef 92       	push	r14
   17118:	ff 92       	push	r15
   1711a:	0f 93       	push	r16
   1711c:	1f 93       	push	r17
   1711e:	cf 93       	push	r28
   17120:	df 93       	push	r29
   17122:	ec 01       	movw	r28, r24
   17124:	5a 01       	movw	r10, r20
   17126:	49 01       	movw	r8, r18
   17128:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:108
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   1712a:	c6 2e       	mov	r12, r22
   1712c:	66 0f       	add	r22, r22
   1712e:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106 (discriminator 1)
{
 return x;
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   17130:	c7 01       	movw	r24, r14
   17132:	8a 19       	sub	r24, r10
   17134:	9b 09       	sbc	r25, r11
   17136:	88 15       	cp	r24, r8
   17138:	99 05       	cpc	r25, r9
   1713a:	b4 f4       	brge	.+44     	; 0x17168 <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   1713c:	a8 01       	movw	r20, r16
   1713e:	70 e0       	ldi	r23, 0x00	; 0
   17140:	60 e0       	ldi	r22, 0x00	; 0
   17142:	ce 01       	movw	r24, r28
   17144:	0e 94 08 db 	call	0x1b610	; 0x1b610 <strtoul>
   17148:	f7 01       	movw	r30, r14
   1714a:	61 93       	st	Z+, r22
   1714c:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:108
    str = strchr(str, sep);               // Find next separator
   1714e:	b6 01       	movw	r22, r12
   17150:	ce 01       	movw	r24, r28
   17152:	0e 94 65 dc 	call	0x1b8ca	; 0x1b8ca <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109
    if (str == NULL || *str == '\0') {
   17156:	00 97       	sbiw	r24, 0x00	; 0
   17158:	39 f0       	breq	.+14     	; 0x17168 <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109 (discriminator 1)
   1715a:	fc 01       	movw	r30, r24
   1715c:	20 81       	ld	r18, Z
   1715e:	22 23       	and	r18, r18
   17160:	19 f0       	breq	.+6      	; 0x17168 <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:112 (discriminator 2)
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
   17162:	ec 01       	movw	r28, r24
   17164:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106 (discriminator 2)
{
 return x;
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   17166:	e4 cf       	rjmp	.-56     	; 0x17130 <parseBytes(char const*, char, unsigned char*, int, int)+0x26>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:114
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
   17168:	df 91       	pop	r29
   1716a:	cf 91       	pop	r28
   1716c:	1f 91       	pop	r17
   1716e:	0f 91       	pop	r16
   17170:	ff 90       	pop	r15
   17172:	ef 90       	pop	r14
   17174:	df 90       	pop	r13
   17176:	cf 90       	pop	r12
   17178:	bf 90       	pop	r11
   1717a:	af 90       	pop	r10
   1717c:	9f 90       	pop	r9
   1717e:	8f 90       	pop	r8
   17180:	08 95       	ret

00017182 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
   17182:	3f 92       	push	r3
   17184:	4f 92       	push	r4
   17186:	5f 92       	push	r5
   17188:	6f 92       	push	r6
   1718a:	7f 92       	push	r7
   1718c:	8f 92       	push	r8
   1718e:	9f 92       	push	r9
   17190:	af 92       	push	r10
   17192:	bf 92       	push	r11
   17194:	cf 92       	push	r12
   17196:	df 92       	push	r13
   17198:	ef 92       	push	r14
   1719a:	ff 92       	push	r15
   1719c:	0f 93       	push	r16
   1719e:	1f 93       	push	r17
   171a0:	cf 93       	push	r28
   171a2:	df 93       	push	r29
   171a4:	00 d0       	rcall	.+0      	; 0x171a6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
   171a6:	00 d0       	rcall	.+0      	; 0x171a8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x26>
   171a8:	1f 92       	push	r1
   171aa:	1f 92       	push	r1
   171ac:	cd b7       	in	r28, 0x3d	; 61
   171ae:	de b7       	in	r29, 0x3e	; 62
   171b0:	5c 01       	movw	r10, r24
   171b2:	36 2e       	mov	r3, r22
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121
  char tmp1[8];
  str[0] = 0;
   171b4:	fc 01       	movw	r30, r24
   171b6:	10 82       	st	Z, r1
   171b8:	2a 01       	movw	r4, r20
   171ba:	c2 2e       	mov	r12, r18
   171bc:	d1 2c       	mov	r13, r1
   171be:	f1 2c       	mov	r15, r1
   171c0:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   171c2:	60 2e       	mov	r6, r16
   171c4:	71 2c       	mov	r7, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   171c6:	8e 01       	movw	r16, r28
   171c8:	0f 5f       	subi	r16, 0xFF	; 255
   171ca:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:128
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   171cc:	46 01       	movw	r8, r12
   171ce:	f1 e0       	ldi	r31, 0x01	; 1
   171d0:	8f 1a       	sub	r8, r31
   171d2:	91 08       	sbc	r9, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122 (discriminator 1)

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   171d4:	ec 14       	cp	r14, r12
   171d6:	fd 04       	cpc	r15, r13
   171d8:	39 f1       	breq	.+78     	; 0x17228 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0xa6>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
  {
    itoa(bytes[a], tmp1, base);
   171da:	f2 01       	movw	r30, r4
   171dc:	81 91       	ld	r24, Z+
   171de:	2f 01       	movw	r4, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
   171e0:	a3 01       	movw	r20, r6
   171e2:	b8 01       	movw	r22, r16
   171e4:	90 e0       	ldi	r25, 0x00	; 0
   171e6:	0e 94 c4 dc 	call	0x1b988	; 0x1b988 <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    if (strlen(tmp1) < 2)
   171ea:	f8 01       	movw	r30, r16
   171ec:	01 90       	ld	r0, Z+
   171ee:	00 20       	and	r0, r0
   171f0:	e9 f7       	brne	.-6      	; 0x171ec <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x6a>
   171f2:	31 97       	sbiw	r30, 0x01	; 1
   171f4:	e0 1b       	sub	r30, r16
   171f6:	f1 0b       	sbc	r31, r17
   171f8:	32 97       	sbiw	r30, 0x02	; 2
   171fa:	28 f4       	brcc	.+10     	; 0x17206 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x84>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:126
      strcat(str, "0");
   171fc:	65 ea       	ldi	r22, 0xA5	; 165
   171fe:	78 e0       	ldi	r23, 0x08	; 8
   17200:	c5 01       	movw	r24, r10
   17202:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
    strcat(str, tmp1); 
   17206:	b8 01       	movw	r22, r16
   17208:	c5 01       	movw	r24, r10
   1720a:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:128
    if (a < maxBytes - 1)
   1720e:	e8 14       	cp	r14, r8
   17210:	f9 04       	cpc	r15, r9
   17212:	34 f4       	brge	.+12     	; 0x17220 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x9e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
    {
      tmp1[0] = sep;
   17214:	39 82       	std	Y+1, r3	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:131
      tmp1[1] = 0;
   17216:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:132
      strcat(str, tmp1);
   17218:	b8 01       	movw	r22, r16
   1721a:	c5 01       	movw	r24, r10
   1721c:	0e 94 5a dc 	call	0x1b8b4	; 0x1b8b4 <strcat>
   17220:	ff ef       	ldi	r31, 0xFF	; 255
   17222:	ef 1a       	sub	r14, r31
   17224:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122 (discriminator 2)

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   17226:	d6 cf       	rjmp	.-84     	; 0x171d4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x52>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:135
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   17228:	28 96       	adiw	r28, 0x08	; 8
   1722a:	0f b6       	in	r0, 0x3f	; 63
   1722c:	f8 94       	cli
   1722e:	de bf       	out	0x3e, r29	; 62
   17230:	0f be       	out	0x3f, r0	; 63
   17232:	cd bf       	out	0x3d, r28	; 61
   17234:	df 91       	pop	r29
   17236:	cf 91       	pop	r28
   17238:	1f 91       	pop	r17
   1723a:	0f 91       	pop	r16
   1723c:	ff 90       	pop	r15
   1723e:	ef 90       	pop	r14
   17240:	df 90       	pop	r13
   17242:	cf 90       	pop	r12
   17244:	bf 90       	pop	r11
   17246:	af 90       	pop	r10
   17248:	9f 90       	pop	r9
   1724a:	8f 90       	pop	r8
   1724c:	7f 90       	pop	r7
   1724e:	6f 90       	pop	r6
   17250:	5f 90       	pop	r5
   17252:	4f 90       	pop	r4
   17254:	3f 90       	pop	r3
   17256:	08 95       	ret

00017258 <PID::SetTunings(double, double, double, int)>:
_ZN3PID10SetTuningsEdddi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:103
 * This function allows the controller's dynamic performance to be adjusted.
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   17258:	4f 92       	push	r4
   1725a:	5f 92       	push	r5
   1725c:	6f 92       	push	r6
   1725e:	7f 92       	push	r7
   17260:	8f 92       	push	r8
   17262:	9f 92       	push	r9
   17264:	af 92       	push	r10
   17266:	bf 92       	push	r11
   17268:	cf 92       	push	r12
   1726a:	df 92       	push	r13
   1726c:	ef 92       	push	r14
   1726e:	ff 92       	push	r15
   17270:	0f 93       	push	r16
   17272:	1f 93       	push	r17
   17274:	cf 93       	push	r28
   17276:	df 93       	push	r29
   17278:	00 d0       	rcall	.+0      	; 0x1727a <PID::SetTunings(double, double, double, int)+0x22>
   1727a:	00 d0       	rcall	.+0      	; 0x1727c <PID::SetTunings(double, double, double, int)+0x24>
   1727c:	cd b7       	in	r28, 0x3d	; 61
   1727e:	de b7       	in	r29, 0x3e	; 62
   17280:	9e 83       	std	Y+6, r25	; 0x06
   17282:	8d 83       	std	Y+5, r24	; 0x05
   17284:	49 83       	std	Y+1, r20	; 0x01
   17286:	5a 83       	std	Y+2, r21	; 0x02
   17288:	6b 83       	std	Y+3, r22	; 0x03
   1728a:	7c 83       	std	Y+4, r23	; 0x04
   1728c:	28 01       	movw	r4, r16
   1728e:	39 01       	movw	r6, r18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
   if (Kp<0 || Ki<0 || Kd<0) return;
   17290:	20 e0       	ldi	r18, 0x00	; 0
   17292:	30 e0       	ldi	r19, 0x00	; 0
   17294:	a9 01       	movw	r20, r18
   17296:	69 81       	ldd	r22, Y+1	; 0x01
   17298:	7a 81       	ldd	r23, Y+2	; 0x02
   1729a:	8b 81       	ldd	r24, Y+3	; 0x03
   1729c:	9c 81       	ldd	r25, Y+4	; 0x04
   1729e:	0e 94 6c d6 	call	0x1acd8	; 0x1acd8 <__cmpsf2>
   172a2:	87 fd       	sbrc	r24, 7
   172a4:	97 c0       	rjmp	.+302    	; 0x173d4 <PID::SetTunings(double, double, double, int)+0x17c>
   172a6:	20 e0       	ldi	r18, 0x00	; 0
   172a8:	30 e0       	ldi	r19, 0x00	; 0
   172aa:	a9 01       	movw	r20, r18
   172ac:	c3 01       	movw	r24, r6
   172ae:	b8 01       	movw	r22, r16
   172b0:	0e 94 6c d6 	call	0x1acd8	; 0x1acd8 <__cmpsf2>
   172b4:	87 fd       	sbrc	r24, 7
   172b6:	8e c0       	rjmp	.+284    	; 0x173d4 <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104 (discriminator 2)
   172b8:	20 e0       	ldi	r18, 0x00	; 0
   172ba:	30 e0       	ldi	r19, 0x00	; 0
   172bc:	a9 01       	movw	r20, r18
   172be:	c7 01       	movw	r24, r14
   172c0:	b6 01       	movw	r22, r12
   172c2:	0e 94 6c d6 	call	0x1acd8	; 0x1acd8 <__cmpsf2>
   172c6:	87 fd       	sbrc	r24, 7
   172c8:	85 c0       	rjmp	.+266    	; 0x173d4 <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106

   pOn = POn;
   172ca:	ad 81       	ldd	r26, Y+5	; 0x05
   172cc:	be 81       	ldd	r27, Y+6	; 0x06
   172ce:	5b 96       	adiw	r26, 0x1b	; 27
   172d0:	bc 92       	st	X, r11
   172d2:	ae 92       	st	-X, r10
   172d4:	5a 97       	sbiw	r26, 0x1a	; 26
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
   172d6:	81 e0       	ldi	r24, 0x01	; 1
   172d8:	aa 94       	dec	r10
   172da:	ab 28       	or	r10, r11
   172dc:	09 f0       	breq	.+2      	; 0x172e0 <PID::SetTunings(double, double, double, int)+0x88>
   172de:	80 e0       	ldi	r24, 0x00	; 0
   172e0:	ed 81       	ldd	r30, Y+5	; 0x05
   172e2:	fe 81       	ldd	r31, Y+6	; 0x06
   172e4:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   172e6:	89 81       	ldd	r24, Y+1	; 0x01
   172e8:	9a 81       	ldd	r25, Y+2	; 0x02
   172ea:	ab 81       	ldd	r26, Y+3	; 0x03
   172ec:	bc 81       	ldd	r27, Y+4	; 0x04
   172ee:	80 83       	st	Z, r24
   172f0:	91 83       	std	Z+1, r25	; 0x01
   172f2:	a2 83       	std	Z+2, r26	; 0x02
   172f4:	b3 83       	std	Z+3, r27	; 0x03
   172f6:	44 82       	std	Z+4, r4	; 0x04
   172f8:	55 82       	std	Z+5, r5	; 0x05
   172fa:	66 82       	std	Z+6, r6	; 0x06
   172fc:	77 82       	std	Z+7, r7	; 0x07
   172fe:	c0 86       	std	Z+8, r12	; 0x08
   17300:	d1 86       	std	Z+9, r13	; 0x09
   17302:	e2 86       	std	Z+10, r14	; 0x0a
   17304:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
   17306:	66 a5       	ldd	r22, Z+46	; 0x2e
   17308:	77 a5       	ldd	r23, Z+47	; 0x2f
   1730a:	80 a9       	ldd	r24, Z+48	; 0x30
   1730c:	91 a9       	ldd	r25, Z+49	; 0x31
   1730e:	0e 94 19 d7 	call	0x1ae32	; 0x1ae32 <__floatunsisf>
   17312:	20 e0       	ldi	r18, 0x00	; 0
   17314:	30 e0       	ldi	r19, 0x00	; 0
   17316:	4a e7       	ldi	r20, 0x7A	; 122
   17318:	54 e4       	ldi	r21, 0x44	; 68
   1731a:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
   1731e:	4b 01       	movw	r8, r22
   17320:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
   17322:	89 81       	ldd	r24, Y+1	; 0x01
   17324:	9a 81       	ldd	r25, Y+2	; 0x02
   17326:	ab 81       	ldd	r26, Y+3	; 0x03
   17328:	bc 81       	ldd	r27, Y+4	; 0x04
   1732a:	ed 81       	ldd	r30, Y+5	; 0x05
   1732c:	fe 81       	ldd	r31, Y+6	; 0x06
   1732e:	84 87       	std	Z+12, r24	; 0x0c
   17330:	95 87       	std	Z+13, r25	; 0x0d
   17332:	a6 87       	std	Z+14, r26	; 0x0e
   17334:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
   17336:	a5 01       	movw	r20, r10
   17338:	94 01       	movw	r18, r8
   1733a:	c3 01       	movw	r24, r6
   1733c:	b2 01       	movw	r22, r4
   1733e:	0e 94 d0 d7 	call	0x1afa0	; 0x1afa0 <__mulsf3>
   17342:	2b 01       	movw	r4, r22
   17344:	3c 01       	movw	r6, r24
   17346:	ad 81       	ldd	r26, Y+5	; 0x05
   17348:	be 81       	ldd	r27, Y+6	; 0x06
   1734a:	50 96       	adiw	r26, 0x10	; 16
   1734c:	4d 92       	st	X+, r4
   1734e:	5d 92       	st	X+, r5
   17350:	6d 92       	st	X+, r6
   17352:	7c 92       	st	X, r7
   17354:	53 97       	sbiw	r26, 0x13	; 19
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
   17356:	a5 01       	movw	r20, r10
   17358:	94 01       	movw	r18, r8
   1735a:	c7 01       	movw	r24, r14
   1735c:	b6 01       	movw	r22, r12
   1735e:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
   17362:	6b 01       	movw	r12, r22
   17364:	7c 01       	movw	r14, r24
   17366:	ed 81       	ldd	r30, Y+5	; 0x05
   17368:	fe 81       	ldd	r31, Y+6	; 0x06
   1736a:	c4 8a       	std	Z+20, r12	; 0x14
   1736c:	d5 8a       	std	Z+21, r13	; 0x15
   1736e:	e6 8a       	std	Z+22, r14	; 0x16
   17370:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
   17372:	80 8d       	ldd	r24, Z+24	; 0x18
   17374:	91 8d       	ldd	r25, Z+25	; 0x19
   17376:	01 97       	sbiw	r24, 0x01	; 1
   17378:	69 f5       	brne	.+90     	; 0x173d4 <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
   1737a:	29 81       	ldd	r18, Y+1	; 0x01
   1737c:	3a 81       	ldd	r19, Y+2	; 0x02
   1737e:	4b 81       	ldd	r20, Y+3	; 0x03
   17380:	5c 81       	ldd	r21, Y+4	; 0x04
   17382:	60 e0       	ldi	r22, 0x00	; 0
   17384:	70 e0       	ldi	r23, 0x00	; 0
   17386:	cb 01       	movw	r24, r22
   17388:	0e 94 ff d5 	call	0x1abfe	; 0x1abfe <__subsf3>
   1738c:	ad 81       	ldd	r26, Y+5	; 0x05
   1738e:	be 81       	ldd	r27, Y+6	; 0x06
   17390:	1c 96       	adiw	r26, 0x0c	; 12
   17392:	6d 93       	st	X+, r22
   17394:	7d 93       	st	X+, r23
   17396:	8d 93       	st	X+, r24
   17398:	9c 93       	st	X, r25
   1739a:	1f 97       	sbiw	r26, 0x0f	; 15
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
   1739c:	a3 01       	movw	r20, r6
   1739e:	92 01       	movw	r18, r4
   173a0:	60 e0       	ldi	r22, 0x00	; 0
   173a2:	70 e0       	ldi	r23, 0x00	; 0
   173a4:	cb 01       	movw	r24, r22
   173a6:	0e 94 ff d5 	call	0x1abfe	; 0x1abfe <__subsf3>
   173aa:	ed 81       	ldd	r30, Y+5	; 0x05
   173ac:	fe 81       	ldd	r31, Y+6	; 0x06
   173ae:	60 8b       	std	Z+16, r22	; 0x10
   173b0:	71 8b       	std	Z+17, r23	; 0x11
   173b2:	82 8b       	std	Z+18, r24	; 0x12
   173b4:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
   173b6:	a7 01       	movw	r20, r14
   173b8:	96 01       	movw	r18, r12
   173ba:	60 e0       	ldi	r22, 0x00	; 0
   173bc:	70 e0       	ldi	r23, 0x00	; 0
   173be:	cb 01       	movw	r24, r22
   173c0:	0e 94 ff d5 	call	0x1abfe	; 0x1abfe <__subsf3>
   173c4:	ad 81       	ldd	r26, Y+5	; 0x05
   173c6:	be 81       	ldd	r27, Y+6	; 0x06
   173c8:	54 96       	adiw	r26, 0x14	; 20
   173ca:	6d 93       	st	X+, r22
   173cc:	7d 93       	st	X+, r23
   173ce:	8d 93       	st	X+, r24
   173d0:	9c 93       	st	X, r25
   173d2:	57 97       	sbiw	r26, 0x17	; 23
/home/saric/Arduino/libraries/PID/PID_v1.cpp:122
   }
}
   173d4:	26 96       	adiw	r28, 0x06	; 6
   173d6:	0f b6       	in	r0, 0x3f	; 63
   173d8:	f8 94       	cli
   173da:	de bf       	out	0x3e, r29	; 62
   173dc:	0f be       	out	0x3f, r0	; 63
   173de:	cd bf       	out	0x3d, r28	; 61
   173e0:	df 91       	pop	r29
   173e2:	cf 91       	pop	r28
   173e4:	1f 91       	pop	r17
   173e6:	0f 91       	pop	r16
   173e8:	ff 90       	pop	r15
   173ea:	ef 90       	pop	r14
   173ec:	df 90       	pop	r13
   173ee:	cf 90       	pop	r12
   173f0:	bf 90       	pop	r11
   173f2:	af 90       	pop	r10
   173f4:	9f 90       	pop	r9
   173f6:	8f 90       	pop	r8
   173f8:	7f 90       	pop	r7
   173fa:	6f 90       	pop	r6
   173fc:	5f 90       	pop	r5
   173fe:	4f 90       	pop	r4
   17400:	08 95       	ret

00017402 <PID::SetTunings(double, double, double)>:
_ZN3PID10SetTuningsEddd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:127

/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
   17402:	af 92       	push	r10
   17404:	bf 92       	push	r11
   17406:	cf 92       	push	r12
   17408:	df 92       	push	r13
   1740a:	ef 92       	push	r14
   1740c:	ff 92       	push	r15
   1740e:	0f 93       	push	r16
   17410:	1f 93       	push	r17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:128
    SetTunings(Kp, Ki, Kd, pOn); 
   17412:	fc 01       	movw	r30, r24
   17414:	a2 8c       	ldd	r10, Z+26	; 0x1a
   17416:	b3 8c       	ldd	r11, Z+27	; 0x1b
   17418:	0e 94 2c b9 	call	0x17258	; 0x17258 <PID::SetTunings(double, double, double, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:129
}
   1741c:	1f 91       	pop	r17
   1741e:	0f 91       	pop	r16
   17420:	ff 90       	pop	r15
   17422:	ef 90       	pop	r14
   17424:	df 90       	pop	r13
   17426:	cf 90       	pop	r12
   17428:	bf 90       	pop	r11
   1742a:	af 90       	pop	r10
   1742c:	08 95       	ret

0001742e <PID::SetSampleTime(int)>:
_ZN3PID13SetSampleTimeEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:135

/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   1742e:	8f 92       	push	r8
   17430:	9f 92       	push	r9
   17432:	af 92       	push	r10
   17434:	bf 92       	push	r11
   17436:	cf 92       	push	r12
   17438:	df 92       	push	r13
   1743a:	ef 92       	push	r14
   1743c:	ff 92       	push	r15
   1743e:	cf 93       	push	r28
   17440:	df 93       	push	r29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
   if (NewSampleTime > 0)
   17442:	16 16       	cp	r1, r22
   17444:	17 06       	cpc	r1, r23
   17446:	ac f5       	brge	.+106    	; 0x174b2 <PID::SetSampleTime(int)+0x84>
   17448:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
   1744a:	6b 01       	movw	r12, r22
   1744c:	77 0f       	add	r23, r23
   1744e:	ee 08       	sbc	r14, r14
   17450:	ff 08       	sbc	r15, r15
   17452:	c7 01       	movw	r24, r14
   17454:	b6 01       	movw	r22, r12
   17456:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <__floatsisf>
   1745a:	4b 01       	movw	r8, r22
   1745c:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
   1745e:	6e a5       	ldd	r22, Y+46	; 0x2e
   17460:	7f a5       	ldd	r23, Y+47	; 0x2f
   17462:	88 a9       	ldd	r24, Y+48	; 0x30
   17464:	99 a9       	ldd	r25, Y+49	; 0x31
   17466:	0e 94 19 d7 	call	0x1ae32	; 0x1ae32 <__floatunsisf>
   1746a:	9b 01       	movw	r18, r22
   1746c:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
   1746e:	c5 01       	movw	r24, r10
   17470:	b4 01       	movw	r22, r8
   17472:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
   17476:	4b 01       	movw	r8, r22
   17478:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
   1747a:	ac 01       	movw	r20, r24
   1747c:	9b 01       	movw	r18, r22
   1747e:	68 89       	ldd	r22, Y+16	; 0x10
   17480:	79 89       	ldd	r23, Y+17	; 0x11
   17482:	8a 89       	ldd	r24, Y+18	; 0x12
   17484:	9b 89       	ldd	r25, Y+19	; 0x13
   17486:	0e 94 d0 d7 	call	0x1afa0	; 0x1afa0 <__mulsf3>
   1748a:	68 8b       	std	Y+16, r22	; 0x10
   1748c:	79 8b       	std	Y+17, r23	; 0x11
   1748e:	8a 8b       	std	Y+18, r24	; 0x12
   17490:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
   17492:	a5 01       	movw	r20, r10
   17494:	94 01       	movw	r18, r8
   17496:	6c 89       	ldd	r22, Y+20	; 0x14
   17498:	7d 89       	ldd	r23, Y+21	; 0x15
   1749a:	8e 89       	ldd	r24, Y+22	; 0x16
   1749c:	9f 89       	ldd	r25, Y+23	; 0x17
   1749e:	0e 94 71 d6 	call	0x1ace2	; 0x1ace2 <__divsf3>
   174a2:	6c 8b       	std	Y+20, r22	; 0x14
   174a4:	7d 8b       	std	Y+21, r23	; 0x15
   174a6:	8e 8b       	std	Y+22, r24	; 0x16
   174a8:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
   174aa:	ce a6       	std	Y+46, r12	; 0x2e
   174ac:	df a6       	std	Y+47, r13	; 0x2f
   174ae:	e8 aa       	std	Y+48, r14	; 0x30
   174b0:	f9 aa       	std	Y+49, r15	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:144
   }
}
   174b2:	df 91       	pop	r29
   174b4:	cf 91       	pop	r28
   174b6:	ff 90       	pop	r15
   174b8:	ef 90       	pop	r14
   174ba:	df 90       	pop	r13
   174bc:	cf 90       	pop	r12
   174be:	bf 90       	pop	r11
   174c0:	af 90       	pop	r10
   174c2:	9f 90       	pop	r9
   174c4:	8f 90       	pop	r8
   174c6:	08 95       	ret

000174c8 <PID::SetOutputLimits(double, double)>:
_ZN3PID15SetOutputLimitsEdd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:155
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   174c8:	2f 92       	push	r2
   174ca:	3f 92       	push	r3
   174cc:	4f 92       	push	r4
   174ce:	5f 92       	push	r5
   174d0:	6f 92       	push	r6
   174d2:	7f 92       	push	r7
   174d4:	8f 92       	push	r8
   174d6:	9f 92       	push	r9
   174d8:	af 92       	push	r10
   174da:	bf 92       	push	r11
   174dc:	cf 92       	push	r12
   174de:	df 92       	push	r13
   174e0:	ef 92       	push	r14
   174e2:	ff 92       	push	r15
   174e4:	0f 93       	push	r16
   174e6:	1f 93       	push	r17
   174e8:	cf 93       	push	r28
   174ea:	df 93       	push	r29
   174ec:	ec 01       	movw	r28, r24
   174ee:	6a 01       	movw	r12, r20
   174f0:	7b 01       	movw	r14, r22
   174f2:	48 01       	movw	r8, r16
   174f4:	59 01       	movw	r10, r18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:156
   if(Min >= Max) return;
   174f6:	a9 01       	movw	r20, r18
   174f8:	98 01       	movw	r18, r16
   174fa:	cb 01       	movw	r24, r22
   174fc:	b6 01       	movw	r22, r12
   174fe:	0e 94 cb d7 	call	0x1af96	; 0x1af96 <__gesf2>
   17502:	87 ff       	sbrs	r24, 7
   17504:	4f c0       	rjmp	.+158    	; 0x175a4 <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
   outMin = Min;
   17506:	ca aa       	std	Y+50, r12	; 0x32
   17508:	db aa       	std	Y+51, r13	; 0x33
   1750a:	ec aa       	std	Y+52, r14	; 0x34
   1750c:	fd aa       	std	Y+53, r15	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   1750e:	8e aa       	std	Y+54, r8	; 0x36
   17510:	9f aa       	std	Y+55, r9	; 0x37
   17512:	a8 ae       	std	Y+56, r10	; 0x38
   17514:	b9 ae       	std	Y+57, r11	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:160

   if(inAuto)
   17516:	8a ad       	ldd	r24, Y+58	; 0x3a
   17518:	88 23       	and	r24, r24
   1751a:	09 f4       	brne	.+2      	; 0x1751e <PID::SetOutputLimits(double, double)+0x56>
   1751c:	43 c0       	rjmp	.+134    	; 0x175a4 <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   1751e:	2e 8c       	ldd	r2, Y+30	; 0x1e
   17520:	3f 8c       	ldd	r3, Y+31	; 0x1f
   17522:	f1 01       	movw	r30, r2
   17524:	40 80       	ld	r4, Z
   17526:	51 80       	ldd	r5, Z+1	; 0x01
   17528:	62 80       	ldd	r6, Z+2	; 0x02
   1752a:	73 80       	ldd	r7, Z+3	; 0x03
   1752c:	a3 01       	movw	r20, r6
   1752e:	92 01       	movw	r18, r4
   17530:	c5 01       	movw	r24, r10
   17532:	b8 01       	movw	r22, r16
   17534:	0e 94 6c d6 	call	0x1acd8	; 0x1acd8 <__cmpsf2>
   17538:	87 ff       	sbrs	r24, 7
   1753a:	1a c0       	rjmp	.+52     	; 0x17570 <PID::SetOutputLimits(double, double)+0xa8>
   1753c:	f1 01       	movw	r30, r2
   1753e:	80 82       	st	Z, r8
   17540:	91 82       	std	Z+1, r9	; 0x01
   17542:	a2 82       	std	Z+2, r10	; 0x02
   17544:	b3 82       	std	Z+3, r11	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
   17546:	8e a0       	ldd	r8, Y+38	; 0x26
   17548:	9f a0       	ldd	r9, Y+39	; 0x27
   1754a:	a8 a4       	ldd	r10, Y+40	; 0x28
   1754c:	b9 a4       	ldd	r11, Y+41	; 0x29
   1754e:	ce a8       	ldd	r12, Y+54	; 0x36
   17550:	df a8       	ldd	r13, Y+55	; 0x37
   17552:	e8 ac       	ldd	r14, Y+56	; 0x38
   17554:	f9 ac       	ldd	r15, Y+57	; 0x39
   17556:	a7 01       	movw	r20, r14
   17558:	96 01       	movw	r18, r12
   1755a:	c5 01       	movw	r24, r10
   1755c:	b4 01       	movw	r22, r8
   1755e:	0e 94 cb d7 	call	0x1af96	; 0x1af96 <__gesf2>
   17562:	18 16       	cp	r1, r24
   17564:	9c f4       	brge	.+38     	; 0x1758c <PID::SetOutputLimits(double, double)+0xc4>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
   17566:	ce a2       	std	Y+38, r12	; 0x26
   17568:	df a2       	std	Y+39, r13	; 0x27
   1756a:	e8 a6       	std	Y+40, r14	; 0x28
   1756c:	f9 a6       	std	Y+41, r15	; 0x29
   1756e:	1a c0       	rjmp	.+52     	; 0x175a4 <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
   17570:	a3 01       	movw	r20, r6
   17572:	92 01       	movw	r18, r4
   17574:	c7 01       	movw	r24, r14
   17576:	b6 01       	movw	r22, r12
   17578:	0e 94 cb d7 	call	0x1af96	; 0x1af96 <__gesf2>
   1757c:	18 16       	cp	r1, r24
   1757e:	1c f7       	brge	.-58     	; 0x17546 <PID::SetOutputLimits(double, double)+0x7e>
   17580:	f1 01       	movw	r30, r2
   17582:	c0 82       	st	Z, r12
   17584:	d1 82       	std	Z+1, r13	; 0x01
   17586:	e2 82       	std	Z+2, r14	; 0x02
   17588:	f3 82       	std	Z+3, r15	; 0x03
   1758a:	dd cf       	rjmp	.-70     	; 0x17546 <PID::SetOutputLimits(double, double)+0x7e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   1758c:	ca a8       	ldd	r12, Y+50	; 0x32
   1758e:	db a8       	ldd	r13, Y+51	; 0x33
   17590:	ec a8       	ldd	r14, Y+52	; 0x34
   17592:	fd a8       	ldd	r15, Y+53	; 0x35
   17594:	a7 01       	movw	r20, r14
   17596:	96 01       	movw	r18, r12
   17598:	c5 01       	movw	r24, r10
   1759a:	b4 01       	movw	r22, r8
   1759c:	0e 94 6c d6 	call	0x1acd8	; 0x1acd8 <__cmpsf2>
   175a0:	87 fd       	sbrc	r24, 7
   175a2:	e1 cf       	rjmp	.-62     	; 0x17566 <PID::SetOutputLimits(double, double)+0x9e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:168
   }
}
   175a4:	df 91       	pop	r29
   175a6:	cf 91       	pop	r28
   175a8:	1f 91       	pop	r17
   175aa:	0f 91       	pop	r16
   175ac:	ff 90       	pop	r15
   175ae:	ef 90       	pop	r14
   175b0:	df 90       	pop	r13
   175b2:	cf 90       	pop	r12
   175b4:	bf 90       	pop	r11
   175b6:	af 90       	pop	r10
   175b8:	9f 90       	pop	r9
   175ba:	8f 90       	pop	r8
   175bc:	7f 90       	pop	r7
   175be:	6f 90       	pop	r6
   175c0:	5f 90       	pop	r5
   175c2:	4f 90       	pop	r4
   175c4:	3f 90       	pop	r3
   175c6:	2f 90       	pop	r2
   175c8:	08 95       	ret

000175ca <PID::Initialize()>:
_ZN3PID10InitializeEv():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:190
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   175ca:	8f 92       	push	r8
   175cc:	9f 92       	push	r9
   175ce:	af 92       	push	r10
   175d0:	bf 92       	push	r11
   175d2:	cf 92       	push	r12
   175d4:	df 92       	push	r13
   175d6:	ef 92       	push	r14
   175d8:	ff 92       	push	r15
   175da:	cf 93       	push	r28
   175dc:	df 93       	push	r29
   175de:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
   outputSum = *myOutput;
   175e0:	ee 8d       	ldd	r30, Y+30	; 0x1e
   175e2:	ff 8d       	ldd	r31, Y+31	; 0x1f
   175e4:	c0 80       	ld	r12, Z
   175e6:	d1 80       	ldd	r13, Z+1	; 0x01
   175e8:	e2 80       	ldd	r14, Z+2	; 0x02
   175ea:	f3 80       	ldd	r15, Z+3	; 0x03
   175ec:	ce a2       	std	Y+38, r12	; 0x26
   175ee:	df a2       	std	Y+39, r13	; 0x27
   175f0:	e8 a6       	std	Y+40, r14	; 0x28
   175f2:	f9 a6       	std	Y+41, r15	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
   175f4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   175f6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   175f8:	80 81       	ld	r24, Z
   175fa:	91 81       	ldd	r25, Z+1	; 0x01
   175fc:	a2 81       	ldd	r26, Z+2	; 0x02
   175fe:	b3 81       	ldd	r27, Z+3	; 0x03
   17600:	8a a7       	std	Y+42, r24	; 0x2a
   17602:	9b a7       	std	Y+43, r25	; 0x2b
   17604:	ac a7       	std	Y+44, r26	; 0x2c
   17606:	bd a7       	std	Y+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
   17608:	8e a8       	ldd	r8, Y+54	; 0x36
   1760a:	9f a8       	ldd	r9, Y+55	; 0x37
   1760c:	a8 ac       	ldd	r10, Y+56	; 0x38
   1760e:	b9 ac       	ldd	r11, Y+57	; 0x39
   17610:	a5 01       	movw	r20, r10
   17612:	94 01       	movw	r18, r8
   17614:	c7 01       	movw	r24, r14
   17616:	b6 01       	movw	r22, r12
   17618:	0e 94 cb d7 	call	0x1af96	; 0x1af96 <__gesf2>
   1761c:	18 16       	cp	r1, r24
   1761e:	2c f4       	brge	.+10     	; 0x1762a <PID::Initialize()+0x60>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194 (discriminator 1)
   else if(outputSum < outMin) outputSum = outMin;
   17620:	8e a2       	std	Y+38, r8	; 0x26
   17622:	9f a2       	std	Y+39, r9	; 0x27
   17624:	a8 a6       	std	Y+40, r10	; 0x28
   17626:	b9 a6       	std	Y+41, r11	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:195 (discriminator 1)
}
   17628:	0c c0       	rjmp	.+24     	; 0x17642 <PID::Initialize()+0x78>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
   1762a:	8a a8       	ldd	r8, Y+50	; 0x32
   1762c:	9b a8       	ldd	r9, Y+51	; 0x33
   1762e:	ac a8       	ldd	r10, Y+52	; 0x34
   17630:	bd a8       	ldd	r11, Y+53	; 0x35
   17632:	a5 01       	movw	r20, r10
   17634:	94 01       	movw	r18, r8
   17636:	c7 01       	movw	r24, r14
   17638:	b6 01       	movw	r22, r12
   1763a:	0e 94 6c d6 	call	0x1acd8	; 0x1acd8 <__cmpsf2>
   1763e:	87 fd       	sbrc	r24, 7
   17640:	ef cf       	rjmp	.-34     	; 0x17620 <PID::Initialize()+0x56>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:195
}
   17642:	df 91       	pop	r29
   17644:	cf 91       	pop	r28
   17646:	ff 90       	pop	r15
   17648:	ef 90       	pop	r14
   1764a:	df 90       	pop	r13
   1764c:	cf 90       	pop	r12
   1764e:	bf 90       	pop	r11
   17650:	af 90       	pop	r10
   17652:	9f 90       	pop	r9
   17654:	8f 90       	pop	r8
   17656:	08 95       	ret

00017658 <PID::SetMode(int)>:
_ZN3PID7SetModeEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:176
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
   17658:	1f 93       	push	r17
   1765a:	cf 93       	push	r28
   1765c:	df 93       	push	r29
   1765e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:177
    bool newAuto = (Mode == AUTOMATIC);
   17660:	11 e0       	ldi	r17, 0x01	; 1
   17662:	61 30       	cpi	r22, 0x01	; 1
   17664:	71 05       	cpc	r23, r1
   17666:	09 f0       	breq	.+2      	; 0x1766a <PID::SetMode(int)+0x12>
   17668:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
    if(newAuto && !inAuto)
   1766a:	61 30       	cpi	r22, 0x01	; 1
   1766c:	71 05       	cpc	r23, r1
   1766e:	31 f4       	brne	.+12     	; 0x1767c <PID::SetMode(int)+0x24>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178 (discriminator 1)
   17670:	8a ad       	ldd	r24, Y+58	; 0x3a
   17672:	81 11       	cpse	r24, r1
   17674:	03 c0       	rjmp	.+6      	; 0x1767c <PID::SetMode(int)+0x24>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:180
    {  /*we just went from manual to auto*/
        PID::Initialize();
   17676:	ce 01       	movw	r24, r28
   17678:	0e 94 e5 ba 	call	0x175ca	; 0x175ca <PID::Initialize()>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    }
    inAuto = newAuto;
   1767c:	1a af       	std	Y+58, r17	; 0x3a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:183
}
   1767e:	df 91       	pop	r29
   17680:	cf 91       	pop	r28
   17682:	1f 91       	pop	r17
   17684:	08 95       	ret

00017686 <PID::SetControllerDirection(int)>:
_ZN3PID22SetControllerDirectionEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:204
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
   17686:	0f 93       	push	r16
   17688:	1f 93       	push	r17
   1768a:	cf 93       	push	r28
   1768c:	df 93       	push	r29
   1768e:	ec 01       	movw	r28, r24
   17690:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205
   if(inAuto && Direction !=controllerDirection)
   17692:	8a ad       	ldd	r24, Y+58	; 0x3a
   17694:	88 23       	and	r24, r24
   17696:	61 f1       	breq	.+88     	; 0x176f0 <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205 (discriminator 1)
   17698:	88 8d       	ldd	r24, Y+24	; 0x18
   1769a:	99 8d       	ldd	r25, Y+25	; 0x19
   1769c:	86 17       	cp	r24, r22
   1769e:	97 07       	cpc	r25, r23
   176a0:	39 f1       	breq	.+78     	; 0x176f0 <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:207
   {
	    kp = (0 - kp);
   176a2:	2c 85       	ldd	r18, Y+12	; 0x0c
   176a4:	3d 85       	ldd	r19, Y+13	; 0x0d
   176a6:	4e 85       	ldd	r20, Y+14	; 0x0e
   176a8:	5f 85       	ldd	r21, Y+15	; 0x0f
   176aa:	60 e0       	ldi	r22, 0x00	; 0
   176ac:	70 e0       	ldi	r23, 0x00	; 0
   176ae:	cb 01       	movw	r24, r22
   176b0:	0e 94 ff d5 	call	0x1abfe	; 0x1abfe <__subsf3>
   176b4:	6c 87       	std	Y+12, r22	; 0x0c
   176b6:	7d 87       	std	Y+13, r23	; 0x0d
   176b8:	8e 87       	std	Y+14, r24	; 0x0e
   176ba:	9f 87       	std	Y+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:208
      ki = (0 - ki);
   176bc:	28 89       	ldd	r18, Y+16	; 0x10
   176be:	39 89       	ldd	r19, Y+17	; 0x11
   176c0:	4a 89       	ldd	r20, Y+18	; 0x12
   176c2:	5b 89       	ldd	r21, Y+19	; 0x13
   176c4:	60 e0       	ldi	r22, 0x00	; 0
   176c6:	70 e0       	ldi	r23, 0x00	; 0
   176c8:	cb 01       	movw	r24, r22
   176ca:	0e 94 ff d5 	call	0x1abfe	; 0x1abfe <__subsf3>
   176ce:	68 8b       	std	Y+16, r22	; 0x10
   176d0:	79 8b       	std	Y+17, r23	; 0x11
   176d2:	8a 8b       	std	Y+18, r24	; 0x12
   176d4:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:209
      kd = (0 - kd);
   176d6:	2c 89       	ldd	r18, Y+20	; 0x14
   176d8:	3d 89       	ldd	r19, Y+21	; 0x15
   176da:	4e 89       	ldd	r20, Y+22	; 0x16
   176dc:	5f 89       	ldd	r21, Y+23	; 0x17
   176de:	60 e0       	ldi	r22, 0x00	; 0
   176e0:	70 e0       	ldi	r23, 0x00	; 0
   176e2:	cb 01       	movw	r24, r22
   176e4:	0e 94 ff d5 	call	0x1abfe	; 0x1abfe <__subsf3>
   176e8:	6c 8b       	std	Y+20, r22	; 0x14
   176ea:	7d 8b       	std	Y+21, r23	; 0x15
   176ec:	8e 8b       	std	Y+22, r24	; 0x16
   176ee:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   }
   controllerDirection = Direction;
   176f0:	19 8f       	std	Y+25, r17	; 0x19
   176f2:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:212
}
   176f4:	df 91       	pop	r29
   176f6:	cf 91       	pop	r28
   176f8:	1f 91       	pop	r17
   176fa:	0f 91       	pop	r16
   176fc:	08 95       	ret

000176fe <PID::PID(double*, double*, double*, double, double, double, int, int)>:
_ZN3PIDC2EPdS0_S0_dddii():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:20

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   176fe:	4f 92       	push	r4
   17700:	5f 92       	push	r5
   17702:	6f 92       	push	r6
   17704:	7f 92       	push	r7
   17706:	8f 92       	push	r8
   17708:	9f 92       	push	r9
   1770a:	af 92       	push	r10
   1770c:	bf 92       	push	r11
   1770e:	cf 92       	push	r12
   17710:	df 92       	push	r13
   17712:	ef 92       	push	r14
   17714:	ff 92       	push	r15
   17716:	0f 93       	push	r16
   17718:	1f 93       	push	r17
   1771a:	cf 93       	push	r28
   1771c:	df 93       	push	r29
   1771e:	00 d0       	rcall	.+0      	; 0x17720 <PID::PID(double*, double*, double*, double, double, double, int, int)+0x22>
   17720:	1f 92       	push	r1
   17722:	cd b7       	in	r28, 0x3d	; 61
   17724:	de b7       	in	r29, 0x3e	; 62
   17726:	4c 01       	movw	r8, r24
   17728:	27 01       	movw	r4, r14
   1772a:	38 01       	movw	r6, r16
   1772c:	a9 82       	std	Y+1, r10	; 0x01
   1772e:	ba 82       	std	Y+2, r11	; 0x02
   17730:	cb 82       	std	Y+3, r12	; 0x03
   17732:	dc 82       	std	Y+4, r13	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
   17734:	fc 01       	movw	r30, r24
   17736:	57 8f       	std	Z+31, r21	; 0x1f
   17738:	46 8f       	std	Z+30, r20	; 0x1e
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
   1773a:	75 8f       	std	Z+29, r23	; 0x1d
   1773c:	64 8f       	std	Z+28, r22	; 0x1c
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
   1773e:	31 a3       	std	Z+33, r19	; 0x21
   17740:	20 a3       	std	Z+32, r18	; 0x20
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
   17742:	12 ae       	std	Z+58, r1	; 0x3a
_ZN3PID15SetOutputLimitsEdd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   17744:	12 aa       	std	Z+50, r1	; 0x32
   17746:	13 aa       	std	Z+51, r1	; 0x33
   17748:	14 aa       	std	Z+52, r1	; 0x34
   1774a:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   1774c:	80 e0       	ldi	r24, 0x00	; 0
   1774e:	90 e0       	ldi	r25, 0x00	; 0
   17750:	af e7       	ldi	r26, 0x7F	; 127
   17752:	b3 e4       	ldi	r27, 0x43	; 67
   17754:	86 ab       	std	Z+54, r24	; 0x36
   17756:	97 ab       	std	Z+55, r25	; 0x37
   17758:	a0 af       	std	Z+56, r26	; 0x38
   1775a:	b1 af       	std	Z+57, r27	; 0x39
_ZN3PIDC2EPdS0_S0_dddii():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   1775c:	84 e6       	ldi	r24, 0x64	; 100
   1775e:	90 e0       	ldi	r25, 0x00	; 0
   17760:	a0 e0       	ldi	r26, 0x00	; 0
   17762:	b0 e0       	ldi	r27, 0x00	; 0
   17764:	86 a7       	std	Z+46, r24	; 0x2e
   17766:	97 a7       	std	Z+47, r25	; 0x2f
   17768:	a0 ab       	std	Z+48, r26	; 0x30
   1776a:	b1 ab       	std	Z+49, r27	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:33

    PID::SetControllerDirection(ControllerDirection);
   1776c:	6e 8d       	ldd	r22, Y+30	; 0x1e
   1776e:	7f 8d       	ldd	r23, Y+31	; 0x1f
   17770:	c4 01       	movw	r24, r8
   17772:	0e 94 43 bb 	call	0x17686	; 0x17686 <PID::SetControllerDirection(int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:34
    PID::SetTunings(Kp, Ki, Kd, POn);
   17776:	ac 8c       	ldd	r10, Y+28	; 0x1c
   17778:	bd 8c       	ldd	r11, Y+29	; 0x1d
   1777a:	c8 8c       	ldd	r12, Y+24	; 0x18
   1777c:	d9 8c       	ldd	r13, Y+25	; 0x19
   1777e:	ea 8c       	ldd	r14, Y+26	; 0x1a
   17780:	fb 8c       	ldd	r15, Y+27	; 0x1b
   17782:	09 81       	ldd	r16, Y+1	; 0x01
   17784:	1a 81       	ldd	r17, Y+2	; 0x02
   17786:	2b 81       	ldd	r18, Y+3	; 0x03
   17788:	3c 81       	ldd	r19, Y+4	; 0x04
   1778a:	b3 01       	movw	r22, r6
   1778c:	a2 01       	movw	r20, r4
   1778e:	c4 01       	movw	r24, r8
   17790:	0e 94 2c b9 	call	0x17258	; 0x17258 <PID::SetTunings(double, double, double, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36

    lastTime = (millis() / 1000) - SampleTime;
   17794:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   17798:	28 ee       	ldi	r18, 0xE8	; 232
   1779a:	33 e0       	ldi	r19, 0x03	; 3
   1779c:	40 e0       	ldi	r20, 0x00	; 0
   1779e:	50 e0       	ldi	r21, 0x00	; 0
   177a0:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
   177a4:	f4 01       	movw	r30, r8
   177a6:	86 a5       	ldd	r24, Z+46	; 0x2e
   177a8:	97 a5       	ldd	r25, Z+47	; 0x2f
   177aa:	a0 a9       	ldd	r26, Z+48	; 0x30
   177ac:	b1 a9       	ldd	r27, Z+49	; 0x31
   177ae:	28 1b       	sub	r18, r24
   177b0:	39 0b       	sbc	r19, r25
   177b2:	4a 0b       	sbc	r20, r26
   177b4:	5b 0b       	sbc	r21, r27
   177b6:	22 a3       	std	Z+34, r18	; 0x22
   177b8:	33 a3       	std	Z+35, r19	; 0x23
   177ba:	44 a3       	std	Z+36, r20	; 0x24
   177bc:	55 a3       	std	Z+37, r21	; 0x25
/home/saric/Arduino/libraries/PID/PID_v1.cpp:37
}
   177be:	0f 90       	pop	r0
   177c0:	0f 90       	pop	r0
   177c2:	0f 90       	pop	r0
   177c4:	0f 90       	pop	r0
   177c6:	df 91       	pop	r29
   177c8:	cf 91       	pop	r28
   177ca:	1f 91       	pop	r17
   177cc:	0f 91       	pop	r16
   177ce:	ff 90       	pop	r15
   177d0:	ef 90       	pop	r14
   177d2:	df 90       	pop	r13
   177d4:	cf 90       	pop	r12
   177d6:	bf 90       	pop	r11
   177d8:	af 90       	pop	r10
   177da:	9f 90       	pop	r9
   177dc:	8f 90       	pop	r8
   177de:	7f 90       	pop	r7
   177e0:	6f 90       	pop	r6
   177e2:	5f 90       	pop	r5
   177e4:	4f 90       	pop	r4
   177e6:	08 95       	ret

000177e8 <PID::PID(double*, double*, double*, double, double, double, int)>:
_ZN3PIDC2EPdS0_S0_dddi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:44
/*Constructor (...)*********************************************************
 *    To allow backwards compatability for v1.1, or for people that just want
 *    to use Proportional on Error without explicitly saying so
 ***************************************************************************/

PID::PID(double* Input, double* Output, double* Setpoint,
   177e8:	8f 92       	push	r8
   177ea:	9f 92       	push	r9
   177ec:	af 92       	push	r10
   177ee:	bf 92       	push	r11
   177f0:	cf 92       	push	r12
   177f2:	df 92       	push	r13
   177f4:	ef 92       	push	r14
   177f6:	ff 92       	push	r15
   177f8:	0f 93       	push	r16
   177fa:	1f 93       	push	r17
   177fc:	cf 93       	push	r28
   177fe:	df 93       	push	r29
   17800:	cd b7       	in	r28, 0x3d	; 61
   17802:	de b7       	in	r29, 0x3e	; 62
   17804:	e8 89       	ldd	r30, Y+16	; 0x10
   17806:	f9 89       	ldd	r31, Y+17	; 0x11
   17808:	aa 89       	ldd	r26, Y+18	; 0x12
   1780a:	bb 89       	ldd	r27, Y+19	; 0x13
   1780c:	9c 88       	ldd	r9, Y+20	; 0x14
   1780e:	8d 88       	ldd	r8, Y+21	; 0x15
/home/saric/Arduino/libraries/PID/PID_v1.cpp:46
        double Kp, double Ki, double Kd, int ControllerDirection)
    :PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, P_ON_E, ControllerDirection)
   17810:	8f 92       	push	r8
   17812:	9f 92       	push	r9
   17814:	1f 92       	push	r1
   17816:	99 24       	eor	r9, r9
   17818:	93 94       	inc	r9
   1781a:	9f 92       	push	r9
   1781c:	bf 93       	push	r27
   1781e:	af 93       	push	r26
   17820:	ff 93       	push	r31
   17822:	ef 93       	push	r30
   17824:	0e 94 7f bb 	call	0x176fe	; 0x176fe <PID::PID(double*, double*, double*, double, double, double, int, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:49
{

}
   17828:	0f b6       	in	r0, 0x3f	; 63
   1782a:	f8 94       	cli
   1782c:	de bf       	out	0x3e, r29	; 62
   1782e:	0f be       	out	0x3f, r0	; 63
   17830:	cd bf       	out	0x3d, r28	; 61
   17832:	df 91       	pop	r29
   17834:	cf 91       	pop	r28
   17836:	1f 91       	pop	r17
   17838:	0f 91       	pop	r16
   1783a:	ff 90       	pop	r15
   1783c:	ef 90       	pop	r14
   1783e:	df 90       	pop	r13
   17840:	cf 90       	pop	r12
   17842:	bf 90       	pop	r11
   17844:	af 90       	pop	r10
   17846:	9f 90       	pop	r9
   17848:	8f 90       	pop	r8
   1784a:	08 95       	ret

0001784c <PubSubClient::PubSubClient(Client&)>:
_ZN12PubSubClientC2ER6Client():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:586
}

PubSubClient& PubSubClient::setStream(Stream& stream){
    this->stream = &stream;
    return *this;
}
   1784c:	0f 93       	push	r16
   1784e:	1f 93       	push	r17
   17850:	cf 93       	push	r28
   17852:	df 93       	push	r29
   17854:	ec 01       	movw	r28, r24
   17856:	8b 01       	movw	r16, r22
   17858:	81 5f       	subi	r24, 0xF1	; 241
   1785a:	9d 4f       	sbci	r25, 0xFD	; 253
   1785c:	0e 94 94 d4 	call	0x1a928	; 0x1a928 <IPAddress::IPAddress()>
   17860:	fe 01       	movw	r30, r28
   17862:	e5 5e       	subi	r30, 0xE5	; 229
   17864:	fd 4f       	sbci	r31, 0xFD	; 253
   17866:	8f ef       	ldi	r24, 0xFF	; 255
   17868:	9f ef       	ldi	r25, 0xFF	; 255
   1786a:	91 83       	std	Z+1, r25	; 0x01
   1786c:	80 83       	st	Z, r24
_ZN12PubSubClient9setClientER6Client():
   1786e:	19 83       	std	Y+1, r17	; 0x01
   17870:	08 83       	st	Y, r16
_ZN12PubSubClientC2ER6Client():
   17872:	c7 5e       	subi	r28, 0xE7	; 231
   17874:	dd 4f       	sbci	r29, 0xFD	; 253
   17876:	19 82       	std	Y+1, r1	; 0x01
   17878:	18 82       	st	Y, r1
   1787a:	df 91       	pop	r29
   1787c:	cf 91       	pop	r28
   1787e:	1f 91       	pop	r17
   17880:	0f 91       	pop	r16
   17882:	08 95       	ret

00017884 <PubSubClient::readByte(unsigned char*)>:
_ZN12PubSubClient8readByteEPh():
   17884:	cf 92       	push	r12
   17886:	df 92       	push	r13
   17888:	ef 92       	push	r14
   1788a:	ff 92       	push	r15
   1788c:	0f 93       	push	r16
   1788e:	1f 93       	push	r17
   17890:	cf 93       	push	r28
   17892:	df 93       	push	r29
   17894:	ec 01       	movw	r28, r24
   17896:	8b 01       	movw	r16, r22
   17898:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   1789c:	6b 01       	movw	r12, r22
   1789e:	7c 01       	movw	r14, r24
   178a0:	88 81       	ld	r24, Y
   178a2:	99 81       	ldd	r25, Y+1	; 0x01
   178a4:	dc 01       	movw	r26, r24
   178a6:	ed 91       	ld	r30, X+
   178a8:	fc 91       	ld	r31, X
   178aa:	00 84       	ldd	r0, Z+8	; 0x08
   178ac:	f1 85       	ldd	r31, Z+9	; 0x09
   178ae:	e0 2d       	mov	r30, r0
   178b0:	19 95       	eicall
   178b2:	89 2b       	or	r24, r25
   178b4:	69 f4       	brne	.+26     	; 0x178d0 <PubSubClient::readByte(unsigned char*)+0x4c>
   178b6:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   178ba:	6c 19       	sub	r22, r12
   178bc:	7d 09       	sbc	r23, r13
   178be:	8e 09       	sbc	r24, r14
   178c0:	9f 09       	sbc	r25, r15
   178c2:	62 33       	cpi	r22, 0x32	; 50
   178c4:	71 05       	cpc	r23, r1
   178c6:	81 05       	cpc	r24, r1
   178c8:	91 05       	cpc	r25, r1
   178ca:	50 f3       	brcs	.-44     	; 0x178a0 <PubSubClient::readByte(unsigned char*)+0x1c>
   178cc:	80 e0       	ldi	r24, 0x00	; 0
   178ce:	0c c0       	rjmp	.+24     	; 0x178e8 <PubSubClient::readByte(unsigned char*)+0x64>
   178d0:	88 81       	ld	r24, Y
   178d2:	99 81       	ldd	r25, Y+1	; 0x01
   178d4:	dc 01       	movw	r26, r24
   178d6:	ed 91       	ld	r30, X+
   178d8:	fc 91       	ld	r31, X
   178da:	02 84       	ldd	r0, Z+10	; 0x0a
   178dc:	f3 85       	ldd	r31, Z+11	; 0x0b
   178de:	e0 2d       	mov	r30, r0
   178e0:	19 95       	eicall
   178e2:	f8 01       	movw	r30, r16
   178e4:	80 83       	st	Z, r24
   178e6:	81 e0       	ldi	r24, 0x01	; 1
   178e8:	df 91       	pop	r29
   178ea:	cf 91       	pop	r28
   178ec:	1f 91       	pop	r17
   178ee:	0f 91       	pop	r16
   178f0:	ff 90       	pop	r15
   178f2:	ef 90       	pop	r14
   178f4:	df 90       	pop	r13
   178f6:	cf 90       	pop	r12
   178f8:	08 95       	ret

000178fa <PubSubClient::readByte(unsigned char*, unsigned int*)>:
_ZN12PubSubClient8readByteEPhPj():
   178fa:	0f 93       	push	r16
   178fc:	1f 93       	push	r17
   178fe:	cf 93       	push	r28
   17900:	df 93       	push	r29
   17902:	8a 01       	movw	r16, r20
   17904:	fa 01       	movw	r30, r20
   17906:	c0 81       	ld	r28, Z
   17908:	d1 81       	ldd	r29, Z+1	; 0x01
   1790a:	6c 0f       	add	r22, r28
   1790c:	7d 1f       	adc	r23, r29
   1790e:	0e 94 42 bc 	call	0x17884	; 0x17884 <PubSubClient::readByte(unsigned char*)>
   17912:	88 23       	and	r24, r24
   17914:	21 f0       	breq	.+8      	; 0x1791e <PubSubClient::readByte(unsigned char*, unsigned int*)+0x24>
   17916:	21 96       	adiw	r28, 0x01	; 1
   17918:	f8 01       	movw	r30, r16
   1791a:	d1 83       	std	Z+1, r29	; 0x01
   1791c:	c0 83       	st	Z, r28
   1791e:	df 91       	pop	r29
   17920:	cf 91       	pop	r28
   17922:	1f 91       	pop	r17
   17924:	0f 91       	pop	r16
   17926:	08 95       	ret

00017928 <PubSubClient::readPacket(unsigned char*)>:
_ZN12PubSubClient10readPacketEPh():
   17928:	4f 92       	push	r4
   1792a:	5f 92       	push	r5
   1792c:	6f 92       	push	r6
   1792e:	7f 92       	push	r7
   17930:	8f 92       	push	r8
   17932:	9f 92       	push	r9
   17934:	af 92       	push	r10
   17936:	bf 92       	push	r11
   17938:	cf 92       	push	r12
   1793a:	df 92       	push	r13
   1793c:	ef 92       	push	r14
   1793e:	ff 92       	push	r15
   17940:	0f 93       	push	r16
   17942:	1f 93       	push	r17
   17944:	cf 93       	push	r28
   17946:	df 93       	push	r29
   17948:	00 d0       	rcall	.+0      	; 0x1794a <PubSubClient::readPacket(unsigned char*)+0x22>
   1794a:	1f 92       	push	r1
   1794c:	cd b7       	in	r28, 0x3d	; 61
   1794e:	de b7       	in	r29, 0x3e	; 62
   17950:	8c 01       	movw	r16, r24
   17952:	4b 01       	movw	r8, r22
   17954:	1a 82       	std	Y+2, r1	; 0x02
   17956:	19 82       	std	Y+1, r1	; 0x01
   17958:	7c 01       	movw	r14, r24
   1795a:	22 e0       	ldi	r18, 0x02	; 2
   1795c:	e2 0e       	add	r14, r18
   1795e:	f1 1c       	adc	r15, r1
   17960:	ae 01       	movw	r20, r28
   17962:	4f 5f       	subi	r20, 0xFF	; 255
   17964:	5f 4f       	sbci	r21, 0xFF	; 255
   17966:	b7 01       	movw	r22, r14
   17968:	0e 94 7d bc 	call	0x178fa	; 0x178fa <PubSubClient::readByte(unsigned char*, unsigned int*)>
   1796c:	81 11       	cpse	r24, r1
   1796e:	17 c0       	rjmp	.+46     	; 0x1799e <PubSubClient::readPacket(unsigned char*)+0x76>
   17970:	90 e0       	ldi	r25, 0x00	; 0
   17972:	80 e0       	ldi	r24, 0x00	; 0
   17974:	0f 90       	pop	r0
   17976:	0f 90       	pop	r0
   17978:	0f 90       	pop	r0
   1797a:	0f 90       	pop	r0
   1797c:	df 91       	pop	r29
   1797e:	cf 91       	pop	r28
   17980:	1f 91       	pop	r17
   17982:	0f 91       	pop	r16
   17984:	ff 90       	pop	r15
   17986:	ef 90       	pop	r14
   17988:	df 90       	pop	r13
   1798a:	cf 90       	pop	r12
   1798c:	bf 90       	pop	r11
   1798e:	af 90       	pop	r10
   17990:	9f 90       	pop	r9
   17992:	8f 90       	pop	r8
   17994:	7f 90       	pop	r7
   17996:	6f 90       	pop	r6
   17998:	5f 90       	pop	r5
   1799a:	4f 90       	pop	r4
   1799c:	08 95       	ret
   1799e:	d8 01       	movw	r26, r16
   179a0:	12 96       	adiw	r26, 0x02	; 2
   179a2:	dc 90       	ld	r13, X
   179a4:	1b 82       	std	Y+3, r1	; 0x03
   179a6:	b1 2c       	mov	r11, r1
   179a8:	a1 2c       	mov	r10, r1
   179aa:	41 2c       	mov	r4, r1
   179ac:	51 2c       	mov	r5, r1
   179ae:	32 01       	movw	r6, r4
   179b0:	43 94       	inc	r4
   179b2:	be 01       	movw	r22, r28
   179b4:	6d 5f       	subi	r22, 0xFD	; 253
   179b6:	7f 4f       	sbci	r23, 0xFF	; 255
   179b8:	c8 01       	movw	r24, r16
   179ba:	0e 94 42 bc 	call	0x17884	; 0x17884 <PubSubClient::readByte(unsigned char*)>
   179be:	88 23       	and	r24, r24
   179c0:	b9 f2       	breq	.-82     	; 0x17970 <PubSubClient::readPacket(unsigned char*)+0x48>
   179c2:	29 81       	ldd	r18, Y+1	; 0x01
   179c4:	3a 81       	ldd	r19, Y+2	; 0x02
   179c6:	c9 01       	movw	r24, r18
   179c8:	01 96       	adiw	r24, 0x01	; 1
   179ca:	9a 83       	std	Y+2, r25	; 0x02
   179cc:	89 83       	std	Y+1, r24	; 0x01
   179ce:	4b 81       	ldd	r20, Y+3	; 0x03
   179d0:	20 0f       	add	r18, r16
   179d2:	31 1f       	adc	r19, r17
   179d4:	f9 01       	movw	r30, r18
   179d6:	42 83       	std	Z+2, r20	; 0x02
   179d8:	24 2f       	mov	r18, r20
   179da:	2f 77       	andi	r18, 0x7F	; 127
   179dc:	30 e0       	ldi	r19, 0x00	; 0
   179de:	24 9d       	mul	r18, r4
   179e0:	b0 01       	movw	r22, r0
   179e2:	25 9d       	mul	r18, r5
   179e4:	70 0d       	add	r23, r0
   179e6:	34 9d       	mul	r19, r4
   179e8:	70 0d       	add	r23, r0
   179ea:	11 24       	eor	r1, r1
   179ec:	a6 0e       	add	r10, r22
   179ee:	b7 1e       	adc	r11, r23
   179f0:	97 e0       	ldi	r25, 0x07	; 7
   179f2:	44 0c       	add	r4, r4
   179f4:	55 1c       	adc	r5, r5
   179f6:	66 1c       	adc	r6, r6
   179f8:	77 1c       	adc	r7, r7
   179fa:	9a 95       	dec	r25
   179fc:	d1 f7       	brne	.-12     	; 0x179f2 <PubSubClient::readPacket(unsigned char*)+0xca>
   179fe:	47 fd       	sbrc	r20, 7
   17a00:	d8 cf       	rjmp	.-80     	; 0x179b2 <PubSubClient::readPacket(unsigned char*)+0x8a>
   17a02:	fd 2d       	mov	r31, r13
   17a04:	f0 7f       	andi	r31, 0xF0	; 240
   17a06:	fc 83       	std	Y+4, r31	; 0x04
   17a08:	81 50       	subi	r24, 0x01	; 1
   17a0a:	d4 01       	movw	r26, r8
   17a0c:	8c 93       	st	X, r24
   17a0e:	80 e0       	ldi	r24, 0x00	; 0
   17a10:	d1 2c       	mov	r13, r1
   17a12:	c1 2c       	mov	r12, r1
   17a14:	f0 33       	cpi	r31, 0x30	; 48
   17a16:	41 f5       	brne	.+80     	; 0x17a68 <PubSubClient::readPacket(unsigned char*)+0x140>
   17a18:	ae 01       	movw	r20, r28
   17a1a:	4f 5f       	subi	r20, 0xFF	; 255
   17a1c:	5f 4f       	sbci	r21, 0xFF	; 255
   17a1e:	b7 01       	movw	r22, r14
   17a20:	c8 01       	movw	r24, r16
   17a22:	0e 94 7d bc 	call	0x178fa	; 0x178fa <PubSubClient::readByte(unsigned char*, unsigned int*)>
   17a26:	88 23       	and	r24, r24
   17a28:	09 f4       	brne	.+2      	; 0x17a2c <PubSubClient::readPacket(unsigned char*)+0x104>
   17a2a:	a2 cf       	rjmp	.-188    	; 0x17970 <PubSubClient::readPacket(unsigned char*)+0x48>
   17a2c:	ae 01       	movw	r20, r28
   17a2e:	4f 5f       	subi	r20, 0xFF	; 255
   17a30:	5f 4f       	sbci	r21, 0xFF	; 255
   17a32:	b7 01       	movw	r22, r14
   17a34:	c8 01       	movw	r24, r16
   17a36:	0e 94 7d bc 	call	0x178fa	; 0x178fa <PubSubClient::readByte(unsigned char*, unsigned int*)>
   17a3a:	88 23       	and	r24, r24
   17a3c:	09 f4       	brne	.+2      	; 0x17a40 <PubSubClient::readPacket(unsigned char*)+0x118>
   17a3e:	98 cf       	rjmp	.-208    	; 0x17970 <PubSubClient::readPacket(unsigned char*)+0x48>
   17a40:	d4 01       	movw	r26, r8
   17a42:	ec 91       	ld	r30, X
   17a44:	e0 0f       	add	r30, r16
   17a46:	f1 2f       	mov	r31, r17
   17a48:	f1 1d       	adc	r31, r1
   17a4a:	c3 80       	ldd	r12, Z+3	; 0x03
   17a4c:	d1 2c       	mov	r13, r1
   17a4e:	dc 2c       	mov	r13, r12
   17a50:	cc 24       	eor	r12, r12
   17a52:	84 81       	ldd	r24, Z+4	; 0x04
   17a54:	c8 0e       	add	r12, r24
   17a56:	d1 1c       	adc	r13, r1
   17a58:	f8 01       	movw	r30, r16
   17a5a:	82 81       	ldd	r24, Z+2	; 0x02
   17a5c:	81 ff       	sbrs	r24, 1
   17a5e:	03 c0       	rjmp	.+6      	; 0x17a66 <PubSubClient::readPacket(unsigned char*)+0x13e>
   17a60:	f2 e0       	ldi	r31, 0x02	; 2
   17a62:	cf 0e       	add	r12, r31
   17a64:	d1 1c       	adc	r13, r1
   17a66:	82 e0       	ldi	r24, 0x02	; 2
   17a68:	e8 2e       	mov	r14, r24
   17a6a:	f1 2c       	mov	r15, r1
   17a6c:	38 01       	movw	r6, r16
   17a6e:	27 ee       	ldi	r18, 0xE7	; 231
   17a70:	62 1a       	sub	r6, r18
   17a72:	2d ef       	ldi	r18, 0xFD	; 253
   17a74:	72 0a       	sbc	r7, r18
   17a76:	ea 14       	cp	r14, r10
   17a78:	fb 04       	cpc	r15, r11
   17a7a:	b0 f5       	brcc	.+108    	; 0x17ae8 <PubSubClient::readPacket(unsigned char*)+0x1c0>
   17a7c:	be 01       	movw	r22, r28
   17a7e:	6d 5f       	subi	r22, 0xFD	; 253
   17a80:	7f 4f       	sbci	r23, 0xFF	; 255
   17a82:	c8 01       	movw	r24, r16
   17a84:	0e 94 42 bc 	call	0x17884	; 0x17884 <PubSubClient::readByte(unsigned char*)>
   17a88:	88 23       	and	r24, r24
   17a8a:	09 f4       	brne	.+2      	; 0x17a8e <PubSubClient::readPacket(unsigned char*)+0x166>
   17a8c:	71 cf       	rjmp	.-286    	; 0x17970 <PubSubClient::readPacket(unsigned char*)+0x48>
   17a8e:	d3 01       	movw	r26, r6
   17a90:	8d 91       	ld	r24, X+
   17a92:	9c 91       	ld	r25, X
   17a94:	00 97       	sbiw	r24, 0x00	; 0
   17a96:	b1 f0       	breq	.+44     	; 0x17ac4 <PubSubClient::readPacket(unsigned char*)+0x19c>
   17a98:	bc 81       	ldd	r27, Y+4	; 0x04
   17a9a:	b0 33       	cpi	r27, 0x30	; 48
   17a9c:	99 f4       	brne	.+38     	; 0x17ac4 <PubSubClient::readPacket(unsigned char*)+0x19c>
   17a9e:	29 81       	ldd	r18, Y+1	; 0x01
   17aa0:	3a 81       	ldd	r19, Y+2	; 0x02
   17aa2:	22 50       	subi	r18, 0x02	; 2
   17aa4:	31 09       	sbc	r19, r1
   17aa6:	f4 01       	movw	r30, r8
   17aa8:	40 81       	ld	r20, Z
   17aaa:	24 1b       	sub	r18, r20
   17aac:	31 09       	sbc	r19, r1
   17aae:	c2 16       	cp	r12, r18
   17ab0:	d3 06       	cpc	r13, r19
   17ab2:	40 f4       	brcc	.+16     	; 0x17ac4 <PubSubClient::readPacket(unsigned char*)+0x19c>
   17ab4:	dc 01       	movw	r26, r24
   17ab6:	ed 91       	ld	r30, X+
   17ab8:	fc 91       	ld	r31, X
   17aba:	01 90       	ld	r0, Z+
   17abc:	f0 81       	ld	r31, Z
   17abe:	e0 2d       	mov	r30, r0
   17ac0:	6b 81       	ldd	r22, Y+3	; 0x03
   17ac2:	19 95       	eicall
   17ac4:	89 81       	ldd	r24, Y+1	; 0x01
   17ac6:	9a 81       	ldd	r25, Y+2	; 0x02
   17ac8:	81 15       	cp	r24, r1
   17aca:	b2 e0       	ldi	r27, 0x02	; 2
   17acc:	9b 07       	cpc	r25, r27
   17ace:	28 f4       	brcc	.+10     	; 0x17ada <PubSubClient::readPacket(unsigned char*)+0x1b2>
   17ad0:	2b 81       	ldd	r18, Y+3	; 0x03
   17ad2:	f8 01       	movw	r30, r16
   17ad4:	e8 0f       	add	r30, r24
   17ad6:	f9 1f       	adc	r31, r25
   17ad8:	22 83       	std	Z+2, r18	; 0x02
   17ada:	01 96       	adiw	r24, 0x01	; 1
   17adc:	9a 83       	std	Y+2, r25	; 0x02
   17ade:	89 83       	std	Y+1, r24	; 0x01
   17ae0:	ef ef       	ldi	r30, 0xFF	; 255
   17ae2:	ee 1a       	sub	r14, r30
   17ae4:	fe 0a       	sbc	r15, r30
   17ae6:	c7 cf       	rjmp	.-114    	; 0x17a76 <PubSubClient::readPacket(unsigned char*)+0x14e>
   17ae8:	f8 01       	movw	r30, r16
   17aea:	e7 5e       	subi	r30, 0xE7	; 231
   17aec:	fd 4f       	sbci	r31, 0xFD	; 253
   17aee:	80 81       	ld	r24, Z
   17af0:	91 81       	ldd	r25, Z+1	; 0x01
   17af2:	89 2b       	or	r24, r25
   17af4:	39 f4       	brne	.+14     	; 0x17b04 <PubSubClient::readPacket(unsigned char*)+0x1dc>
   17af6:	89 81       	ldd	r24, Y+1	; 0x01
   17af8:	9a 81       	ldd	r25, Y+2	; 0x02
   17afa:	81 30       	cpi	r24, 0x01	; 1
   17afc:	92 40       	sbci	r25, 0x02	; 2
   17afe:	10 f0       	brcs	.+4      	; 0x17b04 <PubSubClient::readPacket(unsigned char*)+0x1dc>
   17b00:	1a 82       	std	Y+2, r1	; 0x02
   17b02:	19 82       	std	Y+1, r1	; 0x01
   17b04:	89 81       	ldd	r24, Y+1	; 0x01
   17b06:	9a 81       	ldd	r25, Y+2	; 0x02
   17b08:	35 cf       	rjmp	.-406    	; 0x17974 <PubSubClient::readPacket(unsigned char*)+0x4c>

00017b0a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
   17b0a:	bf 92       	push	r11
   17b0c:	cf 92       	push	r12
   17b0e:	df 92       	push	r13
   17b10:	ef 92       	push	r14
   17b12:	ff 92       	push	r15
   17b14:	0f 93       	push	r16
   17b16:	1f 93       	push	r17
   17b18:	cf 93       	push	r28
   17b1a:	df 93       	push	r29
   17b1c:	00 d0       	rcall	.+0      	; 0x17b1e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
   17b1e:	1f 92       	push	r1
   17b20:	cd b7       	in	r28, 0x3d	; 61
   17b22:	de b7       	in	r29, 0x3e	; 62
   17b24:	7c 01       	movw	r14, r24
   17b26:	b6 2e       	mov	r11, r22
   17b28:	89 01       	movw	r16, r18
   17b2a:	c9 01       	movw	r24, r18
   17b2c:	30 e0       	ldi	r19, 0x00	; 0
   17b2e:	be 01       	movw	r22, r28
   17b30:	6f 5f       	subi	r22, 0xFF	; 255
   17b32:	7f 4f       	sbci	r23, 0xFF	; 255
   17b34:	6b 01       	movw	r12, r22
   17b36:	28 2f       	mov	r18, r24
   17b38:	2f 77       	andi	r18, 0x7F	; 127
   17b3a:	88 0f       	add	r24, r24
   17b3c:	89 2f       	mov	r24, r25
   17b3e:	88 1f       	adc	r24, r24
   17b40:	99 0b       	sbc	r25, r25
   17b42:	91 95       	neg	r25
   17b44:	00 97       	sbiw	r24, 0x00	; 0
   17b46:	09 f0       	breq	.+2      	; 0x17b4a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
   17b48:	20 68       	ori	r18, 0x80	; 128
   17b4a:	f6 01       	movw	r30, r12
   17b4c:	e3 0f       	add	r30, r19
   17b4e:	f1 1d       	adc	r31, r1
   17b50:	20 83       	st	Z, r18
   17b52:	3f 5f       	subi	r19, 0xFF	; 255
   17b54:	00 97       	sbiw	r24, 0x00	; 0
   17b56:	79 f7       	brne	.-34     	; 0x17b36 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
   17b58:	e3 2f       	mov	r30, r19
   17b5a:	f0 e0       	ldi	r31, 0x00	; 0
   17b5c:	ba 01       	movw	r22, r20
   17b5e:	6e 1b       	sub	r22, r30
   17b60:	7f 0b       	sbc	r23, r31
   17b62:	6c 5f       	subi	r22, 0xFC	; 252
   17b64:	7f 4f       	sbci	r23, 0xFF	; 255
   17b66:	db 01       	movw	r26, r22
   17b68:	bc 92       	st	X, r11
   17b6a:	4e 1b       	sub	r20, r30
   17b6c:	5f 0b       	sbc	r21, r31
   17b6e:	4b 5f       	subi	r20, 0xFB	; 251
   17b70:	5f 4f       	sbci	r21, 0xFF	; 255
   17b72:	c6 01       	movw	r24, r12
   17b74:	9c 01       	movw	r18, r24
   17b76:	2c 19       	sub	r18, r12
   17b78:	3d 09       	sbc	r19, r13
   17b7a:	2e 17       	cp	r18, r30
   17b7c:	3f 07       	cpc	r19, r31
   17b7e:	3c f4       	brge	.+14     	; 0x17b8e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
   17b80:	dc 01       	movw	r26, r24
   17b82:	2d 91       	ld	r18, X+
   17b84:	cd 01       	movw	r24, r26
   17b86:	da 01       	movw	r26, r20
   17b88:	2d 93       	st	X+, r18
   17b8a:	ad 01       	movw	r20, r26
   17b8c:	f3 cf       	rjmp	.-26     	; 0x17b74 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
   17b8e:	d7 01       	movw	r26, r14
   17b90:	8d 91       	ld	r24, X+
   17b92:	9c 91       	ld	r25, X
   17b94:	0f 5f       	subi	r16, 0xFF	; 255
   17b96:	1f 4f       	sbci	r17, 0xFF	; 255
   17b98:	0e 0f       	add	r16, r30
   17b9a:	1f 1f       	adc	r17, r31
   17b9c:	dc 01       	movw	r26, r24
   17b9e:	ed 91       	ld	r30, X+
   17ba0:	fc 91       	ld	r31, X
   17ba2:	02 80       	ldd	r0, Z+2	; 0x02
   17ba4:	f3 81       	ldd	r31, Z+3	; 0x03
   17ba6:	e0 2d       	mov	r30, r0
   17ba8:	a8 01       	movw	r20, r16
   17baa:	19 95       	eicall
   17bac:	6c 01       	movw	r12, r24
   17bae:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   17bb2:	f7 01       	movw	r30, r14
   17bb4:	ec 5f       	subi	r30, 0xFC	; 252
   17bb6:	fd 4f       	sbci	r31, 0xFD	; 253
   17bb8:	60 83       	st	Z, r22
   17bba:	71 83       	std	Z+1, r23	; 0x01
   17bbc:	82 83       	std	Z+2, r24	; 0x02
   17bbe:	93 83       	std	Z+3, r25	; 0x03
   17bc0:	81 e0       	ldi	r24, 0x01	; 1
   17bc2:	0c 15       	cp	r16, r12
   17bc4:	1d 05       	cpc	r17, r13
   17bc6:	09 f0       	breq	.+2      	; 0x17bca <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
   17bc8:	80 e0       	ldi	r24, 0x00	; 0
   17bca:	0f 90       	pop	r0
   17bcc:	0f 90       	pop	r0
   17bce:	0f 90       	pop	r0
   17bd0:	0f 90       	pop	r0
   17bd2:	df 91       	pop	r29
   17bd4:	cf 91       	pop	r28
   17bd6:	1f 91       	pop	r17
   17bd8:	0f 91       	pop	r16
   17bda:	ff 90       	pop	r15
   17bdc:	ef 90       	pop	r14
   17bde:	df 90       	pop	r13
   17be0:	cf 90       	pop	r12
   17be2:	bf 90       	pop	r11
   17be4:	08 95       	ret

00017be6 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>:
_ZN12PubSubClient11writeStringEPKcPhj():
   17be6:	cf 93       	push	r28
   17be8:	df 93       	push	r29
   17bea:	eb 01       	movw	r28, r22
   17bec:	f9 01       	movw	r30, r18
   17bee:	32 96       	adiw	r30, 0x02	; 2
   17bf0:	e4 0f       	add	r30, r20
   17bf2:	f5 1f       	adc	r31, r21
   17bf4:	db 01       	movw	r26, r22
   17bf6:	9d 01       	movw	r18, r26
   17bf8:	2c 1b       	sub	r18, r28
   17bfa:	3d 0b       	sbc	r19, r29
   17bfc:	cf 01       	movw	r24, r30
   17bfe:	84 1b       	sub	r24, r20
   17c00:	95 0b       	sbc	r25, r21
   17c02:	7d 91       	ld	r23, X+
   17c04:	77 23       	and	r23, r23
   17c06:	11 f0       	breq	.+4      	; 0x17c0c <PubSubClient::writeString(char const*, unsigned char*, unsigned int)+0x26>
   17c08:	71 93       	st	Z+, r23
   17c0a:	f5 cf       	rjmp	.-22     	; 0x17bf6 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)+0x10>
   17c0c:	bc 01       	movw	r22, r24
   17c0e:	62 1b       	sub	r22, r18
   17c10:	73 0b       	sbc	r23, r19
   17c12:	46 0f       	add	r20, r22
   17c14:	57 1f       	adc	r21, r23
   17c16:	fa 01       	movw	r30, r20
   17c18:	32 97       	sbiw	r30, 0x02	; 2
   17c1a:	30 83       	st	Z, r19
   17c1c:	41 50       	subi	r20, 0x01	; 1
   17c1e:	51 09       	sbc	r21, r1
   17c20:	fa 01       	movw	r30, r20
   17c22:	20 83       	st	Z, r18
   17c24:	df 91       	pop	r29
   17c26:	cf 91       	pop	r28
   17c28:	08 95       	ret

00017c2a <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
   17c2a:	cf 93       	push	r28
   17c2c:	df 93       	push	r29
   17c2e:	fc 01       	movw	r30, r24
   17c30:	a0 81       	ld	r26, Z
   17c32:	b1 81       	ldd	r27, Z+1	; 0x01
   17c34:	10 97       	sbiw	r26, 0x00	; 0
   17c36:	21 f4       	brne	.+8      	; 0x17c40 <PubSubClient::connected()+0x16>
   17c38:	80 e0       	ldi	r24, 0x00	; 0
   17c3a:	df 91       	pop	r29
   17c3c:	cf 91       	pop	r28
   17c3e:	08 95       	ret
   17c40:	ec 01       	movw	r28, r24
   17c42:	ed 91       	ld	r30, X+
   17c44:	fc 91       	ld	r31, X
   17c46:	11 97       	sbiw	r26, 0x01	; 1
   17c48:	06 88       	ldd	r0, Z+22	; 0x16
   17c4a:	f7 89       	ldd	r31, Z+23	; 0x17
   17c4c:	e0 2d       	mov	r30, r0
   17c4e:	cd 01       	movw	r24, r26
   17c50:	19 95       	eicall
   17c52:	81 11       	cpse	r24, r1
   17c54:	1e c0       	rjmp	.+60     	; 0x17c92 <PubSubClient::connected()+0x68>
   17c56:	fe 01       	movw	r30, r28
   17c58:	e5 5e       	subi	r30, 0xE5	; 229
   17c5a:	fd 4f       	sbci	r31, 0xFD	; 253
   17c5c:	80 81       	ld	r24, Z
   17c5e:	91 81       	ldd	r25, Z+1	; 0x01
   17c60:	89 2b       	or	r24, r25
   17c62:	51 f7       	brne	.-44     	; 0x17c38 <PubSubClient::connected()+0xe>
   17c64:	8d ef       	ldi	r24, 0xFD	; 253
   17c66:	9f ef       	ldi	r25, 0xFF	; 255
   17c68:	91 83       	std	Z+1, r25	; 0x01
   17c6a:	80 83       	st	Z, r24
   17c6c:	88 81       	ld	r24, Y
   17c6e:	99 81       	ldd	r25, Y+1	; 0x01
   17c70:	dc 01       	movw	r26, r24
   17c72:	ed 91       	ld	r30, X+
   17c74:	fc 91       	ld	r31, X
   17c76:	06 80       	ldd	r0, Z+6	; 0x06
   17c78:	f7 81       	ldd	r31, Z+7	; 0x07
   17c7a:	e0 2d       	mov	r30, r0
   17c7c:	19 95       	eicall
   17c7e:	88 81       	ld	r24, Y
   17c80:	99 81       	ldd	r25, Y+1	; 0x01
   17c82:	dc 01       	movw	r26, r24
   17c84:	ed 91       	ld	r30, X+
   17c86:	fc 91       	ld	r31, X
   17c88:	04 88       	ldd	r0, Z+20	; 0x14
   17c8a:	f5 89       	ldd	r31, Z+21	; 0x15
   17c8c:	e0 2d       	mov	r30, r0
   17c8e:	19 95       	eicall
   17c90:	d3 cf       	rjmp	.-90     	; 0x17c38 <PubSubClient::connected()+0xe>
   17c92:	81 e0       	ldi	r24, 0x01	; 1
   17c94:	d2 cf       	rjmp	.-92     	; 0x17c3a <PubSubClient::connected()+0x10>

00017c96 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)>:
_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_():
   17c96:	2f 92       	push	r2
   17c98:	3f 92       	push	r3
   17c9a:	4f 92       	push	r4
   17c9c:	5f 92       	push	r5
   17c9e:	6f 92       	push	r6
   17ca0:	7f 92       	push	r7
   17ca2:	8f 92       	push	r8
   17ca4:	9f 92       	push	r9
   17ca6:	af 92       	push	r10
   17ca8:	bf 92       	push	r11
   17caa:	cf 92       	push	r12
   17cac:	df 92       	push	r13
   17cae:	ef 92       	push	r14
   17cb0:	ff 92       	push	r15
   17cb2:	0f 93       	push	r16
   17cb4:	1f 93       	push	r17
   17cb6:	cf 93       	push	r28
   17cb8:	df 93       	push	r29
   17cba:	cd b7       	in	r28, 0x3d	; 61
   17cbc:	de b7       	in	r29, 0x3e	; 62
   17cbe:	2e 97       	sbiw	r28, 0x0e	; 14
   17cc0:	0f b6       	in	r0, 0x3f	; 63
   17cc2:	f8 94       	cli
   17cc4:	de bf       	out	0x3e, r29	; 62
   17cc6:	0f be       	out	0x3f, r0	; 63
   17cc8:	cd bf       	out	0x3d, r28	; 61
   17cca:	4c 01       	movw	r8, r24
   17ccc:	1b 01       	movw	r2, r22
   17cce:	2a 01       	movw	r4, r20
   17cd0:	39 01       	movw	r6, r18
   17cd2:	0e 94 15 be 	call	0x17c2a	; 0x17c2a <PubSubClient::connected()>
   17cd6:	d8 2e       	mov	r13, r24
   17cd8:	81 11       	cpse	r24, r1
   17cda:	08 c1       	rjmp	.+528    	; 0x17eec <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>
   17cdc:	f4 01       	movw	r30, r8
   17cde:	eb 5e       	subi	r30, 0xEB	; 235
   17ce0:	fd 4f       	sbci	r31, 0xFD	; 253
   17ce2:	60 81       	ld	r22, Z
   17ce4:	71 81       	ldd	r23, Z+1	; 0x01
   17ce6:	d4 01       	movw	r26, r8
   17ce8:	8d 91       	ld	r24, X+
   17cea:	9c 91       	ld	r25, X
   17cec:	dc 01       	movw	r26, r24
   17cee:	ed 91       	ld	r30, X+
   17cf0:	fc 91       	ld	r31, X
   17cf2:	d4 01       	movw	r26, r8
   17cf4:	a9 5e       	subi	r26, 0xE9	; 233
   17cf6:	bd 4f       	sbci	r27, 0xFD	; 253
   17cf8:	2d 91       	ld	r18, X+
   17cfa:	3c 91       	ld	r19, X
   17cfc:	3e 87       	std	Y+14, r19	; 0x0e
   17cfe:	2d 87       	std	Y+13, r18	; 0x0d
   17d00:	61 15       	cp	r22, r1
   17d02:	71 05       	cpc	r23, r1
   17d04:	09 f4       	brne	.+2      	; 0x17d08 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x72>
   17d06:	b5 c0       	rjmp	.+362    	; 0x17e72 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x1dc>
   17d08:	00 88       	ldd	r0, Z+16	; 0x10
   17d0a:	f1 89       	ldd	r31, Z+17	; 0x11
   17d0c:	e0 2d       	mov	r30, r0
   17d0e:	a9 01       	movw	r20, r18
   17d10:	19 95       	eicall
   17d12:	f4 01       	movw	r30, r8
   17d14:	81 30       	cpi	r24, 0x01	; 1
   17d16:	91 05       	cpc	r25, r1
   17d18:	09 f0       	breq	.+2      	; 0x17d1c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x86>
   17d1a:	0a c1       	rjmp	.+532    	; 0x17f30 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x29a>
   17d1c:	ee 5f       	subi	r30, 0xFE	; 254
   17d1e:	fd 4f       	sbci	r31, 0xFD	; 253
   17d20:	91 83       	std	Z+1, r25	; 0x01
   17d22:	80 83       	st	Z, r24
   17d24:	87 e0       	ldi	r24, 0x07	; 7
   17d26:	eb e8       	ldi	r30, 0x8B	; 139
   17d28:	f2 e0       	ldi	r31, 0x02	; 2
   17d2a:	de 01       	movw	r26, r28
   17d2c:	11 96       	adiw	r26, 0x01	; 1
   17d2e:	01 90       	ld	r0, Z+
   17d30:	0d 92       	st	X+, r0
   17d32:	8a 95       	dec	r24
   17d34:	e1 f7       	brne	.-8      	; 0x17d2e <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x98>
   17d36:	fe 01       	movw	r30, r28
   17d38:	31 96       	adiw	r30, 0x01	; 1
   17d3a:	d4 01       	movw	r26, r8
   17d3c:	17 96       	adiw	r26, 0x07	; 7
   17d3e:	c4 01       	movw	r24, r8
   17d40:	0e 96       	adiw	r24, 0x0e	; 14
   17d42:	21 91       	ld	r18, Z+
   17d44:	2d 93       	st	X+, r18
   17d46:	8a 17       	cp	r24, r26
   17d48:	9b 07       	cpc	r25, r27
   17d4a:	d9 f7       	brne	.-10     	; 0x17d42 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xac>
   17d4c:	82 e0       	ldi	r24, 0x02	; 2
   17d4e:	01 15       	cp	r16, r1
   17d50:	11 05       	cpc	r17, r1
   17d52:	51 f0       	breq	.+20     	; 0x17d68 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xd2>
   17d54:	30 e2       	ldi	r19, 0x20	; 32
   17d56:	c3 9e       	mul	r12, r19
   17d58:	c0 01       	movw	r24, r0
   17d5a:	11 24       	eor	r1, r1
   17d5c:	86 60       	ori	r24, 0x06	; 6
   17d5e:	48 e0       	ldi	r20, 0x08	; 8
   17d60:	e4 9e       	mul	r14, r20
   17d62:	70 01       	movw	r14, r0
   17d64:	11 24       	eor	r1, r1
   17d66:	8e 29       	or	r24, r14
   17d68:	41 14       	cp	r4, r1
   17d6a:	51 04       	cpc	r5, r1
   17d6c:	29 f0       	breq	.+10     	; 0x17d78 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe2>
   17d6e:	61 14       	cp	r6, r1
   17d70:	71 04       	cpc	r7, r1
   17d72:	09 f0       	breq	.+2      	; 0x17d76 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe0>
   17d74:	98 c0       	rjmp	.+304    	; 0x17ea6 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x210>
   17d76:	80 68       	ori	r24, 0x80	; 128
   17d78:	d4 01       	movw	r26, r8
   17d7a:	1e 96       	adiw	r26, 0x0e	; 14
   17d7c:	8c 93       	st	X, r24
   17d7e:	1e 97       	sbiw	r26, 0x0e	; 14
   17d80:	1f 96       	adiw	r26, 0x0f	; 15
   17d82:	1c 92       	st	X, r1
   17d84:	1f 97       	sbiw	r26, 0x0f	; 15
   17d86:	8f e0       	ldi	r24, 0x0F	; 15
   17d88:	50 96       	adiw	r26, 0x10	; 16
   17d8a:	8c 93       	st	X, r24
   17d8c:	74 01       	movw	r14, r8
   17d8e:	b2 e0       	ldi	r27, 0x02	; 2
   17d90:	eb 0e       	add	r14, r27
   17d92:	f1 1c       	adc	r15, r1
   17d94:	2f e0       	ldi	r18, 0x0F	; 15
   17d96:	30 e0       	ldi	r19, 0x00	; 0
   17d98:	a7 01       	movw	r20, r14
   17d9a:	b1 01       	movw	r22, r2
   17d9c:	c4 01       	movw	r24, r8
   17d9e:	0e 94 f3 bd 	call	0x17be6	; 0x17be6 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   17da2:	01 15       	cp	r16, r1
   17da4:	11 05       	cpc	r17, r1
   17da6:	61 f0       	breq	.+24     	; 0x17dc0 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x12a>
   17da8:	9c 01       	movw	r18, r24
   17daa:	a7 01       	movw	r20, r14
   17dac:	b8 01       	movw	r22, r16
   17dae:	c4 01       	movw	r24, r8
   17db0:	0e 94 f3 bd 	call	0x17be6	; 0x17be6 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   17db4:	9c 01       	movw	r18, r24
   17db6:	a7 01       	movw	r20, r14
   17db8:	b5 01       	movw	r22, r10
   17dba:	c4 01       	movw	r24, r8
   17dbc:	0e 94 f3 bd 	call	0x17be6	; 0x17be6 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   17dc0:	41 14       	cp	r4, r1
   17dc2:	51 04       	cpc	r5, r1
   17dc4:	79 f0       	breq	.+30     	; 0x17de4 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x14e>
   17dc6:	9c 01       	movw	r18, r24
   17dc8:	a7 01       	movw	r20, r14
   17dca:	b2 01       	movw	r22, r4
   17dcc:	c4 01       	movw	r24, r8
   17dce:	0e 94 f3 bd 	call	0x17be6	; 0x17be6 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   17dd2:	61 14       	cp	r6, r1
   17dd4:	71 04       	cpc	r7, r1
   17dd6:	31 f0       	breq	.+12     	; 0x17de4 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x14e>
   17dd8:	9c 01       	movw	r18, r24
   17dda:	a7 01       	movw	r20, r14
   17ddc:	b3 01       	movw	r22, r6
   17dde:	c4 01       	movw	r24, r8
   17de0:	0e 94 f3 bd 	call	0x17be6	; 0x17be6 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   17de4:	9c 01       	movw	r18, r24
   17de6:	25 50       	subi	r18, 0x05	; 5
   17de8:	31 09       	sbc	r19, r1
   17dea:	a7 01       	movw	r20, r14
   17dec:	60 e1       	ldi	r22, 0x10	; 16
   17dee:	c4 01       	movw	r24, r8
   17df0:	0e 94 85 bd 	call	0x17b0a	; 0x17b0a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   17df4:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   17df8:	f4 01       	movw	r30, r8
   17dfa:	ec 5f       	subi	r30, 0xFC	; 252
   17dfc:	fd 4f       	sbci	r31, 0xFD	; 253
   17dfe:	60 83       	st	Z, r22
   17e00:	71 83       	std	Z+1, r23	; 0x01
   17e02:	82 83       	std	Z+2, r24	; 0x02
   17e04:	93 83       	std	Z+3, r25	; 0x03
   17e06:	84 01       	movw	r16, r8
   17e08:	08 5f       	subi	r16, 0xF8	; 248
   17e0a:	1d 4f       	sbci	r17, 0xFD	; 253
   17e0c:	f8 01       	movw	r30, r16
   17e0e:	60 83       	st	Z, r22
   17e10:	71 83       	std	Z+1, r23	; 0x01
   17e12:	82 83       	std	Z+2, r24	; 0x02
   17e14:	93 83       	std	Z+3, r25	; 0x03
   17e16:	d4 01       	movw	r26, r8
   17e18:	8d 91       	ld	r24, X+
   17e1a:	9c 91       	ld	r25, X
   17e1c:	dc 01       	movw	r26, r24
   17e1e:	ed 91       	ld	r30, X+
   17e20:	fc 91       	ld	r31, X
   17e22:	00 84       	ldd	r0, Z+8	; 0x08
   17e24:	f1 85       	ldd	r31, Z+9	; 0x09
   17e26:	e0 2d       	mov	r30, r0
   17e28:	19 95       	eicall
   17e2a:	89 2b       	or	r24, r25
   17e2c:	f1 f5       	brne	.+124    	; 0x17eaa <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x214>
   17e2e:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   17e32:	f8 01       	movw	r30, r16
   17e34:	40 80       	ld	r4, Z
   17e36:	51 80       	ldd	r5, Z+1	; 0x01
   17e38:	62 80       	ldd	r6, Z+2	; 0x02
   17e3a:	73 80       	ldd	r7, Z+3	; 0x03
   17e3c:	64 19       	sub	r22, r4
   17e3e:	75 09       	sbc	r23, r5
   17e40:	86 09       	sbc	r24, r6
   17e42:	97 09       	sbc	r25, r7
   17e44:	62 33       	cpi	r22, 0x32	; 50
   17e46:	71 05       	cpc	r23, r1
   17e48:	81 05       	cpc	r24, r1
   17e4a:	91 05       	cpc	r25, r1
   17e4c:	20 f3       	brcs	.-56     	; 0x17e16 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x180>
   17e4e:	f4 01       	movw	r30, r8
   17e50:	e5 5e       	subi	r30, 0xE5	; 229
   17e52:	fd 4f       	sbci	r31, 0xFD	; 253
   17e54:	8c ef       	ldi	r24, 0xFC	; 252
   17e56:	9f ef       	ldi	r25, 0xFF	; 255
   17e58:	91 83       	std	Z+1, r25	; 0x01
   17e5a:	80 83       	st	Z, r24
   17e5c:	d4 01       	movw	r26, r8
   17e5e:	8d 91       	ld	r24, X+
   17e60:	9c 91       	ld	r25, X
   17e62:	dc 01       	movw	r26, r24
   17e64:	ed 91       	ld	r30, X+
   17e66:	fc 91       	ld	r31, X
   17e68:	04 88       	ldd	r0, Z+20	; 0x14
   17e6a:	f5 89       	ldd	r31, Z+21	; 0x15
   17e6c:	e0 2d       	mov	r30, r0
   17e6e:	19 95       	eicall
   17e70:	3d c0       	rjmp	.+122    	; 0x17eec <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>
   17e72:	06 84       	ldd	r0, Z+14	; 0x0e
   17e74:	f7 85       	ldd	r31, Z+15	; 0x0f
   17e76:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
   17e78:	2c ed       	ldi	r18, 0xDC	; 220
   17e7a:	38 e0       	ldi	r19, 0x08	; 8
   17e7c:	3a 83       	std	Y+2, r19	; 0x02
   17e7e:	29 83       	std	Y+1, r18	; 0x01
   17e80:	d4 01       	movw	r26, r8
   17e82:	a1 5f       	subi	r26, 0xF1	; 241
   17e84:	bd 4f       	sbci	r27, 0xFD	; 253
   17e86:	12 96       	adiw	r26, 0x02	; 2
   17e88:	2d 91       	ld	r18, X+
   17e8a:	3d 91       	ld	r19, X+
   17e8c:	4d 91       	ld	r20, X+
   17e8e:	5c 91       	ld	r21, X
   17e90:	15 97       	sbiw	r26, 0x05	; 5
   17e92:	2b 83       	std	Y+3, r18	; 0x03
   17e94:	3c 83       	std	Y+4, r19	; 0x04
   17e96:	4d 83       	std	Y+5, r20	; 0x05
   17e98:	5e 83       	std	Y+6, r21	; 0x06
_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_():
   17e9a:	4d 85       	ldd	r20, Y+13	; 0x0d
   17e9c:	5e 85       	ldd	r21, Y+14	; 0x0e
   17e9e:	be 01       	movw	r22, r28
   17ea0:	6f 5f       	subi	r22, 0xFF	; 255
   17ea2:	7f 4f       	sbci	r23, 0xFF	; 255
   17ea4:	35 cf       	rjmp	.-406    	; 0x17d10 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x7a>
   17ea6:	80 6c       	ori	r24, 0xC0	; 192
   17ea8:	67 cf       	rjmp	.-306    	; 0x17d78 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe2>
   17eaa:	be 01       	movw	r22, r28
   17eac:	68 5f       	subi	r22, 0xF8	; 248
   17eae:	7f 4f       	sbci	r23, 0xFF	; 255
   17eb0:	c4 01       	movw	r24, r8
   17eb2:	0e 94 94 bc 	call	0x17928	; 0x17928 <PubSubClient::readPacket(unsigned char*)>
   17eb6:	04 97       	sbiw	r24, 0x04	; 4
   17eb8:	b9 f5       	brne	.+110    	; 0x17f28 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x292>
   17eba:	f4 01       	movw	r30, r8
   17ebc:	85 81       	ldd	r24, Z+5	; 0x05
   17ebe:	94 01       	movw	r18, r8
   17ec0:	25 5e       	subi	r18, 0xE5	; 229
   17ec2:	3d 4f       	sbci	r19, 0xFD	; 253
   17ec4:	79 01       	movw	r14, r18
   17ec6:	81 11       	cpse	r24, r1
   17ec8:	2b c0       	rjmp	.+86     	; 0x17f20 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x28a>
   17eca:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   17ece:	d8 01       	movw	r26, r16
   17ed0:	6d 93       	st	X+, r22
   17ed2:	7d 93       	st	X+, r23
   17ed4:	8d 93       	st	X+, r24
   17ed6:	9c 93       	st	X, r25
   17ed8:	13 97       	sbiw	r26, 0x03	; 3
   17eda:	f4 01       	movw	r30, r8
   17edc:	e4 5f       	subi	r30, 0xF4	; 244
   17ede:	fd 4f       	sbci	r31, 0xFD	; 253
   17ee0:	10 82       	st	Z, r1
   17ee2:	f7 01       	movw	r30, r14
   17ee4:	11 82       	std	Z+1, r1	; 0x01
   17ee6:	10 82       	st	Z, r1
   17ee8:	dd 24       	eor	r13, r13
   17eea:	d3 94       	inc	r13
   17eec:	8d 2d       	mov	r24, r13
   17eee:	2e 96       	adiw	r28, 0x0e	; 14
   17ef0:	0f b6       	in	r0, 0x3f	; 63
   17ef2:	f8 94       	cli
   17ef4:	de bf       	out	0x3e, r29	; 62
   17ef6:	0f be       	out	0x3f, r0	; 63
   17ef8:	cd bf       	out	0x3d, r28	; 61
   17efa:	df 91       	pop	r29
   17efc:	cf 91       	pop	r28
   17efe:	1f 91       	pop	r17
   17f00:	0f 91       	pop	r16
   17f02:	ff 90       	pop	r15
   17f04:	ef 90       	pop	r14
   17f06:	df 90       	pop	r13
   17f08:	cf 90       	pop	r12
   17f0a:	bf 90       	pop	r11
   17f0c:	af 90       	pop	r10
   17f0e:	9f 90       	pop	r9
   17f10:	8f 90       	pop	r8
   17f12:	7f 90       	pop	r7
   17f14:	6f 90       	pop	r6
   17f16:	5f 90       	pop	r5
   17f18:	4f 90       	pop	r4
   17f1a:	3f 90       	pop	r3
   17f1c:	2f 90       	pop	r2
   17f1e:	08 95       	ret
   17f20:	90 e0       	ldi	r25, 0x00	; 0
   17f22:	d9 01       	movw	r26, r18
   17f24:	8d 93       	st	X+, r24
   17f26:	9c 93       	st	X, r25
   17f28:	f4 01       	movw	r30, r8
   17f2a:	80 81       	ld	r24, Z
   17f2c:	91 81       	ldd	r25, Z+1	; 0x01
   17f2e:	99 cf       	rjmp	.-206    	; 0x17e62 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x1cc>
   17f30:	e5 5e       	subi	r30, 0xE5	; 229
   17f32:	fd 4f       	sbci	r31, 0xFD	; 253
   17f34:	8e ef       	ldi	r24, 0xFE	; 254
   17f36:	9f ef       	ldi	r25, 0xFF	; 255
   17f38:	91 83       	std	Z+1, r25	; 0x01
   17f3a:	80 83       	st	Z, r24
   17f3c:	d7 cf       	rjmp	.-82     	; 0x17eec <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>

00017f3e <PubSubClient::connect(char const*)>:
_ZN12PubSubClient7connectEPKc():
   17f3e:	af 92       	push	r10
   17f40:	bf 92       	push	r11
   17f42:	cf 92       	push	r12
   17f44:	ef 92       	push	r14
   17f46:	0f 93       	push	r16
   17f48:	1f 93       	push	r17
   17f4a:	b1 2c       	mov	r11, r1
   17f4c:	a1 2c       	mov	r10, r1
   17f4e:	c1 2c       	mov	r12, r1
   17f50:	e1 2c       	mov	r14, r1
   17f52:	10 e0       	ldi	r17, 0x00	; 0
   17f54:	00 e0       	ldi	r16, 0x00	; 0
   17f56:	30 e0       	ldi	r19, 0x00	; 0
   17f58:	20 e0       	ldi	r18, 0x00	; 0
   17f5a:	50 e0       	ldi	r21, 0x00	; 0
   17f5c:	40 e0       	ldi	r20, 0x00	; 0
   17f5e:	0e 94 4b be 	call	0x17c96	; 0x17c96 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)>
   17f62:	1f 91       	pop	r17
   17f64:	0f 91       	pop	r16
   17f66:	ef 90       	pop	r14
   17f68:	cf 90       	pop	r12
   17f6a:	bf 90       	pop	r11
   17f6c:	af 90       	pop	r10
   17f6e:	08 95       	ret

00017f70 <PubSubClient::loop()>:
_ZN12PubSubClient4loopEv():
   17f70:	2f 92       	push	r2
   17f72:	3f 92       	push	r3
   17f74:	4f 92       	push	r4
   17f76:	5f 92       	push	r5
   17f78:	6f 92       	push	r6
   17f7a:	7f 92       	push	r7
   17f7c:	8f 92       	push	r8
   17f7e:	9f 92       	push	r9
   17f80:	af 92       	push	r10
   17f82:	bf 92       	push	r11
   17f84:	cf 92       	push	r12
   17f86:	df 92       	push	r13
   17f88:	ef 92       	push	r14
   17f8a:	ff 92       	push	r15
   17f8c:	0f 93       	push	r16
   17f8e:	1f 93       	push	r17
   17f90:	cf 93       	push	r28
   17f92:	df 93       	push	r29
   17f94:	00 d0       	rcall	.+0      	; 0x17f96 <PubSubClient::loop()+0x26>
   17f96:	1f 92       	push	r1
   17f98:	1f 92       	push	r1
   17f9a:	cd b7       	in	r28, 0x3d	; 61
   17f9c:	de b7       	in	r29, 0x3e	; 62
   17f9e:	8c 01       	movw	r16, r24
   17fa0:	2d b7       	in	r18, 0x3d	; 61
   17fa2:	3e b7       	in	r19, 0x3e	; 62
   17fa4:	3d 83       	std	Y+5, r19	; 0x05
   17fa6:	2c 83       	std	Y+4, r18	; 0x04
   17fa8:	0e 94 15 be 	call	0x17c2a	; 0x17c2a <PubSubClient::connected()>
   17fac:	58 2e       	mov	r5, r24
   17fae:	88 23       	and	r24, r24
   17fb0:	09 f4       	brne	.+2      	; 0x17fb4 <PubSubClient::loop()+0x44>
   17fb2:	47 c0       	rjmp	.+142    	; 0x18042 <PubSubClient::loop()+0xd2>
   17fb4:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   17fb8:	4b 01       	movw	r8, r22
   17fba:	5c 01       	movw	r10, r24
   17fbc:	78 01       	movw	r14, r16
   17fbe:	38 ef       	ldi	r19, 0xF8	; 248
   17fc0:	e3 1a       	sub	r14, r19
   17fc2:	3d ef       	ldi	r19, 0xFD	; 253
   17fc4:	f3 0a       	sbc	r15, r19
   17fc6:	f7 01       	movw	r30, r14
   17fc8:	80 81       	ld	r24, Z
   17fca:	91 81       	ldd	r25, Z+1	; 0x01
   17fcc:	a2 81       	ldd	r26, Z+2	; 0x02
   17fce:	b3 81       	ldd	r27, Z+3	; 0x03
   17fd0:	a5 01       	movw	r20, r10
   17fd2:	94 01       	movw	r18, r8
   17fd4:	28 1b       	sub	r18, r24
   17fd6:	39 0b       	sbc	r19, r25
   17fd8:	4a 0b       	sbc	r20, r26
   17fda:	5b 0b       	sbc	r21, r27
   17fdc:	da 01       	movw	r26, r20
   17fde:	c9 01       	movw	r24, r18
   17fe0:	89 39       	cpi	r24, 0x99	; 153
   17fe2:	9a 43       	sbci	r25, 0x3A	; 58
   17fe4:	a1 05       	cpc	r26, r1
   17fe6:	b1 05       	cpc	r27, r1
   17fe8:	98 f4       	brcc	.+38     	; 0x18010 <PubSubClient::loop()+0xa0>
   17fea:	34 97       	sbiw	r30, 0x04	; 4
   17fec:	80 81       	ld	r24, Z
   17fee:	91 81       	ldd	r25, Z+1	; 0x01
   17ff0:	a2 81       	ldd	r26, Z+2	; 0x02
   17ff2:	b3 81       	ldd	r27, Z+3	; 0x03
   17ff4:	a5 01       	movw	r20, r10
   17ff6:	94 01       	movw	r18, r8
   17ff8:	28 1b       	sub	r18, r24
   17ffa:	39 0b       	sbc	r19, r25
   17ffc:	4a 0b       	sbc	r20, r26
   17ffe:	5b 0b       	sbc	r21, r27
   18000:	da 01       	movw	r26, r20
   18002:	c9 01       	movw	r24, r18
   18004:	89 39       	cpi	r24, 0x99	; 153
   18006:	9a 43       	sbci	r25, 0x3A	; 58
   18008:	a1 05       	cpc	r26, r1
   1800a:	b1 05       	cpc	r27, r1
   1800c:	08 f4       	brcc	.+2      	; 0x18010 <PubSubClient::loop()+0xa0>
   1800e:	58 c0       	rjmp	.+176    	; 0x180c0 <PubSubClient::loop()+0x150>
   18010:	d8 01       	movw	r26, r16
   18012:	8d 91       	ld	r24, X+
   18014:	9c 91       	ld	r25, X
   18016:	68 01       	movw	r12, r16
   18018:	b4 ef       	ldi	r27, 0xF4	; 244
   1801a:	cb 1a       	sub	r12, r27
   1801c:	bd ef       	ldi	r27, 0xFD	; 253
   1801e:	db 0a       	sbc	r13, r27
   18020:	f6 01       	movw	r30, r12
   18022:	20 81       	ld	r18, Z
   18024:	22 23       	and	r18, r18
   18026:	69 f1       	breq	.+90     	; 0x18082 <PubSubClient::loop()+0x112>
   18028:	3f 96       	adiw	r30, 0x0f	; 15
   1802a:	2c ef       	ldi	r18, 0xFC	; 252
   1802c:	3f ef       	ldi	r19, 0xFF	; 255
   1802e:	31 83       	std	Z+1, r19	; 0x01
   18030:	20 83       	st	Z, r18
   18032:	dc 01       	movw	r26, r24
   18034:	ed 91       	ld	r30, X+
   18036:	fc 91       	ld	r31, X
   18038:	04 88       	ldd	r0, Z+20	; 0x14
   1803a:	f5 89       	ldd	r31, Z+21	; 0x15
   1803c:	e0 2d       	mov	r30, r0
   1803e:	19 95       	eicall
   18040:	51 2c       	mov	r5, r1
   18042:	85 2d       	mov	r24, r5
   18044:	ec 81       	ldd	r30, Y+4	; 0x04
   18046:	fd 81       	ldd	r31, Y+5	; 0x05
   18048:	0f b6       	in	r0, 0x3f	; 63
   1804a:	f8 94       	cli
   1804c:	fe bf       	out	0x3e, r31	; 62
   1804e:	0f be       	out	0x3f, r0	; 63
   18050:	ed bf       	out	0x3d, r30	; 61
   18052:	0f 90       	pop	r0
   18054:	0f 90       	pop	r0
   18056:	0f 90       	pop	r0
   18058:	0f 90       	pop	r0
   1805a:	0f 90       	pop	r0
   1805c:	df 91       	pop	r29
   1805e:	cf 91       	pop	r28
   18060:	1f 91       	pop	r17
   18062:	0f 91       	pop	r16
   18064:	ff 90       	pop	r15
   18066:	ef 90       	pop	r14
   18068:	df 90       	pop	r13
   1806a:	cf 90       	pop	r12
   1806c:	bf 90       	pop	r11
   1806e:	af 90       	pop	r10
   18070:	9f 90       	pop	r9
   18072:	8f 90       	pop	r8
   18074:	7f 90       	pop	r7
   18076:	6f 90       	pop	r6
   18078:	5f 90       	pop	r5
   1807a:	4f 90       	pop	r4
   1807c:	3f 90       	pop	r3
   1807e:	2f 90       	pop	r2
   18080:	08 95       	ret
   18082:	20 ec       	ldi	r18, 0xC0	; 192
   18084:	f8 01       	movw	r30, r16
   18086:	22 83       	std	Z+2, r18	; 0x02
   18088:	13 82       	std	Z+3, r1	; 0x03
   1808a:	dc 01       	movw	r26, r24
   1808c:	ed 91       	ld	r30, X+
   1808e:	fc 91       	ld	r31, X
   18090:	02 80       	ldd	r0, Z+2	; 0x02
   18092:	f3 81       	ldd	r31, Z+3	; 0x03
   18094:	e0 2d       	mov	r30, r0
   18096:	42 e0       	ldi	r20, 0x02	; 2
   18098:	50 e0       	ldi	r21, 0x00	; 0
   1809a:	b8 01       	movw	r22, r16
   1809c:	6e 5f       	subi	r22, 0xFE	; 254
   1809e:	7f 4f       	sbci	r23, 0xFF	; 255
   180a0:	19 95       	eicall
   180a2:	f8 01       	movw	r30, r16
   180a4:	ec 5f       	subi	r30, 0xFC	; 252
   180a6:	fd 4f       	sbci	r31, 0xFD	; 253
   180a8:	80 82       	st	Z, r8
   180aa:	91 82       	std	Z+1, r9	; 0x01
   180ac:	a2 82       	std	Z+2, r10	; 0x02
   180ae:	b3 82       	std	Z+3, r11	; 0x03
   180b0:	f7 01       	movw	r30, r14
   180b2:	80 82       	st	Z, r8
   180b4:	91 82       	std	Z+1, r9	; 0x01
   180b6:	a2 82       	std	Z+2, r10	; 0x02
   180b8:	b3 82       	std	Z+3, r11	; 0x03
   180ba:	81 e0       	ldi	r24, 0x01	; 1
   180bc:	d6 01       	movw	r26, r12
   180be:	8c 93       	st	X, r24
   180c0:	f8 01       	movw	r30, r16
   180c2:	80 81       	ld	r24, Z
   180c4:	91 81       	ldd	r25, Z+1	; 0x01
   180c6:	dc 01       	movw	r26, r24
   180c8:	ed 91       	ld	r30, X+
   180ca:	fc 91       	ld	r31, X
   180cc:	00 84       	ldd	r0, Z+8	; 0x08
   180ce:	f1 85       	ldd	r31, Z+9	; 0x09
   180d0:	e0 2d       	mov	r30, r0
   180d2:	19 95       	eicall
   180d4:	89 2b       	or	r24, r25
   180d6:	09 f4       	brne	.+2      	; 0x180da <PubSubClient::loop()+0x16a>
   180d8:	b4 cf       	rjmp	.-152    	; 0x18042 <PubSubClient::loop()+0xd2>
   180da:	be 01       	movw	r22, r28
   180dc:	6f 5f       	subi	r22, 0xFF	; 255
   180de:	7f 4f       	sbci	r23, 0xFF	; 255
   180e0:	c8 01       	movw	r24, r16
   180e2:	0e 94 94 bc 	call	0x17928	; 0x17928 <PubSubClient::readPacket(unsigned char*)>
   180e6:	6c 01       	movw	r12, r24
   180e8:	89 2b       	or	r24, r25
   180ea:	09 f4       	brne	.+2      	; 0x180ee <PubSubClient::loop()+0x17e>
   180ec:	aa cf       	rjmp	.-172    	; 0x18042 <PubSubClient::loop()+0xd2>
   180ee:	f7 01       	movw	r30, r14
   180f0:	80 82       	st	Z, r8
   180f2:	91 82       	std	Z+1, r9	; 0x01
   180f4:	a2 82       	std	Z+2, r10	; 0x02
   180f6:	b3 82       	std	Z+3, r11	; 0x03
   180f8:	d8 01       	movw	r26, r16
   180fa:	12 96       	adiw	r26, 0x02	; 2
   180fc:	4c 90       	ld	r4, X
   180fe:	12 97       	sbiw	r26, 0x02	; 2
   18100:	84 2d       	mov	r24, r4
   18102:	80 7f       	andi	r24, 0xF0	; 240
   18104:	80 33       	cpi	r24, 0x30	; 48
   18106:	09 f0       	breq	.+2      	; 0x1810a <PubSubClient::loop()+0x19a>
   18108:	9d c0       	rjmp	.+314    	; 0x18244 <PubSubClient::loop()+0x2d4>
   1810a:	f8 01       	movw	r30, r16
   1810c:	e3 5f       	subi	r30, 0xF3	; 243
   1810e:	fd 4f       	sbci	r31, 0xFD	; 253
   18110:	60 80       	ld	r6, Z
   18112:	71 80       	ldd	r7, Z+1	; 0x01
   18114:	61 14       	cp	r6, r1
   18116:	71 04       	cpc	r7, r1
   18118:	09 f4       	brne	.+2      	; 0x1811c <PubSubClient::loop()+0x1ac>
   1811a:	93 cf       	rjmp	.-218    	; 0x18042 <PubSubClient::loop()+0xd2>
   1811c:	ed b7       	in	r30, 0x3d	; 61
   1811e:	fe b7       	in	r31, 0x3e	; 62
   18120:	fb 83       	std	Y+3, r31	; 0x03
   18122:	ea 83       	std	Y+2, r30	; 0x02
   18124:	29 81       	ldd	r18, Y+1	; 0x01
   18126:	30 e0       	ldi	r19, 0x00	; 0
   18128:	a2 0f       	add	r26, r18
   1812a:	b3 1f       	adc	r27, r19
   1812c:	13 96       	adiw	r26, 0x03	; 3
   1812e:	ec 91       	ld	r30, X
   18130:	13 97       	sbiw	r26, 0x03	; 3
   18132:	f0 e0       	ldi	r31, 0x00	; 0
   18134:	fe 2f       	mov	r31, r30
   18136:	ee 27       	eor	r30, r30
   18138:	14 96       	adiw	r26, 0x04	; 4
   1813a:	6c 91       	ld	r22, X
   1813c:	e6 0f       	add	r30, r22
   1813e:	f1 1d       	adc	r31, r1
   18140:	cf 01       	movw	r24, r30
   18142:	01 96       	adiw	r24, 0x01	; 1
   18144:	4d b7       	in	r20, 0x3d	; 61
   18146:	5e b7       	in	r21, 0x3e	; 62
   18148:	48 1b       	sub	r20, r24
   1814a:	59 0b       	sbc	r21, r25
   1814c:	0f b6       	in	r0, 0x3f	; 63
   1814e:	f8 94       	cli
   18150:	5e bf       	out	0x3e, r21	; 62
   18152:	0f be       	out	0x3f, r0	; 63
   18154:	4d bf       	out	0x3d, r20	; 61
   18156:	8d b7       	in	r24, 0x3d	; 61
   18158:	9e b7       	in	r25, 0x3e	; 62
   1815a:	01 96       	adiw	r24, 0x01	; 1
   1815c:	a9 01       	movw	r20, r18
   1815e:	4b 5f       	subi	r20, 0xFB	; 251
   18160:	5f 4f       	sbci	r21, 0xFF	; 255
   18162:	40 0f       	add	r20, r16
   18164:	51 1f       	adc	r21, r17
   18166:	1c 01       	movw	r2, r24
   18168:	bc 01       	movw	r22, r24
   1816a:	6e 0f       	add	r22, r30
   1816c:	7f 1f       	adc	r23, r31
   1816e:	26 16       	cp	r2, r22
   18170:	37 06       	cpc	r3, r23
   18172:	39 f0       	breq	.+14     	; 0x18182 <PubSubClient::loop()+0x212>
   18174:	da 01       	movw	r26, r20
   18176:	fd 90       	ld	r15, X+
   18178:	ad 01       	movw	r20, r26
   1817a:	d1 01       	movw	r26, r2
   1817c:	fd 92       	st	X+, r15
   1817e:	1d 01       	movw	r2, r26
   18180:	f6 cf       	rjmp	.-20     	; 0x1816e <PubSubClient::loop()+0x1fe>
   18182:	d1 01       	movw	r26, r2
   18184:	1c 92       	st	X, r1
   18186:	78 01       	movw	r14, r16
   18188:	b2 e0       	ldi	r27, 0x02	; 2
   1818a:	eb 0e       	add	r14, r27
   1818c:	f1 1c       	adc	r15, r1
   1818e:	a6 01       	movw	r20, r12
   18190:	42 1b       	sub	r20, r18
   18192:	53 0b       	sbc	r21, r19
   18194:	64 2d       	mov	r22, r4
   18196:	66 70       	andi	r22, 0x06	; 6
   18198:	46 2e       	mov	r4, r22
   1819a:	a2 e0       	ldi	r26, 0x02	; 2
   1819c:	6a 13       	cpse	r22, r26
   1819e:	44 c0       	rjmp	.+136    	; 0x18228 <PubSubClient::loop()+0x2b8>
   181a0:	b9 01       	movw	r22, r18
   181a2:	6e 0f       	add	r22, r30
   181a4:	7f 1f       	adc	r23, r31
   181a6:	d8 01       	movw	r26, r16
   181a8:	a6 0f       	add	r26, r22
   181aa:	b7 1f       	adc	r27, r23
   181ac:	15 96       	adiw	r26, 0x05	; 5
   181ae:	2c 91       	ld	r18, X
   181b0:	15 97       	sbiw	r26, 0x05	; 5
   181b2:	30 e0       	ldi	r19, 0x00	; 0
   181b4:	32 2f       	mov	r19, r18
   181b6:	22 27       	eor	r18, r18
   181b8:	16 96       	adiw	r26, 0x06	; 6
   181ba:	2c 90       	ld	r2, X
   181bc:	22 0e       	add	r2, r18
   181be:	33 2e       	mov	r3, r19
   181c0:	31 1c       	adc	r3, r1
   181c2:	4e 1b       	sub	r20, r30
   181c4:	5f 0b       	sbc	r21, r31
   181c6:	45 50       	subi	r20, 0x05	; 5
   181c8:	51 09       	sbc	r21, r1
   181ca:	6b 5f       	subi	r22, 0xFB	; 251
   181cc:	7f 4f       	sbci	r23, 0xFF	; 255
   181ce:	6e 0d       	add	r22, r14
   181d0:	7f 1d       	adc	r23, r15
   181d2:	f3 01       	movw	r30, r6
   181d4:	19 95       	eicall
   181d6:	80 e4       	ldi	r24, 0x40	; 64
   181d8:	d8 01       	movw	r26, r16
   181da:	12 96       	adiw	r26, 0x02	; 2
   181dc:	8c 93       	st	X, r24
   181de:	12 97       	sbiw	r26, 0x02	; 2
   181e0:	13 96       	adiw	r26, 0x03	; 3
   181e2:	4c 92       	st	X, r4
   181e4:	13 97       	sbiw	r26, 0x03	; 3
   181e6:	14 96       	adiw	r26, 0x04	; 4
   181e8:	3c 92       	st	X, r3
   181ea:	14 97       	sbiw	r26, 0x04	; 4
   181ec:	15 96       	adiw	r26, 0x05	; 5
   181ee:	2c 92       	st	X, r2
   181f0:	15 97       	sbiw	r26, 0x05	; 5
   181f2:	8d 91       	ld	r24, X+
   181f4:	9c 91       	ld	r25, X
   181f6:	dc 01       	movw	r26, r24
   181f8:	ed 91       	ld	r30, X+
   181fa:	fc 91       	ld	r31, X
   181fc:	02 80       	ldd	r0, Z+2	; 0x02
   181fe:	f3 81       	ldd	r31, Z+3	; 0x03
   18200:	e0 2d       	mov	r30, r0
   18202:	44 e0       	ldi	r20, 0x04	; 4
   18204:	50 e0       	ldi	r21, 0x00	; 0
   18206:	b7 01       	movw	r22, r14
   18208:	19 95       	eicall
   1820a:	f8 01       	movw	r30, r16
   1820c:	ec 5f       	subi	r30, 0xFC	; 252
   1820e:	fd 4f       	sbci	r31, 0xFD	; 253
   18210:	80 82       	st	Z, r8
   18212:	91 82       	std	Z+1, r9	; 0x01
   18214:	a2 82       	std	Z+2, r10	; 0x02
   18216:	b3 82       	std	Z+3, r11	; 0x03
   18218:	2a 81       	ldd	r18, Y+2	; 0x02
   1821a:	3b 81       	ldd	r19, Y+3	; 0x03
   1821c:	0f b6       	in	r0, 0x3f	; 63
   1821e:	f8 94       	cli
   18220:	3e bf       	out	0x3e, r19	; 62
   18222:	0f be       	out	0x3f, r0	; 63
   18224:	2d bf       	out	0x3d, r18	; 61
   18226:	0d cf       	rjmp	.-486    	; 0x18042 <PubSubClient::loop()+0xd2>
   18228:	4e 1b       	sub	r20, r30
   1822a:	5f 0b       	sbc	r21, r31
   1822c:	43 50       	subi	r20, 0x03	; 3
   1822e:	51 09       	sbc	r21, r1
   18230:	2d 5f       	subi	r18, 0xFD	; 253
   18232:	3f 4f       	sbci	r19, 0xFF	; 255
   18234:	e2 0f       	add	r30, r18
   18236:	f3 1f       	adc	r31, r19
   18238:	b7 01       	movw	r22, r14
   1823a:	6e 0f       	add	r22, r30
   1823c:	7f 1f       	adc	r23, r31
   1823e:	f3 01       	movw	r30, r6
   18240:	19 95       	eicall
   18242:	ea cf       	rjmp	.-44     	; 0x18218 <PubSubClient::loop()+0x2a8>
   18244:	80 3c       	cpi	r24, 0xC0	; 192
   18246:	a1 f4       	brne	.+40     	; 0x18270 <PubSubClient::loop()+0x300>
   18248:	80 ed       	ldi	r24, 0xD0	; 208
   1824a:	12 96       	adiw	r26, 0x02	; 2
   1824c:	8c 93       	st	X, r24
   1824e:	12 97       	sbiw	r26, 0x02	; 2
   18250:	13 96       	adiw	r26, 0x03	; 3
   18252:	1c 92       	st	X, r1
   18254:	f8 01       	movw	r30, r16
   18256:	81 91       	ld	r24, Z+
   18258:	91 91       	ld	r25, Z+
   1825a:	bf 01       	movw	r22, r30
   1825c:	dc 01       	movw	r26, r24
   1825e:	ed 91       	ld	r30, X+
   18260:	fc 91       	ld	r31, X
   18262:	02 80       	ldd	r0, Z+2	; 0x02
   18264:	f3 81       	ldd	r31, Z+3	; 0x03
   18266:	e0 2d       	mov	r30, r0
   18268:	42 e0       	ldi	r20, 0x02	; 2
   1826a:	50 e0       	ldi	r21, 0x00	; 0
   1826c:	19 95       	eicall
   1826e:	e9 ce       	rjmp	.-558    	; 0x18042 <PubSubClient::loop()+0xd2>
   18270:	80 3d       	cpi	r24, 0xD0	; 208
   18272:	09 f0       	breq	.+2      	; 0x18276 <PubSubClient::loop()+0x306>
   18274:	e6 ce       	rjmp	.-564    	; 0x18042 <PubSubClient::loop()+0xd2>
   18276:	f8 01       	movw	r30, r16
   18278:	e4 5f       	subi	r30, 0xF4	; 244
   1827a:	fd 4f       	sbci	r31, 0xFD	; 253
   1827c:	10 82       	st	Z, r1
   1827e:	e1 ce       	rjmp	.-574    	; 0x18042 <PubSubClient::loop()+0xd2>

00018280 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)>:
_ZN12PubSubClient7publishEPKcPKhjb():
   18280:	9f 92       	push	r9
   18282:	af 92       	push	r10
   18284:	bf 92       	push	r11
   18286:	cf 92       	push	r12
   18288:	df 92       	push	r13
   1828a:	ef 92       	push	r14
   1828c:	ff 92       	push	r15
   1828e:	0f 93       	push	r16
   18290:	1f 93       	push	r17
   18292:	cf 93       	push	r28
   18294:	df 93       	push	r29
   18296:	ec 01       	movw	r28, r24
   18298:	6b 01       	movw	r12, r22
   1829a:	94 2e       	mov	r9, r20
   1829c:	15 2f       	mov	r17, r21
   1829e:	79 01       	movw	r14, r18
   182a0:	0e 94 15 be 	call	0x17c2a	; 0x17c2a <PubSubClient::connected()>
   182a4:	88 23       	and	r24, r24
   182a6:	09 f4       	brne	.+2      	; 0x182aa <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x2a>
   182a8:	41 c0       	rjmp	.+130    	; 0x1832c <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0xac>
   182aa:	f6 01       	movw	r30, r12
   182ac:	01 90       	ld	r0, Z+
   182ae:	00 20       	and	r0, r0
   182b0:	e9 f7       	brne	.-6      	; 0x182ac <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x2c>
   182b2:	31 97       	sbiw	r30, 0x01	; 1
   182b4:	ec 19       	sub	r30, r12
   182b6:	fd 09       	sbc	r31, r13
   182b8:	c7 01       	movw	r24, r14
   182ba:	07 96       	adiw	r24, 0x07	; 7
   182bc:	e8 0f       	add	r30, r24
   182be:	f9 1f       	adc	r31, r25
   182c0:	e1 30       	cpi	r30, 0x01	; 1
   182c2:	f2 40       	sbci	r31, 0x02	; 2
   182c4:	98 f5       	brcc	.+102    	; 0x1832c <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0xac>
   182c6:	5e 01       	movw	r10, r28
   182c8:	82 e0       	ldi	r24, 0x02	; 2
   182ca:	a8 0e       	add	r10, r24
   182cc:	b1 1c       	adc	r11, r1
   182ce:	25 e0       	ldi	r18, 0x05	; 5
   182d0:	30 e0       	ldi	r19, 0x00	; 0
   182d2:	a5 01       	movw	r20, r10
   182d4:	b6 01       	movw	r22, r12
   182d6:	ce 01       	movw	r24, r28
   182d8:	0e 94 f3 bd 	call	0x17be6	; 0x17be6 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   182dc:	e9 2d       	mov	r30, r9
   182de:	f1 2f       	mov	r31, r17
   182e0:	dc 01       	movw	r26, r24
   182e2:	12 96       	adiw	r26, 0x02	; 2
   182e4:	ac 0f       	add	r26, r28
   182e6:	bd 1f       	adc	r27, r29
   182e8:	af 01       	movw	r20, r30
   182ea:	4e 0d       	add	r20, r14
   182ec:	5f 1d       	adc	r21, r15
   182ee:	e4 17       	cp	r30, r20
   182f0:	f5 07       	cpc	r31, r21
   182f2:	19 f0       	breq	.+6      	; 0x182fa <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x7a>
   182f4:	21 91       	ld	r18, Z+
   182f6:	2d 93       	st	X+, r18
   182f8:	fa cf       	rjmp	.-12     	; 0x182ee <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x6e>
   182fa:	25 e0       	ldi	r18, 0x05	; 5
   182fc:	e2 1a       	sub	r14, r18
   182fe:	f1 08       	sbc	r15, r1
   18300:	61 e3       	ldi	r22, 0x31	; 49
   18302:	01 11       	cpse	r16, r1
   18304:	01 c0       	rjmp	.+2      	; 0x18308 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x88>
   18306:	60 e3       	ldi	r22, 0x30	; 48
   18308:	9c 01       	movw	r18, r24
   1830a:	2e 0d       	add	r18, r14
   1830c:	3f 1d       	adc	r19, r15
   1830e:	a5 01       	movw	r20, r10
   18310:	ce 01       	movw	r24, r28
   18312:	df 91       	pop	r29
   18314:	cf 91       	pop	r28
   18316:	1f 91       	pop	r17
   18318:	0f 91       	pop	r16
   1831a:	ff 90       	pop	r15
   1831c:	ef 90       	pop	r14
   1831e:	df 90       	pop	r13
   18320:	cf 90       	pop	r12
   18322:	bf 90       	pop	r11
   18324:	af 90       	pop	r10
   18326:	9f 90       	pop	r9
   18328:	0c 94 85 bd 	jmp	0x17b0a	; 0x17b0a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   1832c:	80 e0       	ldi	r24, 0x00	; 0
   1832e:	df 91       	pop	r29
   18330:	cf 91       	pop	r28
   18332:	1f 91       	pop	r17
   18334:	0f 91       	pop	r16
   18336:	ff 90       	pop	r15
   18338:	ef 90       	pop	r14
   1833a:	df 90       	pop	r13
   1833c:	cf 90       	pop	r12
   1833e:	bf 90       	pop	r11
   18340:	af 90       	pop	r10
   18342:	9f 90       	pop	r9
   18344:	08 95       	ret

00018346 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
   18346:	0f 93       	push	r16
   18348:	fa 01       	movw	r30, r20
   1834a:	01 90       	ld	r0, Z+
   1834c:	00 20       	and	r0, r0
   1834e:	e9 f7       	brne	.-6      	; 0x1834a <PubSubClient::publish(char const*, char const*)+0x4>
   18350:	31 97       	sbiw	r30, 0x01	; 1
   18352:	9f 01       	movw	r18, r30
   18354:	24 1b       	sub	r18, r20
   18356:	35 0b       	sbc	r19, r21
   18358:	00 e0       	ldi	r16, 0x00	; 0
   1835a:	0e 94 40 c1 	call	0x18280	; 0x18280 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)>
   1835e:	0f 91       	pop	r16
   18360:	08 95       	ret

00018362 <PubSubClient::subscribe(char const*, unsigned char)>:
_ZN12PubSubClient9subscribeEPKch():
   18362:	df 92       	push	r13
   18364:	ef 92       	push	r14
   18366:	ff 92       	push	r15
   18368:	0f 93       	push	r16
   1836a:	1f 93       	push	r17
   1836c:	cf 93       	push	r28
   1836e:	df 93       	push	r29
   18370:	42 30       	cpi	r20, 0x02	; 2
   18372:	08 f0       	brcs	.+2      	; 0x18376 <PubSubClient::subscribe(char const*, unsigned char)+0x14>
   18374:	41 c0       	rjmp	.+130    	; 0x183f8 <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   18376:	fb 01       	movw	r30, r22
   18378:	01 90       	ld	r0, Z+
   1837a:	00 20       	and	r0, r0
   1837c:	e9 f7       	brne	.-6      	; 0x18378 <PubSubClient::subscribe(char const*, unsigned char)+0x16>
   1837e:	9f 01       	movw	r18, r30
   18380:	26 1b       	sub	r18, r22
   18382:	37 0b       	sbc	r19, r23
   18384:	28 5f       	subi	r18, 0xF8	; 248
   18386:	3f 4f       	sbci	r19, 0xFF	; 255
   18388:	21 30       	cpi	r18, 0x01	; 1
   1838a:	32 40       	sbci	r19, 0x02	; 2
   1838c:	a8 f5       	brcc	.+106    	; 0x183f8 <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   1838e:	d4 2e       	mov	r13, r20
   18390:	8b 01       	movw	r16, r22
   18392:	ec 01       	movw	r28, r24
   18394:	0e 94 15 be 	call	0x17c2a	; 0x17c2a <PubSubClient::connected()>
   18398:	88 23       	and	r24, r24
   1839a:	71 f1       	breq	.+92     	; 0x183f8 <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   1839c:	fe 01       	movw	r30, r28
   1839e:	ee 5f       	subi	r30, 0xFE	; 254
   183a0:	fd 4f       	sbci	r31, 0xFD	; 253
   183a2:	80 81       	ld	r24, Z
   183a4:	91 81       	ldd	r25, Z+1	; 0x01
   183a6:	01 96       	adiw	r24, 0x01	; 1
   183a8:	21 f1       	breq	.+72     	; 0x183f2 <PubSubClient::subscribe(char const*, unsigned char)+0x90>
   183aa:	91 83       	std	Z+1, r25	; 0x01
   183ac:	80 83       	st	Z, r24
   183ae:	80 81       	ld	r24, Z
   183b0:	91 81       	ldd	r25, Z+1	; 0x01
   183b2:	9f 83       	std	Y+7, r25	; 0x07
   183b4:	88 87       	std	Y+8, r24	; 0x08
   183b6:	7e 01       	movw	r14, r28
   183b8:	52 e0       	ldi	r21, 0x02	; 2
   183ba:	e5 0e       	add	r14, r21
   183bc:	f1 1c       	adc	r15, r1
   183be:	27 e0       	ldi	r18, 0x07	; 7
   183c0:	30 e0       	ldi	r19, 0x00	; 0
   183c2:	a7 01       	movw	r20, r14
   183c4:	b8 01       	movw	r22, r16
   183c6:	ce 01       	movw	r24, r28
   183c8:	0e 94 f3 bd 	call	0x17be6	; 0x17be6 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   183cc:	fe 01       	movw	r30, r28
   183ce:	e8 0f       	add	r30, r24
   183d0:	f9 1f       	adc	r31, r25
   183d2:	d2 82       	std	Z+2, r13	; 0x02
   183d4:	9c 01       	movw	r18, r24
   183d6:	24 50       	subi	r18, 0x04	; 4
   183d8:	31 09       	sbc	r19, r1
   183da:	a7 01       	movw	r20, r14
   183dc:	62 e8       	ldi	r22, 0x82	; 130
   183de:	ce 01       	movw	r24, r28
   183e0:	df 91       	pop	r29
   183e2:	cf 91       	pop	r28
   183e4:	1f 91       	pop	r17
   183e6:	0f 91       	pop	r16
   183e8:	ff 90       	pop	r15
   183ea:	ef 90       	pop	r14
   183ec:	df 90       	pop	r13
   183ee:	0c 94 85 bd 	jmp	0x17b0a	; 0x17b0a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   183f2:	81 e0       	ldi	r24, 0x01	; 1
   183f4:	90 e0       	ldi	r25, 0x00	; 0
   183f6:	d9 cf       	rjmp	.-78     	; 0x183aa <PubSubClient::subscribe(char const*, unsigned char)+0x48>
   183f8:	80 e0       	ldi	r24, 0x00	; 0
   183fa:	df 91       	pop	r29
   183fc:	cf 91       	pop	r28
   183fe:	1f 91       	pop	r17
   18400:	0f 91       	pop	r16
   18402:	ff 90       	pop	r15
   18404:	ef 90       	pop	r14
   18406:	df 90       	pop	r13
   18408:	08 95       	ret

0001840a <PubSubClient::subscribe(char const*)>:
_ZN12PubSubClient9subscribeEPKc():
   1840a:	40 e0       	ldi	r20, 0x00	; 0
   1840c:	0c 94 b1 c1 	jmp	0x18362	; 0x18362 <PubSubClient::subscribe(char const*, unsigned char)>

00018410 <PubSubClient::unsubscribe(char const*)>:
_ZN12PubSubClient11unsubscribeEPKc():
   18410:	ef 92       	push	r14
   18412:	ff 92       	push	r15
   18414:	0f 93       	push	r16
   18416:	1f 93       	push	r17
   18418:	cf 93       	push	r28
   1841a:	df 93       	push	r29
   1841c:	fb 01       	movw	r30, r22
   1841e:	01 90       	ld	r0, Z+
   18420:	00 20       	and	r0, r0
   18422:	e9 f7       	brne	.-6      	; 0x1841e <PubSubClient::unsubscribe(char const*)+0xe>
   18424:	9f 01       	movw	r18, r30
   18426:	26 1b       	sub	r18, r22
   18428:	37 0b       	sbc	r19, r23
   1842a:	28 5f       	subi	r18, 0xF8	; 248
   1842c:	3f 4f       	sbci	r19, 0xFF	; 255
   1842e:	21 30       	cpi	r18, 0x01	; 1
   18430:	32 40       	sbci	r19, 0x02	; 2
   18432:	78 f5       	brcc	.+94     	; 0x18492 <PubSubClient::unsubscribe(char const*)+0x82>
   18434:	8b 01       	movw	r16, r22
   18436:	ec 01       	movw	r28, r24
   18438:	0e 94 15 be 	call	0x17c2a	; 0x17c2a <PubSubClient::connected()>
   1843c:	88 23       	and	r24, r24
   1843e:	49 f1       	breq	.+82     	; 0x18492 <PubSubClient::unsubscribe(char const*)+0x82>
   18440:	fe 01       	movw	r30, r28
   18442:	ee 5f       	subi	r30, 0xFE	; 254
   18444:	fd 4f       	sbci	r31, 0xFD	; 253
   18446:	80 81       	ld	r24, Z
   18448:	91 81       	ldd	r25, Z+1	; 0x01
   1844a:	01 96       	adiw	r24, 0x01	; 1
   1844c:	f9 f0       	breq	.+62     	; 0x1848c <PubSubClient::unsubscribe(char const*)+0x7c>
   1844e:	91 83       	std	Z+1, r25	; 0x01
   18450:	80 83       	st	Z, r24
   18452:	80 81       	ld	r24, Z
   18454:	91 81       	ldd	r25, Z+1	; 0x01
   18456:	9f 83       	std	Y+7, r25	; 0x07
   18458:	88 87       	std	Y+8, r24	; 0x08
   1845a:	7e 01       	movw	r14, r28
   1845c:	42 e0       	ldi	r20, 0x02	; 2
   1845e:	e4 0e       	add	r14, r20
   18460:	f1 1c       	adc	r15, r1
   18462:	27 e0       	ldi	r18, 0x07	; 7
   18464:	30 e0       	ldi	r19, 0x00	; 0
   18466:	a7 01       	movw	r20, r14
   18468:	b8 01       	movw	r22, r16
   1846a:	ce 01       	movw	r24, r28
   1846c:	0e 94 f3 bd 	call	0x17be6	; 0x17be6 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   18470:	9c 01       	movw	r18, r24
   18472:	25 50       	subi	r18, 0x05	; 5
   18474:	31 09       	sbc	r19, r1
   18476:	a7 01       	movw	r20, r14
   18478:	62 ea       	ldi	r22, 0xA2	; 162
   1847a:	ce 01       	movw	r24, r28
   1847c:	df 91       	pop	r29
   1847e:	cf 91       	pop	r28
   18480:	1f 91       	pop	r17
   18482:	0f 91       	pop	r16
   18484:	ff 90       	pop	r15
   18486:	ef 90       	pop	r14
   18488:	0c 94 85 bd 	jmp	0x17b0a	; 0x17b0a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   1848c:	81 e0       	ldi	r24, 0x01	; 1
   1848e:	90 e0       	ldi	r25, 0x00	; 0
   18490:	de cf       	rjmp	.-68     	; 0x1844e <PubSubClient::unsubscribe(char const*)+0x3e>
   18492:	80 e0       	ldi	r24, 0x00	; 0
   18494:	df 91       	pop	r29
   18496:	cf 91       	pop	r28
   18498:	1f 91       	pop	r17
   1849a:	0f 91       	pop	r16
   1849c:	ff 90       	pop	r15
   1849e:	ef 90       	pop	r14
   184a0:	08 95       	ret

000184a2 <PubSubClient::setServer(unsigned char*, unsigned int)>:
_ZN12PubSubClient9setServerEPhj():
   184a2:	cf 92       	push	r12
   184a4:	df 92       	push	r13
   184a6:	ef 92       	push	r14
   184a8:	ff 92       	push	r15
   184aa:	0f 93       	push	r16
   184ac:	cf 93       	push	r28
   184ae:	df 93       	push	r29
   184b0:	cd b7       	in	r28, 0x3d	; 61
   184b2:	de b7       	in	r29, 0x3e	; 62
   184b4:	2c 97       	sbiw	r28, 0x0c	; 12
   184b6:	0f b6       	in	r0, 0x3f	; 63
   184b8:	f8 94       	cli
   184ba:	de bf       	out	0x3e, r29	; 62
   184bc:	0f be       	out	0x3f, r0	; 63
   184be:	cd bf       	out	0x3d, r28	; 61
   184c0:	7c 01       	movw	r14, r24
   184c2:	fb 01       	movw	r30, r22
   184c4:	6a 01       	movw	r12, r20
   184c6:	03 81       	ldd	r16, Z+3	; 0x03
   184c8:	22 81       	ldd	r18, Z+2	; 0x02
   184ca:	41 81       	ldd	r20, Z+1	; 0x01
   184cc:	60 81       	ld	r22, Z
   184ce:	ce 01       	movw	r24, r28
   184d0:	07 96       	adiw	r24, 0x07	; 7
   184d2:	0e 94 9e d4 	call	0x1a93c	; 0x1a93c <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN9IPAddressC4ERKS_():
   184d6:	89 85       	ldd	r24, Y+9	; 0x09
   184d8:	9a 85       	ldd	r25, Y+10	; 0x0a
   184da:	ab 85       	ldd	r26, Y+11	; 0x0b
   184dc:	bc 85       	ldd	r27, Y+12	; 0x0c
_ZN9IPAddressaSERKS_():
   184de:	f7 01       	movw	r30, r14
   184e0:	e1 5f       	subi	r30, 0xF1	; 241
   184e2:	fd 4f       	sbci	r31, 0xFD	; 253
   184e4:	82 83       	std	Z+2, r24	; 0x02
   184e6:	93 83       	std	Z+3, r25	; 0x03
   184e8:	a4 83       	std	Z+4, r26	; 0x04
   184ea:	b5 83       	std	Z+5, r27	; 0x05
_ZN12PubSubClient9setServerE9IPAddressj():
   184ec:	38 96       	adiw	r30, 0x08	; 8
   184ee:	d1 82       	std	Z+1, r13	; 0x01
   184f0:	c0 82       	st	Z, r12
   184f2:	32 97       	sbiw	r30, 0x02	; 2
   184f4:	11 82       	std	Z+1, r1	; 0x01
   184f6:	10 82       	st	Z, r1
_ZN12PubSubClient9setServerEPhj():
   184f8:	c7 01       	movw	r24, r14
   184fa:	2c 96       	adiw	r28, 0x0c	; 12
   184fc:	0f b6       	in	r0, 0x3f	; 63
   184fe:	f8 94       	cli
   18500:	de bf       	out	0x3e, r29	; 62
   18502:	0f be       	out	0x3f, r0	; 63
   18504:	cd bf       	out	0x3d, r28	; 61
   18506:	df 91       	pop	r29
   18508:	cf 91       	pop	r28
   1850a:	0f 91       	pop	r16
   1850c:	ff 90       	pop	r15
   1850e:	ef 90       	pop	r14
   18510:	df 90       	pop	r13
   18512:	cf 90       	pop	r12
   18514:	08 95       	ret

00018516 <PubSubClient::setCallback(void (*)(char*, unsigned char*, unsigned int))>:
_ZN12PubSubClient11setCallbackEPFvPcPhjE():
   18516:	fc 01       	movw	r30, r24
   18518:	e3 5f       	subi	r30, 0xF3	; 243
   1851a:	fd 4f       	sbci	r31, 0xFD	; 253
   1851c:	71 83       	std	Z+1, r23	; 0x01
   1851e:	60 83       	st	Z, r22
   18520:	08 95       	ret

00018522 <PubSubClient::state()>:
_ZN12PubSubClient5stateEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:589

int PubSubClient::state() {
    return this->_state;
   18522:	85 5e       	subi	r24, 0xE5	; 229
   18524:	9d 4f       	sbci	r25, 0xFD	; 253
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:590
}
   18526:	fc 01       	movw	r30, r24
   18528:	80 81       	ld	r24, Z
   1852a:	91 81       	ldd	r25, Z+1	; 0x01
   1852c:	08 95       	ret

0001852e <_GLOBAL__sub_I__ZN12PubSubClientC2Ev>:
_GLOBAL__sub_I__ZN12PubSubClientC2Ev():
   1852e:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   18530:	00 e0       	ldi	r16, 0x00	; 0
   18532:	20 e0       	ldi	r18, 0x00	; 0
   18534:	40 e0       	ldi	r20, 0x00	; 0
   18536:	60 e0       	ldi	r22, 0x00	; 0
   18538:	8b e2       	ldi	r24, 0x2B	; 43
   1853a:	91 e1       	ldi	r25, 0x11	; 17
   1853c:	0e 94 9e d4 	call	0x1a93c	; 0x1a93c <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN12PubSubClientC2Ev():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:590
   18540:	0f 91       	pop	r16
   18542:	08 95       	ret

00018544 <RF24::csn(bool)>:
_ZN4RF243csnEb():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1552
    config |= _BV(EN_CRC);
  }
  else
  {
    config |= _BV(EN_CRC);
    config |= _BV( CRCO );
   18544:	cf 93       	push	r28
   18546:	df 93       	push	r29
   18548:	ec 01       	movw	r28, r24
_ZN8SPIClass11setBitOrderEh():
   1854a:	8c b5       	in	r24, 0x2c	; 44
   1854c:	8f 7d       	andi	r24, 0xDF	; 223
   1854e:	8c bd       	out	0x2c, r24	; 44
_ZN8SPIClass11setDataModeEh():
   18550:	8c b5       	in	r24, 0x2c	; 44
   18552:	83 7f       	andi	r24, 0xF3	; 243
   18554:	8c bd       	out	0x2c, r24	; 44
_ZN8SPIClass15setClockDividerEh():
   18556:	8c b5       	in	r24, 0x2c	; 44
   18558:	8c 7f       	andi	r24, 0xFC	; 252
   1855a:	8c bd       	out	0x2c, r24	; 44
   1855c:	8d b5       	in	r24, 0x2d	; 45
   1855e:	81 60       	ori	r24, 0x01	; 1
   18560:	8d bd       	out	0x2d, r24	; 45
_ZN4RF243csnEb():
   18562:	8a 81       	ldd	r24, Y+2	; 0x02
   18564:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
   18568:	8c 89       	ldd	r24, Y+20	; 0x14
   1856a:	9d 89       	ldd	r25, Y+21	; 0x15
   1856c:	df 91       	pop	r29
   1856e:	cf 91       	pop	r28
   18570:	0c 94 90 d1 	jmp	0x1a320	; 0x1a320 <delayMicroseconds>

00018574 <RF24::ce(bool)>:
_ZN4RF242ceEb():
   18574:	fc 01       	movw	r30, r24
   18576:	20 81       	ld	r18, Z
   18578:	31 81       	ldd	r19, Z+1	; 0x01
   1857a:	82 81       	ldd	r24, Z+2	; 0x02
   1857c:	93 81       	ldd	r25, Z+3	; 0x03
   1857e:	28 17       	cp	r18, r24
   18580:	39 07       	cpc	r19, r25
   18582:	19 f0       	breq	.+6      	; 0x1858a <RF24::ce(bool)+0x16>
   18584:	82 2f       	mov	r24, r18
   18586:	0c 94 84 d2 	jmp	0x1a508	; 0x1a508 <digitalWrite>
   1858a:	08 95       	ret

0001858c <RF24::beginTransaction()>:
_ZN4RF2416beginTransactionEv():
   1858c:	60 e0       	ldi	r22, 0x00	; 0
   1858e:	0c 94 a2 c2 	jmp	0x18544	; 0x18544 <RF24::csn(bool)>

00018592 <RF24::endTransaction()>:
_ZN4RF2414endTransactionEv():
   18592:	61 e0       	ldi	r22, 0x01	; 1
   18594:	0c 94 a2 c2 	jmp	0x18544	; 0x18544 <RF24::csn(bool)>

00018598 <RF24::read_register(unsigned char, unsigned char*, unsigned char)>:
_ZN4RF2413read_registerEhPhh():
   18598:	cf 92       	push	r12
   1859a:	df 92       	push	r13
   1859c:	ef 92       	push	r14
   1859e:	ff 92       	push	r15
   185a0:	0f 93       	push	r16
   185a2:	1f 93       	push	r17
   185a4:	cf 93       	push	r28
   185a6:	df 93       	push	r29
   185a8:	7c 01       	movw	r14, r24
   185aa:	c6 2f       	mov	r28, r22
   185ac:	6a 01       	movw	r12, r20
   185ae:	12 2f       	mov	r17, r18
   185b0:	0e 94 c6 c2 	call	0x1858c	; 0x1858c <RF24::beginTransaction()>
   185b4:	8c 2f       	mov	r24, r28
   185b6:	8f 71       	andi	r24, 0x1F	; 31
   185b8:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   185bc:	08 2f       	mov	r16, r24
   185be:	e6 01       	movw	r28, r12
   185c0:	11 50       	subi	r17, 0x01	; 1
   185c2:	28 f0       	brcs	.+10     	; 0x185ce <RF24::read_register(unsigned char, unsigned char*, unsigned char)+0x36>
   185c4:	8f ef       	ldi	r24, 0xFF	; 255
   185c6:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   185ca:	89 93       	st	Y+, r24
   185cc:	f9 cf       	rjmp	.-14     	; 0x185c0 <RF24::read_register(unsigned char, unsigned char*, unsigned char)+0x28>
   185ce:	c7 01       	movw	r24, r14
   185d0:	0e 94 c9 c2 	call	0x18592	; 0x18592 <RF24::endTransaction()>
   185d4:	80 2f       	mov	r24, r16
   185d6:	df 91       	pop	r29
   185d8:	cf 91       	pop	r28
   185da:	1f 91       	pop	r17
   185dc:	0f 91       	pop	r16
   185de:	ff 90       	pop	r15
   185e0:	ef 90       	pop	r14
   185e2:	df 90       	pop	r13
   185e4:	cf 90       	pop	r12
   185e6:	08 95       	ret

000185e8 <RF24::read_register(unsigned char)>:
_ZN4RF2413read_registerEh():
   185e8:	1f 93       	push	r17
   185ea:	cf 93       	push	r28
   185ec:	df 93       	push	r29
   185ee:	ec 01       	movw	r28, r24
   185f0:	16 2f       	mov	r17, r22
   185f2:	0e 94 c6 c2 	call	0x1858c	; 0x1858c <RF24::beginTransaction()>
   185f6:	81 2f       	mov	r24, r17
   185f8:	8f 71       	andi	r24, 0x1F	; 31
   185fa:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   185fe:	8f ef       	ldi	r24, 0xFF	; 255
   18600:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   18604:	18 2f       	mov	r17, r24
   18606:	ce 01       	movw	r24, r28
   18608:	0e 94 c9 c2 	call	0x18592	; 0x18592 <RF24::endTransaction()>
   1860c:	81 2f       	mov	r24, r17
   1860e:	df 91       	pop	r29
   18610:	cf 91       	pop	r28
   18612:	1f 91       	pop	r17
   18614:	08 95       	ret

00018616 <RF24::write_register(unsigned char, unsigned char)>:
_ZN4RF2414write_registerEhh():
   18616:	0f 93       	push	r16
   18618:	1f 93       	push	r17
   1861a:	cf 93       	push	r28
   1861c:	df 93       	push	r29
   1861e:	8c 01       	movw	r16, r24
   18620:	c6 2f       	mov	r28, r22
   18622:	d4 2f       	mov	r29, r20
   18624:	0e 94 c6 c2 	call	0x1858c	; 0x1858c <RF24::beginTransaction()>
   18628:	8c 2f       	mov	r24, r28
   1862a:	8f 71       	andi	r24, 0x1F	; 31
   1862c:	80 62       	ori	r24, 0x20	; 32
   1862e:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   18632:	c8 2f       	mov	r28, r24
   18634:	8d 2f       	mov	r24, r29
   18636:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   1863a:	c8 01       	movw	r24, r16
   1863c:	0e 94 c9 c2 	call	0x18592	; 0x18592 <RF24::endTransaction()>
   18640:	8c 2f       	mov	r24, r28
   18642:	df 91       	pop	r29
   18644:	cf 91       	pop	r28
   18646:	1f 91       	pop	r17
   18648:	0f 91       	pop	r16
   1864a:	08 95       	ret

0001864c <RF24::spiTrans(unsigned char)>:
_ZN4RF248spiTransEh():
   1864c:	1f 93       	push	r17
   1864e:	cf 93       	push	r28
   18650:	df 93       	push	r29
   18652:	ec 01       	movw	r28, r24
   18654:	16 2f       	mov	r17, r22
   18656:	0e 94 c6 c2 	call	0x1858c	; 0x1858c <RF24::beginTransaction()>
   1865a:	81 2f       	mov	r24, r17
   1865c:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   18660:	18 2f       	mov	r17, r24
   18662:	ce 01       	movw	r24, r28
   18664:	0e 94 c9 c2 	call	0x18592	; 0x18592 <RF24::endTransaction()>
   18668:	81 2f       	mov	r24, r17
   1866a:	df 91       	pop	r29
   1866c:	cf 91       	pop	r28
   1866e:	1f 91       	pop	r17
   18670:	08 95       	ret

00018672 <RF24::flush_rx()>:
_ZN4RF248flush_rxEv():
   18672:	62 ee       	ldi	r22, 0xE2	; 226
   18674:	0c 94 26 c3 	jmp	0x1864c	; 0x1864c <RF24::spiTrans(unsigned char)>

00018678 <RF24::flush_tx()>:
_ZN4RF248flush_txEv():
   18678:	61 ee       	ldi	r22, 0xE1	; 225
   1867a:	0c 94 26 c3 	jmp	0x1864c	; 0x1864c <RF24::spiTrans(unsigned char)>

0001867e <RF24::get_status()>:
_ZN4RF2410get_statusEv():
   1867e:	6f ef       	ldi	r22, 0xFF	; 255
   18680:	0c 94 26 c3 	jmp	0x1864c	; 0x1864c <RF24::spiTrans(unsigned char)>

00018684 <RF24::print_status(unsigned char)>:
_ZN4RF2412print_statusEh():
   18684:	86 2f       	mov	r24, r22
   18686:	90 e0       	ldi	r25, 0x00	; 0
   18688:	26 2f       	mov	r18, r22
   1868a:	21 70       	andi	r18, 0x01	; 1
   1868c:	1f 92       	push	r1
   1868e:	2f 93       	push	r18
   18690:	9c 01       	movw	r18, r24
   18692:	35 95       	asr	r19
   18694:	27 95       	ror	r18
   18696:	27 70       	andi	r18, 0x07	; 7
   18698:	33 27       	eor	r19, r19
   1869a:	3f 93       	push	r19
   1869c:	2f 93       	push	r18
   1869e:	64 fb       	bst	r22, 4
   186a0:	99 27       	eor	r25, r25
   186a2:	90 f9       	bld	r25, 0
   186a4:	1f 92       	push	r1
   186a6:	9f 93       	push	r25
   186a8:	65 fb       	bst	r22, 5
   186aa:	99 27       	eor	r25, r25
   186ac:	90 f9       	bld	r25, 0
   186ae:	1f 92       	push	r1
   186b0:	9f 93       	push	r25
   186b2:	66 fb       	bst	r22, 6
   186b4:	88 27       	eor	r24, r24
   186b6:	80 f9       	bld	r24, 0
   186b8:	1f 92       	push	r1
   186ba:	8f 93       	push	r24
   186bc:	1f 92       	push	r1
   186be:	6f 93       	push	r22
   186c0:	83 ec       	ldi	r24, 0xC3	; 195
   186c2:	92 e6       	ldi	r25, 0x62	; 98
   186c4:	9f 93       	push	r25
   186c6:	8f 93       	push	r24
   186c8:	0e 94 5b dd 	call	0x1bab6	; 0x1bab6 <printf_P>
   186cc:	8d b7       	in	r24, 0x3d	; 61
   186ce:	9e b7       	in	r25, 0x3e	; 62
   186d0:	0e 96       	adiw	r24, 0x0e	; 14
   186d2:	0f b6       	in	r0, 0x3f	; 63
   186d4:	f8 94       	cli
   186d6:	9e bf       	out	0x3e, r25	; 62
   186d8:	0f be       	out	0x3f, r0	; 63
   186da:	8d bf       	out	0x3d, r24	; 61
   186dc:	08 95       	ret

000186de <RF24::print_byte_register(char const*, unsigned char, unsigned char)>:
_ZN4RF2419print_byte_registerEPKchh():
   186de:	cf 92       	push	r12
   186e0:	df 92       	push	r13
   186e2:	ff 92       	push	r15
   186e4:	0f 93       	push	r16
   186e6:	1f 93       	push	r17
   186e8:	cf 93       	push	r28
   186ea:	df 93       	push	r29
   186ec:	6c 01       	movw	r12, r24
   186ee:	c4 2f       	mov	r28, r20
   186f0:	d2 2f       	mov	r29, r18
   186f2:	7f 93       	push	r23
   186f4:	6f 93       	push	r22
   186f6:	8d eb       	ldi	r24, 0xBD	; 189
   186f8:	92 e6       	ldi	r25, 0x62	; 98
   186fa:	9f 93       	push	r25
   186fc:	8f 93       	push	r24
   186fe:	0e 94 5b dd 	call	0x1bab6	; 0x1bab6 <printf_P>
   18702:	dc 0f       	add	r29, r28
   18704:	0f 90       	pop	r0
   18706:	0f 90       	pop	r0
   18708:	0f 90       	pop	r0
   1870a:	0f 90       	pop	r0
   1870c:	05 eb       	ldi	r16, 0xB5	; 181
   1870e:	12 e6       	ldi	r17, 0x62	; 98
   18710:	cd 17       	cp	r28, r29
   18712:	99 f0       	breq	.+38     	; 0x1873a <RF24::print_byte_register(char const*, unsigned char, unsigned char)+0x5c>
   18714:	ff 24       	eor	r15, r15
   18716:	f3 94       	inc	r15
   18718:	fc 0e       	add	r15, r28
   1871a:	6c 2f       	mov	r22, r28
   1871c:	c6 01       	movw	r24, r12
   1871e:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <RF24::read_register(unsigned char)>
   18722:	1f 92       	push	r1
   18724:	8f 93       	push	r24
   18726:	1f 93       	push	r17
   18728:	0f 93       	push	r16
   1872a:	0e 94 5b dd 	call	0x1bab6	; 0x1bab6 <printf_P>
   1872e:	0f 90       	pop	r0
   18730:	0f 90       	pop	r0
   18732:	0f 90       	pop	r0
   18734:	0f 90       	pop	r0
   18736:	cf 2d       	mov	r28, r15
   18738:	eb cf       	rjmp	.-42     	; 0x18710 <RF24::print_byte_register(char const*, unsigned char, unsigned char)+0x32>
   1873a:	82 eb       	ldi	r24, 0xB2	; 178
   1873c:	92 e6       	ldi	r25, 0x62	; 98
   1873e:	9f 93       	push	r25
   18740:	8f 93       	push	r24
   18742:	0e 94 5b dd 	call	0x1bab6	; 0x1bab6 <printf_P>
   18746:	0f 90       	pop	r0
   18748:	0f 90       	pop	r0
   1874a:	df 91       	pop	r29
   1874c:	cf 91       	pop	r28
   1874e:	1f 91       	pop	r17
   18750:	0f 91       	pop	r16
   18752:	ff 90       	pop	r15
   18754:	df 90       	pop	r13
   18756:	cf 90       	pop	r12
   18758:	08 95       	ret

0001875a <RF24::print_address_register(char const*, unsigned char, unsigned char)>:
_ZN4RF2422print_address_registerEPKchh():
   1875a:	2f 92       	push	r2
   1875c:	3f 92       	push	r3
   1875e:	4f 92       	push	r4
   18760:	5f 92       	push	r5
   18762:	6f 92       	push	r6
   18764:	7f 92       	push	r7
   18766:	8f 92       	push	r8
   18768:	9f 92       	push	r9
   1876a:	af 92       	push	r10
   1876c:	bf 92       	push	r11
   1876e:	cf 92       	push	r12
   18770:	df 92       	push	r13
   18772:	ef 92       	push	r14
   18774:	ff 92       	push	r15
   18776:	0f 93       	push	r16
   18778:	1f 93       	push	r17
   1877a:	cf 93       	push	r28
   1877c:	df 93       	push	r29
   1877e:	1f 92       	push	r1
   18780:	cd b7       	in	r28, 0x3d	; 61
   18782:	de b7       	in	r29, 0x3e	; 62
   18784:	6c 01       	movw	r12, r24
   18786:	24 2e       	mov	r2, r20
   18788:	32 2e       	mov	r3, r18
   1878a:	4d b6       	in	r4, 0x3d	; 61
   1878c:	5e b6       	in	r5, 0x3e	; 62
   1878e:	7f 93       	push	r23
   18790:	6f 93       	push	r22
   18792:	8c ea       	ldi	r24, 0xAC	; 172
   18794:	92 e6       	ldi	r25, 0x62	; 98
   18796:	9f 93       	push	r25
   18798:	8f 93       	push	r24
   1879a:	0e 94 5b dd 	call	0x1bab6	; 0x1bab6 <printf_P>
   1879e:	32 0c       	add	r3, r2
   187a0:	0f 90       	pop	r0
   187a2:	0f 90       	pop	r0
   187a4:	0f 90       	pop	r0
   187a6:	0f 90       	pop	r0
   187a8:	88 ea       	ldi	r24, 0xA8	; 168
   187aa:	a8 2e       	mov	r10, r24
   187ac:	82 e6       	ldi	r24, 0x62	; 98
   187ae:	b8 2e       	mov	r11, r24
   187b0:	93 ea       	ldi	r25, 0xA3	; 163
   187b2:	89 2e       	mov	r8, r25
   187b4:	92 e6       	ldi	r25, 0x62	; 98
   187b6:	99 2e       	mov	r9, r25
   187b8:	23 14       	cp	r2, r3
   187ba:	e1 f1       	breq	.+120    	; 0x18834 <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xda>
   187bc:	6d b6       	in	r6, 0x3d	; 61
   187be:	7e b6       	in	r7, 0x3e	; 62
   187c0:	f6 01       	movw	r30, r12
   187c2:	26 85       	ldd	r18, Z+14	; 0x0e
   187c4:	02 2f       	mov	r16, r18
   187c6:	10 e0       	ldi	r17, 0x00	; 0
   187c8:	8d b7       	in	r24, 0x3d	; 61
   187ca:	9e b7       	in	r25, 0x3e	; 62
   187cc:	80 1b       	sub	r24, r16
   187ce:	91 0b       	sbc	r25, r17
   187d0:	0f b6       	in	r0, 0x3f	; 63
   187d2:	f8 94       	cli
   187d4:	9e bf       	out	0x3e, r25	; 62
   187d6:	0f be       	out	0x3f, r0	; 63
   187d8:	8d bf       	out	0x3d, r24	; 61
   187da:	ed b7       	in	r30, 0x3d	; 61
   187dc:	fe b7       	in	r31, 0x3e	; 62
   187de:	31 96       	adiw	r30, 0x01	; 1
   187e0:	7f 01       	movw	r14, r30
   187e2:	f1 e0       	ldi	r31, 0x01	; 1
   187e4:	f2 0d       	add	r31, r2
   187e6:	f9 83       	std	Y+1, r31	; 0x01
   187e8:	a7 01       	movw	r20, r14
   187ea:	62 2d       	mov	r22, r2
   187ec:	c6 01       	movw	r24, r12
   187ee:	0e 94 cc c2 	call	0x18598	; 0x18598 <RF24::read_register(unsigned char, unsigned char*, unsigned char)>
   187f2:	bf 92       	push	r11
   187f4:	af 92       	push	r10
   187f6:	0e 94 5b dd 	call	0x1bab6	; 0x1bab6 <printf_P>
   187fa:	0e 0d       	add	r16, r14
   187fc:	1f 1d       	adc	r17, r15
   187fe:	0f 90       	pop	r0
   18800:	0f 90       	pop	r0
   18802:	01 50       	subi	r16, 0x01	; 1
   18804:	11 09       	sbc	r17, r1
   18806:	0e 15       	cp	r16, r14
   18808:	1f 05       	cpc	r17, r15
   1880a:	68 f0       	brcs	.+26     	; 0x18826 <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xcc>
   1880c:	f8 01       	movw	r30, r16
   1880e:	80 81       	ld	r24, Z
   18810:	1f 92       	push	r1
   18812:	8f 93       	push	r24
   18814:	9f 92       	push	r9
   18816:	8f 92       	push	r8
   18818:	0e 94 5b dd 	call	0x1bab6	; 0x1bab6 <printf_P>
   1881c:	0f 90       	pop	r0
   1881e:	0f 90       	pop	r0
   18820:	0f 90       	pop	r0
   18822:	0f 90       	pop	r0
   18824:	ee cf       	rjmp	.-36     	; 0x18802 <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xa8>
   18826:	0f b6       	in	r0, 0x3f	; 63
   18828:	f8 94       	cli
   1882a:	7e be       	out	0x3e, r7	; 62
   1882c:	0f be       	out	0x3f, r0	; 63
   1882e:	6d be       	out	0x3d, r6	; 61
   18830:	29 80       	ldd	r2, Y+1	; 0x01
   18832:	c2 cf       	rjmp	.-124    	; 0x187b8 <RF24::print_address_register(char const*, unsigned char, unsigned char)+0x5e>
   18834:	80 ea       	ldi	r24, 0xA0	; 160
   18836:	92 e6       	ldi	r25, 0x62	; 98
   18838:	9f 93       	push	r25
   1883a:	8f 93       	push	r24
   1883c:	0e 94 5b dd 	call	0x1bab6	; 0x1bab6 <printf_P>
   18840:	0f 90       	pop	r0
   18842:	0f 90       	pop	r0
   18844:	0f b6       	in	r0, 0x3f	; 63
   18846:	f8 94       	cli
   18848:	5e be       	out	0x3e, r5	; 62
   1884a:	0f be       	out	0x3f, r0	; 63
   1884c:	4d be       	out	0x3d, r4	; 61
   1884e:	0f 90       	pop	r0
   18850:	df 91       	pop	r29
   18852:	cf 91       	pop	r28
   18854:	1f 91       	pop	r17
   18856:	0f 91       	pop	r16
   18858:	ff 90       	pop	r15
   1885a:	ef 90       	pop	r14
   1885c:	df 90       	pop	r13
   1885e:	cf 90       	pop	r12
   18860:	bf 90       	pop	r11
   18862:	af 90       	pop	r10
   18864:	9f 90       	pop	r9
   18866:	8f 90       	pop	r8
   18868:	7f 90       	pop	r7
   1886a:	6f 90       	pop	r6
   1886c:	5f 90       	pop	r5
   1886e:	4f 90       	pop	r4
   18870:	3f 90       	pop	r3
   18872:	2f 90       	pop	r2
   18874:	08 95       	ret

00018876 <RF24::RF24(unsigned int, unsigned int)>:
_ZN4RF24C2Ejj():
   18876:	fc 01       	movw	r30, r24
   18878:	71 83       	std	Z+1, r23	; 0x01
   1887a:	60 83       	st	Z, r22
   1887c:	53 83       	std	Z+3, r21	; 0x03
   1887e:	42 83       	std	Z+2, r20	; 0x02
   18880:	16 82       	std	Z+6, r1	; 0x06
   18882:	80 e2       	ldi	r24, 0x20	; 32
   18884:	87 83       	std	Z+7, r24	; 0x07
   18886:	10 86       	std	Z+8, r1	; 0x08
   18888:	85 e0       	ldi	r24, 0x05	; 5
   1888a:	86 87       	std	Z+14, r24	; 0x0e
   1888c:	85 e0       	ldi	r24, 0x05	; 5
   1888e:	90 e0       	ldi	r25, 0x00	; 0
   18890:	a0 e0       	ldi	r26, 0x00	; 0
   18892:	b0 e0       	ldi	r27, 0x00	; 0
   18894:	84 8b       	std	Z+20, r24	; 0x14
   18896:	95 8b       	std	Z+21, r25	; 0x15
   18898:	a6 8b       	std	Z+22, r26	; 0x16
   1889a:	b7 8b       	std	Z+23, r27	; 0x17
   1889c:	11 86       	std	Z+9, r1	; 0x09
   1889e:	08 95       	ret

000188a0 <RF24::setChannel(unsigned char)>:
_ZN4RF2410setChannelEh():
   188a0:	46 2f       	mov	r20, r22
   188a2:	6d 37       	cpi	r22, 0x7D	; 125
   188a4:	08 f0       	brcs	.+2      	; 0x188a8 <RF24::setChannel(unsigned char)+0x8>
   188a6:	4d e7       	ldi	r20, 0x7D	; 125
   188a8:	65 e0       	ldi	r22, 0x05	; 5
   188aa:	0c 94 0b c3 	jmp	0x18616	; 0x18616 <RF24::write_register(unsigned char, unsigned char)>

000188ae <RF24::powerUp()>:
_ZN4RF247powerUpEv():
   188ae:	cf 93       	push	r28
   188b0:	df 93       	push	r29
   188b2:	ec 01       	movw	r28, r24
   188b4:	60 e0       	ldi	r22, 0x00	; 0
   188b6:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <RF24::read_register(unsigned char)>
   188ba:	81 fd       	sbrc	r24, 1
   188bc:	0e c0       	rjmp	.+28     	; 0x188da <RF24::powerUp()+0x2c>
   188be:	48 2f       	mov	r20, r24
   188c0:	42 60       	ori	r20, 0x02	; 2
   188c2:	60 e0       	ldi	r22, 0x00	; 0
   188c4:	ce 01       	movw	r24, r28
   188c6:	0e 94 0b c3 	call	0x18616	; 0x18616 <RF24::write_register(unsigned char, unsigned char)>
   188ca:	65 e0       	ldi	r22, 0x05	; 5
   188cc:	70 e0       	ldi	r23, 0x00	; 0
   188ce:	80 e0       	ldi	r24, 0x00	; 0
   188d0:	90 e0       	ldi	r25, 0x00	; 0
   188d2:	df 91       	pop	r29
   188d4:	cf 91       	pop	r28
   188d6:	0c 94 57 d1 	jmp	0x1a2ae	; 0x1a2ae <delay>
   188da:	df 91       	pop	r29
   188dc:	cf 91       	pop	r28
   188de:	08 95       	ret

000188e0 <RF24::toggle_features()>:
_ZN4RF2415toggle_featuresEv():
   188e0:	cf 93       	push	r28
   188e2:	df 93       	push	r29
   188e4:	ec 01       	movw	r28, r24
   188e6:	0e 94 c6 c2 	call	0x1858c	; 0x1858c <RF24::beginTransaction()>
   188ea:	80 e5       	ldi	r24, 0x50	; 80
   188ec:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   188f0:	83 e7       	ldi	r24, 0x73	; 115
   188f2:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <SPIClass::transfer(unsigned char)>
   188f6:	ce 01       	movw	r24, r28
   188f8:	df 91       	pop	r29
   188fa:	cf 91       	pop	r28
   188fc:	0c 94 c9 c2 	jmp	0x18592	; 0x18592 <RF24::endTransaction()>

00018900 <RF24::setPALevel(unsigned char)>:
_ZN4RF2410setPALevelEh():
   18900:	0f 93       	push	r16
   18902:	1f 93       	push	r17
   18904:	cf 93       	push	r28
   18906:	8c 01       	movw	r16, r24
   18908:	c6 2f       	mov	r28, r22
   1890a:	66 e0       	ldi	r22, 0x06	; 6
   1890c:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <RF24::read_register(unsigned char)>
   18910:	88 7f       	andi	r24, 0xF8	; 248
   18912:	c4 30       	cpi	r28, 0x04	; 4
   18914:	58 f4       	brcc	.+22     	; 0x1892c <RF24::setPALevel(unsigned char)+0x2c>
   18916:	cc 0f       	add	r28, r28
   18918:	cf 5f       	subi	r28, 0xFF	; 255
   1891a:	4c 2f       	mov	r20, r28
   1891c:	48 2b       	or	r20, r24
   1891e:	66 e0       	ldi	r22, 0x06	; 6
   18920:	c8 01       	movw	r24, r16
   18922:	cf 91       	pop	r28
   18924:	1f 91       	pop	r17
   18926:	0f 91       	pop	r16
   18928:	0c 94 0b c3 	jmp	0x18616	; 0x18616 <RF24::write_register(unsigned char, unsigned char)>
   1892c:	c7 e0       	ldi	r28, 0x07	; 7
   1892e:	f5 cf       	rjmp	.-22     	; 0x1891a <RF24::setPALevel(unsigned char)+0x1a>

00018930 <RF24::getPALevel()>:
_ZN4RF2410getPALevelEv():
   18930:	66 e0       	ldi	r22, 0x06	; 6
   18932:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <RF24::read_register(unsigned char)>
   18936:	90 e0       	ldi	r25, 0x00	; 0
   18938:	95 95       	asr	r25
   1893a:	87 95       	ror	r24
   1893c:	83 70       	andi	r24, 0x03	; 3
   1893e:	08 95       	ret

00018940 <RF24::setDataRate(rf24_datarate_e)>:
_ZN4RF2411setDataRateE15rf24_datarate_e():
   18940:	ef 92       	push	r14
   18942:	ff 92       	push	r15
   18944:	0f 93       	push	r16
   18946:	1f 93       	push	r17
   18948:	cf 93       	push	r28
   1894a:	8c 01       	movw	r16, r24
   1894c:	7b 01       	movw	r14, r22
   1894e:	66 e0       	ldi	r22, 0x06	; 6
   18950:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <RF24::read_register(unsigned char)>
   18954:	c8 2f       	mov	r28, r24
   18956:	c7 7d       	andi	r28, 0xD7	; 215
   18958:	82 e0       	ldi	r24, 0x02	; 2
   1895a:	e8 16       	cp	r14, r24
   1895c:	f1 04       	cpc	r15, r1
   1895e:	e9 f4       	brne	.+58     	; 0x1899a <RF24::setDataRate(rf24_datarate_e)+0x5a>
   18960:	c0 62       	ori	r28, 0x20	; 32
   18962:	8b e9       	ldi	r24, 0x9B	; 155
   18964:	90 e0       	ldi	r25, 0x00	; 0
   18966:	a0 e0       	ldi	r26, 0x00	; 0
   18968:	b0 e0       	ldi	r27, 0x00	; 0
   1896a:	f8 01       	movw	r30, r16
   1896c:	80 8b       	std	Z+16, r24	; 0x10
   1896e:	91 8b       	std	Z+17, r25	; 0x11
   18970:	a2 8b       	std	Z+18, r26	; 0x12
   18972:	b3 8b       	std	Z+19, r27	; 0x13
   18974:	4c 2f       	mov	r20, r28
   18976:	66 e0       	ldi	r22, 0x06	; 6
   18978:	c8 01       	movw	r24, r16
   1897a:	0e 94 0b c3 	call	0x18616	; 0x18616 <RF24::write_register(unsigned char, unsigned char)>
   1897e:	66 e0       	ldi	r22, 0x06	; 6
   18980:	c8 01       	movw	r24, r16
   18982:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <RF24::read_register(unsigned char)>
   18986:	91 e0       	ldi	r25, 0x01	; 1
   18988:	8c 13       	cpse	r24, r28
   1898a:	90 e0       	ldi	r25, 0x00	; 0
   1898c:	89 2f       	mov	r24, r25
   1898e:	cf 91       	pop	r28
   18990:	1f 91       	pop	r17
   18992:	0f 91       	pop	r16
   18994:	ff 90       	pop	r15
   18996:	ef 90       	pop	r14
   18998:	08 95       	ret
   1899a:	85 e5       	ldi	r24, 0x55	; 85
   1899c:	90 e0       	ldi	r25, 0x00	; 0
   1899e:	a0 e0       	ldi	r26, 0x00	; 0
   189a0:	b0 e0       	ldi	r27, 0x00	; 0
   189a2:	ea 94       	dec	r14
   189a4:	ef 28       	or	r14, r15
   189a6:	09 f7       	brne	.-62     	; 0x1896a <RF24::setDataRate(rf24_datarate_e)+0x2a>
   189a8:	c8 60       	ori	r28, 0x08	; 8
   189aa:	81 e4       	ldi	r24, 0x41	; 65
   189ac:	90 e0       	ldi	r25, 0x00	; 0
   189ae:	a0 e0       	ldi	r26, 0x00	; 0
   189b0:	b0 e0       	ldi	r27, 0x00	; 0
   189b2:	db cf       	rjmp	.-74     	; 0x1896a <RF24::setDataRate(rf24_datarate_e)+0x2a>

000189b4 <RF24::begin()>:
_ZN4RF245beginEv():
   189b4:	1f 93       	push	r17
   189b6:	cf 93       	push	r28
   189b8:	df 93       	push	r29
   189ba:	ec 01       	movw	r28, r24
   189bc:	88 81       	ld	r24, Y
   189be:	99 81       	ldd	r25, Y+1	; 0x01
   189c0:	2a 81       	ldd	r18, Y+2	; 0x02
   189c2:	3b 81       	ldd	r19, Y+3	; 0x03
   189c4:	82 17       	cp	r24, r18
   189c6:	93 07       	cpc	r25, r19
   189c8:	19 f0       	breq	.+6      	; 0x189d0 <RF24::begin()+0x1c>
   189ca:	61 e0       	ldi	r22, 0x01	; 1
   189cc:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   189d0:	8a 81       	ldd	r24, Y+2	; 0x02
   189d2:	9b 81       	ldd	r25, Y+3	; 0x03
   189d4:	28 81       	ld	r18, Y
   189d6:	39 81       	ldd	r19, Y+1	; 0x01
   189d8:	28 17       	cp	r18, r24
   189da:	39 07       	cpc	r19, r25
   189dc:	19 f0       	breq	.+6      	; 0x189e4 <RF24::begin()+0x30>
   189de:	61 e0       	ldi	r22, 0x01	; 1
   189e0:	0e 94 48 d2 	call	0x1a490	; 0x1a490 <pinMode>
   189e4:	0e 94 6d aa 	call	0x154da	; 0x154da <SPIClass::begin()>
   189e8:	60 e0       	ldi	r22, 0x00	; 0
   189ea:	ce 01       	movw	r24, r28
   189ec:	0e 94 ba c2 	call	0x18574	; 0x18574 <RF24::ce(bool)>
   189f0:	61 e0       	ldi	r22, 0x01	; 1
   189f2:	ce 01       	movw	r24, r28
   189f4:	0e 94 a2 c2 	call	0x18544	; 0x18544 <RF24::csn(bool)>
   189f8:	65 e0       	ldi	r22, 0x05	; 5
   189fa:	70 e0       	ldi	r23, 0x00	; 0
   189fc:	80 e0       	ldi	r24, 0x00	; 0
   189fe:	90 e0       	ldi	r25, 0x00	; 0
   18a00:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
   18a04:	4c e0       	ldi	r20, 0x0C	; 12
   18a06:	60 e0       	ldi	r22, 0x00	; 0
   18a08:	ce 01       	movw	r24, r28
   18a0a:	0e 94 0b c3 	call	0x18616	; 0x18616 <RF24::write_register(unsigned char, unsigned char)>
_ZN4RF2410setRetriesEhh():
   18a0e:	4f e5       	ldi	r20, 0x5F	; 95
   18a10:	64 e0       	ldi	r22, 0x04	; 4
   18a12:	ce 01       	movw	r24, r28
   18a14:	0e 94 0b c3 	call	0x18616	; 0x18616 <RF24::write_register(unsigned char, unsigned char)>
_ZN4RF245beginEv():
   18a18:	60 e0       	ldi	r22, 0x00	; 0
   18a1a:	ce 01       	movw	r24, r28
   18a1c:	0e 94 80 c4 	call	0x18900	; 0x18900 <RF24::setPALevel(unsigned char)>
   18a20:	62 e0       	ldi	r22, 0x02	; 2
   18a22:	70 e0       	ldi	r23, 0x00	; 0
   18a24:	ce 01       	movw	r24, r28
   18a26:	0e 94 a0 c4 	call	0x18940	; 0x18940 <RF24::setDataRate(rf24_datarate_e)>
   18a2a:	88 23       	and	r24, r24
   18a2c:	11 f0       	breq	.+4      	; 0x18a32 <RF24::begin()+0x7e>
   18a2e:	81 e0       	ldi	r24, 0x01	; 1
   18a30:	8e 83       	std	Y+6, r24	; 0x06
   18a32:	66 e0       	ldi	r22, 0x06	; 6
   18a34:	ce 01       	movw	r24, r28
   18a36:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <RF24::read_register(unsigned char)>
   18a3a:	18 2f       	mov	r17, r24
   18a3c:	70 e0       	ldi	r23, 0x00	; 0
   18a3e:	60 e0       	ldi	r22, 0x00	; 0
   18a40:	ce 01       	movw	r24, r28
   18a42:	0e 94 a0 c4 	call	0x18940	; 0x18940 <RF24::setDataRate(rf24_datarate_e)>
   18a46:	ce 01       	movw	r24, r28
   18a48:	0e 94 70 c4 	call	0x188e0	; 0x188e0 <RF24::toggle_features()>
   18a4c:	40 e0       	ldi	r20, 0x00	; 0
   18a4e:	6d e1       	ldi	r22, 0x1D	; 29
   18a50:	ce 01       	movw	r24, r28
   18a52:	0e 94 0b c3 	call	0x18616	; 0x18616 <RF24::write_register(unsigned char, unsigned char)>
   18a56:	40 e0       	ldi	r20, 0x00	; 0
   18a58:	6c e1       	ldi	r22, 0x1C	; 28
   18a5a:	ce 01       	movw	r24, r28
   18a5c:	0e 94 0b c3 	call	0x18616	; 0x18616 <RF24::write_register(unsigned char, unsigned char)>
   18a60:	18 86       	std	Y+8, r1	; 0x08
   18a62:	40 e7       	ldi	r20, 0x70	; 112
   18a64:	67 e0       	ldi	r22, 0x07	; 7
   18a66:	ce 01       	movw	r24, r28
   18a68:	0e 94 0b c3 	call	0x18616	; 0x18616 <RF24::write_register(unsigned char, unsigned char)>
   18a6c:	6c e4       	ldi	r22, 0x4C	; 76
   18a6e:	ce 01       	movw	r24, r28
   18a70:	0e 94 50 c4 	call	0x188a0	; 0x188a0 <RF24::setChannel(unsigned char)>
   18a74:	ce 01       	movw	r24, r28
   18a76:	0e 94 39 c3 	call	0x18672	; 0x18672 <RF24::flush_rx()>
   18a7a:	ce 01       	movw	r24, r28
   18a7c:	0e 94 3c c3 	call	0x18678	; 0x18678 <RF24::flush_tx()>
   18a80:	ce 01       	movw	r24, r28
   18a82:	0e 94 57 c4 	call	0x188ae	; 0x188ae <RF24::powerUp()>
   18a86:	60 e0       	ldi	r22, 0x00	; 0
   18a88:	ce 01       	movw	r24, r28
   18a8a:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <RF24::read_register(unsigned char)>
   18a8e:	48 2f       	mov	r20, r24
   18a90:	4e 7f       	andi	r20, 0xFE	; 254
   18a92:	60 e0       	ldi	r22, 0x00	; 0
   18a94:	ce 01       	movw	r24, r28
   18a96:	0e 94 0b c3 	call	0x18616	; 0x18616 <RF24::write_register(unsigned char, unsigned char)>
   18a9a:	64 e6       	ldi	r22, 0x64	; 100
   18a9c:	70 e0       	ldi	r23, 0x00	; 0
   18a9e:	80 e0       	ldi	r24, 0x00	; 0
   18aa0:	90 e0       	ldi	r25, 0x00	; 0
   18aa2:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
   18aa6:	11 50       	subi	r17, 0x01	; 1
   18aa8:	81 e0       	ldi	r24, 0x01	; 1
   18aaa:	1e 3f       	cpi	r17, 0xFE	; 254
   18aac:	08 f0       	brcs	.+2      	; 0x18ab0 <RF24::begin()+0xfc>
   18aae:	80 e0       	ldi	r24, 0x00	; 0
   18ab0:	df 91       	pop	r29
   18ab2:	cf 91       	pop	r28
   18ab4:	1f 91       	pop	r17
   18ab6:	08 95       	ret

00018ab8 <RF24::getDataRate()>:
_ZN4RF2411getDataRateEv():
   18ab8:	66 e0       	ldi	r22, 0x06	; 6
   18aba:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <RF24::read_register(unsigned char)>
   18abe:	28 2f       	mov	r18, r24
   18ac0:	28 72       	andi	r18, 0x28	; 40
   18ac2:	20 32       	cpi	r18, 0x20	; 32
   18ac4:	31 f0       	breq	.+12     	; 0x18ad2 <RF24::getDataRate()+0x1a>
   18ac6:	81 e0       	ldi	r24, 0x01	; 1
   18ac8:	90 e0       	ldi	r25, 0x00	; 0
   18aca:	28 30       	cpi	r18, 0x08	; 8
   18acc:	21 f0       	breq	.+8      	; 0x18ad6 <RF24::getDataRate()+0x1e>
   18ace:	80 e0       	ldi	r24, 0x00	; 0
   18ad0:	08 95       	ret
   18ad2:	82 e0       	ldi	r24, 0x02	; 2
   18ad4:	90 e0       	ldi	r25, 0x00	; 0
   18ad6:	08 95       	ret

00018ad8 <RF24::getCRCLength()>:
_ZN4RF2412getCRCLengthEv():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1560
}

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
   18ad8:	0f 93       	push	r16
   18ada:	1f 93       	push	r17
   18adc:	cf 93       	push	r28
   18ade:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:1563
  rf24_crclength_e result = RF24_CRC_DISABLED;
  
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
   18ae0:	60 e0       	ldi	r22, 0x00	; 0
   18ae2:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <RF24::read_register(unsigned char)>
   18ae6:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:1564
  uint8_t AA = read_register(EN_AA);
   18ae8:	61 e0       	ldi	r22, 0x01	; 1
   18aea:	c8 01       	movw	r24, r16
   18aec:	0e 94 f4 c2 	call	0x185e8	; 0x185e8 <RF24::read_register(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566
  
  if ( config & _BV(EN_CRC ) || AA)
   18af0:	c3 fd       	sbrc	r28, 3
   18af2:	02 c0       	rjmp	.+4      	; 0x18af8 <RF24::getCRCLength()+0x20>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566 (discriminator 1)
   18af4:	88 23       	and	r24, r24
   18af6:	39 f0       	breq	.+14     	; 0x18b06 <RF24::getCRCLength()+0x2e>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1571
  {
    if ( config & _BV(CRCO) )
      result = RF24_CRC_16;
    else
      result = RF24_CRC_8;
   18af8:	81 e0       	ldi	r24, 0x01	; 1
   18afa:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/RF24/RF24.cpp:1568
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
  uint8_t AA = read_register(EN_AA);
  
  if ( config & _BV(EN_CRC ) || AA)
  {
    if ( config & _BV(CRCO) )
   18afc:	c2 ff       	sbrs	r28, 2
   18afe:	05 c0       	rjmp	.+10     	; 0x18b0a <RF24::getCRCLength()+0x32>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1569
      result = RF24_CRC_16;
   18b00:	82 e0       	ldi	r24, 0x02	; 2
   18b02:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/RF24/RF24.cpp:1574
    else
      result = RF24_CRC_8;
  }

  return result;
   18b04:	02 c0       	rjmp	.+4      	; 0x18b0a <RF24::getCRCLength()+0x32>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1561

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
   18b06:	90 e0       	ldi	r25, 0x00	; 0
   18b08:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/RF24/RF24.cpp:1575
    else
      result = RF24_CRC_8;
  }

  return result;
}
   18b0a:	cf 91       	pop	r28
   18b0c:	1f 91       	pop	r17
   18b0e:	0f 91       	pop	r16
   18b10:	08 95       	ret

00018b12 <RF24::printDetails()>:
_ZN4RF2412printDetailsEv():
/home/saric/Arduino/libraries/RF24/RF24.cpp:531
  rf24_csn_e_str_3,
};
#endif

void RF24::printDetails(void)
{
   18b12:	cf 93       	push	r28
   18b14:	df 93       	push	r29
   18b16:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:565
	}
	printf("\n================ NRF Configuration ================\n");
 
#endif //Linux

  print_status(get_status());
   18b18:	0e 94 3f c3 	call	0x1867e	; 0x1867e <RF24::get_status()>
   18b1c:	68 2f       	mov	r22, r24
   18b1e:	ce 01       	movw	r24, r28
   18b20:	0e 94 42 c3 	call	0x18684	; 0x18684 <RF24::print_status(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:567

  print_address_register(PSTR("RX_ADDR_P0-1"),RX_ADDR_P0,2);
   18b24:	22 e0       	ldi	r18, 0x02	; 2
   18b26:	4a e0       	ldi	r20, 0x0A	; 10
   18b28:	6f e1       	ldi	r22, 0x1F	; 31
   18b2a:	72 e6       	ldi	r23, 0x62	; 98
   18b2c:	ce 01       	movw	r24, r28
   18b2e:	0e 94 ad c3 	call	0x1875a	; 0x1875a <RF24::print_address_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:568
  print_byte_register(PSTR("RX_ADDR_P2-5"),RX_ADDR_P2,4);
   18b32:	24 e0       	ldi	r18, 0x04	; 4
   18b34:	4c e0       	ldi	r20, 0x0C	; 12
   18b36:	62 e1       	ldi	r22, 0x12	; 18
   18b38:	72 e6       	ldi	r23, 0x62	; 98
   18b3a:	ce 01       	movw	r24, r28
   18b3c:	0e 94 6f c3 	call	0x186de	; 0x186de <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:569
  print_address_register(PSTR("TX_ADDR\t"),TX_ADDR);
   18b40:	21 e0       	ldi	r18, 0x01	; 1
   18b42:	40 e1       	ldi	r20, 0x10	; 16
   18b44:	69 e0       	ldi	r22, 0x09	; 9
   18b46:	72 e6       	ldi	r23, 0x62	; 98
   18b48:	ce 01       	movw	r24, r28
   18b4a:	0e 94 ad c3 	call	0x1875a	; 0x1875a <RF24::print_address_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:571

  print_byte_register(PSTR("RX_PW_P0-6"),RX_PW_P0,6);
   18b4e:	26 e0       	ldi	r18, 0x06	; 6
   18b50:	41 e1       	ldi	r20, 0x11	; 17
   18b52:	6e ef       	ldi	r22, 0xFE	; 254
   18b54:	71 e6       	ldi	r23, 0x61	; 97
   18b56:	ce 01       	movw	r24, r28
   18b58:	0e 94 6f c3 	call	0x186de	; 0x186de <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:572
  print_byte_register(PSTR("EN_AA\t"),EN_AA);
   18b5c:	21 e0       	ldi	r18, 0x01	; 1
   18b5e:	41 e0       	ldi	r20, 0x01	; 1
   18b60:	67 ef       	ldi	r22, 0xF7	; 247
   18b62:	71 e6       	ldi	r23, 0x61	; 97
   18b64:	ce 01       	movw	r24, r28
   18b66:	0e 94 6f c3 	call	0x186de	; 0x186de <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:573
  print_byte_register(PSTR("EN_RXADDR"),EN_RXADDR);
   18b6a:	21 e0       	ldi	r18, 0x01	; 1
   18b6c:	42 e0       	ldi	r20, 0x02	; 2
   18b6e:	6d ee       	ldi	r22, 0xED	; 237
   18b70:	71 e6       	ldi	r23, 0x61	; 97
   18b72:	ce 01       	movw	r24, r28
   18b74:	0e 94 6f c3 	call	0x186de	; 0x186de <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:574
  print_byte_register(PSTR("RF_CH\t"),RF_CH);
   18b78:	21 e0       	ldi	r18, 0x01	; 1
   18b7a:	45 e0       	ldi	r20, 0x05	; 5
   18b7c:	66 ee       	ldi	r22, 0xE6	; 230
   18b7e:	71 e6       	ldi	r23, 0x61	; 97
   18b80:	ce 01       	movw	r24, r28
   18b82:	0e 94 6f c3 	call	0x186de	; 0x186de <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:575
  print_byte_register(PSTR("RF_SETUP"),RF_SETUP);
   18b86:	21 e0       	ldi	r18, 0x01	; 1
   18b88:	46 e0       	ldi	r20, 0x06	; 6
   18b8a:	6d ed       	ldi	r22, 0xDD	; 221
   18b8c:	71 e6       	ldi	r23, 0x61	; 97
   18b8e:	ce 01       	movw	r24, r28
   18b90:	0e 94 6f c3 	call	0x186de	; 0x186de <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:576
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
   18b94:	21 e0       	ldi	r18, 0x01	; 1
   18b96:	40 e0       	ldi	r20, 0x00	; 0
   18b98:	65 ed       	ldi	r22, 0xD5	; 213
   18b9a:	71 e6       	ldi	r23, 0x61	; 97
   18b9c:	ce 01       	movw	r24, r28
   18b9e:	0e 94 6f c3 	call	0x186de	; 0x186de <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:577
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);
   18ba2:	22 e0       	ldi	r18, 0x02	; 2
   18ba4:	4c e1       	ldi	r20, 0x1C	; 28
   18ba6:	67 ec       	ldi	r22, 0xC7	; 199
   18ba8:	71 e6       	ldi	r23, 0x61	; 97
   18baa:	ce 01       	movw	r24, r28
   18bac:	0e 94 6f c3 	call	0x186de	; 0x186de <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:579

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
   18bb0:	ce 01       	movw	r24, r28
   18bb2:	0e 94 5c c5 	call	0x18ab8	; 0x18ab8 <RF24::getDataRate()>
   18bb6:	fc 01       	movw	r30, r24
   18bb8:	ee 0f       	add	r30, r30
   18bba:	ff 1f       	adc	r31, r31
   18bbc:	ea 57       	subi	r30, 0x7A	; 122
   18bbe:	fd 49       	sbci	r31, 0x9D	; 157
   18bc0:	85 91       	lpm	r24, Z+
   18bc2:	94 91       	lpm	r25, Z
   18bc4:	9f 93       	push	r25
   18bc6:	8f 93       	push	r24
   18bc8:	85 eb       	ldi	r24, 0xB5	; 181
   18bca:	91 e6       	ldi	r25, 0x61	; 97
   18bcc:	9f 93       	push	r25
   18bce:	8f 93       	push	r24
   18bd0:	0e 94 5b dd 	call	0x1bab6	; 0x1bab6 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:580
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
   18bd4:	ee 81       	ldd	r30, Y+6	; 0x06
   18bd6:	f0 e0       	ldi	r31, 0x00	; 0
   18bd8:	ee 0f       	add	r30, r30
   18bda:	ff 1f       	adc	r31, r31
   18bdc:	e1 59       	subi	r30, 0x91	; 145
   18bde:	fd 49       	sbci	r31, 0x9D	; 157
   18be0:	85 91       	lpm	r24, Z+
   18be2:	94 91       	lpm	r25, Z
   18be4:	9f 93       	push	r25
   18be6:	8f 93       	push	r24
   18be8:	86 ea       	ldi	r24, 0xA6	; 166
   18bea:	91 e6       	ldi	r25, 0x61	; 97
   18bec:	9f 93       	push	r25
   18bee:	8f 93       	push	r24
   18bf0:	0e 94 5b dd 	call	0x1bab6	; 0x1bab6 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:581
  printf_P(PSTR("CRC Length\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
   18bf4:	ce 01       	movw	r24, r28
   18bf6:	0e 94 6c c5 	call	0x18ad8	; 0x18ad8 <RF24::getCRCLength()>
   18bfa:	fc 01       	movw	r30, r24
   18bfc:	ee 0f       	add	r30, r30
   18bfe:	ff 1f       	adc	r31, r31
   18c00:	ef 5a       	subi	r30, 0xAF	; 175
   18c02:	fd 49       	sbci	r31, 0x9D	; 157
   18c04:	85 91       	lpm	r24, Z+
   18c06:	94 91       	lpm	r25, Z
   18c08:	9f 93       	push	r25
   18c0a:	8f 93       	push	r24
   18c0c:	83 e9       	ldi	r24, 0x93	; 147
   18c0e:	91 e6       	ldi	r25, 0x61	; 97
   18c10:	9f 93       	push	r25
   18c12:	8f 93       	push	r24
   18c14:	0e 94 5b dd 	call	0x1bab6	; 0x1bab6 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:582
  printf_P(PSTR("PA Power\t = " PRIPSTR "\r\n"),  pgm_read_word(&rf24_pa_dbm_e_str_P[getPALevel()]));
   18c18:	ce 01       	movw	r24, r28
   18c1a:	0e 94 98 c4 	call	0x18930	; 0x18930 <RF24::getPALevel()>
   18c1e:	e8 2f       	mov	r30, r24
   18c20:	f0 e0       	ldi	r31, 0x00	; 0
   18c22:	ee 0f       	add	r30, r30
   18c24:	ff 1f       	adc	r31, r31
   18c26:	e4 5d       	subi	r30, 0xD4	; 212
   18c28:	fd 49       	sbci	r31, 0x9D	; 157
   18c2a:	85 91       	lpm	r24, Z+
   18c2c:	94 91       	lpm	r25, Z
   18c2e:	9f 93       	push	r25
   18c30:	8f 93       	push	r24
   18c32:	82 e8       	ldi	r24, 0x82	; 130
   18c34:	91 e6       	ldi	r25, 0x61	; 97
   18c36:	9f 93       	push	r25
   18c38:	8f 93       	push	r24
   18c3a:	0e 94 5b dd 	call	0x1bab6	; 0x1bab6 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:584

}
   18c3e:	8d b7       	in	r24, 0x3d	; 61
   18c40:	9e b7       	in	r25, 0x3e	; 62
   18c42:	40 96       	adiw	r24, 0x10	; 16
   18c44:	0f b6       	in	r0, 0x3f	; 63
   18c46:	f8 94       	cli
   18c48:	9e bf       	out	0x3e, r25	; 62
   18c4a:	0f be       	out	0x3f, r0	; 63
   18c4c:	8d bf       	out	0x3d, r24	; 61
   18c4e:	df 91       	pop	r29
   18c50:	cf 91       	pop	r28
   18c52:	08 95       	ret

00018c54 <date2days(unsigned int, unsigned char, unsigned char)>:
_ZL9date2daysjhh():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:336
  return data;
}

void RTC_DS1307::writenvram(uint8_t address, uint8_t data) {
  writenvram(address, &data, 1);
}
   18c54:	dc 01       	movw	r26, r24
   18c56:	50 e0       	ldi	r21, 0x00	; 0
   18c58:	e9 e0       	ldi	r30, 0x09	; 9
   18c5a:	f3 e6       	ldi	r31, 0x63	; 99
   18c5c:	81 e0       	ldi	r24, 0x01	; 1
   18c5e:	86 17       	cp	r24, r22
   18c60:	30 f4       	brcc	.+12     	; 0x18c6e <date2days(unsigned int, unsigned char, unsigned char)+0x1a>
   18c62:	94 91       	lpm	r25, Z
   18c64:	49 0f       	add	r20, r25
   18c66:	51 1d       	adc	r21, r1
   18c68:	8f 5f       	subi	r24, 0xFF	; 255
   18c6a:	31 96       	adiw	r30, 0x01	; 1
   18c6c:	f8 cf       	rjmp	.-16     	; 0x18c5e <date2days(unsigned int, unsigned char, unsigned char)+0xa>
   18c6e:	63 30       	cpi	r22, 0x03	; 3
   18c70:	38 f0       	brcs	.+14     	; 0x18c80 <date2days(unsigned int, unsigned char, unsigned char)+0x2c>
   18c72:	cd 01       	movw	r24, r26
   18c74:	83 70       	andi	r24, 0x03	; 3
   18c76:	99 27       	eor	r25, r25
   18c78:	89 2b       	or	r24, r25
   18c7a:	11 f4       	brne	.+4      	; 0x18c80 <date2days(unsigned int, unsigned char, unsigned char)+0x2c>
   18c7c:	4f 5f       	subi	r20, 0xFF	; 255
   18c7e:	5f 4f       	sbci	r21, 0xFF	; 255
   18c80:	9d 01       	movw	r18, r26
   18c82:	2d 5f       	subi	r18, 0xFD	; 253
   18c84:	3f 4f       	sbci	r19, 0xFF	; 255
   18c86:	36 95       	lsr	r19
   18c88:	27 95       	ror	r18
   18c8a:	36 95       	lsr	r19
   18c8c:	27 95       	ror	r18
   18c8e:	6d e6       	ldi	r22, 0x6D	; 109
   18c90:	71 e0       	ldi	r23, 0x01	; 1
   18c92:	a6 9f       	mul	r26, r22
   18c94:	c0 01       	movw	r24, r0
   18c96:	a7 9f       	mul	r26, r23
   18c98:	90 0d       	add	r25, r0
   18c9a:	b6 9f       	mul	r27, r22
   18c9c:	90 0d       	add	r25, r0
   18c9e:	11 24       	eor	r1, r1
   18ca0:	01 97       	sbiw	r24, 0x01	; 1
   18ca2:	82 0f       	add	r24, r18
   18ca4:	93 1f       	adc	r25, r19
   18ca6:	84 0f       	add	r24, r20
   18ca8:	95 1f       	adc	r25, r21
   18caa:	08 95       	ret

00018cac <TwoWire::write(int)>:
_ZN7TwoWire5writeEi():
   18cac:	dc 01       	movw	r26, r24
   18cae:	ed 91       	ld	r30, X+
   18cb0:	fc 91       	ld	r31, X
   18cb2:	01 90       	ld	r0, Z+
   18cb4:	f0 81       	ld	r31, Z
   18cb6:	e0 2d       	mov	r30, r0
   18cb8:	19 94       	eijmp

00018cba <DateTime::DateTime(unsigned long)>:
_ZN8DateTimeC2Em():
   18cba:	8f 92       	push	r8
   18cbc:	9f 92       	push	r9
   18cbe:	af 92       	push	r10
   18cc0:	bf 92       	push	r11
   18cc2:	cf 92       	push	r12
   18cc4:	df 92       	push	r13
   18cc6:	ef 92       	push	r14
   18cc8:	ff 92       	push	r15
   18cca:	cf 93       	push	r28
   18ccc:	df 93       	push	r29
   18cce:	ec 01       	movw	r28, r24
   18cd0:	6a 01       	movw	r12, r20
   18cd2:	7b 01       	movw	r14, r22
   18cd4:	80 e8       	ldi	r24, 0x80	; 128
   18cd6:	c8 1a       	sub	r12, r24
   18cd8:	83 e4       	ldi	r24, 0x43	; 67
   18cda:	d8 0a       	sbc	r13, r24
   18cdc:	8d e6       	ldi	r24, 0x6D	; 109
   18cde:	e8 0a       	sbc	r14, r24
   18ce0:	88 e3       	ldi	r24, 0x38	; 56
   18ce2:	f8 0a       	sbc	r15, r24
   18ce4:	8c e3       	ldi	r24, 0x3C	; 60
   18ce6:	88 2e       	mov	r8, r24
   18ce8:	91 2c       	mov	r9, r1
   18cea:	a1 2c       	mov	r10, r1
   18cec:	b1 2c       	mov	r11, r1
   18cee:	c7 01       	movw	r24, r14
   18cf0:	b6 01       	movw	r22, r12
   18cf2:	a5 01       	movw	r20, r10
   18cf4:	94 01       	movw	r18, r8
   18cf6:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
   18cfa:	6d 83       	std	Y+5, r22	; 0x05
   18cfc:	ca 01       	movw	r24, r20
   18cfe:	b9 01       	movw	r22, r18
   18d00:	a5 01       	movw	r20, r10
   18d02:	94 01       	movw	r18, r8
   18d04:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
   18d08:	6c 83       	std	Y+4, r22	; 0x04
   18d0a:	c7 01       	movw	r24, r14
   18d0c:	b6 01       	movw	r22, r12
   18d0e:	20 e1       	ldi	r18, 0x10	; 16
   18d10:	3e e0       	ldi	r19, 0x0E	; 14
   18d12:	40 e0       	ldi	r20, 0x00	; 0
   18d14:	50 e0       	ldi	r21, 0x00	; 0
   18d16:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
   18d1a:	ca 01       	movw	r24, r20
   18d1c:	b9 01       	movw	r22, r18
   18d1e:	28 e1       	ldi	r18, 0x18	; 24
   18d20:	30 e0       	ldi	r19, 0x00	; 0
   18d22:	40 e0       	ldi	r20, 0x00	; 0
   18d24:	50 e0       	ldi	r21, 0x00	; 0
   18d26:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
   18d2a:	6b 83       	std	Y+3, r22	; 0x03
   18d2c:	c7 01       	movw	r24, r14
   18d2e:	b6 01       	movw	r22, r12
   18d30:	20 e8       	ldi	r18, 0x80	; 128
   18d32:	31 e5       	ldi	r19, 0x51	; 81
   18d34:	41 e0       	ldi	r20, 0x01	; 1
   18d36:	50 e0       	ldi	r21, 0x00	; 0
   18d38:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
   18d3c:	18 82       	st	Y, r1
   18d3e:	63 e9       	ldi	r22, 0x93	; 147
   18d40:	7e ef       	ldi	r23, 0xFE	; 254
   18d42:	48 81       	ld	r20, Y
   18d44:	54 2f       	mov	r21, r20
   18d46:	53 70       	andi	r21, 0x03	; 3
   18d48:	81 e0       	ldi	r24, 0x01	; 1
   18d4a:	09 f0       	breq	.+2      	; 0x18d4e <DateTime::DateTime(unsigned long)+0x94>
   18d4c:	80 e0       	ldi	r24, 0x00	; 0
   18d4e:	90 e0       	ldi	r25, 0x00	; 0
   18d50:	fc 01       	movw	r30, r24
   18d52:	e3 59       	subi	r30, 0x93	; 147
   18d54:	fe 4f       	sbci	r31, 0xFE	; 254
   18d56:	2e 17       	cp	r18, r30
   18d58:	3f 07       	cpc	r19, r31
   18d5a:	40 f0       	brcs	.+16     	; 0x18d6c <DateTime::DateTime(unsigned long)+0xb2>
   18d5c:	fb 01       	movw	r30, r22
   18d5e:	e8 1b       	sub	r30, r24
   18d60:	f9 0b       	sbc	r31, r25
   18d62:	2e 0f       	add	r18, r30
   18d64:	3f 1f       	adc	r19, r31
   18d66:	4f 5f       	subi	r20, 0xFF	; 255
   18d68:	48 83       	st	Y, r20
   18d6a:	eb cf       	rjmp	.-42     	; 0x18d42 <DateTime::DateTime(unsigned long)+0x88>
   18d6c:	81 e0       	ldi	r24, 0x01	; 1
   18d6e:	89 83       	std	Y+1, r24	; 0x01
   18d70:	89 81       	ldd	r24, Y+1	; 0x01
   18d72:	68 2f       	mov	r22, r24
   18d74:	61 50       	subi	r22, 0x01	; 1
   18d76:	77 0b       	sbc	r23, r23
   18d78:	fb 01       	movw	r30, r22
   18d7a:	e7 5f       	subi	r30, 0xF7	; 247
   18d7c:	fc 49       	sbci	r31, 0x9C	; 156
   18d7e:	e4 91       	lpm	r30, Z
   18d80:	51 11       	cpse	r21, r1
   18d82:	03 c0       	rjmp	.+6      	; 0x18d8a <DateTime::DateTime(unsigned long)+0xd0>
   18d84:	82 30       	cpi	r24, 0x02	; 2
   18d86:	09 f4       	brne	.+2      	; 0x18d8a <DateTime::DateTime(unsigned long)+0xd0>
   18d88:	ef 5f       	subi	r30, 0xFF	; 255
   18d8a:	f0 e0       	ldi	r31, 0x00	; 0
   18d8c:	2e 17       	cp	r18, r30
   18d8e:	3f 07       	cpc	r19, r31
   18d90:	20 f0       	brcs	.+8      	; 0x18d9a <DateTime::DateTime(unsigned long)+0xe0>
   18d92:	2e 1b       	sub	r18, r30
   18d94:	3f 0b       	sbc	r19, r31
   18d96:	8f 5f       	subi	r24, 0xFF	; 255
   18d98:	ea cf       	rjmp	.-44     	; 0x18d6e <DateTime::DateTime(unsigned long)+0xb4>
   18d9a:	2f 5f       	subi	r18, 0xFF	; 255
   18d9c:	2a 83       	std	Y+2, r18	; 0x02
   18d9e:	df 91       	pop	r29
   18da0:	cf 91       	pop	r28
   18da2:	ff 90       	pop	r15
   18da4:	ef 90       	pop	r14
   18da6:	df 90       	pop	r13
   18da8:	cf 90       	pop	r12
   18daa:	bf 90       	pop	r11
   18dac:	af 90       	pop	r10
   18dae:	9f 90       	pop	r9
   18db0:	8f 90       	pop	r8
   18db2:	08 95       	ret

00018db4 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN8DateTimeC2Ejhhhhh():
   18db4:	cf 92       	push	r12
   18db6:	ef 92       	push	r14
   18db8:	0f 93       	push	r16
   18dba:	fc 01       	movw	r30, r24
   18dbc:	60 3d       	cpi	r22, 0xD0	; 208
   18dbe:	87 e0       	ldi	r24, 0x07	; 7
   18dc0:	78 07       	cpc	r23, r24
   18dc2:	10 f0       	brcs	.+4      	; 0x18dc8 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x14>
   18dc4:	60 5d       	subi	r22, 0xD0	; 208
   18dc6:	77 40       	sbci	r23, 0x07	; 7
   18dc8:	60 83       	st	Z, r22
   18dca:	41 83       	std	Z+1, r20	; 0x01
   18dcc:	22 83       	std	Z+2, r18	; 0x02
   18dce:	03 83       	std	Z+3, r16	; 0x03
   18dd0:	e4 82       	std	Z+4, r14	; 0x04
   18dd2:	c5 82       	std	Z+5, r12	; 0x05
   18dd4:	0f 91       	pop	r16
   18dd6:	ef 90       	pop	r14
   18dd8:	cf 90       	pop	r12
   18dda:	08 95       	ret

00018ddc <DateTime::dayOfTheWeek() const>:
_ZNK8DateTime12dayOfTheWeekEv():
   18ddc:	fc 01       	movw	r30, r24
   18dde:	80 81       	ld	r24, Z
   18de0:	42 81       	ldd	r20, Z+2	; 0x02
   18de2:	61 81       	ldd	r22, Z+1	; 0x01
   18de4:	90 e0       	ldi	r25, 0x00	; 0
   18de6:	0e 94 2a c6 	call	0x18c54	; 0x18c54 <date2days(unsigned int, unsigned char, unsigned char)>
   18dea:	06 96       	adiw	r24, 0x06	; 6
   18dec:	67 e0       	ldi	r22, 0x07	; 7
   18dee:	70 e0       	ldi	r23, 0x00	; 0
   18df0:	0e 94 59 d8 	call	0x1b0b2	; 0x1b0b2 <__udivmodhi4>
   18df4:	08 95       	ret

00018df6 <RTC_DS1307::begin()>:
_ZN10RTC_DS13075beginEv():
   18df6:	81 e3       	ldi	r24, 0x31	; 49
   18df8:	91 e1       	ldi	r25, 0x11	; 17
   18dfa:	0e 94 3a c9 	call	0x19274	; 0x19274 <TwoWire::begin()>
   18dfe:	81 e0       	ldi	r24, 0x01	; 1
   18e00:	08 95       	ret

00018e02 <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
   18e02:	1f 93       	push	r17
   18e04:	cf 93       	push	r28
   18e06:	df 93       	push	r29
   18e08:	ec 01       	movw	r28, r24
   18e0a:	68 e6       	ldi	r22, 0x68	; 104
   18e0c:	70 e0       	ldi	r23, 0x00	; 0
   18e0e:	81 e3       	ldi	r24, 0x31	; 49
   18e10:	91 e1       	ldi	r25, 0x11	; 17
   18e12:	0e 94 56 c9 	call	0x192ac	; 0x192ac <TwoWire::beginTransmission(int)>
   18e16:	60 e0       	ldi	r22, 0x00	; 0
   18e18:	81 e3       	ldi	r24, 0x31	; 49
   18e1a:	91 e1       	ldi	r25, 0x11	; 17
   18e1c:	0e 94 de c8 	call	0x191bc	; 0x191bc <TwoWire::write(unsigned char)>
   18e20:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
   18e22:	1a e0       	ldi	r17, 0x0A	; 10
   18e24:	82 2f       	mov	r24, r18
   18e26:	61 2f       	mov	r22, r17
   18e28:	0e 94 4d d8 	call	0x1b09a	; 0x1b09a <__udivmodqi4>
   18e2c:	68 2f       	mov	r22, r24
   18e2e:	66 0f       	add	r22, r22
   18e30:	68 0f       	add	r22, r24
   18e32:	66 0f       	add	r22, r22
   18e34:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   18e36:	81 e3       	ldi	r24, 0x31	; 49
   18e38:	91 e1       	ldi	r25, 0x11	; 17
   18e3a:	0e 94 de c8 	call	0x191bc	; 0x191bc <TwoWire::write(unsigned char)>
   18e3e:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
   18e40:	82 2f       	mov	r24, r18
   18e42:	61 2f       	mov	r22, r17
   18e44:	0e 94 4d d8 	call	0x1b09a	; 0x1b09a <__udivmodqi4>
   18e48:	68 2f       	mov	r22, r24
   18e4a:	66 0f       	add	r22, r22
   18e4c:	68 0f       	add	r22, r24
   18e4e:	66 0f       	add	r22, r22
   18e50:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   18e52:	81 e3       	ldi	r24, 0x31	; 49
   18e54:	91 e1       	ldi	r25, 0x11	; 17
   18e56:	0e 94 de c8 	call	0x191bc	; 0x191bc <TwoWire::write(unsigned char)>
   18e5a:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
   18e5c:	82 2f       	mov	r24, r18
   18e5e:	61 2f       	mov	r22, r17
   18e60:	0e 94 4d d8 	call	0x1b09a	; 0x1b09a <__udivmodqi4>
   18e64:	68 2f       	mov	r22, r24
   18e66:	66 0f       	add	r22, r22
   18e68:	68 0f       	add	r22, r24
   18e6a:	66 0f       	add	r22, r22
   18e6c:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   18e6e:	81 e3       	ldi	r24, 0x31	; 49
   18e70:	91 e1       	ldi	r25, 0x11	; 17
   18e72:	0e 94 de c8 	call	0x191bc	; 0x191bc <TwoWire::write(unsigned char)>
   18e76:	60 e0       	ldi	r22, 0x00	; 0
   18e78:	81 e3       	ldi	r24, 0x31	; 49
   18e7a:	91 e1       	ldi	r25, 0x11	; 17
   18e7c:	0e 94 de c8 	call	0x191bc	; 0x191bc <TwoWire::write(unsigned char)>
   18e80:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
   18e82:	82 2f       	mov	r24, r18
   18e84:	61 2f       	mov	r22, r17
   18e86:	0e 94 4d d8 	call	0x1b09a	; 0x1b09a <__udivmodqi4>
   18e8a:	68 2f       	mov	r22, r24
   18e8c:	66 0f       	add	r22, r22
   18e8e:	68 0f       	add	r22, r24
   18e90:	66 0f       	add	r22, r22
   18e92:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   18e94:	81 e3       	ldi	r24, 0x31	; 49
   18e96:	91 e1       	ldi	r25, 0x11	; 17
   18e98:	0e 94 de c8 	call	0x191bc	; 0x191bc <TwoWire::write(unsigned char)>
   18e9c:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
   18e9e:	82 2f       	mov	r24, r18
   18ea0:	61 2f       	mov	r22, r17
   18ea2:	0e 94 4d d8 	call	0x1b09a	; 0x1b09a <__udivmodqi4>
   18ea6:	68 2f       	mov	r22, r24
   18ea8:	66 0f       	add	r22, r22
   18eaa:	68 0f       	add	r22, r24
   18eac:	66 0f       	add	r22, r22
   18eae:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   18eb0:	81 e3       	ldi	r24, 0x31	; 49
   18eb2:	91 e1       	ldi	r25, 0x11	; 17
   18eb4:	0e 94 de c8 	call	0x191bc	; 0x191bc <TwoWire::write(unsigned char)>
   18eb8:	28 81       	ld	r18, Y
bin2bcd():
   18eba:	82 2f       	mov	r24, r18
   18ebc:	61 2f       	mov	r22, r17
   18ebe:	0e 94 4d d8 	call	0x1b09a	; 0x1b09a <__udivmodqi4>
   18ec2:	68 2f       	mov	r22, r24
   18ec4:	66 0f       	add	r22, r22
   18ec6:	68 0f       	add	r22, r24
   18ec8:	66 0f       	add	r22, r22
   18eca:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   18ecc:	81 e3       	ldi	r24, 0x31	; 49
   18ece:	91 e1       	ldi	r25, 0x11	; 17
   18ed0:	0e 94 de c8 	call	0x191bc	; 0x191bc <TwoWire::write(unsigned char)>
   18ed4:	81 e3       	ldi	r24, 0x31	; 49
   18ed6:	91 e1       	ldi	r25, 0x11	; 17
   18ed8:	df 91       	pop	r29
   18eda:	cf 91       	pop	r28
   18edc:	1f 91       	pop	r17
   18ede:	0c 94 d4 c9 	jmp	0x193a8	; 0x193a8 <TwoWire::endTransmission()>

00018ee2 <RTC_DS1307::isrunning()>:
_ZN10RTC_DS13079isrunningEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:245
  Wire.begin();
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
   18ee2:	68 e6       	ldi	r22, 0x68	; 104
   18ee4:	70 e0       	ldi	r23, 0x00	; 0
   18ee6:	81 e3       	ldi	r24, 0x31	; 49
   18ee8:	91 e1       	ldi	r25, 0x11	; 17
   18eea:	0e 94 56 c9 	call	0x192ac	; 0x192ac <TwoWire::beginTransmission(int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  Wire._I2C_WRITE((byte)0);
   18eee:	60 e0       	ldi	r22, 0x00	; 0
   18ef0:	81 e3       	ldi	r24, 0x31	; 49
   18ef2:	91 e1       	ldi	r25, 0x11	; 17
   18ef4:	0e 94 de c8 	call	0x191bc	; 0x191bc <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   18ef8:	81 e3       	ldi	r24, 0x31	; 49
   18efa:	91 e1       	ldi	r25, 0x11	; 17
   18efc:	0e 94 d4 c9 	call	0x193a8	; 0x193a8 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   18f00:	41 e0       	ldi	r20, 0x01	; 1
   18f02:	50 e0       	ldi	r21, 0x00	; 0
   18f04:	68 e6       	ldi	r22, 0x68	; 104
   18f06:	70 e0       	ldi	r23, 0x00	; 0
   18f08:	81 e3       	ldi	r24, 0x31	; 49
   18f0a:	91 e1       	ldi	r25, 0x11	; 17
   18f0c:	0e 94 d1 c9 	call	0x193a2	; 0x193a2 <TwoWire::requestFrom(int, int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   18f10:	81 e3       	ldi	r24, 0x31	; 49
   18f12:	91 e1       	ldi	r25, 0x11	; 17
   18f14:	0e 94 85 c8 	call	0x1910a	; 0x1910a <TwoWire::read()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   18f18:	80 58       	subi	r24, 0x80	; 128
   18f1a:	87 fb       	bst	r24, 7
   18f1c:	88 27       	eor	r24, r24
   18f1e:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   18f20:	08 95       	ret

00018f22 <RTC_DS1307::now()>:
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:268
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
}

DateTime RTC_DS1307::now() {
   18f22:	cf 92       	push	r12
   18f24:	df 92       	push	r13
   18f26:	ff 92       	push	r15
   18f28:	0f 93       	push	r16
   18f2a:	1f 93       	push	r17
   18f2c:	cf 93       	push	r28
   18f2e:	df 93       	push	r29
   18f30:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:269
  Wire.beginTransmission(DS1307_ADDRESS);
   18f32:	68 e6       	ldi	r22, 0x68	; 104
   18f34:	70 e0       	ldi	r23, 0x00	; 0
   18f36:	81 e3       	ldi	r24, 0x31	; 49
   18f38:	91 e1       	ldi	r25, 0x11	; 17
   18f3a:	0e 94 56 c9 	call	0x192ac	; 0x192ac <TwoWire::beginTransmission(int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
  Wire._I2C_WRITE((byte)0);	
   18f3e:	60 e0       	ldi	r22, 0x00	; 0
   18f40:	81 e3       	ldi	r24, 0x31	; 49
   18f42:	91 e1       	ldi	r25, 0x11	; 17
   18f44:	0e 94 de c8 	call	0x191bc	; 0x191bc <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
   18f48:	81 e3       	ldi	r24, 0x31	; 49
   18f4a:	91 e1       	ldi	r25, 0x11	; 17
   18f4c:	0e 94 d4 c9 	call	0x193a8	; 0x193a8 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
   18f50:	47 e0       	ldi	r20, 0x07	; 7
   18f52:	50 e0       	ldi	r21, 0x00	; 0
   18f54:	68 e6       	ldi	r22, 0x68	; 104
   18f56:	70 e0       	ldi	r23, 0x00	; 0
   18f58:	81 e3       	ldi	r24, 0x31	; 49
   18f5a:	91 e1       	ldi	r25, 0x11	; 17
   18f5c:	0e 94 d1 c9 	call	0x193a2	; 0x193a2 <TwoWire::requestFrom(int, int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   18f60:	81 e3       	ldi	r24, 0x31	; 49
   18f62:	91 e1       	ldi	r25, 0x11	; 17
   18f64:	0e 94 85 c8 	call	0x1910a	; 0x1910a <TwoWire::read()>
   18f68:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   18f6a:	28 2f       	mov	r18, r24
   18f6c:	30 e0       	ldi	r19, 0x00	; 0
   18f6e:	94 e0       	ldi	r25, 0x04	; 4
   18f70:	35 95       	asr	r19
   18f72:	27 95       	ror	r18
   18f74:	9a 95       	dec	r25
   18f76:	e1 f7       	brne	.-8      	; 0x18f70 <RTC_DS1307::now()+0x4e>
   18f78:	92 2f       	mov	r25, r18
   18f7a:	99 0f       	add	r25, r25
   18f7c:	99 0f       	add	r25, r25
   18f7e:	c2 2f       	mov	r28, r18
   18f80:	c9 1b       	sub	r28, r25
   18f82:	cc 0f       	add	r28, r28
   18f84:	c8 0f       	add	r28, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   18f86:	81 e3       	ldi	r24, 0x31	; 49
   18f88:	91 e1       	ldi	r25, 0x11	; 17
   18f8a:	0e 94 85 c8 	call	0x1910a	; 0x1910a <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   18f8e:	9c 01       	movw	r18, r24
   18f90:	44 e0       	ldi	r20, 0x04	; 4
   18f92:	35 95       	asr	r19
   18f94:	27 95       	ror	r18
   18f96:	4a 95       	dec	r20
   18f98:	e1 f7       	brne	.-8      	; 0x18f92 <RTC_DS1307::now()+0x70>
   18f9a:	2f 70       	andi	r18, 0x0F	; 15
   18f9c:	33 27       	eor	r19, r19
   18f9e:	92 2f       	mov	r25, r18
   18fa0:	99 0f       	add	r25, r25
   18fa2:	99 0f       	add	r25, r25
   18fa4:	d2 2f       	mov	r29, r18
   18fa6:	d9 1b       	sub	r29, r25
   18fa8:	dd 0f       	add	r29, r29
   18faa:	d8 0f       	add	r29, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   18fac:	81 e3       	ldi	r24, 0x31	; 49
   18fae:	91 e1       	ldi	r25, 0x11	; 17
   18fb0:	0e 94 85 c8 	call	0x1910a	; 0x1910a <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   18fb4:	9c 01       	movw	r18, r24
   18fb6:	54 e0       	ldi	r21, 0x04	; 4
   18fb8:	35 95       	asr	r19
   18fba:	27 95       	ror	r18
   18fbc:	5a 95       	dec	r21
   18fbe:	e1 f7       	brne	.-8      	; 0x18fb8 <RTC_DS1307::now()+0x96>
   18fc0:	2f 70       	andi	r18, 0x0F	; 15
   18fc2:	33 27       	eor	r19, r19
   18fc4:	92 2f       	mov	r25, r18
   18fc6:	99 0f       	add	r25, r25
   18fc8:	99 0f       	add	r25, r25
   18fca:	12 2f       	mov	r17, r18
   18fcc:	19 1b       	sub	r17, r25
   18fce:	11 0f       	add	r17, r17
   18fd0:	18 0f       	add	r17, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   18fd2:	81 e3       	ldi	r24, 0x31	; 49
   18fd4:	91 e1       	ldi	r25, 0x11	; 17
   18fd6:	0e 94 85 c8 	call	0x1910a	; 0x1910a <TwoWire::read()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
   18fda:	81 e3       	ldi	r24, 0x31	; 49
   18fdc:	91 e1       	ldi	r25, 0x11	; 17
   18fde:	0e 94 85 c8 	call	0x1910a	; 0x1910a <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   18fe2:	9c 01       	movw	r18, r24
   18fe4:	64 e0       	ldi	r22, 0x04	; 4
   18fe6:	35 95       	asr	r19
   18fe8:	27 95       	ror	r18
   18fea:	6a 95       	dec	r22
   18fec:	e1 f7       	brne	.-8      	; 0x18fe6 <RTC_DS1307::now()+0xc4>
   18fee:	2f 70       	andi	r18, 0x0F	; 15
   18ff0:	33 27       	eor	r19, r19
   18ff2:	92 2f       	mov	r25, r18
   18ff4:	99 0f       	add	r25, r25
   18ff6:	99 0f       	add	r25, r25
   18ff8:	02 2f       	mov	r16, r18
   18ffa:	09 1b       	sub	r16, r25
   18ffc:	00 0f       	add	r16, r16
   18ffe:	08 0f       	add	r16, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   19000:	81 e3       	ldi	r24, 0x31	; 49
   19002:	91 e1       	ldi	r25, 0x11	; 17
   19004:	0e 94 85 c8 	call	0x1910a	; 0x1910a <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   19008:	9c 01       	movw	r18, r24
   1900a:	74 e0       	ldi	r23, 0x04	; 4
   1900c:	35 95       	asr	r19
   1900e:	27 95       	ror	r18
   19010:	7a 95       	dec	r23
   19012:	e1 f7       	brne	.-8      	; 0x1900c <RTC_DS1307::now()+0xea>
   19014:	2f 70       	andi	r18, 0x0F	; 15
   19016:	33 27       	eor	r19, r19
   19018:	92 2f       	mov	r25, r18
   1901a:	99 0f       	add	r25, r25
   1901c:	99 0f       	add	r25, r25
   1901e:	f2 2e       	mov	r15, r18
   19020:	f9 1a       	sub	r15, r25
   19022:	ff 0c       	add	r15, r15
   19024:	f8 0e       	add	r15, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   19026:	81 e3       	ldi	r24, 0x31	; 49
   19028:	91 e1       	ldi	r25, 0x11	; 17
   1902a:	0e 94 85 c8 	call	0x1910a	; 0x1910a <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   1902e:	9c 01       	movw	r18, r24
   19030:	e4 e0       	ldi	r30, 0x04	; 4
   19032:	35 95       	asr	r19
   19034:	27 95       	ror	r18
   19036:	ea 95       	dec	r30
   19038:	e1 f7       	brne	.-8      	; 0x19032 <RTC_DS1307::now()+0x110>
   1903a:	2f 70       	andi	r18, 0x0F	; 15
   1903c:	33 27       	eor	r19, r19
   1903e:	92 2f       	mov	r25, r18
   19040:	99 0f       	add	r25, r25
   19042:	99 0f       	add	r25, r25
   19044:	29 1b       	sub	r18, r25
   19046:	22 0f       	add	r18, r18
   19048:	82 0f       	add	r24, r18
_ZN8DateTimeC4Ejhhhhh():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   1904a:	f6 01       	movw	r30, r12
   1904c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   1904e:	f1 82       	std	Z+1, r15	; 0x01
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   19050:	02 83       	std	Z+2, r16	; 0x02
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   19052:	13 83       	std	Z+3, r17	; 0x03
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   19054:	d4 83       	std	Z+4, r29	; 0x04
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   19056:	c5 83       	std	Z+5, r28	; 0x05
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:283
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
   19058:	c6 01       	movw	r24, r12
   1905a:	df 91       	pop	r29
   1905c:	cf 91       	pop	r28
   1905e:	1f 91       	pop	r17
   19060:	0f 91       	pop	r16
   19062:	ff 90       	pop	r15
   19064:	df 90       	pop	r13
   19066:	cf 90       	pop	r12
   19068:	08 95       	ret

0001906a <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)>:
_ZN24Temperature_LM75_Derived30readIntegerTemperatureRegisterEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:51
  .default_temperature_frac_width = 8,
  .max_temperature_resolution     = 13,
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
   1906a:	0f 93       	push	r16
   1906c:	1f 93       	push	r17
   1906e:	cf 93       	push	r28
   19070:	df 93       	push	r29
   19072:	ec 01       	movw	r28, r24
   19074:	16 2f       	mov	r17, r22
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
   19076:	6a 81       	ldd	r22, Y+2	; 0x02
   19078:	88 81       	ld	r24, Y
   1907a:	99 81       	ldd	r25, Y+1	; 0x01
   1907c:	0e 94 4c c9 	call	0x19298	; 0x19298 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
   19080:	88 81       	ld	r24, Y
   19082:	99 81       	ldd	r25, Y+1	; 0x01
   19084:	dc 01       	movw	r26, r24
   19086:	ed 91       	ld	r30, X+
   19088:	fc 91       	ld	r31, X
   1908a:	01 90       	ld	r0, Z+
   1908c:	f0 81       	ld	r31, Z
   1908e:	e0 2d       	mov	r30, r0
   19090:	61 2f       	mov	r22, r17
   19092:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
   19094:	88 81       	ld	r24, Y
   19096:	99 81       	ldd	r25, Y+1	; 0x01
   19098:	0e 94 d4 c9 	call	0x193a8	; 0x193a8 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
   1909c:	88 81       	ld	r24, Y
   1909e:	99 81       	ldd	r25, Y+1	; 0x01
   190a0:	2b 81       	ldd	r18, Y+3	; 0x03
   190a2:	42 e0       	ldi	r20, 0x02	; 2
   190a4:	29 30       	cpi	r18, 0x09	; 9
   190a6:	08 f4       	brcc	.+2      	; 0x190aa <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)+0x40>
   190a8:	41 e0       	ldi	r20, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58 (discriminator 4)
   190aa:	6a 81       	ldd	r22, Y+2	; 0x02
   190ac:	0e 94 ce c9 	call	0x1939c	; 0x1939c <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61 (discriminator 4)

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
   190b0:	88 81       	ld	r24, Y
   190b2:	99 81       	ldd	r25, Y+1	; 0x01
   190b4:	dc 01       	movw	r26, r24
   190b6:	ed 91       	ld	r30, X+
   190b8:	fc 91       	ld	r31, X
   190ba:	02 84       	ldd	r0, Z+10	; 0x0a
   190bc:	f3 85       	ldd	r31, Z+11	; 0x0b
   190be:	e0 2d       	mov	r30, r0
   190c0:	19 95       	eicall
   190c2:	00 e0       	ldi	r16, 0x00	; 0
   190c4:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64 (discriminator 4)
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
   190c6:	8b 81       	ldd	r24, Y+3	; 0x03
   190c8:	89 30       	cpi	r24, 0x09	; 9
   190ca:	58 f0       	brcs	.+22     	; 0x190e2 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)+0x78>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
   190cc:	88 81       	ld	r24, Y
   190ce:	99 81       	ldd	r25, Y+1	; 0x01
   190d0:	dc 01       	movw	r26, r24
   190d2:	ed 91       	ld	r30, X+
   190d4:	fc 91       	ld	r31, X
   190d6:	02 84       	ldd	r0, Z+10	; 0x0a
   190d8:	f3 85       	ldd	r31, Z+11	; 0x0b
   190da:	e0 2d       	mov	r30, r0
   190dc:	19 95       	eicall
   190de:	08 2b       	or	r16, r24
   190e0:	19 2b       	or	r17, r25
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
   190e2:	88 81       	ld	r24, Y
   190e4:	99 81       	ldd	r25, Y+1	; 0x01
   190e6:	0e 94 d4 c9 	call	0x193a8	; 0x193a8 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
   190ea:	8c 81       	ldd	r24, Y+4	; 0x04
   190ec:	9d 81       	ldd	r25, Y+5	; 0x05
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:76

  // Read the raw memory as a 16-bit signed integer and return.
  return *(int16_t *)(&t);
}
   190ee:	80 23       	and	r24, r16
   190f0:	91 23       	and	r25, r17
   190f2:	df 91       	pop	r29
   190f4:	cf 91       	pop	r28
   190f6:	1f 91       	pop	r17
   190f8:	0f 91       	pop	r16
   190fa:	08 95       	ret

000190fc <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:326

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
   190fc:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <TwoWire::rxBufferLength>
   19100:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <TwoWire::rxBufferIndex>
   19104:	89 1b       	sub	r24, r25
   19106:	99 0b       	sbc	r25, r25
   19108:	08 95       	ret

0001910a <TwoWire::read()>:
_ZN7TwoWire4readEv():
   1910a:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <TwoWire::rxBufferIndex>
   1910e:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <TwoWire::rxBufferLength>
   19112:	2f ef       	ldi	r18, 0xFF	; 255
   19114:	3f ef       	ldi	r19, 0xFF	; 255
   19116:	98 17       	cp	r25, r24
   19118:	48 f4       	brcc	.+18     	; 0x1912c <TwoWire::read()+0x22>
   1911a:	e9 2f       	mov	r30, r25
   1911c:	f0 e0       	ldi	r31, 0x00	; 0
   1911e:	e9 59       	subi	r30, 0x99	; 153
   19120:	fe 4e       	sbci	r31, 0xEE	; 238
   19122:	20 81       	ld	r18, Z
   19124:	30 e0       	ldi	r19, 0x00	; 0
   19126:	9f 5f       	subi	r25, 0xFF	; 255
   19128:	90 93 66 11 	sts	0x1166, r25	; 0x801166 <TwoWire::rxBufferIndex>
   1912c:	c9 01       	movw	r24, r18
   1912e:	08 95       	ret

00019130 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
   19130:	e0 91 66 11 	lds	r30, 0x1166	; 0x801166 <TwoWire::rxBufferIndex>
   19134:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <TwoWire::rxBufferLength>
   19138:	e8 17       	cp	r30, r24
   1913a:	30 f4       	brcc	.+12     	; 0x19148 <TwoWire::peek()+0x18>
   1913c:	f0 e0       	ldi	r31, 0x00	; 0
   1913e:	e9 59       	subi	r30, 0x99	; 153
   19140:	fe 4e       	sbci	r31, 0xEE	; 238
   19142:	80 81       	ld	r24, Z
   19144:	90 e0       	ldi	r25, 0x00	; 0
   19146:	08 95       	ret
   19148:	8f ef       	ldi	r24, 0xFF	; 255
   1914a:	9f ef       	ldi	r25, 0xFF	; 255
   1914c:	08 95       	ret

0001914e <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
   1914e:	08 95       	ret

00019150 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
   19150:	cf 93       	push	r28
   19152:	df 93       	push	r29
   19154:	ec 01       	movw	r28, r24
   19156:	e0 91 3d 11 	lds	r30, 0x113D	; 0x80113d <TwoWire::user_onReceive>
   1915a:	f0 91 3e 11 	lds	r31, 0x113E	; 0x80113e <TwoWire::user_onReceive+0x1>
   1915e:	30 97       	sbiw	r30, 0x00	; 0
   19160:	f1 f0       	breq	.+60     	; 0x1919e <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
   19162:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <TwoWire::rxBufferIndex>
   19166:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <TwoWire::rxBufferLength>
   1916a:	98 17       	cp	r25, r24
   1916c:	c0 f0       	brcs	.+48     	; 0x1919e <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
   1916e:	90 e0       	ldi	r25, 0x00	; 0
   19170:	29 2f       	mov	r18, r25
   19172:	30 e0       	ldi	r19, 0x00	; 0
   19174:	26 17       	cp	r18, r22
   19176:	37 07       	cpc	r19, r23
   19178:	54 f4       	brge	.+20     	; 0x1918e <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
   1917a:	de 01       	movw	r26, r28
   1917c:	a2 0f       	add	r26, r18
   1917e:	b3 1f       	adc	r27, r19
   19180:	4c 91       	ld	r20, X
   19182:	29 59       	subi	r18, 0x99	; 153
   19184:	3e 4e       	sbci	r19, 0xEE	; 238
   19186:	d9 01       	movw	r26, r18
   19188:	4c 93       	st	X, r20
   1918a:	9f 5f       	subi	r25, 0xFF	; 255
   1918c:	f1 cf       	rjmp	.-30     	; 0x19170 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
   1918e:	10 92 66 11 	sts	0x1166, r1	; 0x801166 <TwoWire::rxBufferIndex>
   19192:	60 93 65 11 	sts	0x1165, r22	; 0x801165 <TwoWire::rxBufferLength>
   19196:	cb 01       	movw	r24, r22
   19198:	df 91       	pop	r29
   1919a:	cf 91       	pop	r28
   1919c:	19 94       	eijmp
   1919e:	df 91       	pop	r29
   191a0:	cf 91       	pop	r28
   191a2:	08 95       	ret

000191a4 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
   191a4:	e0 91 3f 11 	lds	r30, 0x113F	; 0x80113f <TwoWire::user_onRequest>
   191a8:	f0 91 40 11 	lds	r31, 0x1140	; 0x801140 <TwoWire::user_onRequest+0x1>
   191ac:	30 97       	sbiw	r30, 0x00	; 0
   191ae:	29 f0       	breq	.+10     	; 0x191ba <TwoWire::onRequestService()+0x16>
   191b0:	10 92 43 11 	sts	0x1143, r1	; 0x801143 <TwoWire::txBufferIndex>
   191b4:	10 92 42 11 	sts	0x1142, r1	; 0x801142 <TwoWire::txBufferLength>
   191b8:	19 94       	eijmp
   191ba:	08 95       	ret

000191bc <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
   191bc:	cf 93       	push	r28
   191be:	df 93       	push	r29
   191c0:	1f 92       	push	r1
   191c2:	cd b7       	in	r28, 0x3d	; 61
   191c4:	de b7       	in	r29, 0x3e	; 62
   191c6:	69 83       	std	Y+1, r22	; 0x01
   191c8:	20 91 41 11 	lds	r18, 0x1141	; 0x801141 <TwoWire::transmitting>
   191cc:	22 23       	and	r18, r18
   191ce:	f9 f0       	breq	.+62     	; 0x1920e <TwoWire::write(unsigned char)+0x52>
   191d0:	20 91 42 11 	lds	r18, 0x1142	; 0x801142 <TwoWire::txBufferLength>
   191d4:	20 32       	cpi	r18, 0x20	; 32
   191d6:	58 f0       	brcs	.+22     	; 0x191ee <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
   191d8:	21 e0       	ldi	r18, 0x01	; 1
   191da:	30 e0       	ldi	r19, 0x00	; 0
   191dc:	fc 01       	movw	r30, r24
   191de:	33 83       	std	Z+3, r19	; 0x03
   191e0:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
   191e2:	90 e0       	ldi	r25, 0x00	; 0
   191e4:	80 e0       	ldi	r24, 0x00	; 0
   191e6:	0f 90       	pop	r0
   191e8:	df 91       	pop	r29
   191ea:	cf 91       	pop	r28
   191ec:	08 95       	ret
   191ee:	80 91 43 11 	lds	r24, 0x1143	; 0x801143 <TwoWire::txBufferIndex>
   191f2:	e8 2f       	mov	r30, r24
   191f4:	f0 e0       	ldi	r31, 0x00	; 0
   191f6:	ec 5b       	subi	r30, 0xBC	; 188
   191f8:	fe 4e       	sbci	r31, 0xEE	; 238
   191fa:	99 81       	ldd	r25, Y+1	; 0x01
   191fc:	90 83       	st	Z, r25
   191fe:	8f 5f       	subi	r24, 0xFF	; 255
   19200:	80 93 43 11 	sts	0x1143, r24	; 0x801143 <TwoWire::txBufferIndex>
   19204:	80 93 42 11 	sts	0x1142, r24	; 0x801142 <TwoWire::txBufferLength>
   19208:	81 e0       	ldi	r24, 0x01	; 1
   1920a:	90 e0       	ldi	r25, 0x00	; 0
   1920c:	ec cf       	rjmp	.-40     	; 0x191e6 <TwoWire::write(unsigned char)+0x2a>
   1920e:	61 e0       	ldi	r22, 0x01	; 1
   19210:	ce 01       	movw	r24, r28
   19212:	01 96       	adiw	r24, 0x01	; 1
   19214:	0e 94 a5 ca 	call	0x1954a	; 0x1954a <twi_transmit>
   19218:	f7 cf       	rjmp	.-18     	; 0x19208 <TwoWire::write(unsigned char)+0x4c>

0001921a <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
   1921a:	cf 92       	push	r12
   1921c:	df 92       	push	r13
   1921e:	ef 92       	push	r14
   19220:	ff 92       	push	r15
   19222:	0f 93       	push	r16
   19224:	1f 93       	push	r17
   19226:	cf 93       	push	r28
   19228:	df 93       	push	r29
   1922a:	7c 01       	movw	r14, r24
   1922c:	cb 01       	movw	r24, r22
   1922e:	8a 01       	movw	r16, r20
   19230:	20 91 41 11 	lds	r18, 0x1141	; 0x801141 <TwoWire::transmitting>
   19234:	22 23       	and	r18, r18
   19236:	89 f0       	breq	.+34     	; 0x1925a <TwoWire::write(unsigned char const*, unsigned int)+0x40>
   19238:	eb 01       	movw	r28, r22
   1923a:	6b 01       	movw	r12, r22
   1923c:	c4 0e       	add	r12, r20
   1923e:	d5 1e       	adc	r13, r21
   19240:	cc 15       	cp	r28, r12
   19242:	dd 05       	cpc	r29, r13
   19244:	69 f0       	breq	.+26     	; 0x19260 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
   19246:	69 91       	ld	r22, Y+
   19248:	d7 01       	movw	r26, r14
   1924a:	ed 91       	ld	r30, X+
   1924c:	fc 91       	ld	r31, X
   1924e:	01 90       	ld	r0, Z+
   19250:	f0 81       	ld	r31, Z
   19252:	e0 2d       	mov	r30, r0
   19254:	c7 01       	movw	r24, r14
   19256:	19 95       	eicall
   19258:	f3 cf       	rjmp	.-26     	; 0x19240 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
   1925a:	64 2f       	mov	r22, r20
   1925c:	0e 94 a5 ca 	call	0x1954a	; 0x1954a <twi_transmit>
   19260:	c8 01       	movw	r24, r16
   19262:	df 91       	pop	r29
   19264:	cf 91       	pop	r28
   19266:	1f 91       	pop	r17
   19268:	0f 91       	pop	r16
   1926a:	ff 90       	pop	r15
   1926c:	ef 90       	pop	r14
   1926e:	df 90       	pop	r13
   19270:	cf 90       	pop	r12
   19272:	08 95       	ret

00019274 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
   19274:	10 92 66 11 	sts	0x1166, r1	; 0x801166 <TwoWire::rxBufferIndex>
   19278:	10 92 65 11 	sts	0x1165, r1	; 0x801165 <TwoWire::rxBufferLength>
   1927c:	10 92 43 11 	sts	0x1143, r1	; 0x801143 <TwoWire::txBufferIndex>
   19280:	10 92 42 11 	sts	0x1142, r1	; 0x801142 <TwoWire::txBufferLength>
   19284:	0e 94 e8 c9 	call	0x193d0	; 0x193d0 <twi_init>
   19288:	82 ed       	ldi	r24, 0xD2	; 210
   1928a:	98 ec       	ldi	r25, 0xC8	; 200
   1928c:	0e 94 d1 ca 	call	0x195a2	; 0x195a2 <twi_attachSlaveTxEvent>
   19290:	88 ea       	ldi	r24, 0xA8	; 168
   19292:	98 ec       	ldi	r25, 0xC8	; 200
   19294:	0c 94 cc ca 	jmp	0x19598	; 0x19598 <twi_attachSlaveRxEvent>

00019298 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
   19298:	81 e0       	ldi	r24, 0x01	; 1
   1929a:	80 93 41 11 	sts	0x1141, r24	; 0x801141 <TwoWire::transmitting>
   1929e:	60 93 64 11 	sts	0x1164, r22	; 0x801164 <TwoWire::txAddress>
   192a2:	10 92 43 11 	sts	0x1143, r1	; 0x801143 <TwoWire::txBufferIndex>
   192a6:	10 92 42 11 	sts	0x1142, r1	; 0x801142 <TwoWire::txBufferLength>
   192aa:	08 95       	ret

000192ac <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
   192ac:	0c 94 4c c9 	jmp	0x19298	; 0x19298 <TwoWire::beginTransmission(unsigned char)>

000192b0 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
   192b0:	0f 93       	push	r16
   192b2:	06 2f       	mov	r16, r22
   192b4:	21 e0       	ldi	r18, 0x01	; 1
   192b6:	40 91 42 11 	lds	r20, 0x1142	; 0x801142 <TwoWire::txBufferLength>
   192ba:	64 e4       	ldi	r22, 0x44	; 68
   192bc:	71 e1       	ldi	r23, 0x11	; 17
   192be:	80 91 64 11 	lds	r24, 0x1164	; 0x801164 <TwoWire::txAddress>
   192c2:	0e 94 4e ca 	call	0x1949c	; 0x1949c <twi_writeTo>
   192c6:	10 92 43 11 	sts	0x1143, r1	; 0x801143 <TwoWire::txBufferIndex>
   192ca:	10 92 42 11 	sts	0x1142, r1	; 0x801142 <TwoWire::txBufferLength>
   192ce:	10 92 41 11 	sts	0x1141, r1	; 0x801141 <TwoWire::transmitting>
   192d2:	0f 91       	pop	r16
   192d4:	08 95       	ret

000192d6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
   192d6:	4f 92       	push	r4
   192d8:	5f 92       	push	r5
   192da:	6f 92       	push	r6
   192dc:	7f 92       	push	r7
   192de:	af 92       	push	r10
   192e0:	bf 92       	push	r11
   192e2:	cf 92       	push	r12
   192e4:	ef 92       	push	r14
   192e6:	ff 92       	push	r15
   192e8:	0f 93       	push	r16
   192ea:	1f 93       	push	r17
   192ec:	cf 93       	push	r28
   192ee:	df 93       	push	r29
   192f0:	5c 01       	movw	r10, r24
   192f2:	f6 2e       	mov	r15, r22
   192f4:	d4 2f       	mov	r29, r20
   192f6:	28 01       	movw	r4, r16
   192f8:	39 01       	movw	r6, r18
   192fa:	ee 20       	and	r14, r14
   192fc:	19 f1       	breq	.+70     	; 0x19344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
   192fe:	0e 94 4c c9 	call	0x19298	; 0x19298 <TwoWire::beginTransmission(unsigned char)>
   19302:	ce 2d       	mov	r28, r14
   19304:	c4 30       	cpi	r28, 0x04	; 4
   19306:	08 f0       	brcs	.+2      	; 0x1930a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
   19308:	c3 e0       	ldi	r28, 0x03	; 3
   1930a:	c1 50       	subi	r28, 0x01	; 1
   1930c:	b8 f0       	brcs	.+46     	; 0x1933c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
   1930e:	28 e0       	ldi	r18, 0x08	; 8
   19310:	c2 9f       	mul	r28, r18
   19312:	c0 01       	movw	r24, r0
   19314:	11 24       	eor	r1, r1
   19316:	a3 01       	movw	r20, r6
   19318:	92 01       	movw	r18, r4
   1931a:	04 c0       	rjmp	.+8      	; 0x19324 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
   1931c:	56 95       	lsr	r21
   1931e:	47 95       	ror	r20
   19320:	37 95       	ror	r19
   19322:	27 95       	ror	r18
   19324:	8a 95       	dec	r24
   19326:	d2 f7       	brpl	.-12     	; 0x1931c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
   19328:	b9 01       	movw	r22, r18
   1932a:	d5 01       	movw	r26, r10
   1932c:	ed 91       	ld	r30, X+
   1932e:	fc 91       	ld	r31, X
   19330:	01 90       	ld	r0, Z+
   19332:	f0 81       	ld	r31, Z
   19334:	e0 2d       	mov	r30, r0
   19336:	c5 01       	movw	r24, r10
   19338:	19 95       	eicall
   1933a:	e7 cf       	rjmp	.-50     	; 0x1930a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
   1933c:	60 e0       	ldi	r22, 0x00	; 0
   1933e:	c5 01       	movw	r24, r10
   19340:	0e 94 58 c9 	call	0x192b0	; 0x192b0 <TwoWire::endTransmission(unsigned char)>
   19344:	4d 2f       	mov	r20, r29
   19346:	d1 32       	cpi	r29, 0x21	; 33
   19348:	08 f0       	brcs	.+2      	; 0x1934c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
   1934a:	40 e2       	ldi	r20, 0x20	; 32
   1934c:	2c 2d       	mov	r18, r12
   1934e:	67 e6       	ldi	r22, 0x67	; 103
   19350:	71 e1       	ldi	r23, 0x11	; 17
   19352:	8f 2d       	mov	r24, r15
   19354:	0e 94 06 ca 	call	0x1940c	; 0x1940c <twi_readFrom>
   19358:	10 92 66 11 	sts	0x1166, r1	; 0x801166 <TwoWire::rxBufferIndex>
   1935c:	80 93 65 11 	sts	0x1165, r24	; 0x801165 <TwoWire::rxBufferLength>
   19360:	df 91       	pop	r29
   19362:	cf 91       	pop	r28
   19364:	1f 91       	pop	r17
   19366:	0f 91       	pop	r16
   19368:	ff 90       	pop	r15
   1936a:	ef 90       	pop	r14
   1936c:	cf 90       	pop	r12
   1936e:	bf 90       	pop	r11
   19370:	af 90       	pop	r10
   19372:	7f 90       	pop	r7
   19374:	6f 90       	pop	r6
   19376:	5f 90       	pop	r5
   19378:	4f 90       	pop	r4
   1937a:	08 95       	ret

0001937c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
   1937c:	cf 92       	push	r12
   1937e:	ef 92       	push	r14
   19380:	0f 93       	push	r16
   19382:	1f 93       	push	r17
   19384:	c2 2e       	mov	r12, r18
   19386:	e1 2c       	mov	r14, r1
   19388:	00 e0       	ldi	r16, 0x00	; 0
   1938a:	10 e0       	ldi	r17, 0x00	; 0
   1938c:	98 01       	movw	r18, r16
   1938e:	0e 94 6b c9 	call	0x192d6	; 0x192d6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
   19392:	1f 91       	pop	r17
   19394:	0f 91       	pop	r16
   19396:	ef 90       	pop	r14
   19398:	cf 90       	pop	r12
   1939a:	08 95       	ret

0001939c <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
   1939c:	21 e0       	ldi	r18, 0x01	; 1
   1939e:	0c 94 be c9 	jmp	0x1937c	; 0x1937c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

000193a2 <TwoWire::requestFrom(int, int)>:
_ZN7TwoWire11requestFromEii():
   193a2:	21 e0       	ldi	r18, 0x01	; 1
   193a4:	0c 94 be c9 	jmp	0x1937c	; 0x1937c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

000193a8 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
   193a8:	61 e0       	ldi	r22, 0x01	; 1
   193aa:	0c 94 58 c9 	jmp	0x192b0	; 0x192b0 <TwoWire::endTransmission(unsigned char)>

000193ae <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   193ae:	e1 e3       	ldi	r30, 0x31	; 49
   193b0:	f1 e1       	ldi	r31, 0x11	; 17
   193b2:	13 82       	std	Z+3, r1	; 0x03
   193b4:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   193b6:	88 ee       	ldi	r24, 0xE8	; 232
   193b8:	93 e0       	ldi	r25, 0x03	; 3
   193ba:	a0 e0       	ldi	r26, 0x00	; 0
   193bc:	b0 e0       	ldi	r27, 0x00	; 0
   193be:	84 83       	std	Z+4, r24	; 0x04
   193c0:	95 83       	std	Z+5, r25	; 0x05
   193c2:	a6 83       	std	Z+6, r26	; 0x06
   193c4:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:49
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
   193c6:	8b ea       	ldi	r24, 0xAB	; 171
   193c8:	98 e0       	ldi	r25, 0x08	; 8
   193ca:	91 83       	std	Z+1, r25	; 0x01
   193cc:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:330
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
   193ce:	08 95       	ret

000193d0 <twi_init>:
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   193d0:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <twi_state>
   193d4:	81 e0       	ldi	r24, 0x01	; 1
   193d6:	80 93 f2 11 	sts	0x11F2, r24	; 0x8011f2 <twi_sendStop>
   193da:	10 92 f1 11 	sts	0x11F1, r1	; 0x8011f1 <twi_inRepStart>
   193de:	61 e0       	ldi	r22, 0x01	; 1
   193e0:	83 e1       	ldi	r24, 0x13	; 19
   193e2:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
   193e6:	61 e0       	ldi	r22, 0x01	; 1
   193e8:	82 e1       	ldi	r24, 0x12	; 18
   193ea:	0e 94 84 d2 	call	0x1a508	; 0x1a508 <digitalWrite>
   193ee:	e9 eb       	ldi	r30, 0xB9	; 185
   193f0:	f0 e0       	ldi	r31, 0x00	; 0
   193f2:	80 81       	ld	r24, Z
   193f4:	8e 7f       	andi	r24, 0xFE	; 254
   193f6:	80 83       	st	Z, r24
   193f8:	80 81       	ld	r24, Z
   193fa:	8d 7f       	andi	r24, 0xFD	; 253
   193fc:	80 83       	st	Z, r24
   193fe:	88 e4       	ldi	r24, 0x48	; 72
   19400:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
   19404:	85 e4       	ldi	r24, 0x45	; 69
   19406:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   1940a:	08 95       	ret

0001940c <twi_readFrom>:
twi_readFrom():
   1940c:	41 32       	cpi	r20, 0x21	; 33
   1940e:	08 f0       	brcs	.+2      	; 0x19412 <twi_readFrom+0x6>
   19410:	43 c0       	rjmp	.+134    	; 0x19498 <twi_readFrom+0x8c>
   19412:	90 91 f4 11 	lds	r25, 0x11F4	; 0x8011f4 <twi_state>
   19416:	91 11       	cpse	r25, r1
   19418:	fc cf       	rjmp	.-8      	; 0x19412 <twi_readFrom+0x6>
   1941a:	91 e0       	ldi	r25, 0x01	; 1
   1941c:	90 93 f4 11 	sts	0x11F4, r25	; 0x8011f4 <twi_state>
   19420:	20 93 f2 11 	sts	0x11F2, r18	; 0x8011f2 <twi_sendStop>
   19424:	2f ef       	ldi	r18, 0xFF	; 255
   19426:	20 93 87 11 	sts	0x1187, r18	; 0x801187 <twi_error>
   1942a:	10 92 cc 11 	sts	0x11CC, r1	; 0x8011cc <twi_masterBufferIndex>
   1942e:	24 0f       	add	r18, r20
   19430:	20 93 cb 11 	sts	0x11CB, r18	; 0x8011cb <twi_masterBufferLength>
   19434:	90 93 f3 11 	sts	0x11F3, r25	; 0x8011f3 <twi_slarw>
   19438:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <twi_slarw>
   1943c:	88 0f       	add	r24, r24
   1943e:	89 2b       	or	r24, r25
   19440:	80 93 f3 11 	sts	0x11F3, r24	; 0x8011f3 <twi_slarw>
   19444:	80 91 f1 11 	lds	r24, 0x11F1	; 0x8011f1 <twi_inRepStart>
   19448:	81 30       	cpi	r24, 0x01	; 1
   1944a:	09 f5       	brne	.+66     	; 0x1948e <twi_readFrom+0x82>
   1944c:	10 92 f1 11 	sts	0x11F1, r1	; 0x8011f1 <twi_inRepStart>
   19450:	80 91 f3 11 	lds	r24, 0x11F3	; 0x8011f3 <twi_slarw>
   19454:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   19458:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   1945c:	83 fd       	sbrc	r24, 3
   1945e:	f8 cf       	rjmp	.-16     	; 0x19450 <twi_readFrom+0x44>
   19460:	85 ec       	ldi	r24, 0xC5	; 197
   19462:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   19466:	80 91 f4 11 	lds	r24, 0x11F4	; 0x8011f4 <twi_state>
   1946a:	81 30       	cpi	r24, 0x01	; 1
   1946c:	e1 f3       	breq	.-8      	; 0x19466 <twi_readFrom+0x5a>
   1946e:	80 91 cc 11 	lds	r24, 0x11CC	; 0x8011cc <twi_masterBufferIndex>
   19472:	84 17       	cp	r24, r20
   19474:	10 f4       	brcc	.+4      	; 0x1947a <twi_readFrom+0x6e>
   19476:	40 91 cc 11 	lds	r20, 0x11CC	; 0x8011cc <twi_masterBufferIndex>
   1947a:	ad ec       	ldi	r26, 0xCD	; 205
   1947c:	b1 e1       	ldi	r27, 0x11	; 17
   1947e:	96 2f       	mov	r25, r22
   19480:	fb 01       	movw	r30, r22
   19482:	8e 2f       	mov	r24, r30
   19484:	89 1b       	sub	r24, r25
   19486:	84 17       	cp	r24, r20
   19488:	20 f0       	brcs	.+8      	; 0x19492 <twi_readFrom+0x86>
   1948a:	84 2f       	mov	r24, r20
   1948c:	08 95       	ret
   1948e:	85 ee       	ldi	r24, 0xE5	; 229
   19490:	e8 cf       	rjmp	.-48     	; 0x19462 <twi_readFrom+0x56>
   19492:	8d 91       	ld	r24, X+
   19494:	81 93       	st	Z+, r24
   19496:	f5 cf       	rjmp	.-22     	; 0x19482 <twi_readFrom+0x76>
   19498:	40 e0       	ldi	r20, 0x00	; 0
   1949a:	f7 cf       	rjmp	.-18     	; 0x1948a <twi_readFrom+0x7e>

0001949c <twi_writeTo>:
twi_writeTo():
   1949c:	0f 93       	push	r16
   1949e:	41 32       	cpi	r20, 0x21	; 33
   194a0:	08 f0       	brcs	.+2      	; 0x194a4 <twi_writeTo+0x8>
   194a2:	4b c0       	rjmp	.+150    	; 0x1953a <twi_writeTo+0x9e>
   194a4:	90 91 f4 11 	lds	r25, 0x11F4	; 0x8011f4 <twi_state>
   194a8:	91 11       	cpse	r25, r1
   194aa:	fc cf       	rjmp	.-8      	; 0x194a4 <twi_writeTo+0x8>
   194ac:	92 e0       	ldi	r25, 0x02	; 2
   194ae:	90 93 f4 11 	sts	0x11F4, r25	; 0x8011f4 <twi_state>
   194b2:	00 93 f2 11 	sts	0x11F2, r16	; 0x8011f2 <twi_sendStop>
   194b6:	9f ef       	ldi	r25, 0xFF	; 255
   194b8:	90 93 87 11 	sts	0x1187, r25	; 0x801187 <twi_error>
   194bc:	10 92 cc 11 	sts	0x11CC, r1	; 0x8011cc <twi_masterBufferIndex>
   194c0:	40 93 cb 11 	sts	0x11CB, r20	; 0x8011cb <twi_masterBufferLength>
   194c4:	36 2f       	mov	r19, r22
   194c6:	ad ec       	ldi	r26, 0xCD	; 205
   194c8:	b1 e1       	ldi	r27, 0x11	; 17
   194ca:	fb 01       	movw	r30, r22
   194cc:	9e 2f       	mov	r25, r30
   194ce:	93 1b       	sub	r25, r19
   194d0:	94 17       	cp	r25, r20
   194d2:	70 f1       	brcs	.+92     	; 0x19530 <twi_writeTo+0x94>
   194d4:	10 92 f3 11 	sts	0x11F3, r1	; 0x8011f3 <twi_slarw>
   194d8:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <twi_slarw>
   194dc:	88 0f       	add	r24, r24
   194de:	89 2b       	or	r24, r25
   194e0:	80 93 f3 11 	sts	0x11F3, r24	; 0x8011f3 <twi_slarw>
   194e4:	80 91 f1 11 	lds	r24, 0x11F1	; 0x8011f1 <twi_inRepStart>
   194e8:	81 30       	cpi	r24, 0x01	; 1
   194ea:	29 f5       	brne	.+74     	; 0x19536 <twi_writeTo+0x9a>
   194ec:	10 92 f1 11 	sts	0x11F1, r1	; 0x8011f1 <twi_inRepStart>
   194f0:	80 91 f3 11 	lds	r24, 0x11F3	; 0x8011f3 <twi_slarw>
   194f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   194f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   194fc:	83 fd       	sbrc	r24, 3
   194fe:	f8 cf       	rjmp	.-16     	; 0x194f0 <twi_writeTo+0x54>
   19500:	85 ec       	ldi	r24, 0xC5	; 197
   19502:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   19506:	22 23       	and	r18, r18
   19508:	21 f0       	breq	.+8      	; 0x19512 <twi_writeTo+0x76>
   1950a:	80 91 f4 11 	lds	r24, 0x11F4	; 0x8011f4 <twi_state>
   1950e:	82 30       	cpi	r24, 0x02	; 2
   19510:	d1 f3       	breq	.-12     	; 0x19506 <twi_writeTo+0x6a>
   19512:	80 91 87 11 	lds	r24, 0x1187	; 0x801187 <twi_error>
   19516:	8f 3f       	cpi	r24, 0xFF	; 255
   19518:	91 f0       	breq	.+36     	; 0x1953e <twi_writeTo+0xa2>
   1951a:	80 91 87 11 	lds	r24, 0x1187	; 0x801187 <twi_error>
   1951e:	80 32       	cpi	r24, 0x20	; 32
   19520:	81 f0       	breq	.+32     	; 0x19542 <twi_writeTo+0xa6>
   19522:	80 91 87 11 	lds	r24, 0x1187	; 0x801187 <twi_error>
   19526:	80 33       	cpi	r24, 0x30	; 48
   19528:	71 f0       	breq	.+28     	; 0x19546 <twi_writeTo+0xaa>
   1952a:	84 e0       	ldi	r24, 0x04	; 4
   1952c:	0f 91       	pop	r16
   1952e:	08 95       	ret
   19530:	91 91       	ld	r25, Z+
   19532:	9d 93       	st	X+, r25
   19534:	cb cf       	rjmp	.-106    	; 0x194cc <twi_writeTo+0x30>
   19536:	85 ee       	ldi	r24, 0xE5	; 229
   19538:	e4 cf       	rjmp	.-56     	; 0x19502 <twi_writeTo+0x66>
   1953a:	81 e0       	ldi	r24, 0x01	; 1
   1953c:	f7 cf       	rjmp	.-18     	; 0x1952c <twi_writeTo+0x90>
   1953e:	80 e0       	ldi	r24, 0x00	; 0
   19540:	f5 cf       	rjmp	.-22     	; 0x1952c <twi_writeTo+0x90>
   19542:	82 e0       	ldi	r24, 0x02	; 2
   19544:	f3 cf       	rjmp	.-26     	; 0x1952c <twi_writeTo+0x90>
   19546:	83 e0       	ldi	r24, 0x03	; 3
   19548:	f1 cf       	rjmp	.-30     	; 0x1952c <twi_writeTo+0x90>

0001954a <twi_transmit>:
twi_transmit():
   1954a:	20 91 a9 11 	lds	r18, 0x11A9	; 0x8011a9 <twi_txBufferLength>
   1954e:	26 0f       	add	r18, r22
   19550:	33 27       	eor	r19, r19
   19552:	33 1f       	adc	r19, r19
   19554:	21 32       	cpi	r18, 0x21	; 33
   19556:	31 05       	cpc	r19, r1
   19558:	ec f4       	brge	.+58     	; 0x19594 <twi_transmit+0x4a>
   1955a:	20 91 f4 11 	lds	r18, 0x11F4	; 0x8011f4 <twi_state>
   1955e:	fc 01       	movw	r30, r24
   19560:	90 e0       	ldi	r25, 0x00	; 0
   19562:	80 e0       	ldi	r24, 0x00	; 0
   19564:	24 30       	cpi	r18, 0x04	; 4
   19566:	69 f0       	breq	.+26     	; 0x19582 <twi_transmit+0x38>
   19568:	82 e0       	ldi	r24, 0x02	; 2
   1956a:	08 95       	ret
   1956c:	a0 91 a9 11 	lds	r26, 0x11A9	; 0x8011a9 <twi_txBufferLength>
   19570:	21 91       	ld	r18, Z+
   19572:	ac 01       	movw	r20, r24
   19574:	45 55       	subi	r20, 0x55	; 85
   19576:	5e 4e       	sbci	r21, 0xEE	; 238
   19578:	a4 0f       	add	r26, r20
   1957a:	b5 2f       	mov	r27, r21
   1957c:	b1 1d       	adc	r27, r1
   1957e:	2c 93       	st	X, r18
   19580:	01 96       	adiw	r24, 0x01	; 1
   19582:	86 17       	cp	r24, r22
   19584:	98 f3       	brcs	.-26     	; 0x1956c <twi_transmit+0x22>
   19586:	80 91 a9 11 	lds	r24, 0x11A9	; 0x8011a9 <twi_txBufferLength>
   1958a:	68 0f       	add	r22, r24
   1958c:	60 93 a9 11 	sts	0x11A9, r22	; 0x8011a9 <twi_txBufferLength>
   19590:	80 e0       	ldi	r24, 0x00	; 0
   19592:	08 95       	ret
   19594:	81 e0       	ldi	r24, 0x01	; 1
   19596:	08 95       	ret

00019598 <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
   19598:	90 93 ee 11 	sts	0x11EE, r25	; 0x8011ee <twi_onSlaveReceive+0x1>
   1959c:	80 93 ed 11 	sts	0x11ED, r24	; 0x8011ed <twi_onSlaveReceive>
   195a0:	08 95       	ret

000195a2 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
   195a2:	90 93 f0 11 	sts	0x11F0, r25	; 0x8011f0 <twi_onSlaveTransmit+0x1>
   195a6:	80 93 ef 11 	sts	0x11EF, r24	; 0x8011ef <twi_onSlaveTransmit>
   195aa:	08 95       	ret

000195ac <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
   195ac:	85 ed       	ldi	r24, 0xD5	; 213
   195ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
   195b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   195b6:	84 fd       	sbrc	r24, 4
   195b8:	fc cf       	rjmp	.-8      	; 0x195b2 <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
   195ba:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:382
}
   195be:	08 95       	ret

000195c0 <twi_releaseBus>:
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
   195c0:	85 ec       	ldi	r24, 0xC5	; 197
   195c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
   195c6:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:397
}
   195ca:	08 95       	ret

000195cc <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:400

ISR(TWI_vect)
{
   195cc:	1f 92       	push	r1
   195ce:	0f 92       	push	r0
   195d0:	0f b6       	in	r0, 0x3f	; 63
   195d2:	0f 92       	push	r0
   195d4:	11 24       	eor	r1, r1
   195d6:	0b b6       	in	r0, 0x3b	; 59
   195d8:	0f 92       	push	r0
   195da:	2f 93       	push	r18
   195dc:	3f 93       	push	r19
   195de:	4f 93       	push	r20
   195e0:	5f 93       	push	r21
   195e2:	6f 93       	push	r22
   195e4:	7f 93       	push	r23
   195e6:	8f 93       	push	r24
   195e8:	9f 93       	push	r25
   195ea:	af 93       	push	r26
   195ec:	bf 93       	push	r27
   195ee:	ef 93       	push	r30
   195f0:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
   195f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
   195f6:	88 7f       	andi	r24, 0xF8	; 248
   195f8:	80 36       	cpi	r24, 0x60	; 96
   195fa:	09 f4       	brne	.+2      	; 0x195fe <__vector_39+0x32>
   195fc:	4e c0       	rjmp	.+156    	; 0x1969a <__vector_39+0xce>
   195fe:	08 f0       	brcs	.+2      	; 0x19602 <__vector_39+0x36>
   19600:	41 c0       	rjmp	.+130    	; 0x19684 <__vector_39+0xb8>
   19602:	88 32       	cpi	r24, 0x28	; 40
   19604:	09 f4       	brne	.+2      	; 0x19608 <__vector_39+0x3c>
   19606:	aa c0       	rjmp	.+340    	; 0x1975c <__vector_39+0x190>
   19608:	28 f5       	brcc	.+74     	; 0x19654 <__vector_39+0x88>
   1960a:	80 31       	cpi	r24, 0x10	; 16
   1960c:	09 f4       	brne	.+2      	; 0x19610 <__vector_39+0x44>
   1960e:	9e c0       	rjmp	.+316    	; 0x1974c <__vector_39+0x180>
   19610:	c8 f4       	brcc	.+50     	; 0x19644 <__vector_39+0x78>
   19612:	88 23       	and	r24, r24
   19614:	09 f4       	brne	.+2      	; 0x19618 <__vector_39+0x4c>
   19616:	fb c0       	rjmp	.+502    	; 0x1980e <__vector_39+0x242>
   19618:	88 30       	cpi	r24, 0x08	; 8
   1961a:	09 f4       	brne	.+2      	; 0x1961e <__vector_39+0x52>
   1961c:	97 c0       	rjmp	.+302    	; 0x1974c <__vector_39+0x180>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
   1961e:	ff 91       	pop	r31
   19620:	ef 91       	pop	r30
   19622:	bf 91       	pop	r27
   19624:	af 91       	pop	r26
   19626:	9f 91       	pop	r25
   19628:	8f 91       	pop	r24
   1962a:	7f 91       	pop	r23
   1962c:	6f 91       	pop	r22
   1962e:	5f 91       	pop	r21
   19630:	4f 91       	pop	r20
   19632:	3f 91       	pop	r19
   19634:	2f 91       	pop	r18
   19636:	0f 90       	pop	r0
   19638:	0b be       	out	0x3b, r0	; 59
   1963a:	0f 90       	pop	r0
   1963c:	0f be       	out	0x3f, r0	; 63
   1963e:	0f 90       	pop	r0
   19640:	1f 90       	pop	r1
   19642:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   19644:	88 31       	cpi	r24, 0x18	; 24
   19646:	09 f4       	brne	.+2      	; 0x1964a <__vector_39+0x7e>
   19648:	89 c0       	rjmp	.+274    	; 0x1975c <__vector_39+0x190>
   1964a:	80 32       	cpi	r24, 0x20	; 32
   1964c:	41 f7       	brne	.-48     	; 0x1961e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
   1964e:	80 93 87 11 	sts	0x1187, r24	; 0x801187 <twi_error>
   19652:	15 c0       	rjmp	.+42     	; 0x1967e <__vector_39+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   19654:	80 34       	cpi	r24, 0x40	; 64
   19656:	09 f4       	brne	.+2      	; 0x1965a <__vector_39+0x8e>
   19658:	9e c0       	rjmp	.+316    	; 0x19796 <__vector_39+0x1ca>
   1965a:	48 f4       	brcc	.+18     	; 0x1966e <__vector_39+0xa2>
   1965c:	80 33       	cpi	r24, 0x30	; 48
   1965e:	b9 f3       	breq	.-18     	; 0x1964e <__vector_39+0x82>
   19660:	88 33       	cpi	r24, 0x38	; 56
   19662:	e9 f6       	brne	.-70     	; 0x1961e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
   19664:	80 93 87 11 	sts	0x1187, r24	; 0x801187 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:441
      twi_releaseBus();
   19668:	0e 94 e0 ca 	call	0x195c0	; 0x195c0 <twi_releaseBus>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:442
      break;
   1966c:	d8 cf       	rjmp	.-80     	; 0x1961e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   1966e:	80 35       	cpi	r24, 0x50	; 80
   19670:	09 f4       	brne	.+2      	; 0x19674 <__vector_39+0xa8>
   19672:	85 c0       	rjmp	.+266    	; 0x1977e <__vector_39+0x1b2>
   19674:	88 35       	cpi	r24, 0x58	; 88
   19676:	09 f4       	brne	.+2      	; 0x1967a <__vector_39+0xae>
   19678:	96 c0       	rjmp	.+300    	; 0x197a6 <__vector_39+0x1da>
   1967a:	88 34       	cpi	r24, 0x48	; 72
   1967c:	81 f6       	brne	.-96     	; 0x1961e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
   1967e:	0e 94 d6 ca 	call	0x195ac	; 0x195ac <twi_stop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
      break;
  }
}
   19682:	cd cf       	rjmp	.-102    	; 0x1961e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   19684:	88 39       	cpi	r24, 0x98	; 152
   19686:	09 f4       	brne	.+2      	; 0x1968a <__vector_39+0xbe>
   19688:	8c c0       	rjmp	.+280    	; 0x197a2 <__vector_39+0x1d6>
   1968a:	38 f5       	brcc	.+78     	; 0x196da <__vector_39+0x10e>
   1968c:	88 37       	cpi	r24, 0x78	; 120
   1968e:	29 f0       	breq	.+10     	; 0x1969a <__vector_39+0xce>
   19690:	50 f4       	brcc	.+20     	; 0x196a6 <__vector_39+0xda>
   19692:	88 36       	cpi	r24, 0x68	; 104
   19694:	11 f0       	breq	.+4      	; 0x1969a <__vector_39+0xce>
   19696:	80 37       	cpi	r24, 0x70	; 112
   19698:	11 f6       	brne	.-124    	; 0x1961e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
   1969a:	83 e0       	ldi	r24, 0x03	; 3
   1969c:	80 93 f4 11 	sts	0x11F4, r24	; 0x8011f4 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
   196a0:	10 92 88 11 	sts	0x1188, r1	; 0x801188 <twi_rxBufferIndex>
   196a4:	57 c0       	rjmp	.+174    	; 0x19754 <__vector_39+0x188>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   196a6:	88 38       	cpi	r24, 0x88	; 136
   196a8:	09 f4       	brne	.+2      	; 0x196ac <__vector_39+0xe0>
   196aa:	7b c0       	rjmp	.+246    	; 0x197a2 <__vector_39+0x1d6>
   196ac:	80 39       	cpi	r24, 0x90	; 144
   196ae:	19 f0       	breq	.+6      	; 0x196b6 <__vector_39+0xea>
   196b0:	80 38       	cpi	r24, 0x80	; 128
   196b2:	09 f0       	breq	.+2      	; 0x196b6 <__vector_39+0xea>
   196b4:	b4 cf       	rjmp	.-152    	; 0x1961e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   196b6:	80 91 88 11 	lds	r24, 0x1188	; 0x801188 <twi_rxBufferIndex>
   196ba:	80 32       	cpi	r24, 0x20	; 32
   196bc:	08 f0       	brcs	.+2      	; 0x196c0 <__vector_39+0xf4>
   196be:	71 c0       	rjmp	.+226    	; 0x197a2 <__vector_39+0x1d6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
   196c0:	e0 91 88 11 	lds	r30, 0x1188	; 0x801188 <twi_rxBufferIndex>
   196c4:	81 e0       	ldi	r24, 0x01	; 1
   196c6:	8e 0f       	add	r24, r30
   196c8:	80 93 88 11 	sts	0x1188, r24	; 0x801188 <twi_rxBufferIndex>
   196cc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   196d0:	f0 e0       	ldi	r31, 0x00	; 0
   196d2:	e7 57       	subi	r30, 0x77	; 119
   196d4:	fe 4e       	sbci	r31, 0xEE	; 238
   196d6:	80 83       	st	Z, r24
   196d8:	3d c0       	rjmp	.+122    	; 0x19754 <__vector_39+0x188>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   196da:	80 3b       	cpi	r24, 0xB0	; 176
   196dc:	39 f0       	breq	.+14     	; 0x196ec <__vector_39+0x120>
   196de:	e0 f4       	brcc	.+56     	; 0x19718 <__vector_39+0x14c>
   196e0:	80 3a       	cpi	r24, 0xA0	; 160
   196e2:	09 f4       	brne	.+2      	; 0x196e6 <__vector_39+0x11a>
   196e4:	79 c0       	rjmp	.+242    	; 0x197d8 <__vector_39+0x20c>
   196e6:	88 3a       	cpi	r24, 0xA8	; 168
   196e8:	09 f0       	breq	.+2      	; 0x196ec <__vector_39+0x120>
   196ea:	99 cf       	rjmp	.-206    	; 0x1961e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
   196ec:	84 e0       	ldi	r24, 0x04	; 4
   196ee:	80 93 f4 11 	sts	0x11F4, r24	; 0x8011f4 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
   196f2:	10 92 aa 11 	sts	0x11AA, r1	; 0x8011aa <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
   196f6:	10 92 a9 11 	sts	0x11A9, r1	; 0x8011a9 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
   196fa:	e0 91 ef 11 	lds	r30, 0x11EF	; 0x8011ef <twi_onSlaveTransmit>
   196fe:	f0 91 f0 11 	lds	r31, 0x11F0	; 0x8011f0 <twi_onSlaveTransmit+0x1>
   19702:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
   19704:	80 91 a9 11 	lds	r24, 0x11A9	; 0x8011a9 <twi_txBufferLength>
   19708:	81 11       	cpse	r24, r1
   1970a:	0f c0       	rjmp	.+30     	; 0x1972a <__vector_39+0x15e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
   1970c:	81 e0       	ldi	r24, 0x01	; 1
   1970e:	80 93 a9 11 	sts	0x11A9, r24	; 0x8011a9 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
   19712:	10 92 ab 11 	sts	0x11AB, r1	; 0x8011ab <twi_txBuffer>
   19716:	09 c0       	rjmp	.+18     	; 0x1972a <__vector_39+0x15e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   19718:	80 3c       	cpi	r24, 0xC0	; 192
   1971a:	09 f4       	brne	.+2      	; 0x1971e <__vector_39+0x152>
   1971c:	76 c0       	rjmp	.+236    	; 0x1980a <__vector_39+0x23e>
   1971e:	88 3c       	cpi	r24, 0xC8	; 200
   19720:	09 f4       	brne	.+2      	; 0x19724 <__vector_39+0x158>
   19722:	73 c0       	rjmp	.+230    	; 0x1980a <__vector_39+0x23e>
   19724:	88 3b       	cpi	r24, 0xB8	; 184
   19726:	09 f0       	breq	.+2      	; 0x1972a <__vector_39+0x15e>
   19728:	7a cf       	rjmp	.-268    	; 0x1961e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
   1972a:	e0 91 aa 11 	lds	r30, 0x11AA	; 0x8011aa <twi_txBufferIndex>
   1972e:	81 e0       	ldi	r24, 0x01	; 1
   19730:	8e 0f       	add	r24, r30
   19732:	80 93 aa 11 	sts	0x11AA, r24	; 0x8011aa <twi_txBufferIndex>
   19736:	f0 e0       	ldi	r31, 0x00	; 0
   19738:	e5 55       	subi	r30, 0x55	; 85
   1973a:	fe 4e       	sbci	r31, 0xEE	; 238
   1973c:	80 81       	ld	r24, Z
   1973e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   19742:	90 91 aa 11 	lds	r25, 0x11AA	; 0x8011aa <twi_txBufferIndex>
   19746:	80 91 a9 11 	lds	r24, 0x11A9	; 0x8011a9 <twi_txBufferLength>
   1974a:	29 c0       	rjmp	.+82     	; 0x1979e <__vector_39+0x1d2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
   1974c:	80 91 f3 11 	lds	r24, 0x11F3	; 0x8011f3 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   19750:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   19754:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   19756:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   1975a:	61 cf       	rjmp	.-318    	; 0x1961e <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
   1975c:	90 91 cc 11 	lds	r25, 0x11CC	; 0x8011cc <twi_masterBufferIndex>
   19760:	80 91 cb 11 	lds	r24, 0x11CB	; 0x8011cb <twi_masterBufferLength>
   19764:	98 17       	cp	r25, r24
   19766:	58 f5       	brcc	.+86     	; 0x197be <__vector_39+0x1f2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   19768:	e0 91 cc 11 	lds	r30, 0x11CC	; 0x8011cc <twi_masterBufferIndex>
   1976c:	81 e0       	ldi	r24, 0x01	; 1
   1976e:	8e 0f       	add	r24, r30
   19770:	80 93 cc 11 	sts	0x11CC, r24	; 0x8011cc <twi_masterBufferIndex>
   19774:	f0 e0       	ldi	r31, 0x00	; 0
   19776:	e3 53       	subi	r30, 0x33	; 51
   19778:	fe 4e       	sbci	r31, 0xEE	; 238
   1977a:	80 81       	ld	r24, Z
   1977c:	e9 cf       	rjmp	.-46     	; 0x19750 <__vector_39+0x184>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   1977e:	e0 91 cc 11 	lds	r30, 0x11CC	; 0x8011cc <twi_masterBufferIndex>
   19782:	81 e0       	ldi	r24, 0x01	; 1
   19784:	8e 0f       	add	r24, r30
   19786:	80 93 cc 11 	sts	0x11CC, r24	; 0x8011cc <twi_masterBufferIndex>
   1978a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   1978e:	f0 e0       	ldi	r31, 0x00	; 0
   19790:	e3 53       	subi	r30, 0x33	; 51
   19792:	fe 4e       	sbci	r31, 0xEE	; 238
   19794:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
   19796:	90 91 cc 11 	lds	r25, 0x11CC	; 0x8011cc <twi_masterBufferIndex>
   1979a:	80 91 cb 11 	lds	r24, 0x11CB	; 0x8011cb <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   1979e:	98 17       	cp	r25, r24
   197a0:	c8 f2       	brcs	.-78     	; 0x19754 <__vector_39+0x188>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   197a2:	85 e8       	ldi	r24, 0x85	; 133
   197a4:	d8 cf       	rjmp	.-80     	; 0x19756 <__vector_39+0x18a>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   197a6:	e0 91 cc 11 	lds	r30, 0x11CC	; 0x8011cc <twi_masterBufferIndex>
   197aa:	81 e0       	ldi	r24, 0x01	; 1
   197ac:	8e 0f       	add	r24, r30
   197ae:	80 93 cc 11 	sts	0x11CC, r24	; 0x8011cc <twi_masterBufferIndex>
   197b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   197b6:	f0 e0       	ldi	r31, 0x00	; 0
   197b8:	e3 53       	subi	r30, 0x33	; 51
   197ba:	fe 4e       	sbci	r31, 0xEE	; 238
   197bc:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
   197be:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <twi_sendStop>
   197c2:	81 11       	cpse	r24, r1
   197c4:	5c cf       	rjmp	.-328    	; 0x1967e <__vector_39+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
   197c6:	81 e0       	ldi	r24, 0x01	; 1
   197c8:	80 93 f1 11 	sts	0x11F1, r24	; 0x8011f1 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
   197cc:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   197ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
   197d2:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:552
      break;
   197d6:	23 cf       	rjmp	.-442    	; 0x1961e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
   197d8:	0e 94 e0 ca 	call	0x195c0	; 0x195c0 <twi_releaseBus>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   197dc:	80 91 88 11 	lds	r24, 0x1188	; 0x801188 <twi_rxBufferIndex>
   197e0:	80 32       	cpi	r24, 0x20	; 32
   197e2:	30 f4       	brcc	.+12     	; 0x197f0 <__vector_39+0x224>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
   197e4:	e0 91 88 11 	lds	r30, 0x1188	; 0x801188 <twi_rxBufferIndex>
   197e8:	f0 e0       	ldi	r31, 0x00	; 0
   197ea:	e7 57       	subi	r30, 0x77	; 119
   197ec:	fe 4e       	sbci	r31, 0xEE	; 238
   197ee:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
   197f0:	60 91 88 11 	lds	r22, 0x1188	; 0x801188 <twi_rxBufferIndex>
   197f4:	70 e0       	ldi	r23, 0x00	; 0
   197f6:	e0 91 ed 11 	lds	r30, 0x11ED	; 0x8011ed <twi_onSlaveReceive>
   197fa:	f0 91 ee 11 	lds	r31, 0x11EE	; 0x8011ee <twi_onSlaveReceive+0x1>
   197fe:	89 e8       	ldi	r24, 0x89	; 137
   19800:	91 e1       	ldi	r25, 0x11	; 17
   19802:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
   19804:	10 92 88 11 	sts	0x1188, r1	; 0x801188 <twi_rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:510
      break;
   19808:	0a cf       	rjmp	.-492    	; 0x1961e <__vector_39+0x52>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   1980a:	85 ec       	ldi	r24, 0xC5	; 197
   1980c:	e0 cf       	rjmp	.-64     	; 0x197ce <__vector_39+0x202>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
   1980e:	10 92 87 11 	sts	0x1187, r1	; 0x801187 <twi_error>
   19812:	35 cf       	rjmp	.-406    	; 0x1967e <__vector_39+0xb2>

00019814 <owWriteBlock(unsigned char, unsigned char*, unsigned char)>:
_Z12owWriteBlockhPhh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:90
		if(r)
			return r;
	}

	return DS2482_ERR_OK;
}
   19814:	ff 92       	push	r15
   19816:	0f 93       	push	r16
   19818:	1f 93       	push	r17
   1981a:	cf 93       	push	r28
   1981c:	df 93       	push	r29
   1981e:	f8 2e       	mov	r15, r24
   19820:	eb 01       	movw	r28, r22
   19822:	8b 01       	movw	r16, r22
   19824:	04 0f       	add	r16, r20
   19826:	11 1d       	adc	r17, r1
   19828:	c0 17       	cp	r28, r16
   1982a:	d1 07       	cpc	r29, r17
   1982c:	61 f0       	breq	.+24     	; 0x19846 <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x32>
   1982e:	69 91       	ld	r22, Y+
   19830:	8f 2d       	mov	r24, r15
   19832:	0e 94 61 cd 	call	0x19ac2	; 0x19ac2 <ds2482owWriteByte(unsigned char, unsigned char)>
   19836:	88 23       	and	r24, r24
   19838:	b9 f3       	breq	.-18     	; 0x19828 <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x14>
   1983a:	df 91       	pop	r29
   1983c:	cf 91       	pop	r28
   1983e:	1f 91       	pop	r17
   19840:	0f 91       	pop	r16
   19842:	ff 90       	pop	r15
   19844:	08 95       	ret
   19846:	80 e0       	ldi	r24, 0x00	; 0
   19848:	f8 cf       	rjmp	.-16     	; 0x1983a <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x26>

0001984a <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
   1984a:	0f 93       	push	r16
   1984c:	1f 93       	push	r17
   1984e:	cf 93       	push	r28
   19850:	c8 2f       	mov	r28, r24
   19852:	8b 01       	movw	r16, r22
   19854:	65 e5       	ldi	r22, 0x55	; 85
   19856:	0e 94 61 cd 	call	0x19ac2	; 0x19ac2 <ds2482owWriteByte(unsigned char, unsigned char)>
   1985a:	81 11       	cpse	r24, r1
   1985c:	08 c0       	rjmp	.+16     	; 0x1986e <owMatchRom(unsigned char, unsigned char*)+0x24>
   1985e:	48 e0       	ldi	r20, 0x08	; 8
   19860:	b8 01       	movw	r22, r16
   19862:	8c 2f       	mov	r24, r28
   19864:	cf 91       	pop	r28
   19866:	1f 91       	pop	r17
   19868:	0f 91       	pop	r16
   1986a:	0c 94 0a cc 	jmp	0x19814	; 0x19814 <owWriteBlock(unsigned char, unsigned char*, unsigned char)>
   1986e:	cf 91       	pop	r28
   19870:	1f 91       	pop	r17
   19872:	0f 91       	pop	r16
   19874:	08 95       	ret

00019876 <owMatchNext(unsigned char, unsigned char*)>:
_Z11owMatchNexthPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:123
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
   19876:	bf 92       	push	r11
   19878:	cf 92       	push	r12
   1987a:	df 92       	push	r13
   1987c:	ef 92       	push	r14
   1987e:	ff 92       	push	r15
   19880:	0f 93       	push	r16
   19882:	1f 93       	push	r17
   19884:	cf 93       	push	r28
   19886:	df 93       	push	r29
   19888:	1f 92       	push	r1
   1988a:	cd b7       	in	r28, 0x3d	; 61
   1988c:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   1988e:	90 91 f5 11 	lds	r25, 0x11F5	; 0x8011f5 <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   19892:	15 e0       	ldi	r17, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   19894:	91 11       	cpse	r25, r1
   19896:	12 c0       	rjmp	.+36     	; 0x198bc <owMatchNext(unsigned char, unsigned char*)+0x46>
   19898:	7b 01       	movw	r14, r22
   1989a:	b8 2e       	mov	r11, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   1989c:	0e 94 26 cd 	call	0x19a4c	; 0x19a4c <ds2482owReset(unsigned char)>
   198a0:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   198a2:	81 11       	cpse	r24, r1
   198a4:	0b c0       	rjmp	.+22     	; 0x198bc <owMatchNext(unsigned char, unsigned char*)+0x46>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   198a6:	60 ef       	ldi	r22, 0xF0	; 240
   198a8:	8b 2d       	mov	r24, r11
   198aa:	0e 94 61 cd 	call	0x19ac2	; 0x19ac2 <ds2482owWriteByte(unsigned char, unsigned char)>
   198ae:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   198b0:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   198b2:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   198b4:	dd 24       	eor	r13, r13
   198b6:	d3 94       	inc	r13
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   198b8:	88 23       	and	r24, r24
   198ba:	81 f0       	breq	.+32     	; 0x198dc <owMatchNext(unsigned char, unsigned char*)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   198bc:	81 2f       	mov	r24, r17
   198be:	0f 90       	pop	r0
   198c0:	df 91       	pop	r29
   198c2:	cf 91       	pop	r28
   198c4:	1f 91       	pop	r17
   198c6:	0f 91       	pop	r16
   198c8:	ff 90       	pop	r15
   198ca:	ef 90       	pop	r14
   198cc:	df 90       	pop	r13
   198ce:	cf 90       	pop	r12
   198d0:	bf 90       	pop	r11
   198d2:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   198d4:	98 e0       	ldi	r25, 0x08	; 8
   198d6:	c9 16       	cp	r12, r25
   198d8:	09 f4       	brne	.+2      	; 0x198dc <owMatchNext(unsigned char, unsigned char*)+0x66>
   198da:	45 c0       	rjmp	.+138    	; 0x19966 <owMatchNext(unsigned char, unsigned char*)+0xf0>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   198dc:	90 91 f6 11 	lds	r25, 0x11F6	; 0x8011f6 <lastDiscrepancy>
   198e0:	d9 16       	cp	r13, r25
   198e2:	88 f5       	brcc	.+98     	; 0x19946 <owMatchNext(unsigned char, unsigned char*)+0xd0>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   198e4:	f7 01       	movw	r30, r14
   198e6:	ec 0d       	add	r30, r12
   198e8:	f1 1d       	adc	r31, r1
   198ea:	80 81       	ld	r24, Z
   198ec:	80 23       	and	r24, r16
   198ee:	91 e0       	ldi	r25, 0x01	; 1
   198f0:	09 f4       	brne	.+2      	; 0x198f4 <owMatchNext(unsigned char, unsigned char*)+0x7e>
   198f2:	90 e0       	ldi	r25, 0x00	; 0
   198f4:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:148
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);

		r=ds2482owWriteTriplet(ds2482_address, &direction);
   198f6:	be 01       	movw	r22, r28
   198f8:	6f 5f       	subi	r22, 0xFF	; 255
   198fa:	7f 4f       	sbci	r23, 0xFF	; 255
   198fc:	8b 2d       	mov	r24, r11
   198fe:	0e 94 9f cd 	call	0x19b3e	; 0x19b3e <ds2482owWriteTriplet(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:149
		if(r) return r;
   19902:	81 11       	cpse	r24, r1
   19904:	3a c0       	rjmp	.+116    	; 0x1997a <owMatchNext(unsigned char, unsigned char*)+0x104>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   19906:	29 81       	ldd	r18, Y+1	; 0x01
   19908:	30 e0       	ldi	r19, 0x00	; 0
   1990a:	a9 01       	movw	r20, r18
   1990c:	95 e0       	ldi	r25, 0x05	; 5
   1990e:	55 95       	asr	r21
   19910:	47 95       	ror	r20
   19912:	9a 95       	dec	r25
   19914:	e1 f7       	brne	.-8      	; 0x1990e <owMatchNext(unsigned char, unsigned char*)+0x98>
   19916:	43 70       	andi	r20, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   19918:	22 0f       	add	r18, r18
   1991a:	23 2f       	mov	r18, r19
   1991c:	22 1f       	adc	r18, r18
   1991e:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   19920:	43 30       	cpi	r20, 0x03	; 3
   19922:	09 f1       	breq	.+66     	; 0x19966 <owMatchNext(unsigned char, unsigned char*)+0xf0>
   19924:	ec 2d       	mov	r30, r12
   19926:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   19928:	41 11       	cpse	r20, r1
   1992a:	12 c0       	rjmp	.+36     	; 0x19950 <owMatchNext(unsigned char, unsigned char*)+0xda>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   1992c:	22 23       	and	r18, r18
   1992e:	c9 f0       	breq	.+50     	; 0x19962 <owMatchNext(unsigned char, unsigned char*)+0xec>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   19930:	ee 0d       	add	r30, r14
   19932:	ff 1d       	adc	r31, r15
   19934:	90 81       	ld	r25, Z
   19936:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   19938:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   1993a:	d3 94       	inc	r13
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   1993c:	00 0f       	add	r16, r16
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   1993e:	51 f6       	brne	.-108    	; 0x198d4 <owMatchNext(unsigned char, unsigned char*)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   19940:	c3 94       	inc	r12
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   19942:	01 e0       	ldi	r16, 0x01	; 1
   19944:	c7 cf       	rjmp	.-114    	; 0x198d4 <owMatchNext(unsigned char, unsigned char*)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   19946:	81 e0       	ldi	r24, 0x01	; 1
   19948:	9d 11       	cpse	r25, r13
   1994a:	80 e0       	ldi	r24, 0x00	; 0
   1994c:	89 83       	std	Y+1, r24	; 0x01
   1994e:	d3 cf       	rjmp	.-90     	; 0x198f6 <owMatchNext(unsigned char, unsigned char*)+0x80>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   19950:	21 11       	cpse	r18, r1
   19952:	ee cf       	rjmp	.-36     	; 0x19930 <owMatchNext(unsigned char, unsigned char*)+0xba>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   19954:	ee 0d       	add	r30, r14
   19956:	ff 1d       	adc	r31, r15
   19958:	90 81       	ld	r25, Z
   1995a:	20 2f       	mov	r18, r16
   1995c:	20 95       	com	r18
   1995e:	92 23       	and	r25, r18
   19960:	eb cf       	rjmp	.-42     	; 0x19938 <owMatchNext(unsigned char, unsigned char*)+0xc2>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   19962:	1d 2d       	mov	r17, r13
   19964:	f7 cf       	rjmp	.-18     	; 0x19954 <owMatchNext(unsigned char, unsigned char*)+0xde>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   19966:	90 e4       	ldi	r25, 0x40	; 64
   19968:	9d 15       	cp	r25, r13
   1996a:	48 f4       	brcc	.+18     	; 0x1997e <owMatchNext(unsigned char, unsigned char*)+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   1996c:	10 93 f6 11 	sts	0x11F6, r17	; 0x8011f6 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   19970:	91 e0       	ldi	r25, 0x01	; 1
   19972:	11 11       	cpse	r17, r1
   19974:	90 e0       	ldi	r25, 0x00	; 0
   19976:	90 93 f5 11 	sts	0x11F5, r25	; 0x8011f5 <lastDevice>
   1997a:	18 2f       	mov	r17, r24
   1997c:	9f cf       	rjmp	.-194    	; 0x198bc <owMatchNext(unsigned char, unsigned char*)+0x46>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:187
	}else
	{
		return DS2482_ERR_NO_DEVICE;
   1997e:	85 e0       	ldi	r24, 0x05	; 5
   19980:	fc cf       	rjmp	.-8      	; 0x1997a <owMatchNext(unsigned char, unsigned char*)+0x104>

00019982 <owMatchFirst(unsigned char, unsigned char*)>:
_Z12owMatchFirsthPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
   19982:	10 92 f5 11 	sts	0x11F5, r1	; 0x8011f5 <lastDevice>
   19986:	10 92 f6 11 	sts	0x11F6, r1	; 0x8011f6 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
   1998a:	0c 94 3b cc 	jmp	0x19876	; 0x19876 <owMatchNext(unsigned char, unsigned char*)>

0001998e <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:296
          {
          *config = Wire.read();
          return DS2482_ERR_OK;
          }
        else
          return DS2482_ERR_READ;
   1998e:	68 2f       	mov	r22, r24
   19990:	81 e3       	ldi	r24, 0x31	; 49
   19992:	91 e1       	ldi	r25, 0x11	; 17
   19994:	0e 94 4c c9 	call	0x19298	; 0x19298 <TwoWire::beginTransmission(unsigned char)>
   19998:	60 ef       	ldi	r22, 0xF0	; 240
   1999a:	70 e0       	ldi	r23, 0x00	; 0
   1999c:	81 e3       	ldi	r24, 0x31	; 49
   1999e:	91 e1       	ldi	r25, 0x11	; 17
   199a0:	0e 94 56 c6 	call	0x18cac	; 0x18cac <TwoWire::write(int)>
   199a4:	81 e3       	ldi	r24, 0x31	; 49
   199a6:	91 e1       	ldi	r25, 0x11	; 17
   199a8:	0e 94 d4 c9 	call	0x193a8	; 0x193a8 <TwoWire::endTransmission()>
   199ac:	81 11       	cpse	r24, r1
   199ae:	8a e0       	ldi	r24, 0x0A	; 10
   199b0:	08 95       	ret

000199b2 <ds2482setReadPointer(unsigned char, unsigned char)>:
_Z20ds2482setReadPointerhh():
   199b2:	cf 93       	push	r28
   199b4:	c6 2f       	mov	r28, r22
   199b6:	68 2f       	mov	r22, r24
   199b8:	81 e3       	ldi	r24, 0x31	; 49
   199ba:	91 e1       	ldi	r25, 0x11	; 17
   199bc:	0e 94 4c c9 	call	0x19298	; 0x19298 <TwoWire::beginTransmission(unsigned char)>
   199c0:	61 ee       	ldi	r22, 0xE1	; 225
   199c2:	70 e0       	ldi	r23, 0x00	; 0
   199c4:	81 e3       	ldi	r24, 0x31	; 49
   199c6:	91 e1       	ldi	r25, 0x11	; 17
   199c8:	0e 94 56 c6 	call	0x18cac	; 0x18cac <TwoWire::write(int)>
   199cc:	6c 2f       	mov	r22, r28
   199ce:	81 e3       	ldi	r24, 0x31	; 49
   199d0:	91 e1       	ldi	r25, 0x11	; 17
   199d2:	0e 94 de c8 	call	0x191bc	; 0x191bc <TwoWire::write(unsigned char)>
   199d6:	81 e3       	ldi	r24, 0x31	; 49
   199d8:	91 e1       	ldi	r25, 0x11	; 17
   199da:	0e 94 d4 c9 	call	0x193a8	; 0x193a8 <TwoWire::endTransmission()>
   199de:	81 11       	cpse	r24, r1
   199e0:	83 e0       	ldi	r24, 0x03	; 3
   199e2:	cf 91       	pop	r28
   199e4:	08 95       	ret

000199e6 <ds2482setConfig(unsigned char, unsigned char)>:
_Z15ds2482setConfighh():
   199e6:	cf 93       	push	r28
   199e8:	c6 2f       	mov	r28, r22
   199ea:	68 2f       	mov	r22, r24
   199ec:	81 e3       	ldi	r24, 0x31	; 49
   199ee:	91 e1       	ldi	r25, 0x11	; 17
   199f0:	0e 94 4c c9 	call	0x19298	; 0x19298 <TwoWire::beginTransmission(unsigned char)>
   199f4:	62 ed       	ldi	r22, 0xD2	; 210
   199f6:	70 e0       	ldi	r23, 0x00	; 0
   199f8:	81 e3       	ldi	r24, 0x31	; 49
   199fa:	91 e1       	ldi	r25, 0x11	; 17
   199fc:	0e 94 56 c6 	call	0x18cac	; 0x18cac <TwoWire::write(int)>
   19a00:	6c 2f       	mov	r22, r28
   19a02:	81 e3       	ldi	r24, 0x31	; 49
   19a04:	91 e1       	ldi	r25, 0x11	; 17
   19a06:	0e 94 de c8 	call	0x191bc	; 0x191bc <TwoWire::write(unsigned char)>
   19a0a:	81 e3       	ldi	r24, 0x31	; 49
   19a0c:	91 e1       	ldi	r25, 0x11	; 17
   19a0e:	0e 94 d4 c9 	call	0x193a8	; 0x193a8 <TwoWire::endTransmission()>
   19a12:	81 11       	cpse	r24, r1
   19a14:	83 e0       	ldi	r24, 0x03	; 3
   19a16:	cf 91       	pop	r28
   19a18:	08 95       	ret

00019a1a <ds2482init(unsigned char)>:
_Z10ds2482inith():
   19a1a:	cf 93       	push	r28
   19a1c:	df 93       	push	r29
   19a1e:	d8 2f       	mov	r29, r24
   19a20:	68 2f       	mov	r22, r24
   19a22:	81 e3       	ldi	r24, 0x31	; 49
   19a24:	91 e1       	ldi	r25, 0x11	; 17
   19a26:	0e 94 4c c9 	call	0x19298	; 0x19298 <TwoWire::beginTransmission(unsigned char)>
   19a2a:	81 e3       	ldi	r24, 0x31	; 49
   19a2c:	91 e1       	ldi	r25, 0x11	; 17
   19a2e:	0e 94 d4 c9 	call	0x193a8	; 0x193a8 <TwoWire::endTransmission()>
   19a32:	c8 2f       	mov	r28, r24
   19a34:	81 11       	cpse	r24, r1
   19a36:	08 c0       	rjmp	.+16     	; 0x19a48 <ds2482init(unsigned char)+0x2e>
   19a38:	60 e0       	ldi	r22, 0x00	; 0
   19a3a:	8d 2f       	mov	r24, r29
   19a3c:	0e 94 f3 cc 	call	0x199e6	; 0x199e6 <ds2482setConfig(unsigned char, unsigned char)>
   19a40:	8c 2f       	mov	r24, r28
   19a42:	df 91       	pop	r29
   19a44:	cf 91       	pop	r28
   19a46:	08 95       	ret
   19a48:	ca e0       	ldi	r28, 0x0A	; 10
   19a4a:	fa cf       	rjmp	.-12     	; 0x19a40 <ds2482init(unsigned char)+0x26>

00019a4c <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
   19a4c:	0f 93       	push	r16
   19a4e:	1f 93       	push	r17
   19a50:	cf 93       	push	r28
   19a52:	df 93       	push	r29
   19a54:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   19a56:	68 2f       	mov	r22, r24
   19a58:	81 e3       	ldi	r24, 0x31	; 49
   19a5a:	91 e1       	ldi	r25, 0x11	; 17
   19a5c:	0e 94 4c c9 	call	0x19298	; 0x19298 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
   19a60:	64 eb       	ldi	r22, 0xB4	; 180
   19a62:	70 e0       	ldi	r23, 0x00	; 0
   19a64:	81 e3       	ldi	r24, 0x31	; 49
   19a66:	91 e1       	ldi	r25, 0x11	; 17
   19a68:	0e 94 56 c6 	call	0x18cac	; 0x18cac <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
   19a6c:	81 e3       	ldi	r24, 0x31	; 49
   19a6e:	91 e1       	ldi	r25, 0x11	; 17
   19a70:	0e 94 d4 c9 	call	0x193a8	; 0x193a8 <TwoWire::endTransmission()>
   19a74:	c8 2f       	mov	r28, r24
   19a76:	81 11       	cpse	r24, r1
   19a78:	1b c0       	rjmp	.+54     	; 0x19ab0 <ds2482owReset(unsigned char)+0x64>
   19a7a:	de ef       	ldi	r29, 0xFE	; 254
   19a7c:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
   19a7e:	f9 f0       	breq	.+62     	; 0x19abe <ds2482owReset(unsigned char)+0x72>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
   19a80:	41 e0       	ldi	r20, 0x01	; 1
   19a82:	60 2f       	mov	r22, r16
   19a84:	81 e3       	ldi	r24, 0x31	; 49
   19a86:	91 e1       	ldi	r25, 0x11	; 17
   19a88:	0e 94 ce c9 	call	0x1939c	; 0x1939c <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
   19a8c:	81 e3       	ldi	r24, 0x31	; 49
   19a8e:	91 e1       	ldi	r25, 0x11	; 17
   19a90:	0e 94 7e c8 	call	0x190fc	; 0x190fc <TwoWire::available()>
   19a94:	18 16       	cp	r1, r24
   19a96:	19 06       	cpc	r1, r25
   19a98:	2c f4       	brge	.+10     	; 0x19aa4 <ds2482owReset(unsigned char)+0x58>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
   19a9a:	81 e3       	ldi	r24, 0x31	; 49
   19a9c:	91 e1       	ldi	r25, 0x11	; 17
   19a9e:	0e 94 85 c8 	call	0x1910a	; 0x1910a <TwoWire::read()>
   19aa2:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
   19aa4:	10 fd       	sbrc	r17, 0
   19aa6:	ea cf       	rjmp	.-44     	; 0x19a7c <ds2482owReset(unsigned char)+0x30>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
   19aa8:	11 fd       	sbrc	r17, 1
   19aaa:	03 c0       	rjmp	.+6      	; 0x19ab2 <ds2482owReset(unsigned char)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
   19aac:	c5 e0       	ldi	r28, 0x05	; 5
   19aae:	01 c0       	rjmp	.+2      	; 0x19ab2 <ds2482owReset(unsigned char)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   19ab0:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
   19ab2:	8c 2f       	mov	r24, r28
   19ab4:	df 91       	pop	r29
   19ab6:	cf 91       	pop	r28
   19ab8:	1f 91       	pop	r17
   19aba:	0f 91       	pop	r16
   19abc:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
   19abe:	c4 e0       	ldi	r28, 0x04	; 4
   19ac0:	f8 cf       	rjmp	.-16     	; 0x19ab2 <ds2482owReset(unsigned char)+0x66>

00019ac2 <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
   19ac2:	0f 93       	push	r16
   19ac4:	1f 93       	push	r17
   19ac6:	cf 93       	push	r28
   19ac8:	df 93       	push	r29
   19aca:	08 2f       	mov	r16, r24
   19acc:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   19ace:	68 2f       	mov	r22, r24
   19ad0:	81 e3       	ldi	r24, 0x31	; 49
   19ad2:	91 e1       	ldi	r25, 0x11	; 17
   19ad4:	0e 94 4c c9 	call	0x19298	; 0x19298 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
   19ad8:	65 ea       	ldi	r22, 0xA5	; 165
   19ada:	70 e0       	ldi	r23, 0x00	; 0
   19adc:	81 e3       	ldi	r24, 0x31	; 49
   19ade:	91 e1       	ldi	r25, 0x11	; 17
   19ae0:	0e 94 56 c6 	call	0x18cac	; 0x18cac <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
   19ae4:	6d 2f       	mov	r22, r29
   19ae6:	81 e3       	ldi	r24, 0x31	; 49
   19ae8:	91 e1       	ldi	r25, 0x11	; 17
   19aea:	0e 94 de c8 	call	0x191bc	; 0x191bc <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
   19aee:	81 e3       	ldi	r24, 0x31	; 49
   19af0:	91 e1       	ldi	r25, 0x11	; 17
   19af2:	0e 94 d4 c9 	call	0x193a8	; 0x193a8 <TwoWire::endTransmission()>
   19af6:	c8 2f       	mov	r28, r24
   19af8:	81 11       	cpse	r24, r1
   19afa:	1d c0       	rjmp	.+58     	; 0x19b36 <ds2482owWriteByte(unsigned char, unsigned char)+0x74>
   19afc:	1e ef       	ldi	r17, 0xFE	; 254
   19afe:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
   19b00:	e1 f0       	breq	.+56     	; 0x19b3a <ds2482owWriteByte(unsigned char, unsigned char)+0x78>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   19b02:	41 e0       	ldi	r20, 0x01	; 1
   19b04:	60 2f       	mov	r22, r16
   19b06:	81 e3       	ldi	r24, 0x31	; 49
   19b08:	91 e1       	ldi	r25, 0x11	; 17
   19b0a:	0e 94 ce c9 	call	0x1939c	; 0x1939c <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
   19b0e:	81 e3       	ldi	r24, 0x31	; 49
   19b10:	91 e1       	ldi	r25, 0x11	; 17
   19b12:	0e 94 7e c8 	call	0x190fc	; 0x190fc <TwoWire::available()>
   19b16:	18 16       	cp	r1, r24
   19b18:	19 06       	cpc	r1, r25
   19b1a:	2c f4       	brge	.+10     	; 0x19b26 <ds2482owWriteByte(unsigned char, unsigned char)+0x64>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
   19b1c:	81 e3       	ldi	r24, 0x31	; 49
   19b1e:	91 e1       	ldi	r25, 0x11	; 17
   19b20:	0e 94 85 c8 	call	0x1910a	; 0x1910a <TwoWire::read()>
   19b24:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
   19b26:	d0 fd       	sbrc	r29, 0
   19b28:	ea cf       	rjmp	.-44     	; 0x19afe <ds2482owWriteByte(unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
   19b2a:	8c 2f       	mov	r24, r28
   19b2c:	df 91       	pop	r29
   19b2e:	cf 91       	pop	r28
   19b30:	1f 91       	pop	r17
   19b32:	0f 91       	pop	r16
   19b34:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   19b36:	c3 e0       	ldi	r28, 0x03	; 3
   19b38:	f8 cf       	rjmp	.-16     	; 0x19b2a <ds2482owWriteByte(unsigned char, unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
   19b3a:	c4 e0       	ldi	r28, 0x04	; 4
   19b3c:	f6 cf       	rjmp	.-20     	; 0x19b2a <ds2482owWriteByte(unsigned char, unsigned char)+0x68>

00019b3e <ds2482owWriteTriplet(unsigned char, unsigned char*)>:
_Z20ds2482owWriteTriplethPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:645
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 */
uint8_t ds2482owWriteTriplet(uint8_t address, uint8_t *direction)
{
   19b3e:	ff 92       	push	r15
   19b40:	0f 93       	push	r16
   19b42:	1f 93       	push	r17
   19b44:	cf 93       	push	r28
   19b46:	df 93       	push	r29
   19b48:	f8 2e       	mov	r15, r24
   19b4a:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   19b4c:	68 2f       	mov	r22, r24
   19b4e:	81 e3       	ldi	r24, 0x31	; 49
   19b50:	91 e1       	ldi	r25, 0x11	; 17
   19b52:	0e 94 4c c9 	call	0x19298	; 0x19298 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   19b56:	68 e7       	ldi	r22, 0x78	; 120
   19b58:	70 e0       	ldi	r23, 0x00	; 0
   19b5a:	81 e3       	ldi	r24, 0x31	; 49
   19b5c:	91 e1       	ldi	r25, 0x11	; 17
   19b5e:	0e 94 56 c6 	call	0x18cac	; 0x18cac <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   19b62:	f8 01       	movw	r30, r16
   19b64:	80 81       	ld	r24, Z
   19b66:	70 e0       	ldi	r23, 0x00	; 0
   19b68:	60 e0       	ldi	r22, 0x00	; 0
   19b6a:	88 23       	and	r24, r24
   19b6c:	11 f0       	breq	.+4      	; 0x19b72 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x34>
   19b6e:	60 e8       	ldi	r22, 0x80	; 128
   19b70:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668 (discriminator 4)
   19b72:	81 e3       	ldi	r24, 0x31	; 49
   19b74:	91 e1       	ldi	r25, 0x11	; 17
   19b76:	0e 94 56 c6 	call	0x18cac	; 0x18cac <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669 (discriminator 4)
        if (Wire.endTransmission() != I2C_ERROR_OK)
   19b7a:	81 e3       	ldi	r24, 0x31	; 49
   19b7c:	91 e1       	ldi	r25, 0x11	; 17
   19b7e:	0e 94 d4 c9 	call	0x193a8	; 0x193a8 <TwoWire::endTransmission()>
   19b82:	c8 2f       	mov	r28, r24
   19b84:	81 11       	cpse	r24, r1
   19b86:	21 c0       	rjmp	.+66     	; 0x19bca <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x8c>
   19b88:	de ef       	ldi	r29, 0xFE	; 254
   19b8a:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   19b8c:	01 f1       	breq	.+64     	; 0x19bce <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x90>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   19b8e:	41 e0       	ldi	r20, 0x01	; 1
   19b90:	6f 2d       	mov	r22, r15
   19b92:	81 e3       	ldi	r24, 0x31	; 49
   19b94:	91 e1       	ldi	r25, 0x11	; 17
   19b96:	0e 94 ce c9 	call	0x1939c	; 0x1939c <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   19b9a:	81 e3       	ldi	r24, 0x31	; 49
   19b9c:	91 e1       	ldi	r25, 0x11	; 17
   19b9e:	0e 94 7e c8 	call	0x190fc	; 0x190fc <TwoWire::available()>
   19ba2:	18 16       	cp	r1, r24
   19ba4:	19 06       	cpc	r1, r25
   19ba6:	34 f4       	brge	.+12     	; 0x19bb4 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x76>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   19ba8:	81 e3       	ldi	r24, 0x31	; 49
   19baa:	91 e1       	ldi	r25, 0x11	; 17
   19bac:	0e 94 85 c8 	call	0x1910a	; 0x1910a <TwoWire::read()>
   19bb0:	f8 01       	movw	r30, r16
   19bb2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   19bb4:	f8 01       	movw	r30, r16
   19bb6:	80 81       	ld	r24, Z
   19bb8:	80 fd       	sbrc	r24, 0
   19bba:	e7 cf       	rjmp	.-50     	; 0x19b8a <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x4c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:706
			break;
	}
	return DS2482_ERR_OK;
}
   19bbc:	8c 2f       	mov	r24, r28
   19bbe:	df 91       	pop	r29
   19bc0:	cf 91       	pop	r28
   19bc2:	1f 91       	pop	r17
   19bc4:	0f 91       	pop	r16
   19bc6:	ff 90       	pop	r15
   19bc8:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   19bca:	c3 e0       	ldi	r28, 0x03	; 3
   19bcc:	f7 cf       	rjmp	.-18     	; 0x19bbc <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x7e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   19bce:	c4 e0       	ldi	r28, 0x04	; 4
   19bd0:	f5 cf       	rjmp	.-22     	; 0x19bbc <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x7e>

00019bd2 <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
   19bd2:	ff 92       	push	r15
   19bd4:	0f 93       	push	r16
   19bd6:	1f 93       	push	r17
   19bd8:	cf 93       	push	r28
   19bda:	df 93       	push	r29
   19bdc:	d8 2f       	mov	r29, r24
   19bde:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
   19be0:	68 2f       	mov	r22, r24
   19be2:	81 e3       	ldi	r24, 0x31	; 49
   19be4:	91 e1       	ldi	r25, 0x11	; 17
   19be6:	0e 94 4c c9 	call	0x19298	; 0x19298 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
   19bea:	66 e9       	ldi	r22, 0x96	; 150
   19bec:	70 e0       	ldi	r23, 0x00	; 0
   19bee:	81 e3       	ldi	r24, 0x31	; 49
   19bf0:	91 e1       	ldi	r25, 0x11	; 17
   19bf2:	0e 94 56 c6 	call	0x18cac	; 0x18cac <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
   19bf6:	81 e3       	ldi	r24, 0x31	; 49
   19bf8:	91 e1       	ldi	r25, 0x11	; 17
   19bfa:	0e 94 d4 c9 	call	0x193a8	; 0x193a8 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
   19bfe:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRB);
        if (Wire.endTransmission() != I2C_ERROR_OK)
   19c00:	81 11       	cpse	r24, r1
   19c02:	31 c0       	rjmp	.+98     	; 0x19c66 <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
   19c04:	ce ef       	ldi	r28, 0xFE	; 254
   19c06:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   19c08:	a9 f1       	breq	.+106    	; 0x19c74 <ds2482owReadByte(unsigned char, unsigned char*)+0xa2>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   19c0a:	41 e0       	ldi	r20, 0x01	; 1
   19c0c:	6d 2f       	mov	r22, r29
   19c0e:	81 e3       	ldi	r24, 0x31	; 49
   19c10:	91 e1       	ldi	r25, 0x11	; 17
   19c12:	0e 94 ce c9 	call	0x1939c	; 0x1939c <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
   19c16:	81 e3       	ldi	r24, 0x31	; 49
   19c18:	91 e1       	ldi	r25, 0x11	; 17
   19c1a:	0e 94 7e c8 	call	0x190fc	; 0x190fc <TwoWire::available()>
   19c1e:	18 16       	cp	r1, r24
   19c20:	19 06       	cpc	r1, r25
   19c22:	2c f4       	brge	.+10     	; 0x19c2e <ds2482owReadByte(unsigned char, unsigned char*)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
   19c24:	81 e3       	ldi	r24, 0x31	; 49
   19c26:	91 e1       	ldi	r25, 0x11	; 17
   19c28:	0e 94 85 c8 	call	0x1910a	; 0x1910a <TwoWire::read()>
   19c2c:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
   19c2e:	f0 fc       	sbrc	r15, 0
   19c30:	ea cf       	rjmp	.-44     	; 0x19c06 <ds2482owReadByte(unsigned char, unsigned char*)+0x34>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:780
			break;
	}

	/* Now set read pointer to data register */
	t = ds2482setReadPointer(address, DS2482_P_DATA);
   19c32:	61 ee       	ldi	r22, 0xE1	; 225
   19c34:	8d 2f       	mov	r24, r29
   19c36:	0e 94 d9 cc 	call	0x199b2	; 0x199b2 <ds2482setReadPointer(unsigned char, unsigned char)>
   19c3a:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:781
	if(t)	/* Error? */
   19c3c:	81 11       	cpse	r24, r1
   19c3e:	13 c0       	rjmp	.+38     	; 0x19c66 <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
   19c40:	41 e0       	ldi	r20, 0x01	; 1
   19c42:	6d 2f       	mov	r22, r29
   19c44:	81 e3       	ldi	r24, 0x31	; 49
   19c46:	91 e1       	ldi	r25, 0x11	; 17
   19c48:	0e 94 ce c9 	call	0x1939c	; 0x1939c <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
   19c4c:	81 e3       	ldi	r24, 0x31	; 49
   19c4e:	91 e1       	ldi	r25, 0x11	; 17
   19c50:	0e 94 7e c8 	call	0x190fc	; 0x190fc <TwoWire::available()>
   19c54:	18 16       	cp	r1, r24
   19c56:	19 06       	cpc	r1, r25
   19c58:	34 f4       	brge	.+12     	; 0x19c66 <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
   19c5a:	81 e3       	ldi	r24, 0x31	; 49
   19c5c:	91 e1       	ldi	r25, 0x11	; 17
   19c5e:	0e 94 85 c8 	call	0x1910a	; 0x1910a <TwoWire::read()>
   19c62:	f8 01       	movw	r30, r16
   19c64:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809

	return DS2482_ERR_OK;
}
   19c66:	8c 2f       	mov	r24, r28
   19c68:	df 91       	pop	r29
   19c6a:	cf 91       	pop	r28
   19c6c:	1f 91       	pop	r17
   19c6e:	0f 91       	pop	r16
   19c70:	ff 90       	pop	r15
   19c72:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   19c74:	c4 e0       	ldi	r28, 0x04	; 4
   19c76:	f7 cf       	rjmp	.-18     	; 0x19c66 <ds2482owReadByte(unsigned char, unsigned char*)+0x94>

00019c78 <NTPClient::NTPClient(UDP&)>:
_ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:160 (discriminator 2)

  unsigned long minutes = (rawTime % 3600) / 60;
  String minuteStr = minutes < 10 ? "0" + String(minutes) : String(minutes);

  unsigned long seconds = rawTime % 60;
  String secondStr = seconds < 10 ? "0" + String(seconds) : String(seconds);
   19c78:	fc 01       	movw	r30, r24
   19c7a:	12 82       	std	Z+2, r1	; 0x02
   19c7c:	89 eb       	ldi	r24, 0xB9	; 185
   19c7e:	98 e0       	ldi	r25, 0x08	; 8
   19c80:	94 83       	std	Z+4, r25	; 0x04
   19c82:	83 83       	std	Z+3, r24	; 0x03
   19c84:	89 e3       	ldi	r24, 0x39	; 57
   19c86:	95 e0       	ldi	r25, 0x05	; 5
   19c88:	96 83       	std	Z+6, r25	; 0x06
   19c8a:	85 83       	std	Z+5, r24	; 0x05
   19c8c:	17 82       	std	Z+7, r1	; 0x07
   19c8e:	10 86       	std	Z+8, r1	; 0x08
   19c90:	11 86       	std	Z+9, r1	; 0x09
   19c92:	12 86       	std	Z+10, r1	; 0x0a
   19c94:	80 e6       	ldi	r24, 0x60	; 96
   19c96:	9a ee       	ldi	r25, 0xEA	; 234
   19c98:	a0 e0       	ldi	r26, 0x00	; 0
   19c9a:	b0 e0       	ldi	r27, 0x00	; 0
   19c9c:	83 87       	std	Z+11, r24	; 0x0b
   19c9e:	94 87       	std	Z+12, r25	; 0x0c
   19ca0:	a5 87       	std	Z+13, r26	; 0x0d
   19ca2:	b6 87       	std	Z+14, r27	; 0x0e
   19ca4:	17 86       	std	Z+15, r1	; 0x0f
   19ca6:	10 8a       	std	Z+16, r1	; 0x10
   19ca8:	11 8a       	std	Z+17, r1	; 0x11
   19caa:	12 8a       	std	Z+18, r1	; 0x12
   19cac:	13 8a       	std	Z+19, r1	; 0x13
   19cae:	14 8a       	std	Z+20, r1	; 0x14
   19cb0:	15 8a       	std	Z+21, r1	; 0x15
   19cb2:	16 8a       	std	Z+22, r1	; 0x16
   19cb4:	71 83       	std	Z+1, r23	; 0x01
   19cb6:	60 83       	st	Z, r22
   19cb8:	08 95       	ret

00019cba <NTPClient::begin(int)>:
_ZN9NTPClient5beginEi():
   19cba:	cf 93       	push	r28
   19cbc:	df 93       	push	r29
   19cbe:	ec 01       	movw	r28, r24
   19cc0:	7e 83       	std	Y+6, r23	; 0x06
   19cc2:	6d 83       	std	Y+5, r22	; 0x05
   19cc4:	88 81       	ld	r24, Y
   19cc6:	99 81       	ldd	r25, Y+1	; 0x01
   19cc8:	dc 01       	movw	r26, r24
   19cca:	ed 91       	ld	r30, X+
   19ccc:	fc 91       	ld	r31, X
   19cce:	06 84       	ldd	r0, Z+14	; 0x0e
   19cd0:	f7 85       	ldd	r31, Z+15	; 0x0f
   19cd2:	e0 2d       	mov	r30, r0
   19cd4:	19 95       	eicall
   19cd6:	81 e0       	ldi	r24, 0x01	; 1
   19cd8:	8a 83       	std	Y+2, r24	; 0x02
   19cda:	df 91       	pop	r29
   19cdc:	cf 91       	pop	r28
   19cde:	08 95       	ret

00019ce0 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
   19ce0:	69 e3       	ldi	r22, 0x39	; 57
   19ce2:	75 e0       	ldi	r23, 0x05	; 5
   19ce4:	0c 94 5d ce 	jmp	0x19cba	; 0x19cba <NTPClient::begin(int)>

00019ce8 <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
   19ce8:	cf 92       	push	r12
   19cea:	df 92       	push	r13
   19cec:	ef 92       	push	r14
   19cee:	ff 92       	push	r15
   19cf0:	0f 93       	push	r16
   19cf2:	1f 93       	push	r17
   19cf4:	cf 93       	push	r28
   19cf6:	df 93       	push	r29
   19cf8:	ec 01       	movw	r28, r24
   19cfa:	cf 80       	ldd	r12, Y+7	; 0x07
   19cfc:	d8 84       	ldd	r13, Y+8	; 0x08
   19cfe:	e9 84       	ldd	r14, Y+9	; 0x09
   19d00:	fa 84       	ldd	r15, Y+10	; 0x0a
   19d02:	8f 85       	ldd	r24, Y+15	; 0x0f
   19d04:	98 89       	ldd	r25, Y+16	; 0x10
   19d06:	a9 89       	ldd	r26, Y+17	; 0x11
   19d08:	ba 89       	ldd	r27, Y+18	; 0x12
   19d0a:	c8 0e       	add	r12, r24
   19d0c:	d9 1e       	adc	r13, r25
   19d0e:	ea 1e       	adc	r14, r26
   19d10:	fb 1e       	adc	r15, r27
   19d12:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   19d16:	0b 89       	ldd	r16, Y+19	; 0x13
   19d18:	1c 89       	ldd	r17, Y+20	; 0x14
   19d1a:	2d 89       	ldd	r18, Y+21	; 0x15
   19d1c:	3e 89       	ldd	r19, Y+22	; 0x16
   19d1e:	60 1b       	sub	r22, r16
   19d20:	71 0b       	sbc	r23, r17
   19d22:	82 0b       	sbc	r24, r18
   19d24:	93 0b       	sbc	r25, r19
   19d26:	28 ee       	ldi	r18, 0xE8	; 232
   19d28:	33 e0       	ldi	r19, 0x03	; 3
   19d2a:	40 e0       	ldi	r20, 0x00	; 0
   19d2c:	50 e0       	ldi	r21, 0x00	; 0
   19d2e:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
   19d32:	ca 01       	movw	r24, r20
   19d34:	b9 01       	movw	r22, r18
   19d36:	6c 0d       	add	r22, r12
   19d38:	7d 1d       	adc	r23, r13
   19d3a:	8e 1d       	adc	r24, r14
   19d3c:	9f 1d       	adc	r25, r15
   19d3e:	df 91       	pop	r29
   19d40:	cf 91       	pop	r28
   19d42:	1f 91       	pop	r17
   19d44:	0f 91       	pop	r16
   19d46:	ff 90       	pop	r15
   19d48:	ef 90       	pop	r14
   19d4a:	df 90       	pop	r13
   19d4c:	cf 90       	pop	r12
   19d4e:	08 95       	ret

00019d50 <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
   19d50:	cf 93       	push	r28
   19d52:	df 93       	push	r29
   19d54:	00 d0       	rcall	.+0      	; 0x19d56 <NTPClient::getYear() const+0x6>
   19d56:	1f 92       	push	r1
   19d58:	cd b7       	in	r28, 0x3d	; 61
   19d5a:	de b7       	in	r29, 0x3e	; 62
   19d5c:	0e 94 74 ce 	call	0x19ce8	; 0x19ce8 <NTPClient::getEpochTime() const>
   19d60:	69 83       	std	Y+1, r22	; 0x01
   19d62:	7a 83       	std	Y+2, r23	; 0x02
   19d64:	8b 83       	std	Y+3, r24	; 0x03
   19d66:	9c 83       	std	Y+4, r25	; 0x04
   19d68:	ce 01       	movw	r24, r28
   19d6a:	01 96       	adiw	r24, 0x01	; 1
   19d6c:	0e 94 37 32 	call	0x646e	; 0x646e <localtime>
   19d70:	fc 01       	movw	r30, r24
   19d72:	86 81       	ldd	r24, Z+6	; 0x06
   19d74:	97 81       	ldd	r25, Z+7	; 0x07
   19d76:	84 59       	subi	r24, 0x94	; 148
   19d78:	98 4f       	sbci	r25, 0xF8	; 248
   19d7a:	0f 90       	pop	r0
   19d7c:	0f 90       	pop	r0
   19d7e:	0f 90       	pop	r0
   19d80:	0f 90       	pop	r0
   19d82:	df 91       	pop	r29
   19d84:	cf 91       	pop	r28
   19d86:	08 95       	ret

00019d88 <NTPClient::getMonth() const>:
_ZNK9NTPClient8getMonthEv():
   19d88:	cf 93       	push	r28
   19d8a:	df 93       	push	r29
   19d8c:	00 d0       	rcall	.+0      	; 0x19d8e <NTPClient::getMonth() const+0x6>
   19d8e:	1f 92       	push	r1
   19d90:	cd b7       	in	r28, 0x3d	; 61
   19d92:	de b7       	in	r29, 0x3e	; 62
   19d94:	0e 94 74 ce 	call	0x19ce8	; 0x19ce8 <NTPClient::getEpochTime() const>
   19d98:	69 83       	std	Y+1, r22	; 0x01
   19d9a:	7a 83       	std	Y+2, r23	; 0x02
   19d9c:	8b 83       	std	Y+3, r24	; 0x03
   19d9e:	9c 83       	std	Y+4, r25	; 0x04
   19da0:	ce 01       	movw	r24, r28
   19da2:	01 96       	adiw	r24, 0x01	; 1
   19da4:	0e 94 37 32 	call	0x646e	; 0x646e <localtime>
   19da8:	fc 01       	movw	r30, r24
   19daa:	85 81       	ldd	r24, Z+5	; 0x05
   19dac:	08 2e       	mov	r0, r24
   19dae:	00 0c       	add	r0, r0
   19db0:	99 0b       	sbc	r25, r25
   19db2:	01 96       	adiw	r24, 0x01	; 1
   19db4:	0f 90       	pop	r0
   19db6:	0f 90       	pop	r0
   19db8:	0f 90       	pop	r0
   19dba:	0f 90       	pop	r0
   19dbc:	df 91       	pop	r29
   19dbe:	cf 91       	pop	r28
   19dc0:	08 95       	ret

00019dc2 <NTPClient::getDate() const>:
_ZNK9NTPClient7getDateEv():
   19dc2:	cf 93       	push	r28
   19dc4:	df 93       	push	r29
   19dc6:	00 d0       	rcall	.+0      	; 0x19dc8 <NTPClient::getDate() const+0x6>
   19dc8:	1f 92       	push	r1
   19dca:	cd b7       	in	r28, 0x3d	; 61
   19dcc:	de b7       	in	r29, 0x3e	; 62
   19dce:	0e 94 74 ce 	call	0x19ce8	; 0x19ce8 <NTPClient::getEpochTime() const>
   19dd2:	69 83       	std	Y+1, r22	; 0x01
   19dd4:	7a 83       	std	Y+2, r23	; 0x02
   19dd6:	8b 83       	std	Y+3, r24	; 0x03
   19dd8:	9c 83       	std	Y+4, r25	; 0x04
   19dda:	ce 01       	movw	r24, r28
   19ddc:	01 96       	adiw	r24, 0x01	; 1
   19dde:	0e 94 37 32 	call	0x646e	; 0x646e <localtime>
   19de2:	fc 01       	movw	r30, r24
   19de4:	83 81       	ldd	r24, Z+3	; 0x03
   19de6:	08 2e       	mov	r0, r24
   19de8:	00 0c       	add	r0, r0
   19dea:	99 0b       	sbc	r25, r25
   19dec:	0f 90       	pop	r0
   19dee:	0f 90       	pop	r0
   19df0:	0f 90       	pop	r0
   19df2:	0f 90       	pop	r0
   19df4:	df 91       	pop	r29
   19df6:	cf 91       	pop	r28
   19df8:	08 95       	ret

00019dfa <NTPClient::getHours() const>:
_ZNK9NTPClient8getHoursEv():
   19dfa:	0e 94 74 ce 	call	0x19ce8	; 0x19ce8 <NTPClient::getEpochTime() const>
   19dfe:	20 e8       	ldi	r18, 0x80	; 128
   19e00:	31 e5       	ldi	r19, 0x51	; 81
   19e02:	41 e0       	ldi	r20, 0x01	; 1
   19e04:	50 e0       	ldi	r21, 0x00	; 0
   19e06:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
   19e0a:	20 e1       	ldi	r18, 0x10	; 16
   19e0c:	3e e0       	ldi	r19, 0x0E	; 14
   19e0e:	40 e0       	ldi	r20, 0x00	; 0
   19e10:	50 e0       	ldi	r21, 0x00	; 0
   19e12:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
   19e16:	c9 01       	movw	r24, r18
   19e18:	08 95       	ret

00019e1a <NTPClient::getMinutes() const>:
_ZNK9NTPClient10getMinutesEv():
   19e1a:	0e 94 74 ce 	call	0x19ce8	; 0x19ce8 <NTPClient::getEpochTime() const>
   19e1e:	20 e1       	ldi	r18, 0x10	; 16
   19e20:	3e e0       	ldi	r19, 0x0E	; 14
   19e22:	40 e0       	ldi	r20, 0x00	; 0
   19e24:	50 e0       	ldi	r21, 0x00	; 0
   19e26:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
   19e2a:	2c e3       	ldi	r18, 0x3C	; 60
   19e2c:	30 e0       	ldi	r19, 0x00	; 0
   19e2e:	40 e0       	ldi	r20, 0x00	; 0
   19e30:	50 e0       	ldi	r21, 0x00	; 0
   19e32:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
   19e36:	c9 01       	movw	r24, r18
   19e38:	08 95       	ret

00019e3a <NTPClient::getSeconds() const>:
_ZNK9NTPClient10getSecondsEv():
   19e3a:	0e 94 74 ce 	call	0x19ce8	; 0x19ce8 <NTPClient::getEpochTime() const>
   19e3e:	2c e3       	ldi	r18, 0x3C	; 60
   19e40:	30 e0       	ldi	r19, 0x00	; 0
   19e42:	40 e0       	ldi	r20, 0x00	; 0
   19e44:	50 e0       	ldi	r21, 0x00	; 0
   19e46:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
   19e4a:	cb 01       	movw	r24, r22
   19e4c:	08 95       	ret

00019e4e <NTPClient::end()>:
_ZN9NTPClient3endEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:165

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
   19e4e:	cf 93       	push	r28
   19e50:	df 93       	push	r29
   19e52:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166
  this->_udp->stop();
   19e54:	88 81       	ld	r24, Y
   19e56:	99 81       	ldd	r25, Y+1	; 0x01
   19e58:	dc 01       	movw	r26, r24
   19e5a:	ed 91       	ld	r30, X+
   19e5c:	fc 91       	ld	r31, X
   19e5e:	02 88       	ldd	r0, Z+18	; 0x12
   19e60:	f3 89       	ldd	r31, Z+19	; 0x13
   19e62:	e0 2d       	mov	r30, r0
   19e64:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   19e66:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:169
}
   19e68:	df 91       	pop	r29
   19e6a:	cf 91       	pop	r28
   19e6c:	08 95       	ret

00019e6e <NTPClient::setTimeOffset(int)>:
_ZN9NTPClient13setTimeOffsetEi():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   19e6e:	ab 01       	movw	r20, r22
   19e70:	77 0f       	add	r23, r23
   19e72:	66 0b       	sbc	r22, r22
   19e74:	77 0b       	sbc	r23, r23
   19e76:	fc 01       	movw	r30, r24
   19e78:	47 83       	std	Z+7, r20	; 0x07
   19e7a:	50 87       	std	Z+8, r21	; 0x08
   19e7c:	61 87       	std	Z+9, r22	; 0x09
   19e7e:	72 87       	std	Z+10, r23	; 0x0a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:173
}
   19e80:	08 95       	ret

00019e82 <NTPClient::setUpdateInterval(unsigned long)>:
_ZN9NTPClient17setUpdateIntervalEm():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
   19e82:	fc 01       	movw	r30, r24
   19e84:	43 87       	std	Z+11, r20	; 0x0b
   19e86:	54 87       	std	Z+12, r21	; 0x0c
   19e88:	65 87       	std	Z+13, r22	; 0x0d
   19e8a:	76 87       	std	Z+14, r23	; 0x0e
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:177
}
   19e8c:	08 95       	ret

00019e8e <NTPClient::setPoolServerName(char const*)>:
_ZN9NTPClient17setPoolServerNameEPKc():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   19e8e:	fc 01       	movw	r30, r24
   19e90:	74 83       	std	Z+4, r23	; 0x04
   19e92:	63 83       	std	Z+3, r22	; 0x03
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:181
}
   19e94:	08 95       	ret

00019e96 <NTPClient::sendNTPPacket()>:
_ZN9NTPClient13sendNTPPacketEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:183

void NTPClient::sendNTPPacket() {
   19e96:	cf 93       	push	r28
   19e98:	df 93       	push	r29
   19e9a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   19e9c:	fc 01       	movw	r30, r24
   19e9e:	7b 96       	adiw	r30, 0x1b	; 27
   19ea0:	8c e2       	ldi	r24, 0x2C	; 44
   19ea2:	df 01       	movw	r26, r30
   19ea4:	1d 92       	st	X+, r1
   19ea6:	8a 95       	dec	r24
   19ea8:	e9 f7       	brne	.-6      	; 0x19ea4 <NTPClient::sendNTPPacket()+0xe>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
   19eaa:	83 ee       	ldi	r24, 0xE3	; 227
   19eac:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
   19eae:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
   19eb0:	86 e0       	ldi	r24, 0x06	; 6
   19eb2:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
   19eb4:	8c ee       	ldi	r24, 0xEC	; 236
   19eb6:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
   19eb8:	81 e3       	ldi	r24, 0x31	; 49
   19eba:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
   19ebc:	9e e4       	ldi	r25, 0x4E	; 78
   19ebe:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
   19ec0:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
   19ec2:	84 e3       	ldi	r24, 0x34	; 52
   19ec4:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
   19ec6:	88 81       	ld	r24, Y
   19ec8:	99 81       	ldd	r25, Y+1	; 0x01
   19eca:	6b 81       	ldd	r22, Y+3	; 0x03
   19ecc:	7c 81       	ldd	r23, Y+4	; 0x04
   19ece:	dc 01       	movw	r26, r24
   19ed0:	ed 91       	ld	r30, X+
   19ed2:	fc 91       	ld	r31, X
   19ed4:	06 88       	ldd	r0, Z+22	; 0x16
   19ed6:	f7 89       	ldd	r31, Z+23	; 0x17
   19ed8:	e0 2d       	mov	r30, r0
   19eda:	4b e7       	ldi	r20, 0x7B	; 123
   19edc:	50 e0       	ldi	r21, 0x00	; 0
   19ede:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   19ee0:	88 81       	ld	r24, Y
   19ee2:	99 81       	ldd	r25, Y+1	; 0x01
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   19ee4:	be 01       	movw	r22, r28
   19ee6:	69 5e       	subi	r22, 0xE9	; 233
   19ee8:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_packetBuffer[15]  = 52;

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   19eea:	dc 01       	movw	r26, r24
   19eec:	ed 91       	ld	r30, X+
   19eee:	fc 91       	ld	r31, X
   19ef0:	02 80       	ldd	r0, Z+2	; 0x02
   19ef2:	f3 81       	ldd	r31, Z+3	; 0x03
   19ef4:	e0 2d       	mov	r30, r0
   19ef6:	40 e3       	ldi	r20, 0x30	; 48
   19ef8:	50 e0       	ldi	r21, 0x00	; 0
   19efa:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
   19efc:	88 81       	ld	r24, Y
   19efe:	99 81       	ldd	r25, Y+1	; 0x01
   19f00:	dc 01       	movw	r26, r24
   19f02:	ed 91       	ld	r30, X+
   19f04:	fc 91       	ld	r31, X
   19f06:	00 8c       	ldd	r0, Z+24	; 0x18
   19f08:	f1 8d       	ldd	r31, Z+25	; 0x19
   19f0a:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
}
   19f0c:	df 91       	pop	r29
   19f0e:	cf 91       	pop	r28
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
  this->_udp->endPacket();
   19f10:	19 94       	eijmp

00019f12 <NTPClient::forceUpdate()>:
_ZN9NTPClient11forceUpdateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:64
  this->_udp->begin(this->_port);

  this->_udpSetup = true;
}

bool NTPClient::forceUpdate() {
   19f12:	0f 93       	push	r16
   19f14:	1f 93       	push	r17
   19f16:	cf 93       	push	r28
   19f18:	df 93       	push	r29
   19f1a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:69
  #ifdef DEBUG_NTPClient
    Serial.println("Update from NTP Server");
  #endif

  this->sendNTPPacket();
   19f1c:	0e 94 4b cf 	call	0x19e96	; 0x19e96 <NTPClient::sendNTPPacket()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72

  // Wait till data is there or timeout...
  byte timeout = 0;
   19f20:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
   19f22:	6a e0       	ldi	r22, 0x0A	; 10
   19f24:	70 e0       	ldi	r23, 0x00	; 0
   19f26:	80 e0       	ldi	r24, 0x00	; 0
   19f28:	90 e0       	ldi	r25, 0x00	; 0
   19f2a:	0e 94 57 d1 	call	0x1a2ae	; 0x1a2ae <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
   19f2e:	88 81       	ld	r24, Y
   19f30:	99 81       	ldd	r25, Y+1	; 0x01
   19f32:	dc 01       	movw	r26, r24
   19f34:	ed 91       	ld	r30, X+
   19f36:	fc 91       	ld	r31, X
   19f38:	02 8c       	ldd	r0, Z+26	; 0x1a
   19f3a:	f3 8d       	ldd	r31, Z+27	; 0x1b
   19f3c:	e0 2d       	mov	r30, r0
   19f3e:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
   19f40:	15 36       	cpi	r17, 0x65	; 101
   19f42:	09 f4       	brne	.+2      	; 0x19f46 <NTPClient::forceUpdate()+0x34>
   19f44:	59 c0       	rjmp	.+178    	; 0x19ff8 <NTPClient::forceUpdate()+0xe6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
   19f46:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
   19f48:	89 2b       	or	r24, r25
   19f4a:	59 f3       	breq	.-42     	; 0x19f22 <NTPClient::forceUpdate()+0x10>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
   19f4c:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   19f50:	21 2f       	mov	r18, r17
   19f52:	30 e0       	ldi	r19, 0x00	; 0
   19f54:	a9 01       	movw	r20, r18
   19f56:	4f 5f       	subi	r20, 0xFF	; 255
   19f58:	5f 4f       	sbci	r21, 0xFF	; 255
   19f5a:	ea e0       	ldi	r30, 0x0A	; 10
   19f5c:	e4 9f       	mul	r30, r20
   19f5e:	90 01       	movw	r18, r0
   19f60:	e5 9f       	mul	r30, r21
   19f62:	30 0d       	add	r19, r0
   19f64:	11 24       	eor	r1, r1
   19f66:	89 01       	movw	r16, r18
   19f68:	33 0f       	add	r19, r19
   19f6a:	22 0b       	sbc	r18, r18
   19f6c:	33 0b       	sbc	r19, r19
   19f6e:	ab 01       	movw	r20, r22
   19f70:	bc 01       	movw	r22, r24
   19f72:	40 1b       	sub	r20, r16
   19f74:	51 0b       	sbc	r21, r17
   19f76:	62 0b       	sbc	r22, r18
   19f78:	73 0b       	sbc	r23, r19
   19f7a:	4b 8b       	std	Y+19, r20	; 0x13
   19f7c:	5c 8b       	std	Y+20, r21	; 0x14
   19f7e:	6d 8b       	std	Y+21, r22	; 0x15
   19f80:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
   19f82:	88 81       	ld	r24, Y
   19f84:	99 81       	ldd	r25, Y+1	; 0x01
   19f86:	be 01       	movw	r22, r28
   19f88:	69 5e       	subi	r22, 0xE9	; 233
   19f8a:	7f 4f       	sbci	r23, 0xFF	; 255
   19f8c:	dc 01       	movw	r26, r24
   19f8e:	ed 91       	ld	r30, X+
   19f90:	fc 91       	ld	r31, X
   19f92:	04 8c       	ldd	r0, Z+28	; 0x1c
   19f94:	f5 8d       	ldd	r31, Z+29	; 0x1d
   19f96:	e0 2d       	mov	r30, r0
   19f98:	40 e3       	ldi	r20, 0x30	; 48
   19f9a:	50 e0       	ldi	r21, 0x00	; 0
   19f9c:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   19f9e:	fe 01       	movw	r30, r28
   19fa0:	e0 5c       	subi	r30, 0xC0	; 192
   19fa2:	ff 4f       	sbci	r31, 0xFF	; 255
   19fa4:	60 81       	ld	r22, Z
   19fa6:	8f ad       	ldd	r24, Y+63	; 0x3f
   19fa8:	0e 94 62 d5 	call	0x1aac4	; 0x1aac4 <makeWord(unsigned char, unsigned char)>
   19fac:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   19fae:	de 01       	movw	r26, r28
   19fb0:	ae 5b       	subi	r26, 0xBE	; 190
   19fb2:	bf 4f       	sbci	r27, 0xFF	; 255
   19fb4:	fe 01       	movw	r30, r28
   19fb6:	ef 5b       	subi	r30, 0xBF	; 191
   19fb8:	ff 4f       	sbci	r31, 0xFF	; 255
   19fba:	6c 91       	ld	r22, X
   19fbc:	80 81       	ld	r24, Z
   19fbe:	0e 94 62 d5 	call	0x1aac4	; 0x1aac4 <makeWord(unsigned char, unsigned char)>
   19fc2:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   19fc4:	c8 01       	movw	r24, r16
   19fc6:	b0 e0       	ldi	r27, 0x00	; 0
   19fc8:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   19fca:	dc 01       	movw	r26, r24
   19fcc:	99 27       	eor	r25, r25
   19fce:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   19fd0:	70 e0       	ldi	r23, 0x00	; 0
   19fd2:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   19fd4:	84 2b       	or	r24, r20
   19fd6:	95 2b       	or	r25, r21
   19fd8:	a6 2b       	or	r26, r22
   19fda:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
   19fdc:	80 58       	subi	r24, 0x80	; 128
   19fde:	9e 47       	sbci	r25, 0x7E	; 126
   19fe0:	aa 4a       	sbci	r26, 0xAA	; 170
   19fe2:	b3 48       	sbci	r27, 0x83	; 131
   19fe4:	8f 87       	std	Y+15, r24	; 0x0f
   19fe6:	98 8b       	std	Y+16, r25	; 0x10
   19fe8:	a9 8b       	std	Y+17, r26	; 0x11
   19fea:	ba 8b       	std	Y+18, r27	; 0x12
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:93

  return true;
   19fec:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:94
}
   19fee:	df 91       	pop	r29
   19ff0:	cf 91       	pop	r28
   19ff2:	1f 91       	pop	r17
   19ff4:	0f 91       	pop	r16
   19ff6:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
   19ff8:	80 e0       	ldi	r24, 0x00	; 0
   19ffa:	f9 cf       	rjmp	.-14     	; 0x19fee <NTPClient::forceUpdate()+0xdc>

00019ffc <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
   19ffc:	cf 92       	push	r12
   19ffe:	df 92       	push	r13
   1a000:	ef 92       	push	r14
   1a002:	ff 92       	push	r15
   1a004:	0f 93       	push	r16
   1a006:	1f 93       	push	r17
   1a008:	cf 93       	push	r28
   1a00a:	df 93       	push	r29
   1a00c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
   1a00e:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <millis>
   1a012:	0b 89       	ldd	r16, Y+19	; 0x13
   1a014:	1c 89       	ldd	r17, Y+20	; 0x14
   1a016:	2d 89       	ldd	r18, Y+21	; 0x15
   1a018:	3e 89       	ldd	r19, Y+22	; 0x16
   1a01a:	60 1b       	sub	r22, r16
   1a01c:	71 0b       	sbc	r23, r17
   1a01e:	82 0b       	sbc	r24, r18
   1a020:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
   1a022:	cb 84       	ldd	r12, Y+11	; 0x0b
   1a024:	dc 84       	ldd	r13, Y+12	; 0x0c
   1a026:	ed 84       	ldd	r14, Y+13	; 0x0d
   1a028:	fe 84       	ldd	r15, Y+14	; 0x0e
   1a02a:	6c 15       	cp	r22, r12
   1a02c:	7d 05       	cpc	r23, r13
   1a02e:	8e 05       	cpc	r24, r14
   1a030:	9f 05       	cpc	r25, r15
   1a032:	20 f4       	brcc	.+8      	; 0x1a03c <NTPClient::update()+0x40>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98 (discriminator 2)
   1a034:	01 2b       	or	r16, r17
   1a036:	02 2b       	or	r16, r18
   1a038:	03 2b       	or	r16, r19
   1a03a:	89 f4       	brne	.+34     	; 0x1a05e <NTPClient::update()+0x62>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
   1a03c:	8a 81       	ldd	r24, Y+2	; 0x02
   1a03e:	81 11       	cpse	r24, r1
   1a040:	03 c0       	rjmp	.+6      	; 0x1a048 <NTPClient::update()+0x4c>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99 (discriminator 1)
   1a042:	ce 01       	movw	r24, r28
   1a044:	0e 94 70 ce 	call	0x19ce0	; 0x19ce0 <NTPClient::begin()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:100
    return this->forceUpdate();
   1a048:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
  }
  return true;
}
   1a04a:	df 91       	pop	r29
   1a04c:	cf 91       	pop	r28
   1a04e:	1f 91       	pop	r17
   1a050:	0f 91       	pop	r16
   1a052:	ff 90       	pop	r15
   1a054:	ef 90       	pop	r14
   1a056:	df 90       	pop	r13
   1a058:	cf 90       	pop	r12
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:100

bool NTPClient::update() {
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
   1a05a:	0c 94 89 cf 	jmp	0x19f12	; 0x19f12 <NTPClient::forceUpdate()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
  }
  return true;
}
   1a05e:	81 e0       	ldi	r24, 0x01	; 1
   1a060:	df 91       	pop	r29
   1a062:	cf 91       	pop	r28
   1a064:	1f 91       	pop	r17
   1a066:	0f 91       	pop	r16
   1a068:	ff 90       	pop	r15
   1a06a:	ef 90       	pop	r14
   1a06c:	df 90       	pop	r13
   1a06e:	cf 90       	pop	r12
   1a070:	08 95       	ret

0001a072 <_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP>:
_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
  this->_udp->endPacket();
}
   1a072:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   1a074:	00 e0       	ldi	r16, 0x00	; 0
   1a076:	20 e0       	ldi	r18, 0x00	; 0
   1a078:	40 e0       	ldi	r20, 0x00	; 0
   1a07a:	60 e0       	ldi	r22, 0x00	; 0
   1a07c:	87 ef       	ldi	r24, 0xF7	; 247
   1a07e:	91 e1       	ldi	r25, 0x11	; 17
   1a080:	0e 94 9e d4 	call	0x1a93c	; 0x1a93c <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
   1a084:	0f 91       	pop	r16
   1a086:	08 95       	ret

0001a088 <a2d_handler(void (*)(unsigned char, unsigned int))>:
_Z11a2d_handlerPFvhjE():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:53
/// deinicializace a2d prevodniku ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void deinit_a2d(void)
{
ADCSRA = 0;
ADMUX = 0;
}
   1a088:	90 93 fe 11 	sts	0x11FE, r25	; 0x8011fe <a2d_interupt_func+0x1>
   1a08c:	80 93 fd 11 	sts	0x11FD, r24	; 0x8011fd <a2d_interupt_func>
   1a090:	08 95       	ret

0001a092 <init_a2d(unsigned char, unsigned char, unsigned char)>:
_Z8init_a2dhhh():
   1a092:	80 93 01 12 	sts	0x1201, r24	; 0x801201 <a2d_enable>
   1a096:	40 93 00 12 	sts	0x1200, r20	; 0x801200 <a2d_reference>
   1a09a:	60 93 ff 11 	sts	0x11FF, r22	; 0x8011ff <a2d_delicka>
   1a09e:	10 92 02 12 	sts	0x1202, r1	; 0x801202 <a2d_index>
   1a0a2:	10 92 05 12 	sts	0x1205, r1	; 0x801205 <a2d_input>
   1a0a6:	10 92 04 12 	sts	0x1204, r1	; 0x801204 <a2d_data+0x1>
   1a0aa:	10 92 03 12 	sts	0x1203, r1	; 0x801203 <a2d_data>
   1a0ae:	67 70       	andi	r22, 0x07	; 7
   1a0b0:	68 57       	subi	r22, 0x78	; 120
   1a0b2:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   1a0b6:	ec e7       	ldi	r30, 0x7C	; 124
   1a0b8:	f0 e0       	ldi	r31, 0x00	; 0
   1a0ba:	10 82       	st	Z, r1
   1a0bc:	80 91 00 12 	lds	r24, 0x1200	; 0x801200 <a2d_reference>
   1a0c0:	20 e4       	ldi	r18, 0x40	; 64
   1a0c2:	82 9f       	mul	r24, r18
   1a0c4:	c0 01       	movw	r24, r0
   1a0c6:	11 24       	eor	r1, r1
   1a0c8:	80 83       	st	Z, r24
   1a0ca:	08 95       	ret

0001a0cc <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
   1a0cc:	90 91 00 12 	lds	r25, 0x1200	; 0x801200 <a2d_reference>
   1a0d0:	40 e4       	ldi	r20, 0x40	; 64
   1a0d2:	94 9f       	mul	r25, r20
   1a0d4:	90 01       	movw	r18, r0
   1a0d6:	11 24       	eor	r1, r1
   1a0d8:	98 2f       	mov	r25, r24
   1a0da:	97 70       	andi	r25, 0x07	; 7
   1a0dc:	92 0f       	add	r25, r18
   1a0de:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
   1a0e2:	80 93 05 12 	sts	0x1205, r24	; 0x801205 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
   1a0e6:	ea e7       	ldi	r30, 0x7A	; 122
   1a0e8:	f0 e0       	ldi	r31, 0x00	; 0
   1a0ea:	80 81       	ld	r24, Z
   1a0ec:	80 64       	ori	r24, 0x40	; 64
   1a0ee:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
   1a0f0:	08 95       	ret

0001a0f2 <a2d_start_process()>:
_Z17a2d_start_processv():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   1a0f2:	30 91 01 12 	lds	r19, 0x1201	; 0x801201 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1a0f6:	20 91 02 12 	lds	r18, 0x1202	; 0x801202 <a2d_index>
   1a0fa:	90 e0       	ldi	r25, 0x00	; 0
   1a0fc:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   1a0fe:	61 e0       	ldi	r22, 0x01	; 1
   1a100:	70 e0       	ldi	r23, 0x00	; 0
   1a102:	ab 01       	movw	r20, r22
   1a104:	08 2e       	mov	r0, r24
   1a106:	01 c0       	rjmp	.+2      	; 0x1a10a <a2d_start_process()+0x18>
   1a108:	44 0f       	add	r20, r20
   1a10a:	0a 94       	dec	r0
   1a10c:	ea f7       	brpl	.-6      	; 0x1a108 <a2d_start_process()+0x16>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   1a10e:	e3 2f       	mov	r30, r19
   1a110:	e4 23       	and	r30, r20
   1a112:	41 f0       	breq	.+16     	; 0x1a124 <a2d_start_process()+0x32>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1a114:	e2 2f       	mov	r30, r18
   1a116:	e4 23       	and	r30, r20
   1a118:	29 f4       	brne	.+10     	; 0x1a124 <a2d_start_process()+0x32>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   1a11a:	24 2b       	or	r18, r20
   1a11c:	20 93 02 12 	sts	0x1202, r18	; 0x801202 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   1a120:	0c 94 66 d0 	jmp	0x1a0cc	; 0x1a0cc <a2d_start_first(unsigned char)>
   1a124:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67 (discriminator 2)
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   1a126:	88 30       	cpi	r24, 0x08	; 8
   1a128:	91 05       	cpc	r25, r1
   1a12a:	59 f7       	brne	.-42     	; 0x1a102 <a2d_start_process()+0x10>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   1a12c:	10 92 02 12 	sts	0x1202, r1	; 0x801202 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:86
	//a2d_complete_funkce();
	}
}
   1a130:	08 95       	ret

0001a132 <a2d_done()>:
_Z8a2d_donev():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:92
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t a2d_done(void)
{
  return a2d_index;
}
   1a132:	80 91 02 12 	lds	r24, 0x1202	; 0x801202 <a2d_index>
   1a136:	08 95       	ret

0001a138 <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95

ISR(ADC_vect)
{
   1a138:	1f 92       	push	r1
   1a13a:	0f 92       	push	r0
   1a13c:	0f b6       	in	r0, 0x3f	; 63
   1a13e:	0f 92       	push	r0
   1a140:	11 24       	eor	r1, r1
   1a142:	0b b6       	in	r0, 0x3b	; 59
   1a144:	0f 92       	push	r0
   1a146:	2f 93       	push	r18
   1a148:	3f 93       	push	r19
   1a14a:	4f 93       	push	r20
   1a14c:	5f 93       	push	r21
   1a14e:	6f 93       	push	r22
   1a150:	7f 93       	push	r23
   1a152:	8f 93       	push	r24
   1a154:	9f 93       	push	r25
   1a156:	af 93       	push	r26
   1a158:	bf 93       	push	r27
   1a15a:	cf 93       	push	r28
   1a15c:	ef 93       	push	r30
   1a15e:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
   1a160:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
   1a162:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
   1a166:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
   1a16a:	68 2f       	mov	r22, r24
   1a16c:	70 e0       	ldi	r23, 0x00	; 0
   1a16e:	76 2f       	mov	r23, r22
   1a170:	66 27       	eor	r22, r22
   1a172:	69 0f       	add	r22, r25
   1a174:	71 1d       	adc	r23, r1
   1a176:	70 93 04 12 	sts	0x1204, r23	; 0x801204 <a2d_data+0x1>
   1a17a:	60 93 03 12 	sts	0x1203, r22	; 0x801203 <a2d_data>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   1a17e:	e0 91 fd 11 	lds	r30, 0x11FD	; 0x8011fd <a2d_interupt_func>
   1a182:	f0 91 fe 11 	lds	r31, 0x11FE	; 0x8011fe <a2d_interupt_func+0x1>
   1a186:	80 91 05 12 	lds	r24, 0x1205	; 0x801205 <a2d_input>
   1a18a:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
   1a18c:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
   1a18e:	ff 91       	pop	r31
   1a190:	ef 91       	pop	r30
   1a192:	cf 91       	pop	r28
   1a194:	bf 91       	pop	r27
   1a196:	af 91       	pop	r26
   1a198:	9f 91       	pop	r25
   1a19a:	8f 91       	pop	r24
   1a19c:	7f 91       	pop	r23
   1a19e:	6f 91       	pop	r22
   1a1a0:	5f 91       	pop	r21
   1a1a2:	4f 91       	pop	r20
   1a1a4:	3f 91       	pop	r19
   1a1a6:	2f 91       	pop	r18
   1a1a8:	0f 90       	pop	r0
   1a1aa:	0b be       	out	0x3b, r0	; 59
   1a1ac:	0f 90       	pop	r0
   1a1ae:	0f be       	out	0x3f, r0	; 63
   1a1b0:	0f 90       	pop	r0
   1a1b2:	1f 90       	pop	r1
   1a1b4:	18 95       	reti

0001a1b6 <yield>:
__empty():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
   1a1b6:	08 95       	ret

0001a1b8 <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   1a1b8:	1f 92       	push	r1
   1a1ba:	0f 92       	push	r0
   1a1bc:	0f b6       	in	r0, 0x3f	; 63
   1a1be:	0f 92       	push	r0
   1a1c0:	11 24       	eor	r1, r1
   1a1c2:	2f 93       	push	r18
   1a1c4:	3f 93       	push	r19
   1a1c6:	8f 93       	push	r24
   1a1c8:	9f 93       	push	r25
   1a1ca:	af 93       	push	r26
   1a1cc:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
   1a1ce:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <timer0_millis>
   1a1d2:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <timer0_millis+0x1>
   1a1d6:	a0 91 0d 12 	lds	r26, 0x120D	; 0x80120d <timer0_millis+0x2>
   1a1da:	b0 91 0e 12 	lds	r27, 0x120E	; 0x80120e <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
   1a1de:	30 91 0a 12 	lds	r19, 0x120A	; 0x80120a <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
   1a1e2:	23 e0       	ldi	r18, 0x03	; 3
   1a1e4:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
   1a1e6:	2d 37       	cpi	r18, 0x7D	; 125
   1a1e8:	68 f1       	brcs	.+90     	; 0x1a244 <__vector_23+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
   1a1ea:	26 e8       	ldi	r18, 0x86	; 134
   1a1ec:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
   1a1ee:	02 96       	adiw	r24, 0x02	; 2
   1a1f0:	a1 1d       	adc	r26, r1
   1a1f2:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
   1a1f4:	20 93 0a 12 	sts	0x120A, r18	; 0x80120a <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
   1a1f8:	80 93 0b 12 	sts	0x120B, r24	; 0x80120b <timer0_millis>
   1a1fc:	90 93 0c 12 	sts	0x120C, r25	; 0x80120c <timer0_millis+0x1>
   1a200:	a0 93 0d 12 	sts	0x120D, r26	; 0x80120d <timer0_millis+0x2>
   1a204:	b0 93 0e 12 	sts	0x120E, r27	; 0x80120e <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
   1a208:	80 91 06 12 	lds	r24, 0x1206	; 0x801206 <timer0_overflow_count>
   1a20c:	90 91 07 12 	lds	r25, 0x1207	; 0x801207 <timer0_overflow_count+0x1>
   1a210:	a0 91 08 12 	lds	r26, 0x1208	; 0x801208 <timer0_overflow_count+0x2>
   1a214:	b0 91 09 12 	lds	r27, 0x1209	; 0x801209 <timer0_overflow_count+0x3>
   1a218:	01 96       	adiw	r24, 0x01	; 1
   1a21a:	a1 1d       	adc	r26, r1
   1a21c:	b1 1d       	adc	r27, r1
   1a21e:	80 93 06 12 	sts	0x1206, r24	; 0x801206 <timer0_overflow_count>
   1a222:	90 93 07 12 	sts	0x1207, r25	; 0x801207 <timer0_overflow_count+0x1>
   1a226:	a0 93 08 12 	sts	0x1208, r26	; 0x801208 <timer0_overflow_count+0x2>
   1a22a:	b0 93 09 12 	sts	0x1209, r27	; 0x801209 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:213
#endif
}
   1a22e:	bf 91       	pop	r27
   1a230:	af 91       	pop	r26
   1a232:	9f 91       	pop	r25
   1a234:	8f 91       	pop	r24
   1a236:	3f 91       	pop	r19
   1a238:	2f 91       	pop	r18
   1a23a:	0f 90       	pop	r0
   1a23c:	0f be       	out	0x3f, r0	; 63
   1a23e:	0f 90       	pop	r0
   1a240:	1f 90       	pop	r1
   1a242:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
   1a244:	01 96       	adiw	r24, 0x01	; 1
   1a246:	a1 1d       	adc	r26, r1
   1a248:	b1 1d       	adc	r27, r1
   1a24a:	d4 cf       	rjmp	.-88     	; 0x1a1f4 <__vector_23+0x3c>

0001a24c <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
   1a24c:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
   1a24e:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
   1a250:	60 91 0b 12 	lds	r22, 0x120B	; 0x80120b <timer0_millis>
   1a254:	70 91 0c 12 	lds	r23, 0x120C	; 0x80120c <timer0_millis+0x1>
   1a258:	80 91 0d 12 	lds	r24, 0x120D	; 0x80120d <timer0_millis+0x2>
   1a25c:	90 91 0e 12 	lds	r25, 0x120E	; 0x80120e <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
   1a260:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
   1a262:	08 95       	ret

0001a264 <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
   1a264:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
   1a266:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
   1a268:	80 91 06 12 	lds	r24, 0x1206	; 0x801206 <timer0_overflow_count>
   1a26c:	90 91 07 12 	lds	r25, 0x1207	; 0x801207 <timer0_overflow_count+0x1>
   1a270:	a0 91 08 12 	lds	r26, 0x1208	; 0x801208 <timer0_overflow_count+0x2>
   1a274:	b0 91 09 12 	lds	r27, 0x1209	; 0x801209 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
   1a278:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
   1a27a:	a8 9b       	sbis	0x15, 0	; 21
   1a27c:	05 c0       	rjmp	.+10     	; 0x1a288 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
   1a27e:	2f 3f       	cpi	r18, 0xFF	; 255
   1a280:	19 f0       	breq	.+6      	; 0x1a288 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
   1a282:	01 96       	adiw	r24, 0x01	; 1
   1a284:	a1 1d       	adc	r26, r1
   1a286:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
   1a288:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
   1a28a:	ba 2f       	mov	r27, r26
   1a28c:	a9 2f       	mov	r26, r25
   1a28e:	98 2f       	mov	r25, r24
   1a290:	88 27       	eor	r24, r24
   1a292:	bc 01       	movw	r22, r24
   1a294:	cd 01       	movw	r24, r26
   1a296:	62 0f       	add	r22, r18
   1a298:	71 1d       	adc	r23, r1
   1a29a:	81 1d       	adc	r24, r1
   1a29c:	91 1d       	adc	r25, r1
   1a29e:	42 e0       	ldi	r20, 0x02	; 2
   1a2a0:	66 0f       	add	r22, r22
   1a2a2:	77 1f       	adc	r23, r23
   1a2a4:	88 1f       	adc	r24, r24
   1a2a6:	99 1f       	adc	r25, r25
   1a2a8:	4a 95       	dec	r20
   1a2aa:	d1 f7       	brne	.-12     	; 0x1a2a0 <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
   1a2ac:	08 95       	ret

0001a2ae <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
   1a2ae:	8f 92       	push	r8
   1a2b0:	9f 92       	push	r9
   1a2b2:	af 92       	push	r10
   1a2b4:	bf 92       	push	r11
   1a2b6:	cf 92       	push	r12
   1a2b8:	df 92       	push	r13
   1a2ba:	ef 92       	push	r14
   1a2bc:	ff 92       	push	r15
   1a2be:	6b 01       	movw	r12, r22
   1a2c0:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
   1a2c2:	0e 94 32 d1 	call	0x1a264	; 0x1a264 <micros>
   1a2c6:	4b 01       	movw	r8, r22
   1a2c8:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
   1a2ca:	c1 14       	cp	r12, r1
   1a2cc:	d1 04       	cpc	r13, r1
   1a2ce:	e1 04       	cpc	r14, r1
   1a2d0:	f1 04       	cpc	r15, r1
   1a2d2:	e9 f0       	breq	.+58     	; 0x1a30e <delay+0x60>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:400
    yield();
   1a2d4:	0e 94 db d0 	call	0x1a1b6	; 0x1a1b6 <yield>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
   1a2d8:	0e 94 32 d1 	call	0x1a264	; 0x1a264 <micros>
   1a2dc:	68 19       	sub	r22, r8
   1a2de:	79 09       	sbc	r23, r9
   1a2e0:	8a 09       	sbc	r24, r10
   1a2e2:	9b 09       	sbc	r25, r11
   1a2e4:	68 3e       	cpi	r22, 0xE8	; 232
   1a2e6:	73 40       	sbci	r23, 0x03	; 3
   1a2e8:	81 05       	cpc	r24, r1
   1a2ea:	91 05       	cpc	r25, r1
   1a2ec:	70 f3       	brcs	.-36     	; 0x1a2ca <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:402
      ms--;
   1a2ee:	21 e0       	ldi	r18, 0x01	; 1
   1a2f0:	c2 1a       	sub	r12, r18
   1a2f2:	d1 08       	sbc	r13, r1
   1a2f4:	e1 08       	sbc	r14, r1
   1a2f6:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
   1a2f8:	88 ee       	ldi	r24, 0xE8	; 232
   1a2fa:	88 0e       	add	r8, r24
   1a2fc:	83 e0       	ldi	r24, 0x03	; 3
   1a2fe:	98 1e       	adc	r9, r24
   1a300:	a1 1c       	adc	r10, r1
   1a302:	b1 1c       	adc	r11, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
   1a304:	c1 14       	cp	r12, r1
   1a306:	d1 04       	cpc	r13, r1
   1a308:	e1 04       	cpc	r14, r1
   1a30a:	f1 04       	cpc	r15, r1
   1a30c:	29 f7       	brne	.-54     	; 0x1a2d8 <delay+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
   1a30e:	ff 90       	pop	r15
   1a310:	ef 90       	pop	r14
   1a312:	df 90       	pop	r13
   1a314:	cf 90       	pop	r12
   1a316:	bf 90       	pop	r11
   1a318:	af 90       	pop	r10
   1a31a:	9f 90       	pop	r9
   1a31c:	8f 90       	pop	r8
   1a31e:	08 95       	ret

0001a320 <delayMicroseconds>:
delayMicroseconds():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
   1a320:	82 30       	cpi	r24, 0x02	; 2
   1a322:	91 05       	cpc	r25, r1
   1a324:	38 f0       	brcs	.+14     	; 0x1a334 <delayMicroseconds+0x14>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
   1a326:	88 0f       	add	r24, r24
   1a328:	99 1f       	adc	r25, r25
   1a32a:	88 0f       	add	r24, r24
   1a32c:	99 1f       	adc	r25, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
   1a32e:	05 97       	sbiw	r24, 0x05	; 5
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
   1a330:	01 97       	sbiw	r24, 0x01	; 1
   1a332:	f1 f7       	brne	.-4      	; 0x1a330 <delayMicroseconds+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
   1a334:	08 95       	ret

0001a336 <init>:
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   1a336:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   1a338:	84 b5       	in	r24, 0x24	; 36
   1a33a:	83 60       	ori	r24, 0x03	; 3
   1a33c:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   1a33e:	85 b5       	in	r24, 0x25	; 37
   1a340:	83 60       	ori	r24, 0x03	; 3
   1a342:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   1a344:	ee e6       	ldi	r30, 0x6E	; 110
   1a346:	f0 e0       	ldi	r31, 0x00	; 0
   1a348:	80 81       	ld	r24, Z
   1a34a:	81 60       	ori	r24, 0x01	; 1
   1a34c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   1a34e:	e1 e8       	ldi	r30, 0x81	; 129
   1a350:	f0 e0       	ldi	r31, 0x00	; 0
   1a352:	82 e0       	ldi	r24, 0x02	; 2
   1a354:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   1a356:	80 81       	ld	r24, Z
   1a358:	81 60       	ori	r24, 0x01	; 1
   1a35a:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   1a35c:	e0 e8       	ldi	r30, 0x80	; 128
   1a35e:	f0 e0       	ldi	r31, 0x00	; 0
   1a360:	80 81       	ld	r24, Z
   1a362:	81 60       	ori	r24, 0x01	; 1
   1a364:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   1a366:	e1 eb       	ldi	r30, 0xB1	; 177
   1a368:	f0 e0       	ldi	r31, 0x00	; 0
   1a36a:	80 81       	ld	r24, Z
   1a36c:	84 60       	ori	r24, 0x04	; 4
   1a36e:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   1a370:	e0 eb       	ldi	r30, 0xB0	; 176
   1a372:	f0 e0       	ldi	r31, 0x00	; 0
   1a374:	80 81       	ld	r24, Z
   1a376:	81 60       	ori	r24, 0x01	; 1
   1a378:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   1a37a:	e1 e9       	ldi	r30, 0x91	; 145
   1a37c:	f0 e0       	ldi	r31, 0x00	; 0
   1a37e:	80 81       	ld	r24, Z
   1a380:	83 60       	ori	r24, 0x03	; 3
   1a382:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   1a384:	e0 e9       	ldi	r30, 0x90	; 144
   1a386:	f0 e0       	ldi	r31, 0x00	; 0
   1a388:	80 81       	ld	r24, Z
   1a38a:	81 60       	ori	r24, 0x01	; 1
   1a38c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   1a38e:	e1 ea       	ldi	r30, 0xA1	; 161
   1a390:	f0 e0       	ldi	r31, 0x00	; 0
   1a392:	80 81       	ld	r24, Z
   1a394:	83 60       	ori	r24, 0x03	; 3
   1a396:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   1a398:	e0 ea       	ldi	r30, 0xA0	; 160
   1a39a:	f0 e0       	ldi	r31, 0x00	; 0
   1a39c:	80 81       	ld	r24, Z
   1a39e:	81 60       	ori	r24, 0x01	; 1
   1a3a0:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   1a3a2:	e1 e2       	ldi	r30, 0x21	; 33
   1a3a4:	f1 e0       	ldi	r31, 0x01	; 1
   1a3a6:	80 81       	ld	r24, Z
   1a3a8:	83 60       	ori	r24, 0x03	; 3
   1a3aa:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   1a3ac:	e0 e2       	ldi	r30, 0x20	; 32
   1a3ae:	f1 e0       	ldi	r31, 0x01	; 1
   1a3b0:	80 81       	ld	r24, Z
   1a3b2:	81 60       	ori	r24, 0x01	; 1
   1a3b4:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   1a3b6:	87 e8       	ldi	r24, 0x87	; 135
   1a3b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   1a3bc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
   1a3c0:	08 95       	ret

0001a3c2 <turnOffPWM>:
turnOffPWM():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   1a3c2:	82 50       	subi	r24, 0x02	; 2
   1a3c4:	82 31       	cpi	r24, 0x12	; 18
   1a3c6:	08 f0       	brcs	.+2      	; 0x1a3ca <turnOffPWM+0x8>
   1a3c8:	5f c0       	rjmp	.+190    	; 0x1a488 <turnOffPWM+0xc6>
   1a3ca:	e8 2f       	mov	r30, r24
   1a3cc:	f0 e0       	ldi	r31, 0x00	; 0
   1a3ce:	88 27       	eor	r24, r24
   1a3d0:	e3 51       	subi	r30, 0x13	; 19
   1a3d2:	fe 42       	sbci	r31, 0x2E	; 46
   1a3d4:	8f 4f       	sbci	r24, 0xFF	; 255
   1a3d6:	0c 94 c2 d8 	jmp	0x1b184	; 0x1b184 <__tablejump2__>
   1a3da:	41 d2       	rcall	.+1154   	; 0x1a85e <_GLOBAL__sub_I___vector_25+0x14>
   1a3dc:	45 d2       	rcall	.+1162   	; 0x1a868 <_GLOBAL__sub_I___vector_25+0x1e>
   1a3de:	ff d1       	rcall	.+1022   	; 0x1a7de <__vector_25+0x68>
   1a3e0:	05 d2       	rcall	.+1034   	; 0x1a7ec <__vector_26+0xa>
   1a3e2:	09 d2       	rcall	.+1042   	; 0x1a7f6 <__vector_26+0x14>
   1a3e4:	44 d2       	rcall	.+1160   	; 0x1a86e <_GLOBAL__sub_I___vector_25+0x24>
   1a3e6:	0d d2       	rcall	.+1050   	; 0x1a802 <__vector_26+0x20>
   1a3e8:	13 d2       	rcall	.+1062   	; 0x1a810 <__vector_26+0x2e>
   1a3ea:	17 d2       	rcall	.+1070   	; 0x1a81a <__vector_26+0x38>
   1a3ec:	1d d2       	rcall	.+1082   	; 0x1a828 <__vector_26+0x46>
   1a3ee:	21 d2       	rcall	.+1090   	; 0x1a832 <__vector_26+0x50>
   1a3f0:	25 d2       	rcall	.+1098   	; 0x1a83c <Serial0_available()+0x6>
   1a3f2:	2b d2       	rcall	.+1110   	; 0x1a84a <_GLOBAL__sub_I___vector_25>
   1a3f4:	2f d2       	rcall	.+1118   	; 0x1a854 <_GLOBAL__sub_I___vector_25+0xa>
   1a3f6:	44 d2       	rcall	.+1160   	; 0x1a880 <_GLOBAL__sub_I___vector_25+0x36>
   1a3f8:	33 d2       	rcall	.+1126   	; 0x1a860 <_GLOBAL__sub_I___vector_25+0x16>
   1a3fa:	39 d2       	rcall	.+1138   	; 0x1a86e <_GLOBAL__sub_I___vector_25+0x24>
   1a3fc:	3d d2       	rcall	.+1146   	; 0x1a878 <_GLOBAL__sub_I___vector_25+0x2e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   1a3fe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1a402:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   1a404:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
   1a408:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   1a40a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1a40e:	8f 7d       	andi	r24, 0xDF	; 223
   1a410:	f9 cf       	rjmp	.-14     	; 0x1a404 <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   1a412:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1a416:	87 7f       	andi	r24, 0xF7	; 247
   1a418:	f5 cf       	rjmp	.-22     	; 0x1a404 <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   1a41a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1a41e:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   1a420:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
   1a424:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   1a426:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1a42a:	8f 7d       	andi	r24, 0xDF	; 223
   1a42c:	f9 cf       	rjmp	.-14     	; 0x1a420 <turnOffPWM+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   1a42e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1a432:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   1a434:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:127
        break;
   1a438:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   1a43a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1a43e:	8f 7d       	andi	r24, 0xDF	; 223
   1a440:	f9 cf       	rjmp	.-14     	; 0x1a434 <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   1a442:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1a446:	87 7f       	andi	r24, 0xF7	; 247
   1a448:	f5 cf       	rjmp	.-22     	; 0x1a434 <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   1a44a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1a44e:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   1a450:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:144
        break;
   1a454:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   1a456:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1a45a:	8f 7d       	andi	r24, 0xDF	; 223
   1a45c:	f9 cf       	rjmp	.-14     	; 0x1a450 <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   1a45e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1a462:	87 7f       	andi	r24, 0xF7	; 247
   1a464:	f5 cf       	rjmp	.-22     	; 0x1a450 <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   1a466:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1a46a:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   1a46c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:162
        break;
   1a470:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   1a472:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1a476:	8f 7d       	andi	r24, 0xDF	; 223
   1a478:	f9 cf       	rjmp	.-14     	; 0x1a46c <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   1a47a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1a47e:	87 7f       	andi	r24, 0xF7	; 247
   1a480:	f5 cf       	rjmp	.-22     	; 0x1a46c <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   1a482:	84 b5       	in	r24, 0x24	; 36
   1a484:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   1a486:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   1a488:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   1a48a:	84 b5       	in	r24, 0x24	; 36
   1a48c:	8f 7d       	andi	r24, 0xDF	; 223
   1a48e:	fb cf       	rjmp	.-10     	; 0x1a486 <turnOffPWM+0xc4>

0001a490 <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   1a490:	cf 93       	push	r28
   1a492:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   1a494:	90 e0       	ldi	r25, 0x00	; 0
   1a496:	fc 01       	movw	r30, r24
   1a498:	e5 5b       	subi	r30, 0xB5	; 181
   1a49a:	fc 49       	sbci	r31, 0x9C	; 156
   1a49c:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   1a49e:	8f 57       	subi	r24, 0x7F	; 127
   1a4a0:	9c 49       	sbci	r25, 0x9C	; 156
   1a4a2:	fc 01       	movw	r30, r24
   1a4a4:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   1a4a6:	88 23       	and	r24, r24
   1a4a8:	c9 f0       	breq	.+50     	; 0x1a4dc <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   1a4aa:	90 e0       	ldi	r25, 0x00	; 0
   1a4ac:	88 0f       	add	r24, r24
   1a4ae:	99 1f       	adc	r25, r25
   1a4b0:	fc 01       	movw	r30, r24
   1a4b2:	e9 52       	subi	r30, 0x29	; 41
   1a4b4:	fc 49       	sbci	r31, 0x9C	; 156
   1a4b6:	a5 91       	lpm	r26, Z+
   1a4b8:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   1a4ba:	fc 01       	movw	r30, r24
   1a4bc:	e9 53       	subi	r30, 0x39	; 57
   1a4be:	fc 49       	sbci	r31, 0x9C	; 156
   1a4c0:	c5 91       	lpm	r28, Z+
   1a4c2:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   1a4c4:	61 11       	cpse	r22, r1
   1a4c6:	0d c0       	rjmp	.+26     	; 0x1a4e2 <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   1a4c8:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
   1a4ca:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   1a4cc:	8c 91       	ld	r24, X
   1a4ce:	20 95       	com	r18
   1a4d0:	82 23       	and	r24, r18
   1a4d2:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   1a4d4:	88 81       	ld	r24, Y
   1a4d6:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   1a4d8:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   1a4da:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   1a4dc:	df 91       	pop	r29
   1a4de:	cf 91       	pop	r28
   1a4e0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   1a4e2:	62 30       	cpi	r22, 0x02	; 2
   1a4e4:	51 f4       	brne	.+20     	; 0x1a4fa <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   1a4e6:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
   1a4e8:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   1a4ea:	3c 91       	ld	r19, X
   1a4ec:	82 2f       	mov	r24, r18
   1a4ee:	80 95       	com	r24
   1a4f0:	83 23       	and	r24, r19
   1a4f2:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   1a4f4:	e8 81       	ld	r30, Y
   1a4f6:	2e 2b       	or	r18, r30
   1a4f8:	ef cf       	rjmp	.-34     	; 0x1a4d8 <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   1a4fa:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
   1a4fc:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   1a4fe:	ec 91       	ld	r30, X
   1a500:	2e 2b       	or	r18, r30
   1a502:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   1a504:	8f bf       	out	0x3f, r24	; 63
   1a506:	ea cf       	rjmp	.-44     	; 0x1a4dc <pinMode+0x4c>

0001a508 <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   1a508:	1f 93       	push	r17
   1a50a:	cf 93       	push	r28
   1a50c:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   1a50e:	28 2f       	mov	r18, r24
   1a510:	30 e0       	ldi	r19, 0x00	; 0
   1a512:	f9 01       	movw	r30, r18
   1a514:	eb 5e       	subi	r30, 0xEB	; 235
   1a516:	fc 49       	sbci	r31, 0x9C	; 156
   1a518:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   1a51a:	f9 01       	movw	r30, r18
   1a51c:	e5 5b       	subi	r30, 0xB5	; 181
   1a51e:	fc 49       	sbci	r31, 0x9C	; 156
   1a520:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   1a522:	f9 01       	movw	r30, r18
   1a524:	ef 57       	subi	r30, 0x7F	; 127
   1a526:	fc 49       	sbci	r31, 0x9C	; 156
   1a528:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   1a52a:	cc 23       	and	r28, r28
   1a52c:	a9 f0       	breq	.+42     	; 0x1a558 <digitalWrite+0x50>
   1a52e:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   1a530:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
   1a532:	0e 94 e1 d1 	call	0x1a3c2	; 0x1a3c2 <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   1a536:	ec 2f       	mov	r30, r28
   1a538:	f0 e0       	ldi	r31, 0x00	; 0
   1a53a:	ee 0f       	add	r30, r30
   1a53c:	ff 1f       	adc	r31, r31
   1a53e:	e9 53       	subi	r30, 0x39	; 57
   1a540:	fc 49       	sbci	r31, 0x9C	; 156
   1a542:	a5 91       	lpm	r26, Z+
   1a544:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   1a546:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
   1a548:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   1a54a:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   1a54c:	11 11       	cpse	r17, r1
   1a54e:	08 c0       	rjmp	.+16     	; 0x1a560 <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   1a550:	d0 95       	com	r29
   1a552:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   1a554:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   1a556:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:212
}
   1a558:	df 91       	pop	r29
   1a55a:	cf 91       	pop	r28
   1a55c:	1f 91       	pop	r17
   1a55e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   1a560:	de 2b       	or	r29, r30
   1a562:	f8 cf       	rjmp	.-16     	; 0x1a554 <digitalWrite+0x4c>

0001a564 <digitalRead>:
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   1a564:	cf 93       	push	r28
   1a566:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
   1a568:	28 2f       	mov	r18, r24
   1a56a:	30 e0       	ldi	r19, 0x00	; 0
   1a56c:	f9 01       	movw	r30, r18
   1a56e:	eb 5e       	subi	r30, 0xEB	; 235
   1a570:	fc 49       	sbci	r31, 0x9C	; 156
   1a572:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
   1a574:	f9 01       	movw	r30, r18
   1a576:	e5 5b       	subi	r30, 0xB5	; 181
   1a578:	fc 49       	sbci	r31, 0x9C	; 156
   1a57a:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
   1a57c:	f9 01       	movw	r30, r18
   1a57e:	ef 57       	subi	r30, 0x7F	; 127
   1a580:	fc 49       	sbci	r31, 0x9C	; 156
   1a582:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
   1a584:	cc 23       	and	r28, r28
   1a586:	a1 f0       	breq	.+40     	; 0x1a5b0 <digitalRead+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   1a588:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
   1a58a:	0e 94 e1 d1 	call	0x1a3c2	; 0x1a3c2 <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
   1a58e:	ec 2f       	mov	r30, r28
   1a590:	f0 e0       	ldi	r31, 0x00	; 0
   1a592:	ee 0f       	add	r30, r30
   1a594:	ff 1f       	adc	r31, r31
   1a596:	e9 54       	subi	r30, 0x49	; 73
   1a598:	fc 49       	sbci	r31, 0x9C	; 156
   1a59a:	a5 91       	lpm	r26, Z+
   1a59c:	b4 91       	lpm	r27, Z
   1a59e:	ec 91       	ld	r30, X
   1a5a0:	ed 23       	and	r30, r29
   1a5a2:	81 e0       	ldi	r24, 0x01	; 1
   1a5a4:	90 e0       	ldi	r25, 0x00	; 0
   1a5a6:	09 f4       	brne	.+2      	; 0x1a5aa <digitalRead+0x46>
   1a5a8:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
   1a5aa:	df 91       	pop	r29
   1a5ac:	cf 91       	pop	r28
   1a5ae:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
   1a5b0:	80 e0       	ldi	r24, 0x00	; 0
   1a5b2:	90 e0       	ldi	r25, 0x00	; 0
   1a5b4:	fa cf       	rjmp	.-12     	; 0x1a5aa <digitalRead+0x46>

0001a5b6 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
   1a5b6:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
   1a5b8:	91 8d       	ldd	r25, Z+25	; 0x19
   1a5ba:	22 8d       	ldd	r18, Z+26	; 0x1a
   1a5bc:	89 2f       	mov	r24, r25
   1a5be:	90 e0       	ldi	r25, 0x00	; 0
   1a5c0:	80 5c       	subi	r24, 0xC0	; 192
   1a5c2:	9f 4f       	sbci	r25, 0xFF	; 255
   1a5c4:	82 1b       	sub	r24, r18
   1a5c6:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
   1a5c8:	8f 73       	andi	r24, 0x3F	; 63
   1a5ca:	99 27       	eor	r25, r25
   1a5cc:	08 95       	ret

0001a5ce <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
   1a5ce:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
   1a5d0:	91 8d       	ldd	r25, Z+25	; 0x19
   1a5d2:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a5d4:	98 17       	cp	r25, r24
   1a5d6:	31 f0       	breq	.+12     	; 0x1a5e4 <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
   1a5d8:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a5da:	e8 0f       	add	r30, r24
   1a5dc:	f1 1d       	adc	r31, r1
   1a5de:	85 8d       	ldd	r24, Z+29	; 0x1d
   1a5e0:	90 e0       	ldi	r25, 0x00	; 0
   1a5e2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   1a5e4:	8f ef       	ldi	r24, 0xFF	; 255
   1a5e6:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
   1a5e8:	08 95       	ret

0001a5ea <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
   1a5ea:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
   1a5ec:	91 8d       	ldd	r25, Z+25	; 0x19
   1a5ee:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a5f0:	98 17       	cp	r25, r24
   1a5f2:	61 f0       	breq	.+24     	; 0x1a60c <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
   1a5f4:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a5f6:	ae 0f       	add	r26, r30
   1a5f8:	bf 2f       	mov	r27, r31
   1a5fa:	b1 1d       	adc	r27, r1
   1a5fc:	5d 96       	adiw	r26, 0x1d	; 29
   1a5fe:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
   1a600:	92 8d       	ldd	r25, Z+26	; 0x1a
   1a602:	9f 5f       	subi	r25, 0xFF	; 255
   1a604:	9f 73       	andi	r25, 0x3F	; 63
   1a606:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
   1a608:	90 e0       	ldi	r25, 0x00	; 0
   1a60a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   1a60c:	8f ef       	ldi	r24, 0xFF	; 255
   1a60e:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
   1a610:	08 95       	ret

0001a612 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   1a612:	fc 01       	movw	r30, r24
   1a614:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
   1a616:	44 8d       	ldd	r20, Z+28	; 0x1c
   1a618:	25 2f       	mov	r18, r21
   1a61a:	30 e0       	ldi	r19, 0x00	; 0
   1a61c:	84 2f       	mov	r24, r20
   1a61e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   1a620:	82 1b       	sub	r24, r18
   1a622:	93 0b       	sbc	r25, r19
   1a624:	54 17       	cp	r21, r20
   1a626:	10 f0       	brcs	.+4      	; 0x1a62c <HardwareSerial::availableForWrite()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
   1a628:	cf 96       	adiw	r24, 0x3f	; 63
   1a62a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
   1a62c:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
   1a62e:	08 95       	ret

0001a630 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
   1a630:	8b e1       	ldi	r24, 0x1B	; 27
   1a632:	94 ed       	ldi	r25, 0xD4	; 212
   1a634:	89 2b       	or	r24, r25
   1a636:	49 f0       	breq	.+18     	; 0x1a64a <serialEventRun()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
   1a638:	80 e0       	ldi	r24, 0x00	; 0
   1a63a:	90 e0       	ldi	r25, 0x00	; 0
   1a63c:	89 2b       	or	r24, r25
   1a63e:	29 f0       	breq	.+10     	; 0x1a64a <serialEventRun()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
   1a640:	0e 94 1b d4 	call	0x1a836	; 0x1a836 <Serial0_available()>
   1a644:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
   1a646:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
   1a64a:	80 e0       	ldi	r24, 0x00	; 0
   1a64c:	90 e0       	ldi	r25, 0x00	; 0
   1a64e:	89 2b       	or	r24, r25
   1a650:	49 f0       	breq	.+18     	; 0x1a664 <serialEventRun()+0x34>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
   1a652:	80 e0       	ldi	r24, 0x00	; 0
   1a654:	90 e0       	ldi	r25, 0x00	; 0
   1a656:	89 2b       	or	r24, r25
   1a658:	29 f0       	breq	.+10     	; 0x1a664 <serialEventRun()+0x34>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
   1a65a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   1a65e:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
   1a660:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
   1a664:	08 95       	ret

0001a666 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
   1a666:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
   1a668:	a4 8d       	ldd	r26, Z+28	; 0x1c
   1a66a:	a8 0f       	add	r26, r24
   1a66c:	b9 2f       	mov	r27, r25
   1a66e:	b1 1d       	adc	r27, r1
   1a670:	a3 5a       	subi	r26, 0xA3	; 163
   1a672:	bf 4f       	sbci	r27, 0xFF	; 255
   1a674:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
   1a676:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a678:	90 e0       	ldi	r25, 0x00	; 0
   1a67a:	01 96       	adiw	r24, 0x01	; 1
   1a67c:	8f 73       	andi	r24, 0x3F	; 63
   1a67e:	99 27       	eor	r25, r25
   1a680:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
   1a682:	a6 89       	ldd	r26, Z+22	; 0x16
   1a684:	b7 89       	ldd	r27, Z+23	; 0x17
   1a686:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
   1a688:	a0 89       	ldd	r26, Z+16	; 0x10
   1a68a:	b1 89       	ldd	r27, Z+17	; 0x11
   1a68c:	8c 91       	ld	r24, X
   1a68e:	80 64       	ori	r24, 0x40	; 64
   1a690:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
   1a692:	93 8d       	ldd	r25, Z+27	; 0x1b
   1a694:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a696:	98 13       	cpse	r25, r24
   1a698:	06 c0       	rjmp	.+12     	; 0x1a6a6 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
   1a69a:	02 88       	ldd	r0, Z+18	; 0x12
   1a69c:	f3 89       	ldd	r31, Z+19	; 0x13
   1a69e:	e0 2d       	mov	r30, r0
   1a6a0:	80 81       	ld	r24, Z
   1a6a2:	8f 7d       	andi	r24, 0xDF	; 223
   1a6a4:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
   1a6a6:	08 95       	ret

0001a6a8 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
   1a6a8:	cf 93       	push	r28
   1a6aa:	df 93       	push	r29
   1a6ac:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
   1a6ae:	88 8d       	ldd	r24, Y+24	; 0x18
   1a6b0:	88 23       	and	r24, r24
   1a6b2:	b9 f0       	breq	.+46     	; 0x1a6e2 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
   1a6b4:	aa 89       	ldd	r26, Y+18	; 0x12
   1a6b6:	bb 89       	ldd	r27, Y+19	; 0x13
   1a6b8:	e8 89       	ldd	r30, Y+16	; 0x10
   1a6ba:	f9 89       	ldd	r31, Y+17	; 0x11
   1a6bc:	8c 91       	ld	r24, X
   1a6be:	85 fd       	sbrc	r24, 5
   1a6c0:	03 c0       	rjmp	.+6      	; 0x1a6c8 <HardwareSerial::flush()+0x20>
   1a6c2:	80 81       	ld	r24, Z
   1a6c4:	86 fd       	sbrc	r24, 6
   1a6c6:	0d c0       	rjmp	.+26     	; 0x1a6e2 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
   1a6c8:	0f b6       	in	r0, 0x3f	; 63
   1a6ca:	07 fc       	sbrc	r0, 7
   1a6cc:	f7 cf       	rjmp	.-18     	; 0x1a6bc <HardwareSerial::flush()+0x14>
   1a6ce:	8c 91       	ld	r24, X
   1a6d0:	85 ff       	sbrs	r24, 5
   1a6d2:	f2 cf       	rjmp	.-28     	; 0x1a6b8 <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
   1a6d4:	80 81       	ld	r24, Z
   1a6d6:	85 ff       	sbrs	r24, 5
   1a6d8:	ed cf       	rjmp	.-38     	; 0x1a6b4 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
   1a6da:	ce 01       	movw	r24, r28
   1a6dc:	0e 94 33 d3 	call	0x1a666	; 0x1a666 <HardwareSerial::_tx_udr_empty_irq()>
   1a6e0:	e9 cf       	rjmp	.-46     	; 0x1a6b4 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
   1a6e2:	df 91       	pop	r29
   1a6e4:	cf 91       	pop	r28
   1a6e6:	08 95       	ret

0001a6e8 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
   1a6e8:	ef 92       	push	r14
   1a6ea:	ff 92       	push	r15
   1a6ec:	0f 93       	push	r16
   1a6ee:	1f 93       	push	r17
   1a6f0:	cf 93       	push	r28
   1a6f2:	df 93       	push	r29
   1a6f4:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
   1a6f6:	81 e0       	ldi	r24, 0x01	; 1
   1a6f8:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
   1a6fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
   1a6fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a6fe:	98 13       	cpse	r25, r24
   1a700:	16 c0       	rjmp	.+44     	; 0x1a72e <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
   1a702:	e8 89       	ldd	r30, Y+16	; 0x10
   1a704:	f9 89       	ldd	r31, Y+17	; 0x11
   1a706:	80 81       	ld	r24, Z
   1a708:	85 ff       	sbrs	r24, 5
   1a70a:	11 c0       	rjmp	.+34     	; 0x1a72e <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
   1a70c:	ee 89       	ldd	r30, Y+22	; 0x16
   1a70e:	ff 89       	ldd	r31, Y+23	; 0x17
   1a710:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
   1a712:	e8 89       	ldd	r30, Y+16	; 0x10
   1a714:	f9 89       	ldd	r31, Y+17	; 0x11
   1a716:	80 81       	ld	r24, Z
   1a718:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
   1a71a:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
   1a71c:	81 e0       	ldi	r24, 0x01	; 1
   1a71e:	90 e0       	ldi	r25, 0x00	; 0
   1a720:	df 91       	pop	r29
   1a722:	cf 91       	pop	r28
   1a724:	1f 91       	pop	r17
   1a726:	0f 91       	pop	r16
   1a728:	ff 90       	pop	r15
   1a72a:	ef 90       	pop	r14
   1a72c:	08 95       	ret
   1a72e:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
   1a730:	0b 8d       	ldd	r16, Y+27	; 0x1b
   1a732:	10 e0       	ldi	r17, 0x00	; 0
   1a734:	0f 5f       	subi	r16, 0xFF	; 255
   1a736:	1f 4f       	sbci	r17, 0xFF	; 255
   1a738:	0f 73       	andi	r16, 0x3F	; 63
   1a73a:	11 27       	eor	r17, r17
   1a73c:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
   1a73e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a740:	8e 11       	cpse	r24, r14
   1a742:	0c c0       	rjmp	.+24     	; 0x1a75c <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
   1a744:	0f b6       	in	r0, 0x3f	; 63
   1a746:	07 fc       	sbrc	r0, 7
   1a748:	fa cf       	rjmp	.-12     	; 0x1a73e <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
   1a74a:	e8 89       	ldd	r30, Y+16	; 0x10
   1a74c:	f9 89       	ldd	r31, Y+17	; 0x11
   1a74e:	80 81       	ld	r24, Z
   1a750:	85 ff       	sbrs	r24, 5
   1a752:	f5 cf       	rjmp	.-22     	; 0x1a73e <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
   1a754:	ce 01       	movw	r24, r28
   1a756:	0e 94 33 d3 	call	0x1a666	; 0x1a666 <HardwareSerial::_tx_udr_empty_irq()>
   1a75a:	f1 cf       	rjmp	.-30     	; 0x1a73e <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
   1a75c:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1a75e:	ec 0f       	add	r30, r28
   1a760:	fd 2f       	mov	r31, r29
   1a762:	f1 1d       	adc	r31, r1
   1a764:	e3 5a       	subi	r30, 0xA3	; 163
   1a766:	ff 4f       	sbci	r31, 0xFF	; 255
   1a768:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
   1a76a:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
   1a76c:	ea 89       	ldd	r30, Y+18	; 0x12
   1a76e:	fb 89       	ldd	r31, Y+19	; 0x13
   1a770:	80 81       	ld	r24, Z
   1a772:	80 62       	ori	r24, 0x20	; 32
   1a774:	d2 cf       	rjmp	.-92     	; 0x1a71a <HardwareSerial::write(unsigned char)+0x32>

0001a776 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   1a776:	1f 92       	push	r1
   1a778:	0f 92       	push	r0
   1a77a:	0f b6       	in	r0, 0x3f	; 63
   1a77c:	0f 92       	push	r0
   1a77e:	11 24       	eor	r1, r1
   1a780:	0b b6       	in	r0, 0x3b	; 59
   1a782:	0f 92       	push	r0
   1a784:	2f 93       	push	r18
   1a786:	8f 93       	push	r24
   1a788:	9f 93       	push	r25
   1a78a:	ef 93       	push	r30
   1a78c:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   1a78e:	e0 91 1f 12 	lds	r30, 0x121F	; 0x80121f <Serial+0x10>
   1a792:	f0 91 20 12 	lds	r31, 0x1220	; 0x801220 <Serial+0x11>
   1a796:	80 81       	ld	r24, Z
   1a798:	e0 91 25 12 	lds	r30, 0x1225	; 0x801225 <Serial+0x16>
   1a79c:	f0 91 26 12 	lds	r31, 0x1226	; 0x801226 <Serial+0x17>
   1a7a0:	82 fd       	sbrc	r24, 2
   1a7a2:	1d c0       	rjmp	.+58     	; 0x1a7de <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   1a7a4:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   1a7a6:	80 91 28 12 	lds	r24, 0x1228	; 0x801228 <Serial+0x19>
   1a7aa:	8f 5f       	subi	r24, 0xFF	; 255
   1a7ac:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   1a7ae:	20 91 29 12 	lds	r18, 0x1229	; 0x801229 <Serial+0x1a>
   1a7b2:	82 17       	cp	r24, r18
   1a7b4:	41 f0       	breq	.+16     	; 0x1a7c6 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   1a7b6:	e0 91 28 12 	lds	r30, 0x1228	; 0x801228 <Serial+0x19>
   1a7ba:	f0 e0       	ldi	r31, 0x00	; 0
   1a7bc:	e1 5f       	subi	r30, 0xF1	; 241
   1a7be:	fd 4e       	sbci	r31, 0xED	; 237
   1a7c0:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   1a7c2:	80 93 28 12 	sts	0x1228, r24	; 0x801228 <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   1a7c6:	ff 91       	pop	r31
   1a7c8:	ef 91       	pop	r30
   1a7ca:	9f 91       	pop	r25
   1a7cc:	8f 91       	pop	r24
   1a7ce:	2f 91       	pop	r18
   1a7d0:	0f 90       	pop	r0
   1a7d2:	0b be       	out	0x3b, r0	; 59
   1a7d4:	0f 90       	pop	r0
   1a7d6:	0f be       	out	0x3f, r0	; 63
   1a7d8:	0f 90       	pop	r0
   1a7da:	1f 90       	pop	r1
   1a7dc:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   1a7de:	80 81       	ld	r24, Z
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
   1a7e0:	f2 cf       	rjmp	.-28     	; 0x1a7c6 <__vector_25+0x50>

0001a7e2 <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   1a7e2:	1f 92       	push	r1
   1a7e4:	0f 92       	push	r0
   1a7e6:	0f b6       	in	r0, 0x3f	; 63
   1a7e8:	0f 92       	push	r0
   1a7ea:	11 24       	eor	r1, r1
   1a7ec:	0b b6       	in	r0, 0x3b	; 59
   1a7ee:	0f 92       	push	r0
   1a7f0:	2f 93       	push	r18
   1a7f2:	3f 93       	push	r19
   1a7f4:	4f 93       	push	r20
   1a7f6:	5f 93       	push	r21
   1a7f8:	6f 93       	push	r22
   1a7fa:	7f 93       	push	r23
   1a7fc:	8f 93       	push	r24
   1a7fe:	9f 93       	push	r25
   1a800:	af 93       	push	r26
   1a802:	bf 93       	push	r27
   1a804:	ef 93       	push	r30
   1a806:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   1a808:	8f e0       	ldi	r24, 0x0F	; 15
   1a80a:	92 e1       	ldi	r25, 0x12	; 18
   1a80c:	0e 94 33 d3 	call	0x1a666	; 0x1a666 <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
   1a810:	ff 91       	pop	r31
   1a812:	ef 91       	pop	r30
   1a814:	bf 91       	pop	r27
   1a816:	af 91       	pop	r26
   1a818:	9f 91       	pop	r25
   1a81a:	8f 91       	pop	r24
   1a81c:	7f 91       	pop	r23
   1a81e:	6f 91       	pop	r22
   1a820:	5f 91       	pop	r21
   1a822:	4f 91       	pop	r20
   1a824:	3f 91       	pop	r19
   1a826:	2f 91       	pop	r18
   1a828:	0f 90       	pop	r0
   1a82a:	0b be       	out	0x3b, r0	; 59
   1a82c:	0f 90       	pop	r0
   1a82e:	0f be       	out	0x3f, r0	; 63
   1a830:	0f 90       	pop	r0
   1a832:	1f 90       	pop	r1
   1a834:	18 95       	reti

0001a836 <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
   1a836:	8f e0       	ldi	r24, 0x0F	; 15
   1a838:	92 e1       	ldi	r25, 0x12	; 18
   1a83a:	0e 94 db d2 	call	0x1a5b6	; 0x1a5b6 <HardwareSerial::available()>
   1a83e:	21 e0       	ldi	r18, 0x01	; 1
   1a840:	89 2b       	or	r24, r25
   1a842:	09 f4       	brne	.+2      	; 0x1a846 <Serial0_available()+0x10>
   1a844:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
   1a846:	82 2f       	mov	r24, r18
   1a848:	08 95       	ret

0001a84a <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   1a84a:	ef e0       	ldi	r30, 0x0F	; 15
   1a84c:	f2 e1       	ldi	r31, 0x12	; 18
   1a84e:	13 82       	std	Z+3, r1	; 0x03
   1a850:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1a852:	88 ee       	ldi	r24, 0xE8	; 232
   1a854:	93 e0       	ldi	r25, 0x03	; 3
   1a856:	a0 e0       	ldi	r26, 0x00	; 0
   1a858:	b0 e0       	ldi	r27, 0x00	; 0
   1a85a:	84 83       	std	Z+4, r24	; 0x04
   1a85c:	95 83       	std	Z+5, r25	; 0x05
   1a85e:	a6 83       	std	Z+6, r26	; 0x06
   1a860:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
   1a862:	8a ec       	ldi	r24, 0xCA	; 202
   1a864:	98 e0       	ldi	r25, 0x08	; 8
   1a866:	91 83       	std	Z+1, r25	; 0x01
   1a868:	80 83       	st	Z, r24
   1a86a:	85 ec       	ldi	r24, 0xC5	; 197
   1a86c:	90 e0       	ldi	r25, 0x00	; 0
   1a86e:	95 87       	std	Z+13, r25	; 0x0d
   1a870:	84 87       	std	Z+12, r24	; 0x0c
   1a872:	84 ec       	ldi	r24, 0xC4	; 196
   1a874:	90 e0       	ldi	r25, 0x00	; 0
   1a876:	97 87       	std	Z+15, r25	; 0x0f
   1a878:	86 87       	std	Z+14, r24	; 0x0e
   1a87a:	80 ec       	ldi	r24, 0xC0	; 192
   1a87c:	90 e0       	ldi	r25, 0x00	; 0
   1a87e:	91 8b       	std	Z+17, r25	; 0x11
   1a880:	80 8b       	std	Z+16, r24	; 0x10
   1a882:	81 ec       	ldi	r24, 0xC1	; 193
   1a884:	90 e0       	ldi	r25, 0x00	; 0
   1a886:	93 8b       	std	Z+19, r25	; 0x13
   1a888:	82 8b       	std	Z+18, r24	; 0x12
   1a88a:	82 ec       	ldi	r24, 0xC2	; 194
   1a88c:	90 e0       	ldi	r25, 0x00	; 0
   1a88e:	95 8b       	std	Z+21, r25	; 0x15
   1a890:	84 8b       	std	Z+20, r24	; 0x14
   1a892:	86 ec       	ldi	r24, 0xC6	; 198
   1a894:	90 e0       	ldi	r25, 0x00	; 0
   1a896:	97 8b       	std	Z+23, r25	; 0x17
   1a898:	86 8b       	std	Z+22, r24	; 0x16
   1a89a:	11 8e       	std	Z+25, r1	; 0x19
   1a89c:	12 8e       	std	Z+26, r1	; 0x1a
   1a89e:	13 8e       	std	Z+27, r1	; 0x1b
   1a8a0:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
   1a8a2:	08 95       	ret

0001a8a4 <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:83
    if (dots != 3) {
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
   1a8a4:	8f 92       	push	r8
   1a8a6:	9f 92       	push	r9
   1a8a8:	af 92       	push	r10
   1a8aa:	bf 92       	push	r11
   1a8ac:	cf 92       	push	r12
   1a8ae:	df 92       	push	r13
   1a8b0:	ef 92       	push	r14
   1a8b2:	ff 92       	push	r15
   1a8b4:	0f 93       	push	r16
   1a8b6:	1f 93       	push	r17
   1a8b8:	cf 93       	push	r28
   1a8ba:	df 93       	push	r29
   1a8bc:	7c 01       	movw	r14, r24
   1a8be:	8b 01       	movw	r16, r22
   1a8c0:	4c 01       	movw	r8, r24
   1a8c2:	82 e0       	ldi	r24, 0x02	; 2
   1a8c4:	88 0e       	add	r8, r24
   1a8c6:	91 1c       	adc	r9, r1
   1a8c8:	57 01       	movw	r10, r14
   1a8ca:	e5 e0       	ldi	r30, 0x05	; 5
   1a8cc:	ae 0e       	add	r10, r30
   1a8ce:	b1 1c       	adc	r11, r1
   1a8d0:	d0 e0       	ldi	r29, 0x00	; 0
   1a8d2:	c0 e0       	ldi	r28, 0x00	; 0
   1a8d4:	f4 01       	movw	r30, r8
   1a8d6:	61 91       	ld	r22, Z+
   1a8d8:	4f 01       	movw	r8, r30
   1a8da:	4a e0       	ldi	r20, 0x0A	; 10
   1a8dc:	50 e0       	ldi	r21, 0x00	; 0
   1a8de:	c8 01       	movw	r24, r16
   1a8e0:	0e 94 5b d5 	call	0x1aab6	; 0x1aab6 <Print::print(unsigned char, int)>
   1a8e4:	6c 01       	movw	r12, r24
   1a8e6:	6e e2       	ldi	r22, 0x2E	; 46
   1a8e8:	c8 01       	movw	r24, r16
   1a8ea:	0e 94 fb d4 	call	0x1a9f6	; 0x1a9f6 <Print::print(char)>
   1a8ee:	8c 0d       	add	r24, r12
   1a8f0:	9d 1d       	adc	r25, r13
   1a8f2:	c8 0f       	add	r28, r24
   1a8f4:	d9 1f       	adc	r29, r25
   1a8f6:	8a 14       	cp	r8, r10
   1a8f8:	9b 04       	cpc	r9, r11
   1a8fa:	61 f7       	brne	.-40     	; 0x1a8d4 <IPAddress::printTo(Print&) const+0x30>
   1a8fc:	4a e0       	ldi	r20, 0x0A	; 10
   1a8fe:	50 e0       	ldi	r21, 0x00	; 0
   1a900:	f7 01       	movw	r30, r14
   1a902:	65 81       	ldd	r22, Z+5	; 0x05
   1a904:	c8 01       	movw	r24, r16
   1a906:	0e 94 5b d5 	call	0x1aab6	; 0x1aab6 <Print::print(unsigned char, int)>
   1a90a:	8c 0f       	add	r24, r28
   1a90c:	9d 1f       	adc	r25, r29
   1a90e:	df 91       	pop	r29
   1a910:	cf 91       	pop	r28
   1a912:	1f 91       	pop	r17
   1a914:	0f 91       	pop	r16
   1a916:	ff 90       	pop	r15
   1a918:	ef 90       	pop	r14
   1a91a:	df 90       	pop	r13
   1a91c:	cf 90       	pop	r12
   1a91e:	bf 90       	pop	r11
   1a920:	af 90       	pop	r10
   1a922:	9f 90       	pop	r9
   1a924:	8f 90       	pop	r8
   1a926:	08 95       	ret

0001a928 <IPAddress::IPAddress()>:
_ZN9IPAddressC2Ev():
   1a928:	2c ed       	ldi	r18, 0xDC	; 220
   1a92a:	38 e0       	ldi	r19, 0x08	; 8
   1a92c:	fc 01       	movw	r30, r24
   1a92e:	31 83       	std	Z+1, r19	; 0x01
   1a930:	20 83       	st	Z, r18
   1a932:	12 82       	std	Z+2, r1	; 0x02
   1a934:	13 82       	std	Z+3, r1	; 0x03
   1a936:	14 82       	std	Z+4, r1	; 0x04
   1a938:	15 82       	std	Z+5, r1	; 0x05
   1a93a:	08 95       	ret

0001a93c <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN9IPAddressC2Ehhhh():
   1a93c:	0f 93       	push	r16
   1a93e:	fc 01       	movw	r30, r24
   1a940:	8c ed       	ldi	r24, 0xDC	; 220
   1a942:	98 e0       	ldi	r25, 0x08	; 8
   1a944:	91 83       	std	Z+1, r25	; 0x01
   1a946:	80 83       	st	Z, r24
   1a948:	62 83       	std	Z+2, r22	; 0x02
   1a94a:	43 83       	std	Z+3, r20	; 0x03
   1a94c:	24 83       	std	Z+4, r18	; 0x04
   1a94e:	05 83       	std	Z+5, r16	; 0x05
   1a950:	0f 91       	pop	r16
   1a952:	08 95       	ret

0001a954 <IPAddress::IPAddress(unsigned char const*)>:
_ZN9IPAddressC2EPKh():
   1a954:	dc 01       	movw	r26, r24
   1a956:	8c ed       	ldi	r24, 0xDC	; 220
   1a958:	98 e0       	ldi	r25, 0x08	; 8
   1a95a:	8d 93       	st	X+, r24
   1a95c:	9d 93       	st	X+, r25
   1a95e:	84 e0       	ldi	r24, 0x04	; 4
   1a960:	fb 01       	movw	r30, r22
   1a962:	01 90       	ld	r0, Z+
   1a964:	0d 92       	st	X+, r0
   1a966:	8a 95       	dec	r24
   1a968:	e1 f7       	brne	.-8      	; 0x1a962 <IPAddress::IPAddress(unsigned char const*)+0xe>
   1a96a:	08 95       	ret

0001a96c <IPAddress::operator=(unsigned char const*)>:
_ZN9IPAddressaSEPKh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:88
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   1a96c:	dc 01       	movw	r26, r24
   1a96e:	12 96       	adiw	r26, 0x02	; 2
   1a970:	24 e0       	ldi	r18, 0x04	; 4
   1a972:	fb 01       	movw	r30, r22
   1a974:	01 90       	ld	r0, Z+
   1a976:	0d 92       	st	X+, r0
   1a978:	2a 95       	dec	r18
   1a97a:	e1 f7       	brne	.-8      	; 0x1a974 <IPAddress::operator=(unsigned char const*)+0x8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:90
    return *this;
}
   1a97c:	08 95       	ret

0001a97e <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
   1a97e:	af 92       	push	r10
   1a980:	bf 92       	push	r11
   1a982:	cf 92       	push	r12
   1a984:	df 92       	push	r13
   1a986:	ef 92       	push	r14
   1a988:	ff 92       	push	r15
   1a98a:	0f 93       	push	r16
   1a98c:	1f 93       	push	r17
   1a98e:	cf 93       	push	r28
   1a990:	df 93       	push	r29
   1a992:	6c 01       	movw	r12, r24
   1a994:	7b 01       	movw	r14, r22
   1a996:	8b 01       	movw	r16, r22
   1a998:	04 0f       	add	r16, r20
   1a99a:	15 1f       	adc	r17, r21
   1a99c:	eb 01       	movw	r28, r22
   1a99e:	5e 01       	movw	r10, r28
   1a9a0:	ae 18       	sub	r10, r14
   1a9a2:	bf 08       	sbc	r11, r15
   1a9a4:	c0 17       	cp	r28, r16
   1a9a6:	d1 07       	cpc	r29, r17
   1a9a8:	59 f0       	breq	.+22     	; 0x1a9c0 <Print::write(unsigned char const*, unsigned int)+0x42>
   1a9aa:	69 91       	ld	r22, Y+
   1a9ac:	d6 01       	movw	r26, r12
   1a9ae:	ed 91       	ld	r30, X+
   1a9b0:	fc 91       	ld	r31, X
   1a9b2:	01 90       	ld	r0, Z+
   1a9b4:	f0 81       	ld	r31, Z
   1a9b6:	e0 2d       	mov	r30, r0
   1a9b8:	c6 01       	movw	r24, r12
   1a9ba:	19 95       	eicall
   1a9bc:	89 2b       	or	r24, r25
   1a9be:	79 f7       	brne	.-34     	; 0x1a99e <Print::write(unsigned char const*, unsigned int)+0x20>
   1a9c0:	c5 01       	movw	r24, r10
   1a9c2:	df 91       	pop	r29
   1a9c4:	cf 91       	pop	r28
   1a9c6:	1f 91       	pop	r17
   1a9c8:	0f 91       	pop	r16
   1a9ca:	ff 90       	pop	r15
   1a9cc:	ef 90       	pop	r14
   1a9ce:	df 90       	pop	r13
   1a9d0:	cf 90       	pop	r12
   1a9d2:	bf 90       	pop	r11
   1a9d4:	af 90       	pop	r10
   1a9d6:	08 95       	ret

0001a9d8 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
   1a9d8:	fb 01       	movw	r30, r22
   1a9da:	01 90       	ld	r0, Z+
   1a9dc:	00 20       	and	r0, r0
   1a9de:	e9 f7       	brne	.-6      	; 0x1a9da <Print::write(char const*) [clone .part.2]+0x2>
   1a9e0:	31 97       	sbiw	r30, 0x01	; 1
   1a9e2:	af 01       	movw	r20, r30
   1a9e4:	46 1b       	sub	r20, r22
   1a9e6:	57 0b       	sbc	r21, r23
   1a9e8:	dc 01       	movw	r26, r24
   1a9ea:	ed 91       	ld	r30, X+
   1a9ec:	fc 91       	ld	r31, X
   1a9ee:	02 80       	ldd	r0, Z+2	; 0x02
   1a9f0:	f3 81       	ldd	r31, Z+3	; 0x03
   1a9f2:	e0 2d       	mov	r30, r0
   1a9f4:	19 94       	eijmp

0001a9f6 <Print::print(char)>:
_ZN5Print5printEc():
   1a9f6:	dc 01       	movw	r26, r24
   1a9f8:	ed 91       	ld	r30, X+
   1a9fa:	fc 91       	ld	r31, X
   1a9fc:	01 90       	ld	r0, Z+
   1a9fe:	f0 81       	ld	r31, Z
   1aa00:	e0 2d       	mov	r30, r0
   1aa02:	19 94       	eijmp

0001aa04 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
   1aa04:	8f 92       	push	r8
   1aa06:	9f 92       	push	r9
   1aa08:	af 92       	push	r10
   1aa0a:	bf 92       	push	r11
   1aa0c:	ef 92       	push	r14
   1aa0e:	ff 92       	push	r15
   1aa10:	0f 93       	push	r16
   1aa12:	1f 93       	push	r17
   1aa14:	cf 93       	push	r28
   1aa16:	df 93       	push	r29
   1aa18:	cd b7       	in	r28, 0x3d	; 61
   1aa1a:	de b7       	in	r29, 0x3e	; 62
   1aa1c:	a1 97       	sbiw	r28, 0x21	; 33
   1aa1e:	0f b6       	in	r0, 0x3f	; 63
   1aa20:	f8 94       	cli
   1aa22:	de bf       	out	0x3e, r29	; 62
   1aa24:	0f be       	out	0x3f, r0	; 63
   1aa26:	cd bf       	out	0x3d, r28	; 61
   1aa28:	7c 01       	movw	r14, r24
   1aa2a:	fa 01       	movw	r30, r20
   1aa2c:	cb 01       	movw	r24, r22
   1aa2e:	19 a2       	std	Y+33, r1	; 0x21
   1aa30:	22 30       	cpi	r18, 0x02	; 2
   1aa32:	08 f4       	brcc	.+2      	; 0x1aa36 <Print::printNumber(unsigned long, unsigned char)+0x32>
   1aa34:	2a e0       	ldi	r18, 0x0A	; 10
   1aa36:	8e 01       	movw	r16, r28
   1aa38:	0f 5d       	subi	r16, 0xDF	; 223
   1aa3a:	1f 4f       	sbci	r17, 0xFF	; 255
   1aa3c:	82 2e       	mov	r8, r18
   1aa3e:	91 2c       	mov	r9, r1
   1aa40:	b1 2c       	mov	r11, r1
   1aa42:	a1 2c       	mov	r10, r1
   1aa44:	bf 01       	movw	r22, r30
   1aa46:	a5 01       	movw	r20, r10
   1aa48:	94 01       	movw	r18, r8
   1aa4a:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
   1aa4e:	f9 01       	movw	r30, r18
   1aa50:	ca 01       	movw	r24, r20
   1aa52:	6a 30       	cpi	r22, 0x0A	; 10
   1aa54:	0c f5       	brge	.+66     	; 0x1aa98 <Print::printNumber(unsigned long, unsigned char)+0x94>
   1aa56:	60 5d       	subi	r22, 0xD0	; 208
   1aa58:	d8 01       	movw	r26, r16
   1aa5a:	6e 93       	st	-X, r22
   1aa5c:	8d 01       	movw	r16, r26
   1aa5e:	23 2b       	or	r18, r19
   1aa60:	24 2b       	or	r18, r20
   1aa62:	25 2b       	or	r18, r21
   1aa64:	79 f7       	brne	.-34     	; 0x1aa44 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
   1aa66:	90 e0       	ldi	r25, 0x00	; 0
   1aa68:	80 e0       	ldi	r24, 0x00	; 0
   1aa6a:	10 97       	sbiw	r26, 0x00	; 0
   1aa6c:	21 f0       	breq	.+8      	; 0x1aa76 <Print::printNumber(unsigned long, unsigned char)+0x72>
   1aa6e:	bd 01       	movw	r22, r26
   1aa70:	c7 01       	movw	r24, r14
   1aa72:	0e 94 ec d4 	call	0x1a9d8	; 0x1a9d8 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
   1aa76:	a1 96       	adiw	r28, 0x21	; 33
   1aa78:	0f b6       	in	r0, 0x3f	; 63
   1aa7a:	f8 94       	cli
   1aa7c:	de bf       	out	0x3e, r29	; 62
   1aa7e:	0f be       	out	0x3f, r0	; 63
   1aa80:	cd bf       	out	0x3d, r28	; 61
   1aa82:	df 91       	pop	r29
   1aa84:	cf 91       	pop	r28
   1aa86:	1f 91       	pop	r17
   1aa88:	0f 91       	pop	r16
   1aa8a:	ff 90       	pop	r15
   1aa8c:	ef 90       	pop	r14
   1aa8e:	bf 90       	pop	r11
   1aa90:	af 90       	pop	r10
   1aa92:	9f 90       	pop	r9
   1aa94:	8f 90       	pop	r8
   1aa96:	08 95       	ret
   1aa98:	69 5c       	subi	r22, 0xC9	; 201
   1aa9a:	de cf       	rjmp	.-68     	; 0x1aa58 <Print::printNumber(unsigned long, unsigned char)+0x54>

0001aa9c <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:105
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   1aa9c:	21 15       	cp	r18, r1
   1aa9e:	31 05       	cpc	r19, r1
   1aaa0:	41 f4       	brne	.+16     	; 0x1aab2 <Print::print(unsigned long, int)+0x16>
   1aaa2:	dc 01       	movw	r26, r24
   1aaa4:	ed 91       	ld	r30, X+
   1aaa6:	fc 91       	ld	r31, X
   1aaa8:	01 90       	ld	r0, Z+
   1aaaa:	f0 81       	ld	r31, Z
   1aaac:	e0 2d       	mov	r30, r0
   1aaae:	64 2f       	mov	r22, r20
   1aab0:	19 94       	eijmp
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
  else return printNumber(n, base);
   1aab2:	0c 94 02 d5 	jmp	0x1aa04	; 0x1aa04 <Print::printNumber(unsigned long, unsigned char)>

0001aab6 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:73
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
   1aab6:	9a 01       	movw	r18, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
  return print((unsigned long) b, base);
   1aab8:	46 2f       	mov	r20, r22
   1aaba:	50 e0       	ldi	r21, 0x00	; 0
   1aabc:	70 e0       	ldi	r23, 0x00	; 0
   1aabe:	60 e0       	ldi	r22, 0x00	; 0
   1aac0:	0c 94 4e d5 	jmp	0x1aa9c	; 0x1aa9c <Print::print(unsigned long, int)>

0001aac4 <makeWord(unsigned char, unsigned char)>:
_Z8makeWordhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WMath.cpp:58
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
unsigned int makeWord(unsigned char h, unsigned char l) { return (h << 8) | l; }
   1aac4:	98 2f       	mov	r25, r24
   1aac6:	86 2f       	mov	r24, r22
   1aac8:	08 95       	ret

0001aaca <String::~String()>:
_ZN6StringD2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   1aaca:	fc 01       	movw	r30, r24
   1aacc:	80 81       	ld	r24, Z
   1aace:	91 81       	ldd	r25, Z+1	; 0x01
   1aad0:	0c 94 9e d9 	jmp	0x1b33c	; 0x1b33c <free>

0001aad4 <String::invalidate()>:
_ZN6String10invalidateEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
   1aad4:	cf 93       	push	r28
   1aad6:	df 93       	push	r29
   1aad8:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
   1aada:	88 81       	ld	r24, Y
   1aadc:	99 81       	ldd	r25, Y+1	; 0x01
   1aade:	00 97       	sbiw	r24, 0x00	; 0
   1aae0:	11 f0       	breq	.+4      	; 0x1aae6 <String::invalidate()+0x12>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140 (discriminator 1)
   1aae2:	0e 94 9e d9 	call	0x1b33c	; 0x1b33c <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   1aae6:	19 82       	std	Y+1, r1	; 0x01
   1aae8:	18 82       	st	Y, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   1aaea:	1d 82       	std	Y+5, r1	; 0x05
   1aaec:	1c 82       	std	Y+4, r1	; 0x04
   1aaee:	1b 82       	std	Y+3, r1	; 0x03
   1aaf0:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:143
}
   1aaf2:	df 91       	pop	r29
   1aaf4:	cf 91       	pop	r28
   1aaf6:	08 95       	ret

0001aaf8 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:156
  }
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   1aaf8:	0f 93       	push	r16
   1aafa:	1f 93       	push	r17
   1aafc:	cf 93       	push	r28
   1aafe:	df 93       	push	r29
   1ab00:	ec 01       	movw	r28, r24
   1ab02:	8b 01       	movw	r16, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:157
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   1ab04:	6f 5f       	subi	r22, 0xFF	; 255
   1ab06:	7f 4f       	sbci	r23, 0xFF	; 255
   1ab08:	88 81       	ld	r24, Y
   1ab0a:	99 81       	ldd	r25, Y+1	; 0x01
   1ab0c:	0e 94 27 da 	call	0x1b44e	; 0x1b44e <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   1ab10:	00 97       	sbiw	r24, 0x00	; 0
   1ab12:	51 f0       	breq	.+20     	; 0x1ab28 <String::changeBuffer(unsigned int)+0x30>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   1ab14:	99 83       	std	Y+1, r25	; 0x01
   1ab16:	88 83       	st	Y, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   1ab18:	1b 83       	std	Y+3, r17	; 0x03
   1ab1a:	0a 83       	std	Y+2, r16	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:161
    return 1;
   1ab1c:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:164
  }
  return 0;
}
   1ab1e:	df 91       	pop	r29
   1ab20:	cf 91       	pop	r28
   1ab22:	1f 91       	pop	r17
   1ab24:	0f 91       	pop	r16
   1ab26:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:163
  if (newbuffer) {
    buffer = newbuffer;
    capacity = maxStrLen;
    return 1;
  }
  return 0;
   1ab28:	80 e0       	ldi	r24, 0x00	; 0
   1ab2a:	f9 cf       	rjmp	.-14     	; 0x1ab1e <String::changeBuffer(unsigned int)+0x26>

0001ab2c <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:146
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   1ab2c:	cf 93       	push	r28
   1ab2e:	df 93       	push	r29
   1ab30:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
   1ab32:	88 81       	ld	r24, Y
   1ab34:	99 81       	ldd	r25, Y+1	; 0x01
   1ab36:	89 2b       	or	r24, r25
   1ab38:	49 f0       	breq	.+18     	; 0x1ab4c <String::reserve(unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:147 (discriminator 1)
   1ab3a:	8a 81       	ldd	r24, Y+2	; 0x02
   1ab3c:	9b 81       	ldd	r25, Y+3	; 0x03
   1ab3e:	86 17       	cp	r24, r22
   1ab40:	97 07       	cpc	r25, r23
   1ab42:	20 f0       	brcs	.+8      	; 0x1ab4c <String::reserve(unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   1ab44:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
   1ab46:	df 91       	pop	r29
   1ab48:	cf 91       	pop	r28
   1ab4a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:148
}

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
   1ab4c:	ce 01       	movw	r24, r28
   1ab4e:	0e 94 7c d5 	call	0x1aaf8	; 0x1aaf8 <String::changeBuffer(unsigned int)>
   1ab52:	88 23       	and	r24, r24
   1ab54:	c1 f3       	breq	.-16     	; 0x1ab46 <String::reserve(unsigned int)+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149
    if (len == 0) buffer[0] = 0;
   1ab56:	8c 81       	ldd	r24, Y+4	; 0x04
   1ab58:	9d 81       	ldd	r25, Y+5	; 0x05
   1ab5a:	89 2b       	or	r24, r25
   1ab5c:	99 f7       	brne	.-26     	; 0x1ab44 <String::reserve(unsigned int)+0x18>
   1ab5e:	e8 81       	ld	r30, Y
   1ab60:	f9 81       	ldd	r31, Y+1	; 0x01
   1ab62:	10 82       	st	Z, r1
   1ab64:	ef cf       	rjmp	.-34     	; 0x1ab44 <String::reserve(unsigned int)+0x18>

0001ab66 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   1ab66:	ef 92       	push	r14
   1ab68:	ff 92       	push	r15
   1ab6a:	0f 93       	push	r16
   1ab6c:	1f 93       	push	r17
   1ab6e:	cf 93       	push	r28
   1ab70:	df 93       	push	r29
   1ab72:	ec 01       	movw	r28, r24
   1ab74:	7b 01       	movw	r14, r22
   1ab76:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:172
  if (!reserve(length)) {
   1ab78:	ba 01       	movw	r22, r20
   1ab7a:	0e 94 96 d5 	call	0x1ab2c	; 0x1ab2c <String::reserve(unsigned int)>
   1ab7e:	81 11       	cpse	r24, r1
   1ab80:	0b c0       	rjmp	.+22     	; 0x1ab98 <String::copy(char const*, unsigned int)+0x32>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:173
    invalidate();
   1ab82:	ce 01       	movw	r24, r28
   1ab84:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <String::invalidate()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:179
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
   1ab88:	ce 01       	movw	r24, r28
   1ab8a:	df 91       	pop	r29
   1ab8c:	cf 91       	pop	r28
   1ab8e:	1f 91       	pop	r17
   1ab90:	0f 91       	pop	r16
   1ab92:	ff 90       	pop	r15
   1ab94:	ef 90       	pop	r14
   1ab96:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   1ab98:	1d 83       	std	Y+5, r17	; 0x05
   1ab9a:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   1ab9c:	b7 01       	movw	r22, r14
   1ab9e:	88 81       	ld	r24, Y
   1aba0:	99 81       	ldd	r25, Y+1	; 0x01
   1aba2:	0e 94 79 dc 	call	0x1b8f2	; 0x1b8f2 <strcpy>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:178
  return *this;
   1aba6:	f0 cf       	rjmp	.-32     	; 0x1ab88 <String::copy(char const*, unsigned int)+0x22>

0001aba8 <String::String(char const*)>:
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   1aba8:	fc 01       	movw	r30, r24
   1abaa:	11 82       	std	Z+1, r1	; 0x01
   1abac:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   1abae:	13 82       	std	Z+3, r1	; 0x03
   1abb0:	12 82       	std	Z+2, r1	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   1abb2:	15 82       	std	Z+5, r1	; 0x05
   1abb4:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   1abb6:	61 15       	cp	r22, r1
   1abb8:	71 05       	cpc	r23, r1
   1abba:	51 f0       	breq	.+20     	; 0x1abd0 <String::String(char const*)+0x28>
   1abbc:	fb 01       	movw	r30, r22
   1abbe:	01 90       	ld	r0, Z+
   1abc0:	00 20       	and	r0, r0
   1abc2:	e9 f7       	brne	.-6      	; 0x1abbe <String::String(char const*)+0x16>
   1abc4:	31 97       	sbiw	r30, 0x01	; 1
   1abc6:	af 01       	movw	r20, r30
   1abc8:	46 1b       	sub	r20, r22
   1abca:	57 0b       	sbc	r21, r23
   1abcc:	0c 94 b3 d5 	jmp	0x1ab66	; 0x1ab66 <String::copy(char const*, unsigned int)>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:32
}
   1abd0:	08 95       	ret

0001abd2 <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   1abd2:	0e 94 0b dc 	call	0x1b816	; 0x1b816 <abort>

0001abd6 <initVariant>:
initVariant():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
   1abd6:	08 95       	ret

0001abd8 <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
   1abd8:	0e 94 9b d1 	call	0x1a336	; 0x1a336 <init>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
   1abdc:	0e 94 eb d5 	call	0x1abd6	; 0x1abd6 <initVariant>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   1abe0:	0e 94 5e 66 	call	0xccbc	; 0xccbc <setup>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   1abe4:	c8 e1       	ldi	r28, 0x18	; 24
   1abe6:	d3 ed       	ldi	r29, 0xD3	; 211
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
   1abe8:	0e 94 93 6e 	call	0xdd26	; 0xdd26 <loop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
   1abec:	20 97       	sbiw	r28, 0x00	; 0
   1abee:	e1 f3       	breq	.-8      	; 0x1abe8 <main+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
   1abf0:	0e 94 18 d3 	call	0x1a630	; 0x1a630 <serialEventRun()>
   1abf4:	f9 cf       	rjmp	.-14     	; 0x1abe8 <main+0x10>

0001abf6 <operator new(unsigned int)>:
_Znwj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   1abf6:	0c 94 02 d9 	jmp	0x1b204	; 0x1b204 <malloc>

0001abfa <operator new[](unsigned int)>:
_Znaj():
   1abfa:	0c 94 02 d9 	jmp	0x1b204	; 0x1b204 <malloc>

0001abfe <__subsf3>:
__subsf3():
   1abfe:	50 58       	subi	r21, 0x80	; 128

0001ac00 <__addsf3>:
   1ac00:	bb 27       	eor	r27, r27
   1ac02:	aa 27       	eor	r26, r26
   1ac04:	0e 94 17 d6 	call	0x1ac2e	; 0x1ac2e <__addsf3x>
   1ac08:	0c 94 91 d7 	jmp	0x1af22	; 0x1af22 <__fp_round>
__addsf3():
   1ac0c:	0e 94 83 d7 	call	0x1af06	; 0x1af06 <__fp_pscA>
   1ac10:	38 f0       	brcs	.+14     	; 0x1ac20 <__addsf3+0x20>
   1ac12:	0e 94 8a d7 	call	0x1af14	; 0x1af14 <__fp_pscB>
   1ac16:	20 f0       	brcs	.+8      	; 0x1ac20 <__addsf3+0x20>
   1ac18:	39 f4       	brne	.+14     	; 0x1ac28 <__addsf3+0x28>
   1ac1a:	9f 3f       	cpi	r25, 0xFF	; 255
   1ac1c:	19 f4       	brne	.+6      	; 0x1ac24 <__addsf3+0x24>
   1ac1e:	26 f4       	brtc	.+8      	; 0x1ac28 <__addsf3+0x28>
   1ac20:	0c 94 80 d7 	jmp	0x1af00	; 0x1af00 <__fp_nan>
   1ac24:	0e f4       	brtc	.+2      	; 0x1ac28 <__addsf3+0x28>
   1ac26:	e0 95       	com	r30
   1ac28:	e7 fb       	bst	r30, 7
   1ac2a:	0c 94 7a d7 	jmp	0x1aef4	; 0x1aef4 <__fp_inf>

0001ac2e <__addsf3x>:
__addsf3x():
   1ac2e:	e9 2f       	mov	r30, r25
   1ac30:	0e 94 a2 d7 	call	0x1af44	; 0x1af44 <__fp_split3>
   1ac34:	58 f3       	brcs	.-42     	; 0x1ac0c <__addsf3+0xc>
   1ac36:	ba 17       	cp	r27, r26
   1ac38:	62 07       	cpc	r22, r18
   1ac3a:	73 07       	cpc	r23, r19
   1ac3c:	84 07       	cpc	r24, r20
   1ac3e:	95 07       	cpc	r25, r21
   1ac40:	20 f0       	brcs	.+8      	; 0x1ac4a <__addsf3x+0x1c>
   1ac42:	79 f4       	brne	.+30     	; 0x1ac62 <__addsf3x+0x34>
   1ac44:	a6 f5       	brtc	.+104    	; 0x1acae <__addsf3x+0x80>
   1ac46:	0c 94 c4 d7 	jmp	0x1af88	; 0x1af88 <__fp_zero>
   1ac4a:	0e f4       	brtc	.+2      	; 0x1ac4e <__addsf3x+0x20>
   1ac4c:	e0 95       	com	r30
   1ac4e:	0b 2e       	mov	r0, r27
   1ac50:	ba 2f       	mov	r27, r26
   1ac52:	a0 2d       	mov	r26, r0
   1ac54:	0b 01       	movw	r0, r22
   1ac56:	b9 01       	movw	r22, r18
   1ac58:	90 01       	movw	r18, r0
   1ac5a:	0c 01       	movw	r0, r24
   1ac5c:	ca 01       	movw	r24, r20
   1ac5e:	a0 01       	movw	r20, r0
   1ac60:	11 24       	eor	r1, r1
   1ac62:	ff 27       	eor	r31, r31
   1ac64:	59 1b       	sub	r21, r25
   1ac66:	99 f0       	breq	.+38     	; 0x1ac8e <__addsf3x+0x60>
   1ac68:	59 3f       	cpi	r21, 0xF9	; 249
   1ac6a:	50 f4       	brcc	.+20     	; 0x1ac80 <__addsf3x+0x52>
   1ac6c:	50 3e       	cpi	r21, 0xE0	; 224
   1ac6e:	68 f1       	brcs	.+90     	; 0x1acca <__addsf3x+0x9c>
   1ac70:	1a 16       	cp	r1, r26
   1ac72:	f0 40       	sbci	r31, 0x00	; 0
   1ac74:	a2 2f       	mov	r26, r18
   1ac76:	23 2f       	mov	r18, r19
   1ac78:	34 2f       	mov	r19, r20
   1ac7a:	44 27       	eor	r20, r20
   1ac7c:	58 5f       	subi	r21, 0xF8	; 248
   1ac7e:	f3 cf       	rjmp	.-26     	; 0x1ac66 <__addsf3x+0x38>
   1ac80:	46 95       	lsr	r20
   1ac82:	37 95       	ror	r19
   1ac84:	27 95       	ror	r18
   1ac86:	a7 95       	ror	r26
   1ac88:	f0 40       	sbci	r31, 0x00	; 0
   1ac8a:	53 95       	inc	r21
   1ac8c:	c9 f7       	brne	.-14     	; 0x1ac80 <__addsf3x+0x52>
   1ac8e:	7e f4       	brtc	.+30     	; 0x1acae <__addsf3x+0x80>
   1ac90:	1f 16       	cp	r1, r31
   1ac92:	ba 0b       	sbc	r27, r26
   1ac94:	62 0b       	sbc	r22, r18
   1ac96:	73 0b       	sbc	r23, r19
   1ac98:	84 0b       	sbc	r24, r20
   1ac9a:	ba f0       	brmi	.+46     	; 0x1acca <__addsf3x+0x9c>
   1ac9c:	91 50       	subi	r25, 0x01	; 1
   1ac9e:	a1 f0       	breq	.+40     	; 0x1acc8 <__addsf3x+0x9a>
   1aca0:	ff 0f       	add	r31, r31
   1aca2:	bb 1f       	adc	r27, r27
   1aca4:	66 1f       	adc	r22, r22
   1aca6:	77 1f       	adc	r23, r23
   1aca8:	88 1f       	adc	r24, r24
   1acaa:	c2 f7       	brpl	.-16     	; 0x1ac9c <__addsf3x+0x6e>
   1acac:	0e c0       	rjmp	.+28     	; 0x1acca <__addsf3x+0x9c>
   1acae:	ba 0f       	add	r27, r26
   1acb0:	62 1f       	adc	r22, r18
   1acb2:	73 1f       	adc	r23, r19
   1acb4:	84 1f       	adc	r24, r20
   1acb6:	48 f4       	brcc	.+18     	; 0x1acca <__addsf3x+0x9c>
   1acb8:	87 95       	ror	r24
   1acba:	77 95       	ror	r23
   1acbc:	67 95       	ror	r22
   1acbe:	b7 95       	ror	r27
   1acc0:	f7 95       	ror	r31
   1acc2:	9e 3f       	cpi	r25, 0xFE	; 254
   1acc4:	08 f0       	brcs	.+2      	; 0x1acc8 <__addsf3x+0x9a>
   1acc6:	b0 cf       	rjmp	.-160    	; 0x1ac28 <__addsf3+0x28>
   1acc8:	93 95       	inc	r25
   1acca:	88 0f       	add	r24, r24
   1accc:	08 f0       	brcs	.+2      	; 0x1acd0 <__addsf3x+0xa2>
   1acce:	99 27       	eor	r25, r25
   1acd0:	ee 0f       	add	r30, r30
   1acd2:	97 95       	ror	r25
   1acd4:	87 95       	ror	r24
   1acd6:	08 95       	ret

0001acd8 <__cmpsf2>:
   1acd8:	0e 94 56 d7 	call	0x1aeac	; 0x1aeac <__fp_cmp>
   1acdc:	08 f4       	brcc	.+2      	; 0x1ace0 <__cmpsf2+0x8>
   1acde:	81 e0       	ldi	r24, 0x01	; 1
   1ace0:	08 95       	ret

0001ace2 <__divsf3>:
   1ace2:	0e 94 85 d6 	call	0x1ad0a	; 0x1ad0a <__divsf3x>
   1ace6:	0c 94 91 d7 	jmp	0x1af22	; 0x1af22 <__fp_round>
   1acea:	0e 94 8a d7 	call	0x1af14	; 0x1af14 <__fp_pscB>
   1acee:	58 f0       	brcs	.+22     	; 0x1ad06 <__divsf3+0x24>
   1acf0:	0e 94 83 d7 	call	0x1af06	; 0x1af06 <__fp_pscA>
   1acf4:	40 f0       	brcs	.+16     	; 0x1ad06 <__divsf3+0x24>
   1acf6:	29 f4       	brne	.+10     	; 0x1ad02 <__divsf3+0x20>
   1acf8:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
   1acfa:	29 f0       	breq	.+10     	; 0x1ad06 <__divsf3+0x24>
   1acfc:	0c 94 7a d7 	jmp	0x1aef4	; 0x1aef4 <__fp_inf>
   1ad00:	51 11       	cpse	r21, r1
   1ad02:	0c 94 c5 d7 	jmp	0x1af8a	; 0x1af8a <__fp_szero>
   1ad06:	0c 94 80 d7 	jmp	0x1af00	; 0x1af00 <__fp_nan>

0001ad0a <__divsf3x>:
__divsf3x():
   1ad0a:	0e 94 a2 d7 	call	0x1af44	; 0x1af44 <__fp_split3>
   1ad0e:	68 f3       	brcs	.-38     	; 0x1acea <__divsf3+0x8>

0001ad10 <__divsf3_pse>:
   1ad10:	99 23       	and	r25, r25
   1ad12:	b1 f3       	breq	.-20     	; 0x1ad00 <__divsf3+0x1e>
   1ad14:	55 23       	and	r21, r21
   1ad16:	91 f3       	breq	.-28     	; 0x1acfc <__divsf3+0x1a>
   1ad18:	95 1b       	sub	r25, r21
   1ad1a:	55 0b       	sbc	r21, r21
   1ad1c:	bb 27       	eor	r27, r27
   1ad1e:	aa 27       	eor	r26, r26
   1ad20:	62 17       	cp	r22, r18
   1ad22:	73 07       	cpc	r23, r19
   1ad24:	84 07       	cpc	r24, r20
   1ad26:	38 f0       	brcs	.+14     	; 0x1ad36 <__divsf3_pse+0x26>
   1ad28:	9f 5f       	subi	r25, 0xFF	; 255
   1ad2a:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad2c:	22 0f       	add	r18, r18
   1ad2e:	33 1f       	adc	r19, r19
   1ad30:	44 1f       	adc	r20, r20
   1ad32:	aa 1f       	adc	r26, r26
   1ad34:	a9 f3       	breq	.-22     	; 0x1ad20 <__divsf3_pse+0x10>
   1ad36:	35 d0       	rcall	.+106    	; 0x1ada2 <__divsf3_pse+0x92>
   1ad38:	0e 2e       	mov	r0, r30
   1ad3a:	3a f0       	brmi	.+14     	; 0x1ad4a <__divsf3_pse+0x3a>
   1ad3c:	e0 e8       	ldi	r30, 0x80	; 128
   1ad3e:	32 d0       	rcall	.+100    	; 0x1ada4 <__divsf3_pse+0x94>
   1ad40:	91 50       	subi	r25, 0x01	; 1
   1ad42:	50 40       	sbci	r21, 0x00	; 0
   1ad44:	e6 95       	lsr	r30
   1ad46:	00 1c       	adc	r0, r0
   1ad48:	ca f7       	brpl	.-14     	; 0x1ad3c <__divsf3_pse+0x2c>
   1ad4a:	2b d0       	rcall	.+86     	; 0x1ada2 <__divsf3_pse+0x92>
   1ad4c:	fe 2f       	mov	r31, r30
   1ad4e:	29 d0       	rcall	.+82     	; 0x1ada2 <__divsf3_pse+0x92>
   1ad50:	66 0f       	add	r22, r22
   1ad52:	77 1f       	adc	r23, r23
   1ad54:	88 1f       	adc	r24, r24
   1ad56:	bb 1f       	adc	r27, r27
   1ad58:	26 17       	cp	r18, r22
   1ad5a:	37 07       	cpc	r19, r23
   1ad5c:	48 07       	cpc	r20, r24
   1ad5e:	ab 07       	cpc	r26, r27
   1ad60:	b0 e8       	ldi	r27, 0x80	; 128
   1ad62:	09 f0       	breq	.+2      	; 0x1ad66 <__divsf3_pse+0x56>
   1ad64:	bb 0b       	sbc	r27, r27
   1ad66:	80 2d       	mov	r24, r0
   1ad68:	bf 01       	movw	r22, r30
   1ad6a:	ff 27       	eor	r31, r31
   1ad6c:	93 58       	subi	r25, 0x83	; 131
   1ad6e:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad70:	3a f0       	brmi	.+14     	; 0x1ad80 <__divsf3_pse+0x70>
   1ad72:	9e 3f       	cpi	r25, 0xFE	; 254
   1ad74:	51 05       	cpc	r21, r1
   1ad76:	78 f0       	brcs	.+30     	; 0x1ad96 <__divsf3_pse+0x86>
   1ad78:	0c 94 7a d7 	jmp	0x1aef4	; 0x1aef4 <__fp_inf>
   1ad7c:	0c 94 c5 d7 	jmp	0x1af8a	; 0x1af8a <__fp_szero>
   1ad80:	5f 3f       	cpi	r21, 0xFF	; 255
   1ad82:	e4 f3       	brlt	.-8      	; 0x1ad7c <__divsf3_pse+0x6c>
   1ad84:	98 3e       	cpi	r25, 0xE8	; 232
   1ad86:	d4 f3       	brlt	.-12     	; 0x1ad7c <__divsf3_pse+0x6c>
   1ad88:	86 95       	lsr	r24
   1ad8a:	77 95       	ror	r23
   1ad8c:	67 95       	ror	r22
   1ad8e:	b7 95       	ror	r27
   1ad90:	f7 95       	ror	r31
   1ad92:	9f 5f       	subi	r25, 0xFF	; 255
   1ad94:	c9 f7       	brne	.-14     	; 0x1ad88 <__divsf3_pse+0x78>
   1ad96:	88 0f       	add	r24, r24
   1ad98:	91 1d       	adc	r25, r1
   1ad9a:	96 95       	lsr	r25
   1ad9c:	87 95       	ror	r24
   1ad9e:	97 f9       	bld	r25, 7
   1ada0:	08 95       	ret
   1ada2:	e1 e0       	ldi	r30, 0x01	; 1
   1ada4:	66 0f       	add	r22, r22
   1ada6:	77 1f       	adc	r23, r23
   1ada8:	88 1f       	adc	r24, r24
   1adaa:	bb 1f       	adc	r27, r27
   1adac:	62 17       	cp	r22, r18
   1adae:	73 07       	cpc	r23, r19
   1adb0:	84 07       	cpc	r24, r20
   1adb2:	ba 07       	cpc	r27, r26
   1adb4:	20 f0       	brcs	.+8      	; 0x1adbe <__divsf3_pse+0xae>
   1adb6:	62 1b       	sub	r22, r18
   1adb8:	73 0b       	sbc	r23, r19
   1adba:	84 0b       	sbc	r24, r20
   1adbc:	ba 0b       	sbc	r27, r26
   1adbe:	ee 1f       	adc	r30, r30
   1adc0:	88 f7       	brcc	.-30     	; 0x1ada4 <__divsf3_pse+0x94>
   1adc2:	e0 95       	com	r30
   1adc4:	08 95       	ret

0001adc6 <__fixsfsi>:
   1adc6:	0e 94 ea d6 	call	0x1add4	; 0x1add4 <__fixunssfsi>
   1adca:	68 94       	set
   1adcc:	b1 11       	cpse	r27, r1
   1adce:	0c 94 c5 d7 	jmp	0x1af8a	; 0x1af8a <__fp_szero>
   1add2:	08 95       	ret

0001add4 <__fixunssfsi>:
   1add4:	0e 94 aa d7 	call	0x1af54	; 0x1af54 <__fp_splitA>
   1add8:	88 f0       	brcs	.+34     	; 0x1adfc <__fixunssfsi+0x28>
   1adda:	9f 57       	subi	r25, 0x7F	; 127
   1addc:	98 f0       	brcs	.+38     	; 0x1ae04 <__fixunssfsi+0x30>
   1adde:	b9 2f       	mov	r27, r25
   1ade0:	99 27       	eor	r25, r25
   1ade2:	b7 51       	subi	r27, 0x17	; 23
   1ade4:	b0 f0       	brcs	.+44     	; 0x1ae12 <__fixunssfsi+0x3e>
__fixunssfsi():
   1ade6:	e1 f0       	breq	.+56     	; 0x1ae20 <__fixunssfsi+0x4c>
   1ade8:	66 0f       	add	r22, r22
   1adea:	77 1f       	adc	r23, r23
   1adec:	88 1f       	adc	r24, r24
   1adee:	99 1f       	adc	r25, r25
   1adf0:	1a f0       	brmi	.+6      	; 0x1adf8 <__fixunssfsi+0x24>
   1adf2:	ba 95       	dec	r27
   1adf4:	c9 f7       	brne	.-14     	; 0x1ade8 <__fixunssfsi+0x14>
   1adf6:	14 c0       	rjmp	.+40     	; 0x1ae20 <__fixunssfsi+0x4c>
   1adf8:	b1 30       	cpi	r27, 0x01	; 1
   1adfa:	91 f0       	breq	.+36     	; 0x1ae20 <__fixunssfsi+0x4c>
   1adfc:	0e 94 c4 d7 	call	0x1af88	; 0x1af88 <__fp_zero>
   1ae00:	b1 e0       	ldi	r27, 0x01	; 1
   1ae02:	08 95       	ret
   1ae04:	0c 94 c4 d7 	jmp	0x1af88	; 0x1af88 <__fp_zero>
   1ae08:	67 2f       	mov	r22, r23
   1ae0a:	78 2f       	mov	r23, r24
   1ae0c:	88 27       	eor	r24, r24
   1ae0e:	b8 5f       	subi	r27, 0xF8	; 248
   1ae10:	39 f0       	breq	.+14     	; 0x1ae20 <__fixunssfsi+0x4c>
   1ae12:	b9 3f       	cpi	r27, 0xF9	; 249
   1ae14:	cc f3       	brlt	.-14     	; 0x1ae08 <__fixunssfsi+0x34>
   1ae16:	86 95       	lsr	r24
   1ae18:	77 95       	ror	r23
   1ae1a:	67 95       	ror	r22
   1ae1c:	b3 95       	inc	r27
   1ae1e:	d9 f7       	brne	.-10     	; 0x1ae16 <__fixunssfsi+0x42>
   1ae20:	3e f4       	brtc	.+14     	; 0x1ae30 <__fixunssfsi+0x5c>
   1ae22:	90 95       	com	r25
   1ae24:	80 95       	com	r24
   1ae26:	70 95       	com	r23
   1ae28:	61 95       	neg	r22
   1ae2a:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae2c:	8f 4f       	sbci	r24, 0xFF	; 255
   1ae2e:	9f 4f       	sbci	r25, 0xFF	; 255
   1ae30:	08 95       	ret

0001ae32 <__floatunsisf>:
__floatunsisf():
   1ae32:	e8 94       	clt
   1ae34:	09 c0       	rjmp	.+18     	; 0x1ae48 <__floatsisf+0x12>

0001ae36 <__floatsisf>:
   1ae36:	97 fb       	bst	r25, 7
   1ae38:	3e f4       	brtc	.+14     	; 0x1ae48 <__floatsisf+0x12>
   1ae3a:	90 95       	com	r25
   1ae3c:	80 95       	com	r24
   1ae3e:	70 95       	com	r23
   1ae40:	61 95       	neg	r22
   1ae42:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae44:	8f 4f       	sbci	r24, 0xFF	; 255
   1ae46:	9f 4f       	sbci	r25, 0xFF	; 255
   1ae48:	99 23       	and	r25, r25
   1ae4a:	a9 f0       	breq	.+42     	; 0x1ae76 <__floatsisf+0x40>
   1ae4c:	f9 2f       	mov	r31, r25
   1ae4e:	96 e9       	ldi	r25, 0x96	; 150
   1ae50:	bb 27       	eor	r27, r27
   1ae52:	93 95       	inc	r25
   1ae54:	f6 95       	lsr	r31
   1ae56:	87 95       	ror	r24
   1ae58:	77 95       	ror	r23
   1ae5a:	67 95       	ror	r22
   1ae5c:	b7 95       	ror	r27
   1ae5e:	f1 11       	cpse	r31, r1
   1ae60:	f8 cf       	rjmp	.-16     	; 0x1ae52 <__floatsisf+0x1c>
   1ae62:	fa f4       	brpl	.+62     	; 0x1aea2 <__floatsisf+0x6c>
   1ae64:	bb 0f       	add	r27, r27
   1ae66:	11 f4       	brne	.+4      	; 0x1ae6c <__floatsisf+0x36>
   1ae68:	60 ff       	sbrs	r22, 0
   1ae6a:	1b c0       	rjmp	.+54     	; 0x1aea2 <__floatsisf+0x6c>
   1ae6c:	6f 5f       	subi	r22, 0xFF	; 255
   1ae6e:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae70:	8f 4f       	sbci	r24, 0xFF	; 255
   1ae72:	9f 4f       	sbci	r25, 0xFF	; 255
   1ae74:	16 c0       	rjmp	.+44     	; 0x1aea2 <__floatsisf+0x6c>
   1ae76:	88 23       	and	r24, r24
   1ae78:	11 f0       	breq	.+4      	; 0x1ae7e <__floatsisf+0x48>
   1ae7a:	96 e9       	ldi	r25, 0x96	; 150
   1ae7c:	11 c0       	rjmp	.+34     	; 0x1aea0 <__floatsisf+0x6a>
   1ae7e:	77 23       	and	r23, r23
   1ae80:	21 f0       	breq	.+8      	; 0x1ae8a <__floatsisf+0x54>
   1ae82:	9e e8       	ldi	r25, 0x8E	; 142
   1ae84:	87 2f       	mov	r24, r23
   1ae86:	76 2f       	mov	r23, r22
   1ae88:	05 c0       	rjmp	.+10     	; 0x1ae94 <__floatsisf+0x5e>
   1ae8a:	66 23       	and	r22, r22
   1ae8c:	71 f0       	breq	.+28     	; 0x1aeaa <__floatsisf+0x74>
   1ae8e:	96 e8       	ldi	r25, 0x86	; 134
   1ae90:	86 2f       	mov	r24, r22
   1ae92:	70 e0       	ldi	r23, 0x00	; 0
   1ae94:	60 e0       	ldi	r22, 0x00	; 0
   1ae96:	2a f0       	brmi	.+10     	; 0x1aea2 <__floatsisf+0x6c>
   1ae98:	9a 95       	dec	r25
   1ae9a:	66 0f       	add	r22, r22
   1ae9c:	77 1f       	adc	r23, r23
   1ae9e:	88 1f       	adc	r24, r24
   1aea0:	da f7       	brpl	.-10     	; 0x1ae98 <__floatsisf+0x62>
   1aea2:	88 0f       	add	r24, r24
   1aea4:	96 95       	lsr	r25
   1aea6:	87 95       	ror	r24
   1aea8:	97 f9       	bld	r25, 7
   1aeaa:	08 95       	ret

0001aeac <__fp_cmp>:
__fp_cmp():
   1aeac:	99 0f       	add	r25, r25
   1aeae:	00 08       	sbc	r0, r0
   1aeb0:	55 0f       	add	r21, r21
   1aeb2:	aa 0b       	sbc	r26, r26
   1aeb4:	e0 e8       	ldi	r30, 0x80	; 128
   1aeb6:	fe ef       	ldi	r31, 0xFE	; 254
   1aeb8:	16 16       	cp	r1, r22
   1aeba:	17 06       	cpc	r1, r23
   1aebc:	e8 07       	cpc	r30, r24
   1aebe:	f9 07       	cpc	r31, r25
   1aec0:	c0 f0       	brcs	.+48     	; 0x1aef2 <__fp_cmp+0x46>
   1aec2:	12 16       	cp	r1, r18
   1aec4:	13 06       	cpc	r1, r19
   1aec6:	e4 07       	cpc	r30, r20
   1aec8:	f5 07       	cpc	r31, r21
   1aeca:	98 f0       	brcs	.+38     	; 0x1aef2 <__fp_cmp+0x46>
   1aecc:	62 1b       	sub	r22, r18
   1aece:	73 0b       	sbc	r23, r19
   1aed0:	84 0b       	sbc	r24, r20
   1aed2:	95 0b       	sbc	r25, r21
   1aed4:	39 f4       	brne	.+14     	; 0x1aee4 <__fp_cmp+0x38>
   1aed6:	0a 26       	eor	r0, r26
   1aed8:	61 f0       	breq	.+24     	; 0x1aef2 <__fp_cmp+0x46>
   1aeda:	23 2b       	or	r18, r19
   1aedc:	24 2b       	or	r18, r20
   1aede:	25 2b       	or	r18, r21
   1aee0:	21 f4       	brne	.+8      	; 0x1aeea <__fp_cmp+0x3e>
   1aee2:	08 95       	ret
   1aee4:	0a 26       	eor	r0, r26
   1aee6:	09 f4       	brne	.+2      	; 0x1aeea <__fp_cmp+0x3e>
   1aee8:	a1 40       	sbci	r26, 0x01	; 1
   1aeea:	a6 95       	lsr	r26
   1aeec:	8f ef       	ldi	r24, 0xFF	; 255
   1aeee:	81 1d       	adc	r24, r1
   1aef0:	81 1d       	adc	r24, r1
   1aef2:	08 95       	ret

0001aef4 <__fp_inf>:
__fp_inf():
   1aef4:	97 f9       	bld	r25, 7
   1aef6:	9f 67       	ori	r25, 0x7F	; 127
   1aef8:	80 e8       	ldi	r24, 0x80	; 128
   1aefa:	70 e0       	ldi	r23, 0x00	; 0
   1aefc:	60 e0       	ldi	r22, 0x00	; 0
   1aefe:	08 95       	ret

0001af00 <__fp_nan>:
__fp_nan():
   1af00:	9f ef       	ldi	r25, 0xFF	; 255
   1af02:	80 ec       	ldi	r24, 0xC0	; 192
   1af04:	08 95       	ret

0001af06 <__fp_pscA>:
__fp_pscA():
   1af06:	00 24       	eor	r0, r0
   1af08:	0a 94       	dec	r0
   1af0a:	16 16       	cp	r1, r22
   1af0c:	17 06       	cpc	r1, r23
   1af0e:	18 06       	cpc	r1, r24
   1af10:	09 06       	cpc	r0, r25
   1af12:	08 95       	ret

0001af14 <__fp_pscB>:
__fp_pscB():
   1af14:	00 24       	eor	r0, r0
   1af16:	0a 94       	dec	r0
   1af18:	12 16       	cp	r1, r18
   1af1a:	13 06       	cpc	r1, r19
   1af1c:	14 06       	cpc	r1, r20
   1af1e:	05 06       	cpc	r0, r21
   1af20:	08 95       	ret

0001af22 <__fp_round>:
__fp_round():
   1af22:	09 2e       	mov	r0, r25
   1af24:	03 94       	inc	r0
   1af26:	00 0c       	add	r0, r0
   1af28:	11 f4       	brne	.+4      	; 0x1af2e <__fp_round+0xc>
   1af2a:	88 23       	and	r24, r24
   1af2c:	52 f0       	brmi	.+20     	; 0x1af42 <__fp_round+0x20>
   1af2e:	bb 0f       	add	r27, r27
   1af30:	40 f4       	brcc	.+16     	; 0x1af42 <__fp_round+0x20>
   1af32:	bf 2b       	or	r27, r31
   1af34:	11 f4       	brne	.+4      	; 0x1af3a <__fp_round+0x18>
   1af36:	60 ff       	sbrs	r22, 0
   1af38:	04 c0       	rjmp	.+8      	; 0x1af42 <__fp_round+0x20>
   1af3a:	6f 5f       	subi	r22, 0xFF	; 255
   1af3c:	7f 4f       	sbci	r23, 0xFF	; 255
   1af3e:	8f 4f       	sbci	r24, 0xFF	; 255
   1af40:	9f 4f       	sbci	r25, 0xFF	; 255
   1af42:	08 95       	ret

0001af44 <__fp_split3>:
__fp_split3():
   1af44:	57 fd       	sbrc	r21, 7
   1af46:	90 58       	subi	r25, 0x80	; 128
   1af48:	44 0f       	add	r20, r20
   1af4a:	55 1f       	adc	r21, r21
   1af4c:	59 f0       	breq	.+22     	; 0x1af64 <__fp_splitA+0x10>
   1af4e:	5f 3f       	cpi	r21, 0xFF	; 255
   1af50:	71 f0       	breq	.+28     	; 0x1af6e <__fp_splitA+0x1a>
   1af52:	47 95       	ror	r20

0001af54 <__fp_splitA>:
   1af54:	88 0f       	add	r24, r24
   1af56:	97 fb       	bst	r25, 7
   1af58:	99 1f       	adc	r25, r25
   1af5a:	61 f0       	breq	.+24     	; 0x1af74 <__fp_splitA+0x20>
   1af5c:	9f 3f       	cpi	r25, 0xFF	; 255
   1af5e:	79 f0       	breq	.+30     	; 0x1af7e <__fp_splitA+0x2a>
   1af60:	87 95       	ror	r24
   1af62:	08 95       	ret
   1af64:	12 16       	cp	r1, r18
   1af66:	13 06       	cpc	r1, r19
   1af68:	14 06       	cpc	r1, r20
   1af6a:	55 1f       	adc	r21, r21
   1af6c:	f2 cf       	rjmp	.-28     	; 0x1af52 <__fp_split3+0xe>
   1af6e:	46 95       	lsr	r20
   1af70:	f1 df       	rcall	.-30     	; 0x1af54 <__fp_splitA>
   1af72:	08 c0       	rjmp	.+16     	; 0x1af84 <__fp_splitA+0x30>
   1af74:	16 16       	cp	r1, r22
   1af76:	17 06       	cpc	r1, r23
   1af78:	18 06       	cpc	r1, r24
   1af7a:	99 1f       	adc	r25, r25
   1af7c:	f1 cf       	rjmp	.-30     	; 0x1af60 <__fp_splitA+0xc>
   1af7e:	86 95       	lsr	r24
   1af80:	71 05       	cpc	r23, r1
   1af82:	61 05       	cpc	r22, r1
   1af84:	08 94       	sec
   1af86:	08 95       	ret

0001af88 <__fp_zero>:
__fp_zero():
   1af88:	e8 94       	clt

0001af8a <__fp_szero>:
   1af8a:	bb 27       	eor	r27, r27
   1af8c:	66 27       	eor	r22, r22
   1af8e:	77 27       	eor	r23, r23
   1af90:	cb 01       	movw	r24, r22
   1af92:	97 f9       	bld	r25, 7
   1af94:	08 95       	ret

0001af96 <__gesf2>:
__gesf2():
   1af96:	0e 94 56 d7 	call	0x1aeac	; 0x1aeac <__fp_cmp>
   1af9a:	08 f4       	brcc	.+2      	; 0x1af9e <__gesf2+0x8>
   1af9c:	8f ef       	ldi	r24, 0xFF	; 255
   1af9e:	08 95       	ret

0001afa0 <__mulsf3>:
__mulsf3():
   1afa0:	0e 94 e3 d7 	call	0x1afc6	; 0x1afc6 <__mulsf3x>
   1afa4:	0c 94 91 d7 	jmp	0x1af22	; 0x1af22 <__fp_round>
   1afa8:	0e 94 83 d7 	call	0x1af06	; 0x1af06 <__fp_pscA>
   1afac:	38 f0       	brcs	.+14     	; 0x1afbc <__mulsf3+0x1c>
   1afae:	0e 94 8a d7 	call	0x1af14	; 0x1af14 <__fp_pscB>
   1afb2:	20 f0       	brcs	.+8      	; 0x1afbc <__mulsf3+0x1c>
   1afb4:	95 23       	and	r25, r21
   1afb6:	11 f0       	breq	.+4      	; 0x1afbc <__mulsf3+0x1c>
   1afb8:	0c 94 7a d7 	jmp	0x1aef4	; 0x1aef4 <__fp_inf>
   1afbc:	0c 94 80 d7 	jmp	0x1af00	; 0x1af00 <__fp_nan>
   1afc0:	11 24       	eor	r1, r1
   1afc2:	0c 94 c5 d7 	jmp	0x1af8a	; 0x1af8a <__fp_szero>

0001afc6 <__mulsf3x>:
__mulsf3x():
   1afc6:	0e 94 a2 d7 	call	0x1af44	; 0x1af44 <__fp_split3>
   1afca:	70 f3       	brcs	.-36     	; 0x1afa8 <__mulsf3+0x8>

0001afcc <__mulsf3_pse>:
   1afcc:	95 9f       	mul	r25, r21
   1afce:	c1 f3       	breq	.-16     	; 0x1afc0 <__mulsf3+0x20>
   1afd0:	95 0f       	add	r25, r21
   1afd2:	50 e0       	ldi	r21, 0x00	; 0
   1afd4:	55 1f       	adc	r21, r21
   1afd6:	62 9f       	mul	r22, r18
   1afd8:	f0 01       	movw	r30, r0
   1afda:	72 9f       	mul	r23, r18
   1afdc:	bb 27       	eor	r27, r27
   1afde:	f0 0d       	add	r31, r0
   1afe0:	b1 1d       	adc	r27, r1
   1afe2:	63 9f       	mul	r22, r19
   1afe4:	aa 27       	eor	r26, r26
   1afe6:	f0 0d       	add	r31, r0
   1afe8:	b1 1d       	adc	r27, r1
   1afea:	aa 1f       	adc	r26, r26
   1afec:	64 9f       	mul	r22, r20
   1afee:	66 27       	eor	r22, r22
   1aff0:	b0 0d       	add	r27, r0
   1aff2:	a1 1d       	adc	r26, r1
   1aff4:	66 1f       	adc	r22, r22
   1aff6:	82 9f       	mul	r24, r18
   1aff8:	22 27       	eor	r18, r18
   1affa:	b0 0d       	add	r27, r0
   1affc:	a1 1d       	adc	r26, r1
   1affe:	62 1f       	adc	r22, r18
   1b000:	73 9f       	mul	r23, r19
   1b002:	b0 0d       	add	r27, r0
   1b004:	a1 1d       	adc	r26, r1
   1b006:	62 1f       	adc	r22, r18
   1b008:	83 9f       	mul	r24, r19
   1b00a:	a0 0d       	add	r26, r0
   1b00c:	61 1d       	adc	r22, r1
   1b00e:	22 1f       	adc	r18, r18
   1b010:	74 9f       	mul	r23, r20
   1b012:	33 27       	eor	r19, r19
   1b014:	a0 0d       	add	r26, r0
   1b016:	61 1d       	adc	r22, r1
   1b018:	23 1f       	adc	r18, r19
   1b01a:	84 9f       	mul	r24, r20
   1b01c:	60 0d       	add	r22, r0
   1b01e:	21 1d       	adc	r18, r1
   1b020:	82 2f       	mov	r24, r18
   1b022:	76 2f       	mov	r23, r22
   1b024:	6a 2f       	mov	r22, r26
   1b026:	11 24       	eor	r1, r1
   1b028:	9f 57       	subi	r25, 0x7F	; 127
   1b02a:	50 40       	sbci	r21, 0x00	; 0
   1b02c:	9a f0       	brmi	.+38     	; 0x1b054 <__mulsf3_pse+0x88>
   1b02e:	f1 f0       	breq	.+60     	; 0x1b06c <__mulsf3_pse+0xa0>
   1b030:	88 23       	and	r24, r24
   1b032:	4a f0       	brmi	.+18     	; 0x1b046 <__mulsf3_pse+0x7a>
   1b034:	ee 0f       	add	r30, r30
   1b036:	ff 1f       	adc	r31, r31
   1b038:	bb 1f       	adc	r27, r27
   1b03a:	66 1f       	adc	r22, r22
   1b03c:	77 1f       	adc	r23, r23
   1b03e:	88 1f       	adc	r24, r24
   1b040:	91 50       	subi	r25, 0x01	; 1
   1b042:	50 40       	sbci	r21, 0x00	; 0
   1b044:	a9 f7       	brne	.-22     	; 0x1b030 <__mulsf3_pse+0x64>
   1b046:	9e 3f       	cpi	r25, 0xFE	; 254
   1b048:	51 05       	cpc	r21, r1
   1b04a:	80 f0       	brcs	.+32     	; 0x1b06c <__mulsf3_pse+0xa0>
   1b04c:	0c 94 7a d7 	jmp	0x1aef4	; 0x1aef4 <__fp_inf>
   1b050:	0c 94 c5 d7 	jmp	0x1af8a	; 0x1af8a <__fp_szero>
   1b054:	5f 3f       	cpi	r21, 0xFF	; 255
   1b056:	e4 f3       	brlt	.-8      	; 0x1b050 <__mulsf3_pse+0x84>
   1b058:	98 3e       	cpi	r25, 0xE8	; 232
   1b05a:	d4 f3       	brlt	.-12     	; 0x1b050 <__mulsf3_pse+0x84>
   1b05c:	86 95       	lsr	r24
   1b05e:	77 95       	ror	r23
   1b060:	67 95       	ror	r22
   1b062:	b7 95       	ror	r27
   1b064:	f7 95       	ror	r31
   1b066:	e7 95       	ror	r30
   1b068:	9f 5f       	subi	r25, 0xFF	; 255
   1b06a:	c1 f7       	brne	.-16     	; 0x1b05c <__mulsf3_pse+0x90>
   1b06c:	fe 2b       	or	r31, r30
   1b06e:	88 0f       	add	r24, r24
   1b070:	91 1d       	adc	r25, r1
   1b072:	96 95       	lsr	r25
   1b074:	87 95       	ror	r24
   1b076:	97 f9       	bld	r25, 7
   1b078:	08 95       	ret

0001b07a <__mulsi3>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   1b07a:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   1b07c:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   1b07e:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   1b080:	0e 94 d9 d8 	call	0x1b1b2	; 0x1b1b2 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   1b084:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   1b086:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   1b088:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   1b08a:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   1b08c:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   1b08e:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   1b090:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   1b092:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   1b094:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   1b096:	11 24       	eor	r1, r1
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   1b098:	08 95       	ret

0001b09a <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   1b09a:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   1b09c:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   1b09e:	04 c0       	rjmp	.+8      	; 0x1b0a8 <__udivmodqi4_ep>

0001b0a0 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   1b0a0:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   1b0a2:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   1b0a4:	08 f0       	brcs	.+2      	; 0x1b0a8 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   1b0a6:	96 1b       	sub	r25, r22

0001b0a8 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   1b0a8:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   1b0aa:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   1b0ac:	c9 f7       	brne	.-14     	; 0x1b0a0 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   1b0ae:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   1b0b0:	08 95       	ret

0001b0b2 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   1b0b2:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   1b0b4:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   1b0b6:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   1b0b8:	07 c0       	rjmp	.+14     	; 0x1b0c8 <__udivmodhi4_ep>

0001b0ba <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   1b0ba:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   1b0bc:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   1b0be:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   1b0c0:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   1b0c2:	10 f0       	brcs	.+4      	; 0x1b0c8 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   1b0c4:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   1b0c6:	b7 0b       	sbc	r27, r23

0001b0c8 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   1b0c8:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   1b0ca:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   1b0cc:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   1b0ce:	a9 f7       	brne	.-22     	; 0x1b0ba <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   1b0d0:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   1b0d2:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   1b0d4:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   1b0d6:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   1b0d8:	08 95       	ret

0001b0da <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   1b0da:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   1b0dc:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   1b0de:	16 f4       	brtc	.+4      	; 0x1b0e4 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   1b0e0:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   1b0e2:	07 d0       	rcall	.+14     	; 0x1b0f2 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   1b0e4:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   1b0e6:	09 d0       	rcall	.+18     	; 0x1b0fa <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   1b0e8:	0e 94 59 d8 	call	0x1b0b2	; 0x1b0b2 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   1b0ec:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   1b0ee:	05 d0       	rcall	.+10     	; 0x1b0fa <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   1b0f0:	3e f4       	brtc	.+14     	; 0x1b100 <__divmodhi4_exit>

0001b0f2 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   1b0f2:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   1b0f4:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   1b0f6:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   1b0f8:	08 95       	ret

0001b0fa <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   1b0fa:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   1b0fc:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   1b0fe:	7f 4f       	sbci	r23, 0xFF	; 255

0001b100 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   1b100:	08 95       	ret

0001b102 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   1b102:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   1b104:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   1b106:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   1b108:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   1b10a:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   1b10c:	0d c0       	rjmp	.+26     	; 0x1b128 <__udivmodsi4_ep>

0001b10e <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   1b10e:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   1b110:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   1b112:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   1b114:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   1b116:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   1b118:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   1b11a:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   1b11c:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   1b11e:	20 f0       	brcs	.+8      	; 0x1b128 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   1b120:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   1b122:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   1b124:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   1b126:	f5 0b       	sbc	r31, r21

0001b128 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   1b128:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   1b12a:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   1b12c:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   1b12e:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   1b130:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   1b132:	69 f7       	brne	.-38     	; 0x1b10e <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   1b134:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   1b136:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   1b138:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   1b13a:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   1b13c:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   1b13e:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   1b140:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   1b142:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   1b144:	08 95       	ret

0001b146 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   1b146:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   1b148:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   1b14a:	1e f4       	brtc	.+6      	; 0x1b152 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   1b14c:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   1b14e:	0e 94 ba d8 	call	0x1b174	; 0x1b174 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   1b152:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   1b154:	07 d0       	rcall	.+14     	; 0x1b164 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   1b156:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   1b15a:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   1b15c:	03 d0       	rcall	.+6      	; 0x1b164 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   1b15e:	4e f4       	brtc	.+18     	; 0x1b172 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   1b160:	0c 94 ba d8 	jmp	0x1b174	; 0x1b174 <__negsi2>

0001b164 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   1b164:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   1b166:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   1b168:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   1b16a:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   1b16c:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   1b16e:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   1b170:	5f 4f       	sbci	r21, 0xFF	; 255

0001b172 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   1b172:	08 95       	ret

0001b174 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   1b174:	90 95       	com	r25
   1b176:	80 95       	com	r24
   1b178:	70 95       	com	r23
   1b17a:	61 95       	neg	r22
   1b17c:	7f 4f       	sbci	r23, 0xFF	; 255
   1b17e:	8f 4f       	sbci	r24, 0xFF	; 255
   1b180:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   1b182:	08 95       	ret

0001b184 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   1b184:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   1b186:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   1b188:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   1b18a:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   1b18c:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   1b18e:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   1b190:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   1b192:	19 94       	eijmp

0001b194 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   1b194:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   1b196:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   1b198:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   1b19a:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   1b19c:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   1b19e:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   1b1a0:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   1b1a2:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   1b1a4:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   1b1a6:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   1b1a8:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   1b1aa:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   1b1ac:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   1b1ae:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   1b1b0:	08 95       	ret

0001b1b2 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   1b1b2:	0e 94 ca d8 	call	0x1b194	; 0x1b194 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   1b1b6:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   1b1b8:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   1b1ba:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   1b1bc:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   1b1be:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   1b1c0:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   1b1c2:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   1b1c4:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   1b1c6:	08 95       	ret

0001b1c8 <dtostrf>:
dtostrf():
   1b1c8:	ef 92       	push	r14
   1b1ca:	0f 93       	push	r16
   1b1cc:	1f 93       	push	r17
   1b1ce:	cf 93       	push	r28
   1b1d0:	df 93       	push	r29
   1b1d2:	e8 01       	movw	r28, r16
   1b1d4:	34 e0       	ldi	r19, 0x04	; 4
   1b1d6:	47 fd       	sbrc	r20, 7
   1b1d8:	34 e1       	ldi	r19, 0x14	; 20
   1b1da:	04 2e       	mov	r0, r20
   1b1dc:	00 0c       	add	r0, r0
   1b1de:	55 0b       	sbc	r21, r21
   1b1e0:	57 ff       	sbrs	r21, 7
   1b1e2:	03 c0       	rjmp	.+6      	; 0x1b1ea <dtostrf+0x22>
   1b1e4:	51 95       	neg	r21
   1b1e6:	41 95       	neg	r20
   1b1e8:	51 09       	sbc	r21, r1
   1b1ea:	e3 2e       	mov	r14, r19
   1b1ec:	02 2f       	mov	r16, r18
   1b1ee:	24 2f       	mov	r18, r20
   1b1f0:	ae 01       	movw	r20, r28
   1b1f2:	0e 94 fb df 	call	0x1bff6	; 0x1bff6 <dtoa_prf>
   1b1f6:	ce 01       	movw	r24, r28
   1b1f8:	df 91       	pop	r29
   1b1fa:	cf 91       	pop	r28
   1b1fc:	1f 91       	pop	r17
   1b1fe:	0f 91       	pop	r16
   1b200:	ef 90       	pop	r14
   1b202:	08 95       	ret

0001b204 <malloc>:
malloc():
   1b204:	0f 93       	push	r16
   1b206:	1f 93       	push	r17
   1b208:	cf 93       	push	r28
   1b20a:	df 93       	push	r29
   1b20c:	82 30       	cpi	r24, 0x02	; 2
   1b20e:	91 05       	cpc	r25, r1
   1b210:	10 f4       	brcc	.+4      	; 0x1b216 <malloc+0x12>
   1b212:	82 e0       	ldi	r24, 0x02	; 2
   1b214:	90 e0       	ldi	r25, 0x00	; 0
   1b216:	e0 91 ae 12 	lds	r30, 0x12AE	; 0x8012ae <__flp>
   1b21a:	f0 91 af 12 	lds	r31, 0x12AF	; 0x8012af <__flp+0x1>
   1b21e:	30 e0       	ldi	r19, 0x00	; 0
   1b220:	20 e0       	ldi	r18, 0x00	; 0
   1b222:	b0 e0       	ldi	r27, 0x00	; 0
   1b224:	a0 e0       	ldi	r26, 0x00	; 0
   1b226:	30 97       	sbiw	r30, 0x00	; 0
   1b228:	99 f4       	brne	.+38     	; 0x1b250 <malloc+0x4c>
   1b22a:	21 15       	cp	r18, r1
   1b22c:	31 05       	cpc	r19, r1
   1b22e:	09 f4       	brne	.+2      	; 0x1b232 <malloc+0x2e>
   1b230:	4a c0       	rjmp	.+148    	; 0x1b2c6 <malloc+0xc2>
   1b232:	28 1b       	sub	r18, r24
   1b234:	39 0b       	sbc	r19, r25
   1b236:	24 30       	cpi	r18, 0x04	; 4
   1b238:	31 05       	cpc	r19, r1
   1b23a:	d8 f5       	brcc	.+118    	; 0x1b2b2 <malloc+0xae>
   1b23c:	8a 81       	ldd	r24, Y+2	; 0x02
   1b23e:	9b 81       	ldd	r25, Y+3	; 0x03
   1b240:	61 15       	cp	r22, r1
   1b242:	71 05       	cpc	r23, r1
   1b244:	89 f1       	breq	.+98     	; 0x1b2a8 <malloc+0xa4>
   1b246:	fb 01       	movw	r30, r22
   1b248:	93 83       	std	Z+3, r25	; 0x03
   1b24a:	82 83       	std	Z+2, r24	; 0x02
   1b24c:	fe 01       	movw	r30, r28
   1b24e:	11 c0       	rjmp	.+34     	; 0x1b272 <malloc+0x6e>
   1b250:	40 81       	ld	r20, Z
   1b252:	51 81       	ldd	r21, Z+1	; 0x01
   1b254:	02 81       	ldd	r16, Z+2	; 0x02
   1b256:	13 81       	ldd	r17, Z+3	; 0x03
   1b258:	48 17       	cp	r20, r24
   1b25a:	59 07       	cpc	r21, r25
   1b25c:	e0 f0       	brcs	.+56     	; 0x1b296 <malloc+0x92>
   1b25e:	48 17       	cp	r20, r24
   1b260:	59 07       	cpc	r21, r25
   1b262:	99 f4       	brne	.+38     	; 0x1b28a <malloc+0x86>
   1b264:	10 97       	sbiw	r26, 0x00	; 0
   1b266:	61 f0       	breq	.+24     	; 0x1b280 <malloc+0x7c>
   1b268:	12 96       	adiw	r26, 0x02	; 2
   1b26a:	0c 93       	st	X, r16
   1b26c:	12 97       	sbiw	r26, 0x02	; 2
   1b26e:	13 96       	adiw	r26, 0x03	; 3
   1b270:	1c 93       	st	X, r17
   1b272:	32 96       	adiw	r30, 0x02	; 2
   1b274:	cf 01       	movw	r24, r30
   1b276:	df 91       	pop	r29
   1b278:	cf 91       	pop	r28
   1b27a:	1f 91       	pop	r17
   1b27c:	0f 91       	pop	r16
   1b27e:	08 95       	ret
   1b280:	00 93 ae 12 	sts	0x12AE, r16	; 0x8012ae <__flp>
   1b284:	10 93 af 12 	sts	0x12AF, r17	; 0x8012af <__flp+0x1>
   1b288:	f4 cf       	rjmp	.-24     	; 0x1b272 <malloc+0x6e>
   1b28a:	21 15       	cp	r18, r1
   1b28c:	31 05       	cpc	r19, r1
   1b28e:	51 f0       	breq	.+20     	; 0x1b2a4 <malloc+0xa0>
   1b290:	42 17       	cp	r20, r18
   1b292:	53 07       	cpc	r21, r19
   1b294:	38 f0       	brcs	.+14     	; 0x1b2a4 <malloc+0xa0>
   1b296:	a9 01       	movw	r20, r18
   1b298:	db 01       	movw	r26, r22
   1b29a:	9a 01       	movw	r18, r20
   1b29c:	bd 01       	movw	r22, r26
   1b29e:	df 01       	movw	r26, r30
   1b2a0:	f8 01       	movw	r30, r16
   1b2a2:	c1 cf       	rjmp	.-126    	; 0x1b226 <malloc+0x22>
   1b2a4:	ef 01       	movw	r28, r30
   1b2a6:	f9 cf       	rjmp	.-14     	; 0x1b29a <malloc+0x96>
   1b2a8:	90 93 af 12 	sts	0x12AF, r25	; 0x8012af <__flp+0x1>
   1b2ac:	80 93 ae 12 	sts	0x12AE, r24	; 0x8012ae <__flp>
   1b2b0:	cd cf       	rjmp	.-102    	; 0x1b24c <malloc+0x48>
   1b2b2:	fe 01       	movw	r30, r28
   1b2b4:	e2 0f       	add	r30, r18
   1b2b6:	f3 1f       	adc	r31, r19
   1b2b8:	81 93       	st	Z+, r24
   1b2ba:	91 93       	st	Z+, r25
   1b2bc:	22 50       	subi	r18, 0x02	; 2
   1b2be:	31 09       	sbc	r19, r1
   1b2c0:	39 83       	std	Y+1, r19	; 0x01
   1b2c2:	28 83       	st	Y, r18
   1b2c4:	d7 cf       	rjmp	.-82     	; 0x1b274 <malloc+0x70>
   1b2c6:	20 91 ac 12 	lds	r18, 0x12AC	; 0x8012ac <__brkval>
   1b2ca:	30 91 ad 12 	lds	r19, 0x12AD	; 0x8012ad <__brkval+0x1>
   1b2ce:	23 2b       	or	r18, r19
   1b2d0:	41 f4       	brne	.+16     	; 0x1b2e2 <malloc+0xde>
   1b2d2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
   1b2d6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
   1b2da:	30 93 ad 12 	sts	0x12AD, r19	; 0x8012ad <__brkval+0x1>
   1b2de:	20 93 ac 12 	sts	0x12AC, r18	; 0x8012ac <__brkval>
   1b2e2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   1b2e6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   1b2ea:	21 15       	cp	r18, r1
   1b2ec:	31 05       	cpc	r19, r1
   1b2ee:	41 f4       	brne	.+16     	; 0x1b300 <malloc+0xfc>
   1b2f0:	2d b7       	in	r18, 0x3d	; 61
   1b2f2:	3e b7       	in	r19, 0x3e	; 62
   1b2f4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   1b2f8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   1b2fc:	24 1b       	sub	r18, r20
   1b2fe:	35 0b       	sbc	r19, r21
   1b300:	e0 91 ac 12 	lds	r30, 0x12AC	; 0x8012ac <__brkval>
   1b304:	f0 91 ad 12 	lds	r31, 0x12AD	; 0x8012ad <__brkval+0x1>
   1b308:	e2 17       	cp	r30, r18
   1b30a:	f3 07       	cpc	r31, r19
   1b30c:	a0 f4       	brcc	.+40     	; 0x1b336 <malloc+0x132>
   1b30e:	2e 1b       	sub	r18, r30
   1b310:	3f 0b       	sbc	r19, r31
   1b312:	28 17       	cp	r18, r24
   1b314:	39 07       	cpc	r19, r25
   1b316:	78 f0       	brcs	.+30     	; 0x1b336 <malloc+0x132>
   1b318:	ac 01       	movw	r20, r24
   1b31a:	4e 5f       	subi	r20, 0xFE	; 254
   1b31c:	5f 4f       	sbci	r21, 0xFF	; 255
   1b31e:	24 17       	cp	r18, r20
   1b320:	35 07       	cpc	r19, r21
   1b322:	48 f0       	brcs	.+18     	; 0x1b336 <malloc+0x132>
   1b324:	4e 0f       	add	r20, r30
   1b326:	5f 1f       	adc	r21, r31
   1b328:	50 93 ad 12 	sts	0x12AD, r21	; 0x8012ad <__brkval+0x1>
   1b32c:	40 93 ac 12 	sts	0x12AC, r20	; 0x8012ac <__brkval>
   1b330:	81 93       	st	Z+, r24
   1b332:	91 93       	st	Z+, r25
   1b334:	9f cf       	rjmp	.-194    	; 0x1b274 <malloc+0x70>
   1b336:	f0 e0       	ldi	r31, 0x00	; 0
   1b338:	e0 e0       	ldi	r30, 0x00	; 0
   1b33a:	9c cf       	rjmp	.-200    	; 0x1b274 <malloc+0x70>

0001b33c <free>:
free():
   1b33c:	cf 93       	push	r28
   1b33e:	df 93       	push	r29
   1b340:	00 97       	sbiw	r24, 0x00	; 0
   1b342:	e9 f0       	breq	.+58     	; 0x1b37e <free+0x42>
   1b344:	fc 01       	movw	r30, r24
   1b346:	32 97       	sbiw	r30, 0x02	; 2
   1b348:	13 82       	std	Z+3, r1	; 0x03
   1b34a:	12 82       	std	Z+2, r1	; 0x02
   1b34c:	a0 91 ae 12 	lds	r26, 0x12AE	; 0x8012ae <__flp>
   1b350:	b0 91 af 12 	lds	r27, 0x12AF	; 0x8012af <__flp+0x1>
   1b354:	ed 01       	movw	r28, r26
   1b356:	30 e0       	ldi	r19, 0x00	; 0
   1b358:	20 e0       	ldi	r18, 0x00	; 0
   1b35a:	10 97       	sbiw	r26, 0x00	; 0
   1b35c:	a1 f4       	brne	.+40     	; 0x1b386 <free+0x4a>
   1b35e:	20 81       	ld	r18, Z
   1b360:	31 81       	ldd	r19, Z+1	; 0x01
   1b362:	82 0f       	add	r24, r18
   1b364:	93 1f       	adc	r25, r19
   1b366:	20 91 ac 12 	lds	r18, 0x12AC	; 0x8012ac <__brkval>
   1b36a:	30 91 ad 12 	lds	r19, 0x12AD	; 0x8012ad <__brkval+0x1>
   1b36e:	28 17       	cp	r18, r24
   1b370:	39 07       	cpc	r19, r25
   1b372:	09 f0       	breq	.+2      	; 0x1b376 <free+0x3a>
   1b374:	61 c0       	rjmp	.+194    	; 0x1b438 <free+0xfc>
   1b376:	f0 93 ad 12 	sts	0x12AD, r31	; 0x8012ad <__brkval+0x1>
   1b37a:	e0 93 ac 12 	sts	0x12AC, r30	; 0x8012ac <__brkval>
   1b37e:	df 91       	pop	r29
   1b380:	cf 91       	pop	r28
   1b382:	08 95       	ret
   1b384:	ea 01       	movw	r28, r20
   1b386:	ce 17       	cp	r28, r30
   1b388:	df 07       	cpc	r29, r31
   1b38a:	e8 f5       	brcc	.+122    	; 0x1b406 <free+0xca>
   1b38c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b38e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b390:	9e 01       	movw	r18, r28
   1b392:	41 15       	cp	r20, r1
   1b394:	51 05       	cpc	r21, r1
   1b396:	b1 f7       	brne	.-20     	; 0x1b384 <free+0x48>
   1b398:	e9 01       	movw	r28, r18
   1b39a:	fb 83       	std	Y+3, r31	; 0x03
   1b39c:	ea 83       	std	Y+2, r30	; 0x02
   1b39e:	49 91       	ld	r20, Y+
   1b3a0:	59 91       	ld	r21, Y+
   1b3a2:	c4 0f       	add	r28, r20
   1b3a4:	d5 1f       	adc	r29, r21
   1b3a6:	ec 17       	cp	r30, r28
   1b3a8:	fd 07       	cpc	r31, r29
   1b3aa:	61 f4       	brne	.+24     	; 0x1b3c4 <free+0x88>
   1b3ac:	80 81       	ld	r24, Z
   1b3ae:	91 81       	ldd	r25, Z+1	; 0x01
   1b3b0:	02 96       	adiw	r24, 0x02	; 2
   1b3b2:	84 0f       	add	r24, r20
   1b3b4:	95 1f       	adc	r25, r21
   1b3b6:	e9 01       	movw	r28, r18
   1b3b8:	99 83       	std	Y+1, r25	; 0x01
   1b3ba:	88 83       	st	Y, r24
   1b3bc:	82 81       	ldd	r24, Z+2	; 0x02
   1b3be:	93 81       	ldd	r25, Z+3	; 0x03
   1b3c0:	9b 83       	std	Y+3, r25	; 0x03
   1b3c2:	8a 83       	std	Y+2, r24	; 0x02
   1b3c4:	f0 e0       	ldi	r31, 0x00	; 0
   1b3c6:	e0 e0       	ldi	r30, 0x00	; 0
   1b3c8:	12 96       	adiw	r26, 0x02	; 2
   1b3ca:	8d 91       	ld	r24, X+
   1b3cc:	9c 91       	ld	r25, X
   1b3ce:	13 97       	sbiw	r26, 0x03	; 3
   1b3d0:	00 97       	sbiw	r24, 0x00	; 0
   1b3d2:	b9 f5       	brne	.+110    	; 0x1b442 <free+0x106>
   1b3d4:	2d 91       	ld	r18, X+
   1b3d6:	3c 91       	ld	r19, X
   1b3d8:	11 97       	sbiw	r26, 0x01	; 1
   1b3da:	cd 01       	movw	r24, r26
   1b3dc:	02 96       	adiw	r24, 0x02	; 2
   1b3de:	82 0f       	add	r24, r18
   1b3e0:	93 1f       	adc	r25, r19
   1b3e2:	20 91 ac 12 	lds	r18, 0x12AC	; 0x8012ac <__brkval>
   1b3e6:	30 91 ad 12 	lds	r19, 0x12AD	; 0x8012ad <__brkval+0x1>
   1b3ea:	28 17       	cp	r18, r24
   1b3ec:	39 07       	cpc	r19, r25
   1b3ee:	39 f6       	brne	.-114    	; 0x1b37e <free+0x42>
   1b3f0:	30 97       	sbiw	r30, 0x00	; 0
   1b3f2:	51 f5       	brne	.+84     	; 0x1b448 <free+0x10c>
   1b3f4:	10 92 af 12 	sts	0x12AF, r1	; 0x8012af <__flp+0x1>
   1b3f8:	10 92 ae 12 	sts	0x12AE, r1	; 0x8012ae <__flp>
   1b3fc:	b0 93 ad 12 	sts	0x12AD, r27	; 0x8012ad <__brkval+0x1>
   1b400:	a0 93 ac 12 	sts	0x12AC, r26	; 0x8012ac <__brkval>
   1b404:	bc cf       	rjmp	.-136    	; 0x1b37e <free+0x42>
   1b406:	d3 83       	std	Z+3, r29	; 0x03
   1b408:	c2 83       	std	Z+2, r28	; 0x02
   1b40a:	40 81       	ld	r20, Z
   1b40c:	51 81       	ldd	r21, Z+1	; 0x01
   1b40e:	84 0f       	add	r24, r20
   1b410:	95 1f       	adc	r25, r21
   1b412:	c8 17       	cp	r28, r24
   1b414:	d9 07       	cpc	r29, r25
   1b416:	61 f4       	brne	.+24     	; 0x1b430 <free+0xf4>
   1b418:	4e 5f       	subi	r20, 0xFE	; 254
   1b41a:	5f 4f       	sbci	r21, 0xFF	; 255
   1b41c:	88 81       	ld	r24, Y
   1b41e:	99 81       	ldd	r25, Y+1	; 0x01
   1b420:	48 0f       	add	r20, r24
   1b422:	59 1f       	adc	r21, r25
   1b424:	51 83       	std	Z+1, r21	; 0x01
   1b426:	40 83       	st	Z, r20
   1b428:	8a 81       	ldd	r24, Y+2	; 0x02
   1b42a:	9b 81       	ldd	r25, Y+3	; 0x03
   1b42c:	93 83       	std	Z+3, r25	; 0x03
   1b42e:	82 83       	std	Z+2, r24	; 0x02
   1b430:	21 15       	cp	r18, r1
   1b432:	31 05       	cpc	r19, r1
   1b434:	09 f0       	breq	.+2      	; 0x1b438 <free+0xfc>
   1b436:	b0 cf       	rjmp	.-160    	; 0x1b398 <free+0x5c>
   1b438:	f0 93 af 12 	sts	0x12AF, r31	; 0x8012af <__flp+0x1>
   1b43c:	e0 93 ae 12 	sts	0x12AE, r30	; 0x8012ae <__flp>
   1b440:	9e cf       	rjmp	.-196    	; 0x1b37e <free+0x42>
   1b442:	fd 01       	movw	r30, r26
   1b444:	dc 01       	movw	r26, r24
   1b446:	c0 cf       	rjmp	.-128    	; 0x1b3c8 <free+0x8c>
   1b448:	13 82       	std	Z+3, r1	; 0x03
   1b44a:	12 82       	std	Z+2, r1	; 0x02
   1b44c:	d7 cf       	rjmp	.-82     	; 0x1b3fc <free+0xc0>

0001b44e <realloc>:
realloc():
   1b44e:	4f 92       	push	r4
   1b450:	5f 92       	push	r5
   1b452:	6f 92       	push	r6
   1b454:	7f 92       	push	r7
   1b456:	8f 92       	push	r8
   1b458:	9f 92       	push	r9
   1b45a:	af 92       	push	r10
   1b45c:	bf 92       	push	r11
   1b45e:	cf 92       	push	r12
   1b460:	df 92       	push	r13
   1b462:	ef 92       	push	r14
   1b464:	ff 92       	push	r15
   1b466:	0f 93       	push	r16
   1b468:	1f 93       	push	r17
   1b46a:	cf 93       	push	r28
   1b46c:	df 93       	push	r29
   1b46e:	8c 01       	movw	r16, r24
   1b470:	00 97       	sbiw	r24, 0x00	; 0
   1b472:	99 f4       	brne	.+38     	; 0x1b49a <realloc+0x4c>
   1b474:	cb 01       	movw	r24, r22
   1b476:	df 91       	pop	r29
   1b478:	cf 91       	pop	r28
   1b47a:	1f 91       	pop	r17
   1b47c:	0f 91       	pop	r16
   1b47e:	ff 90       	pop	r15
   1b480:	ef 90       	pop	r14
   1b482:	df 90       	pop	r13
   1b484:	cf 90       	pop	r12
   1b486:	bf 90       	pop	r11
   1b488:	af 90       	pop	r10
   1b48a:	9f 90       	pop	r9
   1b48c:	8f 90       	pop	r8
   1b48e:	7f 90       	pop	r7
   1b490:	6f 90       	pop	r6
   1b492:	5f 90       	pop	r5
   1b494:	4f 90       	pop	r4
   1b496:	0c 94 02 d9 	jmp	0x1b204	; 0x1b204 <malloc>
   1b49a:	fc 01       	movw	r30, r24
   1b49c:	e6 0f       	add	r30, r22
   1b49e:	f7 1f       	adc	r31, r23
   1b4a0:	9c 01       	movw	r18, r24
   1b4a2:	22 50       	subi	r18, 0x02	; 2
   1b4a4:	31 09       	sbc	r19, r1
   1b4a6:	e2 17       	cp	r30, r18
   1b4a8:	f3 07       	cpc	r31, r19
   1b4aa:	08 f4       	brcc	.+2      	; 0x1b4ae <realloc+0x60>
   1b4ac:	ae c0       	rjmp	.+348    	; 0x1b60a <realloc+0x1bc>
   1b4ae:	d9 01       	movw	r26, r18
   1b4b0:	cd 91       	ld	r28, X+
   1b4b2:	dc 91       	ld	r29, X
   1b4b4:	11 97       	sbiw	r26, 0x01	; 1
   1b4b6:	c6 17       	cp	r28, r22
   1b4b8:	d7 07       	cpc	r29, r23
   1b4ba:	20 f1       	brcs	.+72     	; 0x1b504 <realloc+0xb6>
   1b4bc:	c5 30       	cpi	r28, 0x05	; 5
   1b4be:	d1 05       	cpc	r29, r1
   1b4c0:	78 f0       	brcs	.+30     	; 0x1b4e0 <realloc+0x92>
   1b4c2:	ce 01       	movw	r24, r28
   1b4c4:	04 97       	sbiw	r24, 0x04	; 4
   1b4c6:	86 17       	cp	r24, r22
   1b4c8:	97 07       	cpc	r25, r23
   1b4ca:	50 f0       	brcs	.+20     	; 0x1b4e0 <realloc+0x92>
   1b4cc:	c6 1b       	sub	r28, r22
   1b4ce:	d7 0b       	sbc	r29, r23
   1b4d0:	22 97       	sbiw	r28, 0x02	; 2
   1b4d2:	c1 93       	st	Z+, r28
   1b4d4:	d1 93       	st	Z+, r29
   1b4d6:	6d 93       	st	X+, r22
   1b4d8:	7c 93       	st	X, r23
   1b4da:	cf 01       	movw	r24, r30
   1b4dc:	0e 94 9e d9 	call	0x1b33c	; 0x1b33c <free>
   1b4e0:	c8 01       	movw	r24, r16
   1b4e2:	df 91       	pop	r29
   1b4e4:	cf 91       	pop	r28
   1b4e6:	1f 91       	pop	r17
   1b4e8:	0f 91       	pop	r16
   1b4ea:	ff 90       	pop	r15
   1b4ec:	ef 90       	pop	r14
   1b4ee:	df 90       	pop	r13
   1b4f0:	cf 90       	pop	r12
   1b4f2:	bf 90       	pop	r11
   1b4f4:	af 90       	pop	r10
   1b4f6:	9f 90       	pop	r9
   1b4f8:	8f 90       	pop	r8
   1b4fa:	7f 90       	pop	r7
   1b4fc:	6f 90       	pop	r6
   1b4fe:	5f 90       	pop	r5
   1b500:	4f 90       	pop	r4
   1b502:	08 95       	ret
   1b504:	5b 01       	movw	r10, r22
   1b506:	ac 1a       	sub	r10, r28
   1b508:	bd 0a       	sbc	r11, r29
   1b50a:	4c 01       	movw	r8, r24
   1b50c:	8c 0e       	add	r8, r28
   1b50e:	9d 1e       	adc	r9, r29
   1b510:	a0 91 ae 12 	lds	r26, 0x12AE	; 0x8012ae <__flp>
   1b514:	b0 91 af 12 	lds	r27, 0x12AF	; 0x8012af <__flp+0x1>
   1b518:	51 2c       	mov	r5, r1
   1b51a:	41 2c       	mov	r4, r1
   1b51c:	f1 2c       	mov	r15, r1
   1b51e:	e1 2c       	mov	r14, r1
   1b520:	10 97       	sbiw	r26, 0x00	; 0
   1b522:	31 f5       	brne	.+76     	; 0x1b570 <realloc+0x122>
   1b524:	80 91 ac 12 	lds	r24, 0x12AC	; 0x8012ac <__brkval>
   1b528:	90 91 ad 12 	lds	r25, 0x12AD	; 0x8012ad <__brkval+0x1>
   1b52c:	88 15       	cp	r24, r8
   1b52e:	99 05       	cpc	r25, r9
   1b530:	09 f0       	breq	.+2      	; 0x1b534 <realloc+0xe6>
   1b532:	5c c0       	rjmp	.+184    	; 0x1b5ec <realloc+0x19e>
   1b534:	46 16       	cp	r4, r22
   1b536:	57 06       	cpc	r5, r23
   1b538:	08 f0       	brcs	.+2      	; 0x1b53c <realloc+0xee>
   1b53a:	58 c0       	rjmp	.+176    	; 0x1b5ec <realloc+0x19e>
   1b53c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   1b540:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   1b544:	00 97       	sbiw	r24, 0x00	; 0
   1b546:	41 f4       	brne	.+16     	; 0x1b558 <realloc+0x10a>
   1b548:	8d b7       	in	r24, 0x3d	; 61
   1b54a:	9e b7       	in	r25, 0x3e	; 62
   1b54c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   1b550:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   1b554:	84 1b       	sub	r24, r20
   1b556:	95 0b       	sbc	r25, r21
   1b558:	e8 17       	cp	r30, r24
   1b55a:	f9 07       	cpc	r31, r25
   1b55c:	08 f0       	brcs	.+2      	; 0x1b560 <realloc+0x112>
   1b55e:	55 c0       	rjmp	.+170    	; 0x1b60a <realloc+0x1bc>
   1b560:	f0 93 ad 12 	sts	0x12AD, r31	; 0x8012ad <__brkval+0x1>
   1b564:	e0 93 ac 12 	sts	0x12AC, r30	; 0x8012ac <__brkval>
   1b568:	f9 01       	movw	r30, r18
   1b56a:	71 83       	std	Z+1, r23	; 0x01
   1b56c:	60 83       	st	Z, r22
   1b56e:	b8 cf       	rjmp	.-144    	; 0x1b4e0 <realloc+0x92>
   1b570:	8d 91       	ld	r24, X+
   1b572:	9c 91       	ld	r25, X
   1b574:	11 97       	sbiw	r26, 0x01	; 1
   1b576:	12 96       	adiw	r26, 0x02	; 2
   1b578:	6c 90       	ld	r6, X
   1b57a:	12 97       	sbiw	r26, 0x02	; 2
   1b57c:	13 96       	adiw	r26, 0x03	; 3
   1b57e:	7c 90       	ld	r7, X
   1b580:	13 97       	sbiw	r26, 0x03	; 3
   1b582:	a8 15       	cp	r26, r8
   1b584:	b9 05       	cpc	r27, r9
   1b586:	59 f5       	brne	.+86     	; 0x1b5de <realloc+0x190>
   1b588:	6c 01       	movw	r12, r24
   1b58a:	42 e0       	ldi	r20, 0x02	; 2
   1b58c:	c4 0e       	add	r12, r20
   1b58e:	d1 1c       	adc	r13, r1
   1b590:	ca 14       	cp	r12, r10
   1b592:	db 04       	cpc	r13, r11
   1b594:	20 f1       	brcs	.+72     	; 0x1b5de <realloc+0x190>
   1b596:	ac 01       	movw	r20, r24
   1b598:	4a 19       	sub	r20, r10
   1b59a:	5b 09       	sbc	r21, r11
   1b59c:	da 01       	movw	r26, r20
   1b59e:	12 96       	adiw	r26, 0x02	; 2
   1b5a0:	15 97       	sbiw	r26, 0x05	; 5
   1b5a2:	80 f0       	brcs	.+32     	; 0x1b5c4 <realloc+0x176>
   1b5a4:	62 82       	std	Z+2, r6	; 0x02
   1b5a6:	73 82       	std	Z+3, r7	; 0x03
   1b5a8:	51 83       	std	Z+1, r21	; 0x01
   1b5aa:	40 83       	st	Z, r20
   1b5ac:	d9 01       	movw	r26, r18
   1b5ae:	6d 93       	st	X+, r22
   1b5b0:	7c 93       	st	X, r23
   1b5b2:	e1 14       	cp	r14, r1
   1b5b4:	f1 04       	cpc	r15, r1
   1b5b6:	71 f0       	breq	.+28     	; 0x1b5d4 <realloc+0x186>
   1b5b8:	d7 01       	movw	r26, r14
   1b5ba:	13 96       	adiw	r26, 0x03	; 3
   1b5bc:	fc 93       	st	X, r31
   1b5be:	ee 93       	st	-X, r30
   1b5c0:	12 97       	sbiw	r26, 0x02	; 2
   1b5c2:	8e cf       	rjmp	.-228    	; 0x1b4e0 <realloc+0x92>
   1b5c4:	22 96       	adiw	r28, 0x02	; 2
   1b5c6:	8c 0f       	add	r24, r28
   1b5c8:	9d 1f       	adc	r25, r29
   1b5ca:	f9 01       	movw	r30, r18
   1b5cc:	91 83       	std	Z+1, r25	; 0x01
   1b5ce:	80 83       	st	Z, r24
   1b5d0:	f3 01       	movw	r30, r6
   1b5d2:	ef cf       	rjmp	.-34     	; 0x1b5b2 <realloc+0x164>
   1b5d4:	f0 93 af 12 	sts	0x12AF, r31	; 0x8012af <__flp+0x1>
   1b5d8:	e0 93 ae 12 	sts	0x12AE, r30	; 0x8012ae <__flp>
   1b5dc:	81 cf       	rjmp	.-254    	; 0x1b4e0 <realloc+0x92>
   1b5de:	48 16       	cp	r4, r24
   1b5e0:	59 06       	cpc	r5, r25
   1b5e2:	08 f4       	brcc	.+2      	; 0x1b5e6 <realloc+0x198>
   1b5e4:	2c 01       	movw	r4, r24
   1b5e6:	7d 01       	movw	r14, r26
   1b5e8:	d3 01       	movw	r26, r6
   1b5ea:	9a cf       	rjmp	.-204    	; 0x1b520 <realloc+0xd2>
   1b5ec:	cb 01       	movw	r24, r22
   1b5ee:	0e 94 02 d9 	call	0x1b204	; 0x1b204 <malloc>
   1b5f2:	7c 01       	movw	r14, r24
   1b5f4:	00 97       	sbiw	r24, 0x00	; 0
   1b5f6:	49 f0       	breq	.+18     	; 0x1b60a <realloc+0x1bc>
   1b5f8:	ae 01       	movw	r20, r28
   1b5fa:	b8 01       	movw	r22, r16
   1b5fc:	0e 94 51 dc 	call	0x1b8a2	; 0x1b8a2 <memcpy>
   1b600:	c8 01       	movw	r24, r16
   1b602:	0e 94 9e d9 	call	0x1b33c	; 0x1b33c <free>
   1b606:	87 01       	movw	r16, r14
   1b608:	6b cf       	rjmp	.-298    	; 0x1b4e0 <realloc+0x92>
   1b60a:	10 e0       	ldi	r17, 0x00	; 0
   1b60c:	00 e0       	ldi	r16, 0x00	; 0
   1b60e:	68 cf       	rjmp	.-304    	; 0x1b4e0 <realloc+0x92>

0001b610 <strtoul>:
strtoul():
   1b610:	3f 92       	push	r3
   1b612:	4f 92       	push	r4
   1b614:	5f 92       	push	r5
   1b616:	6f 92       	push	r6
   1b618:	7f 92       	push	r7
   1b61a:	8f 92       	push	r8
   1b61c:	9f 92       	push	r9
   1b61e:	af 92       	push	r10
   1b620:	bf 92       	push	r11
   1b622:	cf 92       	push	r12
   1b624:	df 92       	push	r13
   1b626:	ef 92       	push	r14
   1b628:	ff 92       	push	r15
   1b62a:	0f 93       	push	r16
   1b62c:	1f 93       	push	r17
   1b62e:	cf 93       	push	r28
   1b630:	df 93       	push	r29
   1b632:	5c 01       	movw	r10, r24
   1b634:	6b 01       	movw	r12, r22
   1b636:	7a 01       	movw	r14, r20
   1b638:	61 15       	cp	r22, r1
   1b63a:	71 05       	cpc	r23, r1
   1b63c:	19 f0       	breq	.+6      	; 0x1b644 <strtoul+0x34>
   1b63e:	fb 01       	movw	r30, r22
   1b640:	91 83       	std	Z+1, r25	; 0x01
   1b642:	80 83       	st	Z, r24
   1b644:	e1 14       	cp	r14, r1
   1b646:	f1 04       	cpc	r15, r1
   1b648:	49 f0       	breq	.+18     	; 0x1b65c <strtoul+0x4c>
   1b64a:	c7 01       	movw	r24, r14
   1b64c:	02 97       	sbiw	r24, 0x02	; 2
   1b64e:	83 97       	sbiw	r24, 0x23	; 35
   1b650:	28 f0       	brcs	.+10     	; 0x1b65c <strtoul+0x4c>
   1b652:	60 e0       	ldi	r22, 0x00	; 0
   1b654:	70 e0       	ldi	r23, 0x00	; 0
   1b656:	cb 01       	movw	r24, r22
   1b658:	9b c0       	rjmp	.+310    	; 0x1b790 <strtoul+0x180>
   1b65a:	5e 01       	movw	r10, r28
   1b65c:	e5 01       	movw	r28, r10
   1b65e:	21 96       	adiw	r28, 0x01	; 1
   1b660:	f5 01       	movw	r30, r10
   1b662:	10 81       	ld	r17, Z
   1b664:	81 2f       	mov	r24, r17
   1b666:	90 e0       	ldi	r25, 0x00	; 0
   1b668:	0e 94 32 dc 	call	0x1b864	; 0x1b864 <isspace>
   1b66c:	89 2b       	or	r24, r25
   1b66e:	a9 f7       	brne	.-22     	; 0x1b65a <strtoul+0x4a>
   1b670:	1d 32       	cpi	r17, 0x2D	; 45
   1b672:	09 f0       	breq	.+2      	; 0x1b676 <strtoul+0x66>
   1b674:	5c c0       	rjmp	.+184    	; 0x1b72e <strtoul+0x11e>
   1b676:	21 96       	adiw	r28, 0x01	; 1
   1b678:	f5 01       	movw	r30, r10
   1b67a:	11 81       	ldd	r17, Z+1	; 0x01
   1b67c:	01 e0       	ldi	r16, 0x01	; 1
   1b67e:	e1 14       	cp	r14, r1
   1b680:	f1 04       	cpc	r15, r1
   1b682:	09 f4       	brne	.+2      	; 0x1b686 <strtoul+0x76>
   1b684:	bb c0       	rjmp	.+374    	; 0x1b7fc <strtoul+0x1ec>
   1b686:	f0 e1       	ldi	r31, 0x10	; 16
   1b688:	ef 16       	cp	r14, r31
   1b68a:	f1 04       	cpc	r15, r1
   1b68c:	09 f0       	breq	.+2      	; 0x1b690 <strtoul+0x80>
   1b68e:	9b c0       	rjmp	.+310    	; 0x1b7c6 <strtoul+0x1b6>
   1b690:	10 33       	cpi	r17, 0x30	; 48
   1b692:	41 f4       	brne	.+16     	; 0x1b6a4 <strtoul+0x94>
   1b694:	88 81       	ld	r24, Y
   1b696:	8f 7d       	andi	r24, 0xDF	; 223
   1b698:	88 35       	cpi	r24, 0x58	; 88
   1b69a:	09 f0       	breq	.+2      	; 0x1b69e <strtoul+0x8e>
   1b69c:	8f c0       	rjmp	.+286    	; 0x1b7bc <strtoul+0x1ac>
   1b69e:	19 81       	ldd	r17, Y+1	; 0x01
   1b6a0:	22 96       	adiw	r28, 0x02	; 2
   1b6a2:	02 60       	ori	r16, 0x02	; 2
   1b6a4:	e0 e1       	ldi	r30, 0x10	; 16
   1b6a6:	ee 2e       	mov	r14, r30
   1b6a8:	f1 2c       	mov	r15, r1
   1b6aa:	88 24       	eor	r8, r8
   1b6ac:	8a 94       	dec	r8
   1b6ae:	98 2c       	mov	r9, r8
   1b6b0:	a8 2c       	mov	r10, r8
   1b6b2:	ff e0       	ldi	r31, 0x0F	; 15
   1b6b4:	bf 2e       	mov	r11, r31
   1b6b6:	20 e0       	ldi	r18, 0x00	; 0
   1b6b8:	60 e0       	ldi	r22, 0x00	; 0
   1b6ba:	70 e0       	ldi	r23, 0x00	; 0
   1b6bc:	cb 01       	movw	r24, r22
   1b6be:	27 01       	movw	r4, r14
   1b6c0:	0f 2c       	mov	r0, r15
   1b6c2:	00 0c       	add	r0, r0
   1b6c4:	66 08       	sbc	r6, r6
   1b6c6:	77 08       	sbc	r7, r7
   1b6c8:	fe 01       	movw	r30, r28
   1b6ca:	50 ed       	ldi	r21, 0xD0	; 208
   1b6cc:	35 2e       	mov	r3, r21
   1b6ce:	31 0e       	add	r3, r17
   1b6d0:	39 e0       	ldi	r19, 0x09	; 9
   1b6d2:	33 15       	cp	r19, r3
   1b6d4:	68 f4       	brcc	.+26     	; 0x1b6f0 <strtoul+0xe0>
   1b6d6:	3f eb       	ldi	r19, 0xBF	; 191
   1b6d8:	31 0f       	add	r19, r17
   1b6da:	49 ec       	ldi	r20, 0xC9	; 201
   1b6dc:	34 2e       	mov	r3, r20
   1b6de:	3a 31       	cpi	r19, 0x1A	; 26
   1b6e0:	30 f0       	brcs	.+12     	; 0x1b6ee <strtoul+0xde>
   1b6e2:	3f e9       	ldi	r19, 0x9F	; 159
   1b6e4:	31 0f       	add	r19, r17
   1b6e6:	3a 31       	cpi	r19, 0x1A	; 26
   1b6e8:	b0 f5       	brcc	.+108    	; 0x1b756 <strtoul+0x146>
   1b6ea:	39 ea       	ldi	r19, 0xA9	; 169
   1b6ec:	33 2e       	mov	r3, r19
   1b6ee:	31 0e       	add	r3, r17
   1b6f0:	3e 14       	cp	r3, r14
   1b6f2:	1f 04       	cpc	r1, r15
   1b6f4:	84 f5       	brge	.+96     	; 0x1b756 <strtoul+0x146>
   1b6f6:	2f 3f       	cpi	r18, 0xFF	; 255
   1b6f8:	b9 f0       	breq	.+46     	; 0x1b728 <strtoul+0x118>
   1b6fa:	86 16       	cp	r8, r22
   1b6fc:	97 06       	cpc	r9, r23
   1b6fe:	a8 06       	cpc	r10, r24
   1b700:	b9 06       	cpc	r11, r25
   1b702:	38 f1       	brcs	.+78     	; 0x1b752 <strtoul+0x142>
   1b704:	a3 01       	movw	r20, r6
   1b706:	92 01       	movw	r18, r4
   1b708:	0e 94 3d d8 	call	0x1b07a	; 0x1b07a <__mulsi3>
   1b70c:	23 2d       	mov	r18, r3
   1b70e:	30 e0       	ldi	r19, 0x00	; 0
   1b710:	50 e0       	ldi	r21, 0x00	; 0
   1b712:	40 e0       	ldi	r20, 0x00	; 0
   1b714:	62 0f       	add	r22, r18
   1b716:	73 1f       	adc	r23, r19
   1b718:	84 1f       	adc	r24, r20
   1b71a:	95 1f       	adc	r25, r21
   1b71c:	62 17       	cp	r22, r18
   1b71e:	73 07       	cpc	r23, r19
   1b720:	84 07       	cpc	r24, r20
   1b722:	95 07       	cpc	r25, r21
   1b724:	b0 f0       	brcs	.+44     	; 0x1b752 <strtoul+0x142>
   1b726:	21 e0       	ldi	r18, 0x01	; 1
   1b728:	21 96       	adiw	r28, 0x01	; 1
   1b72a:	10 81       	ld	r17, Z
   1b72c:	cd cf       	rjmp	.-102    	; 0x1b6c8 <strtoul+0xb8>
   1b72e:	1b 32       	cpi	r17, 0x2B	; 43
   1b730:	21 f4       	brne	.+8      	; 0x1b73a <strtoul+0x12a>
   1b732:	e5 01       	movw	r28, r10
   1b734:	22 96       	adiw	r28, 0x02	; 2
   1b736:	f5 01       	movw	r30, r10
   1b738:	11 81       	ldd	r17, Z+1	; 0x01
   1b73a:	00 e0       	ldi	r16, 0x00	; 0
   1b73c:	a0 cf       	rjmp	.-192    	; 0x1b67e <strtoul+0x6e>
   1b73e:	78 e0       	ldi	r23, 0x08	; 8
   1b740:	e7 2e       	mov	r14, r23
   1b742:	f1 2c       	mov	r15, r1
   1b744:	88 24       	eor	r8, r8
   1b746:	8a 94       	dec	r8
   1b748:	98 2c       	mov	r9, r8
   1b74a:	a8 2c       	mov	r10, r8
   1b74c:	6f e1       	ldi	r22, 0x1F	; 31
   1b74e:	b6 2e       	mov	r11, r22
   1b750:	b2 cf       	rjmp	.-156    	; 0x1b6b6 <strtoul+0xa6>
   1b752:	2f ef       	ldi	r18, 0xFF	; 255
   1b754:	e9 cf       	rjmp	.-46     	; 0x1b728 <strtoul+0x118>
   1b756:	c1 14       	cp	r12, r1
   1b758:	d1 04       	cpc	r13, r1
   1b75a:	31 f0       	breq	.+12     	; 0x1b768 <strtoul+0x158>
   1b75c:	22 23       	and	r18, r18
   1b75e:	51 f1       	breq	.+84     	; 0x1b7b4 <strtoul+0x1a4>
   1b760:	21 97       	sbiw	r28, 0x01	; 1
   1b762:	f6 01       	movw	r30, r12
   1b764:	d1 83       	std	Z+1, r29	; 0x01
   1b766:	c0 83       	st	Z, r28
   1b768:	00 ff       	sbrs	r16, 0
   1b76a:	07 c0       	rjmp	.+14     	; 0x1b77a <strtoul+0x16a>
   1b76c:	90 95       	com	r25
   1b76e:	80 95       	com	r24
   1b770:	70 95       	com	r23
   1b772:	61 95       	neg	r22
   1b774:	7f 4f       	sbci	r23, 0xFF	; 255
   1b776:	8f 4f       	sbci	r24, 0xFF	; 255
   1b778:	9f 4f       	sbci	r25, 0xFF	; 255
   1b77a:	2f 3f       	cpi	r18, 0xFF	; 255
   1b77c:	49 f4       	brne	.+18     	; 0x1b790 <strtoul+0x180>
   1b77e:	82 e2       	ldi	r24, 0x22	; 34
   1b780:	90 e0       	ldi	r25, 0x00	; 0
   1b782:	90 93 c7 12 	sts	0x12C7, r25	; 0x8012c7 <errno+0x1>
   1b786:	80 93 c6 12 	sts	0x12C6, r24	; 0x8012c6 <errno>
   1b78a:	6f ef       	ldi	r22, 0xFF	; 255
   1b78c:	7f ef       	ldi	r23, 0xFF	; 255
   1b78e:	cb 01       	movw	r24, r22
   1b790:	df 91       	pop	r29
   1b792:	cf 91       	pop	r28
   1b794:	1f 91       	pop	r17
   1b796:	0f 91       	pop	r16
   1b798:	ff 90       	pop	r15
   1b79a:	ef 90       	pop	r14
   1b79c:	df 90       	pop	r13
   1b79e:	cf 90       	pop	r12
   1b7a0:	bf 90       	pop	r11
   1b7a2:	af 90       	pop	r10
   1b7a4:	9f 90       	pop	r9
   1b7a6:	8f 90       	pop	r8
   1b7a8:	7f 90       	pop	r7
   1b7aa:	6f 90       	pop	r6
   1b7ac:	5f 90       	pop	r5
   1b7ae:	4f 90       	pop	r4
   1b7b0:	3f 90       	pop	r3
   1b7b2:	08 95       	ret
   1b7b4:	01 ff       	sbrs	r16, 1
   1b7b6:	d8 cf       	rjmp	.-80     	; 0x1b768 <strtoul+0x158>
   1b7b8:	22 97       	sbiw	r28, 0x02	; 2
   1b7ba:	d3 cf       	rjmp	.-90     	; 0x1b762 <strtoul+0x152>
   1b7bc:	10 e3       	ldi	r17, 0x30	; 48
   1b7be:	e1 14       	cp	r14, r1
   1b7c0:	f1 04       	cpc	r15, r1
   1b7c2:	09 f4       	brne	.+2      	; 0x1b7c6 <strtoul+0x1b6>
   1b7c4:	bc cf       	rjmp	.-136    	; 0x1b73e <strtoul+0x12e>
   1b7c6:	3a e0       	ldi	r19, 0x0A	; 10
   1b7c8:	e3 16       	cp	r14, r19
   1b7ca:	f1 04       	cpc	r15, r1
   1b7cc:	e9 f0       	breq	.+58     	; 0x1b808 <strtoul+0x1f8>
   1b7ce:	80 e1       	ldi	r24, 0x10	; 16
   1b7d0:	e8 16       	cp	r14, r24
   1b7d2:	f1 04       	cpc	r15, r1
   1b7d4:	09 f4       	brne	.+2      	; 0x1b7d8 <strtoul+0x1c8>
   1b7d6:	66 cf       	rjmp	.-308    	; 0x1b6a4 <strtoul+0x94>
   1b7d8:	e8 e0       	ldi	r30, 0x08	; 8
   1b7da:	ee 16       	cp	r14, r30
   1b7dc:	f1 04       	cpc	r15, r1
   1b7de:	09 f4       	brne	.+2      	; 0x1b7e2 <strtoul+0x1d2>
   1b7e0:	b1 cf       	rjmp	.-158    	; 0x1b744 <strtoul+0x134>
   1b7e2:	6f ef       	ldi	r22, 0xFF	; 255
   1b7e4:	7f ef       	ldi	r23, 0xFF	; 255
   1b7e6:	cb 01       	movw	r24, r22
   1b7e8:	97 01       	movw	r18, r14
   1b7ea:	0f 2c       	mov	r0, r15
   1b7ec:	00 0c       	add	r0, r0
   1b7ee:	44 0b       	sbc	r20, r20
   1b7f0:	55 0b       	sbc	r21, r21
   1b7f2:	0e 94 81 d8 	call	0x1b102	; 0x1b102 <__udivmodsi4>
   1b7f6:	49 01       	movw	r8, r18
   1b7f8:	5a 01       	movw	r10, r20
   1b7fa:	5d cf       	rjmp	.-326    	; 0x1b6b6 <strtoul+0xa6>
   1b7fc:	10 33       	cpi	r17, 0x30	; 48
   1b7fe:	09 f4       	brne	.+2      	; 0x1b802 <strtoul+0x1f2>
   1b800:	49 cf       	rjmp	.-366    	; 0x1b694 <strtoul+0x84>
   1b802:	9a e0       	ldi	r25, 0x0A	; 10
   1b804:	e9 2e       	mov	r14, r25
   1b806:	f1 2c       	mov	r15, r1
   1b808:	89 e9       	ldi	r24, 0x99	; 153
   1b80a:	88 2e       	mov	r8, r24
   1b80c:	98 2c       	mov	r9, r8
   1b80e:	a8 2c       	mov	r10, r8
   1b810:	89 e1       	ldi	r24, 0x19	; 25
   1b812:	b8 2e       	mov	r11, r24
   1b814:	50 cf       	rjmp	.-352    	; 0x1b6b6 <strtoul+0xa6>

0001b816 <abort>:
abort():
   1b816:	81 e0       	ldi	r24, 0x01	; 1
   1b818:	90 e0       	ldi	r25, 0x00	; 0
   1b81a:	f8 94       	cli
   1b81c:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <_exit>

0001b820 <atof>:
atof():
   1b820:	66 27       	eor	r22, r22
   1b822:	77 27       	eor	r23, r23
   1b824:	0c 94 74 e1 	jmp	0x1c2e8	; 0x1c2e8 <strtod>

0001b828 <atoi>:
atoi():
   1b828:	fc 01       	movw	r30, r24
   1b82a:	88 27       	eor	r24, r24
   1b82c:	99 27       	eor	r25, r25
   1b82e:	e8 94       	clt
   1b830:	21 91       	ld	r18, Z+
   1b832:	20 32       	cpi	r18, 0x20	; 32
   1b834:	e9 f3       	breq	.-6      	; 0x1b830 <atoi+0x8>
   1b836:	29 30       	cpi	r18, 0x09	; 9
   1b838:	10 f0       	brcs	.+4      	; 0x1b83e <atoi+0x16>
   1b83a:	2e 30       	cpi	r18, 0x0E	; 14
   1b83c:	c8 f3       	brcs	.-14     	; 0x1b830 <atoi+0x8>
   1b83e:	2b 32       	cpi	r18, 0x2B	; 43
   1b840:	41 f0       	breq	.+16     	; 0x1b852 <atoi+0x2a>
   1b842:	2d 32       	cpi	r18, 0x2D	; 45
   1b844:	39 f4       	brne	.+14     	; 0x1b854 <atoi+0x2c>
   1b846:	68 94       	set
   1b848:	04 c0       	rjmp	.+8      	; 0x1b852 <atoi+0x2a>
   1b84a:	0e 94 da dc 	call	0x1b9b4	; 0x1b9b4 <__mulhi_const_10>
   1b84e:	82 0f       	add	r24, r18
   1b850:	91 1d       	adc	r25, r1
   1b852:	21 91       	ld	r18, Z+
   1b854:	20 53       	subi	r18, 0x30	; 48
   1b856:	2a 30       	cpi	r18, 0x0A	; 10
   1b858:	c0 f3       	brcs	.-16     	; 0x1b84a <atoi+0x22>
   1b85a:	1e f4       	brtc	.+6      	; 0x1b862 <atoi+0x3a>
   1b85c:	90 95       	com	r25
   1b85e:	81 95       	neg	r24
   1b860:	9f 4f       	sbci	r25, 0xFF	; 255
   1b862:	08 95       	ret

0001b864 <isspace>:
isspace():
   1b864:	91 11       	cpse	r25, r1
   1b866:	0c 94 aa e3 	jmp	0x1c754	; 0x1c754 <__ctype_isfalse>
   1b86a:	80 32       	cpi	r24, 0x20	; 32
   1b86c:	19 f0       	breq	.+6      	; 0x1b874 <isspace+0x10>
   1b86e:	89 50       	subi	r24, 0x09	; 9
   1b870:	85 50       	subi	r24, 0x05	; 5
   1b872:	c8 f7       	brcc	.-14     	; 0x1b866 <isspace+0x2>
   1b874:	08 95       	ret

0001b876 <strcat_P>:
strcat_P():
   1b876:	fb 01       	movw	r30, r22
   1b878:	dc 01       	movw	r26, r24
   1b87a:	0d 90       	ld	r0, X+
   1b87c:	00 20       	and	r0, r0
   1b87e:	e9 f7       	brne	.-6      	; 0x1b87a <strcat_P+0x4>
   1b880:	11 97       	sbiw	r26, 0x01	; 1
   1b882:	05 90       	lpm	r0, Z+
   1b884:	0d 92       	st	X+, r0
   1b886:	00 20       	and	r0, r0
   1b888:	e1 f7       	brne	.-8      	; 0x1b882 <strcat_P+0xc>
   1b88a:	08 95       	ret

0001b88c <strcpy_P>:
strcpy_P():
   1b88c:	fb 01       	movw	r30, r22
   1b88e:	dc 01       	movw	r26, r24
   1b890:	05 90       	lpm	r0, Z+
   1b892:	0d 92       	st	X+, r0
   1b894:	00 20       	and	r0, r0
   1b896:	e1 f7       	brne	.-8      	; 0x1b890 <strcpy_P+0x4>
   1b898:	08 95       	ret

0001b89a <strtok>:
strtok():
   1b89a:	4e ed       	ldi	r20, 0xDE	; 222
   1b89c:	58 e0       	ldi	r21, 0x08	; 8
   1b89e:	0c 94 9d dc 	jmp	0x1b93a	; 0x1b93a <strtok_r>

0001b8a2 <memcpy>:
memcpy():
   1b8a2:	fb 01       	movw	r30, r22
   1b8a4:	dc 01       	movw	r26, r24
   1b8a6:	02 c0       	rjmp	.+4      	; 0x1b8ac <memcpy+0xa>
   1b8a8:	01 90       	ld	r0, Z+
   1b8aa:	0d 92       	st	X+, r0
   1b8ac:	41 50       	subi	r20, 0x01	; 1
   1b8ae:	50 40       	sbci	r21, 0x00	; 0
   1b8b0:	d8 f7       	brcc	.-10     	; 0x1b8a8 <memcpy+0x6>
   1b8b2:	08 95       	ret

0001b8b4 <strcat>:
strcat():
   1b8b4:	fb 01       	movw	r30, r22
   1b8b6:	dc 01       	movw	r26, r24
   1b8b8:	0d 90       	ld	r0, X+
   1b8ba:	00 20       	and	r0, r0
   1b8bc:	e9 f7       	brne	.-6      	; 0x1b8b8 <strcat+0x4>
   1b8be:	11 97       	sbiw	r26, 0x01	; 1
   1b8c0:	01 90       	ld	r0, Z+
   1b8c2:	0d 92       	st	X+, r0
   1b8c4:	00 20       	and	r0, r0
   1b8c6:	e1 f7       	brne	.-8      	; 0x1b8c0 <strcat+0xc>
   1b8c8:	08 95       	ret

0001b8ca <strchr>:
strchr():
   1b8ca:	fc 01       	movw	r30, r24
   1b8cc:	81 91       	ld	r24, Z+
   1b8ce:	86 17       	cp	r24, r22
   1b8d0:	21 f0       	breq	.+8      	; 0x1b8da <strchr+0x10>
   1b8d2:	88 23       	and	r24, r24
   1b8d4:	d9 f7       	brne	.-10     	; 0x1b8cc <strchr+0x2>
   1b8d6:	99 27       	eor	r25, r25
   1b8d8:	08 95       	ret
   1b8da:	31 97       	sbiw	r30, 0x01	; 1
   1b8dc:	cf 01       	movw	r24, r30
   1b8de:	08 95       	ret

0001b8e0 <strcmp>:
strcmp():
   1b8e0:	fb 01       	movw	r30, r22
   1b8e2:	dc 01       	movw	r26, r24
   1b8e4:	8d 91       	ld	r24, X+
   1b8e6:	01 90       	ld	r0, Z+
   1b8e8:	80 19       	sub	r24, r0
   1b8ea:	01 10       	cpse	r0, r1
   1b8ec:	d9 f3       	breq	.-10     	; 0x1b8e4 <strcmp+0x4>
   1b8ee:	99 0b       	sbc	r25, r25
   1b8f0:	08 95       	ret

0001b8f2 <strcpy>:
strcpy():
   1b8f2:	fb 01       	movw	r30, r22
   1b8f4:	dc 01       	movw	r26, r24
   1b8f6:	01 90       	ld	r0, Z+
   1b8f8:	0d 92       	st	X+, r0
   1b8fa:	00 20       	and	r0, r0
   1b8fc:	e1 f7       	brne	.-8      	; 0x1b8f6 <strcpy+0x4>
   1b8fe:	08 95       	ret

0001b900 <strncmp>:
strncmp():
   1b900:	fb 01       	movw	r30, r22
   1b902:	dc 01       	movw	r26, r24
   1b904:	41 50       	subi	r20, 0x01	; 1
   1b906:	50 40       	sbci	r21, 0x00	; 0
   1b908:	30 f0       	brcs	.+12     	; 0x1b916 <strncmp+0x16>
   1b90a:	8d 91       	ld	r24, X+
   1b90c:	01 90       	ld	r0, Z+
   1b90e:	80 19       	sub	r24, r0
   1b910:	19 f4       	brne	.+6      	; 0x1b918 <strncmp+0x18>
   1b912:	00 20       	and	r0, r0
   1b914:	b9 f7       	brne	.-18     	; 0x1b904 <strncmp+0x4>
   1b916:	88 1b       	sub	r24, r24
   1b918:	99 0b       	sbc	r25, r25
   1b91a:	08 95       	ret

0001b91c <strncpy>:
strncpy():
   1b91c:	fb 01       	movw	r30, r22
   1b91e:	dc 01       	movw	r26, r24
   1b920:	41 50       	subi	r20, 0x01	; 1
   1b922:	50 40       	sbci	r21, 0x00	; 0
   1b924:	48 f0       	brcs	.+18     	; 0x1b938 <strncpy+0x1c>
   1b926:	01 90       	ld	r0, Z+
   1b928:	0d 92       	st	X+, r0
   1b92a:	00 20       	and	r0, r0
   1b92c:	c9 f7       	brne	.-14     	; 0x1b920 <strncpy+0x4>
   1b92e:	01 c0       	rjmp	.+2      	; 0x1b932 <strncpy+0x16>
   1b930:	1d 92       	st	X+, r1
   1b932:	41 50       	subi	r20, 0x01	; 1
   1b934:	50 40       	sbci	r21, 0x00	; 0
   1b936:	e0 f7       	brcc	.-8      	; 0x1b930 <strncpy+0x14>
   1b938:	08 95       	ret

0001b93a <strtok_r>:
strtok_r():
   1b93a:	fa 01       	movw	r30, r20
   1b93c:	a1 91       	ld	r26, Z+
   1b93e:	b0 81       	ld	r27, Z
   1b940:	00 97       	sbiw	r24, 0x00	; 0
   1b942:	19 f4       	brne	.+6      	; 0x1b94a <strtok_r+0x10>
   1b944:	10 97       	sbiw	r26, 0x00	; 0
   1b946:	e1 f0       	breq	.+56     	; 0x1b980 <strtok_r+0x46>
   1b948:	cd 01       	movw	r24, r26
   1b94a:	dc 01       	movw	r26, r24
   1b94c:	cd 01       	movw	r24, r26
   1b94e:	0d 90       	ld	r0, X+
   1b950:	00 20       	and	r0, r0
   1b952:	11 f4       	brne	.+4      	; 0x1b958 <strtok_r+0x1e>
   1b954:	c0 01       	movw	r24, r0
   1b956:	13 c0       	rjmp	.+38     	; 0x1b97e <strtok_r+0x44>
   1b958:	fb 01       	movw	r30, r22
   1b95a:	21 91       	ld	r18, Z+
   1b95c:	22 23       	and	r18, r18
   1b95e:	19 f0       	breq	.+6      	; 0x1b966 <strtok_r+0x2c>
   1b960:	20 15       	cp	r18, r0
   1b962:	d9 f7       	brne	.-10     	; 0x1b95a <strtok_r+0x20>
   1b964:	f3 cf       	rjmp	.-26     	; 0x1b94c <strtok_r+0x12>
   1b966:	fb 01       	movw	r30, r22
   1b968:	21 91       	ld	r18, Z+
   1b96a:	20 15       	cp	r18, r0
   1b96c:	19 f4       	brne	.+6      	; 0x1b974 <strtok_r+0x3a>
   1b96e:	1e 92       	st	-X, r1
   1b970:	11 96       	adiw	r26, 0x01	; 1
   1b972:	06 c0       	rjmp	.+12     	; 0x1b980 <strtok_r+0x46>
   1b974:	22 23       	and	r18, r18
   1b976:	c1 f7       	brne	.-16     	; 0x1b968 <strtok_r+0x2e>
   1b978:	0d 90       	ld	r0, X+
   1b97a:	00 20       	and	r0, r0
   1b97c:	a1 f7       	brne	.-24     	; 0x1b966 <strtok_r+0x2c>
   1b97e:	d0 01       	movw	r26, r0
   1b980:	fa 01       	movw	r30, r20
   1b982:	a1 93       	st	Z+, r26
   1b984:	b0 83       	st	Z, r27
   1b986:	08 95       	ret

0001b988 <itoa>:
itoa():
   1b988:	45 32       	cpi	r20, 0x25	; 37
   1b98a:	51 05       	cpc	r21, r1
   1b98c:	20 f4       	brcc	.+8      	; 0x1b996 <itoa+0xe>
   1b98e:	42 30       	cpi	r20, 0x02	; 2
   1b990:	10 f0       	brcs	.+4      	; 0x1b996 <itoa+0xe>
   1b992:	0c 94 cf dc 	jmp	0x1b99e	; 0x1b99e <__itoa_ncheck>
   1b996:	fb 01       	movw	r30, r22
   1b998:	10 82       	st	Z, r1
   1b99a:	cb 01       	movw	r24, r22
   1b99c:	08 95       	ret

0001b99e <__itoa_ncheck>:
__itoa_ncheck():
   1b99e:	bb 27       	eor	r27, r27
   1b9a0:	4a 30       	cpi	r20, 0x0A	; 10
   1b9a2:	31 f4       	brne	.+12     	; 0x1b9b0 <__itoa_ncheck+0x12>
   1b9a4:	99 23       	and	r25, r25
   1b9a6:	22 f4       	brpl	.+8      	; 0x1b9b0 <__itoa_ncheck+0x12>
   1b9a8:	bd e2       	ldi	r27, 0x2D	; 45
   1b9aa:	90 95       	com	r25
   1b9ac:	81 95       	neg	r24
   1b9ae:	9f 4f       	sbci	r25, 0xFF	; 255
   1b9b0:	0c 94 e3 dc 	jmp	0x1b9c6	; 0x1b9c6 <__utoa_common>

0001b9b4 <__mulhi_const_10>:
__mulhi_const_10():
   1b9b4:	7a e0       	ldi	r23, 0x0A	; 10
   1b9b6:	97 9f       	mul	r25, r23
   1b9b8:	90 2d       	mov	r25, r0
   1b9ba:	87 9f       	mul	r24, r23
   1b9bc:	80 2d       	mov	r24, r0
   1b9be:	91 0d       	add	r25, r1
   1b9c0:	11 24       	eor	r1, r1
   1b9c2:	08 95       	ret

0001b9c4 <__utoa_ncheck>:
__utoa_ncheck():
   1b9c4:	bb 27       	eor	r27, r27

0001b9c6 <__utoa_common>:
   1b9c6:	fb 01       	movw	r30, r22
   1b9c8:	55 27       	eor	r21, r21
   1b9ca:	aa 27       	eor	r26, r26
   1b9cc:	88 0f       	add	r24, r24
   1b9ce:	99 1f       	adc	r25, r25
   1b9d0:	aa 1f       	adc	r26, r26
   1b9d2:	a4 17       	cp	r26, r20
   1b9d4:	10 f0       	brcs	.+4      	; 0x1b9da <__utoa_common+0x14>
   1b9d6:	a4 1b       	sub	r26, r20
   1b9d8:	83 95       	inc	r24
   1b9da:	50 51       	subi	r21, 0x10	; 16
   1b9dc:	b9 f7       	brne	.-18     	; 0x1b9cc <__utoa_common+0x6>
   1b9de:	a0 5d       	subi	r26, 0xD0	; 208
   1b9e0:	aa 33       	cpi	r26, 0x3A	; 58
   1b9e2:	08 f0       	brcs	.+2      	; 0x1b9e6 <__utoa_common+0x20>
   1b9e4:	a9 5d       	subi	r26, 0xD9	; 217
   1b9e6:	a1 93       	st	Z+, r26
   1b9e8:	00 97       	sbiw	r24, 0x00	; 0
   1b9ea:	79 f7       	brne	.-34     	; 0x1b9ca <__utoa_common+0x4>
   1b9ec:	b1 11       	cpse	r27, r1
   1b9ee:	b1 93       	st	Z+, r27
   1b9f0:	11 92       	st	Z+, r1
   1b9f2:	cb 01       	movw	r24, r22
   1b9f4:	0c 94 e2 e3 	jmp	0x1c7c4	; 0x1c7c4 <strrev>

0001b9f8 <fdevopen>:
fdevopen():
   1b9f8:	0f 93       	push	r16
   1b9fa:	1f 93       	push	r17
   1b9fc:	cf 93       	push	r28
   1b9fe:	df 93       	push	r29
   1ba00:	00 97       	sbiw	r24, 0x00	; 0
   1ba02:	59 f4       	brne	.+22     	; 0x1ba1a <fdevopen+0x22>
   1ba04:	61 15       	cp	r22, r1
   1ba06:	71 05       	cpc	r23, r1
   1ba08:	41 f4       	brne	.+16     	; 0x1ba1a <fdevopen+0x22>
   1ba0a:	f0 e0       	ldi	r31, 0x00	; 0
   1ba0c:	e0 e0       	ldi	r30, 0x00	; 0
   1ba0e:	cf 01       	movw	r24, r30
   1ba10:	df 91       	pop	r29
   1ba12:	cf 91       	pop	r28
   1ba14:	1f 91       	pop	r17
   1ba16:	0f 91       	pop	r16
   1ba18:	08 95       	ret
   1ba1a:	8b 01       	movw	r16, r22
   1ba1c:	ec 01       	movw	r28, r24
   1ba1e:	6e e0       	ldi	r22, 0x0E	; 14
   1ba20:	70 e0       	ldi	r23, 0x00	; 0
   1ba22:	81 e0       	ldi	r24, 0x01	; 1
   1ba24:	90 e0       	ldi	r25, 0x00	; 0
   1ba26:	0e 94 df df 	call	0x1bfbe	; 0x1bfbe <calloc>
   1ba2a:	fc 01       	movw	r30, r24
   1ba2c:	89 2b       	or	r24, r25
   1ba2e:	69 f3       	breq	.-38     	; 0x1ba0a <fdevopen+0x12>
   1ba30:	80 e8       	ldi	r24, 0x80	; 128
   1ba32:	83 83       	std	Z+3, r24	; 0x03
   1ba34:	01 15       	cp	r16, r1
   1ba36:	11 05       	cpc	r17, r1
   1ba38:	71 f0       	breq	.+28     	; 0x1ba56 <fdevopen+0x5e>
   1ba3a:	13 87       	std	Z+11, r17	; 0x0b
   1ba3c:	02 87       	std	Z+10, r16	; 0x0a
   1ba3e:	81 e8       	ldi	r24, 0x81	; 129
   1ba40:	83 83       	std	Z+3, r24	; 0x03
   1ba42:	80 91 b0 12 	lds	r24, 0x12B0	; 0x8012b0 <__iob>
   1ba46:	90 91 b1 12 	lds	r25, 0x12B1	; 0x8012b1 <__iob+0x1>
   1ba4a:	89 2b       	or	r24, r25
   1ba4c:	21 f4       	brne	.+8      	; 0x1ba56 <fdevopen+0x5e>
   1ba4e:	f0 93 b1 12 	sts	0x12B1, r31	; 0x8012b1 <__iob+0x1>
   1ba52:	e0 93 b0 12 	sts	0x12B0, r30	; 0x8012b0 <__iob>
   1ba56:	20 97       	sbiw	r28, 0x00	; 0
   1ba58:	d1 f2       	breq	.-76     	; 0x1ba0e <fdevopen+0x16>
   1ba5a:	d1 87       	std	Z+9, r29	; 0x09
   1ba5c:	c0 87       	std	Z+8, r28	; 0x08
   1ba5e:	83 81       	ldd	r24, Z+3	; 0x03
   1ba60:	82 60       	ori	r24, 0x02	; 2
   1ba62:	83 83       	std	Z+3, r24	; 0x03
   1ba64:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <__iob+0x2>
   1ba68:	90 91 b3 12 	lds	r25, 0x12B3	; 0x8012b3 <__iob+0x3>
   1ba6c:	89 2b       	or	r24, r25
   1ba6e:	79 f6       	brne	.-98     	; 0x1ba0e <fdevopen+0x16>
   1ba70:	f0 93 b3 12 	sts	0x12B3, r31	; 0x8012b3 <__iob+0x3>
   1ba74:	e0 93 b2 12 	sts	0x12B2, r30	; 0x8012b2 <__iob+0x2>
   1ba78:	80 91 b4 12 	lds	r24, 0x12B4	; 0x8012b4 <__iob+0x4>
   1ba7c:	90 91 b5 12 	lds	r25, 0x12B5	; 0x8012b5 <__iob+0x5>
   1ba80:	89 2b       	or	r24, r25
   1ba82:	29 f6       	brne	.-118    	; 0x1ba0e <fdevopen+0x16>
   1ba84:	f0 93 b5 12 	sts	0x12B5, r31	; 0x8012b5 <__iob+0x5>
   1ba88:	e0 93 b4 12 	sts	0x12B4, r30	; 0x8012b4 <__iob+0x4>
   1ba8c:	c0 cf       	rjmp	.-128    	; 0x1ba0e <fdevopen+0x16>

0001ba8e <printf>:
printf():
   1ba8e:	cf 93       	push	r28
   1ba90:	df 93       	push	r29
   1ba92:	cd b7       	in	r28, 0x3d	; 61
   1ba94:	de b7       	in	r29, 0x3e	; 62
   1ba96:	ae 01       	movw	r20, r28
   1ba98:	4a 5f       	subi	r20, 0xFA	; 250
   1ba9a:	5f 4f       	sbci	r21, 0xFF	; 255
   1ba9c:	fa 01       	movw	r30, r20
   1ba9e:	61 91       	ld	r22, Z+
   1baa0:	71 91       	ld	r23, Z+
   1baa2:	af 01       	movw	r20, r30
   1baa4:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <__iob+0x2>
   1baa8:	90 91 b3 12 	lds	r25, 0x12B3	; 0x8012b3 <__iob+0x3>
   1baac:	0e 94 dd dd 	call	0x1bbba	; 0x1bbba <vfprintf>
   1bab0:	df 91       	pop	r29
   1bab2:	cf 91       	pop	r28
   1bab4:	08 95       	ret

0001bab6 <printf_P>:
printf_P():
   1bab6:	0f 93       	push	r16
   1bab8:	1f 93       	push	r17
   1baba:	cf 93       	push	r28
   1babc:	df 93       	push	r29
   1babe:	cd b7       	in	r28, 0x3d	; 61
   1bac0:	de b7       	in	r29, 0x3e	; 62
   1bac2:	ae 01       	movw	r20, r28
   1bac4:	48 5f       	subi	r20, 0xF8	; 248
   1bac6:	5f 4f       	sbci	r21, 0xFF	; 255
   1bac8:	da 01       	movw	r26, r20
   1baca:	6d 91       	ld	r22, X+
   1bacc:	7d 91       	ld	r23, X+
   1bace:	ad 01       	movw	r20, r26
   1bad0:	00 eb       	ldi	r16, 0xB0	; 176
   1bad2:	12 e1       	ldi	r17, 0x12	; 18
   1bad4:	f8 01       	movw	r30, r16
   1bad6:	82 81       	ldd	r24, Z+2	; 0x02
   1bad8:	93 81       	ldd	r25, Z+3	; 0x03
   1bada:	dc 01       	movw	r26, r24
   1badc:	13 96       	adiw	r26, 0x03	; 3
   1bade:	2c 91       	ld	r18, X
   1bae0:	13 97       	sbiw	r26, 0x03	; 3
   1bae2:	28 60       	ori	r18, 0x08	; 8
   1bae4:	13 96       	adiw	r26, 0x03	; 3
   1bae6:	2c 93       	st	X, r18
   1bae8:	0e 94 dd dd 	call	0x1bbba	; 0x1bbba <vfprintf>
   1baec:	d8 01       	movw	r26, r16
   1baee:	12 96       	adiw	r26, 0x02	; 2
   1baf0:	ed 91       	ld	r30, X+
   1baf2:	fc 91       	ld	r31, X
   1baf4:	23 81       	ldd	r18, Z+3	; 0x03
   1baf6:	27 7f       	andi	r18, 0xF7	; 247
   1baf8:	23 83       	std	Z+3, r18	; 0x03
   1bafa:	df 91       	pop	r29
   1bafc:	cf 91       	pop	r28
   1bafe:	1f 91       	pop	r17
   1bb00:	0f 91       	pop	r16
   1bb02:	08 95       	ret

0001bb04 <puts>:
puts():
   1bb04:	0f 93       	push	r16
   1bb06:	1f 93       	push	r17
   1bb08:	cf 93       	push	r28
   1bb0a:	df 93       	push	r29
   1bb0c:	e0 91 b2 12 	lds	r30, 0x12B2	; 0x8012b2 <__iob+0x2>
   1bb10:	f0 91 b3 12 	lds	r31, 0x12B3	; 0x8012b3 <__iob+0x3>
   1bb14:	23 81       	ldd	r18, Z+3	; 0x03
   1bb16:	ec 01       	movw	r28, r24
   1bb18:	10 e0       	ldi	r17, 0x00	; 0
   1bb1a:	00 e0       	ldi	r16, 0x00	; 0
   1bb1c:	21 fd       	sbrc	r18, 1
   1bb1e:	08 c0       	rjmp	.+16     	; 0x1bb30 <puts+0x2c>
   1bb20:	0f ef       	ldi	r16, 0xFF	; 255
   1bb22:	1f ef       	ldi	r17, 0xFF	; 255
   1bb24:	14 c0       	rjmp	.+40     	; 0x1bb4e <puts+0x4a>
   1bb26:	19 95       	eicall
   1bb28:	89 2b       	or	r24, r25
   1bb2a:	11 f0       	breq	.+4      	; 0x1bb30 <puts+0x2c>
   1bb2c:	0f ef       	ldi	r16, 0xFF	; 255
   1bb2e:	1f ef       	ldi	r17, 0xFF	; 255
   1bb30:	89 91       	ld	r24, Y+
   1bb32:	60 91 b2 12 	lds	r22, 0x12B2	; 0x8012b2 <__iob+0x2>
   1bb36:	70 91 b3 12 	lds	r23, 0x12B3	; 0x8012b3 <__iob+0x3>
   1bb3a:	db 01       	movw	r26, r22
   1bb3c:	18 96       	adiw	r26, 0x08	; 8
   1bb3e:	ed 91       	ld	r30, X+
   1bb40:	fc 91       	ld	r31, X
   1bb42:	81 11       	cpse	r24, r1
   1bb44:	f0 cf       	rjmp	.-32     	; 0x1bb26 <puts+0x22>
   1bb46:	8a e0       	ldi	r24, 0x0A	; 10
   1bb48:	19 95       	eicall
   1bb4a:	89 2b       	or	r24, r25
   1bb4c:	49 f7       	brne	.-46     	; 0x1bb20 <puts+0x1c>
   1bb4e:	c8 01       	movw	r24, r16
   1bb50:	df 91       	pop	r29
   1bb52:	cf 91       	pop	r28
   1bb54:	1f 91       	pop	r17
   1bb56:	0f 91       	pop	r16
   1bb58:	08 95       	ret

0001bb5a <sprintf>:
sprintf():
   1bb5a:	0f 93       	push	r16
   1bb5c:	1f 93       	push	r17
   1bb5e:	cf 93       	push	r28
   1bb60:	df 93       	push	r29
   1bb62:	cd b7       	in	r28, 0x3d	; 61
   1bb64:	de b7       	in	r29, 0x3e	; 62
   1bb66:	2e 97       	sbiw	r28, 0x0e	; 14
   1bb68:	0f b6       	in	r0, 0x3f	; 63
   1bb6a:	f8 94       	cli
   1bb6c:	de bf       	out	0x3e, r29	; 62
   1bb6e:	0f be       	out	0x3f, r0	; 63
   1bb70:	cd bf       	out	0x3d, r28	; 61
   1bb72:	0e 89       	ldd	r16, Y+22	; 0x16
   1bb74:	1f 89       	ldd	r17, Y+23	; 0x17
   1bb76:	86 e0       	ldi	r24, 0x06	; 6
   1bb78:	8c 83       	std	Y+4, r24	; 0x04
   1bb7a:	1a 83       	std	Y+2, r17	; 0x02
   1bb7c:	09 83       	std	Y+1, r16	; 0x01
   1bb7e:	8f ef       	ldi	r24, 0xFF	; 255
   1bb80:	9f e7       	ldi	r25, 0x7F	; 127
   1bb82:	9e 83       	std	Y+6, r25	; 0x06
   1bb84:	8d 83       	std	Y+5, r24	; 0x05
   1bb86:	ae 01       	movw	r20, r28
   1bb88:	46 5e       	subi	r20, 0xE6	; 230
   1bb8a:	5f 4f       	sbci	r21, 0xFF	; 255
   1bb8c:	68 8d       	ldd	r22, Y+24	; 0x18
   1bb8e:	79 8d       	ldd	r23, Y+25	; 0x19
   1bb90:	ce 01       	movw	r24, r28
   1bb92:	01 96       	adiw	r24, 0x01	; 1
   1bb94:	0e 94 dd dd 	call	0x1bbba	; 0x1bbba <vfprintf>
   1bb98:	2f 81       	ldd	r18, Y+7	; 0x07
   1bb9a:	38 85       	ldd	r19, Y+8	; 0x08
   1bb9c:	02 0f       	add	r16, r18
   1bb9e:	13 1f       	adc	r17, r19
   1bba0:	f8 01       	movw	r30, r16
   1bba2:	10 82       	st	Z, r1
   1bba4:	2e 96       	adiw	r28, 0x0e	; 14
   1bba6:	0f b6       	in	r0, 0x3f	; 63
   1bba8:	f8 94       	cli
   1bbaa:	de bf       	out	0x3e, r29	; 62
   1bbac:	0f be       	out	0x3f, r0	; 63
   1bbae:	cd bf       	out	0x3d, r28	; 61
   1bbb0:	df 91       	pop	r29
   1bbb2:	cf 91       	pop	r28
   1bbb4:	1f 91       	pop	r17
   1bbb6:	0f 91       	pop	r16
   1bbb8:	08 95       	ret

0001bbba <vfprintf>:
vfprintf():
   1bbba:	2f 92       	push	r2
   1bbbc:	3f 92       	push	r3
   1bbbe:	4f 92       	push	r4
   1bbc0:	5f 92       	push	r5
   1bbc2:	6f 92       	push	r6
   1bbc4:	7f 92       	push	r7
   1bbc6:	8f 92       	push	r8
   1bbc8:	9f 92       	push	r9
   1bbca:	af 92       	push	r10
   1bbcc:	bf 92       	push	r11
   1bbce:	cf 92       	push	r12
   1bbd0:	df 92       	push	r13
   1bbd2:	ef 92       	push	r14
   1bbd4:	ff 92       	push	r15
   1bbd6:	0f 93       	push	r16
   1bbd8:	1f 93       	push	r17
   1bbda:	cf 93       	push	r28
   1bbdc:	df 93       	push	r29
   1bbde:	00 d0       	rcall	.+0      	; 0x1bbe0 <vfprintf+0x26>
   1bbe0:	00 d0       	rcall	.+0      	; 0x1bbe2 <vfprintf+0x28>
   1bbe2:	00 d0       	rcall	.+0      	; 0x1bbe4 <vfprintf+0x2a>
   1bbe4:	1f 92       	push	r1
   1bbe6:	1f 92       	push	r1
   1bbe8:	cd b7       	in	r28, 0x3d	; 61
   1bbea:	de b7       	in	r29, 0x3e	; 62
   1bbec:	7c 01       	movw	r14, r24
   1bbee:	3b 01       	movw	r6, r22
   1bbf0:	8a 01       	movw	r16, r20
   1bbf2:	fc 01       	movw	r30, r24
   1bbf4:	17 82       	std	Z+7, r1	; 0x07
   1bbf6:	16 82       	std	Z+6, r1	; 0x06
   1bbf8:	83 81       	ldd	r24, Z+3	; 0x03
   1bbfa:	81 ff       	sbrs	r24, 1
   1bbfc:	dd c1       	rjmp	.+954    	; 0x1bfb8 <vfprintf+0x3fe>
   1bbfe:	ce 01       	movw	r24, r28
   1bc00:	01 96       	adiw	r24, 0x01	; 1
   1bc02:	5c 01       	movw	r10, r24
   1bc04:	f7 01       	movw	r30, r14
   1bc06:	93 81       	ldd	r25, Z+3	; 0x03
   1bc08:	f3 01       	movw	r30, r6
   1bc0a:	93 fd       	sbrc	r25, 3
   1bc0c:	85 91       	lpm	r24, Z+
   1bc0e:	93 ff       	sbrs	r25, 3
   1bc10:	81 91       	ld	r24, Z+
   1bc12:	3f 01       	movw	r6, r30
   1bc14:	88 23       	and	r24, r24
   1bc16:	09 f4       	brne	.+2      	; 0x1bc1a <vfprintf+0x60>
   1bc18:	53 c1       	rjmp	.+678    	; 0x1bec0 <vfprintf+0x306>
   1bc1a:	85 32       	cpi	r24, 0x25	; 37
   1bc1c:	39 f4       	brne	.+14     	; 0x1bc2c <vfprintf+0x72>
   1bc1e:	93 fd       	sbrc	r25, 3
   1bc20:	85 91       	lpm	r24, Z+
   1bc22:	93 ff       	sbrs	r25, 3
   1bc24:	81 91       	ld	r24, Z+
   1bc26:	3f 01       	movw	r6, r30
   1bc28:	85 32       	cpi	r24, 0x25	; 37
   1bc2a:	29 f4       	brne	.+10     	; 0x1bc36 <vfprintf+0x7c>
   1bc2c:	b7 01       	movw	r22, r14
   1bc2e:	90 e0       	ldi	r25, 0x00	; 0
   1bc30:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <fputc>
   1bc34:	e7 cf       	rjmp	.-50     	; 0x1bc04 <vfprintf+0x4a>
   1bc36:	91 2c       	mov	r9, r1
   1bc38:	21 2c       	mov	r2, r1
   1bc3a:	31 2c       	mov	r3, r1
   1bc3c:	ff e1       	ldi	r31, 0x1F	; 31
   1bc3e:	f3 15       	cp	r31, r3
   1bc40:	38 f0       	brcs	.+14     	; 0x1bc50 <vfprintf+0x96>
   1bc42:	8b 32       	cpi	r24, 0x2B	; 43
   1bc44:	11 f1       	breq	.+68     	; 0x1bc8a <vfprintf+0xd0>
   1bc46:	90 f4       	brcc	.+36     	; 0x1bc6c <vfprintf+0xb2>
   1bc48:	80 32       	cpi	r24, 0x20	; 32
   1bc4a:	09 f1       	breq	.+66     	; 0x1bc8e <vfprintf+0xd4>
   1bc4c:	83 32       	cpi	r24, 0x23	; 35
   1bc4e:	29 f1       	breq	.+74     	; 0x1bc9a <vfprintf+0xe0>
   1bc50:	37 fc       	sbrc	r3, 7
   1bc52:	3c c0       	rjmp	.+120    	; 0x1bccc <vfprintf+0x112>
   1bc54:	20 ed       	ldi	r18, 0xD0	; 208
   1bc56:	28 0f       	add	r18, r24
   1bc58:	2a 30       	cpi	r18, 0x0A	; 10
   1bc5a:	50 f5       	brcc	.+84     	; 0x1bcb0 <vfprintf+0xf6>
   1bc5c:	36 fe       	sbrs	r3, 6
   1bc5e:	20 c0       	rjmp	.+64     	; 0x1bca0 <vfprintf+0xe6>
   1bc60:	8a e0       	ldi	r24, 0x0A	; 10
   1bc62:	98 9e       	mul	r9, r24
   1bc64:	20 0d       	add	r18, r0
   1bc66:	11 24       	eor	r1, r1
   1bc68:	92 2e       	mov	r9, r18
   1bc6a:	06 c0       	rjmp	.+12     	; 0x1bc78 <vfprintf+0xbe>
   1bc6c:	8d 32       	cpi	r24, 0x2D	; 45
   1bc6e:	91 f0       	breq	.+36     	; 0x1bc94 <vfprintf+0xda>
   1bc70:	80 33       	cpi	r24, 0x30	; 48
   1bc72:	71 f7       	brne	.-36     	; 0x1bc50 <vfprintf+0x96>
   1bc74:	68 94       	set
   1bc76:	30 f8       	bld	r3, 0
   1bc78:	f3 01       	movw	r30, r6
   1bc7a:	93 fd       	sbrc	r25, 3
   1bc7c:	85 91       	lpm	r24, Z+
   1bc7e:	93 ff       	sbrs	r25, 3
   1bc80:	81 91       	ld	r24, Z+
   1bc82:	3f 01       	movw	r6, r30
   1bc84:	81 11       	cpse	r24, r1
   1bc86:	da cf       	rjmp	.-76     	; 0x1bc3c <vfprintf+0x82>
   1bc88:	21 c0       	rjmp	.+66     	; 0x1bccc <vfprintf+0x112>
   1bc8a:	68 94       	set
   1bc8c:	31 f8       	bld	r3, 1
   1bc8e:	68 94       	set
   1bc90:	32 f8       	bld	r3, 2
   1bc92:	f2 cf       	rjmp	.-28     	; 0x1bc78 <vfprintf+0xbe>
   1bc94:	68 94       	set
   1bc96:	33 f8       	bld	r3, 3
   1bc98:	ef cf       	rjmp	.-34     	; 0x1bc78 <vfprintf+0xbe>
   1bc9a:	68 94       	set
   1bc9c:	34 f8       	bld	r3, 4
   1bc9e:	ec cf       	rjmp	.-40     	; 0x1bc78 <vfprintf+0xbe>
   1bca0:	ea e0       	ldi	r30, 0x0A	; 10
   1bca2:	2e 9e       	mul	r2, r30
   1bca4:	20 0d       	add	r18, r0
   1bca6:	11 24       	eor	r1, r1
   1bca8:	22 2e       	mov	r2, r18
   1bcaa:	68 94       	set
   1bcac:	35 f8       	bld	r3, 5
   1bcae:	e4 cf       	rjmp	.-56     	; 0x1bc78 <vfprintf+0xbe>
   1bcb0:	8e 32       	cpi	r24, 0x2E	; 46
   1bcb2:	29 f4       	brne	.+10     	; 0x1bcbe <vfprintf+0x104>
   1bcb4:	36 fc       	sbrc	r3, 6
   1bcb6:	04 c1       	rjmp	.+520    	; 0x1bec0 <vfprintf+0x306>
   1bcb8:	68 94       	set
   1bcba:	36 f8       	bld	r3, 6
   1bcbc:	dd cf       	rjmp	.-70     	; 0x1bc78 <vfprintf+0xbe>
   1bcbe:	8c 36       	cpi	r24, 0x6C	; 108
   1bcc0:	19 f4       	brne	.+6      	; 0x1bcc8 <vfprintf+0x10e>
   1bcc2:	68 94       	set
   1bcc4:	37 f8       	bld	r3, 7
   1bcc6:	d8 cf       	rjmp	.-80     	; 0x1bc78 <vfprintf+0xbe>
   1bcc8:	88 36       	cpi	r24, 0x68	; 104
   1bcca:	b1 f2       	breq	.-84     	; 0x1bc78 <vfprintf+0xbe>
   1bccc:	98 2f       	mov	r25, r24
   1bcce:	9f 7d       	andi	r25, 0xDF	; 223
   1bcd0:	95 54       	subi	r25, 0x45	; 69
   1bcd2:	93 30       	cpi	r25, 0x03	; 3
   1bcd4:	e0 f0       	brcs	.+56     	; 0x1bd0e <vfprintf+0x154>
   1bcd6:	83 36       	cpi	r24, 0x63	; 99
   1bcd8:	a1 f1       	breq	.+104    	; 0x1bd42 <vfprintf+0x188>
   1bcda:	83 37       	cpi	r24, 0x73	; 115
   1bcdc:	c1 f1       	breq	.+112    	; 0x1bd4e <vfprintf+0x194>
   1bcde:	83 35       	cpi	r24, 0x53	; 83
   1bce0:	09 f0       	breq	.+2      	; 0x1bce4 <vfprintf+0x12a>
   1bce2:	63 c0       	rjmp	.+198    	; 0x1bdaa <vfprintf+0x1f0>
   1bce4:	28 01       	movw	r4, r16
   1bce6:	f2 e0       	ldi	r31, 0x02	; 2
   1bce8:	4f 0e       	add	r4, r31
   1bcea:	51 1c       	adc	r5, r1
   1bcec:	f8 01       	movw	r30, r16
   1bcee:	c0 80       	ld	r12, Z
   1bcf0:	d1 80       	ldd	r13, Z+1	; 0x01
   1bcf2:	69 2d       	mov	r22, r9
   1bcf4:	70 e0       	ldi	r23, 0x00	; 0
   1bcf6:	36 fc       	sbrc	r3, 6
   1bcf8:	02 c0       	rjmp	.+4      	; 0x1bcfe <vfprintf+0x144>
   1bcfa:	6f ef       	ldi	r22, 0xFF	; 255
   1bcfc:	7f ef       	ldi	r23, 0xFF	; 255
   1bcfe:	c6 01       	movw	r24, r12
   1bd00:	0e 94 c5 e3 	call	0x1c78a	; 0x1c78a <strnlen_P>
   1bd04:	4c 01       	movw	r8, r24
   1bd06:	68 94       	set
   1bd08:	37 f8       	bld	r3, 7
   1bd0a:	82 01       	movw	r16, r4
   1bd0c:	0a c0       	rjmp	.+20     	; 0x1bd22 <vfprintf+0x168>
   1bd0e:	0c 5f       	subi	r16, 0xFC	; 252
   1bd10:	1f 4f       	sbci	r17, 0xFF	; 255
   1bd12:	ff e3       	ldi	r31, 0x3F	; 63
   1bd14:	f9 83       	std	Y+1, r31	; 0x01
   1bd16:	88 24       	eor	r8, r8
   1bd18:	83 94       	inc	r8
   1bd1a:	91 2c       	mov	r9, r1
   1bd1c:	65 01       	movw	r12, r10
   1bd1e:	e8 94       	clt
   1bd20:	37 f8       	bld	r3, 7
   1bd22:	33 fe       	sbrs	r3, 3
   1bd24:	2d c0       	rjmp	.+90     	; 0x1bd80 <vfprintf+0x1c6>
   1bd26:	52 2c       	mov	r5, r2
   1bd28:	81 14       	cp	r8, r1
   1bd2a:	91 04       	cpc	r9, r1
   1bd2c:	71 f5       	brne	.+92     	; 0x1bd8a <vfprintf+0x1d0>
   1bd2e:	55 20       	and	r5, r5
   1bd30:	09 f4       	brne	.+2      	; 0x1bd34 <vfprintf+0x17a>
   1bd32:	68 cf       	rjmp	.-304    	; 0x1bc04 <vfprintf+0x4a>
   1bd34:	b7 01       	movw	r22, r14
   1bd36:	80 e2       	ldi	r24, 0x20	; 32
   1bd38:	90 e0       	ldi	r25, 0x00	; 0
   1bd3a:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <fputc>
   1bd3e:	5a 94       	dec	r5
   1bd40:	f6 cf       	rjmp	.-20     	; 0x1bd2e <vfprintf+0x174>
   1bd42:	f8 01       	movw	r30, r16
   1bd44:	80 81       	ld	r24, Z
   1bd46:	89 83       	std	Y+1, r24	; 0x01
   1bd48:	0e 5f       	subi	r16, 0xFE	; 254
   1bd4a:	1f 4f       	sbci	r17, 0xFF	; 255
   1bd4c:	e4 cf       	rjmp	.-56     	; 0x1bd16 <vfprintf+0x15c>
   1bd4e:	28 01       	movw	r4, r16
   1bd50:	f2 e0       	ldi	r31, 0x02	; 2
   1bd52:	4f 0e       	add	r4, r31
   1bd54:	51 1c       	adc	r5, r1
   1bd56:	f8 01       	movw	r30, r16
   1bd58:	c0 80       	ld	r12, Z
   1bd5a:	d1 80       	ldd	r13, Z+1	; 0x01
   1bd5c:	69 2d       	mov	r22, r9
   1bd5e:	70 e0       	ldi	r23, 0x00	; 0
   1bd60:	36 fc       	sbrc	r3, 6
   1bd62:	02 c0       	rjmp	.+4      	; 0x1bd68 <vfprintf+0x1ae>
   1bd64:	6f ef       	ldi	r22, 0xFF	; 255
   1bd66:	7f ef       	ldi	r23, 0xFF	; 255
   1bd68:	c6 01       	movw	r24, r12
   1bd6a:	0e 94 d7 e3 	call	0x1c7ae	; 0x1c7ae <strnlen>
   1bd6e:	4c 01       	movw	r8, r24
   1bd70:	82 01       	movw	r16, r4
   1bd72:	d5 cf       	rjmp	.-86     	; 0x1bd1e <vfprintf+0x164>
   1bd74:	b7 01       	movw	r22, r14
   1bd76:	80 e2       	ldi	r24, 0x20	; 32
   1bd78:	90 e0       	ldi	r25, 0x00	; 0
   1bd7a:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <fputc>
   1bd7e:	2a 94       	dec	r2
   1bd80:	28 14       	cp	r2, r8
   1bd82:	19 04       	cpc	r1, r9
   1bd84:	09 f0       	breq	.+2      	; 0x1bd88 <vfprintf+0x1ce>
   1bd86:	b0 f7       	brcc	.-20     	; 0x1bd74 <vfprintf+0x1ba>
   1bd88:	ce cf       	rjmp	.-100    	; 0x1bd26 <vfprintf+0x16c>
   1bd8a:	f6 01       	movw	r30, r12
   1bd8c:	37 fc       	sbrc	r3, 7
   1bd8e:	85 91       	lpm	r24, Z+
   1bd90:	37 fe       	sbrs	r3, 7
   1bd92:	81 91       	ld	r24, Z+
   1bd94:	6f 01       	movw	r12, r30
   1bd96:	b7 01       	movw	r22, r14
   1bd98:	90 e0       	ldi	r25, 0x00	; 0
   1bd9a:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <fputc>
   1bd9e:	51 10       	cpse	r5, r1
   1bda0:	5a 94       	dec	r5
   1bda2:	f1 e0       	ldi	r31, 0x01	; 1
   1bda4:	8f 1a       	sub	r8, r31
   1bda6:	91 08       	sbc	r9, r1
   1bda8:	bf cf       	rjmp	.-130    	; 0x1bd28 <vfprintf+0x16e>
   1bdaa:	84 36       	cpi	r24, 0x64	; 100
   1bdac:	19 f0       	breq	.+6      	; 0x1bdb4 <vfprintf+0x1fa>
   1bdae:	89 36       	cpi	r24, 0x69	; 105
   1bdb0:	09 f0       	breq	.+2      	; 0x1bdb4 <vfprintf+0x1fa>
   1bdb2:	77 c0       	rjmp	.+238    	; 0x1bea2 <vfprintf+0x2e8>
   1bdb4:	f8 01       	movw	r30, r16
   1bdb6:	37 fe       	sbrs	r3, 7
   1bdb8:	6b c0       	rjmp	.+214    	; 0x1be90 <vfprintf+0x2d6>
   1bdba:	60 81       	ld	r22, Z
   1bdbc:	71 81       	ldd	r23, Z+1	; 0x01
   1bdbe:	82 81       	ldd	r24, Z+2	; 0x02
   1bdc0:	93 81       	ldd	r25, Z+3	; 0x03
   1bdc2:	0c 5f       	subi	r16, 0xFC	; 252
   1bdc4:	1f 4f       	sbci	r17, 0xFF	; 255
   1bdc6:	f3 2d       	mov	r31, r3
   1bdc8:	ff 76       	andi	r31, 0x6F	; 111
   1bdca:	3f 2e       	mov	r3, r31
   1bdcc:	97 ff       	sbrs	r25, 7
   1bdce:	09 c0       	rjmp	.+18     	; 0x1bde2 <vfprintf+0x228>
   1bdd0:	90 95       	com	r25
   1bdd2:	80 95       	com	r24
   1bdd4:	70 95       	com	r23
   1bdd6:	61 95       	neg	r22
   1bdd8:	7f 4f       	sbci	r23, 0xFF	; 255
   1bdda:	8f 4f       	sbci	r24, 0xFF	; 255
   1bddc:	9f 4f       	sbci	r25, 0xFF	; 255
   1bdde:	68 94       	set
   1bde0:	37 f8       	bld	r3, 7
   1bde2:	2a e0       	ldi	r18, 0x0A	; 10
   1bde4:	30 e0       	ldi	r19, 0x00	; 0
   1bde6:	a5 01       	movw	r20, r10
   1bde8:	0e 94 22 e4 	call	0x1c844	; 0x1c844 <__ultoa_invert>
   1bdec:	c8 2e       	mov	r12, r24
   1bdee:	ca 18       	sub	r12, r10
   1bdf0:	8c 2c       	mov	r8, r12
   1bdf2:	43 2c       	mov	r4, r3
   1bdf4:	36 fe       	sbrs	r3, 6
   1bdf6:	0c c0       	rjmp	.+24     	; 0x1be10 <vfprintf+0x256>
   1bdf8:	e8 94       	clt
   1bdfa:	40 f8       	bld	r4, 0
   1bdfc:	c9 14       	cp	r12, r9
   1bdfe:	40 f4       	brcc	.+16     	; 0x1be10 <vfprintf+0x256>
   1be00:	34 fe       	sbrs	r3, 4
   1be02:	05 c0       	rjmp	.+10     	; 0x1be0e <vfprintf+0x254>
   1be04:	32 fc       	sbrc	r3, 2
   1be06:	03 c0       	rjmp	.+6      	; 0x1be0e <vfprintf+0x254>
   1be08:	f3 2d       	mov	r31, r3
   1be0a:	fe 7e       	andi	r31, 0xEE	; 238
   1be0c:	4f 2e       	mov	r4, r31
   1be0e:	89 2c       	mov	r8, r9
   1be10:	44 fe       	sbrs	r4, 4
   1be12:	aa c0       	rjmp	.+340    	; 0x1bf68 <vfprintf+0x3ae>
   1be14:	fe 01       	movw	r30, r28
   1be16:	ec 0d       	add	r30, r12
   1be18:	f1 1d       	adc	r31, r1
   1be1a:	80 81       	ld	r24, Z
   1be1c:	80 33       	cpi	r24, 0x30	; 48
   1be1e:	09 f0       	breq	.+2      	; 0x1be22 <vfprintf+0x268>
   1be20:	9c c0       	rjmp	.+312    	; 0x1bf5a <vfprintf+0x3a0>
   1be22:	24 2d       	mov	r18, r4
   1be24:	29 7e       	andi	r18, 0xE9	; 233
   1be26:	42 2e       	mov	r4, r18
   1be28:	84 2d       	mov	r24, r4
   1be2a:	88 70       	andi	r24, 0x08	; 8
   1be2c:	58 2e       	mov	r5, r24
   1be2e:	43 fc       	sbrc	r4, 3
   1be30:	aa c0       	rjmp	.+340    	; 0x1bf86 <vfprintf+0x3cc>
   1be32:	40 fe       	sbrs	r4, 0
   1be34:	a4 c0       	rjmp	.+328    	; 0x1bf7e <vfprintf+0x3c4>
   1be36:	9c 2c       	mov	r9, r12
   1be38:	82 14       	cp	r8, r2
   1be3a:	18 f4       	brcc	.+6      	; 0x1be42 <vfprintf+0x288>
   1be3c:	2c 0c       	add	r2, r12
   1be3e:	92 2c       	mov	r9, r2
   1be40:	98 18       	sub	r9, r8
   1be42:	44 fe       	sbrs	r4, 4
   1be44:	a6 c0       	rjmp	.+332    	; 0x1bf92 <vfprintf+0x3d8>
   1be46:	b7 01       	movw	r22, r14
   1be48:	80 e3       	ldi	r24, 0x30	; 48
   1be4a:	90 e0       	ldi	r25, 0x00	; 0
   1be4c:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <fputc>
   1be50:	42 fe       	sbrs	r4, 2
   1be52:	09 c0       	rjmp	.+18     	; 0x1be66 <vfprintf+0x2ac>
   1be54:	88 e7       	ldi	r24, 0x78	; 120
   1be56:	90 e0       	ldi	r25, 0x00	; 0
   1be58:	41 fe       	sbrs	r4, 1
   1be5a:	02 c0       	rjmp	.+4      	; 0x1be60 <vfprintf+0x2a6>
   1be5c:	88 e5       	ldi	r24, 0x58	; 88
   1be5e:	90 e0       	ldi	r25, 0x00	; 0
   1be60:	b7 01       	movw	r22, r14
   1be62:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <fputc>
   1be66:	c9 14       	cp	r12, r9
   1be68:	08 f4       	brcc	.+2      	; 0x1be6c <vfprintf+0x2b2>
   1be6a:	9f c0       	rjmp	.+318    	; 0x1bfaa <vfprintf+0x3f0>
   1be6c:	ca 94       	dec	r12
   1be6e:	d1 2c       	mov	r13, r1
   1be70:	9f ef       	ldi	r25, 0xFF	; 255
   1be72:	c9 1a       	sub	r12, r25
   1be74:	d9 0a       	sbc	r13, r25
   1be76:	ca 0c       	add	r12, r10
   1be78:	db 1c       	adc	r13, r11
   1be7a:	f6 01       	movw	r30, r12
   1be7c:	82 91       	ld	r24, -Z
   1be7e:	6f 01       	movw	r12, r30
   1be80:	b7 01       	movw	r22, r14
   1be82:	90 e0       	ldi	r25, 0x00	; 0
   1be84:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <fputc>
   1be88:	ac 14       	cp	r10, r12
   1be8a:	bd 04       	cpc	r11, r13
   1be8c:	b1 f7       	brne	.-20     	; 0x1be7a <vfprintf+0x2c0>
   1be8e:	4f cf       	rjmp	.-354    	; 0x1bd2e <vfprintf+0x174>
   1be90:	60 81       	ld	r22, Z
   1be92:	71 81       	ldd	r23, Z+1	; 0x01
   1be94:	07 2e       	mov	r0, r23
   1be96:	00 0c       	add	r0, r0
   1be98:	88 0b       	sbc	r24, r24
   1be9a:	99 0b       	sbc	r25, r25
   1be9c:	0e 5f       	subi	r16, 0xFE	; 254
   1be9e:	1f 4f       	sbci	r17, 0xFF	; 255
   1bea0:	92 cf       	rjmp	.-220    	; 0x1bdc6 <vfprintf+0x20c>
   1bea2:	d3 2c       	mov	r13, r3
   1bea4:	e8 94       	clt
   1bea6:	d4 f8       	bld	r13, 4
   1bea8:	2a e0       	ldi	r18, 0x0A	; 10
   1beaa:	30 e0       	ldi	r19, 0x00	; 0
   1beac:	85 37       	cpi	r24, 0x75	; 117
   1beae:	e1 f1       	breq	.+120    	; 0x1bf28 <vfprintf+0x36e>
   1beb0:	23 2d       	mov	r18, r3
   1beb2:	29 7f       	andi	r18, 0xF9	; 249
   1beb4:	d2 2e       	mov	r13, r18
   1beb6:	8f 36       	cpi	r24, 0x6F	; 111
   1beb8:	a9 f1       	breq	.+106    	; 0x1bf24 <vfprintf+0x36a>
   1beba:	f0 f4       	brcc	.+60     	; 0x1bef8 <vfprintf+0x33e>
   1bebc:	88 35       	cpi	r24, 0x58	; 88
   1bebe:	51 f1       	breq	.+84     	; 0x1bf14 <vfprintf+0x35a>
   1bec0:	f7 01       	movw	r30, r14
   1bec2:	86 81       	ldd	r24, Z+6	; 0x06
   1bec4:	97 81       	ldd	r25, Z+7	; 0x07
   1bec6:	2b 96       	adiw	r28, 0x0b	; 11
   1bec8:	0f b6       	in	r0, 0x3f	; 63
   1beca:	f8 94       	cli
   1becc:	de bf       	out	0x3e, r29	; 62
   1bece:	0f be       	out	0x3f, r0	; 63
   1bed0:	cd bf       	out	0x3d, r28	; 61
   1bed2:	df 91       	pop	r29
   1bed4:	cf 91       	pop	r28
   1bed6:	1f 91       	pop	r17
   1bed8:	0f 91       	pop	r16
   1beda:	ff 90       	pop	r15
   1bedc:	ef 90       	pop	r14
   1bede:	df 90       	pop	r13
   1bee0:	cf 90       	pop	r12
   1bee2:	bf 90       	pop	r11
   1bee4:	af 90       	pop	r10
   1bee6:	9f 90       	pop	r9
   1bee8:	8f 90       	pop	r8
   1beea:	7f 90       	pop	r7
   1beec:	6f 90       	pop	r6
   1beee:	5f 90       	pop	r5
   1bef0:	4f 90       	pop	r4
   1bef2:	3f 90       	pop	r3
   1bef4:	2f 90       	pop	r2
   1bef6:	08 95       	ret
   1bef8:	80 37       	cpi	r24, 0x70	; 112
   1befa:	49 f0       	breq	.+18     	; 0x1bf0e <vfprintf+0x354>
   1befc:	88 37       	cpi	r24, 0x78	; 120
   1befe:	01 f7       	brne	.-64     	; 0x1bec0 <vfprintf+0x306>
   1bf00:	d4 fe       	sbrs	r13, 4
   1bf02:	02 c0       	rjmp	.+4      	; 0x1bf08 <vfprintf+0x34e>
   1bf04:	68 94       	set
   1bf06:	d2 f8       	bld	r13, 2
   1bf08:	20 e1       	ldi	r18, 0x10	; 16
   1bf0a:	30 e0       	ldi	r19, 0x00	; 0
   1bf0c:	0d c0       	rjmp	.+26     	; 0x1bf28 <vfprintf+0x36e>
   1bf0e:	68 94       	set
   1bf10:	d4 f8       	bld	r13, 4
   1bf12:	f6 cf       	rjmp	.-20     	; 0x1bf00 <vfprintf+0x346>
   1bf14:	34 fe       	sbrs	r3, 4
   1bf16:	03 c0       	rjmp	.+6      	; 0x1bf1e <vfprintf+0x364>
   1bf18:	82 2f       	mov	r24, r18
   1bf1a:	86 60       	ori	r24, 0x06	; 6
   1bf1c:	d8 2e       	mov	r13, r24
   1bf1e:	20 e1       	ldi	r18, 0x10	; 16
   1bf20:	32 e0       	ldi	r19, 0x02	; 2
   1bf22:	02 c0       	rjmp	.+4      	; 0x1bf28 <vfprintf+0x36e>
   1bf24:	28 e0       	ldi	r18, 0x08	; 8
   1bf26:	30 e0       	ldi	r19, 0x00	; 0
   1bf28:	f8 01       	movw	r30, r16
   1bf2a:	d7 fe       	sbrs	r13, 7
   1bf2c:	0f c0       	rjmp	.+30     	; 0x1bf4c <vfprintf+0x392>
   1bf2e:	60 81       	ld	r22, Z
   1bf30:	71 81       	ldd	r23, Z+1	; 0x01
   1bf32:	82 81       	ldd	r24, Z+2	; 0x02
   1bf34:	93 81       	ldd	r25, Z+3	; 0x03
   1bf36:	0c 5f       	subi	r16, 0xFC	; 252
   1bf38:	1f 4f       	sbci	r17, 0xFF	; 255
   1bf3a:	a5 01       	movw	r20, r10
   1bf3c:	0e 94 22 e4 	call	0x1c844	; 0x1c844 <__ultoa_invert>
   1bf40:	c8 2e       	mov	r12, r24
   1bf42:	ca 18       	sub	r12, r10
   1bf44:	3d 2c       	mov	r3, r13
   1bf46:	e8 94       	clt
   1bf48:	37 f8       	bld	r3, 7
   1bf4a:	52 cf       	rjmp	.-348    	; 0x1bdf0 <vfprintf+0x236>
   1bf4c:	60 81       	ld	r22, Z
   1bf4e:	71 81       	ldd	r23, Z+1	; 0x01
   1bf50:	90 e0       	ldi	r25, 0x00	; 0
   1bf52:	80 e0       	ldi	r24, 0x00	; 0
   1bf54:	0e 5f       	subi	r16, 0xFE	; 254
   1bf56:	1f 4f       	sbci	r17, 0xFF	; 255
   1bf58:	f0 cf       	rjmp	.-32     	; 0x1bf3a <vfprintf+0x380>
   1bf5a:	42 fc       	sbrc	r4, 2
   1bf5c:	02 c0       	rjmp	.+4      	; 0x1bf62 <vfprintf+0x3a8>
   1bf5e:	83 94       	inc	r8
   1bf60:	63 cf       	rjmp	.-314    	; 0x1be28 <vfprintf+0x26e>
   1bf62:	83 94       	inc	r8
   1bf64:	83 94       	inc	r8
   1bf66:	60 cf       	rjmp	.-320    	; 0x1be28 <vfprintf+0x26e>
   1bf68:	84 2d       	mov	r24, r4
   1bf6a:	86 78       	andi	r24, 0x86	; 134
   1bf6c:	09 f4       	brne	.+2      	; 0x1bf70 <vfprintf+0x3b6>
   1bf6e:	5c cf       	rjmp	.-328    	; 0x1be28 <vfprintf+0x26e>
   1bf70:	f6 cf       	rjmp	.-20     	; 0x1bf5e <vfprintf+0x3a4>
   1bf72:	b7 01       	movw	r22, r14
   1bf74:	80 e2       	ldi	r24, 0x20	; 32
   1bf76:	90 e0       	ldi	r25, 0x00	; 0
   1bf78:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <fputc>
   1bf7c:	83 94       	inc	r8
   1bf7e:	82 14       	cp	r8, r2
   1bf80:	c0 f3       	brcs	.-16     	; 0x1bf72 <vfprintf+0x3b8>
   1bf82:	51 2c       	mov	r5, r1
   1bf84:	5e cf       	rjmp	.-324    	; 0x1be42 <vfprintf+0x288>
   1bf86:	52 2c       	mov	r5, r2
   1bf88:	58 18       	sub	r5, r8
   1bf8a:	82 14       	cp	r8, r2
   1bf8c:	08 f4       	brcc	.+2      	; 0x1bf90 <vfprintf+0x3d6>
   1bf8e:	59 cf       	rjmp	.-334    	; 0x1be42 <vfprintf+0x288>
   1bf90:	f8 cf       	rjmp	.-16     	; 0x1bf82 <vfprintf+0x3c8>
   1bf92:	84 2d       	mov	r24, r4
   1bf94:	86 78       	andi	r24, 0x86	; 134
   1bf96:	09 f4       	brne	.+2      	; 0x1bf9a <vfprintf+0x3e0>
   1bf98:	66 cf       	rjmp	.-308    	; 0x1be66 <vfprintf+0x2ac>
   1bf9a:	8b e2       	ldi	r24, 0x2B	; 43
   1bf9c:	41 fe       	sbrs	r4, 1
   1bf9e:	80 e2       	ldi	r24, 0x20	; 32
   1bfa0:	47 fc       	sbrc	r4, 7
   1bfa2:	8d e2       	ldi	r24, 0x2D	; 45
   1bfa4:	b7 01       	movw	r22, r14
   1bfa6:	90 e0       	ldi	r25, 0x00	; 0
   1bfa8:	5c cf       	rjmp	.-328    	; 0x1be62 <vfprintf+0x2a8>
   1bfaa:	b7 01       	movw	r22, r14
   1bfac:	80 e3       	ldi	r24, 0x30	; 48
   1bfae:	90 e0       	ldi	r25, 0x00	; 0
   1bfb0:	0e 94 f2 e3 	call	0x1c7e4	; 0x1c7e4 <fputc>
   1bfb4:	9a 94       	dec	r9
   1bfb6:	57 cf       	rjmp	.-338    	; 0x1be66 <vfprintf+0x2ac>
   1bfb8:	8f ef       	ldi	r24, 0xFF	; 255
   1bfba:	9f ef       	ldi	r25, 0xFF	; 255
   1bfbc:	84 cf       	rjmp	.-248    	; 0x1bec6 <vfprintf+0x30c>

0001bfbe <calloc>:
calloc():
   1bfbe:	0f 93       	push	r16
   1bfc0:	1f 93       	push	r17
   1bfc2:	cf 93       	push	r28
   1bfc4:	df 93       	push	r29
   1bfc6:	86 9f       	mul	r24, r22
   1bfc8:	80 01       	movw	r16, r0
   1bfca:	87 9f       	mul	r24, r23
   1bfcc:	10 0d       	add	r17, r0
   1bfce:	96 9f       	mul	r25, r22
   1bfd0:	10 0d       	add	r17, r0
   1bfd2:	11 24       	eor	r1, r1
   1bfd4:	c8 01       	movw	r24, r16
   1bfd6:	0e 94 02 d9 	call	0x1b204	; 0x1b204 <malloc>
   1bfda:	ec 01       	movw	r28, r24
   1bfdc:	00 97       	sbiw	r24, 0x00	; 0
   1bfde:	29 f0       	breq	.+10     	; 0x1bfea <calloc+0x2c>
   1bfe0:	a8 01       	movw	r20, r16
   1bfe2:	70 e0       	ldi	r23, 0x00	; 0
   1bfe4:	60 e0       	ldi	r22, 0x00	; 0
   1bfe6:	0e 94 d0 e3 	call	0x1c7a0	; 0x1c7a0 <memset>
   1bfea:	ce 01       	movw	r24, r28
   1bfec:	df 91       	pop	r29
   1bfee:	cf 91       	pop	r28
   1bff0:	1f 91       	pop	r17
   1bff2:	0f 91       	pop	r16
   1bff4:	08 95       	ret

0001bff6 <dtoa_prf>:
dtoa_prf():
   1bff6:	8f 92       	push	r8
   1bff8:	9f 92       	push	r9
   1bffa:	af 92       	push	r10
   1bffc:	bf 92       	push	r11
   1bffe:	cf 92       	push	r12
   1c000:	df 92       	push	r13
   1c002:	ef 92       	push	r14
   1c004:	ff 92       	push	r15
   1c006:	0f 93       	push	r16
   1c008:	1f 93       	push	r17
   1c00a:	cf 93       	push	r28
   1c00c:	df 93       	push	r29
   1c00e:	00 d0       	rcall	.+0      	; 0x1c010 <dtoa_prf+0x1a>
   1c010:	00 d0       	rcall	.+0      	; 0x1c012 <dtoa_prf+0x1c>
   1c012:	00 d0       	rcall	.+0      	; 0x1c014 <dtoa_prf+0x1e>
   1c014:	cd b7       	in	r28, 0x3d	; 61
   1c016:	de b7       	in	r29, 0x3e	; 62
   1c018:	6a 01       	movw	r12, r20
   1c01a:	f2 2e       	mov	r15, r18
   1c01c:	b0 2e       	mov	r11, r16
   1c01e:	10 2f       	mov	r17, r16
   1c020:	fb e3       	ldi	r31, 0x3B	; 59
   1c022:	af 2e       	mov	r10, r31
   1c024:	a0 16       	cp	r10, r16
   1c026:	08 f4       	brcc	.+2      	; 0x1c02a <dtoa_prf+0x34>
   1c028:	1b e3       	ldi	r17, 0x3B	; 59
   1c02a:	1f 5f       	subi	r17, 0xFF	; 255
   1c02c:	01 2f       	mov	r16, r17
   1c02e:	27 e0       	ldi	r18, 0x07	; 7
   1c030:	ae 01       	movw	r20, r28
   1c032:	4f 5f       	subi	r20, 0xFF	; 255
   1c034:	5f 4f       	sbci	r21, 0xFF	; 255
   1c036:	0e 94 d2 e2 	call	0x1c5a4	; 0x1c5a4 <__ftoa_engine>
   1c03a:	bc 01       	movw	r22, r24
   1c03c:	89 81       	ldd	r24, Y+1	; 0x01
   1c03e:	98 2f       	mov	r25, r24
   1c040:	99 70       	andi	r25, 0x09	; 9
   1c042:	91 30       	cpi	r25, 0x01	; 1
   1c044:	09 f4       	brne	.+2      	; 0x1c048 <dtoa_prf+0x52>
   1c046:	4e c0       	rjmp	.+156    	; 0x1c0e4 <dtoa_prf+0xee>
   1c048:	9b e2       	ldi	r25, 0x2B	; 43
   1c04a:	e1 fc       	sbrc	r14, 1
   1c04c:	04 c0       	rjmp	.+8      	; 0x1c056 <dtoa_prf+0x60>
   1c04e:	9e 2d       	mov	r25, r14
   1c050:	91 70       	andi	r25, 0x01	; 1
   1c052:	e0 fc       	sbrc	r14, 0
   1c054:	49 c0       	rjmp	.+146    	; 0x1c0e8 <dtoa_prf+0xf2>
   1c056:	5e 2d       	mov	r21, r14
   1c058:	50 71       	andi	r21, 0x10	; 16
   1c05a:	e8 2f       	mov	r30, r24
   1c05c:	e8 70       	andi	r30, 0x08	; 8
   1c05e:	83 ff       	sbrs	r24, 3
   1c060:	55 c0       	rjmp	.+170    	; 0x1c10c <dtoa_prf+0x116>
   1c062:	84 e0       	ldi	r24, 0x04	; 4
   1c064:	91 11       	cpse	r25, r1
   1c066:	01 c0       	rjmp	.+2      	; 0x1c06a <dtoa_prf+0x74>
   1c068:	83 e0       	ldi	r24, 0x03	; 3
   1c06a:	ef 2d       	mov	r30, r15
   1c06c:	e8 1b       	sub	r30, r24
   1c06e:	8f 15       	cp	r24, r15
   1c070:	08 f0       	brcs	.+2      	; 0x1c074 <dtoa_prf+0x7e>
   1c072:	e0 e0       	ldi	r30, 0x00	; 0
   1c074:	d6 01       	movw	r26, r12
   1c076:	8e 2f       	mov	r24, r30
   1c078:	20 e2       	ldi	r18, 0x20	; 32
   1c07a:	55 23       	and	r21, r21
   1c07c:	c9 f1       	breq	.+114    	; 0x1c0f0 <dtoa_prf+0xfa>
   1c07e:	99 23       	and	r25, r25
   1c080:	29 f0       	breq	.+10     	; 0x1c08c <dtoa_prf+0x96>
   1c082:	d6 01       	movw	r26, r12
   1c084:	9c 93       	st	X, r25
   1c086:	c6 01       	movw	r24, r12
   1c088:	01 96       	adiw	r24, 0x01	; 1
   1c08a:	6c 01       	movw	r12, r24
   1c08c:	96 01       	movw	r18, r12
   1c08e:	2d 5f       	subi	r18, 0xFD	; 253
   1c090:	3f 4f       	sbci	r19, 0xFF	; 255
   1c092:	e2 fe       	sbrs	r14, 2
   1c094:	33 c0       	rjmp	.+102    	; 0x1c0fc <dtoa_prf+0x106>
   1c096:	8e e4       	ldi	r24, 0x4E	; 78
   1c098:	d6 01       	movw	r26, r12
   1c09a:	8c 93       	st	X, r24
   1c09c:	91 e4       	ldi	r25, 0x41	; 65
   1c09e:	11 96       	adiw	r26, 0x01	; 1
   1c0a0:	9c 93       	st	X, r25
   1c0a2:	11 97       	sbiw	r26, 0x01	; 1
   1c0a4:	12 96       	adiw	r26, 0x02	; 2
   1c0a6:	8c 93       	st	X, r24
   1c0a8:	d9 01       	movw	r26, r18
   1c0aa:	8e 2f       	mov	r24, r30
   1c0ac:	90 e2       	ldi	r25, 0x20	; 32
   1c0ae:	81 11       	cpse	r24, r1
   1c0b0:	2a c0       	rjmp	.+84     	; 0x1c106 <dtoa_prf+0x110>
   1c0b2:	e2 0f       	add	r30, r18
   1c0b4:	f3 2f       	mov	r31, r19
   1c0b6:	f1 1d       	adc	r31, r1
   1c0b8:	10 82       	st	Z, r1
   1c0ba:	8e ef       	ldi	r24, 0xFE	; 254
   1c0bc:	9f ef       	ldi	r25, 0xFF	; 255
   1c0be:	29 96       	adiw	r28, 0x09	; 9
   1c0c0:	0f b6       	in	r0, 0x3f	; 63
   1c0c2:	f8 94       	cli
   1c0c4:	de bf       	out	0x3e, r29	; 62
   1c0c6:	0f be       	out	0x3f, r0	; 63
   1c0c8:	cd bf       	out	0x3d, r28	; 61
   1c0ca:	df 91       	pop	r29
   1c0cc:	cf 91       	pop	r28
   1c0ce:	1f 91       	pop	r17
   1c0d0:	0f 91       	pop	r16
   1c0d2:	ff 90       	pop	r15
   1c0d4:	ef 90       	pop	r14
   1c0d6:	df 90       	pop	r13
   1c0d8:	cf 90       	pop	r12
   1c0da:	bf 90       	pop	r11
   1c0dc:	af 90       	pop	r10
   1c0de:	9f 90       	pop	r9
   1c0e0:	8f 90       	pop	r8
   1c0e2:	08 95       	ret
   1c0e4:	9d e2       	ldi	r25, 0x2D	; 45
   1c0e6:	b7 cf       	rjmp	.-146    	; 0x1c056 <dtoa_prf+0x60>
   1c0e8:	90 e2       	ldi	r25, 0x20	; 32
   1c0ea:	b5 cf       	rjmp	.-150    	; 0x1c056 <dtoa_prf+0x60>
   1c0ec:	2d 93       	st	X+, r18
   1c0ee:	81 50       	subi	r24, 0x01	; 1
   1c0f0:	81 11       	cpse	r24, r1
   1c0f2:	fc cf       	rjmp	.-8      	; 0x1c0ec <dtoa_prf+0xf6>
   1c0f4:	ce 0e       	add	r12, r30
   1c0f6:	d1 1c       	adc	r13, r1
   1c0f8:	e0 e0       	ldi	r30, 0x00	; 0
   1c0fa:	c1 cf       	rjmp	.-126    	; 0x1c07e <dtoa_prf+0x88>
   1c0fc:	8e e6       	ldi	r24, 0x6E	; 110
   1c0fe:	d6 01       	movw	r26, r12
   1c100:	8c 93       	st	X, r24
   1c102:	91 e6       	ldi	r25, 0x61	; 97
   1c104:	cc cf       	rjmp	.-104    	; 0x1c09e <dtoa_prf+0xa8>
   1c106:	9d 93       	st	X+, r25
   1c108:	81 50       	subi	r24, 0x01	; 1
   1c10a:	d1 cf       	rjmp	.-94     	; 0x1c0ae <dtoa_prf+0xb8>
   1c10c:	48 2f       	mov	r20, r24
   1c10e:	44 70       	andi	r20, 0x04	; 4
   1c110:	82 ff       	sbrs	r24, 2
   1c112:	3d c0       	rjmp	.+122    	; 0x1c18e <dtoa_prf+0x198>
   1c114:	84 e0       	ldi	r24, 0x04	; 4
   1c116:	91 11       	cpse	r25, r1
   1c118:	01 c0       	rjmp	.+2      	; 0x1c11c <dtoa_prf+0x126>
   1c11a:	83 e0       	ldi	r24, 0x03	; 3
   1c11c:	8f 15       	cp	r24, r15
   1c11e:	10 f4       	brcc	.+4      	; 0x1c124 <dtoa_prf+0x12e>
   1c120:	ef 2d       	mov	r30, r15
   1c122:	e8 1b       	sub	r30, r24
   1c124:	d6 01       	movw	r26, r12
   1c126:	8e 2f       	mov	r24, r30
   1c128:	20 e2       	ldi	r18, 0x20	; 32
   1c12a:	55 23       	and	r21, r21
   1c12c:	09 f1       	breq	.+66     	; 0x1c170 <dtoa_prf+0x17a>
   1c12e:	99 23       	and	r25, r25
   1c130:	29 f0       	breq	.+10     	; 0x1c13c <dtoa_prf+0x146>
   1c132:	d6 01       	movw	r26, r12
   1c134:	9c 93       	st	X, r25
   1c136:	c6 01       	movw	r24, r12
   1c138:	01 96       	adiw	r24, 0x01	; 1
   1c13a:	6c 01       	movw	r12, r24
   1c13c:	96 01       	movw	r18, r12
   1c13e:	2d 5f       	subi	r18, 0xFD	; 253
   1c140:	3f 4f       	sbci	r19, 0xFF	; 255
   1c142:	e2 fe       	sbrs	r14, 2
   1c144:	1b c0       	rjmp	.+54     	; 0x1c17c <dtoa_prf+0x186>
   1c146:	89 e4       	ldi	r24, 0x49	; 73
   1c148:	d6 01       	movw	r26, r12
   1c14a:	8c 93       	st	X, r24
   1c14c:	8e e4       	ldi	r24, 0x4E	; 78
   1c14e:	11 96       	adiw	r26, 0x01	; 1
   1c150:	8c 93       	st	X, r24
   1c152:	11 97       	sbiw	r26, 0x01	; 1
   1c154:	86 e4       	ldi	r24, 0x46	; 70
   1c156:	12 96       	adiw	r26, 0x02	; 2
   1c158:	8c 93       	st	X, r24
   1c15a:	d9 01       	movw	r26, r18
   1c15c:	8e 2f       	mov	r24, r30
   1c15e:	90 e2       	ldi	r25, 0x20	; 32
   1c160:	88 23       	and	r24, r24
   1c162:	09 f4       	brne	.+2      	; 0x1c166 <dtoa_prf+0x170>
   1c164:	a6 cf       	rjmp	.-180    	; 0x1c0b2 <dtoa_prf+0xbc>
   1c166:	9d 93       	st	X+, r25
   1c168:	81 50       	subi	r24, 0x01	; 1
   1c16a:	fa cf       	rjmp	.-12     	; 0x1c160 <dtoa_prf+0x16a>
   1c16c:	2d 93       	st	X+, r18
   1c16e:	81 50       	subi	r24, 0x01	; 1
   1c170:	81 11       	cpse	r24, r1
   1c172:	fc cf       	rjmp	.-8      	; 0x1c16c <dtoa_prf+0x176>
   1c174:	ce 0e       	add	r12, r30
   1c176:	d1 1c       	adc	r13, r1
   1c178:	e0 e0       	ldi	r30, 0x00	; 0
   1c17a:	d9 cf       	rjmp	.-78     	; 0x1c12e <dtoa_prf+0x138>
   1c17c:	89 e6       	ldi	r24, 0x69	; 105
   1c17e:	d6 01       	movw	r26, r12
   1c180:	8c 93       	st	X, r24
   1c182:	8e e6       	ldi	r24, 0x6E	; 110
   1c184:	11 96       	adiw	r26, 0x01	; 1
   1c186:	8c 93       	st	X, r24
   1c188:	11 97       	sbiw	r26, 0x01	; 1
   1c18a:	86 e6       	ldi	r24, 0x66	; 102
   1c18c:	e4 cf       	rjmp	.-56     	; 0x1c156 <dtoa_prf+0x160>
   1c18e:	9b 01       	movw	r18, r22
   1c190:	77 ff       	sbrs	r23, 7
   1c192:	02 c0       	rjmp	.+4      	; 0x1c198 <dtoa_prf+0x1a2>
   1c194:	30 e0       	ldi	r19, 0x00	; 0
   1c196:	20 e0       	ldi	r18, 0x00	; 0
   1c198:	a1 e0       	ldi	r26, 0x01	; 1
   1c19a:	b0 e0       	ldi	r27, 0x00	; 0
   1c19c:	91 11       	cpse	r25, r1
   1c19e:	02 c0       	rjmp	.+4      	; 0x1c1a4 <dtoa_prf+0x1ae>
   1c1a0:	b0 e0       	ldi	r27, 0x00	; 0
   1c1a2:	a0 e0       	ldi	r26, 0x00	; 0
   1c1a4:	f9 01       	movw	r30, r18
   1c1a6:	31 96       	adiw	r30, 0x01	; 1
   1c1a8:	ae 0f       	add	r26, r30
   1c1aa:	bf 1f       	adc	r27, r31
   1c1ac:	8b 2c       	mov	r8, r11
   1c1ae:	91 2c       	mov	r9, r1
   1c1b0:	bb 20       	and	r11, r11
   1c1b2:	09 f4       	brne	.+2      	; 0x1c1b6 <dtoa_prf+0x1c0>
   1c1b4:	61 c0       	rjmp	.+194    	; 0x1c278 <dtoa_prf+0x282>
   1c1b6:	54 01       	movw	r10, r8
   1c1b8:	ef ef       	ldi	r30, 0xFF	; 255
   1c1ba:	ae 1a       	sub	r10, r30
   1c1bc:	be 0a       	sbc	r11, r30
   1c1be:	aa 0d       	add	r26, r10
   1c1c0:	bb 1d       	adc	r27, r11
   1c1c2:	fa 16       	cp	r15, r26
   1c1c4:	1b 06       	cpc	r1, r27
   1c1c6:	19 f0       	breq	.+6      	; 0x1c1ce <dtoa_prf+0x1d8>
   1c1c8:	14 f0       	brlt	.+4      	; 0x1c1ce <dtoa_prf+0x1d8>
   1c1ca:	4f 2d       	mov	r20, r15
   1c1cc:	4a 1b       	sub	r20, r26
   1c1ce:	51 11       	cpse	r21, r1
   1c1d0:	88 c0       	rjmp	.+272    	; 0x1c2e2 <dtoa_prf+0x2ec>
   1c1d2:	e3 fc       	sbrc	r14, 3
   1c1d4:	59 c0       	rjmp	.+178    	; 0x1c288 <dtoa_prf+0x292>
   1c1d6:	76 01       	movw	r14, r12
   1c1d8:	a4 2f       	mov	r26, r20
   1c1da:	b0 e2       	ldi	r27, 0x20	; 32
   1c1dc:	a1 11       	cpse	r26, r1
   1c1de:	4f c0       	rjmp	.+158    	; 0x1c27e <dtoa_prf+0x288>
   1c1e0:	c4 0e       	add	r12, r20
   1c1e2:	d1 1c       	adc	r13, r1
   1c1e4:	99 23       	and	r25, r25
   1c1e6:	09 f4       	brne	.+2      	; 0x1c1ea <dtoa_prf+0x1f4>
   1c1e8:	5b c0       	rjmp	.+182    	; 0x1c2a0 <dtoa_prf+0x2aa>
   1c1ea:	40 e0       	ldi	r20, 0x00	; 0
   1c1ec:	d6 01       	movw	r26, r12
   1c1ee:	11 96       	adiw	r26, 0x01	; 1
   1c1f0:	f6 01       	movw	r30, r12
   1c1f2:	90 83       	st	Z, r25
   1c1f4:	6d 01       	movw	r12, r26
   1c1f6:	55 23       	and	r21, r21
   1c1f8:	09 f4       	brne	.+2      	; 0x1c1fc <dtoa_prf+0x206>
   1c1fa:	48 c0       	rjmp	.+144    	; 0x1c28c <dtoa_prf+0x296>
   1c1fc:	01 2f       	mov	r16, r17
   1c1fe:	06 0f       	add	r16, r22
   1c200:	9a 81       	ldd	r25, Y+2	; 0x02
   1c202:	58 2f       	mov	r21, r24
   1c204:	50 71       	andi	r21, 0x10	; 16
   1c206:	84 ff       	sbrs	r24, 4
   1c208:	03 c0       	rjmp	.+6      	; 0x1c210 <dtoa_prf+0x21a>
   1c20a:	91 33       	cpi	r25, 0x31	; 49
   1c20c:	09 f4       	brne	.+2      	; 0x1c210 <dtoa_prf+0x21a>
   1c20e:	01 50       	subi	r16, 0x01	; 1
   1c210:	10 16       	cp	r1, r16
   1c212:	0c f0       	brlt	.+2      	; 0x1c216 <dtoa_prf+0x220>
   1c214:	47 c0       	rjmp	.+142    	; 0x1c2a4 <dtoa_prf+0x2ae>
   1c216:	09 30       	cpi	r16, 0x09	; 9
   1c218:	08 f0       	brcs	.+2      	; 0x1c21c <dtoa_prf+0x226>
   1c21a:	08 e0       	ldi	r16, 0x08	; 8
   1c21c:	ee e2       	ldi	r30, 0x2E	; 46
   1c21e:	fe 2e       	mov	r15, r30
   1c220:	5b 01       	movw	r10, r22
   1c222:	a0 1a       	sub	r10, r16
   1c224:	b1 08       	sbc	r11, r1
   1c226:	85 01       	movw	r16, r10
   1c228:	91 94       	neg	r9
   1c22a:	81 94       	neg	r8
   1c22c:	91 08       	sbc	r9, r1
   1c22e:	2f 3f       	cpi	r18, 0xFF	; 255
   1c230:	32 07       	cpc	r19, r18
   1c232:	29 f4       	brne	.+10     	; 0x1c23e <dtoa_prf+0x248>
   1c234:	d6 01       	movw	r26, r12
   1c236:	fc 92       	st	X, r15
   1c238:	f6 01       	movw	r30, r12
   1c23a:	31 96       	adiw	r30, 0x01	; 1
   1c23c:	6f 01       	movw	r12, r30
   1c23e:	62 17       	cp	r22, r18
   1c240:	73 07       	cpc	r23, r19
   1c242:	94 f1       	brlt	.+100    	; 0x1c2a8 <dtoa_prf+0x2b2>
   1c244:	02 17       	cp	r16, r18
   1c246:	13 07       	cpc	r17, r19
   1c248:	7c f5       	brge	.+94     	; 0x1c2a8 <dtoa_prf+0x2b2>
   1c24a:	db 01       	movw	r26, r22
   1c24c:	a2 1b       	sub	r26, r18
   1c24e:	b3 0b       	sbc	r27, r19
   1c250:	aa 24       	eor	r10, r10
   1c252:	a3 94       	inc	r10
   1c254:	b1 2c       	mov	r11, r1
   1c256:	ac 0e       	add	r10, r28
   1c258:	bd 1e       	adc	r11, r29
   1c25a:	aa 0d       	add	r26, r10
   1c25c:	bb 1d       	adc	r27, r11
   1c25e:	11 96       	adiw	r26, 0x01	; 1
   1c260:	8c 91       	ld	r24, X
   1c262:	21 50       	subi	r18, 0x01	; 1
   1c264:	31 09       	sbc	r19, r1
   1c266:	d6 01       	movw	r26, r12
   1c268:	11 96       	adiw	r26, 0x01	; 1
   1c26a:	28 15       	cp	r18, r8
   1c26c:	39 05       	cpc	r19, r9
   1c26e:	f4 f0       	brlt	.+60     	; 0x1c2ac <dtoa_prf+0x2b6>
   1c270:	f6 01       	movw	r30, r12
   1c272:	80 83       	st	Z, r24
   1c274:	6d 01       	movw	r12, r26
   1c276:	db cf       	rjmp	.-74     	; 0x1c22e <dtoa_prf+0x238>
   1c278:	b1 2c       	mov	r11, r1
   1c27a:	a1 2c       	mov	r10, r1
   1c27c:	a0 cf       	rjmp	.-192    	; 0x1c1be <dtoa_prf+0x1c8>
   1c27e:	f7 01       	movw	r30, r14
   1c280:	b1 93       	st	Z+, r27
   1c282:	7f 01       	movw	r14, r30
   1c284:	a1 50       	subi	r26, 0x01	; 1
   1c286:	aa cf       	rjmp	.-172    	; 0x1c1dc <dtoa_prf+0x1e6>
   1c288:	91 11       	cpse	r25, r1
   1c28a:	b0 cf       	rjmp	.-160    	; 0x1c1ec <dtoa_prf+0x1f6>
   1c28c:	d6 01       	movw	r26, r12
   1c28e:	94 2f       	mov	r25, r20
   1c290:	50 e3       	ldi	r21, 0x30	; 48
   1c292:	02 c0       	rjmp	.+4      	; 0x1c298 <dtoa_prf+0x2a2>
   1c294:	5d 93       	st	X+, r21
   1c296:	91 50       	subi	r25, 0x01	; 1
   1c298:	91 11       	cpse	r25, r1
   1c29a:	fc cf       	rjmp	.-8      	; 0x1c294 <dtoa_prf+0x29e>
   1c29c:	c4 0e       	add	r12, r20
   1c29e:	d1 1c       	adc	r13, r1
   1c2a0:	40 e0       	ldi	r20, 0x00	; 0
   1c2a2:	ac cf       	rjmp	.-168    	; 0x1c1fc <dtoa_prf+0x206>
   1c2a4:	01 e0       	ldi	r16, 0x01	; 1
   1c2a6:	ba cf       	rjmp	.-140    	; 0x1c21c <dtoa_prf+0x226>
   1c2a8:	80 e3       	ldi	r24, 0x30	; 48
   1c2aa:	db cf       	rjmp	.-74     	; 0x1c262 <dtoa_prf+0x26c>
   1c2ac:	62 17       	cp	r22, r18
   1c2ae:	73 07       	cpc	r23, r19
   1c2b0:	31 f4       	brne	.+12     	; 0x1c2be <dtoa_prf+0x2c8>
   1c2b2:	96 33       	cpi	r25, 0x36	; 54
   1c2b4:	88 f4       	brcc	.+34     	; 0x1c2d8 <dtoa_prf+0x2e2>
   1c2b6:	95 33       	cpi	r25, 0x35	; 53
   1c2b8:	11 f4       	brne	.+4      	; 0x1c2be <dtoa_prf+0x2c8>
   1c2ba:	55 23       	and	r21, r21
   1c2bc:	69 f0       	breq	.+26     	; 0x1c2d8 <dtoa_prf+0x2e2>
   1c2be:	f6 01       	movw	r30, r12
   1c2c0:	80 83       	st	Z, r24
   1c2c2:	fd 01       	movw	r30, r26
   1c2c4:	84 2f       	mov	r24, r20
   1c2c6:	90 e2       	ldi	r25, 0x20	; 32
   1c2c8:	81 11       	cpse	r24, r1
   1c2ca:	08 c0       	rjmp	.+16     	; 0x1c2dc <dtoa_prf+0x2e6>
   1c2cc:	a4 0f       	add	r26, r20
   1c2ce:	b1 1d       	adc	r27, r1
   1c2d0:	1c 92       	st	X, r1
   1c2d2:	90 e0       	ldi	r25, 0x00	; 0
   1c2d4:	80 e0       	ldi	r24, 0x00	; 0
   1c2d6:	f3 ce       	rjmp	.-538    	; 0x1c0be <dtoa_prf+0xc8>
   1c2d8:	81 e3       	ldi	r24, 0x31	; 49
   1c2da:	f1 cf       	rjmp	.-30     	; 0x1c2be <dtoa_prf+0x2c8>
   1c2dc:	91 93       	st	Z+, r25
   1c2de:	81 50       	subi	r24, 0x01	; 1
   1c2e0:	f3 cf       	rjmp	.-26     	; 0x1c2c8 <dtoa_prf+0x2d2>
   1c2e2:	91 11       	cpse	r25, r1
   1c2e4:	83 cf       	rjmp	.-250    	; 0x1c1ec <dtoa_prf+0x1f6>
   1c2e6:	8a cf       	rjmp	.-236    	; 0x1c1fc <dtoa_prf+0x206>

0001c2e8 <strtod>:
strtod():
   1c2e8:	8f 92       	push	r8
   1c2ea:	9f 92       	push	r9
   1c2ec:	af 92       	push	r10
   1c2ee:	bf 92       	push	r11
   1c2f0:	cf 92       	push	r12
   1c2f2:	df 92       	push	r13
   1c2f4:	ef 92       	push	r14
   1c2f6:	ff 92       	push	r15
   1c2f8:	0f 93       	push	r16
   1c2fa:	1f 93       	push	r17
   1c2fc:	cf 93       	push	r28
   1c2fe:	df 93       	push	r29
   1c300:	5c 01       	movw	r10, r24
   1c302:	7b 01       	movw	r14, r22
   1c304:	61 15       	cp	r22, r1
   1c306:	71 05       	cpc	r23, r1
   1c308:	19 f0       	breq	.+6      	; 0x1c310 <strtod+0x28>
   1c30a:	db 01       	movw	r26, r22
   1c30c:	8d 93       	st	X+, r24
   1c30e:	9c 93       	st	X, r25
   1c310:	85 01       	movw	r16, r10
   1c312:	0f 5f       	subi	r16, 0xFF	; 255
   1c314:	1f 4f       	sbci	r17, 0xFF	; 255
   1c316:	f5 01       	movw	r30, r10
   1c318:	d0 81       	ld	r29, Z
   1c31a:	8d 2f       	mov	r24, r29
   1c31c:	90 e0       	ldi	r25, 0x00	; 0
   1c31e:	0e 94 32 dc 	call	0x1b864	; 0x1b864 <isspace>
   1c322:	6c 01       	movw	r12, r24
   1c324:	89 2b       	or	r24, r25
   1c326:	b9 f5       	brne	.+110    	; 0x1c396 <strtod+0xae>
   1c328:	dd 32       	cpi	r29, 0x2D	; 45
   1c32a:	b9 f5       	brne	.+110    	; 0x1c39a <strtod+0xb2>
   1c32c:	0f 5f       	subi	r16, 0xFF	; 255
   1c32e:	1f 4f       	sbci	r17, 0xFF	; 255
   1c330:	d5 01       	movw	r26, r10
   1c332:	11 96       	adiw	r26, 0x01	; 1
   1c334:	dc 91       	ld	r29, X
   1c336:	c1 e0       	ldi	r28, 0x01	; 1
   1c338:	58 01       	movw	r10, r16
   1c33a:	f1 e0       	ldi	r31, 0x01	; 1
   1c33c:	af 1a       	sub	r10, r31
   1c33e:	b1 08       	sbc	r11, r1
   1c340:	43 e0       	ldi	r20, 0x03	; 3
   1c342:	50 e0       	ldi	r21, 0x00	; 0
   1c344:	68 e1       	ldi	r22, 0x18	; 24
   1c346:	74 e0       	ldi	r23, 0x04	; 4
   1c348:	c5 01       	movw	r24, r10
   1c34a:	0e 94 ad e3 	call	0x1c75a	; 0x1c75a <strncasecmp_P>
   1c34e:	89 2b       	or	r24, r25
   1c350:	69 f5       	brne	.+90     	; 0x1c3ac <strtod+0xc4>
   1c352:	68 01       	movw	r12, r16
   1c354:	82 e0       	ldi	r24, 0x02	; 2
   1c356:	c8 0e       	add	r12, r24
   1c358:	d1 1c       	adc	r13, r1
   1c35a:	45 e0       	ldi	r20, 0x05	; 5
   1c35c:	50 e0       	ldi	r21, 0x00	; 0
   1c35e:	63 e1       	ldi	r22, 0x13	; 19
   1c360:	74 e0       	ldi	r23, 0x04	; 4
   1c362:	c6 01       	movw	r24, r12
   1c364:	0e 94 ad e3 	call	0x1c75a	; 0x1c75a <strncasecmp_P>
   1c368:	89 2b       	or	r24, r25
   1c36a:	21 f4       	brne	.+8      	; 0x1c374 <strtod+0x8c>
   1c36c:	68 01       	movw	r12, r16
   1c36e:	97 e0       	ldi	r25, 0x07	; 7
   1c370:	c9 0e       	add	r12, r25
   1c372:	d1 1c       	adc	r13, r1
   1c374:	e1 14       	cp	r14, r1
   1c376:	f1 04       	cpc	r15, r1
   1c378:	19 f0       	breq	.+6      	; 0x1c380 <strtod+0x98>
   1c37a:	d7 01       	movw	r26, r14
   1c37c:	cd 92       	st	X+, r12
   1c37e:	dc 92       	st	X, r13
   1c380:	60 e0       	ldi	r22, 0x00	; 0
   1c382:	70 e0       	ldi	r23, 0x00	; 0
   1c384:	80 e8       	ldi	r24, 0x80	; 128
   1c386:	9f ef       	ldi	r25, 0xFF	; 255
   1c388:	c1 11       	cpse	r28, r1
   1c38a:	ff c0       	rjmp	.+510    	; 0x1c58a <strtod+0x2a2>
   1c38c:	60 e0       	ldi	r22, 0x00	; 0
   1c38e:	70 e0       	ldi	r23, 0x00	; 0
   1c390:	80 e8       	ldi	r24, 0x80	; 128
   1c392:	9f e7       	ldi	r25, 0x7F	; 127
   1c394:	fa c0       	rjmp	.+500    	; 0x1c58a <strtod+0x2a2>
   1c396:	58 01       	movw	r10, r16
   1c398:	bb cf       	rjmp	.-138    	; 0x1c310 <strtod+0x28>
   1c39a:	db 32       	cpi	r29, 0x2B	; 43
   1c39c:	29 f4       	brne	.+10     	; 0x1c3a8 <strtod+0xc0>
   1c39e:	85 01       	movw	r16, r10
   1c3a0:	0e 5f       	subi	r16, 0xFE	; 254
   1c3a2:	1f 4f       	sbci	r17, 0xFF	; 255
   1c3a4:	f5 01       	movw	r30, r10
   1c3a6:	d1 81       	ldd	r29, Z+1	; 0x01
   1c3a8:	c0 e0       	ldi	r28, 0x00	; 0
   1c3aa:	c6 cf       	rjmp	.-116    	; 0x1c338 <strtod+0x50>
   1c3ac:	43 e0       	ldi	r20, 0x03	; 3
   1c3ae:	50 e0       	ldi	r21, 0x00	; 0
   1c3b0:	60 e1       	ldi	r22, 0x10	; 16
   1c3b2:	74 e0       	ldi	r23, 0x04	; 4
   1c3b4:	c5 01       	movw	r24, r10
   1c3b6:	0e 94 ad e3 	call	0x1c75a	; 0x1c75a <strncasecmp_P>
   1c3ba:	89 2b       	or	r24, r25
   1c3bc:	e9 f0       	breq	.+58     	; 0x1c3f8 <strtod+0x110>
   1c3be:	f8 01       	movw	r30, r16
   1c3c0:	10 e0       	ldi	r17, 0x00	; 0
   1c3c2:	00 e0       	ldi	r16, 0x00	; 0
   1c3c4:	20 e0       	ldi	r18, 0x00	; 0
   1c3c6:	30 e0       	ldi	r19, 0x00	; 0
   1c3c8:	a9 01       	movw	r20, r18
   1c3ca:	5f 01       	movw	r10, r30
   1c3cc:	b0 ed       	ldi	r27, 0xD0	; 208
   1c3ce:	8b 2e       	mov	r8, r27
   1c3d0:	8d 0e       	add	r8, r29
   1c3d2:	89 e0       	ldi	r24, 0x09	; 9
   1c3d4:	88 15       	cp	r24, r8
   1c3d6:	c8 f1       	brcs	.+114    	; 0x1c44a <strtod+0x162>
   1c3d8:	9c 2e       	mov	r9, r28
   1c3da:	68 94       	set
   1c3dc:	91 f8       	bld	r9, 1
   1c3de:	8c 2f       	mov	r24, r28
   1c3e0:	88 70       	andi	r24, 0x08	; 8
   1c3e2:	c2 ff       	sbrs	r28, 2
   1c3e4:	16 c0       	rjmp	.+44     	; 0x1c412 <strtod+0x12a>
   1c3e6:	81 11       	cpse	r24, r1
   1c3e8:	02 c0       	rjmp	.+4      	; 0x1c3ee <strtod+0x106>
   1c3ea:	0f 5f       	subi	r16, 0xFF	; 255
   1c3ec:	1f 4f       	sbci	r17, 0xFF	; 255
   1c3ee:	31 96       	adiw	r30, 0x01	; 1
   1c3f0:	d5 01       	movw	r26, r10
   1c3f2:	dc 91       	ld	r29, X
   1c3f4:	c9 2d       	mov	r28, r9
   1c3f6:	e9 cf       	rjmp	.-46     	; 0x1c3ca <strtod+0xe2>
   1c3f8:	e1 14       	cp	r14, r1
   1c3fa:	f1 04       	cpc	r15, r1
   1c3fc:	29 f0       	breq	.+10     	; 0x1c408 <strtod+0x120>
   1c3fe:	0e 5f       	subi	r16, 0xFE	; 254
   1c400:	1f 4f       	sbci	r17, 0xFF	; 255
   1c402:	f7 01       	movw	r30, r14
   1c404:	11 83       	std	Z+1, r17	; 0x01
   1c406:	00 83       	st	Z, r16
   1c408:	60 e0       	ldi	r22, 0x00	; 0
   1c40a:	70 e0       	ldi	r23, 0x00	; 0
   1c40c:	80 ec       	ldi	r24, 0xC0	; 192
   1c40e:	9f e7       	ldi	r25, 0x7F	; 127
   1c410:	bc c0       	rjmp	.+376    	; 0x1c58a <strtod+0x2a2>
   1c412:	88 23       	and	r24, r24
   1c414:	11 f0       	breq	.+4      	; 0x1c41a <strtod+0x132>
   1c416:	01 50       	subi	r16, 0x01	; 1
   1c418:	11 09       	sbc	r17, r1
   1c41a:	a5 e0       	ldi	r26, 0x05	; 5
   1c41c:	b0 e0       	ldi	r27, 0x00	; 0
   1c41e:	0e 94 d9 d8 	call	0x1b1b2	; 0x1b1b2 <__muluhisi3>
   1c422:	9b 01       	movw	r18, r22
   1c424:	ac 01       	movw	r20, r24
   1c426:	22 0f       	add	r18, r18
   1c428:	33 1f       	adc	r19, r19
   1c42a:	44 1f       	adc	r20, r20
   1c42c:	55 1f       	adc	r21, r21
   1c42e:	28 0d       	add	r18, r8
   1c430:	31 1d       	adc	r19, r1
   1c432:	41 1d       	adc	r20, r1
   1c434:	51 1d       	adc	r21, r1
   1c436:	28 39       	cpi	r18, 0x98	; 152
   1c438:	99 e9       	ldi	r25, 0x99	; 153
   1c43a:	39 07       	cpc	r19, r25
   1c43c:	49 07       	cpc	r20, r25
   1c43e:	99 e1       	ldi	r25, 0x19	; 25
   1c440:	59 07       	cpc	r21, r25
   1c442:	a8 f2       	brcs	.-86     	; 0x1c3ee <strtod+0x106>
   1c444:	c6 60       	ori	r28, 0x06	; 6
   1c446:	9c 2e       	mov	r9, r28
   1c448:	d2 cf       	rjmp	.-92     	; 0x1c3ee <strtod+0x106>
   1c44a:	ae ef       	ldi	r26, 0xFE	; 254
   1c44c:	8a 12       	cpse	r8, r26
   1c44e:	06 c0       	rjmp	.+12     	; 0x1c45c <strtod+0x174>
   1c450:	c3 fd       	sbrc	r28, 3
   1c452:	3c c0       	rjmp	.+120    	; 0x1c4cc <strtod+0x1e4>
   1c454:	9c 2e       	mov	r9, r28
   1c456:	68 94       	set
   1c458:	93 f8       	bld	r9, 3
   1c45a:	c9 cf       	rjmp	.-110    	; 0x1c3ee <strtod+0x106>
   1c45c:	df 7d       	andi	r29, 0xDF	; 223
   1c45e:	d5 34       	cpi	r29, 0x45	; 69
   1c460:	a9 f5       	brne	.+106    	; 0x1c4cc <strtod+0x1e4>
   1c462:	80 81       	ld	r24, Z
   1c464:	8d 32       	cpi	r24, 0x2D	; 45
   1c466:	39 f4       	brne	.+14     	; 0x1c476 <strtod+0x18e>
   1c468:	c0 61       	ori	r28, 0x10	; 16
   1c46a:	df 01       	movw	r26, r30
   1c46c:	12 96       	adiw	r26, 0x02	; 2
   1c46e:	81 81       	ldd	r24, Z+1	; 0x01
   1c470:	62 e0       	ldi	r22, 0x02	; 2
   1c472:	70 e0       	ldi	r23, 0x00	; 0
   1c474:	06 c0       	rjmp	.+12     	; 0x1c482 <strtod+0x19a>
   1c476:	df 01       	movw	r26, r30
   1c478:	8b 32       	cpi	r24, 0x2B	; 43
   1c47a:	c1 f3       	breq	.-16     	; 0x1c46c <strtod+0x184>
   1c47c:	11 96       	adiw	r26, 0x01	; 1
   1c47e:	61 e0       	ldi	r22, 0x01	; 1
   1c480:	70 e0       	ldi	r23, 0x00	; 0
   1c482:	80 53       	subi	r24, 0x30	; 48
   1c484:	5d 01       	movw	r10, r26
   1c486:	a6 1a       	sub	r10, r22
   1c488:	b7 0a       	sbc	r11, r23
   1c48a:	8a 30       	cpi	r24, 0x0A	; 10
   1c48c:	f8 f4       	brcc	.+62     	; 0x1c4cc <strtod+0x1e4>
   1c48e:	e0 e8       	ldi	r30, 0x80	; 128
   1c490:	ce 16       	cp	r12, r30
   1c492:	ec e0       	ldi	r30, 0x0C	; 12
   1c494:	de 06       	cpc	r13, r30
   1c496:	5c f4       	brge	.+22     	; 0x1c4ae <strtod+0x1c6>
   1c498:	b6 01       	movw	r22, r12
   1c49a:	66 0f       	add	r22, r22
   1c49c:	77 1f       	adc	r23, r23
   1c49e:	66 0f       	add	r22, r22
   1c4a0:	77 1f       	adc	r23, r23
   1c4a2:	c6 0e       	add	r12, r22
   1c4a4:	d7 1e       	adc	r13, r23
   1c4a6:	cc 0c       	add	r12, r12
   1c4a8:	dd 1c       	adc	r13, r13
   1c4aa:	c8 0e       	add	r12, r24
   1c4ac:	d1 1c       	adc	r13, r1
   1c4ae:	5d 01       	movw	r10, r26
   1c4b0:	ff ef       	ldi	r31, 0xFF	; 255
   1c4b2:	af 1a       	sub	r10, r31
   1c4b4:	bf 0a       	sbc	r11, r31
   1c4b6:	8c 91       	ld	r24, X
   1c4b8:	80 53       	subi	r24, 0x30	; 48
   1c4ba:	8a 30       	cpi	r24, 0x0A	; 10
   1c4bc:	a8 f1       	brcs	.+106    	; 0x1c528 <strtod+0x240>
   1c4be:	c4 ff       	sbrs	r28, 4
   1c4c0:	03 c0       	rjmp	.+6      	; 0x1c4c8 <strtod+0x1e0>
   1c4c2:	d1 94       	neg	r13
   1c4c4:	c1 94       	neg	r12
   1c4c6:	d1 08       	sbc	r13, r1
   1c4c8:	0c 0d       	add	r16, r12
   1c4ca:	1d 1d       	adc	r17, r13
   1c4cc:	c1 ff       	sbrs	r28, 1
   1c4ce:	09 c0       	rjmp	.+18     	; 0x1c4e2 <strtod+0x1fa>
   1c4d0:	e1 14       	cp	r14, r1
   1c4d2:	f1 04       	cpc	r15, r1
   1c4d4:	31 f0       	breq	.+12     	; 0x1c4e2 <strtod+0x1fa>
   1c4d6:	81 e0       	ldi	r24, 0x01	; 1
   1c4d8:	a8 1a       	sub	r10, r24
   1c4da:	b1 08       	sbc	r11, r1
   1c4dc:	d7 01       	movw	r26, r14
   1c4de:	ad 92       	st	X+, r10
   1c4e0:	bc 92       	st	X, r11
   1c4e2:	ca 01       	movw	r24, r20
   1c4e4:	b9 01       	movw	r22, r18
   1c4e6:	0e 94 19 d7 	call	0x1ae32	; 0x1ae32 <__floatunsisf>
   1c4ea:	c3 70       	andi	r28, 0x03	; 3
   1c4ec:	c3 30       	cpi	r28, 0x03	; 3
   1c4ee:	09 f4       	brne	.+2      	; 0x1c4f2 <strtod+0x20a>
   1c4f0:	90 58       	subi	r25, 0x80	; 128
   1c4f2:	4b 01       	movw	r8, r22
   1c4f4:	5c 01       	movw	r10, r24
   1c4f6:	20 e0       	ldi	r18, 0x00	; 0
   1c4f8:	30 e0       	ldi	r19, 0x00	; 0
   1c4fa:	a9 01       	movw	r20, r18
   1c4fc:	0e 94 6c d6 	call	0x1acd8	; 0x1acd8 <__cmpsf2>
   1c500:	88 23       	and	r24, r24
   1c502:	09 f4       	brne	.+2      	; 0x1c506 <strtod+0x21e>
   1c504:	40 c0       	rjmp	.+128    	; 0x1c586 <strtod+0x29e>
   1c506:	c7 e4       	ldi	r28, 0x47	; 71
   1c508:	d4 e0       	ldi	r29, 0x04	; 4
   1c50a:	17 ff       	sbrs	r17, 7
   1c50c:	05 c0       	rjmp	.+10     	; 0x1c518 <strtod+0x230>
   1c50e:	11 95       	neg	r17
   1c510:	01 95       	neg	r16
   1c512:	11 09       	sbc	r17, r1
   1c514:	cf e2       	ldi	r28, 0x2F	; 47
   1c516:	d4 e0       	ldi	r29, 0x04	; 4
   1c518:	6e 01       	movw	r12, r28
   1c51a:	b8 e1       	ldi	r27, 0x18	; 24
   1c51c:	cb 1a       	sub	r12, r27
   1c51e:	d1 08       	sbc	r13, r1
   1c520:	80 e2       	ldi	r24, 0x20	; 32
   1c522:	e8 2e       	mov	r14, r24
   1c524:	f1 2c       	mov	r15, r1
   1c526:	0f c0       	rjmp	.+30     	; 0x1c546 <strtod+0x25e>
   1c528:	d5 01       	movw	r26, r10
   1c52a:	b1 cf       	rjmp	.-158    	; 0x1c48e <strtod+0x1a6>
   1c52c:	fe 01       	movw	r30, r28
   1c52e:	25 91       	lpm	r18, Z+
   1c530:	35 91       	lpm	r19, Z+
   1c532:	45 91       	lpm	r20, Z+
   1c534:	54 91       	lpm	r21, Z
   1c536:	0e 19       	sub	r16, r14
   1c538:	1f 09       	sbc	r17, r15
   1c53a:	c5 01       	movw	r24, r10
   1c53c:	b4 01       	movw	r22, r8
   1c53e:	0e 94 d0 d7 	call	0x1afa0	; 0x1afa0 <__mulsf3>
   1c542:	4b 01       	movw	r8, r22
   1c544:	5c 01       	movw	r10, r24
   1c546:	d5 01       	movw	r26, r10
   1c548:	c4 01       	movw	r24, r8
   1c54a:	0e 15       	cp	r16, r14
   1c54c:	1f 05       	cpc	r17, r15
   1c54e:	74 f7       	brge	.-36     	; 0x1c52c <strtod+0x244>
   1c550:	24 97       	sbiw	r28, 0x04	; 4
   1c552:	f5 94       	asr	r15
   1c554:	e7 94       	ror	r14
   1c556:	cc 16       	cp	r12, r28
   1c558:	dd 06       	cpc	r13, r29
   1c55a:	a9 f7       	brne	.-22     	; 0x1c546 <strtod+0x25e>
   1c55c:	8a 2f       	mov	r24, r26
   1c55e:	88 0f       	add	r24, r24
   1c560:	8b 2f       	mov	r24, r27
   1c562:	88 1f       	adc	r24, r24
   1c564:	8f 3f       	cpi	r24, 0xFF	; 255
   1c566:	49 f0       	breq	.+18     	; 0x1c57a <strtod+0x292>
   1c568:	20 e0       	ldi	r18, 0x00	; 0
   1c56a:	30 e0       	ldi	r19, 0x00	; 0
   1c56c:	a9 01       	movw	r20, r18
   1c56e:	c5 01       	movw	r24, r10
   1c570:	b4 01       	movw	r22, r8
   1c572:	0e 94 6c d6 	call	0x1acd8	; 0x1acd8 <__cmpsf2>
   1c576:	81 11       	cpse	r24, r1
   1c578:	06 c0       	rjmp	.+12     	; 0x1c586 <strtod+0x29e>
   1c57a:	82 e2       	ldi	r24, 0x22	; 34
   1c57c:	90 e0       	ldi	r25, 0x00	; 0
   1c57e:	90 93 c7 12 	sts	0x12C7, r25	; 0x8012c7 <errno+0x1>
   1c582:	80 93 c6 12 	sts	0x12C6, r24	; 0x8012c6 <errno>
   1c586:	c5 01       	movw	r24, r10
   1c588:	b4 01       	movw	r22, r8
   1c58a:	df 91       	pop	r29
   1c58c:	cf 91       	pop	r28
   1c58e:	1f 91       	pop	r17
   1c590:	0f 91       	pop	r16
   1c592:	ff 90       	pop	r15
   1c594:	ef 90       	pop	r14
   1c596:	df 90       	pop	r13
   1c598:	cf 90       	pop	r12
   1c59a:	bf 90       	pop	r11
   1c59c:	af 90       	pop	r10
   1c59e:	9f 90       	pop	r9
   1c5a0:	8f 90       	pop	r8
   1c5a2:	08 95       	ret

0001c5a4 <__ftoa_engine>:
__ftoa_engine():
   1c5a4:	28 30       	cpi	r18, 0x08	; 8
   1c5a6:	08 f0       	brcs	.+2      	; 0x1c5aa <__ftoa_engine+0x6>
   1c5a8:	27 e0       	ldi	r18, 0x07	; 7
   1c5aa:	33 27       	eor	r19, r19
   1c5ac:	da 01       	movw	r26, r20
   1c5ae:	99 0f       	add	r25, r25
   1c5b0:	31 1d       	adc	r19, r1
   1c5b2:	87 fd       	sbrc	r24, 7
   1c5b4:	91 60       	ori	r25, 0x01	; 1
   1c5b6:	00 96       	adiw	r24, 0x00	; 0
   1c5b8:	61 05       	cpc	r22, r1
   1c5ba:	71 05       	cpc	r23, r1
   1c5bc:	39 f4       	brne	.+14     	; 0x1c5cc <__ftoa_engine+0x28>
   1c5be:	32 60       	ori	r19, 0x02	; 2
   1c5c0:	2e 5f       	subi	r18, 0xFE	; 254
   1c5c2:	3d 93       	st	X+, r19
   1c5c4:	30 e3       	ldi	r19, 0x30	; 48
   1c5c6:	2a 95       	dec	r18
   1c5c8:	e1 f7       	brne	.-8      	; 0x1c5c2 <__ftoa_engine+0x1e>
   1c5ca:	08 95       	ret
   1c5cc:	9f 3f       	cpi	r25, 0xFF	; 255
   1c5ce:	30 f0       	brcs	.+12     	; 0x1c5dc <__ftoa_engine+0x38>
   1c5d0:	80 38       	cpi	r24, 0x80	; 128
   1c5d2:	71 05       	cpc	r23, r1
   1c5d4:	61 05       	cpc	r22, r1
   1c5d6:	09 f0       	breq	.+2      	; 0x1c5da <__ftoa_engine+0x36>
   1c5d8:	3c 5f       	subi	r19, 0xFC	; 252
   1c5da:	3c 5f       	subi	r19, 0xFC	; 252
   1c5dc:	3d 93       	st	X+, r19
   1c5de:	91 30       	cpi	r25, 0x01	; 1
   1c5e0:	08 f0       	brcs	.+2      	; 0x1c5e4 <__ftoa_engine+0x40>
   1c5e2:	80 68       	ori	r24, 0x80	; 128
   1c5e4:	91 1d       	adc	r25, r1
   1c5e6:	df 93       	push	r29
   1c5e8:	cf 93       	push	r28
   1c5ea:	1f 93       	push	r17
   1c5ec:	0f 93       	push	r16
   1c5ee:	ff 92       	push	r15
   1c5f0:	ef 92       	push	r14
   1c5f2:	19 2f       	mov	r17, r25
   1c5f4:	98 7f       	andi	r25, 0xF8	; 248
   1c5f6:	96 95       	lsr	r25
   1c5f8:	e9 2f       	mov	r30, r25
   1c5fa:	96 95       	lsr	r25
   1c5fc:	96 95       	lsr	r25
   1c5fe:	e9 0f       	add	r30, r25
   1c600:	ff 27       	eor	r31, r31
   1c602:	eb 55       	subi	r30, 0x5B	; 91
   1c604:	fb 4f       	sbci	r31, 0xFB	; 251
   1c606:	99 27       	eor	r25, r25
   1c608:	33 27       	eor	r19, r19
   1c60a:	ee 24       	eor	r14, r14
   1c60c:	ff 24       	eor	r15, r15
   1c60e:	a7 01       	movw	r20, r14
   1c610:	e7 01       	movw	r28, r14
   1c612:	05 90       	lpm	r0, Z+
   1c614:	08 94       	sec
   1c616:	07 94       	ror	r0
   1c618:	28 f4       	brcc	.+10     	; 0x1c624 <__ftoa_engine+0x80>
   1c61a:	36 0f       	add	r19, r22
   1c61c:	e7 1e       	adc	r14, r23
   1c61e:	f8 1e       	adc	r15, r24
   1c620:	49 1f       	adc	r20, r25
   1c622:	51 1d       	adc	r21, r1
   1c624:	66 0f       	add	r22, r22
   1c626:	77 1f       	adc	r23, r23
   1c628:	88 1f       	adc	r24, r24
   1c62a:	99 1f       	adc	r25, r25
   1c62c:	06 94       	lsr	r0
   1c62e:	a1 f7       	brne	.-24     	; 0x1c618 <__ftoa_engine+0x74>
   1c630:	05 90       	lpm	r0, Z+
   1c632:	07 94       	ror	r0
   1c634:	28 f4       	brcc	.+10     	; 0x1c640 <__ftoa_engine+0x9c>
   1c636:	e7 0e       	add	r14, r23
   1c638:	f8 1e       	adc	r15, r24
   1c63a:	49 1f       	adc	r20, r25
   1c63c:	56 1f       	adc	r21, r22
   1c63e:	c1 1d       	adc	r28, r1
   1c640:	77 0f       	add	r23, r23
   1c642:	88 1f       	adc	r24, r24
   1c644:	99 1f       	adc	r25, r25
   1c646:	66 1f       	adc	r22, r22
   1c648:	06 94       	lsr	r0
   1c64a:	a1 f7       	brne	.-24     	; 0x1c634 <__ftoa_engine+0x90>
   1c64c:	05 90       	lpm	r0, Z+
   1c64e:	07 94       	ror	r0
   1c650:	28 f4       	brcc	.+10     	; 0x1c65c <__ftoa_engine+0xb8>
   1c652:	f8 0e       	add	r15, r24
   1c654:	49 1f       	adc	r20, r25
   1c656:	56 1f       	adc	r21, r22
   1c658:	c7 1f       	adc	r28, r23
   1c65a:	d1 1d       	adc	r29, r1
   1c65c:	88 0f       	add	r24, r24
   1c65e:	99 1f       	adc	r25, r25
   1c660:	66 1f       	adc	r22, r22
   1c662:	77 1f       	adc	r23, r23
   1c664:	06 94       	lsr	r0
   1c666:	a1 f7       	brne	.-24     	; 0x1c650 <__ftoa_engine+0xac>
   1c668:	05 90       	lpm	r0, Z+
   1c66a:	07 94       	ror	r0
   1c66c:	20 f4       	brcc	.+8      	; 0x1c676 <__ftoa_engine+0xd2>
   1c66e:	49 0f       	add	r20, r25
   1c670:	56 1f       	adc	r21, r22
   1c672:	c7 1f       	adc	r28, r23
   1c674:	d8 1f       	adc	r29, r24
   1c676:	99 0f       	add	r25, r25
   1c678:	66 1f       	adc	r22, r22
   1c67a:	77 1f       	adc	r23, r23
   1c67c:	88 1f       	adc	r24, r24
   1c67e:	06 94       	lsr	r0
   1c680:	a9 f7       	brne	.-22     	; 0x1c66c <__ftoa_engine+0xc8>
   1c682:	84 91       	lpm	r24, Z
   1c684:	10 95       	com	r17
   1c686:	17 70       	andi	r17, 0x07	; 7
   1c688:	41 f0       	breq	.+16     	; 0x1c69a <__ftoa_engine+0xf6>
   1c68a:	d6 95       	lsr	r29
   1c68c:	c7 95       	ror	r28
   1c68e:	57 95       	ror	r21
   1c690:	47 95       	ror	r20
   1c692:	f7 94       	ror	r15
   1c694:	e7 94       	ror	r14
   1c696:	1a 95       	dec	r17
   1c698:	c1 f7       	brne	.-16     	; 0x1c68a <__ftoa_engine+0xe6>
   1c69a:	eb e4       	ldi	r30, 0x4B	; 75
   1c69c:	f4 e0       	ldi	r31, 0x04	; 4
   1c69e:	68 94       	set
   1c6a0:	15 90       	lpm	r1, Z+
   1c6a2:	15 91       	lpm	r17, Z+
   1c6a4:	35 91       	lpm	r19, Z+
   1c6a6:	65 91       	lpm	r22, Z+
   1c6a8:	95 91       	lpm	r25, Z+
   1c6aa:	05 90       	lpm	r0, Z+
   1c6ac:	7f e2       	ldi	r23, 0x2F	; 47
   1c6ae:	73 95       	inc	r23
   1c6b0:	e1 18       	sub	r14, r1
   1c6b2:	f1 0a       	sbc	r15, r17
   1c6b4:	43 0b       	sbc	r20, r19
   1c6b6:	56 0b       	sbc	r21, r22
   1c6b8:	c9 0b       	sbc	r28, r25
   1c6ba:	d0 09       	sbc	r29, r0
   1c6bc:	c0 f7       	brcc	.-16     	; 0x1c6ae <__ftoa_engine+0x10a>
   1c6be:	e1 0c       	add	r14, r1
   1c6c0:	f1 1e       	adc	r15, r17
   1c6c2:	43 1f       	adc	r20, r19
   1c6c4:	56 1f       	adc	r21, r22
   1c6c6:	c9 1f       	adc	r28, r25
   1c6c8:	d0 1d       	adc	r29, r0
   1c6ca:	7e f4       	brtc	.+30     	; 0x1c6ea <__ftoa_engine+0x146>
   1c6cc:	70 33       	cpi	r23, 0x30	; 48
   1c6ce:	11 f4       	brne	.+4      	; 0x1c6d4 <__ftoa_engine+0x130>
   1c6d0:	8a 95       	dec	r24
   1c6d2:	e6 cf       	rjmp	.-52     	; 0x1c6a0 <__ftoa_engine+0xfc>
   1c6d4:	e8 94       	clt
   1c6d6:	01 50       	subi	r16, 0x01	; 1
   1c6d8:	30 f0       	brcs	.+12     	; 0x1c6e6 <__ftoa_engine+0x142>
   1c6da:	08 0f       	add	r16, r24
   1c6dc:	0a f4       	brpl	.+2      	; 0x1c6e0 <__ftoa_engine+0x13c>
   1c6de:	00 27       	eor	r16, r16
   1c6e0:	02 17       	cp	r16, r18
   1c6e2:	08 f4       	brcc	.+2      	; 0x1c6e6 <__ftoa_engine+0x142>
   1c6e4:	20 2f       	mov	r18, r16
   1c6e6:	23 95       	inc	r18
   1c6e8:	02 2f       	mov	r16, r18
   1c6ea:	7a 33       	cpi	r23, 0x3A	; 58
   1c6ec:	28 f0       	brcs	.+10     	; 0x1c6f8 <__ftoa_engine+0x154>
   1c6ee:	79 e3       	ldi	r23, 0x39	; 57
   1c6f0:	7d 93       	st	X+, r23
   1c6f2:	2a 95       	dec	r18
   1c6f4:	e9 f7       	brne	.-6      	; 0x1c6f0 <__ftoa_engine+0x14c>
   1c6f6:	10 c0       	rjmp	.+32     	; 0x1c718 <__ftoa_engine+0x174>
   1c6f8:	7d 93       	st	X+, r23
   1c6fa:	2a 95       	dec	r18
   1c6fc:	89 f6       	brne	.-94     	; 0x1c6a0 <__ftoa_engine+0xfc>
   1c6fe:	06 94       	lsr	r0
   1c700:	97 95       	ror	r25
   1c702:	67 95       	ror	r22
   1c704:	37 95       	ror	r19
   1c706:	17 95       	ror	r17
   1c708:	17 94       	ror	r1
   1c70a:	e1 18       	sub	r14, r1
   1c70c:	f1 0a       	sbc	r15, r17
   1c70e:	43 0b       	sbc	r20, r19
   1c710:	56 0b       	sbc	r21, r22
   1c712:	c9 0b       	sbc	r28, r25
   1c714:	d0 09       	sbc	r29, r0
   1c716:	98 f0       	brcs	.+38     	; 0x1c73e <__ftoa_engine+0x19a>
   1c718:	23 95       	inc	r18
   1c71a:	7e 91       	ld	r23, -X
   1c71c:	73 95       	inc	r23
   1c71e:	7a 33       	cpi	r23, 0x3A	; 58
   1c720:	08 f0       	brcs	.+2      	; 0x1c724 <__ftoa_engine+0x180>
   1c722:	70 e3       	ldi	r23, 0x30	; 48
   1c724:	7c 93       	st	X, r23
   1c726:	20 13       	cpse	r18, r16
   1c728:	b8 f7       	brcc	.-18     	; 0x1c718 <__ftoa_engine+0x174>
   1c72a:	7e 91       	ld	r23, -X
   1c72c:	70 61       	ori	r23, 0x10	; 16
   1c72e:	7d 93       	st	X+, r23
   1c730:	30 f0       	brcs	.+12     	; 0x1c73e <__ftoa_engine+0x19a>
   1c732:	83 95       	inc	r24
   1c734:	71 e3       	ldi	r23, 0x31	; 49
   1c736:	7d 93       	st	X+, r23
   1c738:	70 e3       	ldi	r23, 0x30	; 48
   1c73a:	2a 95       	dec	r18
   1c73c:	e1 f7       	brne	.-8      	; 0x1c736 <__ftoa_engine+0x192>
   1c73e:	11 24       	eor	r1, r1
   1c740:	ef 90       	pop	r14
   1c742:	ff 90       	pop	r15
   1c744:	0f 91       	pop	r16
   1c746:	1f 91       	pop	r17
   1c748:	cf 91       	pop	r28
   1c74a:	df 91       	pop	r29
   1c74c:	99 27       	eor	r25, r25
   1c74e:	87 fd       	sbrc	r24, 7
   1c750:	90 95       	com	r25
   1c752:	08 95       	ret

0001c754 <__ctype_isfalse>:
__ctype_isfalse():
   1c754:	99 27       	eor	r25, r25
   1c756:	88 27       	eor	r24, r24

0001c758 <__ctype_istrue>:
__ctype_istrue():
   1c758:	08 95       	ret

0001c75a <strncasecmp_P>:
strncasecmp_P():
   1c75a:	fb 01       	movw	r30, r22
   1c75c:	dc 01       	movw	r26, r24
   1c75e:	41 50       	subi	r20, 0x01	; 1
   1c760:	50 40       	sbci	r21, 0x00	; 0
   1c762:	88 f0       	brcs	.+34     	; 0x1c786 <strncasecmp_P+0x2c>
   1c764:	8d 91       	ld	r24, X+
   1c766:	81 34       	cpi	r24, 0x41	; 65
   1c768:	1c f0       	brlt	.+6      	; 0x1c770 <strncasecmp_P+0x16>
   1c76a:	8b 35       	cpi	r24, 0x5B	; 91
   1c76c:	0c f4       	brge	.+2      	; 0x1c770 <strncasecmp_P+0x16>
   1c76e:	80 5e       	subi	r24, 0xE0	; 224
   1c770:	65 91       	lpm	r22, Z+
   1c772:	61 34       	cpi	r22, 0x41	; 65
   1c774:	1c f0       	brlt	.+6      	; 0x1c77c <strncasecmp_P+0x22>
   1c776:	6b 35       	cpi	r22, 0x5B	; 91
   1c778:	0c f4       	brge	.+2      	; 0x1c77c <strncasecmp_P+0x22>
   1c77a:	60 5e       	subi	r22, 0xE0	; 224
   1c77c:	86 1b       	sub	r24, r22
   1c77e:	61 11       	cpse	r22, r1
   1c780:	71 f3       	breq	.-36     	; 0x1c75e <strncasecmp_P+0x4>
   1c782:	99 0b       	sbc	r25, r25
   1c784:	08 95       	ret
   1c786:	88 1b       	sub	r24, r24
   1c788:	fc cf       	rjmp	.-8      	; 0x1c782 <strncasecmp_P+0x28>

0001c78a <strnlen_P>:
strnlen_P():
   1c78a:	fc 01       	movw	r30, r24
   1c78c:	05 90       	lpm	r0, Z+
   1c78e:	61 50       	subi	r22, 0x01	; 1
   1c790:	70 40       	sbci	r23, 0x00	; 0
   1c792:	01 10       	cpse	r0, r1
   1c794:	d8 f7       	brcc	.-10     	; 0x1c78c <strnlen_P+0x2>
   1c796:	80 95       	com	r24
   1c798:	90 95       	com	r25
   1c79a:	8e 0f       	add	r24, r30
   1c79c:	9f 1f       	adc	r25, r31
   1c79e:	08 95       	ret

0001c7a0 <memset>:
memset():
   1c7a0:	dc 01       	movw	r26, r24
   1c7a2:	01 c0       	rjmp	.+2      	; 0x1c7a6 <memset+0x6>
   1c7a4:	6d 93       	st	X+, r22
   1c7a6:	41 50       	subi	r20, 0x01	; 1
   1c7a8:	50 40       	sbci	r21, 0x00	; 0
   1c7aa:	e0 f7       	brcc	.-8      	; 0x1c7a4 <memset+0x4>
   1c7ac:	08 95       	ret

0001c7ae <strnlen>:
strnlen():
   1c7ae:	fc 01       	movw	r30, r24
   1c7b0:	61 50       	subi	r22, 0x01	; 1
   1c7b2:	70 40       	sbci	r23, 0x00	; 0
   1c7b4:	01 90       	ld	r0, Z+
   1c7b6:	01 10       	cpse	r0, r1
   1c7b8:	d8 f7       	brcc	.-10     	; 0x1c7b0 <strnlen+0x2>
   1c7ba:	80 95       	com	r24
   1c7bc:	90 95       	com	r25
   1c7be:	8e 0f       	add	r24, r30
   1c7c0:	9f 1f       	adc	r25, r31
   1c7c2:	08 95       	ret

0001c7c4 <strrev>:
strrev():
   1c7c4:	dc 01       	movw	r26, r24
   1c7c6:	fc 01       	movw	r30, r24
   1c7c8:	67 2f       	mov	r22, r23
   1c7ca:	71 91       	ld	r23, Z+
   1c7cc:	77 23       	and	r23, r23
   1c7ce:	e1 f7       	brne	.-8      	; 0x1c7c8 <strrev+0x4>
   1c7d0:	32 97       	sbiw	r30, 0x02	; 2
   1c7d2:	04 c0       	rjmp	.+8      	; 0x1c7dc <strrev+0x18>
   1c7d4:	7c 91       	ld	r23, X
   1c7d6:	6d 93       	st	X+, r22
   1c7d8:	70 83       	st	Z, r23
   1c7da:	62 91       	ld	r22, -Z
   1c7dc:	ae 17       	cp	r26, r30
   1c7de:	bf 07       	cpc	r27, r31
   1c7e0:	c8 f3       	brcs	.-14     	; 0x1c7d4 <strrev+0x10>
   1c7e2:	08 95       	ret

0001c7e4 <fputc>:
fputc():
   1c7e4:	0f 93       	push	r16
   1c7e6:	1f 93       	push	r17
   1c7e8:	cf 93       	push	r28
   1c7ea:	df 93       	push	r29
   1c7ec:	18 2f       	mov	r17, r24
   1c7ee:	09 2f       	mov	r16, r25
   1c7f0:	eb 01       	movw	r28, r22
   1c7f2:	8b 81       	ldd	r24, Y+3	; 0x03
   1c7f4:	81 fd       	sbrc	r24, 1
   1c7f6:	09 c0       	rjmp	.+18     	; 0x1c80a <fputc+0x26>
   1c7f8:	1f ef       	ldi	r17, 0xFF	; 255
   1c7fa:	0f ef       	ldi	r16, 0xFF	; 255
   1c7fc:	81 2f       	mov	r24, r17
   1c7fe:	90 2f       	mov	r25, r16
   1c800:	df 91       	pop	r29
   1c802:	cf 91       	pop	r28
   1c804:	1f 91       	pop	r17
   1c806:	0f 91       	pop	r16
   1c808:	08 95       	ret
   1c80a:	82 ff       	sbrs	r24, 2
   1c80c:	14 c0       	rjmp	.+40     	; 0x1c836 <fputc+0x52>
   1c80e:	2e 81       	ldd	r18, Y+6	; 0x06
   1c810:	3f 81       	ldd	r19, Y+7	; 0x07
   1c812:	8c 81       	ldd	r24, Y+4	; 0x04
   1c814:	9d 81       	ldd	r25, Y+5	; 0x05
   1c816:	28 17       	cp	r18, r24
   1c818:	39 07       	cpc	r19, r25
   1c81a:	3c f4       	brge	.+14     	; 0x1c82a <fputc+0x46>
   1c81c:	e8 81       	ld	r30, Y
   1c81e:	f9 81       	ldd	r31, Y+1	; 0x01
   1c820:	cf 01       	movw	r24, r30
   1c822:	01 96       	adiw	r24, 0x01	; 1
   1c824:	99 83       	std	Y+1, r25	; 0x01
   1c826:	88 83       	st	Y, r24
   1c828:	10 83       	st	Z, r17
   1c82a:	8e 81       	ldd	r24, Y+6	; 0x06
   1c82c:	9f 81       	ldd	r25, Y+7	; 0x07
   1c82e:	01 96       	adiw	r24, 0x01	; 1
   1c830:	9f 83       	std	Y+7, r25	; 0x07
   1c832:	8e 83       	std	Y+6, r24	; 0x06
   1c834:	e3 cf       	rjmp	.-58     	; 0x1c7fc <fputc+0x18>
   1c836:	e8 85       	ldd	r30, Y+8	; 0x08
   1c838:	f9 85       	ldd	r31, Y+9	; 0x09
   1c83a:	81 2f       	mov	r24, r17
   1c83c:	19 95       	eicall
   1c83e:	89 2b       	or	r24, r25
   1c840:	a1 f3       	breq	.-24     	; 0x1c82a <fputc+0x46>
   1c842:	da cf       	rjmp	.-76     	; 0x1c7f8 <fputc+0x14>

0001c844 <__ultoa_invert>:
__ultoa_invert():
   1c844:	fa 01       	movw	r30, r20
   1c846:	aa 27       	eor	r26, r26
   1c848:	28 30       	cpi	r18, 0x08	; 8
   1c84a:	51 f1       	breq	.+84     	; 0x1c8a0 <__ultoa_invert+0x5c>
   1c84c:	20 31       	cpi	r18, 0x10	; 16
   1c84e:	81 f1       	breq	.+96     	; 0x1c8b0 <__ultoa_invert+0x6c>
   1c850:	e8 94       	clt
   1c852:	6f 93       	push	r22
   1c854:	6e 7f       	andi	r22, 0xFE	; 254
   1c856:	6e 5f       	subi	r22, 0xFE	; 254
   1c858:	7f 4f       	sbci	r23, 0xFF	; 255
   1c85a:	8f 4f       	sbci	r24, 0xFF	; 255
   1c85c:	9f 4f       	sbci	r25, 0xFF	; 255
   1c85e:	af 4f       	sbci	r26, 0xFF	; 255
   1c860:	b1 e0       	ldi	r27, 0x01	; 1
   1c862:	3e d0       	rcall	.+124    	; 0x1c8e0 <__ultoa_invert+0x9c>
   1c864:	b4 e0       	ldi	r27, 0x04	; 4
   1c866:	3c d0       	rcall	.+120    	; 0x1c8e0 <__ultoa_invert+0x9c>
   1c868:	67 0f       	add	r22, r23
   1c86a:	78 1f       	adc	r23, r24
   1c86c:	89 1f       	adc	r24, r25
   1c86e:	9a 1f       	adc	r25, r26
   1c870:	a1 1d       	adc	r26, r1
   1c872:	68 0f       	add	r22, r24
   1c874:	79 1f       	adc	r23, r25
   1c876:	8a 1f       	adc	r24, r26
   1c878:	91 1d       	adc	r25, r1
   1c87a:	a1 1d       	adc	r26, r1
   1c87c:	6a 0f       	add	r22, r26
   1c87e:	71 1d       	adc	r23, r1
   1c880:	81 1d       	adc	r24, r1
   1c882:	91 1d       	adc	r25, r1
   1c884:	a1 1d       	adc	r26, r1
   1c886:	20 d0       	rcall	.+64     	; 0x1c8c8 <__ultoa_invert+0x84>
   1c888:	09 f4       	brne	.+2      	; 0x1c88c <__ultoa_invert+0x48>
   1c88a:	68 94       	set
   1c88c:	3f 91       	pop	r19
   1c88e:	2a e0       	ldi	r18, 0x0A	; 10
   1c890:	26 9f       	mul	r18, r22
   1c892:	11 24       	eor	r1, r1
   1c894:	30 19       	sub	r19, r0
   1c896:	30 5d       	subi	r19, 0xD0	; 208
   1c898:	31 93       	st	Z+, r19
   1c89a:	de f6       	brtc	.-74     	; 0x1c852 <__ultoa_invert+0xe>
   1c89c:	cf 01       	movw	r24, r30
   1c89e:	08 95       	ret
   1c8a0:	46 2f       	mov	r20, r22
   1c8a2:	47 70       	andi	r20, 0x07	; 7
   1c8a4:	40 5d       	subi	r20, 0xD0	; 208
   1c8a6:	41 93       	st	Z+, r20
   1c8a8:	b3 e0       	ldi	r27, 0x03	; 3
   1c8aa:	0f d0       	rcall	.+30     	; 0x1c8ca <__ultoa_invert+0x86>
   1c8ac:	c9 f7       	brne	.-14     	; 0x1c8a0 <__ultoa_invert+0x5c>
   1c8ae:	f6 cf       	rjmp	.-20     	; 0x1c89c <__ultoa_invert+0x58>
   1c8b0:	46 2f       	mov	r20, r22
   1c8b2:	4f 70       	andi	r20, 0x0F	; 15
   1c8b4:	40 5d       	subi	r20, 0xD0	; 208
   1c8b6:	4a 33       	cpi	r20, 0x3A	; 58
   1c8b8:	18 f0       	brcs	.+6      	; 0x1c8c0 <__ultoa_invert+0x7c>
   1c8ba:	49 5d       	subi	r20, 0xD9	; 217
   1c8bc:	31 fd       	sbrc	r19, 1
   1c8be:	40 52       	subi	r20, 0x20	; 32
   1c8c0:	41 93       	st	Z+, r20
   1c8c2:	02 d0       	rcall	.+4      	; 0x1c8c8 <__ultoa_invert+0x84>
   1c8c4:	a9 f7       	brne	.-22     	; 0x1c8b0 <__ultoa_invert+0x6c>
   1c8c6:	ea cf       	rjmp	.-44     	; 0x1c89c <__ultoa_invert+0x58>
   1c8c8:	b4 e0       	ldi	r27, 0x04	; 4
   1c8ca:	a6 95       	lsr	r26
   1c8cc:	97 95       	ror	r25
   1c8ce:	87 95       	ror	r24
   1c8d0:	77 95       	ror	r23
   1c8d2:	67 95       	ror	r22
   1c8d4:	ba 95       	dec	r27
   1c8d6:	c9 f7       	brne	.-14     	; 0x1c8ca <__ultoa_invert+0x86>
   1c8d8:	00 97       	sbiw	r24, 0x00	; 0
   1c8da:	61 05       	cpc	r22, r1
   1c8dc:	71 05       	cpc	r23, r1
   1c8de:	08 95       	ret
   1c8e0:	9b 01       	movw	r18, r22
   1c8e2:	ac 01       	movw	r20, r24
   1c8e4:	0a 2e       	mov	r0, r26
   1c8e6:	06 94       	lsr	r0
   1c8e8:	57 95       	ror	r21
   1c8ea:	47 95       	ror	r20
   1c8ec:	37 95       	ror	r19
   1c8ee:	27 95       	ror	r18
   1c8f0:	ba 95       	dec	r27
   1c8f2:	c9 f7       	brne	.-14     	; 0x1c8e6 <__ultoa_invert+0xa2>
   1c8f4:	62 0f       	add	r22, r18
   1c8f6:	73 1f       	adc	r23, r19
   1c8f8:	84 1f       	adc	r24, r20
   1c8fa:	95 1f       	adc	r25, r21
   1c8fc:	a0 1d       	adc	r26, r0
   1c8fe:	08 95       	ret

0001c900 <eeprom_read_byte>:
eeprom_read_byte():
   1c900:	f9 99       	sbic	0x1f, 1	; 31
   1c902:	fe cf       	rjmp	.-4      	; 0x1c900 <eeprom_read_byte>
   1c904:	92 bd       	out	0x22, r25	; 34
   1c906:	81 bd       	out	0x21, r24	; 33
   1c908:	f8 9a       	sbi	0x1f, 0	; 31
   1c90a:	99 27       	eor	r25, r25
   1c90c:	80 b5       	in	r24, 0x20	; 32
   1c90e:	08 95       	ret

0001c910 <eeprom_write_byte>:
eeprom_write_byte():
   1c910:	26 2f       	mov	r18, r22

0001c912 <eeprom_write_r18>:
   1c912:	f9 99       	sbic	0x1f, 1	; 31
   1c914:	fe cf       	rjmp	.-4      	; 0x1c912 <eeprom_write_r18>
   1c916:	1f ba       	out	0x1f, r1	; 31
   1c918:	92 bd       	out	0x22, r25	; 34
   1c91a:	81 bd       	out	0x21, r24	; 33
   1c91c:	20 bd       	out	0x20, r18	; 32
   1c91e:	0f b6       	in	r0, 0x3f	; 63
   1c920:	f8 94       	cli
   1c922:	fa 9a       	sbi	0x1f, 2	; 31
   1c924:	f9 9a       	sbi	0x1f, 1	; 31
   1c926:	0f be       	out	0x3f, r0	; 63
   1c928:	01 96       	adiw	r24, 0x01	; 1
   1c92a:	08 95       	ret

0001c92c <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   1c92c:	f8 94       	cli

0001c92e <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   1c92e:	ff cf       	rjmp	.-2      	; 0x1c92e <__stop_program>
