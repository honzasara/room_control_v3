
/tmp/arduino_build_41303/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 20 34 	jmp	0x6840	; 0x6840 <__ctors_end>
       4:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
       8:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
       c:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      10:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      14:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      18:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      1c:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      20:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      24:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      28:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      2c:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      30:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      34:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      38:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      3c:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      40:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      44:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      48:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      4c:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      50:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      54:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      58:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      5c:	0c 94 ad bf 	jmp	0x17f5a	; 0x17f5a <__vector_23>
      60:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      64:	0c 94 10 b8 	jmp	0x17020	; 0x17020 <__vector_25>
      68:	0c 94 e6 b7 	jmp	0x16fcc	; 0x16fcc <__vector_26>
      6c:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      70:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      74:	0c 94 f7 bf 	jmp	0x17fee	; 0x17fee <__vector_29>
      78:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      7c:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      80:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      84:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      88:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      8c:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      90:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      94:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      98:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      9c:	0c 94 69 4e 	jmp	0x9cd2	; 0x9cd2 <__vector_39>
      a0:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      a4:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      a8:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      ac:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      b0:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      b4:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      b8:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      bc:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      c0:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      c4:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>
      c8:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 c1 59 	jmp	0xb382	; 0xb382 <display_element_show_network_detail(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
      d0:	0c 94 c7 3d 	jmp	0x7b8e	; 0x7b8e <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>
      d4:	0c 94 34 3f 	jmp	0x7e68	; 0x7e68 <EthernetUDP::peek()>
      d8:	0c 94 85 3d 	jmp	0x7b0a	; 0x7b0a <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>
      dc:	0c 94 a3 49 	jmp	0x9346	; 0x9346 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
      e0:	0c 94 1d 49 	jmp	0x923a	; 0x923a <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
      e4:	0c 94 62 47 	jmp	0x8ec4	; 0x8ec4 <button_time_set_date_manualy_onclick(unsigned int, unsigned int, unsigned char)>
      e8:	0c 94 56 57 	jmp	0xaeac	; 0xaeac <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>
      ec:	0c 94 70 35 	jmp	0x6ae0	; 0x6ae0 <EthernetClient::operator bool()>
      f0:	0c 94 8c 34 	jmp	0x6918	; 0x6918 <TwoWire::onReceiveService(unsigned char*, int)>
      f4:	0c 94 3e 3d 	jmp	0x7a7c	; 0x7a7c <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>
      f8:	0c 94 9c 35 	jmp	0x6b38	; 0x6b38 <EthernetUDP::read(char*, unsigned int)>
      fc:	0c 94 7c b8 	jmp	0x170f8	; 0x170f8 <turnOffPWM.lto_priv.285+0x6c>
     100:	0c 94 98 b8 	jmp	0x17130	; 0x17130 <turnOffPWM.lto_priv.285+0xa4>
     104:	0c 94 d3 a9 	jmp	0x153a6	; 0x153a6 <HardwareSerial::available()>
     108:	0c 94 47 3d 	jmp	0x7a8e	; 0x7a8e <click_keyboard_type(unsigned int, unsigned int, unsigned char)>
     10c:	0c 94 38 35 	jmp	0x6a70	; 0x6a70 <EthernetUDP::remotePort()>
     110:	0c 94 36 61 	jmp	0xc26c	; 0xc26c <EthernetClient::connect(char const*, unsigned int)>
     114:	0c 94 83 3d 	jmp	0x7b06	; 0x7b06 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>
     118:	0c 94 e6 61 	jmp	0xc3cc	; 0xc3cc <EthernetServer::begin()>
     11c:	0c 94 3c 35 	jmp	0x6a78	; 0x6a78 <EthernetUDP::remoteIP()>
     120:	0c 94 6a b8 	jmp	0x170d4	; 0x170d4 <turnOffPWM.lto_priv.285+0x48>
     124:	0c 94 4c 35 	jmp	0x6a98	; 0x6a98 <UDP::beginMulticast(IPAddress, unsigned int)>
     128:	0c 94 87 6f 	jmp	0xdf0e	; 0xdf0e <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>
     12c:	0c 94 a3 46 	jmp	0x8d46	; 0x8d46 <button_set_mqtt_pass_onclick(unsigned int, unsigned int, unsigned char)>
     130:	0c 94 00 3c 	jmp	0x7800	; 0x7800 <button_nastaveni_reload_onclick(unsigned int, unsigned int, unsigned char)>
     134:	0c 94 2b 3d 	jmp	0x7a56	; 0x7a56 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>
     138:	0c 94 ab 35 	jmp	0x6b56	; 0x6b56 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     13c:	0c 94 71 3d 	jmp	0x7ae2	; 0x7ae2 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     140:	0c 94 8e 34 	jmp	0x691c	; 0x691c <TwoWire::peek()>
     144:	0c 94 ea 3c 	jmp	0x79d4	; 0x79d4 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>
     148:	0c 94 8d ad 	jmp	0x15b1a	; 0x15b1a <IPAddress::printTo(Print&) const>
     14c:	0c 94 1e 59 	jmp	0xb23c	; 0xb23c <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     150:	0c 94 1b 59 	jmp	0xb236	; 0xb236 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>
     154:	0c 94 a7 35 	jmp	0x6b4e	; 0x6b4e <LCDWIKI_KBV::Get_Width() const>
     158:	0c 94 90 b8 	jmp	0x17120	; 0x17120 <turnOffPWM.lto_priv.285+0x94>
     15c:	0c 94 a6 72 	jmp	0xe54c	; 0xe54c <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>
     160:	0c 94 0c 5e 	jmp	0xbc18	; 0xbc18 <EthernetUDP::begin(unsigned int)>
     164:	0c 94 16 72 	jmp	0xe42c	; 0xe42c <helper_dialog_mqtt_set_pass(unsigned int, unsigned int, unsigned char)>
     168:	0c 94 ff 47 	jmp	0x8ffe	; 0x8ffe <button_ntp_set_server_onclick(unsigned int, unsigned int, unsigned char)>
     16c:	0c 94 ea 37 	jmp	0x6fd4	; 0x6fd4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     170:	0c 94 33 5c 	jmp	0xb866	; 0xb866 <EthernetClient::stop()>
     174:	0c 94 c3 60 	jmp	0xc186	; 0xc186 <EthernetUDP::beginPacket(char const*, unsigned int)>
     178:	0c 94 4f 3f 	jmp	0x7e9e	; 0x7e9e <EthernetClient::available()>
     17c:	0c 94 fc 3b 	jmp	0x77f8	; 0x77f8 <valid_true()>
     180:	0c 94 8d 34 	jmp	0x691a	; 0x691a <TwoWire::flush()>
     184:	0c 94 e3 5d 	jmp	0xbbc6	; 0xbbc6 <EthernetUDP::endPacket()>
     188:	0c 94 54 79 	jmp	0xf2a8	; 0xf2a8 <mqtt_callback(char*, unsigned char*, unsigned int)>
     18c:	0c 94 0e 3f 	jmp	0x7e1c	; 0x7e1c <EthernetClient::peek()>
     190:	0c 94 4a 5d 	jmp	0xba94	; 0xba94 <EthernetUDP::read()>
     194:	0c 94 1e 35 	jmp	0x6a3c	; 0x6a3c <EthernetUDP::write(unsigned char)>
     198:	0c 94 cd 49 	jmp	0x939a	; 0x939a <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>
     19c:	0c 94 ed 56 	jmp	0xadda	; 0xadda <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>
     1a0:	0c 94 a1 70 	jmp	0xe142	; 0xe142 <menu_tds_save_offset(unsigned int, float, unsigned char)>
     1a4:	0c 94 79 35 	jmp	0x6af2	; 0x6af2 <EthernetClient::write(unsigned char)>
     1a8:	0c 94 fb 76 	jmp	0xedf6	; 0xedf6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
     1ac:	0c 94 e9 4c 	jmp	0x99d2	; 0x99d2 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     1b0:	0c 94 dd 34 	jmp	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>
     1b4:	0c 94 8f 35 	jmp	0x6b1e	; 0x6b1e <EthernetClient::operator!=(EthernetClient const&)>
     1b8:	0c 94 04 3c 	jmp	0x7808	; 0x7808 <button_check_mqtt_connection_onclick(unsigned int, unsigned int, unsigned char)>
     1bc:	0c 94 51 3d 	jmp	0x7aa2	; 0x7aa2 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     1c0:	0c 94 b0 34 	jmp	0x6960	; 0x6960 <TwoWire::write(unsigned char const*, unsigned int)>
     1c4:	0c 94 8a b8 	jmp	0x17114	; 0x17114 <turnOffPWM.lto_priv.285+0x88>
     1c8:	0c 94 5f 71 	jmp	0xe2be	; 0xe2be <printf_via_mqtt(char, __file*)>
     1cc:	0c 94 4e 35 	jmp	0x6a9c	; 0x6a9c <EthernetServer::write(unsigned char)>
     1d0:	0c 94 78 35 	jmp	0x6af0	; 0x6af0 <EthernetClient::flush()>
     1d4:	0c 94 7d 58 	jmp	0xb0fa	; 0xb0fa <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     1d8:	0c 94 a9 b8 	jmp	0x17152	; 0x17152 <turnOffPWM.lto_priv.285+0xc6>
     1dc:	0c 94 82 b8 	jmp	0x17104	; 0x17104 <turnOffPWM.lto_priv.285+0x78>
     1e0:	0c 94 4a 6b 	jmp	0xd694	; 0xd694 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>
     1e4:	0c 94 0c 35 	jmp	0x6a18	; 0x6a18 <EthernetUDP::flush()>
     1e8:	0c 94 f5 3c 	jmp	0x79ea	; 0x79ea <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>
     1ec:	0c 94 86 b8 	jmp	0x1710c	; 0x1710c <turnOffPWM.lto_priv.285+0x80>
     1f0:	0c 94 3a 70 	jmp	0xe074	; 0xe074 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>
     1f4:	0c 94 64 35 	jmp	0x6ac8	; 0x6ac8 <Print::flush()>
     1f8:	0c 94 35 3d 	jmp	0x7a6a	; 0x7a6a <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>
     1fc:	0c 94 81 72 	jmp	0xe502	; 0xe502 <helper_dialog_ntp_set_server(unsigned int, unsigned int, unsigned char)>
     200:	0c 94 63 4c 	jmp	0x98c6	; 0x98c6 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     204:	0c 94 72 b8 	jmp	0x170e4	; 0x170e4 <turnOffPWM.lto_priv.285+0x58>
     208:	0c 94 40 57 	jmp	0xae80	; 0xae80 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)>
     20c:	0c 94 8e 5b 	jmp	0xb71c	; 0xb71c <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     210:	0c 94 eb 49 	jmp	0x93d6	; 0x93d6 <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>
     214:	0c 94 79 5b 	jmp	0xb6f2	; 0xb6f2 <EthernetUDP::stop()>
     218:	0c 94 21 88 	jmp	0x11042	; 0x11042 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>
     21c:	0c 94 05 3c 	jmp	0x780a	; 0x780a <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     220:	0c 94 63 6b 	jmp	0xd6c6	; 0xd6c6 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>
     224:	0c 94 43 65 	jmp	0xca86	; 0xca86 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     228:	0c 94 b0 3e 	jmp	0x7d60	; 0x7d60 <returnnullfceargs(unsigned int, unsigned int, unsigned char)>
     22c:	0c 94 c6 3e 	jmp	0x7d8c	; 0x7d8c <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>
     230:	0c 94 a9 49 	jmp	0x9352	; 0x9352 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>
     234:	0c 94 4a 3d 	jmp	0x7a94	; 0x7a94 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>
     238:	0c 94 b3 47 	jmp	0x8f66	; 0x8f66 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)>
     23c:	0c 94 53 34 	jmp	0x68a6	; 0x68a6 <TwoWire::available()>
     240:	0c 94 3c 75 	jmp	0xea78	; 0xea78 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     244:	0c 94 2c 3d 	jmp	0x7a58	; 0x7a58 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>
     248:	0c 94 98 3c 	jmp	0x7930	; 0x7930 <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     24c:	0c 94 bd 4d 	jmp	0x9b7a	; 0x9b7a <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     250:	0c 94 8b 34 	jmp	0x6916	; 0x6916 <TwoWire::onRequestService()>
     254:	0c 94 06 40 	jmp	0x800c	; 0x800c <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     258:	0c 94 47 aa 	jmp	0x1548e	; 0x1548e <HardwareSerial::flush()>
     25c:	0c 94 1f 63 	jmp	0xc63e	; 0xc63e <EthernetClient::connect(IPAddress, unsigned int)>
     260:	0c 94 a6 b8 	jmp	0x1714c	; 0x1714c <turnOffPWM.lto_priv.285+0xc0>
     264:	0c 94 03 3c 	jmp	0x7806	; 0x7806 <nullfce(unsigned int, unsigned int, unsigned char)>
     268:	0c 94 a2 a9 	jmp	0x15344	; 0x15344 <HardwareSerial::availableForWrite()>
     26c:	0c 94 44 3c 	jmp	0x7888	; 0x7888 <preload_display_setting_brightness(unsigned int, unsigned int, unsigned char)>
     270:	0c 94 e1 77 	jmp	0xefc2	; 0xefc2 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     274:	0c 94 72 3c 	jmp	0x78e4	; 0x78e4 <switch_brightness_automode_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     278:	0c 94 ab 77 	jmp	0xef56	; 0xef56 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     27c:	0c 94 64 c3 	jmp	0x186c8	; 0x186c8 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7340>
     280:	0c 94 00 aa 	jmp	0x15400	; 0x15400 <HardwareSerial::write(unsigned char)>
     284:	0c 94 2b 5d 	jmp	0xba56	; 0xba56 <EthernetUDP::read(unsigned char*, unsigned int)>
     288:	0c 94 1a 79 	jmp	0xf234	; 0xf234 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>
     28c:	0c 94 88 aa 	jmp	0x15510	; 0x15510 <Print::write(unsigned char const*, unsigned int)>
     290:	0c 94 b1 a9 	jmp	0x15362	; 0x15362 <HardwareSerial::read()>
     294:	0c 94 a3 35 	jmp	0x6b46	; 0x6b46 <LCDWIKI_KBV::Get_Height() const>
     298:	0c 94 b4 62 	jmp	0xc568	; 0xc568 <EthernetServer::write(unsigned char const*, unsigned int)>
     29c:	0c 94 39 72 	jmp	0xe472	; 0xe472 <helper_dialog_mqtt_set_user(unsigned int, unsigned int, unsigned char)>
     2a0:	0c 94 c9 5d 	jmp	0xbb92	; 0xbb92 <EthernetClient::read()>
     2a4:	0c 94 c7 6d 	jmp	0xdb8e	; 0xdb8e <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     2a8:	0c 94 6e b8 	jmp	0x170dc	; 0x170dc <turnOffPWM.lto_priv.285+0x50>
     2ac:	0c 94 c1 46 	jmp	0x8d82	; 0x8d82 <button_set_mqtt_user_onclick(unsigned int, unsigned int, unsigned char)>
     2b0:	0c 94 34 35 	jmp	0x6a68	; 0x6a68 <EthernetUDP::available()>
     2b4:	0c 94 9f 3f 	jmp	0x7f3e	; 0x7f3e <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     2b8:	0c 94 04 3f 	jmp	0x7e08	; 0x7e08 <click_keyboard_number(unsigned int, unsigned int, unsigned char)>
     2bc:	0c 94 5e 37 	jmp	0x6ebc	; 0x6ebc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     2c0:	0c 94 74 5d 	jmp	0xbae8	; 0xbae8 <EthernetUDP::parsePacket()>
     2c4:	0c 94 42 39 	jmp	0x7284	; 0x7284 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     2c8:	0c 94 78 b8 	jmp	0x170f0	; 0x170f0 <turnOffPWM.lto_priv.285+0x64>
     2cc:	0c 94 df 56 	jmp	0xadbe	; 0xadbe <helper_set_menu_time_offset(unsigned int, float, unsigned char)>
     2d0:	0c 94 5d 4e 	jmp	0x9cba	; 0x9cba <serial_putc(char, __file*)>
     2d4:	0c 94 cd 57 	jmp	0xaf9a	; 0xaf9a <button_click_set_time_offset(unsigned int, unsigned int, unsigned char)>
     2d8:	0c 94 ed 58 	jmp	0xb1da	; 0xb1da <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>
     2dc:	0c 94 d7 56 	jmp	0xadae	; 0xadae <click_button_default_value(unsigned int, unsigned int, unsigned char)>
     2e0:	0c 94 37 3c 	jmp	0x786e	; 0x786e <button_set_brightness_auto_shutdown_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     2e4:	0c 94 46 6f 	jmp	0xde8c	; 0xde8c <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>
     2e8:	0c 94 44 6d 	jmp	0xda88	; 0xda88 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     2ec:	0c 94 c4 44 	jmp	0x8988	; 0x8988 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     2f0:	0c 94 9d 34 	jmp	0x693a	; 0x693a <TwoWire::read()>
     2f4:	0c 94 4a 52 	jmp	0xa494	; 0xa494 <helper_set_time_manualy(unsigned int, unsigned int, unsigned char)>
     2f8:	0c 94 94 b8 	jmp	0x17128	; 0x17128 <turnOffPWM.lto_priv.285+0x9c>
     2fc:	0c 94 c3 6c 	jmp	0xd986	; 0xd986 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>
     300:	0c 94 db 6f 	jmp	0xdfb6	; 0xdfb6 <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>
     304:	0c 94 a9 61 	jmp	0xc352	; 0xc352 <button_set_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)>
     308:	0c 94 11 47 	jmp	0x8e22	; 0x8e22 <button_set_mqtt_broker_onclick(unsigned int, unsigned int, unsigned char)>
     30c:	0c 94 8b 3c 	jmp	0x7916	; 0x7916 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     310:	0c 94 65 35 	jmp	0x6aca	; 0x6aca <EthernetClient::operator==(EthernetClient const&)>
     314:	0c 94 aa b8 	jmp	0x17154	; 0x17154 <turnOffPWM.lto_priv.285+0xc8>
     318:	0c 94 7e 3c 	jmp	0x78fc	; 0x78fc <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
     31c:	0c 94 ae 3e 	jmp	0x7d5c	; 0x7d5c <display_enable_show(unsigned int, unsigned int, unsigned char)>
     320:	0c 94 eb 46 	jmp	0x8dd6	; 0x8dd6 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>
     324:	0c 94 94 57 	jmp	0xaf28	; 0xaf28 <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     328:	0c 94 b2 3e 	jmp	0x7d64	; 0x7d64 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     32c:	0c 94 30 39 	jmp	0x7260	; 0x7260 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     330:	0c 94 a2 b8 	jmp	0x17144	; 0x17144 <turnOffPWM.lto_priv.285+0xb8>
     334:	0c 94 10 5c 	jmp	0xb820	; 0xb820 <EthernetClient::connected()>
     338:	0c 94 52 48 	jmp	0x90a4	; 0x90a4 <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     33c:	0c 94 99 35 	jmp	0x6b32	; 0x6b32 <Print::availableForWrite()>
     340:	0c 94 fe 3b 	jmp	0x77fc	; 0x77fc <valid_ipv4_address_element_string()>
     344:	0c 94 90 77 	jmp	0xef20	; 0xef20 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>
     348:	0c 94 e5 46 	jmp	0x8dca	; 0x8dca <button_change_brightness_display_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>
     34c:	0c 94 34 57 	jmp	0xae68	; 0xae68 <helper_display_set_brightness(unsigned int, float, unsigned char)>
     350:	0c 94 58 3f 	jmp	0x7eb0	; 0x7eb0 <EthernetUDP::write(unsigned char const*, unsigned int)>
     354:	0c 94 c5 a9 	jmp	0x1538a	; 0x1538a <HardwareSerial::peek()>
     358:	0c 94 c5 5d 	jmp	0xbb8a	; 0xbb8a <EthernetClient::read(unsigned char*, unsigned int)>
     35c:	0c 94 dc 6e 	jmp	0xddb8	; 0xddb8 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     360:	0c 94 e6 51 	jmp	0xa3cc	; 0xa3cc <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)>
     364:	0c 94 c9 3f 	jmp	0x7f92	; 0x7f92 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     368:	0c 94 4d 62 	jmp	0xc49a	; 0xc49a <EthernetClient::write(unsigned char const*, unsigned int)>
     36c:	0c 94 39 6d 	jmp	0xda72	; 0xda72 <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     370:	0c 94 eb 3e 	jmp	0x7dd6	; 0x7dd6 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>
     374:	0c 94 64 b8 	jmp	0x170c8	; 0x170c8 <turnOffPWM.lto_priv.285+0x3c>
     378:	0c 94 78 3c 	jmp	0x78f0	; 0x78f0 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>
     37c:	0c 94 c5 6c 	jmp	0xd98a	; 0xd98a <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>
     380:	0c 94 e3 4b 	jmp	0x97c6	; 0x97c6 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     384:	0c 94 d9 44 	jmp	0x89b2	; 0x89b2 <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     388:	0c 94 9e b8 	jmp	0x1713c	; 0x1713c <turnOffPWM.lto_priv.285+0xb0>
     38c:	0c 94 05 3d 	jmp	0x7a0a	; 0x7a0a <a2d_complete(unsigned char, unsigned int)>
     390:	0c 94 df 46 	jmp	0x8dbe	; 0x8dbe <button_set_brightness_auto_shutdown_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>
     394:	0c 94 0e 88 	jmp	0x1101c	; 0x1101c <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>
     398:	0c 94 5c 72 	jmp	0xe4b8	; 0xe4b8 <helper_dialog_mqtt_set_server(unsigned int, unsigned int, unsigned char)>
     39c:	0c 94 3d 3c 	jmp	0x787a	; 0x787a <display_enable_show_brightness_manual_mode(unsigned int, unsigned int, unsigned char)>
     3a0:	0c 94 6b 70 	jmp	0xe0d6	; 0xe0d6 <menu_tds_save_period(unsigned int, float, unsigned char)>

000003a4 <__trampolines_end>:
__trampolines_end():
     3a4:	4e 41       	sbci	r20, 0x1E	; 30
     3a6:	4e 49       	Address 0x00000000000003a6 is out of bounds.
.word	0xffff	; ????

000003a7 <pstr_inity>:
     3a7:	49 4e 49 54 59                                      INITY

000003ac <pstr_inf>:
     3ac:	49 4e 46                                            INF

000003af <pwr_m10>:
     3af:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     3bf:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000003c7 <pwr_p10>:
     3c7:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     3d7:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     3e7:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     3f7:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     407:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     417:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     427:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     437:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     447:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     457:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     467:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     477:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     487:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     497:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     4a7:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     4b7:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     4c7:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     4d7:	3d 27                                               ='

000004d9 <new_text_switch_brightness_automode>:
     4d9:	41 75 74 6f 6d 61 74 69 63 6b 79 20 6a 61 73 00     Automaticky jas.

000004e9 <new_text_nastaveni_zobrazeni_full>:
     4e9:	4e 61 73 74 61 76 65 6e 69 20 7a 6f 62 72 61 7a     Nastaveni zobraz
     4f9:	65 6e 69 00                                         eni.

000004fd <new_nastaveni_nrf_input>:
     4fd:	4e 52 46 20 76 73 74 75 70 00                       NRF vstup.

00000507 <new_nastaveni_mqtt_topic>:
     507:	4d 51 54 54 20 74 6f 70 69 63 00                    MQTT topic.

00000512 <new_text_nastaveni_periferii_full>:
     512:	4e 61 73 74 61 76 65 6e 69 20 70 65 72 69 66 65     Nastaveni perife
     522:	72 69 69 00                                         rii.

00000526 <new_text_nastaveni_periferie>:
     526:	4e 2e 20 70 65 72 69 66 65 72 69 69 00              N. periferii.

00000533 <new_text_nastaveni_zobrazeni>:
     533:	4e 2e 20 7a 6f 62 72 61 7a 65 6e 69 00              N. zobrazeni.

00000540 <new_text_nastaveni_regulatoru>:
     540:	4e 2e 20 72 65 67 75 6c 61 74 6f 72 75 00           N. regulatoru.

0000054e <new_text_nastaveni_system>:
     54e:	4e 2e 20 73 79 73 74 65 6d 75 00                    N. systemu.

00000559 <new_text_nastaveni_reload>:
     559:	52 65 73 74 61 72 74 20 7a 61 72 69 7a 65 6e 69     Restart zarizeni
	...

0000056a <new_text_o_zarizeni>:
     56a:	4f 20 7a 61 72 69 7a 65 6e 69 00                    O zarizeni.

00000575 <nastaveni_default>:
     575:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

00000585 <nastaveni_nrf>:
     585:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

00000593 <new_text_nastaveni_system_full>:
     593:	4e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     Nastaveni system
     5a3:	75 00                                               u.

000005a5 <text_rtds_novy>:
     5a5:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
     5b5:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

000005c0 <nastaveni_rtds_subscribe>:
     5c0:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

000005d0 <nastaveni_tds_offset>:
     5d0:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

000005e0 <nastaveni_name_sensor>:
     5e0:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

000005ef <nastaveni_delete_sensor>:
     5ef:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

000005fd <text_tds_sensors>:
     5fd:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
     60d:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

00000618 <new_text_ok>:
     618:	4f 4b 00                                            OK.

0000061b <text_special_case>:
     61b:	40 00                                               @.

0000061d <text_lower_case>:
     61d:	61 00                                               a.

0000061f <text_upper_case>:
     61f:	41 00                                               A.

00000621 <text_delete_char>:
     621:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

0000062b <text_klavesnice>:
     62b:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

00000636 <text_zrusit>:
     636:	5a 72 75 73 69 74 00                                Zrusit.

0000063d <text_ulozit>:
     63d:	55 6c 6f 7a 69 74 00                                Ulozit.

00000644 <text_no>:
     644:	4e 65 00                                            Ne.

00000647 <text_yes>:
     647:	41 6e 6f 00                                         Ano.

0000064b <text_upozorneni>:
     64b:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

00000656 <new_text_mqtt_check>:
     656:	4d 51 54 54 20 6f 76 65 72 69 74 20 73 70 6f 6a     MQTT overit spoj
     666:	65 6e 69 00                                         eni.

0000066a <new_text_mqtt_pass>:
     66a:	4d 51 54 54 20 68 65 73 6c 6f 00                    MQTT heslo.

00000675 <new_text_mqtt_user>:
     675:	4d 51 54 54 20 75 7a 69 76 61 74 65 6c 00           MQTT uzivatel.

00000683 <new_text_mqtt_broker>:
     683:	4d 51 54 54 20 73 65 72 76 65 72 00                 MQTT server.

0000068f <new_text_nastaveni_mqtt_pripojeni>:
     68f:	4e 61 73 74 61 76 65 6e 69 20 4d 51 54 54 00        Nastaveni MQTT.

0000069e <text_select_default_temp>:
     69e:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
     6ae:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

000006b8 <new_text_time_set_date_manualy>:
     6b8:	52 75 63 6e 69 20 6e 61 73 74 61 76 65 6e 69 20     Rucni nastaveni 
     6c8:	64 61 74 75 6d 75 00                                datumu.

000006cf <new_text_time_set_time_manualy>:
     6cf:	52 75 63 6e 69 20 6e 61 73 74 61 76 65 6e 69 20     Rucni nastaveni 
     6df:	63 61 73 75 00                                      casu.

000006e4 <new_text_time_set_offset>:
     6e4:	4e 54 50 20 70 6f 73 75 6e 75 74 69 20 63 61 73     NTP posunuti cas
     6f4:	75 00                                               u.

000006f6 <new_text_ntp_set_server>:
     6f6:	4e 61 73 74 61 76 65 6e 69 20 4e 54 50 20 73 65     Nastaveni NTP se
     706:	72 76 65 72 75 00                                   rveru.

0000070c <text_ntp_sync_time>:
     70c:	41 6b 74 75 61 6c 69 7a 61 63 65 20 63 61 73 75     Aktualizace casu
	...

0000071d <new_text_nastaveni_casu>:
     71d:	4e 61 73 74 61 76 65 6e 69 20 63 61 73 75 00        Nastaveni casu.

0000072c <new_text_scan_onewire_bus>:
     72c:	53 63 61 6e 20 73 62 65 72 6e 69 63 65 00           Scan sbernice.

0000073a <new_text_set_network_test_connection>:
     73a:	54 65 73 74 20 70 72 69 70 6f 6a 65 6e 69 00        Test pripojeni.

00000749 <new_text_set_network_ip>:
     749:	4e 61 73 74 61 76 65 6e 69 20 49 50 00              Nastaveni IP.

00000756 <new_text_set_network_mask>:
     756:	4e 61 73 74 61 76 65 6e 69 20 6d 61 73 6b 79 20     Nastaveni masky 
     766:	73 69 74 65 00                                      site.

0000076b <new_text_set_network_gw>:
     76b:	4e 61 73 74 61 76 65 6e 69 20 76 79 63 68 6f 7a     Nastaveni vychoz
     77b:	69 20 62 72 61 6e 79 00                             i brany.

00000783 <new_text_set_network_name>:
     783:	4e 61 73 74 61 76 65 6e 69 20 6e 61 7a 76 75 20     Nastaveni nazvu 
     793:	7a 61 72 69 7a 65 6e 69 00                          zarizeni.

0000079c <new_text_set_network_dns>:
     79c:	4e 61 73 74 61 76 65 6e 69 20 44 4e 53 20 73 65     Nastaveni DNS se
     7ac:	72 76 65 72 75 00                                   rveru.

000007b2 <new_text_set_network_mac>:
     7b2:	4e 61 73 74 61 76 65 6e 69 20 4d 41 43 20 61 64     Nastaveni MAC ad
     7c2:	72 65 73 79 00                                      resy.

000007c7 <button_zpet>:
     7c7:	5a 70 65 74 00                                      Zpet.

000007cc <nastaveni_site>:
     7cc:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

000007db <char_NULL>:
	...

000007dc <text_button_term_man>:
     7dc:	4d 41 4e 00                                         MAN.

000007e0 <text_button_term_prog>:
     7e0:	50 52 4f 47 00                                      PROG.

000007e5 <text_button_term_min>:
     7e5:	4d 49 4e 00                                         MIN.

000007e9 <text_button_term_max>:
     7e9:	4d 41 58 00                                         MAX.

000007ed <text_button_term_off>:
     7ed:	4f 46 46 00                                         OFF.

000007f1 <nastaveni_text>:
     7f1:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

000007fb <funkce_text>:
     7fb:	46 75 6e 6b 63 65 00                                Funkce.

00000802 <regulator_text>:
     802:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

0000080c <Menu_All>:
     80c:	06 05 03 07 ca 5d 02 08 22 01 96 00 aa 00 28 00     .....]..".....(.
     81c:	02 05 03 3c 08 ae 3e fb 07 22 01 5a 00 aa 00 28     ...<..>..".Z...(
     82c:	00 02 01 03 3c 08 ae 3e f1 07 22 01 1e 00 aa 00     ....<..>..".....
     83c:	28 00 02 02 0e 88 08 ae 3e 00 00 00 00 00 00 00     (.......>.......
	...
     8bc:	ed 07 0a 00 dc 00 52 00 3c 00 03 9a d6 ff ff 00     ......R.<.......
     8cc:	4a 6b 63 6b 0a ae 3e e9 07 64 00 dc 00 52 00 3c     Jkck..>..d...R.<
     8dc:	00 03 00 f8 ff ff 01 4a 6b 63 6b 0a ae 3e e5 07     .......Jkck..>..
     8ec:	be 00 dc 00 52 00 3c 00 03 1f 00 ff ff 07 4a 6b     ....R.<.......Jk
     8fc:	63 6b 0a ae 3e e0 07 18 01 dc 00 52 00 3c 00 03     ck..>......R.<..
     90c:	e0 ff ff ff 02 4a 6b 63 6b 0a ae 3e dc 07 72 01     .....Jkck..>..r.
     91c:	dc 00 52 00 3c 00 03 e0 07 ff ff 08 4a 6b 63 6b     ..R.<.......Jkck
     92c:	0a ae 3e 0a 00 82 00 00 e1 77 00 00 00 00 0c 03     ..>......w......
     93c:	3c ae 3e db 07 18 01 22 01 00 bd 4d 00 00 00 00     <.>...."...M....
     94c:	0c 03 3c ae 3e db 07 0a 00 1e 00 00 1d 49 00 00     ..<.>........I..
     95c:	00 00 09 03 3c ae 3e db 07 00 00 00 00 00 00 00     ....<.>.........
	...
     acc:	00 03 05 03 00 00 00 00 00 00 00 00 00 00 e0 01     ................
     adc:	40 01 01 ff ff 08 3e 3d 35 3d 2c 3d b0 3e cc 07     @.....>=5=,=.>..
     aec:	c7 07 0a 00 dc 00 be 00 28 00 02 00 21 88 08 ae     ........(...!...
     afc:	3e b2 07 18 01 dc 00 be 00 1e 00 01 00 03 3c 08     >.............<.
     b0c:	ae 3e 9c 07 18 01 b4 00 be 00 1e 00 01 00 03 3c     .>.............<
     b1c:	08 ae 3e 83 07 18 01 8c 00 be 00 1e 00 01 00 03     ..>.............
     b2c:	3c 08 ae 3e 6b 07 18 01 64 00 be 00 1e 00 01 00     <..>k...d.......
     b3c:	03 3c 08 ae 3e 56 07 18 01 3c 00 be 00 1e 00 01     .<..>V...<......
     b4c:	00 03 3c 08 ae 3e 49 07 18 01 14 00 be 00 1e 00     ..<..>I.........
     b5c:	01 00 03 3c 08 ae 3e 3a 07 0a 00 aa 00 be 00 28     ...<..>:.......(
     b6c:	00 01 00 a9 61 08 ae 3e 00 00 00 00 00 00 00 00     ....a..>........
	...
     c08:	00 0a 00 28 00 00 c1 59 c8 00 78 00 08 03 3c ae     ...(...Y..x...<.
     c18:	3e db 07 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
	...
     da4:	00 00 00 09 00 01 00 00 00 00 00 10 00 00 00 00     ................
     db4:	e0 01 40 01 01 ff ff 08 b0 3e b0 3e b0 3e b0 3e     ..@......>.>.>.>
     dc4:	af 5e c7 07 0a 00 dc 00 be 00 28 00 02 00 21 88     .^........(...!.
     dd4:	08 ae 3e 2c 07 0a 00 28 00 be 00 28 00 02 00 c5     ..>,...(...(....
     de4:	6c 08 ae 3e 00 00 00 00 00 00 00 00 00 00 00 00     l..>............
	...
     ee0:	00 00 00 18 01 22 01 00 bd 4d 00 00 00 00 0c 03     ....."...M......
     ef0:	3c ae 3e db 07 9a 01 48 00 00 e3 4b 28 00 7e 00     <.>....H...K(.~.
     f00:	08 03 3c ae 3e db 07 dc 00 14 00 00 a3 49 f0 00     ..<.>........I..
     f10:	f0 00 08 03 3c ae 3e db 07 00 00 00 00 00 00 00     ....<.>.........
	...
     f70:	e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 00 01     ..#...7..<<.....
     f80:	44 6d eb 46 8b 3c 08 00 00 00 00 00 00 00 00 00     Dm.F.<..........
	...
     f9c:	00 00 2b 9a 01 1e 00 28 00 28 00 02 00 ea 3c 08     ..+....(.(....<.
     fac:	ae 3e 2d 9a 01 c8 00 28 00 28 00 02 00 f5 3c 08     .>-....(.(....<.
     fbc:	ae 3e 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .>..............
	...
    1080:	00 02 00 03 00 01 02 00 00 03 00 00 00 00 e0 01     ................
    1090:	40 01 01 ff ff 08 b0 3e b0 3e b0 3e b0 3e 1d 07     @......>.>.>.>..
    10a0:	c7 07 0a 00 dc 00 be 00 28 00 02 00 21 88 08 ae     ........(...!...
    10b0:	3e 0c 07 0a 00 28 00 be 00 28 00 01 00 a6 72 08     >....(...(....r.
    10c0:	ae 3e f6 06 0a 00 64 00 be 00 28 00 01 00 ff 47     .>....d...(....G
    10d0:	08 ae 3e e4 06 0a 00 a0 00 be 00 28 00 01 00 cd     ..>........(....
    10e0:	57 08 ae 3e cf 06 18 01 28 00 be 00 28 00 01 00     W..>....(...(...
    10f0:	b3 47 08 ae 3e b8 06 18 01 64 00 be 00 28 00 01     .G..>....d...(..
    1100:	00 62 47 08 ae 3e 00 00 00 00 00 00 00 00 00 00     .bG..>..........
	...
    11bc:	00 18 01 22 01 00 bd 4d 00 00 00 00 0c 03 3c ae     ..."...M......<.
    11cc:	3e db 07 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
	...
    1358:	00 00 00 06 00 01 00 00 00 00 00 99 00 00 00 00     ................
    1368:	e0 01 40 01 01 ff ff 08 b0 3e b0 3e b0 3e b0 3e     ..@......>.>.>.>
    1378:	9e 06 c7 07 0a 00 dc 00 be 00 28 00 02 00 21 88     ..........(...!.
    1388:	08 ae 3e 00 00 00 00 00 00 00 00 00 00 00 00 00     ..>.............
	...
    1494:	00 00 00 18 01 22 01 00 bd 4d 00 00 00 00 0c 03     ....."...M......
    14a4:	3c ae 3e db 07 9a 01 48 00 02 e3 4b 28 00 56 00     <.>....H...K(.V.
    14b4:	08 03 3c ae 3e db 07 05 00 1e 00 00 a3 49 cc 01     ..<.>........I..
    14c4:	b4 00 08 03 3c ae 3e db 07 00 00 00 00 00 00 00     ....<.>.........
	...
    1550:	00 00 2b 9a 01 1e 00 28 00 28 00 02 02 ea 3c 08     ..+....(.(....<.
    1560:	ae 3e 2d 9a 01 a0 00 28 00 28 00 02 02 f5 3c 08     .>-....(.(....<.
    1570:	ae 3e 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .>..............
	...
    1614:	00 00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff     .....(.x.<......
    1624:	ff 82 50 02 03 02 02 00 fb 76 56 57 7e 3c 78 3c     ..P......vVW~<x<
    1634:	08 01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01     ................
    1644:	40 01 01 ff ff 08 b0 3e b0 3e b0 3e b0 3e 8f 06     @......>.>.>.>..
    1654:	c7 07 0a 00 dc 00 be 00 28 00 02 00 21 88 08 ae     ........(...!...
    1664:	3e 83 06 0a 00 28 00 be 00 28 00 01 00 11 47 08     >....(...(....G.
    1674:	ae 3e 75 06 0a 00 64 00 be 00 28 00 01 00 c1 46     .>u...d...(....F
    1684:	08 ae 3e 6a 06 0a 00 a0 00 be 00 28 00 01 00 a3     ..>j.......(....
    1694:	46 08 ae 3e 56 06 18 01 28 00 be 00 28 00 01 00     F..>V...(...(...
    16a4:	04 3c 08 ae 3e 00 00 00 00 00 00 00 00 00 00 00     .<..>...........
	...
    1770:	00 18 01 22 01 00 bd 4d 00 00 00 00 0c 03 3c ae     ..."...M......<.
    1780:	3e db 07 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
	...
    190c:	00 00 00 06 00 01 00 00 00 00 00 9a 00 00 00 00     ................
    191c:	e0 01 40 01 01 ff ff 08 b0 3e b0 3e b0 3e b0 3e     ..@......>.>.>.>
	...
    2494:	4b 06 47 06 1e 00 3c 00 64 00 28 00 02 00 eb 49     K.G...<.d.(....I
    24a4:	08 ae 3e 44 06 fa 00 3c 00 64 00 28 00 02 00 21     ..>D...<.d.(...!
    24b4:	88 08 ae 3e 00 00 00 00 00 00 00 00 00 00 00 00     ...>............
	...
    25b0:	00 00 00 14 00 23 00 00 c4 44 00 00 00 00 08 03     .....#...D......
    25c0:	3c ae 3e db 07 00 00 00 00 00 00 00 00 00 00 00     <.>.............
	...
    2750:	00 02 00 01 00 00 00 00 00 64 32 00 32 00 7c 01     .........d2.2.|.
    2760:	8c 00 06 e0 ff 08 b0 3e b0 3e b0 3e b0 3e 4b 06     .......>.>.>.>K.
    2770:	3d 06 0a 00 c8 00 82 00 28 00 02 00 cd 49 08 ae     =.......(....I..
    2780:	3e 36 06 96 00 c8 00 82 00 28 00 02 00 21 88 08     >6.......(...!..
    2790:	ae 3e 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .>..............
	...
    288c:	00 64 00 2d 00 00 e9 4c b4 00 28 00 08 03 3c ae     .d.-...L..(...<.
    289c:	3e db 07 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
	...
    2948:	2b 3c 00 2d 00 28 00 28 00 02 00 85 3d 08 ae 3e     +<.-.(.(....=..>
    2958:	2d 18 01 2d 00 28 00 28 00 02 00 c7 3d 08 ae 3e     -..-.(.(....=..>
	...
    2a28:	00 00 00 02 00 01 00 00 02 00 00 66 0a 00 0a 00     ...........f....
    2a38:	cc 01 04 01 06 e0 ff 08 b0 3e b0 3e b0 3e b0 3e     .........>.>.>.>
    2a48:	2b 06 3d 06 0a 00 c8 00 82 00 28 00 02 00 a9 49     +.=.......(....I
    2a58:	08 ae 3e 36 06 96 00 c8 00 82 00 28 00 02 00 21     ..>6.......(...!
    2a68:	88 08 ae 3e 21 06 2c 01 c8 00 82 00 28 00 02 00     ...>!.,.....(...
    2a78:	c6 3e 08 ae 3e 1f 06 40 01 23 00 28 00 28 00 02     .>..>..@.#.(.(..
    2a88:	00 47 3d 08 ae 3e 1d 06 6d 01 23 00 28 00 28 00     .G=..>..m.#.(.(.
    2a98:	02 01 47 3d 08 ae 3e 1b 06 9a 01 23 00 28 00 28     ..G=..>....#.(.(
    2aa8:	00 02 02 47 3d 08 ae 3e 00 00 00 00 00 00 00 00     ...G=..>........
	...
    2b64:	00 00 00 0a 00 23 00 00 63 4c 2c 01 28 00 08 03     .....#..cL,.(...
    2b74:	3c ae 3e db 07 00 00 00 00 00 00 00 00 00 00 00     <.>.............
	...
    2ca0:	00 00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00     ....P......((...
    2cb0:	00 03 51 3d eb 3e 4a 3d 08 00 00 00 00 00 00 00     ..Q=.>J=........
	...
    2d04:	00 06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01     .........g......
    2d14:	04 01 06 e0 ff 08 b0 3e b0 3e b0 3e b0 3e 4b 06     .......>.>.>.>K.
    2d24:	3d 06 0a 00 c8 00 82 00 28 00 02 00 a9 49 08 ae     =.......(....I..
    2d34:	3e 36 06 96 00 c8 00 82 00 28 00 02 00 21 88 08     >6.......(...!..
    2d44:	ae 3e 21 06 2c 01 c8 00 82 00 28 00 02 00 c6 3e     .>!.,.....(....>
    2d54:	08 ae 3e 00 00 00 00 00 00 00 00 00 00 00 00 00     ..>.............
	...
    2e40:	00 0a 00 23 00 00 63 4c 2c 01 28 00 08 03 3c ae     ...#..cL,.(...<.
    2e50:	3e db 07 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
	...
    2f7c:	0a 00 5a 00 23 00 23 00 02 2d 2d 02 0a 00 00 02     ..Z.#.#..--.....
    2f8c:	71 3d 04 3f 83 3d 08 00 00 00 00 00 00 00 00 00     q=.?.=..........
	...
    2fdc:	00 00 00 03 00 01 00 00 00 01 00 65 0a 00 0a 00     ...........e....
    2fec:	cc 01 04 01 06 e0 ff 08 b0 3e b0 3e b0 3e b0 3e     .........>.>.>.>
    2ffc:	4b 06 18 06 fa 00 3c 00 64 00 28 00 02 00 21 88     K.....<.d.(...!.
    300c:	08 ae 3e 00 00 00 00 00 00 00 00 00 00 00 00 00     ..>.............
	...
    3118:	00 00 00 14 00 23 00 00 c4 44 00 00 00 00 08 03     .....#...D......
    3128:	3c ae 3e db 07 00 00 00 00 00 00 00 00 00 00 00     <.>.............
	...
    32b8:	00 01 00 01 00 00 00 00 00 68 32 00 32 00 7c 01     .........h2.2.|.
    32c8:	8c 00 06 e0 ff 08 b0 3e b0 3e b0 3e b0 3e 00 00     .......>.>.>.>..
	...
    35b0:	fd 05 c7 07 0a 00 dc 00 be 00 28 00 02 00 21 88     ..........(...!.
    35c0:	08 ae 3e ef 05 18 01 be 00 be 00 28 00 02 00 39     ..>........(...9
    35d0:	6d 08 ae 3e 10 5e 18 01 8c 00 be 00 28 00 02 00     m..>.^......(...
    35e0:	87 6f 08 ae 3e e0 05 18 01 5a 00 be 00 28 00 02     .o..>....Z...(..
    35f0:	00 46 6f 08 ae 3e d0 05 18 01 28 00 be 00 28 00     .Fo..>....(...(.
    3600:	02 00 db 6f 08 ae 3e 00 00 00 00 00 00 00 00 00     ...o..>.........
	...
    36cc:	00 00 00 18 01 22 01 00 bd 4d 00 00 00 00 0c 03     ....."...M......
    36dc:	3c ae 3e db 07 14 00 14 00 00 c7 6d 00 00 00 00     <.>........m....
    36ec:	08 03 3c ae 3e db 07 14 00 14 00 00 dc 6e 00 00     ..<.>........n..
    36fc:	00 00 0c 03 3c ae 3e db 07 00 00 00 00 00 00 00     ....<.>.........
	...
    386c:	00 05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01     ................
    387c:	40 01 01 ff ff 08 b0 3e b0 3e b0 3e b0 3e a0 5e     @......>.>.>.>.^
    388c:	c7 07 0a 00 dc 00 be 00 28 00 02 00 21 88 08 ae     ........(...!...
    389c:	3e ef 05 18 01 5a 00 be 00 28 00 02 00 94 57 08     >....Z...(....W.
    38ac:	ae 3e e0 05 18 01 28 00 be 00 28 00 02 00 1e 59     .>....(...(....Y
    38bc:	08 ae 3e c0 05 18 01 8c 00 be 00 28 00 02 00 1b     ..>........(....
    38cc:	59 08 ae 3e 00 00 00 00 00 00 00 00 00 00 00 00     Y..>............
	...
    39a8:	00 14 00 14 00 00 3c 75 00 00 00 00 0c 03 3c ae     ......<u......<.
    39b8:	3e db 07 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
	...
    3b44:	00 00 00 04 00 01 00 00 00 00 00 07 00 00 00 00     ................
    3b54:	e0 01 40 01 01 ff ff 08 b0 3e b0 3e b0 3e b0 3e     ..@......>.>.>.>
    3b64:	a0 5e c7 07 0a 00 dc 00 be 00 28 00 02 00 21 88     .^........(...!.
    3b74:	08 ae 3e a5 05 0a 00 28 00 be 00 28 00 01 00 1a     ..>....(...(....
    3b84:	79 08 ae 3e 00 00 00 00 00 00 00 00 00 00 00 00     y..>............
	...
    3c80:	00 00 00 dc 00 14 00 00 a3 49 f0 00 f0 00 08 03     .........I......
    3c90:	3c ae 3e db 07 18 01 22 01 00 bd 4d 00 00 00 00     <.>...."...M....
    3ca0:	0c 03 3c ae 3e db 07 9a 01 48 00 01 e3 4b 28 00     ..<.>....H...K(.
    3cb0:	7e 00 08 03 3c ae 3e db 07 00 00 00 00 00 00 00     ~...<.>.........
	...
    3d10:	e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 01 04     ..#...7..<<.....
    3d20:	ab 77 90 77 98 3c 08 00 00 00 00 00 00 00 00 00     .w.w.<..........
	...
    3d3c:	00 00 2b 9a 01 1e 00 28 00 28 00 02 01 ea 3c 08     ..+....(.(....<.
    3d4c:	ae 3e 2d 9a 01 c8 00 28 00 28 00 02 01 f5 3c 08     .>-....(.(....<.
    3d5c:	ae 3e 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .>..............
	...
    3e20:	00 02 00 03 00 01 02 00 00 06 00 00 00 00 e0 01     ................
    3e30:	40 01 01 ff ff 08 b0 3e b0 3e b0 3e b0 3e 00 00     @......>.>.>.>..
	...
    46cc:	93 05 c7 07 0a 00 dc 00 be 00 28 00 02 00 21 88     ..........(...!.
    46dc:	08 ae 3e cc 07 0a 00 28 00 be 00 28 00 02 10 0e     ..>....(...(....
    46ec:	88 08 ae 3e 85 05 0a 00 64 00 be 00 28 00 02 00     ...>....d...(...
    46fc:	03 3c 08 ae 3e 75 05 18 01 a0 00 be 00 28 00 02     .<..>u.......(..
    470c:	00 d7 56 08 ae 3e 1d 07 18 01 28 00 be 00 28 00     ..V..>....(...(.
    471c:	02 99 0e 88 08 ae 3e 6a 05 18 01 64 00 be 00 28     ......>j...d...(
    472c:	00 02 9c 0e 88 08 ae 3e 8f 06 0a 00 a0 00 be 00     .......>........
    473c:	28 00 02 9a 0e 88 08 ae 3e 59 05 18 01 dc 00 be     (.......>Y......
    474c:	00 28 00 01 00 00 3c 08 ae 3e 00 00 00 00 00 00     .(....<..>......
	...
    47e8:	00 00 00 18 01 22 01 00 bd 4d 00 00 00 00 0c 03     ....."...M......
    47f8:	3c ae 3e db 07 00 00 00 00 00 00 00 00 00 00 00     <.>.............
	...
    4988:	00 08 00 01 00 00 00 00 00 96 00 00 00 00 e0 01     ................
    4998:	40 01 01 ff ff 08 b0 3e b0 3e b0 3e b0 3e f1 07     @......>.>.>.>..
    49a8:	c7 07 0a 00 dc 00 be 00 28 00 02 00 21 88 08 ae     ........(...!...
    49b8:	3e 4e 05 0a 00 28 00 be 00 28 00 02 96 0e 88 08     >N...(...(......
    49c8:	ae 3e 40 05 18 01 28 00 be 00 28 00 02 00 03 3c     .>@...(...(....<
    49d8:	08 ae 3e 33 05 0a 00 a0 00 be 00 28 00 02 98 0e     ..>3.......(....
    49e8:	88 08 ae 3e 26 05 0a 00 64 00 be 00 28 00 02 97     ...>&...d...(...
    49f8:	0e 88 08 ae 3e 00 00 00 00 00 00 00 00 00 00 00     ....>...........
	...
    4ac4:	00 18 01 22 01 00 bd 4d 00 00 00 00 0c 03 3c ae     ..."...M......<.
    4ad4:	3e db 07 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
	...
    4c60:	00 00 00 05 00 01 00 00 00 00 00 02 00 00 00 00     ................
    4c70:	e0 01 40 01 01 ff ff 08 b0 3e b0 3e b0 3e b0 3e     ..@......>.>.>.>
    4c80:	12 05 c7 07 0a 00 dc 00 be 00 28 00 02 00 21 88     ..........(...!.
    4c90:	08 ae 3e af 5e 0a 00 28 00 be 00 28 00 02 03 0e     ..>.^..(...(....
    4ca0:	88 08 ae 3e 07 05 0a 00 64 00 be 00 28 00 02 06     ...>....d...(...
    4cb0:	0e 88 08 ae 3e fd 04 0a 00 a0 00 be 00 28 00 02     ....>........(..
    4cc0:	00 03 3c 08 ae 3e 00 00 00 00 00 00 00 00 00 00     ..<..>..........
	...
    4d9c:	00 00 00 18 01 22 01 00 bd 4d 00 00 00 00 0c 03     ....."...M......
    4dac:	3c ae 3e db 07 00 00 00 00 00 00 00 00 00 00 00     <.>.............
	...
    4f3c:	00 04 00 01 00 00 00 00 00 97 00 00 00 00 e0 01     ................
    4f4c:	40 01 01 ff ff 08 b0 3e b0 3e b0 3e b0 3e e9 04     @......>.>.>.>..
    4f5c:	c7 07 0a 00 dc 00 be 00 28 00 02 00 21 88 08 ae     ........(...!...
    4f6c:	3e 9e 06 0a 00 28 00 be 00 28 00 01 08 0e 88 08     >....(...(......
    4f7c:	ae 3e 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .>..............
	...
    5078:	00 18 01 22 01 00 bd 4d 00 00 00 00 0c 03 3c ae     ..."...M......<.
    5088:	3e db 07 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
	...
    5104:	00 00 0a 00 64 00 be 00 28 00 01 01 01 00 01 01     ....d...(.......
    5114:	00 01 06 40 e5 46 2b 3d 08 00 00 00 00 00 00 00     ...@.F+=........
	...
    51f8:	00 0a 00 a0 00 be 00 28 00 01 01 e0 07 ff ff 01     .......(........
    5208:	32 00 01 01 ff 01 52 48 df 46 2b 3d 37 3c 08 02     2.....RH.F+=7<..
    5218:	00 01 00 01 00 00 01 98 00 00 00 00 e0 01 40 01     ..............@.
    5228:	01 ff ff 08 b0 3e b0 3e b0 3e b0 3e e9 04 c7 07     .....>.>.>.>....
    5238:	0a 00 dc 00 be 00 28 00 02 00 21 88 08 ae 3e 00     ......(...!...>.
	...
    5350:	00 00 00 0e 01 28 00 00 e9 4c 8c 00 28 00 08 03     .....(...L..(...
    5360:	3c 3d 3c db 07 00 00 00 00 00 00 00 00 00 00 00     <=<.............
	...
    5398:	00 00 00 d9 04 0a 00 28 00 be 00 28 00 01 e0 07     .......(...(....
    53a8:	ff ff 00 40 57 72 3c c9 3f 08 00 00 00 00 00 00     ...@Wr<.?.......
	...
    540c:	00 00 2b 9a 01 28 00 28 00 28 00 02 00 85 3d 08     ..+..(.(.(....=.
    541c:	3d 3c 2d e6 00 28 00 28 00 28 00 02 00 c7 3d 08     =<-..(.(.(....=.
    542c:	3d 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00     =<..............
	...
    54f0:	00 01 00 01 01 00 02 00 00 9b 0a 00 0a 00 cc 01     ................
    5500:	18 01 06 e0 ff 08 b0 3e b0 3e b0 3e 44 3c 6a 05     .......>.>.>D<j.
    5510:	c7 07 0a 00 dc 00 be 00 28 00 02 00 21 88 08 ae     ........(...!...
    5520:	3e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
	...
    562c:	00 18 01 22 01 00 bd 4d 00 00 00 00 0c 03 3c ae     ..."...M......<.
    563c:	3e db 07 0a 00 1e 00 00 d9 44 00 00 00 00 08 03     >........D......
    564c:	3c ae 3e db 07 00 00 00 00 00 00 00 00 00 00 00     <.>.............
	...
    57c8:	00 00 00 01 00 02 00 00 00 00 00 9c 00 00 00 00     ................
    57d8:	e0 01 40 01 01 ff ff 08 b0 3e b0 3e b0 3e b0 3e     ..@......>.>.>.>
    57e8:	f9 5e c7 07 0a 00 dc 00 be 00 28 00 02 00 21 88     .^........(...!.
    57f8:	08 ae 3e 00 00 00 00 00 00 00 00 00 00 00 00 00     ..>.............
	...
    5a84:	00 00 00 0a 00 28 00 64 00 28 00 01 01 e0 07 ff     .....(.d.(......
    5a94:	ff 6e 32 02 04 02 ff 06 9f 3f ed 56 2b 3d 05 3c     .n2......?.V+=.<
    5aa4:	08 01 00 00 01 00 00 00 01 9d 0a 00 0a 00 cc 01     ................
    5ab4:	18 01 06 e0 ff 08 b0 3e b0 3e b0 3e 44 3c           .......>.>.>D<

00005ac2 <keyboad_number_char_special>:
    5ac2:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    5ad2:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

00005adc <keyboad_number_char_lower>:
    5adc:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    5aec:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

00005af6 <keyboad_number_char_upper>:
    5af6:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    5b06:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

00005b10 <network_name>:
    5b10:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

00005b1d <network_mqtt_key>:
    5b1d:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

00005b2e <network_mqtt_user>:
    5b2e:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    5b3e:	72 00                                               r.

00005b40 <network_mqtt_port>:
    5b40:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    5b50:	74 00                                               t.

00005b52 <network_mqtt_host>:
    5b52:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    5b62:	74 00                                               t.

00005b64 <network_ntp>:
    5b64:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

00005b70 <network_dns>:
    5b70:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

00005b7c <network_gw>:
    5b7c:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

00005b87 <network_netmask>:
    5b87:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

00005b97 <network_mac>:
    5b97:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

00005ba3 <new_text_slash_rtds_control_list>:
    5ba3:	2f 72 74 64 73 2d 63 6f 6e 74 72 6f 6c 2f 6c 69     /rtds-control/li
    5bb3:	73 74 00                                            st.

00005bb6 <new_text_slash_rtds_slash>:
    5bb6:	2f 72 74 64 73 2f 00                                /rtds/.

00005bbd <global_time_offset>:
    5bbd:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    5bcd:	6f 66 66 73 65 74 00                                offset.

00005bd4 <global_time_ntp>:
    5bd4:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

00005be4 <global_time_set>:
    5be4:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

00005bf4 <termbig_header_out>:
    5bf4:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

00005c02 <termbig_subscribe>:
    5c02:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    5c12:	73 63 72 69 62 65 00                                scribe.

00005c19 <thermctl_subscribe>:
    5c19:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    5c29:	62 73 63 72 69 62 65 00                             bscribe.

00005c31 <lightctl_header_out>:
    5c31:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

00005c40 <thermctl_header_in>:
    5c40:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

00005c4e <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    5c4e:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    5c5e:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    5c6e:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    5c7e:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    5c8e:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    5c9e:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    5cae:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

00005cba <text_rtc_cas>:
    5cba:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    5cca:	6e 79 00                                            ny.

00005ccd <text_ntp_cas>:
    5ccd:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    5cdd:	63 61 73 00                                         cas.

00005ce1 <text_pid_regulator>:
    5ce1:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

00005cef <text_nrf_rozhrani>:
    5cef:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

00005cfc <text_rest_rozhrani>:
    5cfc:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    5d0c:	69 00                                               i.

00005d0e <thermctl_header_out>:
    5d0e:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

00005d1d <text_mqtt_rozhrani>:
    5d1d:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

00005d2b <text_ethernet_rozhrani>:
    5d2b:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    5d3b:	69 00                                               i.

00005d3d <text_onewire_hledam>:
    5d3d:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

00005d4a <text_onewire_rozhrani>:
    5d4a:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

00005d59 <text_touchscreen>:
    5d59:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

00005d65 <text_nastaveni_systemu>:
    5d65:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    5d75:	75 00                                               u.

00005d77 <text_test_eeprom>:
    5d77:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

00005d87 <text_ok>:
    5d87:	4f 4b 00                                            OK.

00005d8a <text_test_ram>:
    5d8a:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

00005d97 <text_bezny_start>:
    5d97:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

00005da3 <text_prog>:
    5da3:	50 52 4f 47 00                                      PROG.

00005da8 <text_vychozi_nastaveni>:
    5da8:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    5db8:	69 00                                               i.

00005dba <text_vnitrni_ochrany>:
    5dba:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

00005dca <term_title>:
    5dca:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    5dda:	6f 72 20 76 33 00                                   or v3.

00005de0 <current_time>:
    5de0:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00005ded <current_temp>:
    5ded:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    5dfd:	3a 00                                               :.

00005dff <new_text_date_error>:
    5dff:	2d 2d 2e 2d 2d 2e 2d 2d 2d 2d 00                    --.--.----.

00005e0a <text_err>:
    5e0a:	45 72 72 6f 72 00                                   Error.

00005e10 <nastaveni_tds_period>:
    5e10:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

00005e1f <temp_offset_short>:
    5e1f:	6f 66 66 73 65 74 3a 00                             offset:.

00005e27 <text_online>:
    5e27:	4f 6e 6c 69 6e 65 00                                Online.

00005e2e <text_last_update>:
    5e2e:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    5e3e:	7a 61 63 65 3a 00                                   zace:.

00005e44 <current_temp_short>:
    5e44:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

00005e4d <text_nazev>:
    5e4d:	4e 61 7a 65 76 3a 00                                Nazev:.

00005e54 <new_text_rtds_type_temp>:
    5e54:	54 79 70 3a 20 76 7a 64 61 6c 65 6e 61 20 74 65     Typ: vzdalena te
    5e64:	70 6c 6f 74 61 00                                   plota.

00005e6a <text_nastavit_tds>:
    5e6a:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    5e7a:	6c 6f 00                                            lo.

00005e7d <text_not_used>:
    5e7d:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

00005e8a <text_associovat_tds>:
    5e8a:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    5e9a:	64 6c 6f 00                                         dlo.

00005e9e <text_rtds_prefix>:
    5e9e:	2f 00                                               /.

00005ea0 <nastaveni_rtds>:
    5ea0:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

00005eaf <nastaveni_onewire>:
    5eaf:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

00005ebd <new_text_jas_display>:
    5ebd:	4e 61 73 74 61 76 65 6e 69 20 6a 61 73 75 20 64     Nastaveni jasu d
    5ecd:	69 73 70 6c 61 79 65 00                             isplaye.

00005ed5 <new_text_jas_display_manual>:
    5ed5:	4d 61 6e 75 61 6c 6e 69 20 72 69 7a 65 6e 69 20     Manualni rizeni 
	...

00005ee6 <new_text_jas_display_automat>:
    5ee6:	41 75 74 6f 6d 61 74 69 63 6b 65 20 72 69 7a 65     Automaticke rize
    5ef6:	6e 69 00                                            ni.

00005ef9 <new_text_auto_display_shutdown>:
    5ef9:	41 75 74 6f 6d 61 74 69 63 6b 65 20 76 79 70 6e     Automaticke vypn
    5f09:	75 74 69 20 64 69 73 70 6c 61 79 65 00              uti displaye.

00005f16 <new_text_vypnuto>:
    5f16:	56 79 70 6e 75 74 6f 00                             Vypnuto.

00005f1e <new_text_device_dns>:
    5f1e:	44 4e 53 20 73 65 72 76 65 72 00                    DNS server.

00005f29 <new_text_device_gw>:
    5f29:	56 79 63 68 6f 7a 69 20 62 72 61 6e 61 00           Vychozi brana.

00005f37 <new_text_device_mask>:
    5f37:	49 50 20 6d 61 73 6b 61 00                          IP maska.

00005f40 <new_text_device_ip>:
    5f40:	49 50 20 61 64 72 65 73 61 00                       IP adresa.

00005f4a <new_text_device_nazev>:
    5f4a:	4e 61 7a 65 76 20 7a 61 72 69 7a 65 6e 69 00        Nazev zarizeni.

00005f59 <new_text_device_mac>:
    5f59:	4d 41 43 20 61 64 72 65 73 61 00                    MAC adresa.

00005f64 <new_text_error_ntp_time>:
    5f64:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    5f74:	45 52 52 4f 52 00                                   ERROR.

00005f7a <new_text_ok_ntp_time>:
    5f7a:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    5f8a:	4f 4b 00                                            OK.

00005f8d <new_text_ok_connect_seznam>:
    5f8d:	4b 6f 6e 65 6b 74 69 76 69 74 61 20 4f 4b 00        Konektivita OK.

00005f9c <new_text_err_connect_seznam>:
    5f9c:	4b 6f 6e 65 6b 74 69 76 69 74 61 20 45 52 52 4f     Konektivita ERRO
    5fac:	52 00                                               R.

00005fae <seznam_server>:
    5fae:	77 77 77 2e 73 65 7a 6e 61 6d 2e 63 7a 00           www.seznam.cz.

00005fbc <new_text_mqtt_error>:
    5fbc:	4d 51 54 54 20 76 20 63 68 79 62 65 3a 20 00        MQTT v chybe: .

00005fcb <new_text_mqtt_processed>:
    5fcb:	4d 51 54 54 20 7a 70 72 61 63 6f 76 61 6e 79 63     MQTT zpracovanyc
    5fdb:	68 3a 20 00                                         h: .

00005fdf <new_text_mqtt_receive>:
    5fdf:	4d 51 54 54 20 70 72 69 6a 61 74 79 63 68 3a 20     MQTT prijatych: 
	...

00005ff0 <new_text_mqtt_send>:
    5ff0:	4d 51 54 54 20 6f 64 65 73 6c 61 6e 79 63 68 3a     MQTT odeslanych:
    6000:	20 00                                                .

00006002 <new_text_selfcheck_test>:
    6002:	53 65 6c 66 63 68 65 63 6b 3a 20 00                 Selfcheck: .

0000600e <new_text_internal_temp>:
    600e:	49 6e 74 65 72 6e 69 20 74 65 70 6c 6f 74 61 3a     Interni teplota:
    601e:	20 00                                                .

00006020 <new_text_consume_ampere>:
    6020:	4f 64 62 65 72 20 70 72 6f 75 64 75 3a 20 00        Odber proudu: .

0000602f <new_text_tritri_volt>:
    602f:	49 6e 74 65 72 6e 69 20 6e 61 70 65 74 69 20 33     Interni napeti 3
    603f:	2e 33 20 00                                         .3 .

00006043 <new_text_pet_volt>:
    6043:	49 6e 74 65 72 6e 69 20 6e 61 70 65 74 69 20 35     Interni napeti 5
    6053:	2e 30 20 00                                         .0 .

00006057 <new_text_input_volt>:
    6057:	56 73 74 75 70 6e 69 20 6e 61 70 65 74 69 20 00     Vstupni napeti .

00006067 <rf24_pa_dbm_e_str_3>:
    6067:	50 41 5f 4d 41 58 00                                PA_MAX.

0000606e <rf24_pa_dbm_e_str_2>:
    606e:	50 41 5f 48 49 47 48 00                             PA_HIGH.

00006076 <rf24_pa_dbm_e_str_1>:
    6076:	50 41 5f 4c 4f 57 00                                PA_LOW.

0000607d <rf24_pa_dbm_e_str_0>:
    607d:	50 41 5f 4d 49 4e 00                                PA_MIN.

00006084 <rf24_crclength_e_str_2>:
    6084:	31 36 20 62 69 74 73 00                             16 bits.

0000608c <rf24_crclength_e_str_1>:
    608c:	38 20 62 69 74 73 00                                8 bits.

00006093 <rf24_crclength_e_str_0>:
    6093:	44 69 73 61 62 6c 65 64 00                          Disabled.

0000609c <rf24_model_e_str_1>:
    609c:	6e 52 46 32 34 4c 30 31 2b 00                       nRF24L01+.

000060a6 <rf24_model_e_str_0>:
    60a6:	6e 52 46 32 34 4c 30 31 00                          nRF24L01.

000060af <rf24_datarate_e_str_2>:
    60af:	32 35 30 4b 42 50 53 00                             250KBPS.

000060b7 <rf24_datarate_e_str_1>:
    60b7:	32 4d 42 50 53 00                                   2MBPS.

000060bd <rf24_datarate_e_str_0>:
    60bd:	31 4d 42 50 53 00                                   1MBPS.

000060c3 <port_to_mode_PGM>:
    60c3:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

000060d3 <digital_pin_to_timer_PGM>:
    60d3:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    6107:	00 03                                               ..

00006109 <RF24::print_status(unsigned char)::__c>:
    6109:	53 54 41 54 55 53 09 09 20 3d 20 30 78 25 30 32     STATUS.. = 0x%02
    6119:	78 20 52 58 5f 44 52 3d 25 78 20 54 58 5f 44 53     x RX_DR=%x TX_DS
    6129:	3d 25 78 20 4d 41 58 5f 52 54 3d 25 78 20 52 58     =%x MAX_RT=%x RX
    6139:	5f 50 5f 4e 4f 3d 25 78 20 54 58 5f 46 55 4c 4c     _P_NO=%x TX_FULL
    6149:	3d 25 78 0d 0a 00                                   =%x...

0000614f <_ZZN4RF2412printDetailsEvE3__c__12_>:
    614f:	50 41 20 50 6f 77 65 72 09 20 3d 20 25 53 0d 0a     PA Power. = %S..
	...

00006160 <rf24_pa_dbm_e_str_P>:
    6160:	7d 60 76 60 6e 60 67 60                             }`v`n`g`

00006168 <_ZZN4RF2412printDetailsEvE3__c__11_>:
    6168:	43 52 43 20 4c 65 6e 67 74 68 09 20 3d 20 25 53     CRC Length. = %S
    6178:	0d 0a 00                                            ...

0000617b <rf24_crclength_e_str_P>:
    617b:	93 60 8c 60 84 60                                   .`.`.`

00006181 <_ZZN4RF2412printDetailsEvE3__c__10_>:
    6181:	4d 6f 64 65 6c 09 09 20 3d 20 25 53 0d 0a 00        Model.. = %S...

00006190 <rf24_model_e_str_P>:
    6190:	a6 60 9c 60                                         .`.`

00006194 <RF24::printDetails()::__c>:
    6194:	44 61 74 61 20 52 61 74 65 09 20 3d 20 25 53 0d     Data Rate. = %S.
    61a4:	0a 00                                               ..

000061a6 <rf24_datarate_e_str_P>:
    61a6:	bd 60 b7 60 af 60                                   .`.`.`

000061ac <RF24::printDetails()::__c>:
    61ac:	44 59 4e 50 44 2f 46 45 41 54 55 52 45 00           DYNPD/FEATURE.

000061ba <RF24::printDetails()::__c>:
    61ba:	43 4f 4e 46 49 47 09 00                             CONFIG..

000061c2 <RF24::printDetails()::__c>:
    61c2:	52 46 5f 53 45 54 55 50 00                          RF_SETUP.

000061cb <RF24::printDetails()::__c>:
    61cb:	52 46 5f 43 48 09 00                                RF_CH..

000061d2 <RF24::printDetails()::__c>:
    61d2:	45 4e 5f 52 58 41 44 44 52 00                       EN_RXADDR.

000061dc <RF24::printDetails()::__c>:
    61dc:	45 4e 5f 41 41 09 00                                EN_AA..

000061e3 <RF24::printDetails()::__c>:
    61e3:	52 58 5f 50 57 5f 50 30 2d 36 00                    RX_PW_P0-6.

000061ee <RF24::printDetails()::__c>:
    61ee:	54 58 5f 41 44 44 52 09 00                          TX_ADDR..

000061f7 <RF24::printDetails()::__c>:
    61f7:	52 58 5f 41 44 44 52 5f 50 32 2d 35 00              RX_ADDR_P2-5.

00006204 <RF24::printDetails()::__c>:
    6204:	52 58 5f 41 44 44 52 5f 50 30 2d 31 00              RX_ADDR_P0-1.

00006211 <status_know_devices>:
    6211:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    6221:	63 65 73 00                                         ces.

00006225 <_ZL10network_ip.lto_priv.284>:
    6225:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

00006230 <status_mqtt_process>:
    6230:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    6240:	65 73 73 00                                         ess.

00006244 <status_mqtt_receive>:
    6244:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    6254:	69 76 65 00                                         ive.

00006258 <status_mqtt_error>:
    6258:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    6268:	72 00                                               r.

0000626a <status_mqtt_send>:
    626a:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

0000627b <_ZL17termbig_header_in.lto_priv.280>:
    627b:	2f 74 65 72 6d 62 69 67 2d 69 6e 2f 00              /termbig-in/.

00006288 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    6288:	0d 0a 00                                            ...

0000628b <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    628b:	25 30 32 78 00                                      %02x.

00006290 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    6290:	20 30 78 00                                          0x.

00006294 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    6294:	25 53 09 20 3d 00                                   %S. =.

0000629a <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    629a:	0d 0a 00                                            ...

0000629d <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    629d:	20 30 78 25 30 32 78 00                              0x%02x.

000062a5 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    62a5:	25 53 09 20 3d 00                                   %S. =.

000062ab <daysInMonth>:
    62ab:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

000062b7 <lcd_font>:
    62b7:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    62c7:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    62d7:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    62e7:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    62f7:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    6307:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    6317:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    6327:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    6337:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    6347:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    6357:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    6367:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    6377:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    6387:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    6397:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    63a7:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    63b7:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    63c7:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    63d7:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    63e7:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    63f7:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    6407:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    6417:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    6427:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    6437:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    6447:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    6457:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    6467:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    6477:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    6487:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    6497:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    64a7:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    64b7:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    64c7:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    64d7:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    64e7:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    64f7:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    6507:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    6517:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    6527:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    6537:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    6547:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    6557:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    6567:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    6577:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    6587:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    6597:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    65a7:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    65b7:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    65c7:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    65d7:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    65e7:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    65f7:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    6607:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    6617:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    6627:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    6637:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    6647:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    6657:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    6667:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    6677:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    6687:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    6697:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    66a7:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    66b7:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    66c7:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    66d7:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    66e7:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    66f7:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    6707:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    6717:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    6727:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    6737:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    6747:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    6757:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    6767:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    6777:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    6787:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    6797:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    67a7:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

000067b2 <port_to_input_PGM>:
    67b2:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

000067c2 <digital_pin_to_bit_mask_PGM>:
    67c2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    67d2:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    67e2:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    67f2:	08 10 20 40 80 20                                   .. @. 

000067f8 <port_to_output_PGM>:
    67f8:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00006808 <digital_pin_to_port_PGM>:
    6808:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    6818:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    6828:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    6838:	06 06 06 06 06 07                                   ......

0000683e <__ctors_start>:
__ctors_start():
    683e:	64 c3       	rjmp	.+1736   	; 0x6f08 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x4c>

00006840 <__ctors_end>:
__dtors_end():
    6840:	11 24       	eor	r1, r1
    6842:	1f be       	out	0x3f, r1	; 63
    6844:	cf ef       	ldi	r28, 0xFF	; 255
    6846:	d1 e2       	ldi	r29, 0x21	; 33
    6848:	de bf       	out	0x3e, r29	; 62
    684a:	cd bf       	out	0x3d, r28	; 61
    684c:	00 e0       	ldi	r16, 0x00	; 0
    684e:	0c bf       	out	0x3c, r16	; 60

00006850 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    6850:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    6852:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    6854:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    6856:	e2 e4       	ldi	r30, 0x42	; 66
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    6858:	f4 ec       	ldi	r31, 0xC4	; 196
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    685a:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    685c:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    685e:	02 c0       	rjmp	.+4      	; 0x6864 <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    6860:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    6862:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    6864:	ae 3e       	cpi	r26, 0xEE	; 238
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    6866:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    6868:	d9 f7       	brne	.-10     	; 0x6860 <__do_copy_data+0x10>

0000686a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    686a:	24 e1       	ldi	r18, 0x14	; 20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    686c:	ae ee       	ldi	r26, 0xEE	; 238
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    686e:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    6870:	01 c0       	rjmp	.+2      	; 0x6874 <.do_clear_bss_start>

00006872 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    6872:	1d 92       	st	X+, r1

00006874 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    6874:	a1 37       	cpi	r26, 0x71	; 113
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    6876:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    6878:	e1 f7       	brne	.-8      	; 0x6872 <.do_clear_bss_loop>

0000687a <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    687a:	14 e3       	ldi	r17, 0x34	; 52
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    687c:	c0 e2       	ldi	r28, 0x20	; 32
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    687e:	d4 e3       	ldi	r29, 0x34	; 52
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    6880:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    6882:	06 c0       	rjmp	.+12     	; 0x6890 <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    6884:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    6886:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    6888:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    688a:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    688c:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    6890:	cf 31       	cpi	r28, 0x1F	; 31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    6892:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    6894:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    6896:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    6898:	a9 f7       	brne	.-22     	; 0x6884 <__do_global_ctors+0xa>
    689a:	0e 94 8f c6 	call	0x18d1e	; 0x18d1e <main>
    689e:	0c 94 1f e2 	jmp	0x1c43e	; 0x1c43e <_exit>

000068a2 <__bad_interrupt>:
__vector_38():
    68a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000068a6 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    68a6:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <TwoWire::rxBufferLength>
    68aa:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:239
}
    68ae:	89 1b       	sub	r24, r25
    68b0:	99 0b       	sbc	r25, r25
    68b2:	08 95       	ret

000068b4 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    68b4:	85 ed       	ldi	r24, 0xD5	; 213
    68b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    68ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    68be:	84 fd       	sbrc	r24, 4
    68c0:	fc cf       	rjmp	.-8      	; 0x68ba <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    68c2:	10 92 2f 0d 	sts	0x0D2F, r1	; 0x800d2f <twi_state.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:382
}
    68c6:	08 95       	ret

000068c8 <twi_transmit>:
twi_transmit():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    68c8:	20 91 1f 0b 	lds	r18, 0x0B1F	; 0x800b1f <twi_txBufferLength>
    68cc:	26 0f       	add	r18, r22
    68ce:	33 27       	eor	r19, r19
    68d0:	33 1f       	adc	r19, r19
    68d2:	21 32       	cpi	r18, 0x21	; 33
    68d4:	31 05       	cpc	r19, r1
    68d6:	ec f4       	brge	.+58     	; 0x6912 <twi_transmit+0x4a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:312
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    68d8:	20 91 2f 0d 	lds	r18, 0x0D2F	; 0x800d2f <twi_state.lto_priv.271>
    68dc:	fc 01       	movw	r30, r24
    68de:	90 e0       	ldi	r25, 0x00	; 0
    68e0:	80 e0       	ldi	r24, 0x00	; 0
    68e2:	24 30       	cpi	r18, 0x04	; 4
    68e4:	69 f0       	breq	.+26     	; 0x6900 <twi_transmit+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:313
    return 2;
    68e6:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    68e8:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:318
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    68ea:	a0 91 1f 0b 	lds	r26, 0x0B1F	; 0x800b1f <twi_txBufferLength>
    68ee:	21 91       	ld	r18, Z+
    68f0:	ac 01       	movw	r20, r24
    68f2:	41 50       	subi	r20, 0x01	; 1
    68f4:	55 4f       	sbci	r21, 0xF5	; 245
    68f6:	a4 0f       	add	r26, r20
    68f8:	b5 2f       	mov	r27, r21
    68fa:	b1 1d       	adc	r27, r1
    68fc:	2c 93       	st	X, r18
    68fe:	01 96       	adiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    6900:	86 17       	cp	r24, r22
    6902:	98 f3       	brcs	.-26     	; 0x68ea <twi_transmit+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    6904:	80 91 1f 0b 	lds	r24, 0x0B1F	; 0x800b1f <twi_txBufferLength>
    6908:	68 0f       	add	r22, r24
    690a:	60 93 1f 0b 	sts	0x0B1F, r22	; 0x800b1f <twi_txBufferLength>
    690e:	80 e0       	ldi	r24, 0x00	; 0
    6910:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    6912:	81 e0       	ldi	r24, 0x01	; 1
    6914:	08 95       	ret

00006916 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:314
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    6916:	08 95       	ret

00006918 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:299
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    6918:	08 95       	ret

0000691a <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:274
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    691a:	08 95       	ret

0000691c <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:264
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    691c:	e0 91 cf 0c 	lds	r30, 0x0CCF	; 0x800ccf <TwoWire::rxBufferIndex>
    6920:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <TwoWire::rxBufferLength>
    6924:	e8 17       	cp	r30, r24
    6926:	30 f4       	brcc	.+12     	; 0x6934 <TwoWire::peek()+0x18>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:265
    value = rxBuffer[rxBufferIndex];
    6928:	f0 e0       	ldi	r31, 0x00	; 0
    692a:	e7 51       	subi	r30, 0x17	; 23
    692c:	f3 4f       	sbci	r31, 0xF3	; 243
    692e:	80 81       	ld	r24, Z
    6930:	90 e0       	ldi	r25, 0x00	; 0
    6932:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:262
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    6934:	8f ef       	ldi	r24, 0xFF	; 255
    6936:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:269
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    6938:	08 95       	ret

0000693a <TwoWire::read()>:
_ZN7TwoWire4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    693a:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <TwoWire::rxBufferIndex>
    693e:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    6942:	2f ef       	ldi	r18, 0xFF	; 255
    6944:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    6946:	98 17       	cp	r25, r24
    6948:	48 f4       	brcc	.+18     	; 0x695c <TwoWire::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    694a:	e9 2f       	mov	r30, r25
    694c:	f0 e0       	ldi	r31, 0x00	; 0
    694e:	e7 51       	subi	r30, 0x17	; 23
    6950:	f3 4f       	sbci	r31, 0xF3	; 243
    6952:	20 81       	ld	r18, Z
    6954:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    6956:	9f 5f       	subi	r25, 0xFF	; 255
    6958:	90 93 cf 0c 	sts	0x0CCF, r25	; 0x800ccf <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    695c:	c9 01       	movw	r24, r18
    695e:	08 95       	ret

00006960 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:219

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    6960:	cf 92       	push	r12
    6962:	df 92       	push	r13
    6964:	ef 92       	push	r14
    6966:	ff 92       	push	r15
    6968:	0f 93       	push	r16
    696a:	1f 93       	push	r17
    696c:	cf 93       	push	r28
    696e:	df 93       	push	r29
    6970:	7c 01       	movw	r14, r24
    6972:	cb 01       	movw	r24, r22
    6974:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:220
  if(transmitting){
    6976:	20 91 e8 0c 	lds	r18, 0x0CE8	; 0x800ce8 <TwoWire::transmitting>
    697a:	22 23       	and	r18, r18
    697c:	89 f0       	breq	.+34     	; 0x69a0 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    697e:	eb 01       	movw	r28, r22
    6980:	6b 01       	movw	r12, r22
    6982:	c4 0e       	add	r12, r20
    6984:	d5 1e       	adc	r13, r21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:222
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    6986:	cc 15       	cp	r28, r12
    6988:	dd 05       	cpc	r29, r13
    698a:	69 f0       	breq	.+26     	; 0x69a6 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:223
      write(data[i]);
    698c:	69 91       	ld	r22, Y+
    698e:	d7 01       	movw	r26, r14
    6990:	ed 91       	ld	r30, X+
    6992:	fc 91       	ld	r31, X
    6994:	01 90       	ld	r0, Z+
    6996:	f0 81       	ld	r31, Z
    6998:	e0 2d       	mov	r30, r0
    699a:	c7 01       	movw	r24, r14
    699c:	19 95       	eicall
    699e:	f3 cf       	rjmp	.-26     	; 0x6986 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:228
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    69a0:	64 2f       	mov	r22, r20
    69a2:	0e 94 64 34 	call	0x68c8	; 0x68c8 <twi_transmit>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:231
  }
  return quantity;
}
    69a6:	c8 01       	movw	r24, r16
    69a8:	df 91       	pop	r29
    69aa:	cf 91       	pop	r28
    69ac:	1f 91       	pop	r17
    69ae:	0f 91       	pop	r16
    69b0:	ff 90       	pop	r15
    69b2:	ef 90       	pop	r14
    69b4:	df 90       	pop	r13
    69b6:	cf 90       	pop	r12
    69b8:	08 95       	ret

000069ba <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:194

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    69ba:	cf 93       	push	r28
    69bc:	df 93       	push	r29
    69be:	1f 92       	push	r1
    69c0:	cd b7       	in	r28, 0x3d	; 61
    69c2:	de b7       	in	r29, 0x3e	; 62
    69c4:	69 83       	std	Y+1, r22	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:195
  if(transmitting){
    69c6:	20 91 e8 0c 	lds	r18, 0x0CE8	; 0x800ce8 <TwoWire::transmitting>
    69ca:	22 23       	and	r18, r18
    69cc:	f9 f0       	breq	.+62     	; 0x6a0c <TwoWire::write(unsigned char)+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:198
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
    69ce:	20 91 e5 0c 	lds	r18, 0x0CE5	; 0x800ce5 <TwoWire::txBufferLength>
    69d2:	20 32       	cpi	r18, 0x20	; 32
    69d4:	58 f0       	brcs	.+22     	; 0x69ec <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    69d6:	21 e0       	ldi	r18, 0x01	; 1
    69d8:	30 e0       	ldi	r19, 0x00	; 0
    69da:	fc 01       	movw	r30, r24
    69dc:	33 83       	std	Z+3, r19	; 0x03
    69de:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:200
      setWriteError();
      return 0;
    69e0:	90 e0       	ldi	r25, 0x00	; 0
    69e2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:213
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
    69e4:	0f 90       	pop	r0
    69e6:	df 91       	pop	r29
    69e8:	cf 91       	pop	r28
    69ea:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:203
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    69ec:	80 91 e6 0c 	lds	r24, 0x0CE6	; 0x800ce6 <TwoWire::txBufferIndex>
    69f0:	e8 2f       	mov	r30, r24
    69f2:	f0 e0       	ldi	r31, 0x00	; 0
    69f4:	e1 52       	subi	r30, 0x21	; 33
    69f6:	f5 4f       	sbci	r31, 0xF5	; 245
    69f8:	99 81       	ldd	r25, Y+1	; 0x01
    69fa:	90 83       	st	Z, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:204
    ++txBufferIndex;
    69fc:	8f 5f       	subi	r24, 0xFF	; 255
    69fe:	80 93 e6 0c 	sts	0x0CE6, r24	; 0x800ce6 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:206
    // update amount in buffer
    txBufferLength = txBufferIndex;
    6a02:	80 93 e5 0c 	sts	0x0CE5, r24	; 0x800ce5 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:212
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    6a06:	81 e0       	ldi	r24, 0x01	; 1
    6a08:	90 e0       	ldi	r25, 0x00	; 0
    6a0a:	ec cf       	rjmp	.-40     	; 0x69e4 <TwoWire::write(unsigned char)+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:210
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    6a0c:	61 e0       	ldi	r22, 0x01	; 1
    6a0e:	ce 01       	movw	r24, r28
    6a10:	01 96       	adiw	r24, 0x01	; 1
    6a12:	0e 94 64 34 	call	0x68c8	; 0x68c8 <twi_transmit>
    6a16:	f7 cf       	rjmp	.-18     	; 0x6a06 <TwoWire::write(unsigned char)+0x4c>

00006a18 <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    6a18:	cf 93       	push	r28
    6a1a:	df 93       	push	r29
    6a1c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    6a1e:	89 8d       	ldd	r24, Y+25	; 0x19
    6a20:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6a22:	89 2b       	or	r24, r25
    6a24:	41 f0       	breq	.+16     	; 0x6a36 <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
    6a26:	e8 81       	ld	r30, Y
    6a28:	f9 81       	ldd	r31, Y+1	; 0x01
    6a2a:	02 84       	ldd	r0, Z+10	; 0x0a
    6a2c:	f3 85       	ldd	r31, Z+11	; 0x0b
    6a2e:	e0 2d       	mov	r30, r0
    6a30:	ce 01       	movw	r24, r28
    6a32:	19 95       	eicall
    6a34:	f4 cf       	rjmp	.-24     	; 0x6a1e <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  }
}
    6a36:	df 91       	pop	r29
    6a38:	cf 91       	pop	r28
    6a3a:	08 95       	ret

00006a3c <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    6a3c:	cf 93       	push	r28
    6a3e:	df 93       	push	r29
    6a40:	1f 92       	push	r1
    6a42:	cd b7       	in	r28, 0x3d	; 61
    6a44:	de b7       	in	r29, 0x3e	; 62
    6a46:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
    6a48:	dc 01       	movw	r26, r24
    6a4a:	ed 91       	ld	r30, X+
    6a4c:	fc 91       	ld	r31, X
    6a4e:	02 80       	ldd	r0, Z+2	; 0x02
    6a50:	f3 81       	ldd	r31, Z+3	; 0x03
    6a52:	e0 2d       	mov	r30, r0
    6a54:	41 e0       	ldi	r20, 0x01	; 1
    6a56:	50 e0       	ldi	r21, 0x00	; 0
    6a58:	be 01       	movw	r22, r28
    6a5a:	6f 5f       	subi	r22, 0xFF	; 255
    6a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    6a5e:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
    6a60:	0f 90       	pop	r0
    6a62:	df 91       	pop	r29
    6a64:	cf 91       	pop	r28
    6a66:	08 95       	ret

00006a68 <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    6a68:	fc 01       	movw	r30, r24
    6a6a:	81 8d       	ldd	r24, Z+25	; 0x19
    6a6c:	92 8d       	ldd	r25, Z+26	; 0x1a
    6a6e:	08 95       	ret

00006a70 <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    6a70:	fc 01       	movw	r30, r24
    6a72:	85 89       	ldd	r24, Z+21	; 0x15
    6a74:	96 89       	ldd	r25, Z+22	; 0x16
    6a76:	08 95       	ret

00006a78 <EthernetUDP::remoteIP()>:
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    6a78:	22 ef       	ldi	r18, 0xF2	; 242
    6a7a:	32 e0       	ldi	r19, 0x02	; 2
    6a7c:	fc 01       	movw	r30, r24
    6a7e:	31 83       	std	Z+1, r19	; 0x01
    6a80:	20 83       	st	Z, r18
    6a82:	fb 01       	movw	r30, r22
    6a84:	41 89       	ldd	r20, Z+17	; 0x11
    6a86:	52 89       	ldd	r21, Z+18	; 0x12
    6a88:	63 89       	ldd	r22, Z+19	; 0x13
    6a8a:	74 89       	ldd	r23, Z+20	; 0x14
    6a8c:	fc 01       	movw	r30, r24
    6a8e:	42 83       	std	Z+2, r20	; 0x02
    6a90:	53 83       	std	Z+3, r21	; 0x03
    6a92:	64 83       	std	Z+4, r22	; 0x04
    6a94:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    6a96:	08 95       	ret

00006a98 <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    6a98:	80 e0       	ldi	r24, 0x00	; 0
    6a9a:	08 95       	ret

00006a9c <EthernetServer::write(unsigned char)>:
_ZN14EthernetServer5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:71

  return EthernetClient(MAX_SOCK_NUM);
}

size_t EthernetServer::write(uint8_t b) 
{
    6a9c:	cf 93       	push	r28
    6a9e:	df 93       	push	r29
    6aa0:	1f 92       	push	r1
    6aa2:	cd b7       	in	r28, 0x3d	; 61
    6aa4:	de b7       	in	r29, 0x3e	; 62
    6aa6:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:72
  return write(&b, 1);
    6aa8:	dc 01       	movw	r26, r24
    6aaa:	ed 91       	ld	r30, X+
    6aac:	fc 91       	ld	r31, X
    6aae:	02 80       	ldd	r0, Z+2	; 0x02
    6ab0:	f3 81       	ldd	r31, Z+3	; 0x03
    6ab2:	e0 2d       	mov	r30, r0
    6ab4:	41 e0       	ldi	r20, 0x01	; 1
    6ab6:	50 e0       	ldi	r21, 0x00	; 0
    6ab8:	be 01       	movw	r22, r28
    6aba:	6f 5f       	subi	r22, 0xFF	; 255
    6abc:	7f 4f       	sbci	r23, 0xFF	; 255
    6abe:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:73
}
    6ac0:	0f 90       	pop	r0
    6ac2:	df 91       	pop	r29
    6ac4:	cf 91       	pop	r28
    6ac6:	08 95       	ret

00006ac8 <Print::flush()>:
_ZN5Print5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    6ac8:	08 95       	ret

00006aca <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
    6aca:	fc 01       	movw	r30, r24
    6acc:	94 85       	ldd	r25, Z+12	; 0x0c
    6ace:	fb 01       	movw	r30, r22
    6ad0:	84 85       	ldd	r24, Z+12	; 0x0c
    6ad2:	98 13       	cpse	r25, r24
    6ad4:	03 c0       	rjmp	.+6      	; 0x6adc <EthernetClient::operator==(EthernetClient const&)+0x12>
    6ad6:	81 e0       	ldi	r24, 0x01	; 1
    6ad8:	98 30       	cpi	r25, 0x08	; 8
    6ada:	09 f4       	brne	.+2      	; 0x6ade <EthernetClient::operator==(EthernetClient const&)+0x14>
    6adc:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
    6ade:	08 95       	ret

00006ae0 <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
    6ae0:	21 e0       	ldi	r18, 0x01	; 1
    6ae2:	fc 01       	movw	r30, r24
    6ae4:	84 85       	ldd	r24, Z+12	; 0x0c
    6ae6:	88 30       	cpi	r24, 0x08	; 8
    6ae8:	09 f4       	brne	.+2      	; 0x6aec <EthernetClient::operator bool()+0xc>
    6aea:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
    6aec:	82 2f       	mov	r24, r18
    6aee:	08 95       	ret

00006af0 <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:124
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
}
    6af0:	08 95       	ret

00006af2 <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    6af2:	cf 93       	push	r28
    6af4:	df 93       	push	r29
    6af6:	1f 92       	push	r1
    6af8:	cd b7       	in	r28, 0x3d	; 61
    6afa:	de b7       	in	r29, 0x3e	; 62
    6afc:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
    6afe:	dc 01       	movw	r26, r24
    6b00:	ed 91       	ld	r30, X+
    6b02:	fc 91       	ld	r31, X
    6b04:	02 80       	ldd	r0, Z+2	; 0x02
    6b06:	f3 81       	ldd	r31, Z+3	; 0x03
    6b08:	e0 2d       	mov	r30, r0
    6b0a:	41 e0       	ldi	r20, 0x01	; 1
    6b0c:	50 e0       	ldi	r21, 0x00	; 0
    6b0e:	be 01       	movw	r22, r28
    6b10:	6f 5f       	subi	r22, 0xFF	; 255
    6b12:	7f 4f       	sbci	r23, 0xFF	; 255
    6b14:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
    6b16:	0f 90       	pop	r0
    6b18:	df 91       	pop	r29
    6b1a:	cf 91       	pop	r28
    6b1c:	08 95       	ret

00006b1e <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    6b1e:	dc 01       	movw	r26, r24
    6b20:	ed 91       	ld	r30, X+
    6b22:	fc 91       	ld	r31, X
    6b24:	02 8c       	ldd	r0, Z+26	; 0x1a
    6b26:	f3 8d       	ldd	r31, Z+27	; 0x1b
    6b28:	e0 2d       	mov	r30, r0
    6b2a:	19 95       	eicall
    6b2c:	91 e0       	ldi	r25, 0x01	; 1
    6b2e:	89 27       	eor	r24, r25
    6b30:	08 95       	ret

00006b32 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    6b32:	90 e0       	ldi	r25, 0x00	; 0
    6b34:	80 e0       	ldi	r24, 0x00	; 0
    6b36:	08 95       	ret

00006b38 <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    6b38:	dc 01       	movw	r26, r24
    6b3a:	ed 91       	ld	r30, X+
    6b3c:	fc 91       	ld	r31, X
    6b3e:	04 8c       	ldd	r0, Z+28	; 0x1c
    6b40:	f5 8d       	ldd	r31, Z+29	; 0x1d
    6b42:	e0 2d       	mov	r30, r0
    6b44:	19 94       	eijmp

00006b46 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:744

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
}
    6b46:	fc 01       	movw	r30, r24
    6b48:	84 89       	ldd	r24, Z+20	; 0x14
    6b4a:	95 89       	ldd	r25, Z+21	; 0x15
    6b4c:	08 95       	ret

00006b4e <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:738

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
}
    6b4e:	fc 01       	movw	r30, r24
    6b50:	82 89       	ldd	r24, Z+18	; 0x12
    6b52:	93 89       	ldd	r25, Z+19	; 0x13
    6b54:	08 95       	ret

00006b56 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:623
	CS_IDLE;
}

//fill area from x to x+w,y to y+h
void LCDWIKI_KBV::Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    6b56:	4f 92       	push	r4
    6b58:	5f 92       	push	r5
    6b5a:	6f 92       	push	r6
    6b5c:	7f 92       	push	r7
    6b5e:	8f 92       	push	r8
    6b60:	9f 92       	push	r9
    6b62:	af 92       	push	r10
    6b64:	bf 92       	push	r11
    6b66:	cf 92       	push	r12
    6b68:	df 92       	push	r13
    6b6a:	ef 92       	push	r14
    6b6c:	ff 92       	push	r15
    6b6e:	0f 93       	push	r16
    6b70:	1f 93       	push	r17
    6b72:	cf 93       	push	r28
    6b74:	df 93       	push	r29
    6b76:	ec 01       	movw	r28, r24
    6b78:	5a 01       	movw	r10, r20
    6b7a:	27 01       	movw	r4, r14
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:625
	int16_t end;
	if (w < 0) 
    6b7c:	37 ff       	sbrs	r19, 7
    6b7e:	05 c0       	rjmp	.+10     	; 0x6b8a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
    6b80:	62 0f       	add	r22, r18
    6b82:	73 1f       	adc	r23, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:627
	{
        w = -w;
    6b84:	31 95       	neg	r19
    6b86:	21 95       	neg	r18
    6b88:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:630
        x -= w;
    }                           //+ve w
    end = x + w;
    6b8a:	7b 01       	movw	r14, r22
    6b8c:	e2 0e       	add	r14, r18
    6b8e:	f3 1e       	adc	r15, r19
    6b90:	6b 01       	movw	r12, r22
    6b92:	77 ff       	sbrs	r23, 7
    6b94:	02 c0       	rjmp	.+4      	; 0x6b9a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
    6b96:	d1 2c       	mov	r13, r1
    6b98:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:635
    if (x < 0)
    {
        x = 0;
    }
    if (end > Get_Width())
    6b9a:	e8 81       	ld	r30, Y
    6b9c:	f9 81       	ldd	r31, Y+1	; 0x01
    6b9e:	06 84       	ldd	r0, Z+14	; 0x0e
    6ba0:	f7 85       	ldd	r31, Z+15	; 0x0f
    6ba2:	e0 2d       	mov	r30, r0
    6ba4:	ce 01       	movw	r24, r28
    6ba6:	19 95       	eicall
    6ba8:	8e 15       	cp	r24, r14
    6baa:	9f 05       	cpc	r25, r15
    6bac:	44 f4       	brge	.+16     	; 0x6bbe <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:637
    {
        end = Get_Width();
    6bae:	e8 81       	ld	r30, Y
    6bb0:	f9 81       	ldd	r31, Y+1	; 0x01
    6bb2:	06 84       	ldd	r0, Z+14	; 0x0e
    6bb4:	f7 85       	ldd	r31, Z+15	; 0x0f
    6bb6:	e0 2d       	mov	r30, r0
    6bb8:	ce 01       	movw	r24, r28
    6bba:	19 95       	eicall
    6bbc:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:639
    }
    w = end - x;
    6bbe:	47 01       	movw	r8, r14
    6bc0:	8c 18       	sub	r8, r12
    6bc2:	9d 08       	sbc	r9, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:640
    if (h < 0) 
    6bc4:	17 ff       	sbrs	r17, 7
    6bc6:	05 c0       	rjmp	.+10     	; 0x6bd2 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
    6bc8:	a0 0e       	add	r10, r16
    6bca:	b1 1e       	adc	r11, r17
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:642
	{
        h = -h;
    6bcc:	11 95       	neg	r17
    6bce:	01 95       	neg	r16
    6bd0:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:645
        y -= h;
    }                           //+ve h
    end = y + h;
    6bd2:	0a 0d       	add	r16, r10
    6bd4:	1b 1d       	adc	r17, r11
    6bd6:	b7 fe       	sbrs	r11, 7
    6bd8:	02 c0       	rjmp	.+4      	; 0x6bde <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
    6bda:	b1 2c       	mov	r11, r1
    6bdc:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:650
    if (y < 0)
    {
        y = 0;
    }
    if (end > Get_Height())
    6bde:	e8 81       	ld	r30, Y
    6be0:	f9 81       	ldd	r31, Y+1	; 0x01
    6be2:	04 84       	ldd	r0, Z+12	; 0x0c
    6be4:	f5 85       	ldd	r31, Z+13	; 0x0d
    6be6:	e0 2d       	mov	r30, r0
    6be8:	ce 01       	movw	r24, r28
    6bea:	19 95       	eicall
    6bec:	80 17       	cp	r24, r16
    6bee:	91 07       	cpc	r25, r17
    6bf0:	44 f4       	brge	.+16     	; 0x6c02 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:652
    {
        end = Get_Height();
    6bf2:	e8 81       	ld	r30, Y
    6bf4:	f9 81       	ldd	r31, Y+1	; 0x01
    6bf6:	04 84       	ldd	r0, Z+12	; 0x0c
    6bf8:	f5 85       	ldd	r31, Z+13	; 0x0d
    6bfa:	e0 2d       	mov	r30, r0
    6bfc:	ce 01       	movw	r24, r28
    6bfe:	19 95       	eicall
    6c00:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:654
    }
    h = end - y;
    6c02:	38 01       	movw	r6, r16
    6c04:	6a 18       	sub	r6, r10
    6c06:	7b 08       	sbc	r7, r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:655
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);//set area
    6c08:	01 50       	subi	r16, 0x01	; 1
    6c0a:	11 09       	sbc	r17, r1
    6c0c:	97 01       	movw	r18, r14
    6c0e:	21 50       	subi	r18, 0x01	; 1
    6c10:	31 09       	sbc	r19, r1
    6c12:	e8 81       	ld	r30, Y
    6c14:	f9 81       	ldd	r31, Y+1	; 0x01
    6c16:	06 80       	ldd	r0, Z+6	; 0x06
    6c18:	f7 81       	ldd	r31, Z+7	; 0x07
    6c1a:	e0 2d       	mov	r30, r0
    6c1c:	a5 01       	movw	r20, r10
    6c1e:	b6 01       	movw	r22, r12
    6c20:	ce 01       	movw	r24, r28
    6c22:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:656
	CS_ACTIVE;
    6c24:	ee a5       	ldd	r30, Y+46	; 0x2e
    6c26:	ff a5       	ldd	r31, Y+47	; 0x2f
    6c28:	80 81       	ld	r24, Z
    6c2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    6c2c:	89 23       	and	r24, r25
    6c2e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:657
    if(lcd_driver == ID_932X)
    6c30:	88 8d       	ldd	r24, Y+24	; 0x18
    6c32:	99 8d       	ldd	r25, Y+25	; 0x19
    6c34:	89 2b       	or	r24, r25
    6c36:	c9 f4       	brne	.+50     	; 0x6c6a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:659
	{
		writeCmd8(ILI932X_START_OSC);
    6c38:	e8 a9       	ldd	r30, Y+48	; 0x30
    6c3a:	f9 a9       	ldd	r31, Y+49	; 0x31
    6c3c:	80 81       	ld	r24, Z
    6c3e:	9b ad       	ldd	r25, Y+59	; 0x3b
    6c40:	89 23       	and	r24, r25
    6c42:	80 83       	st	Z, r24
    6c44:	12 b8       	out	0x02, r1	; 2
    6c46:	ea a9       	ldd	r30, Y+50	; 0x32
    6c48:	fb a9       	ldd	r31, Y+51	; 0x33
    6c4a:	80 81       	ld	r24, Z
    6c4c:	9c ad       	ldd	r25, Y+60	; 0x3c
    6c4e:	89 23       	and	r24, r25
    6c50:	80 83       	st	Z, r24
    6c52:	ea a9       	ldd	r30, Y+50	; 0x32
    6c54:	fb a9       	ldd	r31, Y+51	; 0x33
    6c56:	80 81       	ld	r24, Z
    6c58:	98 ad       	ldd	r25, Y+56	; 0x38
    6c5a:	89 2b       	or	r24, r25
    6c5c:	80 83       	st	Z, r24
    6c5e:	e8 a9       	ldd	r30, Y+48	; 0x30
    6c60:	f9 a9       	ldd	r31, Y+49	; 0x31
    6c62:	80 81       	ld	r24, Z
    6c64:	9f a9       	ldd	r25, Y+55	; 0x37
    6c66:	89 2b       	or	r24, r25
    6c68:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:662
			
	}
	writeCmd8(CC);	
    6c6a:	e8 a9       	ldd	r30, Y+48	; 0x30
    6c6c:	f9 a9       	ldd	r31, Y+49	; 0x31
    6c6e:	80 81       	ld	r24, Z
    6c70:	9b ad       	ldd	r25, Y+59	; 0x3b
    6c72:	89 23       	and	r24, r25
    6c74:	80 83       	st	Z, r24
    6c76:	88 a1       	ldd	r24, Y+32	; 0x20
    6c78:	82 b9       	out	0x02, r24	; 2
    6c7a:	ea a9       	ldd	r30, Y+50	; 0x32
    6c7c:	fb a9       	ldd	r31, Y+51	; 0x33
    6c7e:	80 81       	ld	r24, Z
    6c80:	9c ad       	ldd	r25, Y+60	; 0x3c
    6c82:	89 23       	and	r24, r25
    6c84:	80 83       	st	Z, r24
    6c86:	ea a9       	ldd	r30, Y+50	; 0x32
    6c88:	fb a9       	ldd	r31, Y+51	; 0x33
    6c8a:	80 81       	ld	r24, Z
    6c8c:	98 ad       	ldd	r25, Y+56	; 0x38
    6c8e:	89 2b       	or	r24, r25
    6c90:	80 83       	st	Z, r24
    6c92:	e8 a9       	ldd	r30, Y+48	; 0x30
    6c94:	f9 a9       	ldd	r31, Y+49	; 0x31
    6c96:	80 81       	ld	r24, Z
    6c98:	9f a9       	ldd	r25, Y+55	; 0x37
    6c9a:	89 2b       	or	r24, r25
    6c9c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:663
	if (h > w) 
    6c9e:	86 14       	cp	r8, r6
    6ca0:	97 04       	cpc	r9, r7
    6ca2:	2c f0       	brlt	.+10     	; 0x6cae <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
    6ca4:	96 2d       	mov	r25, r6
    6ca6:	87 2d       	mov	r24, r7
    6ca8:	34 01       	movw	r6, r8
    6caa:	89 2e       	mov	r8, r25
    6cac:	98 2e       	mov	r9, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:669
	{
        end = h;
        h = w;
        w = end;
    }
	while (h-- > 0) 
    6cae:	18 14       	cp	r1, r8
    6cb0:	19 04       	cpc	r1, r9
    6cb2:	0c f5       	brge	.+66     	; 0x6cf6 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:671
	{
		end = w;
    6cb4:	c3 01       	movw	r24, r6
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:674
		do 
		{
   			writeData16(color);//set color data
    6cb6:	52 b8       	out	0x02, r5	; 2
    6cb8:	ea a9       	ldd	r30, Y+50	; 0x32
    6cba:	fb a9       	ldd	r31, Y+51	; 0x33
    6cbc:	20 81       	ld	r18, Z
    6cbe:	3c ad       	ldd	r19, Y+60	; 0x3c
    6cc0:	23 23       	and	r18, r19
    6cc2:	20 83       	st	Z, r18
    6cc4:	ea a9       	ldd	r30, Y+50	; 0x32
    6cc6:	fb a9       	ldd	r31, Y+51	; 0x33
    6cc8:	20 81       	ld	r18, Z
    6cca:	38 ad       	ldd	r19, Y+56	; 0x38
    6ccc:	23 2b       	or	r18, r19
    6cce:	20 83       	st	Z, r18
    6cd0:	42 b8       	out	0x02, r4	; 2
    6cd2:	ea a9       	ldd	r30, Y+50	; 0x32
    6cd4:	fb a9       	ldd	r31, Y+51	; 0x33
    6cd6:	20 81       	ld	r18, Z
    6cd8:	3c ad       	ldd	r19, Y+60	; 0x3c
    6cda:	23 23       	and	r18, r19
    6cdc:	20 83       	st	Z, r18
    6cde:	ea a9       	ldd	r30, Y+50	; 0x32
    6ce0:	fb a9       	ldd	r31, Y+51	; 0x33
    6ce2:	20 81       	ld	r18, Z
    6ce4:	38 ad       	ldd	r19, Y+56	; 0x38
    6ce6:	23 2b       	or	r18, r19
    6ce8:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:675
        } while (--end != 0);
    6cea:	01 97       	sbiw	r24, 0x01	; 1
    6cec:	21 f7       	brne	.-56     	; 0x6cb6 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
    6cee:	81 e0       	ldi	r24, 0x01	; 1
    6cf0:	88 1a       	sub	r8, r24
    6cf2:	91 08       	sbc	r9, r1
    6cf4:	dc cf       	rjmp	.-72     	; 0x6cae <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:677
	}
	if(lcd_driver == ID_932X)
    6cf6:	88 8d       	ldd	r24, Y+24	; 0x18
    6cf8:	99 8d       	ldd	r25, Y+25	; 0x19
    6cfa:	00 97       	sbiw	r24, 0x00	; 0
    6cfc:	51 f5       	brne	.+84     	; 0x6d52 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:679
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
    6cfe:	0c 89       	ldd	r16, Y+20	; 0x14
    6d00:	1d 89       	ldd	r17, Y+21	; 0x15
    6d02:	01 50       	subi	r16, 0x01	; 1
    6d04:	11 09       	sbc	r17, r1
    6d06:	2a 89       	ldd	r18, Y+18	; 0x12
    6d08:	3b 89       	ldd	r19, Y+19	; 0x13
    6d0a:	21 50       	subi	r18, 0x01	; 1
    6d0c:	31 09       	sbc	r19, r1
    6d0e:	e8 81       	ld	r30, Y
    6d10:	f9 81       	ldd	r31, Y+1	; 0x01
    6d12:	06 80       	ldd	r0, Z+6	; 0x06
    6d14:	f7 81       	ldd	r31, Z+7	; 0x07
    6d16:	e0 2d       	mov	r30, r0
    6d18:	50 e0       	ldi	r21, 0x00	; 0
    6d1a:	40 e0       	ldi	r20, 0x00	; 0
    6d1c:	70 e0       	ldi	r23, 0x00	; 0
    6d1e:	60 e0       	ldi	r22, 0x00	; 0
    6d20:	ce 01       	movw	r24, r28
    6d22:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:685
	}
	else if(lcd_driver == ID_7575)
	{
		Set_LR();
	}
	CS_IDLE;
    6d24:	ee a5       	ldd	r30, Y+46	; 0x2e
    6d26:	ff a5       	ldd	r31, Y+47	; 0x2f
    6d28:	80 81       	ld	r24, Z
    6d2a:	9e a9       	ldd	r25, Y+54	; 0x36
    6d2c:	89 2b       	or	r24, r25
    6d2e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:686
}
    6d30:	df 91       	pop	r29
    6d32:	cf 91       	pop	r28
    6d34:	1f 91       	pop	r17
    6d36:	0f 91       	pop	r16
    6d38:	ff 90       	pop	r15
    6d3a:	ef 90       	pop	r14
    6d3c:	df 90       	pop	r13
    6d3e:	cf 90       	pop	r12
    6d40:	bf 90       	pop	r11
    6d42:	af 90       	pop	r10
    6d44:	9f 90       	pop	r9
    6d46:	8f 90       	pop	r8
    6d48:	7f 90       	pop	r7
    6d4a:	6f 90       	pop	r6
    6d4c:	5f 90       	pop	r5
    6d4e:	4f 90       	pop	r4
    6d50:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:681
	}
	if(lcd_driver == ID_932X)
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
	}
	else if(lcd_driver == ID_7575)
    6d52:	01 97       	sbiw	r24, 0x01	; 1
    6d54:	39 f7       	brne	.-50     	; 0x6d24 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
    6d56:	ee a5       	ldd	r30, Y+46	; 0x2e
    6d58:	ff a5       	ldd	r31, Y+47	; 0x2f
Set_LR():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:408
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void LCDWIKI_KBV::Set_LR(void)
{
	CS_ACTIVE;
    6d5a:	80 81       	ld	r24, Z
    6d5c:	9a ad       	ldd	r25, Y+58	; 0x3a
    6d5e:	89 23       	and	r24, r25
    6d60:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:409
	writeCmdData8(HX8347G_COLADDREND_HI,(width -1)>>8);
    6d62:	e8 a9       	ldd	r30, Y+48	; 0x30
    6d64:	f9 a9       	ldd	r31, Y+49	; 0x31
    6d66:	80 81       	ld	r24, Z
    6d68:	9b ad       	ldd	r25, Y+59	; 0x3b
    6d6a:	89 23       	and	r24, r25
    6d6c:	80 83       	st	Z, r24
    6d6e:	84 e0       	ldi	r24, 0x04	; 4
    6d70:	82 b9       	out	0x02, r24	; 2
    6d72:	ea a9       	ldd	r30, Y+50	; 0x32
    6d74:	fb a9       	ldd	r31, Y+51	; 0x33
    6d76:	80 81       	ld	r24, Z
    6d78:	9c ad       	ldd	r25, Y+60	; 0x3c
    6d7a:	89 23       	and	r24, r25
    6d7c:	80 83       	st	Z, r24
    6d7e:	ea a9       	ldd	r30, Y+50	; 0x32
    6d80:	fb a9       	ldd	r31, Y+51	; 0x33
    6d82:	80 81       	ld	r24, Z
    6d84:	98 ad       	ldd	r25, Y+56	; 0x38
    6d86:	89 2b       	or	r24, r25
    6d88:	80 83       	st	Z, r24
    6d8a:	e8 a9       	ldd	r30, Y+48	; 0x30
    6d8c:	f9 a9       	ldd	r31, Y+49	; 0x31
    6d8e:	80 81       	ld	r24, Z
    6d90:	9f a9       	ldd	r25, Y+55	; 0x37
    6d92:	89 2b       	or	r24, r25
    6d94:	80 83       	st	Z, r24
    6d96:	8a 89       	ldd	r24, Y+18	; 0x12
    6d98:	9b 89       	ldd	r25, Y+19	; 0x13
    6d9a:	01 97       	sbiw	r24, 0x01	; 1
    6d9c:	92 b9       	out	0x02, r25	; 2
    6d9e:	ea a9       	ldd	r30, Y+50	; 0x32
    6da0:	fb a9       	ldd	r31, Y+51	; 0x33
    6da2:	80 81       	ld	r24, Z
    6da4:	9c ad       	ldd	r25, Y+60	; 0x3c
    6da6:	89 23       	and	r24, r25
    6da8:	80 83       	st	Z, r24
    6daa:	ea a9       	ldd	r30, Y+50	; 0x32
    6dac:	fb a9       	ldd	r31, Y+51	; 0x33
    6dae:	80 81       	ld	r24, Z
    6db0:	98 ad       	ldd	r25, Y+56	; 0x38
    6db2:	89 2b       	or	r24, r25
    6db4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:410
	writeCmdData8(HX8347G_COLADDREND_LO,width -1);
    6db6:	e8 a9       	ldd	r30, Y+48	; 0x30
    6db8:	f9 a9       	ldd	r31, Y+49	; 0x31
    6dba:	80 81       	ld	r24, Z
    6dbc:	9b ad       	ldd	r25, Y+59	; 0x3b
    6dbe:	89 23       	and	r24, r25
    6dc0:	80 83       	st	Z, r24
    6dc2:	85 e0       	ldi	r24, 0x05	; 5
    6dc4:	82 b9       	out	0x02, r24	; 2
    6dc6:	ea a9       	ldd	r30, Y+50	; 0x32
    6dc8:	fb a9       	ldd	r31, Y+51	; 0x33
    6dca:	80 81       	ld	r24, Z
    6dcc:	9c ad       	ldd	r25, Y+60	; 0x3c
    6dce:	89 23       	and	r24, r25
    6dd0:	80 83       	st	Z, r24
    6dd2:	ea a9       	ldd	r30, Y+50	; 0x32
    6dd4:	fb a9       	ldd	r31, Y+51	; 0x33
    6dd6:	80 81       	ld	r24, Z
    6dd8:	98 ad       	ldd	r25, Y+56	; 0x38
    6dda:	89 2b       	or	r24, r25
    6ddc:	80 83       	st	Z, r24
    6dde:	e8 a9       	ldd	r30, Y+48	; 0x30
    6de0:	f9 a9       	ldd	r31, Y+49	; 0x31
    6de2:	80 81       	ld	r24, Z
    6de4:	9f a9       	ldd	r25, Y+55	; 0x37
    6de6:	89 2b       	or	r24, r25
    6de8:	80 83       	st	Z, r24
    6dea:	8a 89       	ldd	r24, Y+18	; 0x12
    6dec:	81 50       	subi	r24, 0x01	; 1
    6dee:	82 b9       	out	0x02, r24	; 2
    6df0:	ea a9       	ldd	r30, Y+50	; 0x32
    6df2:	fb a9       	ldd	r31, Y+51	; 0x33
    6df4:	80 81       	ld	r24, Z
    6df6:	9c ad       	ldd	r25, Y+60	; 0x3c
    6df8:	89 23       	and	r24, r25
    6dfa:	80 83       	st	Z, r24
    6dfc:	ea a9       	ldd	r30, Y+50	; 0x32
    6dfe:	fb a9       	ldd	r31, Y+51	; 0x33
    6e00:	80 81       	ld	r24, Z
    6e02:	98 ad       	ldd	r25, Y+56	; 0x38
    6e04:	89 2b       	or	r24, r25
    6e06:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:411
	writeCmdData8(HX8347G_ROWADDREND_HI,(height -1)>>8);
    6e08:	e8 a9       	ldd	r30, Y+48	; 0x30
    6e0a:	f9 a9       	ldd	r31, Y+49	; 0x31
    6e0c:	80 81       	ld	r24, Z
    6e0e:	9b ad       	ldd	r25, Y+59	; 0x3b
    6e10:	89 23       	and	r24, r25
    6e12:	80 83       	st	Z, r24
    6e14:	88 e0       	ldi	r24, 0x08	; 8
    6e16:	82 b9       	out	0x02, r24	; 2
    6e18:	ea a9       	ldd	r30, Y+50	; 0x32
    6e1a:	fb a9       	ldd	r31, Y+51	; 0x33
    6e1c:	80 81       	ld	r24, Z
    6e1e:	9c ad       	ldd	r25, Y+60	; 0x3c
    6e20:	89 23       	and	r24, r25
    6e22:	80 83       	st	Z, r24
    6e24:	ea a9       	ldd	r30, Y+50	; 0x32
    6e26:	fb a9       	ldd	r31, Y+51	; 0x33
    6e28:	80 81       	ld	r24, Z
    6e2a:	98 ad       	ldd	r25, Y+56	; 0x38
    6e2c:	89 2b       	or	r24, r25
    6e2e:	80 83       	st	Z, r24
    6e30:	e8 a9       	ldd	r30, Y+48	; 0x30
    6e32:	f9 a9       	ldd	r31, Y+49	; 0x31
    6e34:	80 81       	ld	r24, Z
    6e36:	9f a9       	ldd	r25, Y+55	; 0x37
    6e38:	89 2b       	or	r24, r25
    6e3a:	80 83       	st	Z, r24
    6e3c:	8c 89       	ldd	r24, Y+20	; 0x14
    6e3e:	9d 89       	ldd	r25, Y+21	; 0x15
    6e40:	01 97       	sbiw	r24, 0x01	; 1
    6e42:	92 b9       	out	0x02, r25	; 2
    6e44:	ea a9       	ldd	r30, Y+50	; 0x32
    6e46:	fb a9       	ldd	r31, Y+51	; 0x33
    6e48:	80 81       	ld	r24, Z
    6e4a:	9c ad       	ldd	r25, Y+60	; 0x3c
    6e4c:	89 23       	and	r24, r25
    6e4e:	80 83       	st	Z, r24
    6e50:	ea a9       	ldd	r30, Y+50	; 0x32
    6e52:	fb a9       	ldd	r31, Y+51	; 0x33
    6e54:	80 81       	ld	r24, Z
    6e56:	98 ad       	ldd	r25, Y+56	; 0x38
    6e58:	89 2b       	or	r24, r25
    6e5a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:412
	writeCmdData8(HX8347G_ROWADDREND_LO,height -1);
    6e5c:	e8 a9       	ldd	r30, Y+48	; 0x30
    6e5e:	f9 a9       	ldd	r31, Y+49	; 0x31
    6e60:	80 81       	ld	r24, Z
    6e62:	9b ad       	ldd	r25, Y+59	; 0x3b
    6e64:	89 23       	and	r24, r25
    6e66:	80 83       	st	Z, r24
    6e68:	89 e0       	ldi	r24, 0x09	; 9
    6e6a:	82 b9       	out	0x02, r24	; 2
    6e6c:	ea a9       	ldd	r30, Y+50	; 0x32
    6e6e:	fb a9       	ldd	r31, Y+51	; 0x33
    6e70:	80 81       	ld	r24, Z
    6e72:	9c ad       	ldd	r25, Y+60	; 0x3c
    6e74:	89 23       	and	r24, r25
    6e76:	80 83       	st	Z, r24
    6e78:	ea a9       	ldd	r30, Y+50	; 0x32
    6e7a:	fb a9       	ldd	r31, Y+51	; 0x33
    6e7c:	80 81       	ld	r24, Z
    6e7e:	98 ad       	ldd	r25, Y+56	; 0x38
    6e80:	89 2b       	or	r24, r25
    6e82:	80 83       	st	Z, r24
    6e84:	e8 a9       	ldd	r30, Y+48	; 0x30
    6e86:	f9 a9       	ldd	r31, Y+49	; 0x31
    6e88:	80 81       	ld	r24, Z
    6e8a:	9f a9       	ldd	r25, Y+55	; 0x37
    6e8c:	89 2b       	or	r24, r25
    6e8e:	80 83       	st	Z, r24
    6e90:	8c 89       	ldd	r24, Y+20	; 0x14
    6e92:	81 50       	subi	r24, 0x01	; 1
    6e94:	82 b9       	out	0x02, r24	; 2
    6e96:	ea a9       	ldd	r30, Y+50	; 0x32
    6e98:	fb a9       	ldd	r31, Y+51	; 0x33
    6e9a:	80 81       	ld	r24, Z
    6e9c:	9c ad       	ldd	r25, Y+60	; 0x3c
    6e9e:	89 23       	and	r24, r25
    6ea0:	80 83       	st	Z, r24
    6ea2:	ea a9       	ldd	r30, Y+50	; 0x32
    6ea4:	fb a9       	ldd	r31, Y+51	; 0x33
    6ea6:	80 81       	ld	r24, Z
    6ea8:	98 ad       	ldd	r25, Y+56	; 0x38
    6eaa:	89 2b       	or	r24, r25
    6eac:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:413
	CS_IDLE;
    6eae:	ee a5       	ldd	r30, Y+46	; 0x2e
    6eb0:	ff a5       	ldd	r31, Y+47	; 0x2f
    6eb2:	80 81       	ld	r24, Z
    6eb4:	9e a9       	ldd	r25, Y+54	; 0x36
    6eb6:	89 2b       	or	r24, r25
    6eb8:	80 83       	st	Z, r24
    6eba:	34 cf       	rjmp	.-408    	; 0x6d24 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

00006ebc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:610
	}
}

//set x,y  coordinate and color to draw a pixel point 
void LCDWIKI_KBV::Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
    6ebc:	af 92       	push	r10
    6ebe:	bf 92       	push	r11
    6ec0:	cf 92       	push	r12
    6ec2:	df 92       	push	r13
    6ec4:	ef 92       	push	r14
    6ec6:	ff 92       	push	r15
    6ec8:	0f 93       	push	r16
    6eca:	1f 93       	push	r17
    6ecc:	cf 93       	push	r28
    6ece:	df 93       	push	r29
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:611
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
    6ed0:	77 fd       	sbrc	r23, 7
    6ed2:	75 c0       	rjmp	.+234    	; 0x6fbe <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    6ed4:	57 fd       	sbrc	r21, 7
    6ed6:	73 c0       	rjmp	.+230    	; 0x6fbe <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    6ed8:	c3 2e       	mov	r12, r19
    6eda:	d2 2e       	mov	r13, r18
    6edc:	5a 01       	movw	r10, r20
    6ede:	7b 01       	movw	r14, r22
    6ee0:	ec 01       	movw	r28, r24
    6ee2:	e8 81       	ld	r30, Y
    6ee4:	f9 81       	ldd	r31, Y+1	; 0x01
    6ee6:	06 84       	ldd	r0, Z+14	; 0x0e
    6ee8:	f7 85       	ldd	r31, Z+15	; 0x0f
    6eea:	e0 2d       	mov	r30, r0
    6eec:	19 95       	eicall
    6eee:	8e 15       	cp	r24, r14
    6ef0:	9f 05       	cpc	r25, r15
    6ef2:	0c f4       	brge	.+2      	; 0x6ef6 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
    6ef4:	64 c0       	rjmp	.+200    	; 0x6fbe <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    6ef6:	e8 81       	ld	r30, Y
    6ef8:	f9 81       	ldd	r31, Y+1	; 0x01
    6efa:	04 84       	ldd	r0, Z+12	; 0x0c
    6efc:	f5 85       	ldd	r31, Z+13	; 0x0d
    6efe:	e0 2d       	mov	r30, r0
    6f00:	ce 01       	movw	r24, r28
    6f02:	19 95       	eicall
    6f04:	8a 15       	cp	r24, r10
    6f06:	9b 05       	cpc	r25, r11
    6f08:	0c f4       	brge	.+2      	; 0x6f0c <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
    6f0a:	59 c0       	rjmp	.+178    	; 0x6fbe <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:615
	{
		return;
	}
	Set_Addr_Window(x, y, x, y);
    6f0c:	e8 81       	ld	r30, Y
    6f0e:	f9 81       	ldd	r31, Y+1	; 0x01
    6f10:	06 80       	ldd	r0, Z+6	; 0x06
    6f12:	f7 81       	ldd	r31, Z+7	; 0x07
    6f14:	e0 2d       	mov	r30, r0
    6f16:	85 01       	movw	r16, r10
    6f18:	97 01       	movw	r18, r14
    6f1a:	a5 01       	movw	r20, r10
    6f1c:	b7 01       	movw	r22, r14
    6f1e:	ce 01       	movw	r24, r28
    6f20:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:616
	CS_ACTIVE;
    6f22:	ee a5       	ldd	r30, Y+46	; 0x2e
    6f24:	ff a5       	ldd	r31, Y+47	; 0x2f
    6f26:	80 81       	ld	r24, Z
    6f28:	9a ad       	ldd	r25, Y+58	; 0x3a
    6f2a:	89 23       	and	r24, r25
    6f2c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:617
	writeCmdData16(CC, color);
    6f2e:	98 a1       	ldd	r25, Y+32	; 0x20
    6f30:	29 a1       	ldd	r18, Y+33	; 0x21
    6f32:	e8 a9       	ldd	r30, Y+48	; 0x30
    6f34:	f9 a9       	ldd	r31, Y+49	; 0x31
    6f36:	80 81       	ld	r24, Z
    6f38:	3b ad       	ldd	r19, Y+59	; 0x3b
    6f3a:	83 23       	and	r24, r19
    6f3c:	80 83       	st	Z, r24
    6f3e:	22 b9       	out	0x02, r18	; 2
    6f40:	ea a9       	ldd	r30, Y+50	; 0x32
    6f42:	fb a9       	ldd	r31, Y+51	; 0x33
    6f44:	80 81       	ld	r24, Z
    6f46:	2c ad       	ldd	r18, Y+60	; 0x3c
    6f48:	82 23       	and	r24, r18
    6f4a:	80 83       	st	Z, r24
    6f4c:	ea a9       	ldd	r30, Y+50	; 0x32
    6f4e:	fb a9       	ldd	r31, Y+51	; 0x33
    6f50:	80 81       	ld	r24, Z
    6f52:	28 ad       	ldd	r18, Y+56	; 0x38
    6f54:	82 2b       	or	r24, r18
    6f56:	80 83       	st	Z, r24
    6f58:	92 b9       	out	0x02, r25	; 2
    6f5a:	ea a9       	ldd	r30, Y+50	; 0x32
    6f5c:	fb a9       	ldd	r31, Y+51	; 0x33
    6f5e:	80 81       	ld	r24, Z
    6f60:	9c ad       	ldd	r25, Y+60	; 0x3c
    6f62:	89 23       	and	r24, r25
    6f64:	80 83       	st	Z, r24
    6f66:	ea a9       	ldd	r30, Y+50	; 0x32
    6f68:	fb a9       	ldd	r31, Y+51	; 0x33
    6f6a:	80 81       	ld	r24, Z
    6f6c:	98 ad       	ldd	r25, Y+56	; 0x38
    6f6e:	89 2b       	or	r24, r25
    6f70:	80 83       	st	Z, r24
    6f72:	e8 a9       	ldd	r30, Y+48	; 0x30
    6f74:	f9 a9       	ldd	r31, Y+49	; 0x31
    6f76:	80 81       	ld	r24, Z
    6f78:	9f a9       	ldd	r25, Y+55	; 0x37
    6f7a:	89 2b       	or	r24, r25
    6f7c:	80 83       	st	Z, r24
    6f7e:	c2 b8       	out	0x02, r12	; 2
    6f80:	ea a9       	ldd	r30, Y+50	; 0x32
    6f82:	fb a9       	ldd	r31, Y+51	; 0x33
    6f84:	80 81       	ld	r24, Z
    6f86:	9c ad       	ldd	r25, Y+60	; 0x3c
    6f88:	89 23       	and	r24, r25
    6f8a:	80 83       	st	Z, r24
    6f8c:	ea a9       	ldd	r30, Y+50	; 0x32
    6f8e:	fb a9       	ldd	r31, Y+51	; 0x33
    6f90:	80 81       	ld	r24, Z
    6f92:	98 ad       	ldd	r25, Y+56	; 0x38
    6f94:	89 2b       	or	r24, r25
    6f96:	80 83       	st	Z, r24
    6f98:	d2 b8       	out	0x02, r13	; 2
    6f9a:	ea a9       	ldd	r30, Y+50	; 0x32
    6f9c:	fb a9       	ldd	r31, Y+51	; 0x33
    6f9e:	80 81       	ld	r24, Z
    6fa0:	9c ad       	ldd	r25, Y+60	; 0x3c
    6fa2:	89 23       	and	r24, r25
    6fa4:	80 83       	st	Z, r24
    6fa6:	ea a9       	ldd	r30, Y+50	; 0x32
    6fa8:	fb a9       	ldd	r31, Y+51	; 0x33
    6faa:	80 81       	ld	r24, Z
    6fac:	98 ad       	ldd	r25, Y+56	; 0x38
    6fae:	89 2b       	or	r24, r25
    6fb0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:618
	CS_IDLE;
    6fb2:	ee a5       	ldd	r30, Y+46	; 0x2e
    6fb4:	ff a5       	ldd	r31, Y+47	; 0x2f
    6fb6:	80 81       	ld	r24, Z
    6fb8:	9e a9       	ldd	r25, Y+54	; 0x36
    6fba:	89 2b       	or	r24, r25
    6fbc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:619
}
    6fbe:	df 91       	pop	r29
    6fc0:	cf 91       	pop	r28
    6fc2:	1f 91       	pop	r17
    6fc4:	0f 91       	pop	r16
    6fc6:	ff 90       	pop	r15
    6fc8:	ef 90       	pop	r14
    6fca:	df 90       	pop	r13
    6fcc:	cf 90       	pop	r12
    6fce:	bf 90       	pop	r11
    6fd0:	af 90       	pop	r10
    6fd2:	08 95       	ret

00006fd4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:518
    return ret;
}

//read graph RAM data
int16_t LCDWIKI_KBV::Read_GRAM(int16_t x, int16_t y, uint16_t *block, int16_t w, int16_t h)
{
    6fd4:	7f 92       	push	r7
    6fd6:	8f 92       	push	r8
    6fd8:	9f 92       	push	r9
    6fda:	af 92       	push	r10
    6fdc:	bf 92       	push	r11
    6fde:	cf 92       	push	r12
    6fe0:	df 92       	push	r13
    6fe2:	ef 92       	push	r14
    6fe4:	ff 92       	push	r15
    6fe6:	0f 93       	push	r16
    6fe8:	1f 93       	push	r17
    6fea:	cf 93       	push	r28
    6fec:	df 93       	push	r29
    6fee:	ec 01       	movw	r28, r24
    6ff0:	59 01       	movw	r10, r18
    6ff2:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:520
	uint16_t ret, dummy;
    int16_t n = w * h;
    6ff4:	0e 9d       	mul	r16, r14
    6ff6:	60 01       	movw	r12, r0
    6ff8:	0f 9d       	mul	r16, r15
    6ffa:	d0 0c       	add	r13, r0
    6ffc:	1e 9d       	mul	r17, r14
    6ffe:	d0 0c       	add	r13, r0
    7000:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:522
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    7002:	87 01       	movw	r16, r14
    7004:	04 0f       	add	r16, r20
    7006:	15 1f       	adc	r17, r21
    7008:	01 50       	subi	r16, 0x01	; 1
    700a:	11 09       	sbc	r17, r1
    700c:	26 0f       	add	r18, r22
    700e:	37 1f       	adc	r19, r23
    7010:	21 50       	subi	r18, 0x01	; 1
    7012:	31 09       	sbc	r19, r1
    7014:	e8 81       	ld	r30, Y
    7016:	f9 81       	ldd	r31, Y+1	; 0x01
    7018:	06 80       	ldd	r0, Z+6	; 0x06
    701a:	f7 81       	ldd	r31, Z+7	; 0x07
    701c:	e0 2d       	mov	r30, r0
    701e:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    7020:	77 24       	eor	r7, r7
    7022:	7a 94       	dec	r7
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:523
{
	uint16_t ret, dummy;
    int16_t n = w * h;
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    while (n > 0) 
    7024:	1c 14       	cp	r1, r12
    7026:	1d 04       	cpc	r1, r13
    7028:	0c f0       	brlt	.+2      	; 0x702c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
    702a:	0a c1       	rjmp	.+532    	; 0x7240 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:525
	{
        CS_ACTIVE;
    702c:	ee a5       	ldd	r30, Y+46	; 0x2e
    702e:	ff a5       	ldd	r31, Y+47	; 0x2f
    7030:	80 81       	ld	r24, Z
    7032:	9a ad       	ldd	r25, Y+58	; 0x3a
    7034:	89 23       	and	r24, r25
    7036:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:526
		writeCmd16(RC);
    7038:	e8 a9       	ldd	r30, Y+48	; 0x30
    703a:	f9 a9       	ldd	r31, Y+49	; 0x31
    703c:	80 81       	ld	r24, Z
    703e:	9b ad       	ldd	r25, Y+59	; 0x3b
    7040:	89 23       	and	r24, r25
    7042:	80 83       	st	Z, r24
    7044:	9a a1       	ldd	r25, Y+34	; 0x22
    7046:	8b a1       	ldd	r24, Y+35	; 0x23
    7048:	82 b9       	out	0x02, r24	; 2
    704a:	ea a9       	ldd	r30, Y+50	; 0x32
    704c:	fb a9       	ldd	r31, Y+51	; 0x33
    704e:	80 81       	ld	r24, Z
    7050:	2c ad       	ldd	r18, Y+60	; 0x3c
    7052:	82 23       	and	r24, r18
    7054:	80 83       	st	Z, r24
    7056:	ea a9       	ldd	r30, Y+50	; 0x32
    7058:	fb a9       	ldd	r31, Y+51	; 0x33
    705a:	80 81       	ld	r24, Z
    705c:	28 ad       	ldd	r18, Y+56	; 0x38
    705e:	82 2b       	or	r24, r18
    7060:	80 83       	st	Z, r24
    7062:	92 b9       	out	0x02, r25	; 2
    7064:	ea a9       	ldd	r30, Y+50	; 0x32
    7066:	fb a9       	ldd	r31, Y+51	; 0x33
    7068:	80 81       	ld	r24, Z
    706a:	9c ad       	ldd	r25, Y+60	; 0x3c
    706c:	89 23       	and	r24, r25
    706e:	80 83       	st	Z, r24
    7070:	ea a9       	ldd	r30, Y+50	; 0x32
    7072:	fb a9       	ldd	r31, Y+51	; 0x33
    7074:	80 81       	ld	r24, Z
    7076:	98 ad       	ldd	r25, Y+56	; 0x38
    7078:	89 2b       	or	r24, r25
    707a:	80 83       	st	Z, r24
    707c:	e8 a9       	ldd	r30, Y+48	; 0x30
    707e:	f9 a9       	ldd	r31, Y+49	; 0x31
    7080:	80 81       	ld	r24, Z
    7082:	9f a9       	ldd	r25, Y+55	; 0x37
    7084:	89 2b       	or	r24, r25
    7086:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:527
        setReadDir();
    7088:	81 b1       	in	r24, 0x01	; 1
    708a:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:528
		if(lcd_driver == ID_932X)
    708c:	88 8d       	ldd	r24, Y+24	; 0x18
    708e:	99 8d       	ldd	r25, Y+25	; 0x19
    7090:	89 2b       	or	r24, r25
    7092:	09 f0       	breq	.+2      	; 0x7096 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
    7094:	67 c0       	rjmp	.+206    	; 0x7164 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
    7096:	f5 01       	movw	r30, r10
    7098:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    709a:	42 e0       	ldi	r20, 0x02	; 2
    709c:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:534
				{
					read8(r);
    709e:	ac a9       	ldd	r26, Y+52	; 0x34
    70a0:	bd a9       	ldd	r27, Y+53	; 0x35
    70a2:	2c 91       	ld	r18, X
    70a4:	3d ad       	ldd	r19, Y+61	; 0x3d
    70a6:	23 23       	and	r18, r19
    70a8:	2c 93       	st	X, r18
    70aa:	20 b1       	in	r18, 0x00	; 0
    70ac:	ac a9       	ldd	r26, Y+52	; 0x34
    70ae:	bd a9       	ldd	r27, Y+53	; 0x35
    70b0:	2c 91       	ld	r18, X
    70b2:	39 ad       	ldd	r19, Y+57	; 0x39
    70b4:	23 2b       	or	r18, r19
    70b6:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:535
					read8(r);
    70b8:	ac a9       	ldd	r26, Y+52	; 0x34
    70ba:	bd a9       	ldd	r27, Y+53	; 0x35
    70bc:	2c 91       	ld	r18, X
    70be:	3d ad       	ldd	r19, Y+61	; 0x3d
    70c0:	23 23       	and	r18, r19
    70c2:	2c 93       	st	X, r18
    70c4:	20 b1       	in	r18, 0x00	; 0
    70c6:	ac a9       	ldd	r26, Y+52	; 0x34
    70c8:	bd a9       	ldd	r27, Y+53	; 0x35
    70ca:	2c 91       	ld	r18, X
    70cc:	39 ad       	ldd	r19, Y+57	; 0x39
    70ce:	23 2b       	or	r18, r19
    70d0:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:536
					read8(r);
    70d2:	ac a9       	ldd	r26, Y+52	; 0x34
    70d4:	bd a9       	ldd	r27, Y+53	; 0x35
    70d6:	2c 91       	ld	r18, X
    70d8:	3d ad       	ldd	r19, Y+61	; 0x3d
    70da:	23 23       	and	r18, r19
    70dc:	2c 93       	st	X, r18
    70de:	20 b1       	in	r18, 0x00	; 0
    70e0:	ac a9       	ldd	r26, Y+52	; 0x34
    70e2:	bd a9       	ldd	r27, Y+53	; 0x35
    70e4:	3c 91       	ld	r19, X
    70e6:	69 ad       	ldd	r22, Y+57	; 0x39
    70e8:	36 2b       	or	r19, r22
    70ea:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:537
					read8(g);
    70ec:	ac a9       	ldd	r26, Y+52	; 0x34
    70ee:	bd a9       	ldd	r27, Y+53	; 0x35
    70f0:	3c 91       	ld	r19, X
    70f2:	6d ad       	ldd	r22, Y+61	; 0x3d
    70f4:	36 23       	and	r19, r22
    70f6:	3c 93       	st	X, r19
    70f8:	60 b1       	in	r22, 0x00	; 0
    70fa:	ac a9       	ldd	r26, Y+52	; 0x34
    70fc:	bd a9       	ldd	r27, Y+53	; 0x35
    70fe:	3c 91       	ld	r19, X
    7100:	79 ad       	ldd	r23, Y+57	; 0x39
    7102:	37 2b       	or	r19, r23
    7104:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    7106:	41 30       	cpi	r20, 0x01	; 1
    7108:	51 05       	cpc	r21, r1
    710a:	49 f5       	brne	.+82     	; 0x715e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:539
					read8(r);
					read8(r);
					read8(r);
					read8(g);
				}
				*block++ = (r<<8 | g);
    710c:	32 2f       	mov	r19, r18
    710e:	26 2f       	mov	r18, r22
    7110:	21 93       	st	Z+, r18
    7112:	31 93       	st	Z+, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:540
				n--;
    7114:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:530
        CS_ACTIVE;
		writeCmd16(RC);
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
    7116:	09 f0       	breq	.+2      	; 0x711a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
    7118:	c0 cf       	rjmp	.-128    	; 0x709a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
    711a:	cc 0c       	add	r12, r12
    711c:	dd 1c       	adc	r13, r13
    711e:	ac 0c       	add	r10, r12
    7120:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:542
					read8(g);
				}
				*block++ = (r<<8 | g);
				n--;
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
    7122:	0c 89       	ldd	r16, Y+20	; 0x14
    7124:	1d 89       	ldd	r17, Y+21	; 0x15
    7126:	01 50       	subi	r16, 0x01	; 1
    7128:	11 09       	sbc	r17, r1
    712a:	2a 89       	ldd	r18, Y+18	; 0x12
    712c:	3b 89       	ldd	r19, Y+19	; 0x13
    712e:	21 50       	subi	r18, 0x01	; 1
    7130:	31 09       	sbc	r19, r1
    7132:	e8 81       	ld	r30, Y
    7134:	f9 81       	ldd	r31, Y+1	; 0x01
    7136:	06 80       	ldd	r0, Z+6	; 0x06
    7138:	f7 81       	ldd	r31, Z+7	; 0x07
    713a:	e0 2d       	mov	r30, r0
    713c:	50 e0       	ldi	r21, 0x00	; 0
    713e:	40 e0       	ldi	r20, 0x00	; 0
    7140:	70 e0       	ldi	r23, 0x00	; 0
    7142:	60 e0       	ldi	r22, 0x00	; 0
    7144:	ce 01       	movw	r24, r28
    7146:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:565
            	*block++ = ret;
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
    7148:	ee a5       	ldd	r30, Y+46	; 0x2e
    714a:	ff a5       	ldd	r31, Y+47	; 0x2f
    714c:	80 81       	ld	r24, Z
    714e:	9e a9       	ldd	r25, Y+54	; 0x36
    7150:	89 2b       	or	r24, r25
    7152:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
        setWriteDir();
    7154:	81 b1       	in	r24, 0x01	; 1
    7156:	71 b8       	out	0x01, r7	; 1
    7158:	d1 2c       	mov	r13, r1
    715a:	c1 2c       	mov	r12, r1
    715c:	63 cf       	rjmp	.-314    	; 0x7024 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    715e:	41 e0       	ldi	r20, 0x01	; 1
    7160:	50 e0       	ldi	r21, 0x00	; 0
    7162:	9d cf       	rjmp	.-198    	; 0x709e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:546
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
    7164:	ec a9       	ldd	r30, Y+52	; 0x34
    7166:	fd a9       	ldd	r31, Y+53	; 0x35
    7168:	80 81       	ld	r24, Z
    716a:	9d ad       	ldd	r25, Y+61	; 0x3d
    716c:	89 23       	and	r24, r25
    716e:	80 83       	st	Z, r24
    7170:	80 b1       	in	r24, 0x00	; 0
    7172:	ec a9       	ldd	r30, Y+52	; 0x34
    7174:	fd a9       	ldd	r31, Y+53	; 0x35
    7176:	80 81       	ld	r24, Z
    7178:	99 ad       	ldd	r25, Y+57	; 0x39
    717a:	89 2b       	or	r24, r25
    717c:	80 83       	st	Z, r24
    717e:	75 01       	movw	r14, r10
    7180:	86 01       	movw	r16, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:549
        	while (n) 
			{
				if(R24BIT == 1)
    7182:	8c a5       	ldd	r24, Y+44	; 0x2c
    7184:	9d a5       	ldd	r25, Y+45	; 0x2d
    7186:	81 30       	cpi	r24, 0x01	; 1
    7188:	91 05       	cpc	r25, r1
    718a:	d9 f5       	brne	.+118    	; 0x7202 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:551
				{
        			read8(r);
    718c:	ec a9       	ldd	r30, Y+52	; 0x34
    718e:	fd a9       	ldd	r31, Y+53	; 0x35
    7190:	80 81       	ld	r24, Z
    7192:	9d ad       	ldd	r25, Y+61	; 0x3d
    7194:	89 23       	and	r24, r25
    7196:	80 83       	st	Z, r24
    7198:	60 b1       	in	r22, 0x00	; 0
    719a:	ec a9       	ldd	r30, Y+52	; 0x34
    719c:	fd a9       	ldd	r31, Y+53	; 0x35
    719e:	80 81       	ld	r24, Z
    71a0:	99 ad       	ldd	r25, Y+57	; 0x39
    71a2:	89 2b       	or	r24, r25
    71a4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:552
         			read8(g);
    71a6:	ec a9       	ldd	r30, Y+52	; 0x34
    71a8:	fd a9       	ldd	r31, Y+53	; 0x35
    71aa:	80 81       	ld	r24, Z
    71ac:	9d ad       	ldd	r25, Y+61	; 0x3d
    71ae:	89 23       	and	r24, r25
    71b0:	80 83       	st	Z, r24
    71b2:	40 b1       	in	r20, 0x00	; 0
    71b4:	ec a9       	ldd	r30, Y+52	; 0x34
    71b6:	fd a9       	ldd	r31, Y+53	; 0x35
    71b8:	80 81       	ld	r24, Z
    71ba:	99 ad       	ldd	r25, Y+57	; 0x39
    71bc:	89 2b       	or	r24, r25
    71be:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:553
        			read8(b);
    71c0:	ec a9       	ldd	r30, Y+52	; 0x34
    71c2:	fd a9       	ldd	r31, Y+53	; 0x35
    71c4:	80 81       	ld	r24, Z
    71c6:	9d ad       	ldd	r25, Y+61	; 0x3d
    71c8:	89 23       	and	r24, r25
    71ca:	80 83       	st	Z, r24
    71cc:	20 b1       	in	r18, 0x00	; 0
    71ce:	ec a9       	ldd	r30, Y+52	; 0x34
    71d0:	fd a9       	ldd	r31, Y+53	; 0x35
    71d2:	80 81       	ld	r24, Z
    71d4:	99 ad       	ldd	r25, Y+57	; 0x39
    71d6:	89 2b       	or	r24, r25
    71d8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:554
            		ret = Color_To_565(r, g, b);
    71da:	e8 81       	ld	r30, Y
    71dc:	f9 81       	ldd	r31, Y+1	; 0x01
    71de:	01 90       	ld	r0, Z+
    71e0:	f0 81       	ld	r31, Z
    71e2:	e0 2d       	mov	r30, r0
    71e4:	ce 01       	movw	r24, r28
    71e6:	19 95       	eicall
    71e8:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:560
				}
				else if(R24BIT == 0)
				{
					read16(ret);
				}
            	*block++ = ret;
    71ea:	f7 01       	movw	r30, r14
    71ec:	81 92       	st	Z+, r8
    71ee:	91 92       	st	Z+, r9
    71f0:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:561
            	n--;
    71f2:	01 50       	subi	r16, 0x01	; 1
    71f4:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:547
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
        	while (n) 
    71f6:	29 f6       	brne	.-118    	; 0x7182 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
    71f8:	cc 0c       	add	r12, r12
    71fa:	dd 1c       	adc	r13, r13
    71fc:	ac 0c       	add	r10, r12
    71fe:	bd 1c       	adc	r11, r13
    7200:	a3 cf       	rjmp	.-186    	; 0x7148 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:556
        			read8(r);
         			read8(g);
        			read8(b);
            		ret = Color_To_565(r, g, b);
				}
				else if(R24BIT == 0)
    7202:	89 2b       	or	r24, r25
    7204:	91 f7       	brne	.-28     	; 0x71ea <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:558
				{
					read16(ret);
    7206:	ec a9       	ldd	r30, Y+52	; 0x34
    7208:	fd a9       	ldd	r31, Y+53	; 0x35
    720a:	80 81       	ld	r24, Z
    720c:	9d ad       	ldd	r25, Y+61	; 0x3d
    720e:	89 23       	and	r24, r25
    7210:	80 83       	st	Z, r24
    7212:	80 b0       	in	r8, 0x00	; 0
    7214:	ec a9       	ldd	r30, Y+52	; 0x34
    7216:	fd a9       	ldd	r31, Y+53	; 0x35
    7218:	80 81       	ld	r24, Z
    721a:	99 ad       	ldd	r25, Y+57	; 0x39
    721c:	89 2b       	or	r24, r25
    721e:	80 83       	st	Z, r24
    7220:	ec a9       	ldd	r30, Y+52	; 0x34
    7222:	fd a9       	ldd	r31, Y+53	; 0x35
    7224:	80 81       	ld	r24, Z
    7226:	9d ad       	ldd	r25, Y+61	; 0x3d
    7228:	89 23       	and	r24, r25
    722a:	80 83       	st	Z, r24
    722c:	90 b1       	in	r25, 0x00	; 0
    722e:	ec a9       	ldd	r30, Y+52	; 0x34
    7230:	fd a9       	ldd	r31, Y+53	; 0x35
    7232:	80 81       	ld	r24, Z
    7234:	29 ad       	ldd	r18, Y+57	; 0x39
    7236:	82 2b       	or	r24, r18
    7238:	80 83       	st	Z, r24
    723a:	98 2c       	mov	r9, r8
    723c:	89 2e       	mov	r8, r25
    723e:	d5 cf       	rjmp	.-86     	; 0x71ea <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:569
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    }
	return 0;
}
    7240:	90 e0       	ldi	r25, 0x00	; 0
    7242:	80 e0       	ldi	r24, 0x00	; 0
    7244:	df 91       	pop	r29
    7246:	cf 91       	pop	r28
    7248:	1f 91       	pop	r17
    724a:	0f 91       	pop	r16
    724c:	ff 90       	pop	r15
    724e:	ef 90       	pop	r14
    7250:	df 90       	pop	r13
    7252:	cf 90       	pop	r12
    7254:	bf 90       	pop	r11
    7256:	af 90       	pop	r10
    7258:	9f 90       	pop	r9
    725a:	8f 90       	pop	r8
    725c:	7f 90       	pop	r7
    725e:	08 95       	ret

00007260 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:487
}

//Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t LCDWIKI_KBV::Color_To_565(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    7260:	38 e0       	ldi	r19, 0x08	; 8
    7262:	43 9f       	mul	r20, r19
    7264:	c0 01       	movw	r24, r0
    7266:	11 24       	eor	r1, r1
    7268:	80 7e       	andi	r24, 0xE0	; 224
    726a:	97 70       	andi	r25, 0x07	; 7
    726c:	26 95       	lsr	r18
    726e:	26 95       	lsr	r18
    7270:	26 95       	lsr	r18
    7272:	82 2b       	or	r24, r18
    7274:	70 e0       	ldi	r23, 0x00	; 0
    7276:	76 2f       	mov	r23, r22
    7278:	66 27       	eor	r22, r22
    727a:	66 27       	eor	r22, r22
    727c:	78 7f       	andi	r23, 0xF8	; 248
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:488
}
    727e:	86 2b       	or	r24, r22
    7280:	97 2b       	or	r25, r23
    7282:	08 95       	ret

00007284 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:418
	CS_IDLE;
}

//push color table for 16bits
void LCDWIKI_KBV::Push_Any_Color(uint16_t * block, int16_t n, bool first, uint8_t flags)
{
    7284:	0f 93       	push	r16
    7286:	cf 93       	push	r28
    7288:	df 93       	push	r29
    728a:	dc 01       	movw	r26, r24
    728c:	01 70       	andi	r16, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:423
	uint16_t color;
    uint8_t h, l;
	bool isconst = flags & 1;
//	bool isbigend = (flags & 2) != 0;
    CS_ACTIVE;
    728e:	9e 96       	adiw	r26, 0x2e	; 46
    7290:	ed 91       	ld	r30, X+
    7292:	fc 91       	ld	r31, X
    7294:	9f 97       	sbiw	r26, 0x2f	; 47
    7296:	80 81       	ld	r24, Z
    7298:	da 96       	adiw	r26, 0x3a	; 58
    729a:	9c 91       	ld	r25, X
    729c:	da 97       	sbiw	r26, 0x3a	; 58
    729e:	89 23       	and	r24, r25
    72a0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:424
    if (first) 
    72a2:	22 23       	and	r18, r18
    72a4:	09 f4       	brne	.+2      	; 0x72a8 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
    72a6:	5b c0       	rjmp	.+182    	; 0x735e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:426
	{  
		if(lcd_driver == ID_932X)
    72a8:	58 96       	adiw	r26, 0x18	; 24
    72aa:	8d 91       	ld	r24, X+
    72ac:	9c 91       	ld	r25, X
    72ae:	59 97       	sbiw	r26, 0x19	; 25
    72b0:	89 2b       	or	r24, r25
    72b2:	49 f5       	brne	.+82     	; 0x7306 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
    72b4:	d0 96       	adiw	r26, 0x30	; 48
    72b6:	ed 91       	ld	r30, X+
    72b8:	fc 91       	ld	r31, X
    72ba:	d1 97       	sbiw	r26, 0x31	; 49
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:428
		{
			writeCmd8(ILI932X_START_OSC);
    72bc:	80 81       	ld	r24, Z
    72be:	db 96       	adiw	r26, 0x3b	; 59
    72c0:	9c 91       	ld	r25, X
    72c2:	db 97       	sbiw	r26, 0x3b	; 59
    72c4:	89 23       	and	r24, r25
    72c6:	80 83       	st	Z, r24
    72c8:	12 b8       	out	0x02, r1	; 2
    72ca:	d2 96       	adiw	r26, 0x32	; 50
    72cc:	ed 91       	ld	r30, X+
    72ce:	fc 91       	ld	r31, X
    72d0:	d3 97       	sbiw	r26, 0x33	; 51
    72d2:	80 81       	ld	r24, Z
    72d4:	dc 96       	adiw	r26, 0x3c	; 60
    72d6:	9c 91       	ld	r25, X
    72d8:	dc 97       	sbiw	r26, 0x3c	; 60
    72da:	89 23       	and	r24, r25
    72dc:	80 83       	st	Z, r24
    72de:	d2 96       	adiw	r26, 0x32	; 50
    72e0:	ed 91       	ld	r30, X+
    72e2:	fc 91       	ld	r31, X
    72e4:	d3 97       	sbiw	r26, 0x33	; 51
    72e6:	80 81       	ld	r24, Z
    72e8:	d8 96       	adiw	r26, 0x38	; 56
    72ea:	9c 91       	ld	r25, X
    72ec:	d8 97       	sbiw	r26, 0x38	; 56
    72ee:	89 2b       	or	r24, r25
    72f0:	80 83       	st	Z, r24
    72f2:	d0 96       	adiw	r26, 0x30	; 48
    72f4:	ed 91       	ld	r30, X+
    72f6:	fc 91       	ld	r31, X
    72f8:	d1 97       	sbiw	r26, 0x31	; 49
    72fa:	80 81       	ld	r24, Z
    72fc:	d7 96       	adiw	r26, 0x37	; 55
    72fe:	9c 91       	ld	r25, X
    7300:	d7 97       	sbiw	r26, 0x37	; 55
    7302:	89 2b       	or	r24, r25
    7304:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:431
			
		}
		writeCmd8(CC);			
    7306:	d0 96       	adiw	r26, 0x30	; 48
    7308:	ed 91       	ld	r30, X+
    730a:	fc 91       	ld	r31, X
    730c:	d1 97       	sbiw	r26, 0x31	; 49
    730e:	80 81       	ld	r24, Z
    7310:	db 96       	adiw	r26, 0x3b	; 59
    7312:	9c 91       	ld	r25, X
    7314:	db 97       	sbiw	r26, 0x3b	; 59
    7316:	89 23       	and	r24, r25
    7318:	80 83       	st	Z, r24
    731a:	90 96       	adiw	r26, 0x20	; 32
    731c:	8c 91       	ld	r24, X
    731e:	90 97       	sbiw	r26, 0x20	; 32
    7320:	82 b9       	out	0x02, r24	; 2
    7322:	d2 96       	adiw	r26, 0x32	; 50
    7324:	ed 91       	ld	r30, X+
    7326:	fc 91       	ld	r31, X
    7328:	d3 97       	sbiw	r26, 0x33	; 51
    732a:	80 81       	ld	r24, Z
    732c:	dc 96       	adiw	r26, 0x3c	; 60
    732e:	9c 91       	ld	r25, X
    7330:	dc 97       	sbiw	r26, 0x3c	; 60
    7332:	89 23       	and	r24, r25
    7334:	80 83       	st	Z, r24
    7336:	d2 96       	adiw	r26, 0x32	; 50
    7338:	ed 91       	ld	r30, X+
    733a:	fc 91       	ld	r31, X
    733c:	d3 97       	sbiw	r26, 0x33	; 51
    733e:	80 81       	ld	r24, Z
    7340:	d8 96       	adiw	r26, 0x38	; 56
    7342:	9c 91       	ld	r25, X
    7344:	d8 97       	sbiw	r26, 0x38	; 56
    7346:	89 2b       	or	r24, r25
    7348:	80 83       	st	Z, r24
    734a:	d0 96       	adiw	r26, 0x30	; 48
    734c:	ed 91       	ld	r30, X+
    734e:	fc 91       	ld	r31, X
    7350:	d1 97       	sbiw	r26, 0x31	; 49
    7352:	80 81       	ld	r24, Z
    7354:	d7 96       	adiw	r26, 0x37	; 55
    7356:	9c 91       	ld	r25, X
    7358:	d7 97       	sbiw	r26, 0x37	; 55
    735a:	89 2b       	or	r24, r25
    735c:	80 83       	st	Z, r24
    735e:	eb 01       	movw	r28, r22
    7360:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:433
    }
    while (n-- > 0) 
    7362:	18 16       	cp	r1, r24
    7364:	19 06       	cpc	r1, r25
    7366:	bc f5       	brge	.+110    	; 0x73d6 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:435
	{
        if (isconst) 
    7368:	00 23       	and	r16, r16
    736a:	91 f1       	breq	.+100    	; 0x73d0 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:437
		{
			color = pgm_read_word(block++);		
    736c:	fe 01       	movw	r30, r28
    736e:	45 91       	lpm	r20, Z+
    7370:	54 91       	lpm	r21, Z
    7372:	34 2f       	mov	r19, r20
    7374:	25 2f       	mov	r18, r21
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:444
		else 
		{
			color = (*block++);			

		}		
        writeData16(color);
    7376:	22 b9       	out	0x02, r18	; 2
    7378:	d2 96       	adiw	r26, 0x32	; 50
    737a:	ed 91       	ld	r30, X+
    737c:	fc 91       	ld	r31, X
    737e:	d3 97       	sbiw	r26, 0x33	; 51
    7380:	20 81       	ld	r18, Z
    7382:	dc 96       	adiw	r26, 0x3c	; 60
    7384:	4c 91       	ld	r20, X
    7386:	dc 97       	sbiw	r26, 0x3c	; 60
    7388:	24 23       	and	r18, r20
    738a:	20 83       	st	Z, r18
    738c:	d2 96       	adiw	r26, 0x32	; 50
    738e:	ed 91       	ld	r30, X+
    7390:	fc 91       	ld	r31, X
    7392:	d3 97       	sbiw	r26, 0x33	; 51
    7394:	20 81       	ld	r18, Z
    7396:	d8 96       	adiw	r26, 0x38	; 56
    7398:	4c 91       	ld	r20, X
    739a:	d8 97       	sbiw	r26, 0x38	; 56
    739c:	24 2b       	or	r18, r20
    739e:	20 83       	st	Z, r18
    73a0:	32 b9       	out	0x02, r19	; 2
    73a2:	d2 96       	adiw	r26, 0x32	; 50
    73a4:	ed 91       	ld	r30, X+
    73a6:	fc 91       	ld	r31, X
    73a8:	d3 97       	sbiw	r26, 0x33	; 51
    73aa:	20 81       	ld	r18, Z
    73ac:	dc 96       	adiw	r26, 0x3c	; 60
    73ae:	3c 91       	ld	r19, X
    73b0:	dc 97       	sbiw	r26, 0x3c	; 60
    73b2:	23 23       	and	r18, r19
    73b4:	20 83       	st	Z, r18
    73b6:	d2 96       	adiw	r26, 0x32	; 50
    73b8:	ed 91       	ld	r30, X+
    73ba:	fc 91       	ld	r31, X
    73bc:	d3 97       	sbiw	r26, 0x33	; 51
    73be:	20 81       	ld	r18, Z
    73c0:	d8 96       	adiw	r26, 0x38	; 56
    73c2:	3c 91       	ld	r19, X
    73c4:	d8 97       	sbiw	r26, 0x38	; 56
    73c6:	23 2b       	or	r18, r19
    73c8:	20 83       	st	Z, r18
    73ca:	22 96       	adiw	r28, 0x02	; 2
    73cc:	01 97       	sbiw	r24, 0x01	; 1
    73ce:	c9 cf       	rjmp	.-110    	; 0x7362 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:441
		{
			color = pgm_read_word(block++);		
        } 
		else 
		{
			color = (*block++);			
    73d0:	38 81       	ld	r19, Y
    73d2:	29 81       	ldd	r18, Y+1	; 0x01
    73d4:	d0 cf       	rjmp	.-96     	; 0x7376 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:446

		}		
        writeData16(color);
    }
    CS_IDLE;
    73d6:	9e 96       	adiw	r26, 0x2e	; 46
    73d8:	ed 91       	ld	r30, X+
    73da:	fc 91       	ld	r31, X
    73dc:	9f 97       	sbiw	r26, 0x2f	; 47
    73de:	80 81       	ld	r24, Z
    73e0:	d6 96       	adiw	r26, 0x36	; 54
    73e2:	9c 91       	ld	r25, X
    73e4:	89 2b       	or	r24, r25
    73e6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:447
}
    73e8:	df 91       	pop	r29
    73ea:	cf 91       	pop	r28
    73ec:	0f 91       	pop	r16
    73ee:	08 95       	ret

000073f0 <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
    73f0:	2f 92       	push	r2
    73f2:	3f 92       	push	r3
    73f4:	4f 92       	push	r4
    73f6:	5f 92       	push	r5
    73f8:	6f 92       	push	r6
    73fa:	7f 92       	push	r7
    73fc:	8f 92       	push	r8
    73fe:	9f 92       	push	r9
    7400:	af 92       	push	r10
    7402:	bf 92       	push	r11
    7404:	cf 92       	push	r12
    7406:	df 92       	push	r13
    7408:	ef 92       	push	r14
    740a:	ff 92       	push	r15
    740c:	0f 93       	push	r16
    740e:	1f 93       	push	r17
    7410:	cf 93       	push	r28
    7412:	df 93       	push	r29
    7414:	00 d0       	rcall	.+0      	; 0x7416 <thermostat_ring_update_pid_parameters(unsigned char)+0x26>
    7416:	00 d0       	rcall	.+0      	; 0x7418 <thermostat_ring_update_pid_parameters(unsigned char)+0x28>
    7418:	cd b7       	in	r28, 0x3d	; 61
    741a:	de b7       	in	r29, 0x3e	; 62
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
    741c:	28 2e       	mov	r2, r24
    741e:	31 2c       	mov	r3, r1
    7420:	c1 01       	movw	r24, r2
    7422:	88 0f       	add	r24, r24
    7424:	99 1f       	adc	r25, r25
    7426:	e0 91 e2 0d 	lds	r30, 0x0DE2	; 0x800de2 <array_pids>
    742a:	f0 91 e3 0d 	lds	r31, 0x0DE3	; 0x800de3 <array_pids+0x1>
    742e:	e8 0f       	add	r30, r24
    7430:	f9 1f       	adc	r31, r25
    7432:	80 81       	ld	r24, Z
    7434:	91 81       	ldd	r25, Z+1	; 0x01
    7436:	9e 83       	std	Y+6, r25	; 0x06
    7438:	8d 83       	std	Y+5, r24	; 0x05
    743a:	81 01       	movw	r16, r2
    743c:	00 0f       	add	r16, r16
    743e:	11 1f       	adc	r17, r17
    7440:	00 0f       	add	r16, r16
    7442:	11 1f       	adc	r17, r17
    7444:	f8 01       	movw	r30, r16
    7446:	e3 56       	subi	r30, 0x63	; 99
    7448:	f5 4f       	sbci	r31, 0xF5	; 245
    744a:	40 80       	ld	r4, Z
    744c:	51 80       	ldd	r5, Z+1	; 0x01
    744e:	62 80       	ldd	r6, Z+2	; 0x02
    7450:	73 80       	ldd	r7, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    7452:	20 e0       	ldi	r18, 0x00	; 0
    7454:	30 e0       	ldi	r19, 0x00	; 0
    7456:	a9 01       	movw	r20, r18
    7458:	c3 01       	movw	r24, r6
    745a:	b2 01       	movw	r22, r4
    745c:	0e 94 97 dd 	call	0x1bb2e	; 0x1bb2e <__cmpsf2>
    7460:	87 fd       	sbrc	r24, 7
    7462:	97 c0       	rjmp	.+302    	; 0x7592 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
    7464:	f8 01       	movw	r30, r16
    7466:	ef 54       	subi	r30, 0x4F	; 79
    7468:	f5 4f       	sbci	r31, 0xF5	; 245
    746a:	80 80       	ld	r8, Z
    746c:	91 80       	ldd	r9, Z+1	; 0x01
    746e:	a2 80       	ldd	r10, Z+2	; 0x02
    7470:	b3 80       	ldd	r11, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    7472:	20 e0       	ldi	r18, 0x00	; 0
    7474:	30 e0       	ldi	r19, 0x00	; 0
    7476:	a9 01       	movw	r20, r18
    7478:	c5 01       	movw	r24, r10
    747a:	b4 01       	movw	r22, r8
    747c:	0e 94 97 dd 	call	0x1bb2e	; 0x1bb2e <__cmpsf2>
    7480:	87 fd       	sbrc	r24, 7
    7482:	87 c0       	rjmp	.+270    	; 0x7592 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
    7484:	f8 01       	movw	r30, r16
    7486:	eb 53       	subi	r30, 0x3B	; 59
    7488:	f5 4f       	sbci	r31, 0xF5	; 245
    748a:	c0 80       	ld	r12, Z
    748c:	d1 80       	ldd	r13, Z+1	; 0x01
    748e:	e2 80       	ldd	r14, Z+2	; 0x02
    7490:	f3 80       	ldd	r15, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    7492:	20 e0       	ldi	r18, 0x00	; 0
    7494:	30 e0       	ldi	r19, 0x00	; 0
    7496:	a9 01       	movw	r20, r18
    7498:	c7 01       	movw	r24, r14
    749a:	b6 01       	movw	r22, r12
    749c:	0e 94 97 dd 	call	0x1bb2e	; 0x1bb2e <__cmpsf2>
    74a0:	87 fd       	sbrc	r24, 7
    74a2:	77 c0       	rjmp	.+238    	; 0x7592 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
    74a4:	81 e0       	ldi	r24, 0x01	; 1
    74a6:	ed 81       	ldd	r30, Y+5	; 0x05
    74a8:	fe 81       	ldd	r31, Y+6	; 0x06
    74aa:	22 8d       	ldd	r18, Z+26	; 0x1a
    74ac:	33 8d       	ldd	r19, Z+27	; 0x1b
    74ae:	21 30       	cpi	r18, 0x01	; 1
    74b0:	31 05       	cpc	r19, r1
    74b2:	09 f0       	breq	.+2      	; 0x74b6 <thermostat_ring_update_pid_parameters(unsigned char)+0xc6>
    74b4:	80 e0       	ldi	r24, 0x00	; 0
    74b6:	ed 81       	ldd	r30, Y+5	; 0x05
    74b8:	fe 81       	ldd	r31, Y+6	; 0x06
    74ba:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    74bc:	40 82       	st	Z, r4
    74be:	51 82       	std	Z+1, r5	; 0x01
    74c0:	62 82       	std	Z+2, r6	; 0x02
    74c2:	73 82       	std	Z+3, r7	; 0x03
    74c4:	84 82       	std	Z+4, r8	; 0x04
    74c6:	95 82       	std	Z+5, r9	; 0x05
    74c8:	a6 82       	std	Z+6, r10	; 0x06
    74ca:	b7 82       	std	Z+7, r11	; 0x07
    74cc:	c0 86       	std	Z+8, r12	; 0x08
    74ce:	d1 86       	std	Z+9, r13	; 0x09
    74d0:	e2 86       	std	Z+10, r14	; 0x0a
    74d2:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
    74d4:	66 a5       	ldd	r22, Z+46	; 0x2e
    74d6:	77 a5       	ldd	r23, Z+47	; 0x2f
    74d8:	80 a9       	ldd	r24, Z+48	; 0x30
    74da:	91 a9       	ldd	r25, Z+49	; 0x31
    74dc:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
    74e0:	20 e0       	ldi	r18, 0x00	; 0
    74e2:	30 e0       	ldi	r19, 0x00	; 0
    74e4:	4a e7       	ldi	r20, 0x7A	; 122
    74e6:	54 e4       	ldi	r21, 0x44	; 68
    74e8:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
    74ec:	69 83       	std	Y+1, r22	; 0x01
    74ee:	7a 83       	std	Y+2, r23	; 0x02
    74f0:	8b 83       	std	Y+3, r24	; 0x03
    74f2:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
    74f4:	ed 81       	ldd	r30, Y+5	; 0x05
    74f6:	fe 81       	ldd	r31, Y+6	; 0x06
    74f8:	44 86       	std	Z+12, r4	; 0x0c
    74fa:	55 86       	std	Z+13, r5	; 0x0d
    74fc:	66 86       	std	Z+14, r6	; 0x0e
    74fe:	77 86       	std	Z+15, r7	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    7500:	9b 01       	movw	r18, r22
    7502:	ac 01       	movw	r20, r24
    7504:	c5 01       	movw	r24, r10
    7506:	b4 01       	movw	r22, r8
    7508:	0e 94 fd dd 	call	0x1bbfa	; 0x1bbfa <__mulsf3>
    750c:	4b 01       	movw	r8, r22
    750e:	5c 01       	movw	r10, r24
    7510:	ed 81       	ldd	r30, Y+5	; 0x05
    7512:	fe 81       	ldd	r31, Y+6	; 0x06
    7514:	80 8a       	std	Z+16, r8	; 0x10
    7516:	91 8a       	std	Z+17, r9	; 0x11
    7518:	a2 8a       	std	Z+18, r10	; 0x12
    751a:	b3 8a       	std	Z+19, r11	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    751c:	29 81       	ldd	r18, Y+1	; 0x01
    751e:	3a 81       	ldd	r19, Y+2	; 0x02
    7520:	4b 81       	ldd	r20, Y+3	; 0x03
    7522:	5c 81       	ldd	r21, Y+4	; 0x04
    7524:	c7 01       	movw	r24, r14
    7526:	b6 01       	movw	r22, r12
    7528:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
    752c:	6b 01       	movw	r12, r22
    752e:	7c 01       	movw	r14, r24
    7530:	ed 81       	ldd	r30, Y+5	; 0x05
    7532:	fe 81       	ldd	r31, Y+6	; 0x06
    7534:	c4 8a       	std	Z+20, r12	; 0x14
    7536:	d5 8a       	std	Z+21, r13	; 0x15
    7538:	e6 8a       	std	Z+22, r14	; 0x16
    753a:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
    753c:	80 8d       	ldd	r24, Z+24	; 0x18
    753e:	91 8d       	ldd	r25, Z+25	; 0x19
    7540:	01 97       	sbiw	r24, 0x01	; 1
    7542:	39 f5       	brne	.+78     	; 0x7592 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
    7544:	a3 01       	movw	r20, r6
    7546:	92 01       	movw	r18, r4
    7548:	60 e0       	ldi	r22, 0x00	; 0
    754a:	70 e0       	ldi	r23, 0x00	; 0
    754c:	cb 01       	movw	r24, r22
    754e:	0e 94 64 df 	call	0x1bec8	; 0x1bec8 <__subsf3>
    7552:	ed 81       	ldd	r30, Y+5	; 0x05
    7554:	fe 81       	ldd	r31, Y+6	; 0x06
    7556:	64 87       	std	Z+12, r22	; 0x0c
    7558:	75 87       	std	Z+13, r23	; 0x0d
    755a:	86 87       	std	Z+14, r24	; 0x0e
    755c:	97 87       	std	Z+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
    755e:	a5 01       	movw	r20, r10
    7560:	94 01       	movw	r18, r8
    7562:	60 e0       	ldi	r22, 0x00	; 0
    7564:	70 e0       	ldi	r23, 0x00	; 0
    7566:	cb 01       	movw	r24, r22
    7568:	0e 94 64 df 	call	0x1bec8	; 0x1bec8 <__subsf3>
    756c:	ed 81       	ldd	r30, Y+5	; 0x05
    756e:	fe 81       	ldd	r31, Y+6	; 0x06
    7570:	60 8b       	std	Z+16, r22	; 0x10
    7572:	71 8b       	std	Z+17, r23	; 0x11
    7574:	82 8b       	std	Z+18, r24	; 0x12
    7576:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
    7578:	a7 01       	movw	r20, r14
    757a:	96 01       	movw	r18, r12
    757c:	60 e0       	ldi	r22, 0x00	; 0
    757e:	70 e0       	ldi	r23, 0x00	; 0
    7580:	cb 01       	movw	r24, r22
    7582:	0e 94 64 df 	call	0x1bec8	; 0x1bec8 <__subsf3>
    7586:	ed 81       	ldd	r30, Y+5	; 0x05
    7588:	fe 81       	ldd	r31, Y+6	; 0x06
    758a:	64 8b       	std	Z+20, r22	; 0x14
    758c:	75 8b       	std	Z+21, r23	; 0x15
    758e:	86 8b       	std	Z+22, r24	; 0x16
    7590:	97 8b       	std	Z+23, r25	; 0x17
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
    7592:	f1 01       	movw	r30, r2
    7594:	e7 52       	subi	r30, 0x27	; 39
    7596:	f5 4f       	sbci	r31, 0xF5	; 245
    7598:	10 81       	ld	r17, Z
    759a:	61 2f       	mov	r22, r17
    759c:	70 e0       	ldi	r23, 0x00	; 0
SetSampleTime():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
    759e:	61 15       	cp	r22, r1
    75a0:	71 05       	cpc	r23, r1
    75a2:	f1 f1       	breq	.+124    	; 0x7620 <thermostat_ring_update_pid_parameters(unsigned char)+0x230>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
    75a4:	07 2e       	mov	r0, r23
    75a6:	00 0c       	add	r0, r0
    75a8:	88 0b       	sbc	r24, r24
    75aa:	99 0b       	sbc	r25, r25
    75ac:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
    75b0:	6b 01       	movw	r12, r22
    75b2:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
    75b4:	ed 81       	ldd	r30, Y+5	; 0x05
    75b6:	fe 81       	ldd	r31, Y+6	; 0x06
    75b8:	66 a5       	ldd	r22, Z+46	; 0x2e
    75ba:	77 a5       	ldd	r23, Z+47	; 0x2f
    75bc:	80 a9       	ldd	r24, Z+48	; 0x30
    75be:	91 a9       	ldd	r25, Z+49	; 0x31
    75c0:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
    75c4:	9b 01       	movw	r18, r22
    75c6:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
    75c8:	c7 01       	movw	r24, r14
    75ca:	b6 01       	movw	r22, r12
    75cc:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
    75d0:	6b 01       	movw	r12, r22
    75d2:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
    75d4:	ac 01       	movw	r20, r24
    75d6:	9b 01       	movw	r18, r22
    75d8:	ed 81       	ldd	r30, Y+5	; 0x05
    75da:	fe 81       	ldd	r31, Y+6	; 0x06
    75dc:	60 89       	ldd	r22, Z+16	; 0x10
    75de:	71 89       	ldd	r23, Z+17	; 0x11
    75e0:	82 89       	ldd	r24, Z+18	; 0x12
    75e2:	93 89       	ldd	r25, Z+19	; 0x13
    75e4:	0e 94 fd dd 	call	0x1bbfa	; 0x1bbfa <__mulsf3>
    75e8:	ed 81       	ldd	r30, Y+5	; 0x05
    75ea:	fe 81       	ldd	r31, Y+6	; 0x06
    75ec:	60 8b       	std	Z+16, r22	; 0x10
    75ee:	71 8b       	std	Z+17, r23	; 0x11
    75f0:	82 8b       	std	Z+18, r24	; 0x12
    75f2:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
    75f4:	a7 01       	movw	r20, r14
    75f6:	96 01       	movw	r18, r12
    75f8:	64 89       	ldd	r22, Z+20	; 0x14
    75fa:	75 89       	ldd	r23, Z+21	; 0x15
    75fc:	86 89       	ldd	r24, Z+22	; 0x16
    75fe:	97 89       	ldd	r25, Z+23	; 0x17
    7600:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
    7604:	ed 81       	ldd	r30, Y+5	; 0x05
    7606:	fe 81       	ldd	r31, Y+6	; 0x06
    7608:	64 8b       	std	Z+20, r22	; 0x14
    760a:	75 8b       	std	Z+21, r23	; 0x15
    760c:	86 8b       	std	Z+22, r24	; 0x16
    760e:	97 8b       	std	Z+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
    7610:	81 2f       	mov	r24, r17
    7612:	90 e0       	ldi	r25, 0x00	; 0
    7614:	b0 e0       	ldi	r27, 0x00	; 0
    7616:	a0 e0       	ldi	r26, 0x00	; 0
    7618:	86 a7       	std	Z+46, r24	; 0x2e
    761a:	97 a7       	std	Z+47, r25	; 0x2f
    761c:	a0 ab       	std	Z+48, r26	; 0x30
    761e:	b1 ab       	std	Z+49, r27	; 0x31
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:221
}
    7620:	26 96       	adiw	r28, 0x06	; 6
    7622:	0f b6       	in	r0, 0x3f	; 63
    7624:	f8 94       	cli
    7626:	de bf       	out	0x3e, r29	; 62
    7628:	0f be       	out	0x3f, r0	; 63
    762a:	cd bf       	out	0x3d, r28	; 61
    762c:	df 91       	pop	r29
    762e:	cf 91       	pop	r28
    7630:	1f 91       	pop	r17
    7632:	0f 91       	pop	r16
    7634:	ff 90       	pop	r15
    7636:	ef 90       	pop	r14
    7638:	df 90       	pop	r13
    763a:	cf 90       	pop	r12
    763c:	bf 90       	pop	r11
    763e:	af 90       	pop	r10
    7640:	9f 90       	pop	r9
    7642:	8f 90       	pop	r8
    7644:	7f 90       	pop	r7
    7646:	6f 90       	pop	r6
    7648:	5f 90       	pop	r5
    764a:	4f 90       	pop	r4
    764c:	3f 90       	pop	r3
    764e:	2f 90       	pop	r2
    7650:	08 95       	ret

00007652 <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:163
  }
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
    7652:	fb 01       	movw	r30, r22
    7654:	9c 01       	movw	r18, r24
    7656:	28 5f       	subi	r18, 0xF8	; 248
    7658:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:166
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    765a:	dc 01       	movw	r26, r24
    765c:	5d 91       	ld	r21, X+
    765e:	cd 01       	movw	r24, r26
    7660:	41 91       	ld	r20, Z+
    7662:	54 13       	cpse	r21, r20
    7664:	05 c0       	rjmp	.+10     	; 0x7670 <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:165

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    7666:	a2 17       	cp	r26, r18
    7668:	b3 07       	cpc	r27, r19
    766a:	b9 f7       	brne	.-18     	; 0x765a <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:164
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
    766c:	81 e0       	ldi	r24, 0x01	; 1
    766e:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:168
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    {
      ret = False;
    7670:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:172
      break;
    }
  return ret;
}
    7672:	08 95       	ret

00007674 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    7674:	80 33       	cpi	r24, 0x30	; 48
    7676:	9c f0       	brlt	.+38     	; 0x769e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    7678:	8a 33       	cpi	r24, 0x3A	; 58
    767a:	24 f0       	brlt	.+8      	; 0x7684 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    767c:	8f 35       	cpi	r24, 0x5F	; 95
    767e:	24 f0       	brlt	.+8      	; 0x7688 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    7680:	8b 37       	cpi	r24, 0x7B	; 123
    7682:	24 f4       	brge	.+8      	; 0x768c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    7684:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    7686:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    7688:	81 34       	cpi	r24, 0x41	; 65
    768a:	4c f0       	brlt	.+18     	; 0x769e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    768c:	8b 35       	cpi	r24, 0x5B	; 91
    768e:	d4 f3       	brlt	.-12     	; 0x7684 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    7690:	93 ed       	ldi	r25, 0xD3	; 211
    7692:	98 0f       	add	r25, r24
    7694:	81 e0       	ldi	r24, 0x01	; 1
    7696:	92 30       	cpi	r25, 0x02	; 2
    7698:	b0 f3       	brcs	.-20     	; 0x7686 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    769a:	80 e0       	ldi	r24, 0x00	; 0
    769c:	08 95       	ret
    769e:	8b 32       	cpi	r24, 0x2B	; 43
    76a0:	b9 f7       	brne	.-18     	; 0x7690 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    76a2:	f0 cf       	rjmp	.-32     	; 0x7684 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

000076a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    76a4:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    76a6:	80 85       	ldd	r24, Z+8	; 0x08
    76a8:	81 11       	cpse	r24, r1
    76aa:	0a c0       	rjmp	.+20     	; 0x76c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    76ac:	a2 81       	ldd	r26, Z+2	; 0x02
    76ae:	b3 81       	ldd	r27, Z+3	; 0x03
    76b0:	cd 01       	movw	r24, r26
    76b2:	01 96       	adiw	r24, 0x01	; 1
    76b4:	93 83       	std	Z+3, r25	; 0x03
    76b6:	82 83       	std	Z+2, r24	; 0x02
    76b8:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    76ba:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    76bc:	81 e0       	ldi	r24, 0x01	; 1
    76be:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    76c0:	87 81       	ldd	r24, Z+7	; 0x07
    76c2:	08 95       	ret

000076c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    76c4:	df 92       	push	r13
    76c6:	ef 92       	push	r14
    76c8:	ff 92       	push	r15
    76ca:	0f 93       	push	r16
    76cc:	1f 93       	push	r17
    76ce:	cf 93       	push	r28
    76d0:	df 93       	push	r29
    76d2:	ec 01       	movw	r28, r24
    76d4:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    76d6:	0c 81       	ldd	r16, Y+4	; 0x04
    76d8:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    76da:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    76de:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    76e0:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    76e2:	ce 01       	movw	r24, r28
    76e4:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    76e8:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    76ea:	d8 16       	cp	r13, r24
    76ec:	89 f1       	breq	.+98     	; 0x7750 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    76ee:	81 11       	cpse	r24, r1
    76f0:	0a c0       	rjmp	.+20     	; 0x7706 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    76f2:	81 e0       	ldi	r24, 0x01	; 1
    76f4:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    76f6:	df 91       	pop	r29
    76f8:	cf 91       	pop	r28
    76fa:	1f 91       	pop	r17
    76fc:	0f 91       	pop	r16
    76fe:	ff 90       	pop	r15
    7700:	ef 90       	pop	r14
    7702:	df 90       	pop	r13
    7704:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    7706:	8c 35       	cpi	r24, 0x5C	; 92
    7708:	d1 f4       	brne	.+52     	; 0x773e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    770a:	ce 01       	movw	r24, r28
    770c:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    7710:	88 23       	and	r24, r24
    7712:	79 f3       	breq	.-34     	; 0x76f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    7714:	85 37       	cpi	r24, 0x75	; 117
    7716:	19 f4       	brne	.+6      	; 0x771e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    7718:	84 e0       	ldi	r24, 0x04	; 4
    771a:	90 e0       	ldi	r25, 0x00	; 0
    771c:	ec cf       	rjmp	.-40     	; 0x76f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    771e:	e8 ef       	ldi	r30, 0xF8	; 248
    7720:	f2 e0       	ldi	r31, 0x02	; 2
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    7722:	90 81       	ld	r25, Z
    7724:	99 23       	and	r25, r25
    7726:	51 f0       	breq	.+20     	; 0x773c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    7728:	89 13       	cpse	r24, r25
    772a:	06 c0       	rjmp	.+12     	; 0x7738 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    772c:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    772e:	81 11       	cpse	r24, r1
    7730:	05 c0       	rjmp	.+10     	; 0x773c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    7732:	82 e0       	ldi	r24, 0x02	; 2
    7734:	90 e0       	ldi	r25, 0x00	; 0
    7736:	df cf       	rjmp	.-66     	; 0x76f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    7738:	32 96       	adiw	r30, 0x02	; 2
    773a:	f3 cf       	rjmp	.-26     	; 0x7722 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    773c:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    773e:	ec 81       	ldd	r30, Y+4	; 0x04
    7740:	fd 81       	ldd	r31, Y+5	; 0x05
    7742:	9f 01       	movw	r18, r30
    7744:	2f 5f       	subi	r18, 0xFF	; 255
    7746:	3f 4f       	sbci	r19, 0xFF	; 255
    7748:	3d 83       	std	Y+5, r19	; 0x05
    774a:	2c 83       	std	Y+4, r18	; 0x04
    774c:	80 83       	st	Z, r24
    774e:	c9 cf       	rjmp	.-110    	; 0x76e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    7750:	ec 81       	ldd	r30, Y+4	; 0x04
    7752:	fd 81       	ldd	r31, Y+5	; 0x05
    7754:	cf 01       	movw	r24, r30
    7756:	01 96       	adiw	r24, 0x01	; 1
    7758:	9d 83       	std	Y+5, r25	; 0x05
    775a:	8c 83       	std	Y+4, r24	; 0x04
    775c:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    775e:	f7 01       	movw	r30, r14
    7760:	11 83       	std	Z+1, r17	; 0x01
    7762:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    7764:	83 e0       	ldi	r24, 0x03	; 3
    7766:	90 e0       	ldi	r25, 0x00	; 0
    7768:	01 2b       	or	r16, r17
    776a:	29 f2       	breq	.-118    	; 0x76f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    776c:	90 e0       	ldi	r25, 0x00	; 0
    776e:	80 e0       	ldi	r24, 0x00	; 0
    7770:	c2 cf       	rjmp	.-124    	; 0x76f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

00007772 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    7772:	1f 93       	push	r17
    7774:	cf 93       	push	r28
    7776:	df 93       	push	r29
    7778:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    777a:	ce 01       	movw	r24, r28
    777c:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7780:	8b 30       	cpi	r24, 0x0B	; 11
    7782:	3c f4       	brge	.+14     	; 0x7792 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    7784:	89 30       	cpi	r24, 0x09	; 9
    7786:	5c f4       	brge	.+22     	; 0x779e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    7788:	88 23       	and	r24, r24
    778a:	e9 f0       	breq	.+58     	; 0x77c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    778c:	90 e0       	ldi	r25, 0x00	; 0
    778e:	80 e0       	ldi	r24, 0x00	; 0
    7790:	1c c0       	rjmp	.+56     	; 0x77ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    7792:	80 32       	cpi	r24, 0x20	; 32
    7794:	21 f0       	breq	.+8      	; 0x779e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    7796:	8f 32       	cpi	r24, 0x2F	; 47
    7798:	21 f0       	breq	.+8      	; 0x77a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    779a:	8d 30       	cpi	r24, 0x0D	; 13
    779c:	b9 f7       	brne	.-18     	; 0x778c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    779e:	18 86       	std	Y+8, r1	; 0x08
    77a0:	ec cf       	rjmp	.-40     	; 0x777a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    77a2:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    77a4:	ce 01       	movw	r24, r28
    77a6:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    77aa:	8a 32       	cpi	r24, 0x2A	; 42
    77ac:	29 f0       	breq	.+10     	; 0x77b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    77ae:	8f 32       	cpi	r24, 0x2F	; 47
    77b0:	d1 f0       	breq	.+52     	; 0x77e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    77b2:	82 e0       	ldi	r24, 0x02	; 2
    77b4:	90 e0       	ldi	r25, 0x00	; 0
    77b6:	09 c0       	rjmp	.+18     	; 0x77ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    77b8:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    77ba:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    77bc:	ce 01       	movw	r24, r28
    77be:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    77c2:	81 11       	cpse	r24, r1
    77c4:	06 c0       	rjmp	.+12     	; 0x77d2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    77c6:	81 e0       	ldi	r24, 0x01	; 1
    77c8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    77ca:	df 91       	pop	r29
    77cc:	cf 91       	pop	r28
    77ce:	1f 91       	pop	r17
    77d0:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    77d2:	8f 32       	cpi	r24, 0x2F	; 47
    77d4:	11 f4       	brne	.+4      	; 0x77da <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
    77d6:	11 11       	cpse	r17, r1
    77d8:	e2 cf       	rjmp	.-60     	; 0x779e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    77da:	11 e0       	ldi	r17, 0x01	; 1
    77dc:	8a 32       	cpi	r24, 0x2A	; 42
    77de:	09 f0       	breq	.+2      	; 0x77e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    77e0:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    77e2:	18 86       	std	Y+8, r1	; 0x08
    77e4:	eb cf       	rjmp	.-42     	; 0x77bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    77e6:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    77e8:	ce 01       	movw	r24, r28
    77ea:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    77ee:	88 23       	and	r24, r24
    77f0:	51 f3       	breq	.-44     	; 0x77c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    77f2:	8a 30       	cpi	r24, 0x0A	; 10
    77f4:	c1 f7       	brne	.-16     	; 0x77e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    77f6:	c1 cf       	rjmp	.-126    	; 0x777a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

000077f8 <valid_true()>:
_Z10valid_truev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6077
}
////
uint8_t valid_true(void)
{
  return 1;
}
    77f8:	81 e0       	ldi	r24, 0x01	; 1
    77fa:	08 95       	ret

000077fc <valid_ipv4_address_element_string()>:
_Z33valid_ipv4_address_element_stringv():
    77fc:	81 e0       	ldi	r24, 0x01	; 1
    77fe:	08 95       	ret

00007800 <button_nastaveni_reload_onclick(unsigned int, unsigned int, unsigned char)>:
_Z31button_nastaveni_reload_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5946
 * funkce pro restartovani zarizeni
 */
void button_nastaveni_reload_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  /// TODO dialog ANO/NE
  resetFunc();
    7800:	f0 e0       	ldi	r31, 0x00	; 0
    7802:	e0 e0       	ldi	r30, 0x00	; 0
    7804:	19 94       	eijmp

00007806 <nullfce(unsigned int, unsigned int, unsigned char)>:
_Z7nullfcejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:921





void nullfce(uint16_t args1, uint16_t args2, uint8_t args3) {};
    7806:	08 95       	ret

00007808 <button_check_mqtt_connection_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_check_mqtt_connection_onclickjjh():
    7808:	08 95       	ret

0000780a <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z62button_set_brightness_auto_shutdown_select_time_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5713
}

uint8_t button_set_brightness_auto_shutdown_select_time_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (args3 == 0 && display_auto_shutdown == 0)
    780a:	41 11       	cpse	r20, r1
    780c:	07 c0       	rjmp	.+14     	; 0x781c <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x12>
    780e:	81 e0       	ldi	r24, 0x01	; 1
    7810:	90 91 6d 0c 	lds	r25, 0x0C6D	; 0x800c6d <display_auto_shutdown>
    7814:	99 23       	and	r25, r25
    7816:	49 f0       	breq	.+18     	; 0x782a <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5721
    ret = 1;
  if (args3 == 2 && display_auto_shutdown == 60)
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    7818:	80 e0       	ldi	r24, 0x00	; 0
    781a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5715
uint8_t button_set_brightness_auto_shutdown_select_time_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (args3 == 0 && display_auto_shutdown == 0)
    ret = 1;
  if (args3 == 1 && display_auto_shutdown == 30)
    781c:	41 30       	cpi	r20, 0x01	; 1
    781e:	31 f4       	brne	.+12     	; 0x782c <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x22>
    7820:	81 e0       	ldi	r24, 0x01	; 1
    7822:	90 91 6d 0c 	lds	r25, 0x0C6D	; 0x800c6d <display_auto_shutdown>
    7826:	9e 31       	cpi	r25, 0x1E	; 30
    7828:	b9 f7       	brne	.-18     	; 0x7818 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5727
    ret = 1;
  if (args3 == 5 && display_auto_shutdown == 250)
    ret = 1;

  return ret;
}
    782a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5717
  uint8_t ret = 0;
  if (args3 == 0 && display_auto_shutdown == 0)
    ret = 1;
  if (args3 == 1 && display_auto_shutdown == 30)
    ret = 1;
  if (args3 == 2 && display_auto_shutdown == 60)
    782c:	42 30       	cpi	r20, 0x02	; 2
    782e:	31 f4       	brne	.+12     	; 0x783c <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    7830:	81 e0       	ldi	r24, 0x01	; 1
    7832:	90 91 6d 0c 	lds	r25, 0x0C6D	; 0x800c6d <display_auto_shutdown>
    7836:	9c 33       	cpi	r25, 0x3C	; 60
    7838:	79 f7       	brne	.-34     	; 0x7818 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    783a:	f7 cf       	rjmp	.-18     	; 0x782a <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5719
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    783c:	43 30       	cpi	r20, 0x03	; 3
    783e:	31 f4       	brne	.+12     	; 0x784c <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x42>
    7840:	81 e0       	ldi	r24, 0x01	; 1
    7842:	90 91 6d 0c 	lds	r25, 0x0C6D	; 0x800c6d <display_auto_shutdown>
    7846:	98 37       	cpi	r25, 0x78	; 120
    7848:	39 f7       	brne	.-50     	; 0x7818 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    784a:	ef cf       	rjmp	.-34     	; 0x782a <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5721
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    784c:	44 30       	cpi	r20, 0x04	; 4
    784e:	31 f4       	brne	.+12     	; 0x785c <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x52>
    7850:	81 e0       	ldi	r24, 0x01	; 1
    7852:	90 91 6d 0c 	lds	r25, 0x0C6D	; 0x800c6d <display_auto_shutdown>
    7856:	94 3b       	cpi	r25, 0xB4	; 180
    7858:	f9 f6       	brne	.-66     	; 0x7818 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    785a:	e7 cf       	rjmp	.-50     	; 0x782a <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5712
  }
}

uint8_t button_set_brightness_auto_shutdown_select_time_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    785c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5723
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    ret = 1;
  if (args3 == 5 && display_auto_shutdown == 250)
    785e:	45 30       	cpi	r20, 0x05	; 5
    7860:	21 f7       	brne	.-56     	; 0x782a <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
    7862:	90 91 6d 0c 	lds	r25, 0x0C6D	; 0x800c6d <display_auto_shutdown>
    7866:	9a 3f       	cpi	r25, 0xFA	; 250
    7868:	01 f7       	brne	.-64     	; 0x782a <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5722
  if (args3 == 2 && display_auto_shutdown == 60)
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    ret = 1;
    786a:	81 e0       	ldi	r24, 0x01	; 1
    786c:	de cf       	rjmp	.-68     	; 0x782a <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>

0000786e <button_set_brightness_auto_shutdown_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z50button_set_brightness_auto_shutdown_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5641


uint8_t button_set_brightness_auto_shutdown_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0)
    786e:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5644
    ret = 1;
  return ret;
}
    7872:	86 fb       	bst	r24, 6
    7874:	88 27       	eor	r24, r24
    7876:	80 f9       	bld	r24, 0
    7878:	08 95       	ret

0000787a <display_enable_show_brightness_manual_mode(unsigned int, unsigned int, unsigned char)>:
_Z42display_enable_show_brightness_manual_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5559

/////////
uint8_t switch_brightness_automode_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 ) ret = 1;
    787a:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
    787e:	80 95       	com	r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5616
{
  uint8_t ret = 0;
  if (switch_brightness_automode_get_status_fnt(0, 0, 0) == 0)
    ret = 1;
  return ret;
}
    7880:	88 1f       	adc	r24, r24
    7882:	88 27       	eor	r24, r24
    7884:	88 1f       	adc	r24, r24
    7886:	08 95       	ret

00007888 <preload_display_setting_brightness(unsigned int, unsigned int, unsigned char)>:
_Z34preload_display_setting_brightnessjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5596
switch_brightness_automode_onclick_end:
  EEPROM.write(my_brightness_mode, brigthness_display_mode);
}

uint8_t preload_display_setting_brightness(uint16_t args1, uint16_t args2, uint8_t args3)
{
    7888:	cf 93       	push	r28
    788a:	df 93       	push	r29
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1665
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    788c:	c0 e8       	ldi	r28, 0x80	; 128
    788e:	d9 e0       	ldi	r29, 0x09	; 9
_Z34preload_display_setting_brightnessjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5597
  EEPROM.write(my_brightness_mode, brigthness_display_mode);
}

uint8_t preload_display_setting_brightness(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(brigthness_display_values, 5, 100, 5, 0, NUMBER_TYPE_INT,  H_TRUE, 0, &helper_display_set_brightness);
    7890:	60 91 65 0b 	lds	r22, 0x0B65	; 0x800b65 <brigthness_display_values>
    7894:	70 e0       	ldi	r23, 0x00	; 0
    7896:	90 e0       	ldi	r25, 0x00	; 0
    7898:	80 e0       	ldi	r24, 0x00	; 0
    789a:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
    789e:	68 83       	st	Y, r22
    78a0:	79 83       	std	Y+1, r23	; 0x01
    78a2:	8a 83       	std	Y+2, r24	; 0x02
    78a4:	9b 83       	std	Y+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1666
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    78a6:	80 e0       	ldi	r24, 0x00	; 0
    78a8:	90 e0       	ldi	r25, 0x00	; 0
    78aa:	a0 ea       	ldi	r26, 0xA0	; 160
    78ac:	b0 e4       	ldi	r27, 0x40	; 64
    78ae:	88 87       	std	Y+8, r24	; 0x08
    78b0:	99 87       	std	Y+9, r25	; 0x09
    78b2:	aa 87       	std	Y+10, r26	; 0x0a
    78b4:	bb 87       	std	Y+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1667
  menu_dialog_variable[idx].variable_max = max;
    78b6:	40 e0       	ldi	r20, 0x00	; 0
    78b8:	50 e0       	ldi	r21, 0x00	; 0
    78ba:	68 ec       	ldi	r22, 0xC8	; 200
    78bc:	72 e4       	ldi	r23, 0x42	; 66
    78be:	4c 83       	std	Y+4, r20	; 0x04
    78c0:	5d 83       	std	Y+5, r21	; 0x05
    78c2:	6e 83       	std	Y+6, r22	; 0x06
    78c4:	7f 83       	std	Y+7, r23	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1668
  menu_dialog_variable[idx].variable_step = step;
    78c6:	8e 87       	std	Y+14, r24	; 0x0e
    78c8:	9f 87       	std	Y+15, r25	; 0x0f
    78ca:	a8 8b       	std	Y+16, r26	; 0x10
    78cc:	b9 8b       	std	Y+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1669
  menu_dialog_variable[idx].number_type = number_type;
    78ce:	81 e0       	ldi	r24, 0x01	; 1
    78d0:	8d 87       	std	Y+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1670
  menu_dialog_variable[idx].args = args;
    78d2:	1a 8a       	std	Y+18, r1	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1671
  menu_dialog_variable[idx].update_now = update_now;
    78d4:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1672
  menu_dialog_variable[idx].save_function = save_function;
    78d6:	84 e3       	ldi	r24, 0x34	; 52
    78d8:	97 e5       	ldi	r25, 0x57	; 87
    78da:	9c 8b       	std	Y+20, r25	; 0x14
    78dc:	8b 8b       	std	Y+19, r24	; 0x13
_Z34preload_display_setting_brightnessjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5598
}

uint8_t preload_display_setting_brightness(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(brigthness_display_values, 5, 100, 5, 0, NUMBER_TYPE_INT,  H_TRUE, 0, &helper_display_set_brightness);
}
    78de:	df 91       	pop	r29
    78e0:	cf 91       	pop	r28
    78e2:	08 95       	ret

000078e4 <switch_brightness_automode_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z41switch_brightness_automode_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5559

/////////
uint8_t switch_brightness_automode_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 ) ret = 1;
    78e4:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5561
  return ret;
}
    78e8:	88 1f       	adc	r24, r24
    78ea:	88 27       	eor	r24, r24
    78ec:	88 1f       	adc	r24, r24
    78ee:	08 95       	ret

000078f0 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z35button_get_show_default_temp_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5034
   funkce pro zobrazeni defaultniho cidla zobrazeni teploty
*/
uint8_t button_get_show_default_temp_active(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (default_show_temp == args3)
    78f0:	81 e0       	ldi	r24, 0x01	; 1
    78f2:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <default_show_temp>
    78f6:	94 13       	cpse	r25, r20
    78f8:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5038
    ret = 1;

  return ret;
}
    78fa:	08 95       	ret

000078fc <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z38button_get_show_default_temp_max_itemsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5021
}
//////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci soucet vsech cidel v systemu
uint8_t button_get_show_default_temp_max_items(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (args1 == INPUT_SENSOR_SHOW_ACTIVE)
    78fc:	00 97       	sbiw	r24, 0x00	; 0
    78fe:	31 f4       	brne	.+12     	; 0x790c <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5022
    return use_tds + use_rtds;
    7900:	80 91 69 0c 	lds	r24, 0x0C69	; 0x800c69 <use_tds>
    7904:	90 91 6a 0c 	lds	r25, 0x0C6A	; 0x800c6a <use_rtds>
    7908:	89 0f       	add	r24, r25
    790a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5024

  if (args1 == INPUT_SENSOR_SHOW_ALL)
    790c:	01 97       	sbiw	r24, 0x01	; 1
    790e:	09 f0       	breq	.+2      	; 0x7912 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x16>
    7910:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5025
    return HW_ONEWIRE_MAXROMS + MAX_RTDS;
    7912:	80 e1       	ldi	r24, 0x10	; 16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5026
}
    7914:	08 95       	ret

00007916 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4781
  }
}

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
    7916:	e9 e8       	ldi	r30, 0x89	; 137
    7918:	fc e0       	ldi	r31, 0x0C	; 12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4782
  uint8_t active = 0;
    791a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4784
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    if (w_rom[cnt].used == 1) active++;
    791c:	91 85       	ldd	r25, Z+9	; 0x09
    791e:	91 30       	cpi	r25, 0x01	; 1
    7920:	09 f4       	brne	.+2      	; 0x7924 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    7922:	8f 5f       	subi	r24, 0xFF	; 255
    7924:	3b 96       	adiw	r30, 0x0b	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4783

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
  uint8_t active = 0;
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    7926:	9c e0       	ldi	r25, 0x0C	; 12
    7928:	eb 3c       	cpi	r30, 0xCB	; 203
    792a:	f9 07       	cpc	r31, r25
    792c:	b9 f7       	brne	.-18     	; 0x791c <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4786
    if (w_rom[cnt].used == 1) active++;
  return active;
}
    792e:	08 95       	ret

00007930 <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4698
/// funkce vraci pocet obsazenych rtds snimacu
uint8_t get_function_rtds_last_index_for_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return MAX_RTDS;
  //return use_rtds;
}
    7930:	8a e0       	ldi	r24, 0x0A	; 10
    7932:	08 95       	ret

00007934 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4674
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
    7934:	ef 92       	push	r14
    7936:	ff 92       	push	r15
    7938:	0f 93       	push	r16
    793a:	1f 93       	push	r17
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1982
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    793c:	80 17       	cp	r24, r16
    793e:	91 07       	cpc	r25, r17
    7940:	74 f4       	brge	.+28     	; 0x795e <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4676
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    7942:	84 0f       	add	r24, r20
    7944:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1982
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    7946:	08 17       	cp	r16, r24
    7948:	19 07       	cpc	r17, r25
    794a:	4c f4       	brge	.+18     	; 0x795e <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
    794c:	6e 15       	cp	r22, r14
    794e:	7f 05       	cpc	r23, r15
    7950:	34 f4       	brge	.+12     	; 0x795e <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4676
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    7952:	62 0f       	add	r22, r18
    7954:	73 1f       	adc	r23, r19
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1982
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    7956:	81 e0       	ldi	r24, 0x01	; 1
    7958:	e6 16       	cp	r14, r22
    795a:	f7 06       	cpc	r15, r23
    795c:	0c f0       	brlt	.+2      	; 0x7960 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4675
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
    795e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4681
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
  {
    ret = true;
  }
  return ret;
}
    7960:	1f 91       	pop	r17
    7962:	0f 91       	pop	r16
    7964:	ff 90       	pop	r15
    7966:	ef 90       	pop	r14
    7968:	08 95       	ret

0000796a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4529
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    menu_slider_data_current[args1]--;
}
///
void process_display_element_slider(uint8_t *start, uint8_t *stop, uint8_t args, uint8_t max_element)
{
    796a:	cf 93       	push	r28
    796c:	df 93       	push	r29
    796e:	fc 01       	movw	r30, r24
    7970:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4530
  if (max_element > 0)
    7972:	22 23       	and	r18, r18
    7974:	09 f1       	breq	.+66     	; 0x79b8 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4532
  {
    menu_slider_data_max = *stop;
    7976:	98 81       	ld	r25, Y
    7978:	90 93 7a 09 	sts	0x097A, r25	; 0x80097a <menu_slider_data_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4533
    menu_slider_data_min = *start;
    797c:	80 81       	ld	r24, Z
    797e:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <menu_slider_data_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4534
    menu_slider_data_max_element = max_element;
    7982:	20 93 78 09 	sts	0x0978, r18	; 0x800978 <menu_slider_data_max_element>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4536
    ///
    *start = menu_slider_data_current[args];
    7986:	a4 2f       	mov	r26, r20
    7988:	b0 e0       	ldi	r27, 0x00	; 0
    798a:	ad 58       	subi	r26, 0x8D	; 141
    798c:	b6 4f       	sbci	r27, 0xF6	; 246
    798e:	3c 91       	ld	r19, X
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4537
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    7990:	62 2f       	mov	r22, r18
    7992:	70 e0       	ldi	r23, 0x00	; 0
    7994:	49 2f       	mov	r20, r25
    7996:	50 e0       	ldi	r21, 0x00	; 0
    7998:	db 01       	movw	r26, r22
    799a:	a3 0f       	add	r26, r19
    799c:	b1 1d       	adc	r27, r1
    799e:	4a 17       	cp	r20, r26
    79a0:	5b 07       	cpc	r21, r27
    79a2:	6c f0       	brlt	.+26     	; 0x79be <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4536
  {
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    79a4:	30 83       	st	Z, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4539
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
    79a6:	80 81       	ld	r24, Z
    79a8:	98 17       	cp	r25, r24
    79aa:	08 f4       	brcc	.+2      	; 0x79ae <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4540
      *start = menu_slider_data_max;
    79ac:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4543
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
    79ae:	29 17       	cp	r18, r25
    79b0:	78 f4       	brcc	.+30     	; 0x79d0 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4542
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    79b2:	80 81       	ld	r24, Z
    79b4:	28 0f       	add	r18, r24
    79b6:	28 83       	st	Y, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4546
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
  }
}
    79b8:	df 91       	pop	r29
    79ba:	cf 91       	pop	r28
    79bc:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4537
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    79be:	48 1b       	sub	r20, r24
    79c0:	51 09       	sbc	r21, r1
    79c2:	64 17       	cp	r22, r20
    79c4:	75 07       	cpc	r23, r21
    79c6:	74 f7       	brge	.-36     	; 0x79a4 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4538
      *start = menu_slider_data_max - max_element;
    79c8:	89 2f       	mov	r24, r25
    79ca:	82 1b       	sub	r24, r18
    79cc:	80 83       	st	Z, r24
    79ce:	eb cf       	rjmp	.-42     	; 0x79a6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4544
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
    79d0:	98 83       	st	Y, r25
    79d2:	f2 cf       	rjmp	.-28     	; 0x79b8 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>

000079d4 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_decjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4524
    menu_slider_data_current[args1]++;
}
///
void display_function_vertical_slider_dec(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    79d4:	fc 01       	movw	r30, r24
    79d6:	ed 58       	subi	r30, 0x8D	; 141
    79d8:	f6 4f       	sbci	r31, 0xF6	; 246
    79da:	90 81       	ld	r25, Z
    79dc:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <menu_slider_data_min>
    79e0:	89 17       	cp	r24, r25
    79e2:	10 f4       	brcc	.+4      	; 0x79e8 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)+0x14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4525
    menu_slider_data_current[args1]--;
    79e4:	91 50       	subi	r25, 0x01	; 1
    79e6:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4526
}
    79e8:	08 95       	ret

000079ea <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_incjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4518
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
}
///
void display_function_vertical_slider_inc(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_slider_data_current[args1] < (menu_slider_data_max - menu_slider_data_max_element))
    79ea:	fc 01       	movw	r30, r24
    79ec:	ed 58       	subi	r30, 0x8D	; 141
    79ee:	f6 4f       	sbci	r31, 0xF6	; 246
    79f0:	90 81       	ld	r25, Z
    79f2:	20 91 7a 09 	lds	r18, 0x097A	; 0x80097a <menu_slider_data_max>
    79f6:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <menu_slider_data_max_element>
    79fa:	28 1b       	sub	r18, r24
    79fc:	33 0b       	sbc	r19, r19
    79fe:	92 17       	cp	r25, r18
    7a00:	13 06       	cpc	r1, r19
    7a02:	14 f4       	brge	.+4      	; 0x7a08 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4519
    menu_slider_data_current[args1]++;
    7a04:	9f 5f       	subi	r25, 0xFF	; 255
    7a06:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4520
}
    7a08:	08 95       	ret

00007a0a <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3342
}
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
    7a0a:	83 30       	cpi	r24, 0x03	; 3
    7a0c:	41 f4       	brne	.+16     	; 0x7a1e <a2d_complete(unsigned char, unsigned int)+0x14>
    7a0e:	70 93 5d 0b 	sts	0x0B5D, r23	; 0x800b5d <proud+0x1>
    7a12:	60 93 5c 0b 	sts	0x0B5C, r22	; 0x800b5c <proud>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3347
  if (channel == A_TRIV ) tritri = data;
  if (channel == A_PETV) petnula = data;
  if (channel == A_DVANACTV) dvanact = data;
  if (channel == A_LIGHT) light_curr = data;
  a2d_run_now = 1;
    7a16:	81 e0       	ldi	r24, 0x01	; 1
    7a18:	80 93 68 0c 	sts	0x0C68, r24	; 0x800c68 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3348
}
    7a1c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3343
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
  if (channel == A_TRIV ) tritri = data;
    7a1e:	86 30       	cpi	r24, 0x06	; 6
    7a20:	29 f4       	brne	.+10     	; 0x7a2c <a2d_complete(unsigned char, unsigned int)+0x22>
    7a22:	70 93 63 0b 	sts	0x0B63, r23	; 0x800b63 <tritri+0x1>
    7a26:	60 93 62 0b 	sts	0x0B62, r22	; 0x800b62 <tritri>
    7a2a:	f5 cf       	rjmp	.-22     	; 0x7a16 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3344
  if (channel == A_PETV) petnula = data;
    7a2c:	85 30       	cpi	r24, 0x05	; 5
    7a2e:	29 f4       	brne	.+10     	; 0x7a3a <a2d_complete(unsigned char, unsigned int)+0x30>
    7a30:	70 93 61 0b 	sts	0x0B61, r23	; 0x800b61 <petnula+0x1>
    7a34:	60 93 60 0b 	sts	0x0B60, r22	; 0x800b60 <petnula>
    7a38:	ee cf       	rjmp	.-36     	; 0x7a16 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3345
  if (channel == A_DVANACTV) dvanact = data;
    7a3a:	84 30       	cpi	r24, 0x04	; 4
    7a3c:	29 f4       	brne	.+10     	; 0x7a48 <a2d_complete(unsigned char, unsigned int)+0x3e>
    7a3e:	70 93 5f 0b 	sts	0x0B5F, r23	; 0x800b5f <dvanact+0x1>
    7a42:	60 93 5e 0b 	sts	0x0B5E, r22	; 0x800b5e <dvanact>
    7a46:	e7 cf       	rjmp	.-50     	; 0x7a16 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3346
  if (channel == A_LIGHT) light_curr = data;
    7a48:	87 30       	cpi	r24, 0x07	; 7
    7a4a:	29 f7       	brne	.-54     	; 0x7a16 <a2d_complete(unsigned char, unsigned int)+0xc>
    7a4c:	70 93 74 0c 	sts	0x0C74, r23	; 0x800c74 <light_curr+0x1>
    7a50:	60 93 73 0c 	sts	0x0C73, r22	; 0x800c73 <light_curr>
    7a54:	e0 cf       	rjmp	.-64     	; 0x7a16 <a2d_complete(unsigned char, unsigned int)+0xc>

00007a56 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_return_args_1jjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1946


uint8_t get_function_return_args_1(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return args1;
}
    7a56:	08 95       	ret

00007a58 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>:
_Z23menu_redraw_update_tempjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
  return 0;
}

uint8_t menu_redraw_update_temp(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_redraw10s == 1)
    7a58:	80 91 7a 0c 	lds	r24, 0x0C7A	; 0x800c7a <menu_redraw10s>
    7a5c:	81 30       	cpi	r24, 0x01	; 1
    7a5e:	19 f4       	brne	.+6      	; 0x7a66 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1936
  {
    menu_redraw10s = 0;
    7a60:	10 92 7a 0c 	sts	0x0C7A, r1	; 0x800c7a <menu_redraw10s>
    7a64:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1939
    return 1;
  }
  return 0;
    7a66:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
}
    7a68:	08 95       	ret

00007a6a <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>:
_Z28menu_redraw_change_term_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1924
  return 0;
}

uint8_t menu_redraw_change_term_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (change_term_mode == 1)
    7a6a:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <change_term_mode>
    7a6e:	81 30       	cpi	r24, 0x01	; 1
    7a70:	19 f4       	brne	.+6      	; 0x7a78 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1926
  {
    change_term_mode = 0;
    7a72:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <change_term_mode>
    7a76:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
    return 1;
  }
  return 0;
    7a78:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1930
}
    7a7a:	08 95       	ret

00007a7c <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>:
_Z19menu_redraw_time05sjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1914
}


uint8_t menu_redraw_time05s(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_redraw05s == 1)
    7a7c:	80 91 6b 0c 	lds	r24, 0x0C6B	; 0x800c6b <menu_redraw05s>
    7a80:	81 30       	cpi	r24, 0x01	; 1
    7a82:	19 f4       	brne	.+6      	; 0x7a8a <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1916
  {
    menu_redraw05s = 0;
    7a84:	10 92 6b 0c 	sts	0x0C6B, r1	; 0x800c6b <menu_redraw05s>
    7a88:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1919
    return 1;
  }
  return 0;
    7a8a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1920
}
    7a8c:	08 95       	ret

00007a8e <click_keyboard_type(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_typejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1872
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}

void click_keyboard_type(uint16_t args1, uint16_t args2, uint8_t args3)
{
  dialog_set_string_keyboard_type = args1;
    7a8e:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <__data_end>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1873
}
    7a92:	08 95       	ret

00007a94 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1862
  display_element_set_string_add_char(znak);
}
/// vraci pocet prvku pro zobrazeni
uint8_t get_function_keyboard_alfa_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    7a94:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <__data_end>
    7a98:	83 30       	cpi	r24, 0x03	; 3
    7a9a:	08 f0       	brcs	.+2      	; 0x7a9e <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    7a9c:	08 95       	ret
    7a9e:	8a e1       	ldi	r24, 0x1A	; 26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1868
    return KEYBOARD_SIZE_CHAR_UPPER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    return KEYBOARD_SIZE_CHAR_LOWER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}
    7aa0:	08 95       	ret

00007aa2 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1831
  line2[0] = 0;
}

/////
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    7aa2:	0f 93       	push	r16
    7aa4:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1833
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    7aa6:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <__data_end>
    7aaa:	91 11       	cpse	r25, r1
    7aac:	0c c0       	rjmp	.+24     	; 0x7ac6 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1834
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
    7aae:	e8 2f       	mov	r30, r24
    7ab0:	f0 e0       	ldi	r31, 0x00	; 0
    7ab2:	ea 50       	subi	r30, 0x0A	; 10
    7ab4:	f5 4a       	sbci	r31, 0xA5	; 165
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1838
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    7ab6:	e4 91       	lpm	r30, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1839
  line1[0] = znak;
    7ab8:	d9 01       	movw	r26, r18
    7aba:	ec 93       	st	X, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1840
  line2[0] = 0;
    7abc:	f8 01       	movw	r30, r16
    7abe:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1841
}
    7ac0:	1f 91       	pop	r17
    7ac2:	0f 91       	pop	r16
    7ac4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1835
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    7ac6:	91 30       	cpi	r25, 0x01	; 1
    7ac8:	29 f4       	brne	.+10     	; 0x7ad4 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1836
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
    7aca:	e8 2f       	mov	r30, r24
    7acc:	f0 e0       	ldi	r31, 0x00	; 0
    7ace:	e4 52       	subi	r30, 0x24	; 36
    7ad0:	f5 4a       	sbci	r31, 0xA5	; 165
    7ad2:	f1 cf       	rjmp	.-30     	; 0x7ab6 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1837
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    7ad4:	92 30       	cpi	r25, 0x02	; 2
    7ad6:	81 f7       	brne	.-32     	; 0x7ab8 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1838
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    7ad8:	e8 2f       	mov	r30, r24
    7ada:	f0 e0       	ldi	r31, 0x00	; 0
    7adc:	ee 53       	subi	r30, 0x3E	; 62
    7ade:	f5 4a       	sbci	r31, 0xA5	; 165
    7ae0:	ea cf       	rjmp	.-44     	; 0x7ab6 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>

00007ae2 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1822
/*
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    7ae2:	0f 93       	push	r16
    7ae4:	1f 93       	push	r17
    7ae6:	f9 01       	movw	r30, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1824
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    7ae8:	8a 30       	cpi	r24, 0x0A	; 10
    7aea:	39 f4       	brne	.+14     	; 0x7afa <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    7aec:	8e e2       	ldi	r24, 0x2E	; 46
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1825
  if (args1 == 11) line1[0] = ':';
    7aee:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1826
  line2[0] = 0;
    7af0:	f8 01       	movw	r30, r16
    7af2:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1827
}
    7af4:	1f 91       	pop	r17
    7af6:	0f 91       	pop	r16
    7af8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1825
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
  if (args1 == 11) line1[0] = ':';
    7afa:	8b 30       	cpi	r24, 0x0B	; 11
    7afc:	11 f0       	breq	.+4      	; 0x7b02 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1823
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line1[0] = '0' + args1;
    7afe:	80 5d       	subi	r24, 0xD0	; 208
    7b00:	f6 cf       	rjmp	.-20     	; 0x7aee <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1825
  if (args1 == 10) line1[0] = '.';
  if (args1 == 11) line1[0] = ':';
    7b02:	8a e3       	ldi	r24, 0x3A	; 58
    7b04:	f4 cf       	rjmp	.-24     	; 0x7aee <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>

00007b06 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_keyboard_number_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1802
//////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci pocet polozek dynamickeho menu
uint8_t get_function_keyboard_number_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 12;
}
    7b06:	8c e0       	ldi	r24, 0x0C	; 12
    7b08:	08 95       	ret

00007b0a <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>:
_Z34display_function_set_variable_plusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1653
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    }
  }
}
void display_function_set_variable_plus(uint16_t idx, uint16_t args2, uint8_t args3)
{
    7b0a:	cf 92       	push	r12
    7b0c:	df 92       	push	r13
    7b0e:	ef 92       	push	r14
    7b10:	ff 92       	push	r15
    7b12:	cf 93       	push	r28
    7b14:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1654
  if ((menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step) <= menu_dialog_variable[idx].variable_max)
    7b16:	25 e1       	ldi	r18, 0x15	; 21
    7b18:	28 9f       	mul	r18, r24
    7b1a:	e0 01       	movw	r28, r0
    7b1c:	29 9f       	mul	r18, r25
    7b1e:	d0 0d       	add	r29, r0
    7b20:	11 24       	eor	r1, r1
    7b22:	c0 58       	subi	r28, 0x80	; 128
    7b24:	d6 4f       	sbci	r29, 0xF6	; 246
    7b26:	2e 85       	ldd	r18, Y+14	; 0x0e
    7b28:	3f 85       	ldd	r19, Y+15	; 0x0f
    7b2a:	48 89       	ldd	r20, Y+16	; 0x10
    7b2c:	59 89       	ldd	r21, Y+17	; 0x11
    7b2e:	68 81       	ld	r22, Y
    7b30:	79 81       	ldd	r23, Y+1	; 0x01
    7b32:	8a 81       	ldd	r24, Y+2	; 0x02
    7b34:	9b 81       	ldd	r25, Y+3	; 0x03
    7b36:	0e 94 65 df 	call	0x1beca	; 0x1beca <__addsf3>
    7b3a:	6b 01       	movw	r12, r22
    7b3c:	7c 01       	movw	r14, r24
    7b3e:	2c 81       	ldd	r18, Y+4	; 0x04
    7b40:	3d 81       	ldd	r19, Y+5	; 0x05
    7b42:	4e 81       	ldd	r20, Y+6	; 0x06
    7b44:	5f 81       	ldd	r21, Y+7	; 0x07
    7b46:	0e 94 97 dd 	call	0x1bb2e	; 0x1bb2e <__cmpsf2>
    7b4a:	18 16       	cp	r1, r24
    7b4c:	cc f0       	brlt	.+50     	; 0x7b80 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1656
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step;
    7b4e:	c8 82       	st	Y, r12
    7b50:	d9 82       	std	Y+1, r13	; 0x01
    7b52:	ea 82       	std	Y+2, r14	; 0x02
    7b54:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1657
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    7b56:	8c 85       	ldd	r24, Y+12	; 0x0c
    7b58:	81 30       	cpi	r24, 0x01	; 1
    7b5a:	91 f4       	brne	.+36     	; 0x7b80 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x76>
float_to_int():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}

int float_to_int(float x)
{
 return x;
    7b5c:	c7 01       	movw	r24, r14
    7b5e:	b6 01       	movw	r22, r12
    7b60:	0e 94 43 e0 	call	0x1c086	; 0x1c086 <__fixsfsi>
    7b64:	26 2f       	mov	r18, r22
_Z34display_function_set_variable_plusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1659
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    7b66:	8a 89       	ldd	r24, Y+18	; 0x12
    7b68:	eb 89       	ldd	r30, Y+19	; 0x13
    7b6a:	fc 89       	ldd	r31, Y+20	; 0x14
    7b6c:	b7 01       	movw	r22, r14
    7b6e:	a6 01       	movw	r20, r12
    7b70:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1662
    }
  }
}
    7b72:	df 91       	pop	r29
    7b74:	cf 91       	pop	r28
    7b76:	ff 90       	pop	r15
    7b78:	ef 90       	pop	r14
    7b7a:	df 90       	pop	r13
    7b7c:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1659
  if ((menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step) <= menu_dialog_variable[idx].variable_max)
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step;
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    7b7e:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1662
    }
  }
}
    7b80:	df 91       	pop	r29
    7b82:	cf 91       	pop	r28
    7b84:	ff 90       	pop	r15
    7b86:	ef 90       	pop	r14
    7b88:	df 90       	pop	r13
    7b8a:	cf 90       	pop	r12
    7b8c:	08 95       	ret

00007b8e <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>:
_Z35display_function_set_variable_minusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1642
{
  return menu_dialog_variable[idx].variable_now ;
}

void display_function_set_variable_minus(uint16_t idx, uint16_t args2, uint8_t args3)
{
    7b8e:	cf 92       	push	r12
    7b90:	df 92       	push	r13
    7b92:	ef 92       	push	r14
    7b94:	ff 92       	push	r15
    7b96:	cf 93       	push	r28
    7b98:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1643
  if (menu_dialog_variable[idx].variable_now - menu_dialog_variable[idx].variable_step >= menu_dialog_variable[idx].variable_min)
    7b9a:	25 e1       	ldi	r18, 0x15	; 21
    7b9c:	28 9f       	mul	r18, r24
    7b9e:	e0 01       	movw	r28, r0
    7ba0:	29 9f       	mul	r18, r25
    7ba2:	d0 0d       	add	r29, r0
    7ba4:	11 24       	eor	r1, r1
    7ba6:	c0 58       	subi	r28, 0x80	; 128
    7ba8:	d6 4f       	sbci	r29, 0xF6	; 246
    7baa:	2e 85       	ldd	r18, Y+14	; 0x0e
    7bac:	3f 85       	ldd	r19, Y+15	; 0x0f
    7bae:	48 89       	ldd	r20, Y+16	; 0x10
    7bb0:	59 89       	ldd	r21, Y+17	; 0x11
    7bb2:	68 81       	ld	r22, Y
    7bb4:	79 81       	ldd	r23, Y+1	; 0x01
    7bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    7bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    7bba:	0e 94 64 df 	call	0x1bec8	; 0x1bec8 <__subsf3>
    7bbe:	6b 01       	movw	r12, r22
    7bc0:	7c 01       	movw	r14, r24
    7bc2:	28 85       	ldd	r18, Y+8	; 0x08
    7bc4:	39 85       	ldd	r19, Y+9	; 0x09
    7bc6:	4a 85       	ldd	r20, Y+10	; 0x0a
    7bc8:	5b 85       	ldd	r21, Y+11	; 0x0b
    7bca:	0e 94 79 e0 	call	0x1c0f2	; 0x1c0f2 <__gesf2>
    7bce:	87 fd       	sbrc	r24, 7
    7bd0:	19 c0       	rjmp	.+50     	; 0x7c04 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1645
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now  - menu_dialog_variable[idx].variable_step;
    7bd2:	c8 82       	st	Y, r12
    7bd4:	d9 82       	std	Y+1, r13	; 0x01
    7bd6:	ea 82       	std	Y+2, r14	; 0x02
    7bd8:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1646
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    7bda:	8c 85       	ldd	r24, Y+12	; 0x0c
    7bdc:	81 30       	cpi	r24, 0x01	; 1
    7bde:	91 f4       	brne	.+36     	; 0x7c04 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x76>
float_to_int():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102
    7be0:	c7 01       	movw	r24, r14
    7be2:	b6 01       	movw	r22, r12
    7be4:	0e 94 43 e0 	call	0x1c086	; 0x1c086 <__fixsfsi>
    7be8:	26 2f       	mov	r18, r22
_Z35display_function_set_variable_minusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1648
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    7bea:	8a 89       	ldd	r24, Y+18	; 0x12
    7bec:	eb 89       	ldd	r30, Y+19	; 0x13
    7bee:	fc 89       	ldd	r31, Y+20	; 0x14
    7bf0:	b7 01       	movw	r22, r14
    7bf2:	a6 01       	movw	r20, r12
    7bf4:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1651
    }
  }
}
    7bf6:	df 91       	pop	r29
    7bf8:	cf 91       	pop	r28
    7bfa:	ff 90       	pop	r15
    7bfc:	ef 90       	pop	r14
    7bfe:	df 90       	pop	r13
    7c00:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1648
  if (menu_dialog_variable[idx].variable_now - menu_dialog_variable[idx].variable_step >= menu_dialog_variable[idx].variable_min)
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now  - menu_dialog_variable[idx].variable_step;
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    7c02:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1651
    }
  }
}
    7c04:	df 91       	pop	r29
    7c06:	cf 91       	pop	r28
    7c08:	ff 90       	pop	r15
    7c0a:	ef 90       	pop	r14
    7c0c:	df 90       	pop	r13
    7c0e:	cf 90       	pop	r12
    7c10:	08 95       	ret

00007c12 <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1517
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
    7c12:	ff 92       	push	r15
    7c14:	0f 93       	push	r16
    7c16:	1f 93       	push	r17
    7c18:	cf 93       	push	r28
    7c1a:	df 93       	push	r29
    7c1c:	dc 01       	movw	r26, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1522
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    7c1e:	20 91 e4 0c 	lds	r18, 0x0CE4	; 0x800ce4 <MenuHistoryIndex>
    7c22:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1519
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    7c24:	80 e0       	ldi	r24, 0x00	; 0
    7c26:	6c e0       	ldi	r22, 0x0C	; 12
    7c28:	78 e0       	ldi	r23, 0x08	; 8
    7c2a:	ca ed       	ldi	r28, 0xDA	; 218
    7c2c:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1522
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    7c2e:	89 01       	movw	r16, r18
    7c30:	06 52       	subi	r16, 0x26	; 38
    7c32:	13 4f       	sbci	r17, 0xF3	; 243
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1519
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    7c34:	fb 01       	movw	r30, r22
    7c36:	94 91       	lpm	r25, Z
    7c38:	89 17       	cp	r24, r25
    7c3a:	e8 f4       	brcc	.+58     	; 0x7c76 <MenuHistoryGetMenu(unsigned char*)+0x64>
    7c3c:	8c 9f       	mul	r24, r28
    7c3e:	a0 01       	movw	r20, r0
    7c40:	8d 9f       	mul	r24, r29
    7c42:	50 0d       	add	r21, r0
    7c44:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1522
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    7c46:	fa 01       	movw	r30, r20
    7c48:	eb 52       	subi	r30, 0x2B	; 43
    7c4a:	f5 4f       	sbci	r31, 0xF5	; 245
    7c4c:	f4 90       	lpm	r15, Z
    7c4e:	f8 01       	movw	r30, r16
    7c50:	90 81       	ld	r25, Z
    7c52:	9f 11       	cpse	r25, r15
    7c54:	0e c0       	rjmp	.+28     	; 0x7c72 <MenuHistoryGetMenu(unsigned char*)+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1521
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    7c56:	40 5f       	subi	r20, 0xF0	; 240
    7c58:	57 4f       	sbci	r21, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1553
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
    7c5a:	20 53       	subi	r18, 0x30	; 48
    7c5c:	33 4f       	sbci	r19, 0xF3	; 243
    7c5e:	f9 01       	movw	r30, r18
    7c60:	20 81       	ld	r18, Z
    7c62:	2c 93       	st	X, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1557
      return menus;
    }
  }
}
    7c64:	ca 01       	movw	r24, r20
    7c66:	df 91       	pop	r29
    7c68:	cf 91       	pop	r28
    7c6a:	1f 91       	pop	r17
    7c6c:	0f 91       	pop	r16
    7c6e:	ff 90       	pop	r15
    7c70:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1519
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    7c72:	8f 5f       	subi	r24, 0xFF	; 255
    7c74:	df cf       	rjmp	.-66     	; 0x7c34 <MenuHistoryGetMenu(unsigned char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1528
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    7c76:	80 e0       	ldi	r24, 0x00	; 0
    7c78:	6d e0       	ldi	r22, 0x0D	; 13
    7c7a:	78 e0       	ldi	r23, 0x08	; 8
    7c7c:	ca ed       	ldi	r28, 0xDA	; 218
    7c7e:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1531
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    7c80:	89 01       	movw	r16, r18
    7c82:	06 52       	subi	r16, 0x26	; 38
    7c84:	13 4f       	sbci	r17, 0xF3	; 243
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1528
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    7c86:	fb 01       	movw	r30, r22
    7c88:	94 91       	lpm	r25, Z
    7c8a:	89 17       	cp	r24, r25
    7c8c:	90 f4       	brcc	.+36     	; 0x7cb2 <MenuHistoryGetMenu(unsigned char*)+0xa0>
    7c8e:	8c 9f       	mul	r24, r28
    7c90:	a0 01       	movw	r20, r0
    7c92:	8d 9f       	mul	r24, r29
    7c94:	50 0d       	add	r21, r0
    7c96:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1531
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    7c98:	fa 01       	movw	r30, r20
    7c9a:	e7 5a       	subi	r30, 0xA7	; 167
    7c9c:	f8 4d       	sbci	r31, 0xD8	; 216
    7c9e:	f4 90       	lpm	r15, Z
    7ca0:	f8 01       	movw	r30, r16
    7ca2:	90 81       	ld	r25, Z
    7ca4:	9f 11       	cpse	r25, r15
    7ca6:	03 c0       	rjmp	.+6      	; 0x7cae <MenuHistoryGetMenu(unsigned char*)+0x9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1530
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
  {
    menus = &Menu_All.ListMenu2[idx];
    7ca8:	4c 56       	subi	r20, 0x6C	; 108
    7caa:	5b 4d       	sbci	r21, 0xDB	; 219
    7cac:	d6 cf       	rjmp	.-84     	; 0x7c5a <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1528
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    7cae:	8f 5f       	subi	r24, 0xFF	; 255
    7cb0:	ea cf       	rjmp	.-44     	; 0x7c86 <MenuHistoryGetMenu(unsigned char*)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1538
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    7cb2:	80 e0       	ldi	r24, 0x00	; 0
    7cb4:	6e e0       	ldi	r22, 0x0E	; 14
    7cb6:	78 e0       	ldi	r23, 0x08	; 8
    7cb8:	ca ed       	ldi	r28, 0xDA	; 218
    7cba:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1541
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    7cbc:	89 01       	movw	r16, r18
    7cbe:	06 52       	subi	r16, 0x26	; 38
    7cc0:	13 4f       	sbci	r17, 0xF3	; 243
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1538
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    7cc2:	fb 01       	movw	r30, r22
    7cc4:	94 91       	lpm	r25, Z
    7cc6:	89 17       	cp	r24, r25
    7cc8:	90 f4       	brcc	.+36     	; 0x7cee <MenuHistoryGetMenu(unsigned char*)+0xdc>
    7cca:	8c 9f       	mul	r24, r28
    7ccc:	a0 01       	movw	r20, r0
    7cce:	8d 9f       	mul	r24, r29
    7cd0:	50 0d       	add	r21, r0
    7cd2:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1541
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    7cd4:	fa 01       	movw	r30, r20
    7cd6:	eb 58       	subi	r30, 0x8B	; 139
    7cd8:	f7 4c       	sbci	r31, 0xC7	; 199
    7cda:	f4 90       	lpm	r15, Z
    7cdc:	f8 01       	movw	r30, r16
    7cde:	90 81       	ld	r25, Z
    7ce0:	9f 11       	cpse	r25, r15
    7ce2:	03 c0       	rjmp	.+6      	; 0x7cea <MenuHistoryGetMenu(unsigned char*)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1540
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
    7ce4:	40 55       	subi	r20, 0x50	; 80
    7ce6:	5a 4c       	sbci	r21, 0xCA	; 202
    7ce8:	b8 cf       	rjmp	.-144    	; 0x7c5a <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1538
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    7cea:	8f 5f       	subi	r24, 0xFF	; 255
    7cec:	ea cf       	rjmp	.-44     	; 0x7cc2 <MenuHistoryGetMenu(unsigned char*)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1548
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
    7cee:	90 e0       	ldi	r25, 0x00	; 0
    7cf0:	6f e0       	ldi	r22, 0x0F	; 15
    7cf2:	78 e0       	ldi	r23, 0x08	; 8
    7cf4:	ca ed       	ldi	r28, 0xDA	; 218
    7cf6:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1551
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    7cf8:	89 01       	movw	r16, r18
    7cfa:	06 52       	subi	r16, 0x26	; 38
    7cfc:	13 4f       	sbci	r17, 0xF3	; 243
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1548
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
    7cfe:	fb 01       	movw	r30, r22
    7d00:	84 91       	lpm	r24, Z
    7d02:	98 17       	cp	r25, r24
    7d04:	08 f0       	brcs	.+2      	; 0x7d08 <MenuHistoryGetMenu(unsigned char*)+0xf6>
    7d06:	ae cf       	rjmp	.-164    	; 0x7c64 <MenuHistoryGetMenu(unsigned char*)+0x52>
    7d08:	9c 9f       	mul	r25, r28
    7d0a:	a0 01       	movw	r20, r0
    7d0c:	9d 9f       	mul	r25, r29
    7d0e:	50 0d       	add	r21, r0
    7d10:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1551
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    7d12:	fa 01       	movw	r30, r20
    7d14:	ef 56       	subi	r30, 0x6F	; 111
    7d16:	f6 4b       	sbci	r31, 0xB6	; 182
    7d18:	f4 90       	lpm	r15, Z
    7d1a:	f8 01       	movw	r30, r16
    7d1c:	80 81       	ld	r24, Z
    7d1e:	8f 11       	cpse	r24, r15
    7d20:	03 c0       	rjmp	.+6      	; 0x7d28 <MenuHistoryGetMenu(unsigned char*)+0x116>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1550
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
  {
    menus = &Menu_All.ListMenu4[idx];
    7d22:	44 53       	subi	r20, 0x34	; 52
    7d24:	59 4b       	sbci	r21, 0xB9	; 185
    7d26:	99 cf       	rjmp	.-206    	; 0x7c5a <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1548
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
    7d28:	9f 5f       	subi	r25, 0xFF	; 255
    7d2a:	e9 cf       	rjmp	.-46     	; 0x7cfe <MenuHistoryGetMenu(unsigned char*)+0xec>

00007d2c <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:942




bool enable_redraw(uint8_t mask, uint8_t data)
{
    7d2c:	30 e0       	ldi	r19, 0x00	; 0
    7d2e:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:946
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
  {
    uint8_t v = (1 << i);
    7d30:	e1 e0       	ldi	r30, 0x01	; 1
    7d32:	f0 e0       	ldi	r31, 0x00	; 0
    7d34:	af 01       	movw	r20, r30
    7d36:	02 2e       	mov	r0, r18
    7d38:	01 c0       	rjmp	.+2      	; 0x7d3c <enable_redraw(unsigned char, unsigned char)+0x10>
    7d3a:	44 0f       	add	r20, r20
    7d3c:	0a 94       	dec	r0
    7d3e:	ea f7       	brpl	.-6      	; 0x7d3a <enable_redraw(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:947
    if ( (mask & v) != 0 )
    7d40:	98 2f       	mov	r25, r24
    7d42:	94 23       	and	r25, r20
    7d44:	11 f0       	breq	.+4      	; 0x7d4a <enable_redraw(unsigned char, unsigned char)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:948
      if ( (data & v) != 0)
    7d46:	46 23       	and	r20, r22
    7d48:	39 f4       	brne	.+14     	; 0x7d58 <enable_redraw(unsigned char, unsigned char)+0x2c>
    7d4a:	2f 5f       	subi	r18, 0xFF	; 255
    7d4c:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:944


bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
    7d4e:	28 30       	cpi	r18, 0x08	; 8
    7d50:	31 05       	cpc	r19, r1
    7d52:	81 f7       	brne	.-32     	; 0x7d34 <enable_redraw(unsigned char, unsigned char)+0x8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:943



bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
    7d54:	80 e0       	ldi	r24, 0x00	; 0
    7d56:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:950
  {
    uint8_t v = (1 << i);
    if ( (mask & v) != 0 )
      if ( (data & v) != 0)
      {
        ret = true;
    7d58:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:955
        break;
      }
  }
  return ret;
}
    7d5a:	08 95       	ret

00007d5c <display_enable_show(unsigned int, unsigned int, unsigned char)>:
_Z19display_enable_showjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:930
  return 0;
}
uint8_t display_enable_show(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 1;
}
    7d5c:	81 e0       	ldi	r24, 0x01	; 1
    7d5e:	08 95       	ret

00007d60 <returnnullfceargs(unsigned int, unsigned int, unsigned char)>:
_Z17returnnullfceargsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:926
void nullfce(uint16_t args1, uint16_t args2, uint8_t args3) {};
void nullfceargs(uint16_t args1, uint16_t args2, uint8_t args3) {};
uint8_t returnnullfceargs(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 0;
}
    7d60:	80 e0       	ldi	r24, 0x00	; 0
    7d62:	08 95       	ret

00007d64 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:57
  size_t size() const {
    return _size;
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    7d64:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:82
  void alignNextAlloc() {
    _size = round_size_up(_size);
  }

  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
    7d66:	86 81       	ldd	r24, Z+6	; 0x06
    7d68:	97 81       	ldd	r25, Z+7	; 0x07
    7d6a:	68 0f       	add	r22, r24
    7d6c:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    7d6e:	24 81       	ldd	r18, Z+4	; 0x04
    7d70:	35 81       	ldd	r19, Z+5	; 0x05
    7d72:	26 17       	cp	r18, r22
    7d74:	37 07       	cpc	r19, r23
    7d76:	38 f0       	brcs	.+14     	; 0x7d86 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:86
  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
  }

  void* doAlloc(size_t bytes) {
    void* p = &_buffer[_size];
    7d78:	22 81       	ldd	r18, Z+2	; 0x02
    7d7a:	33 81       	ldd	r19, Z+3	; 0x03
    7d7c:	82 0f       	add	r24, r18
    7d7e:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:87
    _size += bytes;
    7d80:	77 83       	std	Z+7, r23	; 0x07
    7d82:	66 83       	std	Z+6, r22	; 0x06
    7d84:	08 95       	ret
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    7d86:	90 e0       	ldi	r25, 0x00	; 0
    7d88:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:61
    return doAlloc(bytes);
  }
    7d8a:	08 95       	ret

00007d8c <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>:
_Z35display_element_set_string_del_charjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1706
  }
}

void display_element_set_string_del_char(uint16_t args1, uint16_t idx, uint8_t args3)
{
  uint8_t len = strlen(dialog_set_string);
    7d8c:	8a ed       	ldi	r24, 0xDA	; 218
    7d8e:	99 e0       	ldi	r25, 0x09	; 9
    7d90:	fc 01       	movw	r30, r24
    7d92:	01 90       	ld	r0, Z+
    7d94:	00 20       	and	r0, r0
    7d96:	e9 f7       	brne	.-6      	; 0x7d92 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x6>
    7d98:	cf 01       	movw	r24, r30
    7d9a:	8b 5d       	subi	r24, 0xDB	; 219
    7d9c:	99 40       	sbci	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1707
  if (len > 0)
    7d9e:	88 23       	and	r24, r24
    7da0:	29 f0       	breq	.+10     	; 0x7dac <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1708
    dialog_set_string[len - 1] = 0;
    7da2:	99 27       	eor	r25, r25
    7da4:	fc 01       	movw	r30, r24
    7da6:	e7 52       	subi	r30, 0x27	; 39
    7da8:	f6 4f       	sbci	r31, 0xF6	; 246
    7daa:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1709
}
    7dac:	08 95       	ret

00007dae <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1696
  strcpy(str, dialog_set_string);
}

void display_element_set_string_add_char(char znak)
{
  uint8_t len = strlen(dialog_set_string);
    7dae:	ea ed       	ldi	r30, 0xDA	; 218
    7db0:	f9 e0       	ldi	r31, 0x09	; 9
    7db2:	01 90       	ld	r0, Z+
    7db4:	00 20       	and	r0, r0
    7db6:	e9 f7       	brne	.-6      	; 0x7db2 <display_element_set_string_add_char(char)+0x4>
    7db8:	eb 5d       	subi	r30, 0xDB	; 219
    7dba:	f9 40       	sbci	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1697
  if (len  < dialog_set_string_max_length - 1)
    7dbc:	ff 27       	eor	r31, r31
    7dbe:	20 91 d9 09 	lds	r18, 0x09D9	; 0x8009d9 <dialog_set_string_max_length>
    7dc2:	21 50       	subi	r18, 0x01	; 1
    7dc4:	33 0b       	sbc	r19, r19
    7dc6:	e2 17       	cp	r30, r18
    7dc8:	f3 07       	cpc	r31, r19
    7dca:	24 f4       	brge	.+8      	; 0x7dd4 <display_element_set_string_add_char(char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1699
  {
    dialog_set_string[len] = znak;
    7dcc:	e6 52       	subi	r30, 0x26	; 38
    7dce:	f6 4f       	sbci	r31, 0xF6	; 246
    7dd0:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1700
    dialog_set_string[len + 1] = 0;
    7dd2:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1702
  }
}
    7dd4:	08 95       	ret

00007dd6 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_alfajjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1850
   args3 ... index prvku
*/
void click_keyboard_alfa(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    7dd6:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <__data_end>
    7dda:	91 11       	cpse	r25, r1
    7ddc:	07 c0       	rjmp	.+14     	; 0x7dec <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1851
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
    7dde:	e4 2f       	mov	r30, r20
    7de0:	f0 e0       	ldi	r31, 0x00	; 0
    7de2:	ea 50       	subi	r30, 0x0A	; 10
    7de4:	f5 4a       	sbci	r31, 0xA5	; 165
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1855
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    7de6:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1857
  ///
  display_element_set_string_add_char(znak);
    7de8:	0c 94 d7 3e 	jmp	0x7dae	; 0x7dae <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1852
void click_keyboard_alfa(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    7dec:	91 30       	cpi	r25, 0x01	; 1
    7dee:	29 f4       	brne	.+10     	; 0x7dfa <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1853
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
    7df0:	e4 2f       	mov	r30, r20
    7df2:	f0 e0       	ldi	r31, 0x00	; 0
    7df4:	e4 52       	subi	r30, 0x24	; 36
    7df6:	f5 4a       	sbci	r31, 0xA5	; 165
    7df8:	f6 cf       	rjmp	.-20     	; 0x7de6 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1854
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    7dfa:	92 30       	cpi	r25, 0x02	; 2
    7dfc:	a9 f7       	brne	.-22     	; 0x7de8 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1855
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    7dfe:	e4 2f       	mov	r30, r20
    7e00:	f0 e0       	ldi	r31, 0x00	; 0
    7e02:	ee 53       	subi	r30, 0x3E	; 62
    7e04:	f5 4a       	sbci	r31, 0xA5	; 165
    7e06:	ef cf       	rjmp	.-34     	; 0x7de6 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>

00007e08 <click_keyboard_number(unsigned int, unsigned int, unsigned char)>:
_Z21click_keyboard_numberjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1812
*/
void click_keyboard_number(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  znak = '0' + args3;
  if (args3 == 10) znak = '.';
    7e08:	8e e2       	ldi	r24, 0x2E	; 46
    7e0a:	4a 30       	cpi	r20, 0x0A	; 10
    7e0c:	29 f0       	breq	.+10     	; 0x7e18 <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1811
   args3 ... index prvku
*/
void click_keyboard_number(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  znak = '0' + args3;
    7e0e:	80 e3       	ldi	r24, 0x30	; 48
    7e10:	84 0f       	add	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1813
  if (args3 == 10) znak = '.';
  if (args3 == 11) znak = ':';
    7e12:	4b 30       	cpi	r20, 0x0B	; 11
    7e14:	09 f4       	brne	.+2      	; 0x7e18 <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0x10>
    7e16:	8a e3       	ldi	r24, 0x3A	; 58
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1814
  display_element_set_string_add_char(znak);
    7e18:	0c 94 d7 3e 	jmp	0x7dae	; 0x7dae <display_element_set_string_add_char(char)>

00007e1c <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
}

int EthernetClient::peek() {
    7e1c:	0f 93       	push	r16
    7e1e:	1f 93       	push	r17
    7e20:	cf 93       	push	r28
    7e22:	df 93       	push	r29
    7e24:	1f 92       	push	r1
    7e26:	cd b7       	in	r28, 0x3d	; 61
    7e28:	de b7       	in	r29, 0x3e	; 62
    7e2a:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    7e2c:	dc 01       	movw	r26, r24
    7e2e:	ed 91       	ld	r30, X+
    7e30:	fc 91       	ld	r31, X
    7e32:	00 84       	ldd	r0, Z+8	; 0x08
    7e34:	f1 85       	ldd	r31, Z+9	; 0x09
    7e36:	e0 2d       	mov	r30, r0
    7e38:	19 95       	eicall
    7e3a:	89 2b       	or	r24, r25
    7e3c:	91 f0       	breq	.+36     	; 0x7e62 <EthernetClient::peek()+0x46>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
    7e3e:	21 e0       	ldi	r18, 0x01	; 1
    7e40:	41 e0       	ldi	r20, 0x01	; 1
    7e42:	50 e0       	ldi	r21, 0x00	; 0
    7e44:	be 01       	movw	r22, r28
    7e46:	6f 5f       	subi	r22, 0xFF	; 255
    7e48:	7f 4f       	sbci	r23, 0xFF	; 255
    7e4a:	f8 01       	movw	r30, r16
    7e4c:	84 85       	ldd	r24, Z+12	; 0x0c
    7e4e:	0e 94 fa b6 	call	0x16df4	; 0x16df4 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
    return -1;
  ::peek(_sock, &b);
  return b;
    7e52:	89 81       	ldd	r24, Y+1	; 0x01
    7e54:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
    7e56:	0f 90       	pop	r0
    7e58:	df 91       	pop	r29
    7e5a:	cf 91       	pop	r28
    7e5c:	1f 91       	pop	r17
    7e5e:	0f 91       	pop	r16
    7e60:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    7e62:	8f ef       	ldi	r24, 0xFF	; 255
    7e64:	9f ef       	ldi	r25, 0xFF	; 255
    7e66:	f7 cf       	rjmp	.-18     	; 0x7e56 <EthernetClient::peek()+0x3a>

00007e68 <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
    7e68:	cf 93       	push	r28
    7e6a:	df 93       	push	r29
    7e6c:	1f 92       	push	r1
    7e6e:	cd b7       	in	r28, 0x3d	; 61
    7e70:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    7e72:	fc 01       	movw	r30, r24
    7e74:	21 8d       	ldd	r18, Z+25	; 0x19
    7e76:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
    7e78:	8f ef       	ldi	r24, 0xFF	; 255
    7e7a:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    7e7c:	23 2b       	or	r18, r19
    7e7e:	59 f0       	breq	.+22     	; 0x7e96 <EthernetUDP::peek()+0x2e>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
    7e80:	21 e0       	ldi	r18, 0x01	; 1
    7e82:	41 e0       	ldi	r20, 0x01	; 1
    7e84:	50 e0       	ldi	r21, 0x00	; 0
    7e86:	be 01       	movw	r22, r28
    7e88:	6f 5f       	subi	r22, 0xFF	; 255
    7e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    7e8c:	84 85       	ldd	r24, Z+12	; 0x0c
    7e8e:	0e 94 fa b6 	call	0x16df4	; 0x16df4 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
    return -1;
  ::peek(_sock, &b);
  return b;
    7e92:	89 81       	ldd	r24, Y+1	; 0x01
    7e94:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
    7e96:	0f 90       	pop	r0
    7e98:	df 91       	pop	r29
    7e9a:	cf 91       	pop	r28
    7e9c:	08 95       	ret

00007e9e <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    7e9e:	fc 01       	movw	r30, r24
    7ea0:	84 85       	ldd	r24, Z+12	; 0x0c
    7ea2:	88 30       	cpi	r24, 0x08	; 8
    7ea4:	11 f0       	breq	.+4      	; 0x7eaa <EthernetClient::available()+0xc>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
    7ea6:	0c 94 62 b7 	jmp	0x16ec4	; 0x16ec4 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
    7eaa:	90 e0       	ldi	r25, 0x00	; 0
    7eac:	80 e0       	ldi	r24, 0x00	; 0
    7eae:	08 95       	ret

00007eb0 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    7eb0:	af 92       	push	r10
    7eb2:	bf 92       	push	r11
    7eb4:	cf 92       	push	r12
    7eb6:	df 92       	push	r13
    7eb8:	ff 92       	push	r15
    7eba:	0f 93       	push	r16
    7ebc:	1f 93       	push	r17
    7ebe:	cf 93       	push	r28
    7ec0:	df 93       	push	r29
    7ec2:	8c 01       	movw	r16, r24
    7ec4:	5b 01       	movw	r10, r22
    7ec6:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    7ec8:	fc 01       	movw	r30, r24
    7eca:	c7 88       	ldd	r12, Z+23	; 0x17
    7ecc:	d0 8c       	ldd	r13, Z+24	; 0x18
    7ece:	f4 84       	ldd	r15, Z+12	; 0x0c
bufferData():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    7ed0:	8f 2d       	mov	r24, r15
    7ed2:	0e 94 be b7 	call	0x16f7c	; 0x16f7c <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
    7ed6:	8c 17       	cp	r24, r28
    7ed8:	9d 07       	cpc	r25, r29
    7eda:	20 f4       	brcc	.+8      	; 0x7ee4 <EthernetUDP::write(unsigned char const*, unsigned int)+0x34>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    7edc:	8f 2d       	mov	r24, r15
    7ede:	0e 94 be b7 	call	0x16f7c	; 0x16f7c <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
    7ee2:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    7ee4:	9e 01       	movw	r18, r28
    7ee6:	a5 01       	movw	r20, r10
    7ee8:	b6 01       	movw	r22, r12
    7eea:	8f 2d       	mov	r24, r15
    7eec:	0e 94 7e b7 	call	0x16efc	; 0x16efc <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
    7ef0:	f8 01       	movw	r30, r16
    7ef2:	87 89       	ldd	r24, Z+23	; 0x17
    7ef4:	90 8d       	ldd	r25, Z+24	; 0x18
    7ef6:	8c 0f       	add	r24, r28
    7ef8:	9d 1f       	adc	r25, r29
    7efa:	90 8f       	std	Z+24, r25	; 0x18
    7efc:	87 8b       	std	Z+23, r24	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
    7efe:	ce 01       	movw	r24, r28
    7f00:	df 91       	pop	r29
    7f02:	cf 91       	pop	r28
    7f04:	1f 91       	pop	r17
    7f06:	0f 91       	pop	r16
    7f08:	ff 90       	pop	r15
    7f0a:	df 90       	pop	r13
    7f0c:	cf 90       	pop	r12
    7f0e:	bf 90       	pop	r11
    7f10:	af 90       	pop	r10
    7f12:	08 95       	ret

00007f14 <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:15
    _ckp = 0;
    _order = MSBFIRST;
    digitalWrite(_sck, _ckp ? HIGH : LOW);
}

void SoftSPIB::begin() {
    7f14:	cf 93       	push	r28
    7f16:	df 93       	push	r29
    7f18:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:16
    pinMode(_mosi, OUTPUT);
    7f1a:	61 e0       	ldi	r22, 0x01	; 1
    7f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    7f1e:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:17
    pinMode(_miso, INPUT);
    7f22:	60 e0       	ldi	r22, 0x00	; 0
    7f24:	8b 81       	ldd	r24, Y+3	; 0x03
    7f26:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
    pinMode(_sck, OUTPUT);
    7f2a:	61 e0       	ldi	r22, 0x01	; 1
    7f2c:	8d 81       	ldd	r24, Y+5	; 0x05
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:19
}
    7f2e:	df 91       	pop	r29
    7f30:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
}

void SoftSPIB::begin() {
    pinMode(_mosi, OUTPUT);
    pinMode(_miso, INPUT);
    pinMode(_sck, OUTPUT);
    7f32:	0c 94 07 bb 	jmp	0x1760e	; 0x1760e <pinMode>

00007f36 <display_element_get_string(char*)>:
_Z26display_element_get_stringPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1691
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    7f36:	6a ed       	ldi	r22, 0xDA	; 218
    7f38:	79 e0       	ldi	r23, 0x09	; 9
    7f3a:	0c 94 a0 e1 	jmp	0x1c340	; 0x1c340 <strcpy>

00007f3e <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z65button_set_brightness_auto_shutdown_select_time_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5647
    ret = 1;
  return ret;
}

void button_set_brightness_auto_shutdown_select_time_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    7f3e:	0f 93       	push	r16
    7f40:	1f 93       	push	r17
    7f42:	48 2f       	mov	r20, r24
    7f44:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5648
  line2[0] = 0;
    7f46:	f8 01       	movw	r30, r16
    7f48:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5649
  if (args1 == 0)
    7f4a:	41 11       	cpse	r20, r1
    7f4c:	07 c0       	rjmp	.+14     	; 0x7f5c <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5650
    strcpy_P(line1, new_text_vypnuto);
    7f4e:	66 e1       	ldi	r22, 0x16	; 22
    7f50:	7f e5       	ldi	r23, 0x5F	; 95
    7f52:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5661
    strcpy(line1, "2 min");
  if (args1 == 4)
    strcpy(line1, "3 min");
  if (args1 == 5)
    strcpy(line1, "4 min");
}
    7f56:	1f 91       	pop	r17
    7f58:	0f 91       	pop	r16
    7f5a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5651
void button_set_brightness_auto_shutdown_select_time_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line2[0] = 0;
  if (args1 == 0)
    strcpy_P(line1, new_text_vypnuto);
  if (args1 == 1)
    7f5c:	41 30       	cpi	r20, 0x01	; 1
    7f5e:	29 f4       	brne	.+10     	; 0x7f6a <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5652
    strcpy(line1, "30 sec");
    7f60:	63 e0       	ldi	r22, 0x03	; 3
    7f62:	73 e0       	ldi	r23, 0x03	; 3
    7f64:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
    7f68:	f6 cf       	rjmp	.-20     	; 0x7f56 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5654
  if (args1 == 2)
    strcpy(line1, "1 min");
    7f6a:	6a e0       	ldi	r22, 0x0A	; 10
    7f6c:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5653
  line2[0] = 0;
  if (args1 == 0)
    strcpy_P(line1, new_text_vypnuto);
  if (args1 == 1)
    strcpy(line1, "30 sec");
  if (args1 == 2)
    7f6e:	42 30       	cpi	r20, 0x02	; 2
    7f70:	61 f0       	breq	.+24     	; 0x7f8a <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5656
    strcpy(line1, "1 min");
  if (args1 == 3)
    strcpy(line1, "2 min");
    7f72:	60 e1       	ldi	r22, 0x10	; 16
    7f74:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5655
    strcpy_P(line1, new_text_vypnuto);
  if (args1 == 1)
    strcpy(line1, "30 sec");
  if (args1 == 2)
    strcpy(line1, "1 min");
  if (args1 == 3)
    7f76:	43 30       	cpi	r20, 0x03	; 3
    7f78:	41 f0       	breq	.+16     	; 0x7f8a <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5658
    strcpy(line1, "2 min");
  if (args1 == 4)
    strcpy(line1, "3 min");
    7f7a:	66 e1       	ldi	r22, 0x16	; 22
    7f7c:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5657
    strcpy(line1, "30 sec");
  if (args1 == 2)
    strcpy(line1, "1 min");
  if (args1 == 3)
    strcpy(line1, "2 min");
  if (args1 == 4)
    7f7e:	44 30       	cpi	r20, 0x04	; 4
    7f80:	21 f0       	breq	.+8      	; 0x7f8a <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5659
    strcpy(line1, "3 min");
  if (args1 == 5)
    7f82:	45 30       	cpi	r20, 0x05	; 5
    7f84:	41 f7       	brne	.-48     	; 0x7f56 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5660
    strcpy(line1, "4 min");
    7f86:	6c e1       	ldi	r22, 0x1C	; 28
    7f88:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5661
}
    7f8a:	1f 91       	pop	r17
    7f8c:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5660
  if (args1 == 3)
    strcpy(line1, "2 min");
  if (args1 == 4)
    strcpy(line1, "3 min");
  if (args1 == 5)
    strcpy(line1, "4 min");
    7f8e:	0c 94 a0 e1 	jmp	0x1c340	; 0x1c340 <strcpy>

00007f92 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z44switch_brightness_automode_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5564
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 ) ret = 1;
  return ret;
}

void switch_brightness_automode_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    7f92:	0f 93       	push	r16
    7f94:	1f 93       	push	r17
    7f96:	cf 93       	push	r28
    7f98:	df 93       	push	r29
    7f9a:	00 d0       	rcall	.+0      	; 0x7f9c <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>
    7f9c:	00 d0       	rcall	.+0      	; 0x7f9e <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    7f9e:	1f 92       	push	r1
    7fa0:	1f 92       	push	r1
    7fa2:	cd b7       	in	r28, 0x3d	; 61
    7fa4:	de b7       	in	r29, 0x3e	; 62
    7fa6:	89 01       	movw	r16, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5566
  char str2[8];
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 )
    7fa8:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
    7fac:	87 ff       	sbrs	r24, 7
    7fae:	1a c0       	rjmp	.+52     	; 0x7fe4 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5568
  {
    strcpy_P(line1, new_text_jas_display_automat);
    7fb0:	66 ee       	ldi	r22, 0xE6	; 230
    7fb2:	7e e5       	ldi	r23, 0x5E	; 94
    7fb4:	c9 01       	movw	r24, r18
    7fb6:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5569
    itoa(brigthness_display_auto_values / 2, str2, 10);
    7fba:	80 91 72 0c 	lds	r24, 0x0C72	; 0x800c72 <brigthness_display_auto_values>
    7fbe:	86 95       	lsr	r24
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    7fc0:	4a e0       	ldi	r20, 0x0A	; 10
    7fc2:	be 01       	movw	r22, r28
    7fc4:	6f 5f       	subi	r22, 0xFF	; 255
    7fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    7fc8:	90 e0       	ldi	r25, 0x00	; 0
    7fca:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z44switch_brightness_automode_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5570
    strcat(line1, str2);
    7fce:	be 01       	movw	r22, r28
    7fd0:	6f 5f       	subi	r22, 0xFF	; 255
    7fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    7fd4:	c8 01       	movw	r24, r16
    7fd6:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5571
    strcat(line1, "%");
    7fda:	62 e2       	ldi	r22, 0x22	; 34
    7fdc:	73 e0       	ldi	r23, 0x03	; 3
    7fde:	c8 01       	movw	r24, r16
    7fe0:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5573
  }
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
    7fe4:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
    7fe8:	87 fd       	sbrc	r24, 7
    7fea:	05 c0       	rjmp	.+10     	; 0x7ff6 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5575
  {
    strcpy_P(line1, new_text_jas_display_manual);
    7fec:	65 ed       	ldi	r22, 0xD5	; 213
    7fee:	7e e5       	ldi	r23, 0x5E	; 94
    7ff0:	c8 01       	movw	r24, r16
    7ff2:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5577
  }
}
    7ff6:	28 96       	adiw	r28, 0x08	; 8
    7ff8:	0f b6       	in	r0, 0x3f	; 63
    7ffa:	f8 94       	cli
    7ffc:	de bf       	out	0x3e, r29	; 62
    7ffe:	0f be       	out	0x3f, r0	; 63
    8000:	cd bf       	out	0x3d, r28	; 61
    8002:	df 91       	pop	r29
    8004:	cf 91       	pop	r28
    8006:	1f 91       	pop	r17
    8008:	0f 91       	pop	r16
    800a:	08 95       	ret

0000800c <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5525



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void button_change_brightness_display_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    800c:	0f 93       	push	r16
    800e:	1f 93       	push	r17
    8010:	cf 93       	push	r28
    8012:	df 93       	push	r29
    8014:	00 d0       	rcall	.+0      	; 0x8016 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>
    8016:	00 d0       	rcall	.+0      	; 0x8018 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    8018:	1f 92       	push	r1
    801a:	1f 92       	push	r1
    801c:	cd b7       	in	r28, 0x3d	; 61
    801e:	de b7       	in	r29, 0x3e	; 62
    8020:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5527
  char str2[8];
  strcpy_P(line1, new_text_jas_display);
    8022:	6d eb       	ldi	r22, 0xBD	; 189
    8024:	7e e5       	ldi	r23, 0x5E	; 94
    8026:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5528
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 )
    802a:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
    802e:	87 ff       	sbrs	r24, 7
    8030:	1a c0       	rjmp	.+52     	; 0x8066 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5530
  {
    strcpy_P(line2, new_text_jas_display_automat);
    8032:	66 ee       	ldi	r22, 0xE6	; 230
    8034:	7e e5       	ldi	r23, 0x5E	; 94
    8036:	c8 01       	movw	r24, r16
    8038:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5531
    itoa(brigthness_display_auto_values / 2, str2, 10);
    803c:	80 91 72 0c 	lds	r24, 0x0C72	; 0x800c72 <brigthness_display_auto_values>
    8040:	86 95       	lsr	r24
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    8042:	4a e0       	ldi	r20, 0x0A	; 10
    8044:	be 01       	movw	r22, r28
    8046:	6f 5f       	subi	r22, 0xFF	; 255
    8048:	7f 4f       	sbci	r23, 0xFF	; 255
    804a:	90 e0       	ldi	r25, 0x00	; 0
    804c:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5532
    strcat(line2, str2);
    8050:	be 01       	movw	r22, r28
    8052:	6f 5f       	subi	r22, 0xFF	; 255
    8054:	7f 4f       	sbci	r23, 0xFF	; 255
    8056:	c8 01       	movw	r24, r16
    8058:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5533
    strcat(line2, "%");
    805c:	62 e2       	ldi	r22, 0x22	; 34
    805e:	73 e0       	ldi	r23, 0x03	; 3
    8060:	c8 01       	movw	r24, r16
    8062:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5535
  }
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
    8066:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
    806a:	87 fd       	sbrc	r24, 7
    806c:	23 c0       	rjmp	.+70     	; 0x80b4 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5537
  {
    strcpy_P(line2, new_text_jas_display_manual);
    806e:	65 ed       	ldi	r22, 0xD5	; 213
    8070:	7e e5       	ldi	r23, 0x5E	; 94
    8072:	c8 01       	movw	r24, r16
    8074:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5538
    itoa(brigthness_display_values, str2, 10);
    8078:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <brigthness_display_values>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    807c:	4a e0       	ldi	r20, 0x0A	; 10
    807e:	be 01       	movw	r22, r28
    8080:	6f 5f       	subi	r22, 0xFF	; 255
    8082:	7f 4f       	sbci	r23, 0xFF	; 255
    8084:	90 e0       	ldi	r25, 0x00	; 0
    8086:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5539
    strcat(line2, str2);
    808a:	be 01       	movw	r22, r28
    808c:	6f 5f       	subi	r22, 0xFF	; 255
    808e:	7f 4f       	sbci	r23, 0xFF	; 255
    8090:	c8 01       	movw	r24, r16
    8092:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5540
    strcat(line2, "%");
    8096:	62 e2       	ldi	r22, 0x22	; 34
    8098:	73 e0       	ldi	r23, 0x03	; 3
    809a:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5542
  }
}
    809c:	28 96       	adiw	r28, 0x08	; 8
    809e:	0f b6       	in	r0, 0x3f	; 63
    80a0:	f8 94       	cli
    80a2:	de bf       	out	0x3e, r29	; 62
    80a4:	0f be       	out	0x3f, r0	; 63
    80a6:	cd bf       	out	0x3d, r28	; 61
    80a8:	df 91       	pop	r29
    80aa:	cf 91       	pop	r28
    80ac:	1f 91       	pop	r17
    80ae:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5540
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
  {
    strcpy_P(line2, new_text_jas_display_manual);
    itoa(brigthness_display_values, str2, 10);
    strcat(line2, str2);
    strcat(line2, "%");
    80b0:	0c 94 81 e1 	jmp	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5542
  }
}
    80b4:	28 96       	adiw	r28, 0x08	; 8
    80b6:	0f b6       	in	r0, 0x3f	; 63
    80b8:	f8 94       	cli
    80ba:	de bf       	out	0x3e, r29	; 62
    80bc:	0f be       	out	0x3f, r0	; 63
    80be:	cd bf       	out	0x3d, r28	; 61
    80c0:	df 91       	pop	r29
    80c2:	cf 91       	pop	r28
    80c4:	1f 91       	pop	r17
    80c6:	0f 91       	pop	r16
    80c8:	08 95       	ret

000080ca <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.44():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:294
  template <typename TStringRef>
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    80ca:	0f 93       	push	r16
    80cc:	1f 93       	push	r17
    80ce:	cf 93       	push	r28
    80d0:	df 93       	push	r29
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
    if (!_data) return 0;
    80d2:	00 97       	sbiw	r24, 0x00	; 0
    80d4:	01 f1       	breq	.+64     	; 0x8116 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]+0x4c>
    80d6:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:296
    Internals::Slot* slot = _data->head;
    80d8:	fc 01       	movw	r30, r24
    80da:	c0 81       	ld	r28, Z
    80dc:	d1 81       	ldd	r29, Z+1	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:297
    while (slot) {
    80de:	20 97       	sbiw	r28, 0x00	; 0
    80e0:	d1 f0       	breq	.+52     	; 0x8116 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]+0x4c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:298
      if (Internals::makeString(key).equals(slot->key)) break;
    80e2:	6a 85       	ldd	r22, Y+10	; 0x0a
    80e4:	7b 85       	ldd	r23, Y+11	; 0x0b
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:16
 public:
  ZeroTerminatedRamString(const char* str) : _str(str) {}

  bool equals(const char* expected) const {
    const char* actual = reinterpret_cast<const char*>(_str);
    if (!actual || !expected) return actual == expected;
    80e6:	01 15       	cp	r16, r1
    80e8:	11 05       	cpc	r17, r1
    80ea:	19 f0       	breq	.+6      	; 0x80f2 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]+0x28>
    80ec:	61 15       	cp	r22, r1
    80ee:	71 05       	cpc	r23, r1
    80f0:	49 f4       	brne	.+18     	; 0x8104 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]+0x3a>
    80f2:	06 17       	cp	r16, r22
    80f4:	17 07       	cpc	r17, r23
    80f6:	59 f4       	brne	.+22     	; 0x810e <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.44():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:302
      slot = slot->next;
    }
    return slot;
  }
    80f8:	ce 01       	movw	r24, r28
    80fa:	df 91       	pop	r29
    80fc:	cf 91       	pop	r28
    80fe:	1f 91       	pop	r17
    8100:	0f 91       	pop	r16
    8102:	08 95       	ret
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:17
    return strcmp(actual, expected) == 0;
    8104:	c8 01       	movw	r24, r16
    8106:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    810a:	89 2b       	or	r24, r25
    810c:	a9 f3       	breq	.-22     	; 0x80f8 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.44():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:299
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    Internals::Slot* slot = _data->head;
    while (slot) {
      if (Internals::makeString(key).equals(slot->key)) break;
      slot = slot->next;
    810e:	0e 80       	ldd	r0, Y+6	; 0x06
    8110:	df 81       	ldd	r29, Y+7	; 0x07
    8112:	c0 2d       	mov	r28, r0
    8114:	e4 cf       	rjmp	.-56     	; 0x80de <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]+0x14>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    8116:	d0 e0       	ldi	r29, 0x00	; 0
    8118:	c0 e0       	ldi	r28, 0x00	; 0
    811a:	ee cf       	rjmp	.-36     	; 0x80f8 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]+0x2e>

0000811c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    811c:	4f 92       	push	r4
    811e:	5f 92       	push	r5
    8120:	6f 92       	push	r6
    8122:	7f 92       	push	r7
    8124:	8f 92       	push	r8
    8126:	9f 92       	push	r9
    8128:	af 92       	push	r10
    812a:	bf 92       	push	r11
    812c:	df 92       	push	r13
    812e:	ef 92       	push	r14
    8130:	ff 92       	push	r15
    8132:	0f 93       	push	r16
    8134:	1f 93       	push	r17
    8136:	cf 93       	push	r28
    8138:	df 93       	push	r29
    813a:	cd b7       	in	r28, 0x3d	; 61
    813c:	de b7       	in	r29, 0x3e	; 62
    813e:	c4 54       	subi	r28, 0x44	; 68
    8140:	d1 09       	sbc	r29, r1
    8142:	0f b6       	in	r0, 0x3f	; 63
    8144:	f8 94       	cli
    8146:	de bf       	out	0x3e, r29	; 62
    8148:	0f be       	out	0x3f, r0	; 63
    814a:	cd bf       	out	0x3d, r28	; 61
    814c:	8c 01       	movw	r16, r24
    814e:	4a 01       	movw	r8, r20
    8150:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    8152:	0e 94 b9 3b 	call	0x7772	; 0x7772 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    8156:	00 97       	sbiw	r24, 0x00	; 0
    8158:	09 f0       	breq	.+2      	; 0x815c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40>
    815a:	b0 c0       	rjmp	.+352    	; 0x82bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    815c:	c8 01       	movw	r24, r16
    815e:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    8162:	75 01       	movw	r14, r10
    8164:	8b 35       	cpi	r24, 0x5B	; 91
    8166:	49 f1       	breq	.+82     	; 0x81ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x9e>
    8168:	8b 37       	cpi	r24, 0x7B	; 123
    816a:	09 f4       	brne	.+2      	; 0x816e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x52>
    816c:	d2 c0       	rjmp	.+420    	; 0x8312 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1f6>
parseValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    816e:	c8 01       	movw	r24, r16
    8170:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    8174:	87 32       	cpi	r24, 0x27	; 39
    8176:	09 f4       	brne	.+2      	; 0x817a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e>
    8178:	eb c1       	rjmp	.+982    	; 0x8550 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
    817a:	82 32       	cpi	r24, 0x22	; 34
    817c:	09 f4       	brne	.+2      	; 0x8180 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64>
    817e:	e8 c1       	rjmp	.+976    	; 0x8550 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    8180:	c8 01       	movw	r24, r16
    8182:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    8186:	b8 2e       	mov	r11, r24
    8188:	ce 01       	movw	r24, r28
    818a:	01 96       	adiw	r24, 0x01	; 1
    818c:	4c 01       	movw	r8, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    818e:	d1 2c       	mov	r13, r1
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    8190:	8b 2d       	mov	r24, r11
    8192:	0e 94 3a 3b 	call	0x7674	; 0x7674 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    8196:	88 23       	and	r24, r24
    8198:	09 f4       	brne	.+2      	; 0x819c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x80>
    819a:	f5 c1       	rjmp	.+1002   	; 0x8586 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
    819c:	bf e3       	ldi	r27, 0x3F	; 63
    819e:	db 16       	cp	r13, r27
    81a0:	09 f4       	brne	.+2      	; 0x81a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    81a2:	f1 c1       	rjmp	.+994    	; 0x8586 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    81a4:	f8 01       	movw	r30, r16
    81a6:	10 86       	std	Z+8, r1	; 0x08
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    81a8:	d3 94       	inc	r13
    81aa:	d4 01       	movw	r26, r8
    81ac:	bd 92       	st	X+, r11
    81ae:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    81b0:	c8 01       	movw	r24, r16
    81b2:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    81b6:	b8 2e       	mov	r11, r24
    81b8:	eb cf       	rjmp	.-42     	; 0x8190 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74>
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    81ba:	d8 01       	movw	r26, r16
    81bc:	16 96       	adiw	r26, 0x06	; 6
    81be:	8c 91       	ld	r24, X
    81c0:	88 23       	and	r24, r24
    81c2:	09 f4       	brne	.+2      	; 0x81c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xaa>
    81c4:	c1 c1       	rjmp	.+898    	; 0x8548 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    81c6:	a1 14       	cp	r10, r1
    81c8:	b1 04       	cpc	r11, r1
    81ca:	09 f4       	brne	.+2      	; 0x81ce <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
    81cc:	2d c1       	rjmp	.+602    	; 0x8428 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    81ce:	88 e0       	ldi	r24, 0x08	; 8
    81d0:	90 e0       	ldi	r25, 0x00	; 0
    81d2:	f5 01       	movw	r30, r10
    81d4:	91 83       	std	Z+1, r25	; 0x01
    81d6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    81d8:	13 82       	std	Z+3, r1	; 0x03
    81da:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    81dc:	15 82       	std	Z+5, r1	; 0x05
    81de:	14 82       	std	Z+4, r1	; 0x04
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    81e0:	c8 01       	movw	r24, r16
    81e2:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    81e6:	8b 35       	cpi	r24, 0x5B	; 91
    81e8:	09 f0       	breq	.+2      	; 0x81ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xd0>
    81ea:	ef c0       	rjmp	.+478    	; 0x83ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    81ec:	d8 01       	movw	r26, r16
    81ee:	18 96       	adiw	r26, 0x08	; 8
    81f0:	1c 92       	st	X, r1
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    81f2:	c8 01       	movw	r24, r16
    81f4:	0e 94 b9 3b 	call	0x7772	; 0x7772 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    81f8:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    81fa:	89 2b       	or	r24, r25
    81fc:	09 f0       	breq	.+2      	; 0x8200 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xe4>
    81fe:	5d c0       	rjmp	.+186    	; 0x82ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    8200:	c8 01       	movw	r24, r16
    8202:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    8206:	8d 35       	cpi	r24, 0x5D	; 93
    8208:	09 f4       	brne	.+2      	; 0x820c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf0>
    820a:	55 c0       	rjmp	.+170    	; 0x82b6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19a>
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
  }

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    820c:	8c e0       	ldi	r24, 0x0C	; 12
    820e:	d8 2e       	mov	r13, r24
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    8210:	d4 01       	movw	r26, r8
    8212:	ed 91       	ld	r30, X+
    8214:	fc 91       	ld	r31, X
    8216:	01 90       	ld	r0, Z+
    8218:	f0 81       	ld	r31, Z
    821a:	e0 2d       	mov	r30, r0
    821c:	6c e0       	ldi	r22, 0x0C	; 12
    821e:	70 e0       	ldi	r23, 0x00	; 0
    8220:	c4 01       	movw	r24, r8
    8222:	19 95       	eicall
    8224:	fc 01       	movw	r30, r24
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
    8226:	00 97       	sbiw	r24, 0x00	; 0
    8228:	09 f4       	brne	.+2      	; 0x822c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x110>
    822a:	64 c0       	rjmp	.+200    	; 0x82f4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1d8>
    822c:	dc 01       	movw	r26, r24
    822e:	2d 2d       	mov	r18, r13
    8230:	1d 92       	st	X+, r1
    8232:	2a 95       	dec	r18
    8234:	e9 f7       	brne	.-6      	; 0x8230 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x114>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    8236:	11 82       	std	Z+1, r1	; 0x01
    8238:	10 82       	st	Z, r1
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:62
    if (!slot) return JsonVariant();

    slot->next = 0;

    if (_data->tail) {
    823a:	d7 01       	movw	r26, r14
    823c:	14 96       	adiw	r26, 0x04	; 4
    823e:	8d 91       	ld	r24, X+
    8240:	9c 91       	ld	r25, X
    8242:	15 97       	sbiw	r26, 0x05	; 5
    8244:	00 97       	sbiw	r24, 0x00	; 0
    8246:	09 f4       	brne	.+2      	; 0x824a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x12e>
    8248:	50 c0       	rjmp	.+160    	; 0x82ea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:63
      slot->prev = _data->tail;
    824a:	91 87       	std	Z+9, r25	; 0x09
    824c:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:64
      _data->tail->next = slot;
    824e:	14 96       	adiw	r26, 0x04	; 4
    8250:	8d 91       	ld	r24, X+
    8252:	9c 91       	ld	r25, X
    8254:	dc 01       	movw	r26, r24
    8256:	17 96       	adiw	r26, 0x07	; 7
    8258:	fc 93       	st	X, r31
    825a:	ee 93       	st	-X, r30
    825c:	16 97       	sbiw	r26, 0x06	; 6
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:65
      _data->tail = slot;
    825e:	d7 01       	movw	r26, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:69
    } else {
      slot->prev = 0;
      _data->head = slot;
      _data->tail = slot;
    8260:	15 96       	adiw	r26, 0x05	; 5
    8262:	fc 93       	st	X, r31
    8264:	ee 93       	st	-X, r30
    8266:	14 97       	sbiw	r26, 0x04	; 4
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:79
  return JsonArray(_memoryPool, _data->toArray());
    8268:	98 2d       	mov	r25, r8
    826a:	89 2d       	mov	r24, r9
    826c:	49 2e       	mov	r4, r25
    826e:	58 2e       	mov	r5, r24
    8270:	3f 01       	movw	r6, r30
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    8272:	ef 2b       	or	r30, r31
    8274:	09 f4       	brne	.+2      	; 0x8278 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x15c>
    8276:	d8 c0       	rjmp	.+432    	; 0x8428 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    8278:	f8 01       	movw	r30, r16
    827a:	86 81       	ldd	r24, Z+6	; 0x06
    827c:	81 50       	subi	r24, 0x01	; 1
    827e:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    8280:	b3 01       	movw	r22, r6
    8282:	a2 01       	movw	r20, r4
    8284:	c8 01       	movw	r24, r16
    8286:	0e 94 8e 40 	call	0x811c	; 0x811c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    828a:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    828c:	d8 01       	movw	r26, r16
    828e:	16 96       	adiw	r26, 0x06	; 6
    8290:	8c 91       	ld	r24, X
    8292:	16 97       	sbiw	r26, 0x06	; 6
    8294:	8f 5f       	subi	r24, 0xFF	; 255
    8296:	16 96       	adiw	r26, 0x06	; 6
    8298:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    829a:	a1 14       	cp	r10, r1
    829c:	b1 04       	cpc	r11, r1
    829e:	69 f4       	brne	.+26     	; 0x82ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    82a0:	c8 01       	movw	r24, r16
    82a2:	0e 94 b9 3b 	call	0x7772	; 0x7772 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    82a6:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    82a8:	89 2b       	or	r24, r25
    82aa:	39 f4       	brne	.+14     	; 0x82ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    82ac:	c8 01       	movw	r24, r16
    82ae:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    82b2:	8d 35       	cpi	r24, 0x5D	; 93
    82b4:	21 f5       	brne	.+72     	; 0x82fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1e2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    82b6:	f8 01       	movw	r30, r16
    82b8:	10 86       	std	Z+8, r1	; 0x08
    82ba:	c5 01       	movw	r24, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    82bc:	cc 5b       	subi	r28, 0xBC	; 188
    82be:	df 4f       	sbci	r29, 0xFF	; 255
    82c0:	0f b6       	in	r0, 0x3f	; 63
    82c2:	f8 94       	cli
    82c4:	de bf       	out	0x3e, r29	; 62
    82c6:	0f be       	out	0x3f, r0	; 63
    82c8:	cd bf       	out	0x3d, r28	; 61
    82ca:	df 91       	pop	r29
    82cc:	cf 91       	pop	r28
    82ce:	1f 91       	pop	r17
    82d0:	0f 91       	pop	r16
    82d2:	ff 90       	pop	r15
    82d4:	ef 90       	pop	r14
    82d6:	df 90       	pop	r13
    82d8:	bf 90       	pop	r11
    82da:	af 90       	pop	r10
    82dc:	9f 90       	pop	r9
    82de:	8f 90       	pop	r8
    82e0:	7f 90       	pop	r7
    82e2:	6f 90       	pop	r6
    82e4:	5f 90       	pop	r5
    82e6:	4f 90       	pop	r4
    82e8:	08 95       	ret
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:68
      slot->prev = _data->tail;
      _data->tail->next = slot;
      _data->tail = slot;
    } else {
      slot->prev = 0;
      _data->head = slot;
    82ea:	13 96       	adiw	r26, 0x03	; 3
    82ec:	fc 93       	st	X, r31
    82ee:	ee 93       	st	-X, r30
    82f0:	12 97       	sbiw	r26, 0x02	; 2
    82f2:	b6 cf       	rjmp	.-148    	; 0x8260 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x144>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:58

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    if (!slot) return JsonVariant();
    82f4:	f0 e0       	ldi	r31, 0x00	; 0
    82f6:	e0 e0       	ldi	r30, 0x00	; 0
    82f8:	90 e0       	ldi	r25, 0x00	; 0
    82fa:	80 e0       	ldi	r24, 0x00	; 0
    82fc:	b7 cf       	rjmp	.-146    	; 0x826c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x150>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    82fe:	c8 01       	movw	r24, r16
    8300:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    8304:	8c 32       	cpi	r24, 0x2C	; 44
    8306:	09 f0       	breq	.+2      	; 0x830a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ee>
    8308:	60 c0       	rjmp	.+192    	; 0x83ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    830a:	d8 01       	movw	r26, r16
    830c:	18 96       	adiw	r26, 0x08	; 8
    830e:	1c 92       	st	X, r1
    8310:	7f cf       	rjmp	.-258    	; 0x8210 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf4>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    8312:	f8 01       	movw	r30, r16
    8314:	86 81       	ldd	r24, Z+6	; 0x06
    8316:	88 23       	and	r24, r24
    8318:	09 f4       	brne	.+2      	; 0x831c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x200>
    831a:	16 c1       	rjmp	.+556    	; 0x8548 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    831c:	a1 14       	cp	r10, r1
    831e:	b1 04       	cpc	r11, r1
    8320:	09 f4       	brne	.+2      	; 0x8324 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x208>
    8322:	82 c0       	rjmp	.+260    	; 0x8428 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
    8324:	34 01       	movw	r6, r8
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    8326:	89 e0       	ldi	r24, 0x09	; 9
    8328:	90 e0       	ldi	r25, 0x00	; 0
    832a:	d5 01       	movw	r26, r10
    832c:	11 96       	adiw	r26, 0x01	; 1
    832e:	9c 93       	st	X, r25
    8330:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    8332:	13 96       	adiw	r26, 0x03	; 3
    8334:	1c 92       	st	X, r1
    8336:	1e 92       	st	-X, r1
    8338:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    833a:	15 96       	adiw	r26, 0x05	; 5
    833c:	1c 92       	st	X, r1
    833e:	1e 92       	st	-X, r1
    8340:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    8342:	45 01       	movw	r8, r10
    8344:	b2 e0       	ldi	r27, 0x02	; 2
    8346:	8b 0e       	add	r8, r27
    8348:	91 1c       	adc	r9, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    834a:	c8 01       	movw	r24, r16
    834c:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    8350:	8b 37       	cpi	r24, 0x7B	; 123
    8352:	d9 f5       	brne	.+118    	; 0x83ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    8354:	f8 01       	movw	r30, r16
    8356:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    8358:	c8 01       	movw	r24, r16
    835a:	0e 94 b9 3b 	call	0x7772	; 0x7772 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    835e:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    8360:	89 2b       	or	r24, r25
    8362:	09 f0       	breq	.+2      	; 0x8366 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x24a>
    8364:	aa cf       	rjmp	.-172    	; 0x82ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    8366:	c8 01       	movw	r24, r16
    8368:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    836c:	8d 37       	cpi	r24, 0x7D	; 125
    836e:	09 f4       	brne	.+2      	; 0x8372 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x256>
    8370:	9c c0       	rjmp	.+312    	; 0x84aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    8372:	bc e0       	ldi	r27, 0x0C	; 12
    8374:	5b 2e       	mov	r5, r27
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
    8376:	c8 01       	movw	r24, r16
    8378:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    837c:	87 32       	cpi	r24, 0x27	; 39
    837e:	79 f0       	breq	.+30     	; 0x839e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
    8380:	82 32       	cpi	r24, 0x22	; 34
    8382:	69 f0       	breq	.+26     	; 0x839e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    8384:	f8 01       	movw	r30, r16
    8386:	a4 80       	ldd	r10, Z+4	; 0x04
    8388:	b5 80       	ldd	r11, Z+5	; 0x05
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    838a:	c8 01       	movw	r24, r16
    838c:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    8390:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    8392:	81 11       	cpse	r24, r1
    8394:	1e c0       	rjmp	.+60     	; 0x83d2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2b6>
    8396:	aa 24       	eor	r10, r10
    8398:	a3 94       	inc	r10
    839a:	b1 2c       	mov	r11, r1
    839c:	8e cf       	rjmp	.-228    	; 0x82ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    839e:	be 01       	movw	r22, r28
    83a0:	6f 5f       	subi	r22, 0xFF	; 255
    83a2:	7f 4f       	sbci	r23, 0xFF	; 255
    83a4:	c8 01       	movw	r24, r16
    83a6:	0e 94 62 3b 	call	0x76c4	; 0x76c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    83aa:	5c 01       	movw	r10, r24
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
      if (err) return err;
    83ac:	89 2b       	or	r24, r25
    83ae:	09 f0       	breq	.+2      	; 0x83b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
    83b0:	84 cf       	rjmp	.-248    	; 0x82ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    83b2:	c8 01       	movw	r24, r16
    83b4:	0e 94 b9 3b 	call	0x7772	; 0x7772 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    83b8:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    83ba:	89 2b       	or	r24, r25
    83bc:	09 f0       	breq	.+2      	; 0x83c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2a4>
    83be:	7d cf       	rjmp	.-262    	; 0x82ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    83c0:	c8 01       	movw	r24, r16
    83c2:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    83c6:	8a 33       	cpi	r24, 0x3A	; 58
    83c8:	99 f1       	breq	.+102    	; 0x8430 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x314>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:113

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;
    83ca:	72 e0       	ldi	r23, 0x02	; 2
    83cc:	a7 2e       	mov	r10, r23
    83ce:	b1 2c       	mov	r11, r1
    83d0:	74 cf       	rjmp	.-280    	; 0x82ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    83d2:	0e 94 3a 3b 	call	0x7674	; 0x7674 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    83d6:	88 23       	and	r24, r24
    83d8:	c1 f3       	breq	.-16     	; 0x83ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    83da:	d8 01       	movw	r26, r16
    83dc:	18 96       	adiw	r26, 0x08	; 8
    83de:	1c 92       	st	X, r1
    83e0:	18 97       	sbiw	r26, 0x08	; 8
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    83e2:	14 96       	adiw	r26, 0x04	; 4
    83e4:	ed 91       	ld	r30, X+
    83e6:	fc 91       	ld	r31, X
    83e8:	15 97       	sbiw	r26, 0x05	; 5
    83ea:	cf 01       	movw	r24, r30
    83ec:	01 96       	adiw	r24, 0x01	; 1
    83ee:	15 96       	adiw	r26, 0x05	; 5
    83f0:	9c 93       	st	X, r25
    83f2:	8e 93       	st	-X, r24
    83f4:	14 97       	sbiw	r26, 0x04	; 4
    83f6:	d0 82       	st	Z, r13
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    83f8:	c8 01       	movw	r24, r16
    83fa:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    83fe:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    8400:	0e 94 3a 3b 	call	0x7674	; 0x7674 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    8404:	81 11       	cpse	r24, r1
    8406:	e9 cf       	rjmp	.-46     	; 0x83da <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2be>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    8408:	d8 01       	movw	r26, r16
    840a:	14 96       	adiw	r26, 0x04	; 4
    840c:	ed 91       	ld	r30, X+
    840e:	fc 91       	ld	r31, X
    8410:	15 97       	sbiw	r26, 0x05	; 5
    8412:	cf 01       	movw	r24, r30
    8414:	01 96       	adiw	r24, 0x01	; 1
    8416:	15 96       	adiw	r26, 0x05	; 5
    8418:	9c 93       	st	X, r25
    841a:	8e 93       	st	-X, r24
    841c:	14 97       	sbiw	r26, 0x04	; 4
    841e:	10 82       	st	Z, r1
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    8420:	ba 82       	std	Y+2, r11	; 0x02
    8422:	a9 82       	std	Y+1, r10	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    if (*result == NULL) return DeserializationError::NoMemory;
    8424:	ab 28       	or	r10, r11
    8426:	29 f6       	brne	.-118    	; 0x83b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    8428:	e3 e0       	ldi	r30, 0x03	; 3
    842a:	ae 2e       	mov	r10, r30
    842c:	b1 2c       	mov	r11, r1
    842e:	45 cf       	rjmp	.-374    	; 0x82ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    8430:	f8 01       	movw	r30, r16
    8432:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    8434:	a9 80       	ldd	r10, Y+1	; 0x01
    8436:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    8438:	a1 14       	cp	r10, r1
    843a:	b1 04       	cpc	r11, r1
    843c:	d1 f5       	brne	.+116    	; 0x84b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x396>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    843e:	90 e0       	ldi	r25, 0x00	; 0
    8440:	80 e0       	ldi	r24, 0x00	; 0
    8442:	30 e0       	ldi	r19, 0x00	; 0
    8444:	20 e0       	ldi	r18, 0x00	; 0
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    8446:	22 96       	adiw	r28, 0x02	; 2
    8448:	3f af       	std	Y+63, r19	; 0x3f
    844a:	22 97       	sbiw	r28, 0x02	; 2
    844c:	23 96       	adiw	r28, 0x03	; 3
    844e:	2f af       	std	Y+63, r18	; 0x3f
    8450:	23 97       	sbiw	r28, 0x03	; 3
    8452:	25 96       	adiw	r28, 0x05	; 5
    8454:	9f af       	std	Y+63, r25	; 0x3f
    8456:	8e af       	std	Y+62, r24	; 0x3e
    8458:	25 97       	sbiw	r28, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    845a:	89 2b       	or	r24, r25
    845c:	29 f3       	breq	.-54     	; 0x8428 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    845e:	d8 01       	movw	r26, r16
    8460:	16 96       	adiw	r26, 0x06	; 6
    8462:	8c 91       	ld	r24, X
    8464:	16 97       	sbiw	r26, 0x06	; 6
    8466:	81 50       	subi	r24, 0x01	; 1
    8468:	16 96       	adiw	r26, 0x06	; 6
    846a:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    846c:	25 96       	adiw	r28, 0x05	; 5
    846e:	4c ad       	ldd	r20, Y+60	; 0x3c
    8470:	5d ad       	ldd	r21, Y+61	; 0x3d
    8472:	6e ad       	ldd	r22, Y+62	; 0x3e
    8474:	7f ad       	ldd	r23, Y+63	; 0x3f
    8476:	25 97       	sbiw	r28, 0x05	; 5
    8478:	c8 01       	movw	r24, r16
    847a:	0e 94 8e 40 	call	0x811c	; 0x811c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    847e:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    8480:	f8 01       	movw	r30, r16
    8482:	86 81       	ldd	r24, Z+6	; 0x06
    8484:	8f 5f       	subi	r24, 0xFF	; 255
    8486:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    8488:	a1 14       	cp	r10, r1
    848a:	b1 04       	cpc	r11, r1
    848c:	09 f0       	breq	.+2      	; 0x8490 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x374>
    848e:	15 cf       	rjmp	.-470    	; 0x82ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    8490:	c8 01       	movw	r24, r16
    8492:	0e 94 b9 3b 	call	0x7772	; 0x7772 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    8496:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    8498:	89 2b       	or	r24, r25
    849a:	09 f0       	breq	.+2      	; 0x849e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x382>
    849c:	0e cf       	rjmp	.-484    	; 0x82ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    849e:	c8 01       	movw	r24, r16
    84a0:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    84a4:	8d 37       	cpi	r24, 0x7D	; 125
    84a6:	09 f0       	breq	.+2      	; 0x84aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
    84a8:	3f c0       	rjmp	.+126    	; 0x8528 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    84aa:	d8 01       	movw	r26, r16
    84ac:	18 96       	adiw	r26, 0x08	; 8
    84ae:	1c 92       	st	X, r1
    84b0:	04 cf       	rjmp	.-504    	; 0x82ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    84b2:	b5 01       	movw	r22, r10
    84b4:	c4 01       	movw	r24, r8
    84b6:	0e 94 65 40 	call	0x80ca	; 0x80ca <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    84ba:	00 97       	sbiw	r24, 0x00	; 0
    84bc:	49 f5       	brne	.+82     	; 0x8510 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3f4>
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
    84be:	d3 01       	movw	r26, r6
    84c0:	ed 91       	ld	r30, X+
    84c2:	fc 91       	ld	r31, X
    84c4:	01 90       	ld	r0, Z+
    84c6:	f0 81       	ld	r31, Z
    84c8:	e0 2d       	mov	r30, r0
    84ca:	6c e0       	ldi	r22, 0x0C	; 12
    84cc:	70 e0       	ldi	r23, 0x00	; 0
    84ce:	c3 01       	movw	r24, r6
    84d0:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    84d2:	00 97       	sbiw	r24, 0x00	; 0
    84d4:	09 f4       	brne	.+2      	; 0x84d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3bc>
    84d6:	b3 cf       	rjmp	.-154    	; 0x843e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x322>
    84d8:	fc 01       	movw	r30, r24
    84da:	25 2d       	mov	r18, r5
    84dc:	11 92       	st	Z+, r1
    84de:	2a 95       	dec	r18
    84e0:	e9 f7       	brne	.-6      	; 0x84dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3c0>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    84e2:	dc 01       	movw	r26, r24
    84e4:	1d 92       	st	X+, r1
    84e6:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    84e8:	d7 01       	movw	r26, r14
    84ea:	14 96       	adiw	r26, 0x04	; 4
    84ec:	ed 91       	ld	r30, X+
    84ee:	fc 91       	ld	r31, X
    84f0:	15 97       	sbiw	r26, 0x05	; 5
    84f2:	30 97       	sbiw	r30, 0x00	; 0
    84f4:	81 f0       	breq	.+32     	; 0x8516 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3fa>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    84f6:	dc 01       	movw	r26, r24
    84f8:	19 96       	adiw	r26, 0x09	; 9
    84fa:	fc 93       	st	X, r31
    84fc:	ee 93       	st	-X, r30
    84fe:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    8500:	97 83       	std	Z+7, r25	; 0x07
    8502:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    8504:	f7 01       	movw	r30, r14
    8506:	95 83       	std	Z+5, r25	; 0x05
    8508:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    850a:	fc 01       	movw	r30, r24
    850c:	b3 86       	std	Z+11, r11	; 0x0b
    850e:	a2 86       	std	Z+10, r10	; 0x0a
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    8510:	36 2d       	mov	r19, r6
    8512:	27 2d       	mov	r18, r7
    8514:	98 cf       	rjmp	.-208    	; 0x8446 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x32a>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    8516:	13 96       	adiw	r26, 0x03	; 3
    8518:	9c 93       	st	X, r25
    851a:	8e 93       	st	-X, r24
    851c:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    851e:	15 96       	adiw	r26, 0x05	; 5
    8520:	9c 93       	st	X, r25
    8522:	8e 93       	st	-X, r24
    8524:	14 97       	sbiw	r26, 0x04	; 4
    8526:	f1 cf       	rjmp	.-30     	; 0x850a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    8528:	c8 01       	movw	r24, r16
    852a:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    852e:	8c 32       	cpi	r24, 0x2C	; 44
    8530:	09 f0       	breq	.+2      	; 0x8534 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x418>
    8532:	4b cf       	rjmp	.-362    	; 0x83ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    8534:	f8 01       	movw	r30, r16
    8536:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    8538:	c8 01       	movw	r24, r16
    853a:	0e 94 b9 3b 	call	0x7772	; 0x7772 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    853e:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    8540:	89 2b       	or	r24, r25
    8542:	09 f4       	brne	.+2      	; 0x8546 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42a>
    8544:	18 cf       	rjmp	.-464    	; 0x8376 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x25a>
    8546:	b9 ce       	rjmp	.-654    	; 0x82ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    8548:	f5 e0       	ldi	r31, 0x05	; 5
    854a:	af 2e       	mov	r10, r31
    854c:	b1 2c       	mov	r11, r1
    854e:	b5 ce       	rjmp	.-662    	; 0x82ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.52():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    8550:	be 01       	movw	r22, r28
    8552:	6f 5f       	subi	r22, 0xFF	; 255
    8554:	7f 4f       	sbci	r23, 0xFF	; 255
    8556:	c8 01       	movw	r24, r16
    8558:	0e 94 62 3b 	call	0x76c4	; 0x76c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    855c:	00 97       	sbiw	r24, 0x00	; 0
    855e:	09 f0       	breq	.+2      	; 0x8562 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x446>
    8560:	ad ce       	rjmp	.-678    	; 0x82bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    8562:	e1 14       	cp	r14, r1
    8564:	f1 04       	cpc	r15, r1
    8566:	61 f0       	breq	.+24     	; 0x8580 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.52():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    8568:	89 81       	ldd	r24, Y+1	; 0x01
    856a:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    856c:	23 e0       	ldi	r18, 0x03	; 3
    856e:	30 e0       	ldi	r19, 0x00	; 0
    8570:	d7 01       	movw	r26, r14
    8572:	11 96       	adiw	r26, 0x01	; 1
    8574:	3c 93       	st	X, r19
    8576:	2e 93       	st	-X, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    8578:	13 96       	adiw	r26, 0x03	; 3
    857a:	9c 93       	st	X, r25
    857c:	8e 93       	st	-X, r24
    857e:	12 97       	sbiw	r26, 0x02	; 2
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    8580:	90 e0       	ldi	r25, 0x00	; 0
    8582:	80 e0       	ldi	r24, 0x00	; 0
    8584:	9b ce       	rjmp	.-714    	; 0x82bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    8586:	e1 e0       	ldi	r30, 0x01	; 1
    8588:	f0 e0       	ldi	r31, 0x00	; 0
    858a:	ec 0f       	add	r30, r28
    858c:	fd 1f       	adc	r31, r29
    858e:	ed 0d       	add	r30, r13
    8590:	f1 1d       	adc	r31, r1
    8592:	10 82       	st	Z, r1
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    8594:	19 81       	ldd	r17, Y+1	; 0x01
    8596:	11 23       	and	r17, r17
    8598:	09 f4       	brne	.+2      	; 0x859c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x480>
    859a:	51 c0       	rjmp	.+162    	; 0x863e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    859c:	fe 01       	movw	r30, r28
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    859e:	1d 32       	cpi	r17, 0x2D	; 45
    85a0:	71 f1       	breq	.+92     	; 0x85fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    85a2:	1b 32       	cpi	r17, 0x2B	; 43
    85a4:	61 f1       	breq	.+88     	; 0x85fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    85a6:	31 96       	adiw	r30, 0x01	; 1
isInteger():
  while (isdigit(*s)) s++;
    85a8:	81 91       	ld	r24, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    85aa:	90 ed       	ldi	r25, 0xD0	; 208
    85ac:	98 0f       	add	r25, r24
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    85ae:	9a 30       	cpi	r25, 0x0A	; 10
    85b0:	d8 f3       	brcs	.-10     	; 0x85a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    85b2:	81 11       	cpse	r24, r1
    85b4:	44 c0       	rjmp	.+136    	; 0x863e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    85b6:	14 37       	cpi	r17, 0x74	; 116
    85b8:	09 f4       	brne	.+2      	; 0x85bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4a0>
    85ba:	dd c1       	rjmp	.+954    	; 0x8976 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x85a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    85bc:	1b 32       	cpi	r17, 0x2B	; 43
    85be:	09 f1       	breq	.+66     	; 0x8602 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e6>
    85c0:	1d 32       	cpi	r17, 0x2D	; 45
    85c2:	19 f1       	breq	.+70     	; 0x860a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    85c4:	10 e0       	ldi	r17, 0x00	; 0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    85c6:	fe 01       	movw	r30, r28
    85c8:	31 96       	adiw	r30, 0x01	; 1
    85ca:	20 e0       	ldi	r18, 0x00	; 0
    85cc:	30 e0       	ldi	r19, 0x00	; 0
    85ce:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    85d0:	01 91       	ld	r16, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    85d2:	80 ed       	ldi	r24, 0xD0	; 208
    85d4:	80 0f       	add	r24, r16
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    85d6:	8a 30       	cpi	r24, 0x0A	; 10
    85d8:	d0 f4       	brcc	.+52     	; 0x860e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f2>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    85da:	aa e0       	ldi	r26, 0x0A	; 10
    85dc:	b0 e0       	ldi	r27, 0x00	; 0
    85de:	0e 94 4a df 	call	0x1be94	; 0x1be94 <__muluhisi3>
    85e2:	20 2f       	mov	r18, r16
    85e4:	00 0f       	add	r16, r16
    85e6:	33 0b       	sbc	r19, r19
    85e8:	20 53       	subi	r18, 0x30	; 48
    85ea:	31 09       	sbc	r19, r1
    85ec:	03 2e       	mov	r0, r19
    85ee:	00 0c       	add	r0, r0
    85f0:	44 0b       	sbc	r20, r20
    85f2:	55 0b       	sbc	r21, r21
    85f4:	26 0f       	add	r18, r22
    85f6:	37 1f       	adc	r19, r23
    85f8:	48 1f       	adc	r20, r24
    85fa:	59 1f       	adc	r21, r25
    85fc:	e9 cf       	rjmp	.-46     	; 0x85d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4b4>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
  if (issign(*s)) s++;
    85fe:	32 96       	adiw	r30, 0x02	; 2
    8600:	d3 cf       	rjmp	.-90     	; 0x85a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    8602:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26

  switch (*s) {
    case '-':
      negative_result = true;
      s++;
    8604:	fe 01       	movw	r30, r28
    8606:	32 96       	adiw	r30, 0x02	; 2
    8608:	e0 cf       	rjmp	.-64     	; 0x85ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    860a:	11 e0       	ldi	r17, 0x01	; 1
    860c:	fb cf       	rjmp	.-10     	; 0x8604 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e8>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    860e:	11 23       	and	r17, r17
    8610:	09 f4       	brne	.+2      	; 0x8614 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f8>
    8612:	b5 c1       	rjmp	.+874    	; 0x897e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x862>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    8614:	e1 14       	cp	r14, r1
    8616:	f1 04       	cpc	r15, r1
    8618:	09 f4       	brne	.+2      	; 0x861c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x500>
    861a:	b2 cf       	rjmp	.-156    	; 0x8580 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    861c:	87 e0       	ldi	r24, 0x07	; 7
    861e:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    8620:	21 15       	cp	r18, r1
    8622:	31 05       	cpc	r19, r1
    8624:	41 05       	cpc	r20, r1
    8626:	51 05       	cpc	r21, r1
    8628:	11 f4       	brne	.+4      	; 0x862e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x512>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    862a:	86 e0       	ldi	r24, 0x06	; 6
    862c:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    862e:	f7 01       	movw	r30, r14
    8630:	91 83       	std	Z+1, r25	; 0x01
    8632:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    8634:	22 83       	std	Z+2, r18	; 0x02
    8636:	33 83       	std	Z+3, r19	; 0x03
    8638:	44 83       	std	Z+4, r20	; 0x04
    863a:	55 83       	std	Z+5, r21	; 0x05
    863c:	a1 cf       	rjmp	.-190    	; 0x8580 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:16
namespace Internals {

inline bool isFloat(const char* s) {
  if (!s) return false;

  if (!strcmp(s, "NaN")) return true;
    863e:	64 e2       	ldi	r22, 0x24	; 36
    8640:	73 e0       	ldi	r23, 0x03	; 3
    8642:	ce 01       	movw	r24, r28
    8644:	01 96       	adiw	r24, 0x01	; 1
    8646:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    864a:	89 2b       	or	r24, r25
    864c:	09 f4       	brne	.+2      	; 0x8650 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x534>
    864e:	46 c0       	rjmp	.+140    	; 0x86dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
  if (issign(*s)) s++;
    8650:	5e 01       	movw	r10, r28
    8652:	f2 e0       	ldi	r31, 0x02	; 2
    8654:	af 0e       	add	r10, r31
    8656:	b1 1c       	adc	r11, r1
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    8658:	1d 32       	cpi	r17, 0x2D	; 45
    865a:	49 f0       	breq	.+18     	; 0x866e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
    865c:	fe 01       	movw	r30, r28
    865e:	31 96       	adiw	r30, 0x01	; 1
    8660:	5f 01       	movw	r10, r30
    8662:	1b 32       	cpi	r17, 0x2B	; 43
    8664:	21 f4       	brne	.+8      	; 0x866e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
    8666:	5e 01       	movw	r10, r28
    8668:	22 e0       	ldi	r18, 0x02	; 2
    866a:	a2 0e       	add	r10, r18
    866c:	b1 1c       	adc	r11, r1
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:18
  if (!strcmp(s, "Infinity")) return true;
    866e:	68 e2       	ldi	r22, 0x28	; 40
    8670:	73 e0       	ldi	r23, 0x03	; 3
    8672:	c5 01       	movw	r24, r10
    8674:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    8678:	89 2b       	or	r24, r25
    867a:	81 f1       	breq	.+96     	; 0x86dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:19
  if (*s == '\0') return false;
    867c:	d5 01       	movw	r26, r10
    867e:	8c 91       	ld	r24, X
    8680:	88 23       	and	r24, r24
    8682:	09 f4       	brne	.+2      	; 0x8686 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
    8684:	3b c1       	rjmp	.+630    	; 0x88fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    8686:	fd 01       	movw	r30, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21

  while (isdigit(*s)) s++;
    8688:	8d 91       	ld	r24, X+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    868a:	90 ed       	ldi	r25, 0xD0	; 208
    868c:	98 0f       	add	r25, r24
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21
    868e:	9a 30       	cpi	r25, 0x0A	; 10
    8690:	d0 f3       	brcs	.-12     	; 0x8686 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:23

  if (*s == '.') {
    8692:	8e 32       	cpi	r24, 0x2E	; 46
    8694:	41 f4       	brne	.+16     	; 0x86a6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:24
    s++;
    8696:	9d 01       	movw	r18, r26
    8698:	f9 01       	movw	r30, r18
    869a:	2f 5f       	subi	r18, 0xFF	; 255
    869c:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    869e:	80 81       	ld	r24, Z
    86a0:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:25
    while (isdigit(*s)) s++;
    86a2:	8a 30       	cpi	r24, 0x0A	; 10
    86a4:	c8 f3       	brcs	.-14     	; 0x8698 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x57c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:28
  }

  if (*s == 'e' || *s == 'E') {
    86a6:	80 81       	ld	r24, Z
    86a8:	8f 7d       	andi	r24, 0xDF	; 223
    86aa:	85 34       	cpi	r24, 0x45	; 69
    86ac:	a1 f4       	brne	.+40     	; 0x86d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    s++;
    if (issign(*s)) s++;
    86ae:	81 81       	ldd	r24, Z+1	; 0x01
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    86b0:	8d 32       	cpi	r24, 0x2D	; 45
    86b2:	09 f4       	brne	.+2      	; 0x86b6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x59a>
    86b4:	57 c0       	rjmp	.+174    	; 0x8764 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
    86b6:	8b 32       	cpi	r24, 0x2B	; 43
    86b8:	09 f4       	brne	.+2      	; 0x86bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a0>
    86ba:	54 c0       	rjmp	.+168    	; 0x8764 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:29
    s++;
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    86bc:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    86be:	80 81       	ld	r24, Z
    86c0:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:31
    if (issign(*s)) s++;
    if (!isdigit(*s)) return false;
    86c2:	8a 30       	cpi	r24, 0x0A	; 10
    86c4:	08 f0       	brcs	.+2      	; 0x86c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ac>
    86c6:	1a c1       	rjmp	.+564    	; 0x88fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    86c8:	cf 01       	movw	r24, r30
    86ca:	fc 01       	movw	r30, r24
    86cc:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    86ce:	20 81       	ld	r18, Z
    86d0:	20 53       	subi	r18, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:32
    while (isdigit(*s)) s++;
    86d2:	2a 30       	cpi	r18, 0x0A	; 10
    86d4:	d0 f3       	brcs	.-12     	; 0x86ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ae>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    86d6:	80 81       	ld	r24, Z
    86d8:	81 11       	cpse	r24, r1
    86da:	10 c1       	rjmp	.+544    	; 0x88fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    86dc:	1b 32       	cpi	r17, 0x2B	; 43
    86de:	09 f4       	brne	.+2      	; 0x86e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c6>
    86e0:	43 c0       	rjmp	.+134    	; 0x8768 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64c>
    86e2:	1d 32       	cpi	r17, 0x2D	; 45
    86e4:	09 f0       	breq	.+2      	; 0x86e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5cc>
    86e6:	47 c0       	rjmp	.+142    	; 0x8776 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x65a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    86e8:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    86ea:	dd 24       	eor	r13, r13
    86ec:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
      s++;
    86ee:	5e 01       	movw	r10, r28
    86f0:	b2 e0       	ldi	r27, 0x02	; 2
    86f2:	ab 0e       	add	r10, r27
    86f4:	b1 1c       	adc	r11, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    86f6:	60 e0       	ldi	r22, 0x00	; 0
    86f8:	70 e0       	ldi	r23, 0x00	; 0
    86fa:	80 e8       	ldi	r24, 0x80	; 128
    86fc:	9f e3       	ldi	r25, 0x3F	; 63
parseFloat():
    86fe:	14 37       	cpi	r17, 0x74	; 116
    8700:	09 f4       	brne	.+2      	; 0x8704 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e8>
    8702:	d2 c0       	rjmp	.+420    	; 0x88a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    8704:	1f 7d       	andi	r17, 0xDF	; 223
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    8706:	60 e0       	ldi	r22, 0x00	; 0
    8708:	70 e0       	ldi	r23, 0x00	; 0
    870a:	80 ec       	ldi	r24, 0xC0	; 192
    870c:	9f e7       	ldi	r25, 0x7F	; 127
parseFloat():
    870e:	1e 34       	cpi	r17, 0x4E	; 78
    8710:	09 f4       	brne	.+2      	; 0x8714 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5f8>
    8712:	ca c0       	rjmp	.+404    	; 0x88a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35
  if (*s == 'i' || *s == 'I')
    8714:	19 34       	cpi	r17, 0x49	; 73
    8716:	09 f4       	brne	.+2      	; 0x871a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5fe>
    8718:	97 c0       	rjmp	.+302    	; 0x8848 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    871a:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    871c:	20 e0       	ldi	r18, 0x00	; 0
    871e:	30 e0       	ldi	r19, 0x00	; 0
    8720:	a9 01       	movw	r20, r18
    8722:	f5 01       	movw	r30, r10
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    8724:	d5 01       	movw	r26, r10
    8726:	1d 91       	ld	r17, X+
    8728:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    872a:	80 ed       	ldi	r24, 0xD0	; 208
    872c:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    872e:	8a 30       	cpi	r24, 0x0A	; 10
    8730:	48 f5       	brcc	.+82     	; 0x8784 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x668>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    8732:	2c 3c       	cpi	r18, 0xCC	; 204
    8734:	bc ec       	ldi	r27, 0xCC	; 204
    8736:	3b 07       	cpc	r19, r27
    8738:	bc e0       	ldi	r27, 0x0C	; 12
    873a:	4b 07       	cpc	r20, r27
    873c:	51 05       	cpc	r21, r1
    873e:	04 f5       	brge	.+64     	; 0x8780 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x664>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    8740:	aa e0       	ldi	r26, 0x0A	; 10
    8742:	b0 e0       	ldi	r27, 0x00	; 0
    8744:	0e 94 4a df 	call	0x1be94	; 0x1be94 <__muluhisi3>
    8748:	21 2f       	mov	r18, r17
    874a:	11 0f       	add	r17, r17
    874c:	33 0b       	sbc	r19, r19
    874e:	20 53       	subi	r18, 0x30	; 48
    8750:	31 09       	sbc	r19, r1
    8752:	03 2e       	mov	r0, r19
    8754:	00 0c       	add	r0, r0
    8756:	44 0b       	sbc	r20, r20
    8758:	55 0b       	sbc	r21, r21
    875a:	26 0f       	add	r18, r22
    875c:	37 1f       	adc	r19, r23
    875e:	48 1f       	adc	r20, r24
    8760:	59 1f       	adc	r21, r25
    8762:	df cf       	rjmp	.-66     	; 0x8722 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    if (issign(*s)) s++;
    8764:	32 96       	adiw	r30, 0x02	; 2
    8766:	ab cf       	rjmp	.-170    	; 0x86be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    8768:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    876a:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    876c:	5e 01       	movw	r10, r28
    876e:	e2 e0       	ldi	r30, 0x02	; 2
    8770:	ae 0e       	add	r10, r30
    8772:	b1 1c       	adc	r11, r1
    8774:	c0 cf       	rjmp	.-128    	; 0x86f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    8776:	d1 2c       	mov	r13, r1
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  switch (*s) {
    8778:	ce 01       	movw	r24, r28
    877a:	01 96       	adiw	r24, 0x01	; 1
    877c:	5c 01       	movw	r10, r24
    877e:	bb cf       	rjmp	.-138    	; 0x86f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    8780:	0f 5f       	subi	r16, 0xFF	; 255
    8782:	cf cf       	rjmp	.-98     	; 0x8722 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    s++;
  }

  if (*s == '.') {
    8784:	1e 32       	cpi	r17, 0x2E	; 46
    8786:	31 f5       	brne	.+76     	; 0x87d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    8788:	5f 01       	movw	r10, r30
    878a:	8f ef       	ldi	r24, 0xFF	; 255
    878c:	a8 1a       	sub	r10, r24
    878e:	b8 0a       	sbc	r11, r24
    8790:	f5 01       	movw	r30, r10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    8792:	d5 01       	movw	r26, r10
    8794:	1d 91       	ld	r17, X+
    8796:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    8798:	80 ed       	ldi	r24, 0xD0	; 208
    879a:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    879c:	8a 30       	cpi	r24, 0x0A	; 10
    879e:	d0 f4       	brcc	.+52     	; 0x87d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    87a0:	2c 3c       	cpi	r18, 0xCC	; 204
    87a2:	bc ec       	ldi	r27, 0xCC	; 204
    87a4:	3b 07       	cpc	r19, r27
    87a6:	bc e0       	ldi	r27, 0x0C	; 12
    87a8:	4b 07       	cpc	r20, r27
    87aa:	51 05       	cpc	r21, r1
    87ac:	8c f7       	brge	.-30     	; 0x8790 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    87ae:	aa e0       	ldi	r26, 0x0A	; 10
    87b0:	b0 e0       	ldi	r27, 0x00	; 0
    87b2:	0e 94 4a df 	call	0x1be94	; 0x1be94 <__muluhisi3>
    87b6:	21 2f       	mov	r18, r17
    87b8:	11 0f       	add	r17, r17
    87ba:	33 0b       	sbc	r19, r19
    87bc:	20 53       	subi	r18, 0x30	; 48
    87be:	31 09       	sbc	r19, r1
    87c0:	03 2e       	mov	r0, r19
    87c2:	00 0c       	add	r0, r0
    87c4:	44 0b       	sbc	r20, r20
    87c6:	55 0b       	sbc	r21, r21
    87c8:	26 0f       	add	r18, r22
    87ca:	37 1f       	adc	r19, r23
    87cc:	48 1f       	adc	r20, r24
    87ce:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    87d0:	01 50       	subi	r16, 0x01	; 1
    87d2:	de cf       	rjmp	.-68     	; 0x8790 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    87d4:	80 81       	ld	r24, Z
    87d6:	8f 7d       	andi	r24, 0xDF	; 223
    87d8:	00 2e       	mov	r0, r16
    87da:	00 0c       	add	r0, r0
    87dc:	11 0b       	sbc	r17, r17
    87de:	85 34       	cpi	r24, 0x45	; 69
    87e0:	09 f0       	breq	.+2      	; 0x87e4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6c8>
    87e2:	70 c0       	rjmp	.+224    	; 0x88c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    87e4:	81 81       	ldd	r24, Z+1	; 0x01
    87e6:	8d 32       	cpi	r24, 0x2D	; 45
    87e8:	41 f5       	brne	.+80     	; 0x883a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x71e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    87ea:	32 96       	adiw	r30, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    87ec:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    87ee:	90 e0       	ldi	r25, 0x00	; 0
    87f0:	80 e0       	ldi	r24, 0x00	; 0
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    87f2:	6a e0       	ldi	r22, 0x0A	; 10
    87f4:	b6 2e       	mov	r11, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    87f6:	a1 91       	ld	r26, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    87f8:	60 ed       	ldi	r22, 0xD0	; 208
    87fa:	6a 0f       	add	r22, r26
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    87fc:	6a 30       	cpi	r22, 0x0A	; 10
    87fe:	78 f5       	brcc	.+94     	; 0x885e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x742>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    8800:	b8 9e       	mul	r11, r24
    8802:	b0 01       	movw	r22, r0
    8804:	b9 9e       	mul	r11, r25
    8806:	70 0d       	add	r23, r0
    8808:	11 24       	eor	r1, r1
    880a:	8a 2f       	mov	r24, r26
    880c:	aa 0f       	add	r26, r26
    880e:	99 0b       	sbc	r25, r25
    8810:	c0 97       	sbiw	r24, 0x30	; 48
    8812:	86 0f       	add	r24, r22
    8814:	97 1f       	adc	r25, r23
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    8816:	b8 01       	movw	r22, r16
    8818:	68 0f       	add	r22, r24
    881a:	79 1f       	adc	r23, r25
    881c:	67 32       	cpi	r22, 0x27	; 39
    881e:	71 05       	cpc	r23, r1
    8820:	54 f3       	brlt	.-44     	; 0x87f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    8822:	bb 23       	and	r27, r27
    8824:	89 f0       	breq	.+34     	; 0x8848 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    8826:	60 e0       	ldi	r22, 0x00	; 0
    8828:	70 e0       	ldi	r23, 0x00	; 0
    882a:	80 e0       	ldi	r24, 0x00	; 0
    882c:	90 e8       	ldi	r25, 0x80	; 128
parseFloat():
    882e:	d1 10       	cpse	r13, r1
    8830:	3b c0       	rjmp	.+118    	; 0x88a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    8832:	60 e0       	ldi	r22, 0x00	; 0
    8834:	70 e0       	ldi	r23, 0x00	; 0
    8836:	cb 01       	movw	r24, r22
    8838:	37 c0       	rjmp	.+110    	; 0x88a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    883a:	8b 32       	cpi	r24, 0x2B	; 43
    883c:	19 f0       	breq	.+6      	; 0x8844 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x728>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    883e:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    8840:	b0 e0       	ldi	r27, 0x00	; 0
    8842:	d5 cf       	rjmp	.-86     	; 0x87ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6d2>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    8844:	32 96       	adiw	r30, 0x02	; 2
    8846:	fc cf       	rjmp	.-8      	; 0x8840 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x724>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    8848:	60 e0       	ldi	r22, 0x00	; 0
    884a:	70 e0       	ldi	r23, 0x00	; 0
    884c:	80 e8       	ldi	r24, 0x80	; 128
    884e:	9f ef       	ldi	r25, 0xFF	; 255
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    8850:	d1 10       	cpse	r13, r1
    8852:	2a c0       	rjmp	.+84     	; 0x88a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    8854:	60 e0       	ldi	r22, 0x00	; 0
    8856:	70 e0       	ldi	r23, 0x00	; 0
    8858:	80 e8       	ldi	r24, 0x80	; 128
    885a:	9f e7       	ldi	r25, 0x7F	; 127
    885c:	25 c0       	rjmp	.+74     	; 0x88a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    885e:	bb 23       	and	r27, r27
    8860:	19 f0       	breq	.+6      	; 0x8868 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
    8862:	91 95       	neg	r25
    8864:	81 95       	neg	r24
    8866:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    8868:	08 0f       	add	r16, r24
    886a:	19 1f       	adc	r17, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    886c:	ca 01       	movw	r24, r20
    886e:	b9 01       	movw	r22, r18
    8870:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    8874:	10 16       	cp	r1, r16
    8876:	11 06       	cpc	r1, r17
    8878:	44 f5       	brge	.+80     	; 0x88ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    887a:	b1 2c       	mov	r11, r1
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    887c:	00 ff       	sbrs	r16, 0
    887e:	0c c0       	rjmp	.+24     	; 0x8898 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x77c>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    8880:	24 e0       	ldi	r18, 0x04	; 4
    8882:	b2 9e       	mul	r11, r18
    8884:	f0 01       	movw	r30, r0
    8886:	11 24       	eor	r1, r1
    8888:	e6 5c       	subi	r30, 0xC6	; 198
    888a:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    888c:	20 81       	ld	r18, Z
    888e:	31 81       	ldd	r19, Z+1	; 0x01
    8890:	42 81       	ldd	r20, Z+2	; 0x02
    8892:	53 81       	ldd	r21, Z+3	; 0x03
    8894:	0e 94 fd dd 	call	0x1bbfa	; 0x1bbfa <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    8898:	15 95       	asr	r17
    889a:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    889c:	b3 94       	inc	r11
    889e:	01 15       	cp	r16, r1
    88a0:	11 05       	cpc	r17, r1
    88a2:	61 f7       	brne	.-40     	; 0x887c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x760>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    88a4:	d1 10       	cpse	r13, r1
    88a6:	90 58       	subi	r25, 0x80	; 128
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    88a8:	e1 14       	cp	r14, r1
    88aa:	f1 04       	cpc	r15, r1
    88ac:	09 f4       	brne	.+2      	; 0x88b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x794>
    88ae:	68 ce       	rjmp	.-816    	; 0x8580 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    88b0:	2a e0       	ldi	r18, 0x0A	; 10
    88b2:	30 e0       	ldi	r19, 0x00	; 0
    88b4:	f7 01       	movw	r30, r14
    88b6:	31 83       	std	Z+1, r19	; 0x01
    88b8:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    88ba:	62 83       	std	Z+2, r22	; 0x02
    88bc:	73 83       	std	Z+3, r23	; 0x03
    88be:	84 83       	std	Z+4, r24	; 0x04
    88c0:	95 83       	std	Z+5, r25	; 0x05
    88c2:	5e ce       	rjmp	.-836    	; 0x8580 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    88c4:	90 e0       	ldi	r25, 0x00	; 0
    88c6:	80 e0       	ldi	r24, 0x00	; 0
    88c8:	cf cf       	rjmp	.-98     	; 0x8868 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    88ca:	11 95       	neg	r17
    88cc:	01 95       	neg	r16
    88ce:	11 09       	sbc	r17, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    88d0:	b1 2c       	mov	r11, r1
make_float():
    88d2:	01 15       	cp	r16, r1
    88d4:	11 05       	cpc	r17, r1
    88d6:	31 f3       	breq	.-52     	; 0x88a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x788>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    88d8:	00 ff       	sbrs	r16, 0
    88da:	0c c0       	rjmp	.+24     	; 0x88f4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7d8>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    88dc:	a4 e0       	ldi	r26, 0x04	; 4
    88de:	ba 9e       	mul	r11, r26
    88e0:	f0 01       	movw	r30, r0
    88e2:	11 24       	eor	r1, r1
    88e4:	ee 5d       	subi	r30, 0xDE	; 222
    88e6:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    88e8:	20 81       	ld	r18, Z
    88ea:	31 81       	ldd	r19, Z+1	; 0x01
    88ec:	42 81       	ldd	r20, Z+2	; 0x02
    88ee:	53 81       	ldd	r21, Z+3	; 0x03
    88f0:	0e 94 fd dd 	call	0x1bbfa	; 0x1bbfa <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    88f4:	15 95       	asr	r17
    88f6:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    88f8:	b3 94       	inc	r11
    88fa:	eb cf       	rjmp	.-42     	; 0x88d2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7b6>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
      result.set(parseFloat<JsonFloat>(buffer));
    } else if (!strcmp(buffer, "true")) {
    88fc:	61 e3       	ldi	r22, 0x31	; 49
    88fe:	73 e0       	ldi	r23, 0x03	; 3
    8900:	ce 01       	movw	r24, r28
    8902:	01 96       	adiw	r24, 0x01	; 1
    8904:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    8908:	89 2b       	or	r24, r25
    890a:	91 f4       	brne	.+36     	; 0x8930 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x814>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    890c:	e1 14       	cp	r14, r1
    890e:	f1 04       	cpc	r15, r1
    8910:	09 f4       	brne	.+2      	; 0x8914 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7f8>
    8912:	36 ce       	rjmp	.-916    	; 0x8580 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    8914:	85 e0       	ldi	r24, 0x05	; 5
    8916:	90 e0       	ldi	r25, 0x00	; 0
    8918:	f7 01       	movw	r30, r14
    891a:	91 83       	std	Z+1, r25	; 0x01
    891c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    891e:	81 e0       	ldi	r24, 0x01	; 1
    8920:	90 e0       	ldi	r25, 0x00	; 0
    8922:	a0 e0       	ldi	r26, 0x00	; 0
    8924:	b0 e0       	ldi	r27, 0x00	; 0
    8926:	82 83       	std	Z+2, r24	; 0x02
    8928:	93 83       	std	Z+3, r25	; 0x03
    892a:	a4 83       	std	Z+4, r26	; 0x04
    892c:	b5 83       	std	Z+5, r27	; 0x05
    892e:	28 ce       	rjmp	.-944    	; 0x8580 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    8930:	66 e3       	ldi	r22, 0x36	; 54
    8932:	73 e0       	ldi	r23, 0x03	; 3
    8934:	ce 01       	movw	r24, r28
    8936:	01 96       	adiw	r24, 0x01	; 1
    8938:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    893c:	89 2b       	or	r24, r25
    893e:	79 f4       	brne	.+30     	; 0x895e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x842>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    8940:	e1 14       	cp	r14, r1
    8942:	f1 04       	cpc	r15, r1
    8944:	09 f4       	brne	.+2      	; 0x8948 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x82c>
    8946:	1c ce       	rjmp	.-968    	; 0x8580 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    8948:	85 e0       	ldi	r24, 0x05	; 5
    894a:	90 e0       	ldi	r25, 0x00	; 0
    894c:	d7 01       	movw	r26, r14
    894e:	8d 93       	st	X+, r24
    8950:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    8952:	f7 01       	movw	r30, r14
    8954:	12 82       	std	Z+2, r1	; 0x02
    8956:	13 82       	std	Z+3, r1	; 0x03
    8958:	14 82       	std	Z+4, r1	; 0x04
    895a:	15 82       	std	Z+5, r1	; 0x05
    895c:	11 ce       	rjmp	.-990    	; 0x8580 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    895e:	6c e3       	ldi	r22, 0x3C	; 60
    8960:	73 e0       	ldi	r23, 0x03	; 3
    8962:	ce 01       	movw	r24, r28
    8964:	01 96       	adiw	r24, 0x01	; 1
    8966:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    896a:	89 2b       	or	r24, r25
    896c:	09 f4       	brne	.+2      	; 0x8970 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x854>
    896e:	08 ce       	rjmp	.-1008   	; 0x8580 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    8970:	82 e0       	ldi	r24, 0x02	; 2
    8972:	90 e0       	ldi	r25, 0x00	; 0
    8974:	a3 cc       	rjmp	.-1722   	; 0x82bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    8976:	21 e0       	ldi	r18, 0x01	; 1
    8978:	30 e0       	ldi	r19, 0x00	; 0
    897a:	40 e0       	ldi	r20, 0x00	; 0
    897c:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    897e:	e1 14       	cp	r14, r1
    8980:	f1 04       	cpc	r15, r1
    8982:	09 f0       	breq	.+2      	; 0x8986 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x86a>
    8984:	52 ce       	rjmp	.-860    	; 0x862a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x50e>
    8986:	fc cd       	rjmp	.-1032   	; 0x8580 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>

00008988 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z32display_element_dialog_show_textjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4346
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
}
/////
void display_element_dialog_show_text(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    8988:	ef 92       	push	r14
    898a:	ff 92       	push	r15
    898c:	0f 93       	push	r16
    898e:	1f 93       	push	r17
    8990:	ab 01       	movw	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4347
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
    8992:	ee 24       	eor	r14, r14
    8994:	ea 94       	dec	r14
    8996:	fe 2c       	mov	r15, r14
    8998:	10 e0       	ldi	r17, 0x00	; 0
    899a:	00 e0       	ldi	r16, 0x00	; 0
    899c:	22 e0       	ldi	r18, 0x02	; 2
    899e:	bc 01       	movw	r22, r24
    89a0:	8a ef       	ldi	r24, 0xFA	; 250
    89a2:	99 e0       	ldi	r25, 0x09	; 9
    89a4:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4348
}
    89a8:	1f 91       	pop	r17
    89aa:	0f 91       	pop	r16
    89ac:	ff 90       	pop	r15
    89ae:	ef 90       	pop	r14
    89b0:	08 95       	ret

000089b2 <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5995
/*

   Funkce ktera zobrazuje vsechny interni veliciny vhodne k diagnostice zarizeni
*/
void display_element_show_about_device(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    89b2:	af 92       	push	r10
    89b4:	bf 92       	push	r11
    89b6:	cf 92       	push	r12
    89b8:	df 92       	push	r13
    89ba:	ef 92       	push	r14
    89bc:	ff 92       	push	r15
    89be:	0f 93       	push	r16
    89c0:	1f 93       	push	r17
    89c2:	cf 93       	push	r28
    89c4:	df 93       	push	r29
    89c6:	cd b7       	in	r28, 0x3d	; 61
    89c8:	de b7       	in	r29, 0x3e	; 62
    89ca:	a8 97       	sbiw	r28, 0x28	; 40
    89cc:	0f b6       	in	r0, 0x3f	; 63
    89ce:	f8 94       	cli
    89d0:	de bf       	out	0x3e, r29	; 62
    89d2:	0f be       	out	0x3f, r0	; 63
    89d4:	cd bf       	out	0x3d, r28	; 61
    89d6:	6c 01       	movw	r12, r24
    89d8:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5998
  char str1[32];
  char str2[8];
  strcpy_P(str1, new_text_input_volt);
    89da:	67 e5       	ldi	r22, 0x57	; 87
    89dc:	70 e6       	ldi	r23, 0x60	; 96
    89de:	ce 01       	movw	r24, r28
    89e0:	01 96       	adiw	r24, 0x01	; 1
    89e2:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3403
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    89e6:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <dvanact>
    89ea:	90 91 5f 0b 	lds	r25, 0x0B5F	; 0x800b5f <dvanact+0x1>
    89ee:	29 e3       	ldi	r18, 0x39	; 57
    89f0:	28 9f       	mul	r18, r24
    89f2:	b0 01       	movw	r22, r0
    89f4:	29 9f       	mul	r18, r25
    89f6:	70 0d       	add	r23, r0
    89f8:	11 24       	eor	r1, r1
    89fa:	90 e0       	ldi	r25, 0x00	; 0
    89fc:	80 e0       	ldi	r24, 0x00	; 0
    89fe:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
    8a02:	20 e0       	ldi	r18, 0x00	; 0
    8a04:	30 e0       	ldi	r19, 0x00	; 0
    8a06:	4a e7       	ldi	r20, 0x7A	; 122
    8a08:	54 e4       	ldi	r21, 0x44	; 68
    8a0a:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5999
void display_element_show_about_device(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  char str1[32];
  char str2[8];
  strcpy_P(str1, new_text_input_volt);
  dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, str2);
    8a0e:	8e 01       	movw	r16, r28
    8a10:	0f 5d       	subi	r16, 0xDF	; 223
    8a12:	1f 4f       	sbci	r17, 0xFF	; 255
    8a14:	22 e0       	ldi	r18, 0x02	; 2
    8a16:	44 e0       	ldi	r20, 0x04	; 4
    8a18:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6000
  strcat(str1, str2);
    8a1c:	b8 01       	movw	r22, r16
    8a1e:	ce 01       	movw	r24, r28
    8a20:	01 96       	adiw	r24, 0x01	; 1
    8a22:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6001
  strcat(str1, "V");
    8a26:	68 e5       	ldi	r22, 0x58	; 88
    8a28:	78 e0       	ldi	r23, 0x08	; 8
    8a2a:	ce 01       	movw	r24, r28
    8a2c:	01 96       	adiw	r24, 0x01	; 1
    8a2e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6002
  show_string(str1, x + 5 , y + 10 , 1, BLACK, WHITE, 0);
    8a32:	85 e0       	ldi	r24, 0x05	; 5
    8a34:	c8 0e       	add	r12, r24
    8a36:	d1 1c       	adc	r13, r1
    8a38:	a5 01       	movw	r20, r10
    8a3a:	46 5f       	subi	r20, 0xF6	; 246
    8a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    8a3e:	ee 24       	eor	r14, r14
    8a40:	ea 94       	dec	r14
    8a42:	fe 2c       	mov	r15, r14
    8a44:	10 e0       	ldi	r17, 0x00	; 0
    8a46:	00 e0       	ldi	r16, 0x00	; 0
    8a48:	21 e0       	ldi	r18, 0x01	; 1
    8a4a:	b6 01       	movw	r22, r12
    8a4c:	ce 01       	movw	r24, r28
    8a4e:	01 96       	adiw	r24, 0x01	; 1
    8a50:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6004

  strcpy_P(str1, new_text_pet_volt);
    8a54:	63 e4       	ldi	r22, 0x43	; 67
    8a56:	70 e6       	ldi	r23, 0x60	; 96
    8a58:	ce 01       	movw	r24, r28
    8a5a:	01 96       	adiw	r24, 0x01	; 1
    8a5c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6005
  strcat(str1, ": ");
    8a60:	61 e4       	ldi	r22, 0x41	; 65
    8a62:	77 e0       	ldi	r23, 0x07	; 7
    8a64:	ce 01       	movw	r24, r28
    8a66:	01 96       	adiw	r24, 0x01	; 1
    8a68:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3403
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    8a6c:	60 91 60 0b 	lds	r22, 0x0B60	; 0x800b60 <petnula>
    8a70:	70 91 61 0b 	lds	r23, 0x0B61	; 0x800b61 <petnula+0x1>
    8a74:	93 e0       	ldi	r25, 0x03	; 3
    8a76:	66 0f       	add	r22, r22
    8a78:	77 1f       	adc	r23, r23
    8a7a:	9a 95       	dec	r25
    8a7c:	e1 f7       	brne	.-8      	; 0x8a76 <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xc4>
    8a7e:	90 e0       	ldi	r25, 0x00	; 0
    8a80:	80 e0       	ldi	r24, 0x00	; 0
    8a82:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
    8a86:	20 e0       	ldi	r18, 0x00	; 0
    8a88:	30 e0       	ldi	r19, 0x00	; 0
    8a8a:	4a e7       	ldi	r20, 0x7A	; 122
    8a8c:	54 e4       	ldi	r21, 0x44	; 68
    8a8e:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6006
  strcat(str1, "V");
  show_string(str1, x + 5 , y + 10 , 1, BLACK, WHITE, 0);

  strcpy_P(str1, new_text_pet_volt);
  strcat(str1, ": ");
  dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, str2);
    8a92:	8e 01       	movw	r16, r28
    8a94:	0f 5d       	subi	r16, 0xDF	; 223
    8a96:	1f 4f       	sbci	r17, 0xFF	; 255
    8a98:	22 e0       	ldi	r18, 0x02	; 2
    8a9a:	44 e0       	ldi	r20, 0x04	; 4
    8a9c:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6007
  strcat(str1, str2);
    8aa0:	b8 01       	movw	r22, r16
    8aa2:	ce 01       	movw	r24, r28
    8aa4:	01 96       	adiw	r24, 0x01	; 1
    8aa6:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6008
  strcat(str1, "V");
    8aaa:	68 e5       	ldi	r22, 0x58	; 88
    8aac:	78 e0       	ldi	r23, 0x08	; 8
    8aae:	ce 01       	movw	r24, r28
    8ab0:	01 96       	adiw	r24, 0x01	; 1
    8ab2:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6009
  show_string(str1, x + 5 , y + 25 , 1, BLACK, WHITE, 0);
    8ab6:	a5 01       	movw	r20, r10
    8ab8:	47 5e       	subi	r20, 0xE7	; 231
    8aba:	5f 4f       	sbci	r21, 0xFF	; 255
    8abc:	10 e0       	ldi	r17, 0x00	; 0
    8abe:	00 e0       	ldi	r16, 0x00	; 0
    8ac0:	21 e0       	ldi	r18, 0x01	; 1
    8ac2:	b6 01       	movw	r22, r12
    8ac4:	ce 01       	movw	r24, r28
    8ac6:	01 96       	adiw	r24, 0x01	; 1
    8ac8:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6011

  strcpy_P(str1, new_text_tritri_volt);
    8acc:	6f e2       	ldi	r22, 0x2F	; 47
    8ace:	70 e6       	ldi	r23, 0x60	; 96
    8ad0:	ce 01       	movw	r24, r28
    8ad2:	01 96       	adiw	r24, 0x01	; 1
    8ad4:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3403
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    8ad8:	80 91 62 0b 	lds	r24, 0x0B62	; 0x800b62 <tritri>
    8adc:	90 91 63 0b 	lds	r25, 0x0B63	; 0x800b63 <tritri+0x1>
    8ae0:	25 e0       	ldi	r18, 0x05	; 5
    8ae2:	28 9f       	mul	r18, r24
    8ae4:	b0 01       	movw	r22, r0
    8ae6:	29 9f       	mul	r18, r25
    8ae8:	70 0d       	add	r23, r0
    8aea:	11 24       	eor	r1, r1
    8aec:	90 e0       	ldi	r25, 0x00	; 0
    8aee:	80 e0       	ldi	r24, 0x00	; 0
    8af0:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
    8af4:	20 e0       	ldi	r18, 0x00	; 0
    8af6:	30 e0       	ldi	r19, 0x00	; 0
    8af8:	4a e7       	ldi	r20, 0x7A	; 122
    8afa:	54 e4       	ldi	r21, 0x44	; 68
    8afc:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6013
  strcat(str1, "V");
  show_string(str1, x + 5 , y + 25 , 1, BLACK, WHITE, 0);

  strcpy_P(str1, new_text_tritri_volt);

  dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, str2);
    8b00:	8e 01       	movw	r16, r28
    8b02:	0f 5d       	subi	r16, 0xDF	; 223
    8b04:	1f 4f       	sbci	r17, 0xFF	; 255
    8b06:	22 e0       	ldi	r18, 0x02	; 2
    8b08:	44 e0       	ldi	r20, 0x04	; 4
    8b0a:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6014
  strcat(str1, str2);
    8b0e:	b8 01       	movw	r22, r16
    8b10:	ce 01       	movw	r24, r28
    8b12:	01 96       	adiw	r24, 0x01	; 1
    8b14:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6015
  strcat(str1, "V");
    8b18:	68 e5       	ldi	r22, 0x58	; 88
    8b1a:	78 e0       	ldi	r23, 0x08	; 8
    8b1c:	ce 01       	movw	r24, r28
    8b1e:	01 96       	adiw	r24, 0x01	; 1
    8b20:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6016
  show_string(str1, x + 5 , y + 40 , 1, BLACK, WHITE, 0);
    8b24:	a5 01       	movw	r20, r10
    8b26:	48 5d       	subi	r20, 0xD8	; 216
    8b28:	5f 4f       	sbci	r21, 0xFF	; 255
    8b2a:	10 e0       	ldi	r17, 0x00	; 0
    8b2c:	00 e0       	ldi	r16, 0x00	; 0
    8b2e:	21 e0       	ldi	r18, 0x01	; 1
    8b30:	b6 01       	movw	r22, r12
    8b32:	ce 01       	movw	r24, r28
    8b34:	01 96       	adiw	r24, 0x01	; 1
    8b36:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6018

  strcpy_P(str1, new_text_consume_ampere);;
    8b3a:	60 e2       	ldi	r22, 0x20	; 32
    8b3c:	70 e6       	ldi	r23, 0x60	; 96
    8b3e:	ce 01       	movw	r24, r28
    8b40:	01 96       	adiw	r24, 0x01	; 1
    8b42:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3418
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    8b46:	60 91 5c 0b 	lds	r22, 0x0B5C	; 0x800b5c <proud>
    8b4a:	70 91 5d 0b 	lds	r23, 0x0B5D	; 0x800b5d <proud+0x1>
    8b4e:	90 e0       	ldi	r25, 0x00	; 0
    8b50:	80 e0       	ldi	r24, 0x00	; 0
    8b52:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6019
  strcat(str1, str2);
  strcat(str1, "V");
  show_string(str1, x + 5 , y + 40 , 1, BLACK, WHITE, 0);

  strcpy_P(str1, new_text_consume_ampere);;
  dtostrf(prepocet_proudu(proud), 4, 2, str2);
    8b56:	8e 01       	movw	r16, r28
    8b58:	0f 5d       	subi	r16, 0xDF	; 223
    8b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    8b5c:	22 e0       	ldi	r18, 0x02	; 2
    8b5e:	44 e0       	ldi	r20, 0x04	; 4
    8b60:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6020
  strcat(str1, str2);
    8b64:	b8 01       	movw	r22, r16
    8b66:	ce 01       	movw	r24, r28
    8b68:	01 96       	adiw	r24, 0x01	; 1
    8b6a:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6021
  strcat(str1, "mA");
    8b6e:	61 e4       	ldi	r22, 0x41	; 65
    8b70:	73 e0       	ldi	r23, 0x03	; 3
    8b72:	ce 01       	movw	r24, r28
    8b74:	01 96       	adiw	r24, 0x01	; 1
    8b76:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6022
  show_string(str1, x + 5 , y + 55 , 1, BLACK, WHITE, 0);
    8b7a:	a5 01       	movw	r20, r10
    8b7c:	49 5c       	subi	r20, 0xC9	; 201
    8b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    8b80:	10 e0       	ldi	r17, 0x00	; 0
    8b82:	00 e0       	ldi	r16, 0x00	; 0
    8b84:	21 e0       	ldi	r18, 0x01	; 1
    8b86:	b6 01       	movw	r22, r12
    8b88:	ce 01       	movw	r24, r28
    8b8a:	01 96       	adiw	r24, 0x01	; 1
    8b8c:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6024

  strcpy_P(str1, new_text_internal_temp);
    8b90:	6e e0       	ldi	r22, 0x0E	; 14
    8b92:	70 e6       	ldi	r23, 0x60	; 96
    8b94:	ce 01       	movw	r24, r28
    8b96:	01 96       	adiw	r24, 0x01	; 1
    8b98:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6025
  dtostrf(internal_temp, 4, 2, str2);
    8b9c:	60 91 76 0c 	lds	r22, 0x0C76	; 0x800c76 <internal_temp>
    8ba0:	70 91 77 0c 	lds	r23, 0x0C77	; 0x800c77 <internal_temp+0x1>
    8ba4:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <internal_temp+0x2>
    8ba8:	90 91 79 0c 	lds	r25, 0x0C79	; 0x800c79 <internal_temp+0x3>
    8bac:	8e 01       	movw	r16, r28
    8bae:	0f 5d       	subi	r16, 0xDF	; 223
    8bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    8bb2:	22 e0       	ldi	r18, 0x02	; 2
    8bb4:	44 e0       	ldi	r20, 0x04	; 4
    8bb6:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6026
  strcat(str1, str2);
    8bba:	b8 01       	movw	r22, r16
    8bbc:	ce 01       	movw	r24, r28
    8bbe:	01 96       	adiw	r24, 0x01	; 1
    8bc0:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6027
  strcat(str1, "C");
    8bc4:	6c e1       	ldi	r22, 0x1C	; 28
    8bc6:	77 e0       	ldi	r23, 0x07	; 7
    8bc8:	ce 01       	movw	r24, r28
    8bca:	01 96       	adiw	r24, 0x01	; 1
    8bcc:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6028
  show_string(str1, x + 5 , y + 70 , 1, BLACK, WHITE, 0);
    8bd0:	a5 01       	movw	r20, r10
    8bd2:	4a 5b       	subi	r20, 0xBA	; 186
    8bd4:	5f 4f       	sbci	r21, 0xFF	; 255
    8bd6:	10 e0       	ldi	r17, 0x00	; 0
    8bd8:	00 e0       	ldi	r16, 0x00	; 0
    8bda:	21 e0       	ldi	r18, 0x01	; 1
    8bdc:	b6 01       	movw	r22, r12
    8bde:	ce 01       	movw	r24, r28
    8be0:	01 96       	adiw	r24, 0x01	; 1
    8be2:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6030

  strcpy_P(str1, new_text_selfcheck_test);
    8be6:	62 e0       	ldi	r22, 0x02	; 2
    8be8:	70 e6       	ldi	r23, 0x60	; 96
    8bea:	ce 01       	movw	r24, r28
    8bec:	01 96       	adiw	r24, 0x01	; 1
    8bee:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6031
  itoa(selftest_data, str2, 16);
    8bf2:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    8bf6:	40 e1       	ldi	r20, 0x10	; 16
    8bf8:	be 01       	movw	r22, r28
    8bfa:	6f 5d       	subi	r22, 0xDF	; 223
    8bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    8bfe:	90 e0       	ldi	r25, 0x00	; 0
    8c00:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6032
  strcat(str1, str2);
    8c04:	be 01       	movw	r22, r28
    8c06:	6f 5d       	subi	r22, 0xDF	; 223
    8c08:	7f 4f       	sbci	r23, 0xFF	; 255
    8c0a:	ce 01       	movw	r24, r28
    8c0c:	01 96       	adiw	r24, 0x01	; 1
    8c0e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6033
  show_string(str1, x + 5 , y + 85 , 1, BLACK, WHITE, 0);
    8c12:	a5 01       	movw	r20, r10
    8c14:	4b 5a       	subi	r20, 0xAB	; 171
    8c16:	5f 4f       	sbci	r21, 0xFF	; 255
    8c18:	21 e0       	ldi	r18, 0x01	; 1
    8c1a:	b6 01       	movw	r22, r12
    8c1c:	ce 01       	movw	r24, r28
    8c1e:	01 96       	adiw	r24, 0x01	; 1
    8c20:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6035

  strcpy_P(str1, new_text_mqtt_send);
    8c24:	60 ef       	ldi	r22, 0xF0	; 240
    8c26:	7f e5       	ldi	r23, 0x5F	; 95
    8c28:	ce 01       	movw	r24, r28
    8c2a:	01 96       	adiw	r24, 0x01	; 1
    8c2c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    8c30:	4a e0       	ldi	r20, 0x0A	; 10
    8c32:	be 01       	movw	r22, r28
    8c34:	6f 5d       	subi	r22, 0xDF	; 223
    8c36:	7f 4f       	sbci	r23, 0xFF	; 255
    8c38:	80 91 85 0c 	lds	r24, 0x0C85	; 0x800c85 <mqtt_send_message>
    8c3c:	90 91 86 0c 	lds	r25, 0x0C86	; 0x800c86 <mqtt_send_message+0x1>
    8c40:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6037
  itoa(mqtt_send_message, str2, 10);
  strcat(str1, str2);
    8c44:	be 01       	movw	r22, r28
    8c46:	6f 5d       	subi	r22, 0xDF	; 223
    8c48:	7f 4f       	sbci	r23, 0xFF	; 255
    8c4a:	ce 01       	movw	r24, r28
    8c4c:	01 96       	adiw	r24, 0x01	; 1
    8c4e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6038
  show_string(str1, x + 5 , y + 100 , 1, BLACK, WHITE, 0);
    8c52:	a5 01       	movw	r20, r10
    8c54:	4c 59       	subi	r20, 0x9C	; 156
    8c56:	5f 4f       	sbci	r21, 0xFF	; 255
    8c58:	21 e0       	ldi	r18, 0x01	; 1
    8c5a:	b6 01       	movw	r22, r12
    8c5c:	ce 01       	movw	r24, r28
    8c5e:	01 96       	adiw	r24, 0x01	; 1
    8c60:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6040

  strcpy_P(str1, new_text_mqtt_receive);
    8c64:	6f ed       	ldi	r22, 0xDF	; 223
    8c66:	7f e5       	ldi	r23, 0x5F	; 95
    8c68:	ce 01       	movw	r24, r28
    8c6a:	01 96       	adiw	r24, 0x01	; 1
    8c6c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    8c70:	4a e0       	ldi	r20, 0x0A	; 10
    8c72:	be 01       	movw	r22, r28
    8c74:	6f 5d       	subi	r22, 0xDF	; 223
    8c76:	7f 4f       	sbci	r23, 0xFF	; 255
    8c78:	80 91 5a 0b 	lds	r24, 0x0B5A	; 0x800b5a <mqtt_receive_message>
    8c7c:	90 91 5b 0b 	lds	r25, 0x0B5B	; 0x800b5b <mqtt_receive_message+0x1>
    8c80:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6042
  itoa(mqtt_receive_message, str2, 10);
  strcat(str1, str2);
    8c84:	be 01       	movw	r22, r28
    8c86:	6f 5d       	subi	r22, 0xDF	; 223
    8c88:	7f 4f       	sbci	r23, 0xFF	; 255
    8c8a:	ce 01       	movw	r24, r28
    8c8c:	01 96       	adiw	r24, 0x01	; 1
    8c8e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6043
  show_string(str1, x + 5 , y + 115 , 1, BLACK, WHITE, 0);
    8c92:	a5 01       	movw	r20, r10
    8c94:	4d 58       	subi	r20, 0x8D	; 141
    8c96:	5f 4f       	sbci	r21, 0xFF	; 255
    8c98:	21 e0       	ldi	r18, 0x01	; 1
    8c9a:	b6 01       	movw	r22, r12
    8c9c:	ce 01       	movw	r24, r28
    8c9e:	01 96       	adiw	r24, 0x01	; 1
    8ca0:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6045

  strcpy_P(str1, new_text_mqtt_processed);
    8ca4:	6b ec       	ldi	r22, 0xCB	; 203
    8ca6:	7f e5       	ldi	r23, 0x5F	; 95
    8ca8:	ce 01       	movw	r24, r28
    8caa:	01 96       	adiw	r24, 0x01	; 1
    8cac:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    8cb0:	4a e0       	ldi	r20, 0x0A	; 10
    8cb2:	be 01       	movw	r22, r28
    8cb4:	6f 5d       	subi	r22, 0xDF	; 223
    8cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    8cb8:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    8cbc:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    8cc0:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6047
  itoa(mqtt_process_message, str2, 10);
  strcat(str1, str2);
    8cc4:	be 01       	movw	r22, r28
    8cc6:	6f 5d       	subi	r22, 0xDF	; 223
    8cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    8cca:	ce 01       	movw	r24, r28
    8ccc:	01 96       	adiw	r24, 0x01	; 1
    8cce:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6048
  show_string(str1, x + 5 , y + 130 , 1, BLACK, WHITE, 0);
    8cd2:	a5 01       	movw	r20, r10
    8cd4:	4e 57       	subi	r20, 0x7E	; 126
    8cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    8cd8:	21 e0       	ldi	r18, 0x01	; 1
    8cda:	b6 01       	movw	r22, r12
    8cdc:	ce 01       	movw	r24, r28
    8cde:	01 96       	adiw	r24, 0x01	; 1
    8ce0:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6050

  strcpy_P(str1, new_text_mqtt_error);
    8ce4:	6c eb       	ldi	r22, 0xBC	; 188
    8ce6:	7f e5       	ldi	r23, 0x5F	; 95
    8ce8:	ce 01       	movw	r24, r28
    8cea:	01 96       	adiw	r24, 0x01	; 1
    8cec:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    8cf0:	4a e0       	ldi	r20, 0x0A	; 10
    8cf2:	be 01       	movw	r22, r28
    8cf4:	6f 5d       	subi	r22, 0xDF	; 223
    8cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    8cf8:	80 91 87 0c 	lds	r24, 0x0C87	; 0x800c87 <mqtt_error>
    8cfc:	90 91 88 0c 	lds	r25, 0x0C88	; 0x800c88 <mqtt_error+0x1>
    8d00:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6052
  itoa(mqtt_error, str2, 10);
  strcat(str1, str2);
    8d04:	be 01       	movw	r22, r28
    8d06:	6f 5d       	subi	r22, 0xDF	; 223
    8d08:	7f 4f       	sbci	r23, 0xFF	; 255
    8d0a:	ce 01       	movw	r24, r28
    8d0c:	01 96       	adiw	r24, 0x01	; 1
    8d0e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6053
  show_string(str1, x + 5 , y + 145 , 1, BLACK, WHITE, 0);
    8d12:	a5 01       	movw	r20, r10
    8d14:	4f 56       	subi	r20, 0x6F	; 111
    8d16:	5f 4f       	sbci	r21, 0xFF	; 255
    8d18:	21 e0       	ldi	r18, 0x01	; 1
    8d1a:	b6 01       	movw	r22, r12
    8d1c:	ce 01       	movw	r24, r28
    8d1e:	01 96       	adiw	r24, 0x01	; 1
    8d20:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6054
}
    8d24:	a8 96       	adiw	r28, 0x28	; 40
    8d26:	0f b6       	in	r0, 0x3f	; 63
    8d28:	f8 94       	cli
    8d2a:	de bf       	out	0x3e, r29	; 62
    8d2c:	0f be       	out	0x3f, r0	; 63
    8d2e:	cd bf       	out	0x3d, r28	; 61
    8d30:	df 91       	pop	r29
    8d32:	cf 91       	pop	r28
    8d34:	1f 91       	pop	r17
    8d36:	0f 91       	pop	r16
    8d38:	ff 90       	pop	r15
    8d3a:	ef 90       	pop	r14
    8d3c:	df 90       	pop	r13
    8d3e:	cf 90       	pop	r12
    8d40:	bf 90       	pop	r11
    8d42:	af 90       	pop	r10
    8d44:	08 95       	ret

00008d46 <button_set_mqtt_pass_onclick(unsigned int, unsigned int, unsigned char)>:
_Z28button_set_mqtt_pass_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5890
  display_element_set_string(device.mqtt_user, 20, 0, &helper_dialog_mqtt_set_user, &valid_true);
}
//// funkce obsluha tlacika nastaveni mqtt klice
void button_set_mqtt_pass_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    8d46:	70 e0       	ldi	r23, 0x00	; 0
    8d48:	60 e0       	ldi	r22, 0x00	; 0
    8d4a:	87 e6       	ldi	r24, 0x67	; 103
    8d4c:	90 e0       	ldi	r25, 0x00	; 0
    8d4e:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    8d52:	6e e1       	ldi	r22, 0x1E	; 30
    8d54:	7e e0       	ldi	r23, 0x0E	; 14
    8d56:	8a ed       	ldi	r24, 0xDA	; 218
    8d58:	99 e0       	ldi	r25, 0x09	; 9
    8d5a:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1678
  dialog_set_string_max_length = max_length;
    8d5e:	84 e1       	ldi	r24, 0x14	; 20
    8d60:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1679
  dialog_set_string_args = idx;
    8d64:	10 92 d8 09 	sts	0x09D8, r1	; 0x8009d8 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1680
  dialog_save_string_function = save_function;
    8d68:	86 e1       	ldi	r24, 0x16	; 22
    8d6a:	92 e7       	ldi	r25, 0x72	; 114
    8d6c:	90 93 d7 09 	sts	0x09D7, r25	; 0x8009d7 <dialog_save_string_function+0x1>
    8d70:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1681
  dialog_save_valid_function = valid_function;
    8d74:	8c ef       	ldi	r24, 0xFC	; 252
    8d76:	9b e3       	ldi	r25, 0x3B	; 59
    8d78:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <dialog_save_valid_function+0x1>
    8d7c:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <dialog_save_valid_function>
_Z28button_set_mqtt_pass_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5892
//// funkce obsluha tlacika nastaveni mqtt klice
void button_set_mqtt_pass_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
  display_element_set_string(device.mqtt_key, 20, 0, &helper_dialog_mqtt_set_pass, &valid_true);
}
    8d80:	08 95       	ret

00008d82 <button_set_mqtt_user_onclick(unsigned int, unsigned int, unsigned char)>:
_Z28button_set_mqtt_user_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5884
  display_element_set_string(ip_text, 16, 0, &helper_dialog_mqtt_set_server, &valid_ipv4_address_element_string);
}
//// funkce obsluha tlacitka nastaveni mqtt uzivatele
void button_set_mqtt_user_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    8d82:	70 e0       	ldi	r23, 0x00	; 0
    8d84:	60 e0       	ldi	r22, 0x00	; 0
    8d86:	87 e6       	ldi	r24, 0x67	; 103
    8d88:	90 e0       	ldi	r25, 0x00	; 0
    8d8a:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    8d8e:	6a e0       	ldi	r22, 0x0A	; 10
    8d90:	7e e0       	ldi	r23, 0x0E	; 14
    8d92:	8a ed       	ldi	r24, 0xDA	; 218
    8d94:	99 e0       	ldi	r25, 0x09	; 9
    8d96:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1678
  dialog_set_string_max_length = max_length;
    8d9a:	84 e1       	ldi	r24, 0x14	; 20
    8d9c:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1679
  dialog_set_string_args = idx;
    8da0:	10 92 d8 09 	sts	0x09D8, r1	; 0x8009d8 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1680
  dialog_save_string_function = save_function;
    8da4:	89 e3       	ldi	r24, 0x39	; 57
    8da6:	92 e7       	ldi	r25, 0x72	; 114
    8da8:	90 93 d7 09 	sts	0x09D7, r25	; 0x8009d7 <dialog_save_string_function+0x1>
    8dac:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1681
  dialog_save_valid_function = valid_function;
    8db0:	8c ef       	ldi	r24, 0xFC	; 252
    8db2:	9b e3       	ldi	r25, 0x3B	; 59
    8db4:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <dialog_save_valid_function+0x1>
    8db8:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <dialog_save_valid_function>
_Z28button_set_mqtt_user_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5886
//// funkce obsluha tlacitka nastaveni mqtt uzivatele
void button_set_mqtt_user_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
  display_element_set_string(device.mqtt_user, 20, 0, &helper_dialog_mqtt_set_user, &valid_true);
}
    8dbc:	08 95       	ret

00008dbe <button_set_brightness_auto_shutdown_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>:
_Z54button_set_brightness_auto_shutdown_dyn_symbol_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5634
}


void button_set_brightness_auto_shutdown_dyn_symbol_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(NEW_MENU_DISPLAY_NASTAVENI_AUTO_SHUTDOWN_SCREEN, 0, 0);
    8dbe:	70 e0       	ldi	r23, 0x00	; 0
    8dc0:	60 e0       	ldi	r22, 0x00	; 0
    8dc2:	8d e9       	ldi	r24, 0x9D	; 157
    8dc4:	90 e0       	ldi	r25, 0x00	; 0
    8dc6:	0c 94 bc af 	jmp	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>

00008dca <button_change_brightness_display_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>:
_Z51button_change_brightness_display_dyn_button_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5546
  }
}

void button_change_brightness_display_dyn_button_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(NEW_MENU_DISPLAY_NASTAVENI_BRIGTHNESS_SCREEN, 0, 0);
    8dca:	70 e0       	ldi	r23, 0x00	; 0
    8dcc:	60 e0       	ldi	r22, 0x00	; 0
    8dce:	8b e9       	ldi	r24, 0x9B	; 155
    8dd0:	90 e0       	ldi	r25, 0x00	; 0
    8dd2:	0c 94 bc af 	jmp	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>

00008dd6 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4795
  tds_associate(idx);
}

/// funkce. ktera
void click_tds_associate_or_setting_onewire(uint16_t args1, uint16_t args2, uint8_t idx)
{
    8dd6:	cf 93       	push	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4797
  //printf("%d %d\n", args1, idx);
  if (w_rom[idx].tds_idx == 255)
    8dd8:	8b e0       	ldi	r24, 0x0B	; 11
    8dda:	48 9f       	mul	r20, r24
    8ddc:	f0 01       	movw	r30, r0
    8dde:	11 24       	eor	r1, r1
    8de0:	e7 57       	subi	r30, 0x77	; 119
    8de2:	f3 4f       	sbci	r31, 0xF3	; 243
    8de4:	62 85       	ldd	r22, Z+10	; 0x0a
    8de6:	6f 3f       	cpi	r22, 0xFF	; 255
    8de8:	b1 f4       	brne	.+44     	; 0x8e16 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)+0x40>
    8dea:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4799
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    8dec:	70 e0       	ldi	r23, 0x00	; 0
    8dee:	60 e0       	ldi	r22, 0x00	; 0
    8df0:	84 e6       	ldi	r24, 0x64	; 100
    8df2:	90 e0       	ldi	r25, 0x00	; 0
    8df4:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4800
    dialog_yes_function = &helper_tds_associate;
    8df8:	83 ec       	ldi	r24, 0xC3	; 195
    8dfa:	9c e6       	ldi	r25, 0x6C	; 108
    8dfc:	90 93 7d 09 	sts	0x097D, r25	; 0x80097d <dialog_yes_function+0x1>
    8e00:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4801
    dialog_yes_args1 = idx;
    8e04:	c0 93 7b 09 	sts	0x097B, r28	; 0x80097b <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4802
    strcpy_P(dialog_text, text_associovat_tds);
    8e08:	6a e8       	ldi	r22, 0x8A	; 138
    8e0a:	7e e5       	ldi	r23, 0x5E	; 94
    8e0c:	8a ef       	ldi	r24, 0xFA	; 250
    8e0e:	99 e0       	ldi	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4808
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
  }
}
    8e10:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4802
  if (w_rom[idx].tds_idx == 255)
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    dialog_yes_function = &helper_tds_associate;
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
    8e12:	0c 94 f3 d4 	jmp	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4806
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
    8e16:	70 e0       	ldi	r23, 0x00	; 0
    8e18:	84 e0       	ldi	r24, 0x04	; 4
    8e1a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4808
  }
}
    8e1c:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4806
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
    8e1e:	0c 94 bc af 	jmp	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>

00008e22 <button_set_mqtt_broker_onclick(unsigned int, unsigned int, unsigned char)>:
_Z30button_set_mqtt_broker_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5875
  rtc.adjust(DateTime(dat[2], dat[1], dat[0], now.hour(), now.minute(), now.second()));
}
////////////////////////////////////////////////////////////////////
//// funkce obsluha tlacitka nastaveni mqqt serveru
void button_set_mqtt_broker_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    8e22:	0f 93       	push	r16
    8e24:	1f 93       	push	r17
    8e26:	cf 93       	push	r28
    8e28:	df 93       	push	r29
    8e2a:	cd b7       	in	r28, 0x3d	; 61
    8e2c:	de b7       	in	r29, 0x3e	; 62
    8e2e:	60 97       	sbiw	r28, 0x10	; 16
    8e30:	0f b6       	in	r0, 0x3f	; 63
    8e32:	f8 94       	cli
    8e34:	de bf       	out	0x3e, r29	; 62
    8e36:	0f be       	out	0x3f, r0	; 63
    8e38:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5877
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    8e3a:	70 e0       	ldi	r23, 0x00	; 0
    8e3c:	60 e0       	ldi	r22, 0x00	; 0
    8e3e:	85 e6       	ldi	r24, 0x65	; 101
    8e40:	90 e0       	ldi	r25, 0x00	; 0
    8e42:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5878
  sprintf(ip_text, "%d.%d.%d.%d", device.mqtt_server[0], device.mqtt_server[1], device.mqtt_server[2], device.mqtt_server[3]);
    8e46:	e4 ee       	ldi	r30, 0xE4	; 228
    8e48:	fd e0       	ldi	r31, 0x0D	; 13
    8e4a:	83 a1       	ldd	r24, Z+35	; 0x23
    8e4c:	1f 92       	push	r1
    8e4e:	8f 93       	push	r24
    8e50:	82 a1       	ldd	r24, Z+34	; 0x22
    8e52:	1f 92       	push	r1
    8e54:	8f 93       	push	r24
    8e56:	81 a1       	ldd	r24, Z+33	; 0x21
    8e58:	1f 92       	push	r1
    8e5a:	8f 93       	push	r24
    8e5c:	80 a1       	ldd	r24, Z+32	; 0x20
    8e5e:	1f 92       	push	r1
    8e60:	8f 93       	push	r24
    8e62:	84 e4       	ldi	r24, 0x44	; 68
    8e64:	93 e0       	ldi	r25, 0x03	; 3
    8e66:	9f 93       	push	r25
    8e68:	8f 93       	push	r24
    8e6a:	8e 01       	movw	r16, r28
    8e6c:	0f 5f       	subi	r16, 0xFF	; 255
    8e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    8e70:	1f 93       	push	r17
    8e72:	0f 93       	push	r16
    8e74:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    8e78:	b8 01       	movw	r22, r16
    8e7a:	8a ed       	ldi	r24, 0xDA	; 218
    8e7c:	99 e0       	ldi	r25, 0x09	; 9
    8e7e:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1678
  dialog_set_string_max_length = max_length;
    8e82:	80 e1       	ldi	r24, 0x10	; 16
    8e84:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1679
  dialog_set_string_args = idx;
    8e88:	10 92 d8 09 	sts	0x09D8, r1	; 0x8009d8 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1680
  dialog_save_string_function = save_function;
    8e8c:	8c e5       	ldi	r24, 0x5C	; 92
    8e8e:	92 e7       	ldi	r25, 0x72	; 114
    8e90:	90 93 d7 09 	sts	0x09D7, r25	; 0x8009d7 <dialog_save_string_function+0x1>
    8e94:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1681
  dialog_save_valid_function = valid_function;
    8e98:	8e ef       	ldi	r24, 0xFE	; 254
    8e9a:	9b e3       	ldi	r25, 0x3B	; 59
    8e9c:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <dialog_save_valid_function+0x1>
    8ea0:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <dialog_save_valid_function>
_Z30button_set_mqtt_broker_onclickjjh():
    8ea4:	0f b6       	in	r0, 0x3f	; 63
    8ea6:	f8 94       	cli
    8ea8:	de bf       	out	0x3e, r29	; 62
    8eaa:	0f be       	out	0x3f, r0	; 63
    8eac:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5880
{
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(ip_text, "%d.%d.%d.%d", device.mqtt_server[0], device.mqtt_server[1], device.mqtt_server[2], device.mqtt_server[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_mqtt_set_server, &valid_ipv4_address_element_string);
}
    8eae:	60 96       	adiw	r28, 0x10	; 16
    8eb0:	0f b6       	in	r0, 0x3f	; 63
    8eb2:	f8 94       	cli
    8eb4:	de bf       	out	0x3e, r29	; 62
    8eb6:	0f be       	out	0x3f, r0	; 63
    8eb8:	cd bf       	out	0x3d, r28	; 61
    8eba:	df 91       	pop	r29
    8ebc:	cf 91       	pop	r28
    8ebe:	1f 91       	pop	r17
    8ec0:	0f 91       	pop	r16
    8ec2:	08 95       	ret

00008ec4 <button_time_set_date_manualy_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_time_set_date_manualy_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5858
  parseBytes(cas_text, ':', tim, 3, 10);
  rtc.adjust(DateTime(now.year(), now.month(), now.day(), tim[0], tim[1], tim[2]));
}
////
void button_time_set_date_manualy_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    8ec4:	0f 93       	push	r16
    8ec6:	1f 93       	push	r17
    8ec8:	cf 93       	push	r28
    8eca:	df 93       	push	r29
    8ecc:	cd b7       	in	r28, 0x3d	; 61
    8ece:	de b7       	in	r29, 0x3e	; 62
    8ed0:	2c 97       	sbiw	r28, 0x0c	; 12
    8ed2:	0f b6       	in	r0, 0x3f	; 63
    8ed4:	f8 94       	cli
    8ed6:	de bf       	out	0x3e, r29	; 62
    8ed8:	0f be       	out	0x3f, r0	; 63
    8eda:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5860
  char datum_text[12];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    8edc:	70 e0       	ldi	r23, 0x00	; 0
    8ede:	60 e0       	ldi	r22, 0x00	; 0
    8ee0:	85 e6       	ldi	r24, 0x65	; 101
    8ee2:	90 e0       	ldi	r25, 0x00	; 0
    8ee4:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    DateTime (uint16_t year, uint8_t month, uint8_t day, 
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    8ee8:	ef e3       	ldi	r30, 0x3F	; 63
    8eea:	f2 e1       	ldi	r31, 0x12	; 18
    8eec:	80 81       	ld	r24, Z
    8eee:	90 e0       	ldi	r25, 0x00	; 0
    8ef0:	80 53       	subi	r24, 0x30	; 48
    8ef2:	98 4f       	sbci	r25, 0xF8	; 248
_Z36button_time_set_date_manualy_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5861
  sprintf(datum_text, "%02d.%02d.%04d", now.day() , now.month() , now.year());
    8ef4:	9f 93       	push	r25
    8ef6:	8f 93       	push	r24
    8ef8:	81 81       	ldd	r24, Z+1	; 0x01
    8efa:	1f 92       	push	r1
    8efc:	8f 93       	push	r24
    8efe:	82 81       	ldd	r24, Z+2	; 0x02
    8f00:	1f 92       	push	r1
    8f02:	8f 93       	push	r24
    8f04:	80 e5       	ldi	r24, 0x50	; 80
    8f06:	93 e0       	ldi	r25, 0x03	; 3
    8f08:	9f 93       	push	r25
    8f0a:	8f 93       	push	r24
    8f0c:	8e 01       	movw	r16, r28
    8f0e:	0f 5f       	subi	r16, 0xFF	; 255
    8f10:	1f 4f       	sbci	r17, 0xFF	; 255
    8f12:	1f 93       	push	r17
    8f14:	0f 93       	push	r16
    8f16:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    8f1a:	b8 01       	movw	r22, r16
    8f1c:	8a ed       	ldi	r24, 0xDA	; 218
    8f1e:	99 e0       	ldi	r25, 0x09	; 9
    8f20:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1678
  dialog_set_string_max_length = max_length;
    8f24:	8b e0       	ldi	r24, 0x0B	; 11
    8f26:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1679
  dialog_set_string_args = idx;
    8f2a:	10 92 d8 09 	sts	0x09D8, r1	; 0x8009d8 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1680
  dialog_save_string_function = save_function;
    8f2e:	86 ee       	ldi	r24, 0xE6	; 230
    8f30:	91 e5       	ldi	r25, 0x51	; 81
    8f32:	90 93 d7 09 	sts	0x09D7, r25	; 0x8009d7 <dialog_save_string_function+0x1>
    8f36:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1681
  dialog_save_valid_function = valid_function;
    8f3a:	8c ef       	ldi	r24, 0xFC	; 252
    8f3c:	9b e3       	ldi	r25, 0x3B	; 59
    8f3e:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <dialog_save_valid_function+0x1>
    8f42:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <dialog_save_valid_function>
_Z36button_time_set_date_manualy_onclickjjh():
    8f46:	0f b6       	in	r0, 0x3f	; 63
    8f48:	f8 94       	cli
    8f4a:	de bf       	out	0x3e, r29	; 62
    8f4c:	0f be       	out	0x3f, r0	; 63
    8f4e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5863
{
  char datum_text[12];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(datum_text, "%02d.%02d.%04d", now.day() , now.month() , now.year());
  display_element_set_string(datum_text, 11, 0, &helper_set_date_manualy, &valid_true);
}
    8f50:	2c 96       	adiw	r28, 0x0c	; 12
    8f52:	0f b6       	in	r0, 0x3f	; 63
    8f54:	f8 94       	cli
    8f56:	de bf       	out	0x3e, r29	; 62
    8f58:	0f be       	out	0x3f, r0	; 63
    8f5a:	cd bf       	out	0x3d, r28	; 61
    8f5c:	df 91       	pop	r29
    8f5e:	cf 91       	pop	r28
    8f60:	1f 91       	pop	r17
    8f62:	0f 91       	pop	r16
    8f64:	08 95       	ret

00008f66 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_time_set_time_manualy_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5842
/////////////////////////////////////////////////////////////////////////////////
/*
   Funkce pro rucni nastaveni casu a datumu
*/
void button_time_set_time_manualy_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    8f66:	0f 93       	push	r16
    8f68:	1f 93       	push	r17
    8f6a:	cf 93       	push	r28
    8f6c:	df 93       	push	r29
    8f6e:	00 d0       	rcall	.+0      	; 0x8f70 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0xa>
    8f70:	00 d0       	rcall	.+0      	; 0x8f72 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    8f72:	00 d0       	rcall	.+0      	; 0x8f74 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0xe>
    8f74:	1f 92       	push	r1
    8f76:	cd b7       	in	r28, 0x3d	; 61
    8f78:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5844
  char cas_text[10];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    8f7a:	70 e0       	ldi	r23, 0x00	; 0
    8f7c:	60 e0       	ldi	r22, 0x00	; 0
    8f7e:	85 e6       	ldi	r24, 0x65	; 101
    8f80:	90 e0       	ldi	r25, 0x00	; 0
    8f82:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5845
  sprintf(cas_text, "%02d:%02d:%02d", now.hour(), now.minute(), now.second());
    8f86:	ef e3       	ldi	r30, 0x3F	; 63
    8f88:	f2 e1       	ldi	r31, 0x12	; 18
    8f8a:	85 81       	ldd	r24, Z+5	; 0x05
    8f8c:	1f 92       	push	r1
    8f8e:	8f 93       	push	r24
    8f90:	84 81       	ldd	r24, Z+4	; 0x04
    8f92:	1f 92       	push	r1
    8f94:	8f 93       	push	r24
    8f96:	83 81       	ldd	r24, Z+3	; 0x03
    8f98:	1f 92       	push	r1
    8f9a:	8f 93       	push	r24
    8f9c:	8f e5       	ldi	r24, 0x5F	; 95
    8f9e:	93 e0       	ldi	r25, 0x03	; 3
    8fa0:	9f 93       	push	r25
    8fa2:	8f 93       	push	r24
    8fa4:	8e 01       	movw	r16, r28
    8fa6:	0f 5f       	subi	r16, 0xFF	; 255
    8fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    8faa:	1f 93       	push	r17
    8fac:	0f 93       	push	r16
    8fae:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    8fb2:	b8 01       	movw	r22, r16
    8fb4:	8a ed       	ldi	r24, 0xDA	; 218
    8fb6:	99 e0       	ldi	r25, 0x09	; 9
    8fb8:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1678
  dialog_set_string_max_length = max_length;
    8fbc:	89 e0       	ldi	r24, 0x09	; 9
    8fbe:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1679
  dialog_set_string_args = idx;
    8fc2:	10 92 d8 09 	sts	0x09D8, r1	; 0x8009d8 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1680
  dialog_save_string_function = save_function;
    8fc6:	8a e4       	ldi	r24, 0x4A	; 74
    8fc8:	92 e5       	ldi	r25, 0x52	; 82
    8fca:	90 93 d7 09 	sts	0x09D7, r25	; 0x8009d7 <dialog_save_string_function+0x1>
    8fce:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1681
  dialog_save_valid_function = valid_function;
    8fd2:	8c ef       	ldi	r24, 0xFC	; 252
    8fd4:	9b e3       	ldi	r25, 0x3B	; 59
    8fd6:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <dialog_save_valid_function+0x1>
    8fda:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <dialog_save_valid_function>
_Z36button_time_set_time_manualy_onclickjjh():
    8fde:	0f b6       	in	r0, 0x3f	; 63
    8fe0:	f8 94       	cli
    8fe2:	de bf       	out	0x3e, r29	; 62
    8fe4:	0f be       	out	0x3f, r0	; 63
    8fe6:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5847
{
  char cas_text[10];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(cas_text, "%02d:%02d:%02d", now.hour(), now.minute(), now.second());
  display_element_set_string(cas_text, 9, 0, &helper_set_time_manualy, &valid_true);
}
    8fe8:	2a 96       	adiw	r28, 0x0a	; 10
    8fea:	0f b6       	in	r0, 0x3f	; 63
    8fec:	f8 94       	cli
    8fee:	de bf       	out	0x3e, r29	; 62
    8ff0:	0f be       	out	0x3f, r0	; 63
    8ff2:	cd bf       	out	0x3d, r28	; 61
    8ff4:	df 91       	pop	r29
    8ff6:	cf 91       	pop	r28
    8ff8:	1f 91       	pop	r17
    8ffa:	0f 91       	pop	r16
    8ffc:	08 95       	ret

00008ffe <button_ntp_set_server_onclick(unsigned int, unsigned int, unsigned char)>:
_Z29button_ntp_set_server_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5803
    strcpy_P(dialog_text, new_text_error_ntp_time);
  }
}
///
void button_ntp_set_server_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    8ffe:	0f 93       	push	r16
    9000:	1f 93       	push	r17
    9002:	cf 93       	push	r28
    9004:	df 93       	push	r29
    9006:	cd b7       	in	r28, 0x3d	; 61
    9008:	de b7       	in	r29, 0x3e	; 62
    900a:	60 97       	sbiw	r28, 0x10	; 16
    900c:	0f b6       	in	r0, 0x3f	; 63
    900e:	f8 94       	cli
    9010:	de bf       	out	0x3e, r29	; 62
    9012:	0f be       	out	0x3f, r0	; 63
    9014:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5805
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    9016:	70 e0       	ldi	r23, 0x00	; 0
    9018:	60 e0       	ldi	r22, 0x00	; 0
    901a:	85 e6       	ldi	r24, 0x65	; 101
    901c:	90 e0       	ldi	r25, 0x00	; 0
    901e:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5806
  sprintf(ip_text, "%d.%d.%d.%d", device.ntp_server[0], device.ntp_server[1], device.ntp_server[2], device.ntp_server[3]);
    9022:	80 91 35 0e 	lds	r24, 0x0E35	; 0x800e35 <device+0x51>
    9026:	1f 92       	push	r1
    9028:	8f 93       	push	r24
    902a:	80 91 34 0e 	lds	r24, 0x0E34	; 0x800e34 <device+0x50>
    902e:	1f 92       	push	r1
    9030:	8f 93       	push	r24
    9032:	80 91 33 0e 	lds	r24, 0x0E33	; 0x800e33 <device+0x4f>
    9036:	1f 92       	push	r1
    9038:	8f 93       	push	r24
    903a:	80 91 32 0e 	lds	r24, 0x0E32	; 0x800e32 <device+0x4e>
    903e:	1f 92       	push	r1
    9040:	8f 93       	push	r24
    9042:	84 e4       	ldi	r24, 0x44	; 68
    9044:	93 e0       	ldi	r25, 0x03	; 3
    9046:	9f 93       	push	r25
    9048:	8f 93       	push	r24
    904a:	8e 01       	movw	r16, r28
    904c:	0f 5f       	subi	r16, 0xFF	; 255
    904e:	1f 4f       	sbci	r17, 0xFF	; 255
    9050:	1f 93       	push	r17
    9052:	0f 93       	push	r16
    9054:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    9058:	b8 01       	movw	r22, r16
    905a:	8a ed       	ldi	r24, 0xDA	; 218
    905c:	99 e0       	ldi	r25, 0x09	; 9
    905e:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1678
  dialog_set_string_max_length = max_length;
    9062:	80 e1       	ldi	r24, 0x10	; 16
    9064:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1679
  dialog_set_string_args = idx;
    9068:	10 92 d8 09 	sts	0x09D8, r1	; 0x8009d8 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1680
  dialog_save_string_function = save_function;
    906c:	81 e8       	ldi	r24, 0x81	; 129
    906e:	92 e7       	ldi	r25, 0x72	; 114
    9070:	90 93 d7 09 	sts	0x09D7, r25	; 0x8009d7 <dialog_save_string_function+0x1>
    9074:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1681
  dialog_save_valid_function = valid_function;
    9078:	8e ef       	ldi	r24, 0xFE	; 254
    907a:	9b e3       	ldi	r25, 0x3B	; 59
    907c:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <dialog_save_valid_function+0x1>
    9080:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <dialog_save_valid_function>
_Z29button_ntp_set_server_onclickjjh():
    9084:	0f b6       	in	r0, 0x3f	; 63
    9086:	f8 94       	cli
    9088:	de bf       	out	0x3e, r29	; 62
    908a:	0f be       	out	0x3f, r0	; 63
    908c:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5808
{
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(ip_text, "%d.%d.%d.%d", device.ntp_server[0], device.ntp_server[1], device.ntp_server[2], device.ntp_server[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_ntp_set_server, &valid_ipv4_address_element_string);
}
    908e:	60 96       	adiw	r28, 0x10	; 16
    9090:	0f b6       	in	r0, 0x3f	; 63
    9092:	f8 94       	cli
    9094:	de bf       	out	0x3e, r29	; 62
    9096:	0f be       	out	0x3f, r0	; 63
    9098:	cd bf       	out	0x3d, r28	; 61
    909a:	df 91       	pop	r29
    909c:	cf 91       	pop	r28
    909e:	1f 91       	pop	r17
    90a0:	0f 91       	pop	r16
    90a2:	08 95       	ret

000090a4 <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z53button_set_brightness_auto_shutdown_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5623
///////////////////////////////////////////////////////////////////////////////////
/*
   Funkce pro automaticke vypinani displaye pri neaktivite
*/
void button_set_brightness_auto_shutdown_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    90a4:	0f 93       	push	r16
    90a6:	1f 93       	push	r17
    90a8:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5624
  strcpy_P(line1, new_text_auto_display_shutdown);
    90aa:	69 ef       	ldi	r22, 0xF9	; 249
    90ac:	7e e5       	ldi	r23, 0x5E	; 94
    90ae:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5625
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) == 0)
    90b2:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
    90b6:	86 fd       	sbrc	r24, 6
    90b8:	07 c0       	rjmp	.+14     	; 0x90c8 <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5626
    strcpy_P(line2, new_text_vypnuto);
    90ba:	66 e1       	ldi	r22, 0x16	; 22
    90bc:	7f e5       	ldi	r23, 0x5F	; 95
    90be:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5629
  else
    sprintf(line2, "Povoleno: %d sec", display_auto_shutdown);
}
    90c0:	1f 91       	pop	r17
    90c2:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5626
*/
void button_set_brightness_auto_shutdown_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  strcpy_P(line1, new_text_auto_display_shutdown);
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) == 0)
    strcpy_P(line2, new_text_vypnuto);
    90c4:	0c 94 f3 d4 	jmp	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5628
  else
    sprintf(line2, "Povoleno: %d sec", display_auto_shutdown);
    90c8:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <display_auto_shutdown>
    90cc:	1f 92       	push	r1
    90ce:	8f 93       	push	r24
    90d0:	8e e6       	ldi	r24, 0x6E	; 110
    90d2:	93 e0       	ldi	r25, 0x03	; 3
    90d4:	9f 93       	push	r25
    90d6:	8f 93       	push	r24
    90d8:	1f 93       	push	r17
    90da:	0f 93       	push	r16
    90dc:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
    90e0:	0f 90       	pop	r0
    90e2:	0f 90       	pop	r0
    90e4:	0f 90       	pop	r0
    90e6:	0f 90       	pop	r0
    90e8:	0f 90       	pop	r0
    90ea:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5629
}
    90ec:	1f 91       	pop	r17
    90ee:	0f 91       	pop	r16
    90f0:	08 95       	ret

000090f2 <ip2CharArray(IPAddress, char*)>:
_Z12ip2CharArray9IPAddressPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1997
/// ip2CharArray - jednoducha funkce prevodu objectu IPAddress na char pole
/*
   ip - object typu IP address
 * *buf - ukazatel na pole s vysledkem
*/
void ip2CharArray(IPAddress ip, char* buf) {
    90f2:	fc 01       	movw	r30, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1998
  sprintf(buf, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);
    90f4:	85 81       	ldd	r24, Z+5	; 0x05
    90f6:	1f 92       	push	r1
    90f8:	8f 93       	push	r24
    90fa:	84 81       	ldd	r24, Z+4	; 0x04
    90fc:	1f 92       	push	r1
    90fe:	8f 93       	push	r24
    9100:	83 81       	ldd	r24, Z+3	; 0x03
    9102:	1f 92       	push	r1
    9104:	8f 93       	push	r24
    9106:	82 81       	ldd	r24, Z+2	; 0x02
    9108:	1f 92       	push	r1
    910a:	8f 93       	push	r24
    910c:	84 e4       	ldi	r24, 0x44	; 68
    910e:	93 e0       	ldi	r25, 0x03	; 3
    9110:	9f 93       	push	r25
    9112:	8f 93       	push	r24
    9114:	7f 93       	push	r23
    9116:	6f 93       	push	r22
    9118:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
    911c:	8d b7       	in	r24, 0x3d	; 61
    911e:	9e b7       	in	r25, 0x3e	; 62
    9120:	0c 96       	adiw	r24, 0x0c	; 12
    9122:	0f b6       	in	r0, 0x3f	; 63
    9124:	f8 94       	cli
    9126:	9e bf       	out	0x3e, r25	; 62
    9128:	0f be       	out	0x3f, r0	; 63
    912a:	8d bf       	out	0x3d, r24	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1999
}
    912c:	08 95       	ret

0000912e <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4658
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
}
/////////////////////
/// typ_button_3 ////
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
    912e:	2f 92       	push	r2
    9130:	3f 92       	push	r3
    9132:	4f 92       	push	r4
    9134:	5f 92       	push	r5
    9136:	6f 92       	push	r6
    9138:	7f 92       	push	r7
    913a:	9f 92       	push	r9
    913c:	af 92       	push	r10
    913e:	bf 92       	push	r11
    9140:	cf 92       	push	r12
    9142:	df 92       	push	r13
    9144:	ef 92       	push	r14
    9146:	ff 92       	push	r15
    9148:	0f 93       	push	r16
    914a:	1f 93       	push	r17
    914c:	cf 93       	push	r28
    914e:	df 93       	push	r29
    9150:	00 d0       	rcall	.+0      	; 0x9152 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x24>
    9152:	1f 92       	push	r1
    9154:	1f 92       	push	r1
    9156:	cd b7       	in	r28, 0x3d	; 61
    9158:	de b7       	in	r29, 0x3e	; 62
    915a:	6c 01       	movw	r12, r24
    915c:	5b 01       	movw	r10, r22
    915e:	1a 01       	movw	r2, r20
    9160:	29 01       	movw	r4, r18
    9162:	90 2e       	mov	r9, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    9164:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
    9168:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
    916c:	10 e0       	ldi	r17, 0x00	; 0
    916e:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4663
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    9170:	3b 01       	movw	r6, r22
    9172:	62 0e       	add	r6, r18
    9174:	73 1e       	adc	r7, r19
    9176:	84 0f       	add	r24, r20
    9178:	95 1f       	adc	r25, r21
    917a:	9d 83       	std	Y+5, r25	; 0x05
    917c:	8c 83       	std	Y+4, r24	; 0x04
    917e:	93 01       	movw	r18, r6
    9180:	20 1b       	sub	r18, r16
    9182:	31 0b       	sbc	r19, r17
    9184:	4c 81       	ldd	r20, Y+4	; 0x04
    9186:	5d 81       	ldd	r21, Y+5	; 0x05
    9188:	40 1b       	sub	r20, r16
    918a:	51 0b       	sbc	r21, r17
    918c:	b5 01       	movw	r22, r10
    918e:	60 0f       	add	r22, r16
    9190:	71 1f       	adc	r23, r17
    9192:	c6 01       	movw	r24, r12
    9194:	80 0f       	add	r24, r16
    9196:	91 1f       	adc	r25, r17
    9198:	0e 94 1f ae 	call	0x15c3e	; 0x15c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>
    919c:	0f 5f       	subi	r16, 0xFF	; 255
    919e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4662
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    91a0:	03 30       	cpi	r16, 0x03	; 3
    91a2:	11 05       	cpc	r17, r1
    91a4:	61 f7       	brne	.-40     	; 0x917e <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4664
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
    91a6:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4665
  str1[1] = 0;
    91a8:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4667
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
    91aa:	ce 01       	movw	r24, r28
    91ac:	01 96       	adiw	r24, 0x01	; 1
    91ae:	fc 01       	movw	r30, r24
    91b0:	01 90       	ld	r0, Z+
    91b2:	00 20       	and	r0, r0
    91b4:	e9 f7       	brne	.-6      	; 0x91b0 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x82>
    91b6:	31 97       	sbiw	r30, 0x01	; 1
    91b8:	e8 1b       	sub	r30, r24
    91ba:	f9 0b       	sbc	r31, r25
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    91bc:	29 2d       	mov	r18, r9
    91be:	22 0f       	add	r18, r18
    91c0:	29 0d       	add	r18, r9
    91c2:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4669
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    91c4:	a2 01       	movw	r20, r4
    91c6:	42 1b       	sub	r20, r18
    91c8:	51 09       	sbc	r21, r1
    91ca:	56 95       	lsr	r21
    91cc:	47 95       	ror	r20
    91ce:	56 95       	lsr	r21
    91d0:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4670
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    91d2:	4a 0d       	add	r20, r10
    91d4:	5b 2d       	mov	r21, r11
    91d6:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    91d8:	26 e0       	ldi	r18, 0x06	; 6
    91da:	e2 9f       	mul	r30, r18
    91dc:	f0 01       	movw	r30, r0
    91de:	11 24       	eor	r1, r1
    91e0:	9e 9e       	mul	r9, r30
    91e2:	90 01       	movw	r18, r0
    91e4:	9f 9e       	mul	r9, r31
    91e6:	30 0d       	add	r19, r0
    91e8:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4668
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
    91ea:	33 27       	eor	r19, r19
    91ec:	b1 01       	movw	r22, r2
    91ee:	62 1b       	sub	r22, r18
    91f0:	73 0b       	sbc	r23, r19
    91f2:	76 95       	lsr	r23
    91f4:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4670
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    91f6:	6c 0d       	add	r22, r12
    91f8:	7d 2d       	mov	r23, r13
    91fa:	71 1d       	adc	r23, r1
    91fc:	ee 24       	eor	r14, r14
    91fe:	ea 94       	dec	r14
    9200:	fe 2c       	mov	r15, r14
    9202:	10 e0       	ldi	r17, 0x00	; 0
    9204:	00 e0       	ldi	r16, 0x00	; 0
    9206:	29 2d       	mov	r18, r9
    9208:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4671
}
    920c:	0f 90       	pop	r0
    920e:	0f 90       	pop	r0
    9210:	0f 90       	pop	r0
    9212:	0f 90       	pop	r0
    9214:	0f 90       	pop	r0
    9216:	df 91       	pop	r29
    9218:	cf 91       	pop	r28
    921a:	1f 91       	pop	r17
    921c:	0f 91       	pop	r16
    921e:	ff 90       	pop	r15
    9220:	ef 90       	pop	r14
    9222:	df 90       	pop	r13
    9224:	cf 90       	pop	r12
    9226:	bf 90       	pop	r11
    9228:	af 90       	pop	r10
    922a:	9f 90       	pop	r9
    922c:	7f 90       	pop	r7
    922e:	6f 90       	pop	r6
    9230:	5f 90       	pop	r5
    9232:	4f 90       	pop	r4
    9234:	3f 90       	pop	r3
    9236:	2f 90       	pop	r2
    9238:	08 95       	ret

0000923a <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_time_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4282
  }
*/

/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    923a:	8f 92       	push	r8
    923c:	9f 92       	push	r9
    923e:	af 92       	push	r10
    9240:	bf 92       	push	r11
    9242:	cf 92       	push	r12
    9244:	df 92       	push	r13
    9246:	ef 92       	push	r14
    9248:	ff 92       	push	r15
    924a:	0f 93       	push	r16
    924c:	1f 93       	push	r17
    924e:	cf 93       	push	r28
    9250:	df 93       	push	r29
    9252:	cd b7       	in	r28, 0x3d	; 61
    9254:	de b7       	in	r29, 0x3e	; 62
    9256:	68 97       	sbiw	r28, 0x18	; 24
    9258:	0f b6       	in	r0, 0x3f	; 63
    925a:	f8 94       	cli
    925c:	de bf       	out	0x3e, r29	; 62
    925e:	0f be       	out	0x3f, r0	; 63
    9260:	cd bf       	out	0x3d, r28	; 61
    9262:	5c 01       	movw	r10, r24
    9264:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4285
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
    9266:	60 ee       	ldi	r22, 0xE0	; 224
    9268:	7d e5       	ldi	r23, 0x5D	; 93
    926a:	ce 01       	movw	r24, r28
    926c:	01 96       	adiw	r24, 0x01	; 1
    926e:	6c 01       	movw	r12, r24
    9270:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4287
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
    9274:	a4 01       	movw	r20, r8
    9276:	4b 5f       	subi	r20, 0xFB	; 251
    9278:	5f 4f       	sbci	r21, 0xFF	; 255
    927a:	b5 01       	movw	r22, r10
    927c:	61 5b       	subi	r22, 0xB1	; 177
    927e:	7f 4f       	sbci	r23, 0xFF	; 255
    9280:	ee 24       	eor	r14, r14
    9282:	ea 94       	dec	r14
    9284:	fe 2c       	mov	r15, r14
    9286:	10 e0       	ldi	r17, 0x00	; 0
    9288:	00 e0       	ldi	r16, 0x00	; 0
    928a:	21 e0       	ldi	r18, 0x01	; 1
    928c:	c6 01       	movw	r24, r12
    928e:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3381
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    9292:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <selftest_data>
_Z27display_element_show_time_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4288
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    9296:	80 fd       	sbrc	r24, 0
    9298:	50 c0       	rjmp	.+160    	; 0x933a <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x100>
    929a:	90 91 43 12 	lds	r25, 0x1243	; 0x801243 <now+0x4>
    929e:	80 91 42 12 	lds	r24, 0x1242	; 0x801242 <now+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4290
  {
    if (uptime % 2 )
    92a2:	20 91 6e 0c 	lds	r18, 0x0C6E	; 0x800c6e <uptime>
    92a6:	20 ff       	sbrs	r18, 0
    92a8:	41 c0       	rjmp	.+130    	; 0x932c <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xf2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4291
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    92aa:	1f 92       	push	r1
    92ac:	9f 93       	push	r25
    92ae:	1f 92       	push	r1
    92b0:	8f 93       	push	r24
    92b2:	84 e6       	ldi	r24, 0x64	; 100
    92b4:	93 e0       	ldi	r25, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4293
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    92b6:	9f 93       	push	r25
    92b8:	8f 93       	push	r24
    92ba:	df 92       	push	r13
    92bc:	cf 92       	push	r12
    92be:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
    92c2:	0f b6       	in	r0, 0x3f	; 63
    92c4:	f8 94       	cli
    92c6:	de bf       	out	0x3e, r29	; 62
    92c8:	0f be       	out	0x3f, r0	; 63
    92ca:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    92cc:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
    92d0:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
_Z27display_element_show_time_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4300
  else
  {
    strcpy(str1, "--:--");
  }
  my_lcd.Set_Draw_color(BLACK);
  show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    92d4:	a4 01       	movw	r20, r8
    92d6:	4c 5e       	subi	r20, 0xEC	; 236
    92d8:	5f 4f       	sbci	r21, 0xFF	; 255
    92da:	b5 01       	movw	r22, r10
    92dc:	6c 5f       	subi	r22, 0xFC	; 252
    92de:	7f 4f       	sbci	r23, 0xFF	; 255
    92e0:	ee 24       	eor	r14, r14
    92e2:	ea 94       	dec	r14
    92e4:	fe 2c       	mov	r15, r14
    92e6:	10 e0       	ldi	r17, 0x00	; 0
    92e8:	00 e0       	ldi	r16, 0x00	; 0
    92ea:	28 e0       	ldi	r18, 0x08	; 8
    92ec:	c6 01       	movw	r24, r12
    92ee:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4301
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    92f2:	94 01       	movw	r18, r8
    92f4:	2c 5a       	subi	r18, 0xAC	; 172
    92f6:	3f 4f       	sbci	r19, 0xFF	; 255
    92f8:	a5 01       	movw	r20, r10
    92fa:	4c 50       	subi	r20, 0x0C	; 12
    92fc:	5f 4f       	sbci	r21, 0xFF	; 255
    92fe:	b4 01       	movw	r22, r8
    9300:	c5 01       	movw	r24, r10
    9302:	0e 94 1f ae 	call	0x15c3e	; 0x15c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4302
}
    9306:	68 96       	adiw	r28, 0x18	; 24
    9308:	0f b6       	in	r0, 0x3f	; 63
    930a:	f8 94       	cli
    930c:	de bf       	out	0x3e, r29	; 62
    930e:	0f be       	out	0x3f, r0	; 63
    9310:	cd bf       	out	0x3d, r28	; 61
    9312:	df 91       	pop	r29
    9314:	cf 91       	pop	r28
    9316:	1f 91       	pop	r17
    9318:	0f 91       	pop	r16
    931a:	ff 90       	pop	r15
    931c:	ef 90       	pop	r14
    931e:	df 90       	pop	r13
    9320:	cf 90       	pop	r12
    9322:	bf 90       	pop	r11
    9324:	af 90       	pop	r10
    9326:	9f 90       	pop	r9
    9328:	8f 90       	pop	r8
    932a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4293
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
  {
    if (uptime % 2 )
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    932c:	1f 92       	push	r1
    932e:	9f 93       	push	r25
    9330:	1f 92       	push	r1
    9332:	8f 93       	push	r24
    9334:	8f e7       	ldi	r24, 0x7F	; 127
    9336:	93 e0       	ldi	r25, 0x03	; 3
    9338:	be cf       	rjmp	.-132    	; 0x92b6 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4297
  }
  else
  {
    strcpy(str1, "--:--");
    933a:	69 e8       	ldi	r22, 0x89	; 137
    933c:	73 e0       	ldi	r23, 0x03	; 3
    933e:	c6 01       	movw	r24, r12
    9340:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
    9344:	c3 cf       	rjmp	.-122    	; 0x92cc <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x92>

00009346 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z25display_element_rectanglejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4251
}

//-----------------------------------------------------------------------------------------------------------------------------------
void display_element_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    9346:	26 0f       	add	r18, r22
    9348:	37 1f       	adc	r19, r23
    934a:	48 0f       	add	r20, r24
    934c:	59 1f       	adc	r21, r25
    934e:	0c 94 1f ae 	jmp	0x15c3e	; 0x15c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>

00009352 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>:
_Z30dialog_set_string_button_clickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1894
  menu_dialog_variable[args1].save_function(args1, args2, args3);
  MenuHistoryPrevMenu(0, 0, 0);
}

void dialog_set_string_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
    9352:	ff 92       	push	r15
    9354:	0f 93       	push	r16
    9356:	1f 93       	push	r17
    9358:	cf 93       	push	r28
    935a:	df 93       	push	r29
    935c:	ec 01       	movw	r28, r24
    935e:	8b 01       	movw	r16, r22
    9360:	f4 2e       	mov	r15, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1895
  if (dialog_save_valid_function() == 1)
    9362:	e0 91 d4 09 	lds	r30, 0x09D4	; 0x8009d4 <dialog_save_valid_function>
    9366:	f0 91 d5 09 	lds	r31, 0x09D5	; 0x8009d5 <dialog_save_valid_function+0x1>
    936a:	19 95       	eicall
    936c:	81 30       	cpi	r24, 0x01	; 1
    936e:	79 f4       	brne	.+30     	; 0x938e <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1897
  {
    dialog_save_string_function(args1, args2, args3);
    9370:	e0 91 d6 09 	lds	r30, 0x09D6	; 0x8009d6 <dialog_save_string_function>
    9374:	f0 91 d7 09 	lds	r31, 0x09D7	; 0x8009d7 <dialog_save_string_function+0x1>
    9378:	4f 2d       	mov	r20, r15
    937a:	b8 01       	movw	r22, r16
    937c:	ce 01       	movw	r24, r28
    937e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1900
    MenuHistoryPrevMenu(0, 0, 0);
  }
}
    9380:	df 91       	pop	r29
    9382:	cf 91       	pop	r28
    9384:	1f 91       	pop	r17
    9386:	0f 91       	pop	r16
    9388:	ff 90       	pop	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1898
void dialog_set_string_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (dialog_save_valid_function() == 1)
  {
    dialog_save_string_function(args1, args2, args3);
    MenuHistoryPrevMenu(0, 0, 0);
    938a:	0c 94 b2 af 	jmp	0x15f64	; 0x15f64 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1900
  }
}
    938e:	df 91       	pop	r29
    9390:	cf 91       	pop	r28
    9392:	1f 91       	pop	r17
    9394:	0f 91       	pop	r16
    9396:	ff 90       	pop	r15
    9398:	08 95       	ret

0000939a <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>:
_Z32dialog_set_variable_button_clickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1888
  dialog_yes_function(dialog_yes_args1, 0, 0);
  MenuHistoryPrevMenu(0, 0, 0);
}

void dialog_set_variable_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
    939a:	1f 93       	push	r17
    939c:	cf 93       	push	r28
    939e:	df 93       	push	r29
    93a0:	ec 01       	movw	r28, r24
    93a2:	14 2f       	mov	r17, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1889
  menu_dialog_variable[args1].save_function(args1, args2, args3);
    93a4:	90 e0       	ldi	r25, 0x00	; 0
    93a6:	80 e0       	ldi	r24, 0x00	; 0
    93a8:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
    93ac:	ab 01       	movw	r20, r22
    93ae:	bc 01       	movw	r22, r24
    93b0:	85 e1       	ldi	r24, 0x15	; 21
    93b2:	8c 9f       	mul	r24, r28
    93b4:	f0 01       	movw	r30, r0
    93b6:	8d 9f       	mul	r24, r29
    93b8:	f0 0d       	add	r31, r0
    93ba:	11 24       	eor	r1, r1
    93bc:	e0 58       	subi	r30, 0x80	; 128
    93be:	f6 4f       	sbci	r31, 0xF6	; 246
    93c0:	03 88       	ldd	r0, Z+19	; 0x13
    93c2:	f4 89       	ldd	r31, Z+20	; 0x14
    93c4:	e0 2d       	mov	r30, r0
    93c6:	21 2f       	mov	r18, r17
    93c8:	ce 01       	movw	r24, r28
    93ca:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1891
  MenuHistoryPrevMenu(0, 0, 0);
}
    93cc:	df 91       	pop	r29
    93ce:	cf 91       	pop	r28
    93d0:	1f 91       	pop	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1890
}

void dialog_set_variable_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
  menu_dialog_variable[args1].save_function(args1, args2, args3);
  MenuHistoryPrevMenu(0, 0, 0);
    93d2:	0c 94 b2 af 	jmp	0x15f64	; 0x15f64 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

000093d6 <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>:
_Z23click_dialog_button_yesjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1883
   args1 - jsou data z definice funkce
   args2 - jsou globalni data z definice menu
*/
void click_dialog_button_yes(uint16_t args1, uint16_t args2, uint8_t args3)
{
  dialog_yes_function(dialog_yes_args1, 0, 0);
    93d6:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <dialog_yes_args1>
    93da:	e0 91 7c 09 	lds	r30, 0x097C	; 0x80097c <dialog_yes_function>
    93de:	f0 91 7d 09 	lds	r31, 0x097D	; 0x80097d <dialog_yes_function+0x1>
    93e2:	40 e0       	ldi	r20, 0x00	; 0
    93e4:	70 e0       	ldi	r23, 0x00	; 0
    93e6:	60 e0       	ldi	r22, 0x00	; 0
    93e8:	90 e0       	ldi	r25, 0x00	; 0
    93ea:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1884
  MenuHistoryPrevMenu(0, 0, 0);
    93ec:	0c 94 b2 af 	jmp	0x15f64	; 0x15f64 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

000093f0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4589
  }
}
///////////////////////
/// typ tlacitka 2 ////
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{
    93f0:	2f 92       	push	r2
    93f2:	3f 92       	push	r3
    93f4:	4f 92       	push	r4
    93f6:	5f 92       	push	r5
    93f8:	6f 92       	push	r6
    93fa:	7f 92       	push	r7
    93fc:	8f 92       	push	r8
    93fe:	9f 92       	push	r9
    9400:	af 92       	push	r10
    9402:	bf 92       	push	r11
    9404:	cf 92       	push	r12
    9406:	df 92       	push	r13
    9408:	ef 92       	push	r14
    940a:	ff 92       	push	r15
    940c:	0f 93       	push	r16
    940e:	1f 93       	push	r17
    9410:	cf 93       	push	r28
    9412:	df 93       	push	r29
    9414:	00 d0       	rcall	.+0      	; 0x9416 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
    9416:	1f 92       	push	r1
    9418:	cd b7       	in	r28, 0x3d	; 61
    941a:	de b7       	in	r29, 0x3e	; 62
    941c:	2c 01       	movw	r4, r24
    941e:	3b 01       	movw	r6, r22
    9420:	0a 83       	std	Y+2, r16	; 0x02
    9422:	eb 82       	std	Y+3, r14	; 0x03
    9424:	3c 2c       	mov	r3, r12
    9426:	2d 2c       	mov	r2, r13
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4602
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
  uint8_t druhy = 0;
  back_color = LIGHTGREY;
  if (state == 0)
    9428:	81 10       	cpse	r8, r1
    942a:	02 c0       	rjmp	.+4      	; 0x9430 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4603
    back_color = color_inactive;
    942c:	3a 2c       	mov	r3, r10
    942e:	2b 2c       	mov	r2, r11
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    9430:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
    9434:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
    9438:	10 e0       	ldi	r17, 0x00	; 0
    943a:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4608
  if (state == 1)
    back_color = color_active;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    943c:	a2 2e       	mov	r10, r18
    943e:	b1 2c       	mov	r11, r1
    9440:	84 2e       	mov	r8, r20
    9442:	91 2c       	mov	r9, r1
    9444:	65 01       	movw	r12, r10
    9446:	c6 0c       	add	r12, r6
    9448:	d7 1c       	adc	r13, r7
    944a:	74 01       	movw	r14, r8
    944c:	e4 0c       	add	r14, r4
    944e:	f5 1c       	adc	r15, r5
    9450:	96 01       	movw	r18, r12
    9452:	20 1b       	sub	r18, r16
    9454:	31 0b       	sbc	r19, r17
    9456:	a7 01       	movw	r20, r14
    9458:	40 1b       	sub	r20, r16
    945a:	51 0b       	sbc	r21, r17
    945c:	b3 01       	movw	r22, r6
    945e:	60 0f       	add	r22, r16
    9460:	71 1f       	adc	r23, r17
    9462:	c2 01       	movw	r24, r4
    9464:	80 0f       	add	r24, r16
    9466:	91 1f       	adc	r25, r17
    9468:	0e 94 1f ae 	call	0x15c3e	; 0x15c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>
    946c:	0f 5f       	subi	r16, 0xFF	; 255
    946e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4607
  if (state == 0)
    back_color = color_inactive;
  if (state == 1)
    back_color = color_active;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    9470:	03 30       	cpi	r16, 0x03	; 3
    9472:	11 05       	cpc	r17, r1
    9474:	69 f7       	brne	.-38     	; 0x9450 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x60>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    9476:	30 92 8e 0f 	sts	0x0F8E, r3	; 0x800f8e <my_lcd+0xa>
    947a:	20 92 8f 0f 	sts	0x0F8F, r2	; 0x800f8f <my_lcd+0xb>
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4610
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    947e:	93 01       	movw	r18, r6
    9480:	23 50       	subi	r18, 0x03	; 3
    9482:	31 09       	sbc	r19, r1
    9484:	2a 0d       	add	r18, r10
    9486:	3b 1d       	adc	r19, r11
    9488:	a2 01       	movw	r20, r4
    948a:	43 50       	subi	r20, 0x03	; 3
    948c:	51 09       	sbc	r21, r1
    948e:	48 0d       	add	r20, r8
    9490:	59 1d       	adc	r21, r9
    9492:	b3 01       	movw	r22, r6
    9494:	6d 5f       	subi	r22, 0xFD	; 253
    9496:	7f 4f       	sbci	r23, 0xFF	; 255
    9498:	c2 01       	movw	r24, r4
    949a:	03 96       	adiw	r24, 0x03	; 3
    949c:	0e 94 78 ae 	call	0x15cf0	; 0x15cf0 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.223]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4611
  if (strlen(line1) > 0)
    94a0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    94a2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    94a4:	80 81       	ld	r24, Z
    94a6:	88 23       	and	r24, r24
    94a8:	09 f4       	brne	.+2      	; 0x94ac <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xbc>
    94aa:	a1 c0       	rjmp	.+322    	; 0x95ee <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4613
  {
    prvni = 1;
    94ac:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4614
    num_lines_const = 2;
    94ae:	f2 e0       	ldi	r31, 0x02	; 2
    94b0:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4616
  }
  if (strlen(line2) > 0)
    94b2:	ec 8d       	ldd	r30, Y+28	; 0x1c
    94b4:	fd 8d       	ldd	r31, Y+29	; 0x1d
    94b6:	90 81       	ld	r25, Z
    94b8:	99 23       	and	r25, r25
    94ba:	09 f4       	brne	.+2      	; 0x94be <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xce>
    94bc:	9b c0       	rjmp	.+310    	; 0x95f4 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x204>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4619
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
    94be:	f9 81       	ldd	r31, Y+1	; 0x01
    94c0:	fe 5f       	subi	r31, 0xFE	; 254
    94c2:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4618
    prvni = 1;
    num_lines_const = 2;
  }
  if (strlen(line2) > 0)
  {
    druhy = 1;
    94c4:	21 e0       	ldi	r18, 0x01	; 1
    94c6:	2c 83       	std	Y+4, r18	; 0x04
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4593
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{

  uint16_t back_color;
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    94c8:	d1 2c       	mov	r13, r1
    94ca:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4621
  if (strlen(line2) > 0)
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
    94cc:	81 30       	cpi	r24, 0x01	; 1
    94ce:	d1 f5       	brne	.+116    	; 0x9544 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x154>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4623
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    94d0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    94d2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    94d4:	01 90       	ld	r0, Z+
    94d6:	00 20       	and	r0, r0
    94d8:	e9 f7       	brne	.-6      	; 0x94d4 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xe4>
    94da:	9f 01       	movw	r18, r30
    94dc:	21 50       	subi	r18, 0x01	; 1
    94de:	31 09       	sbc	r19, r1
    94e0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    94e2:	5b 8d       	ldd	r21, Y+27	; 0x1b
    94e4:	24 1b       	sub	r18, r20
    94e6:	35 0b       	sbc	r19, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    94e8:	8a 81       	ldd	r24, Y+2	; 0x02
    94ea:	88 0f       	add	r24, r24
    94ec:	5a 81       	ldd	r21, Y+2	; 0x02
    94ee:	85 0f       	add	r24, r21
    94f0:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4625
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    94f2:	f5 01       	movw	r30, r10
    94f4:	e8 1b       	sub	r30, r24
    94f6:	f1 09       	sbc	r31, r1
    94f8:	cf 01       	movw	r24, r30
    94fa:	f9 81       	ldd	r31, Y+1	; 0x01
    94fc:	6f 2f       	mov	r22, r31
    94fe:	70 e0       	ldi	r23, 0x00	; 0
    9500:	0e 94 f5 de 	call	0x1bdea	; 0x1bdea <__divmodhi4>
    9504:	6b 01       	movw	r12, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4626
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    9506:	a3 01       	movw	r20, r6
    9508:	41 50       	subi	r20, 0x01	; 1
    950a:	51 09       	sbc	r21, r1
    950c:	46 0f       	add	r20, r22
    950e:	57 1f       	adc	r21, r23
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    9510:	66 e0       	ldi	r22, 0x06	; 6
    9512:	26 9f       	mul	r18, r22
    9514:	90 01       	movw	r18, r0
    9516:	11 24       	eor	r1, r1
    9518:	ea 81       	ldd	r30, Y+2	; 0x02
    951a:	e2 9f       	mul	r30, r18
    951c:	c0 01       	movw	r24, r0
    951e:	e3 9f       	mul	r30, r19
    9520:	90 0d       	add	r25, r0
    9522:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4624
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    9524:	b4 01       	movw	r22, r8
    9526:	68 1b       	sub	r22, r24
    9528:	79 0b       	sbc	r23, r25
    952a:	76 95       	lsr	r23
    952c:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4626
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    952e:	64 0d       	add	r22, r4
    9530:	75 1d       	adc	r23, r5
    9532:	e3 2c       	mov	r14, r3
    9534:	f2 2c       	mov	r15, r2
    9536:	10 e0       	ldi	r17, 0x00	; 0
    9538:	00 e0       	ldi	r16, 0x00	; 0
    953a:	2e 2f       	mov	r18, r30
    953c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    953e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    9540:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4628
  }
  if (druhy == 1)
    9544:	fc 81       	ldd	r31, Y+4	; 0x04
    9546:	f1 30       	cpi	r31, 0x01	; 1
    9548:	d9 f5       	brne	.+118    	; 0x95c0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4630
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    954a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    954c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    954e:	01 90       	ld	r0, Z+
    9550:	00 20       	and	r0, r0
    9552:	e9 f7       	brne	.-6      	; 0x954e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x15e>
    9554:	31 97       	sbiw	r30, 0x01	; 1
    9556:	2c 8d       	ldd	r18, Y+28	; 0x1c
    9558:	3d 8d       	ldd	r19, Y+29	; 0x1d
    955a:	e2 1b       	sub	r30, r18
    955c:	f3 0b       	sbc	r31, r19
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    955e:	8b 81       	ldd	r24, Y+3	; 0x03
    9560:	88 0f       	add	r24, r24
    9562:	3b 81       	ldd	r19, Y+3	; 0x03
    9564:	83 0f       	add	r24, r19
    9566:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4632
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    9568:	a5 01       	movw	r20, r10
    956a:	48 1b       	sub	r20, r24
    956c:	51 09       	sbc	r21, r1
    956e:	ca 01       	movw	r24, r20
    9570:	88 0f       	add	r24, r24
    9572:	99 1f       	adc	r25, r25
    9574:	59 81       	ldd	r21, Y+1	; 0x01
    9576:	65 2f       	mov	r22, r21
    9578:	70 e0       	ldi	r23, 0x00	; 0
    957a:	0e 94 f5 de 	call	0x1bdea	; 0x1bdea <__divmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4633
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    957e:	81 e0       	ldi	r24, 0x01	; 1
    9580:	68 1a       	sub	r6, r24
    9582:	71 08       	sbc	r7, r1
    9584:	66 0e       	add	r6, r22
    9586:	77 1e       	adc	r7, r23
    9588:	a3 01       	movw	r20, r6
    958a:	4c 0d       	add	r20, r12
    958c:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    958e:	96 e0       	ldi	r25, 0x06	; 6
    9590:	e9 9f       	mul	r30, r25
    9592:	f0 01       	movw	r30, r0
    9594:	11 24       	eor	r1, r1
    9596:	3e 9f       	mul	r19, r30
    9598:	c0 01       	movw	r24, r0
    959a:	3f 9f       	mul	r19, r31
    959c:	90 0d       	add	r25, r0
    959e:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4631
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    95a0:	b4 01       	movw	r22, r8
    95a2:	68 1b       	sub	r22, r24
    95a4:	79 0b       	sbc	r23, r25
    95a6:	76 95       	lsr	r23
    95a8:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4633
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    95aa:	64 0d       	add	r22, r4
    95ac:	75 1d       	adc	r23, r5
    95ae:	e3 2c       	mov	r14, r3
    95b0:	f2 2c       	mov	r15, r2
    95b2:	10 e0       	ldi	r17, 0x00	; 0
    95b4:	00 e0       	ldi	r16, 0x00	; 0
    95b6:	23 2f       	mov	r18, r19
    95b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    95ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
    95bc:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4635
  }
}
    95c0:	0f 90       	pop	r0
    95c2:	0f 90       	pop	r0
    95c4:	0f 90       	pop	r0
    95c6:	0f 90       	pop	r0
    95c8:	df 91       	pop	r29
    95ca:	cf 91       	pop	r28
    95cc:	1f 91       	pop	r17
    95ce:	0f 91       	pop	r16
    95d0:	ff 90       	pop	r15
    95d2:	ef 90       	pop	r14
    95d4:	df 90       	pop	r13
    95d6:	cf 90       	pop	r12
    95d8:	bf 90       	pop	r11
    95da:	af 90       	pop	r10
    95dc:	9f 90       	pop	r9
    95de:	8f 90       	pop	r8
    95e0:	7f 90       	pop	r7
    95e2:	6f 90       	pop	r6
    95e4:	5f 90       	pop	r5
    95e6:	4f 90       	pop	r4
    95e8:	3f 90       	pop	r3
    95ea:	2f 90       	pop	r2
    95ec:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4599
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
    95ee:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4598
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    95f0:	19 82       	std	Y+1, r1	; 0x01
    95f2:	5f cf       	rjmp	.-322    	; 0x94b2 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4600
  uint8_t prvni = 0;
  uint8_t druhy = 0;
    95f4:	1c 82       	std	Y+4, r1	; 0x04
    95f6:	68 cf       	rjmp	.-304    	; 0x94c8 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xd8>

000095f8 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4553
//////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
    95f8:	2f 92       	push	r2
    95fa:	3f 92       	push	r3
    95fc:	4f 92       	push	r4
    95fe:	5f 92       	push	r5
    9600:	6f 92       	push	r6
    9602:	7f 92       	push	r7
    9604:	8f 92       	push	r8
    9606:	9f 92       	push	r9
    9608:	af 92       	push	r10
    960a:	bf 92       	push	r11
    960c:	cf 92       	push	r12
    960e:	df 92       	push	r13
    9610:	ef 92       	push	r14
    9612:	ff 92       	push	r15
    9614:	0f 93       	push	r16
    9616:	1f 93       	push	r17
    9618:	cf 93       	push	r28
    961a:	df 93       	push	r29
    961c:	00 d0       	rcall	.+0      	; 0x961e <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    961e:	1f 92       	push	r1
    9620:	1f 92       	push	r1
    9622:	cd b7       	in	r28, 0x3d	; 61
    9624:	de b7       	in	r29, 0x3e	; 62
    9626:	2c 01       	movw	r4, r24
    9628:	3b 01       	movw	r6, r22
    962a:	5a 83       	std	Y+2, r21	; 0x02
    962c:	49 83       	std	Y+1, r20	; 0x01
    962e:	19 01       	movw	r2, r18
    9630:	90 2e       	mov	r9, r16
    9632:	eb 82       	std	Y+3, r14	; 0x03
    9634:	dd 82       	std	Y+5, r13	; 0x05
    9636:	cc 82       	std	Y+4, r12	; 0x04
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    9638:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
    963c:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
    9640:	10 e0       	ldi	r17, 0x00	; 0
    9642:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4563
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    9644:	6b 01       	movw	r12, r22
    9646:	c2 0e       	add	r12, r18
    9648:	d3 1e       	adc	r13, r19
    964a:	7a 01       	movw	r14, r20
    964c:	e8 0e       	add	r14, r24
    964e:	f9 1e       	adc	r15, r25
    9650:	96 01       	movw	r18, r12
    9652:	20 1b       	sub	r18, r16
    9654:	31 0b       	sbc	r19, r17
    9656:	a7 01       	movw	r20, r14
    9658:	40 1b       	sub	r20, r16
    965a:	51 0b       	sbc	r21, r17
    965c:	b8 01       	movw	r22, r16
    965e:	66 0d       	add	r22, r6
    9660:	77 1d       	adc	r23, r7
    9662:	c8 01       	movw	r24, r16
    9664:	84 0d       	add	r24, r4
    9666:	95 1d       	adc	r25, r5
    9668:	0e 94 1f ae 	call	0x15c3e	; 0x15c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>
    966c:	0f 5f       	subi	r16, 0xFF	; 255
    966e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4562
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    9670:	03 30       	cpi	r16, 0x03	; 3
    9672:	11 05       	cpc	r17, r1
    9674:	69 f7       	brne	.-38     	; 0x9650 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x58>
    9676:	91 01       	movw	r18, r2
    9678:	23 50       	subi	r18, 0x03	; 3
    967a:	31 09       	sbc	r19, r1
    967c:	49 81       	ldd	r20, Y+1	; 0x01
    967e:	5a 81       	ldd	r21, Y+2	; 0x02
    9680:	43 50       	subi	r20, 0x03	; 3
    9682:	51 09       	sbc	r21, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4564
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  if (clean == 1)
    9684:	61 e0       	ldi	r22, 0x01	; 1
    9686:	86 12       	cpse	r8, r22
    9688:	11 c0       	rjmp	.+34     	; 0x96ac <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xb4>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    968a:	8f ef       	ldi	r24, 0xFF	; 255
    968c:	9f ef       	ldi	r25, 0xFF	; 255
    968e:	90 93 8f 0f 	sts	0x0F8F, r25	; 0x800f8f <my_lcd+0xb>
    9692:	80 93 8e 0f 	sts	0x0F8E, r24	; 0x800f8e <my_lcd+0xa>
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4567
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    9696:	26 0d       	add	r18, r6
    9698:	37 1d       	adc	r19, r7
    969a:	44 0d       	add	r20, r4
    969c:	55 1d       	adc	r21, r5
    969e:	b3 01       	movw	r22, r6
    96a0:	6d 5f       	subi	r22, 0xFD	; 253
    96a2:	7f 4f       	sbci	r23, 0xFF	; 255
    96a4:	c2 01       	movw	r24, r4
    96a6:	03 96       	adiw	r24, 0x03	; 3
    96a8:	0e 94 78 ae 	call	0x15cf0	; 0x15cf0 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.223]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4569
  }
  if (strlen(line1) > 0)
    96ac:	ec 81       	ldd	r30, Y+4	; 0x04
    96ae:	fd 81       	ldd	r31, Y+5	; 0x05
    96b0:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4560
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    96b2:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4555
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    96b4:	d1 2c       	mov	r13, r1
    96b6:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4569
  if (clean == 1)
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
    96b8:	88 23       	and	r24, r24
    96ba:	91 f1       	breq	.+100    	; 0x9720 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4572
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    96bc:	01 90       	ld	r0, Z+
    96be:	00 20       	and	r0, r0
    96c0:	e9 f7       	brne	.-6      	; 0x96bc <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xc4>
    96c2:	31 97       	sbiw	r30, 0x01	; 1
    96c4:	4c 81       	ldd	r20, Y+4	; 0x04
    96c6:	5d 81       	ldd	r21, Y+5	; 0x05
    96c8:	e4 1b       	sub	r30, r20
    96ca:	f5 0b       	sbc	r31, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    96cc:	89 2d       	mov	r24, r9
    96ce:	88 0f       	add	r24, r24
    96d0:	89 0d       	add	r24, r9
    96d2:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4574
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    96d4:	61 01       	movw	r12, r2
    96d6:	c8 1a       	sub	r12, r24
    96d8:	d1 08       	sbc	r13, r1
    96da:	d6 94       	lsr	r13
    96dc:	c7 94       	ror	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4575
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    96de:	a3 01       	movw	r20, r6
    96e0:	41 50       	subi	r20, 0x01	; 1
    96e2:	51 09       	sbc	r21, r1
    96e4:	4c 0d       	add	r20, r12
    96e6:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    96e8:	66 e0       	ldi	r22, 0x06	; 6
    96ea:	e6 9f       	mul	r30, r22
    96ec:	f0 01       	movw	r30, r0
    96ee:	11 24       	eor	r1, r1
    96f0:	9e 9e       	mul	r9, r30
    96f2:	c0 01       	movw	r24, r0
    96f4:	9f 9e       	mul	r9, r31
    96f6:	90 0d       	add	r25, r0
    96f8:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4573
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    96fa:	69 81       	ldd	r22, Y+1	; 0x01
    96fc:	7a 81       	ldd	r23, Y+2	; 0x02
    96fe:	68 1b       	sub	r22, r24
    9700:	79 0b       	sbc	r23, r25
    9702:	76 95       	lsr	r23
    9704:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4575
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    9706:	64 0d       	add	r22, r4
    9708:	75 1d       	adc	r23, r5
    970a:	ee 24       	eor	r14, r14
    970c:	ea 94       	dec	r14
    970e:	fe 2c       	mov	r15, r14
    9710:	10 e0       	ldi	r17, 0x00	; 0
    9712:	00 e0       	ldi	r16, 0x00	; 0
    9714:	29 2d       	mov	r18, r9
    9716:	8c 81       	ldd	r24, Y+4	; 0x04
    9718:	9d 81       	ldd	r25, Y+5	; 0x05
    971a:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4571
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    971e:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4577
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
    9720:	f5 01       	movw	r30, r10
    9722:	80 81       	ld	r24, Z
    9724:	88 23       	and	r24, r24
    9726:	b9 f1       	breq	.+110    	; 0x9796 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4580
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    9728:	01 90       	ld	r0, Z+
    972a:	00 20       	and	r0, r0
    972c:	e9 f7       	brne	.-6      	; 0x9728 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x130>
    972e:	9f 01       	movw	r18, r30
    9730:	21 50       	subi	r18, 0x01	; 1
    9732:	31 09       	sbc	r19, r1
    9734:	2a 19       	sub	r18, r10
    9736:	3b 09       	sbc	r19, r11
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    9738:	8b 81       	ldd	r24, Y+3	; 0x03
    973a:	88 0f       	add	r24, r24
    973c:	fb 81       	ldd	r31, Y+3	; 0x03
    973e:	8f 0f       	add	r24, r31
    9740:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4582
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    9742:	a1 01       	movw	r20, r2
    9744:	48 1b       	sub	r20, r24
    9746:	51 09       	sbc	r21, r1
    9748:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4579
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    974a:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4582
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    974c:	70 e0       	ldi	r23, 0x00	; 0
    974e:	0e 94 e1 de 	call	0x1bdc2	; 0x1bdc2 <__udivmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4583
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    9752:	51 e0       	ldi	r21, 0x01	; 1
    9754:	65 1a       	sub	r6, r21
    9756:	71 08       	sbc	r7, r1
    9758:	c6 0c       	add	r12, r6
    975a:	d7 1c       	adc	r13, r7
    975c:	ab 01       	movw	r20, r22
    975e:	4c 0d       	add	r20, r12
    9760:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    9762:	66 e0       	ldi	r22, 0x06	; 6
    9764:	26 9f       	mul	r18, r22
    9766:	90 01       	movw	r18, r0
    9768:	11 24       	eor	r1, r1
    976a:	f2 9f       	mul	r31, r18
    976c:	c0 01       	movw	r24, r0
    976e:	f3 9f       	mul	r31, r19
    9770:	90 0d       	add	r25, r0
    9772:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4581
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    9774:	69 81       	ldd	r22, Y+1	; 0x01
    9776:	7a 81       	ldd	r23, Y+2	; 0x02
    9778:	68 1b       	sub	r22, r24
    977a:	79 0b       	sbc	r23, r25
    977c:	76 95       	lsr	r23
    977e:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4583
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    9780:	64 0d       	add	r22, r4
    9782:	75 1d       	adc	r23, r5
    9784:	ee 24       	eor	r14, r14
    9786:	ea 94       	dec	r14
    9788:	fe 2c       	mov	r15, r14
    978a:	10 e0       	ldi	r17, 0x00	; 0
    978c:	00 e0       	ldi	r16, 0x00	; 0
    978e:	2f 2f       	mov	r18, r31
    9790:	c5 01       	movw	r24, r10
    9792:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4585
  }
}
    9796:	0f 90       	pop	r0
    9798:	0f 90       	pop	r0
    979a:	0f 90       	pop	r0
    979c:	0f 90       	pop	r0
    979e:	0f 90       	pop	r0
    97a0:	df 91       	pop	r29
    97a2:	cf 91       	pop	r28
    97a4:	1f 91       	pop	r17
    97a6:	0f 91       	pop	r16
    97a8:	ff 90       	pop	r15
    97aa:	ef 90       	pop	r14
    97ac:	df 90       	pop	r13
    97ae:	cf 90       	pop	r12
    97b0:	bf 90       	pop	r11
    97b2:	af 90       	pop	r10
    97b4:	9f 90       	pop	r9
    97b6:	8f 90       	pop	r8
    97b8:	7f 90       	pop	r7
    97ba:	6f 90       	pop	r6
    97bc:	5f 90       	pop	r5
    97be:	4f 90       	pop	r4
    97c0:	3f 90       	pop	r3
    97c2:	2f 90       	pop	r2
    97c4:	08 95       	ret

000097c6 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z31display_element_vertical_sliderjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4504
///
/*
   dynamicke posouvani v menu
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    97c6:	4f 92       	push	r4
    97c8:	5f 92       	push	r5
    97ca:	6f 92       	push	r6
    97cc:	7f 92       	push	r7
    97ce:	8f 92       	push	r8
    97d0:	9f 92       	push	r9
    97d2:	af 92       	push	r10
    97d4:	bf 92       	push	r11
    97d6:	cf 92       	push	r12
    97d8:	df 92       	push	r13
    97da:	ef 92       	push	r14
    97dc:	ff 92       	push	r15
    97de:	0f 93       	push	r16
    97e0:	cf 93       	push	r28
    97e2:	df 93       	push	r29
    97e4:	ec 01       	movw	r28, r24
    97e6:	6b 01       	movw	r12, r22
    97e8:	2a 01       	movw	r4, r20
    97ea:	59 01       	movw	r10, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    97ec:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
    97f0:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
    97f4:	f1 2c       	mov	r15, r1
    97f6:	e1 2c       	mov	r14, r1
_Z31display_element_vertical_sliderjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4508
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    97f8:	3b 01       	movw	r6, r22
    97fa:	62 0e       	add	r6, r18
    97fc:	73 1e       	adc	r7, r19
    97fe:	4c 01       	movw	r8, r24
    9800:	84 0e       	add	r8, r20
    9802:	95 1e       	adc	r9, r21
    9804:	93 01       	movw	r18, r6
    9806:	2e 19       	sub	r18, r14
    9808:	3f 09       	sbc	r19, r15
    980a:	a4 01       	movw	r20, r8
    980c:	4e 19       	sub	r20, r14
    980e:	5f 09       	sbc	r21, r15
    9810:	b7 01       	movw	r22, r14
    9812:	6c 0d       	add	r22, r12
    9814:	7d 1d       	adc	r23, r13
    9816:	c7 01       	movw	r24, r14
    9818:	8c 0f       	add	r24, r28
    981a:	9d 1f       	adc	r25, r29
    981c:	0e 94 1f ae 	call	0x15c3e	; 0x15c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>
    9820:	8f ef       	ldi	r24, 0xFF	; 255
    9822:	e8 1a       	sub	r14, r24
    9824:	f8 0a       	sbc	r15, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4507
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    9826:	83 e0       	ldi	r24, 0x03	; 3
    9828:	e8 16       	cp	r14, r24
    982a:	f1 04       	cpc	r15, r1
    982c:	59 f7       	brne	.-42     	; 0x9804 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x3e>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    982e:	8f ef       	ldi	r24, 0xFF	; 255
    9830:	9f ef       	ldi	r25, 0xFF	; 255
    9832:	90 93 8f 0f 	sts	0x0F8F, r25	; 0x800f8f <my_lcd+0xb>
    9836:	80 93 8e 0f 	sts	0x0F8E, r24	; 0x800f8e <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4510
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    983a:	83 e0       	ldi	r24, 0x03	; 3
    983c:	48 1a       	sub	r4, r24
    983e:	51 08       	sbc	r5, r1
    9840:	4c 0e       	add	r4, r28
    9842:	5d 1e       	adc	r5, r29
    9844:	23 96       	adiw	r28, 0x03	; 3
    9846:	95 01       	movw	r18, r10
    9848:	23 50       	subi	r18, 0x03	; 3
    984a:	31 09       	sbc	r19, r1
    984c:	2c 0d       	add	r18, r12
    984e:	3d 1d       	adc	r19, r13
    9850:	b6 01       	movw	r22, r12
    9852:	6d 5f       	subi	r22, 0xFD	; 253
    9854:	7f 4f       	sbci	r23, 0xFF	; 255
    9856:	a2 01       	movw	r20, r4
    9858:	ce 01       	movw	r24, r28
    985a:	0e 94 78 ae 	call	0x15cf0	; 0x15cf0 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.223]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4511
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
    985e:	60 91 7a 09 	lds	r22, 0x097A	; 0x80097a <menu_slider_data_max>
    9862:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <menu_slider_data_max_element>
    9866:	68 1b       	sub	r22, r24
    9868:	77 0b       	sbc	r23, r23
    986a:	6f 5f       	subi	r22, 0xFF	; 255
    986c:	7f 4f       	sbci	r23, 0xFF	; 255
    986e:	c5 01       	movw	r24, r10
    9870:	0e 94 e1 de 	call	0x1bdc2	; 0x1bdc2 <__udivmodhi4>
    9874:	e0 2f       	mov	r30, r16
    9876:	f0 e0       	ldi	r31, 0x00	; 0
    9878:	ed 58       	subi	r30, 0x8D	; 141
    987a:	f6 4f       	sbci	r31, 0xF6	; 246
    987c:	80 81       	ld	r24, Z
    987e:	86 9f       	mul	r24, r22
    9880:	60 2d       	mov	r22, r0
    9882:	11 24       	eor	r1, r1
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    9884:	8a e9       	ldi	r24, 0x9A	; 154
    9886:	96 ed       	ldi	r25, 0xD6	; 214
    9888:	90 93 8f 0f 	sts	0x0F8F, r25	; 0x800f8f <my_lcd+0xb>
    988c:	80 93 8e 0f 	sts	0x0F8E, r24	; 0x800f8e <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4513
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    9890:	6c 0d       	add	r22, r12
    9892:	7d 2d       	mov	r23, r13
    9894:	71 1d       	adc	r23, r1
    9896:	9b 01       	movw	r18, r22
    9898:	26 5f       	subi	r18, 0xF6	; 246
    989a:	3f 4f       	sbci	r19, 0xFF	; 255
    989c:	6b 5f       	subi	r22, 0xFB	; 251
    989e:	7f 4f       	sbci	r23, 0xFF	; 255
    98a0:	a2 01       	movw	r20, r4
    98a2:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4514
}
    98a4:	df 91       	pop	r29
    98a6:	cf 91       	pop	r28
    98a8:	0f 91       	pop	r16
    98aa:	ff 90       	pop	r15
    98ac:	ef 90       	pop	r14
    98ae:	df 90       	pop	r13
    98b0:	cf 90       	pop	r12
    98b2:	bf 90       	pop	r11
    98b4:	af 90       	pop	r10
    98b6:	9f 90       	pop	r9
    98b8:	8f 90       	pop	r8
    98ba:	7f 90       	pop	r7
    98bc:	6f 90       	pop	r6
    98be:	5f 90       	pop	r5
    98c0:	4f 90       	pop	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4513
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    98c2:	0c 94 78 ae 	jmp	0x15cf0	; 0x15cf0 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.223]>

000098c6 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4483
  if (strlen(text) > 0)
    show_string(text, x + 5 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
}
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    98c6:	6f 92       	push	r6
    98c8:	7f 92       	push	r7
    98ca:	8f 92       	push	r8
    98cc:	9f 92       	push	r9
    98ce:	af 92       	push	r10
    98d0:	bf 92       	push	r11
    98d2:	cf 92       	push	r12
    98d4:	df 92       	push	r13
    98d6:	ef 92       	push	r14
    98d8:	ff 92       	push	r15
    98da:	0f 93       	push	r16
    98dc:	1f 93       	push	r17
    98de:	cf 93       	push	r28
    98e0:	df 93       	push	r29
    98e2:	6c 01       	movw	r12, r24
    98e4:	8b 01       	movw	r16, r22
    98e6:	3a 01       	movw	r6, r20
    98e8:	e9 01       	movw	r28, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    98ea:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
    98ee:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
    98f2:	f1 2c       	mov	r15, r1
    98f4:	e1 2c       	mov	r14, r1
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4487
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    98f6:	4b 01       	movw	r8, r22
    98f8:	82 0e       	add	r8, r18
    98fa:	93 1e       	adc	r9, r19
    98fc:	5c 01       	movw	r10, r24
    98fe:	a4 0e       	add	r10, r20
    9900:	b5 1e       	adc	r11, r21
    9902:	94 01       	movw	r18, r8
    9904:	2e 19       	sub	r18, r14
    9906:	3f 09       	sbc	r19, r15
    9908:	a5 01       	movw	r20, r10
    990a:	4e 19       	sub	r20, r14
    990c:	5f 09       	sbc	r21, r15
    990e:	b7 01       	movw	r22, r14
    9910:	60 0f       	add	r22, r16
    9912:	71 1f       	adc	r23, r17
    9914:	c7 01       	movw	r24, r14
    9916:	8c 0d       	add	r24, r12
    9918:	9d 1d       	adc	r25, r13
    991a:	0e 94 1f ae 	call	0x15c3e	; 0x15c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>
    991e:	2f ef       	ldi	r18, 0xFF	; 255
    9920:	e2 1a       	sub	r14, r18
    9922:	f2 0a       	sbc	r15, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4486
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    9924:	83 e0       	ldi	r24, 0x03	; 3
    9926:	e8 16       	cp	r14, r24
    9928:	f1 04       	cpc	r15, r1
    992a:	59 f7       	brne	.-42     	; 0x9902 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x3c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    992c:	8f ef       	ldi	r24, 0xFF	; 255
    992e:	9f ef       	ldi	r25, 0xFF	; 255
    9930:	90 93 8f 0f 	sts	0x0F8F, r25	; 0x800f8f <my_lcd+0xb>
    9934:	80 93 8e 0f 	sts	0x0F8E, r24	; 0x800f8e <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4489
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    9938:	9e 01       	movw	r18, r28
    993a:	23 50       	subi	r18, 0x03	; 3
    993c:	31 09       	sbc	r19, r1
    993e:	20 0f       	add	r18, r16
    9940:	31 1f       	adc	r19, r17
    9942:	a3 01       	movw	r20, r6
    9944:	43 50       	subi	r20, 0x03	; 3
    9946:	51 09       	sbc	r21, r1
    9948:	4c 0d       	add	r20, r12
    994a:	5d 1d       	adc	r21, r13
    994c:	b8 01       	movw	r22, r16
    994e:	6d 5f       	subi	r22, 0xFD	; 253
    9950:	7f 4f       	sbci	r23, 0xFF	; 255
    9952:	c6 01       	movw	r24, r12
    9954:	03 96       	adiw	r24, 0x03	; 3
    9956:	0e 94 78 ae 	call	0x15cf0	; 0x15cf0 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.223]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    995a:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
    995e:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4492

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
    9962:	8a ed       	ldi	r24, 0xDA	; 218
    9964:	99 e0       	ldi	r25, 0x09	; 9
    9966:	fc 01       	movw	r30, r24
    9968:	01 90       	ld	r0, Z+
    996a:	00 20       	and	r0, r0
    996c:	e9 f7       	brne	.-6      	; 0x9968 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xa2>
    996e:	cf 01       	movw	r24, r30
    9970:	8b 5d       	subi	r24, 0xDB	; 219
    9972:	99 40       	sbci	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4494
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    9974:	ae 01       	movw	r20, r28
    9976:	4c 50       	subi	r20, 0x0C	; 12
    9978:	51 09       	sbc	r21, r1
    997a:	56 95       	lsr	r21
    997c:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4495
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    997e:	01 50       	subi	r16, 0x01	; 1
    9980:	11 09       	sbc	r17, r1
    9982:	40 0f       	add	r20, r16
    9984:	51 1f       	adc	r21, r17
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    9986:	f6 e0       	ldi	r31, 0x06	; 6
    9988:	8f 9f       	mul	r24, r31
    998a:	c0 01       	movw	r24, r0
    998c:	11 24       	eor	r1, r1
    998e:	88 0f       	add	r24, r24
    9990:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4493
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
  posx1 = (size_x - tmp1) / 2;
    9992:	b3 01       	movw	r22, r6
    9994:	68 1b       	sub	r22, r24
    9996:	79 0b       	sbc	r23, r25
    9998:	76 95       	lsr	r23
    999a:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4495
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    999c:	6c 0d       	add	r22, r12
    999e:	7d 1d       	adc	r23, r13
    99a0:	ee 24       	eor	r14, r14
    99a2:	ea 94       	dec	r14
    99a4:	fe 2c       	mov	r15, r14
    99a6:	10 e0       	ldi	r17, 0x00	; 0
    99a8:	00 e0       	ldi	r16, 0x00	; 0
    99aa:	22 e0       	ldi	r18, 0x02	; 2
    99ac:	8a ed       	ldi	r24, 0xDA	; 218
    99ae:	99 e0       	ldi	r25, 0x09	; 9
    99b0:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4496
}
    99b4:	df 91       	pop	r29
    99b6:	cf 91       	pop	r28
    99b8:	1f 91       	pop	r17
    99ba:	0f 91       	pop	r16
    99bc:	ff 90       	pop	r15
    99be:	ef 90       	pop	r14
    99c0:	df 90       	pop	r13
    99c2:	cf 90       	pop	r12
    99c4:	bf 90       	pop	r11
    99c6:	af 90       	pop	r10
    99c8:	9f 90       	pop	r9
    99ca:	8f 90       	pop	r8
    99cc:	7f 90       	pop	r7
    99ce:	6f 90       	pop	r6
    99d0:	08 95       	ret

000099d2 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4454
    }
  }
}
////////////////////////////////////////////////////////
void display_element_dialog_set_variable(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t idx, uint8_t args2, char *text)
{
    99d2:	2f 92       	push	r2
    99d4:	3f 92       	push	r3
    99d6:	4f 92       	push	r4
    99d8:	5f 92       	push	r5
    99da:	6f 92       	push	r6
    99dc:	7f 92       	push	r7
    99de:	8f 92       	push	r8
    99e0:	9f 92       	push	r9
    99e2:	af 92       	push	r10
    99e4:	bf 92       	push	r11
    99e6:	cf 92       	push	r12
    99e8:	df 92       	push	r13
    99ea:	ef 92       	push	r14
    99ec:	ff 92       	push	r15
    99ee:	0f 93       	push	r16
    99f0:	1f 93       	push	r17
    99f2:	cf 93       	push	r28
    99f4:	df 93       	push	r29
    99f6:	00 d0       	rcall	.+0      	; 0x99f8 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x26>
    99f8:	00 d0       	rcall	.+0      	; 0x99fa <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x28>
    99fa:	00 d0       	rcall	.+0      	; 0x99fc <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x2a>
    99fc:	1f 92       	push	r1
    99fe:	cd b7       	in	r28, 0x3d	; 61
    9a00:	de b7       	in	r29, 0x3e	; 62
    9a02:	5c 01       	movw	r10, r24
    9a04:	7b 01       	movw	r14, r22
    9a06:	2a 01       	movw	r4, r20
    9a08:	39 01       	movw	r6, r18
    9a0a:	0a 87       	std	Y+10, r16	; 0x0a
    9a0c:	16 01       	movw	r2, r12
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    9a0e:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
    9a12:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
    9a16:	10 e0       	ldi	r17, 0x00	; 0
    9a18:	00 e0       	ldi	r16, 0x00	; 0
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4461
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    9a1a:	4b 01       	movw	r8, r22
    9a1c:	82 0e       	add	r8, r18
    9a1e:	93 1e       	adc	r9, r19
    9a20:	6c 01       	movw	r12, r24
    9a22:	c4 0e       	add	r12, r20
    9a24:	d5 1e       	adc	r13, r21
    9a26:	94 01       	movw	r18, r8
    9a28:	20 1b       	sub	r18, r16
    9a2a:	31 0b       	sbc	r19, r17
    9a2c:	a6 01       	movw	r20, r12
    9a2e:	40 1b       	sub	r20, r16
    9a30:	51 0b       	sbc	r21, r17
    9a32:	b8 01       	movw	r22, r16
    9a34:	6e 0d       	add	r22, r14
    9a36:	7f 1d       	adc	r23, r15
    9a38:	c8 01       	movw	r24, r16
    9a3a:	8a 0d       	add	r24, r10
    9a3c:	9b 1d       	adc	r25, r11
    9a3e:	0e 94 1f ae 	call	0x15c3e	; 0x15c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>
    9a42:	0f 5f       	subi	r16, 0xFF	; 255
    9a44:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4460
  uint16_t tmp1, posx1, posy1;
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    9a46:	03 30       	cpi	r16, 0x03	; 3
    9a48:	11 05       	cpc	r17, r1
    9a4a:	69 f7       	brne	.-38     	; 0x9a26 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x54>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    9a4c:	8f ef       	ldi	r24, 0xFF	; 255
    9a4e:	9f ef       	ldi	r25, 0xFF	; 255
    9a50:	90 93 8f 0f 	sts	0x0F8F, r25	; 0x800f8f <my_lcd+0xb>
    9a54:	80 93 8e 0f 	sts	0x0F8E, r24	; 0x800f8e <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4463
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    9a58:	93 01       	movw	r18, r6
    9a5a:	23 50       	subi	r18, 0x03	; 3
    9a5c:	31 09       	sbc	r19, r1
    9a5e:	2e 0d       	add	r18, r14
    9a60:	3f 1d       	adc	r19, r15
    9a62:	a2 01       	movw	r20, r4
    9a64:	43 50       	subi	r20, 0x03	; 3
    9a66:	51 09       	sbc	r21, r1
    9a68:	4a 0d       	add	r20, r10
    9a6a:	5b 1d       	adc	r21, r11
    9a6c:	b7 01       	movw	r22, r14
    9a6e:	6d 5f       	subi	r22, 0xFD	; 253
    9a70:	7f 4f       	sbci	r23, 0xFF	; 255
    9a72:	c5 01       	movw	r24, r10
    9a74:	03 96       	adiw	r24, 0x03	; 3
    9a76:	0e 94 78 ae 	call	0x15cf0	; 0x15cf0 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.223]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4465

  if (menu_dialog_variable[idx].number_type == NUMBER_TYPE_FLOAT)
    9a7a:	2a 85       	ldd	r18, Y+10	; 0x0a
    9a7c:	82 2e       	mov	r8, r18
    9a7e:	91 2c       	mov	r9, r1
    9a80:	35 e1       	ldi	r19, 0x15	; 21
    9a82:	23 9f       	mul	r18, r19
    9a84:	f0 01       	movw	r30, r0
    9a86:	11 24       	eor	r1, r1
    9a88:	e0 58       	subi	r30, 0x80	; 128
    9a8a:	f6 4f       	sbci	r31, 0xF6	; 246
    9a8c:	85 85       	ldd	r24, Z+13	; 0x0d
    9a8e:	9e 01       	movw	r18, r28
    9a90:	2f 5f       	subi	r18, 0xFF	; 255
    9a92:	3f 4f       	sbci	r19, 0xFF	; 255
    9a94:	69 01       	movw	r12, r18
    9a96:	81 11       	cpse	r24, r1
    9a98:	09 c0       	rjmp	.+18     	; 0x9aac <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4466
    dtostrf(menu_dialog_variable[idx].variable_now, 4, 2, line1);
    9a9a:	60 81       	ld	r22, Z
    9a9c:	71 81       	ldd	r23, Z+1	; 0x01
    9a9e:	82 81       	ldd	r24, Z+2	; 0x02
    9aa0:	93 81       	ldd	r25, Z+3	; 0x03
    9aa2:	89 01       	movw	r16, r18
    9aa4:	22 e0       	ldi	r18, 0x02	; 2
    9aa6:	44 e0       	ldi	r20, 0x04	; 4
    9aa8:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4468

  if (menu_dialog_variable[idx].number_type == NUMBER_TYPE_INT)
    9aac:	85 e1       	ldi	r24, 0x15	; 21
    9aae:	88 9d       	mul	r24, r8
    9ab0:	f0 01       	movw	r30, r0
    9ab2:	89 9d       	mul	r24, r9
    9ab4:	f0 0d       	add	r31, r0
    9ab6:	11 24       	eor	r1, r1
    9ab8:	e0 58       	subi	r30, 0x80	; 128
    9aba:	f6 4f       	sbci	r31, 0xF6	; 246
    9abc:	85 85       	ldd	r24, Z+13	; 0x0d
    9abe:	81 30       	cpi	r24, 0x01	; 1
    9ac0:	59 f4       	brne	.+22     	; 0x9ad8 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x106>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4469
    itoa(menu_dialog_variable[idx].variable_now, line1, 10);
    9ac2:	60 81       	ld	r22, Z
    9ac4:	71 81       	ldd	r23, Z+1	; 0x01
    9ac6:	82 81       	ldd	r24, Z+2	; 0x02
    9ac8:	93 81       	ldd	r25, Z+3	; 0x03
    9aca:	0e 94 43 e0 	call	0x1c086	; 0x1c086 <__fixsfsi>
    9ace:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    9ad0:	4a e0       	ldi	r20, 0x0A	; 10
    9ad2:	b6 01       	movw	r22, r12
    9ad4:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    9ad8:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
    9adc:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4473

  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
    9ae0:	f6 01       	movw	r30, r12
    9ae2:	01 90       	ld	r0, Z+
    9ae4:	00 20       	and	r0, r0
    9ae6:	e9 f7       	brne	.-6      	; 0x9ae2 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x110>
    9ae8:	31 97       	sbiw	r30, 0x01	; 1
    9aea:	ec 19       	sub	r30, r12
    9aec:	fd 09       	sbc	r31, r13
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4475
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    9aee:	3c e0       	ldi	r19, 0x0C	; 12
    9af0:	63 1a       	sub	r6, r19
    9af2:	71 08       	sbc	r7, r1
    9af4:	76 94       	lsr	r7
    9af6:	67 94       	ror	r6
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4476
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    9af8:	81 e0       	ldi	r24, 0x01	; 1
    9afa:	e8 1a       	sub	r14, r24
    9afc:	f1 08       	sbc	r15, r1
    9afe:	6e 0c       	add	r6, r14
    9b00:	7f 1c       	adc	r7, r15
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    9b02:	96 e0       	ldi	r25, 0x06	; 6
    9b04:	e9 9f       	mul	r30, r25
    9b06:	f0 01       	movw	r30, r0
    9b08:	11 24       	eor	r1, r1
    9b0a:	ee 0f       	add	r30, r30
    9b0c:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4474
    itoa(menu_dialog_variable[idx].variable_now, line1, 10);

  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
  posx1 = (size_x - tmp1) / 2;
    9b0e:	b2 01       	movw	r22, r4
    9b10:	6e 1b       	sub	r22, r30
    9b12:	7f 0b       	sbc	r23, r31
    9b14:	76 95       	lsr	r23
    9b16:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4476
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    9b18:	6a 0d       	add	r22, r10
    9b1a:	7b 1d       	adc	r23, r11
    9b1c:	ee 24       	eor	r14, r14
    9b1e:	ea 94       	dec	r14
    9b20:	fe 2c       	mov	r15, r14
    9b22:	10 e0       	ldi	r17, 0x00	; 0
    9b24:	00 e0       	ldi	r16, 0x00	; 0
    9b26:	22 e0       	ldi	r18, 0x02	; 2
    9b28:	a3 01       	movw	r20, r6
    9b2a:	c6 01       	movw	r24, r12
    9b2c:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4478

  if (strlen(text) > 0)
    9b30:	f1 01       	movw	r30, r2
    9b32:	80 81       	ld	r24, Z
    9b34:	88 23       	and	r24, r24
    9b36:	41 f0       	breq	.+16     	; 0x9b48 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x176>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4479
    show_string(text, x + 5 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    9b38:	b5 01       	movw	r22, r10
    9b3a:	6b 5f       	subi	r22, 0xFB	; 251
    9b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    9b3e:	22 e0       	ldi	r18, 0x02	; 2
    9b40:	a3 01       	movw	r20, r6
    9b42:	c1 01       	movw	r24, r2
    9b44:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4480
}
    9b48:	2a 96       	adiw	r28, 0x0a	; 10
    9b4a:	0f b6       	in	r0, 0x3f	; 63
    9b4c:	f8 94       	cli
    9b4e:	de bf       	out	0x3e, r29	; 62
    9b50:	0f be       	out	0x3f, r0	; 63
    9b52:	cd bf       	out	0x3d, r28	; 61
    9b54:	df 91       	pop	r29
    9b56:	cf 91       	pop	r28
    9b58:	1f 91       	pop	r17
    9b5a:	0f 91       	pop	r16
    9b5c:	ff 90       	pop	r15
    9b5e:	ef 90       	pop	r14
    9b60:	df 90       	pop	r13
    9b62:	cf 90       	pop	r12
    9b64:	bf 90       	pop	r11
    9b66:	af 90       	pop	r10
    9b68:	9f 90       	pop	r9
    9b6a:	8f 90       	pop	r8
    9b6c:	7f 90       	pop	r7
    9b6e:	6f 90       	pop	r6
    9b70:	5f 90       	pop	r5
    9b72:	4f 90       	pop	r4
    9b74:	3f 90       	pop	r3
    9b76:	2f 90       	pop	r2
    9b78:	08 95       	ret

00009b7a <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_date_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4332
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    9b7a:	af 92       	push	r10
    9b7c:	bf 92       	push	r11
    9b7e:	cf 92       	push	r12
    9b80:	df 92       	push	r13
    9b82:	ef 92       	push	r14
    9b84:	ff 92       	push	r15
    9b86:	0f 93       	push	r16
    9b88:	1f 93       	push	r17
    9b8a:	cf 93       	push	r28
    9b8c:	df 93       	push	r29
    9b8e:	cd b7       	in	r28, 0x3d	; 61
    9b90:	de b7       	in	r29, 0x3e	; 62
    9b92:	60 97       	sbiw	r28, 0x10	; 16
    9b94:	0f b6       	in	r0, 0x3f	; 63
    9b96:	f8 94       	cli
    9b98:	de bf       	out	0x3e, r29	; 62
    9b9a:	0f be       	out	0x3f, r0	; 63
    9b9c:	cd bf       	out	0x3d, r28	; 61
    9b9e:	5c 01       	movw	r10, r24
    9ba0:	8b 01       	movw	r16, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3381
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    9ba2:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <selftest_data>
    9ba6:	9e 01       	movw	r18, r28
    9ba8:	2f 5f       	subi	r18, 0xFF	; 255
    9baa:	3f 4f       	sbci	r19, 0xFF	; 255
    9bac:	69 01       	movw	r12, r18
_Z27display_element_show_date_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4334
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  char str1[16];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    9bae:	80 fd       	sbrc	r24, 0
    9bb0:	4e c0       	rjmp	.+156    	; 0x9c4e <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xd4>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    9bb2:	80 91 3f 12 	lds	r24, 0x123F	; 0x80123f <now>
    9bb6:	90 e0       	ldi	r25, 0x00	; 0
    9bb8:	80 53       	subi	r24, 0x30	; 48
    9bba:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4336
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
    9bbc:	9f 93       	push	r25
    9bbe:	8f 93       	push	r24
    9bc0:	80 91 40 12 	lds	r24, 0x1240	; 0x801240 <now+0x1>
    9bc4:	1f 92       	push	r1
    9bc6:	8f 93       	push	r24
    9bc8:	80 91 41 12 	lds	r24, 0x1241	; 0x801241 <now+0x2>
    9bcc:	1f 92       	push	r1
    9bce:	8f 93       	push	r24
    9bd0:	80 e5       	ldi	r24, 0x50	; 80
    9bd2:	93 e0       	ldi	r25, 0x03	; 3
    9bd4:	9f 93       	push	r25
    9bd6:	8f 93       	push	r24
    9bd8:	3f 93       	push	r19
    9bda:	2f 93       	push	r18
    9bdc:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
    9be0:	0f b6       	in	r0, 0x3f	; 63
    9be2:	f8 94       	cli
    9be4:	de bf       	out	0x3e, r29	; 62
    9be6:	0f be       	out	0x3f, r0	; 63
    9be8:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    9bea:	8f ef       	ldi	r24, 0xFF	; 255
    9bec:	9f ef       	ldi	r25, 0xFF	; 255
    9bee:	90 93 8f 0f 	sts	0x0F8F, r25	; 0x800f8f <my_lcd+0xb>
    9bf2:	80 93 8e 0f 	sts	0x0F8E, r24	; 0x800f8e <my_lcd+0xa>
_Z27display_element_show_date_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4342
  }
  else
  {
    strcpy_P(str1, new_text_date_error);
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
    9bf6:	4e e8       	ldi	r20, 0x8E	; 142
    9bf8:	50 e0       	ldi	r21, 0x00	; 0
    9bfa:	b8 01       	movw	r22, r16
    9bfc:	c5 01       	movw	r24, r10
    9bfe:	0e 94 09 ae 	call	0x15c12	; 0x15c12 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.225]>
    9c02:	b8 01       	movw	r22, r16
    9c04:	6f 5f       	subi	r22, 0xFF	; 255
    9c06:	7f 4f       	sbci	r23, 0xFF	; 255
    9c08:	4e e8       	ldi	r20, 0x8E	; 142
    9c0a:	50 e0       	ldi	r21, 0x00	; 0
    9c0c:	c5 01       	movw	r24, r10
    9c0e:	0e 94 09 ae 	call	0x15c12	; 0x15c12 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.225]>
    9c12:	a8 01       	movw	r20, r16
    9c14:	4e 5f       	subi	r20, 0xFE	; 254
    9c16:	5f 4f       	sbci	r21, 0xFF	; 255
    9c18:	ee 24       	eor	r14, r14
    9c1a:	ea 94       	dec	r14
    9c1c:	fe 2c       	mov	r15, r14
    9c1e:	10 e0       	ldi	r17, 0x00	; 0
    9c20:	00 e0       	ldi	r16, 0x00	; 0
    9c22:	23 e0       	ldi	r18, 0x03	; 3
    9c24:	b5 01       	movw	r22, r10
    9c26:	c6 01       	movw	r24, r12
    9c28:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4343
}
    9c2c:	60 96       	adiw	r28, 0x10	; 16
    9c2e:	0f b6       	in	r0, 0x3f	; 63
    9c30:	f8 94       	cli
    9c32:	de bf       	out	0x3e, r29	; 62
    9c34:	0f be       	out	0x3f, r0	; 63
    9c36:	cd bf       	out	0x3d, r28	; 61
    9c38:	df 91       	pop	r29
    9c3a:	cf 91       	pop	r28
    9c3c:	1f 91       	pop	r17
    9c3e:	0f 91       	pop	r16
    9c40:	ff 90       	pop	r15
    9c42:	ef 90       	pop	r14
    9c44:	df 90       	pop	r13
    9c46:	cf 90       	pop	r12
    9c48:	bf 90       	pop	r11
    9c4a:	af 90       	pop	r10
    9c4c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4340
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
  }
  else
  {
    strcpy_P(str1, new_text_date_error);
    9c4e:	6f ef       	ldi	r22, 0xFF	; 255
    9c50:	7d e5       	ldi	r23, 0x5D	; 93
    9c52:	c9 01       	movw	r24, r18
    9c54:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
    9c58:	c8 cf       	rjmp	.-112    	; 0x9bea <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x70>

00009c5a <remote_tds_set_data(unsigned char, int)>:
_Z19remote_tds_set_datahi():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2167
  }
  return type;
}

void remote_tds_set_data(uint8_t idx, int value)
{
    9c5a:	1f 93       	push	r17
    9c5c:	cf 93       	push	r28
    9c5e:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2168
  if (idx < MAX_RTDS)
    9c60:	8a 30       	cpi	r24, 0x0A	; 10
    9c62:	39 f1       	breq	.+78     	; 0x9cb2 <remote_tds_set_data(unsigned char, int)+0x58>
    9c64:	17 2f       	mov	r17, r23
    9c66:	46 2f       	mov	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2170
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (value & 0xff));
    9c68:	90 e0       	ldi	r25, 0x00	; 0
    9c6a:	49 96       	adiw	r24, 0x19	; 25
    9c6c:	ec 01       	movw	r28, r24
    9c6e:	cc 0f       	add	r28, r28
    9c70:	dd 1f       	adc	r29, r29
    9c72:	cc 0f       	add	r28, r28
    9c74:	dd 1f       	adc	r29, r29
    9c76:	be 01       	movw	r22, r28
    9c78:	0d 2e       	mov	r0, r29
    9c7a:	00 0c       	add	r0, r0
    9c7c:	88 0b       	sbc	r24, r24
    9c7e:	99 0b       	sbc	r25, r25
    9c80:	0e 94 db b8 	call	0x171b6	; 0x171b6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.217]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2171
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((value >> 8) & 0xff));
    9c84:	be 01       	movw	r22, r28
    9c86:	6f 5f       	subi	r22, 0xFF	; 255
    9c88:	7f 4f       	sbci	r23, 0xFF	; 255
    9c8a:	07 2e       	mov	r0, r23
    9c8c:	00 0c       	add	r0, r0
    9c8e:	88 0b       	sbc	r24, r24
    9c90:	99 0b       	sbc	r25, r25
    9c92:	41 2f       	mov	r20, r17
    9c94:	0e 94 db b8 	call	0x171b6	; 0x171b6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.217]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2172
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    9c98:	be 01       	movw	r22, r28
    9c9a:	6e 5f       	subi	r22, 0xFE	; 254
    9c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    9c9e:	07 2e       	mov	r0, r23
    9ca0:	00 0c       	add	r0, r0
    9ca2:	88 0b       	sbc	r24, r24
    9ca4:	99 0b       	sbc	r25, r25
    9ca6:	40 e0       	ldi	r20, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2174
  }
}
    9ca8:	df 91       	pop	r29
    9caa:	cf 91       	pop	r28
    9cac:	1f 91       	pop	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2172
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (value & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((value >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    9cae:	0c 94 db b8 	jmp	0x171b6	; 0x171b6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.217]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2174
  }
}
    9cb2:	df 91       	pop	r29
    9cb4:	cf 91       	pop	r28
    9cb6:	1f 91       	pop	r17
    9cb8:	08 95       	ret

00009cba <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
    9cba:	cf 93       	push	r28
    9cbc:	c8 2f       	mov	r28, r24
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    9cbe:	68 2f       	mov	r22, r24
    9cc0:	80 e3       	ldi	r24, 0x30	; 48
    9cc2:	9d e0       	ldi	r25, 0x0D	; 13
    9cc4:	0e 94 00 aa 	call	0x15400	; 0x15400 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
    9cc8:	8c 2f       	mov	r24, r28
    9cca:	cc 0f       	add	r28, r28
    9ccc:	99 0b       	sbc	r25, r25
    9cce:	cf 91       	pop	r28
    9cd0:	08 95       	ret

00009cd2 <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    9cd2:	1f 92       	push	r1
    9cd4:	0f 92       	push	r0
    9cd6:	0f b6       	in	r0, 0x3f	; 63
    9cd8:	0f 92       	push	r0
    9cda:	11 24       	eor	r1, r1
    9cdc:	0b b6       	in	r0, 0x3b	; 59
    9cde:	0f 92       	push	r0
    9ce0:	2f 93       	push	r18
    9ce2:	3f 93       	push	r19
    9ce4:	4f 93       	push	r20
    9ce6:	5f 93       	push	r21
    9ce8:	6f 93       	push	r22
    9cea:	7f 93       	push	r23
    9cec:	8f 93       	push	r24
    9cee:	9f 93       	push	r25
    9cf0:	af 93       	push	r26
    9cf2:	bf 93       	push	r27
    9cf4:	ef 93       	push	r30
    9cf6:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
    9cf8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    9cfc:	88 7f       	andi	r24, 0xF8	; 248
    9cfe:	80 36       	cpi	r24, 0x60	; 96
    9d00:	09 f4       	brne	.+2      	; 0x9d04 <__vector_39+0x32>
    9d02:	4d c0       	rjmp	.+154    	; 0x9d9e <__vector_39+0xcc>
    9d04:	08 f0       	brcs	.+2      	; 0x9d08 <__vector_39+0x36>
    9d06:	40 c0       	rjmp	.+128    	; 0x9d88 <__vector_39+0xb6>
    9d08:	88 32       	cpi	r24, 0x28	; 40
    9d0a:	09 f4       	brne	.+2      	; 0x9d0e <__vector_39+0x3c>
    9d0c:	a9 c0       	rjmp	.+338    	; 0x9e60 <__vector_39+0x18e>
    9d0e:	28 f5       	brcc	.+74     	; 0x9d5a <__vector_39+0x88>
    9d10:	80 31       	cpi	r24, 0x10	; 16
    9d12:	09 f4       	brne	.+2      	; 0x9d16 <__vector_39+0x44>
    9d14:	9d c0       	rjmp	.+314    	; 0x9e50 <__vector_39+0x17e>
    9d16:	c8 f4       	brcc	.+50     	; 0x9d4a <__vector_39+0x78>
    9d18:	88 23       	and	r24, r24
    9d1a:	09 f4       	brne	.+2      	; 0x9d1e <__vector_39+0x4c>
    9d1c:	fb c0       	rjmp	.+502    	; 0x9f14 <__vector_39+0x242>
    9d1e:	88 30       	cpi	r24, 0x08	; 8
    9d20:	09 f4       	brne	.+2      	; 0x9d24 <__vector_39+0x52>
    9d22:	96 c0       	rjmp	.+300    	; 0x9e50 <__vector_39+0x17e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    9d24:	ff 91       	pop	r31
    9d26:	ef 91       	pop	r30
    9d28:	bf 91       	pop	r27
    9d2a:	af 91       	pop	r26
    9d2c:	9f 91       	pop	r25
    9d2e:	8f 91       	pop	r24
    9d30:	7f 91       	pop	r23
    9d32:	6f 91       	pop	r22
    9d34:	5f 91       	pop	r21
    9d36:	4f 91       	pop	r20
    9d38:	3f 91       	pop	r19
    9d3a:	2f 91       	pop	r18
    9d3c:	0f 90       	pop	r0
    9d3e:	0b be       	out	0x3b, r0	; 59
    9d40:	0f 90       	pop	r0
    9d42:	0f be       	out	0x3f, r0	; 63
    9d44:	0f 90       	pop	r0
    9d46:	1f 90       	pop	r1
    9d48:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    9d4a:	88 31       	cpi	r24, 0x18	; 24
    9d4c:	09 f4       	brne	.+2      	; 0x9d50 <__vector_39+0x7e>
    9d4e:	88 c0       	rjmp	.+272    	; 0x9e60 <__vector_39+0x18e>
    9d50:	80 32       	cpi	r24, 0x20	; 32
    9d52:	41 f7       	brne	.-48     	; 0x9d24 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    9d54:	80 93 2d 0d 	sts	0x0D2D, r24	; 0x800d2d <twi_error.lto_priv.272>
    9d58:	14 c0       	rjmp	.+40     	; 0x9d82 <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    9d5a:	80 34       	cpi	r24, 0x40	; 64
    9d5c:	09 f4       	brne	.+2      	; 0x9d60 <__vector_39+0x8e>
    9d5e:	9d c0       	rjmp	.+314    	; 0x9e9a <__vector_39+0x1c8>
    9d60:	40 f4       	brcc	.+16     	; 0x9d72 <__vector_39+0xa0>
    9d62:	80 33       	cpi	r24, 0x30	; 48
    9d64:	b9 f3       	breq	.-18     	; 0x9d54 <__vector_39+0x82>
    9d66:	88 33       	cpi	r24, 0x38	; 56
    9d68:	e9 f6       	brne	.-70     	; 0x9d24 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    9d6a:	80 93 2d 0d 	sts	0x0D2D, r24	; 0x800d2d <twi_error.lto_priv.272>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    9d6e:	85 ec       	ldi	r24, 0xC5	; 197
    9d70:	b0 c0       	rjmp	.+352    	; 0x9ed2 <__vector_39+0x200>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    9d72:	80 35       	cpi	r24, 0x50	; 80
    9d74:	09 f4       	brne	.+2      	; 0x9d78 <__vector_39+0xa6>
    9d76:	85 c0       	rjmp	.+266    	; 0x9e82 <__vector_39+0x1b0>
    9d78:	88 35       	cpi	r24, 0x58	; 88
    9d7a:	09 f4       	brne	.+2      	; 0x9d7e <__vector_39+0xac>
    9d7c:	96 c0       	rjmp	.+300    	; 0x9eaa <__vector_39+0x1d8>
    9d7e:	88 34       	cpi	r24, 0x48	; 72
    9d80:	89 f6       	brne	.-94     	; 0x9d24 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    9d82:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <twi_stop>
    9d86:	ce cf       	rjmp	.-100    	; 0x9d24 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    9d88:	88 39       	cpi	r24, 0x98	; 152
    9d8a:	09 f4       	brne	.+2      	; 0x9d8e <__vector_39+0xbc>
    9d8c:	8c c0       	rjmp	.+280    	; 0x9ea6 <__vector_39+0x1d4>
    9d8e:	38 f5       	brcc	.+78     	; 0x9dde <__vector_39+0x10c>
    9d90:	88 37       	cpi	r24, 0x78	; 120
    9d92:	29 f0       	breq	.+10     	; 0x9d9e <__vector_39+0xcc>
    9d94:	50 f4       	brcc	.+20     	; 0x9daa <__vector_39+0xd8>
    9d96:	88 36       	cpi	r24, 0x68	; 104
    9d98:	11 f0       	breq	.+4      	; 0x9d9e <__vector_39+0xcc>
    9d9a:	80 37       	cpi	r24, 0x70	; 112
    9d9c:	19 f6       	brne	.-122    	; 0x9d24 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    9d9e:	83 e0       	ldi	r24, 0x03	; 3
    9da0:	80 93 2f 0d 	sts	0x0D2F, r24	; 0x800d2f <twi_state.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    9da4:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <twi_rxBufferIndex>
    9da8:	57 c0       	rjmp	.+174    	; 0x9e58 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    9daa:	88 38       	cpi	r24, 0x88	; 136
    9dac:	09 f4       	brne	.+2      	; 0x9db0 <__vector_39+0xde>
    9dae:	7b c0       	rjmp	.+246    	; 0x9ea6 <__vector_39+0x1d4>
    9db0:	80 39       	cpi	r24, 0x90	; 144
    9db2:	19 f0       	breq	.+6      	; 0x9dba <__vector_39+0xe8>
    9db4:	80 38       	cpi	r24, 0x80	; 128
    9db6:	09 f0       	breq	.+2      	; 0x9dba <__vector_39+0xe8>
    9db8:	b5 cf       	rjmp	.-150    	; 0x9d24 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    9dba:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <twi_rxBufferIndex>
    9dbe:	80 32       	cpi	r24, 0x20	; 32
    9dc0:	08 f0       	brcs	.+2      	; 0x9dc4 <__vector_39+0xf2>
    9dc2:	71 c0       	rjmp	.+226    	; 0x9ea6 <__vector_39+0x1d4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    9dc4:	e0 91 41 0b 	lds	r30, 0x0B41	; 0x800b41 <twi_rxBufferIndex>
    9dc8:	81 e0       	ldi	r24, 0x01	; 1
    9dca:	8e 0f       	add	r24, r30
    9dcc:	80 93 41 0b 	sts	0x0B41, r24	; 0x800b41 <twi_rxBufferIndex>
    9dd0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    9dd4:	f0 e0       	ldi	r31, 0x00	; 0
    9dd6:	ef 5d       	subi	r30, 0xDF	; 223
    9dd8:	f4 4f       	sbci	r31, 0xF4	; 244
    9dda:	80 83       	st	Z, r24
    9ddc:	3d c0       	rjmp	.+122    	; 0x9e58 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    9dde:	80 3b       	cpi	r24, 0xB0	; 176
    9de0:	39 f0       	breq	.+14     	; 0x9df0 <__vector_39+0x11e>
    9de2:	e0 f4       	brcc	.+56     	; 0x9e1c <__vector_39+0x14a>
    9de4:	80 3a       	cpi	r24, 0xA0	; 160
    9de6:	09 f4       	brne	.+2      	; 0x9dea <__vector_39+0x118>
    9de8:	79 c0       	rjmp	.+242    	; 0x9edc <__vector_39+0x20a>
    9dea:	88 3a       	cpi	r24, 0xA8	; 168
    9dec:	09 f0       	breq	.+2      	; 0x9df0 <__vector_39+0x11e>
    9dee:	9a cf       	rjmp	.-204    	; 0x9d24 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    9df0:	84 e0       	ldi	r24, 0x04	; 4
    9df2:	80 93 2f 0d 	sts	0x0D2F, r24	; 0x800d2f <twi_state.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    9df6:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    9dfa:	10 92 1f 0b 	sts	0x0B1F, r1	; 0x800b1f <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    9dfe:	e0 91 7e 0c 	lds	r30, 0x0C7E	; 0x800c7e <twi_onSlaveTransmit.lto_priv.274>
    9e02:	f0 91 7f 0c 	lds	r31, 0x0C7F	; 0x800c7f <twi_onSlaveTransmit.lto_priv.274+0x1>
    9e06:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    9e08:	80 91 1f 0b 	lds	r24, 0x0B1F	; 0x800b1f <twi_txBufferLength>
    9e0c:	81 11       	cpse	r24, r1
    9e0e:	0f c0       	rjmp	.+30     	; 0x9e2e <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
    9e10:	81 e0       	ldi	r24, 0x01	; 1
    9e12:	80 93 1f 0b 	sts	0x0B1F, r24	; 0x800b1f <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    9e16:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <twi_txBuffer>
    9e1a:	09 c0       	rjmp	.+18     	; 0x9e2e <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    9e1c:	80 3c       	cpi	r24, 0xC0	; 192
    9e1e:	09 f4       	brne	.+2      	; 0x9e22 <__vector_39+0x150>
    9e20:	a6 cf       	rjmp	.-180    	; 0x9d6e <__vector_39+0x9c>
    9e22:	88 3c       	cpi	r24, 0xC8	; 200
    9e24:	09 f4       	brne	.+2      	; 0x9e28 <__vector_39+0x156>
    9e26:	a3 cf       	rjmp	.-186    	; 0x9d6e <__vector_39+0x9c>
    9e28:	88 3b       	cpi	r24, 0xB8	; 184
    9e2a:	09 f0       	breq	.+2      	; 0x9e2e <__vector_39+0x15c>
    9e2c:	7b cf       	rjmp	.-266    	; 0x9d24 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    9e2e:	e0 91 20 0b 	lds	r30, 0x0B20	; 0x800b20 <twi_txBufferIndex>
    9e32:	81 e0       	ldi	r24, 0x01	; 1
    9e34:	8e 0f       	add	r24, r30
    9e36:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <twi_txBufferIndex>
    9e3a:	f0 e0       	ldi	r31, 0x00	; 0
    9e3c:	e1 50       	subi	r30, 0x01	; 1
    9e3e:	f5 4f       	sbci	r31, 0xF5	; 245
    9e40:	80 81       	ld	r24, Z
    9e42:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    9e46:	90 91 20 0b 	lds	r25, 0x0B20	; 0x800b20 <twi_txBufferIndex>
    9e4a:	80 91 1f 0b 	lds	r24, 0x0B1F	; 0x800b1f <twi_txBufferLength>
    9e4e:	29 c0       	rjmp	.+82     	; 0x9ea2 <__vector_39+0x1d0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    9e50:	80 91 2a 0d 	lds	r24, 0x0D2A	; 0x800d2a <twi_slarw.lto_priv.265>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    9e54:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    9e58:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    9e5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    9e5e:	62 cf       	rjmp	.-316    	; 0x9d24 <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    9e60:	90 91 2c 0d 	lds	r25, 0x0D2C	; 0x800d2c <twi_masterBufferIndex.lto_priv.266>
    9e64:	80 91 2b 0d 	lds	r24, 0x0D2B	; 0x800d2b <twi_masterBufferLength.lto_priv.267>
    9e68:	98 17       	cp	r25, r24
    9e6a:	58 f5       	brcc	.+86     	; 0x9ec2 <__vector_39+0x1f0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    9e6c:	e0 91 2c 0d 	lds	r30, 0x0D2C	; 0x800d2c <twi_masterBufferIndex.lto_priv.266>
    9e70:	81 e0       	ldi	r24, 0x01	; 1
    9e72:	8e 0f       	add	r24, r30
    9e74:	80 93 2c 0d 	sts	0x0D2C, r24	; 0x800d2c <twi_masterBufferIndex.lto_priv.266>
    9e78:	f0 e0       	ldi	r31, 0x00	; 0
    9e7a:	e7 5f       	subi	r30, 0xF7	; 247
    9e7c:	f2 4f       	sbci	r31, 0xF2	; 242
    9e7e:	80 81       	ld	r24, Z
    9e80:	e9 cf       	rjmp	.-46     	; 0x9e54 <__vector_39+0x182>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    9e82:	e0 91 2c 0d 	lds	r30, 0x0D2C	; 0x800d2c <twi_masterBufferIndex.lto_priv.266>
    9e86:	81 e0       	ldi	r24, 0x01	; 1
    9e88:	8e 0f       	add	r24, r30
    9e8a:	80 93 2c 0d 	sts	0x0D2C, r24	; 0x800d2c <twi_masterBufferIndex.lto_priv.266>
    9e8e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    9e92:	f0 e0       	ldi	r31, 0x00	; 0
    9e94:	e7 5f       	subi	r30, 0xF7	; 247
    9e96:	f2 4f       	sbci	r31, 0xF2	; 242
    9e98:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    9e9a:	90 91 2c 0d 	lds	r25, 0x0D2C	; 0x800d2c <twi_masterBufferIndex.lto_priv.266>
    9e9e:	80 91 2b 0d 	lds	r24, 0x0D2B	; 0x800d2b <twi_masterBufferLength.lto_priv.267>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    9ea2:	98 17       	cp	r25, r24
    9ea4:	c8 f2       	brcs	.-78     	; 0x9e58 <__vector_39+0x186>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    9ea6:	85 e8       	ldi	r24, 0x85	; 133
    9ea8:	d8 cf       	rjmp	.-80     	; 0x9e5a <__vector_39+0x188>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    9eaa:	e0 91 2c 0d 	lds	r30, 0x0D2C	; 0x800d2c <twi_masterBufferIndex.lto_priv.266>
    9eae:	81 e0       	ldi	r24, 0x01	; 1
    9eb0:	8e 0f       	add	r24, r30
    9eb2:	80 93 2c 0d 	sts	0x0D2C, r24	; 0x800d2c <twi_masterBufferIndex.lto_priv.266>
    9eb6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    9eba:	f0 e0       	ldi	r31, 0x00	; 0
    9ebc:	e7 5f       	subi	r30, 0xF7	; 247
    9ebe:	f2 4f       	sbci	r31, 0xF2	; 242
    9ec0:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
    9ec2:	80 91 2e 0d 	lds	r24, 0x0D2E	; 0x800d2e <twi_sendStop.lto_priv.269>
    9ec6:	81 11       	cpse	r24, r1
    9ec8:	5c cf       	rjmp	.-328    	; 0x9d82 <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    9eca:	81 e0       	ldi	r24, 0x01	; 1
    9ecc:	80 93 29 0d 	sts	0x0D29, r24	; 0x800d29 <twi_inRepStart.lto_priv.270>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    9ed0:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    9ed2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    9ed6:	10 92 2f 0d 	sts	0x0D2F, r1	; 0x800d2f <twi_state.lto_priv.271>
    9eda:	24 cf       	rjmp	.-440    	; 0x9d24 <__vector_39+0x52>
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    9edc:	85 ec       	ldi	r24, 0xC5	; 197
    9ede:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    9ee2:	10 92 2f 0d 	sts	0x0D2F, r1	; 0x800d2f <twi_state.lto_priv.271>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    9ee6:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <twi_rxBufferIndex>
    9eea:	80 32       	cpi	r24, 0x20	; 32
    9eec:	30 f4       	brcc	.+12     	; 0x9efa <__vector_39+0x228>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    9eee:	e0 91 41 0b 	lds	r30, 0x0B41	; 0x800b41 <twi_rxBufferIndex>
    9ef2:	f0 e0       	ldi	r31, 0x00	; 0
    9ef4:	ef 5d       	subi	r30, 0xDF	; 223
    9ef6:	f4 4f       	sbci	r31, 0xF4	; 244
    9ef8:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    9efa:	60 91 41 0b 	lds	r22, 0x0B41	; 0x800b41 <twi_rxBufferIndex>
    9efe:	70 e0       	ldi	r23, 0x00	; 0
    9f00:	e0 91 7c 0c 	lds	r30, 0x0C7C	; 0x800c7c <twi_onSlaveReceive.lto_priv.273>
    9f04:	f0 91 7d 0c 	lds	r31, 0x0C7D	; 0x800c7d <twi_onSlaveReceive.lto_priv.273+0x1>
    9f08:	81 e2       	ldi	r24, 0x21	; 33
    9f0a:	9b e0       	ldi	r25, 0x0B	; 11
    9f0c:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    9f0e:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <twi_rxBufferIndex>
    9f12:	08 cf       	rjmp	.-496    	; 0x9d24 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    9f14:	10 92 2d 0d 	sts	0x0D2D, r1	; 0x800d2d <twi_error.lto_priv.272>
    9f18:	34 cf       	rjmp	.-408    	; 0x9d82 <__vector_39+0xb0>

00009f1a <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:173
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    9f1a:	20 91 e5 0c 	lds	r18, 0x0CE5	; 0x800ce5 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    9f1e:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    9f20:	21 32       	cpi	r18, 0x21	; 33
    9f22:	08 f0       	brcs	.+2      	; 0x9f26 <TwoWire::endTransmission()+0xc>
    9f24:	44 c0       	rjmp	.+136    	; 0x9fae <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    9f26:	80 91 2f 0d 	lds	r24, 0x0D2F	; 0x800d2f <twi_state.lto_priv.271>
    9f2a:	81 11       	cpse	r24, r1
    9f2c:	fc cf       	rjmp	.-8      	; 0x9f26 <TwoWire::endTransmission()+0xc>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:173
    9f2e:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <TwoWire::txAddress>
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
    9f32:	92 e0       	ldi	r25, 0x02	; 2
    9f34:	90 93 2f 0d 	sts	0x0D2F, r25	; 0x800d2f <twi_state.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:240
  twi_sendStop = sendStop;
    9f38:	91 e0       	ldi	r25, 0x01	; 1
    9f3a:	90 93 2e 0d 	sts	0x0D2E, r25	; 0x800d2e <twi_sendStop.lto_priv.269>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:242
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    9f3e:	9f ef       	ldi	r25, 0xFF	; 255
    9f40:	90 93 2d 0d 	sts	0x0D2D, r25	; 0x800d2d <twi_error.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    9f44:	10 92 2c 0d 	sts	0x0D2C, r1	; 0x800d2c <twi_masterBufferIndex.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:246
  twi_masterBufferLength = length;
    9f48:	20 93 2b 0d 	sts	0x0D2B, r18	; 0x800d2b <twi_masterBufferLength.lto_priv.267>
    9f4c:	af ed       	ldi	r26, 0xDF	; 223
    9f4e:	ba e0       	ldi	r27, 0x0A	; 10
    9f50:	e9 e0       	ldi	r30, 0x09	; 9
    9f52:	fd e0       	ldi	r31, 0x0D	; 13
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:249

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    9f54:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
    9f56:	29 13       	cpse	r18, r25
    9f58:	31 c0       	rjmp	.+98     	; 0x9fbc <TwoWire::endTransmission()+0xa2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    9f5a:	10 92 2a 0d 	sts	0x0D2A, r1	; 0x800d2a <twi_slarw.lto_priv.265>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:255
  twi_slarw |= address << 1;
    9f5e:	90 91 2a 0d 	lds	r25, 0x0D2A	; 0x800d2a <twi_slarw.lto_priv.265>
    9f62:	88 0f       	add	r24, r24
    9f64:	89 2b       	or	r24, r25
    9f66:	80 93 2a 0d 	sts	0x0D2A, r24	; 0x800d2a <twi_slarw.lto_priv.265>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:260

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    9f6a:	80 91 29 0d 	lds	r24, 0x0D29	; 0x800d29 <twi_inRepStart.lto_priv.270>
    9f6e:	81 30       	cpi	r24, 0x01	; 1
    9f70:	49 f5       	brne	.+82     	; 0x9fc4 <TwoWire::endTransmission()+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    9f72:	10 92 29 0d 	sts	0x0D29, r1	; 0x800d29 <twi_inRepStart.lto_priv.270>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:269
    do {
      TWDR = twi_slarw;
    9f76:	80 91 2a 0d 	lds	r24, 0x0D2A	; 0x800d2a <twi_slarw.lto_priv.265>
    9f7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:270
    } while(TWCR & _BV(TWWC));
    9f7e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    9f82:	83 fd       	sbrc	r24, 3
    9f84:	f8 cf       	rjmp	.-16     	; 0x9f76 <TwoWire::endTransmission()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    9f86:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    9f88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    9f8c:	80 91 2f 0d 	lds	r24, 0x0D2F	; 0x800d2f <twi_state.lto_priv.271>
    9f90:	82 30       	cpi	r24, 0x02	; 2
    9f92:	e1 f3       	breq	.-8      	; 0x9f8c <TwoWire::endTransmission()+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:282
    continue;
  }

  if (twi_error == 0xFF)
    9f94:	80 91 2d 0d 	lds	r24, 0x0D2D	; 0x800d2d <twi_error.lto_priv.272>
    9f98:	8f 3f       	cpi	r24, 0xFF	; 255
    9f9a:	b1 f0       	breq	.+44     	; 0x9fc8 <TwoWire::endTransmission()+0xae>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    9f9c:	80 91 2d 0d 	lds	r24, 0x0D2D	; 0x800d2d <twi_error.lto_priv.272>
    9fa0:	80 32       	cpi	r24, 0x20	; 32
    9fa2:	a1 f0       	breq	.+40     	; 0x9fcc <TwoWire::endTransmission()+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    9fa4:	80 91 2d 0d 	lds	r24, 0x0D2D	; 0x800d2d <twi_error.lto_priv.272>
    9fa8:	80 33       	cpi	r24, 0x30	; 48
    9faa:	91 f0       	breq	.+36     	; 0x9fd0 <TwoWire::endTransmission()+0xb6>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    9fac:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:175
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    9fae:	10 92 e6 0c 	sts	0x0CE6, r1	; 0x800ce6 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:176
  txBufferLength = 0;
    9fb2:	10 92 e5 0c 	sts	0x0CE5, r1	; 0x800ce5 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:178
  // indicate that we are done transmitting
  transmitting = 0;
    9fb6:	10 92 e8 0c 	sts	0x0CE8, r1	; 0x800ce8 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:188
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
    9fba:	08 95       	ret
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    9fbc:	3d 91       	ld	r19, X+
    9fbe:	31 93       	st	Z+, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    9fc0:	9f 5f       	subi	r25, 0xFF	; 255
    9fc2:	c9 cf       	rjmp	.-110    	; 0x9f56 <TwoWire::endTransmission()+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    9fc4:	85 ee       	ldi	r24, 0xE5	; 229
    9fc6:	e0 cf       	rjmp	.-64     	; 0x9f88 <TwoWire::endTransmission()+0x6e>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }

  if (twi_error == 0xFF)
    return 0; // success
    9fc8:	80 e0       	ldi	r24, 0x00	; 0
    9fca:	f1 cf       	rjmp	.-30     	; 0x9fae <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    9fcc:	82 e0       	ldi	r24, 0x02	; 2
    9fce:	ef cf       	rjmp	.-34     	; 0x9fae <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    9fd0:	83 e0       	ldi	r24, 0x03	; 3
    9fd2:	ed cf       	rjmp	.-38     	; 0x9fae <TwoWire::endTransmission()+0x94>

00009fd4 <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:170
	if(i2c_write(DS2482_C_DRST)==FALSE) { i2c_stop();return DS2482_ERR_WRITE; }
	i2c_stop();
	return DS2482_ERR_OK;
	*/        

        Wire.beginTransmission(address);
    9fd4:	0e 94 3c af 	call	0x15e78	; 0x15e78 <TwoWire::beginTransmission(unsigned char) [clone .constprop.198]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:171
        Wire.write(DS2482_C_DRST);
    9fd8:	80 ef       	ldi	r24, 0xF0	; 240
    9fda:	90 e0       	ldi	r25, 0x00	; 0
    9fdc:	0e 94 e2 af 	call	0x15fc4	; 0x15fc4 <TwoWire::write(int) [clone .constprop.188]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:172
        if (Wire.endTransmission() == I2C_ERROR_OK)
    9fe0:	83 ec       	ldi	r24, 0xC3	; 195
    9fe2:	9f e0       	ldi	r25, 0x0F	; 15
    9fe4:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <TwoWire::endTransmission()>
    9fe8:	81 11       	cpse	r24, r1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:175
          return DS2482_ERR_OK;
        else
          return DS2482_ERR_I2C_DEVICE;        
    9fea:	8a e0       	ldi	r24, 0x0A	; 10
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:177

}
    9fec:	08 95       	ret

00009fee <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:127
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    9fee:	86 2f       	mov	r24, r22
twi_readFrom():
    9ff0:	64 2f       	mov	r22, r20
    9ff2:	0e 94 fa ae 	call	0x15df4	; 0x15df4 <twi_readFrom.part.0.constprop.200>
requestFrom():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    9ff6:	10 92 cf 0c 	sts	0x0CCF, r1	; 0x800ccf <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
    9ffa:	80 93 ce 0c 	sts	0x0CCE, r24	; 0x800cce <TwoWire::rxBufferLength>
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:129
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    9ffe:	08 95       	ret

0000a000 <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
    a000:	ff 92       	push	r15
    a002:	0f 93       	push	r16
    a004:	1f 93       	push	r17
    a006:	cf 93       	push	r28
    a008:	df 93       	push	r29
    a00a:	d8 2f       	mov	r29, r24
    a00c:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
    a00e:	0e 94 3c af 	call	0x15e78	; 0x15e78 <TwoWire::beginTransmission(unsigned char) [clone .constprop.198]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
    a012:	86 e9       	ldi	r24, 0x96	; 150
    a014:	90 e0       	ldi	r25, 0x00	; 0
    a016:	0e 94 e2 af 	call	0x15fc4	; 0x15fc4 <TwoWire::write(int) [clone .constprop.188]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
    a01a:	83 ec       	ldi	r24, 0xC3	; 195
    a01c:	9f e0       	ldi	r25, 0x0F	; 15
    a01e:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <TwoWire::endTransmission()>
    a022:	ce ef       	ldi	r28, 0xFE	; 254
    a024:	88 23       	and	r24, r24
    a026:	41 f0       	breq	.+16     	; 0xa038 <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
    a028:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809
	Wire.requestFrom(address, cnt);	
        if ( Wire.available() >= 1 )
             *byte = Wire.read();	

	return DS2482_ERR_OK;
}
    a02a:	8c 2f       	mov	r24, r28
    a02c:	df 91       	pop	r29
    a02e:	cf 91       	pop	r28
    a030:	1f 91       	pop	r17
    a032:	0f 91       	pop	r16
    a034:	ff 90       	pop	r15
    a036:	08 95       	ret
    a038:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
    a03a:	e1 f1       	breq	.+120    	; 0xa0b4 <ds2482owReadByte(unsigned char, unsigned char*)+0xb4>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
    a03c:	41 e0       	ldi	r20, 0x01	; 1
    a03e:	6d 2f       	mov	r22, r29
    a040:	83 ec       	ldi	r24, 0xC3	; 195
    a042:	9f e0       	ldi	r25, 0x0F	; 15
    a044:	0e 94 f7 4f 	call	0x9fee	; 0x9fee <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    a048:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <TwoWire::rxBufferLength>
    a04c:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <TwoWire::rxBufferIndex>
    a050:	89 1b       	sub	r24, r25
    a052:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
    a054:	18 16       	cp	r1, r24
    a056:	19 06       	cpc	r1, r25
    a058:	1c f4       	brge	.+6      	; 0xa060 <ds2482owReadByte(unsigned char, unsigned char*)+0x60>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
    a05a:	0e 94 cf af 	call	0x15f9e	; 0x15f9e <TwoWire::read() [clone .constprop.189]>
    a05e:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
    a060:	f0 fc       	sbrc	r15, 0
    a062:	ea cf       	rjmp	.-44     	; 0xa038 <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
ds2482setReadPointer():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:258
	if(i2c_write(pointer)==FALSE){i2c_stop(); return DS2482_ERR_WRITE;}
	i2c_stop();
	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
    a064:	8d 2f       	mov	r24, r29
    a066:	0e 94 3c af 	call	0x15e78	; 0x15e78 <TwoWire::beginTransmission(unsigned char) [clone .constprop.198]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:259
        Wire.write(DS2482_C_SRP);
    a06a:	81 ee       	ldi	r24, 0xE1	; 225
    a06c:	90 e0       	ldi	r25, 0x00	; 0
    a06e:	0e 94 e2 af 	call	0x15fc4	; 0x15fc4 <TwoWire::write(int) [clone .constprop.188]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:260
        Wire.write(pointer);
    a072:	61 ee       	ldi	r22, 0xE1	; 225
    a074:	83 ec       	ldi	r24, 0xC3	; 195
    a076:	9f e0       	ldi	r25, 0x0F	; 15
    a078:	0e 94 dd 34 	call	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:261
        if (Wire.endTransmission() == I2C_ERROR_OK)
    a07c:	83 ec       	ldi	r24, 0xC3	; 195
    a07e:	9f e0       	ldi	r25, 0x0F	; 15
    a080:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <TwoWire::endTransmission()>
    a084:	c8 2f       	mov	r28, r24
    a086:	81 11       	cpse	r24, r1
    a088:	cf cf       	rjmp	.-98     	; 0xa028 <ds2482owReadByte(unsigned char, unsigned char*)+0x28>
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
    a08a:	41 e0       	ldi	r20, 0x01	; 1
    a08c:	6d 2f       	mov	r22, r29
    a08e:	83 ec       	ldi	r24, 0xC3	; 195
    a090:	9f e0       	ldi	r25, 0x0F	; 15
    a092:	0e 94 f7 4f 	call	0x9fee	; 0x9fee <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
    a096:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <TwoWire::rxBufferLength>
    a09a:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <TwoWire::rxBufferIndex>
    a09e:	89 1b       	sub	r24, r25
    a0a0:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
    a0a2:	18 16       	cp	r1, r24
    a0a4:	19 06       	cpc	r1, r25
    a0a6:	0c f0       	brlt	.+2      	; 0xa0aa <ds2482owReadByte(unsigned char, unsigned char*)+0xaa>
    a0a8:	c0 cf       	rjmp	.-128    	; 0xa02a <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
    a0aa:	0e 94 cf af 	call	0x15f9e	; 0x15f9e <TwoWire::read() [clone .constprop.189]>
    a0ae:	f8 01       	movw	r30, r16
    a0b0:	80 83       	st	Z, r24
    a0b2:	bb cf       	rjmp	.-138    	; 0xa02a <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
    a0b4:	c4 e0       	ldi	r28, 0x04	; 4
    a0b6:	b9 cf       	rjmp	.-142    	; 0xa02a <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>

0000a0b8 <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
    a0b8:	0f 93       	push	r16
    a0ba:	1f 93       	push	r17
    a0bc:	cf 93       	push	r28
    a0be:	df 93       	push	r29
    a0c0:	08 2f       	mov	r16, r24
    a0c2:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
    a0c4:	0e 94 3c af 	call	0x15e78	; 0x15e78 <TwoWire::beginTransmission(unsigned char) [clone .constprop.198]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
    a0c8:	85 ea       	ldi	r24, 0xA5	; 165
    a0ca:	90 e0       	ldi	r25, 0x00	; 0
    a0cc:	0e 94 e2 af 	call	0x15fc4	; 0x15fc4 <TwoWire::write(int) [clone .constprop.188]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
    a0d0:	6d 2f       	mov	r22, r29
    a0d2:	83 ec       	ldi	r24, 0xC3	; 195
    a0d4:	9f e0       	ldi	r25, 0x0F	; 15
    a0d6:	0e 94 dd 34 	call	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
    a0da:	83 ec       	ldi	r24, 0xC3	; 195
    a0dc:	9f e0       	ldi	r25, 0x0F	; 15
    a0de:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <TwoWire::endTransmission()>
    a0e2:	c8 2f       	mov	r28, r24
    a0e4:	81 11       	cpse	r24, r1
    a0e6:	1d c0       	rjmp	.+58     	; 0xa122 <ds2482owWriteByte(unsigned char, unsigned char)+0x6a>
    a0e8:	1e ef       	ldi	r17, 0xFE	; 254
    a0ea:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
    a0ec:	e1 f0       	breq	.+56     	; 0xa126 <ds2482owWriteByte(unsigned char, unsigned char)+0x6e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
    a0ee:	41 e0       	ldi	r20, 0x01	; 1
    a0f0:	60 2f       	mov	r22, r16
    a0f2:	83 ec       	ldi	r24, 0xC3	; 195
    a0f4:	9f e0       	ldi	r25, 0x0F	; 15
    a0f6:	0e 94 f7 4f 	call	0x9fee	; 0x9fee <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
    a0fa:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <TwoWire::rxBufferLength>
    a0fe:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <TwoWire::rxBufferIndex>
    a102:	89 1b       	sub	r24, r25
    a104:	99 0b       	sbc	r25, r25
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
    a106:	18 16       	cp	r1, r24
    a108:	19 06       	cpc	r1, r25
    a10a:	1c f4       	brge	.+6      	; 0xa112 <ds2482owWriteByte(unsigned char, unsigned char)+0x5a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
    a10c:	0e 94 cf af 	call	0x15f9e	; 0x15f9e <TwoWire::read() [clone .constprop.189]>
    a110:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
    a112:	d0 fd       	sbrc	r29, 0
    a114:	ea cf       	rjmp	.-44     	; 0xa0ea <ds2482owWriteByte(unsigned char, unsigned char)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
    a116:	8c 2f       	mov	r24, r28
    a118:	df 91       	pop	r29
    a11a:	cf 91       	pop	r28
    a11c:	1f 91       	pop	r17
    a11e:	0f 91       	pop	r16
    a120:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
    a122:	c3 e0       	ldi	r28, 0x03	; 3
    a124:	f8 cf       	rjmp	.-16     	; 0xa116 <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
    a126:	c4 e0       	ldi	r28, 0x04	; 4
    a128:	f6 cf       	rjmp	.-20     	; 0xa116 <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>

0000a12a <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:48
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t owMatchRom(uint8_t ds2482_address, uint8_t *rom)
{
    a12a:	ef 92       	push	r14
    a12c:	ff 92       	push	r15
    a12e:	1f 93       	push	r17
    a130:	cf 93       	push	r28
    a132:	df 93       	push	r29
    a134:	18 2f       	mov	r17, r24
    a136:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:50
	uint8_t r;
	r = ds2482owWriteByte(ds2482_address, OW_MATCH_ROM);
    a138:	65 e5       	ldi	r22, 0x55	; 85
    a13a:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:51
	if(r)
    a13e:	81 11       	cpse	r24, r1
    a140:	0d c0       	rjmp	.+26     	; 0xa15c <owMatchRom(unsigned char, unsigned char*)+0x32>
    a142:	e7 01       	movw	r28, r14
    a144:	88 e0       	ldi	r24, 0x08	; 8
    a146:	e8 0e       	add	r14, r24
    a148:	f1 1c       	adc	r15, r1
owWriteBlock():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:29
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
	{
		r = ds2482owWriteByte(ds2482_address, *(block+c));
    a14a:	69 91       	ld	r22, Y+
    a14c:	81 2f       	mov	r24, r17
    a14e:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:30
		if(r)
    a152:	81 11       	cpse	r24, r1
    a154:	03 c0       	rjmp	.+6      	; 0xa15c <owMatchRom(unsigned char, unsigned char*)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:27
 */
uint8_t owWriteBlock(uint8_t ds2482_address, uint8_t *block, uint8_t length)
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
    a156:	ec 16       	cp	r14, r28
    a158:	fd 06       	cpc	r15, r29
    a15a:	b9 f7       	brne	.-18     	; 0xa14a <owMatchRom(unsigned char, unsigned char*)+0x20>
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:59
	r = owWriteBlock(ds2482_address, rom, 8);
	if(r)
		return r;
	
	return DS2482_ERR_OK;
}
    a15c:	df 91       	pop	r29
    a15e:	cf 91       	pop	r28
    a160:	1f 91       	pop	r17
    a162:	ff 90       	pop	r15
    a164:	ef 90       	pop	r14
    a166:	08 95       	ret

0000a168 <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
    a168:	0f 93       	push	r16
    a16a:	1f 93       	push	r17
    a16c:	cf 93       	push	r28
    a16e:	df 93       	push	r29
    a170:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
    a172:	0e 94 3c af 	call	0x15e78	; 0x15e78 <TwoWire::beginTransmission(unsigned char) [clone .constprop.198]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
    a176:	84 eb       	ldi	r24, 0xB4	; 180
    a178:	90 e0       	ldi	r25, 0x00	; 0
    a17a:	0e 94 e2 af 	call	0x15fc4	; 0x15fc4 <TwoWire::write(int) [clone .constprop.188]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
    a17e:	83 ec       	ldi	r24, 0xC3	; 195
    a180:	9f e0       	ldi	r25, 0x0F	; 15
    a182:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <TwoWire::endTransmission()>
    a186:	c8 2f       	mov	r28, r24
    a188:	81 11       	cpse	r24, r1
    a18a:	1b c0       	rjmp	.+54     	; 0xa1c2 <ds2482owReset(unsigned char)+0x5a>
    a18c:	de ef       	ldi	r29, 0xFE	; 254
    a18e:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
    a190:	f9 f0       	breq	.+62     	; 0xa1d0 <ds2482owReset(unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
    a192:	41 e0       	ldi	r20, 0x01	; 1
    a194:	60 2f       	mov	r22, r16
    a196:	83 ec       	ldi	r24, 0xC3	; 195
    a198:	9f e0       	ldi	r25, 0x0F	; 15
    a19a:	0e 94 f7 4f 	call	0x9fee	; 0x9fee <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
    a19e:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <TwoWire::rxBufferLength>
    a1a2:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <TwoWire::rxBufferIndex>
    a1a6:	89 1b       	sub	r24, r25
    a1a8:	99 0b       	sbc	r25, r25
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
    a1aa:	18 16       	cp	r1, r24
    a1ac:	19 06       	cpc	r1, r25
    a1ae:	1c f4       	brge	.+6      	; 0xa1b6 <ds2482owReset(unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
    a1b0:	0e 94 cf af 	call	0x15f9e	; 0x15f9e <TwoWire::read() [clone .constprop.189]>
    a1b4:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
    a1b6:	10 fd       	sbrc	r17, 0
    a1b8:	ea cf       	rjmp	.-44     	; 0xa18e <ds2482owReset(unsigned char)+0x26>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
    a1ba:	11 fd       	sbrc	r17, 1
    a1bc:	03 c0       	rjmp	.+6      	; 0xa1c4 <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
    a1be:	c5 e0       	ldi	r28, 0x05	; 5
    a1c0:	01 c0       	rjmp	.+2      	; 0xa1c4 <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
    a1c2:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
    a1c4:	8c 2f       	mov	r24, r28
    a1c6:	df 91       	pop	r29
    a1c8:	cf 91       	pop	r28
    a1ca:	1f 91       	pop	r17
    a1cc:	0f 91       	pop	r16
    a1ce:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
    a1d0:	c4 e0       	ldi	r28, 0x04	; 4
    a1d2:	f8 cf       	rjmp	.-16     	; 0xa1c4 <ds2482owReset(unsigned char)+0x5c>

0000a1d4 <RTC_DS1307::now()>:
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:268
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
}

DateTime RTC_DS1307::now() {
    a1d4:	cf 92       	push	r12
    a1d6:	df 92       	push	r13
    a1d8:	ff 92       	push	r15
    a1da:	0f 93       	push	r16
    a1dc:	1f 93       	push	r17
    a1de:	cf 93       	push	r28
    a1e0:	df 93       	push	r29
    a1e2:	6c 01       	movw	r12, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    a1e4:	88 e6       	ldi	r24, 0x68	; 104
    a1e6:	0e 94 3c af 	call	0x15e78	; 0x15e78 <TwoWire::beginTransmission(unsigned char) [clone .constprop.198]>
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);	
    a1ea:	60 e0       	ldi	r22, 0x00	; 0
    a1ec:	83 ec       	ldi	r24, 0xC3	; 195
    a1ee:	9f e0       	ldi	r25, 0x0F	; 15
    a1f0:	0e 94 dd 34 	call	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
    a1f4:	83 ec       	ldi	r24, 0xC3	; 195
    a1f6:	9f e0       	ldi	r25, 0x0F	; 15
    a1f8:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
    a1fc:	87 e0       	ldi	r24, 0x07	; 7
    a1fe:	90 e0       	ldi	r25, 0x00	; 0
    a200:	0e 94 66 b2 	call	0x164cc	; 0x164cc <TwoWire::requestFrom(int, int) [clone .constprop.149]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
    a204:	0e 94 cf af 	call	0x15f9e	; 0x15f9e <TwoWire::read() [clone .constprop.189]>
    a208:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    a20a:	28 2f       	mov	r18, r24
    a20c:	30 e0       	ldi	r19, 0x00	; 0
    a20e:	94 e0       	ldi	r25, 0x04	; 4
    a210:	35 95       	asr	r19
    a212:	27 95       	ror	r18
    a214:	9a 95       	dec	r25
    a216:	e1 f7       	brne	.-8      	; 0xa210 <RTC_DS1307::now()+0x3c>
    a218:	92 2f       	mov	r25, r18
    a21a:	99 0f       	add	r25, r25
    a21c:	99 0f       	add	r25, r25
    a21e:	c2 2f       	mov	r28, r18
    a220:	c9 1b       	sub	r28, r25
    a222:	cc 0f       	add	r28, r28
    a224:	c8 0f       	add	r28, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
    a226:	0e 94 cf af 	call	0x15f9e	; 0x15f9e <TwoWire::read() [clone .constprop.189]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    a22a:	9c 01       	movw	r18, r24
    a22c:	44 e0       	ldi	r20, 0x04	; 4
    a22e:	35 95       	asr	r19
    a230:	27 95       	ror	r18
    a232:	4a 95       	dec	r20
    a234:	e1 f7       	brne	.-8      	; 0xa22e <RTC_DS1307::now()+0x5a>
    a236:	2f 70       	andi	r18, 0x0F	; 15
    a238:	33 27       	eor	r19, r19
    a23a:	92 2f       	mov	r25, r18
    a23c:	99 0f       	add	r25, r25
    a23e:	99 0f       	add	r25, r25
    a240:	d2 2f       	mov	r29, r18
    a242:	d9 1b       	sub	r29, r25
    a244:	dd 0f       	add	r29, r29
    a246:	d8 0f       	add	r29, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
    a248:	0e 94 cf af 	call	0x15f9e	; 0x15f9e <TwoWire::read() [clone .constprop.189]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    a24c:	9c 01       	movw	r18, r24
    a24e:	54 e0       	ldi	r21, 0x04	; 4
    a250:	35 95       	asr	r19
    a252:	27 95       	ror	r18
    a254:	5a 95       	dec	r21
    a256:	e1 f7       	brne	.-8      	; 0xa250 <RTC_DS1307::now()+0x7c>
    a258:	2f 70       	andi	r18, 0x0F	; 15
    a25a:	33 27       	eor	r19, r19
    a25c:	92 2f       	mov	r25, r18
    a25e:	99 0f       	add	r25, r25
    a260:	99 0f       	add	r25, r25
    a262:	12 2f       	mov	r17, r18
    a264:	19 1b       	sub	r17, r25
    a266:	11 0f       	add	r17, r17
    a268:	18 0f       	add	r17, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
    a26a:	0e 94 cf af 	call	0x15f9e	; 0x15f9e <TwoWire::read() [clone .constprop.189]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
    a26e:	0e 94 cf af 	call	0x15f9e	; 0x15f9e <TwoWire::read() [clone .constprop.189]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    a272:	9c 01       	movw	r18, r24
    a274:	64 e0       	ldi	r22, 0x04	; 4
    a276:	35 95       	asr	r19
    a278:	27 95       	ror	r18
    a27a:	6a 95       	dec	r22
    a27c:	e1 f7       	brne	.-8      	; 0xa276 <RTC_DS1307::now()+0xa2>
    a27e:	2f 70       	andi	r18, 0x0F	; 15
    a280:	33 27       	eor	r19, r19
    a282:	92 2f       	mov	r25, r18
    a284:	99 0f       	add	r25, r25
    a286:	99 0f       	add	r25, r25
    a288:	02 2f       	mov	r16, r18
    a28a:	09 1b       	sub	r16, r25
    a28c:	00 0f       	add	r16, r16
    a28e:	08 0f       	add	r16, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
    a290:	0e 94 cf af 	call	0x15f9e	; 0x15f9e <TwoWire::read() [clone .constprop.189]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    a294:	9c 01       	movw	r18, r24
    a296:	74 e0       	ldi	r23, 0x04	; 4
    a298:	35 95       	asr	r19
    a29a:	27 95       	ror	r18
    a29c:	7a 95       	dec	r23
    a29e:	e1 f7       	brne	.-8      	; 0xa298 <RTC_DS1307::now()+0xc4>
    a2a0:	2f 70       	andi	r18, 0x0F	; 15
    a2a2:	33 27       	eor	r19, r19
    a2a4:	92 2f       	mov	r25, r18
    a2a6:	99 0f       	add	r25, r25
    a2a8:	99 0f       	add	r25, r25
    a2aa:	f2 2e       	mov	r15, r18
    a2ac:	f9 1a       	sub	r15, r25
    a2ae:	ff 0c       	add	r15, r15
    a2b0:	f8 0e       	add	r15, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
    a2b2:	0e 94 cf af 	call	0x15f9e	; 0x15f9e <TwoWire::read() [clone .constprop.189]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    a2b6:	9c 01       	movw	r18, r24
    a2b8:	e4 e0       	ldi	r30, 0x04	; 4
    a2ba:	35 95       	asr	r19
    a2bc:	27 95       	ror	r18
    a2be:	ea 95       	dec	r30
    a2c0:	e1 f7       	brne	.-8      	; 0xa2ba <RTC_DS1307::now()+0xe6>
    a2c2:	2f 70       	andi	r18, 0x0F	; 15
    a2c4:	33 27       	eor	r19, r19
    a2c6:	92 2f       	mov	r25, r18
    a2c8:	99 0f       	add	r25, r25
    a2ca:	99 0f       	add	r25, r25
    a2cc:	29 1b       	sub	r18, r25
    a2ce:	22 0f       	add	r18, r18
    a2d0:	82 0f       	add	r24, r18
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    a2d2:	f6 01       	movw	r30, r12
    a2d4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    a2d6:	f1 82       	std	Z+1, r15	; 0x01
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    a2d8:	02 83       	std	Z+2, r16	; 0x02
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    a2da:	13 83       	std	Z+3, r17	; 0x03
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    a2dc:	d4 83       	std	Z+4, r29	; 0x04
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    a2de:	c5 83       	std	Z+5, r28	; 0x05
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:283
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
    a2e0:	c6 01       	movw	r24, r12
    a2e2:	df 91       	pop	r29
    a2e4:	cf 91       	pop	r28
    a2e6:	1f 91       	pop	r17
    a2e8:	0f 91       	pop	r16
    a2ea:	ff 90       	pop	r15
    a2ec:	df 90       	pop	r13
    a2ee:	cf 90       	pop	r12
    a2f0:	08 95       	ret

0000a2f2 <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:254
  Wire.requestFrom(DS1307_ADDRESS, 1);
  uint8_t ss = Wire._I2C_READ();
  return !(ss>>7);
}

void RTC_DS1307::adjust(const DateTime& dt) {
    a2f2:	1f 93       	push	r17
    a2f4:	cf 93       	push	r28
    a2f6:	df 93       	push	r29
    a2f8:	ec 01       	movw	r28, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
    a2fa:	88 e6       	ldi	r24, 0x68	; 104
    a2fc:	0e 94 3c af 	call	0x15e78	; 0x15e78 <TwoWire::beginTransmission(unsigned char) [clone .constprop.198]>
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:256
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
    a300:	60 e0       	ldi	r22, 0x00	; 0
    a302:	83 ec       	ldi	r24, 0xC3	; 195
    a304:	9f e0       	ldi	r25, 0x0F	; 15
    a306:	0e 94 dd 34 	call	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>
    a30a:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    a30c:	1a e0       	ldi	r17, 0x0A	; 10
    a30e:	82 2f       	mov	r24, r18
    a310:	61 2f       	mov	r22, r17
    a312:	0e 94 7e e0 	call	0x1c0fc	; 0x1c0fc <__udivmodqi4>
    a316:	68 2f       	mov	r22, r24
    a318:	66 0f       	add	r22, r22
    a31a:	68 0f       	add	r22, r24
    a31c:	66 0f       	add	r22, r22
    a31e:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:258

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    a320:	83 ec       	ldi	r24, 0xC3	; 195
    a322:	9f e0       	ldi	r25, 0x0F	; 15
    a324:	0e 94 dd 34 	call	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>
    a328:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    a32a:	82 2f       	mov	r24, r18
    a32c:	61 2f       	mov	r22, r17
    a32e:	0e 94 7e e0 	call	0x1c0fc	; 0x1c0fc <__udivmodqi4>
    a332:	68 2f       	mov	r22, r24
    a334:	66 0f       	add	r22, r22
    a336:	68 0f       	add	r22, r24
    a338:	66 0f       	add	r22, r22
    a33a:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:259
void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
    a33c:	83 ec       	ldi	r24, 0xC3	; 195
    a33e:	9f e0       	ldi	r25, 0x0F	; 15
    a340:	0e 94 dd 34 	call	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>
    a344:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    a346:	82 2f       	mov	r24, r18
    a348:	61 2f       	mov	r22, r17
    a34a:	0e 94 7e e0 	call	0x1c0fc	; 0x1c0fc <__udivmodqi4>
    a34e:	68 2f       	mov	r22, r24
    a350:	66 0f       	add	r22, r22
    a352:	68 0f       	add	r22, r24
    a354:	66 0f       	add	r22, r22
    a356:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:260
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
    a358:	83 ec       	ldi	r24, 0xC3	; 195
    a35a:	9f e0       	ldi	r25, 0x0F	; 15
    a35c:	0e 94 dd 34 	call	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:261
  Wire._I2C_WRITE(bin2bcd(0));
    a360:	60 e0       	ldi	r22, 0x00	; 0
    a362:	83 ec       	ldi	r24, 0xC3	; 195
    a364:	9f e0       	ldi	r25, 0x0F	; 15
    a366:	0e 94 dd 34 	call	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>
    a36a:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    a36c:	82 2f       	mov	r24, r18
    a36e:	61 2f       	mov	r22, r17
    a370:	0e 94 7e e0 	call	0x1c0fc	; 0x1c0fc <__udivmodqi4>
    a374:	68 2f       	mov	r22, r24
    a376:	66 0f       	add	r22, r22
    a378:	68 0f       	add	r22, r24
    a37a:	66 0f       	add	r22, r22
    a37c:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:262
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
    a37e:	83 ec       	ldi	r24, 0xC3	; 195
    a380:	9f e0       	ldi	r25, 0x0F	; 15
    a382:	0e 94 dd 34 	call	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>
    a386:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    a388:	82 2f       	mov	r24, r18
    a38a:	61 2f       	mov	r22, r17
    a38c:	0e 94 7e e0 	call	0x1c0fc	; 0x1c0fc <__udivmodqi4>
    a390:	68 2f       	mov	r22, r24
    a392:	66 0f       	add	r22, r22
    a394:	68 0f       	add	r22, r24
    a396:	66 0f       	add	r22, r22
    a398:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:263
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
    a39a:	83 ec       	ldi	r24, 0xC3	; 195
    a39c:	9f e0       	ldi	r25, 0x0F	; 15
    a39e:	0e 94 dd 34 	call	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>
    a3a2:	28 81       	ld	r18, Y
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    a3a4:	82 2f       	mov	r24, r18
    a3a6:	61 2f       	mov	r22, r17
    a3a8:	0e 94 7e e0 	call	0x1c0fc	; 0x1c0fc <__udivmodqi4>
    a3ac:	68 2f       	mov	r22, r24
    a3ae:	66 0f       	add	r22, r22
    a3b0:	68 0f       	add	r22, r24
    a3b2:	66 0f       	add	r22, r22
    a3b4:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:264
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
    a3b6:	83 ec       	ldi	r24, 0xC3	; 195
    a3b8:	9f e0       	ldi	r25, 0x0F	; 15
    a3ba:	0e 94 dd 34 	call	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire.endTransmission();
    a3be:	83 ec       	ldi	r24, 0xC3	; 195
    a3c0:	9f e0       	ldi	r25, 0x0F	; 15
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:266
}
    a3c2:	df 91       	pop	r29
    a3c4:	cf 91       	pop	r28
    a3c6:	1f 91       	pop	r17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
    a3c8:	0c 94 8d 4f 	jmp	0x9f1a	; 0x9f1a <TwoWire::endTransmission()>

0000a3cc <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)>:
_Z23helper_set_date_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5865
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(datum_text, "%02d.%02d.%04d", now.day() , now.month() , now.year());
  display_element_set_string(datum_text, 11, 0, &helper_set_date_manualy, &valid_true);
}
void helper_set_date_manualy(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a3cc:	cf 92       	push	r12
    a3ce:	df 92       	push	r13
    a3d0:	ef 92       	push	r14
    a3d2:	ff 92       	push	r15
    a3d4:	0f 93       	push	r16
    a3d6:	1f 93       	push	r17
    a3d8:	cf 93       	push	r28
    a3da:	df 93       	push	r29
    a3dc:	cd b7       	in	r28, 0x3d	; 61
    a3de:	de b7       	in	r29, 0x3e	; 62
    a3e0:	69 97       	sbiw	r28, 0x19	; 25
    a3e2:	0f b6       	in	r0, 0x3f	; 63
    a3e4:	f8 94       	cli
    a3e6:	de bf       	out	0x3e, r29	; 62
    a3e8:	0f be       	out	0x3f, r0	; 63
    a3ea:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5868
  char datum_text[12];
  uint16_t dat[3];
  display_element_get_string(datum_text);
    a3ec:	ce 01       	movw	r24, r28
    a3ee:	01 96       	adiw	r24, 0x01	; 1
    a3f0:	0e 94 9b 3f 	call	0x7f36	; 0x7f36 <display_element_get_string(char*)>
    a3f4:	7e 01       	movw	r14, r28
    a3f6:	74 e1       	ldi	r23, 0x14	; 20
    a3f8:	e7 0e       	add	r14, r23
    a3fa:	f1 1c       	adc	r15, r1
    a3fc:	6e 01       	movw	r12, r28
    a3fe:	8a e1       	ldi	r24, 0x1A	; 26
    a400:	c8 0e       	add	r12, r24
    a402:	d1 1c       	adc	r13, r1
    a404:	8e 01       	movw	r16, r28
    a406:	0f 5f       	subi	r16, 0xFF	; 255
    a408:	1f 4f       	sbci	r17, 0xFF	; 255
parseBytes():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123


void parseBytes(const char* str, char sep, uint16_t* bytes, int maxBytes, int base) 
{
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    a40a:	4a e0       	ldi	r20, 0x0A	; 10
    a40c:	50 e0       	ldi	r21, 0x00	; 0
    a40e:	70 e0       	ldi	r23, 0x00	; 0
    a410:	60 e0       	ldi	r22, 0x00	; 0
    a412:	c8 01       	movw	r24, r16
    a414:	0e 94 ba d3 	call	0x1a774	; 0x1a774 <strtoul>
    a418:	f7 01       	movw	r30, r14
    a41a:	61 93       	st	Z+, r22
    a41c:	71 93       	st	Z+, r23
    a41e:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
    str = strchr(str, sep);               // Find next separator
    a420:	6e e2       	ldi	r22, 0x2E	; 46
    a422:	70 e0       	ldi	r23, 0x00	; 0
    a424:	c8 01       	movw	r24, r16
    a426:	0e 94 8c e1 	call	0x1c318	; 0x1c318 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    if (str == NULL || *str == '\0') {
    a42a:	00 97       	sbiw	r24, 0x00	; 0
    a42c:	51 f0       	breq	.+20     	; 0xa442 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x76>
    a42e:	fc 01       	movw	r30, r24
    a430:	20 81       	ld	r18, Z
    a432:	22 23       	and	r18, r18
    a434:	31 f0       	breq	.+12     	; 0xa442 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x76>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:128
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
    a436:	8c 01       	movw	r16, r24
    a438:	0f 5f       	subi	r16, 0xFF	; 255
    a43a:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122
}


void parseBytes(const char* str, char sep, uint16_t* bytes, int maxBytes, int base) 
{
  for (int i = 0; i < maxBytes; i++) {
    a43c:	ce 14       	cp	r12, r14
    a43e:	df 04       	cpc	r13, r15
    a440:	21 f7       	brne	.-56     	; 0xa40a <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x3e>
    a442:	20 91 44 12 	lds	r18, 0x1244	; 0x801244 <now+0x5>
    a446:	30 91 43 12 	lds	r19, 0x1243	; 0x801243 <now+0x4>
    a44a:	40 91 42 12 	lds	r20, 0x1242	; 0x801242 <now+0x3>
_Z23helper_set_date_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5870
  parseBytes(datum_text, '.', dat, 3, 10);
  rtc.adjust(DateTime(dat[2], dat[1], dat[0], now.hour(), now.minute(), now.second()));
    a44e:	5c 89       	ldd	r21, Y+20	; 0x14
    a450:	6e 89       	ldd	r22, Y+22	; 0x16
    a452:	88 8d       	ldd	r24, Y+24	; 0x18
    a454:	99 8d       	ldd	r25, Y+25	; 0x19
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    a456:	80 3d       	cpi	r24, 0xD0	; 208
    a458:	f7 e0       	ldi	r31, 0x07	; 7
    a45a:	9f 07       	cpc	r25, r31
    a45c:	10 f0       	brcs	.+4      	; 0xa462 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x96>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    a45e:	80 5d       	subi	r24, 0xD0	; 208
    a460:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
    a462:	8d 87       	std	Y+13, r24	; 0x0d
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    a464:	6e 87       	std	Y+14, r22	; 0x0e
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    a466:	5f 87       	std	Y+15, r21	; 0x0f
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    a468:	48 8b       	std	Y+16, r20	; 0x10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    a46a:	39 8b       	std	Y+17, r19	; 0x11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    a46c:	2a 8b       	std	Y+18, r18	; 0x12
_Z23helper_set_date_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5870
    a46e:	ce 01       	movw	r24, r28
    a470:	0d 96       	adiw	r24, 0x0d	; 13
    a472:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5871
}
    a476:	69 96       	adiw	r28, 0x19	; 25
    a478:	0f b6       	in	r0, 0x3f	; 63
    a47a:	f8 94       	cli
    a47c:	de bf       	out	0x3e, r29	; 62
    a47e:	0f be       	out	0x3f, r0	; 63
    a480:	cd bf       	out	0x3d, r28	; 61
    a482:	df 91       	pop	r29
    a484:	cf 91       	pop	r28
    a486:	1f 91       	pop	r17
    a488:	0f 91       	pop	r16
    a48a:	ff 90       	pop	r15
    a48c:	ef 90       	pop	r14
    a48e:	df 90       	pop	r13
    a490:	cf 90       	pop	r12
    a492:	08 95       	ret

0000a494 <helper_set_time_manualy(unsigned int, unsigned int, unsigned char)>:
_Z23helper_set_time_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5849
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(cas_text, "%02d:%02d:%02d", now.hour(), now.minute(), now.second());
  display_element_set_string(cas_text, 9, 0, &helper_set_time_manualy, &valid_true);
}
void helper_set_time_manualy(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a494:	cf 93       	push	r28
    a496:	df 93       	push	r29
    a498:	cd b7       	in	r28, 0x3d	; 61
    a49a:	de b7       	in	r29, 0x3e	; 62
    a49c:	64 97       	sbiw	r28, 0x14	; 20
    a49e:	0f b6       	in	r0, 0x3f	; 63
    a4a0:	f8 94       	cli
    a4a2:	de bf       	out	0x3e, r29	; 62
    a4a4:	0f be       	out	0x3f, r0	; 63
    a4a6:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5852
  char cas_text[10];
  uint8_t tim[3];
  display_element_get_string(cas_text);
    a4a8:	ce 01       	movw	r24, r28
    a4aa:	01 96       	adiw	r24, 0x01	; 1
    a4ac:	0e 94 9b 3f 	call	0x7f36	; 0x7f36 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5853
  parseBytes(cas_text, ':', tim, 3, 10);
    a4b0:	23 e0       	ldi	r18, 0x03	; 3
    a4b2:	30 e0       	ldi	r19, 0x00	; 0
    a4b4:	ae 01       	movw	r20, r28
    a4b6:	4e 5e       	subi	r20, 0xEE	; 238
    a4b8:	5f 4f       	sbci	r21, 0xFF	; 255
    a4ba:	6a e3       	ldi	r22, 0x3A	; 58
    a4bc:	ce 01       	movw	r24, r28
    a4be:	01 96       	adiw	r24, 0x01	; 1
    a4c0:	0e 94 f5 b0 	call	0x161ea	; 0x161ea <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.182]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5854
  rtc.adjust(DateTime(now.year(), now.month(), now.day(), tim[0], tim[1], tim[2]));
    a4c4:	8c 89       	ldd	r24, Y+20	; 0x14
    a4c6:	9b 89       	ldd	r25, Y+19	; 0x13
    a4c8:	2a 89       	ldd	r18, Y+18	; 0x12
    a4ca:	ef e3       	ldi	r30, 0x3F	; 63
    a4cc:	f2 e1       	ldi	r31, 0x12	; 18
    a4ce:	32 81       	ldd	r19, Z+2	; 0x02
    a4d0:	41 81       	ldd	r20, Z+1	; 0x01
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    a4d2:	50 81       	ld	r21, Z
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    a4d4:	5b 87       	std	Y+11, r21	; 0x0b
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    a4d6:	4c 87       	std	Y+12, r20	; 0x0c
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    a4d8:	3d 87       	std	Y+13, r19	; 0x0d
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    a4da:	2e 87       	std	Y+14, r18	; 0x0e
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    a4dc:	9f 87       	std	Y+15, r25	; 0x0f
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    a4de:	88 8b       	std	Y+16, r24	; 0x10
_Z23helper_set_time_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5854
    a4e0:	ce 01       	movw	r24, r28
    a4e2:	0b 96       	adiw	r24, 0x0b	; 11
    a4e4:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5855
}
    a4e8:	64 96       	adiw	r28, 0x14	; 20
    a4ea:	0f b6       	in	r0, 0x3f	; 63
    a4ec:	f8 94       	cli
    a4ee:	de bf       	out	0x3e, r29	; 62
    a4f0:	0f be       	out	0x3f, r0	; 63
    a4f2:	cd bf       	out	0x3d, r28	; 61
    a4f4:	df 91       	pop	r29
    a4f6:	cf 91       	pop	r28
    a4f8:	08 95       	ret

0000a4fa <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:538
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


boolean PubSubClient::connected() {
    a4fa:	cf 93       	push	r28
    a4fc:	df 93       	push	r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:540
    boolean rc;
    if (_client == NULL ) {
    a4fe:	fc 01       	movw	r30, r24
    a500:	a0 81       	ld	r26, Z
    a502:	b1 81       	ldd	r27, Z+1	; 0x01
    a504:	10 97       	sbiw	r26, 0x00	; 0
    a506:	21 f4       	brne	.+8      	; 0xa510 <PubSubClient::connected()+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
        rc = false;
    } else {
        rc = (int)_client->connected();
    a508:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:553
                _client->stop();
            }
        }
    }
    return rc;
}
    a50a:	df 91       	pop	r29
    a50c:	cf 91       	pop	r28
    a50e:	08 95       	ret
    a510:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
    a512:	ed 91       	ld	r30, X+
    a514:	fc 91       	ld	r31, X
    a516:	11 97       	sbiw	r26, 0x01	; 1
    a518:	06 88       	ldd	r0, Z+22	; 0x16
    a51a:	f7 89       	ldd	r31, Z+23	; 0x17
    a51c:	e0 2d       	mov	r30, r0
    a51e:	cd 01       	movw	r24, r26
    a520:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:544
        if (!rc) {
    a522:	81 11       	cpse	r24, r1
    a524:	1e c0       	rjmp	.+60     	; 0xa562 <PubSubClient::connected()+0x68>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:545
            if (this->_state == MQTT_CONNECTED) {
    a526:	fe 01       	movw	r30, r28
    a528:	e5 5e       	subi	r30, 0xE5	; 229
    a52a:	fd 4f       	sbci	r31, 0xFD	; 253
    a52c:	80 81       	ld	r24, Z
    a52e:	91 81       	ldd	r25, Z+1	; 0x01
    a530:	89 2b       	or	r24, r25
    a532:	51 f7       	brne	.-44     	; 0xa508 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:546
                this->_state = MQTT_CONNECTION_LOST;
    a534:	8d ef       	ldi	r24, 0xFD	; 253
    a536:	9f ef       	ldi	r25, 0xFF	; 255
    a538:	91 83       	std	Z+1, r25	; 0x01
    a53a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:547
                _client->flush();
    a53c:	88 81       	ld	r24, Y
    a53e:	99 81       	ldd	r25, Y+1	; 0x01
    a540:	dc 01       	movw	r26, r24
    a542:	ed 91       	ld	r30, X+
    a544:	fc 91       	ld	r31, X
    a546:	06 80       	ldd	r0, Z+6	; 0x06
    a548:	f7 81       	ldd	r31, Z+7	; 0x07
    a54a:	e0 2d       	mov	r30, r0
    a54c:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:548
                _client->stop();
    a54e:	88 81       	ld	r24, Y
    a550:	99 81       	ldd	r25, Y+1	; 0x01
    a552:	dc 01       	movw	r26, r24
    a554:	ed 91       	ld	r30, X+
    a556:	fc 91       	ld	r31, X
    a558:	04 88       	ldd	r0, Z+20	; 0x14
    a55a:	f5 89       	ldd	r31, Z+21	; 0x15
    a55c:	e0 2d       	mov	r30, r0
    a55e:	19 95       	eicall
    a560:	d3 cf       	rjmp	.-90     	; 0xa508 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
    a562:	81 e0       	ldi	r24, 0x01	; 1
    a564:	d2 cf       	rjmp	.-92     	; 0xa50a <PubSubClient::connected()+0x10>

0000a566 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:426
    lastOutActivity = millis();

    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    a566:	bf 92       	push	r11
    a568:	cf 92       	push	r12
    a56a:	df 92       	push	r13
    a56c:	ef 92       	push	r14
    a56e:	ff 92       	push	r15
    a570:	0f 93       	push	r16
    a572:	1f 93       	push	r17
    a574:	cf 93       	push	r28
    a576:	df 93       	push	r29
    a578:	00 d0       	rcall	.+0      	; 0xa57a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
    a57a:	1f 92       	push	r1
    a57c:	cd b7       	in	r28, 0x3d	; 61
    a57e:	de b7       	in	r29, 0x3e	; 62
    a580:	7c 01       	movw	r14, r24
    a582:	b6 2e       	mov	r11, r22
    a584:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:432
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    a586:	c9 01       	movw	r24, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:428
    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    a588:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
    a58a:	be 01       	movw	r22, r28
    a58c:	6f 5f       	subi	r22, 0xFF	; 255
    a58e:	7f 4f       	sbci	r23, 0xFF	; 255
    a590:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:434
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
    a592:	28 2f       	mov	r18, r24
    a594:	2f 77       	andi	r18, 0x7F	; 127
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:435
        len = len / 128;
    a596:	88 0f       	add	r24, r24
    a598:	89 2f       	mov	r24, r25
    a59a:	88 1f       	adc	r24, r24
    a59c:	99 0b       	sbc	r25, r25
    a59e:	91 95       	neg	r25
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:436
        if (len > 0) {
    a5a0:	00 97       	sbiw	r24, 0x00	; 0
    a5a2:	09 f0       	breq	.+2      	; 0xa5a6 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:437
            digit |= 0x80;
    a5a4:	20 68       	ori	r18, 0x80	; 128
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        }
        lenBuf[pos++] = digit;
    a5a6:	f6 01       	movw	r30, r12
    a5a8:	e3 0f       	add	r30, r19
    a5aa:	f1 1d       	adc	r31, r1
    a5ac:	20 83       	st	Z, r18
    a5ae:	3f 5f       	subi	r19, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:441
        llen++;
    } while(len>0);
    a5b0:	00 97       	sbiw	r24, 0x00	; 0
    a5b2:	79 f7       	brne	.-34     	; 0xa592 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:443

    buf[4-llen] = header;
    a5b4:	e3 2f       	mov	r30, r19
    a5b6:	f0 e0       	ldi	r31, 0x00	; 0
    a5b8:	ba 01       	movw	r22, r20
    a5ba:	6e 1b       	sub	r22, r30
    a5bc:	7f 0b       	sbc	r23, r31
    a5be:	6c 5f       	subi	r22, 0xFC	; 252
    a5c0:	7f 4f       	sbci	r23, 0xFF	; 255
    a5c2:	db 01       	movw	r26, r22
    a5c4:	bc 92       	st	X, r11
    a5c6:	4e 1b       	sub	r20, r30
    a5c8:	5f 0b       	sbc	r21, r31
    a5ca:	4b 5f       	subi	r20, 0xFB	; 251
    a5cc:	5f 4f       	sbci	r21, 0xFF	; 255
    a5ce:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:444
    for (int i=0;i<llen;i++) {
    a5d0:	9c 01       	movw	r18, r24
    a5d2:	2c 19       	sub	r18, r12
    a5d4:	3d 09       	sbc	r19, r13
    a5d6:	2e 17       	cp	r18, r30
    a5d8:	3f 07       	cpc	r19, r31
    a5da:	3c f4       	brge	.+14     	; 0xa5ea <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:445
        buf[5-llen+i] = lenBuf[i];
    a5dc:	dc 01       	movw	r26, r24
    a5de:	2d 91       	ld	r18, X+
    a5e0:	cd 01       	movw	r24, r26
    a5e2:	da 01       	movw	r26, r20
    a5e4:	2d 93       	st	X+, r18
    a5e6:	ad 01       	movw	r20, r26
    a5e8:	f3 cf       	rjmp	.-26     	; 0xa5d0 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:462
        bytesRemaining -= rc;
        writeBuf += rc;
    }
    return result;
#else
    rc = _client->write(buf+(4-llen),length+1+llen);
    a5ea:	d7 01       	movw	r26, r14
    a5ec:	8d 91       	ld	r24, X+
    a5ee:	9c 91       	ld	r25, X
    a5f0:	0f 5f       	subi	r16, 0xFF	; 255
    a5f2:	1f 4f       	sbci	r17, 0xFF	; 255
    a5f4:	0e 0f       	add	r16, r30
    a5f6:	1f 1f       	adc	r17, r31
    a5f8:	dc 01       	movw	r26, r24
    a5fa:	ed 91       	ld	r30, X+
    a5fc:	fc 91       	ld	r31, X
    a5fe:	02 80       	ldd	r0, Z+2	; 0x02
    a600:	f3 81       	ldd	r31, Z+3	; 0x03
    a602:	e0 2d       	mov	r30, r0
    a604:	a8 01       	movw	r20, r16
    a606:	19 95       	eicall
    a608:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:463
    lastOutActivity = millis();
    a60a:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
    a60e:	f7 01       	movw	r30, r14
    a610:	ec 5f       	subi	r30, 0xFC	; 252
    a612:	fd 4f       	sbci	r31, 0xFD	; 253
    a614:	60 83       	st	Z, r22
    a616:	71 83       	std	Z+1, r23	; 0x01
    a618:	82 83       	std	Z+2, r24	; 0x02
    a61a:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:464
    return (rc == 1+llen+length);
    a61c:	81 e0       	ldi	r24, 0x01	; 1
    a61e:	0c 15       	cp	r16, r12
    a620:	1d 05       	cpc	r17, r13
    a622:	09 f0       	breq	.+2      	; 0xa626 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
    a624:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:466
#endif
}
    a626:	0f 90       	pop	r0
    a628:	0f 90       	pop	r0
    a62a:	0f 90       	pop	r0
    a62c:	0f 90       	pop	r0
    a62e:	df 91       	pop	r29
    a630:	cf 91       	pop	r28
    a632:	1f 91       	pop	r17
    a634:	0f 91       	pop	r16
    a636:	ff 90       	pop	r15
    a638:	ef 90       	pop	r14
    a63a:	df 90       	pop	r13
    a63c:	cf 90       	pop	r12
    a63e:	bf 90       	pop	r11
    a640:	08 95       	ret

0000a642 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:347
        return true;
    }
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    a642:	af 92       	push	r10
    a644:	bf 92       	push	r11
    a646:	cf 92       	push	r12
    a648:	df 92       	push	r13
    a64a:	ef 92       	push	r14
    a64c:	ff 92       	push	r15
    a64e:	0f 93       	push	r16
    a650:	1f 93       	push	r17
    a652:	cf 93       	push	r28
    a654:	df 93       	push	r29
    a656:	7c 01       	movw	r14, r24
    a658:	5b 01       	movw	r10, r22
    a65a:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:348
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
    a65c:	ea 01       	movw	r28, r20
    a65e:	09 90       	ld	r0, Y+
    a660:	00 20       	and	r0, r0
    a662:	e9 f7       	brne	.-6      	; 0xa65e <PubSubClient::publish(char const*, char const*)+0x1c>
    a664:	21 97       	sbiw	r28, 0x01	; 1
    a666:	c4 1b       	sub	r28, r20
    a668:	d5 0b       	sbc	r29, r21
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:360
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
    return publish(topic, payload, plength, false);
}

boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retained) {
    if (connected()) {
    a66a:	0e 94 7d 52 	call	0xa4fa	; 0xa4fa <PubSubClient::connected()>
    a66e:	88 23       	and	r24, r24
    a670:	c9 f1       	breq	.+114    	; 0xa6e4 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:361
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
    a672:	f5 01       	movw	r30, r10
    a674:	01 90       	ld	r0, Z+
    a676:	00 20       	and	r0, r0
    a678:	e9 f7       	brne	.-6      	; 0xa674 <PubSubClient::publish(char const*, char const*)+0x32>
    a67a:	31 97       	sbiw	r30, 0x01	; 1
    a67c:	ea 19       	sub	r30, r10
    a67e:	fb 09       	sbc	r31, r11
    a680:	ce 01       	movw	r24, r28
    a682:	07 96       	adiw	r24, 0x07	; 7
    a684:	e8 0f       	add	r30, r24
    a686:	f9 1f       	adc	r31, r25
    a688:	e1 30       	cpi	r30, 0x01	; 1
    a68a:	f2 40       	sbci	r31, 0x02	; 2
    a68c:	58 f5       	brcc	.+86     	; 0xa6e4 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:367
            // Too long
            return false;
        }
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        length = writeString(topic,buffer,length);
    a68e:	67 01       	movw	r12, r14
    a690:	82 e0       	ldi	r24, 0x02	; 2
    a692:	c8 0e       	add	r12, r24
    a694:	d1 1c       	adc	r13, r1
    a696:	45 e0       	ldi	r20, 0x05	; 5
    a698:	50 e0       	ldi	r21, 0x00	; 0
    a69a:	b6 01       	movw	r22, r12
    a69c:	c5 01       	movw	r24, r10
    a69e:	0e 94 d8 ae 	call	0x15db0	; 0x15db0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.213]>
    a6a2:	f8 01       	movw	r30, r16
    a6a4:	dc 01       	movw	r26, r24
    a6a6:	12 96       	adiw	r26, 0x02	; 2
    a6a8:	ae 0d       	add	r26, r14
    a6aa:	bf 1d       	adc	r27, r15
    a6ac:	a8 01       	movw	r20, r16
    a6ae:	4c 0f       	add	r20, r28
    a6b0:	5d 1f       	adc	r21, r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:369
        uint16_t i;
        for (i=0;i<plength;i++) {
    a6b2:	e4 17       	cp	r30, r20
    a6b4:	f5 07       	cpc	r31, r21
    a6b6:	19 f0       	breq	.+6      	; 0xa6be <PubSubClient::publish(char const*, char const*)+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:370
            buffer[length++] = payload[i];
    a6b8:	21 91       	ld	r18, Z+
    a6ba:	2d 93       	st	X+, r18
    a6bc:	fa cf       	rjmp	.-12     	; 0xa6b2 <PubSubClient::publish(char const*, char const*)+0x70>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
    a6be:	25 97       	sbiw	r28, 0x05	; 5
    a6c0:	9e 01       	movw	r18, r28
    a6c2:	28 0f       	add	r18, r24
    a6c4:	39 1f       	adc	r19, r25
    a6c6:	a6 01       	movw	r20, r12
    a6c8:	60 e3       	ldi	r22, 0x30	; 48
    a6ca:	c7 01       	movw	r24, r14
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
    a6cc:	df 91       	pop	r29
    a6ce:	cf 91       	pop	r28
    a6d0:	1f 91       	pop	r17
    a6d2:	0f 91       	pop	r16
    a6d4:	ff 90       	pop	r15
    a6d6:	ef 90       	pop	r14
    a6d8:	df 90       	pop	r13
    a6da:	cf 90       	pop	r12
    a6dc:	bf 90       	pop	r11
    a6de:	af 90       	pop	r10
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
    a6e0:	0c 94 b3 52 	jmp	0xa566	; 0xa566 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
    a6e4:	80 e0       	ldi	r24, 0x00	; 0
    a6e6:	df 91       	pop	r29
    a6e8:	cf 91       	pop	r28
    a6ea:	1f 91       	pop	r17
    a6ec:	0f 91       	pop	r16
    a6ee:	ff 90       	pop	r15
    a6f0:	ef 90       	pop	r14
    a6f2:	df 90       	pop	r13
    a6f4:	cf 90       	pop	r12
    a6f6:	bf 90       	pop	r11
    a6f8:	af 90       	pop	r10
    a6fa:	08 95       	ret

0000a6fc <PID::SetControllerDirection(int)>:
_ZN3PID22SetControllerDirectionEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:204
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    a6fc:	0f 93       	push	r16
    a6fe:	1f 93       	push	r17
    a700:	cf 93       	push	r28
    a702:	df 93       	push	r29
    a704:	ec 01       	movw	r28, r24
    a706:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205
   if(inAuto && Direction !=controllerDirection)
    a708:	8a ad       	ldd	r24, Y+58	; 0x3a
    a70a:	88 23       	and	r24, r24
    a70c:	61 f1       	breq	.+88     	; 0xa766 <PID::SetControllerDirection(int)+0x6a>
    a70e:	88 8d       	ldd	r24, Y+24	; 0x18
    a710:	99 8d       	ldd	r25, Y+25	; 0x19
    a712:	86 17       	cp	r24, r22
    a714:	97 07       	cpc	r25, r23
    a716:	39 f1       	breq	.+78     	; 0xa766 <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:207
   {
	    kp = (0 - kp);
    a718:	2c 85       	ldd	r18, Y+12	; 0x0c
    a71a:	3d 85       	ldd	r19, Y+13	; 0x0d
    a71c:	4e 85       	ldd	r20, Y+14	; 0x0e
    a71e:	5f 85       	ldd	r21, Y+15	; 0x0f
    a720:	60 e0       	ldi	r22, 0x00	; 0
    a722:	70 e0       	ldi	r23, 0x00	; 0
    a724:	cb 01       	movw	r24, r22
    a726:	0e 94 64 df 	call	0x1bec8	; 0x1bec8 <__subsf3>
    a72a:	6c 87       	std	Y+12, r22	; 0x0c
    a72c:	7d 87       	std	Y+13, r23	; 0x0d
    a72e:	8e 87       	std	Y+14, r24	; 0x0e
    a730:	9f 87       	std	Y+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:208
      ki = (0 - ki);
    a732:	28 89       	ldd	r18, Y+16	; 0x10
    a734:	39 89       	ldd	r19, Y+17	; 0x11
    a736:	4a 89       	ldd	r20, Y+18	; 0x12
    a738:	5b 89       	ldd	r21, Y+19	; 0x13
    a73a:	60 e0       	ldi	r22, 0x00	; 0
    a73c:	70 e0       	ldi	r23, 0x00	; 0
    a73e:	cb 01       	movw	r24, r22
    a740:	0e 94 64 df 	call	0x1bec8	; 0x1bec8 <__subsf3>
    a744:	68 8b       	std	Y+16, r22	; 0x10
    a746:	79 8b       	std	Y+17, r23	; 0x11
    a748:	8a 8b       	std	Y+18, r24	; 0x12
    a74a:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:209
      kd = (0 - kd);
    a74c:	2c 89       	ldd	r18, Y+20	; 0x14
    a74e:	3d 89       	ldd	r19, Y+21	; 0x15
    a750:	4e 89       	ldd	r20, Y+22	; 0x16
    a752:	5f 89       	ldd	r21, Y+23	; 0x17
    a754:	60 e0       	ldi	r22, 0x00	; 0
    a756:	70 e0       	ldi	r23, 0x00	; 0
    a758:	cb 01       	movw	r24, r22
    a75a:	0e 94 64 df 	call	0x1bec8	; 0x1bec8 <__subsf3>
    a75e:	6c 8b       	std	Y+20, r22	; 0x14
    a760:	7d 8b       	std	Y+21, r23	; 0x15
    a762:	8e 8b       	std	Y+22, r24	; 0x16
    a764:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   }
   controllerDirection = Direction;
    a766:	19 8f       	std	Y+25, r17	; 0x19
    a768:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:212
}
    a76a:	df 91       	pop	r29
    a76c:	cf 91       	pop	r28
    a76e:	1f 91       	pop	r17
    a770:	0f 91       	pop	r16
    a772:	08 95       	ret

0000a774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>:
_ZN11EEPROMClass5writeEih.isra.1.lto_priv.275():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    a774:	0c 94 c3 de 	jmp	0x1bd86	; 0x1bd86 <eeprom_write_byte>

0000a778 <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:70
  return data.f;
}


void EEPROMwriteFloat(unsigned int addr, float x)
{
    a778:	cf 92       	push	r12
    a77a:	df 92       	push	r13
    a77c:	ef 92       	push	r14
    a77e:	ff 92       	push	r15
    a780:	0f 93       	push	r16
    a782:	1f 93       	push	r17
    a784:	cf 93       	push	r28
    a786:	df 93       	push	r29
    a788:	00 d0       	rcall	.+0      	; 0xa78a <EEPROMwriteFloat(unsigned int, float)+0x12>
    a78a:	1f 92       	push	r1
    a78c:	cd b7       	in	r28, 0x3d	; 61
    a78e:	de b7       	in	r29, 0x3e	; 62
    a790:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:75
  union {
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
    a792:	49 83       	std	Y+1, r20	; 0x01
    a794:	5a 83       	std	Y+2, r21	; 0x02
    a796:	6b 83       	std	Y+3, r22	; 0x03
    a798:	7c 83       	std	Y+4, r23	; 0x04
    a79a:	ce 01       	movw	r24, r28
    a79c:	01 96       	adiw	r24, 0x01	; 1
    a79e:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:76
  for (int i = 0; i < 4; i++) EEPROM.write(addr + i, data.b[i]);
    a7a0:	10 e0       	ldi	r17, 0x00	; 0
    a7a2:	00 e0       	ldi	r16, 0x00	; 0
    a7a4:	f7 01       	movw	r30, r14
    a7a6:	61 91       	ld	r22, Z+
    a7a8:	7f 01       	movw	r14, r30
    a7aa:	c8 01       	movw	r24, r16
    a7ac:	8c 0d       	add	r24, r12
    a7ae:	9d 1d       	adc	r25, r13
    a7b0:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    a7b4:	0f 5f       	subi	r16, 0xFF	; 255
    a7b6:	1f 4f       	sbci	r17, 0xFF	; 255
    a7b8:	04 30       	cpi	r16, 0x04	; 4
    a7ba:	11 05       	cpc	r17, r1
    a7bc:	99 f7       	brne	.-26     	; 0xa7a4 <EEPROMwriteFloat(unsigned int, float)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:77
}
    a7be:	0f 90       	pop	r0
    a7c0:	0f 90       	pop	r0
    a7c2:	0f 90       	pop	r0
    a7c4:	0f 90       	pop	r0
    a7c6:	df 91       	pop	r29
    a7c8:	cf 91       	pop	r28
    a7ca:	1f 91       	pop	r17
    a7cc:	0f 91       	pop	r16
    a7ce:	ff 90       	pop	r15
    a7d0:	ef 90       	pop	r14
    a7d2:	df 90       	pop	r13
    a7d4:	cf 90       	pop	r12
    a7d6:	08 95       	ret

0000a7d8 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:371
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
    a7d8:	2d e4       	ldi	r18, 0x4D	; 77
    a7da:	82 9f       	mul	r24, r18
    a7dc:	c0 01       	movw	r24, r0
    a7de:	11 24       	eor	r1, r1
    a7e0:	26 e0       	ldi	r18, 0x06	; 6
    a7e2:	62 9f       	mul	r22, r18
    a7e4:	80 0d       	add	r24, r0
    a7e6:	91 1d       	adc	r25, r1
    a7e8:	11 24       	eor	r1, r1
    a7ea:	64 2f       	mov	r22, r20
    a7ec:	8e 50       	subi	r24, 0x0E	; 14
    a7ee:	9e 4f       	sbci	r25, 0xFE	; 254
    a7f0:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>

0000a7f4 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:330
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
  return ret;
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
    a7f4:	1f 93       	push	r17
    a7f6:	cf 93       	push	r28
    a7f8:	df 93       	push	r29
    a7fa:	14 2f       	mov	r17, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
    a7fc:	9d e4       	ldi	r25, 0x4D	; 77
    a7fe:	89 9f       	mul	r24, r25
    a800:	e0 01       	movw	r28, r0
    a802:	11 24       	eor	r1, r1
    a804:	cf 50       	subi	r28, 0x0F	; 15
    a806:	de 4f       	sbci	r29, 0xFE	; 254
    a808:	86 e0       	ldi	r24, 0x06	; 6
    a80a:	68 9f       	mul	r22, r24
    a80c:	c0 0d       	add	r28, r0
    a80e:	d1 1d       	adc	r29, r1
    a810:	11 24       	eor	r1, r1
    a812:	65 2f       	mov	r22, r21
    a814:	ce 01       	movw	r24, r28
    a816:	05 96       	adiw	r24, 0x05	; 5
    a818:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    a81c:	61 2f       	mov	r22, r17
    a81e:	ce 01       	movw	r24, r28
    a820:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:333
}
    a822:	df 91       	pop	r29
    a824:	cf 91       	pop	r28
    a826:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    a828:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>

0000a82c <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:312
  *stop_min = (stop & 0b00000011) * 15;
  *active = start & 0b00000001;
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
    a82c:	cf 92       	push	r12
    a82e:	ef 92       	push	r14
    a830:	0f 93       	push	r16
    a832:	1f 93       	push	r17
    a834:	cf 93       	push	r28
    a836:	df 93       	push	r29
    a838:	c8 2f       	mov	r28, r24
    a83a:	56 2f       	mov	r21, r22
    a83c:	8e 2d       	mov	r24, r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
    a83e:	3f e0       	ldi	r19, 0x0F	; 15
    a840:	63 2f       	mov	r22, r19
    a842:	0e 94 7e e0 	call	0x1c0fc	; 0x1c0fc <__udivmodqi4>
    a846:	83 70       	andi	r24, 0x03	; 3
    a848:	98 e0       	ldi	r25, 0x08	; 8
    a84a:	09 9f       	mul	r16, r25
    a84c:	80 01       	movw	r16, r0
    a84e:	11 24       	eor	r1, r1
    a850:	08 0f       	add	r16, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    a852:	8d e4       	ldi	r24, 0x4D	; 77
    a854:	c8 9f       	mul	r28, r24
    a856:	e0 01       	movw	r28, r0
    a858:	11 24       	eor	r1, r1
    a85a:	cf 50       	subi	r28, 0x0F	; 15
    a85c:	de 4f       	sbci	r29, 0xFE	; 254
    a85e:	96 e0       	ldi	r25, 0x06	; 6
    a860:	59 9f       	mul	r21, r25
    a862:	c0 0d       	add	r28, r0
    a864:	d1 1d       	adc	r29, r1
    a866:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
    a868:	82 2f       	mov	r24, r18
    a86a:	0e 94 7e e0 	call	0x1c0fc	; 0x1c0fc <__udivmodqi4>
    a86e:	68 2f       	mov	r22, r24
    a870:	66 0f       	add	r22, r22
    a872:	66 70       	andi	r22, 0x06	; 6
    a874:	88 e0       	ldi	r24, 0x08	; 8
    a876:	48 9f       	mul	r20, r24
    a878:	a0 01       	movw	r20, r0
    a87a:	11 24       	eor	r1, r1
    a87c:	9c 2d       	mov	r25, r12
    a87e:	91 70       	andi	r25, 0x01	; 1
    a880:	c9 2e       	mov	r12, r25
    a882:	c4 0e       	add	r12, r20
    a884:	6c 0d       	add	r22, r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    a886:	ce 01       	movw	r24, r28
    a888:	02 96       	adiw	r24, 0x02	; 2
    a88a:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    a88e:	60 2f       	mov	r22, r16
    a890:	ce 01       	movw	r24, r28
    a892:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:318
}
    a894:	df 91       	pop	r29
    a896:	cf 91       	pop	r28
    a898:	1f 91       	pop	r17
    a89a:	0f 91       	pop	r16
    a89c:	ef 90       	pop	r14
    a89e:	cf 90       	pop	r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    a8a0:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>

0000a8a4 <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:281
    if (t == 0) break;
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
    a8a4:	ef 92       	push	r14
    a8a6:	ff 92       	push	r15
    a8a8:	0f 93       	push	r16
    a8aa:	1f 93       	push	r17
    a8ac:	cf 93       	push	r28
    a8ae:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    a8b0:	9d e4       	ldi	r25, 0x4D	; 77
    a8b2:	89 9f       	mul	r24, r25
    a8b4:	80 01       	movw	r16, r0
    a8b6:	11 24       	eor	r1, r1
    a8b8:	eb 01       	movw	r28, r22
    a8ba:	78 01       	movw	r14, r16
    a8bc:	8c ec       	ldi	r24, 0xCC	; 204
    a8be:	e8 1a       	sub	r14, r24
    a8c0:	8d ef       	ldi	r24, 0xFD	; 253
    a8c2:	f8 0a       	sbc	r15, r24
    a8c4:	02 5c       	subi	r16, 0xC2	; 194
    a8c6:	1d 4f       	sbci	r17, 0xFD	; 253
    a8c8:	69 91       	ld	r22, Y+
    a8ca:	c7 01       	movw	r24, r14
    a8cc:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
    a8d0:	fe 01       	movw	r30, r28
    a8d2:	31 97       	sbiw	r30, 0x01	; 1
    a8d4:	80 81       	ld	r24, Z
    a8d6:	88 23       	and	r24, r24
    a8d8:	31 f0       	breq	.+12     	; 0xa8e6 <thermostat_program_set_name(unsigned char, char*)+0x42>
    a8da:	9f ef       	ldi	r25, 0xFF	; 255
    a8dc:	e9 1a       	sub	r14, r25
    a8de:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:282
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
    a8e0:	e0 16       	cp	r14, r16
    a8e2:	f1 06       	cpc	r15, r17
    a8e4:	89 f7       	brne	.-30     	; 0xa8c8 <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
    a8e6:	df 91       	pop	r29
    a8e8:	cf 91       	pop	r28
    a8ea:	1f 91       	pop	r17
    a8ec:	0f 91       	pop	r16
    a8ee:	ff 90       	pop	r15
    a8f0:	ef 90       	pop	r14
    a8f2:	08 95       	ret

0000a8f4 <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:232
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
}

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
    a8f4:	ef 92       	push	r14
    a8f6:	ff 92       	push	r15
    a8f8:	0f 93       	push	r16
    a8fa:	1f 93       	push	r17
    a8fc:	cf 93       	push	r28
    a8fe:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
    a900:	e8 2e       	mov	r14, r24
    a902:	f1 2c       	mov	r15, r1
    a904:	91 e2       	ldi	r25, 0x21	; 33
    a906:	89 9f       	mul	r24, r25
    a908:	e0 01       	movw	r28, r0
    a90a:	11 24       	eor	r1, r1
    a90c:	87 01       	movw	r16, r14
    a90e:	00 0f       	add	r16, r16
    a910:	11 1f       	adc	r17, r17
    a912:	00 0f       	add	r16, r16
    a914:	11 1f       	adc	r17, r17
    a916:	f8 01       	movw	r30, r16
    a918:	e3 56       	subi	r30, 0x63	; 99
    a91a:	f5 4f       	sbci	r31, 0xF5	; 245
    a91c:	40 81       	ld	r20, Z
    a91e:	51 81       	ldd	r21, Z+1	; 0x01
    a920:	62 81       	ldd	r22, Z+2	; 0x02
    a922:	73 81       	ldd	r23, Z+3	; 0x03
    a924:	ce 01       	movw	r24, r28
    a926:	80 5a       	subi	r24, 0xA0	; 160
    a928:	9e 4f       	sbci	r25, 0xFE	; 254
    a92a:	0e 94 bc 53 	call	0xa778	; 0xa778 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
    a92e:	f8 01       	movw	r30, r16
    a930:	ef 54       	subi	r30, 0x4F	; 79
    a932:	f5 4f       	sbci	r31, 0xF5	; 245
    a934:	40 81       	ld	r20, Z
    a936:	51 81       	ldd	r21, Z+1	; 0x01
    a938:	62 81       	ldd	r22, Z+2	; 0x02
    a93a:	73 81       	ldd	r23, Z+3	; 0x03
    a93c:	ce 01       	movw	r24, r28
    a93e:	8c 59       	subi	r24, 0x9C	; 156
    a940:	9e 4f       	sbci	r25, 0xFE	; 254
    a942:	0e 94 bc 53 	call	0xa778	; 0xa778 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
    a946:	f8 01       	movw	r30, r16
    a948:	eb 53       	subi	r30, 0x3B	; 59
    a94a:	f5 4f       	sbci	r31, 0xF5	; 245
    a94c:	40 81       	ld	r20, Z
    a94e:	51 81       	ldd	r21, Z+1	; 0x01
    a950:	62 81       	ldd	r22, Z+2	; 0x02
    a952:	73 81       	ldd	r23, Z+3	; 0x03
    a954:	ce 01       	movw	r24, r28
    a956:	88 59       	subi	r24, 0x98	; 152
    a958:	9e 4f       	sbci	r25, 0xFE	; 254
    a95a:	0e 94 bc 53 	call	0xa778	; 0xa778 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    a95e:	f7 01       	movw	r30, r14
    a960:	e7 52       	subi	r30, 0x27	; 39
    a962:	f5 4f       	sbci	r31, 0xF5	; 245
    a964:	60 81       	ld	r22, Z
    a966:	ce 01       	movw	r24, r28
    a968:	84 59       	subi	r24, 0x94	; 148
    a96a:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:237
}
    a96c:	df 91       	pop	r29
    a96e:	cf 91       	pop	r28
    a970:	1f 91       	pop	r17
    a972:	0f 91       	pop	r16
    a974:	ff 90       	pop	r15
    a976:	ef 90       	pop	r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    a978:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>

0000a97c <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:157
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
    a97c:	1f 93       	push	r17
    a97e:	cf 93       	push	r28
    a980:	df 93       	push	r29
    a982:	16 2f       	mov	r17, r22
    a984:	67 2f       	mov	r22, r23
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
    a986:	91 e2       	ldi	r25, 0x21	; 33
    a988:	89 9f       	mul	r24, r25
    a98a:	e0 01       	movw	r28, r0
    a98c:	11 24       	eor	r1, r1
    a98e:	ce 01       	movw	r24, r28
    a990:	8a 5a       	subi	r24, 0xAA	; 170
    a992:	9e 4f       	sbci	r25, 0xFE	; 254
    a994:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    a998:	61 2f       	mov	r22, r17
    a99a:	ce 01       	movw	r24, r28
    a99c:	89 5a       	subi	r24, 0xA9	; 169
    a99e:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:160
}
    a9a0:	df 91       	pop	r29
    a9a2:	cf 91       	pop	r28
    a9a4:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    a9a6:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>

0000a9aa <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:110
    name[i] = t;
    if (t == 0) break;
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
    a9aa:	df 92       	push	r13
    a9ac:	ef 92       	push	r14
    a9ae:	ff 92       	push	r15
    a9b0:	0f 93       	push	r16
    a9b2:	1f 93       	push	r17
    a9b4:	cf 93       	push	r28
    a9b6:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    a9b8:	91 e2       	ldi	r25, 0x21	; 33
    a9ba:	89 9f       	mul	r24, r25
    a9bc:	e0 01       	movw	r28, r0
    a9be:	11 24       	eor	r1, r1
    a9c0:	7b 01       	movw	r14, r22
    a9c2:	8e 01       	movw	r16, r28
    a9c4:	04 5b       	subi	r16, 0xB4	; 180
    a9c6:	1e 4f       	sbci	r17, 0xFE	; 254
    a9c8:	cb 5a       	subi	r28, 0xAB	; 171
    a9ca:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    a9cc:	f7 01       	movw	r30, r14
    a9ce:	d1 90       	ld	r13, Z+
    a9d0:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    a9d2:	6d 2d       	mov	r22, r13
    a9d4:	c8 01       	movw	r24, r16
    a9d6:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
    a9da:	dd 20       	and	r13, r13
    a9dc:	29 f0       	breq	.+10     	; 0xa9e8 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
    a9de:	0f 5f       	subi	r16, 0xFF	; 255
    a9e0:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:112
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    a9e2:	0c 17       	cp	r16, r28
    a9e4:	1d 07       	cpc	r17, r29
    a9e6:	91 f7       	brne	.-28     	; 0xa9cc <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
    a9e8:	df 91       	pop	r29
    a9ea:	cf 91       	pop	r28
    a9ec:	1f 91       	pop	r17
    a9ee:	0f 91       	pop	r16
    a9f0:	ff 90       	pop	r15
    a9f2:	ef 90       	pop	r14
    a9f4:	df 90       	pop	r13
    a9f6:	08 95       	ret

0000a9f8 <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
    a9f8:	8f 92       	push	r8
    a9fa:	9f 92       	push	r9
    a9fc:	af 92       	push	r10
    a9fe:	bf 92       	push	r11
    aa00:	ef 92       	push	r14
    aa02:	ff 92       	push	r15
    aa04:	0f 93       	push	r16
    aa06:	1f 93       	push	r17
    aa08:	cf 93       	push	r28
    aa0a:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    aa0c:	e8 2e       	mov	r14, r24
    aa0e:	f1 2c       	mov	r15, r1
    aa10:	87 01       	movw	r16, r14
    aa12:	00 0f       	add	r16, r16
    aa14:	11 1f       	adc	r17, r17
    aa16:	00 0f       	add	r16, r16
    aa18:	11 1f       	adc	r17, r17
    aa1a:	f8 01       	movw	r30, r16
    aa1c:	e3 56       	subi	r30, 0x63	; 99
    aa1e:	f5 4f       	sbci	r31, 0xF5	; 245
    aa20:	81 2c       	mov	r8, r1
    aa22:	91 2c       	mov	r9, r1
    aa24:	90 e8       	ldi	r25, 0x80	; 128
    aa26:	a9 2e       	mov	r10, r25
    aa28:	9f e3       	ldi	r25, 0x3F	; 63
    aa2a:	b9 2e       	mov	r11, r25
    aa2c:	80 82       	st	Z, r8
    aa2e:	91 82       	std	Z+1, r9	; 0x01
    aa30:	a2 82       	std	Z+2, r10	; 0x02
    aa32:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    aa34:	8c 2f       	mov	r24, r28
    aa36:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    aa3a:	8c 2f       	mov	r24, r28
    aa3c:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    aa40:	f8 01       	movw	r30, r16
    aa42:	ef 54       	subi	r30, 0x4F	; 79
    aa44:	f5 4f       	sbci	r31, 0xF5	; 245
    aa46:	80 e0       	ldi	r24, 0x00	; 0
    aa48:	90 e0       	ldi	r25, 0x00	; 0
    aa4a:	a0 e0       	ldi	r26, 0x00	; 0
    aa4c:	bf e3       	ldi	r27, 0x3F	; 63
    aa4e:	80 83       	st	Z, r24
    aa50:	91 83       	std	Z+1, r25	; 0x01
    aa52:	a2 83       	std	Z+2, r26	; 0x02
    aa54:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    aa56:	8c 2f       	mov	r24, r28
    aa58:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    aa5c:	8c 2f       	mov	r24, r28
    aa5e:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    aa62:	f8 01       	movw	r30, r16
    aa64:	eb 53       	subi	r30, 0x3B	; 59
    aa66:	f5 4f       	sbci	r31, 0xF5	; 245
    aa68:	80 82       	st	Z, r8
    aa6a:	91 82       	std	Z+1, r9	; 0x01
    aa6c:	a2 82       	std	Z+2, r10	; 0x02
    aa6e:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    aa70:	8c 2f       	mov	r24, r28
    aa72:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    aa76:	8c 2f       	mov	r24, r28
    aa78:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    aa7c:	f7 01       	movw	r30, r14
    aa7e:	e7 52       	subi	r30, 0x27	; 39
    aa80:	f5 4f       	sbci	r31, 0xF5	; 245
    aa82:	8c e3       	ldi	r24, 0x3C	; 60
    aa84:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    aa86:	8c 2f       	mov	r24, r28
    aa88:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    aa8c:	8c 2f       	mov	r24, r28
    aa8e:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    aa92:	81 e2       	ldi	r24, 0x21	; 33
    aa94:	c8 9f       	mul	r28, r24
    aa96:	80 01       	movw	r16, r0
    aa98:	11 24       	eor	r1, r1
    aa9a:	6f ef       	ldi	r22, 0xFF	; 255
    aa9c:	c8 01       	movw	r24, r16
    aa9e:	84 5a       	subi	r24, 0xA4	; 164
    aaa0:	9e 4f       	sbci	r25, 0xFE	; 254
    aaa2:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:424
  thermostat_ring_pid_set_kp(idx, 1);
  thermostat_ring_pid_set_ki(idx, 0.5);
  thermostat_ring_pid_set_kd(idx, 1);
  thermostat_ring_pid_set_time(idx, 60);
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
  thermostat_ring_set_mezni(idx, 220);
    aaa6:	6c ed       	ldi	r22, 0xDC	; 220
    aaa8:	70 e0       	ldi	r23, 0x00	; 0
    aaaa:	8c 2f       	mov	r24, r28
    aaac:	0e 94 be 54 	call	0xa97c	; 0xa97c <thermostat_ring_set_mezni(unsigned char, int)>
thermostat_ring_set_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    aab0:	6f ef       	ldi	r22, 0xFF	; 255
    aab2:	c8 01       	movw	r24, r16
    aab4:	85 5a       	subi	r24, 0xA5	; 165
    aab6:	9e 4f       	sbci	r25, 0xFE	; 254
    aab8:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
thermostat_ring_set_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    aabc:	f7 01       	movw	r30, r14
    aabe:	e5 59       	subi	r30, 0x95	; 149
    aac0:	f4 4f       	sbci	r31, 0xF4	; 244
    aac2:	10 82       	st	Z, r1
thermostat_ring_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    aac4:	6f ef       	ldi	r22, 0xFF	; 255
    aac6:	c8 01       	movw	r24, r16
    aac8:	83 5a       	subi	r24, 0xA3	; 163
    aaca:	9e 4f       	sbci	r25, 0xFE	; 254
    aacc:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
thermostat_ring_set_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    aad0:	6f ef       	ldi	r22, 0xFF	; 255
    aad2:	c8 01       	movw	r24, r16
    aad4:	81 5a       	subi	r24, 0xA1	; 161
    aad6:	9e 4f       	sbci	r25, 0xFE	; 254
    aad8:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
thermostat_ring_set_mode():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    aadc:	60 e0       	ldi	r22, 0x00	; 0
    aade:	c8 01       	movw	r24, r16
    aae0:	82 5a       	subi	r24, 0xA2	; 162
    aae2:	9e 4f       	sbci	r25, 0xFE	; 254
    aae4:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
    aae8:	6f e8       	ldi	r22, 0x8F	; 143
    aaea:	73 e0       	ldi	r23, 0x03	; 3
    aaec:	8c 2f       	mov	r24, r28
    aaee:	0e 94 d5 54 	call	0xa9aa	; 0xa9aa <thermostat_ring_set_name(unsigned char, char*)>
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    aaf2:	60 e0       	ldi	r22, 0x00	; 0
    aaf4:	c8 01       	movw	r24, r16
    aaf6:	88 5a       	subi	r24, 0xA8	; 168
    aaf8:	9e 4f       	sbci	r25, 0xFE	; 254
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
    aafa:	cf 91       	pop	r28
    aafc:	1f 91       	pop	r17
    aafe:	0f 91       	pop	r16
    ab00:	ff 90       	pop	r15
    ab02:	ef 90       	pop	r14
    ab04:	bf 90       	pop	r11
    ab06:	af 90       	pop	r10
    ab08:	9f 90       	pop	r9
    ab0a:	8f 90       	pop	r8
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    ab0c:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>

0000ab10 <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:55
  }
  return ret;
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    ab10:	af 92       	push	r10
    ab12:	bf 92       	push	r11
    ab14:	cf 92       	push	r12
    ab16:	df 92       	push	r13
    ab18:	ef 92       	push	r14
    ab1a:	ff 92       	push	r15
    ab1c:	0f 93       	push	r16
    ab1e:	1f 93       	push	r17
    ab20:	cf 93       	push	r28
    ab22:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:56
  if (idx < HW_ONEWIRE_MAXROMS)
    ab24:	86 30       	cpi	r24, 0x06	; 6
    ab26:	08 f0       	brcs	.+2      	; 0xab2a <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    ab28:	49 c0       	rjmp	.+146    	; 0xabbc <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
    ab2a:	6b 01       	movw	r12, r22
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:58
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    ab2c:	96 e1       	ldi	r25, 0x16	; 22
    ab2e:	89 9f       	mul	r24, r25
    ab30:	e0 01       	movw	r28, r0
    ab32:	11 24       	eor	r1, r1
    ab34:	f6 01       	movw	r30, r12
    ab36:	61 91       	ld	r22, Z+
    ab38:	7f 01       	movw	r14, r30
    ab3a:	ce 01       	movw	r24, r28
    ab3c:	88 53       	subi	r24, 0x38	; 56
    ab3e:	9f 4f       	sbci	r25, 0xFF	; 255
    ab40:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    ab44:	8e 01       	movw	r16, r28
    ab46:	07 53       	subi	r16, 0x37	; 55
    ab48:	1f 4f       	sbci	r17, 0xFF	; 255
    ab4a:	5e 01       	movw	r10, r28
    ab4c:	f1 ed       	ldi	r31, 0xD1	; 209
    ab4e:	af 0e       	add	r10, r31
    ab50:	b1 1c       	adc	r11, r1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:61
    for (uint8_t m = 0; m < 8; m++)
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    ab52:	f7 01       	movw	r30, r14
    ab54:	61 91       	ld	r22, Z+
    ab56:	7f 01       	movw	r14, r30
    ab58:	c8 01       	movw	r24, r16
    ab5a:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:62
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    ab5e:	f7 01       	movw	r30, r14
    ab60:	62 85       	ldd	r22, Z+10	; 0x0a
    ab62:	c8 01       	movw	r24, r16
    ab64:	0b 96       	adiw	r24, 0x0b	; 11
    ab66:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    ab6a:	0f 5f       	subi	r16, 0xFF	; 255
    ab6c:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:59
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    for (uint8_t m = 0; m < 8; m++)
    ab6e:	0a 15       	cp	r16, r10
    ab70:	1b 05       	cpc	r17, r11
    ab72:	79 f7       	brne	.-34     	; 0xab52 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:64
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    ab74:	f6 01       	movw	r30, r12
    ab76:	61 85       	ldd	r22, Z+9	; 0x09
    ab78:	c8 01       	movw	r24, r16
    ab7a:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:65
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    ab7e:	f6 01       	movw	r30, r12
    ab80:	63 85       	ldd	r22, Z+11	; 0x0b
    ab82:	ce 01       	movw	r24, r28
    ab84:	8e 52       	subi	r24, 0x2E	; 46
    ab86:	9f 4f       	sbci	r25, 0xFF	; 255
    ab88:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:66
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    ab8c:	f6 01       	movw	r30, r12
    ab8e:	62 85       	ldd	r22, Z+10	; 0x0a
    ab90:	ce 01       	movw	r24, r28
    ab92:	8d 52       	subi	r24, 0x2D	; 45
    ab94:	9f 4f       	sbci	r25, 0xFF	; 255
    ab96:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:67
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    ab9a:	f6 01       	movw	r30, r12
    ab9c:	64 89       	ldd	r22, Z+20	; 0x14
    ab9e:	ce 01       	movw	r24, r28
    aba0:	84 52       	subi	r24, 0x24	; 36
    aba2:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:69
  }
}
    aba4:	df 91       	pop	r29
    aba6:	cf 91       	pop	r28
    aba8:	1f 91       	pop	r17
    abaa:	0f 91       	pop	r16
    abac:	ff 90       	pop	r15
    abae:	ef 90       	pop	r14
    abb0:	df 90       	pop	r13
    abb2:	cf 90       	pop	r12
    abb4:	bf 90       	pop	r11
    abb6:	af 90       	pop	r10
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:67
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    abb8:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:69
  }
}
    abbc:	df 91       	pop	r29
    abbe:	cf 91       	pop	r28
    abc0:	1f 91       	pop	r17
    abc2:	0f 91       	pop	r16
    abc4:	ff 90       	pop	r15
    abc6:	ef 90       	pop	r14
    abc8:	df 90       	pop	r13
    abca:	cf 90       	pop	r12
    abcc:	bf 90       	pop	r11
    abce:	af 90       	pop	r10
    abd0:	08 95       	ret

0000abd2 <device_set_name(char*)>:
_Z15device_set_namePc():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:74
    }
  }
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
    abd2:	ff 92       	push	r15
    abd4:	0f 93       	push	r16
    abd6:	1f 93       	push	r17
    abd8:	cf 93       	push	r28
    abda:	df 93       	push	r29
    abdc:	8c 01       	movw	r16, r24
    abde:	d0 e0       	ldi	r29, 0x00	; 0
    abe0:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:78
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    abe2:	f8 01       	movw	r30, r16
    abe4:	f1 90       	ld	r15, Z+
    abe6:	8f 01       	movw	r16, r30
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:79
    EEPROM.write(device_nazev +  i, t);
    abe8:	6f 2d       	mov	r22, r15
    abea:	ce 01       	movw	r24, r28
    abec:	8c 59       	subi	r24, 0x9C	; 156
    abee:	9f 4f       	sbci	r25, 0xFF	; 255
    abf0:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:80
    if (t == 0)
    abf4:	f1 10       	cpse	r15, r1
    abf6:	0b c0       	rjmp	.+22     	; 0xac0e <device_set_name(char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:82
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    abf8:	60 e0       	ldi	r22, 0x00	; 0
    abfa:	ce 01       	movw	r24, r28
    abfc:	8b 59       	subi	r24, 0x9B	; 155
    abfe:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:86
      break;
    }
  }
}
    ac00:	df 91       	pop	r29
    ac02:	cf 91       	pop	r28
    ac04:	1f 91       	pop	r17
    ac06:	0f 91       	pop	r16
    ac08:	ff 90       	pop	r15
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:82
  {
    t = name[i];
    EEPROM.write(device_nazev +  i, t);
    if (t == 0)
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    ac0a:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    ac0e:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:76
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    ac10:	c9 30       	cpi	r28, 0x09	; 9
    ac12:	d1 05       	cpc	r29, r1
    ac14:	31 f7       	brne	.-52     	; 0xabe2 <device_set_name(char*)+0x10>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:86
    {
      EEPROM.write(device_nazev +  i + 1, 0);
      break;
    }
  }
}
    ac16:	df 91       	pop	r29
    ac18:	cf 91       	pop	r28
    ac1a:	1f 91       	pop	r17
    ac1c:	0f 91       	pop	r16
    ac1e:	ff 90       	pop	r15
    ac20:	08 95       	ret

0000ac22 <save_setup_network()>:
_Z18save_setup_networkv():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:41
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ulozi nastaveni site
void save_setup_network(void)
{
    ac22:	ef 92       	push	r14
    ac24:	ff 92       	push	r15
    ac26:	0f 93       	push	r16
    ac28:	1f 93       	push	r17
    ac2a:	cf 93       	push	r28
    ac2c:	df 93       	push	r29
    ac2e:	04 ee       	ldi	r16, 0xE4	; 228
    ac30:	1d e0       	ldi	r17, 0x0D	; 13
    ac32:	ce e6       	ldi	r28, 0x6E	; 110
    ac34:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:42
  for (uint8_t m = 0; m < 6; m++) EEPROM.write(device_mac + m, device.mac[m]);
    ac36:	f8 01       	movw	r30, r16
    ac38:	61 91       	ld	r22, Z+
    ac3a:	8f 01       	movw	r16, r30
    ac3c:	ce 01       	movw	r24, r28
    ac3e:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    ac42:	21 96       	adiw	r28, 0x01	; 1
    ac44:	c4 37       	cpi	r28, 0x74	; 116
    ac46:	d1 05       	cpc	r29, r1
    ac48:	b1 f7       	brne	.-20     	; 0xac36 <save_setup_network()+0x14>
    ac4a:	0a ee       	ldi	r16, 0xEA	; 234
    ac4c:	1d e0       	ldi	r17, 0x0D	; 13
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:43
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ip + m, device.myIP[m]);
    ac4e:	f8 01       	movw	r30, r16
    ac50:	61 91       	ld	r22, Z+
    ac52:	8f 01       	movw	r16, r30
    ac54:	ce 01       	movw	r24, r28
    ac56:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    ac5a:	21 96       	adiw	r28, 0x01	; 1
    ac5c:	c8 37       	cpi	r28, 0x78	; 120
    ac5e:	d1 05       	cpc	r29, r1
    ac60:	b1 f7       	brne	.-20     	; 0xac4e <save_setup_network()+0x2c>
    ac62:	0e ee       	ldi	r16, 0xEE	; 238
    ac64:	1d e0       	ldi	r17, 0x0D	; 13
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:44
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mask + m, device.myMASK[m]);
    ac66:	f8 01       	movw	r30, r16
    ac68:	61 91       	ld	r22, Z+
    ac6a:	8f 01       	movw	r16, r30
    ac6c:	ce 01       	movw	r24, r28
    ac6e:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    ac72:	21 96       	adiw	r28, 0x01	; 1
    ac74:	cc 37       	cpi	r28, 0x7C	; 124
    ac76:	d1 05       	cpc	r29, r1
    ac78:	b1 f7       	brne	.-20     	; 0xac66 <save_setup_network()+0x44>
    ac7a:	26 ef       	ldi	r18, 0xF6	; 246
    ac7c:	e2 2e       	mov	r14, r18
    ac7e:	2d e0       	ldi	r18, 0x0D	; 13
    ac80:	f2 2e       	mov	r15, r18
    ac82:	00 e8       	ldi	r16, 0x80	; 128
    ac84:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:45
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_gw + m, device.myGW[m]);
    ac86:	f7 01       	movw	r30, r14
    ac88:	61 91       	ld	r22, Z+
    ac8a:	7f 01       	movw	r14, r30
    ac8c:	c8 01       	movw	r24, r16
    ac8e:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    ac92:	0f 5f       	subi	r16, 0xFF	; 255
    ac94:	1f 4f       	sbci	r17, 0xFF	; 255
    ac96:	04 38       	cpi	r16, 0x84	; 132
    ac98:	11 05       	cpc	r17, r1
    ac9a:	a9 f7       	brne	.-22     	; 0xac86 <save_setup_network()+0x64>
    ac9c:	92 ef       	ldi	r25, 0xF2	; 242
    ac9e:	e9 2e       	mov	r14, r25
    aca0:	9d e0       	ldi	r25, 0x0D	; 13
    aca2:	f9 2e       	mov	r15, r25
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:46
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_dns + m, device.myDNS[m]);
    aca4:	f7 01       	movw	r30, r14
    aca6:	61 91       	ld	r22, Z+
    aca8:	7f 01       	movw	r14, r30
    acaa:	ce 01       	movw	r24, r28
    acac:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    acb0:	21 96       	adiw	r28, 0x01	; 1
    acb2:	c0 38       	cpi	r28, 0x80	; 128
    acb4:	d1 05       	cpc	r29, r1
    acb6:	b1 f7       	brne	.-20     	; 0xaca4 <save_setup_network()+0x82>
    acb8:	8a ef       	ldi	r24, 0xFA	; 250
    acba:	e8 2e       	mov	r14, r24
    acbc:	8d e0       	ldi	r24, 0x0D	; 13
    acbe:	f8 2e       	mov	r15, r24
    acc0:	c4 e6       	ldi	r28, 0x64	; 100
    acc2:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:47
  for (uint8_t m = 0; m < 9; m++) EEPROM.write(device_nazev + m, device.nazev[m]);
    acc4:	f7 01       	movw	r30, r14
    acc6:	61 91       	ld	r22, Z+
    acc8:	7f 01       	movw	r14, r30
    acca:	ce 01       	movw	r24, r28
    accc:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    acd0:	21 96       	adiw	r28, 0x01	; 1
    acd2:	cd 36       	cpi	r28, 0x6D	; 109
    acd4:	d1 05       	cpc	r29, r1
    acd6:	b1 f7       	brne	.-20     	; 0xacc4 <save_setup_network()+0xa2>
    acd8:	c4 e0       	ldi	r28, 0x04	; 4
    acda:	de e0       	ldi	r29, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:48
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mqtt_server + m, device.mqtt_server[m]);
    acdc:	69 91       	ld	r22, Y+
    acde:	c8 01       	movw	r24, r16
    ace0:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    ace4:	0f 5f       	subi	r16, 0xFF	; 255
    ace6:	1f 4f       	sbci	r17, 0xFF	; 255
    ace8:	08 38       	cpi	r16, 0x88	; 136
    acea:	11 05       	cpc	r17, r1
    acec:	b9 f7       	brne	.-18     	; 0xacdc <save_setup_network()+0xba>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:49
  EEPROM.write(device_mqtt_port, device.mqtt_port >> 8);
    acee:	60 91 09 0e 	lds	r22, 0x0E09	; 0x800e09 <device+0x25>
    acf2:	88 e8       	ldi	r24, 0x88	; 136
    acf4:	90 e0       	ldi	r25, 0x00	; 0
    acf6:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:50
  EEPROM.write(device_mqtt_port + 1, device.mqtt_port & 0xff);
    acfa:	60 91 08 0e 	lds	r22, 0x0E08	; 0x800e08 <device+0x24>
    acfe:	89 e8       	ldi	r24, 0x89	; 137
    ad00:	90 e0       	ldi	r25, 0x00	; 0
    ad02:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    ad06:	0a e0       	ldi	r16, 0x0A	; 10
    ad08:	1e e0       	ldi	r17, 0x0E	; 14
    ad0a:	ca e8       	ldi	r28, 0x8A	; 138
    ad0c:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:51
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_user + m, device.mqtt_user[m]);
    ad0e:	f8 01       	movw	r30, r16
    ad10:	61 91       	ld	r22, Z+
    ad12:	8f 01       	movw	r16, r30
    ad14:	ce 01       	movw	r24, r28
    ad16:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    ad1a:	21 96       	adiw	r28, 0x01	; 1
    ad1c:	ce 39       	cpi	r28, 0x9E	; 158
    ad1e:	d1 05       	cpc	r29, r1
    ad20:	b1 f7       	brne	.-20     	; 0xad0e <save_setup_network()+0xec>
    ad22:	0e e1       	ldi	r16, 0x1E	; 30
    ad24:	1e e0       	ldi	r17, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:52
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_key + m, device.mqtt_key[m]);
    ad26:	f8 01       	movw	r30, r16
    ad28:	61 91       	ld	r22, Z+
    ad2a:	8f 01       	movw	r16, r30
    ad2c:	ce 01       	movw	r24, r28
    ad2e:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    ad32:	21 96       	adiw	r28, 0x01	; 1
    ad34:	c2 3b       	cpi	r28, 0xB2	; 178
    ad36:	d1 05       	cpc	r29, r1
    ad38:	b1 f7       	brne	.-20     	; 0xad26 <save_setup_network()+0x104>
    ad3a:	02 e3       	ldi	r16, 0x32	; 50
    ad3c:	1e e0       	ldi	r17, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:53
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ntp_server + m, device.ntp_server[m]);
    ad3e:	f8 01       	movw	r30, r16
    ad40:	61 91       	ld	r22, Z+
    ad42:	8f 01       	movw	r16, r30
    ad44:	ce 01       	movw	r24, r28
    ad46:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    ad4a:	21 96       	adiw	r28, 0x01	; 1
    ad4c:	c6 3b       	cpi	r28, 0xB6	; 182
    ad4e:	d1 05       	cpc	r29, r1
    ad50:	b1 f7       	brne	.-20     	; 0xad3e <save_setup_network()+0x11c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:54
}
    ad52:	df 91       	pop	r29
    ad54:	cf 91       	pop	r28
    ad56:	1f 91       	pop	r17
    ad58:	0f 91       	pop	r16
    ad5a:	ff 90       	pop	r15
    ad5c:	ef 90       	pop	r14
    ad5e:	08 95       	ret

0000ad60 <remote_tds_set_name(unsigned char, char*) [clone .part.23]>:
_Z19remote_tds_set_namehPc.part.23():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2036
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
    ad60:	df 92       	push	r13
    ad62:	ef 92       	push	r14
    ad64:	ff 92       	push	r15
    ad66:	0f 93       	push	r16
    ad68:	1f 93       	push	r17
    ad6a:	cf 93       	push	r28
    ad6c:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2043
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    ad6e:	94 e1       	ldi	r25, 0x14	; 20
    ad70:	89 9f       	mul	r24, r25
    ad72:	e0 01       	movw	r28, r0
    ad74:	11 24       	eor	r1, r1
    ad76:	7b 01       	movw	r14, r22
    ad78:	8e 01       	movw	r16, r28
    ad7a:	06 55       	subi	r16, 0x56	; 86
    ad7c:	1a 4f       	sbci	r17, 0xFA	; 250
    ad7e:	c4 54       	subi	r28, 0x44	; 68
    ad80:	da 4f       	sbci	r29, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2042
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
    ad82:	f7 01       	movw	r30, r14
    ad84:	d1 90       	ld	r13, Z+
    ad86:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2043
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    ad88:	6d 2d       	mov	r22, r13
    ad8a:	c8 01       	movw	r24, r16
    ad8c:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2044
      if (t == 0) break;
    ad90:	dd 20       	and	r13, r13
    ad92:	29 f0       	breq	.+10     	; 0xad9e <remote_tds_set_name(unsigned char, char*) [clone .part.23]+0x3e>
    ad94:	0f 5f       	subi	r16, 0xFF	; 255
    ad96:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2040
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    ad98:	0c 17       	cp	r16, r28
    ad9a:	1d 07       	cpc	r17, r29
    ad9c:	91 f7       	brne	.-28     	; 0xad82 <remote_tds_set_name(unsigned char, char*) [clone .part.23]+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2046
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
      if (t == 0) break;
    }
}
    ad9e:	df 91       	pop	r29
    ada0:	cf 91       	pop	r28
    ada2:	1f 91       	pop	r17
    ada4:	0f 91       	pop	r16
    ada6:	ff 90       	pop	r15
    ada8:	ef 90       	pop	r14
    adaa:	df 90       	pop	r13
    adac:	08 95       	ret

0000adae <click_button_default_value(unsigned int, unsigned int, unsigned char)>:
_Z26click_button_default_valuejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5937
   a pak restart
*/
void click_button_default_value(uint16_t args1, uint16_t args2, uint8_t args3)
{
  /// TODO dialog ANO/NE
  EEPROM.write(set_default_values, 255);
    adae:	6f ef       	ldi	r22, 0xFF	; 255
    adb0:	8a e5       	ldi	r24, 0x5A	; 90
    adb2:	90 e0       	ldi	r25, 0x00	; 0
    adb4:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5938
  resetFunc();
    adb8:	f0 e0       	ldi	r31, 0x00	; 0
    adba:	e0 e0       	ldi	r30, 0x00	; 0
    adbc:	19 94       	eijmp

0000adbe <helper_set_menu_time_offset(unsigned int, float, unsigned char)>:
_Z27helper_set_menu_time_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1638
  return menu_dialog_variable[idx].variable_now ;
}

int display_function_get_variable_int(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    adbe:	60 91 80 09 	lds	r22, 0x0980	; 0x800980 <menu_dialog_variable>
    adc2:	70 91 81 09 	lds	r23, 0x0981	; 0x800981 <menu_dialog_variable+0x1>
    adc6:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <menu_dialog_variable+0x2>
    adca:	90 91 83 09 	lds	r25, 0x0983	; 0x800983 <menu_dialog_variable+0x3>
    adce:	0e 94 43 e0 	call	0x1c086	; 0x1c086 <__fixsfsi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3430
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(int8_t offset)
{
  EEPROM.write(time_offset, offset);
    add2:	81 e0       	ldi	r24, 0x01	; 1
    add4:	90 e0       	ldi	r25, 0x00	; 0
    add6:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>

0000adda <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>:
_Z66button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5666
}

void button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t click1 = 0;
  display_auto_shutdown_now = 0;
    adda:	10 92 6c 0c 	sts	0x0C6C, r1	; 0x800c6c <display_auto_shutdown_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5667
  if (args3 == 0)
    adde:	41 11       	cpse	r20, r1
    ade0:	13 c0       	rjmp	.+38     	; 0xae08 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x2e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5669
  {
    cbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    ade2:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
    ade6:	8f 7b       	andi	r24, 0xBF	; 191
    ade8:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5670
    display_auto_shutdown = 0;
    adec:	10 92 6d 0c 	sts	0x0C6D, r1	; 0x800c6d <display_auto_shutdown>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5705
    display_auto_shutdown = 250;
    click1 = 1;
  }
  if (click1 == 1)
  {
    EEPROM.write(my_display_auto_shutdown, display_auto_shutdown);
    adf0:	60 91 6d 0c 	lds	r22, 0x0C6D	; 0x800c6d <display_auto_shutdown>
    adf4:	80 e6       	ldi	r24, 0x60	; 96
    adf6:	90 e0       	ldi	r25, 0x00	; 0
    adf8:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5706
    EEPROM.write(my_brightness_mode, brigthness_display_mode);
    adfc:	60 91 75 0c 	lds	r22, 0x0C75	; 0x800c75 <brigthness_display_mode>
    ae00:	8f e5       	ldi	r24, 0x5F	; 95
    ae02:	90 e0       	ldi	r25, 0x00	; 0
    ae04:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5673
  {
    cbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    display_auto_shutdown = 0;
    click1 = 1;
  }
  if (args3 == 1)
    ae08:	41 30       	cpi	r20, 0x01	; 1
    ae0a:	49 f4       	brne	.+18     	; 0xae1e <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5675
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    ae0c:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
    ae10:	80 64       	ori	r24, 0x40	; 64
    ae12:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5676
    display_auto_shutdown = 30;
    ae16:	8e e1       	ldi	r24, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5700
    click1 = 1;
  }
  if (args3 == 5)
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    display_auto_shutdown = 250;
    ae18:	80 93 6d 0c 	sts	0x0C6D, r24	; 0x800c6d <display_auto_shutdown>
    ae1c:	e9 cf       	rjmp	.-46     	; 0xadf0 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5679
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    display_auto_shutdown = 30;
    click1 = 1;
  }
  if (args3 == 2)
    ae1e:	42 30       	cpi	r20, 0x02	; 2
    ae20:	39 f4       	brne	.+14     	; 0xae30 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5681
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    ae22:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
    ae26:	80 64       	ori	r24, 0x40	; 64
    ae28:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5682
    display_auto_shutdown = 60;
    ae2c:	8c e3       	ldi	r24, 0x3C	; 60
    ae2e:	f4 cf       	rjmp	.-24     	; 0xae18 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5685
    click1 = 1;
  }
  if (args3 == 3)
    ae30:	43 30       	cpi	r20, 0x03	; 3
    ae32:	39 f4       	brne	.+14     	; 0xae42 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5687
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    ae34:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
    ae38:	80 64       	ori	r24, 0x40	; 64
    ae3a:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5688
    display_auto_shutdown = 120;
    ae3e:	88 e7       	ldi	r24, 0x78	; 120
    ae40:	eb cf       	rjmp	.-42     	; 0xae18 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5691
    click1 = 1;
  }
  if (args3 == 4)
    ae42:	44 30       	cpi	r20, 0x04	; 4
    ae44:	39 f4       	brne	.+14     	; 0xae54 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x7a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5693
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    ae46:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
    ae4a:	80 64       	ori	r24, 0x40	; 64
    ae4c:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5694
    display_auto_shutdown = 180;
    ae50:	84 eb       	ldi	r24, 0xB4	; 180
    ae52:	e2 cf       	rjmp	.-60     	; 0xae18 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5697
    click1 = 1;
  }
  if (args3 == 5)
    ae54:	45 30       	cpi	r20, 0x05	; 5
    ae56:	39 f4       	brne	.+14     	; 0xae66 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5699
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    ae58:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
    ae5c:	80 64       	ori	r24, 0x40	; 64
    ae5e:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5700
    display_auto_shutdown = 250;
    ae62:	8a ef       	ldi	r24, 0xFA	; 250
    ae64:	d9 cf       	rjmp	.-78     	; 0xae18 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5708
  if (click1 == 1)
  {
    EEPROM.write(my_display_auto_shutdown, display_auto_shutdown);
    EEPROM.write(my_brightness_mode, brigthness_display_mode);
  }
}
    ae66:	08 95       	ret

0000ae68 <helper_display_set_brightness(unsigned int, float, unsigned char)>:
_Z29helper_display_set_brightnessjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5604



void helper_display_set_brightness(uint16_t args1, float args2, uint8_t args3)
{
  brigthness_display_values = args3;
    ae68:	20 93 65 0b 	sts	0x0B65, r18	; 0x800b65 <brigthness_display_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5605
  my_touch.TP_SetBacklight(brigthness_display_values * 2);
    ae6c:	82 2f       	mov	r24, r18
    ae6e:	88 0f       	add	r24, r24
    ae70:	0e 94 d9 ad 	call	0x15bb2	; 0x15bb2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.227]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5606
  EEPROM.write(my_brightness_values, brigthness_display_values);
    ae74:	60 91 65 0b 	lds	r22, 0x0B65	; 0x800b65 <brigthness_display_values>
    ae78:	8e e5       	ldi	r24, 0x5E	; 94
    ae7a:	90 e0       	ldi	r25, 0x00	; 0
    ae7c:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>

0000ae80 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)>:
_Z34switch_brightness_automode_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5581
  }
}

void switch_brightness_automode_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 )
    ae80:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
    ae84:	87 ff       	sbrs	r24, 7
    ae86:	0e c0       	rjmp	.+28     	; 0xaea4 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5583
  {
    cbi(brigthness_display_mode, DISPLAY_MODE_STATUS_BIT);
    ae88:	8f 77       	andi	r24, 0x7F	; 127
    ae8a:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5584
    my_touch.TP_SetBacklight(brigthness_display_values * 2);
    ae8e:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <brigthness_display_values>
    ae92:	88 0f       	add	r24, r24
    ae94:	0e 94 d9 ad 	call	0x15bb2	; 0x15bb2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.227]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5592
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_STATUS_BIT);
  }
switch_brightness_automode_onclick_end:
  EEPROM.write(my_brightness_mode, brigthness_display_mode);
    ae98:	60 91 75 0c 	lds	r22, 0x0C75	; 0x800c75 <brigthness_display_mode>
    ae9c:	8f e5       	ldi	r24, 0x5F	; 95
    ae9e:	90 e0       	ldi	r25, 0x00	; 0
    aea0:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5589
    my_touch.TP_SetBacklight(brigthness_display_values * 2);
    goto switch_brightness_automode_onclick_end;
  }
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_STATUS_BIT);
    aea4:	80 68       	ori	r24, 0x80	; 128
    aea6:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <brigthness_display_mode>
    aeaa:	f6 cf       	rjmp	.-20     	; 0xae98 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)+0x18>

0000aeac <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_show_default_tempjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5014
   args2 -- globalni argument celeho menu
   args3 -- id polozky menu kliku
*/
void button_click_set_show_default_temp(uint16_t args1, uint16_t args2, uint8_t args3)
{
  default_show_temp = args3;
    aeac:	40 93 7e 09 	sts	0x097E, r20	; 0x80097e <default_show_temp>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2247
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    aeb0:	64 2f       	mov	r22, r20
    aeb2:	8d e5       	ldi	r24, 0x5D	; 93
    aeb4:	90 e0       	ldi	r25, 0x00	; 0
    aeb6:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>

0000aeba <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2031
    *active = 255;
  }
}
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
    aeba:	cf 93       	push	r28
    aebc:	df 93       	push	r29
    aebe:	d6 2f       	mov	r29, r22
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2039
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    aec0:	8a 30       	cpi	r24, 0x0A	; 10
    aec2:	78 f4       	brcc	.+30     	; 0xaee2 <remote_tds_set_complete(unsigned char, unsigned char, char*)+0x28>
    aec4:	ba 01       	movw	r22, r20
    aec6:	c8 2f       	mov	r28, r24
    aec8:	0e 94 b0 56 	call	0xad60	; 0xad60 <remote_tds_set_name(unsigned char, char*) [clone .part.23]>
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2063


void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    aecc:	24 e1       	ldi	r18, 0x14	; 20
    aece:	c2 9f       	mul	r28, r18
    aed0:	c0 01       	movw	r24, r0
    aed2:	11 24       	eor	r1, r1
    aed4:	6d 2f       	mov	r22, r29
    aed6:	83 54       	subi	r24, 0x43	; 67
    aed8:	9a 4f       	sbci	r25, 0xFA	; 250
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2034
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    aeda:	df 91       	pop	r29
    aedc:	cf 91       	pop	r28
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2063


void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    aede:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2034
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    aee2:	df 91       	pop	r29
    aee4:	cf 91       	pop	r28
    aee6:	08 95       	ret

0000aee8 <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2070



///
void remote_tds_clear(uint8_t idx)
{
    aee8:	cf 93       	push	r28
    aeea:	df 93       	push	r29
    aeec:	cd b7       	in	r28, 0x3d	; 61
    aeee:	de b7       	in	r29, 0x3e	; 62
    aef0:	62 97       	sbiw	r28, 0x12	; 18
    aef2:	0f b6       	in	r0, 0x3f	; 63
    aef4:	f8 94       	cli
    aef6:	de bf       	out	0x3e, r29	; 62
    aef8:	0f be       	out	0x3f, r0	; 63
    aefa:	cd bf       	out	0x3d, r28	; 61
    aefc:	e1 e0       	ldi	r30, 0x01	; 1
    aefe:	f0 e0       	ldi	r31, 0x00	; 0
    af00:	ec 0f       	add	r30, r28
    af02:	fd 1f       	adc	r31, r29
    af04:	e8 0f       	add	r30, r24
    af06:	f1 1d       	adc	r31, r1
    af08:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2074
  char rtds_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    rtds_name[idx] = 0;
  remote_tds_set_complete(idx, 0, rtds_name);
    af0a:	ae 01       	movw	r20, r28
    af0c:	4f 5f       	subi	r20, 0xFF	; 255
    af0e:	5f 4f       	sbci	r21, 0xFF	; 255
    af10:	60 e0       	ldi	r22, 0x00	; 0
    af12:	0e 94 5d 57 	call	0xaeba	; 0xaeba <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2075
}
    af16:	62 96       	adiw	r28, 0x12	; 18
    af18:	0f b6       	in	r0, 0x3f	; 63
    af1a:	f8 94       	cli
    af1c:	de bf       	out	0x3e, r29	; 62
    af1e:	0f be       	out	0x3f, r0	; 63
    af20:	cd bf       	out	0x3d, r28	; 61
    af22:	df 91       	pop	r29
    af24:	cf 91       	pop	r28
    af26:	08 95       	ret

0000af28 <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z30click_rtds_deassociate_onewirejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4735
/*
   args1 --- atributy z nastaveni tlacitka
   args2 --- index polozky z menu
*/
void click_rtds_deassociate_onewire(uint16_t args1, uint16_t args2, uint8_t args3)
{
    af28:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4736
  remote_tds_clear(args2);
    af2a:	0e 94 74 57 	call	0xaee8	; 0xaee8 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4737
  MenuHistoryPrevMenu(0, 0, 0);
    af2e:	0c 94 b2 af 	jmp	0x15f64	; 0x15f64 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000af32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>:
_ZN11EEPROMClass4readEi.isra.0.lto_priv.278():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    af32:	0c 94 bb de 	jmp	0x1bd76	; 0x1bd76 <eeprom_read_byte>

0000af36 <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:59
}


//// cteni zapis eeprom float datovy typ
float EEPROMreadFloat(unsigned int addr)
{
    af36:	cf 92       	push	r12
    af38:	df 92       	push	r13
    af3a:	ef 92       	push	r14
    af3c:	ff 92       	push	r15
    af3e:	0f 93       	push	r16
    af40:	1f 93       	push	r17
    af42:	cf 93       	push	r28
    af44:	df 93       	push	r29
    af46:	00 d0       	rcall	.+0      	; 0xaf48 <EEPROMreadFloat(unsigned int)+0x12>
    af48:	1f 92       	push	r1
    af4a:	cd b7       	in	r28, 0x3d	; 61
    af4c:	de b7       	in	r29, 0x3e	; 62
    af4e:	7e 01       	movw	r14, r28
    af50:	25 e0       	ldi	r18, 0x05	; 5
    af52:	e2 0e       	add	r14, r18
    af54:	f1 1c       	adc	r15, r1
    af56:	8e 01       	movw	r16, r28
    af58:	0f 5f       	subi	r16, 0xFF	; 255
    af5a:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:64
  union {
    uint8_t b[4];
    float f;
  } data;
  for (int i = 0; i < 4; i++) data.b[i] = EEPROM.read(addr + i);
    af5c:	6c 01       	movw	r12, r24
    af5e:	c0 1a       	sub	r12, r16
    af60:	d1 0a       	sbc	r13, r17
    af62:	c6 01       	movw	r24, r12
    af64:	80 0f       	add	r24, r16
    af66:	91 1f       	adc	r25, r17
    af68:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    af6c:	f8 01       	movw	r30, r16
    af6e:	81 93       	st	Z+, r24
    af70:	8f 01       	movw	r16, r30
    af72:	ee 15       	cp	r30, r14
    af74:	ff 05       	cpc	r31, r15
    af76:	a9 f7       	brne	.-22     	; 0xaf62 <EEPROMreadFloat(unsigned int)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:65
  return data.f;
    af78:	69 81       	ldd	r22, Y+1	; 0x01
    af7a:	7a 81       	ldd	r23, Y+2	; 0x02
    af7c:	8b 81       	ldd	r24, Y+3	; 0x03
    af7e:	9c 81       	ldd	r25, Y+4	; 0x04
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:66
}
    af80:	0f 90       	pop	r0
    af82:	0f 90       	pop	r0
    af84:	0f 90       	pop	r0
    af86:	0f 90       	pop	r0
    af88:	df 91       	pop	r29
    af8a:	cf 91       	pop	r28
    af8c:	1f 91       	pop	r17
    af8e:	0f 91       	pop	r16
    af90:	ff 90       	pop	r15
    af92:	ef 90       	pop	r14
    af94:	df 90       	pop	r13
    af96:	cf 90       	pop	r12
    af98:	08 95       	ret

0000af9a <button_click_set_time_offset(unsigned int, unsigned int, unsigned char)>:
_Z28button_click_set_time_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5826
////////////////////////////////////////////////////////////////////////////////
/*
   Obsluha tlacitka casovy offset
*/
void button_click_set_time_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
    af9a:	cf 93       	push	r28
    af9c:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5827
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
    af9e:	70 e0       	ldi	r23, 0x00	; 0
    afa0:	60 e0       	ldi	r22, 0x00	; 0
    afa2:	86 e6       	ldi	r24, 0x66	; 102
    afa4:	90 e0       	ldi	r25, 0x00	; 0
    afa6:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3425
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    afaa:	81 e0       	ldi	r24, 0x01	; 1
    afac:	90 e0       	ldi	r25, 0x00	; 0
    afae:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1665
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    afb2:	c0 e8       	ldi	r28, 0x80	; 128
    afb4:	d9 e0       	ldi	r29, 0x09	; 9
_Z28button_click_set_time_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5828
   Obsluha tlacitka casovy offset
*/
void button_click_set_time_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable(time_get_offset(), -12, 12, 1, 0, NUMBER_TYPE_INT, H_FALSE, 0, &helper_set_menu_time_offset);
    afb6:	68 2f       	mov	r22, r24
    afb8:	88 0f       	add	r24, r24
    afba:	77 0b       	sbc	r23, r23
    afbc:	88 0b       	sbc	r24, r24
    afbe:	99 0b       	sbc	r25, r25
    afc0:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
    afc4:	68 83       	st	Y, r22
    afc6:	79 83       	std	Y+1, r23	; 0x01
    afc8:	8a 83       	std	Y+2, r24	; 0x02
    afca:	9b 83       	std	Y+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1666
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    afcc:	80 e0       	ldi	r24, 0x00	; 0
    afce:	90 e0       	ldi	r25, 0x00	; 0
    afd0:	a0 e4       	ldi	r26, 0x40	; 64
    afd2:	b1 ec       	ldi	r27, 0xC1	; 193
    afd4:	88 87       	std	Y+8, r24	; 0x08
    afd6:	99 87       	std	Y+9, r25	; 0x09
    afd8:	aa 87       	std	Y+10, r26	; 0x0a
    afda:	bb 87       	std	Y+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1667
  menu_dialog_variable[idx].variable_max = max;
    afdc:	80 e0       	ldi	r24, 0x00	; 0
    afde:	90 e0       	ldi	r25, 0x00	; 0
    afe0:	a0 e4       	ldi	r26, 0x40	; 64
    afe2:	b1 e4       	ldi	r27, 0x41	; 65
    afe4:	8c 83       	std	Y+4, r24	; 0x04
    afe6:	9d 83       	std	Y+5, r25	; 0x05
    afe8:	ae 83       	std	Y+6, r26	; 0x06
    afea:	bf 83       	std	Y+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1668
  menu_dialog_variable[idx].variable_step = step;
    afec:	80 e0       	ldi	r24, 0x00	; 0
    afee:	90 e0       	ldi	r25, 0x00	; 0
    aff0:	a0 e8       	ldi	r26, 0x80	; 128
    aff2:	bf e3       	ldi	r27, 0x3F	; 63
    aff4:	8e 87       	std	Y+14, r24	; 0x0e
    aff6:	9f 87       	std	Y+15, r25	; 0x0f
    aff8:	a8 8b       	std	Y+16, r26	; 0x10
    affa:	b9 8b       	std	Y+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1669
  menu_dialog_variable[idx].number_type = number_type;
    affc:	81 e0       	ldi	r24, 0x01	; 1
    affe:	8d 87       	std	Y+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1670
  menu_dialog_variable[idx].args = args;
    b000:	1a 8a       	std	Y+18, r1	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1671
  menu_dialog_variable[idx].update_now = update_now;
    b002:	1c 86       	std	Y+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1672
  menu_dialog_variable[idx].save_function = save_function;
    b004:	8f ed       	ldi	r24, 0xDF	; 223
    b006:	96 e5       	ldi	r25, 0x56	; 86
    b008:	9c 8b       	std	Y+20, r25	; 0x14
    b00a:	8b 8b       	std	Y+19, r24	; 0x13
_Z28button_click_set_time_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5829
*/
void button_click_set_time_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable(time_get_offset(), -12, 12, 1, 0, NUMBER_TYPE_INT, H_FALSE, 0, &helper_set_menu_time_offset);
}
    b00c:	df 91       	pop	r29
    b00e:	cf 91       	pop	r28
    b010:	08 95       	ret

0000b012 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2011
  active - ukazatel na promenou active
  name - ukazatel na nazev topicu
*/
/// ziska nazev topicu
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
    b012:	af 92       	push	r10
    b014:	bf 92       	push	r11
    b016:	cf 92       	push	r12
    b018:	df 92       	push	r13
    b01a:	ef 92       	push	r14
    b01c:	ff 92       	push	r15
    b01e:	0f 93       	push	r16
    b020:	1f 93       	push	r17
    b022:	cf 93       	push	r28
    b024:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2013
  char t;
  if (idx < MAX_RTDS)
    b026:	8a 30       	cpi	r24, 0x0A	; 10
    b028:	88 f5       	brcc	.+98     	; 0xb08c <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    b02a:	7b 01       	movw	r14, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2017
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    {
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
    b02c:	94 e1       	ldi	r25, 0x14	; 20
    b02e:	89 9f       	mul	r24, r25
    b030:	e0 01       	movw	r28, r0
    b032:	11 24       	eor	r1, r1
    b034:	6e 01       	movw	r12, r28
    b036:	e6 e5       	ldi	r30, 0x56	; 86
    b038:	ce 1a       	sub	r12, r30
    b03a:	ea ef       	ldi	r30, 0xFA	; 250
    b03c:	de 0a       	sbc	r13, r30
    b03e:	8a 01       	movw	r16, r20
    b040:	5e 01       	movw	r10, r28
    b042:	f4 e4       	ldi	r31, 0x44	; 68
    b044:	af 1a       	sub	r10, r31
    b046:	fa ef       	ldi	r31, 0xFA	; 250
    b048:	bf 0a       	sbc	r11, r31
    b04a:	c6 01       	movw	r24, r12
    b04c:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2018
      name[i] = t;
    b050:	f8 01       	movw	r30, r16
    b052:	81 93       	st	Z+, r24
    b054:	8f 01       	movw	r16, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2019
      name[i + 1] = 0;
    b056:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2020
      if (t == 0) break;
    b058:	88 23       	and	r24, r24
    b05a:	31 f0       	breq	.+12     	; 0xb068 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    b05c:	ff ef       	ldi	r31, 0xFF	; 255
    b05e:	cf 1a       	sub	r12, r31
    b060:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2015
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
  char t;
  if (idx < MAX_RTDS)
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    b062:	ca 14       	cp	r12, r10
    b064:	db 04       	cpc	r13, r11
    b066:	89 f7       	brne	.-30     	; 0xb04a <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2022
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
      name[i] = t;
      name[i + 1] = 0;
      if (t == 0) break;
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    b068:	ce 01       	movw	r24, r28
    b06a:	83 54       	subi	r24, 0x43	; 67
    b06c:	9a 4f       	sbci	r25, 0xFA	; 250
    b06e:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    b072:	f7 01       	movw	r30, r14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2026
  }
  else
  {
    *active = 255;
    b074:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2028
  }
}
    b076:	df 91       	pop	r29
    b078:	cf 91       	pop	r28
    b07a:	1f 91       	pop	r17
    b07c:	0f 91       	pop	r16
    b07e:	ff 90       	pop	r15
    b080:	ef 90       	pop	r14
    b082:	df 90       	pop	r13
    b084:	cf 90       	pop	r12
    b086:	bf 90       	pop	r11
    b088:	af 90       	pop	r10
    b08a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2026
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
  {
    *active = 255;
    b08c:	8f ef       	ldi	r24, 0xFF	; 255
    b08e:	fb 01       	movw	r30, r22
    b090:	f1 cf       	rjmp	.-30     	; 0xb074 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

0000b092 <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2136
   navratove hodnoty
   255 ... nenalezeno
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
    b092:	ef 92       	push	r14
    b094:	ff 92       	push	r15
    b096:	0f 93       	push	r16
    b098:	1f 93       	push	r17
    b09a:	cf 93       	push	r28
    b09c:	df 93       	push	r29
    b09e:	cd b7       	in	r28, 0x3d	; 61
    b0a0:	de b7       	in	r29, 0x3e	; 62
    b0a2:	63 97       	sbiw	r28, 0x13	; 19
    b0a4:	0f b6       	in	r0, 0x3f	; 63
    b0a6:	f8 94       	cli
    b0a8:	de bf       	out	0x3e, r29	; 62
    b0aa:	0f be       	out	0x3f, r0	; 63
    b0ac:	cd bf       	out	0x3d, r28	; 61
    b0ae:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2140
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b0b0:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2138
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
    b0b2:	0f ef       	ldi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2142
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_complete(idx, &active, tmp_name);
    b0b4:	ae 01       	movw	r20, r28
    b0b6:	4f 5f       	subi	r20, 0xFF	; 255
    b0b8:	5f 4f       	sbci	r21, 0xFF	; 255
    b0ba:	be 01       	movw	r22, r28
    b0bc:	6d 5e       	subi	r22, 0xED	; 237
    b0be:	7f 4f       	sbci	r23, 0xFF	; 255
    b0c0:	81 2f       	mov	r24, r17
    b0c2:	0e 94 09 58 	call	0xb012	; 0xb012 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2143
    if (strcmp(name, tmp_name) == 0)
    b0c6:	be 01       	movw	r22, r28
    b0c8:	6f 5f       	subi	r22, 0xFF	; 255
    b0ca:	7f 4f       	sbci	r23, 0xFF	; 255
    b0cc:	c7 01       	movw	r24, r14
    b0ce:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    b0d2:	89 2b       	or	r24, r25
    b0d4:	09 f4       	brne	.+2      	; 0xb0d8 <remote_tds_name_exist(char*)+0x46>
    b0d6:	01 2f       	mov	r16, r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2140
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b0d8:	1f 5f       	subi	r17, 0xFF	; 255
    b0da:	1a 30       	cpi	r17, 0x0A	; 10
    b0dc:	59 f7       	brne	.-42     	; 0xb0b4 <remote_tds_name_exist(char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2147
    remote_tds_get_complete(idx, &active, tmp_name);
    if (strcmp(name, tmp_name) == 0)
      found = idx;
  }
  return found;
}
    b0de:	80 2f       	mov	r24, r16
    b0e0:	63 96       	adiw	r28, 0x13	; 19
    b0e2:	0f b6       	in	r0, 0x3f	; 63
    b0e4:	f8 94       	cli
    b0e6:	de bf       	out	0x3e, r29	; 62
    b0e8:	0f be       	out	0x3f, r0	; 63
    b0ea:	cd bf       	out	0x3d, r28	; 61
    b0ec:	df 91       	pop	r29
    b0ee:	cf 91       	pop	r28
    b0f0:	1f 91       	pop	r17
    b0f2:	0f 91       	pop	r16
    b0f4:	ff 90       	pop	r15
    b0f6:	ef 90       	pop	r14
    b0f8:	08 95       	ret

0000b0fa <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4872
      remote_tds_subscibe_topic(idx);
    }
}

void menu_rtds_update_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b0fa:	1f 93       	push	r17
    b0fc:	cf 93       	push	r28
    b0fe:	df 93       	push	r29
    b100:	cd b7       	in	r28, 0x3d	; 61
    b102:	de b7       	in	r29, 0x3e	; 62
    b104:	62 97       	sbiw	r28, 0x12	; 18
    b106:	0f b6       	in	r0, 0x3f	; 63
    b108:	f8 94       	cli
    b10a:	de bf       	out	0x3e, r29	; 62
    b10c:	0f be       	out	0x3f, r0	; 63
    b10e:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1686
  dialog_save_valid_function = valid_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    b110:	10 91 d8 09 	lds	r17, 0x09D8	; 0x8009d8 <dialog_set_string_args>
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4875

void menu_rtds_update_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
    b114:	ce 01       	movw	r24, r28
    b116:	01 96       	adiw	r24, 0x01	; 1
    b118:	0e 94 9b 3f 	call	0x7f36	; 0x7f36 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4877
  //printf("update %s, %d\n", name, idx);
  if (strlen(name) > 0)
    b11c:	89 81       	ldd	r24, Y+1	; 0x01
    b11e:	88 23       	and	r24, r24
    b120:	71 f0       	breq	.+28     	; 0xb13e <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4879
  {
    if (remote_tds_name_exist(name) == 255)
    b122:	ce 01       	movw	r24, r28
    b124:	01 96       	adiw	r24, 0x01	; 1
    b126:	0e 94 49 58 	call	0xb092	; 0xb092 <remote_tds_name_exist(char*)>
    b12a:	8f 3f       	cpi	r24, 0xFF	; 255
    b12c:	41 f4       	brne	.+16     	; 0xb13e <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x44>
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2039
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    b12e:	1a 30       	cpi	r17, 0x0A	; 10
    b130:	30 f4       	brcc	.+12     	; 0xb13e <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x44>
    b132:	be 01       	movw	r22, r28
    b134:	6f 5f       	subi	r22, 0xFF	; 255
    b136:	7f 4f       	sbci	r23, 0xFF	; 255
    b138:	81 2f       	mov	r24, r17
    b13a:	0e 94 b0 56 	call	0xad60	; 0xad60 <remote_tds_set_name(unsigned char, char*) [clone .part.23]>
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4882
  if (strlen(name) > 0)
  {
    if (remote_tds_name_exist(name) == 255)
      remote_tds_set_name(idx, name);
  }
}
    b13e:	62 96       	adiw	r28, 0x12	; 18
    b140:	0f b6       	in	r0, 0x3f	; 63
    b142:	f8 94       	cli
    b144:	de bf       	out	0x3e, r29	; 62
    b146:	0f be       	out	0x3f, r0	; 63
    b148:	cd bf       	out	0x3d, r28	; 61
    b14a:	df 91       	pop	r29
    b14c:	cf 91       	pop	r28
    b14e:	1f 91       	pop	r17
    b150:	08 95       	ret

0000b152 <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2083
  idx - index nazvu topicu, ktery si chci subscribnout/unsubscribnout
*/


void remote_tds_subscibe_topic(uint8_t idx)
{
    b152:	cf 93       	push	r28
    b154:	df 93       	push	r29
    b156:	cd b7       	in	r28, 0x3d	; 61
    b158:	de b7       	in	r29, 0x3e	; 62
    b15a:	c1 58       	subi	r28, 0x81	; 129
    b15c:	d1 09       	sbc	r29, r1
    b15e:	0f b6       	in	r0, 0x3f	; 63
    b160:	f8 94       	cli
    b162:	de bf       	out	0x3e, r29	; 62
    b164:	0f be       	out	0x3f, r0	; 63
    b166:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2086
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    b168:	cf 57       	subi	r28, 0x7F	; 127
    b16a:	df 4f       	sbci	r29, 0xFF	; 255
    b16c:	18 82       	st	Y, r1
    b16e:	c1 58       	subi	r28, 0x81	; 129
    b170:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2087
  remote_tds_get_complete(idx, &active, tmp1);
    b172:	ae 01       	movw	r20, r28
    b174:	4f 5f       	subi	r20, 0xFF	; 255
    b176:	5f 4f       	sbci	r21, 0xFF	; 255
    b178:	be 01       	movw	r22, r28
    b17a:	6f 57       	subi	r22, 0x7F	; 127
    b17c:	7f 4f       	sbci	r23, 0xFF	; 255
    b17e:	0e 94 09 58 	call	0xb012	; 0xb012 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2088
  if (active == 1)
    b182:	cf 57       	subi	r28, 0x7F	; 127
    b184:	df 4f       	sbci	r29, 0xFF	; 255
    b186:	88 81       	ld	r24, Y
    b188:	c1 58       	subi	r28, 0x81	; 129
    b18a:	d0 40       	sbci	r29, 0x00	; 0
    b18c:	81 30       	cpi	r24, 0x01	; 1
    b18e:	d9 f4       	brne	.+54     	; 0xb1c6 <remote_tds_subscibe_topic(unsigned char)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2090
  {
    strcpy_P(tmp2, new_text_slash_rtds_slash); /// /rtds/
    b190:	66 eb       	ldi	r22, 0xB6	; 182
    b192:	7b e5       	ldi	r23, 0x5B	; 91
    b194:	ce 01       	movw	r24, r28
    b196:	8f 5b       	subi	r24, 0xBF	; 191
    b198:	9f 4f       	sbci	r25, 0xFF	; 255
    b19a:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2091
    strcat(tmp2, tmp1);
    b19e:	be 01       	movw	r22, r28
    b1a0:	6f 5f       	subi	r22, 0xFF	; 255
    b1a2:	7f 4f       	sbci	r23, 0xFF	; 255
    b1a4:	ce 01       	movw	r24, r28
    b1a6:	8f 5b       	subi	r24, 0xBF	; 191
    b1a8:	9f 4f       	sbci	r25, 0xFF	; 255
    b1aa:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2092
    strcat(tmp2, "/#");
    b1ae:	6c e0       	ldi	r22, 0x0C	; 12
    b1b0:	74 e0       	ldi	r23, 0x04	; 4
    b1b2:	ce 01       	movw	r24, r28
    b1b4:	8f 5b       	subi	r24, 0xBF	; 191
    b1b6:	9f 4f       	sbci	r25, 0xFF	; 255
    b1b8:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2093
    mqtt_client.subscribe(tmp2);
    b1bc:	ce 01       	movw	r24, r28
    b1be:	8f 5b       	subi	r24, 0xBF	; 191
    b1c0:	9f 4f       	sbci	r25, 0xFF	; 255
    b1c2:	0e 94 98 b1 	call	0x16330	; 0x16330 <PubSubClient::subscribe(char const*) [clone .constprop.165]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2095
  }
}
    b1c6:	cf 57       	subi	r28, 0x7F	; 127
    b1c8:	df 4f       	sbci	r29, 0xFF	; 255
    b1ca:	0f b6       	in	r0, 0x3f	; 63
    b1cc:	f8 94       	cli
    b1ce:	de bf       	out	0x3e, r29	; 62
    b1d0:	0f be       	out	0x3f, r0	; 63
    b1d2:	cd bf       	out	0x3d, r28	; 61
    b1d4:	df 91       	pop	r29
    b1d6:	cf 91       	pop	r28
    b1d8:	08 95       	ret

0000b1da <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_create_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4857
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx, &menu_rtds_create_name, &valid_true);
  }
}

void menu_rtds_create_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b1da:	1f 93       	push	r17
    b1dc:	cf 93       	push	r28
    b1de:	df 93       	push	r29
    b1e0:	cd b7       	in	r28, 0x3d	; 61
    b1e2:	de b7       	in	r29, 0x3e	; 62
    b1e4:	62 97       	sbiw	r28, 0x12	; 18
    b1e6:	0f b6       	in	r0, 0x3f	; 63
    b1e8:	f8 94       	cli
    b1ea:	de bf       	out	0x3e, r29	; 62
    b1ec:	0f be       	out	0x3f, r0	; 63
    b1ee:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1686
  dialog_save_valid_function = valid_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    b1f0:	10 91 d8 09 	lds	r17, 0x09D8	; 0x8009d8 <dialog_set_string_args>
_Z21menu_rtds_create_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4861
void menu_rtds_create_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active = 1;
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
    b1f4:	ce 01       	movw	r24, r28
    b1f6:	01 96       	adiw	r24, 0x01	; 1
    b1f8:	0e 94 9b 3f 	call	0x7f36	; 0x7f36 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4863
  //printf("create %s, %d\n", name, idx);
  if (strlen(name) > 0)
    b1fc:	89 81       	ldd	r24, Y+1	; 0x01
    b1fe:	88 23       	and	r24, r24
    b200:	81 f0       	breq	.+32     	; 0xb222 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4864
    if (remote_tds_name_exist(name) == 255)
    b202:	ce 01       	movw	r24, r28
    b204:	01 96       	adiw	r24, 0x01	; 1
    b206:	0e 94 49 58 	call	0xb092	; 0xb092 <remote_tds_name_exist(char*)>
    b20a:	8f 3f       	cpi	r24, 0xFF	; 255
    b20c:	51 f4       	brne	.+20     	; 0xb222 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4866
    {
      remote_tds_set_complete(idx, active, name);
    b20e:	ae 01       	movw	r20, r28
    b210:	4f 5f       	subi	r20, 0xFF	; 255
    b212:	5f 4f       	sbci	r21, 0xFF	; 255
    b214:	61 e0       	ldi	r22, 0x01	; 1
    b216:	81 2f       	mov	r24, r17
    b218:	0e 94 5d 57 	call	0xaeba	; 0xaeba <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4867
      remote_tds_subscibe_topic(idx);
    b21c:	81 2f       	mov	r24, r17
    b21e:	0e 94 a9 58 	call	0xb152	; 0xb152 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4869
    }
}
    b222:	62 96       	adiw	r28, 0x12	; 18
    b224:	0f b6       	in	r0, 0x3f	; 63
    b226:	f8 94       	cli
    b228:	de bf       	out	0x3e, r29	; 62
    b22a:	0f be       	out	0x3f, r0	; 63
    b22c:	cd bf       	out	0x3d, r28	; 61
    b22e:	df 91       	pop	r29
    b230:	cf 91       	pop	r28
    b232:	1f 91       	pop	r17
    b234:	08 95       	ret

0000b236 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>:
_Z20click_rtds_subscribejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4741
  remote_tds_clear(args2);
  MenuHistoryPrevMenu(0, 0, 0);
}
////
void click_rtds_subscribe(uint16_t args1, uint16_t idx, uint8_t args3)
{
    b236:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4742
  remote_tds_subscibe_topic(idx);
    b238:	0c 94 a9 58 	jmp	0xb152	; 0xb152 <remote_tds_subscibe_topic(unsigned char)>

0000b23c <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z29display_menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1768
  display_element_set_string(name, 8, args2, &menu_tds_save_name, &valid_true);
  //dialog_save_variable_function = ;
}
/// funkce pro nastaveni nazvu rtds
void display_menu_rtds_update_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b23c:	1f 93       	push	r17
    b23e:	cf 93       	push	r28
    b240:	df 93       	push	r29
    b242:	cd b7       	in	r28, 0x3d	; 61
    b244:	de b7       	in	r29, 0x3e	; 62
    b246:	63 97       	sbiw	r28, 0x13	; 19
    b248:	0f b6       	in	r0, 0x3f	; 63
    b24a:	f8 94       	cli
    b24c:	de bf       	out	0x3e, r29	; 62
    b24e:	0f be       	out	0x3f, r0	; 63
    b250:	cd bf       	out	0x3d, r28	; 61
    b252:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1771
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
    b254:	ae 01       	movw	r20, r28
    b256:	4f 5f       	subi	r20, 0xFF	; 255
    b258:	5f 4f       	sbci	r21, 0xFF	; 255
    b25a:	be 01       	movw	r22, r28
    b25c:	6d 5e       	subi	r22, 0xED	; 237
    b25e:	7f 4f       	sbci	r23, 0xFF	; 255
    b260:	81 2f       	mov	r24, r17
    b262:	0e 94 09 58 	call	0xb012	; 0xb012 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1772
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, args3);
    b266:	70 e0       	ldi	r23, 0x00	; 0
    b268:	60 e0       	ldi	r22, 0x00	; 0
    b26a:	87 e6       	ldi	r24, 0x67	; 103
    b26c:	90 e0       	ldi	r25, 0x00	; 0
    b26e:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    b272:	be 01       	movw	r22, r28
    b274:	6f 5f       	subi	r22, 0xFF	; 255
    b276:	7f 4f       	sbci	r23, 0xFF	; 255
    b278:	8a ed       	ldi	r24, 0xDA	; 218
    b27a:	99 e0       	ldi	r25, 0x09	; 9
    b27c:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1678
  dialog_set_string_max_length = max_length;
    b280:	82 e1       	ldi	r24, 0x12	; 18
    b282:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1679
  dialog_set_string_args = idx;
    b286:	10 93 d8 09 	sts	0x09D8, r17	; 0x8009d8 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1680
  dialog_save_string_function = save_function;
    b28a:	8d e7       	ldi	r24, 0x7D	; 125
    b28c:	98 e5       	ldi	r25, 0x58	; 88
    b28e:	90 93 d7 09 	sts	0x09D7, r25	; 0x8009d7 <dialog_save_string_function+0x1>
    b292:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1681
  dialog_save_valid_function = valid_function;
    b296:	8c ef       	ldi	r24, 0xFC	; 252
    b298:	9b e3       	ldi	r25, 0x3B	; 59
    b29a:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <dialog_save_valid_function+0x1>
    b29e:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <dialog_save_valid_function>
_Z29display_menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1775
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, args3);
  display_element_set_string(name, RTDS_DEVICE_STRING_LEN, args2, &menu_rtds_update_name, &valid_true);
  //dialog_save_variable_function = ;
}
    b2a2:	63 96       	adiw	r28, 0x13	; 19
    b2a4:	0f b6       	in	r0, 0x3f	; 63
    b2a6:	f8 94       	cli
    b2a8:	de bf       	out	0x3e, r29	; 62
    b2aa:	0f be       	out	0x3f, r0	; 63
    b2ac:	cd bf       	out	0x3d, r28	; 61
    b2ae:	df 91       	pop	r29
    b2b0:	cf 91       	pop	r28
    b2b2:	1f 91       	pop	r17
    b2b4:	08 95       	ret

0000b2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:135
}



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
    b2b6:	4f 92       	push	r4
    b2b8:	5f 92       	push	r5
    b2ba:	6f 92       	push	r6
    b2bc:	7f 92       	push	r7
    b2be:	8f 92       	push	r8
    b2c0:	9f 92       	push	r9
    b2c2:	af 92       	push	r10
    b2c4:	bf 92       	push	r11
    b2c6:	cf 92       	push	r12
    b2c8:	df 92       	push	r13
    b2ca:	ef 92       	push	r14
    b2cc:	ff 92       	push	r15
    b2ce:	0f 93       	push	r16
    b2d0:	1f 93       	push	r17
    b2d2:	cf 93       	push	r28
    b2d4:	df 93       	push	r29
    b2d6:	00 d0       	rcall	.+0      	; 0xb2d8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x22>
    b2d8:	00 d0       	rcall	.+0      	; 0xb2da <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
    b2da:	1f 92       	push	r1
    b2dc:	1f 92       	push	r1
    b2de:	cd b7       	in	r28, 0x3d	; 61
    b2e0:	de b7       	in	r29, 0x3e	; 62
    b2e2:	6c 01       	movw	r12, r24
    b2e4:	46 2e       	mov	r4, r22
    b2e6:	52 2e       	mov	r5, r18
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:137
  char tmp1[8];
  str[0] = 0;
    b2e8:	fc 01       	movw	r30, r24
    b2ea:	10 82       	st	Z, r1
    b2ec:	3a 01       	movw	r6, r20
    b2ee:	f1 2c       	mov	r15, r1
    b2f0:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:140
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
    b2f2:	a0 2e       	mov	r10, r16
    b2f4:	b1 2c       	mov	r11, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
    b2f6:	8e 01       	movw	r16, r28
    b2f8:	0f 5f       	subi	r16, 0xFF	; 255
    b2fa:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:144
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
    b2fc:	82 2f       	mov	r24, r18
    b2fe:	81 50       	subi	r24, 0x01	; 1
    b300:	99 0b       	sbc	r25, r25
    b302:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:140
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
    b304:	f3 01       	movw	r30, r6
    b306:	81 91       	ld	r24, Z+
    b308:	3f 01       	movw	r6, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
    b30a:	a5 01       	movw	r20, r10
    b30c:	b8 01       	movw	r22, r16
    b30e:	90 e0       	ldi	r25, 0x00	; 0
    b310:	0e 94 25 d5 	call	0x1aa4a	; 0x1aa4a <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:141
    if (strlen(tmp1) < 2)
    b314:	f8 01       	movw	r30, r16
    b316:	01 90       	ld	r0, Z+
    b318:	00 20       	and	r0, r0
    b31a:	e9 f7       	brne	.-6      	; 0xb316 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x60>
    b31c:	31 97       	sbiw	r30, 0x01	; 1
    b31e:	e0 1b       	sub	r30, r16
    b320:	f1 0b       	sbc	r31, r17
    b322:	32 97       	sbiw	r30, 0x02	; 2
    b324:	28 f4       	brcc	.+10     	; 0xb330 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x7a>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:142
      strcat(str, "0");
    b326:	64 e9       	ldi	r22, 0x94	; 148
    b328:	73 e0       	ldi	r23, 0x03	; 3
    b32a:	c6 01       	movw	r24, r12
    b32c:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:143
    strcat(str, tmp1); 
    b330:	b8 01       	movw	r22, r16
    b332:	c6 01       	movw	r24, r12
    b334:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:144
    if (a < maxBytes - 1)
    b338:	e8 14       	cp	r14, r8
    b33a:	f9 04       	cpc	r15, r9
    b33c:	34 f4       	brge	.+12     	; 0xb34a <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x94>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:146
    {
      tmp1[0] = sep;
    b33e:	49 82       	std	Y+1, r4	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:147
      tmp1[1] = 0;
    b340:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:148
      strcat(str, tmp1);
    b342:	b8 01       	movw	r22, r16
    b344:	c6 01       	movw	r24, r12
    b346:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
    b34a:	ff ef       	ldi	r31, 0xFF	; 255
    b34c:	ef 1a       	sub	r14, r31
    b34e:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:138

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
    b350:	e5 14       	cp	r14, r5
    b352:	c0 f2       	brcs	.-80     	; 0xb304 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:151
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
    b354:	28 96       	adiw	r28, 0x08	; 8
    b356:	0f b6       	in	r0, 0x3f	; 63
    b358:	f8 94       	cli
    b35a:	de bf       	out	0x3e, r29	; 62
    b35c:	0f be       	out	0x3f, r0	; 63
    b35e:	cd bf       	out	0x3d, r28	; 61
    b360:	df 91       	pop	r29
    b362:	cf 91       	pop	r28
    b364:	1f 91       	pop	r17
    b366:	0f 91       	pop	r16
    b368:	ff 90       	pop	r15
    b36a:	ef 90       	pop	r14
    b36c:	df 90       	pop	r13
    b36e:	cf 90       	pop	r12
    b370:	bf 90       	pop	r11
    b372:	af 90       	pop	r10
    b374:	9f 90       	pop	r9
    b376:	8f 90       	pop	r8
    b378:	7f 90       	pop	r7
    b37a:	6f 90       	pop	r6
    b37c:	5f 90       	pop	r5
    b37e:	4f 90       	pop	r4
    b380:	08 95       	ret

0000b382 <display_element_show_network_detail(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_show_network_detailjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5734

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void display_element_show_network_detail(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    b382:	af 92       	push	r10
    b384:	bf 92       	push	r11
    b386:	cf 92       	push	r12
    b388:	df 92       	push	r13
    b38a:	ef 92       	push	r14
    b38c:	ff 92       	push	r15
    b38e:	0f 93       	push	r16
    b390:	1f 93       	push	r17
    b392:	cf 93       	push	r28
    b394:	df 93       	push	r29
    b396:	cd b7       	in	r28, 0x3d	; 61
    b398:	de b7       	in	r29, 0x3e	; 62
    b39a:	ea 97       	sbiw	r28, 0x3a	; 58
    b39c:	0f b6       	in	r0, 0x3f	; 63
    b39e:	f8 94       	cli
    b3a0:	de bf       	out	0x3e, r29	; 62
    b3a2:	0f be       	out	0x3f, r0	; 63
    b3a4:	cd bf       	out	0x3d, r28	; 61
    b3a6:	6c 01       	movw	r12, r24
    b3a8:	5b 01       	movw	r10, r22
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    b3aa:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
    b3ae:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
_Z35display_element_show_network_detailjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5738
  char str1[36];
  char str2[16];
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    b3b2:	26 0f       	add	r18, r22
    b3b4:	37 1f       	adc	r19, r23
    b3b6:	48 0f       	add	r20, r24
    b3b8:	59 1f       	adc	r21, r25
    b3ba:	0e 94 1f ae 	call	0x15c3e	; 0x15c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5741

  /// mac adresa
  strcpy_P(str1, new_text_device_mac);
    b3be:	69 e5       	ldi	r22, 0x59	; 89
    b3c0:	7f e5       	ldi	r23, 0x5F	; 95
    b3c2:	ce 01       	movw	r24, r28
    b3c4:	01 96       	adiw	r24, 0x01	; 1
    b3c6:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5742
  strcat(str1, ": ");
    b3ca:	61 e4       	ldi	r22, 0x41	; 65
    b3cc:	77 e0       	ldi	r23, 0x07	; 7
    b3ce:	ce 01       	movw	r24, r28
    b3d0:	01 96       	adiw	r24, 0x01	; 1
    b3d2:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5743
  createString(str2, '.', device.mac, 6, 16);
    b3d6:	00 e1       	ldi	r16, 0x10	; 16
    b3d8:	26 e0       	ldi	r18, 0x06	; 6
    b3da:	44 ee       	ldi	r20, 0xE4	; 228
    b3dc:	5d e0       	ldi	r21, 0x0D	; 13
    b3de:	6e e2       	ldi	r22, 0x2E	; 46
    b3e0:	ce 01       	movw	r24, r28
    b3e2:	85 96       	adiw	r24, 0x25	; 37
    b3e4:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5744
  strcat(str1, str2);
    b3e8:	be 01       	movw	r22, r28
    b3ea:	6b 5d       	subi	r22, 0xDB	; 219
    b3ec:	7f 4f       	sbci	r23, 0xFF	; 255
    b3ee:	ce 01       	movw	r24, r28
    b3f0:	01 96       	adiw	r24, 0x01	; 1
    b3f2:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5745
  show_string(str1, x + 5 , y + 10 , 1, BLACK, WHITE, 0);
    b3f6:	85 e0       	ldi	r24, 0x05	; 5
    b3f8:	c8 0e       	add	r12, r24
    b3fa:	d1 1c       	adc	r13, r1
    b3fc:	a5 01       	movw	r20, r10
    b3fe:	46 5f       	subi	r20, 0xF6	; 246
    b400:	5f 4f       	sbci	r21, 0xFF	; 255
    b402:	ee 24       	eor	r14, r14
    b404:	ea 94       	dec	r14
    b406:	fe 2c       	mov	r15, r14
    b408:	10 e0       	ldi	r17, 0x00	; 0
    b40a:	00 e0       	ldi	r16, 0x00	; 0
    b40c:	21 e0       	ldi	r18, 0x01	; 1
    b40e:	b6 01       	movw	r22, r12
    b410:	ce 01       	movw	r24, r28
    b412:	01 96       	adiw	r24, 0x01	; 1
    b414:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5747
  /// nazev
  strcpy_P(str1, new_text_device_nazev);
    b418:	6a e4       	ldi	r22, 0x4A	; 74
    b41a:	7f e5       	ldi	r23, 0x5F	; 95
    b41c:	ce 01       	movw	r24, r28
    b41e:	01 96       	adiw	r24, 0x01	; 1
    b420:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5748
  strcat(str1, ": ");
    b424:	61 e4       	ldi	r22, 0x41	; 65
    b426:	77 e0       	ldi	r23, 0x07	; 7
    b428:	ce 01       	movw	r24, r28
    b42a:	01 96       	adiw	r24, 0x01	; 1
    b42c:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5749
  strcat(str1, device.nazev);
    b430:	6a ef       	ldi	r22, 0xFA	; 250
    b432:	7d e0       	ldi	r23, 0x0D	; 13
    b434:	ce 01       	movw	r24, r28
    b436:	01 96       	adiw	r24, 0x01	; 1
    b438:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5750
  show_string(str1, x + 5 , y + 25 , 1, BLACK, WHITE, 0);
    b43c:	a5 01       	movw	r20, r10
    b43e:	47 5e       	subi	r20, 0xE7	; 231
    b440:	5f 4f       	sbci	r21, 0xFF	; 255
    b442:	21 e0       	ldi	r18, 0x01	; 1
    b444:	b6 01       	movw	r22, r12
    b446:	ce 01       	movw	r24, r28
    b448:	01 96       	adiw	r24, 0x01	; 1
    b44a:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5752
  /// ip adresa
  ip2CharArray(device.myIP, str2);
    b44e:	6a ee       	ldi	r22, 0xEA	; 234
    b450:	7d e0       	ldi	r23, 0x0D	; 13
    b452:	ce 01       	movw	r24, r28
    b454:	c5 96       	adiw	r24, 0x35	; 53
    b456:	0e 94 da b7 	call	0x16fb4	; 0x16fb4 <IPAddress::IPAddress(unsigned char const*)>
    b45a:	be 01       	movw	r22, r28
    b45c:	6b 5d       	subi	r22, 0xDB	; 219
    b45e:	7f 4f       	sbci	r23, 0xFF	; 255
    b460:	ce 01       	movw	r24, r28
    b462:	c5 96       	adiw	r24, 0x35	; 53
    b464:	0e 94 79 48 	call	0x90f2	; 0x90f2 <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5753
  strcpy_P(str1, new_text_device_ip);
    b468:	60 e4       	ldi	r22, 0x40	; 64
    b46a:	7f e5       	ldi	r23, 0x5F	; 95
    b46c:	ce 01       	movw	r24, r28
    b46e:	01 96       	adiw	r24, 0x01	; 1
    b470:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5754
  strcat(str1, ": ");
    b474:	61 e4       	ldi	r22, 0x41	; 65
    b476:	77 e0       	ldi	r23, 0x07	; 7
    b478:	ce 01       	movw	r24, r28
    b47a:	01 96       	adiw	r24, 0x01	; 1
    b47c:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5755
  strcat(str1, str2);
    b480:	be 01       	movw	r22, r28
    b482:	6b 5d       	subi	r22, 0xDB	; 219
    b484:	7f 4f       	sbci	r23, 0xFF	; 255
    b486:	ce 01       	movw	r24, r28
    b488:	01 96       	adiw	r24, 0x01	; 1
    b48a:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5756
  show_string(str1, x + 5 , y + 55 , 1, BLACK, WHITE, 0);
    b48e:	a5 01       	movw	r20, r10
    b490:	49 5c       	subi	r20, 0xC9	; 201
    b492:	5f 4f       	sbci	r21, 0xFF	; 255
    b494:	21 e0       	ldi	r18, 0x01	; 1
    b496:	b6 01       	movw	r22, r12
    b498:	ce 01       	movw	r24, r28
    b49a:	01 96       	adiw	r24, 0x01	; 1
    b49c:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5758
  /// ip maska
  ip2CharArray(device.myMASK, str2);
    b4a0:	6e ee       	ldi	r22, 0xEE	; 238
    b4a2:	7d e0       	ldi	r23, 0x0D	; 13
    b4a4:	ce 01       	movw	r24, r28
    b4a6:	c5 96       	adiw	r24, 0x35	; 53
    b4a8:	0e 94 da b7 	call	0x16fb4	; 0x16fb4 <IPAddress::IPAddress(unsigned char const*)>
    b4ac:	be 01       	movw	r22, r28
    b4ae:	6b 5d       	subi	r22, 0xDB	; 219
    b4b0:	7f 4f       	sbci	r23, 0xFF	; 255
    b4b2:	ce 01       	movw	r24, r28
    b4b4:	c5 96       	adiw	r24, 0x35	; 53
    b4b6:	0e 94 79 48 	call	0x90f2	; 0x90f2 <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5759
  strcpy_P(str1, new_text_device_mask);
    b4ba:	67 e3       	ldi	r22, 0x37	; 55
    b4bc:	7f e5       	ldi	r23, 0x5F	; 95
    b4be:	ce 01       	movw	r24, r28
    b4c0:	01 96       	adiw	r24, 0x01	; 1
    b4c2:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5760
  strcat(str1, ": ");
    b4c6:	61 e4       	ldi	r22, 0x41	; 65
    b4c8:	77 e0       	ldi	r23, 0x07	; 7
    b4ca:	ce 01       	movw	r24, r28
    b4cc:	01 96       	adiw	r24, 0x01	; 1
    b4ce:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5761
  strcat(str1, str2);
    b4d2:	be 01       	movw	r22, r28
    b4d4:	6b 5d       	subi	r22, 0xDB	; 219
    b4d6:	7f 4f       	sbci	r23, 0xFF	; 255
    b4d8:	ce 01       	movw	r24, r28
    b4da:	01 96       	adiw	r24, 0x01	; 1
    b4dc:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5762
  show_string(str1, x + 5 , y + 70 , 1, BLACK, WHITE, 0);
    b4e0:	a5 01       	movw	r20, r10
    b4e2:	4a 5b       	subi	r20, 0xBA	; 186
    b4e4:	5f 4f       	sbci	r21, 0xFF	; 255
    b4e6:	21 e0       	ldi	r18, 0x01	; 1
    b4e8:	b6 01       	movw	r22, r12
    b4ea:	ce 01       	movw	r24, r28
    b4ec:	01 96       	adiw	r24, 0x01	; 1
    b4ee:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5764
  /// ip gw
  ip2CharArray(device.myGW, str2);
    b4f2:	66 ef       	ldi	r22, 0xF6	; 246
    b4f4:	7d e0       	ldi	r23, 0x0D	; 13
    b4f6:	ce 01       	movw	r24, r28
    b4f8:	c5 96       	adiw	r24, 0x35	; 53
    b4fa:	0e 94 da b7 	call	0x16fb4	; 0x16fb4 <IPAddress::IPAddress(unsigned char const*)>
    b4fe:	be 01       	movw	r22, r28
    b500:	6b 5d       	subi	r22, 0xDB	; 219
    b502:	7f 4f       	sbci	r23, 0xFF	; 255
    b504:	ce 01       	movw	r24, r28
    b506:	c5 96       	adiw	r24, 0x35	; 53
    b508:	0e 94 79 48 	call	0x90f2	; 0x90f2 <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5765
  strcpy_P(str1, new_text_device_gw);
    b50c:	69 e2       	ldi	r22, 0x29	; 41
    b50e:	7f e5       	ldi	r23, 0x5F	; 95
    b510:	ce 01       	movw	r24, r28
    b512:	01 96       	adiw	r24, 0x01	; 1
    b514:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5766
  strcat(str1, ": ");
    b518:	61 e4       	ldi	r22, 0x41	; 65
    b51a:	77 e0       	ldi	r23, 0x07	; 7
    b51c:	ce 01       	movw	r24, r28
    b51e:	01 96       	adiw	r24, 0x01	; 1
    b520:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5767
  strcat(str1, str2);
    b524:	be 01       	movw	r22, r28
    b526:	6b 5d       	subi	r22, 0xDB	; 219
    b528:	7f 4f       	sbci	r23, 0xFF	; 255
    b52a:	ce 01       	movw	r24, r28
    b52c:	01 96       	adiw	r24, 0x01	; 1
    b52e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5768
  show_string(str1, x + 5 , y + 85 , 1, BLACK, WHITE, 0);
    b532:	a5 01       	movw	r20, r10
    b534:	4b 5a       	subi	r20, 0xAB	; 171
    b536:	5f 4f       	sbci	r21, 0xFF	; 255
    b538:	21 e0       	ldi	r18, 0x01	; 1
    b53a:	b6 01       	movw	r22, r12
    b53c:	ce 01       	movw	r24, r28
    b53e:	01 96       	adiw	r24, 0x01	; 1
    b540:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5770
  /// ip dns serveru
  ip2CharArray(device.myDNS, str2);
    b544:	62 ef       	ldi	r22, 0xF2	; 242
    b546:	7d e0       	ldi	r23, 0x0D	; 13
    b548:	ce 01       	movw	r24, r28
    b54a:	c5 96       	adiw	r24, 0x35	; 53
    b54c:	0e 94 da b7 	call	0x16fb4	; 0x16fb4 <IPAddress::IPAddress(unsigned char const*)>
    b550:	be 01       	movw	r22, r28
    b552:	6b 5d       	subi	r22, 0xDB	; 219
    b554:	7f 4f       	sbci	r23, 0xFF	; 255
    b556:	ce 01       	movw	r24, r28
    b558:	c5 96       	adiw	r24, 0x35	; 53
    b55a:	0e 94 79 48 	call	0x90f2	; 0x90f2 <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5771
  strcpy_P(str1, new_text_device_dns);
    b55e:	6e e1       	ldi	r22, 0x1E	; 30
    b560:	7f e5       	ldi	r23, 0x5F	; 95
    b562:	ce 01       	movw	r24, r28
    b564:	01 96       	adiw	r24, 0x01	; 1
    b566:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5772
  strcat(str1, ": ");
    b56a:	61 e4       	ldi	r22, 0x41	; 65
    b56c:	77 e0       	ldi	r23, 0x07	; 7
    b56e:	ce 01       	movw	r24, r28
    b570:	01 96       	adiw	r24, 0x01	; 1
    b572:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5773
  strcat(str1, str2);
    b576:	be 01       	movw	r22, r28
    b578:	6b 5d       	subi	r22, 0xDB	; 219
    b57a:	7f 4f       	sbci	r23, 0xFF	; 255
    b57c:	ce 01       	movw	r24, r28
    b57e:	01 96       	adiw	r24, 0x01	; 1
    b580:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5774
  show_string(str1, x + 5 , y + 100 , 1, BLACK, WHITE, 0);
    b584:	a5 01       	movw	r20, r10
    b586:	4c 59       	subi	r20, 0x9C	; 156
    b588:	5f 4f       	sbci	r21, 0xFF	; 255
    b58a:	21 e0       	ldi	r18, 0x01	; 1
    b58c:	b6 01       	movw	r22, r12
    b58e:	ce 01       	movw	r24, r28
    b590:	01 96       	adiw	r24, 0x01	; 1
    b592:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5775
}
    b596:	ea 96       	adiw	r28, 0x3a	; 58
    b598:	0f b6       	in	r0, 0x3f	; 63
    b59a:	f8 94       	cli
    b59c:	de bf       	out	0x3e, r29	; 62
    b59e:	0f be       	out	0x3f, r0	; 63
    b5a0:	cd bf       	out	0x3d, r28	; 61
    b5a2:	df 91       	pop	r29
    b5a4:	cf 91       	pop	r28
    b5a6:	1f 91       	pop	r17
    b5a8:	0f 91       	pop	r16
    b5aa:	ff 90       	pop	r15
    b5ac:	ef 90       	pop	r14
    b5ae:	df 90       	pop	r13
    b5b0:	cf 90       	pop	r12
    b5b2:	bf 90       	pop	r11
    b5b4:	af 90       	pop	r10
    b5b6:	08 95       	ret

0000b5b8 <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:342

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
    b5b8:	61 e0       	ldi	r22, 0x01	; 1
    b5ba:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SPI_CS>
    b5be:	0c 94 ad b8 	jmp	0x1715a	; 0x1715a <digitalWrite>

0000b5c2 <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:341
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
    b5c2:	60 e0       	ldi	r22, 0x00	; 0
    b5c4:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SPI_CS>
    b5c8:	0c 94 ad b8 	jmp	0x1715a	; 0x1715a <digitalWrite>

0000b5cc <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
    b5cc:	08 95       	ret

0000b5ce <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    b5ce:	8e bd       	out	0x2e, r24	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    b5d0:	00 00       	nop
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
    b5d2:	0d b4       	in	r0, 0x2d	; 45
    b5d4:	07 fe       	sbrs	r0, 7
    b5d6:	fd cf       	rjmp	.-6      	; 0xb5d2 <SPIClass::transfer(unsigned char)+0x4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:221
    return SPDR;
    b5d8:	8e b5       	in	r24, 0x2e	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:222
  }
    b5da:	08 95       	ret

0000b5dc <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    b5dc:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
    b5de:	9d bd       	out	0x2d, r25	; 45
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:208
  }
    b5e0:	08 95       	ret

0000b5e2 <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:134

    return _len;
}

uint8_t W5500Class::read(uint16_t _addr, uint8_t _cb)
{
    b5e2:	cf 93       	push	r28
    b5e4:	df 93       	push	r29
    b5e6:	d8 2f       	mov	r29, r24
    b5e8:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:135
    SPI.beginTransaction(wiznet_SPI_settings);
    b5ea:	80 91 cd 0d 	lds	r24, 0x0DCD	; 0x800dcd <wiznet_SPI_settings>
    b5ee:	90 91 ce 0d 	lds	r25, 0x0DCE	; 0x800dce <wiznet_SPI_settings+0x1>
    b5f2:	0e 94 ee 5a 	call	0xb5dc	; 0xb5dc <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:136
    setSS();
    b5f6:	0e 94 e1 5a 	call	0xb5c2	; 0xb5c2 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:137
    SPI.transfer(_addr >> 8);
    b5fa:	80 e0       	ldi	r24, 0x00	; 0
    b5fc:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:138
    SPI.transfer(_addr & 0xFF);
    b600:	8d 2f       	mov	r24, r29
    b602:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:139
    SPI.transfer(_cb);
    b606:	8c 2f       	mov	r24, r28
    b608:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:140
    uint8_t _data = SPI.transfer(0);
    b60c:	80 e0       	ldi	r24, 0x00	; 0
    b60e:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
    b612:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:141
    resetSS();
    b614:	0e 94 dc 5a 	call	0xb5b8	; 0xb5b8 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:145
    SPI.endTransaction();

    return _data;
}
    b618:	8c 2f       	mov	r24, r28
    b61a:	df 91       	pop	r29
    b61c:	cf 91       	pop	r28
    b61e:	08 95       	ret

0000b620 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:118

    return 1;
}

uint16_t W5500Class::write(uint16_t _addr, uint8_t _cb, const uint8_t *_buf, uint16_t _len)
{
    b620:	df 92       	push	r13
    b622:	ef 92       	push	r14
    b624:	ff 92       	push	r15
    b626:	0f 93       	push	r16
    b628:	1f 93       	push	r17
    b62a:	cf 93       	push	r28
    b62c:	df 93       	push	r29
    b62e:	d8 2f       	mov	r29, r24
    b630:	d9 2e       	mov	r13, r25
    b632:	c6 2f       	mov	r28, r22
    b634:	7a 01       	movw	r14, r20
    b636:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:119
    SPI.beginTransaction(wiznet_SPI_settings);
    b638:	80 91 cd 0d 	lds	r24, 0x0DCD	; 0x800dcd <wiznet_SPI_settings>
    b63c:	90 91 ce 0d 	lds	r25, 0x0DCE	; 0x800dce <wiznet_SPI_settings+0x1>
    b640:	0e 94 ee 5a 	call	0xb5dc	; 0xb5dc <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:120
    setSS();
    b644:	0e 94 e1 5a 	call	0xb5c2	; 0xb5c2 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:121
    SPI.transfer(_addr >> 8);
    b648:	8d 2d       	mov	r24, r13
    b64a:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:122
    SPI.transfer(_addr & 0xFF);
    b64e:	8d 2f       	mov	r24, r29
    b650:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:123
    SPI.transfer(_cb);
    b654:	8c 2f       	mov	r24, r28
    b656:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
    b65a:	e7 01       	movw	r28, r14
    b65c:	e0 0e       	add	r14, r16
    b65e:	f1 1e       	adc	r15, r17
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:124
    for (uint16_t i=0; i<_len; i++){
    b660:	ce 15       	cp	r28, r14
    b662:	df 05       	cpc	r29, r15
    b664:	21 f0       	breq	.+8      	; 0xb66e <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:125
        SPI.transfer(_buf[i]);
    b666:	89 91       	ld	r24, Y+
    b668:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
    b66c:	f9 cf       	rjmp	.-14     	; 0xb660 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:127
    }
    resetSS();
    b66e:	0e 94 dc 5a 	call	0xb5b8	; 0xb5b8 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:131
    SPI.endTransaction();

    return _len;
}
    b672:	c8 01       	movw	r24, r16
    b674:	df 91       	pop	r29
    b676:	cf 91       	pop	r28
    b678:	1f 91       	pop	r17
    b67a:	0f 91       	pop	r16
    b67c:	ff 90       	pop	r15
    b67e:	ef 90       	pop	r14
    b680:	df 90       	pop	r13
    b682:	08 95       	ret

0000b684 <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:104
    uint8_t cntl_byte = (0x18+(s<<5));
    read((uint16_t)src , cntl_byte, (uint8_t *)dst, len);
}

uint8_t W5500Class::write(uint16_t _addr, uint8_t _cb, uint8_t _data)
{
    b684:	1f 93       	push	r17
    b686:	cf 93       	push	r28
    b688:	df 93       	push	r29
    b68a:	18 2f       	mov	r17, r24
    b68c:	d6 2f       	mov	r29, r22
    b68e:	c4 2f       	mov	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:105
    SPI.beginTransaction(wiznet_SPI_settings);
    b690:	80 91 cd 0d 	lds	r24, 0x0DCD	; 0x800dcd <wiznet_SPI_settings>
    b694:	90 91 ce 0d 	lds	r25, 0x0DCE	; 0x800dce <wiznet_SPI_settings+0x1>
    b698:	0e 94 ee 5a 	call	0xb5dc	; 0xb5dc <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:106
    setSS();  
    b69c:	0e 94 e1 5a 	call	0xb5c2	; 0xb5c2 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:107
    SPI.transfer(_addr >> 8);
    b6a0:	80 e0       	ldi	r24, 0x00	; 0
    b6a2:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:108
    SPI.transfer(_addr & 0xFF);
    b6a6:	81 2f       	mov	r24, r17
    b6a8:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:109
    SPI.transfer(_cb);
    b6ac:	8d 2f       	mov	r24, r29
    b6ae:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:110
    SPI.transfer(_data);
    b6b2:	8c 2f       	mov	r24, r28
    b6b4:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:111
    resetSS();
    b6b8:	0e 94 dc 5a 	call	0xb5b8	; 0xb5b8 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:115
    SPI.endTransaction();

    return 1;
}
    b6bc:	81 e0       	ldi	r24, 0x01	; 1
    b6be:	df 91       	pop	r29
    b6c0:	cf 91       	pop	r28
    b6c2:	1f 91       	pop	r17
    b6c4:	08 95       	ret

0000b6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:352
uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
}

uint8_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
    b6c6:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:353
    uint8_t cntl_byte = (_s<<5)+0x0C;
    b6c8:	82 95       	swap	r24
    b6ca:	88 0f       	add	r24, r24
    b6cc:	80 7e       	andi	r24, 0xE0	; 224
    b6ce:	6c e0       	ldi	r22, 0x0C	; 12
    b6d0:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:354
    return write(_addr, cntl_byte, _data);
    b6d2:	c9 01       	movw	r24, r18
    b6d4:	0c 94 42 5b 	jmp	0xb684	; 0xb684 <W5500Class::write(unsigned int, unsigned char, unsigned char)>

0000b6d8 <close(unsigned char)>:
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:43

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
    b6d8:	cf 93       	push	r28
    b6da:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:44
  w5500.execCmdSn(s, Sock_CLOSE);
    b6dc:	60 e1       	ldi	r22, 0x10	; 16
    b6de:	70 e0       	ldi	r23, 0x00	; 0
    b6e0:	0e 94 15 b4 	call	0x1682a	; 0x1682a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.82]>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    b6e4:	4f ef       	ldi	r20, 0xFF	; 255
    b6e6:	62 e0       	ldi	r22, 0x02	; 2
    b6e8:	70 e0       	ldi	r23, 0x00	; 0
    b6ea:	8c 2f       	mov	r24, r28
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:46
  w5500.writeSnIR(s, 0xFF);
}
    b6ec:	cf 91       	pop	r28
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
    b6ee:	0c 94 63 5b 	jmp	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0000b6f2 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    b6f2:	cf 93       	push	r28
    b6f4:	df 93       	push	r29
    b6f6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
    b6f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    b6fa:	88 30       	cpi	r24, 0x08	; 8
    b6fc:	61 f0       	breq	.+24     	; 0xb716 <EthernetUDP::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
    b6fe:	0e 94 6c 5b 	call	0xb6d8	; 0xb6d8 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:79

  EthernetClass::_server_port[_sock] = 0;
    b702:	ec 85       	ldd	r30, Y+12	; 0x0c
    b704:	f0 e0       	ldi	r31, 0x00	; 0
    b706:	ee 0f       	add	r30, r30
    b708:	ff 1f       	adc	r31, r31
    b70a:	e8 5b       	subi	r30, 0xB8	; 184
    b70c:	f4 4f       	sbci	r31, 0xF4	; 244
    b70e:	11 82       	std	Z+1, r1	; 0x01
    b710:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80
  _sock = MAX_SOCK_NUM;
    b712:	88 e0       	ldi	r24, 0x08	; 8
    b714:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
    b716:	df 91       	pop	r29
    b718:	cf 91       	pop	r28
    b71a:	08 95       	ret

0000b71c <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:100
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
    b71c:	1f 93       	push	r17
    b71e:	cf 93       	push	r28
    b720:	df 93       	push	r29
    b722:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  _offset = 0;
    b724:	dc 01       	movw	r26, r24
    b726:	58 96       	adiw	r26, 0x18	; 24
    b728:	1c 92       	st	X, r1
    b72a:	1e 92       	st	-X, r1
    b72c:	57 97       	sbiw	r26, 0x17	; 23
startUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  return ret;
}

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
  if
    b72e:	22 81       	ldd	r18, Z+2	; 0x02
    b730:	21 11       	cpse	r18, r1
    b732:	09 c0       	rjmp	.+18     	; 0xb746 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    b734:	23 81       	ldd	r18, Z+3	; 0x03
    b736:	21 11       	cpse	r18, r1
    b738:	06 c0       	rjmp	.+12     	; 0xb746 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
    b73a:	24 81       	ldd	r18, Z+4	; 0x04
    b73c:	21 11       	cpse	r18, r1
    b73e:	03 c0       	rjmp	.+6      	; 0xb746 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
    b740:	25 81       	ldd	r18, Z+5	; 0x05
    b742:	22 23       	and	r18, r18
    b744:	39 f1       	breq	.+78     	; 0xb794 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
    b746:	41 15       	cp	r20, r1
    b748:	51 05       	cpc	r21, r1
    b74a:	21 f1       	breq	.+72     	; 0xb794 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
    b74c:	ea 01       	movw	r28, r20
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
    b74e:	dc 01       	movw	r26, r24
    b750:	1c 96       	adiw	r26, 0x0c	; 12
    b752:	1c 91       	ld	r17, X
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    b754:	af 01       	movw	r20, r30
    b756:	4e 5f       	subi	r20, 0xFE	; 254
    b758:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
    b75a:	61 2f       	mov	r22, r17
    b75c:	62 95       	swap	r22
    b75e:	66 0f       	add	r22, r22
    b760:	60 7e       	andi	r22, 0xE0	; 224
    b762:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
    b764:	24 e0       	ldi	r18, 0x04	; 4
    b766:	30 e0       	ldi	r19, 0x00	; 0
    b768:	8c e0       	ldi	r24, 0x0C	; 12
    b76a:	90 e0       	ldi	r25, 0x00	; 0
    b76c:	0e 94 10 5b 	call	0xb620	; 0xb620 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
    b770:	4d 2f       	mov	r20, r29
    b772:	60 e1       	ldi	r22, 0x10	; 16
    b774:	70 e0       	ldi	r23, 0x00	; 0
    b776:	81 2f       	mov	r24, r17
    b778:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    b77c:	4c 2f       	mov	r20, r28
    b77e:	61 e1       	ldi	r22, 0x11	; 17
    b780:	70 e0       	ldi	r23, 0x00	; 0
    b782:	81 2f       	mov	r24, r17
    b784:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    b788:	81 e0       	ldi	r24, 0x01	; 1
    b78a:	90 e0       	ldi	r25, 0x00	; 0
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:103
}
    b78c:	df 91       	pop	r29
    b78e:	cf 91       	pop	r28
    b790:	1f 91       	pop	r17
    b792:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
     ((port == 0x00))
    ) 
  {
    return 0;
    b794:	90 e0       	ldi	r25, 0x00	; 0
    b796:	80 e0       	ldi	r24, 0x00	; 0
    b798:	f9 cf       	rjmp	.-14     	; 0xb78c <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x70>

0000b79a <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:347
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    b79a:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
    uint8_t cntl_byte = (_s<<5)+0x08;
    b79c:	82 95       	swap	r24
    b79e:	88 0f       	add	r24, r24
    b7a0:	80 7e       	andi	r24, 0xE0	; 224
    b7a2:	68 e0       	ldi	r22, 0x08	; 8
    b7a4:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
    b7a6:	c9 01       	movw	r24, r18
    b7a8:	0c 94 f1 5a 	jmp	0xb5e2	; 0xb5e2 <W5500Class::read(unsigned int, unsigned char)>

0000b7ac <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:320
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    b7ac:	1f 93       	push	r17
    b7ae:	cf 93       	push	r28
    b7b0:	df 93       	push	r29
    b7b2:	18 2f       	mov	r17, r24
    b7b4:	66 e2       	ldi	r22, 0x26	; 38
    b7b6:	70 e0       	ldi	r23, 0x00	; 0
    b7b8:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
    b7bc:	c8 2f       	mov	r28, r24
    b7be:	d0 e0       	ldi	r29, 0x00	; 0
    b7c0:	dc 2f       	mov	r29, r28
    b7c2:	cc 27       	eor	r28, r28
    b7c4:	67 e2       	ldi	r22, 0x27	; 39
    b7c6:	70 e0       	ldi	r23, 0x00	; 0
    b7c8:	81 2f       	mov	r24, r17
    b7ca:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
    b7ce:	8c 0f       	add	r24, r28
    b7d0:	9d 2f       	mov	r25, r29
    b7d2:	91 1d       	adc	r25, r1
    b7d4:	df 91       	pop	r29
    b7d6:	cf 91       	pop	r28
    b7d8:	1f 91       	pop	r17
    b7da:	08 95       	ret

0000b7dc <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:317
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    b7dc:	1f 93       	push	r17
    b7de:	cf 93       	push	r28
    b7e0:	df 93       	push	r29
    b7e2:	18 2f       	mov	r17, r24
    b7e4:	60 e2       	ldi	r22, 0x20	; 32
    b7e6:	70 e0       	ldi	r23, 0x00	; 0
    b7e8:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
    b7ec:	c8 2f       	mov	r28, r24
    b7ee:	d0 e0       	ldi	r29, 0x00	; 0
    b7f0:	dc 2f       	mov	r29, r28
    b7f2:	cc 27       	eor	r28, r28
    b7f4:	61 e2       	ldi	r22, 0x21	; 33
    b7f6:	70 e0       	ldi	r23, 0x00	; 0
    b7f8:	81 2f       	mov	r24, r17
    b7fa:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
    b7fe:	8c 0f       	add	r24, r28
    b800:	9d 2f       	mov	r25, r29
    b802:	91 1d       	adc	r25, r1
    b804:	df 91       	pop	r29
    b806:	cf 91       	pop	r28
    b808:	1f 91       	pop	r17
    b80a:	08 95       	ret

0000b80c <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    b80c:	fc 01       	movw	r30, r24
    b80e:	84 85       	ldd	r24, Z+12	; 0x0c
    b810:	88 30       	cpi	r24, 0x08	; 8
    b812:	21 f0       	breq	.+8      	; 0xb81c <EthernetClient::status()+0x10>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    b814:	63 e0       	ldi	r22, 0x03	; 3
    b816:	70 e0       	ldi	r23, 0x00	; 0
    b818:	0c 94 cd 5b 	jmp	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
    b81c:	80 e0       	ldi	r24, 0x00	; 0
    b81e:	08 95       	ret

0000b820 <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    b820:	cf 93       	push	r28
    b822:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
    b824:	fc 01       	movw	r30, r24
    b826:	24 85       	ldd	r18, Z+12	; 0x0c
    b828:	28 30       	cpi	r18, 0x08	; 8
    b82a:	d9 f0       	breq	.+54     	; 0xb862 <EthernetClient::connected()+0x42>
    b82c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
    b82e:	0e 94 06 5c 	call	0xb80c	; 0xb80c <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    b832:	84 31       	cpi	r24, 0x14	; 20
    b834:	89 f0       	breq	.+34     	; 0xb858 <EthernetClient::connected()+0x38>
    b836:	88 23       	and	r24, r24
    b838:	79 f0       	breq	.+30     	; 0xb858 <EthernetClient::connected()+0x38>
    b83a:	88 31       	cpi	r24, 0x18	; 24
    b83c:	69 f0       	breq	.+26     	; 0xb858 <EthernetClient::connected()+0x38>
    b83e:	21 e0       	ldi	r18, 0x01	; 1
    b840:	8c 31       	cpi	r24, 0x1C	; 28
    b842:	59 f4       	brne	.+22     	; 0xb85a <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
    b844:	e8 81       	ld	r30, Y
    b846:	f9 81       	ldd	r31, Y+1	; 0x01
    b848:	00 84       	ldd	r0, Z+8	; 0x08
    b84a:	f1 85       	ldd	r31, Z+9	; 0x09
    b84c:	e0 2d       	mov	r30, r0
    b84e:	ce 01       	movw	r24, r28
    b850:	19 95       	eicall
    b852:	21 e0       	ldi	r18, 0x01	; 1
    b854:	89 2b       	or	r24, r25
    b856:	09 f4       	brne	.+2      	; 0xb85a <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    b858:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
    b85a:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
    b85c:	df 91       	pop	r29
    b85e:	cf 91       	pop	r28
    b860:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    b862:	80 e0       	ldi	r24, 0x00	; 0
    b864:	fb cf       	rjmp	.-10     	; 0xb85c <EthernetClient::connected()+0x3c>

0000b866 <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    b866:	cf 92       	push	r12
    b868:	df 92       	push	r13
    b86a:	ef 92       	push	r14
    b86c:	ff 92       	push	r15
    b86e:	cf 93       	push	r28
    b870:	df 93       	push	r29
    b872:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
    b874:	8c 85       	ldd	r24, Y+12	; 0x0c
    b876:	88 30       	cpi	r24, 0x08	; 8
    b878:	89 f1       	breq	.+98     	; 0xb8dc <EthernetClient::stop()+0x76>
disconnect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:94
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
  w5500.execCmdSn(s, Sock_DISCON);
    b87a:	68 e0       	ldi	r22, 0x08	; 8
    b87c:	70 e0       	ldi	r23, 0x00	; 0
    b87e:	0e 94 15 b4 	call	0x1682a	; 0x1682a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.82]>
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();
    b882:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
    b886:	6b 01       	movw	r12, r22
    b888:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    b88a:	ce 01       	movw	r24, r28
    b88c:	0e 94 06 5c 	call	0xb80c	; 0xb80c <EthernetClient::status()>
    b890:	88 23       	and	r24, r24
    b892:	91 f0       	breq	.+36     	; 0xb8b8 <EthernetClient::stop()+0x52>
    b894:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
    b898:	6c 19       	sub	r22, r12
    b89a:	7d 09       	sbc	r23, r13
    b89c:	8e 09       	sbc	r24, r14
    b89e:	9f 09       	sbc	r25, r15
    b8a0:	68 3e       	cpi	r22, 0xE8	; 232
    b8a2:	73 40       	sbci	r23, 0x03	; 3
    b8a4:	81 05       	cpc	r24, r1
    b8a6:	91 05       	cpc	r25, r1
    b8a8:	38 f4       	brcc	.+14     	; 0xb8b8 <EthernetClient::stop()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
    b8aa:	61 e0       	ldi	r22, 0x01	; 1
    b8ac:	70 e0       	ldi	r23, 0x00	; 0
    b8ae:	80 e0       	ldi	r24, 0x00	; 0
    b8b0:	90 e0       	ldi	r25, 0x00	; 0
    b8b2:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
    b8b6:	e9 cf       	rjmp	.-46     	; 0xb88a <EthernetClient::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    b8b8:	ce 01       	movw	r24, r28
    b8ba:	0e 94 06 5c 	call	0xb80c	; 0xb80c <EthernetClient::status()>
    b8be:	88 23       	and	r24, r24
    b8c0:	19 f0       	breq	.+6      	; 0xb8c8 <EthernetClient::stop()+0x62>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
    b8c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    b8c4:	0e 94 6c 5b 	call	0xb6d8	; 0xb6d8 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:142

  EthernetClass::_server_port[_sock] = 0;
    b8c8:	ec 85       	ldd	r30, Y+12	; 0x0c
    b8ca:	f0 e0       	ldi	r31, 0x00	; 0
    b8cc:	ee 0f       	add	r30, r30
    b8ce:	ff 1f       	adc	r31, r31
    b8d0:	e8 5b       	subi	r30, 0xB8	; 184
    b8d2:	f4 4f       	sbci	r31, 0xF4	; 244
    b8d4:	11 82       	std	Z+1, r1	; 0x01
    b8d6:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143
  _sock = MAX_SOCK_NUM;
    b8d8:	88 e0       	ldi	r24, 0x08	; 8
    b8da:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
    b8dc:	df 91       	pop	r29
    b8de:	cf 91       	pop	r28
    b8e0:	ff 90       	pop	r15
    b8e2:	ef 90       	pop	r14
    b8e4:	df 90       	pop	r13
    b8e6:	cf 90       	pop	r12
    b8e8:	08 95       	ret

0000b8ea <EthernetServer::accept()>:
_ZN14EthernetServer6acceptEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:30
    }
  }  
}

void EthernetServer::accept()
{
    b8ea:	4f 92       	push	r4
    b8ec:	5f 92       	push	r5
    b8ee:	6f 92       	push	r6
    b8f0:	7f 92       	push	r7
    b8f2:	8f 92       	push	r8
    b8f4:	9f 92       	push	r9
    b8f6:	af 92       	push	r10
    b8f8:	bf 92       	push	r11
    b8fa:	cf 92       	push	r12
    b8fc:	df 92       	push	r13
    b8fe:	ef 92       	push	r14
    b900:	ff 92       	push	r15
    b902:	1f 93       	push	r17
    b904:	cf 93       	push	r28
    b906:	df 93       	push	r29
    b908:	cd b7       	in	r28, 0x3d	; 61
    b90a:	de b7       	in	r29, 0x3e	; 62
    b90c:	2d 97       	sbiw	r28, 0x0d	; 13
    b90e:	0f b6       	in	r0, 0x3f	; 63
    b910:	f8 94       	cli
    b912:	de bf       	out	0x3e, r29	; 62
    b914:	0f be       	out	0x3f, r0	; 63
    b916:	cd bf       	out	0x3d, r28	; 61
    b918:	7c 01       	movw	r14, r24
    b91a:	98 e4       	ldi	r25, 0x48	; 72
    b91c:	a9 2e       	mov	r10, r25
    b91e:	9b e0       	ldi	r25, 0x0B	; 11
    b920:	b9 2e       	mov	r11, r25
    b922:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:31
  int listening = 0;
    b924:	d1 2c       	mov	r13, r1
    b926:	c1 2c       	mov	r12, r1
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    b928:	28 ee       	ldi	r18, 0xE8	; 232
    b92a:	42 2e       	mov	r4, r18
    b92c:	23 e0       	ldi	r18, 0x03	; 3
    b92e:	52 2e       	mov	r5, r18
    b930:	61 2c       	mov	r6, r1
    b932:	71 2c       	mov	r7, r1
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    b934:	30 ed       	ldi	r19, 0xD0	; 208
    b936:	83 2e       	mov	r8, r19
    b938:	32 e0       	ldi	r19, 0x02	; 2
    b93a:	93 2e       	mov	r9, r19
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    b93c:	1c 82       	std	Y+4, r1	; 0x04
    b93e:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
    b940:	4d 82       	std	Y+5, r4	; 0x05
    b942:	5e 82       	std	Y+6, r5	; 0x06
    b944:	6f 82       	std	Y+7, r6	; 0x07
    b946:	78 86       	std	Y+8, r7	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
    b948:	9a 82       	std	Y+2, r9	; 0x02
    b94a:	89 82       	std	Y+1, r8	; 0x01
    b94c:	1d 87       	std	Y+13, r17	; 0x0d
_ZN14EthernetServer6acceptEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:36

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port) {
    b94e:	d5 01       	movw	r26, r10
    b950:	2d 91       	ld	r18, X+
    b952:	3d 91       	ld	r19, X+
    b954:	5d 01       	movw	r10, r26
    b956:	f7 01       	movw	r30, r14
    b958:	84 81       	ldd	r24, Z+4	; 0x04
    b95a:	95 81       	ldd	r25, Z+5	; 0x05
    b95c:	28 17       	cp	r18, r24
    b95e:	39 07       	cpc	r19, r25
    b960:	b1 f4       	brne	.+44     	; 0xb98e <EthernetServer::accept()+0xa4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:37
      if (client.status() == SnSR::LISTEN) {
    b962:	ce 01       	movw	r24, r28
    b964:	01 96       	adiw	r24, 0x01	; 1
    b966:	0e 94 06 5c 	call	0xb80c	; 0xb80c <EthernetClient::status()>
    b96a:	84 31       	cpi	r24, 0x14	; 20
    b96c:	99 f1       	breq	.+102    	; 0xb9d4 <EthernetServer::accept()+0xea>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:40
        listening = 1;
      } 
      else if (client.status() == SnSR::CLOSE_WAIT && !client.available()) {
    b96e:	ce 01       	movw	r24, r28
    b970:	01 96       	adiw	r24, 0x01	; 1
    b972:	0e 94 06 5c 	call	0xb80c	; 0xb80c <EthernetClient::status()>
    b976:	8c 31       	cpi	r24, 0x1C	; 28
    b978:	51 f4       	brne	.+20     	; 0xb98e <EthernetServer::accept()+0xa4>
    b97a:	ce 01       	movw	r24, r28
    b97c:	01 96       	adiw	r24, 0x01	; 1
    b97e:	0e 94 4f 3f 	call	0x7e9e	; 0x7e9e <EthernetClient::available()>
    b982:	89 2b       	or	r24, r25
    b984:	21 f4       	brne	.+8      	; 0xb98e <EthernetServer::accept()+0xa4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:41
        client.stop();
    b986:	ce 01       	movw	r24, r28
    b988:	01 96       	adiw	r24, 0x01	; 1
    b98a:	0e 94 33 5c 	call	0xb866	; 0xb866 <EthernetClient::stop()>
    b98e:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:33

void EthernetServer::accept()
{
  int listening = 0;

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    b990:	18 30       	cpi	r17, 0x08	; 8
    b992:	a1 f6       	brne	.-88     	; 0xb93c <EthernetServer::accept()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:46
        client.stop();
      }
    } 
  }

  if (!listening) {
    b994:	cd 28       	or	r12, r13
    b996:	41 f4       	brne	.+16     	; 0xb9a8 <EthernetServer::accept()+0xbe>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:47
    begin();
    b998:	d7 01       	movw	r26, r14
    b99a:	ed 91       	ld	r30, X+
    b99c:	fc 91       	ld	r31, X
    b99e:	00 84       	ldd	r0, Z+8	; 0x08
    b9a0:	f1 85       	ldd	r31, Z+9	; 0x09
    b9a2:	e0 2d       	mov	r30, r0
    b9a4:	c7 01       	movw	r24, r14
    b9a6:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:49
  }
}
    b9a8:	2d 96       	adiw	r28, 0x0d	; 13
    b9aa:	0f b6       	in	r0, 0x3f	; 63
    b9ac:	f8 94       	cli
    b9ae:	de bf       	out	0x3e, r29	; 62
    b9b0:	0f be       	out	0x3f, r0	; 63
    b9b2:	cd bf       	out	0x3d, r28	; 61
    b9b4:	df 91       	pop	r29
    b9b6:	cf 91       	pop	r28
    b9b8:	1f 91       	pop	r17
    b9ba:	ff 90       	pop	r15
    b9bc:	ef 90       	pop	r14
    b9be:	df 90       	pop	r13
    b9c0:	cf 90       	pop	r12
    b9c2:	bf 90       	pop	r11
    b9c4:	af 90       	pop	r10
    b9c6:	9f 90       	pop	r9
    b9c8:	8f 90       	pop	r8
    b9ca:	7f 90       	pop	r7
    b9cc:	6f 90       	pop	r6
    b9ce:	5f 90       	pop	r5
    b9d0:	4f 90       	pop	r4
    b9d2:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:38
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port) {
      if (client.status() == SnSR::LISTEN) {
        listening = 1;
    b9d4:	cc 24       	eor	r12, r12
    b9d6:	c3 94       	inc	r12
    b9d8:	d1 2c       	mov	r13, r1
    b9da:	d9 cf       	rjmp	.-78     	; 0xb98e <EthernetServer::accept()+0xa4>

0000b9dc <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:153
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
    b9dc:	cf 92       	push	r12
    b9de:	df 92       	push	r13
    b9e0:	ef 92       	push	r14
    b9e2:	ff 92       	push	r15
    b9e4:	1f 93       	push	r17
    b9e6:	cf 93       	push	r28
    b9e8:	df 93       	push	r29
    b9ea:	18 2f       	mov	r17, r24
    b9ec:	6b 01       	movw	r12, r22
    b9ee:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:155
  // Check how much data is available
  int16_t ret = w5500.getRXReceivedSize(s);
    b9f0:	0e 94 62 b7 	call	0x16ec4	; 0x16ec4 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>
    b9f4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:156
  if ( ret == 0 )
    b9f6:	00 97       	sbiw	r24, 0x00	; 0
    b9f8:	d9 f4       	brne	.+54     	; 0xba30 <recv(unsigned char, unsigned char*, int)+0x54>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
    b9fa:	63 e0       	ldi	r22, 0x03	; 3
    b9fc:	70 e0       	ldi	r23, 0x00	; 0
    b9fe:	81 2f       	mov	r24, r17
    ba00:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:160
  {
    // No data available.
    uint8_t status = w5500.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
    ba04:	84 31       	cpi	r24, 0x14	; 20
    ba06:	59 f0       	breq	.+22     	; 0xba1e <recv(unsigned char, unsigned char*, int)+0x42>
    ba08:	88 23       	and	r24, r24
    ba0a:	49 f0       	breq	.+18     	; 0xba1e <recv(unsigned char, unsigned char*, int)+0x42>
    ba0c:	c1 e0       	ldi	r28, 0x01	; 1
    ba0e:	d0 e0       	ldi	r29, 0x00	; 0
    ba10:	8c 31       	cpi	r24, 0x1C	; 28
    ba12:	11 f4       	brne	.+4      	; 0xba18 <recv(unsigned char, unsigned char*, int)+0x3c>
    ba14:	d0 e0       	ldi	r29, 0x00	; 0
    ba16:	c0 e0       	ldi	r28, 0x00	; 0
    ba18:	d1 95       	neg	r29
    ba1a:	c1 95       	neg	r28
    ba1c:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:182
  {
    w5500.recv_data_processing(s, buf, ret);
    w5500.execCmdSn(s, Sock_RECV);
  }
  return ret;
}
    ba1e:	ce 01       	movw	r24, r28
    ba20:	df 91       	pop	r29
    ba22:	cf 91       	pop	r28
    ba24:	1f 91       	pop	r17
    ba26:	ff 90       	pop	r15
    ba28:	ef 90       	pop	r14
    ba2a:	df 90       	pop	r13
    ba2c:	cf 90       	pop	r12
    ba2e:	08 95       	ret
    ba30:	e8 16       	cp	r14, r24
    ba32:	f9 06       	cpc	r15, r25
    ba34:	0c f4       	brge	.+2      	; 0xba38 <recv(unsigned char, unsigned char*, int)+0x5c>
    ba36:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:176
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
    ba38:	1c 16       	cp	r1, r28
    ba3a:	1d 06       	cpc	r1, r29
    ba3c:	84 f7       	brge	.-32     	; 0xba1e <recv(unsigned char, unsigned char*, int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:178
  {
    w5500.recv_data_processing(s, buf, ret);
    ba3e:	20 e0       	ldi	r18, 0x00	; 0
    ba40:	ae 01       	movw	r20, r28
    ba42:	b6 01       	movw	r22, r12
    ba44:	81 2f       	mov	r24, r17
    ba46:	0e 94 fa b6 	call	0x16df4	; 0x16df4 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:179
    w5500.execCmdSn(s, Sock_RECV);
    ba4a:	60 e4       	ldi	r22, 0x40	; 64
    ba4c:	70 e0       	ldi	r23, 0x00	; 0
    ba4e:	81 2f       	mov	r24, r17
    ba50:	0e 94 15 b4 	call	0x1682a	; 0x1682a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.82]>
    ba54:	e4 cf       	rjmp	.-56     	; 0xba1e <recv(unsigned char, unsigned char*, int)+0x42>

0000ba56 <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    ba56:	cf 93       	push	r28
    ba58:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
    ba5a:	fc 01       	movw	r30, r24
    ba5c:	21 8d       	ldd	r18, Z+25	; 0x19
    ba5e:	32 8d       	ldd	r19, Z+26	; 0x1a
    ba60:	21 15       	cp	r18, r1
    ba62:	31 05       	cpc	r19, r1
    ba64:	29 f4       	brne	.+10     	; 0xba70 <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    ba66:	8f ef       	ldi	r24, 0xFF	; 255
    ba68:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
    ba6a:	df 91       	pop	r29
    ba6c:	cf 91       	pop	r28
    ba6e:	08 95       	ret
    ba70:	ec 01       	movw	r28, r24
    ba72:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    ba74:	42 17       	cp	r20, r18
    ba76:	53 07       	cpc	r21, r19
    ba78:	08 f0       	brcs	.+2      	; 0xba7c <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    ba7a:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    ba7c:	0e 94 ee 5c 	call	0xb9dc	; 0xb9dc <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
    ba80:	18 16       	cp	r1, r24
    ba82:	19 06       	cpc	r1, r25
    ba84:	84 f7       	brge	.-32     	; 0xba66 <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
    ba86:	29 8d       	ldd	r18, Y+25	; 0x19
    ba88:	3a 8d       	ldd	r19, Y+26	; 0x1a
    ba8a:	28 1b       	sub	r18, r24
    ba8c:	39 0b       	sbc	r19, r25
    ba8e:	3a 8f       	std	Y+26, r19	; 0x1a
    ba90:	29 8f       	std	Y+25, r18	; 0x19
    ba92:	eb cf       	rjmp	.-42     	; 0xba6a <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

0000ba94 <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    ba94:	0f 93       	push	r16
    ba96:	1f 93       	push	r17
    ba98:	cf 93       	push	r28
    ba9a:	df 93       	push	r29
    ba9c:	1f 92       	push	r1
    ba9e:	cd b7       	in	r28, 0x3d	; 61
    baa0:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    baa2:	fc 01       	movw	r30, r24
    baa4:	21 8d       	ldd	r18, Z+25	; 0x19
    baa6:	32 8d       	ldd	r19, Z+26	; 0x1a
    baa8:	23 2b       	or	r18, r19
    baaa:	41 f4       	brne	.+16     	; 0xbabc <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    baac:	8f ef       	ldi	r24, 0xFF	; 255
    baae:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
    bab0:	0f 90       	pop	r0
    bab2:	df 91       	pop	r29
    bab4:	cf 91       	pop	r28
    bab6:	1f 91       	pop	r17
    bab8:	0f 91       	pop	r16
    baba:	08 95       	ret
    babc:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    babe:	41 e0       	ldi	r20, 0x01	; 1
    bac0:	50 e0       	ldi	r21, 0x00	; 0
    bac2:	be 01       	movw	r22, r28
    bac4:	6f 5f       	subi	r22, 0xFF	; 255
    bac6:	7f 4f       	sbci	r23, 0xFF	; 255
    bac8:	fc 01       	movw	r30, r24
    baca:	84 85       	ldd	r24, Z+12	; 0x0c
    bacc:	0e 94 ee 5c 	call	0xb9dc	; 0xb9dc <recv(unsigned char, unsigned char*, int)>
    bad0:	18 16       	cp	r1, r24
    bad2:	19 06       	cpc	r1, r25
    bad4:	5c f7       	brge	.-42     	; 0xbaac <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
    bad6:	f8 01       	movw	r30, r16
    bad8:	81 8d       	ldd	r24, Z+25	; 0x19
    bada:	92 8d       	ldd	r25, Z+26	; 0x1a
    badc:	01 97       	sbiw	r24, 0x01	; 1
    bade:	92 8f       	std	Z+26, r25	; 0x1a
    bae0:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
    bae2:	89 81       	ldd	r24, Y+1	; 0x01
    bae4:	90 e0       	ldi	r25, 0x00	; 0
    bae6:	e4 cf       	rjmp	.-56     	; 0xbab0 <EthernetUDP::read()+0x1c>

0000bae8 <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    bae8:	0f 93       	push	r16
    baea:	1f 93       	push	r17
    baec:	cf 93       	push	r28
    baee:	df 93       	push	r29
    baf0:	00 d0       	rcall	.+0      	; 0xbaf2 <EthernetUDP::parsePacket()+0xa>
    baf2:	00 d0       	rcall	.+0      	; 0xbaf4 <EthernetUDP::parsePacket()+0xc>
    baf4:	1f 92       	push	r1
    baf6:	1f 92       	push	r1
    baf8:	cd b7       	in	r28, 0x3d	; 61
    bafa:	de b7       	in	r29, 0x3e	; 62
    bafc:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
    bafe:	dc 01       	movw	r26, r24
    bb00:	ed 91       	ld	r30, X+
    bb02:	fc 91       	ld	r31, X
    bb04:	06 80       	ldd	r0, Z+6	; 0x06
    bb06:	f7 81       	ldd	r31, Z+7	; 0x07
    bb08:	e0 2d       	mov	r30, r0
    bb0a:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
    bb0c:	f8 01       	movw	r30, r16
    bb0e:	84 85       	ldd	r24, Z+12	; 0x0c
    bb10:	0e 94 62 b7 	call	0x16ec4	; 0x16ec4 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>
    bb14:	89 2b       	or	r24, r25
    bb16:	b1 f1       	breq	.+108    	; 0xbb84 <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    bb18:	48 e0       	ldi	r20, 0x08	; 8
    bb1a:	50 e0       	ldi	r21, 0x00	; 0
    bb1c:	be 01       	movw	r22, r28
    bb1e:	6f 5f       	subi	r22, 0xFF	; 255
    bb20:	7f 4f       	sbci	r23, 0xFF	; 255
    bb22:	d8 01       	movw	r26, r16
    bb24:	1c 96       	adiw	r26, 0x0c	; 12
    bb26:	8c 91       	ld	r24, X
    bb28:	0e 94 ee 5c 	call	0xb9dc	; 0xb9dc <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
    bb2c:	18 16       	cp	r1, r24
    bb2e:	19 06       	cpc	r1, r25
    bb30:	f4 f4       	brge	.+60     	; 0xbb6e <EthernetUDP::parsePacket()+0x86>
operator=():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:88
    return true;
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    bb32:	d8 01       	movw	r26, r16
    bb34:	51 96       	adiw	r26, 0x11	; 17
    bb36:	84 e0       	ldi	r24, 0x04	; 4
    bb38:	fe 01       	movw	r30, r28
    bb3a:	31 96       	adiw	r30, 0x01	; 1
    bb3c:	01 90       	ld	r0, Z+
    bb3e:	0d 92       	st	X+, r0
    bb40:	8a 95       	dec	r24
    bb42:	e1 f7       	brne	.-8      	; 0xbb3c <EthernetUDP::parsePacket()+0x54>
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
    {
      _remoteIP = tmpBuf;
      _remotePort = tmpBuf[4];
    bb44:	8d 81       	ldd	r24, Y+5	; 0x05
    bb46:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    bb48:	98 2f       	mov	r25, r24
    bb4a:	88 27       	eor	r24, r24
    bb4c:	2e 81       	ldd	r18, Y+6	; 0x06
    bb4e:	82 0f       	add	r24, r18
    bb50:	91 1d       	adc	r25, r1
    bb52:	f8 01       	movw	r30, r16
    bb54:	96 8b       	std	Z+22, r25	; 0x16
    bb56:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
    bb58:	8f 81       	ldd	r24, Y+7	; 0x07
    bb5a:	28 2f       	mov	r18, r24
    bb5c:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
    bb5e:	32 2f       	mov	r19, r18
    bb60:	22 27       	eor	r18, r18
    bb62:	88 85       	ldd	r24, Y+8	; 0x08
    bb64:	82 0f       	add	r24, r18
    bb66:	93 2f       	mov	r25, r19
    bb68:	91 1d       	adc	r25, r1
    bb6a:	92 8f       	std	Z+26, r25	; 0x1a
    bb6c:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
    bb6e:	28 96       	adiw	r28, 0x08	; 8
    bb70:	0f b6       	in	r0, 0x3f	; 63
    bb72:	f8 94       	cli
    bb74:	de bf       	out	0x3e, r29	; 62
    bb76:	0f be       	out	0x3f, r0	; 63
    bb78:	cd bf       	out	0x3d, r28	; 61
    bb7a:	df 91       	pop	r29
    bb7c:	cf 91       	pop	r28
    bb7e:	1f 91       	pop	r17
    bb80:	0f 91       	pop	r16
    bb82:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    bb84:	90 e0       	ldi	r25, 0x00	; 0
    bb86:	80 e0       	ldi	r24, 0x00	; 0
    bb88:	f2 cf       	rjmp	.-28     	; 0xbb6e <EthernetUDP::parsePacket()+0x86>

0000bb8a <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
    return -1;
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    bb8a:	fc 01       	movw	r30, r24
    bb8c:	84 85       	ldd	r24, Z+12	; 0x0c
    bb8e:	0c 94 ee 5c 	jmp	0xb9dc	; 0xb9dc <recv(unsigned char, unsigned char*, int)>

0000bb92 <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95
  if (_sock != MAX_SOCK_NUM)
    return w5500.getRXReceivedSize(_sock);
  return 0;
}

int EthernetClient::read() {
    bb92:	cf 93       	push	r28
    bb94:	df 93       	push	r29
    bb96:	1f 92       	push	r1
    bb98:	cd b7       	in	r28, 0x3d	; 61
    bb9a:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    bb9c:	41 e0       	ldi	r20, 0x01	; 1
    bb9e:	50 e0       	ldi	r21, 0x00	; 0
    bba0:	be 01       	movw	r22, r28
    bba2:	6f 5f       	subi	r22, 0xFF	; 255
    bba4:	7f 4f       	sbci	r23, 0xFF	; 255
    bba6:	fc 01       	movw	r30, r24
    bba8:	84 85       	ldd	r24, Z+12	; 0x0c
    bbaa:	0e 94 ee 5c 	call	0xb9dc	; 0xb9dc <recv(unsigned char, unsigned char*, int)>
    bbae:	18 16       	cp	r1, r24
    bbb0:	19 06       	cpc	r1, r25
    bbb2:	34 f4       	brge	.+12     	; 0xbbc0 <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
    bbb4:	89 81       	ldd	r24, Y+1	; 0x01
    bbb6:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
    bbb8:	0f 90       	pop	r0
    bbba:	df 91       	pop	r29
    bbbc:	cf 91       	pop	r28
    bbbe:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
    bbc0:	8f ef       	ldi	r24, 0xFF	; 255
    bbc2:	9f ef       	ldi	r25, 0xFF	; 255
    bbc4:	f9 cf       	rjmp	.-14     	; 0xbbb8 <EthernetClient::read()+0x26>

0000bbc6 <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:106
  _offset = 0;
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
    bbc6:	cf 93       	push	r28
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
  return sendUDP(_sock);
    bbc8:	fc 01       	movw	r30, r24
    bbca:	c4 85       	ldd	r28, Z+12	; 0x0c
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  }
}

int sendUDP(SOCKET s)
{
  w5500.execCmdSn(s, Sock_SEND);
    bbcc:	60 e2       	ldi	r22, 0x20	; 32
    bbce:	70 e0       	ldi	r23, 0x00	; 0
    bbd0:	8c 2f       	mov	r24, r28
    bbd2:	0e 94 15 b4 	call	0x1682a	; 0x1682a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.82]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    bbd6:	62 e0       	ldi	r22, 0x02	; 2
    bbd8:	70 e0       	ldi	r23, 0x00	; 0
    bbda:	8c 2f       	mov	r24, r28
    bbdc:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    bbe0:	84 fd       	sbrc	r24, 4
    bbe2:	11 c0       	rjmp	.+34     	; 0xbc06 <EthernetUDP::endPacket()+0x40>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
    bbe4:	62 e0       	ldi	r22, 0x02	; 2
    bbe6:	70 e0       	ldi	r23, 0x00	; 0
    bbe8:	8c 2f       	mov	r24, r28
    bbea:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    bbee:	83 ff       	sbrs	r24, 3
    bbf0:	f2 cf       	rjmp	.-28     	; 0xbbd6 <EthernetUDP::endPacket()+0x10>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
    bbf2:	48 e1       	ldi	r20, 0x18	; 24
    bbf4:	62 e0       	ldi	r22, 0x02	; 2
    bbf6:	70 e0       	ldi	r23, 0x00	; 0
    bbf8:	8c 2f       	mov	r24, r28
    bbfa:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
    bbfe:	90 e0       	ldi	r25, 0x00	; 0
    bc00:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:108
}
    bc02:	cf 91       	pop	r28
    bc04:	08 95       	ret
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
    bc06:	40 e1       	ldi	r20, 0x10	; 16
    bc08:	62 e0       	ldi	r22, 0x02	; 2
    bc0a:	70 e0       	ldi	r23, 0x00	; 0
    bc0c:	8c 2f       	mov	r24, r28
    bc0e:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
    bc12:	81 e0       	ldi	r24, 0x01	; 1
    bc14:	90 e0       	ldi	r25, 0x00	; 0
    bc16:	f5 cf       	rjmp	.-22     	; 0xbc02 <EthernetUDP::endPacket()+0x3c>

0000bc18 <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    bc18:	ef 92       	push	r14
    bc1a:	ff 92       	push	r15
    bc1c:	1f 93       	push	r17
    bc1e:	cf 93       	push	r28
    bc20:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
    bc22:	fc 01       	movw	r30, r24
    bc24:	24 85       	ldd	r18, Z+12	; 0x0c
    bc26:	28 30       	cpi	r18, 0x08	; 8
    bc28:	39 f0       	breq	.+14     	; 0xbc38 <EthernetUDP::begin(unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
    bc2a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
    bc2c:	df 91       	pop	r29
    bc2e:	cf 91       	pop	r28
    bc30:	1f 91       	pop	r17
    bc32:	ff 90       	pop	r15
    bc34:	ef 90       	pop	r14
    bc36:	08 95       	ret
    bc38:	7b 01       	movw	r14, r22
    bc3a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    bc3c:	10 e0       	ldi	r17, 0x00	; 0
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    bc3e:	63 e0       	ldi	r22, 0x03	; 3
    bc40:	70 e0       	ldi	r23, 0x00	; 0
    bc42:	81 2f       	mov	r24, r17
    bc44:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    bc48:	81 11       	cpse	r24, r1
    bc4a:	0e c0       	rjmp	.+28     	; 0xbc68 <EthernetUDP::begin(unsigned int)+0x50>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
    bc4c:	1c 87       	std	Y+12, r17	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    bc4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    bc50:	88 30       	cpi	r24, 0x08	; 8
    bc52:	59 f3       	breq	.-42     	; 0xbc2a <EthernetUDP::begin(unsigned int)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
    bc54:	fe 86       	std	Y+14, r15	; 0x0e
    bc56:	ed 86       	std	Y+13, r14	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
    bc58:	1a 8e       	std	Y+26, r1	; 0x1a
    bc5a:	19 8e       	std	Y+25, r1	; 0x19
socket():
    bc5c:	a7 01       	movw	r20, r14
    bc5e:	62 e0       	ldi	r22, 0x02	; 2
    bc60:	0e 94 25 b4 	call	0x1684a	; 0x1684a <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.81]>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
    bc64:	81 e0       	ldi	r24, 0x01	; 1
    bc66:	e2 cf       	rjmp	.-60     	; 0xbc2c <EthernetUDP::begin(unsigned int)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    bc68:	88 31       	cpi	r24, 0x18	; 24
    bc6a:	81 f3       	breq	.-32     	; 0xbc4c <EthernetUDP::begin(unsigned int)+0x34>
    bc6c:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    bc6e:	18 30       	cpi	r17, 0x08	; 8
    bc70:	31 f7       	brne	.-52     	; 0xbc3e <EthernetUDP::begin(unsigned int)+0x26>
    bc72:	ed cf       	rjmp	.-38     	; 0xbc4e <EthernetUDP::begin(unsigned int)+0x36>

0000bc74 <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    bc74:	4f 92       	push	r4
    bc76:	5f 92       	push	r5
    bc78:	6f 92       	push	r6
    bc7a:	7f 92       	push	r7
    bc7c:	8f 92       	push	r8
    bc7e:	9f 92       	push	r9
    bc80:	af 92       	push	r10
    bc82:	bf 92       	push	r11
    bc84:	cf 92       	push	r12
    bc86:	df 92       	push	r13
    bc88:	ef 92       	push	r14
    bc8a:	ff 92       	push	r15
    bc8c:	0f 93       	push	r16
    bc8e:	1f 93       	push	r17
    bc90:	cf 93       	push	r28
    bc92:	df 93       	push	r29
    bc94:	cd b7       	in	r28, 0x3d	; 61
    bc96:	de b7       	in	r29, 0x3e	; 62
    bc98:	63 97       	sbiw	r28, 0x13	; 19
    bc9a:	0f b6       	in	r0, 0x3f	; 63
    bc9c:	f8 94       	cli
    bc9e:	de bf       	out	0x3e, r29	; 62
    bca0:	0f be       	out	0x3f, r0	; 63
    bca2:	cd bf       	out	0x3d, r28	; 61
    bca4:	7c 01       	movw	r14, r24
    bca6:	6b 01       	movw	r12, r22
    bca8:	3a 01       	movw	r6, r20
    bcaa:	fb 01       	movw	r30, r22
    bcac:	db 01       	movw	r26, r22
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62

int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    bcae:	8d 91       	ld	r24, X+
    bcb0:	81 11       	cpse	r24, r1
    bcb2:	fd cf       	rjmp	.-6      	; 0xbcae <DNSClient::getHostByName(char const*, IPAddress&)+0x3a>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
    bcb4:	30 e0       	ldi	r19, 0x00	; 0
    bcb6:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
    bcb8:	90 e0       	ldi	r25, 0x00	; 0
    bcba:	80 e0       	ldi	r24, 0x00	; 0
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    bcbc:	5a e0       	ldi	r21, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    bcbe:	41 91       	ld	r20, Z+
    bcc0:	44 23       	and	r20, r20
    bcc2:	01 f1       	breq	.+64     	; 0xbd04 <DNSClient::getHostByName(char const*, IPAddress&)+0x90>
    bcc4:	84 30       	cpi	r24, 0x04	; 4
    bcc6:	91 05       	cpc	r25, r1
    bcc8:	0c f0       	brlt	.+2      	; 0xbccc <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
    bcca:	42 c0       	rjmp	.+132    	; 0xbd50 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
    bccc:	4e 32       	cpi	r20, 0x2E	; 46
    bcce:	69 f4       	brne	.+26     	; 0xbcea <DNSClient::getHostByName(char const*, IPAddress&)+0x76>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    bcd0:	2f 3f       	cpi	r18, 0xFF	; 255
    bcd2:	31 05       	cpc	r19, r1
    bcd4:	09 f0       	breq	.+2      	; 0xbcd8 <DNSClient::getHostByName(char const*, IPAddress&)+0x64>
    bcd6:	e4 f5       	brge	.+120    	; 0xbd50 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    bcd8:	d3 01       	movw	r26, r6
    bcda:	a8 0f       	add	r26, r24
    bcdc:	b9 1f       	adc	r27, r25
    bcde:	12 96       	adiw	r26, 0x02	; 2
    bce0:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
    bce2:	01 96       	adiw	r24, 0x01	; 1
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
    bce4:	30 e0       	ldi	r19, 0x00	; 0
    bce6:	20 e0       	ldi	r18, 0x00	; 0
    bce8:	ea cf       	rjmp	.-44     	; 0xbcbe <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    bcea:	52 9f       	mul	r21, r18
    bcec:	b0 01       	movw	r22, r0
    bcee:	53 9f       	mul	r21, r19
    bcf0:	70 0d       	add	r23, r0
    bcf2:	11 24       	eor	r1, r1
    bcf4:	24 2f       	mov	r18, r20
    bcf6:	44 0f       	add	r20, r20
    bcf8:	33 0b       	sbc	r19, r19
    bcfa:	20 53       	subi	r18, 0x30	; 48
    bcfc:	31 09       	sbc	r19, r1
    bcfe:	26 0f       	add	r18, r22
    bd00:	37 1f       	adc	r19, r23
    bd02:	dd cf       	rjmp	.-70     	; 0xbcbe <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    bd04:	2f 3f       	cpi	r18, 0xFF	; 255
    bd06:	31 05       	cpc	r19, r1
    bd08:	09 f0       	breq	.+2      	; 0xbd0c <DNSClient::getHostByName(char const*, IPAddress&)+0x98>
    bd0a:	14 f5       	brge	.+68     	; 0xbd50 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
    bd0c:	84 30       	cpi	r24, 0x04	; 4
    bd0e:	91 05       	cpc	r25, r1
    bd10:	fc f4       	brge	.+62     	; 0xbd50 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    bd12:	68 0e       	add	r6, r24
    bd14:	79 1e       	adc	r7, r25
    bd16:	f3 01       	movw	r30, r6
    bd18:	22 83       	std	Z+2, r18	; 0x02
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    bd1a:	cc 24       	eor	r12, r12
    bd1c:	c3 94       	inc	r12
    bd1e:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    bd20:	c6 01       	movw	r24, r12
    bd22:	63 96       	adiw	r28, 0x13	; 19
    bd24:	0f b6       	in	r0, 0x3f	; 63
    bd26:	f8 94       	cli
    bd28:	de bf       	out	0x3e, r29	; 62
    bd2a:	0f be       	out	0x3f, r0	; 63
    bd2c:	cd bf       	out	0x3d, r28	; 61
    bd2e:	df 91       	pop	r29
    bd30:	cf 91       	pop	r28
    bd32:	1f 91       	pop	r17
    bd34:	0f 91       	pop	r16
    bd36:	ff 90       	pop	r15
    bd38:	ef 90       	pop	r14
    bd3a:	df 90       	pop	r13
    bd3c:	cf 90       	pop	r12
    bd3e:	bf 90       	pop	r11
    bd40:	af 90       	pop	r10
    bd42:	9f 90       	pop	r9
    bd44:	8f 90       	pop	r8
    bd46:	7f 90       	pop	r7
    bd48:	6f 90       	pop	r6
    bd4a:	5f 90       	pop	r5
    bd4c:	4f 90       	pop	r4
    bd4e:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    bd50:	f7 01       	movw	r30, r14
    bd52:	42 81       	ldd	r20, Z+2	; 0x02
    bd54:	53 81       	ldd	r21, Z+3	; 0x03
    bd56:	64 81       	ldd	r22, Z+4	; 0x04
    bd58:	75 81       	ldd	r23, Z+5	; 0x05
    bd5a:	80 91 de 0d 	lds	r24, 0x0DDE	; 0x800dde <_ZL11INADDR_NONE.lto_priv.234+0x2>
    bd5e:	90 91 df 0d 	lds	r25, 0x0DDF	; 0x800ddf <_ZL11INADDR_NONE.lto_priv.234+0x3>
    bd62:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <_ZL11INADDR_NONE.lto_priv.234+0x4>
    bd66:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <_ZL11INADDR_NONE.lto_priv.234+0x5>
    bd6a:	48 17       	cp	r20, r24
    bd6c:	59 07       	cpc	r21, r25
    bd6e:	6a 07       	cpc	r22, r26
    bd70:	7b 07       	cpc	r23, r27
    bd72:	09 f4       	brne	.+2      	; 0xbd76 <DNSClient::getHostByName(char const*, IPAddress&)+0x102>
    bd74:	00 c2       	rjmp	.+1024   	; 0xc176 <DNSClient::getHostByName(char const*, IPAddress&)+0x502>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    bd76:	87 01       	movw	r16, r14
    bd78:	08 5f       	subi	r16, 0xF8	; 248
    bd7a:	1f 4f       	sbci	r17, 0xFF	; 255
    bd7c:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
    bd80:	6f 70       	andi	r22, 0x0F	; 15
    bd82:	77 27       	eor	r23, r23
    bd84:	7c 5f       	subi	r23, 0xFC	; 252
    bd86:	c8 01       	movw	r24, r16
    bd88:	0e 94 0c 5e 	call	0xbc18	; 0xbc18 <EthernetUDP::begin(unsigned int)>
    bd8c:	81 30       	cpi	r24, 0x01	; 1
    bd8e:	09 f0       	breq	.+2      	; 0xbd92 <DNSClient::getHostByName(char const*, IPAddress&)+0x11e>
    bd90:	f7 c1       	rjmp	.+1006   	; 0xc180 <DNSClient::getHostByName(char const*, IPAddress&)+0x50c>
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    bd92:	82 ef       	ldi	r24, 0xF2	; 242
    bd94:	92 e0       	ldi	r25, 0x02	; 2
    bd96:	9a 83       	std	Y+2, r25	; 0x02
    bd98:	89 83       	std	Y+1, r24	; 0x01
    bd9a:	f7 01       	movw	r30, r14
    bd9c:	82 81       	ldd	r24, Z+2	; 0x02
    bd9e:	93 81       	ldd	r25, Z+3	; 0x03
    bda0:	a4 81       	ldd	r26, Z+4	; 0x04
    bda2:	b5 81       	ldd	r27, Z+5	; 0x05
    bda4:	8b 83       	std	Y+3, r24	; 0x03
    bda6:	9c 83       	std	Y+4, r25	; 0x04
    bda8:	ad 83       	std	Y+5, r26	; 0x05
    bdaa:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    bdac:	45 e3       	ldi	r20, 0x35	; 53
    bdae:	50 e0       	ldi	r21, 0x00	; 0
    bdb0:	be 01       	movw	r22, r28
    bdb2:	6f 5f       	subi	r22, 0xFF	; 255
    bdb4:	7f 4f       	sbci	r23, 0xFF	; 255
    bdb6:	c8 01       	movw	r24, r16
    bdb8:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
    bdbc:	89 2b       	or	r24, r25
    bdbe:	31 f4       	brne	.+12     	; 0xbdcc <DNSClient::getHostByName(char const*, IPAddress&)+0x158>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    bdc0:	d1 2c       	mov	r13, r1
    bdc2:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    bdc4:	c8 01       	movw	r24, r16
    bdc6:	0e 94 79 5b 	call	0xb6f2	; 0xb6f2 <EthernetUDP::stop()>
    bdca:	aa cf       	rjmp	.-172    	; 0xbd20 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    bdcc:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
    bdd0:	f7 01       	movw	r30, r14
    bdd2:	77 83       	std	Z+7, r23	; 0x07
    bdd4:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    bdd6:	42 e0       	ldi	r20, 0x02	; 2
    bdd8:	50 e0       	ldi	r21, 0x00	; 0
    bdda:	b7 01       	movw	r22, r14
    bddc:	6a 5f       	subi	r22, 0xFA	; 250
    bdde:	7f 4f       	sbci	r23, 0xFF	; 255
    bde0:	c8 01       	movw	r24, r16
    bde2:	0e 94 58 3f 	call	0x7eb0	; 0x7eb0 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    bde6:	81 e0       	ldi	r24, 0x01	; 1
    bde8:	90 e0       	ldi	r25, 0x00	; 0
    bdea:	9a 83       	std	Y+2, r25	; 0x02
    bdec:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    bdee:	42 e0       	ldi	r20, 0x02	; 2
    bdf0:	50 e0       	ldi	r21, 0x00	; 0
    bdf2:	be 01       	movw	r22, r28
    bdf4:	6f 5f       	subi	r22, 0xFF	; 255
    bdf6:	7f 4f       	sbci	r23, 0xFF	; 255
    bdf8:	c8 01       	movw	r24, r16
    bdfa:	0e 94 58 3f 	call	0x7eb0	; 0x7eb0 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
    bdfe:	80 e0       	ldi	r24, 0x00	; 0
    be00:	91 e0       	ldi	r25, 0x01	; 1
    be02:	9a 83       	std	Y+2, r25	; 0x02
    be04:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    be06:	42 e0       	ldi	r20, 0x02	; 2
    be08:	50 e0       	ldi	r21, 0x00	; 0
    be0a:	be 01       	movw	r22, r28
    be0c:	6f 5f       	subi	r22, 0xFF	; 255
    be0e:	7f 4f       	sbci	r23, 0xFF	; 255
    be10:	c8 01       	movw	r24, r16
    be12:	0e 94 58 3f 	call	0x7eb0	; 0x7eb0 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
    be16:	1a 82       	std	Y+2, r1	; 0x02
    be18:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    be1a:	42 e0       	ldi	r20, 0x02	; 2
    be1c:	50 e0       	ldi	r21, 0x00	; 0
    be1e:	be 01       	movw	r22, r28
    be20:	6f 5f       	subi	r22, 0xFF	; 255
    be22:	7f 4f       	sbci	r23, 0xFF	; 255
    be24:	c8 01       	movw	r24, r16
    be26:	0e 94 58 3f 	call	0x7eb0	; 0x7eb0 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    be2a:	42 e0       	ldi	r20, 0x02	; 2
    be2c:	50 e0       	ldi	r21, 0x00	; 0
    be2e:	be 01       	movw	r22, r28
    be30:	6f 5f       	subi	r22, 0xFF	; 255
    be32:	7f 4f       	sbci	r23, 0xFF	; 255
    be34:	c8 01       	movw	r24, r16
    be36:	0e 94 58 3f 	call	0x7eb0	; 0x7eb0 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    be3a:	42 e0       	ldi	r20, 0x02	; 2
    be3c:	50 e0       	ldi	r21, 0x00	; 0
    be3e:	be 01       	movw	r22, r28
    be40:	6f 5f       	subi	r22, 0xFF	; 255
    be42:	7f 4f       	sbci	r23, 0xFF	; 255
    be44:	c8 01       	movw	r24, r16
    be46:	0e 94 58 3f 	call	0x7eb0	; 0x7eb0 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
    be4a:	56 01       	movw	r10, r12
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    be4c:	f6 01       	movw	r30, r12
    be4e:	80 81       	ld	r24, Z
    be50:	88 23       	and	r24, r24
    be52:	01 f1       	breq	.+64     	; 0xbe94 <DNSClient::getHostByName(char const*, IPAddress&)+0x220>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
    be54:	65 01       	movw	r12, r10
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
    be56:	f6 01       	movw	r30, r12
    be58:	81 91       	ld	r24, Z+
    be5a:	2f 01       	movw	r4, r30
    be5c:	88 23       	and	r24, r24
    be5e:	11 f0       	breq	.+4      	; 0xbe64 <DNSClient::getHostByName(char const*, IPAddress&)+0x1f0>
    be60:	8e 32       	cpi	r24, 0x2E	; 46
    be62:	b1 f4       	brne	.+44     	; 0xbe90 <DNSClient::getHostByName(char const*, IPAddress&)+0x21c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
    be64:	46 01       	movw	r8, r12
    be66:	8a 18       	sub	r8, r10
    be68:	9b 08       	sbc	r9, r11
    be6a:	18 14       	cp	r1, r8
    be6c:	19 04       	cpc	r1, r9
    be6e:	74 f4       	brge	.+28     	; 0xbe8c <DNSClient::getHostByName(char const*, IPAddress&)+0x218>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
    be70:	8d 86       	std	Y+13, r8	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
    be72:	41 e0       	ldi	r20, 0x01	; 1
    be74:	50 e0       	ldi	r21, 0x00	; 0
    be76:	be 01       	movw	r22, r28
    be78:	63 5f       	subi	r22, 0xF3	; 243
    be7a:	7f 4f       	sbci	r23, 0xFF	; 255
    be7c:	c8 01       	movw	r24, r16
    be7e:	0e 94 58 3f 	call	0x7eb0	; 0x7eb0 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    be82:	a4 01       	movw	r20, r8
    be84:	b5 01       	movw	r22, r10
    be86:	c8 01       	movw	r24, r16
    be88:	0e 94 58 3f 	call	0x7eb0	; 0x7eb0 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    be8c:	52 01       	movw	r10, r4
    be8e:	de cf       	rjmp	.-68     	; 0xbe4c <DNSClient::getHostByName(char const*, IPAddress&)+0x1d8>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    be90:	62 01       	movw	r12, r4
    be92:	e1 cf       	rjmp	.-62     	; 0xbe56 <DNSClient::getHostByName(char const*, IPAddress&)+0x1e2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    be94:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
    be96:	41 e0       	ldi	r20, 0x01	; 1
    be98:	50 e0       	ldi	r21, 0x00	; 0
    be9a:	be 01       	movw	r22, r28
    be9c:	63 5f       	subi	r22, 0xF3	; 243
    be9e:	7f 4f       	sbci	r23, 0xFF	; 255
    bea0:	c8 01       	movw	r24, r16
    bea2:	0e 94 58 3f 	call	0x7eb0	; 0x7eb0 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    bea6:	c1 2c       	mov	r12, r1
    bea8:	dd 24       	eor	r13, r13
    beaa:	d3 94       	inc	r13
    beac:	da 82       	std	Y+2, r13	; 0x02
    beae:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    beb0:	42 e0       	ldi	r20, 0x02	; 2
    beb2:	50 e0       	ldi	r21, 0x00	; 0
    beb4:	be 01       	movw	r22, r28
    beb6:	6f 5f       	subi	r22, 0xFF	; 255
    beb8:	7f 4f       	sbci	r23, 0xFF	; 255
    beba:	c8 01       	movw	r24, r16
    bebc:	0e 94 58 3f 	call	0x7eb0	; 0x7eb0 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    bec0:	da 82       	std	Y+2, r13	; 0x02
    bec2:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    bec4:	42 e0       	ldi	r20, 0x02	; 2
    bec6:	50 e0       	ldi	r21, 0x00	; 0
    bec8:	be 01       	movw	r22, r28
    beca:	6f 5f       	subi	r22, 0xFF	; 255
    becc:	7f 4f       	sbci	r23, 0xFF	; 255
    bece:	c8 01       	movw	r24, r16
    bed0:	0e 94 58 3f 	call	0x7eb0	; 0x7eb0 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                // Now output the request data
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    bed4:	c8 01       	movw	r24, r16
    bed6:	0e 94 e3 5d 	call	0xbbc6	; 0xbbc6 <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
    beda:	89 2b       	or	r24, r25
    bedc:	09 f4       	brne	.+2      	; 0xbee0 <DNSClient::getHostByName(char const*, IPAddress&)+0x26c>
    bede:	70 cf       	rjmp	.-288    	; 0xbdc0 <DNSClient::getHostByName(char const*, IPAddress&)+0x14c>
    bee0:	f3 e0       	ldi	r31, 0x03	; 3
    bee2:	af 2e       	mov	r10, r31
    bee4:	b1 2c       	mov	r11, r1
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    bee6:	23 01       	movw	r4, r6
    bee8:	22 e0       	ldi	r18, 0x02	; 2
    beea:	42 0e       	add	r4, r18
    beec:	51 1c       	adc	r5, r1
    beee:	43 c0       	rjmp	.+134    	; 0xbf76 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    bef0:	f7 01       	movw	r30, r14
    bef2:	42 81       	ldd	r20, Z+2	; 0x02
    bef4:	53 81       	ldd	r21, Z+3	; 0x03
    bef6:	64 81       	ldd	r22, Z+4	; 0x04
    bef8:	75 81       	ldd	r23, Z+5	; 0x05
    befa:	81 8d       	ldd	r24, Z+25	; 0x19
    befc:	92 8d       	ldd	r25, Z+26	; 0x1a
    befe:	a3 8d       	ldd	r26, Z+27	; 0x1b
    bf00:	b4 8d       	ldd	r27, Z+28	; 0x1c
    bf02:	48 17       	cp	r20, r24
    bf04:	59 07       	cpc	r21, r25
    bf06:	6a 07       	cpc	r22, r26
    bf08:	7b 07       	cpc	r23, r27
    bf0a:	09 f0       	breq	.+2      	; 0xbf0e <DNSClient::getHostByName(char const*, IPAddress&)+0x29a>
    bf0c:	2a c1       	rjmp	.+596    	; 0xc162 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
    bf0e:	85 8d       	ldd	r24, Z+29	; 0x1d
    bf10:	96 8d       	ldd	r25, Z+30	; 0x1e
    bf12:	c5 97       	sbiw	r24, 0x35	; 53
    bf14:	09 f0       	breq	.+2      	; 0xbf18 <DNSClient::getHostByName(char const*, IPAddress&)+0x2a4>
    bf16:	25 c1       	rjmp	.+586    	; 0xc162 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    bf18:	81 a1       	ldd	r24, Z+33	; 0x21
    bf1a:	92 a1       	ldd	r25, Z+34	; 0x22
    bf1c:	0c 97       	sbiw	r24, 0x0c	; 12
    bf1e:	0c f4       	brge	.+2      	; 0xbf22 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ae>
    bf20:	25 c1       	rjmp	.+586    	; 0xc16c <DNSClient::getHostByName(char const*, IPAddress&)+0x4f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    bf22:	4c e0       	ldi	r20, 0x0C	; 12
    bf24:	50 e0       	ldi	r21, 0x00	; 0
    bf26:	be 01       	movw	r22, r28
    bf28:	6f 5f       	subi	r22, 0xFF	; 255
    bf2a:	7f 4f       	sbci	r23, 0xFF	; 255
    bf2c:	c8 01       	movw	r24, r16
    bf2e:	0e 94 2b 5d 	call	0xba56	; 0xba56 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    bf32:	8b 81       	ldd	r24, Y+3	; 0x03
    bf34:	9c 81       	ldd	r25, Y+4	; 0x04
    bf36:	98 27       	eor	r25, r24
    bf38:	89 27       	eor	r24, r25
    bf3a:	98 27       	eor	r25, r24
    bf3c:	9a 8b       	std	Y+18, r25	; 0x12
    bf3e:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    bf40:	f7 01       	movw	r30, r14
    bf42:	46 81       	ldd	r20, Z+6	; 0x06
    bf44:	57 81       	ldd	r21, Z+7	; 0x07
    bf46:	29 81       	ldd	r18, Y+1	; 0x01
    bf48:	3a 81       	ldd	r19, Y+2	; 0x02
    bf4a:	42 17       	cp	r20, r18
    bf4c:	53 07       	cpc	r21, r19
    bf4e:	11 f4       	brne	.+4      	; 0xbf54 <DNSClient::getHostByName(char const*, IPAddress&)+0x2e0>
    bf50:	97 fd       	sbrc	r25, 7
    bf52:	2f c0       	rjmp	.+94     	; 0xbfb2 <DNSClient::getHostByName(char const*, IPAddress&)+0x33e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    bf54:	c8 01       	movw	r24, r16
    bf56:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
    bf5a:	ec ef       	ldi	r30, 0xFC	; 252
    bf5c:	ce 2e       	mov	r12, r30
    bf5e:	dd 24       	eor	r13, r13
    bf60:	da 94       	dec	r13
    bf62:	81 e0       	ldi	r24, 0x01	; 1
    bf64:	a8 1a       	sub	r10, r24
    bf66:	b1 08       	sbc	r11, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    bf68:	09 f4       	brne	.+2      	; 0xbf6c <DNSClient::getHostByName(char const*, IPAddress&)+0x2f8>
    bf6a:	2c cf       	rjmp	.-424    	; 0xbdc4 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
    bf6c:	ff ef       	ldi	r31, 0xFF	; 255
    bf6e:	cf 16       	cp	r12, r31
    bf70:	df 06       	cpc	r13, r31
    bf72:	09 f0       	breq	.+2      	; 0xbf76 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
    bf74:	27 cf       	rjmp	.-434    	; 0xbdc4 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();
    bf76:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
    bf7a:	3b 01       	movw	r6, r22
    bf7c:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    bf7e:	c8 01       	movw	r24, r16
    bf80:	0e 94 74 5d 	call	0xbae8	; 0xbae8 <EthernetUDP::parsePacket()>
    bf84:	18 16       	cp	r1, r24
    bf86:	19 06       	cpc	r1, r25
    bf88:	0c f4       	brge	.+2      	; 0xbf8c <DNSClient::getHostByName(char const*, IPAddress&)+0x318>
    bf8a:	b2 cf       	rjmp	.-156    	; 0xbef0 <DNSClient::getHostByName(char const*, IPAddress&)+0x27c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
    bf8c:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
    bf90:	66 19       	sub	r22, r6
    bf92:	77 09       	sbc	r23, r7
    bf94:	88 09       	sbc	r24, r8
    bf96:	99 09       	sbc	r25, r9
    bf98:	69 38       	cpi	r22, 0x89	; 137
    bf9a:	73 41       	sbci	r23, 0x13	; 19
    bf9c:	81 05       	cpc	r24, r1
    bf9e:	91 05       	cpc	r25, r1
    bfa0:	08 f0       	brcs	.+2      	; 0xbfa4 <DNSClient::getHostByName(char const*, IPAddress&)+0x330>
    bfa2:	db c0       	rjmp	.+438    	; 0xc15a <DNSClient::getHostByName(char const*, IPAddress&)+0x4e6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
    bfa4:	62 e3       	ldi	r22, 0x32	; 50
    bfa6:	70 e0       	ldi	r23, 0x00	; 0
    bfa8:	80 e0       	ldi	r24, 0x00	; 0
    bfaa:	90 e0       	ldi	r25, 0x00	; 0
    bfac:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
    bfb0:	e6 cf       	rjmp	.-52     	; 0xbf7e <DNSClient::getHostByName(char const*, IPAddress&)+0x30a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    bfb2:	8f 70       	andi	r24, 0x0F	; 15
    bfb4:	92 70       	andi	r25, 0x02	; 2
    bfb6:	89 2b       	or	r24, r25
    bfb8:	41 f0       	breq	.+16     	; 0xbfca <DNSClient::getHostByName(char const*, IPAddress&)+0x356>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
    bfba:	c8 01       	movw	r24, r16
    bfbc:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
    bfc0:	7b ef       	ldi	r23, 0xFB	; 251
    bfc2:	c7 2e       	mov	r12, r23
    bfc4:	dd 24       	eor	r13, r13
    bfc6:	da 94       	dec	r13
    bfc8:	cc cf       	rjmp	.-104    	; 0xbf62 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    bfca:	6f 80       	ldd	r6, Y+7	; 0x07
    bfcc:	78 84       	ldd	r7, Y+8	; 0x08
    bfce:	76 24       	eor	r7, r6
    bfd0:	67 24       	eor	r6, r7
    bfd2:	76 24       	eor	r7, r6
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    bfd4:	d1 2c       	mov	r13, r1
    bfd6:	c1 2c       	mov	r12, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    bfd8:	61 14       	cp	r6, r1
    bfda:	71 04       	cpc	r7, r1
    bfdc:	d1 f4       	brne	.+52     	; 0xc012 <DNSClient::getHostByName(char const*, IPAddress&)+0x39e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
    bfde:	c8 01       	movw	r24, r16
    bfe0:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
    bfe4:	6a ef       	ldi	r22, 0xFA	; 250
    bfe6:	c6 2e       	mov	r12, r22
    bfe8:	dd 24       	eor	r13, r13
    bfea:	da 94       	dec	r13
    bfec:	ba cf       	rjmp	.-140    	; 0xbf62 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    bfee:	8d 85       	ldd	r24, Y+13	; 0x0d
    bff0:	81 11       	cpse	r24, r1
    bff2:	17 c0       	rjmp	.+46     	; 0xc022 <DNSClient::getHostByName(char const*, IPAddress&)+0x3ae>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    bff4:	c8 01       	movw	r24, r16
    bff6:	0e 94 4a 5d 	call	0xba94	; 0xba94 <EthernetUDP::read()>
    bffa:	c8 01       	movw	r24, r16
    bffc:	0e 94 4a 5d 	call	0xba94	; 0xba94 <EthernetUDP::read()>
    c000:	c8 01       	movw	r24, r16
    c002:	0e 94 4a 5d 	call	0xba94	; 0xba94 <EthernetUDP::read()>
    c006:	c8 01       	movw	r24, r16
    c008:	0e 94 4a 5d 	call	0xba94	; 0xba94 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    c00c:	ff ef       	ldi	r31, 0xFF	; 255
    c00e:	cf 1a       	sub	r12, r31
    c010:	df 0a       	sbc	r13, r31
    c012:	8d 81       	ldd	r24, Y+5	; 0x05
    c014:	9e 81       	ldd	r25, Y+6	; 0x06
    c016:	98 27       	eor	r25, r24
    c018:	89 27       	eor	r24, r25
    c01a:	98 27       	eor	r25, r24
    c01c:	c8 16       	cp	r12, r24
    c01e:	d9 06       	cpc	r13, r25
    c020:	a8 f4       	brcc	.+42     	; 0xc04c <DNSClient::getHostByName(char const*, IPAddress&)+0x3d8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    c022:	41 e0       	ldi	r20, 0x01	; 1
    c024:	50 e0       	ldi	r21, 0x00	; 0
    c026:	be 01       	movw	r22, r28
    c028:	63 5f       	subi	r22, 0xF3	; 243
    c02a:	7f 4f       	sbci	r23, 0xFF	; 255
    c02c:	c8 01       	movw	r24, r16
    c02e:	0e 94 2b 5d 	call	0xba56	; 0xba56 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
    c032:	8d 85       	ldd	r24, Y+13	; 0x0d
    c034:	88 23       	and	r24, r24
    c036:	d9 f2       	breq	.-74     	; 0xbfee <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    c038:	8d 85       	ldd	r24, Y+13	; 0x0d
    c03a:	9f ef       	ldi	r25, 0xFF	; 255
    c03c:	98 0f       	add	r25, r24
    c03e:	9d 87       	std	Y+13, r25	; 0x0d
    c040:	88 23       	and	r24, r24
    c042:	a9 f2       	breq	.-86     	; 0xbfee <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
    c044:	c8 01       	movw	r24, r16
    c046:	0e 94 4a 5d 	call	0xba94	; 0xba94 <EthernetUDP::read()>
    c04a:	f6 cf       	rjmp	.-20     	; 0xc038 <DNSClient::getHostByName(char const*, IPAddress&)+0x3c4>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    c04c:	91 2c       	mov	r9, r1
    c04e:	81 2c       	mov	r8, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    c050:	41 e0       	ldi	r20, 0x01	; 1
    c052:	50 e0       	ldi	r21, 0x00	; 0
    c054:	be 01       	movw	r22, r28
    c056:	6d 5e       	subi	r22, 0xED	; 237
    c058:	7f 4f       	sbci	r23, 0xFF	; 255
    c05a:	c8 01       	movw	r24, r16
    c05c:	0e 94 2b 5d 	call	0xba56	; 0xba56 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    c060:	8b 89       	ldd	r24, Y+19	; 0x13
    c062:	98 2f       	mov	r25, r24
    c064:	90 7c       	andi	r25, 0xC0	; 192
    c066:	61 f4       	brne	.+24     	; 0xc080 <DNSClient::getHostByName(char const*, IPAddress&)+0x40c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
    c068:	88 23       	and	r24, r24
    c06a:	89 f0       	breq	.+34     	; 0xc08e <DNSClient::getHostByName(char const*, IPAddress&)+0x41a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    c06c:	8b 89       	ldd	r24, Y+19	; 0x13
    c06e:	9f ef       	ldi	r25, 0xFF	; 255
    c070:	98 0f       	add	r25, r24
    c072:	9b 8b       	std	Y+19, r25	; 0x13
    c074:	88 23       	and	r24, r24
    c076:	41 f0       	breq	.+16     	; 0xc088 <DNSClient::getHostByName(char const*, IPAddress&)+0x414>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
    c078:	c8 01       	movw	r24, r16
    c07a:	0e 94 4a 5d 	call	0xba94	; 0xba94 <EthernetUDP::read()>
    c07e:	f6 cf       	rjmp	.-20     	; 0xc06c <DNSClient::getHostByName(char const*, IPAddress&)+0x3f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    c080:	c8 01       	movw	r24, r16
    c082:	0e 94 4a 5d 	call	0xba94	; 0xba94 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
    c086:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
    c088:	8b 89       	ldd	r24, Y+19	; 0x13
    c08a:	81 11       	cpse	r24, r1
    c08c:	e1 cf       	rjmp	.-62     	; 0xc050 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    c08e:	42 e0       	ldi	r20, 0x02	; 2
    c090:	50 e0       	ldi	r21, 0x00	; 0
    c092:	be 01       	movw	r22, r28
    c094:	61 5f       	subi	r22, 0xF1	; 241
    c096:	7f 4f       	sbci	r23, 0xFF	; 255
    c098:	c8 01       	movw	r24, r16
    c09a:	0e 94 2b 5d 	call	0xba56	; 0xba56 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    c09e:	42 e0       	ldi	r20, 0x02	; 2
    c0a0:	50 e0       	ldi	r21, 0x00	; 0
    c0a2:	be 01       	movw	r22, r28
    c0a4:	63 5f       	subi	r22, 0xF3	; 243
    c0a6:	7f 4f       	sbci	r23, 0xFF	; 255
    c0a8:	c8 01       	movw	r24, r16
    c0aa:	0e 94 2b 5d 	call	0xba56	; 0xba56 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    c0ae:	c8 01       	movw	r24, r16
    c0b0:	0e 94 4a 5d 	call	0xba94	; 0xba94 <EthernetUDP::read()>
    c0b4:	c8 01       	movw	r24, r16
    c0b6:	0e 94 4a 5d 	call	0xba94	; 0xba94 <EthernetUDP::read()>
    c0ba:	c8 01       	movw	r24, r16
    c0bc:	0e 94 4a 5d 	call	0xba94	; 0xba94 <EthernetUDP::read()>
    c0c0:	c8 01       	movw	r24, r16
    c0c2:	0e 94 4a 5d 	call	0xba94	; 0xba94 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    c0c6:	42 e0       	ldi	r20, 0x02	; 2
    c0c8:	50 e0       	ldi	r21, 0x00	; 0
    c0ca:	be 01       	movw	r22, r28
    c0cc:	6f 5e       	subi	r22, 0xEF	; 239
    c0ce:	7f 4f       	sbci	r23, 0xFF	; 255
    c0d0:	c8 01       	movw	r24, r16
    c0d2:	0e 94 2b 5d 	call	0xba56	; 0xba56 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    c0d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    c0d8:	98 89       	ldd	r25, Y+16	; 0x10
    c0da:	81 15       	cp	r24, r1
    c0dc:	91 40       	sbci	r25, 0x01	; 1
    c0de:	e9 f4       	brne	.+58     	; 0xc11a <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
    c0e0:	cd 84       	ldd	r12, Y+13	; 0x0d
    c0e2:	de 84       	ldd	r13, Y+14	; 0x0e
    c0e4:	dc 24       	eor	r13, r12
    c0e6:	cd 24       	eor	r12, r13
    c0e8:	dc 24       	eor	r13, r12
    c0ea:	81 e0       	ldi	r24, 0x01	; 1
    c0ec:	c8 16       	cp	r12, r24
    c0ee:	d1 04       	cpc	r13, r1
    c0f0:	a1 f4       	brne	.+40     	; 0xc11a <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
    c0f2:	89 89       	ldd	r24, Y+17	; 0x11
    c0f4:	9a 89       	ldd	r25, Y+18	; 0x12
    c0f6:	81 15       	cp	r24, r1
    c0f8:	94 40       	sbci	r25, 0x04	; 4
    c0fa:	41 f0       	breq	.+16     	; 0xc10c <DNSClient::getHostByName(char const*, IPAddress&)+0x498>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    c0fc:	c8 01       	movw	r24, r16
    c0fe:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
    c102:	57 ef       	ldi	r21, 0xF7	; 247
    c104:	c5 2e       	mov	r12, r21
    c106:	dd 24       	eor	r13, r13
    c108:	da 94       	dec	r13
    c10a:	2b cf       	rjmp	.-426    	; 0xbf62 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
    c10c:	44 e0       	ldi	r20, 0x04	; 4
    c10e:	50 e0       	ldi	r21, 0x00	; 0
    c110:	b2 01       	movw	r22, r4
    c112:	c8 01       	movw	r24, r16
    c114:	0e 94 2b 5d 	call	0xba56	; 0xba56 <EthernetUDP::read(unsigned char*, unsigned int)>
    c118:	24 cf       	rjmp	.-440    	; 0xbf62 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    c11a:	d1 2c       	mov	r13, r1
    c11c:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    c11e:	89 89       	ldd	r24, Y+17	; 0x11
    c120:	9a 89       	ldd	r25, Y+18	; 0x12
    c122:	98 27       	eor	r25, r24
    c124:	89 27       	eor	r24, r25
    c126:	98 27       	eor	r25, r24
    c128:	c8 16       	cp	r12, r24
    c12a:	d9 06       	cpc	r13, r25
    c12c:	38 f4       	brcc	.+14     	; 0xc13c <DNSClient::getHostByName(char const*, IPAddress&)+0x4c8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412
            {
                iUdp.read(); // we don't care about the returned byte
    c12e:	c8 01       	movw	r24, r16
    c130:	0e 94 4a 5d 	call	0xba94	; 0xba94 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    c134:	ff ef       	ldi	r31, 0xFF	; 255
    c136:	cf 1a       	sub	r12, r31
    c138:	df 0a       	sbc	r13, r31
    c13a:	f1 cf       	rjmp	.-30     	; 0xc11e <DNSClient::getHostByName(char const*, IPAddress&)+0x4aa>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    c13c:	2f ef       	ldi	r18, 0xFF	; 255
    c13e:	82 1a       	sub	r8, r18
    c140:	92 0a       	sbc	r9, r18
    c142:	68 14       	cp	r6, r8
    c144:	79 04       	cpc	r7, r9
    c146:	09 f0       	breq	.+2      	; 0xc14a <DNSClient::getHostByName(char const*, IPAddress&)+0x4d6>
    c148:	83 cf       	rjmp	.-250    	; 0xc050 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    c14a:	c8 01       	movw	r24, r16
    c14c:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    c150:	46 ef       	ldi	r20, 0xF6	; 246
    c152:	c4 2e       	mov	r12, r20
    c154:	dd 24       	eor	r13, r13
    c156:	da 94       	dec	r13
    c158:	04 cf       	rjmp	.-504    	; 0xbf62 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    c15a:	cc 24       	eor	r12, r12
    c15c:	ca 94       	dec	r12
    c15e:	dc 2c       	mov	r13, r12
    c160:	00 cf       	rjmp	.-512    	; 0xbf62 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    c162:	2e ef       	ldi	r18, 0xFE	; 254
    c164:	c2 2e       	mov	r12, r18
    c166:	dd 24       	eor	r13, r13
    c168:	da 94       	dec	r13
    c16a:	fb ce       	rjmp	.-522    	; 0xbf62 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    c16c:	9d ef       	ldi	r25, 0xFD	; 253
    c16e:	c9 2e       	mov	r12, r25
    c170:	dd 24       	eor	r13, r13
    c172:	da 94       	dec	r13
    c174:	f6 ce       	rjmp	.-532    	; 0xbf62 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    c176:	8e ef       	ldi	r24, 0xFE	; 254
    c178:	c8 2e       	mov	r12, r24
    c17a:	dd 24       	eor	r13, r13
    c17c:	da 94       	dec	r13
    c17e:	d0 cd       	rjmp	.-1120   	; 0xbd20 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:120
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    c180:	d1 2c       	mov	r13, r1
    c182:	c1 2c       	mov	r12, r1
    c184:	cd cd       	rjmp	.-1126   	; 0xbd20 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>

0000c186 <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    c186:	cf 92       	push	r12
    c188:	df 92       	push	r13
    c18a:	ef 92       	push	r14
    c18c:	ff 92       	push	r15
    c18e:	0f 93       	push	r16
    c190:	1f 93       	push	r17
    c192:	cf 93       	push	r28
    c194:	df 93       	push	r29
    c196:	cd b7       	in	r28, 0x3d	; 61
    c198:	de b7       	in	r29, 0x3e	; 62
    c19a:	af 97       	sbiw	r28, 0x2f	; 47
    c19c:	0f b6       	in	r0, 0x3f	; 63
    c19e:	f8 94       	cli
    c1a0:	de bf       	out	0x3e, r29	; 62
    c1a2:	0f be       	out	0x3f, r0	; 63
    c1a4:	cd bf       	out	0x3d, r28	; 61
    c1a6:	7c 01       	movw	r14, r24
    c1a8:	6a 01       	movw	r12, r20
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    c1aa:	02 ef       	ldi	r16, 0xF2	; 242
    c1ac:	12 e0       	ldi	r17, 0x02	; 2
    c1ae:	1a 83       	std	Y+2, r17	; 0x02
    c1b0:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    c1b2:	1c 86       	std	Y+12, r1	; 0x0c
    c1b4:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
    c1b6:	88 ee       	ldi	r24, 0xE8	; 232
    c1b8:	93 e0       	ldi	r25, 0x03	; 3
    c1ba:	a0 e0       	ldi	r26, 0x00	; 0
    c1bc:	b0 e0       	ldi	r27, 0x00	; 0
    c1be:	8d 87       	std	Y+13, r24	; 0x0d
    c1c0:	9e 87       	std	Y+14, r25	; 0x0e
    c1c2:	af 87       	std	Y+15, r26	; 0x0f
    c1c4:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    c1c6:	88 ea       	ldi	r24, 0xA8	; 168
    c1c8:	92 e0       	ldi	r25, 0x02	; 2
    c1ca:	9a 87       	std	Y+10, r25	; 0x0a
    c1cc:	89 87       	std	Y+9, r24	; 0x09
    c1ce:	88 e0       	ldi	r24, 0x08	; 8
    c1d0:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
    c1d2:	19 8f       	std	Y+25, r17	; 0x19
    c1d4:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    c1d6:	1a 8e       	std	Y+26, r1	; 0x1a
    c1d8:	1b 8e       	std	Y+27, r1	; 0x1b
    c1da:	1c 8e       	std	Y+28, r1	; 0x1c
    c1dc:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    c1de:	1b a7       	std	Y+43, r17	; 0x2b
    c1e0:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    c1e2:	1c a6       	std	Y+44, r1	; 0x2c
    c1e4:	1d a6       	std	Y+45, r1	; 0x2d
    c1e6:	1e a6       	std	Y+46, r1	; 0x2e
    c1e8:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    c1ea:	80 91 d1 0d 	lds	r24, 0x0DD1	; 0x800dd1 <Ethernet+0x2>
    c1ee:	90 91 d2 0d 	lds	r25, 0x0DD2	; 0x800dd2 <Ethernet+0x3>
    c1f2:	a0 91 d3 0d 	lds	r26, 0x0DD3	; 0x800dd3 <Ethernet+0x4>
    c1f6:	b0 91 d4 0d 	lds	r27, 0x0DD4	; 0x800dd4 <Ethernet+0x5>
    c1fa:	8e a3       	std	Y+38, r24	; 0x26
    c1fc:	9f a3       	std	Y+39, r25	; 0x27
    c1fe:	a8 a7       	std	Y+40, r26	; 0x28
    c200:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    c202:	8b 83       	std	Y+3, r24	; 0x03
    c204:	9c 83       	std	Y+4, r25	; 0x04
    c206:	ad 83       	std	Y+5, r26	; 0x05
    c208:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    c20a:	18 86       	std	Y+8, r1	; 0x08
    c20c:	1f 82       	std	Y+7, r1	; 0x07
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    c20e:	ae 01       	movw	r20, r28
    c210:	46 5d       	subi	r20, 0xD6	; 214
    c212:	5f 4f       	sbci	r21, 0xFF	; 255
    c214:	ce 01       	movw	r24, r28
    c216:	01 96       	adiw	r24, 0x01	; 1
    c218:	0e 94 3a 5e 	call	0xbc74	; 0xbc74 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
    c21c:	81 30       	cpi	r24, 0x01	; 1
    c21e:	91 05       	cpc	r25, r1
    c220:	b1 f4       	brne	.+44     	; 0xc24e <EthernetUDP::beginPacket(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
    c222:	d7 01       	movw	r26, r14
    c224:	ed 91       	ld	r30, X+
    c226:	fc 91       	ld	r31, X
    c228:	04 88       	ldd	r0, Z+20	; 0x14
    c22a:	f5 89       	ldd	r31, Z+21	; 0x15
    c22c:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
    c22e:	1d a3       	std	Y+37, r17	; 0x25
    c230:	0c a3       	std	Y+36, r16	; 0x24
    c232:	8c a5       	ldd	r24, Y+44	; 0x2c
    c234:	9d a5       	ldd	r25, Y+45	; 0x2d
    c236:	ae a5       	ldd	r26, Y+46	; 0x2e
    c238:	bf a5       	ldd	r27, Y+47	; 0x2f
    c23a:	8e a3       	std	Y+38, r24	; 0x26
    c23c:	9f a3       	std	Y+39, r25	; 0x27
    c23e:	a8 a7       	std	Y+40, r26	; 0x28
    c240:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    c242:	a6 01       	movw	r20, r12
    c244:	be 01       	movw	r22, r28
    c246:	6c 5d       	subi	r22, 0xDC	; 220
    c248:	7f 4f       	sbci	r23, 0xFF	; 255
    c24a:	c7 01       	movw	r24, r14
    c24c:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
    c24e:	af 96       	adiw	r28, 0x2f	; 47
    c250:	0f b6       	in	r0, 0x3f	; 63
    c252:	f8 94       	cli
    c254:	de bf       	out	0x3e, r29	; 62
    c256:	0f be       	out	0x3f, r0	; 63
    c258:	cd bf       	out	0x3d, r28	; 61
    c25a:	df 91       	pop	r29
    c25c:	cf 91       	pop	r28
    c25e:	1f 91       	pop	r17
    c260:	0f 91       	pop	r16
    c262:	ff 90       	pop	r15
    c264:	ef 90       	pop	r14
    c266:	df 90       	pop	r13
    c268:	cf 90       	pop	r12
    c26a:	08 95       	ret

0000c26c <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    c26c:	cf 92       	push	r12
    c26e:	df 92       	push	r13
    c270:	ef 92       	push	r14
    c272:	ff 92       	push	r15
    c274:	0f 93       	push	r16
    c276:	1f 93       	push	r17
    c278:	cf 93       	push	r28
    c27a:	df 93       	push	r29
    c27c:	cd b7       	in	r28, 0x3d	; 61
    c27e:	de b7       	in	r29, 0x3e	; 62
    c280:	af 97       	sbiw	r28, 0x2f	; 47
    c282:	0f b6       	in	r0, 0x3f	; 63
    c284:	f8 94       	cli
    c286:	de bf       	out	0x3e, r29	; 62
    c288:	0f be       	out	0x3f, r0	; 63
    c28a:	cd bf       	out	0x3d, r28	; 61
    c28c:	7c 01       	movw	r14, r24
    c28e:	6a 01       	movw	r12, r20
__base_ctor ():
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    c290:	02 ef       	ldi	r16, 0xF2	; 242
    c292:	12 e0       	ldi	r17, 0x02	; 2
    c294:	1a 83       	std	Y+2, r17	; 0x02
    c296:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    c298:	1c 86       	std	Y+12, r1	; 0x0c
    c29a:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
    c29c:	88 ee       	ldi	r24, 0xE8	; 232
    c29e:	93 e0       	ldi	r25, 0x03	; 3
    c2a0:	a0 e0       	ldi	r26, 0x00	; 0
    c2a2:	b0 e0       	ldi	r27, 0x00	; 0
    c2a4:	8d 87       	std	Y+13, r24	; 0x0d
    c2a6:	9e 87       	std	Y+14, r25	; 0x0e
    c2a8:	af 87       	std	Y+15, r26	; 0x0f
    c2aa:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    c2ac:	88 ea       	ldi	r24, 0xA8	; 168
    c2ae:	92 e0       	ldi	r25, 0x02	; 2
    c2b0:	9a 87       	std	Y+10, r25	; 0x0a
    c2b2:	89 87       	std	Y+9, r24	; 0x09
    c2b4:	88 e0       	ldi	r24, 0x08	; 8
    c2b6:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
    c2b8:	19 8f       	std	Y+25, r17	; 0x19
    c2ba:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    c2bc:	1a 8e       	std	Y+26, r1	; 0x1a
    c2be:	1b 8e       	std	Y+27, r1	; 0x1b
    c2c0:	1c 8e       	std	Y+28, r1	; 0x1c
    c2c2:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    c2c4:	1b a7       	std	Y+43, r17	; 0x2b
    c2c6:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    c2c8:	1c a6       	std	Y+44, r1	; 0x2c
    c2ca:	1d a6       	std	Y+45, r1	; 0x2d
    c2cc:	1e a6       	std	Y+46, r1	; 0x2e
    c2ce:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
    c2d0:	80 91 d1 0d 	lds	r24, 0x0DD1	; 0x800dd1 <Ethernet+0x2>
    c2d4:	90 91 d2 0d 	lds	r25, 0x0DD2	; 0x800dd2 <Ethernet+0x3>
    c2d8:	a0 91 d3 0d 	lds	r26, 0x0DD3	; 0x800dd3 <Ethernet+0x4>
    c2dc:	b0 91 d4 0d 	lds	r27, 0x0DD4	; 0x800dd4 <Ethernet+0x5>
    c2e0:	8e a3       	std	Y+38, r24	; 0x26
    c2e2:	9f a3       	std	Y+39, r25	; 0x27
    c2e4:	a8 a7       	std	Y+40, r26	; 0x28
    c2e6:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    c2e8:	8b 83       	std	Y+3, r24	; 0x03
    c2ea:	9c 83       	std	Y+4, r25	; 0x04
    c2ec:	ad 83       	std	Y+5, r26	; 0x05
    c2ee:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
    c2f0:	18 86       	std	Y+8, r1	; 0x08
    c2f2:	1f 82       	std	Y+7, r1	; 0x07
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    c2f4:	ae 01       	movw	r20, r28
    c2f6:	46 5d       	subi	r20, 0xD6	; 214
    c2f8:	5f 4f       	sbci	r21, 0xFF	; 255
    c2fa:	ce 01       	movw	r24, r28
    c2fc:	01 96       	adiw	r24, 0x01	; 1
    c2fe:	0e 94 3a 5e 	call	0xbc74	; 0xbc74 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
    c302:	81 30       	cpi	r24, 0x01	; 1
    c304:	91 05       	cpc	r25, r1
    c306:	b1 f4       	brne	.+44     	; 0xc334 <EthernetClient::connect(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
    c308:	d7 01       	movw	r26, r14
    c30a:	ed 91       	ld	r30, X+
    c30c:	fc 91       	ld	r31, X
    c30e:	06 84       	ldd	r0, Z+14	; 0x0e
    c310:	f7 85       	ldd	r31, Z+15	; 0x0f
    c312:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
    c314:	1d a3       	std	Y+37, r17	; 0x25
    c316:	0c a3       	std	Y+36, r16	; 0x24
    c318:	8c a5       	ldd	r24, Y+44	; 0x2c
    c31a:	9d a5       	ldd	r25, Y+45	; 0x2d
    c31c:	ae a5       	ldd	r26, Y+46	; 0x2e
    c31e:	bf a5       	ldd	r27, Y+47	; 0x2f
    c320:	8e a3       	std	Y+38, r24	; 0x26
    c322:	9f a3       	std	Y+39, r25	; 0x27
    c324:	a8 a7       	std	Y+40, r26	; 0x28
    c326:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    c328:	a6 01       	movw	r20, r12
    c32a:	be 01       	movw	r22, r28
    c32c:	6c 5d       	subi	r22, 0xDC	; 220
    c32e:	7f 4f       	sbci	r23, 0xFF	; 255
    c330:	c7 01       	movw	r24, r14
    c332:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
    c334:	af 96       	adiw	r28, 0x2f	; 47
    c336:	0f b6       	in	r0, 0x3f	; 63
    c338:	f8 94       	cli
    c33a:	de bf       	out	0x3e, r29	; 62
    c33c:	0f be       	out	0x3f, r0	; 63
    c33e:	cd bf       	out	0x3d, r28	; 61
    c340:	df 91       	pop	r29
    c342:	cf 91       	pop	r28
    c344:	1f 91       	pop	r17
    c346:	0f 91       	pop	r16
    c348:	ff 90       	pop	r15
    c34a:	ef 90       	pop	r14
    c34c:	df 90       	pop	r13
    c34e:	cf 90       	pop	r12
    c350:	08 95       	ret

0000c352 <button_set_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)>:
_Z42button_set_network_test_connection_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5953
///////////////////////////////////////////////////////////////////
/*
   Obsluha tlacitka kontrola konektivity
*/
void button_set_network_test_connection_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    c352:	cf 93       	push	r28
    c354:	df 93       	push	r29
    c356:	cd b7       	in	r28, 0x3d	; 61
    c358:	de b7       	in	r29, 0x3e	; 62
    c35a:	60 97       	sbiw	r28, 0x10	; 16
    c35c:	0f b6       	in	r0, 0x3f	; 63
    c35e:	f8 94       	cli
    c360:	de bf       	out	0x3e, r29	; 62
    c362:	0f be       	out	0x3f, r0	; 63
    c364:	cd bf       	out	0x3d, r28	; 61
check_connectivity_connection():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5968
*/
uint8_t check_connectivity_connection(void)
{
  char server[16];
  uint8_t ret = 0;
  strcpy_P(server, seznam_server);
    c366:	6e ea       	ldi	r22, 0xAE	; 174
    c368:	7f e5       	ldi	r23, 0x5F	; 95
    c36a:	ce 01       	movw	r24, r28
    c36c:	01 96       	adiw	r24, 0x01	; 1
    c36e:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5969
  if (!ethClient1.connected())
    c372:	82 e3       	ldi	r24, 0x32	; 50
    c374:	92 e1       	ldi	r25, 0x12	; 18
    c376:	0e 94 10 5c 	call	0xb820	; 0xb820 <EthernetClient::connected()>
    c37a:	81 11       	cpse	r24, r1
    c37c:	17 c0       	rjmp	.+46     	; 0xc3ac <button_set_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5971
  {
    if (ethClient1.connect(server, 80))
    c37e:	40 e5       	ldi	r20, 0x50	; 80
    c380:	50 e0       	ldi	r21, 0x00	; 0
    c382:	be 01       	movw	r22, r28
    c384:	6f 5f       	subi	r22, 0xFF	; 255
    c386:	7f 4f       	sbci	r23, 0xFF	; 255
    c388:	82 e3       	ldi	r24, 0x32	; 50
    c38a:	92 e1       	ldi	r25, 0x12	; 18
    c38c:	0e 94 36 61 	call	0xc26c	; 0xc26c <EthernetClient::connect(char const*, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5973
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    c390:	70 e0       	ldi	r23, 0x00	; 0
    c392:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5971
  char server[16];
  uint8_t ret = 0;
  strcpy_P(server, seznam_server);
  if (!ethClient1.connected())
  {
    if (ethClient1.connect(server, 80))
    c394:	89 2b       	or	r24, r25
    c396:	99 f0       	breq	.+38     	; 0xc3be <button_set_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)+0x6c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5973
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    c398:	88 e6       	ldi	r24, 0x68	; 104
    c39a:	90 e0       	ldi	r25, 0x00	; 0
    c39c:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5974
      strcpy_P(dialog_text, new_text_ok_connect_seznam);
    c3a0:	6d e8       	ldi	r22, 0x8D	; 141
    c3a2:	7f e5       	ldi	r23, 0x5F	; 95
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5980
      ret = 1;
    }
    else
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
      strcpy_P(dialog_text, new_text_err_connect_seznam);
    c3a4:	8a ef       	ldi	r24, 0xFA	; 250
    c3a6:	99 e0       	ldi	r25, 0x09	; 9
    c3a8:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
_Z42button_set_network_test_connection_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5956
*/
void button_set_network_test_connection_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  check_connectivity_connection();
  /// TODO - pridat do selfcheck testu
}
    c3ac:	60 96       	adiw	r28, 0x10	; 16
    c3ae:	0f b6       	in	r0, 0x3f	; 63
    c3b0:	f8 94       	cli
    c3b2:	de bf       	out	0x3e, r29	; 62
    c3b4:	0f be       	out	0x3f, r0	; 63
    c3b6:	cd bf       	out	0x3d, r28	; 61
    c3b8:	df 91       	pop	r29
    c3ba:	cf 91       	pop	r28
    c3bc:	08 95       	ret
check_connectivity_connection():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5979
      strcpy_P(dialog_text, new_text_ok_connect_seznam);
      ret = 1;
    }
    else
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    c3be:	88 e6       	ldi	r24, 0x68	; 104
    c3c0:	90 e0       	ldi	r25, 0x00	; 0
    c3c2:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5980
      strcpy_P(dialog_text, new_text_err_connect_seznam);
    c3c6:	6c e9       	ldi	r22, 0x9C	; 156
    c3c8:	7f e5       	ldi	r23, 0x5F	; 95
    c3ca:	ec cf       	rjmp	.-40     	; 0xc3a4 <button_set_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)+0x52>

0000c3cc <EthernetServer::begin()>:
_ZN14EthernetServer5beginEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:17
{
  _port = port;
}

void EthernetServer::begin()
{
    c3cc:	8f 92       	push	r8
    c3ce:	9f 92       	push	r9
    c3d0:	af 92       	push	r10
    c3d2:	bf 92       	push	r11
    c3d4:	cf 92       	push	r12
    c3d6:	df 92       	push	r13
    c3d8:	ef 92       	push	r14
    c3da:	ff 92       	push	r15
    c3dc:	0f 93       	push	r16
    c3de:	1f 93       	push	r17
    c3e0:	cf 93       	push	r28
    c3e2:	df 93       	push	r29
    c3e4:	cd b7       	in	r28, 0x3d	; 61
    c3e6:	de b7       	in	r29, 0x3e	; 62
    c3e8:	2d 97       	sbiw	r28, 0x0d	; 13
    c3ea:	0f b6       	in	r0, 0x3f	; 63
    c3ec:	f8 94       	cli
    c3ee:	de bf       	out	0x3e, r29	; 62
    c3f0:	0f be       	out	0x3f, r0	; 63
    c3f2:	cd bf       	out	0x3d, r28	; 61
    c3f4:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:18
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    c3f6:	10 e0       	ldi	r17, 0x00	; 0
    c3f8:	00 e0       	ldi	r16, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
    c3fa:	38 ee       	ldi	r19, 0xE8	; 232
    c3fc:	83 2e       	mov	r8, r19
    c3fe:	33 e0       	ldi	r19, 0x03	; 3
    c400:	93 2e       	mov	r9, r19
    c402:	a1 2c       	mov	r10, r1
    c404:	b1 2c       	mov	r11, r1
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    c406:	40 ed       	ldi	r20, 0xD0	; 208
    c408:	c4 2e       	mov	r12, r20
    c40a:	42 e0       	ldi	r20, 0x02	; 2
    c40c:	d4 2e       	mov	r13, r20
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    c40e:	1c 82       	std	Y+4, r1	; 0x04
    c410:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
    c412:	8d 82       	std	Y+5, r8	; 0x05
    c414:	9e 82       	std	Y+6, r9	; 0x06
    c416:	af 82       	std	Y+7, r10	; 0x07
    c418:	b8 86       	std	Y+8, r11	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
    c41a:	da 82       	std	Y+2, r13	; 0x02
    c41c:	c9 82       	std	Y+1, r12	; 0x01
    c41e:	0d 87       	std	Y+13, r16	; 0x0d
_ZN14EthernetServer5beginEv():
    EthernetClient client(sock);
    if (client.status() == SnSR::CLOSED) {
    c420:	ce 01       	movw	r24, r28
    c422:	01 96       	adiw	r24, 0x01	; 1
    c424:	0e 94 06 5c 	call	0xb80c	; 0xb80c <EthernetClient::status()>
    c428:	81 11       	cpse	r24, r1
    c42a:	30 c0       	rjmp	.+96     	; 0xc48c <EthernetServer::begin()+0xc0>
socket():
    c42c:	f7 01       	movw	r30, r14
    c42e:	44 81       	ldd	r20, Z+4	; 0x04
    c430:	55 81       	ldd	r21, Z+5	; 0x05
    c432:	61 e0       	ldi	r22, 0x01	; 1
    c434:	80 2f       	mov	r24, r16
    c436:	0e 94 25 b4 	call	0x1684a	; 0x1684a <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.81]>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
    c43a:	63 e0       	ldi	r22, 0x03	; 3
    c43c:	70 e0       	ldi	r23, 0x00	; 0
    c43e:	80 2f       	mov	r24, r16
    c440:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
listen():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:55
 * @brief	This function established  the connection for the channel in passive (server) mode. This function waits for the request from the peer.
 * @return	1 for success else 0.
 */
uint8_t listen(SOCKET s)
{
  if (w5500.readSnSR(s) != SnSR::INIT)
    c444:	83 31       	cpi	r24, 0x13	; 19
    c446:	29 f4       	brne	.+10     	; 0xc452 <EthernetServer::begin()+0x86>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:57
    return 0;
  w5500.execCmdSn(s, Sock_LISTEN);
    c448:	62 e0       	ldi	r22, 0x02	; 2
    c44a:	70 e0       	ldi	r23, 0x00	; 0
    c44c:	80 2f       	mov	r24, r16
    c44e:	0e 94 15 b4 	call	0x1682a	; 0x1682a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.82]>
_ZN14EthernetServer5beginEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:23
      socket(sock, SnMR::TCP, _port, 0);
      listen(sock);
      EthernetClass::_server_port[sock] = _port;
    c452:	f7 01       	movw	r30, r14
    c454:	84 81       	ldd	r24, Z+4	; 0x04
    c456:	95 81       	ldd	r25, Z+5	; 0x05
    c458:	00 0f       	add	r16, r16
    c45a:	11 1f       	adc	r17, r17
    c45c:	f8 01       	movw	r30, r16
    c45e:	e8 5b       	subi	r30, 0xB8	; 184
    c460:	f4 4f       	sbci	r31, 0xF4	; 244
    c462:	91 83       	std	Z+1, r25	; 0x01
    c464:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:27
      break;
    }
  }  
}
    c466:	2d 96       	adiw	r28, 0x0d	; 13
    c468:	0f b6       	in	r0, 0x3f	; 63
    c46a:	f8 94       	cli
    c46c:	de bf       	out	0x3e, r29	; 62
    c46e:	0f be       	out	0x3f, r0	; 63
    c470:	cd bf       	out	0x3d, r28	; 61
    c472:	df 91       	pop	r29
    c474:	cf 91       	pop	r28
    c476:	1f 91       	pop	r17
    c478:	0f 91       	pop	r16
    c47a:	ff 90       	pop	r15
    c47c:	ef 90       	pop	r14
    c47e:	df 90       	pop	r13
    c480:	cf 90       	pop	r12
    c482:	bf 90       	pop	r11
    c484:	af 90       	pop	r10
    c486:	9f 90       	pop	r9
    c488:	8f 90       	pop	r8
    c48a:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:18
  _port = port;
}

void EthernetServer::begin()
{
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    c48c:	0f 5f       	subi	r16, 0xFF	; 255
    c48e:	1f 4f       	sbci	r17, 0xFF	; 255
    c490:	08 30       	cpi	r16, 0x08	; 8
    c492:	11 05       	cpc	r17, r1
    c494:	09 f0       	breq	.+2      	; 0xc498 <EthernetServer::begin()+0xcc>
    c496:	bb cf       	rjmp	.-138    	; 0xc40e <EthernetServer::begin()+0x42>
    c498:	e6 cf       	rjmp	.-52     	; 0xc466 <EthernetServer::begin()+0x9a>

0000c49a <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    c49a:	8f 92       	push	r8
    c49c:	9f 92       	push	r9
    c49e:	af 92       	push	r10
    c4a0:	bf 92       	push	r11
    c4a2:	cf 92       	push	r12
    c4a4:	df 92       	push	r13
    c4a6:	ef 92       	push	r14
    c4a8:	ff 92       	push	r15
    c4aa:	0f 93       	push	r16
    c4ac:	1f 93       	push	r17
    c4ae:	cf 93       	push	r28
    c4b0:	6c 01       	movw	r12, r24
    c4b2:	5b 01       	movw	r10, r22
    c4b4:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
    c4b6:	fc 01       	movw	r30, r24
    c4b8:	c4 85       	ldd	r28, Z+12	; 0x0c
    c4ba:	c8 30       	cpi	r28, 0x08	; 8
    c4bc:	a1 f4       	brne	.+40     	; 0xc4e6 <EthernetClient::write(unsigned char const*, unsigned int)+0x4c>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    c4be:	81 e0       	ldi	r24, 0x01	; 1
    c4c0:	90 e0       	ldi	r25, 0x00	; 0
    c4c2:	f6 01       	movw	r30, r12
    c4c4:	93 83       	std	Z+3, r25	; 0x03
    c4c6:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
    c4c8:	f1 2c       	mov	r15, r1
    c4ca:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
    c4cc:	c7 01       	movw	r24, r14
    c4ce:	cf 91       	pop	r28
    c4d0:	1f 91       	pop	r17
    c4d2:	0f 91       	pop	r16
    c4d4:	ff 90       	pop	r15
    c4d6:	ef 90       	pop	r14
    c4d8:	df 90       	pop	r13
    c4da:	cf 90       	pop	r12
    c4dc:	bf 90       	pop	r11
    c4de:	af 90       	pop	r10
    c4e0:	9f 90       	pop	r9
    c4e2:	8f 90       	pop	r8
    c4e4:	08 95       	ret
    c4e6:	8a 01       	movw	r16, r20
    c4e8:	41 30       	cpi	r20, 0x01	; 1
    c4ea:	58 40       	sbci	r21, 0x08	; 8
    c4ec:	10 f0       	brcs	.+4      	; 0xc4f2 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
    c4ee:	00 e0       	ldi	r16, 0x00	; 0
    c4f0:	18 e0       	ldi	r17, 0x08	; 8
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:116
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = w5500.getTXFreeSize(s);
    c4f2:	8c 2f       	mov	r24, r28
    c4f4:	0e 94 be b7 	call	0x16f7c	; 0x16f7c <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
    c4f8:	4c 01       	movw	r8, r24
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
    c4fa:	63 e0       	ldi	r22, 0x03	; 3
    c4fc:	70 e0       	ldi	r23, 0x00	; 0
    c4fe:	8c 2f       	mov	r24, r28
    c500:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:118
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    c504:	87 31       	cpi	r24, 0x17	; 23
    c506:	11 f0       	breq	.+4      	; 0xc50c <EthernetClient::write(unsigned char const*, unsigned int)+0x72>
    c508:	8c 31       	cpi	r24, 0x1C	; 28
    c50a:	09 f5       	brne	.+66     	; 0xc54e <EthernetClient::write(unsigned char const*, unsigned int)+0xb4>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:124
    {
      ret = 0; 
      break;
    }
  } 
  while (freesize < ret);
    c50c:	80 16       	cp	r8, r16
    c50e:	91 06       	cpc	r9, r17
    c510:	80 f3       	brcs	.-32     	; 0xc4f2 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
send_data_processing():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:70
}

void W5500Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    c512:	98 01       	movw	r18, r16
    c514:	a5 01       	movw	r20, r10
    c516:	70 e0       	ldi	r23, 0x00	; 0
    c518:	60 e0       	ldi	r22, 0x00	; 0
    c51a:	8c 2f       	mov	r24, r28
    c51c:	0e 94 7e b7 	call	0x16efc	; 0x16efc <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:128

  // copy data
  w5500.send_data_processing(s, (uint8_t *)buf, ret);
  w5500.execCmdSn(s, Sock_SEND);
    c520:	60 e2       	ldi	r22, 0x20	; 32
    c522:	70 e0       	ldi	r23, 0x00	; 0
    c524:	8c 2f       	mov	r24, r28
    c526:	0e 94 15 b4 	call	0x1682a	; 0x1682a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.82]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    c52a:	62 e0       	ldi	r22, 0x02	; 2
    c52c:	70 e0       	ldi	r23, 0x00	; 0
    c52e:	8c 2f       	mov	r24, r28
    c530:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:131

  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    c534:	84 fd       	sbrc	r24, 4
    c536:	0e c0       	rjmp	.+28     	; 0xc554 <EthernetClient::write(unsigned char const*, unsigned int)+0xba>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    c538:	63 e0       	ldi	r22, 0x03	; 3
    c53a:	70 e0       	ldi	r23, 0x00	; 0
    c53c:	8c 2f       	mov	r24, r28
    c53e:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:134
  {
    /* m2008.01 [bj] : reduce code */
    if ( w5500.readSnSR(s) == SnSR::CLOSED )
    c542:	81 11       	cpse	r24, r1
    c544:	f2 cf       	rjmp	.-28     	; 0xc52a <EthernetClient::write(unsigned char const*, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:136
    {
      close(s);
    c546:	8c 2f       	mov	r24, r28
    c548:	0e 94 6c 5b 	call	0xb6d8	; 0xb6d8 <close(unsigned char)>
    c54c:	b8 cf       	rjmp	.-144    	; 0xc4be <EthernetClient::write(unsigned char const*, unsigned int)+0x24>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:120
  {
    freesize = w5500.getTXFreeSize(s);
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
    c54e:	10 e0       	ldi	r17, 0x00	; 0
    c550:	00 e0       	ldi	r16, 0x00	; 0
    c552:	df cf       	rjmp	.-66     	; 0xc512 <EthernetClient::write(unsigned char const*, unsigned int)+0x78>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    c554:	40 e1       	ldi	r20, 0x10	; 16
    c556:	62 e0       	ldi	r22, 0x02	; 2
    c558:	70 e0       	ldi	r23, 0x00	; 0
    c55a:	8c 2f       	mov	r24, r28
    c55c:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
    c560:	01 2b       	or	r16, r17
    c562:	09 f0       	breq	.+2      	; 0xc566 <EthernetClient::write(unsigned char const*, unsigned int)+0xcc>
    c564:	b3 cf       	rjmp	.-154    	; 0xc4cc <EthernetClient::write(unsigned char const*, unsigned int)+0x32>
    c566:	ab cf       	rjmp	.-170    	; 0xc4be <EthernetClient::write(unsigned char const*, unsigned int)+0x24>

0000c568 <EthernetServer::write(unsigned char const*, unsigned int)>:
_ZN14EthernetServer5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:76
{
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
    c568:	3f 92       	push	r3
    c56a:	4f 92       	push	r4
    c56c:	5f 92       	push	r5
    c56e:	6f 92       	push	r6
    c570:	7f 92       	push	r7
    c572:	8f 92       	push	r8
    c574:	9f 92       	push	r9
    c576:	af 92       	push	r10
    c578:	bf 92       	push	r11
    c57a:	cf 92       	push	r12
    c57c:	df 92       	push	r13
    c57e:	ef 92       	push	r14
    c580:	ff 92       	push	r15
    c582:	0f 93       	push	r16
    c584:	1f 93       	push	r17
    c586:	cf 93       	push	r28
    c588:	df 93       	push	r29
    c58a:	cd b7       	in	r28, 0x3d	; 61
    c58c:	de b7       	in	r29, 0x3e	; 62
    c58e:	2d 97       	sbiw	r28, 0x0d	; 13
    c590:	0f b6       	in	r0, 0x3f	; 63
    c592:	f8 94       	cli
    c594:	de bf       	out	0x3e, r29	; 62
    c596:	0f be       	out	0x3f, r0	; 63
    c598:	cd bf       	out	0x3d, r28	; 61
    c59a:	6c 01       	movw	r12, r24
    c59c:	5b 01       	movw	r10, r22
    c59e:	4a 01       	movw	r8, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:79
  size_t n = 0;
  
  accept();
    c5a0:	0e 94 75 5c 	call	0xb8ea	; 0xb8ea <EthernetServer::accept()>
    c5a4:	88 e4       	ldi	r24, 0x48	; 72
    c5a6:	e8 2e       	mov	r14, r24
    c5a8:	8b e0       	ldi	r24, 0x0B	; 11
    c5aa:	f8 2e       	mov	r15, r24
    c5ac:	31 2c       	mov	r3, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:77
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
  size_t n = 0;
    c5ae:	10 e0       	ldi	r17, 0x00	; 0
    c5b0:	00 e0       	ldi	r16, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
    c5b2:	98 ee       	ldi	r25, 0xE8	; 232
    c5b4:	49 2e       	mov	r4, r25
    c5b6:	93 e0       	ldi	r25, 0x03	; 3
    c5b8:	59 2e       	mov	r5, r25
    c5ba:	61 2c       	mov	r6, r1
    c5bc:	71 2c       	mov	r7, r1
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
    c5be:	1c 82       	std	Y+4, r1	; 0x04
    c5c0:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
    c5c2:	4d 82       	std	Y+5, r4	; 0x05
    c5c4:	5e 82       	std	Y+6, r5	; 0x06
    c5c6:	6f 82       	std	Y+7, r6	; 0x07
    c5c8:	78 86       	std	Y+8, r7	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    c5ca:	80 ed       	ldi	r24, 0xD0	; 208
    c5cc:	92 e0       	ldi	r25, 0x02	; 2
    c5ce:	9a 83       	std	Y+2, r25	; 0x02
    c5d0:	89 83       	std	Y+1, r24	; 0x01
    c5d2:	3d 86       	std	Y+13, r3	; 0x0d
_ZN14EthernetServer5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:84
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port &&
    c5d4:	f7 01       	movw	r30, r14
    c5d6:	21 91       	ld	r18, Z+
    c5d8:	31 91       	ld	r19, Z+
    c5da:	7f 01       	movw	r14, r30
    c5dc:	f6 01       	movw	r30, r12
    c5de:	84 81       	ldd	r24, Z+4	; 0x04
    c5e0:	95 81       	ldd	r25, Z+5	; 0x05
    c5e2:	28 17       	cp	r18, r24
    c5e4:	39 07       	cpc	r19, r25
    c5e6:	71 f4       	brne	.+28     	; 0xc604 <EthernetServer::write(unsigned char const*, unsigned int)+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:85
      client.status() == SnSR::ESTABLISHED) {
    c5e8:	ce 01       	movw	r24, r28
    c5ea:	01 96       	adiw	r24, 0x01	; 1
    c5ec:	0e 94 06 5c 	call	0xb80c	; 0xb80c <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:84
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port &&
    c5f0:	87 31       	cpi	r24, 0x17	; 23
    c5f2:	41 f4       	brne	.+16     	; 0xc604 <EthernetServer::write(unsigned char const*, unsigned int)+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:86
      client.status() == SnSR::ESTABLISHED) {
      n += client.write(buffer, size);
    c5f4:	a4 01       	movw	r20, r8
    c5f6:	b5 01       	movw	r22, r10
    c5f8:	ce 01       	movw	r24, r28
    c5fa:	01 96       	adiw	r24, 0x01	; 1
    c5fc:	0e 94 4d 62 	call	0xc49a	; 0xc49a <EthernetClient::write(unsigned char const*, unsigned int)>
    c600:	08 0f       	add	r16, r24
    c602:	19 1f       	adc	r17, r25
    c604:	33 94       	inc	r3
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:81
{
  size_t n = 0;
  
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    c606:	f8 e0       	ldi	r31, 0x08	; 8
    c608:	3f 12       	cpse	r3, r31
    c60a:	d9 cf       	rjmp	.-78     	; 0xc5be <EthernetServer::write(unsigned char const*, unsigned int)+0x56>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    c60c:	c8 01       	movw	r24, r16
    c60e:	2d 96       	adiw	r28, 0x0d	; 13
    c610:	0f b6       	in	r0, 0x3f	; 63
    c612:	f8 94       	cli
    c614:	de bf       	out	0x3e, r29	; 62
    c616:	0f be       	out	0x3f, r0	; 63
    c618:	cd bf       	out	0x3d, r28	; 61
    c61a:	df 91       	pop	r29
    c61c:	cf 91       	pop	r28
    c61e:	1f 91       	pop	r17
    c620:	0f 91       	pop	r16
    c622:	ff 90       	pop	r15
    c624:	ef 90       	pop	r14
    c626:	df 90       	pop	r13
    c628:	cf 90       	pop	r12
    c62a:	bf 90       	pop	r11
    c62c:	af 90       	pop	r10
    c62e:	9f 90       	pop	r9
    c630:	8f 90       	pop	r8
    c632:	7f 90       	pop	r7
    c634:	6f 90       	pop	r6
    c636:	5f 90       	pop	r5
    c638:	4f 90       	pop	r4
    c63a:	3f 90       	pop	r3
    c63c:	08 95       	ret

0000c63e <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    c63e:	df 92       	push	r13
    c640:	ef 92       	push	r14
    c642:	ff 92       	push	r15
    c644:	0f 93       	push	r16
    c646:	1f 93       	push	r17
    c648:	cf 93       	push	r28
    c64a:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
    c64c:	fc 01       	movw	r30, r24
    c64e:	24 85       	ldd	r18, Z+12	; 0x0c
    c650:	28 30       	cpi	r18, 0x08	; 8
    c652:	51 f0       	breq	.+20     	; 0xc668 <EthernetClient::connect(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
    c654:	90 e0       	ldi	r25, 0x00	; 0
    c656:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
    c658:	df 91       	pop	r29
    c65a:	cf 91       	pop	r28
    c65c:	1f 91       	pop	r17
    c65e:	0f 91       	pop	r16
    c660:	ff 90       	pop	r15
    c662:	ef 90       	pop	r14
    c664:	df 90       	pop	r13
    c666:	08 95       	ret
    c668:	7a 01       	movw	r14, r20
    c66a:	eb 01       	movw	r28, r22
    c66c:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    c66e:	d1 2c       	mov	r13, r1
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    c670:	63 e0       	ldi	r22, 0x03	; 3
    c672:	70 e0       	ldi	r23, 0x00	; 0
    c674:	8d 2d       	mov	r24, r13
    c676:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    c67a:	81 11       	cpse	r24, r1
    c67c:	28 c0       	rjmp	.+80     	; 0xc6ce <EthernetClient::connect(IPAddress, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
    c67e:	f8 01       	movw	r30, r16
    c680:	d4 86       	std	Z+12, r13	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    c682:	f8 01       	movw	r30, r16
    c684:	84 85       	ldd	r24, Z+12	; 0x0c
    c686:	88 30       	cpi	r24, 0x08	; 8
    c688:	29 f3       	breq	.-54     	; 0xc654 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
    c68a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    c68e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    c692:	2f 5f       	subi	r18, 0xFF	; 255
    c694:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
    c696:	19 f1       	breq	.+70     	; 0xc6de <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
    c698:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    c69c:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
socket():
    c6a0:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    c6a4:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    c6a8:	61 e0       	ldi	r22, 0x01	; 1
    c6aa:	0e 94 25 b4 	call	0x1684a	; 0x1684a <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.81]>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    c6ae:	8a 81       	ldd	r24, Y+2	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:70
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    c6b0:	8f 3f       	cpi	r24, 0xFF	; 255
    c6b2:	c1 f4       	brne	.+48     	; 0xc6e4 <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    c6b4:	8b 81       	ldd	r24, Y+3	; 0x03
    c6b6:	8f 3f       	cpi	r24, 0xFF	; 255
    c6b8:	01 f5       	brne	.+64     	; 0xc6fa <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    c6ba:	8c 81       	ldd	r24, Y+4	; 0x04
    c6bc:	8f 3f       	cpi	r24, 0xFF	; 255
    c6be:	e9 f4       	brne	.+58     	; 0xc6fa <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    c6c0:	8d 81       	ldd	r24, Y+5	; 0x05
    c6c2:	8f 3f       	cpi	r24, 0xFF	; 255
    c6c4:	d1 f4       	brne	.+52     	; 0xc6fa <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    c6c6:	88 e0       	ldi	r24, 0x08	; 8
    c6c8:	f8 01       	movw	r30, r16
    c6ca:	84 87       	std	Z+12, r24	; 0x0c
    c6cc:	c3 cf       	rjmp	.-122    	; 0xc654 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    c6ce:	8b 7f       	andi	r24, 0xFB	; 251
    c6d0:	88 31       	cpi	r24, 0x18	; 24
    c6d2:	a9 f2       	breq	.-86     	; 0xc67e <EthernetClient::connect(IPAddress, unsigned int)+0x40>
    c6d4:	d3 94       	inc	r13
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    c6d6:	f8 e0       	ldi	r31, 0x08	; 8
    c6d8:	df 12       	cpse	r13, r31
    c6da:	ca cf       	rjmp	.-108    	; 0xc670 <EthernetClient::connect(IPAddress, unsigned int)+0x32>
    c6dc:	d2 cf       	rjmp	.-92     	; 0xc682 <EthernetClient::connect(IPAddress, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
    c6de:	20 e0       	ldi	r18, 0x00	; 0
    c6e0:	34 e0       	ldi	r19, 0x04	; 4
    c6e2:	da cf       	rjmp	.-76     	; 0xc698 <EthernetClient::connect(IPAddress, unsigned int)+0x5a>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    c6e4:	81 11       	cpse	r24, r1
    c6e6:	09 c0       	rjmp	.+18     	; 0xc6fa <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:73
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    c6e8:	8b 81       	ldd	r24, Y+3	; 0x03
    c6ea:	81 11       	cpse	r24, r1
    c6ec:	06 c0       	rjmp	.+12     	; 0xc6fa <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    c6ee:	8c 81       	ldd	r24, Y+4	; 0x04
    c6f0:	81 11       	cpse	r24, r1
    c6f2:	03 c0       	rjmp	.+6      	; 0xc6fa <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    c6f4:	8d 81       	ldd	r24, Y+5	; 0x05
    c6f6:	88 23       	and	r24, r24
    c6f8:	31 f3       	breq	.-52     	; 0xc6c6 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
    c6fa:	e1 14       	cp	r14, r1
    c6fc:	f1 04       	cpc	r15, r1
    c6fe:	19 f3       	breq	.-58     	; 0xc6c6 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    c700:	f8 01       	movw	r30, r16
    c702:	d4 84       	ldd	r13, Z+12	; 0x0c
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    c704:	ae 01       	movw	r20, r28
    c706:	4e 5f       	subi	r20, 0xFE	; 254
    c708:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
    c70a:	6d 2d       	mov	r22, r13
    c70c:	62 95       	swap	r22
    c70e:	66 0f       	add	r22, r22
    c710:	60 7e       	andi	r22, 0xE0	; 224
    c712:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
    c714:	24 e0       	ldi	r18, 0x04	; 4
    c716:	30 e0       	ldi	r19, 0x00	; 0
    c718:	8c e0       	ldi	r24, 0x0C	; 12
    c71a:	90 e0       	ldi	r25, 0x00	; 0
    c71c:	0e 94 10 5b 	call	0xb620	; 0xb620 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
    c720:	4f 2d       	mov	r20, r15
    c722:	60 e1       	ldi	r22, 0x10	; 16
    c724:	70 e0       	ldi	r23, 0x00	; 0
    c726:	8d 2d       	mov	r24, r13
    c728:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    c72c:	4e 2d       	mov	r20, r14
    c72e:	61 e1       	ldi	r22, 0x11	; 17
    c730:	70 e0       	ldi	r23, 0x00	; 0
    c732:	8d 2d       	mov	r24, r13
    c734:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:81
    return 0;

  // set destination IP
  w5500.writeSnDIPR(s, addr);
  w5500.writeSnDPORT(s, port);
  w5500.execCmdSn(s, Sock_CONNECT);
    c738:	64 e0       	ldi	r22, 0x04	; 4
    c73a:	70 e0       	ldi	r23, 0x00	; 0
    c73c:	8d 2d       	mov	r24, r13
    c73e:	0e 94 15 b4 	call	0x1682a	; 0x1682a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.82]>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
    c742:	c8 01       	movw	r24, r16
    c744:	0e 94 06 5c 	call	0xb80c	; 0xb80c <EthernetClient::status()>
    c748:	87 31       	cpi	r24, 0x17	; 23
    c74a:	61 f0       	breq	.+24     	; 0xc764 <EthernetClient::connect(IPAddress, unsigned int)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
    c74c:	61 e0       	ldi	r22, 0x01	; 1
    c74e:	70 e0       	ldi	r23, 0x00	; 0
    c750:	80 e0       	ldi	r24, 0x00	; 0
    c752:	90 e0       	ldi	r25, 0x00	; 0
    c754:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
    c758:	c8 01       	movw	r24, r16
    c75a:	0e 94 06 5c 	call	0xb80c	; 0xb80c <EthernetClient::status()>
    c75e:	81 11       	cpse	r24, r1
    c760:	f0 cf       	rjmp	.-32     	; 0xc742 <EthernetClient::connect(IPAddress, unsigned int)+0x104>
    c762:	b1 cf       	rjmp	.-158    	; 0xc6c6 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    c764:	81 e0       	ldi	r24, 0x01	; 1
    c766:	90 e0       	ldi	r25, 0x00	; 0
    c768:	77 cf       	rjmp	.-274    	; 0xc658 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>

0000c76a <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    c76a:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
    c76c:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    c76e:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
    c770:	80 91 de 0a 	lds	r24, 0x0ADE	; 0x800ade <SPIClass::initialized>
    c774:	81 11       	cpse	r24, r1
    c776:	27 c0       	rjmp	.+78     	; 0xc7c6 <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    c778:	e0 e1       	ldi	r30, 0x10	; 16
    c77a:	f8 e6       	ldi	r31, 0x68	; 104
    c77c:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    c77e:	ea ec       	ldi	r30, 0xCA	; 202
    c780:	f7 e6       	ldi	r31, 0x67	; 103
    c782:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    c784:	e8 2f       	mov	r30, r24
    c786:	f0 e0       	ldi	r31, 0x00	; 0
    c788:	ee 0f       	add	r30, r30
    c78a:	ff 1f       	adc	r31, r31
    c78c:	ed 53       	subi	r30, 0x3D	; 61
    c78e:	ff 49       	sbci	r31, 0x9F	; 159
    c790:	a5 91       	lpm	r26, Z+
    c792:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    c794:	ec 91       	ld	r30, X
    c796:	e9 23       	and	r30, r25
    c798:	21 f4       	brne	.+8      	; 0xc7a2 <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    c79a:	61 e0       	ldi	r22, 0x01	; 1
    c79c:	88 e0       	ldi	r24, 0x08	; 8
    c79e:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    c7a2:	61 e0       	ldi	r22, 0x01	; 1
    c7a4:	88 e0       	ldi	r24, 0x08	; 8
    c7a6:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    c7aa:	8c b5       	in	r24, 0x2c	; 44
    c7ac:	80 61       	ori	r24, 0x10	; 16
    c7ae:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
    c7b0:	8c b5       	in	r24, 0x2c	; 44
    c7b2:	80 64       	ori	r24, 0x40	; 64
    c7b4:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    c7b6:	61 e0       	ldi	r22, 0x01	; 1
    c7b8:	89 e0       	ldi	r24, 0x09	; 9
    c7ba:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    c7be:	61 e0       	ldi	r22, 0x01	; 1
    c7c0:	8a e0       	ldi	r24, 0x0A	; 10
    c7c2:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
    c7c6:	80 91 de 0a 	lds	r24, 0x0ADE	; 0x800ade <SPIClass::initialized>
    c7ca:	8f 5f       	subi	r24, 0xFF	; 255
    c7cc:	80 93 de 0a 	sts	0x0ADE, r24	; 0x800ade <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
    c7d0:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:64
}
    c7d2:	cf 91       	pop	r28
    c7d4:	08 95       	ret

0000c7d6 <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
    c7d6:	7f 92       	push	r7
    c7d8:	8f 92       	push	r8
    c7da:	9f 92       	push	r9
    c7dc:	af 92       	push	r10
    c7de:	bf 92       	push	r11
    c7e0:	cf 92       	push	r12
    c7e2:	df 92       	push	r13
    c7e4:	ef 92       	push	r14
    c7e6:	ff 92       	push	r15
    c7e8:	0f 93       	push	r16
    c7ea:	1f 93       	push	r17
    c7ec:	cf 93       	push	r28
    c7ee:	df 93       	push	r29
    c7f0:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
    c7f2:	fc 01       	movw	r30, r24
    c7f4:	86 81       	ldd	r24, Z+6	; 0x06
    c7f6:	81 11       	cpse	r24, r1
    c7f8:	35 c0       	rjmp	.+106    	; 0xc864 <SoftSPIB::transfer(unsigned char)+0x8e>
    c7fa:	86 2f       	mov	r24, r22
    c7fc:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
    c7fe:	ec 01       	movw	r28, r24
    c800:	d6 95       	lsr	r29
    c802:	dc 2f       	mov	r29, r28
    c804:	cc 27       	eor	r28, r28
    c806:	d7 95       	ror	r29
    c808:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
    c80a:	66 1f       	adc	r22, r22
    c80c:	66 27       	eor	r22, r22
    c80e:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    c810:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
    c812:	ec 01       	movw	r28, r24
    c814:	55 e0       	ldi	r21, 0x05	; 5
    c816:	cc 0f       	add	r28, r28
    c818:	dd 1f       	adc	r29, r29
    c81a:	5a 95       	dec	r21
    c81c:	e1 f7       	brne	.-8      	; 0xc816 <SoftSPIB::transfer(unsigned char)+0x40>
    c81e:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    c820:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
    c822:	ec 01       	movw	r28, r24
    c824:	73 e0       	ldi	r23, 0x03	; 3
    c826:	cc 0f       	add	r28, r28
    c828:	dd 1f       	adc	r29, r29
    c82a:	7a 95       	dec	r23
    c82c:	e1 f7       	brne	.-8      	; 0xc826 <SoftSPIB::transfer(unsigned char)+0x50>
    c82e:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    c830:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
    c832:	ec 01       	movw	r28, r24
    c834:	cc 0f       	add	r28, r28
    c836:	dd 1f       	adc	r29, r29
    c838:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    c83a:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
    c83c:	ec 01       	movw	r28, r24
    c83e:	d5 95       	asr	r29
    c840:	c7 95       	ror	r28
    c842:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    c844:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
    c846:	ec 01       	movw	r28, r24
    c848:	a3 e0       	ldi	r26, 0x03	; 3
    c84a:	d5 95       	asr	r29
    c84c:	c7 95       	ror	r28
    c84e:	aa 95       	dec	r26
    c850:	e1 f7       	brne	.-8      	; 0xc84a <SoftSPIB::transfer(unsigned char)+0x74>
    c852:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
    c854:	6c 2b       	or	r22, r28
    c856:	b5 e0       	ldi	r27, 0x05	; 5
    c858:	95 95       	asr	r25
    c85a:	87 95       	ror	r24
    c85c:	ba 95       	dec	r27
    c85e:	e1 f7       	brne	.-8      	; 0xc858 <SoftSPIB::transfer(unsigned char)+0x82>
    c860:	82 70       	andi	r24, 0x02	; 2
    c862:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
    c864:	91 e0       	ldi	r25, 0x01	; 1
    c866:	80 e0       	ldi	r24, 0x00	; 0
    c868:	f8 01       	movw	r30, r16
    c86a:	21 81       	ldd	r18, Z+1	; 0x01
    c86c:	21 11       	cpse	r18, r1
    c86e:	01 c0       	rjmp	.+2      	; 0xc872 <SoftSPIB::transfer(unsigned char)+0x9c>
    c870:	90 e0       	ldi	r25, 0x00	; 0
    c872:	e9 2e       	mov	r14, r25
    c874:	f8 2e       	mov	r15, r24
    c876:	d1 2c       	mov	r13, r1
    c878:	c1 2c       	mov	r12, r1
    c87a:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    c87c:	c6 2f       	mov	r28, r22
    c87e:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
    c880:	f8 01       	movw	r30, r16
    c882:	80 81       	ld	r24, Z
    c884:	88 23       	and	r24, r24
    c886:	39 f0       	breq	.+14     	; 0xc896 <SoftSPIB::transfer(unsigned char)+0xc0>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
    c888:	f1 e0       	ldi	r31, 0x01	; 1
    c88a:	ef 26       	eor	r14, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
    c88c:	6e 2d       	mov	r22, r14
    c88e:	f8 01       	movw	r30, r16
    c890:	85 81       	ldd	r24, Z+5	; 0x05
    c892:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    c896:	be 01       	movw	r22, r28
    c898:	0c 2c       	mov	r0, r12
    c89a:	02 c0       	rjmp	.+4      	; 0xc8a0 <SoftSPIB::transfer(unsigned char)+0xca>
    c89c:	75 95       	asr	r23
    c89e:	67 95       	ror	r22
    c8a0:	0a 94       	dec	r0
    c8a2:	e2 f7       	brpl	.-8      	; 0xc89c <SoftSPIB::transfer(unsigned char)+0xc6>
    c8a4:	61 70       	andi	r22, 0x01	; 1
    c8a6:	f8 01       	movw	r30, r16
    c8a8:	84 81       	ldd	r24, Z+4	; 0x04
    c8aa:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
    c8ae:	57 01       	movw	r10, r14
    c8b0:	f1 e0       	ldi	r31, 0x01	; 1
    c8b2:	af 26       	eor	r10, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
    c8b4:	6a 2d       	mov	r22, r10
    c8b6:	f8 01       	movw	r30, r16
    c8b8:	85 81       	ldd	r24, Z+5	; 0x05
    c8ba:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
    c8be:	f8 01       	movw	r30, r16
    c8c0:	23 81       	ldd	r18, Z+3	; 0x03
    c8c2:	30 e0       	ldi	r19, 0x00	; 0
    c8c4:	f9 01       	movw	r30, r18
    c8c6:	ed 52       	subi	r30, 0x2D	; 45
    c8c8:	ff 49       	sbci	r31, 0x9F	; 159
    c8ca:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    c8cc:	f9 01       	movw	r30, r18
    c8ce:	ee 53       	subi	r30, 0x3E	; 62
    c8d0:	f8 49       	sbci	r31, 0x98	; 152
    c8d2:	84 90       	lpm	r8, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    c8d4:	f9 01       	movw	r30, r18
    c8d6:	e8 5f       	subi	r30, 0xF8	; 248
    c8d8:	f7 49       	sbci	r31, 0x97	; 151
    c8da:	74 90       	lpm	r7, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    c8dc:	77 20       	and	r7, r7
    c8de:	a9 f1       	breq	.+106    	; 0xc94a <SoftSPIB::transfer(unsigned char)+0x174>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    c8e0:	81 11       	cpse	r24, r1
    c8e2:	0e 94 46 b8 	call	0x1708c	; 0x1708c <turnOffPWM.lto_priv.285>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    c8e6:	e7 2d       	mov	r30, r7
    c8e8:	f0 e0       	ldi	r31, 0x00	; 0
    c8ea:	ee 0f       	add	r30, r30
    c8ec:	ff 1f       	adc	r31, r31
    c8ee:	ee 54       	subi	r30, 0x4E	; 78
    c8f0:	f8 49       	sbci	r31, 0x98	; 152
    c8f2:	a5 91       	lpm	r26, Z+
    c8f4:	b4 91       	lpm	r27, Z
    c8f6:	ec 91       	ld	r30, X
    c8f8:	8e 22       	and	r8, r30
    c8fa:	31 e0       	ldi	r19, 0x01	; 1
    c8fc:	20 e0       	ldi	r18, 0x00	; 0
    c8fe:	09 f4       	brne	.+2      	; 0xc902 <SoftSPIB::transfer(unsigned char)+0x12c>
    c900:	30 e0       	ldi	r19, 0x00	; 0
_ZN8SoftSPIB8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    c902:	83 2f       	mov	r24, r19
    c904:	92 2f       	mov	r25, r18
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

        /* ... Read bit */
        {
            bval = digitalRead(_miso);

            if (_order == MSBFIRST) {
    c906:	f8 01       	movw	r30, r16
    c908:	26 81       	ldd	r18, Z+6	; 0x06
    c90a:	21 11       	cpse	r18, r1
    c90c:	21 c0       	rjmp	.+66     	; 0xc950 <SoftSPIB::transfer(unsigned char)+0x17a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
    c90e:	99 0c       	add	r9, r9
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    c910:	98 2a       	or	r9, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
    c912:	f8 01       	movw	r30, r16
    c914:	80 81       	ld	r24, Z
    c916:	88 23       	and	r24, r24
    c918:	11 f1       	breq	.+68     	; 0xc95e <SoftSPIB::transfer(unsigned char)+0x188>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
    c91a:	75 01       	movw	r14, r10
    c91c:	ff ef       	ldi	r31, 0xFF	; 255
    c91e:	cf 1a       	sub	r12, r31
    c920:	df 0a       	sbc	r13, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    c922:	28 e0       	ldi	r18, 0x08	; 8
    c924:	c2 16       	cp	r12, r18
    c926:	d1 04       	cpc	r13, r1
    c928:	09 f0       	breq	.+2      	; 0xc92c <SoftSPIB::transfer(unsigned char)+0x156>
    c92a:	aa cf       	rjmp	.-172    	; 0xc880 <SoftSPIB::transfer(unsigned char)+0xaa>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
    c92c:	89 2d       	mov	r24, r9
    c92e:	df 91       	pop	r29
    c930:	cf 91       	pop	r28
    c932:	1f 91       	pop	r17
    c934:	0f 91       	pop	r16
    c936:	ff 90       	pop	r15
    c938:	ef 90       	pop	r14
    c93a:	df 90       	pop	r13
    c93c:	cf 90       	pop	r12
    c93e:	bf 90       	pop	r11
    c940:	af 90       	pop	r10
    c942:	9f 90       	pop	r9
    c944:	8f 90       	pop	r8
    c946:	7f 90       	pop	r7
    c948:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
    c94a:	90 e0       	ldi	r25, 0x00	; 0
    c94c:	80 e0       	ldi	r24, 0x00	; 0
    c94e:	db cf       	rjmp	.-74     	; 0xc906 <SoftSPIB::transfer(unsigned char)+0x130>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    c950:	96 95       	lsr	r25
    c952:	98 2f       	mov	r25, r24
    c954:	88 27       	eor	r24, r24
    c956:	97 95       	ror	r25
    c958:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
    c95a:	96 94       	lsr	r9
    c95c:	d9 cf       	rjmp	.-78     	; 0xc910 <SoftSPIB::transfer(unsigned char)+0x13a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
    c95e:	6e 2d       	mov	r22, r14
    c960:	85 81       	ldd	r24, Z+5	; 0x05
    c962:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
    c966:	da cf       	rjmp	.-76     	; 0xc91c <SoftSPIB::transfer(unsigned char)+0x146>

0000c968 <delay_hus(unsigned long)>:
_Z9delay_husm():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:13
#include "LCDWIKI_TOUCH.h"
#include "mcu_touch_magic.h"
#include "cali_para.h"

void delay_hus(u32 us)
{
    c968:	0f 93       	push	r16
    c96a:	1f 93       	push	r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:16
    //u32 time=100*us/7; 
    //while(--time);
    for (uint8_t i=0; i< us; i++) __asm__("nop\n\t");
    c96c:	40 e0       	ldi	r20, 0x00	; 0
    c96e:	04 2f       	mov	r16, r20
    c970:	10 e0       	ldi	r17, 0x00	; 0
    c972:	30 e0       	ldi	r19, 0x00	; 0
    c974:	20 e0       	ldi	r18, 0x00	; 0
    c976:	06 17       	cp	r16, r22
    c978:	17 07       	cpc	r17, r23
    c97a:	28 07       	cpc	r18, r24
    c97c:	39 07       	cpc	r19, r25
    c97e:	18 f4       	brcc	.+6      	; 0xc986 <delay_hus(unsigned long)+0x1e>
    c980:	00 00       	nop
    c982:	4f 5f       	subi	r20, 0xFF	; 255
    c984:	f4 cf       	rjmp	.-24     	; 0xc96e <delay_hus(unsigned long)+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:17
}
    c986:	1f 91       	pop	r17
    c988:	0f 91       	pop	r16
    c98a:	08 95       	ret

0000c98c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    c98c:	cf 93       	push	r28
    c98e:	df 93       	push	r29
    c990:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:306
  	CS_ACTIVE;
    c992:	a6 a5       	ldd	r26, Z+46	; 0x2e
    c994:	b7 a5       	ldd	r27, Z+47	; 0x2f
    c996:	8c 91       	ld	r24, X
    c998:	92 ad       	ldd	r25, Z+58	; 0x3a
    c99a:	89 23       	and	r24, r25
    c99c:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:307
    writeCmd16(cmd);
    c99e:	a0 a9       	ldd	r26, Z+48	; 0x30
    c9a0:	b1 a9       	ldd	r27, Z+49	; 0x31
    c9a2:	8c 91       	ld	r24, X
    c9a4:	93 ad       	ldd	r25, Z+59	; 0x3b
    c9a6:	89 23       	and	r24, r25
    c9a8:	8c 93       	st	X, r24
    c9aa:	72 b9       	out	0x02, r23	; 2
    c9ac:	a2 a9       	ldd	r26, Z+50	; 0x32
    c9ae:	b3 a9       	ldd	r27, Z+51	; 0x33
    c9b0:	8c 91       	ld	r24, X
    c9b2:	94 ad       	ldd	r25, Z+60	; 0x3c
    c9b4:	89 23       	and	r24, r25
    c9b6:	8c 93       	st	X, r24
    c9b8:	a2 a9       	ldd	r26, Z+50	; 0x32
    c9ba:	b3 a9       	ldd	r27, Z+51	; 0x33
    c9bc:	8c 91       	ld	r24, X
    c9be:	90 ad       	ldd	r25, Z+56	; 0x38
    c9c0:	89 2b       	or	r24, r25
    c9c2:	8c 93       	st	X, r24
    c9c4:	62 b9       	out	0x02, r22	; 2
    c9c6:	a2 a9       	ldd	r26, Z+50	; 0x32
    c9c8:	b3 a9       	ldd	r27, Z+51	; 0x33
    c9ca:	8c 91       	ld	r24, X
    c9cc:	94 ad       	ldd	r25, Z+60	; 0x3c
    c9ce:	89 23       	and	r24, r25
    c9d0:	8c 93       	st	X, r24
    c9d2:	a2 a9       	ldd	r26, Z+50	; 0x32
    c9d4:	b3 a9       	ldd	r27, Z+51	; 0x33
    c9d6:	8c 91       	ld	r24, X
    c9d8:	90 ad       	ldd	r25, Z+56	; 0x38
    c9da:	89 2b       	or	r24, r25
    c9dc:	8c 93       	st	X, r24
    c9de:	a0 a9       	ldd	r26, Z+48	; 0x30
    c9e0:	b1 a9       	ldd	r27, Z+49	; 0x31
    c9e2:	8c 91       	ld	r24, X
    c9e4:	97 a9       	ldd	r25, Z+55	; 0x37
    c9e6:	89 2b       	or	r24, r25
    c9e8:	8c 93       	st	X, r24
    c9ea:	da 01       	movw	r26, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:308
    while (N-- > 0) 
    c9ec:	9f ef       	ldi	r25, 0xFF	; 255
    c9ee:	92 0f       	add	r25, r18
    c9f0:	12 16       	cp	r1, r18
    c9f2:	0c f0       	brlt	.+2      	; 0xc9f6 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
    c9f4:	3f c0       	rjmp	.+126    	; 0xca74 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:310
	{
        uint8_t u8 = *block++;
    c9f6:	8d 91       	ld	r24, X+
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:311
        writeData8(u8); 
    c9f8:	82 b9       	out	0x02, r24	; 2
    c9fa:	c2 a9       	ldd	r28, Z+50	; 0x32
    c9fc:	d3 a9       	ldd	r29, Z+51	; 0x33
    c9fe:	88 81       	ld	r24, Y
    ca00:	24 ad       	ldd	r18, Z+60	; 0x3c
    ca02:	82 23       	and	r24, r18
    ca04:	88 83       	st	Y, r24
    ca06:	c2 a9       	ldd	r28, Z+50	; 0x32
    ca08:	d3 a9       	ldd	r29, Z+51	; 0x33
    ca0a:	88 81       	ld	r24, Y
    ca0c:	20 ad       	ldd	r18, Z+56	; 0x38
    ca0e:	82 2b       	or	r24, r18
    ca10:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:312
		if(N && (lcd_driver == ID_7575))
    ca12:	99 23       	and	r25, r25
    ca14:	69 f1       	breq	.+90     	; 0xca70 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
    ca16:	20 8d       	ldd	r18, Z+24	; 0x18
    ca18:	31 8d       	ldd	r19, Z+25	; 0x19
    ca1a:	21 30       	cpi	r18, 0x01	; 1
    ca1c:	31 05       	cpc	r19, r1
    ca1e:	41 f5       	brne	.+80     	; 0xca70 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:314
		{
			cmd++;
    ca20:	6f 5f       	subi	r22, 0xFF	; 255
    ca22:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:315
			writeCmd16(cmd);
    ca24:	c0 a9       	ldd	r28, Z+48	; 0x30
    ca26:	d1 a9       	ldd	r29, Z+49	; 0x31
    ca28:	88 81       	ld	r24, Y
    ca2a:	23 ad       	ldd	r18, Z+59	; 0x3b
    ca2c:	82 23       	and	r24, r18
    ca2e:	88 83       	st	Y, r24
    ca30:	72 b9       	out	0x02, r23	; 2
    ca32:	c2 a9       	ldd	r28, Z+50	; 0x32
    ca34:	d3 a9       	ldd	r29, Z+51	; 0x33
    ca36:	88 81       	ld	r24, Y
    ca38:	24 ad       	ldd	r18, Z+60	; 0x3c
    ca3a:	82 23       	and	r24, r18
    ca3c:	88 83       	st	Y, r24
    ca3e:	c2 a9       	ldd	r28, Z+50	; 0x32
    ca40:	d3 a9       	ldd	r29, Z+51	; 0x33
    ca42:	88 81       	ld	r24, Y
    ca44:	20 ad       	ldd	r18, Z+56	; 0x38
    ca46:	82 2b       	or	r24, r18
    ca48:	88 83       	st	Y, r24
    ca4a:	62 b9       	out	0x02, r22	; 2
    ca4c:	c2 a9       	ldd	r28, Z+50	; 0x32
    ca4e:	d3 a9       	ldd	r29, Z+51	; 0x33
    ca50:	88 81       	ld	r24, Y
    ca52:	24 ad       	ldd	r18, Z+60	; 0x3c
    ca54:	82 23       	and	r24, r18
    ca56:	88 83       	st	Y, r24
    ca58:	c2 a9       	ldd	r28, Z+50	; 0x32
    ca5a:	d3 a9       	ldd	r29, Z+51	; 0x33
    ca5c:	88 81       	ld	r24, Y
    ca5e:	20 ad       	ldd	r18, Z+56	; 0x38
    ca60:	82 2b       	or	r24, r18
    ca62:	88 83       	st	Y, r24
    ca64:	c0 a9       	ldd	r28, Z+48	; 0x30
    ca66:	d1 a9       	ldd	r29, Z+49	; 0x31
    ca68:	88 81       	ld	r24, Y
    ca6a:	27 a9       	ldd	r18, Z+55	; 0x37
    ca6c:	82 2b       	or	r24, r18
    ca6e:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    ca70:	29 2f       	mov	r18, r25
    ca72:	bc cf       	rjmp	.-136    	; 0xc9ec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:318
		{
			cmd++;
			writeCmd16(cmd);
		}
    }
    CS_IDLE;
    ca74:	a6 a5       	ldd	r26, Z+46	; 0x2e
    ca76:	b7 a5       	ldd	r27, Z+47	; 0x2f
    ca78:	8c 91       	ld	r24, X
    ca7a:	96 a9       	ldd	r25, Z+54	; 0x36
    ca7c:	89 2b       	or	r24, r25
    ca7e:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:319
}
    ca80:	df 91       	pop	r29
    ca82:	cf 91       	pop	r28
    ca84:	08 95       	ret

0000ca86 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:323

// Sets the LCD address window 
void LCDWIKI_KBV::Set_Addr_Window(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
    ca86:	af 92       	push	r10
    ca88:	bf 92       	push	r11
    ca8a:	cf 92       	push	r12
    ca8c:	df 92       	push	r13
    ca8e:	ef 92       	push	r14
    ca90:	ff 92       	push	r15
    ca92:	0f 93       	push	r16
    ca94:	1f 93       	push	r17
    ca96:	cf 93       	push	r28
    ca98:	df 93       	push	r29
    ca9a:	00 d0       	rcall	.+0      	; 0xca9c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
    ca9c:	00 d0       	rcall	.+0      	; 0xca9e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
    ca9e:	1f 92       	push	r1
    caa0:	1f 92       	push	r1
    caa2:	cd b7       	in	r28, 0x3d	; 61
    caa4:	de b7       	in	r29, 0x3e	; 62
    caa6:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:324
	CS_ACTIVE;
    caa8:	dc 01       	movw	r26, r24
    caaa:	9e 96       	adiw	r26, 0x2e	; 46
    caac:	ed 91       	ld	r30, X+
    caae:	fc 91       	ld	r31, X
    cab0:	9f 97       	sbiw	r26, 0x2f	; 47
    cab2:	80 81       	ld	r24, Z
    cab4:	da 96       	adiw	r26, 0x3a	; 58
    cab6:	9c 91       	ld	r25, X
    cab8:	da 97       	sbiw	r26, 0x3a	; 58
    caba:	89 23       	and	r24, r25
    cabc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:325
	if(lcd_driver == ID_932X) 
    cabe:	58 96       	adiw	r26, 0x18	; 24
    cac0:	8d 91       	ld	r24, X+
    cac2:	9c 91       	ld	r25, X
    cac4:	59 97       	sbiw	r26, 0x19	; 25
    cac6:	00 97       	sbiw	r24, 0x00	; 0
    cac8:	09 f0       	breq	.+2      	; 0xcacc <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
    caca:	44 c3       	rjmp	.+1672   	; 0xd154 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:336
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
    cacc:	56 96       	adiw	r26, 0x16	; 22
    cace:	8d 91       	ld	r24, X+
    cad0:	9c 91       	ld	r25, X
    cad2:	57 97       	sbiw	r26, 0x17	; 23
    cad4:	82 30       	cpi	r24, 0x02	; 2
    cad6:	91 05       	cpc	r25, r1
    cad8:	09 f4       	brne	.+2      	; 0xcadc <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
    cada:	0b c3       	rjmp	.+1558   	; 0xd0f2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
    cadc:	83 30       	cpi	r24, 0x03	; 3
    cade:	91 05       	cpc	r25, r1
    cae0:	09 f4       	brne	.+2      	; 0xcae4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
    cae2:	23 c3       	rjmp	.+1606   	; 0xd12a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
    cae4:	01 97       	sbiw	r24, 0x01	; 1
    cae6:	09 f0       	breq	.+2      	; 0xcaea <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
    cae8:	32 c3       	rjmp	.+1636   	; 0xd14e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
    caea:	1e 96       	adiw	r26, 0x0e	; 14
    caec:	0d 90       	ld	r0, X+
    caee:	bc 91       	ld	r27, X
    caf0:	a0 2d       	mov	r26, r0
    caf2:	68 01       	movw	r12, r16
    caf4:	c0 94       	com	r12
    caf6:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      y2 = x2;
			      x2 = WIDTH  - 1 - t;
    caf8:	40 95       	com	r20
    cafa:	50 95       	com	r21
    cafc:	fa 01       	movw	r30, r20
    cafe:	ea 0f       	add	r30, r26
    cb00:	fb 1f       	adc	r31, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:349
			      x  = x2;
			      y  = y1;
    cb02:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:346
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
			      y2 = x2;
    cb04:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      x2 = WIDTH  - 1 - t;
    cb06:	9f 01       	movw	r18, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:344
			      x  = x1;
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
    cb08:	ab 01       	movw	r20, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      x1 = WIDTH  - 1 - y2;
    cb0a:	b6 01       	movw	r22, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    cb0c:	6a 0f       	add	r22, r26
    cb0e:	7b 1f       	adc	r23, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:371
			      y2 = HEIGHT - 1 - t;
			      x  = x1;
			      y  = y2;
			      break;
    	}
    writeCmdData16(ILI932X_HOR_START_AD, x1); // Set address window
    cb10:	d7 01       	movw	r26, r14
    cb12:	d0 96       	adiw	r26, 0x30	; 48
    cb14:	cd 90       	ld	r12, X+
    cb16:	dc 90       	ld	r13, X
    cb18:	d6 01       	movw	r26, r12
    cb1a:	bc 90       	ld	r11, X
    cb1c:	d7 01       	movw	r26, r14
    cb1e:	db 96       	adiw	r26, 0x3b	; 59
    cb20:	ac 90       	ld	r10, X
    cb22:	ba 20       	and	r11, r10
    cb24:	d6 01       	movw	r26, r12
    cb26:	bc 92       	st	X, r11
    cb28:	12 b8       	out	0x02, r1	; 2
    cb2a:	d7 01       	movw	r26, r14
    cb2c:	d2 96       	adiw	r26, 0x32	; 50
    cb2e:	cd 90       	ld	r12, X+
    cb30:	dc 90       	ld	r13, X
    cb32:	d6 01       	movw	r26, r12
    cb34:	bc 90       	ld	r11, X
    cb36:	d7 01       	movw	r26, r14
    cb38:	dc 96       	adiw	r26, 0x3c	; 60
    cb3a:	ac 90       	ld	r10, X
    cb3c:	ba 20       	and	r11, r10
    cb3e:	d6 01       	movw	r26, r12
    cb40:	bc 92       	st	X, r11
    cb42:	d7 01       	movw	r26, r14
    cb44:	d2 96       	adiw	r26, 0x32	; 50
    cb46:	cd 90       	ld	r12, X+
    cb48:	dc 90       	ld	r13, X
    cb4a:	d6 01       	movw	r26, r12
    cb4c:	bc 90       	ld	r11, X
    cb4e:	d7 01       	movw	r26, r14
    cb50:	d8 96       	adiw	r26, 0x38	; 56
    cb52:	ac 90       	ld	r10, X
    cb54:	ba 28       	or	r11, r10
    cb56:	d6 01       	movw	r26, r12
    cb58:	bc 92       	st	X, r11
    cb5a:	a0 e5       	ldi	r26, 0x50	; 80
    cb5c:	a2 b9       	out	0x02, r26	; 2
    cb5e:	d7 01       	movw	r26, r14
    cb60:	d2 96       	adiw	r26, 0x32	; 50
    cb62:	cd 90       	ld	r12, X+
    cb64:	dc 90       	ld	r13, X
    cb66:	d6 01       	movw	r26, r12
    cb68:	bc 90       	ld	r11, X
    cb6a:	d7 01       	movw	r26, r14
    cb6c:	dc 96       	adiw	r26, 0x3c	; 60
    cb6e:	ac 90       	ld	r10, X
    cb70:	ba 20       	and	r11, r10
    cb72:	d6 01       	movw	r26, r12
    cb74:	bc 92       	st	X, r11
    cb76:	d7 01       	movw	r26, r14
    cb78:	d2 96       	adiw	r26, 0x32	; 50
    cb7a:	cd 90       	ld	r12, X+
    cb7c:	dc 90       	ld	r13, X
    cb7e:	d6 01       	movw	r26, r12
    cb80:	bc 90       	ld	r11, X
    cb82:	d7 01       	movw	r26, r14
    cb84:	d8 96       	adiw	r26, 0x38	; 56
    cb86:	ac 90       	ld	r10, X
    cb88:	ba 28       	or	r11, r10
    cb8a:	d6 01       	movw	r26, r12
    cb8c:	bc 92       	st	X, r11
    cb8e:	d7 01       	movw	r26, r14
    cb90:	d0 96       	adiw	r26, 0x30	; 48
    cb92:	cd 90       	ld	r12, X+
    cb94:	dc 90       	ld	r13, X
    cb96:	d6 01       	movw	r26, r12
    cb98:	bc 90       	ld	r11, X
    cb9a:	d7 01       	movw	r26, r14
    cb9c:	d7 96       	adiw	r26, 0x37	; 55
    cb9e:	ac 90       	ld	r10, X
    cba0:	ba 28       	or	r11, r10
    cba2:	d6 01       	movw	r26, r12
    cba4:	bc 92       	st	X, r11
    cba6:	72 b9       	out	0x02, r23	; 2
    cba8:	d7 01       	movw	r26, r14
    cbaa:	d2 96       	adiw	r26, 0x32	; 50
    cbac:	ad 90       	ld	r10, X+
    cbae:	bc 90       	ld	r11, X
    cbb0:	d5 01       	movw	r26, r10
    cbb2:	7c 91       	ld	r23, X
    cbb4:	d7 01       	movw	r26, r14
    cbb6:	dc 96       	adiw	r26, 0x3c	; 60
    cbb8:	dc 90       	ld	r13, X
    cbba:	7d 21       	and	r23, r13
    cbbc:	d5 01       	movw	r26, r10
    cbbe:	7c 93       	st	X, r23
    cbc0:	d7 01       	movw	r26, r14
    cbc2:	d2 96       	adiw	r26, 0x32	; 50
    cbc4:	ad 90       	ld	r10, X+
    cbc6:	bc 90       	ld	r11, X
    cbc8:	d5 01       	movw	r26, r10
    cbca:	7c 91       	ld	r23, X
    cbcc:	d7 01       	movw	r26, r14
    cbce:	d8 96       	adiw	r26, 0x38	; 56
    cbd0:	dc 90       	ld	r13, X
    cbd2:	7d 29       	or	r23, r13
    cbd4:	d5 01       	movw	r26, r10
    cbd6:	7c 93       	st	X, r23
    cbd8:	62 b9       	out	0x02, r22	; 2
    cbda:	d7 01       	movw	r26, r14
    cbdc:	d2 96       	adiw	r26, 0x32	; 50
    cbde:	cd 90       	ld	r12, X+
    cbe0:	dc 90       	ld	r13, X
    cbe2:	d6 01       	movw	r26, r12
    cbe4:	6c 91       	ld	r22, X
    cbe6:	d7 01       	movw	r26, r14
    cbe8:	dc 96       	adiw	r26, 0x3c	; 60
    cbea:	7c 91       	ld	r23, X
    cbec:	67 23       	and	r22, r23
    cbee:	d6 01       	movw	r26, r12
    cbf0:	6c 93       	st	X, r22
    cbf2:	d7 01       	movw	r26, r14
    cbf4:	d2 96       	adiw	r26, 0x32	; 50
    cbf6:	cd 90       	ld	r12, X+
    cbf8:	dc 90       	ld	r13, X
    cbfa:	d6 01       	movw	r26, r12
    cbfc:	6c 91       	ld	r22, X
    cbfe:	d7 01       	movw	r26, r14
    cc00:	d8 96       	adiw	r26, 0x38	; 56
    cc02:	7c 91       	ld	r23, X
    cc04:	67 2b       	or	r22, r23
    cc06:	d6 01       	movw	r26, r12
    cc08:	6c 93       	st	X, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:372
    writeCmdData16(ILI932X_HOR_END_AD, x2);
    cc0a:	d7 01       	movw	r26, r14
    cc0c:	d0 96       	adiw	r26, 0x30	; 48
    cc0e:	cd 90       	ld	r12, X+
    cc10:	dc 90       	ld	r13, X
    cc12:	d6 01       	movw	r26, r12
    cc14:	6c 91       	ld	r22, X
    cc16:	d7 01       	movw	r26, r14
    cc18:	db 96       	adiw	r26, 0x3b	; 59
    cc1a:	7c 91       	ld	r23, X
    cc1c:	67 23       	and	r22, r23
    cc1e:	d6 01       	movw	r26, r12
    cc20:	6c 93       	st	X, r22
    cc22:	12 b8       	out	0x02, r1	; 2
    cc24:	d7 01       	movw	r26, r14
    cc26:	d2 96       	adiw	r26, 0x32	; 50
    cc28:	cd 90       	ld	r12, X+
    cc2a:	dc 90       	ld	r13, X
    cc2c:	d6 01       	movw	r26, r12
    cc2e:	6c 91       	ld	r22, X
    cc30:	d7 01       	movw	r26, r14
    cc32:	dc 96       	adiw	r26, 0x3c	; 60
    cc34:	7c 91       	ld	r23, X
    cc36:	67 23       	and	r22, r23
    cc38:	d6 01       	movw	r26, r12
    cc3a:	6c 93       	st	X, r22
    cc3c:	d7 01       	movw	r26, r14
    cc3e:	d2 96       	adiw	r26, 0x32	; 50
    cc40:	cd 90       	ld	r12, X+
    cc42:	dc 90       	ld	r13, X
    cc44:	d6 01       	movw	r26, r12
    cc46:	6c 91       	ld	r22, X
    cc48:	d7 01       	movw	r26, r14
    cc4a:	d8 96       	adiw	r26, 0x38	; 56
    cc4c:	7c 91       	ld	r23, X
    cc4e:	67 2b       	or	r22, r23
    cc50:	d6 01       	movw	r26, r12
    cc52:	6c 93       	st	X, r22
    cc54:	61 e5       	ldi	r22, 0x51	; 81
    cc56:	62 b9       	out	0x02, r22	; 2
    cc58:	d7 01       	movw	r26, r14
    cc5a:	d2 96       	adiw	r26, 0x32	; 50
    cc5c:	cd 90       	ld	r12, X+
    cc5e:	dc 90       	ld	r13, X
    cc60:	d6 01       	movw	r26, r12
    cc62:	6c 91       	ld	r22, X
    cc64:	d7 01       	movw	r26, r14
    cc66:	dc 96       	adiw	r26, 0x3c	; 60
    cc68:	7c 91       	ld	r23, X
    cc6a:	67 23       	and	r22, r23
    cc6c:	d6 01       	movw	r26, r12
    cc6e:	6c 93       	st	X, r22
    cc70:	d7 01       	movw	r26, r14
    cc72:	d2 96       	adiw	r26, 0x32	; 50
    cc74:	cd 90       	ld	r12, X+
    cc76:	dc 90       	ld	r13, X
    cc78:	d6 01       	movw	r26, r12
    cc7a:	6c 91       	ld	r22, X
    cc7c:	d7 01       	movw	r26, r14
    cc7e:	d8 96       	adiw	r26, 0x38	; 56
    cc80:	7c 91       	ld	r23, X
    cc82:	67 2b       	or	r22, r23
    cc84:	d6 01       	movw	r26, r12
    cc86:	6c 93       	st	X, r22
    cc88:	d7 01       	movw	r26, r14
    cc8a:	d0 96       	adiw	r26, 0x30	; 48
    cc8c:	cd 90       	ld	r12, X+
    cc8e:	dc 90       	ld	r13, X
    cc90:	d6 01       	movw	r26, r12
    cc92:	6c 91       	ld	r22, X
    cc94:	d7 01       	movw	r26, r14
    cc96:	d7 96       	adiw	r26, 0x37	; 55
    cc98:	7c 91       	ld	r23, X
    cc9a:	67 2b       	or	r22, r23
    cc9c:	d6 01       	movw	r26, r12
    cc9e:	6c 93       	st	X, r22
    cca0:	32 b9       	out	0x02, r19	; 2
    cca2:	d7 01       	movw	r26, r14
    cca4:	d2 96       	adiw	r26, 0x32	; 50
    cca6:	cd 90       	ld	r12, X+
    cca8:	dc 90       	ld	r13, X
    ccaa:	d6 01       	movw	r26, r12
    ccac:	3c 91       	ld	r19, X
    ccae:	d7 01       	movw	r26, r14
    ccb0:	dc 96       	adiw	r26, 0x3c	; 60
    ccb2:	6c 91       	ld	r22, X
    ccb4:	36 23       	and	r19, r22
    ccb6:	d6 01       	movw	r26, r12
    ccb8:	3c 93       	st	X, r19
    ccba:	d7 01       	movw	r26, r14
    ccbc:	d2 96       	adiw	r26, 0x32	; 50
    ccbe:	cd 90       	ld	r12, X+
    ccc0:	dc 90       	ld	r13, X
    ccc2:	d6 01       	movw	r26, r12
    ccc4:	3c 91       	ld	r19, X
    ccc6:	d7 01       	movw	r26, r14
    ccc8:	d8 96       	adiw	r26, 0x38	; 56
    ccca:	6c 91       	ld	r22, X
    cccc:	36 2b       	or	r19, r22
    ccce:	d6 01       	movw	r26, r12
    ccd0:	3c 93       	st	X, r19
    ccd2:	22 b9       	out	0x02, r18	; 2
    ccd4:	d7 01       	movw	r26, r14
    ccd6:	d2 96       	adiw	r26, 0x32	; 50
    ccd8:	6d 91       	ld	r22, X+
    ccda:	7c 91       	ld	r23, X
    ccdc:	db 01       	movw	r26, r22
    ccde:	2c 91       	ld	r18, X
    cce0:	d7 01       	movw	r26, r14
    cce2:	dc 96       	adiw	r26, 0x3c	; 60
    cce4:	3c 91       	ld	r19, X
    cce6:	23 23       	and	r18, r19
    cce8:	db 01       	movw	r26, r22
    ccea:	2c 93       	st	X, r18
    ccec:	d7 01       	movw	r26, r14
    ccee:	d2 96       	adiw	r26, 0x32	; 50
    ccf0:	6d 91       	ld	r22, X+
    ccf2:	7c 91       	ld	r23, X
    ccf4:	db 01       	movw	r26, r22
    ccf6:	2c 91       	ld	r18, X
    ccf8:	d7 01       	movw	r26, r14
    ccfa:	d8 96       	adiw	r26, 0x38	; 56
    ccfc:	3c 91       	ld	r19, X
    ccfe:	23 2b       	or	r18, r19
    cd00:	db 01       	movw	r26, r22
    cd02:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:373
    writeCmdData16(ILI932X_VER_START_AD, y1);
    cd04:	d7 01       	movw	r26, r14
    cd06:	d0 96       	adiw	r26, 0x30	; 48
    cd08:	6d 91       	ld	r22, X+
    cd0a:	7c 91       	ld	r23, X
    cd0c:	db 01       	movw	r26, r22
    cd0e:	2c 91       	ld	r18, X
    cd10:	d7 01       	movw	r26, r14
    cd12:	db 96       	adiw	r26, 0x3b	; 59
    cd14:	3c 91       	ld	r19, X
    cd16:	23 23       	and	r18, r19
    cd18:	db 01       	movw	r26, r22
    cd1a:	2c 93       	st	X, r18
    cd1c:	12 b8       	out	0x02, r1	; 2
    cd1e:	d7 01       	movw	r26, r14
    cd20:	d2 96       	adiw	r26, 0x32	; 50
    cd22:	6d 91       	ld	r22, X+
    cd24:	7c 91       	ld	r23, X
    cd26:	db 01       	movw	r26, r22
    cd28:	2c 91       	ld	r18, X
    cd2a:	d7 01       	movw	r26, r14
    cd2c:	dc 96       	adiw	r26, 0x3c	; 60
    cd2e:	3c 91       	ld	r19, X
    cd30:	23 23       	and	r18, r19
    cd32:	db 01       	movw	r26, r22
    cd34:	2c 93       	st	X, r18
    cd36:	d7 01       	movw	r26, r14
    cd38:	d2 96       	adiw	r26, 0x32	; 50
    cd3a:	6d 91       	ld	r22, X+
    cd3c:	7c 91       	ld	r23, X
    cd3e:	db 01       	movw	r26, r22
    cd40:	2c 91       	ld	r18, X
    cd42:	d7 01       	movw	r26, r14
    cd44:	d8 96       	adiw	r26, 0x38	; 56
    cd46:	3c 91       	ld	r19, X
    cd48:	23 2b       	or	r18, r19
    cd4a:	db 01       	movw	r26, r22
    cd4c:	2c 93       	st	X, r18
    cd4e:	22 e5       	ldi	r18, 0x52	; 82
    cd50:	22 b9       	out	0x02, r18	; 2
    cd52:	d7 01       	movw	r26, r14
    cd54:	d2 96       	adiw	r26, 0x32	; 50
    cd56:	6d 91       	ld	r22, X+
    cd58:	7c 91       	ld	r23, X
    cd5a:	db 01       	movw	r26, r22
    cd5c:	2c 91       	ld	r18, X
    cd5e:	d7 01       	movw	r26, r14
    cd60:	dc 96       	adiw	r26, 0x3c	; 60
    cd62:	3c 91       	ld	r19, X
    cd64:	23 23       	and	r18, r19
    cd66:	db 01       	movw	r26, r22
    cd68:	2c 93       	st	X, r18
    cd6a:	d7 01       	movw	r26, r14
    cd6c:	d2 96       	adiw	r26, 0x32	; 50
    cd6e:	6d 91       	ld	r22, X+
    cd70:	7c 91       	ld	r23, X
    cd72:	db 01       	movw	r26, r22
    cd74:	2c 91       	ld	r18, X
    cd76:	d7 01       	movw	r26, r14
    cd78:	d8 96       	adiw	r26, 0x38	; 56
    cd7a:	3c 91       	ld	r19, X
    cd7c:	23 2b       	or	r18, r19
    cd7e:	db 01       	movw	r26, r22
    cd80:	2c 93       	st	X, r18
    cd82:	d7 01       	movw	r26, r14
    cd84:	d0 96       	adiw	r26, 0x30	; 48
    cd86:	6d 91       	ld	r22, X+
    cd88:	7c 91       	ld	r23, X
    cd8a:	db 01       	movw	r26, r22
    cd8c:	2c 91       	ld	r18, X
    cd8e:	d7 01       	movw	r26, r14
    cd90:	d7 96       	adiw	r26, 0x37	; 55
    cd92:	3c 91       	ld	r19, X
    cd94:	23 2b       	or	r18, r19
    cd96:	db 01       	movw	r26, r22
    cd98:	2c 93       	st	X, r18
    cd9a:	52 b9       	out	0x02, r21	; 2
    cd9c:	d7 01       	movw	r26, r14
    cd9e:	d2 96       	adiw	r26, 0x32	; 50
    cda0:	6d 91       	ld	r22, X+
    cda2:	7c 91       	ld	r23, X
    cda4:	db 01       	movw	r26, r22
    cda6:	2c 91       	ld	r18, X
    cda8:	d7 01       	movw	r26, r14
    cdaa:	dc 96       	adiw	r26, 0x3c	; 60
    cdac:	3c 91       	ld	r19, X
    cdae:	23 23       	and	r18, r19
    cdb0:	db 01       	movw	r26, r22
    cdb2:	2c 93       	st	X, r18
    cdb4:	d7 01       	movw	r26, r14
    cdb6:	d2 96       	adiw	r26, 0x32	; 50
    cdb8:	6d 91       	ld	r22, X+
    cdba:	7c 91       	ld	r23, X
    cdbc:	db 01       	movw	r26, r22
    cdbe:	2c 91       	ld	r18, X
    cdc0:	d7 01       	movw	r26, r14
    cdc2:	d8 96       	adiw	r26, 0x38	; 56
    cdc4:	3c 91       	ld	r19, X
    cdc6:	23 2b       	or	r18, r19
    cdc8:	db 01       	movw	r26, r22
    cdca:	2c 93       	st	X, r18
    cdcc:	42 b9       	out	0x02, r20	; 2
    cdce:	d7 01       	movw	r26, r14
    cdd0:	d2 96       	adiw	r26, 0x32	; 50
    cdd2:	4d 91       	ld	r20, X+
    cdd4:	5c 91       	ld	r21, X
    cdd6:	da 01       	movw	r26, r20
    cdd8:	2c 91       	ld	r18, X
    cdda:	d7 01       	movw	r26, r14
    cddc:	dc 96       	adiw	r26, 0x3c	; 60
    cdde:	3c 91       	ld	r19, X
    cde0:	23 23       	and	r18, r19
    cde2:	da 01       	movw	r26, r20
    cde4:	2c 93       	st	X, r18
    cde6:	d7 01       	movw	r26, r14
    cde8:	d2 96       	adiw	r26, 0x32	; 50
    cdea:	4d 91       	ld	r20, X+
    cdec:	5c 91       	ld	r21, X
    cdee:	da 01       	movw	r26, r20
    cdf0:	2c 91       	ld	r18, X
    cdf2:	d7 01       	movw	r26, r14
    cdf4:	d8 96       	adiw	r26, 0x38	; 56
    cdf6:	3c 91       	ld	r19, X
    cdf8:	23 2b       	or	r18, r19
    cdfa:	da 01       	movw	r26, r20
    cdfc:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:374
    writeCmdData16(ILI932X_VER_END_AD, y2);
    cdfe:	d7 01       	movw	r26, r14
    ce00:	d0 96       	adiw	r26, 0x30	; 48
    ce02:	4d 91       	ld	r20, X+
    ce04:	5c 91       	ld	r21, X
    ce06:	da 01       	movw	r26, r20
    ce08:	2c 91       	ld	r18, X
    ce0a:	d7 01       	movw	r26, r14
    ce0c:	db 96       	adiw	r26, 0x3b	; 59
    ce0e:	3c 91       	ld	r19, X
    ce10:	23 23       	and	r18, r19
    ce12:	da 01       	movw	r26, r20
    ce14:	2c 93       	st	X, r18
    ce16:	12 b8       	out	0x02, r1	; 2
    ce18:	d7 01       	movw	r26, r14
    ce1a:	d2 96       	adiw	r26, 0x32	; 50
    ce1c:	4d 91       	ld	r20, X+
    ce1e:	5c 91       	ld	r21, X
    ce20:	da 01       	movw	r26, r20
    ce22:	2c 91       	ld	r18, X
    ce24:	d7 01       	movw	r26, r14
    ce26:	dc 96       	adiw	r26, 0x3c	; 60
    ce28:	3c 91       	ld	r19, X
    ce2a:	23 23       	and	r18, r19
    ce2c:	da 01       	movw	r26, r20
    ce2e:	2c 93       	st	X, r18
    ce30:	d7 01       	movw	r26, r14
    ce32:	d2 96       	adiw	r26, 0x32	; 50
    ce34:	4d 91       	ld	r20, X+
    ce36:	5c 91       	ld	r21, X
    ce38:	da 01       	movw	r26, r20
    ce3a:	2c 91       	ld	r18, X
    ce3c:	d7 01       	movw	r26, r14
    ce3e:	d8 96       	adiw	r26, 0x38	; 56
    ce40:	3c 91       	ld	r19, X
    ce42:	23 2b       	or	r18, r19
    ce44:	da 01       	movw	r26, r20
    ce46:	2c 93       	st	X, r18
    ce48:	23 e5       	ldi	r18, 0x53	; 83
    ce4a:	22 b9       	out	0x02, r18	; 2
    ce4c:	d7 01       	movw	r26, r14
    ce4e:	d2 96       	adiw	r26, 0x32	; 50
    ce50:	4d 91       	ld	r20, X+
    ce52:	5c 91       	ld	r21, X
    ce54:	da 01       	movw	r26, r20
    ce56:	2c 91       	ld	r18, X
    ce58:	d7 01       	movw	r26, r14
    ce5a:	dc 96       	adiw	r26, 0x3c	; 60
    ce5c:	3c 91       	ld	r19, X
    ce5e:	23 23       	and	r18, r19
    ce60:	da 01       	movw	r26, r20
    ce62:	2c 93       	st	X, r18
    ce64:	d7 01       	movw	r26, r14
    ce66:	d2 96       	adiw	r26, 0x32	; 50
    ce68:	4d 91       	ld	r20, X+
    ce6a:	5c 91       	ld	r21, X
    ce6c:	da 01       	movw	r26, r20
    ce6e:	2c 91       	ld	r18, X
    ce70:	d7 01       	movw	r26, r14
    ce72:	d8 96       	adiw	r26, 0x38	; 56
    ce74:	3c 91       	ld	r19, X
    ce76:	23 2b       	or	r18, r19
    ce78:	da 01       	movw	r26, r20
    ce7a:	2c 93       	st	X, r18
    ce7c:	d7 01       	movw	r26, r14
    ce7e:	d0 96       	adiw	r26, 0x30	; 48
    ce80:	4d 91       	ld	r20, X+
    ce82:	5c 91       	ld	r21, X
    ce84:	da 01       	movw	r26, r20
    ce86:	2c 91       	ld	r18, X
    ce88:	d7 01       	movw	r26, r14
    ce8a:	d7 96       	adiw	r26, 0x37	; 55
    ce8c:	3c 91       	ld	r19, X
    ce8e:	23 2b       	or	r18, r19
    ce90:	da 01       	movw	r26, r20
    ce92:	2c 93       	st	X, r18
    ce94:	12 b9       	out	0x02, r17	; 2
    ce96:	d7 01       	movw	r26, r14
    ce98:	d2 96       	adiw	r26, 0x32	; 50
    ce9a:	4d 91       	ld	r20, X+
    ce9c:	5c 91       	ld	r21, X
    ce9e:	da 01       	movw	r26, r20
    cea0:	2c 91       	ld	r18, X
    cea2:	d7 01       	movw	r26, r14
    cea4:	dc 96       	adiw	r26, 0x3c	; 60
    cea6:	3c 91       	ld	r19, X
    cea8:	23 23       	and	r18, r19
    ceaa:	da 01       	movw	r26, r20
    ceac:	2c 93       	st	X, r18
    ceae:	d7 01       	movw	r26, r14
    ceb0:	d2 96       	adiw	r26, 0x32	; 50
    ceb2:	4d 91       	ld	r20, X+
    ceb4:	5c 91       	ld	r21, X
    ceb6:	da 01       	movw	r26, r20
    ceb8:	2c 91       	ld	r18, X
    ceba:	d7 01       	movw	r26, r14
    cebc:	d8 96       	adiw	r26, 0x38	; 56
    cebe:	3c 91       	ld	r19, X
    cec0:	23 2b       	or	r18, r19
    cec2:	da 01       	movw	r26, r20
    cec4:	2c 93       	st	X, r18
    cec6:	02 b9       	out	0x02, r16	; 2
    cec8:	d7 01       	movw	r26, r14
    ceca:	d2 96       	adiw	r26, 0x32	; 50
    cecc:	4d 91       	ld	r20, X+
    cece:	5c 91       	ld	r21, X
    ced0:	da 01       	movw	r26, r20
    ced2:	2c 91       	ld	r18, X
    ced4:	d7 01       	movw	r26, r14
    ced6:	dc 96       	adiw	r26, 0x3c	; 60
    ced8:	3c 91       	ld	r19, X
    ceda:	23 23       	and	r18, r19
    cedc:	da 01       	movw	r26, r20
    cede:	2c 93       	st	X, r18
    cee0:	d7 01       	movw	r26, r14
    cee2:	d2 96       	adiw	r26, 0x32	; 50
    cee4:	4d 91       	ld	r20, X+
    cee6:	5c 91       	ld	r21, X
    cee8:	da 01       	movw	r26, r20
    ceea:	2c 91       	ld	r18, X
    ceec:	d7 01       	movw	r26, r14
    ceee:	d8 96       	adiw	r26, 0x38	; 56
    cef0:	3c 91       	ld	r19, X
    cef2:	23 2b       	or	r18, r19
    cef4:	da 01       	movw	r26, r20
    cef6:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:375
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    cef8:	d7 01       	movw	r26, r14
    cefa:	d0 96       	adiw	r26, 0x30	; 48
    cefc:	4d 91       	ld	r20, X+
    cefe:	5c 91       	ld	r21, X
    cf00:	da 01       	movw	r26, r20
    cf02:	2c 91       	ld	r18, X
    cf04:	d7 01       	movw	r26, r14
    cf06:	db 96       	adiw	r26, 0x3b	; 59
    cf08:	3c 91       	ld	r19, X
    cf0a:	23 23       	and	r18, r19
    cf0c:	da 01       	movw	r26, r20
    cf0e:	2c 93       	st	X, r18
    cf10:	12 b8       	out	0x02, r1	; 2
    cf12:	d7 01       	movw	r26, r14
    cf14:	d2 96       	adiw	r26, 0x32	; 50
    cf16:	4d 91       	ld	r20, X+
    cf18:	5c 91       	ld	r21, X
    cf1a:	da 01       	movw	r26, r20
    cf1c:	2c 91       	ld	r18, X
    cf1e:	d7 01       	movw	r26, r14
    cf20:	dc 96       	adiw	r26, 0x3c	; 60
    cf22:	3c 91       	ld	r19, X
    cf24:	23 23       	and	r18, r19
    cf26:	da 01       	movw	r26, r20
    cf28:	2c 93       	st	X, r18
    cf2a:	d7 01       	movw	r26, r14
    cf2c:	d2 96       	adiw	r26, 0x32	; 50
    cf2e:	4d 91       	ld	r20, X+
    cf30:	5c 91       	ld	r21, X
    cf32:	da 01       	movw	r26, r20
    cf34:	2c 91       	ld	r18, X
    cf36:	d7 01       	movw	r26, r14
    cf38:	d8 96       	adiw	r26, 0x38	; 56
    cf3a:	3c 91       	ld	r19, X
    cf3c:	23 2b       	or	r18, r19
    cf3e:	da 01       	movw	r26, r20
    cf40:	2c 93       	st	X, r18
    cf42:	20 e2       	ldi	r18, 0x20	; 32
    cf44:	22 b9       	out	0x02, r18	; 2
    cf46:	d7 01       	movw	r26, r14
    cf48:	d2 96       	adiw	r26, 0x32	; 50
    cf4a:	4d 91       	ld	r20, X+
    cf4c:	5c 91       	ld	r21, X
    cf4e:	da 01       	movw	r26, r20
    cf50:	2c 91       	ld	r18, X
    cf52:	d7 01       	movw	r26, r14
    cf54:	dc 96       	adiw	r26, 0x3c	; 60
    cf56:	3c 91       	ld	r19, X
    cf58:	23 23       	and	r18, r19
    cf5a:	da 01       	movw	r26, r20
    cf5c:	2c 93       	st	X, r18
    cf5e:	d7 01       	movw	r26, r14
    cf60:	d2 96       	adiw	r26, 0x32	; 50
    cf62:	4d 91       	ld	r20, X+
    cf64:	5c 91       	ld	r21, X
    cf66:	da 01       	movw	r26, r20
    cf68:	2c 91       	ld	r18, X
    cf6a:	d7 01       	movw	r26, r14
    cf6c:	d8 96       	adiw	r26, 0x38	; 56
    cf6e:	3c 91       	ld	r19, X
    cf70:	23 2b       	or	r18, r19
    cf72:	da 01       	movw	r26, r20
    cf74:	2c 93       	st	X, r18
    cf76:	d7 01       	movw	r26, r14
    cf78:	d0 96       	adiw	r26, 0x30	; 48
    cf7a:	4d 91       	ld	r20, X+
    cf7c:	5c 91       	ld	r21, X
    cf7e:	da 01       	movw	r26, r20
    cf80:	2c 91       	ld	r18, X
    cf82:	d7 01       	movw	r26, r14
    cf84:	d7 96       	adiw	r26, 0x37	; 55
    cf86:	3c 91       	ld	r19, X
    cf88:	23 2b       	or	r18, r19
    cf8a:	da 01       	movw	r26, r20
    cf8c:	2c 93       	st	X, r18
    cf8e:	f2 b9       	out	0x02, r31	; 2
    cf90:	d7 01       	movw	r26, r14
    cf92:	d2 96       	adiw	r26, 0x32	; 50
    cf94:	4d 91       	ld	r20, X+
    cf96:	5c 91       	ld	r21, X
    cf98:	da 01       	movw	r26, r20
    cf9a:	2c 91       	ld	r18, X
    cf9c:	d7 01       	movw	r26, r14
    cf9e:	dc 96       	adiw	r26, 0x3c	; 60
    cfa0:	3c 91       	ld	r19, X
    cfa2:	23 23       	and	r18, r19
    cfa4:	da 01       	movw	r26, r20
    cfa6:	2c 93       	st	X, r18
    cfa8:	d7 01       	movw	r26, r14
    cfaa:	d2 96       	adiw	r26, 0x32	; 50
    cfac:	4d 91       	ld	r20, X+
    cfae:	5c 91       	ld	r21, X
    cfb0:	da 01       	movw	r26, r20
    cfb2:	2c 91       	ld	r18, X
    cfb4:	d7 01       	movw	r26, r14
    cfb6:	d8 96       	adiw	r26, 0x38	; 56
    cfb8:	3c 91       	ld	r19, X
    cfba:	23 2b       	or	r18, r19
    cfbc:	da 01       	movw	r26, r20
    cfbe:	2c 93       	st	X, r18
    cfc0:	e2 b9       	out	0x02, r30	; 2
    cfc2:	d7 01       	movw	r26, r14
    cfc4:	d2 96       	adiw	r26, 0x32	; 50
    cfc6:	ed 91       	ld	r30, X+
    cfc8:	fc 91       	ld	r31, X
    cfca:	d3 97       	sbiw	r26, 0x33	; 51
    cfcc:	20 81       	ld	r18, Z
    cfce:	dc 96       	adiw	r26, 0x3c	; 60
    cfd0:	3c 91       	ld	r19, X
    cfd2:	dc 97       	sbiw	r26, 0x3c	; 60
    cfd4:	23 23       	and	r18, r19
    cfd6:	20 83       	st	Z, r18
    cfd8:	d2 96       	adiw	r26, 0x32	; 50
    cfda:	ed 91       	ld	r30, X+
    cfdc:	fc 91       	ld	r31, X
    cfde:	d3 97       	sbiw	r26, 0x33	; 51
    cfe0:	20 81       	ld	r18, Z
    cfe2:	d8 96       	adiw	r26, 0x38	; 56
    cfe4:	3c 91       	ld	r19, X
    cfe6:	d8 97       	sbiw	r26, 0x38	; 56
    cfe8:	23 2b       	or	r18, r19
    cfea:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:376
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
    cfec:	d0 96       	adiw	r26, 0x30	; 48
    cfee:	ed 91       	ld	r30, X+
    cff0:	fc 91       	ld	r31, X
    cff2:	d1 97       	sbiw	r26, 0x31	; 49
    cff4:	20 81       	ld	r18, Z
    cff6:	db 96       	adiw	r26, 0x3b	; 59
    cff8:	3c 91       	ld	r19, X
    cffa:	db 97       	sbiw	r26, 0x3b	; 59
    cffc:	23 23       	and	r18, r19
    cffe:	20 83       	st	Z, r18
    d000:	12 b8       	out	0x02, r1	; 2
    d002:	d2 96       	adiw	r26, 0x32	; 50
    d004:	ed 91       	ld	r30, X+
    d006:	fc 91       	ld	r31, X
    d008:	d3 97       	sbiw	r26, 0x33	; 51
    d00a:	20 81       	ld	r18, Z
    d00c:	dc 96       	adiw	r26, 0x3c	; 60
    d00e:	3c 91       	ld	r19, X
    d010:	dc 97       	sbiw	r26, 0x3c	; 60
    d012:	23 23       	and	r18, r19
    d014:	20 83       	st	Z, r18
    d016:	d2 96       	adiw	r26, 0x32	; 50
    d018:	ed 91       	ld	r30, X+
    d01a:	fc 91       	ld	r31, X
    d01c:	d3 97       	sbiw	r26, 0x33	; 51
    d01e:	20 81       	ld	r18, Z
    d020:	d8 96       	adiw	r26, 0x38	; 56
    d022:	3c 91       	ld	r19, X
    d024:	d8 97       	sbiw	r26, 0x38	; 56
    d026:	23 2b       	or	r18, r19
    d028:	20 83       	st	Z, r18
    d02a:	21 e2       	ldi	r18, 0x21	; 33
    d02c:	22 b9       	out	0x02, r18	; 2
    d02e:	d2 96       	adiw	r26, 0x32	; 50
    d030:	ed 91       	ld	r30, X+
    d032:	fc 91       	ld	r31, X
    d034:	d3 97       	sbiw	r26, 0x33	; 51
    d036:	20 81       	ld	r18, Z
    d038:	dc 96       	adiw	r26, 0x3c	; 60
    d03a:	3c 91       	ld	r19, X
    d03c:	dc 97       	sbiw	r26, 0x3c	; 60
    d03e:	23 23       	and	r18, r19
    d040:	20 83       	st	Z, r18
    d042:	d2 96       	adiw	r26, 0x32	; 50
    d044:	ed 91       	ld	r30, X+
    d046:	fc 91       	ld	r31, X
    d048:	d3 97       	sbiw	r26, 0x33	; 51
    d04a:	20 81       	ld	r18, Z
    d04c:	d8 96       	adiw	r26, 0x38	; 56
    d04e:	3c 91       	ld	r19, X
    d050:	d8 97       	sbiw	r26, 0x38	; 56
    d052:	23 2b       	or	r18, r19
    d054:	20 83       	st	Z, r18
    d056:	d0 96       	adiw	r26, 0x30	; 48
    d058:	ed 91       	ld	r30, X+
    d05a:	fc 91       	ld	r31, X
    d05c:	d1 97       	sbiw	r26, 0x31	; 49
    d05e:	20 81       	ld	r18, Z
    d060:	d7 96       	adiw	r26, 0x37	; 55
    d062:	3c 91       	ld	r19, X
    d064:	d7 97       	sbiw	r26, 0x37	; 55
    d066:	23 2b       	or	r18, r19
    d068:	20 83       	st	Z, r18
    d06a:	92 b9       	out	0x02, r25	; 2
    d06c:	d2 96       	adiw	r26, 0x32	; 50
    d06e:	ed 91       	ld	r30, X+
    d070:	fc 91       	ld	r31, X
    d072:	d3 97       	sbiw	r26, 0x33	; 51
    d074:	90 81       	ld	r25, Z
    d076:	dc 96       	adiw	r26, 0x3c	; 60
    d078:	2c 91       	ld	r18, X
    d07a:	dc 97       	sbiw	r26, 0x3c	; 60
    d07c:	92 23       	and	r25, r18
    d07e:	90 83       	st	Z, r25
    d080:	d2 96       	adiw	r26, 0x32	; 50
    d082:	ed 91       	ld	r30, X+
    d084:	fc 91       	ld	r31, X
    d086:	d3 97       	sbiw	r26, 0x33	; 51
    d088:	90 81       	ld	r25, Z
    d08a:	d8 96       	adiw	r26, 0x38	; 56
    d08c:	2c 91       	ld	r18, X
    d08e:	d8 97       	sbiw	r26, 0x38	; 56
    d090:	92 2b       	or	r25, r18
    d092:	90 83       	st	Z, r25
    d094:	82 b9       	out	0x02, r24	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    d096:	d2 96       	adiw	r26, 0x32	; 50
    d098:	ed 91       	ld	r30, X+
    d09a:	fc 91       	ld	r31, X
    d09c:	d3 97       	sbiw	r26, 0x33	; 51
    d09e:	80 81       	ld	r24, Z
    d0a0:	dc 96       	adiw	r26, 0x3c	; 60
    d0a2:	9c 91       	ld	r25, X
    d0a4:	dc 97       	sbiw	r26, 0x3c	; 60
    d0a6:	89 23       	and	r24, r25
    d0a8:	80 83       	st	Z, r24
    d0aa:	d2 96       	adiw	r26, 0x32	; 50
    d0ac:	ed 91       	ld	r30, X+
    d0ae:	fc 91       	ld	r31, X
    d0b0:	d3 97       	sbiw	r26, 0x33	; 51
    d0b2:	80 81       	ld	r24, Z
    d0b4:	d8 96       	adiw	r26, 0x38	; 56
    d0b6:	9c 91       	ld	r25, X
    d0b8:	89 2b       	or	r24, r25
    d0ba:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:397
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
	
		Push_Command(XC, x_buf, 4); //set x address
		Push_Command(YC, y_buf, 4); //set y address
	}
	CS_IDLE;		
    d0bc:	d7 01       	movw	r26, r14
    d0be:	9e 96       	adiw	r26, 0x2e	; 46
    d0c0:	ed 91       	ld	r30, X+
    d0c2:	fc 91       	ld	r31, X
    d0c4:	9f 97       	sbiw	r26, 0x2f	; 47
    d0c6:	80 81       	ld	r24, Z
    d0c8:	d6 96       	adiw	r26, 0x36	; 54
    d0ca:	9c 91       	ld	r25, X
    d0cc:	89 2b       	or	r24, r25
    d0ce:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:398
}
    d0d0:	28 96       	adiw	r28, 0x08	; 8
    d0d2:	0f b6       	in	r0, 0x3f	; 63
    d0d4:	f8 94       	cli
    d0d6:	de bf       	out	0x3e, r29	; 62
    d0d8:	0f be       	out	0x3f, r0	; 63
    d0da:	cd bf       	out	0x3d, r28	; 61
    d0dc:	df 91       	pop	r29
    d0de:	cf 91       	pop	r28
    d0e0:	1f 91       	pop	r17
    d0e2:	0f 91       	pop	r16
    d0e4:	ff 90       	pop	r15
    d0e6:	ef 90       	pop	r14
    d0e8:	df 90       	pop	r13
    d0ea:	cf 90       	pop	r12
    d0ec:	bf 90       	pop	r11
    d0ee:	af 90       	pop	r10
    d0f0:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    d0f2:	f7 01       	movw	r30, r14
    d0f4:	a6 85       	ldd	r26, Z+14	; 0x0e
    d0f6:	b7 85       	ldd	r27, Z+15	; 0x0f
    d0f8:	59 01       	movw	r10, r18
    d0fa:	a0 94       	com	r10
    d0fc:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:354
			      x2 = WIDTH  - 1 - t;
    d0fe:	9d 01       	movw	r18, r26
    d100:	26 1b       	sub	r18, r22
    d102:	37 0b       	sbc	r19, r23
    d104:	21 50       	subi	r18, 0x01	; 1
    d106:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    d108:	60 89       	ldd	r22, Z+16	; 0x10
    d10a:	71 89       	ldd	r23, Z+17	; 0x11
    d10c:	68 01       	movw	r12, r16
    d10e:	c0 94       	com	r12
    d110:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:357
			      y2 = HEIGHT - 1 - t;
    d112:	8a 01       	movw	r16, r20
    d114:	00 95       	com	r16
    d116:	10 95       	com	r17
    d118:	06 0f       	add	r16, r22
    d11a:	17 1f       	adc	r17, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:359
			      x  = x2;
			      y  = y2;
    d11c:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:358
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
			      y2 = HEIGHT - 1 - t;
			      x  = x2;
    d11e:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    d120:	a6 01       	movw	r20, r12
    d122:	46 0f       	add	r20, r22
    d124:	57 1f       	adc	r21, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    d126:	b5 01       	movw	r22, r10
    d128:	f1 cc       	rjmp	.-1566   	; 0xcb0c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
    d12a:	f7 01       	movw	r30, r14
    d12c:	a0 89       	ldd	r26, Z+16	; 0x10
    d12e:	b1 89       	ldd	r27, Z+17	; 0x11
    d130:	69 01       	movw	r12, r18
    d132:	c0 94       	com	r12
    d134:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      x2 = y2;
			      y2 = HEIGHT - 1 - t;
    d136:	cd 01       	movw	r24, r26
    d138:	86 1b       	sub	r24, r22
    d13a:	97 0b       	sbc	r25, r23
    d13c:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:367
			      x  = x1;
    d13e:	fa 01       	movw	r30, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:365
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
			      x2 = y2;
    d140:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      y2 = HEIGHT - 1 - t;
    d142:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:363
			      x  = x2;
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
    d144:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y1 = HEIGHT - 1 - x2;
    d146:	a6 01       	movw	r20, r12
    d148:	4a 0f       	add	r20, r26
    d14a:	5b 1f       	adc	r21, r27
    d14c:	e1 cc       	rjmp	.-1598   	; 0xcb10 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:340
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
			      y  = y1;
    d14e:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:339
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
    d150:	fb 01       	movw	r30, r22
    d152:	de cc       	rjmp	.-1604   	; 0xcb10 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:378
    writeCmdData16(ILI932X_VER_START_AD, y1);
    writeCmdData16(ILI932X_VER_END_AD, y2);
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
 	} 
	else if(lcd_driver == ID_7575)
    d154:	01 97       	sbiw	r24, 0x01	; 1
    d156:	09 f0       	breq	.+2      	; 0xd15a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
    d158:	e5 c1       	rjmp	.+970    	; 0xd524 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:380
	{
		writeCmdData8(HX8347G_COLADDRSTART_HI,x1>>8);
    d15a:	d0 96       	adiw	r26, 0x30	; 48
    d15c:	ed 91       	ld	r30, X+
    d15e:	fc 91       	ld	r31, X
    d160:	d1 97       	sbiw	r26, 0x31	; 49
    d162:	80 81       	ld	r24, Z
    d164:	db 96       	adiw	r26, 0x3b	; 59
    d166:	9c 91       	ld	r25, X
    d168:	db 97       	sbiw	r26, 0x3b	; 59
    d16a:	89 23       	and	r24, r25
    d16c:	80 83       	st	Z, r24
    d16e:	82 e0       	ldi	r24, 0x02	; 2
    d170:	82 b9       	out	0x02, r24	; 2
    d172:	d2 96       	adiw	r26, 0x32	; 50
    d174:	ed 91       	ld	r30, X+
    d176:	fc 91       	ld	r31, X
    d178:	d3 97       	sbiw	r26, 0x33	; 51
    d17a:	80 81       	ld	r24, Z
    d17c:	dc 96       	adiw	r26, 0x3c	; 60
    d17e:	9c 91       	ld	r25, X
    d180:	dc 97       	sbiw	r26, 0x3c	; 60
    d182:	89 23       	and	r24, r25
    d184:	80 83       	st	Z, r24
    d186:	d2 96       	adiw	r26, 0x32	; 50
    d188:	ed 91       	ld	r30, X+
    d18a:	fc 91       	ld	r31, X
    d18c:	d3 97       	sbiw	r26, 0x33	; 51
    d18e:	80 81       	ld	r24, Z
    d190:	d8 96       	adiw	r26, 0x38	; 56
    d192:	9c 91       	ld	r25, X
    d194:	d8 97       	sbiw	r26, 0x38	; 56
    d196:	89 2b       	or	r24, r25
    d198:	80 83       	st	Z, r24
    d19a:	d0 96       	adiw	r26, 0x30	; 48
    d19c:	ed 91       	ld	r30, X+
    d19e:	fc 91       	ld	r31, X
    d1a0:	d1 97       	sbiw	r26, 0x31	; 49
    d1a2:	80 81       	ld	r24, Z
    d1a4:	d7 96       	adiw	r26, 0x37	; 55
    d1a6:	9c 91       	ld	r25, X
    d1a8:	d7 97       	sbiw	r26, 0x37	; 55
    d1aa:	89 2b       	or	r24, r25
    d1ac:	80 83       	st	Z, r24
    d1ae:	72 b9       	out	0x02, r23	; 2
    d1b0:	d2 96       	adiw	r26, 0x32	; 50
    d1b2:	ed 91       	ld	r30, X+
    d1b4:	fc 91       	ld	r31, X
    d1b6:	d3 97       	sbiw	r26, 0x33	; 51
    d1b8:	80 81       	ld	r24, Z
    d1ba:	dc 96       	adiw	r26, 0x3c	; 60
    d1bc:	9c 91       	ld	r25, X
    d1be:	dc 97       	sbiw	r26, 0x3c	; 60
    d1c0:	89 23       	and	r24, r25
    d1c2:	80 83       	st	Z, r24
    d1c4:	d2 96       	adiw	r26, 0x32	; 50
    d1c6:	ed 91       	ld	r30, X+
    d1c8:	fc 91       	ld	r31, X
    d1ca:	d3 97       	sbiw	r26, 0x33	; 51
    d1cc:	80 81       	ld	r24, Z
    d1ce:	d8 96       	adiw	r26, 0x38	; 56
    d1d0:	9c 91       	ld	r25, X
    d1d2:	d8 97       	sbiw	r26, 0x38	; 56
    d1d4:	89 2b       	or	r24, r25
    d1d6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:381
		writeCmdData8(HX8347G_COLADDRSTART_LO,x1);
    d1d8:	d0 96       	adiw	r26, 0x30	; 48
    d1da:	ed 91       	ld	r30, X+
    d1dc:	fc 91       	ld	r31, X
    d1de:	d1 97       	sbiw	r26, 0x31	; 49
    d1e0:	80 81       	ld	r24, Z
    d1e2:	db 96       	adiw	r26, 0x3b	; 59
    d1e4:	9c 91       	ld	r25, X
    d1e6:	db 97       	sbiw	r26, 0x3b	; 59
    d1e8:	89 23       	and	r24, r25
    d1ea:	80 83       	st	Z, r24
    d1ec:	83 e0       	ldi	r24, 0x03	; 3
    d1ee:	82 b9       	out	0x02, r24	; 2
    d1f0:	d2 96       	adiw	r26, 0x32	; 50
    d1f2:	ed 91       	ld	r30, X+
    d1f4:	fc 91       	ld	r31, X
    d1f6:	d3 97       	sbiw	r26, 0x33	; 51
    d1f8:	80 81       	ld	r24, Z
    d1fa:	dc 96       	adiw	r26, 0x3c	; 60
    d1fc:	9c 91       	ld	r25, X
    d1fe:	dc 97       	sbiw	r26, 0x3c	; 60
    d200:	89 23       	and	r24, r25
    d202:	80 83       	st	Z, r24
    d204:	d2 96       	adiw	r26, 0x32	; 50
    d206:	ed 91       	ld	r30, X+
    d208:	fc 91       	ld	r31, X
    d20a:	d3 97       	sbiw	r26, 0x33	; 51
    d20c:	80 81       	ld	r24, Z
    d20e:	d8 96       	adiw	r26, 0x38	; 56
    d210:	9c 91       	ld	r25, X
    d212:	d8 97       	sbiw	r26, 0x38	; 56
    d214:	89 2b       	or	r24, r25
    d216:	80 83       	st	Z, r24
    d218:	d0 96       	adiw	r26, 0x30	; 48
    d21a:	ed 91       	ld	r30, X+
    d21c:	fc 91       	ld	r31, X
    d21e:	d1 97       	sbiw	r26, 0x31	; 49
    d220:	80 81       	ld	r24, Z
    d222:	d7 96       	adiw	r26, 0x37	; 55
    d224:	9c 91       	ld	r25, X
    d226:	d7 97       	sbiw	r26, 0x37	; 55
    d228:	89 2b       	or	r24, r25
    d22a:	80 83       	st	Z, r24
    d22c:	62 b9       	out	0x02, r22	; 2
    d22e:	d2 96       	adiw	r26, 0x32	; 50
    d230:	ed 91       	ld	r30, X+
    d232:	fc 91       	ld	r31, X
    d234:	d3 97       	sbiw	r26, 0x33	; 51
    d236:	80 81       	ld	r24, Z
    d238:	dc 96       	adiw	r26, 0x3c	; 60
    d23a:	9c 91       	ld	r25, X
    d23c:	dc 97       	sbiw	r26, 0x3c	; 60
    d23e:	89 23       	and	r24, r25
    d240:	80 83       	st	Z, r24
    d242:	d2 96       	adiw	r26, 0x32	; 50
    d244:	ed 91       	ld	r30, X+
    d246:	fc 91       	ld	r31, X
    d248:	d3 97       	sbiw	r26, 0x33	; 51
    d24a:	80 81       	ld	r24, Z
    d24c:	d8 96       	adiw	r26, 0x38	; 56
    d24e:	9c 91       	ld	r25, X
    d250:	d8 97       	sbiw	r26, 0x38	; 56
    d252:	89 2b       	or	r24, r25
    d254:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:382
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
    d256:	d0 96       	adiw	r26, 0x30	; 48
    d258:	ed 91       	ld	r30, X+
    d25a:	fc 91       	ld	r31, X
    d25c:	d1 97       	sbiw	r26, 0x31	; 49
    d25e:	80 81       	ld	r24, Z
    d260:	db 96       	adiw	r26, 0x3b	; 59
    d262:	9c 91       	ld	r25, X
    d264:	db 97       	sbiw	r26, 0x3b	; 59
    d266:	89 23       	and	r24, r25
    d268:	80 83       	st	Z, r24
    d26a:	86 e0       	ldi	r24, 0x06	; 6
    d26c:	82 b9       	out	0x02, r24	; 2
    d26e:	d2 96       	adiw	r26, 0x32	; 50
    d270:	ed 91       	ld	r30, X+
    d272:	fc 91       	ld	r31, X
    d274:	d3 97       	sbiw	r26, 0x33	; 51
    d276:	80 81       	ld	r24, Z
    d278:	dc 96       	adiw	r26, 0x3c	; 60
    d27a:	9c 91       	ld	r25, X
    d27c:	dc 97       	sbiw	r26, 0x3c	; 60
    d27e:	89 23       	and	r24, r25
    d280:	80 83       	st	Z, r24
    d282:	d2 96       	adiw	r26, 0x32	; 50
    d284:	ed 91       	ld	r30, X+
    d286:	fc 91       	ld	r31, X
    d288:	d3 97       	sbiw	r26, 0x33	; 51
    d28a:	80 81       	ld	r24, Z
    d28c:	d8 96       	adiw	r26, 0x38	; 56
    d28e:	9c 91       	ld	r25, X
    d290:	d8 97       	sbiw	r26, 0x38	; 56
    d292:	89 2b       	or	r24, r25
    d294:	80 83       	st	Z, r24
    d296:	d0 96       	adiw	r26, 0x30	; 48
    d298:	ed 91       	ld	r30, X+
    d29a:	fc 91       	ld	r31, X
    d29c:	d1 97       	sbiw	r26, 0x31	; 49
    d29e:	80 81       	ld	r24, Z
    d2a0:	d7 96       	adiw	r26, 0x37	; 55
    d2a2:	9c 91       	ld	r25, X
    d2a4:	d7 97       	sbiw	r26, 0x37	; 55
    d2a6:	89 2b       	or	r24, r25
    d2a8:	80 83       	st	Z, r24
    d2aa:	52 b9       	out	0x02, r21	; 2
    d2ac:	d2 96       	adiw	r26, 0x32	; 50
    d2ae:	ed 91       	ld	r30, X+
    d2b0:	fc 91       	ld	r31, X
    d2b2:	d3 97       	sbiw	r26, 0x33	; 51
    d2b4:	80 81       	ld	r24, Z
    d2b6:	dc 96       	adiw	r26, 0x3c	; 60
    d2b8:	9c 91       	ld	r25, X
    d2ba:	dc 97       	sbiw	r26, 0x3c	; 60
    d2bc:	89 23       	and	r24, r25
    d2be:	80 83       	st	Z, r24
    d2c0:	d2 96       	adiw	r26, 0x32	; 50
    d2c2:	ed 91       	ld	r30, X+
    d2c4:	fc 91       	ld	r31, X
    d2c6:	d3 97       	sbiw	r26, 0x33	; 51
    d2c8:	80 81       	ld	r24, Z
    d2ca:	d8 96       	adiw	r26, 0x38	; 56
    d2cc:	9c 91       	ld	r25, X
    d2ce:	d8 97       	sbiw	r26, 0x38	; 56
    d2d0:	89 2b       	or	r24, r25
    d2d2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:383
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
    d2d4:	d0 96       	adiw	r26, 0x30	; 48
    d2d6:	ed 91       	ld	r30, X+
    d2d8:	fc 91       	ld	r31, X
    d2da:	d1 97       	sbiw	r26, 0x31	; 49
    d2dc:	80 81       	ld	r24, Z
    d2de:	db 96       	adiw	r26, 0x3b	; 59
    d2e0:	9c 91       	ld	r25, X
    d2e2:	db 97       	sbiw	r26, 0x3b	; 59
    d2e4:	89 23       	and	r24, r25
    d2e6:	80 83       	st	Z, r24
    d2e8:	87 e0       	ldi	r24, 0x07	; 7
    d2ea:	82 b9       	out	0x02, r24	; 2
    d2ec:	d2 96       	adiw	r26, 0x32	; 50
    d2ee:	ed 91       	ld	r30, X+
    d2f0:	fc 91       	ld	r31, X
    d2f2:	d3 97       	sbiw	r26, 0x33	; 51
    d2f4:	80 81       	ld	r24, Z
    d2f6:	dc 96       	adiw	r26, 0x3c	; 60
    d2f8:	9c 91       	ld	r25, X
    d2fa:	dc 97       	sbiw	r26, 0x3c	; 60
    d2fc:	89 23       	and	r24, r25
    d2fe:	80 83       	st	Z, r24
    d300:	d2 96       	adiw	r26, 0x32	; 50
    d302:	ed 91       	ld	r30, X+
    d304:	fc 91       	ld	r31, X
    d306:	d3 97       	sbiw	r26, 0x33	; 51
    d308:	80 81       	ld	r24, Z
    d30a:	d8 96       	adiw	r26, 0x38	; 56
    d30c:	9c 91       	ld	r25, X
    d30e:	d8 97       	sbiw	r26, 0x38	; 56
    d310:	89 2b       	or	r24, r25
    d312:	80 83       	st	Z, r24
    d314:	d0 96       	adiw	r26, 0x30	; 48
    d316:	ed 91       	ld	r30, X+
    d318:	fc 91       	ld	r31, X
    d31a:	d1 97       	sbiw	r26, 0x31	; 49
    d31c:	80 81       	ld	r24, Z
    d31e:	d7 96       	adiw	r26, 0x37	; 55
    d320:	9c 91       	ld	r25, X
    d322:	d7 97       	sbiw	r26, 0x37	; 55
    d324:	89 2b       	or	r24, r25
    d326:	80 83       	st	Z, r24
    d328:	42 b9       	out	0x02, r20	; 2
    d32a:	d2 96       	adiw	r26, 0x32	; 50
    d32c:	ed 91       	ld	r30, X+
    d32e:	fc 91       	ld	r31, X
    d330:	d3 97       	sbiw	r26, 0x33	; 51
    d332:	80 81       	ld	r24, Z
    d334:	dc 96       	adiw	r26, 0x3c	; 60
    d336:	9c 91       	ld	r25, X
    d338:	dc 97       	sbiw	r26, 0x3c	; 60
    d33a:	89 23       	and	r24, r25
    d33c:	80 83       	st	Z, r24
    d33e:	d2 96       	adiw	r26, 0x32	; 50
    d340:	ed 91       	ld	r30, X+
    d342:	fc 91       	ld	r31, X
    d344:	d3 97       	sbiw	r26, 0x33	; 51
    d346:	80 81       	ld	r24, Z
    d348:	d8 96       	adiw	r26, 0x38	; 56
    d34a:	9c 91       	ld	r25, X
    d34c:	d8 97       	sbiw	r26, 0x38	; 56
    d34e:	89 2b       	or	r24, r25
    d350:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:384
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
    d352:	d0 96       	adiw	r26, 0x30	; 48
    d354:	ed 91       	ld	r30, X+
    d356:	fc 91       	ld	r31, X
    d358:	d1 97       	sbiw	r26, 0x31	; 49
    d35a:	80 81       	ld	r24, Z
    d35c:	db 96       	adiw	r26, 0x3b	; 59
    d35e:	9c 91       	ld	r25, X
    d360:	db 97       	sbiw	r26, 0x3b	; 59
    d362:	89 23       	and	r24, r25
    d364:	80 83       	st	Z, r24
    d366:	84 e0       	ldi	r24, 0x04	; 4
    d368:	82 b9       	out	0x02, r24	; 2
    d36a:	d2 96       	adiw	r26, 0x32	; 50
    d36c:	ed 91       	ld	r30, X+
    d36e:	fc 91       	ld	r31, X
    d370:	d3 97       	sbiw	r26, 0x33	; 51
    d372:	80 81       	ld	r24, Z
    d374:	dc 96       	adiw	r26, 0x3c	; 60
    d376:	9c 91       	ld	r25, X
    d378:	dc 97       	sbiw	r26, 0x3c	; 60
    d37a:	89 23       	and	r24, r25
    d37c:	80 83       	st	Z, r24
    d37e:	d2 96       	adiw	r26, 0x32	; 50
    d380:	ed 91       	ld	r30, X+
    d382:	fc 91       	ld	r31, X
    d384:	d3 97       	sbiw	r26, 0x33	; 51
    d386:	80 81       	ld	r24, Z
    d388:	d8 96       	adiw	r26, 0x38	; 56
    d38a:	9c 91       	ld	r25, X
    d38c:	d8 97       	sbiw	r26, 0x38	; 56
    d38e:	89 2b       	or	r24, r25
    d390:	80 83       	st	Z, r24
    d392:	d0 96       	adiw	r26, 0x30	; 48
    d394:	ed 91       	ld	r30, X+
    d396:	fc 91       	ld	r31, X
    d398:	d1 97       	sbiw	r26, 0x31	; 49
    d39a:	80 81       	ld	r24, Z
    d39c:	d7 96       	adiw	r26, 0x37	; 55
    d39e:	9c 91       	ld	r25, X
    d3a0:	d7 97       	sbiw	r26, 0x37	; 55
    d3a2:	89 2b       	or	r24, r25
    d3a4:	80 83       	st	Z, r24
    d3a6:	32 b9       	out	0x02, r19	; 2
    d3a8:	d2 96       	adiw	r26, 0x32	; 50
    d3aa:	ed 91       	ld	r30, X+
    d3ac:	fc 91       	ld	r31, X
    d3ae:	d3 97       	sbiw	r26, 0x33	; 51
    d3b0:	80 81       	ld	r24, Z
    d3b2:	dc 96       	adiw	r26, 0x3c	; 60
    d3b4:	9c 91       	ld	r25, X
    d3b6:	dc 97       	sbiw	r26, 0x3c	; 60
    d3b8:	89 23       	and	r24, r25
    d3ba:	80 83       	st	Z, r24
    d3bc:	d2 96       	adiw	r26, 0x32	; 50
    d3be:	ed 91       	ld	r30, X+
    d3c0:	fc 91       	ld	r31, X
    d3c2:	d3 97       	sbiw	r26, 0x33	; 51
    d3c4:	80 81       	ld	r24, Z
    d3c6:	d8 96       	adiw	r26, 0x38	; 56
    d3c8:	9c 91       	ld	r25, X
    d3ca:	d8 97       	sbiw	r26, 0x38	; 56
    d3cc:	89 2b       	or	r24, r25
    d3ce:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:385
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
    d3d0:	d0 96       	adiw	r26, 0x30	; 48
    d3d2:	ed 91       	ld	r30, X+
    d3d4:	fc 91       	ld	r31, X
    d3d6:	d1 97       	sbiw	r26, 0x31	; 49
    d3d8:	80 81       	ld	r24, Z
    d3da:	db 96       	adiw	r26, 0x3b	; 59
    d3dc:	9c 91       	ld	r25, X
    d3de:	db 97       	sbiw	r26, 0x3b	; 59
    d3e0:	89 23       	and	r24, r25
    d3e2:	80 83       	st	Z, r24
    d3e4:	85 e0       	ldi	r24, 0x05	; 5
    d3e6:	82 b9       	out	0x02, r24	; 2
    d3e8:	d2 96       	adiw	r26, 0x32	; 50
    d3ea:	ed 91       	ld	r30, X+
    d3ec:	fc 91       	ld	r31, X
    d3ee:	d3 97       	sbiw	r26, 0x33	; 51
    d3f0:	80 81       	ld	r24, Z
    d3f2:	dc 96       	adiw	r26, 0x3c	; 60
    d3f4:	9c 91       	ld	r25, X
    d3f6:	dc 97       	sbiw	r26, 0x3c	; 60
    d3f8:	89 23       	and	r24, r25
    d3fa:	80 83       	st	Z, r24
    d3fc:	d2 96       	adiw	r26, 0x32	; 50
    d3fe:	ed 91       	ld	r30, X+
    d400:	fc 91       	ld	r31, X
    d402:	d3 97       	sbiw	r26, 0x33	; 51
    d404:	80 81       	ld	r24, Z
    d406:	d8 96       	adiw	r26, 0x38	; 56
    d408:	9c 91       	ld	r25, X
    d40a:	d8 97       	sbiw	r26, 0x38	; 56
    d40c:	89 2b       	or	r24, r25
    d40e:	80 83       	st	Z, r24
    d410:	d0 96       	adiw	r26, 0x30	; 48
    d412:	ed 91       	ld	r30, X+
    d414:	fc 91       	ld	r31, X
    d416:	d1 97       	sbiw	r26, 0x31	; 49
    d418:	80 81       	ld	r24, Z
    d41a:	d7 96       	adiw	r26, 0x37	; 55
    d41c:	9c 91       	ld	r25, X
    d41e:	d7 97       	sbiw	r26, 0x37	; 55
    d420:	89 2b       	or	r24, r25
    d422:	80 83       	st	Z, r24
    d424:	22 b9       	out	0x02, r18	; 2
    d426:	d2 96       	adiw	r26, 0x32	; 50
    d428:	ed 91       	ld	r30, X+
    d42a:	fc 91       	ld	r31, X
    d42c:	d3 97       	sbiw	r26, 0x33	; 51
    d42e:	80 81       	ld	r24, Z
    d430:	dc 96       	adiw	r26, 0x3c	; 60
    d432:	9c 91       	ld	r25, X
    d434:	dc 97       	sbiw	r26, 0x3c	; 60
    d436:	89 23       	and	r24, r25
    d438:	80 83       	st	Z, r24
    d43a:	d2 96       	adiw	r26, 0x32	; 50
    d43c:	ed 91       	ld	r30, X+
    d43e:	fc 91       	ld	r31, X
    d440:	d3 97       	sbiw	r26, 0x33	; 51
    d442:	80 81       	ld	r24, Z
    d444:	d8 96       	adiw	r26, 0x38	; 56
    d446:	9c 91       	ld	r25, X
    d448:	d8 97       	sbiw	r26, 0x38	; 56
    d44a:	89 2b       	or	r24, r25
    d44c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:386
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
    d44e:	d0 96       	adiw	r26, 0x30	; 48
    d450:	ed 91       	ld	r30, X+
    d452:	fc 91       	ld	r31, X
    d454:	d1 97       	sbiw	r26, 0x31	; 49
    d456:	80 81       	ld	r24, Z
    d458:	db 96       	adiw	r26, 0x3b	; 59
    d45a:	9c 91       	ld	r25, X
    d45c:	db 97       	sbiw	r26, 0x3b	; 59
    d45e:	89 23       	and	r24, r25
    d460:	80 83       	st	Z, r24
    d462:	88 e0       	ldi	r24, 0x08	; 8
    d464:	82 b9       	out	0x02, r24	; 2
    d466:	d2 96       	adiw	r26, 0x32	; 50
    d468:	ed 91       	ld	r30, X+
    d46a:	fc 91       	ld	r31, X
    d46c:	d3 97       	sbiw	r26, 0x33	; 51
    d46e:	80 81       	ld	r24, Z
    d470:	dc 96       	adiw	r26, 0x3c	; 60
    d472:	9c 91       	ld	r25, X
    d474:	dc 97       	sbiw	r26, 0x3c	; 60
    d476:	89 23       	and	r24, r25
    d478:	80 83       	st	Z, r24
    d47a:	d2 96       	adiw	r26, 0x32	; 50
    d47c:	ed 91       	ld	r30, X+
    d47e:	fc 91       	ld	r31, X
    d480:	d3 97       	sbiw	r26, 0x33	; 51
    d482:	80 81       	ld	r24, Z
    d484:	d8 96       	adiw	r26, 0x38	; 56
    d486:	9c 91       	ld	r25, X
    d488:	d8 97       	sbiw	r26, 0x38	; 56
    d48a:	89 2b       	or	r24, r25
    d48c:	80 83       	st	Z, r24
    d48e:	d0 96       	adiw	r26, 0x30	; 48
    d490:	ed 91       	ld	r30, X+
    d492:	fc 91       	ld	r31, X
    d494:	d1 97       	sbiw	r26, 0x31	; 49
    d496:	80 81       	ld	r24, Z
    d498:	d7 96       	adiw	r26, 0x37	; 55
    d49a:	9c 91       	ld	r25, X
    d49c:	d7 97       	sbiw	r26, 0x37	; 55
    d49e:	89 2b       	or	r24, r25
    d4a0:	80 83       	st	Z, r24
    d4a2:	12 b9       	out	0x02, r17	; 2
    d4a4:	d2 96       	adiw	r26, 0x32	; 50
    d4a6:	ed 91       	ld	r30, X+
    d4a8:	fc 91       	ld	r31, X
    d4aa:	d3 97       	sbiw	r26, 0x33	; 51
    d4ac:	80 81       	ld	r24, Z
    d4ae:	dc 96       	adiw	r26, 0x3c	; 60
    d4b0:	9c 91       	ld	r25, X
    d4b2:	dc 97       	sbiw	r26, 0x3c	; 60
    d4b4:	89 23       	and	r24, r25
    d4b6:	80 83       	st	Z, r24
    d4b8:	d2 96       	adiw	r26, 0x32	; 50
    d4ba:	ed 91       	ld	r30, X+
    d4bc:	fc 91       	ld	r31, X
    d4be:	d3 97       	sbiw	r26, 0x33	; 51
    d4c0:	80 81       	ld	r24, Z
    d4c2:	d8 96       	adiw	r26, 0x38	; 56
    d4c4:	9c 91       	ld	r25, X
    d4c6:	d8 97       	sbiw	r26, 0x38	; 56
    d4c8:	89 2b       	or	r24, r25
    d4ca:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    d4cc:	d0 96       	adiw	r26, 0x30	; 48
    d4ce:	ed 91       	ld	r30, X+
    d4d0:	fc 91       	ld	r31, X
    d4d2:	d1 97       	sbiw	r26, 0x31	; 49
    d4d4:	80 81       	ld	r24, Z
    d4d6:	db 96       	adiw	r26, 0x3b	; 59
    d4d8:	9c 91       	ld	r25, X
    d4da:	db 97       	sbiw	r26, 0x3b	; 59
    d4dc:	89 23       	and	r24, r25
    d4de:	80 83       	st	Z, r24
    d4e0:	89 e0       	ldi	r24, 0x09	; 9
    d4e2:	82 b9       	out	0x02, r24	; 2
    d4e4:	d2 96       	adiw	r26, 0x32	; 50
    d4e6:	ed 91       	ld	r30, X+
    d4e8:	fc 91       	ld	r31, X
    d4ea:	d3 97       	sbiw	r26, 0x33	; 51
    d4ec:	80 81       	ld	r24, Z
    d4ee:	dc 96       	adiw	r26, 0x3c	; 60
    d4f0:	9c 91       	ld	r25, X
    d4f2:	dc 97       	sbiw	r26, 0x3c	; 60
    d4f4:	89 23       	and	r24, r25
    d4f6:	80 83       	st	Z, r24
    d4f8:	d2 96       	adiw	r26, 0x32	; 50
    d4fa:	ed 91       	ld	r30, X+
    d4fc:	fc 91       	ld	r31, X
    d4fe:	d3 97       	sbiw	r26, 0x33	; 51
    d500:	80 81       	ld	r24, Z
    d502:	d8 96       	adiw	r26, 0x38	; 56
    d504:	9c 91       	ld	r25, X
    d506:	d8 97       	sbiw	r26, 0x38	; 56
    d508:	89 2b       	or	r24, r25
    d50a:	80 83       	st	Z, r24
    d50c:	d0 96       	adiw	r26, 0x30	; 48
    d50e:	ed 91       	ld	r30, X+
    d510:	fc 91       	ld	r31, X
    d512:	d1 97       	sbiw	r26, 0x31	; 49
    d514:	80 81       	ld	r24, Z
    d516:	d7 96       	adiw	r26, 0x37	; 55
    d518:	9c 91       	ld	r25, X
    d51a:	d7 97       	sbiw	r26, 0x37	; 55
    d51c:	89 2b       	or	r24, r25
    d51e:	80 83       	st	Z, r24
    d520:	02 b9       	out	0x02, r16	; 2
    d522:	b9 cd       	rjmp	.-1166   	; 0xd096 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:391
	}
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF}; 
    d524:	7d 83       	std	Y+5, r23	; 0x05
    d526:	6e 83       	std	Y+6, r22	; 0x06
    d528:	3f 83       	std	Y+7, r19	; 0x07
    d52a:	28 87       	std	Y+8, r18	; 0x08
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:392
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
    d52c:	59 83       	std	Y+1, r21	; 0x01
    d52e:	4a 83       	std	Y+2, r20	; 0x02
    d530:	1b 83       	std	Y+3, r17	; 0x03
    d532:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:394
	
		Push_Command(XC, x_buf, 4); //set x address
    d534:	f7 01       	movw	r30, r14
    d536:	64 8d       	ldd	r22, Z+28	; 0x1c
    d538:	75 8d       	ldd	r23, Z+29	; 0x1d
    d53a:	24 e0       	ldi	r18, 0x04	; 4
    d53c:	ae 01       	movw	r20, r28
    d53e:	4b 5f       	subi	r20, 0xFB	; 251
    d540:	5f 4f       	sbci	r21, 0xFF	; 255
    d542:	c7 01       	movw	r24, r14
    d544:	0e 94 c6 64 	call	0xc98c	; 0xc98c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:395
		Push_Command(YC, y_buf, 4); //set y address
    d548:	d7 01       	movw	r26, r14
    d54a:	5e 96       	adiw	r26, 0x1e	; 30
    d54c:	6d 91       	ld	r22, X+
    d54e:	7c 91       	ld	r23, X
    d550:	24 e0       	ldi	r18, 0x04	; 4
    d552:	ae 01       	movw	r20, r28
    d554:	4f 5f       	subi	r20, 0xFF	; 255
    d556:	5f 4f       	sbci	r21, 0xFF	; 255
    d558:	c7 01       	movw	r24, r14
    d55a:	0e 94 c6 64 	call	0xc98c	; 0xc98c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    d55e:	ae cd       	rjmp	.-1188   	; 0xd0bc <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

0000d560 <thermostat_program_get_threshold(unsigned char, unsigned char)>:
_Z32thermostat_program_get_thresholdhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:323
}


//// ziska rozhodovaci uroven termostatu
uint16_t thermostat_program_get_threshold(uint8_t program_id, uint8_t interval_id)
{
    d560:	1f 93       	push	r17
    d562:	cf 93       	push	r28
    d564:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:325
  uint16_t ret = 0;
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
    d566:	9d e4       	ldi	r25, 0x4D	; 77
    d568:	89 9f       	mul	r24, r25
    d56a:	e0 01       	movw	r28, r0
    d56c:	11 24       	eor	r1, r1
    d56e:	cf 50       	subi	r28, 0x0F	; 15
    d570:	de 4f       	sbci	r29, 0xFE	; 254
    d572:	86 e0       	ldi	r24, 0x06	; 6
    d574:	68 9f       	mul	r22, r24
    d576:	c0 0d       	add	r28, r0
    d578:	d1 1d       	adc	r29, r1
    d57a:	11 24       	eor	r1, r1
    d57c:	ce 01       	movw	r24, r28
    d57e:	05 96       	adiw	r24, 0x05	; 5
    d580:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    d584:	18 2f       	mov	r17, r24
    d586:	ce 01       	movw	r24, r28
    d588:	04 96       	adiw	r24, 0x04	; 4
    d58a:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    d58e:	21 2f       	mov	r18, r17
    d590:	30 e0       	ldi	r19, 0x00	; 0
    d592:	32 2f       	mov	r19, r18
    d594:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:327
  return ret;
}
    d596:	82 0f       	add	r24, r18
    d598:	93 2f       	mov	r25, r19
    d59a:	91 1d       	adc	r25, r1
    d59c:	df 91       	pop	r29
    d59e:	cf 91       	pop	r28
    d5a0:	1f 91       	pop	r17
    d5a2:	08 95       	ret

0000d5a4 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>:
_Z27thermostat_program_get_timehhPhS_S_S_S_():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:301
}


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
    d5a4:	7f 92       	push	r7
    d5a6:	8f 92       	push	r8
    d5a8:	9f 92       	push	r9
    d5aa:	af 92       	push	r10
    d5ac:	bf 92       	push	r11
    d5ae:	cf 92       	push	r12
    d5b0:	df 92       	push	r13
    d5b2:	ef 92       	push	r14
    d5b4:	ff 92       	push	r15
    d5b6:	0f 93       	push	r16
    d5b8:	1f 93       	push	r17
    d5ba:	cf 93       	push	r28
    d5bc:	df 93       	push	r29
    d5be:	5a 01       	movw	r10, r20
    d5c0:	e9 01       	movw	r28, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:302
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    d5c2:	9d e4       	ldi	r25, 0x4D	; 77
    d5c4:	89 9f       	mul	r24, r25
    d5c6:	40 01       	movw	r8, r0
    d5c8:	11 24       	eor	r1, r1
    d5ca:	ef e0       	ldi	r30, 0x0F	; 15
    d5cc:	8e 1a       	sub	r8, r30
    d5ce:	ee ef       	ldi	r30, 0xFE	; 254
    d5d0:	9e 0a       	sbc	r9, r30
    d5d2:	f6 e0       	ldi	r31, 0x06	; 6
    d5d4:	6f 9f       	mul	r22, r31
    d5d6:	80 0c       	add	r8, r0
    d5d8:	91 1c       	adc	r9, r1
    d5da:	11 24       	eor	r1, r1
    d5dc:	c4 01       	movw	r24, r8
    d5de:	02 96       	adiw	r24, 0x02	; 2
    d5e0:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    d5e4:	78 2e       	mov	r7, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
    d5e6:	c4 01       	movw	r24, r8
    d5e8:	03 96       	adiw	r24, 0x03	; 3
    d5ea:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
    d5ee:	97 2d       	mov	r25, r7
    d5f0:	96 95       	lsr	r25
    d5f2:	96 95       	lsr	r25
    d5f4:	96 95       	lsr	r25
    d5f6:	f5 01       	movw	r30, r10
    d5f8:	90 83       	st	Z, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
    d5fa:	27 2d       	mov	r18, r7
    d5fc:	30 e0       	ldi	r19, 0x00	; 0
    d5fe:	35 95       	asr	r19
    d600:	27 95       	ror	r18
    d602:	23 70       	andi	r18, 0x03	; 3
    d604:	9f e0       	ldi	r25, 0x0F	; 15
    d606:	29 9f       	mul	r18, r25
    d608:	20 2d       	mov	r18, r0
    d60a:	11 24       	eor	r1, r1
    d60c:	28 83       	st	Y, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
    d60e:	28 2f       	mov	r18, r24
    d610:	26 95       	lsr	r18
    d612:	26 95       	lsr	r18
    d614:	26 95       	lsr	r18
    d616:	f8 01       	movw	r30, r16
    d618:	20 83       	st	Z, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
    d61a:	83 70       	andi	r24, 0x03	; 3
    d61c:	89 9f       	mul	r24, r25
    d61e:	80 2d       	mov	r24, r0
    d620:	11 24       	eor	r1, r1
    d622:	f7 01       	movw	r30, r14
    d624:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
    d626:	87 2d       	mov	r24, r7
    d628:	81 70       	andi	r24, 0x01	; 1
    d62a:	f6 01       	movw	r30, r12
    d62c:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:309
}
    d62e:	df 91       	pop	r29
    d630:	cf 91       	pop	r28
    d632:	1f 91       	pop	r17
    d634:	0f 91       	pop	r16
    d636:	ff 90       	pop	r15
    d638:	ef 90       	pop	r14
    d63a:	df 90       	pop	r13
    d63c:	cf 90       	pop	r12
    d63e:	bf 90       	pop	r11
    d640:	af 90       	pop	r10
    d642:	9f 90       	pop	r9
    d644:	8f 90       	pop	r8
    d646:	7f 90       	pop	r7
    d648:	08 95       	ret

0000d64a <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:153
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
    d64a:	0f 93       	push	r16
    d64c:	1f 93       	push	r17
    d64e:	cf 93       	push	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:154
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
    d650:	91 e2       	ldi	r25, 0x21	; 33
    d652:	89 9f       	mul	r24, r25
    d654:	80 01       	movw	r16, r0
    d656:	11 24       	eor	r1, r1
    d658:	c8 01       	movw	r24, r16
    d65a:	8a 5a       	subi	r24, 0xAA	; 170
    d65c:	9e 4f       	sbci	r25, 0xFE	; 254
    d65e:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    d662:	c8 2f       	mov	r28, r24
    d664:	c8 01       	movw	r24, r16
    d666:	89 5a       	subi	r24, 0xA9	; 169
    d668:	9e 4f       	sbci	r25, 0xFE	; 254
    d66a:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    d66e:	2c 2f       	mov	r18, r28
    d670:	30 e0       	ldi	r19, 0x00	; 0
    d672:	32 2f       	mov	r19, r18
    d674:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:155
}
    d676:	82 0f       	add	r24, r18
    d678:	93 2f       	mov	r25, r19
    d67a:	91 1d       	adc	r25, r1
    d67c:	cf 91       	pop	r28
    d67e:	1f 91       	pop	r17
    d680:	0f 91       	pop	r16
    d682:	08 95       	ret

0000d684 <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
    d684:	21 e2       	ldi	r18, 0x21	; 33
    d686:	82 9f       	mul	r24, r18
    d688:	c0 01       	movw	r24, r0
    d68a:	11 24       	eor	r1, r1
    d68c:	83 5a       	subi	r24, 0xA3	; 163
    d68e:	9e 4f       	sbci	r25, 0xFE	; 254
    d690:	0c 94 99 57 	jmp	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>

0000d694 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_default_term_set_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5267
   args1 ... parametr z definice prvku
   args2 ... parametr z defini menu
   args3 ... index prvku v menu
*/
void button_click_default_term_set_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d694:	cf 93       	push	r28
    d696:	df 93       	push	r29
    d698:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5268
  if (thermostat_ring_get_active(default_ring) != RING_FREE)
    d69a:	c0 91 64 0b 	lds	r28, 0x0B64	; 0x800b64 <default_ring>
    d69e:	8c 2f       	mov	r24, r28
    d6a0:	0e 94 42 6b 	call	0xd684	; 0xd684 <thermostat_ring_get_active(unsigned char)>
    d6a4:	8f 3f       	cpi	r24, 0xFF	; 255
    d6a6:	61 f0       	breq	.+24     	; 0xd6c0 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)+0x2c>
thermostat_ring_set_mode():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    d6a8:	21 e2       	ldi	r18, 0x21	; 33
    d6aa:	c2 9f       	mul	r28, r18
    d6ac:	c0 01       	movw	r24, r0
    d6ae:	11 24       	eor	r1, r1
    d6b0:	6d 2f       	mov	r22, r29
    d6b2:	82 5a       	subi	r24, 0xA2	; 162
    d6b4:	9e 4f       	sbci	r25, 0xFE	; 254
    d6b6:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z34button_click_default_term_set_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5271
  {
    thermostat_ring_set_mode(default_ring, args1);
    change_term_mode = 1;
    d6ba:	81 e0       	ldi	r24, 0x01	; 1
    d6bc:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5273
  }
}
    d6c0:	df 91       	pop	r29
    d6c2:	cf 91       	pop	r28
    d6c4:	08 95       	ret

0000d6c6 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>:
_Z40button_status_default_ring_term_has_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5251
   args3 .. index prvku v menu
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t button_status_default_ring_term_has_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d6c6:	cf 93       	push	r28
    d6c8:	df 93       	push	r29
    d6ca:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5253
  uint8_t ret = 0;
  if (thermostat_ring_get_active(default_ring) != RING_FREE)
    d6cc:	c0 91 64 0b 	lds	r28, 0x0B64	; 0x800b64 <default_ring>
    d6d0:	8c 2f       	mov	r24, r28
    d6d2:	0e 94 42 6b 	call	0xd684	; 0xd684 <thermostat_ring_get_active(unsigned char)>
    d6d6:	8f 3f       	cpi	r24, 0xFF	; 255
    d6d8:	51 f0       	breq	.+20     	; 0xd6ee <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x28>
thermostat_ring_get_mode():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
    d6da:	21 e2       	ldi	r18, 0x21	; 33
    d6dc:	c2 9f       	mul	r28, r18
    d6de:	c0 01       	movw	r24, r0
    d6e0:	11 24       	eor	r1, r1
    d6e2:	82 5a       	subi	r24, 0xA2	; 162
    d6e4:	9e 4f       	sbci	r25, 0xFE	; 254
    d6e6:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
thermostat_ring_get_mode_1():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:185
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
    d6ea:	91 e0       	ldi	r25, 0x01	; 1
    d6ec:	8d 13       	cpse	r24, r29
_Z40button_status_default_ring_term_has_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5252
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t button_status_default_ring_term_has_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    d6ee:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5257
  if (thermostat_ring_get_active(default_ring) != RING_FREE)
    if (thermostat_ring_get_mode_1(default_ring, args1) == true)
      ret = 1;
  return ret;
}
    d6f0:	89 2f       	mov	r24, r25
    d6f2:	df 91       	pop	r29
    d6f4:	cf 91       	pop	r28
    d6f6:	08 95       	ret

0000d6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:35
  }
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    d6f8:	af 92       	push	r10
    d6fa:	bf 92       	push	r11
    d6fc:	cf 92       	push	r12
    d6fe:	df 92       	push	r13
    d700:	ef 92       	push	r14
    d702:	ff 92       	push	r15
    d704:	0f 93       	push	r16
    d706:	1f 93       	push	r17
    d708:	cf 93       	push	r28
    d70a:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:37
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
    d70c:	86 30       	cpi	r24, 0x06	; 6
    d70e:	08 f0       	brcs	.+2      	; 0xd712 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    d710:	56 c0       	rjmp	.+172    	; 0xd7be <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
    d712:	8b 01       	movw	r16, r22
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:39
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    d714:	96 e1       	ldi	r25, 0x16	; 22
    d716:	89 9f       	mul	r24, r25
    d718:	e0 01       	movw	r28, r0
    d71a:	11 24       	eor	r1, r1
    d71c:	ce 01       	movw	r24, r28
    d71e:	88 53       	subi	r24, 0x38	; 56
    d720:	9f 4f       	sbci	r25, 0xFF	; 255
    d722:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    d726:	f8 01       	movw	r30, r16
    d728:	81 93       	st	Z+, r24
    d72a:	6f 01       	movw	r12, r30
    d72c:	7e 01       	movw	r14, r28
    d72e:	f9 ec       	ldi	r31, 0xC9	; 201
    d730:	ef 0e       	add	r14, r31
    d732:	f1 1c       	adc	r15, r1
    d734:	5e 01       	movw	r10, r28
    d736:	81 ed       	ldi	r24, 0xD1	; 209
    d738:	a8 0e       	add	r10, r24
    d73a:	b1 1c       	adc	r11, r1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:42
    for (uint8_t m = 0; m < 8; m++)
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
    d73c:	c7 01       	movw	r24, r14
    d73e:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    d742:	f6 01       	movw	r30, r12
    d744:	81 93       	st	Z+, r24
    d746:	6f 01       	movw	r12, r30
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:43
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    d748:	c7 01       	movw	r24, r14
    d74a:	0b 96       	adiw	r24, 0x0b	; 11
    d74c:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    d750:	f6 01       	movw	r30, r12
    d752:	82 87       	std	Z+10, r24	; 0x0a
    d754:	ff ef       	ldi	r31, 0xFF	; 255
    d756:	ef 1a       	sub	r14, r31
    d758:	ff 0a       	sbc	r15, r31
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:40
{
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    for (uint8_t m = 0; m < 8; m++)
    d75a:	ea 14       	cp	r14, r10
    d75c:	fb 04       	cpc	r15, r11
    d75e:	71 f7       	brne	.-36     	; 0xd73c <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:45
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    }
    tds->name[7] = 0;
    d760:	f8 01       	movw	r30, r16
    d762:	13 8a       	std	Z+19, r1	; 0x13
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:46
    tds->assigned_ds2482 = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned);
    d764:	c7 01       	movw	r24, r14
    d766:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    d76a:	f8 01       	movw	r30, r16
    d76c:	81 87       	std	Z+9, r24	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:47
    tds->offset = (EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high) << 8) + EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low);
    d76e:	ce 01       	movw	r24, r28
    d770:	8e 52       	subi	r24, 0x2E	; 46
    d772:	9f 4f       	sbci	r25, 0xFF	; 255
    d774:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    d778:	f8 2e       	mov	r15, r24
    d77a:	ce 01       	movw	r24, r28
    d77c:	8d 52       	subi	r24, 0x2D	; 45
    d77e:	9f 4f       	sbci	r25, 0xFF	; 255
    d780:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    d784:	2f 2d       	mov	r18, r15
    d786:	30 e0       	ldi	r19, 0x00	; 0
    d788:	32 2f       	mov	r19, r18
    d78a:	22 27       	eor	r18, r18
    d78c:	82 0f       	add	r24, r18
    d78e:	93 2f       	mov	r25, r19
    d790:	91 1d       	adc	r25, r1
    d792:	f8 01       	movw	r30, r16
    d794:	93 87       	std	Z+11, r25	; 0x0b
    d796:	82 87       	std	Z+10, r24	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:48
    tds->period = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period);
    d798:	ce 01       	movw	r24, r28
    d79a:	84 52       	subi	r24, 0x24	; 36
    d79c:	9f 4f       	sbci	r25, 0xFF	; 255
    d79e:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    d7a2:	f8 01       	movw	r30, r16
    d7a4:	84 8b       	std	Z+20, r24	; 0x14
    d7a6:	81 e0       	ldi	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:52
    ret = 1;
  }
  return ret;
}
    d7a8:	df 91       	pop	r29
    d7aa:	cf 91       	pop	r28
    d7ac:	1f 91       	pop	r17
    d7ae:	0f 91       	pop	r16
    d7b0:	ff 90       	pop	r15
    d7b2:	ef 90       	pop	r14
    d7b4:	df 90       	pop	r13
    d7b6:	cf 90       	pop	r12
    d7b8:	bf 90       	pop	r11
    d7ba:	af 90       	pop	r10
    d7bc:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:36
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  uint8_t ret = 0;
    d7be:	80 e0       	ldi	r24, 0x00	; 0
    d7c0:	f3 cf       	rjmp	.-26     	; 0xd7a8 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

0000d7c2 <tds_update_associate()>:
_Z20tds_update_associatev():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:141
  tds_set_clear(w_rom[idx].tds_idx);
}

//// funkce, ktera zpetne nastavi do w_rom tds_idx, do jake realne tds je to assiciovano
void tds_update_associate(void)
{
    d7c2:	ef 92       	push	r14
    d7c4:	ff 92       	push	r15
    d7c6:	0f 93       	push	r16
    d7c8:	1f 93       	push	r17
    d7ca:	cf 93       	push	r28
    d7cc:	df 93       	push	r29
    d7ce:	cd b7       	in	r28, 0x3d	; 61
    d7d0:	de b7       	in	r29, 0x3e	; 62
    d7d2:	6e 97       	sbiw	r28, 0x1e	; 30
    d7d4:	0f b6       	in	r0, 0x3f	; 63
    d7d6:	f8 94       	cli
    d7d8:	de bf       	out	0x3e, r29	; 62
    d7da:	0f be       	out	0x3f, r0	; 63
    d7dc:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:144
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;
    d7de:	1f 8a       	std	Y+23, r1	; 0x17
    d7e0:	18 8e       	std	Y+24, r1	; 0x18
    d7e2:	19 8e       	std	Y+25, r1	; 0x19
    d7e4:	1a 8e       	std	Y+26, r1	; 0x1a
    d7e6:	1b 8e       	std	Y+27, r1	; 0x1b
    d7e8:	1c 8e       	std	Y+28, r1	; 0x1c
    d7ea:	1d 8e       	std	Y+29, r1	; 0x1d
    d7ec:	1e 8e       	std	Y+30, r1	; 0x1e
    d7ee:	09 e8       	ldi	r16, 0x89	; 137
    d7f0:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:148

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
  {
    w_rom[wrom_id].tds_idx = 255;
    d7f2:	ee 24       	eor	r14, r14
    d7f4:	ea 94       	dec	r14
    d7f6:	f8 01       	movw	r30, r16
    d7f8:	e2 86       	std	Z+10, r14	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:149
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
    d7fa:	b8 01       	movw	r22, r16
    d7fc:	ce 01       	movw	r24, r28
    d7fe:	47 96       	adiw	r24, 0x17	; 23
    d800:	0e 94 29 3b 	call	0x7652	; 0x7652 <tds_compare_rom(unsigned char*, unsigned char*)>
    d804:	81 11       	cpse	r24, r1
    d806:	14 c0       	rjmp	.+40     	; 0xd830 <tds_update_associate()+0x6e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:152
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    d808:	f1 2c       	mov	r15, r1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:154
    {
      get_tds18s20(tds_id, &tds);
    d80a:	be 01       	movw	r22, r28
    d80c:	6f 5f       	subi	r22, 0xFF	; 255
    d80e:	7f 4f       	sbci	r23, 0xFF	; 255
    d810:	8f 2d       	mov	r24, r15
    d812:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:155
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
    d816:	b8 01       	movw	r22, r16
    d818:	ce 01       	movw	r24, r28
    d81a:	02 96       	adiw	r24, 0x02	; 2
    d81c:	0e 94 29 3b 	call	0x7652	; 0x7652 <tds_compare_rom(unsigned char*, unsigned char*)>
    d820:	88 23       	and	r24, r24
    d822:	11 f0       	breq	.+4      	; 0xd828 <tds_update_associate()+0x66>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:156
        w_rom[wrom_id].tds_idx = tds_id;
    d824:	f8 01       	movw	r30, r16
    d826:	f2 86       	std	Z+10, r15	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:152
  {
    w_rom[wrom_id].tds_idx = 255;
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    d828:	f3 94       	inc	r15
    d82a:	f6 e0       	ldi	r31, 0x06	; 6
    d82c:	ff 12       	cpse	r15, r31
    d82e:	ed cf       	rjmp	.-38     	; 0xd80a <tds_update_associate()+0x48>
    d830:	05 5f       	subi	r16, 0xF5	; 245
    d832:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:146
{
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
    d834:	8c e0       	ldi	r24, 0x0C	; 12
    d836:	0b 3c       	cpi	r16, 0xCB	; 203
    d838:	18 07       	cpc	r17, r24
    d83a:	e9 f6       	brne	.-70     	; 0xd7f6 <tds_update_associate()+0x34>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:159
      get_tds18s20(tds_id, &tds);
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
        w_rom[wrom_id].tds_idx = tds_id;
    }
  }
}
    d83c:	6e 96       	adiw	r28, 0x1e	; 30
    d83e:	0f b6       	in	r0, 0x3f	; 63
    d840:	f8 94       	cli
    d842:	de bf       	out	0x3e, r29	; 62
    d844:	0f be       	out	0x3f, r0	; 63
    d846:	cd bf       	out	0x3d, r28	; 61
    d848:	df 91       	pop	r29
    d84a:	cf 91       	pop	r28
    d84c:	1f 91       	pop	r17
    d84e:	0f 91       	pop	r16
    d850:	ff 90       	pop	r15
    d852:	ef 90       	pop	r14
    d854:	08 95       	ret

0000d856 <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:202
{
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
    d856:	af 92       	push	r10
    d858:	bf 92       	push	r11
    d85a:	cf 92       	push	r12
    d85c:	df 92       	push	r13
    d85e:	ef 92       	push	r14
    d860:	ff 92       	push	r15
    d862:	1f 93       	push	r17
    d864:	cf 93       	push	r28
    d866:	df 93       	push	r29
    d868:	cd b7       	in	r28, 0x3d	; 61
    d86a:	de b7       	in	r29, 0x3e	; 62
    d86c:	66 97       	sbiw	r28, 0x16	; 22
    d86e:	0f b6       	in	r0, 0x3f	; 63
    d870:	f8 94       	cli
    d872:	de bf       	out	0x3e, r29	; 62
    d874:	0f be       	out	0x3f, r0	; 63
    d876:	cd bf       	out	0x3d, r28	; 61
tds_check_associate():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:179
/// funkce overeni associace
uint8_t tds_check_associate(uint8_t id)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
    d878:	90 91 cb 0c 	lds	r25, 0x0CCB	; 0x800ccb <Global_HWwirenum>
    d87c:	89 17       	cp	r24, r25
    d87e:	a0 f0       	brcs	.+40     	; 0xd8a8 <tds_associate(unsigned char)+0x52>
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
    d880:	1f ef       	ldi	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
    d882:	0e 94 e1 6b 	call	0xd7c2	; 0xd7c2 <tds_update_associate()>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:226
  return ret;
}
    d886:	81 2f       	mov	r24, r17
    d888:	66 96       	adiw	r28, 0x16	; 22
    d88a:	0f b6       	in	r0, 0x3f	; 63
    d88c:	f8 94       	cli
    d88e:	de bf       	out	0x3e, r29	; 62
    d890:	0f be       	out	0x3f, r0	; 63
    d892:	cd bf       	out	0x3d, r28	; 61
    d894:	df 91       	pop	r29
    d896:	cf 91       	pop	r28
    d898:	1f 91       	pop	r17
    d89a:	ff 90       	pop	r15
    d89c:	ef 90       	pop	r14
    d89e:	df 90       	pop	r13
    d8a0:	cf 90       	pop	r12
    d8a2:	bf 90       	pop	r11
    d8a4:	af 90       	pop	r10
    d8a6:	08 95       	ret
tds_check_associate():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:184
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    d8a8:	a8 2e       	mov	r10, r24
    d8aa:	b1 2c       	mov	r11, r1
    d8ac:	2b e0       	ldi	r18, 0x0B	; 11
    d8ae:	82 9f       	mul	r24, r18
    d8b0:	c0 01       	movw	r24, r0
    d8b2:	11 24       	eor	r1, r1
    d8b4:	fc 01       	movw	r30, r24
    d8b6:	e7 57       	subi	r30, 0x77	; 119
    d8b8:	f3 4f       	sbci	r31, 0xF3	; 243
    d8ba:	7f 01       	movw	r14, r30
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    d8bc:	10 e0       	ldi	r17, 0x00	; 0
tds_check_associate():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:183
    {
      get_tds18s20(idx, &tds);
    d8be:	be 01       	movw	r22, r28
    d8c0:	6f 5f       	subi	r22, 0xFF	; 255
    d8c2:	7f 4f       	sbci	r23, 0xFF	; 255
    d8c4:	81 2f       	mov	r24, r17
    d8c6:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:184
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    d8ca:	b7 01       	movw	r22, r14
    d8cc:	ce 01       	movw	r24, r28
    d8ce:	02 96       	adiw	r24, 0x02	; 2
    d8d0:	0e 94 29 3b 	call	0x7652	; 0x7652 <tds_compare_rom(unsigned char*, unsigned char*)>
    d8d4:	81 11       	cpse	r24, r1
    d8d6:	d4 cf       	rjmp	.-88     	; 0xd880 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    d8d8:	1f 5f       	subi	r17, 0xFF	; 255
    d8da:	16 30       	cpi	r17, 0x06	; 6
    d8dc:	81 f7       	brne	.-32     	; 0xd8be <tds_associate(unsigned char)+0x68>
    d8de:	10 e0       	ldi	r17, 0x00	; 0
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
    d8e0:	2b e0       	ldi	r18, 0x0B	; 11
    d8e2:	2a 9d       	mul	r18, r10
    d8e4:	c0 01       	movw	r24, r0
    d8e6:	2b 9d       	mul	r18, r11
    d8e8:	90 0d       	add	r25, r0
    d8ea:	11 24       	eor	r1, r1
    d8ec:	fc 01       	movw	r30, r24
    d8ee:	ee 56       	subi	r30, 0x6E	; 110
    d8f0:	f3 4f       	sbci	r31, 0xF3	; 243
    d8f2:	6f 01       	movw	r12, r30
    d8f4:	03 c0       	rjmp	.+6      	; 0xd8fc <tds_associate(unsigned char)+0xa6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:207
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    d8f6:	1f 5f       	subi	r17, 0xFF	; 255
    d8f8:	16 30       	cpi	r17, 0x06	; 6
    d8fa:	11 f2       	breq	.-124    	; 0xd880 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:209
    {
      get_tds18s20(idx, &tds);
    d8fc:	be 01       	movw	r22, r28
    d8fe:	6f 5f       	subi	r22, 0xFF	; 255
    d900:	7f 4f       	sbci	r23, 0xFF	; 255
    d902:	81 2f       	mov	r24, r17
    d904:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
    d908:	89 81       	ldd	r24, Y+1	; 0x01
    d90a:	81 11       	cpse	r24, r1
    d90c:	f4 cf       	rjmp	.-24     	; 0xd8f6 <tds_associate(unsigned char)+0xa0>
    d90e:	f6 01       	movw	r30, r12
    d910:	80 81       	ld	r24, Z
    d912:	81 30       	cpi	r24, 0x01	; 1
    d914:	81 f7       	brne	.-32     	; 0xd8f6 <tds_associate(unsigned char)+0xa0>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
    d916:	89 83       	std	Y+1, r24	; 0x01
    d918:	fe 01       	movw	r30, r28
    d91a:	32 96       	adiw	r30, 0x02	; 2
    d91c:	90 e0       	ldi	r25, 0x00	; 0
    d91e:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:214
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
    d920:	d7 01       	movw	r26, r14
    d922:	a8 0f       	add	r26, r24
    d924:	b9 1f       	adc	r27, r25
    d926:	2c 91       	ld	r18, X
    d928:	21 93       	st	Z+, r18
    d92a:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:213
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
    d92c:	88 30       	cpi	r24, 0x08	; 8
    d92e:	91 05       	cpc	r25, r1
    d930:	b9 f7       	brne	.-18     	; 0xd920 <tds_associate(unsigned char)+0xca>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
    d932:	2b e0       	ldi	r18, 0x0B	; 11
    d934:	12 9f       	mul	r17, r18
    d936:	f0 01       	movw	r30, r0
    d938:	11 24       	eor	r1, r1
    d93a:	e7 57       	subi	r30, 0x77	; 119
    d93c:	f3 4f       	sbci	r31, 0xF3	; 243
    d93e:	e0 85       	ldd	r30, Z+8	; 0x08
    d940:	f0 e0       	ldi	r31, 0x00	; 0
    d942:	ee 0f       	add	r30, r30
    d944:	ff 1f       	adc	r31, r31
    d946:	e4 53       	subi	r30, 0x34	; 52
    d948:	f3 4f       	sbci	r31, 0xF3	; 243
    d94a:	80 81       	ld	r24, Z
    d94c:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
    d94e:	be 01       	movw	r22, r28
    d950:	6f 5f       	subi	r22, 0xFF	; 255
    d952:	7f 4f       	sbci	r23, 0xFF	; 255
    d954:	81 2f       	mov	r24, r17
    d956:	0e 94 88 55 	call	0xab10	; 0xab10 <set_tds18s20(unsigned char, struct_DDS18s20*)>
    d95a:	3e e1       	ldi	r19, 0x1E	; 30
    d95c:	13 9f       	mul	r17, r19
    d95e:	a0 01       	movw	r20, r0
    d960:	11 24       	eor	r1, r1
    d962:	90 e0       	ldi	r25, 0x00	; 0
    d964:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    d966:	20 e2       	ldi	r18, 0x20	; 32
    d968:	3e e4       	ldi	r19, 0x4E	; 78
    d96a:	fc 01       	movw	r30, r24
    d96c:	ee 0f       	add	r30, r30
    d96e:	ff 1f       	adc	r31, r31
    d970:	e4 0f       	add	r30, r20
    d972:	f5 1f       	adc	r31, r21
    d974:	ef 54       	subi	r30, 0x4F	; 79
    d976:	f4 4f       	sbci	r31, 0xF4	; 244
    d978:	30 87       	std	Z+8, r19	; 0x08
    d97a:	27 83       	std	Z+7, r18	; 0x07
    d97c:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:217
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    d97e:	8a 30       	cpi	r24, 0x0A	; 10
    d980:	91 05       	cpc	r25, r1
    d982:	99 f7       	brne	.-26     	; 0xd96a <tds_associate(unsigned char)+0x114>
    d984:	7e cf       	rjmp	.-260    	; 0xd882 <tds_associate(unsigned char)+0x2c>

0000d986 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>:
_Z20helper_tds_associatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4790
  return active;
}

void helper_tds_associate(uint16_t idx, uint16_t args2, uint8_t args3)
{
  tds_associate(idx);
    d986:	0c 94 2b 6c 	jmp	0xd856	; 0xd856 <tds_associate(unsigned char)>

0000d98a <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>:
_Z28clik_button_onewire_scan_busjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4818
  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu(0, 0, 0);
}

void clik_button_onewire_scan_bus(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d98a:	0f 93       	push	r16
    d98c:	1f 93       	push	r17
    d98e:	cf 93       	push	r28
    d990:	df 93       	push	r29
    d992:	cd b7       	in	r28, 0x3d	; 61
    d994:	de b7       	in	r29, 0x3e	; 62
    d996:	a0 97       	sbiw	r28, 0x20	; 32
    d998:	0f b6       	in	r0, 0x3f	; 63
    d99a:	f8 94       	cli
    d99c:	de bf       	out	0x3e, r29	; 62
    d99e:	0f be       	out	0x3f, r0	; 63
    d9a0:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4820
  char str1[32];
  Global_HWwirenum = 0;
    d9a2:	10 92 cb 0c 	sts	0x0CCB, r1	; 0x800ccb <Global_HWwirenum>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4821
  one_hw_search_device(0);
    d9a6:	0e 94 89 b0 	call	0x16112	; 0x16112 <one_hw_search_device(unsigned char) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4822
  tds_update_associate();
    d9aa:	0e 94 e1 6b 	call	0xd7c2	; 0xd7c2 <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4823
  MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    d9ae:	70 e0       	ldi	r23, 0x00	; 0
    d9b0:	60 e0       	ldi	r22, 0x00	; 0
    d9b2:	88 e6       	ldi	r24, 0x68	; 104
    d9b4:	90 e0       	ldi	r25, 0x00	; 0
    d9b6:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4825
  /// TODO text
  sprintf(str1, "Nalezeno: %d novych 1Wire", Global_HWwirenum);
    d9ba:	80 91 cb 0c 	lds	r24, 0x0CCB	; 0x800ccb <Global_HWwirenum>
    d9be:	1f 92       	push	r1
    d9c0:	8f 93       	push	r24
    d9c2:	86 e9       	ldi	r24, 0x96	; 150
    d9c4:	93 e0       	ldi	r25, 0x03	; 3
    d9c6:	9f 93       	push	r25
    d9c8:	8f 93       	push	r24
    d9ca:	8e 01       	movw	r16, r28
    d9cc:	0f 5f       	subi	r16, 0xFF	; 255
    d9ce:	1f 4f       	sbci	r17, 0xFF	; 255
    d9d0:	1f 93       	push	r17
    d9d2:	0f 93       	push	r16
    d9d4:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4826
  strcpy(dialog_text, str1);
    d9d8:	b8 01       	movw	r22, r16
    d9da:	8a ef       	ldi	r24, 0xFA	; 250
    d9dc:	99 e0       	ldi	r25, 0x09	; 9
    d9de:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
    d9e2:	0f 90       	pop	r0
    d9e4:	0f 90       	pop	r0
    d9e6:	0f 90       	pop	r0
    d9e8:	0f 90       	pop	r0
    d9ea:	0f 90       	pop	r0
    d9ec:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4827
}
    d9ee:	a0 96       	adiw	r28, 0x20	; 32
    d9f0:	0f b6       	in	r0, 0x3f	; 63
    d9f2:	f8 94       	cli
    d9f4:	de bf       	out	0x3e, r29	; 62
    d9f6:	0f be       	out	0x3f, r0	; 63
    d9f8:	cd bf       	out	0x3d, r28	; 61
    d9fa:	df 91       	pop	r29
    d9fc:	cf 91       	pop	r28
    d9fe:	1f 91       	pop	r17
    da00:	0f 91       	pop	r16
    da02:	08 95       	ret

0000da04 <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:120
  return tds.period;
}

//// funkce vymaze associovane 1wire -> tds
void tds_set_clear(uint8_t idx)
{
    da04:	1f 93       	push	r17
    da06:	cf 93       	push	r28
    da08:	df 93       	push	r29
    da0a:	cd b7       	in	r28, 0x3d	; 61
    da0c:	de b7       	in	r29, 0x3e	; 62
    da0e:	66 97       	sbiw	r28, 0x16	; 22
    da10:	0f b6       	in	r0, 0x3f	; 63
    da12:	f8 94       	cli
    da14:	de bf       	out	0x3e, r29	; 62
    da16:	0f be       	out	0x3f, r0	; 63
    da18:	cd bf       	out	0x3d, r28	; 61
    da1a:	18 2f       	mov	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:122
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    da1c:	be 01       	movw	r22, r28
    da1e:	6f 5f       	subi	r22, 0xFF	; 255
    da20:	7f 4f       	sbci	r23, 0xFF	; 255
    da22:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:123
  tds.used = 0;
    da26:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:124
  strcpy(tds.name, "FREE");
    da28:	6f e8       	ldi	r22, 0x8F	; 143
    da2a:	73 e0       	ldi	r23, 0x03	; 3
    da2c:	ce 01       	movw	r24, r28
    da2e:	0d 96       	adiw	r24, 0x0d	; 13
    da30:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:125
  tds.offset = 0;
    da34:	1c 86       	std	Y+12, r1	; 0x0c
    da36:	1b 86       	std	Y+11, r1	; 0x0b
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:126
  tds.period = 10;
    da38:	8a e0       	ldi	r24, 0x0A	; 10
    da3a:	8d 8b       	std	Y+21, r24	; 0x15
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:128
  for (uint8_t i = 0; i < 8; i++)
    tds.rom[i] = 0;
    da3c:	1a 82       	std	Y+2, r1	; 0x02
    da3e:	1b 82       	std	Y+3, r1	; 0x03
    da40:	1c 82       	std	Y+4, r1	; 0x04
    da42:	1d 82       	std	Y+5, r1	; 0x05
    da44:	1e 82       	std	Y+6, r1	; 0x06
    da46:	1f 82       	std	Y+7, r1	; 0x07
    da48:	18 86       	std	Y+8, r1	; 0x08
    da4a:	19 86       	std	Y+9, r1	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:129
  tds.assigned_ds2482 = 0;
    da4c:	1a 86       	std	Y+10, r1	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:130
  set_tds18s20(idx, &tds);
    da4e:	be 01       	movw	r22, r28
    da50:	6f 5f       	subi	r22, 0xFF	; 255
    da52:	7f 4f       	sbci	r23, 0xFF	; 255
    da54:	81 2f       	mov	r24, r17
    da56:	0e 94 88 55 	call	0xab10	; 0xab10 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:131
  tds_update_associate();
    da5a:	0e 94 e1 6b 	call	0xd7c2	; 0xd7c2 <tds_update_associate()>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:132
}
    da5e:	66 96       	adiw	r28, 0x16	; 22
    da60:	0f b6       	in	r0, 0x3f	; 63
    da62:	f8 94       	cli
    da64:	de bf       	out	0x3e, r29	; 62
    da66:	0f be       	out	0x3f, r0	; 63
    da68:	cd bf       	out	0x3d, r28	; 61
    da6a:	df 91       	pop	r29
    da6c:	cf 91       	pop	r28
    da6e:	1f 91       	pop	r17
    da70:	08 95       	ret

0000da72 <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z29click_tds_deassociate_onewirejjh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:136

void tds_set_clear_wrom_id(uint8_t idx)
{
  tds_set_clear(w_rom[idx].tds_idx);
    da72:	8b e0       	ldi	r24, 0x0B	; 11
    da74:	68 9f       	mul	r22, r24
    da76:	f0 01       	movw	r30, r0
    da78:	11 24       	eor	r1, r1
    da7a:	e7 57       	subi	r30, 0x77	; 119
    da7c:	f3 4f       	sbci	r31, 0xF3	; 243
    da7e:	82 85       	ldd	r24, Z+10	; 0x0a
    da80:	0e 94 02 6d 	call	0xda04	; 0xda04 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4814
/// zruseni associace
void click_tds_deassociate_onewire(uint16_t args1, uint16_t idx, uint8_t args3)
{

  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu(0, 0, 0);
    da84:	0c 94 b2 af 	jmp	0x15f64	; 0x15f64 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000da88 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4758
   args2 parametr ... definece z globalniho nastaveni menu, zde v nasem pripade je to index 1w cidla na sbernici
 * *line1 - vraci ROM adresu
 * *line2 - vraci akci associovat/nastavit
*/
void get_function_one_wire_associate_or_setting_text_button(uint8_t args1, uint8_t args2 , uint8_t args3, char *line1, char *line2)
{
    da88:	7f 92       	push	r7
    da8a:	8f 92       	push	r8
    da8c:	9f 92       	push	r9
    da8e:	af 92       	push	r10
    da90:	bf 92       	push	r11
    da92:	cf 92       	push	r12
    da94:	df 92       	push	r13
    da96:	ef 92       	push	r14
    da98:	ff 92       	push	r15
    da9a:	0f 93       	push	r16
    da9c:	1f 93       	push	r17
    da9e:	cf 93       	push	r28
    daa0:	df 93       	push	r29
    daa2:	cd b7       	in	r28, 0x3d	; 61
    daa4:	de b7       	in	r29, 0x3e	; 62
    daa6:	e0 97       	sbiw	r28, 0x30	; 48
    daa8:	0f b6       	in	r0, 0x3f	; 63
    daaa:	f8 94       	cli
    daac:	de bf       	out	0x3e, r29	; 62
    daae:	0f be       	out	0x3f, r0	; 63
    dab0:	cd bf       	out	0x3d, r28	; 61
    dab2:	98 2e       	mov	r9, r24
    dab4:	82 2e       	mov	r8, r18
    dab6:	73 2e       	mov	r7, r19
    dab8:	78 01       	movw	r14, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4760
  char str2[26];
  strcpy_P(line1, text_not_used);
    daba:	6d e7       	ldi	r22, 0x7D	; 125
    dabc:	7e e5       	ldi	r23, 0x5E	; 94
    dabe:	82 2f       	mov	r24, r18
    dac0:	93 2f       	mov	r25, r19
    dac2:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4761
  strcpy(line2, "-");
    dac6:	6d e8       	ldi	r22, 0x8D	; 141
    dac8:	73 e0       	ldi	r23, 0x03	; 3
    daca:	c8 01       	movw	r24, r16
    dacc:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4762
  if (w_rom[args1].used == 1)
    dad0:	4b e0       	ldi	r20, 0x0B	; 11
    dad2:	49 9d       	mul	r20, r9
    dad4:	c0 01       	movw	r24, r0
    dad6:	11 24       	eor	r1, r1
    dad8:	9c 01       	movw	r18, r24
    dada:	27 57       	subi	r18, 0x77	; 119
    dadc:	33 4f       	sbci	r19, 0xF3	; 243
    dade:	69 01       	movw	r12, r18
    dae0:	f9 01       	movw	r30, r18
    dae2:	81 85       	ldd	r24, Z+9	; 0x09
    dae4:	81 30       	cpi	r24, 0x01	; 1
    dae6:	c9 f5       	brne	.+114    	; 0xdb5a <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4764
  {
    createString(str2, ':', w_rom[args1].rom, 8, 16);
    dae8:	a9 01       	movw	r20, r18
    daea:	00 e1       	ldi	r16, 0x10	; 16
    daec:	28 e0       	ldi	r18, 0x08	; 8
    daee:	6a e3       	ldi	r22, 0x3A	; 58
    daf0:	ce 01       	movw	r24, r28
    daf2:	01 96       	adiw	r24, 0x01	; 1
    daf4:	5c 01       	movw	r10, r24
    daf6:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4765
    sprintf(line1, "%d: %s", args1, str2);
    dafa:	bf 92       	push	r11
    dafc:	af 92       	push	r10
    dafe:	1f 92       	push	r1
    db00:	9f 92       	push	r9
    db02:	80 eb       	ldi	r24, 0xB0	; 176
    db04:	93 e0       	ldi	r25, 0x03	; 3
    db06:	9f 93       	push	r25
    db08:	8f 93       	push	r24
    db0a:	7f 92       	push	r7
    db0c:	8f 92       	push	r8
    db0e:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4767

    if (w_rom[args1].tds_idx != 255)
    db12:	0f b6       	in	r0, 0x3f	; 63
    db14:	f8 94       	cli
    db16:	de bf       	out	0x3e, r29	; 62
    db18:	0f be       	out	0x3f, r0	; 63
    db1a:	cd bf       	out	0x3d, r28	; 61
    db1c:	f6 01       	movw	r30, r12
    db1e:	82 85       	ldd	r24, Z+10	; 0x0a
    db20:	8f 3f       	cpi	r24, 0xFF	; 255
    db22:	79 f1       	breq	.+94     	; 0xdb82 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4769
    {
      strcpy_P(line2, text_nastavit_tds);
    db24:	6a e6       	ldi	r22, 0x6A	; 106
    db26:	7e e5       	ldi	r23, 0x5E	; 94
    db28:	c7 01       	movw	r24, r14
    db2a:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
tds_get_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    db2e:	be 01       	movw	r22, r28
    db30:	65 5e       	subi	r22, 0xE5	; 229
    db32:	7f 4f       	sbci	r23, 0xFF	; 255
    db34:	f6 01       	movw	r30, r12
    db36:	82 85       	ldd	r24, Z+10	; 0x0a
    db38:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    db3c:	be 01       	movw	r22, r28
    db3e:	69 5d       	subi	r22, 0xD9	; 217
    db40:	7f 4f       	sbci	r23, 0xFF	; 255
    db42:	c5 01       	movw	r24, r10
    db44:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4771
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
    db48:	6a e6       	ldi	r22, 0x6A	; 106
    db4a:	76 e0       	ldi	r23, 0x06	; 6
    db4c:	c7 01       	movw	r24, r14
    db4e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4772
      strcat(line2, str2);
    db52:	b5 01       	movw	r22, r10
    db54:	c7 01       	movw	r24, r14
    db56:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4777
    }
    else
      strcpy_P(line2, text_associovat_tds);
  }
}
    db5a:	e0 96       	adiw	r28, 0x30	; 48
    db5c:	0f b6       	in	r0, 0x3f	; 63
    db5e:	f8 94       	cli
    db60:	de bf       	out	0x3e, r29	; 62
    db62:	0f be       	out	0x3f, r0	; 63
    db64:	cd bf       	out	0x3d, r28	; 61
    db66:	df 91       	pop	r29
    db68:	cf 91       	pop	r28
    db6a:	1f 91       	pop	r17
    db6c:	0f 91       	pop	r16
    db6e:	ff 90       	pop	r15
    db70:	ef 90       	pop	r14
    db72:	df 90       	pop	r13
    db74:	cf 90       	pop	r12
    db76:	bf 90       	pop	r11
    db78:	af 90       	pop	r10
    db7a:	9f 90       	pop	r9
    db7c:	8f 90       	pop	r8
    db7e:	7f 90       	pop	r7
    db80:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4775
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
      strcat(line2, str2);
    }
    else
      strcpy_P(line2, text_associovat_tds);
    db82:	6a e8       	ldi	r22, 0x8A	; 138
    db84:	7e e5       	ldi	r23, 0x5E	; 94
    db86:	c7 01       	movw	r24, r14
    db88:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
    db8c:	e6 cf       	rjmp	.-52     	; 0xdb5a <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xd2>

0000db8e <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z36display_element_show_tds_info_staticjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4369
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
  }
}
////
void display_element_show_tds_info_static(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    db8e:	3f 92       	push	r3
    db90:	4f 92       	push	r4
    db92:	5f 92       	push	r5
    db94:	6f 92       	push	r6
    db96:	7f 92       	push	r7
    db98:	8f 92       	push	r8
    db9a:	9f 92       	push	r9
    db9c:	af 92       	push	r10
    db9e:	bf 92       	push	r11
    dba0:	cf 92       	push	r12
    dba2:	df 92       	push	r13
    dba4:	ef 92       	push	r14
    dba6:	ff 92       	push	r15
    dba8:	0f 93       	push	r16
    dbaa:	1f 93       	push	r17
    dbac:	cf 93       	push	r28
    dbae:	df 93       	push	r29
    dbb0:	cd b7       	in	r28, 0x3d	; 61
    dbb2:	de b7       	in	r29, 0x3e	; 62
    dbb4:	ca 54       	subi	r28, 0x4A	; 74
    dbb6:	d1 09       	sbc	r29, r1
    dbb8:	0f b6       	in	r0, 0x3f	; 63
    dbba:	f8 94       	cli
    dbbc:	de bf       	out	0x3e, r29	; 62
    dbbe:	0f be       	out	0x3f, r0	; 63
    dbc0:	cd bf       	out	0x3d, r28	; 61
    dbc2:	4c 01       	movw	r8, r24
    dbc4:	3b 01       	movw	r6, r22
    dbc6:	3e 2c       	mov	r3, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    dbc8:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
    dbcc:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
_Z36display_element_show_tds_info_staticjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4375
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    dbd0:	26 0f       	add	r18, r22
    dbd2:	37 1f       	adc	r19, r23
    dbd4:	48 0f       	add	r20, r24
    dbd6:	59 1f       	adc	r21, r25
    dbd8:	0e 94 1f ae 	call	0x15c3e	; 0x15c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4376
  if (get_tds18s20(args2, &tds) == 1)
    dbdc:	be 01       	movw	r22, r28
    dbde:	6b 5c       	subi	r22, 0xCB	; 203
    dbe0:	7f 4f       	sbci	r23, 0xFF	; 255
    dbe2:	8e 2d       	mov	r24, r14
    dbe4:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    dbe8:	23 01       	movw	r4, r6
    dbea:	28 e2       	ldi	r18, 0x28	; 40
    dbec:	42 0e       	add	r4, r18
    dbee:	51 1c       	adc	r5, r1
    dbf0:	9e 01       	movw	r18, r28
    dbf2:	2f 5f       	subi	r18, 0xFF	; 255
    dbf4:	3f 4f       	sbci	r19, 0xFF	; 255
    dbf6:	59 01       	movw	r10, r18
    dbf8:	81 30       	cpi	r24, 0x01	; 1
    dbfa:	09 f0       	breq	.+2      	; 0xdbfe <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x70>
    dbfc:	ca c0       	rjmp	.+404    	; 0xdd92 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x204>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4378
  {
    createString(str2, ':', tds.rom, 8, 16);
    dbfe:	6e 01       	movw	r12, r28
    dc00:	3b e1       	ldi	r19, 0x1B	; 27
    dc02:	c3 0e       	add	r12, r19
    dc04:	d1 1c       	adc	r13, r1
    dc06:	00 e1       	ldi	r16, 0x10	; 16
    dc08:	28 e0       	ldi	r18, 0x08	; 8
    dc0a:	ae 01       	movw	r20, r28
    dc0c:	4a 5c       	subi	r20, 0xCA	; 202
    dc0e:	5f 4f       	sbci	r21, 0xFF	; 255
    dc10:	6a e3       	ldi	r22, 0x3A	; 58
    dc12:	c6 01       	movw	r24, r12
    dc14:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4379
    sprintf(str1, "rom: %s", str2);
    dc18:	df 92       	push	r13
    dc1a:	cf 92       	push	r12
    dc1c:	87 eb       	ldi	r24, 0xB7	; 183
    dc1e:	93 e0       	ldi	r25, 0x03	; 3
    dc20:	9f 93       	push	r25
    dc22:	8f 93       	push	r24
    dc24:	bf 92       	push	r11
    dc26:	af 92       	push	r10
    dc28:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4380
    show_string(str1, x + 10, y + 85, 1, BLACK, WHITE, 0);
    dc2c:	8a e0       	ldi	r24, 0x0A	; 10
    dc2e:	88 0e       	add	r8, r24
    dc30:	91 1c       	adc	r9, r1
    dc32:	a3 01       	movw	r20, r6
    dc34:	4b 5a       	subi	r20, 0xAB	; 171
    dc36:	5f 4f       	sbci	r21, 0xFF	; 255
    dc38:	ee 24       	eor	r14, r14
    dc3a:	ea 94       	dec	r14
    dc3c:	fe 2c       	mov	r15, r14
    dc3e:	10 e0       	ldi	r17, 0x00	; 0
    dc40:	00 e0       	ldi	r16, 0x00	; 0
    dc42:	21 e0       	ldi	r18, 0x01	; 1
    dc44:	b4 01       	movw	r22, r8
    dc46:	c5 01       	movw	r24, r10
    dc48:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4382
    ///
    strcpy_P(str2, text_nazev);
    dc4c:	6d e4       	ldi	r22, 0x4D	; 77
    dc4e:	7e e5       	ldi	r23, 0x5E	; 94
    dc50:	c6 01       	movw	r24, r12
    dc52:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4383
    sprintf(str1, "%s: %s", str2, tds.name);
    dc56:	85 e3       	ldi	r24, 0x35	; 53
    dc58:	90 e0       	ldi	r25, 0x00	; 0
    dc5a:	8c 0f       	add	r24, r28
    dc5c:	9d 1f       	adc	r25, r29
    dc5e:	0c 96       	adiw	r24, 0x0c	; 12
    dc60:	9f 93       	push	r25
    dc62:	8f 93       	push	r24
    dc64:	df 92       	push	r13
    dc66:	cf 92       	push	r12
    dc68:	8f eb       	ldi	r24, 0xBF	; 191
    dc6a:	93 e0       	ldi	r25, 0x03	; 3
    dc6c:	9f 93       	push	r25
    dc6e:	8f 93       	push	r24
    dc70:	bf 92       	push	r11
    dc72:	af 92       	push	r10
    dc74:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4384
    show_string(str1, x + 10, y + 40, 2, BLACK, WHITE, 0);
    dc78:	22 e0       	ldi	r18, 0x02	; 2
    dc7a:	a2 01       	movw	r20, r4
    dc7c:	b4 01       	movw	r22, r8
    dc7e:	c5 01       	movw	r24, r10
    dc80:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4386
    /// zobrazeni offsetu
    te = tds.offset / 1000.0;
    dc84:	21 96       	adiw	r28, 0x01	; 1
    dc86:	6e ad       	ldd	r22, Y+62	; 0x3e
    dc88:	7f ad       	ldd	r23, Y+63	; 0x3f
    dc8a:	21 97       	sbiw	r28, 0x01	; 1
    dc8c:	07 2e       	mov	r0, r23
    dc8e:	00 0c       	add	r0, r0
    dc90:	88 0b       	sbc	r24, r24
    dc92:	99 0b       	sbc	r25, r25
    dc94:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
    dc98:	20 e0       	ldi	r18, 0x00	; 0
    dc9a:	30 e0       	ldi	r19, 0x00	; 0
    dc9c:	4a e7       	ldi	r20, 0x7A	; 122
    dc9e:	54 e4       	ldi	r21, 0x44	; 68
    dca0:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4387
    dtostrf(te, 4, 2, str1);
    dca4:	85 01       	movw	r16, r10
    dca6:	22 e0       	ldi	r18, 0x02	; 2
    dca8:	44 e0       	ldi	r20, 0x04	; 4
    dcaa:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4388
    strcat(str1, "C");
    dcae:	6c e1       	ldi	r22, 0x1C	; 28
    dcb0:	77 e0       	ldi	r23, 0x07	; 7
    dcb2:	c5 01       	movw	r24, r10
    dcb4:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4389
    strcpy_P(str2, temp_offset_short);
    dcb8:	6f e1       	ldi	r22, 0x1F	; 31
    dcba:	7e e5       	ldi	r23, 0x5E	; 94
    dcbc:	c6 01       	movw	r24, r12
    dcbe:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4390
    strcat(str2, str1);
    dcc2:	b5 01       	movw	r22, r10
    dcc4:	c6 01       	movw	r24, r12
    dcc6:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4391
    show_string(str2, x + 10, y + 60 , 2, BLACK, WHITE, 0);
    dcca:	a3 01       	movw	r20, r6
    dccc:	44 5c       	subi	r20, 0xC4	; 196
    dcce:	5f 4f       	sbci	r21, 0xFF	; 255
    dcd0:	10 e0       	ldi	r17, 0x00	; 0
    dcd2:	00 e0       	ldi	r16, 0x00	; 0
    dcd4:	22 e0       	ldi	r18, 0x02	; 2
    dcd6:	b4 01       	movw	r22, r8
    dcd8:	c6 01       	movw	r24, r12
    dcda:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4393
    ///
    strcpy_P(str2, nastaveni_tds_period);
    dcde:	60 e1       	ldi	r22, 0x10	; 16
    dce0:	7e e5       	ldi	r23, 0x5E	; 94
    dce2:	c6 01       	movw	r24, r12
    dce4:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4394
    sprintf(str1, "%s: %ds", str2, tds.period);
    dce8:	2a 96       	adiw	r28, 0x0a	; 10
    dcea:	8f ad       	ldd	r24, Y+63	; 0x3f
    dcec:	2a 97       	sbiw	r28, 0x0a	; 10
    dcee:	1f 92       	push	r1
    dcf0:	8f 93       	push	r24
    dcf2:	df 92       	push	r13
    dcf4:	cf 92       	push	r12
    dcf6:	86 ec       	ldi	r24, 0xC6	; 198
    dcf8:	93 e0       	ldi	r25, 0x03	; 3
    dcfa:	9f 93       	push	r25
    dcfc:	8f 93       	push	r24
    dcfe:	bf 92       	push	r11
    dd00:	af 92       	push	r10
    dd02:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4395
    show_string(str1, x + 10, y + 100 , 2, BLACK, WHITE, 0);
    dd06:	a3 01       	movw	r20, r6
    dd08:	4c 59       	subi	r20, 0x9C	; 156
    dd0a:	5f 4f       	sbci	r21, 0xFF	; 255
    dd0c:	22 e0       	ldi	r18, 0x02	; 2
    dd0e:	b4 01       	movw	r22, r8
    dd10:	c5 01       	movw	r24, r10
    dd12:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4398

    ///
    strcpy_P(str2, text_online);
    dd16:	67 e2       	ldi	r22, 0x27	; 39
    dd18:	7e e5       	ldi	r23, 0x5E	; 94
    dd1a:	c6 01       	movw	r24, r12
    dd1c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4399
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    dd20:	9e e1       	ldi	r25, 0x1E	; 30
    dd22:	39 9e       	mul	r3, r25
    dd24:	f0 01       	movw	r30, r0
    dd26:	11 24       	eor	r1, r1
    dd28:	ef 54       	subi	r30, 0x4F	; 79
    dd2a:	f4 4f       	sbci	r31, 0xF4	; 244
    dd2c:	83 8d       	ldd	r24, Z+27	; 0x1b
    dd2e:	1f 92       	push	r1
    dd30:	8f 93       	push	r24
    dd32:	df 92       	push	r13
    dd34:	cf 92       	push	r12
    dd36:	8e ec       	ldi	r24, 0xCE	; 206
    dd38:	93 e0       	ldi	r25, 0x03	; 3
    dd3a:	9f 93       	push	r25
    dd3c:	8f 93       	push	r24
    dd3e:	bf 92       	push	r11
    dd40:	af 92       	push	r10
    dd42:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4400
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
    dd46:	a3 01       	movw	r20, r6
    dd48:	48 58       	subi	r20, 0x88	; 136
    dd4a:	5f 4f       	sbci	r21, 0xFF	; 255
    dd4c:	22 e0       	ldi	r18, 0x02	; 2
    dd4e:	b4 01       	movw	r22, r8
    dd50:	c5 01       	movw	r24, r10
    dd52:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
    dd56:	0f b6       	in	r0, 0x3f	; 63
    dd58:	f8 94       	cli
    dd5a:	de bf       	out	0x3e, r29	; 62
    dd5c:	0f be       	out	0x3f, r0	; 63
    dd5e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4407
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
    dd60:	c6 5b       	subi	r28, 0xB6	; 182
    dd62:	df 4f       	sbci	r29, 0xFF	; 255
    dd64:	0f b6       	in	r0, 0x3f	; 63
    dd66:	f8 94       	cli
    dd68:	de bf       	out	0x3e, r29	; 62
    dd6a:	0f be       	out	0x3f, r0	; 63
    dd6c:	cd bf       	out	0x3d, r28	; 61
    dd6e:	df 91       	pop	r29
    dd70:	cf 91       	pop	r28
    dd72:	1f 91       	pop	r17
    dd74:	0f 91       	pop	r16
    dd76:	ff 90       	pop	r15
    dd78:	ef 90       	pop	r14
    dd7a:	df 90       	pop	r13
    dd7c:	cf 90       	pop	r12
    dd7e:	bf 90       	pop	r11
    dd80:	af 90       	pop	r10
    dd82:	9f 90       	pop	r9
    dd84:	8f 90       	pop	r8
    dd86:	7f 90       	pop	r7
    dd88:	6f 90       	pop	r6
    dd8a:	5f 90       	pop	r5
    dd8c:	4f 90       	pop	r4
    dd8e:	3f 90       	pop	r3
    dd90:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4404
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    dd92:	6a e0       	ldi	r22, 0x0A	; 10
    dd94:	7e e5       	ldi	r23, 0x5E	; 94
    dd96:	c9 01       	movw	r24, r18
    dd98:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4405
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
    dd9c:	b4 01       	movw	r22, r8
    dd9e:	67 5e       	subi	r22, 0xE7	; 231
    dda0:	7f 4f       	sbci	r23, 0xFF	; 255
    dda2:	ee 24       	eor	r14, r14
    dda4:	ea 94       	dec	r14
    dda6:	fe 2c       	mov	r15, r14
    dda8:	00 e0       	ldi	r16, 0x00	; 0
    ddaa:	18 ef       	ldi	r17, 0xF8	; 248
    ddac:	24 e0       	ldi	r18, 0x04	; 4
    ddae:	a2 01       	movw	r20, r4
    ddb0:	c5 01       	movw	r24, r10
    ddb2:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
    ddb6:	d4 cf       	rjmp	.-88     	; 0xdd60 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1d2>

0000ddb8 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z38display_element_show_tds_info_dynamicsjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4351
{
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
}
//////////////////////////////////////////////
void display_element_show_tds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    ddb8:	af 92       	push	r10
    ddba:	bf 92       	push	r11
    ddbc:	cf 92       	push	r12
    ddbe:	df 92       	push	r13
    ddc0:	ef 92       	push	r14
    ddc2:	ff 92       	push	r15
    ddc4:	0f 93       	push	r16
    ddc6:	1f 93       	push	r17
    ddc8:	cf 93       	push	r28
    ddca:	df 93       	push	r29
    ddcc:	cd b7       	in	r28, 0x3d	; 61
    ddce:	de b7       	in	r29, 0x3e	; 62
    ddd0:	ca 54       	subi	r28, 0x4A	; 74
    ddd2:	d1 09       	sbc	r29, r1
    ddd4:	0f b6       	in	r0, 0x3f	; 63
    ddd6:	f8 94       	cli
    ddd8:	de bf       	out	0x3e, r29	; 62
    ddda:	0f be       	out	0x3f, r0	; 63
    dddc:	cd bf       	out	0x3d, r28	; 61
    ddde:	6c 01       	movw	r12, r24
    dde0:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4356
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  if (get_tds18s20(args2, &tds) == 1)
    dde2:	be 01       	movw	r22, r28
    dde4:	6b 5c       	subi	r22, 0xCB	; 203
    dde6:	7f 4f       	sbci	r23, 0xFF	; 255
    dde8:	8e 2d       	mov	r24, r14
    ddea:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    ddee:	81 30       	cpi	r24, 0x01	; 1
    ddf0:	d9 f5       	brne	.+118    	; 0xde68 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4359
  {
    /// zobrazeni teploty
    te = status_tds18s20[args2].temp / 1000.0;
    ddf2:	8e e1       	ldi	r24, 0x1E	; 30
    ddf4:	e8 9e       	mul	r14, r24
    ddf6:	f0 01       	movw	r30, r0
    ddf8:	11 24       	eor	r1, r1
    ddfa:	ef 54       	subi	r30, 0x4F	; 79
    ddfc:	f4 4f       	sbci	r31, 0xF4	; 244
    ddfe:	65 81       	ldd	r22, Z+5	; 0x05
    de00:	76 81       	ldd	r23, Z+6	; 0x06
    de02:	07 2e       	mov	r0, r23
    de04:	00 0c       	add	r0, r0
    de06:	88 0b       	sbc	r24, r24
    de08:	99 0b       	sbc	r25, r25
    de0a:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
    de0e:	20 e0       	ldi	r18, 0x00	; 0
    de10:	30 e0       	ldi	r19, 0x00	; 0
    de12:	4a e7       	ldi	r20, 0x7A	; 122
    de14:	54 e4       	ldi	r21, 0x44	; 68
    de16:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4360
    dtostrf(te, 4, 2, str1);
    de1a:	8e 01       	movw	r16, r28
    de1c:	05 5e       	subi	r16, 0xE5	; 229
    de1e:	1f 4f       	sbci	r17, 0xFF	; 255
    de20:	22 e0       	ldi	r18, 0x02	; 2
    de22:	44 e0       	ldi	r20, 0x04	; 4
    de24:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4361
    strcat(str1, "C");
    de28:	6c e1       	ldi	r22, 0x1C	; 28
    de2a:	77 e0       	ldi	r23, 0x07	; 7
    de2c:	c8 01       	movw	r24, r16
    de2e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4362
    strcpy_P(str2, current_temp_short);
    de32:	64 e4       	ldi	r22, 0x44	; 68
    de34:	7e e5       	ldi	r23, 0x5E	; 94
    de36:	ce 01       	movw	r24, r28
    de38:	01 96       	adiw	r24, 0x01	; 1
    de3a:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4363
    strcat(str2, str1);
    de3e:	b8 01       	movw	r22, r16
    de40:	ce 01       	movw	r24, r28
    de42:	01 96       	adiw	r24, 0x01	; 1
    de44:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4364
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
    de48:	a5 01       	movw	r20, r10
    de4a:	44 57       	subi	r20, 0x74	; 116
    de4c:	5f 4f       	sbci	r21, 0xFF	; 255
    de4e:	b6 01       	movw	r22, r12
    de50:	66 5f       	subi	r22, 0xF6	; 246
    de52:	7f 4f       	sbci	r23, 0xFF	; 255
    de54:	ee 24       	eor	r14, r14
    de56:	ea 94       	dec	r14
    de58:	fe 2c       	mov	r15, r14
    de5a:	10 e0       	ldi	r17, 0x00	; 0
    de5c:	00 e0       	ldi	r16, 0x00	; 0
    de5e:	22 e0       	ldi	r18, 0x02	; 2
    de60:	ce 01       	movw	r24, r28
    de62:	01 96       	adiw	r24, 0x01	; 1
    de64:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4366
  }
}
    de68:	c6 5b       	subi	r28, 0xB6	; 182
    de6a:	df 4f       	sbci	r29, 0xFF	; 255
    de6c:	0f b6       	in	r0, 0x3f	; 63
    de6e:	f8 94       	cli
    de70:	de bf       	out	0x3e, r29	; 62
    de72:	0f be       	out	0x3f, r0	; 63
    de74:	cd bf       	out	0x3d, r28	; 61
    de76:	df 91       	pop	r29
    de78:	cf 91       	pop	r28
    de7a:	1f 91       	pop	r17
    de7c:	0f 91       	pop	r16
    de7e:	ff 90       	pop	r15
    de80:	ef 90       	pop	r14
    de82:	df 90       	pop	r13
    de84:	cf 90       	pop	r12
    de86:	bf 90       	pop	r11
    de88:	af 90       	pop	r10
    de8a:	08 95       	ret

0000de8c <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>:
_Z25display_menu_tds_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1759
  //dialog_save_variable_function = ;
}

/// funkce pro nastaveni nazvu cidla
void display_menu_tds_set_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    de8c:	1f 93       	push	r17
    de8e:	cf 93       	push	r28
    de90:	df 93       	push	r29
    de92:	cd b7       	in	r28, 0x3d	; 61
    de94:	de b7       	in	r29, 0x3e	; 62
    de96:	a0 97       	sbiw	r28, 0x20	; 32
    de98:	0f b6       	in	r0, 0x3f	; 63
    de9a:	f8 94       	cli
    de9c:	de bf       	out	0x3e, r29	; 62
    de9e:	0f be       	out	0x3f, r0	; 63
    dea0:	cd bf       	out	0x3d, r28	; 61
    dea2:	16 2f       	mov	r17, r22
tds_get_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    dea4:	be 01       	movw	r22, r28
    dea6:	6f 5f       	subi	r22, 0xFF	; 255
    dea8:	7f 4f       	sbci	r23, 0xFF	; 255
    deaa:	81 2f       	mov	r24, r17
    deac:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    deb0:	be 01       	movw	r22, r28
    deb2:	63 5f       	subi	r22, 0xF3	; 243
    deb4:	7f 4f       	sbci	r23, 0xFF	; 255
    deb6:	ce 01       	movw	r24, r28
    deb8:	47 96       	adiw	r24, 0x17	; 23
    deba:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
_Z25display_menu_tds_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1762
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, args3);
    debe:	70 e0       	ldi	r23, 0x00	; 0
    dec0:	60 e0       	ldi	r22, 0x00	; 0
    dec2:	87 e6       	ldi	r24, 0x67	; 103
    dec4:	90 e0       	ldi	r25, 0x00	; 0
    dec6:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    deca:	be 01       	movw	r22, r28
    decc:	69 5e       	subi	r22, 0xE9	; 233
    dece:	7f 4f       	sbci	r23, 0xFF	; 255
    ded0:	8a ed       	ldi	r24, 0xDA	; 218
    ded2:	99 e0       	ldi	r25, 0x09	; 9
    ded4:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1678
  dialog_set_string_max_length = max_length;
    ded8:	88 e0       	ldi	r24, 0x08	; 8
    deda:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1679
  dialog_set_string_args = idx;
    dede:	10 93 d8 09 	sts	0x09D8, r17	; 0x8009d8 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1680
  dialog_save_string_function = save_function;
    dee2:	8a e3       	ldi	r24, 0x3A	; 58
    dee4:	90 e7       	ldi	r25, 0x70	; 112
    dee6:	90 93 d7 09 	sts	0x09D7, r25	; 0x8009d7 <dialog_save_string_function+0x1>
    deea:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1681
  dialog_save_valid_function = valid_function;
    deee:	8c ef       	ldi	r24, 0xFC	; 252
    def0:	9b e3       	ldi	r25, 0x3B	; 59
    def2:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <dialog_save_valid_function+0x1>
    def6:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <dialog_save_valid_function>
_Z25display_menu_tds_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1765
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, args3);
  display_element_set_string(name, 8, args2, &menu_tds_save_name, &valid_true);
  //dialog_save_variable_function = ;
}
    defa:	a0 96       	adiw	r28, 0x20	; 32
    defc:	0f b6       	in	r0, 0x3f	; 63
    defe:	f8 94       	cli
    df00:	de bf       	out	0x3e, r29	; 62
    df02:	0f be       	out	0x3f, r0	; 63
    df04:	cd bf       	out	0x3d, r28	; 61
    df06:	df 91       	pop	r29
    df08:	cf 91       	pop	r28
    df0a:	1f 91       	pop	r17
    df0c:	08 95       	ret

0000df0e <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1751
  //dialog_save_variable_function = ;
}

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
    df0e:	ff 92       	push	r15
    df10:	0f 93       	push	r16
    df12:	1f 93       	push	r17
    df14:	cf 93       	push	r28
    df16:	df 93       	push	r29
    df18:	cd b7       	in	r28, 0x3d	; 61
    df1a:	de b7       	in	r29, 0x3e	; 62
    df1c:	66 97       	sbiw	r28, 0x16	; 22
    df1e:	0f b6       	in	r0, 0x3f	; 63
    df20:	f8 94       	cli
    df22:	de bf       	out	0x3e, r29	; 62
    df24:	0f be       	out	0x3f, r0	; 63
    df26:	cd bf       	out	0x3d, r28	; 61
    df28:	08 2f       	mov	r16, r24
    df2a:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1752
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, args3);
    df2c:	70 e0       	ldi	r23, 0x00	; 0
    df2e:	60 e0       	ldi	r22, 0x00	; 0
    df30:	86 e6       	ldi	r24, 0x66	; 102
    df32:	90 e0       	ldi	r25, 0x00	; 0
    df34:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
tds_get_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:114
}
//// funkce ziska periodu mereni
int tds_get_period(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    df38:	be 01       	movw	r22, r28
    df3a:	6f 5f       	subi	r22, 0xFF	; 255
    df3c:	7f 4f       	sbci	r23, 0xFF	; 255
    df3e:	8f 2d       	mov	r24, r15
    df40:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:115
  return tds.period;
    df44:	6d 89       	ldd	r22, Y+21	; 0x15
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1665
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    df46:	85 e1       	ldi	r24, 0x15	; 21
    df48:	08 9f       	mul	r16, r24
    df4a:	80 01       	movw	r16, r0
    df4c:	11 24       	eor	r1, r1
    df4e:	00 58       	subi	r16, 0x80	; 128
    df50:	16 4f       	sbci	r17, 0xF6	; 246
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1753

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, args3);
  display_function_set_variable((float)tds_get_period(args2), 1, 255, 1, args2, NUMBER_TYPE_INT , H_FALSE, args1, &menu_tds_save_period);
    df52:	70 e0       	ldi	r23, 0x00	; 0
    df54:	90 e0       	ldi	r25, 0x00	; 0
    df56:	80 e0       	ldi	r24, 0x00	; 0
    df58:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
    df5c:	f8 01       	movw	r30, r16
    df5e:	60 83       	st	Z, r22
    df60:	71 83       	std	Z+1, r23	; 0x01
    df62:	82 83       	std	Z+2, r24	; 0x02
    df64:	93 83       	std	Z+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1666
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    df66:	80 e0       	ldi	r24, 0x00	; 0
    df68:	90 e0       	ldi	r25, 0x00	; 0
    df6a:	a0 e8       	ldi	r26, 0x80	; 128
    df6c:	bf e3       	ldi	r27, 0x3F	; 63
    df6e:	80 87       	std	Z+8, r24	; 0x08
    df70:	91 87       	std	Z+9, r25	; 0x09
    df72:	a2 87       	std	Z+10, r26	; 0x0a
    df74:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1667
  menu_dialog_variable[idx].variable_max = max;
    df76:	40 e0       	ldi	r20, 0x00	; 0
    df78:	50 e0       	ldi	r21, 0x00	; 0
    df7a:	6f e7       	ldi	r22, 0x7F	; 127
    df7c:	73 e4       	ldi	r23, 0x43	; 67
    df7e:	44 83       	std	Z+4, r20	; 0x04
    df80:	55 83       	std	Z+5, r21	; 0x05
    df82:	66 83       	std	Z+6, r22	; 0x06
    df84:	77 83       	std	Z+7, r23	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1668
  menu_dialog_variable[idx].variable_step = step;
    df86:	86 87       	std	Z+14, r24	; 0x0e
    df88:	97 87       	std	Z+15, r25	; 0x0f
    df8a:	a0 8b       	std	Z+16, r26	; 0x10
    df8c:	b1 8b       	std	Z+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1669
  menu_dialog_variable[idx].number_type = number_type;
    df8e:	81 e0       	ldi	r24, 0x01	; 1
    df90:	85 87       	std	Z+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1670
  menu_dialog_variable[idx].args = args;
    df92:	f2 8a       	std	Z+18, r15	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1671
  menu_dialog_variable[idx].update_now = update_now;
    df94:	14 86       	std	Z+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1672
  menu_dialog_variable[idx].save_function = save_function;
    df96:	8b e6       	ldi	r24, 0x6B	; 107
    df98:	90 e7       	ldi	r25, 0x70	; 112
    df9a:	94 8b       	std	Z+20, r25	; 0x14
    df9c:	83 8b       	std	Z+19, r24	; 0x13
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1755
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, args3);
  display_function_set_variable((float)tds_get_period(args2), 1, 255, 1, args2, NUMBER_TYPE_INT , H_FALSE, args1, &menu_tds_save_period);
  //dialog_save_variable_function = ;
}
    df9e:	66 96       	adiw	r28, 0x16	; 22
    dfa0:	0f b6       	in	r0, 0x3f	; 63
    dfa2:	f8 94       	cli
    dfa4:	de bf       	out	0x3e, r29	; 62
    dfa6:	0f be       	out	0x3f, r0	; 63
    dfa8:	cd bf       	out	0x3d, r28	; 61
    dfaa:	df 91       	pop	r29
    dfac:	cf 91       	pop	r28
    dfae:	1f 91       	pop	r17
    dfb0:	0f 91       	pop	r16
    dfb2:	ff 90       	pop	r15
    dfb4:	08 95       	ret

0000dfb6 <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1743
   args2 ... je dynamicky parametr nastaveni menu

*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
    dfb6:	ff 92       	push	r15
    dfb8:	0f 93       	push	r16
    dfba:	1f 93       	push	r17
    dfbc:	cf 93       	push	r28
    dfbe:	df 93       	push	r29
    dfc0:	cd b7       	in	r28, 0x3d	; 61
    dfc2:	de b7       	in	r29, 0x3e	; 62
    dfc4:	66 97       	sbiw	r28, 0x16	; 22
    dfc6:	0f b6       	in	r0, 0x3f	; 63
    dfc8:	f8 94       	cli
    dfca:	de bf       	out	0x3e, r29	; 62
    dfcc:	0f be       	out	0x3f, r0	; 63
    dfce:	cd bf       	out	0x3d, r28	; 61
    dfd0:	08 2f       	mov	r16, r24
    dfd2:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1744
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, args3);
    dfd4:	70 e0       	ldi	r23, 0x00	; 0
    dfd6:	60 e0       	ldi	r22, 0x00	; 0
    dfd8:	86 e6       	ldi	r24, 0x66	; 102
    dfda:	90 e0       	ldi	r25, 0x00	; 0
    dfdc:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
tds_get_offset():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:98
}
//// funkce ziska offset cidlu tds
int tds_get_offset(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    dfe0:	be 01       	movw	r22, r28
    dfe2:	6f 5f       	subi	r22, 0xFF	; 255
    dfe4:	7f 4f       	sbci	r23, 0xFF	; 255
    dfe6:	8f 2d       	mov	r24, r15
    dfe8:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:99
  return tds.offset;
    dfec:	6b 85       	ldd	r22, Y+11	; 0x0b
    dfee:	7c 85       	ldd	r23, Y+12	; 0x0c
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1665
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    dff0:	85 e1       	ldi	r24, 0x15	; 21
    dff2:	08 9f       	mul	r16, r24
    dff4:	80 01       	movw	r16, r0
    dff6:	11 24       	eor	r1, r1
    dff8:	00 58       	subi	r16, 0x80	; 128
    dffa:	16 4f       	sbci	r17, 0xF6	; 246
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1745
*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, args3);
  display_function_set_variable(tds_get_offset(args2) / 1000.0, -10, 10, 0.1, args2, NUMBER_TYPE_FLOAT, H_FALSE, args1, &menu_tds_save_offset);
    dffc:	07 2e       	mov	r0, r23
    dffe:	00 0c       	add	r0, r0
    e000:	88 0b       	sbc	r24, r24
    e002:	99 0b       	sbc	r25, r25
    e004:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
    e008:	20 e0       	ldi	r18, 0x00	; 0
    e00a:	30 e0       	ldi	r19, 0x00	; 0
    e00c:	4a e7       	ldi	r20, 0x7A	; 122
    e00e:	54 e4       	ldi	r21, 0x44	; 68
    e010:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1665
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    e014:	f8 01       	movw	r30, r16
    e016:	60 83       	st	Z, r22
    e018:	71 83       	std	Z+1, r23	; 0x01
    e01a:	82 83       	std	Z+2, r24	; 0x02
    e01c:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1666
  menu_dialog_variable[idx].variable_min = min;
    e01e:	80 e0       	ldi	r24, 0x00	; 0
    e020:	90 e0       	ldi	r25, 0x00	; 0
    e022:	a0 e2       	ldi	r26, 0x20	; 32
    e024:	b1 ec       	ldi	r27, 0xC1	; 193
    e026:	80 87       	std	Z+8, r24	; 0x08
    e028:	91 87       	std	Z+9, r25	; 0x09
    e02a:	a2 87       	std	Z+10, r26	; 0x0a
    e02c:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1667
  menu_dialog_variable[idx].variable_max = max;
    e02e:	80 e0       	ldi	r24, 0x00	; 0
    e030:	90 e0       	ldi	r25, 0x00	; 0
    e032:	a0 e2       	ldi	r26, 0x20	; 32
    e034:	b1 e4       	ldi	r27, 0x41	; 65
    e036:	84 83       	std	Z+4, r24	; 0x04
    e038:	95 83       	std	Z+5, r25	; 0x05
    e03a:	a6 83       	std	Z+6, r26	; 0x06
    e03c:	b7 83       	std	Z+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1668
  menu_dialog_variable[idx].variable_step = step;
    e03e:	8d ec       	ldi	r24, 0xCD	; 205
    e040:	9c ec       	ldi	r25, 0xCC	; 204
    e042:	ac ec       	ldi	r26, 0xCC	; 204
    e044:	bd e3       	ldi	r27, 0x3D	; 61
    e046:	86 87       	std	Z+14, r24	; 0x0e
    e048:	97 87       	std	Z+15, r25	; 0x0f
    e04a:	a0 8b       	std	Z+16, r26	; 0x10
    e04c:	b1 8b       	std	Z+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1669
  menu_dialog_variable[idx].number_type = number_type;
    e04e:	15 86       	std	Z+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1670
  menu_dialog_variable[idx].args = args;
    e050:	f2 8a       	std	Z+18, r15	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1671
  menu_dialog_variable[idx].update_now = update_now;
    e052:	14 86       	std	Z+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1672
  menu_dialog_variable[idx].save_function = save_function;
    e054:	81 ea       	ldi	r24, 0xA1	; 161
    e056:	90 e7       	ldi	r25, 0x70	; 112
    e058:	94 8b       	std	Z+20, r25	; 0x14
    e05a:	83 8b       	std	Z+19, r24	; 0x13
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1747
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, args3);
  display_function_set_variable(tds_get_offset(args2) / 1000.0, -10, 10, 0.1, args2, NUMBER_TYPE_FLOAT, H_FALSE, args1, &menu_tds_save_offset);
  //dialog_save_variable_function = ;
}
    e05c:	66 96       	adiw	r28, 0x16	; 22
    e05e:	0f b6       	in	r0, 0x3f	; 63
    e060:	f8 94       	cli
    e062:	de bf       	out	0x3e, r29	; 62
    e064:	0f be       	out	0x3f, r0	; 63
    e066:	cd bf       	out	0x3d, r28	; 61
    e068:	df 91       	pop	r29
    e06a:	cf 91       	pop	r28
    e06c:	1f 91       	pop	r17
    e06e:	0f 91       	pop	r16
    e070:	ff 90       	pop	r15
    e072:	08 95       	ret

0000e074 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>:
_Z18menu_tds_save_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1726
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable_float(args1));
}
/////
void menu_tds_save_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e074:	1f 93       	push	r17
    e076:	cf 93       	push	r28
    e078:	df 93       	push	r29
    e07a:	cd b7       	in	r28, 0x3d	; 61
    e07c:	de b7       	in	r29, 0x3e	; 62
    e07e:	a0 97       	sbiw	r28, 0x20	; 32
    e080:	0f b6       	in	r0, 0x3f	; 63
    e082:	f8 94       	cli
    e084:	de bf       	out	0x3e, r29	; 62
    e086:	0f be       	out	0x3f, r0	; 63
    e088:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1728
  char name[10];
  display_element_get_string(name);
    e08a:	ce 01       	movw	r24, r28
    e08c:	47 96       	adiw	r24, 0x17	; 23
    e08e:	0e 94 9b 3f 	call	0x7f36	; 0x7f36 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1729
  if (strlen(name) > 0)
    e092:	8f 89       	ldd	r24, Y+23	; 0x17
    e094:	88 23       	and	r24, r24
    e096:	a9 f0       	breq	.+42     	; 0xe0c2 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x4e>
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1686
  dialog_save_valid_function = valid_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    e098:	10 91 d8 09 	lds	r17, 0x09D8	; 0x8009d8 <dialog_set_string_args>
tds_set_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    e09c:	be 01       	movw	r22, r28
    e09e:	6f 5f       	subi	r22, 0xFF	; 255
    e0a0:	7f 4f       	sbci	r23, 0xFF	; 255
    e0a2:	81 2f       	mov	r24, r17
    e0a4:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    e0a8:	be 01       	movw	r22, r28
    e0aa:	69 5e       	subi	r22, 0xE9	; 233
    e0ac:	7f 4f       	sbci	r23, 0xFF	; 255
    e0ae:	ce 01       	movw	r24, r28
    e0b0:	0d 96       	adiw	r24, 0x0d	; 13
    e0b2:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    e0b6:	be 01       	movw	r22, r28
    e0b8:	6f 5f       	subi	r22, 0xFF	; 255
    e0ba:	7f 4f       	sbci	r23, 0xFF	; 255
    e0bc:	81 2f       	mov	r24, r17
    e0be:	0e 94 88 55 	call	0xab10	; 0xab10 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z18menu_tds_save_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    tds_set_name(display_element_get_string_args(), name);
}
    e0c2:	a0 96       	adiw	r28, 0x20	; 32
    e0c4:	0f b6       	in	r0, 0x3f	; 63
    e0c6:	f8 94       	cli
    e0c8:	de bf       	out	0x3e, r29	; 62
    e0ca:	0f be       	out	0x3f, r0	; 63
    e0cc:	cd bf       	out	0x3d, r28	; 61
    e0ce:	df 91       	pop	r29
    e0d0:	cf 91       	pop	r28
    e0d2:	1f 91       	pop	r17
    e0d4:	08 95       	ret

0000e0d6 <menu_tds_save_period(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1721
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
    e0d6:	ff 92       	push	r15
    e0d8:	0f 93       	push	r16
    e0da:	1f 93       	push	r17
    e0dc:	cf 93       	push	r28
    e0de:	df 93       	push	r29
    e0e0:	cd b7       	in	r28, 0x3d	; 61
    e0e2:	de b7       	in	r29, 0x3e	; 62
    e0e4:	66 97       	sbiw	r28, 0x16	; 22
    e0e6:	0f b6       	in	r0, 0x3f	; 63
    e0e8:	f8 94       	cli
    e0ea:	de bf       	out	0x3e, r29	; 62
    e0ec:	0f be       	out	0x3f, r0	; 63
    e0ee:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable_float():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1633
  return menu_dialog_variable[idx].args;
}

float display_function_get_variable_float(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    e0f0:	95 e1       	ldi	r25, 0x15	; 21
    e0f2:	89 9f       	mul	r24, r25
    e0f4:	80 01       	movw	r16, r0
    e0f6:	11 24       	eor	r1, r1
    e0f8:	00 58       	subi	r16, 0x80	; 128
    e0fa:	16 4f       	sbci	r17, 0xF6	; 246
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1722
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable_float(args1));
    e0fc:	f8 01       	movw	r30, r16
    e0fe:	60 81       	ld	r22, Z
    e100:	71 81       	ldd	r23, Z+1	; 0x01
    e102:	82 81       	ldd	r24, Z+2	; 0x02
    e104:	93 81       	ldd	r25, Z+3	; 0x03
    e106:	0e 94 4a e0 	call	0x1c094	; 0x1c094 <__fixunssfsi>
    e10a:	f6 2e       	mov	r15, r22
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1628
   kdyz je vice techto dialogu v jednom nenu
*/

uint8_t display_function_get_variable_args(uint8_t idx)
{
  return menu_dialog_variable[idx].args;
    e10c:	f8 01       	movw	r30, r16
    e10e:	12 89       	ldd	r17, Z+18	; 0x12
tds_set_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    e110:	be 01       	movw	r22, r28
    e112:	6f 5f       	subi	r22, 0xFF	; 255
    e114:	7f 4f       	sbci	r23, 0xFF	; 255
    e116:	81 2f       	mov	r24, r17
    e118:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:107
  tds.period = period;
    e11c:	fd 8a       	std	Y+21, r15	; 0x15
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:108
  set_tds18s20(idx, &tds);
    e11e:	be 01       	movw	r22, r28
    e120:	6f 5f       	subi	r22, 0xFF	; 255
    e122:	7f 4f       	sbci	r23, 0xFF	; 255
    e124:	81 2f       	mov	r24, r17
    e126:	0e 94 88 55 	call	0xab10	; 0xab10 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1723
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable_float(args1));
}
    e12a:	66 96       	adiw	r28, 0x16	; 22
    e12c:	0f b6       	in	r0, 0x3f	; 63
    e12e:	f8 94       	cli
    e130:	de bf       	out	0x3e, r29	; 62
    e132:	0f be       	out	0x3f, r0	; 63
    e134:	cd bf       	out	0x3d, r28	; 61
    e136:	df 91       	pop	r29
    e138:	cf 91       	pop	r28
    e13a:	1f 91       	pop	r17
    e13c:	0f 91       	pop	r16
    e13e:	ff 90       	pop	r15
    e140:	08 95       	ret

0000e142 <menu_tds_save_offset(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1716
/////
/*
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
    e142:	cf 92       	push	r12
    e144:	df 92       	push	r13
    e146:	ef 92       	push	r14
    e148:	ff 92       	push	r15
    e14a:	0f 93       	push	r16
    e14c:	1f 93       	push	r17
    e14e:	cf 93       	push	r28
    e150:	df 93       	push	r29
    e152:	cd b7       	in	r28, 0x3d	; 61
    e154:	de b7       	in	r29, 0x3e	; 62
    e156:	66 97       	sbiw	r28, 0x16	; 22
    e158:	0f b6       	in	r0, 0x3f	; 63
    e15a:	f8 94       	cli
    e15c:	de bf       	out	0x3e, r29	; 62
    e15e:	0f be       	out	0x3f, r0	; 63
    e160:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable_float():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1633
  return menu_dialog_variable[idx].args;
}

float display_function_get_variable_float(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    e162:	95 e1       	ldi	r25, 0x15	; 21
    e164:	89 9f       	mul	r24, r25
    e166:	80 01       	movw	r16, r0
    e168:	11 24       	eor	r1, r1
    e16a:	00 58       	subi	r16, 0x80	; 128
    e16c:	16 4f       	sbci	r17, 0xF6	; 246
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1717
/*
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
    e16e:	20 e0       	ldi	r18, 0x00	; 0
    e170:	30 e0       	ldi	r19, 0x00	; 0
    e172:	4a e7       	ldi	r20, 0x7A	; 122
    e174:	54 e4       	ldi	r21, 0x44	; 68
    e176:	f8 01       	movw	r30, r16
    e178:	60 81       	ld	r22, Z
    e17a:	71 81       	ldd	r23, Z+1	; 0x01
    e17c:	82 81       	ldd	r24, Z+2	; 0x02
    e17e:	93 81       	ldd	r25, Z+3	; 0x03
    e180:	0e 94 fd dd 	call	0x1bbfa	; 0x1bbfa <__mulsf3>
    e184:	0e 94 43 e0 	call	0x1c086	; 0x1c086 <__fixsfsi>
    e188:	6b 01       	movw	r12, r22
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1628
   kdyz je vice techto dialogu v jednom nenu
*/

uint8_t display_function_get_variable_args(uint8_t idx)
{
  return menu_dialog_variable[idx].args;
    e18a:	f8 01       	movw	r30, r16
    e18c:	12 89       	ldd	r17, Z+18	; 0x12
tds_set_offset():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    e18e:	be 01       	movw	r22, r28
    e190:	6f 5f       	subi	r22, 0xFF	; 255
    e192:	7f 4f       	sbci	r23, 0xFF	; 255
    e194:	81 2f       	mov	r24, r17
    e196:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    e19a:	dc 86       	std	Y+12, r13	; 0x0c
    e19c:	cb 86       	std	Y+11, r12	; 0x0b
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    e19e:	be 01       	movw	r22, r28
    e1a0:	6f 5f       	subi	r22, 0xFF	; 255
    e1a2:	7f 4f       	sbci	r23, 0xFF	; 255
    e1a4:	81 2f       	mov	r24, r17
    e1a6:	0e 94 88 55 	call	0xab10	; 0xab10 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1718
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
}
    e1aa:	66 96       	adiw	r28, 0x16	; 22
    e1ac:	0f b6       	in	r0, 0x3f	; 63
    e1ae:	f8 94       	cli
    e1b0:	de bf       	out	0x3e, r29	; 62
    e1b2:	0f be       	out	0x3f, r0	; 63
    e1b4:	cd bf       	out	0x3d, r28	; 61
    e1b6:	df 91       	pop	r29
    e1b8:	cf 91       	pop	r28
    e1ba:	1f 91       	pop	r17
    e1bc:	0f 91       	pop	r16
    e1be:	ff 90       	pop	r15
    e1c0:	ef 90       	pop	r14
    e1c2:	df 90       	pop	r13
    e1c4:	cf 90       	pop	r12
    e1c6:	08 95       	ret

0000e1c8 <device_get_name(char*)>:
_Z15device_get_namePc():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:59

//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
    e1c8:	0f 93       	push	r16
    e1ca:	1f 93       	push	r17
    e1cc:	cf 93       	push	r28
    e1ce:	df 93       	push	r29
    e1d0:	8c 01       	movw	r16, r24
    e1d2:	c4 e6       	ldi	r28, 0x64	; 100
    e1d4:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:63
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(device_nazev  + i);
    e1d6:	ce 01       	movw	r24, r28
    e1d8:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:64
    name[i] = t;
    e1dc:	f8 01       	movw	r30, r16
    e1de:	81 93       	st	Z+, r24
    e1e0:	8f 01       	movw	r16, r30
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:65
    name[i + 1] = 0;
    e1e2:	10 82       	st	Z, r1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:66
    if (t == 0)
    e1e4:	88 23       	and	r24, r24
    e1e6:	21 f0       	breq	.+8      	; 0xe1f0 <device_get_name(char*)+0x28>
    e1e8:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:61
//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    e1ea:	cd 36       	cpi	r28, 0x6D	; 109
    e1ec:	d1 05       	cpc	r29, r1
    e1ee:	99 f7       	brne	.-26     	; 0xe1d6 <device_get_name(char*)+0xe>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:71
    if (t == 0)
    {
      break;
    }
  }
}
    e1f0:	df 91       	pop	r29
    e1f2:	cf 91       	pop	r28
    e1f4:	1f 91       	pop	r17
    e1f6:	0f 91       	pop	r16
    e1f8:	08 95       	ret

0000e1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:217
  else
    mqtt_error++;
}
///
void send_mqtt_general_payload(PubSubClient *mqtt_client, char *topic, const char *payload)
{
    e1fa:	cf 92       	push	r12
    e1fc:	df 92       	push	r13
    e1fe:	ef 92       	push	r14
    e200:	ff 92       	push	r15
    e202:	0f 93       	push	r16
    e204:	1f 93       	push	r17
    e206:	cf 93       	push	r28
    e208:	df 93       	push	r29
    e20a:	cd b7       	in	r28, 0x3d	; 61
    e20c:	de b7       	in	r29, 0x3e	; 62
    e20e:	ca 54       	subi	r28, 0x4A	; 74
    e210:	d1 09       	sbc	r29, r1
    e212:	0f b6       	in	r0, 0x3f	; 63
    e214:	f8 94       	cli
    e216:	de bf       	out	0x3e, r29	; 62
    e218:	0f be       	out	0x3f, r0	; 63
    e21a:	cd bf       	out	0x3d, r28	; 61
    e21c:	8c 01       	movw	r16, r24
    e21e:	6b 01       	movw	r12, r22
    e220:	7a 01       	movw	r14, r20
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:220
  char str_topic[64];
  char hostname[10];
  if (mqtt_client->connected())
    e222:	0e 94 7d 52 	call	0xa4fa	; 0xa4fa <PubSubClient::connected()>
    e226:	88 23       	and	r24, r24
    e228:	89 f1       	breq	.+98     	; 0xe28c <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:222
  {
    mqtt_send_message++;
    e22a:	80 91 85 0c 	lds	r24, 0x0C85	; 0x800c85 <mqtt_send_message>
    e22e:	90 91 86 0c 	lds	r25, 0x0C86	; 0x800c86 <mqtt_send_message+0x1>
    e232:	01 96       	adiw	r24, 0x01	; 1
    e234:	90 93 86 0c 	sts	0x0C86, r25	; 0x800c86 <mqtt_send_message+0x1>
    e238:	80 93 85 0c 	sts	0x0C85, r24	; 0x800c85 <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:223
    device_get_name(hostname);
    e23c:	ce 01       	movw	r24, r28
    e23e:	8f 5b       	subi	r24, 0xBF	; 191
    e240:	9f 4f       	sbci	r25, 0xFF	; 255
    e242:	0e 94 e4 70 	call	0xe1c8	; 0xe1c8 <device_get_name(char*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:224
    strcpy_P(str_topic, header_out);
    e246:	60 91 83 0c 	lds	r22, 0x0C83	; 0x800c83 <header_out>
    e24a:	70 91 84 0c 	lds	r23, 0x0C84	; 0x800c84 <header_out+0x1>
    e24e:	ce 01       	movw	r24, r28
    e250:	01 96       	adiw	r24, 0x01	; 1
    e252:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:225
    strcat(str_topic, hostname);
    e256:	be 01       	movw	r22, r28
    e258:	6f 5b       	subi	r22, 0xBF	; 191
    e25a:	7f 4f       	sbci	r23, 0xFF	; 255
    e25c:	ce 01       	movw	r24, r28
    e25e:	01 96       	adiw	r24, 0x01	; 1
    e260:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:226
    strcat(str_topic, "/");
    e264:	6a e8       	ldi	r22, 0x8A	; 138
    e266:	75 e0       	ldi	r23, 0x05	; 5
    e268:	ce 01       	movw	r24, r28
    e26a:	01 96       	adiw	r24, 0x01	; 1
    e26c:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:227
    strcat(str_topic, topic);
    e270:	b6 01       	movw	r22, r12
    e272:	ce 01       	movw	r24, r28
    e274:	01 96       	adiw	r24, 0x01	; 1
    e276:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:228
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
    e27a:	a7 01       	movw	r20, r14
    e27c:	be 01       	movw	r22, r28
    e27e:	6f 5f       	subi	r22, 0xFF	; 255
    e280:	7f 4f       	sbci	r23, 0xFF	; 255
    e282:	c8 01       	movw	r24, r16
    e284:	0e 94 21 53 	call	0xa642	; 0xa642 <PubSubClient::publish(char const*, char const*)>
    e288:	81 11       	cpse	r24, r1
    e28a:	09 c0       	rjmp	.+18     	; 0xe29e <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:231
  }
  else
    mqtt_error++;
    e28c:	80 91 87 0c 	lds	r24, 0x0C87	; 0x800c87 <mqtt_error>
    e290:	90 91 88 0c 	lds	r25, 0x0C88	; 0x800c88 <mqtt_error+0x1>
    e294:	01 96       	adiw	r24, 0x01	; 1
    e296:	90 93 88 0c 	sts	0x0C88, r25	; 0x800c88 <mqtt_error+0x1>
    e29a:	80 93 87 0c 	sts	0x0C87, r24	; 0x800c87 <mqtt_error>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:232
}
    e29e:	c6 5b       	subi	r28, 0xB6	; 182
    e2a0:	df 4f       	sbci	r29, 0xFF	; 255
    e2a2:	0f b6       	in	r0, 0x3f	; 63
    e2a4:	f8 94       	cli
    e2a6:	de bf       	out	0x3e, r29	; 62
    e2a8:	0f be       	out	0x3f, r0	; 63
    e2aa:	cd bf       	out	0x3d, r28	; 61
    e2ac:	df 91       	pop	r29
    e2ae:	cf 91       	pop	r28
    e2b0:	1f 91       	pop	r17
    e2b2:	0f 91       	pop	r16
    e2b4:	ff 90       	pop	r15
    e2b6:	ef 90       	pop	r14
    e2b8:	df 90       	pop	r13
    e2ba:	cf 90       	pop	r12
    e2bc:	08 95       	ret

0000e2be <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:438
  return ret;
}
//////////////////////////////////////////////////////////////////////
/// servisni logovatko pres mqtt ///
int printf_via_mqtt(char c, FILE * t)
{
    e2be:	cf 93       	push	r28
    e2c0:	df 93       	push	r29
    e2c2:	cd b7       	in	r28, 0x3d	; 61
    e2c4:	de b7       	in	r29, 0x3e	; 62
    e2c6:	60 97       	sbiw	r28, 0x10	; 16
    e2c8:	0f b6       	in	r0, 0x3f	; 63
    e2ca:	f8 94       	cli
    e2cc:	de bf       	out	0x3e, r29	; 62
    e2ce:	0f be       	out	0x3f, r0	; 63
    e2d0:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:440
  char topic[16];
  mqtt_log[mqtt_log_cnt] = c;
    e2d2:	90 91 9c 0a 	lds	r25, 0x0A9C	; 0x800a9c <mqtt_log_cnt>
    e2d6:	e9 2f       	mov	r30, r25
    e2d8:	f0 e0       	ldi	r31, 0x00	; 0
    e2da:	e4 5e       	subi	r30, 0xE4	; 228
    e2dc:	f5 4f       	sbci	r31, 0xF5	; 245
    e2de:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:441
  mqtt_log[mqtt_log_cnt + 1] = 0;
    e2e0:	11 82       	std	Z+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:442
  mqtt_log_cnt++;
    e2e2:	9f 5f       	subi	r25, 0xFF	; 255
    e2e4:	90 93 9c 0a 	sts	0x0A9C, r25	; 0x800a9c <mqtt_log_cnt>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:443
  if (mqtt_log_cnt > 127 || c == '\n' || c == 0)
    e2e8:	97 fd       	sbrc	r25, 7
    e2ea:	04 c0       	rjmp	.+8      	; 0xe2f4 <printf_via_mqtt(char, __file*)+0x36>
    e2ec:	8a 30       	cpi	r24, 0x0A	; 10
    e2ee:	11 f0       	breq	.+4      	; 0xe2f4 <printf_via_mqtt(char, __file*)+0x36>
    e2f0:	81 11       	cpse	r24, r1
    e2f2:	13 c0       	rjmp	.+38     	; 0xe31a <printf_via_mqtt(char, __file*)+0x5c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:445
  {
    strcpy(topic, "log-printf");
    e2f4:	65 ed       	ldi	r22, 0xD5	; 213
    e2f6:	73 e0       	ldi	r23, 0x03	; 3
    e2f8:	ce 01       	movw	r24, r28
    e2fa:	01 96       	adiw	r24, 0x01	; 1
    e2fc:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:446
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    e300:	4c e1       	ldi	r20, 0x1C	; 28
    e302:	5a e0       	ldi	r21, 0x0A	; 10
    e304:	be 01       	movw	r22, r28
    e306:	6f 5f       	subi	r22, 0xFF	; 255
    e308:	7f 4f       	sbci	r23, 0xFF	; 255
    e30a:	80 91 1a 0a 	lds	r24, 0x0A1A	; 0x800a1a <pub_mqtt_client>
    e30e:	90 91 1b 0a 	lds	r25, 0x0A1B	; 0x800a1b <pub_mqtt_client+0x1>
    e312:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:447
    mqtt_log_cnt = 0;
    e316:	10 92 9c 0a 	sts	0x0A9C, r1	; 0x800a9c <mqtt_log_cnt>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:449
  }
}
    e31a:	60 96       	adiw	r28, 0x10	; 16
    e31c:	0f b6       	in	r0, 0x3f	; 63
    e31e:	f8 94       	cli
    e320:	de bf       	out	0x3e, r29	; 62
    e322:	0f be       	out	0x3f, r0	; 63
    e324:	cd bf       	out	0x3d, r28	; 61
    e326:	df 91       	pop	r29
    e328:	cf 91       	pop	r28
    e32a:	08 95       	ret

0000e32c <mqtt_publis_output(unsigned char, unsigned char) [clone .part.34]>:
_Z18mqtt_publis_outputhh.part.34():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3296
    }
  }
}
///
///
void mqtt_publis_output(uint8_t idx, uint8_t state)
    e32c:	0f 93       	push	r16
    e32e:	1f 93       	push	r17
    e330:	cf 93       	push	r28
    e332:	df 93       	push	r29
    e334:	cd b7       	in	r28, 0x3d	; 61
    e336:	de b7       	in	r29, 0x3e	; 62
    e338:	c8 58       	subi	r28, 0x88	; 136
    e33a:	d1 09       	sbc	r29, r1
    e33c:	0f b6       	in	r0, 0x3f	; 63
    e33e:	f8 94       	cli
    e340:	de bf       	out	0x3e, r29	; 62
    e342:	0f be       	out	0x3f, r0	; 63
    e344:	cd bf       	out	0x3d, r28	; 61
    e346:	08 2f       	mov	r16, r24
    e348:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3303
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
  {
    strcpy_P(str_topic, termbig_header_in);
    e34a:	6b e7       	ldi	r22, 0x7B	; 123
    e34c:	72 e6       	ldi	r23, 0x62	; 98
    e34e:	ce 01       	movw	r24, r28
    e350:	01 96       	adiw	r24, 0x01	; 1
    e352:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3304
    strcat(str_topic, "power-output/");
    e356:	60 ee       	ldi	r22, 0xE0	; 224
    e358:	73 e0       	ldi	r23, 0x03	; 3
    e35a:	ce 01       	movw	r24, r28
    e35c:	01 96       	adiw	r24, 0x01	; 1
    e35e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    e362:	4a e0       	ldi	r20, 0x0A	; 10
    e364:	be 01       	movw	r22, r28
    e366:	6f 57       	subi	r22, 0x7F	; 127
    e368:	7f 4f       	sbci	r23, 0xFF	; 255
    e36a:	80 2f       	mov	r24, r16
    e36c:	90 e0       	ldi	r25, 0x00	; 0
    e36e:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z18mqtt_publis_outputhh.part.34():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3306
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
    e372:	be 01       	movw	r22, r28
    e374:	6f 57       	subi	r22, 0x7F	; 127
    e376:	7f 4f       	sbci	r23, 0xFF	; 255
    e378:	ce 01       	movw	r24, r28
    e37a:	01 96       	adiw	r24, 0x01	; 1
    e37c:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3307
    strcat(str_topic, "/state");
    e380:	6e ee       	ldi	r22, 0xEE	; 238
    e382:	73 e0       	ldi	r23, 0x03	; 3
    e384:	ce 01       	movw	r24, r28
    e386:	01 96       	adiw	r24, 0x01	; 1
    e388:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    e38c:	4a e0       	ldi	r20, 0x0A	; 10
    e38e:	be 01       	movw	r22, r28
    e390:	6f 5b       	subi	r22, 0xBF	; 191
    e392:	7f 4f       	sbci	r23, 0xFF	; 255
    e394:	81 2f       	mov	r24, r17
    e396:	90 e0       	ldi	r25, 0x00	; 0
    e398:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z18mqtt_publis_outputhh.part.34():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3309
    itoa(state, payload, 10);
    mqtt_client.publish(str_topic, payload);
    e39c:	ae 01       	movw	r20, r28
    e39e:	4f 5b       	subi	r20, 0xBF	; 191
    e3a0:	5f 4f       	sbci	r21, 0xFF	; 255
    e3a2:	be 01       	movw	r22, r28
    e3a4:	6f 5f       	subi	r22, 0xFF	; 255
    e3a6:	7f 4f       	sbci	r23, 0xFF	; 255
    e3a8:	8a ef       	ldi	r24, 0xFA	; 250
    e3aa:	9f e0       	ldi	r25, 0x0F	; 15
    e3ac:	0e 94 21 53 	call	0xa642	; 0xa642 <PubSubClient::publish(char const*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3311
  }
}
    e3b0:	c8 57       	subi	r28, 0x78	; 120
    e3b2:	df 4f       	sbci	r29, 0xFF	; 255
    e3b4:	0f b6       	in	r0, 0x3f	; 63
    e3b6:	f8 94       	cli
    e3b8:	de bf       	out	0x3e, r29	; 62
    e3ba:	0f be       	out	0x3f, r0	; 63
    e3bc:	cd bf       	out	0x3d, r28	; 61
    e3be:	df 91       	pop	r29
    e3c0:	cf 91       	pop	r28
    e3c2:	1f 91       	pop	r17
    e3c4:	0f 91       	pop	r16
    e3c6:	08 95       	ret

0000e3c8 <remote_tds_get_data(unsigned char) [clone .part.30]>:
_Z19remote_tds_get_datah.part.30():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2175
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (value & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((value >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
    e3c8:	0f 93       	push	r16
    e3ca:	1f 93       	push	r17
    e3cc:	cf 93       	push	r28
    e3ce:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2180
{
  int value = 0;
  if (idx < MAX_RTDS)
  {
    value = SRAM.readByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx)) << 8;
    e3d0:	94 e0       	ldi	r25, 0x04	; 4
    e3d2:	89 9f       	mul	r24, r25
    e3d4:	e0 01       	movw	r28, r0
    e3d6:	11 24       	eor	r1, r1
    e3d8:	be 01       	movw	r22, r28
    e3da:	6b 59       	subi	r22, 0x9B	; 155
    e3dc:	7f 4f       	sbci	r23, 0xFF	; 255
    e3de:	07 2e       	mov	r0, r23
    e3e0:	00 0c       	add	r0, r0
    e3e2:	88 0b       	sbc	r24, r24
    e3e4:	99 0b       	sbc	r25, r25
    e3e6:	0e 94 17 b9 	call	0x1722e	; 0x1722e <SRAM_23LC::readByte(unsigned long) [clone .constprop.215]>
    e3ea:	08 2f       	mov	r16, r24
    e3ec:	10 e0       	ldi	r17, 0x00	; 0
    e3ee:	10 2f       	mov	r17, r16
    e3f0:	00 27       	eor	r16, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2181
    value = value + SRAM.readByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx));
    e3f2:	be 01       	movw	r22, r28
    e3f4:	6c 59       	subi	r22, 0x9C	; 156
    e3f6:	7f 4f       	sbci	r23, 0xFF	; 255
    e3f8:	07 2e       	mov	r0, r23
    e3fa:	00 0c       	add	r0, r0
    e3fc:	88 0b       	sbc	r24, r24
    e3fe:	99 0b       	sbc	r25, r25
    e400:	0e 94 17 b9 	call	0x1722e	; 0x1722e <SRAM_23LC::readByte(unsigned long) [clone .constprop.215]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2184
  }
  return value;
}
    e404:	80 0f       	add	r24, r16
    e406:	91 2f       	mov	r25, r17
    e408:	91 1d       	adc	r25, r1
    e40a:	df 91       	pop	r29
    e40c:	cf 91       	pop	r28
    e40e:	1f 91       	pop	r17
    e410:	0f 91       	pop	r16
    e412:	08 95       	ret

0000e414 <selftest_set_0(unsigned char)>:
_Z14selftest_set_0h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3359
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    e414:	21 e0       	ldi	r18, 0x01	; 1
    e416:	30 e0       	ldi	r19, 0x00	; 0
    e418:	01 c0       	rjmp	.+2      	; 0xe41c <selftest_set_0(unsigned char)+0x8>
    e41a:	22 0f       	add	r18, r18
    e41c:	8a 95       	dec	r24
    e41e:	ea f7       	brpl	.-6      	; 0xe41a <selftest_set_0(unsigned char)+0x6>
    e420:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <selftest_data>
    e424:	82 2b       	or	r24, r18
    e426:	80 93 65 0c 	sts	0x0C65, r24	; 0x800c65 <selftest_data>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3360
}
    e42a:	08 95       	ret

0000e42c <helper_dialog_mqtt_set_pass(unsigned int, unsigned int, unsigned char)>:
_Z27helper_dialog_mqtt_set_passjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5919
  save_setup_network();
  selftest_set_0(SELFTEST_RESTART_NEEDED);
}

void helper_dialog_mqtt_set_pass(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e42c:	cf 93       	push	r28
    e42e:	df 93       	push	r29
    e430:	cd b7       	in	r28, 0x3d	; 61
    e432:	de b7       	in	r29, 0x3e	; 62
    e434:	64 97       	sbiw	r28, 0x14	; 20
    e436:	0f b6       	in	r0, 0x3f	; 63
    e438:	f8 94       	cli
    e43a:	de bf       	out	0x3e, r29	; 62
    e43c:	0f be       	out	0x3f, r0	; 63
    e43e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5921
  char key[20];
  display_element_get_string(key);
    e440:	ce 01       	movw	r24, r28
    e442:	01 96       	adiw	r24, 0x01	; 1
    e444:	0e 94 9b 3f 	call	0x7f36	; 0x7f36 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5922
  strcpy(device.mqtt_key, key);
    e448:	be 01       	movw	r22, r28
    e44a:	6f 5f       	subi	r22, 0xFF	; 255
    e44c:	7f 4f       	sbci	r23, 0xFF	; 255
    e44e:	8e e1       	ldi	r24, 0x1E	; 30
    e450:	9e e0       	ldi	r25, 0x0E	; 14
    e452:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5923
  save_setup_network();
    e456:	0e 94 11 56 	call	0xac22	; 0xac22 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5924
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    e45a:	87 e0       	ldi	r24, 0x07	; 7
    e45c:	0e 94 0a 72 	call	0xe414	; 0xe414 <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5925
}
    e460:	64 96       	adiw	r28, 0x14	; 20
    e462:	0f b6       	in	r0, 0x3f	; 63
    e464:	f8 94       	cli
    e466:	de bf       	out	0x3e, r29	; 62
    e468:	0f be       	out	0x3f, r0	; 63
    e46a:	cd bf       	out	0x3d, r28	; 61
    e46c:	df 91       	pop	r29
    e46e:	cf 91       	pop	r28
    e470:	08 95       	ret

0000e472 <helper_dialog_mqtt_set_user(unsigned int, unsigned int, unsigned char)>:
_Z27helper_dialog_mqtt_set_userjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5910
  save_setup_network();
  selftest_set_0(SELFTEST_RESTART_NEEDED);
}

void helper_dialog_mqtt_set_user(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e472:	cf 93       	push	r28
    e474:	df 93       	push	r29
    e476:	cd b7       	in	r28, 0x3d	; 61
    e478:	de b7       	in	r29, 0x3e	; 62
    e47a:	64 97       	sbiw	r28, 0x14	; 20
    e47c:	0f b6       	in	r0, 0x3f	; 63
    e47e:	f8 94       	cli
    e480:	de bf       	out	0x3e, r29	; 62
    e482:	0f be       	out	0x3f, r0	; 63
    e484:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5912
  char user[20];
  display_element_get_string(user);
    e486:	ce 01       	movw	r24, r28
    e488:	01 96       	adiw	r24, 0x01	; 1
    e48a:	0e 94 9b 3f 	call	0x7f36	; 0x7f36 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5913
  strcpy(device.mqtt_user, user);
    e48e:	be 01       	movw	r22, r28
    e490:	6f 5f       	subi	r22, 0xFF	; 255
    e492:	7f 4f       	sbci	r23, 0xFF	; 255
    e494:	8a e0       	ldi	r24, 0x0A	; 10
    e496:	9e e0       	ldi	r25, 0x0E	; 14
    e498:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5914
  save_setup_network();
    e49c:	0e 94 11 56 	call	0xac22	; 0xac22 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5915
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    e4a0:	87 e0       	ldi	r24, 0x07	; 7
    e4a2:	0e 94 0a 72 	call	0xe414	; 0xe414 <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5916
}
    e4a6:	64 96       	adiw	r28, 0x14	; 20
    e4a8:	0f b6       	in	r0, 0x3f	; 63
    e4aa:	f8 94       	cli
    e4ac:	de bf       	out	0x3e, r29	; 62
    e4ae:	0f be       	out	0x3f, r0	; 63
    e4b0:	cd bf       	out	0x3d, r28	; 61
    e4b2:	df 91       	pop	r29
    e4b4:	cf 91       	pop	r28
    e4b6:	08 95       	ret

0000e4b8 <helper_dialog_mqtt_set_server(unsigned int, unsigned int, unsigned char)>:
_Z29helper_dialog_mqtt_set_serverjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5901
/// TODO
}


void helper_dialog_mqtt_set_server(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e4b8:	cf 93       	push	r28
    e4ba:	df 93       	push	r29
    e4bc:	cd b7       	in	r28, 0x3d	; 61
    e4be:	de b7       	in	r29, 0x3e	; 62
    e4c0:	60 97       	sbiw	r28, 0x10	; 16
    e4c2:	0f b6       	in	r0, 0x3f	; 63
    e4c4:	f8 94       	cli
    e4c6:	de bf       	out	0x3e, r29	; 62
    e4c8:	0f be       	out	0x3f, r0	; 63
    e4ca:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5903
  char ip_text[16];
  display_element_get_string(ip_text);
    e4cc:	ce 01       	movw	r24, r28
    e4ce:	01 96       	adiw	r24, 0x01	; 1
    e4d0:	0e 94 9b 3f 	call	0x7f36	; 0x7f36 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5904
  parseBytes(ip_text, '.', device.mqtt_server, 4, 10);
    e4d4:	24 e0       	ldi	r18, 0x04	; 4
    e4d6:	30 e0       	ldi	r19, 0x00	; 0
    e4d8:	44 e0       	ldi	r20, 0x04	; 4
    e4da:	5e e0       	ldi	r21, 0x0E	; 14
    e4dc:	6e e2       	ldi	r22, 0x2E	; 46
    e4de:	ce 01       	movw	r24, r28
    e4e0:	01 96       	adiw	r24, 0x01	; 1
    e4e2:	0e 94 f5 b0 	call	0x161ea	; 0x161ea <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.182]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5905
  save_setup_network();
    e4e6:	0e 94 11 56 	call	0xac22	; 0xac22 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5906
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    e4ea:	87 e0       	ldi	r24, 0x07	; 7
    e4ec:	0e 94 0a 72 	call	0xe414	; 0xe414 <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5907
}
    e4f0:	60 96       	adiw	r28, 0x10	; 16
    e4f2:	0f b6       	in	r0, 0x3f	; 63
    e4f4:	f8 94       	cli
    e4f6:	de bf       	out	0x3e, r29	; 62
    e4f8:	0f be       	out	0x3f, r0	; 63
    e4fa:	cd bf       	out	0x3d, r28	; 61
    e4fc:	df 91       	pop	r29
    e4fe:	cf 91       	pop	r28
    e500:	08 95       	ret

0000e502 <helper_dialog_ntp_set_server(unsigned int, unsigned int, unsigned char)>:
_Z28helper_dialog_ntp_set_serverjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5811
  sprintf(ip_text, "%d.%d.%d.%d", device.ntp_server[0], device.ntp_server[1], device.ntp_server[2], device.ntp_server[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_ntp_set_server, &valid_ipv4_address_element_string);
}

void helper_dialog_ntp_set_server(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e502:	cf 93       	push	r28
    e504:	df 93       	push	r29
    e506:	cd b7       	in	r28, 0x3d	; 61
    e508:	de b7       	in	r29, 0x3e	; 62
    e50a:	60 97       	sbiw	r28, 0x10	; 16
    e50c:	0f b6       	in	r0, 0x3f	; 63
    e50e:	f8 94       	cli
    e510:	de bf       	out	0x3e, r29	; 62
    e512:	0f be       	out	0x3f, r0	; 63
    e514:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5814
  uint8_t ip[4];
  char ip_text[16];
  display_element_get_string(ip_text);
    e516:	ce 01       	movw	r24, r28
    e518:	01 96       	adiw	r24, 0x01	; 1
    e51a:	0e 94 9b 3f 	call	0x7f36	; 0x7f36 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5815
  parseBytes(ip_text, '.', device.ntp_server, 4, 10);
    e51e:	24 e0       	ldi	r18, 0x04	; 4
    e520:	30 e0       	ldi	r19, 0x00	; 0
    e522:	42 e3       	ldi	r20, 0x32	; 50
    e524:	5e e0       	ldi	r21, 0x0E	; 14
    e526:	6e e2       	ldi	r22, 0x2E	; 46
    e528:	ce 01       	movw	r24, r28
    e52a:	01 96       	adiw	r24, 0x01	; 1
    e52c:	0e 94 f5 b0 	call	0x161ea	; 0x161ea <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.182]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5816
  save_setup_network();
    e530:	0e 94 11 56 	call	0xac22	; 0xac22 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5817
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    e534:	87 e0       	ldi	r24, 0x07	; 7
    e536:	0e 94 0a 72 	call	0xe414	; 0xe414 <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5818
}
    e53a:	60 96       	adiw	r28, 0x10	; 16
    e53c:	0f b6       	in	r0, 0x3f	; 63
    e53e:	f8 94       	cli
    e540:	de bf       	out	0x3e, r29	; 62
    e542:	0f be       	out	0x3f, r0	; 63
    e544:	cd bf       	out	0x3d, r28	; 61
    e546:	df 91       	pop	r29
    e548:	cf 91       	pop	r28
    e54a:	08 95       	ret

0000e54c <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>:
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5781
////////////////////////////////////////////////////////////////////////////////////////////
/*
   Obsluha tlacitka synchronizace NTP casu
*/
void button_click_ntp_sync_time(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e54c:	0f 93       	push	r16
    e54e:	1f 93       	push	r17
    e550:	cf 93       	push	r28
    e552:	df 93       	push	r29
    e554:	cd b7       	in	r28, 0x3d	; 61
    e556:	de b7       	in	r29, 0x3e	; 62
    e558:	c4 55       	subi	r28, 0x54	; 84
    e55a:	d1 09       	sbc	r29, r1
    e55c:	0f b6       	in	r0, 0x3f	; 63
    e55e:	f8 94       	cli
    e560:	de bf       	out	0x3e, r29	; 62
    e562:	0f be       	out	0x3f, r0	; 63
    e564:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    e566:	1b 82       	std	Y+3, r1	; 0x03
    e568:	85 ef       	ldi	r24, 0xF5	; 245
    e56a:	93 e0       	ldi	r25, 0x03	; 3
    e56c:	9d 83       	std	Y+5, r25	; 0x05
    e56e:	8c 83       	std	Y+4, r24	; 0x04
    e570:	89 e3       	ldi	r24, 0x39	; 57
    e572:	95 e0       	ldi	r25, 0x05	; 5
    e574:	9f 83       	std	Y+7, r25	; 0x07
    e576:	8e 83       	std	Y+6, r24	; 0x06
    e578:	18 86       	std	Y+8, r1	; 0x08
    e57a:	19 86       	std	Y+9, r1	; 0x09
    e57c:	1a 86       	std	Y+10, r1	; 0x0a
    e57e:	1b 86       	std	Y+11, r1	; 0x0b
    e580:	80 e6       	ldi	r24, 0x60	; 96
    e582:	9a ee       	ldi	r25, 0xEA	; 234
    e584:	a0 e0       	ldi	r26, 0x00	; 0
    e586:	b0 e0       	ldi	r27, 0x00	; 0
    e588:	8c 87       	std	Y+12, r24	; 0x0c
    e58a:	9d 87       	std	Y+13, r25	; 0x0d
    e58c:	ae 87       	std	Y+14, r26	; 0x0e
    e58e:	bf 87       	std	Y+15, r27	; 0x0f
    e590:	18 8a       	std	Y+16, r1	; 0x10
    e592:	19 8a       	std	Y+17, r1	; 0x11
    e594:	1a 8a       	std	Y+18, r1	; 0x12
    e596:	1b 8a       	std	Y+19, r1	; 0x13
    e598:	1c 8a       	std	Y+20, r1	; 0x14
    e59a:	1d 8a       	std	Y+21, r1	; 0x15
    e59c:	1e 8a       	std	Y+22, r1	; 0x16
    e59e:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    e5a0:	87 e1       	ldi	r24, 0x17	; 23
    e5a2:	92 e1       	ldi	r25, 0x12	; 18
    e5a4:	9a 83       	std	Y+2, r25	; 0x02
    e5a6:	89 83       	std	Y+1, r24	; 0x01
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5784
  char str2[6];
  NTPClient timeClient(udpClient);
  DateTime ted;
    e5a8:	ce 01       	movw	r24, r28
    e5aa:	88 5b       	subi	r24, 0xB8	; 184
    e5ac:	9f 4f       	sbci	r25, 0xFF	; 255
    e5ae:	0e 94 86 b2 	call	0x1650c	; 0x1650c <DateTime::DateTime(unsigned long) [clone .constprop.145]>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3425
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    e5b2:	81 e0       	ldi	r24, 0x01	; 1
    e5b4:	90 e0       	ldi	r25, 0x00	; 0
    e5b6:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5785
void button_click_ntp_sync_time(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char str2[6];
  NTPClient timeClient(udpClient);
  DateTime ted;
  if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
    e5ba:	ae 01       	movw	r20, r28
    e5bc:	48 5b       	subi	r20, 0xB8	; 184
    e5be:	5f 4f       	sbci	r21, 0xFF	; 255
    e5c0:	68 2f       	mov	r22, r24
    e5c2:	ce 01       	movw	r24, r28
    e5c4:	01 96       	adiw	r24, 0x01	; 1
    e5c6:	0e 94 0e c1 	call	0x1821c	; 0x1821c <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.146]>
    e5ca:	81 30       	cpi	r24, 0x01	; 1
    e5cc:	09 f0       	breq	.+2      	; 0xe5d0 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x84>
    e5ce:	42 c0       	rjmp	.+132    	; 0xe654 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x108>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3368
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    e5d0:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <selftest_data>
    e5d4:	8d 7f       	andi	r24, 0xFD	; 253
    e5d6:	80 93 65 0c 	sts	0x0C65, r24	; 0x800c65 <selftest_data>
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5788
  NTPClient timeClient(udpClient);
  DateTime ted;
  if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
  {
    selftest_clear_0(SELFTEST_ERR_NTP);
    MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    e5da:	70 e0       	ldi	r23, 0x00	; 0
    e5dc:	60 e0       	ldi	r22, 0x00	; 0
    e5de:	88 e6       	ldi	r24, 0x68	; 104
    e5e0:	90 e0       	ldi	r25, 0x00	; 0
    e5e2:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5789
    sprintf(str2, "%02d:%02d", ted.hour(), ted.minute());
    e5e6:	2d 96       	adiw	r28, 0x0d	; 13
    e5e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    e5ea:	2d 97       	sbiw	r28, 0x0d	; 13
    e5ec:	1f 92       	push	r1
    e5ee:	8f 93       	push	r24
    e5f0:	2c 96       	adiw	r28, 0x0c	; 12
    e5f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    e5f4:	2c 97       	sbiw	r28, 0x0c	; 12
    e5f6:	1f 92       	push	r1
    e5f8:	8f 93       	push	r24
    e5fa:	84 e6       	ldi	r24, 0x64	; 100
    e5fc:	93 e0       	ldi	r25, 0x03	; 3
    e5fe:	9f 93       	push	r25
    e600:	8f 93       	push	r24
    e602:	8e 01       	movw	r16, r28
    e604:	01 5b       	subi	r16, 0xB1	; 177
    e606:	1f 4f       	sbci	r17, 0xFF	; 255
    e608:	1f 93       	push	r17
    e60a:	0f 93       	push	r16
    e60c:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5790
    strcpy_P(dialog_text, new_text_ok_ntp_time);
    e610:	6a e7       	ldi	r22, 0x7A	; 122
    e612:	7f e5       	ldi	r23, 0x5F	; 95
    e614:	8a ef       	ldi	r24, 0xFA	; 250
    e616:	99 e0       	ldi	r25, 0x09	; 9
    e618:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5791
    strcat(dialog_text, " ");
    e61c:	6a e6       	ldi	r22, 0x6A	; 106
    e61e:	76 e0       	ldi	r23, 0x06	; 6
    e620:	8a ef       	ldi	r24, 0xFA	; 250
    e622:	99 e0       	ldi	r25, 0x09	; 9
    e624:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5792
    strcat(dialog_text, str2);
    e628:	b8 01       	movw	r22, r16
    e62a:	8a ef       	ldi	r24, 0xFA	; 250
    e62c:	99 e0       	ldi	r25, 0x09	; 9
    e62e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
    e632:	0f b6       	in	r0, 0x3f	; 63
    e634:	f8 94       	cli
    e636:	de bf       	out	0x3e, r29	; 62
    e638:	0f be       	out	0x3f, r0	; 63
    e63a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5800
  {
    selftest_set_0(SELFTEST_ERR_NTP);
    MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    strcpy_P(dialog_text, new_text_error_ntp_time);
  }
}
    e63c:	cc 5a       	subi	r28, 0xAC	; 172
    e63e:	df 4f       	sbci	r29, 0xFF	; 255
    e640:	0f b6       	in	r0, 0x3f	; 63
    e642:	f8 94       	cli
    e644:	de bf       	out	0x3e, r29	; 62
    e646:	0f be       	out	0x3f, r0	; 63
    e648:	cd bf       	out	0x3d, r28	; 61
    e64a:	df 91       	pop	r29
    e64c:	cf 91       	pop	r28
    e64e:	1f 91       	pop	r17
    e650:	0f 91       	pop	r16
    e652:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5796
    strcat(dialog_text, " ");
    strcat(dialog_text, str2);
  }
  else
  {
    selftest_set_0(SELFTEST_ERR_NTP);
    e654:	81 e0       	ldi	r24, 0x01	; 1
    e656:	0e 94 0a 72 	call	0xe414	; 0xe414 <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5797
    MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    e65a:	70 e0       	ldi	r23, 0x00	; 0
    e65c:	60 e0       	ldi	r22, 0x00	; 0
    e65e:	88 e6       	ldi	r24, 0x68	; 104
    e660:	90 e0       	ldi	r25, 0x00	; 0
    e662:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5798
    strcpy_P(dialog_text, new_text_error_ntp_time);
    e666:	64 e6       	ldi	r22, 0x64	; 100
    e668:	7f e5       	ldi	r23, 0x5F	; 95
    e66a:	8a ef       	ldi	r24, 0xFA	; 250
    e66c:	99 e0       	ldi	r25, 0x09	; 9
    e66e:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
    e672:	e4 cf       	rjmp	.-56     	; 0xe63c <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0xf0>

0000e674 <remote_tds_get_last_update(unsigned char)>:
_Z26remote_tds_get_last_updateh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2188
  return value;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
    e674:	8a 30       	cpi	r24, 0x0A	; 10
    e676:	60 f4       	brcc	.+24     	; 0xe690 <remote_tds_get_last_update(unsigned char)+0x1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2190
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    e678:	94 e0       	ldi	r25, 0x04	; 4
    e67a:	89 9f       	mul	r24, r25
    e67c:	b0 01       	movw	r22, r0
    e67e:	11 24       	eor	r1, r1
    e680:	6a 59       	subi	r22, 0x9A	; 154
    e682:	7f 4f       	sbci	r23, 0xFF	; 255
    e684:	07 2e       	mov	r0, r23
    e686:	00 0c       	add	r0, r0
    e688:	88 0b       	sbc	r24, r24
    e68a:	99 0b       	sbc	r25, r25
    e68c:	0c 94 17 b9 	jmp	0x1722e	; 0x1722e <SRAM_23LC::readByte(unsigned long) [clone .constprop.215]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2193
  }
  return last;
}
    e690:	8f ef       	ldi	r24, 0xFF	; 255
    e692:	08 95       	ret

0000e694 <mqtt_send_pid_variable(unsigned char)>:
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3238
   /thermctl-out/XXXXX/pid/IDX/kp
   /thermctl-out/XXXXX/pid/IDX/ki
   /thermctl-out/XXXXX/pid/IDX/kd
*/
void mqtt_send_pid_variable(uint8_t idx)
{
    e694:	af 92       	push	r10
    e696:	bf 92       	push	r11
    e698:	cf 92       	push	r12
    e69a:	df 92       	push	r13
    e69c:	ff 92       	push	r15
    e69e:	0f 93       	push	r16
    e6a0:	1f 93       	push	r17
    e6a2:	cf 93       	push	r28
    e6a4:	df 93       	push	r29
    e6a6:	cd b7       	in	r28, 0x3d	; 61
    e6a8:	de b7       	in	r29, 0x3e	; 62
    e6aa:	a0 97       	sbiw	r28, 0x20	; 32
    e6ac:	0f b6       	in	r0, 0x3f	; 63
    e6ae:	f8 94       	cli
    e6b0:	de bf       	out	0x3e, r29	; 62
    e6b2:	0f be       	out	0x3f, r0	; 63
    e6b4:	cd bf       	out	0x3d, r28	; 61
    e6b6:	f8 2e       	mov	r15, r24
thermostat_get_pid_p():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    e6b8:	a8 2e       	mov	r10, r24
    e6ba:	b1 2c       	mov	r11, r1
    e6bc:	65 01       	movw	r12, r10
    e6be:	cc 0c       	add	r12, r12
    e6c0:	dd 1c       	adc	r13, r13
    e6c2:	cc 0c       	add	r12, r12
    e6c4:	dd 1c       	adc	r13, r13
    e6c6:	f6 01       	movw	r30, r12
    e6c8:	e3 56       	subi	r30, 0x63	; 99
    e6ca:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3240
  char payload[32];
  dtostrf(thermostat_get_pid_p(idx), 7, 2, payload);
    e6cc:	60 81       	ld	r22, Z
    e6ce:	71 81       	ldd	r23, Z+1	; 0x01
    e6d0:	82 81       	ldd	r24, Z+2	; 0x02
    e6d2:	93 81       	ldd	r25, Z+3	; 0x03
    e6d4:	8e 01       	movw	r16, r28
    e6d6:	0f 5f       	subi	r16, 0xFF	; 255
    e6d8:	1f 4f       	sbci	r17, 0xFF	; 255
    e6da:	22 e0       	ldi	r18, 0x02	; 2
    e6dc:	47 e0       	ldi	r20, 0x07	; 7
    e6de:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3241
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kp", payload);
    e6e2:	98 01       	movw	r18, r16
    e6e4:	4a ec       	ldi	r20, 0xCA	; 202
    e6e6:	56 e0       	ldi	r21, 0x06	; 6
    e6e8:	6f 2d       	mov	r22, r15
    e6ea:	82 e0       	ldi	r24, 0x02	; 2
    e6ec:	94 e0       	ldi	r25, 0x04	; 4
    e6ee:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
thermostat_get_pid_i():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    e6f2:	f6 01       	movw	r30, r12
    e6f4:	ef 54       	subi	r30, 0x4F	; 79
    e6f6:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3242
  dtostrf(thermostat_get_pid_i(idx), 7, 2, payload);
    e6f8:	60 81       	ld	r22, Z
    e6fa:	71 81       	ldd	r23, Z+1	; 0x01
    e6fc:	82 81       	ldd	r24, Z+2	; 0x02
    e6fe:	93 81       	ldd	r25, Z+3	; 0x03
    e700:	22 e0       	ldi	r18, 0x02	; 2
    e702:	47 e0       	ldi	r20, 0x07	; 7
    e704:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3243
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "ki", payload);
    e708:	98 01       	movw	r18, r16
    e70a:	41 ed       	ldi	r20, 0xD1	; 209
    e70c:	56 e0       	ldi	r21, 0x06	; 6
    e70e:	6f 2d       	mov	r22, r15
    e710:	82 e0       	ldi	r24, 0x02	; 2
    e712:	94 e0       	ldi	r25, 0x04	; 4
    e714:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
thermostat_get_pid_d():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    e718:	f6 01       	movw	r30, r12
    e71a:	eb 53       	subi	r30, 0x3B	; 59
    e71c:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3244
  dtostrf(thermostat_get_pid_d(idx), 7, 2, payload);
    e71e:	60 81       	ld	r22, Z
    e720:	71 81       	ldd	r23, Z+1	; 0x01
    e722:	82 81       	ldd	r24, Z+2	; 0x02
    e724:	93 81       	ldd	r25, Z+3	; 0x03
    e726:	22 e0       	ldi	r18, 0x02	; 2
    e728:	47 e0       	ldi	r20, 0x07	; 7
    e72a:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3245
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kd", payload);
    e72e:	98 01       	movw	r18, r16
    e730:	48 ed       	ldi	r20, 0xD8	; 216
    e732:	56 e0       	ldi	r21, 0x06	; 6
    e734:	6f 2d       	mov	r22, r15
    e736:	82 e0       	ldi	r24, 0x02	; 2
    e738:	94 e0       	ldi	r25, 0x04	; 4
    e73a:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
thermostat_get_pid_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    e73e:	f5 01       	movw	r30, r10
    e740:	e7 52       	subi	r30, 0x27	; 39
    e742:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3246
  itoa(thermostat_get_pid_time(idx), payload, 10);
    e744:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    e746:	4a e0       	ldi	r20, 0x0A	; 10
    e748:	b8 01       	movw	r22, r16
    e74a:	90 e0       	ldi	r25, 0x00	; 0
    e74c:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3247
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "time", payload);
    e750:	98 01       	movw	r18, r16
    e752:	4f ed       	ldi	r20, 0xDF	; 223
    e754:	56 e0       	ldi	r21, 0x06	; 6
    e756:	6f 2d       	mov	r22, r15
    e758:	82 e0       	ldi	r24, 0x02	; 2
    e75a:	94 e0       	ldi	r25, 0x04	; 4
    e75c:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3248
}
    e760:	a0 96       	adiw	r28, 0x20	; 32
    e762:	0f b6       	in	r0, 0x3f	; 63
    e764:	f8 94       	cli
    e766:	de bf       	out	0x3e, r29	; 62
    e768:	0f be       	out	0x3f, r0	; 63
    e76a:	cd bf       	out	0x3d, r28	; 61
    e76c:	df 91       	pop	r29
    e76e:	cf 91       	pop	r28
    e770:	1f 91       	pop	r17
    e772:	0f 91       	pop	r16
    e774:	ff 90       	pop	r15
    e776:	df 90       	pop	r13
    e778:	cf 90       	pop	r12
    e77a:	bf 90       	pop	r11
    e77c:	af 90       	pop	r10
    e77e:	08 95       	ret

0000e780 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2942

}
/*************************************************************************************************************************/
/// mqtt_reconent - funkce pro prihlaseni k MQTT topicum
byte mqtt_reconnect(void)
{
    e780:	0f 93       	push	r16
    e782:	1f 93       	push	r17
    e784:	cf 93       	push	r28
    e786:	df 93       	push	r29
    e788:	cd b7       	in	r28, 0x3d	; 61
    e78a:	de b7       	in	r29, 0x3e	; 62
    e78c:	a5 97       	sbiw	r28, 0x25	; 37
    e78e:	0f b6       	in	r0, 0x3f	; 63
    e790:	f8 94       	cli
    e792:	de bf       	out	0x3e, r29	; 62
    e794:	0f be       	out	0x3f, r0	; 63
    e796:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2949
  char topic[26];
  byte ret = MQTT_DISCONNECTED;
  long mil;
  ///  /thermctl/xxxxxxxx/#
  ///  /thermctl/global/#
  if (!mqtt_client.connected())
    e798:	8a ef       	ldi	r24, 0xFA	; 250
    e79a:	9f e0       	ldi	r25, 0x0F	; 15
    e79c:	0e 94 7d 52 	call	0xa4fa	; 0xa4fa <PubSubClient::connected()>
    e7a0:	81 11       	cpse	r24, r1
    e7a2:	b7 c0       	rjmp	.+366    	; 0xe912 <mqtt_reconnect()+0x192>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2951
  {
    device_get_name(nazev);
    e7a4:	ce 01       	movw	r24, r28
    e7a6:	4b 96       	adiw	r24, 0x1b	; 27
    e7a8:	0e 94 e4 70 	call	0xe1c8	; 0xe1c8 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2952
    mil = millis();
    e7ac:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2953
    if (mil > lastmqttconnect)
    e7b0:	00 91 6f 09 	lds	r16, 0x096F	; 0x80096f <lastmqttconnect>
    e7b4:	10 91 70 09 	lds	r17, 0x0970	; 0x800970 <lastmqttconnect+0x1>
    e7b8:	20 91 71 09 	lds	r18, 0x0971	; 0x800971 <lastmqttconnect+0x2>
    e7bc:	30 91 72 09 	lds	r19, 0x0972	; 0x800972 <lastmqttconnect+0x3>
    e7c0:	06 17       	cp	r16, r22
    e7c2:	17 07       	cpc	r17, r23
    e7c4:	28 07       	cpc	r18, r24
    e7c6:	39 07       	cpc	r19, r25
    e7c8:	0c f0       	brlt	.+2      	; 0xe7cc <mqtt_reconnect()+0x4c>
    e7ca:	a3 c0       	rjmp	.+326    	; 0xe912 <mqtt_reconnect()+0x192>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2955
    {
      lastmqttconnect = mil + 5000;
    e7cc:	68 57       	subi	r22, 0x78	; 120
    e7ce:	7c 4e       	sbci	r23, 0xEC	; 236
    e7d0:	8f 4f       	sbci	r24, 0xFF	; 255
    e7d2:	9f 4f       	sbci	r25, 0xFF	; 255
    e7d4:	60 93 6f 09 	sts	0x096F, r22	; 0x80096f <lastmqttconnect>
    e7d8:	70 93 70 09 	sts	0x0970, r23	; 0x800970 <lastmqttconnect+0x1>
    e7dc:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <lastmqttconnect+0x2>
    e7e0:	90 93 72 09 	sts	0x0972, r25	; 0x800972 <lastmqttconnect+0x3>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:117
boolean PubSubClient::connect(const char *id, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage);
}

boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    if (!connected()) {
    e7e4:	8a ef       	ldi	r24, 0xFA	; 250
    e7e6:	9f e0       	ldi	r25, 0x0F	; 15
    e7e8:	0e 94 7d 52 	call	0xa4fa	; 0xa4fa <PubSubClient::connected()>
    e7ec:	81 11       	cpse	r24, r1
    e7ee:	d0 c0       	rjmp	.+416    	; 0xe990 <mqtt_reconnect()+0x210>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:120
        int result = 0;

        if (domain != NULL) {
    e7f0:	60 91 0f 12 	lds	r22, 0x120F	; 0x80120f <mqtt_client+0x215>
    e7f4:	70 91 10 12 	lds	r23, 0x1210	; 0x801210 <mqtt_client+0x216>
    e7f8:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <mqtt_client>
    e7fc:	90 91 fb 0f 	lds	r25, 0x0FFB	; 0x800ffb <mqtt_client+0x1>
    e800:	dc 01       	movw	r26, r24
    e802:	ed 91       	ld	r30, X+
    e804:	fc 91       	ld	r31, X
    e806:	40 91 11 12 	lds	r20, 0x1211	; 0x801211 <mqtt_client+0x217>
    e80a:	50 91 12 12 	lds	r21, 0x1212	; 0x801212 <mqtt_client+0x218>
    e80e:	61 15       	cp	r22, r1
    e810:	71 05       	cpc	r23, r1
    e812:	09 f4       	brne	.+2      	; 0xe816 <mqtt_reconnect()+0x96>
    e814:	8b c0       	rjmp	.+278    	; 0xe92c <mqtt_reconnect()+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:121
            result = _client->connect(this->domain, this->port);
    e816:	00 88       	ldd	r0, Z+16	; 0x10
    e818:	f1 89       	ldd	r31, Z+17	; 0x11
    e81a:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        } else {
            result = _client->connect(this->ip, this->port);
    e81c:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:125
        }
        if (result == 1) {
    e81e:	81 30       	cpi	r24, 0x01	; 1
    e820:	91 05       	cpc	r25, r1
    e822:	09 f0       	breq	.+2      	; 0xe826 <mqtt_reconnect()+0xa6>
    e824:	12 c1       	rjmp	.+548    	; 0xea4a <mqtt_reconnect()+0x2ca>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:126
            nextMsgId = 1;
    e826:	90 93 fd 11 	sts	0x11FD, r25	; 0x8011fd <mqtt_client+0x203>
    e82a:	80 93 fc 11 	sts	0x11FC, r24	; 0x8011fc <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:135

#if MQTT_VERSION == MQTT_VERSION_3_1
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
    e82e:	87 e0       	ldi	r24, 0x07	; 7
    e830:	e8 e1       	ldi	r30, 0x18	; 24
    e832:	f2 e0       	ldi	r31, 0x02	; 2
    e834:	de 01       	movw	r26, r28
    e836:	11 96       	adiw	r26, 0x01	; 1
    e838:	01 90       	ld	r0, Z+
    e83a:	0d 92       	st	X+, r0
    e83c:	8a 95       	dec	r24
    e83e:	e1 f7       	brne	.-8      	; 0xe838 <mqtt_reconnect()+0xb8>
    e840:	fe 01       	movw	r30, r28
    e842:	31 96       	adiw	r30, 0x01	; 1
    e844:	a1 e0       	ldi	r26, 0x01	; 1
    e846:	b0 e1       	ldi	r27, 0x10	; 16
    e848:	ce 01       	movw	r24, r28
    e84a:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:139
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
                buffer[length++] = d[j];
    e84c:	21 91       	ld	r18, Z+
    e84e:	2d 93       	st	X+, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:138
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
    e850:	8e 17       	cp	r24, r30
    e852:	9f 07       	cpc	r25, r31
    e854:	d9 f7       	brne	.-10     	; 0xe84c <mqtt_reconnect()+0xcc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:157
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
    e856:	82 e0       	ldi	r24, 0x02	; 2
    e858:	80 93 08 10 	sts	0x1008, r24	; 0x801008 <mqtt_client+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:159

            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
    e85c:	10 92 09 10 	sts	0x1009, r1	; 0x801009 <mqtt_client+0xf>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:160
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
    e860:	8f e0       	ldi	r24, 0x0F	; 15
    e862:	80 93 0a 10 	sts	0x100A, r24	; 0x80100a <mqtt_client+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:161
            length = writeString(id,buffer,length);
    e866:	4f e0       	ldi	r20, 0x0F	; 15
    e868:	50 e0       	ldi	r21, 0x00	; 0
    e86a:	6c ef       	ldi	r22, 0xFC	; 252
    e86c:	7f e0       	ldi	r23, 0x0F	; 15
    e86e:	ce 01       	movw	r24, r28
    e870:	4b 96       	adiw	r24, 0x1b	; 27
    e872:	0e 94 d8 ae 	call	0x15db0	; 0x15db0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.213]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:174
                if(pass != NULL) {
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT,buffer,length-5);
    e876:	9c 01       	movw	r18, r24
    e878:	25 50       	subi	r18, 0x05	; 5
    e87a:	31 09       	sbc	r19, r1
    e87c:	4c ef       	ldi	r20, 0xFC	; 252
    e87e:	5f e0       	ldi	r21, 0x0F	; 15
    e880:	60 e1       	ldi	r22, 0x10	; 16
    e882:	8a ef       	ldi	r24, 0xFA	; 250
    e884:	9f e0       	ldi	r25, 0x0F	; 15
    e886:	0e 94 b3 52 	call	0xa566	; 0xa566 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:176

            lastInActivity = lastOutActivity = millis();
    e88a:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
    e88e:	60 93 fe 11 	sts	0x11FE, r22	; 0x8011fe <mqtt_client+0x204>
    e892:	70 93 ff 11 	sts	0x11FF, r23	; 0x8011ff <mqtt_client+0x205>
    e896:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <mqtt_client+0x206>
    e89a:	90 93 01 12 	sts	0x1201, r25	; 0x801201 <mqtt_client+0x207>
    e89e:	60 93 02 12 	sts	0x1202, r22	; 0x801202 <mqtt_client+0x208>
    e8a2:	70 93 03 12 	sts	0x1203, r23	; 0x801203 <mqtt_client+0x209>
    e8a6:	80 93 04 12 	sts	0x1204, r24	; 0x801204 <mqtt_client+0x20a>
    e8aa:	90 93 05 12 	sts	0x1205, r25	; 0x801205 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:178

            while (!_client->available()) {
    e8ae:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <mqtt_client>
    e8b2:	90 91 fb 0f 	lds	r25, 0x0FFB	; 0x800ffb <mqtt_client+0x1>
    e8b6:	dc 01       	movw	r26, r24
    e8b8:	ed 91       	ld	r30, X+
    e8ba:	fc 91       	ld	r31, X
    e8bc:	00 84       	ldd	r0, Z+8	; 0x08
    e8be:	f1 85       	ldd	r31, Z+9	; 0x09
    e8c0:	e0 2d       	mov	r30, r0
    e8c2:	19 95       	eicall
    e8c4:	89 2b       	or	r24, r25
    e8c6:	09 f0       	breq	.+2      	; 0xe8ca <mqtt_reconnect()+0x14a>
    e8c8:	48 c0       	rjmp	.+144    	; 0xe95a <mqtt_reconnect()+0x1da>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:179
                unsigned long t = millis();
    e8ca:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:180
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*10)) {
    e8ce:	00 91 02 12 	lds	r16, 0x1202	; 0x801202 <mqtt_client+0x208>
    e8d2:	10 91 03 12 	lds	r17, 0x1203	; 0x801203 <mqtt_client+0x209>
    e8d6:	20 91 04 12 	lds	r18, 0x1204	; 0x801204 <mqtt_client+0x20a>
    e8da:	30 91 05 12 	lds	r19, 0x1205	; 0x801205 <mqtt_client+0x20b>
    e8de:	60 1b       	sub	r22, r16
    e8e0:	71 0b       	sbc	r23, r17
    e8e2:	82 0b       	sbc	r24, r18
    e8e4:	93 0b       	sbc	r25, r19
    e8e6:	62 33       	cpi	r22, 0x32	; 50
    e8e8:	71 05       	cpc	r23, r1
    e8ea:	81 05       	cpc	r24, r1
    e8ec:	91 05       	cpc	r25, r1
    e8ee:	f8 f2       	brcs	.-66     	; 0xe8ae <mqtt_reconnect()+0x12e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:181
                    _state = MQTT_CONNECTION_TIMEOUT;
    e8f0:	8c ef       	ldi	r24, 0xFC	; 252
    e8f2:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    e8f4:	90 93 16 12 	sts	0x1216, r25	; 0x801216 <mqtt_client+0x21c>
    e8f8:	80 93 15 12 	sts	0x1215, r24	; 0x801215 <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:199
                }
            }
            _client->stop();
    e8fc:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <mqtt_client>
    e900:	90 91 fb 0f 	lds	r25, 0x0FFB	; 0x800ffb <mqtt_client+0x1>
    e904:	dc 01       	movw	r26, r24
    e906:	ed 91       	ld	r30, X+
    e908:	fc 91       	ld	r31, X
    e90a:	04 88       	ldd	r0, Z+20	; 0x14
    e90c:	f5 89       	ldd	r31, Z+21	; 0x15
    e90e:	e0 2d       	mov	r30, r0
    e910:	19 95       	eicall
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2986
      }
    }
  }
  ret = mqtt_client.state();
  return ret;
}
    e912:	80 91 15 12 	lds	r24, 0x1215	; 0x801215 <mqtt_client+0x21b>
    e916:	a5 96       	adiw	r28, 0x25	; 37
    e918:	0f b6       	in	r0, 0x3f	; 63
    e91a:	f8 94       	cli
    e91c:	de bf       	out	0x3e, r29	; 62
    e91e:	0f be       	out	0x3f, r0	; 63
    e920:	cd bf       	out	0x3d, r28	; 61
    e922:	df 91       	pop	r29
    e924:	cf 91       	pop	r28
    e926:	1f 91       	pop	r17
    e928:	0f 91       	pop	r16
    e92a:	08 95       	ret
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        int result = 0;

        if (domain != NULL) {
            result = _client->connect(this->domain, this->port);
        } else {
            result = _client->connect(this->ip, this->port);
    e92c:	06 84       	ldd	r0, Z+14	; 0x0e
    e92e:	f7 85       	ldd	r31, Z+15	; 0x0f
    e930:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    e932:	22 ef       	ldi	r18, 0xF2	; 242
    e934:	32 e0       	ldi	r19, 0x02	; 2
    e936:	3a 83       	std	Y+2, r19	; 0x02
    e938:	29 83       	std	Y+1, r18	; 0x01
    e93a:	00 91 0b 12 	lds	r16, 0x120B	; 0x80120b <mqtt_client+0x211>
    e93e:	10 91 0c 12 	lds	r17, 0x120C	; 0x80120c <mqtt_client+0x212>
    e942:	20 91 0d 12 	lds	r18, 0x120D	; 0x80120d <mqtt_client+0x213>
    e946:	30 91 0e 12 	lds	r19, 0x120E	; 0x80120e <mqtt_client+0x214>
    e94a:	0b 83       	std	Y+3, r16	; 0x03
    e94c:	1c 83       	std	Y+4, r17	; 0x04
    e94e:	2d 83       	std	Y+5, r18	; 0x05
    e950:	3e 83       	std	Y+6, r19	; 0x06
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
    e952:	be 01       	movw	r22, r28
    e954:	6f 5f       	subi	r22, 0xFF	; 255
    e956:	7f 4f       	sbci	r23, 0xFF	; 255
    e958:	61 cf       	rjmp	.-318    	; 0xe81c <mqtt_reconnect()+0x9c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:187
                    _client->stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
    e95a:	ce 01       	movw	r24, r28
    e95c:	85 96       	adiw	r24, 0x25	; 37
    e95e:	0e 94 32 bd 	call	0x17a64	; 0x17a64 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:189

            if (len == 4) {
    e962:	04 97       	sbiw	r24, 0x04	; 4
    e964:	59 f6       	brne	.-106    	; 0xe8fc <mqtt_reconnect()+0x17c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
                if (buffer[3] == 0) {
    e966:	80 91 ff 0f 	lds	r24, 0x0FFF	; 0x800fff <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    e96a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == 0) {
    e96c:	81 11       	cpse	r24, r1
    e96e:	c2 cf       	rjmp	.-124    	; 0xe8f4 <mqtt_reconnect()+0x174>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:191
                    lastInActivity = millis();
    e970:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
    e974:	60 93 02 12 	sts	0x1202, r22	; 0x801202 <mqtt_client+0x208>
    e978:	70 93 03 12 	sts	0x1203, r23	; 0x801203 <mqtt_client+0x209>
    e97c:	80 93 04 12 	sts	0x1204, r24	; 0x801204 <mqtt_client+0x20a>
    e980:	90 93 05 12 	sts	0x1205, r25	; 0x801205 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:192
                    pingOutstanding = false;
    e984:	10 92 06 12 	sts	0x1206, r1	; 0x801206 <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:193
                    _state = MQTT_CONNECTED;
    e988:	10 92 16 12 	sts	0x1216, r1	; 0x801216 <mqtt_client+0x21c>
    e98c:	10 92 15 12 	sts	0x1215, r1	; 0x801215 <mqtt_client+0x21b>
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2958
    if (mil > lastmqttconnect)
    {
      lastmqttconnect = mil + 5000;
      if (mqtt_client.connect(nazev))
      {
        strcpy_P(topic, thermctl_header_in);
    e990:	60 e4       	ldi	r22, 0x40	; 64
    e992:	7c e5       	ldi	r23, 0x5C	; 92
    e994:	ce 01       	movw	r24, r28
    e996:	01 96       	adiw	r24, 0x01	; 1
    e998:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2959
        strcat(topic, nazev);
    e99c:	be 01       	movw	r22, r28
    e99e:	65 5e       	subi	r22, 0xE5	; 229
    e9a0:	7f 4f       	sbci	r23, 0xFF	; 255
    e9a2:	ce 01       	movw	r24, r28
    e9a4:	01 96       	adiw	r24, 0x01	; 1
    e9a6:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2960
        strcat(topic, "/#");
    e9aa:	6c e0       	ldi	r22, 0x0C	; 12
    e9ac:	74 e0       	ldi	r23, 0x04	; 4
    e9ae:	ce 01       	movw	r24, r28
    e9b0:	01 96       	adiw	r24, 0x01	; 1
    e9b2:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2961
        mqtt_client.subscribe(topic);
    e9b6:	ce 01       	movw	r24, r28
    e9b8:	01 96       	adiw	r24, 0x01	; 1
    e9ba:	0e 94 98 b1 	call	0x16330	; 0x16330 <PubSubClient::subscribe(char const*) [clone .constprop.165]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2962
        strcpy_P(topic, thermctl_header_in);
    e9be:	60 e4       	ldi	r22, 0x40	; 64
    e9c0:	7c e5       	ldi	r23, 0x5C	; 92
    e9c2:	ce 01       	movw	r24, r28
    e9c4:	01 96       	adiw	r24, 0x01	; 1
    e9c6:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2963
        strcat(topic, "global/#");
    e9ca:	66 e0       	ldi	r22, 0x06	; 6
    e9cc:	74 e0       	ldi	r23, 0x04	; 4
    e9ce:	ce 01       	movw	r24, r28
    e9d0:	01 96       	adiw	r24, 0x01	; 1
    e9d2:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2964
        mqtt_client.subscribe(topic);
    e9d6:	ce 01       	movw	r24, r28
    e9d8:	01 96       	adiw	r24, 0x01	; 1
    e9da:	0e 94 98 b1 	call	0x16330	; 0x16330 <PubSubClient::subscribe(char const*) [clone .constprop.165]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2966
        //// /rtds/xxxxx
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e9de:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2967
          remote_tds_subscibe_topic(idx);
    e9e0:	81 2f       	mov	r24, r17
    e9e2:	0e 94 a9 58 	call	0xb152	; 0xb152 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2966
        mqtt_client.subscribe(topic);
        strcpy_P(topic, thermctl_header_in);
        strcat(topic, "global/#");
        mqtt_client.subscribe(topic);
        //// /rtds/xxxxx
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e9e6:	1f 5f       	subi	r17, 0xFF	; 255
    e9e8:	1a 30       	cpi	r17, 0x0A	; 10
    e9ea:	d1 f7       	brne	.-12     	; 0xe9e0 <mqtt_reconnect()+0x260>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2969
          remote_tds_subscibe_topic(idx);
        //// svetelny controller
        strcpy_P(topic, lightctl_header_out);
    e9ec:	61 e3       	ldi	r22, 0x31	; 49
    e9ee:	7c e5       	ldi	r23, 0x5C	; 92
    e9f0:	ce 01       	movw	r24, r28
    e9f2:	01 96       	adiw	r24, 0x01	; 1
    e9f4:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2970
        strcat(topic, "/#");
    e9f8:	6c e0       	ldi	r22, 0x0C	; 12
    e9fa:	74 e0       	ldi	r23, 0x04	; 4
    e9fc:	ce 01       	movw	r24, r28
    e9fe:	01 96       	adiw	r24, 0x01	; 1
    ea00:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2971
        mqtt_client.subscribe(topic);
    ea04:	ce 01       	movw	r24, r28
    ea06:	01 96       	adiw	r24, 0x01	; 1
    ea08:	0e 94 98 b1 	call	0x16330	; 0x16330 <PubSubClient::subscribe(char const*) [clone .constprop.165]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2973
        /// zpetna vazba od ostatnich room controleru
        strcpy_P(topic, thermctl_subscribe);
    ea0c:	69 e1       	ldi	r22, 0x19	; 25
    ea0e:	7c e5       	ldi	r23, 0x5C	; 92
    ea10:	ce 01       	movw	r24, r28
    ea12:	01 96       	adiw	r24, 0x01	; 1
    ea14:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2974
        mqtt_client.subscribe(topic);
    ea18:	ce 01       	movw	r24, r28
    ea1a:	01 96       	adiw	r24, 0x01	; 1
    ea1c:	0e 94 98 b1 	call	0x16330	; 0x16330 <PubSubClient::subscribe(char const*) [clone .constprop.165]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2976
        /// zpetna vazba od ostatnich term controlleru
        strcpy_P(topic, termbig_subscribe);
    ea20:	62 e0       	ldi	r22, 0x02	; 2
    ea22:	7c e5       	ldi	r23, 0x5C	; 92
    ea24:	ce 01       	movw	r24, r28
    ea26:	01 96       	adiw	r24, 0x01	; 1
    ea28:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2977
        mqtt_client.subscribe(topic);
    ea2c:	ce 01       	movw	r24, r28
    ea2e:	01 96       	adiw	r24, 0x01	; 1
    ea30:	0e 94 98 b1 	call	0x16330	; 0x16330 <PubSubClient::subscribe(char const*) [clone .constprop.165]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2979
        /// zpetna vazba od vystupu
        strcpy_P(topic, termbig_header_out);
    ea34:	64 ef       	ldi	r22, 0xF4	; 244
    ea36:	7b e5       	ldi	r23, 0x5B	; 91
    ea38:	ce 01       	movw	r24, r28
    ea3a:	01 96       	adiw	r24, 0x01	; 1
    ea3c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2980
        mqtt_client.subscribe(topic);
    ea40:	ce 01       	movw	r24, r28
    ea42:	01 96       	adiw	r24, 0x01	; 1
    ea44:	0e 94 98 b1 	call	0x16330	; 0x16330 <PubSubClient::subscribe(char const*) [clone .constprop.165]>
    ea48:	64 cf       	rjmp	.-312    	; 0xe912 <mqtt_reconnect()+0x192>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:201
                    _state = buffer[3];
                }
            }
            _client->stop();
        } else {
            _state = MQTT_CONNECT_FAILED;
    ea4a:	8e ef       	ldi	r24, 0xFE	; 254
    ea4c:	9f ef       	ldi	r25, 0xFF	; 255
    ea4e:	90 93 16 12 	sts	0x1216, r25	; 0x801216 <mqtt_client+0x21c>
    ea52:	80 93 15 12 	sts	0x1215, r24	; 0x801215 <mqtt_client+0x21b>
    ea56:	5d cf       	rjmp	.-326    	; 0xe912 <mqtt_reconnect()+0x192>

0000ea58 <remote_tds_get_type(unsigned char)>:
_Z19remote_tds_get_typeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2159
  }
}
uint8_t remote_tds_get_type(uint8_t idx)
{
  uint8_t type = 255;
  if (idx < MAX_RTDS)
    ea58:	8a 30       	cpi	r24, 0x0A	; 10
    ea5a:	60 f4       	brcc	.+24     	; 0xea74 <remote_tds_get_type(unsigned char)+0x1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2161
  {
    type = SRAM.readByte(ram_remote_tds_store_type + (ram_remote_tds_store_size * idx));
    ea5c:	94 e0       	ldi	r25, 0x04	; 4
    ea5e:	89 9f       	mul	r24, r25
    ea60:	b0 01       	movw	r22, r0
    ea62:	11 24       	eor	r1, r1
    ea64:	69 59       	subi	r22, 0x99	; 153
    ea66:	7f 4f       	sbci	r23, 0xFF	; 255
    ea68:	07 2e       	mov	r0, r23
    ea6a:	00 0c       	add	r0, r0
    ea6c:	88 0b       	sbc	r24, r24
    ea6e:	99 0b       	sbc	r25, r25
    ea70:	0c 94 17 b9 	jmp	0x1722e	; 0x1722e <SRAM_23LC::readByte(unsigned long) [clone .constprop.215]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2164
  }
  return type;
}
    ea74:	8f ef       	ldi	r24, 0xFF	; 255
    ea76:	08 95       	ret

0000ea78 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4410
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
/////
void display_element_show_rtds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    ea78:	5f 92       	push	r5
    ea7a:	6f 92       	push	r6
    ea7c:	7f 92       	push	r7
    ea7e:	8f 92       	push	r8
    ea80:	9f 92       	push	r9
    ea82:	af 92       	push	r10
    ea84:	bf 92       	push	r11
    ea86:	cf 92       	push	r12
    ea88:	df 92       	push	r13
    ea8a:	ef 92       	push	r14
    ea8c:	ff 92       	push	r15
    ea8e:	0f 93       	push	r16
    ea90:	1f 93       	push	r17
    ea92:	cf 93       	push	r28
    ea94:	df 93       	push	r29
    ea96:	cd b7       	in	r28, 0x3d	; 61
    ea98:	de b7       	in	r29, 0x3e	; 62
    ea9a:	cd 54       	subi	r28, 0x4D	; 77
    ea9c:	d1 09       	sbc	r29, r1
    ea9e:	0f b6       	in	r0, 0x3f	; 63
    eaa0:	f8 94       	cli
    eaa2:	de bf       	out	0x3e, r29	; 62
    eaa4:	0f be       	out	0x3f, r0	; 63
    eaa6:	cd bf       	out	0x3d, r28	; 61
    eaa8:	3c 01       	movw	r6, r24
    eaaa:	5b 01       	movw	r10, r22
    eaac:	5e 2c       	mov	r5, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    eaae:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
    eab2:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4418
  char name[RTDS_DEVICE_STRING_LEN];
  float te;
  uint8_t last_update;
  uint8_t active;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    eab6:	26 0f       	add	r18, r22
    eab8:	37 1f       	adc	r19, r23
    eaba:	48 0f       	add	r20, r24
    eabc:	59 1f       	adc	r21, r25
    eabe:	0e 94 1f ae 	call	0x15c3e	; 0x15c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4419
  remote_tds_get_complete(args2, &active, name);
    eac2:	ae 01       	movw	r20, r28
    eac4:	45 5c       	subi	r20, 0xC5	; 197
    eac6:	5f 4f       	sbci	r21, 0xFF	; 255
    eac8:	be 01       	movw	r22, r28
    eaca:	63 5b       	subi	r22, 0xB3	; 179
    eacc:	7f 4f       	sbci	r23, 0xFF	; 255
    eace:	8e 2d       	mov	r24, r14
    ead0:	0e 94 09 58 	call	0xb012	; 0xb012 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4420
  if (active == 1)
    ead4:	2e 96       	adiw	r28, 0x0e	; 14
    ead6:	8f ad       	ldd	r24, Y+63	; 0x3f
    ead8:	2e 97       	sbiw	r28, 0x0e	; 14
    eada:	81 30       	cpi	r24, 0x01	; 1
    eadc:	09 f0       	breq	.+2      	; 0xeae0 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x68>
    eade:	c2 c0       	rjmp	.+388    	; 0xec64 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1ec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4423
  {
    /// nazev
    strcpy_P(str1, text_nazev);
    eae0:	6d e4       	ldi	r22, 0x4D	; 77
    eae2:	7e e5       	ldi	r23, 0x5E	; 94
    eae4:	ce 01       	movw	r24, r28
    eae6:	01 96       	adiw	r24, 0x01	; 1
    eae8:	6c 01       	movw	r12, r24
    eaea:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4424
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    eaee:	43 01       	movw	r8, r6
    eaf0:	95 e0       	ldi	r25, 0x05	; 5
    eaf2:	89 0e       	add	r8, r25
    eaf4:	91 1c       	adc	r9, r1
    eaf6:	ee 24       	eor	r14, r14
    eaf8:	ea 94       	dec	r14
    eafa:	fe 2c       	mov	r15, r14
    eafc:	10 e0       	ldi	r17, 0x00	; 0
    eafe:	00 e0       	ldi	r16, 0x00	; 0
    eb00:	22 e0       	ldi	r18, 0x02	; 2
    eb02:	a5 01       	movw	r20, r10
    eb04:	46 5f       	subi	r20, 0xF6	; 246
    eb06:	5f 4f       	sbci	r21, 0xFF	; 255
    eb08:	b4 01       	movw	r22, r8
    eb0a:	c6 01       	movw	r24, r12
    eb0c:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4425
    strcpy(str1, name);
    eb10:	be 01       	movw	r22, r28
    eb12:	65 5c       	subi	r22, 0xC5	; 197
    eb14:	7f 4f       	sbci	r23, 0xFF	; 255
    eb16:	c6 01       	movw	r24, r12
    eb18:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4426
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    eb1c:	b3 01       	movw	r22, r6
    eb1e:	6c 5e       	subi	r22, 0xEC	; 236
    eb20:	7f 4f       	sbci	r23, 0xFF	; 255
    eb22:	22 e0       	ldi	r18, 0x02	; 2
    eb24:	a5 01       	movw	r20, r10
    eb26:	42 5e       	subi	r20, 0xE2	; 226
    eb28:	5f 4f       	sbci	r21, 0xFF	; 255
    eb2a:	c6 01       	movw	r24, r12
    eb2c:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4427
    if (remote_tds_get_type(args2) == RTDS_REMOTE_TYPE_TEMP)
    eb30:	85 2d       	mov	r24, r5
    eb32:	0e 94 2c 75 	call	0xea58	; 0xea58 <remote_tds_get_type(unsigned char)>
    eb36:	81 30       	cpi	r24, 0x01	; 1
    eb38:	09 f0       	breq	.+2      	; 0xeb3c <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xc4>
    eb3a:	94 c0       	rjmp	.+296    	; 0xec64 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1ec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4430
    {
      /// teplota
      strcpy_P(str1, new_text_rtds_type_temp);
    eb3c:	64 e5       	ldi	r22, 0x54	; 84
    eb3e:	7e e5       	ldi	r23, 0x5E	; 94
    eb40:	c6 01       	movw	r24, r12
    eb42:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4431
      show_string(str1, x + 5, y + 60 , 1, BLACK, WHITE, 0);
    eb46:	21 e0       	ldi	r18, 0x01	; 1
    eb48:	a5 01       	movw	r20, r10
    eb4a:	44 5c       	subi	r20, 0xC4	; 196
    eb4c:	5f 4f       	sbci	r21, 0xFF	; 255
    eb4e:	b4 01       	movw	r22, r8
    eb50:	c6 01       	movw	r24, r12
    eb52:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
remote_tds_get_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2178
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int value = 0;
  if (idx < MAX_RTDS)
    eb56:	89 e0       	ldi	r24, 0x09	; 9
    eb58:	85 15       	cp	r24, r5
    eb5a:	08 f4       	brcc	.+2      	; 0xeb5e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xe6>
    eb5c:	9a c0       	rjmp	.+308    	; 0xec92 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x21a>
    eb5e:	85 2d       	mov	r24, r5
    eb60:	0e 94 e4 71 	call	0xe3c8	; 0xe3c8 <remote_tds_get_data(unsigned char) [clone .part.30]>
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4433
    {
      /// teplota
      strcpy_P(str1, new_text_rtds_type_temp);
      show_string(str1, x + 5, y + 60 , 1, BLACK, WHITE, 0);

      te = remote_tds_get_data(args2) / 1000.0;
    eb64:	bc 01       	movw	r22, r24
    eb66:	99 0f       	add	r25, r25
    eb68:	88 0b       	sbc	r24, r24
    eb6a:	99 0b       	sbc	r25, r25
    eb6c:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
    eb70:	20 e0       	ldi	r18, 0x00	; 0
    eb72:	30 e0       	ldi	r19, 0x00	; 0
    eb74:	4a e7       	ldi	r20, 0x7A	; 122
    eb76:	54 e4       	ldi	r21, 0x44	; 68
    eb78:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4434
      dtostrf(te, 4, 2, str1);
    eb7c:	86 01       	movw	r16, r12
    eb7e:	22 e0       	ldi	r18, 0x02	; 2
    eb80:	44 e0       	ldi	r20, 0x04	; 4
    eb82:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4435
      strcat(str1, "C");
    eb86:	6c e1       	ldi	r22, 0x1C	; 28
    eb88:	77 e0       	ldi	r23, 0x07	; 7
    eb8a:	c6 01       	movw	r24, r12
    eb8c:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4436
      strcpy_P(str2, current_temp_short);
    eb90:	3e 01       	movw	r6, r28
    eb92:	91 e2       	ldi	r25, 0x21	; 33
    eb94:	69 0e       	add	r6, r25
    eb96:	71 1c       	adc	r7, r1
    eb98:	64 e4       	ldi	r22, 0x44	; 68
    eb9a:	7e e5       	ldi	r23, 0x5E	; 94
    eb9c:	c3 01       	movw	r24, r6
    eb9e:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4437
      strcat(str2, str1);
    eba2:	b6 01       	movw	r22, r12
    eba4:	c3 01       	movw	r24, r6
    eba6:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4438
      show_string(str2, x + 5, y + 80 , 2, BLACK, WHITE, 0);
    ebaa:	ee 24       	eor	r14, r14
    ebac:	ea 94       	dec	r14
    ebae:	fe 2c       	mov	r15, r14
    ebb0:	10 e0       	ldi	r17, 0x00	; 0
    ebb2:	00 e0       	ldi	r16, 0x00	; 0
    ebb4:	22 e0       	ldi	r18, 0x02	; 2
    ebb6:	a5 01       	movw	r20, r10
    ebb8:	40 5b       	subi	r20, 0xB0	; 176
    ebba:	5f 4f       	sbci	r21, 0xFF	; 255
    ebbc:	b4 01       	movw	r22, r8
    ebbe:	c3 01       	movw	r24, r6
    ebc0:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4440
      /// posledni aktualizace
      last_update = remote_tds_get_last_update(args2);
    ebc4:	85 2d       	mov	r24, r5
    ebc6:	0e 94 3a 73 	call	0xe674	; 0xe674 <remote_tds_get_last_update(unsigned char)>
    ebca:	58 2e       	mov	r5, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4441
      strcpy_P(str2, text_last_update);
    ebcc:	6e e2       	ldi	r22, 0x2E	; 46
    ebce:	7e e5       	ldi	r23, 0x5E	; 94
    ebd0:	c3 01       	movw	r24, r6
    ebd2:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4442
      sprintf(str1, "%s: %d", str2, last_update);
    ebd6:	1f 92       	push	r1
    ebd8:	5f 92       	push	r5
    ebda:	7f 92       	push	r7
    ebdc:	6f 92       	push	r6
    ebde:	8e ec       	ldi	r24, 0xCE	; 206
    ebe0:	93 e0       	ldi	r25, 0x03	; 3
    ebe2:	9f 93       	push	r25
    ebe4:	8f 93       	push	r24
    ebe6:	df 92       	push	r13
    ebe8:	cf 92       	push	r12
    ebea:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4443
      show_string(str1, x + 5, y + 100 , 1, BLACK, WHITE, 0);
    ebee:	21 e0       	ldi	r18, 0x01	; 1
    ebf0:	a5 01       	movw	r20, r10
    ebf2:	4c 59       	subi	r20, 0x9C	; 156
    ebf4:	5f 4f       	sbci	r21, 0xFF	; 255
    ebf6:	b4 01       	movw	r22, r8
    ebf8:	c6 01       	movw	r24, r12
    ebfa:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4445
      active = 1;
      if (last_update >= 250) active = 0;
    ebfe:	0f b6       	in	r0, 0x3f	; 63
    ec00:	f8 94       	cli
    ec02:	de bf       	out	0x3e, r29	; 62
    ec04:	0f be       	out	0x3f, r0	; 63
    ec06:	cd bf       	out	0x3d, r28	; 61
    ec08:	99 ef       	ldi	r25, 0xF9	; 249
    ec0a:	95 15       	cp	r25, r5
    ec0c:	08 f4       	brcc	.+2      	; 0xec10 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x198>
    ec0e:	44 c0       	rjmp	.+136    	; 0xec98 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x220>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4444
      /// posledni aktualizace
      last_update = remote_tds_get_last_update(args2);
      strcpy_P(str2, text_last_update);
      sprintf(str1, "%s: %d", str2, last_update);
      show_string(str1, x + 5, y + 100 , 1, BLACK, WHITE, 0);
      active = 1;
    ec10:	81 e0       	ldi	r24, 0x01	; 1
    ec12:	2e 96       	adiw	r28, 0x0e	; 14
    ec14:	8f af       	std	Y+63, r24	; 0x3f
    ec16:	2e 97       	sbiw	r28, 0x0e	; 14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4446
      if (last_update >= 250) active = 0;
      strcpy_P(str2, text_online);
    ec18:	67 e2       	ldi	r22, 0x27	; 39
    ec1a:	7e e5       	ldi	r23, 0x5E	; 94
    ec1c:	c3 01       	movw	r24, r6
    ec1e:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4447
      sprintf(str1, "%s: %d", str2, active);
    ec22:	2e 96       	adiw	r28, 0x0e	; 14
    ec24:	8f ad       	ldd	r24, Y+63	; 0x3f
    ec26:	2e 97       	sbiw	r28, 0x0e	; 14
    ec28:	1f 92       	push	r1
    ec2a:	8f 93       	push	r24
    ec2c:	7f 92       	push	r7
    ec2e:	6f 92       	push	r6
    ec30:	8e ec       	ldi	r24, 0xCE	; 206
    ec32:	93 e0       	ldi	r25, 0x03	; 3
    ec34:	9f 93       	push	r25
    ec36:	8f 93       	push	r24
    ec38:	df 92       	push	r13
    ec3a:	cf 92       	push	r12
    ec3c:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4448
      show_string(str1, x + 5, y + 120 , 2, BLACK, WHITE, 0);
    ec40:	a5 01       	movw	r20, r10
    ec42:	48 58       	subi	r20, 0x88	; 136
    ec44:	5f 4f       	sbci	r21, 0xFF	; 255
    ec46:	ee 24       	eor	r14, r14
    ec48:	ea 94       	dec	r14
    ec4a:	fe 2c       	mov	r15, r14
    ec4c:	10 e0       	ldi	r17, 0x00	; 0
    ec4e:	00 e0       	ldi	r16, 0x00	; 0
    ec50:	22 e0       	ldi	r18, 0x02	; 2
    ec52:	b4 01       	movw	r22, r8
    ec54:	c6 01       	movw	r24, r12
    ec56:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
    ec5a:	0f b6       	in	r0, 0x3f	; 63
    ec5c:	f8 94       	cli
    ec5e:	de bf       	out	0x3e, r29	; 62
    ec60:	0f be       	out	0x3f, r0	; 63
    ec62:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4451
    }
  }
}
    ec64:	c3 5b       	subi	r28, 0xB3	; 179
    ec66:	df 4f       	sbci	r29, 0xFF	; 255
    ec68:	0f b6       	in	r0, 0x3f	; 63
    ec6a:	f8 94       	cli
    ec6c:	de bf       	out	0x3e, r29	; 62
    ec6e:	0f be       	out	0x3f, r0	; 63
    ec70:	cd bf       	out	0x3d, r28	; 61
    ec72:	df 91       	pop	r29
    ec74:	cf 91       	pop	r28
    ec76:	1f 91       	pop	r17
    ec78:	0f 91       	pop	r16
    ec7a:	ff 90       	pop	r15
    ec7c:	ef 90       	pop	r14
    ec7e:	df 90       	pop	r13
    ec80:	cf 90       	pop	r12
    ec82:	bf 90       	pop	r11
    ec84:	af 90       	pop	r10
    ec86:	9f 90       	pop	r9
    ec88:	8f 90       	pop	r8
    ec8a:	7f 90       	pop	r7
    ec8c:	6f 90       	pop	r6
    ec8e:	5f 90       	pop	r5
    ec90:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2177
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int value = 0;
    ec92:	90 e0       	ldi	r25, 0x00	; 0
    ec94:	80 e0       	ldi	r24, 0x00	; 0
    ec96:	66 cf       	rjmp	.-308    	; 0xeb64 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4445
      last_update = remote_tds_get_last_update(args2);
      strcpy_P(str2, text_last_update);
      sprintf(str1, "%s: %d", str2, last_update);
      show_string(str1, x + 5, y + 100 , 1, BLACK, WHITE, 0);
      active = 1;
      if (last_update >= 250) active = 0;
    ec98:	2e 96       	adiw	r28, 0x0e	; 14
    ec9a:	1f ae       	std	Y+63, r1	; 0x3f
    ec9c:	2e 97       	sbiw	r28, 0x0e	; 14
    ec9e:	bc cf       	rjmp	.-136    	; 0xec18 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1a0>

0000eca0 <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3273
  }
*/
///
///
void send_mqtt_remote_tds_status(void)
{
    eca0:	cf 92       	push	r12
    eca2:	df 92       	push	r13
    eca4:	ef 92       	push	r14
    eca6:	ff 92       	push	r15
    eca8:	1f 93       	push	r17
    ecaa:	cf 93       	push	r28
    ecac:	df 93       	push	r29
    ecae:	cd b7       	in	r28, 0x3d	; 61
    ecb0:	de b7       	in	r29, 0x3e	; 62
    ecb2:	63 97       	sbiw	r28, 0x13	; 19
    ecb4:	0f b6       	in	r0, 0x3f	; 63
    ecb6:	f8 94       	cli
    ecb8:	de bf       	out	0x3e, r29	; 62
    ecba:	0f be       	out	0x3f, r0	; 63
    ecbc:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3274
  uint8_t active = 0;
    ecbe:	1b 8a       	std	Y+19, r1	; 0x13
    ecc0:	86 e6       	ldi	r24, 0x66	; 102
    ecc2:	c8 2e       	mov	r12, r24
    ecc4:	d1 2c       	mov	r13, r1
    ecc6:	e1 2c       	mov	r14, r1
    ecc8:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3276
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ecca:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3278
  {
    remote_tds_get_complete(idx, &active, payload);
    eccc:	ae 01       	movw	r20, r28
    ecce:	4f 5f       	subi	r20, 0xFF	; 255
    ecd0:	5f 4f       	sbci	r21, 0xFF	; 255
    ecd2:	be 01       	movw	r22, r28
    ecd4:	6d 5e       	subi	r22, 0xED	; 237
    ecd6:	7f 4f       	sbci	r23, 0xFF	; 255
    ecd8:	81 2f       	mov	r24, r17
    ecda:	0e 94 09 58 	call	0xb012	; 0xb012 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3280
    /// odeslu pouze pokud je neco aktivni, jinak ne
    if (active == 1)
    ecde:	8b 89       	ldd	r24, Y+19	; 0x13
    ece0:	81 30       	cpi	r24, 0x01	; 1
    ece2:	09 f0       	breq	.+2      	; 0xece6 <send_mqtt_remote_tds_status()+0x46>
    ece4:	58 c0       	rjmp	.+176    	; 0xed96 <send_mqtt_remote_tds_status()+0xf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3282
    {
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "name", payload);
    ece6:	9e 01       	movw	r18, r28
    ece8:	2f 5f       	subi	r18, 0xFF	; 255
    ecea:	3f 4f       	sbci	r19, 0xFF	; 255
    ecec:	4f e0       	ldi	r20, 0x0F	; 15
    ecee:	54 e0       	ldi	r21, 0x04	; 4
    ecf0:	61 2f       	mov	r22, r17
    ecf2:	84 e1       	ldi	r24, 0x14	; 20
    ecf4:	94 e0       	ldi	r25, 0x04	; 4
    ecf6:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3283
      itoa(active, payload, 10);
    ecfa:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    ecfc:	4a e0       	ldi	r20, 0x0A	; 10
    ecfe:	be 01       	movw	r22, r28
    ed00:	6f 5f       	subi	r22, 0xFF	; 255
    ed02:	7f 4f       	sbci	r23, 0xFF	; 255
    ed04:	90 e0       	ldi	r25, 0x00	; 0
    ed06:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3284
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
    ed0a:	9e 01       	movw	r18, r28
    ed0c:	2f 5f       	subi	r18, 0xFF	; 255
    ed0e:	3f 4f       	sbci	r19, 0xFF	; 255
    ed10:	49 e1       	ldi	r20, 0x19	; 25
    ed12:	54 e0       	ldi	r21, 0x04	; 4
    ed14:	61 2f       	mov	r22, r17
    ed16:	84 e1       	ldi	r24, 0x14	; 20
    ed18:	94 e0       	ldi	r25, 0x04	; 4
    ed1a:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
remote_tds_get_data():
    ed1e:	81 2f       	mov	r24, r17
    ed20:	0e 94 e4 71 	call	0xe3c8	; 0xe3c8 <remote_tds_get_data(unsigned char) [clone .part.30]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    ed24:	4a e0       	ldi	r20, 0x0A	; 10
    ed26:	be 01       	movw	r22, r28
    ed28:	6f 5f       	subi	r22, 0xFF	; 255
    ed2a:	7f 4f       	sbci	r23, 0xFF	; 255
    ed2c:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3286
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "value", payload);
    ed30:	9e 01       	movw	r18, r28
    ed32:	2f 5f       	subi	r18, 0xFF	; 255
    ed34:	3f 4f       	sbci	r19, 0xFF	; 255
    ed36:	40 e2       	ldi	r20, 0x20	; 32
    ed38:	54 e0       	ldi	r21, 0x04	; 4
    ed3a:	61 2f       	mov	r22, r17
    ed3c:	84 e1       	ldi	r24, 0x14	; 20
    ed3e:	94 e0       	ldi	r25, 0x04	; 4
    ed40:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3287
      itoa(remote_tds_get_type(idx), payload, 10);
    ed44:	81 2f       	mov	r24, r17
    ed46:	0e 94 2c 75 	call	0xea58	; 0xea58 <remote_tds_get_type(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    ed4a:	4a e0       	ldi	r20, 0x0A	; 10
    ed4c:	be 01       	movw	r22, r28
    ed4e:	6f 5f       	subi	r22, 0xFF	; 255
    ed50:	7f 4f       	sbci	r23, 0xFF	; 255
    ed52:	90 e0       	ldi	r25, 0x00	; 0
    ed54:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3288
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "type", payload);
    ed58:	9e 01       	movw	r18, r28
    ed5a:	2f 5f       	subi	r18, 0xFF	; 255
    ed5c:	3f 4f       	sbci	r19, 0xFF	; 255
    ed5e:	46 e2       	ldi	r20, 0x26	; 38
    ed60:	54 e0       	ldi	r21, 0x04	; 4
    ed62:	61 2f       	mov	r22, r17
    ed64:	84 e1       	ldi	r24, 0x14	; 20
    ed66:	94 e0       	ldi	r25, 0x04	; 4
    ed68:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
_Z26remote_tds_get_last_updateh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2190
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    ed6c:	c7 01       	movw	r24, r14
    ed6e:	b6 01       	movw	r22, r12
    ed70:	0e 94 17 b9 	call	0x1722e	; 0x1722e <SRAM_23LC::readByte(unsigned long) [clone .constprop.215]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    ed74:	4a e0       	ldi	r20, 0x0A	; 10
    ed76:	be 01       	movw	r22, r28
    ed78:	6f 5f       	subi	r22, 0xFF	; 255
    ed7a:	7f 4f       	sbci	r23, 0xFF	; 255
    ed7c:	90 e0       	ldi	r25, 0x00	; 0
    ed7e:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3290
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "value", payload);
      itoa(remote_tds_get_type(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "type", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    ed82:	9e 01       	movw	r18, r28
    ed84:	2f 5f       	subi	r18, 0xFF	; 255
    ed86:	3f 4f       	sbci	r19, 0xFF	; 255
    ed88:	4b e2       	ldi	r20, 0x2B	; 43
    ed8a:	54 e0       	ldi	r21, 0x04	; 4
    ed8c:	61 2f       	mov	r22, r17
    ed8e:	84 e1       	ldi	r24, 0x14	; 20
    ed90:	94 e0       	ldi	r25, 0x04	; 4
    ed92:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3276
///
void send_mqtt_remote_tds_status(void)
{
  uint8_t active = 0;
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ed96:	1f 5f       	subi	r17, 0xFF	; 255
    ed98:	84 e0       	ldi	r24, 0x04	; 4
    ed9a:	c8 0e       	add	r12, r24
    ed9c:	d1 1c       	adc	r13, r1
    ed9e:	e1 1c       	adc	r14, r1
    eda0:	f1 1c       	adc	r15, r1
    eda2:	8e e8       	ldi	r24, 0x8E	; 142
    eda4:	c8 16       	cp	r12, r24
    eda6:	d1 04       	cpc	r13, r1
    eda8:	e1 04       	cpc	r14, r1
    edaa:	f1 04       	cpc	r15, r1
    edac:	09 f0       	breq	.+2      	; 0xedb0 <send_mqtt_remote_tds_status()+0x110>
    edae:	8e cf       	rjmp	.-228    	; 0xeccc <send_mqtt_remote_tds_status()+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3293
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "type", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    }
  }
}
    edb0:	63 96       	adiw	r28, 0x13	; 19
    edb2:	0f b6       	in	r0, 0x3f	; 63
    edb4:	f8 94       	cli
    edb6:	de bf       	out	0x3e, r29	; 62
    edb8:	0f be       	out	0x3f, r0	; 63
    edba:	cd bf       	out	0x3d, r28	; 61
    edbc:	df 91       	pop	r29
    edbe:	cf 91       	pop	r28
    edc0:	1f 91       	pop	r17
    edc2:	ff 90       	pop	r15
    edc4:	ef 90       	pop	r14
    edc6:	df 90       	pop	r13
    edc8:	cf 90       	pop	r12
    edca:	08 95       	ret

0000edcc <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2050
    }
}
///
/// je aktivni
void remote_tds_get_active(uint8_t idx, uint8_t *active)
{
    edcc:	cf 93       	push	r28
    edce:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2051
  if (idx < MAX_RTDS)
    edd0:	8a 30       	cpi	r24, 0x0A	; 10
    edd2:	68 f4       	brcc	.+26     	; 0xedee <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    edd4:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2053
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    edd6:	24 e1       	ldi	r18, 0x14	; 20
    edd8:	82 9f       	mul	r24, r18
    edda:	c0 01       	movw	r24, r0
    eddc:	11 24       	eor	r1, r1
    edde:	83 54       	subi	r24, 0x43	; 67
    ede0:	9a 4f       	sbci	r25, 0xFA	; 250
    ede2:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
    ede6:	88 83       	st	Y, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2057
  }
  else
    *active = 255;
}
    ede8:	df 91       	pop	r29
    edea:	cf 91       	pop	r28
    edec:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2056
  if (idx < MAX_RTDS)
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
    *active = 255;
    edee:	8f ef       	ldi	r24, 0xFF	; 255
    edf0:	fb 01       	movw	r30, r22
    edf2:	80 83       	st	Z, r24
    edf4:	f9 cf       	rjmp	.-14     	; 0xede8 <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

0000edf6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4960
/*
   v args2 je bud vylistovat vsechny a nebo pouze aktivni, pouze neaktivni
   v args1 je index poradi prvku grafickeho menu
*/
void button_get_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    edf6:	7f 92       	push	r7
    edf8:	8f 92       	push	r8
    edfa:	9f 92       	push	r9
    edfc:	af 92       	push	r10
    edfe:	bf 92       	push	r11
    ee00:	cf 92       	push	r12
    ee02:	df 92       	push	r13
    ee04:	ef 92       	push	r14
    ee06:	ff 92       	push	r15
    ee08:	0f 93       	push	r16
    ee0a:	1f 93       	push	r17
    ee0c:	cf 93       	push	r28
    ee0e:	df 93       	push	r29
    ee10:	cd b7       	in	r28, 0x3d	; 61
    ee12:	de b7       	in	r29, 0x3e	; 62
    ee14:	aa 97       	sbiw	r28, 0x2a	; 42
    ee16:	0f b6       	in	r0, 0x3f	; 63
    ee18:	f8 94       	cli
    ee1a:	de bf       	out	0x3e, r29	; 62
    ee1c:	0f be       	out	0x3f, r0	; 63
    ee1e:	cd bf       	out	0x3d, r28	; 61
    ee20:	78 2e       	mov	r7, r24
    ee22:	e4 2e       	mov	r14, r20
    ee24:	69 01       	movw	r12, r18
    ee26:	58 01       	movw	r10, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4964
  char name[20];
  uint8_t cri = 0;
  uint8_t active;
  strcpy(line1, "");
    ee28:	62 e0       	ldi	r22, 0x02	; 2
    ee2a:	73 e0       	ldi	r23, 0x03	; 3
    ee2c:	c9 01       	movw	r24, r18
    ee2e:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4965
  strcpy(line2, "");
    ee32:	62 e0       	ldi	r22, 0x02	; 2
    ee34:	73 e0       	ldi	r23, 0x03	; 3
    ee36:	c8 01       	movw	r24, r16
    ee38:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
    ee3c:	88 ec       	ldi	r24, 0xC8	; 200
    ee3e:	88 2e       	mov	r8, r24
    ee40:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4968
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    ee42:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4962
   v args1 je index poradi prvku grafickeho menu
*/
void button_get_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char name[20];
  uint8_t cri = 0;
    ee44:	f1 2c       	mov	r15, r1
tds_used():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:29

uint8_t tds_used(uint8_t idx)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    return EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    ee46:	c4 01       	movw	r24, r8
    ee48:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4970
  strcpy(line2, "");
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
  {
    if (((tds_used(idx) == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE)) || args3 == INPUT_SENSOR_SHOW_ALL)
    ee4c:	81 30       	cpi	r24, 0x01	; 1
    ee4e:	11 f4       	brne	.+4      	; 0xee54 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x5e>
    ee50:	ee 20       	and	r14, r14
    ee52:	19 f0       	breq	.+6      	; 0xee5a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x64>
    ee54:	81 e0       	ldi	r24, 0x01	; 1
    ee56:	e8 12       	cpse	r14, r24
    ee58:	2f c0       	rjmp	.+94     	; 0xeeb8 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4972
    {
      if (cri == args1)
    ee5a:	7f 10       	cpse	r7, r15
    ee5c:	2c c0       	rjmp	.+88     	; 0xeeb6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc0>
tds_get_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ee5e:	be 01       	movw	r22, r28
    ee60:	6f 5f       	subi	r22, 0xFF	; 255
    ee62:	7f 4f       	sbci	r23, 0xFF	; 255
    ee64:	81 2f       	mov	r24, r17
    ee66:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    ee6a:	be 01       	movw	r22, r28
    ee6c:	63 5f       	subi	r22, 0xF3	; 243
    ee6e:	7f 4f       	sbci	r23, 0xFF	; 255
    ee70:	ce 01       	movw	r24, r28
    ee72:	47 96       	adiw	r24, 0x17	; 23
    ee74:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4975
      {
        tds_get_name(idx, name);
        strcpy(line2, name);
    ee78:	be 01       	movw	r22, r28
    ee7a:	69 5e       	subi	r22, 0xE9	; 233
    ee7c:	7f 4f       	sbci	r23, 0xFF	; 255
    ee7e:	c5 01       	movw	r24, r10
    ee80:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4976
        strcpy_P(line1, nastaveni_onewire);
    ee84:	6f ea       	ldi	r22, 0xAF	; 175
    ee86:	7e e5       	ldi	r23, 0x5E	; 94
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4992
    {
      if (cri == args1)
      {
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
    ee88:	c6 01       	movw	r24, r12
    ee8a:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5001
    }
  }
button_get_show_default_temp_end:
  /// hack kvuli goto
  cri = 0;
}
    ee8e:	aa 96       	adiw	r28, 0x2a	; 42
    ee90:	0f b6       	in	r0, 0x3f	; 63
    ee92:	f8 94       	cli
    ee94:	de bf       	out	0x3e, r29	; 62
    ee96:	0f be       	out	0x3f, r0	; 63
    ee98:	cd bf       	out	0x3d, r28	; 61
    ee9a:	df 91       	pop	r29
    ee9c:	cf 91       	pop	r28
    ee9e:	1f 91       	pop	r17
    eea0:	0f 91       	pop	r16
    eea2:	ff 90       	pop	r15
    eea4:	ef 90       	pop	r14
    eea6:	df 90       	pop	r13
    eea8:	cf 90       	pop	r12
    eeaa:	bf 90       	pop	r11
    eeac:	af 90       	pop	r10
    eeae:	9f 90       	pop	r9
    eeb0:	8f 90       	pop	r8
    eeb2:	7f 90       	pop	r7
    eeb4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4979
        tds_get_name(idx, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_onewire);
        goto button_get_show_default_temp_end;
      }
      cri++;
    eeb6:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4968
  uint8_t active;
  strcpy(line1, "");
  strcpy(line2, "");
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    eeb8:	1f 5f       	subi	r17, 0xFF	; 255
    eeba:	86 e1       	ldi	r24, 0x16	; 22
    eebc:	88 0e       	add	r8, r24
    eebe:	91 1c       	adc	r9, r1
    eec0:	16 30       	cpi	r17, 0x06	; 6
    eec2:	09 f6       	brne	.-126    	; 0xee46 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4983
      }
      cri++;
    }
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    eec4:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4985
  {
    remote_tds_get_active(idx, &active);
    eec6:	be 01       	movw	r22, r28
    eec8:	6f 5f       	subi	r22, 0xFF	; 255
    eeca:	7f 4f       	sbci	r23, 0xFF	; 255
    eecc:	81 2f       	mov	r24, r17
    eece:	0e 94 e6 76 	call	0xedcc	; 0xedcc <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4986
    if (((active == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE) && (remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP )) || args3 == INPUT_SENSOR_SHOW_ALL)
    eed2:	89 81       	ldd	r24, Y+1	; 0x01
    eed4:	81 30       	cpi	r24, 0x01	; 1
    eed6:	d9 f4       	brne	.+54     	; 0xef0e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x118>
    eed8:	e1 10       	cpse	r14, r1
    eeda:	19 c0       	rjmp	.+50     	; 0xef0e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x118>
    eedc:	81 2f       	mov	r24, r17
    eede:	0e 94 2c 75 	call	0xea58	; 0xea58 <remote_tds_get_type(unsigned char)>
    eee2:	81 30       	cpi	r24, 0x01	; 1
    eee4:	b9 f4       	brne	.+46     	; 0xef14 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x11e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4988
    {
      if (cri == args1)
    eee6:	7f 10       	cpse	r7, r15
    eee8:	19 c0       	rjmp	.+50     	; 0xef1c <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x126>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4990
      {
        remote_tds_get_complete(idx, &active, name);
    eeea:	ae 01       	movw	r20, r28
    eeec:	49 5e       	subi	r20, 0xE9	; 233
    eeee:	5f 4f       	sbci	r21, 0xFF	; 255
    eef0:	be 01       	movw	r22, r28
    eef2:	6f 5f       	subi	r22, 0xFF	; 255
    eef4:	7f 4f       	sbci	r23, 0xFF	; 255
    eef6:	81 2f       	mov	r24, r17
    eef8:	0e 94 09 58 	call	0xb012	; 0xb012 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4991
        strcpy(line2, name);
    eefc:	be 01       	movw	r22, r28
    eefe:	69 5e       	subi	r22, 0xE9	; 233
    ef00:	7f 4f       	sbci	r23, 0xFF	; 255
    ef02:	c5 01       	movw	r24, r10
    ef04:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4992
        strcpy_P(line1, nastaveni_rtds);
    ef08:	60 ea       	ldi	r22, 0xA0	; 160
    ef0a:	7e e5       	ldi	r23, 0x5E	; 94
    ef0c:	bd cf       	rjmp	.-134    	; 0xee88 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4986
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_active(idx, &active);
    if (((active == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE) && (remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP )) || args3 == INPUT_SENSOR_SHOW_ALL)
    ef0e:	81 e0       	ldi	r24, 0x01	; 1
    ef10:	e8 16       	cp	r14, r24
    ef12:	49 f3       	breq	.-46     	; 0xeee6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xf0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4983
      }
      cri++;
    }
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ef14:	1f 5f       	subi	r17, 0xFF	; 255
    ef16:	1a 30       	cpi	r17, 0x0A	; 10
    ef18:	b1 f6       	brne	.-84     	; 0xeec6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xd0>
    ef1a:	b9 cf       	rjmp	.-142    	; 0xee8e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x98>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4995
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
        goto button_get_show_default_temp_end;
      }
      cri++;
    ef1c:	f3 94       	inc	r15
    ef1e:	fa cf       	rjmp	.-12     	; 0xef14 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x11e>

0000ef20 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>:
_Z25click_rtds_setting_sensorjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4890
    args1 - parametr z globalniho nastaveni tlacitek
    args2 / definice menu
    loop_idx - polozka z menu
*/
void click_rtds_setting_sensor(uint16_t args1, uint16_t args2, uint8_t loop_idx)
{
    ef20:	1f 93       	push	r17
    ef22:	cf 93       	push	r28
    ef24:	df 93       	push	r29
    ef26:	1f 92       	push	r1
    ef28:	cd b7       	in	r28, 0x3d	; 61
    ef2a:	de b7       	in	r29, 0x3e	; 62
    ef2c:	14 2f       	mov	r17, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4895
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  //printf("pr %d %d %d\n", args1, args2, loop_idx);

  remote_tds_get_active(loop_idx, &active);
    ef2e:	be 01       	movw	r22, r28
    ef30:	6f 5f       	subi	r22, 0xFF	; 255
    ef32:	7f 4f       	sbci	r23, 0xFF	; 255
    ef34:	84 2f       	mov	r24, r20
    ef36:	0e 94 e6 76 	call	0xedcc	; 0xedcc <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4896
  if (active == 1)
    ef3a:	89 81       	ldd	r24, Y+1	; 0x01
    ef3c:	81 30       	cpi	r24, 0x01	; 1
    ef3e:	31 f4       	brne	.+12     	; 0xef4c <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4898
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_RTDS_DETAIL, loop_idx, 0);
    ef40:	61 2f       	mov	r22, r17
    ef42:	70 e0       	ldi	r23, 0x00	; 0
    ef44:	87 e0       	ldi	r24, 0x07	; 7
    ef46:	90 e0       	ldi	r25, 0x00	; 0
    ef48:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4900
  }
}
    ef4c:	0f 90       	pop	r0
    ef4e:	df 91       	pop	r29
    ef50:	cf 91       	pop	r28
    ef52:	1f 91       	pop	r17
    ef54:	08 95       	ret

0000ef56 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4717
  return active;
  }
*/

void get_function_rtds_text_button(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    ef56:	cf 92       	push	r12
    ef58:	df 92       	push	r13
    ef5a:	ff 92       	push	r15
    ef5c:	0f 93       	push	r16
    ef5e:	1f 93       	push	r17
    ef60:	cf 93       	push	r28
    ef62:	df 93       	push	r29
    ef64:	1f 92       	push	r1
    ef66:	cd b7       	in	r28, 0x3d	; 61
    ef68:	de b7       	in	r29, 0x3e	; 62
    ef6a:	f8 2e       	mov	r15, r24
    ef6c:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4719
  uint8_t active;
  strcpy_P(line1, text_not_used);
    ef6e:	6d e7       	ldi	r22, 0x7D	; 125
    ef70:	7e e5       	ldi	r23, 0x5E	; 94
    ef72:	c9 01       	movw	r24, r18
    ef74:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4720
  line2[0] = 0;
    ef78:	f8 01       	movw	r30, r16
    ef7a:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4721
  remote_tds_get_active(args1, &active);
    ef7c:	be 01       	movw	r22, r28
    ef7e:	6f 5f       	subi	r22, 0xFF	; 255
    ef80:	7f 4f       	sbci	r23, 0xFF	; 255
    ef82:	8f 2d       	mov	r24, r15
    ef84:	0e 94 e6 76 	call	0xedcc	; 0xedcc <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4722
  if (active == 1)
    ef88:	89 81       	ldd	r24, Y+1	; 0x01
    ef8a:	81 30       	cpi	r24, 0x01	; 1
    ef8c:	89 f4       	brne	.+34     	; 0xefb0 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4724
  {
    remote_tds_get_complete(args1, &active, line1);
    ef8e:	a6 01       	movw	r20, r12
    ef90:	be 01       	movw	r22, r28
    ef92:	6f 5f       	subi	r22, 0xFF	; 255
    ef94:	7f 4f       	sbci	r23, 0xFF	; 255
    ef96:	8f 2d       	mov	r24, r15
    ef98:	0e 94 09 58 	call	0xb012	; 0xb012 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4725
    if (remote_tds_get_type(args1) == RTDS_REMOTE_TYPE_TEMP)
    ef9c:	8f 2d       	mov	r24, r15
    ef9e:	0e 94 2c 75 	call	0xea58	; 0xea58 <remote_tds_get_type(unsigned char)>
    efa2:	81 30       	cpi	r24, 0x01	; 1
    efa4:	29 f4       	brne	.+10     	; 0xefb0 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4726
      strcpy_P(line2, new_text_rtds_type_temp);
    efa6:	64 e5       	ldi	r22, 0x54	; 84
    efa8:	7e e5       	ldi	r23, 0x5E	; 94
    efaa:	c8 01       	movw	r24, r16
    efac:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4728
  }
}
    efb0:	0f 90       	pop	r0
    efb2:	df 91       	pop	r29
    efb4:	cf 91       	pop	r28
    efb6:	1f 91       	pop	r17
    efb8:	0f 91       	pop	r16
    efba:	ff 90       	pop	r15
    efbc:	df 90       	pop	r13
    efbe:	cf 90       	pop	r12
    efc0:	08 95       	ret

0000efc2 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4306
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
///
/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    efc2:	2f 92       	push	r2
    efc4:	3f 92       	push	r3
    efc6:	4f 92       	push	r4
    efc8:	5f 92       	push	r5
    efca:	6f 92       	push	r6
    efcc:	7f 92       	push	r7
    efce:	8f 92       	push	r8
    efd0:	9f 92       	push	r9
    efd2:	af 92       	push	r10
    efd4:	bf 92       	push	r11
    efd6:	cf 92       	push	r12
    efd8:	df 92       	push	r13
    efda:	ef 92       	push	r14
    efdc:	ff 92       	push	r15
    efde:	0f 93       	push	r16
    efe0:	1f 93       	push	r17
    efe2:	cf 93       	push	r28
    efe4:	df 93       	push	r29
    efe6:	cd b7       	in	r28, 0x3d	; 61
    efe8:	de b7       	in	r29, 0x3e	; 62
    efea:	ce 54       	subi	r28, 0x4E	; 78
    efec:	d1 09       	sbc	r29, r1
    efee:	0f b6       	in	r0, 0x3f	; 63
    eff0:	f8 94       	cli
    eff2:	de bf       	out	0x3e, r29	; 62
    eff4:	0f be       	out	0x3f, r0	; 63
    eff6:	cd bf       	out	0x3d, r28	; 61
    eff8:	5c 01       	movw	r10, r24
    effa:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4311
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
    effc:	6d ee       	ldi	r22, 0xED	; 237
    effe:	7d e5       	ldi	r23, 0x5D	; 93
    f000:	ce 01       	movw	r24, r28
    f002:	01 96       	adiw	r24, 0x01	; 1
    f004:	6c 01       	movw	r12, r24
    f006:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4312
  stat = get_global_temp(default_show_temp, str2, &te);
    f00a:	60 90 7e 09 	lds	r6, 0x097E	; 0x80097e <default_show_temp>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4910
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
    f00e:	6a e0       	ldi	r22, 0x0A	; 10
    f010:	7e e5       	ldi	r23, 0x5E	; 94
    f012:	ce 01       	movw	r24, r28
    f014:	c7 96       	adiw	r24, 0x37	; 55
    f016:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
    f01a:	51 2c       	mov	r5, r1
    f01c:	41 2c       	mov	r4, r1
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4907
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
    f01e:	71 2c       	mov	r7, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4920
      if (tds.used == 1)
      {
        if (cri == device)
        {
          strcpy(name, tds.name);
          if (status_tds18s20[idx].online == True)
    f020:	1e e1       	ldi	r17, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4914
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if (get_tds18s20(idx, &tds) == 1)
    f022:	be 01       	movw	r22, r28
    f024:	6f 5d       	subi	r22, 0xDF	; 223
    f026:	7f 4f       	sbci	r23, 0xFF	; 255
    f028:	84 2d       	mov	r24, r4
    f02a:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    f02e:	81 30       	cpi	r24, 0x01	; 1
    f030:	09 f0       	breq	.+2      	; 0xf034 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x72>
    f032:	9c c0       	rjmp	.+312    	; 0xf16c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4915
      if (tds.used == 1)
    f034:	89 a1       	ldd	r24, Y+33	; 0x21
    f036:	81 30       	cpi	r24, 0x01	; 1
    f038:	09 f0       	breq	.+2      	; 0xf03c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x7a>
    f03a:	98 c0       	rjmp	.+304    	; 0xf16c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4917
      {
        if (cri == device)
    f03c:	67 10       	cpse	r6, r7
    f03e:	95 c0       	rjmp	.+298    	; 0xf16a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4919
        {
          strcpy(name, tds.name);
    f040:	be 01       	movw	r22, r28
    f042:	63 5d       	subi	r22, 0xD3	; 211
    f044:	7f 4f       	sbci	r23, 0xFF	; 255
    f046:	ce 01       	movw	r24, r28
    f048:	c7 96       	adiw	r24, 0x37	; 55
    f04a:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4920
          if (status_tds18s20[idx].online == True)
    f04e:	14 9d       	mul	r17, r4
    f050:	f0 01       	movw	r30, r0
    f052:	15 9d       	mul	r17, r5
    f054:	f0 0d       	add	r31, r0
    f056:	11 24       	eor	r1, r1
    f058:	ef 54       	subi	r30, 0x4F	; 79
    f05a:	f4 4f       	sbci	r31, 0xF4	; 244
    f05c:	93 8d       	ldd	r25, Z+27	; 0x1b
    f05e:	2d 96       	adiw	r28, 0x0d	; 13
    f060:	9f af       	std	Y+63, r25	; 0x3f
    f062:	2d 97       	sbiw	r28, 0x0d	; 13
    f064:	91 30       	cpi	r25, 0x01	; 1
    f066:	09 f0       	breq	.+2      	; 0xf06a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xa8>
    f068:	80 c0       	rjmp	.+256    	; 0xf16a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4922
          {
            *temp = status_tds18s20[idx].temp / 1000.0;
    f06a:	65 81       	ldd	r22, Z+5	; 0x05
    f06c:	76 81       	ldd	r23, Z+6	; 0x06
    f06e:	07 2e       	mov	r0, r23
    f070:	00 0c       	add	r0, r0
    f072:	88 0b       	sbc	r24, r24
    f074:	99 0b       	sbc	r25, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4940
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250 && remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP)
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    f076:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
    f07a:	20 e0       	ldi	r18, 0x00	; 0
    f07c:	30 e0       	ldi	r19, 0x00	; 0
    f07e:	4a e7       	ldi	r20, 0x7A	; 122
    f080:	54 e4       	ldi	r21, 0x44	; 68
    f082:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
    f086:	1b 01       	movw	r2, r22
    f088:	2c 01       	movw	r4, r24
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4313
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
  stat = get_global_temp(default_show_temp, str2, &te);
  strcat(str1, str2);
    f08a:	be 01       	movw	r22, r28
    f08c:	69 5c       	subi	r22, 0xC9	; 201
    f08e:	7f 4f       	sbci	r23, 0xFF	; 255
    f090:	c6 01       	movw	r24, r12
    f092:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4314
  show_string(str1, x + 5, y + 5, 1, BLACK, WHITE, 0);
    f096:	ee 24       	eor	r14, r14
    f098:	ea 94       	dec	r14
    f09a:	fe 2c       	mov	r15, r14
    f09c:	10 e0       	ldi	r17, 0x00	; 0
    f09e:	00 e0       	ldi	r16, 0x00	; 0
    f0a0:	21 e0       	ldi	r18, 0x01	; 1
    f0a2:	a4 01       	movw	r20, r8
    f0a4:	4b 5f       	subi	r20, 0xFB	; 251
    f0a6:	5f 4f       	sbci	r21, 0xFF	; 255
    f0a8:	b5 01       	movw	r22, r10
    f0aa:	6b 5f       	subi	r22, 0xFB	; 251
    f0ac:	7f 4f       	sbci	r23, 0xFF	; 255
    f0ae:	c6 01       	movw	r24, r12
    f0b0:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
    f0b4:	34 01       	movw	r6, r8
    f0b6:	84 e1       	ldi	r24, 0x14	; 20
    f0b8:	68 0e       	add	r6, r24
    f0ba:	71 1c       	adc	r7, r1
    f0bc:	c5 01       	movw	r24, r10
    f0be:	04 96       	adiw	r24, 0x04	; 4
    f0c0:	2f 96       	adiw	r28, 0x0f	; 15
    f0c2:	9f af       	std	Y+63, r25	; 0x3f
    f0c4:	8e af       	std	Y+62, r24	; 0x3e
    f0c6:	2f 97       	sbiw	r28, 0x0f	; 15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4315
  if (stat == 1)
    f0c8:	2d 96       	adiw	r28, 0x0d	; 13
    f0ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    f0cc:	2d 97       	sbiw	r28, 0x0d	; 13
    f0ce:	91 30       	cpi	r25, 0x01	; 1
    f0d0:	09 f0       	breq	.+2      	; 0xf0d4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x112>
    f0d2:	8b c0       	rjmp	.+278    	; 0xf1ea <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x228>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4317
  {
    dtostrf(te, 4, 1, str1);
    f0d4:	86 01       	movw	r16, r12
    f0d6:	21 e0       	ldi	r18, 0x01	; 1
    f0d8:	44 e0       	ldi	r20, 0x04	; 4
    f0da:	c2 01       	movw	r24, r4
    f0dc:	b1 01       	movw	r22, r2
    f0de:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4318
    if (strlen(str1) <= 4)
    f0e2:	f6 01       	movw	r30, r12
    f0e4:	01 90       	ld	r0, Z+
    f0e6:	00 20       	and	r0, r0
    f0e8:	e9 f7       	brne	.-6      	; 0xf0e4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x122>
    f0ea:	31 97       	sbiw	r30, 0x01	; 1
    f0ec:	ec 19       	sub	r30, r12
    f0ee:	fd 09       	sbc	r31, r13
    f0f0:	35 97       	sbiw	r30, 0x05	; 5
    f0f2:	28 f4       	brcc	.+10     	; 0xf0fe <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x13c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4319
      strcat(str1, "C");
    f0f4:	6c e1       	ldi	r22, 0x1C	; 28
    f0f6:	77 e0       	ldi	r23, 0x07	; 7
    f0f8:	c6 01       	movw	r24, r12
    f0fa:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4320
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    f0fe:	ee 24       	eor	r14, r14
    f100:	ea 94       	dec	r14
    f102:	fe 2c       	mov	r15, r14
    f104:	10 e0       	ldi	r17, 0x00	; 0
    f106:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4325
  }
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    f108:	28 e0       	ldi	r18, 0x08	; 8
    f10a:	a3 01       	movw	r20, r6
    f10c:	2f 96       	adiw	r28, 0x0f	; 15
    f10e:	6e ad       	ldd	r22, Y+62	; 0x3e
    f110:	7f ad       	ldd	r23, Y+63	; 0x3f
    f112:	2f 97       	sbiw	r28, 0x0f	; 15
    f114:	c6 01       	movw	r24, r12
    f116:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    f11a:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
    f11e:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4328
  }
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    f122:	94 01       	movw	r18, r8
    f124:	2c 5a       	subi	r18, 0xAC	; 172
    f126:	3f 4f       	sbci	r19, 0xFF	; 255
    f128:	a5 01       	movw	r20, r10
    f12a:	4c 50       	subi	r20, 0x0C	; 12
    f12c:	5f 4f       	sbci	r21, 0xFF	; 255
    f12e:	b4 01       	movw	r22, r8
    f130:	c5 01       	movw	r24, r10
    f132:	0e 94 1f ae 	call	0x15c3e	; 0x15c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4329
}
    f136:	c2 5b       	subi	r28, 0xB2	; 178
    f138:	df 4f       	sbci	r29, 0xFF	; 255
    f13a:	0f b6       	in	r0, 0x3f	; 63
    f13c:	f8 94       	cli
    f13e:	de bf       	out	0x3e, r29	; 62
    f140:	0f be       	out	0x3f, r0	; 63
    f142:	cd bf       	out	0x3d, r28	; 61
    f144:	df 91       	pop	r29
    f146:	cf 91       	pop	r28
    f148:	1f 91       	pop	r17
    f14a:	0f 91       	pop	r16
    f14c:	ff 90       	pop	r15
    f14e:	ef 90       	pop	r14
    f150:	df 90       	pop	r13
    f152:	cf 90       	pop	r12
    f154:	bf 90       	pop	r11
    f156:	af 90       	pop	r10
    f158:	9f 90       	pop	r9
    f15a:	8f 90       	pop	r8
    f15c:	7f 90       	pop	r7
    f15e:	6f 90       	pop	r6
    f160:	5f 90       	pop	r5
    f162:	4f 90       	pop	r4
    f164:	3f 90       	pop	r3
    f166:	2f 90       	pop	r2
    f168:	08 95       	ret
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4927
            *temp = status_tds18s20[idx].temp / 1000.0;
            ret = 1;
            goto get_global_temp_end;
          }
        }
        cri++;
    f16a:	73 94       	inc	r7
    f16c:	8f ef       	ldi	r24, 0xFF	; 255
    f16e:	48 1a       	sub	r4, r24
    f170:	58 0a       	sbc	r5, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4913
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    f172:	96 e0       	ldi	r25, 0x06	; 6
    f174:	49 16       	cp	r4, r25
    f176:	51 04       	cpc	r5, r1
    f178:	09 f0       	breq	.+2      	; 0xf17c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1ba>
    f17a:	53 cf       	rjmp	.-346    	; 0xf022 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x60>
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4930
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f17c:	10 e0       	ldi	r17, 0x00	; 0
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4932
  {
    remote_tds_get_active(idx, &active);
    f17e:	be 01       	movw	r22, r28
    f180:	65 5b       	subi	r22, 0xB5	; 181
    f182:	7f 4f       	sbci	r23, 0xFF	; 255
    f184:	81 2f       	mov	r24, r17
    f186:	0e 94 e6 76 	call	0xedcc	; 0xedcc <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4933
    if (active == 1)
    f18a:	2c 96       	adiw	r28, 0x0c	; 12
    f18c:	8f ad       	ldd	r24, Y+63	; 0x3f
    f18e:	2c 97       	sbiw	r28, 0x0c	; 12
    f190:	81 30       	cpi	r24, 0x01	; 1
    f192:	09 f5       	brne	.+66     	; 0xf1d6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x214>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4935
    {
      if (cri == device)
    f194:	67 10       	cpse	r6, r7
    f196:	1e c0       	rjmp	.+60     	; 0xf1d4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x212>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4937
      {
        remote_tds_get_complete(idx, &active, name);
    f198:	ae 01       	movw	r20, r28
    f19a:	49 5c       	subi	r20, 0xC9	; 201
    f19c:	5f 4f       	sbci	r21, 0xFF	; 255
    f19e:	be 01       	movw	r22, r28
    f1a0:	65 5b       	subi	r22, 0xB5	; 181
    f1a2:	7f 4f       	sbci	r23, 0xFF	; 255
    f1a4:	81 2f       	mov	r24, r17
    f1a6:	0e 94 09 58 	call	0xb012	; 0xb012 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4938
        if (remote_tds_get_last_update(idx) < 250 && remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP)
    f1aa:	81 2f       	mov	r24, r17
    f1ac:	0e 94 3a 73 	call	0xe674	; 0xe674 <remote_tds_get_last_update(unsigned char)>
    f1b0:	8a 3f       	cpi	r24, 0xFA	; 250
    f1b2:	80 f4       	brcc	.+32     	; 0xf1d4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x212>
    f1b4:	81 2f       	mov	r24, r17
    f1b6:	0e 94 2c 75 	call	0xea58	; 0xea58 <remote_tds_get_type(unsigned char)>
    f1ba:	2d 96       	adiw	r28, 0x0d	; 13
    f1bc:	8f af       	std	Y+63, r24	; 0x3f
    f1be:	2d 97       	sbiw	r28, 0x0d	; 13
    f1c0:	81 30       	cpi	r24, 0x01	; 1
    f1c2:	41 f4       	brne	.+16     	; 0xf1d4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x212>
remote_tds_get_data():
    f1c4:	81 2f       	mov	r24, r17
    f1c6:	0e 94 e4 71 	call	0xe3c8	; 0xe3c8 <remote_tds_get_data(unsigned char) [clone .part.30]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4940
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    f1ca:	bc 01       	movw	r22, r24
    f1cc:	99 0f       	add	r25, r25
    f1ce:	88 0b       	sbc	r24, r24
    f1d0:	99 0b       	sbc	r25, r25
    f1d2:	51 cf       	rjmp	.-350    	; 0xf076 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4945
          ret = 1;
          goto get_global_temp_end;
        }
      }
      cri++;
    f1d4:	73 94       	inc	r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4930
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f1d6:	1f 5f       	subi	r17, 0xFF	; 255
    f1d8:	1a 30       	cpi	r17, 0x0A	; 10
    f1da:	89 f6       	brne	.-94     	; 0xf17e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4911
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
    f1dc:	21 2c       	mov	r2, r1
    f1de:	31 2c       	mov	r3, r1
    f1e0:	21 01       	movw	r4, r2
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4908
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
    f1e2:	2d 96       	adiw	r28, 0x0d	; 13
    f1e4:	1f ae       	std	Y+63, r1	; 0x3f
    f1e6:	2d 97       	sbiw	r28, 0x0d	; 13
    f1e8:	50 cf       	rjmp	.-352    	; 0xf08a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xc8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4324
      strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    f1ea:	6a e0       	ldi	r22, 0x0A	; 10
    f1ec:	7e e5       	ldi	r23, 0x5E	; 94
    f1ee:	c6 01       	movw	r24, r12
    f1f0:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4325
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    f1f4:	ee 24       	eor	r14, r14
    f1f6:	ea 94       	dec	r14
    f1f8:	fe 2c       	mov	r15, r14
    f1fa:	00 e0       	ldi	r16, 0x00	; 0
    f1fc:	18 ef       	ldi	r17, 0xF8	; 248
    f1fe:	84 cf       	rjmp	.-248    	; 0xf108 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x146>

0000f200 <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2115
  }
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
    f200:	1f 93       	push	r17
    f202:	cf 93       	push	r28
    f204:	df 93       	push	r29
    f206:	1f 92       	push	r1
    f208:	cd b7       	in	r28, 0x3d	; 61
    f20a:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2118
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f20c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2120
  {
    remote_tds_get_active(idx, &active);
    f20e:	be 01       	movw	r22, r28
    f210:	6f 5f       	subi	r22, 0xFF	; 255
    f212:	7f 4f       	sbci	r23, 0xFF	; 255
    f214:	81 2f       	mov	r24, r17
    f216:	0e 94 e6 76 	call	0xedcc	; 0xedcc <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2121
    if (active == 0)
    f21a:	89 81       	ldd	r24, Y+1	; 0x01
    f21c:	88 23       	and	r24, r24
    f21e:	21 f0       	breq	.+8      	; 0xf228 <remote_tds_find_free()+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2118
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f220:	1f 5f       	subi	r17, 0xFF	; 255
    f222:	1a 30       	cpi	r17, 0x0A	; 10
    f224:	a1 f7       	brne	.-24     	; 0xf20e <remote_tds_find_free()+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2116
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
    f226:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2128
      ret = idx;
      break;
    }
  }
  return ret;
}
    f228:	81 2f       	mov	r24, r17
    f22a:	0f 90       	pop	r0
    f22c:	df 91       	pop	r29
    f22e:	cf 91       	pop	r28
    f230:	1f 91       	pop	r17
    f232:	08 95       	ret

0000f234 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>:
_Z21click_rtds_add_sensorjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4844
  }
  return cnt;
}

void click_rtds_add_sensor(uint16_t args1, uint16_t args2, uint8_t args3)
{
    f234:	1f 93       	push	r17
    f236:	cf 93       	push	r28
    f238:	df 93       	push	r29
    f23a:	00 d0       	rcall	.+0      	; 0xf23c <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x8>
    f23c:	1f 92       	push	r1
    f23e:	1f 92       	push	r1
    f240:	cd b7       	in	r28, 0x3d	; 61
    f242:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4847
  char rtds_topic[5];
  uint8_t idx;
  idx = remote_tds_find_free();
    f244:	0e 94 00 79 	call	0xf200	; 0xf200 <remote_tds_find_free()>
    f248:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4848
  if (idx != 255)
    f24a:	8f 3f       	cpi	r24, 0xFF	; 255
    f24c:	21 f1       	breq	.+72     	; 0xf296 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x62>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4850
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    f24e:	6e e9       	ldi	r22, 0x9E	; 158
    f250:	7e e5       	ldi	r23, 0x5E	; 94
    f252:	ce 01       	movw	r24, r28
    f254:	01 96       	adiw	r24, 0x01	; 1
    f256:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4851
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, args3);
    f25a:	70 e0       	ldi	r23, 0x00	; 0
    f25c:	60 e0       	ldi	r22, 0x00	; 0
    f25e:	87 e6       	ldi	r24, 0x67	; 103
    f260:	90 e0       	ldi	r25, 0x00	; 0
    f262:	0e 94 bc af 	call	0x15f78	; 0x15f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    f266:	be 01       	movw	r22, r28
    f268:	6f 5f       	subi	r22, 0xFF	; 255
    f26a:	7f 4f       	sbci	r23, 0xFF	; 255
    f26c:	8a ed       	ldi	r24, 0xDA	; 218
    f26e:	99 e0       	ldi	r25, 0x09	; 9
    f270:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1678
  dialog_set_string_max_length = max_length;
    f274:	82 e1       	ldi	r24, 0x12	; 18
    f276:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1679
  dialog_set_string_args = idx;
    f27a:	10 93 d8 09 	sts	0x09D8, r17	; 0x8009d8 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1680
  dialog_save_string_function = save_function;
    f27e:	8d ee       	ldi	r24, 0xED	; 237
    f280:	98 e5       	ldi	r25, 0x58	; 88
    f282:	90 93 d7 09 	sts	0x09D7, r25	; 0x8009d7 <dialog_save_string_function+0x1>
    f286:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1681
  dialog_save_valid_function = valid_function;
    f28a:	8c ef       	ldi	r24, 0xFC	; 252
    f28c:	9b e3       	ldi	r25, 0x3B	; 59
    f28e:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <dialog_save_valid_function+0x1>
    f292:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <dialog_save_valid_function>
_Z21click_rtds_add_sensorjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4854
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, args3);
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx, &menu_rtds_create_name, &valid_true);
  }
}
    f296:	0f 90       	pop	r0
    f298:	0f 90       	pop	r0
    f29a:	0f 90       	pop	r0
    f29c:	0f 90       	pop	r0
    f29e:	0f 90       	pop	r0
    f2a0:	df 91       	pop	r29
    f2a2:	cf 91       	pop	r28
    f2a4:	1f 91       	pop	r17
    f2a6:	08 95       	ret

0000f2a8 <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
    f2a8:	2f 92       	push	r2
    f2aa:	3f 92       	push	r3
    f2ac:	4f 92       	push	r4
    f2ae:	5f 92       	push	r5
    f2b0:	6f 92       	push	r6
    f2b2:	7f 92       	push	r7
    f2b4:	8f 92       	push	r8
    f2b6:	9f 92       	push	r9
    f2b8:	af 92       	push	r10
    f2ba:	bf 92       	push	r11
    f2bc:	cf 92       	push	r12
    f2be:	df 92       	push	r13
    f2c0:	ef 92       	push	r14
    f2c2:	ff 92       	push	r15
    f2c4:	0f 93       	push	r16
    f2c6:	1f 93       	push	r17
    f2c8:	cf 93       	push	r28
    f2ca:	df 93       	push	r29
    f2cc:	cd b7       	in	r28, 0x3d	; 61
    f2ce:	de b7       	in	r29, 0x3e	; 62
    f2d0:	c6 54       	subi	r28, 0x46	; 70
    f2d2:	d1 40       	sbci	r29, 0x01	; 1
    f2d4:	0f b6       	in	r0, 0x3f	; 63
    f2d6:	f8 94       	cli
    f2d8:	de bf       	out	0x3e, r29	; 62
    f2da:	0f be       	out	0x3f, r0	; 63
    f2dc:	cd bf       	out	0x3d, r28	; 61
    f2de:	4c 01       	movw	r8, r24
    f2e0:	8b 01       	movw	r16, r22
    f2e2:	7a 01       	movw	r14, r20
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    f2e4:	1b 82       	std	Y+3, r1	; 0x03
    f2e6:	85 ef       	ldi	r24, 0xF5	; 245
    f2e8:	93 e0       	ldi	r25, 0x03	; 3
    f2ea:	9d 83       	std	Y+5, r25	; 0x05
    f2ec:	8c 83       	std	Y+4, r24	; 0x04
    f2ee:	89 e3       	ldi	r24, 0x39	; 57
    f2f0:	95 e0       	ldi	r25, 0x05	; 5
    f2f2:	9f 83       	std	Y+7, r25	; 0x07
    f2f4:	8e 83       	std	Y+6, r24	; 0x06
    f2f6:	18 86       	std	Y+8, r1	; 0x08
    f2f8:	19 86       	std	Y+9, r1	; 0x09
    f2fa:	1a 86       	std	Y+10, r1	; 0x0a
    f2fc:	1b 86       	std	Y+11, r1	; 0x0b
    f2fe:	80 e6       	ldi	r24, 0x60	; 96
    f300:	9a ee       	ldi	r25, 0xEA	; 234
    f302:	a0 e0       	ldi	r26, 0x00	; 0
    f304:	b0 e0       	ldi	r27, 0x00	; 0
    f306:	8c 87       	std	Y+12, r24	; 0x0c
    f308:	9d 87       	std	Y+13, r25	; 0x0d
    f30a:	ae 87       	std	Y+14, r26	; 0x0e
    f30c:	bf 87       	std	Y+15, r27	; 0x0f
    f30e:	18 8a       	std	Y+16, r1	; 0x10
    f310:	19 8a       	std	Y+17, r1	; 0x11
    f312:	1a 8a       	std	Y+18, r1	; 0x12
    f314:	1b 8a       	std	Y+19, r1	; 0x13
    f316:	1c 8a       	std	Y+20, r1	; 0x14
    f318:	1d 8a       	std	Y+21, r1	; 0x15
    f31a:	1e 8a       	std	Y+22, r1	; 0x16
    f31c:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    f31e:	87 e1       	ldi	r24, 0x17	; 23
    f320:	92 e1       	ldi	r25, 0x12	; 18
    f322:	9a 83       	std	Y+2, r25	; 0x02
    f324:	89 83       	std	Y+1, r24	; 0x01
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2303
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;

  NTPClient timeClient(udpClient);
  DateTime ted;
    f326:	ce 01       	movw	r24, r28
    f328:	84 5c       	subi	r24, 0xC4	; 196
    f32a:	9e 4f       	sbci	r25, 0xFE	; 254
    f32c:	0e 94 86 b2 	call	0x1650c	; 0x1650c <DateTime::DateTime(unsigned long) [clone .constprop.145]>
    f330:	ef ee       	ldi	r30, 0xEF	; 239
    f332:	f8 e0       	ldi	r31, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2304
  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    f334:	80 e0       	ldi	r24, 0x00	; 0
    f336:	11 92       	st	Z+, r1
    f338:	8f 5f       	subi	r24, 0xFF	; 255
    f33a:	80 38       	cpi	r24, 0x80	; 128
    f33c:	e1 f7       	brne	.-8      	; 0xf336 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2306
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    f33e:	80 91 5a 0b 	lds	r24, 0x0B5A	; 0x800b5a <mqtt_receive_message>
    f342:	90 91 5b 0b 	lds	r25, 0x0B5B	; 0x800b5b <mqtt_receive_message+0x1>
    f346:	01 96       	adiw	r24, 0x01	; 1
    f348:	90 93 5b 0b 	sts	0x0B5B, r25	; 0x800b5b <mqtt_receive_message+0x1>
    f34c:	80 93 5a 0b 	sts	0x0B5A, r24	; 0x800b5a <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
  strncpy(my_payload, (char*) payload, length);
    f350:	a7 01       	movw	r20, r14
    f352:	b8 01       	movw	r22, r16
    f354:	8f ee       	ldi	r24, 0xEF	; 239
    f356:	98 e0       	ldi	r25, 0x08	; 8
    f358:	0e 94 b5 e1 	call	0x1c36a	; 0x1c36a <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2310
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    f35c:	5e 01       	movw	r10, r28
    f35e:	28 ec       	ldi	r18, 0xC8	; 200
    f360:	a2 0e       	add	r10, r18
    f362:	b1 1c       	adc	r11, r1
    f364:	62 e0       	ldi	r22, 0x02	; 2
    f366:	7c e5       	ldi	r23, 0x5C	; 92
    f368:	c5 01       	movw	r24, r10
    f36a:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
  if (strcmp(str1, topic) == 0)
    f36e:	b4 01       	movw	r22, r8
    f370:	c5 01       	movw	r24, r10
    f372:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    f376:	89 2b       	or	r24, r25
    f378:	49 f4       	brne	.+18     	; 0xf38c <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2313
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    f37a:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    f37e:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    f382:	01 96       	adiw	r24, 0x01	; 1
    f384:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    f388:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
  }
  strcpy_P(str1, thermctl_subscribe);
    f38c:	69 e1       	ldi	r22, 0x19	; 25
    f38e:	7c e5       	ldi	r23, 0x5C	; 92
    f390:	c5 01       	movw	r24, r10
    f392:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2317
  if (strcmp(str1, topic) == 0)
    f396:	b4 01       	movw	r22, r8
    f398:	c5 01       	movw	r24, r10
    f39a:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    f39e:	89 2b       	or	r24, r25
    f3a0:	49 f4       	brne	.+18     	; 0xf3b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2319
  {
    mqtt_process_message++;
    f3a2:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    f3a6:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    f3aa:	01 96       	adiw	r24, 0x01	; 1
    f3ac:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    f3b0:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2325
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    f3b4:	60 e4       	ldi	r22, 0x40	; 64
    f3b6:	7c e5       	ldi	r23, 0x5C	; 92
    f3b8:	c5 01       	movw	r24, r10
    f3ba:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
  strcat_P(str1, global_time_set);
    f3be:	64 ee       	ldi	r22, 0xE4	; 228
    f3c0:	7b e5       	ldi	r23, 0x5B	; 91
    f3c2:	c5 01       	movw	r24, r10
    f3c4:	0e 94 e8 d4 	call	0x1a9d0	; 0x1a9d0 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2327
  if (strcmp(str1, topic) == 0)
    f3c8:	b4 01       	movw	r22, r8
    f3ca:	c5 01       	movw	r24, r10
    f3cc:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    f3d0:	89 2b       	or	r24, r25
    f3d2:	09 f0       	breq	.+2      	; 0xf3d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e>
    f3d4:	b5 c0       	rjmp	.+362    	; 0xf540 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2329
  {
    mqtt_process_message++;
    f3d6:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    f3da:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    f3de:	01 96       	adiw	r24, 0x01	; 1
    f3e0:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    f3e4:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    f3e8:	20 91 52 0e 	lds	r18, 0x0E52	; 0x800e52 <doc>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC2ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    f3ec:	83 e5       	ldi	r24, 0x53	; 83
    f3ee:	9e e0       	ldi	r25, 0x0E	; 14
    f3f0:	2a 96       	adiw	r28, 0x0a	; 10
    f3f2:	9f af       	std	Y+63, r25	; 0x3f
    f3f4:	8e af       	std	Y+62, r24	; 0x3e
    f3f6:	2a 97       	sbiw	r28, 0x0a	; 10
    f3f8:	8f ee       	ldi	r24, 0xEF	; 239
    f3fa:	98 e0       	ldi	r25, 0x08	; 8
    f3fc:	2c 96       	adiw	r28, 0x0c	; 12
    f3fe:	9f af       	std	Y+63, r25	; 0x3f
    f400:	8e af       	std	Y+62, r24	; 0x3e
    f402:	2c 97       	sbiw	r28, 0x0c	; 12
    f404:	2e 96       	adiw	r28, 0x0e	; 14
    f406:	9f af       	std	Y+63, r25	; 0x3f
    f408:	8e af       	std	Y+62, r24	; 0x3e
    f40a:	2e 97       	sbiw	r28, 0x0e	; 14
    f40c:	2f 96       	adiw	r28, 0x0f	; 15
    f40e:	2f af       	std	Y+63, r18	; 0x3f
    f410:	2f 97       	sbiw	r28, 0x0f	; 15
    f412:	61 96       	adiw	r28, 0x11	; 17
    f414:	1f ae       	std	Y+63, r1	; 0x3f
    f416:	61 97       	sbiw	r28, 0x11	; 17
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    f418:	10 92 5a 0e 	sts	0x0E5A, r1	; 0x800e5a <doc+0x8>
    f41c:	10 92 59 0e 	sts	0x0E59, r1	; 0x800e59 <doc+0x7>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    f420:	8b e5       	ldi	r24, 0x5B	; 91
    f422:	9f e0       	ldi	r25, 0x0F	; 15
    f424:	89 2b       	or	r24, r25
    f426:	09 f4       	brne	.+2      	; 0xf42a <mqtt_callback(char*, unsigned char*, unsigned int)+0x182>
    f428:	51 c1       	rjmp	.+674    	; 0xf6cc <mqtt_callback(char*, unsigned char*, unsigned int)+0x424>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:66
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    f42a:	10 92 5c 0f 	sts	0x0F5C, r1	; 0x800f5c <doc+0x10a>
    f42e:	10 92 5b 0f 	sts	0x0F5B, r1	; 0x800f5b <doc+0x109>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:96
  _data->setNull();
  return *this;
    f432:	83 e5       	ldi	r24, 0x53	; 83
    f434:	9e e0       	ldi	r25, 0x0E	; 14
    f436:	ac 01       	movw	r20, r24
    f438:	6b e5       	ldi	r22, 0x5B	; 91
    f43a:	7f e0       	ldi	r23, 0x0F	; 15
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    f43c:	ce 01       	movw	r24, r28
    f43e:	88 5b       	subi	r24, 0xB8	; 184
    f440:	9f 4f       	sbci	r25, 0xFF	; 255
    f442:	0e 94 8e 40 	call	0x811c	; 0x811c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
inline typename Internals::enable_if<
    Internals::is_same<typename Internals::remove_const<T>::type,
                       JsonObject>::value,
    T>::type
JsonVariant::as() const {
  return _data ? JsonObject(_memoryPool, _data->asObject()) : JsonObject();
    f446:	8b e5       	ldi	r24, 0x5B	; 91
    f448:	9f e0       	ldi	r25, 0x0F	; 15
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
  friend class JsonVariant;

 public:
  typedef JsonObjectIterator iterator;

  FORCE_INLINE JsonObject() : _memoryPool(0), _data(0) {}
    f44a:	0b e5       	ldi	r16, 0x5B	; 91
    f44c:	1f e0       	ldi	r17, 0x0F	; 15
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
    f44e:	89 2b       	or	r24, r25
    f450:	51 f0       	breq	.+20     	; 0xf466 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    f452:	80 91 5b 0f 	lds	r24, 0x0F5B	; 0x800f5b <doc+0x109>
    f456:	90 91 5c 0f 	lds	r25, 0x0F5C	; 0x800f5c <doc+0x10a>
_Z13mqtt_callbackPcPhj():
    f45a:	0d e5       	ldi	r16, 0x5D	; 93
    f45c:	1f e0       	ldi	r17, 0x0F	; 15
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
    f45e:	09 97       	sbiw	r24, 0x09	; 9
    f460:	11 f0       	breq	.+4      	; 0xf466 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
    f462:	10 e0       	ldi	r17, 0x00	; 0
    f464:	00 e0       	ldi	r16, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    f466:	67 e3       	ldi	r22, 0x37	; 55
    f468:	74 e0       	ldi	r23, 0x04	; 4
    f46a:	c8 01       	movw	r24, r16
    f46c:	0e 94 65 40 	call	0x80ca	; 0x80ca <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]>
    f470:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2332
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    f472:	89 2b       	or	r24, r25
    f474:	09 f4       	brne	.+2      	; 0xf478 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d0>
    f476:	64 c0       	rjmp	.+200    	; 0xf540 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    f478:	6c e3       	ldi	r22, 0x3C	; 60
    f47a:	74 e0       	ldi	r23, 0x04	; 4
    f47c:	c8 01       	movw	r24, r16
    f47e:	0e 94 65 40 	call	0x80ca	; 0x80ca <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]>
    f482:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2332
    f484:	89 2b       	or	r24, r25
    f486:	09 f4       	brne	.+2      	; 0xf48a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1e2>
    f488:	5b c0       	rjmp	.+182    	; 0xf540 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    f48a:	62 e4       	ldi	r22, 0x42	; 66
    f48c:	74 e0       	ldi	r23, 0x04	; 4
    f48e:	c8 01       	movw	r24, r16
    f490:	0e 94 65 40 	call	0x80ca	; 0x80ca <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]>
    f494:	3c 01       	movw	r6, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2332
    f496:	89 2b       	or	r24, r25
    f498:	09 f4       	brne	.+2      	; 0xf49c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1f4>
    f49a:	52 c0       	rjmp	.+164    	; 0xf540 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    f49c:	67 e4       	ldi	r22, 0x47	; 71
    f49e:	74 e0       	ldi	r23, 0x04	; 4
    f4a0:	c8 01       	movw	r24, r16
    f4a2:	0e 94 65 40 	call	0x80ca	; 0x80ca <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]>
    f4a6:	6c 01       	movw	r12, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2332
    f4a8:	89 2b       	or	r24, r25
    f4aa:	09 f4       	brne	.+2      	; 0xf4ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x206>
    f4ac:	49 c0       	rjmp	.+146    	; 0xf540 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    f4ae:	6e e4       	ldi	r22, 0x4E	; 78
    f4b0:	74 e0       	ldi	r23, 0x04	; 4
    f4b2:	c8 01       	movw	r24, r16
    f4b4:	0e 94 65 40 	call	0x80ca	; 0x80ca <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2332
    f4b8:	00 97       	sbiw	r24, 0x00	; 0
    f4ba:	09 f4       	brne	.+2      	; 0xf4be <mqtt_callback(char*, unsigned char*, unsigned int)+0x216>
    f4bc:	41 c0       	rjmp	.+130    	; 0xf540 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    f4be:	0e 94 22 c3 	call	0x18644	; 0x18644 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    f4c2:	38 2e       	mov	r3, r24
    f4c4:	c6 01       	movw	r24, r12
    f4c6:	0e 94 22 c3 	call	0x18644	; 0x18644 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    f4ca:	d8 2e       	mov	r13, r24
    f4cc:	c3 01       	movw	r24, r6
    f4ce:	0e 94 22 c3 	call	0x18644	; 0x18644 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    f4d2:	c8 2e       	mov	r12, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    f4d4:	65 e5       	ldi	r22, 0x55	; 85
    f4d6:	74 e0       	ldi	r23, 0x04	; 4
    f4d8:	c8 01       	movw	r24, r16
    f4da:	0e 94 65 40 	call	0x80ca	; 0x80ca <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.44]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    f4de:	10 e0       	ldi	r17, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
    f4e0:	00 97       	sbiw	r24, 0x00	; 0
    f4e2:	19 f0       	breq	.+6      	; 0xf4ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x242>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    f4e4:	0e 94 22 c3 	call	0x18644	; 0x18644 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    f4e8:	18 2f       	mov	r17, r24
    f4ea:	c2 01       	movw	r24, r4
    f4ec:	0e 94 22 c3 	call	0x18644	; 0x18644 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    f4f0:	08 2f       	mov	r16, r24
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    f4f2:	d7 01       	movw	r26, r14
    f4f4:	8d 91       	ld	r24, X+
    f4f6:	9c 91       	ld	r25, X
    f4f8:	11 97       	sbiw	r26, 0x01	; 1
    f4fa:	87 30       	cpi	r24, 0x07	; 7
    f4fc:	91 05       	cpc	r25, r1
    f4fe:	08 f0       	brcs	.+2      	; 0xf502 <mqtt_callback(char*, unsigned char*, unsigned int)+0x25a>
    f500:	e8 c0       	rjmp	.+464    	; 0xf6d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x42a>
    f502:	85 30       	cpi	r24, 0x05	; 5
    f504:	91 05       	cpc	r25, r1
    f506:	08 f0       	brcs	.+2      	; 0xf50a <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
    f508:	f2 c0       	rjmp	.+484    	; 0xf6ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x446>
    f50a:	03 97       	sbiw	r24, 0x03	; 3
    f50c:	08 f0       	brcs	.+2      	; 0xf510 <mqtt_callback(char*, unsigned char*, unsigned int)+0x268>
    f50e:	01 c1       	rjmp	.+514    	; 0xf712 <mqtt_callback(char*, unsigned char*, unsigned int)+0x46a>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    f510:	60 e0       	ldi	r22, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    f512:	29 96       	adiw	r28, 0x09	; 9
    f514:	6f af       	std	Y+63, r22	; 0x3f
    f516:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    f518:	2a 96       	adiw	r28, 0x0a	; 10
    f51a:	0f af       	std	Y+63, r16	; 0x3f
    f51c:	2a 97       	sbiw	r28, 0x0a	; 10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    f51e:	2b 96       	adiw	r28, 0x0b	; 11
    f520:	1f af       	std	Y+63, r17	; 0x3f
    f522:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    f524:	2c 96       	adiw	r28, 0x0c	; 12
    f526:	cf ae       	std	Y+63, r12	; 0x3f
    f528:	2c 97       	sbiw	r28, 0x0c	; 12
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    f52a:	2d 96       	adiw	r28, 0x0d	; 13
    f52c:	df ae       	std	Y+63, r13	; 0x3f
    f52e:	2d 97       	sbiw	r28, 0x0d	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    f530:	2e 96       	adiw	r28, 0x0e	; 14
    f532:	3f ae       	std	Y+63, r3	; 0x3f
    f534:	2e 97       	sbiw	r28, 0x0e	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    f536:	ce 01       	movw	r24, r28
    f538:	88 5b       	subi	r24, 0xB8	; 184
    f53a:	9f 4f       	sbci	r25, 0xFF	; 255
    f53c:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2336
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    f540:	60 e4       	ldi	r22, 0x40	; 64
    f542:	7c e5       	ldi	r23, 0x5C	; 92
    f544:	c5 01       	movw	r24, r10
    f546:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337
  strcat_P(str1, global_time_ntp);
    f54a:	64 ed       	ldi	r22, 0xD4	; 212
    f54c:	7b e5       	ldi	r23, 0x5B	; 91
    f54e:	c5 01       	movw	r24, r10
    f550:	0e 94 e8 d4 	call	0x1a9d0	; 0x1a9d0 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2338
  if (strcmp(str1, topic) == 0)
    f554:	b4 01       	movw	r22, r8
    f556:	c5 01       	movw	r24, r10
    f558:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    f55c:	89 2b       	or	r24, r25
    f55e:	e9 f4       	brne	.+58     	; 0xf59a <mqtt_callback(char*, unsigned char*, unsigned int)+0x2f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2340
  {
    mqtt_process_message++;
    f560:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    f564:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    f568:	01 96       	adiw	r24, 0x01	; 1
    f56a:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    f56e:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3425
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    f572:	81 e0       	ldi	r24, 0x01	; 1
    f574:	90 e0       	ldi	r25, 0x00	; 0
    f576:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2341
  strcpy_P(str1, thermctl_header_in);
  strcat_P(str1, global_time_ntp);
  if (strcmp(str1, topic) == 0)
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
    f57a:	ae 01       	movw	r20, r28
    f57c:	44 5c       	subi	r20, 0xC4	; 196
    f57e:	5e 4f       	sbci	r21, 0xFE	; 254
    f580:	68 2f       	mov	r22, r24
    f582:	ce 01       	movw	r24, r28
    f584:	01 96       	adiw	r24, 0x01	; 1
    f586:	0e 94 0e c1 	call	0x1821c	; 0x1821c <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.146]>
    f58a:	81 30       	cpi	r24, 0x01	; 1
    f58c:	09 f0       	breq	.+2      	; 0xf590 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2e8>
    f58e:	ee c0       	rjmp	.+476    	; 0xf76c <mqtt_callback(char*, unsigned char*, unsigned int)+0x4c4>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3368
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f590:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <selftest_data>
    f594:	8d 7f       	andi	r24, 0xFD	; 253
    f596:	80 93 65 0c 	sts	0x0C65, r24	; 0x800c65 <selftest_data>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    f59a:	60 e4       	ldi	r22, 0x40	; 64
    f59c:	7c e5       	ldi	r23, 0x5C	; 92
    f59e:	c5 01       	movw	r24, r10
    f5a0:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2348
  strcat_P(str1, global_time_offset);
    f5a4:	6d eb       	ldi	r22, 0xBD	; 189
    f5a6:	7b e5       	ldi	r23, 0x5B	; 91
    f5a8:	c5 01       	movw	r24, r10
    f5aa:	0e 94 e8 d4 	call	0x1a9d0	; 0x1a9d0 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2349
  if (strcmp(str1, topic) == 0)
    f5ae:	b4 01       	movw	r22, r8
    f5b0:	c5 01       	movw	r24, r10
    f5b2:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    f5b6:	89 2b       	or	r24, r25
    f5b8:	91 f4       	brne	.+36     	; 0xf5de <mqtt_callback(char*, unsigned char*, unsigned int)+0x336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2351
  {
    mqtt_process_message++;
    f5ba:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    f5be:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    f5c2:	01 96       	adiw	r24, 0x01	; 1
    f5c4:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    f5c8:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2352
    time_set_offset(atoi(my_payload));
    f5cc:	8f ee       	ldi	r24, 0xEF	; 239
    f5ce:	98 e0       	ldi	r25, 0x08	; 8
    f5d0:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3430
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(int8_t offset)
{
  EEPROM.write(time_offset, offset);
    f5d4:	68 2f       	mov	r22, r24
    f5d6:	81 e0       	ldi	r24, 0x01	; 1
    f5d8:	90 e0       	ldi	r25, 0x00	; 0
    f5da:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2356
    mqtt_process_message++;
    time_set_offset(atoi(my_payload));
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    f5de:	60 e4       	ldi	r22, 0x40	; 64
    f5e0:	7c e5       	ldi	r23, 0x5C	; 92
    f5e2:	c5 01       	movw	r24, r10
    f5e4:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2357
  strcat(str1, device.nazev);
    f5e8:	6a ef       	ldi	r22, 0xFA	; 250
    f5ea:	7d e0       	ldi	r23, 0x0D	; 13
    f5ec:	c5 01       	movw	r24, r10
    f5ee:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2358
  strcat(str1, "/tds/associate");
    f5f2:	69 e5       	ldi	r22, 0x59	; 89
    f5f4:	74 e0       	ldi	r23, 0x04	; 4
    f5f6:	c5 01       	movw	r24, r10
    f5f8:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2359
  if (strcmp(str1, topic) == 0)
    f5fc:	b4 01       	movw	r22, r8
    f5fe:	c5 01       	movw	r24, r10
    f600:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2296
  char tmp1[32];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    f604:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2359
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    f606:	89 2b       	or	r24, r25
    f608:	b1 f4       	brne	.+44     	; 0xf636 <mqtt_callback(char*, unsigned char*, unsigned int)+0x38e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2361
  {
    mqtt_process_message++;
    f60a:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    f60e:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    f612:	01 96       	adiw	r24, 0x01	; 1
    f614:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    f618:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2362
    id = atoi(my_payload);
    f61c:	8f ee       	ldi	r24, 0xEF	; 239
    f61e:	98 e0       	ldi	r25, 0x08	; 8
    f620:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
    f624:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2363
    if (tds_associate(id) == 255)
    f626:	0e 94 2b 6c 	call	0xd856	; 0xd856 <tds_associate(unsigned char)>
    f62a:	8f 3f       	cpi	r24, 0xFF	; 255
    f62c:	21 f4       	brne	.+8      	; 0xf636 <mqtt_callback(char*, unsigned char*, unsigned int)+0x38e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2364
      log_error(&mqtt_client, "tds/associate full or bad id");
    f62e:	88 e6       	ldi	r24, 0x68	; 104
    f630:	94 e0       	ldi	r25, 0x04	; 4
    f632:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <log_error(PubSubClient*, char*) [clone .constprop.117]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2370
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    f636:	60 e4       	ldi	r22, 0x40	; 64
    f638:	7c e5       	ldi	r23, 0x5C	; 92
    f63a:	c5 01       	movw	r24, r10
    f63c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2371
  strcat(str1, device.nazev);
    f640:	6a ef       	ldi	r22, 0xFA	; 250
    f642:	7d e0       	ldi	r23, 0x0D	; 13
    f644:	c5 01       	movw	r24, r10
    f646:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2372
  strcat(str1, "/tds/set/");
    f64a:	65 e8       	ldi	r22, 0x85	; 133
    f64c:	74 e0       	ldi	r23, 0x04	; 4
    f64e:	c5 01       	movw	r24, r10
    f650:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2373
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f654:	f5 01       	movw	r30, r10
    f656:	01 90       	ld	r0, Z+
    f658:	00 20       	and	r0, r0
    f65a:	e9 f7       	brne	.-6      	; 0xf656 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3ae>
    f65c:	31 97       	sbiw	r30, 0x01	; 1
    f65e:	af 01       	movw	r20, r30
    f660:	4a 19       	sub	r20, r10
    f662:	5b 09       	sbc	r21, r11
    f664:	b4 01       	movw	r22, r8
    f666:	c5 01       	movw	r24, r10
    f668:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
    f66c:	89 2b       	or	r24, r25
    f66e:	09 f0       	breq	.+2      	; 0xf672 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3ca>
    f670:	01 c1       	rjmp	.+514    	; 0xf874 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2375
  {
    mqtt_process_message++;
    f672:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    f676:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    f67a:	01 96       	adiw	r24, 0x01	; 1
    f67c:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    f680:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2377
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f684:	f5 01       	movw	r30, r10
    f686:	01 90       	ld	r0, Z+
    f688:	00 20       	and	r0, r0
    f68a:	e9 f7       	brne	.-6      	; 0xf686 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3de>
    f68c:	31 97       	sbiw	r30, 0x01	; 1
    f68e:	ea 19       	sub	r30, r10
    f690:	fb 09       	sbc	r31, r11
    f692:	9e 2f       	mov	r25, r30
    f694:	4e 2f       	mov	r20, r30
    f696:	84 2f       	mov	r24, r20
    f698:	89 1b       	sub	r24, r25
    f69a:	24 2f       	mov	r18, r20
    f69c:	30 e0       	ldi	r19, 0x00	; 0
    f69e:	d4 01       	movw	r26, r8
    f6a0:	0d 90       	ld	r0, X+
    f6a2:	00 20       	and	r0, r0
    f6a4:	e9 f7       	brne	.-6      	; 0xf6a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f8>
    f6a6:	11 97       	sbiw	r26, 0x01	; 1
    f6a8:	a8 19       	sub	r26, r8
    f6aa:	b9 09       	sbc	r27, r9
    f6ac:	2a 17       	cp	r18, r26
    f6ae:	3b 07       	cpc	r19, r27
    f6b0:	08 f0       	brcs	.+2      	; 0xf6b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x40c>
    f6b2:	60 c0       	rjmp	.+192    	; 0xf774 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2379
    {
      str1[cnt] = topic[f];
    f6b4:	d5 01       	movw	r26, r10
    f6b6:	a8 0f       	add	r26, r24
    f6b8:	b1 1d       	adc	r27, r1
    f6ba:	28 0d       	add	r18, r8
    f6bc:	39 1d       	adc	r19, r9
    f6be:	f9 01       	movw	r30, r18
    f6c0:	80 81       	ld	r24, Z
    f6c2:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2380
      str1[cnt + 1] = 0;
    f6c4:	11 96       	adiw	r26, 0x01	; 1
    f6c6:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2377
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f6c8:	4f 5f       	subi	r20, 0xFF	; 255
    f6ca:	e5 cf       	rjmp	.-54     	; 0xf696 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3ee>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    f6cc:	8b e5       	ldi	r24, 0x5B	; 91
    f6ce:	9f e0       	ldi	r25, 0x0F	; 15
    f6d0:	b2 ce       	rjmp	.-668    	; 0xf436 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18e>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    f6d2:	87 30       	cpi	r24, 0x07	; 7
    f6d4:	91 05       	cpc	r25, r1
    f6d6:	b1 f0       	breq	.+44     	; 0xf704 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45c>
    f6d8:	0a 97       	sbiw	r24, 0x0a	; 10
    f6da:	09 f0       	breq	.+2      	; 0xf6de <mqtt_callback(char*, unsigned char*, unsigned int)+0x436>
    f6dc:	19 cf       	rjmp	.-462    	; 0xf510 <mqtt_callback(char*, unsigned char*, unsigned int)+0x268>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    f6de:	f7 01       	movw	r30, r14
    f6e0:	62 81       	ldd	r22, Z+2	; 0x02
    f6e2:	73 81       	ldd	r23, Z+3	; 0x03
    f6e4:	84 81       	ldd	r24, Z+4	; 0x04
    f6e6:	95 81       	ldd	r25, Z+5	; 0x05
    f6e8:	0e 94 4a e0 	call	0x1c094	; 0x1c094 <__fixunssfsi>
    f6ec:	03 c0       	rjmp	.+6      	; 0xf6f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x44c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    f6ee:	f7 01       	movw	r30, r14
    f6f0:	62 81       	ldd	r22, Z+2	; 0x02
    f6f2:	73 81       	ldd	r23, Z+3	; 0x03
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    f6f4:	60 3d       	cpi	r22, 0xD0	; 208
    f6f6:	f7 e0       	ldi	r31, 0x07	; 7
    f6f8:	7f 07       	cpc	r23, r31
    f6fa:	08 f4       	brcc	.+2      	; 0xf6fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x456>
    f6fc:	0a cf       	rjmp	.-492    	; 0xf512 <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    f6fe:	60 5d       	subi	r22, 0xD0	; 208
    f700:	77 40       	sbci	r23, 0x07	; 7
    f702:	07 cf       	rjmp	.-498    	; 0xf512 <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    f704:	12 96       	adiw	r26, 0x02	; 2
    f706:	6d 91       	ld	r22, X+
    f708:	7c 91       	ld	r23, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    f70a:	71 95       	neg	r23
    f70c:	61 95       	neg	r22
    f70e:	71 09       	sbc	r23, r1
    f710:	f1 cf       	rjmp	.-30     	; 0xf6f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x44c>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    f712:	12 96       	adiw	r26, 0x02	; 2
    f714:	ed 91       	ld	r30, X+
    f716:	fc 91       	ld	r31, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    f718:	30 97       	sbiw	r30, 0x00	; 0
    f71a:	09 f4       	brne	.+2      	; 0xf71e <mqtt_callback(char*, unsigned char*, unsigned int)+0x476>
    f71c:	f9 ce       	rjmp	.-526    	; 0xf510 <mqtt_callback(char*, unsigned char*, unsigned int)+0x268>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    f71e:	80 81       	ld	r24, Z
_Z13mqtt_callbackPcPhj():
    f720:	61 e0       	ldi	r22, 0x01	; 1
    f722:	70 e0       	ldi	r23, 0x00	; 0
parseInteger():
    f724:	84 37       	cpi	r24, 0x74	; 116
    f726:	09 f4       	brne	.+2      	; 0xf72a <mqtt_callback(char*, unsigned char*, unsigned int)+0x482>
    f728:	f4 ce       	rjmp	.-536    	; 0xf512 <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    f72a:	8b 32       	cpi	r24, 0x2B	; 43
    f72c:	c9 f0       	breq	.+50     	; 0xf760 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4b8>
    f72e:	8d 32       	cpi	r24, 0x2D	; 45
    f730:	c1 f4       	brne	.+48     	; 0xf762 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    f732:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    f734:	81 e0       	ldi	r24, 0x01	; 1
parseInteger():
    f736:	70 e0       	ldi	r23, 0x00	; 0
    f738:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    f73a:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    f73c:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    f73e:	20 ed       	ldi	r18, 0xD0	; 208
    f740:	29 0f       	add	r18, r25
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    f742:	2a 30       	cpi	r18, 0x0A	; 10
    f744:	80 f4       	brcc	.+32     	; 0xf766 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4be>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    f746:	46 9f       	mul	r20, r22
    f748:	90 01       	movw	r18, r0
    f74a:	47 9f       	mul	r20, r23
    f74c:	30 0d       	add	r19, r0
    f74e:	11 24       	eor	r1, r1
    f750:	b9 01       	movw	r22, r18
    f752:	60 53       	subi	r22, 0x30	; 48
    f754:	71 09       	sbc	r23, r1
    f756:	69 0f       	add	r22, r25
    f758:	71 1d       	adc	r23, r1
    f75a:	97 fd       	sbrc	r25, 7
    f75c:	7a 95       	dec	r23
    f75e:	ee cf       	rjmp	.-36     	; 0xf73c <mqtt_callback(char*, unsigned char*, unsigned int)+0x494>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    f760:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    f762:	80 e0       	ldi	r24, 0x00	; 0
    f764:	e8 cf       	rjmp	.-48     	; 0xf736 <mqtt_callback(char*, unsigned char*, unsigned int)+0x48e>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    f766:	81 11       	cpse	r24, r1
    f768:	d0 cf       	rjmp	.-96     	; 0xf70a <mqtt_callback(char*, unsigned char*, unsigned int)+0x462>
    f76a:	c4 cf       	rjmp	.-120    	; 0xf6f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x44c>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2344
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
    f76c:	81 e0       	ldi	r24, 0x01	; 1
    f76e:	0e 94 0a 72 	call	0xe414	; 0xe414 <selftest_set_0(unsigned char)>
    f772:	13 cf       	rjmp	.-474    	; 0xf59a <mqtt_callback(char*, unsigned char*, unsigned int)+0x2f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2384
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f774:	6a e8       	ldi	r22, 0x8A	; 138
    f776:	75 e0       	ldi	r23, 0x05	; 5
    f778:	c5 01       	movw	r24, r10
    f77a:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
    f77e:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2383
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f780:	61 2c       	mov	r6, r1
tds_set_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:83
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
  strcpy(tds.name, name);
    f782:	e8 e4       	ldi	r30, 0x48	; 72
    f784:	ce 2e       	mov	r12, r30
    f786:	d1 2c       	mov	r13, r1
    f788:	cc 0e       	add	r12, r28
    f78a:	dd 1e       	adc	r13, r29
    f78c:	fc e0       	ldi	r31, 0x0C	; 12
    f78e:	cf 0e       	add	r12, r31
    f790:	d1 1c       	adc	r13, r1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2385
    pch = strtok (str1, "/");
    while (pch != NULL)
    f792:	01 15       	cp	r16, r1
    f794:	11 05       	cpc	r17, r1
    f796:	09 f4       	brne	.+2      	; 0xf79a <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f2>
    f798:	6d c0       	rjmp	.+218    	; 0xf874 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2387
    {
      if (cnt == 0) id = atoi(pch);
    f79a:	61 10       	cpse	r6, r1
    f79c:	0d c0       	rjmp	.+26     	; 0xf7b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x510>
    f79e:	c8 01       	movw	r24, r16
    f7a0:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
    f7a4:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2388
      if (id < HW_ONEWIRE_MAXROMS)
    f7a6:	25 e0       	ldi	r18, 0x05	; 5
    f7a8:	28 17       	cp	r18, r24
    f7aa:	08 f0       	brcs	.+2      	; 0xf7ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x506>
    f7ac:	5a c0       	rjmp	.+180    	; 0xf862 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2396
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    f7ae:	86 ed       	ldi	r24, 0xD6	; 214
    f7b0:	94 e0       	ldi	r25, 0x04	; 4
    f7b2:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <log_error(PubSubClient*, char*) [clone .constprop.117]>
    f7b6:	55 c0       	rjmp	.+170    	; 0xf862 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2388
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    f7b8:	85 e0       	ldi	r24, 0x05	; 5
    f7ba:	87 15       	cp	r24, r7
    f7bc:	c0 f3       	brcs	.-16     	; 0xf7ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x506>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2390
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    f7be:	91 e0       	ldi	r25, 0x01	; 1
    f7c0:	69 12       	cpse	r6, r25
    f7c2:	4f c0       	rjmp	.+158    	; 0xf862 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
    f7c4:	6f e0       	ldi	r22, 0x0F	; 15
    f7c6:	74 e0       	ldi	r23, 0x04	; 4
    f7c8:	c8 01       	movw	r24, r16
    f7ca:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    f7ce:	89 2b       	or	r24, r25
    f7d0:	89 f4       	brne	.+34     	; 0xf7f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x54c>
tds_set_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    f7d2:	be 01       	movw	r22, r28
    f7d4:	68 5b       	subi	r22, 0xB8	; 184
    f7d6:	7f 4f       	sbci	r23, 0xFF	; 255
    f7d8:	87 2d       	mov	r24, r7
    f7da:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    f7de:	6f ee       	ldi	r22, 0xEF	; 239
    f7e0:	78 e0       	ldi	r23, 0x08	; 8
    f7e2:	c6 01       	movw	r24, r12
    f7e4:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    f7e8:	be 01       	movw	r22, r28
    f7ea:	68 5b       	subi	r22, 0xB8	; 184
    f7ec:	7f 4f       	sbci	r23, 0xFF	; 255
    f7ee:	87 2d       	mov	r24, r7
    f7f0:	0e 94 88 55 	call	0xab10	; 0xab10 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2391
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    f7f4:	6d e2       	ldi	r22, 0x2D	; 45
    f7f6:	78 e0       	ldi	r23, 0x08	; 8
    f7f8:	c8 01       	movw	r24, r16
    f7fa:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    f7fe:	89 2b       	or	r24, r25
    f800:	a9 f4       	brne	.+42     	; 0xf82c <mqtt_callback(char*, unsigned char*, unsigned int)+0x584>
    f802:	8f ee       	ldi	r24, 0xEF	; 239
    f804:	98 e0       	ldi	r25, 0x08	; 8
    f806:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
    f80a:	7c 01       	movw	r14, r24
tds_set_offset():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    f80c:	be 01       	movw	r22, r28
    f80e:	68 5b       	subi	r22, 0xB8	; 184
    f810:	7f 4f       	sbci	r23, 0xFF	; 255
    f812:	87 2d       	mov	r24, r7
    f814:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    f818:	64 96       	adiw	r28, 0x14	; 20
    f81a:	ff ae       	std	Y+63, r15	; 0x3f
    f81c:	ee ae       	std	Y+62, r14	; 0x3e
    f81e:	64 97       	sbiw	r28, 0x14	; 20
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    f820:	be 01       	movw	r22, r28
    f822:	68 5b       	subi	r22, 0xB8	; 184
    f824:	7f 4f       	sbci	r23, 0xFF	; 255
    f826:	87 2d       	mov	r24, r7
    f828:	0e 94 88 55 	call	0xab10	; 0xab10 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2392
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    f82c:	6a e8       	ldi	r22, 0x8A	; 138
    f82e:	76 e0       	ldi	r23, 0x06	; 6
    f830:	c8 01       	movw	r24, r16
    f832:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    f836:	89 2b       	or	r24, r25
    f838:	a1 f4       	brne	.+40     	; 0xf862 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
    f83a:	8f ee       	ldi	r24, 0xEF	; 239
    f83c:	98 e0       	ldi	r25, 0x08	; 8
    f83e:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
    f842:	18 2f       	mov	r17, r24
tds_set_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    f844:	be 01       	movw	r22, r28
    f846:	68 5b       	subi	r22, 0xB8	; 184
    f848:	7f 4f       	sbci	r23, 0xFF	; 255
    f84a:	87 2d       	mov	r24, r7
    f84c:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2392
    f850:	6d 96       	adiw	r28, 0x1d	; 29
    f852:	1f af       	std	Y+63, r17	; 0x3f
    f854:	6d 97       	sbiw	r28, 0x1d	; 29
tds_set_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:108
  tds.period = period;
  set_tds18s20(idx, &tds);
    f856:	be 01       	movw	r22, r28
    f858:	68 5b       	subi	r22, 0xB8	; 184
    f85a:	7f 4f       	sbci	r23, 0xFF	; 255
    f85c:	87 2d       	mov	r24, r7
    f85e:	0e 94 88 55 	call	0xab10	; 0xab10 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2398
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    f862:	6a e8       	ldi	r22, 0x8A	; 138
    f864:	75 e0       	ldi	r23, 0x05	; 5
    f866:	90 e0       	ldi	r25, 0x00	; 0
    f868:	80 e0       	ldi	r24, 0x00	; 0
    f86a:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
    f86e:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2399
      cnt++;
    f870:	63 94       	inc	r6
    f872:	8f cf       	rjmp	.-226    	; 0xf792 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2404
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    f874:	60 e4       	ldi	r22, 0x40	; 64
    f876:	7c e5       	ldi	r23, 0x5C	; 92
    f878:	c5 01       	movw	r24, r10
    f87a:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2405
  strcat(str1, device.nazev);
    f87e:	6a ef       	ldi	r22, 0xFA	; 250
    f880:	7d e0       	ldi	r23, 0x0D	; 13
    f882:	c5 01       	movw	r24, r10
    f884:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2406
  strcat(str1, "/tds/clear");
    f888:	6f e8       	ldi	r22, 0x8F	; 143
    f88a:	74 e0       	ldi	r23, 0x04	; 4
    f88c:	c5 01       	movw	r24, r10
    f88e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2407
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f892:	f5 01       	movw	r30, r10
    f894:	01 90       	ld	r0, Z+
    f896:	00 20       	and	r0, r0
    f898:	e9 f7       	brne	.-6      	; 0xf894 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ec>
    f89a:	31 97       	sbiw	r30, 0x01	; 1
    f89c:	af 01       	movw	r20, r30
    f89e:	4a 19       	sub	r20, r10
    f8a0:	5b 09       	sbc	r21, r11
    f8a2:	b4 01       	movw	r22, r8
    f8a4:	c5 01       	movw	r24, r10
    f8a6:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
    f8aa:	89 2b       	or	r24, r25
    f8ac:	a1 f4       	brne	.+40     	; 0xf8d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x62e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2409
  {
    mqtt_process_message++;
    f8ae:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    f8b2:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    f8b6:	01 96       	adiw	r24, 0x01	; 1
    f8b8:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    f8bc:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2410
    id = atoi(my_payload);
    f8c0:	8f ee       	ldi	r24, 0xEF	; 239
    f8c2:	98 e0       	ldi	r25, 0x08	; 8
    f8c4:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
    f8c8:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2411
    if (id < HW_ONEWIRE_MAXROMS)
    f8ca:	a5 e0       	ldi	r26, 0x05	; 5
    f8cc:	a8 17       	cp	r26, r24
    f8ce:	08 f4       	brcc	.+2      	; 0xf8d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x62a>
    f8d0:	83 c0       	rjmp	.+262    	; 0xf9d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x730>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2412
      tds_set_clear(id);
    f8d2:	0e 94 02 6d 	call	0xda04	; 0xda04 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2421
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///
  ///
  //// thermctl-in/XXXXX/rtds-control/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
    f8d6:	60 e4       	ldi	r22, 0x40	; 64
    f8d8:	7c e5       	ldi	r23, 0x5C	; 92
    f8da:	c5 01       	movw	r24, r10
    f8dc:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2422
  strcat(str1, device.nazev);
    f8e0:	6a ef       	ldi	r22, 0xFA	; 250
    f8e2:	7d e0       	ldi	r23, 0x0D	; 13
    f8e4:	c5 01       	movw	r24, r10
    f8e6:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2423
  strcat(str1, "/rtds-control/register");
    f8ea:	6b ea       	ldi	r22, 0xAB	; 171
    f8ec:	74 e0       	ldi	r23, 0x04	; 4
    f8ee:	c5 01       	movw	r24, r10
    f8f0:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2424
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f8f4:	f5 01       	movw	r30, r10
    f8f6:	01 90       	ld	r0, Z+
    f8f8:	00 20       	and	r0, r0
    f8fa:	e9 f7       	brne	.-6      	; 0xf8f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64e>
    f8fc:	31 97       	sbiw	r30, 0x01	; 1
    f8fe:	af 01       	movw	r20, r30
    f900:	4a 19       	sub	r20, r10
    f902:	5b 09       	sbc	r21, r11
    f904:	b4 01       	movw	r22, r8
    f906:	c5 01       	movw	r24, r10
    f908:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
    f90c:	89 2b       	or	r24, r25
    f90e:	d1 f4       	brne	.+52     	; 0xf944 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2426
  {
    mqtt_process_message++;
    f910:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    f914:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    f918:	01 96       	adiw	r24, 0x01	; 1
    f91a:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    f91e:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2427
    if (remote_tds_name_exist(my_payload) == 255)
    f922:	8f ee       	ldi	r24, 0xEF	; 239
    f924:	98 e0       	ldi	r25, 0x08	; 8
    f926:	0e 94 49 58 	call	0xb092	; 0xb092 <remote_tds_name_exist(char*)>
    f92a:	8f 3f       	cpi	r24, 0xFF	; 255
    f92c:	59 f4       	brne	.+22     	; 0xf944 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2429
    {
      id = remote_tds_find_free();
    f92e:	0e 94 00 79 	call	0xf200	; 0xf200 <remote_tds_find_free()>
    f932:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2430
      remote_tds_set_complete(id, 1, my_payload);
    f934:	4f ee       	ldi	r20, 0xEF	; 239
    f936:	58 e0       	ldi	r21, 0x08	; 8
    f938:	61 e0       	ldi	r22, 0x01	; 1
    f93a:	0e 94 5d 57 	call	0xaeba	; 0xaeba <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2431
      remote_tds_subscibe_topic(id);
    f93e:	87 2d       	mov	r24, r7
    f940:	0e 94 a9 58 	call	0xb152	; 0xb152 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
    }
    ///TODO - vratit ze jiz existuje
  }
  ///
  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    f944:	60 e4       	ldi	r22, 0x40	; 64
    f946:	7c e5       	ldi	r23, 0x5C	; 92
    f948:	c5 01       	movw	r24, r10
    f94a:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
  strcat(str1, device.nazev);
    f94e:	6a ef       	ldi	r22, 0xFA	; 250
    f950:	7d e0       	ldi	r23, 0x0D	; 13
    f952:	c5 01       	movw	r24, r10
    f954:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
  strcat(str1, "/rtds-control/set/");
    f958:	62 ec       	ldi	r22, 0xC2	; 194
    f95a:	74 e0       	ldi	r23, 0x04	; 4
    f95c:	c5 01       	movw	r24, r10
    f95e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f962:	f5 01       	movw	r30, r10
    f964:	01 90       	ld	r0, Z+
    f966:	00 20       	and	r0, r0
    f968:	e9 f7       	brne	.-6      	; 0xf964 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6bc>
    f96a:	31 97       	sbiw	r30, 0x01	; 1
    f96c:	af 01       	movw	r20, r30
    f96e:	4a 19       	sub	r20, r10
    f970:	5b 09       	sbc	r21, r11
    f972:	b4 01       	movw	r22, r8
    f974:	c5 01       	movw	r24, r10
    f976:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
    f97a:	89 2b       	or	r24, r25
    f97c:	09 f0       	breq	.+2      	; 0xf980 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6d8>
    f97e:	6a c0       	rjmp	.+212    	; 0xfa54 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2442
  {
    mqtt_process_message++;
    f980:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    f984:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    f988:	01 96       	adiw	r24, 0x01	; 1
    f98a:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    f98e:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2444
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f992:	f5 01       	movw	r30, r10
    f994:	01 90       	ld	r0, Z+
    f996:	00 20       	and	r0, r0
    f998:	e9 f7       	brne	.-6      	; 0xf994 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6ec>
    f99a:	31 97       	sbiw	r30, 0x01	; 1
    f99c:	ea 19       	sub	r30, r10
    f99e:	fb 09       	sbc	r31, r11
    f9a0:	9e 2f       	mov	r25, r30
    f9a2:	4e 2f       	mov	r20, r30
    f9a4:	84 2f       	mov	r24, r20
    f9a6:	89 1b       	sub	r24, r25
    f9a8:	24 2f       	mov	r18, r20
    f9aa:	30 e0       	ldi	r19, 0x00	; 0
    f9ac:	d4 01       	movw	r26, r8
    f9ae:	0d 90       	ld	r0, X+
    f9b0:	00 20       	and	r0, r0
    f9b2:	e9 f7       	brne	.-6      	; 0xf9ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x706>
    f9b4:	11 97       	sbiw	r26, 0x01	; 1
    f9b6:	a8 19       	sub	r26, r8
    f9b8:	b9 09       	sbc	r27, r9
    f9ba:	2a 17       	cp	r18, r26
    f9bc:	3b 07       	cpc	r19, r27
    f9be:	88 f4       	brcc	.+34     	; 0xf9e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x73a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2446
    {
      str1[cnt] = topic[f];
    f9c0:	d5 01       	movw	r26, r10
    f9c2:	a8 0f       	add	r26, r24
    f9c4:	b1 1d       	adc	r27, r1
    f9c6:	28 0d       	add	r18, r8
    f9c8:	39 1d       	adc	r19, r9
    f9ca:	f9 01       	movw	r30, r18
    f9cc:	80 81       	ld	r24, Z
    f9ce:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2447
      str1[cnt + 1] = 0;
    f9d0:	11 96       	adiw	r26, 0x01	; 1
    f9d2:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2444
  strcat(str1, "/rtds-control/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f9d4:	4f 5f       	subi	r20, 0xFF	; 255
    f9d6:	e6 cf       	rjmp	.-52     	; 0xf9a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2414
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    f9d8:	8a e9       	ldi	r24, 0x9A	; 154
    f9da:	94 e0       	ldi	r25, 0x04	; 4
    f9dc:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <log_error(PubSubClient*, char*) [clone .constprop.117]>
    f9e0:	7a cf       	rjmp	.-268    	; 0xf8d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x62e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2451
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f9e2:	6a e8       	ldi	r22, 0x8A	; 138
    f9e4:	75 e0       	ldi	r23, 0x05	; 5
    f9e6:	c5 01       	movw	r24, r10
    f9e8:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2450
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f9ec:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2452
    pch = strtok (str1, "/");
    while (pch != NULL)
    f9ee:	00 97       	sbiw	r24, 0x00	; 0
    f9f0:	89 f1       	breq	.+98     	; 0xfa54 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2454
    {
      if (cnt == 0) id = atoi(pch);
    f9f2:	11 11       	cpse	r17, r1
    f9f4:	0b c0       	rjmp	.+22     	; 0xfa0c <mqtt_callback(char*, unsigned char*, unsigned int)+0x764>
    f9f6:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
    f9fa:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2468
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
    f9fc:	6a e8       	ldi	r22, 0x8A	; 138
    f9fe:	75 e0       	ldi	r23, 0x05	; 5
    fa00:	90 e0       	ldi	r25, 0x00	; 0
    fa02:	80 e0       	ldi	r24, 0x00	; 0
    fa04:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2469
      cnt++;
    fa08:	1f 5f       	subi	r17, 0xFF	; 255
    fa0a:	f1 cf       	rjmp	.-30     	; 0xf9ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x746>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2455
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
    fa0c:	11 30       	cpi	r17, 0x01	; 1
    fa0e:	b1 f7       	brne	.-20     	; 0xf9fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
    fa10:	6f e0       	ldi	r22, 0x0F	; 15
    fa12:	74 e0       	ldi	r23, 0x04	; 4
    fa14:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    fa18:	89 2b       	or	r24, r25
    fa1a:	81 f7       	brne	.-32     	; 0xf9fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2457
      {
        remote_tds_get_active(id, &active);
    fa1c:	be 01       	movw	r22, r28
    fa1e:	6a 5b       	subi	r22, 0xBA	; 186
    fa20:	7e 4f       	sbci	r23, 0xFE	; 254
    fa22:	87 2d       	mov	r24, r7
    fa24:	0e 94 e6 76 	call	0xedcc	; 0xedcc <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2458
        if (active == 0)
    fa28:	ca 5b       	subi	r28, 0xBA	; 186
    fa2a:	de 4f       	sbci	r29, 0xFE	; 254
    fa2c:	88 81       	ld	r24, Y
    fa2e:	c6 54       	subi	r28, 0x46	; 70
    fa30:	d1 40       	sbci	r29, 0x01	; 1
    fa32:	81 11       	cpse	r24, r1
    fa34:	0a c0       	rjmp	.+20     	; 0xfa4a <mqtt_callback(char*, unsigned char*, unsigned int)+0x7a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2460
        {
          remote_tds_set_complete(id, 1, my_payload);
    fa36:	4f ee       	ldi	r20, 0xEF	; 239
    fa38:	58 e0       	ldi	r21, 0x08	; 8
    fa3a:	61 e0       	ldi	r22, 0x01	; 1
    fa3c:	87 2d       	mov	r24, r7
    fa3e:	0e 94 5d 57 	call	0xaeba	; 0xaeba <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2461
          remote_tds_subscibe_topic(id);
    fa42:	87 2d       	mov	r24, r7
    fa44:	0e 94 a9 58 	call	0xb152	; 0xb152 <remote_tds_subscibe_topic(unsigned char)>
    fa48:	d9 cf       	rjmp	.-78     	; 0xf9fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2465
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
    fa4a:	85 ed       	ldi	r24, 0xD5	; 213
    fa4c:	94 e0       	ldi	r25, 0x04	; 4
    fa4e:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <log_error(PubSubClient*, char*) [clone .constprop.117]>
    fa52:	d4 cf       	rjmp	.-88     	; 0xf9fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2474
      cnt++;
    }
  }
  ///
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    fa54:	60 e4       	ldi	r22, 0x40	; 64
    fa56:	7c e5       	ldi	r23, 0x5C	; 92
    fa58:	c5 01       	movw	r24, r10
    fa5a:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2475
  strcat(str1, device.nazev);
    fa5e:	6a ef       	ldi	r22, 0xFA	; 250
    fa60:	7d e0       	ldi	r23, 0x0D	; 13
    fa62:	c5 01       	movw	r24, r10
    fa64:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
  strcat(str1, "/rtds-control/clear");
    fa68:	65 ee       	ldi	r22, 0xE5	; 229
    fa6a:	74 e0       	ldi	r23, 0x04	; 4
    fa6c:	c5 01       	movw	r24, r10
    fa6e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2477
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fa72:	f5 01       	movw	r30, r10
    fa74:	01 90       	ld	r0, Z+
    fa76:	00 20       	and	r0, r0
    fa78:	e9 f7       	brne	.-6      	; 0xfa74 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7cc>
    fa7a:	31 97       	sbiw	r30, 0x01	; 1
    fa7c:	af 01       	movw	r20, r30
    fa7e:	4a 19       	sub	r20, r10
    fa80:	5b 09       	sbc	r21, r11
    fa82:	b4 01       	movw	r22, r8
    fa84:	c5 01       	movw	r24, r10
    fa86:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
    fa8a:	89 2b       	or	r24, r25
    fa8c:	09 f0       	breq	.+2      	; 0xfa90 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7e8>
    fa8e:	74 c0       	rjmp	.+232    	; 0xfb78 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2479
  {
    mqtt_process_message++;
    fa90:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    fa94:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    fa98:	01 96       	adiw	r24, 0x01	; 1
    fa9a:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    fa9e:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2480
    id = atoi(my_payload);
    faa2:	8f ee       	ldi	r24, 0xEF	; 239
    faa4:	98 e0       	ldi	r25, 0x08	; 8
    faa6:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
    faaa:	78 2e       	mov	r7, r24
remote_tds_unsubscibe_topic():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2102
/// funkce pro zruseni odebirani topicu vzdalenych cidel
void remote_tds_unsubscibe_topic(uint8_t idx)
{
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    faac:	c8 5f       	subi	r28, 0xF8	; 248
    faae:	de 4f       	sbci	r29, 0xFE	; 254
    fab0:	18 82       	st	Y, r1
    fab2:	c8 50       	subi	r28, 0x08	; 8
    fab4:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2103
  remote_tds_get_complete(idx, &active, tmp1);
    fab6:	ae 01       	movw	r20, r28
    fab8:	48 57       	subi	r20, 0x78	; 120
    faba:	5f 4f       	sbci	r21, 0xFF	; 255
    fabc:	be 01       	movw	r22, r28
    fabe:	68 5f       	subi	r22, 0xF8	; 248
    fac0:	7e 4f       	sbci	r23, 0xFE	; 254
    fac2:	0e 94 09 58 	call	0xb012	; 0xb012 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2104
  if (active == 1)
    fac6:	c8 5f       	subi	r28, 0xF8	; 248
    fac8:	de 4f       	sbci	r29, 0xFE	; 254
    faca:	88 81       	ld	r24, Y
    facc:	c8 50       	subi	r28, 0x08	; 8
    face:	d1 40       	sbci	r29, 0x01	; 1
    fad0:	81 30       	cpi	r24, 0x01	; 1
    fad2:	09 f0       	breq	.+2      	; 0xfad6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82e>
    fad4:	4e c0       	rjmp	.+156    	; 0xfb72 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2106
  {
    strcpy_P(tmp2, new_text_slash_rtds_slash);
    fad6:	8e 01       	movw	r16, r28
    fad8:	08 5b       	subi	r16, 0xB8	; 184
    fada:	1f 4f       	sbci	r17, 0xFF	; 255
    fadc:	66 eb       	ldi	r22, 0xB6	; 182
    fade:	7b e5       	ldi	r23, 0x5B	; 91
    fae0:	c8 01       	movw	r24, r16
    fae2:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2107
    strcat(tmp2, tmp1);
    fae6:	be 01       	movw	r22, r28
    fae8:	68 57       	subi	r22, 0x78	; 120
    faea:	7f 4f       	sbci	r23, 0xFF	; 255
    faec:	c8 01       	movw	r24, r16
    faee:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2108
    strcat(tmp2, "/#");
    faf2:	6c e0       	ldi	r22, 0x0C	; 12
    faf4:	74 e0       	ldi	r23, 0x04	; 4
    faf6:	c8 01       	movw	r24, r16
    faf8:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
unsubscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:497
    }
    return false;
}

boolean PubSubClient::unsubscribe(const char* topic) {
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
    fafc:	d8 01       	movw	r26, r16
    fafe:	0d 90       	ld	r0, X+
    fb00:	00 20       	and	r0, r0
    fb02:	e9 f7       	brne	.-6      	; 0xfafe <mqtt_callback(char*, unsigned char*, unsigned int)+0x856>
    fb04:	cd 01       	movw	r24, r26
    fb06:	80 1b       	sub	r24, r16
    fb08:	91 0b       	sbc	r25, r17
    fb0a:	08 96       	adiw	r24, 0x08	; 8
    fb0c:	81 30       	cpi	r24, 0x01	; 1
    fb0e:	92 40       	sbci	r25, 0x02	; 2
    fb10:	80 f5       	brcc	.+96     	; 0xfb72 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:501
        // Too long
        return false;
    }
    if (connected()) {
    fb12:	8a ef       	ldi	r24, 0xFA	; 250
    fb14:	9f e0       	ldi	r25, 0x0F	; 15
    fb16:	0e 94 7d 52 	call	0xa4fa	; 0xa4fa <PubSubClient::connected()>
    fb1a:	88 23       	and	r24, r24
    fb1c:	51 f1       	breq	.+84     	; 0xfb72 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:503
        uint16_t length = 5;
        nextMsgId++;
    fb1e:	80 91 fc 11 	lds	r24, 0x11FC	; 0x8011fc <mqtt_client+0x202>
    fb22:	90 91 fd 11 	lds	r25, 0x11FD	; 0x8011fd <mqtt_client+0x203>
    fb26:	01 96       	adiw	r24, 0x01	; 1
    fb28:	90 93 fd 11 	sts	0x11FD, r25	; 0x8011fd <mqtt_client+0x203>
    fb2c:	80 93 fc 11 	sts	0x11FC, r24	; 0x8011fc <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:504
        if (nextMsgId == 0) {
    fb30:	89 2b       	or	r24, r25
    fb32:	31 f4       	brne	.+12     	; 0xfb40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x898>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:505
            nextMsgId = 1;
    fb34:	81 e0       	ldi	r24, 0x01	; 1
    fb36:	90 e0       	ldi	r25, 0x00	; 0
    fb38:	90 93 fd 11 	sts	0x11FD, r25	; 0x8011fd <mqtt_client+0x203>
    fb3c:	80 93 fc 11 	sts	0x11FC, r24	; 0x8011fc <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:507
        }
        buffer[length++] = (nextMsgId >> 8);
    fb40:	80 91 fc 11 	lds	r24, 0x11FC	; 0x8011fc <mqtt_client+0x202>
    fb44:	90 91 fd 11 	lds	r25, 0x11FD	; 0x8011fd <mqtt_client+0x203>
    fb48:	90 93 01 10 	sts	0x1001, r25	; 0x801001 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:508
        buffer[length++] = (nextMsgId & 0xFF);
    fb4c:	80 93 02 10 	sts	0x1002, r24	; 0x801002 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:509
        length = writeString(topic, buffer,length);
    fb50:	47 e0       	ldi	r20, 0x07	; 7
    fb52:	50 e0       	ldi	r21, 0x00	; 0
    fb54:	6c ef       	ldi	r22, 0xFC	; 252
    fb56:	7f e0       	ldi	r23, 0x0F	; 15
    fb58:	c8 01       	movw	r24, r16
    fb5a:	0e 94 d8 ae 	call	0x15db0	; 0x15db0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.213]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:510
        return write(MQTTUNSUBSCRIBE|MQTTQOS1,buffer,length-5);
    fb5e:	9c 01       	movw	r18, r24
    fb60:	25 50       	subi	r18, 0x05	; 5
    fb62:	31 09       	sbc	r19, r1
    fb64:	4c ef       	ldi	r20, 0xFC	; 252
    fb66:	5f e0       	ldi	r21, 0x0F	; 15
    fb68:	62 ea       	ldi	r22, 0xA2	; 162
    fb6a:	8a ef       	ldi	r24, 0xFA	; 250
    fb6c:	9f e0       	ldi	r25, 0x0F	; 15
    fb6e:	0e 94 b3 52 	call	0xa566	; 0xa566 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2483
  {
    mqtt_process_message++;
    id = atoi(my_payload);
    remote_tds_unsubscibe_topic(id);
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
    fb72:	87 2d       	mov	r24, r7
    fb74:	0e 94 74 57 	call	0xaee8	; 0xaee8 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2487
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    fb78:	60 e4       	ldi	r22, 0x40	; 64
    fb7a:	7c e5       	ldi	r23, 0x5C	; 92
    fb7c:	c5 01       	movw	r24, r10
    fb7e:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2488
  strcat(str1, device.nazev);
    fb82:	6a ef       	ldi	r22, 0xFA	; 250
    fb84:	7d e0       	ldi	r23, 0x0D	; 13
    fb86:	c5 01       	movw	r24, r10
    fb88:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2489
  strcat(str1, "/rtds-control/get");
    fb8c:	69 ef       	ldi	r22, 0xF9	; 249
    fb8e:	74 e0       	ldi	r23, 0x04	; 4
    fb90:	c5 01       	movw	r24, r10
    fb92:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2490
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fb96:	f5 01       	movw	r30, r10
    fb98:	01 90       	ld	r0, Z+
    fb9a:	00 20       	and	r0, r0
    fb9c:	e9 f7       	brne	.-6      	; 0xfb98 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8f0>
    fb9e:	31 97       	sbiw	r30, 0x01	; 1
    fba0:	af 01       	movw	r20, r30
    fba2:	4a 19       	sub	r20, r10
    fba4:	5b 09       	sbc	r21, r11
    fba6:	b4 01       	movw	r22, r8
    fba8:	c5 01       	movw	r24, r10
    fbaa:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
    fbae:	89 2b       	or	r24, r25
    fbb0:	11 f4       	brne	.+4      	; 0xfbb6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x90e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2492
  {
    send_mqtt_remote_tds_status();
    fbb2:	0e 94 50 76 	call	0xeca0	; 0xeca0 <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2496
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy_P(str1, new_text_slash_rtds_slash); /// /rtds/
    fbb6:	66 eb       	ldi	r22, 0xB6	; 182
    fbb8:	7b e5       	ldi	r23, 0x5B	; 91
    fbba:	c5 01       	movw	r24, r10
    fbbc:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2497
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fbc0:	f5 01       	movw	r30, r10
    fbc2:	01 90       	ld	r0, Z+
    fbc4:	00 20       	and	r0, r0
    fbc6:	e9 f7       	brne	.-6      	; 0xfbc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x91a>
    fbc8:	31 97       	sbiw	r30, 0x01	; 1
    fbca:	af 01       	movw	r20, r30
    fbcc:	4a 19       	sub	r20, r10
    fbce:	5b 09       	sbc	r21, r11
    fbd0:	b4 01       	movw	r22, r8
    fbd2:	c5 01       	movw	r24, r10
    fbd4:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
    fbd8:	89 2b       	or	r24, r25
    fbda:	09 f0       	breq	.+2      	; 0xfbde <mqtt_callback(char*, unsigned char*, unsigned int)+0x936>
    fbdc:	9a c0       	rjmp	.+308    	; 0xfd12 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2499
  {
    mqtt_process_message++;
    fbde:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    fbe2:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    fbe6:	01 96       	adiw	r24, 0x01	; 1
    fbe8:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    fbec:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2501
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fbf0:	f5 01       	movw	r30, r10
    fbf2:	01 90       	ld	r0, Z+
    fbf4:	00 20       	and	r0, r0
    fbf6:	e9 f7       	brne	.-6      	; 0xfbf2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x94a>
    fbf8:	31 97       	sbiw	r30, 0x01	; 1
    fbfa:	ea 19       	sub	r30, r10
    fbfc:	fb 09       	sbc	r31, r11
    fbfe:	9e 2f       	mov	r25, r30
    fc00:	4e 2f       	mov	r20, r30
    fc02:	84 2f       	mov	r24, r20
    fc04:	89 1b       	sub	r24, r25
    fc06:	24 2f       	mov	r18, r20
    fc08:	30 e0       	ldi	r19, 0x00	; 0
    fc0a:	d4 01       	movw	r26, r8
    fc0c:	0d 90       	ld	r0, X+
    fc0e:	00 20       	and	r0, r0
    fc10:	e9 f7       	brne	.-6      	; 0xfc0c <mqtt_callback(char*, unsigned char*, unsigned int)+0x964>
    fc12:	11 97       	sbiw	r26, 0x01	; 1
    fc14:	a8 19       	sub	r26, r8
    fc16:	b9 09       	sbc	r27, r9
    fc18:	2a 17       	cp	r18, r26
    fc1a:	3b 07       	cpc	r19, r27
    fc1c:	60 f4       	brcc	.+24     	; 0xfc36 <mqtt_callback(char*, unsigned char*, unsigned int)+0x98e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2503
    {
      str1[cnt] = topic[f];
    fc1e:	d5 01       	movw	r26, r10
    fc20:	a8 0f       	add	r26, r24
    fc22:	b1 1d       	adc	r27, r1
    fc24:	28 0d       	add	r18, r8
    fc26:	39 1d       	adc	r19, r9
    fc28:	f9 01       	movw	r30, r18
    fc2a:	80 81       	ld	r24, Z
    fc2c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2504
      str1[cnt + 1] = 0;
    fc2e:	11 96       	adiw	r26, 0x01	; 1
    fc30:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2501
  strcpy_P(str1, new_text_slash_rtds_slash); /// /rtds/
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fc32:	4f 5f       	subi	r20, 0xFF	; 255
    fc34:	e6 cf       	rjmp	.-52     	; 0xfc02 <mqtt_callback(char*, unsigned char*, unsigned int)+0x95a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    fc36:	6a e8       	ldi	r22, 0x8A	; 138
    fc38:	75 e0       	ldi	r23, 0x05	; 5
    fc3a:	c5 01       	movw	r24, r10
    fc3c:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    fc40:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509
    pch = strtok (str1, "/");
    while (pch != NULL)
    fc42:	00 97       	sbiw	r24, 0x00	; 0
    fc44:	b9 f0       	breq	.+46     	; 0xfc74 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2511
    {
      if (cnt == 0)
    fc46:	11 11       	cpse	r17, r1
    fc48:	0e c0       	rjmp	.+28     	; 0xfc66 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2512
        strcpy(tmp1, pch);
    fc4a:	bc 01       	movw	r22, r24
    fc4c:	ce 01       	movw	r24, r28
    fc4e:	88 57       	subi	r24, 0x78	; 120
    fc50:	9f 4f       	sbci	r25, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2514
      if (cnt == 1)
        strcpy(tmp2, pch);
    fc52:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2515
      pch = strtok (NULL, "/");
    fc56:	6a e8       	ldi	r22, 0x8A	; 138
    fc58:	75 e0       	ldi	r23, 0x05	; 5
    fc5a:	90 e0       	ldi	r25, 0x00	; 0
    fc5c:	80 e0       	ldi	r24, 0x00	; 0
    fc5e:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2516
      cnt++;
    fc62:	1f 5f       	subi	r17, 0xFF	; 255
    fc64:	ee cf       	rjmp	.-36     	; 0xfc42 <mqtt_callback(char*, unsigned char*, unsigned int)+0x99a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2513
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0)
        strcpy(tmp1, pch);
      if (cnt == 1)
    fc66:	11 30       	cpi	r17, 0x01	; 1
    fc68:	b1 f7       	brne	.-20     	; 0xfc56 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2514
        strcpy(tmp2, pch);
    fc6a:	bc 01       	movw	r22, r24
    fc6c:	ce 01       	movw	r24, r28
    fc6e:	88 5f       	subi	r24, 0xF8	; 248
    fc70:	9e 4f       	sbci	r25, 0xFE	; 254
    fc72:	ef cf       	rjmp	.-34     	; 0xfc52 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    fc74:	77 e6       	ldi	r23, 0x67	; 103
    fc76:	c7 2e       	mov	r12, r23
    fc78:	d1 2c       	mov	r13, r1
    fc7a:	e1 2c       	mov	r14, r1
    fc7c:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2518
      if (cnt == 1)
        strcpy(tmp2, pch);
      pch = strtok (NULL, "/");
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    fc7e:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2520
    {
      uint8_t active = 0;
    fc80:	29 96       	adiw	r28, 0x09	; 9
    fc82:	1f ae       	std	Y+63, r1	; 0x3f
    fc84:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2521
      str1[0] = 0;
    fc86:	d5 01       	movw	r26, r10
    fc88:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2522
      remote_tds_get_complete(idx, &active, str1);
    fc8a:	a5 01       	movw	r20, r10
    fc8c:	be 01       	movw	r22, r28
    fc8e:	68 5b       	subi	r22, 0xB8	; 184
    fc90:	7f 4f       	sbci	r23, 0xFF	; 255
    fc92:	81 2f       	mov	r24, r17
    fc94:	0e 94 09 58 	call	0xb012	; 0xb012 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2523
      if (active == 1 && strcmp(str1, tmp1) == 0)
    fc98:	29 96       	adiw	r28, 0x09	; 9
    fc9a:	8f ad       	ldd	r24, Y+63	; 0x3f
    fc9c:	29 97       	sbiw	r28, 0x09	; 9
    fc9e:	81 30       	cpi	r24, 0x01	; 1
    fca0:	59 f5       	brne	.+86     	; 0xfcf8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa50>
    fca2:	be 01       	movw	r22, r28
    fca4:	68 57       	subi	r22, 0x78	; 120
    fca6:	7f 4f       	sbci	r23, 0xFF	; 255
    fca8:	c5 01       	movw	r24, r10
    fcaa:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    fcae:	89 2b       	or	r24, r25
    fcb0:	19 f5       	brne	.+70     	; 0xfcf8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2525
      {
        if (strcmp(tmp2, "value") == 0)
    fcb2:	60 e2       	ldi	r22, 0x20	; 32
    fcb4:	74 e0       	ldi	r23, 0x04	; 4
    fcb6:	ce 01       	movw	r24, r28
    fcb8:	88 5f       	subi	r24, 0xF8	; 248
    fcba:	9e 4f       	sbci	r25, 0xFE	; 254
    fcbc:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    fcc0:	89 2b       	or	r24, r25
    fcc2:	41 f4       	brne	.+16     	; 0xfcd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2526
          remote_tds_set_data(idx, atoi(my_payload));
    fcc4:	8f ee       	ldi	r24, 0xEF	; 239
    fcc6:	98 e0       	ldi	r25, 0x08	; 8
    fcc8:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
    fccc:	bc 01       	movw	r22, r24
    fcce:	81 2f       	mov	r24, r17
    fcd0:	0e 94 2d 4e 	call	0x9c5a	; 0x9c5a <remote_tds_set_data(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2527
        if (strcmp(tmp2, "type") == 0)
    fcd4:	66 e2       	ldi	r22, 0x26	; 38
    fcd6:	74 e0       	ldi	r23, 0x04	; 4
    fcd8:	ce 01       	movw	r24, r28
    fcda:	88 5f       	subi	r24, 0xF8	; 248
    fcdc:	9e 4f       	sbci	r25, 0xFE	; 254
    fcde:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    fce2:	89 2b       	or	r24, r25
    fce4:	49 f4       	brne	.+18     	; 0xfcf8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2528
          remote_tds_set_type(idx, atoi(my_payload));
    fce6:	8f ee       	ldi	r24, 0xEF	; 239
    fce8:	98 e0       	ldi	r25, 0x08	; 8
    fcea:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
remote_tds_set_type():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2153
///
void remote_tds_set_type(uint8_t idx, uint8_t type)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_type + (ram_remote_tds_store_size * idx), type);
    fcee:	48 2f       	mov	r20, r24
    fcf0:	c7 01       	movw	r24, r14
    fcf2:	b6 01       	movw	r22, r12
    fcf4:	0e 94 db b8 	call	0x171b6	; 0x171b6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.217]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2518
      if (cnt == 1)
        strcpy(tmp2, pch);
      pch = strtok (NULL, "/");
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    fcf8:	1f 5f       	subi	r17, 0xFF	; 255
    fcfa:	b4 e0       	ldi	r27, 0x04	; 4
    fcfc:	cb 0e       	add	r12, r27
    fcfe:	d1 1c       	adc	r13, r1
    fd00:	e1 1c       	adc	r14, r1
    fd02:	f1 1c       	adc	r15, r1
    fd04:	ef e8       	ldi	r30, 0x8F	; 143
    fd06:	ce 16       	cp	r12, r30
    fd08:	d1 04       	cpc	r13, r1
    fd0a:	e1 04       	cpc	r14, r1
    fd0c:	f1 04       	cpc	r15, r1
    fd0e:	09 f0       	breq	.+2      	; 0xfd12 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa6a>
    fd10:	b7 cf       	rjmp	.-146    	; 0xfc80 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2534
      }
    }
  }
  ///

  strcpy_P(str1, new_text_slash_rtds_control_list); /// /rtds-control/list"
    fd12:	63 ea       	ldi	r22, 0xA3	; 163
    fd14:	7b e5       	ldi	r23, 0x5B	; 91
    fd16:	c5 01       	movw	r24, r10
    fd18:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2549
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    fd1c:	60 e4       	ldi	r22, 0x40	; 64
    fd1e:	7c e5       	ldi	r23, 0x5C	; 92
    fd20:	c5 01       	movw	r24, r10
    fd22:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2550
  strcat(str1, device.nazev);
    fd26:	6a ef       	ldi	r22, 0xFA	; 250
    fd28:	7d e0       	ldi	r23, 0x0D	; 13
    fd2a:	c5 01       	movw	r24, r10
    fd2c:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2551
  strcat(str1, "/prog/set/");
    fd30:	6b e0       	ldi	r22, 0x0B	; 11
    fd32:	75 e0       	ldi	r23, 0x05	; 5
    fd34:	c5 01       	movw	r24, r10
    fd36:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2552
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fd3a:	f5 01       	movw	r30, r10
    fd3c:	01 90       	ld	r0, Z+
    fd3e:	00 20       	and	r0, r0
    fd40:	e9 f7       	brne	.-6      	; 0xfd3c <mqtt_callback(char*, unsigned char*, unsigned int)+0xa94>
    fd42:	31 97       	sbiw	r30, 0x01	; 1
    fd44:	af 01       	movw	r20, r30
    fd46:	4a 19       	sub	r20, r10
    fd48:	5b 09       	sbc	r21, r11
    fd4a:	b4 01       	movw	r22, r8
    fd4c:	c5 01       	movw	r24, r10
    fd4e:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
    fd52:	89 2b       	or	r24, r25
    fd54:	09 f0       	breq	.+2      	; 0xfd58 <mqtt_callback(char*, unsigned char*, unsigned int)+0xab0>
    fd56:	46 c0       	rjmp	.+140    	; 0xfde4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554
  {
    mqtt_process_message++;
    fd58:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    fd5c:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    fd60:	01 96       	adiw	r24, 0x01	; 1
    fd62:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    fd66:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2556
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fd6a:	f5 01       	movw	r30, r10
    fd6c:	01 90       	ld	r0, Z+
    fd6e:	00 20       	and	r0, r0
    fd70:	e9 f7       	brne	.-6      	; 0xfd6c <mqtt_callback(char*, unsigned char*, unsigned int)+0xac4>
    fd72:	31 97       	sbiw	r30, 0x01	; 1
    fd74:	ea 19       	sub	r30, r10
    fd76:	fb 09       	sbc	r31, r11
    fd78:	9e 2f       	mov	r25, r30
    fd7a:	4e 2f       	mov	r20, r30
    fd7c:	84 2f       	mov	r24, r20
    fd7e:	89 1b       	sub	r24, r25
    fd80:	24 2f       	mov	r18, r20
    fd82:	30 e0       	ldi	r19, 0x00	; 0
    fd84:	d4 01       	movw	r26, r8
    fd86:	0d 90       	ld	r0, X+
    fd88:	00 20       	and	r0, r0
    fd8a:	e9 f7       	brne	.-6      	; 0xfd86 <mqtt_callback(char*, unsigned char*, unsigned int)+0xade>
    fd8c:	11 97       	sbiw	r26, 0x01	; 1
    fd8e:	a8 19       	sub	r26, r8
    fd90:	b9 09       	sbc	r27, r9
    fd92:	2a 17       	cp	r18, r26
    fd94:	3b 07       	cpc	r19, r27
    fd96:	60 f4       	brcc	.+24     	; 0xfdb0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2558
    {
      str1[cnt] = topic[f];
    fd98:	d5 01       	movw	r26, r10
    fd9a:	a8 0f       	add	r26, r24
    fd9c:	b1 1d       	adc	r27, r1
    fd9e:	28 0d       	add	r18, r8
    fda0:	39 1d       	adc	r19, r9
    fda2:	f9 01       	movw	r30, r18
    fda4:	80 81       	ld	r24, Z
    fda6:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2559
      str1[cnt + 1] = 0;
    fda8:	11 96       	adiw	r26, 0x01	; 1
    fdaa:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2556
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fdac:	4f 5f       	subi	r20, 0xFF	; 255
    fdae:	e6 cf       	rjmp	.-52     	; 0xfd7c <mqtt_callback(char*, unsigned char*, unsigned int)+0xad4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2563
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    fdb0:	6a e8       	ldi	r22, 0x8A	; 138
    fdb2:	75 e0       	ldi	r23, 0x05	; 5
    fdb4:	c5 01       	movw	r24, r10
    fdb6:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
    fdba:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2562
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    fdbc:	f1 2c       	mov	r15, r1
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    fdbe:	6d e4       	ldi	r22, 0x4D	; 77
    fdc0:	e6 2e       	mov	r14, r22
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2564
    pch = strtok (str1, "/");
    while (pch != NULL)
    fdc2:	01 15       	cp	r16, r1
    fdc4:	11 05       	cpc	r17, r1
    fdc6:	71 f0       	breq	.+28     	; 0xfde4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2566
    {
      if (cnt == 0) id = atoi(pch);
    fdc8:	f1 10       	cpse	r15, r1
    fdca:	c7 c0       	rjmp	.+398    	; 0xff5a <__DATA_REGION_LENGTH__+0x15a>
    fdcc:	c8 01       	movw	r24, r16
    fdce:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
    fdd2:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2567
      if (id < AVAILABLE_PROGRAM)
    fdd4:	f7 e0       	ldi	r31, 0x07	; 7
    fdd6:	f8 17       	cp	r31, r24
    fdd8:	08 f0       	brcs	.+2      	; 0xfddc <mqtt_callback(char*, unsigned char*, unsigned int)+0xb34>
    fdda:	e6 c0       	rjmp	.+460    	; 0xffa8 <__DATA_REGION_LENGTH__+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2574
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    fddc:	86 e1       	ldi	r24, 0x16	; 22
    fdde:	95 e0       	ldi	r25, 0x05	; 5
    fde0:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <log_error(PubSubClient*, char*) [clone .constprop.117]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
      pch = strtok (NULL, "/");
      cnt++;
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    fde4:	60 e4       	ldi	r22, 0x40	; 64
    fde6:	7c e5       	ldi	r23, 0x5C	; 92
    fde8:	c5 01       	movw	r24, r10
    fdea:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2583
  strcat(str1, device.nazev);
    fdee:	6a ef       	ldi	r22, 0xFA	; 250
    fdf0:	7d e0       	ldi	r23, 0x0D	; 13
    fdf2:	c5 01       	movw	r24, r10
    fdf4:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2584
  strcat(str1, "/prog/clear");
    fdf8:	66 e2       	ldi	r22, 0x26	; 38
    fdfa:	75 e0       	ldi	r23, 0x05	; 5
    fdfc:	c5 01       	movw	r24, r10
    fdfe:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2585
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fe02:	f5 01       	movw	r30, r10
    fe04:	01 90       	ld	r0, Z+
    fe06:	00 20       	and	r0, r0
    fe08:	e9 f7       	brne	.-6      	; 0xfe04 <__DATA_REGION_LENGTH__+0x4>
    fe0a:	31 97       	sbiw	r30, 0x01	; 1
    fe0c:	af 01       	movw	r20, r30
    fe0e:	4a 19       	sub	r20, r10
    fe10:	5b 09       	sbc	r21, r11
    fe12:	b4 01       	movw	r22, r8
    fe14:	c5 01       	movw	r24, r10
    fe16:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
    fe1a:	89 2b       	or	r24, r25
    fe1c:	09 f0       	breq	.+2      	; 0xfe20 <__DATA_REGION_LENGTH__+0x20>
    fe1e:	52 c0       	rjmp	.+164    	; 0xfec4 <__DATA_REGION_LENGTH__+0xc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
  {
    mqtt_process_message++;
    fe20:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    fe24:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    fe28:	01 96       	adiw	r24, 0x01	; 1
    fe2a:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    fe2e:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2588
    id = atoi(my_payload);
    fe32:	8f ee       	ldi	r24, 0xEF	; 239
    fe34:	98 e0       	ldi	r25, 0x08	; 8
    fe36:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
    fe3a:	18 2f       	mov	r17, r24
    fe3c:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2589
    if (id < AVAILABLE_PROGRAM)
    fe3e:	97 e0       	ldi	r25, 0x07	; 7
    fe40:	91 17       	cp	r25, r17
    fe42:	08 f4       	brcc	.+2      	; 0xfe46 <__DATA_REGION_LENGTH__+0x46>
    fe44:	ba c0       	rjmp	.+372    	; 0xffba <__DATA_REGION_LENGTH__+0x1ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2591
    {
      strcpy_P(tmp2, text_prog);
    fe46:	63 ea       	ldi	r22, 0xA3	; 163
    fe48:	7d e5       	ldi	r23, 0x5D	; 93
    fe4a:	ce 01       	movw	r24, r28
    fe4c:	88 5f       	subi	r24, 0xF8	; 248
    fe4e:	9e 4f       	sbci	r25, 0xFE	; 254
    fe50:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2592
      thermostat_program_set_name(id, tmp2);
    fe54:	be 01       	movw	r22, r28
    fe56:	68 5f       	subi	r22, 0xF8	; 248
    fe58:	7e 4f       	sbci	r23, 0xFE	; 254
    fe5a:	81 2f       	mov	r24, r17
    fe5c:	0e 94 52 54 	call	0xa8a4	; 0xa8a4 <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
    fe60:	ad e4       	ldi	r26, 0x4D	; 77
    fe62:	1a 9f       	mul	r17, r26
    fe64:	c0 01       	movw	r24, r0
    fe66:	11 24       	eor	r1, r1
    fe68:	6f ef       	ldi	r22, 0xFF	; 255
    fe6a:	8f 50       	subi	r24, 0x0F	; 15
    fe6c:	9e 4f       	sbci	r25, 0xFE	; 254
    fe6e:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2594
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    fe72:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2596
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    fe74:	c1 2c       	mov	r12, r1
    fe76:	e1 2c       	mov	r14, r1
    fe78:	00 e0       	ldi	r16, 0x00	; 0
    fe7a:	20 e0       	ldi	r18, 0x00	; 0
    fe7c:	40 e0       	ldi	r20, 0x00	; 0
    fe7e:	61 2f       	mov	r22, r17
    fe80:	87 2d       	mov	r24, r7
    fe82:	0e 94 16 54 	call	0xa82c	; 0xa82c <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2597
        thermostat_program_set_threshold(id, progid, 220);
    fe86:	4c ed       	ldi	r20, 0xDC	; 220
    fe88:	50 e0       	ldi	r21, 0x00	; 0
    fe8a:	61 2f       	mov	r22, r17
    fe8c:	87 2d       	mov	r24, r7
    fe8e:	0e 94 fa 53 	call	0xa7f4	; 0xa7f4 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2598
        thermostat_program_set_week(id, progid, 0);
    fe92:	40 e0       	ldi	r20, 0x00	; 0
    fe94:	61 2f       	mov	r22, r17
    fe96:	87 2d       	mov	r24, r7
    fe98:	0e 94 ec 53 	call	0xa7d8	; 0xa7d8 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2594
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy_P(tmp2, text_prog);
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    fe9c:	1f 5f       	subi	r17, 0xFF	; 255
    fe9e:	1b 30       	cpi	r17, 0x0B	; 11
    fea0:	49 f7       	brne	.-46     	; 0xfe74 <__DATA_REGION_LENGTH__+0x74>
    fea2:	0b e5       	ldi	r16, 0x5B	; 91
    fea4:	11 e0       	ldi	r17, 0x01	; 1
thermostat_ring_get_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
    fea6:	c8 01       	movw	r24, r16
    fea8:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2602
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
    feac:	78 12       	cpse	r7, r24
    feae:	04 c0       	rjmp	.+8      	; 0xfeb8 <__DATA_REGION_LENGTH__+0xb8>
thermostat_ring_set_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    feb0:	6f ef       	ldi	r22, 0xFF	; 255
    feb2:	c8 01       	movw	r24, r16
    feb4:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
    feb8:	0f 5d       	subi	r16, 0xDF	; 223
    feba:	1f 4f       	sbci	r17, 0xFF	; 255
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2600
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    febc:	01 15       	cp	r16, r1
    febe:	b2 e0       	ldi	r27, 0x02	; 2
    fec0:	1b 07       	cpc	r17, r27
    fec2:	89 f7       	brne	.-30     	; 0xfea6 <__DATA_REGION_LENGTH__+0xa6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2614
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    fec4:	60 e4       	ldi	r22, 0x40	; 64
    fec6:	7c e5       	ldi	r23, 0x5C	; 92
    fec8:	c5 01       	movw	r24, r10
    feca:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
  strcat(str1, device.nazev);
    fece:	6a ef       	ldi	r22, 0xFA	; 250
    fed0:	7d e0       	ldi	r23, 0x0D	; 13
    fed2:	c5 01       	movw	r24, r10
    fed4:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2616
  strcat(str1, "/prog_interval/set/");
    fed8:	64 e4       	ldi	r22, 0x44	; 68
    feda:	75 e0       	ldi	r23, 0x05	; 5
    fedc:	c5 01       	movw	r24, r10
    fede:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2617
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fee2:	f5 01       	movw	r30, r10
    fee4:	01 90       	ld	r0, Z+
    fee6:	00 20       	and	r0, r0
    fee8:	e9 f7       	brne	.-6      	; 0xfee4 <__DATA_REGION_LENGTH__+0xe4>
    feea:	31 97       	sbiw	r30, 0x01	; 1
    feec:	af 01       	movw	r20, r30
    feee:	4a 19       	sub	r20, r10
    fef0:	5b 09       	sbc	r21, r11
    fef2:	b4 01       	movw	r22, r8
    fef4:	c5 01       	movw	r24, r10
    fef6:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
    fefa:	89 2b       	or	r24, r25
    fefc:	09 f0       	breq	.+2      	; 0xff00 <__DATA_REGION_LENGTH__+0x100>
    fefe:	32 c1       	rjmp	.+612    	; 0x10164 <__EEPROM_REGION_LENGTH__+0x164>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2619
  {
    mqtt_process_message++;
    ff00:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
    ff04:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
    ff08:	01 96       	adiw	r24, 0x01	; 1
    ff0a:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
    ff0e:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2621
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ff12:	f5 01       	movw	r30, r10
    ff14:	01 90       	ld	r0, Z+
    ff16:	00 20       	and	r0, r0
    ff18:	e9 f7       	brne	.-6      	; 0xff14 <__DATA_REGION_LENGTH__+0x114>
    ff1a:	31 97       	sbiw	r30, 0x01	; 1
    ff1c:	ea 19       	sub	r30, r10
    ff1e:	fb 09       	sbc	r31, r11
    ff20:	9e 2f       	mov	r25, r30
    ff22:	4e 2f       	mov	r20, r30
    ff24:	84 2f       	mov	r24, r20
    ff26:	89 1b       	sub	r24, r25
    ff28:	24 2f       	mov	r18, r20
    ff2a:	30 e0       	ldi	r19, 0x00	; 0
    ff2c:	d4 01       	movw	r26, r8
    ff2e:	0d 90       	ld	r0, X+
    ff30:	00 20       	and	r0, r0
    ff32:	e9 f7       	brne	.-6      	; 0xff2e <__DATA_REGION_LENGTH__+0x12e>
    ff34:	11 97       	sbiw	r26, 0x01	; 1
    ff36:	a8 19       	sub	r26, r8
    ff38:	b9 09       	sbc	r27, r9
    ff3a:	2a 17       	cp	r18, r26
    ff3c:	3b 07       	cpc	r19, r27
    ff3e:	08 f0       	brcs	.+2      	; 0xff42 <__DATA_REGION_LENGTH__+0x142>
    ff40:	41 c0       	rjmp	.+130    	; 0xffc4 <__DATA_REGION_LENGTH__+0x1c4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2623
    {
      str1[cnt] = topic[f];
    ff42:	d5 01       	movw	r26, r10
    ff44:	a8 0f       	add	r26, r24
    ff46:	b1 1d       	adc	r27, r1
    ff48:	28 0d       	add	r18, r8
    ff4a:	39 1d       	adc	r19, r9
    ff4c:	f9 01       	movw	r30, r18
    ff4e:	80 81       	ld	r24, Z
    ff50:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2624
      str1[cnt + 1] = 0;
    ff52:	11 96       	adiw	r26, 0x01	; 1
    ff54:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2621
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ff56:	4f 5f       	subi	r20, 0xFF	; 255
    ff58:	e5 cf       	rjmp	.-54     	; 0xff24 <__DATA_REGION_LENGTH__+0x124>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2567
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    ff5a:	27 e0       	ldi	r18, 0x07	; 7
    ff5c:	27 15       	cp	r18, r7
    ff5e:	08 f4       	brcc	.+2      	; 0xff62 <__DATA_REGION_LENGTH__+0x162>
    ff60:	3d cf       	rjmp	.-390    	; 0xfddc <mqtt_callback(char*, unsigned char*, unsigned int)+0xb34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2569
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    ff62:	81 e0       	ldi	r24, 0x01	; 1
    ff64:	f8 12       	cpse	r15, r24
    ff66:	20 c0       	rjmp	.+64     	; 0xffa8 <__DATA_REGION_LENGTH__+0x1a8>
    ff68:	6f e0       	ldi	r22, 0x0F	; 15
    ff6a:	74 e0       	ldi	r23, 0x04	; 4
    ff6c:	c8 01       	movw	r24, r16
    ff6e:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    ff72:	89 2b       	or	r24, r25
    ff74:	29 f4       	brne	.+10     	; 0xff80 <__DATA_REGION_LENGTH__+0x180>
    ff76:	6f ee       	ldi	r22, 0xEF	; 239
    ff78:	78 e0       	ldi	r23, 0x08	; 8
    ff7a:	87 2d       	mov	r24, r7
    ff7c:	0e 94 52 54 	call	0xa8a4	; 0xa8a4 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2570
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    ff80:	69 e1       	ldi	r22, 0x19	; 25
    ff82:	74 e0       	ldi	r23, 0x04	; 4
    ff84:	c8 01       	movw	r24, r16
    ff86:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
    ff8a:	89 2b       	or	r24, r25
    ff8c:	69 f4       	brne	.+26     	; 0xffa8 <__DATA_REGION_LENGTH__+0x1a8>
    ff8e:	8f ee       	ldi	r24, 0xEF	; 239
    ff90:	98 e0       	ldi	r25, 0x08	; 8
    ff92:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    ff96:	7e 9c       	mul	r7, r14
    ff98:	90 01       	movw	r18, r0
    ff9a:	11 24       	eor	r1, r1
    ff9c:	68 2f       	mov	r22, r24
    ff9e:	c9 01       	movw	r24, r18
    ffa0:	8f 50       	subi	r24, 0x0F	; 15
    ffa2:	9e 4f       	sbci	r25, 0xFE	; 254
    ffa4:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2577
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
    ffa8:	6a e8       	ldi	r22, 0x8A	; 138
    ffaa:	75 e0       	ldi	r23, 0x05	; 5
    ffac:	90 e0       	ldi	r25, 0x00	; 0
    ffae:	80 e0       	ldi	r24, 0x00	; 0
    ffb0:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
    ffb4:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2578
      cnt++;
    ffb6:	f3 94       	inc	r15
    ffb8:	04 cf       	rjmp	.-504    	; 0xfdc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2610
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    ffba:	82 e3       	ldi	r24, 0x32	; 50
    ffbc:	95 e0       	ldi	r25, 0x05	; 5
    ffbe:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <log_error(PubSubClient*, char*) [clone .constprop.117]>
    ffc2:	80 cf       	rjmp	.-256    	; 0xfec4 <__DATA_REGION_LENGTH__+0xc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2628
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    ffc4:	6a e8       	ldi	r22, 0x8A	; 138
    ffc6:	75 e0       	ldi	r23, 0x05	; 5
    ffc8:	c5 01       	movw	r24, r10
    ffca:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
    ffce:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2297
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    ffd0:	61 2c       	mov	r6, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2627
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    ffd2:	31 2c       	mov	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2629
    pch = strtok (str1, "/");
    while (pch != NULL)
    ffd4:	41 14       	cp	r4, r1
    ffd6:	51 04       	cpc	r5, r1
    ffd8:	09 f4       	brne	.+2      	; 0xffdc <__DATA_REGION_LENGTH__+0x1dc>
    ffda:	c4 c0       	rjmp	.+392    	; 0x10164 <__EEPROM_REGION_LENGTH__+0x164>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2631
    {
      if (cnt == 0) id = atoi(pch);
    ffdc:	31 10       	cpse	r3, r1
    ffde:	82 c0       	rjmp	.+260    	; 0x100e4 <__EEPROM_REGION_LENGTH__+0xe4>
    ffe0:	c2 01       	movw	r24, r4
    ffe2:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
    ffe6:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2633
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    ffe8:	27 e0       	ldi	r18, 0x07	; 7
    ffea:	27 15       	cp	r18, r7
    ffec:	08 f4       	brcc	.+2      	; 0xfff0 <__DATA_REGION_LENGTH__+0x1f0>
    ffee:	b6 c0       	rjmp	.+364    	; 0x1015c <__EEPROM_REGION_LENGTH__+0x15c>
    fff0:	8a e0       	ldi	r24, 0x0A	; 10
    fff2:	86 15       	cp	r24, r6
    fff4:	08 f4       	brcc	.+2      	; 0xfff8 <__DATA_REGION_LENGTH__+0x1f8>
    fff6:	b2 c0       	rjmp	.+356    	; 0x1015c <__EEPROM_REGION_LENGTH__+0x15c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2635
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    fff8:	92 e0       	ldi	r25, 0x02	; 2
    fffa:	39 12       	cpse	r3, r25
    fffc:	a6 c0       	rjmp	.+332    	; 0x1014a <__EEPROM_REGION_LENGTH__+0x14a>
    fffe:	69 e1       	ldi	r22, 0x19	; 25
   10000:	74 e0       	ldi	r23, 0x04	; 4
   10002:	c2 01       	movw	r24, r4
   10004:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10008:	89 2b       	or	r24, r25
   1000a:	c1 f5       	brne	.+112    	; 0x1007c <__EEPROM_REGION_LENGTH__+0x7c>
   1000c:	8f ee       	ldi	r24, 0xEF	; 239
   1000e:	98 e0       	ldi	r25, 0x08	; 8
   10010:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   10014:	28 2e       	mov	r2, r24
thermostat_program_set_interval_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:379

/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   10016:	de 01       	movw	r26, r28
   10018:	a8 5b       	subi	r26, 0xB8	; 184
   1001a:	bf 4f       	sbci	r27, 0xFF	; 255
   1001c:	6d 01       	movw	r12, r26
   1001e:	fe 01       	movw	r30, r28
   10020:	e8 5d       	subi	r30, 0xD8	; 216
   10022:	fe 4f       	sbci	r31, 0xFE	; 254
   10024:	7f 01       	movw	r14, r30
   10026:	8e 01       	movw	r16, r28
   10028:	0d 5b       	subi	r16, 0xBD	; 189
   1002a:	1e 4f       	sbci	r17, 0xFE	; 254
   1002c:	9e 01       	movw	r18, r28
   1002e:	2c 5b       	subi	r18, 0xBC	; 188
   10030:	3e 4f       	sbci	r19, 0xFE	; 254
   10032:	ae 01       	movw	r20, r28
   10034:	4b 5b       	subi	r20, 0xBB	; 187
   10036:	5e 4f       	sbci	r21, 0xFE	; 254
   10038:	66 2d       	mov	r22, r6
   1003a:	87 2d       	mov	r24, r7
   1003c:	0e 94 d2 6a 	call	0xd5a4	; 0xd5a4 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:380
  if (active != set_active)
   10040:	29 96       	adiw	r28, 0x09	; 9
   10042:	8f ad       	ldd	r24, Y+63	; 0x3f
   10044:	29 97       	sbiw	r28, 0x09	; 9
   10046:	28 16       	cp	r2, r24
   10048:	c9 f0       	breq	.+50     	; 0x1007c <__EEPROM_REGION_LENGTH__+0x7c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
   1004a:	c2 2c       	mov	r12, r2
   1004c:	c8 5d       	subi	r28, 0xD8	; 216
   1004e:	de 4f       	sbci	r29, 0xFE	; 254
   10050:	e8 80       	ld	r14, Y
   10052:	c8 52       	subi	r28, 0x28	; 40
   10054:	d1 40       	sbci	r29, 0x01	; 1
   10056:	cd 5b       	subi	r28, 0xBD	; 189
   10058:	de 4f       	sbci	r29, 0xFE	; 254
   1005a:	08 81       	ld	r16, Y
   1005c:	c3 54       	subi	r28, 0x43	; 67
   1005e:	d1 40       	sbci	r29, 0x01	; 1
   10060:	cc 5b       	subi	r28, 0xBC	; 188
   10062:	de 4f       	sbci	r29, 0xFE	; 254
   10064:	28 81       	ld	r18, Y
   10066:	c4 54       	subi	r28, 0x44	; 68
   10068:	d1 40       	sbci	r29, 0x01	; 1
   1006a:	cb 5b       	subi	r28, 0xBB	; 187
   1006c:	de 4f       	sbci	r29, 0xFE	; 254
   1006e:	48 81       	ld	r20, Y
   10070:	c5 54       	subi	r28, 0x45	; 69
   10072:	d1 40       	sbci	r29, 0x01	; 1
   10074:	66 2d       	mov	r22, r6
   10076:	87 2d       	mov	r24, r7
   10078:	0e 94 16 54 	call	0xa82c	; 0xa82c <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2636
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
   1007c:	61 e9       	ldi	r22, 0x91	; 145
   1007e:	76 e0       	ldi	r23, 0x06	; 6
   10080:	c2 01       	movw	r24, r4
   10082:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10086:	89 2b       	or	r24, r25
   10088:	49 f4       	brne	.+18     	; 0x1009c <__EEPROM_REGION_LENGTH__+0x9c>
   1008a:	8f ee       	ldi	r24, 0xEF	; 239
   1008c:	98 e0       	ldi	r25, 0x08	; 8
   1008e:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   10092:	ac 01       	movw	r20, r24
   10094:	66 2d       	mov	r22, r6
   10096:	87 2d       	mov	r24, r7
   10098:	0e 94 fa 53 	call	0xa7f4	; 0xa7f4 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2637
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
   1009c:	6f ed       	ldi	r22, 0xDF	; 223
   1009e:	76 e0       	ldi	r23, 0x06	; 6
   100a0:	c2 01       	movw	r24, r4
   100a2:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   100a6:	89 2b       	or	r24, r25
   100a8:	09 f0       	breq	.+2      	; 0x100ac <__EEPROM_REGION_LENGTH__+0xac>
   100aa:	4f c0       	rjmp	.+158    	; 0x1014a <__EEPROM_REGION_LENGTH__+0x14a>
thermostat_program_set_parse_interval():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:343
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
   100ac:	68 e5       	ldi	r22, 0x58	; 88
   100ae:	75 e0       	ldi	r23, 0x05	; 5
   100b0:	8f ee       	ldi	r24, 0xEF	; 239
   100b2:	98 e0       	ldi	r25, 0x08	; 8
   100b4:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
   100b8:	f1 2c       	mov	r15, r1
   100ba:	c1 2c       	mov	r12, r1
   100bc:	e1 2c       	mov	r14, r1
   100be:	00 e0       	ldi	r16, 0x00	; 0
   100c0:	51 2c       	mov	r5, r1
   100c2:	d1 2c       	mov	r13, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
   100c4:	10 e0       	ldi	r17, 0x00	; 0
thermostat_program_set_parse_interval():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
   100c6:	00 97       	sbiw	r24, 0x00	; 0
   100c8:	99 f1       	breq	.+102    	; 0x10130 <__EEPROM_REGION_LENGTH__+0x130>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
   100ca:	11 11       	cpse	r17, r1
   100cc:	13 c0       	rjmp	.+38     	; 0x100f4 <__EEPROM_REGION_LENGTH__+0xf4>
   100ce:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   100d2:	d8 2e       	mov	r13, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
   100d4:	68 e5       	ldi	r22, 0x58	; 88
   100d6:	75 e0       	ldi	r23, 0x05	; 5
   100d8:	90 e0       	ldi	r25, 0x00	; 0
   100da:	80 e0       	ldi	r24, 0x00	; 0
   100dc:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:354
    cnt++;
   100e0:	1f 5f       	subi	r17, 0xFF	; 255
   100e2:	f1 cf       	rjmp	.-30     	; 0x100c6 <__EEPROM_REGION_LENGTH__+0xc6>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2632
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
   100e4:	f1 e0       	ldi	r31, 0x01	; 1
   100e6:	3f 12       	cpse	r3, r31
   100e8:	7f cf       	rjmp	.-258    	; 0xffe8 <__DATA_REGION_LENGTH__+0x1e8>
   100ea:	c2 01       	movw	r24, r4
   100ec:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   100f0:	68 2e       	mov	r6, r24
   100f2:	7a cf       	rjmp	.-268    	; 0xffe8 <__DATA_REGION_LENGTH__+0x1e8>
thermostat_program_set_parse_interval():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:347
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
   100f4:	11 30       	cpi	r17, 0x01	; 1
   100f6:	21 f4       	brne	.+8      	; 0x10100 <__EEPROM_REGION_LENGTH__+0x100>
   100f8:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   100fc:	58 2e       	mov	r5, r24
   100fe:	ea cf       	rjmp	.-44     	; 0x100d4 <__EEPROM_REGION_LENGTH__+0xd4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
   10100:	12 30       	cpi	r17, 0x02	; 2
   10102:	21 f4       	brne	.+8      	; 0x1010c <__EEPROM_REGION_LENGTH__+0x10c>
   10104:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   10108:	08 2f       	mov	r16, r24
   1010a:	e4 cf       	rjmp	.-56     	; 0x100d4 <__EEPROM_REGION_LENGTH__+0xd4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
   1010c:	13 30       	cpi	r17, 0x03	; 3
   1010e:	21 f4       	brne	.+8      	; 0x10118 <__EEPROM_REGION_LENGTH__+0x118>
   10110:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   10114:	e8 2e       	mov	r14, r24
   10116:	de cf       	rjmp	.-68     	; 0x100d4 <__EEPROM_REGION_LENGTH__+0xd4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
   10118:	14 30       	cpi	r17, 0x04	; 4
   1011a:	21 f4       	brne	.+8      	; 0x10124 <__EEPROM_REGION_LENGTH__+0x124>
   1011c:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   10120:	f8 2e       	mov	r15, r24
   10122:	d8 cf       	rjmp	.-80     	; 0x100d4 <__EEPROM_REGION_LENGTH__+0xd4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
   10124:	15 30       	cpi	r17, 0x05	; 5
   10126:	b1 f6       	brne	.-84     	; 0x100d4 <__EEPROM_REGION_LENGTH__+0xd4>
   10128:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   1012c:	c8 2e       	mov	r12, r24
   1012e:	d2 cf       	rjmp	.-92     	; 0x100d4 <__EEPROM_REGION_LENGTH__+0xd4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
   10130:	16 30       	cpi	r17, 0x06	; 6
   10132:	59 f4       	brne	.+22     	; 0x1014a <__EEPROM_REGION_LENGTH__+0x14a>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
   10134:	25 2d       	mov	r18, r5
   10136:	4d 2d       	mov	r20, r13
   10138:	66 2d       	mov	r22, r6
   1013a:	87 2d       	mov	r24, r7
   1013c:	0e 94 16 54 	call	0xa82c	; 0xa82c <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
   10140:	4f 2d       	mov	r20, r15
   10142:	66 2d       	mov	r22, r6
   10144:	87 2d       	mov	r24, r7
   10146:	0e 94 ec 53 	call	0xa7d8	; 0xa7d8 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2644
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
   1014a:	6a e8       	ldi	r22, 0x8A	; 138
   1014c:	75 e0       	ldi	r23, 0x05	; 5
   1014e:	90 e0       	ldi	r25, 0x00	; 0
   10150:	80 e0       	ldi	r24, 0x00	; 0
   10152:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
   10156:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2645
      cnt++;
   10158:	33 94       	inc	r3
   1015a:	3c cf       	rjmp	.-392    	; 0xffd4 <__DATA_REGION_LENGTH__+0x1d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2641
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
   1015c:	8a e5       	ldi	r24, 0x5A	; 90
   1015e:	95 e0       	ldi	r25, 0x05	; 5
   10160:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <log_error(PubSubClient*, char*) [clone .constprop.117]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
   10164:	60 e4       	ldi	r22, 0x40	; 64
   10166:	7c e5       	ldi	r23, 0x5C	; 92
   10168:	c5 01       	movw	r24, r10
   1016a:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2651
  strcat(str1, device.nazev);
   1016e:	6a ef       	ldi	r22, 0xFA	; 250
   10170:	7d e0       	ldi	r23, 0x0D	; 13
   10172:	c5 01       	movw	r24, r10
   10174:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2652
  strcat(str1, "/ring/default");
   10178:	63 e7       	ldi	r22, 0x73	; 115
   1017a:	75 e0       	ldi	r23, 0x05	; 5
   1017c:	c5 01       	movw	r24, r10
   1017e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2653
  if (strcmp(str1, topic) == 0)
   10182:	b4 01       	movw	r22, r8
   10184:	c5 01       	movw	r24, r10
   10186:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   1018a:	89 2b       	or	r24, r25
   1018c:	a1 f4       	brne	.+40     	; 0x101b6 <__EEPROM_REGION_LENGTH__+0x1b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2655
  {
    mqtt_process_message++;
   1018e:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
   10192:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
   10196:	01 96       	adiw	r24, 0x01	; 1
   10198:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
   1019c:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2656
    default_ring = atoi(my_payload);
   101a0:	8f ee       	ldi	r24, 0xEF	; 239
   101a2:	98 e0       	ldi	r25, 0x08	; 8
   101a4:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   101a8:	80 93 64 0b 	sts	0x0B64, r24	; 0x800b64 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2232
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
   101ac:	68 2f       	mov	r22, r24
   101ae:	8c e5       	ldi	r24, 0x5C	; 92
   101b0:	90 e0       	ldi	r25, 0x00	; 0
   101b2:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2661
    default_ring = atoi(my_payload);
    set_default_ring(default_ring);
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
   101b6:	60 e4       	ldi	r22, 0x40	; 64
   101b8:	7c e5       	ldi	r23, 0x5C	; 92
   101ba:	c5 01       	movw	r24, r10
   101bc:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2662
  strcat(str1, device.nazev);
   101c0:	6a ef       	ldi	r22, 0xFA	; 250
   101c2:	7d e0       	ldi	r23, 0x0D	; 13
   101c4:	c5 01       	movw	r24, r10
   101c6:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2663
  strcat(str1, "/ring/get/");
   101ca:	61 e8       	ldi	r22, 0x81	; 129
   101cc:	75 e0       	ldi	r23, 0x05	; 5
   101ce:	c5 01       	movw	r24, r10
   101d0:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2664
  if (strncmp(str1, topic, strlen(str1)) == 0)
   101d4:	f5 01       	movw	r30, r10
   101d6:	01 90       	ld	r0, Z+
   101d8:	00 20       	and	r0, r0
   101da:	e9 f7       	brne	.-6      	; 0x101d6 <__EEPROM_REGION_LENGTH__+0x1d6>
   101dc:	31 97       	sbiw	r30, 0x01	; 1
   101de:	8f 01       	movw	r16, r30
   101e0:	0a 19       	sub	r16, r10
   101e2:	1b 09       	sbc	r17, r11
   101e4:	a8 01       	movw	r20, r16
   101e6:	b4 01       	movw	r22, r8
   101e8:	c5 01       	movw	r24, r10
   101ea:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
   101ee:	89 2b       	or	r24, r25
   101f0:	09 f0       	breq	.+2      	; 0x101f4 <__EEPROM_REGION_LENGTH__+0x1f4>
   101f2:	4c c0       	rjmp	.+152    	; 0x1028c <__EEPROM_REGION_LENGTH__+0x28c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2667
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   101f4:	90 2f       	mov	r25, r16
   101f6:	80 2f       	mov	r24, r16
   101f8:	89 1b       	sub	r24, r25
   101fa:	20 2f       	mov	r18, r16
   101fc:	30 e0       	ldi	r19, 0x00	; 0
   101fe:	f4 01       	movw	r30, r8
   10200:	01 90       	ld	r0, Z+
   10202:	00 20       	and	r0, r0
   10204:	e9 f7       	brne	.-6      	; 0x10200 <__EEPROM_REGION_LENGTH__+0x200>
   10206:	31 97       	sbiw	r30, 0x01	; 1
   10208:	e8 19       	sub	r30, r8
   1020a:	f9 09       	sbc	r31, r9
   1020c:	2e 17       	cp	r18, r30
   1020e:	3f 07       	cpc	r19, r31
   10210:	70 f4       	brcc	.+28     	; 0x1022e <__EEPROM_REGION_LENGTH__+0x22e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2669
    {
      str1[cnt] = topic[f];
   10212:	e8 ec       	ldi	r30, 0xC8	; 200
   10214:	f0 e0       	ldi	r31, 0x00	; 0
   10216:	ec 0f       	add	r30, r28
   10218:	fd 1f       	adc	r31, r29
   1021a:	e8 0f       	add	r30, r24
   1021c:	f1 1d       	adc	r31, r1
   1021e:	28 0d       	add	r18, r8
   10220:	39 1d       	adc	r19, r9
   10222:	d9 01       	movw	r26, r18
   10224:	8c 91       	ld	r24, X
   10226:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2670
      str1[cnt + 1] = 0;
   10228:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2667
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   1022a:	0f 5f       	subi	r16, 0xFF	; 255
   1022c:	e4 cf       	rjmp	.-56     	; 0x101f6 <__EEPROM_REGION_LENGTH__+0x1f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2674
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   1022e:	6a e8       	ldi	r22, 0x8A	; 138
   10230:	75 e0       	ldi	r23, 0x05	; 5
   10232:	ce 01       	movw	r24, r28
   10234:	88 53       	subi	r24, 0x38	; 56
   10236:	9f 4f       	sbci	r25, 0xFF	; 255
   10238:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2673
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   1023c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2675
    pch = strtok (str1, "/");
    while (pch != NULL)
   1023e:	00 97       	sbiw	r24, 0x00	; 0
   10240:	29 f1       	breq	.+74     	; 0x1028c <__EEPROM_REGION_LENGTH__+0x28c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677
    {
      if (cnt == 0) id = atoi(my_payload);
   10242:	11 11       	cpse	r17, r1
   10244:	0d c0       	rjmp	.+26     	; 0x10260 <__EEPROM_REGION_LENGTH__+0x260>
   10246:	8f ee       	ldi	r24, 0xEF	; 239
   10248:	98 e0       	ldi	r25, 0x08	; 8
   1024a:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   1024e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
      if (id < MAX_THERMOSTAT)
   10250:	b4 e0       	ldi	r27, 0x04	; 4
   10252:	b8 17       	cp	r27, r24
   10254:	98 f4       	brcc	.+38     	; 0x1027c <__EEPROM_REGION_LENGTH__+0x27c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2684
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
   10256:	8c e8       	ldi	r24, 0x8C	; 140
   10258:	95 e0       	ldi	r25, 0x05	; 5
   1025a:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <log_error(PubSubClient*, char*) [clone .constprop.117]>
   1025e:	0e c0       	rjmp	.+28     	; 0x1027c <__EEPROM_REGION_LENGTH__+0x27c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
   10260:	e4 e0       	ldi	r30, 0x04	; 4
   10262:	e7 15       	cp	r30, r7
   10264:	c0 f3       	brcs	.-16     	; 0x10256 <__EEPROM_REGION_LENGTH__+0x256>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2680
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
   10266:	11 30       	cpi	r17, 0x01	; 1
   10268:	49 f4       	brne	.+18     	; 0x1027c <__EEPROM_REGION_LENGTH__+0x27c>
   1026a:	62 e0       	ldi	r22, 0x02	; 2
   1026c:	74 e0       	ldi	r23, 0x04	; 4
   1026e:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10272:	89 2b       	or	r24, r25
   10274:	19 f4       	brne	.+6      	; 0x1027c <__EEPROM_REGION_LENGTH__+0x27c>
   10276:	87 2d       	mov	r24, r7
   10278:	0e 94 4a 73 	call	0xe694	; 0xe694 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2686
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
   1027c:	6a e8       	ldi	r22, 0x8A	; 138
   1027e:	75 e0       	ldi	r23, 0x05	; 5
   10280:	90 e0       	ldi	r25, 0x00	; 0
   10282:	80 e0       	ldi	r24, 0x00	; 0
   10284:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2687
      cnt++;
   10288:	1f 5f       	subi	r17, 0xFF	; 255
   1028a:	d9 cf       	rjmp	.-78     	; 0x1023e <__EEPROM_REGION_LENGTH__+0x23e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2706
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
   1028c:	60 e4       	ldi	r22, 0x40	; 64
   1028e:	7c e5       	ldi	r23, 0x5C	; 92
   10290:	c5 01       	movw	r24, r10
   10292:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2707
  strcat(str1, device.nazev);
   10296:	6a ef       	ldi	r22, 0xFA	; 250
   10298:	7d e0       	ldi	r23, 0x0D	; 13
   1029a:	c5 01       	movw	r24, r10
   1029c:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2708
  strcat(str1, "/ring/set/");
   102a0:	6c e9       	ldi	r22, 0x9C	; 156
   102a2:	75 e0       	ldi	r23, 0x05	; 5
   102a4:	c5 01       	movw	r24, r10
   102a6:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2709
  if (strncmp(str1, topic, strlen(str1)) == 0)
   102aa:	f5 01       	movw	r30, r10
   102ac:	01 90       	ld	r0, Z+
   102ae:	00 20       	and	r0, r0
   102b0:	e9 f7       	brne	.-6      	; 0x102ac <__EEPROM_REGION_LENGTH__+0x2ac>
   102b2:	31 97       	sbiw	r30, 0x01	; 1
   102b4:	8f 01       	movw	r16, r30
   102b6:	0a 19       	sub	r16, r10
   102b8:	1b 09       	sbc	r17, r11
   102ba:	a8 01       	movw	r20, r16
   102bc:	b4 01       	movw	r22, r8
   102be:	c5 01       	movw	r24, r10
   102c0:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
   102c4:	89 2b       	or	r24, r25
   102c6:	09 f0       	breq	.+2      	; 0x102ca <__EEPROM_REGION_LENGTH__+0x2ca>
   102c8:	c2 c1       	rjmp	.+900    	; 0x1064e <__EEPROM_REGION_LENGTH__+0x64e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2712
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   102ca:	90 2f       	mov	r25, r16
   102cc:	80 2f       	mov	r24, r16
   102ce:	89 1b       	sub	r24, r25
   102d0:	20 2f       	mov	r18, r16
   102d2:	30 e0       	ldi	r19, 0x00	; 0
   102d4:	f4 01       	movw	r30, r8
   102d6:	01 90       	ld	r0, Z+
   102d8:	00 20       	and	r0, r0
   102da:	e9 f7       	brne	.-6      	; 0x102d6 <__EEPROM_REGION_LENGTH__+0x2d6>
   102dc:	31 97       	sbiw	r30, 0x01	; 1
   102de:	e8 19       	sub	r30, r8
   102e0:	f9 09       	sbc	r31, r9
   102e2:	2e 17       	cp	r18, r30
   102e4:	3f 07       	cpc	r19, r31
   102e6:	70 f4       	brcc	.+28     	; 0x10304 <__EEPROM_REGION_LENGTH__+0x304>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2714
    {
      str1[cnt] = topic[f];
   102e8:	e8 ec       	ldi	r30, 0xC8	; 200
   102ea:	f0 e0       	ldi	r31, 0x00	; 0
   102ec:	ec 0f       	add	r30, r28
   102ee:	fd 1f       	adc	r31, r29
   102f0:	e8 0f       	add	r30, r24
   102f2:	f1 1d       	adc	r31, r1
   102f4:	28 0d       	add	r18, r8
   102f6:	39 1d       	adc	r19, r9
   102f8:	d9 01       	movw	r26, r18
   102fa:	8c 91       	ld	r24, X
   102fc:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2715
      str1[cnt + 1] = 0;
   102fe:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2712
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   10300:	0f 5f       	subi	r16, 0xFF	; 255
   10302:	e4 cf       	rjmp	.-56     	; 0x102cc <__EEPROM_REGION_LENGTH__+0x2cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2719
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   10304:	6a e8       	ldi	r22, 0x8A	; 138
   10306:	75 e0       	ldi	r23, 0x05	; 5
   10308:	ce 01       	movw	r24, r28
   1030a:	88 53       	subi	r24, 0x38	; 56
   1030c:	9f 4f       	sbci	r25, 0xFF	; 255
   1030e:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
   10312:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2718
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   10314:	d1 2c       	mov	r13, r1
thermostat_ring_set_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
   10316:	51 e2       	ldi	r21, 0x21	; 33
   10318:	e5 2e       	mov	r14, r21
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2720
    pch = strtok (str1, "/");
    while (pch != NULL)
   1031a:	01 15       	cp	r16, r1
   1031c:	11 05       	cpc	r17, r1
   1031e:	09 f4       	brne	.+2      	; 0x10322 <__EEPROM_REGION_LENGTH__+0x322>
   10320:	96 c1       	rjmp	.+812    	; 0x1064e <__EEPROM_REGION_LENGTH__+0x64e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2722
    {
      if (cnt == 0) id = atoi(pch);
   10322:	d1 10       	cpse	r13, r1
   10324:	0d c0       	rjmp	.+26     	; 0x10340 <__EEPROM_REGION_LENGTH__+0x340>
   10326:	c8 01       	movw	r24, r16
   10328:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   1032c:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2723
      if (id < MAX_THERMOSTAT)
   1032e:	b4 e0       	ldi	r27, 0x04	; 4
   10330:	b8 17       	cp	r27, r24
   10332:	08 f0       	brcs	.+2      	; 0x10336 <__EEPROM_REGION_LENGTH__+0x336>
   10334:	83 c1       	rjmp	.+774    	; 0x1063c <__EEPROM_REGION_LENGTH__+0x63c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2760
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
   10336:	8c e8       	ldi	r24, 0x8C	; 140
   10338:	95 e0       	ldi	r25, 0x05	; 5
   1033a:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <log_error(PubSubClient*, char*) [clone .constprop.117]>
   1033e:	7e c1       	rjmp	.+764    	; 0x1063c <__EEPROM_REGION_LENGTH__+0x63c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2723
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
   10340:	e4 e0       	ldi	r30, 0x04	; 4
   10342:	e7 15       	cp	r30, r7
   10344:	c0 f3       	brcs	.-16     	; 0x10336 <__EEPROM_REGION_LENGTH__+0x336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2725
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
   10346:	f1 e0       	ldi	r31, 0x01	; 1
   10348:	df 12       	cpse	r13, r31
   1034a:	78 c1       	rjmp	.+752    	; 0x1063c <__EEPROM_REGION_LENGTH__+0x63c>
   1034c:	6f e0       	ldi	r22, 0x0F	; 15
   1034e:	74 e0       	ldi	r23, 0x04	; 4
   10350:	c8 01       	movw	r24, r16
   10352:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10356:	89 2b       	or	r24, r25
   10358:	29 f4       	brne	.+10     	; 0x10364 <__EEPROM_REGION_LENGTH__+0x364>
   1035a:	6f ee       	ldi	r22, 0xEF	; 239
   1035c:	78 e0       	ldi	r23, 0x08	; 8
   1035e:	87 2d       	mov	r24, r7
   10360:	0e 94 d5 54 	call	0xa9aa	; 0xa9aa <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2726
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
   10364:	6b e9       	ldi	r22, 0x9B	; 155
   10366:	76 e0       	ldi	r23, 0x06	; 6
   10368:	c8 01       	movw	r24, r16
   1036a:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   1036e:	89 2b       	or	r24, r25
   10370:	81 f4       	brne	.+32     	; 0x10392 <__EEPROM_REGION_LENGTH__+0x392>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2727
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
   10372:	8f ee       	ldi	r24, 0xEF	; 239
   10374:	98 e0       	ldi	r25, 0x08	; 8
   10376:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   1037a:	88 30       	cpi	r24, 0x08	; 8
   1037c:	91 05       	cpc	r25, r1
   1037e:	4c f4       	brge	.+18     	; 0x10392 <__EEPROM_REGION_LENGTH__+0x392>
thermostat_ring_set_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
   10380:	7e 9c       	mul	r7, r14
   10382:	90 01       	movw	r18, r0
   10384:	11 24       	eor	r1, r1
   10386:	68 2f       	mov	r22, r24
   10388:	c9 01       	movw	r24, r18
   1038a:	85 5a       	subi	r24, 0xA5	; 165
   1038c:	9e 4f       	sbci	r25, 0xFE	; 254
   1038e:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2729
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
   10392:	63 ea       	ldi	r22, 0xA3	; 163
   10394:	76 e0       	ldi	r23, 0x06	; 6
   10396:	c8 01       	movw	r24, r16
   10398:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   1039c:	89 2b       	or	r24, r25
   1039e:	79 f4       	brne	.+30     	; 0x103be <__EEPROM_REGION_LENGTH__+0x3be>
   103a0:	8f ee       	ldi	r24, 0xEF	; 239
   103a2:	98 e0       	ldi	r25, 0x08	; 8
   103a4:	0e 94 bd d4 	call	0x1a97a	; 0x1a97a <atof>
   103a8:	20 e0       	ldi	r18, 0x00	; 0
   103aa:	30 e0       	ldi	r19, 0x00	; 0
   103ac:	40 e2       	ldi	r20, 0x20	; 32
   103ae:	51 e4       	ldi	r21, 0x41	; 65
   103b0:	0e 94 fd dd 	call	0x1bbfa	; 0x1bbfa <__mulsf3>
   103b4:	0e 94 43 e0 	call	0x1c086	; 0x1c086 <__fixsfsi>
   103b8:	87 2d       	mov	r24, r7
   103ba:	0e 94 be 54 	call	0xa97c	; 0xa97c <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2730
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
   103be:	61 e9       	ldi	r22, 0x91	; 145
   103c0:	76 e0       	ldi	r23, 0x06	; 6
   103c2:	c8 01       	movw	r24, r16
   103c4:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   103c8:	89 2b       	or	r24, r25
   103ca:	41 f4       	brne	.+16     	; 0x103dc <__EEPROM_REGION_LENGTH__+0x3dc>
   103cc:	8f ee       	ldi	r24, 0xEF	; 239
   103ce:	98 e0       	ldi	r25, 0x08	; 8
   103d0:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   103d4:	bc 01       	movw	r22, r24
   103d6:	87 2d       	mov	r24, r7
   103d8:	0e 94 be 54 	call	0xa97c	; 0xa97c <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
   103dc:	6f ea       	ldi	r22, 0xAF	; 175
   103de:	76 e0       	ldi	r23, 0x06	; 6
   103e0:	c8 01       	movw	r24, r16
   103e2:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   103e6:	89 2b       	or	r24, r25
   103e8:	09 f0       	breq	.+2      	; 0x103ec <__EEPROM_REGION_LENGTH__+0x3ec>
   103ea:	56 c0       	rjmp	.+172    	; 0x10498 <__EEPROM_REGION_LENGTH__+0x498>
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3459
/// funkce prevadi ciselnou hodnotu na skutecne pojmenovani
uint8_t convert_text_mode(char *str2)
{
  uint8_t mode = 0;
  if (strcmp(str2, "off") == 0) mode = TERM_MODE_OFF;
  if (strcmp(str2, "heat") == 0) mode = TERM_MODE_MAX;
   103ec:	68 ee       	ldi	r22, 0xE8	; 232
   103ee:	78 e0       	ldi	r23, 0x08	; 8
   103f0:	8f ee       	ldi	r24, 0xEF	; 239
   103f2:	98 e0       	ldi	r25, 0x08	; 8
   103f4:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   103f8:	ff 24       	eor	r15, r15
   103fa:	f3 94       	inc	r15
   103fc:	89 2b       	or	r24, r25
   103fe:	09 f0       	breq	.+2      	; 0x10402 <__EEPROM_REGION_LENGTH__+0x402>
   10400:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3460
  if (strcmp(str2, "manual") == 0) mode = TERM_MODE_MAN_HEAT;
   10402:	67 ea       	ldi	r22, 0xA7	; 167
   10404:	75 e0       	ldi	r23, 0x05	; 5
   10406:	8f ee       	ldi	r24, 0xEF	; 239
   10408:	98 e0       	ldi	r25, 0x08	; 8
   1040a:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   1040e:	89 2b       	or	r24, r25
   10410:	11 f4       	brne	.+4      	; 0x10416 <__EEPROM_REGION_LENGTH__+0x416>
_Z13mqtt_callbackPcPhj():
   10412:	43 e0       	ldi	r20, 0x03	; 3
   10414:	f4 2e       	mov	r15, r20
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3461
  if (strcmp(str2, "auto") == 0) mode = TERM_MODE_PROG;
   10416:	6e ea       	ldi	r22, 0xAE	; 174
   10418:	75 e0       	ldi	r23, 0x05	; 5
   1041a:	8f ee       	ldi	r24, 0xEF	; 239
   1041c:	98 e0       	ldi	r25, 0x08	; 8
   1041e:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10422:	89 2b       	or	r24, r25
   10424:	11 f4       	brne	.+4      	; 0x1042a <__EEPROM_REGION_LENGTH__+0x42a>
_Z13mqtt_callbackPcPhj():
   10426:	32 e0       	ldi	r19, 0x02	; 2
   10428:	f3 2e       	mov	r15, r19
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3462
  if (strcmp(str2, "cool") == 0) mode = TERM_MODE_CLIMATE_MAX;
   1042a:	63 ed       	ldi	r22, 0xD3	; 211
   1042c:	78 e0       	ldi	r23, 0x08	; 8
   1042e:	8f ee       	ldi	r24, 0xEF	; 239
   10430:	98 e0       	ldi	r25, 0x08	; 8
   10432:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10436:	89 2b       	or	r24, r25
   10438:	11 f4       	brne	.+4      	; 0x1043e <__EEPROM_REGION_LENGTH__+0x43e>
_Z13mqtt_callbackPcPhj():
   1043a:	24 e0       	ldi	r18, 0x04	; 4
   1043c:	f2 2e       	mov	r15, r18
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3463
  if (strcmp(str2, "fan_only") == 0) mode = TERM_MODE_FAN;
   1043e:	63 eb       	ldi	r22, 0xB3	; 179
   10440:	75 e0       	ldi	r23, 0x05	; 5
   10442:	8f ee       	ldi	r24, 0xEF	; 239
   10444:	98 e0       	ldi	r25, 0x08	; 8
   10446:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   1044a:	89 2b       	or	r24, r25
   1044c:	11 f4       	brne	.+4      	; 0x10452 <__EEPROM_REGION_LENGTH__+0x452>
_Z13mqtt_callbackPcPhj():
   1044e:	96 e0       	ldi	r25, 0x06	; 6
   10450:	f9 2e       	mov	r15, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
        {
          active = convert_text_mode(my_payload);
   10452:	ca 5b       	subi	r28, 0xBA	; 186
   10454:	de 4f       	sbci	r29, 0xFE	; 254
   10456:	f8 82       	st	Y, r15
   10458:	c6 54       	subi	r28, 0x46	; 70
   1045a:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_set_mode():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
   1045c:	7e 9c       	mul	r7, r14
   1045e:	c0 01       	movw	r24, r0
   10460:	11 24       	eor	r1, r1
   10462:	6f 2d       	mov	r22, r15
   10464:	82 5a       	subi	r24, 0xA2	; 162
   10466:	9e 4f       	sbci	r25, 0xFE	; 254
   10468:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
   1046c:	ca 5b       	subi	r28, 0xBA	; 186
   1046e:	de 4f       	sbci	r29, 0xFE	; 254
   10470:	88 81       	ld	r24, Y
   10472:	c6 54       	subi	r28, 0x46	; 70
   10474:	d1 40       	sbci	r29, 0x01	; 1
   10476:	83 30       	cpi	r24, 0x03	; 3
   10478:	21 f4       	brne	.+8      	; 0x10482 <__EEPROM_REGION_LENGTH__+0x482>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
   1047a:	60 e0       	ldi	r22, 0x00	; 0
   1047c:	87 2d       	mov	r24, r7
   1047e:	0e 94 83 d3 	call	0x1a706	; 0x1a706 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.114]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2737
          if (active == TERM_MODE_MAN_COOL)
   10482:	ca 5b       	subi	r28, 0xBA	; 186
   10484:	de 4f       	sbci	r29, 0xFE	; 254
   10486:	88 81       	ld	r24, Y
   10488:	c6 54       	subi	r28, 0x46	; 70
   1048a:	d1 40       	sbci	r29, 0x01	; 1
   1048c:	85 30       	cpi	r24, 0x05	; 5
   1048e:	21 f4       	brne	.+8      	; 0x10498 <__EEPROM_REGION_LENGTH__+0x498>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
   10490:	61 e0       	ldi	r22, 0x01	; 1
   10492:	87 2d       	mov	r24, r7
   10494:	0e 94 83 d3 	call	0x1a706	; 0x1a706 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.114]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2740
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
   10498:	64 eb       	ldi	r22, 0xB4	; 180
   1049a:	76 e0       	ldi	r23, 0x06	; 6
   1049c:	c8 01       	movw	r24, r16
   1049e:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   104a2:	89 2b       	or	r24, r25
   104a4:	41 f5       	brne	.+80     	; 0x104f6 <__EEPROM_REGION_LENGTH__+0x4f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2742
        {
          active = atoi(my_payload);
   104a6:	8f ee       	ldi	r24, 0xEF	; 239
   104a8:	98 e0       	ldi	r25, 0x08	; 8
   104aa:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   104ae:	ca 5b       	subi	r28, 0xBA	; 186
   104b0:	de 4f       	sbci	r29, 0xFE	; 254
   104b2:	88 83       	st	Y, r24
   104b4:	c6 54       	subi	r28, 0x46	; 70
   104b6:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_set_mode():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:180
   104b8:	7e 9c       	mul	r7, r14
   104ba:	90 01       	movw	r18, r0
   104bc:	11 24       	eor	r1, r1
   104be:	68 2f       	mov	r22, r24
   104c0:	c9 01       	movw	r24, r18
   104c2:	82 5a       	subi	r24, 0xA2	; 162
   104c4:	9e 4f       	sbci	r25, 0xFE	; 254
   104c6:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
   104ca:	ca 5b       	subi	r28, 0xBA	; 186
   104cc:	de 4f       	sbci	r29, 0xFE	; 254
   104ce:	88 81       	ld	r24, Y
   104d0:	c6 54       	subi	r28, 0x46	; 70
   104d2:	d1 40       	sbci	r29, 0x01	; 1
   104d4:	83 30       	cpi	r24, 0x03	; 3
   104d6:	21 f4       	brne	.+8      	; 0x104e0 <__EEPROM_REGION_LENGTH__+0x4e0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2745
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
   104d8:	60 e0       	ldi	r22, 0x00	; 0
   104da:	87 2d       	mov	r24, r7
   104dc:	0e 94 83 d3 	call	0x1a706	; 0x1a706 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.114]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
          if (active == TERM_MODE_MAN_COOL)
   104e0:	ca 5b       	subi	r28, 0xBA	; 186
   104e2:	de 4f       	sbci	r29, 0xFE	; 254
   104e4:	88 81       	ld	r24, Y
   104e6:	c6 54       	subi	r28, 0x46	; 70
   104e8:	d1 40       	sbci	r29, 0x01	; 1
   104ea:	85 30       	cpi	r24, 0x05	; 5
   104ec:	21 f4       	brne	.+8      	; 0x104f6 <__EEPROM_REGION_LENGTH__+0x4f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2747
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
   104ee:	61 e0       	ldi	r22, 0x01	; 1
   104f0:	87 2d       	mov	r24, r7
   104f2:	0e 94 83 d3 	call	0x1a706	; 0x1a706 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.114]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2749
        }
        if ((cnt == 1) && (strcmp(pch, "input") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
   104f6:	69 eb       	ldi	r22, 0xB9	; 185
   104f8:	76 e0       	ldi	r23, 0x06	; 6
   104fa:	c8 01       	movw	r24, r16
   104fc:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10500:	89 2b       	or	r24, r25
   10502:	69 f4       	brne	.+26     	; 0x1051e <__EEPROM_REGION_LENGTH__+0x51e>
   10504:	8f ee       	ldi	r24, 0xEF	; 239
   10506:	98 e0       	ldi	r25, 0x08	; 8
   10508:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
   1050c:	7e 9c       	mul	r7, r14
   1050e:	90 01       	movw	r18, r0
   10510:	11 24       	eor	r1, r1
   10512:	68 2f       	mov	r22, r24
   10514:	c9 01       	movw	r24, r18
   10516:	84 5a       	subi	r24, 0xA4	; 164
   10518:	9e 4f       	sbci	r25, 0xFE	; 254
   1051a:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2751
        //if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
   1051e:	69 e1       	ldi	r22, 0x19	; 25
   10520:	74 e0       	ldi	r23, 0x04	; 4
   10522:	c8 01       	movw	r24, r16
   10524:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10528:	89 2b       	or	r24, r25
   1052a:	69 f4       	brne	.+26     	; 0x10546 <__EEPROM_REGION_LENGTH__+0x546>
   1052c:	8f ee       	ldi	r24, 0xEF	; 239
   1052e:	98 e0       	ldi	r25, 0x08	; 8
   10530:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
thermostat_ring_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
   10534:	7e 9c       	mul	r7, r14
   10536:	90 01       	movw	r18, r0
   10538:	11 24       	eor	r1, r1
   1053a:	68 2f       	mov	r22, r24
   1053c:	c9 01       	movw	r24, r18
   1053e:	83 5a       	subi	r24, 0xA3	; 163
   10540:	9e 4f       	sbci	r25, 0xFE	; 254
   10542:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2752
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
   10546:	6f eb       	ldi	r22, 0xBF	; 191
   10548:	76 e0       	ldi	r23, 0x06	; 6
   1054a:	c8 01       	movw	r24, r16
   1054c:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10550:	89 2b       	or	r24, r25
   10552:	69 f4       	brne	.+26     	; 0x1056e <__EEPROM_REGION_LENGTH__+0x56e>
   10554:	8f ee       	ldi	r24, 0xEF	; 239
   10556:	98 e0       	ldi	r25, 0x08	; 8
   10558:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
thermostat_ring_set_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
   1055c:	7e 9c       	mul	r7, r14
   1055e:	90 01       	movw	r18, r0
   10560:	11 24       	eor	r1, r1
   10562:	68 2f       	mov	r22, r24
   10564:	c9 01       	movw	r24, r18
   10566:	81 5a       	subi	r24, 0xA1	; 161
   10568:	9e 4f       	sbci	r25, 0xFE	; 254
   1056a:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2753
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
   1056e:	66 ec       	ldi	r22, 0xC6	; 198
   10570:	76 e0       	ldi	r23, 0x06	; 6
   10572:	c8 01       	movw	r24, r16
   10574:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10578:	89 2b       	or	r24, r25
   1057a:	a1 f4       	brne	.+40     	; 0x105a4 <__EEPROM_REGION_LENGTH__+0x5a4>
   1057c:	8f ee       	ldi	r24, 0xEF	; 239
   1057e:	98 e0       	ldi	r25, 0x08	; 8
   10580:	0e 94 bd d4 	call	0x1a97a	; 0x1a97a <atof>
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
   10584:	24 e0       	ldi	r18, 0x04	; 4
   10586:	72 9e       	mul	r7, r18
   10588:	f0 01       	movw	r30, r0
   1058a:	11 24       	eor	r1, r1
   1058c:	e3 56       	subi	r30, 0x63	; 99
   1058e:	f5 4f       	sbci	r31, 0xF5	; 245
   10590:	60 83       	st	Z, r22
   10592:	71 83       	std	Z+1, r23	; 0x01
   10594:	82 83       	std	Z+2, r24	; 0x02
   10596:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
   10598:	87 2d       	mov	r24, r7
   1059a:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
   1059e:	87 2d       	mov	r24, r7
   105a0:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2754
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
   105a4:	6d ec       	ldi	r22, 0xCD	; 205
   105a6:	76 e0       	ldi	r23, 0x06	; 6
   105a8:	c8 01       	movw	r24, r16
   105aa:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   105ae:	89 2b       	or	r24, r25
   105b0:	a1 f4       	brne	.+40     	; 0x105da <__EEPROM_REGION_LENGTH__+0x5da>
   105b2:	8f ee       	ldi	r24, 0xEF	; 239
   105b4:	98 e0       	ldi	r25, 0x08	; 8
   105b6:	0e 94 bd d4 	call	0x1a97a	; 0x1a97a <atof>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
   105ba:	a4 e0       	ldi	r26, 0x04	; 4
   105bc:	7a 9e       	mul	r7, r26
   105be:	f0 01       	movw	r30, r0
   105c0:	11 24       	eor	r1, r1
   105c2:	ef 54       	subi	r30, 0x4F	; 79
   105c4:	f5 4f       	sbci	r31, 0xF5	; 245
   105c6:	60 83       	st	Z, r22
   105c8:	71 83       	std	Z+1, r23	; 0x01
   105ca:	82 83       	std	Z+2, r24	; 0x02
   105cc:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
   105ce:	87 2d       	mov	r24, r7
   105d0:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
   105d4:	87 2d       	mov	r24, r7
   105d6:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2755
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
   105da:	64 ed       	ldi	r22, 0xD4	; 212
   105dc:	76 e0       	ldi	r23, 0x06	; 6
   105de:	c8 01       	movw	r24, r16
   105e0:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   105e4:	89 2b       	or	r24, r25
   105e6:	a1 f4       	brne	.+40     	; 0x10610 <__EEPROM_REGION_LENGTH__+0x610>
   105e8:	8f ee       	ldi	r24, 0xEF	; 239
   105ea:	98 e0       	ldi	r25, 0x08	; 8
   105ec:	0e 94 bd d4 	call	0x1a97a	; 0x1a97a <atof>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
   105f0:	b4 e0       	ldi	r27, 0x04	; 4
   105f2:	7b 9e       	mul	r7, r27
   105f4:	f0 01       	movw	r30, r0
   105f6:	11 24       	eor	r1, r1
   105f8:	eb 53       	subi	r30, 0x3B	; 59
   105fa:	f5 4f       	sbci	r31, 0xF5	; 245
   105fc:	60 83       	st	Z, r22
   105fe:	71 83       	std	Z+1, r23	; 0x01
   10600:	82 83       	std	Z+2, r24	; 0x02
   10602:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
   10604:	87 2d       	mov	r24, r7
   10606:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
   1060a:	87 2d       	mov	r24, r7
   1060c:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2756
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
   10610:	6b ed       	ldi	r22, 0xDB	; 219
   10612:	76 e0       	ldi	r23, 0x06	; 6
   10614:	c8 01       	movw	r24, r16
   10616:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   1061a:	89 2b       	or	r24, r25
   1061c:	79 f4       	brne	.+30     	; 0x1063c <__EEPROM_REGION_LENGTH__+0x63c>
   1061e:	8f ee       	ldi	r24, 0xEF	; 239
   10620:	98 e0       	ldi	r25, 0x08	; 8
   10622:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
   10626:	e7 2d       	mov	r30, r7
   10628:	f0 e0       	ldi	r31, 0x00	; 0
   1062a:	e7 52       	subi	r30, 0x27	; 39
   1062c:	f5 4f       	sbci	r31, 0xF5	; 245
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2756
   1062e:	80 83       	st	Z, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
   10630:	87 2d       	mov	r24, r7
   10632:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
   10636:	87 2d       	mov	r24, r7
   10638:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2762
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
   1063c:	6a e8       	ldi	r22, 0x8A	; 138
   1063e:	75 e0       	ldi	r23, 0x05	; 5
   10640:	90 e0       	ldi	r25, 0x00	; 0
   10642:	80 e0       	ldi	r24, 0x00	; 0
   10644:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
   10648:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2763
      cnt++;
   1064a:	d3 94       	inc	r13
   1064c:	66 ce       	rjmp	.-820    	; 0x1031a <__EEPROM_REGION_LENGTH__+0x31a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2768
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
   1064e:	60 e4       	ldi	r22, 0x40	; 64
   10650:	7c e5       	ldi	r23, 0x5C	; 92
   10652:	c5 01       	movw	r24, r10
   10654:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2769
  strcat(str1, device.nazev);
   10658:	6a ef       	ldi	r22, 0xFA	; 250
   1065a:	7d e0       	ldi	r23, 0x0D	; 13
   1065c:	c5 01       	movw	r24, r10
   1065e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2770
  strcat(str1, "/ring/clear");
   10662:	6c eb       	ldi	r22, 0xBC	; 188
   10664:	75 e0       	ldi	r23, 0x05	; 5
   10666:	c5 01       	movw	r24, r10
   10668:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2771
  if (strncmp(str1, topic, strlen(str1)) == 0)
   1066c:	f5 01       	movw	r30, r10
   1066e:	01 90       	ld	r0, Z+
   10670:	00 20       	and	r0, r0
   10672:	e9 f7       	brne	.-6      	; 0x1066e <__EEPROM_REGION_LENGTH__+0x66e>
   10674:	31 97       	sbiw	r30, 0x01	; 1
   10676:	af 01       	movw	r20, r30
   10678:	4a 19       	sub	r20, r10
   1067a:	5b 09       	sbc	r21, r11
   1067c:	b4 01       	movw	r22, r8
   1067e:	c5 01       	movw	r24, r10
   10680:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
   10684:	89 2b       	or	r24, r25
   10686:	a1 f4       	brne	.+40     	; 0x106b0 <__EEPROM_REGION_LENGTH__+0x6b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2773
  {
    mqtt_process_message++;
   10688:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
   1068c:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
   10690:	01 96       	adiw	r24, 0x01	; 1
   10692:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
   10696:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2774
    id = atoi(my_payload);
   1069a:	8f ee       	ldi	r24, 0xEF	; 239
   1069c:	98 e0       	ldi	r25, 0x08	; 8
   1069e:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   106a2:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2775
    if (id < MAX_THERMOSTAT)
   106a4:	e4 e0       	ldi	r30, 0x04	; 4
   106a6:	e8 17       	cp	r30, r24
   106a8:	08 f4       	brcc	.+2      	; 0x106ac <__EEPROM_REGION_LENGTH__+0x6ac>
   106aa:	9c c1       	rjmp	.+824    	; 0x109e4 <__EEPROM_REGION_LENGTH__+0x9e4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
    {
      thermostat_ring_clear(id);
   106ac:	0e 94 fc 54 	call	0xa9f8	; 0xa9f8 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2788
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
   106b0:	60 e4       	ldi	r22, 0x40	; 64
   106b2:	7c e5       	ldi	r23, 0x5C	; 92
   106b4:	c5 01       	movw	r24, r10
   106b6:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2789
  strcat(str1, device.nazev);
   106ba:	6a ef       	ldi	r22, 0xFA	; 250
   106bc:	7d e0       	ldi	r23, 0x0D	; 13
   106be:	c5 01       	movw	r24, r10
   106c0:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
  strcat(str1, "/network/get/config");
   106c4:	6a ed       	ldi	r22, 0xDA	; 218
   106c6:	75 e0       	ldi	r23, 0x05	; 5
   106c8:	c5 01       	movw	r24, r10
   106ca:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2791
  if (strncmp(str1, topic, strlen(str1)) == 0)
   106ce:	f5 01       	movw	r30, r10
   106d0:	01 90       	ld	r0, Z+
   106d2:	00 20       	and	r0, r0
   106d4:	e9 f7       	brne	.-6      	; 0x106d0 <__EEPROM_REGION_LENGTH__+0x6d0>
   106d6:	31 97       	sbiw	r30, 0x01	; 1
   106d8:	af 01       	movw	r20, r30
   106da:	4a 19       	sub	r20, r10
   106dc:	5b 09       	sbc	r21, r11
   106de:	b4 01       	movw	r22, r8
   106e0:	c5 01       	movw	r24, r10
   106e2:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
   106e6:	89 2b       	or	r24, r25
   106e8:	09 f0       	breq	.+2      	; 0x106ec <__EEPROM_REGION_LENGTH__+0x6ec>
   106ea:	2f c1       	rjmp	.+606    	; 0x1094a <__EEPROM_REGION_LENGTH__+0x94a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2793
  {
    mqtt_process_message++;
   106ec:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
   106f0:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
   106f4:	01 96       	adiw	r24, 0x01	; 1
   106f6:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
   106fa:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
send_network_config():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:263
//// thermctl-out/XXXXX/network/name
void send_network_config(PubSubClient *mqtt_client)
{
  char payload[20];
  char str_topic[32];
  payload[0] = 0;
   106fe:	c8 5d       	subi	r28, 0xD8	; 216
   10700:	de 4f       	sbci	r29, 0xFE	; 254
   10702:	18 82       	st	Y, r1
   10704:	c8 52       	subi	r28, 0x28	; 40
   10706:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:264
  createString(payload, ':', device.mac, 6, 16);
   10708:	00 e1       	ldi	r16, 0x10	; 16
   1070a:	26 e0       	ldi	r18, 0x06	; 6
   1070c:	44 ee       	ldi	r20, 0xE4	; 228
   1070e:	5d e0       	ldi	r21, 0x0D	; 13
   10710:	6a e3       	ldi	r22, 0x3A	; 58
   10712:	ce 01       	movw	r24, r28
   10714:	88 5d       	subi	r24, 0xD8	; 216
   10716:	9e 4f       	sbci	r25, 0xFE	; 254
   10718:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:265
  strcpy_P(str_topic, network_mac);
   1071c:	67 e9       	ldi	r22, 0x97	; 151
   1071e:	7b e5       	ldi	r23, 0x5B	; 91
   10720:	ce 01       	movw	r24, r28
   10722:	88 5b       	subi	r24, 0xB8	; 184
   10724:	9f 4f       	sbci	r25, 0xFF	; 255
   10726:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:266
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1072a:	ae 01       	movw	r20, r28
   1072c:	48 5d       	subi	r20, 0xD8	; 216
   1072e:	5e 4f       	sbci	r21, 0xFE	; 254
   10730:	be 01       	movw	r22, r28
   10732:	68 5b       	subi	r22, 0xB8	; 184
   10734:	7f 4f       	sbci	r23, 0xFF	; 255
   10736:	8a ef       	ldi	r24, 0xFA	; 250
   10738:	9f e0       	ldi	r25, 0x0F	; 15
   1073a:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:268
  ///
  payload[0] = 0;
   1073e:	c8 5d       	subi	r28, 0xD8	; 216
   10740:	de 4f       	sbci	r29, 0xFE	; 254
   10742:	18 82       	st	Y, r1
   10744:	c8 52       	subi	r28, 0x28	; 40
   10746:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:269
  createString(payload, '.', device.myIP, 4, 10);
   10748:	0a e0       	ldi	r16, 0x0A	; 10
   1074a:	24 e0       	ldi	r18, 0x04	; 4
   1074c:	4a ee       	ldi	r20, 0xEA	; 234
   1074e:	5d e0       	ldi	r21, 0x0D	; 13
   10750:	6e e2       	ldi	r22, 0x2E	; 46
   10752:	ce 01       	movw	r24, r28
   10754:	88 5d       	subi	r24, 0xD8	; 216
   10756:	9e 4f       	sbci	r25, 0xFE	; 254
   10758:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:270
  strcpy_P(str_topic, network_ip);
   1075c:	65 e2       	ldi	r22, 0x25	; 37
   1075e:	72 e6       	ldi	r23, 0x62	; 98
   10760:	ce 01       	movw	r24, r28
   10762:	88 5b       	subi	r24, 0xB8	; 184
   10764:	9f 4f       	sbci	r25, 0xFF	; 255
   10766:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:271
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1076a:	ae 01       	movw	r20, r28
   1076c:	48 5d       	subi	r20, 0xD8	; 216
   1076e:	5e 4f       	sbci	r21, 0xFE	; 254
   10770:	be 01       	movw	r22, r28
   10772:	68 5b       	subi	r22, 0xB8	; 184
   10774:	7f 4f       	sbci	r23, 0xFF	; 255
   10776:	8a ef       	ldi	r24, 0xFA	; 250
   10778:	9f e0       	ldi	r25, 0x0F	; 15
   1077a:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:273
  ///
  payload[0] = 0;
   1077e:	c8 5d       	subi	r28, 0xD8	; 216
   10780:	de 4f       	sbci	r29, 0xFE	; 254
   10782:	18 82       	st	Y, r1
   10784:	c8 52       	subi	r28, 0x28	; 40
   10786:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:274
  createString(payload, '.', device.myMASK, 4, 10);
   10788:	24 e0       	ldi	r18, 0x04	; 4
   1078a:	4e ee       	ldi	r20, 0xEE	; 238
   1078c:	5d e0       	ldi	r21, 0x0D	; 13
   1078e:	6e e2       	ldi	r22, 0x2E	; 46
   10790:	ce 01       	movw	r24, r28
   10792:	88 5d       	subi	r24, 0xD8	; 216
   10794:	9e 4f       	sbci	r25, 0xFE	; 254
   10796:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:275
  strcpy_P(str_topic, network_netmask);
   1079a:	67 e8       	ldi	r22, 0x87	; 135
   1079c:	7b e5       	ldi	r23, 0x5B	; 91
   1079e:	ce 01       	movw	r24, r28
   107a0:	88 5b       	subi	r24, 0xB8	; 184
   107a2:	9f 4f       	sbci	r25, 0xFF	; 255
   107a4:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:276
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   107a8:	ae 01       	movw	r20, r28
   107aa:	48 5d       	subi	r20, 0xD8	; 216
   107ac:	5e 4f       	sbci	r21, 0xFE	; 254
   107ae:	be 01       	movw	r22, r28
   107b0:	68 5b       	subi	r22, 0xB8	; 184
   107b2:	7f 4f       	sbci	r23, 0xFF	; 255
   107b4:	8a ef       	ldi	r24, 0xFA	; 250
   107b6:	9f e0       	ldi	r25, 0x0F	; 15
   107b8:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:278
  ///
  payload[0] = 0;
   107bc:	c8 5d       	subi	r28, 0xD8	; 216
   107be:	de 4f       	sbci	r29, 0xFE	; 254
   107c0:	18 82       	st	Y, r1
   107c2:	c8 52       	subi	r28, 0x28	; 40
   107c4:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:279
  createString(payload, '.', device.myGW, 4, 10);
   107c6:	24 e0       	ldi	r18, 0x04	; 4
   107c8:	46 ef       	ldi	r20, 0xF6	; 246
   107ca:	5d e0       	ldi	r21, 0x0D	; 13
   107cc:	6e e2       	ldi	r22, 0x2E	; 46
   107ce:	ce 01       	movw	r24, r28
   107d0:	88 5d       	subi	r24, 0xD8	; 216
   107d2:	9e 4f       	sbci	r25, 0xFE	; 254
   107d4:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:280
  strcpy_P(str_topic, network_gw);
   107d8:	6c e7       	ldi	r22, 0x7C	; 124
   107da:	7b e5       	ldi	r23, 0x5B	; 91
   107dc:	ce 01       	movw	r24, r28
   107de:	88 5b       	subi	r24, 0xB8	; 184
   107e0:	9f 4f       	sbci	r25, 0xFF	; 255
   107e2:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:281
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   107e6:	ae 01       	movw	r20, r28
   107e8:	48 5d       	subi	r20, 0xD8	; 216
   107ea:	5e 4f       	sbci	r21, 0xFE	; 254
   107ec:	be 01       	movw	r22, r28
   107ee:	68 5b       	subi	r22, 0xB8	; 184
   107f0:	7f 4f       	sbci	r23, 0xFF	; 255
   107f2:	8a ef       	ldi	r24, 0xFA	; 250
   107f4:	9f e0       	ldi	r25, 0x0F	; 15
   107f6:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:283
  ///
  payload[0] = 0;
   107fa:	c8 5d       	subi	r28, 0xD8	; 216
   107fc:	de 4f       	sbci	r29, 0xFE	; 254
   107fe:	18 82       	st	Y, r1
   10800:	c8 52       	subi	r28, 0x28	; 40
   10802:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:284
  createString(payload, '.', device.myDNS, 4, 10);
   10804:	24 e0       	ldi	r18, 0x04	; 4
   10806:	42 ef       	ldi	r20, 0xF2	; 242
   10808:	5d e0       	ldi	r21, 0x0D	; 13
   1080a:	6e e2       	ldi	r22, 0x2E	; 46
   1080c:	ce 01       	movw	r24, r28
   1080e:	88 5d       	subi	r24, 0xD8	; 216
   10810:	9e 4f       	sbci	r25, 0xFE	; 254
   10812:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:285
  strcpy_P(str_topic, network_dns);
   10816:	60 e7       	ldi	r22, 0x70	; 112
   10818:	7b e5       	ldi	r23, 0x5B	; 91
   1081a:	ce 01       	movw	r24, r28
   1081c:	88 5b       	subi	r24, 0xB8	; 184
   1081e:	9f 4f       	sbci	r25, 0xFF	; 255
   10820:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:286
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   10824:	ae 01       	movw	r20, r28
   10826:	48 5d       	subi	r20, 0xD8	; 216
   10828:	5e 4f       	sbci	r21, 0xFE	; 254
   1082a:	be 01       	movw	r22, r28
   1082c:	68 5b       	subi	r22, 0xB8	; 184
   1082e:	7f 4f       	sbci	r23, 0xFF	; 255
   10830:	8a ef       	ldi	r24, 0xFA	; 250
   10832:	9f e0       	ldi	r25, 0x0F	; 15
   10834:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:288
  ///
  payload[0] = 0;
   10838:	c8 5d       	subi	r28, 0xD8	; 216
   1083a:	de 4f       	sbci	r29, 0xFE	; 254
   1083c:	18 82       	st	Y, r1
   1083e:	c8 52       	subi	r28, 0x28	; 40
   10840:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:289
  createString(payload, '.', device.ntp_server, 4, 10);
   10842:	24 e0       	ldi	r18, 0x04	; 4
   10844:	42 e3       	ldi	r20, 0x32	; 50
   10846:	5e e0       	ldi	r21, 0x0E	; 14
   10848:	6e e2       	ldi	r22, 0x2E	; 46
   1084a:	ce 01       	movw	r24, r28
   1084c:	88 5d       	subi	r24, 0xD8	; 216
   1084e:	9e 4f       	sbci	r25, 0xFE	; 254
   10850:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:290
  strcpy_P(str_topic, network_ntp);
   10854:	64 e6       	ldi	r22, 0x64	; 100
   10856:	7b e5       	ldi	r23, 0x5B	; 91
   10858:	ce 01       	movw	r24, r28
   1085a:	88 5b       	subi	r24, 0xB8	; 184
   1085c:	9f 4f       	sbci	r25, 0xFF	; 255
   1085e:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:291
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   10862:	ae 01       	movw	r20, r28
   10864:	48 5d       	subi	r20, 0xD8	; 216
   10866:	5e 4f       	sbci	r21, 0xFE	; 254
   10868:	be 01       	movw	r22, r28
   1086a:	68 5b       	subi	r22, 0xB8	; 184
   1086c:	7f 4f       	sbci	r23, 0xFF	; 255
   1086e:	8a ef       	ldi	r24, 0xFA	; 250
   10870:	9f e0       	ldi	r25, 0x0F	; 15
   10872:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:293
  ///
  payload[0] = 0;
   10876:	c8 5d       	subi	r28, 0xD8	; 216
   10878:	de 4f       	sbci	r29, 0xFE	; 254
   1087a:	18 82       	st	Y, r1
   1087c:	c8 52       	subi	r28, 0x28	; 40
   1087e:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:294
  createString(payload, '.', device.mqtt_server, 4, 10);
   10880:	24 e0       	ldi	r18, 0x04	; 4
   10882:	44 e0       	ldi	r20, 0x04	; 4
   10884:	5e e0       	ldi	r21, 0x0E	; 14
   10886:	6e e2       	ldi	r22, 0x2E	; 46
   10888:	ce 01       	movw	r24, r28
   1088a:	88 5d       	subi	r24, 0xD8	; 216
   1088c:	9e 4f       	sbci	r25, 0xFE	; 254
   1088e:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:295
  strcpy_P(str_topic, network_mqtt_host);
   10892:	62 e5       	ldi	r22, 0x52	; 82
   10894:	7b e5       	ldi	r23, 0x5B	; 91
   10896:	ce 01       	movw	r24, r28
   10898:	88 5b       	subi	r24, 0xB8	; 184
   1089a:	9f 4f       	sbci	r25, 0xFF	; 255
   1089c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:296
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   108a0:	ae 01       	movw	r20, r28
   108a2:	48 5d       	subi	r20, 0xD8	; 216
   108a4:	5e 4f       	sbci	r21, 0xFE	; 254
   108a6:	be 01       	movw	r22, r28
   108a8:	68 5b       	subi	r22, 0xB8	; 184
   108aa:	7f 4f       	sbci	r23, 0xFF	; 255
   108ac:	8a ef       	ldi	r24, 0xFA	; 250
   108ae:	9f e0       	ldi	r25, 0x0F	; 15
   108b0:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   108b4:	4a e0       	ldi	r20, 0x0A	; 10
   108b6:	be 01       	movw	r22, r28
   108b8:	68 5d       	subi	r22, 0xD8	; 216
   108ba:	7e 4f       	sbci	r23, 0xFE	; 254
   108bc:	80 91 08 0e 	lds	r24, 0x0E08	; 0x800e08 <device+0x24>
   108c0:	90 91 09 0e 	lds	r25, 0x0E09	; 0x800e09 <device+0x25>
   108c4:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_network_config():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:299
  ///
  itoa(device.mqtt_port, payload, 10);
  strcpy_P(str_topic, network_mqtt_port);
   108c8:	60 e4       	ldi	r22, 0x40	; 64
   108ca:	7b e5       	ldi	r23, 0x5B	; 91
   108cc:	ce 01       	movw	r24, r28
   108ce:	88 5b       	subi	r24, 0xB8	; 184
   108d0:	9f 4f       	sbci	r25, 0xFF	; 255
   108d2:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:300
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   108d6:	ae 01       	movw	r20, r28
   108d8:	48 5d       	subi	r20, 0xD8	; 216
   108da:	5e 4f       	sbci	r21, 0xFE	; 254
   108dc:	be 01       	movw	r22, r28
   108de:	68 5b       	subi	r22, 0xB8	; 184
   108e0:	7f 4f       	sbci	r23, 0xFF	; 255
   108e2:	8a ef       	ldi	r24, 0xFA	; 250
   108e4:	9f e0       	ldi	r25, 0x0F	; 15
   108e6:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:302
  ///
  strcpy_P(str_topic, network_mqtt_user);
   108ea:	6e e2       	ldi	r22, 0x2E	; 46
   108ec:	7b e5       	ldi	r23, 0x5B	; 91
   108ee:	ce 01       	movw	r24, r28
   108f0:	88 5b       	subi	r24, 0xB8	; 184
   108f2:	9f 4f       	sbci	r25, 0xFF	; 255
   108f4:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:303
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_user);
   108f8:	4a e0       	ldi	r20, 0x0A	; 10
   108fa:	5e e0       	ldi	r21, 0x0E	; 14
   108fc:	be 01       	movw	r22, r28
   108fe:	68 5b       	subi	r22, 0xB8	; 184
   10900:	7f 4f       	sbci	r23, 0xFF	; 255
   10902:	8a ef       	ldi	r24, 0xFA	; 250
   10904:	9f e0       	ldi	r25, 0x0F	; 15
   10906:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:305
  ///
  strcpy_P(str_topic, network_mqtt_key);
   1090a:	6d e1       	ldi	r22, 0x1D	; 29
   1090c:	7b e5       	ldi	r23, 0x5B	; 91
   1090e:	ce 01       	movw	r24, r28
   10910:	88 5b       	subi	r24, 0xB8	; 184
   10912:	9f 4f       	sbci	r25, 0xFF	; 255
   10914:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:306
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_key);
   10918:	4e e1       	ldi	r20, 0x1E	; 30
   1091a:	5e e0       	ldi	r21, 0x0E	; 14
   1091c:	be 01       	movw	r22, r28
   1091e:	68 5b       	subi	r22, 0xB8	; 184
   10920:	7f 4f       	sbci	r23, 0xFF	; 255
   10922:	8a ef       	ldi	r24, 0xFA	; 250
   10924:	9f e0       	ldi	r25, 0x0F	; 15
   10926:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:308
  ///
  strcpy_P(str_topic, network_name);
   1092a:	60 e1       	ldi	r22, 0x10	; 16
   1092c:	7b e5       	ldi	r23, 0x5B	; 91
   1092e:	ce 01       	movw	r24, r28
   10930:	88 5b       	subi	r24, 0xB8	; 184
   10932:	9f 4f       	sbci	r25, 0xFF	; 255
   10934:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:309
  send_mqtt_general_payload(mqtt_client, str_topic, device.nazev);
   10938:	4a ef       	ldi	r20, 0xFA	; 250
   1093a:	5d e0       	ldi	r21, 0x0D	; 13
   1093c:	be 01       	movw	r22, r28
   1093e:	68 5b       	subi	r22, 0xB8	; 184
   10940:	7f 4f       	sbci	r23, 0xFF	; 255
   10942:	8a ef       	ldi	r24, 0xFA	; 250
   10944:	9f e0       	ldi	r25, 0x0F	; 15
   10946:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2808
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
   1094a:	60 e4       	ldi	r22, 0x40	; 64
   1094c:	7c e5       	ldi	r23, 0x5C	; 92
   1094e:	c5 01       	movw	r24, r10
   10950:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809
  strcat(str1, device.nazev);
   10954:	6a ef       	ldi	r22, 0xFA	; 250
   10956:	7d e0       	ldi	r23, 0x0D	; 13
   10958:	c5 01       	movw	r24, r10
   1095a:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2810
  strcat(str1, "/network/set/");
   1095e:	6e ee       	ldi	r22, 0xEE	; 238
   10960:	75 e0       	ldi	r23, 0x05	; 5
   10962:	c5 01       	movw	r24, r10
   10964:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2811
  if (strncmp(str1, topic, strlen(str1)) == 0)
   10968:	f5 01       	movw	r30, r10
   1096a:	01 90       	ld	r0, Z+
   1096c:	00 20       	and	r0, r0
   1096e:	e9 f7       	brne	.-6      	; 0x1096a <__EEPROM_REGION_LENGTH__+0x96a>
   10970:	31 97       	sbiw	r30, 0x01	; 1
   10972:	af 01       	movw	r20, r30
   10974:	4a 19       	sub	r20, r10
   10976:	5b 09       	sbc	r21, r11
   10978:	b4 01       	movw	r22, r8
   1097a:	c5 01       	movw	r24, r10
   1097c:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
   10980:	89 2b       	or	r24, r25
   10982:	09 f0       	breq	.+2      	; 0x10986 <__EEPROM_REGION_LENGTH__+0x986>
   10984:	04 c1       	rjmp	.+520    	; 0x10b8e <__EEPROM_REGION_LENGTH__+0xb8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2813
  {
    mqtt_process_message++;
   10986:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
   1098a:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
   1098e:	01 96       	adiw	r24, 0x01	; 1
   10990:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
   10994:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2815
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   10998:	f5 01       	movw	r30, r10
   1099a:	01 90       	ld	r0, Z+
   1099c:	00 20       	and	r0, r0
   1099e:	e9 f7       	brne	.-6      	; 0x1099a <__EEPROM_REGION_LENGTH__+0x99a>
   109a0:	31 97       	sbiw	r30, 0x01	; 1
   109a2:	ea 19       	sub	r30, r10
   109a4:	fb 09       	sbc	r31, r11
   109a6:	9e 2f       	mov	r25, r30
   109a8:	4e 2f       	mov	r20, r30
   109aa:	84 2f       	mov	r24, r20
   109ac:	89 1b       	sub	r24, r25
   109ae:	24 2f       	mov	r18, r20
   109b0:	30 e0       	ldi	r19, 0x00	; 0
   109b2:	d4 01       	movw	r26, r8
   109b4:	0d 90       	ld	r0, X+
   109b6:	00 20       	and	r0, r0
   109b8:	e9 f7       	brne	.-6      	; 0x109b4 <__EEPROM_REGION_LENGTH__+0x9b4>
   109ba:	11 97       	sbiw	r26, 0x01	; 1
   109bc:	a8 19       	sub	r26, r8
   109be:	b9 09       	sbc	r27, r9
   109c0:	2a 17       	cp	r18, r26
   109c2:	3b 07       	cpc	r19, r27
   109c4:	a0 f4       	brcc	.+40     	; 0x109ee <__EEPROM_REGION_LENGTH__+0x9ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2817
    {
      str1[cnt] = topic[f];
   109c6:	a8 ec       	ldi	r26, 0xC8	; 200
   109c8:	b0 e0       	ldi	r27, 0x00	; 0
   109ca:	ac 0f       	add	r26, r28
   109cc:	bd 1f       	adc	r27, r29
   109ce:	a8 0f       	add	r26, r24
   109d0:	b1 1d       	adc	r27, r1
   109d2:	28 0d       	add	r18, r8
   109d4:	39 1d       	adc	r19, r9
   109d6:	f9 01       	movw	r30, r18
   109d8:	80 81       	ld	r24, Z
   109da:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2818
      str1[cnt + 1] = 0;
   109dc:	11 96       	adiw	r26, 0x01	; 1
   109de:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2815
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   109e0:	4f 5f       	subi	r20, 0xFF	; 255
   109e2:	e3 cf       	rjmp	.-58     	; 0x109aa <__EEPROM_REGION_LENGTH__+0x9aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2781
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
   109e4:	88 ec       	ldi	r24, 0xC8	; 200
   109e6:	95 e0       	ldi	r25, 0x05	; 5
   109e8:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <log_error(PubSubClient*, char*) [clone .constprop.117]>
   109ec:	61 ce       	rjmp	.-830    	; 0x106b0 <__EEPROM_REGION_LENGTH__+0x6b0>
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:94
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
  pch = strtok (data, "/");
   109ee:	6a e8       	ldi	r22, 0x8A	; 138
   109f0:	75 e0       	ldi	r23, 0x05	; 5
   109f2:	ce 01       	movw	r24, r28
   109f4:	88 53       	subi	r24, 0x38	; 56
   109f6:	9f 4f       	sbci	r25, 0xFF	; 255
   109f8:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
   109fc:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:93
uint8_t setting_network(char *data, char *my_payload)
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
   109fe:	10 e0       	ldi	r17, 0x00	; 0
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:95
  pch = strtok (data, "/");
  while (pch != NULL)
   10a00:	e1 14       	cp	r14, r1
   10a02:	f1 04       	cpc	r15, r1
   10a04:	09 f4       	brne	.+2      	; 0x10a08 <__EEPROM_REGION_LENGTH__+0xa08>
   10a06:	b7 c0       	rjmp	.+366    	; 0x10b76 <__EEPROM_REGION_LENGTH__+0xb76>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:97
  {
    if (strcmp(pch, "mac") == 0)
   10a08:	6c ef       	ldi	r22, 0xFC	; 252
   10a0a:	75 e0       	ldi	r23, 0x05	; 5
   10a0c:	c7 01       	movw	r24, r14
   10a0e:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10a12:	89 2b       	or	r24, r25
   10a14:	51 f4       	brne	.+20     	; 0x10a2a <__EEPROM_REGION_LENGTH__+0xa2a>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:99
    {
      parseBytes(my_payload, ':', device.mac, 6, 10);
   10a16:	26 e0       	ldi	r18, 0x06	; 6
   10a18:	30 e0       	ldi	r19, 0x00	; 0
   10a1a:	44 ee       	ldi	r20, 0xE4	; 228
   10a1c:	5d e0       	ldi	r21, 0x0D	; 13
   10a1e:	6a e3       	ldi	r22, 0x3A	; 58
   10a20:	8f ee       	ldi	r24, 0xEF	; 239
   10a22:	98 e0       	ldi	r25, 0x08	; 8
   10a24:	0e 94 f5 b0 	call	0x161ea	; 0x161ea <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.182]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:100
      cnt = 1;
   10a28:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:102
    }
    if (strcmp(pch, "ip") == 0)
   10a2a:	60 e0       	ldi	r22, 0x00	; 0
   10a2c:	76 e0       	ldi	r23, 0x06	; 6
   10a2e:	c7 01       	movw	r24, r14
   10a30:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10a34:	89 2b       	or	r24, r25
   10a36:	51 f4       	brne	.+20     	; 0x10a4c <__EEPROM_REGION_LENGTH__+0xa4c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:104
    {
      parseBytes(my_payload, '.', device.myIP, 4, 10);
   10a38:	24 e0       	ldi	r18, 0x04	; 4
   10a3a:	30 e0       	ldi	r19, 0x00	; 0
   10a3c:	4a ee       	ldi	r20, 0xEA	; 234
   10a3e:	5d e0       	ldi	r21, 0x0D	; 13
   10a40:	6e e2       	ldi	r22, 0x2E	; 46
   10a42:	8f ee       	ldi	r24, 0xEF	; 239
   10a44:	98 e0       	ldi	r25, 0x08	; 8
   10a46:	0e 94 f5 b0 	call	0x161ea	; 0x161ea <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.182]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:105
      cnt = 1;
   10a4a:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:107
    }
    if (strcmp(pch, "netmask") == 0)
   10a4c:	63 e0       	ldi	r22, 0x03	; 3
   10a4e:	76 e0       	ldi	r23, 0x06	; 6
   10a50:	c7 01       	movw	r24, r14
   10a52:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10a56:	89 2b       	or	r24, r25
   10a58:	51 f4       	brne	.+20     	; 0x10a6e <__EEPROM_REGION_LENGTH__+0xa6e>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:109
    {
      parseBytes(my_payload, '.', device.myMASK, 4, 10);
   10a5a:	24 e0       	ldi	r18, 0x04	; 4
   10a5c:	30 e0       	ldi	r19, 0x00	; 0
   10a5e:	4e ee       	ldi	r20, 0xEE	; 238
   10a60:	5d e0       	ldi	r21, 0x0D	; 13
   10a62:	6e e2       	ldi	r22, 0x2E	; 46
   10a64:	8f ee       	ldi	r24, 0xEF	; 239
   10a66:	98 e0       	ldi	r25, 0x08	; 8
   10a68:	0e 94 f5 b0 	call	0x161ea	; 0x161ea <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.182]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:110
      cnt = 1;
   10a6c:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:112
    }
    if (strcmp(pch, "gw") == 0)
   10a6e:	6b e0       	ldi	r22, 0x0B	; 11
   10a70:	76 e0       	ldi	r23, 0x06	; 6
   10a72:	c7 01       	movw	r24, r14
   10a74:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10a78:	89 2b       	or	r24, r25
   10a7a:	51 f4       	brne	.+20     	; 0x10a90 <__EEPROM_REGION_LENGTH__+0xa90>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:114
    {
      parseBytes(my_payload, '.', device.myGW, 4, 10);
   10a7c:	24 e0       	ldi	r18, 0x04	; 4
   10a7e:	30 e0       	ldi	r19, 0x00	; 0
   10a80:	46 ef       	ldi	r20, 0xF6	; 246
   10a82:	5d e0       	ldi	r21, 0x0D	; 13
   10a84:	6e e2       	ldi	r22, 0x2E	; 46
   10a86:	8f ee       	ldi	r24, 0xEF	; 239
   10a88:	98 e0       	ldi	r25, 0x08	; 8
   10a8a:	0e 94 f5 b0 	call	0x161ea	; 0x161ea <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.182]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:115
      cnt = 1;
   10a8e:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:117
    }
    if (strcmp(pch, "dns") == 0)
   10a90:	6e e0       	ldi	r22, 0x0E	; 14
   10a92:	76 e0       	ldi	r23, 0x06	; 6
   10a94:	c7 01       	movw	r24, r14
   10a96:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10a9a:	89 2b       	or	r24, r25
   10a9c:	51 f4       	brne	.+20     	; 0x10ab2 <__EEPROM_REGION_LENGTH__+0xab2>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:119
    {
      parseBytes(my_payload, '.', device.myDNS, 4, 10);
   10a9e:	24 e0       	ldi	r18, 0x04	; 4
   10aa0:	30 e0       	ldi	r19, 0x00	; 0
   10aa2:	42 ef       	ldi	r20, 0xF2	; 242
   10aa4:	5d e0       	ldi	r21, 0x0D	; 13
   10aa6:	6e e2       	ldi	r22, 0x2E	; 46
   10aa8:	8f ee       	ldi	r24, 0xEF	; 239
   10aaa:	98 e0       	ldi	r25, 0x08	; 8
   10aac:	0e 94 f5 b0 	call	0x161ea	; 0x161ea <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.182]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:120
      cnt = 1;
   10ab0:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:122
    }
    if (strcmp(pch, "ntp") == 0)
   10ab2:	62 e1       	ldi	r22, 0x12	; 18
   10ab4:	76 e0       	ldi	r23, 0x06	; 6
   10ab6:	c7 01       	movw	r24, r14
   10ab8:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10abc:	89 2b       	or	r24, r25
   10abe:	51 f4       	brne	.+20     	; 0x10ad4 <__EEPROM_REGION_LENGTH__+0xad4>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:124
    {
      parseBytes(my_payload, '.',device.ntp_server, 4, 10);
   10ac0:	24 e0       	ldi	r18, 0x04	; 4
   10ac2:	30 e0       	ldi	r19, 0x00	; 0
   10ac4:	42 e3       	ldi	r20, 0x32	; 50
   10ac6:	5e e0       	ldi	r21, 0x0E	; 14
   10ac8:	6e e2       	ldi	r22, 0x2E	; 46
   10aca:	8f ee       	ldi	r24, 0xEF	; 239
   10acc:	98 e0       	ldi	r25, 0x08	; 8
   10ace:	0e 94 f5 b0 	call	0x161ea	; 0x161ea <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.182]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:125
      cnt = 1;
   10ad2:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:127
    }
    if (strcmp(pch, "mqtt_host") == 0)
   10ad4:	66 e1       	ldi	r22, 0x16	; 22
   10ad6:	76 e0       	ldi	r23, 0x06	; 6
   10ad8:	c7 01       	movw	r24, r14
   10ada:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10ade:	89 2b       	or	r24, r25
   10ae0:	51 f4       	brne	.+20     	; 0x10af6 <__EEPROM_REGION_LENGTH__+0xaf6>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:129
    {
      parseBytes(my_payload, '.', device.mqtt_server, 4, 10);
   10ae2:	24 e0       	ldi	r18, 0x04	; 4
   10ae4:	30 e0       	ldi	r19, 0x00	; 0
   10ae6:	44 e0       	ldi	r20, 0x04	; 4
   10ae8:	5e e0       	ldi	r21, 0x0E	; 14
   10aea:	6e e2       	ldi	r22, 0x2E	; 46
   10aec:	8f ee       	ldi	r24, 0xEF	; 239
   10aee:	98 e0       	ldi	r25, 0x08	; 8
   10af0:	0e 94 f5 b0 	call	0x161ea	; 0x161ea <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.182]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:130
      cnt = 1;
   10af4:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:132
    }
    if (strcmp(pch, "mqtt_port") == 0)
   10af6:	60 e2       	ldi	r22, 0x20	; 32
   10af8:	76 e0       	ldi	r23, 0x06	; 6
   10afa:	c7 01       	movw	r24, r14
   10afc:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10b00:	89 2b       	or	r24, r25
   10b02:	49 f4       	brne	.+18     	; 0x10b16 <__EEPROM_REGION_LENGTH__+0xb16>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:134
    {
      device.mqtt_port = atoi(my_payload);
   10b04:	8f ee       	ldi	r24, 0xEF	; 239
   10b06:	98 e0       	ldi	r25, 0x08	; 8
   10b08:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   10b0c:	90 93 09 0e 	sts	0x0E09, r25	; 0x800e09 <device+0x25>
   10b10:	80 93 08 0e 	sts	0x0E08, r24	; 0x800e08 <device+0x24>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:135
      cnt = 1;
   10b14:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:137
    }
    if (strcmp(pch, "mqtt_user") == 0)
   10b16:	6a e2       	ldi	r22, 0x2A	; 42
   10b18:	76 e0       	ldi	r23, 0x06	; 6
   10b1a:	c7 01       	movw	r24, r14
   10b1c:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10b20:	89 2b       	or	r24, r25
   10b22:	39 f4       	brne	.+14     	; 0x10b32 <__EEPROM_REGION_LENGTH__+0xb32>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:139
    {
      strcpy(device.mqtt_user, my_payload);
   10b24:	6f ee       	ldi	r22, 0xEF	; 239
   10b26:	78 e0       	ldi	r23, 0x08	; 8
   10b28:	8a e0       	ldi	r24, 0x0A	; 10
   10b2a:	9e e0       	ldi	r25, 0x0E	; 14
   10b2c:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:140
      cnt = 1;
   10b30:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:142
    }
    if (strcmp(pch, "mqtt_pass") == 0)
   10b32:	64 e3       	ldi	r22, 0x34	; 52
   10b34:	76 e0       	ldi	r23, 0x06	; 6
   10b36:	c7 01       	movw	r24, r14
   10b38:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10b3c:	89 2b       	or	r24, r25
   10b3e:	39 f4       	brne	.+14     	; 0x10b4e <__EEPROM_REGION_LENGTH__+0xb4e>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:144
    {
      strcpy(device.mqtt_key, my_payload);
   10b40:	6f ee       	ldi	r22, 0xEF	; 239
   10b42:	78 e0       	ldi	r23, 0x08	; 8
   10b44:	8e e1       	ldi	r24, 0x1E	; 30
   10b46:	9e e0       	ldi	r25, 0x0E	; 14
   10b48:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:145
      cnt = 1;
   10b4c:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:147
    }
    if (strcmp(pch, "name") == 0)
   10b4e:	6f e0       	ldi	r22, 0x0F	; 15
   10b50:	74 e0       	ldi	r23, 0x04	; 4
   10b52:	c7 01       	movw	r24, r14
   10b54:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10b58:	89 2b       	or	r24, r25
   10b5a:	29 f4       	brne	.+10     	; 0x10b66 <__EEPROM_REGION_LENGTH__+0xb66>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:149
    {
      device_set_name(my_payload);
   10b5c:	8f ee       	ldi	r24, 0xEF	; 239
   10b5e:	98 e0       	ldi	r25, 0x08	; 8
   10b60:	0e 94 e9 55 	call	0xabd2	; 0xabd2 <device_set_name(char*)>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:150
      cnt = 2;
   10b64:	12 e0       	ldi	r17, 0x02	; 2
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:152
    }
    pch = strtok (NULL, "/");
   10b66:	6a e8       	ldi	r22, 0x8A	; 138
   10b68:	75 e0       	ldi	r23, 0x05	; 5
   10b6a:	90 e0       	ldi	r25, 0x00	; 0
   10b6c:	80 e0       	ldi	r24, 0x00	; 0
   10b6e:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
   10b72:	7c 01       	movw	r14, r24
   10b74:	45 cf       	rjmp	.-374    	; 0x10a00 <__EEPROM_REGION_LENGTH__+0xa00>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2822
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    if (cnt == 1)
   10b76:	11 30       	cpi	r17, 0x01	; 1
   10b78:	41 f4       	brne	.+16     	; 0x10b8a <__EEPROM_REGION_LENGTH__+0xb8a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2824
    {
      save_setup_network();
   10b7a:	0e 94 11 56 	call	0xac22	; 0xac22 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2829
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
   10b7e:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <selftest_data>
   10b82:	80 68       	ori	r24, 0x80	; 128
   10b84:	80 93 65 0c 	sts	0x0C65, r24	; 0x800c65 <selftest_data>
   10b88:	02 c0       	rjmp	.+4      	; 0x10b8e <__EEPROM_REGION_LENGTH__+0xb8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2827
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
   10b8a:	12 30       	cpi	r17, 0x02	; 2
   10b8c:	c1 f3       	breq	.-16     	; 0x10b7e <__EEPROM_REGION_LENGTH__+0xb7e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2834
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
   10b8e:	60 e4       	ldi	r22, 0x40	; 64
   10b90:	7c e5       	ldi	r23, 0x5C	; 92
   10b92:	c5 01       	movw	r24, r10
   10b94:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2835
  strcat(str1, device.nazev);
   10b98:	6a ef       	ldi	r22, 0xFA	; 250
   10b9a:	7d e0       	ldi	r23, 0x0D	; 13
   10b9c:	c5 01       	movw	r24, r10
   10b9e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2836
  strcat(str1, "/light/set/");
   10ba2:	6e e3       	ldi	r22, 0x3E	; 62
   10ba4:	76 e0       	ldi	r23, 0x06	; 6
   10ba6:	c5 01       	movw	r24, r10
   10ba8:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2837
  if (strncmp(str1, topic, strlen(str1)) == 0)
   10bac:	f5 01       	movw	r30, r10
   10bae:	01 90       	ld	r0, Z+
   10bb0:	00 20       	and	r0, r0
   10bb2:	e9 f7       	brne	.-6      	; 0x10bae <__EEPROM_REGION_LENGTH__+0xbae>
   10bb4:	31 97       	sbiw	r30, 0x01	; 1
   10bb6:	af 01       	movw	r20, r30
   10bb8:	4a 19       	sub	r20, r10
   10bba:	5b 09       	sbc	r21, r11
   10bbc:	b4 01       	movw	r22, r8
   10bbe:	c5 01       	movw	r24, r10
   10bc0:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
   10bc4:	89 2b       	or	r24, r25
   10bc6:	09 f0       	breq	.+2      	; 0x10bca <__EEPROM_REGION_LENGTH__+0xbca>
   10bc8:	46 c0       	rjmp	.+140    	; 0x10c56 <__EEPROM_REGION_LENGTH__+0xc56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2839
  {
    mqtt_process_message++;
   10bca:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
   10bce:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
   10bd2:	01 96       	adiw	r24, 0x01	; 1
   10bd4:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
   10bd8:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2842
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   10bdc:	f5 01       	movw	r30, r10
   10bde:	01 90       	ld	r0, Z+
   10be0:	00 20       	and	r0, r0
   10be2:	e9 f7       	brne	.-6      	; 0x10bde <__EEPROM_REGION_LENGTH__+0xbde>
   10be4:	31 97       	sbiw	r30, 0x01	; 1
   10be6:	ea 19       	sub	r30, r10
   10be8:	fb 09       	sbc	r31, r11
   10bea:	9e 2f       	mov	r25, r30
   10bec:	4e 2f       	mov	r20, r30
   10bee:	84 2f       	mov	r24, r20
   10bf0:	89 1b       	sub	r24, r25
   10bf2:	24 2f       	mov	r18, r20
   10bf4:	30 e0       	ldi	r19, 0x00	; 0
   10bf6:	d4 01       	movw	r26, r8
   10bf8:	0d 90       	ld	r0, X+
   10bfa:	00 20       	and	r0, r0
   10bfc:	e9 f7       	brne	.-6      	; 0x10bf8 <__EEPROM_REGION_LENGTH__+0xbf8>
   10bfe:	11 97       	sbiw	r26, 0x01	; 1
   10c00:	a8 19       	sub	r26, r8
   10c02:	b9 09       	sbc	r27, r9
   10c04:	2a 17       	cp	r18, r26
   10c06:	3b 07       	cpc	r19, r27
   10c08:	78 f4       	brcc	.+30     	; 0x10c28 <__EEPROM_REGION_LENGTH__+0xc28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2844
    {
      str1[cnt] = topic[f];
   10c0a:	a8 ec       	ldi	r26, 0xC8	; 200
   10c0c:	b0 e0       	ldi	r27, 0x00	; 0
   10c0e:	ac 0f       	add	r26, r28
   10c10:	bd 1f       	adc	r27, r29
   10c12:	a8 0f       	add	r26, r24
   10c14:	b1 1d       	adc	r27, r1
   10c16:	28 0d       	add	r18, r8
   10c18:	39 1d       	adc	r19, r9
   10c1a:	f9 01       	movw	r30, r18
   10c1c:	80 81       	ld	r24, Z
   10c1e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2845
      str1[cnt + 1] = 0;
   10c20:	11 96       	adiw	r26, 0x01	; 1
   10c22:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2842
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   10c24:	4f 5f       	subi	r20, 0xFF	; 255
   10c26:	e3 cf       	rjmp	.-58     	; 0x10bee <__EEPROM_REGION_LENGTH__+0xbee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2849
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   10c28:	6a e8       	ldi	r22, 0x8A	; 138
   10c2a:	75 e0       	ldi	r23, 0x05	; 5
   10c2c:	ce 01       	movw	r24, r28
   10c2e:	88 53       	subi	r24, 0x38	; 56
   10c30:	9f 4f       	sbci	r25, 0xFF	; 255
   10c32:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2848
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   10c36:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2850
    pch = strtok (str1, "/");
    while (pch != NULL)
   10c38:	00 97       	sbiw	r24, 0x00	; 0
   10c3a:	69 f0       	breq	.+26     	; 0x10c56 <__EEPROM_REGION_LENGTH__+0xc56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2852
    {
      if (cnt == 0) id = atoi(pch);
   10c3c:	11 11       	cpse	r17, r1
   10c3e:	03 c0       	rjmp	.+6      	; 0x10c46 <__EEPROM_REGION_LENGTH__+0xc46>
   10c40:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   10c44:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2855
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
   10c46:	6a e8       	ldi	r22, 0x8A	; 138
   10c48:	75 e0       	ldi	r23, 0x05	; 5
   10c4a:	90 e0       	ldi	r25, 0x00	; 0
   10c4c:	80 e0       	ldi	r24, 0x00	; 0
   10c4e:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2856
      cnt++;
   10c52:	1f 5f       	subi	r17, 0xFF	; 255
   10c54:	f1 cf       	rjmp	.-30     	; 0x10c38 <__EEPROM_REGION_LENGTH__+0xc38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2861
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
   10c56:	64 ef       	ldi	r22, 0xF4	; 244
   10c58:	7b e5       	ldi	r23, 0x5B	; 91
   10c5a:	c5 01       	movw	r24, r10
   10c5c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2862
  strcat(str1, "output/");
   10c60:	66 ee       	ldi	r22, 0xE6	; 230
   10c62:	73 e0       	ldi	r23, 0x03	; 3
   10c64:	c5 01       	movw	r24, r10
   10c66:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2863
  if (strncmp(str1, topic, strlen(str1)) == 0)
   10c6a:	f5 01       	movw	r30, r10
   10c6c:	01 90       	ld	r0, Z+
   10c6e:	00 20       	and	r0, r0
   10c70:	e9 f7       	brne	.-6      	; 0x10c6c <__EEPROM_REGION_LENGTH__+0xc6c>
   10c72:	31 97       	sbiw	r30, 0x01	; 1
   10c74:	af 01       	movw	r20, r30
   10c76:	4a 19       	sub	r20, r10
   10c78:	5b 09       	sbc	r21, r11
   10c7a:	b4 01       	movw	r22, r8
   10c7c:	c5 01       	movw	r24, r10
   10c7e:	0e 94 a7 e1 	call	0x1c34e	; 0x1c34e <strncmp>
   10c82:	89 2b       	or	r24, r25
   10c84:	09 f0       	breq	.+2      	; 0x10c88 <__EEPROM_REGION_LENGTH__+0xc88>
   10c86:	78 c0       	rjmp	.+240    	; 0x10d78 <__EEPROM_REGION_LENGTH__+0xd78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2865
  {
    mqtt_process_message++;
   10c88:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
   10c8c:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
   10c90:	01 96       	adiw	r24, 0x01	; 1
   10c92:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
   10c96:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2867
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   10c9a:	f5 01       	movw	r30, r10
   10c9c:	01 90       	ld	r0, Z+
   10c9e:	00 20       	and	r0, r0
   10ca0:	e9 f7       	brne	.-6      	; 0x10c9c <__EEPROM_REGION_LENGTH__+0xc9c>
   10ca2:	31 97       	sbiw	r30, 0x01	; 1
   10ca4:	ea 19       	sub	r30, r10
   10ca6:	fb 09       	sbc	r31, r11
   10ca8:	9e 2f       	mov	r25, r30
   10caa:	4e 2f       	mov	r20, r30
   10cac:	84 2f       	mov	r24, r20
   10cae:	89 1b       	sub	r24, r25
   10cb0:	24 2f       	mov	r18, r20
   10cb2:	30 e0       	ldi	r19, 0x00	; 0
   10cb4:	d4 01       	movw	r26, r8
   10cb6:	0d 90       	ld	r0, X+
   10cb8:	00 20       	and	r0, r0
   10cba:	e9 f7       	brne	.-6      	; 0x10cb6 <__EEPROM_REGION_LENGTH__+0xcb6>
   10cbc:	11 97       	sbiw	r26, 0x01	; 1
   10cbe:	a8 19       	sub	r26, r8
   10cc0:	b9 09       	sbc	r27, r9
   10cc2:	2a 17       	cp	r18, r26
   10cc4:	3b 07       	cpc	r19, r27
   10cc6:	78 f4       	brcc	.+30     	; 0x10ce6 <__EEPROM_REGION_LENGTH__+0xce6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2869
    {
      str1[cnt] = topic[f];
   10cc8:	a8 ec       	ldi	r26, 0xC8	; 200
   10cca:	b0 e0       	ldi	r27, 0x00	; 0
   10ccc:	ac 0f       	add	r26, r28
   10cce:	bd 1f       	adc	r27, r29
   10cd0:	a8 0f       	add	r26, r24
   10cd2:	b1 1d       	adc	r27, r1
   10cd4:	28 0d       	add	r18, r8
   10cd6:	39 1d       	adc	r19, r9
   10cd8:	f9 01       	movw	r30, r18
   10cda:	80 81       	ld	r24, Z
   10cdc:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2870
      str1[cnt + 1] = 0;
   10cde:	11 96       	adiw	r26, 0x01	; 1
   10ce0:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2867
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   10ce2:	4f 5f       	subi	r20, 0xFF	; 255
   10ce4:	e3 cf       	rjmp	.-58     	; 0x10cac <__EEPROM_REGION_LENGTH__+0xcac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2874
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   10ce6:	6a e8       	ldi	r22, 0x8A	; 138
   10ce8:	75 e0       	ldi	r23, 0x05	; 5
   10cea:	ce 01       	movw	r24, r28
   10cec:	88 53       	subi	r24, 0x38	; 56
   10cee:	9f 4f       	sbci	r25, 0xFF	; 255
   10cf0:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
   10cf4:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2873
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   10cf6:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2875
    pch = strtok (str1, "/");
    while (pch != NULL)
   10cf8:	01 15       	cp	r16, r1
   10cfa:	11 05       	cpc	r17, r1
   10cfc:	e9 f1       	breq	.+122    	; 0x10d78 <__EEPROM_REGION_LENGTH__+0xd78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2877
    {
      if (cnt == 0) id = atoi(pch);
   10cfe:	f1 10       	cpse	r15, r1
   10d00:	0d c0       	rjmp	.+26     	; 0x10d1c <__EEPROM_REGION_LENGTH__+0xd1c>
   10d02:	c8 01       	movw	r24, r16
   10d04:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   10d08:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2888
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
   10d0a:	6a e8       	ldi	r22, 0x8A	; 138
   10d0c:	75 e0       	ldi	r23, 0x05	; 5
   10d0e:	90 e0       	ldi	r25, 0x00	; 0
   10d10:	80 e0       	ldi	r24, 0x00	; 0
   10d12:	0e 94 fa d4 	call	0x1a9f4	; 0x1a9f4 <strtok>
   10d16:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2889
      cnt++;
   10d18:	f3 94       	inc	r15
   10d1a:	ee cf       	rjmp	.-36     	; 0x10cf8 <__EEPROM_REGION_LENGTH__+0xcf8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2878
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
   10d1c:	f1 e0       	ldi	r31, 0x01	; 1
   10d1e:	ff 12       	cpse	r15, r31
   10d20:	f4 cf       	rjmp	.-24     	; 0x10d0a <__EEPROM_REGION_LENGTH__+0xd0a>
   10d22:	8f e5       	ldi	r24, 0x5F	; 95
   10d24:	c8 2e       	mov	r12, r24
   10d26:	dd 24       	eor	r13, r13
   10d28:	d3 94       	inc	r13
thermostat_ring_get_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   10d2a:	c6 01       	movw	r24, r12
   10d2c:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2881
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
   10d30:	78 12       	cpse	r7, r24
   10d32:	19 c0       	rjmp	.+50     	; 0x10d66 <__EEPROM_REGION_LENGTH__+0xd66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2883
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
   10d34:	6e ed       	ldi	r22, 0xDE	; 222
   10d36:	78 e0       	ldi	r23, 0x08	; 8
   10d38:	c8 01       	movw	r24, r16
   10d3a:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10d3e:	89 2b       	or	r24, r25
   10d40:	29 f0       	breq	.+10     	; 0x10d4c <__EEPROM_REGION_LENGTH__+0xd4c>
   10d42:	e7 2d       	mov	r30, r7
   10d44:	f0 e0       	ldi	r31, 0x00	; 0
   10d46:	ea 59       	subi	r30, 0x9A	; 154
   10d48:	f4 4f       	sbci	r31, 0xF4	; 244
   10d4a:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2884
            if (strcmp(pch, "state")) last_output_update[id] = 0;
   10d4c:	6f ee       	ldi	r22, 0xEF	; 239
   10d4e:	73 e0       	ldi	r23, 0x03	; 3
   10d50:	c8 01       	movw	r24, r16
   10d52:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10d56:	89 2b       	or	r24, r25
   10d58:	c1 f2       	breq	.-80     	; 0x10d0a <__EEPROM_REGION_LENGTH__+0xd0a>
   10d5a:	e7 2d       	mov	r30, r7
   10d5c:	f0 e0       	ldi	r31, 0x00	; 0
   10d5e:	ea 59       	subi	r30, 0x9A	; 154
   10d60:	f4 4f       	sbci	r31, 0xF4	; 244
   10d62:	10 82       	st	Z, r1
   10d64:	d2 cf       	rjmp	.-92     	; 0x10d0a <__EEPROM_REGION_LENGTH__+0xd0a>
   10d66:	21 e2       	ldi	r18, 0x21	; 33
   10d68:	c2 0e       	add	r12, r18
   10d6a:	d1 1c       	adc	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2880
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   10d6c:	84 e0       	ldi	r24, 0x04	; 4
   10d6e:	c8 16       	cp	r12, r24
   10d70:	82 e0       	ldi	r24, 0x02	; 2
   10d72:	d8 06       	cpc	r13, r24
   10d74:	d1 f6       	brne	.-76     	; 0x10d2a <__EEPROM_REGION_LENGTH__+0xd2a>
   10d76:	c9 cf       	rjmp	.-110    	; 0x10d0a <__EEPROM_REGION_LENGTH__+0xd0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2894
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/brightness
  strcpy_P(str1, thermctl_header_in);
   10d78:	60 e4       	ldi	r22, 0x40	; 64
   10d7a:	7c e5       	ldi	r23, 0x5C	; 92
   10d7c:	c5 01       	movw	r24, r10
   10d7e:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2895
  strcat(str1, device.nazev);
   10d82:	6a ef       	ldi	r22, 0xFA	; 250
   10d84:	7d e0       	ldi	r23, 0x0D	; 13
   10d86:	c5 01       	movw	r24, r10
   10d88:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2896
  strcat(str1, "/brightness");
   10d8c:	6a e4       	ldi	r22, 0x4A	; 74
   10d8e:	76 e0       	ldi	r23, 0x06	; 6
   10d90:	c5 01       	movw	r24, r10
   10d92:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2897
  if (strcmp(str1, topic) == 0)
   10d96:	b4 01       	movw	r22, r8
   10d98:	c5 01       	movw	r24, r10
   10d9a:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10d9e:	89 2b       	or	r24, r25
   10da0:	79 f4       	brne	.+30     	; 0x10dc0 <__EEPROM_REGION_LENGTH__+0xdc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2899
  {
    mqtt_process_message++;
   10da2:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
   10da6:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
   10daa:	01 96       	adiw	r24, 0x01	; 1
   10dac:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
   10db0:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2900
    my_touch.TP_SetBacklight(atoi(my_payload));
   10db4:	8f ee       	ldi	r24, 0xEF	; 239
   10db6:	98 e0       	ldi	r25, 0x08	; 8
   10db8:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   10dbc:	0e 94 d9 ad 	call	0x15bb2	; 0x15bb2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.227]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2904
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
   10dc0:	60 e4       	ldi	r22, 0x40	; 64
   10dc2:	7c e5       	ldi	r23, 0x5C	; 92
   10dc4:	c5 01       	movw	r24, r10
   10dc6:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2905
  strcat(str1, device.nazev);
   10dca:	6a ef       	ldi	r22, 0xFA	; 250
   10dcc:	7d e0       	ldi	r23, 0x0D	; 13
   10dce:	c5 01       	movw	r24, r10
   10dd0:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2906
  strcat(str1, "/reload");
   10dd4:	66 e5       	ldi	r22, 0x56	; 86
   10dd6:	76 e0       	ldi	r23, 0x06	; 6
   10dd8:	c5 01       	movw	r24, r10
   10dda:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2907
  if (strcmp(str1, topic) == 0)
   10dde:	b4 01       	movw	r22, r8
   10de0:	c5 01       	movw	r24, r10
   10de2:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10de6:	8c 01       	movw	r16, r24
   10de8:	89 2b       	or	r24, r25
   10dea:	79 f4       	brne	.+30     	; 0x10e0a <__EEPROM_REGION_LENGTH__+0xe0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2909
  {
    mqtt_process_message++;
   10dec:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
   10df0:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
   10df4:	01 96       	adiw	r24, 0x01	; 1
   10df6:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
   10dfa:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2910
    log_error(&mqtt_client, "reload ..... ");
   10dfe:	8e e5       	ldi	r24, 0x5E	; 94
   10e00:	96 e0       	ldi	r25, 0x06	; 6
   10e02:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <log_error(PubSubClient*, char*) [clone .constprop.117]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2911
    resetFunc();
   10e06:	f8 01       	movw	r30, r16
   10e08:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2915
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
   10e0a:	60 e4       	ldi	r22, 0x40	; 64
   10e0c:	7c e5       	ldi	r23, 0x5C	; 92
   10e0e:	c5 01       	movw	r24, r10
   10e10:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2916
  strcat(str1, device.nazev);
   10e14:	6a ef       	ldi	r22, 0xFA	; 250
   10e16:	7d e0       	ldi	r23, 0x0D	; 13
   10e18:	c5 01       	movw	r24, r10
   10e1a:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2917
  strcat(str1, "/bootloader");
   10e1e:	6c e6       	ldi	r22, 0x6C	; 108
   10e20:	76 e0       	ldi	r23, 0x06	; 6
   10e22:	c5 01       	movw	r24, r10
   10e24:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
  if (strcmp(str1, topic) == 0)
   10e28:	b4 01       	movw	r22, r8
   10e2a:	c5 01       	movw	r24, r10
   10e2c:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10e30:	89 2b       	or	r24, r25
   10e32:	e9 f4       	brne	.+58     	; 0x10e6e <__EEPROM_REGION_LENGTH__+0xe6e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2920
  {
    mqtt_process_message++;
   10e34:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
   10e38:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
   10e3c:	01 96       	adiw	r24, 0x01	; 1
   10e3e:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
   10e42:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2921
    log_error(&mqtt_client, "bootloader ..... ");
   10e46:	88 e7       	ldi	r24, 0x78	; 120
   10e48:	96 e0       	ldi	r25, 0x06	; 6
   10e4a:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <log_error(PubSubClient*, char*) [clone .constprop.117]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2922
    EEPROM.write(bootloader_tag, 255);
   10e4e:	6f ef       	ldi	r22, 0xFF	; 255
   10e50:	90 e0       	ldi	r25, 0x00	; 0
   10e52:	80 e0       	ldi	r24, 0x00	; 0
   10e54:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
   10e58:	88 e1       	ldi	r24, 0x18	; 24
   10e5a:	9e e0       	ldi	r25, 0x0E	; 14
   10e5c:	0f b6       	in	r0, 0x3f	; 63
   10e5e:	f8 94       	cli
   10e60:	a8 95       	wdr
   10e62:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   10e66:	0f be       	out	0x3f, r0	; 63
   10e68:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   10e6c:	ff cf       	rjmp	.-2      	; 0x10e6c <__EEPROM_REGION_LENGTH__+0xe6c>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2928
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
   10e6e:	60 e4       	ldi	r22, 0x40	; 64
   10e70:	7c e5       	ldi	r23, 0x5C	; 92
   10e72:	c5 01       	movw	r24, r10
   10e74:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2929
  strcat(str1, device.nazev);
   10e78:	6a ef       	ldi	r22, 0xFA	; 250
   10e7a:	7d e0       	ldi	r23, 0x0D	; 13
   10e7c:	c5 01       	movw	r24, r10
   10e7e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2930
  strcat(str1, "/default");
   10e82:	68 e7       	ldi	r22, 0x78	; 120
   10e84:	75 e0       	ldi	r23, 0x05	; 5
   10e86:	c5 01       	movw	r24, r10
   10e88:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2931
  if (strcmp(str1, topic) == 0)
   10e8c:	b4 01       	movw	r22, r8
   10e8e:	c5 01       	movw	r24, r10
   10e90:	0e 94 97 e1 	call	0x1c32e	; 0x1c32e <strcmp>
   10e94:	89 2b       	or	r24, r25
   10e96:	91 f4       	brne	.+36     	; 0x10ebc <__EEPROM_REGION_LENGTH__+0xebc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2933
  {
    mqtt_process_message++;
   10e98:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
   10e9c:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
   10ea0:	01 96       	adiw	r24, 0x01	; 1
   10ea2:	90 93 59 0b 	sts	0x0B59, r25	; 0x800b59 <mqtt_process_message+0x1>
   10ea6:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2935
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
   10eaa:	8f ee       	ldi	r24, 0xEF	; 239
   10eac:	98 e0       	ldi	r25, 0x08	; 8
   10eae:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <atoi>
   10eb2:	68 2f       	mov	r22, r24
   10eb4:	8a e5       	ldi	r24, 0x5A	; 90
   10eb6:	90 e0       	ldi	r25, 0x00	; 0
   10eb8:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2938
  }

}
   10ebc:	ca 5b       	subi	r28, 0xBA	; 186
   10ebe:	de 4f       	sbci	r29, 0xFE	; 254
   10ec0:	0f b6       	in	r0, 0x3f	; 63
   10ec2:	f8 94       	cli
   10ec4:	de bf       	out	0x3e, r29	; 62
   10ec6:	0f be       	out	0x3f, r0	; 63
   10ec8:	cd bf       	out	0x3d, r28	; 61
   10eca:	df 91       	pop	r29
   10ecc:	cf 91       	pop	r28
   10ece:	1f 91       	pop	r17
   10ed0:	0f 91       	pop	r16
   10ed2:	ff 90       	pop	r15
   10ed4:	ef 90       	pop	r14
   10ed6:	df 90       	pop	r13
   10ed8:	cf 90       	pop	r12
   10eda:	bf 90       	pop	r11
   10edc:	af 90       	pop	r10
   10ede:	9f 90       	pop	r9
   10ee0:	8f 90       	pop	r8
   10ee2:	7f 90       	pop	r7
   10ee4:	6f 90       	pop	r6
   10ee6:	5f 90       	pop	r5
   10ee8:	4f 90       	pop	r4
   10eea:	3f 90       	pop	r3
   10eec:	2f 90       	pop	r2
   10eee:	08 95       	ret

00010ef0 <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1436



/////////////////////////////////////////////////////////////////////////////////////////////
void MenuPrepareStyle(void)
{
   10ef0:	4f 92       	push	r4
   10ef2:	5f 92       	push	r5
   10ef4:	6f 92       	push	r6
   10ef6:	7f 92       	push	r7
   10ef8:	8f 92       	push	r8
   10efa:	9f 92       	push	r9
   10efc:	af 92       	push	r10
   10efe:	bf 92       	push	r11
   10f00:	cf 92       	push	r12
   10f02:	df 92       	push	r13
   10f04:	ef 92       	push	r14
   10f06:	ff 92       	push	r15
   10f08:	0f 93       	push	r16
   10f0a:	1f 93       	push	r17
   10f0c:	cf 93       	push	r28
   10f0e:	df 93       	push	r29
   10f10:	1f 92       	push	r1
   10f12:	cd b7       	in	r28, 0x3d	; 61
   10f14:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1447
  uint16_t color_background;
  uint8_t args1;
  const Menu1 *current;
  ret_fptr *rfnt;

  current = MenuHistoryGetMenu(&args1);
   10f16:	ce 01       	movw	r24, r28
   10f18:	01 96       	adiw	r24, 0x01	; 1
   10f1a:	0e 94 09 3e 	call	0x7c12	; 0x7c12 <MenuHistoryGetMenu(unsigned char*)>
   10f1e:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1448
  attr = pgm_read_byte(&current->atributes);
   10f20:	fc 01       	movw	r30, r24
   10f22:	e2 53       	subi	r30, 0x32	; 50
   10f24:	fd 4f       	sbci	r31, 0xFD	; 253
   10f26:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1449
  x = pgm_read_word(&current->x);
   10f28:	38 97       	sbiw	r30, 0x08	; 8
   10f2a:	c5 90       	lpm	r12, Z+
   10f2c:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1450
  y = pgm_read_word(&current->y);
   10f2e:	fc 01       	movw	r30, r24
   10f30:	e8 53       	subi	r30, 0x38	; 56
   10f32:	fd 4f       	sbci	r31, 0xFD	; 253
   10f34:	e5 90       	lpm	r14, Z+
   10f36:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1451
  size_x = pgm_read_word(&current->size_x);
   10f38:	fc 01       	movw	r30, r24
   10f3a:	e6 53       	subi	r30, 0x36	; 54
   10f3c:	fd 4f       	sbci	r31, 0xFD	; 253
   10f3e:	a5 90       	lpm	r10, Z+
   10f40:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1452
  size_y = pgm_read_word(&current->size_y);
   10f42:	fc 01       	movw	r30, r24
   10f44:	e4 53       	subi	r30, 0x34	; 52
   10f46:	fd 4f       	sbci	r31, 0xFD	; 253
   10f48:	65 90       	lpm	r6, Z+
   10f4a:	74 90       	lpm	r7, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1453
  color_background = pgm_read_word(&current->color_background);
   10f4c:	fc 01       	movw	r30, r24
   10f4e:	e1 53       	subi	r30, 0x31	; 49
   10f50:	fd 4f       	sbci	r31, 0xFD	; 253
   10f52:	85 90       	lpm	r8, Z+
   10f54:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1455

  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
   10f56:	50 fe       	sbrs	r5, 0
   10f58:	03 c0       	rjmp	.+6      	; 0x10f60 <MenuPrepareStyle()+0x70>
DisplayClean():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1563

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
void DisplayClean(uint16_t color)
{
  my_lcd.Fill_Screen(color);
   10f5a:	c4 01       	movw	r24, r8
   10f5c:	0e 94 9b af 	call	0x15f36	; 0x15f36 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.192]>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1460
  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
  {
    DisplayClean(color_background);
  }

  if ((attr & (1 << MENU_ATTRIBUTES_FILL_COLOR_RECTANGLE)) != 0)
   10f60:	51 fe       	sbrs	r5, 1
   10f62:	0e c0       	rjmp	.+28     	; 0x10f80 <MenuPrepareStyle()+0x90>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   10f64:	90 92 8f 0f 	sts	0x0F8F, r9	; 0x800f8f <my_lcd+0xb>
   10f68:	80 92 8e 0f 	sts	0x0F8E, r8	; 0x800f8e <my_lcd+0xa>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1463
  {
    my_lcd.Set_Draw_color(color_background);
    my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
   10f6c:	97 01       	movw	r18, r14
   10f6e:	26 0d       	add	r18, r6
   10f70:	37 1d       	adc	r19, r7
   10f72:	a6 01       	movw	r20, r12
   10f74:	4a 0d       	add	r20, r10
   10f76:	5b 1d       	adc	r21, r11
   10f78:	b7 01       	movw	r22, r14
   10f7a:	c6 01       	movw	r24, r12
   10f7c:	0e 94 78 ae 	call	0x15cf0	; 0x15cf0 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.223]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1466
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
   10f80:	52 fe       	sbrs	r5, 2
   10f82:	2a c0       	rjmp	.+84     	; 0x10fd8 <MenuPrepareStyle()+0xe8>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   10f84:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
   10f88:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
   10f8c:	91 2c       	mov	r9, r1
   10f8e:	81 2c       	mov	r8, r1
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1471
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
   10f90:	6e 0c       	add	r6, r14
   10f92:	7f 1c       	adc	r7, r15
   10f94:	26 01       	movw	r4, r12
   10f96:	4a 0c       	add	r4, r10
   10f98:	5b 1c       	adc	r5, r11
   10f9a:	93 01       	movw	r18, r6
   10f9c:	28 19       	sub	r18, r8
   10f9e:	39 09       	sbc	r19, r9
   10fa0:	a2 01       	movw	r20, r4
   10fa2:	48 19       	sub	r20, r8
   10fa4:	59 09       	sbc	r21, r9
   10fa6:	b7 01       	movw	r22, r14
   10fa8:	c6 01       	movw	r24, r12
   10faa:	88 0d       	add	r24, r8
   10fac:	99 1d       	adc	r25, r9
   10fae:	0e 94 1f ae 	call	0x15c3e	; 0x15c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1472
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
   10fb2:	a5 01       	movw	r20, r10
   10fb4:	48 19       	sub	r20, r8
   10fb6:	59 09       	sbc	r21, r9
   10fb8:	b7 01       	movw	r22, r14
   10fba:	69 5e       	subi	r22, 0xE9	; 233
   10fbc:	7f 4f       	sbci	r23, 0xFF	; 255
   10fbe:	c6 01       	movw	r24, r12
   10fc0:	0e 94 09 ae 	call	0x15c12	; 0x15c12 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.225]>
   10fc4:	8f ef       	ldi	r24, 0xFF	; 255
   10fc6:	88 1a       	sub	r8, r24
   10fc8:	98 0a       	sbc	r9, r24
   10fca:	ef ef       	ldi	r30, 0xFF	; 255
   10fcc:	ee 1a       	sub	r14, r30
   10fce:	fe 0a       	sbc	r15, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1469
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
   10fd0:	f4 e0       	ldi	r31, 0x04	; 4
   10fd2:	8f 16       	cp	r8, r31
   10fd4:	91 04       	cpc	r9, r1
   10fd6:	09 f7       	brne	.-62     	; 0x10f9a <MenuPrepareStyle()+0xaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1475
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    }
  }
  rfnt = (ret_fptr*)pgm_read_word(&current->preload_function);
   10fd8:	f8 01       	movw	r30, r16
   10fda:	e8 52       	subi	r30, 0x28	; 40
   10fdc:	fd 4f       	sbci	r31, 0xFD	; 253
   10fde:	25 91       	lpm	r18, Z+
   10fe0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1476
  (ret_fptr(rfnt))(pgm_read_byte(&current->idx), 0, 0);
   10fe2:	f8 01       	movw	r30, r16
   10fe4:	eb 53       	subi	r30, 0x3B	; 59
   10fe6:	fd 4f       	sbci	r31, 0xFD	; 253
   10fe8:	e4 91       	lpm	r30, Z
   10fea:	40 e0       	ldi	r20, 0x00	; 0
   10fec:	70 e0       	ldi	r23, 0x00	; 0
   10fee:	60 e0       	ldi	r22, 0x00	; 0
   10ff0:	8e 2f       	mov	r24, r30
   10ff2:	90 e0       	ldi	r25, 0x00	; 0
   10ff4:	f9 01       	movw	r30, r18
   10ff6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1478

}
   10ff8:	0f 90       	pop	r0
   10ffa:	df 91       	pop	r29
   10ffc:	cf 91       	pop	r28
   10ffe:	1f 91       	pop	r17
   11000:	0f 91       	pop	r16
   11002:	ff 90       	pop	r15
   11004:	ef 90       	pop	r14
   11006:	df 90       	pop	r13
   11008:	cf 90       	pop	r12
   1100a:	bf 90       	pop	r11
   1100c:	af 90       	pop	r10
   1100e:	9f 90       	pop	r9
   11010:	8f 90       	pop	r8
   11012:	7f 90       	pop	r7
   11014:	6f 90       	pop	r6
   11016:	5f 90       	pop	r5
   11018:	4f 90       	pop	r4
   1101a:	08 95       	ret

0001101c <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryNextMenujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1497
  }
}
///
void MenuHistoryNextMenu(uint16_t id, uint16_t args1, uint8_t args3)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
   1101c:	20 91 e4 0c 	lds	r18, 0x0CE4	; 0x800ce4 <MenuHistoryIndex>
   11020:	2a 30       	cpi	r18, 0x0A	; 10
   11022:	70 f4       	brcc	.+28     	; 0x11040 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1499
  {
    MenuHistoryIndex++;
   11024:	2f 5f       	subi	r18, 0xFF	; 255
   11026:	20 93 e4 0c 	sts	0x0CE4, r18	; 0x800ce4 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1500
    MenuHistory[MenuHistoryIndex] = id;
   1102a:	30 e0       	ldi	r19, 0x00	; 0
   1102c:	f9 01       	movw	r30, r18
   1102e:	e6 52       	subi	r30, 0x26	; 38
   11030:	f3 4f       	sbci	r31, 0xF3	; 243
   11032:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1501
    Global_menu_args1[MenuHistoryIndex] = args1;
   11034:	20 53       	subi	r18, 0x30	; 48
   11036:	33 4f       	sbci	r19, 0xF3	; 243
   11038:	f9 01       	movw	r30, r18
   1103a:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1502
    MenuPrepareStyle();
   1103c:	0c 94 78 87 	jmp	0x10ef0	; 0x10ef0 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1504
  }
}
   11040:	08 95       	ret

00011042 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryPrevMenujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1488


/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (MenuHistoryIndex > 0)
   11042:	80 91 e4 0c 	lds	r24, 0x0CE4	; 0x800ce4 <MenuHistoryIndex>
   11046:	88 23       	and	r24, r24
   11048:	29 f0       	breq	.+10     	; 0x11054 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1490
  {
    MenuHistoryIndex--;
   1104a:	81 50       	subi	r24, 0x01	; 1
   1104c:	80 93 e4 0c 	sts	0x0CE4, r24	; 0x800ce4 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1491
    MenuPrepareStyle();
   11050:	0c 94 78 87 	jmp	0x10ef0	; 0x10ef0 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1493
  }
}
   11054:	08 95       	ret

00011056 <draw_menu(bool)>:
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:962




bool draw_menu(bool redraw)
{
   11056:	2f 92       	push	r2
   11058:	3f 92       	push	r3
   1105a:	4f 92       	push	r4
   1105c:	5f 92       	push	r5
   1105e:	6f 92       	push	r6
   11060:	7f 92       	push	r7
   11062:	8f 92       	push	r8
   11064:	9f 92       	push	r9
   11066:	af 92       	push	r10
   11068:	bf 92       	push	r11
   1106a:	cf 92       	push	r12
   1106c:	df 92       	push	r13
   1106e:	ef 92       	push	r14
   11070:	ff 92       	push	r15
   11072:	0f 93       	push	r16
   11074:	1f 93       	push	r17
   11076:	cf 93       	push	r28
   11078:	df 93       	push	r29
   1107a:	cd b7       	in	r28, 0x3d	; 61
   1107c:	de b7       	in	r29, 0x3e	; 62
   1107e:	c3 5e       	subi	r28, 0xE3	; 227
   11080:	d1 09       	sbc	r29, r1
   11082:	0f b6       	in	r0, 0x3f	; 63
   11084:	f8 94       	cli
   11086:	de bf       	out	0x3e, r29	; 62
   11088:	0f be       	out	0x3f, r0	; 63
   1108a:	cd bf       	out	0x3d, r28	; 61
   1108c:	b8 2e       	mov	r11, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:994
  uint8_t menu_args1;
  uint8_t redraw_class;
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);
   1108e:	ce 01       	movw	r24, r28
   11090:	8d 54       	subi	r24, 0x4D	; 77
   11092:	9f 4f       	sbci	r25, 0xFF	; 255
   11094:	0e 94 09 3e 	call	0x7c12	; 0x7c12 <MenuHistoryGetMenu(unsigned char*)>
   11098:	3c 01       	movw	r6, r24
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:251
  	}        
} 

uint8_t LCDWIKI_TOUCH::TP_Scan(uint8_t mode)
{
	if(TIRQ_STATE==0) 
   1109a:	e0 91 7a 0f 	lds	r30, 0x0F7A	; 0x800f7a <my_touch+0x19>
   1109e:	f0 91 7b 0f 	lds	r31, 0x0F7B	; 0x800f7b <my_touch+0x1a>
   110a2:	80 81       	ld	r24, Z
   110a4:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <my_touch+0x21>
   110a8:	89 23       	and	r24, r25
   110aa:	09 f0       	breq	.+2      	; 0x110ae <draw_menu(bool)+0x58>
   110ac:	a4 c2       	rjmp	.+1352   	; 0x115f6 <draw_menu(bool)+0x5a0>
TP_Read_Coordinate():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:212
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
   110ae:	80 ed       	ldi	r24, 0xD0	; 208
   110b0:	0e 94 fc b2 	call	0x165f8	; 0x165f8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]>
   110b4:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:213
        ytemp=TP_Read_XY(CMD_RDY);
   110b6:	80 e9       	ldi	r24, 0x90	; 144
   110b8:	0e 94 fc b2 	call	0x165f8	; 0x165f8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]>
   110bc:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:212
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
   110be:	80 ed       	ldi	r24, 0xD0	; 208
   110c0:	0e 94 fc b2 	call	0x165f8	; 0x165f8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]>
   110c4:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:213
        ytemp=TP_Read_XY(CMD_RDY);
   110c6:	80 e9       	ldi	r24, 0x90	; 144
   110c8:	0e 94 fc b2 	call	0x165f8	; 0x165f8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]>
   110cc:	6c 01       	movw	r12, r24
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:236
	flag=TP_Read_Coordinate(&x2,&y2);
    if(flag==0)
    {
		return 0;   
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
   110ce:	e8 14       	cp	r14, r8
   110d0:	f9 04       	cpc	r15, r9
   110d2:	48 f0       	brcs	.+18     	; 0x110e6 <draw_menu(bool)+0x90>
   110d4:	c4 01       	movw	r24, r8
   110d6:	c2 96       	adiw	r24, 0x32	; 50
   110d8:	e8 16       	cp	r14, r24
   110da:	f9 06       	cpc	r15, r25
   110dc:	50 f0       	brcs	.+20     	; 0x110f2 <draw_menu(bool)+0x9c>
   110de:	8e 14       	cp	r8, r14
   110e0:	9f 04       	cpc	r9, r15
   110e2:	08 f4       	brcc	.+2      	; 0x110e6 <draw_menu(bool)+0x90>
   110e4:	52 c0       	rjmp	.+164    	; 0x1118a <draw_menu(bool)+0x134>
   110e6:	c7 01       	movw	r24, r14
   110e8:	c2 96       	adiw	r24, 0x32	; 50
   110ea:	88 16       	cp	r8, r24
   110ec:	99 06       	cpc	r9, r25
   110ee:	08 f0       	brcs	.+2      	; 0x110f2 <draw_menu(bool)+0x9c>
   110f0:	4c c0       	rjmp	.+152    	; 0x1118a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:237
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
   110f2:	0c 15       	cp	r16, r12
   110f4:	1d 05       	cpc	r17, r13
   110f6:	48 f0       	brcs	.+18     	; 0x1110a <draw_menu(bool)+0xb4>
   110f8:	c6 01       	movw	r24, r12
   110fa:	c2 96       	adiw	r24, 0x32	; 50
   110fc:	08 17       	cp	r16, r24
   110fe:	19 07       	cpc	r17, r25
   11100:	48 f0       	brcs	.+18     	; 0x11114 <draw_menu(bool)+0xbe>
   11102:	c0 16       	cp	r12, r16
   11104:	d1 06       	cpc	r13, r17
   11106:	08 f4       	brcc	.+2      	; 0x1110a <draw_menu(bool)+0xb4>
   11108:	40 c0       	rjmp	.+128    	; 0x1118a <draw_menu(bool)+0x134>
   1110a:	c8 01       	movw	r24, r16
   1110c:	c2 96       	adiw	r24, 0x32	; 50
   1110e:	c8 16       	cp	r12, r24
   11110:	d9 06       	cpc	r13, r25
   11112:	d8 f5       	brcc	.+118    	; 0x1118a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:239
    {
        *x=(x1+x2)/2;
   11114:	e8 0c       	add	r14, r8
   11116:	f9 1c       	adc	r15, r9
   11118:	97 01       	movw	r18, r14
   1111a:	36 95       	lsr	r19
   1111c:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:266
			temp = (long)XFAC*x/10000;
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
   1111e:	a4 e5       	ldi	r26, 0x54	; 84
   11120:	b3 e0       	ldi	r27, 0x03	; 3
   11122:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__umulhisi3>
   11126:	20 e1       	ldi	r18, 0x10	; 16
   11128:	22 2e       	mov	r2, r18
   1112a:	27 e2       	ldi	r18, 0x27	; 39
   1112c:	32 2e       	mov	r3, r18
   1112e:	41 2c       	mov	r4, r1
   11130:	51 2c       	mov	r5, r1
   11132:	a2 01       	movw	r20, r4
   11134:	91 01       	movw	r18, r2
   11136:	0e 94 2b df 	call	0x1be56	; 0x1be56 <__divmodsi4>
   1113a:	79 01       	movw	r14, r18
   1113c:	6e e0       	ldi	r22, 0x0E	; 14
   1113e:	e6 1a       	sub	r14, r22
   11140:	f1 08       	sbc	r15, r1
   11142:	f0 92 66 0f 	sts	0x0F66, r15	; 0x800f66 <my_touch+0x5>
   11146:	e0 92 65 0f 	sts	0x0F65, r14	; 0x800f65 <my_touch+0x4>
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:240
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    {
        *x=(x1+x2)/2;
        *y=(y1+y2)/2;
   1114a:	0c 0d       	add	r16, r12
   1114c:	1d 1d       	adc	r17, r13
   1114e:	98 01       	movw	r18, r16
   11150:	36 95       	lsr	r19
   11152:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:267
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
   11154:	a4 e0       	ldi	r26, 0x04	; 4
   11156:	b5 e0       	ldi	r27, 0x05	; 5
   11158:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__umulhisi3>
   1115c:	a2 01       	movw	r20, r4
   1115e:	91 01       	movw	r18, r2
   11160:	0e 94 2b df 	call	0x1be56	; 0x1be56 <__divmodsi4>
   11164:	2e 51       	subi	r18, 0x1E	; 30
   11166:	31 09       	sbc	r19, r1
   11168:	30 93 68 0f 	sts	0x0F68, r19	; 0x800f68 <my_touch+0x7>
   1116c:	20 93 67 0f 	sts	0x0F67, r18	; 0x800f67 <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:268
			switch(touch_rotation)
   11170:	80 91 6e 0f 	lds	r24, 0x0F6E	; 0x800f6e <my_touch+0xd>
   11174:	81 30       	cpi	r24, 0x01	; 1
   11176:	09 f4       	brne	.+2      	; 0x1117a <draw_menu(bool)+0x124>
   11178:	f4 c1       	rjmp	.+1000   	; 0x11562 <draw_menu(bool)+0x50c>
   1117a:	08 f4       	brcc	.+2      	; 0x1117e <draw_menu(bool)+0x128>
   1117c:	c1 c1       	rjmp	.+898    	; 0x11500 <draw_menu(bool)+0x4aa>
   1117e:	82 30       	cpi	r24, 0x02	; 2
   11180:	09 f4       	brne	.+2      	; 0x11184 <draw_menu(bool)+0x12e>
   11182:	20 c2       	rjmp	.+1088   	; 0x115c4 <draw_menu(bool)+0x56e>
   11184:	83 30       	cpi	r24, 0x03	; 3
   11186:	09 f4       	brne	.+2      	; 0x1118a <draw_menu(bool)+0x134>
   11188:	29 c2       	rjmp	.+1106   	; 0x115dc <draw_menu(bool)+0x586>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:380
					break;
				default:
					break;
			}
	 	}
		if((touch_statue&TP_PRES_DOWN)==0)
   1118a:	80 91 6d 0f 	lds	r24, 0x0F6D	; 0x800f6d <my_touch+0xc>
   1118e:	87 fd       	sbrc	r24, 7
   11190:	13 c0       	rjmp	.+38     	; 0x111b8 <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:382
		{		 
			touch_statue=TP_PRES_DOWN|TP_CATH_PRES; 
   11192:	80 ec       	ldi	r24, 0xC0	; 192
   11194:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <my_touch+0xc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:383
			x0=x;
   11198:	80 91 65 0f 	lds	r24, 0x0F65	; 0x800f65 <my_touch+0x4>
   1119c:	90 91 66 0f 	lds	r25, 0x0F66	; 0x800f66 <my_touch+0x5>
   111a0:	90 93 62 0f 	sts	0x0F62, r25	; 0x800f62 <my_touch+0x1>
   111a4:	80 93 61 0f 	sts	0x0F61, r24	; 0x800f61 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:384
			y0=y;  	   			 
   111a8:	80 91 67 0f 	lds	r24, 0x0F67	; 0x800f67 <my_touch+0x6>
   111ac:	90 91 68 0f 	lds	r25, 0x0F68	; 0x800f68 <my_touch+0x7>
   111b0:	90 93 64 0f 	sts	0x0F64, r25	; 0x800f64 <my_touch+0x3>
   111b4:	80 93 63 0f 	sts	0x0F63, r24	; 0x800f63 <my_touch+0x2>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1000

  click_x = 0;
  click_y = 0;

  my_touch.TP_Scan(0);
  if (my_touch.TP_Get_State()&TP_PRES_DOWN && redraw == false)
   111b8:	80 91 6d 0f 	lds	r24, 0x0F6D	; 0x800f6d <my_touch+0xc>
   111bc:	87 ff       	sbrs	r24, 7
   111be:	36 c2       	rjmp	.+1132   	; 0x1162c <draw_menu(bool)+0x5d6>
   111c0:	b1 10       	cpse	r11, r1
   111c2:	34 c2       	rjmp	.+1128   	; 0x1162c <draw_menu(bool)+0x5d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1002
  {
    click_x = my_touch.x;
   111c4:	80 91 65 0f 	lds	r24, 0x0F65	; 0x800f65 <my_touch+0x4>
   111c8:	90 91 66 0f 	lds	r25, 0x0F66	; 0x800f66 <my_touch+0x5>
   111cc:	cc 53       	subi	r28, 0x3C	; 60
   111ce:	df 4f       	sbci	r29, 0xFF	; 255
   111d0:	99 83       	std	Y+1, r25	; 0x01
   111d2:	88 83       	st	Y, r24
   111d4:	c4 5c       	subi	r28, 0xC4	; 196
   111d6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1003
    click_y = my_touch.y;
   111d8:	e0 91 67 0f 	lds	r30, 0x0F67	; 0x800f67 <my_touch+0x6>
   111dc:	f0 91 68 0f 	lds	r31, 0x0F68	; 0x800f68 <my_touch+0x7>
   111e0:	ca 53       	subi	r28, 0x3A	; 58
   111e2:	df 4f       	sbci	r29, 0xFF	; 255
   111e4:	f9 83       	std	Y+1, r31	; 0x01
   111e6:	e8 83       	st	Y, r30
   111e8:	c6 5c       	subi	r28, 0xC6	; 198
   111ea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1004
    display_auto_shutdown_now = 0;
   111ec:	10 92 6c 0c 	sts	0x0C6C, r1	; 0x800c6c <display_auto_shutdown_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1005
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0)
   111f0:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
   111f4:	86 ff       	sbrs	r24, 6
   111f6:	03 c0       	rjmp	.+6      	; 0x111fe <draw_menu(bool)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1007
      {
      my_touch.TP_SetOnOff(LED_ON);
   111f8:	81 e0       	ldi	r24, 0x01	; 1
   111fa:	0e 94 cc b2 	call	0x16598	; 0x16598 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.140]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1011
      }
  }

  global_x = pgm_read_word(&current->x);
   111fe:	83 01       	movw	r16, r6
   11200:	0a 53       	subi	r16, 0x3A	; 58
   11202:	1d 4f       	sbci	r17, 0xFD	; 253
   11204:	f8 01       	movw	r30, r16
   11206:	25 91       	lpm	r18, Z+
   11208:	34 91       	lpm	r19, Z
   1120a:	c8 54       	subi	r28, 0x48	; 72
   1120c:	df 4f       	sbci	r29, 0xFF	; 255
   1120e:	39 83       	std	Y+1, r19	; 0x01
   11210:	28 83       	st	Y, r18
   11212:	c8 5b       	subi	r28, 0xB8	; 184
   11214:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1012
  global_y = pgm_read_word(&current->y);
   11216:	73 01       	movw	r14, r6
   11218:	38 e3       	ldi	r19, 0x38	; 56
   1121a:	e3 1a       	sub	r14, r19
   1121c:	3d ef       	ldi	r19, 0xFD	; 253
   1121e:	f3 0a       	sbc	r15, r19
   11220:	f7 01       	movw	r30, r14
   11222:	45 91       	lpm	r20, Z+
   11224:	54 91       	lpm	r21, Z
   11226:	c6 54       	subi	r28, 0x46	; 70
   11228:	df 4f       	sbci	r29, 0xFF	; 255
   1122a:	59 83       	std	Y+1, r21	; 0x01
   1122c:	48 83       	st	Y, r20
   1122e:	ca 5b       	subi	r28, 0xBA	; 186
   11230:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1015


  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_0);
   11232:	f3 01       	movw	r30, r6
   11234:	ee 52       	subi	r30, 0x2E	; 46
   11236:	fd 4f       	sbci	r31, 0xFD	; 253
   11238:	25 91       	lpm	r18, Z+
   1123a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1016
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   1123c:	63 01       	movw	r12, r6
   1123e:	5b e3       	ldi	r21, 0x3B	; 59
   11240:	c5 1a       	sub	r12, r21
   11242:	5d ef       	ldi	r21, 0xFD	; 253
   11244:	d5 0a       	sbc	r13, r21
   11246:	f6 01       	movw	r30, r12
   11248:	84 91       	lpm	r24, Z
   1124a:	cd 54       	subi	r28, 0x4D	; 77
   1124c:	df 4f       	sbci	r29, 0xFF	; 255
   1124e:	68 81       	ld	r22, Y
   11250:	c3 5b       	subi	r28, 0xB3	; 179
   11252:	d0 40       	sbci	r29, 0x00	; 0
   11254:	70 e0       	ldi	r23, 0x00	; 0
   11256:	4f ef       	ldi	r20, 0xFF	; 255
   11258:	90 e0       	ldi	r25, 0x00	; 0
   1125a:	f9 01       	movw	r30, r18
   1125c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1018
  if (rdr == 0)
    cbi(redraw_class, 0);
   1125e:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1017
  global_y = pgm_read_word(&current->y);


  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_0);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
   11260:	88 23       	and	r24, r24
   11262:	11 f0       	breq	.+4      	; 0x11268 <draw_menu(bool)+0x212>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1020
    cbi(redraw_class, 0);
  else
    sbi(redraw_class, 0);
   11264:	aa 24       	eor	r10, r10
   11266:	a3 94       	inc	r10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1022
  ///
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_1);
   11268:	f3 01       	movw	r30, r6
   1126a:	ec 52       	subi	r30, 0x2C	; 44
   1126c:	fd 4f       	sbci	r31, 0xFD	; 253
   1126e:	25 91       	lpm	r18, Z+
   11270:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1023
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   11272:	f6 01       	movw	r30, r12
   11274:	84 91       	lpm	r24, Z
   11276:	cd 54       	subi	r28, 0x4D	; 77
   11278:	df 4f       	sbci	r29, 0xFF	; 255
   1127a:	68 81       	ld	r22, Y
   1127c:	c3 5b       	subi	r28, 0xB3	; 179
   1127e:	d0 40       	sbci	r29, 0x00	; 0
   11280:	70 e0       	ldi	r23, 0x00	; 0
   11282:	4f ef       	ldi	r20, 0xFF	; 255
   11284:	90 e0       	ldi	r25, 0x00	; 0
   11286:	f9 01       	movw	r30, r18
   11288:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1024
  if (rdr == 0)
   1128a:	81 11       	cpse	r24, r1
   1128c:	dc c1       	rjmp	.+952    	; 0x11646 <draw_menu(bool)+0x5f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1025
    cbi(redraw_class, 1);
   1128e:	e8 94       	clt
   11290:	a1 f8       	bld	r10, 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1029
  else
    sbi(redraw_class, 1);
  ///
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_2);
   11292:	f3 01       	movw	r30, r6
   11294:	ea 52       	subi	r30, 0x2A	; 42
   11296:	fd 4f       	sbci	r31, 0xFD	; 253
   11298:	25 91       	lpm	r18, Z+
   1129a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1030
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   1129c:	f6 01       	movw	r30, r12
   1129e:	84 91       	lpm	r24, Z
   112a0:	cd 54       	subi	r28, 0x4D	; 77
   112a2:	df 4f       	sbci	r29, 0xFF	; 255
   112a4:	68 81       	ld	r22, Y
   112a6:	c3 5b       	subi	r28, 0xB3	; 179
   112a8:	d0 40       	sbci	r29, 0x00	; 0
   112aa:	70 e0       	ldi	r23, 0x00	; 0
   112ac:	4f ef       	ldi	r20, 0xFF	; 255
   112ae:	90 e0       	ldi	r25, 0x00	; 0
   112b0:	f9 01       	movw	r30, r18
   112b2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1031
  if (rdr == 0)
   112b4:	81 11       	cpse	r24, r1
   112b6:	ca c1       	rjmp	.+916    	; 0x1164c <draw_menu(bool)+0x5f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1032
    cbi(redraw_class, 2);
   112b8:	8a 2d       	mov	r24, r10
   112ba:	8b 7f       	andi	r24, 0xFB	; 251
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1036
  else
    sbi(redraw_class, 2);
  ///
  if (redraw == false)
   112bc:	b1 10       	cpse	r11, r1
   112be:	c9 c1       	rjmp	.+914    	; 0x11652 <draw_menu(bool)+0x5fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1037
    cbi(redraw_class, 3);
   112c0:	87 7f       	andi	r24, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1039
  else
    sbi(redraw_class, 3);
   112c2:	cf 52       	subi	r28, 0x2F	; 47
   112c4:	df 4f       	sbci	r29, 0xFF	; 255
   112c6:	88 83       	st	Y, r24
   112c8:	c1 5d       	subi	r28, 0xD1	; 209
   112ca:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1042
  /////
  /////
  rdr = pgm_read_byte(&current->redraw_class);
   112cc:	f3 01       	movw	r30, r6
   112ce:	ef 52       	subi	r30, 0x2F	; 47
   112d0:	fd 4f       	sbci	r31, 0xFD	; 253
   112d2:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1043
  if (enable_redraw(rdr, redraw_class) == true)
   112d4:	cf 52       	subi	r28, 0x2F	; 47
   112d6:	df 4f       	sbci	r29, 0xFF	; 255
   112d8:	68 81       	ld	r22, Y
   112da:	c1 5d       	subi	r28, 0xD1	; 209
   112dc:	d0 40       	sbci	r29, 0x00	; 0
   112de:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <enable_redraw(unsigned char, unsigned char)>
   112e2:	88 23       	and	r24, r24
   112e4:	d9 f0       	breq	.+54     	; 0x1131c <draw_menu(bool)+0x2c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1045
  {
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
   112e6:	f3 01       	movw	r30, r6
   112e8:	65 91       	lpm	r22, Z+
   112ea:	74 91       	lpm	r23, Z
   112ec:	ce 01       	movw	r24, r28
   112ee:	01 96       	adiw	r24, 0x01	; 1
   112f0:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1046
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
   112f4:	f7 01       	movw	r30, r14
   112f6:	45 91       	lpm	r20, Z+
   112f8:	54 91       	lpm	r21, Z
   112fa:	f8 01       	movw	r30, r16
   112fc:	65 91       	lpm	r22, Z+
   112fe:	74 91       	lpm	r23, Z
   11300:	4b 5f       	subi	r20, 0xFB	; 251
   11302:	5f 4f       	sbci	r21, 0xFF	; 255
   11304:	6b 5f       	subi	r22, 0xFB	; 251
   11306:	7f 4f       	sbci	r23, 0xFF	; 255
   11308:	ee 24       	eor	r14, r14
   1130a:	ea 94       	dec	r14
   1130c:	fe 2c       	mov	r15, r14
   1130e:	10 e0       	ldi	r17, 0x00	; 0
   11310:	00 e0       	ldi	r16, 0x00	; 0
   11312:	22 e0       	ldi	r18, 0x02	; 2
   11314:	ce 01       	movw	r24, r28
   11316:	01 96       	adiw	r24, 0x01	; 1
   11318:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:996
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
   1131c:	91 2c       	mov	r9, r1
   1131e:	c4 53       	subi	r28, 0x34	; 52
   11320:	df 4f       	sbci	r29, 0xFF	; 255
   11322:	18 82       	st	Y, r1
   11324:	cc 5c       	subi	r28, 0xCC	; 204
   11326:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1050
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
   11328:	93 01       	movw	r18, r6
   1132a:	23 54       	subi	r18, 0x43	; 67
   1132c:	3d 4f       	sbci	r19, 0xFD	; 253
   1132e:	ca 54       	subi	r28, 0x4A	; 74
   11330:	df 4f       	sbci	r29, 0xFF	; 255
   11332:	39 83       	std	Y+1, r19	; 0x01
   11334:	28 83       	st	Y, r18
   11336:	c6 5b       	subi	r28, 0xB6	; 182
   11338:	d0 40       	sbci	r29, 0x00	; 0
   1133a:	ca 54       	subi	r28, 0x4A	; 74
   1133c:	df 4f       	sbci	r29, 0xFF	; 255
   1133e:	e8 81       	ld	r30, Y
   11340:	f9 81       	ldd	r31, Y+1	; 0x01
   11342:	c6 5b       	subi	r28, 0xB6	; 182
   11344:	d0 40       	sbci	r29, 0x00	; 0
   11346:	84 91       	lpm	r24, Z
   11348:	98 16       	cp	r9, r24
   1134a:	08 f0       	brcs	.+2      	; 0x1134e <draw_menu(bool)+0x2f8>
   1134c:	84 c1       	rjmp	.+776    	; 0x11656 <draw_menu(bool)+0x600>
   1134e:	89 2d       	mov	r24, r9
   11350:	90 e0       	ldi	r25, 0x00	; 0
   11352:	01 96       	adiw	r24, 0x01	; 1
   11354:	f1 e1       	ldi	r31, 0x11	; 17
   11356:	f8 9f       	mul	r31, r24
   11358:	20 01       	movw	r4, r0
   1135a:	f9 9f       	mul	r31, r25
   1135c:	50 0c       	add	r5, r0
   1135e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1053
  {
    button_1 = &current->button_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&button_1->enable_show);
   11360:	f3 01       	movw	r30, r6
   11362:	e4 0d       	add	r30, r4
   11364:	f5 1d       	adc	r31, r5
   11366:	25 91       	lpm	r18, Z+
   11368:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1054
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_1->args), menu_args1, idx);
   1136a:	12 01       	movw	r2, r4
   1136c:	44 e0       	ldi	r20, 0x04	; 4
   1136e:	24 1a       	sub	r2, r20
   11370:	31 08       	sbc	r3, r1
   11372:	26 0c       	add	r2, r6
   11374:	37 1c       	adc	r3, r7
   11376:	f1 01       	movw	r30, r2
   11378:	84 91       	lpm	r24, Z
   1137a:	cd 54       	subi	r28, 0x4D	; 77
   1137c:	df 4f       	sbci	r29, 0xFF	; 255
   1137e:	68 81       	ld	r22, Y
   11380:	c3 5b       	subi	r28, 0xB3	; 179
   11382:	d0 40       	sbci	r29, 0x00	; 0
   11384:	70 e0       	ldi	r23, 0x00	; 0
   11386:	49 2d       	mov	r20, r9
   11388:	90 e0       	ldi	r25, 0x00	; 0
   1138a:	f9 01       	movw	r30, r18
   1138c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1055
    if (active == 0) continue;
   1138e:	88 23       	and	r24, r24
   11390:	09 f4       	brne	.+2      	; 0x11394 <draw_menu(bool)+0x33e>
   11392:	b4 c0       	rjmp	.+360    	; 0x114fc <draw_menu(bool)+0x4a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1056
    rdr = pgm_read_byte(&button_1->redraw_class);
   11394:	f2 01       	movw	r30, r4
   11396:	31 97       	sbiw	r30, 0x01	; 1
   11398:	e6 0d       	add	r30, r6
   1139a:	f7 1d       	adc	r31, r7
   1139c:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1057
    if (enable_redraw(rdr, redraw_class) == true)
   1139e:	cf 52       	subi	r28, 0x2F	; 47
   113a0:	df 4f       	sbci	r29, 0xFF	; 255
   113a2:	68 81       	ld	r22, Y
   113a4:	c1 5d       	subi	r28, 0xD1	; 209
   113a6:	d0 40       	sbci	r29, 0x00	; 0
   113a8:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <enable_redraw(unsigned char, unsigned char)>
   113ac:	88 23       	and	r24, r24
   113ae:	09 f4       	brne	.+2      	; 0x113b2 <draw_menu(bool)+0x35c>
   113b0:	43 c0       	rjmp	.+134    	; 0x11438 <draw_menu(bool)+0x3e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1059
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_1->name));
   113b2:	f2 01       	movw	r30, r4
   113b4:	3f 97       	sbiw	r30, 0x0f	; 15
   113b6:	e6 0d       	add	r30, r6
   113b8:	f7 1d       	adc	r31, r7
   113ba:	65 91       	lpm	r22, Z+
   113bc:	74 91       	lpm	r23, Z
   113be:	ce 01       	movw	r24, r28
   113c0:	8f 57       	subi	r24, 0x7F	; 127
   113c2:	9f 4f       	sbci	r25, 0xFF	; 255
   113c4:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1060
      str1[0] = 0;
   113c8:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1061
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&button_1->font_size), str2, str1, 0);
   113ca:	f2 01       	movw	r30, r4
   113cc:	35 97       	sbiw	r30, 0x05	; 5
   113ce:	e6 0d       	add	r30, r6
   113d0:	f7 1d       	adc	r31, r7
   113d2:	e4 90       	lpm	r14, Z
   113d4:	04 91       	lpm	r16, Z
   113d6:	f2 01       	movw	r30, r4
   113d8:	37 97       	sbiw	r30, 0x07	; 7
   113da:	e6 0d       	add	r30, r6
   113dc:	f7 1d       	adc	r31, r7
   113de:	25 91       	lpm	r18, Z+
   113e0:	34 91       	lpm	r19, Z
   113e2:	f2 01       	movw	r30, r4
   113e4:	39 97       	sbiw	r30, 0x09	; 9
   113e6:	e6 0d       	add	r30, r6
   113e8:	f7 1d       	adc	r31, r7
   113ea:	45 91       	lpm	r20, Z+
   113ec:	54 91       	lpm	r21, Z
   113ee:	f2 01       	movw	r30, r4
   113f0:	3b 97       	sbiw	r30, 0x0b	; 11
   113f2:	e6 0d       	add	r30, r6
   113f4:	f7 1d       	adc	r31, r7
   113f6:	65 91       	lpm	r22, Z+
   113f8:	74 91       	lpm	r23, Z
   113fa:	f2 01       	movw	r30, r4
   113fc:	3d 97       	sbiw	r30, 0x0d	; 13
   113fe:	e6 0d       	add	r30, r6
   11400:	f7 1d       	adc	r31, r7
   11402:	85 91       	lpm	r24, Z+
   11404:	94 91       	lpm	r25, Z
   11406:	c6 54       	subi	r28, 0x46	; 70
   11408:	df 4f       	sbci	r29, 0xFF	; 255
   1140a:	e8 81       	ld	r30, Y
   1140c:	f9 81       	ldd	r31, Y+1	; 0x01
   1140e:	ca 5b       	subi	r28, 0xBA	; 186
   11410:	d0 40       	sbci	r29, 0x00	; 0
   11412:	6e 0f       	add	r22, r30
   11414:	7f 1f       	adc	r23, r31
   11416:	81 2c       	mov	r8, r1
   11418:	fe 01       	movw	r30, r28
   1141a:	31 96       	adiw	r30, 0x01	; 1
   1141c:	5f 01       	movw	r10, r30
   1141e:	e0 58       	subi	r30, 0x80	; 128
   11420:	ff 4f       	sbci	r31, 0xFF	; 255
   11422:	6f 01       	movw	r12, r30
   11424:	c8 54       	subi	r28, 0x48	; 72
   11426:	df 4f       	sbci	r29, 0xFF	; 255
   11428:	e8 81       	ld	r30, Y
   1142a:	f9 81       	ldd	r31, Y+1	; 0x01
   1142c:	c8 5b       	subi	r28, 0xB8	; 184
   1142e:	d0 40       	sbci	r29, 0x00	; 0
   11430:	8e 0f       	add	r24, r30
   11432:	9f 1f       	adc	r25, r31
   11434:	0e 94 fc 4a 	call	0x95f8	; 0x95f8 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1063
    }
    if (click_x > 0 && click_y > 0)
   11438:	cc 53       	subi	r28, 0x3C	; 60
   1143a:	df 4f       	sbci	r29, 0xFF	; 255
   1143c:	28 81       	ld	r18, Y
   1143e:	39 81       	ldd	r19, Y+1	; 0x01
   11440:	c4 5c       	subi	r28, 0xC4	; 196
   11442:	d0 40       	sbci	r29, 0x00	; 0
   11444:	23 2b       	or	r18, r19
   11446:	09 f4       	brne	.+2      	; 0x1144a <draw_menu(bool)+0x3f4>
   11448:	59 c0       	rjmp	.+178    	; 0x114fc <draw_menu(bool)+0x4a6>
   1144a:	ca 53       	subi	r28, 0x3A	; 58
   1144c:	df 4f       	sbci	r29, 0xFF	; 255
   1144e:	48 81       	ld	r20, Y
   11450:	59 81       	ldd	r21, Y+1	; 0x01
   11452:	c6 5c       	subi	r28, 0xC6	; 198
   11454:	d0 40       	sbci	r29, 0x00	; 0
   11456:	45 2b       	or	r20, r21
   11458:	09 f4       	brne	.+2      	; 0x1145c <draw_menu(bool)+0x406>
   1145a:	50 c0       	rjmp	.+160    	; 0x114fc <draw_menu(bool)+0x4a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1064
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
   1145c:	f2 01       	movw	r30, r4
   1145e:	37 97       	sbiw	r30, 0x07	; 7
   11460:	e6 0d       	add	r30, r6
   11462:	f7 1d       	adc	r31, r7
   11464:	25 91       	lpm	r18, Z+
   11466:	34 91       	lpm	r19, Z
   11468:	f2 01       	movw	r30, r4
   1146a:	39 97       	sbiw	r30, 0x09	; 9
   1146c:	e6 0d       	add	r30, r6
   1146e:	f7 1d       	adc	r31, r7
   11470:	45 91       	lpm	r20, Z+
   11472:	54 91       	lpm	r21, Z
   11474:	f2 01       	movw	r30, r4
   11476:	3b 97       	sbiw	r30, 0x0b	; 11
   11478:	e6 0d       	add	r30, r6
   1147a:	f7 1d       	adc	r31, r7
   1147c:	65 91       	lpm	r22, Z+
   1147e:	74 91       	lpm	r23, Z
   11480:	f2 01       	movw	r30, r4
   11482:	3d 97       	sbiw	r30, 0x0d	; 13
   11484:	e6 0d       	add	r30, r6
   11486:	f7 1d       	adc	r31, r7
   11488:	85 91       	lpm	r24, Z+
   1148a:	94 91       	lpm	r25, Z
   1148c:	c6 54       	subi	r28, 0x46	; 70
   1148e:	df 4f       	sbci	r29, 0xFF	; 255
   11490:	e8 81       	ld	r30, Y
   11492:	f9 81       	ldd	r31, Y+1	; 0x01
   11494:	ca 5b       	subi	r28, 0xBA	; 186
   11496:	d0 40       	sbci	r29, 0x00	; 0
   11498:	6e 0f       	add	r22, r30
   1149a:	7f 1f       	adc	r23, r31
   1149c:	ca 53       	subi	r28, 0x3A	; 58
   1149e:	df 4f       	sbci	r29, 0xFF	; 255
   114a0:	e8 80       	ld	r14, Y
   114a2:	f9 80       	ldd	r15, Y+1	; 0x01
   114a4:	c6 5c       	subi	r28, 0xC6	; 198
   114a6:	d0 40       	sbci	r29, 0x00	; 0
   114a8:	cc 53       	subi	r28, 0x3C	; 60
   114aa:	df 4f       	sbci	r29, 0xFF	; 255
   114ac:	08 81       	ld	r16, Y
   114ae:	19 81       	ldd	r17, Y+1	; 0x01
   114b0:	c4 5c       	subi	r28, 0xC4	; 196
   114b2:	d0 40       	sbci	r29, 0x00	; 0
   114b4:	c8 54       	subi	r28, 0x48	; 72
   114b6:	df 4f       	sbci	r29, 0xFF	; 255
   114b8:	e8 81       	ld	r30, Y
   114ba:	f9 81       	ldd	r31, Y+1	; 0x01
   114bc:	c8 5b       	subi	r28, 0xB8	; 184
   114be:	d0 40       	sbci	r29, 0x00	; 0
   114c0:	8e 0f       	add	r24, r30
   114c2:	9f 1f       	adc	r25, r31
   114c4:	0e 94 9a 3c 	call	0x7934	; 0x7934 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   114c8:	18 2f       	mov	r17, r24
   114ca:	88 23       	and	r24, r24
   114cc:	b9 f0       	breq	.+46     	; 0x114fc <draw_menu(bool)+0x4a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1066
      {
        fntargs =  (fptr_args*)pgm_read_word(&button_1->onclick);
   114ce:	f2 01       	movw	r30, r4
   114d0:	33 97       	sbiw	r30, 0x03	; 3
   114d2:	e6 0d       	add	r30, r6
   114d4:	f7 1d       	adc	r31, r7
   114d6:	25 91       	lpm	r18, Z+
   114d8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1067
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
   114da:	f1 01       	movw	r30, r2
   114dc:	84 91       	lpm	r24, Z
   114de:	cd 54       	subi	r28, 0x4D	; 77
   114e0:	df 4f       	sbci	r29, 0xFF	; 255
   114e2:	68 81       	ld	r22, Y
   114e4:	c3 5b       	subi	r28, 0xB3	; 179
   114e6:	d0 40       	sbci	r29, 0x00	; 0
   114e8:	70 e0       	ldi	r23, 0x00	; 0
   114ea:	49 2d       	mov	r20, r9
   114ec:	90 e0       	ldi	r25, 0x00	; 0
   114ee:	f9 01       	movw	r30, r18
   114f0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1068
        ret = true;
   114f2:	c4 53       	subi	r28, 0x34	; 52
   114f4:	df 4f       	sbci	r29, 0xFF	; 255
   114f6:	18 83       	st	Y, r17
   114f8:	cc 5c       	subi	r28, 0xCC	; 204
   114fa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1050
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
   114fc:	93 94       	inc	r9
   114fe:	1d cf       	rjmp	.-454    	; 0x1133a <draw_menu(bool)+0x2e4>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:271
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
			switch(touch_rotation)
			{
				case 0:
					if(lcd_rotation == 0)
   11500:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <my_touch+0xe>
   11504:	88 23       	and	r24, r24
   11506:	09 f4       	brne	.+2      	; 0x1150a <draw_menu(bool)+0x4b4>
   11508:	40 ce       	rjmp	.-896    	; 0x1118a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:275
					{
						break;
					}
					else if(lcd_rotation == 1)
   1150a:	81 30       	cpi	r24, 0x01	; 1
   1150c:	59 f4       	brne	.+22     	; 0x11524 <draw_menu(bool)+0x4ce>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:345
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
   1150e:	30 93 66 0f 	sts	0x0F66, r19	; 0x800f66 <my_touch+0x5>
   11512:	20 93 65 0f 	sts	0x0F65, r18	; 0x800f65 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:362
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
   11516:	80 91 6b 0f 	lds	r24, 0x0F6B	; 0x800f6b <my_touch+0xa>
   1151a:	90 91 6c 0f 	lds	r25, 0x0F6C	; 0x800f6c <my_touch+0xb>
   1151e:	8e 19       	sub	r24, r14
   11520:	9f 09       	sbc	r25, r15
   11522:	3d c0       	rjmp	.+122    	; 0x1159e <draw_menu(bool)+0x548>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:283
						tmp = x;
						x=y;
						y=tmp;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
   11524:	82 30       	cpi	r24, 0x02	; 2
   11526:	59 f4       	brne	.+22     	; 0x1153e <draw_menu(bool)+0x4e8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:326
					}
					break;
				case 2:
					if(lcd_rotation == 0)
					{
						x = wid-x;
   11528:	80 91 69 0f 	lds	r24, 0x0F69	; 0x800f69 <my_touch+0x8>
   1152c:	90 91 6a 0f 	lds	r25, 0x0F6A	; 0x800f6a <my_touch+0x9>
   11530:	8e 19       	sub	r24, r14
   11532:	9f 09       	sbc	r25, r15
   11534:	90 93 66 0f 	sts	0x0F66, r25	; 0x800f66 <my_touch+0x5>
   11538:	80 93 65 0f 	sts	0x0F65, r24	; 0x800f65 <my_touch+0x4>
   1153c:	2a c0       	rjmp	.+84     	; 0x11592 <draw_menu(bool)+0x53c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:288
					else if(lcd_rotation == 2)
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 3)
   1153e:	83 30       	cpi	r24, 0x03	; 3
   11540:	09 f0       	breq	.+2      	; 0x11544 <draw_menu(bool)+0x4ee>
   11542:	23 ce       	rjmp	.-954    	; 0x1118a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:334
					else if(lcd_rotation == 1)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
   11544:	f0 92 68 0f 	sts	0x0F68, r15	; 0x800f68 <my_touch+0x7>
   11548:	e0 92 67 0f 	sts	0x0F67, r14	; 0x800f67 <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:335
						x = wid-x;
   1154c:	80 91 69 0f 	lds	r24, 0x0F69	; 0x800f69 <my_touch+0x8>
   11550:	90 91 6a 0f 	lds	r25, 0x0F6A	; 0x800f6a <my_touch+0x9>
   11554:	82 1b       	sub	r24, r18
   11556:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:366
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
   11558:	90 93 66 0f 	sts	0x0F66, r25	; 0x800f66 <my_touch+0x5>
   1155c:	80 93 65 0f 	sts	0x0F65, r24	; 0x800f65 <my_touch+0x4>
   11560:	14 ce       	rjmp	.-984    	; 0x1118a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:298
						y=tmp;
						x = wid-x;
					}
					break;
				case 1:
					if(lcd_rotation == 0)
   11562:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <my_touch+0xe>
   11566:	81 11       	cpse	r24, r1
   11568:	07 c0       	rjmp	.+14     	; 0x11578 <draw_menu(bool)+0x522>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:366
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
   1156a:	80 91 69 0f 	lds	r24, 0x0F69	; 0x800f69 <my_touch+0x8>
   1156e:	90 91 6a 0f 	lds	r25, 0x0F6A	; 0x800f6a <my_touch+0x9>
   11572:	8e 19       	sub	r24, r14
   11574:	9f 09       	sbc	r25, r15
   11576:	f0 cf       	rjmp	.-32     	; 0x11558 <draw_menu(bool)+0x502>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:302
				case 1:
					if(lcd_rotation == 0)
					{
						x = wid-x;
					}
					else if(lcd_rotation == 1)
   11578:	81 30       	cpi	r24, 0x01	; 1
   1157a:	49 f4       	brne	.+18     	; 0x1158e <draw_menu(bool)+0x538>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:372
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
   1157c:	30 93 66 0f 	sts	0x0F66, r19	; 0x800f66 <my_touch+0x5>
   11580:	20 93 65 0f 	sts	0x0F65, r18	; 0x800f65 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:373
						y=tmp;
   11584:	f0 92 68 0f 	sts	0x0F68, r15	; 0x800f68 <my_touch+0x7>
   11588:	e0 92 67 0f 	sts	0x0F67, r14	; 0x800f67 <my_touch+0x6>
   1158c:	fe cd       	rjmp	.-1028   	; 0x1118a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:309
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
					}
					else if(lcd_rotation == 2)
   1158e:	82 30       	cpi	r24, 0x02	; 2
   11590:	59 f4       	brne	.+22     	; 0x115a8 <draw_menu(bool)+0x552>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:353
					}
					break;
				case 3:
					if(lcd_rotation == 0)
					{
						y = heig - y;
   11592:	80 91 6b 0f 	lds	r24, 0x0F6B	; 0x800f6b <my_touch+0xa>
   11596:	90 91 6c 0f 	lds	r25, 0x0F6C	; 0x800f6c <my_touch+0xb>
   1159a:	82 1b       	sub	r24, r18
   1159c:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:362
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
   1159e:	90 93 68 0f 	sts	0x0F68, r25	; 0x800f68 <my_touch+0x7>
   115a2:	80 93 67 0f 	sts	0x0F67, r24	; 0x800f67 <my_touch+0x6>
   115a6:	f1 cd       	rjmp	.-1054   	; 0x1118a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:313
					}
					else if(lcd_rotation == 2)
					{
						y = heig - y;
					}
					else if(lcd_rotation == 3)
   115a8:	83 30       	cpi	r24, 0x03	; 3
   115aa:	09 f0       	breq	.+2      	; 0x115ae <draw_menu(bool)+0x558>
   115ac:	ee cd       	rjmp	.-1060   	; 0x1118a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:361
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
   115ae:	80 91 69 0f 	lds	r24, 0x0F69	; 0x800f69 <my_touch+0x8>
   115b2:	90 91 6a 0f 	lds	r25, 0x0F6A	; 0x800f6a <my_touch+0x9>
   115b6:	82 1b       	sub	r24, r18
   115b8:	93 0b       	sbc	r25, r19
   115ba:	90 93 66 0f 	sts	0x0F66, r25	; 0x800f66 <my_touch+0x5>
   115be:	80 93 65 0f 	sts	0x0F65, r24	; 0x800f65 <my_touch+0x4>
   115c2:	a9 cf       	rjmp	.-174    	; 0x11516 <draw_menu(bool)+0x4c0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:324
						x = wid-x;
						y = heig - y;
					}
					break;
				case 2:
					if(lcd_rotation == 0)
   115c4:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <my_touch+0xe>
   115c8:	88 23       	and	r24, r24
   115ca:	09 f4       	brne	.+2      	; 0x115ce <draw_menu(bool)+0x578>
   115cc:	ad cf       	rjmp	.-166    	; 0x11528 <draw_menu(bool)+0x4d2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:329
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 1)
   115ce:	81 30       	cpi	r24, 0x01	; 1
   115d0:	09 f4       	brne	.+2      	; 0x115d4 <draw_menu(bool)+0x57e>
   115d2:	b8 cf       	rjmp	.-144    	; 0x11544 <draw_menu(bool)+0x4ee>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:341
					}
					else if(lcd_rotation == 2)
					{
						break;
					}
					else if(lcd_rotation == 3)
   115d4:	83 30       	cpi	r24, 0x03	; 3
   115d6:	09 f0       	breq	.+2      	; 0x115da <draw_menu(bool)+0x584>
   115d8:	d8 cd       	rjmp	.-1104   	; 0x1118a <draw_menu(bool)+0x134>
   115da:	99 cf       	rjmp	.-206    	; 0x1150e <draw_menu(bool)+0x4b8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
						y=tmp;
						y = heig - y;
					}
					break;
				case 3:
					if(lcd_rotation == 0)
   115dc:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <my_touch+0xe>
   115e0:	88 23       	and	r24, r24
   115e2:	b9 f2       	breq	.-82     	; 0x11592 <draw_menu(bool)+0x53c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:355
					{
						y = heig - y;
					}
					else if(lcd_rotation == 1)
   115e4:	81 30       	cpi	r24, 0x01	; 1
   115e6:	19 f3       	breq	.-58     	; 0x115ae <draw_menu(bool)+0x558>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:364
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
   115e8:	82 30       	cpi	r24, 0x02	; 2
   115ea:	09 f4       	brne	.+2      	; 0x115ee <draw_menu(bool)+0x598>
   115ec:	be cf       	rjmp	.-132    	; 0x1156a <draw_menu(bool)+0x514>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:368
					{
						x = wid-x;;
					}
					else if(lcd_rotation == 3)
   115ee:	83 30       	cpi	r24, 0x03	; 3
   115f0:	09 f0       	breq	.+2      	; 0x115f4 <draw_menu(bool)+0x59e>
   115f2:	cb cd       	rjmp	.-1130   	; 0x1118a <draw_menu(bool)+0x134>
   115f4:	c3 cf       	rjmp	.-122    	; 0x1157c <draw_menu(bool)+0x526>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:389
			y0=y;  	   			 
		}			   
	}
	else
	{
		if(touch_statue&TP_PRES_DOWN)
   115f6:	80 91 6d 0f 	lds	r24, 0x0F6D	; 0x800f6d <my_touch+0xc>
   115fa:	87 ff       	sbrs	r24, 7
   115fc:	04 c0       	rjmp	.+8      	; 0x11606 <draw_menu(bool)+0x5b0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:391
		{
			touch_statue&=~(1<<7);
   115fe:	8f 77       	andi	r24, 0x7F	; 127
   11600:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <my_touch+0xc>
   11604:	d9 cd       	rjmp	.-1102   	; 0x111b8 <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:395
		}
		else
		{
			x0=0;
   11606:	10 92 62 0f 	sts	0x0F62, r1	; 0x800f62 <my_touch+0x1>
   1160a:	10 92 61 0f 	sts	0x0F61, r1	; 0x800f61 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:396
			y0=0;
   1160e:	10 92 64 0f 	sts	0x0F64, r1	; 0x800f64 <my_touch+0x3>
   11612:	10 92 63 0f 	sts	0x0F63, r1	; 0x800f63 <my_touch+0x2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:397
			x=0xffff;
   11616:	8f ef       	ldi	r24, 0xFF	; 255
   11618:	9f ef       	ldi	r25, 0xFF	; 255
   1161a:	90 93 66 0f 	sts	0x0F66, r25	; 0x800f66 <my_touch+0x5>
   1161e:	80 93 65 0f 	sts	0x0F65, r24	; 0x800f65 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:398
			y=0xffff;
   11622:	90 93 68 0f 	sts	0x0F68, r25	; 0x800f68 <my_touch+0x7>
   11626:	80 93 67 0f 	sts	0x0F67, r24	; 0x800f67 <my_touch+0x6>
   1162a:	c6 cd       	rjmp	.-1140   	; 0x111b8 <draw_menu(bool)+0x162>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:997
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
  click_y = 0;
   1162c:	ca 53       	subi	r28, 0x3A	; 58
   1162e:	df 4f       	sbci	r29, 0xFF	; 255
   11630:	19 82       	std	Y+1, r1	; 0x01
   11632:	18 82       	st	Y, r1
   11634:	c6 5c       	subi	r28, 0xC6	; 198
   11636:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:996
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
   11638:	cc 53       	subi	r28, 0x3C	; 60
   1163a:	df 4f       	sbci	r29, 0xFF	; 255
   1163c:	19 82       	std	Y+1, r1	; 0x01
   1163e:	18 82       	st	Y, r1
   11640:	c4 5c       	subi	r28, 0xC4	; 196
   11642:	d0 40       	sbci	r29, 0x00	; 0
   11644:	dc cd       	rjmp	.-1096   	; 0x111fe <draw_menu(bool)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1027
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_1);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 1);
  else
    sbi(redraw_class, 1);
   11646:	68 94       	set
   11648:	a1 f8       	bld	r10, 1
   1164a:	23 ce       	rjmp	.-954    	; 0x11292 <draw_menu(bool)+0x23c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1034
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_2);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 2);
  else
    sbi(redraw_class, 2);
   1164c:	8a 2d       	mov	r24, r10
   1164e:	84 60       	ori	r24, 0x04	; 4
   11650:	35 ce       	rjmp	.-918    	; 0x112bc <draw_menu(bool)+0x266>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1039
  ///
  if (redraw == false)
    cbi(redraw_class, 3);
  else
    sbi(redraw_class, 3);
   11652:	88 60       	ori	r24, 0x08	; 8
   11654:	36 ce       	rjmp	.-916    	; 0x112c2 <draw_menu(bool)+0x26c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1071
        fntargs =  (fptr_args*)pgm_read_word(&button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   11656:	c4 53       	subi	r28, 0x34	; 52
   11658:	df 4f       	sbci	r29, 0xFF	; 255
   1165a:	f8 81       	ld	r31, Y
   1165c:	cc 5c       	subi	r28, 0xCC	; 204
   1165e:	d0 40       	sbci	r29, 0x00	; 0
   11660:	f1 11       	cpse	r31, r1
   11662:	0c 94 37 9b 	jmp	0x1366e	; 0x1366e <draw_menu(bool)+0x2618>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1073
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
   11666:	91 2c       	mov	r9, r1
   11668:	93 01       	movw	r18, r6
   1166a:	22 54       	subi	r18, 0x42	; 66
   1166c:	3d 4f       	sbci	r19, 0xFD	; 253
   1166e:	c4 54       	subi	r28, 0x44	; 68
   11670:	df 4f       	sbci	r29, 0xFF	; 255
   11672:	39 83       	std	Y+1, r19	; 0x01
   11674:	28 83       	st	Y, r18
   11676:	cc 5b       	subi	r28, 0xBC	; 188
   11678:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1082
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
   1167a:	1e 01       	movw	r2, r28
   1167c:	31 e8       	ldi	r19, 0x81	; 129
   1167e:	23 0e       	add	r2, r19
   11680:	31 1c       	adc	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1073
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
   11682:	c4 54       	subi	r28, 0x44	; 68
   11684:	df 4f       	sbci	r29, 0xFF	; 255
   11686:	e8 81       	ld	r30, Y
   11688:	f9 81       	ldd	r31, Y+1	; 0x01
   1168a:	cc 5b       	subi	r28, 0xBC	; 188
   1168c:	d0 40       	sbci	r29, 0x00	; 0
   1168e:	84 91       	lpm	r24, Z
   11690:	98 16       	cp	r9, r24
   11692:	08 f0       	brcs	.+2      	; 0x11696 <draw_menu(bool)+0x640>
   11694:	1c c1       	rjmp	.+568    	; 0x118ce <draw_menu(bool)+0x878>
   11696:	f7 e1       	ldi	r31, 0x17	; 23
   11698:	9f 9e       	mul	r9, r31
   1169a:	20 01       	movw	r4, r0
   1169c:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1076
  {
    button_2 = &current->button_2[idx];
    rfnt = (ret_fptr*)pgm_read_word(&button_2->enable_show);
   1169e:	f2 01       	movw	r30, r4
   116a0:	ef 53       	subi	r30, 0x3F	; 63
   116a2:	ff 4f       	sbci	r31, 0xFF	; 255
   116a4:	e6 0d       	add	r30, r6
   116a6:	f7 1d       	adc	r31, r7
   116a8:	25 91       	lpm	r18, Z+
   116aa:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1077
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
   116ac:	c2 01       	movw	r24, r4
   116ae:	85 54       	subi	r24, 0x45	; 69
   116b0:	9f 4f       	sbci	r25, 0xFF	; 255
   116b2:	a3 01       	movw	r20, r6
   116b4:	48 0f       	add	r20, r24
   116b6:	59 1f       	adc	r21, r25
   116b8:	ca 54       	subi	r28, 0x4A	; 74
   116ba:	df 4f       	sbci	r29, 0xFF	; 255
   116bc:	59 83       	std	Y+1, r21	; 0x01
   116be:	48 83       	st	Y, r20
   116c0:	c6 5b       	subi	r28, 0xB6	; 182
   116c2:	d0 40       	sbci	r29, 0x00	; 0
   116c4:	fa 01       	movw	r30, r20
   116c6:	84 91       	lpm	r24, Z
   116c8:	cd 54       	subi	r28, 0x4D	; 77
   116ca:	df 4f       	sbci	r29, 0xFF	; 255
   116cc:	68 81       	ld	r22, Y
   116ce:	c3 5b       	subi	r28, 0xB3	; 179
   116d0:	d0 40       	sbci	r29, 0x00	; 0
   116d2:	70 e0       	ldi	r23, 0x00	; 0
   116d4:	49 2d       	mov	r20, r9
   116d6:	90 e0       	ldi	r25, 0x00	; 0
   116d8:	f9 01       	movw	r30, r18
   116da:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1078
    if (active == 0) continue;
   116dc:	88 23       	and	r24, r24
   116de:	09 f4       	brne	.+2      	; 0x116e2 <draw_menu(bool)+0x68c>
   116e0:	f4 c0       	rjmp	.+488    	; 0x118ca <draw_menu(bool)+0x874>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1079
    rdr = pgm_read_byte(&button_2->redraw_class);
   116e2:	f2 01       	movw	r30, r4
   116e4:	e0 54       	subi	r30, 0x40	; 64
   116e6:	ff 4f       	sbci	r31, 0xFF	; 255
   116e8:	e6 0d       	add	r30, r6
   116ea:	f7 1d       	adc	r31, r7
   116ec:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1080
    if (enable_redraw(rdr, redraw_class) == true)
   116ee:	cf 52       	subi	r28, 0x2F	; 47
   116f0:	df 4f       	sbci	r29, 0xFF	; 255
   116f2:	68 81       	ld	r22, Y
   116f4:	c1 5d       	subi	r28, 0xD1	; 209
   116f6:	d0 40       	sbci	r29, 0x00	; 0
   116f8:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <enable_redraw(unsigned char, unsigned char)>
   116fc:	88 23       	and	r24, r24
   116fe:	09 f4       	brne	.+2      	; 0x11702 <draw_menu(bool)+0x6ac>
   11700:	78 c0       	rjmp	.+240    	; 0x117f2 <draw_menu(bool)+0x79c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1082
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
   11702:	f2 01       	movw	r30, r4
   11704:	e4 55       	subi	r30, 0x54	; 84
   11706:	ff 4f       	sbci	r31, 0xFF	; 255
   11708:	e6 0d       	add	r30, r6
   1170a:	f7 1d       	adc	r31, r7
   1170c:	65 91       	lpm	r22, Z+
   1170e:	74 91       	lpm	r23, Z
   11710:	c1 01       	movw	r24, r2
   11712:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1083
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
   11716:	f2 01       	movw	r30, r4
   11718:	e2 54       	subi	r30, 0x42	; 66
   1171a:	ff 4f       	sbci	r31, 0xFF	; 255
   1171c:	e6 0d       	add	r30, r6
   1171e:	f7 1d       	adc	r31, r7
   11720:	25 91       	lpm	r18, Z+
   11722:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1084
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
   11724:	ca 54       	subi	r28, 0x4A	; 74
   11726:	df 4f       	sbci	r29, 0xFF	; 255
   11728:	e8 81       	ld	r30, Y
   1172a:	f9 81       	ldd	r31, Y+1	; 0x01
   1172c:	c6 5b       	subi	r28, 0xB6	; 182
   1172e:	d0 40       	sbci	r29, 0x00	; 0
   11730:	84 91       	lpm	r24, Z
   11732:	cd 54       	subi	r28, 0x4D	; 77
   11734:	df 4f       	sbci	r29, 0xFF	; 255
   11736:	68 81       	ld	r22, Y
   11738:	c3 5b       	subi	r28, 0xB3	; 179
   1173a:	d0 40       	sbci	r29, 0x00	; 0
   1173c:	70 e0       	ldi	r23, 0x00	; 0
   1173e:	49 2d       	mov	r20, r9
   11740:	90 e0       	ldi	r25, 0x00	; 0
   11742:	f9 01       	movw	r30, r18
   11744:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1085
      str1[0] = 0;
   11746:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1090
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
   11748:	f2 01       	movw	r30, r4
   1174a:	e7 54       	subi	r30, 0x47	; 71
   1174c:	ff 4f       	sbci	r31, 0xFF	; 255
   1174e:	e6 0d       	add	r30, r6
   11750:	f7 1d       	adc	r31, r7
   11752:	a5 90       	lpm	r10, Z+
   11754:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1089
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
   11756:	f2 01       	movw	r30, r4
   11758:	e9 54       	subi	r30, 0x49	; 73
   1175a:	ff 4f       	sbci	r31, 0xFF	; 255
   1175c:	e6 0d       	add	r30, r6
   1175e:	f7 1d       	adc	r31, r7
   11760:	c5 90       	lpm	r12, Z+
   11762:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1088
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
   11764:	82 01       	movw	r16, r4
   11766:	0a 54       	subi	r16, 0x4A	; 74
   11768:	1f 4f       	sbci	r17, 0xFF	; 255
   1176a:	06 0d       	add	r16, r6
   1176c:	17 1d       	adc	r17, r7
   1176e:	f8 01       	movw	r30, r16
   11770:	04 91       	lpm	r16, Z
   11772:	f2 01       	movw	r30, r4
   11774:	ec 54       	subi	r30, 0x4C	; 76
   11776:	ff 4f       	sbci	r31, 0xFF	; 255
   11778:	e6 0d       	add	r30, r6
   1177a:	f7 1d       	adc	r31, r7
   1177c:	25 91       	lpm	r18, Z+
   1177e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1087
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
   11780:	f2 01       	movw	r30, r4
   11782:	ee 54       	subi	r30, 0x4E	; 78
   11784:	ff 4f       	sbci	r31, 0xFF	; 255
   11786:	e6 0d       	add	r30, r6
   11788:	f7 1d       	adc	r31, r7
   1178a:	45 91       	lpm	r20, Z+
   1178c:	54 91       	lpm	r21, Z
   1178e:	f2 01       	movw	r30, r4
   11790:	e0 55       	subi	r30, 0x50	; 80
   11792:	ff 4f       	sbci	r31, 0xFF	; 255
   11794:	e6 0d       	add	r30, r6
   11796:	f7 1d       	adc	r31, r7
   11798:	65 91       	lpm	r22, Z+
   1179a:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1086
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
   1179c:	f2 01       	movw	r30, r4
   1179e:	e2 55       	subi	r30, 0x52	; 82
   117a0:	ff 4f       	sbci	r31, 0xFF	; 255
   117a2:	e6 0d       	add	r30, r6
   117a4:	f7 1d       	adc	r31, r7
   117a6:	a5 91       	lpm	r26, Z+
   117a8:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1084
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
   117aa:	88 24       	eor	r8, r8
   117ac:	83 94       	inc	r8
   117ae:	81 11       	cpse	r24, r1
   117b0:	01 c0       	rjmp	.+2      	; 0x117b4 <draw_menu(bool)+0x75e>
   117b2:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1086
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
   117b4:	c6 54       	subi	r28, 0x46	; 70
   117b6:	df 4f       	sbci	r29, 0xFF	; 255
   117b8:	88 81       	ld	r24, Y
   117ba:	99 81       	ldd	r25, Y+1	; 0x01
   117bc:	ca 5b       	subi	r28, 0xBA	; 186
   117be:	d0 40       	sbci	r29, 0x00	; 0
   117c0:	68 0f       	add	r22, r24
   117c2:	79 1f       	adc	r23, r25
   117c4:	e1 e0       	ldi	r30, 0x01	; 1
   117c6:	f0 e0       	ldi	r31, 0x00	; 0
   117c8:	ec 0f       	add	r30, r28
   117ca:	fd 1f       	adc	r31, r29
   117cc:	ff 93       	push	r31
   117ce:	ef 93       	push	r30
   117d0:	3f 92       	push	r3
   117d2:	2f 92       	push	r2
   117d4:	e1 2c       	mov	r14, r1
   117d6:	c8 54       	subi	r28, 0x48	; 72
   117d8:	df 4f       	sbci	r29, 0xFF	; 255
   117da:	88 81       	ld	r24, Y
   117dc:	99 81       	ldd	r25, Y+1	; 0x01
   117de:	c8 5b       	subi	r28, 0xB8	; 184
   117e0:	d0 40       	sbci	r29, 0x00	; 0
   117e2:	8a 0f       	add	r24, r26
   117e4:	9b 1f       	adc	r25, r27
   117e6:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
   117ea:	0f 90       	pop	r0
   117ec:	0f 90       	pop	r0
   117ee:	0f 90       	pop	r0
   117f0:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1092
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    }
    if (click_x > 0 && click_y > 0)
   117f2:	cc 53       	subi	r28, 0x3C	; 60
   117f4:	df 4f       	sbci	r29, 0xFF	; 255
   117f6:	28 81       	ld	r18, Y
   117f8:	39 81       	ldd	r19, Y+1	; 0x01
   117fa:	c4 5c       	subi	r28, 0xC4	; 196
   117fc:	d0 40       	sbci	r29, 0x00	; 0
   117fe:	23 2b       	or	r18, r19
   11800:	09 f4       	brne	.+2      	; 0x11804 <draw_menu(bool)+0x7ae>
   11802:	63 c0       	rjmp	.+198    	; 0x118ca <draw_menu(bool)+0x874>
   11804:	ca 53       	subi	r28, 0x3A	; 58
   11806:	df 4f       	sbci	r29, 0xFF	; 255
   11808:	48 81       	ld	r20, Y
   1180a:	59 81       	ldd	r21, Y+1	; 0x01
   1180c:	c6 5c       	subi	r28, 0xC6	; 198
   1180e:	d0 40       	sbci	r29, 0x00	; 0
   11810:	45 2b       	or	r20, r21
   11812:	09 f4       	brne	.+2      	; 0x11816 <draw_menu(bool)+0x7c0>
   11814:	5a c0       	rjmp	.+180    	; 0x118ca <draw_menu(bool)+0x874>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1093
      if (button_click_touch(global_x + pgm_read_word(&button_2->x), global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
   11816:	f2 01       	movw	r30, r4
   11818:	ec 54       	subi	r30, 0x4C	; 76
   1181a:	ff 4f       	sbci	r31, 0xFF	; 255
   1181c:	e6 0d       	add	r30, r6
   1181e:	f7 1d       	adc	r31, r7
   11820:	25 91       	lpm	r18, Z+
   11822:	34 91       	lpm	r19, Z
   11824:	f2 01       	movw	r30, r4
   11826:	ee 54       	subi	r30, 0x4E	; 78
   11828:	ff 4f       	sbci	r31, 0xFF	; 255
   1182a:	e6 0d       	add	r30, r6
   1182c:	f7 1d       	adc	r31, r7
   1182e:	45 91       	lpm	r20, Z+
   11830:	54 91       	lpm	r21, Z
   11832:	f2 01       	movw	r30, r4
   11834:	e0 55       	subi	r30, 0x50	; 80
   11836:	ff 4f       	sbci	r31, 0xFF	; 255
   11838:	e6 0d       	add	r30, r6
   1183a:	f7 1d       	adc	r31, r7
   1183c:	65 91       	lpm	r22, Z+
   1183e:	74 91       	lpm	r23, Z
   11840:	f2 01       	movw	r30, r4
   11842:	e2 55       	subi	r30, 0x52	; 82
   11844:	ff 4f       	sbci	r31, 0xFF	; 255
   11846:	e6 0d       	add	r30, r6
   11848:	f7 1d       	adc	r31, r7
   1184a:	85 91       	lpm	r24, Z+
   1184c:	94 91       	lpm	r25, Z
   1184e:	c6 54       	subi	r28, 0x46	; 70
   11850:	df 4f       	sbci	r29, 0xFF	; 255
   11852:	e8 81       	ld	r30, Y
   11854:	f9 81       	ldd	r31, Y+1	; 0x01
   11856:	ca 5b       	subi	r28, 0xBA	; 186
   11858:	d0 40       	sbci	r29, 0x00	; 0
   1185a:	6e 0f       	add	r22, r30
   1185c:	7f 1f       	adc	r23, r31
   1185e:	ca 53       	subi	r28, 0x3A	; 58
   11860:	df 4f       	sbci	r29, 0xFF	; 255
   11862:	e8 80       	ld	r14, Y
   11864:	f9 80       	ldd	r15, Y+1	; 0x01
   11866:	c6 5c       	subi	r28, 0xC6	; 198
   11868:	d0 40       	sbci	r29, 0x00	; 0
   1186a:	cc 53       	subi	r28, 0x3C	; 60
   1186c:	df 4f       	sbci	r29, 0xFF	; 255
   1186e:	08 81       	ld	r16, Y
   11870:	19 81       	ldd	r17, Y+1	; 0x01
   11872:	c4 5c       	subi	r28, 0xC4	; 196
   11874:	d0 40       	sbci	r29, 0x00	; 0
   11876:	c8 54       	subi	r28, 0x48	; 72
   11878:	df 4f       	sbci	r29, 0xFF	; 255
   1187a:	e8 81       	ld	r30, Y
   1187c:	f9 81       	ldd	r31, Y+1	; 0x01
   1187e:	c8 5b       	subi	r28, 0xB8	; 184
   11880:	d0 40       	sbci	r29, 0x00	; 0
   11882:	8e 0f       	add	r24, r30
   11884:	9f 1f       	adc	r25, r31
   11886:	0e 94 9a 3c 	call	0x7934	; 0x7934 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1188a:	18 2f       	mov	r17, r24
   1188c:	88 23       	and	r24, r24
   1188e:	e9 f0       	breq	.+58     	; 0x118ca <draw_menu(bool)+0x874>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1095
      {
        fntargs =  (fptr_args*)pgm_read_word(&button_2->onclick);
   11890:	f2 01       	movw	r30, r4
   11892:	e4 54       	subi	r30, 0x44	; 68
   11894:	ff 4f       	sbci	r31, 0xFF	; 255
   11896:	e6 0d       	add	r30, r6
   11898:	f7 1d       	adc	r31, r7
   1189a:	25 91       	lpm	r18, Z+
   1189c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1096
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
   1189e:	ca 54       	subi	r28, 0x4A	; 74
   118a0:	df 4f       	sbci	r29, 0xFF	; 255
   118a2:	e8 81       	ld	r30, Y
   118a4:	f9 81       	ldd	r31, Y+1	; 0x01
   118a6:	c6 5b       	subi	r28, 0xB6	; 182
   118a8:	d0 40       	sbci	r29, 0x00	; 0
   118aa:	84 91       	lpm	r24, Z
   118ac:	cd 54       	subi	r28, 0x4D	; 77
   118ae:	df 4f       	sbci	r29, 0xFF	; 255
   118b0:	68 81       	ld	r22, Y
   118b2:	c3 5b       	subi	r28, 0xB3	; 179
   118b4:	d0 40       	sbci	r29, 0x00	; 0
   118b6:	70 e0       	ldi	r23, 0x00	; 0
   118b8:	49 2d       	mov	r20, r9
   118ba:	90 e0       	ldi	r25, 0x00	; 0
   118bc:	f9 01       	movw	r30, r18
   118be:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1097
        ret = true;
   118c0:	c4 53       	subi	r28, 0x34	; 52
   118c2:	df 4f       	sbci	r29, 0xFF	; 255
   118c4:	18 83       	st	Y, r17
   118c6:	cc 5c       	subi	r28, 0xCC	; 204
   118c8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1073
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
   118ca:	93 94       	inc	r9
   118cc:	da ce       	rjmp	.-588    	; 0x11682 <draw_menu(bool)+0x62c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1100
        fntargs =  (fptr_args*)pgm_read_word(&button_2->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   118ce:	c4 53       	subi	r28, 0x34	; 52
   118d0:	df 4f       	sbci	r29, 0xFF	; 255
   118d2:	f8 81       	ld	r31, Y
   118d4:	cc 5c       	subi	r28, 0xCC	; 204
   118d6:	d0 40       	sbci	r29, 0x00	; 0
   118d8:	f1 11       	cpse	r31, r1
   118da:	0c 94 37 9b 	jmp	0x1366e	; 0x1366e <draw_menu(bool)+0x2618>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1102
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
   118de:	b1 2c       	mov	r11, r1
   118e0:	13 01       	movw	r2, r6
   118e2:	21 e4       	ldi	r18, 0x41	; 65
   118e4:	22 1a       	sub	r2, r18
   118e6:	2d ef       	ldi	r18, 0xFD	; 253
   118e8:	32 0a       	sbc	r3, r18
   118ea:	b2 e1       	ldi	r27, 0x12	; 18
   118ec:	5b 2e       	mov	r5, r27
   118ee:	f1 01       	movw	r30, r2
   118f0:	84 91       	lpm	r24, Z
   118f2:	b8 16       	cp	r11, r24
   118f4:	08 f0       	brcs	.+2      	; 0x118f8 <draw_menu(bool)+0x8a2>
   118f6:	cc c0       	rjmp	.+408    	; 0x11a90 <draw_menu(bool)+0xa3a>
   118f8:	b5 9c       	mul	r11, r5
   118fa:	40 01       	movw	r8, r0
   118fc:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1105
  {
    function_1 = &current->function_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&function_1->enable_show);
   118fe:	f4 01       	movw	r30, r8
   11900:	e3 5d       	subi	r30, 0xD3	; 211
   11902:	fe 4f       	sbci	r31, 0xFE	; 254
   11904:	e6 0d       	add	r30, r6
   11906:	f7 1d       	adc	r31, r7
   11908:	25 91       	lpm	r18, Z+
   1190a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1106
    active = (ret_fptr(rfnt))(pgm_read_byte(&function_1->args), menu_args1, idx);
   1190c:	84 01       	movw	r16, r8
   1190e:	0d 5d       	subi	r16, 0xDD	; 221
   11910:	1e 4f       	sbci	r17, 0xFE	; 254
   11912:	06 0d       	add	r16, r6
   11914:	17 1d       	adc	r17, r7
   11916:	f8 01       	movw	r30, r16
   11918:	84 91       	lpm	r24, Z
   1191a:	cd 54       	subi	r28, 0x4D	; 77
   1191c:	df 4f       	sbci	r29, 0xFF	; 255
   1191e:	68 81       	ld	r22, Y
   11920:	c3 5b       	subi	r28, 0xB3	; 179
   11922:	d0 40       	sbci	r29, 0x00	; 0
   11924:	70 e0       	ldi	r23, 0x00	; 0
   11926:	4b 2d       	mov	r20, r11
   11928:	90 e0       	ldi	r25, 0x00	; 0
   1192a:	f9 01       	movw	r30, r18
   1192c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1107
    if (active == 0) continue;
   1192e:	88 23       	and	r24, r24
   11930:	09 f4       	brne	.+2      	; 0x11934 <draw_menu(bool)+0x8de>
   11932:	ac c0       	rjmp	.+344    	; 0x11a8c <draw_menu(bool)+0xa36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1108
    rdr = pgm_read_byte(&function_1->redraw_class);
   11934:	f4 01       	movw	r30, r8
   11936:	e6 5d       	subi	r30, 0xD6	; 214
   11938:	fe 4f       	sbci	r31, 0xFE	; 254
   1193a:	e6 0d       	add	r30, r6
   1193c:	f7 1d       	adc	r31, r7
   1193e:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1109
    if (enable_redraw(rdr, redraw_class) == true)
   11940:	cf 52       	subi	r28, 0x2F	; 47
   11942:	df 4f       	sbci	r29, 0xFF	; 255
   11944:	68 81       	ld	r22, Y
   11946:	c1 5d       	subi	r28, 0xD1	; 209
   11948:	d0 40       	sbci	r29, 0x00	; 0
   1194a:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <enable_redraw(unsigned char, unsigned char)>
   1194e:	88 23       	and	r24, r24
   11950:	09 f4       	brne	.+2      	; 0x11954 <draw_menu(bool)+0x8fe>
   11952:	4a c0       	rjmp	.+148    	; 0x119e8 <draw_menu(bool)+0x992>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1111
    {
      strcpy_P(str1, (char*)pgm_read_word(&function_1->name));
   11954:	f4 01       	movw	r30, r8
   11956:	e1 5d       	subi	r30, 0xD1	; 209
   11958:	fe 4f       	sbci	r31, 0xFE	; 254
   1195a:	e6 0d       	add	r30, r6
   1195c:	f7 1d       	adc	r31, r7
   1195e:	65 91       	lpm	r22, Z+
   11960:	74 91       	lpm	r23, Z
   11962:	ce 01       	movw	r24, r28
   11964:	01 96       	adiw	r24, 0x01	; 1
   11966:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1112
      fnt_coordinate_xy =  (fptr_coordinate_xy*)pgm_read_word(&function_1->fnt_coordinate_xy);
   1196a:	f4 01       	movw	r30, r8
   1196c:	ec 5d       	subi	r30, 0xDC	; 220
   1196e:	fe 4f       	sbci	r31, 0xFE	; 254
   11970:	e6 0d       	add	r30, r6
   11972:	f7 1d       	adc	r31, r7
   11974:	a5 91       	lpm	r26, Z+
   11976:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1113
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_byte(&function_1->args), menu_args1, str1);
   11978:	f8 01       	movw	r30, r16
   1197a:	04 91       	lpm	r16, Z
   1197c:	f4 01       	movw	r30, r8
   1197e:	e8 5d       	subi	r30, 0xD8	; 216
   11980:	fe 4f       	sbci	r31, 0xFE	; 254
   11982:	e6 0d       	add	r30, r6
   11984:	f7 1d       	adc	r31, r7
   11986:	25 91       	lpm	r18, Z+
   11988:	34 91       	lpm	r19, Z
   1198a:	f4 01       	movw	r30, r8
   1198c:	ea 5d       	subi	r30, 0xDA	; 218
   1198e:	fe 4f       	sbci	r31, 0xFE	; 254
   11990:	e6 0d       	add	r30, r6
   11992:	f7 1d       	adc	r31, r7
   11994:	45 91       	lpm	r20, Z+
   11996:	54 91       	lpm	r21, Z
   11998:	f4 01       	movw	r30, r8
   1199a:	ef 5d       	subi	r30, 0xDF	; 223
   1199c:	fe 4f       	sbci	r31, 0xFE	; 254
   1199e:	e6 0d       	add	r30, r6
   119a0:	f7 1d       	adc	r31, r7
   119a2:	65 91       	lpm	r22, Z+
   119a4:	74 91       	lpm	r23, Z
   119a6:	f4 01       	movw	r30, r8
   119a8:	e1 5e       	subi	r30, 0xE1	; 225
   119aa:	fe 4f       	sbci	r31, 0xFE	; 254
   119ac:	e6 0d       	add	r30, r6
   119ae:	f7 1d       	adc	r31, r7
   119b0:	85 91       	lpm	r24, Z+
   119b2:	94 91       	lpm	r25, Z
   119b4:	c6 54       	subi	r28, 0x46	; 70
   119b6:	df 4f       	sbci	r29, 0xFF	; 255
   119b8:	e8 81       	ld	r30, Y
   119ba:	f9 81       	ldd	r31, Y+1	; 0x01
   119bc:	ca 5b       	subi	r28, 0xBA	; 186
   119be:	d0 40       	sbci	r29, 0x00	; 0
   119c0:	6e 0f       	add	r22, r30
   119c2:	7f 1f       	adc	r23, r31
   119c4:	fe 01       	movw	r30, r28
   119c6:	31 96       	adiw	r30, 0x01	; 1
   119c8:	6f 01       	movw	r12, r30
   119ca:	cd 54       	subi	r28, 0x4D	; 77
   119cc:	df 4f       	sbci	r29, 0xFF	; 255
   119ce:	e8 80       	ld	r14, Y
   119d0:	c3 5b       	subi	r28, 0xB3	; 179
   119d2:	d0 40       	sbci	r29, 0x00	; 0
   119d4:	c8 54       	subi	r28, 0x48	; 72
   119d6:	df 4f       	sbci	r29, 0xFF	; 255
   119d8:	e8 81       	ld	r30, Y
   119da:	f9 81       	ldd	r31, Y+1	; 0x01
   119dc:	c8 5b       	subi	r28, 0xB8	; 184
   119de:	d0 40       	sbci	r29, 0x00	; 0
   119e0:	8e 0f       	add	r24, r30
   119e2:	9f 1f       	adc	r25, r31
   119e4:	fd 01       	movw	r30, r26
   119e6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1115
    }
    if (click_x > 0 && click_y > 0)
   119e8:	cc 53       	subi	r28, 0x3C	; 60
   119ea:	df 4f       	sbci	r29, 0xFF	; 255
   119ec:	28 81       	ld	r18, Y
   119ee:	39 81       	ldd	r19, Y+1	; 0x01
   119f0:	c4 5c       	subi	r28, 0xC4	; 196
   119f2:	d0 40       	sbci	r29, 0x00	; 0
   119f4:	23 2b       	or	r18, r19
   119f6:	09 f4       	brne	.+2      	; 0x119fa <draw_menu(bool)+0x9a4>
   119f8:	49 c0       	rjmp	.+146    	; 0x11a8c <draw_menu(bool)+0xa36>
   119fa:	ca 53       	subi	r28, 0x3A	; 58
   119fc:	df 4f       	sbci	r29, 0xFF	; 255
   119fe:	48 81       	ld	r20, Y
   11a00:	59 81       	ldd	r21, Y+1	; 0x01
   11a02:	c6 5c       	subi	r28, 0xC6	; 198
   11a04:	d0 40       	sbci	r29, 0x00	; 0
   11a06:	45 2b       	or	r20, r21
   11a08:	09 f4       	brne	.+2      	; 0x11a0c <draw_menu(bool)+0x9b6>
   11a0a:	40 c0       	rjmp	.+128    	; 0x11a8c <draw_menu(bool)+0xa36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1116
      if (button_click_touch(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), click_x, click_y) == true)
   11a0c:	f4 01       	movw	r30, r8
   11a0e:	e8 5d       	subi	r30, 0xD8	; 216
   11a10:	fe 4f       	sbci	r31, 0xFE	; 254
   11a12:	e6 0d       	add	r30, r6
   11a14:	f7 1d       	adc	r31, r7
   11a16:	25 91       	lpm	r18, Z+
   11a18:	34 91       	lpm	r19, Z
   11a1a:	f4 01       	movw	r30, r8
   11a1c:	ea 5d       	subi	r30, 0xDA	; 218
   11a1e:	fe 4f       	sbci	r31, 0xFE	; 254
   11a20:	e6 0d       	add	r30, r6
   11a22:	f7 1d       	adc	r31, r7
   11a24:	45 91       	lpm	r20, Z+
   11a26:	54 91       	lpm	r21, Z
   11a28:	f4 01       	movw	r30, r8
   11a2a:	ef 5d       	subi	r30, 0xDF	; 223
   11a2c:	fe 4f       	sbci	r31, 0xFE	; 254
   11a2e:	e6 0d       	add	r30, r6
   11a30:	f7 1d       	adc	r31, r7
   11a32:	65 91       	lpm	r22, Z+
   11a34:	74 91       	lpm	r23, Z
   11a36:	f4 01       	movw	r30, r8
   11a38:	e1 5e       	subi	r30, 0xE1	; 225
   11a3a:	fe 4f       	sbci	r31, 0xFE	; 254
   11a3c:	e6 0d       	add	r30, r6
   11a3e:	f7 1d       	adc	r31, r7
   11a40:	85 91       	lpm	r24, Z+
   11a42:	94 91       	lpm	r25, Z
   11a44:	c6 54       	subi	r28, 0x46	; 70
   11a46:	df 4f       	sbci	r29, 0xFF	; 255
   11a48:	e8 81       	ld	r30, Y
   11a4a:	f9 81       	ldd	r31, Y+1	; 0x01
   11a4c:	ca 5b       	subi	r28, 0xBA	; 186
   11a4e:	d0 40       	sbci	r29, 0x00	; 0
   11a50:	6e 0f       	add	r22, r30
   11a52:	7f 1f       	adc	r23, r31
   11a54:	ca 53       	subi	r28, 0x3A	; 58
   11a56:	df 4f       	sbci	r29, 0xFF	; 255
   11a58:	e8 80       	ld	r14, Y
   11a5a:	f9 80       	ldd	r15, Y+1	; 0x01
   11a5c:	c6 5c       	subi	r28, 0xC6	; 198
   11a5e:	d0 40       	sbci	r29, 0x00	; 0
   11a60:	cc 53       	subi	r28, 0x3C	; 60
   11a62:	df 4f       	sbci	r29, 0xFF	; 255
   11a64:	08 81       	ld	r16, Y
   11a66:	19 81       	ldd	r17, Y+1	; 0x01
   11a68:	c4 5c       	subi	r28, 0xC4	; 196
   11a6a:	d0 40       	sbci	r29, 0x00	; 0
   11a6c:	c8 54       	subi	r28, 0x48	; 72
   11a6e:	df 4f       	sbci	r29, 0xFF	; 255
   11a70:	e8 81       	ld	r30, Y
   11a72:	f9 81       	ldd	r31, Y+1	; 0x01
   11a74:	c8 5b       	subi	r28, 0xB8	; 184
   11a76:	d0 40       	sbci	r29, 0x00	; 0
   11a78:	8e 0f       	add	r24, r30
   11a7a:	9f 1f       	adc	r25, r31
   11a7c:	0e 94 9a 3c 	call	0x7934	; 0x7934 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   11a80:	88 23       	and	r24, r24
   11a82:	21 f0       	breq	.+8      	; 0x11a8c <draw_menu(bool)+0xa36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1121
      {
        //fntargs =  pgm_read_word(&function_1->onclick);
        //((fptr_args)fntargs)(pgm_read_byte(&function_1->args), menu_args1);
        //ret = true;
        printf("mrdka funkce\n");
   11a84:	84 ee       	ldi	r24, 0xE4	; 228
   11a86:	96 e0       	ldi	r25, 0x06	; 6
   11a88:	0e 94 c4 e1 	call	0x1c388	; 0x1c388 <puts>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1102
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
   11a8c:	b3 94       	inc	r11
   11a8e:	2f cf       	rjmp	.-418    	; 0x118ee <draw_menu(bool)+0x898>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1127
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
   11a90:	ca 54       	subi	r28, 0x4A	; 74
   11a92:	df 4f       	sbci	r29, 0xFF	; 255
   11a94:	18 82       	st	Y, r1
   11a96:	c6 5b       	subi	r28, 0xB6	; 182
   11a98:	d0 40       	sbci	r29, 0x00	; 0
   11a9a:	93 01       	movw	r18, r6
   11a9c:	20 54       	subi	r18, 0x40	; 64
   11a9e:	3d 4f       	sbci	r19, 0xFD	; 253
   11aa0:	c8 53       	subi	r28, 0x38	; 56
   11aa2:	df 4f       	sbci	r29, 0xFF	; 255
   11aa4:	39 83       	std	Y+1, r19	; 0x01
   11aa6:	28 83       	st	Y, r18
   11aa8:	c8 5c       	subi	r28, 0xC8	; 200
   11aaa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1133
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, (char*)pgm_read_word(&switch_1->name));
   11aac:	4e 01       	movw	r8, r28
   11aae:	31 e8       	ldi	r19, 0x81	; 129
   11ab0:	83 0e       	add	r8, r19
   11ab2:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1138
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
   11ab4:	ae 01       	movw	r20, r28
   11ab6:	4f 5f       	subi	r20, 0xFF	; 255
   11ab8:	5f 4f       	sbci	r21, 0xFF	; 255
   11aba:	cc 54       	subi	r28, 0x4C	; 76
   11abc:	df 4f       	sbci	r29, 0xFF	; 255
   11abe:	59 83       	std	Y+1, r21	; 0x01
   11ac0:	48 83       	st	Y, r20
   11ac2:	c4 5b       	subi	r28, 0xB4	; 180
   11ac4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1127
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
   11ac6:	c8 53       	subi	r28, 0x38	; 56
   11ac8:	df 4f       	sbci	r29, 0xFF	; 255
   11aca:	e8 81       	ld	r30, Y
   11acc:	f9 81       	ldd	r31, Y+1	; 0x01
   11ace:	c8 5c       	subi	r28, 0xC8	; 200
   11ad0:	d0 40       	sbci	r29, 0x00	; 0
   11ad2:	84 91       	lpm	r24, Z
   11ad4:	ca 54       	subi	r28, 0x4A	; 74
   11ad6:	df 4f       	sbci	r29, 0xFF	; 255
   11ad8:	f8 81       	ld	r31, Y
   11ada:	c6 5b       	subi	r28, 0xB6	; 182
   11adc:	d0 40       	sbci	r29, 0x00	; 0
   11ade:	f8 17       	cp	r31, r24
   11ae0:	08 f0       	brcs	.+2      	; 0x11ae4 <draw_menu(bool)+0xa8e>
   11ae2:	d1 c1       	rjmp	.+930    	; 0x11e86 <draw_menu(bool)+0xe30>
   11ae4:	27 e1       	ldi	r18, 0x17	; 23
   11ae6:	f2 9f       	mul	r31, r18
   11ae8:	60 01       	movw	r12, r0
   11aea:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1130
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
   11aec:	f6 01       	movw	r30, r12
   11aee:	e3 58       	subi	r30, 0x83	; 131
   11af0:	fe 4f       	sbci	r31, 0xFE	; 254
   11af2:	e6 0d       	add	r30, r6
   11af4:	f7 1d       	adc	r31, r7
   11af6:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1131
    if (enable_redraw(rdr, redraw_class) == true)
   11af8:	cf 52       	subi	r28, 0x2F	; 47
   11afa:	df 4f       	sbci	r29, 0xFF	; 255
   11afc:	68 81       	ld	r22, Y
   11afe:	c1 5d       	subi	r28, 0xD1	; 209
   11b00:	d0 40       	sbci	r29, 0x00	; 0
   11b02:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <enable_redraw(unsigned char, unsigned char)>
   11b06:	88 23       	and	r24, r24
   11b08:	09 f4       	brne	.+2      	; 0x11b0c <draw_menu(bool)+0xab6>
   11b0a:	42 c1       	rjmp	.+644    	; 0x11d90 <draw_menu(bool)+0xd3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1133
    {
      strcpy_P(str2, (char*)pgm_read_word(&switch_1->name));
   11b0c:	f6 01       	movw	r30, r12
   11b0e:	e9 59       	subi	r30, 0x99	; 153
   11b10:	fe 4f       	sbci	r31, 0xFE	; 254
   11b12:	e6 0d       	add	r30, r6
   11b14:	f7 1d       	adc	r31, r7
   11b16:	65 91       	lpm	r22, Z+
   11b18:	74 91       	lpm	r23, Z
   11b1a:	c4 01       	movw	r24, r8
   11b1c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1134
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
   11b20:	f6 01       	movw	r30, r12
   11b22:	e7 58       	subi	r30, 0x87	; 135
   11b24:	fe 4f       	sbci	r31, 0xFE	; 254
   11b26:	e6 0d       	add	r30, r6
   11b28:	f7 1d       	adc	r31, r7
   11b2a:	25 91       	lpm	r18, Z+
   11b2c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1135
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
   11b2e:	f6 01       	movw	r30, r12
   11b30:	e5 58       	subi	r30, 0x85	; 133
   11b32:	fe 4f       	sbci	r31, 0xFE	; 254
   11b34:	e6 0d       	add	r30, r6
   11b36:	f7 1d       	adc	r31, r7
   11b38:	e5 90       	lpm	r14, Z+
   11b3a:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1136
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
   11b3c:	86 01       	movw	r16, r12
   11b3e:	0a 58       	subi	r16, 0x8A	; 138
   11b40:	1e 4f       	sbci	r17, 0xFE	; 254
   11b42:	06 0d       	add	r16, r6
   11b44:	17 1d       	adc	r17, r7
   11b46:	f8 01       	movw	r30, r16
   11b48:	84 91       	lpm	r24, Z
   11b4a:	cd 54       	subi	r28, 0x4D	; 77
   11b4c:	df 4f       	sbci	r29, 0xFF	; 255
   11b4e:	68 81       	ld	r22, Y
   11b50:	c3 5b       	subi	r28, 0xB3	; 179
   11b52:	d0 40       	sbci	r29, 0x00	; 0
   11b54:	70 e0       	ldi	r23, 0x00	; 0
   11b56:	ca 54       	subi	r28, 0x4A	; 74
   11b58:	df 4f       	sbci	r29, 0xFF	; 255
   11b5a:	48 81       	ld	r20, Y
   11b5c:	c6 5b       	subi	r28, 0xB6	; 182
   11b5e:	d0 40       	sbci	r29, 0x00	; 0
   11b60:	90 e0       	ldi	r25, 0x00	; 0
   11b62:	f9 01       	movw	r30, r18
   11b64:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1137
      str3[0] = 0;
   11b66:	cf 55       	subi	r28, 0x5F	; 95
   11b68:	df 4f       	sbci	r29, 0xFF	; 255
   11b6a:	18 82       	st	Y, r1
   11b6c:	c1 5a       	subi	r28, 0xA1	; 161
   11b6e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1138
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
   11b70:	f8 01       	movw	r30, r16
   11b72:	44 91       	lpm	r20, Z
   11b74:	84 91       	lpm	r24, Z
   11b76:	8e 01       	movw	r16, r28
   11b78:	0f 55       	subi	r16, 0x5F	; 95
   11b7a:	1f 4f       	sbci	r17, 0xFF	; 255
   11b7c:	9e 01       	movw	r18, r28
   11b7e:	2f 5f       	subi	r18, 0xFF	; 255
   11b80:	3f 4f       	sbci	r19, 0xFF	; 255
   11b82:	cd 54       	subi	r28, 0x4D	; 77
   11b84:	df 4f       	sbci	r29, 0xFF	; 255
   11b86:	68 81       	ld	r22, Y
   11b88:	c3 5b       	subi	r28, 0xB3	; 179
   11b8a:	d0 40       	sbci	r29, 0x00	; 0
   11b8c:	f7 01       	movw	r30, r14
   11b8e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1143
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);
   11b90:	f6 01       	movw	r30, r12
   11b92:	ef 58       	subi	r30, 0x8F	; 143
   11b94:	fe 4f       	sbci	r31, 0xFE	; 254
   11b96:	e6 0d       	add	r30, r6
   11b98:	f7 1d       	adc	r31, r7
   11b9a:	25 91       	lpm	r18, Z+
   11b9c:	34 91       	lpm	r19, Z
   11b9e:	c4 54       	subi	r28, 0x44	; 68
   11ba0:	df 4f       	sbci	r29, 0xFF	; 255
   11ba2:	39 83       	std	Y+1, r19	; 0x01
   11ba4:	28 83       	st	Y, r18
   11ba6:	cc 5b       	subi	r28, 0xBC	; 188
   11ba8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1142
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
   11baa:	f6 01       	movw	r30, r12
   11bac:	e1 59       	subi	r30, 0x91	; 145
   11bae:	fe 4f       	sbci	r31, 0xFE	; 254
   11bb0:	e6 0d       	add	r30, r6
   11bb2:	f7 1d       	adc	r31, r7
   11bb4:	45 90       	lpm	r4, Z+
   11bb6:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1141
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
   11bb8:	f6 01       	movw	r30, r12
   11bba:	e3 59       	subi	r30, 0x93	; 147
   11bbc:	fe 4f       	sbci	r31, 0xFE	; 254
   11bbe:	e6 0d       	add	r30, r6
   11bc0:	f7 1d       	adc	r31, r7
   11bc2:	85 91       	lpm	r24, Z+
   11bc4:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1140
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
   11bc6:	f6 01       	movw	r30, r12
   11bc8:	e5 59       	subi	r30, 0x95	; 149
   11bca:	fe 4f       	sbci	r31, 0xFE	; 254
   11bcc:	e6 0d       	add	r30, r6
   11bce:	f7 1d       	adc	r31, r7
   11bd0:	25 90       	lpm	r2, Z+
   11bd2:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1139
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
   11bd4:	c6 54       	subi	r28, 0x46	; 70
   11bd6:	df 4f       	sbci	r29, 0xFF	; 255
   11bd8:	48 81       	ld	r20, Y
   11bda:	59 81       	ldd	r21, Y+1	; 0x01
   11bdc:	ca 5b       	subi	r28, 0xBA	; 186
   11bde:	d0 40       	sbci	r29, 0x00	; 0
   11be0:	24 0e       	add	r2, r20
   11be2:	35 1e       	adc	r3, r21
   11be4:	f6 01       	movw	r30, r12
   11be6:	e7 59       	subi	r30, 0x97	; 151
   11be8:	fe 4f       	sbci	r31, 0xFE	; 254
   11bea:	e6 0d       	add	r30, r6
   11bec:	f7 1d       	adc	r31, r7
   11bee:	a5 90       	lpm	r10, Z+
   11bf0:	b4 90       	lpm	r11, Z
   11bf2:	c8 54       	subi	r28, 0x48	; 72
   11bf4:	df 4f       	sbci	r29, 0xFF	; 255
   11bf6:	68 81       	ld	r22, Y
   11bf8:	79 81       	ldd	r23, Y+1	; 0x01
   11bfa:	c8 5b       	subi	r28, 0xB8	; 184
   11bfc:	d0 40       	sbci	r29, 0x00	; 0
   11bfe:	a6 0e       	add	r10, r22
   11c00:	b7 1e       	adc	r11, r23
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   11c02:	10 92 8f 0f 	sts	0x0F8F, r1	; 0x800f8f <my_lcd+0xb>
   11c06:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <my_lcd+0xa>
   11c0a:	10 e0       	ldi	r17, 0x00	; 0
   11c0c:	00 e0       	ldi	r16, 0x00	; 0
   11c0e:	55 24       	eor	r5, r5
   11c10:	fc 01       	movw	r30, r24
   11c12:	ff 27       	eor	r31, r31
   11c14:	c2 54       	subi	r28, 0x42	; 66
   11c16:	df 4f       	sbci	r29, 0xFF	; 255
   11c18:	f9 83       	std	Y+1, r31	; 0x01
   11c1a:	e8 83       	st	Y, r30
   11c1c:	ce 5b       	subi	r28, 0xBE	; 190
   11c1e:	d0 40       	sbci	r29, 0x00	; 0
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4643
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
   11c20:	91 01       	movw	r18, r2
   11c22:	24 0d       	add	r18, r4
   11c24:	35 1d       	adc	r19, r5
   11c26:	c6 53       	subi	r28, 0x36	; 54
   11c28:	df 4f       	sbci	r29, 0xFF	; 255
   11c2a:	39 83       	std	Y+1, r19	; 0x01
   11c2c:	28 83       	st	Y, r18
   11c2e:	ca 5c       	subi	r28, 0xCA	; 202
   11c30:	d0 40       	sbci	r29, 0x00	; 0
   11c32:	7f 01       	movw	r14, r30
   11c34:	ea 0c       	add	r14, r10
   11c36:	fb 1c       	adc	r15, r11
   11c38:	c6 53       	subi	r28, 0x36	; 54
   11c3a:	df 4f       	sbci	r29, 0xFF	; 255
   11c3c:	28 81       	ld	r18, Y
   11c3e:	39 81       	ldd	r19, Y+1	; 0x01
   11c40:	ca 5c       	subi	r28, 0xCA	; 202
   11c42:	d0 40       	sbci	r29, 0x00	; 0
   11c44:	20 1b       	sub	r18, r16
   11c46:	31 0b       	sbc	r19, r17
   11c48:	a7 01       	movw	r20, r14
   11c4a:	40 1b       	sub	r20, r16
   11c4c:	51 0b       	sbc	r21, r17
   11c4e:	b1 01       	movw	r22, r2
   11c50:	60 0f       	add	r22, r16
   11c52:	71 1f       	adc	r23, r17
   11c54:	c5 01       	movw	r24, r10
   11c56:	80 0f       	add	r24, r16
   11c58:	91 1f       	adc	r25, r17
   11c5a:	0e 94 1f ae 	call	0x15c3e	; 0x15c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>
   11c5e:	0f 5f       	subi	r16, 0xFF	; 255
   11c60:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4642
/// typ button_1 ////
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
   11c62:	03 30       	cpi	r16, 0x03	; 3
   11c64:	11 05       	cpc	r17, r1
   11c66:	41 f7       	brne	.-48     	; 0x11c38 <draw_menu(bool)+0xbe2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4645
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
   11c68:	f4 01       	movw	r30, r8
   11c6a:	01 90       	ld	r0, Z+
   11c6c:	00 20       	and	r0, r0
   11c6e:	e9 f7       	brne	.-6      	; 0x11c6a <draw_menu(bool)+0xc14>
   11c70:	31 97       	sbiw	r30, 0x01	; 1
   11c72:	e8 19       	sub	r30, r8
   11c74:	f9 09       	sbc	r31, r9
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   11c76:	c4 54       	subi	r28, 0x44	; 68
   11c78:	df 4f       	sbci	r29, 0xFF	; 255
   11c7a:	88 81       	ld	r24, Y
   11c7c:	cc 5b       	subi	r28, 0xBC	; 188
   11c7e:	d0 40       	sbci	r29, 0x00	; 0
   11c80:	88 0f       	add	r24, r24
   11c82:	c4 54       	subi	r28, 0x44	; 68
   11c84:	df 4f       	sbci	r29, 0xFF	; 255
   11c86:	38 81       	ld	r19, Y
   11c88:	cc 5b       	subi	r28, 0xBC	; 188
   11c8a:	d0 40       	sbci	r29, 0x00	; 0
   11c8c:	83 0f       	add	r24, r19
   11c8e:	88 0f       	add	r24, r24
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4647
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
   11c90:	a2 01       	movw	r20, r4
   11c92:	48 1b       	sub	r20, r24
   11c94:	51 09       	sbc	r21, r1
   11c96:	57 ff       	sbrs	r21, 7
   11c98:	02 c0       	rjmp	.+4      	; 0x11c9e <draw_menu(bool)+0xc48>
   11c9a:	4d 5f       	subi	r20, 0xFD	; 253
   11c9c:	5f 4f       	sbci	r21, 0xFF	; 255
   11c9e:	55 95       	asr	r21
   11ca0:	47 95       	ror	r20
   11ca2:	55 95       	asr	r21
   11ca4:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4648
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
   11ca6:	42 0d       	add	r20, r2
   11ca8:	53 2d       	mov	r21, r3
   11caa:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   11cac:	66 e0       	ldi	r22, 0x06	; 6
   11cae:	e6 9f       	mul	r30, r22
   11cb0:	f0 01       	movw	r30, r0
   11cb2:	11 24       	eor	r1, r1
   11cb4:	c4 54       	subi	r28, 0x44	; 68
   11cb6:	df 4f       	sbci	r29, 0xFF	; 255
   11cb8:	78 81       	ld	r23, Y
   11cba:	cc 5b       	subi	r28, 0xBC	; 188
   11cbc:	d0 40       	sbci	r29, 0x00	; 0
   11cbe:	7e 9f       	mul	r23, r30
   11cc0:	c0 01       	movw	r24, r0
   11cc2:	7f 9f       	mul	r23, r31
   11cc4:	90 0d       	add	r25, r0
   11cc6:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4646
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
   11cc8:	99 27       	eor	r25, r25
   11cca:	c2 54       	subi	r28, 0x42	; 66
   11ccc:	df 4f       	sbci	r29, 0xFF	; 255
   11cce:	68 81       	ld	r22, Y
   11cd0:	79 81       	ldd	r23, Y+1	; 0x01
   11cd2:	ce 5b       	subi	r28, 0xBE	; 190
   11cd4:	d0 40       	sbci	r29, 0x00	; 0
   11cd6:	68 1b       	sub	r22, r24
   11cd8:	79 0b       	sbc	r23, r25
   11cda:	77 ff       	sbrs	r23, 7
   11cdc:	02 c0       	rjmp	.+4      	; 0x11ce2 <draw_menu(bool)+0xc8c>
   11cde:	6f 5f       	subi	r22, 0xFF	; 255
   11ce0:	7f 4f       	sbci	r23, 0xFF	; 255
   11ce2:	75 95       	asr	r23
   11ce4:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4648
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
   11ce6:	6a 0d       	add	r22, r10
   11ce8:	7b 2d       	mov	r23, r11
   11cea:	71 1d       	adc	r23, r1
   11cec:	ee 24       	eor	r14, r14
   11cee:	ea 94       	dec	r14
   11cf0:	fe 2c       	mov	r15, r14
   11cf2:	10 e0       	ldi	r17, 0x00	; 0
   11cf4:	00 e0       	ldi	r16, 0x00	; 0
   11cf6:	c4 54       	subi	r28, 0x44	; 68
   11cf8:	df 4f       	sbci	r29, 0xFF	; 255
   11cfa:	28 81       	ld	r18, Y
   11cfc:	cc 5b       	subi	r28, 0xBC	; 188
   11cfe:	d0 40       	sbci	r29, 0x00	; 0
   11d00:	c4 01       	movw	r24, r8
   11d02:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4650
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
   11d06:	cc 54       	subi	r28, 0x4C	; 76
   11d08:	df 4f       	sbci	r29, 0xFF	; 255
   11d0a:	e8 81       	ld	r30, Y
   11d0c:	f9 81       	ldd	r31, Y+1	; 0x01
   11d0e:	c4 5b       	subi	r28, 0xB4	; 180
   11d10:	d0 40       	sbci	r29, 0x00	; 0
   11d12:	01 90       	ld	r0, Z+
   11d14:	00 20       	and	r0, r0
   11d16:	e9 f7       	brne	.-6      	; 0x11d12 <draw_menu(bool)+0xcbc>
   11d18:	31 97       	sbiw	r30, 0x01	; 1
   11d1a:	cc 54       	subi	r28, 0x4C	; 76
   11d1c:	df 4f       	sbci	r29, 0xFF	; 255
   11d1e:	88 81       	ld	r24, Y
   11d20:	99 81       	ldd	r25, Y+1	; 0x01
   11d22:	c4 5b       	subi	r28, 0xB4	; 180
   11d24:	d0 40       	sbci	r29, 0x00	; 0
   11d26:	e8 1b       	sub	r30, r24
   11d28:	f9 0b       	sbc	r31, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4652
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
   11d2a:	a2 01       	movw	r20, r4
   11d2c:	46 50       	subi	r20, 0x06	; 6
   11d2e:	51 09       	sbc	r21, r1
   11d30:	57 ff       	sbrs	r21, 7
   11d32:	02 c0       	rjmp	.+4      	; 0x11d38 <draw_menu(bool)+0xce2>
   11d34:	4d 5f       	subi	r20, 0xFD	; 253
   11d36:	5f 4f       	sbci	r21, 0xFF	; 255
   11d38:	55 95       	asr	r21
   11d3a:	47 95       	ror	r20
   11d3c:	55 95       	asr	r21
   11d3e:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4653
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
   11d40:	55 27       	eor	r21, r21
   11d42:	ca 01       	movw	r24, r20
   11d44:	88 0f       	add	r24, r24
   11d46:	99 1f       	adc	r25, r25
   11d48:	48 0f       	add	r20, r24
   11d4a:	59 1f       	adc	r21, r25
   11d4c:	42 0d       	add	r20, r2
   11d4e:	53 1d       	adc	r21, r3
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   11d50:	96 e0       	ldi	r25, 0x06	; 6
   11d52:	e9 9f       	mul	r30, r25
   11d54:	f0 01       	movw	r30, r0
   11d56:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4651
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
  posx = (size_x - tmpx) / 2;
   11d58:	ff 27       	eor	r31, r31
   11d5a:	c2 54       	subi	r28, 0x42	; 66
   11d5c:	df 4f       	sbci	r29, 0xFF	; 255
   11d5e:	68 81       	ld	r22, Y
   11d60:	79 81       	ldd	r23, Y+1	; 0x01
   11d62:	ce 5b       	subi	r28, 0xBE	; 190
   11d64:	d0 40       	sbci	r29, 0x00	; 0
   11d66:	6e 1b       	sub	r22, r30
   11d68:	7f 0b       	sbc	r23, r31
   11d6a:	77 ff       	sbrs	r23, 7
   11d6c:	02 c0       	rjmp	.+4      	; 0x11d72 <draw_menu(bool)+0xd1c>
   11d6e:	6f 5f       	subi	r22, 0xFF	; 255
   11d70:	7f 4f       	sbci	r23, 0xFF	; 255
   11d72:	75 95       	asr	r23
   11d74:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4653
  posy = (size_y - tmpy) / 4;
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
   11d76:	6a 0d       	add	r22, r10
   11d78:	7b 2d       	mov	r23, r11
   11d7a:	71 1d       	adc	r23, r1
   11d7c:	ee 24       	eor	r14, r14
   11d7e:	ea 94       	dec	r14
   11d80:	fe 2c       	mov	r15, r14
   11d82:	10 e0       	ldi	r17, 0x00	; 0
   11d84:	00 e0       	ldi	r16, 0x00	; 0
   11d86:	21 e0       	ldi	r18, 0x01	; 1
   11d88:	ce 01       	movw	r24, r28
   11d8a:	01 96       	adiw	r24, 0x01	; 1
   11d8c:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1146
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);

    }
    if (click_x > 0 && click_y > 0)
   11d90:	cc 53       	subi	r28, 0x3C	; 60
   11d92:	df 4f       	sbci	r29, 0xFF	; 255
   11d94:	e8 81       	ld	r30, Y
   11d96:	f9 81       	ldd	r31, Y+1	; 0x01
   11d98:	c4 5c       	subi	r28, 0xC4	; 196
   11d9a:	d0 40       	sbci	r29, 0x00	; 0
   11d9c:	ef 2b       	or	r30, r31
   11d9e:	09 f4       	brne	.+2      	; 0x11da2 <draw_menu(bool)+0xd4c>
   11da0:	66 c0       	rjmp	.+204    	; 0x11e6e <draw_menu(bool)+0xe18>
   11da2:	ca 53       	subi	r28, 0x3A	; 58
   11da4:	df 4f       	sbci	r29, 0xFF	; 255
   11da6:	28 81       	ld	r18, Y
   11da8:	39 81       	ldd	r19, Y+1	; 0x01
   11daa:	c6 5c       	subi	r28, 0xC6	; 198
   11dac:	d0 40       	sbci	r29, 0x00	; 0
   11dae:	23 2b       	or	r18, r19
   11db0:	09 f4       	brne	.+2      	; 0x11db4 <draw_menu(bool)+0xd5e>
   11db2:	5d c0       	rjmp	.+186    	; 0x11e6e <draw_menu(bool)+0xe18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1147
      if (button_click_touch(global_x + pgm_read_word(&switch_1->x), global_y + pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
   11db4:	f6 01       	movw	r30, r12
   11db6:	e1 59       	subi	r30, 0x91	; 145
   11db8:	fe 4f       	sbci	r31, 0xFE	; 254
   11dba:	e6 0d       	add	r30, r6
   11dbc:	f7 1d       	adc	r31, r7
   11dbe:	25 91       	lpm	r18, Z+
   11dc0:	34 91       	lpm	r19, Z
   11dc2:	f6 01       	movw	r30, r12
   11dc4:	e3 59       	subi	r30, 0x93	; 147
   11dc6:	fe 4f       	sbci	r31, 0xFE	; 254
   11dc8:	e6 0d       	add	r30, r6
   11dca:	f7 1d       	adc	r31, r7
   11dcc:	45 91       	lpm	r20, Z+
   11dce:	54 91       	lpm	r21, Z
   11dd0:	f6 01       	movw	r30, r12
   11dd2:	e5 59       	subi	r30, 0x95	; 149
   11dd4:	fe 4f       	sbci	r31, 0xFE	; 254
   11dd6:	e6 0d       	add	r30, r6
   11dd8:	f7 1d       	adc	r31, r7
   11dda:	65 91       	lpm	r22, Z+
   11ddc:	74 91       	lpm	r23, Z
   11dde:	f6 01       	movw	r30, r12
   11de0:	e7 59       	subi	r30, 0x97	; 151
   11de2:	fe 4f       	sbci	r31, 0xFE	; 254
   11de4:	e6 0d       	add	r30, r6
   11de6:	f7 1d       	adc	r31, r7
   11de8:	85 91       	lpm	r24, Z+
   11dea:	94 91       	lpm	r25, Z
   11dec:	c6 54       	subi	r28, 0x46	; 70
   11dee:	df 4f       	sbci	r29, 0xFF	; 255
   11df0:	e8 81       	ld	r30, Y
   11df2:	f9 81       	ldd	r31, Y+1	; 0x01
   11df4:	ca 5b       	subi	r28, 0xBA	; 186
   11df6:	d0 40       	sbci	r29, 0x00	; 0
   11df8:	6e 0f       	add	r22, r30
   11dfa:	7f 1f       	adc	r23, r31
   11dfc:	ca 53       	subi	r28, 0x3A	; 58
   11dfe:	df 4f       	sbci	r29, 0xFF	; 255
   11e00:	e8 80       	ld	r14, Y
   11e02:	f9 80       	ldd	r15, Y+1	; 0x01
   11e04:	c6 5c       	subi	r28, 0xC6	; 198
   11e06:	d0 40       	sbci	r29, 0x00	; 0
   11e08:	cc 53       	subi	r28, 0x3C	; 60
   11e0a:	df 4f       	sbci	r29, 0xFF	; 255
   11e0c:	08 81       	ld	r16, Y
   11e0e:	19 81       	ldd	r17, Y+1	; 0x01
   11e10:	c4 5c       	subi	r28, 0xC4	; 196
   11e12:	d0 40       	sbci	r29, 0x00	; 0
   11e14:	c8 54       	subi	r28, 0x48	; 72
   11e16:	df 4f       	sbci	r29, 0xFF	; 255
   11e18:	e8 81       	ld	r30, Y
   11e1a:	f9 81       	ldd	r31, Y+1	; 0x01
   11e1c:	c8 5b       	subi	r28, 0xB8	; 184
   11e1e:	d0 40       	sbci	r29, 0x00	; 0
   11e20:	8e 0f       	add	r24, r30
   11e22:	9f 1f       	adc	r25, r31
   11e24:	0e 94 9a 3c 	call	0x7934	; 0x7934 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   11e28:	18 2f       	mov	r17, r24
   11e2a:	88 23       	and	r24, r24
   11e2c:	01 f1       	breq	.+64     	; 0x11e6e <draw_menu(bool)+0xe18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1149
      {
        fntargs =  (fptr_args*)pgm_read_word(&switch_1->onclick);
   11e2e:	f6 01       	movw	r30, r12
   11e30:	e9 58       	subi	r30, 0x89	; 137
   11e32:	fe 4f       	sbci	r31, 0xFE	; 254
   11e34:	e6 0d       	add	r30, r6
   11e36:	f7 1d       	adc	r31, r7
   11e38:	25 91       	lpm	r18, Z+
   11e3a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1150
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
   11e3c:	f6 01       	movw	r30, r12
   11e3e:	ea 58       	subi	r30, 0x8A	; 138
   11e40:	fe 4f       	sbci	r31, 0xFE	; 254
   11e42:	e6 0d       	add	r30, r6
   11e44:	f7 1d       	adc	r31, r7
   11e46:	84 91       	lpm	r24, Z
   11e48:	cd 54       	subi	r28, 0x4D	; 77
   11e4a:	df 4f       	sbci	r29, 0xFF	; 255
   11e4c:	68 81       	ld	r22, Y
   11e4e:	c3 5b       	subi	r28, 0xB3	; 179
   11e50:	d0 40       	sbci	r29, 0x00	; 0
   11e52:	70 e0       	ldi	r23, 0x00	; 0
   11e54:	ca 54       	subi	r28, 0x4A	; 74
   11e56:	df 4f       	sbci	r29, 0xFF	; 255
   11e58:	48 81       	ld	r20, Y
   11e5a:	c6 5b       	subi	r28, 0xB6	; 182
   11e5c:	d0 40       	sbci	r29, 0x00	; 0
   11e5e:	90 e0       	ldi	r25, 0x00	; 0
   11e60:	f9 01       	movw	r30, r18
   11e62:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1151
        ret = true;
   11e64:	c4 53       	subi	r28, 0x34	; 52
   11e66:	df 4f       	sbci	r29, 0xFF	; 255
   11e68:	18 83       	st	Y, r17
   11e6a:	cc 5c       	subi	r28, 0xCC	; 204
   11e6c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1127
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
   11e6e:	ca 54       	subi	r28, 0x4A	; 74
   11e70:	df 4f       	sbci	r29, 0xFF	; 255
   11e72:	f8 81       	ld	r31, Y
   11e74:	c6 5b       	subi	r28, 0xB6	; 182
   11e76:	d0 40       	sbci	r29, 0x00	; 0
   11e78:	ff 5f       	subi	r31, 0xFF	; 255
   11e7a:	ca 54       	subi	r28, 0x4A	; 74
   11e7c:	df 4f       	sbci	r29, 0xFF	; 255
   11e7e:	f8 83       	st	Y, r31
   11e80:	c6 5b       	subi	r28, 0xB6	; 182
   11e82:	d0 40       	sbci	r29, 0x00	; 0
   11e84:	20 ce       	rjmp	.-960    	; 0x11ac6 <draw_menu(bool)+0xa70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1154
        fntargs =  (fptr_args*)pgm_read_word(&switch_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   11e86:	c4 53       	subi	r28, 0x34	; 52
   11e88:	df 4f       	sbci	r29, 0xFF	; 255
   11e8a:	28 81       	ld	r18, Y
   11e8c:	cc 5c       	subi	r28, 0xCC	; 204
   11e8e:	d0 40       	sbci	r29, 0x00	; 0
   11e90:	21 11       	cpse	r18, r1
   11e92:	0c 94 37 9b 	jmp	0x1366e	; 0x1366e <draw_menu(bool)+0x2618>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1156
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
   11e96:	51 2c       	mov	r5, r1
   11e98:	43 01       	movw	r8, r6
   11e9a:	3e e3       	ldi	r19, 0x3E	; 62
   11e9c:	83 1a       	sub	r8, r19
   11e9e:	3d ef       	ldi	r19, 0xFD	; 253
   11ea0:	93 0a       	sbc	r9, r19
   11ea2:	f4 01       	movw	r30, r8
   11ea4:	84 91       	lpm	r24, Z
   11ea6:	58 16       	cp	r5, r24
   11ea8:	08 f0       	brcs	.+2      	; 0x11eac <draw_menu(bool)+0xe56>
   11eaa:	d6 c0       	rjmp	.+428    	; 0x12058 <draw_menu(bool)+0x1002>
   11eac:	f0 e1       	ldi	r31, 0x10	; 16
   11eae:	5f 9e       	mul	r5, r31
   11eb0:	60 01       	movw	r12, r0
   11eb2:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1159
  {
    symbol_button_1 = &current->symbol_button_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&symbol_button_1->enable_show);
   11eb4:	f6 01       	movw	r30, r12
   11eb6:	e8 51       	subi	r30, 0x18	; 24
   11eb8:	fe 4f       	sbci	r31, 0xFE	; 254
   11eba:	e6 0d       	add	r30, r6
   11ebc:	f7 1d       	adc	r31, r7
   11ebe:	25 91       	lpm	r18, Z+
   11ec0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1160
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
   11ec2:	56 01       	movw	r10, r12
   11ec4:	4c e1       	ldi	r20, 0x1C	; 28
   11ec6:	a4 1a       	sub	r10, r20
   11ec8:	4e ef       	ldi	r20, 0xFE	; 254
   11eca:	b4 0a       	sbc	r11, r20
   11ecc:	a6 0c       	add	r10, r6
   11ece:	b7 1c       	adc	r11, r7
   11ed0:	f5 01       	movw	r30, r10
   11ed2:	84 91       	lpm	r24, Z
   11ed4:	cd 54       	subi	r28, 0x4D	; 77
   11ed6:	df 4f       	sbci	r29, 0xFF	; 255
   11ed8:	68 81       	ld	r22, Y
   11eda:	c3 5b       	subi	r28, 0xB3	; 179
   11edc:	d0 40       	sbci	r29, 0x00	; 0
   11ede:	70 e0       	ldi	r23, 0x00	; 0
   11ee0:	45 2d       	mov	r20, r5
   11ee2:	90 e0       	ldi	r25, 0x00	; 0
   11ee4:	f9 01       	movw	r30, r18
   11ee6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1161
    if (active == 0) continue;
   11ee8:	88 23       	and	r24, r24
   11eea:	09 f4       	brne	.+2      	; 0x11eee <draw_menu(bool)+0xe98>
   11eec:	b3 c0       	rjmp	.+358    	; 0x12054 <draw_menu(bool)+0xffe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1162
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
   11eee:	f6 01       	movw	r30, r12
   11ef0:	e9 51       	subi	r30, 0x19	; 25
   11ef2:	fe 4f       	sbci	r31, 0xFE	; 254
   11ef4:	e6 0d       	add	r30, r6
   11ef6:	f7 1d       	adc	r31, r7
   11ef8:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1163
    if (enable_redraw(rdr, redraw_class) == true)
   11efa:	cf 52       	subi	r28, 0x2F	; 47
   11efc:	df 4f       	sbci	r29, 0xFF	; 255
   11efe:	68 81       	ld	r22, Y
   11f00:	c1 5d       	subi	r28, 0xD1	; 209
   11f02:	d0 40       	sbci	r29, 0x00	; 0
   11f04:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <enable_redraw(unsigned char, unsigned char)>
   11f08:	88 23       	and	r24, r24
   11f0a:	09 f4       	brne	.+2      	; 0x11f0e <draw_menu(bool)+0xeb8>
   11f0c:	3c c0       	rjmp	.+120    	; 0x11f86 <draw_menu(bool)+0xf30>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1167
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
   11f0e:	f6 01       	movw	r30, r12
   11f10:	e6 52       	subi	r30, 0x26	; 38
   11f12:	fe 4f       	sbci	r31, 0xFE	; 254
   11f14:	e6 0d       	add	r30, r6
   11f16:	f7 1d       	adc	r31, r7
   11f18:	e5 90       	lpm	r14, Z+
   11f1a:	f4 90       	lpm	r15, Z
   11f1c:	f6 01       	movw	r30, r12
   11f1e:	ed 51       	subi	r30, 0x1D	; 29
   11f20:	fe 4f       	sbci	r31, 0xFE	; 254
   11f22:	e6 0d       	add	r30, r6
   11f24:	f7 1d       	adc	r31, r7
   11f26:	05 91       	lpm	r16, Z+
   11f28:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1166
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
   11f2a:	f6 01       	movw	r30, r12
   11f2c:	ef 51       	subi	r30, 0x1F	; 31
   11f2e:	fe 4f       	sbci	r31, 0xFE	; 254
   11f30:	e6 0d       	add	r30, r6
   11f32:	f7 1d       	adc	r31, r7
   11f34:	25 91       	lpm	r18, Z+
   11f36:	34 91       	lpm	r19, Z
   11f38:	f6 01       	movw	r30, r12
   11f3a:	e1 52       	subi	r30, 0x21	; 33
   11f3c:	fe 4f       	sbci	r31, 0xFE	; 254
   11f3e:	e6 0d       	add	r30, r6
   11f40:	f7 1d       	adc	r31, r7
   11f42:	45 91       	lpm	r20, Z+
   11f44:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1165
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
   11f46:	f6 01       	movw	r30, r12
   11f48:	e3 52       	subi	r30, 0x23	; 35
   11f4a:	fe 4f       	sbci	r31, 0xFE	; 254
   11f4c:	e6 0d       	add	r30, r6
   11f4e:	f7 1d       	adc	r31, r7
   11f50:	65 91       	lpm	r22, Z+
   11f52:	74 91       	lpm	r23, Z
   11f54:	f6 01       	movw	r30, r12
   11f56:	e5 52       	subi	r30, 0x25	; 37
   11f58:	fe 4f       	sbci	r31, 0xFE	; 254
   11f5a:	e6 0d       	add	r30, r6
   11f5c:	f7 1d       	adc	r31, r7
   11f5e:	85 91       	lpm	r24, Z+
   11f60:	94 91       	lpm	r25, Z
   11f62:	c6 54       	subi	r28, 0x46	; 70
   11f64:	df 4f       	sbci	r29, 0xFF	; 255
   11f66:	e8 81       	ld	r30, Y
   11f68:	f9 81       	ldd	r31, Y+1	; 0x01
   11f6a:	ca 5b       	subi	r28, 0xBA	; 186
   11f6c:	d0 40       	sbci	r29, 0x00	; 0
   11f6e:	6e 0f       	add	r22, r30
   11f70:	7f 1f       	adc	r23, r31
   11f72:	c8 54       	subi	r28, 0x48	; 72
   11f74:	df 4f       	sbci	r29, 0xFF	; 255
   11f76:	e8 81       	ld	r30, Y
   11f78:	f9 81       	ldd	r31, Y+1	; 0x01
   11f7a:	c8 5b       	subi	r28, 0xB8	; 184
   11f7c:	d0 40       	sbci	r29, 0x00	; 0
   11f7e:	8e 0f       	add	r24, r30
   11f80:	9f 1f       	adc	r25, r31
   11f82:	0e 94 97 48 	call	0x912e	; 0x912e <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1169
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    }
    if (click_x > 0 && click_y > 0)
   11f86:	cc 53       	subi	r28, 0x3C	; 60
   11f88:	df 4f       	sbci	r29, 0xFF	; 255
   11f8a:	28 81       	ld	r18, Y
   11f8c:	39 81       	ldd	r19, Y+1	; 0x01
   11f8e:	c4 5c       	subi	r28, 0xC4	; 196
   11f90:	d0 40       	sbci	r29, 0x00	; 0
   11f92:	23 2b       	or	r18, r19
   11f94:	09 f4       	brne	.+2      	; 0x11f98 <draw_menu(bool)+0xf42>
   11f96:	5e c0       	rjmp	.+188    	; 0x12054 <draw_menu(bool)+0xffe>
   11f98:	ca 53       	subi	r28, 0x3A	; 58
   11f9a:	df 4f       	sbci	r29, 0xFF	; 255
   11f9c:	48 81       	ld	r20, Y
   11f9e:	59 81       	ldd	r21, Y+1	; 0x01
   11fa0:	c6 5c       	subi	r28, 0xC6	; 198
   11fa2:	d0 40       	sbci	r29, 0x00	; 0
   11fa4:	45 2b       	or	r20, r21
   11fa6:	09 f4       	brne	.+2      	; 0x11faa <draw_menu(bool)+0xf54>
   11fa8:	55 c0       	rjmp	.+170    	; 0x12054 <draw_menu(bool)+0xffe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1170
      if (button_click_touch(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), click_x, click_y) == true)
   11faa:	f6 01       	movw	r30, r12
   11fac:	ef 51       	subi	r30, 0x1F	; 31
   11fae:	fe 4f       	sbci	r31, 0xFE	; 254
   11fb0:	e6 0d       	add	r30, r6
   11fb2:	f7 1d       	adc	r31, r7
   11fb4:	25 91       	lpm	r18, Z+
   11fb6:	34 91       	lpm	r19, Z
   11fb8:	f6 01       	movw	r30, r12
   11fba:	e1 52       	subi	r30, 0x21	; 33
   11fbc:	fe 4f       	sbci	r31, 0xFE	; 254
   11fbe:	e6 0d       	add	r30, r6
   11fc0:	f7 1d       	adc	r31, r7
   11fc2:	45 91       	lpm	r20, Z+
   11fc4:	54 91       	lpm	r21, Z
   11fc6:	f6 01       	movw	r30, r12
   11fc8:	e3 52       	subi	r30, 0x23	; 35
   11fca:	fe 4f       	sbci	r31, 0xFE	; 254
   11fcc:	e6 0d       	add	r30, r6
   11fce:	f7 1d       	adc	r31, r7
   11fd0:	65 91       	lpm	r22, Z+
   11fd2:	74 91       	lpm	r23, Z
   11fd4:	f6 01       	movw	r30, r12
   11fd6:	e5 52       	subi	r30, 0x25	; 37
   11fd8:	fe 4f       	sbci	r31, 0xFE	; 254
   11fda:	e6 0d       	add	r30, r6
   11fdc:	f7 1d       	adc	r31, r7
   11fde:	85 91       	lpm	r24, Z+
   11fe0:	94 91       	lpm	r25, Z
   11fe2:	c6 54       	subi	r28, 0x46	; 70
   11fe4:	df 4f       	sbci	r29, 0xFF	; 255
   11fe6:	e8 81       	ld	r30, Y
   11fe8:	f9 81       	ldd	r31, Y+1	; 0x01
   11fea:	ca 5b       	subi	r28, 0xBA	; 186
   11fec:	d0 40       	sbci	r29, 0x00	; 0
   11fee:	6e 0f       	add	r22, r30
   11ff0:	7f 1f       	adc	r23, r31
   11ff2:	ca 53       	subi	r28, 0x3A	; 58
   11ff4:	df 4f       	sbci	r29, 0xFF	; 255
   11ff6:	e8 80       	ld	r14, Y
   11ff8:	f9 80       	ldd	r15, Y+1	; 0x01
   11ffa:	c6 5c       	subi	r28, 0xC6	; 198
   11ffc:	d0 40       	sbci	r29, 0x00	; 0
   11ffe:	cc 53       	subi	r28, 0x3C	; 60
   12000:	df 4f       	sbci	r29, 0xFF	; 255
   12002:	08 81       	ld	r16, Y
   12004:	19 81       	ldd	r17, Y+1	; 0x01
   12006:	c4 5c       	subi	r28, 0xC4	; 196
   12008:	d0 40       	sbci	r29, 0x00	; 0
   1200a:	c8 54       	subi	r28, 0x48	; 72
   1200c:	df 4f       	sbci	r29, 0xFF	; 255
   1200e:	e8 81       	ld	r30, Y
   12010:	f9 81       	ldd	r31, Y+1	; 0x01
   12012:	c8 5b       	subi	r28, 0xB8	; 184
   12014:	d0 40       	sbci	r29, 0x00	; 0
   12016:	8e 0f       	add	r24, r30
   12018:	9f 1f       	adc	r25, r31
   1201a:	0e 94 9a 3c 	call	0x7934	; 0x7934 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1201e:	18 2f       	mov	r17, r24
   12020:	88 23       	and	r24, r24
   12022:	c1 f0       	breq	.+48     	; 0x12054 <draw_menu(bool)+0xffe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1172
      {
        fntargs =  (fptr_args*)pgm_read_word(&symbol_button_1->onclick);
   12024:	f6 01       	movw	r30, r12
   12026:	eb 51       	subi	r30, 0x1B	; 27
   12028:	fe 4f       	sbci	r31, 0xFE	; 254
   1202a:	e6 0d       	add	r30, r6
   1202c:	f7 1d       	adc	r31, r7
   1202e:	25 91       	lpm	r18, Z+
   12030:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1173
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
   12032:	f5 01       	movw	r30, r10
   12034:	84 91       	lpm	r24, Z
   12036:	cd 54       	subi	r28, 0x4D	; 77
   12038:	df 4f       	sbci	r29, 0xFF	; 255
   1203a:	68 81       	ld	r22, Y
   1203c:	c3 5b       	subi	r28, 0xB3	; 179
   1203e:	d0 40       	sbci	r29, 0x00	; 0
   12040:	70 e0       	ldi	r23, 0x00	; 0
   12042:	45 2d       	mov	r20, r5
   12044:	90 e0       	ldi	r25, 0x00	; 0
   12046:	f9 01       	movw	r30, r18
   12048:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1174
        ret = true;
   1204a:	c4 53       	subi	r28, 0x34	; 52
   1204c:	df 4f       	sbci	r29, 0xFF	; 255
   1204e:	18 83       	st	Y, r17
   12050:	cc 5c       	subi	r28, 0xCC	; 204
   12052:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1156
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
   12054:	53 94       	inc	r5
   12056:	25 cf       	rjmp	.-438    	; 0x11ea2 <draw_menu(bool)+0xe4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1177
        fntargs =  (fptr_args*)pgm_read_word(&symbol_button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   12058:	c4 53       	subi	r28, 0x34	; 52
   1205a:	df 4f       	sbci	r29, 0xFF	; 255
   1205c:	f8 81       	ld	r31, Y
   1205e:	cc 5c       	subi	r28, 0xCC	; 204
   12060:	d0 40       	sbci	r29, 0x00	; 0
   12062:	f1 11       	cpse	r31, r1
   12064:	0c 94 37 9b 	jmp	0x1366e	; 0x1366e <draw_menu(bool)+0x2618>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1179
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
   12068:	51 2c       	mov	r5, r1
   1206a:	93 01       	movw	r18, r6
   1206c:	2d 53       	subi	r18, 0x3D	; 61
   1206e:	3d 4f       	sbci	r19, 0xFD	; 253
   12070:	cc 52       	subi	r28, 0x2C	; 44
   12072:	df 4f       	sbci	r29, 0xFF	; 255
   12074:	39 83       	std	Y+1, r19	; 0x01
   12076:	28 83       	st	Y, r18
   12078:	c4 5d       	subi	r28, 0xD4	; 212
   1207a:	d0 40       	sbci	r29, 0x00	; 0
   1207c:	cc 52       	subi	r28, 0x2C	; 44
   1207e:	df 4f       	sbci	r29, 0xFF	; 255
   12080:	e8 81       	ld	r30, Y
   12082:	f9 81       	ldd	r31, Y+1	; 0x01
   12084:	c4 5d       	subi	r28, 0xD4	; 212
   12086:	d0 40       	sbci	r29, 0x00	; 0
   12088:	84 91       	lpm	r24, Z
   1208a:	58 16       	cp	r5, r24
   1208c:	08 f0       	brcs	.+2      	; 0x12090 <draw_menu(bool)+0x103a>
   1208e:	60 c3       	rjmp	.+1728   	; 0x12750 <draw_menu(bool)+0x16fa>
   12090:	f7 e1       	ldi	r31, 0x17	; 23
   12092:	5f 9e       	mul	r5, r31
   12094:	60 01       	movw	r12, r0
   12096:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1182
  {
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
   12098:	f6 01       	movw	r30, r12
   1209a:	e0 59       	subi	r30, 0x90	; 144
   1209c:	fd 4f       	sbci	r31, 0xFD	; 253
   1209e:	e6 0d       	add	r30, r6
   120a0:	f7 1d       	adc	r31, r7
   120a2:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1183
    if (enable_redraw(rdr, redraw_class) == true)
   120a4:	cf 52       	subi	r28, 0x2F	; 47
   120a6:	df 4f       	sbci	r29, 0xFF	; 255
   120a8:	68 81       	ld	r22, Y
   120aa:	c1 5d       	subi	r28, 0xD1	; 209
   120ac:	d0 40       	sbci	r29, 0x00	; 0
   120ae:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <enable_redraw(unsigned char, unsigned char)>
   120b2:	88 23       	and	r24, r24
   120b4:	09 f4       	brne	.+2      	; 0x120b8 <draw_menu(bool)+0x1062>
   120b6:	98 c1       	rjmp	.+816    	; 0x123e8 <draw_menu(bool)+0x1392>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1185
    {
      loop_i = 0;
   120b8:	ce 54       	subi	r28, 0x4E	; 78
   120ba:	df 4f       	sbci	r29, 0xFF	; 255
   120bc:	18 82       	st	Y, r1
   120be:	c2 5b       	subi	r28, 0xB2	; 178
   120c0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1188
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
   120c2:	f6 01       	movw	r30, r12
   120c4:	e2 59       	subi	r30, 0x92	; 146
   120c6:	fd 4f       	sbci	r31, 0xFD	; 253
   120c8:	e6 0d       	add	r30, r6
   120ca:	f7 1d       	adc	r31, r7
   120cc:	25 91       	lpm	r18, Z+
   120ce:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1189
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
   120d0:	c6 01       	movw	r24, r12
   120d2:	87 59       	subi	r24, 0x97	; 151
   120d4:	9d 4f       	sbci	r25, 0xFD	; 253
   120d6:	a3 01       	movw	r20, r6
   120d8:	48 0f       	add	r20, r24
   120da:	59 1f       	adc	r21, r25
   120dc:	ca 54       	subi	r28, 0x4A	; 74
   120de:	df 4f       	sbci	r29, 0xFF	; 255
   120e0:	59 83       	std	Y+1, r21	; 0x01
   120e2:	48 83       	st	Y, r20
   120e4:	c6 5b       	subi	r28, 0xB6	; 182
   120e6:	d0 40       	sbci	r29, 0x00	; 0
   120e8:	fa 01       	movw	r30, r20
   120ea:	84 91       	lpm	r24, Z
   120ec:	cd 54       	subi	r28, 0x4D	; 77
   120ee:	df 4f       	sbci	r29, 0xFF	; 255
   120f0:	68 81       	ld	r22, Y
   120f2:	c3 5b       	subi	r28, 0xB3	; 179
   120f4:	d0 40       	sbci	r29, 0x00	; 0
   120f6:	70 e0       	ldi	r23, 0x00	; 0
   120f8:	40 e0       	ldi	r20, 0x00	; 0
   120fa:	90 e0       	ldi	r25, 0x00	; 0
   120fc:	f9 01       	movw	r30, r18
   120fe:	19 95       	eicall
   12100:	cf 54       	subi	r28, 0x4F	; 79
   12102:	df 4f       	sbci	r29, 0xFF	; 255
   12104:	88 83       	st	Y, r24
   12106:	c1 5b       	subi	r28, 0xB1	; 177
   12108:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1190
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
   1210a:	f6 01       	movw	r30, r12
   1210c:	e6 59       	subi	r30, 0x96	; 150
   1210e:	fd 4f       	sbci	r31, 0xFD	; 253
   12110:	e6 0d       	add	r30, r6
   12112:	f7 1d       	adc	r31, r7
   12114:	25 91       	lpm	r18, Z+
   12116:	34 91       	lpm	r19, Z
   12118:	ce 52       	subi	r28, 0x2E	; 46
   1211a:	df 4f       	sbci	r29, 0xFF	; 255
   1211c:	39 83       	std	Y+1, r19	; 0x01
   1211e:	28 83       	st	Y, r18
   12120:	c2 5d       	subi	r28, 0xD2	; 210
   12122:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1193
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   12124:	56 01       	movw	r10, r12
   12126:	36 ea       	ldi	r19, 0xA6	; 166
   12128:	a3 1a       	sub	r10, r19
   1212a:	3d ef       	ldi	r19, 0xFD	; 253
   1212c:	b3 0a       	sbc	r11, r19
   1212e:	a6 0c       	add	r10, r6
   12130:	b7 1c       	adc	r11, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1194
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   12132:	46 01       	movw	r8, r12
   12134:	44 ea       	ldi	r20, 0xA4	; 164
   12136:	84 1a       	sub	r8, r20
   12138:	4d ef       	ldi	r20, 0xFD	; 253
   1213a:	94 0a       	sbc	r9, r20
   1213c:	86 0c       	add	r8, r6
   1213e:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1195
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   12140:	16 01       	movw	r2, r12
   12142:	5b e9       	ldi	r21, 0x9B	; 155
   12144:	25 1a       	sub	r2, r21
   12146:	5d ef       	ldi	r21, 0xFD	; 253
   12148:	35 0a       	sbc	r3, r21
   1214a:	26 0c       	add	r2, r6
   1214c:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1197
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   1214e:	c6 01       	movw	r24, r12
   12150:	8c 59       	subi	r24, 0x9C	; 156
   12152:	9d 4f       	sbci	r25, 0xFD	; 253
   12154:	b3 01       	movw	r22, r6
   12156:	68 0f       	add	r22, r24
   12158:	79 1f       	adc	r23, r25
   1215a:	c4 54       	subi	r28, 0x44	; 68
   1215c:	df 4f       	sbci	r29, 0xFF	; 255
   1215e:	79 83       	std	Y+1, r23	; 0x01
   12160:	68 83       	st	Y, r22
   12162:	cc 5b       	subi	r28, 0xBC	; 188
   12164:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1202
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   12166:	01 97       	sbiw	r24, 0x01	; 1
   12168:	f3 01       	movw	r30, r6
   1216a:	e8 0f       	add	r30, r24
   1216c:	f9 1f       	adc	r31, r25
   1216e:	c2 54       	subi	r28, 0x42	; 66
   12170:	df 4f       	sbci	r29, 0xFF	; 255
   12172:	f9 83       	std	Y+1, r31	; 0x01
   12174:	e8 83       	st	Y, r30
   12176:	ce 5b       	subi	r28, 0xBE	; 190
   12178:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1210
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   1217a:	03 96       	adiw	r24, 0x03	; 3
   1217c:	93 01       	movw	r18, r6
   1217e:	28 0f       	add	r18, r24
   12180:	39 1f       	adc	r19, r25
   12182:	c8 53       	subi	r28, 0x38	; 56
   12184:	df 4f       	sbci	r29, 0xFF	; 255
   12186:	39 83       	std	Y+1, r19	; 0x01
   12188:	28 83       	st	Y, r18
   1218a:	c8 5c       	subi	r28, 0xC8	; 200
   1218c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1218
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_symbol_1->args), str1, str2);
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
   1218e:	04 97       	sbiw	r24, 0x04	; 4
   12190:	a3 01       	movw	r20, r6
   12192:	48 0f       	add	r20, r24
   12194:	59 1f       	adc	r21, r25
   12196:	c6 53       	subi	r28, 0x36	; 54
   12198:	df 4f       	sbci	r29, 0xFF	; 255
   1219a:	59 83       	std	Y+1, r21	; 0x01
   1219c:	48 83       	st	Y, r20
   1219e:	ca 5c       	subi	r28, 0xCA	; 202
   121a0:	d0 40       	sbci	r29, 0x00	; 0
   121a2:	02 97       	sbiw	r24, 0x02	; 2
   121a4:	b3 01       	movw	r22, r6
   121a6:	68 0f       	add	r22, r24
   121a8:	79 1f       	adc	r23, r25
   121aa:	c3 53       	subi	r28, 0x33	; 51
   121ac:	df 4f       	sbci	r29, 0xFF	; 255
   121ae:	79 83       	std	Y+1, r23	; 0x01
   121b0:	68 83       	st	Y, r22
   121b2:	cd 5c       	subi	r28, 0xCD	; 205
   121b4:	d0 40       	sbci	r29, 0x00	; 0
   121b6:	02 97       	sbiw	r24, 0x02	; 2
   121b8:	f3 01       	movw	r30, r6
   121ba:	e8 0f       	add	r30, r24
   121bc:	f9 1f       	adc	r31, r25
   121be:	c1 53       	subi	r28, 0x31	; 49
   121c0:	df 4f       	sbci	r29, 0xFF	; 255
   121c2:	f9 83       	std	Y+1, r31	; 0x01
   121c4:	e8 83       	st	Y, r30
   121c6:	cf 5c       	subi	r28, 0xCF	; 207
   121c8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1187
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
   121ca:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1186
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
   121cc:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1191
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
   121ce:	ce 54       	subi	r28, 0x4E	; 78
   121d0:	df 4f       	sbci	r29, 0xFF	; 255
   121d2:	88 81       	ld	r24, Y
   121d4:	c2 5b       	subi	r28, 0xB2	; 178
   121d6:	d0 40       	sbci	r29, 0x00	; 0
   121d8:	cf 54       	subi	r28, 0x4F	; 79
   121da:	df 4f       	sbci	r29, 0xFF	; 255
   121dc:	98 81       	ld	r25, Y
   121de:	c1 5b       	subi	r28, 0xB1	; 177
   121e0:	d0 40       	sbci	r29, 0x00	; 0
   121e2:	89 17       	cp	r24, r25
   121e4:	08 f0       	brcs	.+2      	; 0x121e8 <draw_menu(bool)+0x1192>
   121e6:	00 c1       	rjmp	.+512    	; 0x123e8 <draw_menu(bool)+0x1392>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1193
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   121e8:	f5 01       	movw	r30, r10
   121ea:	45 91       	lpm	r20, Z+
   121ec:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1194
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   121ee:	f4 01       	movw	r30, r8
   121f0:	25 91       	lpm	r18, Z+
   121f2:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1195
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   121f4:	f1 01       	movw	r30, r2
   121f6:	94 91       	lpm	r25, Z
   121f8:	99 23       	and	r25, r25
   121fa:	09 f4       	brne	.+2      	; 0x121fe <draw_menu(bool)+0x11a8>
   121fc:	b7 c0       	rjmp	.+366    	; 0x1236c <draw_menu(bool)+0x1316>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1194
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   121fe:	c6 54       	subi	r28, 0x46	; 70
   12200:	df 4f       	sbci	r29, 0xFF	; 255
   12202:	68 81       	ld	r22, Y
   12204:	79 81       	ldd	r23, Y+1	; 0x01
   12206:	ca 5b       	subi	r28, 0xBA	; 186
   12208:	d0 40       	sbci	r29, 0x00	; 0
   1220a:	62 0f       	add	r22, r18
   1220c:	73 1f       	adc	r23, r19
   1220e:	ce 53       	subi	r28, 0x3E	; 62
   12210:	df 4f       	sbci	r29, 0xFF	; 255
   12212:	79 83       	std	Y+1, r23	; 0x01
   12214:	68 83       	st	Y, r22
   12216:	c2 5c       	subi	r28, 0xC2	; 194
   12218:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1200
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
   1221a:	f1 01       	movw	r30, r2
   1221c:	94 91       	lpm	r25, Z
   1221e:	91 30       	cpi	r25, 0x01	; 1
   12220:	09 f4       	brne	.+2      	; 0x12224 <draw_menu(bool)+0x11ce>
   12222:	c3 c0       	rjmp	.+390    	; 0x123aa <draw_menu(bool)+0x1354>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1193
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   12224:	c8 54       	subi	r28, 0x48	; 72
   12226:	df 4f       	sbci	r29, 0xFF	; 255
   12228:	28 81       	ld	r18, Y
   1222a:	39 81       	ldd	r19, Y+1	; 0x01
   1222c:	c8 5b       	subi	r28, 0xB8	; 184
   1222e:	d0 40       	sbci	r29, 0x00	; 0
   12230:	24 0f       	add	r18, r20
   12232:	35 1f       	adc	r19, r21
   12234:	c0 54       	subi	r28, 0x40	; 64
   12236:	df 4f       	sbci	r29, 0xFF	; 255
   12238:	39 83       	std	Y+1, r19	; 0x01
   1223a:	28 83       	st	Y, r18
   1223c:	c0 5c       	subi	r28, 0xC0	; 192
   1223e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1205
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
   12240:	f1 01       	movw	r30, r2
   12242:	94 91       	lpm	r25, Z
   12244:	92 30       	cpi	r25, 0x02	; 2
   12246:	09 f0       	breq	.+2      	; 0x1224a <draw_menu(bool)+0x11f4>
   12248:	46 c0       	rjmp	.+140    	; 0x122d6 <draw_menu(bool)+0x1280>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1207
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   1224a:	f5 01       	movw	r30, r10
   1224c:	25 91       	lpm	r18, Z+
   1224e:	34 91       	lpm	r19, Z
   12250:	c2 54       	subi	r28, 0x42	; 66
   12252:	df 4f       	sbci	r29, 0xFF	; 255
   12254:	e8 81       	ld	r30, Y
   12256:	f9 81       	ldd	r31, Y+1	; 0x01
   12258:	ce 5b       	subi	r28, 0xBE	; 190
   1225a:	d0 40       	sbci	r29, 0x00	; 0
   1225c:	94 91       	lpm	r25, Z
   1225e:	c8 54       	subi	r28, 0x48	; 72
   12260:	df 4f       	sbci	r29, 0xFF	; 255
   12262:	48 81       	ld	r20, Y
   12264:	59 81       	ldd	r21, Y+1	; 0x01
   12266:	c8 5b       	subi	r28, 0xB8	; 184
   12268:	d0 40       	sbci	r29, 0x00	; 0
   1226a:	24 0f       	add	r18, r20
   1226c:	35 1f       	adc	r19, r21
   1226e:	b9 01       	movw	r22, r18
   12270:	9f 9d       	mul	r25, r15
   12272:	60 0d       	add	r22, r0
   12274:	71 1d       	adc	r23, r1
   12276:	11 24       	eor	r1, r1
   12278:	c0 54       	subi	r28, 0x40	; 64
   1227a:	df 4f       	sbci	r29, 0xFF	; 255
   1227c:	79 83       	std	Y+1, r23	; 0x01
   1227e:	68 83       	st	Y, r22
   12280:	c0 5c       	subi	r28, 0xC0	; 192
   12282:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1208
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
   12284:	f4 01       	movw	r30, r8
   12286:	25 91       	lpm	r18, Z+
   12288:	34 91       	lpm	r19, Z
   1228a:	c4 54       	subi	r28, 0x44	; 68
   1228c:	df 4f       	sbci	r29, 0xFF	; 255
   1228e:	e8 81       	ld	r30, Y
   12290:	f9 81       	ldd	r31, Y+1	; 0x01
   12292:	cc 5b       	subi	r28, 0xBC	; 188
   12294:	d0 40       	sbci	r29, 0x00	; 0
   12296:	94 91       	lpm	r25, Z
   12298:	c6 54       	subi	r28, 0x46	; 70
   1229a:	df 4f       	sbci	r29, 0xFF	; 255
   1229c:	48 81       	ld	r20, Y
   1229e:	59 81       	ldd	r21, Y+1	; 0x01
   122a0:	ca 5b       	subi	r28, 0xBA	; 186
   122a2:	d0 40       	sbci	r29, 0x00	; 0
   122a4:	24 0f       	add	r18, r20
   122a6:	35 1f       	adc	r19, r21
   122a8:	b9 01       	movw	r22, r18
   122aa:	94 9d       	mul	r25, r4
   122ac:	60 0d       	add	r22, r0
   122ae:	71 1d       	adc	r23, r1
   122b0:	11 24       	eor	r1, r1
   122b2:	ce 53       	subi	r28, 0x3E	; 62
   122b4:	df 4f       	sbci	r29, 0xFF	; 255
   122b6:	79 83       	std	Y+1, r23	; 0x01
   122b8:	68 83       	st	Y, r22
   122ba:	c2 5c       	subi	r28, 0xC2	; 194
   122bc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1209
          loop_t++;
   122be:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1210
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   122c0:	c8 53       	subi	r28, 0x38	; 56
   122c2:	df 4f       	sbci	r29, 0xFF	; 255
   122c4:	e8 81       	ld	r30, Y
   122c6:	f9 81       	ldd	r31, Y+1	; 0x01
   122c8:	c8 5c       	subi	r28, 0xC8	; 200
   122ca:	d0 40       	sbci	r29, 0x00	; 0
   122cc:	94 91       	lpm	r25, Z
   122ce:	f9 16       	cp	r15, r25
   122d0:	10 f0       	brcs	.+4      	; 0x122d6 <draw_menu(bool)+0x1280>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1213
          {
            loop_t = 0;
            loop_r++;
   122d2:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1212
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
   122d4:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1216
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_symbol_1->args), str1, str2);
   122d6:	ca 54       	subi	r28, 0x4A	; 74
   122d8:	df 4f       	sbci	r29, 0xFF	; 255
   122da:	e8 81       	ld	r30, Y
   122dc:	f9 81       	ldd	r31, Y+1	; 0x01
   122de:	c6 5b       	subi	r28, 0xB6	; 182
   122e0:	d0 40       	sbci	r29, 0x00	; 0
   122e2:	44 91       	lpm	r20, Z
   122e4:	8e 01       	movw	r16, r28
   122e6:	0f 57       	subi	r16, 0x7F	; 127
   122e8:	1f 4f       	sbci	r17, 0xFF	; 255
   122ea:	9e 01       	movw	r18, r28
   122ec:	2f 5f       	subi	r18, 0xFF	; 255
   122ee:	3f 4f       	sbci	r19, 0xFF	; 255
   122f0:	cd 54       	subi	r28, 0x4D	; 77
   122f2:	df 4f       	sbci	r29, 0xFF	; 255
   122f4:	68 81       	ld	r22, Y
   122f6:	c3 5b       	subi	r28, 0xB3	; 179
   122f8:	d0 40       	sbci	r29, 0x00	; 0
   122fa:	ce 52       	subi	r28, 0x2E	; 46
   122fc:	df 4f       	sbci	r29, 0xFF	; 255
   122fe:	e8 81       	ld	r30, Y
   12300:	f9 81       	ldd	r31, Y+1	; 0x01
   12302:	c2 5d       	subi	r28, 0xD2	; 210
   12304:	d0 40       	sbci	r29, 0x00	; 0
   12306:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1218
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
   12308:	c6 53       	subi	r28, 0x36	; 54
   1230a:	df 4f       	sbci	r29, 0xFF	; 255
   1230c:	e8 81       	ld	r30, Y
   1230e:	f9 81       	ldd	r31, Y+1	; 0x01
   12310:	ca 5c       	subi	r28, 0xCA	; 202
   12312:	d0 40       	sbci	r29, 0x00	; 0
   12314:	04 91       	lpm	r16, Z
   12316:	c3 53       	subi	r28, 0x33	; 51
   12318:	df 4f       	sbci	r29, 0xFF	; 255
   1231a:	e8 81       	ld	r30, Y
   1231c:	f9 81       	ldd	r31, Y+1	; 0x01
   1231e:	cd 5c       	subi	r28, 0xCD	; 205
   12320:	d0 40       	sbci	r29, 0x00	; 0
   12322:	25 91       	lpm	r18, Z+
   12324:	34 91       	lpm	r19, Z
   12326:	c1 53       	subi	r28, 0x31	; 49
   12328:	df 4f       	sbci	r29, 0xFF	; 255
   1232a:	e8 81       	ld	r30, Y
   1232c:	f9 81       	ldd	r31, Y+1	; 0x01
   1232e:	cf 5c       	subi	r28, 0xCF	; 207
   12330:	d0 40       	sbci	r29, 0x00	; 0
   12332:	45 91       	lpm	r20, Z+
   12334:	54 91       	lpm	r21, Z
   12336:	e9 80       	ldd	r14, Y+1	; 0x01
   12338:	ce 53       	subi	r28, 0x3E	; 62
   1233a:	df 4f       	sbci	r29, 0xFF	; 255
   1233c:	68 81       	ld	r22, Y
   1233e:	79 81       	ldd	r23, Y+1	; 0x01
   12340:	c2 5c       	subi	r28, 0xC2	; 194
   12342:	d0 40       	sbci	r29, 0x00	; 0
   12344:	c0 54       	subi	r28, 0x40	; 64
   12346:	df 4f       	sbci	r29, 0xFF	; 255
   12348:	88 81       	ld	r24, Y
   1234a:	99 81       	ldd	r25, Y+1	; 0x01
   1234c:	c0 5c       	subi	r28, 0xC0	; 192
   1234e:	d0 40       	sbci	r29, 0x00	; 0
   12350:	0e 94 97 48 	call	0x912e	; 0x912e <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1219
        loop_i++;
   12354:	ce 54       	subi	r28, 0x4E	; 78
   12356:	df 4f       	sbci	r29, 0xFF	; 255
   12358:	88 81       	ld	r24, Y
   1235a:	c2 5b       	subi	r28, 0xB2	; 178
   1235c:	d0 40       	sbci	r29, 0x00	; 0
   1235e:	8f 5f       	subi	r24, 0xFF	; 255
   12360:	ce 54       	subi	r28, 0x4E	; 78
   12362:	df 4f       	sbci	r29, 0xFF	; 255
   12364:	88 83       	st	Y, r24
   12366:	c2 5b       	subi	r28, 0xB2	; 178
   12368:	d0 40       	sbci	r29, 0x00	; 0
   1236a:	31 cf       	rjmp	.-414    	; 0x121ce <draw_menu(bool)+0x1178>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1197
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   1236c:	f4 01       	movw	r30, r8
   1236e:	25 91       	lpm	r18, Z+
   12370:	34 91       	lpm	r19, Z
   12372:	c4 54       	subi	r28, 0x44	; 68
   12374:	df 4f       	sbci	r29, 0xFF	; 255
   12376:	e8 81       	ld	r30, Y
   12378:	f9 81       	ldd	r31, Y+1	; 0x01
   1237a:	cc 5b       	subi	r28, 0xBC	; 188
   1237c:	d0 40       	sbci	r29, 0x00	; 0
   1237e:	94 91       	lpm	r25, Z
   12380:	c6 54       	subi	r28, 0x46	; 70
   12382:	df 4f       	sbci	r29, 0xFF	; 255
   12384:	68 81       	ld	r22, Y
   12386:	79 81       	ldd	r23, Y+1	; 0x01
   12388:	ca 5b       	subi	r28, 0xBA	; 186
   1238a:	d0 40       	sbci	r29, 0x00	; 0
   1238c:	26 0f       	add	r18, r22
   1238e:	37 1f       	adc	r19, r23
   12390:	f9 01       	movw	r30, r18
   12392:	9f 9d       	mul	r25, r15
   12394:	e0 0d       	add	r30, r0
   12396:	f1 1d       	adc	r31, r1
   12398:	11 24       	eor	r1, r1
   1239a:	ce 53       	subi	r28, 0x3E	; 62
   1239c:	df 4f       	sbci	r29, 0xFF	; 255
   1239e:	f9 83       	std	Y+1, r31	; 0x01
   123a0:	e8 83       	st	Y, r30
   123a2:	c2 5c       	subi	r28, 0xC2	; 194
   123a4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1198
          loop_t++;
   123a6:	f3 94       	inc	r15
   123a8:	38 cf       	rjmp	.-400    	; 0x1221a <draw_menu(bool)+0x11c4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1202
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   123aa:	f5 01       	movw	r30, r10
   123ac:	25 91       	lpm	r18, Z+
   123ae:	34 91       	lpm	r19, Z
   123b0:	c2 54       	subi	r28, 0x42	; 66
   123b2:	df 4f       	sbci	r29, 0xFF	; 255
   123b4:	e8 81       	ld	r30, Y
   123b6:	f9 81       	ldd	r31, Y+1	; 0x01
   123b8:	ce 5b       	subi	r28, 0xBE	; 190
   123ba:	d0 40       	sbci	r29, 0x00	; 0
   123bc:	94 91       	lpm	r25, Z
   123be:	c8 54       	subi	r28, 0x48	; 72
   123c0:	df 4f       	sbci	r29, 0xFF	; 255
   123c2:	48 81       	ld	r20, Y
   123c4:	59 81       	ldd	r21, Y+1	; 0x01
   123c6:	c8 5b       	subi	r28, 0xB8	; 184
   123c8:	d0 40       	sbci	r29, 0x00	; 0
   123ca:	24 0f       	add	r18, r20
   123cc:	35 1f       	adc	r19, r21
   123ce:	b9 01       	movw	r22, r18
   123d0:	9f 9d       	mul	r25, r15
   123d2:	60 0d       	add	r22, r0
   123d4:	71 1d       	adc	r23, r1
   123d6:	11 24       	eor	r1, r1
   123d8:	c0 54       	subi	r28, 0x40	; 64
   123da:	df 4f       	sbci	r29, 0xFF	; 255
   123dc:	79 83       	std	Y+1, r23	; 0x01
   123de:	68 83       	st	Y, r22
   123e0:	c0 5c       	subi	r28, 0xC0	; 192
   123e2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1203
          loop_t++;
   123e4:	f3 94       	inc	r15
   123e6:	2c cf       	rjmp	.-424    	; 0x12240 <draw_menu(bool)+0x11ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1222
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
   123e8:	cc 53       	subi	r28, 0x3C	; 60
   123ea:	df 4f       	sbci	r29, 0xFF	; 255
   123ec:	28 81       	ld	r18, Y
   123ee:	39 81       	ldd	r19, Y+1	; 0x01
   123f0:	c4 5c       	subi	r28, 0xC4	; 196
   123f2:	d0 40       	sbci	r29, 0x00	; 0
   123f4:	23 2b       	or	r18, r19
   123f6:	09 f4       	brne	.+2      	; 0x123fa <draw_menu(bool)+0x13a4>
   123f8:	69 c1       	rjmp	.+722    	; 0x126cc <draw_menu(bool)+0x1676>
   123fa:	ca 53       	subi	r28, 0x3A	; 58
   123fc:	df 4f       	sbci	r29, 0xFF	; 255
   123fe:	48 81       	ld	r20, Y
   12400:	59 81       	ldd	r21, Y+1	; 0x01
   12402:	c6 5c       	subi	r28, 0xC6	; 198
   12404:	d0 40       	sbci	r29, 0x00	; 0
   12406:	45 2b       	or	r20, r21
   12408:	09 f4       	brne	.+2      	; 0x1240c <draw_menu(bool)+0x13b6>
   1240a:	60 c1       	rjmp	.+704    	; 0x126cc <draw_menu(bool)+0x1676>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1224
    {
      loop_i = 0;
   1240c:	ce 54       	subi	r28, 0x4E	; 78
   1240e:	df 4f       	sbci	r29, 0xFF	; 255
   12410:	18 82       	st	Y, r1
   12412:	c2 5b       	subi	r28, 0xB2	; 178
   12414:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1227
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
   12416:	f6 01       	movw	r30, r12
   12418:	e2 59       	subi	r30, 0x92	; 146
   1241a:	fd 4f       	sbci	r31, 0xFD	; 253
   1241c:	e6 0d       	add	r30, r6
   1241e:	f7 1d       	adc	r31, r7
   12420:	25 91       	lpm	r18, Z+
   12422:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1228
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
   12424:	c6 01       	movw	r24, r12
   12426:	87 59       	subi	r24, 0x97	; 151
   12428:	9d 4f       	sbci	r25, 0xFD	; 253
   1242a:	b3 01       	movw	r22, r6
   1242c:	68 0f       	add	r22, r24
   1242e:	79 1f       	adc	r23, r25
   12430:	c2 54       	subi	r28, 0x42	; 66
   12432:	df 4f       	sbci	r29, 0xFF	; 255
   12434:	79 83       	std	Y+1, r23	; 0x01
   12436:	68 83       	st	Y, r22
   12438:	ce 5b       	subi	r28, 0xBE	; 190
   1243a:	d0 40       	sbci	r29, 0x00	; 0
   1243c:	fb 01       	movw	r30, r22
   1243e:	84 91       	lpm	r24, Z
   12440:	cd 54       	subi	r28, 0x4D	; 77
   12442:	df 4f       	sbci	r29, 0xFF	; 255
   12444:	68 81       	ld	r22, Y
   12446:	c3 5b       	subi	r28, 0xB3	; 179
   12448:	d0 40       	sbci	r29, 0x00	; 0
   1244a:	70 e0       	ldi	r23, 0x00	; 0
   1244c:	40 e0       	ldi	r20, 0x00	; 0
   1244e:	90 e0       	ldi	r25, 0x00	; 0
   12450:	f9 01       	movw	r30, r18
   12452:	19 95       	eicall
   12454:	c4 54       	subi	r28, 0x44	; 68
   12456:	df 4f       	sbci	r29, 0xFF	; 255
   12458:	88 83       	st	Y, r24
   1245a:	cc 5b       	subi	r28, 0xBC	; 188
   1245c:	d0 40       	sbci	r29, 0x00	; 0
   1245e:	cf 54       	subi	r28, 0x4F	; 79
   12460:	df 4f       	sbci	r29, 0xFF	; 255
   12462:	88 83       	st	Y, r24
   12464:	c1 5b       	subi	r28, 0xB1	; 177
   12466:	d0 40       	sbci	r29, 0x00	; 0
   12468:	ce 54       	subi	r28, 0x4E	; 78
   1246a:	df 4f       	sbci	r29, 0xFF	; 255
   1246c:	a8 80       	ld	r10, Y
   1246e:	c2 5b       	subi	r28, 0xB2	; 178
   12470:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1231
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   12472:	16 01       	movw	r2, r12
   12474:	f6 ea       	ldi	r31, 0xA6	; 166
   12476:	2f 1a       	sub	r2, r31
   12478:	fd ef       	ldi	r31, 0xFD	; 253
   1247a:	3f 0a       	sbc	r3, r31
   1247c:	26 0c       	add	r2, r6
   1247e:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1232
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   12480:	46 01       	movw	r8, r12
   12482:	24 ea       	ldi	r18, 0xA4	; 164
   12484:	82 1a       	sub	r8, r18
   12486:	2d ef       	ldi	r18, 0xFD	; 253
   12488:	92 0a       	sbc	r9, r18
   1248a:	86 0c       	add	r8, r6
   1248c:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1233
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   1248e:	c6 01       	movw	r24, r12
   12490:	8b 59       	subi	r24, 0x9B	; 155
   12492:	9d 4f       	sbci	r25, 0xFD	; 253
   12494:	a3 01       	movw	r20, r6
   12496:	48 0f       	add	r20, r24
   12498:	59 1f       	adc	r21, r25
   1249a:	ca 54       	subi	r28, 0x4A	; 74
   1249c:	df 4f       	sbci	r29, 0xFF	; 255
   1249e:	59 83       	std	Y+1, r21	; 0x01
   124a0:	48 83       	st	Y, r20
   124a2:	c6 5b       	subi	r28, 0xB6	; 182
   124a4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1235
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   124a6:	01 97       	sbiw	r24, 0x01	; 1
   124a8:	b3 01       	movw	r22, r6
   124aa:	68 0f       	add	r22, r24
   124ac:	79 1f       	adc	r23, r25
   124ae:	c8 53       	subi	r28, 0x38	; 56
   124b0:	df 4f       	sbci	r29, 0xFF	; 255
   124b2:	79 83       	std	Y+1, r23	; 0x01
   124b4:	68 83       	st	Y, r22
   124b6:	c8 5c       	subi	r28, 0xC8	; 200
   124b8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1240
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   124ba:	01 97       	sbiw	r24, 0x01	; 1
   124bc:	f3 01       	movw	r30, r6
   124be:	e8 0f       	add	r30, r24
   124c0:	f9 1f       	adc	r31, r25
   124c2:	c6 53       	subi	r28, 0x36	; 54
   124c4:	df 4f       	sbci	r29, 0xFF	; 255
   124c6:	f9 83       	std	Y+1, r31	; 0x01
   124c8:	e8 83       	st	Y, r30
   124ca:	ca 5c       	subi	r28, 0xCA	; 202
   124cc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1248
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   124ce:	03 96       	adiw	r24, 0x03	; 3
   124d0:	93 01       	movw	r18, r6
   124d2:	28 0f       	add	r18, r24
   124d4:	39 1f       	adc	r19, r25
   124d6:	c3 53       	subi	r28, 0x33	; 51
   124d8:	df 4f       	sbci	r29, 0xFF	; 255
   124da:	39 83       	std	Y+1, r19	; 0x01
   124dc:	28 83       	st	Y, r18
   124de:	cd 5c       	subi	r28, 0xCD	; 205
   124e0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1254
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
   124e2:	06 97       	sbiw	r24, 0x06	; 6
   124e4:	a3 01       	movw	r20, r6
   124e6:	48 0f       	add	r20, r24
   124e8:	59 1f       	adc	r21, r25
   124ea:	c1 53       	subi	r28, 0x31	; 49
   124ec:	df 4f       	sbci	r29, 0xFF	; 255
   124ee:	59 83       	std	Y+1, r21	; 0x01
   124f0:	48 83       	st	Y, r20
   124f2:	cf 5c       	subi	r28, 0xCF	; 207
   124f4:	d0 40       	sbci	r29, 0x00	; 0
   124f6:	02 97       	sbiw	r24, 0x02	; 2
   124f8:	b3 01       	movw	r22, r6
   124fa:	68 0f       	add	r22, r24
   124fc:	79 1f       	adc	r23, r25
   124fe:	ce 52       	subi	r28, 0x2E	; 46
   12500:	df 4f       	sbci	r29, 0xFF	; 255
   12502:	79 83       	std	Y+1, r23	; 0x01
   12504:	68 83       	st	Y, r22
   12506:	c2 5d       	subi	r28, 0xD2	; 210
   12508:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1226
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
   1250a:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1225
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
   1250c:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1229
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
   1250e:	c4 54       	subi	r28, 0x44	; 68
   12510:	df 4f       	sbci	r29, 0xFF	; 255
   12512:	78 81       	ld	r23, Y
   12514:	cc 5b       	subi	r28, 0xBC	; 188
   12516:	d0 40       	sbci	r29, 0x00	; 0
   12518:	a7 16       	cp	r10, r23
   1251a:	08 f0       	brcs	.+2      	; 0x1251e <draw_menu(bool)+0x14c8>
   1251c:	d7 c0       	rjmp	.+430    	; 0x126cc <draw_menu(bool)+0x1676>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1231
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   1251e:	f1 01       	movw	r30, r2
   12520:	25 91       	lpm	r18, Z+
   12522:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1232
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   12524:	f4 01       	movw	r30, r8
   12526:	85 91       	lpm	r24, Z+
   12528:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1233
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   1252a:	ca 54       	subi	r28, 0x4A	; 74
   1252c:	df 4f       	sbci	r29, 0xFF	; 255
   1252e:	e8 81       	ld	r30, Y
   12530:	f9 81       	ldd	r31, Y+1	; 0x01
   12532:	c6 5b       	subi	r28, 0xB6	; 182
   12534:	d0 40       	sbci	r29, 0x00	; 0
   12536:	44 91       	lpm	r20, Z
   12538:	44 23       	and	r20, r20
   1253a:	09 f4       	brne	.+2      	; 0x1253e <draw_menu(bool)+0x14e8>
   1253c:	cb c0       	rjmp	.+406    	; 0x126d4 <draw_menu(bool)+0x167e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1232
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   1253e:	c6 54       	subi	r28, 0x46	; 70
   12540:	df 4f       	sbci	r29, 0xFF	; 255
   12542:	48 81       	ld	r20, Y
   12544:	59 81       	ldd	r21, Y+1	; 0x01
   12546:	ca 5b       	subi	r28, 0xBA	; 186
   12548:	d0 40       	sbci	r29, 0x00	; 0
   1254a:	48 0f       	add	r20, r24
   1254c:	59 1f       	adc	r21, r25
   1254e:	ce 53       	subi	r28, 0x3E	; 62
   12550:	df 4f       	sbci	r29, 0xFF	; 255
   12552:	59 83       	std	Y+1, r21	; 0x01
   12554:	48 83       	st	Y, r20
   12556:	c2 5c       	subi	r28, 0xC2	; 194
   12558:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1238
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
   1255a:	ca 54       	subi	r28, 0x4A	; 74
   1255c:	df 4f       	sbci	r29, 0xFF	; 255
   1255e:	e8 81       	ld	r30, Y
   12560:	f9 81       	ldd	r31, Y+1	; 0x01
   12562:	c6 5b       	subi	r28, 0xB6	; 182
   12564:	d0 40       	sbci	r29, 0x00	; 0
   12566:	84 91       	lpm	r24, Z
   12568:	81 30       	cpi	r24, 0x01	; 1
   1256a:	09 f4       	brne	.+2      	; 0x1256e <draw_menu(bool)+0x1518>
   1256c:	d2 c0       	rjmp	.+420    	; 0x12712 <draw_menu(bool)+0x16bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1231
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   1256e:	c8 54       	subi	r28, 0x48	; 72
   12570:	df 4f       	sbci	r29, 0xFF	; 255
   12572:	48 81       	ld	r20, Y
   12574:	59 81       	ldd	r21, Y+1	; 0x01
   12576:	c8 5b       	subi	r28, 0xB8	; 184
   12578:	d0 40       	sbci	r29, 0x00	; 0
   1257a:	42 0f       	add	r20, r18
   1257c:	53 1f       	adc	r21, r19
   1257e:	c0 54       	subi	r28, 0x40	; 64
   12580:	df 4f       	sbci	r29, 0xFF	; 255
   12582:	59 83       	std	Y+1, r21	; 0x01
   12584:	48 83       	st	Y, r20
   12586:	c0 5c       	subi	r28, 0xC0	; 192
   12588:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1243
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
   1258a:	ca 54       	subi	r28, 0x4A	; 74
   1258c:	df 4f       	sbci	r29, 0xFF	; 255
   1258e:	e8 81       	ld	r30, Y
   12590:	f9 81       	ldd	r31, Y+1	; 0x01
   12592:	c6 5b       	subi	r28, 0xB6	; 182
   12594:	d0 40       	sbci	r29, 0x00	; 0
   12596:	84 91       	lpm	r24, Z
   12598:	82 30       	cpi	r24, 0x02	; 2
   1259a:	09 f0       	breq	.+2      	; 0x1259e <draw_menu(bool)+0x1548>
   1259c:	46 c0       	rjmp	.+140    	; 0x1262a <draw_menu(bool)+0x15d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1245
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   1259e:	f1 01       	movw	r30, r2
   125a0:	85 91       	lpm	r24, Z+
   125a2:	94 91       	lpm	r25, Z
   125a4:	c6 53       	subi	r28, 0x36	; 54
   125a6:	df 4f       	sbci	r29, 0xFF	; 255
   125a8:	e8 81       	ld	r30, Y
   125aa:	f9 81       	ldd	r31, Y+1	; 0x01
   125ac:	ca 5c       	subi	r28, 0xCA	; 202
   125ae:	d0 40       	sbci	r29, 0x00	; 0
   125b0:	24 91       	lpm	r18, Z
   125b2:	c8 54       	subi	r28, 0x48	; 72
   125b4:	df 4f       	sbci	r29, 0xFF	; 255
   125b6:	48 81       	ld	r20, Y
   125b8:	59 81       	ldd	r21, Y+1	; 0x01
   125ba:	c8 5b       	subi	r28, 0xB8	; 184
   125bc:	d0 40       	sbci	r29, 0x00	; 0
   125be:	84 0f       	add	r24, r20
   125c0:	95 1f       	adc	r25, r21
   125c2:	bc 01       	movw	r22, r24
   125c4:	2b 9d       	mul	r18, r11
   125c6:	60 0d       	add	r22, r0
   125c8:	71 1d       	adc	r23, r1
   125ca:	11 24       	eor	r1, r1
   125cc:	c0 54       	subi	r28, 0x40	; 64
   125ce:	df 4f       	sbci	r29, 0xFF	; 255
   125d0:	79 83       	std	Y+1, r23	; 0x01
   125d2:	68 83       	st	Y, r22
   125d4:	c0 5c       	subi	r28, 0xC0	; 192
   125d6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1246
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
   125d8:	f4 01       	movw	r30, r8
   125da:	85 91       	lpm	r24, Z+
   125dc:	94 91       	lpm	r25, Z
   125de:	c8 53       	subi	r28, 0x38	; 56
   125e0:	df 4f       	sbci	r29, 0xFF	; 255
   125e2:	e8 81       	ld	r30, Y
   125e4:	f9 81       	ldd	r31, Y+1	; 0x01
   125e6:	c8 5c       	subi	r28, 0xC8	; 200
   125e8:	d0 40       	sbci	r29, 0x00	; 0
   125ea:	24 91       	lpm	r18, Z
   125ec:	c6 54       	subi	r28, 0x46	; 70
   125ee:	df 4f       	sbci	r29, 0xFF	; 255
   125f0:	48 81       	ld	r20, Y
   125f2:	59 81       	ldd	r21, Y+1	; 0x01
   125f4:	ca 5b       	subi	r28, 0xBA	; 186
   125f6:	d0 40       	sbci	r29, 0x00	; 0
   125f8:	84 0f       	add	r24, r20
   125fa:	95 1f       	adc	r25, r21
   125fc:	bc 01       	movw	r22, r24
   125fe:	24 9d       	mul	r18, r4
   12600:	60 0d       	add	r22, r0
   12602:	71 1d       	adc	r23, r1
   12604:	11 24       	eor	r1, r1
   12606:	ce 53       	subi	r28, 0x3E	; 62
   12608:	df 4f       	sbci	r29, 0xFF	; 255
   1260a:	79 83       	std	Y+1, r23	; 0x01
   1260c:	68 83       	st	Y, r22
   1260e:	c2 5c       	subi	r28, 0xC2	; 194
   12610:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1247
          loop_t++;
   12612:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1248
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   12614:	c3 53       	subi	r28, 0x33	; 51
   12616:	df 4f       	sbci	r29, 0xFF	; 255
   12618:	e8 81       	ld	r30, Y
   1261a:	f9 81       	ldd	r31, Y+1	; 0x01
   1261c:	cd 5c       	subi	r28, 0xCD	; 205
   1261e:	d0 40       	sbci	r29, 0x00	; 0
   12620:	84 91       	lpm	r24, Z
   12622:	b8 16       	cp	r11, r24
   12624:	10 f0       	brcs	.+4      	; 0x1262a <draw_menu(bool)+0x15d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1251
          {
            loop_t = 0;
            loop_r++;
   12626:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1250
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
   12628:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1254
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
   1262a:	c1 53       	subi	r28, 0x31	; 49
   1262c:	df 4f       	sbci	r29, 0xFF	; 255
   1262e:	e8 81       	ld	r30, Y
   12630:	f9 81       	ldd	r31, Y+1	; 0x01
   12632:	cf 5c       	subi	r28, 0xCF	; 207
   12634:	d0 40       	sbci	r29, 0x00	; 0
   12636:	25 91       	lpm	r18, Z+
   12638:	34 91       	lpm	r19, Z
   1263a:	ce 52       	subi	r28, 0x2E	; 46
   1263c:	df 4f       	sbci	r29, 0xFF	; 255
   1263e:	e8 81       	ld	r30, Y
   12640:	f9 81       	ldd	r31, Y+1	; 0x01
   12642:	c2 5d       	subi	r28, 0xD2	; 210
   12644:	d0 40       	sbci	r29, 0x00	; 0
   12646:	45 91       	lpm	r20, Z+
   12648:	54 91       	lpm	r21, Z
   1264a:	ca 53       	subi	r28, 0x3A	; 58
   1264c:	df 4f       	sbci	r29, 0xFF	; 255
   1264e:	e8 80       	ld	r14, Y
   12650:	f9 80       	ldd	r15, Y+1	; 0x01
   12652:	c6 5c       	subi	r28, 0xC6	; 198
   12654:	d0 40       	sbci	r29, 0x00	; 0
   12656:	cc 53       	subi	r28, 0x3C	; 60
   12658:	df 4f       	sbci	r29, 0xFF	; 255
   1265a:	08 81       	ld	r16, Y
   1265c:	19 81       	ldd	r17, Y+1	; 0x01
   1265e:	c4 5c       	subi	r28, 0xC4	; 196
   12660:	d0 40       	sbci	r29, 0x00	; 0
   12662:	ce 53       	subi	r28, 0x3E	; 62
   12664:	df 4f       	sbci	r29, 0xFF	; 255
   12666:	68 81       	ld	r22, Y
   12668:	79 81       	ldd	r23, Y+1	; 0x01
   1266a:	c2 5c       	subi	r28, 0xC2	; 194
   1266c:	d0 40       	sbci	r29, 0x00	; 0
   1266e:	c0 54       	subi	r28, 0x40	; 64
   12670:	df 4f       	sbci	r29, 0xFF	; 255
   12672:	88 81       	ld	r24, Y
   12674:	99 81       	ldd	r25, Y+1	; 0x01
   12676:	c0 5c       	subi	r28, 0xC0	; 192
   12678:	d0 40       	sbci	r29, 0x00	; 0
   1267a:	0e 94 9a 3c 	call	0x7934	; 0x7934 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1267e:	18 2f       	mov	r17, r24
   12680:	81 e0       	ldi	r24, 0x01	; 1
   12682:	8a 0d       	add	r24, r10
   12684:	11 23       	and	r17, r17
   12686:	21 f1       	breq	.+72     	; 0x126d0 <draw_menu(bool)+0x167a>
   12688:	ce 54       	subi	r28, 0x4E	; 78
   1268a:	df 4f       	sbci	r29, 0xFF	; 255
   1268c:	a8 82       	st	Y, r10
   1268e:	c2 5b       	subi	r28, 0xB2	; 178
   12690:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1256
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_symbol_1->dyn_symbol_onclick);
   12692:	f6 01       	movw	r30, r12
   12694:	e4 59       	subi	r30, 0x94	; 148
   12696:	fd 4f       	sbci	r31, 0xFD	; 253
   12698:	e6 0d       	add	r30, r6
   1269a:	f7 1d       	adc	r31, r7
   1269c:	25 91       	lpm	r18, Z+
   1269e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1257
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
   126a0:	c2 54       	subi	r28, 0x42	; 66
   126a2:	df 4f       	sbci	r29, 0xFF	; 255
   126a4:	e8 81       	ld	r30, Y
   126a6:	f9 81       	ldd	r31, Y+1	; 0x01
   126a8:	ce 5b       	subi	r28, 0xBE	; 190
   126aa:	d0 40       	sbci	r29, 0x00	; 0
   126ac:	84 91       	lpm	r24, Z
   126ae:	cd 54       	subi	r28, 0x4D	; 77
   126b0:	df 4f       	sbci	r29, 0xFF	; 255
   126b2:	68 81       	ld	r22, Y
   126b4:	c3 5b       	subi	r28, 0xB3	; 179
   126b6:	d0 40       	sbci	r29, 0x00	; 0
   126b8:	70 e0       	ldi	r23, 0x00	; 0
   126ba:	4a 2d       	mov	r20, r10
   126bc:	90 e0       	ldi	r25, 0x00	; 0
   126be:	f9 01       	movw	r30, r18
   126c0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1258
          ret = true;
   126c2:	c4 53       	subi	r28, 0x34	; 52
   126c4:	df 4f       	sbci	r29, 0xFF	; 255
   126c6:	18 83       	st	Y, r17
   126c8:	cc 5c       	subi	r28, 0xCC	; 204
   126ca:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1179
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
   126cc:	53 94       	inc	r5
   126ce:	d6 cc       	rjmp	.-1620   	; 0x1207c <draw_menu(bool)+0x1026>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1254
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
   126d0:	a8 2e       	mov	r10, r24
   126d2:	1d cf       	rjmp	.-454    	; 0x1250e <draw_menu(bool)+0x14b8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1235
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   126d4:	f4 01       	movw	r30, r8
   126d6:	85 91       	lpm	r24, Z+
   126d8:	94 91       	lpm	r25, Z
   126da:	c8 53       	subi	r28, 0x38	; 56
   126dc:	df 4f       	sbci	r29, 0xFF	; 255
   126de:	e8 81       	ld	r30, Y
   126e0:	f9 81       	ldd	r31, Y+1	; 0x01
   126e2:	c8 5c       	subi	r28, 0xC8	; 200
   126e4:	d0 40       	sbci	r29, 0x00	; 0
   126e6:	44 91       	lpm	r20, Z
   126e8:	c6 54       	subi	r28, 0x46	; 70
   126ea:	df 4f       	sbci	r29, 0xFF	; 255
   126ec:	68 81       	ld	r22, Y
   126ee:	79 81       	ldd	r23, Y+1	; 0x01
   126f0:	ca 5b       	subi	r28, 0xBA	; 186
   126f2:	d0 40       	sbci	r29, 0x00	; 0
   126f4:	86 0f       	add	r24, r22
   126f6:	97 1f       	adc	r25, r23
   126f8:	fc 01       	movw	r30, r24
   126fa:	4b 9d       	mul	r20, r11
   126fc:	e0 0d       	add	r30, r0
   126fe:	f1 1d       	adc	r31, r1
   12700:	11 24       	eor	r1, r1
   12702:	ce 53       	subi	r28, 0x3E	; 62
   12704:	df 4f       	sbci	r29, 0xFF	; 255
   12706:	f9 83       	std	Y+1, r31	; 0x01
   12708:	e8 83       	st	Y, r30
   1270a:	c2 5c       	subi	r28, 0xC2	; 194
   1270c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1236
          loop_t++;
   1270e:	b3 94       	inc	r11
   12710:	24 cf       	rjmp	.-440    	; 0x1255a <draw_menu(bool)+0x1504>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1240
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   12712:	f1 01       	movw	r30, r2
   12714:	85 91       	lpm	r24, Z+
   12716:	94 91       	lpm	r25, Z
   12718:	c6 53       	subi	r28, 0x36	; 54
   1271a:	df 4f       	sbci	r29, 0xFF	; 255
   1271c:	e8 81       	ld	r30, Y
   1271e:	f9 81       	ldd	r31, Y+1	; 0x01
   12720:	ca 5c       	subi	r28, 0xCA	; 202
   12722:	d0 40       	sbci	r29, 0x00	; 0
   12724:	24 91       	lpm	r18, Z
   12726:	c8 54       	subi	r28, 0x48	; 72
   12728:	df 4f       	sbci	r29, 0xFF	; 255
   1272a:	48 81       	ld	r20, Y
   1272c:	59 81       	ldd	r21, Y+1	; 0x01
   1272e:	c8 5b       	subi	r28, 0xB8	; 184
   12730:	d0 40       	sbci	r29, 0x00	; 0
   12732:	84 0f       	add	r24, r20
   12734:	95 1f       	adc	r25, r21
   12736:	bc 01       	movw	r22, r24
   12738:	2b 9d       	mul	r18, r11
   1273a:	60 0d       	add	r22, r0
   1273c:	71 1d       	adc	r23, r1
   1273e:	11 24       	eor	r1, r1
   12740:	c0 54       	subi	r28, 0x40	; 64
   12742:	df 4f       	sbci	r29, 0xFF	; 255
   12744:	79 83       	std	Y+1, r23	; 0x01
   12746:	68 83       	st	Y, r22
   12748:	c0 5c       	subi	r28, 0xC0	; 192
   1274a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1241
          loop_t++;
   1274c:	b3 94       	inc	r11
   1274e:	1d cf       	rjmp	.-454    	; 0x1258a <draw_menu(bool)+0x1534>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1265
        }
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
   12750:	c4 53       	subi	r28, 0x34	; 52
   12752:	df 4f       	sbci	r29, 0xFF	; 255
   12754:	f8 81       	ld	r31, Y
   12756:	cc 5c       	subi	r28, 0xCC	; 204
   12758:	d0 40       	sbci	r29, 0x00	; 0
   1275a:	f1 11       	cpse	r31, r1
   1275c:	0c 94 37 9b 	jmp	0x1366e	; 0x1366e <draw_menu(bool)+0x2618>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1267
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
   12760:	91 2c       	mov	r9, r1
   12762:	93 01       	movw	r18, r6
   12764:	2f 53       	subi	r18, 0x3F	; 63
   12766:	3d 4f       	sbci	r19, 0xFD	; 253
   12768:	cc 52       	subi	r28, 0x2C	; 44
   1276a:	df 4f       	sbci	r29, 0xFF	; 255
   1276c:	39 83       	std	Y+1, r19	; 0x01
   1276e:	28 83       	st	Y, r18
   12770:	c4 5d       	subi	r28, 0xD4	; 212
   12772:	d0 40       	sbci	r29, 0x00	; 0
   12774:	cc 52       	subi	r28, 0x2C	; 44
   12776:	df 4f       	sbci	r29, 0xFF	; 255
   12778:	e8 81       	ld	r30, Y
   1277a:	f9 81       	ldd	r31, Y+1	; 0x01
   1277c:	c4 5d       	subi	r28, 0xD4	; 212
   1277e:	d0 40       	sbci	r29, 0x00	; 0
   12780:	84 91       	lpm	r24, Z
   12782:	98 16       	cp	r9, r24
   12784:	08 f0       	brcs	.+2      	; 0x12788 <draw_menu(bool)+0x1732>
   12786:	14 c3       	rjmp	.+1576   	; 0x12db0 <draw_menu(bool)+0x1d5a>
   12788:	f7 e1       	ldi	r31, 0x17	; 23
   1278a:	9f 9e       	mul	r9, r31
   1278c:	20 01       	movw	r4, r0
   1278e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1270
  {
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
   12790:	f2 01       	movw	r30, r4
   12792:	ee 53       	subi	r30, 0x3E	; 62
   12794:	fe 4f       	sbci	r31, 0xFE	; 254
   12796:	e6 0d       	add	r30, r6
   12798:	f7 1d       	adc	r31, r7
   1279a:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1271
    if (enable_redraw(rdr, redraw_class) == true)
   1279c:	cf 52       	subi	r28, 0x2F	; 47
   1279e:	df 4f       	sbci	r29, 0xFF	; 255
   127a0:	68 81       	ld	r22, Y
   127a2:	c1 5d       	subi	r28, 0xD1	; 209
   127a4:	d0 40       	sbci	r29, 0x00	; 0
   127a6:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <enable_redraw(unsigned char, unsigned char)>
   127aa:	88 23       	and	r24, r24
   127ac:	09 f4       	brne	.+2      	; 0x127b0 <draw_menu(bool)+0x175a>
   127ae:	83 c1       	rjmp	.+774    	; 0x12ab6 <draw_menu(bool)+0x1a60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1273
    {
      loop_i = 0;
   127b0:	ce 54       	subi	r28, 0x4E	; 78
   127b2:	df 4f       	sbci	r29, 0xFF	; 255
   127b4:	18 82       	st	Y, r1
   127b6:	c2 5b       	subi	r28, 0xB2	; 178
   127b8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1275
      loop_t = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_button_1->function_for_max_items);
   127ba:	f2 01       	movw	r30, r4
   127bc:	e0 54       	subi	r30, 0x40	; 64
   127be:	fe 4f       	sbci	r31, 0xFE	; 254
   127c0:	e6 0d       	add	r30, r6
   127c2:	f7 1d       	adc	r31, r7
   127c4:	25 91       	lpm	r18, Z+
   127c6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1276
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
   127c8:	c2 01       	movw	r24, r4
   127ca:	85 54       	subi	r24, 0x45	; 69
   127cc:	9e 4f       	sbci	r25, 0xFE	; 254
   127ce:	a3 01       	movw	r20, r6
   127d0:	48 0f       	add	r20, r24
   127d2:	59 1f       	adc	r21, r25
   127d4:	ca 54       	subi	r28, 0x4A	; 74
   127d6:	df 4f       	sbci	r29, 0xFF	; 255
   127d8:	59 83       	std	Y+1, r21	; 0x01
   127da:	48 83       	st	Y, r20
   127dc:	c6 5b       	subi	r28, 0xB6	; 182
   127de:	d0 40       	sbci	r29, 0x00	; 0
   127e0:	fa 01       	movw	r30, r20
   127e2:	84 91       	lpm	r24, Z
   127e4:	cd 54       	subi	r28, 0x4D	; 77
   127e6:	df 4f       	sbci	r29, 0xFF	; 255
   127e8:	68 81       	ld	r22, Y
   127ea:	c3 5b       	subi	r28, 0xB3	; 179
   127ec:	d0 40       	sbci	r29, 0x00	; 0
   127ee:	70 e0       	ldi	r23, 0x00	; 0
   127f0:	40 e0       	ldi	r20, 0x00	; 0
   127f2:	90 e0       	ldi	r25, 0x00	; 0
   127f4:	f9 01       	movw	r30, r18
   127f6:	19 95       	eicall
   127f8:	cf 54       	subi	r28, 0x4F	; 79
   127fa:	df 4f       	sbci	r29, 0xFF	; 255
   127fc:	88 83       	st	Y, r24
   127fe:	c1 5b       	subi	r28, 0xB1	; 177
   12800:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1277
      gss = (ret_string_fptr*)pgm_read_word(&dyn_button_1->get_status_string);
   12802:	f2 01       	movw	r30, r4
   12804:	e4 54       	subi	r30, 0x44	; 68
   12806:	fe 4f       	sbci	r31, 0xFE	; 254
   12808:	e6 0d       	add	r30, r6
   1280a:	f7 1d       	adc	r31, r7
   1280c:	25 91       	lpm	r18, Z+
   1280e:	34 91       	lpm	r19, Z
   12810:	ca 52       	subi	r28, 0x2A	; 42
   12812:	df 4f       	sbci	r29, 0xFF	; 255
   12814:	39 83       	std	Y+1, r19	; 0x01
   12816:	28 83       	st	Y, r18
   12818:	c6 5d       	subi	r28, 0xD6	; 214
   1281a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1279

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
   1281c:	f2 01       	movw	r30, r4
   1281e:	e6 54       	subi	r30, 0x46	; 70
   12820:	fe 4f       	sbci	r31, 0xFE	; 254
   12822:	e6 0d       	add	r30, r6
   12824:	f7 1d       	adc	r31, r7
   12826:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1280
      if (slider_active != MENU_SLIDER_OFF)
   12828:	4f 3f       	cpi	r20, 0xFF	; 255
   1282a:	b9 f0       	breq	.+46     	; 0x1285a <draw_menu(bool)+0x1804>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1281
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
   1282c:	f2 01       	movw	r30, r4
   1282e:	e8 54       	subi	r30, 0x48	; 72
   12830:	fe 4f       	sbci	r31, 0xFE	; 254
   12832:	e6 0d       	add	r30, r6
   12834:	f7 1d       	adc	r31, r7
   12836:	24 91       	lpm	r18, Z
   12838:	f2 01       	movw	r30, r4
   1283a:	e7 54       	subi	r30, 0x47	; 71
   1283c:	fe 4f       	sbci	r31, 0xFE	; 254
   1283e:	e6 0d       	add	r30, r6
   12840:	f7 1d       	adc	r31, r7
   12842:	e4 91       	lpm	r30, Z
   12844:	2e 9f       	mul	r18, r30
   12846:	20 2d       	mov	r18, r0
   12848:	11 24       	eor	r1, r1
   1284a:	be 01       	movw	r22, r28
   1284c:	6f 54       	subi	r22, 0x4F	; 79
   1284e:	7f 4f       	sbci	r23, 0xFF	; 255
   12850:	ce 01       	movw	r24, r28
   12852:	8e 54       	subi	r24, 0x4E	; 78
   12854:	9f 4f       	sbci	r25, 0xFF	; 255
   12856:	0e 94 b5 3c 	call	0x796a	; 0x796a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1284
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   1285a:	c2 01       	movw	r24, r4
   1285c:	84 55       	subi	r24, 0x54	; 84
   1285e:	9e 4f       	sbci	r25, 0xFE	; 254
   12860:	a3 01       	movw	r20, r6
   12862:	48 0f       	add	r20, r24
   12864:	59 1f       	adc	r21, r25
   12866:	c4 54       	subi	r28, 0x44	; 68
   12868:	df 4f       	sbci	r29, 0xFF	; 255
   1286a:	59 83       	std	Y+1, r21	; 0x01
   1286c:	48 83       	st	Y, r20
   1286e:	cc 5b       	subi	r28, 0xBC	; 188
   12870:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1285
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   12872:	12 01       	movw	r2, r4
   12874:	52 e5       	ldi	r21, 0x52	; 82
   12876:	25 1a       	sub	r2, r21
   12878:	5e ef       	ldi	r21, 0xFE	; 254
   1287a:	35 0a       	sbc	r3, r21
   1287c:	26 0c       	add	r2, r6
   1287e:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1286
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   12880:	0b 96       	adiw	r24, 0x0b	; 11
   12882:	b3 01       	movw	r22, r6
   12884:	68 0f       	add	r22, r24
   12886:	79 1f       	adc	r23, r25
   12888:	c2 54       	subi	r28, 0x42	; 66
   1288a:	df 4f       	sbci	r29, 0xFF	; 255
   1288c:	79 83       	std	Y+1, r23	; 0x01
   1288e:	68 83       	st	Y, r22
   12890:	ce 5b       	subi	r28, 0xBE	; 190
   12892:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1287
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   12894:	01 97       	sbiw	r24, 0x01	; 1
   12896:	f3 01       	movw	r30, r6
   12898:	e8 0f       	add	r30, r24
   1289a:	f9 1f       	adc	r31, r25
   1289c:	c6 53       	subi	r28, 0x36	; 54
   1289e:	df 4f       	sbci	r29, 0xFF	; 255
   128a0:	f9 83       	std	Y+1, r31	; 0x01
   128a2:	e8 83       	st	Y, r30
   128a4:	ca 5c       	subi	r28, 0xCA	; 202
   128a6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1289
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   128a8:	01 97       	sbiw	r24, 0x01	; 1
   128aa:	93 01       	movw	r18, r6
   128ac:	28 0f       	add	r18, r24
   128ae:	39 1f       	adc	r19, r25
   128b0:	c3 53       	subi	r28, 0x33	; 51
   128b2:	df 4f       	sbci	r29, 0xFF	; 255
   128b4:	39 83       	std	Y+1, r19	; 0x01
   128b6:	28 83       	st	Y, r18
   128b8:	cd 5c       	subi	r28, 0xCD	; 205
   128ba:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1291
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_button_1->args) , str1, str2);
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
   128bc:	01 97       	sbiw	r24, 0x01	; 1
   128be:	a3 01       	movw	r20, r6
   128c0:	48 0f       	add	r20, r24
   128c2:	59 1f       	adc	r21, r25
   128c4:	c8 53       	subi	r28, 0x38	; 56
   128c6:	df 4f       	sbci	r29, 0xFF	; 255
   128c8:	59 83       	std	Y+1, r21	; 0x01
   128ca:	48 83       	st	Y, r20
   128cc:	c8 5c       	subi	r28, 0xC8	; 200
   128ce:	d0 40       	sbci	r29, 0x00	; 0
   128d0:	02 97       	sbiw	r24, 0x02	; 2
   128d2:	b3 01       	movw	r22, r6
   128d4:	68 0f       	add	r22, r24
   128d6:	79 1f       	adc	r23, r25
   128d8:	c1 53       	subi	r28, 0x31	; 49
   128da:	df 4f       	sbci	r29, 0xFF	; 255
   128dc:	79 83       	std	Y+1, r23	; 0x01
   128de:	68 83       	st	Y, r22
   128e0:	cf 5c       	subi	r28, 0xCF	; 207
   128e2:	d0 40       	sbci	r29, 0x00	; 0
   128e4:	02 97       	sbiw	r24, 0x02	; 2
   128e6:	f3 01       	movw	r30, r6
   128e8:	e8 0f       	add	r30, r24
   128ea:	f9 1f       	adc	r31, r25
   128ec:	ce 52       	subi	r28, 0x2E	; 46
   128ee:	df 4f       	sbci	r29, 0xFF	; 255
   128f0:	f9 83       	std	Y+1, r31	; 0x01
   128f2:	e8 83       	st	Y, r30
   128f4:	c2 5d       	subi	r28, 0xD2	; 210
   128f6:	d0 40       	sbci	r29, 0x00	; 0
   128f8:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1282
      gss = (ret_string_fptr*)pgm_read_word(&dyn_button_1->get_status_string);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
   128fa:	ce 54       	subi	r28, 0x4E	; 78
   128fc:	df 4f       	sbci	r29, 0xFF	; 255
   128fe:	88 81       	ld	r24, Y
   12900:	c2 5b       	subi	r28, 0xB2	; 178
   12902:	d0 40       	sbci	r29, 0x00	; 0
   12904:	cf 54       	subi	r28, 0x4F	; 79
   12906:	df 4f       	sbci	r29, 0xFF	; 255
   12908:	98 81       	ld	r25, Y
   1290a:	c1 5b       	subi	r28, 0xB1	; 177
   1290c:	d0 40       	sbci	r29, 0x00	; 0
   1290e:	89 17       	cp	r24, r25
   12910:	08 f0       	brcs	.+2      	; 0x12914 <draw_menu(bool)+0x18be>
   12912:	d1 c0       	rjmp	.+418    	; 0x12ab6 <draw_menu(bool)+0x1a60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1284
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   12914:	c4 54       	subi	r28, 0x44	; 68
   12916:	df 4f       	sbci	r29, 0xFF	; 255
   12918:	e8 81       	ld	r30, Y
   1291a:	f9 81       	ldd	r31, Y+1	; 0x01
   1291c:	cc 5b       	subi	r28, 0xBC	; 188
   1291e:	d0 40       	sbci	r29, 0x00	; 0
   12920:	45 91       	lpm	r20, Z+
   12922:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1285
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   12924:	f1 01       	movw	r30, r2
   12926:	25 91       	lpm	r18, Z+
   12928:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1286
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   1292a:	c2 54       	subi	r28, 0x42	; 66
   1292c:	df 4f       	sbci	r29, 0xFF	; 255
   1292e:	e8 81       	ld	r30, Y
   12930:	f9 81       	ldd	r31, Y+1	; 0x01
   12932:	ce 5b       	subi	r28, 0xBE	; 190
   12934:	d0 40       	sbci	r29, 0x00	; 0
   12936:	94 91       	lpm	r25, Z
   12938:	99 23       	and	r25, r25
   1293a:	09 f4       	brne	.+2      	; 0x1293e <draw_menu(bool)+0x18e8>
   1293c:	7b c0       	rjmp	.+246    	; 0x12a34 <draw_menu(bool)+0x19de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1285
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   1293e:	c6 54       	subi	r28, 0x46	; 70
   12940:	df 4f       	sbci	r29, 0xFF	; 255
   12942:	68 81       	ld	r22, Y
   12944:	79 81       	ldd	r23, Y+1	; 0x01
   12946:	ca 5b       	subi	r28, 0xBA	; 186
   12948:	d0 40       	sbci	r29, 0x00	; 0
   1294a:	62 0f       	add	r22, r18
   1294c:	73 1f       	adc	r23, r19
   1294e:	ce 53       	subi	r28, 0x3E	; 62
   12950:	df 4f       	sbci	r29, 0xFF	; 255
   12952:	79 83       	std	Y+1, r23	; 0x01
   12954:	68 83       	st	Y, r22
   12956:	c2 5c       	subi	r28, 0xC2	; 194
   12958:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1288
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
   1295a:	c2 54       	subi	r28, 0x42	; 66
   1295c:	df 4f       	sbci	r29, 0xFF	; 255
   1295e:	e8 81       	ld	r30, Y
   12960:	f9 81       	ldd	r31, Y+1	; 0x01
   12962:	ce 5b       	subi	r28, 0xBE	; 190
   12964:	d0 40       	sbci	r29, 0x00	; 0
   12966:	94 91       	lpm	r25, Z
   12968:	91 30       	cpi	r25, 0x01	; 1
   1296a:	09 f4       	brne	.+2      	; 0x1296e <draw_menu(bool)+0x1918>
   1296c:	81 c0       	rjmp	.+258    	; 0x12a70 <draw_menu(bool)+0x1a1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1284
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   1296e:	c8 54       	subi	r28, 0x48	; 72
   12970:	df 4f       	sbci	r29, 0xFF	; 255
   12972:	28 81       	ld	r18, Y
   12974:	39 81       	ldd	r19, Y+1	; 0x01
   12976:	c8 5b       	subi	r28, 0xB8	; 184
   12978:	d0 40       	sbci	r29, 0x00	; 0
   1297a:	24 0f       	add	r18, r20
   1297c:	35 1f       	adc	r19, r21
   1297e:	c0 54       	subi	r28, 0x40	; 64
   12980:	df 4f       	sbci	r29, 0xFF	; 255
   12982:	39 83       	std	Y+1, r19	; 0x01
   12984:	28 83       	st	Y, r18
   12986:	c0 5c       	subi	r28, 0xC0	; 192
   12988:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1290
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_button_1->args) , str1, str2);
   1298a:	ca 54       	subi	r28, 0x4A	; 74
   1298c:	df 4f       	sbci	r29, 0xFF	; 255
   1298e:	e8 81       	ld	r30, Y
   12990:	f9 81       	ldd	r31, Y+1	; 0x01
   12992:	c6 5b       	subi	r28, 0xB6	; 182
   12994:	d0 40       	sbci	r29, 0x00	; 0
   12996:	44 91       	lpm	r20, Z
   12998:	8e 01       	movw	r16, r28
   1299a:	0f 57       	subi	r16, 0x7F	; 127
   1299c:	1f 4f       	sbci	r17, 0xFF	; 255
   1299e:	9e 01       	movw	r18, r28
   129a0:	2f 5f       	subi	r18, 0xFF	; 255
   129a2:	3f 4f       	sbci	r19, 0xFF	; 255
   129a4:	cd 54       	subi	r28, 0x4D	; 77
   129a6:	df 4f       	sbci	r29, 0xFF	; 255
   129a8:	68 81       	ld	r22, Y
   129aa:	c3 5b       	subi	r28, 0xB3	; 179
   129ac:	d0 40       	sbci	r29, 0x00	; 0
   129ae:	ca 52       	subi	r28, 0x2A	; 42
   129b0:	df 4f       	sbci	r29, 0xFF	; 255
   129b2:	e8 81       	ld	r30, Y
   129b4:	f9 81       	ldd	r31, Y+1	; 0x01
   129b6:	c6 5d       	subi	r28, 0xD6	; 214
   129b8:	d0 40       	sbci	r29, 0x00	; 0
   129ba:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1291
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
   129bc:	c8 53       	subi	r28, 0x38	; 56
   129be:	df 4f       	sbci	r29, 0xFF	; 255
   129c0:	e8 81       	ld	r30, Y
   129c2:	f9 81       	ldd	r31, Y+1	; 0x01
   129c4:	c8 5c       	subi	r28, 0xC8	; 200
   129c6:	d0 40       	sbci	r29, 0x00	; 0
   129c8:	e4 90       	lpm	r14, Z
   129ca:	04 91       	lpm	r16, Z
   129cc:	c1 53       	subi	r28, 0x31	; 49
   129ce:	df 4f       	sbci	r29, 0xFF	; 255
   129d0:	e8 81       	ld	r30, Y
   129d2:	f9 81       	ldd	r31, Y+1	; 0x01
   129d4:	cf 5c       	subi	r28, 0xCF	; 207
   129d6:	d0 40       	sbci	r29, 0x00	; 0
   129d8:	25 91       	lpm	r18, Z+
   129da:	34 91       	lpm	r19, Z
   129dc:	ce 52       	subi	r28, 0x2E	; 46
   129de:	df 4f       	sbci	r29, 0xFF	; 255
   129e0:	e8 81       	ld	r30, Y
   129e2:	f9 81       	ldd	r31, Y+1	; 0x01
   129e4:	c2 5d       	subi	r28, 0xD2	; 210
   129e6:	d0 40       	sbci	r29, 0x00	; 0
   129e8:	45 91       	lpm	r20, Z+
   129ea:	54 91       	lpm	r21, Z
   129ec:	88 24       	eor	r8, r8
   129ee:	83 94       	inc	r8
   129f0:	be 01       	movw	r22, r28
   129f2:	6f 57       	subi	r22, 0x7F	; 127
   129f4:	7f 4f       	sbci	r23, 0xFF	; 255
   129f6:	5b 01       	movw	r10, r22
   129f8:	ce 01       	movw	r24, r28
   129fa:	01 96       	adiw	r24, 0x01	; 1
   129fc:	6c 01       	movw	r12, r24
   129fe:	ce 53       	subi	r28, 0x3E	; 62
   12a00:	df 4f       	sbci	r29, 0xFF	; 255
   12a02:	68 81       	ld	r22, Y
   12a04:	79 81       	ldd	r23, Y+1	; 0x01
   12a06:	c2 5c       	subi	r28, 0xC2	; 194
   12a08:	d0 40       	sbci	r29, 0x00	; 0
   12a0a:	c0 54       	subi	r28, 0x40	; 64
   12a0c:	df 4f       	sbci	r29, 0xFF	; 255
   12a0e:	88 81       	ld	r24, Y
   12a10:	99 81       	ldd	r25, Y+1	; 0x01
   12a12:	c0 5c       	subi	r28, 0xC0	; 192
   12a14:	d0 40       	sbci	r29, 0x00	; 0
   12a16:	0e 94 fc 4a 	call	0x95f8	; 0x95f8 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1292
        loop_t++;
   12a1a:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1293
        loop_i++;
   12a1c:	ce 54       	subi	r28, 0x4E	; 78
   12a1e:	df 4f       	sbci	r29, 0xFF	; 255
   12a20:	88 81       	ld	r24, Y
   12a22:	c2 5b       	subi	r28, 0xB2	; 178
   12a24:	d0 40       	sbci	r29, 0x00	; 0
   12a26:	8f 5f       	subi	r24, 0xFF	; 255
   12a28:	ce 54       	subi	r28, 0x4E	; 78
   12a2a:	df 4f       	sbci	r29, 0xFF	; 255
   12a2c:	88 83       	st	Y, r24
   12a2e:	c2 5b       	subi	r28, 0xB2	; 178
   12a30:	d0 40       	sbci	r29, 0x00	; 0
   12a32:	63 cf       	rjmp	.-314    	; 0x128fa <draw_menu(bool)+0x18a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1287
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   12a34:	f1 01       	movw	r30, r2
   12a36:	25 91       	lpm	r18, Z+
   12a38:	34 91       	lpm	r19, Z
   12a3a:	c6 53       	subi	r28, 0x36	; 54
   12a3c:	df 4f       	sbci	r29, 0xFF	; 255
   12a3e:	e8 81       	ld	r30, Y
   12a40:	f9 81       	ldd	r31, Y+1	; 0x01
   12a42:	ca 5c       	subi	r28, 0xCA	; 202
   12a44:	d0 40       	sbci	r29, 0x00	; 0
   12a46:	94 91       	lpm	r25, Z
   12a48:	c6 54       	subi	r28, 0x46	; 70
   12a4a:	df 4f       	sbci	r29, 0xFF	; 255
   12a4c:	68 81       	ld	r22, Y
   12a4e:	79 81       	ldd	r23, Y+1	; 0x01
   12a50:	ca 5b       	subi	r28, 0xBA	; 186
   12a52:	d0 40       	sbci	r29, 0x00	; 0
   12a54:	26 0f       	add	r18, r22
   12a56:	37 1f       	adc	r19, r23
   12a58:	f9 01       	movw	r30, r18
   12a5a:	9f 9d       	mul	r25, r15
   12a5c:	e0 0d       	add	r30, r0
   12a5e:	f1 1d       	adc	r31, r1
   12a60:	11 24       	eor	r1, r1
   12a62:	ce 53       	subi	r28, 0x3E	; 62
   12a64:	df 4f       	sbci	r29, 0xFF	; 255
   12a66:	f9 83       	std	Y+1, r31	; 0x01
   12a68:	e8 83       	st	Y, r30
   12a6a:	c2 5c       	subi	r28, 0xC2	; 194
   12a6c:	d0 40       	sbci	r29, 0x00	; 0
   12a6e:	75 cf       	rjmp	.-278    	; 0x1295a <draw_menu(bool)+0x1904>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1289
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   12a70:	c4 54       	subi	r28, 0x44	; 68
   12a72:	df 4f       	sbci	r29, 0xFF	; 255
   12a74:	e8 81       	ld	r30, Y
   12a76:	f9 81       	ldd	r31, Y+1	; 0x01
   12a78:	cc 5b       	subi	r28, 0xBC	; 188
   12a7a:	d0 40       	sbci	r29, 0x00	; 0
   12a7c:	25 91       	lpm	r18, Z+
   12a7e:	34 91       	lpm	r19, Z
   12a80:	c3 53       	subi	r28, 0x33	; 51
   12a82:	df 4f       	sbci	r29, 0xFF	; 255
   12a84:	e8 81       	ld	r30, Y
   12a86:	f9 81       	ldd	r31, Y+1	; 0x01
   12a88:	cd 5c       	subi	r28, 0xCD	; 205
   12a8a:	d0 40       	sbci	r29, 0x00	; 0
   12a8c:	94 91       	lpm	r25, Z
   12a8e:	c8 54       	subi	r28, 0x48	; 72
   12a90:	df 4f       	sbci	r29, 0xFF	; 255
   12a92:	48 81       	ld	r20, Y
   12a94:	59 81       	ldd	r21, Y+1	; 0x01
   12a96:	c8 5b       	subi	r28, 0xB8	; 184
   12a98:	d0 40       	sbci	r29, 0x00	; 0
   12a9a:	24 0f       	add	r18, r20
   12a9c:	35 1f       	adc	r19, r21
   12a9e:	b9 01       	movw	r22, r18
   12aa0:	9f 9d       	mul	r25, r15
   12aa2:	60 0d       	add	r22, r0
   12aa4:	71 1d       	adc	r23, r1
   12aa6:	11 24       	eor	r1, r1
   12aa8:	c0 54       	subi	r28, 0x40	; 64
   12aaa:	df 4f       	sbci	r29, 0xFF	; 255
   12aac:	79 83       	std	Y+1, r23	; 0x01
   12aae:	68 83       	st	Y, r22
   12ab0:	c0 5c       	subi	r28, 0xC0	; 192
   12ab2:	d0 40       	sbci	r29, 0x00	; 0
   12ab4:	6a cf       	rjmp	.-300    	; 0x1298a <draw_menu(bool)+0x1934>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1296
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
        loop_t++;
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
   12ab6:	cc 53       	subi	r28, 0x3C	; 60
   12ab8:	df 4f       	sbci	r29, 0xFF	; 255
   12aba:	e8 81       	ld	r30, Y
   12abc:	f9 81       	ldd	r31, Y+1	; 0x01
   12abe:	c4 5c       	subi	r28, 0xC4	; 196
   12ac0:	d0 40       	sbci	r29, 0x00	; 0
   12ac2:	ef 2b       	or	r30, r31
   12ac4:	09 f4       	brne	.+2      	; 0x12ac8 <draw_menu(bool)+0x1a72>
   12ac6:	51 c1       	rjmp	.+674    	; 0x12d6a <draw_menu(bool)+0x1d14>
   12ac8:	ca 53       	subi	r28, 0x3A	; 58
   12aca:	df 4f       	sbci	r29, 0xFF	; 255
   12acc:	28 81       	ld	r18, Y
   12ace:	39 81       	ldd	r19, Y+1	; 0x01
   12ad0:	c6 5c       	subi	r28, 0xC6	; 198
   12ad2:	d0 40       	sbci	r29, 0x00	; 0
   12ad4:	23 2b       	or	r18, r19
   12ad6:	09 f4       	brne	.+2      	; 0x12ada <draw_menu(bool)+0x1a84>
   12ad8:	48 c1       	rjmp	.+656    	; 0x12d6a <draw_menu(bool)+0x1d14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1298
    {
      loop_i = 0;
   12ada:	ce 54       	subi	r28, 0x4E	; 78
   12adc:	df 4f       	sbci	r29, 0xFF	; 255
   12ade:	18 82       	st	Y, r1
   12ae0:	c2 5b       	subi	r28, 0xB2	; 178
   12ae2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1300
      loop_t = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_button_1->function_for_max_items);
   12ae4:	f2 01       	movw	r30, r4
   12ae6:	e0 54       	subi	r30, 0x40	; 64
   12ae8:	fe 4f       	sbci	r31, 0xFE	; 254
   12aea:	e6 0d       	add	r30, r6
   12aec:	f7 1d       	adc	r31, r7
   12aee:	25 91       	lpm	r18, Z+
   12af0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1301
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
   12af2:	c2 01       	movw	r24, r4
   12af4:	85 54       	subi	r24, 0x45	; 69
   12af6:	9e 4f       	sbci	r25, 0xFE	; 254
   12af8:	a3 01       	movw	r20, r6
   12afa:	48 0f       	add	r20, r24
   12afc:	59 1f       	adc	r21, r25
   12afe:	ca 54       	subi	r28, 0x4A	; 74
   12b00:	df 4f       	sbci	r29, 0xFF	; 255
   12b02:	59 83       	std	Y+1, r21	; 0x01
   12b04:	48 83       	st	Y, r20
   12b06:	c6 5b       	subi	r28, 0xB6	; 182
   12b08:	d0 40       	sbci	r29, 0x00	; 0
   12b0a:	fa 01       	movw	r30, r20
   12b0c:	84 91       	lpm	r24, Z
   12b0e:	cd 54       	subi	r28, 0x4D	; 77
   12b10:	df 4f       	sbci	r29, 0xFF	; 255
   12b12:	68 81       	ld	r22, Y
   12b14:	c3 5b       	subi	r28, 0xB3	; 179
   12b16:	d0 40       	sbci	r29, 0x00	; 0
   12b18:	70 e0       	ldi	r23, 0x00	; 0
   12b1a:	40 e0       	ldi	r20, 0x00	; 0
   12b1c:	90 e0       	ldi	r25, 0x00	; 0
   12b1e:	f9 01       	movw	r30, r18
   12b20:	19 95       	eicall
   12b22:	cf 54       	subi	r28, 0x4F	; 79
   12b24:	df 4f       	sbci	r29, 0xFF	; 255
   12b26:	88 83       	st	Y, r24
   12b28:	c1 5b       	subi	r28, 0xB1	; 177
   12b2a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1303

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
   12b2c:	f2 01       	movw	r30, r4
   12b2e:	e6 54       	subi	r30, 0x46	; 70
   12b30:	fe 4f       	sbci	r31, 0xFE	; 254
   12b32:	e6 0d       	add	r30, r6
   12b34:	f7 1d       	adc	r31, r7
   12b36:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1304
      if (slider_active != MENU_SLIDER_OFF)
   12b38:	4f 3f       	cpi	r20, 0xFF	; 255
   12b3a:	b9 f0       	breq	.+46     	; 0x12b6a <draw_menu(bool)+0x1b14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1305
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
   12b3c:	f2 01       	movw	r30, r4
   12b3e:	e8 54       	subi	r30, 0x48	; 72
   12b40:	fe 4f       	sbci	r31, 0xFE	; 254
   12b42:	e6 0d       	add	r30, r6
   12b44:	f7 1d       	adc	r31, r7
   12b46:	24 91       	lpm	r18, Z
   12b48:	f2 01       	movw	r30, r4
   12b4a:	e7 54       	subi	r30, 0x47	; 71
   12b4c:	fe 4f       	sbci	r31, 0xFE	; 254
   12b4e:	e6 0d       	add	r30, r6
   12b50:	f7 1d       	adc	r31, r7
   12b52:	e4 91       	lpm	r30, Z
   12b54:	2e 9f       	mul	r18, r30
   12b56:	20 2d       	mov	r18, r0
   12b58:	11 24       	eor	r1, r1
   12b5a:	be 01       	movw	r22, r28
   12b5c:	6f 54       	subi	r22, 0x4F	; 79
   12b5e:	7f 4f       	sbci	r23, 0xFF	; 255
   12b60:	ce 01       	movw	r24, r28
   12b62:	8e 54       	subi	r24, 0x4E	; 78
   12b64:	9f 4f       	sbci	r25, 0xFF	; 255
   12b66:	0e 94 b5 3c 	call	0x796a	; 0x796a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
   12b6a:	ce 54       	subi	r28, 0x4E	; 78
   12b6c:	df 4f       	sbci	r29, 0xFF	; 255
   12b6e:	a8 80       	ld	r10, Y
   12b70:	c2 5b       	subi	r28, 0xB2	; 178
   12b72:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1306
      while (loop_i < loop_cnt)
   12b74:	cf 54       	subi	r28, 0x4F	; 79
   12b76:	df 4f       	sbci	r29, 0xFF	; 255
   12b78:	88 80       	ld	r8, Y
   12b7a:	c1 5b       	subi	r28, 0xB1	; 177
   12b7c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1308
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   12b7e:	c2 01       	movw	r24, r4
   12b80:	84 55       	subi	r24, 0x54	; 84
   12b82:	9e 4f       	sbci	r25, 0xFE	; 254
   12b84:	93 01       	movw	r18, r6
   12b86:	28 0f       	add	r18, r24
   12b88:	39 1f       	adc	r19, r25
   12b8a:	c4 54       	subi	r28, 0x44	; 68
   12b8c:	df 4f       	sbci	r29, 0xFF	; 255
   12b8e:	39 83       	std	Y+1, r19	; 0x01
   12b90:	28 83       	st	Y, r18
   12b92:	cc 5b       	subi	r28, 0xBC	; 188
   12b94:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1309
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   12b96:	12 01       	movw	r2, r4
   12b98:	32 e5       	ldi	r19, 0x52	; 82
   12b9a:	23 1a       	sub	r2, r19
   12b9c:	3e ef       	ldi	r19, 0xFE	; 254
   12b9e:	33 0a       	sbc	r3, r19
   12ba0:	26 0c       	add	r2, r6
   12ba2:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1310
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   12ba4:	0b 96       	adiw	r24, 0x0b	; 11
   12ba6:	a3 01       	movw	r20, r6
   12ba8:	48 0f       	add	r20, r24
   12baa:	59 1f       	adc	r21, r25
   12bac:	c2 54       	subi	r28, 0x42	; 66
   12bae:	df 4f       	sbci	r29, 0xFF	; 255
   12bb0:	59 83       	std	Y+1, r21	; 0x01
   12bb2:	48 83       	st	Y, r20
   12bb4:	ce 5b       	subi	r28, 0xBE	; 190
   12bb6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1311
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   12bb8:	01 97       	sbiw	r24, 0x01	; 1
   12bba:	b3 01       	movw	r22, r6
   12bbc:	68 0f       	add	r22, r24
   12bbe:	79 1f       	adc	r23, r25
   12bc0:	c8 53       	subi	r28, 0x38	; 56
   12bc2:	df 4f       	sbci	r29, 0xFF	; 255
   12bc4:	79 83       	std	Y+1, r23	; 0x01
   12bc6:	68 83       	st	Y, r22
   12bc8:	c8 5c       	subi	r28, 0xC8	; 200
   12bca:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1313
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   12bcc:	01 97       	sbiw	r24, 0x01	; 1
   12bce:	f3 01       	movw	r30, r6
   12bd0:	e8 0f       	add	r30, r24
   12bd2:	f9 1f       	adc	r31, r25
   12bd4:	c6 53       	subi	r28, 0x36	; 54
   12bd6:	df 4f       	sbci	r29, 0xFF	; 255
   12bd8:	f9 83       	std	Y+1, r31	; 0x01
   12bda:	e8 83       	st	Y, r30
   12bdc:	ca 5c       	subi	r28, 0xCA	; 202
   12bde:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1314
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
   12be0:	03 97       	sbiw	r24, 0x03	; 3
   12be2:	93 01       	movw	r18, r6
   12be4:	28 0f       	add	r18, r24
   12be6:	39 1f       	adc	r19, r25
   12be8:	c3 53       	subi	r28, 0x33	; 51
   12bea:	df 4f       	sbci	r29, 0xFF	; 255
   12bec:	39 83       	std	Y+1, r19	; 0x01
   12bee:	28 83       	st	Y, r18
   12bf0:	cd 5c       	subi	r28, 0xCD	; 205
   12bf2:	d0 40       	sbci	r29, 0x00	; 0
   12bf4:	02 97       	sbiw	r24, 0x02	; 2
   12bf6:	a3 01       	movw	r20, r6
   12bf8:	48 0f       	add	r20, r24
   12bfa:	59 1f       	adc	r21, r25
   12bfc:	c1 53       	subi	r28, 0x31	; 49
   12bfe:	df 4f       	sbci	r29, 0xFF	; 255
   12c00:	59 83       	std	Y+1, r21	; 0x01
   12c02:	48 83       	st	Y, r20
   12c04:	cf 5c       	subi	r28, 0xCF	; 207
   12c06:	d0 40       	sbci	r29, 0x00	; 0
   12c08:	d1 2c       	mov	r13, r1
   12c0a:	c1 2c       	mov	r12, r1
   12c0c:	ba 2c       	mov	r11, r10
   12c0e:	bc 0c       	add	r11, r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1306
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
   12c10:	b8 14       	cp	r11, r8
   12c12:	08 f0       	brcs	.+2      	; 0x12c16 <draw_menu(bool)+0x1bc0>
   12c14:	aa c0       	rjmp	.+340    	; 0x12d6a <draw_menu(bool)+0x1d14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1308
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   12c16:	c4 54       	subi	r28, 0x44	; 68
   12c18:	df 4f       	sbci	r29, 0xFF	; 255
   12c1a:	e8 81       	ld	r30, Y
   12c1c:	f9 81       	ldd	r31, Y+1	; 0x01
   12c1e:	cc 5b       	subi	r28, 0xBC	; 188
   12c20:	d0 40       	sbci	r29, 0x00	; 0
   12c22:	25 91       	lpm	r18, Z+
   12c24:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1309
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   12c26:	f1 01       	movw	r30, r2
   12c28:	85 91       	lpm	r24, Z+
   12c2a:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1310
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   12c2c:	c2 54       	subi	r28, 0x42	; 66
   12c2e:	df 4f       	sbci	r29, 0xFF	; 255
   12c30:	e8 81       	ld	r30, Y
   12c32:	f9 81       	ldd	r31, Y+1	; 0x01
   12c34:	ce 5b       	subi	r28, 0xBE	; 190
   12c36:	d0 40       	sbci	r29, 0x00	; 0
   12c38:	44 91       	lpm	r20, Z
   12c3a:	44 23       	and	r20, r20
   12c3c:	09 f4       	brne	.+2      	; 0x12c40 <draw_menu(bool)+0x1bea>
   12c3e:	97 c0       	rjmp	.+302    	; 0x12d6e <draw_menu(bool)+0x1d18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1309
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   12c40:	c6 54       	subi	r28, 0x46	; 70
   12c42:	df 4f       	sbci	r29, 0xFF	; 255
   12c44:	48 81       	ld	r20, Y
   12c46:	59 81       	ldd	r21, Y+1	; 0x01
   12c48:	ca 5b       	subi	r28, 0xBA	; 186
   12c4a:	d0 40       	sbci	r29, 0x00	; 0
   12c4c:	48 0f       	add	r20, r24
   12c4e:	59 1f       	adc	r21, r25
   12c50:	ce 53       	subi	r28, 0x3E	; 62
   12c52:	df 4f       	sbci	r29, 0xFF	; 255
   12c54:	59 83       	std	Y+1, r21	; 0x01
   12c56:	48 83       	st	Y, r20
   12c58:	c2 5c       	subi	r28, 0xC2	; 194
   12c5a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1312
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
   12c5c:	c2 54       	subi	r28, 0x42	; 66
   12c5e:	df 4f       	sbci	r29, 0xFF	; 255
   12c60:	e8 81       	ld	r30, Y
   12c62:	f9 81       	ldd	r31, Y+1	; 0x01
   12c64:	ce 5b       	subi	r28, 0xBE	; 190
   12c66:	d0 40       	sbci	r29, 0x00	; 0
   12c68:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1308
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   12c6a:	c8 54       	subi	r28, 0x48	; 72
   12c6c:	df 4f       	sbci	r29, 0xFF	; 255
   12c6e:	48 81       	ld	r20, Y
   12c70:	59 81       	ldd	r21, Y+1	; 0x01
   12c72:	c8 5b       	subi	r28, 0xB8	; 184
   12c74:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1312
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
   12c76:	81 30       	cpi	r24, 0x01	; 1
   12c78:	e9 f4       	brne	.+58     	; 0x12cb4 <draw_menu(bool)+0x1c5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1313
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   12c7a:	c4 54       	subi	r28, 0x44	; 68
   12c7c:	df 4f       	sbci	r29, 0xFF	; 255
   12c7e:	e8 81       	ld	r30, Y
   12c80:	f9 81       	ldd	r31, Y+1	; 0x01
   12c82:	cc 5b       	subi	r28, 0xBC	; 188
   12c84:	d0 40       	sbci	r29, 0x00	; 0
   12c86:	85 91       	lpm	r24, Z+
   12c88:	94 91       	lpm	r25, Z
   12c8a:	c6 53       	subi	r28, 0x36	; 54
   12c8c:	df 4f       	sbci	r29, 0xFF	; 255
   12c8e:	e8 81       	ld	r30, Y
   12c90:	f9 81       	ldd	r31, Y+1	; 0x01
   12c92:	ca 5c       	subi	r28, 0xCA	; 202
   12c94:	d0 40       	sbci	r29, 0x00	; 0
   12c96:	44 91       	lpm	r20, Z
   12c98:	c8 54       	subi	r28, 0x48	; 72
   12c9a:	df 4f       	sbci	r29, 0xFF	; 255
   12c9c:	28 81       	ld	r18, Y
   12c9e:	39 81       	ldd	r19, Y+1	; 0x01
   12ca0:	c8 5b       	subi	r28, 0xB8	; 184
   12ca2:	d0 40       	sbci	r29, 0x00	; 0
   12ca4:	82 0f       	add	r24, r18
   12ca6:	93 1f       	adc	r25, r19
   12ca8:	4c 9d       	mul	r20, r12
   12caa:	90 01       	movw	r18, r0
   12cac:	4d 9d       	mul	r20, r13
   12cae:	30 0d       	add	r19, r0
   12cb0:	11 24       	eor	r1, r1
   12cb2:	ac 01       	movw	r20, r24
   12cb4:	42 0f       	add	r20, r18
   12cb6:	53 1f       	adc	r21, r19
   12cb8:	c0 54       	subi	r28, 0x40	; 64
   12cba:	df 4f       	sbci	r29, 0xFF	; 255
   12cbc:	59 83       	std	Y+1, r21	; 0x01
   12cbe:	48 83       	st	Y, r20
   12cc0:	c0 5c       	subi	r28, 0xC0	; 192
   12cc2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1314
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
   12cc4:	c3 53       	subi	r28, 0x33	; 51
   12cc6:	df 4f       	sbci	r29, 0xFF	; 255
   12cc8:	e8 81       	ld	r30, Y
   12cca:	f9 81       	ldd	r31, Y+1	; 0x01
   12ccc:	cd 5c       	subi	r28, 0xCD	; 205
   12cce:	d0 40       	sbci	r29, 0x00	; 0
   12cd0:	25 91       	lpm	r18, Z+
   12cd2:	34 91       	lpm	r19, Z
   12cd4:	c1 53       	subi	r28, 0x31	; 49
   12cd6:	df 4f       	sbci	r29, 0xFF	; 255
   12cd8:	e8 81       	ld	r30, Y
   12cda:	f9 81       	ldd	r31, Y+1	; 0x01
   12cdc:	cf 5c       	subi	r28, 0xCF	; 207
   12cde:	d0 40       	sbci	r29, 0x00	; 0
   12ce0:	45 91       	lpm	r20, Z+
   12ce2:	54 91       	lpm	r21, Z
   12ce4:	ca 53       	subi	r28, 0x3A	; 58
   12ce6:	df 4f       	sbci	r29, 0xFF	; 255
   12ce8:	e8 80       	ld	r14, Y
   12cea:	f9 80       	ldd	r15, Y+1	; 0x01
   12cec:	c6 5c       	subi	r28, 0xC6	; 198
   12cee:	d0 40       	sbci	r29, 0x00	; 0
   12cf0:	cc 53       	subi	r28, 0x3C	; 60
   12cf2:	df 4f       	sbci	r29, 0xFF	; 255
   12cf4:	08 81       	ld	r16, Y
   12cf6:	19 81       	ldd	r17, Y+1	; 0x01
   12cf8:	c4 5c       	subi	r28, 0xC4	; 196
   12cfa:	d0 40       	sbci	r29, 0x00	; 0
   12cfc:	ce 53       	subi	r28, 0x3E	; 62
   12cfe:	df 4f       	sbci	r29, 0xFF	; 255
   12d00:	68 81       	ld	r22, Y
   12d02:	79 81       	ldd	r23, Y+1	; 0x01
   12d04:	c2 5c       	subi	r28, 0xC2	; 194
   12d06:	d0 40       	sbci	r29, 0x00	; 0
   12d08:	c0 54       	subi	r28, 0x40	; 64
   12d0a:	df 4f       	sbci	r29, 0xFF	; 255
   12d0c:	88 81       	ld	r24, Y
   12d0e:	99 81       	ldd	r25, Y+1	; 0x01
   12d10:	c0 5c       	subi	r28, 0xC0	; 192
   12d12:	d0 40       	sbci	r29, 0x00	; 0
   12d14:	0e 94 9a 3c 	call	0x7934	; 0x7934 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   12d18:	18 2f       	mov	r17, r24
   12d1a:	5f ef       	ldi	r21, 0xFF	; 255
   12d1c:	c5 1a       	sub	r12, r21
   12d1e:	d5 0a       	sbc	r13, r21
   12d20:	88 23       	and	r24, r24
   12d22:	09 f4       	brne	.+2      	; 0x12d26 <draw_menu(bool)+0x1cd0>
   12d24:	73 cf       	rjmp	.-282    	; 0x12c0c <draw_menu(bool)+0x1bb6>
   12d26:	ce 54       	subi	r28, 0x4E	; 78
   12d28:	df 4f       	sbci	r29, 0xFF	; 255
   12d2a:	b8 82       	st	Y, r11
   12d2c:	c2 5b       	subi	r28, 0xB2	; 178
   12d2e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1316
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_button_1->dyn_button_onclick);
   12d30:	f2 01       	movw	r30, r4
   12d32:	e2 54       	subi	r30, 0x42	; 66
   12d34:	fe 4f       	sbci	r31, 0xFE	; 254
   12d36:	e6 0d       	add	r30, r6
   12d38:	f7 1d       	adc	r31, r7
   12d3a:	25 91       	lpm	r18, Z+
   12d3c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1317
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
   12d3e:	ca 54       	subi	r28, 0x4A	; 74
   12d40:	df 4f       	sbci	r29, 0xFF	; 255
   12d42:	e8 81       	ld	r30, Y
   12d44:	f9 81       	ldd	r31, Y+1	; 0x01
   12d46:	c6 5b       	subi	r28, 0xB6	; 182
   12d48:	d0 40       	sbci	r29, 0x00	; 0
   12d4a:	84 91       	lpm	r24, Z
   12d4c:	cd 54       	subi	r28, 0x4D	; 77
   12d4e:	df 4f       	sbci	r29, 0xFF	; 255
   12d50:	68 81       	ld	r22, Y
   12d52:	c3 5b       	subi	r28, 0xB3	; 179
   12d54:	d0 40       	sbci	r29, 0x00	; 0
   12d56:	70 e0       	ldi	r23, 0x00	; 0
   12d58:	4b 2d       	mov	r20, r11
   12d5a:	90 e0       	ldi	r25, 0x00	; 0
   12d5c:	f9 01       	movw	r30, r18
   12d5e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1318
          ret = true;
   12d60:	c4 53       	subi	r28, 0x34	; 52
   12d62:	df 4f       	sbci	r29, 0xFF	; 255
   12d64:	18 83       	st	Y, r17
   12d66:	cc 5c       	subi	r28, 0xCC	; 204
   12d68:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1267
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
   12d6a:	93 94       	inc	r9
   12d6c:	03 cd       	rjmp	.-1530   	; 0x12774 <draw_menu(bool)+0x171e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1311
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   12d6e:	f1 01       	movw	r30, r2
   12d70:	85 91       	lpm	r24, Z+
   12d72:	94 91       	lpm	r25, Z
   12d74:	c8 53       	subi	r28, 0x38	; 56
   12d76:	df 4f       	sbci	r29, 0xFF	; 255
   12d78:	e8 81       	ld	r30, Y
   12d7a:	f9 81       	ldd	r31, Y+1	; 0x01
   12d7c:	c8 5c       	subi	r28, 0xC8	; 200
   12d7e:	d0 40       	sbci	r29, 0x00	; 0
   12d80:	64 91       	lpm	r22, Z
   12d82:	c6 54       	subi	r28, 0x46	; 70
   12d84:	df 4f       	sbci	r29, 0xFF	; 255
   12d86:	48 81       	ld	r20, Y
   12d88:	59 81       	ldd	r21, Y+1	; 0x01
   12d8a:	ca 5b       	subi	r28, 0xBA	; 186
   12d8c:	d0 40       	sbci	r29, 0x00	; 0
   12d8e:	84 0f       	add	r24, r20
   12d90:	95 1f       	adc	r25, r21
   12d92:	6c 9d       	mul	r22, r12
   12d94:	a0 01       	movw	r20, r0
   12d96:	6d 9d       	mul	r22, r13
   12d98:	50 0d       	add	r21, r0
   12d9a:	11 24       	eor	r1, r1
   12d9c:	bc 01       	movw	r22, r24
   12d9e:	64 0f       	add	r22, r20
   12da0:	75 1f       	adc	r23, r21
   12da2:	ce 53       	subi	r28, 0x3E	; 62
   12da4:	df 4f       	sbci	r29, 0xFF	; 255
   12da6:	79 83       	std	Y+1, r23	; 0x01
   12da8:	68 83       	st	Y, r22
   12daa:	c2 5c       	subi	r28, 0xC2	; 194
   12dac:	d0 40       	sbci	r29, 0x00	; 0
   12dae:	56 cf       	rjmp	.-340    	; 0x12c5c <draw_menu(bool)+0x1c06>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1326
        loop_t++;
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
   12db0:	c4 53       	subi	r28, 0x34	; 52
   12db2:	df 4f       	sbci	r29, 0xFF	; 255
   12db4:	f8 81       	ld	r31, Y
   12db6:	cc 5c       	subi	r28, 0xCC	; 204
   12db8:	d0 40       	sbci	r29, 0x00	; 0
   12dba:	f1 11       	cpse	r31, r1
   12dbc:	58 c4       	rjmp	.+2224   	; 0x1366e <draw_menu(bool)+0x2618>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1327
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
   12dbe:	ca 54       	subi	r28, 0x4A	; 74
   12dc0:	df 4f       	sbci	r29, 0xFF	; 255
   12dc2:	18 82       	st	Y, r1
   12dc4:	c6 5b       	subi	r28, 0xB6	; 182
   12dc6:	d0 40       	sbci	r29, 0x00	; 0
   12dc8:	93 01       	movw	r18, r6
   12dca:	2c 53       	subi	r18, 0x3C	; 60
   12dcc:	3d 4f       	sbci	r19, 0xFD	; 253
   12dce:	c0 52       	subi	r28, 0x20	; 32
   12dd0:	df 4f       	sbci	r29, 0xFF	; 255
   12dd2:	39 83       	std	Y+1, r19	; 0x01
   12dd4:	28 83       	st	Y, r18
   12dd6:	c0 5e       	subi	r28, 0xE0	; 224
   12dd8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
          {
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
   12dda:	ae 01       	movw	r20, r28
   12ddc:	4f 57       	subi	r20, 0x7F	; 127
   12dde:	5f 4f       	sbci	r21, 0xFF	; 255
   12de0:	cc 54       	subi	r28, 0x4C	; 76
   12de2:	df 4f       	sbci	r29, 0xFF	; 255
   12de4:	59 83       	std	Y+1, r21	; 0x01
   12de6:	48 83       	st	Y, r20
   12de8:	c4 5b       	subi	r28, 0xB4	; 180
   12dea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1327
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
   12dec:	c0 52       	subi	r28, 0x20	; 32
   12dee:	df 4f       	sbci	r29, 0xFF	; 255
   12df0:	e8 81       	ld	r30, Y
   12df2:	f9 81       	ldd	r31, Y+1	; 0x01
   12df4:	c0 5e       	subi	r28, 0xE0	; 224
   12df6:	d0 40       	sbci	r29, 0x00	; 0
   12df8:	84 91       	lpm	r24, Z
   12dfa:	ca 54       	subi	r28, 0x4A	; 74
   12dfc:	df 4f       	sbci	r29, 0xFF	; 255
   12dfe:	f8 81       	ld	r31, Y
   12e00:	c6 5b       	subi	r28, 0xB6	; 182
   12e02:	d0 40       	sbci	r29, 0x00	; 0
   12e04:	f8 17       	cp	r31, r24
   12e06:	08 f0       	brcs	.+2      	; 0x12e0a <draw_menu(bool)+0x1db4>
   12e08:	38 c4       	rjmp	.+2160   	; 0x1367a <draw_menu(bool)+0x2624>
   12e0a:	2e e1       	ldi	r18, 0x1E	; 30
   12e0c:	f2 9f       	mul	r31, r18
   12e0e:	20 01       	movw	r4, r0
   12e10:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1330
  {
    dyn_select_box_1 = &current->dyn_select_box_1[idx];
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
   12e12:	f2 01       	movw	r30, r4
   12e14:	e4 54       	subi	r30, 0x44	; 68
   12e16:	fd 4f       	sbci	r31, 0xFD	; 253
   12e18:	e6 0d       	add	r30, r6
   12e1a:	f7 1d       	adc	r31, r7
   12e1c:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1331
    if (enable_redraw(rdr, redraw_class) == true)
   12e1e:	cf 52       	subi	r28, 0x2F	; 47
   12e20:	df 4f       	sbci	r29, 0xFF	; 255
   12e22:	68 81       	ld	r22, Y
   12e24:	c1 5d       	subi	r28, 0xD1	; 209
   12e26:	d0 40       	sbci	r29, 0x00	; 0
   12e28:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <enable_redraw(unsigned char, unsigned char)>
   12e2c:	88 23       	and	r24, r24
   12e2e:	09 f4       	brne	.+2      	; 0x12e32 <draw_menu(bool)+0x1ddc>
   12e30:	4c c2       	rjmp	.+1176   	; 0x132ca <draw_menu(bool)+0x2274>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1333
    {
      loop_i = 0;
   12e32:	ce 54       	subi	r28, 0x4E	; 78
   12e34:	df 4f       	sbci	r29, 0xFF	; 255
   12e36:	18 82       	st	Y, r1
   12e38:	c2 5b       	subi	r28, 0xB2	; 178
   12e3a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1336
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
   12e3c:	f2 01       	movw	r30, r4
   12e3e:	e8 54       	subi	r30, 0x48	; 72
   12e40:	fd 4f       	sbci	r31, 0xFD	; 253
   12e42:	e6 0d       	add	r30, r6
   12e44:	f7 1d       	adc	r31, r7
   12e46:	25 91       	lpm	r18, Z+
   12e48:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1337
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   12e4a:	c2 01       	movw	r24, r4
   12e4c:	8d 54       	subi	r24, 0x4D	; 77
   12e4e:	9d 4f       	sbci	r25, 0xFD	; 253
   12e50:	a3 01       	movw	r20, r6
   12e52:	48 0f       	add	r20, r24
   12e54:	59 1f       	adc	r21, r25
   12e56:	c4 54       	subi	r28, 0x44	; 68
   12e58:	df 4f       	sbci	r29, 0xFF	; 255
   12e5a:	59 83       	std	Y+1, r21	; 0x01
   12e5c:	48 83       	st	Y, r20
   12e5e:	cc 5b       	subi	r28, 0xBC	; 188
   12e60:	d0 40       	sbci	r29, 0x00	; 0
   12e62:	fa 01       	movw	r30, r20
   12e64:	84 91       	lpm	r24, Z
   12e66:	cd 54       	subi	r28, 0x4D	; 77
   12e68:	df 4f       	sbci	r29, 0xFF	; 255
   12e6a:	68 81       	ld	r22, Y
   12e6c:	c3 5b       	subi	r28, 0xB3	; 179
   12e6e:	d0 40       	sbci	r29, 0x00	; 0
   12e70:	70 e0       	ldi	r23, 0x00	; 0
   12e72:	40 e0       	ldi	r20, 0x00	; 0
   12e74:	90 e0       	ldi	r25, 0x00	; 0
   12e76:	f9 01       	movw	r30, r18
   12e78:	19 95       	eicall
   12e7a:	cf 54       	subi	r28, 0x4F	; 79
   12e7c:	df 4f       	sbci	r29, 0xFF	; 255
   12e7e:	88 83       	st	Y, r24
   12e80:	c1 5b       	subi	r28, 0xB1	; 177
   12e82:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1338
      gss = (ret_string_fptr*)pgm_read_word(&dyn_select_box_1->get_status_string);
   12e84:	f2 01       	movw	r30, r4
   12e86:	ec 54       	subi	r30, 0x4C	; 76
   12e88:	fd 4f       	sbci	r31, 0xFD	; 253
   12e8a:	e6 0d       	add	r30, r6
   12e8c:	f7 1d       	adc	r31, r7
   12e8e:	25 91       	lpm	r18, Z+
   12e90:	34 91       	lpm	r19, Z
   12e92:	ce 51       	subi	r28, 0x1E	; 30
   12e94:	df 4f       	sbci	r29, 0xFF	; 255
   12e96:	39 83       	std	Y+1, r19	; 0x01
   12e98:	28 83       	st	Y, r18
   12e9a:	c2 5e       	subi	r28, 0xE2	; 226
   12e9c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1339
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
   12e9e:	f2 01       	movw	r30, r4
   12ea0:	ee 54       	subi	r30, 0x4E	; 78
   12ea2:	fd 4f       	sbci	r31, 0xFD	; 253
   12ea4:	e6 0d       	add	r30, r6
   12ea6:	f7 1d       	adc	r31, r7
   12ea8:	44 91       	lpm	r20, Z
   12eaa:	c2 01       	movw	r24, r4
   12eac:	80 55       	subi	r24, 0x50	; 80
   12eae:	9d 4f       	sbci	r25, 0xFD	; 253
   12eb0:	b3 01       	movw	r22, r6
   12eb2:	68 0f       	add	r22, r24
   12eb4:	79 1f       	adc	r23, r25
   12eb6:	c1 53       	subi	r28, 0x31	; 49
   12eb8:	df 4f       	sbci	r29, 0xFF	; 255
   12eba:	79 83       	std	Y+1, r23	; 0x01
   12ebc:	68 83       	st	Y, r22
   12ebe:	cf 5c       	subi	r28, 0xCF	; 207
   12ec0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1340
      if (slider_active != MENU_SLIDER_OFF)
   12ec2:	4f 3f       	cpi	r20, 0xFF	; 255
   12ec4:	99 f0       	breq	.+38     	; 0x12eec <draw_menu(bool)+0x1e96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1341
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
   12ec6:	fb 01       	movw	r30, r22
   12ec8:	24 91       	lpm	r18, Z
   12eca:	f2 01       	movw	r30, r4
   12ecc:	ef 54       	subi	r30, 0x4F	; 79
   12ece:	fd 4f       	sbci	r31, 0xFD	; 253
   12ed0:	e6 0d       	add	r30, r6
   12ed2:	f7 1d       	adc	r31, r7
   12ed4:	e4 91       	lpm	r30, Z
   12ed6:	2e 9f       	mul	r18, r30
   12ed8:	20 2d       	mov	r18, r0
   12eda:	11 24       	eor	r1, r1
   12edc:	be 01       	movw	r22, r28
   12ede:	6f 54       	subi	r22, 0x4F	; 79
   12ee0:	7f 4f       	sbci	r23, 0xFF	; 255
   12ee2:	ce 01       	movw	r24, r28
   12ee4:	8e 54       	subi	r24, 0x4E	; 78
   12ee6:	9f 4f       	sbci	r25, 0xFF	; 255
   12ee8:	0e 94 b5 3c 	call	0x796a	; 0x796a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1344
      while (loop_i < loop_cnt)
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   12eec:	c2 01       	movw	r24, r4
   12eee:	81 55       	subi	r24, 0x51	; 81
   12ef0:	9d 4f       	sbci	r25, 0xFD	; 253
   12ef2:	93 01       	movw	r18, r6
   12ef4:	28 0f       	add	r18, r24
   12ef6:	39 1f       	adc	r19, r25
   12ef8:	c2 54       	subi	r28, 0x42	; 66
   12efa:	df 4f       	sbci	r29, 0xFF	; 255
   12efc:	39 83       	std	Y+1, r19	; 0x01
   12efe:	28 83       	st	Y, r18
   12f00:	ce 5b       	subi	r28, 0xBE	; 190
   12f02:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1346
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   12f04:	40 97       	sbiw	r24, 0x10	; 16
   12f06:	a3 01       	movw	r20, r6
   12f08:	48 0f       	add	r20, r24
   12f0a:	59 1f       	adc	r21, r25
   12f0c:	c8 53       	subi	r28, 0x38	; 56
   12f0e:	df 4f       	sbci	r29, 0xFF	; 255
   12f10:	59 83       	std	Y+1, r21	; 0x01
   12f12:	48 83       	st	Y, r20
   12f14:	c8 5c       	subi	r28, 0xC8	; 200
   12f16:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1347
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   12f18:	12 01       	movw	r2, r4
   12f1a:	5f e5       	ldi	r21, 0x5F	; 95
   12f1c:	25 1a       	sub	r2, r21
   12f1e:	5d ef       	ldi	r21, 0xFD	; 253
   12f20:	35 0a       	sbc	r3, r21
   12f22:	26 0c       	add	r2, r6
   12f24:	37 1c       	adc	r3, r7
   12f26:	0f 96       	adiw	r24, 0x0f	; 15
   12f28:	b3 01       	movw	r22, r6
   12f2a:	68 0f       	add	r22, r24
   12f2c:	79 1f       	adc	r23, r25
   12f2e:	c6 53       	subi	r28, 0x36	; 54
   12f30:	df 4f       	sbci	r29, 0xFF	; 255
   12f32:	79 83       	std	Y+1, r23	; 0x01
   12f34:	68 83       	st	Y, r22
   12f36:	ca 5c       	subi	r28, 0xCA	; 202
   12f38:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1353
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   12f3a:	01 97       	sbiw	r24, 0x01	; 1
   12f3c:	f3 01       	movw	r30, r6
   12f3e:	e8 0f       	add	r30, r24
   12f40:	f9 1f       	adc	r31, r25
   12f42:	c3 53       	subi	r28, 0x33	; 51
   12f44:	df 4f       	sbci	r29, 0xFF	; 255
   12f46:	f9 83       	std	Y+1, r31	; 0x01
   12f48:	e8 83       	st	Y, r30
   12f4a:	cd 5c       	subi	r28, 0xCD	; 205
   12f4c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
   12f4e:	0d 96       	adiw	r24, 0x0d	; 13
   12f50:	93 01       	movw	r18, r6
   12f52:	28 0f       	add	r18, r24
   12f54:	39 1f       	adc	r19, r25
   12f56:	ce 52       	subi	r28, 0x2E	; 46
   12f58:	df 4f       	sbci	r29, 0xFF	; 255
   12f5a:	39 83       	std	Y+1, r19	; 0x01
   12f5c:	28 83       	st	Y, r18
   12f5e:	c2 5d       	subi	r28, 0xD2	; 210
   12f60:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
   12f62:	0f 97       	sbiw	r24, 0x0f	; 15
   12f64:	a3 01       	movw	r20, r6
   12f66:	48 0f       	add	r20, r24
   12f68:	59 1f       	adc	r21, r25
   12f6a:	cc 52       	subi	r28, 0x2C	; 44
   12f6c:	df 4f       	sbci	r29, 0xFF	; 255
   12f6e:	59 83       	std	Y+1, r21	; 0x01
   12f70:	48 83       	st	Y, r20
   12f72:	c4 5d       	subi	r28, 0xD4	; 212
   12f74:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1372
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
   12f76:	02 97       	sbiw	r24, 0x02	; 2
   12f78:	b3 01       	movw	r22, r6
   12f7a:	68 0f       	add	r22, r24
   12f7c:	79 1f       	adc	r23, r25
   12f7e:	ca 52       	subi	r28, 0x2A	; 42
   12f80:	df 4f       	sbci	r29, 0xFF	; 255
   12f82:	79 83       	std	Y+1, r23	; 0x01
   12f84:	68 83       	st	Y, r22
   12f86:	c6 5d       	subi	r28, 0xD6	; 214
   12f88:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
   12f8a:	01 97       	sbiw	r24, 0x01	; 1
   12f8c:	f3 01       	movw	r30, r6
   12f8e:	e8 0f       	add	r30, r24
   12f90:	f9 1f       	adc	r31, r25
   12f92:	c8 52       	subi	r28, 0x28	; 40
   12f94:	df 4f       	sbci	r29, 0xFF	; 255
   12f96:	f9 83       	std	Y+1, r31	; 0x01
   12f98:	e8 83       	st	Y, r30
   12f9a:	c8 5d       	subi	r28, 0xD8	; 216
   12f9c:	d0 40       	sbci	r29, 0x00	; 0
   12f9e:	01 97       	sbiw	r24, 0x01	; 1
   12fa0:	93 01       	movw	r18, r6
   12fa2:	28 0f       	add	r18, r24
   12fa4:	39 1f       	adc	r19, r25
   12fa6:	c6 52       	subi	r28, 0x26	; 38
   12fa8:	df 4f       	sbci	r29, 0xFF	; 255
   12faa:	39 83       	std	Y+1, r19	; 0x01
   12fac:	28 83       	st	Y, r18
   12fae:	ca 5d       	subi	r28, 0xDA	; 218
   12fb0:	d0 40       	sbci	r29, 0x00	; 0
   12fb2:	02 97       	sbiw	r24, 0x02	; 2
   12fb4:	a3 01       	movw	r20, r6
   12fb6:	48 0f       	add	r20, r24
   12fb8:	59 1f       	adc	r21, r25
   12fba:	c4 52       	subi	r28, 0x24	; 36
   12fbc:	df 4f       	sbci	r29, 0xFF	; 255
   12fbe:	59 83       	std	Y+1, r21	; 0x01
   12fc0:	48 83       	st	Y, r20
   12fc2:	cc 5d       	subi	r28, 0xDC	; 220
   12fc4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
   12fc6:	02 97       	sbiw	r24, 0x02	; 2
   12fc8:	b3 01       	movw	r22, r6
   12fca:	68 0f       	add	r22, r24
   12fcc:	79 1f       	adc	r23, r25
   12fce:	c2 52       	subi	r28, 0x22	; 34
   12fd0:	df 4f       	sbci	r29, 0xFF	; 255
   12fd2:	79 83       	std	Y+1, r23	; 0x01
   12fd4:	68 83       	st	Y, r22
   12fd6:	ce 5d       	subi	r28, 0xDE	; 222
   12fd8:	d0 40       	sbci	r29, 0x00	; 0
   12fda:	91 2c       	mov	r9, r1
   12fdc:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1342
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_select_box_1->get_status_string);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
   12fde:	ce 54       	subi	r28, 0x4E	; 78
   12fe0:	df 4f       	sbci	r29, 0xFF	; 255
   12fe2:	88 81       	ld	r24, Y
   12fe4:	c2 5b       	subi	r28, 0xB2	; 178
   12fe6:	d0 40       	sbci	r29, 0x00	; 0
   12fe8:	cf 54       	subi	r28, 0x4F	; 79
   12fea:	df 4f       	sbci	r29, 0xFF	; 255
   12fec:	98 81       	ld	r25, Y
   12fee:	c1 5b       	subi	r28, 0xB1	; 177
   12ff0:	d0 40       	sbci	r29, 0x00	; 0
   12ff2:	89 17       	cp	r24, r25
   12ff4:	08 f0       	brcs	.+2      	; 0x12ff8 <draw_menu(bool)+0x1fa2>
   12ff6:	69 c1       	rjmp	.+722    	; 0x132ca <draw_menu(bool)+0x2274>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1344
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   12ff8:	c2 54       	subi	r28, 0x42	; 66
   12ffa:	df 4f       	sbci	r29, 0xFF	; 255
   12ffc:	e8 81       	ld	r30, Y
   12ffe:	f9 81       	ldd	r31, Y+1	; 0x01
   13000:	ce 5b       	subi	r28, 0xBE	; 190
   13002:	d0 40       	sbci	r29, 0x00	; 0
   13004:	94 91       	lpm	r25, Z
   13006:	91 11       	cpse	r25, r1
   13008:	34 c0       	rjmp	.+104    	; 0x13072 <draw_menu(bool)+0x201c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1346
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   1300a:	c8 53       	subi	r28, 0x38	; 56
   1300c:	df 4f       	sbci	r29, 0xFF	; 255
   1300e:	e8 81       	ld	r30, Y
   13010:	f9 81       	ldd	r31, Y+1	; 0x01
   13012:	c8 5c       	subi	r28, 0xC8	; 200
   13014:	d0 40       	sbci	r29, 0x00	; 0
   13016:	25 91       	lpm	r18, Z+
   13018:	34 91       	lpm	r19, Z
   1301a:	c8 54       	subi	r28, 0x48	; 72
   1301c:	df 4f       	sbci	r29, 0xFF	; 255
   1301e:	48 81       	ld	r20, Y
   13020:	59 81       	ldd	r21, Y+1	; 0x01
   13022:	c8 5b       	subi	r28, 0xB8	; 184
   13024:	d0 40       	sbci	r29, 0x00	; 0
   13026:	42 0f       	add	r20, r18
   13028:	53 1f       	adc	r21, r19
   1302a:	c0 54       	subi	r28, 0x40	; 64
   1302c:	df 4f       	sbci	r29, 0xFF	; 255
   1302e:	59 83       	std	Y+1, r21	; 0x01
   13030:	48 83       	st	Y, r20
   13032:	c0 5c       	subi	r28, 0xC0	; 192
   13034:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1347
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   13036:	f1 01       	movw	r30, r2
   13038:	25 91       	lpm	r18, Z+
   1303a:	34 91       	lpm	r19, Z
   1303c:	c6 53       	subi	r28, 0x36	; 54
   1303e:	df 4f       	sbci	r29, 0xFF	; 255
   13040:	e8 81       	ld	r30, Y
   13042:	f9 81       	ldd	r31, Y+1	; 0x01
   13044:	ca 5c       	subi	r28, 0xCA	; 202
   13046:	d0 40       	sbci	r29, 0x00	; 0
   13048:	94 91       	lpm	r25, Z
   1304a:	c6 54       	subi	r28, 0x46	; 70
   1304c:	df 4f       	sbci	r29, 0xFF	; 255
   1304e:	48 81       	ld	r20, Y
   13050:	59 81       	ldd	r21, Y+1	; 0x01
   13052:	ca 5b       	subi	r28, 0xBA	; 186
   13054:	d0 40       	sbci	r29, 0x00	; 0
   13056:	24 0f       	add	r18, r20
   13058:	35 1f       	adc	r19, r21
   1305a:	b9 01       	movw	r22, r18
   1305c:	9f 9d       	mul	r25, r15
   1305e:	60 0d       	add	r22, r0
   13060:	71 1d       	adc	r23, r1
   13062:	11 24       	eor	r1, r1
   13064:	ce 53       	subi	r28, 0x3E	; 62
   13066:	df 4f       	sbci	r29, 0xFF	; 255
   13068:	79 83       	std	Y+1, r23	; 0x01
   1306a:	68 83       	st	Y, r22
   1306c:	c2 5c       	subi	r28, 0xC2	; 194
   1306e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1348
          loop_t++;
   13070:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1350
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
   13072:	c2 54       	subi	r28, 0x42	; 66
   13074:	df 4f       	sbci	r29, 0xFF	; 255
   13076:	e8 81       	ld	r30, Y
   13078:	f9 81       	ldd	r31, Y+1	; 0x01
   1307a:	ce 5b       	subi	r28, 0xBE	; 190
   1307c:	d0 40       	sbci	r29, 0x00	; 0
   1307e:	94 91       	lpm	r25, Z
   13080:	91 30       	cpi	r25, 0x01	; 1
   13082:	09 f0       	breq	.+2      	; 0x13086 <draw_menu(bool)+0x2030>
   13084:	34 c0       	rjmp	.+104    	; 0x130ee <draw_menu(bool)+0x2098>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1352
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
   13086:	f1 01       	movw	r30, r2
   13088:	25 91       	lpm	r18, Z+
   1308a:	34 91       	lpm	r19, Z
   1308c:	c6 54       	subi	r28, 0x46	; 70
   1308e:	df 4f       	sbci	r29, 0xFF	; 255
   13090:	48 81       	ld	r20, Y
   13092:	59 81       	ldd	r21, Y+1	; 0x01
   13094:	ca 5b       	subi	r28, 0xBA	; 186
   13096:	d0 40       	sbci	r29, 0x00	; 0
   13098:	42 0f       	add	r20, r18
   1309a:	53 1f       	adc	r21, r19
   1309c:	ce 53       	subi	r28, 0x3E	; 62
   1309e:	df 4f       	sbci	r29, 0xFF	; 255
   130a0:	59 83       	std	Y+1, r21	; 0x01
   130a2:	48 83       	st	Y, r20
   130a4:	c2 5c       	subi	r28, 0xC2	; 194
   130a6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1353
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   130a8:	c8 53       	subi	r28, 0x38	; 56
   130aa:	df 4f       	sbci	r29, 0xFF	; 255
   130ac:	e8 81       	ld	r30, Y
   130ae:	f9 81       	ldd	r31, Y+1	; 0x01
   130b0:	c8 5c       	subi	r28, 0xC8	; 200
   130b2:	d0 40       	sbci	r29, 0x00	; 0
   130b4:	25 91       	lpm	r18, Z+
   130b6:	34 91       	lpm	r19, Z
   130b8:	c3 53       	subi	r28, 0x33	; 51
   130ba:	df 4f       	sbci	r29, 0xFF	; 255
   130bc:	e8 81       	ld	r30, Y
   130be:	f9 81       	ldd	r31, Y+1	; 0x01
   130c0:	cd 5c       	subi	r28, 0xCD	; 205
   130c2:	d0 40       	sbci	r29, 0x00	; 0
   130c4:	94 91       	lpm	r25, Z
   130c6:	c8 54       	subi	r28, 0x48	; 72
   130c8:	df 4f       	sbci	r29, 0xFF	; 255
   130ca:	48 81       	ld	r20, Y
   130cc:	59 81       	ldd	r21, Y+1	; 0x01
   130ce:	c8 5b       	subi	r28, 0xB8	; 184
   130d0:	d0 40       	sbci	r29, 0x00	; 0
   130d2:	24 0f       	add	r18, r20
   130d4:	35 1f       	adc	r19, r21
   130d6:	b9 01       	movw	r22, r18
   130d8:	9f 9d       	mul	r25, r15
   130da:	60 0d       	add	r22, r0
   130dc:	71 1d       	adc	r23, r1
   130de:	11 24       	eor	r1, r1
   130e0:	c0 54       	subi	r28, 0x40	; 64
   130e2:	df 4f       	sbci	r29, 0xFF	; 255
   130e4:	79 83       	std	Y+1, r23	; 0x01
   130e6:	68 83       	st	Y, r22
   130e8:	c0 5c       	subi	r28, 0xC0	; 192
   130ea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
          loop_t++;
   130ec:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1356
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
   130ee:	c2 54       	subi	r28, 0x42	; 66
   130f0:	df 4f       	sbci	r29, 0xFF	; 255
   130f2:	e8 81       	ld	r30, Y
   130f4:	f9 81       	ldd	r31, Y+1	; 0x01
   130f6:	ce 5b       	subi	r28, 0xBE	; 190
   130f8:	d0 40       	sbci	r29, 0x00	; 0
   130fa:	94 91       	lpm	r25, Z
   130fc:	92 30       	cpi	r25, 0x02	; 2
   130fe:	09 f0       	breq	.+2      	; 0x13102 <draw_menu(bool)+0x20ac>
   13100:	4b c0       	rjmp	.+150    	; 0x13198 <draw_menu(bool)+0x2142>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   13102:	c8 53       	subi	r28, 0x38	; 56
   13104:	df 4f       	sbci	r29, 0xFF	; 255
   13106:	e8 81       	ld	r30, Y
   13108:	f9 81       	ldd	r31, Y+1	; 0x01
   1310a:	c8 5c       	subi	r28, 0xC8	; 200
   1310c:	d0 40       	sbci	r29, 0x00	; 0
   1310e:	25 91       	lpm	r18, Z+
   13110:	34 91       	lpm	r19, Z
   13112:	c3 53       	subi	r28, 0x33	; 51
   13114:	df 4f       	sbci	r29, 0xFF	; 255
   13116:	e8 81       	ld	r30, Y
   13118:	f9 81       	ldd	r31, Y+1	; 0x01
   1311a:	cd 5c       	subi	r28, 0xCD	; 205
   1311c:	d0 40       	sbci	r29, 0x00	; 0
   1311e:	94 91       	lpm	r25, Z
   13120:	c8 54       	subi	r28, 0x48	; 72
   13122:	df 4f       	sbci	r29, 0xFF	; 255
   13124:	48 81       	ld	r20, Y
   13126:	59 81       	ldd	r21, Y+1	; 0x01
   13128:	c8 5b       	subi	r28, 0xB8	; 184
   1312a:	d0 40       	sbci	r29, 0x00	; 0
   1312c:	24 0f       	add	r18, r20
   1312e:	35 1f       	adc	r19, r21
   13130:	b9 01       	movw	r22, r18
   13132:	9f 9d       	mul	r25, r15
   13134:	60 0d       	add	r22, r0
   13136:	71 1d       	adc	r23, r1
   13138:	11 24       	eor	r1, r1
   1313a:	c0 54       	subi	r28, 0x40	; 64
   1313c:	df 4f       	sbci	r29, 0xFF	; 255
   1313e:	79 83       	std	Y+1, r23	; 0x01
   13140:	68 83       	st	Y, r22
   13142:	c0 5c       	subi	r28, 0xC0	; 192
   13144:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
   13146:	f1 01       	movw	r30, r2
   13148:	25 91       	lpm	r18, Z+
   1314a:	34 91       	lpm	r19, Z
   1314c:	c6 53       	subi	r28, 0x36	; 54
   1314e:	df 4f       	sbci	r29, 0xFF	; 255
   13150:	e8 81       	ld	r30, Y
   13152:	f9 81       	ldd	r31, Y+1	; 0x01
   13154:	ca 5c       	subi	r28, 0xCA	; 202
   13156:	d0 40       	sbci	r29, 0x00	; 0
   13158:	94 91       	lpm	r25, Z
   1315a:	c6 54       	subi	r28, 0x46	; 70
   1315c:	df 4f       	sbci	r29, 0xFF	; 255
   1315e:	48 81       	ld	r20, Y
   13160:	59 81       	ldd	r21, Y+1	; 0x01
   13162:	ca 5b       	subi	r28, 0xBA	; 186
   13164:	d0 40       	sbci	r29, 0x00	; 0
   13166:	24 0f       	add	r18, r20
   13168:	35 1f       	adc	r19, r21
   1316a:	b9 01       	movw	r22, r18
   1316c:	99 9d       	mul	r25, r9
   1316e:	60 0d       	add	r22, r0
   13170:	71 1d       	adc	r23, r1
   13172:	11 24       	eor	r1, r1
   13174:	ce 53       	subi	r28, 0x3E	; 62
   13176:	df 4f       	sbci	r29, 0xFF	; 255
   13178:	79 83       	std	Y+1, r23	; 0x01
   1317a:	68 83       	st	Y, r22
   1317c:	c2 5c       	subi	r28, 0xC2	; 194
   1317e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
          loop_t++;
   13180:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
   13182:	c1 53       	subi	r28, 0x31	; 49
   13184:	df 4f       	sbci	r29, 0xFF	; 255
   13186:	e8 81       	ld	r30, Y
   13188:	f9 81       	ldd	r31, Y+1	; 0x01
   1318a:	cf 5c       	subi	r28, 0xCF	; 207
   1318c:	d0 40       	sbci	r29, 0x00	; 0
   1318e:	94 91       	lpm	r25, Z
   13190:	f9 16       	cp	r15, r25
   13192:	10 f0       	brcs	.+4      	; 0x13198 <draw_menu(bool)+0x2142>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1364
          {
            loop_t = 0;
            loop_r++;
   13194:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1363
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
          {
            loop_t = 0;
   13196:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
   13198:	c4 54       	subi	r28, 0x44	; 68
   1319a:	df 4f       	sbci	r29, 0xFF	; 255
   1319c:	e8 81       	ld	r30, Y
   1319e:	f9 81       	ldd	r31, Y+1	; 0x01
   131a0:	cc 5b       	subi	r28, 0xBC	; 188
   131a2:	d0 40       	sbci	r29, 0x00	; 0
   131a4:	44 91       	lpm	r20, Z
   131a6:	8e 01       	movw	r16, r28
   131a8:	0f 57       	subi	r16, 0x7F	; 127
   131aa:	1f 4f       	sbci	r17, 0xFF	; 255
   131ac:	9e 01       	movw	r18, r28
   131ae:	2f 5f       	subi	r18, 0xFF	; 255
   131b0:	3f 4f       	sbci	r19, 0xFF	; 255
   131b2:	cd 54       	subi	r28, 0x4D	; 77
   131b4:	df 4f       	sbci	r29, 0xFF	; 255
   131b6:	68 81       	ld	r22, Y
   131b8:	c3 5b       	subi	r28, 0xB3	; 179
   131ba:	d0 40       	sbci	r29, 0x00	; 0
   131bc:	ce 51       	subi	r28, 0x1E	; 30
   131be:	df 4f       	sbci	r29, 0xFF	; 255
   131c0:	e8 81       	ld	r30, Y
   131c2:	f9 81       	ldd	r31, Y+1	; 0x01
   131c4:	c2 5e       	subi	r28, 0xE2	; 226
   131c6:	d0 40       	sbci	r29, 0x00	; 0
   131c8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
   131ca:	ce 52       	subi	r28, 0x2E	; 46
   131cc:	df 4f       	sbci	r29, 0xFF	; 255
   131ce:	e8 81       	ld	r30, Y
   131d0:	f9 81       	ldd	r31, Y+1	; 0x01
   131d2:	c2 5d       	subi	r28, 0xD2	; 210
   131d4:	d0 40       	sbci	r29, 0x00	; 0
   131d6:	25 91       	lpm	r18, Z+
   131d8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   131da:	c4 54       	subi	r28, 0x44	; 68
   131dc:	df 4f       	sbci	r29, 0xFF	; 255
   131de:	e8 81       	ld	r30, Y
   131e0:	f9 81       	ldd	r31, Y+1	; 0x01
   131e2:	cc 5b       	subi	r28, 0xBC	; 188
   131e4:	d0 40       	sbci	r29, 0x00	; 0
   131e6:	84 91       	lpm	r24, Z
   131e8:	cd 54       	subi	r28, 0x4D	; 77
   131ea:	df 4f       	sbci	r29, 0xFF	; 255
   131ec:	68 81       	ld	r22, Y
   131ee:	c3 5b       	subi	r28, 0xB3	; 179
   131f0:	d0 40       	sbci	r29, 0x00	; 0
   131f2:	70 e0       	ldi	r23, 0x00	; 0
   131f4:	ce 54       	subi	r28, 0x4E	; 78
   131f6:	df 4f       	sbci	r29, 0xFF	; 255
   131f8:	48 81       	ld	r20, Y
   131fa:	c2 5b       	subi	r28, 0xB2	; 178
   131fc:	d0 40       	sbci	r29, 0x00	; 0
   131fe:	90 e0       	ldi	r25, 0x00	; 0
   13200:	f9 01       	movw	r30, r18
   13202:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
   13204:	cc 52       	subi	r28, 0x2C	; 44
   13206:	df 4f       	sbci	r29, 0xFF	; 255
   13208:	e8 81       	ld	r30, Y
   1320a:	f9 81       	ldd	r31, Y+1	; 0x01
   1320c:	c4 5d       	subi	r28, 0xD4	; 212
   1320e:	d0 40       	sbci	r29, 0x00	; 0
   13210:	a5 90       	lpm	r10, Z+
   13212:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1372
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
   13214:	ca 52       	subi	r28, 0x2A	; 42
   13216:	df 4f       	sbci	r29, 0xFF	; 255
   13218:	e8 81       	ld	r30, Y
   1321a:	f9 81       	ldd	r31, Y+1	; 0x01
   1321c:	c6 5d       	subi	r28, 0xD6	; 214
   1321e:	d0 40       	sbci	r29, 0x00	; 0
   13220:	c5 90       	lpm	r12, Z+
   13222:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
   13224:	c8 52       	subi	r28, 0x28	; 40
   13226:	df 4f       	sbci	r29, 0xFF	; 255
   13228:	e8 81       	ld	r30, Y
   1322a:	f9 81       	ldd	r31, Y+1	; 0x01
   1322c:	c8 5d       	subi	r28, 0xD8	; 216
   1322e:	d0 40       	sbci	r29, 0x00	; 0
   13230:	e4 90       	lpm	r14, Z
   13232:	c6 52       	subi	r28, 0x26	; 38
   13234:	df 4f       	sbci	r29, 0xFF	; 255
   13236:	e8 81       	ld	r30, Y
   13238:	f9 81       	ldd	r31, Y+1	; 0x01
   1323a:	ca 5d       	subi	r28, 0xDA	; 218
   1323c:	d0 40       	sbci	r29, 0x00	; 0
   1323e:	04 91       	lpm	r16, Z
   13240:	c4 52       	subi	r28, 0x24	; 36
   13242:	df 4f       	sbci	r29, 0xFF	; 255
   13244:	e8 81       	ld	r30, Y
   13246:	f9 81       	ldd	r31, Y+1	; 0x01
   13248:	cc 5d       	subi	r28, 0xDC	; 220
   1324a:	d0 40       	sbci	r29, 0x00	; 0
   1324c:	25 91       	lpm	r18, Z+
   1324e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
   13250:	c2 52       	subi	r28, 0x22	; 34
   13252:	df 4f       	sbci	r29, 0xFF	; 255
   13254:	e8 81       	ld	r30, Y
   13256:	f9 81       	ldd	r31, Y+1	; 0x01
   13258:	ce 5d       	subi	r28, 0xDE	; 222
   1325a:	d0 40       	sbci	r29, 0x00	; 0
   1325c:	45 91       	lpm	r20, Z+
   1325e:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   13260:	88 24       	eor	r8, r8
   13262:	83 94       	inc	r8
   13264:	81 11       	cpse	r24, r1
   13266:	01 c0       	rjmp	.+2      	; 0x1326a <draw_menu(bool)+0x2214>
   13268:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
   1326a:	cb 54       	subi	r28, 0x4B	; 75
   1326c:	df 4f       	sbci	r29, 0xFF	; 255
   1326e:	f8 81       	ld	r31, Y
   13270:	c5 5b       	subi	r28, 0xB5	; 181
   13272:	d0 40       	sbci	r29, 0x00	; 0
   13274:	ff 93       	push	r31
   13276:	cc 54       	subi	r28, 0x4C	; 76
   13278:	df 4f       	sbci	r29, 0xFF	; 255
   1327a:	68 81       	ld	r22, Y
   1327c:	c4 5b       	subi	r28, 0xB4	; 180
   1327e:	d0 40       	sbci	r29, 0x00	; 0
   13280:	6f 93       	push	r22
   13282:	81 e0       	ldi	r24, 0x01	; 1
   13284:	90 e0       	ldi	r25, 0x00	; 0
   13286:	8c 0f       	add	r24, r28
   13288:	9d 1f       	adc	r25, r29
   1328a:	9f 93       	push	r25
   1328c:	8f 93       	push	r24
   1328e:	ce 53       	subi	r28, 0x3E	; 62
   13290:	df 4f       	sbci	r29, 0xFF	; 255
   13292:	68 81       	ld	r22, Y
   13294:	79 81       	ldd	r23, Y+1	; 0x01
   13296:	c2 5c       	subi	r28, 0xC2	; 194
   13298:	d0 40       	sbci	r29, 0x00	; 0
   1329a:	c0 54       	subi	r28, 0x40	; 64
   1329c:	df 4f       	sbci	r29, 0xFF	; 255
   1329e:	88 81       	ld	r24, Y
   132a0:	99 81       	ldd	r25, Y+1	; 0x01
   132a2:	c0 5c       	subi	r28, 0xC0	; 192
   132a4:	d0 40       	sbci	r29, 0x00	; 0
   132a6:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1374
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
        loop_i++;
   132aa:	ce 54       	subi	r28, 0x4E	; 78
   132ac:	df 4f       	sbci	r29, 0xFF	; 255
   132ae:	88 81       	ld	r24, Y
   132b0:	c2 5b       	subi	r28, 0xB2	; 178
   132b2:	d0 40       	sbci	r29, 0x00	; 0
   132b4:	8f 5f       	subi	r24, 0xFF	; 255
   132b6:	ce 54       	subi	r28, 0x4E	; 78
   132b8:	df 4f       	sbci	r29, 0xFF	; 255
   132ba:	88 83       	st	Y, r24
   132bc:	c2 5b       	subi	r28, 0xB2	; 178
   132be:	d0 40       	sbci	r29, 0x00	; 0
   132c0:	0f 90       	pop	r0
   132c2:	0f 90       	pop	r0
   132c4:	0f 90       	pop	r0
   132c6:	0f 90       	pop	r0
   132c8:	8a ce       	rjmp	.-748    	; 0x12fde <draw_menu(bool)+0x1f88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1377
      }
    }
    if (click_x > 0 && click_y > 0)
   132ca:	cc 53       	subi	r28, 0x3C	; 60
   132cc:	df 4f       	sbci	r29, 0xFF	; 255
   132ce:	e8 81       	ld	r30, Y
   132d0:	f9 81       	ldd	r31, Y+1	; 0x01
   132d2:	c4 5c       	subi	r28, 0xC4	; 196
   132d4:	d0 40       	sbci	r29, 0x00	; 0
   132d6:	ef 2b       	or	r30, r31
   132d8:	09 f4       	brne	.+2      	; 0x132dc <draw_menu(bool)+0x2286>
   132da:	bb c1       	rjmp	.+886    	; 0x13652 <draw_menu(bool)+0x25fc>
   132dc:	ca 53       	subi	r28, 0x3A	; 58
   132de:	df 4f       	sbci	r29, 0xFF	; 255
   132e0:	28 81       	ld	r18, Y
   132e2:	39 81       	ldd	r19, Y+1	; 0x01
   132e4:	c6 5c       	subi	r28, 0xC6	; 198
   132e6:	d0 40       	sbci	r29, 0x00	; 0
   132e8:	23 2b       	or	r18, r19
   132ea:	09 f4       	brne	.+2      	; 0x132ee <draw_menu(bool)+0x2298>
   132ec:	b2 c1       	rjmp	.+868    	; 0x13652 <draw_menu(bool)+0x25fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1379
    {
      loop_i = 0;
   132ee:	ce 54       	subi	r28, 0x4E	; 78
   132f0:	df 4f       	sbci	r29, 0xFF	; 255
   132f2:	18 82       	st	Y, r1
   132f4:	c2 5b       	subi	r28, 0xB2	; 178
   132f6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1382
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
   132f8:	f2 01       	movw	r30, r4
   132fa:	e8 54       	subi	r30, 0x48	; 72
   132fc:	fd 4f       	sbci	r31, 0xFD	; 253
   132fe:	e6 0d       	add	r30, r6
   13300:	f7 1d       	adc	r31, r7
   13302:	25 91       	lpm	r18, Z+
   13304:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1383
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   13306:	c2 01       	movw	r24, r4
   13308:	8d 54       	subi	r24, 0x4D	; 77
   1330a:	9d 4f       	sbci	r25, 0xFD	; 253
   1330c:	a3 01       	movw	r20, r6
   1330e:	48 0f       	add	r20, r24
   13310:	59 1f       	adc	r21, r25
   13312:	c2 54       	subi	r28, 0x42	; 66
   13314:	df 4f       	sbci	r29, 0xFF	; 255
   13316:	59 83       	std	Y+1, r21	; 0x01
   13318:	48 83       	st	Y, r20
   1331a:	ce 5b       	subi	r28, 0xBE	; 190
   1331c:	d0 40       	sbci	r29, 0x00	; 0
   1331e:	fa 01       	movw	r30, r20
   13320:	84 91       	lpm	r24, Z
   13322:	cd 54       	subi	r28, 0x4D	; 77
   13324:	df 4f       	sbci	r29, 0xFF	; 255
   13326:	68 81       	ld	r22, Y
   13328:	c3 5b       	subi	r28, 0xB3	; 179
   1332a:	d0 40       	sbci	r29, 0x00	; 0
   1332c:	70 e0       	ldi	r23, 0x00	; 0
   1332e:	40 e0       	ldi	r20, 0x00	; 0
   13330:	90 e0       	ldi	r25, 0x00	; 0
   13332:	f9 01       	movw	r30, r18
   13334:	19 95       	eicall
   13336:	cf 54       	subi	r28, 0x4F	; 79
   13338:	df 4f       	sbci	r29, 0xFF	; 255
   1333a:	88 83       	st	Y, r24
   1333c:	c1 5b       	subi	r28, 0xB1	; 177
   1333e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1384
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
   13340:	f2 01       	movw	r30, r4
   13342:	ee 54       	subi	r30, 0x4E	; 78
   13344:	fd 4f       	sbci	r31, 0xFD	; 253
   13346:	e6 0d       	add	r30, r6
   13348:	f7 1d       	adc	r31, r7
   1334a:	44 91       	lpm	r20, Z
   1334c:	c2 01       	movw	r24, r4
   1334e:	80 55       	subi	r24, 0x50	; 80
   13350:	9d 4f       	sbci	r25, 0xFD	; 253
   13352:	93 01       	movw	r18, r6
   13354:	28 0f       	add	r18, r24
   13356:	39 1f       	adc	r19, r25
   13358:	c3 53       	subi	r28, 0x33	; 51
   1335a:	df 4f       	sbci	r29, 0xFF	; 255
   1335c:	39 83       	std	Y+1, r19	; 0x01
   1335e:	28 83       	st	Y, r18
   13360:	cd 5c       	subi	r28, 0xCD	; 205
   13362:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1385
      if (slider_active != MENU_SLIDER_OFF)
   13364:	4f 3f       	cpi	r20, 0xFF	; 255
   13366:	99 f0       	breq	.+38     	; 0x1338e <draw_menu(bool)+0x2338>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1386
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
   13368:	f9 01       	movw	r30, r18
   1336a:	24 91       	lpm	r18, Z
   1336c:	f2 01       	movw	r30, r4
   1336e:	ef 54       	subi	r30, 0x4F	; 79
   13370:	fd 4f       	sbci	r31, 0xFD	; 253
   13372:	e6 0d       	add	r30, r6
   13374:	f7 1d       	adc	r31, r7
   13376:	e4 91       	lpm	r30, Z
   13378:	2e 9f       	mul	r18, r30
   1337a:	20 2d       	mov	r18, r0
   1337c:	11 24       	eor	r1, r1
   1337e:	be 01       	movw	r22, r28
   13380:	6f 54       	subi	r22, 0x4F	; 79
   13382:	7f 4f       	sbci	r23, 0xFF	; 255
   13384:	ce 01       	movw	r24, r28
   13386:	8e 54       	subi	r24, 0x4E	; 78
   13388:	9f 4f       	sbci	r25, 0xFF	; 255
   1338a:	0e 94 b5 3c 	call	0x796a	; 0x796a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
   1338e:	ce 54       	subi	r28, 0x4E	; 78
   13390:	df 4f       	sbci	r29, 0xFF	; 255
   13392:	88 80       	ld	r8, Y
   13394:	c2 5b       	subi	r28, 0xB2	; 178
   13396:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1387
      while (loop_i < loop_cnt)
   13398:	cf 54       	subi	r28, 0x4F	; 79
   1339a:	df 4f       	sbci	r29, 0xFF	; 255
   1339c:	28 80       	ld	r2, Y
   1339e:	c1 5b       	subi	r28, 0xB1	; 177
   133a0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1389
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   133a2:	c2 01       	movw	r24, r4
   133a4:	81 55       	subi	r24, 0x51	; 81
   133a6:	9d 4f       	sbci	r25, 0xFD	; 253
   133a8:	93 01       	movw	r18, r6
   133aa:	28 0f       	add	r18, r24
   133ac:	39 1f       	adc	r19, r25
   133ae:	c4 54       	subi	r28, 0x44	; 68
   133b0:	df 4f       	sbci	r29, 0xFF	; 255
   133b2:	39 83       	std	Y+1, r19	; 0x01
   133b4:	28 83       	st	Y, r18
   133b6:	cc 5b       	subi	r28, 0xBC	; 188
   133b8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1391
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   133ba:	62 01       	movw	r12, r4
   133bc:	31 e6       	ldi	r19, 0x61	; 97
   133be:	c3 1a       	sub	r12, r19
   133c0:	3d ef       	ldi	r19, 0xFD	; 253
   133c2:	d3 0a       	sbc	r13, r19
   133c4:	c6 0c       	add	r12, r6
   133c6:	d7 1c       	adc	r13, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1392
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   133c8:	52 01       	movw	r10, r4
   133ca:	4f e5       	ldi	r20, 0x5F	; 95
   133cc:	a4 1a       	sub	r10, r20
   133ce:	4d ef       	ldi	r20, 0xFD	; 253
   133d0:	b4 0a       	sbc	r11, r20
   133d2:	a6 0c       	add	r10, r6
   133d4:	b7 1c       	adc	r11, r7
   133d6:	01 97       	sbiw	r24, 0x01	; 1
   133d8:	b3 01       	movw	r22, r6
   133da:	68 0f       	add	r22, r24
   133dc:	79 1f       	adc	r23, r25
   133de:	c8 53       	subi	r28, 0x38	; 56
   133e0:	df 4f       	sbci	r29, 0xFF	; 255
   133e2:	79 83       	std	Y+1, r23	; 0x01
   133e4:	68 83       	st	Y, r22
   133e6:	c8 5c       	subi	r28, 0xC8	; 200
   133e8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1398
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   133ea:	01 97       	sbiw	r24, 0x01	; 1
   133ec:	f3 01       	movw	r30, r6
   133ee:	e8 0f       	add	r30, r24
   133f0:	f9 1f       	adc	r31, r25
   133f2:	c6 53       	subi	r28, 0x36	; 54
   133f4:	df 4f       	sbci	r29, 0xFF	; 255
   133f6:	f9 83       	std	Y+1, r31	; 0x01
   133f8:	e8 83       	st	Y, r30
   133fa:	ca 5c       	subi	r28, 0xCA	; 202
   133fc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1412
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
   133fe:	08 97       	sbiw	r24, 0x08	; 8
   13400:	93 01       	movw	r18, r6
   13402:	28 0f       	add	r18, r24
   13404:	39 1f       	adc	r19, r25
   13406:	c1 53       	subi	r28, 0x31	; 49
   13408:	df 4f       	sbci	r29, 0xFF	; 255
   1340a:	39 83       	std	Y+1, r19	; 0x01
   1340c:	28 83       	st	Y, r18
   1340e:	cf 5c       	subi	r28, 0xCF	; 207
   13410:	d0 40       	sbci	r29, 0x00	; 0
   13412:	02 97       	sbiw	r24, 0x02	; 2
   13414:	a3 01       	movw	r20, r6
   13416:	48 0f       	add	r20, r24
   13418:	59 1f       	adc	r21, r25
   1341a:	ce 52       	subi	r28, 0x2E	; 46
   1341c:	df 4f       	sbci	r29, 0xFF	; 255
   1341e:	59 83       	std	Y+1, r21	; 0x01
   13420:	48 83       	st	Y, r20
   13422:	c2 5d       	subi	r28, 0xD2	; 210
   13424:	d0 40       	sbci	r29, 0x00	; 0
   13426:	31 2c       	mov	r3, r1
   13428:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1387
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
   1342a:	82 14       	cp	r8, r2
   1342c:	08 f0       	brcs	.+2      	; 0x13430 <draw_menu(bool)+0x23da>
   1342e:	11 c1       	rjmp	.+546    	; 0x13652 <draw_menu(bool)+0x25fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1389
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   13430:	c4 54       	subi	r28, 0x44	; 68
   13432:	df 4f       	sbci	r29, 0xFF	; 255
   13434:	e8 81       	ld	r30, Y
   13436:	f9 81       	ldd	r31, Y+1	; 0x01
   13438:	cc 5b       	subi	r28, 0xBC	; 188
   1343a:	d0 40       	sbci	r29, 0x00	; 0
   1343c:	84 91       	lpm	r24, Z
   1343e:	81 11       	cpse	r24, r1
   13440:	2f c0       	rjmp	.+94     	; 0x134a0 <draw_menu(bool)+0x244a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1391
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   13442:	f6 01       	movw	r30, r12
   13444:	85 91       	lpm	r24, Z+
   13446:	94 91       	lpm	r25, Z
   13448:	c8 54       	subi	r28, 0x48	; 72
   1344a:	df 4f       	sbci	r29, 0xFF	; 255
   1344c:	28 81       	ld	r18, Y
   1344e:	39 81       	ldd	r19, Y+1	; 0x01
   13450:	c8 5b       	subi	r28, 0xB8	; 184
   13452:	d0 40       	sbci	r29, 0x00	; 0
   13454:	28 0f       	add	r18, r24
   13456:	39 1f       	adc	r19, r25
   13458:	c0 54       	subi	r28, 0x40	; 64
   1345a:	df 4f       	sbci	r29, 0xFF	; 255
   1345c:	39 83       	std	Y+1, r19	; 0x01
   1345e:	28 83       	st	Y, r18
   13460:	c0 5c       	subi	r28, 0xC0	; 192
   13462:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1392
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   13464:	f5 01       	movw	r30, r10
   13466:	85 91       	lpm	r24, Z+
   13468:	94 91       	lpm	r25, Z
   1346a:	c8 53       	subi	r28, 0x38	; 56
   1346c:	df 4f       	sbci	r29, 0xFF	; 255
   1346e:	e8 81       	ld	r30, Y
   13470:	f9 81       	ldd	r31, Y+1	; 0x01
   13472:	c8 5c       	subi	r28, 0xC8	; 200
   13474:	d0 40       	sbci	r29, 0x00	; 0
   13476:	24 91       	lpm	r18, Z
   13478:	c6 54       	subi	r28, 0x46	; 70
   1347a:	df 4f       	sbci	r29, 0xFF	; 255
   1347c:	48 81       	ld	r20, Y
   1347e:	59 81       	ldd	r21, Y+1	; 0x01
   13480:	ca 5b       	subi	r28, 0xBA	; 186
   13482:	d0 40       	sbci	r29, 0x00	; 0
   13484:	84 0f       	add	r24, r20
   13486:	95 1f       	adc	r25, r21
   13488:	bc 01       	movw	r22, r24
   1348a:	29 9d       	mul	r18, r9
   1348c:	60 0d       	add	r22, r0
   1348e:	71 1d       	adc	r23, r1
   13490:	11 24       	eor	r1, r1
   13492:	ce 53       	subi	r28, 0x3E	; 62
   13494:	df 4f       	sbci	r29, 0xFF	; 255
   13496:	79 83       	std	Y+1, r23	; 0x01
   13498:	68 83       	st	Y, r22
   1349a:	c2 5c       	subi	r28, 0xC2	; 194
   1349c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1393
          loop_t++;
   1349e:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1395
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
   134a0:	c4 54       	subi	r28, 0x44	; 68
   134a2:	df 4f       	sbci	r29, 0xFF	; 255
   134a4:	e8 81       	ld	r30, Y
   134a6:	f9 81       	ldd	r31, Y+1	; 0x01
   134a8:	cc 5b       	subi	r28, 0xBC	; 188
   134aa:	d0 40       	sbci	r29, 0x00	; 0
   134ac:	84 91       	lpm	r24, Z
   134ae:	81 30       	cpi	r24, 0x01	; 1
   134b0:	79 f5       	brne	.+94     	; 0x13510 <draw_menu(bool)+0x24ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1397
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
   134b2:	f5 01       	movw	r30, r10
   134b4:	85 91       	lpm	r24, Z+
   134b6:	94 91       	lpm	r25, Z
   134b8:	c6 54       	subi	r28, 0x46	; 70
   134ba:	df 4f       	sbci	r29, 0xFF	; 255
   134bc:	28 81       	ld	r18, Y
   134be:	39 81       	ldd	r19, Y+1	; 0x01
   134c0:	ca 5b       	subi	r28, 0xBA	; 186
   134c2:	d0 40       	sbci	r29, 0x00	; 0
   134c4:	28 0f       	add	r18, r24
   134c6:	39 1f       	adc	r19, r25
   134c8:	ce 53       	subi	r28, 0x3E	; 62
   134ca:	df 4f       	sbci	r29, 0xFF	; 255
   134cc:	39 83       	std	Y+1, r19	; 0x01
   134ce:	28 83       	st	Y, r18
   134d0:	c2 5c       	subi	r28, 0xC2	; 194
   134d2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1398
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   134d4:	f6 01       	movw	r30, r12
   134d6:	85 91       	lpm	r24, Z+
   134d8:	94 91       	lpm	r25, Z
   134da:	c6 53       	subi	r28, 0x36	; 54
   134dc:	df 4f       	sbci	r29, 0xFF	; 255
   134de:	e8 81       	ld	r30, Y
   134e0:	f9 81       	ldd	r31, Y+1	; 0x01
   134e2:	ca 5c       	subi	r28, 0xCA	; 202
   134e4:	d0 40       	sbci	r29, 0x00	; 0
   134e6:	24 91       	lpm	r18, Z
   134e8:	c8 54       	subi	r28, 0x48	; 72
   134ea:	df 4f       	sbci	r29, 0xFF	; 255
   134ec:	48 81       	ld	r20, Y
   134ee:	59 81       	ldd	r21, Y+1	; 0x01
   134f0:	c8 5b       	subi	r28, 0xB8	; 184
   134f2:	d0 40       	sbci	r29, 0x00	; 0
   134f4:	84 0f       	add	r24, r20
   134f6:	95 1f       	adc	r25, r21
   134f8:	bc 01       	movw	r22, r24
   134fa:	29 9d       	mul	r18, r9
   134fc:	60 0d       	add	r22, r0
   134fe:	71 1d       	adc	r23, r1
   13500:	11 24       	eor	r1, r1
   13502:	c0 54       	subi	r28, 0x40	; 64
   13504:	df 4f       	sbci	r29, 0xFF	; 255
   13506:	79 83       	std	Y+1, r23	; 0x01
   13508:	68 83       	st	Y, r22
   1350a:	c0 5c       	subi	r28, 0xC0	; 192
   1350c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1399
          loop_t++;
   1350e:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1401
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
   13510:	c4 54       	subi	r28, 0x44	; 68
   13512:	df 4f       	sbci	r29, 0xFF	; 255
   13514:	e8 81       	ld	r30, Y
   13516:	f9 81       	ldd	r31, Y+1	; 0x01
   13518:	cc 5b       	subi	r28, 0xBC	; 188
   1351a:	d0 40       	sbci	r29, 0x00	; 0
   1351c:	84 91       	lpm	r24, Z
   1351e:	82 30       	cpi	r24, 0x02	; 2
   13520:	09 f0       	breq	.+2      	; 0x13524 <draw_menu(bool)+0x24ce>
   13522:	46 c0       	rjmp	.+140    	; 0x135b0 <draw_menu(bool)+0x255a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1403
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   13524:	f6 01       	movw	r30, r12
   13526:	85 91       	lpm	r24, Z+
   13528:	94 91       	lpm	r25, Z
   1352a:	c6 53       	subi	r28, 0x36	; 54
   1352c:	df 4f       	sbci	r29, 0xFF	; 255
   1352e:	e8 81       	ld	r30, Y
   13530:	f9 81       	ldd	r31, Y+1	; 0x01
   13532:	ca 5c       	subi	r28, 0xCA	; 202
   13534:	d0 40       	sbci	r29, 0x00	; 0
   13536:	24 91       	lpm	r18, Z
   13538:	c8 54       	subi	r28, 0x48	; 72
   1353a:	df 4f       	sbci	r29, 0xFF	; 255
   1353c:	48 81       	ld	r20, Y
   1353e:	59 81       	ldd	r21, Y+1	; 0x01
   13540:	c8 5b       	subi	r28, 0xB8	; 184
   13542:	d0 40       	sbci	r29, 0x00	; 0
   13544:	84 0f       	add	r24, r20
   13546:	95 1f       	adc	r25, r21
   13548:	bc 01       	movw	r22, r24
   1354a:	29 9d       	mul	r18, r9
   1354c:	60 0d       	add	r22, r0
   1354e:	71 1d       	adc	r23, r1
   13550:	11 24       	eor	r1, r1
   13552:	c0 54       	subi	r28, 0x40	; 64
   13554:	df 4f       	sbci	r29, 0xFF	; 255
   13556:	79 83       	std	Y+1, r23	; 0x01
   13558:	68 83       	st	Y, r22
   1355a:	c0 5c       	subi	r28, 0xC0	; 192
   1355c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1404
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
   1355e:	f5 01       	movw	r30, r10
   13560:	85 91       	lpm	r24, Z+
   13562:	94 91       	lpm	r25, Z
   13564:	c8 53       	subi	r28, 0x38	; 56
   13566:	df 4f       	sbci	r29, 0xFF	; 255
   13568:	e8 81       	ld	r30, Y
   1356a:	f9 81       	ldd	r31, Y+1	; 0x01
   1356c:	c8 5c       	subi	r28, 0xC8	; 200
   1356e:	d0 40       	sbci	r29, 0x00	; 0
   13570:	24 91       	lpm	r18, Z
   13572:	c6 54       	subi	r28, 0x46	; 70
   13574:	df 4f       	sbci	r29, 0xFF	; 255
   13576:	48 81       	ld	r20, Y
   13578:	59 81       	ldd	r21, Y+1	; 0x01
   1357a:	ca 5b       	subi	r28, 0xBA	; 186
   1357c:	d0 40       	sbci	r29, 0x00	; 0
   1357e:	84 0f       	add	r24, r20
   13580:	95 1f       	adc	r25, r21
   13582:	bc 01       	movw	r22, r24
   13584:	23 9d       	mul	r18, r3
   13586:	60 0d       	add	r22, r0
   13588:	71 1d       	adc	r23, r1
   1358a:	11 24       	eor	r1, r1
   1358c:	ce 53       	subi	r28, 0x3E	; 62
   1358e:	df 4f       	sbci	r29, 0xFF	; 255
   13590:	79 83       	std	Y+1, r23	; 0x01
   13592:	68 83       	st	Y, r22
   13594:	c2 5c       	subi	r28, 0xC2	; 194
   13596:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1405
          loop_t++;
   13598:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1406
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
   1359a:	c3 53       	subi	r28, 0x33	; 51
   1359c:	df 4f       	sbci	r29, 0xFF	; 255
   1359e:	e8 81       	ld	r30, Y
   135a0:	f9 81       	ldd	r31, Y+1	; 0x01
   135a2:	cd 5c       	subi	r28, 0xCD	; 205
   135a4:	d0 40       	sbci	r29, 0x00	; 0
   135a6:	84 91       	lpm	r24, Z
   135a8:	98 16       	cp	r9, r24
   135aa:	10 f0       	brcs	.+4      	; 0x135b0 <draw_menu(bool)+0x255a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1409
          {
            loop_t = 0;
            loop_r++;
   135ac:	33 94       	inc	r3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1408
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
          {
            loop_t = 0;
   135ae:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1412
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
   135b0:	c1 53       	subi	r28, 0x31	; 49
   135b2:	df 4f       	sbci	r29, 0xFF	; 255
   135b4:	e8 81       	ld	r30, Y
   135b6:	f9 81       	ldd	r31, Y+1	; 0x01
   135b8:	cf 5c       	subi	r28, 0xCF	; 207
   135ba:	d0 40       	sbci	r29, 0x00	; 0
   135bc:	25 91       	lpm	r18, Z+
   135be:	34 91       	lpm	r19, Z
   135c0:	ce 52       	subi	r28, 0x2E	; 46
   135c2:	df 4f       	sbci	r29, 0xFF	; 255
   135c4:	e8 81       	ld	r30, Y
   135c6:	f9 81       	ldd	r31, Y+1	; 0x01
   135c8:	c2 5d       	subi	r28, 0xD2	; 210
   135ca:	d0 40       	sbci	r29, 0x00	; 0
   135cc:	45 91       	lpm	r20, Z+
   135ce:	54 91       	lpm	r21, Z
   135d0:	ca 53       	subi	r28, 0x3A	; 58
   135d2:	df 4f       	sbci	r29, 0xFF	; 255
   135d4:	e8 80       	ld	r14, Y
   135d6:	f9 80       	ldd	r15, Y+1	; 0x01
   135d8:	c6 5c       	subi	r28, 0xC6	; 198
   135da:	d0 40       	sbci	r29, 0x00	; 0
   135dc:	cc 53       	subi	r28, 0x3C	; 60
   135de:	df 4f       	sbci	r29, 0xFF	; 255
   135e0:	08 81       	ld	r16, Y
   135e2:	19 81       	ldd	r17, Y+1	; 0x01
   135e4:	c4 5c       	subi	r28, 0xC4	; 196
   135e6:	d0 40       	sbci	r29, 0x00	; 0
   135e8:	ce 53       	subi	r28, 0x3E	; 62
   135ea:	df 4f       	sbci	r29, 0xFF	; 255
   135ec:	68 81       	ld	r22, Y
   135ee:	79 81       	ldd	r23, Y+1	; 0x01
   135f0:	c2 5c       	subi	r28, 0xC2	; 194
   135f2:	d0 40       	sbci	r29, 0x00	; 0
   135f4:	c0 54       	subi	r28, 0x40	; 64
   135f6:	df 4f       	sbci	r29, 0xFF	; 255
   135f8:	88 81       	ld	r24, Y
   135fa:	99 81       	ldd	r25, Y+1	; 0x01
   135fc:	c0 5c       	subi	r28, 0xC0	; 192
   135fe:	d0 40       	sbci	r29, 0x00	; 0
   13600:	0e 94 9a 3c 	call	0x7934	; 0x7934 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   13604:	18 2f       	mov	r17, r24
   13606:	81 e0       	ldi	r24, 0x01	; 1
   13608:	88 0d       	add	r24, r8
   1360a:	11 23       	and	r17, r17
   1360c:	71 f1       	breq	.+92     	; 0x1366a <draw_menu(bool)+0x2614>
   1360e:	ce 54       	subi	r28, 0x4E	; 78
   13610:	df 4f       	sbci	r29, 0xFF	; 255
   13612:	88 82       	st	Y, r8
   13614:	c2 5b       	subi	r28, 0xB2	; 178
   13616:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1414
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
   13618:	f2 01       	movw	r30, r4
   1361a:	ea 54       	subi	r30, 0x4A	; 74
   1361c:	fd 4f       	sbci	r31, 0xFD	; 253
   1361e:	e6 0d       	add	r30, r6
   13620:	f7 1d       	adc	r31, r7
   13622:	25 91       	lpm	r18, Z+
   13624:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1415
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   13626:	c2 54       	subi	r28, 0x42	; 66
   13628:	df 4f       	sbci	r29, 0xFF	; 255
   1362a:	e8 81       	ld	r30, Y
   1362c:	f9 81       	ldd	r31, Y+1	; 0x01
   1362e:	ce 5b       	subi	r28, 0xBE	; 190
   13630:	d0 40       	sbci	r29, 0x00	; 0
   13632:	84 91       	lpm	r24, Z
   13634:	cd 54       	subi	r28, 0x4D	; 77
   13636:	df 4f       	sbci	r29, 0xFF	; 255
   13638:	68 81       	ld	r22, Y
   1363a:	c3 5b       	subi	r28, 0xB3	; 179
   1363c:	d0 40       	sbci	r29, 0x00	; 0
   1363e:	70 e0       	ldi	r23, 0x00	; 0
   13640:	48 2d       	mov	r20, r8
   13642:	90 e0       	ldi	r25, 0x00	; 0
   13644:	f9 01       	movw	r30, r18
   13646:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1416
          ret = true;
   13648:	c4 53       	subi	r28, 0x34	; 52
   1364a:	df 4f       	sbci	r29, 0xFF	; 255
   1364c:	18 83       	st	Y, r17
   1364e:	cc 5c       	subi	r28, 0xCC	; 204
   13650:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1327
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
   13652:	ca 54       	subi	r28, 0x4A	; 74
   13654:	df 4f       	sbci	r29, 0xFF	; 255
   13656:	f8 81       	ld	r31, Y
   13658:	c6 5b       	subi	r28, 0xB6	; 182
   1365a:	d0 40       	sbci	r29, 0x00	; 0
   1365c:	ff 5f       	subi	r31, 0xFF	; 255
   1365e:	ca 54       	subi	r28, 0x4A	; 74
   13660:	df 4f       	sbci	r29, 0xFF	; 255
   13662:	f8 83       	st	Y, r31
   13664:	c6 5b       	subi	r28, 0xB6	; 182
   13666:	d0 40       	sbci	r29, 0x00	; 0
   13668:	c1 cb       	rjmp	.-2174   	; 0x12dec <draw_menu(bool)+0x1d96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1412
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
   1366a:	88 2e       	mov	r8, r24
   1366c:	de ce       	rjmp	.-580    	; 0x1342a <draw_menu(bool)+0x23d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1416
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
          ret = true;
   1366e:	21 e0       	ldi	r18, 0x01	; 1
   13670:	c4 53       	subi	r28, 0x34	; 52
   13672:	df 4f       	sbci	r29, 0xFF	; 255
   13674:	28 83       	st	Y, r18
   13676:	cc 5c       	subi	r28, 0xCC	; 204
   13678:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1427
  }


draw_menu_end:
  return ret;
}
   1367a:	c4 53       	subi	r28, 0x34	; 52
   1367c:	df 4f       	sbci	r29, 0xFF	; 255
   1367e:	88 81       	ld	r24, Y
   13680:	cc 5c       	subi	r28, 0xCC	; 204
   13682:	d0 40       	sbci	r29, 0x00	; 0
   13684:	cd 51       	subi	r28, 0x1D	; 29
   13686:	df 4f       	sbci	r29, 0xFF	; 255
   13688:	0f b6       	in	r0, 0x3f	; 63
   1368a:	f8 94       	cli
   1368c:	de bf       	out	0x3e, r29	; 62
   1368e:	0f be       	out	0x3f, r0	; 63
   13690:	cd bf       	out	0x3d, r28	; 61
   13692:	df 91       	pop	r29
   13694:	cf 91       	pop	r28
   13696:	1f 91       	pop	r17
   13698:	0f 91       	pop	r16
   1369a:	ff 90       	pop	r15
   1369c:	ef 90       	pop	r14
   1369e:	df 90       	pop	r13
   136a0:	cf 90       	pop	r12
   136a2:	bf 90       	pop	r11
   136a4:	af 90       	pop	r10
   136a6:	9f 90       	pop	r9
   136a8:	8f 90       	pop	r8
   136aa:	7f 90       	pop	r7
   136ac:	6f 90       	pop	r6
   136ae:	5f 90       	pop	r5
   136b0:	4f 90       	pop	r4
   136b2:	3f 90       	pop	r3
   136b4:	2f 90       	pop	r2
   136b6:	08 95       	ret

000136b8 <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3653
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
   136b8:	2f 92       	push	r2
   136ba:	3f 92       	push	r3
   136bc:	4f 92       	push	r4
   136be:	5f 92       	push	r5
   136c0:	6f 92       	push	r6
   136c2:	7f 92       	push	r7
   136c4:	8f 92       	push	r8
   136c6:	9f 92       	push	r9
   136c8:	af 92       	push	r10
   136ca:	bf 92       	push	r11
   136cc:	cf 92       	push	r12
   136ce:	df 92       	push	r13
   136d0:	ef 92       	push	r14
   136d2:	ff 92       	push	r15
   136d4:	0f 93       	push	r16
   136d6:	1f 93       	push	r17
   136d8:	cf 93       	push	r28
   136da:	df 93       	push	r29
   136dc:	cd b7       	in	r28, 0x3d	; 61
   136de:	de b7       	in	r29, 0x3e	; 62
   136e0:	c0 54       	subi	r28, 0x40	; 64
   136e2:	d1 40       	sbci	r29, 0x01	; 1
   136e4:	0f b6       	in	r0, 0x3f	; 63
   136e6:	f8 94       	cli
   136e8:	de bf       	out	0x3e, r29	; 62
   136ea:	0f be       	out	0x3f, r0	; 63
   136ec:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
   136ee:	1b 82       	std	Y+3, r1	; 0x03
   136f0:	85 ef       	ldi	r24, 0xF5	; 245
   136f2:	93 e0       	ldi	r25, 0x03	; 3
   136f4:	9d 83       	std	Y+5, r25	; 0x05
   136f6:	8c 83       	std	Y+4, r24	; 0x04
   136f8:	89 e3       	ldi	r24, 0x39	; 57
   136fa:	95 e0       	ldi	r25, 0x05	; 5
   136fc:	9f 83       	std	Y+7, r25	; 0x07
   136fe:	8e 83       	std	Y+6, r24	; 0x06
   13700:	18 86       	std	Y+8, r1	; 0x08
   13702:	19 86       	std	Y+9, r1	; 0x09
   13704:	1a 86       	std	Y+10, r1	; 0x0a
   13706:	1b 86       	std	Y+11, r1	; 0x0b
   13708:	80 e6       	ldi	r24, 0x60	; 96
   1370a:	9a ee       	ldi	r25, 0xEA	; 234
   1370c:	a0 e0       	ldi	r26, 0x00	; 0
   1370e:	b0 e0       	ldi	r27, 0x00	; 0
   13710:	8c 87       	std	Y+12, r24	; 0x0c
   13712:	9d 87       	std	Y+13, r25	; 0x0d
   13714:	ae 87       	std	Y+14, r26	; 0x0e
   13716:	bf 87       	std	Y+15, r27	; 0x0f
   13718:	18 8a       	std	Y+16, r1	; 0x10
   1371a:	19 8a       	std	Y+17, r1	; 0x11
   1371c:	1a 8a       	std	Y+18, r1	; 0x12
   1371e:	1b 8a       	std	Y+19, r1	; 0x13
   13720:	1c 8a       	std	Y+20, r1	; 0x14
   13722:	1d 8a       	std	Y+21, r1	; 0x15
   13724:	1e 8a       	std	Y+22, r1	; 0x16
   13726:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
   13728:	87 e1       	ldi	r24, 0x17	; 23
   1372a:	92 e1       	ldi	r25, 0x12	; 18
   1372c:	9a 83       	std	Y+2, r25	; 0x02
   1372e:	89 83       	std	Y+1, r24	; 0x01
setup_io_pin():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3437
/////////////// HW funkce ///////////////////////////////////////////////////////////////////////

/// setup_io_pin - nastaveni IO pinu
void setup_io_pin(void)
{
  pinMode(ETH_RST, OUTPUT);
   13730:	61 e0       	ldi	r22, 0x01	; 1
   13732:	86 e0       	ldi	r24, 0x06	; 6
   13734:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3438
  pinMode(ETH_CS, OUTPUT);
   13738:	61 e0       	ldi	r22, 0x01	; 1
   1373a:	8f e0       	ldi	r24, 0x0F	; 15
   1373c:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3439
  pinMode(LED, OUTPUT);
   13740:	61 e0       	ldi	r22, 0x01	; 1
   13742:	88 e0       	ldi	r24, 0x08	; 8
   13744:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3440
  pinMode(PIEZO, OUTPUT);
   13748:	61 e0       	ldi	r22, 0x01	; 1
   1374a:	8c e0       	ldi	r24, 0x0C	; 12
   1374c:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3441
  pinMode(STORAGE_RAM_CS, OUTPUT);
   13750:	61 e0       	ldi	r22, 0x01	; 1
   13752:	86 e1       	ldi	r24, 0x16	; 22
   13754:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3442
  pinMode(STORAGE_EEPROM_CS, OUTPUT);
   13758:	61 e0       	ldi	r22, 0x01	; 1
   1375a:	87 e1       	ldi	r24, 0x17	; 23
   1375c:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3443
  pinMode(JUMPER, INPUT_PULLUP);
   13760:	62 e0       	ldi	r22, 0x02	; 2
   13762:	8e e0       	ldi	r24, 0x0E	; 14
   13764:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3445

  digitalWrite(PIEZO, LOW);
   13768:	60 e0       	ldi	r22, 0x00	; 0
   1376a:	8c e0       	ldi	r24, 0x0C	; 12
   1376c:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3446
  delay(1000);
   13770:	68 ee       	ldi	r22, 0xE8	; 232
   13772:	73 e0       	ldi	r23, 0x03	; 3
   13774:	80 e0       	ldi	r24, 0x00	; 0
   13776:	90 e0       	ldi	r25, 0x00	; 0
   13778:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3447
  digitalWrite(PIEZO, HIGH);
   1377c:	61 e0       	ldi	r22, 0x01	; 1
   1377e:	8c e0       	ldi	r24, 0x0C	; 12
   13780:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3669

  NTPClient timeClient(udpClient);

  setup_io_pin();

  interrupts();             // enable all interrupts
   13784:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3670
  SPI.begin();
   13786:	0e 94 b5 63 	call	0xc76a	; 0xc76a <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3671
  Wire.begin();
   1378a:	0e 94 d5 ba 	call	0x175aa	; 0x175aa <TwoWire::begin() [clone .constprop.46]>
begin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:240

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
  Wire.begin();
   1378e:	0e 94 d5 ba 	call	0x175aa	; 0x175aa <TwoWire::begin() [clone .constprop.46]>
mqtt_set_public_mqtt_client():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:460
  send_mqtt_general_payload(mqtt_client, topic, log);
}
///////////////////////////////////////////////////////////////////////////
void mqtt_set_public_mqtt_client(PubSubClient *mqtt_client)
{
  pub_mqtt_client = mqtt_client;
   13792:	8a ef       	ldi	r24, 0xFA	; 250
   13794:	9f e0       	ldi	r25, 0x0F	; 15
   13796:	90 93 1b 0a 	sts	0x0A1B, r25	; 0x800a1b <pub_mqtt_client+0x1>
   1379a:	80 93 1a 0a 	sts	0x0A1A, r24	; 0x800a1a <pub_mqtt_client>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3675
  rtc.begin();

  mqtt_set_public_mqtt_client(&mqtt_client);
  fdevopen( &printf_via_mqtt, 0);
   1379e:	70 e0       	ldi	r23, 0x00	; 0
   137a0:	60 e0       	ldi	r22, 0x00	; 0
   137a2:	8f e5       	ldi	r24, 0x5F	; 95
   137a4:	91 e7       	ldi	r25, 0x71	; 113
   137a6:	0e 94 5d d5 	call	0x1aaba	; 0x1aaba <fdevopen>
printf_begin():
/home/saric/Arduino/libraries/RF24/printf.h:31

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
   137aa:	70 e0       	ldi	r23, 0x00	; 0
   137ac:	60 e0       	ldi	r22, 0x00	; 0
   137ae:	8d e5       	ldi	r24, 0x5D	; 93
   137b0:	9e e4       	ldi	r25, 0x4E	; 78
   137b2:	0e 94 5d d5 	call	0x1aaba	; 0x1aaba <fdevopen>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3678
  printf_begin();

  swSPI.begin();
   137b6:	86 e4       	ldi	r24, 0x46	; 70
   137b8:	92 e1       	ldi	r25, 0x12	; 18
   137ba:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <SoftSPIB::begin()>
MenuHistoryInit():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1513
  Global_menu_args1[MenuHistoryIndex] = args1;
}
///
void MenuHistoryInit(void)
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
   137be:	e0 91 e4 0c 	lds	r30, 0x0CE4	; 0x800ce4 <MenuHistoryIndex>
   137c2:	f0 e0       	ldi	r31, 0x00	; 0
   137c4:	e6 52       	subi	r30, 0x26	; 38
   137c6:	f3 4f       	sbci	r31, 0xF3	; 243
   137c8:	10 82       	st	Z, r1
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
   137ca:	0e 94 f8 bb 	call	0x177f0	; 0x177f0 <LCDWIKI_KBV::reset() [clone .constprop.54]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
   137ce:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <my_lcd+0x1a>
   137d2:	90 91 9f 0f 	lds	r25, 0x0F9F	; 0x800f9f <my_lcd+0x1b>
   137d6:	01 96       	adiw	r24, 0x01	; 1
   137d8:	09 f0       	breq	.+2      	; 0x137dc <setup+0x124>
   137da:	4c c0       	rjmp	.+152    	; 0x13874 <setup+0x1bc>
Read_ID():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:575

//read LCD controller chip ID 
uint16_t LCDWIKI_KBV::Read_ID(void)
{
	uint16_t ret;
	if ((Read_Reg(0x04,0) == 0x00)&&(Read_Reg(0x04,1) == 0x8000))
   137dc:	60 e0       	ldi	r22, 0x00	; 0
   137de:	84 e0       	ldi	r24, 0x04	; 4
   137e0:	90 e0       	ldi	r25, 0x00	; 0
   137e2:	0e 94 69 bc 	call	0x178d2	; 0x178d2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.52]>
   137e6:	89 2b       	or	r24, r25
   137e8:	39 f5       	brne	.+78     	; 0x13838 <setup+0x180>
   137ea:	61 e0       	ldi	r22, 0x01	; 1
   137ec:	84 e0       	ldi	r24, 0x04	; 4
   137ee:	90 e0       	ldi	r25, 0x00	; 0
   137f0:	0e 94 69 bc 	call	0x178d2	; 0x178d2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.52]>
   137f4:	81 15       	cp	r24, r1
   137f6:	90 48       	sbci	r25, 0x80	; 128
   137f8:	f9 f4       	brne	.+62     	; 0x13838 <setup+0x180>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:577
	{
		uint8_t buf[] = {0xFF, 0x83, 0x57};
   137fa:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <__malloc_margin+0x9>
   137fe:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <__malloc_margin+0xa>
   13802:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <__malloc_margin+0xb>
   13806:	2b 96       	adiw	r28, 0x0b	; 11
   13808:	8d af       	std	Y+61, r24	; 0x3d
   1380a:	9e af       	std	Y+62, r25	; 0x3e
   1380c:	af af       	std	Y+63, r26	; 0x3f
   1380e:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:578
		Push_Command(HX8357D_SETC, buf, sizeof(buf));
   13810:	23 e0       	ldi	r18, 0x03	; 3
   13812:	ae 01       	movw	r20, r28
   13814:	48 5b       	subi	r20, 0xB8	; 184
   13816:	5f 4f       	sbci	r21, 0xFF	; 255
   13818:	69 eb       	ldi	r22, 0xB9	; 185
   1381a:	70 e0       	ldi	r23, 0x00	; 0
   1381c:	84 e8       	ldi	r24, 0x84	; 132
   1381e:	9f e0       	ldi	r25, 0x0F	; 15
   13820:	0e 94 c6 64 	call	0xc98c	; 0xc98c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:579
		ret = (Read_Reg(0xD0,0) << 16) | Read_Reg(0xD0,1);
   13824:	60 e0       	ldi	r22, 0x00	; 0
   13826:	80 ed       	ldi	r24, 0xD0	; 208
   13828:	90 e0       	ldi	r25, 0x00	; 0
   1382a:	0e 94 69 bc 	call	0x178d2	; 0x178d2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.52]>
   1382e:	61 e0       	ldi	r22, 0x01	; 1
   13830:	80 ed       	ldi	r24, 0xD0	; 208
   13832:	90 e0       	ldi	r25, 0x00	; 0
   13834:	0e 94 69 bc 	call	0x178d2	; 0x178d2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.52]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:585
		if((ret == 0x990000) || (ret == 0x900000))
		{
			return 0x9090;
		}
	}
	ret = Read_Reg(0xD3,1); //0x9341 0x9486
   13838:	61 e0       	ldi	r22, 0x01	; 1
   1383a:	83 ed       	ldi	r24, 0xD3	; 211
   1383c:	90 e0       	ldi	r25, 0x00	; 0
   1383e:	0e 94 69 bc 	call	0x178d2	; 0x178d2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.52]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:586
	if(ret == 0x9341)
   13842:	81 34       	cpi	r24, 0x41	; 65
   13844:	b3 e9       	ldi	r27, 0x93	; 147
   13846:	9b 07       	cpc	r25, r27
   13848:	89 f0       	breq	.+34     	; 0x1386c <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:590
	{
		return 0x9341;
	}
	else if(ret == 0x9486)
   1384a:	86 38       	cpi	r24, 0x86	; 134
   1384c:	e4 e9       	ldi	r30, 0x94	; 148
   1384e:	9e 07       	cpc	r25, r30
   13850:	69 f0       	breq	.+26     	; 0x1386c <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:594
	{
		return 0x9486;
	}
	else if(ret == 0x9488)
   13852:	88 38       	cpi	r24, 0x88	; 136
   13854:	f4 e9       	ldi	r31, 0x94	; 148
   13856:	9f 07       	cpc	r25, r31
   13858:	49 f0       	breq	.+18     	; 0x1386c <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:598
	{
		return 0x9488;
	}
	else if(ret == 0x7796)
   1385a:	86 39       	cpi	r24, 0x96	; 150
   1385c:	27 e7       	ldi	r18, 0x77	; 119
   1385e:	92 07       	cpc	r25, r18
   13860:	29 f0       	breq	.+10     	; 0x1386c <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:604
	{
		return 0x7796;
	}
	else
	{
		return Read_Reg(0, 0); //others
   13862:	60 e0       	ldi	r22, 0x00	; 0
   13864:	90 e0       	ldi	r25, 0x00	; 0
   13866:	80 e0       	ldi	r24, 0x00	; 0
   13868:	0e 94 69 bc 	call	0x178d2	; 0x178d2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.52]>
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
   1386c:	90 93 9f 0f 	sts	0x0F9F, r25	; 0x800f9f <my_lcd+0x1b>
   13870:	80 93 9e 0f 	sts	0x0F9E, r24	; 0x800f9e <my_lcd+0x1a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   13874:	00 91 9e 0f 	lds	r16, 0x0F9E	; 0x800f9e <my_lcd+0x1a>
   13878:	10 91 9f 0f 	lds	r17, 0x0F9F	; 0x800f9f <my_lcd+0x1b>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
    }
}

void LCDWIKI_KBV::start(uint16_t ID)
{
	reset();
   1387c:	0e 94 f8 bb 	call	0x177f0	; 0x177f0 <LCDWIKI_KBV::reset() [clone .constprop.54]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
   13880:	68 ec       	ldi	r22, 0xC8	; 200
   13882:	70 e0       	ldi	r23, 0x00	; 0
   13884:	80 e0       	ldi	r24, 0x00	; 0
   13886:	90 e0       	ldi	r25, 0x00	; 0
   13888:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
   1388c:	06 39       	cpi	r16, 0x96	; 150
   1388e:	17 47       	sbci	r17, 0x77	; 119
   13890:	09 f0       	breq	.+2      	; 0x13894 <setup+0x1dc>
   13892:	e5 c2       	rjmp	.+1482   	; 0x13e5e <setup+0x7a6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
   13894:	89 e0       	ldi	r24, 0x09	; 9
   13896:	90 e0       	ldi	r25, 0x00	; 0
   13898:	90 93 9d 0f 	sts	0x0F9D, r25	; 0x800f9d <my_lcd+0x19>
   1389c:	80 93 9c 0f 	sts	0x0F9C, r24	; 0x800f9c <my_lcd+0x18>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   138a0:	8a e2       	ldi	r24, 0x2A	; 42
   138a2:	90 e0       	ldi	r25, 0x00	; 0
   138a4:	90 93 a1 0f 	sts	0x0FA1, r25	; 0x800fa1 <my_lcd+0x1d>
   138a8:	80 93 a0 0f 	sts	0x0FA0, r24	; 0x800fa0 <my_lcd+0x1c>
   138ac:	8b e2       	ldi	r24, 0x2B	; 43
   138ae:	90 e0       	ldi	r25, 0x00	; 0
   138b0:	90 93 a3 0f 	sts	0x0FA3, r25	; 0x800fa3 <my_lcd+0x1f>
   138b4:	80 93 a2 0f 	sts	0x0FA2, r24	; 0x800fa2 <my_lcd+0x1e>
   138b8:	8c e2       	ldi	r24, 0x2C	; 44
   138ba:	90 e0       	ldi	r25, 0x00	; 0
   138bc:	90 93 a5 0f 	sts	0x0FA5, r25	; 0x800fa5 <my_lcd+0x21>
   138c0:	80 93 a4 0f 	sts	0x0FA4, r24	; 0x800fa4 <my_lcd+0x20>
   138c4:	8e e2       	ldi	r24, 0x2E	; 46
   138c6:	90 e0       	ldi	r25, 0x00	; 0
   138c8:	90 93 a7 0f 	sts	0x0FA7, r25	; 0x800fa7 <my_lcd+0x23>
   138cc:	80 93 a6 0f 	sts	0x0FA6, r24	; 0x800fa6 <my_lcd+0x22>
   138d0:	83 e3       	ldi	r24, 0x33	; 51
   138d2:	90 e0       	ldi	r25, 0x00	; 0
   138d4:	90 93 a9 0f 	sts	0x0FA9, r25	; 0x800fa9 <my_lcd+0x25>
   138d8:	80 93 a8 0f 	sts	0x0FA8, r24	; 0x800fa8 <my_lcd+0x24>
   138dc:	87 e3       	ldi	r24, 0x37	; 55
   138de:	90 e0       	ldi	r25, 0x00	; 0
   138e0:	90 93 ab 0f 	sts	0x0FAB, r25	; 0x800fab <my_lcd+0x27>
   138e4:	80 93 aa 0f 	sts	0x0FAA, r24	; 0x800faa <my_lcd+0x26>
   138e8:	86 e3       	ldi	r24, 0x36	; 54
   138ea:	90 e0       	ldi	r25, 0x00	; 0
   138ec:	90 93 ad 0f 	sts	0x0FAD, r25	; 0x800fad <my_lcd+0x29>
   138f0:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <my_lcd+0x28>
   138f4:	10 92 af 0f 	sts	0x0FAF, r1	; 0x800faf <my_lcd+0x2b>
   138f8:	10 92 ae 0f 	sts	0x0FAE, r1	; 0x800fae <my_lcd+0x2a>
   138fc:	10 92 b1 0f 	sts	0x0FB1, r1	; 0x800fb1 <my_lcd+0x2d>
   13900:	10 92 b0 0f 	sts	0x0FB0, r1	; 0x800fb0 <my_lcd+0x2c>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:912
}

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
   13904:	0e e4       	ldi	r16, 0x4E	; 78
   13906:	1c e5       	ldi	r17, 0x5C	; 92
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965

		case 0x7796:
			lcd_driver = ID_7796;
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   13908:	3c e6       	ldi	r19, 0x6C	; 108
   1390a:	e3 2e       	mov	r14, r19
   1390c:	f1 2c       	mov	r15, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:915
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
	{
        uint8_t cmd = pgm_read_byte(p++);
   1390e:	f8 01       	movw	r30, r16
   13910:	64 91       	lpm	r22, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:916
        uint8_t len = pgm_read_byte(p++);
   13912:	31 96       	adiw	r30, 0x01	; 1
   13914:	d4 90       	lpm	r13, Z
   13916:	0e 5f       	subi	r16, 0xFE	; 254
   13918:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:917
        if (cmd == TFTLCD_DELAY8) 
   1391a:	6f 37       	cpi	r22, 0x7F	; 127
   1391c:	89 f0       	breq	.+34     	; 0x13940 <setup+0x288>
   1391e:	de 01       	movw	r26, r28
   13920:	a8 5b       	subi	r26, 0xB8	; 184
   13922:	bf 4f       	sbci	r27, 0xFF	; 255
   13924:	30 e0       	ldi	r19, 0x00	; 0
   13926:	20 e0       	ldi	r18, 0x00	; 0
   13928:	ad 01       	movw	r20, r26
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:924
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
   1392a:	2d 15       	cp	r18, r13
   1392c:	08 f0       	brcs	.+2      	; 0x13930 <setup+0x278>
   1392e:	8e c2       	rjmp	.+1308   	; 0x13e4c <setup+0x794>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:926
            {
                dat[i] = pgm_read_byte(p++);
   13930:	f8 01       	movw	r30, r16
   13932:	e2 0f       	add	r30, r18
   13934:	f3 1f       	adc	r31, r19
   13936:	e4 91       	lpm	r30, Z
   13938:	ed 93       	st	X+, r30
   1393a:	2f 5f       	subi	r18, 0xFF	; 255
   1393c:	3f 4f       	sbci	r19, 0xFF	; 255
   1393e:	f5 cf       	rjmp	.-22     	; 0x1392a <setup+0x272>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:919
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
   13940:	6d 2d       	mov	r22, r13
   13942:	70 e0       	ldi	r23, 0x00	; 0
   13944:	90 e0       	ldi	r25, 0x00	; 0
   13946:	80 e0       	ldi	r24, 0x00	; 0
   13948:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:920
            len = 0;
   1394c:	d1 2c       	mov	r13, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:930
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
   1394e:	6d 2d       	mov	r22, r13
   13950:	70 e0       	ldi	r23, 0x00	; 0
   13952:	6e 5f       	subi	r22, 0xFE	; 254
   13954:	7f 4f       	sbci	r23, 0xFF	; 255
   13956:	e6 1a       	sub	r14, r22
   13958:	f7 0a       	sbc	r15, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:913

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
   1395a:	1e 14       	cp	r1, r14
   1395c:	1f 04       	cpc	r1, r15
   1395e:	bc f2       	brlt	.-82     	; 0x1390e <setup+0x256>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
   13960:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <my_lcd+0x16>
   13964:	0e 94 59 b4 	call	0x168b2	; 0x168b2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:892
}

//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
   13968:	e0 91 b2 0f 	lds	r30, 0x0FB2	; 0x800fb2 <my_lcd+0x2e>
   1396c:	f0 91 b3 0f 	lds	r31, 0x0FB3	; 0x800fb3 <my_lcd+0x2f>
   13970:	80 81       	ld	r24, Z
   13972:	90 91 be 0f 	lds	r25, 0x0FBE	; 0x800fbe <my_lcd+0x3a>
   13976:	89 23       	and	r24, r25
   13978:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:893
	uint8_t val = VL^i;
   1397a:	20 91 ae 0f 	lds	r18, 0x0FAE	; 0x800fae <my_lcd+0x2a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
	if(lcd_driver == ID_932X)
   1397e:	40 91 9c 0f 	lds	r20, 0x0F9C	; 0x800f9c <my_lcd+0x18>
   13982:	50 91 9d 0f 	lds	r21, 0x0F9D	; 0x800f9d <my_lcd+0x19>
   13986:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   1398a:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   1398e:	90 91 bf 0f 	lds	r25, 0x0FBF	; 0x800fbf <my_lcd+0x3b>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
   13992:	80 81       	ld	r24, Z
   13994:	89 23       	and	r24, r25
   13996:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
   13998:	41 15       	cp	r20, r1
   1399a:	51 05       	cpc	r21, r1
   1399c:	09 f0       	breq	.+2      	; 0x139a0 <setup+0x2e8>
   1399e:	66 c2       	rjmp	.+1228   	; 0x13e6c <setup+0x7b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
   139a0:	81 e6       	ldi	r24, 0x61	; 97
   139a2:	82 b9       	out	0x02, r24	; 2
   139a4:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   139a8:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   139ac:	80 81       	ld	r24, Z
   139ae:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   139b2:	89 23       	and	r24, r25
   139b4:	80 83       	st	Z, r24
   139b6:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   139ba:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   139be:	80 81       	ld	r24, Z
   139c0:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   139c4:	89 2b       	or	r24, r25
   139c6:	80 83       	st	Z, r24
   139c8:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   139cc:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   139d0:	80 81       	ld	r24, Z
   139d2:	90 91 bb 0f 	lds	r25, 0x0FBB	; 0x800fbb <my_lcd+0x37>
   139d6:	89 2b       	or	r24, r25
   139d8:	80 83       	st	Z, r24
   139da:	22 b9       	out	0x02, r18	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	}
	else if(lcd_driver == ID_7575)
	{
		writeCmdData8(0x01, val ? 8 : 10);
   139dc:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   139e0:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   139e4:	80 81       	ld	r24, Z
   139e6:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   139ea:	89 23       	and	r24, r25
   139ec:	80 83       	st	Z, r24
   139ee:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   139f2:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   139f6:	80 81       	ld	r24, Z
   139f8:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
   139fc:	89 2b       	or	r24, r25
   139fe:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:906
	}
	CS_IDLE;
   13a00:	e0 91 b2 0f 	lds	r30, 0x0FB2	; 0x800fb2 <my_lcd+0x2e>
   13a04:	f0 91 b3 0f 	lds	r31, 0x0FB3	; 0x800fb3 <my_lcd+0x2f>
   13a08:	80 81       	ld	r24, Z
   13a0a:	90 91 ba 0f 	lds	r25, 0x0FBA	; 0x800fba <my_lcd+0x36>
   13a0e:	89 2b       	or	r24, r25
   13a10:	80 83       	st	Z, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3683
  swSPI.begin();

  MenuHistoryInit();

  my_lcd.Init_LCD();
  my_lcd.Set_Rotation(3);
   13a12:	83 e0       	ldi	r24, 0x03	; 3
   13a14:	0e 94 59 b4 	call	0x168b2	; 0x168b2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3684
  my_lcd.Fill_Screen(WHITE);
   13a18:	8f ef       	ldi	r24, 0xFF	; 255
   13a1a:	9f ef       	ldi	r25, 0xFF	; 255
   13a1c:	0e 94 9b af 	call	0x15f36	; 0x15f36 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.192]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   13a20:	8f e1       	ldi	r24, 0x1F	; 31
   13a22:	90 e0       	ldi	r25, 0x00	; 0
   13a24:	90 93 8f 0f 	sts	0x0F8F, r25	; 0x800f8f <my_lcd+0xb>
   13a28:	80 93 8e 0f 	sts	0x0F8E, r24	; 0x800f8e <my_lcd+0xa>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3686
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
   13a2c:	6a ec       	ldi	r22, 0xCA	; 202
   13a2e:	7d e5       	ldi	r23, 0x5D	; 93
   13a30:	ce 01       	movw	r24, r28
   13a32:	88 5b       	subi	r24, 0xB8	; 184
   13a34:	9f 4f       	sbci	r25, 0xFF	; 255
   13a36:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3687
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
   13a3a:	ee 24       	eor	r14, r14
   13a3c:	ea 94       	dec	r14
   13a3e:	fe 2c       	mov	r15, r14
   13a40:	0f e1       	ldi	r16, 0x1F	; 31
   13a42:	10 e0       	ldi	r17, 0x00	; 0
   13a44:	22 e0       	ldi	r18, 0x02	; 2
   13a46:	4a e0       	ldi	r20, 0x0A	; 10
   13a48:	50 e0       	ldi	r21, 0x00	; 0
   13a4a:	6e e1       	ldi	r22, 0x1E	; 30
   13a4c:	70 e0       	ldi	r23, 0x00	; 0
   13a4e:	ce 01       	movw	r24, r28
   13a50:	88 5b       	subi	r24, 0xB8	; 184
   13a52:	9f 4f       	sbci	r25, 0xFF	; 255
   13a54:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
   13a58:	8e e1       	ldi	r24, 0x1E	; 30
   13a5a:	90 e0       	ldi	r25, 0x00	; 0
   13a5c:	c7 5c       	subi	r28, 0xC7	; 199
   13a5e:	de 4f       	sbci	r29, 0xFE	; 254
   13a60:	99 83       	std	Y+1, r25	; 0x01
   13a62:	88 83       	st	Y, r24
   13a64:	c9 53       	subi	r28, 0x39	; 57
   13a66:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3689
  ///
  for (uint8_t init = 0;  init < 16; init++)
   13a68:	c8 5c       	subi	r28, 0xC8	; 200
   13a6a:	de 4f       	sbci	r29, 0xFE	; 254
   13a6c:	18 82       	st	Y, r1
   13a6e:	c8 53       	subi	r28, 0x38	; 56
   13a70:	d1 40       	sbci	r29, 0x01	; 1
ntp_check():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:422

uint8_t ntp_check(NTPClient *timeClient)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
   13a72:	3e 01       	movw	r6, r28
   13a74:	9e ed       	ldi	r25, 0xDE	; 222
   13a76:	69 0e       	add	r6, r25
   13a78:	71 1c       	adc	r7, r1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3791
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
   13a7a:	a8 ec       	ldi	r26, 0xC8	; 200
   13a7c:	b0 e0       	ldi	r27, 0x00	; 0
   13a7e:	ac 0f       	add	r26, r28
   13a80:	bd 1f       	adc	r27, r29
   13a82:	1c 96       	adiw	r26, 0x0c	; 12
   13a84:	c1 5c       	subi	r28, 0xC1	; 193
   13a86:	de 4f       	sbci	r29, 0xFE	; 254
   13a88:	b9 83       	std	Y+1, r27	; 0x01
   13a8a:	a8 83       	st	Y, r26
   13a8c:	cf 53       	subi	r28, 0x3F	; 63
   13a8e:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3691
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
   13a90:	ee 24       	eor	r14, r14
   13a92:	ea 94       	dec	r14
   13a94:	fe 2c       	mov	r15, r14
   13a96:	00 e0       	ldi	r16, 0x00	; 0
   13a98:	18 ef       	ldi	r17, 0xF8	; 248
   13a9a:	21 e0       	ldi	r18, 0x01	; 1
   13a9c:	4e e1       	ldi	r20, 0x1E	; 30
   13a9e:	50 e0       	ldi	r21, 0x00	; 0
   13aa0:	c7 5c       	subi	r28, 0xC7	; 199
   13aa2:	de 4f       	sbci	r29, 0xFE	; 254
   13aa4:	68 81       	ld	r22, Y
   13aa6:	79 81       	ldd	r23, Y+1	; 0x01
   13aa8:	c9 53       	subi	r28, 0x39	; 57
   13aaa:	d1 40       	sbci	r29, 0x01	; 1
   13aac:	81 ef       	ldi	r24, 0xF1	; 241
   13aae:	96 e0       	ldi	r25, 0x06	; 6
   13ab0:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3693
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
   13ab4:	c8 5c       	subi	r28, 0xC8	; 200
   13ab6:	de 4f       	sbci	r29, 0xFE	; 254
   13ab8:	b8 81       	ld	r27, Y
   13aba:	c8 53       	subi	r28, 0x38	; 56
   13abc:	d1 40       	sbci	r29, 0x01	; 1
   13abe:	b1 11       	cpse	r27, r1
   13ac0:	1a c2       	rjmp	.+1076   	; 0x13ef6 <setup+0x83e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3695
    {
      strcpy_P(str1, text_vnitrni_ochrany);
   13ac2:	6a eb       	ldi	r22, 0xBA	; 186
   13ac4:	7d e5       	ldi	r23, 0x5D	; 93
   13ac6:	ce 01       	movw	r24, r28
   13ac8:	88 5b       	subi	r24, 0xB8	; 184
   13aca:	9f 4f       	sbci	r25, 0xFF	; 255
   13acc:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3696
      strcat(str1, ":1");
   13ad0:	63 ef       	ldi	r22, 0xF3	; 243
   13ad2:	76 e0       	ldi	r23, 0x06	; 6
   13ad4:	ce 01       	movw	r24, r28
   13ad6:	88 5b       	subi	r24, 0xB8	; 184
   13ad8:	9f 4f       	sbci	r25, 0xFF	; 255
   13ada:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3697
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   13ade:	00 ee       	ldi	r16, 0xE0	; 224
   13ae0:	17 e0       	ldi	r17, 0x07	; 7
   13ae2:	21 e0       	ldi	r18, 0x01	; 1
   13ae4:	42 e3       	ldi	r20, 0x32	; 50
   13ae6:	50 e0       	ldi	r21, 0x00	; 0
   13ae8:	6e e1       	ldi	r22, 0x1E	; 30
   13aea:	70 e0       	ldi	r23, 0x00	; 0
   13aec:	ce 01       	movw	r24, r28
   13aee:	88 5b       	subi	r24, 0xB8	; 184
   13af0:	9f 4f       	sbci	r25, 0xFF	; 255
   13af2:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3699

      tritri = 0;
   13af6:	10 92 63 0b 	sts	0x0B63, r1	; 0x800b63 <tritri+0x1>
   13afa:	10 92 62 0b 	sts	0x0B62, r1	; 0x800b62 <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3700
      petnula = 0;
   13afe:	10 92 61 0b 	sts	0x0B61, r1	; 0x800b61 <petnula+0x1>
   13b02:	10 92 60 0b 	sts	0x0B60, r1	; 0x800b60 <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3701
      dvanact = 0;
   13b06:	10 92 5f 0b 	sts	0x0B5F, r1	; 0x800b5f <dvanact+0x1>
   13b0a:	10 92 5e 0b 	sts	0x0B5E, r1	; 0x800b5e <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3703
      dvanact = 0;
      light_curr = 0;
   13b0e:	10 92 74 0c 	sts	0x0C74, r1	; 0x800c74 <light_curr+0x1>
   13b12:	10 92 73 0c 	sts	0x0C73, r1	; 0x800c73 <light_curr>
init_a2d():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:35

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// inicializace a2d prevodniku //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_a2d(uint8_t enable_channel, uint8_t delicka, uint8_t reference)
{
a2d_enable = enable_channel;
   13b16:	88 ef       	ldi	r24, 0xF8	; 248
   13b18:	80 93 66 0c 	sts	0x0C66, r24	; 0x800c66 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:36
a2d_reference = reference;
   13b1c:	83 e0       	ldi	r24, 0x03	; 3
   13b1e:	80 93 42 0b 	sts	0x0B42, r24	; 0x800b42 <a2d_reference>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:38
a2d_delicka = delicka;
a2d_index = 0;
   13b22:	10 92 67 0c 	sts	0x0C67, r1	; 0x800c67 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:39
a2d_input = 0;
   13b26:	10 92 43 0b 	sts	0x0B43, r1	; 0x800b43 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:41
a2d_data = 0;
ADCSRA = ((1<<ADEN|1<<ADIE) + (a2d_delicka & 7));
   13b2a:	8e e8       	ldi	r24, 0x8E	; 142
   13b2c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:42
ADMUX = 0;
   13b30:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:43
ADMUX = ((a2d_reference & 3) << 6) ;
   13b34:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <a2d_reference>
   13b38:	e0 e4       	ldi	r30, 0x40	; 64
   13b3a:	8e 9f       	mul	r24, r30
   13b3c:	c0 01       	movw	r24, r0
   13b3e:	11 24       	eor	r1, r1
   13b40:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
a2d_handler():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:18
typedef void (*a2d_interupt)(uint8_t, uint16_t);
volatile static a2d_interupt a2d_interupt_func;

void a2d_handler(void (*a2d_command)(uint8_t channel, uint16_t data))
{
a2d_interupt_func = a2d_command;
   13b44:	85 e0       	ldi	r24, 0x05	; 5
   13b46:	9d e3       	ldi	r25, 0x3D	; 61
   13b48:	90 93 45 0b 	sts	0x0B45, r25	; 0x800b45 <_ZL17a2d_interupt_func.lto_priv.281+0x1>
   13b4c:	80 93 44 0b 	sts	0x0B44, r24	; 0x800b44 <_ZL17a2d_interupt_func.lto_priv.281>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3709
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
      a2d_handler(a2d_complete);
      ///
      /// spotreba proudu
      a2d_run_now = 0;
   13b50:	10 92 68 0c 	sts	0x0C68, r1	; 0x800c68 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3710
      a2d_start_first(A_PROUD);
   13b54:	83 e0       	ldi	r24, 0x03	; 3
   13b56:	0e 94 32 c0 	call	0x18064	; 0x18064 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3711
      milis = millis();
   13b5a:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   13b5e:	6b 01       	movw	r12, r22
   13b60:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3712
      while (a2d_run_now == 0 && millis() - milis < 10);
   13b62:	80 91 68 0c 	lds	r24, 0x0C68	; 0x800c68 <a2d_run_now>
   13b66:	81 11       	cpse	r24, r1
   13b68:	0b c0       	rjmp	.+22     	; 0x13b80 <setup+0x4c8>
   13b6a:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   13b6e:	6c 19       	sub	r22, r12
   13b70:	7d 09       	sbc	r23, r13
   13b72:	8e 09       	sbc	r24, r14
   13b74:	9f 09       	sbc	r25, r15
   13b76:	6a 30       	cpi	r22, 0x0A	; 10
   13b78:	71 05       	cpc	r23, r1
   13b7a:	81 05       	cpc	r24, r1
   13b7c:	91 05       	cpc	r25, r1
   13b7e:	88 f3       	brcs	.-30     	; 0x13b62 <setup+0x4aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3714
      /// regulator 3.3V
      a2d_run_now = 0;
   13b80:	10 92 68 0c 	sts	0x0C68, r1	; 0x800c68 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3715
      a2d_start_first(A_TRIV);
   13b84:	86 e0       	ldi	r24, 0x06	; 6
   13b86:	0e 94 32 c0 	call	0x18064	; 0x18064 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3716
      milis = millis();
   13b8a:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   13b8e:	6b 01       	movw	r12, r22
   13b90:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3717
      while (a2d_run_now == 0 && millis() - milis < 10);
   13b92:	80 91 68 0c 	lds	r24, 0x0C68	; 0x800c68 <a2d_run_now>
   13b96:	81 11       	cpse	r24, r1
   13b98:	0b c0       	rjmp	.+22     	; 0x13bb0 <setup+0x4f8>
   13b9a:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   13b9e:	6c 19       	sub	r22, r12
   13ba0:	7d 09       	sbc	r23, r13
   13ba2:	8e 09       	sbc	r24, r14
   13ba4:	9f 09       	sbc	r25, r15
   13ba6:	6a 30       	cpi	r22, 0x0A	; 10
   13ba8:	71 05       	cpc	r23, r1
   13baa:	81 05       	cpc	r24, r1
   13bac:	91 05       	cpc	r25, r1
   13bae:	88 f3       	brcs	.-30     	; 0x13b92 <setup+0x4da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3719
      /// regulator 5.0V
      a2d_run_now = 0;
   13bb0:	10 92 68 0c 	sts	0x0C68, r1	; 0x800c68 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3720
      a2d_start_first(A_PETV);
   13bb4:	85 e0       	ldi	r24, 0x05	; 5
   13bb6:	0e 94 32 c0 	call	0x18064	; 0x18064 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3721
      milis = millis();
   13bba:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   13bbe:	6b 01       	movw	r12, r22
   13bc0:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3722
      while (a2d_run_now == 0 && millis() - milis < 10);
   13bc2:	80 91 68 0c 	lds	r24, 0x0C68	; 0x800c68 <a2d_run_now>
   13bc6:	81 11       	cpse	r24, r1
   13bc8:	0b c0       	rjmp	.+22     	; 0x13be0 <setup+0x528>
   13bca:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   13bce:	6c 19       	sub	r22, r12
   13bd0:	7d 09       	sbc	r23, r13
   13bd2:	8e 09       	sbc	r24, r14
   13bd4:	9f 09       	sbc	r25, r15
   13bd6:	6a 30       	cpi	r22, 0x0A	; 10
   13bd8:	71 05       	cpc	r23, r1
   13bda:	81 05       	cpc	r24, r1
   13bdc:	91 05       	cpc	r25, r1
   13bde:	88 f3       	brcs	.-30     	; 0x13bc2 <setup+0x50a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3724
      /// vstupni napeti 12V
      a2d_run_now = 0;
   13be0:	10 92 68 0c 	sts	0x0C68, r1	; 0x800c68 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3725
      a2d_start_first(A_DVANACTV);
   13be4:	84 e0       	ldi	r24, 0x04	; 4
   13be6:	0e 94 32 c0 	call	0x18064	; 0x18064 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3726
      milis = millis();
   13bea:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   13bee:	6b 01       	movw	r12, r22
   13bf0:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3727
      while (a2d_run_now == 0 && millis() - milis < 10);
   13bf2:	80 91 68 0c 	lds	r24, 0x0C68	; 0x800c68 <a2d_run_now>
   13bf6:	81 11       	cpse	r24, r1
   13bf8:	0b c0       	rjmp	.+22     	; 0x13c10 <setup+0x558>
   13bfa:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   13bfe:	6c 19       	sub	r22, r12
   13c00:	7d 09       	sbc	r23, r13
   13c02:	8e 09       	sbc	r24, r14
   13c04:	9f 09       	sbc	r25, r15
   13c06:	6a 30       	cpi	r22, 0x0A	; 10
   13c08:	71 05       	cpc	r23, r1
   13c0a:	81 05       	cpc	r24, r1
   13c0c:	91 05       	cpc	r25, r1
   13c0e:	88 f3       	brcs	.-30     	; 0x13bf2 <setup+0x53a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3729
      /// aktualni intenzita svetla
      a2d_run_now = 0;
   13c10:	10 92 68 0c 	sts	0x0C68, r1	; 0x800c68 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3730
      a2d_start_first(A_LIGHT);
   13c14:	87 e0       	ldi	r24, 0x07	; 7
   13c16:	0e 94 32 c0 	call	0x18064	; 0x18064 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3731
      milis = millis();
   13c1a:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   13c1e:	6b 01       	movw	r12, r22
   13c20:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3732
      while (a2d_run_now == 0 && millis() - milis < 10);
   13c22:	80 91 68 0c 	lds	r24, 0x0C68	; 0x800c68 <a2d_run_now>
   13c26:	81 11       	cpse	r24, r1
   13c28:	0b c0       	rjmp	.+22     	; 0x13c40 <setup+0x588>
   13c2a:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   13c2e:	6c 19       	sub	r22, r12
   13c30:	7d 09       	sbc	r23, r13
   13c32:	8e 09       	sbc	r24, r14
   13c34:	9f 09       	sbc	r25, r15
   13c36:	6a 30       	cpi	r22, 0x0A	; 10
   13c38:	71 05       	cpc	r23, r1
   13c3a:	81 05       	cpc	r24, r1
   13c3c:	91 05       	cpc	r25, r1
   13c3e:	88 f3       	brcs	.-30     	; 0x13c22 <setup+0x56a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3734
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
   13c40:	10 92 68 0c 	sts	0x0C68, r1	; 0x800c68 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3736
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
   13c44:	7e 01       	movw	r14, r28
   13c46:	fa ef       	ldi	r31, 0xFA	; 250
   13c48:	ef 1a       	sub	r14, r31
   13c4a:	fe ef       	ldi	r31, 0xFE	; 254
   13c4c:	ff 0a       	sbc	r15, r31
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3403
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   13c4e:	80 91 62 0b 	lds	r24, 0x0B62	; 0x800b62 <tritri>
   13c52:	90 91 63 0b 	lds	r25, 0x0B63	; 0x800b63 <tritri+0x1>
   13c56:	25 e0       	ldi	r18, 0x05	; 5
   13c58:	28 9f       	mul	r18, r24
   13c5a:	b0 01       	movw	r22, r0
   13c5c:	29 9f       	mul	r18, r25
   13c5e:	70 0d       	add	r23, r0
   13c60:	11 24       	eor	r1, r1
   13c62:	90 e0       	ldi	r25, 0x00	; 0
   13c64:	80 e0       	ldi	r24, 0x00	; 0
   13c66:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
   13c6a:	20 e0       	ldi	r18, 0x00	; 0
   13c6c:	30 e0       	ldi	r19, 0x00	; 0
   13c6e:	4a e7       	ldi	r20, 0x7A	; 122
   13c70:	54 e4       	ldi	r21, 0x44	; 68
   13c72:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3736
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
   13c76:	87 01       	movw	r16, r14
   13c78:	22 e0       	ldi	r18, 0x02	; 2
   13c7a:	44 e0       	ldi	r20, 0x04	; 4
   13c7c:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3737
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
   13c80:	6e 01       	movw	r12, r28
   13c82:	22 ef       	ldi	r18, 0xF2	; 242
   13c84:	c2 1a       	sub	r12, r18
   13c86:	2e ef       	ldi	r18, 0xFE	; 254
   13c88:	d2 0a       	sbc	r13, r18
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3403
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   13c8a:	60 91 60 0b 	lds	r22, 0x0B60	; 0x800b60 <petnula>
   13c8e:	70 91 61 0b 	lds	r23, 0x0B61	; 0x800b61 <petnula+0x1>
   13c92:	03 e0       	ldi	r16, 0x03	; 3
   13c94:	66 0f       	add	r22, r22
   13c96:	77 1f       	adc	r23, r23
   13c98:	0a 95       	dec	r16
   13c9a:	e1 f7       	brne	.-8      	; 0x13c94 <setup+0x5dc>
   13c9c:	90 e0       	ldi	r25, 0x00	; 0
   13c9e:	80 e0       	ldi	r24, 0x00	; 0
   13ca0:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
   13ca4:	20 e0       	ldi	r18, 0x00	; 0
   13ca6:	30 e0       	ldi	r19, 0x00	; 0
   13ca8:	4a e7       	ldi	r20, 0x7A	; 122
   13caa:	54 e4       	ldi	r21, 0x44	; 68
   13cac:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3737
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
   13cb0:	86 01       	movw	r16, r12
   13cb2:	22 e0       	ldi	r18, 0x02	; 2
   13cb4:	44 e0       	ldi	r20, 0x04	; 4
   13cb6:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3738
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
   13cba:	5e 01       	movw	r10, r28
   13cbc:	8a ee       	ldi	r24, 0xEA	; 234
   13cbe:	a8 1a       	sub	r10, r24
   13cc0:	8e ef       	ldi	r24, 0xFE	; 254
   13cc2:	b8 0a       	sbc	r11, r24
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3403
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   13cc4:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <dvanact>
   13cc8:	90 91 5f 0b 	lds	r25, 0x0B5F	; 0x800b5f <dvanact+0x1>
   13ccc:	29 e3       	ldi	r18, 0x39	; 57
   13cce:	28 9f       	mul	r18, r24
   13cd0:	b0 01       	movw	r22, r0
   13cd2:	29 9f       	mul	r18, r25
   13cd4:	70 0d       	add	r23, r0
   13cd6:	11 24       	eor	r1, r1
   13cd8:	90 e0       	ldi	r25, 0x00	; 0
   13cda:	80 e0       	ldi	r24, 0x00	; 0
   13cdc:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
   13ce0:	20 e0       	ldi	r18, 0x00	; 0
   13ce2:	30 e0       	ldi	r19, 0x00	; 0
   13ce4:	4a e7       	ldi	r20, 0x7A	; 122
   13ce6:	54 e4       	ldi	r21, 0x44	; 68
   13ce8:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3738
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
   13cec:	85 01       	movw	r16, r10
   13cee:	22 e0       	ldi	r18, 0x02	; 2
   13cf0:	44 e0       	ldi	r20, 0x04	; 4
   13cf2:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3739
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
   13cf6:	4e 01       	movw	r8, r28
   13cf8:	92 ee       	ldi	r25, 0xE2	; 226
   13cfa:	89 1a       	sub	r8, r25
   13cfc:	9e ef       	ldi	r25, 0xFE	; 254
   13cfe:	99 0a       	sbc	r9, r25
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3418
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   13d00:	60 91 5c 0b 	lds	r22, 0x0B5C	; 0x800b5c <proud>
   13d04:	70 91 5d 0b 	lds	r23, 0x0B5D	; 0x800b5d <proud+0x1>
   13d08:	90 e0       	ldi	r25, 0x00	; 0
   13d0a:	80 e0       	ldi	r24, 0x00	; 0
   13d0c:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3739
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
   13d10:	84 01       	movw	r16, r8
   13d12:	22 e0       	ldi	r18, 0x02	; 2
   13d14:	44 e0       	ldi	r20, 0x04	; 4
   13d16:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3740
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
   13d1a:	9f 92       	push	r9
   13d1c:	8f 92       	push	r8
   13d1e:	bf 92       	push	r11
   13d20:	af 92       	push	r10
   13d22:	df 92       	push	r13
   13d24:	cf 92       	push	r12
   13d26:	ff 92       	push	r15
   13d28:	ef 92       	push	r14
   13d2a:	86 ef       	ldi	r24, 0xF6	; 246
   13d2c:	96 e0       	ldi	r25, 0x06	; 6
   13d2e:	9f 93       	push	r25
   13d30:	8f 93       	push	r24
   13d32:	6e 01       	movw	r12, r28
   13d34:	a8 e8       	ldi	r26, 0x88	; 136
   13d36:	ca 0e       	add	r12, r26
   13d38:	d1 1c       	adc	r13, r1
   13d3a:	df 92       	push	r13
   13d3c:	cf 92       	push	r12
   13d3e:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3741
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   13d42:	ee 24       	eor	r14, r14
   13d44:	ea 94       	dec	r14
   13d46:	fe 2c       	mov	r15, r14
   13d48:	00 ee       	ldi	r16, 0xE0	; 224
   13d4a:	17 e0       	ldi	r17, 0x07	; 7
   13d4c:	21 e0       	ldi	r18, 0x01	; 1
   13d4e:	42 e3       	ldi	r20, 0x32	; 50
   13d50:	50 e0       	ldi	r21, 0x00	; 0
   13d52:	60 ea       	ldi	r22, 0xA0	; 160
   13d54:	70 e0       	ldi	r23, 0x00	; 0
   13d56:	c6 01       	movw	r24, r12
   13d58:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
   13d5c:	0f b6       	in	r0, 0x3f	; 63
   13d5e:	f8 94       	cli
   13d60:	de bf       	out	0x3e, r29	; 62
   13d62:	0f be       	out	0x3f, r0	; 63
   13d64:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4059
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
   13d66:	c8 5c       	subi	r28, 0xC8	; 200
   13d68:	de 4f       	sbci	r29, 0xFE	; 254
   13d6a:	28 81       	ld	r18, Y
   13d6c:	c8 53       	subi	r28, 0x38	; 56
   13d6e:	d1 40       	sbci	r29, 0x01	; 1
   13d70:	2e 30       	cpi	r18, 0x0E	; 14
   13d72:	11 f0       	breq	.+4      	; 0x13d78 <setup+0x6c0>
   13d74:	0c 94 3c a7 	jmp	0x14e78	; 0x14e78 <setup+0x17c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4061
    {
      strcpy_P(str1, text_ntp_cas);
   13d78:	6d ec       	ldi	r22, 0xCD	; 205
   13d7a:	7c e5       	ldi	r23, 0x5C	; 92
   13d7c:	ce 01       	movw	r24, r28
   13d7e:	88 5b       	subi	r24, 0xB8	; 184
   13d80:	9f 4f       	sbci	r25, 0xFF	; 255
   13d82:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4062
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   13d86:	ee 24       	eor	r14, r14
   13d88:	ea 94       	dec	r14
   13d8a:	fe 2c       	mov	r15, r14
   13d8c:	00 ee       	ldi	r16, 0xE0	; 224
   13d8e:	17 e0       	ldi	r17, 0x07	; 7
   13d90:	21 e0       	ldi	r18, 0x01	; 1
   13d92:	4e eb       	ldi	r20, 0xBE	; 190
   13d94:	50 e0       	ldi	r21, 0x00	; 0
   13d96:	6e e1       	ldi	r22, 0x1E	; 30
   13d98:	70 e0       	ldi	r23, 0x00	; 0
   13d9a:	ce 01       	movw	r24, r28
   13d9c:	88 5b       	subi	r24, 0xB8	; 184
   13d9e:	9f 4f       	sbci	r25, 0xFF	; 255
   13da0:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
ntp_check():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:422
   13da4:	d3 01       	movw	r26, r6
   13da6:	1c 92       	st	X, r1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:423
  createString(tmp1, '.', device.ntp_server, 4, 10);
   13da8:	0a e0       	ldi	r16, 0x0A	; 10
   13daa:	24 e0       	ldi	r18, 0x04	; 4
   13dac:	42 e3       	ldi	r20, 0x32	; 50
   13dae:	5e e0       	ldi	r21, 0x0E	; 14
   13db0:	6e e2       	ldi	r22, 0x2E	; 46
   13db2:	c3 01       	movw	r24, r6
   13db4:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
   13db8:	89 e3       	ldi	r24, 0x39	; 57
   13dba:	95 e0       	ldi	r25, 0x05	; 5
   13dbc:	9f 83       	std	Y+7, r25	; 0x07
   13dbe:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
   13dc0:	89 81       	ldd	r24, Y+1	; 0x01
   13dc2:	9a 81       	ldd	r25, Y+2	; 0x02
   13dc4:	dc 01       	movw	r26, r24
   13dc6:	ed 91       	ld	r30, X+
   13dc8:	fc 91       	ld	r31, X
   13dca:	06 84       	ldd	r0, Z+14	; 0x0e
   13dcc:	f7 85       	ldd	r31, Z+15	; 0x0f
   13dce:	e0 2d       	mov	r30, r0
   13dd0:	69 e3       	ldi	r22, 0x39	; 57
   13dd2:	75 e0       	ldi	r23, 0x05	; 5
   13dd4:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
   13dd6:	81 e0       	ldi	r24, 0x01	; 1
   13dd8:	8b 83       	std	Y+3, r24	; 0x03
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   13dda:	80 e1       	ldi	r24, 0x10	; 16
   13ddc:	9e e0       	ldi	r25, 0x0E	; 14
   13dde:	a0 e0       	ldi	r26, 0x00	; 0
   13de0:	b0 e0       	ldi	r27, 0x00	; 0
   13de2:	88 87       	std	Y+8, r24	; 0x08
   13de4:	99 87       	std	Y+9, r25	; 0x09
   13de6:	aa 87       	std	Y+10, r26	; 0x0a
   13de8:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   13dea:	7d 82       	std	Y+5, r7	; 0x05
   13dec:	6c 82       	std	Y+4, r6	; 0x04
setUpdateInterval():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176
void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
}

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
   13dee:	81 e0       	ldi	r24, 0x01	; 1
   13df0:	90 e0       	ldi	r25, 0x00	; 0
   13df2:	a0 e0       	ldi	r26, 0x00	; 0
   13df4:	b0 e0       	ldi	r27, 0x00	; 0
   13df6:	8c 87       	std	Y+12, r24	; 0x0c
   13df8:	9d 87       	std	Y+13, r25	; 0x0d
   13dfa:	ae 87       	std	Y+14, r26	; 0x0e
   13dfc:	bf 87       	std	Y+15, r27	; 0x0f
ntp_check():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:428
  timeClient->begin();
  timeClient->setTimeOffset(3600);
  timeClient->setPoolServerName(tmp1);
  timeClient->setUpdateInterval(1);
  if (timeClient->update() == true)
   13dfe:	ce 01       	movw	r24, r28
   13e00:	01 96       	adiw	r24, 0x01	; 1
   13e02:	0e 94 43 c0 	call	0x18086	; 0x18086 <NTPClient::update()>
   13e06:	18 2f       	mov	r17, r24
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
   13e08:	89 81       	ldd	r24, Y+1	; 0x01
   13e0a:	9a 81       	ldd	r25, Y+2	; 0x02
   13e0c:	dc 01       	movw	r26, r24
   13e0e:	ed 91       	ld	r30, X+
   13e10:	fc 91       	ld	r31, X
   13e12:	02 88       	ldd	r0, Z+18	; 0x12
   13e14:	f3 89       	ldd	r31, Z+19	; 0x13
   13e16:	e0 2d       	mov	r30, r0
   13e18:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   13e1a:	1b 82       	std	Y+3, r1	; 0x03
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4063
      if (ntp_check(&timeClient) == 0)
   13e1c:	11 11       	cpse	r17, r1
   13e1e:	0c 94 22 a7 	jmp	0x14e44	; 0x14e44 <setup+0x178c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4065
      {
        strcpy_P(str1, text_err);
   13e22:	6a e0       	ldi	r22, 0x0A	; 10
   13e24:	7e e5       	ldi	r23, 0x5E	; 94
   13e26:	ce 01       	movw	r24, r28
   13e28:	88 5b       	subi	r24, 0xB8	; 184
   13e2a:	9f 4f       	sbci	r25, 0xFF	; 255
   13e2c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4066
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   13e30:	00 e0       	ldi	r16, 0x00	; 0
   13e32:	18 ef       	ldi	r17, 0xF8	; 248
   13e34:	21 e0       	ldi	r18, 0x01	; 1
   13e36:	4e eb       	ldi	r20, 0xBE	; 190
   13e38:	50 e0       	ldi	r21, 0x00	; 0
   13e3a:	60 ea       	ldi	r22, 0xA0	; 160
   13e3c:	70 e0       	ldi	r23, 0x00	; 0
   13e3e:	ce 01       	movw	r24, r28
   13e40:	88 5b       	subi	r24, 0xB8	; 184
   13e42:	9f 4f       	sbci	r25, 0xFF	; 255
   13e44:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4067
        selftest_set_0(SELFTEST_ERR_NTP);
   13e48:	81 e0       	ldi	r24, 0x01	; 1
   13e4a:	41 c5       	rjmp	.+2690   	; 0x148ce <setup+0x1216>
   13e4c:	0d 0d       	add	r16, r13
   13e4e:	11 1d       	adc	r17, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:928
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
   13e50:	70 e0       	ldi	r23, 0x00	; 0
   13e52:	2d 2d       	mov	r18, r13
   13e54:	84 e8       	ldi	r24, 0x84	; 132
   13e56:	9f e0       	ldi	r25, 0x0F	; 15
   13e58:	0e 94 c6 64 	call	0xc98c	; 0xc98c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   13e5c:	78 cd       	rjmp	.-1296   	; 0x1394e <setup+0x296>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
   13e5e:	8f ef       	ldi	r24, 0xFF	; 255
   13e60:	90 e0       	ldi	r25, 0x00	; 0
   13e62:	90 93 9d 0f 	sts	0x0F9D, r25	; 0x800f9d <my_lcd+0x19>
   13e66:	80 93 9c 0f 	sts	0x0F9C, r24	; 0x800f9c <my_lcd+0x18>
   13e6a:	7a cd       	rjmp	.-1292   	; 0x13960 <setup+0x2a8>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:898
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
	{
		writeCmdData8(0x61, val);
	}
	else if(lcd_driver == ID_7575)
   13e6c:	41 30       	cpi	r20, 0x01	; 1
   13e6e:	51 05       	cpc	r21, r1
   13e70:	19 f5       	brne	.+70     	; 0x13eb8 <setup+0x800>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	{
		writeCmdData8(0x01, val ? 8 : 10);
   13e72:	81 e0       	ldi	r24, 0x01	; 1
   13e74:	82 b9       	out	0x02, r24	; 2
   13e76:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   13e7a:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   13e7e:	80 81       	ld	r24, Z
   13e80:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   13e84:	89 23       	and	r24, r25
   13e86:	80 83       	st	Z, r24
   13e88:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   13e8c:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   13e90:	80 81       	ld	r24, Z
   13e92:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   13e96:	89 2b       	or	r24, r25
   13e98:	80 83       	st	Z, r24
   13e9a:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   13e9e:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   13ea2:	80 81       	ld	r24, Z
   13ea4:	90 91 bb 0f 	lds	r25, 0x0FBB	; 0x800fbb <my_lcd+0x37>
   13ea8:	89 2b       	or	r24, r25
   13eaa:	80 83       	st	Z, r24
setup():
   13eac:	88 e0       	ldi	r24, 0x08	; 8
Invert_Display():
   13eae:	21 11       	cpse	r18, r1
   13eb0:	01 c0       	rjmp	.+2      	; 0x13eb4 <setup+0x7fc>
setup():
   13eb2:	8a e0       	ldi	r24, 0x0A	; 10
Invert_Display():
   13eb4:	82 b9       	out	0x02, r24	; 2
   13eb6:	92 cd       	rjmp	.-1244   	; 0x139dc <setup+0x324>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
   13eb8:	81 e2       	ldi	r24, 0x21	; 33
Invert_Display():
   13eba:	21 11       	cpse	r18, r1
   13ebc:	01 c0       	rjmp	.+2      	; 0x13ec0 <setup+0x808>
setup():
   13ebe:	80 e2       	ldi	r24, 0x20	; 32
Invert_Display():
   13ec0:	82 b9       	out	0x02, r24	; 2
   13ec2:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   13ec6:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   13eca:	80 81       	ld	r24, Z
   13ecc:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   13ed0:	89 23       	and	r24, r25
   13ed2:	80 83       	st	Z, r24
   13ed4:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   13ed8:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   13edc:	80 81       	ld	r24, Z
   13ede:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   13ee2:	89 2b       	or	r24, r25
   13ee4:	80 83       	st	Z, r24
   13ee6:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   13eea:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   13eee:	80 81       	ld	r24, Z
   13ef0:	90 91 bb 0f 	lds	r25, 0x0FBB	; 0x800fbb <my_lcd+0x37>
   13ef4:	83 cd       	rjmp	.-1274   	; 0x139fc <setup+0x344>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3745
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
   13ef6:	c8 5c       	subi	r28, 0xC8	; 200
   13ef8:	de 4f       	sbci	r29, 0xFE	; 254
   13efa:	f8 81       	ld	r31, Y
   13efc:	c8 53       	subi	r28, 0x38	; 56
   13efe:	d1 40       	sbci	r29, 0x01	; 1
   13f00:	f1 30       	cpi	r31, 0x01	; 1
   13f02:	09 f0       	breq	.+2      	; 0x13f06 <setup+0x84e>
   13f04:	63 c0       	rjmp	.+198    	; 0x13fcc <setup+0x914>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3747
    {
      strcpy_P(str1, text_vnitrni_ochrany);
   13f06:	6a eb       	ldi	r22, 0xBA	; 186
   13f08:	7d e5       	ldi	r23, 0x5D	; 93
   13f0a:	ce 01       	movw	r24, r28
   13f0c:	88 5b       	subi	r24, 0xB8	; 184
   13f0e:	9f 4f       	sbci	r25, 0xFF	; 255
   13f10:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3748
      strcat(str1, ":2");
   13f14:	64 e1       	ldi	r22, 0x14	; 20
   13f16:	77 e0       	ldi	r23, 0x07	; 7
   13f18:	ce 01       	movw	r24, r28
   13f1a:	88 5b       	subi	r24, 0xB8	; 184
   13f1c:	9f 4f       	sbci	r25, 0xFF	; 255
   13f1e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3749
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   13f22:	ee 24       	eor	r14, r14
   13f24:	ea 94       	dec	r14
   13f26:	fe 2c       	mov	r15, r14
   13f28:	00 ee       	ldi	r16, 0xE0	; 224
   13f2a:	17 e0       	ldi	r17, 0x07	; 7
   13f2c:	21 e0       	ldi	r18, 0x01	; 1
   13f2e:	4c e3       	ldi	r20, 0x3C	; 60
   13f30:	50 e0       	ldi	r21, 0x00	; 0
   13f32:	6e e1       	ldi	r22, 0x1E	; 30
   13f34:	70 e0       	ldi	r23, 0x00	; 0
   13f36:	ce 01       	movw	r24, r28
   13f38:	88 5b       	subi	r24, 0xB8	; 184
   13f3a:	9f 4f       	sbci	r25, 0xFF	; 255
   13f3c:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
   13f40:	e0 91 da 0f 	lds	r30, 0x0FDA	; 0x800fda <lm75_temp+0xb>
   13f44:	f0 91 db 0f 	lds	r31, 0x0FDB	; 0x800fdb <lm75_temp+0xc>
   13f48:	04 80       	ldd	r0, Z+4	; 0x04
   13f4a:	f5 81       	ldd	r31, Z+5	; 0x05
   13f4c:	e0 2d       	mov	r30, r0
   13f4e:	80 81       	ld	r24, Z
   13f50:	0e 94 46 af 	call	0x15e8c	; 0x15e8c <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.195]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3750
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
   13f54:	7e 01       	movw	r14, r28
   13f56:	22 ee       	ldi	r18, 0xE2	; 226
   13f58:	e2 1a       	sub	r14, r18
   13f5a:	2e ef       	ldi	r18, 0xFE	; 254
   13f5c:	f2 0a       	sbc	r15, r18
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
   13f5e:	bc 01       	movw	r22, r24
   13f60:	99 0f       	add	r25, r25
   13f62:	88 0b       	sbc	r24, r24
   13f64:	99 0b       	sbc	r25, r25
   13f66:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
   13f6a:	20 91 d6 0f 	lds	r18, 0x0FD6	; 0x800fd6 <lm75_temp+0x7>
   13f6e:	30 91 d7 0f 	lds	r19, 0x0FD7	; 0x800fd7 <lm75_temp+0x8>
   13f72:	40 91 d8 0f 	lds	r20, 0x0FD8	; 0x800fd8 <lm75_temp+0x9>
   13f76:	50 91 d9 0f 	lds	r21, 0x0FD9	; 0x800fd9 <lm75_temp+0xa>
   13f7a:	0e 94 fd dd 	call	0x1bbfa	; 0x1bbfa <__mulsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3750
   13f7e:	87 01       	movw	r16, r14
   13f80:	22 e0       	ldi	r18, 0x02	; 2
   13f82:	44 e0       	ldi	r20, 0x04	; 4
   13f84:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3751
      sprintf(str2, "iT=%sC", s_current);
   13f88:	ff 92       	push	r15
   13f8a:	ef 92       	push	r14
   13f8c:	87 e1       	ldi	r24, 0x17	; 23
   13f8e:	97 e0       	ldi	r25, 0x07	; 7
   13f90:	9f 93       	push	r25
   13f92:	8f 93       	push	r24
   13f94:	6e 01       	movw	r12, r28
   13f96:	88 e8       	ldi	r24, 0x88	; 136
   13f98:	c8 0e       	add	r12, r24
   13f9a:	d1 1c       	adc	r13, r1
   13f9c:	df 92       	push	r13
   13f9e:	cf 92       	push	r12
   13fa0:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3752
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   13fa4:	ee 24       	eor	r14, r14
   13fa6:	ea 94       	dec	r14
   13fa8:	fe 2c       	mov	r15, r14
   13faa:	00 ee       	ldi	r16, 0xE0	; 224
   13fac:	17 e0       	ldi	r17, 0x07	; 7
   13fae:	21 e0       	ldi	r18, 0x01	; 1
   13fb0:	4c e3       	ldi	r20, 0x3C	; 60
   13fb2:	50 e0       	ldi	r21, 0x00	; 0
   13fb4:	60 ea       	ldi	r22, 0xA0	; 160
   13fb6:	70 e0       	ldi	r23, 0x00	; 0
   13fb8:	c6 01       	movw	r24, r12
   13fba:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
   13fbe:	0f 90       	pop	r0
   13fc0:	0f 90       	pop	r0
   13fc2:	0f 90       	pop	r0
   13fc4:	0f 90       	pop	r0
   13fc6:	0f 90       	pop	r0
   13fc8:	0f 90       	pop	r0
   13fca:	cd ce       	rjmp	.-614    	; 0x13d66 <setup+0x6ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3756
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
   13fcc:	c8 5c       	subi	r28, 0xC8	; 200
   13fce:	de 4f       	sbci	r29, 0xFE	; 254
   13fd0:	98 81       	ld	r25, Y
   13fd2:	c8 53       	subi	r28, 0x38	; 56
   13fd4:	d1 40       	sbci	r29, 0x01	; 1
   13fd6:	92 30       	cpi	r25, 0x02	; 2
   13fd8:	09 f0       	breq	.+2      	; 0x13fdc <setup+0x924>
   13fda:	85 c1       	rjmp	.+778    	; 0x142e6 <setup+0xc2e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3758
    {
      if (EEPROM.read(set_default_values) == 255)
   13fdc:	8a e5       	ldi	r24, 0x5A	; 90
   13fde:	90 e0       	ldi	r25, 0x00	; 0
   13fe0:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   13fe4:	8f 3f       	cpi	r24, 0xFF	; 255
   13fe6:	09 f0       	breq	.+2      	; 0x13fea <setup+0x932>
   13fe8:	6c c1       	rjmp	.+728    	; 0x142c2 <setup+0xc0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3760
      {
        EEPROM.write(set_default_values, 0);
   13fea:	60 e0       	ldi	r22, 0x00	; 0
   13fec:	8a e5       	ldi	r24, 0x5A	; 90
   13fee:	90 e0       	ldi	r25, 0x00	; 0
   13ff0:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3761
        strcpy_P(str1, text_vychozi_nastaveni);
   13ff4:	68 ea       	ldi	r22, 0xA8	; 168
   13ff6:	7d e5       	ldi	r23, 0x5D	; 93
   13ff8:	ce 01       	movw	r24, r28
   13ffa:	88 5b       	subi	r24, 0xB8	; 184
   13ffc:	9f 4f       	sbci	r25, 0xFF	; 255
   13ffe:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3762
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   14002:	ee 24       	eor	r14, r14
   14004:	ea 94       	dec	r14
   14006:	fe 2c       	mov	r15, r14
   14008:	00 e0       	ldi	r16, 0x00	; 0
   1400a:	18 ef       	ldi	r17, 0xF8	; 248
   1400c:	21 e0       	ldi	r18, 0x01	; 1
   1400e:	46 e4       	ldi	r20, 0x46	; 70
   14010:	50 e0       	ldi	r21, 0x00	; 0
   14012:	6e e1       	ldi	r22, 0x1E	; 30
   14014:	70 e0       	ldi	r23, 0x00	; 0
   14016:	ce 01       	movw	r24, r28
   14018:	88 5b       	subi	r24, 0xB8	; 184
   1401a:	9f 4f       	sbci	r25, 0xFF	; 255
   1401c:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2247
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
   14020:	6f ef       	ldi	r22, 0xFF	; 255
   14022:	8d e5       	ldi	r24, 0x5D	; 93
   14024:	90 e0       	ldi	r25, 0x00	; 0
   14026:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3767
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );

        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
   1402a:	80 e0       	ldi	r24, 0x00	; 0
   1402c:	0e 94 fc 54 	call	0xa9f8	; 0xa9f8 <thermostat_ring_clear(unsigned char)>
   14030:	81 e0       	ldi	r24, 0x01	; 1
   14032:	0e 94 fc 54 	call	0xa9f8	; 0xa9f8 <thermostat_ring_clear(unsigned char)>
   14036:	82 e0       	ldi	r24, 0x02	; 2
   14038:	0e 94 fc 54 	call	0xa9f8	; 0xa9f8 <thermostat_ring_clear(unsigned char)>
   1403c:	83 e0       	ldi	r24, 0x03	; 3
   1403e:	0e 94 fc 54 	call	0xa9f8	; 0xa9f8 <thermostat_ring_clear(unsigned char)>
   14042:	84 e0       	ldi	r24, 0x04	; 4
   14044:	0e 94 fc 54 	call	0xa9f8	; 0xa9f8 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3769
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14048:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3771
        {
          strcpy(tmp1, "");
   1404a:	62 e0       	ldi	r22, 0x02	; 2
   1404c:	73 e0       	ldi	r23, 0x03	; 3
   1404e:	ce 01       	movw	r24, r28
   14050:	8e 50       	subi	r24, 0x0E	; 14
   14052:	9f 4f       	sbci	r25, 0xFF	; 255
   14054:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3772
          remote_tds_clear(idx);
   14058:	81 2f       	mov	r24, r17
   1405a:	0e 94 74 57 	call	0xaee8	; 0xaee8 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3769
        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1405e:	1f 5f       	subi	r17, 0xFF	; 255
   14060:	1a 30       	cpi	r17, 0x0A	; 10
   14062:	99 f7       	brne	.-26     	; 0x1404a <setup+0x992>
   14064:	f1 ef       	ldi	r31, 0xF1	; 241
   14066:	af 2e       	mov	r10, r31
   14068:	bb 24       	eor	r11, r11
   1406a:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3775
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   1406c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3777
        {
          strcpy_P(str2, text_prog);
   1406e:	63 ea       	ldi	r22, 0xA3	; 163
   14070:	7d e5       	ldi	r23, 0x5D	; 93
   14072:	ce 01       	movw	r24, r28
   14074:	88 57       	subi	r24, 0x78	; 120
   14076:	9f 4f       	sbci	r25, 0xFF	; 255
   14078:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3778
          thermostat_program_set_name(idx, str2);
   1407c:	be 01       	movw	r22, r28
   1407e:	68 57       	subi	r22, 0x78	; 120
   14080:	7f 4f       	sbci	r23, 0xFF	; 255
   14082:	81 2f       	mov	r24, r17
   14084:	0e 94 52 54 	call	0xa8a4	; 0xa8a4 <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   14088:	6f ef       	ldi	r22, 0xFF	; 255
   1408a:	c5 01       	movw	r24, r10
   1408c:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3780
          thermostat_program_set_active(idx, PROG_FREE);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   14090:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3782
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
   14092:	c1 2c       	mov	r12, r1
   14094:	e1 2c       	mov	r14, r1
   14096:	00 e0       	ldi	r16, 0x00	; 0
   14098:	20 e0       	ldi	r18, 0x00	; 0
   1409a:	40 e0       	ldi	r20, 0x00	; 0
   1409c:	6f 2d       	mov	r22, r15
   1409e:	81 2f       	mov	r24, r17
   140a0:	0e 94 16 54 	call	0xa82c	; 0xa82c <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3783
            thermostat_program_set_threshold(idx, interval_id, 220);
   140a4:	4c ed       	ldi	r20, 0xDC	; 220
   140a6:	50 e0       	ldi	r21, 0x00	; 0
   140a8:	6f 2d       	mov	r22, r15
   140aa:	81 2f       	mov	r24, r17
   140ac:	0e 94 fa 53 	call	0xa7f4	; 0xa7f4 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3784
            thermostat_program_set_week(idx, interval_id, 0);
   140b0:	40 e0       	ldi	r20, 0x00	; 0
   140b2:	6f 2d       	mov	r22, r15
   140b4:	81 2f       	mov	r24, r17
   140b6:	0e 94 ec 53 	call	0xa7d8	; 0xa7d8 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3780
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy_P(str2, text_prog);
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, PROG_FREE);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   140ba:	f3 94       	inc	r15
   140bc:	ab e0       	ldi	r26, 0x0B	; 11
   140be:	fa 12       	cpse	r15, r26
   140c0:	e8 cf       	rjmp	.-48     	; 0x14092 <setup+0x9da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3775
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   140c2:	1f 5f       	subi	r17, 0xFF	; 255
   140c4:	bd e4       	ldi	r27, 0x4D	; 77
   140c6:	ab 0e       	add	r10, r27
   140c8:	b1 1c       	adc	r11, r1
   140ca:	18 30       	cpi	r17, 0x08	; 8
   140cc:	81 f6       	brne	.-96     	; 0x1406e <setup+0x9b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3795
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
   140ce:	ea e0       	ldi	r30, 0x0A	; 10
   140d0:	fe 2e       	mov	r15, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3796
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
   140d2:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3790
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
   140d4:	be 01       	movw	r22, r28
   140d6:	68 53       	subi	r22, 0x38	; 56
   140d8:	7f 4f       	sbci	r23, 0xFF	; 255
   140da:	80 2f       	mov	r24, r16
   140dc:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3791
          strcpy(tds.name, "FREE");
   140e0:	6f e8       	ldi	r22, 0x8F	; 143
   140e2:	73 e0       	ldi	r23, 0x03	; 3
   140e4:	c1 5c       	subi	r28, 0xC1	; 193
   140e6:	de 4f       	sbci	r29, 0xFE	; 254
   140e8:	88 81       	ld	r24, Y
   140ea:	99 81       	ldd	r25, Y+1	; 0x01
   140ec:	cf 53       	subi	r28, 0x3F	; 63
   140ee:	d1 40       	sbci	r29, 0x01	; 1
   140f0:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3792
          tds.used = 0;
   140f4:	c8 53       	subi	r28, 0x38	; 56
   140f6:	df 4f       	sbci	r29, 0xFF	; 255
   140f8:	18 82       	st	Y, r1
   140fa:	c8 5c       	subi	r28, 0xC8	; 200
   140fc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3793
          tds.offset = 0;
   140fe:	ce 52       	subi	r28, 0x2E	; 46
   14100:	df 4f       	sbci	r29, 0xFF	; 255
   14102:	19 82       	std	Y+1, r1	; 0x01
   14104:	18 82       	st	Y, r1
   14106:	c2 5d       	subi	r28, 0xD2	; 210
   14108:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3794
          tds.assigned_ds2482 = 0;
   1410a:	cf 52       	subi	r28, 0x2F	; 47
   1410c:	df 4f       	sbci	r29, 0xFF	; 255
   1410e:	18 82       	st	Y, r1
   14110:	c1 5d       	subi	r28, 0xD1	; 209
   14112:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3795
          tds.period = 10;
   14114:	c4 52       	subi	r28, 0x24	; 36
   14116:	df 4f       	sbci	r29, 0xFF	; 255
   14118:	f8 82       	st	Y, r15
   1411a:	cc 5d       	subi	r28, 0xDC	; 220
   1411c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3796
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
   1411e:	c7 53       	subi	r28, 0x37	; 55
   14120:	df 4f       	sbci	r29, 0xFF	; 255
   14122:	18 83       	st	Y, r17
   14124:	c9 5c       	subi	r28, 0xC9	; 201
   14126:	d0 40       	sbci	r29, 0x00	; 0
   14128:	c6 53       	subi	r28, 0x36	; 54
   1412a:	df 4f       	sbci	r29, 0xFF	; 255
   1412c:	18 83       	st	Y, r17
   1412e:	ca 5c       	subi	r28, 0xCA	; 202
   14130:	d0 40       	sbci	r29, 0x00	; 0
   14132:	c5 53       	subi	r28, 0x35	; 53
   14134:	df 4f       	sbci	r29, 0xFF	; 255
   14136:	18 83       	st	Y, r17
   14138:	cb 5c       	subi	r28, 0xCB	; 203
   1413a:	d0 40       	sbci	r29, 0x00	; 0
   1413c:	c4 53       	subi	r28, 0x34	; 52
   1413e:	df 4f       	sbci	r29, 0xFF	; 255
   14140:	18 83       	st	Y, r17
   14142:	cc 5c       	subi	r28, 0xCC	; 204
   14144:	d0 40       	sbci	r29, 0x00	; 0
   14146:	c3 53       	subi	r28, 0x33	; 51
   14148:	df 4f       	sbci	r29, 0xFF	; 255
   1414a:	18 83       	st	Y, r17
   1414c:	cd 5c       	subi	r28, 0xCD	; 205
   1414e:	d0 40       	sbci	r29, 0x00	; 0
   14150:	c2 53       	subi	r28, 0x32	; 50
   14152:	df 4f       	sbci	r29, 0xFF	; 255
   14154:	18 83       	st	Y, r17
   14156:	ce 5c       	subi	r28, 0xCE	; 206
   14158:	d0 40       	sbci	r29, 0x00	; 0
   1415a:	c1 53       	subi	r28, 0x31	; 49
   1415c:	df 4f       	sbci	r29, 0xFF	; 255
   1415e:	18 83       	st	Y, r17
   14160:	cf 5c       	subi	r28, 0xCF	; 207
   14162:	d0 40       	sbci	r29, 0x00	; 0
   14164:	c0 53       	subi	r28, 0x30	; 48
   14166:	df 4f       	sbci	r29, 0xFF	; 255
   14168:	18 83       	st	Y, r17
   1416a:	c0 5d       	subi	r28, 0xD0	; 208
   1416c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3797
          set_tds18s20(idx, &tds);
   1416e:	be 01       	movw	r22, r28
   14170:	68 53       	subi	r22, 0x38	; 56
   14172:	7f 4f       	sbci	r23, 0xFF	; 255
   14174:	80 2f       	mov	r24, r16
   14176:	0e 94 88 55 	call	0xab10	; 0xab10 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3788
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   1417a:	0f 5f       	subi	r16, 0xFF	; 255
   1417c:	06 30       	cpi	r16, 0x06	; 6
   1417e:	09 f0       	breq	.+2      	; 0x14182 <setup+0xaca>
   14180:	a9 cf       	rjmp	.-174    	; 0x140d4 <setup+0xa1c>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   14182:	84 e1       	ldi	r24, 0x14	; 20
   14184:	f3 01       	movw	r30, r6
   14186:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   14188:	8c e0       	ldi	r24, 0x0C	; 12
   1418a:	81 83       	std	Z+1, r24	; 0x01
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   1418c:	8e e0       	ldi	r24, 0x0E	; 14
   1418e:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   14190:	91 e1       	ldi	r25, 0x11	; 17
   14192:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   14194:	84 83       	std	Z+4, r24	; 0x04
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   14196:	15 82       	std	Z+5, r1	; 0x05
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3800
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
   14198:	c3 01       	movw	r24, r6
   1419a:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <RTC_DS1307::adjust(DateTime const&)>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3430
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(int8_t offset)
{
  EEPROM.write(time_offset, offset);
   1419e:	61 e0       	ldi	r22, 0x01	; 1
   141a0:	81 e0       	ldi	r24, 0x01	; 1
   141a2:	90 e0       	ldi	r25, 0x00	; 0
   141a4:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3803
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
        time_set_offset(1);
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
   141a8:	22 e0       	ldi	r18, 0x02	; 2
   141aa:	20 93 e4 0d 	sts	0x0DE4, r18	; 0x800de4 <device>
   141ae:	31 e0       	ldi	r19, 0x01	; 1
   141b0:	30 93 e5 0d 	sts	0x0DE5, r19	; 0x800de5 <device+0x1>
   141b4:	20 93 e6 0d 	sts	0x0DE6, r18	; 0x800de6 <device+0x2>
   141b8:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <dvanact>
   141bc:	90 91 5f 0b 	lds	r25, 0x0B5F	; 0x800b5f <dvanact+0x1>
   141c0:	96 95       	lsr	r25
   141c2:	87 95       	ror	r24
   141c4:	80 93 e7 0d 	sts	0x0DE7, r24	; 0x800de7 <device+0x3>
   141c8:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <light_curr>
   141cc:	90 91 74 0c 	lds	r25, 0x0C74	; 0x800c74 <light_curr+0x1>
   141d0:	96 95       	lsr	r25
   141d2:	87 95       	ror	r24
   141d4:	80 93 e8 0d 	sts	0x0DE8, r24	; 0x800de8 <device+0x4>
   141d8:	80 91 5c 0b 	lds	r24, 0x0B5C	; 0x800b5c <proud>
   141dc:	90 91 5d 0b 	lds	r25, 0x0B5D	; 0x800b5d <proud+0x1>
   141e0:	96 95       	lsr	r25
   141e2:	87 95       	ror	r24
   141e4:	80 93 e9 0d 	sts	0x0DE9, r24	; 0x800de9 <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3804
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 111;
   141e8:	90 ec       	ldi	r25, 0xC0	; 192
   141ea:	90 93 ea 0d 	sts	0x0DEA, r25	; 0x800dea <device+0x6>
   141ee:	88 ea       	ldi	r24, 0xA8	; 168
   141f0:	80 93 eb 0d 	sts	0x0DEB, r24	; 0x800deb <device+0x7>
   141f4:	20 93 ec 0d 	sts	0x0DEC, r18	; 0x800dec <device+0x8>
   141f8:	4f e6       	ldi	r20, 0x6F	; 111
   141fa:	40 93 ed 0d 	sts	0x0DED, r20	; 0x800ded <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3805
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
   141fe:	10 93 ee 0d 	sts	0x0DEE, r17	; 0x800dee <device+0xa>
   14202:	10 93 ef 0d 	sts	0x0DEF, r17	; 0x800def <device+0xb>
   14206:	10 93 f0 0d 	sts	0x0DF0, r17	; 0x800df0 <device+0xc>
   1420a:	10 92 f1 0d 	sts	0x0DF1, r1	; 0x800df1 <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3807

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
   1420e:	90 93 f6 0d 	sts	0x0DF6, r25	; 0x800df6 <device+0x12>
   14212:	80 93 f7 0d 	sts	0x0DF7, r24	; 0x800df7 <device+0x13>
   14216:	20 93 f8 0d 	sts	0x0DF8, r18	; 0x800df8 <device+0x14>
   1421a:	30 93 f9 0d 	sts	0x0DF9, r19	; 0x800df9 <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3808
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
   1421e:	90 93 f2 0d 	sts	0x0DF2, r25	; 0x800df2 <device+0xe>
   14222:	80 93 f3 0d 	sts	0x0DF3, r24	; 0x800df3 <device+0xf>
   14226:	20 93 f4 0d 	sts	0x0DF4, r18	; 0x800df4 <device+0x10>
   1422a:	30 93 f5 0d 	sts	0x0DF5, r19	; 0x800df5 <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3809
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
   1422e:	90 93 04 0e 	sts	0x0E04, r25	; 0x800e04 <device+0x20>
   14232:	80 93 05 0e 	sts	0x0E05, r24	; 0x800e05 <device+0x21>
   14236:	20 93 06 0e 	sts	0x0E06, r18	; 0x800e06 <device+0x22>
   1423a:	30 93 07 0e 	sts	0x0E07, r19	; 0x800e07 <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3810
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
   1423e:	90 93 32 0e 	sts	0x0E32, r25	; 0x800e32 <device+0x4e>
   14242:	80 93 33 0e 	sts	0x0E33, r24	; 0x800e33 <device+0x4f>
   14246:	20 93 34 0e 	sts	0x0E34, r18	; 0x800e34 <device+0x50>
   1424a:	30 93 35 0e 	sts	0x0E35, r19	; 0x800e35 <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3811
        device.mqtt_port = 1883;
   1424e:	8b e5       	ldi	r24, 0x5B	; 91
   14250:	97 e0       	ldi	r25, 0x07	; 7
   14252:	90 93 09 0e 	sts	0x0E09, r25	; 0x800e09 <device+0x25>
   14256:	80 93 08 0e 	sts	0x0E08, r24	; 0x800e08 <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3812
        strcpy(device.mqtt_user, "saric");
   1425a:	6e e1       	ldi	r22, 0x1E	; 30
   1425c:	77 e0       	ldi	r23, 0x07	; 7
   1425e:	8a e0       	ldi	r24, 0x0A	; 10
   14260:	9e e0       	ldi	r25, 0x0E	; 14
   14262:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3813
        strcpy(device.mqtt_key, "no");
   14266:	64 e2       	ldi	r22, 0x24	; 36
   14268:	77 e0       	ldi	r23, 0x07	; 7
   1426a:	8e e1       	ldi	r24, 0x1E	; 30
   1426c:	9e e0       	ldi	r25, 0x0E	; 14
   1426e:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3814
        save_setup_network();
   14272:	0e 94 11 56 	call	0xac22	; 0xac22 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3815
        strcpy(str1, "TERM D2");
   14276:	67 e2       	ldi	r22, 0x27	; 39
   14278:	77 e0       	ldi	r23, 0x07	; 7
   1427a:	ce 01       	movw	r24, r28
   1427c:	88 5b       	subi	r24, 0xB8	; 184
   1427e:	9f 4f       	sbci	r25, 0xFF	; 255
   14280:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3816
        device_set_name(str1);
   14284:	ce 01       	movw	r24, r28
   14286:	88 5b       	subi	r24, 0xB8	; 184
   14288:	9f 4f       	sbci	r25, 0xFF	; 255
   1428a:	0e 94 e9 55 	call	0xabd2	; 0xabd2 <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3818
        char hostname[10];
        device_get_name(hostname);
   1428e:	c3 01       	movw	r24, r6
   14290:	0e 94 e4 70 	call	0xe1c8	; 0xe1c8 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3819
        default_ring = NO_DEFAULT_RING;
   14294:	10 93 64 0b 	sts	0x0B64, r17	; 0x800b64 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2232
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
   14298:	6f ef       	ldi	r22, 0xFF	; 255
   1429a:	8c e5       	ldi	r24, 0x5C	; 92
   1429c:	90 e0       	ldi	r25, 0x00	; 0
   1429e:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3821
        device_set_name(str1);
        char hostname[10];
        device_get_name(hostname);
        default_ring = NO_DEFAULT_RING;
        set_default_ring(default_ring);
        EEPROM.write(my_brightness_values, 50);
   142a2:	62 e3       	ldi	r22, 0x32	; 50
   142a4:	8e e5       	ldi	r24, 0x5E	; 94
   142a6:	90 e0       	ldi	r25, 0x00	; 0
   142a8:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3822
        EEPROM.write(my_brightness_mode, 0);
   142ac:	60 e0       	ldi	r22, 0x00	; 0
   142ae:	8f e5       	ldi	r24, 0x5F	; 95
   142b0:	90 e0       	ldi	r25, 0x00	; 0
   142b2:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3823
        EEPROM.write(my_display_auto_shutdown, 60);
   142b6:	6c e3       	ldi	r22, 0x3C	; 60
   142b8:	80 e6       	ldi	r24, 0x60	; 96
   142ba:	90 e0       	ldi	r25, 0x00	; 0
   142bc:	0e 94 ba 53 	call	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
   142c0:	52 cd       	rjmp	.-1372   	; 0x13d66 <setup+0x6ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3827
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
   142c2:	67 e9       	ldi	r22, 0x97	; 151
   142c4:	7d e5       	ldi	r23, 0x5D	; 93
   142c6:	ce 01       	movw	r24, r28
   142c8:	88 5b       	subi	r24, 0xB8	; 184
   142ca:	9f 4f       	sbci	r25, 0xFF	; 255
   142cc:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3828
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   142d0:	ee 24       	eor	r14, r14
   142d2:	ea 94       	dec	r14
   142d4:	fe 2c       	mov	r15, r14
   142d6:	00 ee       	ldi	r16, 0xE0	; 224
   142d8:	17 e0       	ldi	r17, 0x07	; 7
   142da:	21 e0       	ldi	r18, 0x01	; 1
   142dc:	46 e4       	ldi	r20, 0x46	; 70
   142de:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3861
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   142e0:	6e e1       	ldi	r22, 0x1E	; 30
   142e2:	70 e0       	ldi	r23, 0x00	; 0
   142e4:	66 c0       	rjmp	.+204    	; 0x143b2 <setup+0xcfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3833
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
   142e6:	c8 5c       	subi	r28, 0xC8	; 200
   142e8:	de 4f       	sbci	r29, 0xFE	; 254
   142ea:	f8 81       	ld	r31, Y
   142ec:	c8 53       	subi	r28, 0x38	; 56
   142ee:	d1 40       	sbci	r29, 0x01	; 1
   142f0:	f3 30       	cpi	r31, 0x03	; 3
   142f2:	09 f0       	breq	.+2      	; 0x142f6 <setup+0xc3e>
   142f4:	79 c0       	rjmp	.+242    	; 0x143e8 <setup+0xd30>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50



void SRAM_23LC::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
   142f6:	61 e0       	ldi	r22, 0x01	; 1
   142f8:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <SRAM+0x8>
   142fc:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
   14300:	61 e0       	ldi	r22, 0x01	; 1
   14302:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <SRAM+0x8>
   14306:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
   1430a:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <SRAM>
   1430e:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <SRAM+0x1>
   14312:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <SoftSPIB::begin()>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   14316:	60 e0       	ldi	r22, 0x00	; 0
   14318:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <SRAM+0x8>
   1431c:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   14320:	61 e0       	ldi	r22, 0x01	; 1
   14322:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <SRAM>
   14326:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <SRAM+0x1>
   1432a:	0e 94 eb 63 	call	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  pinMode(_chipSelect, OUTPUT);

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
   1432e:	60 e4       	ldi	r22, 0x40	; 64
   14330:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <SRAM>
   14334:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <SRAM+0x1>
   14338:	0e 94 eb 63 	call	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   1433c:	61 e0       	ldi	r22, 0x01	; 1
   1433e:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <SRAM+0x8>
   14342:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3836
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
   14346:	4b ea       	ldi	r20, 0xAB	; 171
   14348:	60 e0       	ldi	r22, 0x00	; 0
   1434a:	70 e0       	ldi	r23, 0x00	; 0
   1434c:	cb 01       	movw	r24, r22
   1434e:	0e 94 db b8 	call	0x171b6	; 0x171b6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.217]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3837
      if (SRAM.readByte(0) == 0xAB)
   14352:	60 e0       	ldi	r22, 0x00	; 0
   14354:	70 e0       	ldi	r23, 0x00	; 0
   14356:	cb 01       	movw	r24, r22
   14358:	0e 94 17 b9 	call	0x1722e	; 0x1722e <SRAM_23LC::readByte(unsigned long) [clone .constprop.215]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3839
      {
        strcpy_P(str1, text_test_ram);
   1435c:	6a e8       	ldi	r22, 0x8A	; 138
   1435e:	7d e5       	ldi	r23, 0x5D	; 93
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3837
    /// test SRAM
    if (init == 3)
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
   14360:	8b 3a       	cpi	r24, 0xAB	; 171
   14362:	69 f5       	brne	.+90     	; 0x143be <setup+0xd06>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3839
      {
        strcpy_P(str1, text_test_ram);
   14364:	ce 01       	movw	r24, r28
   14366:	88 5b       	subi	r24, 0xB8	; 184
   14368:	9f 4f       	sbci	r25, 0xFF	; 255
   1436a:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3840
        strcat(str1, " init ...");
   1436e:	6f e2       	ldi	r22, 0x2F	; 47
   14370:	77 e0       	ldi	r23, 0x07	; 7
   14372:	ce 01       	movw	r24, r28
   14374:	88 5b       	subi	r24, 0xB8	; 184
   14376:	9f 4f       	sbci	r25, 0xFF	; 255
   14378:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3841
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1437c:	ee 24       	eor	r14, r14
   1437e:	ea 94       	dec	r14
   14380:	fe 2c       	mov	r15, r14
   14382:	00 ee       	ldi	r16, 0xE0	; 224
   14384:	17 e0       	ldi	r17, 0x07	; 7
   14386:	21 e0       	ldi	r18, 0x01	; 1
   14388:	40 e5       	ldi	r20, 0x50	; 80
   1438a:	50 e0       	ldi	r21, 0x00	; 0
   1438c:	6e e1       	ldi	r22, 0x1E	; 30
   1438e:	70 e0       	ldi	r23, 0x00	; 0
   14390:	ce 01       	movw	r24, r28
   14392:	88 5b       	subi	r24, 0xB8	; 184
   14394:	9f 4f       	sbci	r25, 0xFF	; 255
   14396:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3854
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
   1439a:	67 e8       	ldi	r22, 0x87	; 135
   1439c:	7d e5       	ldi	r23, 0x5D	; 93
   1439e:	ce 01       	movw	r24, r28
   143a0:	88 5b       	subi	r24, 0xB8	; 184
   143a2:	9f 4f       	sbci	r25, 0xFF	; 255
   143a4:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3855
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   143a8:	21 e0       	ldi	r18, 0x01	; 1
   143aa:	40 e5       	ldi	r20, 0x50	; 80
   143ac:	50 e0       	ldi	r21, 0x00	; 0
   143ae:	62 ed       	ldi	r22, 0xD2	; 210
   143b0:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3861
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   143b2:	ce 01       	movw	r24, r28
   143b4:	88 5b       	subi	r24, 0xB8	; 184
   143b6:	9f 4f       	sbci	r25, 0xFF	; 255
   143b8:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
   143bc:	d4 cc       	rjmp	.-1624   	; 0x13d66 <setup+0x6ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3859
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
   143be:	ce 01       	movw	r24, r28
   143c0:	88 5b       	subi	r24, 0xB8	; 184
   143c2:	9f 4f       	sbci	r25, 0xFF	; 255
   143c4:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3860
        strcat_P(str1, text_err);
   143c8:	6a e0       	ldi	r22, 0x0A	; 10
   143ca:	7e e5       	ldi	r23, 0x5E	; 94
   143cc:	ce 01       	movw	r24, r28
   143ce:	88 5b       	subi	r24, 0xB8	; 184
   143d0:	9f 4f       	sbci	r25, 0xFF	; 255
   143d2:	0e 94 e8 d4 	call	0x1a9d0	; 0x1a9d0 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3861
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   143d6:	ee 24       	eor	r14, r14
   143d8:	ea 94       	dec	r14
   143da:	fe 2c       	mov	r15, r14
   143dc:	00 e0       	ldi	r16, 0x00	; 0
   143de:	18 ef       	ldi	r17, 0xF8	; 248
   143e0:	21 e0       	ldi	r18, 0x01	; 1
   143e2:	40 e5       	ldi	r20, 0x50	; 80
   143e4:	50 e0       	ldi	r21, 0x00	; 0
   143e6:	7c cf       	rjmp	.-264    	; 0x142e0 <setup+0xc28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3866
      }
    }
    ///
    /// init EEPROMKY
    if (init == 4)
   143e8:	c8 5c       	subi	r28, 0xC8	; 200
   143ea:	de 4f       	sbci	r29, 0xFE	; 254
   143ec:	28 81       	ld	r18, Y
   143ee:	c8 53       	subi	r28, 0x38	; 56
   143f0:	d1 40       	sbci	r29, 0x01	; 1
   143f2:	24 30       	cpi	r18, 0x04	; 4
   143f4:	09 f0       	breq	.+2      	; 0x143f8 <setup+0xd40>
   143f6:	8f c5       	rjmp	.+2846   	; 0x14f16 <setup+0x185e>
begin():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:31
}


void EEPROM_CAT25::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
   143f8:	61 e0       	ldi	r22, 0x01	; 1
   143fa:	80 91 40 0e 	lds	r24, 0x0E40	; 0x800e40 <SROM+0xa>
   143fe:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:32
  pinMode(_chipSelect, OUTPUT);
   14402:	61 e0       	ldi	r22, 0x01	; 1
   14404:	80 91 40 0e 	lds	r24, 0x0E40	; 0x800e40 <SROM+0xa>
   14408:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:34

  _spi->begin();
   1440c:	80 91 36 0e 	lds	r24, 0x0E36	; 0x800e36 <SROM>
   14410:	90 91 37 0e 	lds	r25, 0x0E37	; 0x800e37 <SROM+0x1>
   14414:	0e 94 8a 3f 	call	0x7f14	; 0x7f14 <SoftSPIB::begin()>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90
}

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
   14418:	80 91 3a 0e 	lds	r24, 0x0E3A	; 0x800e3a <SROM+0x4>
   1441c:	90 91 3b 0e 	lds	r25, 0x0E3B	; 0x800e3b <SROM+0x5>
   14420:	a0 91 3c 0e 	lds	r26, 0x0E3C	; 0x800e3c <SROM+0x6>
   14424:	b0 91 3d 0e 	lds	r27, 0x0E3D	; 0x800e3d <SROM+0x7>
   14428:	89 2b       	or	r24, r25
   1442a:	8a 2b       	or	r24, r26
   1442c:	8b 2b       	or	r24, r27
   1442e:	a9 f0       	breq	.+42     	; 0x1445a <setup+0xda2>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
   14430:	0e 94 c4 ba 	call	0x17588	; 0x17588 <EEPROM_CAT25::getStatusRegister() [clone .constprop.69]>
   14434:	80 fd       	sbrc	r24, 0
   14436:	fc cf       	rjmp	.-8      	; 0x14430 <setup+0xd78>
enableWrite():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:60
  return(true);
}

void EEPROM_CAT25::enableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WREN, 0);
   14438:	86 e0       	ldi	r24, 0x06	; 6
   1443a:	0e 94 7c ba 	call	0x174f8	; 0x174f8 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.70]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:61
  endCommand();
   1443e:	0e 94 77 ba 	call	0x174ee	; 0x174ee <EEPROM_CAT25::endCommand() [clone .constprop.72]>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  while (!isReady()) {
    yield();
  }

  enableWrite();
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
   14442:	82 e0       	ldi	r24, 0x02	; 2
   14444:	0e 94 7c ba 	call	0x174f8	; 0x174f8 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.70]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
   14448:	6a eb       	ldi	r22, 0xBA	; 186
   1444a:	80 91 36 0e 	lds	r24, 0x0E36	; 0x800e36 <SROM>
   1444e:	90 91 37 0e 	lds	r25, 0x0E37	; 0x800e37 <SROM+0x1>
   14452:	0e 94 eb 63 	call	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
   14456:	0e 94 77 ba 	call	0x174ee	; 0x174ee <EEPROM_CAT25::endCommand() [clone .constprop.72]>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
   1445a:	80 91 3a 0e 	lds	r24, 0x0E3A	; 0x800e3a <SROM+0x4>
   1445e:	90 91 3b 0e 	lds	r25, 0x0E3B	; 0x800e3b <SROM+0x5>
   14462:	a0 91 3c 0e 	lds	r26, 0x0E3C	; 0x800e3c <SROM+0x6>
   14466:	b0 91 3d 0e 	lds	r27, 0x0E3D	; 0x800e3d <SROM+0x7>
   1446a:	89 2b       	or	r24, r25
   1446c:	8a 2b       	or	r24, r26
   1446e:	8b 2b       	or	r24, r27
   14470:	61 f1       	breq	.+88     	; 0x144ca <setup+0xe12>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
   14472:	0e 94 c4 ba 	call	0x17588	; 0x17588 <EEPROM_CAT25::getStatusRegister() [clone .constprop.69]>
   14476:	80 fd       	sbrc	r24, 0
   14478:	fc cf       	rjmp	.-8      	; 0x14472 <setup+0xdba>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80

  while (!isReady()) {
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
   1447a:	83 e0       	ldi	r24, 0x03	; 3
   1447c:	0e 94 7c ba 	call	0x174f8	; 0x174f8 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.70]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   14480:	6f ef       	ldi	r22, 0xFF	; 255
   14482:	80 91 36 0e 	lds	r24, 0x0E36	; 0x800e36 <SROM>
   14486:	90 91 37 0e 	lds	r25, 0x0E37	; 0x800e37 <SROM+0x1>
   1448a:	0e 94 eb 63 	call	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
   1448e:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
   14490:	0e 94 77 ba 	call	0x174ee	; 0x174ee <EEPROM_CAT25::endCommand() [clone .constprop.72]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3870
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
   14494:	1a 3b       	cpi	r17, 0xBA	; 186
   14496:	c9 f4       	brne	.+50     	; 0x144ca <setup+0xe12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3872
      {
        strcpy_P(str1, text_test_eeprom);
   14498:	67 e7       	ldi	r22, 0x77	; 119
   1449a:	7d e5       	ldi	r23, 0x5D	; 93
   1449c:	ce 01       	movw	r24, r28
   1449e:	88 5b       	subi	r24, 0xB8	; 184
   144a0:	9f 4f       	sbci	r25, 0xFF	; 255
   144a2:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3873
        strcat_P(str1, text_ok);
   144a6:	67 e8       	ldi	r22, 0x87	; 135
   144a8:	7d e5       	ldi	r23, 0x5D	; 93
   144aa:	ce 01       	movw	r24, r28
   144ac:	88 5b       	subi	r24, 0xB8	; 184
   144ae:	9f 4f       	sbci	r25, 0xFF	; 255
   144b0:	0e 94 e8 d4 	call	0x1a9d0	; 0x1a9d0 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3874
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   144b4:	ee 24       	eor	r14, r14
   144b6:	ea 94       	dec	r14
   144b8:	fe 2c       	mov	r15, r14
   144ba:	00 ee       	ldi	r16, 0xE0	; 224
   144bc:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3880
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   144be:	21 e0       	ldi	r18, 0x01	; 1
   144c0:	4a e5       	ldi	r20, 0x5A	; 90
   144c2:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4028
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    {
      strcpy_P(str1, text_rest_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   144c4:	6e e1       	ldi	r22, 0x1E	; 30
   144c6:	70 e0       	ldi	r23, 0x00	; 0
   144c8:	46 c2       	rjmp	.+1164   	; 0x14956 <setup+0x129e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3878
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
   144ca:	67 e7       	ldi	r22, 0x77	; 119
   144cc:	7d e5       	ldi	r23, 0x5D	; 93
   144ce:	ce 01       	movw	r24, r28
   144d0:	88 5b       	subi	r24, 0xB8	; 184
   144d2:	9f 4f       	sbci	r25, 0xFF	; 255
   144d4:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3879
        strcat_P(str1, text_err);
   144d8:	6a e0       	ldi	r22, 0x0A	; 10
   144da:	7e e5       	ldi	r23, 0x5E	; 94
   144dc:	ce 01       	movw	r24, r28
   144de:	88 5b       	subi	r24, 0xB8	; 184
   144e0:	9f 4f       	sbci	r25, 0xFF	; 255
   144e2:	0e 94 e8 d4 	call	0x1a9d0	; 0x1a9d0 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3880
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   144e6:	ee 24       	eor	r14, r14
   144e8:	ea 94       	dec	r14
   144ea:	fe 2c       	mov	r15, r14
   144ec:	00 e0       	ldi	r16, 0x00	; 0
   144ee:	18 ef       	ldi	r17, 0xF8	; 248
   144f0:	e6 cf       	rjmp	.-52     	; 0x144be <setup+0xe06>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3887
    }
    ///
    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
   144f2:	65 e6       	ldi	r22, 0x65	; 101
   144f4:	7d e5       	ldi	r23, 0x5D	; 93
   144f6:	ce 01       	movw	r24, r28
   144f8:	88 5b       	subi	r24, 0xB8	; 184
   144fa:	9f 4f       	sbci	r25, 0xFF	; 255
   144fc:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3888
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14500:	ee 24       	eor	r14, r14
   14502:	ea 94       	dec	r14
   14504:	fe 2c       	mov	r15, r14
   14506:	00 ee       	ldi	r16, 0xE0	; 224
   14508:	17 e0       	ldi	r17, 0x07	; 7
   1450a:	21 e0       	ldi	r18, 0x01	; 1
   1450c:	44 e6       	ldi	r20, 0x64	; 100
   1450e:	50 e0       	ldi	r21, 0x00	; 0
   14510:	6e e1       	ldi	r22, 0x1E	; 30
   14512:	70 e0       	ldi	r23, 0x00	; 0
   14514:	ce 01       	movw	r24, r28
   14516:	88 5b       	subi	r24, 0xB8	; 184
   14518:	9f 4f       	sbci	r25, 0xFF	; 255
   1451a:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
   1451e:	04 ee       	ldi	r16, 0xE4	; 228
   14520:	e0 2e       	mov	r14, r16
   14522:	0d e0       	ldi	r16, 0x0D	; 13
   14524:	f0 2e       	mov	r15, r16
   14526:	0e e6       	ldi	r16, 0x6E	; 110
   14528:	10 e0       	ldi	r17, 0x00	; 0
load_setup_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:25

///////////////////////////////////////// MQTT network funkce //////////////////////////////////////////////////////
//
void load_setup_network(void)
{
  for (uint8_t m = 0; m < 6; m++) device.mac[m] = EEPROM.read(device_mac + m);
   1452a:	c8 01       	movw	r24, r16
   1452c:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   14530:	d7 01       	movw	r26, r14
   14532:	8d 93       	st	X+, r24
   14534:	7d 01       	movw	r14, r26
   14536:	0f 5f       	subi	r16, 0xFF	; 255
   14538:	1f 4f       	sbci	r17, 0xFF	; 255
   1453a:	04 37       	cpi	r16, 0x74	; 116
   1453c:	11 05       	cpc	r17, r1
   1453e:	a9 f7       	brne	.-22     	; 0x1452a <setup+0xe72>
   14540:	ba ee       	ldi	r27, 0xEA	; 234
   14542:	eb 2e       	mov	r14, r27
   14544:	bd e0       	ldi	r27, 0x0D	; 13
   14546:	fb 2e       	mov	r15, r27
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:26
  for (uint8_t m = 0; m < 4; m++) device.myIP[m] = EEPROM.read(device_ip + m);
   14548:	c8 01       	movw	r24, r16
   1454a:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   1454e:	f7 01       	movw	r30, r14
   14550:	81 93       	st	Z+, r24
   14552:	7f 01       	movw	r14, r30
   14554:	0f 5f       	subi	r16, 0xFF	; 255
   14556:	1f 4f       	sbci	r17, 0xFF	; 255
   14558:	08 37       	cpi	r16, 0x78	; 120
   1455a:	11 05       	cpc	r17, r1
   1455c:	a9 f7       	brne	.-22     	; 0x14548 <setup+0xe90>
   1455e:	ae ee       	ldi	r26, 0xEE	; 238
   14560:	ea 2e       	mov	r14, r26
   14562:	ad e0       	ldi	r26, 0x0D	; 13
   14564:	fa 2e       	mov	r15, r26
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:27
  for (uint8_t m = 0; m < 4; m++) device.myMASK[m] = EEPROM.read(device_mask + m);
   14566:	c8 01       	movw	r24, r16
   14568:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   1456c:	d7 01       	movw	r26, r14
   1456e:	8d 93       	st	X+, r24
   14570:	7d 01       	movw	r14, r26
   14572:	0f 5f       	subi	r16, 0xFF	; 255
   14574:	1f 4f       	sbci	r17, 0xFF	; 255
   14576:	0c 37       	cpi	r16, 0x7C	; 124
   14578:	11 05       	cpc	r17, r1
   1457a:	a9 f7       	brne	.-22     	; 0x14566 <setup+0xeae>
   1457c:	e6 ef       	ldi	r30, 0xF6	; 246
   1457e:	ce 2e       	mov	r12, r30
   14580:	ed e0       	ldi	r30, 0x0D	; 13
   14582:	de 2e       	mov	r13, r30
   14584:	f0 e8       	ldi	r31, 0x80	; 128
   14586:	ef 2e       	mov	r14, r31
   14588:	f1 2c       	mov	r15, r1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:28
  for (uint8_t m = 0; m < 4; m++) device.myGW[m] = EEPROM.read(device_gw + m);
   1458a:	c7 01       	movw	r24, r14
   1458c:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   14590:	f6 01       	movw	r30, r12
   14592:	81 93       	st	Z+, r24
   14594:	6f 01       	movw	r12, r30
   14596:	ff ef       	ldi	r31, 0xFF	; 255
   14598:	ef 1a       	sub	r14, r31
   1459a:	ff 0a       	sbc	r15, r31
   1459c:	24 e8       	ldi	r18, 0x84	; 132
   1459e:	e2 16       	cp	r14, r18
   145a0:	f1 04       	cpc	r15, r1
   145a2:	99 f7       	brne	.-26     	; 0x1458a <setup+0xed2>
   145a4:	72 ef       	ldi	r23, 0xF2	; 242
   145a6:	c7 2e       	mov	r12, r23
   145a8:	7d e0       	ldi	r23, 0x0D	; 13
   145aa:	d7 2e       	mov	r13, r23
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:29
  for (uint8_t m = 0; m < 4; m++) device.myDNS[m] = EEPROM.read(device_dns + m);
   145ac:	c8 01       	movw	r24, r16
   145ae:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   145b2:	d6 01       	movw	r26, r12
   145b4:	8d 93       	st	X+, r24
   145b6:	6d 01       	movw	r12, r26
   145b8:	0f 5f       	subi	r16, 0xFF	; 255
   145ba:	1f 4f       	sbci	r17, 0xFF	; 255
   145bc:	00 38       	cpi	r16, 0x80	; 128
   145be:	11 05       	cpc	r17, r1
   145c0:	a9 f7       	brne	.-22     	; 0x145ac <setup+0xef4>
   145c2:	6a ef       	ldi	r22, 0xFA	; 250
   145c4:	c6 2e       	mov	r12, r22
   145c6:	6d e0       	ldi	r22, 0x0D	; 13
   145c8:	d6 2e       	mov	r13, r22
   145ca:	04 e6       	ldi	r16, 0x64	; 100
   145cc:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:30
  for (uint8_t m = 0; m < 9; m++) device.nazev[m] = EEPROM.read(device_nazev + m);
   145ce:	c8 01       	movw	r24, r16
   145d0:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   145d4:	f6 01       	movw	r30, r12
   145d6:	81 93       	st	Z+, r24
   145d8:	6f 01       	movw	r12, r30
   145da:	0f 5f       	subi	r16, 0xFF	; 255
   145dc:	1f 4f       	sbci	r17, 0xFF	; 255
   145de:	0d 36       	cpi	r16, 0x6D	; 109
   145e0:	11 05       	cpc	r17, r1
   145e2:	a9 f7       	brne	.-22     	; 0x145ce <setup+0xf16>
   145e4:	04 e0       	ldi	r16, 0x04	; 4
   145e6:	1e e0       	ldi	r17, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:31
  for (uint8_t m = 0; m < 4; m++) device.mqtt_server[m] = EEPROM.read(device_mqtt_server + m);
   145e8:	c7 01       	movw	r24, r14
   145ea:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   145ee:	d8 01       	movw	r26, r16
   145f0:	8d 93       	st	X+, r24
   145f2:	8d 01       	movw	r16, r26
   145f4:	bf ef       	ldi	r27, 0xFF	; 255
   145f6:	eb 1a       	sub	r14, r27
   145f8:	fb 0a       	sbc	r15, r27
   145fa:	e8 e8       	ldi	r30, 0x88	; 136
   145fc:	ee 16       	cp	r14, r30
   145fe:	f1 04       	cpc	r15, r1
   14600:	99 f7       	brne	.-26     	; 0x145e8 <setup+0xf30>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:32
  device.mqtt_port = (EEPROM.read(device_mqtt_port) << 8) + EEPROM.read(device_mqtt_port + 1);
   14602:	88 e8       	ldi	r24, 0x88	; 136
   14604:	90 e0       	ldi	r25, 0x00	; 0
   14606:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   1460a:	18 2f       	mov	r17, r24
   1460c:	89 e8       	ldi	r24, 0x89	; 137
   1460e:	90 e0       	ldi	r25, 0x00	; 0
   14610:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   14614:	21 2f       	mov	r18, r17
   14616:	30 e0       	ldi	r19, 0x00	; 0
   14618:	32 2f       	mov	r19, r18
   1461a:	22 27       	eor	r18, r18
   1461c:	82 0f       	add	r24, r18
   1461e:	93 2f       	mov	r25, r19
   14620:	91 1d       	adc	r25, r1
   14622:	90 93 09 0e 	sts	0x0E09, r25	; 0x800e09 <device+0x25>
   14626:	80 93 08 0e 	sts	0x0E08, r24	; 0x800e08 <device+0x24>
   1462a:	5a e0       	ldi	r21, 0x0A	; 10
   1462c:	e5 2e       	mov	r14, r21
   1462e:	5e e0       	ldi	r21, 0x0E	; 14
   14630:	f5 2e       	mov	r15, r21
   14632:	0a e8       	ldi	r16, 0x8A	; 138
   14634:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:33
  for (uint8_t m = 0; m < 20; m++) device.mqtt_user[m] = EEPROM.read(device_mqtt_user + m);
   14636:	c8 01       	movw	r24, r16
   14638:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   1463c:	d7 01       	movw	r26, r14
   1463e:	8d 93       	st	X+, r24
   14640:	7d 01       	movw	r14, r26
   14642:	0f 5f       	subi	r16, 0xFF	; 255
   14644:	1f 4f       	sbci	r17, 0xFF	; 255
   14646:	0e 39       	cpi	r16, 0x9E	; 158
   14648:	11 05       	cpc	r17, r1
   1464a:	a9 f7       	brne	.-22     	; 0x14636 <setup+0xf7e>
   1464c:	9e e1       	ldi	r25, 0x1E	; 30
   1464e:	e9 2e       	mov	r14, r25
   14650:	9e e0       	ldi	r25, 0x0E	; 14
   14652:	f9 2e       	mov	r15, r25
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:34
  for (uint8_t m = 0; m < 20; m++) device.mqtt_key[m] = EEPROM.read(device_mqtt_key + m);
   14654:	c8 01       	movw	r24, r16
   14656:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   1465a:	f7 01       	movw	r30, r14
   1465c:	81 93       	st	Z+, r24
   1465e:	7f 01       	movw	r14, r30
   14660:	0f 5f       	subi	r16, 0xFF	; 255
   14662:	1f 4f       	sbci	r17, 0xFF	; 255
   14664:	02 3b       	cpi	r16, 0xB2	; 178
   14666:	11 05       	cpc	r17, r1
   14668:	a9 f7       	brne	.-22     	; 0x14654 <setup+0xf9c>
   1466a:	82 e3       	ldi	r24, 0x32	; 50
   1466c:	e8 2e       	mov	r14, r24
   1466e:	8e e0       	ldi	r24, 0x0E	; 14
   14670:	f8 2e       	mov	r15, r24
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:35
  for (uint8_t m = 0; m < 4; m++) device.ntp_server[m] = EEPROM.read(device_ntp_server + m);
   14672:	c8 01       	movw	r24, r16
   14674:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   14678:	d7 01       	movw	r26, r14
   1467a:	8d 93       	st	X+, r24
   1467c:	7d 01       	movw	r14, r26
   1467e:	0f 5f       	subi	r16, 0xFF	; 255
   14680:	1f 4f       	sbci	r17, 0xFF	; 255
   14682:	06 3b       	cpi	r16, 0xB6	; 182
   14684:	11 05       	cpc	r17, r1
   14686:	a9 f7       	brne	.-22     	; 0x14672 <setup+0xfba>
   14688:	41 eb       	ldi	r20, 0xB1	; 177
   1468a:	5b e0       	ldi	r21, 0x0B	; 11
   1468c:	26 e0       	ldi	r18, 0x06	; 6
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3894
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
   1468e:	60 e2       	ldi	r22, 0x20	; 32
   14690:	7e e4       	ldi	r23, 0x4E	; 78
load_setup_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:35
   14692:	90 e0       	ldi	r25, 0x00	; 0
   14694:	80 e0       	ldi	r24, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3894
   14696:	fc 01       	movw	r30, r24
   14698:	ee 0f       	add	r30, r30
   1469a:	ff 1f       	adc	r31, r31
   1469c:	e4 0f       	add	r30, r20
   1469e:	f5 1f       	adc	r31, r21
   146a0:	70 87       	std	Z+8, r23	; 0x08
   146a2:	67 83       	std	Z+7, r22	; 0x07
   146a4:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3893
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
   146a6:	8a 30       	cpi	r24, 0x0A	; 10
   146a8:	91 05       	cpc	r25, r1
   146aa:	a9 f7       	brne	.-22     	; 0x14696 <setup+0xfde>
   146ac:	21 50       	subi	r18, 0x01	; 1
   146ae:	42 5e       	subi	r20, 0xE2	; 226
   146b0:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3892
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   146b2:	21 11       	cpse	r18, r1
   146b4:	ee cf       	rjmp	.-36     	; 0x14692 <setup+0xfda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3897
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
   146b6:	10 92 66 0b 	sts	0x0B66, r1	; 0x800b66 <last_output_update>
   146ba:	10 92 67 0b 	sts	0x0B67, r1	; 0x800b67 <last_output_update+0x1>
   146be:	10 92 68 0b 	sts	0x0B68, r1	; 0x800b68 <last_output_update+0x2>
   146c2:	10 92 69 0b 	sts	0x0B69, r1	; 0x800b69 <last_output_update+0x3>
   146c6:	10 92 6a 0b 	sts	0x0B6A, r1	; 0x800b6a <last_output_update+0x4>
   146ca:	b7 e6       	ldi	r27, 0x67	; 103
   146cc:	cb 2e       	mov	r12, r27
   146ce:	d1 2c       	mov	r13, r1
   146d0:	e1 2c       	mov	r14, r1
   146d2:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3899

      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   146d4:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3901
      {
        remote_tds_set_data(idx, 0);
   146d6:	70 e0       	ldi	r23, 0x00	; 0
   146d8:	60 e0       	ldi	r22, 0x00	; 0
   146da:	81 2f       	mov	r24, r17
   146dc:	0e 94 2d 4e 	call	0x9c5a	; 0x9c5a <remote_tds_set_data(unsigned char, int)>
remote_tds_set_type():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2153
///
void remote_tds_set_type(uint8_t idx, uint8_t type)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_type + (ram_remote_tds_store_size * idx), type);
   146e0:	4f ef       	ldi	r20, 0xFF	; 255
   146e2:	c7 01       	movw	r24, r14
   146e4:	b6 01       	movw	r22, r12
   146e6:	0e 94 db b8 	call	0x171b6	; 0x171b6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.217]>
remote_tds_set_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2198
}
uint8_t remote_tds_set_last_update(uint8_t idx, uint8_t value)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), value);
   146ea:	c7 01       	movw	r24, r14
   146ec:	b6 01       	movw	r22, r12
   146ee:	61 50       	subi	r22, 0x01	; 1
   146f0:	71 09       	sbc	r23, r1
   146f2:	81 09       	sbc	r24, r1
   146f4:	91 09       	sbc	r25, r1
   146f6:	4f ef       	ldi	r20, 0xFF	; 255
   146f8:	0e 94 db b8 	call	0x171b6	; 0x171b6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.217]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3899
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;

      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   146fc:	1f 5f       	subi	r17, 0xFF	; 255
   146fe:	b4 e0       	ldi	r27, 0x04	; 4
   14700:	cb 0e       	add	r12, r27
   14702:	d1 1c       	adc	r13, r1
   14704:	e1 1c       	adc	r14, r1
   14706:	f1 1c       	adc	r15, r1
   14708:	1a 30       	cpi	r17, 0x0A	; 10
   1470a:	29 f7       	brne	.-54     	; 0x146d6 <setup+0x101e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3689
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
   1470c:	c8 5c       	subi	r28, 0xC8	; 200
   1470e:	de 4f       	sbci	r29, 0xFE	; 254
   14710:	e8 81       	ld	r30, Y
   14712:	c8 53       	subi	r28, 0x38	; 56
   14714:	d1 40       	sbci	r29, 0x01	; 1
   14716:	ef 5f       	subi	r30, 0xFF	; 255
   14718:	c8 5c       	subi	r28, 0xC8	; 200
   1471a:	de 4f       	sbci	r29, 0xFE	; 254
   1471c:	e8 83       	st	Y, r30
   1471e:	c8 53       	subi	r28, 0x38	; 56
   14720:	d1 40       	sbci	r29, 0x01	; 1
   14722:	c7 5c       	subi	r28, 0xC7	; 199
   14724:	de 4f       	sbci	r29, 0xFE	; 254
   14726:	88 81       	ld	r24, Y
   14728:	99 81       	ldd	r25, Y+1	; 0x01
   1472a:	c9 53       	subi	r28, 0x39	; 57
   1472c:	d1 40       	sbci	r29, 0x01	; 1
   1472e:	0f 96       	adiw	r24, 0x0f	; 15
   14730:	c7 5c       	subi	r28, 0xC7	; 199
   14732:	de 4f       	sbci	r29, 0xFE	; 254
   14734:	99 83       	std	Y+1, r25	; 0x01
   14736:	88 83       	st	Y, r24
   14738:	c9 53       	subi	r28, 0x39	; 57
   1473a:	d1 40       	sbci	r29, 0x01	; 1
   1473c:	e0 31       	cpi	r30, 0x10	; 16
   1473e:	09 f0       	breq	.+2      	; 0x14742 <setup+0x108a>
   14740:	a7 c9       	rjmp	.-3250   	; 0x13a90 <setup+0x3d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4097
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
   14742:	64 ef       	ldi	r22, 0xF4	; 244
   14744:	71 e0       	ldi	r23, 0x01	; 1
   14746:	80 e0       	ldi	r24, 0x00	; 0
   14748:	90 e0       	ldi	r25, 0x00	; 0
   1474a:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4098
  MenuPrepareStyle();
   1474e:	0e 94 78 87 	call	0x10ef0	; 0x10ef0 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4099
  draw_menu(true);
   14752:	81 e0       	ldi	r24, 0x01	; 1
   14754:	0e 94 2b 88 	call	0x11056	; 0x11056 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4100
  a2d_run_now = 1;
   14758:	81 e0       	ldi	r24, 0x01	; 1
   1475a:	80 93 68 0c 	sts	0x0C68, r24	; 0x800c68 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4102

}
   1475e:	c0 5c       	subi	r28, 0xC0	; 192
   14760:	de 4f       	sbci	r29, 0xFE	; 254
   14762:	0f b6       	in	r0, 0x3f	; 63
   14764:	f8 94       	cli
   14766:	de bf       	out	0x3e, r29	; 62
   14768:	0f be       	out	0x3f, r0	; 63
   1476a:	cd bf       	out	0x3d, r28	; 61
   1476c:	df 91       	pop	r29
   1476e:	cf 91       	pop	r28
   14770:	1f 91       	pop	r17
   14772:	0f 91       	pop	r16
   14774:	ff 90       	pop	r15
   14776:	ef 90       	pop	r14
   14778:	df 90       	pop	r13
   1477a:	cf 90       	pop	r12
   1477c:	bf 90       	pop	r11
   1477e:	af 90       	pop	r10
   14780:	9f 90       	pop	r9
   14782:	8f 90       	pop	r8
   14784:	7f 90       	pop	r7
   14786:	6f 90       	pop	r6
   14788:	5f 90       	pop	r5
   1478a:	4f 90       	pop	r4
   1478c:	3f 90       	pop	r3
   1478e:	2f 90       	pop	r2
   14790:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3910
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
   14792:	69 e5       	ldi	r22, 0x59	; 89
   14794:	7d e5       	ldi	r23, 0x5D	; 93
   14796:	ce 01       	movw	r24, r28
   14798:	88 5b       	subi	r24, 0xB8	; 184
   1479a:	9f 4f       	sbci	r25, 0xFF	; 255
   1479c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3911
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   147a0:	ee 24       	eor	r14, r14
   147a2:	ea 94       	dec	r14
   147a4:	fe 2c       	mov	r15, r14
   147a6:	00 ee       	ldi	r16, 0xE0	; 224
   147a8:	17 e0       	ldi	r17, 0x07	; 7
   147aa:	21 e0       	ldi	r18, 0x01	; 1
   147ac:	4e e6       	ldi	r20, 0x6E	; 110
   147ae:	50 e0       	ldi	r21, 0x00	; 0
   147b0:	6e e1       	ldi	r22, 0x1E	; 30
   147b2:	70 e0       	ldi	r23, 0x00	; 0
   147b4:	ce 01       	movw	r24, r28
   147b6:	88 5b       	subi	r24, 0xB8	; 184
   147b8:	9f 4f       	sbci	r25, 0xFF	; 255
   147ba:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   147be:	20 91 98 0f 	lds	r18, 0x0F98	; 0x800f98 <my_lcd+0x14>
   147c2:	30 91 99 0f 	lds	r19, 0x0F99	; 0x800f99 <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
   147c6:	40 91 96 0f 	lds	r20, 0x0F96	; 0x800f96 <my_lcd+0x12>
   147ca:	50 91 97 0f 	lds	r21, 0x0F97	; 0x800f97 <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
   147ce:	90 91 9a 0f 	lds	r25, 0x0F9A	; 0x800f9a <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:89
}


void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
   147d2:	e0 91 78 0f 	lds	r30, 0x0F78	; 0x800f78 <my_touch+0x17>
   147d6:	f0 91 79 0f 	lds	r31, 0x0F79	; 0x800f79 <my_touch+0x18>
   147da:	80 81       	ld	r24, Z
   147dc:	60 91 81 0f 	lds	r22, 0x0F81	; 0x800f81 <my_touch+0x20>
   147e0:	86 2b       	or	r24, r22
   147e2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:90
	TCLK_HIGH; 
   147e4:	e0 91 74 0f 	lds	r30, 0x0F74	; 0x800f74 <my_touch+0x13>
   147e8:	f0 91 75 0f 	lds	r31, 0x0F75	; 0x800f75 <my_touch+0x14>
   147ec:	80 81       	ld	r24, Z
   147ee:	60 91 7f 0f 	lds	r22, 0x0F7F	; 0x800f7f <my_touch+0x1e>
   147f2:	86 2b       	or	r24, r22
   147f4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:91
	TCS_HIGH;
   147f6:	e0 91 72 0f 	lds	r30, 0x0F72	; 0x800f72 <my_touch+0x11>
   147fa:	f0 91 73 0f 	lds	r31, 0x0F73	; 0x800f73 <my_touch+0x12>
   147fe:	80 81       	ld	r24, Z
   14800:	60 91 7e 0f 	lds	r22, 0x0F7E	; 0x800f7e <my_touch+0x1d>
   14804:	86 2b       	or	r24, r22
   14806:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:92
	SDCS_HIGH;
   14808:	e0 91 7c 0f 	lds	r30, 0x0F7C	; 0x800f7c <my_touch+0x1b>
   1480c:	f0 91 7d 0f 	lds	r31, 0x0F7D	; 0x800f7d <my_touch+0x1c>
   14810:	80 81       	ld	r24, Z
   14812:	60 91 83 0f 	lds	r22, 0x0F83	; 0x800f83 <my_touch+0x22>
   14816:	86 2b       	or	r24, r22
   14818:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:93
	wid = w;
   1481a:	50 93 6a 0f 	sts	0x0F6A, r21	; 0x800f6a <my_touch+0x9>
   1481e:	40 93 69 0f 	sts	0x0F69, r20	; 0x800f69 <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:94
	heig = h;	
   14822:	30 93 6c 0f 	sts	0x0F6C, r19	; 0x800f6c <my_touch+0xb>
   14826:	20 93 6b 0f 	sts	0x0F6B, r18	; 0x800f6b <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:416
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
   1482a:	90 93 6f 0f 	sts	0x0F6F, r25	; 0x800f6f <my_touch+0xe>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:96
	TCS_HIGH;
	SDCS_HIGH;
	wid = w;
	heig = h;	
	LCD_Set_Rotation(r);
	TP_SetBacklight(10);
   1482e:	8a e0       	ldi	r24, 0x0A	; 10
   14830:	0e 94 d9 ad 	call	0x15bb2	; 0x15bb2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.227]>
TP_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:406
	return touch_statue&TP_PRES_DOWN;
}

void LCDWIKI_TOUCH::TP_Set_Rotation(uint8_t val)
{
	touch_rotation = val;
   14834:	83 e0       	ldi	r24, 0x03	; 3
   14836:	80 93 6e 0f 	sts	0x0F6E, r24	; 0x800f6e <my_touch+0xd>
   1483a:	1b e0       	ldi	r17, 0x0B	; 11
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3916
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
      my_touch.TP_Set_Rotation(3);
      for (uint8_t i = 1; i < 8; i++)
      {
        digitalWrite(LED, LOW);
   1483c:	60 e0       	ldi	r22, 0x00	; 0
   1483e:	88 e0       	ldi	r24, 0x08	; 8
   14840:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3917
        my_touch.TP_SetBacklight(i * 11);
   14844:	81 2f       	mov	r24, r17
   14846:	0e 94 d9 ad 	call	0x15bb2	; 0x15bb2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.227]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3918
        delay(100);
   1484a:	64 e6       	ldi	r22, 0x64	; 100
   1484c:	70 e0       	ldi	r23, 0x00	; 0
   1484e:	80 e0       	ldi	r24, 0x00	; 0
   14850:	90 e0       	ldi	r25, 0x00	; 0
   14852:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3919
        digitalWrite(LED, HIGH);
   14856:	61 e0       	ldi	r22, 0x01	; 1
   14858:	88 e0       	ldi	r24, 0x08	; 8
   1485a:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3920
        delay(100);
   1485e:	64 e6       	ldi	r22, 0x64	; 100
   14860:	70 e0       	ldi	r23, 0x00	; 0
   14862:	80 e0       	ldi	r24, 0x00	; 0
   14864:	90 e0       	ldi	r25, 0x00	; 0
   14866:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
   1486a:	15 5f       	subi	r17, 0xF5	; 245
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3914
    {
      strcpy_P(str1, text_touchscreen);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
      my_touch.TP_Set_Rotation(3);
      for (uint8_t i = 1; i < 8; i++)
   1486c:	18 35       	cpi	r17, 0x58	; 88
   1486e:	31 f7       	brne	.-52     	; 0x1483c <setup+0x1184>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3922
        my_touch.TP_SetBacklight(i * 11);
        delay(100);
        digitalWrite(LED, HIGH);
        delay(100);
      }
      display_auto_shutdown = EEPROM.read(my_display_auto_shutdown);
   14870:	80 e6       	ldi	r24, 0x60	; 96
   14872:	90 e0       	ldi	r25, 0x00	; 0
   14874:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   14878:	80 93 6d 0c 	sts	0x0C6D, r24	; 0x800c6d <display_auto_shutdown>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3923
      brigthness_display_values = EEPROM.read(my_brightness_values);
   1487c:	8e e5       	ldi	r24, 0x5E	; 94
   1487e:	90 e0       	ldi	r25, 0x00	; 0
   14880:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   14884:	18 2f       	mov	r17, r24
   14886:	80 93 65 0b 	sts	0x0B65, r24	; 0x800b65 <brigthness_display_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3924
      brigthness_display_mode = EEPROM.read(my_brightness_mode);
   1488a:	8f e5       	ldi	r24, 0x5F	; 95
   1488c:	90 e0       	ldi	r25, 0x00	; 0
   1488e:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   14892:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3925
      my_touch.TP_SetBacklight(brigthness_display_values * 2);
   14896:	81 2f       	mov	r24, r17
   14898:	88 0f       	add	r24, r24
   1489a:	0e 94 d9 ad 	call	0x15bb2	; 0x15bb2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.227]>
   1489e:	36 cf       	rjmp	.-404    	; 0x1470c <setup+0x1054>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3950
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
   148a0:	6a e0       	ldi	r22, 0x0A	; 10
   148a2:	7e e5       	ldi	r23, 0x5E	; 94
   148a4:	ce 01       	movw	r24, r28
   148a6:	88 5b       	subi	r24, 0xB8	; 184
   148a8:	9f 4f       	sbci	r25, 0xFF	; 255
   148aa:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3951
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   148ae:	ee 24       	eor	r14, r14
   148b0:	ea 94       	dec	r14
   148b2:	fe 2c       	mov	r15, r14
   148b4:	00 e0       	ldi	r16, 0x00	; 0
   148b6:	18 ef       	ldi	r17, 0xF8	; 248
   148b8:	21 e0       	ldi	r18, 0x01	; 1
   148ba:	48 e7       	ldi	r20, 0x78	; 120
   148bc:	50 e0       	ldi	r21, 0x00	; 0
   148be:	60 ea       	ldi	r22, 0xA0	; 160
   148c0:	70 e0       	ldi	r23, 0x00	; 0
   148c2:	ce 01       	movw	r24, r28
   148c4:	88 5b       	subi	r24, 0xB8	; 184
   148c6:	9f 4f       	sbci	r25, 0xFF	; 255
   148c8:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3952
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
   148cc:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4092
      }
      else
      {
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_RTC);
   148ce:	0e 94 0a 72 	call	0xe414	; 0xe414 <selftest_set_0(unsigned char)>
   148d2:	1c cf       	rjmp	.-456    	; 0x1470c <setup+0x1054>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3957
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
   148d4:	c8 5c       	subi	r28, 0xC8	; 200
   148d6:	de 4f       	sbci	r29, 0xFE	; 254
   148d8:	88 81       	ld	r24, Y
   148da:	c8 53       	subi	r28, 0x38	; 56
   148dc:	d1 40       	sbci	r29, 0x01	; 1
   148de:	88 30       	cpi	r24, 0x08	; 8
   148e0:	09 f0       	breq	.+2      	; 0x148e4 <setup+0x122c>
   148e2:	3f c0       	rjmp	.+126    	; 0x14962 <setup+0x12aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3959
    {
      strcpy_P(str1, text_onewire_hledam);
   148e4:	6d e3       	ldi	r22, 0x3D	; 61
   148e6:	7d e5       	ldi	r23, 0x5D	; 93
   148e8:	ce 01       	movw	r24, r28
   148ea:	88 5b       	subi	r24, 0xB8	; 184
   148ec:	9f 4f       	sbci	r25, 0xFF	; 255
   148ee:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3960
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   148f2:	ee 24       	eor	r14, r14
   148f4:	ea 94       	dec	r14
   148f6:	fe 2c       	mov	r15, r14
   148f8:	00 ee       	ldi	r16, 0xE0	; 224
   148fa:	17 e0       	ldi	r17, 0x07	; 7
   148fc:	21 e0       	ldi	r18, 0x01	; 1
   148fe:	42 e8       	ldi	r20, 0x82	; 130
   14900:	50 e0       	ldi	r21, 0x00	; 0
   14902:	6e e1       	ldi	r22, 0x1E	; 30
   14904:	70 e0       	ldi	r23, 0x00	; 0
   14906:	ce 01       	movw	r24, r28
   14908:	88 5b       	subi	r24, 0xB8	; 184
   1490a:	9f 4f       	sbci	r25, 0xFF	; 255
   1490c:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3961
      Global_HWwirenum = 0;
   14910:	10 92 cb 0c 	sts	0x0CCB, r1	; 0x800ccb <Global_HWwirenum>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3962
      one_hw_search_device(0);
   14914:	0e 94 89 b0 	call	0x16112	; 0x16112 <one_hw_search_device(unsigned char) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3963
      tds_update_associate();
   14918:	0e 94 e1 6b 	call	0xd7c2	; 0xd7c2 <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3964
      strcpy (str1, "Nalezeno: ");
   1491c:	69 e3       	ldi	r22, 0x39	; 57
   1491e:	77 e0       	ldi	r23, 0x07	; 7
   14920:	ce 01       	movw	r24, r28
   14922:	88 5b       	subi	r24, 0xB8	; 184
   14924:	9f 4f       	sbci	r25, 0xFF	; 255
   14926:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3965
      itoa(Global_HWwirenum, str2, 10);
   1492a:	80 91 cb 0c 	lds	r24, 0x0CCB	; 0x800ccb <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1492e:	4a e0       	ldi	r20, 0x0A	; 10
   14930:	be 01       	movw	r22, r28
   14932:	68 57       	subi	r22, 0x78	; 120
   14934:	7f 4f       	sbci	r23, 0xFF	; 255
   14936:	90 e0       	ldi	r25, 0x00	; 0
   14938:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3966
      strcat(str1, str2);
   1493c:	be 01       	movw	r22, r28
   1493e:	68 57       	subi	r22, 0x78	; 120
   14940:	7f 4f       	sbci	r23, 0xFF	; 255
   14942:	ce 01       	movw	r24, r28
   14944:	88 5b       	subi	r24, 0xB8	; 184
   14946:	9f 4f       	sbci	r25, 0xFF	; 255
   14948:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3967
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1494c:	21 e0       	ldi	r18, 0x01	; 1
   1494e:	42 e8       	ldi	r20, 0x82	; 130
   14950:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4020
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14952:	60 ea       	ldi	r22, 0xA0	; 160
   14954:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4028
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    {
      strcpy_P(str1, text_rest_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14956:	ce 01       	movw	r24, r28
   14958:	88 5b       	subi	r24, 0xB8	; 184
   1495a:	9f 4f       	sbci	r25, 0xFF	; 255
   1495c:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
   14960:	d5 ce       	rjmp	.-598    	; 0x1470c <setup+0x1054>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3971
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
   14962:	c8 5c       	subi	r28, 0xC8	; 200
   14964:	de 4f       	sbci	r29, 0xFE	; 254
   14966:	98 81       	ld	r25, Y
   14968:	c8 53       	subi	r28, 0x38	; 56
   1496a:	d1 40       	sbci	r29, 0x01	; 1
   1496c:	99 30       	cpi	r25, 0x09	; 9
   1496e:	09 f0       	breq	.+2      	; 0x14972 <setup+0x12ba>
   14970:	2e c3       	rjmp	.+1628   	; 0x14fce <setup+0x1916>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3973
    {
      digitalWrite(ETH_RST, HIGH);
   14972:	61 e0       	ldi	r22, 0x01	; 1
   14974:	86 e0       	ldi	r24, 0x06	; 6
   14976:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3974
      delay(10);
   1497a:	6a e0       	ldi	r22, 0x0A	; 10
   1497c:	70 e0       	ldi	r23, 0x00	; 0
   1497e:	80 e0       	ldi	r24, 0x00	; 0
   14980:	90 e0       	ldi	r25, 0x00	; 0
   14982:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3975
      digitalWrite(ETH_RST, LOW);
   14986:	60 e0       	ldi	r22, 0x00	; 0
   14988:	86 e0       	ldi	r24, 0x06	; 6
   1498a:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3976
      delay(10);
   1498e:	6a e0       	ldi	r22, 0x0A	; 10
   14990:	70 e0       	ldi	r23, 0x00	; 0
   14992:	80 e0       	ldi	r24, 0x00	; 0
   14994:	90 e0       	ldi	r25, 0x00	; 0
   14996:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3977
      digitalWrite(ETH_RST, HIGH);
   1499a:	61 e0       	ldi	r22, 0x01	; 1
   1499c:	86 e0       	ldi	r24, 0x06	; 6
   1499e:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978
      delay(100);
   149a2:	64 e6       	ldi	r22, 0x64	; 100
   149a4:	70 e0       	ldi	r23, 0x00	; 0
   149a6:	80 e0       	ldi	r24, 0x00	; 0
   149a8:	90 e0       	ldi	r25, 0x00	; 0
   149aa:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
   149ae:	8f e0       	ldi	r24, 0x0F	; 15
   149b0:	80 93 db 0d 	sts	0x0DDB, r24	; 0x800ddb <Ethernet+0xc>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3980
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
   149b4:	6e ee       	ldi	r22, 0xEE	; 238
   149b6:	7d e0       	ldi	r23, 0x0D	; 13
   149b8:	ce 01       	movw	r24, r28
   149ba:	8e 5c       	subi	r24, 0xCE	; 206
   149bc:	9e 4f       	sbci	r25, 0xFE	; 254
   149be:	0e 94 da b7 	call	0x16fb4	; 0x16fb4 <IPAddress::IPAddress(unsigned char const*)>
   149c2:	66 ef       	ldi	r22, 0xF6	; 246
   149c4:	7d e0       	ldi	r23, 0x0D	; 13
   149c6:	ce 01       	movw	r24, r28
   149c8:	84 5d       	subi	r24, 0xD4	; 212
   149ca:	9e 4f       	sbci	r25, 0xFE	; 254
   149cc:	0e 94 da b7 	call	0x16fb4	; 0x16fb4 <IPAddress::IPAddress(unsigned char const*)>
   149d0:	62 ef       	ldi	r22, 0xF2	; 242
   149d2:	7d e0       	ldi	r23, 0x0D	; 13
   149d4:	ce 01       	movw	r24, r28
   149d6:	8a 5d       	subi	r24, 0xDA	; 218
   149d8:	9e 4f       	sbci	r25, 0xFE	; 254
   149da:	0e 94 da b7 	call	0x16fb4	; 0x16fb4 <IPAddress::IPAddress(unsigned char const*)>
   149de:	6a ee       	ldi	r22, 0xEA	; 234
   149e0:	7d e0       	ldi	r23, 0x0D	; 13
   149e2:	c3 01       	movw	r24, r6
   149e4:	0e 94 da b7 	call	0x16fb4	; 0x16fb4 <IPAddress::IPAddress(unsigned char const*)>
   149e8:	9e 01       	movw	r18, r28
   149ea:	2e 5c       	subi	r18, 0xCE	; 206
   149ec:	3e 4f       	sbci	r19, 0xFE	; 254
   149ee:	ae 01       	movw	r20, r28
   149f0:	44 5d       	subi	r20, 0xD4	; 212
   149f2:	5e 4f       	sbci	r21, 0xFE	; 254
   149f4:	be 01       	movw	r22, r28
   149f6:	6a 5d       	subi	r22, 0xDA	; 218
   149f8:	7e 4f       	sbci	r23, 0xFE	; 254
   149fa:	c3 01       	movw	r24, r6
   149fc:	0e 94 76 bb 	call	0x176ec	; 0x176ec <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.77]>
writeRCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:242
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0019);    // Timeout address
  __GP_REGISTER8 (RCR,    0x001B);    // Retry count
   14a00:	42 e0       	ldi	r20, 0x02	; 2
   14a02:	64 e0       	ldi	r22, 0x04	; 4
   14a04:	8b e1       	ldi	r24, 0x1B	; 27
   14a06:	90 e0       	ldi	r25, 0x00	; 0
   14a08:	0e 94 42 5b 	call	0xb684	; 0xb684 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
writeRTR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:241
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0019);    // Timeout address
   14a0c:	42 e0       	ldi	r20, 0x02	; 2
   14a0e:	64 e0       	ldi	r22, 0x04	; 4
   14a10:	89 e1       	ldi	r24, 0x19	; 25
   14a12:	90 e0       	ldi	r25, 0x00	; 0
   14a14:	0e 94 42 5b 	call	0xb684	; 0xb684 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   14a18:	48 e5       	ldi	r20, 0x58	; 88
   14a1a:	64 e0       	ldi	r22, 0x04	; 4
   14a1c:	8a e1       	ldi	r24, 0x1A	; 26
   14a1e:	90 e0       	ldi	r25, 0x00	; 0
   14a20:	0e 94 42 5b 	call	0xb684	; 0xb684 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3983
      w5500.setRetransmissionCount(2);
      w5500.setRetransmissionTime(600);
      strcpy_P(str1, text_ethernet_rozhrani);
   14a24:	6b e2       	ldi	r22, 0x2B	; 43
   14a26:	7d e5       	ldi	r23, 0x5D	; 93
   14a28:	ce 01       	movw	r24, r28
   14a2a:	88 5b       	subi	r24, 0xB8	; 184
   14a2c:	9f 4f       	sbci	r25, 0xFF	; 255
   14a2e:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3984
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14a32:	ee 24       	eor	r14, r14
   14a34:	ea 94       	dec	r14
   14a36:	fe 2c       	mov	r15, r14
   14a38:	00 ee       	ldi	r16, 0xE0	; 224
   14a3a:	17 e0       	ldi	r17, 0x07	; 7
   14a3c:	21 e0       	ldi	r18, 0x01	; 1
   14a3e:	4c e8       	ldi	r20, 0x8C	; 140
   14a40:	50 e0       	ldi	r21, 0x00	; 0
   14a42:	6e e1       	ldi	r22, 0x1E	; 30
   14a44:	70 e0       	ldi	r23, 0x00	; 0
   14a46:	ce 01       	movw	r24, r28
   14a48:	88 5b       	subi	r24, 0xB8	; 184
   14a4a:	9f 4f       	sbci	r25, 0xFF	; 255
   14a4c:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3985
      delay(100);
   14a50:	64 e6       	ldi	r22, 0x64	; 100
   14a52:	70 e0       	ldi	r23, 0x00	; 0
   14a54:	80 e0       	ldi	r24, 0x00	; 0
   14a56:	90 e0       	ldi	r25, 0x00	; 0
   14a58:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3986
      http_server.begin();
   14a5c:	84 ef       	ldi	r24, 0xF4	; 244
   14a5e:	9f e0       	ldi	r25, 0x0F	; 15
   14a60:	0e 94 e6 61 	call	0xc3cc	; 0xc3cc <EthernetServer::begin()>
   14a64:	53 ce       	rjmp	.-858    	; 0x1470c <setup+0x1054>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4009
        {
          selftest_clear_0(SELFTEST_MQTT_LINK);
          break;
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
   14a66:	85 e0       	ldi	r24, 0x05	; 5
   14a68:	0e 94 0a 72 	call	0xe414	; 0xe414 <selftest_set_0(unsigned char)>
   14a6c:	fa c2       	rjmp	.+1524   	; 0x15062 <setup+0x19aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4019
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
   14a6e:	67 e8       	ldi	r22, 0x87	; 135
   14a70:	7d e5       	ldi	r23, 0x5D	; 93
   14a72:	ce 01       	movw	r24, r28
   14a74:	88 5b       	subi	r24, 0xB8	; 184
   14a76:	9f 4f       	sbci	r25, 0xFF	; 255
   14a78:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4020
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14a7c:	ee 24       	eor	r14, r14
   14a7e:	ea 94       	dec	r14
   14a80:	fe 2c       	mov	r15, r14
   14a82:	00 ee       	ldi	r16, 0xE0	; 224
   14a84:	17 e0       	ldi	r17, 0x07	; 7
   14a86:	23 c3       	rjmp	.+1606   	; 0x150ce <setup+0x1a16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4025
      }
    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
   14a88:	c8 5c       	subi	r28, 0xC8	; 200
   14a8a:	de 4f       	sbci	r29, 0xFE	; 254
   14a8c:	b8 81       	ld	r27, Y
   14a8e:	c8 53       	subi	r28, 0x38	; 56
   14a90:	d1 40       	sbci	r29, 0x01	; 1
   14a92:	bb 30       	cpi	r27, 0x0B	; 11
   14a94:	81 f4       	brne	.+32     	; 0x14ab6 <setup+0x13fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4027
    {
      strcpy_P(str1, text_rest_rozhrani);
   14a96:	6c ef       	ldi	r22, 0xFC	; 252
   14a98:	7c e5       	ldi	r23, 0x5C	; 92
   14a9a:	ce 01       	movw	r24, r28
   14a9c:	88 5b       	subi	r24, 0xB8	; 184
   14a9e:	9f 4f       	sbci	r25, 0xFF	; 255
   14aa0:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4028
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14aa4:	ee 24       	eor	r14, r14
   14aa6:	ea 94       	dec	r14
   14aa8:	fe 2c       	mov	r15, r14
   14aaa:	00 ee       	ldi	r16, 0xE0	; 224
   14aac:	17 e0       	ldi	r17, 0x07	; 7
   14aae:	21 e0       	ldi	r18, 0x01	; 1
   14ab0:	40 ea       	ldi	r20, 0xA0	; 160
   14ab2:	50 e0       	ldi	r21, 0x00	; 0
   14ab4:	07 cd       	rjmp	.-1522   	; 0x144c4 <setup+0xe0c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4032
    }
    ///
    /// inicializace nrf
    if (init == 12)
   14ab6:	c8 5c       	subi	r28, 0xC8	; 200
   14ab8:	de 4f       	sbci	r29, 0xFE	; 254
   14aba:	e8 81       	ld	r30, Y
   14abc:	c8 53       	subi	r28, 0x38	; 56
   14abe:	d1 40       	sbci	r29, 0x01	; 1
   14ac0:	ec 30       	cpi	r30, 0x0C	; 12
   14ac2:	09 f0       	breq	.+2      	; 0x14ac6 <setup+0x140e>
   14ac4:	08 c3       	rjmp	.+1552   	; 0x150d6 <setup+0x1a1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4034
    {
      strcpy_P(str1, text_nrf_rozhrani);
   14ac6:	6f ee       	ldi	r22, 0xEF	; 239
   14ac8:	7c e5       	ldi	r23, 0x5C	; 92
   14aca:	ce 01       	movw	r24, r28
   14acc:	88 5b       	subi	r24, 0xB8	; 184
   14ace:	9f 4f       	sbci	r25, 0xFF	; 255
   14ad0:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4035
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14ad4:	ee 24       	eor	r14, r14
   14ad6:	ea 94       	dec	r14
   14ad8:	fe 2c       	mov	r15, r14
   14ada:	00 ee       	ldi	r16, 0xE0	; 224
   14adc:	17 e0       	ldi	r17, 0x07	; 7
   14ade:	21 e0       	ldi	r18, 0x01	; 1
   14ae0:	4a ea       	ldi	r20, 0xAA	; 170
   14ae2:	50 e0       	ldi	r21, 0x00	; 0
   14ae4:	6e e1       	ldi	r22, 0x1E	; 30
   14ae6:	70 e0       	ldi	r23, 0x00	; 0
   14ae8:	ce 01       	movw	r24, r28
   14aea:	88 5b       	subi	r24, 0xB8	; 184
   14aec:	9f 4f       	sbci	r25, 0xFF	; 255
   14aee:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4036
      scan_rf_net_enable = 2;
   14af2:	82 e0       	ldi	r24, 0x02	; 2
   14af4:	80 93 7b 0c 	sts	0x0C7B, r24	; 0x800c7b <scan_rf_net_enable>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:631
	ce(LOW);
	csn(HIGH);
	delay(200);
  #else
    // Initialize pins
    if (ce_pin != csn_pin) pinMode(ce_pin,OUTPUT);  
   14af8:	80 91 dc 0f 	lds	r24, 0x0FDC	; 0x800fdc <radio>
   14afc:	90 91 dd 0f 	lds	r25, 0x0FDD	; 0x800fdd <radio+0x1>
   14b00:	20 91 de 0f 	lds	r18, 0x0FDE	; 0x800fde <radio+0x2>
   14b04:	30 91 df 0f 	lds	r19, 0x0FDF	; 0x800fdf <radio+0x3>
   14b08:	82 17       	cp	r24, r18
   14b0a:	93 07       	cpc	r25, r19
   14b0c:	19 f0       	breq	.+6      	; 0x14b14 <setup+0x145c>
   14b0e:	61 e0       	ldi	r22, 0x01	; 1
   14b10:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/Arduino/libraries/RF24/RF24.cpp:634
  
    #if ! defined(LITTLEWIRE)
      if (ce_pin != csn_pin)
   14b14:	80 91 de 0f 	lds	r24, 0x0FDE	; 0x800fde <radio+0x2>
   14b18:	90 91 df 0f 	lds	r25, 0x0FDF	; 0x800fdf <radio+0x3>
   14b1c:	20 91 dc 0f 	lds	r18, 0x0FDC	; 0x800fdc <radio>
   14b20:	30 91 dd 0f 	lds	r19, 0x0FDD	; 0x800fdd <radio+0x1>
   14b24:	28 17       	cp	r18, r24
   14b26:	39 07       	cpc	r19, r25
   14b28:	19 f0       	breq	.+6      	; 0x14b30 <setup+0x1478>
/home/saric/Arduino/libraries/RF24/RF24.cpp:636
    #endif
        pinMode(csn_pin,OUTPUT);
   14b2a:	61 e0       	ldi	r22, 0x01	; 1
   14b2c:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
/home/saric/Arduino/libraries/RF24/RF24.cpp:638
    
    _SPI.begin();
   14b30:	0e 94 b5 63 	call	0xc76a	; 0xc76a <SPIClass::begin()>
ce():
/home/saric/Arduino/libraries/RF24/RF24.cpp:80
/****************************************************************************/

void RF24::ce(bool level)
{
  //Allow for 3-pin use on ATTiny
  if (ce_pin != csn_pin) digitalWrite(ce_pin,level);
   14b34:	80 91 dc 0f 	lds	r24, 0x0FDC	; 0x800fdc <radio>
   14b38:	90 91 dd 0f 	lds	r25, 0x0FDD	; 0x800fdd <radio+0x1>
   14b3c:	20 91 de 0f 	lds	r18, 0x0FDE	; 0x800fde <radio+0x2>
   14b40:	30 91 df 0f 	lds	r19, 0x0FDF	; 0x800fdf <radio+0x3>
   14b44:	82 17       	cp	r24, r18
   14b46:	93 07       	cpc	r25, r19
   14b48:	19 f0       	breq	.+6      	; 0x14b50 <setup+0x1498>
   14b4a:	60 e0       	ldi	r22, 0x00	; 0
   14b4c:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:640
    #endif
        pinMode(csn_pin,OUTPUT);
    
    _SPI.begin();
    ce(LOW);
  	csn(HIGH);
   14b50:	81 e0       	ldi	r24, 0x01	; 1
   14b52:	0e 94 4f b9 	call	0x1729e	; 0x1729e <RF24::csn(bool) [clone .constprop.102]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:652
  // This is actually only required following power up but some settling time also appears to
  // be required after resets too. For full coverage, we'll always assume the worst.
  // Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
  delay( 5 ) ;
   14b56:	65 e0       	ldi	r22, 0x05	; 5
   14b58:	70 e0       	ldi	r23, 0x00	; 0
   14b5a:	80 e0       	ldi	r24, 0x00	; 0
   14b5c:	90 e0       	ldi	r25, 0x00	; 0
   14b5e:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
/home/saric/Arduino/libraries/RF24/RF24.cpp:655

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0x0C ) ;
   14b62:	6c e0       	ldi	r22, 0x0C	; 12
   14b64:	80 e0       	ldi	r24, 0x00	; 0
   14b66:	0e 94 07 ba 	call	0x1740e	; 0x1740e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.99]>
setRetries():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1588
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
   14b6a:	6f e5       	ldi	r22, 0x5F	; 95
   14b6c:	84 e0       	ldi	r24, 0x04	; 4
   14b6e:	0e 94 07 ba 	call	0x1740e	; 0x1740e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.99]>
setPALevel():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1437
/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{

  uint8_t setup = read_register(RF_SETUP) & 0xF8;
   14b72:	86 e0       	ldi	r24, 0x06	; 6
   14b74:	0e 94 1d ba 	call	0x1743a	; 0x1743a <RF24::read_register(unsigned char) [clone .constprop.98]>
   14b78:	88 7f       	andi	r24, 0xF8	; 248
/home/saric/Arduino/libraries/RF24/RF24.cpp:1446
  }else{
	  level = (level << 1) + 1;	 		// Else set level as requested
  }


  write_register( RF_SETUP, setup |= level ) ;	// Write it to the chip
   14b7a:	68 2f       	mov	r22, r24
   14b7c:	61 60       	ori	r22, 0x01	; 1
   14b7e:	86 e0       	ldi	r24, 0x06	; 6
   14b80:	0e 94 07 ba 	call	0x1740e	; 0x1740e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.99]>
setDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1462
/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
   14b84:	86 e0       	ldi	r24, 0x06	; 6
   14b86:	0e 94 1d ba 	call	0x1743a	; 0x1743a <RF24::read_register(unsigned char) [clone .constprop.98]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1465

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   14b8a:	87 7d       	andi	r24, 0xD7	; 215
/home/saric/Arduino/libraries/RF24/RF24.cpp:1476
  #endif
  if( speed == RF24_250KBPS )
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
   14b8c:	18 2f       	mov	r17, r24
   14b8e:	10 62       	ori	r17, 0x20	; 32
/home/saric/Arduino/libraries/RF24/RF24.cpp:1480
  #if !defined(F_CPU) || F_CPU > 20000000
    txDelay=450;
  #else //16Mhz Arduino
	txDelay=155;
   14b90:	8b e9       	ldi	r24, 0x9B	; 155
   14b92:	90 e0       	ldi	r25, 0x00	; 0
   14b94:	a0 e0       	ldi	r26, 0x00	; 0
   14b96:	b0 e0       	ldi	r27, 0x00	; 0
   14b98:	80 93 ec 0f 	sts	0x0FEC, r24	; 0x800fec <radio+0x10>
   14b9c:	90 93 ed 0f 	sts	0x0FED, r25	; 0x800fed <radio+0x11>
   14ba0:	a0 93 ee 0f 	sts	0x0FEE, r26	; 0x800fee <radio+0x12>
   14ba4:	b0 93 ef 0f 	sts	0x0FEF, r27	; 0x800fef <radio+0x13>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1497
      #else //16Mhz Arduino	  
	  txDelay=65;
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
   14ba8:	61 2f       	mov	r22, r17
   14baa:	86 e0       	ldi	r24, 0x06	; 6
   14bac:	0e 94 07 ba 	call	0x1740e	; 0x1740e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.99]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1500

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
   14bb0:	86 e0       	ldi	r24, 0x06	; 6
   14bb2:	0e 94 1d ba 	call	0x1743a	; 0x1743a <RF24::read_register(unsigned char) [clone .constprop.98]>
   14bb6:	18 13       	cpse	r17, r24
   14bb8:	03 c0       	rjmp	.+6      	; 0x14bc0 <setup+0x1508>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:669

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
  {
    p_variant = true ;
   14bba:	81 e0       	ldi	r24, 0x01	; 1
   14bbc:	80 93 e2 0f 	sts	0x0FE2, r24	; 0x800fe2 <radio+0x6>
/home/saric/Arduino/libraries/RF24/RF24.cpp:671
  }
  setup = read_register(RF_SETUP);
   14bc0:	86 e0       	ldi	r24, 0x06	; 6
   14bc2:	0e 94 1d ba 	call	0x1743a	; 0x1743a <RF24::read_register(unsigned char) [clone .constprop.98]>
setDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1462
/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
   14bc6:	86 e0       	ldi	r24, 0x06	; 6
   14bc8:	0e 94 1d ba 	call	0x1743a	; 0x1743a <RF24::read_register(unsigned char) [clone .constprop.98]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1470
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
  
  #if !defined(F_CPU) || F_CPU > 20000000
    txDelay=250;
  #else //16Mhz Arduino
    txDelay=85;
   14bcc:	45 e5       	ldi	r20, 0x55	; 85
   14bce:	50 e0       	ldi	r21, 0x00	; 0
   14bd0:	60 e0       	ldi	r22, 0x00	; 0
   14bd2:	70 e0       	ldi	r23, 0x00	; 0
   14bd4:	40 93 ec 0f 	sts	0x0FEC, r20	; 0x800fec <radio+0x10>
   14bd8:	50 93 ed 0f 	sts	0x0FED, r21	; 0x800fed <radio+0x11>
   14bdc:	60 93 ee 0f 	sts	0x0FEE, r22	; 0x800fee <radio+0x12>
   14be0:	70 93 ef 0f 	sts	0x0FEF, r23	; 0x800fef <radio+0x13>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1465
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   14be4:	68 2f       	mov	r22, r24
   14be6:	67 7d       	andi	r22, 0xD7	; 215
/home/saric/Arduino/libraries/RF24/RF24.cpp:1497
      #else //16Mhz Arduino	  
	  txDelay=65;
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
   14be8:	86 e0       	ldi	r24, 0x06	; 6
   14bea:	0e 94 07 ba 	call	0x1740e	; 0x1740e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.99]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1500

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
   14bee:	86 e0       	ldi	r24, 0x06	; 6
   14bf0:	0e 94 1d ba 	call	0x1743a	; 0x1743a <RF24::read_register(unsigned char) [clone .constprop.98]>
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   14bf4:	80 e0       	ldi	r24, 0x00	; 0
   14bf6:	0e 94 4f b9 	call	0x1729e	; 0x1729e <RF24::csn(bool) [clone .constprop.102]>
toggle_features():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1263
/****************************************************************************/

void RF24::toggle_features(void)
{
    beginTransaction();
	_SPI.transfer( ACTIVATE );
   14bfa:	80 e5       	ldi	r24, 0x50	; 80
   14bfc:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1264
    _SPI.transfer( 0x73 );
   14c00:	83 e7       	ldi	r24, 0x73	; 115
   14c02:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   14c06:	81 e0       	ldi	r24, 0x01	; 1
   14c08:	0e 94 4f b9 	call	0x1729e	; 0x1729e <RF24::csn(bool) [clone .constprop.102]>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:686
  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
  write_register(FEATURE,0 );
   14c0c:	60 e0       	ldi	r22, 0x00	; 0
   14c0e:	8d e1       	ldi	r24, 0x1D	; 29
   14c10:	0e 94 07 ba 	call	0x1740e	; 0x1740e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.99]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:687
  write_register(DYNPD,0);
   14c14:	60 e0       	ldi	r22, 0x00	; 0
   14c16:	8c e1       	ldi	r24, 0x1C	; 28
   14c18:	0e 94 07 ba 	call	0x1740e	; 0x1740e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.99]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:688
  dynamic_payloads_enabled = false;
   14c1c:	10 92 e4 0f 	sts	0x0FE4, r1	; 0x800fe4 <radio+0x8>
/home/saric/Arduino/libraries/RF24/RF24.cpp:692

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
   14c20:	60 e7       	ldi	r22, 0x70	; 112
   14c22:	87 e0       	ldi	r24, 0x07	; 7
   14c24:	0e 94 07 ba 	call	0x1740e	; 0x1740e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.99]>
setChannel():
/home/saric/Arduino/libraries/RF24/RF24.cpp:458
/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
  const uint8_t max_channel = 125;
  write_register(RF_CH,rf24_min(channel,max_channel));
   14c28:	6c e4       	ldi	r22, 0x4C	; 76
   14c2a:	85 e0       	ldi	r24, 0x05	; 5
   14c2c:	0e 94 07 ba 	call	0x1740e	; 0x1740e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.99]>
flush_rx():
/home/saric/Arduino/libraries/RF24/RF24.cpp:338

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
  return spiTrans( FLUSH_RX );
   14c30:	82 ee       	ldi	r24, 0xE2	; 226
   14c32:	0e 94 68 ba 	call	0x174d0	; 0x174d0 <RF24::spiTrans(unsigned char) [clone .constprop.96]>
flush_tx():
/home/saric/Arduino/libraries/RF24/RF24.cpp:345

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
  return spiTrans( FLUSH_TX );
   14c36:	81 ee       	ldi	r24, 0xE1	; 225
   14c38:	0e 94 68 ba 	call	0x174d0	; 0x174d0 <RF24::spiTrans(unsigned char) [clone .constprop.96]>
powerUp():
/home/saric/Arduino/libraries/RF24/RF24.cpp:798
/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
   uint8_t cfg = read_register(NRF_CONFIG);
   14c3c:	80 e0       	ldi	r24, 0x00	; 0
   14c3e:	0e 94 1d ba 	call	0x1743a	; 0x1743a <RF24::read_register(unsigned char) [clone .constprop.98]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:801

   // if not powered up then power up and wait for the radio to initialize
   if (!(cfg & _BV(PWR_UP))){
   14c42:	81 fd       	sbrc	r24, 1
   14c44:	0b c0       	rjmp	.+22     	; 0x14c5c <setup+0x15a4>
/home/saric/Arduino/libraries/RF24/RF24.cpp:802
      write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
   14c46:	68 2f       	mov	r22, r24
   14c48:	62 60       	ori	r22, 0x02	; 2
   14c4a:	80 e0       	ldi	r24, 0x00	; 0
   14c4c:	0e 94 07 ba 	call	0x1740e	; 0x1740e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.99]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:807

      // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
	  // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
	  // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
      delay(5);
   14c50:	65 e0       	ldi	r22, 0x05	; 5
   14c52:	70 e0       	ldi	r23, 0x00	; 0
   14c54:	80 e0       	ldi	r24, 0x00	; 0
   14c56:	90 e0       	ldi	r25, 0x00	; 0
   14c58:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:707

  powerUp(); //Power up by default when begin() is called

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
   14c5c:	80 e0       	ldi	r24, 0x00	; 0
   14c5e:	0e 94 1d ba 	call	0x1743a	; 0x1743a <RF24::read_register(unsigned char) [clone .constprop.98]>
   14c62:	68 2f       	mov	r22, r24
   14c64:	6e 7f       	andi	r22, 0xFE	; 254
   14c66:	80 e0       	ldi	r24, 0x00	; 0
   14c68:	0e 94 07 ba 	call	0x1740e	; 0x1740e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.99]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:708
  delay(100);
   14c6c:	64 e6       	ldi	r22, 0x64	; 100
   14c6e:	70 e0       	ldi	r23, 0x00	; 0
   14c70:	80 e0       	ldi	r24, 0x00	; 0
   14c72:	90 e0       	ldi	r25, 0x00	; 0
   14c74:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
   14c78:	49 cd       	rjmp	.-1390   	; 0x1470c <setup+0x1054>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
   14c7a:	f8 01       	movw	r30, r16
   14c7c:	22 a8       	ldd	r2, Z+50	; 0x32
   14c7e:	33 a8       	ldd	r3, Z+51	; 0x33
   14c80:	44 a8       	ldd	r4, Z+52	; 0x34
   14c82:	55 a8       	ldd	r5, Z+53	; 0x35
   14c84:	a2 01       	movw	r20, r4
   14c86:	91 01       	movw	r18, r2
   14c88:	c5 01       	movw	r24, r10
   14c8a:	b4 01       	movw	r22, r8
   14c8c:	0e 94 97 dd 	call	0x1bb2e	; 0x1bb2e <__cmpsf2>
   14c90:	87 fd       	sbrc	r24, 7
   14c92:	50 c3       	rjmp	.+1696   	; 0x15334 <setup+0x1c7c>
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  /*we just went from manual to auto*/
        PID::Initialize();
    }
    inAuto = newAuto;
   14c94:	21 e0       	ldi	r18, 0x01	; 1
   14c96:	f8 01       	movw	r30, r16
   14c98:	22 af       	std	Z+58, r18	; 0x3a
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   14c9a:	12 aa       	std	Z+50, r1	; 0x32
   14c9c:	13 aa       	std	Z+51, r1	; 0x33
   14c9e:	14 aa       	std	Z+52, r1	; 0x34
   14ca0:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   14ca2:	80 e0       	ldi	r24, 0x00	; 0
   14ca4:	90 e0       	ldi	r25, 0x00	; 0
   14ca6:	af e7       	ldi	r26, 0x7F	; 127
   14ca8:	b3 e4       	ldi	r27, 0x43	; 67
   14caa:	86 ab       	std	Z+54, r24	; 0x36
   14cac:	97 ab       	std	Z+55, r25	; 0x37
   14cae:	a0 af       	std	Z+56, r26	; 0x38
   14cb0:	b1 af       	std	Z+57, r27	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   14cb2:	46 8c       	ldd	r4, Z+30	; 0x1e
   14cb4:	57 8c       	ldd	r5, Z+31	; 0x1f
   14cb6:	d2 01       	movw	r26, r4
   14cb8:	8d 90       	ld	r8, X+
   14cba:	9d 90       	ld	r9, X+
   14cbc:	ad 90       	ld	r10, X+
   14cbe:	bc 90       	ld	r11, X
   14cc0:	20 e0       	ldi	r18, 0x00	; 0
   14cc2:	30 e0       	ldi	r19, 0x00	; 0
   14cc4:	4f e7       	ldi	r20, 0x7F	; 127
   14cc6:	53 e4       	ldi	r21, 0x43	; 67
   14cc8:	c5 01       	movw	r24, r10
   14cca:	b4 01       	movw	r22, r8
   14ccc:	0e 94 79 e0 	call	0x1c0f2	; 0x1c0f2 <__gesf2>
   14cd0:	18 16       	cp	r1, r24
   14cd2:	14 f5       	brge	.+68     	; 0x14d18 <setup+0x1660>
   14cd4:	80 e0       	ldi	r24, 0x00	; 0
   14cd6:	90 e0       	ldi	r25, 0x00	; 0
   14cd8:	af e7       	ldi	r26, 0x7F	; 127
   14cda:	b3 e4       	ldi	r27, 0x43	; 67
   14cdc:	f2 01       	movw	r30, r4
   14cde:	80 83       	st	Z, r24
   14ce0:	91 83       	std	Z+1, r25	; 0x01
   14ce2:	a2 83       	std	Z+2, r26	; 0x02
   14ce4:	b3 83       	std	Z+3, r27	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
   14ce6:	f8 01       	movw	r30, r16
   14ce8:	26 a0       	ldd	r2, Z+38	; 0x26
   14cea:	37 a0       	ldd	r3, Z+39	; 0x27
   14cec:	40 a4       	ldd	r4, Z+40	; 0x28
   14cee:	51 a4       	ldd	r5, Z+41	; 0x29
   14cf0:	86 a8       	ldd	r8, Z+54	; 0x36
   14cf2:	97 a8       	ldd	r9, Z+55	; 0x37
   14cf4:	a0 ac       	ldd	r10, Z+56	; 0x38
   14cf6:	b1 ac       	ldd	r11, Z+57	; 0x39
   14cf8:	a5 01       	movw	r20, r10
   14cfa:	94 01       	movw	r18, r8
   14cfc:	c2 01       	movw	r24, r4
   14cfe:	b1 01       	movw	r22, r2
   14d00:	0e 94 79 e0 	call	0x1c0f2	; 0x1c0f2 <__gesf2>
   14d04:	18 16       	cp	r1, r24
   14d06:	c4 f4       	brge	.+48     	; 0x14d38 <setup+0x1680>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
   14d08:	d8 01       	movw	r26, r16
   14d0a:	96 96       	adiw	r26, 0x26	; 38
   14d0c:	8d 92       	st	X+, r8
   14d0e:	9d 92       	st	X+, r9
   14d10:	ad 92       	st	X+, r10
   14d12:	bc 92       	st	X, r11
   14d14:	99 97       	sbiw	r26, 0x29	; 41
   14d16:	1d c0       	rjmp	.+58     	; 0x14d52 <setup+0x169a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
   14d18:	20 e0       	ldi	r18, 0x00	; 0
   14d1a:	30 e0       	ldi	r19, 0x00	; 0
   14d1c:	a9 01       	movw	r20, r18
   14d1e:	c5 01       	movw	r24, r10
   14d20:	b4 01       	movw	r22, r8
   14d22:	0e 94 97 dd 	call	0x1bb2e	; 0x1bb2e <__cmpsf2>
   14d26:	87 ff       	sbrs	r24, 7
   14d28:	de cf       	rjmp	.-68     	; 0x14ce6 <setup+0x162e>
   14d2a:	d2 01       	movw	r26, r4
   14d2c:	1d 92       	st	X+, r1
   14d2e:	1d 92       	st	X+, r1
   14d30:	1d 92       	st	X+, r1
   14d32:	1c 92       	st	X, r1
   14d34:	13 97       	sbiw	r26, 0x03	; 3
   14d36:	d7 cf       	rjmp	.-82     	; 0x14ce6 <setup+0x162e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   14d38:	f8 01       	movw	r30, r16
   14d3a:	82 a8       	ldd	r8, Z+50	; 0x32
   14d3c:	93 a8       	ldd	r9, Z+51	; 0x33
   14d3e:	a4 a8       	ldd	r10, Z+52	; 0x34
   14d40:	b5 a8       	ldd	r11, Z+53	; 0x35
   14d42:	a5 01       	movw	r20, r10
   14d44:	94 01       	movw	r18, r8
   14d46:	c2 01       	movw	r24, r4
   14d48:	b1 01       	movw	r22, r2
   14d4a:	0e 94 97 dd 	call	0x1bb2e	; 0x1bb2e <__cmpsf2>
   14d4e:	87 fd       	sbrc	r24, 7
   14d50:	db cf       	rjmp	.-74     	; 0x14d08 <setup+0x1650>
   14d52:	c3 5c       	subi	r28, 0xC3	; 195
   14d54:	de 4f       	sbci	r29, 0xFE	; 254
   14d56:	e8 81       	ld	r30, Y
   14d58:	f9 81       	ldd	r31, Y+1	; 0x01
   14d5a:	cd 53       	subi	r28, 0x3D	; 61
   14d5c:	d1 40       	sbci	r29, 0x01	; 1
   14d5e:	34 96       	adiw	r30, 0x04	; 4
   14d60:	c3 5c       	subi	r28, 0xC3	; 195
   14d62:	de 4f       	sbci	r29, 0xFE	; 254
   14d64:	f9 83       	std	Y+1, r31	; 0x01
   14d66:	e8 83       	st	Y, r30
   14d68:	cd 53       	subi	r28, 0x3D	; 61
   14d6a:	d1 40       	sbci	r29, 0x01	; 1
   14d6c:	c5 5c       	subi	r28, 0xC5	; 197
   14d6e:	de 4f       	sbci	r29, 0xFE	; 254
   14d70:	88 81       	ld	r24, Y
   14d72:	99 81       	ldd	r25, Y+1	; 0x01
   14d74:	cb 53       	subi	r28, 0x3B	; 59
   14d76:	d1 40       	sbci	r29, 0x01	; 1
   14d78:	04 96       	adiw	r24, 0x04	; 4
   14d7a:	c5 5c       	subi	r28, 0xC5	; 197
   14d7c:	de 4f       	sbci	r29, 0xFE	; 254
   14d7e:	99 83       	std	Y+1, r25	; 0x01
   14d80:	88 83       	st	Y, r24
   14d82:	cb 53       	subi	r28, 0x3B	; 59
   14d84:	d1 40       	sbci	r29, 0x01	; 1
   14d86:	94 e0       	ldi	r25, 0x04	; 4
   14d88:	c9 0e       	add	r12, r25
   14d8a:	d1 1c       	adc	r13, r1
   14d8c:	a2 e0       	ldi	r26, 0x02	; 2
   14d8e:	ea 0e       	add	r14, r26
   14d90:	f1 1c       	adc	r15, r1
thermostat_init_pid():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:40

PID** array_pids = new PID*[MAX_THERMOSTAT];

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
   14d92:	ba e0       	ldi	r27, 0x0A	; 10
   14d94:	eb 16       	cp	r14, r27
   14d96:	f1 04       	cpc	r15, r1
   14d98:	09 f0       	breq	.+2      	; 0x14d9c <setup+0x16e4>
   14d9a:	d2 c1       	rjmp	.+932    	; 0x15140 <setup+0x1a88>
   14d9c:	4b e6       	ldi	r20, 0x6B	; 107
   14d9e:	24 2e       	mov	r2, r20
   14da0:	4b e0       	ldi	r20, 0x0B	; 11
   14da2:	34 2e       	mov	r3, r20
   14da4:	5d e9       	ldi	r21, 0x9D	; 157
   14da6:	85 2e       	mov	r8, r21
   14da8:	5a e0       	ldi	r21, 0x0A	; 10
   14daa:	95 2e       	mov	r9, r21
   14dac:	61 eb       	ldi	r22, 0xB1	; 177
   14dae:	a6 2e       	mov	r10, r22
   14db0:	6a e0       	ldi	r22, 0x0A	; 10
   14db2:	b6 2e       	mov	r11, r22
   14db4:	75 ec       	ldi	r23, 0xC5	; 197
   14db6:	c7 2e       	mov	r12, r23
   14db8:	7a e0       	ldi	r23, 0x0A	; 10
   14dba:	d7 2e       	mov	r13, r23
   14dbc:	e9 ed       	ldi	r30, 0xD9	; 217
   14dbe:	ee 2e       	mov	r14, r30
   14dc0:	ea e0       	ldi	r30, 0x0A	; 10
   14dc2:	fe 2e       	mov	r15, r30
   14dc4:	00 e6       	ldi	r16, 0x60	; 96
   14dc6:	11 e0       	ldi	r17, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4047
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   14dc8:	51 2c       	mov	r5, r1
thermostat_ring_set_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   14dca:	f1 01       	movw	r30, r2
   14dcc:	11 92       	st	Z+, r1
   14dce:	1f 01       	movw	r2, r30
thermostat_ring_get_pid_eeprom():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:225
  array_pids[idx]->SetSampleTime(PID_time[idx]);
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
   14dd0:	c8 01       	movw	r24, r16
   14dd2:	0e 94 9b 57 	call	0xaf36	; 0xaf36 <EEPROMreadFloat(unsigned int)>
   14dd6:	d4 01       	movw	r26, r8
   14dd8:	6d 93       	st	X+, r22
   14dda:	7d 93       	st	X+, r23
   14ddc:	8d 93       	st	X+, r24
   14dde:	9d 93       	st	X+, r25
   14de0:	4d 01       	movw	r8, r26
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
   14de2:	c8 01       	movw	r24, r16
   14de4:	04 96       	adiw	r24, 0x04	; 4
   14de6:	0e 94 9b 57 	call	0xaf36	; 0xaf36 <EEPROMreadFloat(unsigned int)>
   14dea:	f5 01       	movw	r30, r10
   14dec:	61 93       	st	Z+, r22
   14dee:	71 93       	st	Z+, r23
   14df0:	81 93       	st	Z+, r24
   14df2:	91 93       	st	Z+, r25
   14df4:	5f 01       	movw	r10, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
   14df6:	c8 01       	movw	r24, r16
   14df8:	08 96       	adiw	r24, 0x08	; 8
   14dfa:	0e 94 9b 57 	call	0xaf36	; 0xaf36 <EEPROMreadFloat(unsigned int)>
   14dfe:	d6 01       	movw	r26, r12
   14e00:	6d 93       	st	X+, r22
   14e02:	7d 93       	st	X+, r23
   14e04:	8d 93       	st	X+, r24
   14e06:	9d 93       	st	X+, r25
   14e08:	6d 01       	movw	r12, r26
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
   14e0a:	c8 01       	movw	r24, r16
   14e0c:	0c 96       	adiw	r24, 0x0c	; 12
   14e0e:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   14e12:	f7 01       	movw	r30, r14
   14e14:	81 93       	st	Z+, r24
   14e16:	7f 01       	movw	r14, r30
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4052
      {
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
   14e18:	85 2d       	mov	r24, r5
   14e1a:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4047
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   14e1e:	53 94       	inc	r5
   14e20:	0f 5d       	subi	r16, 0xDF	; 223
   14e22:	1f 4f       	sbci	r17, 0xFF	; 255
   14e24:	f5 e0       	ldi	r31, 0x05	; 5
   14e26:	5f 12       	cpse	r5, r31
   14e28:	d0 cf       	rjmp	.-96     	; 0x14dca <setup+0x1712>
get_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2241
   return
     - uint8_t s id ringu
*/
uint8_t get_default_ring(void)
{
  return EEPROM.read(my_default_ring);
   14e2a:	8c e5       	ldi	r24, 0x5C	; 92
   14e2c:	90 e0       	ldi	r25, 0x00	; 0
   14e2e:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4054
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
   14e32:	80 93 64 0b 	sts	0x0B64, r24	; 0x800b64 <default_ring>
get_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2256
   return
     - uint8_t s id cislo cidla
*/
uint8_t get_default_show_temp(void)
{
  return EEPROM.read(my_default_show_temp);
   14e36:	8d e5       	ldi	r24, 0x5D	; 93
   14e38:	90 e0       	ldi	r25, 0x00	; 0
   14e3a:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4055
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
   14e3e:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <default_show_temp>
   14e42:	64 cc       	rjmp	.-1848   	; 0x1470c <setup+0x1054>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4071
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
   14e44:	67 e8       	ldi	r22, 0x87	; 135
   14e46:	7d e5       	ldi	r23, 0x5D	; 93
   14e48:	ce 01       	movw	r24, r28
   14e4a:	88 5b       	subi	r24, 0xB8	; 184
   14e4c:	9f 4f       	sbci	r25, 0xFF	; 255
   14e4e:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4072
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14e52:	ee 24       	eor	r14, r14
   14e54:	ea 94       	dec	r14
   14e56:	fe 2c       	mov	r15, r14
   14e58:	00 ee       	ldi	r16, 0xE0	; 224
   14e5a:	17 e0       	ldi	r17, 0x07	; 7
   14e5c:	21 e0       	ldi	r18, 0x01	; 1
   14e5e:	4e eb       	ldi	r20, 0xBE	; 190
   14e60:	50 e0       	ldi	r21, 0x00	; 0
   14e62:	60 ea       	ldi	r22, 0xA0	; 160
   14e64:	70 e0       	ldi	r23, 0x00	; 0
   14e66:	ce 01       	movw	r24, r28
   14e68:	88 5b       	subi	r24, 0xB8	; 184
   14e6a:	9f 4f       	sbci	r25, 0xFF	; 255
   14e6c:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3368
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   14e70:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <selftest_data>
   14e74:	8d 7f       	andi	r24, 0xFD	; 253
   14e76:	a8 c0       	rjmp	.+336    	; 0x14fc8 <setup+0x1910>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4078
        selftest_clear_0(SELFTEST_ERR_NTP);
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
   14e78:	c8 5c       	subi	r28, 0xC8	; 200
   14e7a:	de 4f       	sbci	r29, 0xFE	; 254
   14e7c:	b8 81       	ld	r27, Y
   14e7e:	c8 53       	subi	r28, 0x38	; 56
   14e80:	d1 40       	sbci	r29, 0x01	; 1
   14e82:	bf 30       	cpi	r27, 0x0F	; 15
   14e84:	09 f0       	breq	.+2      	; 0x14e88 <setup+0x17d0>
   14e86:	42 cc       	rjmp	.-1916   	; 0x1470c <setup+0x1054>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4080
    {
      strcpy_P(str1, text_rtc_cas);
   14e88:	6a eb       	ldi	r22, 0xBA	; 186
   14e8a:	7c e5       	ldi	r23, 0x5C	; 92
   14e8c:	ce 01       	movw	r24, r28
   14e8e:	88 5b       	subi	r24, 0xB8	; 184
   14e90:	9f 4f       	sbci	r25, 0xFF	; 255
   14e92:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4081
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14e96:	ee 24       	eor	r14, r14
   14e98:	ea 94       	dec	r14
   14e9a:	fe 2c       	mov	r15, r14
   14e9c:	00 ee       	ldi	r16, 0xE0	; 224
   14e9e:	17 e0       	ldi	r17, 0x07	; 7
   14ea0:	21 e0       	ldi	r18, 0x01	; 1
   14ea2:	48 ec       	ldi	r20, 0xC8	; 200
   14ea4:	50 e0       	ldi	r21, 0x00	; 0
   14ea6:	6e e1       	ldi	r22, 0x1E	; 30
   14ea8:	70 e0       	ldi	r23, 0x00	; 0
   14eaa:	ce 01       	movw	r24, r28
   14eac:	88 5b       	subi	r24, 0xB8	; 184
   14eae:	9f 4f       	sbci	r25, 0xFF	; 255
   14eb0:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4082
      if (rtc.isrunning())
   14eb4:	0e 94 6f b2 	call	0x164de	; 0x164de <RTC_DS1307::isrunning() [clone .constprop.148]>
   14eb8:	88 23       	and	r24, r24
   14eba:	a9 f0       	breq	.+42     	; 0x14ee6 <setup+0x182e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4084
      {
        strcpy_P(str1, text_ok);
   14ebc:	67 e8       	ldi	r22, 0x87	; 135
   14ebe:	7d e5       	ldi	r23, 0x5D	; 93
   14ec0:	ce 01       	movw	r24, r28
   14ec2:	88 5b       	subi	r24, 0xB8	; 184
   14ec4:	9f 4f       	sbci	r25, 0xFF	; 255
   14ec6:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4085
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14eca:	21 e0       	ldi	r18, 0x01	; 1
   14ecc:	48 ec       	ldi	r20, 0xC8	; 200
   14ece:	50 e0       	ldi	r21, 0x00	; 0
   14ed0:	60 ea       	ldi	r22, 0xA0	; 160
   14ed2:	70 e0       	ldi	r23, 0x00	; 0
   14ed4:	ce 01       	movw	r24, r28
   14ed6:	88 5b       	subi	r24, 0xB8	; 184
   14ed8:	9f 4f       	sbci	r25, 0xFF	; 255
   14eda:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3368
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   14ede:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <selftest_data>
   14ee2:	8e 7f       	andi	r24, 0xFE	; 254
   14ee4:	71 c0       	rjmp	.+226    	; 0x14fc8 <setup+0x1910>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4090
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
      }
      else
      {
        strcpy_P(str1, text_err);
   14ee6:	6a e0       	ldi	r22, 0x0A	; 10
   14ee8:	7e e5       	ldi	r23, 0x5E	; 94
   14eea:	ce 01       	movw	r24, r28
   14eec:	88 5b       	subi	r24, 0xB8	; 184
   14eee:	9f 4f       	sbci	r25, 0xFF	; 255
   14ef0:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4091
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   14ef4:	ee 24       	eor	r14, r14
   14ef6:	ea 94       	dec	r14
   14ef8:	fe 2c       	mov	r15, r14
   14efa:	00 e0       	ldi	r16, 0x00	; 0
   14efc:	18 ef       	ldi	r17, 0xF8	; 248
   14efe:	21 e0       	ldi	r18, 0x01	; 1
   14f00:	48 ec       	ldi	r20, 0xC8	; 200
   14f02:	50 e0       	ldi	r21, 0x00	; 0
   14f04:	60 ea       	ldi	r22, 0xA0	; 160
   14f06:	70 e0       	ldi	r23, 0x00	; 0
   14f08:	ce 01       	movw	r24, r28
   14f0a:	88 5b       	subi	r24, 0xB8	; 184
   14f0c:	9f 4f       	sbci	r25, 0xFF	; 255
   14f0e:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4092
        selftest_set_0(SELFTEST_ERR_RTC);
   14f12:	80 e0       	ldi	r24, 0x00	; 0
   14f14:	dc cc       	rjmp	.-1608   	; 0x148ce <setup+0x1216>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3885
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }
    ///
    ///  nacteni provoznich parametru
    if (init == 5)
   14f16:	c8 5c       	subi	r28, 0xC8	; 200
   14f18:	de 4f       	sbci	r29, 0xFE	; 254
   14f1a:	98 81       	ld	r25, Y
   14f1c:	c8 53       	subi	r28, 0x38	; 56
   14f1e:	d1 40       	sbci	r29, 0x01	; 1
   14f20:	95 30       	cpi	r25, 0x05	; 5
   14f22:	09 f4       	brne	.+2      	; 0x14f26 <setup+0x186e>
   14f24:	e6 ca       	rjmp	.-2612   	; 0x144f2 <setup+0xe3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3908
        remote_tds_set_last_update(idx, 255);
      }
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
   14f26:	96 30       	cpi	r25, 0x06	; 6
   14f28:	09 f4       	brne	.+2      	; 0x14f2c <setup+0x1874>
   14f2a:	33 cc       	rjmp	.-1946   	; 0x14792 <setup+0x10da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3929
      brigthness_display_mode = EEPROM.read(my_brightness_mode);
      my_touch.TP_SetBacklight(brigthness_display_values * 2);
    }
    ///
    /// inicializace ds2482
    if (init == 7)
   14f2c:	97 30       	cpi	r25, 0x07	; 7
   14f2e:	09 f0       	breq	.+2      	; 0x14f32 <setup+0x187a>
   14f30:	d1 cc       	rjmp	.-1630   	; 0x148d4 <setup+0x121c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3931
    {
      strcpy_P(str1, text_onewire_rozhrani);
   14f32:	6a e4       	ldi	r22, 0x4A	; 74
   14f34:	7d e5       	ldi	r23, 0x5D	; 93
   14f36:	ce 01       	movw	r24, r28
   14f38:	88 5b       	subi	r24, 0xB8	; 184
   14f3a:	9f 4f       	sbci	r25, 0xFF	; 255
   14f3c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3932
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14f40:	ee 24       	eor	r14, r14
   14f42:	ea 94       	dec	r14
   14f44:	fe 2c       	mov	r15, r14
   14f46:	00 ee       	ldi	r16, 0xE0	; 224
   14f48:	17 e0       	ldi	r17, 0x07	; 7
   14f4a:	21 e0       	ldi	r18, 0x01	; 1
   14f4c:	48 e7       	ldi	r20, 0x78	; 120
   14f4e:	50 e0       	ldi	r21, 0x00	; 0
   14f50:	6e e1       	ldi	r22, 0x1E	; 30
   14f52:	70 e0       	ldi	r23, 0x00	; 0
   14f54:	ce 01       	movw	r24, r28
   14f56:	88 5b       	subi	r24, 0xB8	; 184
   14f58:	9f 4f       	sbci	r25, 0xFF	; 255
   14f5a:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3933
      ds2482_address[0].i2c_addr = 0b0011000;
   14f5e:	88 e1       	ldi	r24, 0x18	; 24
   14f60:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3934
      ds2482_address[0].HWwirenum = 0;
   14f64:	10 92 cd 0c 	sts	0x0CCD, r1	; 0x800ccd <ds2482_address+0x1>
   14f68:	e1 eb       	ldi	r30, 0xB1	; 177
   14f6a:	fb e0       	ldi	r31, 0x0B	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3938
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
   14f6c:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3939
        status_tds18s20[idx].period_now = 0;
   14f6e:	14 8e       	std	Z+28, r1	; 0x1c
   14f70:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3936
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
   14f72:	2c e0       	ldi	r18, 0x0C	; 12
   14f74:	e5 36       	cpi	r30, 0x65	; 101
   14f76:	f2 07       	cpc	r31, r18
   14f78:	c9 f7       	brne	.-14     	; 0x14f6c <setup+0x18b4>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   14f7a:	4a e0       	ldi	r20, 0x0A	; 10
   14f7c:	be 01       	movw	r22, r28
   14f7e:	6e 50       	subi	r22, 0x0E	; 14
   14f80:	7f 4f       	sbci	r23, 0xFF	; 255
   14f82:	88 e1       	ldi	r24, 0x18	; 24
   14f84:	90 e0       	ldi	r25, 0x00	; 0
   14f86:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3942
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
   14f8a:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <ds2482_address>
   14f8e:	0e 94 ea 4f 	call	0x9fd4	; 0x9fd4 <ds2482reset(unsigned char)>
   14f92:	81 11       	cpse	r24, r1
   14f94:	85 cc       	rjmp	.-1782   	; 0x148a0 <setup+0x11e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3944
      {
        strcpy_P(str1, text_ok);
   14f96:	67 e8       	ldi	r22, 0x87	; 135
   14f98:	7d e5       	ldi	r23, 0x5D	; 93
   14f9a:	ce 01       	movw	r24, r28
   14f9c:	88 5b       	subi	r24, 0xB8	; 184
   14f9e:	9f 4f       	sbci	r25, 0xFF	; 255
   14fa0:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3945
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14fa4:	ee 24       	eor	r14, r14
   14fa6:	ea 94       	dec	r14
   14fa8:	fe 2c       	mov	r15, r14
   14faa:	00 ee       	ldi	r16, 0xE0	; 224
   14fac:	17 e0       	ldi	r17, 0x07	; 7
   14fae:	21 e0       	ldi	r18, 0x01	; 1
   14fb0:	48 e7       	ldi	r20, 0x78	; 120
   14fb2:	50 e0       	ldi	r21, 0x00	; 0
   14fb4:	60 ea       	ldi	r22, 0xA0	; 160
   14fb6:	70 e0       	ldi	r23, 0x00	; 0
   14fb8:	ce 01       	movw	r24, r28
   14fba:	88 5b       	subi	r24, 0xB8	; 184
   14fbc:	9f 4f       	sbci	r25, 0xFF	; 255
   14fbe:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3368
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   14fc2:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <selftest_data>
   14fc6:	8b 7f       	andi	r24, 0xFB	; 251
   14fc8:	80 93 65 0c 	sts	0x0C65, r24	; 0x800c65 <selftest_data>
   14fcc:	9f cb       	rjmp	.-2242   	; 0x1470c <setup+0x1054>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3990
      delay(100);
      http_server.begin();
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
   14fce:	c8 5c       	subi	r28, 0xC8	; 200
   14fd0:	de 4f       	sbci	r29, 0xFE	; 254
   14fd2:	a8 81       	ld	r26, Y
   14fd4:	c8 53       	subi	r28, 0x38	; 56
   14fd6:	d1 40       	sbci	r29, 0x01	; 1
   14fd8:	aa 30       	cpi	r26, 0x0A	; 10
   14fda:	09 f0       	breq	.+2      	; 0x14fde <setup+0x1926>
   14fdc:	55 cd       	rjmp	.-1366   	; 0x14a88 <setup+0x13d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3992
    {
      strcpy_P(str1, text_mqtt_rozhrani);
   14fde:	6d e1       	ldi	r22, 0x1D	; 29
   14fe0:	7d e5       	ldi	r23, 0x5D	; 93
   14fe2:	ce 01       	movw	r24, r28
   14fe4:	88 5b       	subi	r24, 0xB8	; 184
   14fe6:	9f 4f       	sbci	r25, 0xFF	; 255
   14fe8:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3993
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14fec:	ee 24       	eor	r14, r14
   14fee:	ea 94       	dec	r14
   14ff0:	fe 2c       	mov	r15, r14
   14ff2:	00 ee       	ldi	r16, 0xE0	; 224
   14ff4:	17 e0       	ldi	r17, 0x07	; 7
   14ff6:	21 e0       	ldi	r18, 0x01	; 1
   14ff8:	46 e9       	ldi	r20, 0x96	; 150
   14ffa:	50 e0       	ldi	r21, 0x00	; 0
   14ffc:	6e e1       	ldi	r22, 0x1E	; 30
   14ffe:	70 e0       	ldi	r23, 0x00	; 0
   15000:	ce 01       	movw	r24, r28
   15002:	88 5b       	subi	r24, 0xB8	; 184
   15004:	9f 4f       	sbci	r25, 0xFF	; 255
   15006:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3995

      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
   1500a:	80 91 08 0e 	lds	r24, 0x0E08	; 0x800e08 <device+0x24>
   1500e:	90 91 09 0e 	lds	r25, 0x0E09	; 0x800e09 <device+0x25>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:556
    }
    return rc;
}

PubSubClient& PubSubClient::setServer(uint8_t * ip, uint16_t port) {
    IPAddress addr(ip[0],ip[1],ip[2],ip[3]);
   15012:	20 91 07 0e 	lds	r18, 0x0E07	; 0x800e07 <device+0x23>
   15016:	30 91 06 0e 	lds	r19, 0x0E06	; 0x800e06 <device+0x22>
   1501a:	40 91 05 0e 	lds	r20, 0x0E05	; 0x800e05 <device+0x21>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   1501e:	50 91 04 0e 	lds	r21, 0x0E04	; 0x800e04 <device+0x20>
   15022:	50 93 0b 12 	sts	0x120B, r21	; 0x80120b <mqtt_client+0x211>
   15026:	40 93 0c 12 	sts	0x120C, r20	; 0x80120c <mqtt_client+0x212>
   1502a:	30 93 0d 12 	sts	0x120D, r19	; 0x80120d <mqtt_client+0x213>
   1502e:	20 93 0e 12 	sts	0x120E, r18	; 0x80120e <mqtt_client+0x214>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:562
    return setServer(addr,port);
}

PubSubClient& PubSubClient::setServer(IPAddress ip, uint16_t port) {
    this->ip = ip;
    this->port = port;
   15032:	90 93 12 12 	sts	0x1212, r25	; 0x801212 <mqtt_client+0x218>
   15036:	80 93 11 12 	sts	0x1211, r24	; 0x801211 <mqtt_client+0x217>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:563
    this->domain = NULL;
   1503a:	10 92 10 12 	sts	0x1210, r1	; 0x801210 <mqtt_client+0x216>
   1503e:	10 92 0f 12 	sts	0x120F, r1	; 0x80120f <mqtt_client+0x215>
setCallback():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:574
    this->port = port;
    return *this;
}

PubSubClient& PubSubClient::setCallback(MQTT_CALLBACK_SIGNATURE) {
    this->callback = callback;
   15042:	84 e5       	ldi	r24, 0x54	; 84
   15044:	99 e7       	ldi	r25, 0x79	; 121
   15046:	90 93 08 12 	sts	0x1208, r25	; 0x801208 <mqtt_client+0x20e>
   1504a:	80 93 07 12 	sts	0x1207, r24	; 0x801207 <mqtt_client+0x20d>
send_mqtt_set_header():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:162

////////////////////////////////////////////////////////////////////////////////////////////////////////
//****************************************************************************************************//
void send_mqtt_set_header(const char* header)
{
  header_out = header;
   1504e:	8e e0       	ldi	r24, 0x0E	; 14
   15050:	9d e5       	ldi	r25, 0x5D	; 93
   15052:	90 93 84 0c 	sts	0x0C84, r25	; 0x800c84 <header_out+0x1>
   15056:	80 93 83 0c 	sts	0x0C83, r24	; 0x800c83 <header_out>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3998
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
   1505a:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   1505e:	6b 01       	movw	r12, r22
   15060:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3999
      while ((millis() - milis) < 3000 )
   15062:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   15066:	6c 19       	sub	r22, r12
   15068:	7d 09       	sbc	r23, r13
   1506a:	8e 09       	sbc	r24, r14
   1506c:	9f 09       	sbc	r25, r15
   1506e:	68 3b       	cpi	r22, 0xB8	; 184
   15070:	7b 40       	sbci	r23, 0x0B	; 11
   15072:	81 05       	cpc	r24, r1
   15074:	91 05       	cpc	r25, r1
   15076:	98 f4       	brcc	.+38     	; 0x1509e <setup+0x19e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4001
      {
        lastmqttconnect = 0;
   15078:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <lastmqttconnect>
   1507c:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <lastmqttconnect+0x1>
   15080:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <lastmqttconnect+0x2>
   15084:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <lastmqttconnect+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4002
        mqtt_client.loop();
   15088:	0e 94 15 be 	call	0x17c2a	; 0x17c2a <PubSubClient::loop() [clone .constprop.86]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4003
        if (mqtt_reconnect() == 0)
   1508c:	0e 94 c0 73 	call	0xe780	; 0xe780 <mqtt_reconnect()>
   15090:	81 11       	cpse	r24, r1
   15092:	e9 cc       	rjmp	.-1582   	; 0x14a66 <setup+0x13ae>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3368
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   15094:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <selftest_data>
   15098:	8f 7d       	andi	r24, 0xDF	; 223
   1509a:	80 93 65 0c 	sts	0x0C65, r24	; 0x800c65 <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4011
          break;
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }
      lastmqttconnect = 0;
   1509e:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <lastmqttconnect>
   150a2:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <lastmqttconnect+0x1>
   150a6:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <lastmqttconnect+0x2>
   150aa:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <lastmqttconnect+0x3>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3381
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
   150ae:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4012
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }
      lastmqttconnect = 0;
      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
   150b2:	85 ff       	sbrs	r24, 5
   150b4:	dc cc       	rjmp	.-1608   	; 0x14a6e <setup+0x13b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4014
      {
        strcpy_P(str1, text_err);
   150b6:	6a e0       	ldi	r22, 0x0A	; 10
   150b8:	7e e5       	ldi	r23, 0x5E	; 94
   150ba:	ce 01       	movw	r24, r28
   150bc:	88 5b       	subi	r24, 0xB8	; 184
   150be:	9f 4f       	sbci	r25, 0xFF	; 255
   150c0:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4015
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   150c4:	ee 24       	eor	r14, r14
   150c6:	ea 94       	dec	r14
   150c8:	fe 2c       	mov	r15, r14
   150ca:	00 e0       	ldi	r16, 0x00	; 0
   150cc:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4020
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   150ce:	21 e0       	ldi	r18, 0x01	; 1
   150d0:	46 e9       	ldi	r20, 0x96	; 150
   150d2:	50 e0       	ldi	r21, 0x00	; 0
   150d4:	3e cc       	rjmp	.-1924   	; 0x14952 <setup+0x129a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4041
      scan_rf_net_enable = 2;
      radio.begin();
    }
    ///
    /// inicializace termostatu
    if (init == 13)
   150d6:	c8 5c       	subi	r28, 0xC8	; 200
   150d8:	de 4f       	sbci	r29, 0xFE	; 254
   150da:	b8 81       	ld	r27, Y
   150dc:	c8 53       	subi	r28, 0x38	; 56
   150de:	d1 40       	sbci	r29, 0x01	; 1
   150e0:	bd 30       	cpi	r27, 0x0D	; 13
   150e2:	11 f0       	breq	.+4      	; 0x150e8 <setup+0x1a30>
   150e4:	0c 94 b3 9e 	jmp	0x13d66	; 0x13d66 <setup+0x6ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4043
    {
      strcpy_P(str1, text_pid_regulator);
   150e8:	61 ee       	ldi	r22, 0xE1	; 225
   150ea:	7c e5       	ldi	r23, 0x5C	; 92
   150ec:	ce 01       	movw	r24, r28
   150ee:	88 5b       	subi	r24, 0xB8	; 184
   150f0:	9f 4f       	sbci	r25, 0xFF	; 255
   150f2:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4044
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   150f6:	ee 24       	eor	r14, r14
   150f8:	ea 94       	dec	r14
   150fa:	fe 2c       	mov	r15, r14
   150fc:	00 ee       	ldi	r16, 0xE0	; 224
   150fe:	17 e0       	ldi	r17, 0x07	; 7
   15100:	21 e0       	ldi	r18, 0x01	; 1
   15102:	44 eb       	ldi	r20, 0xB4	; 180
   15104:	50 e0       	ldi	r21, 0x00	; 0
   15106:	6e e1       	ldi	r22, 0x1E	; 30
   15108:	70 e0       	ldi	r23, 0x00	; 0
   1510a:	ce 01       	movw	r24, r28
   1510c:	88 5b       	subi	r24, 0xB8	; 184
   1510e:	9f 4f       	sbci	r25, 0xFF	; 255
   15110:	0e 94 27 b1 	call	0x1624e	; 0x1624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>
   15114:	88 e9       	ldi	r24, 0x98	; 152
   15116:	9b e0       	ldi	r25, 0x0B	; 11
   15118:	c3 5c       	subi	r28, 0xC3	; 195
   1511a:	de 4f       	sbci	r29, 0xFE	; 254
   1511c:	99 83       	std	Y+1, r25	; 0x01
   1511e:	88 83       	st	Y, r24
   15120:	cd 53       	subi	r28, 0x3D	; 61
   15122:	d1 40       	sbci	r29, 0x01	; 1
   15124:	a0 e7       	ldi	r26, 0x70	; 112
   15126:	bb e0       	ldi	r27, 0x0B	; 11
   15128:	c5 5c       	subi	r28, 0xC5	; 197
   1512a:	de 4f       	sbci	r29, 0xFE	; 254
   1512c:	b9 83       	std	Y+1, r27	; 0x01
   1512e:	a8 83       	st	Y, r26
   15130:	cb 53       	subi	r28, 0x3B	; 59
   15132:	d1 40       	sbci	r29, 0x01	; 1
   15134:	a4 e8       	ldi	r26, 0x84	; 132
   15136:	ca 2e       	mov	r12, r26
   15138:	ab e0       	ldi	r26, 0x0B	; 11
   1513a:	da 2e       	mov	r13, r26
   1513c:	f1 2c       	mov	r15, r1
   1513e:	e1 2c       	mov	r14, r1
operator new():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   15140:	8c e3       	ldi	r24, 0x3C	; 60
   15142:	90 e0       	ldi	r25, 0x00	; 0
   15144:	0e 94 66 d9 	call	0x1b2cc	; 0x1b2cc <malloc>
   15148:	8c 01       	movw	r16, r24
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
   1514a:	c3 5c       	subi	r28, 0xC3	; 195
   1514c:	de 4f       	sbci	r29, 0xFE	; 254
   1514e:	88 81       	ld	r24, Y
   15150:	99 81       	ldd	r25, Y+1	; 0x01
   15152:	cd 53       	subi	r28, 0x3D	; 61
   15154:	d1 40       	sbci	r29, 0x01	; 1
   15156:	f8 01       	movw	r30, r16
   15158:	97 8f       	std	Z+31, r25	; 0x1f
   1515a:	86 8f       	std	Z+30, r24	; 0x1e
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
   1515c:	c5 5c       	subi	r28, 0xC5	; 197
   1515e:	de 4f       	sbci	r29, 0xFE	; 254
   15160:	a8 81       	ld	r26, Y
   15162:	b9 81       	ldd	r27, Y+1	; 0x01
   15164:	cb 53       	subi	r28, 0x3B	; 59
   15166:	d1 40       	sbci	r29, 0x01	; 1
   15168:	b5 8f       	std	Z+29, r27	; 0x1d
   1516a:	a4 8f       	std	Z+28, r26	; 0x1c
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
   1516c:	d1 a2       	std	Z+33, r13	; 0x21
   1516e:	c0 a2       	std	Z+32, r12	; 0x20
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
   15170:	12 ae       	std	Z+58, r1	; 0x3a
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   15172:	12 aa       	std	Z+50, r1	; 0x32
   15174:	13 aa       	std	Z+51, r1	; 0x33
   15176:	14 aa       	std	Z+52, r1	; 0x34
   15178:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   1517a:	80 e0       	ldi	r24, 0x00	; 0
   1517c:	90 e0       	ldi	r25, 0x00	; 0
   1517e:	af e7       	ldi	r26, 0x7F	; 127
   15180:	b3 e4       	ldi	r27, 0x43	; 67
   15182:	86 ab       	std	Z+54, r24	; 0x36
   15184:	97 ab       	std	Z+55, r25	; 0x37
   15186:	a0 af       	std	Z+56, r26	; 0x38
   15188:	b1 af       	std	Z+57, r27	; 0x39
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   1518a:	84 e6       	ldi	r24, 0x64	; 100
   1518c:	90 e0       	ldi	r25, 0x00	; 0
   1518e:	a0 e0       	ldi	r26, 0x00	; 0
   15190:	b0 e0       	ldi	r27, 0x00	; 0
   15192:	86 a7       	std	Z+46, r24	; 0x2e
   15194:	97 a7       	std	Z+47, r25	; 0x2f
   15196:	a0 ab       	std	Z+48, r26	; 0x30
   15198:	b1 ab       	std	Z+49, r27	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:33

    PID::SetControllerDirection(ControllerDirection);
   1519a:	70 e0       	ldi	r23, 0x00	; 0
   1519c:	60 e0       	ldi	r22, 0x00	; 0
   1519e:	c8 01       	movw	r24, r16
   151a0:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <PID::SetControllerDirection(int)>
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   151a4:	e1 e0       	ldi	r30, 0x01	; 1
   151a6:	f0 e0       	ldi	r31, 0x00	; 0
   151a8:	d8 01       	movw	r26, r16
   151aa:	5b 96       	adiw	r26, 0x1b	; 27
   151ac:	fc 93       	st	X, r31
   151ae:	ee 93       	st	-X, r30
   151b0:	5a 97       	sbiw	r26, 0x1a	; 26
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
   151b2:	f1 e0       	ldi	r31, 0x01	; 1
   151b4:	db 96       	adiw	r26, 0x3b	; 59
   151b6:	fc 93       	st	X, r31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   151b8:	80 e0       	ldi	r24, 0x00	; 0
   151ba:	90 e0       	ldi	r25, 0x00	; 0
   151bc:	a0 e0       	ldi	r26, 0x00	; 0
   151be:	b0 e4       	ldi	r27, 0x40	; 64
   151c0:	f8 01       	movw	r30, r16
   151c2:	80 83       	st	Z, r24
   151c4:	91 83       	std	Z+1, r25	; 0x01
   151c6:	a2 83       	std	Z+2, r26	; 0x02
   151c8:	b3 83       	std	Z+3, r27	; 0x03
   151ca:	80 e0       	ldi	r24, 0x00	; 0
   151cc:	90 e0       	ldi	r25, 0x00	; 0
   151ce:	a0 ea       	ldi	r26, 0xA0	; 160
   151d0:	b0 e4       	ldi	r27, 0x40	; 64
   151d2:	84 83       	std	Z+4, r24	; 0x04
   151d4:	95 83       	std	Z+5, r25	; 0x05
   151d6:	a6 83       	std	Z+6, r26	; 0x06
   151d8:	b7 83       	std	Z+7, r27	; 0x07
   151da:	80 e0       	ldi	r24, 0x00	; 0
   151dc:	90 e0       	ldi	r25, 0x00	; 0
   151de:	a0 e8       	ldi	r26, 0x80	; 128
   151e0:	bf e3       	ldi	r27, 0x3F	; 63
   151e2:	80 87       	std	Z+8, r24	; 0x08
   151e4:	91 87       	std	Z+9, r25	; 0x09
   151e6:	a2 87       	std	Z+10, r26	; 0x0a
   151e8:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
   151ea:	66 a5       	ldd	r22, Z+46	; 0x2e
   151ec:	77 a5       	ldd	r23, Z+47	; 0x2f
   151ee:	80 a9       	ldd	r24, Z+48	; 0x30
   151f0:	91 a9       	ldd	r25, Z+49	; 0x31
   151f2:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
   151f6:	20 e0       	ldi	r18, 0x00	; 0
   151f8:	30 e0       	ldi	r19, 0x00	; 0
   151fa:	4a e7       	ldi	r20, 0x7A	; 122
   151fc:	54 e4       	ldi	r21, 0x44	; 68
   151fe:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
   15202:	4b 01       	movw	r8, r22
   15204:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
   15206:	80 e0       	ldi	r24, 0x00	; 0
   15208:	90 e0       	ldi	r25, 0x00	; 0
   1520a:	a0 e0       	ldi	r26, 0x00	; 0
   1520c:	b0 e4       	ldi	r27, 0x40	; 64
   1520e:	f8 01       	movw	r30, r16
   15210:	84 87       	std	Z+12, r24	; 0x0c
   15212:	95 87       	std	Z+13, r25	; 0x0d
   15214:	a6 87       	std	Z+14, r26	; 0x0e
   15216:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
   15218:	20 e0       	ldi	r18, 0x00	; 0
   1521a:	30 e0       	ldi	r19, 0x00	; 0
   1521c:	40 ea       	ldi	r20, 0xA0	; 160
   1521e:	50 e4       	ldi	r21, 0x40	; 64
   15220:	c5 01       	movw	r24, r10
   15222:	b4 01       	movw	r22, r8
   15224:	0e 94 fd dd 	call	0x1bbfa	; 0x1bbfa <__mulsf3>
   15228:	1b 01       	movw	r2, r22
   1522a:	2c 01       	movw	r4, r24
   1522c:	d8 01       	movw	r26, r16
   1522e:	50 96       	adiw	r26, 0x10	; 16
   15230:	2d 92       	st	X+, r2
   15232:	3d 92       	st	X+, r3
   15234:	4d 92       	st	X+, r4
   15236:	5c 92       	st	X, r5
   15238:	53 97       	sbiw	r26, 0x13	; 19
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
   1523a:	a5 01       	movw	r20, r10
   1523c:	94 01       	movw	r18, r8
   1523e:	60 e0       	ldi	r22, 0x00	; 0
   15240:	70 e0       	ldi	r23, 0x00	; 0
   15242:	80 e8       	ldi	r24, 0x80	; 128
   15244:	9f e3       	ldi	r25, 0x3F	; 63
   15246:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
   1524a:	4b 01       	movw	r8, r22
   1524c:	5c 01       	movw	r10, r24
   1524e:	f8 01       	movw	r30, r16
   15250:	84 8a       	std	Z+20, r8	; 0x14
   15252:	95 8a       	std	Z+21, r9	; 0x15
   15254:	a6 8a       	std	Z+22, r10	; 0x16
   15256:	b7 8a       	std	Z+23, r11	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
   15258:	80 8d       	ldd	r24, Z+24	; 0x18
   1525a:	91 8d       	ldd	r25, Z+25	; 0x19
   1525c:	01 97       	sbiw	r24, 0x01	; 1
   1525e:	11 f5       	brne	.+68     	; 0x152a4 <setup+0x1bec>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
   15260:	80 e0       	ldi	r24, 0x00	; 0
   15262:	90 e0       	ldi	r25, 0x00	; 0
   15264:	a0 e0       	ldi	r26, 0x00	; 0
   15266:	b0 ec       	ldi	r27, 0xC0	; 192
   15268:	84 87       	std	Z+12, r24	; 0x0c
   1526a:	95 87       	std	Z+13, r25	; 0x0d
   1526c:	a6 87       	std	Z+14, r26	; 0x0e
   1526e:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
   15270:	a2 01       	movw	r20, r4
   15272:	91 01       	movw	r18, r2
   15274:	60 e0       	ldi	r22, 0x00	; 0
   15276:	70 e0       	ldi	r23, 0x00	; 0
   15278:	cb 01       	movw	r24, r22
   1527a:	0e 94 64 df 	call	0x1bec8	; 0x1bec8 <__subsf3>
   1527e:	d8 01       	movw	r26, r16
   15280:	50 96       	adiw	r26, 0x10	; 16
   15282:	6d 93       	st	X+, r22
   15284:	7d 93       	st	X+, r23
   15286:	8d 93       	st	X+, r24
   15288:	9c 93       	st	X, r25
   1528a:	53 97       	sbiw	r26, 0x13	; 19
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
   1528c:	a5 01       	movw	r20, r10
   1528e:	94 01       	movw	r18, r8
   15290:	60 e0       	ldi	r22, 0x00	; 0
   15292:	70 e0       	ldi	r23, 0x00	; 0
   15294:	cb 01       	movw	r24, r22
   15296:	0e 94 64 df 	call	0x1bec8	; 0x1bec8 <__subsf3>
   1529a:	f8 01       	movw	r30, r16
   1529c:	64 8b       	std	Z+20, r22	; 0x14
   1529e:	75 8b       	std	Z+21, r23	; 0x15
   152a0:	86 8b       	std	Z+22, r24	; 0x16
   152a2:	97 8b       	std	Z+23, r25	; 0x17
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd, POn);

    lastTime = (millis() / 1000) - SampleTime;
   152a4:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   152a8:	28 ee       	ldi	r18, 0xE8	; 232
   152aa:	33 e0       	ldi	r19, 0x03	; 3
   152ac:	40 e0       	ldi	r20, 0x00	; 0
   152ae:	50 e0       	ldi	r21, 0x00	; 0
   152b0:	0e 94 09 df 	call	0x1be12	; 0x1be12 <__udivmodsi4>
   152b4:	f8 01       	movw	r30, r16
   152b6:	86 a5       	ldd	r24, Z+46	; 0x2e
   152b8:	97 a5       	ldd	r25, Z+47	; 0x2f
   152ba:	a0 a9       	ldd	r26, Z+48	; 0x30
   152bc:	b1 a9       	ldd	r27, Z+49	; 0x31
   152be:	28 1b       	sub	r18, r24
   152c0:	39 0b       	sbc	r19, r25
   152c2:	4a 0b       	sbc	r20, r26
   152c4:	5b 0b       	sbc	r21, r27
   152c6:	d8 01       	movw	r26, r16
   152c8:	22 a3       	std	Z+34, r18	; 0x22
   152ca:	33 a3       	std	Z+35, r19	; 0x23
   152cc:	44 a3       	std	Z+36, r20	; 0x24
   152ce:	55 a3       	std	Z+37, r21	; 0x25
thermostat_init_pid():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:42

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
  {
    array_pids[p] = new PID(&PID_Input[p], &PID_Output[p], &PID_Setpoint[p], 2, 5, 1, DIRECT);
   152d0:	e0 91 e2 0d 	lds	r30, 0x0DE2	; 0x800de2 <array_pids>
   152d4:	f0 91 e3 0d 	lds	r31, 0x0DE3	; 0x800de3 <array_pids+0x1>
   152d8:	ee 0d       	add	r30, r14
   152da:	ff 1d       	adc	r31, r15
   152dc:	11 83       	std	Z+1, r17	; 0x01
   152de:	00 83       	st	Z, r16
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
   152e0:	da 96       	adiw	r26, 0x3a	; 58
   152e2:	8c 91       	ld	r24, X
   152e4:	da 97       	sbiw	r26, 0x3a	; 58
   152e6:	81 11       	cpse	r24, r1
   152e8:	d5 cc       	rjmp	.-1622   	; 0x14c94 <setup+0x15dc>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   outputSum = *myOutput;
   152ea:	5e 96       	adiw	r26, 0x1e	; 30
   152ec:	ed 91       	ld	r30, X+
   152ee:	fc 91       	ld	r31, X
   152f0:	80 80       	ld	r8, Z
   152f2:	91 80       	ldd	r9, Z+1	; 0x01
   152f4:	a2 80       	ldd	r10, Z+2	; 0x02
   152f6:	b3 80       	ldd	r11, Z+3	; 0x03
   152f8:	f8 01       	movw	r30, r16
   152fa:	86 a2       	std	Z+38, r8	; 0x26
   152fc:	97 a2       	std	Z+39, r9	; 0x27
   152fe:	a0 a6       	std	Z+40, r10	; 0x28
   15300:	b1 a6       	std	Z+41, r11	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
   15302:	04 8c       	ldd	r0, Z+28	; 0x1c
   15304:	f5 8d       	ldd	r31, Z+29	; 0x1d
   15306:	e0 2d       	mov	r30, r0
   15308:	80 81       	ld	r24, Z
   1530a:	91 81       	ldd	r25, Z+1	; 0x01
   1530c:	a2 81       	ldd	r26, Z+2	; 0x02
   1530e:	b3 81       	ldd	r27, Z+3	; 0x03
   15310:	f8 01       	movw	r30, r16
   15312:	82 a7       	std	Z+42, r24	; 0x2a
   15314:	93 a7       	std	Z+43, r25	; 0x2b
   15316:	a4 a7       	std	Z+44, r26	; 0x2c
   15318:	b5 a7       	std	Z+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
   1531a:	26 a8       	ldd	r2, Z+54	; 0x36
   1531c:	37 a8       	ldd	r3, Z+55	; 0x37
   1531e:	40 ac       	ldd	r4, Z+56	; 0x38
   15320:	51 ac       	ldd	r5, Z+57	; 0x39
   15322:	a2 01       	movw	r20, r4
   15324:	91 01       	movw	r18, r2
   15326:	c5 01       	movw	r24, r10
   15328:	b4 01       	movw	r22, r8
   1532a:	0e 94 79 e0 	call	0x1c0f2	; 0x1c0f2 <__gesf2>
   1532e:	18 16       	cp	r1, r24
   15330:	0c f0       	brlt	.+2      	; 0x15334 <setup+0x1c7c>
   15332:	a3 cc       	rjmp	.-1722   	; 0x14c7a <setup+0x15c2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
   else if(outputSum < outMin) outputSum = outMin;
   15334:	d8 01       	movw	r26, r16
   15336:	96 96       	adiw	r26, 0x26	; 38
   15338:	2d 92       	st	X+, r2
   1533a:	3d 92       	st	X+, r3
   1533c:	4d 92       	st	X+, r4
   1533e:	5c 92       	st	X, r5
   15340:	99 97       	sbiw	r26, 0x29	; 41
   15342:	a8 cc       	rjmp	.-1712   	; 0x14c94 <setup+0x15dc>

00015344 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   15344:	fc 01       	movw	r30, r24
   15346:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
   15348:	44 8d       	ldd	r20, Z+28	; 0x1c
   1534a:	25 2f       	mov	r18, r21
   1534c:	30 e0       	ldi	r19, 0x00	; 0
   1534e:	84 2f       	mov	r24, r20
   15350:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   15352:	82 1b       	sub	r24, r18
   15354:	93 0b       	sbc	r25, r19
   15356:	54 17       	cp	r21, r20
   15358:	10 f0       	brcs	.+4      	; 0x1535e <HardwareSerial::availableForWrite()+0x1a>
   1535a:	cf 96       	adiw	r24, 0x3f	; 63
   1535c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
   1535e:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
   15360:	08 95       	ret

00015362 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
   15362:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
   15364:	91 8d       	ldd	r25, Z+25	; 0x19
   15366:	82 8d       	ldd	r24, Z+26	; 0x1a
   15368:	98 17       	cp	r25, r24
   1536a:	61 f0       	breq	.+24     	; 0x15384 <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
   1536c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1536e:	ae 0f       	add	r26, r30
   15370:	bf 2f       	mov	r27, r31
   15372:	b1 1d       	adc	r27, r1
   15374:	5d 96       	adiw	r26, 0x1d	; 29
   15376:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
   15378:	92 8d       	ldd	r25, Z+26	; 0x1a
   1537a:	9f 5f       	subi	r25, 0xFF	; 255
   1537c:	9f 73       	andi	r25, 0x3F	; 63
   1537e:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
   15380:	90 e0       	ldi	r25, 0x00	; 0
   15382:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   15384:	8f ef       	ldi	r24, 0xFF	; 255
   15386:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
   15388:	08 95       	ret

0001538a <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
   1538a:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
   1538c:	91 8d       	ldd	r25, Z+25	; 0x19
   1538e:	82 8d       	ldd	r24, Z+26	; 0x1a
   15390:	98 17       	cp	r25, r24
   15392:	31 f0       	breq	.+12     	; 0x153a0 <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
   15394:	82 8d       	ldd	r24, Z+26	; 0x1a
   15396:	e8 0f       	add	r30, r24
   15398:	f1 1d       	adc	r31, r1
   1539a:	85 8d       	ldd	r24, Z+29	; 0x1d
   1539c:	90 e0       	ldi	r25, 0x00	; 0
   1539e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   153a0:	8f ef       	ldi	r24, 0xFF	; 255
   153a2:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
   153a4:	08 95       	ret

000153a6 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
   153a6:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
   153a8:	91 8d       	ldd	r25, Z+25	; 0x19
   153aa:	22 8d       	ldd	r18, Z+26	; 0x1a
   153ac:	89 2f       	mov	r24, r25
   153ae:	90 e0       	ldi	r25, 0x00	; 0
   153b0:	80 5c       	subi	r24, 0xC0	; 192
   153b2:	9f 4f       	sbci	r25, 0xFF	; 255
   153b4:	82 1b       	sub	r24, r18
   153b6:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
   153b8:	8f 73       	andi	r24, 0x3F	; 63
   153ba:	99 27       	eor	r25, r25
   153bc:	08 95       	ret

000153be <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:82
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
   153be:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
   153c0:	a4 8d       	ldd	r26, Z+28	; 0x1c
   153c2:	a8 0f       	add	r26, r24
   153c4:	b9 2f       	mov	r27, r25
   153c6:	b1 1d       	adc	r27, r1
   153c8:	a3 5a       	subi	r26, 0xA3	; 163
   153ca:	bf 4f       	sbci	r27, 0xFF	; 255
   153cc:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
   153ce:	84 8d       	ldd	r24, Z+28	; 0x1c
   153d0:	90 e0       	ldi	r25, 0x00	; 0
   153d2:	01 96       	adiw	r24, 0x01	; 1
   153d4:	8f 73       	andi	r24, 0x3F	; 63
   153d6:	99 27       	eor	r25, r25
   153d8:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
   153da:	a6 89       	ldd	r26, Z+22	; 0x16
   153dc:	b7 89       	ldd	r27, Z+23	; 0x17
   153de:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
   153e0:	a0 89       	ldd	r26, Z+16	; 0x10
   153e2:	b1 89       	ldd	r27, Z+17	; 0x11
   153e4:	8c 91       	ld	r24, X
   153e6:	80 64       	ori	r24, 0x40	; 64
   153e8:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
   153ea:	93 8d       	ldd	r25, Z+27	; 0x1b
   153ec:	84 8d       	ldd	r24, Z+28	; 0x1c
   153ee:	98 13       	cpse	r25, r24
   153f0:	06 c0       	rjmp	.+12     	; 0x153fe <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
   153f2:	02 88       	ldd	r0, Z+18	; 0x12
   153f4:	f3 89       	ldd	r31, Z+19	; 0x13
   153f6:	e0 2d       	mov	r30, r0
   153f8:	80 81       	ld	r24, Z
   153fa:	8f 7d       	andi	r24, 0xDF	; 223
   153fc:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
   153fe:	08 95       	ret

00015400 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
   15400:	ef 92       	push	r14
   15402:	ff 92       	push	r15
   15404:	0f 93       	push	r16
   15406:	1f 93       	push	r17
   15408:	cf 93       	push	r28
   1540a:	df 93       	push	r29
   1540c:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
   1540e:	81 e0       	ldi	r24, 0x01	; 1
   15410:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
   15412:	9b 8d       	ldd	r25, Y+27	; 0x1b
   15414:	8c 8d       	ldd	r24, Y+28	; 0x1c
   15416:	98 13       	cpse	r25, r24
   15418:	16 c0       	rjmp	.+44     	; 0x15446 <HardwareSerial::write(unsigned char)+0x46>
   1541a:	e8 89       	ldd	r30, Y+16	; 0x10
   1541c:	f9 89       	ldd	r31, Y+17	; 0x11
   1541e:	80 81       	ld	r24, Z
   15420:	85 ff       	sbrs	r24, 5
   15422:	11 c0       	rjmp	.+34     	; 0x15446 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
   15424:	ee 89       	ldd	r30, Y+22	; 0x16
   15426:	ff 89       	ldd	r31, Y+23	; 0x17
   15428:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
   1542a:	e8 89       	ldd	r30, Y+16	; 0x10
   1542c:	f9 89       	ldd	r31, Y+17	; 0x11
   1542e:	80 81       	ld	r24, Z
   15430:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
   15432:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
   15434:	81 e0       	ldi	r24, 0x01	; 1
   15436:	90 e0       	ldi	r25, 0x00	; 0
   15438:	df 91       	pop	r29
   1543a:	cf 91       	pop	r28
   1543c:	1f 91       	pop	r17
   1543e:	0f 91       	pop	r16
   15440:	ff 90       	pop	r15
   15442:	ef 90       	pop	r14
   15444:	08 95       	ret
   15446:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
   15448:	0b 8d       	ldd	r16, Y+27	; 0x1b
   1544a:	10 e0       	ldi	r17, 0x00	; 0
   1544c:	0f 5f       	subi	r16, 0xFF	; 255
   1544e:	1f 4f       	sbci	r17, 0xFF	; 255
   15450:	0f 73       	andi	r16, 0x3F	; 63
   15452:	11 27       	eor	r17, r17
   15454:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
   15456:	8c 8d       	ldd	r24, Y+28	; 0x1c
   15458:	8e 11       	cpse	r24, r14
   1545a:	0c c0       	rjmp	.+24     	; 0x15474 <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
   1545c:	0f b6       	in	r0, 0x3f	; 63
   1545e:	07 fc       	sbrc	r0, 7
   15460:	fa cf       	rjmp	.-12     	; 0x15456 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
   15462:	e8 89       	ldd	r30, Y+16	; 0x10
   15464:	f9 89       	ldd	r31, Y+17	; 0x11
   15466:	80 81       	ld	r24, Z
   15468:	85 ff       	sbrs	r24, 5
   1546a:	f5 cf       	rjmp	.-22     	; 0x15456 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
   1546c:	ce 01       	movw	r24, r28
   1546e:	0e 94 df a9 	call	0x153be	; 0x153be <HardwareSerial::_tx_udr_empty_irq()>
   15472:	f1 cf       	rjmp	.-30     	; 0x15456 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
   15474:	eb 8d       	ldd	r30, Y+27	; 0x1b
   15476:	ec 0f       	add	r30, r28
   15478:	fd 2f       	mov	r31, r29
   1547a:	f1 1d       	adc	r31, r1
   1547c:	e3 5a       	subi	r30, 0xA3	; 163
   1547e:	ff 4f       	sbci	r31, 0xFF	; 255
   15480:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
   15482:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
   15484:	ea 89       	ldd	r30, Y+18	; 0x12
   15486:	fb 89       	ldd	r31, Y+19	; 0x13
   15488:	80 81       	ld	r24, Z
   1548a:	80 62       	ori	r24, 0x20	; 32
   1548c:	d2 cf       	rjmp	.-92     	; 0x15432 <HardwareSerial::write(unsigned char)+0x32>

0001548e <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
   1548e:	cf 93       	push	r28
   15490:	df 93       	push	r29
   15492:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
   15494:	88 8d       	ldd	r24, Y+24	; 0x18
   15496:	88 23       	and	r24, r24
   15498:	b9 f0       	breq	.+46     	; 0x154c8 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
   1549a:	aa 89       	ldd	r26, Y+18	; 0x12
   1549c:	bb 89       	ldd	r27, Y+19	; 0x13
   1549e:	e8 89       	ldd	r30, Y+16	; 0x10
   154a0:	f9 89       	ldd	r31, Y+17	; 0x11
   154a2:	8c 91       	ld	r24, X
   154a4:	85 fd       	sbrc	r24, 5
   154a6:	03 c0       	rjmp	.+6      	; 0x154ae <HardwareSerial::flush()+0x20>
   154a8:	80 81       	ld	r24, Z
   154aa:	86 fd       	sbrc	r24, 6
   154ac:	0d c0       	rjmp	.+26     	; 0x154c8 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
   154ae:	0f b6       	in	r0, 0x3f	; 63
   154b0:	07 fc       	sbrc	r0, 7
   154b2:	f7 cf       	rjmp	.-18     	; 0x154a2 <HardwareSerial::flush()+0x14>
   154b4:	8c 91       	ld	r24, X
   154b6:	85 ff       	sbrs	r24, 5
   154b8:	f2 cf       	rjmp	.-28     	; 0x1549e <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
   154ba:	80 81       	ld	r24, Z
   154bc:	85 ff       	sbrs	r24, 5
   154be:	ed cf       	rjmp	.-38     	; 0x1549a <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
   154c0:	ce 01       	movw	r24, r28
   154c2:	0e 94 df a9 	call	0x153be	; 0x153be <HardwareSerial::_tx_udr_empty_irq()>
   154c6:	e9 cf       	rjmp	.-46     	; 0x1549a <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
   154c8:	df 91       	pop	r29
   154ca:	cf 91       	pop	r28
   154cc:	08 95       	ret

000154ce <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
   154ce:	80 e3       	ldi	r24, 0x30	; 48
   154d0:	9d e0       	ldi	r25, 0x0D	; 13
   154d2:	0e 94 d3 a9 	call	0x153a6	; 0x153a6 <HardwareSerial::available()>
   154d6:	21 e0       	ldi	r18, 0x01	; 1
   154d8:	89 2b       	or	r24, r25
   154da:	09 f4       	brne	.+2      	; 0x154de <Serial0_available()+0x10>
   154dc:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
   154de:	82 2f       	mov	r24, r18
   154e0:	08 95       	ret

000154e2 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
   154e2:	80 e0       	ldi	r24, 0x00	; 0
   154e4:	90 e0       	ldi	r25, 0x00	; 0
   154e6:	89 2b       	or	r24, r25
   154e8:	29 f0       	breq	.+10     	; 0x154f4 <serialEventRun()+0x12>
   154ea:	0e 94 67 aa 	call	0x154ce	; 0x154ce <Serial0_available()>
   154ee:	81 11       	cpse	r24, r1
   154f0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
   154f4:	80 e0       	ldi	r24, 0x00	; 0
   154f6:	90 e0       	ldi	r25, 0x00	; 0
   154f8:	89 2b       	or	r24, r25
   154fa:	49 f0       	breq	.+18     	; 0x1550e <serialEventRun()+0x2c>
   154fc:	80 e0       	ldi	r24, 0x00	; 0
   154fe:	90 e0       	ldi	r25, 0x00	; 0
   15500:	89 2b       	or	r24, r25
   15502:	29 f0       	breq	.+10     	; 0x1550e <serialEventRun()+0x2c>
   15504:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   15508:	81 11       	cpse	r24, r1
   1550a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
   1550e:	08 95       	ret

00015510 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   15510:	af 92       	push	r10
   15512:	bf 92       	push	r11
   15514:	cf 92       	push	r12
   15516:	df 92       	push	r13
   15518:	ef 92       	push	r14
   1551a:	ff 92       	push	r15
   1551c:	0f 93       	push	r16
   1551e:	1f 93       	push	r17
   15520:	cf 93       	push	r28
   15522:	df 93       	push	r29
   15524:	6c 01       	movw	r12, r24
   15526:	7b 01       	movw	r14, r22
   15528:	8b 01       	movw	r16, r22
   1552a:	04 0f       	add	r16, r20
   1552c:	15 1f       	adc	r17, r21
   1552e:	eb 01       	movw	r28, r22
   15530:	5e 01       	movw	r10, r28
   15532:	ae 18       	sub	r10, r14
   15534:	bf 08       	sbc	r11, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
   15536:	c0 17       	cp	r28, r16
   15538:	d1 07       	cpc	r29, r17
   1553a:	59 f0       	breq	.+22     	; 0x15552 <Print::write(unsigned char const*, unsigned int)+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
   1553c:	69 91       	ld	r22, Y+
   1553e:	d6 01       	movw	r26, r12
   15540:	ed 91       	ld	r30, X+
   15542:	fc 91       	ld	r31, X
   15544:	01 90       	ld	r0, Z+
   15546:	f0 81       	ld	r31, Z
   15548:	e0 2d       	mov	r30, r0
   1554a:	c6 01       	movw	r24, r12
   1554c:	19 95       	eicall
   1554e:	89 2b       	or	r24, r25
   15550:	79 f7       	brne	.-34     	; 0x15530 <Print::write(unsigned char const*, unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
   15552:	c5 01       	movw	r24, r10
   15554:	df 91       	pop	r29
   15556:	cf 91       	pop	r28
   15558:	1f 91       	pop	r17
   1555a:	0f 91       	pop	r16
   1555c:	ff 90       	pop	r15
   1555e:	ef 90       	pop	r14
   15560:	df 90       	pop	r13
   15562:	cf 90       	pop	r12
   15564:	bf 90       	pop	r11
   15566:	af 90       	pop	r10
   15568:	08 95       	ret

0001556a <delayMicroseconds>:
delayMicroseconds():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
   1556a:	82 30       	cpi	r24, 0x02	; 2
   1556c:	91 05       	cpc	r25, r1
   1556e:	38 f0       	brcs	.+14     	; 0x1557e <delayMicroseconds+0x14>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
   15570:	88 0f       	add	r24, r24
   15572:	99 1f       	adc	r25, r25
   15574:	88 0f       	add	r24, r24
   15576:	99 1f       	adc	r25, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
   15578:	05 97       	sbiw	r24, 0x05	; 5
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
   1557a:	01 97       	sbiw	r24, 0x01	; 1
   1557c:	f1 f7       	brne	.-4      	; 0x1557a <delayMicroseconds+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
   1557e:	08 95       	ret

00015580 <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
   15580:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
   15582:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
   15584:	80 91 52 12 	lds	r24, 0x1252	; 0x801252 <timer0_overflow_count>
   15588:	90 91 53 12 	lds	r25, 0x1253	; 0x801253 <timer0_overflow_count+0x1>
   1558c:	a0 91 54 12 	lds	r26, 0x1254	; 0x801254 <timer0_overflow_count+0x2>
   15590:	b0 91 55 12 	lds	r27, 0x1255	; 0x801255 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
   15594:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
   15596:	a8 9b       	sbis	0x15, 0	; 21
   15598:	05 c0       	rjmp	.+10     	; 0x155a4 <micros+0x24>
   1559a:	2f 3f       	cpi	r18, 0xFF	; 255
   1559c:	19 f0       	breq	.+6      	; 0x155a4 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
   1559e:	01 96       	adiw	r24, 0x01	; 1
   155a0:	a1 1d       	adc	r26, r1
   155a2:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
   155a4:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
   155a6:	ba 2f       	mov	r27, r26
   155a8:	a9 2f       	mov	r26, r25
   155aa:	98 2f       	mov	r25, r24
   155ac:	88 27       	eor	r24, r24
   155ae:	bc 01       	movw	r22, r24
   155b0:	cd 01       	movw	r24, r26
   155b2:	62 0f       	add	r22, r18
   155b4:	71 1d       	adc	r23, r1
   155b6:	81 1d       	adc	r24, r1
   155b8:	91 1d       	adc	r25, r1
   155ba:	42 e0       	ldi	r20, 0x02	; 2
   155bc:	66 0f       	add	r22, r22
   155be:	77 1f       	adc	r23, r23
   155c0:	88 1f       	adc	r24, r24
   155c2:	99 1f       	adc	r25, r25
   155c4:	4a 95       	dec	r20
   155c6:	d1 f7       	brne	.-12     	; 0x155bc <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
   155c8:	08 95       	ret

000155ca <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:52
  this->_timeOffset     = timeOffset;
  this->_poolServerName = poolServerName;
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
   155ca:	cf 93       	push	r28
   155cc:	df 93       	push	r29
   155ce:	ec 01       	movw	r28, r24
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
   155d0:	89 e3       	ldi	r24, 0x39	; 57
   155d2:	95 e0       	ldi	r25, 0x05	; 5
   155d4:	9e 83       	std	Y+6, r25	; 0x06
   155d6:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
   155d8:	88 81       	ld	r24, Y
   155da:	99 81       	ldd	r25, Y+1	; 0x01
   155dc:	dc 01       	movw	r26, r24
   155de:	ed 91       	ld	r30, X+
   155e0:	fc 91       	ld	r31, X
   155e2:	06 84       	ldd	r0, Z+14	; 0x0e
   155e4:	f7 85       	ldd	r31, Z+15	; 0x0f
   155e6:	e0 2d       	mov	r30, r0
   155e8:	69 e3       	ldi	r22, 0x39	; 57
   155ea:	75 e0       	ldi	r23, 0x05	; 5
   155ec:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
   155ee:	81 e0       	ldi	r24, 0x01	; 1
   155f0:	8a 83       	std	Y+2, r24	; 0x02
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:54
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}
   155f2:	df 91       	pop	r29
   155f4:	cf 91       	pop	r28
   155f6:	08 95       	ret

000155f8 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.228]>:
_ZN13LCDWIKI_TOUCH22TP_Write_Byte_LowSpeedEh.constprop.228():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:100
	LCD_Set_Rotation(r);
	TP_SetBacklight(10);
}


void LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(uint8_t data)
   155f8:	0f 93       	push	r16
   155fa:	1f 93       	push	r17
   155fc:	cf 93       	push	r28
   155fe:	df 93       	push	r29
   15600:	10 e0       	ldi	r17, 0x00	; 0
   15602:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:105
{
        uint8_t val = 0;
        while(val < 8)
        {
                if(data & (1<< val))
   15604:	c8 2f       	mov	r28, r24
   15606:	d0 e0       	ldi	r29, 0x00	; 0
   15608:	e0 91 78 0f 	lds	r30, 0x0F78	; 0x800f78 <my_touch+0x17>
   1560c:	f0 91 79 0f 	lds	r31, 0x0F79	; 0x800f79 <my_touch+0x18>
   15610:	90 91 81 0f 	lds	r25, 0x0F81	; 0x800f81 <my_touch+0x20>
   15614:	9e 01       	movw	r18, r28
   15616:	00 2e       	mov	r0, r16
   15618:	02 c0       	rjmp	.+4      	; 0x1561e <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.228]+0x26>
   1561a:	35 95       	asr	r19
   1561c:	27 95       	ror	r18
   1561e:	0a 94       	dec	r0
   15620:	e2 f7       	brpl	.-8      	; 0x1561a <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.228]+0x22>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:107
                {
                        TDIN_HIGH;
   15622:	80 81       	ld	r24, Z
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:105
void LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(uint8_t data)
{
        uint8_t val = 0;
        while(val < 8)
        {
                if(data & (1<< val))
   15624:	20 ff       	sbrs	r18, 0
   15626:	31 c0       	rjmp	.+98     	; 0x1568a <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.228]+0x92>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:107
                {
                        TDIN_HIGH;
   15628:	98 2b       	or	r25, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:111
                }
                else
                {
                        TDIN_LOW;
   1562a:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:114
                }

		delay_hus(80);
   1562c:	60 e5       	ldi	r22, 0x50	; 80
   1562e:	70 e0       	ldi	r23, 0x00	; 0
   15630:	80 e0       	ldi	r24, 0x00	; 0
   15632:	90 e0       	ldi	r25, 0x00	; 0
   15634:	0e 94 b4 64 	call	0xc968	; 0xc968 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:115
                TCLK_LOW;
   15638:	e0 91 74 0f 	lds	r30, 0x0F74	; 0x800f74 <my_touch+0x13>
   1563c:	f0 91 75 0f 	lds	r31, 0x0F75	; 0x800f75 <my_touch+0x14>
   15640:	80 81       	ld	r24, Z
   15642:	90 91 7f 0f 	lds	r25, 0x0F7F	; 0x800f7f <my_touch+0x1e>
   15646:	90 95       	com	r25
   15648:	98 23       	and	r25, r24
   1564a:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:116
                delay_hus(120);
   1564c:	68 e7       	ldi	r22, 0x78	; 120
   1564e:	70 e0       	ldi	r23, 0x00	; 0
   15650:	80 e0       	ldi	r24, 0x00	; 0
   15652:	90 e0       	ldi	r25, 0x00	; 0
   15654:	0e 94 b4 64 	call	0xc968	; 0xc968 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:117
                TCLK_HIGH;
   15658:	e0 91 74 0f 	lds	r30, 0x0F74	; 0x800f74 <my_touch+0x13>
   1565c:	f0 91 75 0f 	lds	r31, 0x0F75	; 0x800f75 <my_touch+0x14>
   15660:	80 81       	ld	r24, Z
   15662:	90 91 7f 0f 	lds	r25, 0x0F7F	; 0x800f7f <my_touch+0x1e>
   15666:	89 2b       	or	r24, r25
   15668:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:118
                delay_hus(120);
   1566a:	68 e7       	ldi	r22, 0x78	; 120
   1566c:	70 e0       	ldi	r23, 0x00	; 0
   1566e:	80 e0       	ldi	r24, 0x00	; 0
   15670:	90 e0       	ldi	r25, 0x00	; 0
   15672:	0e 94 b4 64 	call	0xc968	; 0xc968 <delay_hus(unsigned long)>
   15676:	0f 5f       	subi	r16, 0xFF	; 255
   15678:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:103


void LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(uint8_t data)
{
        uint8_t val = 0;
        while(val < 8)
   1567a:	08 30       	cpi	r16, 0x08	; 8
   1567c:	11 05       	cpc	r17, r1
   1567e:	21 f6       	brne	.-120    	; 0x15608 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.228]+0x10>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:121
                delay_hus(120);
                TCLK_HIGH;
                delay_hus(120);
                val++;
        }
}
   15680:	df 91       	pop	r29
   15682:	cf 91       	pop	r28
   15684:	1f 91       	pop	r17
   15686:	0f 91       	pop	r16
   15688:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:111
                {
                        TDIN_HIGH;
                }
                else
                {
                        TDIN_LOW;
   1568a:	90 95       	com	r25
   1568c:	98 23       	and	r25, r24
   1568e:	cd cf       	rjmp	.-102    	; 0x1562a <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.228]+0x32>

00015690 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.173():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:657
{
	Print(st, x, y);
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
   15690:	2f 92       	push	r2
   15692:	3f 92       	push	r3
   15694:	4f 92       	push	r4
   15696:	5f 92       	push	r5
   15698:	6f 92       	push	r6
   1569a:	7f 92       	push	r7
   1569c:	8f 92       	push	r8
   1569e:	9f 92       	push	r9
   156a0:	af 92       	push	r10
   156a2:	bf 92       	push	r11
   156a4:	cf 92       	push	r12
   156a6:	df 92       	push	r13
   156a8:	ef 92       	push	r14
   156aa:	ff 92       	push	r15
   156ac:	0f 93       	push	r16
   156ae:	1f 93       	push	r17
   156b0:	cf 93       	push	r28
   156b2:	df 93       	push	r29
   156b4:	cd b7       	in	r28, 0x3d	; 61
   156b6:	de b7       	in	r29, 0x3e	; 62
   156b8:	2d 97       	sbiw	r28, 0x0d	; 13
   156ba:	0f b6       	in	r0, 0x3f	; 63
   156bc:	f8 94       	cli
   156be:	de bf       	out	0x3e, r29	; 62
   156c0:	0f be       	out	0x3f, r0	; 63
   156c2:	cd bf       	out	0x3d, r28	; 61
   156c4:	fc 01       	movw	r30, r24
   156c6:	a0 81       	ld	r26, Z
   156c8:	b1 81       	ldd	r27, Z+1	; 0x01
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:611
{
	int16_t pos;
	uint16_t len;
	const char * p = (const char *)st;
	size_t n = 0;
	if (x == CENTER || x == RIGHT) 
   156ca:	cb 01       	movw	r24, r22
   156cc:	8e 50       	subi	r24, 0x0E	; 14
   156ce:	97 42       	sbci	r25, 0x27	; 39
   156d0:	02 97       	sbiw	r24, 0x02	; 2
   156d2:	20 f5       	brcc	.+72     	; 0x1571c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x8c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:613
	{
		len = strlen((const char *)st) * 6 * text_size;		
   156d4:	fd 01       	movw	r30, r26
   156d6:	01 90       	ld	r0, Z+
   156d8:	00 20       	and	r0, r0
   156da:	e9 f7       	brne	.-6      	; 0x156d6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x46>
   156dc:	31 97       	sbiw	r30, 0x01	; 1
   156de:	ea 1b       	sub	r30, r26
   156e0:	fb 0b       	sbc	r31, r27
   156e2:	80 91 90 0f 	lds	r24, 0x0F90	; 0x800f90 <my_lcd+0xc>
   156e6:	26 e0       	ldi	r18, 0x06	; 6
   156e8:	82 9f       	mul	r24, r18
   156ea:	c0 01       	movw	r24, r0
   156ec:	11 24       	eor	r1, r1
   156ee:	8e 9f       	mul	r24, r30
   156f0:	90 01       	movw	r18, r0
   156f2:	8f 9f       	mul	r24, r31
   156f4:	30 0d       	add	r19, r0
   156f6:	9e 9f       	mul	r25, r30
   156f8:	30 0d       	add	r19, r0
   156fa:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:614
		pos = (Get_Display_Width() - len); 
   156fc:	80 91 96 0f 	lds	r24, 0x0F96	; 0x800f96 <my_lcd+0x12>
   15700:	90 91 97 0f 	lds	r25, 0x0F97	; 0x800f97 <my_lcd+0x13>
   15704:	82 1b       	sub	r24, r18
   15706:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:615
		if (x == CENTER)
   15708:	6e 30       	cpi	r22, 0x0E	; 14
   1570a:	77 42       	sbci	r23, 0x27	; 39
   1570c:	89 f5       	brne	.+98     	; 0x15770 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0xe0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:617
		{
			x = pos/2;
   1570e:	bc 01       	movw	r22, r24
   15710:	97 ff       	sbrs	r25, 7
   15712:	02 c0       	rjmp	.+4      	; 0x15718 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x88>
   15714:	6f 5f       	subi	r22, 0xFF	; 255
   15716:	7f 4f       	sbci	r23, 0xFF	; 255
   15718:	75 95       	asr	r23
   1571a:	67 95       	ror	r22
Set_Text_Cousur():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:474
}

//set text coordinate
void LCDWIKI_GUI::Set_Text_Cousur(int16_t x, int16_t y)
{
	text_x = x;
   1571c:	70 93 87 0f 	sts	0x0F87, r23	; 0x800f87 <my_lcd+0x3>
   15720:	60 93 86 0f 	sts	0x0F86, r22	; 0x800f86 <my_lcd+0x2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:475
	text_y = y;
   15724:	50 93 89 0f 	sts	0x0F89, r21	; 0x800f89 <my_lcd+0x5>
   15728:	40 93 88 0f 	sts	0x0F88, r20	; 0x800f88 <my_lcd+0x4>
   1572c:	be 83       	std	Y+6, r27	; 0x06
   1572e:	ad 83       	std	Y+5, r26	; 0x05
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:627
		}
	}
    Set_Text_Cousur(x, y);
	while(1)
	{
		unsigned char ch = *(p++);//pgm_read_byte(p++);
   15730:	ed 81       	ldd	r30, Y+5	; 0x05
   15732:	fe 81       	ldd	r31, Y+6	; 0x06
   15734:	91 91       	ld	r25, Z+
   15736:	fe 83       	std	Y+6, r31	; 0x06
   15738:	ed 83       	std	Y+5, r30	; 0x05
   1573a:	89 2f       	mov	r24, r25
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:628
		if(ch == 0)
   1573c:	99 23       	and	r25, r25
   1573e:	09 f4       	brne	.+2      	; 0x15742 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0xb2>
   15740:	dd c0       	rjmp	.+442    	; 0x158fc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x26c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:792
}

//write a char
size_t LCDWIKI_GUI::write(uint8_t c) 
{
	if (c == '\n') 
   15742:	9a 30       	cpi	r25, 0x0A	; 10
   15744:	c9 f4       	brne	.+50     	; 0x15778 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:794
	{
    	text_y += text_size*8;
   15746:	80 91 90 0f 	lds	r24, 0x0F90	; 0x800f90 <my_lcd+0xc>
   1574a:	f8 e0       	ldi	r31, 0x08	; 8
   1574c:	8f 9f       	mul	r24, r31
   1574e:	c0 01       	movw	r24, r0
   15750:	11 24       	eor	r1, r1
   15752:	20 91 88 0f 	lds	r18, 0x0F88	; 0x800f88 <my_lcd+0x4>
   15756:	30 91 89 0f 	lds	r19, 0x0F89	; 0x800f89 <my_lcd+0x5>
   1575a:	82 0f       	add	r24, r18
   1575c:	93 1f       	adc	r25, r19
   1575e:	90 93 89 0f 	sts	0x0F89, r25	; 0x800f89 <my_lcd+0x5>
   15762:	80 93 88 0f 	sts	0x0F88, r24	; 0x800f88 <my_lcd+0x4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:795
    	text_x  = 0;
   15766:	10 92 87 0f 	sts	0x0F87, r1	; 0x800f87 <my_lcd+0x3>
   1576a:	10 92 86 0f 	sts	0x0F86, r1	; 0x800f86 <my_lcd+0x2>
   1576e:	e0 cf       	rjmp	.-64     	; 0x15730 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0xa0>
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:621
		{
			x = pos/2;
		}
		else
		{
			x = pos - 1;
   15770:	bc 01       	movw	r22, r24
   15772:	61 50       	subi	r22, 0x01	; 1
   15774:	71 09       	sbc	r23, r1
   15776:	d2 cf       	rjmp	.-92     	; 0x1571c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x8c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:797
	if (c == '\n') 
	{
    	text_y += text_size*8;
    	text_x  = 0;
 	} 
	else if(c == '\r')
   15778:	9d 30       	cpi	r25, 0x0D	; 13
   1577a:	d1 f2       	breq	.-76     	; 0x15730 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0xa0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   1577c:	20 91 86 0f 	lds	r18, 0x0F86	; 0x800f86 <my_lcd+0x2>
   15780:	30 91 87 0f 	lds	r19, 0x0F87	; 0x800f87 <my_lcd+0x3>
   15784:	39 87       	std	Y+9, r19	; 0x09
   15786:	28 87       	std	Y+8, r18	; 0x08
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   15788:	20 91 96 0f 	lds	r18, 0x0F96	; 0x800f96 <my_lcd+0x12>
   1578c:	30 91 97 0f 	lds	r19, 0x0F97	; 0x800f97 <my_lcd+0x13>
   15790:	48 85       	ldd	r20, Y+8	; 0x08
   15792:	59 85       	ldd	r21, Y+9	; 0x09
   15794:	42 17       	cp	r20, r18
   15796:	53 07       	cpc	r21, r19
   15798:	0c f0       	brlt	.+2      	; 0x1579c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x10c>
   1579a:	88 c0       	rjmp	.+272    	; 0x158ac <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   1579c:	60 90 88 0f 	lds	r6, 0x0F88	; 0x800f88 <my_lcd+0x4>
   157a0:	70 90 89 0f 	lds	r7, 0x0F89	; 0x800f89 <my_lcd+0x5>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   157a4:	20 91 98 0f 	lds	r18, 0x0F98	; 0x800f98 <my_lcd+0x14>
   157a8:	30 91 99 0f 	lds	r19, 0x0F99	; 0x800f99 <my_lcd+0x15>
   157ac:	62 16       	cp	r6, r18
   157ae:	73 06       	cpc	r7, r19
   157b0:	0c f0       	brlt	.+2      	; 0x157b4 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x124>
   157b2:	7c c0       	rjmp	.+248    	; 0x158ac <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   157b4:	50 91 90 0f 	lds	r21, 0x0F90	; 0x800f90 <my_lcd+0xc>
   157b8:	5a 83       	std	Y+2, r21	; 0x02
   157ba:	c5 2e       	mov	r12, r21
   157bc:	d1 2c       	mov	r13, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   157be:	28 85       	ldd	r18, Y+8	; 0x08
   157c0:	39 85       	ldd	r19, Y+9	; 0x09
   157c2:	e6 e0       	ldi	r30, 0x06	; 6
   157c4:	5e 9f       	mul	r21, r30
   157c6:	20 0d       	add	r18, r0
   157c8:	31 1d       	adc	r19, r1
   157ca:	11 24       	eor	r1, r1
   157cc:	12 16       	cp	r1, r18
   157ce:	13 06       	cpc	r1, r19
   157d0:	0c f0       	brlt	.+2      	; 0x157d4 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x144>
   157d2:	6c c0       	rjmp	.+216    	; 0x158ac <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x21c>
   157d4:	96 01       	movw	r18, r12
   157d6:	93 e0       	ldi	r25, 0x03	; 3
   157d8:	22 0f       	add	r18, r18
   157da:	33 1f       	adc	r19, r19
   157dc:	9a 95       	dec	r25
   157de:	e1 f7       	brne	.-8      	; 0x157d8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x148>
   157e0:	26 0d       	add	r18, r6
   157e2:	37 1d       	adc	r19, r7
   157e4:	12 16       	cp	r1, r18
   157e6:	13 06       	cpc	r1, r19
   157e8:	0c f0       	brlt	.+2      	; 0x157ec <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x15c>
   157ea:	60 c0       	rjmp	.+192    	; 0x158ac <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x21c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:557
	{
    	return;
	}		
  	if(c >= 176)
   157ec:	80 3b       	cpi	r24, 0xB0	; 176
   157ee:	08 f0       	brcs	.+2      	; 0x157f2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x162>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:559
  	{
		c++; 
   157f0:	8f 5f       	subi	r24, 0xFF	; 255
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   157f2:	f0 91 91 0f 	lds	r31, 0x0F91	; 0x800f91 <my_lcd+0xd>
   157f6:	ff 83       	std	Y+7, r31	; 0x07
   157f8:	20 90 8c 0f 	lds	r2, 0x0F8C	; 0x800f8c <my_lcd+0x8>
   157fc:	30 90 8d 0f 	lds	r3, 0x0F8D	; 0x800f8d <my_lcd+0x9>
   15800:	20 91 8a 0f 	lds	r18, 0x0F8A	; 0x800f8a <my_lcd+0x6>
   15804:	30 91 8b 0f 	lds	r19, 0x0F8B	; 0x800f8b <my_lcd+0x7>
   15808:	3c 83       	std	Y+4, r19	; 0x04
   1580a:	2b 83       	std	Y+3, r18	; 0x03
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   1580c:	48 85       	ldd	r20, Y+8	; 0x08
   1580e:	59 85       	ldd	r21, Y+9	; 0x09
   15810:	5d 87       	std	Y+13, r21	; 0x0d
   15812:	4c 87       	std	Y+12, r20	; 0x0c
   15814:	5a 01       	movw	r10, r20
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.173():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   15816:	19 82       	std	Y+1, r1	; 0x01
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   15818:	27 eb       	ldi	r18, 0xB7	; 183
   1581a:	32 e6       	ldi	r19, 0x62	; 98
   1581c:	24 1b       	sub	r18, r20
   1581e:	35 0b       	sbc	r19, r21
   15820:	f9 01       	movw	r30, r18
   15822:	45 e0       	ldi	r20, 0x05	; 5
   15824:	84 9f       	mul	r24, r20
   15826:	e0 0d       	add	r30, r0
   15828:	f1 1d       	adc	r31, r1
   1582a:	11 24       	eor	r1, r1
   1582c:	fb 87       	std	Y+11, r31	; 0x0b
   1582e:	ea 87       	std	Y+10, r30	; 0x0a
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   15830:	59 81       	ldd	r21, Y+1	; 0x01
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.173():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
    	{
      		line = 0x0;
   15832:	e0 e0       	ldi	r30, 0x00	; 0
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   15834:	55 30       	cpi	r21, 0x05	; 5
   15836:	29 f0       	breq	.+10     	; 0x15842 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x1b2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   15838:	ea 85       	ldd	r30, Y+10	; 0x0a
   1583a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1583c:	ea 0d       	add	r30, r10
   1583e:	fb 1d       	adc	r31, r11
   15840:	e4 91       	lpm	r30, Z
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.173():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    	{
      		line = 0x0;
   15842:	23 01       	movw	r4, r6
   15844:	91 2c       	mov	r9, r1
   15846:	81 2c       	mov	r8, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:574
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
   15848:	8e 2f       	mov	r24, r30
   1584a:	90 e0       	ldi	r25, 0x00	; 0
   1584c:	99 87       	std	Y+9, r25	; 0x09
   1584e:	88 87       	std	Y+8, r24	; 0x08
   15850:	e0 ff       	sbrs	r30, 0
   15852:	3c c0       	rjmp	.+120    	; 0x158cc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x23c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
			{
        		if (size == 1)
   15854:	9a 81       	ldd	r25, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:578
        		{
        			Draw_Pixe(x+i, y+j, color);
   15856:	2b 81       	ldd	r18, Y+3	; 0x03
   15858:	3c 81       	ldd	r19, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:582
        		}
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
   1585a:	eb 80       	ldd	r14, Y+3	; 0x03
   1585c:	fc 80       	ldd	r15, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
			{
        		if (size == 1)
   1585e:	91 30       	cpi	r25, 0x01	; 1
   15860:	09 f0       	breq	.+2      	; 0x15864 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x1d4>
   15862:	42 c0       	rjmp	.+132    	; 0x158e8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
			{
				if(!mode)
				{
	        		if (size == 1) 
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   15864:	a3 01       	movw	r20, r6
   15866:	48 0d       	add	r20, r8
   15868:	59 1d       	adc	r21, r9
   1586a:	b5 01       	movw	r22, r10
   1586c:	84 e8       	ldi	r24, 0x84	; 132
   1586e:	9f e0       	ldi	r25, 0x0F	; 15
   15870:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:599
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
					}
				}
			}
      		line >>= 1;
   15874:	e8 85       	ldd	r30, Y+8	; 0x08
   15876:	f9 85       	ldd	r31, Y+9	; 0x09
   15878:	f5 95       	asr	r31
   1587a:	e7 95       	ror	r30
   1587c:	3f ef       	ldi	r19, 0xFF	; 255
   1587e:	83 1a       	sub	r8, r19
   15880:	93 0a       	sbc	r9, r19
   15882:	4c 0c       	add	r4, r12
   15884:	5d 1c       	adc	r5, r13
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:572
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
   15886:	48 e0       	ldi	r20, 0x08	; 8
   15888:	84 16       	cp	r8, r20
   1588a:	91 04       	cpc	r9, r1
   1588c:	e9 f6       	brne	.-70     	; 0x15848 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x1b8>
   1588e:	5f ef       	ldi	r21, 0xFF	; 255
   15890:	a5 1a       	sub	r10, r21
   15892:	b5 0a       	sbc	r11, r21
   15894:	8c 85       	ldd	r24, Y+12	; 0x0c
   15896:	9d 85       	ldd	r25, Y+13	; 0x0d
   15898:	8c 0d       	add	r24, r12
   1589a:	9d 1d       	adc	r25, r13
   1589c:	9d 87       	std	Y+13, r25	; 0x0d
   1589e:	8c 87       	std	Y+12, r24	; 0x0c
   158a0:	99 81       	ldd	r25, Y+1	; 0x01
   158a2:	9f 5f       	subi	r25, 0xFF	; 255
   158a4:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   158a6:	96 30       	cpi	r25, 0x06	; 6
   158a8:	09 f0       	breq	.+2      	; 0x158ac <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x21c>
   158aa:	c2 cf       	rjmp	.-124    	; 0x15830 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x1a0>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:803
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    	text_x += text_size*6;		
   158ac:	20 91 90 0f 	lds	r18, 0x0F90	; 0x800f90 <my_lcd+0xc>
   158b0:	80 91 86 0f 	lds	r24, 0x0F86	; 0x800f86 <my_lcd+0x2>
   158b4:	90 91 87 0f 	lds	r25, 0x0F87	; 0x800f87 <my_lcd+0x3>
   158b8:	e6 e0       	ldi	r30, 0x06	; 6
   158ba:	2e 9f       	mul	r18, r30
   158bc:	80 0d       	add	r24, r0
   158be:	91 1d       	adc	r25, r1
   158c0:	11 24       	eor	r1, r1
   158c2:	90 93 87 0f 	sts	0x0F87, r25	; 0x800f87 <my_lcd+0x3>
   158c6:	80 93 86 0f 	sts	0x0F86, r24	; 0x800f86 <my_lcd+0x2>
   158ca:	32 cf       	rjmp	.-412    	; 0x15730 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0xa0>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:585
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
        		}
        	} 
			else if (bg != color) 				
   158cc:	eb 81       	ldd	r30, Y+3	; 0x03
   158ce:	fc 81       	ldd	r31, Y+4	; 0x04
   158d0:	2e 16       	cp	r2, r30
   158d2:	3f 06       	cpc	r3, r31
   158d4:	79 f2       	breq	.-98     	; 0x15874 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:587
			{
				if(!mode)
   158d6:	ff 81       	ldd	r31, Y+7	; 0x07
   158d8:	f1 11       	cpse	r31, r1
   158da:	cc cf       	rjmp	.-104    	; 0x15874 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
				{
	        		if (size == 1) 
   158dc:	2a 81       	ldd	r18, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   158de:	71 01       	movw	r14, r2
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
        	} 
			else if (bg != color) 				
			{
				if(!mode)
				{
	        		if (size == 1) 
   158e0:	21 30       	cpi	r18, 0x01	; 1
   158e2:	11 f4       	brne	.+4      	; 0x158e8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   158e4:	91 01       	movw	r18, r2
   158e6:	be cf       	rjmp	.-132    	; 0x15864 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x1d4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   158e8:	86 01       	movw	r16, r12
   158ea:	96 01       	movw	r18, r12
   158ec:	a2 01       	movw	r20, r4
   158ee:	6c 85       	ldd	r22, Y+12	; 0x0c
   158f0:	7d 85       	ldd	r23, Y+13	; 0x0d
   158f2:	84 e8       	ldi	r24, 0x84	; 132
   158f4:	9f e0       	ldi	r25, 0x0F	; 15
   158f6:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   158fa:	bc cf       	rjmp	.-136    	; 0x15874 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]+0x1e4>
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.173():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:660

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
}
   158fc:	2d 96       	adiw	r28, 0x0d	; 13
   158fe:	0f b6       	in	r0, 0x3f	; 63
   15900:	f8 94       	cli
   15902:	de bf       	out	0x3e, r29	; 62
   15904:	0f be       	out	0x3f, r0	; 63
   15906:	cd bf       	out	0x3d, r28	; 61
   15908:	df 91       	pop	r29
   1590a:	cf 91       	pop	r28
   1590c:	1f 91       	pop	r17
   1590e:	0f 91       	pop	r16
   15910:	ff 90       	pop	r15
   15912:	ef 90       	pop	r14
   15914:	df 90       	pop	r13
   15916:	cf 90       	pop	r12
   15918:	bf 90       	pop	r11
   1591a:	af 90       	pop	r10
   1591c:	9f 90       	pop	r9
   1591e:	8f 90       	pop	r8
   15920:	7f 90       	pop	r7
   15922:	6f 90       	pop	r6
   15924:	5f 90       	pop	r5
   15926:	4f 90       	pop	r4
   15928:	3f 90       	pop	r3
   1592a:	2f 90       	pop	r2
   1592c:	08 95       	ret

0001592e <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   1592e:	8f 92       	push	r8
   15930:	9f 92       	push	r9
   15932:	af 92       	push	r10
   15934:	bf 92       	push	r11
   15936:	ef 92       	push	r14
   15938:	ff 92       	push	r15
   1593a:	0f 93       	push	r16
   1593c:	1f 93       	push	r17
   1593e:	cf 93       	push	r28
   15940:	df 93       	push	r29
   15942:	cd b7       	in	r28, 0x3d	; 61
   15944:	de b7       	in	r29, 0x3e	; 62
   15946:	a1 97       	sbiw	r28, 0x21	; 33
   15948:	0f b6       	in	r0, 0x3f	; 63
   1594a:	f8 94       	cli
   1594c:	de bf       	out	0x3e, r29	; 62
   1594e:	0f be       	out	0x3f, r0	; 63
   15950:	cd bf       	out	0x3d, r28	; 61
   15952:	7c 01       	movw	r14, r24
   15954:	fa 01       	movw	r30, r20
   15956:	cb 01       	movw	r24, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   15958:	19 a2       	std	Y+33, r1	; 0x21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   1595a:	22 30       	cpi	r18, 0x02	; 2
   1595c:	08 f4       	brcc	.+2      	; 0x15960 <Print::printNumber(unsigned long, unsigned char)+0x32>
   1595e:	2a e0       	ldi	r18, 0x0A	; 10
   15960:	8e 01       	movw	r16, r28
   15962:	0f 5d       	subi	r16, 0xDF	; 223
   15964:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
   15966:	82 2e       	mov	r8, r18
   15968:	91 2c       	mov	r9, r1
   1596a:	b1 2c       	mov	r11, r1
   1596c:	a1 2c       	mov	r10, r1
   1596e:	bf 01       	movw	r22, r30
   15970:	a5 01       	movw	r20, r10
   15972:	94 01       	movw	r18, r8
   15974:	0e 94 09 df 	call	0x1be12	; 0x1be12 <__udivmodsi4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
   15978:	f9 01       	movw	r30, r18
   1597a:	ca 01       	movw	r24, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   1597c:	6a 30       	cpi	r22, 0x0A	; 10
   1597e:	74 f5       	brge	.+92     	; 0x159dc <Print::printNumber(unsigned long, unsigned char)+0xae>
   15980:	60 5d       	subi	r22, 0xD0	; 208
   15982:	d8 01       	movw	r26, r16
   15984:	6e 93       	st	-X, r22
   15986:	8d 01       	movw	r16, r26
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
   15988:	23 2b       	or	r18, r19
   1598a:	24 2b       	or	r18, r20
   1598c:	25 2b       	or	r18, r21
   1598e:	79 f7       	brne	.-34     	; 0x1596e <Print::printNumber(unsigned long, unsigned char)+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   15990:	90 e0       	ldi	r25, 0x00	; 0
   15992:	80 e0       	ldi	r24, 0x00	; 0
write():
   15994:	10 97       	sbiw	r26, 0x00	; 0
   15996:	89 f0       	breq	.+34     	; 0x159ba <Print::printNumber(unsigned long, unsigned char)+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
   15998:	fd 01       	movw	r30, r26
   1599a:	01 90       	ld	r0, Z+
   1599c:	00 20       	and	r0, r0
   1599e:	e9 f7       	brne	.-6      	; 0x1599a <Print::printNumber(unsigned long, unsigned char)+0x6c>
   159a0:	31 97       	sbiw	r30, 0x01	; 1
   159a2:	af 01       	movw	r20, r30
   159a4:	4a 1b       	sub	r20, r26
   159a6:	5b 0b       	sbc	r21, r27
   159a8:	d7 01       	movw	r26, r14
   159aa:	ed 91       	ld	r30, X+
   159ac:	fc 91       	ld	r31, X
   159ae:	02 80       	ldd	r0, Z+2	; 0x02
   159b0:	f3 81       	ldd	r31, Z+3	; 0x03
   159b2:	e0 2d       	mov	r30, r0
   159b4:	b8 01       	movw	r22, r16
   159b6:	c7 01       	movw	r24, r14
   159b8:	19 95       	eicall
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
   159ba:	a1 96       	adiw	r28, 0x21	; 33
   159bc:	0f b6       	in	r0, 0x3f	; 63
   159be:	f8 94       	cli
   159c0:	de bf       	out	0x3e, r29	; 62
   159c2:	0f be       	out	0x3f, r0	; 63
   159c4:	cd bf       	out	0x3d, r28	; 61
   159c6:	df 91       	pop	r29
   159c8:	cf 91       	pop	r28
   159ca:	1f 91       	pop	r17
   159cc:	0f 91       	pop	r16
   159ce:	ff 90       	pop	r15
   159d0:	ef 90       	pop	r14
   159d2:	bf 90       	pop	r11
   159d4:	af 90       	pop	r10
   159d6:	9f 90       	pop	r9
   159d8:	8f 90       	pop	r8
   159da:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   159dc:	69 5c       	subi	r22, 0xC9	; 201
   159de:	d1 cf       	rjmp	.-94     	; 0x15982 <Print::printNumber(unsigned long, unsigned char)+0x54>

000159e0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.150]>:
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.150():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:189
  }
  else
    mqtt_error++;
}
///
void send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, uint8_t idx, char *topic, char *payload)
   159e0:	cf 92       	push	r12
   159e2:	df 92       	push	r13
   159e4:	ef 92       	push	r14
   159e6:	ff 92       	push	r15
   159e8:	0f 93       	push	r16
   159ea:	1f 93       	push	r17
   159ec:	cf 93       	push	r28
   159ee:	df 93       	push	r29
   159f0:	cd b7       	in	r28, 0x3d	; 61
   159f2:	de b7       	in	r29, 0x3e	; 62
   159f4:	c6 55       	subi	r28, 0x56	; 86
   159f6:	d1 09       	sbc	r29, r1
   159f8:	0f b6       	in	r0, 0x3f	; 63
   159fa:	f8 94       	cli
   159fc:	de bf       	out	0x3e, r29	; 62
   159fe:	0f be       	out	0x3f, r0	; 63
   15a00:	cd bf       	out	0x3d, r28	; 61
   15a02:	c8 2e       	mov	r12, r24
   15a04:	d6 2e       	mov	r13, r22
   15a06:	7a 01       	movw	r14, r20
   15a08:	89 01       	movw	r16, r18
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:194
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   15a0a:	8a ef       	ldi	r24, 0xFA	; 250
   15a0c:	9f e0       	ldi	r25, 0x0F	; 15
   15a0e:	0e 94 7d 52 	call	0xa4fa	; 0xa4fa <PubSubClient::connected()>
   15a12:	88 23       	and	r24, r24
   15a14:	09 f4       	brne	.+2      	; 0x15a18 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.150]+0x38>
   15a16:	68 c0       	rjmp	.+208    	; 0x15ae8 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.150]+0x108>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:196
  {
    mqtt_send_message++;
   15a18:	80 91 85 0c 	lds	r24, 0x0C85	; 0x800c85 <mqtt_send_message>
   15a1c:	90 91 86 0c 	lds	r25, 0x0C86	; 0x800c86 <mqtt_send_message+0x1>
   15a20:	01 96       	adiw	r24, 0x01	; 1
   15a22:	90 93 86 0c 	sts	0x0C86, r25	; 0x800c86 <mqtt_send_message+0x1>
   15a26:	80 93 85 0c 	sts	0x0C85, r24	; 0x800c85 <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:197
    device_get_name(hostname);
   15a2a:	ce 01       	movw	r24, r28
   15a2c:	83 5b       	subi	r24, 0xB3	; 179
   15a2e:	9f 4f       	sbci	r25, 0xFF	; 255
   15a30:	0e 94 e4 70 	call	0xe1c8	; 0xe1c8 <device_get_name(char*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:198
    strcpy_P(str_topic, header_out);
   15a34:	60 91 83 0c 	lds	r22, 0x0C83	; 0x800c83 <header_out>
   15a38:	70 91 84 0c 	lds	r23, 0x0C84	; 0x800c84 <header_out+0x1>
   15a3c:	ce 01       	movw	r24, r28
   15a3e:	01 96       	adiw	r24, 0x01	; 1
   15a40:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:199
    strcat(str_topic, hostname);
   15a44:	be 01       	movw	r22, r28
   15a46:	63 5b       	subi	r22, 0xB3	; 179
   15a48:	7f 4f       	sbci	r23, 0xFF	; 255
   15a4a:	ce 01       	movw	r24, r28
   15a4c:	01 96       	adiw	r24, 0x01	; 1
   15a4e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:200
    strcat(str_topic, "/");
   15a52:	6a e8       	ldi	r22, 0x8A	; 138
   15a54:	75 e0       	ldi	r23, 0x05	; 5
   15a56:	ce 01       	movw	r24, r28
   15a58:	01 96       	adiw	r24, 0x01	; 1
   15a5a:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:201
    strcat(str_topic, prefix);
   15a5e:	64 e4       	ldi	r22, 0x44	; 68
   15a60:	77 e0       	ldi	r23, 0x07	; 7
   15a62:	ce 01       	movw	r24, r28
   15a64:	01 96       	adiw	r24, 0x01	; 1
   15a66:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:202
    strcat(str_topic, "/");
   15a6a:	6a e8       	ldi	r22, 0x8A	; 138
   15a6c:	75 e0       	ldi	r23, 0x05	; 5
   15a6e:	ce 01       	movw	r24, r28
   15a70:	01 96       	adiw	r24, 0x01	; 1
   15a72:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   15a76:	4a e0       	ldi	r20, 0x0A	; 10
   15a78:	be 01       	movw	r22, r28
   15a7a:	6f 5b       	subi	r22, 0xBF	; 191
   15a7c:	7f 4f       	sbci	r23, 0xFF	; 255
   15a7e:	8c 2d       	mov	r24, r12
   15a80:	90 e0       	ldi	r25, 0x00	; 0
   15a82:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.150():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:204
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   15a86:	be 01       	movw	r22, r28
   15a88:	6f 5b       	subi	r22, 0xBF	; 191
   15a8a:	7f 4f       	sbci	r23, 0xFF	; 255
   15a8c:	ce 01       	movw	r24, r28
   15a8e:	01 96       	adiw	r24, 0x01	; 1
   15a90:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:205
    strcat(str_topic, "/");
   15a94:	6a e8       	ldi	r22, 0x8A	; 138
   15a96:	75 e0       	ldi	r23, 0x05	; 5
   15a98:	ce 01       	movw	r24, r28
   15a9a:	01 96       	adiw	r24, 0x01	; 1
   15a9c:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   15aa0:	4a e0       	ldi	r20, 0x0A	; 10
   15aa2:	be 01       	movw	r22, r28
   15aa4:	6f 5b       	subi	r22, 0xBF	; 191
   15aa6:	7f 4f       	sbci	r23, 0xFF	; 255
   15aa8:	8d 2d       	mov	r24, r13
   15aaa:	90 e0       	ldi	r25, 0x00	; 0
   15aac:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.150():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:207
    itoa(idx, tmp1, 10);
    strcat(str_topic, tmp1);
   15ab0:	be 01       	movw	r22, r28
   15ab2:	6f 5b       	subi	r22, 0xBF	; 191
   15ab4:	7f 4f       	sbci	r23, 0xFF	; 255
   15ab6:	ce 01       	movw	r24, r28
   15ab8:	01 96       	adiw	r24, 0x01	; 1
   15aba:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:208
    strcat(str_topic, "/");
   15abe:	6a e8       	ldi	r22, 0x8A	; 138
   15ac0:	75 e0       	ldi	r23, 0x05	; 5
   15ac2:	ce 01       	movw	r24, r28
   15ac4:	01 96       	adiw	r24, 0x01	; 1
   15ac6:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:209
    strcat(str_topic, topic);
   15aca:	b7 01       	movw	r22, r14
   15acc:	ce 01       	movw	r24, r28
   15ace:	01 96       	adiw	r24, 0x01	; 1
   15ad0:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:210
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   15ad4:	a8 01       	movw	r20, r16
   15ad6:	be 01       	movw	r22, r28
   15ad8:	6f 5f       	subi	r22, 0xFF	; 255
   15ada:	7f 4f       	sbci	r23, 0xFF	; 255
   15adc:	8a ef       	ldi	r24, 0xFA	; 250
   15ade:	9f e0       	ldi	r25, 0x0F	; 15
   15ae0:	0e 94 21 53 	call	0xa642	; 0xa642 <PubSubClient::publish(char const*, char const*)>
   15ae4:	81 11       	cpse	r24, r1
   15ae6:	09 c0       	rjmp	.+18     	; 0x15afa <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.150]+0x11a>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:213
  }
  else
    mqtt_error++;
   15ae8:	80 91 87 0c 	lds	r24, 0x0C87	; 0x800c87 <mqtt_error>
   15aec:	90 91 88 0c 	lds	r25, 0x0C88	; 0x800c88 <mqtt_error+0x1>
   15af0:	01 96       	adiw	r24, 0x01	; 1
   15af2:	90 93 88 0c 	sts	0x0C88, r25	; 0x800c88 <mqtt_error+0x1>
   15af6:	80 93 87 0c 	sts	0x0C87, r24	; 0x800c87 <mqtt_error>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:214
}
   15afa:	ca 5a       	subi	r28, 0xAA	; 170
   15afc:	df 4f       	sbci	r29, 0xFF	; 255
   15afe:	0f b6       	in	r0, 0x3f	; 63
   15b00:	f8 94       	cli
   15b02:	de bf       	out	0x3e, r29	; 62
   15b04:	0f be       	out	0x3f, r0	; 63
   15b06:	cd bf       	out	0x3d, r28	; 61
   15b08:	df 91       	pop	r29
   15b0a:	cf 91       	pop	r28
   15b0c:	1f 91       	pop	r17
   15b0e:	0f 91       	pop	r16
   15b10:	ff 90       	pop	r15
   15b12:	ef 90       	pop	r14
   15b14:	df 90       	pop	r13
   15b16:	cf 90       	pop	r12
   15b18:	08 95       	ret

00015b1a <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:104
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
   15b1a:	8f 92       	push	r8
   15b1c:	9f 92       	push	r9
   15b1e:	af 92       	push	r10
   15b20:	bf 92       	push	r11
   15b22:	cf 92       	push	r12
   15b24:	df 92       	push	r13
   15b26:	ef 92       	push	r14
   15b28:	ff 92       	push	r15
   15b2a:	0f 93       	push	r16
   15b2c:	1f 93       	push	r17
   15b2e:	cf 93       	push	r28
   15b30:	df 93       	push	r29
   15b32:	7c 01       	movw	r14, r24
   15b34:	eb 01       	movw	r28, r22
   15b36:	6c 01       	movw	r12, r24
   15b38:	82 e0       	ldi	r24, 0x02	; 2
   15b3a:	c8 0e       	add	r12, r24
   15b3c:	d1 1c       	adc	r13, r1
   15b3e:	47 01       	movw	r8, r14
   15b40:	e5 e0       	ldi	r30, 0x05	; 5
   15b42:	8e 0e       	add	r8, r30
   15b44:	91 1c       	adc	r9, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:105
    size_t n = 0;
   15b46:	10 e0       	ldi	r17, 0x00	; 0
   15b48:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:108
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
   15b4a:	f6 01       	movw	r30, r12
   15b4c:	41 91       	ld	r20, Z+
   15b4e:	6f 01       	movw	r12, r30
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   15b50:	50 e0       	ldi	r21, 0x00	; 0
   15b52:	70 e0       	ldi	r23, 0x00	; 0
   15b54:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   15b56:	2a e0       	ldi	r18, 0x0A	; 10
   15b58:	ce 01       	movw	r24, r28
   15b5a:	0e 94 97 ac 	call	0x1592e	; 0x1592e <Print::printNumber(unsigned long, unsigned char)>
   15b5e:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   15b60:	e8 81       	ld	r30, Y
   15b62:	f9 81       	ldd	r31, Y+1	; 0x01
   15b64:	01 90       	ld	r0, Z+
   15b66:	f0 81       	ld	r31, Z
   15b68:	e0 2d       	mov	r30, r0
   15b6a:	6e e2       	ldi	r22, 0x2E	; 46
   15b6c:	ce 01       	movw	r24, r28
   15b6e:	19 95       	eicall
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:109
        n += p.print('.');
   15b70:	8a 0d       	add	r24, r10
   15b72:	9b 1d       	adc	r25, r11
   15b74:	08 0f       	add	r16, r24
   15b76:	19 1f       	adc	r17, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:106
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
   15b78:	c8 14       	cp	r12, r8
   15b7a:	d9 04       	cpc	r13, r9
   15b7c:	31 f7       	brne	.-52     	; 0x15b4a <IPAddress::printTo(Print&) const+0x30>
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   15b7e:	f7 01       	movw	r30, r14
   15b80:	45 81       	ldd	r20, Z+5	; 0x05
   15b82:	50 e0       	ldi	r21, 0x00	; 0
   15b84:	70 e0       	ldi	r23, 0x00	; 0
   15b86:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   15b88:	2a e0       	ldi	r18, 0x0A	; 10
   15b8a:	ce 01       	movw	r24, r28
   15b8c:	0e 94 97 ac 	call	0x1592e	; 0x1592e <Print::printNumber(unsigned long, unsigned char)>
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:113
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
   15b90:	80 0f       	add	r24, r16
   15b92:	91 1f       	adc	r25, r17
   15b94:	df 91       	pop	r29
   15b96:	cf 91       	pop	r28
   15b98:	1f 91       	pop	r17
   15b9a:	0f 91       	pop	r16
   15b9c:	ff 90       	pop	r15
   15b9e:	ef 90       	pop	r14
   15ba0:	df 90       	pop	r13
   15ba2:	cf 90       	pop	r12
   15ba4:	bf 90       	pop	r11
   15ba6:	af 90       	pop	r10
   15ba8:	9f 90       	pop	r9
   15baa:	8f 90       	pop	r8
   15bac:	08 95       	ret

00015bae <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   15bae:	0e 94 73 e1 	call	0x1c2e6	; 0x1c2e6 <abort>

00015bb2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.227]>:
_ZN13LCDWIKI_TOUCH15TP_SetBacklightEh.constprop.227():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	y0=0;
	x=0xffff;
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_SetBacklight(uint8_t ibacklight)
   15bb2:	1f 93       	push	r17
   15bb4:	cf 93       	push	r28
   15bb6:	df 93       	push	r29
   15bb8:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:59
{
backlight = ibacklight;
   15bba:	c1 e6       	ldi	r28, 0x61	; 97
   15bbc:	df e0       	ldi	r29, 0x0F	; 15
   15bbe:	8f 87       	std	Y+15, r24	; 0x0f
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:60
TCS_LOW;
   15bc0:	e9 89       	ldd	r30, Y+17	; 0x11
   15bc2:	fa 89       	ldd	r31, Y+18	; 0x12
   15bc4:	90 81       	ld	r25, Z
   15bc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
   15bc8:	80 95       	com	r24
   15bca:	89 23       	and	r24, r25
   15bcc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:61
SDCS_LOW;
   15bce:	eb 8d       	ldd	r30, Y+27	; 0x1b
   15bd0:	fc 8d       	ldd	r31, Y+28	; 0x1c
   15bd2:	90 81       	ld	r25, Z
   15bd4:	8a a1       	ldd	r24, Y+34	; 0x22
   15bd6:	80 95       	com	r24
   15bd8:	89 23       	and	r24, r25
   15bda:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:62
delay_hus(200);
   15bdc:	68 ec       	ldi	r22, 0xC8	; 200
   15bde:	70 e0       	ldi	r23, 0x00	; 0
   15be0:	80 e0       	ldi	r24, 0x00	; 0
   15be2:	90 e0       	ldi	r25, 0x00	; 0
   15be4:	0e 94 b4 64 	call	0xc968	; 0xc968 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:63
TCS_HIGH;
   15be8:	e9 89       	ldd	r30, Y+17	; 0x11
   15bea:	fa 89       	ldd	r31, Y+18	; 0x12
   15bec:	80 81       	ld	r24, Z
   15bee:	9d 8d       	ldd	r25, Y+29	; 0x1d
   15bf0:	89 2b       	or	r24, r25
   15bf2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:64
SDCS_HIGH;
   15bf4:	eb 8d       	ldd	r30, Y+27	; 0x1b
   15bf6:	fc 8d       	ldd	r31, Y+28	; 0x1c
   15bf8:	80 81       	ld	r24, Z
   15bfa:	9a a1       	ldd	r25, Y+34	; 0x22
   15bfc:	89 2b       	or	r24, r25
   15bfe:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:65
TP_Write_Byte_LowSpeed(SET_BACKLIGHT);
   15c00:	85 e5       	ldi	r24, 0x55	; 85
   15c02:	0e 94 fc aa 	call	0x155f8	; 0x155f8 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.228]>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
TP_Write_Byte_LowSpeed(ibacklight);
   15c06:	81 2f       	mov	r24, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:67
}
   15c08:	df 91       	pop	r29
   15c0a:	cf 91       	pop	r28
   15c0c:	1f 91       	pop	r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
SDCS_LOW;
delay_hus(200);
TCS_HIGH;
SDCS_HIGH;
TP_Write_Byte_LowSpeed(SET_BACKLIGHT);
TP_Write_Byte_LowSpeed(ibacklight);
   15c0e:	0c 94 fc aa 	jmp	0x155f8	; 0x155f8 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.228]>

00015c12 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.225]>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii.constprop.225():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:93
{
	Fill_Rect(x, y, 1, h, draw_color);
}

//draw a horizontal line
void LCDWIKI_GUI::Draw_Fast_HLine(int16_t x, int16_t y, int16_t w)
   15c12:	ef 92       	push	r14
   15c14:	ff 92       	push	r15
   15c16:	0f 93       	push	r16
   15c18:	1f 93       	push	r17
   15c1a:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:95
{
	Fill_Rect(x, y, w, 1, draw_color);
   15c1c:	e0 90 8e 0f 	lds	r14, 0x0F8E	; 0x800f8e <my_lcd+0xa>
   15c20:	f0 90 8f 0f 	lds	r15, 0x0F8F	; 0x800f8f <my_lcd+0xb>
   15c24:	01 e0       	ldi	r16, 0x01	; 1
   15c26:	10 e0       	ldi	r17, 0x00	; 0
   15c28:	ab 01       	movw	r20, r22
   15c2a:	bc 01       	movw	r22, r24
   15c2c:	84 e8       	ldi	r24, 0x84	; 132
   15c2e:	9f e0       	ldi	r25, 0x0F	; 15
   15c30:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:96
}
   15c34:	1f 91       	pop	r17
   15c36:	0f 91       	pop	r16
   15c38:	ff 90       	pop	r15
   15c3a:	ef 90       	pop	r14
   15c3c:	08 95       	ret

00015c3e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.224():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:162
    	}
  	}
}

//draw a rectangle
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   15c3e:	8f 92       	push	r8
   15c40:	9f 92       	push	r9
   15c42:	af 92       	push	r10
   15c44:	bf 92       	push	r11
   15c46:	cf 92       	push	r12
   15c48:	df 92       	push	r13
   15c4a:	ef 92       	push	r14
   15c4c:	ff 92       	push	r15
   15c4e:	0f 93       	push	r16
   15c50:	1f 93       	push	r17
   15c52:	cf 93       	push	r28
   15c54:	df 93       	push	r29
   15c56:	6c 01       	movw	r12, r24
   15c58:	eb 01       	movw	r28, r22
   15c5a:	4a 01       	movw	r8, r20
   15c5c:	79 01       	movw	r14, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:164
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
   15c5e:	9a 01       	movw	r18, r20
   15c60:	28 1b       	sub	r18, r24
   15c62:	39 0b       	sbc	r19, r25
   15c64:	89 01       	movw	r16, r18
   15c66:	0f 5f       	subi	r16, 0xFF	; 255
   15c68:	1f 4f       	sbci	r17, 0xFF	; 255
   15c6a:	c7 01       	movw	r24, r14
   15c6c:	86 1b       	sub	r24, r22
   15c6e:	97 0b       	sbc	r25, r23
   15c70:	5c 01       	movw	r10, r24
   15c72:	4f ef       	ldi	r20, 0xFF	; 255
   15c74:	a4 1a       	sub	r10, r20
   15c76:	b4 0a       	sbc	r11, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:165
	if (w < 0) 
   15c78:	17 ff       	sbrs	r17, 7
   15c7a:	04 c0       	rjmp	.+8      	; 0x15c84 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]+0x46>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:168
	{ 
		x1 = x2; 
		w = -w; 
   15c7c:	89 01       	movw	r16, r18
   15c7e:	00 95       	com	r16
   15c80:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:167
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
	if (w < 0) 
	{ 
		x1 = x2; 
   15c82:	64 01       	movw	r12, r8
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:170
		w = -w; 
	}
	if (h < 0) 
   15c84:	b7 fe       	sbrs	r11, 7
   15c86:	04 c0       	rjmp	.+8      	; 0x15c90 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.224]+0x52>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:173
	{ 
		y1 = y2; 
		h = -h; 
   15c88:	5c 01       	movw	r10, r24
   15c8a:	a0 94       	com	r10
   15c8c:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:172
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   15c8e:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:175
		h = -h; 
	}
	Draw_Fast_HLine(x1, y1, w);
   15c90:	a8 01       	movw	r20, r16
   15c92:	be 01       	movw	r22, r28
   15c94:	c6 01       	movw	r24, r12
   15c96:	0e 94 09 ae 	call	0x15c12	; 0x15c12 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.225]>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:176
  	Draw_Fast_HLine(x1, y2, w);
   15c9a:	a8 01       	movw	r20, r16
   15c9c:	b7 01       	movw	r22, r14
   15c9e:	c6 01       	movw	r24, r12
   15ca0:	0e 94 09 ae 	call	0x15c12	; 0x15c12 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.225]>
Draw_Fast_VLine():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:89
}

//draw a vertical line 
void LCDWIKI_GUI::Draw_Fast_VLine(int16_t x, int16_t y, int16_t h)
{
	Fill_Rect(x, y, 1, h, draw_color);
   15ca4:	e0 90 8e 0f 	lds	r14, 0x0F8E	; 0x800f8e <my_lcd+0xa>
   15ca8:	f0 90 8f 0f 	lds	r15, 0x0F8F	; 0x800f8f <my_lcd+0xb>
   15cac:	85 01       	movw	r16, r10
   15cae:	21 e0       	ldi	r18, 0x01	; 1
   15cb0:	30 e0       	ldi	r19, 0x00	; 0
   15cb2:	ae 01       	movw	r20, r28
   15cb4:	b6 01       	movw	r22, r12
   15cb6:	84 e8       	ldi	r24, 0x84	; 132
   15cb8:	9f e0       	ldi	r25, 0x0F	; 15
   15cba:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   15cbe:	e0 90 8e 0f 	lds	r14, 0x0F8E	; 0x800f8e <my_lcd+0xa>
   15cc2:	f0 90 8f 0f 	lds	r15, 0x0F8F	; 0x800f8f <my_lcd+0xb>
   15cc6:	21 e0       	ldi	r18, 0x01	; 1
   15cc8:	30 e0       	ldi	r19, 0x00	; 0
   15cca:	ae 01       	movw	r20, r28
   15ccc:	b4 01       	movw	r22, r8
   15cce:	84 e8       	ldi	r24, 0x84	; 132
   15cd0:	9f e0       	ldi	r25, 0x0F	; 15
   15cd2:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.224():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:179
	}
	Draw_Fast_HLine(x1, y1, w);
  	Draw_Fast_HLine(x1, y2, w);
	Draw_Fast_VLine(x1, y1, h);
	Draw_Fast_VLine(x2, y1, h);
}
   15cd6:	df 91       	pop	r29
   15cd8:	cf 91       	pop	r28
   15cda:	1f 91       	pop	r17
   15cdc:	0f 91       	pop	r16
   15cde:	ff 90       	pop	r15
   15ce0:	ef 90       	pop	r14
   15ce2:	df 90       	pop	r13
   15ce4:	cf 90       	pop	r12
   15ce6:	bf 90       	pop	r11
   15ce8:	af 90       	pop	r10
   15cea:	9f 90       	pop	r9
   15cec:	8f 90       	pop	r8
   15cee:	08 95       	ret

00015cf0 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.223]>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii.constprop.223():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:70
	Read_GRAM(x, y, &colour, 1, 1);
	return colour;
}

//fill a rectangle
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   15cf0:	ef 92       	push	r14
   15cf2:	ff 92       	push	r15
   15cf4:	0f 93       	push	r16
   15cf6:	1f 93       	push	r17
   15cf8:	cf 93       	push	r28
   15cfa:	df 93       	push	r29
   15cfc:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:72
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   15cfe:	ea 01       	movw	r28, r20
   15d00:	c8 1b       	sub	r28, r24
   15d02:	d9 0b       	sbc	r29, r25
   15d04:	9e 01       	movw	r18, r28
   15d06:	2f 5f       	subi	r18, 0xFF	; 255
   15d08:	3f 4f       	sbci	r19, 0xFF	; 255
   15d0a:	df 01       	movw	r26, r30
   15d0c:	a6 1b       	sub	r26, r22
   15d0e:	b7 0b       	sbc	r27, r23
   15d10:	8d 01       	movw	r16, r26
   15d12:	0f 5f       	subi	r16, 0xFF	; 255
   15d14:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:73
   	if (w < 0) 
   15d16:	37 ff       	sbrs	r19, 7
   15d18:	04 c0       	rjmp	.+8      	; 0x15d22 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.223]+0x32>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:76
	{ 
		x1 = x2; 
		w = -w; 
   15d1a:	9e 01       	movw	r18, r28
   15d1c:	20 95       	com	r18
   15d1e:	30 95       	com	r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:75
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   	if (w < 0) 
	{ 
		x1 = x2; 
   15d20:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:78
		w = -w; 
	}
	if (h < 0) 
   15d22:	17 ff       	sbrs	r17, 7
   15d24:	04 c0       	rjmp	.+8      	; 0x15d2e <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.223]+0x3e>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:81
	{ 
		y1 = y2; 
		h = -h; 
   15d26:	8d 01       	movw	r16, r26
   15d28:	00 95       	com	r16
   15d2a:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:80
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   15d2c:	bf 01       	movw	r22, r30
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:83
		h = -h; 
	}
	Fill_Rect(x1, y1, w, h, draw_color);
   15d2e:	e0 90 8e 0f 	lds	r14, 0x0F8E	; 0x800f8e <my_lcd+0xa>
   15d32:	f0 90 8f 0f 	lds	r15, 0x0F8F	; 0x800f8f <my_lcd+0xb>
   15d36:	ab 01       	movw	r20, r22
   15d38:	bc 01       	movw	r22, r24
   15d3a:	84 e8       	ldi	r24, 0x84	; 132
   15d3c:	9f e0       	ldi	r25, 0x0F	; 15
   15d3e:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:84
}
   15d42:	df 91       	pop	r29
   15d44:	cf 91       	pop	r28
   15d46:	1f 91       	pop	r17
   15d48:	0f 91       	pop	r16
   15d4a:	ff 90       	pop	r15
   15d4c:	ef 90       	pop	r14
   15d4e:	08 95       	ret

00015d50 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.221]>:
_ZN9SRAM_23LC16sendAddressBytesEm.constprop.221():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:133
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
   15d50:	cf 92       	push	r12
   15d52:	df 92       	push	r13
   15d54:	ef 92       	push	r14
   15d56:	ff 92       	push	r15
   15d58:	6b 01       	movw	r12, r22
   15d5a:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
{
  if (_capacity > 0x10000) {
   15d5c:	80 91 49 0e 	lds	r24, 0x0E49	; 0x800e49 <SRAM+0x4>
   15d60:	90 91 4a 0e 	lds	r25, 0x0E4A	; 0x800e4a <SRAM+0x5>
   15d64:	a0 91 4b 0e 	lds	r26, 0x0E4B	; 0x800e4b <SRAM+0x6>
   15d68:	b0 91 4c 0e 	lds	r27, 0x0E4C	; 0x800e4c <SRAM+0x7>
   15d6c:	01 97       	sbiw	r24, 0x01	; 1
   15d6e:	a1 40       	sbci	r26, 0x01	; 1
   15d70:	b1 05       	cpc	r27, r1
   15d72:	48 f0       	brcs	.+18     	; 0x15d86 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.221]+0x36>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   15d74:	b7 01       	movw	r22, r14
   15d76:	88 27       	eor	r24, r24
   15d78:	99 27       	eor	r25, r25
   15d7a:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <SRAM>
   15d7e:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <SRAM+0x1>
   15d82:	0e 94 eb 63 	call	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   15d86:	99 27       	eor	r25, r25
   15d88:	8f 2d       	mov	r24, r15
   15d8a:	7e 2d       	mov	r23, r14
   15d8c:	6d 2d       	mov	r22, r13
   15d8e:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <SRAM>
   15d92:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <SRAM+0x1>
   15d96:	0e 94 eb 63 	call	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   15d9a:	6c 2d       	mov	r22, r12
   15d9c:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <SRAM>
   15da0:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <SRAM+0x1>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   15da4:	ff 90       	pop	r15
   15da6:	ef 90       	pop	r14
   15da8:	df 90       	pop	r13
   15daa:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   15dac:	0c 94 eb 63 	jmp	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>

00015db0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.213]>:
_ZN12PubSubClient11writeStringEPKcPhj.constprop.213():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:524
    _state = MQTT_DISCONNECTED;
    _client->stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   15db0:	cf 93       	push	r28
   15db2:	df 93       	push	r29
   15db4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:527
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   15db6:	fa 01       	movw	r30, r20
   15db8:	32 96       	adiw	r30, 0x02	; 2
   15dba:	e6 0f       	add	r30, r22
   15dbc:	f7 1f       	adc	r31, r23
   15dbe:	dc 01       	movw	r26, r24
   15dc0:	9d 01       	movw	r18, r26
   15dc2:	2c 1b       	sub	r18, r28
   15dc4:	3d 0b       	sbc	r19, r29
   15dc6:	cf 01       	movw	r24, r30
   15dc8:	86 1b       	sub	r24, r22
   15dca:	97 0b       	sbc	r25, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:528
    while (*idp) {
   15dcc:	4d 91       	ld	r20, X+
   15dce:	44 23       	and	r20, r20
   15dd0:	11 f0       	breq	.+4      	; 0x15dd6 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.213]+0x26>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:529
        buf[pos++] = *idp++;
   15dd2:	41 93       	st	Z+, r20
   15dd4:	f5 cf       	rjmp	.-22     	; 0x15dc0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.213]+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:532
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   15dd6:	ac 01       	movw	r20, r24
   15dd8:	42 1b       	sub	r20, r18
   15dda:	53 0b       	sbc	r21, r19
   15ddc:	64 0f       	add	r22, r20
   15dde:	75 1f       	adc	r23, r21
   15de0:	fb 01       	movw	r30, r22
   15de2:	32 97       	sbiw	r30, 0x02	; 2
   15de4:	30 83       	st	Z, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:533
    buf[pos-i-1] = (i & 0xFF);
   15de6:	61 50       	subi	r22, 0x01	; 1
   15de8:	71 09       	sbc	r23, r1
   15dea:	fb 01       	movw	r30, r22
   15dec:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:535
    return pos;
}
   15dee:	df 91       	pop	r29
   15df0:	cf 91       	pop	r28
   15df2:	08 95       	ret

00015df4 <twi_readFrom.part.0.constprop.200>:
twi_readFrom.part.0.constprop.200():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
   15df4:	90 91 2f 0d 	lds	r25, 0x0D2F	; 0x800d2f <twi_state.lto_priv.271>
   15df8:	91 11       	cpse	r25, r1
   15dfa:	fc cf       	rjmp	.-8      	; 0x15df4 <twi_readFrom.part.0.constprop.200>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
   15dfc:	91 e0       	ldi	r25, 0x01	; 1
   15dfe:	90 93 2f 0d 	sts	0x0D2F, r25	; 0x800d2f <twi_state.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:161
  twi_sendStop = sendStop;
   15e02:	90 93 2e 0d 	sts	0x0D2E, r25	; 0x800d2e <twi_sendStop.lto_priv.269>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:163
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
   15e06:	2f ef       	ldi	r18, 0xFF	; 255
   15e08:	20 93 2d 0d 	sts	0x0D2D, r18	; 0x800d2d <twi_error.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
   15e0c:	10 92 2c 0d 	sts	0x0D2C, r1	; 0x800d2c <twi_masterBufferIndex.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
   15e10:	26 0f       	add	r18, r22
   15e12:	20 93 2b 0d 	sts	0x0D2B, r18	; 0x800d2b <twi_masterBufferLength.lto_priv.267>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:175
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
   15e16:	90 93 2a 0d 	sts	0x0D2A, r25	; 0x800d2a <twi_slarw.lto_priv.265>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:176
  twi_slarw |= address << 1;
   15e1a:	90 91 2a 0d 	lds	r25, 0x0D2A	; 0x800d2a <twi_slarw.lto_priv.265>
   15e1e:	88 0f       	add	r24, r24
   15e20:	89 2b       	or	r24, r25
   15e22:	80 93 2a 0d 	sts	0x0D2A, r24	; 0x800d2a <twi_slarw.lto_priv.265>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:178

  if (true == twi_inRepStart) {
   15e26:	80 91 29 0d 	lds	r24, 0x0D29	; 0x800d29 <twi_inRepStart.lto_priv.270>
   15e2a:	81 30       	cpi	r24, 0x01	; 1
   15e2c:	f9 f4       	brne	.+62     	; 0x15e6c <twi_readFrom.part.0.constprop.200+0x78>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
   15e2e:	10 92 29 0d 	sts	0x0D29, r1	; 0x800d29 <twi_inRepStart.lto_priv.270>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:187
    do {
      TWDR = twi_slarw;
   15e32:	80 91 2a 0d 	lds	r24, 0x0D2A	; 0x800d2a <twi_slarw.lto_priv.265>
   15e36:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:188
    } while(TWCR & _BV(TWWC));
   15e3a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   15e3e:	83 fd       	sbrc	r24, 3
   15e40:	f8 cf       	rjmp	.-16     	; 0x15e32 <twi_readFrom.part.0.constprop.200+0x3e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
   15e42:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
   15e44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
   15e48:	80 91 2f 0d 	lds	r24, 0x0D2F	; 0x800d2f <twi_state.lto_priv.271>
   15e4c:	81 30       	cpi	r24, 0x01	; 1
   15e4e:	e1 f3       	breq	.-8      	; 0x15e48 <twi_readFrom.part.0.constprop.200+0x54>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
   15e50:	80 91 2c 0d 	lds	r24, 0x0D2C	; 0x800d2c <twi_masterBufferIndex.lto_priv.266>
   15e54:	86 17       	cp	r24, r22
   15e56:	10 f4       	brcc	.+4      	; 0x15e5c <twi_readFrom.part.0.constprop.200+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:201
    length = twi_masterBufferIndex;
   15e58:	60 91 2c 0d 	lds	r22, 0x0D2C	; 0x800d2c <twi_masterBufferIndex.lto_priv.266>
   15e5c:	a9 e0       	ldi	r26, 0x09	; 9
   15e5e:	bd e0       	ldi	r27, 0x0D	; 13
   15e60:	e9 ee       	ldi	r30, 0xE9	; 233
   15e62:	fc e0       	ldi	r31, 0x0C	; 12
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
   15e64:	80 e0       	ldi	r24, 0x00	; 0
   15e66:	86 13       	cpse	r24, r22
   15e68:	03 c0       	rjmp	.+6      	; 0x15e70 <twi_readFrom.part.0.constprop.200+0x7c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
   15e6a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
   15e6c:	85 ee       	ldi	r24, 0xE5	; 229
   15e6e:	ea cf       	rjmp	.-44     	; 0x15e44 <twi_readFrom.part.0.constprop.200+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
   15e70:	9d 91       	ld	r25, X+
   15e72:	91 93       	st	Z+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
   15e74:	8f 5f       	subi	r24, 0xFF	; 255
   15e76:	f7 cf       	rjmp	.-18     	; 0x15e66 <twi_readFrom.part.0.constprop.200+0x72>

00015e78 <TwoWire::beginTransmission(unsigned char) [clone .constprop.198]>:
_ZN7TwoWire17beginTransmissionEh.constprop.198():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:144
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
   15e78:	91 e0       	ldi	r25, 0x01	; 1
   15e7a:	90 93 e8 0c 	sts	0x0CE8, r25	; 0x800ce8 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:146
  // set address of targeted slave
  txAddress = address;
   15e7e:	80 93 e7 0c 	sts	0x0CE7, r24	; 0x800ce7 <TwoWire::txAddress>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:148
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   15e82:	10 92 e6 0c 	sts	0x0CE6, r1	; 0x800ce6 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:149
  txBufferLength = 0;
   15e86:	10 92 e5 0c 	sts	0x0CE5, r1	; 0x800ce5 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:150
}
   15e8a:	08 95       	ret

00015e8c <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.195]>:
_ZN24Temperature_LM75_Derived30readIntegerTemperatureRegisterEh.constprop.195():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:51
  .default_temperature_frac_width = 8,
  .max_temperature_resolution     = 13,
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
   15e8c:	cf 93       	push	r28
   15e8e:	df 93       	push	r29
   15e90:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
   15e92:	80 91 d1 0f 	lds	r24, 0x0FD1	; 0x800fd1 <lm75_temp+0x2>
   15e96:	0e 94 3c af 	call	0x15e78	; 0x15e78 <TwoWire::beginTransmission(unsigned char) [clone .constprop.198]>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
   15e9a:	80 91 cf 0f 	lds	r24, 0x0FCF	; 0x800fcf <lm75_temp>
   15e9e:	90 91 d0 0f 	lds	r25, 0x0FD0	; 0x800fd0 <lm75_temp+0x1>
   15ea2:	dc 01       	movw	r26, r24
   15ea4:	ed 91       	ld	r30, X+
   15ea6:	fc 91       	ld	r31, X
   15ea8:	01 90       	ld	r0, Z+
   15eaa:	f0 81       	ld	r31, Z
   15eac:	e0 2d       	mov	r30, r0
   15eae:	6c 2f       	mov	r22, r28
   15eb0:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
   15eb2:	80 91 cf 0f 	lds	r24, 0x0FCF	; 0x800fcf <lm75_temp>
   15eb6:	90 91 d0 0f 	lds	r25, 0x0FD0	; 0x800fd0 <lm75_temp+0x1>
   15eba:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
   15ebe:	80 91 cf 0f 	lds	r24, 0x0FCF	; 0x800fcf <lm75_temp>
   15ec2:	90 91 d0 0f 	lds	r25, 0x0FD0	; 0x800fd0 <lm75_temp+0x1>
   15ec6:	20 91 d2 0f 	lds	r18, 0x0FD2	; 0x800fd2 <lm75_temp+0x3>
   15eca:	42 e0       	ldi	r20, 0x02	; 2
   15ecc:	29 30       	cpi	r18, 0x09	; 9
   15ece:	08 f4       	brcc	.+2      	; 0x15ed2 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.195]+0x46>
   15ed0:	41 e0       	ldi	r20, 0x01	; 1
   15ed2:	60 91 d1 0f 	lds	r22, 0x0FD1	; 0x800fd1 <lm75_temp+0x2>
   15ed6:	0e 94 f7 4f 	call	0x9fee	; 0x9fee <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
   15eda:	80 91 cf 0f 	lds	r24, 0x0FCF	; 0x800fcf <lm75_temp>
   15ede:	90 91 d0 0f 	lds	r25, 0x0FD0	; 0x800fd0 <lm75_temp+0x1>
   15ee2:	dc 01       	movw	r26, r24
   15ee4:	ed 91       	ld	r30, X+
   15ee6:	fc 91       	ld	r31, X
   15ee8:	02 84       	ldd	r0, Z+10	; 0x0a
   15eea:	f3 85       	ldd	r31, Z+11	; 0x0b
   15eec:	e0 2d       	mov	r30, r0
   15eee:	19 95       	eicall
   15ef0:	d8 2f       	mov	r29, r24
   15ef2:	b0 e0       	ldi	r27, 0x00	; 0
   15ef4:	cb 2f       	mov	r28, r27
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
   15ef6:	80 91 d2 0f 	lds	r24, 0x0FD2	; 0x800fd2 <lm75_temp+0x3>
   15efa:	89 30       	cpi	r24, 0x09	; 9
   15efc:	68 f0       	brcs	.+26     	; 0x15f18 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.195]+0x8c>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
   15efe:	80 91 cf 0f 	lds	r24, 0x0FCF	; 0x800fcf <lm75_temp>
   15f02:	90 91 d0 0f 	lds	r25, 0x0FD0	; 0x800fd0 <lm75_temp+0x1>
   15f06:	dc 01       	movw	r26, r24
   15f08:	ed 91       	ld	r30, X+
   15f0a:	fc 91       	ld	r31, X
   15f0c:	02 84       	ldd	r0, Z+10	; 0x0a
   15f0e:	f3 85       	ldd	r31, Z+11	; 0x0b
   15f10:	e0 2d       	mov	r30, r0
   15f12:	19 95       	eicall
   15f14:	c8 2b       	or	r28, r24
   15f16:	d9 2b       	or	r29, r25
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
   15f18:	80 91 cf 0f 	lds	r24, 0x0FCF	; 0x800fcf <lm75_temp>
   15f1c:	90 91 d0 0f 	lds	r25, 0x0FD0	; 0x800fd0 <lm75_temp+0x1>
   15f20:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
   15f24:	80 91 d3 0f 	lds	r24, 0x0FD3	; 0x800fd3 <lm75_temp+0x4>
   15f28:	90 91 d4 0f 	lds	r25, 0x0FD4	; 0x800fd4 <lm75_temp+0x5>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:76

  // Read the raw memory as a 16-bit signed integer and return.
  return *(int16_t *)(&t);
}
   15f2c:	8c 23       	and	r24, r28
   15f2e:	9d 23       	and	r25, r29
   15f30:	df 91       	pop	r29
   15f32:	cf 91       	pop	r28
   15f34:	08 95       	ret

00015f36 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.192]>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.192():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:99
{
	Fill_Rect(x, y, w, 1, draw_color);
}

//Fill the full screen with color
void LCDWIKI_GUI::Fill_Screen(uint16_t color)
   15f36:	ef 92       	push	r14
   15f38:	ff 92       	push	r15
   15f3a:	0f 93       	push	r16
   15f3c:	1f 93       	push	r17
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   15f3e:	e4 e8       	ldi	r30, 0x84	; 132
   15f40:	ff e0       	ldi	r31, 0x0F	; 15
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.192():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:101
{
	Fill_Rect(0, 0, Get_Width(), Get_Height(), color);
   15f42:	04 89       	ldd	r16, Z+20	; 0x14
   15f44:	15 89       	ldd	r17, Z+21	; 0x15
   15f46:	22 89       	ldd	r18, Z+18	; 0x12
   15f48:	33 89       	ldd	r19, Z+19	; 0x13
   15f4a:	7c 01       	movw	r14, r24
   15f4c:	50 e0       	ldi	r21, 0x00	; 0
   15f4e:	40 e0       	ldi	r20, 0x00	; 0
   15f50:	70 e0       	ldi	r23, 0x00	; 0
   15f52:	60 e0       	ldi	r22, 0x00	; 0
   15f54:	cf 01       	movw	r24, r30
   15f56:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:102
}
   15f5a:	1f 91       	pop	r17
   15f5c:	0f 91       	pop	r16
   15f5e:	ff 90       	pop	r15
   15f60:	ef 90       	pop	r14
   15f62:	08 95       	ret

00015f64 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>:
_Z19MenuHistoryPrevMenujjh.constprop.191():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1488


/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (MenuHistoryIndex > 0)
   15f64:	80 91 e4 0c 	lds	r24, 0x0CE4	; 0x800ce4 <MenuHistoryIndex>
   15f68:	88 23       	and	r24, r24
   15f6a:	29 f0       	breq	.+10     	; 0x15f76 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1490
  {
    MenuHistoryIndex--;
   15f6c:	81 50       	subi	r24, 0x01	; 1
   15f6e:	80 93 e4 0c 	sts	0x0CE4, r24	; 0x800ce4 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1491
    MenuPrepareStyle();
   15f72:	0c 94 78 87 	jmp	0x10ef0	; 0x10ef0 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1493
  }
}
   15f76:	08 95       	ret

00015f78 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]>:
_Z19MenuHistoryNextMenujjh.constprop.190():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1497
///
void MenuHistoryNextMenu(uint16_t id, uint16_t args1, uint8_t args3)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
   15f78:	20 91 e4 0c 	lds	r18, 0x0CE4	; 0x800ce4 <MenuHistoryIndex>
   15f7c:	2a 30       	cpi	r18, 0x0A	; 10
   15f7e:	70 f4       	brcc	.+28     	; 0x15f9c <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.190]+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1499
  {
    MenuHistoryIndex++;
   15f80:	2f 5f       	subi	r18, 0xFF	; 255
   15f82:	20 93 e4 0c 	sts	0x0CE4, r18	; 0x800ce4 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1500
    MenuHistory[MenuHistoryIndex] = id;
   15f86:	30 e0       	ldi	r19, 0x00	; 0
   15f88:	f9 01       	movw	r30, r18
   15f8a:	e6 52       	subi	r30, 0x26	; 38
   15f8c:	f3 4f       	sbci	r31, 0xF3	; 243
   15f8e:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1501
    Global_menu_args1[MenuHistoryIndex] = args1;
   15f90:	20 53       	subi	r18, 0x30	; 48
   15f92:	33 4f       	sbci	r19, 0xF3	; 243
   15f94:	f9 01       	movw	r30, r18
   15f96:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1502
    MenuPrepareStyle();
   15f98:	0c 94 78 87 	jmp	0x10ef0	; 0x10ef0 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1504
  }
}
   15f9c:	08 95       	ret

00015f9e <TwoWire::read() [clone .constprop.189]>:
_ZN7TwoWire4readEv.constprop.189():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   15f9e:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <TwoWire::rxBufferIndex>
   15fa2:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
   15fa6:	2f ef       	ldi	r18, 0xFF	; 255
   15fa8:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   15faa:	98 17       	cp	r25, r24
   15fac:	48 f4       	brcc	.+18     	; 0x15fc0 <TwoWire::read() [clone .constprop.189]+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
   15fae:	e9 2f       	mov	r30, r25
   15fb0:	f0 e0       	ldi	r31, 0x00	; 0
   15fb2:	e7 51       	subi	r30, 0x17	; 23
   15fb4:	f3 4f       	sbci	r31, 0xF3	; 243
   15fb6:	20 81       	ld	r18, Z
   15fb8:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
   15fba:	9f 5f       	subi	r25, 0xFF	; 255
   15fbc:	90 93 cf 0c 	sts	0x0CCF, r25	; 0x800ccf <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
   15fc0:	c9 01       	movw	r24, r18
   15fc2:	08 95       	ret

00015fc4 <TwoWire::write(int) [clone .constprop.188]>:
_ZN7TwoWire5writeEi.constprop.188():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.h:78
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   15fc4:	68 2f       	mov	r22, r24
   15fc6:	83 ec       	ldi	r24, 0xC3	; 195
   15fc8:	9f e0       	ldi	r25, 0x0F	; 15
   15fca:	0c 94 dd 34 	jmp	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>

00015fce <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]>:
_Z11owMatchNexthPh.constprop.186():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:122
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
   15fce:	df 92       	push	r13
   15fd0:	ef 92       	push	r14
   15fd2:	ff 92       	push	r15
   15fd4:	0f 93       	push	r16
   15fd6:	1f 93       	push	r17
   15fd8:	cf 93       	push	r28
   15fda:	df 93       	push	r29
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   15fdc:	90 91 77 12 	lds	r25, 0x1277	; 0x801277 <lastDevice>
   15fe0:	99 23       	and	r25, r25
   15fe2:	51 f0       	breq	.+20     	; 0x15ff8 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   15fe4:	d5 e0       	ldi	r29, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   15fe6:	8d 2f       	mov	r24, r29
   15fe8:	df 91       	pop	r29
   15fea:	cf 91       	pop	r28
   15fec:	1f 91       	pop	r17
   15fee:	0f 91       	pop	r16
   15ff0:	ff 90       	pop	r15
   15ff2:	ef 90       	pop	r14
   15ff4:	df 90       	pop	r13
   15ff6:	08 95       	ret
   15ff8:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
	serial_byte_number = 0;

	if(lastDevice)
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   15ffa:	0e 94 b4 50 	call	0xa168	; 0xa168 <ds2482owReset(unsigned char)>
   15ffe:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   16000:	81 11       	cpse	r24, r1
   16002:	f1 cf       	rjmp	.-30     	; 0x15fe6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   16004:	60 ef       	ldi	r22, 0xF0	; 240
   16006:	8f 2d       	mov	r24, r15
   16008:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <ds2482owWriteByte(unsigned char, unsigned char)>
   1600c:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   1600e:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   16010:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   16012:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   16014:	81 11       	cpse	r24, r1
   16016:	e7 cf       	rjmp	.-50     	; 0x15fe6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	
	while(serial_byte_number < 8)
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   16018:	80 91 6e 12 	lds	r24, 0x126E	; 0x80126e <lastDiscrepancy>
   1601c:	08 17       	cp	r16, r24
   1601e:	50 f4       	brcc	.+20     	; 0x16034 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   16020:	ee 2d       	mov	r30, r14
   16022:	f0 e0       	ldi	r31, 0x00	; 0
   16024:	e1 59       	subi	r30, 0x91	; 145
   16026:	fd 4e       	sbci	r31, 0xED	; 237
   16028:	80 81       	ld	r24, Z
   1602a:	81 23       	and	r24, r17
   1602c:	c1 e0       	ldi	r28, 0x01	; 1
   1602e:	29 f4       	brne	.+10     	; 0x1603a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x6c>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   16030:	c0 e0       	ldi	r28, 0x00	; 0
   16032:	03 c0       	rjmp	.+6      	; 0x1603a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x6c>
   16034:	c1 e0       	ldi	r28, 0x01	; 1
   16036:	80 13       	cpse	r24, r16
   16038:	fb cf       	rjmp	.-10     	; 0x16030 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x62>
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   1603a:	8f 2d       	mov	r24, r15
   1603c:	0e 94 3c af 	call	0x15e78	; 0x15e78 <TwoWire::beginTransmission(unsigned char) [clone .constprop.198]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   16040:	88 e7       	ldi	r24, 0x78	; 120
   16042:	90 e0       	ldi	r25, 0x00	; 0
   16044:	0e 94 e2 af 	call	0x15fc4	; 0x15fc4 <TwoWire::write(int) [clone .constprop.188]>
_Z11owMatchNexthPh.constprop.186():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   16048:	90 e0       	ldi	r25, 0x00	; 0
   1604a:	80 e0       	ldi	r24, 0x00	; 0
ds2482owWriteTriplet():
   1604c:	cc 23       	and	r28, r28
   1604e:	11 f0       	breq	.+4      	; 0x16054 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x86>
_Z11owMatchNexthPh.constprop.186():
   16050:	80 e8       	ldi	r24, 0x80	; 128
   16052:	90 e0       	ldi	r25, 0x00	; 0
ds2482owWriteTriplet():
   16054:	0e 94 e2 af 	call	0x15fc4	; 0x15fc4 <TwoWire::write(int) [clone .constprop.188]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669
        if (Wire.endTransmission() != I2C_ERROR_OK)
   16058:	83 ec       	ldi	r24, 0xC3	; 195
   1605a:	9f e0       	ldi	r25, 0x0F	; 15
   1605c:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <TwoWire::endTransmission()>
   16060:	81 11       	cpse	r24, r1
   16062:	53 c0       	rjmp	.+166    	; 0x1610a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x13c>
   16064:	6e ef       	ldi	r22, 0xFE	; 254
   16066:	d6 2e       	mov	r13, r22
   16068:	da 94       	dec	r13
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   1606a:	dd 20       	and	r13, r13
   1606c:	09 f4       	brne	.+2      	; 0x16070 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0xa2>
   1606e:	4f c0       	rjmp	.+158    	; 0x1610e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x140>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   16070:	41 e0       	ldi	r20, 0x01	; 1
   16072:	6f 2d       	mov	r22, r15
   16074:	83 ec       	ldi	r24, 0xC3	; 195
   16076:	9f e0       	ldi	r25, 0x0F	; 15
   16078:	0e 94 f7 4f 	call	0x9fee	; 0x9fee <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
   1607c:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <TwoWire::rxBufferLength>
   16080:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <TwoWire::rxBufferIndex>
   16084:	89 1b       	sub	r24, r25
   16086:	99 0b       	sbc	r25, r25
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   16088:	18 16       	cp	r1, r24
   1608a:	19 06       	cpc	r1, r25
   1608c:	1c f4       	brge	.+6      	; 0x16094 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0xc6>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   1608e:	0e 94 cf af 	call	0x15f9e	; 0x15f9e <TwoWire::read() [clone .constprop.189]>
   16092:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   16094:	c0 fd       	sbrc	r28, 0
   16096:	e8 cf       	rjmp	.-48     	; 0x16068 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x9a>
_Z11owMatchNexthPh.constprop.186():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		r=ds2482owWriteTriplet(ds2482_address, &direction);
		if(r) return r;

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   16098:	2c 2f       	mov	r18, r28
   1609a:	30 e0       	ldi	r19, 0x00	; 0
   1609c:	c9 01       	movw	r24, r18
   1609e:	45 e0       	ldi	r20, 0x05	; 5
   160a0:	95 95       	asr	r25
   160a2:	87 95       	ror	r24
   160a4:	4a 95       	dec	r20
   160a6:	e1 f7       	brne	.-8      	; 0x160a0 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0xd2>
   160a8:	83 70       	andi	r24, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   160aa:	22 0f       	add	r18, r18
   160ac:	23 2f       	mov	r18, r19
   160ae:	22 1f       	adc	r18, r18
   160b0:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   160b2:	83 30       	cpi	r24, 0x03	; 3
   160b4:	99 f0       	breq	.+38     	; 0x160dc <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x10e>
   160b6:	ee 2d       	mov	r30, r14
   160b8:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   160ba:	81 11       	cpse	r24, r1
   160bc:	1b c0       	rjmp	.+54     	; 0x160f4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x126>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   160be:	22 23       	and	r18, r18
   160c0:	11 f1       	breq	.+68     	; 0x16106 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x138>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   160c2:	e1 59       	subi	r30, 0x91	; 145
   160c4:	fd 4e       	sbci	r31, 0xED	; 237
   160c6:	80 81       	ld	r24, Z
   160c8:	81 2b       	or	r24, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   160ca:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   160cc:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   160ce:	11 0f       	add	r17, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   160d0:	11 f4       	brne	.+4      	; 0x160d6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   160d2:	e3 94       	inc	r14
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   160d4:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   160d6:	88 e0       	ldi	r24, 0x08	; 8
   160d8:	e8 12       	cpse	r14, r24
   160da:	9e cf       	rjmp	.-196    	; 0x16018 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x4a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   160dc:	01 34       	cpi	r16, 0x41	; 65
   160de:	08 f4       	brcc	.+2      	; 0x160e2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x114>
   160e0:	81 cf       	rjmp	.-254    	; 0x15fe4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x16>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   160e2:	d0 93 6e 12 	sts	0x126E, r29	; 0x80126e <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   160e6:	81 e0       	ldi	r24, 0x01	; 1
   160e8:	d1 11       	cpse	r29, r1
   160ea:	80 e0       	ldi	r24, 0x00	; 0
   160ec:	80 93 77 12 	sts	0x1277, r24	; 0x801277 <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:189
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
   160f0:	d0 e0       	ldi	r29, 0x00	; 0
   160f2:	79 cf       	rjmp	.-270    	; 0x15fe6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   160f4:	21 11       	cpse	r18, r1
   160f6:	e5 cf       	rjmp	.-54     	; 0x160c2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0xf4>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   160f8:	e1 59       	subi	r30, 0x91	; 145
   160fa:	fd 4e       	sbci	r31, 0xED	; 237
   160fc:	80 81       	ld	r24, Z
   160fe:	91 2f       	mov	r25, r17
   16100:	90 95       	com	r25
   16102:	89 23       	and	r24, r25
   16104:	e2 cf       	rjmp	.-60     	; 0x160ca <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0xfc>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   16106:	d0 2f       	mov	r29, r16
   16108:	f7 cf       	rjmp	.-18     	; 0x160f8 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x12a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   1610a:	d3 e0       	ldi	r29, 0x03	; 3
   1610c:	6c cf       	rjmp	.-296    	; 0x15fe6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   1610e:	d4 e0       	ldi	r29, 0x04	; 4
   16110:	6a cf       	rjmp	.-300    	; 0x15fe6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]+0x18>

00016112 <one_hw_search_device(unsigned char) [clone .constprop.183]>:
_Z20one_hw_search_deviceh.constprop.183():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:231
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
   16112:	ff 92       	push	r15
   16114:	0f 93       	push	r16
   16116:	1f 93       	push	r17
   16118:	cf 93       	push	r28
   1611a:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:234
{
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
   1611c:	10 92 cd 0c 	sts	0x0CCD, r1	; 0x800ccd <ds2482_address+0x1>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
   16120:	c0 91 cc 0c 	lds	r28, 0x0CCC	; 0x800ccc <ds2482_address>
ds2482init():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:186
 * Initialize TWI, this routine is designed for 8Mhz operation.
 */
uint8_t ds2482init(uint8_t addr)
{

	Wire.beginTransmission(addr);
   16124:	8c 2f       	mov	r24, r28
   16126:	0e 94 3c af 	call	0x15e78	; 0x15e78 <TwoWire::beginTransmission(unsigned char) [clone .constprop.198]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:187
        if (Wire.endTransmission() == I2C_ERROR_OK)
   1612a:	83 ec       	ldi	r24, 0xC3	; 195
   1612c:	9f e0       	ldi	r25, 0x0F	; 15
   1612e:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <TwoWire::endTransmission()>
   16132:	81 11       	cpse	r24, r1
   16134:	10 c0       	rjmp	.+32     	; 0x16156 <one_hw_search_device(unsigned char) [clone .constprop.183]+0x44>
ds2482setConfig():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:352
	//	return DS2482_ERR_WRITE;

	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
   16136:	8c 2f       	mov	r24, r28
   16138:	0e 94 3c af 	call	0x15e78	; 0x15e78 <TwoWire::beginTransmission(unsigned char) [clone .constprop.198]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:353
        Wire.write(DS2482_C_WCFG);
   1613c:	82 ed       	ldi	r24, 0xD2	; 210
   1613e:	90 e0       	ldi	r25, 0x00	; 0
   16140:	0e 94 e2 af 	call	0x15fc4	; 0x15fc4 <TwoWire::write(int) [clone .constprop.188]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:354
        Wire.write(config);
   16144:	60 e0       	ldi	r22, 0x00	; 0
   16146:	83 ec       	ldi	r24, 0xC3	; 195
   16148:	9f e0       	ldi	r25, 0x0F	; 15
   1614a:	0e 94 dd 34 	call	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:355
        if (Wire.endTransmission() == I2C_ERROR_OK)
   1614e:	83 ec       	ldi	r24, 0xC3	; 195
   16150:	9f e0       	ldi	r25, 0x0F	; 15
   16152:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <TwoWire::endTransmission()>
_Z20one_hw_search_deviceh.constprop.183():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
   16156:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <ds2482_address>
   1615a:	0e 94 ea 4f 	call	0x9fd4	; 0x9fd4 <ds2482reset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
   1615e:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <ds2482_address>
   16162:	0e 94 b4 50 	call	0xa168	; 0xa168 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
   16166:	10 91 cc 0c 	lds	r17, 0x0CCC	; 0x800ccc <ds2482_address>
owMatchFirst():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
   1616a:	10 92 77 12 	sts	0x1277, r1	; 0x801277 <lastDevice>
   1616e:	10 92 6e 12 	sts	0x126E, r1	; 0x80126e <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
   16172:	81 2f       	mov	r24, r17
   16174:	0e 94 e7 af 	call	0x15fce	; 0x15fce <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]>
_Z20one_hw_search_deviceh.constprop.183():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
   16178:	81 11       	cpse	r24, r1
   1617a:	31 c0       	rjmp	.+98     	; 0x161de <one_hw_search_device(unsigned char) [clone .constprop.183]+0xcc>
   1617c:	0b e0       	ldi	r16, 0x0B	; 11
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
   1617e:	ff 24       	eor	r15, r15
   16180:	f3 94       	inc	r15
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   16182:	d0 91 cd 0c 	lds	r29, 0x0CCD	; 0x800ccd <ds2482_address+0x1>
   16186:	d6 30       	cpi	r29, 0x06	; 6
   16188:	50 f5       	brcc	.+84     	; 0x161de <one_hw_search_device(unsigned char) [clone .constprop.183]+0xcc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
   1618a:	c0 91 cb 0c 	lds	r28, 0x0CCB	; 0x800ccb <Global_HWwirenum>
   1618e:	2c 2f       	mov	r18, r28
   16190:	30 e0       	ldi	r19, 0x00	; 0
   16192:	af e6       	ldi	r26, 0x6F	; 111
   16194:	b2 e1       	ldi	r27, 0x12	; 18
   16196:	c0 9f       	mul	r28, r16
   16198:	b0 01       	movw	r22, r0
   1619a:	11 24       	eor	r1, r1
   1619c:	90 e0       	ldi	r25, 0x00	; 0
   1619e:	80 e0       	ldi	r24, 0x00	; 0
   161a0:	4d 91       	ld	r20, X+
   161a2:	fc 01       	movw	r30, r24
   161a4:	e6 0f       	add	r30, r22
   161a6:	f7 1f       	adc	r31, r23
   161a8:	e7 57       	subi	r30, 0x77	; 119
   161aa:	f3 4f       	sbci	r31, 0xF3	; 243
   161ac:	40 83       	st	Z, r20
   161ae:	01 96       	adiw	r24, 0x01	; 1
   161b0:	88 30       	cpi	r24, 0x08	; 8
   161b2:	91 05       	cpc	r25, r1
   161b4:	a9 f7       	brne	.-22     	; 0x161a0 <one_hw_search_device(unsigned char) [clone .constprop.183]+0x8e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
   161b6:	02 9f       	mul	r16, r18
   161b8:	f0 01       	movw	r30, r0
   161ba:	03 9f       	mul	r16, r19
   161bc:	f0 0d       	add	r31, r0
   161be:	11 24       	eor	r1, r1
   161c0:	e7 57       	subi	r30, 0x77	; 119
   161c2:	f3 4f       	sbci	r31, 0xF3	; 243
   161c4:	10 86       	std	Z+8, r1	; 0x08
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
   161c6:	f1 86       	std	Z+9, r15	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
   161c8:	81 2f       	mov	r24, r17
   161ca:	0e 94 e7 af 	call	0x15fce	; 0x15fce <owMatchNext(unsigned char, unsigned char*) [clone .constprop.186]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
   161ce:	df 5f       	subi	r29, 0xFF	; 255
   161d0:	d0 93 cd 0c 	sts	0x0CCD, r29	; 0x800ccd <ds2482_address+0x1>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
   161d4:	cf 5f       	subi	r28, 0xFF	; 255
   161d6:	c0 93 cb 0c 	sts	0x0CCB, r28	; 0x800ccb <Global_HWwirenum>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
   161da:	85 30       	cpi	r24, 0x05	; 5
   161dc:	91 f6       	brne	.-92     	; 0x16182 <one_hw_search_device(unsigned char) [clone .constprop.183]+0x70>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:262
      { ///hledani dokonceno
        break;
      }
    }
  return r;
}
   161de:	df 91       	pop	r29
   161e0:	cf 91       	pop	r28
   161e2:	1f 91       	pop	r17
   161e4:	0f 91       	pop	r16
   161e6:	ff 90       	pop	r15
   161e8:	08 95       	ret

000161ea <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.182]>:
_Z10parseBytesPKccPhii.constprop.182():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106
{
 return x;
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
   161ea:	cf 92       	push	r12
   161ec:	df 92       	push	r13
   161ee:	ef 92       	push	r14
   161f0:	ff 92       	push	r15
   161f2:	0f 93       	push	r16
   161f4:	1f 93       	push	r17
   161f6:	cf 93       	push	r28
   161f8:	df 93       	push	r29
   161fa:	ec 01       	movw	r28, r24
   161fc:	8a 01       	movw	r16, r20
   161fe:	7a 01       	movw	r14, r20
   16200:	e2 0e       	add	r14, r18
   16202:	f3 1e       	adc	r15, r19
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   16204:	c6 2e       	mov	r12, r22
   16206:	66 0f       	add	r22, r22
   16208:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:110

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   1620a:	4a e0       	ldi	r20, 0x0A	; 10
   1620c:	50 e0       	ldi	r21, 0x00	; 0
   1620e:	70 e0       	ldi	r23, 0x00	; 0
   16210:	60 e0       	ldi	r22, 0x00	; 0
   16212:	ce 01       	movw	r24, r28
   16214:	0e 94 ba d3 	call	0x1a774	; 0x1a774 <strtoul>
   16218:	f8 01       	movw	r30, r16
   1621a:	61 93       	st	Z+, r22
   1621c:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
    str = strchr(str, sep);               // Find next separator
   1621e:	b6 01       	movw	r22, r12
   16220:	ce 01       	movw	r24, r28
   16222:	0e 94 8c e1 	call	0x1c318	; 0x1c318 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:112
    if (str == NULL || *str == '\0') {
   16226:	00 97       	sbiw	r24, 0x00	; 0
   16228:	49 f0       	breq	.+18     	; 0x1623c <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.182]+0x52>
   1622a:	fc 01       	movw	r30, r24
   1622c:	20 81       	ld	r18, Z
   1622e:	22 23       	and	r18, r18
   16230:	29 f0       	breq	.+10     	; 0x1623c <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.182]+0x52>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:115
      break;                            // No more separators, exit
    }
    str++;                               // Point to next character after separator
   16232:	ec 01       	movw	r28, r24
   16234:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
   16236:	0e 15       	cp	r16, r14
   16238:	1f 05       	cpc	r17, r15
   1623a:	39 f7       	brne	.-50     	; 0x1620a <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.182]+0x20>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:117
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                               // Point to next character after separator
  }
}
   1623c:	df 91       	pop	r29
   1623e:	cf 91       	pop	r28
   16240:	1f 91       	pop	r17
   16242:	0f 91       	pop	r16
   16244:	ff 90       	pop	r15
   16246:	ef 90       	pop	r14
   16248:	df 90       	pop	r13
   1624a:	cf 90       	pop	r12
   1624c:	08 95       	ret

0001624e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]>:
_Z11show_stringPciihjjb.constprop.168():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1960
    csize - velikost pisma
    fc - foreground color
    bc - backgroud color
    mode - ?
*/
void show_string(char *str, int16_t x, int16_t y, uint8_t csize, uint16_t fc, uint16_t bc, boolean mode)
   1624e:	8f 92       	push	r8
   16250:	9f 92       	push	r9
   16252:	af 92       	push	r10
   16254:	bf 92       	push	r11
   16256:	cf 92       	push	r12
   16258:	df 92       	push	r13
   1625a:	ef 92       	push	r14
   1625c:	ff 92       	push	r15
   1625e:	0f 93       	push	r16
   16260:	1f 93       	push	r17
   16262:	cf 93       	push	r28
   16264:	df 93       	push	r29
   16266:	00 d0       	rcall	.+0      	; 0x16268 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]+0x1a>
   16268:	00 d0       	rcall	.+0      	; 0x1626a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]+0x1c>
   1626a:	cd b7       	in	r28, 0x3d	; 61
   1626c:	de b7       	in	r29, 0x3e	; 62
   1626e:	6c 01       	movw	r12, r24
   16270:	5b 01       	movw	r10, r22
   16272:	4a 01       	movw	r8, r20
Set_Text_Mode():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
   16274:	10 92 91 0f 	sts	0x0F91, r1	; 0x800f91 <my_lcd+0xd>
Set_Text_Size():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:529
}

//set text size
void LCDWIKI_GUI::Set_Text_Size(uint8_t s)
{
	text_size = s;
   16278:	20 93 90 0f 	sts	0x0F90, r18	; 0x800f90 <my_lcd+0xc>
Set_Text_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:493
}

//set text colour with 16bit color
void LCDWIKI_GUI::Set_Text_colour(uint16_t color)
{
	text_color = color;
   1627c:	10 93 8b 0f 	sts	0x0F8B, r17	; 0x800f8b <my_lcd+0x7>
   16280:	00 93 8a 0f 	sts	0x0F8A, r16	; 0x800f8a <my_lcd+0x6>
Set_Text_Back_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:511
}

//set text background colour with 16bits color
void LCDWIKI_GUI::Set_Text_Back_colour(uint16_t color)
{
	text_bgcolor = color;	
   16284:	f0 92 8d 0f 	sts	0x0F8D, r15	; 0x800f8d <my_lcd+0x9>
   16288:	e0 92 8c 0f 	sts	0x0F8C, r14	; 0x800f8c <my_lcd+0x8>
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   1628c:	1a 82       	std	Y+2, r1	; 0x02
   1628e:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   16290:	1c 82       	std	Y+4, r1	; 0x04
   16292:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   16294:	1e 82       	std	Y+6, r1	; 0x06
   16296:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   16298:	00 97       	sbiw	r24, 0x00	; 0
   1629a:	69 f1       	breq	.+90     	; 0x162f6 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]+0xa8>
   1629c:	fc 01       	movw	r30, r24
   1629e:	01 90       	ld	r0, Z+
   162a0:	00 20       	and	r0, r0
   162a2:	e9 f7       	brne	.-6      	; 0x1629e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]+0x50>
   162a4:	31 97       	sbiw	r30, 0x01	; 1
   162a6:	8f 01       	movw	r16, r30
   162a8:	08 1b       	sub	r16, r24
   162aa:	19 0b       	sbc	r17, r25
changeBuffer():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:157
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   162ac:	b8 01       	movw	r22, r16
   162ae:	6f 5f       	subi	r22, 0xFF	; 255
   162b0:	7f 4f       	sbci	r23, 0xFF	; 255
   162b2:	90 e0       	ldi	r25, 0x00	; 0
   162b4:	80 e0       	ldi	r24, 0x00	; 0
   162b6:	0e 94 92 e0 	call	0x1c124	; 0x1c124 <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   162ba:	00 97       	sbiw	r24, 0x00	; 0
   162bc:	81 f0       	breq	.+32     	; 0x162de <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]+0x90>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   162be:	9a 83       	std	Y+2, r25	; 0x02
   162c0:	89 83       	std	Y+1, r24	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   162c2:	1c 83       	std	Y+4, r17	; 0x04
   162c4:	0b 83       	std	Y+3, r16	; 0x03
reserve():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   162c6:	2d 81       	ldd	r18, Y+5	; 0x05
   162c8:	3e 81       	ldd	r19, Y+6	; 0x06
   162ca:	23 2b       	or	r18, r19
   162cc:	11 f4       	brne	.+4      	; 0x162d2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]+0x84>
   162ce:	fc 01       	movw	r30, r24
   162d0:	10 82       	st	Z, r1
copy():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   162d2:	1e 83       	std	Y+6, r17	; 0x06
   162d4:	0d 83       	std	Y+5, r16	; 0x05
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   162d6:	b6 01       	movw	r22, r12
   162d8:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
   162dc:	0c c0       	rjmp	.+24     	; 0x162f6 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]+0xa8>
invalidate():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
   162de:	89 81       	ldd	r24, Y+1	; 0x01
   162e0:	9a 81       	ldd	r25, Y+2	; 0x02
   162e2:	00 97       	sbiw	r24, 0x00	; 0
   162e4:	11 f0       	breq	.+4      	; 0x162ea <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.168]+0x9c>
   162e6:	0e 94 02 da 	call	0x1b404	; 0x1b404 <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   162ea:	1a 82       	std	Y+2, r1	; 0x02
   162ec:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   162ee:	1e 82       	std	Y+6, r1	; 0x06
   162f0:	1d 82       	std	Y+5, r1	; 0x05
   162f2:	1c 82       	std	Y+4, r1	; 0x04
   162f4:	1b 82       	std	Y+3, r1	; 0x03
_Z11show_stringPciihjjb.constprop.168():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1966
{
  my_lcd.Set_Text_Mode(mode);
  my_lcd.Set_Text_Size(csize);
  my_lcd.Set_Text_colour(fc);
  my_lcd.Set_Text_Back_colour(bc);
  my_lcd.Print_String(str, x, y);
   162f6:	a4 01       	movw	r20, r8
   162f8:	b5 01       	movw	r22, r10
   162fa:	ce 01       	movw	r24, r28
   162fc:	01 96       	adiw	r24, 0x01	; 1
   162fe:	0e 94 48 ab 	call	0x15690	; 0x15690 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.173]>
__base_dtor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   16302:	89 81       	ldd	r24, Y+1	; 0x01
   16304:	9a 81       	ldd	r25, Y+2	; 0x02
   16306:	0e 94 02 da 	call	0x1b404	; 0x1b404 <free>
_Z11show_stringPciihjjb.constprop.168():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1967
}
   1630a:	26 96       	adiw	r28, 0x06	; 6
   1630c:	0f b6       	in	r0, 0x3f	; 63
   1630e:	f8 94       	cli
   16310:	de bf       	out	0x3e, r29	; 62
   16312:	0f be       	out	0x3f, r0	; 63
   16314:	cd bf       	out	0x3d, r28	; 61
   16316:	df 91       	pop	r29
   16318:	cf 91       	pop	r28
   1631a:	1f 91       	pop	r17
   1631c:	0f 91       	pop	r16
   1631e:	ff 90       	pop	r15
   16320:	ef 90       	pop	r14
   16322:	df 90       	pop	r13
   16324:	cf 90       	pop	r12
   16326:	bf 90       	pop	r11
   16328:	af 90       	pop	r10
   1632a:	9f 90       	pop	r9
   1632c:	8f 90       	pop	r8
   1632e:	08 95       	ret

00016330 <PubSubClient::subscribe(char const*) [clone .constprop.165]>:
_ZN12PubSubClient9subscribeEPKc.constprop.165():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:468
    lastOutActivity = millis();
    return (rc == 1+llen+length);
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
   16330:	cf 93       	push	r28
   16332:	df 93       	push	r29
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:476

boolean PubSubClient::subscribe(const char* topic, uint8_t qos) {
    if (qos < 0 || qos > 1) {
        return false;
    }
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   16334:	fc 01       	movw	r30, r24
   16336:	01 90       	ld	r0, Z+
   16338:	00 20       	and	r0, r0
   1633a:	e9 f7       	brne	.-6      	; 0x16336 <PubSubClient::subscribe(char const*) [clone .constprop.165]+0x6>
   1633c:	9f 01       	movw	r18, r30
   1633e:	28 1b       	sub	r18, r24
   16340:	39 0b       	sbc	r19, r25
   16342:	28 5f       	subi	r18, 0xF8	; 248
   16344:	3f 4f       	sbci	r19, 0xFF	; 255
   16346:	21 30       	cpi	r18, 0x01	; 1
   16348:	32 40       	sbci	r19, 0x02	; 2
   1634a:	98 f5       	brcc	.+102    	; 0x163b2 <PubSubClient::subscribe(char const*) [clone .constprop.165]+0x82>
   1634c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:480
        // Too long
        return false;
    }
    if (connected()) {
   1634e:	8a ef       	ldi	r24, 0xFA	; 250
   16350:	9f e0       	ldi	r25, 0x0F	; 15
   16352:	0e 94 7d 52 	call	0xa4fa	; 0xa4fa <PubSubClient::connected()>
   16356:	88 23       	and	r24, r24
   16358:	61 f1       	breq	.+88     	; 0x163b2 <PubSubClient::subscribe(char const*) [clone .constprop.165]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:483
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   1635a:	80 91 fc 11 	lds	r24, 0x11FC	; 0x8011fc <mqtt_client+0x202>
   1635e:	90 91 fd 11 	lds	r25, 0x11FD	; 0x8011fd <mqtt_client+0x203>
   16362:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:484
        if (nextMsgId == 0) {
   16364:	19 f1       	breq	.+70     	; 0x163ac <PubSubClient::subscribe(char const*) [clone .constprop.165]+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
            nextMsgId = 1;
   16366:	90 93 fd 11 	sts	0x11FD, r25	; 0x8011fd <mqtt_client+0x203>
   1636a:	80 93 fc 11 	sts	0x11FC, r24	; 0x8011fc <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:487
        }
        buffer[length++] = (nextMsgId >> 8);
   1636e:	80 91 fc 11 	lds	r24, 0x11FC	; 0x8011fc <mqtt_client+0x202>
   16372:	90 91 fd 11 	lds	r25, 0x11FD	; 0x8011fd <mqtt_client+0x203>
   16376:	90 93 01 10 	sts	0x1001, r25	; 0x801001 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:488
        buffer[length++] = (nextMsgId & 0xFF);
   1637a:	80 93 02 10 	sts	0x1002, r24	; 0x801002 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:489
        length = writeString((char*)topic, buffer,length);
   1637e:	47 e0       	ldi	r20, 0x07	; 7
   16380:	50 e0       	ldi	r21, 0x00	; 0
   16382:	6c ef       	ldi	r22, 0xFC	; 252
   16384:	7f e0       	ldi	r23, 0x0F	; 15
   16386:	ce 01       	movw	r24, r28
   16388:	0e 94 d8 ae 	call	0x15db0	; 0x15db0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.213]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:490
        buffer[length++] = qos;
   1638c:	fc 01       	movw	r30, r24
   1638e:	e6 50       	subi	r30, 0x06	; 6
   16390:	f0 4f       	sbci	r31, 0xF0	; 240
   16392:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   16394:	9c 01       	movw	r18, r24
   16396:	24 50       	subi	r18, 0x04	; 4
   16398:	31 09       	sbc	r19, r1
   1639a:	4c ef       	ldi	r20, 0xFC	; 252
   1639c:	5f e0       	ldi	r21, 0x0F	; 15
   1639e:	62 e8       	ldi	r22, 0x82	; 130
   163a0:	8a ef       	ldi	r24, 0xFA	; 250
   163a2:	9f e0       	ldi	r25, 0x0F	; 15
_ZN12PubSubClient9subscribeEPKc.constprop.165():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   163a4:	df 91       	pop	r29
   163a6:	cf 91       	pop	r28
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString((char*)topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   163a8:	0c 94 b3 52 	jmp	0xa566	; 0xa566 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
    if (connected()) {
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
   163ac:	81 e0       	ldi	r24, 0x01	; 1
   163ae:	90 e0       	ldi	r25, 0x00	; 0
   163b0:	da cf       	rjmp	.-76     	; 0x16366 <PubSubClient::subscribe(char const*) [clone .constprop.165]+0x36>
_ZN12PubSubClient9subscribeEPKc.constprop.165():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   163b2:	80 e0       	ldi	r24, 0x00	; 0
   163b4:	df 91       	pop	r29
   163b6:	cf 91       	pop	r28
   163b8:	08 95       	ret

000163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.152():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:165
void send_mqtt_set_header(const char* header)
{
  header_out = header;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void send_mqtt_message_prefix_id_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, char *topic, char *payload)
   163ba:	af 92       	push	r10
   163bc:	bf 92       	push	r11
   163be:	df 92       	push	r13
   163c0:	ef 92       	push	r14
   163c2:	ff 92       	push	r15
   163c4:	0f 93       	push	r16
   163c6:	1f 93       	push	r17
   163c8:	cf 93       	push	r28
   163ca:	df 93       	push	r29
   163cc:	cd b7       	in	r28, 0x3d	; 61
   163ce:	de b7       	in	r29, 0x3e	; 62
   163d0:	c6 55       	subi	r28, 0x56	; 86
   163d2:	d1 09       	sbc	r29, r1
   163d4:	0f b6       	in	r0, 0x3f	; 63
   163d6:	f8 94       	cli
   163d8:	de bf       	out	0x3e, r29	; 62
   163da:	0f be       	out	0x3f, r0	; 63
   163dc:	cd bf       	out	0x3d, r28	; 61
   163de:	5c 01       	movw	r10, r24
   163e0:	d6 2e       	mov	r13, r22
   163e2:	7a 01       	movw	r14, r20
   163e4:	89 01       	movw	r16, r18
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:170
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   163e6:	8a ef       	ldi	r24, 0xFA	; 250
   163e8:	9f e0       	ldi	r25, 0x0F	; 15
   163ea:	0e 94 7d 52 	call	0xa4fa	; 0xa4fa <PubSubClient::connected()>
   163ee:	88 23       	and	r24, r24
   163f0:	09 f4       	brne	.+2      	; 0x163f4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]+0x3a>
   163f2:	52 c0       	rjmp	.+164    	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]+0xde>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:172
  {
    mqtt_send_message++;
   163f4:	80 91 85 0c 	lds	r24, 0x0C85	; 0x800c85 <mqtt_send_message>
   163f8:	90 91 86 0c 	lds	r25, 0x0C86	; 0x800c86 <mqtt_send_message+0x1>
   163fc:	01 96       	adiw	r24, 0x01	; 1
   163fe:	90 93 86 0c 	sts	0x0C86, r25	; 0x800c86 <mqtt_send_message+0x1>
   16402:	80 93 85 0c 	sts	0x0C85, r24	; 0x800c85 <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:173
    device_get_name(hostname);
   16406:	ce 01       	movw	r24, r28
   16408:	83 5b       	subi	r24, 0xB3	; 179
   1640a:	9f 4f       	sbci	r25, 0xFF	; 255
   1640c:	0e 94 e4 70 	call	0xe1c8	; 0xe1c8 <device_get_name(char*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:174
    strcpy_P(str_topic, header_out);
   16410:	60 91 83 0c 	lds	r22, 0x0C83	; 0x800c83 <header_out>
   16414:	70 91 84 0c 	lds	r23, 0x0C84	; 0x800c84 <header_out+0x1>
   16418:	ce 01       	movw	r24, r28
   1641a:	01 96       	adiw	r24, 0x01	; 1
   1641c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:175
    strcat(str_topic, hostname);
   16420:	be 01       	movw	r22, r28
   16422:	63 5b       	subi	r22, 0xB3	; 179
   16424:	7f 4f       	sbci	r23, 0xFF	; 255
   16426:	ce 01       	movw	r24, r28
   16428:	01 96       	adiw	r24, 0x01	; 1
   1642a:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:176
    strcat(str_topic, "/");
   1642e:	6a e8       	ldi	r22, 0x8A	; 138
   16430:	75 e0       	ldi	r23, 0x05	; 5
   16432:	ce 01       	movw	r24, r28
   16434:	01 96       	adiw	r24, 0x01	; 1
   16436:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:177
    strcat(str_topic, prefix);
   1643a:	b5 01       	movw	r22, r10
   1643c:	ce 01       	movw	r24, r28
   1643e:	01 96       	adiw	r24, 0x01	; 1
   16440:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:178
    strcat(str_topic, "/");
   16444:	6a e8       	ldi	r22, 0x8A	; 138
   16446:	75 e0       	ldi	r23, 0x05	; 5
   16448:	ce 01       	movw	r24, r28
   1644a:	01 96       	adiw	r24, 0x01	; 1
   1644c:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   16450:	4a e0       	ldi	r20, 0x0A	; 10
   16452:	be 01       	movw	r22, r28
   16454:	6f 5b       	subi	r22, 0xBF	; 191
   16456:	7f 4f       	sbci	r23, 0xFF	; 255
   16458:	8d 2d       	mov	r24, r13
   1645a:	90 e0       	ldi	r25, 0x00	; 0
   1645c:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.152():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:180
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   16460:	be 01       	movw	r22, r28
   16462:	6f 5b       	subi	r22, 0xBF	; 191
   16464:	7f 4f       	sbci	r23, 0xFF	; 255
   16466:	ce 01       	movw	r24, r28
   16468:	01 96       	adiw	r24, 0x01	; 1
   1646a:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:181
    strcat(str_topic, "/");
   1646e:	6a e8       	ldi	r22, 0x8A	; 138
   16470:	75 e0       	ldi	r23, 0x05	; 5
   16472:	ce 01       	movw	r24, r28
   16474:	01 96       	adiw	r24, 0x01	; 1
   16476:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:182
    strcat(str_topic, topic);
   1647a:	b7 01       	movw	r22, r14
   1647c:	ce 01       	movw	r24, r28
   1647e:	01 96       	adiw	r24, 0x01	; 1
   16480:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:183
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   16484:	a8 01       	movw	r20, r16
   16486:	be 01       	movw	r22, r28
   16488:	6f 5f       	subi	r22, 0xFF	; 255
   1648a:	7f 4f       	sbci	r23, 0xFF	; 255
   1648c:	8a ef       	ldi	r24, 0xFA	; 250
   1648e:	9f e0       	ldi	r25, 0x0F	; 15
   16490:	0e 94 21 53 	call	0xa642	; 0xa642 <PubSubClient::publish(char const*, char const*)>
   16494:	81 11       	cpse	r24, r1
   16496:	09 c0       	rjmp	.+18     	; 0x164aa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]+0xf0>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:186
  }
  else
    mqtt_error++;
   16498:	80 91 87 0c 	lds	r24, 0x0C87	; 0x800c87 <mqtt_error>
   1649c:	90 91 88 0c 	lds	r25, 0x0C88	; 0x800c88 <mqtt_error+0x1>
   164a0:	01 96       	adiw	r24, 0x01	; 1
   164a2:	90 93 88 0c 	sts	0x0C88, r25	; 0x800c88 <mqtt_error+0x1>
   164a6:	80 93 87 0c 	sts	0x0C87, r24	; 0x800c87 <mqtt_error>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:187
}
   164aa:	ca 5a       	subi	r28, 0xAA	; 170
   164ac:	df 4f       	sbci	r29, 0xFF	; 255
   164ae:	0f b6       	in	r0, 0x3f	; 63
   164b0:	f8 94       	cli
   164b2:	de bf       	out	0x3e, r29	; 62
   164b4:	0f be       	out	0x3f, r0	; 63
   164b6:	cd bf       	out	0x3d, r28	; 61
   164b8:	df 91       	pop	r29
   164ba:	cf 91       	pop	r28
   164bc:	1f 91       	pop	r17
   164be:	0f 91       	pop	r16
   164c0:	ff 90       	pop	r15
   164c2:	ef 90       	pop	r14
   164c4:	df 90       	pop	r13
   164c6:	bf 90       	pop	r11
   164c8:	af 90       	pop	r10
   164ca:	08 95       	ret

000164cc <TwoWire::requestFrom(int, int) [clone .constprop.149]>:
_ZN7TwoWire11requestFromEii.constprop.149():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:131
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
   164cc:	68 2f       	mov	r22, r24
   164ce:	88 e6       	ldi	r24, 0x68	; 104
   164d0:	0e 94 fa ae 	call	0x15df4	; 0x15df4 <twi_readFrom.part.0.constprop.200>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   164d4:	10 92 cf 0c 	sts	0x0CCF, r1	; 0x800ccf <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   164d8:	80 93 ce 0c 	sts	0x0CCE, r24	; 0x800cce <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:134
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   164dc:	08 95       	ret

000164de <RTC_DS1307::isrunning() [clone .constprop.148]>:
_ZN10RTC_DS13079isrunningEv.constprop.148():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   164de:	88 e6       	ldi	r24, 0x68	; 104
   164e0:	0e 94 3c af 	call	0x15e78	; 0x15e78 <TwoWire::beginTransmission(unsigned char) [clone .constprop.198]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
   164e4:	60 e0       	ldi	r22, 0x00	; 0
   164e6:	83 ec       	ldi	r24, 0xC3	; 195
   164e8:	9f e0       	ldi	r25, 0x0F	; 15
   164ea:	0e 94 dd 34 	call	0x69ba	; 0x69ba <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   164ee:	83 ec       	ldi	r24, 0xC3	; 195
   164f0:	9f e0       	ldi	r25, 0x0F	; 15
   164f2:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   164f6:	81 e0       	ldi	r24, 0x01	; 1
   164f8:	90 e0       	ldi	r25, 0x00	; 0
   164fa:	0e 94 66 b2 	call	0x164cc	; 0x164cc <TwoWire::requestFrom(int, int) [clone .constprop.149]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   164fe:	0e 94 cf af 	call	0x15f9e	; 0x15f9e <TwoWire::read() [clone .constprop.189]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   16502:	80 58       	subi	r24, 0x80	; 128
   16504:	87 fb       	bst	r24, 7
   16506:	88 27       	eor	r24, r24
   16508:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   1650a:	08 95       	ret

0001650c <DateTime::DateTime(unsigned long) [clone .constprop.145]>:
_ZN8DateTimeC2Em.constprop.145():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:74

////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
   1650c:	dc 01       	movw	r26, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:77
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970

    ss = t % 60;
   1650e:	80 e1       	ldi	r24, 0x10	; 16
   16510:	15 96       	adiw	r26, 0x05	; 5
   16512:	8c 93       	st	X, r24
   16514:	15 97       	sbiw	r26, 0x05	; 5
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:79
    t /= 60;
    mm = t % 60;
   16516:	8c e1       	ldi	r24, 0x1C	; 28
   16518:	14 96       	adiw	r26, 0x04	; 4
   1651a:	8c 93       	st	X, r24
   1651c:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:81
    t /= 60;
    hh = t % 24;
   1651e:	86 e0       	ldi	r24, 0x06	; 6
   16520:	13 96       	adiw	r26, 0x03	; 3
   16522:	8c 93       	st	X, r24
   16524:	13 97       	sbiw	r26, 0x03	; 3
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:84
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   16526:	1c 92       	st	X, r1
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:82
    ss = t % 60;
    t /= 60;
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
   16528:	81 e6       	ldi	r24, 0x61	; 97
   1652a:	97 e9       	ldi	r25, 0x97	; 151
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:88
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
   1652c:	63 e9       	ldi	r22, 0x93	; 147
   1652e:	7e ef       	ldi	r23, 0xFE	; 254
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:85
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
        leap = yOff % 4 == 0;
   16530:	4c 91       	ld	r20, X
   16532:	54 2f       	mov	r21, r20
   16534:	53 70       	andi	r21, 0x03	; 3
   16536:	21 e0       	ldi	r18, 0x01	; 1
   16538:	09 f0       	breq	.+2      	; 0x1653c <DateTime::DateTime(unsigned long) [clone .constprop.145]+0x30>
   1653a:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:86
        if (days < 365 + leap)
   1653c:	30 e0       	ldi	r19, 0x00	; 0
   1653e:	f9 01       	movw	r30, r18
   16540:	e3 59       	subi	r30, 0x93	; 147
   16542:	fe 4f       	sbci	r31, 0xFE	; 254
   16544:	8e 17       	cp	r24, r30
   16546:	9f 07       	cpc	r25, r31
   16548:	40 f0       	brcs	.+16     	; 0x1655a <DateTime::DateTime(unsigned long) [clone .constprop.145]+0x4e>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:88
            break;
        days -= 365 + leap;
   1654a:	fb 01       	movw	r30, r22
   1654c:	e2 1b       	sub	r30, r18
   1654e:	f3 0b       	sbc	r31, r19
   16550:	8e 0f       	add	r24, r30
   16552:	9f 1f       	adc	r25, r31
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:84
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   16554:	4f 5f       	subi	r20, 0xFF	; 255
   16556:	4c 93       	st	X, r20
   16558:	eb cf       	rjmp	.-42     	; 0x16530 <DateTime::DateTime(unsigned long) [clone .constprop.145]+0x24>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:90
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   1655a:	21 e0       	ldi	r18, 0x01	; 1
   1655c:	11 96       	adiw	r26, 0x01	; 1
   1655e:	2c 93       	st	X, r18
   16560:	11 97       	sbiw	r26, 0x01	; 1
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:91
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
   16562:	11 96       	adiw	r26, 0x01	; 1
   16564:	2c 91       	ld	r18, X
   16566:	11 97       	sbiw	r26, 0x01	; 1
   16568:	62 2f       	mov	r22, r18
   1656a:	61 50       	subi	r22, 0x01	; 1
   1656c:	77 0b       	sbc	r23, r23
   1656e:	fb 01       	movw	r30, r22
   16570:	e5 55       	subi	r30, 0x55	; 85
   16572:	fd 49       	sbci	r31, 0x9D	; 157
   16574:	e4 91       	lpm	r30, Z
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:92
        if (leap && m == 2)
   16576:	51 11       	cpse	r21, r1
   16578:	03 c0       	rjmp	.+6      	; 0x16580 <DateTime::DateTime(unsigned long) [clone .constprop.145]+0x74>
   1657a:	22 30       	cpi	r18, 0x02	; 2
   1657c:	09 f4       	brne	.+2      	; 0x16580 <DateTime::DateTime(unsigned long) [clone .constprop.145]+0x74>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:93
            ++daysPerMonth;
   1657e:	ef 5f       	subi	r30, 0xFF	; 255
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:94
        if (days < daysPerMonth)
   16580:	f0 e0       	ldi	r31, 0x00	; 0
   16582:	8e 17       	cp	r24, r30
   16584:	9f 07       	cpc	r25, r31
   16586:	20 f0       	brcs	.+8      	; 0x16590 <DateTime::DateTime(unsigned long) [clone .constprop.145]+0x84>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:96
            break;
        days -= daysPerMonth;
   16588:	8e 1b       	sub	r24, r30
   1658a:	9f 0b       	sbc	r25, r31
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:90
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   1658c:	2f 5f       	subi	r18, 0xFF	; 255
   1658e:	e6 cf       	rjmp	.-52     	; 0x1655c <DateTime::DateTime(unsigned long) [clone .constprop.145]+0x50>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:98
            ++daysPerMonth;
        if (days < daysPerMonth)
            break;
        days -= daysPerMonth;
    }
    d = days + 1;
   16590:	8f 5f       	subi	r24, 0xFF	; 255
   16592:	12 96       	adiw	r26, 0x02	; 2
   16594:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:99
}
   16596:	08 95       	ret

00016598 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.140]>:
_ZN13LCDWIKI_TOUCH11TP_SetOnOffEh.constprop.140():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:74
uint8_t LCDWIKI_TOUCH::TP_GetBacklight(void)
{
return backlight;
}

void LCDWIKI_TOUCH::TP_SetOnOff(uint8_t mode)
   16598:	1f 93       	push	r17
   1659a:	cf 93       	push	r28
   1659c:	df 93       	push	r29
   1659e:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:76
{
onoff_mode = mode;
   165a0:	c1 e6       	ldi	r28, 0x61	; 97
   165a2:	df e0       	ldi	r29, 0x0F	; 15
   165a4:	88 8b       	std	Y+16, r24	; 0x10
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:77
TCS_LOW;
   165a6:	e9 89       	ldd	r30, Y+17	; 0x11
   165a8:	fa 89       	ldd	r31, Y+18	; 0x12
   165aa:	90 81       	ld	r25, Z
   165ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
   165ae:	80 95       	com	r24
   165b0:	89 23       	and	r24, r25
   165b2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:78
SDCS_LOW;
   165b4:	eb 8d       	ldd	r30, Y+27	; 0x1b
   165b6:	fc 8d       	ldd	r31, Y+28	; 0x1c
   165b8:	90 81       	ld	r25, Z
   165ba:	8a a1       	ldd	r24, Y+34	; 0x22
   165bc:	80 95       	com	r24
   165be:	89 23       	and	r24, r25
   165c0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:79
delay_hus(200);
   165c2:	68 ec       	ldi	r22, 0xC8	; 200
   165c4:	70 e0       	ldi	r23, 0x00	; 0
   165c6:	80 e0       	ldi	r24, 0x00	; 0
   165c8:	90 e0       	ldi	r25, 0x00	; 0
   165ca:	0e 94 b4 64 	call	0xc968	; 0xc968 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:80
TCS_HIGH;
   165ce:	e9 89       	ldd	r30, Y+17	; 0x11
   165d0:	fa 89       	ldd	r31, Y+18	; 0x12
   165d2:	80 81       	ld	r24, Z
   165d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
   165d6:	89 2b       	or	r24, r25
   165d8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:81
SDCS_HIGH;
   165da:	eb 8d       	ldd	r30, Y+27	; 0x1b
   165dc:	fc 8d       	ldd	r31, Y+28	; 0x1c
   165de:	80 81       	ld	r24, Z
   165e0:	9a a1       	ldd	r25, Y+34	; 0x22
   165e2:	89 2b       	or	r24, r25
   165e4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
TP_Write_Byte_LowSpeed(SET_ON_OFF);
   165e6:	86 e5       	ldi	r24, 0x56	; 86
   165e8:	0e 94 fc aa 	call	0x155f8	; 0x155f8 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.228]>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:83
TP_Write_Byte_LowSpeed(mode);
   165ec:	81 2f       	mov	r24, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:84
}
   165ee:	df 91       	pop	r29
   165f0:	cf 91       	pop	r28
   165f2:	1f 91       	pop	r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:83
SDCS_LOW;
delay_hus(200);
TCS_HIGH;
SDCS_HIGH;
TP_Write_Byte_LowSpeed(SET_ON_OFF);
TP_Write_Byte_LowSpeed(mode);
   165f4:	0c 94 fc aa 	jmp	0x155f8	; 0x155f8 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.228]>

000165f8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.136():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:179
   	return num; 
}

#define READ_TIMES 5 //the times for read
#define LOST_VAL 1          //
uint16_t LCDWIKI_TOUCH::TP_Read_XY(uint8_t xy)
   165f8:	bf 92       	push	r11
   165fa:	cf 92       	push	r12
   165fc:	df 92       	push	r13
   165fe:	ef 92       	push	r14
   16600:	ff 92       	push	r15
   16602:	0f 93       	push	r16
   16604:	1f 93       	push	r17
   16606:	cf 93       	push	r28
   16608:	df 93       	push	r29
   1660a:	00 d0       	rcall	.+0      	; 0x1660c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x14>
   1660c:	00 d0       	rcall	.+0      	; 0x1660e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x16>
   1660e:	00 d0       	rcall	.+0      	; 0x16610 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x18>
   16610:	1f 92       	push	r1
   16612:	cd b7       	in	r28, 0x3d	; 61
   16614:	de b7       	in	r29, 0x3e	; 62
   16616:	b8 2e       	mov	r11, r24
   16618:	8e 01       	movw	r16, r28
   1661a:	0f 5f       	subi	r16, 0xFF	; 255
   1661c:	1f 4f       	sbci	r17, 0xFF	; 255
   1661e:	7e 01       	movw	r14, r28
   16620:	8b e0       	ldi	r24, 0x0B	; 11
   16622:	e8 0e       	add	r14, r24
   16624:	f1 1c       	adc	r15, r1
   16626:	68 01       	movw	r12, r16
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:149

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
	uint8_t count=0; 
	TCS_LOW; 
   16628:	e0 91 72 0f 	lds	r30, 0x0F72	; 0x800f72 <my_touch+0x11>
   1662c:	f0 91 73 0f 	lds	r31, 0x0F73	; 0x800f73 <my_touch+0x12>
   16630:	90 81       	ld	r25, Z
   16632:	80 91 7e 0f 	lds	r24, 0x0F7E	; 0x800f7e <my_touch+0x1d>
   16636:	80 95       	com	r24
   16638:	89 23       	and	r24, r25
   1663a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:150
	TCLK_LOW;           
   1663c:	e0 91 74 0f 	lds	r30, 0x0F74	; 0x800f74 <my_touch+0x13>
   16640:	f0 91 75 0f 	lds	r31, 0x0F75	; 0x800f75 <my_touch+0x14>
   16644:	90 81       	ld	r25, Z
   16646:	80 91 7f 0f 	lds	r24, 0x0F7F	; 0x800f7f <my_touch+0x1e>
   1664a:	80 95       	com	r24
   1664c:	89 23       	and	r24, r25
   1664e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:151
	TDIN_LOW;
   16650:	e0 91 78 0f 	lds	r30, 0x0F78	; 0x800f78 <my_touch+0x17>
   16654:	f0 91 79 0f 	lds	r31, 0x0F79	; 0x800f79 <my_touch+0x18>
   16658:	90 81       	ld	r25, Z
   1665a:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <my_touch+0x20>
   1665e:	80 95       	com	r24
   16660:	89 23       	and	r24, r25
   16662:	80 83       	st	Z, r24
   16664:	28 e0       	ldi	r18, 0x08	; 8
   16666:	30 e0       	ldi	r19, 0x00	; 0
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.136():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:126
}


void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
   16668:	90 e8       	ldi	r25, 0x80	; 128
   1666a:	e0 91 78 0f 	lds	r30, 0x0F78	; 0x800f78 <my_touch+0x17>
   1666e:	f0 91 79 0f 	lds	r31, 0x0F79	; 0x800f79 <my_touch+0x18>
   16672:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <my_touch+0x20>
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:129
	while(val)
	{
		if(data&val)
   16676:	4b 2d       	mov	r20, r11
   16678:	49 23       	and	r20, r25
   1667a:	09 f4       	brne	.+2      	; 0x1667e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x86>
   1667c:	af c0       	rjmp	.+350    	; 0x167dc <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:131
		{
			TDIN_HIGH; 
   1667e:	40 81       	ld	r20, Z
   16680:	84 2b       	or	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:135
		}
		else
		{
			TDIN_LOW;
   16682:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:137
		}
		TCLK_LOW;
   16684:	e0 91 74 0f 	lds	r30, 0x0F74	; 0x800f74 <my_touch+0x13>
   16688:	f0 91 75 0f 	lds	r31, 0x0F75	; 0x800f75 <my_touch+0x14>
   1668c:	40 81       	ld	r20, Z
   1668e:	80 91 7f 0f 	lds	r24, 0x0F7F	; 0x800f7f <my_touch+0x1e>
   16692:	80 95       	com	r24
   16694:	84 23       	and	r24, r20
   16696:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:139
		//delay_hus(30);
		TCLK_HIGH;
   16698:	e0 91 74 0f 	lds	r30, 0x0F74	; 0x800f74 <my_touch+0x13>
   1669c:	f0 91 75 0f 	lds	r31, 0x0F75	; 0x800f75 <my_touch+0x14>
   166a0:	80 81       	ld	r24, Z
   166a2:	40 91 7f 0f 	lds	r20, 0x0F7F	; 0x800f7f <my_touch+0x1e>
   166a6:	84 2b       	or	r24, r20
   166a8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:141
		//delay_hus(30);
		val >>= 1;
   166aa:	96 95       	lsr	r25
   166ac:	21 50       	subi	r18, 0x01	; 1
   166ae:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:127


void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
   166b0:	e1 f6       	brne	.-72     	; 0x1666a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x72>
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:154
	TCS_LOW; 
	TCLK_LOW;           
	TDIN_LOW;
	TP_Write_Byte(cmd);
	//delay_hus(6);              
	TCLK_LOW; 
   166b2:	e0 91 74 0f 	lds	r30, 0x0F74	; 0x800f74 <my_touch+0x13>
   166b6:	f0 91 75 0f 	lds	r31, 0x0F75	; 0x800f75 <my_touch+0x14>
   166ba:	90 81       	ld	r25, Z
   166bc:	80 91 7f 0f 	lds	r24, 0x0F7F	; 0x800f7f <my_touch+0x1e>
   166c0:	80 95       	com	r24
   166c2:	89 23       	and	r24, r25
   166c4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:155
	delay_hus(1); 
   166c6:	61 e0       	ldi	r22, 0x01	; 1
   166c8:	70 e0       	ldi	r23, 0x00	; 0
   166ca:	80 e0       	ldi	r24, 0x00	; 0
   166cc:	90 e0       	ldi	r25, 0x00	; 0
   166ce:	0e 94 b4 64 	call	0xc968	; 0xc968 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:156
	TCLK_HIGH;
   166d2:	e0 91 74 0f 	lds	r30, 0x0F74	; 0x800f74 <my_touch+0x13>
   166d6:	f0 91 75 0f 	lds	r31, 0x0F75	; 0x800f75 <my_touch+0x14>
   166da:	80 81       	ld	r24, Z
   166dc:	90 91 7f 0f 	lds	r25, 0x0F7F	; 0x800f7f <my_touch+0x1e>
   166e0:	89 2b       	or	r24, r25
   166e2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:157
	TCLK_LOW;
   166e4:	e0 91 74 0f 	lds	r30, 0x0F74	; 0x800f74 <my_touch+0x13>
   166e8:	f0 91 75 0f 	lds	r31, 0x0F75	; 0x800f75 <my_touch+0x14>
   166ec:	90 81       	ld	r25, Z
   166ee:	80 91 7f 0f 	lds	r24, 0x0F7F	; 0x800f7f <my_touch+0x1e>
   166f2:	80 95       	com	r24
   166f4:	89 23       	and	r24, r25
   166f6:	80 83       	st	Z, r24
   166f8:	30 e1       	ldi	r19, 0x10	; 16
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.136():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   166fa:	90 e0       	ldi	r25, 0x00	; 0
   166fc:	80 e0       	ldi	r24, 0x00	; 0
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:160
	delay_hus(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
	{   
	    num<<=1;          
   166fe:	88 0f       	add	r24, r24
   16700:	99 1f       	adc	r25, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:161
	    TCLK_LOW;	    
   16702:	e0 91 74 0f 	lds	r30, 0x0F74	; 0x800f74 <my_touch+0x13>
   16706:	f0 91 75 0f 	lds	r31, 0x0F75	; 0x800f75 <my_touch+0x14>
   1670a:	40 81       	ld	r20, Z
   1670c:	20 91 7f 0f 	lds	r18, 0x0F7F	; 0x800f7f <my_touch+0x1e>
   16710:	20 95       	com	r18
   16712:	24 23       	and	r18, r20
   16714:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:162
	    TCLK_HIGH;
   16716:	e0 91 74 0f 	lds	r30, 0x0F74	; 0x800f74 <my_touch+0x13>
   1671a:	f0 91 75 0f 	lds	r31, 0x0F75	; 0x800f75 <my_touch+0x14>
   1671e:	20 81       	ld	r18, Z
   16720:	40 91 7f 0f 	lds	r20, 0x0F7F	; 0x800f7f <my_touch+0x1e>
   16724:	24 2b       	or	r18, r20
   16726:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:163
	    if(TDOUT_STATE)
   16728:	e0 91 76 0f 	lds	r30, 0x0F76	; 0x800f76 <my_touch+0x15>
   1672c:	f0 91 77 0f 	lds	r31, 0x0F77	; 0x800f77 <my_touch+0x16>
   16730:	20 81       	ld	r18, Z
   16732:	40 91 80 0f 	lds	r20, 0x0F80	; 0x800f80 <my_touch+0x1f>
   16736:	24 23       	and	r18, r20
   16738:	09 f0       	breq	.+2      	; 0x1673c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x144>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:165
	    {
	         num += 1;                  
   1673a:	01 96       	adiw	r24, 0x01	; 1
   1673c:	31 50       	subi	r19, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:158
	//delay_hus(6);              
	TCLK_LOW; 
	delay_hus(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
   1673e:	f9 f6       	brne	.-66     	; 0x166fe <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x106>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:173
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
       TCS_HIGH;   
   16740:	e0 91 72 0f 	lds	r30, 0x0F72	; 0x800f72 <my_touch+0x11>
   16744:	f0 91 73 0f 	lds	r31, 0x0F73	; 0x800f73 <my_touch+0x12>
   16748:	20 81       	ld	r18, Z
   1674a:	30 91 7e 0f 	lds	r19, 0x0F7E	; 0x800f7e <my_touch+0x1d>
   1674e:	23 2b       	or	r18, r19
   16750:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:172
		else
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
   16752:	24 e0       	ldi	r18, 0x04	; 4
   16754:	96 95       	lsr	r25
   16756:	87 95       	ror	r24
   16758:	2a 95       	dec	r18
   1675a:	e1 f7       	brne	.-8      	; 0x16754 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x15c>
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.136():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:187
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
   1675c:	d6 01       	movw	r26, r12
   1675e:	8d 93       	st	X+, r24
   16760:	9d 93       	st	X+, r25
   16762:	6d 01       	movw	r12, r26
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:185
{
 	uint16_t i, j;
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
   16764:	ae 15       	cp	r26, r14
   16766:	bf 05       	cpc	r27, r15
   16768:	09 f0       	breq	.+2      	; 0x1676c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x174>
   1676a:	5e cf       	rjmp	.-324    	; 0x16628 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x30>
   1676c:	c8 01       	movw	r24, r16
   1676e:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   16770:	f8 01       	movw	r30, r16
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:193
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
       	{
        	if(buf[i]>buf[j])
   16772:	d8 01       	movw	r26, r16
   16774:	2d 91       	ld	r18, X+
   16776:	3c 91       	ld	r19, X
   16778:	11 97       	sbiw	r26, 0x01	; 1
   1677a:	42 81       	ldd	r20, Z+2	; 0x02
   1677c:	53 81       	ldd	r21, Z+3	; 0x03
   1677e:	42 17       	cp	r20, r18
   16780:	53 07       	cpc	r21, r19
   16782:	20 f4       	brcc	.+8      	; 0x1678c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x194>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:196
            {
             	temp=buf[i];
             	buf[i]=buf[j];
   16784:	4d 93       	st	X+, r20
   16786:	5c 93       	st	X, r21
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:197
             	buf[j]=temp;
   16788:	33 83       	std	Z+3, r19	; 0x03
   1678a:	22 83       	std	Z+2, r18	; 0x02
   1678c:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:191
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
   1678e:	8e 17       	cp	r24, r30
   16790:	9f 07       	cpc	r25, r31
   16792:	79 f7       	brne	.-34     	; 0x16772 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x17a>
   16794:	0e 5f       	subi	r16, 0xFE	; 254
   16796:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:189
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
   16798:	08 17       	cp	r16, r24
   1679a:	19 07       	cpc	r17, r25
   1679c:	49 f7       	brne	.-46     	; 0x16770 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x178>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:203
          	}
      	}
  	}          
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++) //Remove maximum and minimum values
	{
		sum+=buf[i];
   1679e:	8b 81       	ldd	r24, Y+3	; 0x03
   167a0:	9c 81       	ldd	r25, Y+4	; 0x04
   167a2:	2d 81       	ldd	r18, Y+5	; 0x05
   167a4:	3e 81       	ldd	r19, Y+6	; 0x06
   167a6:	82 0f       	add	r24, r18
   167a8:	93 1f       	adc	r25, r19
   167aa:	2f 81       	ldd	r18, Y+7	; 0x07
   167ac:	38 85       	ldd	r19, Y+8	; 0x08
   167ae:	82 0f       	add	r24, r18
   167b0:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:205
	}
	temp=sum/(READ_TIMES-2*LOST_VAL);
   167b2:	63 e0       	ldi	r22, 0x03	; 3
   167b4:	70 e0       	ldi	r23, 0x00	; 0
   167b6:	0e 94 e1 de 	call	0x1bdc2	; 0x1bdc2 <__udivmodhi4>
   167ba:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:207
	return temp;   
} 
   167bc:	2a 96       	adiw	r28, 0x0a	; 10
   167be:	0f b6       	in	r0, 0x3f	; 63
   167c0:	f8 94       	cli
   167c2:	de bf       	out	0x3e, r29	; 62
   167c4:	0f be       	out	0x3f, r0	; 63
   167c6:	cd bf       	out	0x3d, r28	; 61
   167c8:	df 91       	pop	r29
   167ca:	cf 91       	pop	r28
   167cc:	1f 91       	pop	r17
   167ce:	0f 91       	pop	r16
   167d0:	ff 90       	pop	r15
   167d2:	ef 90       	pop	r14
   167d4:	df 90       	pop	r13
   167d6:	cf 90       	pop	r12
   167d8:	bf 90       	pop	r11
   167da:	08 95       	ret
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:135
		{
			TDIN_HIGH; 
		}
		else
		{
			TDIN_LOW;
   167dc:	40 81       	ld	r20, Z
   167de:	80 95       	com	r24
   167e0:	84 23       	and	r24, r20
   167e2:	4f cf       	rjmp	.-354    	; 0x16682 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.136]+0x8a>

000167e4 <log_error(PubSubClient*, char*) [clone .constprop.117]>:
_Z9log_errorP12PubSubClientPc.constprop.117():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:451
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    mqtt_log_cnt = 0;
  }
}
///////////////////////////////////////////////////////////////////////////
void log_error(PubSubClient *mqtt_client, char *log)
   167e4:	0f 93       	push	r16
   167e6:	1f 93       	push	r17
   167e8:	cf 93       	push	r28
   167ea:	df 93       	push	r29
   167ec:	00 d0       	rcall	.+0      	; 0x167ee <log_error(PubSubClient*, char*) [clone .constprop.117]+0xa>
   167ee:	00 d0       	rcall	.+0      	; 0x167f0 <log_error(PubSubClient*, char*) [clone .constprop.117]+0xc>
   167f0:	00 d0       	rcall	.+0      	; 0x167f2 <log_error(PubSubClient*, char*) [clone .constprop.117]+0xe>
   167f2:	cd b7       	in	r28, 0x3d	; 61
   167f4:	de b7       	in	r29, 0x3e	; 62
   167f6:	8c 01       	movw	r16, r24
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:454
{
  char topic[9];
  strcpy(topic, "log-app");
   167f8:	62 e5       	ldi	r22, 0x52	; 82
   167fa:	77 e0       	ldi	r23, 0x07	; 7
   167fc:	ce 01       	movw	r24, r28
   167fe:	01 96       	adiw	r24, 0x01	; 1
   16800:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:455
  send_mqtt_general_payload(mqtt_client, topic, log);
   16804:	a8 01       	movw	r20, r16
   16806:	be 01       	movw	r22, r28
   16808:	6f 5f       	subi	r22, 0xFF	; 255
   1680a:	7f 4f       	sbci	r23, 0xFF	; 255
   1680c:	8a ef       	ldi	r24, 0xFA	; 250
   1680e:	9f e0       	ldi	r25, 0x0F	; 15
   16810:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:456
}
   16814:	29 96       	adiw	r28, 0x09	; 9
   16816:	0f b6       	in	r0, 0x3f	; 63
   16818:	f8 94       	cli
   1681a:	de bf       	out	0x3e, r29	; 62
   1681c:	0f be       	out	0x3f, r0	; 63
   1681e:	cd bf       	out	0x3d, r28	; 61
   16820:	df 91       	pop	r29
   16822:	cf 91       	pop	r28
   16824:	1f 91       	pop	r17
   16826:	0f 91       	pop	r16
   16828:	08 95       	ret

0001682a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.82]>:
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.82():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:163
    SPI.endTransaction();

    return _len;
}

void W5500Class::execCmdSn(SOCKET s, SockCMD _cmd) {
   1682a:	cf 93       	push	r28
   1682c:	c8 2f       	mov	r28, r24
   1682e:	46 2f       	mov	r20, r22
writeSnCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:306
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
   16830:	61 e0       	ldi	r22, 0x01	; 1
   16832:	70 e0       	ldi	r23, 0x00	; 0
   16834:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
readSnCR():
   16838:	61 e0       	ldi	r22, 0x01	; 1
   1683a:	70 e0       	ldi	r23, 0x00	; 0
   1683c:	8c 2f       	mov	r24, r28
   1683e:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.82():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:167
    // Send command to socket
    writeSnCR(s, _cmd);
    // Wait for command to complete
    while (readSnCR(s))
   16842:	81 11       	cpse	r24, r1
   16844:	f9 cf       	rjmp	.-14     	; 0x16838 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.82]+0xe>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:169
    ;
}
   16846:	cf 91       	pop	r28
   16848:	08 95       	ret

0001684a <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.81]>:
_Z6sockethhjh.part.0.constprop.81():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:16

/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for w5500 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
   1684a:	0f 93       	push	r16
   1684c:	1f 93       	push	r17
   1684e:	cf 93       	push	r28
   16850:	df 93       	push	r29
   16852:	c8 2f       	mov	r28, r24
   16854:	d6 2f       	mov	r29, r22
   16856:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:20
{
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
  {
    close(s);
   16858:	0e 94 6c 5b 	call	0xb6d8	; 0xb6d8 <close(unsigned char)>
writeSnMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:305
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
   1685c:	4d 2f       	mov	r20, r29
   1685e:	70 e0       	ldi	r23, 0x00	; 0
   16860:	60 e0       	ldi	r22, 0x00	; 0
   16862:	8c 2f       	mov	r24, r28
   16864:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.81():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:22
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
   16868:	01 15       	cp	r16, r1
   1686a:	11 05       	cpc	r17, r1
   1686c:	b9 f0       	breq	.+46     	; 0x1689c <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.81]+0x52>
writeSnPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:309
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
   1686e:	41 2f       	mov	r20, r17
   16870:	64 e0       	ldi	r22, 0x04	; 4
   16872:	70 e0       	ldi	r23, 0x00	; 0
   16874:	8c 2f       	mov	r24, r28
   16876:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1687a:	40 2f       	mov	r20, r16
   1687c:	65 e0       	ldi	r22, 0x05	; 5
   1687e:	70 e0       	ldi	r23, 0x00	; 0
   16880:	8c 2f       	mov	r24, r28
   16882:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.81():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:30
    else {
      local_port++; // if don't set the source port, set local_port number.
      w5500.writeSnPORT(s, local_port);
    }

    w5500.execCmdSn(s, Sock_OPEN);
   16886:	61 e0       	ldi	r22, 0x01	; 1
   16888:	70 e0       	ldi	r23, 0x00	; 0
   1688a:	8c 2f       	mov	r24, r28
   1688c:	0e 94 15 b4 	call	0x1682a	; 0x1682a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.82]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:36
    
    return 1;
  }

  return 0;
}
   16890:	81 e0       	ldi	r24, 0x01	; 1
   16892:	df 91       	pop	r29
   16894:	cf 91       	pop	r28
   16896:	1f 91       	pop	r17
   16898:	0f 91       	pop	r16
   1689a:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:26
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
      w5500.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
   1689c:	00 91 6c 12 	lds	r16, 0x126C	; 0x80126c <local_port>
   168a0:	10 91 6d 12 	lds	r17, 0x126D	; 0x80126d <local_port+0x1>
   168a4:	0f 5f       	subi	r16, 0xFF	; 255
   168a6:	1f 4f       	sbci	r17, 0xFF	; 255
   168a8:	10 93 6d 12 	sts	0x126D, r17	; 0x80126d <local_port+0x1>
   168ac:	00 93 6c 12 	sts	0x126C, r16	; 0x80126c <local_port>
   168b0:	de cf       	rjmp	.-68     	; 0x1686e <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.81]+0x24>

000168b2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]>:
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.57():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:747
}

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
   168b2:	0f 93       	push	r16
   168b4:	1f 93       	push	r17
   168b6:	cf 93       	push	r28
   168b8:	df 93       	push	r29
   168ba:	00 d0       	rcall	.+0      	; 0x168bc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0xa>
   168bc:	00 d0       	rcall	.+0      	; 0x168be <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0xc>
   168be:	cd b7       	in	r28, 0x3d	; 61
   168c0:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:749
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
   168c2:	48 2f       	mov	r20, r24
   168c4:	43 70       	andi	r20, 0x03	; 3
   168c6:	50 e0       	ldi	r21, 0x00	; 0
   168c8:	50 93 9b 0f 	sts	0x0F9B, r21	; 0x800f9b <my_lcd+0x17>
   168cc:	40 93 9a 0f 	sts	0x0F9A, r20	; 0x800f9a <my_lcd+0x16>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750
    width = (rotation & 1) ? HEIGHT : WIDTH;
   168d0:	28 2f       	mov	r18, r24
   168d2:	21 70       	andi	r18, 0x01	; 1
   168d4:	80 ff       	sbrs	r24, 0
   168d6:	3d c1       	rjmp	.+634    	; 0x16b52 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x2a0>
   168d8:	80 91 94 0f 	lds	r24, 0x0F94	; 0x800f94 <my_lcd+0x10>
   168dc:	90 91 95 0f 	lds	r25, 0x0F95	; 0x800f95 <my_lcd+0x11>
   168e0:	90 93 97 0f 	sts	0x0F97, r25	; 0x800f97 <my_lcd+0x13>
   168e4:	80 93 96 0f 	sts	0x0F96, r24	; 0x800f96 <my_lcd+0x12>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:751
    height = (rotation & 1) ? WIDTH : HEIGHT;
   168e8:	80 91 92 0f 	lds	r24, 0x0F92	; 0x800f92 <my_lcd+0xe>
   168ec:	90 91 93 0f 	lds	r25, 0x0F93	; 0x800f93 <my_lcd+0xf>
   168f0:	21 11       	cpse	r18, r1
   168f2:	04 c0       	rjmp	.+8      	; 0x168fc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x4a>
   168f4:	80 91 94 0f 	lds	r24, 0x0F94	; 0x800f94 <my_lcd+0x10>
   168f8:	90 91 95 0f 	lds	r25, 0x0F95	; 0x800f95 <my_lcd+0x11>
   168fc:	90 93 99 0f 	sts	0x0F99, r25	; 0x800f99 <my_lcd+0x15>
   16900:	80 93 98 0f 	sts	0x0F98, r24	; 0x800f98 <my_lcd+0x14>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:752
	CS_ACTIVE;
   16904:	a0 91 b2 0f 	lds	r26, 0x0FB2	; 0x800fb2 <my_lcd+0x2e>
   16908:	b0 91 b3 0f 	lds	r27, 0x0FB3	; 0x800fb3 <my_lcd+0x2f>
   1690c:	8c 91       	ld	r24, X
   1690e:	90 91 be 0f 	lds	r25, 0x0FBE	; 0x800fbe <my_lcd+0x3a>
   16912:	89 23       	and	r24, r25
   16914:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:753
	if(lcd_driver == ID_932X)
   16916:	40 91 9c 0f 	lds	r20, 0x0F9C	; 0x800f9c <my_lcd+0x18>
   1691a:	50 91 9d 0f 	lds	r21, 0x0F9D	; 0x800f9d <my_lcd+0x19>
   1691e:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <my_lcd+0x16>
   16922:	90 91 9b 0f 	lds	r25, 0x0F9B	; 0x800f9b <my_lcd+0x17>
   16926:	a0 91 b4 0f 	lds	r26, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   1692a:	b0 91 b5 0f 	lds	r27, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   1692e:	20 91 bf 0f 	lds	r18, 0x0FBF	; 0x800fbf <my_lcd+0x3b>
   16932:	41 15       	cp	r20, r1
   16934:	51 05       	cpc	r21, r1
   16936:	09 f0       	breq	.+2      	; 0x1693a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x88>
   16938:	13 c1       	rjmp	.+550    	; 0x16b60 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x2ae>
   1693a:	01 97       	sbiw	r24, 0x01	; 1
   1693c:	83 30       	cpi	r24, 0x03	; 3
   1693e:	91 05       	cpc	r25, r1
   16940:	08 f0       	brcs	.+2      	; 0x16944 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x92>
   16942:	0c c1       	rjmp	.+536    	; 0x16b5c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x2aa>
   16944:	88 0f       	add	r24, r24
   16946:	99 1f       	adc	r25, r25
   16948:	fc 01       	movw	r30, r24
   1694a:	ee 5a       	subi	r30, 0xAE	; 174
   1694c:	fd 4f       	sbci	r31, 0xFD	; 253
   1694e:	90 81       	ld	r25, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:771
				break;
		 	case 3 : 
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
   16950:	30 91 ac 0f 	lds	r19, 0x0FAC	; 0x800fac <my_lcd+0x28>
   16954:	40 91 ad 0f 	lds	r20, 0x0FAD	; 0x800fad <my_lcd+0x29>
   16958:	8c 91       	ld	r24, X
   1695a:	28 23       	and	r18, r24
   1695c:	2c 93       	st	X, r18
   1695e:	42 b9       	out	0x02, r20	; 2
   16960:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16964:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16968:	80 81       	ld	r24, Z
   1696a:	20 91 c0 0f 	lds	r18, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   1696e:	82 23       	and	r24, r18
   16970:	80 83       	st	Z, r24
   16972:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16976:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   1697a:	80 81       	ld	r24, Z
   1697c:	20 91 bc 0f 	lds	r18, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   16980:	82 2b       	or	r24, r18
   16982:	80 83       	st	Z, r24
   16984:	32 b9       	out	0x02, r19	; 2
   16986:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   1698a:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   1698e:	80 81       	ld	r24, Z
   16990:	20 91 c0 0f 	lds	r18, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   16994:	82 23       	and	r24, r18
   16996:	80 83       	st	Z, r24
   16998:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   1699c:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   169a0:	80 81       	ld	r24, Z
   169a2:	20 91 bc 0f 	lds	r18, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   169a6:	82 2b       	or	r24, r18
   169a8:	80 83       	st	Z, r24
   169aa:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   169ae:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   169b2:	80 81       	ld	r24, Z
   169b4:	20 91 bb 0f 	lds	r18, 0x0FBB	; 0x800fbb <my_lcd+0x37>
   169b8:	82 2b       	or	r24, r18
   169ba:	80 83       	st	Z, r24
   169bc:	80 e1       	ldi	r24, 0x10	; 16
   169be:	82 b9       	out	0x02, r24	; 2
   169c0:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   169c4:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   169c8:	80 81       	ld	r24, Z
   169ca:	20 91 c0 0f 	lds	r18, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   169ce:	82 23       	and	r24, r18
   169d0:	80 83       	st	Z, r24
   169d2:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   169d6:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   169da:	80 81       	ld	r24, Z
   169dc:	20 91 bc 0f 	lds	r18, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   169e0:	82 2b       	or	r24, r18
   169e2:	80 83       	st	Z, r24
   169e4:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   169e6:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   169ea:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   169ee:	80 81       	ld	r24, Z
   169f0:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   169f4:	89 23       	and	r24, r25
   169f6:	80 83       	st	Z, r24
   169f8:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   169fc:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16a00:	80 81       	ld	r24, Z
   16a02:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   16a06:	89 2b       	or	r24, r25
   16a08:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:874
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
   16a0a:	00 91 98 0f 	lds	r16, 0x0F98	; 0x800f98 <my_lcd+0x14>
   16a0e:	10 91 99 0f 	lds	r17, 0x0F99	; 0x800f99 <my_lcd+0x15>
   16a12:	01 50       	subi	r16, 0x01	; 1
   16a14:	11 09       	sbc	r17, r1
   16a16:	20 91 96 0f 	lds	r18, 0x0F96	; 0x800f96 <my_lcd+0x12>
   16a1a:	30 91 97 0f 	lds	r19, 0x0F97	; 0x800f97 <my_lcd+0x13>
   16a1e:	21 50       	subi	r18, 0x01	; 1
   16a20:	31 09       	sbc	r19, r1
   16a22:	50 e0       	ldi	r21, 0x00	; 0
   16a24:	40 e0       	ldi	r20, 0x00	; 0
   16a26:	70 e0       	ldi	r23, 0x00	; 0
   16a28:	60 e0       	ldi	r22, 0x00	; 0
   16a2a:	84 e8       	ldi	r24, 0x84	; 132
   16a2c:	9f e0       	ldi	r25, 0x0F	; 15
   16a2e:	0e 94 43 65 	call	0xca86	; 0xca86 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:704
    if (offset < 0)
    {
        vsp += scrollines;          //keep in unsigned range
    }
    sea = top + scrollines - 1;
	if(lcd_driver == ID_932X)
   16a32:	80 91 9c 0f 	lds	r24, 0x0F9C	; 0x800f9c <my_lcd+0x18>
   16a36:	90 91 9d 0f 	lds	r25, 0x0F9D	; 0x800f9d <my_lcd+0x19>
   16a3a:	89 2b       	or	r24, r25
   16a3c:	09 f0       	breq	.+2      	; 0x16a40 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x18e>
   16a3e:	9e c1       	rjmp	.+828    	; 0x16d7c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:706
	{
		writeCmdData8(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
   16a40:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   16a44:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   16a48:	80 81       	ld	r24, Z
   16a4a:	90 91 bf 0f 	lds	r25, 0x0FBF	; 0x800fbf <my_lcd+0x3b>
   16a4e:	89 23       	and	r24, r25
   16a50:	80 83       	st	Z, r24
   16a52:	80 91 a8 0f 	lds	r24, 0x0FA8	; 0x800fa8 <my_lcd+0x24>
   16a56:	82 b9       	out	0x02, r24	; 2
   16a58:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16a5c:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16a60:	80 81       	ld	r24, Z
   16a62:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   16a66:	89 23       	and	r24, r25
   16a68:	80 83       	st	Z, r24
   16a6a:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16a6e:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16a72:	80 81       	ld	r24, Z
   16a74:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   16a78:	89 2b       	or	r24, r25
   16a7a:	80 83       	st	Z, r24
   16a7c:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   16a80:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   16a84:	80 81       	ld	r24, Z
   16a86:	90 91 bb 0f 	lds	r25, 0x0FBB	; 0x800fbb <my_lcd+0x37>
   16a8a:	89 2b       	or	r24, r25
   16a8c:	80 83       	st	Z, r24
   16a8e:	83 e0       	ldi	r24, 0x03	; 3
   16a90:	82 b9       	out	0x02, r24	; 2
   16a92:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16a96:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16a9a:	80 81       	ld	r24, Z
   16a9c:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   16aa0:	89 23       	and	r24, r25
   16aa2:	80 83       	st	Z, r24
   16aa4:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16aa8:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16aac:	80 81       	ld	r24, Z
   16aae:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   16ab2:	89 2b       	or	r24, r25
   16ab4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:707
        writeCmdData8(SC2, vsp);        //VL#
   16ab6:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   16aba:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   16abe:	80 81       	ld	r24, Z
   16ac0:	90 91 bf 0f 	lds	r25, 0x0FBF	; 0x800fbf <my_lcd+0x3b>
   16ac4:	89 23       	and	r24, r25
   16ac6:	80 83       	st	Z, r24
   16ac8:	80 91 aa 0f 	lds	r24, 0x0FAA	; 0x800faa <my_lcd+0x26>
   16acc:	82 b9       	out	0x02, r24	; 2
   16ace:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16ad2:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16ad6:	80 81       	ld	r24, Z
   16ad8:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   16adc:	89 23       	and	r24, r25
   16ade:	80 83       	st	Z, r24
   16ae0:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16ae4:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16ae8:	80 81       	ld	r24, Z
   16aea:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   16aee:	89 2b       	or	r24, r25
   16af0:	80 83       	st	Z, r24
   16af2:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   16af6:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   16afa:	80 81       	ld	r24, Z
   16afc:	90 91 bb 0f 	lds	r25, 0x0FBB	; 0x800fbb <my_lcd+0x37>
   16b00:	89 2b       	or	r24, r25
   16b02:	80 83       	st	Z, r24
   16b04:	12 b8       	out	0x02, r1	; 2
   16b06:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16b0a:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16b0e:	80 81       	ld	r24, Z
   16b10:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   16b14:	89 23       	and	r24, r25
   16b16:	80 83       	st	Z, r24
   16b18:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16b1c:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16b20:	80 81       	ld	r24, Z
   16b22:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   16b26:	89 2b       	or	r24, r25
   16b28:	80 83       	st	Z, r24
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.57():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:876
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
	CS_IDLE;
   16b2a:	e0 91 b2 0f 	lds	r30, 0x0FB2	; 0x800fb2 <my_lcd+0x2e>
   16b2e:	f0 91 b3 0f 	lds	r31, 0x0FB3	; 0x800fb3 <my_lcd+0x2f>
   16b32:	80 81       	ld	r24, Z
   16b34:	90 91 ba 0f 	lds	r25, 0x0FBA	; 0x800fba <my_lcd+0x36>
   16b38:	89 2b       	or	r24, r25
   16b3a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:877
}
   16b3c:	26 96       	adiw	r28, 0x06	; 6
   16b3e:	0f b6       	in	r0, 0x3f	; 63
   16b40:	f8 94       	cli
   16b42:	de bf       	out	0x3e, r29	; 62
   16b44:	0f be       	out	0x3f, r0	; 63
   16b46:	cd bf       	out	0x3d, r28	; 61
   16b48:	df 91       	pop	r29
   16b4a:	cf 91       	pop	r28
   16b4c:	1f 91       	pop	r17
   16b4e:	0f 91       	pop	r16
   16b50:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    width = (rotation & 1) ? HEIGHT : WIDTH;
   16b52:	80 91 92 0f 	lds	r24, 0x0F92	; 0x800f92 <my_lcd+0xe>
   16b56:	90 91 93 0f 	lds	r25, 0x0F93	; 0x800f93 <my_lcd+0xf>
   16b5a:	c2 ce       	rjmp	.-636    	; 0x168e0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x2e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:756
    height = (rotation & 1) ? WIDTH : HEIGHT;
	CS_ACTIVE;
	if(lcd_driver == ID_932X)
	{
		uint16_t val;
		switch(rotation) 
   16b5c:	90 e3       	ldi	r25, 0x30	; 48
   16b5e:	f8 ce       	rjmp	.-528    	; 0x16950 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:773
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
   16b60:	46 30       	cpi	r20, 0x06	; 6
   16b62:	51 05       	cpc	r21, r1
   16b64:	99 f5       	brne	.+102    	; 0x16bcc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x31a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:782
		{
			case 0: 
				val = 0xD0; //0 degree 
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
   16b66:	f0 ea       	ldi	r31, 0xA0	; 160
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   16b68:	81 30       	cpi	r24, 0x01	; 1
   16b6a:	91 05       	cpc	r25, r1
   16b6c:	51 f0       	breq	.+20     	; 0x16b82 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:779
		{
			case 0: 
				val = 0xD0; //0 degree 
   16b6e:	f0 ed       	ldi	r31, 0xD0	; 208
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   16b70:	81 30       	cpi	r24, 0x01	; 1
   16b72:	91 05       	cpc	r25, r1
   16b74:	30 f0       	brcs	.+12     	; 0x16b82 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:785
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
				break;
		 	case 2: 
				val = 0x00; //180 degree 
   16b76:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   16b78:	82 30       	cpi	r24, 0x02	; 2
   16b7a:	91 05       	cpc	r25, r1
   16b7c:	11 f0       	breq	.+4      	; 0x16b82 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x2d0>
   16b7e:	03 97       	sbiw	r24, 0x03	; 3
   16b80:	19 f1       	breq	.+70     	; 0x16bc8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x316>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:791
				break;
		 	case 3: 
				val = 0x60; //270 degree
				break;			
		}
		writeCmdData8(MD, val);
   16b82:	8c 91       	ld	r24, X
   16b84:	28 23       	and	r18, r24
   16b86:	2c 93       	st	X, r18
   16b88:	80 91 ac 0f 	lds	r24, 0x0FAC	; 0x800fac <my_lcd+0x28>
   16b8c:	82 b9       	out	0x02, r24	; 2
   16b8e:	a0 91 b6 0f 	lds	r26, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16b92:	b0 91 b7 0f 	lds	r27, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16b96:	8c 91       	ld	r24, X
   16b98:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   16b9c:	89 23       	and	r24, r25
   16b9e:	8c 93       	st	X, r24
   16ba0:	a0 91 b6 0f 	lds	r26, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16ba4:	b0 91 b7 0f 	lds	r27, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16ba8:	8c 91       	ld	r24, X
   16baa:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   16bae:	89 2b       	or	r24, r25
   16bb0:	8c 93       	st	X, r24
   16bb2:	a0 91 b4 0f 	lds	r26, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   16bb6:	b0 91 b5 0f 	lds	r27, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   16bba:	8c 91       	ld	r24, X
   16bbc:	90 91 bb 0f 	lds	r25, 0x0FBB	; 0x800fbb <my_lcd+0x37>
   16bc0:	89 2b       	or	r24, r25
   16bc2:	8c 93       	st	X, r24
   16bc4:	f2 b9       	out	0x02, r31	; 2
   16bc6:	0f cf       	rjmp	.-482    	; 0x169e6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:788
				break;
		 	case 2: 
				val = 0x00; //180 degree 
				break;
		 	case 3: 
				val = 0x60; //270 degree
   16bc8:	f0 e6       	ldi	r31, 0x60	; 96
   16bca:	db cf       	rjmp	.-74     	; 0x16b82 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:793
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
   16bcc:	48 30       	cpi	r20, 0x08	; 8
   16bce:	51 05       	cpc	r21, r1
   16bd0:	99 f5       	brne	.+102    	; 0x16c38 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x386>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:802
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
   16bd2:	eb e2       	ldi	r30, 0x2B	; 43
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   16bd4:	81 30       	cpi	r24, 0x01	; 1
   16bd6:	91 05       	cpc	r25, r1
   16bd8:	51 f0       	breq	.+20     	; 0x16bee <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:799
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
   16bda:	e9 e0       	ldi	r30, 0x09	; 9
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   16bdc:	81 30       	cpi	r24, 0x01	; 1
   16bde:	91 05       	cpc	r25, r1
   16be0:	30 f0       	brcs	.+12     	; 0x16bee <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:805
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
   16be2:	ea e0       	ldi	r30, 0x0A	; 10
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   16be4:	82 30       	cpi	r24, 0x02	; 2
   16be6:	91 05       	cpc	r25, r1
   16be8:	11 f0       	breq	.+4      	; 0x16bee <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x33c>
   16bea:	03 97       	sbiw	r24, 0x03	; 3
   16bec:	19 f1       	breq	.+70     	; 0x16c34 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x382>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:811
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
		     	break;
		 }
		 writeCmdData8(MD, val); 
   16bee:	8c 91       	ld	r24, X
   16bf0:	28 23       	and	r18, r24
   16bf2:	2c 93       	st	X, r18
   16bf4:	80 91 ac 0f 	lds	r24, 0x0FAC	; 0x800fac <my_lcd+0x28>
   16bf8:	82 b9       	out	0x02, r24	; 2
   16bfa:	a0 91 b6 0f 	lds	r26, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16bfe:	b0 91 b7 0f 	lds	r27, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16c02:	8c 91       	ld	r24, X
   16c04:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   16c08:	89 23       	and	r24, r25
   16c0a:	8c 93       	st	X, r24
   16c0c:	a0 91 b6 0f 	lds	r26, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16c10:	b0 91 b7 0f 	lds	r27, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16c14:	8c 91       	ld	r24, X
   16c16:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   16c1a:	89 2b       	or	r24, r25
   16c1c:	8c 93       	st	X, r24
   16c1e:	a0 91 b4 0f 	lds	r26, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   16c22:	b0 91 b5 0f 	lds	r27, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   16c26:	8c 91       	ld	r24, X
   16c28:	90 91 bb 0f 	lds	r25, 0x0FBB	; 0x800fbb <my_lcd+0x37>
   16c2c:	89 2b       	or	r24, r25
   16c2e:	8c 93       	st	X, r24
   16c30:	e2 b9       	out	0x02, r30	; 2
   16c32:	d9 ce       	rjmp	.-590    	; 0x169e6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:808
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
   16c34:	e8 e2       	ldi	r30, 0x28	; 40
   16c36:	db cf       	rjmp	.-74     	; 0x16bee <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:814
		     	break;
		 }
		 writeCmdData8(MD, val); 

	}
	else if(lcd_driver == ID_9486)
   16c38:	45 30       	cpi	r20, 0x05	; 5
   16c3a:	51 05       	cpc	r21, r1
   16c3c:	a1 f5       	brne	.+104    	; 0x16ca6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x3f4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:817
	{
		uint8_t val;
		switch (rotation) 
   16c3e:	81 30       	cpi	r24, 0x01	; 1
   16c40:	91 05       	cpc	r25, r1
   16c42:	49 f1       	breq	.+82     	; 0x16c96 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x3e4>
   16c44:	70 f1       	brcs	.+92     	; 0x16ca2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x3f0>
   16c46:	82 30       	cpi	r24, 0x02	; 2
   16c48:	91 05       	cpc	r25, r1
   16c4a:	39 f1       	breq	.+78     	; 0x16c9a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x3e8>
   16c4c:	03 97       	sbiw	r24, 0x03	; 3
   16c4e:	39 f1       	breq	.+78     	; 0x16c9e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x3ec>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:832
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   16c50:	8c 91       	ld	r24, X
   16c52:	28 23       	and	r18, r24
   16c54:	2c 93       	st	X, r18
   16c56:	80 91 ac 0f 	lds	r24, 0x0FAC	; 0x800fac <my_lcd+0x28>
   16c5a:	82 b9       	out	0x02, r24	; 2
   16c5c:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16c60:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16c64:	80 81       	ld	r24, Z
   16c66:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   16c6a:	89 23       	and	r24, r25
   16c6c:	80 83       	st	Z, r24
   16c6e:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16c72:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16c76:	80 81       	ld	r24, Z
   16c78:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   16c7c:	89 2b       	or	r24, r25
   16c7e:	80 83       	st	Z, r24
   16c80:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   16c84:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   16c88:	80 81       	ld	r24, Z
   16c8a:	90 91 bb 0f 	lds	r25, 0x0FBB	; 0x800fbb <my_lcd+0x37>
   16c8e:	89 2b       	or	r24, r25
   16c90:	80 83       	st	Z, r24
   16c92:	72 b9       	out	0x02, r23	; 2
   16c94:	a8 ce       	rjmp	.-688    	; 0x169e6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:823
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MV | ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR ; //90 degree 
   16c96:	78 e7       	ldi	r23, 0x78	; 120
   16c98:	db cf       	rjmp	.-74     	; 0x16c50 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:826
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MX |ILI9341_MADCTL_BGR; //180 degree 
   16c9a:	78 ec       	ldi	r23, 0xC8	; 200
   16c9c:	d9 cf       	rjmp	.-78     	; 0x16c50 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:829
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   16c9e:	78 ea       	ldi	r23, 0xA8	; 168
   16ca0:	d7 cf       	rjmp	.-82     	; 0x16c50 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:820
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
   16ca2:	78 e0       	ldi	r23, 0x08	; 8
   16ca4:	d5 cf       	rjmp	.-86     	; 0x16c50 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:834
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
	else if(lcd_driver == ID_9488)
   16ca6:	47 30       	cpi	r20, 0x07	; 7
   16ca8:	51 05       	cpc	r21, r1
   16caa:	a1 f5       	brne	.+104    	; 0x16d14 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x462>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:837
	{
		uint8_t val;
		switch (rotation) 
   16cac:	81 30       	cpi	r24, 0x01	; 1
   16cae:	91 05       	cpc	r25, r1
   16cb0:	49 f1       	breq	.+82     	; 0x16d04 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x452>
   16cb2:	70 f1       	brcs	.+92     	; 0x16d10 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x45e>
   16cb4:	82 30       	cpi	r24, 0x02	; 2
   16cb6:	91 05       	cpc	r25, r1
   16cb8:	39 f1       	breq	.+78     	; 0x16d08 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x456>
   16cba:	03 97       	sbiw	r24, 0x03	; 3
   16cbc:	39 f1       	breq	.+78     	; 0x16d0c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x45a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:852
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   16cbe:	8c 91       	ld	r24, X
   16cc0:	28 23       	and	r18, r24
   16cc2:	2c 93       	st	X, r18
   16cc4:	80 91 ac 0f 	lds	r24, 0x0FAC	; 0x800fac <my_lcd+0x28>
   16cc8:	82 b9       	out	0x02, r24	; 2
   16cca:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16cce:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16cd2:	80 81       	ld	r24, Z
   16cd4:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   16cd8:	89 23       	and	r24, r25
   16cda:	80 83       	st	Z, r24
   16cdc:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16ce0:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16ce4:	80 81       	ld	r24, Z
   16ce6:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   16cea:	89 2b       	or	r24, r25
   16cec:	80 83       	st	Z, r24
   16cee:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   16cf2:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   16cf6:	80 81       	ld	r24, Z
   16cf8:	90 91 bb 0f 	lds	r25, 0x0FBB	; 0x800fbb <my_lcd+0x37>
   16cfc:	89 2b       	or	r24, r25
   16cfe:	80 83       	st	Z, r24
   16d00:	62 b9       	out	0x02, r22	; 2
   16d02:	71 ce       	rjmp	.-798    	; 0x169e6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:843
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //90 degree 
   16d04:	68 ea       	ldi	r22, 0xA8	; 168
   16d06:	db cf       	rjmp	.-74     	; 0x16cbe <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:846
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR; //180 degree 
   16d08:	68 e1       	ldi	r22, 0x18	; 24
   16d0a:	d9 cf       	rjmp	.-78     	; 0x16cbe <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:849
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   16d0c:	68 e7       	ldi	r22, 0x78	; 120
   16d0e:	d7 cf       	rjmp	.-82     	; 0x16cbe <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:840
	{
		uint8_t val;
		switch (rotation) 
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
   16d10:	68 ec       	ldi	r22, 0xC8	; 200
   16d12:	d5 cf       	rjmp	.-86     	; 0x16cbe <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:857
		 writeCmdData8(MD, val); 
	}
	else
	{
		uint8_t val;
		switch (rotation) 
   16d14:	81 30       	cpi	r24, 0x01	; 1
   16d16:	91 05       	cpc	r25, r1
   16d18:	49 f1       	breq	.+82     	; 0x16d6c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x4ba>
   16d1a:	70 f1       	brcs	.+92     	; 0x16d78 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x4c6>
   16d1c:	82 30       	cpi	r24, 0x02	; 2
   16d1e:	91 05       	cpc	r25, r1
   16d20:	39 f1       	breq	.+78     	; 0x16d70 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x4be>
   16d22:	03 97       	sbiw	r24, 0x03	; 3
   16d24:	39 f1       	breq	.+78     	; 0x16d74 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x4c2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   16d26:	8c 91       	ld	r24, X
   16d28:	28 23       	and	r18, r24
   16d2a:	2c 93       	st	X, r18
   16d2c:	80 91 ac 0f 	lds	r24, 0x0FAC	; 0x800fac <my_lcd+0x28>
   16d30:	82 b9       	out	0x02, r24	; 2
   16d32:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16d36:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16d3a:	80 81       	ld	r24, Z
   16d3c:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   16d40:	89 23       	and	r24, r25
   16d42:	80 83       	st	Z, r24
   16d44:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   16d48:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   16d4c:	80 81       	ld	r24, Z
   16d4e:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   16d52:	89 2b       	or	r24, r25
   16d54:	80 83       	st	Z, r24
   16d56:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   16d5a:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   16d5e:	80 81       	ld	r24, Z
   16d60:	90 91 bb 0f 	lds	r25, 0x0FBB	; 0x800fbb <my_lcd+0x37>
   16d64:	89 2b       	or	r24, r25
   16d66:	80 83       	st	Z, r24
   16d68:	32 b9       	out	0x02, r19	; 2
   16d6a:	3d ce       	rjmp	.-902    	; 0x169e6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:863
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //90 degree 
   16d6c:	38 e2       	ldi	r19, 0x28	; 40
   16d6e:	db cf       	rjmp	.-74     	; 0x16d26 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:866
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_ML |ILI9341_MADCTL_BGR; //180 degree 
   16d70:	38 e9       	ldi	r19, 0x98	; 152
   16d72:	d9 cf       	rjmp	.-78     	; 0x16d26 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:869
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   16d74:	38 ef       	ldi	r19, 0xF8	; 248
   16d76:	d7 cf       	rjmp	.-82     	; 0x16d26 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:860
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
   16d78:	38 e4       	ldi	r19, 0x48	; 72
   16d7a:	d5 cf       	rjmp	.-86     	; 0x16d26 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:875
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
   16d7c:	80 91 94 0f 	lds	r24, 0x0F94	; 0x800f94 <my_lcd+0x10>
   16d80:	90 91 95 0f 	lds	r25, 0x0F95	; 0x800f95 <my_lcd+0x11>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:712
        writeCmdData8(SC2, vsp);        //VL#
	}
	else
	{
  		uint8_t d[6];           // for multi-byte parameters
  		d[0] = top >> 8;        //TFA
   16d84:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:713
  		d[1] = top;
   16d86:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:714
  		d[2] = scrollines >> 8; //VSA
   16d88:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:715
  		d[3] = scrollines;
   16d8a:	8c 83       	std	Y+4, r24	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:716
  		d[4] = bfa >> 8;        //BFA
   16d8c:	1d 82       	std	Y+5, r1	; 0x05
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:717
  		d[5] = bfa;
   16d8e:	1e 82       	std	Y+6, r1	; 0x06
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:718
		Push_Command(SC1, d, 6);
   16d90:	60 91 a8 0f 	lds	r22, 0x0FA8	; 0x800fa8 <my_lcd+0x24>
   16d94:	70 91 a9 0f 	lds	r23, 0x0FA9	; 0x800fa9 <my_lcd+0x25>
   16d98:	26 e0       	ldi	r18, 0x06	; 6
   16d9a:	ae 01       	movw	r20, r28
   16d9c:	4f 5f       	subi	r20, 0xFF	; 255
   16d9e:	5f 4f       	sbci	r21, 0xFF	; 255
   16da0:	84 e8       	ldi	r24, 0x84	; 132
   16da2:	9f e0       	ldi	r25, 0x0F	; 15
   16da4:	0e 94 c6 64 	call	0xc98c	; 0xc98c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:719
		d[0] = vsp >> 8;        //VSP
   16da8:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:720
  		d[1] = vsp;
   16daa:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:721
		Push_Command(SC2, d, 2);
   16dac:	60 91 aa 0f 	lds	r22, 0x0FAA	; 0x800faa <my_lcd+0x26>
   16db0:	70 91 ab 0f 	lds	r23, 0x0FAB	; 0x800fab <my_lcd+0x27>
   16db4:	22 e0       	ldi	r18, 0x02	; 2
   16db6:	ae 01       	movw	r20, r28
   16db8:	4f 5f       	subi	r20, 0xFF	; 255
   16dba:	5f 4f       	sbci	r21, 0xFF	; 255
   16dbc:	84 e8       	ldi	r24, 0x84	; 132
   16dbe:	9f e0       	ldi	r25, 0x0F	; 15
   16dc0:	0e 94 c6 64 	call	0xc98c	; 0xc98c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:722
		if(lcd_driver == ID_7575)
   16dc4:	80 91 9c 0f 	lds	r24, 0x0F9C	; 0x800f9c <my_lcd+0x18>
   16dc8:	90 91 9d 0f 	lds	r25, 0x0F9D	; 0x800f9d <my_lcd+0x19>
   16dcc:	01 97       	sbiw	r24, 0x01	; 1
   16dce:	61 f4       	brne	.+24     	; 0x16de8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x536>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:724
		{
			d[0] = (offset != 0) ? 0x08:0;
   16dd0:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:725
			Push_Command(0x01, d, 1);
   16dd2:	21 e0       	ldi	r18, 0x01	; 1
   16dd4:	ae 01       	movw	r20, r28
   16dd6:	4f 5f       	subi	r20, 0xFF	; 255
   16dd8:	5f 4f       	sbci	r21, 0xFF	; 255
   16dda:	61 e0       	ldi	r22, 0x01	; 1
   16ddc:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:729
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
   16dde:	84 e8       	ldi	r24, 0x84	; 132
   16de0:	9f e0       	ldi	r25, 0x0F	; 15
   16de2:	0e 94 c6 64 	call	0xc98c	; 0xc98c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   16de6:	a1 ce       	rjmp	.-702    	; 0x16b2a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x278>
   16de8:	20 e0       	ldi	r18, 0x00	; 0
   16dea:	50 e0       	ldi	r21, 0x00	; 0
   16dec:	40 e0       	ldi	r20, 0x00	; 0
   16dee:	63 e1       	ldi	r22, 0x13	; 19
   16df0:	70 e0       	ldi	r23, 0x00	; 0
   16df2:	f5 cf       	rjmp	.-22     	; 0x16dde <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.57]+0x52c>

00016df4 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>:
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:84
    write(ptr, cntl_byte, data, len);
    ptr += len;
    writeSnTX_WR(s, ptr);
}

void W5500Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
   16df4:	af 92       	push	r10
   16df6:	bf 92       	push	r11
   16df8:	cf 92       	push	r12
   16dfa:	df 92       	push	r13
   16dfc:	ef 92       	push	r14
   16dfe:	ff 92       	push	r15
   16e00:	0f 93       	push	r16
   16e02:	1f 93       	push	r17
   16e04:	cf 93       	push	r28
   16e06:	df 93       	push	r29
   16e08:	f8 2e       	mov	r15, r24
   16e0a:	5b 01       	movw	r10, r22
   16e0c:	6a 01       	movw	r12, r20
   16e0e:	e2 2e       	mov	r14, r18
readSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
   16e10:	68 e2       	ldi	r22, 0x28	; 40
   16e12:	70 e0       	ldi	r23, 0x00	; 0
   16e14:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
   16e18:	08 2f       	mov	r16, r24
   16e1a:	10 e0       	ldi	r17, 0x00	; 0
   16e1c:	10 2f       	mov	r17, r16
   16e1e:	00 27       	eor	r16, r16
   16e20:	69 e2       	ldi	r22, 0x29	; 41
   16e22:	70 e0       	ldi	r23, 0x00	; 0
   16e24:	8f 2d       	mov	r24, r15
   16e26:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
   16e2a:	e8 01       	movw	r28, r16
   16e2c:	c8 0f       	add	r28, r24
   16e2e:	d1 1d       	adc	r29, r1
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:149
    return _data;
}

uint16_t W5500Class::read(uint16_t _addr, uint8_t _cb, uint8_t *_buf, uint16_t _len)
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
   16e30:	80 91 cd 0d 	lds	r24, 0x0DCD	; 0x800dcd <wiznet_SPI_settings>
   16e34:	90 91 ce 0d 	lds	r25, 0x0DCE	; 0x800dce <wiznet_SPI_settings+0x1>
   16e38:	0e 94 ee 5a 	call	0xb5dc	; 0xb5dc <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:150
    setSS();
   16e3c:	0e 94 e1 5a 	call	0xb5c2	; 0xb5c2 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:151
    SPI.transfer(_addr >> 8);
   16e40:	8d 2f       	mov	r24, r29
   16e42:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:152
    SPI.transfer(_addr & 0xFF);
   16e46:	8c 2f       	mov	r24, r28
   16e48:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
read_data():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:99
    }
}

void W5500Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    uint8_t cntl_byte = (0x18+(s<<5));
   16e4c:	8f 2d       	mov	r24, r15
   16e4e:	82 95       	swap	r24
   16e50:	88 0f       	add	r24, r24
   16e52:	80 7e       	andi	r24, 0xE0	; 224
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:153
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
   16e54:	88 5e       	subi	r24, 0xE8	; 232
   16e56:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
   16e5a:	85 01       	movw	r16, r10
   16e5c:	ac 0c       	add	r10, r12
   16e5e:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:155
    for (uint16_t i=0; i<_len; i++){
        _buf[i] = SPI.transfer(0);
   16e60:	80 e0       	ldi	r24, 0x00	; 0
   16e62:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
   16e66:	f8 01       	movw	r30, r16
   16e68:	81 93       	st	Z+, r24
   16e6a:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:154
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
    for (uint16_t i=0; i<_len; i++){
   16e6c:	ea 15       	cp	r30, r10
   16e6e:	fb 05       	cpc	r31, r11
   16e70:	b9 f7       	brne	.-18     	; 0x16e60 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]+0x6c>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:157
        _buf[i] = SPI.transfer(0);
    }
    resetSS();
   16e72:	0e 94 dc 5a 	call	0xb5b8	; 0xb5b8 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:158
    SPI.endTransaction();
   16e76:	0e 94 e6 5a 	call	0xb5cc	; 0xb5cc <SPIClass::endTransaction()>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:90
{
    uint16_t ptr;
    ptr = readSnRX_RD(s);

    read_data(s, ptr, data, len);
    if (!peek)
   16e7a:	e1 10       	cpse	r14, r1
   16e7c:	18 c0       	rjmp	.+48     	; 0x16eae <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]+0xba>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:92
    {
        ptr += len;
   16e7e:	cc 0d       	add	r28, r12
   16e80:	dd 1d       	adc	r29, r13
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   16e82:	4d 2f       	mov	r20, r29
   16e84:	68 e2       	ldi	r22, 0x28	; 40
   16e86:	70 e0       	ldi	r23, 0x00	; 0
   16e88:	8f 2d       	mov	r24, r15
   16e8a:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   16e8e:	4c 2f       	mov	r20, r28
   16e90:	69 e2       	ldi	r22, 0x29	; 41
   16e92:	70 e0       	ldi	r23, 0x00	; 0
   16e94:	8f 2d       	mov	r24, r15
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
        writeSnRX_RD(s, ptr);
    }
}
   16e96:	df 91       	pop	r29
   16e98:	cf 91       	pop	r28
   16e9a:	1f 91       	pop	r17
   16e9c:	0f 91       	pop	r16
   16e9e:	ff 90       	pop	r15
   16ea0:	ef 90       	pop	r14
   16ea2:	df 90       	pop	r13
   16ea4:	cf 90       	pop	r12
   16ea6:	bf 90       	pop	r11
   16ea8:	af 90       	pop	r10
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   16eaa:	0c 94 63 5b 	jmp	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
   16eae:	df 91       	pop	r29
   16eb0:	cf 91       	pop	r28
   16eb2:	1f 91       	pop	r17
   16eb4:	0f 91       	pop	r16
   16eb6:	ff 90       	pop	r15
   16eb8:	ef 90       	pop	r14
   16eba:	df 90       	pop	r13
   16ebc:	cf 90       	pop	r12
   16ebe:	bf 90       	pop	r11
   16ec0:	af 90       	pop	r10
   16ec2:	08 95       	ret

00016ec4 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>:
_ZN10W5500Class17getRXReceivedSizeEh.constprop.30():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:55
    } 
    while (val != val1);
    return val;
}

uint16_t W5500Class::getRXReceivedSize(SOCKET s)
   16ec4:	ff 92       	push	r15
   16ec6:	0f 93       	push	r16
   16ec8:	1f 93       	push	r17
   16eca:	cf 93       	push	r28
   16ecc:	df 93       	push	r29
   16ece:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:57
{
    uint16_t val=0,val1=0;
   16ed0:	10 e0       	ldi	r17, 0x00	; 0
   16ed2:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:59
    do {
        val1 = readSnRX_RSR(s);
   16ed4:	8f 2d       	mov	r24, r15
   16ed6:	0e 94 d6 5b 	call	0xb7ac	; 0xb7ac <W5500Class::readSnRX_RSR(unsigned char)>
   16eda:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:60
        if (val1 != 0)
   16edc:	89 2b       	or	r24, r25
   16ede:	21 f0       	breq	.+8      	; 0x16ee8 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:61
            val = readSnRX_RSR(s);
   16ee0:	8f 2d       	mov	r24, r15
   16ee2:	0e 94 d6 5b 	call	0xb7ac	; 0xb7ac <W5500Class::readSnRX_RSR(unsigned char)>
   16ee6:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:63
    } 
    while (val != val1);
   16ee8:	c0 17       	cp	r28, r16
   16eea:	d1 07       	cpc	r29, r17
   16eec:	99 f7       	brne	.-26     	; 0x16ed4 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:65
    return val;
}
   16eee:	ce 01       	movw	r24, r28
   16ef0:	df 91       	pop	r29
   16ef2:	cf 91       	pop	r28
   16ef4:	1f 91       	pop	r17
   16ef6:	0f 91       	pop	r16
   16ef8:	ff 90       	pop	r15
   16efa:	08 95       	ret

00016efc <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:74
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);

}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
   16efc:	bf 92       	push	r11
   16efe:	cf 92       	push	r12
   16f00:	df 92       	push	r13
   16f02:	ef 92       	push	r14
   16f04:	ff 92       	push	r15
   16f06:	0f 93       	push	r16
   16f08:	1f 93       	push	r17
   16f0a:	cf 93       	push	r28
   16f0c:	df 93       	push	r29
   16f0e:	b8 2e       	mov	r11, r24
   16f10:	6b 01       	movw	r12, r22
   16f12:	7a 01       	movw	r14, r20
   16f14:	89 01       	movw	r16, r18
readSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
   16f16:	64 e2       	ldi	r22, 0x24	; 36
   16f18:	70 e0       	ldi	r23, 0x00	; 0
   16f1a:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
   16f1e:	c8 2f       	mov	r28, r24
   16f20:	65 e2       	ldi	r22, 0x25	; 37
   16f22:	70 e0       	ldi	r23, 0x00	; 0
   16f24:	8b 2d       	mov	r24, r11
   16f26:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <W5500Class::readSn(unsigned char, unsigned int)>
   16f2a:	d0 e0       	ldi	r29, 0x00	; 0
   16f2c:	dc 2f       	mov	r29, r28
   16f2e:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:78
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
    ptr += data_offset;
   16f30:	8c 0d       	add	r24, r12
   16f32:	9d 2d       	mov	r25, r13
   16f34:	91 1d       	adc	r25, r1
   16f36:	c8 0f       	add	r28, r24
   16f38:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:77
}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
   16f3a:	6b 2d       	mov	r22, r11
   16f3c:	62 95       	swap	r22
   16f3e:	66 0f       	add	r22, r22
   16f40:	60 7e       	andi	r22, 0xE0	; 224
   16f42:	6c 5e       	subi	r22, 0xEC	; 236
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:79
    ptr += data_offset;
    write(ptr, cntl_byte, data, len);
   16f44:	98 01       	movw	r18, r16
   16f46:	a7 01       	movw	r20, r14
   16f48:	ce 01       	movw	r24, r28
   16f4a:	0e 94 10 5b 	call	0xb620	; 0xb620 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:80
    ptr += len;
   16f4e:	c0 0f       	add	r28, r16
   16f50:	d1 1f       	adc	r29, r17
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   16f52:	4d 2f       	mov	r20, r29
   16f54:	64 e2       	ldi	r22, 0x24	; 36
   16f56:	70 e0       	ldi	r23, 0x00	; 0
   16f58:	8b 2d       	mov	r24, r11
   16f5a:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   16f5e:	4c 2f       	mov	r20, r28
   16f60:	65 e2       	ldi	r22, 0x25	; 37
   16f62:	70 e0       	ldi	r23, 0x00	; 0
   16f64:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:82
    writeSnTX_WR(s, ptr);
}
   16f66:	df 91       	pop	r29
   16f68:	cf 91       	pop	r28
   16f6a:	1f 91       	pop	r17
   16f6c:	0f 91       	pop	r16
   16f6e:	ff 90       	pop	r15
   16f70:	ef 90       	pop	r14
   16f72:	df 90       	pop	r13
   16f74:	cf 90       	pop	r12
   16f76:	bf 90       	pop	r11
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   16f78:	0c 94 63 5b 	jmp	0xb6c6	; 0xb6c6 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00016f7c <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>:
_ZN10W5500Class13getTXFreeSizeEh.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:43
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
  }
}

uint16_t W5500Class::getTXFreeSize(SOCKET s)
   16f7c:	ff 92       	push	r15
   16f7e:	0f 93       	push	r16
   16f80:	1f 93       	push	r17
   16f82:	cf 93       	push	r28
   16f84:	df 93       	push	r29
   16f86:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:45
{
    uint16_t val=0, val1=0;
   16f88:	10 e0       	ldi	r17, 0x00	; 0
   16f8a:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:47
    do {
        val1 = readSnTX_FSR(s);
   16f8c:	8f 2d       	mov	r24, r15
   16f8e:	0e 94 ee 5b 	call	0xb7dc	; 0xb7dc <W5500Class::readSnTX_FSR(unsigned char)>
   16f92:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:48
        if (val1 != 0)
   16f94:	89 2b       	or	r24, r25
   16f96:	21 f0       	breq	.+8      	; 0x16fa0 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:49
            val = readSnTX_FSR(s);
   16f98:	8f 2d       	mov	r24, r15
   16f9a:	0e 94 ee 5b 	call	0xb7dc	; 0xb7dc <W5500Class::readSnTX_FSR(unsigned char)>
   16f9e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:51
    } 
    while (val != val1);
   16fa0:	c0 17       	cp	r28, r16
   16fa2:	d1 07       	cpc	r29, r17
   16fa4:	99 f7       	brne	.-26     	; 0x16f8c <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:53
    return val;
}
   16fa6:	ce 01       	movw	r24, r28
   16fa8:	df 91       	pop	r29
   16faa:	cf 91       	pop	r28
   16fac:	1f 91       	pop	r17
   16fae:	0f 91       	pop	r16
   16fb0:	ff 90       	pop	r15
   16fb2:	08 95       	ret

00016fb4 <IPAddress::IPAddress(unsigned char const*)>:
_ZN9IPAddressC2EPKh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
   16fb4:	dc 01       	movw	r26, r24
   16fb6:	82 ef       	ldi	r24, 0xF2	; 242
   16fb8:	92 e0       	ldi	r25, 0x02	; 2
   16fba:	8d 93       	st	X+, r24
   16fbc:	9d 93       	st	X+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   16fbe:	84 e0       	ldi	r24, 0x04	; 4
   16fc0:	fb 01       	movw	r30, r22
   16fc2:	01 90       	ld	r0, Z+
   16fc4:	0d 92       	st	X+, r0
   16fc6:	8a 95       	dec	r24
   16fc8:	e1 f7       	brne	.-8      	; 0x16fc2 <IPAddress::IPAddress(unsigned char const*)+0xe>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:44
}
   16fca:	08 95       	ret

00016fcc <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   16fcc:	1f 92       	push	r1
   16fce:	0f 92       	push	r0
   16fd0:	0f b6       	in	r0, 0x3f	; 63
   16fd2:	0f 92       	push	r0
   16fd4:	11 24       	eor	r1, r1
   16fd6:	0b b6       	in	r0, 0x3b	; 59
   16fd8:	0f 92       	push	r0
   16fda:	2f 93       	push	r18
   16fdc:	3f 93       	push	r19
   16fde:	4f 93       	push	r20
   16fe0:	5f 93       	push	r21
   16fe2:	6f 93       	push	r22
   16fe4:	7f 93       	push	r23
   16fe6:	8f 93       	push	r24
   16fe8:	9f 93       	push	r25
   16fea:	af 93       	push	r26
   16fec:	bf 93       	push	r27
   16fee:	ef 93       	push	r30
   16ff0:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   16ff2:	80 e3       	ldi	r24, 0x30	; 48
   16ff4:	9d e0       	ldi	r25, 0x0D	; 13
   16ff6:	0e 94 df a9 	call	0x153be	; 0x153be <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
   16ffa:	ff 91       	pop	r31
   16ffc:	ef 91       	pop	r30
   16ffe:	bf 91       	pop	r27
   17000:	af 91       	pop	r26
   17002:	9f 91       	pop	r25
   17004:	8f 91       	pop	r24
   17006:	7f 91       	pop	r23
   17008:	6f 91       	pop	r22
   1700a:	5f 91       	pop	r21
   1700c:	4f 91       	pop	r20
   1700e:	3f 91       	pop	r19
   17010:	2f 91       	pop	r18
   17012:	0f 90       	pop	r0
   17014:	0b be       	out	0x3b, r0	; 59
   17016:	0f 90       	pop	r0
   17018:	0f be       	out	0x3f, r0	; 63
   1701a:	0f 90       	pop	r0
   1701c:	1f 90       	pop	r1
   1701e:	18 95       	reti

00017020 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   17020:	1f 92       	push	r1
   17022:	0f 92       	push	r0
   17024:	0f b6       	in	r0, 0x3f	; 63
   17026:	0f 92       	push	r0
   17028:	11 24       	eor	r1, r1
   1702a:	0b b6       	in	r0, 0x3b	; 59
   1702c:	0f 92       	push	r0
   1702e:	2f 93       	push	r18
   17030:	8f 93       	push	r24
   17032:	9f 93       	push	r25
   17034:	ef 93       	push	r30
   17036:	ff 93       	push	r31
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   17038:	e0 91 40 0d 	lds	r30, 0x0D40	; 0x800d40 <Serial+0x10>
   1703c:	f0 91 41 0d 	lds	r31, 0x0D41	; 0x800d41 <Serial+0x11>
   17040:	80 81       	ld	r24, Z
   17042:	e0 91 46 0d 	lds	r30, 0x0D46	; 0x800d46 <Serial+0x16>
   17046:	f0 91 47 0d 	lds	r31, 0x0D47	; 0x800d47 <Serial+0x17>
   1704a:	82 fd       	sbrc	r24, 2
   1704c:	1d c0       	rjmp	.+58     	; 0x17088 <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   1704e:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   17050:	80 91 49 0d 	lds	r24, 0x0D49	; 0x800d49 <Serial+0x19>
   17054:	8f 5f       	subi	r24, 0xFF	; 255
   17056:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   17058:	20 91 4a 0d 	lds	r18, 0x0D4A	; 0x800d4a <Serial+0x1a>
   1705c:	82 17       	cp	r24, r18
   1705e:	41 f0       	breq	.+16     	; 0x17070 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   17060:	e0 91 49 0d 	lds	r30, 0x0D49	; 0x800d49 <Serial+0x19>
   17064:	f0 e0       	ldi	r31, 0x00	; 0
   17066:	e0 5d       	subi	r30, 0xD0	; 208
   17068:	f2 4f       	sbci	r31, 0xF2	; 242
   1706a:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   1706c:	80 93 49 0d 	sts	0x0D49, r24	; 0x800d49 <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   17070:	ff 91       	pop	r31
   17072:	ef 91       	pop	r30
   17074:	9f 91       	pop	r25
   17076:	8f 91       	pop	r24
   17078:	2f 91       	pop	r18
   1707a:	0f 90       	pop	r0
   1707c:	0b be       	out	0x3b, r0	; 59
   1707e:	0f 90       	pop	r0
   17080:	0f be       	out	0x3f, r0	; 63
   17082:	0f 90       	pop	r0
   17084:	1f 90       	pop	r1
   17086:	18 95       	reti
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   17088:	80 81       	ld	r24, Z
   1708a:	f2 cf       	rjmp	.-28     	; 0x17070 <__vector_25+0x50>

0001708c <turnOffPWM.lto_priv.285>:
turnOffPWM.lto_priv.285():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   1708c:	82 50       	subi	r24, 0x02	; 2
   1708e:	82 31       	cpi	r24, 0x12	; 18
   17090:	08 f0       	brcs	.+2      	; 0x17094 <turnOffPWM.lto_priv.285+0x8>
   17092:	5f c0       	rjmp	.+190    	; 0x17152 <turnOffPWM.lto_priv.285+0xc6>
   17094:	e8 2f       	mov	r30, r24
   17096:	f0 e0       	ldi	r31, 0x00	; 0
   17098:	88 27       	eor	r24, r24
   1709a:	ee 5a       	subi	r30, 0xAE	; 174
   1709c:	f7 44       	sbci	r31, 0x47	; 71
   1709e:	8f 4f       	sbci	r24, 0xFF	; 255
   170a0:	0c 94 8a e0 	jmp	0x1c114	; 0x1c114 <__tablejump2__>
   170a4:	a6 b8       	out	0x06, r10	; 6
   170a6:	aa b8       	out	0x0a, r10	; 10
   170a8:	64 b8       	out	0x04, r6	; 4
   170aa:	6a b8       	out	0x0a, r6	; 10
   170ac:	6e b8       	out	0x0e, r6	; 14
   170ae:	a9 b8       	out	0x09, r10	; 9
   170b0:	72 b8       	out	0x02, r7	; 2
   170b2:	78 b8       	out	0x08, r7	; 8
   170b4:	7c b8       	out	0x0c, r7	; 12
   170b6:	82 b8       	out	0x02, r8	; 2
   170b8:	86 b8       	out	0x06, r8	; 6
   170ba:	8a b8       	out	0x0a, r8	; 10
   170bc:	90 b8       	out	0x00, r9	; 0
   170be:	94 b8       	out	0x04, r9	; 4
   170c0:	a9 b8       	out	0x09, r10	; 9
   170c2:	98 b8       	out	0x08, r9	; 8
   170c4:	9e b8       	out	0x0e, r9	; 14
   170c6:	a2 b8       	out	0x02, r10	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   170c8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   170cc:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   170ce:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   170d2:	08 95       	ret
   170d4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   170d8:	8f 7d       	andi	r24, 0xDF	; 223
   170da:	f9 cf       	rjmp	.-14     	; 0x170ce <turnOffPWM.lto_priv.285+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   170dc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   170e0:	87 7f       	andi	r24, 0xF7	; 247
   170e2:	f5 cf       	rjmp	.-22     	; 0x170ce <turnOffPWM.lto_priv.285+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   170e4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   170e8:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   170ea:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   170ee:	08 95       	ret
   170f0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   170f4:	8f 7d       	andi	r24, 0xDF	; 223
   170f6:	f9 cf       	rjmp	.-14     	; 0x170ea <turnOffPWM.lto_priv.285+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   170f8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   170fc:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   170fe:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   17102:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   17104:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   17108:	8f 7d       	andi	r24, 0xDF	; 223
   1710a:	f9 cf       	rjmp	.-14     	; 0x170fe <turnOffPWM.lto_priv.285+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   1710c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   17110:	87 7f       	andi	r24, 0xF7	; 247
   17112:	f5 cf       	rjmp	.-22     	; 0x170fe <turnOffPWM.lto_priv.285+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   17114:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   17118:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   1711a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1711e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   17120:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   17124:	8f 7d       	andi	r24, 0xDF	; 223
   17126:	f9 cf       	rjmp	.-14     	; 0x1711a <turnOffPWM.lto_priv.285+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   17128:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1712c:	87 7f       	andi	r24, 0xF7	; 247
   1712e:	f5 cf       	rjmp	.-22     	; 0x1711a <turnOffPWM.lto_priv.285+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   17130:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   17134:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   17136:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1713a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   1713c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   17140:	8f 7d       	andi	r24, 0xDF	; 223
   17142:	f9 cf       	rjmp	.-14     	; 0x17136 <turnOffPWM.lto_priv.285+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   17144:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   17148:	87 7f       	andi	r24, 0xF7	; 247
   1714a:	f5 cf       	rjmp	.-22     	; 0x17136 <turnOffPWM.lto_priv.285+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   1714c:	84 b5       	in	r24, 0x24	; 36
   1714e:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   17150:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   17152:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   17154:	84 b5       	in	r24, 0x24	; 36
   17156:	8f 7d       	andi	r24, 0xDF	; 223
   17158:	fb cf       	rjmp	.-10     	; 0x17150 <turnOffPWM.lto_priv.285+0xc4>

0001715a <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   1715a:	1f 93       	push	r17
   1715c:	cf 93       	push	r28
   1715e:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   17160:	28 2f       	mov	r18, r24
   17162:	30 e0       	ldi	r19, 0x00	; 0
   17164:	f9 01       	movw	r30, r18
   17166:	ed 52       	subi	r30, 0x2D	; 45
   17168:	ff 49       	sbci	r31, 0x9F	; 159
   1716a:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   1716c:	f9 01       	movw	r30, r18
   1716e:	ee 53       	subi	r30, 0x3E	; 62
   17170:	f8 49       	sbci	r31, 0x98	; 152
   17172:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   17174:	f9 01       	movw	r30, r18
   17176:	e8 5f       	subi	r30, 0xF8	; 248
   17178:	f7 49       	sbci	r31, 0x97	; 151
   1717a:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   1717c:	cc 23       	and	r28, r28
   1717e:	a9 f0       	breq	.+42     	; 0x171aa <digitalWrite+0x50>
   17180:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   17182:	81 11       	cpse	r24, r1
   17184:	0e 94 46 b8 	call	0x1708c	; 0x1708c <turnOffPWM.lto_priv.285>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   17188:	ec 2f       	mov	r30, r28
   1718a:	f0 e0       	ldi	r31, 0x00	; 0
   1718c:	ee 0f       	add	r30, r30
   1718e:	ff 1f       	adc	r31, r31
   17190:	e8 50       	subi	r30, 0x08	; 8
   17192:	f8 49       	sbci	r31, 0x98	; 152
   17194:	a5 91       	lpm	r26, Z+
   17196:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   17198:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
   1719a:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   1719c:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   1719e:	11 11       	cpse	r17, r1
   171a0:	08 c0       	rjmp	.+16     	; 0x171b2 <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   171a2:	d0 95       	com	r29
   171a4:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   171a6:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   171a8:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:212
}
   171aa:	df 91       	pop	r29
   171ac:	cf 91       	pop	r28
   171ae:	1f 91       	pop	r17
   171b0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   171b2:	de 2b       	or	r29, r30
   171b4:	f8 cf       	rjmp	.-16     	; 0x171a6 <digitalWrite+0x4c>

000171b6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.217]>:
_ZN9SRAM_23LC9writeByteEmh.constprop.217():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:78
  endCommand();

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
   171b6:	cf 92       	push	r12
   171b8:	df 92       	push	r13
   171ba:	ef 92       	push	r14
   171bc:	ff 92       	push	r15
   171be:	cf 93       	push	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
{
  if (address >= _capacity) {
   171c0:	c0 90 49 0e 	lds	r12, 0x0E49	; 0x800e49 <SRAM+0x4>
   171c4:	d0 90 4a 0e 	lds	r13, 0x0E4A	; 0x800e4a <SRAM+0x5>
   171c8:	e0 90 4b 0e 	lds	r14, 0x0E4B	; 0x800e4b <SRAM+0x6>
   171cc:	f0 90 4c 0e 	lds	r15, 0x0E4C	; 0x800e4c <SRAM+0x7>
   171d0:	6c 15       	cp	r22, r12
   171d2:	7d 05       	cpc	r23, r13
   171d4:	8e 05       	cpc	r24, r14
   171d6:	9f 05       	cpc	r25, r15
   171d8:	38 f5       	brcc	.+78     	; 0x17228 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.217]+0x72>
   171da:	c4 2f       	mov	r28, r20
   171dc:	6b 01       	movw	r12, r22
   171de:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   171e0:	60 e0       	ldi	r22, 0x00	; 0
   171e2:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <SRAM+0x8>
   171e6:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   171ea:	62 e0       	ldi	r22, 0x02	; 2
   171ec:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <SRAM>
   171f0:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <SRAM+0x1>
   171f4:	0e 94 eb 63 	call	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   171f8:	c7 01       	movw	r24, r14
   171fa:	b6 01       	movw	r22, r12
   171fc:	0e 94 a8 ae 	call	0x15d50	; 0x15d50 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.221]>
_ZN9SRAM_23LC9writeByteEmh.constprop.217():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
   17200:	6c 2f       	mov	r22, r28
   17202:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <SRAM>
   17206:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <SRAM+0x1>
   1720a:	0e 94 eb 63 	call	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   1720e:	61 e0       	ldi	r22, 0x01	; 1
   17210:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <SRAM+0x8>
   17214:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
   17218:	81 e0       	ldi	r24, 0x01	; 1
   1721a:	90 e0       	ldi	r25, 0x00	; 0
_ZN9SRAM_23LC9writeByteEmh.constprop.217():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
  endCommand();
  return(1);
}
   1721c:	cf 91       	pop	r28
   1721e:	ff 90       	pop	r15
   17220:	ef 90       	pop	r14
   17222:	df 90       	pop	r13
   17224:	cf 90       	pop	r12
   17226:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   17228:	90 e0       	ldi	r25, 0x00	; 0
   1722a:	80 e0       	ldi	r24, 0x00	; 0
   1722c:	f7 cf       	rjmp	.-18     	; 0x1721c <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.217]+0x66>

0001722e <SRAM_23LC::readByte(unsigned long) [clone .constprop.215]>:
_ZN9SRAM_23LC8readByteEm.constprop.215():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:65
void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
   1722e:	cf 92       	push	r12
   17230:	df 92       	push	r13
   17232:	ef 92       	push	r14
   17234:	ff 92       	push	r15
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
{
  if (address >= _capacity) {
   17236:	c0 90 49 0e 	lds	r12, 0x0E49	; 0x800e49 <SRAM+0x4>
   1723a:	d0 90 4a 0e 	lds	r13, 0x0E4A	; 0x800e4a <SRAM+0x5>
   1723e:	e0 90 4b 0e 	lds	r14, 0x0E4B	; 0x800e4b <SRAM+0x6>
   17242:	f0 90 4c 0e 	lds	r15, 0x0E4C	; 0x800e4c <SRAM+0x7>
   17246:	6c 15       	cp	r22, r12
   17248:	7d 05       	cpc	r23, r13
   1724a:	8e 05       	cpc	r24, r14
   1724c:	9f 05       	cpc	r25, r15
   1724e:	28 f5       	brcc	.+74     	; 0x1729a <SRAM_23LC::readByte(unsigned long) [clone .constprop.215]+0x6c>
   17250:	6b 01       	movw	r12, r22
   17252:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   17254:	60 e0       	ldi	r22, 0x00	; 0
   17256:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <SRAM+0x8>
   1725a:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   1725e:	63 e0       	ldi	r22, 0x03	; 3
   17260:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <SRAM>
   17264:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <SRAM+0x1>
   17268:	0e 94 eb 63 	call	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   1726c:	c7 01       	movw	r24, r14
   1726e:	b6 01       	movw	r22, r12
   17270:	0e 94 a8 ae 	call	0x15d50	; 0x15d50 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.221]>
_ZN9SRAM_23LC8readByteEm.constprop.215():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   17274:	6f ef       	ldi	r22, 0xFF	; 255
   17276:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <SRAM>
   1727a:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <SRAM+0x1>
   1727e:	0e 94 eb 63 	call	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
   17282:	f8 2e       	mov	r15, r24
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   17284:	61 e0       	ldi	r22, 0x01	; 1
   17286:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <SRAM+0x8>
   1728a:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
_ZN9SRAM_23LC8readByteEm.constprop.215():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76
  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
  endCommand();

  return(ret);
}
   1728e:	8f 2d       	mov	r24, r15
   17290:	ff 90       	pop	r15
   17292:	ef 90       	pop	r14
   17294:	df 90       	pop	r13
   17296:	cf 90       	pop	r12
   17298:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   1729a:	f1 2c       	mov	r15, r1
   1729c:	f8 cf       	rjmp	.-16     	; 0x1728e <SRAM_23LC::readByte(unsigned long) [clone .constprop.215]+0x60>

0001729e <RF24::csn(bool) [clone .constprop.102]>:
_ZN4RF243csnEb.constprop.102():
/home/saric/Arduino/libraries/RF24/RF24.cpp:15
#include "RF24_config.h"
#include "RF24.h"

/****************************************************************************/

void RF24::csn(bool mode)
   1729e:	cf 93       	push	r28
   172a0:	df 93       	push	r29
setBitOrder():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:296

  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setBitOrder(uint8_t bitOrder) {
    if (bitOrder == LSBFIRST) SPCR |= _BV(DORD);
    else SPCR &= ~(_BV(DORD));
   172a2:	9c b5       	in	r25, 0x2c	; 44
   172a4:	9f 7d       	andi	r25, 0xDF	; 223
   172a6:	9c bd       	out	0x2c, r25	; 44
setDataMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:301
  }
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setDataMode(uint8_t dataMode) {
    SPCR = (SPCR & ~SPI_MODE_MASK) | dataMode;
   172a8:	9c b5       	in	r25, 0x2c	; 44
   172aa:	93 7f       	andi	r25, 0xF3	; 243
   172ac:	9c bd       	out	0x2c, r25	; 44
setClockDivider():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:306
  }
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setClockDivider(uint8_t clockDiv) {
    SPCR = (SPCR & ~SPI_CLOCK_MASK) | (clockDiv & SPI_CLOCK_MASK);
   172ae:	9c b5       	in	r25, 0x2c	; 44
   172b0:	9c 7f       	andi	r25, 0xFC	; 252
   172b2:	9c bd       	out	0x2c, r25	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:307
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
   172b4:	9d b5       	in	r25, 0x2d	; 45
   172b6:	91 60       	ori	r25, 0x01	; 1
   172b8:	9d bd       	out	0x2d, r25	; 45
_ZN4RF243csnEb.constprop.102():
/home/saric/Arduino/libraries/RF24/RF24.cpp:69
      if(!mode)
	    _SPI.chipSelect(csn_pin);
#endif

#if !defined (RF24_LINUX)
	digitalWrite(csn_pin,mode);
   172ba:	cc ed       	ldi	r28, 0xDC	; 220
   172bc:	df e0       	ldi	r29, 0x0F	; 15
   172be:	68 2f       	mov	r22, r24
   172c0:	8a 81       	ldd	r24, Y+2	; 0x02
   172c2:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/libraries/RF24/RF24.cpp:70
	delayMicroseconds(csDelay);
   172c6:	8c 89       	ldd	r24, Y+20	; 0x14
   172c8:	9d 89       	ldd	r25, Y+21	; 0x15
/home/saric/Arduino/libraries/RF24/RF24.cpp:73
#endif

}
   172ca:	df 91       	pop	r29
   172cc:	cf 91       	pop	r28
/home/saric/Arduino/libraries/RF24/RF24.cpp:70
	    _SPI.chipSelect(csn_pin);
#endif

#if !defined (RF24_LINUX)
	digitalWrite(csn_pin,mode);
	delayMicroseconds(csDelay);
   172ce:	0c 94 b5 aa 	jmp	0x1556a	; 0x1556a <delayMicroseconds>

000172d2 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]>:
_ZN4RF2422print_address_registerEPKchh.constprop.36():
/home/saric/Arduino/libraries/RF24/RF24.cpp:411
  printf_P(PSTR("\r\n"));
}

/****************************************************************************/

void RF24::print_address_register(const char* name, uint8_t reg, uint8_t qty)
   172d2:	2f 92       	push	r2
   172d4:	3f 92       	push	r3
   172d6:	4f 92       	push	r4
   172d8:	5f 92       	push	r5
   172da:	6f 92       	push	r6
   172dc:	7f 92       	push	r7
   172de:	8f 92       	push	r8
   172e0:	9f 92       	push	r9
   172e2:	af 92       	push	r10
   172e4:	bf 92       	push	r11
   172e6:	cf 92       	push	r12
   172e8:	df 92       	push	r13
   172ea:	ef 92       	push	r14
   172ec:	ff 92       	push	r15
   172ee:	0f 93       	push	r16
   172f0:	1f 93       	push	r17
   172f2:	cf 93       	push	r28
   172f4:	df 93       	push	r29
   172f6:	1f 92       	push	r1
   172f8:	cd b7       	in	r28, 0x3d	; 61
   172fa:	de b7       	in	r29, 0x3e	; 62
   172fc:	96 2e       	mov	r9, r22
   172fe:	34 2e       	mov	r3, r20
/home/saric/Arduino/libraries/RF24/RF24.cpp:431
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
  }

  printf_P(PSTR("\r\n"));
}
   17300:	4d b6       	in	r4, 0x3d	; 61
   17302:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/RF24/RF24.cpp:417
{

  #if defined (RF24_LINUX)
    printf("%s\t =",name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
   17304:	9f 93       	push	r25
   17306:	8f 93       	push	r24
   17308:	84 e9       	ldi	r24, 0x94	; 148
   1730a:	92 e6       	ldi	r25, 0x62	; 98
   1730c:	9f 93       	push	r25
   1730e:	8f 93       	push	r24
   17310:	0e 94 a8 d5 	call	0x1ab50	; 0x1ab50 <printf_P>
   17314:	39 0c       	add	r3, r9
   17316:	0f 90       	pop	r0
   17318:	0f 90       	pop	r0
   1731a:	0f 90       	pop	r0
   1731c:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:424
  while (qty--)
  {
    uint8_t buffer[addr_width];
    read_register(reg++,buffer,sizeof buffer);

    printf_P(PSTR(" 0x"));
   1731e:	80 e9       	ldi	r24, 0x90	; 144
   17320:	c8 2e       	mov	r12, r24
   17322:	82 e6       	ldi	r24, 0x62	; 98
   17324:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:427
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
   17326:	9b e8       	ldi	r25, 0x8B	; 139
   17328:	a9 2e       	mov	r10, r25
   1732a:	92 e6       	ldi	r25, 0x62	; 98
   1732c:	b9 2e       	mov	r11, r25
/home/saric/Arduino/libraries/RF24/RF24.cpp:419
  #if defined (RF24_LINUX)
    printf("%s\t =",name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
   1732e:	93 14       	cp	r9, r3
   17330:	09 f4       	brne	.+2      	; 0x17334 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0x62>
   17332:	4c c0       	rjmp	.+152    	; 0x173cc <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xfa>
/home/saric/Arduino/libraries/RF24/RF24.cpp:428

    printf_P(PSTR(" 0x"));
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
  }
   17334:	6d b6       	in	r6, 0x3d	; 61
   17336:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/RF24/RF24.cpp:421
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
  {
    uint8_t buffer[addr_width];
   17338:	20 90 ea 0f 	lds	r2, 0x0FEA	; 0x800fea <radio+0xe>
   1733c:	02 2d       	mov	r16, r2
   1733e:	10 e0       	ldi	r17, 0x00	; 0
   17340:	8d b7       	in	r24, 0x3d	; 61
   17342:	9e b7       	in	r25, 0x3e	; 62
   17344:	80 1b       	sub	r24, r16
   17346:	91 0b       	sbc	r25, r17
   17348:	0f b6       	in	r0, 0x3f	; 63
   1734a:	f8 94       	cli
   1734c:	9e bf       	out	0x3e, r25	; 62
   1734e:	0f be       	out	0x3f, r0	; 63
   17350:	8d bf       	out	0x3d, r24	; 61
   17352:	ed b7       	in	r30, 0x3d	; 61
   17354:	fe b7       	in	r31, 0x3e	; 62
   17356:	31 96       	adiw	r30, 0x01	; 1
   17358:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/RF24/RF24.cpp:422
    read_register(reg++,buffer,sizeof buffer);
   1735a:	f1 e0       	ldi	r31, 0x01	; 1
   1735c:	f9 0d       	add	r31, r9
   1735e:	f9 83       	std	Y+1, r31	; 0x01
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   17360:	80 e0       	ldi	r24, 0x00	; 0
   17362:	0e 94 4f b9 	call	0x1729e	; 0x1729e <RF24::csn(bool) [clone .constprop.102]>
read_register():
/home/saric/Arduino/libraries/RF24/RF24.cpp:128
  endTransaction(); //unlocks mutex and setting csn high

#else

  beginTransaction();
  status = _SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
   17366:	89 2d       	mov	r24, r9
   17368:	8f 71       	andi	r24, 0x1F	; 31
   1736a:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
   1736e:	47 01       	movw	r8, r14
/home/saric/Arduino/libraries/RF24/RF24.cpp:129
  while ( len-- ){
   17370:	2a 94       	dec	r2
   17372:	8f ef       	ldi	r24, 0xFF	; 255
   17374:	28 16       	cp	r2, r24
   17376:	31 f0       	breq	.+12     	; 0x17384 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xb2>
/home/saric/Arduino/libraries/RF24/RF24.cpp:130
    *buf++ = _SPI.transfer(0xff);
   17378:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
   1737c:	f4 01       	movw	r30, r8
   1737e:	81 93       	st	Z+, r24
   17380:	4f 01       	movw	r8, r30
   17382:	f6 cf       	rjmp	.-20     	; 0x17370 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0x9e>
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   17384:	81 e0       	ldi	r24, 0x01	; 1
   17386:	0e 94 4f b9 	call	0x1729e	; 0x1729e <RF24::csn(bool) [clone .constprop.102]>
_ZN4RF2422print_address_registerEPKchh.constprop.36():
/home/saric/Arduino/libraries/RF24/RF24.cpp:424
  while (qty--)
  {
    uint8_t buffer[addr_width];
    read_register(reg++,buffer,sizeof buffer);

    printf_P(PSTR(" 0x"));
   1738a:	df 92       	push	r13
   1738c:	cf 92       	push	r12
   1738e:	0e 94 a8 d5 	call	0x1ab50	; 0x1ab50 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:425
    uint8_t* bufptr = buffer + sizeof buffer;
   17392:	0e 0d       	add	r16, r14
   17394:	1f 1d       	adc	r17, r15
   17396:	0f 90       	pop	r0
   17398:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:426
    while( --bufptr >= buffer )
   1739a:	01 50       	subi	r16, 0x01	; 1
   1739c:	11 09       	sbc	r17, r1
   1739e:	0e 15       	cp	r16, r14
   173a0:	1f 05       	cpc	r17, r15
   173a2:	68 f0       	brcs	.+26     	; 0x173be <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xec>
/home/saric/Arduino/libraries/RF24/RF24.cpp:427
      printf_P(PSTR("%02x"),*bufptr);
   173a4:	f8 01       	movw	r30, r16
   173a6:	80 81       	ld	r24, Z
   173a8:	1f 92       	push	r1
   173aa:	8f 93       	push	r24
   173ac:	bf 92       	push	r11
   173ae:	af 92       	push	r10
   173b0:	0e 94 a8 d5 	call	0x1ab50	; 0x1ab50 <printf_P>
   173b4:	0f 90       	pop	r0
   173b6:	0f 90       	pop	r0
   173b8:	0f 90       	pop	r0
   173ba:	0f 90       	pop	r0
   173bc:	ee cf       	rjmp	.-36     	; 0x1739a <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xc8>
   173be:	0f b6       	in	r0, 0x3f	; 63
   173c0:	f8 94       	cli
   173c2:	7e be       	out	0x3e, r7	; 62
   173c4:	0f be       	out	0x3f, r0	; 63
   173c6:	6d be       	out	0x3d, r6	; 61
/home/saric/Arduino/libraries/RF24/RF24.cpp:422
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
  {
    uint8_t buffer[addr_width];
    read_register(reg++,buffer,sizeof buffer);
   173c8:	99 80       	ldd	r9, Y+1	; 0x01
   173ca:	b1 cf       	rjmp	.-158    	; 0x1732e <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0x5c>
/home/saric/Arduino/libraries/RF24/RF24.cpp:430
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
  }

  printf_P(PSTR("\r\n"));
   173cc:	88 e8       	ldi	r24, 0x88	; 136
   173ce:	92 e6       	ldi	r25, 0x62	; 98
   173d0:	9f 93       	push	r25
   173d2:	8f 93       	push	r24
   173d4:	0e 94 a8 d5 	call	0x1ab50	; 0x1ab50 <printf_P>
   173d8:	0f 90       	pop	r0
   173da:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:431
}
   173dc:	0f b6       	in	r0, 0x3f	; 63
   173de:	f8 94       	cli
   173e0:	5e be       	out	0x3e, r5	; 62
   173e2:	0f be       	out	0x3f, r0	; 63
   173e4:	4d be       	out	0x3d, r4	; 61
   173e6:	0f 90       	pop	r0
   173e8:	df 91       	pop	r29
   173ea:	cf 91       	pop	r28
   173ec:	1f 91       	pop	r17
   173ee:	0f 91       	pop	r16
   173f0:	ff 90       	pop	r15
   173f2:	ef 90       	pop	r14
   173f4:	df 90       	pop	r13
   173f6:	cf 90       	pop	r12
   173f8:	bf 90       	pop	r11
   173fa:	af 90       	pop	r10
   173fc:	9f 90       	pop	r9
   173fe:	8f 90       	pop	r8
   17400:	7f 90       	pop	r7
   17402:	6f 90       	pop	r6
   17404:	5f 90       	pop	r5
   17406:	4f 90       	pop	r4
   17408:	3f 90       	pop	r3
   1740a:	2f 90       	pop	r2
   1740c:	08 95       	ret

0001740e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.99]>:
_ZN4RF2414write_registerEhh.constprop.99():
/home/saric/Arduino/libraries/RF24/RF24.cpp:204
  return status;
}

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
   1740e:	cf 93       	push	r28
   17410:	df 93       	push	r29
   17412:	c8 2f       	mov	r28, r24
   17414:	d6 2f       	mov	r29, r22
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   17416:	80 e0       	ldi	r24, 0x00	; 0
   17418:	0e 94 4f b9 	call	0x1729e	; 0x1729e <RF24::csn(bool) [clone .constprop.102]>
_ZN4RF2414write_registerEhh.constprop.99():
/home/saric/Arduino/libraries/RF24/RF24.cpp:223
	status = *prx++; // status is 1st byte of receive buffer
	endTransaction();
  #else

  beginTransaction();
  status = _SPI.transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
   1741c:	8c 2f       	mov	r24, r28
   1741e:	80 62       	ori	r24, 0x20	; 32
   17420:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
   17424:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:224
  _SPI.transfer(value);
   17426:	8d 2f       	mov	r24, r29
   17428:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   1742c:	81 e0       	ldi	r24, 0x01	; 1
   1742e:	0e 94 4f b9 	call	0x1729e	; 0x1729e <RF24::csn(bool) [clone .constprop.102]>
_ZN4RF2414write_registerEhh.constprop.99():
/home/saric/Arduino/libraries/RF24/RF24.cpp:230
  endTransaction();

  #endif

  return status;
}
   17432:	8c 2f       	mov	r24, r28
   17434:	df 91       	pop	r29
   17436:	cf 91       	pop	r28
   17438:	08 95       	ret

0001743a <RF24::read_register(unsigned char) [clone .constprop.98]>:
_ZN4RF2413read_registerEh.constprop.98():
/home/saric/Arduino/libraries/RF24/RF24.cpp:141
  return status;
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
   1743a:	cf 93       	push	r28
   1743c:	c8 2f       	mov	r28, r24
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   1743e:	80 e0       	ldi	r24, 0x00	; 0
   17440:	0e 94 4f b9 	call	0x1729e	; 0x1729e <RF24::csn(bool) [clone .constprop.102]>
_ZN4RF2413read_registerEh.constprop.98():
/home/saric/Arduino/libraries/RF24/RF24.cpp:161
  
  endTransaction();
  #else

  beginTransaction();
  _SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
   17444:	8c 2f       	mov	r24, r28
   17446:	8f 71       	andi	r24, 0x1F	; 31
   17448:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:162
  result = _SPI.transfer(0xff);
   1744c:	8f ef       	ldi	r24, 0xFF	; 255
   1744e:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
   17452:	c8 2f       	mov	r28, r24
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   17454:	81 e0       	ldi	r24, 0x01	; 1
   17456:	0e 94 4f b9 	call	0x1729e	; 0x1729e <RF24::csn(bool) [clone .constprop.102]>
_ZN4RF2413read_registerEh.constprop.98():
/home/saric/Arduino/libraries/RF24/RF24.cpp:168
  endTransaction();

  #endif

  return result;
}
   1745a:	8c 2f       	mov	r24, r28
   1745c:	cf 91       	pop	r28
   1745e:	08 95       	ret

00017460 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>:
_ZN4RF2419print_byte_registerEPKchh.constprop.38():
/home/saric/Arduino/libraries/RF24/RF24.cpp:395
          );
}

/****************************************************************************/

void RF24::print_byte_register(const char* name, uint8_t reg, uint8_t qty)
   17460:	ff 92       	push	r15
   17462:	0f 93       	push	r16
   17464:	1f 93       	push	r17
   17466:	cf 93       	push	r28
   17468:	df 93       	push	r29
   1746a:	c6 2f       	mov	r28, r22
   1746c:	d4 2f       	mov	r29, r20
/home/saric/Arduino/libraries/RF24/RF24.cpp:402
  //char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
  //printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);
  #if defined (RF24_LINUX)
    printf("%s\t =", name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
   1746e:	9f 93       	push	r25
   17470:	8f 93       	push	r24
   17472:	85 ea       	ldi	r24, 0xA5	; 165
   17474:	92 e6       	ldi	r25, 0x62	; 98
   17476:	9f 93       	push	r25
   17478:	8f 93       	push	r24
   1747a:	0e 94 a8 d5 	call	0x1ab50	; 0x1ab50 <printf_P>
   1747e:	dc 0f       	add	r29, r28
   17480:	0f 90       	pop	r0
   17482:	0f 90       	pop	r0
   17484:	0f 90       	pop	r0
   17486:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:405
  #endif
  while (qty--)
    printf_P(PSTR(" 0x%02x"),read_register(reg++));
   17488:	0d e9       	ldi	r16, 0x9D	; 157
   1748a:	12 e6       	ldi	r17, 0x62	; 98
/home/saric/Arduino/libraries/RF24/RF24.cpp:404
  #if defined (RF24_LINUX)
    printf("%s\t =", name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
   1748c:	cd 17       	cp	r28, r29
   1748e:	91 f0       	breq	.+36     	; 0x174b4 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]+0x54>
/home/saric/Arduino/libraries/RF24/RF24.cpp:405
    printf_P(PSTR(" 0x%02x"),read_register(reg++));
   17490:	ff 24       	eor	r15, r15
   17492:	f3 94       	inc	r15
   17494:	fc 0e       	add	r15, r28
   17496:	8c 2f       	mov	r24, r28
   17498:	0e 94 1d ba 	call	0x1743a	; 0x1743a <RF24::read_register(unsigned char) [clone .constprop.98]>
   1749c:	1f 92       	push	r1
   1749e:	8f 93       	push	r24
   174a0:	1f 93       	push	r17
   174a2:	0f 93       	push	r16
   174a4:	0e 94 a8 d5 	call	0x1ab50	; 0x1ab50 <printf_P>
   174a8:	0f 90       	pop	r0
   174aa:	0f 90       	pop	r0
   174ac:	0f 90       	pop	r0
   174ae:	0f 90       	pop	r0
   174b0:	cf 2d       	mov	r28, r15
   174b2:	ec cf       	rjmp	.-40     	; 0x1748c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]+0x2c>
/home/saric/Arduino/libraries/RF24/RF24.cpp:406
  printf_P(PSTR("\r\n"));
   174b4:	8a e9       	ldi	r24, 0x9A	; 154
   174b6:	92 e6       	ldi	r25, 0x62	; 98
   174b8:	9f 93       	push	r25
   174ba:	8f 93       	push	r24
   174bc:	0e 94 a8 d5 	call	0x1ab50	; 0x1ab50 <printf_P>
   174c0:	0f 90       	pop	r0
   174c2:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:407
}
   174c4:	df 91       	pop	r29
   174c6:	cf 91       	pop	r28
   174c8:	1f 91       	pop	r17
   174ca:	0f 91       	pop	r16
   174cc:	ff 90       	pop	r15
   174ce:	08 95       	ret

000174d0 <RF24::spiTrans(unsigned char) [clone .constprop.96]>:
_ZN4RF248spiTransEh.constprop.96():
/home/saric/Arduino/libraries/RF24/RF24.cpp:350
  return spiTrans( FLUSH_TX );
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd){
   174d0:	cf 93       	push	r28
   174d2:	c8 2f       	mov	r28, r24
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   174d4:	80 e0       	ldi	r24, 0x00	; 0
   174d6:	0e 94 4f b9 	call	0x1729e	; 0x1729e <RF24::csn(bool) [clone .constprop.102]>
_ZN4RF248spiTransEh.constprop.96():
/home/saric/Arduino/libraries/RF24/RF24.cpp:355
uint8_t RF24::spiTrans(uint8_t cmd){

  uint8_t status;
  
  beginTransaction();
  status = _SPI.transfer( cmd );
   174da:	8c 2f       	mov	r24, r28
   174dc:	0e 94 e7 5a 	call	0xb5ce	; 0xb5ce <SPIClass::transfer(unsigned char)>
   174e0:	c8 2f       	mov	r28, r24
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   174e2:	81 e0       	ldi	r24, 0x01	; 1
   174e4:	0e 94 4f b9 	call	0x1729e	; 0x1729e <RF24::csn(bool) [clone .constprop.102]>
_ZN4RF248spiTransEh.constprop.96():
/home/saric/Arduino/libraries/RF24/RF24.cpp:359
  beginTransaction();
  status = _SPI.transfer( cmd );
  endTransaction();
  
  return status;
}
   174e8:	8c 2f       	mov	r24, r28
   174ea:	cf 91       	pop	r28
   174ec:	08 95       	ret

000174ee <EEPROM_CAT25::endCommand() [clone .constprop.72]>:
_ZN12EEPROM_CAT2510endCommandEv.constprop.72():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:215
  _spi->transfer((uint8_t)(address & 0xFF));
}

void EEPROM_CAT25::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   174ee:	61 e0       	ldi	r22, 0x01	; 1
   174f0:	80 91 40 0e 	lds	r24, 0x0E40	; 0x800e40 <SROM+0xa>
   174f4:	0c 94 ad b8 	jmp	0x1715a	; 0x1715a <digitalWrite>

000174f8 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.70]>:
_ZN12EEPROM_CAT2512startCommandEhm.constprop.70():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:180
  endCommand();

  return(length);
}

void EEPROM_CAT25::startCommand(uint8_t command, const uint32_t address)
   174f8:	cf 93       	push	r28
   174fa:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:183
{
  //_spi->beginTransaction();
  digitalWrite(_chipSelect, LOW);
   174fc:	60 e0       	ldi	r22, 0x00	; 0
   174fe:	80 91 40 0e 	lds	r24, 0x0E40	; 0x800e40 <SROM+0xa>
   17502:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:193
    } else if (command == EEPROM_CAT25_COMMAND_WRITE) {
      command = EEPROM_CAT25_COMMAND_WRITE_A8_HIGH;
    }
  }

  _spi->transfer(command);
   17506:	6c 2f       	mov	r22, r28
   17508:	80 91 36 0e 	lds	r24, 0x0E36	; 0x800e36 <SROM>
   1750c:	90 91 37 0e 	lds	r25, 0x0E37	; 0x800e37 <SROM+0x1>
   17510:	0e 94 eb 63 	call	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:195

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
   17514:	c2 50       	subi	r28, 0x02	; 2
   17516:	c2 30       	cpi	r28, 0x02	; 2
   17518:	a8 f5       	brcc	.+106    	; 0x17584 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.70]+0x8c>
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:202
  }
}

void EEPROM_CAT25::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
   1751a:	80 91 3a 0e 	lds	r24, 0x0E3A	; 0x800e3a <SROM+0x4>
   1751e:	90 91 3b 0e 	lds	r25, 0x0E3B	; 0x800e3b <SROM+0x5>
   17522:	a0 91 3c 0e 	lds	r26, 0x0E3C	; 0x800e3c <SROM+0x6>
   17526:	b0 91 3d 0e 	lds	r27, 0x0E3D	; 0x800e3d <SROM+0x7>
   1752a:	01 97       	sbiw	r24, 0x01	; 1
   1752c:	a1 40       	sbci	r26, 0x01	; 1
   1752e:	b1 05       	cpc	r27, r1
   17530:	38 f0       	brcs	.+14     	; 0x17540 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.70]+0x48>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:203
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   17532:	60 e0       	ldi	r22, 0x00	; 0
   17534:	80 91 36 0e 	lds	r24, 0x0E36	; 0x800e36 <SROM>
   17538:	90 91 37 0e 	lds	r25, 0x0E37	; 0x800e37 <SROM+0x1>
   1753c:	0e 94 eb 63 	call	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:206
  }

  if ((_capacity > 0x100) && (_device != CAT25040)) {
   17540:	80 91 3a 0e 	lds	r24, 0x0E3A	; 0x800e3a <SROM+0x4>
   17544:	90 91 3b 0e 	lds	r25, 0x0E3B	; 0x800e3b <SROM+0x5>
   17548:	a0 91 3c 0e 	lds	r26, 0x0E3C	; 0x800e3c <SROM+0x6>
   1754c:	b0 91 3d 0e 	lds	r27, 0x0E3D	; 0x800e3d <SROM+0x7>
   17550:	81 30       	cpi	r24, 0x01	; 1
   17552:	91 40       	sbci	r25, 0x01	; 1
   17554:	a1 05       	cpc	r26, r1
   17556:	b1 05       	cpc	r27, r1
   17558:	68 f0       	brcs	.+26     	; 0x17574 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.70]+0x7c>
   1755a:	80 91 38 0e 	lds	r24, 0x0E38	; 0x800e38 <SROM+0x2>
   1755e:	90 91 39 0e 	lds	r25, 0x0E39	; 0x800e39 <SROM+0x3>
   17562:	0b 97       	sbiw	r24, 0x0b	; 11
   17564:	39 f0       	breq	.+14     	; 0x17574 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.70]+0x7c>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:207
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   17566:	60 e0       	ldi	r22, 0x00	; 0
   17568:	80 91 36 0e 	lds	r24, 0x0E36	; 0x800e36 <SROM>
   1756c:	90 91 37 0e 	lds	r25, 0x0E37	; 0x800e37 <SROM+0x1>
   17570:	0e 94 eb 63 	call	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   17574:	60 e0       	ldi	r22, 0x00	; 0
   17576:	80 91 36 0e 	lds	r24, 0x0E36	; 0x800e36 <SROM>
   1757a:	90 91 37 0e 	lds	r25, 0x0E37	; 0x800e37 <SROM+0x1>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.70():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   1757e:	cf 91       	pop	r28
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   17580:	0c 94 eb 63 	jmp	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.70():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   17584:	cf 91       	pop	r28
   17586:	08 95       	ret

00017588 <EEPROM_CAT25::getStatusRegister() [clone .constprop.69]>:
_ZN12EEPROM_CAT2517getStatusRegisterEv.constprop.69():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:42
void EEPROM_CAT25::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t EEPROM_CAT25::getStatusRegister(void)
   17588:	cf 93       	push	r28
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:44
{
  startCommand(EEPROM_CAT25_COMMAND_RDSR, 0);
   1758a:	85 e0       	ldi	r24, 0x05	; 5
   1758c:	0e 94 7c ba 	call	0x174f8	; 0x174f8 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.70]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:45
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   17590:	6f ef       	ldi	r22, 0xFF	; 255
   17592:	80 91 36 0e 	lds	r24, 0x0E36	; 0x800e36 <SROM>
   17596:	90 91 37 0e 	lds	r25, 0x0E37	; 0x800e37 <SROM+0x1>
   1759a:	0e 94 eb 63 	call	0xc7d6	; 0xc7d6 <SoftSPIB::transfer(unsigned char)>
   1759e:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:46
  endCommand();
   175a0:	0e 94 77 ba 	call	0x174ee	; 0x174ee <EEPROM_CAT25::endCommand() [clone .constprop.72]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:48
  return(ret);
}
   175a4:	8c 2f       	mov	r24, r28
   175a6:	cf 91       	pop	r28
   175a8:	08 95       	ret

000175aa <TwoWire::begin() [clone .constprop.46]>:
_ZN7TwoWire5beginEv.constprop.46():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:57

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
   175aa:	10 92 cf 0c 	sts	0x0CCF, r1	; 0x800ccf <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:58
  rxBufferLength = 0;
   175ae:	10 92 ce 0c 	sts	0x0CCE, r1	; 0x800cce <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:60

  txBufferIndex = 0;
   175b2:	10 92 e6 0c 	sts	0x0CE6, r1	; 0x800ce6 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:61
  txBufferLength = 0;
   175b6:	10 92 e5 0c 	sts	0x0CE5, r1	; 0x800ce5 <TwoWire::txBufferLength>
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
   175ba:	10 92 2f 0d 	sts	0x0D2F, r1	; 0x800d2f <twi_state.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:72
  twi_sendStop = true; // default value
   175be:	81 e0       	ldi	r24, 0x01	; 1
   175c0:	80 93 2e 0d 	sts	0x0D2E, r24	; 0x800d2e <twi_sendStop.lto_priv.269>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:73
  twi_inRepStart = false;
   175c4:	10 92 29 0d 	sts	0x0D29, r1	; 0x800d29 <twi_inRepStart.lto_priv.270>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:76

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
   175c8:	61 e0       	ldi	r22, 0x01	; 1
   175ca:	83 e1       	ldi	r24, 0x13	; 19
   175cc:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:77
  digitalWrite(SCL, 1);
   175d0:	61 e0       	ldi	r22, 0x01	; 1
   175d2:	82 e1       	ldi	r24, 0x12	; 18
   175d4:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
   175d8:	e9 eb       	ldi	r30, 0xB9	; 185
   175da:	f0 e0       	ldi	r31, 0x00	; 0
   175dc:	80 81       	ld	r24, Z
   175de:	8e 7f       	andi	r24, 0xFE	; 254
   175e0:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:81
  cbi(TWSR, TWPS1);
   175e2:	80 81       	ld	r24, Z
   175e4:	8d 7f       	andi	r24, 0xFD	; 253
   175e6:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
   175e8:	88 e4       	ldi	r24, 0x48	; 72
   175ea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
   175ee:	85 e4       	ldi	r24, 0x45	; 69
   175f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
twi_attachSlaveTxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
   175f4:	8b e8       	ldi	r24, 0x8B	; 139
   175f6:	94 e3       	ldi	r25, 0x34	; 52
   175f8:	90 93 7f 0c 	sts	0x0C7F, r25	; 0x800c7f <twi_onSlaveTransmit.lto_priv.274+0x1>
   175fc:	80 93 7e 0c 	sts	0x0C7E, r24	; 0x800c7e <twi_onSlaveTransmit.lto_priv.274>
twi_attachSlaveRxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
   17600:	8c e8       	ldi	r24, 0x8C	; 140
   17602:	94 e3       	ldi	r25, 0x34	; 52
   17604:	90 93 7d 0c 	sts	0x0C7D, r25	; 0x800c7d <twi_onSlaveReceive.lto_priv.273+0x1>
   17608:	80 93 7c 0c 	sts	0x0C7C, r24	; 0x800c7c <twi_onSlaveReceive.lto_priv.273>
_ZN7TwoWire5beginEv.constprop.46():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:66

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
   1760c:	08 95       	ret

0001760e <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   1760e:	cf 93       	push	r28
   17610:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   17612:	90 e0       	ldi	r25, 0x00	; 0
   17614:	fc 01       	movw	r30, r24
   17616:	ee 53       	subi	r30, 0x3E	; 62
   17618:	f8 49       	sbci	r31, 0x98	; 152
   1761a:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   1761c:	88 5f       	subi	r24, 0xF8	; 248
   1761e:	97 49       	sbci	r25, 0x97	; 151
   17620:	fc 01       	movw	r30, r24
   17622:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   17624:	88 23       	and	r24, r24
   17626:	c9 f0       	breq	.+50     	; 0x1765a <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   17628:	90 e0       	ldi	r25, 0x00	; 0
   1762a:	88 0f       	add	r24, r24
   1762c:	99 1f       	adc	r25, r25
   1762e:	fc 01       	movw	r30, r24
   17630:	ed 53       	subi	r30, 0x3D	; 61
   17632:	ff 49       	sbci	r31, 0x9F	; 159
   17634:	a5 91       	lpm	r26, Z+
   17636:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   17638:	fc 01       	movw	r30, r24
   1763a:	e8 50       	subi	r30, 0x08	; 8
   1763c:	f8 49       	sbci	r31, 0x98	; 152
   1763e:	c5 91       	lpm	r28, Z+
   17640:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   17642:	61 11       	cpse	r22, r1
   17644:	0d c0       	rjmp	.+26     	; 0x17660 <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   17646:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
   17648:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   1764a:	8c 91       	ld	r24, X
   1764c:	20 95       	com	r18
   1764e:	82 23       	and	r24, r18
   17650:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   17652:	88 81       	ld	r24, Y
   17654:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   17656:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   17658:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   1765a:	df 91       	pop	r29
   1765c:	cf 91       	pop	r28
   1765e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   17660:	62 30       	cpi	r22, 0x02	; 2
   17662:	51 f4       	brne	.+20     	; 0x17678 <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   17664:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
   17666:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   17668:	3c 91       	ld	r19, X
   1766a:	82 2f       	mov	r24, r18
   1766c:	80 95       	com	r24
   1766e:	83 23       	and	r24, r19
   17670:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   17672:	e8 81       	ld	r30, Y
   17674:	2e 2b       	or	r18, r30
   17676:	ef cf       	rjmp	.-34     	; 0x17656 <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   17678:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
   1767a:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   1767c:	ec 91       	ld	r30, X
   1767e:	2e 2b       	or	r18, r30
   17680:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   17682:	8f bf       	out	0x3f, r24	; 63
   17684:	ea cf       	rjmp	.-44     	; 0x1765a <pinMode+0x4c>

00017686 <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
   17686:	8f 92       	push	r8
   17688:	9f 92       	push	r9
   1768a:	af 92       	push	r10
   1768c:	bf 92       	push	r11
   1768e:	cf 92       	push	r12
   17690:	df 92       	push	r13
   17692:	ef 92       	push	r14
   17694:	ff 92       	push	r15
   17696:	6b 01       	movw	r12, r22
   17698:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
   1769a:	0e 94 c0 aa 	call	0x15580	; 0x15580 <micros>
   1769e:	4b 01       	movw	r8, r22
   176a0:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
   176a2:	c1 14       	cp	r12, r1
   176a4:	d1 04       	cpc	r13, r1
   176a6:	e1 04       	cpc	r14, r1
   176a8:	f1 04       	cpc	r15, r1
   176aa:	b9 f0       	breq	.+46     	; 0x176da <delay+0x54>
   176ac:	0e 94 c0 aa 	call	0x15580	; 0x15580 <micros>
   176b0:	68 19       	sub	r22, r8
   176b2:	79 09       	sbc	r23, r9
   176b4:	8a 09       	sbc	r24, r10
   176b6:	9b 09       	sbc	r25, r11
   176b8:	68 3e       	cpi	r22, 0xE8	; 232
   176ba:	73 40       	sbci	r23, 0x03	; 3
   176bc:	81 05       	cpc	r24, r1
   176be:	91 05       	cpc	r25, r1
   176c0:	80 f3       	brcs	.-32     	; 0x176a2 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:402
      ms--;
   176c2:	21 e0       	ldi	r18, 0x01	; 1
   176c4:	c2 1a       	sub	r12, r18
   176c6:	d1 08       	sbc	r13, r1
   176c8:	e1 08       	sbc	r14, r1
   176ca:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
   176cc:	88 ee       	ldi	r24, 0xE8	; 232
   176ce:	88 0e       	add	r8, r24
   176d0:	83 e0       	ldi	r24, 0x03	; 3
   176d2:	98 1e       	adc	r9, r24
   176d4:	a1 1c       	adc	r10, r1
   176d6:	b1 1c       	adc	r11, r1
   176d8:	e4 cf       	rjmp	.-56     	; 0x176a2 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:406
    }
  }
}
   176da:	ff 90       	pop	r15
   176dc:	ef 90       	pop	r14
   176de:	df 90       	pop	r13
   176e0:	cf 90       	pop	r12
   176e2:	bf 90       	pop	r11
   176e4:	af 90       	pop	r10
   176e6:	9f 90       	pop	r9
   176e8:	8f 90       	pop	r8
   176ea:	08 95       	ret

000176ec <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.77]>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.77():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:136
{
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
   176ec:	8f 92       	push	r8
   176ee:	9f 92       	push	r9
   176f0:	af 92       	push	r10
   176f2:	bf 92       	push	r11
   176f4:	cf 92       	push	r12
   176f6:	df 92       	push	r13
   176f8:	ef 92       	push	r14
   176fa:	ff 92       	push	r15
   176fc:	0f 93       	push	r16
   176fe:	1f 93       	push	r17
   17700:	cf 93       	push	r28
   17702:	5c 01       	movw	r10, r24
   17704:	6b 01       	movw	r12, r22
   17706:	7a 01       	movw	r14, r20
   17708:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:138
{
  w5500.init(w5500_cspin);
   1770a:	c0 91 db 0d 	lds	r28, 0x0DDB	; 0x800ddb <Ethernet+0xc>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:30
SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;

void W5500Class::init(uint8_t ss_pin)
{
  SPI_CS = ss_pin;
   1770e:	c0 93 80 0c 	sts	0x0C80, r28	; 0x800c80 <SPI_CS>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:32

  delay(1000);
   17712:	68 ee       	ldi	r22, 0xE8	; 232
   17714:	73 e0       	ldi	r23, 0x03	; 3
   17716:	80 e0       	ldi	r24, 0x00	; 0
   17718:	90 e0       	ldi	r25, 0x00	; 0
   1771a:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
initSS():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:340
private:
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
   1771e:	61 e0       	ldi	r22, 0x01	; 1
   17720:	8c 2f       	mov	r24, r28
   17722:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:34
  initSS();
  SPI.begin();
   17726:	0e 94 b5 63 	call	0xc76a	; 0xc76a <SPIClass::begin()>
readMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   1772a:	60 e0       	ldi	r22, 0x00	; 0
   1772c:	90 e0       	ldi	r25, 0x00	; 0
   1772e:	80 e0       	ldi	r24, 0x00	; 0
   17730:	0e 94 f1 5a 	call	0xb5e2	; 0xb5e2 <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv.isra.1():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:417
//  readPHYCFGR();
  return read(0x002E, 0x00);
}

void W5500Class::swReset() {
  writeMR( (readMR() | 0x80) );
   17734:	48 2f       	mov	r20, r24
   17736:	40 68       	ori	r20, 0x80	; 128
writeMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   17738:	64 e0       	ldi	r22, 0x04	; 4
   1773a:	90 e0       	ldi	r25, 0x00	; 0
   1773c:	80 e0       	ldi	r24, 0x00	; 0
   1773e:	0e 94 42 5b 	call	0xb684	; 0xb684 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   17742:	cc e0       	ldi	r28, 0x0C	; 12
   17744:	88 e0       	ldi	r24, 0x08	; 8
   17746:	88 2e       	mov	r8, r24
   17748:	91 2c       	mov	r9, r1
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:38
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
    uint8_t cntl_byte = (0x0C + (i<<5));
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
   1774a:	42 e0       	ldi	r20, 0x02	; 2
   1774c:	6c 2f       	mov	r22, r28
   1774e:	8e e1       	ldi	r24, 0x1E	; 30
   17750:	90 e0       	ldi	r25, 0x00	; 0
   17752:	0e 94 42 5b 	call	0xb684	; 0xb684 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:39
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
   17756:	42 e0       	ldi	r20, 0x02	; 2
   17758:	6c 2f       	mov	r22, r28
   1775a:	8f e1       	ldi	r24, 0x1F	; 31
   1775c:	90 e0       	ldi	r25, 0x00	; 0
   1775e:	0e 94 42 5b 	call	0xb684	; 0xb684 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   17762:	81 e0       	ldi	r24, 0x01	; 1
   17764:	88 1a       	sub	r8, r24
   17766:	91 08       	sbc	r9, r1
   17768:	c0 5e       	subi	r28, 0xE0	; 224
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:36

  delay(1000);
  initSS();
  SPI.begin();
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
   1776a:	81 14       	cp	r8, r1
   1776c:	91 04       	cpc	r9, r1
   1776e:	69 f7       	brne	.-38     	; 0x1774a <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.77]+0x5e>
writeSHAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:237
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
   17770:	26 e0       	ldi	r18, 0x06	; 6
   17772:	30 e0       	ldi	r19, 0x00	; 0
   17774:	44 ee       	ldi	r20, 0xE4	; 228
   17776:	5d e0       	ldi	r21, 0x0D	; 13
   17778:	64 e0       	ldi	r22, 0x04	; 4
   1777a:	89 e0       	ldi	r24, 0x09	; 9
   1777c:	90 e0       	ldi	r25, 0x00	; 0
   1777e:	0e 94 10 5b 	call	0xb620	; 0xb620 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   17782:	a5 01       	movw	r20, r10
   17784:	4e 5f       	subi	r20, 0xFE	; 254
   17786:	5f 4f       	sbci	r21, 0xFF	; 255
writeSIPR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:238
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
   17788:	24 e0       	ldi	r18, 0x04	; 4
   1778a:	30 e0       	ldi	r19, 0x00	; 0
   1778c:	64 e0       	ldi	r22, 0x04	; 4
   1778e:	8f e0       	ldi	r24, 0x0F	; 15
   17790:	90 e0       	ldi	r25, 0x00	; 0
   17792:	0e 94 10 5b 	call	0xb620	; 0xb620 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40
   17796:	a7 01       	movw	r20, r14
   17798:	4e 5f       	subi	r20, 0xFE	; 254
   1779a:	5f 4f       	sbci	r21, 0xFF	; 255
writeGAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:235
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
   1779c:	24 e0       	ldi	r18, 0x04	; 4
   1779e:	30 e0       	ldi	r19, 0x00	; 0
   177a0:	64 e0       	ldi	r22, 0x04	; 4
   177a2:	81 e0       	ldi	r24, 0x01	; 1
   177a4:	90 e0       	ldi	r25, 0x00	; 0
   177a6:	0e 94 10 5b 	call	0xb620	; 0xb620 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40
   177aa:	a8 01       	movw	r20, r16
   177ac:	4e 5f       	subi	r20, 0xFE	; 254
   177ae:	5f 4f       	sbci	r21, 0xFF	; 255
writeSUBR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:236
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
   177b0:	24 e0       	ldi	r18, 0x04	; 4
   177b2:	30 e0       	ldi	r19, 0x00	; 0
   177b4:	64 e0       	ldi	r22, 0x04	; 4
   177b6:	85 e0       	ldi	r24, 0x05	; 5
   177b8:	90 e0       	ldi	r25, 0x00	; 0
   177ba:	0e 94 10 5b 	call	0xb620	; 0xb620 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   177be:	f6 01       	movw	r30, r12
   177c0:	82 81       	ldd	r24, Z+2	; 0x02
   177c2:	93 81       	ldd	r25, Z+3	; 0x03
   177c4:	a4 81       	ldd	r26, Z+4	; 0x04
   177c6:	b5 81       	ldd	r27, Z+5	; 0x05
   177c8:	80 93 d1 0d 	sts	0x0DD1, r24	; 0x800dd1 <Ethernet+0x2>
   177cc:	90 93 d2 0d 	sts	0x0DD2, r25	; 0x800dd2 <Ethernet+0x3>
   177d0:	a0 93 d3 0d 	sts	0x0DD3, r26	; 0x800dd3 <Ethernet+0x4>
   177d4:	b0 93 d4 0d 	sts	0x0DD4, r27	; 0x800dd4 <Ethernet+0x5>
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.77():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:144
  w5500.setMACAddress(mac);
  w5500.setIPAddress(local_ip.raw_address());
  w5500.setGatewayIp(gateway.raw_address());
  w5500.setSubnetMask(subnet.raw_address());
  _dnsServerAddress = dns_server;
}
   177d8:	cf 91       	pop	r28
   177da:	1f 91       	pop	r17
   177dc:	0f 91       	pop	r16
   177de:	ff 90       	pop	r15
   177e0:	ef 90       	pop	r14
   177e2:	df 90       	pop	r13
   177e4:	cf 90       	pop	r12
   177e6:	bf 90       	pop	r11
   177e8:	af 90       	pop	r10
   177ea:	9f 90       	pop	r9
   177ec:	8f 90       	pop	r8
   177ee:	08 95       	ret

000177f0 <LCDWIKI_KBV::reset() [clone .constprop.54]>:
_ZN11LCDWIKI_KBV5resetEv.constprop.54():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:250
void LCDWIKI_KBV::reset(void)
{
//	have_reset = 1;
//    setWriteDir();
//Set all control bits to idle state
    CS_IDLE;
   177f0:	e0 91 b2 0f 	lds	r30, 0x0FB2	; 0x800fb2 <my_lcd+0x2e>
   177f4:	f0 91 b3 0f 	lds	r31, 0x0FB3	; 0x800fb3 <my_lcd+0x2f>
   177f8:	80 81       	ld	r24, Z
   177fa:	90 91 ba 0f 	lds	r25, 0x0FBA	; 0x800fba <my_lcd+0x36>
   177fe:	89 2b       	or	r24, r25
   17800:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:251
    RD_IDLE;
   17802:	e0 91 b8 0f 	lds	r30, 0x0FB8	; 0x800fb8 <my_lcd+0x34>
   17806:	f0 91 b9 0f 	lds	r31, 0x0FB9	; 0x800fb9 <my_lcd+0x35>
   1780a:	80 81       	ld	r24, Z
   1780c:	90 91 bd 0f 	lds	r25, 0x0FBD	; 0x800fbd <my_lcd+0x39>
   17810:	89 2b       	or	r24, r25
   17812:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:252
    WR_IDLE;
   17814:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   17818:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   1781c:	80 81       	ld	r24, Z
   1781e:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   17822:	89 2b       	or	r24, r25
   17824:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:262
  digitalWrite(5, HIGH);
//  delay(100);
  //digitalWrite(5, LOW);
 // delay(100);
#else
  if(_reset) 
   17826:	80 91 c2 0f 	lds	r24, 0x0FC2	; 0x800fc2 <my_lcd+0x3e>
   1782a:	88 23       	and	r24, r24
   1782c:	71 f0       	breq	.+28     	; 0x1784a <LCDWIKI_KBV::reset() [clone .constprop.54]+0x5a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:264
  {
    digitalWrite(_reset, LOW);
   1782e:	60 e0       	ldi	r22, 0x00	; 0
   17830:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:265
    delay(2);
   17834:	62 e0       	ldi	r22, 0x02	; 2
   17836:	70 e0       	ldi	r23, 0x00	; 0
   17838:	80 e0       	ldi	r24, 0x00	; 0
   1783a:	90 e0       	ldi	r25, 0x00	; 0
   1783c:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:266
    digitalWrite(_reset, HIGH);
   17840:	61 e0       	ldi	r22, 0x01	; 1
   17842:	80 91 c2 0f 	lds	r24, 0x0FC2	; 0x800fc2 <my_lcd+0x3e>
   17846:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:272
//	delay(100);
	//digitalWrite(_reset, LOW);
	//delay(100);
  }
#endif
  CS_ACTIVE;
   1784a:	e0 91 b2 0f 	lds	r30, 0x0FB2	; 0x800fb2 <my_lcd+0x2e>
   1784e:	f0 91 b3 0f 	lds	r31, 0x0FB3	; 0x800fb3 <my_lcd+0x2f>
   17852:	80 81       	ld	r24, Z
   17854:	90 91 be 0f 	lds	r25, 0x0FBE	; 0x800fbe <my_lcd+0x3a>
   17858:	89 23       	and	r24, r25
   1785a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:273
  CD_COMMAND;
   1785c:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   17860:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   17864:	80 81       	ld	r24, Z
   17866:	90 91 bf 0f 	lds	r25, 0x0FBF	; 0x800fbf <my_lcd+0x3b>
   1786a:	89 23       	and	r24, r25
   1786c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:274
  write8(0x00);
   1786e:	12 b8       	out	0x02, r1	; 2
   17870:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   17874:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   17878:	80 81       	ld	r24, Z
   1787a:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   1787e:	89 23       	and	r24, r25
   17880:	80 83       	st	Z, r24
   17882:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   17886:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   1788a:	80 81       	ld	r24, Z
   1788c:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   17890:	89 2b       	or	r24, r25
   17892:	80 83       	st	Z, r24
   17894:	83 e0       	ldi	r24, 0x03	; 3
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:277
  for(uint8_t i=0; i<3; i++)
  {
  	WR_STROBE; // Three extra 0x00s
   17896:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   1789a:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   1789e:	90 81       	ld	r25, Z
   178a0:	20 91 c0 0f 	lds	r18, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   178a4:	92 23       	and	r25, r18
   178a6:	90 83       	st	Z, r25
   178a8:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   178ac:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   178b0:	90 81       	ld	r25, Z
   178b2:	20 91 bc 0f 	lds	r18, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   178b6:	92 2b       	or	r25, r18
   178b8:	90 83       	st	Z, r25
   178ba:	81 50       	subi	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:275
  }
#endif
  CS_ACTIVE;
  CD_COMMAND;
  write8(0x00);
  for(uint8_t i=0; i<3; i++)
   178bc:	61 f7       	brne	.-40     	; 0x17896 <LCDWIKI_KBV::reset() [clone .constprop.54]+0xa6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:279
  {
  	WR_STROBE; // Three extra 0x00s
  }
  CS_IDLE;
   178be:	e0 91 b2 0f 	lds	r30, 0x0FB2	; 0x800fb2 <my_lcd+0x2e>
   178c2:	f0 91 b3 0f 	lds	r31, 0x0FB3	; 0x800fb3 <my_lcd+0x2f>
   178c6:	80 81       	ld	r24, Z
   178c8:	90 91 ba 0f 	lds	r25, 0x0FBA	; 0x800fba <my_lcd+0x36>
   178cc:	89 2b       	or	r24, r25
   178ce:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:280
}
   178d0:	08 95       	ret

000178d2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.52]>:
_ZN11LCDWIKI_KBV8Read_RegEja.constprop.52():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:491
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

//read value from lcd register 
uint16_t LCDWIKI_KBV::Read_Reg(uint16_t reg, int8_t index)
   178d2:	cf 93       	push	r28
   178d4:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:499
    uint8_t low;
//  if (!have_reset)
 // {
 //     reset();
//  }
	CS_ACTIVE;
   178d6:	e0 91 b2 0f 	lds	r30, 0x0FB2	; 0x800fb2 <my_lcd+0x2e>
   178da:	f0 91 b3 0f 	lds	r31, 0x0FB3	; 0x800fb3 <my_lcd+0x2f>
   178de:	90 81       	ld	r25, Z
   178e0:	20 91 be 0f 	lds	r18, 0x0FBE	; 0x800fbe <my_lcd+0x3a>
   178e4:	92 23       	and	r25, r18
   178e6:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:500
    writeCmd16(reg);
   178e8:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   178ec:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   178f0:	90 81       	ld	r25, Z
   178f2:	20 91 bf 0f 	lds	r18, 0x0FBF	; 0x800fbf <my_lcd+0x3b>
   178f6:	92 23       	and	r25, r18
   178f8:	90 83       	st	Z, r25
   178fa:	12 b8       	out	0x02, r1	; 2
   178fc:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   17900:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   17904:	90 81       	ld	r25, Z
   17906:	20 91 c0 0f 	lds	r18, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   1790a:	92 23       	and	r25, r18
   1790c:	90 83       	st	Z, r25
   1790e:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   17912:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   17916:	90 81       	ld	r25, Z
   17918:	20 91 bc 0f 	lds	r18, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   1791c:	92 2b       	or	r25, r18
   1791e:	90 83       	st	Z, r25
   17920:	82 b9       	out	0x02, r24	; 2
   17922:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   17926:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   1792a:	80 81       	ld	r24, Z
   1792c:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <my_lcd+0x3c>
   17930:	89 23       	and	r24, r25
   17932:	80 83       	st	Z, r24
   17934:	e0 91 b6 0f 	lds	r30, 0x0FB6	; 0x800fb6 <my_lcd+0x32>
   17938:	f0 91 b7 0f 	lds	r31, 0x0FB7	; 0x800fb7 <my_lcd+0x33>
   1793c:	80 81       	ld	r24, Z
   1793e:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x38>
   17942:	89 2b       	or	r24, r25
   17944:	80 83       	st	Z, r24
   17946:	e0 91 b4 0f 	lds	r30, 0x0FB4	; 0x800fb4 <my_lcd+0x30>
   1794a:	f0 91 b5 0f 	lds	r31, 0x0FB5	; 0x800fb5 <my_lcd+0x31>
   1794e:	80 81       	ld	r24, Z
   17950:	90 91 bb 0f 	lds	r25, 0x0FBB	; 0x800fbb <my_lcd+0x37>
   17954:	89 2b       	or	r24, r25
   17956:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:501
    setReadDir();
   17958:	81 b1       	in	r24, 0x01	; 1
   1795a:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:502
    delay(1); 
   1795c:	61 e0       	ldi	r22, 0x01	; 1
   1795e:	70 e0       	ldi	r23, 0x00	; 0
   17960:	80 e0       	ldi	r24, 0x00	; 0
   17962:	90 e0       	ldi	r25, 0x00	; 0
   17964:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:508
	do 
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
   17968:	e0 91 b8 0f 	lds	r30, 0x0FB8	; 0x800fb8 <my_lcd+0x34>
   1796c:	f0 91 b9 0f 	lds	r31, 0x0FB9	; 0x800fb9 <my_lcd+0x35>
   17970:	80 81       	ld	r24, Z
   17972:	90 91 c1 0f 	lds	r25, 0x0FC1	; 0x800fc1 <my_lcd+0x3d>
   17976:	89 23       	and	r24, r25
   17978:	80 83       	st	Z, r24
   1797a:	20 b1       	in	r18, 0x00	; 0
   1797c:	e0 91 b8 0f 	lds	r30, 0x0FB8	; 0x800fb8 <my_lcd+0x34>
   17980:	f0 91 b9 0f 	lds	r31, 0x0FB9	; 0x800fb9 <my_lcd+0x35>
   17984:	90 81       	ld	r25, Z
   17986:	80 91 bd 0f 	lds	r24, 0x0FBD	; 0x800fbd <my_lcd+0x39>
   1798a:	98 2b       	or	r25, r24
   1798c:	90 83       	st	Z, r25
   1798e:	e0 91 b8 0f 	lds	r30, 0x0FB8	; 0x800fb8 <my_lcd+0x34>
   17992:	f0 91 b9 0f 	lds	r31, 0x0FB9	; 0x800fb9 <my_lcd+0x35>
   17996:	90 81       	ld	r25, Z
   17998:	80 91 c1 0f 	lds	r24, 0x0FC1	; 0x800fc1 <my_lcd+0x3d>
   1799c:	98 23       	and	r25, r24
   1799e:	90 83       	st	Z, r25
   179a0:	80 b1       	in	r24, 0x00	; 0
   179a2:	e0 91 b8 0f 	lds	r30, 0x0FB8	; 0x800fb8 <my_lcd+0x34>
   179a6:	f0 91 b9 0f 	lds	r31, 0x0FB9	; 0x800fb9 <my_lcd+0x35>
   179aa:	90 81       	ld	r25, Z
   179ac:	30 91 bd 0f 	lds	r19, 0x0FBD	; 0x800fbd <my_lcd+0x39>
   179b0:	93 2b       	or	r25, r19
   179b2:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	}while (--index >= 0);   
   179b4:	c1 30       	cpi	r28, 0x01	; 1
   179b6:	79 f0       	breq	.+30     	; 0x179d6 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.52]+0x104>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:511
//    RD_IDLE;
    CS_IDLE;
   179b8:	e0 91 b2 0f 	lds	r30, 0x0FB2	; 0x800fb2 <my_lcd+0x2e>
   179bc:	f0 91 b3 0f 	lds	r31, 0x0FB3	; 0x800fb3 <my_lcd+0x2f>
   179c0:	90 81       	ld	r25, Z
   179c2:	30 91 ba 0f 	lds	r19, 0x0FBA	; 0x800fba <my_lcd+0x36>
   179c6:	93 2b       	or	r25, r19
   179c8:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:512
    setWriteDir();
   179ca:	91 b1       	in	r25, 0x01	; 1
   179cc:	9f ef       	ldi	r25, 0xFF	; 255
   179ce:	91 b9       	out	0x01, r25	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:514
    return ret;
}
   179d0:	92 2f       	mov	r25, r18
   179d2:	cf 91       	pop	r28
   179d4:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
	}while (--index >= 0);   
   179d6:	c0 e0       	ldi	r28, 0x00	; 0
   179d8:	c7 cf       	rjmp	.-114    	; 0x17968 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.52]+0x96>

000179da <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
   179da:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
   179dc:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
   179de:	60 91 4e 12 	lds	r22, 0x124E	; 0x80124e <timer0_millis>
   179e2:	70 91 4f 12 	lds	r23, 0x124F	; 0x80124f <timer0_millis+0x1>
   179e6:	80 91 50 12 	lds	r24, 0x1250	; 0x801250 <timer0_millis+0x2>
   179ea:	90 91 51 12 	lds	r25, 0x1251	; 0x801251 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
   179ee:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
   179f0:	08 95       	ret

000179f2 <PubSubClient::readByte(unsigned char*) [clone .constprop.159]>:
_ZN12PubSubClient8readByteEPh.constprop.159():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:209
    }
    return true;
}

// reads a byte into result
boolean PubSubClient::readByte(uint8_t * result) {
   179f2:	cf 92       	push	r12
   179f4:	df 92       	push	r13
   179f6:	ef 92       	push	r14
   179f8:	ff 92       	push	r15
   179fa:	cf 93       	push	r28
   179fc:	df 93       	push	r29
   179fe:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:210
   uint32_t previousMillis = millis();
   17a00:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   17a04:	6b 01       	movw	r12, r22
   17a06:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:211
   while(!_client->available()) {
   17a08:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <mqtt_client>
   17a0c:	90 91 fb 0f 	lds	r25, 0x0FFB	; 0x800ffb <mqtt_client+0x1>
   17a10:	dc 01       	movw	r26, r24
   17a12:	ed 91       	ld	r30, X+
   17a14:	fc 91       	ld	r31, X
   17a16:	00 84       	ldd	r0, Z+8	; 0x08
   17a18:	f1 85       	ldd	r31, Z+9	; 0x09
   17a1a:	e0 2d       	mov	r30, r0
   17a1c:	19 95       	eicall
   17a1e:	89 2b       	or	r24, r25
   17a20:	69 f4       	brne	.+26     	; 0x17a3c <PubSubClient::readByte(unsigned char*) [clone .constprop.159]+0x4a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:212
     uint32_t currentMillis = millis();
   17a22:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:213
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 10)){
   17a26:	6c 19       	sub	r22, r12
   17a28:	7d 09       	sbc	r23, r13
   17a2a:	8e 09       	sbc	r24, r14
   17a2c:	9f 09       	sbc	r25, r15
   17a2e:	62 33       	cpi	r22, 0x32	; 50
   17a30:	71 05       	cpc	r23, r1
   17a32:	81 05       	cpc	r24, r1
   17a34:	91 05       	cpc	r25, r1
   17a36:	40 f3       	brcs	.-48     	; 0x17a08 <PubSubClient::readByte(unsigned char*) [clone .constprop.159]+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:214
       return false;
   17a38:	80 e0       	ldi	r24, 0x00	; 0
   17a3a:	0d c0       	rjmp	.+26     	; 0x17a56 <PubSubClient::readByte(unsigned char*) [clone .constprop.159]+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:217
     }
   }
   *result = _client->read();
   17a3c:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <mqtt_client>
   17a40:	90 91 fb 0f 	lds	r25, 0x0FFB	; 0x800ffb <mqtt_client+0x1>
   17a44:	dc 01       	movw	r26, r24
   17a46:	ed 91       	ld	r30, X+
   17a48:	fc 91       	ld	r31, X
   17a4a:	02 84       	ldd	r0, Z+10	; 0x0a
   17a4c:	f3 85       	ldd	r31, Z+11	; 0x0b
   17a4e:	e0 2d       	mov	r30, r0
   17a50:	19 95       	eicall
   17a52:	88 83       	st	Y, r24
   17a54:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:219
   return true;
}
   17a56:	df 91       	pop	r29
   17a58:	cf 91       	pop	r28
   17a5a:	ff 90       	pop	r15
   17a5c:	ef 90       	pop	r14
   17a5e:	df 90       	pop	r13
   17a60:	cf 90       	pop	r12
   17a62:	08 95       	ret

00017a64 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]>:
_ZN12PubSubClient10readPacketEPh.constprop.157():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:232
    return true;
  }
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   17a64:	3f 92       	push	r3
   17a66:	4f 92       	push	r4
   17a68:	5f 92       	push	r5
   17a6a:	6f 92       	push	r6
   17a6c:	7f 92       	push	r7
   17a6e:	8f 92       	push	r8
   17a70:	9f 92       	push	r9
   17a72:	af 92       	push	r10
   17a74:	bf 92       	push	r11
   17a76:	cf 92       	push	r12
   17a78:	df 92       	push	r13
   17a7a:	ef 92       	push	r14
   17a7c:	ff 92       	push	r15
   17a7e:	0f 93       	push	r16
   17a80:	1f 93       	push	r17
   17a82:	cf 93       	push	r28
   17a84:	df 93       	push	r29
   17a86:	1f 92       	push	r1
   17a88:	cd b7       	in	r28, 0x3d	; 61
   17a8a:	de b7       	in	r29, 0x3e	; 62
   17a8c:	5c 01       	movw	r10, r24
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   17a8e:	8c ef       	ldi	r24, 0xFC	; 252
   17a90:	9f e0       	ldi	r25, 0x0F	; 15
   17a92:	0e 94 f9 bc 	call	0x179f2	; 0x179f2 <PubSubClient::readByte(unsigned char*) [clone .constprop.159]>
   17a96:	81 11       	cpse	r24, r1
   17a98:	16 c0       	rjmp	.+44     	; 0x17ac6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x62>
_ZN12PubSubClient10readPacketEPh.constprop.157():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:234
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
   17a9a:	10 e0       	ldi	r17, 0x00	; 0
   17a9c:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:280
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   17a9e:	c8 01       	movw	r24, r16
   17aa0:	0f 90       	pop	r0
   17aa2:	df 91       	pop	r29
   17aa4:	cf 91       	pop	r28
   17aa6:	1f 91       	pop	r17
   17aa8:	0f 91       	pop	r16
   17aaa:	ff 90       	pop	r15
   17aac:	ef 90       	pop	r14
   17aae:	df 90       	pop	r13
   17ab0:	cf 90       	pop	r12
   17ab2:	bf 90       	pop	r11
   17ab4:	af 90       	pop	r10
   17ab6:	9f 90       	pop	r9
   17ab8:	8f 90       	pop	r8
   17aba:	7f 90       	pop	r7
   17abc:	6f 90       	pop	r6
   17abe:	5f 90       	pop	r5
   17ac0:	4f 90       	pop	r4
   17ac2:	3f 90       	pop	r3
   17ac4:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:235
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   17ac6:	30 90 fc 0f 	lds	r3, 0x0FFC	; 0x800ffc <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:238
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
   17aca:	19 82       	std	Y+1, r1	; 0x01
   17acc:	3d ef       	ldi	r19, 0xFD	; 253
   17ace:	83 2e       	mov	r8, r19
   17ad0:	3f e0       	ldi	r19, 0x0F	; 15
   17ad2:	93 2e       	mov	r9, r19
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    *index = current_index + 1;
   17ad4:	ee 24       	eor	r14, r14
   17ad6:	e3 94       	inc	r14
   17ad8:	f1 2c       	mov	r15, r1
_ZN12PubSubClient10readPacketEPh.constprop.157():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:237
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
   17ada:	d1 2c       	mov	r13, r1
   17adc:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:236

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
   17ade:	41 2c       	mov	r4, r1
   17ae0:	51 2c       	mov	r5, r1
   17ae2:	32 01       	movw	r6, r4
   17ae4:	43 94       	inc	r4
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:243
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
   17ae6:	ce 01       	movw	r24, r28
   17ae8:	01 96       	adiw	r24, 0x01	; 1
   17aea:	0e 94 f9 bc 	call	0x179f2	; 0x179f2 <PubSubClient::readByte(unsigned char*) [clone .constprop.159]>
   17aee:	88 23       	and	r24, r24
   17af0:	a1 f2       	breq	.-88     	; 0x17a9a <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
        buffer[len++] = digit;
   17af2:	87 01       	movw	r16, r14
   17af4:	0f 5f       	subi	r16, 0xFF	; 255
   17af6:	1f 4f       	sbci	r17, 0xFF	; 255
   17af8:	89 81       	ldd	r24, Y+1	; 0x01
   17afa:	d4 01       	movw	r26, r8
   17afc:	8d 93       	st	X+, r24
   17afe:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:245
        length += (digit & 127) * multiplier;
   17b00:	28 2f       	mov	r18, r24
   17b02:	2f 77       	andi	r18, 0x7F	; 127
   17b04:	30 e0       	ldi	r19, 0x00	; 0
   17b06:	24 9d       	mul	r18, r4
   17b08:	a0 01       	movw	r20, r0
   17b0a:	25 9d       	mul	r18, r5
   17b0c:	50 0d       	add	r21, r0
   17b0e:	34 9d       	mul	r19, r4
   17b10:	50 0d       	add	r21, r0
   17b12:	11 24       	eor	r1, r1
   17b14:	c4 0e       	add	r12, r20
   17b16:	d5 1e       	adc	r13, r21
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:246
        multiplier *= 128;
   17b18:	27 e0       	ldi	r18, 0x07	; 7
   17b1a:	44 0c       	add	r4, r4
   17b1c:	55 1c       	adc	r5, r5
   17b1e:	66 1c       	adc	r6, r6
   17b20:	77 1c       	adc	r7, r7
   17b22:	2a 95       	dec	r18
   17b24:	d1 f7       	brne	.-12     	; 0x17b1a <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0xb6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:247
    } while ((digit & 128) != 0);
   17b26:	87 fd       	sbrc	r24, 7
   17b28:	31 c0       	rjmp	.+98     	; 0x17b8c <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x128>
   17b2a:	b3 2d       	mov	r27, r3
   17b2c:	b0 7f       	andi	r27, 0xF0	; 240
   17b2e:	3b 2e       	mov	r3, r27
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:248
    *lengthLength = len-1;
   17b30:	8f ef       	ldi	r24, 0xFF	; 255
   17b32:	80 0f       	add	r24, r16
   17b34:	f5 01       	movw	r30, r10
   17b36:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:250

    if (isPublish) {
   17b38:	f0 e3       	ldi	r31, 0x30	; 48
   17b3a:	bf 13       	cpse	r27, r31
   17b3c:	29 c0       	rjmp	.+82     	; 0x17b90 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x12c>
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   17b3e:	c8 01       	movw	r24, r16
   17b40:	84 50       	subi	r24, 0x04	; 4
   17b42:	90 4f       	sbci	r25, 0xF0	; 240
   17b44:	0e 94 f9 bc 	call	0x179f2	; 0x179f2 <PubSubClient::readByte(unsigned char*) [clone .constprop.159]>
   17b48:	88 23       	and	r24, r24
   17b4a:	09 f4       	brne	.+2      	; 0x17b4e <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0xea>
   17b4c:	a6 cf       	rjmp	.-180    	; 0x17a9a <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x36>
   17b4e:	c7 01       	movw	r24, r14
   17b50:	82 50       	subi	r24, 0x02	; 2
   17b52:	90 4f       	sbci	r25, 0xF0	; 240
   17b54:	0e 94 f9 bc 	call	0x179f2	; 0x179f2 <PubSubClient::readByte(unsigned char*) [clone .constprop.159]>
   17b58:	88 23       	and	r24, r24
   17b5a:	09 f4       	brne	.+2      	; 0x17b5e <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0xfa>
   17b5c:	9e cf       	rjmp	.-196    	; 0x17a9a <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
    *index = current_index + 1;
   17b5e:	0e 5f       	subi	r16, 0xFE	; 254
   17b60:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN12PubSubClient10readPacketEPh.constprop.157():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:254

    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   17b62:	d5 01       	movw	r26, r10
   17b64:	ec 91       	ld	r30, X
   17b66:	f0 e0       	ldi	r31, 0x00	; 0
   17b68:	e6 50       	subi	r30, 0x06	; 6
   17b6a:	f0 4f       	sbci	r31, 0xF0	; 240
   17b6c:	e3 80       	ldd	r14, Z+3	; 0x03
   17b6e:	f1 2c       	mov	r15, r1
   17b70:	fe 2c       	mov	r15, r14
   17b72:	ee 24       	eor	r14, r14
   17b74:	84 81       	ldd	r24, Z+4	; 0x04
   17b76:	e8 0e       	add	r14, r24
   17b78:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:256
        start = 2;
        if (buffer[0]&MQTTQOS1) {
   17b7a:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <mqtt_client+0x2>
   17b7e:	81 ff       	sbrs	r24, 1
   17b80:	03 c0       	rjmp	.+6      	; 0x17b88 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x124>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:258
            // skip message id
            skip += 2;
   17b82:	b2 e0       	ldi	r27, 0x02	; 2
   17b84:	eb 0e       	add	r14, r27
   17b86:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:255
    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   17b88:	92 e0       	ldi	r25, 0x02	; 2
   17b8a:	05 c0       	rjmp	.+10     	; 0x17b96 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x132>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
        buffer[len++] = digit;
   17b8c:	78 01       	movw	r14, r16
   17b8e:	ab cf       	rjmp	.-170    	; 0x17ae6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:240
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   17b90:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:239
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
   17b92:	f1 2c       	mov	r15, r1
   17b94:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   17b96:	69 2e       	mov	r6, r25
   17b98:	71 2c       	mov	r7, r1
   17b9a:	60 1a       	sub	r6, r16
   17b9c:	71 0a       	sbc	r7, r17
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
        if(!readByte(&digit)) return 0;
        if (this->stream) {
            if (isPublish && len-*lengthLength-2>skip) {
   17b9e:	8e ef       	ldi	r24, 0xFE	; 254
   17ba0:	88 2e       	mov	r8, r24
   17ba2:	99 24       	eor	r9, r9
   17ba4:	9a 94       	dec	r9
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   17ba6:	c3 01       	movw	r24, r6
   17ba8:	80 0f       	add	r24, r16
   17baa:	91 1f       	adc	r25, r17
   17bac:	8c 15       	cp	r24, r12
   17bae:	9d 05       	cpc	r25, r13
   17bb0:	78 f5       	brcc	.+94     	; 0x17c10 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:263
        if(!readByte(&digit)) return 0;
   17bb2:	ce 01       	movw	r24, r28
   17bb4:	01 96       	adiw	r24, 0x01	; 1
   17bb6:	0e 94 f9 bc 	call	0x179f2	; 0x179f2 <PubSubClient::readByte(unsigned char*) [clone .constprop.159]>
   17bba:	88 23       	and	r24, r24
   17bbc:	09 f4       	brne	.+2      	; 0x17bc0 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x15c>
   17bbe:	6d cf       	rjmp	.-294    	; 0x17a9a <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:264
        if (this->stream) {
   17bc0:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <mqtt_client+0x219>
   17bc4:	90 91 14 12 	lds	r25, 0x1214	; 0x801214 <mqtt_client+0x21a>
   17bc8:	00 97       	sbiw	r24, 0x00	; 0
   17bca:	b1 f0       	breq	.+44     	; 0x17bf8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
            if (isPublish && len-*lengthLength-2>skip) {
   17bcc:	e0 e3       	ldi	r30, 0x30	; 48
   17bce:	3e 12       	cpse	r3, r30
   17bd0:	13 c0       	rjmp	.+38     	; 0x17bf8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x194>
   17bd2:	d5 01       	movw	r26, r10
   17bd4:	2c 91       	ld	r18, X
   17bd6:	f4 01       	movw	r30, r8
   17bd8:	e2 1b       	sub	r30, r18
   17bda:	f1 09       	sbc	r31, r1
   17bdc:	9f 01       	movw	r18, r30
   17bde:	20 0f       	add	r18, r16
   17be0:	31 1f       	adc	r19, r17
   17be2:	e2 16       	cp	r14, r18
   17be4:	f3 06       	cpc	r15, r19
   17be6:	40 f4       	brcc	.+16     	; 0x17bf8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:266
                this->stream->write(digit);
   17be8:	dc 01       	movw	r26, r24
   17bea:	ed 91       	ld	r30, X+
   17bec:	fc 91       	ld	r31, X
   17bee:	01 90       	ld	r0, Z+
   17bf0:	f0 81       	ld	r31, Z
   17bf2:	e0 2d       	mov	r30, r0
   17bf4:	69 81       	ldd	r22, Y+1	; 0x01
   17bf6:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:269
            }
        }
        if (len < MQTT_MAX_PACKET_SIZE) {
   17bf8:	01 15       	cp	r16, r1
   17bfa:	b2 e0       	ldi	r27, 0x02	; 2
   17bfc:	1b 07       	cpc	r17, r27
   17bfe:	28 f4       	brcc	.+10     	; 0x17c0a <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x1a6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:270
            buffer[len] = digit;
   17c00:	89 81       	ldd	r24, Y+1	; 0x01
   17c02:	f8 01       	movw	r30, r16
   17c04:	e6 50       	subi	r30, 0x06	; 6
   17c06:	f0 4f       	sbci	r31, 0xF0	; 240
   17c08:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:272
        }
        len++;
   17c0a:	0f 5f       	subi	r16, 0xFF	; 255
   17c0c:	1f 4f       	sbci	r17, 0xFF	; 255
   17c0e:	cb cf       	rjmp	.-106    	; 0x17ba6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x142>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:275
    }

    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   17c10:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <mqtt_client+0x219>
   17c14:	90 91 14 12 	lds	r25, 0x1214	; 0x801214 <mqtt_client+0x21a>
   17c18:	89 2b       	or	r24, r25
   17c1a:	09 f0       	breq	.+2      	; 0x17c1e <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x1ba>
   17c1c:	40 cf       	rjmp	.-384    	; 0x17a9e <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x3a>
   17c1e:	01 30       	cpi	r16, 0x01	; 1
   17c20:	e2 e0       	ldi	r30, 0x02	; 2
   17c22:	1e 07       	cpc	r17, r30
   17c24:	08 f0       	brcs	.+2      	; 0x17c28 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x1c4>
   17c26:	39 cf       	rjmp	.-398    	; 0x17a9a <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x36>
   17c28:	3a cf       	rjmp	.-396    	; 0x17a9e <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]+0x3a>

00017c2a <PubSubClient::loop() [clone .constprop.86]>:
_ZN12PubSubClient4loopEv.constprop.86():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:282
    }

    return len;
}

boolean PubSubClient::loop() {
   17c2a:	3f 92       	push	r3
   17c2c:	4f 92       	push	r4
   17c2e:	5f 92       	push	r5
   17c30:	6f 92       	push	r6
   17c32:	7f 92       	push	r7
   17c34:	8f 92       	push	r8
   17c36:	9f 92       	push	r9
   17c38:	af 92       	push	r10
   17c3a:	bf 92       	push	r11
   17c3c:	cf 92       	push	r12
   17c3e:	df 92       	push	r13
   17c40:	ef 92       	push	r14
   17c42:	ff 92       	push	r15
   17c44:	0f 93       	push	r16
   17c46:	1f 93       	push	r17
   17c48:	cf 93       	push	r28
   17c4a:	df 93       	push	r29
   17c4c:	1f 92       	push	r1
   17c4e:	cd b7       	in	r28, 0x3d	; 61
   17c50:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   17c52:	4d b6       	in	r4, 0x3d	; 61
   17c54:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:283

    return len;
}

boolean PubSubClient::loop() {
    if (connected()) {
   17c56:	8a ef       	ldi	r24, 0xFA	; 250
   17c58:	9f e0       	ldi	r25, 0x0F	; 15
   17c5a:	0e 94 7d 52 	call	0xa4fa	; 0xa4fa <PubSubClient::connected()>
   17c5e:	98 2e       	mov	r9, r24
   17c60:	88 23       	and	r24, r24
   17c62:	09 f4       	brne	.+2      	; 0x17c66 <PubSubClient::loop() [clone .constprop.86]+0x3c>
   17c64:	45 c0       	rjmp	.+138    	; 0x17cf0 <PubSubClient::loop() [clone .constprop.86]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:284
        unsigned long t = millis();
   17c66:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   17c6a:	6b 01       	movw	r12, r22
   17c6c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:285
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   17c6e:	80 91 02 12 	lds	r24, 0x1202	; 0x801202 <mqtt_client+0x208>
   17c72:	90 91 03 12 	lds	r25, 0x1203	; 0x801203 <mqtt_client+0x209>
   17c76:	a0 91 04 12 	lds	r26, 0x1204	; 0x801204 <mqtt_client+0x20a>
   17c7a:	b0 91 05 12 	lds	r27, 0x1205	; 0x801205 <mqtt_client+0x20b>
   17c7e:	a7 01       	movw	r20, r14
   17c80:	96 01       	movw	r18, r12
   17c82:	28 1b       	sub	r18, r24
   17c84:	39 0b       	sbc	r19, r25
   17c86:	4a 0b       	sbc	r20, r26
   17c88:	5b 0b       	sbc	r21, r27
   17c8a:	da 01       	movw	r26, r20
   17c8c:	c9 01       	movw	r24, r18
   17c8e:	89 39       	cpi	r24, 0x99	; 153
   17c90:	9a 43       	sbci	r25, 0x3A	; 58
   17c92:	a1 05       	cpc	r26, r1
   17c94:	b1 05       	cpc	r27, r1
   17c96:	b0 f4       	brcc	.+44     	; 0x17cc4 <PubSubClient::loop() [clone .constprop.86]+0x9a>
   17c98:	80 91 fe 11 	lds	r24, 0x11FE	; 0x8011fe <mqtt_client+0x204>
   17c9c:	90 91 ff 11 	lds	r25, 0x11FF	; 0x8011ff <mqtt_client+0x205>
   17ca0:	a0 91 00 12 	lds	r26, 0x1200	; 0x801200 <mqtt_client+0x206>
   17ca4:	b0 91 01 12 	lds	r27, 0x1201	; 0x801201 <mqtt_client+0x207>
   17ca8:	a7 01       	movw	r20, r14
   17caa:	96 01       	movw	r18, r12
   17cac:	28 1b       	sub	r18, r24
   17cae:	39 0b       	sbc	r19, r25
   17cb0:	4a 0b       	sbc	r20, r26
   17cb2:	5b 0b       	sbc	r21, r27
   17cb4:	da 01       	movw	r26, r20
   17cb6:	c9 01       	movw	r24, r18
   17cb8:	89 39       	cpi	r24, 0x99	; 153
   17cba:	9a 43       	sbci	r25, 0x3A	; 58
   17cbc:	a1 05       	cpc	r26, r1
   17cbe:	b1 05       	cpc	r27, r1
   17cc0:	08 f4       	brcc	.+2      	; 0x17cc4 <PubSubClient::loop() [clone .constprop.86]+0x9a>
   17cc2:	52 c0       	rjmp	.+164    	; 0x17d68 <PubSubClient::loop() [clone .constprop.86]+0x13e>
   17cc4:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <mqtt_client>
   17cc8:	90 91 fb 0f 	lds	r25, 0x0FFB	; 0x800ffb <mqtt_client+0x1>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:286
            if (pingOutstanding) {
   17ccc:	20 91 06 12 	lds	r18, 0x1206	; 0x801206 <mqtt_client+0x20c>
   17cd0:	22 23       	and	r18, r18
   17cd2:	39 f1       	breq	.+78     	; 0x17d22 <PubSubClient::loop() [clone .constprop.86]+0xf8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:287
                this->_state = MQTT_CONNECTION_TIMEOUT;
   17cd4:	2c ef       	ldi	r18, 0xFC	; 252
   17cd6:	3f ef       	ldi	r19, 0xFF	; 255
   17cd8:	30 93 16 12 	sts	0x1216, r19	; 0x801216 <mqtt_client+0x21c>
   17cdc:	20 93 15 12 	sts	0x1215, r18	; 0x801215 <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:288
                _client->stop();
   17ce0:	dc 01       	movw	r26, r24
   17ce2:	ed 91       	ld	r30, X+
   17ce4:	fc 91       	ld	r31, X
   17ce6:	04 88       	ldd	r0, Z+20	; 0x14
   17ce8:	f5 89       	ldd	r31, Z+21	; 0x15
   17cea:	e0 2d       	mov	r30, r0
   17cec:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:289
                return false;
   17cee:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   17cf0:	89 2d       	mov	r24, r9
   17cf2:	0f b6       	in	r0, 0x3f	; 63
   17cf4:	f8 94       	cli
   17cf6:	5e be       	out	0x3e, r5	; 62
   17cf8:	0f be       	out	0x3f, r0	; 63
   17cfa:	4d be       	out	0x3d, r4	; 61
   17cfc:	0f 90       	pop	r0
   17cfe:	df 91       	pop	r29
   17d00:	cf 91       	pop	r28
   17d02:	1f 91       	pop	r17
   17d04:	0f 91       	pop	r16
   17d06:	ff 90       	pop	r15
   17d08:	ef 90       	pop	r14
   17d0a:	df 90       	pop	r13
   17d0c:	cf 90       	pop	r12
   17d0e:	bf 90       	pop	r11
   17d10:	af 90       	pop	r10
   17d12:	9f 90       	pop	r9
   17d14:	8f 90       	pop	r8
   17d16:	7f 90       	pop	r7
   17d18:	6f 90       	pop	r6
   17d1a:	5f 90       	pop	r5
   17d1c:	4f 90       	pop	r4
   17d1e:	3f 90       	pop	r3
   17d20:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:291
            if (pingOutstanding) {
                this->_state = MQTT_CONNECTION_TIMEOUT;
                _client->stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
   17d22:	20 ec       	ldi	r18, 0xC0	; 192
   17d24:	20 93 fc 0f 	sts	0x0FFC, r18	; 0x800ffc <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:292
                buffer[1] = 0;
   17d28:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:293
                _client->write(buffer,2);
   17d2c:	dc 01       	movw	r26, r24
   17d2e:	ed 91       	ld	r30, X+
   17d30:	fc 91       	ld	r31, X
   17d32:	02 80       	ldd	r0, Z+2	; 0x02
   17d34:	f3 81       	ldd	r31, Z+3	; 0x03
   17d36:	e0 2d       	mov	r30, r0
   17d38:	42 e0       	ldi	r20, 0x02	; 2
   17d3a:	50 e0       	ldi	r21, 0x00	; 0
   17d3c:	6c ef       	ldi	r22, 0xFC	; 252
   17d3e:	7f e0       	ldi	r23, 0x0F	; 15
   17d40:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:294
                lastOutActivity = t;
   17d42:	c0 92 fe 11 	sts	0x11FE, r12	; 0x8011fe <mqtt_client+0x204>
   17d46:	d0 92 ff 11 	sts	0x11FF, r13	; 0x8011ff <mqtt_client+0x205>
   17d4a:	e0 92 00 12 	sts	0x1200, r14	; 0x801200 <mqtt_client+0x206>
   17d4e:	f0 92 01 12 	sts	0x1201, r15	; 0x801201 <mqtt_client+0x207>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:295
                lastInActivity = t;
   17d52:	c0 92 02 12 	sts	0x1202, r12	; 0x801202 <mqtt_client+0x208>
   17d56:	d0 92 03 12 	sts	0x1203, r13	; 0x801203 <mqtt_client+0x209>
   17d5a:	e0 92 04 12 	sts	0x1204, r14	; 0x801204 <mqtt_client+0x20a>
   17d5e:	f0 92 05 12 	sts	0x1205, r15	; 0x801205 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:296
                pingOutstanding = true;
   17d62:	81 e0       	ldi	r24, 0x01	; 1
   17d64:	80 93 06 12 	sts	0x1206, r24	; 0x801206 <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:299
            }
        }
        if (_client->available()) {
   17d68:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <mqtt_client>
   17d6c:	90 91 fb 0f 	lds	r25, 0x0FFB	; 0x800ffb <mqtt_client+0x1>
   17d70:	dc 01       	movw	r26, r24
   17d72:	ed 91       	ld	r30, X+
   17d74:	fc 91       	ld	r31, X
   17d76:	00 84       	ldd	r0, Z+8	; 0x08
   17d78:	f1 85       	ldd	r31, Z+9	; 0x09
   17d7a:	e0 2d       	mov	r30, r0
   17d7c:	19 95       	eicall
   17d7e:	89 2b       	or	r24, r25
   17d80:	09 f4       	brne	.+2      	; 0x17d84 <PubSubClient::loop() [clone .constprop.86]+0x15a>
   17d82:	b6 cf       	rjmp	.-148    	; 0x17cf0 <PubSubClient::loop() [clone .constprop.86]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:301
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   17d84:	ce 01       	movw	r24, r28
   17d86:	01 96       	adiw	r24, 0x01	; 1
   17d88:	0e 94 32 bd 	call	0x17a64	; 0x17a64 <PubSubClient::readPacket(unsigned char*) [clone .constprop.157]>
   17d8c:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:304
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   17d8e:	89 2b       	or	r24, r25
   17d90:	09 f4       	brne	.+2      	; 0x17d94 <PubSubClient::loop() [clone .constprop.86]+0x16a>
   17d92:	ae cf       	rjmp	.-164    	; 0x17cf0 <PubSubClient::loop() [clone .constprop.86]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:305
                lastInActivity = t;
   17d94:	c0 92 02 12 	sts	0x1202, r12	; 0x801202 <mqtt_client+0x208>
   17d98:	d0 92 03 12 	sts	0x1203, r13	; 0x801203 <mqtt_client+0x209>
   17d9c:	e0 92 04 12 	sts	0x1204, r14	; 0x801204 <mqtt_client+0x20a>
   17da0:	f0 92 05 12 	sts	0x1205, r15	; 0x801205 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:306
                uint8_t type = buffer[0]&0xF0;
   17da4:	80 90 fc 0f 	lds	r8, 0x0FFC	; 0x800ffc <mqtt_client+0x2>
   17da8:	88 2d       	mov	r24, r8
   17daa:	80 7f       	andi	r24, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:307
                if (type == MQTTPUBLISH) {
   17dac:	80 33       	cpi	r24, 0x30	; 48
   17dae:	09 f0       	breq	.+2      	; 0x17db2 <PubSubClient::loop() [clone .constprop.86]+0x188>
   17db0:	83 c0       	rjmp	.+262    	; 0x17eb8 <PubSubClient::loop() [clone .constprop.86]+0x28e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:308
                    if (callback) {
   17db2:	a0 90 07 12 	lds	r10, 0x1207	; 0x801207 <mqtt_client+0x20d>
   17db6:	b0 90 08 12 	lds	r11, 0x1208	; 0x801208 <mqtt_client+0x20e>
   17dba:	a1 14       	cp	r10, r1
   17dbc:	b1 04       	cpc	r11, r1
   17dbe:	09 f4       	brne	.+2      	; 0x17dc2 <PubSubClient::loop() [clone .constprop.86]+0x198>
   17dc0:	97 cf       	rjmp	.-210    	; 0x17cf0 <PubSubClient::loop() [clone .constprop.86]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:331
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   17dc2:	6d b6       	in	r6, 0x3d	; 61
   17dc4:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:309
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   17dc6:	69 81       	ldd	r22, Y+1	; 0x01
   17dc8:	70 e0       	ldi	r23, 0x00	; 0
   17dca:	fb 01       	movw	r30, r22
   17dcc:	e6 50       	subi	r30, 0x06	; 6
   17dce:	f0 4f       	sbci	r31, 0xF0	; 240
   17dd0:	23 81       	ldd	r18, Z+3	; 0x03
   17dd2:	30 e0       	ldi	r19, 0x00	; 0
   17dd4:	32 2f       	mov	r19, r18
   17dd6:	22 27       	eor	r18, r18
   17dd8:	84 81       	ldd	r24, Z+4	; 0x04
   17dda:	28 0f       	add	r18, r24
   17ddc:	31 1d       	adc	r19, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:310
                        char topic[tl+1];
   17dde:	c9 01       	movw	r24, r18
   17de0:	01 96       	adiw	r24, 0x01	; 1
   17de2:	ed b7       	in	r30, 0x3d	; 61
   17de4:	fe b7       	in	r31, 0x3e	; 62
   17de6:	e8 1b       	sub	r30, r24
   17de8:	f9 0b       	sbc	r31, r25
   17dea:	0f b6       	in	r0, 0x3f	; 63
   17dec:	f8 94       	cli
   17dee:	fe bf       	out	0x3e, r31	; 62
   17df0:	0f be       	out	0x3f, r0	; 63
   17df2:	ed bf       	out	0x3d, r30	; 61
   17df4:	8d b7       	in	r24, 0x3d	; 61
   17df6:	9e b7       	in	r25, 0x3e	; 62
   17df8:	01 96       	adiw	r24, 0x01	; 1
   17dfa:	db 01       	movw	r26, r22
   17dfc:	a1 50       	subi	r26, 0x01	; 1
   17dfe:	b0 4f       	sbci	r27, 0xF0	; 240
   17e00:	fc 01       	movw	r30, r24
   17e02:	8c 01       	movw	r16, r24
   17e04:	02 0f       	add	r16, r18
   17e06:	13 1f       	adc	r17, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:311
                        for (uint16_t i=0;i<tl;i++) {
   17e08:	e0 17       	cp	r30, r16
   17e0a:	f1 07       	cpc	r31, r17
   17e0c:	19 f0       	breq	.+6      	; 0x17e14 <PubSubClient::loop() [clone .constprop.86]+0x1ea>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:312
                            topic[i] = buffer[llen+3+i];
   17e0e:	3d 90       	ld	r3, X+
   17e10:	31 92       	st	Z+, r3
   17e12:	fa cf       	rjmp	.-12     	; 0x17e08 <PubSubClient::loop() [clone .constprop.86]+0x1de>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:314
                        }
                        topic[tl] = 0;
   17e14:	10 82       	st	Z, r1
   17e16:	da 01       	movw	r26, r20
   17e18:	a6 1b       	sub	r26, r22
   17e1a:	b7 0b       	sbc	r27, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:316
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   17e1c:	f8 2d       	mov	r31, r8
   17e1e:	f6 70       	andi	r31, 0x06	; 6
   17e20:	8f 2e       	mov	r8, r31
   17e22:	42 e0       	ldi	r20, 0x02	; 2
   17e24:	f4 13       	cpse	r31, r20
   17e26:	3c c0       	rjmp	.+120    	; 0x17ea0 <PubSubClient::loop() [clone .constprop.86]+0x276>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:317
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   17e28:	62 0f       	add	r22, r18
   17e2a:	73 1f       	adc	r23, r19
   17e2c:	fb 01       	movw	r30, r22
   17e2e:	e6 50       	subi	r30, 0x06	; 6
   17e30:	f0 4f       	sbci	r31, 0xF0	; 240
   17e32:	45 81       	ldd	r20, Z+5	; 0x05
   17e34:	50 e0       	ldi	r21, 0x00	; 0
   17e36:	54 2f       	mov	r21, r20
   17e38:	44 27       	eor	r20, r20
   17e3a:	06 81       	ldd	r16, Z+6	; 0x06
   17e3c:	04 0f       	add	r16, r20
   17e3e:	15 2f       	mov	r17, r21
   17e40:	11 1d       	adc	r17, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   17e42:	ad 01       	movw	r20, r26
   17e44:	42 1b       	sub	r20, r18
   17e46:	53 0b       	sbc	r21, r19
   17e48:	45 50       	subi	r20, 0x05	; 5
   17e4a:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:318
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
                            payload = buffer+llen+3+tl+2;
   17e4c:	6f 5f       	subi	r22, 0xFF	; 255
   17e4e:	7f 4e       	sbci	r23, 0xEF	; 239
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            callback(topic,payload,len-llen-3-tl-2);
   17e50:	f5 01       	movw	r30, r10
   17e52:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:321

                            buffer[0] = MQTTPUBACK;
   17e54:	80 e4       	ldi	r24, 0x40	; 64
   17e56:	80 93 fc 0f 	sts	0x0FFC, r24	; 0x800ffc <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:322
                            buffer[1] = 2;
   17e5a:	80 92 fd 0f 	sts	0x0FFD, r8	; 0x800ffd <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:323
                            buffer[2] = (msgId >> 8);
   17e5e:	10 93 fe 0f 	sts	0x0FFE, r17	; 0x800ffe <mqtt_client+0x4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:324
                            buffer[3] = (msgId & 0xFF);
   17e62:	00 93 ff 0f 	sts	0x0FFF, r16	; 0x800fff <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:325
                            _client->write(buffer,4);
   17e66:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <mqtt_client>
   17e6a:	90 91 fb 0f 	lds	r25, 0x0FFB	; 0x800ffb <mqtt_client+0x1>
   17e6e:	dc 01       	movw	r26, r24
   17e70:	ed 91       	ld	r30, X+
   17e72:	fc 91       	ld	r31, X
   17e74:	02 80       	ldd	r0, Z+2	; 0x02
   17e76:	f3 81       	ldd	r31, Z+3	; 0x03
   17e78:	e0 2d       	mov	r30, r0
   17e7a:	44 e0       	ldi	r20, 0x04	; 4
   17e7c:	50 e0       	ldi	r21, 0x00	; 0
   17e7e:	6c ef       	ldi	r22, 0xFC	; 252
   17e80:	7f e0       	ldi	r23, 0x0F	; 15
   17e82:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:326
                            lastOutActivity = t;
   17e84:	c0 92 fe 11 	sts	0x11FE, r12	; 0x8011fe <mqtt_client+0x204>
   17e88:	d0 92 ff 11 	sts	0x11FF, r13	; 0x8011ff <mqtt_client+0x205>
   17e8c:	e0 92 00 12 	sts	0x1200, r14	; 0x801200 <mqtt_client+0x206>
   17e90:	f0 92 01 12 	sts	0x1201, r15	; 0x801201 <mqtt_client+0x207>
   17e94:	0f b6       	in	r0, 0x3f	; 63
   17e96:	f8 94       	cli
   17e98:	7e be       	out	0x3e, r7	; 62
   17e9a:	0f be       	out	0x3f, r0	; 63
   17e9c:	6d be       	out	0x3d, r6	; 61
   17e9e:	28 cf       	rjmp	.-432    	; 0x17cf0 <PubSubClient::loop() [clone .constprop.86]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   17ea0:	ad 01       	movw	r20, r26
   17ea2:	42 1b       	sub	r20, r18
   17ea4:	53 0b       	sbc	r21, r19
   17ea6:	43 50       	subi	r20, 0x03	; 3
   17ea8:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:329
                            buffer[3] = (msgId & 0xFF);
                            _client->write(buffer,4);
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
   17eaa:	62 0f       	add	r22, r18
   17eac:	73 1f       	adc	r23, r19
   17eae:	61 50       	subi	r22, 0x01	; 1
   17eb0:	70 4f       	sbci	r23, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330
                            callback(topic,payload,len-llen-3-tl);
   17eb2:	f5 01       	movw	r30, r10
   17eb4:	19 95       	eicall
   17eb6:	ee cf       	rjmp	.-36     	; 0x17e94 <PubSubClient::loop() [clone .constprop.86]+0x26a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:333
                        }
                    }
                } else if (type == MQTTPINGREQ) {
   17eb8:	80 3c       	cpi	r24, 0xC0	; 192
   17eba:	a9 f4       	brne	.+42     	; 0x17ee6 <PubSubClient::loop() [clone .constprop.86]+0x2bc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:334
                    buffer[0] = MQTTPINGRESP;
   17ebc:	80 ed       	ldi	r24, 0xD0	; 208
   17ebe:	80 93 fc 0f 	sts	0x0FFC, r24	; 0x800ffc <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:335
                    buffer[1] = 0;
   17ec2:	10 92 fd 0f 	sts	0x0FFD, r1	; 0x800ffd <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:336
                    _client->write(buffer,2);
   17ec6:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <mqtt_client>
   17eca:	90 91 fb 0f 	lds	r25, 0x0FFB	; 0x800ffb <mqtt_client+0x1>
   17ece:	dc 01       	movw	r26, r24
   17ed0:	ed 91       	ld	r30, X+
   17ed2:	fc 91       	ld	r31, X
   17ed4:	02 80       	ldd	r0, Z+2	; 0x02
   17ed6:	f3 81       	ldd	r31, Z+3	; 0x03
   17ed8:	e0 2d       	mov	r30, r0
   17eda:	42 e0       	ldi	r20, 0x02	; 2
   17edc:	50 e0       	ldi	r21, 0x00	; 0
   17ede:	6c ef       	ldi	r22, 0xFC	; 252
   17ee0:	7f e0       	ldi	r23, 0x0F	; 15
   17ee2:	19 95       	eicall
   17ee4:	05 cf       	rjmp	.-502    	; 0x17cf0 <PubSubClient::loop() [clone .constprop.86]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:337
                } else if (type == MQTTPINGRESP) {
   17ee6:	80 3d       	cpi	r24, 0xD0	; 208
   17ee8:	09 f0       	breq	.+2      	; 0x17eec <PubSubClient::loop() [clone .constprop.86]+0x2c2>
   17eea:	02 cf       	rjmp	.-508    	; 0x17cf0 <PubSubClient::loop() [clone .constprop.86]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:338
                    pingOutstanding = false;
   17eec:	10 92 06 12 	sts	0x1206, r1	; 0x801206 <mqtt_client+0x20c>
   17ef0:	ff ce       	rjmp	.-514    	; 0x17cf0 <PubSubClient::loop() [clone .constprop.86]+0xc6>

00017ef2 <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:105
    return this->forceUpdate();
  }
  return true;
}

unsigned long NTPClient::getEpochTime() const {
   17ef2:	cf 92       	push	r12
   17ef4:	df 92       	push	r13
   17ef6:	ef 92       	push	r14
   17ef8:	ff 92       	push	r15
   17efa:	0f 93       	push	r16
   17efc:	1f 93       	push	r17
   17efe:	cf 93       	push	r28
   17f00:	df 93       	push	r29
   17f02:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:106
  return this->_timeOffset + // User offset
   17f04:	cf 80       	ldd	r12, Y+7	; 0x07
   17f06:	d8 84       	ldd	r13, Y+8	; 0x08
   17f08:	e9 84       	ldd	r14, Y+9	; 0x09
   17f0a:	fa 84       	ldd	r15, Y+10	; 0x0a
   17f0c:	8f 85       	ldd	r24, Y+15	; 0x0f
   17f0e:	98 89       	ldd	r25, Y+16	; 0x10
   17f10:	a9 89       	ldd	r26, Y+17	; 0x11
   17f12:	ba 89       	ldd	r27, Y+18	; 0x12
   17f14:	c8 0e       	add	r12, r24
   17f16:	d9 1e       	adc	r13, r25
   17f18:	ea 1e       	adc	r14, r26
   17f1a:	fb 1e       	adc	r15, r27
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:108
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
   17f1c:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   17f20:	0b 89       	ldd	r16, Y+19	; 0x13
   17f22:	1c 89       	ldd	r17, Y+20	; 0x14
   17f24:	2d 89       	ldd	r18, Y+21	; 0x15
   17f26:	3e 89       	ldd	r19, Y+22	; 0x16
   17f28:	60 1b       	sub	r22, r16
   17f2a:	71 0b       	sbc	r23, r17
   17f2c:	82 0b       	sbc	r24, r18
   17f2e:	93 0b       	sbc	r25, r19
   17f30:	28 ee       	ldi	r18, 0xE8	; 232
   17f32:	33 e0       	ldi	r19, 0x03	; 3
   17f34:	40 e0       	ldi	r20, 0x00	; 0
   17f36:	50 e0       	ldi	r21, 0x00	; 0
   17f38:	0e 94 09 df 	call	0x1be12	; 0x1be12 <__udivmodsi4>
   17f3c:	ca 01       	movw	r24, r20
   17f3e:	b9 01       	movw	r22, r18
   17f40:	6c 0d       	add	r22, r12
   17f42:	7d 1d       	adc	r23, r13
   17f44:	8e 1d       	adc	r24, r14
   17f46:	9f 1d       	adc	r25, r15
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:109
}
   17f48:	df 91       	pop	r29
   17f4a:	cf 91       	pop	r28
   17f4c:	1f 91       	pop	r17
   17f4e:	0f 91       	pop	r16
   17f50:	ff 90       	pop	r15
   17f52:	ef 90       	pop	r14
   17f54:	df 90       	pop	r13
   17f56:	cf 90       	pop	r12
   17f58:	08 95       	ret

00017f5a <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   17f5a:	1f 92       	push	r1
   17f5c:	0f 92       	push	r0
   17f5e:	0f b6       	in	r0, 0x3f	; 63
   17f60:	0f 92       	push	r0
   17f62:	11 24       	eor	r1, r1
   17f64:	2f 93       	push	r18
   17f66:	3f 93       	push	r19
   17f68:	8f 93       	push	r24
   17f6a:	9f 93       	push	r25
   17f6c:	af 93       	push	r26
   17f6e:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
   17f70:	80 91 4e 12 	lds	r24, 0x124E	; 0x80124e <timer0_millis>
   17f74:	90 91 4f 12 	lds	r25, 0x124F	; 0x80124f <timer0_millis+0x1>
   17f78:	a0 91 50 12 	lds	r26, 0x1250	; 0x801250 <timer0_millis+0x2>
   17f7c:	b0 91 51 12 	lds	r27, 0x1251	; 0x801251 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
   17f80:	30 91 4d 12 	lds	r19, 0x124D	; 0x80124d <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
   17f84:	23 e0       	ldi	r18, 0x03	; 3
   17f86:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
   17f88:	2d 37       	cpi	r18, 0x7D	; 125
   17f8a:	68 f1       	brcs	.+90     	; 0x17fe6 <__vector_23+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
   17f8c:	26 e8       	ldi	r18, 0x86	; 134
   17f8e:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
   17f90:	02 96       	adiw	r24, 0x02	; 2
   17f92:	a1 1d       	adc	r26, r1
   17f94:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
   17f96:	20 93 4d 12 	sts	0x124D, r18	; 0x80124d <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
   17f9a:	80 93 4e 12 	sts	0x124E, r24	; 0x80124e <timer0_millis>
   17f9e:	90 93 4f 12 	sts	0x124F, r25	; 0x80124f <timer0_millis+0x1>
   17fa2:	a0 93 50 12 	sts	0x1250, r26	; 0x801250 <timer0_millis+0x2>
   17fa6:	b0 93 51 12 	sts	0x1251, r27	; 0x801251 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
   17faa:	80 91 52 12 	lds	r24, 0x1252	; 0x801252 <timer0_overflow_count>
   17fae:	90 91 53 12 	lds	r25, 0x1253	; 0x801253 <timer0_overflow_count+0x1>
   17fb2:	a0 91 54 12 	lds	r26, 0x1254	; 0x801254 <timer0_overflow_count+0x2>
   17fb6:	b0 91 55 12 	lds	r27, 0x1255	; 0x801255 <timer0_overflow_count+0x3>
   17fba:	01 96       	adiw	r24, 0x01	; 1
   17fbc:	a1 1d       	adc	r26, r1
   17fbe:	b1 1d       	adc	r27, r1
   17fc0:	80 93 52 12 	sts	0x1252, r24	; 0x801252 <timer0_overflow_count>
   17fc4:	90 93 53 12 	sts	0x1253, r25	; 0x801253 <timer0_overflow_count+0x1>
   17fc8:	a0 93 54 12 	sts	0x1254, r26	; 0x801254 <timer0_overflow_count+0x2>
   17fcc:	b0 93 55 12 	sts	0x1255, r27	; 0x801255 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:213
#endif
}
   17fd0:	bf 91       	pop	r27
   17fd2:	af 91       	pop	r26
   17fd4:	9f 91       	pop	r25
   17fd6:	8f 91       	pop	r24
   17fd8:	3f 91       	pop	r19
   17fda:	2f 91       	pop	r18
   17fdc:	0f 90       	pop	r0
   17fde:	0f be       	out	0x3f, r0	; 63
   17fe0:	0f 90       	pop	r0
   17fe2:	1f 90       	pop	r1
   17fe4:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
   17fe6:	01 96       	adiw	r24, 0x01	; 1
   17fe8:	a1 1d       	adc	r26, r1
   17fea:	b1 1d       	adc	r27, r1
   17fec:	d4 cf       	rjmp	.-88     	; 0x17f96 <__vector_23+0x3c>

00017fee <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95
{
  return a2d_index;
}

ISR(ADC_vect)
{
   17fee:	1f 92       	push	r1
   17ff0:	0f 92       	push	r0
   17ff2:	0f b6       	in	r0, 0x3f	; 63
   17ff4:	0f 92       	push	r0
   17ff6:	11 24       	eor	r1, r1
   17ff8:	0b b6       	in	r0, 0x3b	; 59
   17ffa:	0f 92       	push	r0
   17ffc:	2f 93       	push	r18
   17ffe:	3f 93       	push	r19
   18000:	4f 93       	push	r20
   18002:	5f 93       	push	r21
   18004:	6f 93       	push	r22
   18006:	7f 93       	push	r23
   18008:	8f 93       	push	r24
   1800a:	9f 93       	push	r25
   1800c:	af 93       	push	r26
   1800e:	bf 93       	push	r27
   18010:	cf 93       	push	r28
   18012:	ef 93       	push	r30
   18014:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
   18016:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
   18018:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
   1801c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   18020:	e0 91 44 0b 	lds	r30, 0x0B44	; 0x800b44 <_ZL17a2d_interupt_func.lto_priv.281>
   18024:	f0 91 45 0b 	lds	r31, 0x0B45	; 0x800b45 <_ZL17a2d_interupt_func.lto_priv.281+0x1>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
}

ISR(ADC_vect)
{
  uint8_t back = SREG;
  a2d_data = ADCL + (ADCH<<8);
   18028:	68 2f       	mov	r22, r24
   1802a:	70 e0       	ldi	r23, 0x00	; 0
   1802c:	76 2f       	mov	r23, r22
   1802e:	66 27       	eor	r22, r22
   18030:	69 0f       	add	r22, r25
   18032:	71 1d       	adc	r23, r1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   18034:	80 91 43 0b 	lds	r24, 0x0B43	; 0x800b43 <a2d_input>
   18038:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
   1803a:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
   1803c:	ff 91       	pop	r31
   1803e:	ef 91       	pop	r30
   18040:	cf 91       	pop	r28
   18042:	bf 91       	pop	r27
   18044:	af 91       	pop	r26
   18046:	9f 91       	pop	r25
   18048:	8f 91       	pop	r24
   1804a:	7f 91       	pop	r23
   1804c:	6f 91       	pop	r22
   1804e:	5f 91       	pop	r21
   18050:	4f 91       	pop	r20
   18052:	3f 91       	pop	r19
   18054:	2f 91       	pop	r18
   18056:	0f 90       	pop	r0
   18058:	0b be       	out	0x3b, r0	; 59
   1805a:	0f 90       	pop	r0
   1805c:	0f be       	out	0x3f, r0	; 63
   1805e:	0f 90       	pop	r0
   18060:	1f 90       	pop	r1
   18062:	18 95       	reti

00018064 <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58
}


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
   18064:	20 91 42 0b 	lds	r18, 0x0B42	; 0x800b42 <a2d_reference>
   18068:	90 e4       	ldi	r25, 0x40	; 64
   1806a:	29 9f       	mul	r18, r25
   1806c:	90 01       	movw	r18, r0
   1806e:	11 24       	eor	r1, r1
   18070:	28 0f       	add	r18, r24
   18072:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
   18076:	80 93 43 0b 	sts	0x0B43, r24	; 0x800b43 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
   1807a:	ea e7       	ldi	r30, 0x7A	; 122
   1807c:	f0 e0       	ldi	r31, 0x00	; 0
   1807e:	80 81       	ld	r24, Z
   18080:	80 64       	ori	r24, 0x40	; 64
   18082:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
   18084:	08 95       	ret

00018086 <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
   18086:	cf 92       	push	r12
   18088:	df 92       	push	r13
   1808a:	ef 92       	push	r14
   1808c:	ff 92       	push	r15
   1808e:	0f 93       	push	r16
   18090:	1f 93       	push	r17
   18092:	cf 93       	push	r28
   18094:	df 93       	push	r29
   18096:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
   18098:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   1809c:	0b 89       	ldd	r16, Y+19	; 0x13
   1809e:	1c 89       	ldd	r17, Y+20	; 0x14
   180a0:	2d 89       	ldd	r18, Y+21	; 0x15
   180a2:	3e 89       	ldd	r19, Y+22	; 0x16
   180a4:	60 1b       	sub	r22, r16
   180a6:	71 0b       	sbc	r23, r17
   180a8:	82 0b       	sbc	r24, r18
   180aa:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
   180ac:	cb 84       	ldd	r12, Y+11	; 0x0b
   180ae:	dc 84       	ldd	r13, Y+12	; 0x0c
   180b0:	ed 84       	ldd	r14, Y+13	; 0x0d
   180b2:	fe 84       	ldd	r15, Y+14	; 0x0e
   180b4:	6c 15       	cp	r22, r12
   180b6:	7d 05       	cpc	r23, r13
   180b8:	8e 05       	cpc	r24, r14
   180ba:	9f 05       	cpc	r25, r15
   180bc:	28 f4       	brcc	.+10     	; 0x180c8 <NTPClient::update()+0x42>
   180be:	01 2b       	or	r16, r17
   180c0:	02 2b       	or	r16, r18
   180c2:	03 2b       	or	r16, r19
   180c4:	09 f0       	breq	.+2      	; 0x180c8 <NTPClient::update()+0x42>
   180c6:	9e c0       	rjmp	.+316    	; 0x18204 <NTPClient::update()+0x17e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
   180c8:	8a 81       	ldd	r24, Y+2	; 0x02
   180ca:	81 11       	cpse	r24, r1
   180cc:	03 c0       	rjmp	.+6      	; 0x180d4 <NTPClient::update()+0x4e>
   180ce:	ce 01       	movw	r24, r28
   180d0:	0e 94 e5 aa 	call	0x155ca	; 0x155ca <NTPClient::begin()>
sendNTPPacket():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   180d4:	7e 01       	movw	r14, r28
   180d6:	87 e1       	ldi	r24, 0x17	; 23
   180d8:	e8 0e       	add	r14, r24
   180da:	f1 1c       	adc	r15, r1
   180dc:	8c e2       	ldi	r24, 0x2C	; 44
   180de:	fe 01       	movw	r30, r28
   180e0:	7b 96       	adiw	r30, 0x1b	; 27
   180e2:	df 01       	movw	r26, r30
   180e4:	1d 92       	st	X+, r1
   180e6:	8a 95       	dec	r24
   180e8:	e9 f7       	brne	.-6      	; 0x180e4 <NTPClient::update()+0x5e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
   180ea:	83 ee       	ldi	r24, 0xE3	; 227
   180ec:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
   180ee:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
   180f0:	86 e0       	ldi	r24, 0x06	; 6
   180f2:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
   180f4:	8c ee       	ldi	r24, 0xEC	; 236
   180f6:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
   180f8:	81 e3       	ldi	r24, 0x31	; 49
   180fa:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
   180fc:	9e e4       	ldi	r25, 0x4E	; 78
   180fe:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
   18100:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
   18102:	84 e3       	ldi	r24, 0x34	; 52
   18104:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
   18106:	88 81       	ld	r24, Y
   18108:	99 81       	ldd	r25, Y+1	; 0x01
   1810a:	6b 81       	ldd	r22, Y+3	; 0x03
   1810c:	7c 81       	ldd	r23, Y+4	; 0x04
   1810e:	dc 01       	movw	r26, r24
   18110:	ed 91       	ld	r30, X+
   18112:	fc 91       	ld	r31, X
   18114:	06 88       	ldd	r0, Z+22	; 0x16
   18116:	f7 89       	ldd	r31, Z+23	; 0x17
   18118:	e0 2d       	mov	r30, r0
   1811a:	4b e7       	ldi	r20, 0x7B	; 123
   1811c:	50 e0       	ldi	r21, 0x00	; 0
   1811e:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   18120:	88 81       	ld	r24, Y
   18122:	99 81       	ldd	r25, Y+1	; 0x01
   18124:	dc 01       	movw	r26, r24
   18126:	ed 91       	ld	r30, X+
   18128:	fc 91       	ld	r31, X
   1812a:	02 80       	ldd	r0, Z+2	; 0x02
   1812c:	f3 81       	ldd	r31, Z+3	; 0x03
   1812e:	e0 2d       	mov	r30, r0
   18130:	40 e3       	ldi	r20, 0x30	; 48
   18132:	50 e0       	ldi	r21, 0x00	; 0
   18134:	b7 01       	movw	r22, r14
   18136:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
   18138:	88 81       	ld	r24, Y
   1813a:	99 81       	ldd	r25, Y+1	; 0x01
   1813c:	dc 01       	movw	r26, r24
   1813e:	ed 91       	ld	r30, X+
   18140:	fc 91       	ld	r31, X
   18142:	00 8c       	ldd	r0, Z+24	; 0x18
   18144:	f1 8d       	ldd	r31, Z+25	; 0x19
   18146:	e0 2d       	mov	r30, r0
   18148:	19 95       	eicall
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72
  #endif

  this->sendNTPPacket();

  // Wait till data is there or timeout...
  byte timeout = 0;
   1814a:	10 e0       	ldi	r17, 0x00	; 0
forceUpdate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
   1814c:	6a e0       	ldi	r22, 0x0A	; 10
   1814e:	70 e0       	ldi	r23, 0x00	; 0
   18150:	80 e0       	ldi	r24, 0x00	; 0
   18152:	90 e0       	ldi	r25, 0x00	; 0
   18154:	0e 94 43 bb 	call	0x17686	; 0x17686 <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
   18158:	88 81       	ld	r24, Y
   1815a:	99 81       	ldd	r25, Y+1	; 0x01
   1815c:	dc 01       	movw	r26, r24
   1815e:	ed 91       	ld	r30, X+
   18160:	fc 91       	ld	r31, X
   18162:	02 8c       	ldd	r0, Z+26	; 0x1a
   18164:	f3 8d       	ldd	r31, Z+27	; 0x1b
   18166:	e0 2d       	mov	r30, r0
   18168:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
   1816a:	15 36       	cpi	r17, 0x65	; 101
   1816c:	09 f4       	brne	.+2      	; 0x18170 <NTPClient::update()+0xea>
   1816e:	54 c0       	rjmp	.+168    	; 0x18218 <NTPClient::update()+0x192>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
   18170:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
   18172:	89 2b       	or	r24, r25
   18174:	59 f3       	breq	.-42     	; 0x1814c <NTPClient::update()+0xc6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
   18176:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   1817a:	21 2f       	mov	r18, r17
   1817c:	30 e0       	ldi	r19, 0x00	; 0
   1817e:	a9 01       	movw	r20, r18
   18180:	4f 5f       	subi	r20, 0xFF	; 255
   18182:	5f 4f       	sbci	r21, 0xFF	; 255
   18184:	ea e0       	ldi	r30, 0x0A	; 10
   18186:	e4 9f       	mul	r30, r20
   18188:	90 01       	movw	r18, r0
   1818a:	e5 9f       	mul	r30, r21
   1818c:	30 0d       	add	r19, r0
   1818e:	11 24       	eor	r1, r1
   18190:	89 01       	movw	r16, r18
   18192:	33 0f       	add	r19, r19
   18194:	22 0b       	sbc	r18, r18
   18196:	33 0b       	sbc	r19, r19
   18198:	ab 01       	movw	r20, r22
   1819a:	bc 01       	movw	r22, r24
   1819c:	40 1b       	sub	r20, r16
   1819e:	51 0b       	sbc	r21, r17
   181a0:	62 0b       	sbc	r22, r18
   181a2:	73 0b       	sbc	r23, r19
   181a4:	4b 8b       	std	Y+19, r20	; 0x13
   181a6:	5c 8b       	std	Y+20, r21	; 0x14
   181a8:	6d 8b       	std	Y+21, r22	; 0x15
   181aa:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
   181ac:	88 81       	ld	r24, Y
   181ae:	99 81       	ldd	r25, Y+1	; 0x01
   181b0:	dc 01       	movw	r26, r24
   181b2:	ed 91       	ld	r30, X+
   181b4:	fc 91       	ld	r31, X
   181b6:	04 8c       	ldd	r0, Z+28	; 0x1c
   181b8:	f5 8d       	ldd	r31, Z+29	; 0x1d
   181ba:	e0 2d       	mov	r30, r0
   181bc:	40 e3       	ldi	r20, 0x30	; 48
   181be:	50 e0       	ldi	r21, 0x00	; 0
   181c0:	b7 01       	movw	r22, r14
   181c2:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   181c4:	fe 01       	movw	r30, r28
   181c6:	ff 96       	adiw	r30, 0x3f	; 63
   181c8:	80 81       	ld	r24, Z
   181ca:	91 81       	ldd	r25, Z+1	; 0x01
   181cc:	98 27       	eor	r25, r24
   181ce:	89 27       	eor	r24, r25
   181d0:	98 27       	eor	r25, r24
   181d2:	b0 e0       	ldi	r27, 0x00	; 0
   181d4:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   181d6:	dc 01       	movw	r26, r24
   181d8:	99 27       	eor	r25, r25
   181da:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   181dc:	32 96       	adiw	r30, 0x02	; 2
   181de:	40 81       	ld	r20, Z
   181e0:	51 81       	ldd	r21, Z+1	; 0x01
   181e2:	54 27       	eor	r21, r20
   181e4:	45 27       	eor	r20, r21
   181e6:	54 27       	eor	r21, r20
   181e8:	70 e0       	ldi	r23, 0x00	; 0
   181ea:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   181ec:	84 2b       	or	r24, r20
   181ee:	95 2b       	or	r25, r21
   181f0:	a6 2b       	or	r26, r22
   181f2:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
   181f4:	80 58       	subi	r24, 0x80	; 128
   181f6:	9e 47       	sbci	r25, 0x7E	; 126
   181f8:	aa 4a       	sbci	r26, 0xAA	; 170
   181fa:	b3 48       	sbci	r27, 0x83	; 131
   181fc:	8f 87       	std	Y+15, r24	; 0x0f
   181fe:	98 8b       	std	Y+16, r25	; 0x10
   18200:	a9 8b       	std	Y+17, r26	; 0x11
   18202:	ba 8b       	std	Y+18, r27	; 0x12
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:102
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
  }
  return true;
   18204:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
}
   18206:	df 91       	pop	r29
   18208:	cf 91       	pop	r28
   1820a:	1f 91       	pop	r17
   1820c:	0f 91       	pop	r16
   1820e:	ff 90       	pop	r15
   18210:	ef 90       	pop	r14
   18212:	df 90       	pop	r13
   18214:	cf 90       	pop	r12
   18216:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
   18218:	80 e0       	ldi	r24, 0x00	; 0
   1821a:	f5 cf       	rjmp	.-22     	; 0x18206 <NTPClient::update()+0x180>

0001821c <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.146]>:
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.146():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:399
  }
}


//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset,  DateTime *now)
   1821c:	3f 92       	push	r3
   1821e:	4f 92       	push	r4
   18220:	5f 92       	push	r5
   18222:	6f 92       	push	r6
   18224:	7f 92       	push	r7
   18226:	8f 92       	push	r8
   18228:	9f 92       	push	r9
   1822a:	af 92       	push	r10
   1822c:	bf 92       	push	r11
   1822e:	cf 92       	push	r12
   18230:	df 92       	push	r13
   18232:	ef 92       	push	r14
   18234:	ff 92       	push	r15
   18236:	0f 93       	push	r16
   18238:	1f 93       	push	r17
   1823a:	cf 93       	push	r28
   1823c:	df 93       	push	r29
   1823e:	cd b7       	in	r28, 0x3d	; 61
   18240:	de b7       	in	r29, 0x3e	; 62
   18242:	6b 97       	sbiw	r28, 0x1b	; 27
   18244:	0f b6       	in	r0, 0x3f	; 63
   18246:	f8 94       	cli
   18248:	de bf       	out	0x3e, r29	; 62
   1824a:	0f be       	out	0x3f, r0	; 63
   1824c:	cd bf       	out	0x3d, r28	; 61
   1824e:	7c 01       	movw	r14, r24
   18250:	16 2f       	mov	r17, r22
   18252:	6a 01       	movw	r12, r20
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:403
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
   18254:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:404
  createString(tmp1, '.', device.ntp_server, 4, 10);
   18256:	0a e0       	ldi	r16, 0x0A	; 10
   18258:	24 e0       	ldi	r18, 0x04	; 4
   1825a:	42 e3       	ldi	r20, 0x32	; 50
   1825c:	5e e0       	ldi	r21, 0x0E	; 14
   1825e:	6e e2       	ldi	r22, 0x2E	; 46
   18260:	ce 01       	movw	r24, r28
   18262:	01 96       	adiw	r24, 0x01	; 1
   18264:	5c 01       	movw	r10, r24
   18266:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:405
  timeClient->begin();
   1826a:	c7 01       	movw	r24, r14
   1826c:	0e 94 e5 aa 	call	0x155ca	; 0x155ca <NTPClient::begin()>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:406
  timeClient->setTimeOffset(3600 * offset);
   18270:	20 e1       	ldi	r18, 0x10	; 16
   18272:	3e e0       	ldi	r19, 0x0E	; 14
   18274:	12 9f       	mul	r17, r18
   18276:	c0 01       	movw	r24, r0
   18278:	13 9f       	mul	r17, r19
   1827a:	90 0d       	add	r25, r0
   1827c:	11 24       	eor	r1, r1
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   1827e:	09 2e       	mov	r0, r25
   18280:	00 0c       	add	r0, r0
   18282:	aa 0b       	sbc	r26, r26
   18284:	bb 0b       	sbc	r27, r27
   18286:	f7 01       	movw	r30, r14
   18288:	87 83       	std	Z+7, r24	; 0x07
   1828a:	90 87       	std	Z+8, r25	; 0x08
   1828c:	a1 87       	std	Z+9, r26	; 0x09
   1828e:	b2 87       	std	Z+10, r27	; 0x0a
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   18290:	b4 82       	std	Z+4, r11	; 0x04
   18292:	a3 82       	std	Z+3, r10	; 0x03
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.146():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:408
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
   18294:	c7 01       	movw	r24, r14
   18296:	0e 94 43 c0 	call	0x18086	; 0x18086 <NTPClient::update()>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:402

//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset,  DateTime *now)
{
  char tmp1[20];
  uint8_t ret = 0;
   1829a:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:408
  tmp1[0] = 0;
  createString(tmp1, '.', device.ntp_server, 4, 10);
  timeClient->begin();
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
   1829c:	88 23       	and	r24, r24
   1829e:	09 f4       	brne	.+2      	; 0x182a2 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.146]+0x86>
   182a0:	7c c0       	rjmp	.+248    	; 0x1839a <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.146]+0x17e>
getSeconds():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:148
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
}
int NTPClient::getSeconds() const {
  return (this->getEpochTime() % 60);
   182a2:	c7 01       	movw	r24, r14
   182a4:	0e 94 79 bf 	call	0x17ef2	; 0x17ef2 <NTPClient::getEpochTime() const>
   182a8:	2c e3       	ldi	r18, 0x3C	; 60
   182aa:	82 2e       	mov	r8, r18
   182ac:	91 2c       	mov	r9, r1
   182ae:	a1 2c       	mov	r10, r1
   182b0:	b1 2c       	mov	r11, r1
   182b2:	a5 01       	movw	r20, r10
   182b4:	94 01       	movw	r18, r8
   182b6:	0e 94 09 df 	call	0x1be12	; 0x1be12 <__udivmodsi4>
   182ba:	36 2e       	mov	r3, r22
getMinutes():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:145
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
   182bc:	c7 01       	movw	r24, r14
   182be:	0e 94 79 bf 	call	0x17ef2	; 0x17ef2 <NTPClient::getEpochTime() const>
   182c2:	30 e1       	ldi	r19, 0x10	; 16
   182c4:	43 2e       	mov	r4, r19
   182c6:	3e e0       	ldi	r19, 0x0E	; 14
   182c8:	53 2e       	mov	r5, r19
   182ca:	61 2c       	mov	r6, r1
   182cc:	71 2c       	mov	r7, r1
   182ce:	a3 01       	movw	r20, r6
   182d0:	92 01       	movw	r18, r4
   182d2:	0e 94 09 df 	call	0x1be12	; 0x1be12 <__udivmodsi4>
   182d6:	a5 01       	movw	r20, r10
   182d8:	94 01       	movw	r18, r8
   182da:	0e 94 09 df 	call	0x1be12	; 0x1be12 <__udivmodsi4>
   182de:	a2 2e       	mov	r10, r18
getHours():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:142

int NTPClient::getDay() const {
  return (((this->getEpochTime()  / 86400L) + 4 ) % 7); //0 is Sunday
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
   182e0:	c7 01       	movw	r24, r14
   182e2:	0e 94 79 bf 	call	0x17ef2	; 0x17ef2 <NTPClient::getEpochTime() const>
   182e6:	20 e8       	ldi	r18, 0x80	; 128
   182e8:	31 e5       	ldi	r19, 0x51	; 81
   182ea:	41 e0       	ldi	r20, 0x01	; 1
   182ec:	50 e0       	ldi	r21, 0x00	; 0
   182ee:	0e 94 09 df 	call	0x1be12	; 0x1be12 <__udivmodsi4>
   182f2:	a3 01       	movw	r20, r6
   182f4:	92 01       	movw	r18, r4
   182f6:	0e 94 09 df 	call	0x1be12	; 0x1be12 <__udivmodsi4>
   182fa:	92 2e       	mov	r9, r18
getDate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:130

  return month;
}

int NTPClient::getDate() const {
  time_t rawtime = this->getEpochTime();
   182fc:	c7 01       	movw	r24, r14
   182fe:	0e 94 79 bf 	call	0x17ef2	; 0x17ef2 <NTPClient::getEpochTime() const>
   18302:	6d 8b       	std	Y+21, r22	; 0x15
   18304:	7e 8b       	std	Y+22, r23	; 0x16
   18306:	8f 8b       	std	Y+23, r24	; 0x17
   18308:	98 8f       	std	Y+24, r25	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:132
  struct tm * ti;
  ti = localtime (&rawtime);
   1830a:	ce 01       	movw	r24, r28
   1830c:	45 96       	adiw	r24, 0x15	; 21
   1830e:	0e 94 f2 c1 	call	0x183e4	; 0x183e4 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:133
  int month = (ti->tm_mday) < 10 ? 0 + (ti->tm_mday) : (ti->tm_mday);
   18312:	dc 01       	movw	r26, r24
   18314:	13 96       	adiw	r26, 0x03	; 3
   18316:	8c 90       	ld	r8, X
getMonth():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:121

  return year;
}

int NTPClient::getMonth() const {
  time_t rawtime = this->getEpochTime();
   18318:	c7 01       	movw	r24, r14
   1831a:	0e 94 79 bf 	call	0x17ef2	; 0x17ef2 <NTPClient::getEpochTime() const>
   1831e:	6d 8b       	std	Y+21, r22	; 0x15
   18320:	7e 8b       	std	Y+22, r23	; 0x16
   18322:	8f 8b       	std	Y+23, r24	; 0x17
   18324:	98 8f       	std	Y+24, r25	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:123
  struct tm * ti;
  ti = localtime (&rawtime);
   18326:	ce 01       	movw	r24, r28
   18328:	45 96       	adiw	r24, 0x15	; 21
   1832a:	0e 94 f2 c1 	call	0x183e4	; 0x183e4 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:124
  int month = (ti->tm_mon + 1) < 10 ? 0 + (ti->tm_mon + 1) : (ti->tm_mon + 1);
   1832e:	fc 01       	movw	r30, r24
   18330:	05 81       	ldd	r16, Z+5	; 0x05
   18332:	00 2e       	mov	r0, r16
   18334:	00 0c       	add	r0, r0
   18336:	11 0b       	sbc	r17, r17
   18338:	0f 5f       	subi	r16, 0xFF	; 255
   1833a:	1f 4f       	sbci	r17, 0xFF	; 255
getYear():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:112
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
}

int NTPClient::getYear() const {
  time_t rawtime = this->getEpochTime();
   1833c:	c7 01       	movw	r24, r14
   1833e:	0e 94 79 bf 	call	0x17ef2	; 0x17ef2 <NTPClient::getEpochTime() const>
   18342:	6d 8b       	std	Y+21, r22	; 0x15
   18344:	7e 8b       	std	Y+22, r23	; 0x16
   18346:	8f 8b       	std	Y+23, r24	; 0x17
   18348:	98 8f       	std	Y+24, r25	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:114
  struct tm * ti;
  ti = localtime (&rawtime);
   1834a:	ce 01       	movw	r24, r28
   1834c:	45 96       	adiw	r24, 0x15	; 21
   1834e:	0e 94 f2 c1 	call	0x183e4	; 0x183e4 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:115
  int year = ti->tm_year + 1900;
   18352:	dc 01       	movw	r26, r24
   18354:	16 96       	adiw	r26, 0x06	; 6
   18356:	2d 91       	ld	r18, X+
   18358:	3c 91       	ld	r19, X
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.146():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:410
  {
    rtc->adjust(DateTime(timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
   1835a:	c9 01       	movw	r24, r18
   1835c:	84 59       	subi	r24, 0x94	; 148
   1835e:	98 4f       	sbci	r25, 0xF8	; 248
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
   18360:	80 3d       	cpi	r24, 0xD0	; 208
   18362:	b7 e0       	ldi	r27, 0x07	; 7
   18364:	9b 07       	cpc	r25, r27
   18366:	10 f0       	brcs	.+4      	; 0x1836c <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.146]+0x150>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
   18368:	80 5d       	subi	r24, 0xD0	; 208
   1836a:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
   1836c:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   1836e:	0e 8b       	std	Y+22, r16	; 0x16
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   18370:	8f 8a       	std	Y+23, r8	; 0x17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   18372:	98 8e       	std	Y+24, r9	; 0x18
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   18374:	a9 8e       	std	Y+25, r10	; 0x19
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   18376:	3a 8e       	std	Y+26, r3	; 0x1a
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.146():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:410
   18378:	ce 01       	movw	r24, r28
   1837a:	45 96       	adiw	r24, 0x15	; 21
   1837c:	0e 94 79 51 	call	0xa2f2	; 0xa2f2 <RTC_DS1307::adjust(DateTime const&)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:411
    *now = rtc->now();
   18380:	ce 01       	movw	r24, r28
   18382:	45 96       	adiw	r24, 0x15	; 21
   18384:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <RTC_DS1307::now()>
   18388:	87 e0       	ldi	r24, 0x07	; 7
   1838a:	fe 01       	movw	r30, r28
   1838c:	75 96       	adiw	r30, 0x15	; 21
   1838e:	d6 01       	movw	r26, r12
   18390:	01 90       	ld	r0, Z+
   18392:	0d 92       	st	X+, r0
   18394:	8a 95       	dec	r24
   18396:	e1 f7       	brne	.-8      	; 0x18390 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.146]+0x174>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:412
    ret = 1;
   18398:	11 e0       	ldi	r17, 0x01	; 1
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
   1839a:	f7 01       	movw	r30, r14
   1839c:	80 81       	ld	r24, Z
   1839e:	91 81       	ldd	r25, Z+1	; 0x01
   183a0:	dc 01       	movw	r26, r24
   183a2:	ed 91       	ld	r30, X+
   183a4:	fc 91       	ld	r31, X
   183a6:	02 88       	ldd	r0, Z+18	; 0x12
   183a8:	f3 89       	ldd	r31, Z+19	; 0x13
   183aa:	e0 2d       	mov	r30, r0
   183ac:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   183ae:	f7 01       	movw	r30, r14
   183b0:	12 82       	std	Z+2, r1	; 0x02
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.146():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:416
  }
  timeClient->end();
  return ret;
}
   183b2:	81 2f       	mov	r24, r17
   183b4:	6b 96       	adiw	r28, 0x1b	; 27
   183b6:	0f b6       	in	r0, 0x3f	; 63
   183b8:	f8 94       	cli
   183ba:	de bf       	out	0x3e, r29	; 62
   183bc:	0f be       	out	0x3f, r0	; 63
   183be:	cd bf       	out	0x3d, r28	; 61
   183c0:	df 91       	pop	r29
   183c2:	cf 91       	pop	r28
   183c4:	1f 91       	pop	r17
   183c6:	0f 91       	pop	r16
   183c8:	ff 90       	pop	r15
   183ca:	ef 90       	pop	r14
   183cc:	df 90       	pop	r13
   183ce:	cf 90       	pop	r12
   183d0:	bf 90       	pop	r11
   183d2:	af 90       	pop	r10
   183d4:	9f 90       	pop	r9
   183d6:	8f 90       	pop	r8
   183d8:	7f 90       	pop	r7
   183da:	6f 90       	pop	r6
   183dc:	5f 90       	pop	r5
   183de:	4f 90       	pop	r4
   183e0:	3f 90       	pop	r3
   183e2:	08 95       	ret

000183e4 <localtime>:
localtime():
   183e4:	69 e5       	ldi	r22, 0x59	; 89
   183e6:	74 e1       	ldi	r23, 0x14	; 20
   183e8:	0e 94 f9 c1 	call	0x183f2	; 0x183f2 <localtime_r>
   183ec:	89 e5       	ldi	r24, 0x59	; 89
   183ee:	94 e1       	ldi	r25, 0x14	; 20
   183f0:	08 95       	ret

000183f2 <localtime_r>:
localtime_r():
   183f2:	cf 92       	push	r12
   183f4:	df 92       	push	r13
   183f6:	ef 92       	push	r14
   183f8:	ff 92       	push	r15
   183fa:	0f 93       	push	r16
   183fc:	1f 93       	push	r17
   183fe:	cf 93       	push	r28
   18400:	df 93       	push	r29
   18402:	00 d0       	rcall	.+0      	; 0x18404 <localtime_r+0x12>
   18404:	1f 92       	push	r1
   18406:	cd b7       	in	r28, 0x3d	; 61
   18408:	de b7       	in	r29, 0x3e	; 62
   1840a:	6c 01       	movw	r12, r24
   1840c:	7b 01       	movw	r14, r22
   1840e:	e0 91 6f 14 	lds	r30, 0x146F	; 0x80146f <__dst_ptr>
   18412:	f0 91 70 14 	lds	r31, 0x1470	; 0x801470 <__dst_ptr+0x1>
   18416:	0f ef       	ldi	r16, 0xFF	; 255
   18418:	1f ef       	ldi	r17, 0xFF	; 255
   1841a:	30 97       	sbiw	r30, 0x00	; 0
   1841c:	21 f0       	breq	.+8      	; 0x18426 <localtime_r+0x34>
   1841e:	65 e6       	ldi	r22, 0x65	; 101
   18420:	74 e1       	ldi	r23, 0x14	; 20
   18422:	19 95       	eicall
   18424:	8c 01       	movw	r16, r24
   18426:	f6 01       	movw	r30, r12
   18428:	80 81       	ld	r24, Z
   1842a:	91 81       	ldd	r25, Z+1	; 0x01
   1842c:	a2 81       	ldd	r26, Z+2	; 0x02
   1842e:	b3 81       	ldd	r27, Z+3	; 0x03
   18430:	40 91 65 14 	lds	r20, 0x1465	; 0x801465 <__utc_offset>
   18434:	50 91 66 14 	lds	r21, 0x1466	; 0x801466 <__utc_offset+0x1>
   18438:	60 91 67 14 	lds	r22, 0x1467	; 0x801467 <__utc_offset+0x2>
   1843c:	70 91 68 14 	lds	r23, 0x1468	; 0x801468 <__utc_offset+0x3>
   18440:	84 0f       	add	r24, r20
   18442:	95 1f       	adc	r25, r21
   18444:	a6 1f       	adc	r26, r22
   18446:	b7 1f       	adc	r27, r23
   18448:	10 16       	cp	r1, r16
   1844a:	11 06       	cpc	r1, r17
   1844c:	cc f0       	brlt	.+50     	; 0x18480 <localtime_r+0x8e>
   1844e:	89 83       	std	Y+1, r24	; 0x01
   18450:	9a 83       	std	Y+2, r25	; 0x02
   18452:	ab 83       	std	Y+3, r26	; 0x03
   18454:	bc 83       	std	Y+4, r27	; 0x04
   18456:	b7 01       	movw	r22, r14
   18458:	ce 01       	movw	r24, r28
   1845a:	01 96       	adiw	r24, 0x01	; 1
   1845c:	0e 94 4a c2 	call	0x18494	; 0x18494 <gmtime_r>
   18460:	f7 01       	movw	r30, r14
   18462:	13 87       	std	Z+11, r17	; 0x0b
   18464:	02 87       	std	Z+10, r16	; 0x0a
   18466:	0f 90       	pop	r0
   18468:	0f 90       	pop	r0
   1846a:	0f 90       	pop	r0
   1846c:	0f 90       	pop	r0
   1846e:	df 91       	pop	r29
   18470:	cf 91       	pop	r28
   18472:	1f 91       	pop	r17
   18474:	0f 91       	pop	r16
   18476:	ff 90       	pop	r15
   18478:	ef 90       	pop	r14
   1847a:	df 90       	pop	r13
   1847c:	cf 90       	pop	r12
   1847e:	08 95       	ret
   18480:	a8 01       	movw	r20, r16
   18482:	01 2e       	mov	r0, r17
   18484:	00 0c       	add	r0, r0
   18486:	66 0b       	sbc	r22, r22
   18488:	77 0b       	sbc	r23, r23
   1848a:	84 0f       	add	r24, r20
   1848c:	95 1f       	adc	r25, r21
   1848e:	a6 1f       	adc	r26, r22
   18490:	b7 1f       	adc	r27, r23
   18492:	dd cf       	rjmp	.-70     	; 0x1844e <localtime_r+0x5c>

00018494 <gmtime_r>:
gmtime_r():
   18494:	cf 92       	push	r12
   18496:	df 92       	push	r13
   18498:	ef 92       	push	r14
   1849a:	ff 92       	push	r15
   1849c:	0f 93       	push	r16
   1849e:	1f 93       	push	r17
   184a0:	cf 93       	push	r28
   184a2:	df 93       	push	r29
   184a4:	00 d0       	rcall	.+0      	; 0x184a6 <gmtime_r+0x12>
   184a6:	00 d0       	rcall	.+0      	; 0x184a8 <gmtime_r+0x14>
   184a8:	1f 92       	push	r1
   184aa:	1f 92       	push	r1
   184ac:	cd b7       	in	r28, 0x3d	; 61
   184ae:	de b7       	in	r29, 0x3e	; 62
   184b0:	8b 01       	movw	r16, r22
   184b2:	fc 01       	movw	r30, r24
   184b4:	60 81       	ld	r22, Z
   184b6:	71 81       	ldd	r23, Z+1	; 0x01
   184b8:	82 81       	ldd	r24, Z+2	; 0x02
   184ba:	93 81       	ldd	r25, Z+3	; 0x03
   184bc:	20 e8       	ldi	r18, 0x80	; 128
   184be:	31 e5       	ldi	r19, 0x51	; 81
   184c0:	41 e0       	ldi	r20, 0x01	; 1
   184c2:	50 e0       	ldi	r21, 0x00	; 0
   184c4:	0e 94 09 df 	call	0x1be12	; 0x1be12 <__udivmodsi4>
   184c8:	69 01       	movw	r12, r18
   184ca:	7a 01       	movw	r14, r20
   184cc:	2c e3       	ldi	r18, 0x3C	; 60
   184ce:	30 e0       	ldi	r19, 0x00	; 0
   184d0:	40 e0       	ldi	r20, 0x00	; 0
   184d2:	50 e0       	ldi	r21, 0x00	; 0
   184d4:	0e 94 2b df 	call	0x1be56	; 0x1be56 <__divmodsi4>
   184d8:	29 83       	std	Y+1, r18	; 0x01
   184da:	3a 83       	std	Y+2, r19	; 0x02
   184dc:	4b 83       	std	Y+3, r20	; 0x03
   184de:	5c 83       	std	Y+4, r21	; 0x04
   184e0:	89 81       	ldd	r24, Y+1	; 0x01
   184e2:	9a 81       	ldd	r25, Y+2	; 0x02
   184e4:	ab 81       	ldd	r26, Y+3	; 0x03
   184e6:	bc 81       	ldd	r27, Y+4	; 0x04
   184e8:	f8 01       	movw	r30, r16
   184ea:	60 83       	st	Z, r22
   184ec:	6c e3       	ldi	r22, 0x3C	; 60
   184ee:	70 e0       	ldi	r23, 0x00	; 0
   184f0:	0e 94 f5 de 	call	0x1bdea	; 0x1bdea <__divmodhi4>
   184f4:	dc 01       	movw	r26, r24
   184f6:	f8 01       	movw	r30, r16
   184f8:	a1 83       	std	Z+1, r26	; 0x01
   184fa:	62 83       	std	Z+2, r22	; 0x02
   184fc:	c6 01       	movw	r24, r12
   184fe:	06 96       	adiw	r24, 0x06	; 6
   18500:	67 e0       	ldi	r22, 0x07	; 7
   18502:	70 e0       	ldi	r23, 0x00	; 0
   18504:	0e 94 e1 de 	call	0x1bdc2	; 0x1bdc2 <__udivmodhi4>
   18508:	84 83       	std	Z+4, r24	; 0x04
   1850a:	2d ea       	ldi	r18, 0xAD	; 173
   1850c:	3e e8       	ldi	r19, 0x8E	; 142
   1850e:	40 e0       	ldi	r20, 0x00	; 0
   18510:	50 e0       	ldi	r21, 0x00	; 0
   18512:	c7 01       	movw	r24, r14
   18514:	b6 01       	movw	r22, r12
   18516:	0e 94 2b df 	call	0x1be56	; 0x1be56 <__divmodsi4>
   1851a:	29 83       	std	Y+1, r18	; 0x01
   1851c:	3a 83       	std	Y+2, r19	; 0x02
   1851e:	6d 83       	std	Y+5, r22	; 0x05
   18520:	7e 83       	std	Y+6, r23	; 0x06
   18522:	8f 83       	std	Y+7, r24	; 0x07
   18524:	98 87       	std	Y+8, r25	; 0x08
   18526:	89 81       	ldd	r24, Y+1	; 0x01
   18528:	9a 81       	ldd	r25, Y+2	; 0x02
   1852a:	24 e6       	ldi	r18, 0x64	; 100
   1852c:	28 9f       	mul	r18, r24
   1852e:	60 01       	movw	r12, r0
   18530:	29 9f       	mul	r18, r25
   18532:	d0 0c       	add	r13, r0
   18534:	11 24       	eor	r1, r1
   18536:	6d 81       	ldd	r22, Y+5	; 0x05
   18538:	7e 81       	ldd	r23, Y+6	; 0x06
   1853a:	8f 81       	ldd	r24, Y+7	; 0x07
   1853c:	98 85       	ldd	r25, Y+8	; 0x08
   1853e:	25 eb       	ldi	r18, 0xB5	; 181
   18540:	35 e0       	ldi	r19, 0x05	; 5
   18542:	40 e0       	ldi	r20, 0x00	; 0
   18544:	50 e0       	ldi	r21, 0x00	; 0
   18546:	0e 94 2b df 	call	0x1be56	; 0x1be56 <__divmodsi4>
   1854a:	29 83       	std	Y+1, r18	; 0x01
   1854c:	3a 83       	std	Y+2, r19	; 0x02
   1854e:	6d 83       	std	Y+5, r22	; 0x05
   18550:	7e 83       	std	Y+6, r23	; 0x06
   18552:	e9 80       	ldd	r14, Y+1	; 0x01
   18554:	fa 80       	ldd	r15, Y+2	; 0x02
   18556:	ee 0c       	add	r14, r14
   18558:	ff 1c       	adc	r15, r15
   1855a:	ee 0c       	add	r14, r14
   1855c:	ff 1c       	adc	r15, r15
   1855e:	ec 0c       	add	r14, r12
   18560:	fd 1c       	adc	r15, r13
   18562:	8d 81       	ldd	r24, Y+5	; 0x05
   18564:	9e 81       	ldd	r25, Y+6	; 0x06
   18566:	f5 e6       	ldi	r31, 0x65	; 101
   18568:	ef 16       	cp	r14, r31
   1856a:	f1 04       	cpc	r15, r1
   1856c:	08 f4       	brcc	.+2      	; 0x18570 <gmtime_r+0xdc>
   1856e:	3f c0       	rjmp	.+126    	; 0x185ee <gmtime_r+0x15a>
   18570:	01 96       	adiw	r24, 0x01	; 1
   18572:	21 e0       	ldi	r18, 0x01	; 1
   18574:	30 e0       	ldi	r19, 0x00	; 0
   18576:	a9 01       	movw	r20, r18
   18578:	44 59       	subi	r20, 0x94	; 148
   1857a:	5e 4f       	sbci	r21, 0xFE	; 254
   1857c:	48 17       	cp	r20, r24
   1857e:	59 07       	cpc	r21, r25
   18580:	60 f4       	brcc	.+24     	; 0x1859a <gmtime_r+0x106>
   18582:	6d e6       	ldi	r22, 0x6D	; 109
   18584:	71 e0       	ldi	r23, 0x01	; 1
   18586:	82 1b       	sub	r24, r18
   18588:	93 0b       	sbc	r25, r19
   1858a:	0e 94 f5 de 	call	0x1bdea	; 0x1bdea <__divmodhi4>
   1858e:	dc 01       	movw	r26, r24
   18590:	e6 0e       	add	r14, r22
   18592:	f7 1e       	adc	r15, r23
   18594:	cd 01       	movw	r24, r26
   18596:	30 e0       	ldi	r19, 0x00	; 0
   18598:	20 e0       	ldi	r18, 0x00	; 0
   1859a:	44 e6       	ldi	r20, 0x64	; 100
   1859c:	e4 0e       	add	r14, r20
   1859e:	f1 1c       	adc	r15, r1
   185a0:	f8 01       	movw	r30, r16
   185a2:	f7 82       	std	Z+7, r15	; 0x07
   185a4:	e6 82       	std	Z+6, r14	; 0x06
   185a6:	91 87       	std	Z+9, r25	; 0x09
   185a8:	80 87       	std	Z+8, r24	; 0x08
   185aa:	25 5c       	subi	r18, 0xC5	; 197
   185ac:	3f 4f       	sbci	r19, 0xFF	; 255
   185ae:	82 17       	cp	r24, r18
   185b0:	93 07       	cpc	r25, r19
   185b2:	38 f5       	brcc	.+78     	; 0x18602 <gmtime_r+0x16e>
   185b4:	6f e1       	ldi	r22, 0x1F	; 31
   185b6:	70 e0       	ldi	r23, 0x00	; 0
   185b8:	0e 94 f5 de 	call	0x1bdea	; 0x1bdea <__divmodhi4>
   185bc:	dc 01       	movw	r26, r24
   185be:	f8 01       	movw	r30, r16
   185c0:	65 83       	std	Z+5, r22	; 0x05
   185c2:	a3 83       	std	Z+3, r26	; 0x03
   185c4:	f8 01       	movw	r30, r16
   185c6:	13 86       	std	Z+11, r1	; 0x0b
   185c8:	12 86       	std	Z+10, r1	; 0x0a
   185ca:	83 81       	ldd	r24, Z+3	; 0x03
   185cc:	8f 5f       	subi	r24, 0xFF	; 255
   185ce:	83 83       	std	Z+3, r24	; 0x03
   185d0:	28 96       	adiw	r28, 0x08	; 8
   185d2:	0f b6       	in	r0, 0x3f	; 63
   185d4:	f8 94       	cli
   185d6:	de bf       	out	0x3e, r29	; 62
   185d8:	0f be       	out	0x3f, r0	; 63
   185da:	cd bf       	out	0x3d, r28	; 61
   185dc:	df 91       	pop	r29
   185de:	cf 91       	pop	r28
   185e0:	1f 91       	pop	r17
   185e2:	0f 91       	pop	r16
   185e4:	ff 90       	pop	r15
   185e6:	ef 90       	pop	r14
   185e8:	df 90       	pop	r13
   185ea:	cf 90       	pop	r12
   185ec:	08 95       	ret
   185ee:	51 e0       	ldi	r21, 0x01	; 1
   185f0:	40 e0       	ldi	r20, 0x00	; 0
   185f2:	24 e6       	ldi	r18, 0x64	; 100
   185f4:	e2 16       	cp	r14, r18
   185f6:	f1 04       	cpc	r15, r1
   185f8:	09 f4       	brne	.+2      	; 0x185fc <gmtime_r+0x168>
   185fa:	50 e0       	ldi	r21, 0x00	; 0
   185fc:	25 2f       	mov	r18, r21
   185fe:	34 2f       	mov	r19, r20
   18600:	ba cf       	rjmp	.-140    	; 0x18576 <gmtime_r+0xe2>
   18602:	69 e9       	ldi	r22, 0x99	; 153
   18604:	70 e0       	ldi	r23, 0x00	; 0
   18606:	82 1b       	sub	r24, r18
   18608:	93 0b       	sbc	r25, r19
   1860a:	0e 94 f5 de 	call	0x1bdea	; 0x1bdea <__divmodhi4>
   1860e:	dc 01       	movw	r26, r24
   18610:	26 2f       	mov	r18, r22
   18612:	22 0f       	add	r18, r18
   18614:	22 0f       	add	r18, r18
   18616:	f2 2e       	mov	r15, r18
   18618:	f6 0e       	add	r15, r22
   1861a:	6d e3       	ldi	r22, 0x3D	; 61
   1861c:	70 e0       	ldi	r23, 0x00	; 0
   1861e:	cd 01       	movw	r24, r26
   18620:	0e 94 f5 de 	call	0x1bdea	; 0x1bdea <__divmodhi4>
   18624:	dc 01       	movw	r26, r24
   18626:	e6 2e       	mov	r14, r22
   18628:	ee 0c       	add	r14, r14
   1862a:	6f e1       	ldi	r22, 0x1F	; 31
   1862c:	70 e0       	ldi	r23, 0x00	; 0
   1862e:	cd 01       	movw	r24, r26
   18630:	0e 94 f5 de 	call	0x1bdea	; 0x1bdea <__divmodhi4>
   18634:	dc 01       	movw	r26, r24
   18636:	22 e0       	ldi	r18, 0x02	; 2
   18638:	26 0f       	add	r18, r22
   1863a:	2f 0d       	add	r18, r15
   1863c:	2e 0d       	add	r18, r14
   1863e:	f8 01       	movw	r30, r16
   18640:	25 83       	std	Z+5, r18	; 0x05
   18642:	bf cf       	rjmp	.-130    	; 0x185c2 <gmtime_r+0x12e>

00018644 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
   18644:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
   18646:	80 81       	ld	r24, Z
   18648:	91 81       	ldd	r25, Z+1	; 0x01
   1864a:	87 30       	cpi	r24, 0x07	; 7
   1864c:	91 05       	cpc	r25, r1
   1864e:	38 f4       	brcc	.+14     	; 0x1865e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
   18650:	85 30       	cpi	r24, 0x05	; 5
   18652:	91 05       	cpc	r25, r1
   18654:	88 f4       	brcc	.+34     	; 0x18678 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
   18656:	03 97       	sbiw	r24, 0x03	; 3
   18658:	a0 f4       	brcc	.+40     	; 0x18682 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   1865a:	80 e0       	ldi	r24, 0x00	; 0
   1865c:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   1865e:	87 30       	cpi	r24, 0x07	; 7
   18660:	91 05       	cpc	r25, r1
   18662:	61 f0       	breq	.+24     	; 0x1867c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
   18664:	0a 97       	sbiw	r24, 0x0a	; 10
   18666:	c9 f7       	brne	.-14     	; 0x1865a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   18668:	62 81       	ldd	r22, Z+2	; 0x02
   1866a:	73 81       	ldd	r23, Z+3	; 0x03
   1866c:	84 81       	ldd	r24, Z+4	; 0x04
   1866e:	95 81       	ldd	r25, Z+5	; 0x05
   18670:	0e 94 4a e0 	call	0x1c094	; 0x1c094 <__fixunssfsi>
   18674:	86 2f       	mov	r24, r22
   18676:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   18678:	82 81       	ldd	r24, Z+2	; 0x02
   1867a:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   1867c:	82 81       	ldd	r24, Z+2	; 0x02
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   1867e:	81 95       	neg	r24
   18680:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   18682:	02 80       	ldd	r0, Z+2	; 0x02
   18684:	f3 81       	ldd	r31, Z+3	; 0x03
   18686:	e0 2d       	mov	r30, r0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   18688:	30 97       	sbiw	r30, 0x00	; 0
   1868a:	39 f3       	breq	.-50     	; 0x1865a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   1868c:	80 81       	ld	r24, Z
   1868e:	84 37       	cpi	r24, 0x74	; 116
   18690:	c9 f0       	breq	.+50     	; 0x186c4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   18692:	8b 32       	cpi	r24, 0x2B	; 43
   18694:	89 f0       	breq	.+34     	; 0x186b8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
   18696:	8d 32       	cpi	r24, 0x2D	; 45
   18698:	81 f4       	brne	.+32     	; 0x186ba <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   1869a:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   1869c:	91 e0       	ldi	r25, 0x01	; 1
parseInteger():
   1869e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   186a0:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   186a2:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   186a4:	30 ed       	ldi	r19, 0xD0	; 208
   186a6:	36 0f       	add	r19, r22
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   186a8:	3a 30       	cpi	r19, 0x0A	; 10
   186aa:	48 f4       	brcc	.+18     	; 0x186be <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
   186ac:	82 9f       	mul	r24, r18
   186ae:	60 0d       	add	r22, r0
   186b0:	11 24       	eor	r1, r1
   186b2:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   186b4:	80 53       	subi	r24, 0x30	; 48
   186b6:	f5 cf       	rjmp	.-22     	; 0x186a2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   186b8:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   186ba:	90 e0       	ldi	r25, 0x00	; 0
   186bc:	f0 cf       	rjmp	.-32     	; 0x1869e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   186be:	91 11       	cpse	r25, r1
   186c0:	de cf       	rjmp	.-68     	; 0x1867e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
   186c2:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   186c4:	81 e0       	ldi	r24, 0x01	; 1
   186c6:	fd cf       	rjmp	.-6      	; 0x186c2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

000186c8 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7340>:
_GLOBAL__I_65535_0_room_control_v3.ino.cpp.o.7340():
   186c8:	4f 92       	push	r4
   186ca:	5f 92       	push	r5
   186cc:	6f 92       	push	r6
   186ce:	7f 92       	push	r7
   186d0:	af 92       	push	r10
   186d2:	bf 92       	push	r11
   186d4:	cf 92       	push	r12
   186d6:	df 92       	push	r13
   186d8:	ef 92       	push	r14
   186da:	ff 92       	push	r15
   186dc:	0f 93       	push	r16
   186de:	1f 93       	push	r17
   186e0:	cf 93       	push	r28
   186e2:	df 93       	push	r29
   186e4:	e0 e3       	ldi	r30, 0x30	; 48
   186e6:	fd e0       	ldi	r31, 0x0D	; 13
   186e8:	13 82       	std	Z+3, r1	; 0x03
   186ea:	12 82       	std	Z+2, r1	; 0x02
   186ec:	88 ee       	ldi	r24, 0xE8	; 232
   186ee:	48 2e       	mov	r4, r24
   186f0:	83 e0       	ldi	r24, 0x03	; 3
   186f2:	58 2e       	mov	r5, r24
   186f4:	61 2c       	mov	r6, r1
   186f6:	71 2c       	mov	r7, r1
   186f8:	44 82       	std	Z+4, r4	; 0x04
   186fa:	55 82       	std	Z+5, r5	; 0x05
   186fc:	66 82       	std	Z+6, r6	; 0x06
   186fe:	77 82       	std	Z+7, r7	; 0x07
   18700:	8c e5       	ldi	r24, 0x5C	; 92
   18702:	92 e0       	ldi	r25, 0x02	; 2
   18704:	91 83       	std	Z+1, r25	; 0x01
   18706:	80 83       	st	Z, r24
   18708:	85 ec       	ldi	r24, 0xC5	; 197
   1870a:	90 e0       	ldi	r25, 0x00	; 0
   1870c:	95 87       	std	Z+13, r25	; 0x0d
   1870e:	84 87       	std	Z+12, r24	; 0x0c
   18710:	84 ec       	ldi	r24, 0xC4	; 196
   18712:	90 e0       	ldi	r25, 0x00	; 0
   18714:	97 87       	std	Z+15, r25	; 0x0f
   18716:	86 87       	std	Z+14, r24	; 0x0e
   18718:	80 ec       	ldi	r24, 0xC0	; 192
   1871a:	90 e0       	ldi	r25, 0x00	; 0
   1871c:	91 8b       	std	Z+17, r25	; 0x11
   1871e:	80 8b       	std	Z+16, r24	; 0x10
   18720:	81 ec       	ldi	r24, 0xC1	; 193
   18722:	90 e0       	ldi	r25, 0x00	; 0
   18724:	93 8b       	std	Z+19, r25	; 0x13
   18726:	82 8b       	std	Z+18, r24	; 0x12
   18728:	82 ec       	ldi	r24, 0xC2	; 194
   1872a:	90 e0       	ldi	r25, 0x00	; 0
   1872c:	95 8b       	std	Z+21, r25	; 0x15
   1872e:	84 8b       	std	Z+20, r24	; 0x14
   18730:	86 ec       	ldi	r24, 0xC6	; 198
   18732:	90 e0       	ldi	r25, 0x00	; 0
   18734:	97 8b       	std	Z+23, r25	; 0x17
   18736:	86 8b       	std	Z+22, r24	; 0x16
   18738:	11 8e       	std	Z+25, r1	; 0x19
   1873a:	12 8e       	std	Z+26, r1	; 0x1a
   1873c:	13 8e       	std	Z+27, r1	; 0x1b
   1873e:	14 8e       	std	Z+28, r1	; 0x1c
   18740:	e8 e7       	ldi	r30, 0x78	; 120
   18742:	f2 e1       	ldi	r31, 0x12	; 18
   18744:	c2 ef       	ldi	r28, 0xF2	; 242
   18746:	d2 e0       	ldi	r29, 0x02	; 2
   18748:	d1 83       	std	Z+1, r29	; 0x01
   1874a:	c0 83       	st	Z, r28
   1874c:	12 82       	std	Z+2, r1	; 0x02
   1874e:	13 82       	std	Z+3, r1	; 0x03
   18750:	14 82       	std	Z+4, r1	; 0x04
   18752:	15 82       	std	Z+5, r1	; 0x05
   18754:	93 ec       	ldi	r25, 0xC3	; 195
   18756:	e9 2e       	mov	r14, r25
   18758:	9f e0       	ldi	r25, 0x0F	; 15
   1875a:	f9 2e       	mov	r15, r25
   1875c:	f7 01       	movw	r30, r14
   1875e:	13 82       	std	Z+3, r1	; 0x03
   18760:	12 82       	std	Z+2, r1	; 0x02
   18762:	44 82       	std	Z+4, r4	; 0x04
   18764:	55 82       	std	Z+5, r5	; 0x05
   18766:	66 82       	std	Z+6, r6	; 0x06
   18768:	77 82       	std	Z+7, r7	; 0x07
   1876a:	8e e6       	ldi	r24, 0x6E	; 110
   1876c:	92 e0       	ldi	r25, 0x02	; 2
   1876e:	91 83       	std	Z+1, r25	; 0x01
   18770:	80 83       	st	Z, r24
   18772:	ee e7       	ldi	r30, 0x7E	; 126
   18774:	f2 e1       	ldi	r31, 0x12	; 18
   18776:	d1 83       	std	Z+1, r29	; 0x01
   18778:	c0 83       	st	Z, r28
   1877a:	12 82       	std	Z+2, r1	; 0x02
   1877c:	13 82       	std	Z+3, r1	; 0x03
   1877e:	14 82       	std	Z+4, r1	; 0x04
   18780:	15 82       	std	Z+5, r1	; 0x05
   18782:	ed ec       	ldi	r30, 0xCD	; 205
   18784:	fd e0       	ldi	r31, 0x0D	; 13
   18786:	80 e5       	ldi	r24, 0x50	; 80
   18788:	80 83       	st	Z, r24
   1878a:	aa 24       	eor	r10, r10
   1878c:	a3 94       	inc	r10
   1878e:	a1 82       	std	Z+1, r10	; 0x01
   18790:	e4 e8       	ldi	r30, 0x84	; 132
   18792:	f2 e1       	ldi	r31, 0x12	; 18
   18794:	d1 83       	std	Z+1, r29	; 0x01
   18796:	c0 83       	st	Z, r28
   18798:	12 82       	std	Z+2, r1	; 0x02
   1879a:	13 82       	std	Z+3, r1	; 0x03
   1879c:	14 82       	std	Z+4, r1	; 0x04
   1879e:	15 82       	std	Z+5, r1	; 0x05
   187a0:	ea e8       	ldi	r30, 0x8A	; 138
   187a2:	f2 e1       	ldi	r31, 0x12	; 18
   187a4:	d1 83       	std	Z+1, r29	; 0x01
   187a6:	c0 83       	st	Z, r28
   187a8:	12 82       	std	Z+2, r1	; 0x02
   187aa:	13 82       	std	Z+3, r1	; 0x03
   187ac:	14 82       	std	Z+4, r1	; 0x04
   187ae:	15 82       	std	Z+5, r1	; 0x05
   187b0:	e0 e9       	ldi	r30, 0x90	; 144
   187b2:	f2 e1       	ldi	r31, 0x12	; 18
   187b4:	d1 83       	std	Z+1, r29	; 0x01
   187b6:	c0 83       	st	Z, r28
   187b8:	12 82       	std	Z+2, r1	; 0x02
   187ba:	13 82       	std	Z+3, r1	; 0x03
   187bc:	14 82       	std	Z+4, r1	; 0x04
   187be:	15 82       	std	Z+5, r1	; 0x05
   187c0:	e6 e9       	ldi	r30, 0x96	; 150
   187c2:	f2 e1       	ldi	r31, 0x12	; 18
   187c4:	d1 83       	std	Z+1, r29	; 0x01
   187c6:	c0 83       	st	Z, r28
   187c8:	12 82       	std	Z+2, r1	; 0x02
   187ca:	13 82       	std	Z+3, r1	; 0x03
   187cc:	14 82       	std	Z+4, r1	; 0x04
   187ce:	15 82       	std	Z+5, r1	; 0x05
   187d0:	ec e9       	ldi	r30, 0x9C	; 156
   187d2:	f2 e1       	ldi	r31, 0x12	; 18
   187d4:	d1 83       	std	Z+1, r29	; 0x01
   187d6:	c0 83       	st	Z, r28
   187d8:	12 82       	std	Z+2, r1	; 0x02
   187da:	13 82       	std	Z+3, r1	; 0x03
   187dc:	14 82       	std	Z+4, r1	; 0x04
   187de:	15 82       	std	Z+5, r1	; 0x05
   187e0:	ef ec       	ldi	r30, 0xCF	; 207
   187e2:	fd e0       	ldi	r31, 0x0D	; 13
   187e4:	d1 83       	std	Z+1, r29	; 0x01
   187e6:	c0 83       	st	Z, r28
   187e8:	12 82       	std	Z+2, r1	; 0x02
   187ea:	13 82       	std	Z+3, r1	; 0x03
   187ec:	14 82       	std	Z+4, r1	; 0x04
   187ee:	15 82       	std	Z+5, r1	; 0x05
   187f0:	13 86       	std	Z+11, r1	; 0x0b
   187f2:	12 86       	std	Z+10, r1	; 0x0a
   187f4:	2a e0       	ldi	r18, 0x0A	; 10
   187f6:	b2 2e       	mov	r11, r18
   187f8:	b4 86       	std	Z+12, r11	; 0x0c
   187fa:	ec ed       	ldi	r30, 0xDC	; 220
   187fc:	fd e0       	ldi	r31, 0x0D	; 13
   187fe:	d1 83       	std	Z+1, r29	; 0x01
   18800:	c0 83       	st	Z, r28
   18802:	12 82       	std	Z+2, r1	; 0x02
   18804:	13 82       	std	Z+3, r1	; 0x03
   18806:	14 82       	std	Z+4, r1	; 0x04
   18808:	15 82       	std	Z+5, r1	; 0x05
   1880a:	e2 ea       	ldi	r30, 0xA2	; 162
   1880c:	f2 e1       	ldi	r31, 0x12	; 18
   1880e:	d1 83       	std	Z+1, r29	; 0x01
   18810:	c0 83       	st	Z, r28
   18812:	12 82       	std	Z+2, r1	; 0x02
   18814:	13 82       	std	Z+3, r1	; 0x03
   18816:	14 82       	std	Z+4, r1	; 0x04
   18818:	15 82       	std	Z+5, r1	; 0x05
   1881a:	8a e0       	ldi	r24, 0x0A	; 10
   1881c:	90 e0       	ldi	r25, 0x00	; 0
   1881e:	0e 94 66 d9 	call	0x1b2cc	; 0x1b2cc <malloc>
   18822:	90 93 e3 0d 	sts	0x0DE3, r25	; 0x800de3 <array_pids+0x1>
   18826:	80 93 e2 0d 	sts	0x0DE2, r24	; 0x800de2 <array_pids>
   1882a:	e8 ea       	ldi	r30, 0xA8	; 168
   1882c:	f2 e1       	ldi	r31, 0x12	; 18
   1882e:	d1 83       	std	Z+1, r29	; 0x01
   18830:	c0 83       	st	Z, r28
   18832:	12 82       	std	Z+2, r1	; 0x02
   18834:	13 82       	std	Z+3, r1	; 0x03
   18836:	14 82       	std	Z+4, r1	; 0x04
   18838:	15 82       	std	Z+5, r1	; 0x05
   1883a:	ee ea       	ldi	r30, 0xAE	; 174
   1883c:	f2 e1       	ldi	r31, 0x12	; 18
   1883e:	d1 83       	std	Z+1, r29	; 0x01
   18840:	c0 83       	st	Z, r28
   18842:	12 82       	std	Z+2, r1	; 0x02
   18844:	13 82       	std	Z+3, r1	; 0x03
   18846:	14 82       	std	Z+4, r1	; 0x04
   18848:	15 82       	std	Z+5, r1	; 0x05
   1884a:	8b e5       	ldi	r24, 0x5B	; 91
   1884c:	97 e0       	ldi	r25, 0x07	; 7
   1884e:	90 93 09 0e 	sts	0x0E09, r25	; 0x800e09 <device+0x25>
   18852:	80 93 08 0e 	sts	0x0E08, r24	; 0x800e08 <device+0x24>
   18856:	eb e4       	ldi	r30, 0x4B	; 75
   18858:	f4 e1       	ldi	r31, 0x14	; 20
   1885a:	d1 83       	std	Z+1, r29	; 0x01
   1885c:	c0 83       	st	Z, r28
   1885e:	12 82       	std	Z+2, r1	; 0x02
   18860:	13 82       	std	Z+3, r1	; 0x03
   18862:	14 82       	std	Z+4, r1	; 0x04
   18864:	15 82       	std	Z+5, r1	; 0x05
   18866:	06 e4       	ldi	r16, 0x46	; 70
   18868:	12 e1       	ldi	r17, 0x12	; 18
   1886a:	88 e1       	ldi	r24, 0x18	; 24
   1886c:	f8 01       	movw	r30, r16
   1886e:	84 83       	std	Z+4, r24	; 0x04
   18870:	8a e1       	ldi	r24, 0x1A	; 26
   18872:	83 83       	std	Z+3, r24	; 0x03
   18874:	89 e1       	ldi	r24, 0x19	; 25
   18876:	85 83       	std	Z+5, r24	; 0x05
   18878:	82 e0       	ldi	r24, 0x02	; 2
   1887a:	82 83       	std	Z+2, r24	; 0x02
   1887c:	10 82       	st	Z, r1
   1887e:	11 82       	std	Z+1, r1	; 0x01
   18880:	16 82       	std	Z+6, r1	; 0x06
   18882:	60 e0       	ldi	r22, 0x00	; 0
   18884:	89 e1       	ldi	r24, 0x19	; 25
   18886:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
   1888a:	8f e3       	ldi	r24, 0x3F	; 63
   1888c:	92 e1       	ldi	r25, 0x12	; 18
   1888e:	0e 94 86 b2 	call	0x1650c	; 0x1650c <DateTime::DateTime(unsigned long) [clone .constprop.145]>
   18892:	ae e3       	ldi	r26, 0x3E	; 62
   18894:	b4 e1       	ldi	r27, 0x14	; 20
   18896:	13 96       	adiw	r26, 0x03	; 3
   18898:	1c 92       	st	X, r1
   1889a:	1e 92       	st	-X, r1
   1889c:	12 97       	sbiw	r26, 0x02	; 2
   1889e:	14 96       	adiw	r26, 0x04	; 4
   188a0:	4d 92       	st	X+, r4
   188a2:	5d 92       	st	X+, r5
   188a4:	6d 92       	st	X+, r6
   188a6:	7c 92       	st	X, r7
   188a8:	17 97       	sbiw	r26, 0x07	; 7
   188aa:	20 ed       	ldi	r18, 0xD0	; 208
   188ac:	32 e0       	ldi	r19, 0x02	; 2
   188ae:	11 96       	adiw	r26, 0x01	; 1
   188b0:	3c 93       	st	X, r19
   188b2:	2e 93       	st	-X, r18
   188b4:	88 e0       	ldi	r24, 0x08	; 8
   188b6:	1c 96       	adiw	r26, 0x0c	; 12
   188b8:	8c 93       	st	X, r24
   188ba:	1c 97       	sbiw	r26, 0x0c	; 12
   188bc:	e2 e3       	ldi	r30, 0x32	; 50
   188be:	f2 e1       	ldi	r31, 0x12	; 18
   188c0:	13 82       	std	Z+3, r1	; 0x03
   188c2:	12 82       	std	Z+2, r1	; 0x02
   188c4:	44 82       	std	Z+4, r4	; 0x04
   188c6:	55 82       	std	Z+5, r5	; 0x05
   188c8:	66 82       	std	Z+6, r6	; 0x06
   188ca:	77 82       	std	Z+7, r7	; 0x07
   188cc:	31 83       	std	Z+1, r19	; 0x01
   188ce:	20 83       	st	Z, r18
   188d0:	84 87       	std	Z+12, r24	; 0x0c
   188d2:	e7 e1       	ldi	r30, 0x17	; 23
   188d4:	f2 e1       	ldi	r31, 0x12	; 18
   188d6:	13 82       	std	Z+3, r1	; 0x03
   188d8:	12 82       	std	Z+2, r1	; 0x02
   188da:	44 82       	std	Z+4, r4	; 0x04
   188dc:	55 82       	std	Z+5, r5	; 0x05
   188de:	66 82       	std	Z+6, r6	; 0x06
   188e0:	77 82       	std	Z+7, r7	; 0x07
   188e2:	28 ea       	ldi	r18, 0xA8	; 168
   188e4:	32 e0       	ldi	r19, 0x02	; 2
   188e6:	31 83       	std	Z+1, r19	; 0x01
   188e8:	20 83       	st	Z, r18
   188ea:	84 87       	std	Z+12, r24	; 0x0c
   188ec:	d0 8b       	std	Z+16, r29	; 0x10
   188ee:	c7 87       	std	Z+15, r28	; 0x0f
   188f0:	11 8a       	std	Z+17, r1	; 0x11
   188f2:	12 8a       	std	Z+18, r1	; 0x12
   188f4:	13 8a       	std	Z+19, r1	; 0x13
   188f6:	14 8a       	std	Z+20, r1	; 0x14
   188f8:	d0 93 0a 12 	sts	0x120A, r29	; 0x80120a <mqtt_client+0x210>
   188fc:	c0 93 09 12 	sts	0x1209, r28	; 0x801209 <mqtt_client+0x20f>
   18900:	10 92 0b 12 	sts	0x120B, r1	; 0x80120b <mqtt_client+0x211>
   18904:	10 92 0c 12 	sts	0x120C, r1	; 0x80120c <mqtt_client+0x212>
   18908:	10 92 0d 12 	sts	0x120D, r1	; 0x80120d <mqtt_client+0x213>
   1890c:	10 92 0e 12 	sts	0x120E, r1	; 0x80120e <mqtt_client+0x214>
   18910:	cc 24       	eor	r12, r12
   18912:	ca 94       	dec	r12
   18914:	dc 2c       	mov	r13, r12
   18916:	d0 92 16 12 	sts	0x1216, r13	; 0x801216 <mqtt_client+0x21c>
   1891a:	c0 92 15 12 	sts	0x1215, r12	; 0x801215 <mqtt_client+0x21b>
   1891e:	b0 93 fb 0f 	sts	0x0FFB, r27	; 0x800ffb <mqtt_client+0x1>
   18922:	a0 93 fa 0f 	sts	0x0FFA, r26	; 0x800ffa <mqtt_client>
   18926:	10 92 14 12 	sts	0x1214, r1	; 0x801214 <mqtt_client+0x21a>
   1892a:	10 92 13 12 	sts	0x1213, r1	; 0x801213 <mqtt_client+0x219>
   1892e:	e4 ef       	ldi	r30, 0xF4	; 244
   18930:	ff e0       	ldi	r31, 0x0F	; 15
   18932:	13 82       	std	Z+3, r1	; 0x03
   18934:	12 82       	std	Z+2, r1	; 0x02
   18936:	8a e9       	ldi	r24, 0x9A	; 154
   18938:	92 e0       	ldi	r25, 0x02	; 2
   1893a:	91 83       	std	Z+1, r25	; 0x01
   1893c:	80 83       	st	Z, r24
   1893e:	80 e5       	ldi	r24, 0x50	; 80
   18940:	90 e0       	ldi	r25, 0x00	; 0
   18942:	95 83       	std	Z+5, r25	; 0x05
   18944:	84 83       	std	Z+4, r24	; 0x04
   18946:	ec ed       	ldi	r30, 0xDC	; 220
   18948:	ff e0       	ldi	r31, 0x0F	; 15
   1894a:	83 e0       	ldi	r24, 0x03	; 3
   1894c:	90 e0       	ldi	r25, 0x00	; 0
   1894e:	91 83       	std	Z+1, r25	; 0x01
   18950:	80 83       	st	Z, r24
   18952:	82 e0       	ldi	r24, 0x02	; 2
   18954:	90 e0       	ldi	r25, 0x00	; 0
   18956:	93 83       	std	Z+3, r25	; 0x03
   18958:	82 83       	std	Z+2, r24	; 0x02
   1895a:	16 82       	std	Z+6, r1	; 0x06
   1895c:	80 e2       	ldi	r24, 0x20	; 32
   1895e:	87 83       	std	Z+7, r24	; 0x07
   18960:	10 86       	std	Z+8, r1	; 0x08
   18962:	85 e0       	ldi	r24, 0x05	; 5
   18964:	86 87       	std	Z+14, r24	; 0x0e
   18966:	85 e0       	ldi	r24, 0x05	; 5
   18968:	90 e0       	ldi	r25, 0x00	; 0
   1896a:	a0 e0       	ldi	r26, 0x00	; 0
   1896c:	b0 e0       	ldi	r27, 0x00	; 0
   1896e:	84 8b       	std	Z+20, r24	; 0x14
   18970:	95 8b       	std	Z+21, r25	; 0x15
   18972:	a6 8b       	std	Z+22, r26	; 0x16
   18974:	b7 8b       	std	Z+23, r27	; 0x17
   18976:	11 86       	std	Z+9, r1	; 0x09
   18978:	ac ec       	ldi	r26, 0xCC	; 204
   1897a:	b2 e1       	ldi	r27, 0x12	; 18
   1897c:	d0 96       	adiw	r26, 0x30	; 48
   1897e:	fc 93       	st	X, r31
   18980:	ee 93       	st	-X, r30
   18982:	9f 97       	sbiw	r26, 0x2f	; 47
   18984:	81 e0       	ldi	r24, 0x01	; 1
   18986:	93 e1       	ldi	r25, 0x13	; 19
   18988:	90 93 9c 13 	sts	0x139C, r25	; 0x80139c <network+0xd0>
   1898c:	80 93 9b 13 	sts	0x139B, r24	; 0x80139b <network+0xcf>
   18990:	89 ea       	ldi	r24, 0xA9	; 169
   18992:	93 e1       	ldi	r25, 0x13	; 19
   18994:	90 93 a8 13 	sts	0x13A8, r25	; 0x8013a8 <network+0xdc>
   18998:	80 93 a7 13 	sts	0x13A7, r24	; 0x8013a7 <network+0xdb>
   1899c:	8d e9       	ldi	r24, 0x9D	; 157
   1899e:	93 e1       	ldi	r25, 0x13	; 19
   189a0:	98 96       	adiw	r26, 0x28	; 40
   189a2:	9c 93       	st	X, r25
   189a4:	8e 93       	st	-X, r24
   189a6:	97 97       	sbiw	r26, 0x27	; 39
   189a8:	9b 96       	adiw	r26, 0x2b	; 43
   189aa:	1d 92       	st	X+, r1
   189ac:	1d 92       	st	X+, r1
   189ae:	1d 92       	st	X+, r1
   189b0:	1c 92       	st	X, r1
   189b2:	9e 97       	sbiw	r26, 0x2e	; 46
   189b4:	9a 96       	adiw	r26, 0x2a	; 42
   189b6:	1c 92       	st	X, r1
   189b8:	9a 97       	sbiw	r26, 0x2a	; 42
   189ba:	99 96       	adiw	r26, 0x29	; 41
   189bc:	1c 92       	st	X, r1
   189be:	99 97       	sbiw	r26, 0x29	; 41
   189c0:	1c 92       	st	X, r1
   189c2:	c4 eb       	ldi	r28, 0xB4	; 180
   189c4:	d2 e1       	ldi	r29, 0x12	; 18
   189c6:	ff 83       	std	Y+7, r31	; 0x07
   189c8:	ee 83       	std	Y+6, r30	; 0x06
   189ca:	b9 87       	std	Y+9, r27	; 0x09
   189cc:	a8 87       	std	Y+8, r26	; 0x08
   189ce:	cf ec       	ldi	r28, 0xCF	; 207
   189d0:	df e0       	ldi	r29, 0x0F	; 15
   189d2:	f9 82       	std	Y+1, r15	; 0x01
   189d4:	e8 82       	st	Y, r14
   189d6:	88 e4       	ldi	r24, 0x48	; 72
   189d8:	8a 83       	std	Y+2, r24	; 0x02
   189da:	ec e0       	ldi	r30, 0x0C	; 12
   189dc:	f2 e0       	ldi	r31, 0x02	; 2
   189de:	fc 87       	std	Y+12, r31	; 0x0c
   189e0:	eb 87       	std	Y+11, r30	; 0x0b
   189e2:	91 81       	ldd	r25, Z+1	; 0x01
   189e4:	9b 83       	std	Y+3, r25	; 0x03
   189e6:	80 81       	ld	r24, Z
   189e8:	89 1b       	sub	r24, r25
   189ea:	99 0b       	sbc	r25, r25
   189ec:	ee 24       	eor	r14, r14
   189ee:	e3 94       	inc	r14
   189f0:	f1 2c       	mov	r15, r1
   189f2:	97 01       	movw	r18, r14
   189f4:	02 c0       	rjmp	.+4      	; 0x189fa <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7340+0x332>
   189f6:	22 0f       	add	r18, r18
   189f8:	33 1f       	adc	r19, r19
   189fa:	8a 95       	dec	r24
   189fc:	e2 f7       	brpl	.-8      	; 0x189f6 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7340+0x32e>
   189fe:	c9 01       	movw	r24, r18
   18a00:	91 95       	neg	r25
   18a02:	81 95       	neg	r24
   18a04:	91 09       	sbc	r25, r1
   18a06:	9d 83       	std	Y+5, r25	; 0x05
   18a08:	8c 83       	std	Y+4, r24	; 0x04
   18a0a:	82 81       	ldd	r24, Z+2	; 0x02
   18a0c:	8e 83       	std	Y+6, r24	; 0x06
   18a0e:	b7 01       	movw	r22, r14
   18a10:	02 c0       	rjmp	.+4      	; 0x18a16 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7340+0x34e>
   18a12:	66 0f       	add	r22, r22
   18a14:	77 1f       	adc	r23, r23
   18a16:	8a 95       	dec	r24
   18a18:	e2 f7       	brpl	.-8      	; 0x18a12 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7340+0x34a>
   18a1a:	07 2e       	mov	r0, r23
   18a1c:	00 0c       	add	r0, r0
   18a1e:	88 0b       	sbc	r24, r24
   18a20:	99 0b       	sbc	r25, r25
   18a22:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
   18a26:	9b 01       	movw	r18, r22
   18a28:	ac 01       	movw	r20, r24
   18a2a:	60 e0       	ldi	r22, 0x00	; 0
   18a2c:	70 e0       	ldi	r23, 0x00	; 0
   18a2e:	80 e8       	ldi	r24, 0x80	; 128
   18a30:	9f e3       	ldi	r25, 0x3F	; 63
   18a32:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
   18a36:	6f 83       	std	Y+7, r22	; 0x07
   18a38:	78 87       	std	Y+8, r23	; 0x08
   18a3a:	89 87       	std	Y+9, r24	; 0x09
   18a3c:	9a 87       	std	Y+10, r25	; 0x0a
   18a3e:	c4 e8       	ldi	r28, 0x84	; 132
   18a40:	df e0       	ldi	r29, 0x0F	; 15
   18a42:	80 e0       	ldi	r24, 0x00	; 0
   18a44:	98 ef       	ldi	r25, 0xF8	; 248
   18a46:	99 87       	std	Y+9, r25	; 0x09
   18a48:	88 87       	std	Y+8, r24	; 0x08
   18a4a:	20 ee       	ldi	r18, 0xE0	; 224
   18a4c:	37 e0       	ldi	r19, 0x07	; 7
   18a4e:	3f 83       	std	Y+7, r19	; 0x07
   18a50:	2e 83       	std	Y+6, r18	; 0x06
   18a52:	9b 87       	std	Y+11, r25	; 0x0b
   18a54:	8a 87       	std	Y+10, r24	; 0x0a
   18a56:	ac 86       	std	Y+12, r10	; 0x0c
   18a58:	1d 86       	std	Y+13, r1	; 0x0d
   18a5a:	86 e8       	ldi	r24, 0x86	; 134
   18a5c:	92 e0       	ldi	r25, 0x02	; 2
   18a5e:	99 83       	std	Y+1, r25	; 0x01
   18a60:	88 83       	st	Y, r24
   18a62:	82 e2       	ldi	r24, 0x22	; 34
   18a64:	8e af       	std	Y+62, r24	; 0x3e
   18a66:	e9 e2       	ldi	r30, 0x29	; 41
   18a68:	f8 e6       	ldi	r31, 0x68	; 104
   18a6a:	e4 91       	lpm	r30, Z
   18a6c:	f0 e0       	ldi	r31, 0x00	; 0
   18a6e:	ee 0f       	add	r30, r30
   18a70:	ff 1f       	adc	r31, r31
   18a72:	e8 50       	subi	r30, 0x08	; 8
   18a74:	f8 49       	sbci	r31, 0x98	; 152
   18a76:	a5 91       	lpm	r26, Z+
   18a78:	b4 91       	lpm	r27, Z
   18a7a:	bf a7       	std	Y+47, r27	; 0x2f
   18a7c:	ae a7       	std	Y+46, r26	; 0x2e
   18a7e:	eb e2       	ldi	r30, 0x2B	; 43
   18a80:	f8 e6       	ldi	r31, 0x68	; 104
   18a82:	e4 91       	lpm	r30, Z
   18a84:	f0 e0       	ldi	r31, 0x00	; 0
   18a86:	ee 0f       	add	r30, r30
   18a88:	ff 1f       	adc	r31, r31
   18a8a:	e8 50       	subi	r30, 0x08	; 8
   18a8c:	f8 49       	sbci	r31, 0x98	; 152
   18a8e:	85 91       	lpm	r24, Z+
   18a90:	94 91       	lpm	r25, Z
   18a92:	99 ab       	std	Y+49, r25	; 0x31
   18a94:	88 ab       	std	Y+48, r24	; 0x30
   18a96:	ec e2       	ldi	r30, 0x2C	; 44
   18a98:	f8 e6       	ldi	r31, 0x68	; 104
   18a9a:	e4 91       	lpm	r30, Z
   18a9c:	f0 e0       	ldi	r31, 0x00	; 0
   18a9e:	ee 0f       	add	r30, r30
   18aa0:	ff 1f       	adc	r31, r31
   18aa2:	e8 50       	subi	r30, 0x08	; 8
   18aa4:	f8 49       	sbci	r31, 0x98	; 152
   18aa6:	85 91       	lpm	r24, Z+
   18aa8:	94 91       	lpm	r25, Z
   18aaa:	9b ab       	std	Y+51, r25	; 0x33
   18aac:	8a ab       	std	Y+50, r24	; 0x32
   18aae:	e8 e2       	ldi	r30, 0x28	; 40
   18ab0:	f8 e6       	ldi	r31, 0x68	; 104
   18ab2:	e4 91       	lpm	r30, Z
   18ab4:	f0 e0       	ldi	r31, 0x00	; 0
   18ab6:	ee 0f       	add	r30, r30
   18ab8:	ff 1f       	adc	r31, r31
   18aba:	e8 50       	subi	r30, 0x08	; 8
   18abc:	f8 49       	sbci	r31, 0x98	; 152
   18abe:	85 91       	lpm	r24, Z+
   18ac0:	94 91       	lpm	r25, Z
   18ac2:	9d ab       	std	Y+53, r25	; 0x35
   18ac4:	8c ab       	std	Y+52, r24	; 0x34
   18ac6:	e3 ee       	ldi	r30, 0xE3	; 227
   18ac8:	f7 e6       	ldi	r31, 0x67	; 103
   18aca:	84 91       	lpm	r24, Z
   18acc:	8e ab       	std	Y+54, r24	; 0x36
   18ace:	e5 ee       	ldi	r30, 0xE5	; 229
   18ad0:	f7 e6       	ldi	r31, 0x67	; 103
   18ad2:	24 91       	lpm	r18, Z
   18ad4:	2f ab       	std	Y+55, r18	; 0x37
   18ad6:	e6 ee       	ldi	r30, 0xE6	; 230
   18ad8:	f7 e6       	ldi	r31, 0x67	; 103
   18ada:	94 91       	lpm	r25, Z
   18adc:	98 af       	std	Y+56, r25	; 0x38
   18ade:	e2 ee       	ldi	r30, 0xE2	; 226
   18ae0:	f7 e6       	ldi	r31, 0x67	; 103
   18ae2:	e4 91       	lpm	r30, Z
   18ae4:	e9 af       	std	Y+57, r30	; 0x39
   18ae6:	38 2f       	mov	r19, r24
   18ae8:	30 95       	com	r19
   18aea:	3a af       	std	Y+58, r19	; 0x3a
   18aec:	20 95       	com	r18
   18aee:	2b af       	std	Y+59, r18	; 0x3b
   18af0:	90 95       	com	r25
   18af2:	9c af       	std	Y+60, r25	; 0x3c
   18af4:	e0 95       	com	r30
   18af6:	ed af       	std	Y+61, r30	; 0x3d
   18af8:	ec 91       	ld	r30, X
   18afa:	e8 2b       	or	r30, r24
   18afc:	ec 93       	st	X, r30
   18afe:	e8 a9       	ldd	r30, Y+48	; 0x30
   18b00:	f9 a9       	ldd	r31, Y+49	; 0x31
   18b02:	80 81       	ld	r24, Z
   18b04:	9f a9       	ldd	r25, Y+55	; 0x37
   18b06:	89 2b       	or	r24, r25
   18b08:	80 83       	st	Z, r24
   18b0a:	ea a9       	ldd	r30, Y+50	; 0x32
   18b0c:	fb a9       	ldd	r31, Y+51	; 0x33
   18b0e:	80 81       	ld	r24, Z
   18b10:	98 ad       	ldd	r25, Y+56	; 0x38
   18b12:	89 2b       	or	r24, r25
   18b14:	80 83       	st	Z, r24
   18b16:	ec a9       	ldd	r30, Y+52	; 0x34
   18b18:	fd a9       	ldd	r31, Y+53	; 0x35
   18b1a:	80 81       	ld	r24, Z
   18b1c:	99 ad       	ldd	r25, Y+57	; 0x39
   18b1e:	89 2b       	or	r24, r25
   18b20:	80 83       	st	Z, r24
   18b22:	61 e0       	ldi	r22, 0x01	; 1
   18b24:	81 e2       	ldi	r24, 0x21	; 33
   18b26:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
   18b2a:	61 e0       	ldi	r22, 0x01	; 1
   18b2c:	83 e2       	ldi	r24, 0x23	; 35
   18b2e:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
   18b32:	61 e0       	ldi	r22, 0x01	; 1
   18b34:	84 e2       	ldi	r24, 0x24	; 36
   18b36:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
   18b3a:	61 e0       	ldi	r22, 0x01	; 1
   18b3c:	80 e2       	ldi	r24, 0x20	; 32
   18b3e:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
   18b42:	61 e0       	ldi	r22, 0x01	; 1
   18b44:	82 e2       	ldi	r24, 0x22	; 34
   18b46:	0e 94 ad b8 	call	0x1715a	; 0x1715a <digitalWrite>
   18b4a:	61 e0       	ldi	r22, 0x01	; 1
   18b4c:	82 e2       	ldi	r24, 0x22	; 34
   18b4e:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
   18b52:	1f 8a       	std	Y+23, r1	; 0x17
   18b54:	1e 8a       	std	Y+22, r1	; 0x16
   18b56:	86 e9       	ldi	r24, 0x96	; 150
   18b58:	97 e7       	ldi	r25, 0x77	; 119
   18b5a:	9b 8f       	std	Y+27, r25	; 0x1b
   18b5c:	8a 8f       	std	Y+26, r24	; 0x1a
   18b5e:	20 e4       	ldi	r18, 0x40	; 64
   18b60:	31 e0       	ldi	r19, 0x01	; 1
   18b62:	3f 87       	std	Y+15, r19	; 0x0f
   18b64:	2e 87       	std	Y+14, r18	; 0x0e
   18b66:	80 ee       	ldi	r24, 0xE0	; 224
   18b68:	91 e0       	ldi	r25, 0x01	; 1
   18b6a:	99 8b       	std	Y+17, r25	; 0x11
   18b6c:	88 8b       	std	Y+16, r24	; 0x10
   18b6e:	41 b1       	in	r20, 0x01	; 1
   18b70:	4f ef       	ldi	r20, 0xFF	; 255
   18b72:	41 b9       	out	0x01, r20	; 1
   18b74:	3b 8b       	std	Y+19, r19	; 0x13
   18b76:	2a 8b       	std	Y+18, r18	; 0x12
   18b78:	9d 8b       	std	Y+21, r25	; 0x15
   18b7a:	8c 8b       	std	Y+20, r24	; 0x14
   18b7c:	e4 e2       	ldi	r30, 0x24	; 36
   18b7e:	f8 e6       	ldi	r31, 0x68	; 104
   18b80:	e4 91       	lpm	r30, Z
   18b82:	f0 e0       	ldi	r31, 0x00	; 0
   18b84:	ee 0f       	add	r30, r30
   18b86:	ff 1f       	adc	r31, r31
   18b88:	e8 50       	subi	r30, 0x08	; 8
   18b8a:	f8 49       	sbci	r31, 0x98	; 152
   18b8c:	85 91       	lpm	r24, Z+
   18b8e:	94 91       	lpm	r25, Z
   18b90:	c1 e6       	ldi	r28, 0x61	; 97
   18b92:	df e0       	ldi	r29, 0x0F	; 15
   18b94:	9a 8b       	std	Y+18, r25	; 0x12
   18b96:	89 8b       	std	Y+17, r24	; 0x11
   18b98:	e3 e2       	ldi	r30, 0x23	; 35
   18b9a:	f8 e6       	ldi	r31, 0x68	; 104
   18b9c:	e4 91       	lpm	r30, Z
   18b9e:	f0 e0       	ldi	r31, 0x00	; 0
   18ba0:	ee 0f       	add	r30, r30
   18ba2:	ff 1f       	adc	r31, r31
   18ba4:	e8 50       	subi	r30, 0x08	; 8
   18ba6:	f8 49       	sbci	r31, 0x98	; 152
   18ba8:	85 91       	lpm	r24, Z+
   18baa:	94 91       	lpm	r25, Z
   18bac:	9c 8b       	std	Y+20, r25	; 0x14
   18bae:	8b 8b       	std	Y+19, r24	; 0x13
   18bb0:	e5 e2       	ldi	r30, 0x25	; 37
   18bb2:	f8 e6       	ldi	r31, 0x68	; 104
   18bb4:	e4 91       	lpm	r30, Z
   18bb6:	f0 e0       	ldi	r31, 0x00	; 0
   18bb8:	ee 0f       	add	r30, r30
   18bba:	ff 1f       	adc	r31, r31
   18bbc:	ee 54       	subi	r30, 0x4E	; 78
   18bbe:	f8 49       	sbci	r31, 0x98	; 152
   18bc0:	85 91       	lpm	r24, Z+
   18bc2:	94 91       	lpm	r25, Z
   18bc4:	9e 8b       	std	Y+22, r25	; 0x16
   18bc6:	8d 8b       	std	Y+21, r24	; 0x15
   18bc8:	e6 e2       	ldi	r30, 0x26	; 38
   18bca:	f8 e6       	ldi	r31, 0x68	; 104
   18bcc:	e4 91       	lpm	r30, Z
   18bce:	f0 e0       	ldi	r31, 0x00	; 0
   18bd0:	ee 0f       	add	r30, r30
   18bd2:	ff 1f       	adc	r31, r31
   18bd4:	e8 50       	subi	r30, 0x08	; 8
   18bd6:	f8 49       	sbci	r31, 0x98	; 152
   18bd8:	85 91       	lpm	r24, Z+
   18bda:	94 91       	lpm	r25, Z
   18bdc:	98 8f       	std	Y+24, r25	; 0x18
   18bde:	8f 8b       	std	Y+23, r24	; 0x17
   18be0:	ef e0       	ldi	r30, 0x0F	; 15
   18be2:	f8 e6       	ldi	r31, 0x68	; 104
   18be4:	e4 91       	lpm	r30, Z
   18be6:	f0 e0       	ldi	r31, 0x00	; 0
   18be8:	ee 0f       	add	r30, r30
   18bea:	ff 1f       	adc	r31, r31
   18bec:	ee 54       	subi	r30, 0x4E	; 78
   18bee:	f8 49       	sbci	r31, 0x98	; 152
   18bf0:	85 91       	lpm	r24, Z+
   18bf2:	94 91       	lpm	r25, Z
   18bf4:	9a 8f       	std	Y+26, r25	; 0x1a
   18bf6:	89 8f       	std	Y+25, r24	; 0x19
   18bf8:	e7 e2       	ldi	r30, 0x27	; 39
   18bfa:	f8 e6       	ldi	r31, 0x68	; 104
   18bfc:	e4 91       	lpm	r30, Z
   18bfe:	f0 e0       	ldi	r31, 0x00	; 0
   18c00:	ee 0f       	add	r30, r30
   18c02:	ff 1f       	adc	r31, r31
   18c04:	e8 50       	subi	r30, 0x08	; 8
   18c06:	f8 49       	sbci	r31, 0x98	; 152
   18c08:	85 91       	lpm	r24, Z+
   18c0a:	94 91       	lpm	r25, Z
   18c0c:	9c 8f       	std	Y+28, r25	; 0x1c
   18c0e:	8b 8f       	std	Y+27, r24	; 0x1b
   18c10:	ee ed       	ldi	r30, 0xDE	; 222
   18c12:	f7 e6       	ldi	r31, 0x67	; 103
   18c14:	e4 91       	lpm	r30, Z
   18c16:	ed 8f       	std	Y+29, r30	; 0x1d
   18c18:	ed ed       	ldi	r30, 0xDD	; 221
   18c1a:	f7 e6       	ldi	r31, 0x67	; 103
   18c1c:	e4 91       	lpm	r30, Z
   18c1e:	ee 8f       	std	Y+30, r30	; 0x1e
   18c20:	ef ed       	ldi	r30, 0xDF	; 223
   18c22:	f7 e6       	ldi	r31, 0x67	; 103
   18c24:	e4 91       	lpm	r30, Z
   18c26:	ef 8f       	std	Y+31, r30	; 0x1f
   18c28:	e0 ee       	ldi	r30, 0xE0	; 224
   18c2a:	f7 e6       	ldi	r31, 0x67	; 103
   18c2c:	e4 91       	lpm	r30, Z
   18c2e:	e8 a3       	std	Y+32, r30	; 0x20
   18c30:	e9 ec       	ldi	r30, 0xC9	; 201
   18c32:	f7 e6       	ldi	r31, 0x67	; 103
   18c34:	e4 91       	lpm	r30, Z
   18c36:	e9 a3       	std	Y+33, r30	; 0x21
   18c38:	e1 ee       	ldi	r30, 0xE1	; 225
   18c3a:	f7 e6       	ldi	r31, 0x67	; 103
   18c3c:	e4 91       	lpm	r30, Z
   18c3e:	ea a3       	std	Y+34, r30	; 0x22
   18c40:	61 e0       	ldi	r22, 0x01	; 1
   18c42:	8c e1       	ldi	r24, 0x1C	; 28
   18c44:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
   18c48:	61 e0       	ldi	r22, 0x01	; 1
   18c4a:	8b e1       	ldi	r24, 0x1B	; 27
   18c4c:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
   18c50:	60 e0       	ldi	r22, 0x00	; 0
   18c52:	8d e1       	ldi	r24, 0x1D	; 29
   18c54:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
   18c58:	61 e0       	ldi	r22, 0x01	; 1
   18c5a:	8e e1       	ldi	r24, 0x1E	; 30
   18c5c:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
   18c60:	60 e0       	ldi	r22, 0x00	; 0
   18c62:	87 e0       	ldi	r24, 0x07	; 7
   18c64:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
   18c68:	61 e0       	ldi	r22, 0x01	; 1
   18c6a:	8f e1       	ldi	r24, 0x1F	; 31
   18c6c:	0e 94 07 bb 	call	0x1760e	; 0x1760e <pinMode>
   18c70:	1c 86       	std	Y+12, r1	; 0x0c
   18c72:	1d 86       	std	Y+13, r1	; 0x0d
   18c74:	1e 86       	std	Y+14, r1	; 0x0e
   18c76:	1f 86       	std	Y+15, r1	; 0x0f
   18c78:	18 8a       	std	Y+16, r1	; 0x10
   18c7a:	19 86       	std	Y+9, r1	; 0x09
   18c7c:	18 86       	std	Y+8, r1	; 0x08
   18c7e:	1b 86       	std	Y+11, r1	; 0x0b
   18c80:	1a 86       	std	Y+10, r1	; 0x0a
   18c82:	19 82       	std	Y+1, r1	; 0x01
   18c84:	18 82       	st	Y, r1
   18c86:	1b 82       	std	Y+3, r1	; 0x03
   18c88:	1a 82       	std	Y+2, r1	; 0x02
   18c8a:	dd 82       	std	Y+5, r13	; 0x05
   18c8c:	cc 82       	std	Y+4, r12	; 0x04
   18c8e:	df 82       	std	Y+7, r13	; 0x07
   18c90:	ce 82       	std	Y+6, r12	; 0x06
   18c92:	e2 e5       	ldi	r30, 0x52	; 82
   18c94:	fe e0       	ldi	r31, 0x0E	; 14
   18c96:	b0 82       	st	Z, r11
   18c98:	8b e5       	ldi	r24, 0x5B	; 91
   18c9a:	9e e0       	ldi	r25, 0x0E	; 14
   18c9c:	94 83       	std	Z+4, r25	; 0x04
   18c9e:	83 83       	std	Z+3, r24	; 0x03
   18ca0:	80 e0       	ldi	r24, 0x00	; 0
   18ca2:	91 e0       	ldi	r25, 0x01	; 1
   18ca4:	96 83       	std	Z+6, r25	; 0x06
   18ca6:	85 83       	std	Z+5, r24	; 0x05
   18ca8:	10 86       	std	Z+8, r1	; 0x08
   18caa:	17 82       	std	Z+7, r1	; 0x07
   18cac:	20 e8       	ldi	r18, 0x80	; 128
   18cae:	32 e0       	ldi	r19, 0x02	; 2
   18cb0:	32 83       	std	Z+2, r19	; 0x02
   18cb2:	21 83       	std	Z+1, r18	; 0x01
   18cb4:	10 92 5c 0f 	sts	0x0F5C, r1	; 0x800f5c <doc+0x10a>
   18cb8:	10 92 5b 0f 	sts	0x0F5B, r1	; 0x800f5b <doc+0x109>
   18cbc:	e5 e4       	ldi	r30, 0x45	; 69
   18cbe:	fe e0       	ldi	r31, 0x0E	; 14
   18cc0:	40 e0       	ldi	r20, 0x00	; 0
   18cc2:	50 e0       	ldi	r21, 0x00	; 0
   18cc4:	62 e0       	ldi	r22, 0x02	; 2
   18cc6:	70 e0       	ldi	r23, 0x00	; 0
   18cc8:	44 83       	std	Z+4, r20	; 0x04
   18cca:	55 83       	std	Z+5, r21	; 0x05
   18ccc:	66 83       	std	Z+6, r22	; 0x06
   18cce:	77 83       	std	Z+7, r23	; 0x07
   18cd0:	f3 82       	std	Z+3, r15	; 0x03
   18cd2:	e2 82       	std	Z+2, r14	; 0x02
   18cd4:	11 83       	std	Z+1, r17	; 0x01
   18cd6:	00 83       	st	Z, r16
   18cd8:	26 e1       	ldi	r18, 0x16	; 22
   18cda:	20 87       	std	Z+8, r18	; 0x08
   18cdc:	e6 e3       	ldi	r30, 0x36	; 54
   18cde:	fe e0       	ldi	r31, 0x0E	; 14
   18ce0:	40 e0       	ldi	r20, 0x00	; 0
   18ce2:	50 e0       	ldi	r21, 0x00	; 0
   18ce4:	64 e0       	ldi	r22, 0x04	; 4
   18ce6:	70 e0       	ldi	r23, 0x00	; 0
   18ce8:	44 83       	std	Z+4, r20	; 0x04
   18cea:	55 83       	std	Z+5, r21	; 0x05
   18cec:	66 83       	std	Z+6, r22	; 0x06
   18cee:	77 83       	std	Z+7, r23	; 0x07
   18cf0:	91 87       	std	Z+9, r25	; 0x09
   18cf2:	80 87       	std	Z+8, r24	; 0x08
   18cf4:	13 82       	std	Z+3, r1	; 0x03
   18cf6:	12 82       	std	Z+2, r1	; 0x02
   18cf8:	11 83       	std	Z+1, r17	; 0x01
   18cfa:	00 83       	st	Z, r16
   18cfc:	87 e1       	ldi	r24, 0x17	; 23
   18cfe:	82 87       	std	Z+10, r24	; 0x0a
   18d00:	df 91       	pop	r29
   18d02:	cf 91       	pop	r28
   18d04:	1f 91       	pop	r17
   18d06:	0f 91       	pop	r16
   18d08:	ff 90       	pop	r15
   18d0a:	ef 90       	pop	r14
   18d0c:	df 90       	pop	r13
   18d0e:	cf 90       	pop	r12
   18d10:	bf 90       	pop	r11
   18d12:	af 90       	pop	r10
   18d14:	7f 90       	pop	r7
   18d16:	6f 90       	pop	r6
   18d18:	5f 90       	pop	r5
   18d1a:	4f 90       	pop	r4
   18d1c:	08 95       	ret

00018d1e <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
   18d1e:	cf 93       	push	r28
   18d20:	df 93       	push	r29
   18d22:	cd b7       	in	r28, 0x3d	; 61
   18d24:	de b7       	in	r29, 0x3e	; 62
   18d26:	cc 5b       	subi	r28, 0xBC	; 188
   18d28:	d1 09       	sbc	r29, r1
   18d2a:	0f b6       	in	r0, 0x3f	; 63
   18d2c:	f8 94       	cli
   18d2e:	de bf       	out	0x3e, r29	; 62
   18d30:	0f be       	out	0x3f, r0	; 63
   18d32:	cd bf       	out	0x3d, r28	; 61
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   18d34:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   18d36:	84 b5       	in	r24, 0x24	; 36
   18d38:	83 60       	ori	r24, 0x03	; 3
   18d3a:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   18d3c:	85 b5       	in	r24, 0x25	; 37
   18d3e:	83 60       	ori	r24, 0x03	; 3
   18d40:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   18d42:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   18d46:	81 60       	ori	r24, 0x01	; 1
   18d48:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   18d4c:	82 e0       	ldi	r24, 0x02	; 2
   18d4e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   18d52:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   18d56:	81 60       	ori	r24, 0x01	; 1
   18d58:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   18d5c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   18d60:	81 60       	ori	r24, 0x01	; 1
   18d62:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   18d66:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   18d6a:	84 60       	ori	r24, 0x04	; 4
   18d6c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   18d70:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   18d74:	81 60       	ori	r24, 0x01	; 1
   18d76:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   18d7a:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   18d7e:	83 60       	ori	r24, 0x03	; 3
   18d80:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   18d84:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   18d88:	81 60       	ori	r24, 0x01	; 1
   18d8a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   18d8e:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   18d92:	83 60       	ori	r24, 0x03	; 3
   18d94:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   18d98:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   18d9c:	81 60       	ori	r24, 0x01	; 1
   18d9e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   18da2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   18da6:	83 60       	ori	r24, 0x03	; 3
   18da8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   18dac:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   18db0:	81 60       	ori	r24, 0x01	; 1
   18db2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   18db6:	87 e8       	ldi	r24, 0x87	; 135
   18db8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   18dbc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   18dc0:	0e 94 5c 9b 	call	0x136b8	; 0x136b8 <setup>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3156
        avg = avg / MAX_AVG_TEMP;
        avg = avg / 10;
        itoa(avg, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);

        strcpy(payload, tds.name);
   18dc4:	21 e4       	ldi	r18, 0x41	; 65
   18dc6:	30 e0       	ldi	r19, 0x00	; 0
   18dc8:	2c 0f       	add	r18, r28
   18dca:	3d 1f       	adc	r19, r29
   18dcc:	24 5f       	subi	r18, 0xF4	; 244
   18dce:	3f 4f       	sbci	r19, 0xFF	; 255
   18dd0:	c5 54       	subi	r28, 0x45	; 69
   18dd2:	df 4f       	sbci	r29, 0xFF	; 255
   18dd4:	39 83       	std	Y+1, r19	; 0x01
   18dd6:	28 83       	st	Y, r18
   18dd8:	cb 5b       	subi	r28, 0xBB	; 187
   18dda:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4116
  char str1[16];
  unsigned long load_now;
  long mil;


  load_now = millis();
   18ddc:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   18de0:	cb 54       	subi	r28, 0x4B	; 75
   18de2:	df 4f       	sbci	r29, 0xFF	; 255
   18de4:	68 83       	st	Y, r22
   18de6:	79 83       	std	Y+1, r23	; 0x01
   18de8:	8a 83       	std	Y+2, r24	; 0x02
   18dea:	9b 83       	std	Y+3, r25	; 0x03
   18dec:	c5 5b       	subi	r28, 0xB5	; 181
   18dee:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4117
  if (mqtt_reconnect() == 0)
   18df0:	0e 94 c0 73 	call	0xe780	; 0xe780 <mqtt_reconnect()>
   18df4:	81 11       	cpse	r24, r1
   18df6:	8a c0       	rjmp	.+276    	; 0x18f0c <main+0x1ee>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3368
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   18df8:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <selftest_data>
   18dfc:	8f 7d       	andi	r24, 0xDF	; 223
   18dfe:	80 93 65 0c 	sts	0x0C65, r24	; 0x800c65 <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4122
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
   18e02:	0e 94 15 be 	call	0x17c2a	; 0x17c2a <PubSubClient::loop() [clone .constprop.86]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4125


  if (ethClient1.connected())
   18e06:	82 e3       	ldi	r24, 0x32	; 50
   18e08:	92 e1       	ldi	r25, 0x12	; 18
   18e0a:	0e 94 10 5c 	call	0xb820	; 0xb820 <EthernetClient::connected()>
   18e0e:	88 23       	and	r24, r24
   18e10:	21 f0       	breq	.+8      	; 0x18e1a <main+0xfc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4126
    ethClient1.stop();
   18e12:	82 e3       	ldi	r24, 0x32	; 50
   18e14:	92 e1       	ldi	r25, 0x12	; 18
   18e16:	0e 94 33 5c 	call	0xb866	; 0xb866 <EthernetClient::stop()>
available():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:53
  }
}

EthernetClient EthernetServer::available()
{
  accept();
   18e1a:	84 ef       	ldi	r24, 0xF4	; 244
   18e1c:	9f e0       	ldi	r25, 0x0F	; 15
   18e1e:	0e 94 75 5c 	call	0xb8ea	; 0xb8ea <EthernetServer::accept()>
   18e22:	28 e4       	ldi	r18, 0x48	; 72
   18e24:	e2 2e       	mov	r14, r18
   18e26:	2b e0       	ldi	r18, 0x0B	; 11
   18e28:	f2 2e       	mov	r15, r18
   18e2a:	10 e0       	ldi	r17, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   18e2c:	38 ee       	ldi	r19, 0xE8	; 232
   18e2e:	83 2e       	mov	r8, r19
   18e30:	33 e0       	ldi	r19, 0x03	; 3
   18e32:	93 2e       	mov	r9, r19
   18e34:	a1 2c       	mov	r10, r1
   18e36:	b1 2c       	mov	r11, r1
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
   18e38:	40 ed       	ldi	r20, 0xD0	; 208
   18e3a:	c4 2e       	mov	r12, r20
   18e3c:	42 e0       	ldi	r20, 0x02	; 2
   18e3e:	d4 2e       	mov	r13, r20
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   18e40:	1c 82       	std	Y+4, r1	; 0x04
   18e42:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   18e44:	8d 82       	std	Y+5, r8	; 0x05
   18e46:	9e 82       	std	Y+6, r9	; 0x06
   18e48:	af 82       	std	Y+7, r10	; 0x07
   18e4a:	b8 86       	std	Y+8, r11	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   18e4c:	da 82       	std	Y+2, r13	; 0x02
   18e4e:	c9 82       	std	Y+1, r12	; 0x01
   18e50:	1d 87       	std	Y+13, r17	; 0x0d
available():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:57

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
   18e52:	f7 01       	movw	r30, r14
   18e54:	21 91       	ld	r18, Z+
   18e56:	31 91       	ld	r19, Z+
   18e58:	7f 01       	movw	r14, r30
   18e5a:	80 91 f8 0f 	lds	r24, 0x0FF8	; 0x800ff8 <http_server+0x4>
   18e5e:	90 91 f9 0f 	lds	r25, 0x0FF9	; 0x800ff9 <http_server+0x5>
   18e62:	28 17       	cp	r18, r24
   18e64:	39 07       	cpc	r19, r25
   18e66:	09 f0       	breq	.+2      	; 0x18e6a <main+0x14c>
   18e68:	5c c0       	rjmp	.+184    	; 0x18f22 <main+0x204>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:58
        (client.status() == SnSR::ESTABLISHED ||
   18e6a:	ce 01       	movw	r24, r28
   18e6c:	01 96       	adiw	r24, 0x01	; 1
   18e6e:	0e 94 06 5c 	call	0xb80c	; 0xb80c <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:57
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
   18e72:	87 31       	cpi	r24, 0x17	; 23
   18e74:	09 f0       	breq	.+2      	; 0x18e78 <main+0x15a>
   18e76:	4e c0       	rjmp	.+156    	; 0x18f14 <main+0x1f6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:60
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
      if (client.available()) {
   18e78:	ce 01       	movw	r24, r28
   18e7a:	01 96       	adiw	r24, 0x01	; 1
   18e7c:	0e 94 4f 3f 	call	0x7e9e	; 0x7e9e <EthernetClient::available()>
   18e80:	89 2b       	or	r24, r25
   18e82:	09 f4       	brne	.+2      	; 0x18e86 <main+0x168>
   18e84:	4e c0       	rjmp	.+156    	; 0x18f22 <main+0x204>
_ZN5PrintC2EOS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:37
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
   18e86:	8b 81       	ldd	r24, Y+3	; 0x03
   18e88:	9c 81       	ldd	r25, Y+4	; 0x04
   18e8a:	c7 56       	subi	r28, 0x67	; 103
   18e8c:	df 4f       	sbci	r29, 0xFF	; 255
   18e8e:	99 83       	std	Y+1, r25	; 0x01
   18e90:	88 83       	st	Y, r24
   18e92:	c9 59       	subi	r28, 0x99	; 153
   18e94:	d0 40       	sbci	r29, 0x00	; 0
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:49
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
   18e96:	8d 81       	ldd	r24, Y+5	; 0x05
   18e98:	9e 81       	ldd	r25, Y+6	; 0x06
   18e9a:	af 81       	ldd	r26, Y+7	; 0x07
   18e9c:	b8 85       	ldd	r27, Y+8	; 0x08
   18e9e:	c5 56       	subi	r28, 0x65	; 101
   18ea0:	df 4f       	sbci	r29, 0xFF	; 255
   18ea2:	88 83       	st	Y, r24
   18ea4:	99 83       	std	Y+1, r25	; 0x01
   18ea6:	aa 83       	std	Y+2, r26	; 0x02
   18ea8:	bb 83       	std	Y+3, r27	; 0x03
   18eaa:	cb 59       	subi	r28, 0x9B	; 155
   18eac:	d0 40       	sbci	r29, 0x00	; 0
   18eae:	89 85       	ldd	r24, Y+9	; 0x09
   18eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
   18eb2:	ab 85       	ldd	r26, Y+11	; 0x0b
   18eb4:	bc 85       	ldd	r27, Y+12	; 0x0c
   18eb6:	c1 56       	subi	r28, 0x61	; 97
   18eb8:	df 4f       	sbci	r29, 0xFF	; 255
   18eba:	88 83       	st	Y, r24
   18ebc:	99 83       	std	Y+1, r25	; 0x01
   18ebe:	aa 83       	std	Y+2, r26	; 0x02
   18ec0:	bb 83       	std	Y+3, r27	; 0x03
   18ec2:	cf 59       	subi	r28, 0x9F	; 159
   18ec4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:8
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
   18ec6:	80 ed       	ldi	r24, 0xD0	; 208
   18ec8:	92 e0       	ldi	r25, 0x02	; 2
   18eca:	c9 56       	subi	r28, 0x69	; 105
   18ecc:	df 4f       	sbci	r29, 0xFF	; 255
   18ece:	99 83       	std	Y+1, r25	; 0x01
   18ed0:	88 83       	st	Y, r24
   18ed2:	c7 59       	subi	r28, 0x97	; 151
   18ed4:	d0 40       	sbci	r29, 0x00	; 0
   18ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
   18ed8:	cd 55       	subi	r28, 0x5D	; 93
   18eda:	df 4f       	sbci	r29, 0xFF	; 255
   18edc:	88 83       	st	Y, r24
   18ede:	c3 5a       	subi	r28, 0xA3	; 163
   18ee0:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4130


  EthernetClient http_client = http_server.available();
  if (http_client.connected())
   18ee2:	ce 01       	movw	r24, r28
   18ee4:	89 56       	subi	r24, 0x69	; 105
   18ee6:	9f 4f       	sbci	r25, 0xFF	; 255
   18ee8:	0e 94 10 5c 	call	0xb820	; 0xb820 <EthernetClient::connected()>
   18eec:	88 23       	and	r24, r24
   18eee:	09 f4       	brne	.+2      	; 0x18ef2 <main+0x1d4>
   18ef0:	45 c0       	rjmp	.+138    	; 0x18f7c <main+0x25e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4132
  {
    while (http_client.available())
   18ef2:	ce 01       	movw	r24, r28
   18ef4:	89 56       	subi	r24, 0x69	; 105
   18ef6:	9f 4f       	sbci	r25, 0xFF	; 255
   18ef8:	0e 94 4f 3f 	call	0x7e9e	; 0x7e9e <EthernetClient::available()>
   18efc:	89 2b       	or	r24, r25
   18efe:	a9 f1       	breq	.+106    	; 0x18f6a <main+0x24c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4133
      http_client.read();
   18f00:	ce 01       	movw	r24, r28
   18f02:	89 56       	subi	r24, 0x69	; 105
   18f04:	9f 4f       	sbci	r25, 0xFF	; 255
   18f06:	0e 94 c9 5d 	call	0xbb92	; 0xbb92 <EthernetClient::read()>
   18f0a:	f3 cf       	rjmp	.-26     	; 0x18ef2 <main+0x1d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4120

  load_now = millis();
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);
   18f0c:	85 e0       	ldi	r24, 0x05	; 5
   18f0e:	0e 94 0a 72 	call	0xe414	; 0xe414 <selftest_set_0(unsigned char)>
   18f12:	77 cf       	rjmp	.-274    	; 0x18e02 <main+0xe4>
available():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:59

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
   18f14:	ce 01       	movw	r24, r28
   18f16:	01 96       	adiw	r24, 0x01	; 1
   18f18:	0e 94 06 5c 	call	0xb80c	; 0xb80c <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:58
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
   18f1c:	8c 31       	cpi	r24, 0x1C	; 28
   18f1e:	09 f4       	brne	.+2      	; 0x18f22 <main+0x204>
   18f20:	ab cf       	rjmp	.-170    	; 0x18e78 <main+0x15a>
   18f22:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:55

EthernetClient EthernetServer::available()
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   18f24:	18 30       	cpi	r17, 0x08	; 8
   18f26:	09 f0       	breq	.+2      	; 0x18f2a <main+0x20c>
   18f28:	8b cf       	rjmp	.-234    	; 0x18e40 <main+0x122>
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   18f2a:	c7 56       	subi	r28, 0x67	; 103
   18f2c:	df 4f       	sbci	r29, 0xFF	; 255
   18f2e:	19 82       	std	Y+1, r1	; 0x01
   18f30:	18 82       	st	Y, r1
   18f32:	c9 59       	subi	r28, 0x99	; 153
   18f34:	d0 40       	sbci	r29, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   18f36:	88 ee       	ldi	r24, 0xE8	; 232
   18f38:	93 e0       	ldi	r25, 0x03	; 3
   18f3a:	a0 e0       	ldi	r26, 0x00	; 0
   18f3c:	b0 e0       	ldi	r27, 0x00	; 0
   18f3e:	c5 56       	subi	r28, 0x65	; 101
   18f40:	df 4f       	sbci	r29, 0xFF	; 255
   18f42:	88 83       	st	Y, r24
   18f44:	99 83       	std	Y+1, r25	; 0x01
   18f46:	aa 83       	std	Y+2, r26	; 0x02
   18f48:	bb 83       	std	Y+3, r27	; 0x03
   18f4a:	cb 59       	subi	r28, 0x9B	; 155
   18f4c:	d0 40       	sbci	r29, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   18f4e:	80 ed       	ldi	r24, 0xD0	; 208
   18f50:	92 e0       	ldi	r25, 0x02	; 2
   18f52:	c9 56       	subi	r28, 0x69	; 105
   18f54:	df 4f       	sbci	r29, 0xFF	; 255
   18f56:	99 83       	std	Y+1, r25	; 0x01
   18f58:	88 83       	st	Y, r24
   18f5a:	c7 59       	subi	r28, 0x97	; 151
   18f5c:	d0 40       	sbci	r29, 0x00	; 0
   18f5e:	cd 55       	subi	r28, 0x5D	; 93
   18f60:	df 4f       	sbci	r29, 0xFF	; 255
   18f62:	18 83       	st	Y, r17
   18f64:	c3 5a       	subi	r28, 0xA3	; 163
   18f66:	d0 40       	sbci	r29, 0x00	; 0
   18f68:	bc cf       	rjmp	.-136    	; 0x18ee2 <main+0x1c4>
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   18f6a:	44 e0       	ldi	r20, 0x04	; 4
   18f6c:	50 e0       	ldi	r21, 0x00	; 0
   18f6e:	6a e5       	ldi	r22, 0x5A	; 90
   18f70:	77 e0       	ldi	r23, 0x07	; 7
   18f72:	ce 01       	movw	r24, r28
   18f74:	89 56       	subi	r24, 0x69	; 105
   18f76:	9f 4f       	sbci	r25, 0xFF	; 255
   18f78:	0e 94 4d 62 	call	0xc49a	; 0xc49a <EthernetClient::write(unsigned char const*, unsigned int)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4138
      http_client.read();
    http_client.write("ahoj");
  }


  if (draw_menu(false) == true)
   18f7c:	80 e0       	ldi	r24, 0x00	; 0
   18f7e:	0e 94 2b 88 	call	0x11056	; 0x11056 <draw_menu(bool)>
   18f82:	88 23       	and	r24, r24
   18f84:	19 f0       	breq	.+6      	; 0x18f8c <main+0x26e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4140
  {
    draw_menu(true);
   18f86:	81 e0       	ldi	r24, 0x01	; 1
   18f88:	0e 94 2b 88 	call	0x11056	; 0x11056 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4145
  }



  if (scan_rf_net_enable == 2)
   18f8c:	80 91 7b 0c 	lds	r24, 0x0C7B	; 0x800c7b <scan_rf_net_enable>
   18f90:	82 30       	cpi	r24, 0x02	; 2
   18f92:	09 f0       	breq	.+2      	; 0x18f96 <main+0x278>
   18f94:	da c0       	rjmp	.+436    	; 0x1914a <main+0x42c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4147
  {
    scan_rf_net_enable = 0;
   18f96:	10 92 7b 0c 	sts	0x0C7B, r1	; 0x800c7b <scan_rf_net_enable>
get_status():
/home/saric/Arduino/libraries/RF24/RF24.cpp:365

/****************************************************************************/

uint8_t RF24::get_status(void)
{
  return spiTrans(RF24_NOP);
   18f9a:	8f ef       	ldi	r24, 0xFF	; 255
   18f9c:	0e 94 68 ba 	call	0x174d0	; 0x174d0 <RF24::spiTrans(unsigned char) [clone .constprop.96]>
print_status():
/home/saric/Arduino/libraries/RF24/RF24.cpp:372

/****************************************************************************/
#if !defined (MINIMAL)
void RF24::print_status(uint8_t status)
{
  printf_P(PSTR("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n"),
   18fa0:	28 2f       	mov	r18, r24
   18fa2:	30 e0       	ldi	r19, 0x00	; 0
   18fa4:	98 2f       	mov	r25, r24
   18fa6:	91 70       	andi	r25, 0x01	; 1
   18fa8:	1f 92       	push	r1
   18faa:	9f 93       	push	r25
/home/saric/Arduino/libraries/RF24/RF24.cpp:377
           status,
           (status & _BV(RX_DR))?1:0,
           (status & _BV(TX_DS))?1:0,
           (status & _BV(MAX_RT))?1:0,
           ((status >> RX_P_NO) & 0x07),
   18fac:	a9 01       	movw	r20, r18
   18fae:	55 95       	asr	r21
   18fb0:	47 95       	ror	r20
/home/saric/Arduino/libraries/RF24/RF24.cpp:372

/****************************************************************************/
#if !defined (MINIMAL)
void RF24::print_status(uint8_t status)
{
  printf_P(PSTR("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n"),
   18fb2:	47 70       	andi	r20, 0x07	; 7
   18fb4:	55 27       	eor	r21, r21
   18fb6:	5f 93       	push	r21
   18fb8:	4f 93       	push	r20
   18fba:	84 fb       	bst	r24, 4
   18fbc:	99 27       	eor	r25, r25
   18fbe:	90 f9       	bld	r25, 0
   18fc0:	1f 92       	push	r1
   18fc2:	9f 93       	push	r25
   18fc4:	85 fb       	bst	r24, 5
   18fc6:	99 27       	eor	r25, r25
   18fc8:	90 f9       	bld	r25, 0
   18fca:	1f 92       	push	r1
   18fcc:	9f 93       	push	r25
   18fce:	86 fb       	bst	r24, 6
   18fd0:	22 27       	eor	r18, r18
   18fd2:	20 f9       	bld	r18, 0
   18fd4:	1f 92       	push	r1
   18fd6:	2f 93       	push	r18
   18fd8:	1f 92       	push	r1
   18fda:	8f 93       	push	r24
   18fdc:	89 e0       	ldi	r24, 0x09	; 9
   18fde:	91 e6       	ldi	r25, 0x61	; 97
   18fe0:	9f 93       	push	r25
   18fe2:	8f 93       	push	r24
   18fe4:	0e 94 a8 d5 	call	0x1ab50	; 0x1ab50 <printf_P>
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:567
 
#endif //Linux

  print_status(get_status());

  print_address_register(PSTR("RX_ADDR_P0-1"),RX_ADDR_P0,2);
   18fe8:	42 e0       	ldi	r20, 0x02	; 2
   18fea:	6a e0       	ldi	r22, 0x0A	; 10
   18fec:	84 e0       	ldi	r24, 0x04	; 4
   18fee:	92 e6       	ldi	r25, 0x62	; 98
   18ff0:	0e 94 69 b9 	call	0x172d2	; 0x172d2 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:568
  print_byte_register(PSTR("RX_ADDR_P2-5"),RX_ADDR_P2,4);
   18ff4:	44 e0       	ldi	r20, 0x04	; 4
   18ff6:	6c e0       	ldi	r22, 0x0C	; 12
   18ff8:	87 ef       	ldi	r24, 0xF7	; 247
   18ffa:	91 e6       	ldi	r25, 0x61	; 97
   18ffc:	0e 94 30 ba 	call	0x17460	; 0x17460 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:569
  print_address_register(PSTR("TX_ADDR\t"),TX_ADDR);
   19000:	41 e0       	ldi	r20, 0x01	; 1
   19002:	60 e1       	ldi	r22, 0x10	; 16
   19004:	8e ee       	ldi	r24, 0xEE	; 238
   19006:	91 e6       	ldi	r25, 0x61	; 97
   19008:	0e 94 69 b9 	call	0x172d2	; 0x172d2 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:571

  print_byte_register(PSTR("RX_PW_P0-6"),RX_PW_P0,6);
   1900c:	46 e0       	ldi	r20, 0x06	; 6
   1900e:	61 e1       	ldi	r22, 0x11	; 17
   19010:	83 ee       	ldi	r24, 0xE3	; 227
   19012:	91 e6       	ldi	r25, 0x61	; 97
   19014:	0e 94 30 ba 	call	0x17460	; 0x17460 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:572
  print_byte_register(PSTR("EN_AA\t"),EN_AA);
   19018:	41 e0       	ldi	r20, 0x01	; 1
   1901a:	61 e0       	ldi	r22, 0x01	; 1
   1901c:	8c ed       	ldi	r24, 0xDC	; 220
   1901e:	91 e6       	ldi	r25, 0x61	; 97
   19020:	0e 94 30 ba 	call	0x17460	; 0x17460 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:573
  print_byte_register(PSTR("EN_RXADDR"),EN_RXADDR);
   19024:	41 e0       	ldi	r20, 0x01	; 1
   19026:	62 e0       	ldi	r22, 0x02	; 2
   19028:	82 ed       	ldi	r24, 0xD2	; 210
   1902a:	91 e6       	ldi	r25, 0x61	; 97
   1902c:	0e 94 30 ba 	call	0x17460	; 0x17460 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:574
  print_byte_register(PSTR("RF_CH\t"),RF_CH);
   19030:	41 e0       	ldi	r20, 0x01	; 1
   19032:	65 e0       	ldi	r22, 0x05	; 5
   19034:	8b ec       	ldi	r24, 0xCB	; 203
   19036:	91 e6       	ldi	r25, 0x61	; 97
   19038:	0e 94 30 ba 	call	0x17460	; 0x17460 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:575
  print_byte_register(PSTR("RF_SETUP"),RF_SETUP);
   1903c:	41 e0       	ldi	r20, 0x01	; 1
   1903e:	66 e0       	ldi	r22, 0x06	; 6
   19040:	82 ec       	ldi	r24, 0xC2	; 194
   19042:	91 e6       	ldi	r25, 0x61	; 97
   19044:	0e 94 30 ba 	call	0x17460	; 0x17460 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:576
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
   19048:	41 e0       	ldi	r20, 0x01	; 1
   1904a:	60 e0       	ldi	r22, 0x00	; 0
   1904c:	8a eb       	ldi	r24, 0xBA	; 186
   1904e:	91 e6       	ldi	r25, 0x61	; 97
   19050:	0e 94 30 ba 	call	0x17460	; 0x17460 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:577
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);
   19054:	42 e0       	ldi	r20, 0x02	; 2
   19056:	6c e1       	ldi	r22, 0x1C	; 28
   19058:	8c ea       	ldi	r24, 0xAC	; 172
   1905a:	91 e6       	ldi	r25, 0x61	; 97
   1905c:	0e 94 30 ba 	call	0x17460	; 0x17460 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
getDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1512
/****************************************************************************/

rf24_datarate_e RF24::getDataRate( void )
{
  rf24_datarate_e result ;
  uint8_t dr = read_register(RF_SETUP) & (_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
   19060:	86 e0       	ldi	r24, 0x06	; 6
   19062:	0e 94 1d ba 	call	0x1743a	; 0x1743a <RF24::read_register(unsigned char) [clone .constprop.98]>
   19066:	88 72       	andi	r24, 0x28	; 40
/home/saric/Arduino/libraries/RF24/RF24.cpp:1516

  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
   19068:	0f b6       	in	r0, 0x3f	; 63
   1906a:	f8 94       	cli
   1906c:	de bf       	out	0x3e, r29	; 62
   1906e:	0f be       	out	0x3f, r0	; 63
   19070:	cd bf       	out	0x3d, r28	; 61
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1519
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
   19072:	e2 e0       	ldi	r30, 0x02	; 2
   19074:	f0 e0       	ldi	r31, 0x00	; 0
getDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1516
  rf24_datarate_e result ;
  uint8_t dr = read_register(RF_SETUP) & (_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));

  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
   19076:	80 32       	cpi	r24, 0x20	; 32
   19078:	39 f0       	breq	.+14     	; 0x19088 <main+0x36a>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1521
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
  }
  else if ( dr == _BV(RF_DR_HIGH) )
   1907a:	21 e0       	ldi	r18, 0x01	; 1
   1907c:	90 e0       	ldi	r25, 0x00	; 0
   1907e:	88 30       	cpi	r24, 0x08	; 8
   19080:	09 f0       	breq	.+2      	; 0x19084 <main+0x366>
   19082:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1519
  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
   19084:	e2 2f       	mov	r30, r18
   19086:	f9 2f       	mov	r31, r25
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:579
  print_byte_register(PSTR("RF_CH\t"),RF_CH);
  print_byte_register(PSTR("RF_SETUP"),RF_SETUP);
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
   19088:	ee 0f       	add	r30, r30
   1908a:	ff 1f       	adc	r31, r31
   1908c:	ea 55       	subi	r30, 0x5A	; 90
   1908e:	fe 49       	sbci	r31, 0x9E	; 158
   19090:	85 91       	lpm	r24, Z+
   19092:	94 91       	lpm	r25, Z
   19094:	9f 93       	push	r25
   19096:	8f 93       	push	r24
   19098:	84 e9       	ldi	r24, 0x94	; 148
   1909a:	91 e6       	ldi	r25, 0x61	; 97
   1909c:	9f 93       	push	r25
   1909e:	8f 93       	push	r24
   190a0:	0e 94 a8 d5 	call	0x1ab50	; 0x1ab50 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:580
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
   190a4:	e0 91 e2 0f 	lds	r30, 0x0FE2	; 0x800fe2 <radio+0x6>
   190a8:	f0 e0       	ldi	r31, 0x00	; 0
   190aa:	ee 0f       	add	r30, r30
   190ac:	ff 1f       	adc	r31, r31
   190ae:	e0 57       	subi	r30, 0x70	; 112
   190b0:	fe 49       	sbci	r31, 0x9E	; 158
   190b2:	85 91       	lpm	r24, Z+
   190b4:	94 91       	lpm	r25, Z
   190b6:	9f 93       	push	r25
   190b8:	8f 93       	push	r24
   190ba:	81 e8       	ldi	r24, 0x81	; 129
   190bc:	91 e6       	ldi	r25, 0x61	; 97
   190be:	9f 93       	push	r25
   190c0:	8f 93       	push	r24
   190c2:	0e 94 a8 d5 	call	0x1ab50	; 0x1ab50 <printf_P>
getCRCLength():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1563

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
  
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
   190c6:	80 e0       	ldi	r24, 0x00	; 0
   190c8:	0e 94 1d ba 	call	0x1743a	; 0x1743a <RF24::read_register(unsigned char) [clone .constprop.98]>
   190cc:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:1564
  uint8_t AA = read_register(EN_AA);
   190ce:	81 e0       	ldi	r24, 0x01	; 1
   190d0:	0e 94 1d ba 	call	0x1743a	; 0x1743a <RF24::read_register(unsigned char) [clone .constprop.98]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566
  
  if ( config & _BV(EN_CRC ) || AA)
   190d4:	0f b6       	in	r0, 0x3f	; 63
   190d6:	f8 94       	cli
   190d8:	de bf       	out	0x3e, r29	; 62
   190da:	0f be       	out	0x3f, r0	; 63
   190dc:	cd bf       	out	0x3d, r28	; 61
   190de:	13 fd       	sbrc	r17, 3
   190e0:	04 c0       	rjmp	.+8      	; 0x190ea <main+0x3cc>
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1561

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
   190e2:	f0 e0       	ldi	r31, 0x00	; 0
   190e4:	e0 e0       	ldi	r30, 0x00	; 0
getCRCLength():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566
  
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
  uint8_t AA = read_register(EN_AA);
  
  if ( config & _BV(EN_CRC ) || AA)
   190e6:	88 23       	and	r24, r24
   190e8:	31 f0       	breq	.+12     	; 0x190f6 <main+0x3d8>
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1569
  {
    if ( config & _BV(CRCO) )
      result = RF24_CRC_16;
   190ea:	e2 e0       	ldi	r30, 0x02	; 2
   190ec:	f0 e0       	ldi	r31, 0x00	; 0
getCRCLength():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1568
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
  uint8_t AA = read_register(EN_AA);
  
  if ( config & _BV(EN_CRC ) || AA)
  {
    if ( config & _BV(CRCO) )
   190ee:	12 fd       	sbrc	r17, 2
   190f0:	02 c0       	rjmp	.+4      	; 0x190f6 <main+0x3d8>
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1571
      result = RF24_CRC_16;
    else
      result = RF24_CRC_8;
   190f2:	e1 e0       	ldi	r30, 0x01	; 1
   190f4:	f0 e0       	ldi	r31, 0x00	; 0
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:581
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
  printf_P(PSTR("CRC Length\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
   190f6:	ee 0f       	add	r30, r30
   190f8:	ff 1f       	adc	r31, r31
   190fa:	e5 58       	subi	r30, 0x85	; 133
   190fc:	fe 49       	sbci	r31, 0x9E	; 158
   190fe:	85 91       	lpm	r24, Z+
   19100:	94 91       	lpm	r25, Z
   19102:	9f 93       	push	r25
   19104:	8f 93       	push	r24
   19106:	88 e6       	ldi	r24, 0x68	; 104
   19108:	91 e6       	ldi	r25, 0x61	; 97
   1910a:	9f 93       	push	r25
   1910c:	8f 93       	push	r24
   1910e:	0e 94 a8 d5 	call	0x1ab50	; 0x1ab50 <printf_P>
getPALevel():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1454
/****************************************************************************/

uint8_t RF24::getPALevel(void)
{

  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
   19112:	86 e0       	ldi	r24, 0x06	; 6
   19114:	0e 94 1d ba 	call	0x1743a	; 0x1743a <RF24::read_register(unsigned char) [clone .constprop.98]>
   19118:	e8 2f       	mov	r30, r24
   1911a:	f0 e0       	ldi	r31, 0x00	; 0
   1911c:	f5 95       	asr	r31
   1911e:	e7 95       	ror	r30
   19120:	e3 70       	andi	r30, 0x03	; 3
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:582
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
  printf_P(PSTR("CRC Length\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
  printf_P(PSTR("PA Power\t = " PRIPSTR "\r\n"),  pgm_read_word(&rf24_pa_dbm_e_str_P[getPALevel()]));
   19122:	f0 e0       	ldi	r31, 0x00	; 0
   19124:	ee 0f       	add	r30, r30
   19126:	ff 1f       	adc	r31, r31
   19128:	e0 5a       	subi	r30, 0xA0	; 160
   1912a:	fe 49       	sbci	r31, 0x9E	; 158
   1912c:	85 91       	lpm	r24, Z+
   1912e:	94 91       	lpm	r25, Z
   19130:	9f 93       	push	r25
   19132:	8f 93       	push	r24
   19134:	8f e4       	ldi	r24, 0x4F	; 79
   19136:	91 e6       	ldi	r25, 0x61	; 97
   19138:	9f 93       	push	r25
   1913a:	8f 93       	push	r24
   1913c:	0e 94 a8 d5 	call	0x1ab50	; 0x1ab50 <printf_P>
   19140:	0f b6       	in	r0, 0x3f	; 63
   19142:	f8 94       	cli
   19144:	de bf       	out	0x3e, r29	; 62
   19146:	0f be       	out	0x3f, r0	; 63
   19148:	cd bf       	out	0x3d, r28	; 61
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4154
  }


  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) >= 10000)
   1914a:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   1914e:	00 91 68 12 	lds	r16, 0x1268	; 0x801268 <milis_10s>
   19152:	10 91 69 12 	lds	r17, 0x1269	; 0x801269 <milis_10s+0x1>
   19156:	20 91 6a 12 	lds	r18, 0x126A	; 0x80126a <milis_10s+0x2>
   1915a:	30 91 6b 12 	lds	r19, 0x126B	; 0x80126b <milis_10s+0x3>
   1915e:	ab 01       	movw	r20, r22
   19160:	bc 01       	movw	r22, r24
   19162:	40 1b       	sub	r20, r16
   19164:	51 0b       	sbc	r21, r17
   19166:	62 0b       	sbc	r22, r18
   19168:	73 0b       	sbc	r23, r19
   1916a:	40 31       	cpi	r20, 0x10	; 16
   1916c:	57 42       	sbci	r21, 0x27	; 39
   1916e:	61 05       	cpc	r22, r1
   19170:	71 05       	cpc	r23, r1
   19172:	08 f4       	brcc	.+2      	; 0x19176 <main+0x458>
   19174:	54 c7       	rjmp	.+3752   	; 0x1a01e <main+0x1300>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4156
  {
    milis_10s += 10000;
   19176:	d9 01       	movw	r26, r18
   19178:	c8 01       	movw	r24, r16
   1917a:	80 5f       	subi	r24, 0xF0	; 240
   1917c:	98 4d       	sbci	r25, 0xD8	; 216
   1917e:	af 4f       	sbci	r26, 0xFF	; 255
   19180:	bf 4f       	sbci	r27, 0xFF	; 255
   19182:	80 93 68 12 	sts	0x1268, r24	; 0x801268 <milis_10s>
   19186:	90 93 69 12 	sts	0x1269, r25	; 0x801269 <milis_10s+0x1>
   1918a:	a0 93 6a 12 	sts	0x126A, r26	; 0x80126a <milis_10s+0x2>
   1918e:	b0 93 6b 12 	sts	0x126B, r27	; 0x80126b <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4157
    menu_redraw10s = 1;
   19192:	81 e0       	ldi	r24, 0x01	; 1
   19194:	80 93 7a 0c 	sts	0x0C7A, r24	; 0x800c7a <menu_redraw10s>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3000
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
   19198:	80 91 cb 0c 	lds	r24, 0x0CCB	; 0x800ccb <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1919c:	4a e0       	ldi	r20, 0x0A	; 10
   1919e:	fe 01       	movw	r30, r28
   191a0:	31 96       	adiw	r30, 0x01	; 1
   191a2:	3f 01       	movw	r6, r30
   191a4:	bf 01       	movw	r22, r30
   191a6:	90 e0       	ldi	r25, 0x00	; 0
   191a8:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3001
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
   191ac:	a3 01       	movw	r20, r6
   191ae:	6f e5       	ldi	r22, 0x5F	; 95
   191b0:	77 e0       	ldi	r23, 0x07	; 7
   191b2:	8a ef       	ldi	r24, 0xFA	; 250
   191b4:	9f e0       	ldi	r25, 0x0F	; 15
   191b6:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3002
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   191ba:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3004
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   191bc:	fb e0       	ldi	r31, 0x0B	; 11
   191be:	df 2e       	mov	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3002
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   191c0:	80 91 cb 0c 	lds	r24, 0x0CCB	; 0x800ccb <Global_HWwirenum>
   191c4:	18 17       	cp	r17, r24
   191c6:	b0 f5       	brcc	.+108    	; 0x19234 <main+0x516>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3004
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   191c8:	1d 9d       	mul	r17, r13
   191ca:	c0 01       	movw	r24, r0
   191cc:	11 24       	eor	r1, r1
   191ce:	9c 01       	movw	r18, r24
   191d0:	27 57       	subi	r18, 0x77	; 119
   191d2:	33 4f       	sbci	r19, 0xF3	; 243
   191d4:	79 01       	movw	r14, r18
   191d6:	00 e1       	ldi	r16, 0x10	; 16
   191d8:	28 e0       	ldi	r18, 0x08	; 8
   191da:	a7 01       	movw	r20, r14
   191dc:	6a e3       	ldi	r22, 0x3A	; 58
   191de:	c3 01       	movw	r24, r6
   191e0:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3005
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "rom", payload);
   191e4:	93 01       	movw	r18, r6
   191e6:	4b e6       	ldi	r20, 0x6B	; 107
   191e8:	57 e0       	ldi	r21, 0x07	; 7
   191ea:	61 2f       	mov	r22, r17
   191ec:	8f e6       	ldi	r24, 0x6F	; 111
   191ee:	97 e0       	ldi	r25, 0x07	; 7
   191f0:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3007
    ///
    itoa(w_rom[i].assigned_ds2482, payload, 10);
   191f4:	f7 01       	movw	r30, r14
   191f6:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   191f8:	4a e0       	ldi	r20, 0x0A	; 10
   191fa:	b3 01       	movw	r22, r6
   191fc:	90 e0       	ldi	r25, 0x00	; 0
   191fe:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3008
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "assigned", payload);
   19202:	93 01       	movw	r18, r6
   19204:	45 e7       	ldi	r20, 0x75	; 117
   19206:	57 e0       	ldi	r21, 0x07	; 7
   19208:	61 2f       	mov	r22, r17
   1920a:	8f e6       	ldi	r24, 0x6F	; 111
   1920c:	97 e0       	ldi	r25, 0x07	; 7
   1920e:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3010
    ///
    itoa(w_rom[i].tds_idx, payload, 10);
   19212:	f7 01       	movw	r30, r14
   19214:	82 85       	ldd	r24, Z+10	; 0x0a
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19216:	4a e0       	ldi	r20, 0x0A	; 10
   19218:	b3 01       	movw	r22, r6
   1921a:	90 e0       	ldi	r25, 0x00	; 0
   1921c:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3011
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "tds_idx", payload);
   19220:	93 01       	movw	r18, r6
   19222:	4e e7       	ldi	r20, 0x7E	; 126
   19224:	57 e0       	ldi	r21, 0x07	; 7
   19226:	61 2f       	mov	r22, r17
   19228:	8f e6       	ldi	r24, 0x6F	; 111
   1922a:	97 e0       	ldi	r25, 0x07	; 7
   1922c:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3002
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   19230:	1f 5f       	subi	r17, 0xFF	; 255
   19232:	c6 cf       	rjmp	.-116    	; 0x191c0 <main+0x4a2>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:319
void send_mqtt_status(PubSubClient *mqtt_client)
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  if (mqtt_client->connected())
   19234:	8a ef       	ldi	r24, 0xFA	; 250
   19236:	9f e0       	ldi	r25, 0x0F	; 15
   19238:	0e 94 7d 52 	call	0xa4fa	; 0xa4fa <PubSubClient::connected()>
   1923c:	88 23       	and	r24, r24
   1923e:	09 f4       	brne	.+2      	; 0x19242 <main+0x524>
   19240:	95 c0       	rjmp	.+298    	; 0x1936c <main+0x64e>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:321
  {
    strcpy_P(str_topic, status_mqtt_send);
   19242:	6a e6       	ldi	r22, 0x6A	; 106
   19244:	72 e6       	ldi	r23, 0x62	; 98
   19246:	ce 01       	movw	r24, r28
   19248:	8f 5b       	subi	r24, 0xBF	; 191
   1924a:	9f 4f       	sbci	r25, 0xFF	; 255
   1924c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19250:	4a e0       	ldi	r20, 0x0A	; 10
   19252:	b3 01       	movw	r22, r6
   19254:	80 91 85 0c 	lds	r24, 0x0C85	; 0x800c85 <mqtt_send_message>
   19258:	90 91 86 0c 	lds	r25, 0x0C86	; 0x800c86 <mqtt_send_message+0x1>
   1925c:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:323
    itoa(mqtt_send_message, payload, 10);
    mqtt_send_message = 0;
   19260:	10 92 86 0c 	sts	0x0C86, r1	; 0x800c86 <mqtt_send_message+0x1>
   19264:	10 92 85 0c 	sts	0x0C85, r1	; 0x800c85 <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:324
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   19268:	a3 01       	movw	r20, r6
   1926a:	be 01       	movw	r22, r28
   1926c:	6f 5b       	subi	r22, 0xBF	; 191
   1926e:	7f 4f       	sbci	r23, 0xFF	; 255
   19270:	8a ef       	ldi	r24, 0xFA	; 250
   19272:	9f e0       	ldi	r25, 0x0F	; 15
   19274:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:326
    ///
    strcpy_P(str_topic, status_mqtt_error);
   19278:	68 e5       	ldi	r22, 0x58	; 88
   1927a:	72 e6       	ldi	r23, 0x62	; 98
   1927c:	ce 01       	movw	r24, r28
   1927e:	8f 5b       	subi	r24, 0xBF	; 191
   19280:	9f 4f       	sbci	r25, 0xFF	; 255
   19282:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19286:	4a e0       	ldi	r20, 0x0A	; 10
   19288:	b3 01       	movw	r22, r6
   1928a:	80 91 87 0c 	lds	r24, 0x0C87	; 0x800c87 <mqtt_error>
   1928e:	90 91 88 0c 	lds	r25, 0x0C88	; 0x800c88 <mqtt_error+0x1>
   19292:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:328
    itoa(mqtt_error, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   19296:	a3 01       	movw	r20, r6
   19298:	be 01       	movw	r22, r28
   1929a:	6f 5b       	subi	r22, 0xBF	; 191
   1929c:	7f 4f       	sbci	r23, 0xFF	; 255
   1929e:	8a ef       	ldi	r24, 0xFA	; 250
   192a0:	9f e0       	ldi	r25, 0x0F	; 15
   192a2:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:330
    ///
    strcpy_P(str_topic, status_mqtt_receive);
   192a6:	64 e4       	ldi	r22, 0x44	; 68
   192a8:	72 e6       	ldi	r23, 0x62	; 98
   192aa:	ce 01       	movw	r24, r28
   192ac:	8f 5b       	subi	r24, 0xBF	; 191
   192ae:	9f 4f       	sbci	r25, 0xFF	; 255
   192b0:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   192b4:	4a e0       	ldi	r20, 0x0A	; 10
   192b6:	b3 01       	movw	r22, r6
   192b8:	80 91 5a 0b 	lds	r24, 0x0B5A	; 0x800b5a <mqtt_receive_message>
   192bc:	90 91 5b 0b 	lds	r25, 0x0B5B	; 0x800b5b <mqtt_receive_message+0x1>
   192c0:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:332
    itoa(mqtt_receive_message, payload, 10);
    mqtt_receive_message = 0;
   192c4:	10 92 5b 0b 	sts	0x0B5B, r1	; 0x800b5b <mqtt_receive_message+0x1>
   192c8:	10 92 5a 0b 	sts	0x0B5A, r1	; 0x800b5a <mqtt_receive_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:333
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   192cc:	a3 01       	movw	r20, r6
   192ce:	be 01       	movw	r22, r28
   192d0:	6f 5b       	subi	r22, 0xBF	; 191
   192d2:	7f 4f       	sbci	r23, 0xFF	; 255
   192d4:	8a ef       	ldi	r24, 0xFA	; 250
   192d6:	9f e0       	ldi	r25, 0x0F	; 15
   192d8:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:335
    ///
    strcpy_P(str_topic, status_mqtt_process);
   192dc:	60 e3       	ldi	r22, 0x30	; 48
   192de:	72 e6       	ldi	r23, 0x62	; 98
   192e0:	ce 01       	movw	r24, r28
   192e2:	8f 5b       	subi	r24, 0xBF	; 191
   192e4:	9f 4f       	sbci	r25, 0xFF	; 255
   192e6:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   192ea:	4a e0       	ldi	r20, 0x0A	; 10
   192ec:	b3 01       	movw	r22, r6
   192ee:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <mqtt_process_message>
   192f2:	90 91 59 0b 	lds	r25, 0x0B59	; 0x800b59 <mqtt_process_message+0x1>
   192f6:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:337
    itoa(mqtt_process_message, payload, 10);
    mqtt_process_message = 0;
   192fa:	10 92 59 0b 	sts	0x0B59, r1	; 0x800b59 <mqtt_process_message+0x1>
   192fe:	10 92 58 0b 	sts	0x0B58, r1	; 0x800b58 <mqtt_process_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:338
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   19302:	a3 01       	movw	r20, r6
   19304:	be 01       	movw	r22, r28
   19306:	6f 5b       	subi	r22, 0xBF	; 191
   19308:	7f 4f       	sbci	r23, 0xFF	; 255
   1930a:	8a ef       	ldi	r24, 0xFA	; 250
   1930c:	9f e0       	ldi	r25, 0x0F	; 15
   1930e:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:340

    payload[0] = 0;
   19312:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:341
    createString(payload, '.', device.myIP, 4, 10);
   19314:	0a e0       	ldi	r16, 0x0A	; 10
   19316:	24 e0       	ldi	r18, 0x04	; 4
   19318:	4a ee       	ldi	r20, 0xEA	; 234
   1931a:	5d e0       	ldi	r21, 0x0D	; 13
   1931c:	6e e2       	ldi	r22, 0x2E	; 46
   1931e:	c3 01       	movw	r24, r6
   19320:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:342
    strcpy_P(str_topic, network_ip);
   19324:	65 e2       	ldi	r22, 0x25	; 37
   19326:	72 e6       	ldi	r23, 0x62	; 98
   19328:	ce 01       	movw	r24, r28
   1932a:	8f 5b       	subi	r24, 0xBF	; 191
   1932c:	9f 4f       	sbci	r25, 0xFF	; 255
   1932e:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:343
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   19332:	a3 01       	movw	r20, r6
   19334:	be 01       	movw	r22, r28
   19336:	6f 5b       	subi	r22, 0xBF	; 191
   19338:	7f 4f       	sbci	r23, 0xFF	; 255
   1933a:	8a ef       	ldi	r24, 0xFA	; 250
   1933c:	9f e0       	ldi	r25, 0x0F	; 15
   1933e:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:345

    strcpy_P(str_topic, status_know_devices);
   19342:	61 e1       	ldi	r22, 0x11	; 17
   19344:	72 e6       	ldi	r23, 0x62	; 98
   19346:	ce 01       	movw	r24, r28
   19348:	8f 5b       	subi	r24, 0xBF	; 191
   1934a:	9f 4f       	sbci	r25, 0xFF	; 255
   1934c:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19350:	4a e0       	ldi	r20, 0x0A	; 10
   19352:	b3 01       	movw	r22, r6
   19354:	90 e0       	ldi	r25, 0x00	; 0
   19356:	80 e0       	ldi	r24, 0x00	; 0
   19358:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:347
    itoa(count_know_mqtt, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1935c:	a3 01       	movw	r20, r6
   1935e:	be 01       	movw	r22, r28
   19360:	6f 5b       	subi	r22, 0xBF	; 191
   19362:	7f 4f       	sbci	r23, 0xFF	; 255
   19364:	8a ef       	ldi	r24, 0xFA	; 250
   19366:	9f e0       	ldi	r25, 0x0F	; 15
   19368:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:349
  }
  mqtt_error = 0;
   1936c:	10 92 88 0c 	sts	0x0C88, r1	; 0x800c88 <mqtt_error+0x1>
   19370:	10 92 87 0c 	sts	0x0C87, r1	; 0x800c87 <mqtt_error>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3020
/// funkce pro odeslani zakladnich informaci o tomto zarizeni
void send_device_status(void)
{
  char str_topic[64];
  char payload[64];
  if (mqtt_client.connected())
   19374:	8a ef       	ldi	r24, 0xFA	; 250
   19376:	9f e0       	ldi	r25, 0x0F	; 15
   19378:	0e 94 7d 52 	call	0xa4fa	; 0xa4fa <PubSubClient::connected()>
   1937c:	88 23       	and	r24, r24
   1937e:	09 f4       	brne	.+2      	; 0x19382 <main+0x664>
   19380:	70 c1       	rjmp	.+736    	; 0x19662 <main+0x944>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3022
  {
    strcpy(str_topic, "status/uptime");
   19382:	66 e8       	ldi	r22, 0x86	; 134
   19384:	77 e0       	ldi	r23, 0x07	; 7
   19386:	ce 01       	movw	r24, r28
   19388:	8f 5b       	subi	r24, 0xBF	; 191
   1938a:	9f 4f       	sbci	r25, 0xFF	; 255
   1938c:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3023
    sprintf(payload, "%ld", uptime);
   19390:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <uptime+0x3>
   19394:	8f 93       	push	r24
   19396:	80 91 70 0c 	lds	r24, 0x0C70	; 0x800c70 <uptime+0x2>
   1939a:	8f 93       	push	r24
   1939c:	80 91 6f 0c 	lds	r24, 0x0C6F	; 0x800c6f <uptime+0x1>
   193a0:	8f 93       	push	r24
   193a2:	80 91 6e 0c 	lds	r24, 0x0C6E	; 0x800c6e <uptime>
   193a6:	8f 93       	push	r24
   193a8:	84 e9       	ldi	r24, 0x94	; 148
   193aa:	97 e0       	ldi	r25, 0x07	; 7
   193ac:	9f 93       	push	r25
   193ae:	8f 93       	push	r24
   193b0:	7f 92       	push	r7
   193b2:	6f 92       	push	r6
   193b4:	0e 94 ef e1 	call	0x1c3de	; 0x1c3de <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3024
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   193b8:	a3 01       	movw	r20, r6
   193ba:	be 01       	movw	r22, r28
   193bc:	6f 5b       	subi	r22, 0xBF	; 191
   193be:	7f 4f       	sbci	r23, 0xFF	; 255
   193c0:	8a ef       	ldi	r24, 0xFA	; 250
   193c2:	9f e0       	ldi	r25, 0x0F	; 15
   193c4:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3026
    ///
    strcpy(str_topic, "status/brigthness");
   193c8:	68 e9       	ldi	r22, 0x98	; 152
   193ca:	77 e0       	ldi	r23, 0x07	; 7
   193cc:	ce 01       	movw	r24, r28
   193ce:	8f 5b       	subi	r24, 0xBF	; 191
   193d0:	9f 4f       	sbci	r25, 0xFF	; 255
   193d2:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3027
    itoa(brigthness_display_values, payload, 10);
   193d6:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <brigthness_display_values>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   193da:	4a e0       	ldi	r20, 0x0A	; 10
   193dc:	b3 01       	movw	r22, r6
   193de:	90 e0       	ldi	r25, 0x00	; 0
   193e0:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3028
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   193e4:	a3 01       	movw	r20, r6
   193e6:	be 01       	movw	r22, r28
   193e8:	6f 5b       	subi	r22, 0xBF	; 191
   193ea:	7f 4f       	sbci	r23, 0xFF	; 255
   193ec:	8a ef       	ldi	r24, 0xFA	; 250
   193ee:	9f e0       	ldi	r25, 0x0F	; 15
   193f0:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3030
    ///
    strcpy(str_topic, "status/light");
   193f4:	6a ea       	ldi	r22, 0xAA	; 170
   193f6:	77 e0       	ldi	r23, 0x07	; 7
   193f8:	ce 01       	movw	r24, r28
   193fa:	8f 5b       	subi	r24, 0xBF	; 191
   193fc:	9f 4f       	sbci	r25, 0xFF	; 255
   193fe:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19402:	4a e0       	ldi	r20, 0x0A	; 10
   19404:	b3 01       	movw	r22, r6
   19406:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <light_curr>
   1940a:	90 91 74 0c 	lds	r25, 0x0C74	; 0x800c74 <light_curr+0x1>
   1940e:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3032
    itoa(light_curr, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   19412:	a3 01       	movw	r20, r6
   19414:	be 01       	movw	r22, r28
   19416:	6f 5b       	subi	r22, 0xBF	; 191
   19418:	7f 4f       	sbci	r23, 0xFF	; 255
   1941a:	8a ef       	ldi	r24, 0xFA	; 250
   1941c:	9f e0       	ldi	r25, 0x0F	; 15
   1941e:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3034
    ///
    strcpy(str_topic, "status/auto_brigthness");
   19422:	67 eb       	ldi	r22, 0xB7	; 183
   19424:	77 e0       	ldi	r23, 0x07	; 7
   19426:	ce 01       	movw	r24, r28
   19428:	8f 5b       	subi	r24, 0xBF	; 191
   1942a:	9f 4f       	sbci	r25, 0xFF	; 255
   1942c:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3035
    itoa(brigthness_display_auto_values, payload, 10);
   19430:	80 91 72 0c 	lds	r24, 0x0C72	; 0x800c72 <brigthness_display_auto_values>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19434:	4a e0       	ldi	r20, 0x0A	; 10
   19436:	b3 01       	movw	r22, r6
   19438:	90 e0       	ldi	r25, 0x00	; 0
   1943a:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3036
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1943e:	a3 01       	movw	r20, r6
   19440:	be 01       	movw	r22, r28
   19442:	6f 5b       	subi	r22, 0xBF	; 191
   19444:	7f 4f       	sbci	r23, 0xFF	; 255
   19446:	8a ef       	ldi	r24, 0xFA	; 250
   19448:	9f e0       	ldi	r25, 0x0F	; 15
   1944a:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3038
    ///
    strcpy(str_topic, "status/load_min");
   1944e:	6e ec       	ldi	r22, 0xCE	; 206
   19450:	77 e0       	ldi	r23, 0x07	; 7
   19452:	ce 01       	movw	r24, r28
   19454:	8f 5b       	subi	r24, 0xBF	; 191
   19456:	9f 4f       	sbci	r25, 0xFF	; 255
   19458:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1945c:	4a e0       	ldi	r20, 0x0A	; 10
   1945e:	b3 01       	movw	r22, r6
   19460:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <load_min>
   19464:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <load_min+0x1>
   19468:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3040
    itoa(load_min, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1946c:	a3 01       	movw	r20, r6
   1946e:	be 01       	movw	r22, r28
   19470:	6f 5b       	subi	r22, 0xBF	; 191
   19472:	7f 4f       	sbci	r23, 0xFF	; 255
   19474:	8a ef       	ldi	r24, 0xFA	; 250
   19476:	9f e0       	ldi	r25, 0x0F	; 15
   19478:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3042
    ///
    strcpy(str_topic, "status/load_max");
   1947c:	6e ed       	ldi	r22, 0xDE	; 222
   1947e:	77 e0       	ldi	r23, 0x07	; 7
   19480:	ce 01       	movw	r24, r28
   19482:	8f 5b       	subi	r24, 0xBF	; 191
   19484:	9f 4f       	sbci	r25, 0xFF	; 255
   19486:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1948a:	4a e0       	ldi	r20, 0x0A	; 10
   1948c:	b3 01       	movw	r22, r6
   1948e:	80 91 56 12 	lds	r24, 0x1256	; 0x801256 <load_max>
   19492:	90 91 57 12 	lds	r25, 0x1257	; 0x801257 <load_max+0x1>
   19496:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3044
    itoa(load_max, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1949a:	a3 01       	movw	r20, r6
   1949c:	be 01       	movw	r22, r28
   1949e:	6f 5b       	subi	r22, 0xBF	; 191
   194a0:	7f 4f       	sbci	r23, 0xFF	; 255
   194a2:	8a ef       	ldi	r24, 0xFA	; 250
   194a4:	9f e0       	ldi	r25, 0x0F	; 15
   194a6:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3046
    ///
    load_max = 0;
   194aa:	10 92 56 12 	sts	0x1256, r1	; 0x801256 <load_max>
   194ae:	10 92 57 12 	sts	0x1257, r1	; 0x801257 <load_max+0x1>
   194b2:	10 92 58 12 	sts	0x1258, r1	; 0x801258 <load_max+0x2>
   194b6:	10 92 59 12 	sts	0x1259, r1	; 0x801259 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3047
    load_min = 0xffffffff;
   194ba:	8f ef       	ldi	r24, 0xFF	; 255
   194bc:	9f ef       	ldi	r25, 0xFF	; 255
   194be:	dc 01       	movw	r26, r24
   194c0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <load_min>
   194c4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <load_min+0x1>
   194c8:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <load_min+0x2>
   194cc:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3049
    ///
    strcpy(str_topic, "status/default_ring");
   194d0:	6e ee       	ldi	r22, 0xEE	; 238
   194d2:	77 e0       	ldi	r23, 0x07	; 7
   194d4:	ce 01       	movw	r24, r28
   194d6:	8f 5b       	subi	r24, 0xBF	; 191
   194d8:	9f 4f       	sbci	r25, 0xFF	; 255
   194da:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3050
    itoa(default_ring, payload, 10);
   194de:	80 91 64 0b 	lds	r24, 0x0B64	; 0x800b64 <default_ring>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   194e2:	4a e0       	ldi	r20, 0x0A	; 10
   194e4:	b3 01       	movw	r22, r6
   194e6:	90 e0       	ldi	r25, 0x00	; 0
   194e8:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3051
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   194ec:	a3 01       	movw	r20, r6
   194ee:	be 01       	movw	r22, r28
   194f0:	6f 5b       	subi	r22, 0xBF	; 191
   194f2:	7f 4f       	sbci	r23, 0xFF	; 255
   194f4:	8a ef       	ldi	r24, 0xFA	; 250
   194f6:	9f e0       	ldi	r25, 0x0F	; 15
   194f8:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3053
    ///
    strcpy(str_topic, "status/selftest");
   194fc:	62 e0       	ldi	r22, 0x02	; 2
   194fe:	78 e0       	ldi	r23, 0x08	; 8
   19500:	ce 01       	movw	r24, r28
   19502:	8f 5b       	subi	r24, 0xBF	; 191
   19504:	9f 4f       	sbci	r25, 0xFF	; 255
   19506:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3054
    itoa(selftest_data, payload, 10);
   1950a:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1950e:	4a e0       	ldi	r20, 0x0A	; 10
   19510:	b3 01       	movw	r22, r6
   19512:	90 e0       	ldi	r25, 0x00	; 0
   19514:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3055
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   19518:	a3 01       	movw	r20, r6
   1951a:	be 01       	movw	r22, r28
   1951c:	6f 5b       	subi	r22, 0xBF	; 191
   1951e:	7f 4f       	sbci	r23, 0xFF	; 255
   19520:	8a ef       	ldi	r24, 0xFA	; 250
   19522:	9f e0       	ldi	r25, 0x0F	; 15
   19524:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3057

    strcpy(str_topic, "status/rtds/count");
   19528:	62 e1       	ldi	r22, 0x12	; 18
   1952a:	78 e0       	ldi	r23, 0x08	; 8
   1952c:	ce 01       	movw	r24, r28
   1952e:	8f 5b       	subi	r24, 0xBF	; 191
   19530:	9f 4f       	sbci	r25, 0xFF	; 255
   19532:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3058
    itoa(use_rtds, payload, 10);
   19536:	80 91 6a 0c 	lds	r24, 0x0C6A	; 0x800c6a <use_rtds>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1953a:	4a e0       	ldi	r20, 0x0A	; 10
   1953c:	b3 01       	movw	r22, r6
   1953e:	90 e0       	ldi	r25, 0x00	; 0
   19540:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3059
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   19544:	a3 01       	movw	r20, r6
   19546:	be 01       	movw	r22, r28
   19548:	6f 5b       	subi	r22, 0xBF	; 191
   1954a:	7f 4f       	sbci	r23, 0xFF	; 255
   1954c:	8a ef       	ldi	r24, 0xFA	; 250
   1954e:	9f e0       	ldi	r25, 0x0F	; 15
   19550:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3425
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   19554:	81 e0       	ldi	r24, 0x01	; 1
   19556:	90 e0       	ldi	r25, 0x00	; 0
   19558:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1955c:	4a e0       	ldi	r20, 0x0A	; 10
   1955e:	b3 01       	movw	r22, r6
   19560:	08 2e       	mov	r0, r24
   19562:	00 0c       	add	r0, r0
   19564:	99 0b       	sbc	r25, r25
   19566:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3066
      strcpy(str_topic, "status/light/count");
      itoa(use_light_curr, payload, 10);
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
   1956a:	a3 01       	movw	r20, r6
   1956c:	64 e2       	ldi	r22, 0x24	; 36
   1956e:	78 e0       	ldi	r23, 0x08	; 8
   19570:	8a ef       	ldi	r24, 0xFA	; 250
   19572:	9f e0       	ldi	r25, 0x0F	; 15
   19574:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3403
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   19578:	80 91 62 0b 	lds	r24, 0x0B62	; 0x800b62 <tritri>
   1957c:	90 91 63 0b 	lds	r25, 0x0B63	; 0x800b63 <tritri+0x1>
   19580:	25 e0       	ldi	r18, 0x05	; 5
   19582:	28 9f       	mul	r18, r24
   19584:	b0 01       	movw	r22, r0
   19586:	29 9f       	mul	r18, r25
   19588:	70 0d       	add	r23, r0
   1958a:	11 24       	eor	r1, r1
   1958c:	90 e0       	ldi	r25, 0x00	; 0
   1958e:	80 e0       	ldi	r24, 0x00	; 0
   19590:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
   19594:	20 e0       	ldi	r18, 0x00	; 0
   19596:	30 e0       	ldi	r19, 0x00	; 0
   19598:	4a e7       	ldi	r20, 0x7A	; 122
   1959a:	54 e4       	ldi	r21, 0x44	; 68
   1959c:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3068
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
   195a0:	83 01       	movw	r16, r6
   195a2:	22 e0       	ldi	r18, 0x02	; 2
   195a4:	44 e0       	ldi	r20, 0x04	; 4
   195a6:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3069
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
   195aa:	a3 01       	movw	r20, r6
   195ac:	64 e3       	ldi	r22, 0x34	; 52
   195ae:	78 e0       	ldi	r23, 0x08	; 8
   195b0:	8a ef       	ldi	r24, 0xFA	; 250
   195b2:	9f e0       	ldi	r25, 0x0F	; 15
   195b4:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3403
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   195b8:	60 91 60 0b 	lds	r22, 0x0B60	; 0x800b60 <petnula>
   195bc:	70 91 61 0b 	lds	r23, 0x0B61	; 0x800b61 <petnula+0x1>
   195c0:	e3 e0       	ldi	r30, 0x03	; 3
   195c2:	66 0f       	add	r22, r22
   195c4:	77 1f       	adc	r23, r23
   195c6:	ea 95       	dec	r30
   195c8:	e1 f7       	brne	.-8      	; 0x195c2 <main+0x8a4>
   195ca:	90 e0       	ldi	r25, 0x00	; 0
   195cc:	80 e0       	ldi	r24, 0x00	; 0
   195ce:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
   195d2:	20 e0       	ldi	r18, 0x00	; 0
   195d4:	30 e0       	ldi	r19, 0x00	; 0
   195d6:	4a e7       	ldi	r20, 0x7A	; 122
   195d8:	54 e4       	ldi	r21, 0x44	; 68
   195da:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3071
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
   195de:	22 e0       	ldi	r18, 0x02	; 2
   195e0:	44 e0       	ldi	r20, 0x04	; 4
   195e2:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3072
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
   195e6:	a3 01       	movw	r20, r6
   195e8:	67 e4       	ldi	r22, 0x47	; 71
   195ea:	78 e0       	ldi	r23, 0x08	; 8
   195ec:	8a ef       	ldi	r24, 0xFA	; 250
   195ee:	9f e0       	ldi	r25, 0x0F	; 15
   195f0:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3403
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   195f4:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <dvanact>
   195f8:	90 91 5f 0b 	lds	r25, 0x0B5F	; 0x800b5f <dvanact+0x1>
   195fc:	29 e3       	ldi	r18, 0x39	; 57
   195fe:	28 9f       	mul	r18, r24
   19600:	b0 01       	movw	r22, r0
   19602:	29 9f       	mul	r18, r25
   19604:	70 0d       	add	r23, r0
   19606:	11 24       	eor	r1, r1
   19608:	90 e0       	ldi	r25, 0x00	; 0
   1960a:	80 e0       	ldi	r24, 0x00	; 0
   1960c:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
   19610:	20 e0       	ldi	r18, 0x00	; 0
   19612:	30 e0       	ldi	r19, 0x00	; 0
   19614:	4a e7       	ldi	r20, 0x7A	; 122
   19616:	54 e4       	ldi	r21, 0x44	; 68
   19618:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3074
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
   1961c:	22 e0       	ldi	r18, 0x02	; 2
   1961e:	44 e0       	ldi	r20, 0x04	; 4
   19620:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3075
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
   19624:	a3 01       	movw	r20, r6
   19626:	6a e5       	ldi	r22, 0x5A	; 90
   19628:	78 e0       	ldi	r23, 0x08	; 8
   1962a:	8a ef       	ldi	r24, 0xFA	; 250
   1962c:	9f e0       	ldi	r25, 0x0F	; 15
   1962e:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3418
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   19632:	60 91 5c 0b 	lds	r22, 0x0B5C	; 0x800b5c <proud>
   19636:	70 91 5d 0b 	lds	r23, 0x0B5D	; 0x800b5d <proud+0x1>
   1963a:	90 e0       	ldi	r25, 0x00	; 0
   1963c:	80 e0       	ldi	r24, 0x00	; 0
   1963e:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3077
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
    ///
    dtostrf(prepocet_proudu(proud), 4, 2, payload);
   19642:	22 e0       	ldi	r18, 0x02	; 2
   19644:	44 e0       	ldi	r20, 0x04	; 4
   19646:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3078
    send_mqtt_general_payload(&mqtt_client, "status/current/consume", payload);
   1964a:	a3 01       	movw	r20, r6
   1964c:	6d e6       	ldi	r22, 0x6D	; 109
   1964e:	78 e0       	ldi	r23, 0x08	; 8
   19650:	8a ef       	ldi	r24, 0xFA	; 250
   19652:	9f e0       	ldi	r25, 0x0F	; 15
   19654:	0e 94 fd 70 	call	0xe1fa	; 0xe1fa <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   19658:	0f b6       	in	r0, 0x3f	; 63
   1965a:	f8 94       	cli
   1965c:	de bf       	out	0x3e, r29	; 62
   1965e:	0f be       	out	0x3f, r0	; 63
   19660:	cd bf       	out	0x3d, r28	; 61
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3002
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   19662:	0c e5       	ldi	r16, 0x5C	; 92
   19664:	11 e0       	ldi	r17, 0x01	; 1
   19666:	f1 2c       	mov	r15, r1
   19668:	e1 2c       	mov	r14, r1
   1966a:	5e 2c       	mov	r5, r14
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3098
void send_mqtt_ring(void)
{
  char payload[64];
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    //// odeslu pouze pokud je ring pripraveny
    if (thermostat_ring_get_active(idx) != RING_FREE)
   1966c:	8e 2d       	mov	r24, r14
   1966e:	0e 94 42 6b 	call	0xd684	; 0xd684 <thermostat_ring_get_active(unsigned char)>
   19672:	8f 3f       	cpi	r24, 0xFF	; 255
   19674:	09 f4       	brne	.+2      	; 0x19678 <main+0x95a>
   19676:	dd c0       	rjmp	.+442    	; 0x19832 <main+0xb14>
   19678:	68 01       	movw	r12, r16
   1967a:	30 e1       	ldi	r19, 0x10	; 16
   1967c:	c3 1a       	sub	r12, r19
   1967e:	d1 08       	sbc	r13, r1
   19680:	53 01       	movw	r10, r6
   19682:	48 01       	movw	r8, r16
   19684:	47 e0       	ldi	r20, 0x07	; 7
   19686:	84 1a       	sub	r8, r20
   19688:	91 08       	sbc	r9, r1
thermostat_ring_get_name():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:104
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
   1968a:	c6 01       	movw	r24, r12
   1968c:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:105
    name[i] = t;
   19690:	f5 01       	movw	r30, r10
   19692:	81 93       	st	Z+, r24
   19694:	5f 01       	movw	r10, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
   19696:	88 23       	and	r24, r24
   19698:	31 f0       	breq	.+12     	; 0x196a6 <main+0x988>
   1969a:	ff ef       	ldi	r31, 0xFF	; 255
   1969c:	cf 1a       	sub	r12, r31
   1969e:	df 0a       	sbc	r13, r31
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:102

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
   196a0:	8c 14       	cp	r8, r12
   196a2:	9d 04       	cpc	r9, r13
   196a4:	91 f7       	brne	.-28     	; 0x1968a <main+0x96c>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3101
    {
      thermostat_ring_get_name(idx, payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "name", payload);
   196a6:	93 01       	movw	r18, r6
   196a8:	4f e0       	ldi	r20, 0x0F	; 15
   196aa:	54 e0       	ldi	r21, 0x04	; 4
   196ac:	65 2d       	mov	r22, r5
   196ae:	8d ef       	ldi	r24, 0xFD	; 253
   196b0:	97 e0       	ldi	r25, 0x07	; 7
   196b2:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3102
      itoa(thermostat_ring_get_active(idx), payload, 10);
   196b6:	85 2d       	mov	r24, r5
   196b8:	0e 94 42 6b 	call	0xd684	; 0xd684 <thermostat_ring_get_active(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   196bc:	4a e0       	ldi	r20, 0x0A	; 10
   196be:	b3 01       	movw	r22, r6
   196c0:	90 e0       	ldi	r25, 0x00	; 0
   196c2:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3103
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "active", payload);
   196c6:	93 01       	movw	r18, r6
   196c8:	49 e1       	ldi	r20, 0x19	; 25
   196ca:	54 e0       	ldi	r21, 0x04	; 4
   196cc:	65 2d       	mov	r22, r5
   196ce:	8d ef       	ldi	r24, 0xFD	; 253
   196d0:	97 e0       	ldi	r25, 0x07	; 7
   196d2:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
thermostat_ring_get_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   196d6:	c8 01       	movw	r24, r16
   196d8:	01 97       	sbiw	r24, 0x01	; 1
   196da:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   196de:	4a e0       	ldi	r20, 0x0A	; 10
   196e0:	b3 01       	movw	r22, r6
   196e2:	90 e0       	ldi	r25, 0x00	; 0
   196e4:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3105
      itoa(thermostat_ring_get_program_id(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "program", payload);
   196e8:	93 01       	movw	r18, r6
   196ea:	4b e9       	ldi	r20, 0x9B	; 155
   196ec:	56 e0       	ldi	r21, 0x06	; 6
   196ee:	65 2d       	mov	r22, r5
   196f0:	8d ef       	ldi	r24, 0xFD	; 253
   196f2:	97 e0       	ldi	r25, 0x07	; 7
   196f4:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3106
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
   196f8:	85 2d       	mov	r24, r5
   196fa:	0e 94 25 6b 	call	0xd64a	; 0xd64a <thermostat_ring_get_mezni(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   196fe:	4a e0       	ldi	r20, 0x0A	; 10
   19700:	b3 01       	movw	r22, r6
   19702:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3107
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
   19706:	93 01       	movw	r18, r6
   19708:	41 e9       	ldi	r20, 0x91	; 145
   1970a:	56 e0       	ldi	r21, 0x06	; 6
   1970c:	65 2d       	mov	r22, r5
   1970e:	8d ef       	ldi	r24, 0xFD	; 253
   19710:	97 e0       	ldi	r25, 0x07	; 7
   19712:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
   19716:	68 01       	movw	r12, r16
   19718:	22 e0       	ldi	r18, 0x02	; 2
   1971a:	c2 0e       	add	r12, r18
   1971c:	d1 1c       	adc	r13, r1
thermostat_ring_get_mode():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
   1971e:	c6 01       	movw	r24, r12
   19720:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19724:	4a e0       	ldi	r20, 0x0A	; 10
   19726:	b3 01       	movw	r22, r6
   19728:	90 e0       	ldi	r25, 0x00	; 0
   1972a:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3109
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
   1972e:	93 01       	movw	r18, r6
   19730:	44 eb       	ldi	r20, 0xB4	; 180
   19732:	56 e0       	ldi	r21, 0x06	; 6
   19734:	65 2d       	mov	r22, r5
   19736:	8d ef       	ldi	r24, 0xFD	; 253
   19738:	97 e0       	ldi	r25, 0x07	; 7
   1973a:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
thermostat_ring_get_mode():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:176
   1973e:	c6 01       	movw	r24, r12
   19740:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
convert_mode_text():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3469
  return mode;
}

void convert_mode_text(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy(str, "off");
   19744:	64 e8       	ldi	r22, 0x84	; 132
   19746:	78 e0       	ldi	r23, 0x08	; 8
   19748:	88 23       	and	r24, r24
   1974a:	a1 f0       	breq	.+40     	; 0x19774 <main+0xa56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3470
  if (mode == TERM_MODE_MAX)   strcpy(str, "heat");
   1974c:	68 ee       	ldi	r22, 0xE8	; 232
   1974e:	78 e0       	ldi	r23, 0x08	; 8
   19750:	81 30       	cpi	r24, 0x01	; 1
   19752:	81 f0       	breq	.+32     	; 0x19774 <main+0xa56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3471
  if (mode == TERM_MODE_MAN_HEAT)   strcpy(str, "manual");
   19754:	67 ea       	ldi	r22, 0xA7	; 167
   19756:	75 e0       	ldi	r23, 0x05	; 5
   19758:	83 30       	cpi	r24, 0x03	; 3
   1975a:	61 f0       	breq	.+24     	; 0x19774 <main+0xa56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3472
  if (mode == TERM_MODE_PROG)   strcpy(str, "auto");
   1975c:	6e ea       	ldi	r22, 0xAE	; 174
   1975e:	75 e0       	ldi	r23, 0x05	; 5
   19760:	82 30       	cpi	r24, 0x02	; 2
   19762:	41 f0       	breq	.+16     	; 0x19774 <main+0xa56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3473
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy(str, "cool");
   19764:	63 ed       	ldi	r22, 0xD3	; 211
   19766:	78 e0       	ldi	r23, 0x08	; 8
   19768:	84 30       	cpi	r24, 0x04	; 4
   1976a:	21 f0       	breq	.+8      	; 0x19774 <main+0xa56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3474
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
   1976c:	86 30       	cpi	r24, 0x06	; 6
   1976e:	29 f4       	brne	.+10     	; 0x1977a <main+0xa5c>
   19770:	63 eb       	ldi	r22, 0xB3	; 179
   19772:	75 e0       	ldi	r23, 0x05	; 5
   19774:	c3 01       	movw	r24, r6
   19776:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3111
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "text_mode", payload);
   1977a:	93 01       	movw	r18, r6
   1977c:	4f ea       	ldi	r20, 0xAF	; 175
   1977e:	56 e0       	ldi	r21, 0x06	; 6
   19780:	65 2d       	mov	r22, r5
   19782:	8d ef       	ldi	r24, 0xFD	; 253
   19784:	97 e0       	ldi	r25, 0x07	; 7
   19786:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
thermostat_ring_get_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:19
uint8_t therm_power[MAX_THERMOSTAT];

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_state(uint8_t idx)
{
  return therm_stav[idx];
   1978a:	f7 01       	movw	r30, r14
   1978c:	e5 59       	subi	r30, 0x95	; 149
   1978e:	f4 4f       	sbci	r31, 0xF4	; 244
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3112
      itoa(thermostat_ring_get_state(idx), payload, 10);
   19790:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19792:	4a e0       	ldi	r20, 0x0A	; 10
   19794:	b3 01       	movw	r22, r6
   19796:	90 e0       	ldi	r25, 0x00	; 0
   19798:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3113
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status", payload);
   1979c:	93 01       	movw	r18, r6
   1979e:	48 e8       	ldi	r20, 0x88	; 136
   197a0:	58 e0       	ldi	r21, 0x08	; 8
   197a2:	65 2d       	mov	r22, r5
   197a4:	8d ef       	ldi	r24, 0xFD	; 253
   197a6:	97 e0       	ldi	r25, 0x07	; 7
   197a8:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   197ac:	c8 01       	movw	r24, r16
   197ae:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   197b2:	4a e0       	ldi	r20, 0x0A	; 10
   197b4:	b3 01       	movw	r22, r6
   197b6:	90 e0       	ldi	r25, 0x00	; 0
   197b8:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3115
      itoa(thermostat_ring_get_asociate_tds(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "input", payload);
   197bc:	93 01       	movw	r18, r6
   197be:	49 eb       	ldi	r20, 0xB9	; 185
   197c0:	56 e0       	ldi	r21, 0x06	; 6
   197c2:	65 2d       	mov	r22, r5
   197c4:	8d ef       	ldi	r24, 0xFD	; 253
   197c6:	97 e0       	ldi	r25, 0x07	; 7
   197c8:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
thermostat_ring_get_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   197cc:	c8 01       	movw	r24, r16
   197ce:	03 96       	adiw	r24, 0x03	; 3
   197d0:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   197d4:	4a e0       	ldi	r20, 0x0A	; 10
   197d6:	b3 01       	movw	r22, r6
   197d8:	90 e0       	ldi	r25, 0x00	; 0
   197da:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3117
      itoa(thermostat_ring_get_output(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output", payload);
   197de:	93 01       	movw	r18, r6
   197e0:	4f eb       	ldi	r20, 0xBF	; 191
   197e2:	56 e0       	ldi	r21, 0x06	; 6
   197e4:	65 2d       	mov	r22, r5
   197e6:	8d ef       	ldi	r24, 0xFD	; 253
   197e8:	97 e0       	ldi	r25, 0x07	; 7
   197ea:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
thermostat_ring_get_status_data():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   197ee:	c8 01       	movw	r24, r16
   197f0:	04 97       	sbiw	r24, 0x04	; 4
   197f2:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   197f6:	4a e0       	ldi	r20, 0x0A	; 10
   197f8:	b3 01       	movw	r22, r6
   197fa:	90 e0       	ldi	r25, 0x00	; 0
   197fc:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3120

      itoa(thermostat_ring_get_status_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status_bites", payload);
   19800:	93 01       	movw	r18, r6
   19802:	4f e8       	ldi	r20, 0x8F	; 143
   19804:	58 e0       	ldi	r21, 0x08	; 8
   19806:	65 2d       	mov	r22, r5
   19808:	8d ef       	ldi	r24, 0xFD	; 253
   1980a:	97 e0       	ldi	r25, 0x07	; 7
   1980c:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3122

      itoa(last_output_update[idx], payload, 10);
   19810:	f7 01       	movw	r30, r14
   19812:	ea 59       	subi	r30, 0x9A	; 154
   19814:	f4 4f       	sbci	r31, 0xF4	; 244
   19816:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19818:	4a e0       	ldi	r20, 0x0A	; 10
   1981a:	b3 01       	movw	r22, r6
   1981c:	90 e0       	ldi	r25, 0x00	; 0
   1981e:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3123
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output_update", payload);
   19822:	93 01       	movw	r18, r6
   19824:	4c e9       	ldi	r20, 0x9C	; 156
   19826:	58 e0       	ldi	r21, 0x08	; 8
   19828:	65 2d       	mov	r22, r5
   1982a:	8d ef       	ldi	r24, 0xFD	; 253
   1982c:	97 e0       	ldi	r25, 0x07	; 7
   1982e:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
   19832:	3f ef       	ldi	r19, 0xFF	; 255
   19834:	e3 1a       	sub	r14, r19
   19836:	f3 0a       	sbc	r15, r19
   19838:	0f 5d       	subi	r16, 0xDF	; 223
   1983a:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3096
  /thermctl-out/XXXXX/ring/ID/output
*/
void send_mqtt_ring(void)
{
  char payload[64];
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   1983c:	01 30       	cpi	r16, 0x01	; 1
   1983e:	42 e0       	ldi	r20, 0x02	; 2
   19840:	14 07       	cpc	r17, r20
   19842:	09 f0       	breq	.+2      	; 0x19846 <main+0xb28>
   19844:	12 cf       	rjmp	.-476    	; 0x1966a <main+0x94c>
   19846:	51 eb       	ldi	r21, 0xB1	; 177
   19848:	e5 2e       	mov	r14, r21
   1984a:	5b e0       	ldi	r21, 0x0B	; 11
   1984c:	f5 2e       	mov	r15, r21
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3142
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1984e:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3146
    if (get_tds18s20(id, &tds) == 1)
      if (tds.used == 1 && status_tds18s20[id].online == True)
      {
        tt = status_tds18s20[id].temp / 10;
   19850:	6a e0       	ldi	r22, 0x0A	; 10
   19852:	c6 2e       	mov	r12, r22
   19854:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3165
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
        tt = status_tds18s20[id].online;
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
        payload[0] = 0;
        createString(payload, ':', tds.rom, 8, 16);
   19856:	71 e4       	ldi	r23, 0x41	; 65
   19858:	a7 2e       	mov	r10, r23
   1985a:	b1 2c       	mov	r11, r1
   1985c:	ac 0e       	add	r10, r28
   1985e:	bd 1e       	adc	r11, r29
   19860:	5f ef       	ldi	r21, 0xFF	; 255
   19862:	a5 1a       	sub	r10, r21
   19864:	b5 0a       	sbc	r11, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3143
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    if (get_tds18s20(id, &tds) == 1)
   19866:	be 01       	movw	r22, r28
   19868:	6f 5b       	subi	r22, 0xBF	; 191
   1986a:	7f 4f       	sbci	r23, 0xFF	; 255
   1986c:	81 2f       	mov	r24, r17
   1986e:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   19872:	81 30       	cpi	r24, 0x01	; 1
   19874:	09 f0       	breq	.+2      	; 0x19878 <main+0xb5a>
   19876:	ab c0       	rjmp	.+342    	; 0x199ce <main+0xcb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3144
      if (tds.used == 1 && status_tds18s20[id].online == True)
   19878:	22 96       	adiw	r28, 0x02	; 2
   1987a:	8f ad       	ldd	r24, Y+63	; 0x3f
   1987c:	22 97       	sbiw	r28, 0x02	; 2
   1987e:	81 30       	cpi	r24, 0x01	; 1
   19880:	09 f0       	breq	.+2      	; 0x19884 <main+0xb66>
   19882:	a5 c0       	rjmp	.+330    	; 0x199ce <main+0xcb0>
   19884:	f7 01       	movw	r30, r14
   19886:	83 8d       	ldd	r24, Z+27	; 0x1b
   19888:	81 30       	cpi	r24, 0x01	; 1
   1988a:	09 f0       	breq	.+2      	; 0x1988e <main+0xb70>
   1988c:	a0 c0       	rjmp	.+320    	; 0x199ce <main+0xcb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3146
      {
        tt = status_tds18s20[id].temp / 10;
   1988e:	85 81       	ldd	r24, Z+5	; 0x05
   19890:	96 81       	ldd	r25, Z+6	; 0x06
   19892:	b6 01       	movw	r22, r12
   19894:	0e 94 f5 de 	call	0x1bdea	; 0x1bdea <__divmodhi4>
   19898:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1989a:	4a e0       	ldi	r20, 0x0A	; 10
   1989c:	b3 01       	movw	r22, r6
   1989e:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3148
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp", payload);
   198a2:	93 01       	movw	r18, r6
   198a4:	4a ea       	ldi	r20, 0xAA	; 170
   198a6:	58 e0       	ldi	r21, 0x08	; 8
   198a8:	61 2f       	mov	r22, r17
   198aa:	85 e1       	ldi	r24, 0x15	; 21
   198ac:	94 e0       	ldi	r25, 0x04	; 4
   198ae:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
   198b2:	30 e0       	ldi	r19, 0x00	; 0
   198b4:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3149
        avg = 0;
   198b6:	60 e0       	ldi	r22, 0x00	; 0
   198b8:	70 e0       	ldi	r23, 0x00	; 0
   198ba:	cb 01       	movw	r24, r22
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3150
        for (uint8_t c = 0; c < MAX_AVG_TEMP; c++) avg = avg + status_tds18s20[id].average_temp[c];
   198bc:	f9 01       	movw	r30, r18
   198be:	ee 0f       	add	r30, r30
   198c0:	ff 1f       	adc	r31, r31
   198c2:	ee 0d       	add	r30, r14
   198c4:	ff 1d       	adc	r31, r15
   198c6:	27 80       	ldd	r2, Z+7	; 0x07
   198c8:	30 84       	ldd	r3, Z+8	; 0x08
   198ca:	03 2c       	mov	r0, r3
   198cc:	00 0c       	add	r0, r0
   198ce:	44 08       	sbc	r4, r4
   198d0:	55 08       	sbc	r5, r5
   198d2:	62 0d       	add	r22, r2
   198d4:	73 1d       	adc	r23, r3
   198d6:	84 1d       	adc	r24, r4
   198d8:	95 1d       	adc	r25, r5
   198da:	2f 5f       	subi	r18, 0xFF	; 255
   198dc:	3f 4f       	sbci	r19, 0xFF	; 255
   198de:	2a 30       	cpi	r18, 0x0A	; 10
   198e0:	31 05       	cpc	r19, r1
   198e2:	61 f7       	brne	.-40     	; 0x198bc <main+0xb9e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3152
        avg = avg / MAX_AVG_TEMP;
        avg = avg / 10;
   198e4:	24 e6       	ldi	r18, 0x64	; 100
   198e6:	30 e0       	ldi	r19, 0x00	; 0
   198e8:	40 e0       	ldi	r20, 0x00	; 0
   198ea:	50 e0       	ldi	r21, 0x00	; 0
   198ec:	0e 94 2b df 	call	0x1be56	; 0x1be56 <__divmodsi4>
   198f0:	c9 01       	movw	r24, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   198f2:	4a e0       	ldi	r20, 0x0A	; 10
   198f4:	b3 01       	movw	r22, r6
   198f6:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3154
        itoa(avg, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);
   198fa:	93 01       	movw	r18, r6
   198fc:	4f ea       	ldi	r20, 0xAF	; 175
   198fe:	58 e0       	ldi	r21, 0x08	; 8
   19900:	61 2f       	mov	r22, r17
   19902:	85 e1       	ldi	r24, 0x15	; 21
   19904:	94 e0       	ldi	r25, 0x04	; 4
   19906:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3156

        strcpy(payload, tds.name);
   1990a:	c5 54       	subi	r28, 0x45	; 69
   1990c:	df 4f       	sbci	r29, 0xFF	; 255
   1990e:	68 81       	ld	r22, Y
   19910:	79 81       	ldd	r23, Y+1	; 0x01
   19912:	cb 5b       	subi	r28, 0xBB	; 187
   19914:	d0 40       	sbci	r29, 0x00	; 0
   19916:	c3 01       	movw	r24, r6
   19918:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3157
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "name", payload);
   1991c:	93 01       	movw	r18, r6
   1991e:	4f e0       	ldi	r20, 0x0F	; 15
   19920:	54 e0       	ldi	r21, 0x04	; 4
   19922:	61 2f       	mov	r22, r17
   19924:	85 e1       	ldi	r24, 0x15	; 21
   19926:	94 e0       	ldi	r25, 0x04	; 4
   19928:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1992c:	4a e0       	ldi	r20, 0x0A	; 10
   1992e:	b3 01       	movw	r22, r6
   19930:	2d 96       	adiw	r28, 0x0d	; 13
   19932:	8e ad       	ldd	r24, Y+62	; 0x3e
   19934:	9f ad       	ldd	r25, Y+63	; 0x3f
   19936:	2d 97       	sbiw	r28, 0x0d	; 13
   19938:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3160
        tt = tds.offset;
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
   1993c:	93 01       	movw	r18, r6
   1993e:	4d e2       	ldi	r20, 0x2D	; 45
   19940:	58 e0       	ldi	r21, 0x08	; 8
   19942:	61 2f       	mov	r22, r17
   19944:	85 e1       	ldi	r24, 0x15	; 21
   19946:	94 e0       	ldi	r25, 0x04	; 4
   19948:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3161
        tt = status_tds18s20[id].online;
   1994c:	f7 01       	movw	r30, r14
   1994e:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19950:	4a e0       	ldi	r20, 0x0A	; 10
   19952:	b3 01       	movw	r22, r6
   19954:	90 e0       	ldi	r25, 0x00	; 0
   19956:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3163
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
   1995a:	93 01       	movw	r18, r6
   1995c:	48 eb       	ldi	r20, 0xB8	; 184
   1995e:	58 e0       	ldi	r21, 0x08	; 8
   19960:	61 2f       	mov	r22, r17
   19962:	85 e1       	ldi	r24, 0x15	; 21
   19964:	94 e0       	ldi	r25, 0x04	; 4
   19966:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3164
        payload[0] = 0;
   1996a:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3165
        createString(payload, ':', tds.rom, 8, 16);
   1996c:	00 e1       	ldi	r16, 0x10	; 16
   1996e:	28 e0       	ldi	r18, 0x08	; 8
   19970:	a5 01       	movw	r20, r10
   19972:	6a e3       	ldi	r22, 0x3A	; 58
   19974:	c3 01       	movw	r24, r6
   19976:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3166
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "rom", payload);
   1997a:	93 01       	movw	r18, r6
   1997c:	4b e6       	ldi	r20, 0x6B	; 107
   1997e:	57 e0       	ldi	r21, 0x07	; 7
   19980:	61 2f       	mov	r22, r17
   19982:	85 e1       	ldi	r24, 0x15	; 21
   19984:	94 e0       	ldi	r25, 0x04	; 4
   19986:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3167
        tt = tds.period;
   1998a:	66 96       	adiw	r28, 0x16	; 22
   1998c:	8f ad       	ldd	r24, Y+63	; 0x3f
   1998e:	66 97       	sbiw	r28, 0x16	; 22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19990:	4a e0       	ldi	r20, 0x0A	; 10
   19992:	b3 01       	movw	r22, r6
   19994:	90 e0       	ldi	r25, 0x00	; 0
   19996:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3169
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "period", payload);
   1999a:	93 01       	movw	r18, r6
   1999c:	4a e8       	ldi	r20, 0x8A	; 138
   1999e:	56 e0       	ldi	r21, 0x06	; 6
   199a0:	61 2f       	mov	r22, r17
   199a2:	85 e1       	ldi	r24, 0x15	; 21
   199a4:	94 e0       	ldi	r25, 0x04	; 4
   199a6:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3171

        tt = (uptime & 0xff) - status_tds18s20[id].period_now;
   199aa:	80 91 6e 0c 	lds	r24, 0x0C6E	; 0x800c6e <uptime>
   199ae:	f7 01       	movw	r30, r14
   199b0:	94 8d       	ldd	r25, Z+28	; 0x1c
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   199b2:	4a e0       	ldi	r20, 0x0A	; 10
   199b4:	b3 01       	movw	r22, r6
   199b6:	89 1b       	sub	r24, r25
   199b8:	99 0b       	sbc	r25, r25
   199ba:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3173
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "start_at", payload);
   199be:	93 01       	movw	r18, r6
   199c0:	4f eb       	ldi	r20, 0xBF	; 191
   199c2:	58 e0       	ldi	r21, 0x08	; 8
   199c4:	61 2f       	mov	r22, r17
   199c6:	85 e1       	ldi	r24, 0x15	; 21
   199c8:	94 e0       	ldi	r25, 0x04	; 4
   199ca:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3142
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   199ce:	1f 5f       	subi	r17, 0xFF	; 255
   199d0:	fe e1       	ldi	r31, 0x1E	; 30
   199d2:	ef 0e       	add	r14, r31
   199d4:	f1 1c       	adc	r15, r1
   199d6:	16 30       	cpi	r17, 0x06	; 6
   199d8:	09 f0       	breq	.+2      	; 0x199dc <main+0xcbe>
   199da:	45 cf       	rjmp	.-374    	; 0x19866 <main+0xb48>
   199dc:	51 2c       	mov	r5, r1
   199de:	41 2c       	mov	r4, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3190
{
  char payload[64];
  char tmp1[6];
  uint8_t act = 0;
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   199e0:	b1 2c       	mov	r11, r1
   199e2:	9e 01       	movw	r18, r28
   199e4:	2f 5f       	subi	r18, 0xFF	; 255
   199e6:	3f 4f       	sbci	r19, 0xFF	; 255
   199e8:	19 01       	movw	r2, r18
   199ea:	ae 01       	movw	r20, r28
   199ec:	45 5f       	subi	r20, 0xF5	; 245
   199ee:	5f 4f       	sbci	r21, 0xFF	; 255
   199f0:	c1 55       	subi	r28, 0x51	; 81
   199f2:	df 4f       	sbci	r29, 0xFF	; 255
   199f4:	59 83       	std	Y+1, r21	; 0x01
   199f6:	48 83       	st	Y, r20
   199f8:	cf 5a       	subi	r28, 0xAF	; 175
   199fa:	d0 40       	sbci	r29, 0x00	; 0
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   199fc:	96 e0       	ldi	r25, 0x06	; 6
   199fe:	a9 2e       	mov	r10, r25
thermostat_program_get_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:291
  }
}
//// globalni povoleni programu a nastaveni rezimu
uint8_t thermostat_program_get_active(uint8_t program_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
   19a00:	c2 01       	movw	r24, r4
   19a02:	8f 50       	subi	r24, 0x0F	; 15
   19a04:	9e 4f       	sbci	r25, 0xFE	; 254
   19a06:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   19a0a:	d8 2e       	mov	r13, r24
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3193
  {
    act = thermostat_program_get_active(idx);
    if ( act != PROG_FREE)
   19a0c:	5f ef       	ldi	r21, 0xFF	; 255
   19a0e:	85 17       	cp	r24, r21
   19a10:	09 f4       	brne	.+2      	; 0x19a14 <main+0xcf6>
   19a12:	0a c1       	rjmp	.+532    	; 0x19c28 <main+0xf0a>
   19a14:	81 01       	movw	r16, r2
thermostat_program_get_name():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:274
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
   19a16:	72 01       	movw	r14, r4
   19a18:	e2 18       	sub	r14, r2
   19a1a:	f3 08       	sbc	r15, r3
   19a1c:	6c ec       	ldi	r22, 0xCC	; 204
   19a1e:	e6 1a       	sub	r14, r22
   19a20:	6d ef       	ldi	r22, 0xFD	; 253
   19a22:	f6 0a       	sbc	r15, r22
   19a24:	c7 01       	movw	r24, r14
   19a26:	80 0f       	add	r24, r16
   19a28:	91 1f       	adc	r25, r17
   19a2a:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:275
    name[i] = t;
   19a2e:	f8 01       	movw	r30, r16
   19a30:	81 93       	st	Z+, r24
   19a32:	8f 01       	movw	r16, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:276
    if (t == 0) break;
   19a34:	88 23       	and	r24, r24
   19a36:	49 f0       	breq	.+18     	; 0x19a4a <main+0xd2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:272
//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   19a38:	c1 55       	subi	r28, 0x51	; 81
   19a3a:	df 4f       	sbci	r29, 0xFF	; 255
   19a3c:	28 81       	ld	r18, Y
   19a3e:	39 81       	ldd	r19, Y+1	; 0x01
   19a40:	cf 5a       	subi	r28, 0xAF	; 175
   19a42:	d0 40       	sbci	r29, 0x00	; 0
   19a44:	2e 17       	cp	r18, r30
   19a46:	3f 07       	cpc	r19, r31
   19a48:	69 f7       	brne	.-38     	; 0x19a24 <main+0xd06>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3196
    {
      thermostat_program_get_name(idx, payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "name", payload);
   19a4a:	93 01       	movw	r18, r6
   19a4c:	4f e0       	ldi	r20, 0x0F	; 15
   19a4e:	54 e0       	ldi	r21, 0x04	; 4
   19a50:	6b 2d       	mov	r22, r11
   19a52:	88 ec       	ldi	r24, 0xC8	; 200
   19a54:	98 e0       	ldi	r25, 0x08	; 8
   19a56:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19a5a:	4a e0       	ldi	r20, 0x0A	; 10
   19a5c:	b3 01       	movw	r22, r6
   19a5e:	8d 2d       	mov	r24, r13
   19a60:	90 e0       	ldi	r25, 0x00	; 0
   19a62:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3198
      itoa(act, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "active", payload);
   19a66:	93 01       	movw	r18, r6
   19a68:	49 e1       	ldi	r20, 0x19	; 25
   19a6a:	54 e0       	ldi	r21, 0x04	; 4
   19a6c:	6b 2d       	mov	r22, r11
   19a6e:	88 ec       	ldi	r24, 0xC8	; 200
   19a70:	98 e0       	ldi	r25, 0x08	; 8
   19a72:	0e 94 dd b1 	call	0x163ba	; 0x163ba <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.152]>
   19a76:	91 2c       	mov	r9, r1
   19a78:	81 2c       	mov	r8, r1
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   19a7a:	a2 01       	movw	r20, r4
   19a7c:	4e 50       	subi	r20, 0x0E	; 14
   19a7e:	5e 4f       	sbci	r21, 0xFE	; 254
   19a80:	cd 54       	subi	r28, 0x4D	; 77
   19a82:	df 4f       	sbci	r29, 0xFF	; 255
   19a84:	59 83       	std	Y+1, r21	; 0x01
   19a86:	48 83       	st	Y, r20
   19a88:	c3 5b       	subi	r28, 0xB3	; 179
   19a8a:	d0 40       	sbci	r29, 0x00	; 0
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3201
      for (uint8_t progid = 0 ; progid < MAX_PROGRAM_INTERVAL; progid++)
      {
        thermostat_program_get_time(idx, progid, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   19a8c:	be 01       	movw	r22, r28
   19a8e:	6f 57       	subi	r22, 0x7F	; 127
   19a90:	7f 4f       	sbci	r23, 0xFF	; 255
   19a92:	6b 01       	movw	r12, r22
   19a94:	ce 01       	movw	r24, r28
   19a96:	8c 55       	subi	r24, 0x5C	; 92
   19a98:	9f 4f       	sbci	r25, 0xFF	; 255
   19a9a:	7c 01       	movw	r14, r24
   19a9c:	8e 01       	movw	r16, r28
   19a9e:	04 55       	subi	r16, 0x54	; 84
   19aa0:	1f 4f       	sbci	r17, 0xFF	; 255
   19aa2:	9e 01       	movw	r18, r28
   19aa4:	23 55       	subi	r18, 0x53	; 83
   19aa6:	3f 4f       	sbci	r19, 0xFF	; 255
   19aa8:	ae 01       	movw	r20, r28
   19aaa:	42 55       	subi	r20, 0x52	; 82
   19aac:	5f 4f       	sbci	r21, 0xFF	; 255
   19aae:	68 2d       	mov	r22, r8
   19ab0:	8b 2d       	mov	r24, r11
   19ab2:	0e 94 d2 6a 	call	0xd5a4	; 0xd5a4 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3202
        if (active == 1)
   19ab6:	cf 57       	subi	r28, 0x7F	; 127
   19ab8:	df 4f       	sbci	r29, 0xFF	; 255
   19aba:	88 81       	ld	r24, Y
   19abc:	c1 58       	subi	r28, 0x81	; 129
   19abe:	d0 40       	sbci	r29, 0x00	; 0
   19ac0:	81 30       	cpi	r24, 0x01	; 1
   19ac2:	09 f0       	breq	.+2      	; 0x19ac6 <main+0xda8>
   19ac4:	a9 c0       	rjmp	.+338    	; 0x19c18 <main+0xefa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3204
        {
          itoa(start_hour, tmp1, 10);
   19ac6:	c2 55       	subi	r28, 0x52	; 82
   19ac8:	df 4f       	sbci	r29, 0xFF	; 255
   19aca:	88 81       	ld	r24, Y
   19acc:	ce 5a       	subi	r28, 0xAE	; 174
   19ace:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19ad0:	4a e0       	ldi	r20, 0x0A	; 10
   19ad2:	be 01       	movw	r22, r28
   19ad4:	6f 5b       	subi	r22, 0xBF	; 191
   19ad6:	7f 4f       	sbci	r23, 0xFF	; 255
   19ad8:	90 e0       	ldi	r25, 0x00	; 0
   19ada:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3205
          strcpy(payload, tmp1);
   19ade:	be 01       	movw	r22, r28
   19ae0:	6f 5b       	subi	r22, 0xBF	; 191
   19ae2:	7f 4f       	sbci	r23, 0xFF	; 255
   19ae4:	c3 01       	movw	r24, r6
   19ae6:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3206
          strcat(payload, ",");
   19aea:	68 e5       	ldi	r22, 0x58	; 88
   19aec:	75 e0       	ldi	r23, 0x05	; 5
   19aee:	c3 01       	movw	r24, r6
   19af0:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3207
          itoa(start_min, tmp1, 10);
   19af4:	c3 55       	subi	r28, 0x53	; 83
   19af6:	df 4f       	sbci	r29, 0xFF	; 255
   19af8:	88 81       	ld	r24, Y
   19afa:	cd 5a       	subi	r28, 0xAD	; 173
   19afc:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19afe:	4a e0       	ldi	r20, 0x0A	; 10
   19b00:	be 01       	movw	r22, r28
   19b02:	6f 5b       	subi	r22, 0xBF	; 191
   19b04:	7f 4f       	sbci	r23, 0xFF	; 255
   19b06:	90 e0       	ldi	r25, 0x00	; 0
   19b08:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3208
          strcat(payload, tmp1);
   19b0c:	be 01       	movw	r22, r28
   19b0e:	6f 5b       	subi	r22, 0xBF	; 191
   19b10:	7f 4f       	sbci	r23, 0xFF	; 255
   19b12:	c3 01       	movw	r24, r6
   19b14:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3209
          strcat(payload, ",");
   19b18:	68 e5       	ldi	r22, 0x58	; 88
   19b1a:	75 e0       	ldi	r23, 0x05	; 5
   19b1c:	c3 01       	movw	r24, r6
   19b1e:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3210
          itoa(stop_hour, tmp1, 10);
   19b22:	c4 55       	subi	r28, 0x54	; 84
   19b24:	df 4f       	sbci	r29, 0xFF	; 255
   19b26:	88 81       	ld	r24, Y
   19b28:	cc 5a       	subi	r28, 0xAC	; 172
   19b2a:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19b2c:	4a e0       	ldi	r20, 0x0A	; 10
   19b2e:	be 01       	movw	r22, r28
   19b30:	6f 5b       	subi	r22, 0xBF	; 191
   19b32:	7f 4f       	sbci	r23, 0xFF	; 255
   19b34:	90 e0       	ldi	r25, 0x00	; 0
   19b36:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3211
          strcat(payload, tmp1);
   19b3a:	be 01       	movw	r22, r28
   19b3c:	6f 5b       	subi	r22, 0xBF	; 191
   19b3e:	7f 4f       	sbci	r23, 0xFF	; 255
   19b40:	c3 01       	movw	r24, r6
   19b42:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3212
          strcat(payload, ",");
   19b46:	68 e5       	ldi	r22, 0x58	; 88
   19b48:	75 e0       	ldi	r23, 0x05	; 5
   19b4a:	c3 01       	movw	r24, r6
   19b4c:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3213
          itoa(stop_min, tmp1, 10);
   19b50:	cc 55       	subi	r28, 0x5C	; 92
   19b52:	df 4f       	sbci	r29, 0xFF	; 255
   19b54:	88 81       	ld	r24, Y
   19b56:	c4 5a       	subi	r28, 0xA4	; 164
   19b58:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19b5a:	4a e0       	ldi	r20, 0x0A	; 10
   19b5c:	be 01       	movw	r22, r28
   19b5e:	6f 5b       	subi	r22, 0xBF	; 191
   19b60:	7f 4f       	sbci	r23, 0xFF	; 255
   19b62:	90 e0       	ldi	r25, 0x00	; 0
   19b64:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3214
          strcat(payload, tmp1);
   19b68:	be 01       	movw	r22, r28
   19b6a:	6f 5b       	subi	r22, 0xBF	; 191
   19b6c:	7f 4f       	sbci	r23, 0xFF	; 255
   19b6e:	c3 01       	movw	r24, r6
   19b70:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3215
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "time", payload);
   19b74:	93 01       	movw	r18, r6
   19b76:	4f ed       	ldi	r20, 0xDF	; 223
   19b78:	56 e0       	ldi	r21, 0x06	; 6
   19b7a:	68 2d       	mov	r22, r8
   19b7c:	8b 2d       	mov	r24, r11
   19b7e:	0e 94 f0 ac 	call	0x159e0	; 0x159e0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3216
          itoa(active, tmp1, 10);
   19b82:	cf 57       	subi	r28, 0x7F	; 127
   19b84:	df 4f       	sbci	r29, 0xFF	; 255
   19b86:	88 81       	ld	r24, Y
   19b88:	c1 58       	subi	r28, 0x81	; 129
   19b8a:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19b8c:	4a e0       	ldi	r20, 0x0A	; 10
   19b8e:	be 01       	movw	r22, r28
   19b90:	6f 5b       	subi	r22, 0xBF	; 191
   19b92:	7f 4f       	sbci	r23, 0xFF	; 255
   19b94:	90 e0       	ldi	r25, 0x00	; 0
   19b96:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3217
          strcpy(payload, tmp1);
   19b9a:	be 01       	movw	r22, r28
   19b9c:	6f 5b       	subi	r22, 0xBF	; 191
   19b9e:	7f 4f       	sbci	r23, 0xFF	; 255
   19ba0:	c3 01       	movw	r24, r6
   19ba2:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3218
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "active", payload);
   19ba6:	93 01       	movw	r18, r6
   19ba8:	49 e1       	ldi	r20, 0x19	; 25
   19baa:	54 e0       	ldi	r21, 0x04	; 4
   19bac:	68 2d       	mov	r22, r8
   19bae:	8b 2d       	mov	r24, r11
   19bb0:	0e 94 f0 ac 	call	0x159e0	; 0x159e0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.150]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3219
          itoa(thermostat_program_get_threshold(idx, progid), tmp1, 10);
   19bb4:	68 2d       	mov	r22, r8
   19bb6:	8b 2d       	mov	r24, r11
   19bb8:	0e 94 b0 6a 	call	0xd560	; 0xd560 <thermostat_program_get_threshold(unsigned char, unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19bbc:	4a e0       	ldi	r20, 0x0A	; 10
   19bbe:	be 01       	movw	r22, r28
   19bc0:	6f 5b       	subi	r22, 0xBF	; 191
   19bc2:	7f 4f       	sbci	r23, 0xFF	; 255
   19bc4:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3220
          strcpy(payload, tmp1);
   19bc8:	be 01       	movw	r22, r28
   19bca:	6f 5b       	subi	r22, 0xBF	; 191
   19bcc:	7f 4f       	sbci	r23, 0xFF	; 255
   19bce:	c3 01       	movw	r24, r6
   19bd0:	0e 94 a0 e1 	call	0x1c340	; 0x1c340 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3221
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "threshold", payload);
   19bd4:	93 01       	movw	r18, r6
   19bd6:	41 e9       	ldi	r20, 0x91	; 145
   19bd8:	56 e0       	ldi	r21, 0x06	; 6
   19bda:	68 2d       	mov	r22, r8
   19bdc:	8b 2d       	mov	r24, r11
   19bde:	0e 94 f0 ac 	call	0x159e0	; 0x159e0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.150]>
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
   19be2:	a8 9c       	mul	r10, r8
   19be4:	c0 01       	movw	r24, r0
   19be6:	a9 9c       	mul	r10, r9
   19be8:	90 0d       	add	r25, r0
   19bea:	11 24       	eor	r1, r1
   19bec:	cd 54       	subi	r28, 0x4D	; 77
   19bee:	df 4f       	sbci	r29, 0xFF	; 255
   19bf0:	e8 81       	ld	r30, Y
   19bf2:	f9 81       	ldd	r31, Y+1	; 0x01
   19bf4:	c3 5b       	subi	r28, 0xB3	; 179
   19bf6:	d0 40       	sbci	r29, 0x00	; 0
   19bf8:	8e 0f       	add	r24, r30
   19bfa:	9f 1f       	adc	r25, r31
   19bfc:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   19c00:	4a e0       	ldi	r20, 0x0A	; 10
   19c02:	b3 01       	movw	r22, r6
   19c04:	90 e0       	ldi	r25, 0x00	; 0
   19c06:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3223
          itoa(thermostat_program_get_week(idx, progid), payload, 10);
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "week", payload);
   19c0a:	93 01       	movw	r18, r6
   19c0c:	4d ec       	ldi	r20, 0xCD	; 205
   19c0e:	58 e0       	ldi	r21, 0x08	; 8
   19c10:	68 2d       	mov	r22, r8
   19c12:	8b 2d       	mov	r24, r11
   19c14:	0e 94 f0 ac 	call	0x159e0	; 0x159e0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.150]>
   19c18:	ff ef       	ldi	r31, 0xFF	; 255
   19c1a:	8f 1a       	sub	r8, r31
   19c1c:	9f 0a       	sbc	r9, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3199
    {
      thermostat_program_get_name(idx, payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "name", payload);
      itoa(act, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "active", payload);
      for (uint8_t progid = 0 ; progid < MAX_PROGRAM_INTERVAL; progid++)
   19c1e:	2b e0       	ldi	r18, 0x0B	; 11
   19c20:	82 16       	cp	r8, r18
   19c22:	91 04       	cpc	r9, r1
   19c24:	09 f0       	breq	.+2      	; 0x19c28 <main+0xf0a>
   19c26:	32 cf       	rjmp	.-412    	; 0x19a8c <main+0xd6e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3190
{
  char payload[64];
  char tmp1[6];
  uint8_t act = 0;
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   19c28:	b3 94       	inc	r11
   19c2a:	3d e4       	ldi	r19, 0x4D	; 77
   19c2c:	43 0e       	add	r4, r19
   19c2e:	51 1c       	adc	r5, r1
   19c30:	48 e0       	ldi	r20, 0x08	; 8
   19c32:	b4 12       	cpse	r11, r20
   19c34:	e5 ce       	rjmp	.-566    	; 0x19a00 <main+0xce2>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3504
  int16_t thresh = 0;
  uint8_t pwm = 200; // start hodnota
  uint8_t te = 0;
  uint8_t prg = 0;
  uint8_t act;
  uint8_t active = 0;
   19c36:	c2 55       	subi	r28, 0x52	; 82
   19c38:	df 4f       	sbci	r29, 0xFF	; 255
   19c3a:	18 82       	st	Y, r1
   19c3c:	ce 5a       	subi	r28, 0xAE	; 174
   19c3e:	d0 40       	sbci	r29, 0x00	; 0
   19c40:	0c e5       	ldi	r16, 0x5C	; 92
   19c42:	20 2e       	mov	r2, r16
   19c44:	33 24       	eor	r3, r3
   19c46:	33 94       	inc	r3
   19c48:	91 2c       	mov	r9, r1
   19c4a:	81 2c       	mov	r8, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3500
{
  uint8_t tdsid = 0;
  uint8_t tmode = 0;
  uint8_t tout = 0;
  int16_t thresh = 0;
  uint8_t pwm = 200; // start hodnota
   19c4c:	88 ec       	ldi	r24, 0xC8	; 200
   19c4e:	78 2e       	mov	r7, r24
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   19c50:	c1 01       	movw	r24, r2
   19c52:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   19c56:	a8 2e       	mov	r10, r24
thermostat_ring_get_mode():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
   19c58:	c1 01       	movw	r24, r2
   19c5a:	02 96       	adiw	r24, 0x02	; 2
   19c5c:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   19c60:	d8 2e       	mov	r13, r24
thermostat_ring_get_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   19c62:	c1 01       	movw	r24, r2
   19c64:	03 96       	adiw	r24, 0x03	; 3
   19c66:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   19c6a:	b8 2e       	mov	r11, r24
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3513
  for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
  {
    tdsid = thermostat_ring_get_asociate_tds(tix);
    tmode = thermostat_ring_get_mode(tix);
    tout = thermostat_ring_get_output(tix);
    thresh = thermostat_ring_get_mezni(tix);
   19c6c:	88 2d       	mov	r24, r8
   19c6e:	0e 94 25 6b 	call	0xd64a	; 0xd64a <thermostat_ring_get_mezni(unsigned char)>
   19c72:	cd 54       	subi	r28, 0x4D	; 77
   19c74:	df 4f       	sbci	r29, 0xFF	; 255
   19c76:	99 83       	std	Y+1, r25	; 0x01
   19c78:	88 83       	st	Y, r24
   19c7a:	c3 5b       	subi	r28, 0xB3	; 179
   19c7c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3514
    if (tmode == TERM_MODE_PROG)
   19c7e:	52 e0       	ldi	r21, 0x02	; 2
   19c80:	d5 12       	cpse	r13, r21
   19c82:	52 c4       	rjmp	.+2212   	; 0x1a528 <main+0x180a>
thermostat_ring_get_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   19c84:	c1 01       	movw	r24, r2
   19c86:	01 97       	sbiw	r24, 0x01	; 1
   19c88:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   19c8c:	68 2e       	mov	r6, r24
dayOfTheWeek():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:178
    mm = conv2d(buff + 3);
    ss = conv2d(buff + 6);
}

uint8_t DateTime::dayOfTheWeek() const {    
    uint16_t day = date2days(yOff, m, d);
   19c8e:	90 91 40 12 	lds	r25, 0x1240	; 0x801240 <now+0x1>
   19c92:	eb ea       	ldi	r30, 0xAB	; 171
   19c94:	f2 e6       	ldi	r31, 0x62	; 98
main():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:59
// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
   19c96:	81 e0       	ldi	r24, 0x01	; 1
date2days():
   19c98:	89 17       	cp	r24, r25
   19c9a:	20 f4       	brcc	.+8      	; 0x19ca4 <main+0xf86>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:60
        days += pgm_read_byte(daysInMonth + i - 1);
   19c9c:	24 91       	lpm	r18, Z
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:59
// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
   19c9e:	8f 5f       	subi	r24, 0xFF	; 255
   19ca0:	31 96       	adiw	r30, 0x01	; 1
   19ca2:	fa cf       	rjmp	.-12     	; 0x19c98 <main+0xf7a>
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:392
{
  uint8_t ret = PROG_FREE;
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
   19ca4:	6f ef       	ldi	r22, 0xFF	; 255
   19ca6:	66 16       	cp	r6, r22
   19ca8:	09 f4       	brne	.+2      	; 0x19cac <main+0xf8e>
   19caa:	7f c0       	rjmp	.+254    	; 0x19daa <main+0x108c>
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   19cac:	7d e4       	ldi	r23, 0x4D	; 77
   19cae:	67 9e       	mul	r6, r23
   19cb0:	c0 01       	movw	r24, r0
   19cb2:	11 24       	eor	r1, r1
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:402
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
   19cb4:	40 91 42 12 	lds	r20, 0x1242	; 0x801242 <now+0x3>
   19cb8:	20 91 43 12 	lds	r18, 0x1243	; 0x801243 <now+0x4>
   19cbc:	30 e0       	ldi	r19, 0x00	; 0
   19cbe:	f9 01       	movw	r30, r18
   19cc0:	5c e3       	ldi	r21, 0x3C	; 60
   19cc2:	45 9f       	mul	r20, r21
   19cc4:	e0 0d       	add	r30, r0
   19cc6:	f1 1d       	adc	r31, r1
   19cc8:	11 24       	eor	r1, r1
   19cca:	cf 54       	subi	r28, 0x4F	; 79
   19ccc:	df 4f       	sbci	r29, 0xFF	; 255
   19cce:	f9 83       	std	Y+1, r31	; 0x01
   19cd0:	e8 83       	st	Y, r30
   19cd2:	c1 5b       	subi	r28, 0xB1	; 177
   19cd4:	d0 40       	sbci	r29, 0x00	; 0
   19cd6:	51 2c       	mov	r5, r1
   19cd8:	41 2c       	mov	r4, r1
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   19cda:	bc 01       	movw	r22, r24
   19cdc:	6e 50       	subi	r22, 0x0E	; 14
   19cde:	7e 4f       	sbci	r23, 0xFE	; 254
   19ce0:	c7 54       	subi	r28, 0x47	; 71
   19ce2:	df 4f       	sbci	r29, 0xFF	; 255
   19ce4:	79 83       	std	Y+1, r23	; 0x01
   19ce6:	68 83       	st	Y, r22
   19ce8:	c9 5b       	subi	r28, 0xB9	; 185
   19cea:	d0 40       	sbci	r29, 0x00	; 0
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:396
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   19cec:	ce 01       	movw	r24, r28
   19cee:	01 96       	adiw	r24, 0x01	; 1
   19cf0:	6c 01       	movw	r12, r24
   19cf2:	fe 01       	movw	r30, r28
   19cf4:	ef 5b       	subi	r30, 0xBF	; 191
   19cf6:	ff 4f       	sbci	r31, 0xFF	; 255
   19cf8:	7f 01       	movw	r14, r30
   19cfa:	8e 01       	movw	r16, r28
   19cfc:	0c 55       	subi	r16, 0x5C	; 92
   19cfe:	1f 4f       	sbci	r17, 0xFF	; 255
   19d00:	9e 01       	movw	r18, r28
   19d02:	24 55       	subi	r18, 0x54	; 84
   19d04:	3f 4f       	sbci	r19, 0xFF	; 255
   19d06:	ae 01       	movw	r20, r28
   19d08:	43 55       	subi	r20, 0x53	; 83
   19d0a:	5f 4f       	sbci	r21, 0xFF	; 255
   19d0c:	64 2d       	mov	r22, r4
   19d0e:	86 2d       	mov	r24, r6
   19d10:	0e 94 d2 6a 	call	0xd5a4	; 0xd5a4 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:397
      if (active == 1)
   19d14:	89 81       	ldd	r24, Y+1	; 0x01
   19d16:	81 30       	cpi	r24, 0x01	; 1
   19d18:	09 f0       	breq	.+2      	; 0x19d1c <main+0xffe>
   19d1a:	fd c3       	rjmp	.+2042   	; 0x1a516 <main+0x17f8>
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   19d1c:	f6 e0       	ldi	r31, 0x06	; 6
   19d1e:	f4 9d       	mul	r31, r4
   19d20:	c0 01       	movw	r24, r0
   19d22:	f5 9d       	mul	r31, r5
   19d24:	90 0d       	add	r25, r0
   19d26:	11 24       	eor	r1, r1
   19d28:	c7 54       	subi	r28, 0x47	; 71
   19d2a:	df 4f       	sbci	r29, 0xFF	; 255
   19d2c:	28 81       	ld	r18, Y
   19d2e:	39 81       	ldd	r19, Y+1	; 0x01
   19d30:	c9 5b       	subi	r28, 0xB9	; 185
   19d32:	d0 40       	sbci	r29, 0x00	; 0
   19d34:	82 0f       	add	r24, r18
   19d36:	93 1f       	adc	r25, r19
   19d38:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:400
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
   19d3c:	c3 55       	subi	r28, 0x53	; 83
   19d3e:	df 4f       	sbci	r29, 0xFF	; 255
   19d40:	98 81       	ld	r25, Y
   19d42:	cd 5a       	subi	r28, 0xAD	; 173
   19d44:	d0 40       	sbci	r29, 0x00	; 0
   19d46:	c4 55       	subi	r28, 0x54	; 84
   19d48:	df 4f       	sbci	r29, 0xFF	; 255
   19d4a:	28 81       	ld	r18, Y
   19d4c:	cc 5a       	subi	r28, 0xAC	; 172
   19d4e:	d0 40       	sbci	r29, 0x00	; 0
   19d50:	30 e0       	ldi	r19, 0x00	; 0
   19d52:	4c e3       	ldi	r20, 0x3C	; 60
   19d54:	94 9f       	mul	r25, r20
   19d56:	20 0d       	add	r18, r0
   19d58:	31 1d       	adc	r19, r1
   19d5a:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   19d5c:	cf 54       	subi	r28, 0x4F	; 79
   19d5e:	df 4f       	sbci	r29, 0xFF	; 255
   19d60:	68 81       	ld	r22, Y
   19d62:	79 81       	ldd	r23, Y+1	; 0x01
   19d64:	c1 5b       	subi	r28, 0xB1	; 177
   19d66:	d0 40       	sbci	r29, 0x00	; 0
   19d68:	62 17       	cp	r22, r18
   19d6a:	73 07       	cpc	r23, r19
   19d6c:	0c f4       	brge	.+2      	; 0x19d70 <main+0x1052>
   19d6e:	d3 c3       	rjmp	.+1958   	; 0x1a516 <main+0x17f8>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:401
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
   19d70:	cc 55       	subi	r28, 0x5C	; 92
   19d72:	df 4f       	sbci	r29, 0xFF	; 255
   19d74:	98 81       	ld	r25, Y
   19d76:	c4 5a       	subi	r28, 0xA4	; 164
   19d78:	d0 40       	sbci	r29, 0x00	; 0
   19d7a:	22 96       	adiw	r28, 0x02	; 2
   19d7c:	2f ad       	ldd	r18, Y+63	; 0x3f
   19d7e:	22 97       	sbiw	r28, 0x02	; 2
   19d80:	30 e0       	ldi	r19, 0x00	; 0
   19d82:	94 9f       	mul	r25, r20
   19d84:	20 0d       	add	r18, r0
   19d86:	31 1d       	adc	r19, r1
   19d88:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   19d8a:	62 17       	cp	r22, r18
   19d8c:	73 07       	cpc	r23, r19
   19d8e:	0c f0       	brlt	.+2      	; 0x19d92 <main+0x1074>
   19d90:	c2 c3       	rjmp	.+1924   	; 0x1a516 <main+0x17f8>
   19d92:	80 ff       	sbrs	r24, 0
   19d94:	c0 c3       	rjmp	.+1920   	; 0x1a516 <main+0x17f8>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:405
        {
          *threshold = thermostat_program_get_threshold(program, interval_id);
   19d96:	64 2d       	mov	r22, r4
   19d98:	86 2d       	mov	r24, r6
   19d9a:	0e 94 b0 6a 	call	0xd560	; 0xd560 <thermostat_program_get_threshold(unsigned char, unsigned char)>
   19d9e:	cd 54       	subi	r28, 0x4D	; 77
   19da0:	df 4f       	sbci	r29, 0xFF	; 255
   19da2:	99 83       	std	Y+1, r25	; 0x01
   19da4:	88 83       	st	Y, r24
   19da6:	c3 5b       	subi	r28, 0xB3	; 179
   19da8:	d0 40       	sbci	r29, 0x00	; 0
thermostat_ring_set_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   19daa:	f4 01       	movw	r30, r8
   19dac:	e5 59       	subi	r30, 0x95	; 149
   19dae:	f4 4f       	sbci	r31, 0xF4	; 244
   19db0:	10 82       	st	Z, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3531
            thermostat_ring_set_state(tix, TERM_STAV_STOP);
            thermostat_ring_set_power(tix, 0);
          }
        case PROG_NO_INTERVAL:
          {
            tmode = TERM_MODE_OFF;
   19db2:	d1 2c       	mov	r13, r1
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3567

      thermostat_pid_setdirection_reverse(tix);
    }


    if (tdsid < HW_ONEWIRE_MAXROMS )
   19db4:	f5 e0       	ldi	r31, 0x05	; 5
   19db6:	fa 15       	cp	r31, r10
   19db8:	08 f4       	brcc	.+2      	; 0x19dbc <main+0x109e>
   19dba:	56 c0       	rjmp	.+172    	; 0x19e68 <main+0x114a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3569
    {
      if (get_tds18s20(tdsid, &tds) == 1)
   19dbc:	be 01       	movw	r22, r28
   19dbe:	6f 57       	subi	r22, 0x7F	; 127
   19dc0:	7f 4f       	sbci	r23, 0xFF	; 255
   19dc2:	8a 2d       	mov	r24, r10
   19dc4:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   19dc8:	81 30       	cpi	r24, 0x01	; 1
   19dca:	09 f0       	breq	.+2      	; 0x19dce <main+0x10b0>
   19dcc:	4d c0       	rjmp	.+154    	; 0x19e68 <main+0x114a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3570
        if (tds.used == 1 && status_tds18s20[tdsid].online == True)
   19dce:	cf 57       	subi	r28, 0x7F	; 127
   19dd0:	df 4f       	sbci	r29, 0xFF	; 255
   19dd2:	88 81       	ld	r24, Y
   19dd4:	c1 58       	subi	r28, 0x81	; 129
   19dd6:	d0 40       	sbci	r29, 0x00	; 0
   19dd8:	81 30       	cpi	r24, 0x01	; 1
   19dda:	09 f0       	breq	.+2      	; 0x19dde <main+0x10c0>
   19ddc:	c7 c3       	rjmp	.+1934   	; 0x1a56c <main+0x184e>
   19dde:	2e e1       	ldi	r18, 0x1E	; 30
   19de0:	a2 9e       	mul	r10, r18
   19de2:	f0 01       	movw	r30, r0
   19de4:	11 24       	eor	r1, r1
   19de6:	ef 54       	subi	r30, 0x4F	; 79
   19de8:	f4 4f       	sbci	r31, 0xF4	; 244
   19dea:	83 8d       	ldd	r24, Z+27	; 0x1b
   19dec:	81 30       	cpi	r24, 0x01	; 1
   19dee:	09 f0       	breq	.+2      	; 0x19df2 <main+0x10d4>
   19df0:	bd c3       	rjmp	.+1914   	; 0x1a56c <main+0x184e>
   19df2:	84 01       	movw	r16, r8
   19df4:	00 0f       	add	r16, r16
   19df6:	11 1f       	adc	r17, r17
   19df8:	00 0f       	add	r16, r16
   19dfa:	11 1f       	adc	r17, r17
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
  return PID_p[idx];
}

void thermostat_pid_input(uint8_t idx, double value)
{
  PID_Input[idx] = value;
   19dfc:	a8 01       	movw	r20, r16
   19dfe:	40 59       	subi	r20, 0x90	; 144
   19e00:	54 4f       	sbci	r21, 0xF4	; 244
   19e02:	7a 01       	movw	r14, r20
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3572
        {
          thermostat_pid_input(tix, status_tds18s20[tdsid].temp / 100.0);
   19e04:	65 81       	ldd	r22, Z+5	; 0x05
   19e06:	76 81       	ldd	r23, Z+6	; 0x06
   19e08:	07 2e       	mov	r0, r23
   19e0a:	00 0c       	add	r0, r0
   19e0c:	88 0b       	sbc	r24, r24
   19e0e:	99 0b       	sbc	r25, r25
   19e10:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
   19e14:	20 e0       	ldi	r18, 0x00	; 0
   19e16:	30 e0       	ldi	r19, 0x00	; 0
   19e18:	48 ec       	ldi	r20, 0xC8	; 200
   19e1a:	52 e4       	ldi	r21, 0x42	; 66
   19e1c:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
   19e20:	f7 01       	movw	r30, r14
   19e22:	60 83       	st	Z, r22
   19e24:	71 83       	std	Z+1, r23	; 0x01
   19e26:	82 83       	std	Z+2, r24	; 0x02
   19e28:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_setpoint():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:75
}

void thermostat_pid_setpoint(uint8_t idx, double value)
{
  PID_Setpoint[idx] = value;
   19e2a:	98 01       	movw	r18, r16
   19e2c:	2c 57       	subi	r18, 0x7C	; 124
   19e2e:	34 4f       	sbci	r19, 0xF4	; 244
   19e30:	79 01       	movw	r14, r18
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3573
          thermostat_pid_setpoint(tix, thresh);
   19e32:	cd 54       	subi	r28, 0x4D	; 77
   19e34:	df 4f       	sbci	r29, 0xFF	; 255
   19e36:	48 81       	ld	r20, Y
   19e38:	59 81       	ldd	r21, Y+1	; 0x01
   19e3a:	c3 5b       	subi	r28, 0xB3	; 179
   19e3c:	d0 40       	sbci	r29, 0x00	; 0
   19e3e:	ba 01       	movw	r22, r20
   19e40:	55 0f       	add	r21, r21
   19e42:	88 0b       	sbc	r24, r24
   19e44:	99 0b       	sbc	r25, r25
   19e46:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
   19e4a:	f7 01       	movw	r30, r14
   19e4c:	60 83       	st	Z, r22
   19e4e:	71 83       	std	Z+1, r23	; 0x01
   19e50:	82 83       	std	Z+2, r24	; 0x02
   19e52:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:80
}

uint8_t thermostat_pid_output(uint8_t idx)
{
  return PID_Output[idx];
   19e54:	f8 01       	movw	r30, r16
   19e56:	e8 56       	subi	r30, 0x68	; 104
   19e58:	f4 4f       	sbci	r31, 0xF4	; 244
   19e5a:	60 81       	ld	r22, Z
   19e5c:	71 81       	ldd	r23, Z+1	; 0x01
   19e5e:	82 81       	ldd	r24, Z+2	; 0x02
   19e60:	93 81       	ldd	r25, Z+3	; 0x03
   19e62:	0e 94 4a e0 	call	0x1c094	; 0x1c094 <__fixunssfsi>
   19e66:	76 2e       	mov	r7, r22
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3586
          thermostat_ring_set_power(tix, pwm);
        }
    }


    if (tdsid >= HW_ONEWIRE_MAXROMS && tdsid < HW_ONEWIRE_MAXROMS + MAX_RTDS)
   19e68:	1a ef       	ldi	r17, 0xFA	; 250
   19e6a:	1a 0d       	add	r17, r10
   19e6c:	1a 30       	cpi	r17, 0x0A	; 10
   19e6e:	08 f0       	brcs	.+2      	; 0x19e72 <main+0x1154>
   19e70:	56 c0       	rjmp	.+172    	; 0x19f1e <main+0x1200>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3589
    {
      act = tdsid - HW_ONEWIRE_MAXROMS;
      remote_tds_get_active(act , &active);
   19e72:	be 01       	movw	r22, r28
   19e74:	62 55       	subi	r22, 0x52	; 82
   19e76:	7f 4f       	sbci	r23, 0xFF	; 255
   19e78:	81 2f       	mov	r24, r17
   19e7a:	0e 94 e6 76 	call	0xedcc	; 0xedcc <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3591

      if (active == 1 && remote_tds_get_last_update(act) < 180 && remote_tds_get_type(act) == RTDS_REMOTE_TYPE_TEMP)
   19e7e:	c2 55       	subi	r28, 0x52	; 82
   19e80:	df 4f       	sbci	r29, 0xFF	; 255
   19e82:	88 81       	ld	r24, Y
   19e84:	ce 5a       	subi	r28, 0xAE	; 174
   19e86:	d0 40       	sbci	r29, 0x00	; 0
   19e88:	81 30       	cpi	r24, 0x01	; 1
   19e8a:	09 f0       	breq	.+2      	; 0x19e8e <main+0x1170>
   19e8c:	f2 c3       	rjmp	.+2020   	; 0x1a672 <main+0x1954>
   19e8e:	81 2f       	mov	r24, r17
   19e90:	0e 94 3a 73 	call	0xe674	; 0xe674 <remote_tds_get_last_update(unsigned char)>
   19e94:	84 3b       	cpi	r24, 0xB4	; 180
   19e96:	08 f0       	brcs	.+2      	; 0x19e9a <main+0x117c>
   19e98:	ec c3       	rjmp	.+2008   	; 0x1a672 <main+0x1954>
   19e9a:	81 2f       	mov	r24, r17
   19e9c:	0e 94 2c 75 	call	0xea58	; 0xea58 <remote_tds_get_type(unsigned char)>
   19ea0:	81 30       	cpi	r24, 0x01	; 1
   19ea2:	09 f0       	breq	.+2      	; 0x19ea6 <main+0x1188>
   19ea4:	e6 c3       	rjmp	.+1996   	; 0x1a672 <main+0x1954>
remote_tds_get_data():
   19ea6:	81 2f       	mov	r24, r17
   19ea8:	0e 94 e4 71 	call	0xe3c8	; 0xe3c8 <remote_tds_get_data(unsigned char) [clone .part.30]>
   19eac:	84 01       	movw	r16, r8
   19eae:	00 0f       	add	r16, r16
   19eb0:	11 1f       	adc	r17, r17
   19eb2:	00 0f       	add	r16, r16
   19eb4:	11 1f       	adc	r17, r17
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
  return PID_p[idx];
}

void thermostat_pid_input(uint8_t idx, double value)
{
  PID_Input[idx] = value;
   19eb6:	98 01       	movw	r18, r16
   19eb8:	20 59       	subi	r18, 0x90	; 144
   19eba:	34 4f       	sbci	r19, 0xF4	; 244
   19ebc:	79 01       	movw	r14, r18
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3593
      {
        thermostat_pid_input(tix, remote_tds_get_data(act) / 1000.0);
   19ebe:	bc 01       	movw	r22, r24
   19ec0:	99 0f       	add	r25, r25
   19ec2:	88 0b       	sbc	r24, r24
   19ec4:	99 0b       	sbc	r25, r25
   19ec6:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
   19eca:	20 e0       	ldi	r18, 0x00	; 0
   19ecc:	30 e0       	ldi	r19, 0x00	; 0
   19ece:	4a e7       	ldi	r20, 0x7A	; 122
   19ed0:	54 e4       	ldi	r21, 0x44	; 68
   19ed2:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
   19ed6:	f7 01       	movw	r30, r14
   19ed8:	60 83       	st	Z, r22
   19eda:	71 83       	std	Z+1, r23	; 0x01
   19edc:	82 83       	std	Z+2, r24	; 0x02
   19ede:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_setpoint():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:75
}

void thermostat_pid_setpoint(uint8_t idx, double value)
{
  PID_Setpoint[idx] = value;
   19ee0:	98 01       	movw	r18, r16
   19ee2:	2c 57       	subi	r18, 0x7C	; 124
   19ee4:	34 4f       	sbci	r19, 0xF4	; 244
   19ee6:	79 01       	movw	r14, r18
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3594
        thermostat_pid_setpoint(tix, thresh);
   19ee8:	cd 54       	subi	r28, 0x4D	; 77
   19eea:	df 4f       	sbci	r29, 0xFF	; 255
   19eec:	48 81       	ld	r20, Y
   19eee:	59 81       	ldd	r21, Y+1	; 0x01
   19ef0:	c3 5b       	subi	r28, 0xB3	; 179
   19ef2:	d0 40       	sbci	r29, 0x00	; 0
   19ef4:	ba 01       	movw	r22, r20
   19ef6:	55 0f       	add	r21, r21
   19ef8:	88 0b       	sbc	r24, r24
   19efa:	99 0b       	sbc	r25, r25
   19efc:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
   19f00:	f7 01       	movw	r30, r14
   19f02:	60 83       	st	Z, r22
   19f04:	71 83       	std	Z+1, r23	; 0x01
   19f06:	82 83       	std	Z+2, r24	; 0x02
   19f08:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:80
}

uint8_t thermostat_pid_output(uint8_t idx)
{
  return PID_Output[idx];
   19f0a:	f8 01       	movw	r30, r16
   19f0c:	e8 56       	subi	r30, 0x68	; 104
   19f0e:	f4 4f       	sbci	r31, 0xF4	; 244
   19f10:	60 81       	ld	r22, Z
   19f12:	71 81       	ldd	r23, Z+1	; 0x01
   19f14:	82 81       	ldd	r24, Z+2	; 0x02
   19f16:	93 81       	ldd	r25, Z+3	; 0x03
   19f18:	0e 94 4a e0 	call	0x1c094	; 0x1c094 <__fixunssfsi>
   19f1c:	76 2e       	mov	r7, r22
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3627
        else
        blink_led_off(LED_DOWN_I);
      */
    }

    if (tmode == TERM_MODE_OFF)
   19f1e:	d1 10       	cpse	r13, r1
   19f20:	29 c3       	rjmp	.+1618   	; 0x1a574 <main+0x1856>
mqtt_publis_output():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3301
void mqtt_publis_output(uint8_t idx, uint8_t state)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   19f22:	ff ef       	ldi	r31, 0xFF	; 255
   19f24:	6e ef       	ldi	r22, 0xFE	; 254
   19f26:	bf 12       	cpse	r11, r31
   19f28:	2d c3       	rjmp	.+1626   	; 0x1a584 <main+0x1866>
   19f2a:	8f ef       	ldi	r24, 0xFF	; 255
   19f2c:	88 1a       	sub	r8, r24
   19f2e:	98 0a       	sbc	r9, r24
   19f30:	91 e2       	ldi	r25, 0x21	; 33
   19f32:	29 0e       	add	r2, r25
   19f34:	31 1c       	adc	r3, r1
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3508
  uint8_t act;
  uint8_t active = 0;
  struct_DDS18s20 tds;


  for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
   19f36:	e5 e0       	ldi	r30, 0x05	; 5
   19f38:	8e 16       	cp	r8, r30
   19f3a:	91 04       	cpc	r9, r1
   19f3c:	09 f0       	breq	.+2      	; 0x19f40 <main+0x1222>
   19f3e:	88 ce       	rjmp	.-752    	; 0x19c50 <main+0xf32>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4166
    send_device_status();
    send_mqtt_ring();
    send_mqtt_tds();
    send_mqtt_program();
    thermostat();
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   19f40:	10 e0       	ldi	r17, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4167
      if (thermostat_ring_get_active(idx) != RING_FREE)
   19f42:	81 2f       	mov	r24, r17
   19f44:	0e 94 42 6b 	call	0xd684	; 0xd684 <thermostat_ring_get_active(unsigned char)>
   19f48:	8f 3f       	cpi	r24, 0xFF	; 255
   19f4a:	19 f0       	breq	.+6      	; 0x19f52 <main+0x1234>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4168
        mqtt_send_pid_variable(idx);
   19f4c:	81 2f       	mov	r24, r17
   19f4e:	0e 94 4a 73 	call	0xe694	; 0xe694 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4166
    send_device_status();
    send_mqtt_ring();
    send_mqtt_tds();
    send_mqtt_program();
    thermostat();
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   19f52:	1f 5f       	subi	r17, 0xFF	; 255
   19f54:	15 30       	cpi	r17, 0x05	; 5
   19f56:	a9 f7       	brne	.-22     	; 0x19f42 <main+0x1224>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4169
      if (thermostat_ring_get_active(idx) != RING_FREE)
        mqtt_send_pid_variable(idx);
    send_mqtt_remote_tds_status();
   19f58:	0e 94 50 76 	call	0xeca0	; 0xeca0 <send_mqtt_remote_tds_status()>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
   19f5c:	e0 91 da 0f 	lds	r30, 0x0FDA	; 0x800fda <lm75_temp+0xb>
   19f60:	f0 91 db 0f 	lds	r31, 0x0FDB	; 0x800fdb <lm75_temp+0xc>
   19f64:	04 80       	ldd	r0, Z+4	; 0x04
   19f66:	f5 81       	ldd	r31, Z+5	; 0x05
   19f68:	e0 2d       	mov	r30, r0
   19f6a:	80 81       	ld	r24, Z
   19f6c:	0e 94 46 af 	call	0x15e8c	; 0x15e8c <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.195]>
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
   19f70:	bc 01       	movw	r22, r24
   19f72:	99 0f       	add	r25, r25
   19f74:	88 0b       	sbc	r24, r24
   19f76:	99 0b       	sbc	r25, r25
   19f78:	0e 94 9e dd 	call	0x1bb3c	; 0x1bb3c <__floatsisf>
   19f7c:	9b 01       	movw	r18, r22
   19f7e:	ac 01       	movw	r20, r24
   19f80:	60 91 d6 0f 	lds	r22, 0x0FD6	; 0x800fd6 <lm75_temp+0x7>
   19f84:	70 91 d7 0f 	lds	r23, 0x0FD7	; 0x800fd7 <lm75_temp+0x8>
   19f88:	80 91 d8 0f 	lds	r24, 0x0FD8	; 0x800fd8 <lm75_temp+0x9>
   19f8c:	90 91 d9 0f 	lds	r25, 0x0FD9	; 0x800fd9 <lm75_temp+0xa>
   19f90:	0e 94 fd dd 	call	0x1bbfa	; 0x1bbfa <__mulsf3>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4175
    //send_network_config(&mqtt_client);
    //send_light_controler();
    //send_know_device();
    //send_mesh_status();
    ///
    internal_temp = lm75_temp.readTemperatureC();
   19f94:	60 93 76 0c 	sts	0x0C76, r22	; 0x800c76 <internal_temp>
   19f98:	70 93 77 0c 	sts	0x0C77, r23	; 0x800c77 <internal_temp+0x1>
   19f9c:	80 93 78 0c 	sts	0x0C78, r24	; 0x800c78 <internal_temp+0x2>
   19fa0:	90 93 79 0c 	sts	0x0C79, r25	; 0x800c79 <internal_temp+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4177
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
   19fa4:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
   19fa8:	87 ff       	sbrs	r24, 7
   19faa:	39 c0       	rjmp	.+114    	; 0x1a01e <main+0x1300>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4179
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
   19fac:	00 91 66 12 	lds	r16, 0x1266	; 0x801266 <light_max>
   19fb0:	10 91 67 12 	lds	r17, 0x1267	; 0x801267 <light_max+0x1>
   19fb4:	60 91 73 0c 	lds	r22, 0x0C73	; 0x800c73 <light_curr>
   19fb8:	70 91 74 0c 	lds	r23, 0x0C74	; 0x800c74 <light_curr+0x1>
   19fbc:	60 1b       	sub	r22, r16
   19fbe:	71 0b       	sbc	r23, r17
   19fc0:	90 e0       	ldi	r25, 0x00	; 0
   19fc2:	80 e0       	ldi	r24, 0x00	; 0
   19fc4:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
   19fc8:	6b 01       	movw	r12, r22
   19fca:	7c 01       	movw	r14, r24
   19fcc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <light_min>
   19fd0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <light_min+0x1>
   19fd4:	08 1b       	sub	r16, r24
   19fd6:	19 0b       	sbc	r17, r25
   19fd8:	b8 01       	movw	r22, r16
   19fda:	90 e0       	ldi	r25, 0x00	; 0
   19fdc:	80 e0       	ldi	r24, 0x00	; 0
   19fde:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
   19fe2:	9b 01       	movw	r18, r22
   19fe4:	ac 01       	movw	r20, r24
   19fe6:	c7 01       	movw	r24, r14
   19fe8:	b6 01       	movw	r22, r12
   19fea:	0e 94 d1 df 	call	0x1bfa2	; 0x1bfa2 <__divsf3>
   19fee:	20 e0       	ldi	r18, 0x00	; 0
   19ff0:	30 e0       	ldi	r19, 0x00	; 0
   19ff2:	48 e4       	ldi	r20, 0x48	; 72
   19ff4:	53 e4       	ldi	r21, 0x43	; 67
   19ff6:	0e 94 fd dd 	call	0x1bbfa	; 0x1bbfa <__mulsf3>
   19ffa:	0e 94 4a e0 	call	0x1c094	; 0x1c094 <__fixunssfsi>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4180
      if (brigthness_display_auto_values > 200)
   19ffe:	69 3c       	cpi	r22, 0xC9	; 201
   1a000:	08 f0       	brcs	.+2      	; 0x1a004 <main+0x12e6>
   1a002:	fe c2       	rjmp	.+1532   	; 0x1a600 <main+0x18e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4179
    ///
    internal_temp = lm75_temp.readTemperatureC();
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
   1a004:	60 93 72 0c 	sts	0x0C72, r22	; 0x800c72 <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4182
      if (brigthness_display_auto_values > 200)
        brigthness_display_auto_values = 200;
      if (brigthness_display_auto_values < 5)
   1a008:	80 91 72 0c 	lds	r24, 0x0C72	; 0x800c72 <brigthness_display_auto_values>
   1a00c:	85 30       	cpi	r24, 0x05	; 5
   1a00e:	18 f4       	brcc	.+6      	; 0x1a016 <main+0x12f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4183
        brigthness_display_auto_values = 5;
   1a010:	85 e0       	ldi	r24, 0x05	; 5
   1a012:	80 93 72 0c 	sts	0x0C72, r24	; 0x800c72 <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4184
      my_touch.TP_SetBacklight(brigthness_display_auto_values);
   1a016:	80 91 72 0c 	lds	r24, 0x0C72	; 0x800c72 <brigthness_display_auto_values>
   1a01a:	0e 94 d9 ad 	call	0x15bb2	; 0x15bb2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.227]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4189
    }

  }

  if ((millis() - milis_1s) >= 1000)
   1a01e:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   1a022:	00 91 62 12 	lds	r16, 0x1262	; 0x801262 <milis_1s>
   1a026:	10 91 63 12 	lds	r17, 0x1263	; 0x801263 <milis_1s+0x1>
   1a02a:	20 91 64 12 	lds	r18, 0x1264	; 0x801264 <milis_1s+0x2>
   1a02e:	30 91 65 12 	lds	r19, 0x1265	; 0x801265 <milis_1s+0x3>
   1a032:	ab 01       	movw	r20, r22
   1a034:	bc 01       	movw	r22, r24
   1a036:	40 1b       	sub	r20, r16
   1a038:	51 0b       	sbc	r21, r17
   1a03a:	62 0b       	sbc	r22, r18
   1a03c:	73 0b       	sbc	r23, r19
   1a03e:	48 3e       	cpi	r20, 0xE8	; 232
   1a040:	53 40       	sbci	r21, 0x03	; 3
   1a042:	61 05       	cpc	r22, r1
   1a044:	71 05       	cpc	r23, r1
   1a046:	08 f4       	brcc	.+2      	; 0x1a04a <main+0x132c>
   1a048:	64 c1       	rjmp	.+712    	; 0x1a312 <main+0x15f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4191
  {
    milis_1s += 1000;
   1a04a:	d9 01       	movw	r26, r18
   1a04c:	c8 01       	movw	r24, r16
   1a04e:	88 51       	subi	r24, 0x18	; 24
   1a050:	9c 4f       	sbci	r25, 0xFC	; 252
   1a052:	af 4f       	sbci	r26, 0xFF	; 255
   1a054:	bf 4f       	sbci	r27, 0xFF	; 255
   1a056:	80 93 62 12 	sts	0x1262, r24	; 0x801262 <milis_1s>
   1a05a:	90 93 63 12 	sts	0x1263, r25	; 0x801263 <milis_1s+0x1>
   1a05e:	a0 93 64 12 	sts	0x1264, r26	; 0x801264 <milis_1s+0x2>
   1a062:	b0 93 65 12 	sts	0x1265, r27	; 0x801265 <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4192
    uptime++;
   1a066:	c0 90 6e 0c 	lds	r12, 0x0C6E	; 0x800c6e <uptime>
   1a06a:	d0 90 6f 0c 	lds	r13, 0x0C6F	; 0x800c6f <uptime+0x1>
   1a06e:	e0 90 70 0c 	lds	r14, 0x0C70	; 0x800c70 <uptime+0x2>
   1a072:	f0 90 71 0c 	lds	r15, 0x0C71	; 0x800c71 <uptime+0x3>
   1a076:	2f ef       	ldi	r18, 0xFF	; 255
   1a078:	c2 1a       	sub	r12, r18
   1a07a:	d2 0a       	sbc	r13, r18
   1a07c:	e2 0a       	sbc	r14, r18
   1a07e:	f2 0a       	sbc	r15, r18
   1a080:	c0 92 6e 0c 	sts	0x0C6E, r12	; 0x800c6e <uptime>
   1a084:	d0 92 6f 0c 	sts	0x0C6F, r13	; 0x800c6f <uptime+0x1>
   1a088:	e0 92 70 0c 	sts	0x0C70, r14	; 0x800c70 <uptime+0x2>
   1a08c:	f0 92 71 0c 	sts	0x0C71, r15	; 0x800c71 <uptime+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4193
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0)
   1a090:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <brigthness_display_mode>
   1a094:	86 ff       	sbrs	r24, 6
   1a096:	0a c0       	rjmp	.+20     	; 0x1a0ac <main+0x138e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4195
    {
      if (display_auto_shutdown > display_auto_shutdown_now)
   1a098:	80 91 6c 0c 	lds	r24, 0x0C6C	; 0x800c6c <display_auto_shutdown_now>
   1a09c:	90 91 6d 0c 	lds	r25, 0x0C6D	; 0x800c6d <display_auto_shutdown>
   1a0a0:	89 17       	cp	r24, r25
   1a0a2:	08 f0       	brcs	.+2      	; 0x1a0a6 <main+0x1388>
   1a0a4:	b1 c2       	rjmp	.+1378   	; 0x1a608 <main+0x18ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4197
      {
        display_auto_shutdown_now++;
   1a0a6:	8f 5f       	subi	r24, 0xFF	; 255
   1a0a8:	80 93 6c 0c 	sts	0x0C6C, r24	; 0x800c6c <display_auto_shutdown_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4206
        my_touch.TP_SetOnOff(LED_OFF);
      }

    }

    mereni_hwwire(uptime);
   1a0ac:	76 01       	movw	r14, r12
   1a0ae:	01 eb       	ldi	r16, 0xB1	; 177
   1a0b0:	1b e0       	ldi	r17, 0x0B	; 11
main():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   1a0b2:	d1 2c       	mov	r13, r1
mereni_hwwire():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   1a0b4:	ff 24       	eor	r15, r15
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   1a0b6:	5e e1       	ldi	r21, 0x1E	; 30
   1a0b8:	b5 2e       	mov	r11, r21
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   1a0ba:	be 01       	movw	r22, r28
   1a0bc:	6f 5f       	subi	r22, 0xFF	; 255
   1a0be:	7f 4f       	sbci	r23, 0xFF	; 255
   1a0c0:	8d 2d       	mov	r24, r13
   1a0c2:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   1a0c6:	c9 80       	ldd	r12, Y+1	; 0x01
   1a0c8:	31 e0       	ldi	r19, 0x01	; 1
   1a0ca:	c3 12       	cpse	r12, r19
   1a0cc:	eb c0       	rjmp	.+470    	; 0x1a2a4 <main+0x1586>
   1a0ce:	f8 01       	movw	r30, r16
   1a0d0:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a0d2:	9d 89       	ldd	r25, Y+21	; 0x15
   1a0d4:	97 01       	movw	r18, r14
   1a0d6:	28 1b       	sub	r18, r24
   1a0d8:	31 09       	sbc	r19, r1
   1a0da:	92 17       	cp	r25, r18
   1a0dc:	13 06       	cpc	r1, r19
   1a0de:	11 f0       	breq	.+4      	; 0x1a0e4 <main+0x13c6>
   1a0e0:	08 f0       	brcs	.+2      	; 0x1a0e4 <main+0x13c6>
   1a0e2:	e0 c0       	rjmp	.+448    	; 0x1a2a4 <main+0x1586>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:275
    {
      status_tds18s20[w].period_now += tds.period;
   1a0e4:	89 0f       	add	r24, r25
   1a0e6:	84 8f       	std	Z+28, r24	; 0x1c
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:276
      if (status_tds18s20[w].wait == false)
   1a0e8:	85 8d       	ldd	r24, Z+29	; 0x1d
   1a0ea:	81 11       	cpse	r24, r1
   1a0ec:	0f c0       	rjmp	.+30     	; 0x1a10c <main+0x13ee>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:278
      {
        owReset(tds.assigned_ds2482);
   1a0ee:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a0f0:	0e 94 b4 50 	call	0xa168	; 0xa168 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:279
        owMatchRom(tds.assigned_ds2482, tds.rom);
   1a0f4:	be 01       	movw	r22, r28
   1a0f6:	6e 5f       	subi	r22, 0xFE	; 254
   1a0f8:	7f 4f       	sbci	r23, 0xFF	; 255
   1a0fa:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a0fc:	0e 94 95 50 	call	0xa12a	; 0xa12a <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:280
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   1a100:	64 e4       	ldi	r22, 0x44	; 68
   1a102:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a104:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:281
        status_tds18s20[w].wait = true;
   1a108:	f8 01       	movw	r30, r16
   1a10a:	c5 8e       	std	Z+29, r12	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:283
      }
      if (status_tds18s20[w].wait == true)
   1a10c:	f8 01       	movw	r30, r16
   1a10e:	c5 8c       	ldd	r12, Z+29	; 0x1d
   1a110:	f1 e0       	ldi	r31, 0x01	; 1
   1a112:	cf 12       	cpse	r12, r31
   1a114:	c7 c0       	rjmp	.+398    	; 0x1a2a4 <main+0x1586>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:285
      {
        owReset(tds.assigned_ds2482);
   1a116:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a118:	0e 94 b4 50 	call	0xa168	; 0xa168 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:286
        owMatchRom(tds.assigned_ds2482, tds.rom);
   1a11c:	be 01       	movw	r22, r28
   1a11e:	6e 5f       	subi	r22, 0xFE	; 254
   1a120:	7f 4f       	sbci	r23, 0xFF	; 255
   1a122:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a124:	0e 94 95 50 	call	0xa12a	; 0xa12a <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:287
        owReadByte(tds.assigned_ds2482, &t);
   1a128:	be 01       	movw	r22, r28
   1a12a:	6f 57       	subi	r22, 0x7F	; 127
   1a12c:	7f 4f       	sbci	r23, 0xFF	; 255
   1a12e:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a130:	0e 94 00 50 	call	0xa000	; 0xa000 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:288
        if (t != 0) 
   1a134:	cf 57       	subi	r28, 0x7F	; 127
   1a136:	df 4f       	sbci	r29, 0xFF	; 255
   1a138:	88 81       	ld	r24, Y
   1a13a:	c1 58       	subi	r28, 0x81	; 129
   1a13c:	d0 40       	sbci	r29, 0x00	; 0
   1a13e:	88 23       	and	r24, r24
   1a140:	09 f4       	brne	.+2      	; 0x1a144 <main+0x1426>
   1a142:	b0 c0       	rjmp	.+352    	; 0x1a2a4 <main+0x1586>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:290
        {
          status_tds18s20[w].wait = false;
   1a144:	f8 01       	movw	r30, r16
   1a146:	15 8e       	std	Z+29, r1	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:291
          status = owReset(tds.assigned_ds2482);
   1a148:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a14a:	0e 94 b4 50 	call	0xa168	; 0xa168 <ds2482owReset(unsigned char)>
   1a14e:	a8 2e       	mov	r10, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:292
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   1a150:	be 01       	movw	r22, r28
   1a152:	6e 5f       	subi	r22, 0xFE	; 254
   1a154:	7f 4f       	sbci	r23, 0xFF	; 255
   1a156:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a158:	0e 94 95 50 	call	0xa12a	; 0xa12a <owMatchRom(unsigned char, unsigned char*)>
   1a15c:	a8 0e       	add	r10, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:293
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   1a15e:	6e eb       	ldi	r22, 0xBE	; 190
   1a160:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a162:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <ds2482owWriteByte(unsigned char, unsigned char)>
   1a166:	a8 0e       	add	r10, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:294
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   1a168:	be 01       	movw	r22, r28
   1a16a:	6f 5b       	subi	r22, 0xBF	; 191
   1a16c:	7f 4f       	sbci	r23, 0xFF	; 255
   1a16e:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a170:	0e 94 00 50 	call	0xa000	; 0xa000 <ds2482owReadByte(unsigned char, unsigned char*)>
   1a174:	a8 0e       	add	r10, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:295
          status_tds18s20[w].tempL = e;
   1a176:	22 96       	adiw	r28, 0x02	; 2
   1a178:	8f ad       	ldd	r24, Y+63	; 0x3f
   1a17a:	22 97       	sbiw	r28, 0x02	; 2
   1a17c:	f8 01       	movw	r30, r16
   1a17e:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:296
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   1a180:	be 01       	movw	r22, r28
   1a182:	6f 5b       	subi	r22, 0xBF	; 191
   1a184:	7f 4f       	sbci	r23, 0xFF	; 255
   1a186:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a188:	0e 94 00 50 	call	0xa000	; 0xa000 <ds2482owReadByte(unsigned char, unsigned char*)>
   1a18c:	a8 0e       	add	r10, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:297
          status_tds18s20[w].tempH = e;
   1a18e:	22 96       	adiw	r28, 0x02	; 2
   1a190:	8f ad       	ldd	r24, Y+63	; 0x3f
   1a192:	22 97       	sbiw	r28, 0x02	; 2
   1a194:	f8 01       	movw	r30, r16
   1a196:	81 83       	std	Z+1, r24	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   1a198:	be 01       	movw	r22, r28
   1a19a:	6f 5b       	subi	r22, 0xBF	; 191
   1a19c:	7f 4f       	sbci	r23, 0xFF	; 255
   1a19e:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a1a0:	0e 94 00 50 	call	0xa000	; 0xa000 <ds2482owReadByte(unsigned char, unsigned char*)>
   1a1a4:	a8 0e       	add	r10, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   1a1a6:	be 01       	movw	r22, r28
   1a1a8:	6f 5b       	subi	r22, 0xBF	; 191
   1a1aa:	7f 4f       	sbci	r23, 0xFF	; 255
   1a1ac:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a1ae:	0e 94 00 50 	call	0xa000	; 0xa000 <ds2482owReadByte(unsigned char, unsigned char*)>
   1a1b2:	a8 0e       	add	r10, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   1a1b4:	be 01       	movw	r22, r28
   1a1b6:	6f 5b       	subi	r22, 0xBF	; 191
   1a1b8:	7f 4f       	sbci	r23, 0xFF	; 255
   1a1ba:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a1bc:	0e 94 00 50 	call	0xa000	; 0xa000 <ds2482owReadByte(unsigned char, unsigned char*)>
   1a1c0:	a8 0e       	add	r10, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   1a1c2:	be 01       	movw	r22, r28
   1a1c4:	6f 5b       	subi	r22, 0xBF	; 191
   1a1c6:	7f 4f       	sbci	r23, 0xFF	; 255
   1a1c8:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a1ca:	0e 94 00 50 	call	0xa000	; 0xa000 <ds2482owReadByte(unsigned char, unsigned char*)>
   1a1ce:	a8 0e       	add	r10, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:302
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   1a1d0:	be 01       	movw	r22, r28
   1a1d2:	6f 5b       	subi	r22, 0xBF	; 191
   1a1d4:	7f 4f       	sbci	r23, 0xFF	; 255
   1a1d6:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a1d8:	0e 94 00 50 	call	0xa000	; 0xa000 <ds2482owReadByte(unsigned char, unsigned char*)>
   1a1dc:	a8 0e       	add	r10, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:303
          status_tds18s20[w].CR = e; //count remain
   1a1de:	22 96       	adiw	r28, 0x02	; 2
   1a1e0:	8f ad       	ldd	r24, Y+63	; 0x3f
   1a1e2:	22 97       	sbiw	r28, 0x02	; 2
   1a1e4:	f8 01       	movw	r30, r16
   1a1e6:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:304
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   1a1e8:	be 01       	movw	r22, r28
   1a1ea:	6f 5b       	subi	r22, 0xBF	; 191
   1a1ec:	7f 4f       	sbci	r23, 0xFF	; 255
   1a1ee:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a1f0:	0e 94 00 50 	call	0xa000	; 0xa000 <ds2482owReadByte(unsigned char, unsigned char*)>
   1a1f4:	a8 0e       	add	r10, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:305
          status_tds18s20[w].CP = e; // count per
   1a1f6:	22 96       	adiw	r28, 0x02	; 2
   1a1f8:	8f ad       	ldd	r24, Y+63	; 0x3f
   1a1fa:	22 97       	sbiw	r28, 0x02	; 2
   1a1fc:	f8 01       	movw	r30, r16
   1a1fe:	83 83       	std	Z+3, r24	; 0x03
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   1a200:	be 01       	movw	r22, r28
   1a202:	6f 5b       	subi	r22, 0xBF	; 191
   1a204:	7f 4f       	sbci	r23, 0xFF	; 255
   1a206:	8a 85       	ldd	r24, Y+10	; 0x0a
   1a208:	0e 94 00 50 	call	0xa000	; 0xa000 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
   1a20c:	22 96       	adiw	r28, 0x02	; 2
   1a20e:	9f ad       	ldd	r25, Y+63	; 0x3f
   1a210:	22 97       	sbiw	r28, 0x02	; 2
   1a212:	f8 01       	movw	r30, r16
   1a214:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   1a216:	8a 0d       	add	r24, r10
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:308
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   1a218:	09 f0       	breq	.+2      	; 0x1a21c <main+0x14fe>
   1a21a:	fa c1       	rjmp	.+1012   	; 0x1a610 <main+0x18f2>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   1a21c:	63 81       	ldd	r22, Z+3	; 0x03
   1a21e:	70 e0       	ldi	r23, 0x00	; 0
   1a220:	cf 57       	subi	r28, 0x7F	; 127
   1a222:	df 4f       	sbci	r29, 0xFF	; 255
   1a224:	e8 81       	ld	r30, Y
   1a226:	c1 58       	subi	r28, 0x81	; 129
   1a228:	d0 40       	sbci	r29, 0x00	; 0
   1a22a:	be 9e       	mul	r11, r30
   1a22c:	f0 01       	movw	r30, r0
   1a22e:	11 24       	eor	r1, r1
   1a230:	ef 54       	subi	r30, 0x4F	; 79
   1a232:	f4 4f       	sbci	r31, 0xF4	; 244
   1a234:	82 81       	ldd	r24, Z+2	; 0x02
   1a236:	9b 01       	movw	r18, r22
   1a238:	28 1b       	sub	r18, r24
   1a23a:	31 09       	sbc	r19, r1
   1a23c:	c9 01       	movw	r24, r18
   1a23e:	96 95       	lsr	r25
   1a240:	98 2f       	mov	r25, r24
   1a242:	88 27       	eor	r24, r24
   1a244:	97 95       	ror	r25
   1a246:	87 95       	ror	r24
   1a248:	0e 94 f5 de 	call	0x1bdea	; 0x1bdea <__divmodhi4>
   1a24c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a24e:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a250:	40 97       	sbiw	r24, 0x10	; 16
   1a252:	68 0f       	add	r22, r24
   1a254:	79 1f       	adc	r23, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:310
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   1a256:	f8 01       	movw	r30, r16
   1a258:	81 81       	ldd	r24, Z+1	; 0x01
   1a25a:	90 e0       	ldi	r25, 0x00	; 0
   1a25c:	98 2f       	mov	r25, r24
   1a25e:	88 27       	eor	r24, r24
   1a260:	99 0f       	add	r25, r25
   1a262:	99 0f       	add	r25, r25
   1a264:	99 0f       	add	r25, r25
   1a266:	20 81       	ld	r18, Z
   1a268:	f8 e0       	ldi	r31, 0x08	; 8
   1a26a:	2f 9f       	mul	r18, r31
   1a26c:	90 01       	movw	r18, r0
   1a26e:	11 24       	eor	r1, r1
   1a270:	82 2b       	or	r24, r18
   1a272:	93 2b       	or	r25, r19
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   1a274:	43 e0       	ldi	r20, 0x03	; 3
   1a276:	88 0f       	add	r24, r24
   1a278:	99 1f       	adc	r25, r25
   1a27a:	4a 95       	dec	r20
   1a27c:	e1 f7       	brne	.-8      	; 0x1a276 <main+0x1558>
   1a27e:	80 78       	andi	r24, 0x80	; 128
   1a280:	68 0f       	add	r22, r24
   1a282:	79 1f       	adc	r23, r25
   1a284:	f8 01       	movw	r30, r16
   1a286:	76 83       	std	Z+6, r23	; 0x06
   1a288:	65 83       	std	Z+5, r22	; 0x05
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:312
            status_tds18s20[w].online = True;
   1a28a:	c3 8e       	std	Z+27, r12	; 0x1b
   1a28c:	29 e0       	ldi	r18, 0x09	; 9
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:313
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   1a28e:	87 89       	ldd	r24, Z+23	; 0x17
   1a290:	90 8d       	ldd	r25, Z+24	; 0x18
   1a292:	92 8f       	std	Z+26, r25	; 0x1a
   1a294:	81 8f       	std	Z+25, r24	; 0x19
   1a296:	21 50       	subi	r18, 0x01	; 1
   1a298:	32 97       	sbiw	r30, 0x02	; 2
   1a29a:	21 11       	cpse	r18, r1
   1a29c:	f8 cf       	rjmp	.-16     	; 0x1a28e <main+0x1570>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   1a29e:	f8 01       	movw	r30, r16
   1a2a0:	70 87       	std	Z+8, r23	; 0x08
   1a2a2:	67 83       	std	Z+7, r22	; 0x07
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   1a2a4:	d3 94       	inc	r13
   1a2a6:	02 5e       	subi	r16, 0xE2	; 226
   1a2a8:	1f 4f       	sbci	r17, 0xFF	; 255
   1a2aa:	f6 e0       	ldi	r31, 0x06	; 6
   1a2ac:	df 12       	cpse	r13, r31
   1a2ae:	05 cf       	rjmp	.-502    	; 0x1a0ba <main+0x139c>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2270
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1a2b0:	10 e0       	ldi	r17, 0x00	; 0
tds_extended_memory_store():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2271
    if (get_tds18s20(id, &tds) == 1)
   1a2b2:	be 01       	movw	r22, r28
   1a2b4:	6f 5f       	subi	r22, 0xFF	; 255
   1a2b6:	7f 4f       	sbci	r23, 0xFF	; 255
   1a2b8:	81 2f       	mov	r24, r17
   1a2ba:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2270
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1a2be:	1f 5f       	subi	r17, 0xFF	; 255
   1a2c0:	16 30       	cpi	r17, 0x06	; 6
   1a2c2:	b9 f7       	brne	.-18     	; 0x1a2b2 <main+0x1594>
   1a2c4:	86 e6       	ldi	r24, 0x66	; 102
   1a2c6:	c8 2e       	mov	r12, r24
   1a2c8:	d1 2c       	mov	r13, r1
   1a2ca:	e1 2c       	mov	r14, r1
   1a2cc:	f1 2c       	mov	r15, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2216
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1a2ce:	10 e0       	ldi	r17, 0x00	; 0
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2218
  {
    remote_tds_get_active(idx, &active);
   1a2d0:	be 01       	movw	r22, r28
   1a2d2:	6f 5f       	subi	r22, 0xFF	; 255
   1a2d4:	7f 4f       	sbci	r23, 0xFF	; 255
   1a2d6:	81 2f       	mov	r24, r17
   1a2d8:	0e 94 e6 76 	call	0xedcc	; 0xedcc <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2219
    if (active == 1)
   1a2dc:	89 81       	ldd	r24, Y+1	; 0x01
   1a2de:	81 30       	cpi	r24, 0x01	; 1
   1a2e0:	61 f4       	brne	.+24     	; 0x1a2fa <main+0x15dc>
remote_tds_inc_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2206
uint8_t remote_tds_inc_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
   1a2e2:	c7 01       	movw	r24, r14
   1a2e4:	b6 01       	movw	r22, r12
   1a2e6:	0e 94 17 b9 	call	0x1722e	; 0x1722e <SRAM_23LC::readByte(unsigned long) [clone .constprop.215]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2207
    if (last < 250)
   1a2ea:	8a 3f       	cpi	r24, 0xFA	; 250
   1a2ec:	08 f4       	brcc	.+2      	; 0x1a2f0 <main+0x15d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2208
      last++;
   1a2ee:	8f 5f       	subi	r24, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2209
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), last);
   1a2f0:	48 2f       	mov	r20, r24
   1a2f2:	c7 01       	movw	r24, r14
   1a2f4:	b6 01       	movw	r22, r12
   1a2f6:	0e 94 db b8 	call	0x171b6	; 0x171b6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.217]>
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2216
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1a2fa:	1f 5f       	subi	r17, 0xFF	; 255
   1a2fc:	24 e0       	ldi	r18, 0x04	; 4
   1a2fe:	c2 0e       	add	r12, r18
   1a300:	d1 1c       	adc	r13, r1
   1a302:	e1 1c       	adc	r14, r1
   1a304:	f1 1c       	adc	r15, r1
   1a306:	3e e8       	ldi	r19, 0x8E	; 142
   1a308:	c3 16       	cp	r12, r19
   1a30a:	d1 04       	cpc	r13, r1
   1a30c:	e1 04       	cpc	r14, r1
   1a30e:	f1 04       	cpc	r15, r1
   1a310:	f9 f6       	brne	.-66     	; 0x1a2d0 <main+0x15b2>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4212
    tds_extended_memory_store();
    remote_tds_update_last_update();
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) >= 500)
   1a312:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   1a316:	00 91 5e 12 	lds	r16, 0x125E	; 0x80125e <milis_05s>
   1a31a:	10 91 5f 12 	lds	r17, 0x125F	; 0x80125f <milis_05s+0x1>
   1a31e:	20 91 60 12 	lds	r18, 0x1260	; 0x801260 <milis_05s+0x2>
   1a322:	30 91 61 12 	lds	r19, 0x1261	; 0x801261 <milis_05s+0x3>
   1a326:	ab 01       	movw	r20, r22
   1a328:	bc 01       	movw	r22, r24
   1a32a:	40 1b       	sub	r20, r16
   1a32c:	51 0b       	sbc	r21, r17
   1a32e:	62 0b       	sbc	r22, r18
   1a330:	73 0b       	sbc	r23, r19
   1a332:	44 3f       	cpi	r20, 0xF4	; 244
   1a334:	51 40       	sbci	r21, 0x01	; 1
   1a336:	61 05       	cpc	r22, r1
   1a338:	71 05       	cpc	r23, r1
   1a33a:	08 f4       	brcc	.+2      	; 0x1a33e <main+0x1620>
   1a33c:	4a c0       	rjmp	.+148    	; 0x1a3d2 <main+0x16b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4214
  {
    milis_05s += 500;
   1a33e:	d9 01       	movw	r26, r18
   1a340:	c8 01       	movw	r24, r16
   1a342:	8c 50       	subi	r24, 0x0C	; 12
   1a344:	9e 4f       	sbci	r25, 0xFE	; 254
   1a346:	af 4f       	sbci	r26, 0xFF	; 255
   1a348:	bf 4f       	sbci	r27, 0xFF	; 255
   1a34a:	80 93 5e 12 	sts	0x125E, r24	; 0x80125e <milis_05s>
   1a34e:	90 93 5f 12 	sts	0x125F, r25	; 0x80125f <milis_05s+0x1>
   1a352:	a0 93 60 12 	sts	0x1260, r26	; 0x801260 <milis_05s+0x2>
   1a356:	b0 93 61 12 	sts	0x1261, r27	; 0x801261 <milis_05s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4215
    now = rtc.now();
   1a35a:	ce 01       	movw	r24, r28
   1a35c:	01 96       	adiw	r24, 0x01	; 1
   1a35e:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <RTC_DS1307::now()>
   1a362:	87 e0       	ldi	r24, 0x07	; 7
   1a364:	fe 01       	movw	r30, r28
   1a366:	31 96       	adiw	r30, 0x01	; 1
   1a368:	af e3       	ldi	r26, 0x3F	; 63
   1a36a:	b2 e1       	ldi	r27, 0x12	; 18
   1a36c:	01 90       	ld	r0, Z+
   1a36e:	0d 92       	st	X+, r0
   1a370:	8a 95       	dec	r24
   1a372:	e1 f7       	brne	.-8      	; 0x1a36c <main+0x164e>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3387
}
///
/// selftest - pusteni skupiny vlastnich selftestu
void selftest(void)
{
  if (!rtc.isrunning())
   1a374:	0e 94 6f b2 	call	0x164de	; 0x164de <RTC_DS1307::isrunning() [clone .constprop.148]>
   1a378:	90 91 65 0c 	lds	r25, 0x0C65	; 0x800c65 <selftest_data>
   1a37c:	81 11       	cpse	r24, r1
   1a37e:	4a c1       	rjmp	.+660    	; 0x1a614 <main+0x18f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3388
    sbi(selftest_data, SELFTEST_ERR_RTC);
   1a380:	91 60       	ori	r25, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3390
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   1a382:	90 93 65 0c 	sts	0x0C65, r25	; 0x800c65 <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4217
  if ((millis() - milis_05s) >= 500)
  {
    milis_05s += 500;
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;
   1a386:	81 e0       	ldi	r24, 0x01	; 1
   1a388:	80 93 6b 0c 	sts	0x0C6B, r24	; 0x800c6b <menu_redraw05s>
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4834
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
   1a38c:	19 82       	std	Y+1, r1	; 0x01
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4833
//////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
   1a38e:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4835
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1a390:	10 e0       	ldi	r17, 0x00	; 0
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4837
  {
    remote_tds_get_active(idx, &active);
   1a392:	be 01       	movw	r22, r28
   1a394:	6f 5f       	subi	r22, 0xFF	; 255
   1a396:	7f 4f       	sbci	r23, 0xFF	; 255
   1a398:	81 2f       	mov	r24, r17
   1a39a:	0e 94 e6 76 	call	0xedcc	; 0xedcc <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4838
    if (active == 1) cnt++;
   1a39e:	89 81       	ldd	r24, Y+1	; 0x01
   1a3a0:	81 30       	cpi	r24, 0x01	; 1
   1a3a2:	09 f4       	brne	.+2      	; 0x1a3a6 <main+0x1688>
   1a3a4:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4835
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1a3a6:	1f 5f       	subi	r17, 0xFF	; 255
   1a3a8:	1a 30       	cpi	r17, 0x0A	; 10
   1a3aa:	99 f7       	brne	.-26     	; 0x1a392 <main+0x1674>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4219
    milis_05s += 500;
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;

    use_rtds = count_use_rtds();
   1a3ac:	00 93 6a 0c 	sts	0x0C6A, r16	; 0x800c6a <use_rtds>
   1a3b0:	08 ec       	ldi	r16, 0xC8	; 200
   1a3b2:	10 e0       	ldi	r17, 0x00	; 0
main():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:19
struct_ds2482 ds2482_address[DS2482_COUNT];

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
   1a3b4:	f1 2c       	mov	r15, r1
count_use_tds():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:21
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if ( EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used) == 1) cnt++;
   1a3b6:	c8 01       	movw	r24, r16
   1a3b8:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   1a3bc:	81 30       	cpi	r24, 0x01	; 1
   1a3be:	09 f4       	brne	.+2      	; 0x1a3c2 <main+0x16a4>
   1a3c0:	f3 94       	inc	r15
   1a3c2:	0a 5e       	subi	r16, 0xEA	; 234
   1a3c4:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:20

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   1a3c6:	0c 34       	cpi	r16, 0x4C	; 76
   1a3c8:	91 e0       	ldi	r25, 0x01	; 1
   1a3ca:	19 07       	cpc	r17, r25
   1a3cc:	a1 f7       	brne	.-24     	; 0x1a3b6 <main+0x1698>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4220
    use_tds = count_use_tds();
   1a3ce:	f0 92 69 0c 	sts	0x0C69, r15	; 0x800c69 <use_tds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4226
  }



  /// kazdych 50ms
  if ((millis() - milis_005s) >= 50 )
   1a3d2:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   1a3d6:	00 91 5a 12 	lds	r16, 0x125A	; 0x80125a <milis_005s>
   1a3da:	10 91 5b 12 	lds	r17, 0x125B	; 0x80125b <milis_005s+0x1>
   1a3de:	20 91 5c 12 	lds	r18, 0x125C	; 0x80125c <milis_005s+0x2>
   1a3e2:	30 91 5d 12 	lds	r19, 0x125D	; 0x80125d <milis_005s+0x3>
   1a3e6:	ab 01       	movw	r20, r22
   1a3e8:	bc 01       	movw	r22, r24
   1a3ea:	40 1b       	sub	r20, r16
   1a3ec:	51 0b       	sbc	r21, r17
   1a3ee:	62 0b       	sbc	r22, r18
   1a3f0:	73 0b       	sbc	r23, r19
   1a3f2:	42 33       	cpi	r20, 0x32	; 50
   1a3f4:	51 05       	cpc	r21, r1
   1a3f6:	61 05       	cpc	r22, r1
   1a3f8:	71 05       	cpc	r23, r1
   1a3fa:	a8 f1       	brcs	.+106    	; 0x1a466 <main+0x1748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4228
  {
    milis_005s += 50;
   1a3fc:	d9 01       	movw	r26, r18
   1a3fe:	c8 01       	movw	r24, r16
   1a400:	c2 96       	adiw	r24, 0x32	; 50
   1a402:	a1 1d       	adc	r26, r1
   1a404:	b1 1d       	adc	r27, r1
   1a406:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <milis_005s>
   1a40a:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <milis_005s+0x1>
   1a40e:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <milis_005s+0x2>
   1a412:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4231

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   1a416:	80 91 68 0c 	lds	r24, 0x0C68	; 0x800c68 <a2d_run_now>
   1a41a:	81 30       	cpi	r24, 0x01	; 1
   1a41c:	21 f5       	brne	.+72     	; 0x1a466 <main+0x1748>
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   1a41e:	30 91 66 0c 	lds	r19, 0x0C66	; 0x800c66 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1a422:	20 91 67 0c 	lds	r18, 0x0C67	; 0x800c67 <a2d_index>
   1a426:	90 e0       	ldi	r25, 0x00	; 0
   1a428:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   1a42a:	61 e0       	ldi	r22, 0x01	; 1
   1a42c:	70 e0       	ldi	r23, 0x00	; 0
   1a42e:	ab 01       	movw	r20, r22
   1a430:	08 2e       	mov	r0, r24
   1a432:	01 c0       	rjmp	.+2      	; 0x1a436 <main+0x1718>
   1a434:	44 0f       	add	r20, r20
   1a436:	0a 94       	dec	r0
   1a438:	ea f7       	brpl	.-6      	; 0x1a434 <main+0x1716>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   1a43a:	e3 2f       	mov	r30, r19
   1a43c:	e4 23       	and	r30, r20
   1a43e:	09 f4       	brne	.+2      	; 0x1a442 <main+0x1724>
   1a440:	eb c0       	rjmp	.+470    	; 0x1a618 <main+0x18fa>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1a442:	e2 2f       	mov	r30, r18
   1a444:	e4 23       	and	r30, r20
   1a446:	09 f0       	breq	.+2      	; 0x1a44a <main+0x172c>
   1a448:	e7 c0       	rjmp	.+462    	; 0x1a618 <main+0x18fa>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   1a44a:	24 2b       	or	r18, r20
   1a44c:	20 93 67 0c 	sts	0x0C67, r18	; 0x800c67 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   1a450:	0e 94 32 c0 	call	0x18064	; 0x18064 <a2d_start_first(unsigned char)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4234
    {
      a2d_start_process();
      a2d_run_now = 0;
   1a454:	10 92 68 0c 	sts	0x0C68, r1	; 0x800c68 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4235
      if (a2d_done() == 0) a2d_run_now = 1;
   1a458:	80 91 67 0c 	lds	r24, 0x0C67	; 0x800c67 <a2d_index>
   1a45c:	81 11       	cpse	r24, r1
   1a45e:	03 c0       	rjmp	.+6      	; 0x1a466 <main+0x1748>
   1a460:	81 e0       	ldi	r24, 0x01	; 1
   1a462:	80 93 68 0c 	sts	0x0C68, r24	; 0x800c68 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4239
    }
  }

  load = millis() - load_now;
   1a466:	0e 94 ed bc 	call	0x179da	; 0x179da <millis>
   1a46a:	dc 01       	movw	r26, r24
   1a46c:	cb 01       	movw	r24, r22
   1a46e:	cb 54       	subi	r28, 0x4B	; 75
   1a470:	df 4f       	sbci	r29, 0xFF	; 255
   1a472:	28 81       	ld	r18, Y
   1a474:	39 81       	ldd	r19, Y+1	; 0x01
   1a476:	4a 81       	ldd	r20, Y+2	; 0x02
   1a478:	5b 81       	ldd	r21, Y+3	; 0x03
   1a47a:	c5 5b       	subi	r28, 0xB5	; 181
   1a47c:	d0 40       	sbci	r29, 0x00	; 0
   1a47e:	82 1b       	sub	r24, r18
   1a480:	93 0b       	sbc	r25, r19
   1a482:	a4 0b       	sbc	r26, r20
   1a484:	b5 0b       	sbc	r27, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4240
  if (load < load_min) load_min = load;
   1a486:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <load_min>
   1a48a:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <load_min+0x1>
   1a48e:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <load_min+0x2>
   1a492:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <load_min+0x3>
   1a496:	80 17       	cp	r24, r16
   1a498:	91 07       	cpc	r25, r17
   1a49a:	a2 07       	cpc	r26, r18
   1a49c:	b3 07       	cpc	r27, r19
   1a49e:	44 f4       	brge	.+16     	; 0x1a4b0 <main+0x1792>
   1a4a0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <load_min>
   1a4a4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <load_min+0x1>
   1a4a8:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <load_min+0x2>
   1a4ac:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4241
  if (load > load_max) load_max = load;
   1a4b0:	00 91 56 12 	lds	r16, 0x1256	; 0x801256 <load_max>
   1a4b4:	10 91 57 12 	lds	r17, 0x1257	; 0x801257 <load_max+0x1>
   1a4b8:	20 91 58 12 	lds	r18, 0x1258	; 0x801258 <load_max+0x2>
   1a4bc:	30 91 59 12 	lds	r19, 0x1259	; 0x801259 <load_max+0x3>
   1a4c0:	08 17       	cp	r16, r24
   1a4c2:	19 07       	cpc	r17, r25
   1a4c4:	2a 07       	cpc	r18, r26
   1a4c6:	3b 07       	cpc	r19, r27
   1a4c8:	44 f4       	brge	.+16     	; 0x1a4da <main+0x17bc>
   1a4ca:	80 93 56 12 	sts	0x1256, r24	; 0x801256 <load_max>
   1a4ce:	90 93 57 12 	sts	0x1257, r25	; 0x801257 <load_max+0x1>
   1a4d2:	a0 93 58 12 	sts	0x1258, r26	; 0x801258 <load_max+0x2>
   1a4d6:	b0 93 59 12 	sts	0x1259, r27	; 0x801259 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4244

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   1a4da:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <light_curr>
   1a4de:	90 91 74 0c 	lds	r25, 0x0C74	; 0x800c74 <light_curr+0x1>
   1a4e2:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <light_min>
   1a4e6:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <light_min+0x1>
   1a4ea:	82 17       	cp	r24, r18
   1a4ec:	93 07       	cpc	r25, r19
   1a4ee:	20 f4       	brcc	.+8      	; 0x1a4f8 <main+0x17da>
   1a4f0:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <light_min+0x1>
   1a4f4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4245
  if (light_curr > light_max) light_max = light_curr;
   1a4f8:	20 91 66 12 	lds	r18, 0x1266	; 0x801266 <light_max>
   1a4fc:	30 91 67 12 	lds	r19, 0x1267	; 0x801267 <light_max+0x1>
   1a500:	28 17       	cp	r18, r24
   1a502:	39 07       	cpc	r19, r25
   1a504:	20 f4       	brcc	.+8      	; 0x1a50e <main+0x17f0>
   1a506:	90 93 67 12 	sts	0x1267, r25	; 0x801267 <light_max+0x1>
   1a50a:	80 93 66 12 	sts	0x1266, r24	; 0x801266 <light_max>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   1a50e:	0e 94 71 aa 	call	0x154e2	; 0x154e2 <serialEventRun()>
   1a512:	0c 94 ee c6 	jmp	0x18ddc	; 0x18ddc <main+0xbe>
   1a516:	7f ef       	ldi	r23, 0xFF	; 255
   1a518:	47 1a       	sub	r4, r23
   1a51a:	57 0a       	sbc	r5, r23
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:394
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   1a51c:	8b e0       	ldi	r24, 0x0B	; 11
   1a51e:	48 16       	cp	r4, r24
   1a520:	51 04       	cpc	r5, r1
   1a522:	09 f0       	breq	.+2      	; 0x1a526 <main+0x1808>
   1a524:	e3 cb       	rjmp	.-2106   	; 0x19cec <main+0xfce>
   1a526:	41 cc       	rjmp	.-1918   	; 0x19daa <main+0x108c>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3554
            break;
          }
        default: break;
      }
    }
    if (tmode == TERM_MODE_MAN_HEAT)
   1a528:	93 e0       	ldi	r25, 0x03	; 3
   1a52a:	d9 12       	cpse	r13, r25
   1a52c:	10 c0       	rjmp	.+32     	; 0x1a54e <main+0x1830>
thermostat_pid_setdirection_direct():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:50
  }
}

void thermostat_pid_setdirection_direct(uint8_t idx)
{
  array_pids[idx]->SetControllerDirection(DIRECT);
   1a52e:	e0 91 e2 0d 	lds	r30, 0x0DE2	; 0x800de2 <array_pids>
   1a532:	f0 91 e3 0d 	lds	r31, 0x0DE3	; 0x800de3 <array_pids+0x1>
   1a536:	c4 01       	movw	r24, r8
   1a538:	88 0f       	add	r24, r24
   1a53a:	99 1f       	adc	r25, r25
   1a53c:	e8 0f       	add	r30, r24
   1a53e:	f9 1f       	adc	r31, r25
   1a540:	70 e0       	ldi	r23, 0x00	; 0
   1a542:	60 e0       	ldi	r22, 0x00	; 0
thermostat_pid_setdirection_reverse():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:55
}

void thermostat_pid_setdirection_reverse(uint8_t idx)
{
  array_pids[idx]->SetControllerDirection(REVERSE);
   1a544:	80 81       	ld	r24, Z
   1a546:	91 81       	ldd	r25, Z+1	; 0x01
   1a548:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <PID::SetControllerDirection(int)>
   1a54c:	33 cc       	rjmp	.-1946   	; 0x19db4 <main+0x1096>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3560
    {

      thermostat_pid_setdirection_direct(tix);
    }

    if (tmode == TERM_MODE_MAN_COOL)
   1a54e:	e5 e0       	ldi	r30, 0x05	; 5
   1a550:	de 12       	cpse	r13, r30
   1a552:	30 cc       	rjmp	.-1952   	; 0x19db4 <main+0x1096>
thermostat_pid_setdirection_reverse():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:55
   1a554:	e0 91 e2 0d 	lds	r30, 0x0DE2	; 0x800de2 <array_pids>
   1a558:	f0 91 e3 0d 	lds	r31, 0x0DE3	; 0x800de3 <array_pids+0x1>
   1a55c:	c4 01       	movw	r24, r8
   1a55e:	88 0f       	add	r24, r24
   1a560:	99 1f       	adc	r25, r25
   1a562:	e8 0f       	add	r30, r24
   1a564:	f9 1f       	adc	r31, r25
   1a566:	61 e0       	ldi	r22, 0x01	; 1
   1a568:	70 e0       	ldi	r23, 0x00	; 0
   1a56a:	ec cf       	rjmp	.-40     	; 0x1a544 <main+0x1826>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3580
          thermostat_ring_set_power(tix, pwm);
        }
        else
        {
          tmode = TERM_MODE_ERR;
          pwm = 0;
   1a56c:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3579
          pwm = thermostat_pid_output(tix);
          thermostat_ring_set_power(tix, pwm);
        }
        else
        {
          tmode = TERM_MODE_ERR;
   1a56e:	7e ef       	ldi	r23, 0xFE	; 254
   1a570:	d7 2e       	mov	r13, r23
   1a572:	7a cc       	rjmp	.-1804   	; 0x19e68 <main+0x114a>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3632
    if (tmode == TERM_MODE_OFF)
    {
      mqtt_publis_output(tout, POWER_OUTPUT_OFF);
      thermostat_ring_set_power(tix, 0);
    }
    if (tmode == TERM_MODE_MAX)
   1a574:	21 e0       	ldi	r18, 0x01	; 1
   1a576:	d2 12       	cpse	r13, r18
   1a578:	09 c0       	rjmp	.+18     	; 0x1a58c <main+0x186e>
mqtt_publis_output():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3301
void mqtt_publis_output(uint8_t idx, uint8_t state)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1a57a:	3f ef       	ldi	r19, 0xFF	; 255
   1a57c:	6a e0       	ldi	r22, 0x0A	; 10
   1a57e:	b3 16       	cp	r11, r19
   1a580:	09 f4       	brne	.+2      	; 0x1a584 <main+0x1866>
   1a582:	d3 cc       	rjmp	.-1626   	; 0x19f2a <main+0x120c>
   1a584:	8b 2d       	mov	r24, r11
   1a586:	0e 94 96 71 	call	0xe32c	; 0xe32c <mqtt_publis_output(unsigned char, unsigned char) [clone .part.34]>
   1a58a:	cf cc       	rjmp	.-1634   	; 0x19f2a <main+0x120c>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3637
    if (tmode == TERM_MODE_MAX)
    {
      mqtt_publis_output(tout, POWER_OUTPUT_HEAT_MAX);
      thermostat_ring_set_power(tix, 255);
    }
    if (tmode == TERM_MODE_CLIMATE_MAX)
   1a58c:	44 e0       	ldi	r20, 0x04	; 4
   1a58e:	d4 12       	cpse	r13, r20
   1a590:	06 c0       	rjmp	.+12     	; 0x1a59e <main+0x1880>
mqtt_publis_output():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3301
void mqtt_publis_output(uint8_t idx, uint8_t state)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1a592:	5f ef       	ldi	r21, 0xFF	; 255
   1a594:	b5 16       	cp	r11, r21
   1a596:	09 f4       	brne	.+2      	; 0x1a59a <main+0x187c>
   1a598:	c8 cc       	rjmp	.-1648   	; 0x19f2a <main+0x120c>
   1a59a:	6b e0       	ldi	r22, 0x0B	; 11
   1a59c:	f3 cf       	rjmp	.-26     	; 0x1a584 <main+0x1866>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3642
    if (tmode == TERM_MODE_CLIMATE_MAX)
    {
      mqtt_publis_output(tout, POWER_OUTPUT_COOL_MAX);
      thermostat_ring_set_power(tix, 255);
    }
    if (tmode == TERM_MODE_MAN_HEAT || tmode == TERM_MODE_MAN_COOL || tmode == TERM_MODE_FAN || tmode == TERM_MODE_ERR)
   1a59e:	63 e0       	ldi	r22, 0x03	; 3
   1a5a0:	d6 16       	cp	r13, r22
   1a5a2:	09 f4       	brne	.+2      	; 0x1a5a6 <main+0x1888>
   1a5a4:	41 c0       	rjmp	.+130    	; 0x1a628 <main+0x190a>
   1a5a6:	8b ef       	ldi	r24, 0xFB	; 251
   1a5a8:	8d 0d       	add	r24, r13
   1a5aa:	82 30       	cpi	r24, 0x02	; 2
   1a5ac:	08 f4       	brcc	.+2      	; 0x1a5b0 <main+0x1892>
   1a5ae:	63 c0       	rjmp	.+198    	; 0x1a676 <main+0x1958>
   1a5b0:	7e ef       	ldi	r23, 0xFE	; 254
   1a5b2:	d7 12       	cpse	r13, r23
   1a5b4:	ba cc       	rjmp	.-1676   	; 0x19f2a <main+0x120c>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3319
void mqtt_publis_output_pwm(uint8_t idx, uint8_t mode, uint8_t pwm)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1a5b6:	3f ef       	ldi	r19, 0xFF	; 255
   1a5b8:	b3 16       	cp	r11, r19
   1a5ba:	09 f4       	brne	.+2      	; 0x1a5be <main+0x18a0>
   1a5bc:	b6 cc       	rjmp	.-1684   	; 0x19f2a <main+0x120c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3321
  {
    strcpy_P(str_topic, termbig_header_in);
   1a5be:	6b e7       	ldi	r22, 0x7B	; 123
   1a5c0:	72 e6       	ldi	r23, 0x62	; 98
   1a5c2:	ce 01       	movw	r24, r28
   1a5c4:	8f 5b       	subi	r24, 0xBF	; 191
   1a5c6:	9f 4f       	sbci	r25, 0xFF	; 255
   1a5c8:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3322
    strcat(str_topic, "power-output/");
   1a5cc:	60 ee       	ldi	r22, 0xE0	; 224
   1a5ce:	73 e0       	ldi	r23, 0x03	; 3
   1a5d0:	ce 01       	movw	r24, r28
   1a5d2:	8f 5b       	subi	r24, 0xBF	; 191
   1a5d4:	9f 4f       	sbci	r25, 0xFF	; 255
   1a5d6:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1a5da:	4a e0       	ldi	r20, 0x0A	; 10
   1a5dc:	be 01       	movw	r22, r28
   1a5de:	6c 55       	subi	r22, 0x5C	; 92
   1a5e0:	7f 4f       	sbci	r23, 0xFF	; 255
   1a5e2:	8b 2d       	mov	r24, r11
   1a5e4:	90 e0       	ldi	r25, 0x00	; 0
   1a5e6:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3324
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
   1a5ea:	be 01       	movw	r22, r28
   1a5ec:	6c 55       	subi	r22, 0x5C	; 92
   1a5ee:	7f 4f       	sbci	r23, 0xFF	; 255
   1a5f0:	ce 01       	movw	r24, r28
   1a5f2:	8f 5b       	subi	r24, 0xBF	; 191
   1a5f4:	9f 4f       	sbci	r25, 0xFF	; 255
   1a5f6:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3332
    if (mode == TERM_MODE_MAN_COOL)
      strcat(str_topic, "/cool");
    if (mode == TERM_MODE_FAN)
      strcat(str_topic, "/fan");
    if (mode == TERM_MODE_ERR)
      strcat(str_topic, "/err");
   1a5fa:	62 ee       	ldi	r22, 0xE2	; 226
   1a5fc:	78 e0       	ldi	r23, 0x08	; 8
   1a5fe:	64 c0       	rjmp	.+200    	; 0x1a6c8 <main+0x19aa>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4181
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
      if (brigthness_display_auto_values > 200)
        brigthness_display_auto_values = 200;
   1a600:	88 ec       	ldi	r24, 0xC8	; 200
   1a602:	80 93 72 0c 	sts	0x0C72, r24	; 0x800c72 <brigthness_display_auto_values>
   1a606:	00 cd       	rjmp	.-1536   	; 0x1a008 <main+0x12ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4201
      {
        display_auto_shutdown_now++;
      }
      else
      {
        my_touch.TP_SetOnOff(LED_OFF);
   1a608:	80 e0       	ldi	r24, 0x00	; 0
   1a60a:	0e 94 cc b2 	call	0x16598	; 0x16598 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.140]>
   1a60e:	4e cd       	rjmp	.-1380   	; 0x1a0ac <main+0x138e>
mereni_hwwire():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:320
            
          }

          else
          {
            status_tds18s20[w].online = False;
   1a610:	13 8e       	std	Z+27, r1	; 0x1b
   1a612:	48 ce       	rjmp	.-880    	; 0x1a2a4 <main+0x1586>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3390
void selftest(void)
{
  if (!rtc.isrunning())
    sbi(selftest_data, SELFTEST_ERR_RTC);
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   1a614:	9e 7f       	andi	r25, 0xFE	; 254
   1a616:	b5 ce       	rjmp	.-662    	; 0x1a382 <main+0x1664>
   1a618:	01 96       	adiw	r24, 0x01	; 1
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   1a61a:	88 30       	cpi	r24, 0x08	; 8
   1a61c:	91 05       	cpc	r25, r1
   1a61e:	09 f0       	breq	.+2      	; 0x1a622 <main+0x1904>
   1a620:	06 cf       	rjmp	.-500    	; 0x1a42e <main+0x1710>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   1a622:	10 92 67 0c 	sts	0x0C67, r1	; 0x800c67 <a2d_index>
   1a626:	16 cf       	rjmp	.-468    	; 0x1a454 <main+0x1736>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3319
void mqtt_publis_output_pwm(uint8_t idx, uint8_t mode, uint8_t pwm)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1a628:	4f ef       	ldi	r20, 0xFF	; 255
   1a62a:	b4 16       	cp	r11, r20
   1a62c:	09 f4       	brne	.+2      	; 0x1a630 <main+0x1912>
   1a62e:	7d cc       	rjmp	.-1798   	; 0x19f2a <main+0x120c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3321
  {
    strcpy_P(str_topic, termbig_header_in);
   1a630:	6b e7       	ldi	r22, 0x7B	; 123
   1a632:	72 e6       	ldi	r23, 0x62	; 98
   1a634:	ce 01       	movw	r24, r28
   1a636:	8f 5b       	subi	r24, 0xBF	; 191
   1a638:	9f 4f       	sbci	r25, 0xFF	; 255
   1a63a:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3322
    strcat(str_topic, "power-output/");
   1a63e:	60 ee       	ldi	r22, 0xE0	; 224
   1a640:	73 e0       	ldi	r23, 0x03	; 3
   1a642:	ce 01       	movw	r24, r28
   1a644:	8f 5b       	subi	r24, 0xBF	; 191
   1a646:	9f 4f       	sbci	r25, 0xFF	; 255
   1a648:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1a64c:	4a e0       	ldi	r20, 0x0A	; 10
   1a64e:	be 01       	movw	r22, r28
   1a650:	6c 55       	subi	r22, 0x5C	; 92
   1a652:	7f 4f       	sbci	r23, 0xFF	; 255
   1a654:	8b 2d       	mov	r24, r11
   1a656:	90 e0       	ldi	r25, 0x00	; 0
   1a658:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3324
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
   1a65c:	be 01       	movw	r22, r28
   1a65e:	6c 55       	subi	r22, 0x5C	; 92
   1a660:	7f 4f       	sbci	r23, 0xFF	; 255
   1a662:	ce 01       	movw	r24, r28
   1a664:	8f 5b       	subi	r24, 0xBF	; 191
   1a666:	9f 4f       	sbci	r25, 0xFF	; 255
   1a668:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3326
    if (mode == TERM_MODE_MAN_HEAT)
      strcat(str_topic, "/heat");
   1a66c:	67 ee       	ldi	r22, 0xE7	; 231
   1a66e:	78 e0       	ldi	r23, 0x08	; 8
   1a670:	2b c0       	rjmp	.+86     	; 0x1a6c8 <main+0x19aa>
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
		if ( (a2d_index & v) == 0) 
   1a672:	71 2c       	mov	r7, r1
   1a674:	a0 cf       	rjmp	.-192    	; 0x1a5b6 <main+0x1898>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3319
void mqtt_publis_output_pwm(uint8_t idx, uint8_t mode, uint8_t pwm)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1a676:	6f ef       	ldi	r22, 0xFF	; 255
   1a678:	b6 16       	cp	r11, r22
   1a67a:	09 f4       	brne	.+2      	; 0x1a67e <main+0x1960>
   1a67c:	56 cc       	rjmp	.-1876   	; 0x19f2a <main+0x120c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3321
  {
    strcpy_P(str_topic, termbig_header_in);
   1a67e:	6b e7       	ldi	r22, 0x7B	; 123
   1a680:	72 e6       	ldi	r23, 0x62	; 98
   1a682:	ce 01       	movw	r24, r28
   1a684:	8f 5b       	subi	r24, 0xBF	; 191
   1a686:	9f 4f       	sbci	r25, 0xFF	; 255
   1a688:	0e 94 f3 d4 	call	0x1a9e6	; 0x1a9e6 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3322
    strcat(str_topic, "power-output/");
   1a68c:	60 ee       	ldi	r22, 0xE0	; 224
   1a68e:	73 e0       	ldi	r23, 0x03	; 3
   1a690:	ce 01       	movw	r24, r28
   1a692:	8f 5b       	subi	r24, 0xBF	; 191
   1a694:	9f 4f       	sbci	r25, 0xFF	; 255
   1a696:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1a69a:	4a e0       	ldi	r20, 0x0A	; 10
   1a69c:	be 01       	movw	r22, r28
   1a69e:	6c 55       	subi	r22, 0x5C	; 92
   1a6a0:	7f 4f       	sbci	r23, 0xFF	; 255
   1a6a2:	8b 2d       	mov	r24, r11
   1a6a4:	90 e0       	ldi	r25, 0x00	; 0
   1a6a6:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3324
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
   1a6aa:	be 01       	movw	r22, r28
   1a6ac:	6c 55       	subi	r22, 0x5C	; 92
   1a6ae:	7f 4f       	sbci	r23, 0xFF	; 255
   1a6b0:	ce 01       	movw	r24, r28
   1a6b2:	8f 5b       	subi	r24, 0xBF	; 191
   1a6b4:	9f 4f       	sbci	r25, 0xFF	; 255
   1a6b6:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3327
    if (mode == TERM_MODE_MAN_HEAT)
      strcat(str_topic, "/heat");
    if (mode == TERM_MODE_MAN_COOL)
   1a6ba:	55 e0       	ldi	r21, 0x05	; 5
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3330
      strcat(str_topic, "/cool");
    if (mode == TERM_MODE_FAN)
      strcat(str_topic, "/fan");
   1a6bc:	68 ed       	ldi	r22, 0xD8	; 216
   1a6be:	78 e0       	ldi	r23, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3327
    strcat(str_topic, "power-output/");
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
    if (mode == TERM_MODE_MAN_HEAT)
      strcat(str_topic, "/heat");
    if (mode == TERM_MODE_MAN_COOL)
   1a6c0:	d5 12       	cpse	r13, r21
   1a6c2:	02 c0       	rjmp	.+4      	; 0x1a6c8 <main+0x19aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3328
      strcat(str_topic, "/cool");
   1a6c4:	62 ed       	ldi	r22, 0xD2	; 210
   1a6c6:	78 e0       	ldi	r23, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3330
    if (mode == TERM_MODE_FAN)
      strcat(str_topic, "/fan");
   1a6c8:	ce 01       	movw	r24, r28
   1a6ca:	8f 5b       	subi	r24, 0xBF	; 191
   1a6cc:	9f 4f       	sbci	r25, 0xFF	; 255
   1a6ce:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3333
    if (mode == TERM_MODE_ERR)
      strcat(str_topic, "/err");
    strcat(str_topic, "/pwm");
   1a6d2:	6d ed       	ldi	r22, 0xDD	; 221
   1a6d4:	78 e0       	ldi	r23, 0x08	; 8
   1a6d6:	ce 01       	movw	r24, r28
   1a6d8:	8f 5b       	subi	r24, 0xBF	; 191
   1a6da:	9f 4f       	sbci	r25, 0xFF	; 255
   1a6dc:	0e 94 81 e1 	call	0x1c302	; 0x1c302 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1a6e0:	4a e0       	ldi	r20, 0x0A	; 10
   1a6e2:	be 01       	movw	r22, r28
   1a6e4:	6f 5f       	subi	r22, 0xFF	; 255
   1a6e6:	7f 4f       	sbci	r23, 0xFF	; 255
   1a6e8:	87 2d       	mov	r24, r7
   1a6ea:	90 e0       	ldi	r25, 0x00	; 0
   1a6ec:	0e 94 30 d5 	call	0x1aa60	; 0x1aa60 <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3335
    itoa(pwm, payload, 10);
    mqtt_client.publish(str_topic, payload);
   1a6f0:	ae 01       	movw	r20, r28
   1a6f2:	4f 5f       	subi	r20, 0xFF	; 255
   1a6f4:	5f 4f       	sbci	r21, 0xFF	; 255
   1a6f6:	be 01       	movw	r22, r28
   1a6f8:	6f 5b       	subi	r22, 0xBF	; 191
   1a6fa:	7f 4f       	sbci	r23, 0xFF	; 255
   1a6fc:	8a ef       	ldi	r24, 0xFA	; 250
   1a6fe:	9f e0       	ldi	r25, 0x0F	; 15
   1a700:	0e 94 21 53 	call	0xa642	; 0xa642 <PubSubClient::publish(char const*, char const*)>
   1a704:	12 cc       	rjmp	.-2012   	; 0x19f2a <main+0x120c>

0001a706 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.114]>:
_Z28thermostat_ring_update_biteshhh.constprop.114():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:203
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
   1a706:	1f 93       	push	r17
   1a708:	cf 93       	push	r28
   1a70a:	df 93       	push	r29
   1a70c:	16 2f       	mov	r17, r22
thermostat_ring_get_status_data():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   1a70e:	91 e2       	ldi	r25, 0x21	; 33
   1a710:	89 9f       	mul	r24, r25
   1a712:	e0 01       	movw	r28, r0
   1a714:	11 24       	eor	r1, r1
   1a716:	c8 5a       	subi	r28, 0xA8	; 168
   1a718:	de 4f       	sbci	r29, 0xFE	; 254
   1a71a:	ce 01       	movw	r24, r28
   1a71c:	0e 94 99 57 	call	0xaf32	; 0xaf32 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.258] [clone .lto_priv.262]>
   1a720:	68 2f       	mov	r22, r24
_Z28thermostat_ring_update_biteshhh.constprop.114():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:206
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
   1a722:	11 11       	cpse	r17, r1
   1a724:	07 c0       	rjmp	.+14     	; 0x1a734 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.114]+0x2e>
   1a726:	6e 7f       	andi	r22, 0xFE	; 254
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   1a728:	ce 01       	movw	r24, r28
_Z28thermostat_ring_update_biteshhh.constprop.114():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:209
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
}
   1a72a:	df 91       	pop	r29
   1a72c:	cf 91       	pop	r28
   1a72e:	1f 91       	pop	r17
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   1a730:	0c 94 ba 53 	jmp	0xa774	; 0xa774 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.261]>
_Z28thermostat_ring_update_biteshhh.constprop.114():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   1a734:	61 60       	ori	r22, 0x01	; 1
   1a736:	f8 cf       	rjmp	.-16     	; 0x1a728 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.114]+0x22>

0001a738 <dtostrf>:
dtostrf():
   1a738:	ef 92       	push	r14
   1a73a:	0f 93       	push	r16
   1a73c:	1f 93       	push	r17
   1a73e:	cf 93       	push	r28
   1a740:	df 93       	push	r29
   1a742:	e8 01       	movw	r28, r16
   1a744:	34 e0       	ldi	r19, 0x04	; 4
   1a746:	47 fd       	sbrc	r20, 7
   1a748:	34 e1       	ldi	r19, 0x14	; 20
   1a74a:	04 2e       	mov	r0, r20
   1a74c:	00 0c       	add	r0, r0
   1a74e:	55 0b       	sbc	r21, r21
   1a750:	57 ff       	sbrs	r21, 7
   1a752:	03 c0       	rjmp	.+6      	; 0x1a75a <dtostrf+0x22>
   1a754:	51 95       	neg	r21
   1a756:	41 95       	neg	r20
   1a758:	51 09       	sbc	r21, r1
   1a75a:	e3 2e       	mov	r14, r19
   1a75c:	02 2f       	mov	r16, r18
   1a75e:	24 2f       	mov	r18, r20
   1a760:	ae 01       	movw	r20, r28
   1a762:	0e 94 ed d7 	call	0x1afda	; 0x1afda <dtoa_prf>
   1a766:	ce 01       	movw	r24, r28
   1a768:	df 91       	pop	r29
   1a76a:	cf 91       	pop	r28
   1a76c:	1f 91       	pop	r17
   1a76e:	0f 91       	pop	r16
   1a770:	ef 90       	pop	r14
   1a772:	08 95       	ret

0001a774 <strtoul>:
strtoul():
   1a774:	3f 92       	push	r3
   1a776:	4f 92       	push	r4
   1a778:	5f 92       	push	r5
   1a77a:	6f 92       	push	r6
   1a77c:	7f 92       	push	r7
   1a77e:	8f 92       	push	r8
   1a780:	9f 92       	push	r9
   1a782:	af 92       	push	r10
   1a784:	bf 92       	push	r11
   1a786:	cf 92       	push	r12
   1a788:	df 92       	push	r13
   1a78a:	ef 92       	push	r14
   1a78c:	ff 92       	push	r15
   1a78e:	0f 93       	push	r16
   1a790:	1f 93       	push	r17
   1a792:	cf 93       	push	r28
   1a794:	df 93       	push	r29
   1a796:	5c 01       	movw	r10, r24
   1a798:	6b 01       	movw	r12, r22
   1a79a:	7a 01       	movw	r14, r20
   1a79c:	61 15       	cp	r22, r1
   1a79e:	71 05       	cpc	r23, r1
   1a7a0:	19 f0       	breq	.+6      	; 0x1a7a8 <strtoul+0x34>
   1a7a2:	fb 01       	movw	r30, r22
   1a7a4:	91 83       	std	Z+1, r25	; 0x01
   1a7a6:	80 83       	st	Z, r24
   1a7a8:	e1 14       	cp	r14, r1
   1a7aa:	f1 04       	cpc	r15, r1
   1a7ac:	49 f0       	breq	.+18     	; 0x1a7c0 <strtoul+0x4c>
   1a7ae:	c7 01       	movw	r24, r14
   1a7b0:	02 97       	sbiw	r24, 0x02	; 2
   1a7b2:	83 97       	sbiw	r24, 0x23	; 35
   1a7b4:	28 f0       	brcs	.+10     	; 0x1a7c0 <strtoul+0x4c>
   1a7b6:	60 e0       	ldi	r22, 0x00	; 0
   1a7b8:	70 e0       	ldi	r23, 0x00	; 0
   1a7ba:	cb 01       	movw	r24, r22
   1a7bc:	9b c0       	rjmp	.+310    	; 0x1a8f4 <strtoul+0x180>
   1a7be:	5e 01       	movw	r10, r28
   1a7c0:	e5 01       	movw	r28, r10
   1a7c2:	21 96       	adiw	r28, 0x01	; 1
   1a7c4:	f5 01       	movw	r30, r10
   1a7c6:	10 81       	ld	r17, Z
   1a7c8:	81 2f       	mov	r24, r17
   1a7ca:	90 e0       	ldi	r25, 0x00	; 0
   1a7cc:	0e 94 df d4 	call	0x1a9be	; 0x1a9be <isspace>
   1a7d0:	89 2b       	or	r24, r25
   1a7d2:	a9 f7       	brne	.-22     	; 0x1a7be <strtoul+0x4a>
   1a7d4:	1d 32       	cpi	r17, 0x2D	; 45
   1a7d6:	09 f0       	breq	.+2      	; 0x1a7da <strtoul+0x66>
   1a7d8:	5c c0       	rjmp	.+184    	; 0x1a892 <strtoul+0x11e>
   1a7da:	21 96       	adiw	r28, 0x01	; 1
   1a7dc:	f5 01       	movw	r30, r10
   1a7de:	11 81       	ldd	r17, Z+1	; 0x01
   1a7e0:	01 e0       	ldi	r16, 0x01	; 1
   1a7e2:	e1 14       	cp	r14, r1
   1a7e4:	f1 04       	cpc	r15, r1
   1a7e6:	09 f4       	brne	.+2      	; 0x1a7ea <strtoul+0x76>
   1a7e8:	bb c0       	rjmp	.+374    	; 0x1a960 <strtoul+0x1ec>
   1a7ea:	f0 e1       	ldi	r31, 0x10	; 16
   1a7ec:	ef 16       	cp	r14, r31
   1a7ee:	f1 04       	cpc	r15, r1
   1a7f0:	09 f0       	breq	.+2      	; 0x1a7f4 <strtoul+0x80>
   1a7f2:	9b c0       	rjmp	.+310    	; 0x1a92a <strtoul+0x1b6>
   1a7f4:	10 33       	cpi	r17, 0x30	; 48
   1a7f6:	41 f4       	brne	.+16     	; 0x1a808 <strtoul+0x94>
   1a7f8:	88 81       	ld	r24, Y
   1a7fa:	8f 7d       	andi	r24, 0xDF	; 223
   1a7fc:	88 35       	cpi	r24, 0x58	; 88
   1a7fe:	09 f0       	breq	.+2      	; 0x1a802 <strtoul+0x8e>
   1a800:	8f c0       	rjmp	.+286    	; 0x1a920 <strtoul+0x1ac>
   1a802:	19 81       	ldd	r17, Y+1	; 0x01
   1a804:	22 96       	adiw	r28, 0x02	; 2
   1a806:	02 60       	ori	r16, 0x02	; 2
   1a808:	e0 e1       	ldi	r30, 0x10	; 16
   1a80a:	ee 2e       	mov	r14, r30
   1a80c:	f1 2c       	mov	r15, r1
   1a80e:	88 24       	eor	r8, r8
   1a810:	8a 94       	dec	r8
   1a812:	98 2c       	mov	r9, r8
   1a814:	a8 2c       	mov	r10, r8
   1a816:	ff e0       	ldi	r31, 0x0F	; 15
   1a818:	bf 2e       	mov	r11, r31
   1a81a:	20 e0       	ldi	r18, 0x00	; 0
   1a81c:	60 e0       	ldi	r22, 0x00	; 0
   1a81e:	70 e0       	ldi	r23, 0x00	; 0
   1a820:	cb 01       	movw	r24, r22
   1a822:	27 01       	movw	r4, r14
   1a824:	0f 2c       	mov	r0, r15
   1a826:	00 0c       	add	r0, r0
   1a828:	66 08       	sbc	r6, r6
   1a82a:	77 08       	sbc	r7, r7
   1a82c:	fe 01       	movw	r30, r28
   1a82e:	50 ed       	ldi	r21, 0xD0	; 208
   1a830:	35 2e       	mov	r3, r21
   1a832:	31 0e       	add	r3, r17
   1a834:	39 e0       	ldi	r19, 0x09	; 9
   1a836:	33 15       	cp	r19, r3
   1a838:	68 f4       	brcc	.+26     	; 0x1a854 <strtoul+0xe0>
   1a83a:	3f eb       	ldi	r19, 0xBF	; 191
   1a83c:	31 0f       	add	r19, r17
   1a83e:	49 ec       	ldi	r20, 0xC9	; 201
   1a840:	34 2e       	mov	r3, r20
   1a842:	3a 31       	cpi	r19, 0x1A	; 26
   1a844:	30 f0       	brcs	.+12     	; 0x1a852 <strtoul+0xde>
   1a846:	3f e9       	ldi	r19, 0x9F	; 159
   1a848:	31 0f       	add	r19, r17
   1a84a:	3a 31       	cpi	r19, 0x1A	; 26
   1a84c:	b0 f5       	brcc	.+108    	; 0x1a8ba <strtoul+0x146>
   1a84e:	39 ea       	ldi	r19, 0xA9	; 169
   1a850:	33 2e       	mov	r3, r19
   1a852:	31 0e       	add	r3, r17
   1a854:	3e 14       	cp	r3, r14
   1a856:	1f 04       	cpc	r1, r15
   1a858:	84 f5       	brge	.+96     	; 0x1a8ba <strtoul+0x146>
   1a85a:	2f 3f       	cpi	r18, 0xFF	; 255
   1a85c:	b9 f0       	breq	.+46     	; 0x1a88c <strtoul+0x118>
   1a85e:	86 16       	cp	r8, r22
   1a860:	97 06       	cpc	r9, r23
   1a862:	a8 06       	cpc	r10, r24
   1a864:	b9 06       	cpc	r11, r25
   1a866:	38 f1       	brcs	.+78     	; 0x1a8b6 <strtoul+0x142>
   1a868:	a3 01       	movw	r20, r6
   1a86a:	92 01       	movw	r18, r4
   1a86c:	0e 94 d1 de 	call	0x1bda2	; 0x1bda2 <__mulsi3>
   1a870:	23 2d       	mov	r18, r3
   1a872:	30 e0       	ldi	r19, 0x00	; 0
   1a874:	50 e0       	ldi	r21, 0x00	; 0
   1a876:	40 e0       	ldi	r20, 0x00	; 0
   1a878:	62 0f       	add	r22, r18
   1a87a:	73 1f       	adc	r23, r19
   1a87c:	84 1f       	adc	r24, r20
   1a87e:	95 1f       	adc	r25, r21
   1a880:	62 17       	cp	r22, r18
   1a882:	73 07       	cpc	r23, r19
   1a884:	84 07       	cpc	r24, r20
   1a886:	95 07       	cpc	r25, r21
   1a888:	b0 f0       	brcs	.+44     	; 0x1a8b6 <strtoul+0x142>
   1a88a:	21 e0       	ldi	r18, 0x01	; 1
   1a88c:	21 96       	adiw	r28, 0x01	; 1
   1a88e:	10 81       	ld	r17, Z
   1a890:	cd cf       	rjmp	.-102    	; 0x1a82c <strtoul+0xb8>
   1a892:	1b 32       	cpi	r17, 0x2B	; 43
   1a894:	21 f4       	brne	.+8      	; 0x1a89e <strtoul+0x12a>
   1a896:	e5 01       	movw	r28, r10
   1a898:	22 96       	adiw	r28, 0x02	; 2
   1a89a:	f5 01       	movw	r30, r10
   1a89c:	11 81       	ldd	r17, Z+1	; 0x01
   1a89e:	00 e0       	ldi	r16, 0x00	; 0
   1a8a0:	a0 cf       	rjmp	.-192    	; 0x1a7e2 <strtoul+0x6e>
   1a8a2:	78 e0       	ldi	r23, 0x08	; 8
   1a8a4:	e7 2e       	mov	r14, r23
   1a8a6:	f1 2c       	mov	r15, r1
   1a8a8:	88 24       	eor	r8, r8
   1a8aa:	8a 94       	dec	r8
   1a8ac:	98 2c       	mov	r9, r8
   1a8ae:	a8 2c       	mov	r10, r8
   1a8b0:	6f e1       	ldi	r22, 0x1F	; 31
   1a8b2:	b6 2e       	mov	r11, r22
   1a8b4:	b2 cf       	rjmp	.-156    	; 0x1a81a <strtoul+0xa6>
   1a8b6:	2f ef       	ldi	r18, 0xFF	; 255
   1a8b8:	e9 cf       	rjmp	.-46     	; 0x1a88c <strtoul+0x118>
   1a8ba:	c1 14       	cp	r12, r1
   1a8bc:	d1 04       	cpc	r13, r1
   1a8be:	31 f0       	breq	.+12     	; 0x1a8cc <strtoul+0x158>
   1a8c0:	22 23       	and	r18, r18
   1a8c2:	51 f1       	breq	.+84     	; 0x1a918 <strtoul+0x1a4>
   1a8c4:	21 97       	sbiw	r28, 0x01	; 1
   1a8c6:	f6 01       	movw	r30, r12
   1a8c8:	d1 83       	std	Z+1, r29	; 0x01
   1a8ca:	c0 83       	st	Z, r28
   1a8cc:	00 ff       	sbrs	r16, 0
   1a8ce:	07 c0       	rjmp	.+14     	; 0x1a8de <strtoul+0x16a>
   1a8d0:	90 95       	com	r25
   1a8d2:	80 95       	com	r24
   1a8d4:	70 95       	com	r23
   1a8d6:	61 95       	neg	r22
   1a8d8:	7f 4f       	sbci	r23, 0xFF	; 255
   1a8da:	8f 4f       	sbci	r24, 0xFF	; 255
   1a8dc:	9f 4f       	sbci	r25, 0xFF	; 255
   1a8de:	2f 3f       	cpi	r18, 0xFF	; 255
   1a8e0:	49 f4       	brne	.+18     	; 0x1a8f4 <strtoul+0x180>
   1a8e2:	82 e2       	ldi	r24, 0x22	; 34
   1a8e4:	90 e0       	ldi	r25, 0x00	; 0
   1a8e6:	90 93 6a 14 	sts	0x146A, r25	; 0x80146a <errno+0x1>
   1a8ea:	80 93 69 14 	sts	0x1469, r24	; 0x801469 <errno>
   1a8ee:	6f ef       	ldi	r22, 0xFF	; 255
   1a8f0:	7f ef       	ldi	r23, 0xFF	; 255
   1a8f2:	cb 01       	movw	r24, r22
   1a8f4:	df 91       	pop	r29
   1a8f6:	cf 91       	pop	r28
   1a8f8:	1f 91       	pop	r17
   1a8fa:	0f 91       	pop	r16
   1a8fc:	ff 90       	pop	r15
   1a8fe:	ef 90       	pop	r14
   1a900:	df 90       	pop	r13
   1a902:	cf 90       	pop	r12
   1a904:	bf 90       	pop	r11
   1a906:	af 90       	pop	r10
   1a908:	9f 90       	pop	r9
   1a90a:	8f 90       	pop	r8
   1a90c:	7f 90       	pop	r7
   1a90e:	6f 90       	pop	r6
   1a910:	5f 90       	pop	r5
   1a912:	4f 90       	pop	r4
   1a914:	3f 90       	pop	r3
   1a916:	08 95       	ret
   1a918:	01 ff       	sbrs	r16, 1
   1a91a:	d8 cf       	rjmp	.-80     	; 0x1a8cc <strtoul+0x158>
   1a91c:	22 97       	sbiw	r28, 0x02	; 2
   1a91e:	d3 cf       	rjmp	.-90     	; 0x1a8c6 <strtoul+0x152>
   1a920:	10 e3       	ldi	r17, 0x30	; 48
   1a922:	e1 14       	cp	r14, r1
   1a924:	f1 04       	cpc	r15, r1
   1a926:	09 f4       	brne	.+2      	; 0x1a92a <strtoul+0x1b6>
   1a928:	bc cf       	rjmp	.-136    	; 0x1a8a2 <strtoul+0x12e>
   1a92a:	3a e0       	ldi	r19, 0x0A	; 10
   1a92c:	e3 16       	cp	r14, r19
   1a92e:	f1 04       	cpc	r15, r1
   1a930:	e9 f0       	breq	.+58     	; 0x1a96c <strtoul+0x1f8>
   1a932:	80 e1       	ldi	r24, 0x10	; 16
   1a934:	e8 16       	cp	r14, r24
   1a936:	f1 04       	cpc	r15, r1
   1a938:	09 f4       	brne	.+2      	; 0x1a93c <strtoul+0x1c8>
   1a93a:	66 cf       	rjmp	.-308    	; 0x1a808 <strtoul+0x94>
   1a93c:	e8 e0       	ldi	r30, 0x08	; 8
   1a93e:	ee 16       	cp	r14, r30
   1a940:	f1 04       	cpc	r15, r1
   1a942:	09 f4       	brne	.+2      	; 0x1a946 <strtoul+0x1d2>
   1a944:	b1 cf       	rjmp	.-158    	; 0x1a8a8 <strtoul+0x134>
   1a946:	6f ef       	ldi	r22, 0xFF	; 255
   1a948:	7f ef       	ldi	r23, 0xFF	; 255
   1a94a:	cb 01       	movw	r24, r22
   1a94c:	97 01       	movw	r18, r14
   1a94e:	0f 2c       	mov	r0, r15
   1a950:	00 0c       	add	r0, r0
   1a952:	44 0b       	sbc	r20, r20
   1a954:	55 0b       	sbc	r21, r21
   1a956:	0e 94 09 df 	call	0x1be12	; 0x1be12 <__udivmodsi4>
   1a95a:	49 01       	movw	r8, r18
   1a95c:	5a 01       	movw	r10, r20
   1a95e:	5d cf       	rjmp	.-326    	; 0x1a81a <strtoul+0xa6>
   1a960:	10 33       	cpi	r17, 0x30	; 48
   1a962:	09 f4       	brne	.+2      	; 0x1a966 <strtoul+0x1f2>
   1a964:	49 cf       	rjmp	.-366    	; 0x1a7f8 <strtoul+0x84>
   1a966:	9a e0       	ldi	r25, 0x0A	; 10
   1a968:	e9 2e       	mov	r14, r25
   1a96a:	f1 2c       	mov	r15, r1
   1a96c:	89 e9       	ldi	r24, 0x99	; 153
   1a96e:	88 2e       	mov	r8, r24
   1a970:	98 2c       	mov	r9, r8
   1a972:	a8 2c       	mov	r10, r8
   1a974:	89 e1       	ldi	r24, 0x19	; 25
   1a976:	b8 2e       	mov	r11, r24
   1a978:	50 cf       	rjmp	.-352    	; 0x1a81a <strtoul+0xa6>

0001a97a <atof>:
atof():
   1a97a:	66 27       	eor	r22, r22
   1a97c:	77 27       	eor	r23, r23
   1a97e:	0c 94 8b da 	jmp	0x1b516	; 0x1b516 <strtod>

0001a982 <atoi>:
atoi():
   1a982:	fc 01       	movw	r30, r24
   1a984:	88 27       	eor	r24, r24
   1a986:	99 27       	eor	r25, r25
   1a988:	e8 94       	clt
   1a98a:	21 91       	ld	r18, Z+
   1a98c:	20 32       	cpi	r18, 0x20	; 32
   1a98e:	e9 f3       	breq	.-6      	; 0x1a98a <atoi+0x8>
   1a990:	29 30       	cpi	r18, 0x09	; 9
   1a992:	10 f0       	brcs	.+4      	; 0x1a998 <atoi+0x16>
   1a994:	2e 30       	cpi	r18, 0x0E	; 14
   1a996:	c8 f3       	brcs	.-14     	; 0x1a98a <atoi+0x8>
   1a998:	2b 32       	cpi	r18, 0x2B	; 43
   1a99a:	41 f0       	breq	.+16     	; 0x1a9ac <atoi+0x2a>
   1a99c:	2d 32       	cpi	r18, 0x2D	; 45
   1a99e:	39 f4       	brne	.+14     	; 0x1a9ae <atoi+0x2c>
   1a9a0:	68 94       	set
   1a9a2:	04 c0       	rjmp	.+8      	; 0x1a9ac <atoi+0x2a>
   1a9a4:	0e 94 3b d5 	call	0x1aa76	; 0x1aa76 <__mulhi_const_10>
   1a9a8:	82 0f       	add	r24, r18
   1a9aa:	91 1d       	adc	r25, r1
   1a9ac:	21 91       	ld	r18, Z+
   1a9ae:	20 53       	subi	r18, 0x30	; 48
   1a9b0:	2a 30       	cpi	r18, 0x0A	; 10
   1a9b2:	c0 f3       	brcs	.-16     	; 0x1a9a4 <atoi+0x22>
   1a9b4:	1e f4       	brtc	.+6      	; 0x1a9bc <atoi+0x3a>
   1a9b6:	90 95       	com	r25
   1a9b8:	81 95       	neg	r24
   1a9ba:	9f 4f       	sbci	r25, 0xFF	; 255
   1a9bc:	08 95       	ret

0001a9be <isspace>:
isspace():
   1a9be:	91 11       	cpse	r25, r1
   1a9c0:	0c 94 c1 dc 	jmp	0x1b982	; 0x1b982 <__ctype_isfalse>
   1a9c4:	80 32       	cpi	r24, 0x20	; 32
   1a9c6:	19 f0       	breq	.+6      	; 0x1a9ce <isspace+0x10>
   1a9c8:	89 50       	subi	r24, 0x09	; 9
   1a9ca:	85 50       	subi	r24, 0x05	; 5
   1a9cc:	c8 f7       	brcc	.-14     	; 0x1a9c0 <isspace+0x2>
   1a9ce:	08 95       	ret

0001a9d0 <strcat_P>:
strcat_P():
   1a9d0:	fb 01       	movw	r30, r22
   1a9d2:	dc 01       	movw	r26, r24
   1a9d4:	0d 90       	ld	r0, X+
   1a9d6:	00 20       	and	r0, r0
   1a9d8:	e9 f7       	brne	.-6      	; 0x1a9d4 <strcat_P+0x4>
   1a9da:	11 97       	sbiw	r26, 0x01	; 1
   1a9dc:	05 90       	lpm	r0, Z+
   1a9de:	0d 92       	st	X+, r0
   1a9e0:	00 20       	and	r0, r0
   1a9e2:	e1 f7       	brne	.-8      	; 0x1a9dc <strcat_P+0xc>
   1a9e4:	08 95       	ret

0001a9e6 <strcpy_P>:
strcpy_P():
   1a9e6:	fb 01       	movw	r30, r22
   1a9e8:	dc 01       	movw	r26, r24
   1a9ea:	05 90       	lpm	r0, Z+
   1a9ec:	0d 92       	st	X+, r0
   1a9ee:	00 20       	and	r0, r0
   1a9f0:	e1 f7       	brne	.-8      	; 0x1a9ea <strcpy_P+0x4>
   1a9f2:	08 95       	ret

0001a9f4 <strtok>:
strtok():
   1a9f4:	41 e5       	ldi	r20, 0x51	; 81
   1a9f6:	54 e1       	ldi	r21, 0x14	; 20
   1a9f8:	0c 94 fe d4 	jmp	0x1a9fc	; 0x1a9fc <strtok_r>

0001a9fc <strtok_r>:
strtok_r():
   1a9fc:	fa 01       	movw	r30, r20
   1a9fe:	a1 91       	ld	r26, Z+
   1aa00:	b0 81       	ld	r27, Z
   1aa02:	00 97       	sbiw	r24, 0x00	; 0
   1aa04:	19 f4       	brne	.+6      	; 0x1aa0c <strtok_r+0x10>
   1aa06:	10 97       	sbiw	r26, 0x00	; 0
   1aa08:	e1 f0       	breq	.+56     	; 0x1aa42 <strtok_r+0x46>
   1aa0a:	cd 01       	movw	r24, r26
   1aa0c:	dc 01       	movw	r26, r24
   1aa0e:	cd 01       	movw	r24, r26
   1aa10:	0d 90       	ld	r0, X+
   1aa12:	00 20       	and	r0, r0
   1aa14:	11 f4       	brne	.+4      	; 0x1aa1a <strtok_r+0x1e>
   1aa16:	c0 01       	movw	r24, r0
   1aa18:	13 c0       	rjmp	.+38     	; 0x1aa40 <strtok_r+0x44>
   1aa1a:	fb 01       	movw	r30, r22
   1aa1c:	21 91       	ld	r18, Z+
   1aa1e:	22 23       	and	r18, r18
   1aa20:	19 f0       	breq	.+6      	; 0x1aa28 <strtok_r+0x2c>
   1aa22:	20 15       	cp	r18, r0
   1aa24:	d9 f7       	brne	.-10     	; 0x1aa1c <strtok_r+0x20>
   1aa26:	f3 cf       	rjmp	.-26     	; 0x1aa0e <strtok_r+0x12>
   1aa28:	fb 01       	movw	r30, r22
   1aa2a:	21 91       	ld	r18, Z+
   1aa2c:	20 15       	cp	r18, r0
   1aa2e:	19 f4       	brne	.+6      	; 0x1aa36 <strtok_r+0x3a>
   1aa30:	1e 92       	st	-X, r1
   1aa32:	11 96       	adiw	r26, 0x01	; 1
   1aa34:	06 c0       	rjmp	.+12     	; 0x1aa42 <strtok_r+0x46>
   1aa36:	22 23       	and	r18, r18
   1aa38:	c1 f7       	brne	.-16     	; 0x1aa2a <strtok_r+0x2e>
   1aa3a:	0d 90       	ld	r0, X+
   1aa3c:	00 20       	and	r0, r0
   1aa3e:	a1 f7       	brne	.-24     	; 0x1aa28 <strtok_r+0x2c>
   1aa40:	d0 01       	movw	r26, r0
   1aa42:	fa 01       	movw	r30, r20
   1aa44:	a1 93       	st	Z+, r26
   1aa46:	b0 83       	st	Z, r27
   1aa48:	08 95       	ret

0001aa4a <itoa>:
itoa():
   1aa4a:	45 32       	cpi	r20, 0x25	; 37
   1aa4c:	51 05       	cpc	r21, r1
   1aa4e:	20 f4       	brcc	.+8      	; 0x1aa58 <itoa+0xe>
   1aa50:	42 30       	cpi	r20, 0x02	; 2
   1aa52:	10 f0       	brcs	.+4      	; 0x1aa58 <itoa+0xe>
   1aa54:	0c 94 30 d5 	jmp	0x1aa60	; 0x1aa60 <__itoa_ncheck>
   1aa58:	fb 01       	movw	r30, r22
   1aa5a:	10 82       	st	Z, r1
   1aa5c:	cb 01       	movw	r24, r22
   1aa5e:	08 95       	ret

0001aa60 <__itoa_ncheck>:
__itoa_ncheck():
   1aa60:	bb 27       	eor	r27, r27
   1aa62:	4a 30       	cpi	r20, 0x0A	; 10
   1aa64:	31 f4       	brne	.+12     	; 0x1aa72 <__itoa_ncheck+0x12>
   1aa66:	99 23       	and	r25, r25
   1aa68:	22 f4       	brpl	.+8      	; 0x1aa72 <__itoa_ncheck+0x12>
   1aa6a:	bd e2       	ldi	r27, 0x2D	; 45
   1aa6c:	90 95       	com	r25
   1aa6e:	81 95       	neg	r24
   1aa70:	9f 4f       	sbci	r25, 0xFF	; 255
   1aa72:	0c 94 44 d5 	jmp	0x1aa88	; 0x1aa88 <__utoa_common>

0001aa76 <__mulhi_const_10>:
__mulhi_const_10():
   1aa76:	7a e0       	ldi	r23, 0x0A	; 10
   1aa78:	97 9f       	mul	r25, r23
   1aa7a:	90 2d       	mov	r25, r0
   1aa7c:	87 9f       	mul	r24, r23
   1aa7e:	80 2d       	mov	r24, r0
   1aa80:	91 0d       	add	r25, r1
   1aa82:	11 24       	eor	r1, r1
   1aa84:	08 95       	ret

0001aa86 <__utoa_ncheck>:
__utoa_ncheck():
   1aa86:	bb 27       	eor	r27, r27

0001aa88 <__utoa_common>:
   1aa88:	fb 01       	movw	r30, r22
   1aa8a:	55 27       	eor	r21, r21
   1aa8c:	aa 27       	eor	r26, r26
   1aa8e:	88 0f       	add	r24, r24
   1aa90:	99 1f       	adc	r25, r25
   1aa92:	aa 1f       	adc	r26, r26
   1aa94:	a4 17       	cp	r26, r20
   1aa96:	10 f0       	brcs	.+4      	; 0x1aa9c <__utoa_common+0x14>
   1aa98:	a4 1b       	sub	r26, r20
   1aa9a:	83 95       	inc	r24
   1aa9c:	50 51       	subi	r21, 0x10	; 16
   1aa9e:	b9 f7       	brne	.-18     	; 0x1aa8e <__utoa_common+0x6>
   1aaa0:	a0 5d       	subi	r26, 0xD0	; 208
   1aaa2:	aa 33       	cpi	r26, 0x3A	; 58
   1aaa4:	08 f0       	brcs	.+2      	; 0x1aaa8 <__utoa_common+0x20>
   1aaa6:	a9 5d       	subi	r26, 0xD9	; 217
   1aaa8:	a1 93       	st	Z+, r26
   1aaaa:	00 97       	sbiw	r24, 0x00	; 0
   1aaac:	79 f7       	brne	.-34     	; 0x1aa8c <__utoa_common+0x4>
   1aaae:	b1 11       	cpse	r27, r1
   1aab0:	b1 93       	st	Z+, r27
   1aab2:	11 92       	st	Z+, r1
   1aab4:	cb 01       	movw	r24, r22
   1aab6:	0c 94 f9 dc 	jmp	0x1b9f2	; 0x1b9f2 <strrev>

0001aaba <fdevopen>:
fdevopen():
   1aaba:	0f 93       	push	r16
   1aabc:	1f 93       	push	r17
   1aabe:	cf 93       	push	r28
   1aac0:	df 93       	push	r29
   1aac2:	00 97       	sbiw	r24, 0x00	; 0
   1aac4:	59 f4       	brne	.+22     	; 0x1aadc <fdevopen+0x22>
   1aac6:	61 15       	cp	r22, r1
   1aac8:	71 05       	cpc	r23, r1
   1aaca:	41 f4       	brne	.+16     	; 0x1aadc <fdevopen+0x22>
   1aacc:	f0 e0       	ldi	r31, 0x00	; 0
   1aace:	e0 e0       	ldi	r30, 0x00	; 0
   1aad0:	cf 01       	movw	r24, r30
   1aad2:	df 91       	pop	r29
   1aad4:	cf 91       	pop	r28
   1aad6:	1f 91       	pop	r17
   1aad8:	0f 91       	pop	r16
   1aada:	08 95       	ret
   1aadc:	8b 01       	movw	r16, r22
   1aade:	ec 01       	movw	r28, r24
   1aae0:	6e e0       	ldi	r22, 0x0E	; 14
   1aae2:	70 e0       	ldi	r23, 0x00	; 0
   1aae4:	81 e0       	ldi	r24, 0x01	; 1
   1aae6:	90 e0       	ldi	r25, 0x00	; 0
   1aae8:	0e 94 d1 d7 	call	0x1afa2	; 0x1afa2 <calloc>
   1aaec:	fc 01       	movw	r30, r24
   1aaee:	89 2b       	or	r24, r25
   1aaf0:	69 f3       	breq	.-38     	; 0x1aacc <fdevopen+0x12>
   1aaf2:	80 e8       	ldi	r24, 0x80	; 128
   1aaf4:	83 83       	std	Z+3, r24	; 0x03
   1aaf6:	01 15       	cp	r16, r1
   1aaf8:	11 05       	cpc	r17, r1
   1aafa:	71 f0       	breq	.+28     	; 0x1ab18 <fdevopen+0x5e>
   1aafc:	13 87       	std	Z+11, r17	; 0x0b
   1aafe:	02 87       	std	Z+10, r16	; 0x0a
   1ab00:	81 e8       	ldi	r24, 0x81	; 129
   1ab02:	83 83       	std	Z+3, r24	; 0x03
   1ab04:	80 91 53 14 	lds	r24, 0x1453	; 0x801453 <__iob>
   1ab08:	90 91 54 14 	lds	r25, 0x1454	; 0x801454 <__iob+0x1>
   1ab0c:	89 2b       	or	r24, r25
   1ab0e:	21 f4       	brne	.+8      	; 0x1ab18 <fdevopen+0x5e>
   1ab10:	f0 93 54 14 	sts	0x1454, r31	; 0x801454 <__iob+0x1>
   1ab14:	e0 93 53 14 	sts	0x1453, r30	; 0x801453 <__iob>
   1ab18:	20 97       	sbiw	r28, 0x00	; 0
   1ab1a:	d1 f2       	breq	.-76     	; 0x1aad0 <fdevopen+0x16>
   1ab1c:	d1 87       	std	Z+9, r29	; 0x09
   1ab1e:	c0 87       	std	Z+8, r28	; 0x08
   1ab20:	83 81       	ldd	r24, Z+3	; 0x03
   1ab22:	82 60       	ori	r24, 0x02	; 2
   1ab24:	83 83       	std	Z+3, r24	; 0x03
   1ab26:	80 91 55 14 	lds	r24, 0x1455	; 0x801455 <__iob+0x2>
   1ab2a:	90 91 56 14 	lds	r25, 0x1456	; 0x801456 <__iob+0x3>
   1ab2e:	89 2b       	or	r24, r25
   1ab30:	79 f6       	brne	.-98     	; 0x1aad0 <fdevopen+0x16>
   1ab32:	f0 93 56 14 	sts	0x1456, r31	; 0x801456 <__iob+0x3>
   1ab36:	e0 93 55 14 	sts	0x1455, r30	; 0x801455 <__iob+0x2>
   1ab3a:	80 91 57 14 	lds	r24, 0x1457	; 0x801457 <__iob+0x4>
   1ab3e:	90 91 58 14 	lds	r25, 0x1458	; 0x801458 <__iob+0x5>
   1ab42:	89 2b       	or	r24, r25
   1ab44:	29 f6       	brne	.-118    	; 0x1aad0 <fdevopen+0x16>
   1ab46:	f0 93 58 14 	sts	0x1458, r31	; 0x801458 <__iob+0x5>
   1ab4a:	e0 93 57 14 	sts	0x1457, r30	; 0x801457 <__iob+0x4>
   1ab4e:	c0 cf       	rjmp	.-128    	; 0x1aad0 <fdevopen+0x16>

0001ab50 <printf_P>:
printf_P():
   1ab50:	0f 93       	push	r16
   1ab52:	1f 93       	push	r17
   1ab54:	cf 93       	push	r28
   1ab56:	df 93       	push	r29
   1ab58:	cd b7       	in	r28, 0x3d	; 61
   1ab5a:	de b7       	in	r29, 0x3e	; 62
   1ab5c:	ae 01       	movw	r20, r28
   1ab5e:	48 5f       	subi	r20, 0xF8	; 248
   1ab60:	5f 4f       	sbci	r21, 0xFF	; 255
   1ab62:	da 01       	movw	r26, r20
   1ab64:	6d 91       	ld	r22, X+
   1ab66:	7d 91       	ld	r23, X+
   1ab68:	ad 01       	movw	r20, r26
   1ab6a:	03 e5       	ldi	r16, 0x53	; 83
   1ab6c:	14 e1       	ldi	r17, 0x14	; 20
   1ab6e:	f8 01       	movw	r30, r16
   1ab70:	82 81       	ldd	r24, Z+2	; 0x02
   1ab72:	93 81       	ldd	r25, Z+3	; 0x03
   1ab74:	dc 01       	movw	r26, r24
   1ab76:	13 96       	adiw	r26, 0x03	; 3
   1ab78:	2c 91       	ld	r18, X
   1ab7a:	13 97       	sbiw	r26, 0x03	; 3
   1ab7c:	28 60       	ori	r18, 0x08	; 8
   1ab7e:	13 96       	adiw	r26, 0x03	; 3
   1ab80:	2c 93       	st	X, r18
   1ab82:	0e 94 cf d5 	call	0x1ab9e	; 0x1ab9e <vfprintf>
   1ab86:	d8 01       	movw	r26, r16
   1ab88:	12 96       	adiw	r26, 0x02	; 2
   1ab8a:	ed 91       	ld	r30, X+
   1ab8c:	fc 91       	ld	r31, X
   1ab8e:	23 81       	ldd	r18, Z+3	; 0x03
   1ab90:	27 7f       	andi	r18, 0xF7	; 247
   1ab92:	23 83       	std	Z+3, r18	; 0x03
   1ab94:	df 91       	pop	r29
   1ab96:	cf 91       	pop	r28
   1ab98:	1f 91       	pop	r17
   1ab9a:	0f 91       	pop	r16
   1ab9c:	08 95       	ret

0001ab9e <vfprintf>:
vfprintf():
   1ab9e:	2f 92       	push	r2
   1aba0:	3f 92       	push	r3
   1aba2:	4f 92       	push	r4
   1aba4:	5f 92       	push	r5
   1aba6:	6f 92       	push	r6
   1aba8:	7f 92       	push	r7
   1abaa:	8f 92       	push	r8
   1abac:	9f 92       	push	r9
   1abae:	af 92       	push	r10
   1abb0:	bf 92       	push	r11
   1abb2:	cf 92       	push	r12
   1abb4:	df 92       	push	r13
   1abb6:	ef 92       	push	r14
   1abb8:	ff 92       	push	r15
   1abba:	0f 93       	push	r16
   1abbc:	1f 93       	push	r17
   1abbe:	cf 93       	push	r28
   1abc0:	df 93       	push	r29
   1abc2:	00 d0       	rcall	.+0      	; 0x1abc4 <vfprintf+0x26>
   1abc4:	00 d0       	rcall	.+0      	; 0x1abc6 <vfprintf+0x28>
   1abc6:	00 d0       	rcall	.+0      	; 0x1abc8 <vfprintf+0x2a>
   1abc8:	1f 92       	push	r1
   1abca:	1f 92       	push	r1
   1abcc:	cd b7       	in	r28, 0x3d	; 61
   1abce:	de b7       	in	r29, 0x3e	; 62
   1abd0:	7c 01       	movw	r14, r24
   1abd2:	3b 01       	movw	r6, r22
   1abd4:	8a 01       	movw	r16, r20
   1abd6:	fc 01       	movw	r30, r24
   1abd8:	17 82       	std	Z+7, r1	; 0x07
   1abda:	16 82       	std	Z+6, r1	; 0x06
   1abdc:	83 81       	ldd	r24, Z+3	; 0x03
   1abde:	81 ff       	sbrs	r24, 1
   1abe0:	dd c1       	rjmp	.+954    	; 0x1af9c <vfprintf+0x3fe>
   1abe2:	ce 01       	movw	r24, r28
   1abe4:	01 96       	adiw	r24, 0x01	; 1
   1abe6:	5c 01       	movw	r10, r24
   1abe8:	f7 01       	movw	r30, r14
   1abea:	93 81       	ldd	r25, Z+3	; 0x03
   1abec:	f3 01       	movw	r30, r6
   1abee:	93 fd       	sbrc	r25, 3
   1abf0:	85 91       	lpm	r24, Z+
   1abf2:	93 ff       	sbrs	r25, 3
   1abf4:	81 91       	ld	r24, Z+
   1abf6:	3f 01       	movw	r6, r30
   1abf8:	88 23       	and	r24, r24
   1abfa:	09 f4       	brne	.+2      	; 0x1abfe <vfprintf+0x60>
   1abfc:	53 c1       	rjmp	.+678    	; 0x1aea4 <vfprintf+0x306>
   1abfe:	85 32       	cpi	r24, 0x25	; 37
   1ac00:	39 f4       	brne	.+14     	; 0x1ac10 <vfprintf+0x72>
   1ac02:	93 fd       	sbrc	r25, 3
   1ac04:	85 91       	lpm	r24, Z+
   1ac06:	93 ff       	sbrs	r25, 3
   1ac08:	81 91       	ld	r24, Z+
   1ac0a:	3f 01       	movw	r6, r30
   1ac0c:	85 32       	cpi	r24, 0x25	; 37
   1ac0e:	29 f4       	brne	.+10     	; 0x1ac1a <vfprintf+0x7c>
   1ac10:	b7 01       	movw	r22, r14
   1ac12:	90 e0       	ldi	r25, 0x00	; 0
   1ac14:	0e 94 09 dd 	call	0x1ba12	; 0x1ba12 <fputc>
   1ac18:	e7 cf       	rjmp	.-50     	; 0x1abe8 <vfprintf+0x4a>
   1ac1a:	91 2c       	mov	r9, r1
   1ac1c:	21 2c       	mov	r2, r1
   1ac1e:	31 2c       	mov	r3, r1
   1ac20:	ff e1       	ldi	r31, 0x1F	; 31
   1ac22:	f3 15       	cp	r31, r3
   1ac24:	38 f0       	brcs	.+14     	; 0x1ac34 <vfprintf+0x96>
   1ac26:	8b 32       	cpi	r24, 0x2B	; 43
   1ac28:	11 f1       	breq	.+68     	; 0x1ac6e <vfprintf+0xd0>
   1ac2a:	90 f4       	brcc	.+36     	; 0x1ac50 <vfprintf+0xb2>
   1ac2c:	80 32       	cpi	r24, 0x20	; 32
   1ac2e:	09 f1       	breq	.+66     	; 0x1ac72 <vfprintf+0xd4>
   1ac30:	83 32       	cpi	r24, 0x23	; 35
   1ac32:	29 f1       	breq	.+74     	; 0x1ac7e <vfprintf+0xe0>
   1ac34:	37 fc       	sbrc	r3, 7
   1ac36:	3c c0       	rjmp	.+120    	; 0x1acb0 <vfprintf+0x112>
   1ac38:	20 ed       	ldi	r18, 0xD0	; 208
   1ac3a:	28 0f       	add	r18, r24
   1ac3c:	2a 30       	cpi	r18, 0x0A	; 10
   1ac3e:	50 f5       	brcc	.+84     	; 0x1ac94 <vfprintf+0xf6>
   1ac40:	36 fe       	sbrs	r3, 6
   1ac42:	20 c0       	rjmp	.+64     	; 0x1ac84 <vfprintf+0xe6>
   1ac44:	8a e0       	ldi	r24, 0x0A	; 10
   1ac46:	98 9e       	mul	r9, r24
   1ac48:	20 0d       	add	r18, r0
   1ac4a:	11 24       	eor	r1, r1
   1ac4c:	92 2e       	mov	r9, r18
   1ac4e:	06 c0       	rjmp	.+12     	; 0x1ac5c <vfprintf+0xbe>
   1ac50:	8d 32       	cpi	r24, 0x2D	; 45
   1ac52:	91 f0       	breq	.+36     	; 0x1ac78 <vfprintf+0xda>
   1ac54:	80 33       	cpi	r24, 0x30	; 48
   1ac56:	71 f7       	brne	.-36     	; 0x1ac34 <vfprintf+0x96>
   1ac58:	68 94       	set
   1ac5a:	30 f8       	bld	r3, 0
   1ac5c:	f3 01       	movw	r30, r6
   1ac5e:	93 fd       	sbrc	r25, 3
   1ac60:	85 91       	lpm	r24, Z+
   1ac62:	93 ff       	sbrs	r25, 3
   1ac64:	81 91       	ld	r24, Z+
   1ac66:	3f 01       	movw	r6, r30
   1ac68:	81 11       	cpse	r24, r1
   1ac6a:	da cf       	rjmp	.-76     	; 0x1ac20 <vfprintf+0x82>
   1ac6c:	21 c0       	rjmp	.+66     	; 0x1acb0 <vfprintf+0x112>
   1ac6e:	68 94       	set
   1ac70:	31 f8       	bld	r3, 1
   1ac72:	68 94       	set
   1ac74:	32 f8       	bld	r3, 2
   1ac76:	f2 cf       	rjmp	.-28     	; 0x1ac5c <vfprintf+0xbe>
   1ac78:	68 94       	set
   1ac7a:	33 f8       	bld	r3, 3
   1ac7c:	ef cf       	rjmp	.-34     	; 0x1ac5c <vfprintf+0xbe>
   1ac7e:	68 94       	set
   1ac80:	34 f8       	bld	r3, 4
   1ac82:	ec cf       	rjmp	.-40     	; 0x1ac5c <vfprintf+0xbe>
   1ac84:	ea e0       	ldi	r30, 0x0A	; 10
   1ac86:	2e 9e       	mul	r2, r30
   1ac88:	20 0d       	add	r18, r0
   1ac8a:	11 24       	eor	r1, r1
   1ac8c:	22 2e       	mov	r2, r18
   1ac8e:	68 94       	set
   1ac90:	35 f8       	bld	r3, 5
   1ac92:	e4 cf       	rjmp	.-56     	; 0x1ac5c <vfprintf+0xbe>
   1ac94:	8e 32       	cpi	r24, 0x2E	; 46
   1ac96:	29 f4       	brne	.+10     	; 0x1aca2 <vfprintf+0x104>
   1ac98:	36 fc       	sbrc	r3, 6
   1ac9a:	04 c1       	rjmp	.+520    	; 0x1aea4 <vfprintf+0x306>
   1ac9c:	68 94       	set
   1ac9e:	36 f8       	bld	r3, 6
   1aca0:	dd cf       	rjmp	.-70     	; 0x1ac5c <vfprintf+0xbe>
   1aca2:	8c 36       	cpi	r24, 0x6C	; 108
   1aca4:	19 f4       	brne	.+6      	; 0x1acac <vfprintf+0x10e>
   1aca6:	68 94       	set
   1aca8:	37 f8       	bld	r3, 7
   1acaa:	d8 cf       	rjmp	.-80     	; 0x1ac5c <vfprintf+0xbe>
   1acac:	88 36       	cpi	r24, 0x68	; 104
   1acae:	b1 f2       	breq	.-84     	; 0x1ac5c <vfprintf+0xbe>
   1acb0:	98 2f       	mov	r25, r24
   1acb2:	9f 7d       	andi	r25, 0xDF	; 223
   1acb4:	95 54       	subi	r25, 0x45	; 69
   1acb6:	93 30       	cpi	r25, 0x03	; 3
   1acb8:	e0 f0       	brcs	.+56     	; 0x1acf2 <vfprintf+0x154>
   1acba:	83 36       	cpi	r24, 0x63	; 99
   1acbc:	a1 f1       	breq	.+104    	; 0x1ad26 <vfprintf+0x188>
   1acbe:	83 37       	cpi	r24, 0x73	; 115
   1acc0:	c1 f1       	breq	.+112    	; 0x1ad32 <vfprintf+0x194>
   1acc2:	83 35       	cpi	r24, 0x53	; 83
   1acc4:	09 f0       	breq	.+2      	; 0x1acc8 <vfprintf+0x12a>
   1acc6:	63 c0       	rjmp	.+198    	; 0x1ad8e <vfprintf+0x1f0>
   1acc8:	28 01       	movw	r4, r16
   1acca:	f2 e0       	ldi	r31, 0x02	; 2
   1accc:	4f 0e       	add	r4, r31
   1acce:	51 1c       	adc	r5, r1
   1acd0:	f8 01       	movw	r30, r16
   1acd2:	c0 80       	ld	r12, Z
   1acd4:	d1 80       	ldd	r13, Z+1	; 0x01
   1acd6:	69 2d       	mov	r22, r9
   1acd8:	70 e0       	ldi	r23, 0x00	; 0
   1acda:	36 fc       	sbrc	r3, 6
   1acdc:	02 c0       	rjmp	.+4      	; 0x1ace2 <vfprintf+0x144>
   1acde:	6f ef       	ldi	r22, 0xFF	; 255
   1ace0:	7f ef       	ldi	r23, 0xFF	; 255
   1ace2:	c6 01       	movw	r24, r12
   1ace4:	0e 94 dc dc 	call	0x1b9b8	; 0x1b9b8 <strnlen_P>
   1ace8:	4c 01       	movw	r8, r24
   1acea:	68 94       	set
   1acec:	37 f8       	bld	r3, 7
   1acee:	82 01       	movw	r16, r4
   1acf0:	0a c0       	rjmp	.+20     	; 0x1ad06 <vfprintf+0x168>
   1acf2:	0c 5f       	subi	r16, 0xFC	; 252
   1acf4:	1f 4f       	sbci	r17, 0xFF	; 255
   1acf6:	ff e3       	ldi	r31, 0x3F	; 63
   1acf8:	f9 83       	std	Y+1, r31	; 0x01
   1acfa:	88 24       	eor	r8, r8
   1acfc:	83 94       	inc	r8
   1acfe:	91 2c       	mov	r9, r1
   1ad00:	65 01       	movw	r12, r10
   1ad02:	e8 94       	clt
   1ad04:	37 f8       	bld	r3, 7
   1ad06:	33 fe       	sbrs	r3, 3
   1ad08:	2d c0       	rjmp	.+90     	; 0x1ad64 <vfprintf+0x1c6>
   1ad0a:	52 2c       	mov	r5, r2
   1ad0c:	81 14       	cp	r8, r1
   1ad0e:	91 04       	cpc	r9, r1
   1ad10:	71 f5       	brne	.+92     	; 0x1ad6e <vfprintf+0x1d0>
   1ad12:	55 20       	and	r5, r5
   1ad14:	09 f4       	brne	.+2      	; 0x1ad18 <vfprintf+0x17a>
   1ad16:	68 cf       	rjmp	.-304    	; 0x1abe8 <vfprintf+0x4a>
   1ad18:	b7 01       	movw	r22, r14
   1ad1a:	80 e2       	ldi	r24, 0x20	; 32
   1ad1c:	90 e0       	ldi	r25, 0x00	; 0
   1ad1e:	0e 94 09 dd 	call	0x1ba12	; 0x1ba12 <fputc>
   1ad22:	5a 94       	dec	r5
   1ad24:	f6 cf       	rjmp	.-20     	; 0x1ad12 <vfprintf+0x174>
   1ad26:	f8 01       	movw	r30, r16
   1ad28:	80 81       	ld	r24, Z
   1ad2a:	89 83       	std	Y+1, r24	; 0x01
   1ad2c:	0e 5f       	subi	r16, 0xFE	; 254
   1ad2e:	1f 4f       	sbci	r17, 0xFF	; 255
   1ad30:	e4 cf       	rjmp	.-56     	; 0x1acfa <vfprintf+0x15c>
   1ad32:	28 01       	movw	r4, r16
   1ad34:	f2 e0       	ldi	r31, 0x02	; 2
   1ad36:	4f 0e       	add	r4, r31
   1ad38:	51 1c       	adc	r5, r1
   1ad3a:	f8 01       	movw	r30, r16
   1ad3c:	c0 80       	ld	r12, Z
   1ad3e:	d1 80       	ldd	r13, Z+1	; 0x01
   1ad40:	69 2d       	mov	r22, r9
   1ad42:	70 e0       	ldi	r23, 0x00	; 0
   1ad44:	36 fc       	sbrc	r3, 6
   1ad46:	02 c0       	rjmp	.+4      	; 0x1ad4c <vfprintf+0x1ae>
   1ad48:	6f ef       	ldi	r22, 0xFF	; 255
   1ad4a:	7f ef       	ldi	r23, 0xFF	; 255
   1ad4c:	c6 01       	movw	r24, r12
   1ad4e:	0e 94 ee dc 	call	0x1b9dc	; 0x1b9dc <strnlen>
   1ad52:	4c 01       	movw	r8, r24
   1ad54:	82 01       	movw	r16, r4
   1ad56:	d5 cf       	rjmp	.-86     	; 0x1ad02 <vfprintf+0x164>
   1ad58:	b7 01       	movw	r22, r14
   1ad5a:	80 e2       	ldi	r24, 0x20	; 32
   1ad5c:	90 e0       	ldi	r25, 0x00	; 0
   1ad5e:	0e 94 09 dd 	call	0x1ba12	; 0x1ba12 <fputc>
   1ad62:	2a 94       	dec	r2
   1ad64:	28 14       	cp	r2, r8
   1ad66:	19 04       	cpc	r1, r9
   1ad68:	09 f0       	breq	.+2      	; 0x1ad6c <vfprintf+0x1ce>
   1ad6a:	b0 f7       	brcc	.-20     	; 0x1ad58 <vfprintf+0x1ba>
   1ad6c:	ce cf       	rjmp	.-100    	; 0x1ad0a <vfprintf+0x16c>
   1ad6e:	f6 01       	movw	r30, r12
   1ad70:	37 fc       	sbrc	r3, 7
   1ad72:	85 91       	lpm	r24, Z+
   1ad74:	37 fe       	sbrs	r3, 7
   1ad76:	81 91       	ld	r24, Z+
   1ad78:	6f 01       	movw	r12, r30
   1ad7a:	b7 01       	movw	r22, r14
   1ad7c:	90 e0       	ldi	r25, 0x00	; 0
   1ad7e:	0e 94 09 dd 	call	0x1ba12	; 0x1ba12 <fputc>
   1ad82:	51 10       	cpse	r5, r1
   1ad84:	5a 94       	dec	r5
   1ad86:	f1 e0       	ldi	r31, 0x01	; 1
   1ad88:	8f 1a       	sub	r8, r31
   1ad8a:	91 08       	sbc	r9, r1
   1ad8c:	bf cf       	rjmp	.-130    	; 0x1ad0c <vfprintf+0x16e>
   1ad8e:	84 36       	cpi	r24, 0x64	; 100
   1ad90:	19 f0       	breq	.+6      	; 0x1ad98 <vfprintf+0x1fa>
   1ad92:	89 36       	cpi	r24, 0x69	; 105
   1ad94:	09 f0       	breq	.+2      	; 0x1ad98 <vfprintf+0x1fa>
   1ad96:	77 c0       	rjmp	.+238    	; 0x1ae86 <vfprintf+0x2e8>
   1ad98:	f8 01       	movw	r30, r16
   1ad9a:	37 fe       	sbrs	r3, 7
   1ad9c:	6b c0       	rjmp	.+214    	; 0x1ae74 <vfprintf+0x2d6>
   1ad9e:	60 81       	ld	r22, Z
   1ada0:	71 81       	ldd	r23, Z+1	; 0x01
   1ada2:	82 81       	ldd	r24, Z+2	; 0x02
   1ada4:	93 81       	ldd	r25, Z+3	; 0x03
   1ada6:	0c 5f       	subi	r16, 0xFC	; 252
   1ada8:	1f 4f       	sbci	r17, 0xFF	; 255
   1adaa:	f3 2d       	mov	r31, r3
   1adac:	ff 76       	andi	r31, 0x6F	; 111
   1adae:	3f 2e       	mov	r3, r31
   1adb0:	97 ff       	sbrs	r25, 7
   1adb2:	09 c0       	rjmp	.+18     	; 0x1adc6 <vfprintf+0x228>
   1adb4:	90 95       	com	r25
   1adb6:	80 95       	com	r24
   1adb8:	70 95       	com	r23
   1adba:	61 95       	neg	r22
   1adbc:	7f 4f       	sbci	r23, 0xFF	; 255
   1adbe:	8f 4f       	sbci	r24, 0xFF	; 255
   1adc0:	9f 4f       	sbci	r25, 0xFF	; 255
   1adc2:	68 94       	set
   1adc4:	37 f8       	bld	r3, 7
   1adc6:	2a e0       	ldi	r18, 0x0A	; 10
   1adc8:	30 e0       	ldi	r19, 0x00	; 0
   1adca:	a5 01       	movw	r20, r10
   1adcc:	0e 94 39 dd 	call	0x1ba72	; 0x1ba72 <__ultoa_invert>
   1add0:	c8 2e       	mov	r12, r24
   1add2:	ca 18       	sub	r12, r10
   1add4:	8c 2c       	mov	r8, r12
   1add6:	43 2c       	mov	r4, r3
   1add8:	36 fe       	sbrs	r3, 6
   1adda:	0c c0       	rjmp	.+24     	; 0x1adf4 <vfprintf+0x256>
   1addc:	e8 94       	clt
   1adde:	40 f8       	bld	r4, 0
   1ade0:	c9 14       	cp	r12, r9
   1ade2:	40 f4       	brcc	.+16     	; 0x1adf4 <vfprintf+0x256>
   1ade4:	34 fe       	sbrs	r3, 4
   1ade6:	05 c0       	rjmp	.+10     	; 0x1adf2 <vfprintf+0x254>
   1ade8:	32 fc       	sbrc	r3, 2
   1adea:	03 c0       	rjmp	.+6      	; 0x1adf2 <vfprintf+0x254>
   1adec:	f3 2d       	mov	r31, r3
   1adee:	fe 7e       	andi	r31, 0xEE	; 238
   1adf0:	4f 2e       	mov	r4, r31
   1adf2:	89 2c       	mov	r8, r9
   1adf4:	44 fe       	sbrs	r4, 4
   1adf6:	aa c0       	rjmp	.+340    	; 0x1af4c <vfprintf+0x3ae>
   1adf8:	fe 01       	movw	r30, r28
   1adfa:	ec 0d       	add	r30, r12
   1adfc:	f1 1d       	adc	r31, r1
   1adfe:	80 81       	ld	r24, Z
   1ae00:	80 33       	cpi	r24, 0x30	; 48
   1ae02:	09 f0       	breq	.+2      	; 0x1ae06 <vfprintf+0x268>
   1ae04:	9c c0       	rjmp	.+312    	; 0x1af3e <vfprintf+0x3a0>
   1ae06:	24 2d       	mov	r18, r4
   1ae08:	29 7e       	andi	r18, 0xE9	; 233
   1ae0a:	42 2e       	mov	r4, r18
   1ae0c:	84 2d       	mov	r24, r4
   1ae0e:	88 70       	andi	r24, 0x08	; 8
   1ae10:	58 2e       	mov	r5, r24
   1ae12:	43 fc       	sbrc	r4, 3
   1ae14:	aa c0       	rjmp	.+340    	; 0x1af6a <vfprintf+0x3cc>
   1ae16:	40 fe       	sbrs	r4, 0
   1ae18:	a4 c0       	rjmp	.+328    	; 0x1af62 <vfprintf+0x3c4>
   1ae1a:	9c 2c       	mov	r9, r12
   1ae1c:	82 14       	cp	r8, r2
   1ae1e:	18 f4       	brcc	.+6      	; 0x1ae26 <vfprintf+0x288>
   1ae20:	2c 0c       	add	r2, r12
   1ae22:	92 2c       	mov	r9, r2
   1ae24:	98 18       	sub	r9, r8
   1ae26:	44 fe       	sbrs	r4, 4
   1ae28:	a6 c0       	rjmp	.+332    	; 0x1af76 <vfprintf+0x3d8>
   1ae2a:	b7 01       	movw	r22, r14
   1ae2c:	80 e3       	ldi	r24, 0x30	; 48
   1ae2e:	90 e0       	ldi	r25, 0x00	; 0
   1ae30:	0e 94 09 dd 	call	0x1ba12	; 0x1ba12 <fputc>
   1ae34:	42 fe       	sbrs	r4, 2
   1ae36:	09 c0       	rjmp	.+18     	; 0x1ae4a <vfprintf+0x2ac>
   1ae38:	88 e7       	ldi	r24, 0x78	; 120
   1ae3a:	90 e0       	ldi	r25, 0x00	; 0
   1ae3c:	41 fe       	sbrs	r4, 1
   1ae3e:	02 c0       	rjmp	.+4      	; 0x1ae44 <vfprintf+0x2a6>
   1ae40:	88 e5       	ldi	r24, 0x58	; 88
   1ae42:	90 e0       	ldi	r25, 0x00	; 0
   1ae44:	b7 01       	movw	r22, r14
   1ae46:	0e 94 09 dd 	call	0x1ba12	; 0x1ba12 <fputc>
   1ae4a:	c9 14       	cp	r12, r9
   1ae4c:	08 f4       	brcc	.+2      	; 0x1ae50 <vfprintf+0x2b2>
   1ae4e:	9f c0       	rjmp	.+318    	; 0x1af8e <vfprintf+0x3f0>
   1ae50:	ca 94       	dec	r12
   1ae52:	d1 2c       	mov	r13, r1
   1ae54:	9f ef       	ldi	r25, 0xFF	; 255
   1ae56:	c9 1a       	sub	r12, r25
   1ae58:	d9 0a       	sbc	r13, r25
   1ae5a:	ca 0c       	add	r12, r10
   1ae5c:	db 1c       	adc	r13, r11
   1ae5e:	f6 01       	movw	r30, r12
   1ae60:	82 91       	ld	r24, -Z
   1ae62:	6f 01       	movw	r12, r30
   1ae64:	b7 01       	movw	r22, r14
   1ae66:	90 e0       	ldi	r25, 0x00	; 0
   1ae68:	0e 94 09 dd 	call	0x1ba12	; 0x1ba12 <fputc>
   1ae6c:	ac 14       	cp	r10, r12
   1ae6e:	bd 04       	cpc	r11, r13
   1ae70:	b1 f7       	brne	.-20     	; 0x1ae5e <vfprintf+0x2c0>
   1ae72:	4f cf       	rjmp	.-354    	; 0x1ad12 <vfprintf+0x174>
   1ae74:	60 81       	ld	r22, Z
   1ae76:	71 81       	ldd	r23, Z+1	; 0x01
   1ae78:	07 2e       	mov	r0, r23
   1ae7a:	00 0c       	add	r0, r0
   1ae7c:	88 0b       	sbc	r24, r24
   1ae7e:	99 0b       	sbc	r25, r25
   1ae80:	0e 5f       	subi	r16, 0xFE	; 254
   1ae82:	1f 4f       	sbci	r17, 0xFF	; 255
   1ae84:	92 cf       	rjmp	.-220    	; 0x1adaa <vfprintf+0x20c>
   1ae86:	d3 2c       	mov	r13, r3
   1ae88:	e8 94       	clt
   1ae8a:	d4 f8       	bld	r13, 4
   1ae8c:	2a e0       	ldi	r18, 0x0A	; 10
   1ae8e:	30 e0       	ldi	r19, 0x00	; 0
   1ae90:	85 37       	cpi	r24, 0x75	; 117
   1ae92:	e1 f1       	breq	.+120    	; 0x1af0c <vfprintf+0x36e>
   1ae94:	23 2d       	mov	r18, r3
   1ae96:	29 7f       	andi	r18, 0xF9	; 249
   1ae98:	d2 2e       	mov	r13, r18
   1ae9a:	8f 36       	cpi	r24, 0x6F	; 111
   1ae9c:	a9 f1       	breq	.+106    	; 0x1af08 <vfprintf+0x36a>
   1ae9e:	f0 f4       	brcc	.+60     	; 0x1aedc <vfprintf+0x33e>
   1aea0:	88 35       	cpi	r24, 0x58	; 88
   1aea2:	51 f1       	breq	.+84     	; 0x1aef8 <vfprintf+0x35a>
   1aea4:	f7 01       	movw	r30, r14
   1aea6:	86 81       	ldd	r24, Z+6	; 0x06
   1aea8:	97 81       	ldd	r25, Z+7	; 0x07
   1aeaa:	2b 96       	adiw	r28, 0x0b	; 11
   1aeac:	0f b6       	in	r0, 0x3f	; 63
   1aeae:	f8 94       	cli
   1aeb0:	de bf       	out	0x3e, r29	; 62
   1aeb2:	0f be       	out	0x3f, r0	; 63
   1aeb4:	cd bf       	out	0x3d, r28	; 61
   1aeb6:	df 91       	pop	r29
   1aeb8:	cf 91       	pop	r28
   1aeba:	1f 91       	pop	r17
   1aebc:	0f 91       	pop	r16
   1aebe:	ff 90       	pop	r15
   1aec0:	ef 90       	pop	r14
   1aec2:	df 90       	pop	r13
   1aec4:	cf 90       	pop	r12
   1aec6:	bf 90       	pop	r11
   1aec8:	af 90       	pop	r10
   1aeca:	9f 90       	pop	r9
   1aecc:	8f 90       	pop	r8
   1aece:	7f 90       	pop	r7
   1aed0:	6f 90       	pop	r6
   1aed2:	5f 90       	pop	r5
   1aed4:	4f 90       	pop	r4
   1aed6:	3f 90       	pop	r3
   1aed8:	2f 90       	pop	r2
   1aeda:	08 95       	ret
   1aedc:	80 37       	cpi	r24, 0x70	; 112
   1aede:	49 f0       	breq	.+18     	; 0x1aef2 <vfprintf+0x354>
   1aee0:	88 37       	cpi	r24, 0x78	; 120
   1aee2:	01 f7       	brne	.-64     	; 0x1aea4 <vfprintf+0x306>
   1aee4:	d4 fe       	sbrs	r13, 4
   1aee6:	02 c0       	rjmp	.+4      	; 0x1aeec <vfprintf+0x34e>
   1aee8:	68 94       	set
   1aeea:	d2 f8       	bld	r13, 2
   1aeec:	20 e1       	ldi	r18, 0x10	; 16
   1aeee:	30 e0       	ldi	r19, 0x00	; 0
   1aef0:	0d c0       	rjmp	.+26     	; 0x1af0c <vfprintf+0x36e>
   1aef2:	68 94       	set
   1aef4:	d4 f8       	bld	r13, 4
   1aef6:	f6 cf       	rjmp	.-20     	; 0x1aee4 <vfprintf+0x346>
   1aef8:	34 fe       	sbrs	r3, 4
   1aefa:	03 c0       	rjmp	.+6      	; 0x1af02 <vfprintf+0x364>
   1aefc:	82 2f       	mov	r24, r18
   1aefe:	86 60       	ori	r24, 0x06	; 6
   1af00:	d8 2e       	mov	r13, r24
   1af02:	20 e1       	ldi	r18, 0x10	; 16
   1af04:	32 e0       	ldi	r19, 0x02	; 2
   1af06:	02 c0       	rjmp	.+4      	; 0x1af0c <vfprintf+0x36e>
   1af08:	28 e0       	ldi	r18, 0x08	; 8
   1af0a:	30 e0       	ldi	r19, 0x00	; 0
   1af0c:	f8 01       	movw	r30, r16
   1af0e:	d7 fe       	sbrs	r13, 7
   1af10:	0f c0       	rjmp	.+30     	; 0x1af30 <vfprintf+0x392>
   1af12:	60 81       	ld	r22, Z
   1af14:	71 81       	ldd	r23, Z+1	; 0x01
   1af16:	82 81       	ldd	r24, Z+2	; 0x02
   1af18:	93 81       	ldd	r25, Z+3	; 0x03
   1af1a:	0c 5f       	subi	r16, 0xFC	; 252
   1af1c:	1f 4f       	sbci	r17, 0xFF	; 255
   1af1e:	a5 01       	movw	r20, r10
   1af20:	0e 94 39 dd 	call	0x1ba72	; 0x1ba72 <__ultoa_invert>
   1af24:	c8 2e       	mov	r12, r24
   1af26:	ca 18       	sub	r12, r10
   1af28:	3d 2c       	mov	r3, r13
   1af2a:	e8 94       	clt
   1af2c:	37 f8       	bld	r3, 7
   1af2e:	52 cf       	rjmp	.-348    	; 0x1add4 <vfprintf+0x236>
   1af30:	60 81       	ld	r22, Z
   1af32:	71 81       	ldd	r23, Z+1	; 0x01
   1af34:	90 e0       	ldi	r25, 0x00	; 0
   1af36:	80 e0       	ldi	r24, 0x00	; 0
   1af38:	0e 5f       	subi	r16, 0xFE	; 254
   1af3a:	1f 4f       	sbci	r17, 0xFF	; 255
   1af3c:	f0 cf       	rjmp	.-32     	; 0x1af1e <vfprintf+0x380>
   1af3e:	42 fc       	sbrc	r4, 2
   1af40:	02 c0       	rjmp	.+4      	; 0x1af46 <vfprintf+0x3a8>
   1af42:	83 94       	inc	r8
   1af44:	63 cf       	rjmp	.-314    	; 0x1ae0c <vfprintf+0x26e>
   1af46:	83 94       	inc	r8
   1af48:	83 94       	inc	r8
   1af4a:	60 cf       	rjmp	.-320    	; 0x1ae0c <vfprintf+0x26e>
   1af4c:	84 2d       	mov	r24, r4
   1af4e:	86 78       	andi	r24, 0x86	; 134
   1af50:	09 f4       	brne	.+2      	; 0x1af54 <vfprintf+0x3b6>
   1af52:	5c cf       	rjmp	.-328    	; 0x1ae0c <vfprintf+0x26e>
   1af54:	f6 cf       	rjmp	.-20     	; 0x1af42 <vfprintf+0x3a4>
   1af56:	b7 01       	movw	r22, r14
   1af58:	80 e2       	ldi	r24, 0x20	; 32
   1af5a:	90 e0       	ldi	r25, 0x00	; 0
   1af5c:	0e 94 09 dd 	call	0x1ba12	; 0x1ba12 <fputc>
   1af60:	83 94       	inc	r8
   1af62:	82 14       	cp	r8, r2
   1af64:	c0 f3       	brcs	.-16     	; 0x1af56 <vfprintf+0x3b8>
   1af66:	51 2c       	mov	r5, r1
   1af68:	5e cf       	rjmp	.-324    	; 0x1ae26 <vfprintf+0x288>
   1af6a:	52 2c       	mov	r5, r2
   1af6c:	58 18       	sub	r5, r8
   1af6e:	82 14       	cp	r8, r2
   1af70:	08 f4       	brcc	.+2      	; 0x1af74 <vfprintf+0x3d6>
   1af72:	59 cf       	rjmp	.-334    	; 0x1ae26 <vfprintf+0x288>
   1af74:	f8 cf       	rjmp	.-16     	; 0x1af66 <vfprintf+0x3c8>
   1af76:	84 2d       	mov	r24, r4
   1af78:	86 78       	andi	r24, 0x86	; 134
   1af7a:	09 f4       	brne	.+2      	; 0x1af7e <vfprintf+0x3e0>
   1af7c:	66 cf       	rjmp	.-308    	; 0x1ae4a <vfprintf+0x2ac>
   1af7e:	8b e2       	ldi	r24, 0x2B	; 43
   1af80:	41 fe       	sbrs	r4, 1
   1af82:	80 e2       	ldi	r24, 0x20	; 32
   1af84:	47 fc       	sbrc	r4, 7
   1af86:	8d e2       	ldi	r24, 0x2D	; 45
   1af88:	b7 01       	movw	r22, r14
   1af8a:	90 e0       	ldi	r25, 0x00	; 0
   1af8c:	5c cf       	rjmp	.-328    	; 0x1ae46 <vfprintf+0x2a8>
   1af8e:	b7 01       	movw	r22, r14
   1af90:	80 e3       	ldi	r24, 0x30	; 48
   1af92:	90 e0       	ldi	r25, 0x00	; 0
   1af94:	0e 94 09 dd 	call	0x1ba12	; 0x1ba12 <fputc>
   1af98:	9a 94       	dec	r9
   1af9a:	57 cf       	rjmp	.-338    	; 0x1ae4a <vfprintf+0x2ac>
   1af9c:	8f ef       	ldi	r24, 0xFF	; 255
   1af9e:	9f ef       	ldi	r25, 0xFF	; 255
   1afa0:	84 cf       	rjmp	.-248    	; 0x1aeaa <vfprintf+0x30c>

0001afa2 <calloc>:
calloc():
   1afa2:	0f 93       	push	r16
   1afa4:	1f 93       	push	r17
   1afa6:	cf 93       	push	r28
   1afa8:	df 93       	push	r29
   1afaa:	86 9f       	mul	r24, r22
   1afac:	80 01       	movw	r16, r0
   1afae:	87 9f       	mul	r24, r23
   1afb0:	10 0d       	add	r17, r0
   1afb2:	96 9f       	mul	r25, r22
   1afb4:	10 0d       	add	r17, r0
   1afb6:	11 24       	eor	r1, r1
   1afb8:	c8 01       	movw	r24, r16
   1afba:	0e 94 66 d9 	call	0x1b2cc	; 0x1b2cc <malloc>
   1afbe:	ec 01       	movw	r28, r24
   1afc0:	00 97       	sbiw	r24, 0x00	; 0
   1afc2:	29 f0       	breq	.+10     	; 0x1afce <calloc+0x2c>
   1afc4:	a8 01       	movw	r20, r16
   1afc6:	70 e0       	ldi	r23, 0x00	; 0
   1afc8:	60 e0       	ldi	r22, 0x00	; 0
   1afca:	0e 94 e7 dc 	call	0x1b9ce	; 0x1b9ce <memset>
   1afce:	ce 01       	movw	r24, r28
   1afd0:	df 91       	pop	r29
   1afd2:	cf 91       	pop	r28
   1afd4:	1f 91       	pop	r17
   1afd6:	0f 91       	pop	r16
   1afd8:	08 95       	ret

0001afda <dtoa_prf>:
dtoa_prf():
   1afda:	8f 92       	push	r8
   1afdc:	9f 92       	push	r9
   1afde:	af 92       	push	r10
   1afe0:	bf 92       	push	r11
   1afe2:	cf 92       	push	r12
   1afe4:	df 92       	push	r13
   1afe6:	ef 92       	push	r14
   1afe8:	ff 92       	push	r15
   1afea:	0f 93       	push	r16
   1afec:	1f 93       	push	r17
   1afee:	cf 93       	push	r28
   1aff0:	df 93       	push	r29
   1aff2:	00 d0       	rcall	.+0      	; 0x1aff4 <dtoa_prf+0x1a>
   1aff4:	00 d0       	rcall	.+0      	; 0x1aff6 <dtoa_prf+0x1c>
   1aff6:	00 d0       	rcall	.+0      	; 0x1aff8 <dtoa_prf+0x1e>
   1aff8:	cd b7       	in	r28, 0x3d	; 61
   1affa:	de b7       	in	r29, 0x3e	; 62
   1affc:	6a 01       	movw	r12, r20
   1affe:	f2 2e       	mov	r15, r18
   1b000:	b0 2e       	mov	r11, r16
   1b002:	10 2f       	mov	r17, r16
   1b004:	fb e3       	ldi	r31, 0x3B	; 59
   1b006:	af 2e       	mov	r10, r31
   1b008:	a0 16       	cp	r10, r16
   1b00a:	08 f4       	brcc	.+2      	; 0x1b00e <dtoa_prf+0x34>
   1b00c:	1b e3       	ldi	r17, 0x3B	; 59
   1b00e:	1f 5f       	subi	r17, 0xFF	; 255
   1b010:	01 2f       	mov	r16, r17
   1b012:	27 e0       	ldi	r18, 0x07	; 7
   1b014:	ae 01       	movw	r20, r28
   1b016:	4f 5f       	subi	r20, 0xFF	; 255
   1b018:	5f 4f       	sbci	r21, 0xFF	; 255
   1b01a:	0e 94 e9 db 	call	0x1b7d2	; 0x1b7d2 <__ftoa_engine>
   1b01e:	bc 01       	movw	r22, r24
   1b020:	89 81       	ldd	r24, Y+1	; 0x01
   1b022:	98 2f       	mov	r25, r24
   1b024:	99 70       	andi	r25, 0x09	; 9
   1b026:	91 30       	cpi	r25, 0x01	; 1
   1b028:	09 f4       	brne	.+2      	; 0x1b02c <dtoa_prf+0x52>
   1b02a:	4e c0       	rjmp	.+156    	; 0x1b0c8 <dtoa_prf+0xee>
   1b02c:	9b e2       	ldi	r25, 0x2B	; 43
   1b02e:	e1 fc       	sbrc	r14, 1
   1b030:	04 c0       	rjmp	.+8      	; 0x1b03a <dtoa_prf+0x60>
   1b032:	9e 2d       	mov	r25, r14
   1b034:	91 70       	andi	r25, 0x01	; 1
   1b036:	e0 fc       	sbrc	r14, 0
   1b038:	49 c0       	rjmp	.+146    	; 0x1b0cc <dtoa_prf+0xf2>
   1b03a:	5e 2d       	mov	r21, r14
   1b03c:	50 71       	andi	r21, 0x10	; 16
   1b03e:	e8 2f       	mov	r30, r24
   1b040:	e8 70       	andi	r30, 0x08	; 8
   1b042:	83 ff       	sbrs	r24, 3
   1b044:	55 c0       	rjmp	.+170    	; 0x1b0f0 <dtoa_prf+0x116>
   1b046:	84 e0       	ldi	r24, 0x04	; 4
   1b048:	91 11       	cpse	r25, r1
   1b04a:	01 c0       	rjmp	.+2      	; 0x1b04e <dtoa_prf+0x74>
   1b04c:	83 e0       	ldi	r24, 0x03	; 3
   1b04e:	ef 2d       	mov	r30, r15
   1b050:	e8 1b       	sub	r30, r24
   1b052:	8f 15       	cp	r24, r15
   1b054:	08 f0       	brcs	.+2      	; 0x1b058 <dtoa_prf+0x7e>
   1b056:	e0 e0       	ldi	r30, 0x00	; 0
   1b058:	d6 01       	movw	r26, r12
   1b05a:	8e 2f       	mov	r24, r30
   1b05c:	20 e2       	ldi	r18, 0x20	; 32
   1b05e:	55 23       	and	r21, r21
   1b060:	c9 f1       	breq	.+114    	; 0x1b0d4 <dtoa_prf+0xfa>
   1b062:	99 23       	and	r25, r25
   1b064:	29 f0       	breq	.+10     	; 0x1b070 <dtoa_prf+0x96>
   1b066:	d6 01       	movw	r26, r12
   1b068:	9c 93       	st	X, r25
   1b06a:	c6 01       	movw	r24, r12
   1b06c:	01 96       	adiw	r24, 0x01	; 1
   1b06e:	6c 01       	movw	r12, r24
   1b070:	96 01       	movw	r18, r12
   1b072:	2d 5f       	subi	r18, 0xFD	; 253
   1b074:	3f 4f       	sbci	r19, 0xFF	; 255
   1b076:	e2 fe       	sbrs	r14, 2
   1b078:	33 c0       	rjmp	.+102    	; 0x1b0e0 <dtoa_prf+0x106>
   1b07a:	8e e4       	ldi	r24, 0x4E	; 78
   1b07c:	d6 01       	movw	r26, r12
   1b07e:	8c 93       	st	X, r24
   1b080:	91 e4       	ldi	r25, 0x41	; 65
   1b082:	11 96       	adiw	r26, 0x01	; 1
   1b084:	9c 93       	st	X, r25
   1b086:	11 97       	sbiw	r26, 0x01	; 1
   1b088:	12 96       	adiw	r26, 0x02	; 2
   1b08a:	8c 93       	st	X, r24
   1b08c:	d9 01       	movw	r26, r18
   1b08e:	8e 2f       	mov	r24, r30
   1b090:	90 e2       	ldi	r25, 0x20	; 32
   1b092:	81 11       	cpse	r24, r1
   1b094:	2a c0       	rjmp	.+84     	; 0x1b0ea <dtoa_prf+0x110>
   1b096:	e2 0f       	add	r30, r18
   1b098:	f3 2f       	mov	r31, r19
   1b09a:	f1 1d       	adc	r31, r1
   1b09c:	10 82       	st	Z, r1
   1b09e:	8e ef       	ldi	r24, 0xFE	; 254
   1b0a0:	9f ef       	ldi	r25, 0xFF	; 255
   1b0a2:	29 96       	adiw	r28, 0x09	; 9
   1b0a4:	0f b6       	in	r0, 0x3f	; 63
   1b0a6:	f8 94       	cli
   1b0a8:	de bf       	out	0x3e, r29	; 62
   1b0aa:	0f be       	out	0x3f, r0	; 63
   1b0ac:	cd bf       	out	0x3d, r28	; 61
   1b0ae:	df 91       	pop	r29
   1b0b0:	cf 91       	pop	r28
   1b0b2:	1f 91       	pop	r17
   1b0b4:	0f 91       	pop	r16
   1b0b6:	ff 90       	pop	r15
   1b0b8:	ef 90       	pop	r14
   1b0ba:	df 90       	pop	r13
   1b0bc:	cf 90       	pop	r12
   1b0be:	bf 90       	pop	r11
   1b0c0:	af 90       	pop	r10
   1b0c2:	9f 90       	pop	r9
   1b0c4:	8f 90       	pop	r8
   1b0c6:	08 95       	ret
   1b0c8:	9d e2       	ldi	r25, 0x2D	; 45
   1b0ca:	b7 cf       	rjmp	.-146    	; 0x1b03a <dtoa_prf+0x60>
   1b0cc:	90 e2       	ldi	r25, 0x20	; 32
   1b0ce:	b5 cf       	rjmp	.-150    	; 0x1b03a <dtoa_prf+0x60>
   1b0d0:	2d 93       	st	X+, r18
   1b0d2:	81 50       	subi	r24, 0x01	; 1
   1b0d4:	81 11       	cpse	r24, r1
   1b0d6:	fc cf       	rjmp	.-8      	; 0x1b0d0 <dtoa_prf+0xf6>
   1b0d8:	ce 0e       	add	r12, r30
   1b0da:	d1 1c       	adc	r13, r1
   1b0dc:	e0 e0       	ldi	r30, 0x00	; 0
   1b0de:	c1 cf       	rjmp	.-126    	; 0x1b062 <dtoa_prf+0x88>
   1b0e0:	8e e6       	ldi	r24, 0x6E	; 110
   1b0e2:	d6 01       	movw	r26, r12
   1b0e4:	8c 93       	st	X, r24
   1b0e6:	91 e6       	ldi	r25, 0x61	; 97
   1b0e8:	cc cf       	rjmp	.-104    	; 0x1b082 <dtoa_prf+0xa8>
   1b0ea:	9d 93       	st	X+, r25
   1b0ec:	81 50       	subi	r24, 0x01	; 1
   1b0ee:	d1 cf       	rjmp	.-94     	; 0x1b092 <dtoa_prf+0xb8>
   1b0f0:	48 2f       	mov	r20, r24
   1b0f2:	44 70       	andi	r20, 0x04	; 4
   1b0f4:	82 ff       	sbrs	r24, 2
   1b0f6:	3d c0       	rjmp	.+122    	; 0x1b172 <dtoa_prf+0x198>
   1b0f8:	84 e0       	ldi	r24, 0x04	; 4
   1b0fa:	91 11       	cpse	r25, r1
   1b0fc:	01 c0       	rjmp	.+2      	; 0x1b100 <dtoa_prf+0x126>
   1b0fe:	83 e0       	ldi	r24, 0x03	; 3
   1b100:	8f 15       	cp	r24, r15
   1b102:	10 f4       	brcc	.+4      	; 0x1b108 <dtoa_prf+0x12e>
   1b104:	ef 2d       	mov	r30, r15
   1b106:	e8 1b       	sub	r30, r24
   1b108:	d6 01       	movw	r26, r12
   1b10a:	8e 2f       	mov	r24, r30
   1b10c:	20 e2       	ldi	r18, 0x20	; 32
   1b10e:	55 23       	and	r21, r21
   1b110:	09 f1       	breq	.+66     	; 0x1b154 <dtoa_prf+0x17a>
   1b112:	99 23       	and	r25, r25
   1b114:	29 f0       	breq	.+10     	; 0x1b120 <dtoa_prf+0x146>
   1b116:	d6 01       	movw	r26, r12
   1b118:	9c 93       	st	X, r25
   1b11a:	c6 01       	movw	r24, r12
   1b11c:	01 96       	adiw	r24, 0x01	; 1
   1b11e:	6c 01       	movw	r12, r24
   1b120:	96 01       	movw	r18, r12
   1b122:	2d 5f       	subi	r18, 0xFD	; 253
   1b124:	3f 4f       	sbci	r19, 0xFF	; 255
   1b126:	e2 fe       	sbrs	r14, 2
   1b128:	1b c0       	rjmp	.+54     	; 0x1b160 <dtoa_prf+0x186>
   1b12a:	89 e4       	ldi	r24, 0x49	; 73
   1b12c:	d6 01       	movw	r26, r12
   1b12e:	8c 93       	st	X, r24
   1b130:	8e e4       	ldi	r24, 0x4E	; 78
   1b132:	11 96       	adiw	r26, 0x01	; 1
   1b134:	8c 93       	st	X, r24
   1b136:	11 97       	sbiw	r26, 0x01	; 1
   1b138:	86 e4       	ldi	r24, 0x46	; 70
   1b13a:	12 96       	adiw	r26, 0x02	; 2
   1b13c:	8c 93       	st	X, r24
   1b13e:	d9 01       	movw	r26, r18
   1b140:	8e 2f       	mov	r24, r30
   1b142:	90 e2       	ldi	r25, 0x20	; 32
   1b144:	88 23       	and	r24, r24
   1b146:	09 f4       	brne	.+2      	; 0x1b14a <dtoa_prf+0x170>
   1b148:	a6 cf       	rjmp	.-180    	; 0x1b096 <dtoa_prf+0xbc>
   1b14a:	9d 93       	st	X+, r25
   1b14c:	81 50       	subi	r24, 0x01	; 1
   1b14e:	fa cf       	rjmp	.-12     	; 0x1b144 <dtoa_prf+0x16a>
   1b150:	2d 93       	st	X+, r18
   1b152:	81 50       	subi	r24, 0x01	; 1
   1b154:	81 11       	cpse	r24, r1
   1b156:	fc cf       	rjmp	.-8      	; 0x1b150 <dtoa_prf+0x176>
   1b158:	ce 0e       	add	r12, r30
   1b15a:	d1 1c       	adc	r13, r1
   1b15c:	e0 e0       	ldi	r30, 0x00	; 0
   1b15e:	d9 cf       	rjmp	.-78     	; 0x1b112 <dtoa_prf+0x138>
   1b160:	89 e6       	ldi	r24, 0x69	; 105
   1b162:	d6 01       	movw	r26, r12
   1b164:	8c 93       	st	X, r24
   1b166:	8e e6       	ldi	r24, 0x6E	; 110
   1b168:	11 96       	adiw	r26, 0x01	; 1
   1b16a:	8c 93       	st	X, r24
   1b16c:	11 97       	sbiw	r26, 0x01	; 1
   1b16e:	86 e6       	ldi	r24, 0x66	; 102
   1b170:	e4 cf       	rjmp	.-56     	; 0x1b13a <dtoa_prf+0x160>
   1b172:	9b 01       	movw	r18, r22
   1b174:	77 ff       	sbrs	r23, 7
   1b176:	02 c0       	rjmp	.+4      	; 0x1b17c <dtoa_prf+0x1a2>
   1b178:	30 e0       	ldi	r19, 0x00	; 0
   1b17a:	20 e0       	ldi	r18, 0x00	; 0
   1b17c:	a1 e0       	ldi	r26, 0x01	; 1
   1b17e:	b0 e0       	ldi	r27, 0x00	; 0
   1b180:	91 11       	cpse	r25, r1
   1b182:	02 c0       	rjmp	.+4      	; 0x1b188 <dtoa_prf+0x1ae>
   1b184:	b0 e0       	ldi	r27, 0x00	; 0
   1b186:	a0 e0       	ldi	r26, 0x00	; 0
   1b188:	f9 01       	movw	r30, r18
   1b18a:	31 96       	adiw	r30, 0x01	; 1
   1b18c:	ae 0f       	add	r26, r30
   1b18e:	bf 1f       	adc	r27, r31
   1b190:	8b 2c       	mov	r8, r11
   1b192:	91 2c       	mov	r9, r1
   1b194:	bb 20       	and	r11, r11
   1b196:	09 f4       	brne	.+2      	; 0x1b19a <dtoa_prf+0x1c0>
   1b198:	61 c0       	rjmp	.+194    	; 0x1b25c <dtoa_prf+0x282>
   1b19a:	54 01       	movw	r10, r8
   1b19c:	ef ef       	ldi	r30, 0xFF	; 255
   1b19e:	ae 1a       	sub	r10, r30
   1b1a0:	be 0a       	sbc	r11, r30
   1b1a2:	aa 0d       	add	r26, r10
   1b1a4:	bb 1d       	adc	r27, r11
   1b1a6:	fa 16       	cp	r15, r26
   1b1a8:	1b 06       	cpc	r1, r27
   1b1aa:	19 f0       	breq	.+6      	; 0x1b1b2 <dtoa_prf+0x1d8>
   1b1ac:	14 f0       	brlt	.+4      	; 0x1b1b2 <dtoa_prf+0x1d8>
   1b1ae:	4f 2d       	mov	r20, r15
   1b1b0:	4a 1b       	sub	r20, r26
   1b1b2:	51 11       	cpse	r21, r1
   1b1b4:	88 c0       	rjmp	.+272    	; 0x1b2c6 <dtoa_prf+0x2ec>
   1b1b6:	e3 fc       	sbrc	r14, 3
   1b1b8:	59 c0       	rjmp	.+178    	; 0x1b26c <dtoa_prf+0x292>
   1b1ba:	76 01       	movw	r14, r12
   1b1bc:	a4 2f       	mov	r26, r20
   1b1be:	b0 e2       	ldi	r27, 0x20	; 32
   1b1c0:	a1 11       	cpse	r26, r1
   1b1c2:	4f c0       	rjmp	.+158    	; 0x1b262 <dtoa_prf+0x288>
   1b1c4:	c4 0e       	add	r12, r20
   1b1c6:	d1 1c       	adc	r13, r1
   1b1c8:	99 23       	and	r25, r25
   1b1ca:	09 f4       	brne	.+2      	; 0x1b1ce <dtoa_prf+0x1f4>
   1b1cc:	5b c0       	rjmp	.+182    	; 0x1b284 <dtoa_prf+0x2aa>
   1b1ce:	40 e0       	ldi	r20, 0x00	; 0
   1b1d0:	d6 01       	movw	r26, r12
   1b1d2:	11 96       	adiw	r26, 0x01	; 1
   1b1d4:	f6 01       	movw	r30, r12
   1b1d6:	90 83       	st	Z, r25
   1b1d8:	6d 01       	movw	r12, r26
   1b1da:	55 23       	and	r21, r21
   1b1dc:	09 f4       	brne	.+2      	; 0x1b1e0 <dtoa_prf+0x206>
   1b1de:	48 c0       	rjmp	.+144    	; 0x1b270 <dtoa_prf+0x296>
   1b1e0:	01 2f       	mov	r16, r17
   1b1e2:	06 0f       	add	r16, r22
   1b1e4:	9a 81       	ldd	r25, Y+2	; 0x02
   1b1e6:	58 2f       	mov	r21, r24
   1b1e8:	50 71       	andi	r21, 0x10	; 16
   1b1ea:	84 ff       	sbrs	r24, 4
   1b1ec:	03 c0       	rjmp	.+6      	; 0x1b1f4 <dtoa_prf+0x21a>
   1b1ee:	91 33       	cpi	r25, 0x31	; 49
   1b1f0:	09 f4       	brne	.+2      	; 0x1b1f4 <dtoa_prf+0x21a>
   1b1f2:	01 50       	subi	r16, 0x01	; 1
   1b1f4:	10 16       	cp	r1, r16
   1b1f6:	0c f0       	brlt	.+2      	; 0x1b1fa <dtoa_prf+0x220>
   1b1f8:	47 c0       	rjmp	.+142    	; 0x1b288 <dtoa_prf+0x2ae>
   1b1fa:	09 30       	cpi	r16, 0x09	; 9
   1b1fc:	08 f0       	brcs	.+2      	; 0x1b200 <dtoa_prf+0x226>
   1b1fe:	08 e0       	ldi	r16, 0x08	; 8
   1b200:	ee e2       	ldi	r30, 0x2E	; 46
   1b202:	fe 2e       	mov	r15, r30
   1b204:	5b 01       	movw	r10, r22
   1b206:	a0 1a       	sub	r10, r16
   1b208:	b1 08       	sbc	r11, r1
   1b20a:	85 01       	movw	r16, r10
   1b20c:	91 94       	neg	r9
   1b20e:	81 94       	neg	r8
   1b210:	91 08       	sbc	r9, r1
   1b212:	2f 3f       	cpi	r18, 0xFF	; 255
   1b214:	32 07       	cpc	r19, r18
   1b216:	29 f4       	brne	.+10     	; 0x1b222 <dtoa_prf+0x248>
   1b218:	d6 01       	movw	r26, r12
   1b21a:	fc 92       	st	X, r15
   1b21c:	f6 01       	movw	r30, r12
   1b21e:	31 96       	adiw	r30, 0x01	; 1
   1b220:	6f 01       	movw	r12, r30
   1b222:	62 17       	cp	r22, r18
   1b224:	73 07       	cpc	r23, r19
   1b226:	94 f1       	brlt	.+100    	; 0x1b28c <dtoa_prf+0x2b2>
   1b228:	02 17       	cp	r16, r18
   1b22a:	13 07       	cpc	r17, r19
   1b22c:	7c f5       	brge	.+94     	; 0x1b28c <dtoa_prf+0x2b2>
   1b22e:	db 01       	movw	r26, r22
   1b230:	a2 1b       	sub	r26, r18
   1b232:	b3 0b       	sbc	r27, r19
   1b234:	aa 24       	eor	r10, r10
   1b236:	a3 94       	inc	r10
   1b238:	b1 2c       	mov	r11, r1
   1b23a:	ac 0e       	add	r10, r28
   1b23c:	bd 1e       	adc	r11, r29
   1b23e:	aa 0d       	add	r26, r10
   1b240:	bb 1d       	adc	r27, r11
   1b242:	11 96       	adiw	r26, 0x01	; 1
   1b244:	8c 91       	ld	r24, X
   1b246:	21 50       	subi	r18, 0x01	; 1
   1b248:	31 09       	sbc	r19, r1
   1b24a:	d6 01       	movw	r26, r12
   1b24c:	11 96       	adiw	r26, 0x01	; 1
   1b24e:	28 15       	cp	r18, r8
   1b250:	39 05       	cpc	r19, r9
   1b252:	f4 f0       	brlt	.+60     	; 0x1b290 <dtoa_prf+0x2b6>
   1b254:	f6 01       	movw	r30, r12
   1b256:	80 83       	st	Z, r24
   1b258:	6d 01       	movw	r12, r26
   1b25a:	db cf       	rjmp	.-74     	; 0x1b212 <dtoa_prf+0x238>
   1b25c:	b1 2c       	mov	r11, r1
   1b25e:	a1 2c       	mov	r10, r1
   1b260:	a0 cf       	rjmp	.-192    	; 0x1b1a2 <dtoa_prf+0x1c8>
   1b262:	f7 01       	movw	r30, r14
   1b264:	b1 93       	st	Z+, r27
   1b266:	7f 01       	movw	r14, r30
   1b268:	a1 50       	subi	r26, 0x01	; 1
   1b26a:	aa cf       	rjmp	.-172    	; 0x1b1c0 <dtoa_prf+0x1e6>
   1b26c:	91 11       	cpse	r25, r1
   1b26e:	b0 cf       	rjmp	.-160    	; 0x1b1d0 <dtoa_prf+0x1f6>
   1b270:	d6 01       	movw	r26, r12
   1b272:	94 2f       	mov	r25, r20
   1b274:	50 e3       	ldi	r21, 0x30	; 48
   1b276:	02 c0       	rjmp	.+4      	; 0x1b27c <dtoa_prf+0x2a2>
   1b278:	5d 93       	st	X+, r21
   1b27a:	91 50       	subi	r25, 0x01	; 1
   1b27c:	91 11       	cpse	r25, r1
   1b27e:	fc cf       	rjmp	.-8      	; 0x1b278 <dtoa_prf+0x29e>
   1b280:	c4 0e       	add	r12, r20
   1b282:	d1 1c       	adc	r13, r1
   1b284:	40 e0       	ldi	r20, 0x00	; 0
   1b286:	ac cf       	rjmp	.-168    	; 0x1b1e0 <dtoa_prf+0x206>
   1b288:	01 e0       	ldi	r16, 0x01	; 1
   1b28a:	ba cf       	rjmp	.-140    	; 0x1b200 <dtoa_prf+0x226>
   1b28c:	80 e3       	ldi	r24, 0x30	; 48
   1b28e:	db cf       	rjmp	.-74     	; 0x1b246 <dtoa_prf+0x26c>
   1b290:	62 17       	cp	r22, r18
   1b292:	73 07       	cpc	r23, r19
   1b294:	31 f4       	brne	.+12     	; 0x1b2a2 <dtoa_prf+0x2c8>
   1b296:	96 33       	cpi	r25, 0x36	; 54
   1b298:	88 f4       	brcc	.+34     	; 0x1b2bc <dtoa_prf+0x2e2>
   1b29a:	95 33       	cpi	r25, 0x35	; 53
   1b29c:	11 f4       	brne	.+4      	; 0x1b2a2 <dtoa_prf+0x2c8>
   1b29e:	55 23       	and	r21, r21
   1b2a0:	69 f0       	breq	.+26     	; 0x1b2bc <dtoa_prf+0x2e2>
   1b2a2:	f6 01       	movw	r30, r12
   1b2a4:	80 83       	st	Z, r24
   1b2a6:	fd 01       	movw	r30, r26
   1b2a8:	84 2f       	mov	r24, r20
   1b2aa:	90 e2       	ldi	r25, 0x20	; 32
   1b2ac:	81 11       	cpse	r24, r1
   1b2ae:	08 c0       	rjmp	.+16     	; 0x1b2c0 <dtoa_prf+0x2e6>
   1b2b0:	a4 0f       	add	r26, r20
   1b2b2:	b1 1d       	adc	r27, r1
   1b2b4:	1c 92       	st	X, r1
   1b2b6:	90 e0       	ldi	r25, 0x00	; 0
   1b2b8:	80 e0       	ldi	r24, 0x00	; 0
   1b2ba:	f3 ce       	rjmp	.-538    	; 0x1b0a2 <dtoa_prf+0xc8>
   1b2bc:	81 e3       	ldi	r24, 0x31	; 49
   1b2be:	f1 cf       	rjmp	.-30     	; 0x1b2a2 <dtoa_prf+0x2c8>
   1b2c0:	91 93       	st	Z+, r25
   1b2c2:	81 50       	subi	r24, 0x01	; 1
   1b2c4:	f3 cf       	rjmp	.-26     	; 0x1b2ac <dtoa_prf+0x2d2>
   1b2c6:	91 11       	cpse	r25, r1
   1b2c8:	83 cf       	rjmp	.-250    	; 0x1b1d0 <dtoa_prf+0x1f6>
   1b2ca:	8a cf       	rjmp	.-236    	; 0x1b1e0 <dtoa_prf+0x206>

0001b2cc <malloc>:
malloc():
   1b2cc:	0f 93       	push	r16
   1b2ce:	1f 93       	push	r17
   1b2d0:	cf 93       	push	r28
   1b2d2:	df 93       	push	r29
   1b2d4:	82 30       	cpi	r24, 0x02	; 2
   1b2d6:	91 05       	cpc	r25, r1
   1b2d8:	10 f4       	brcc	.+4      	; 0x1b2de <malloc+0x12>
   1b2da:	82 e0       	ldi	r24, 0x02	; 2
   1b2dc:	90 e0       	ldi	r25, 0x00	; 0
   1b2de:	e0 91 6d 14 	lds	r30, 0x146D	; 0x80146d <__flp>
   1b2e2:	f0 91 6e 14 	lds	r31, 0x146E	; 0x80146e <__flp+0x1>
   1b2e6:	30 e0       	ldi	r19, 0x00	; 0
   1b2e8:	20 e0       	ldi	r18, 0x00	; 0
   1b2ea:	b0 e0       	ldi	r27, 0x00	; 0
   1b2ec:	a0 e0       	ldi	r26, 0x00	; 0
   1b2ee:	30 97       	sbiw	r30, 0x00	; 0
   1b2f0:	99 f4       	brne	.+38     	; 0x1b318 <malloc+0x4c>
   1b2f2:	21 15       	cp	r18, r1
   1b2f4:	31 05       	cpc	r19, r1
   1b2f6:	09 f4       	brne	.+2      	; 0x1b2fa <malloc+0x2e>
   1b2f8:	4a c0       	rjmp	.+148    	; 0x1b38e <malloc+0xc2>
   1b2fa:	28 1b       	sub	r18, r24
   1b2fc:	39 0b       	sbc	r19, r25
   1b2fe:	24 30       	cpi	r18, 0x04	; 4
   1b300:	31 05       	cpc	r19, r1
   1b302:	d8 f5       	brcc	.+118    	; 0x1b37a <malloc+0xae>
   1b304:	8a 81       	ldd	r24, Y+2	; 0x02
   1b306:	9b 81       	ldd	r25, Y+3	; 0x03
   1b308:	61 15       	cp	r22, r1
   1b30a:	71 05       	cpc	r23, r1
   1b30c:	89 f1       	breq	.+98     	; 0x1b370 <malloc+0xa4>
   1b30e:	fb 01       	movw	r30, r22
   1b310:	93 83       	std	Z+3, r25	; 0x03
   1b312:	82 83       	std	Z+2, r24	; 0x02
   1b314:	fe 01       	movw	r30, r28
   1b316:	11 c0       	rjmp	.+34     	; 0x1b33a <malloc+0x6e>
   1b318:	40 81       	ld	r20, Z
   1b31a:	51 81       	ldd	r21, Z+1	; 0x01
   1b31c:	02 81       	ldd	r16, Z+2	; 0x02
   1b31e:	13 81       	ldd	r17, Z+3	; 0x03
   1b320:	48 17       	cp	r20, r24
   1b322:	59 07       	cpc	r21, r25
   1b324:	e0 f0       	brcs	.+56     	; 0x1b35e <malloc+0x92>
   1b326:	48 17       	cp	r20, r24
   1b328:	59 07       	cpc	r21, r25
   1b32a:	99 f4       	brne	.+38     	; 0x1b352 <malloc+0x86>
   1b32c:	10 97       	sbiw	r26, 0x00	; 0
   1b32e:	61 f0       	breq	.+24     	; 0x1b348 <malloc+0x7c>
   1b330:	12 96       	adiw	r26, 0x02	; 2
   1b332:	0c 93       	st	X, r16
   1b334:	12 97       	sbiw	r26, 0x02	; 2
   1b336:	13 96       	adiw	r26, 0x03	; 3
   1b338:	1c 93       	st	X, r17
   1b33a:	32 96       	adiw	r30, 0x02	; 2
   1b33c:	cf 01       	movw	r24, r30
   1b33e:	df 91       	pop	r29
   1b340:	cf 91       	pop	r28
   1b342:	1f 91       	pop	r17
   1b344:	0f 91       	pop	r16
   1b346:	08 95       	ret
   1b348:	00 93 6d 14 	sts	0x146D, r16	; 0x80146d <__flp>
   1b34c:	10 93 6e 14 	sts	0x146E, r17	; 0x80146e <__flp+0x1>
   1b350:	f4 cf       	rjmp	.-24     	; 0x1b33a <malloc+0x6e>
   1b352:	21 15       	cp	r18, r1
   1b354:	31 05       	cpc	r19, r1
   1b356:	51 f0       	breq	.+20     	; 0x1b36c <malloc+0xa0>
   1b358:	42 17       	cp	r20, r18
   1b35a:	53 07       	cpc	r21, r19
   1b35c:	38 f0       	brcs	.+14     	; 0x1b36c <malloc+0xa0>
   1b35e:	a9 01       	movw	r20, r18
   1b360:	db 01       	movw	r26, r22
   1b362:	9a 01       	movw	r18, r20
   1b364:	bd 01       	movw	r22, r26
   1b366:	df 01       	movw	r26, r30
   1b368:	f8 01       	movw	r30, r16
   1b36a:	c1 cf       	rjmp	.-126    	; 0x1b2ee <malloc+0x22>
   1b36c:	ef 01       	movw	r28, r30
   1b36e:	f9 cf       	rjmp	.-14     	; 0x1b362 <malloc+0x96>
   1b370:	90 93 6e 14 	sts	0x146E, r25	; 0x80146e <__flp+0x1>
   1b374:	80 93 6d 14 	sts	0x146D, r24	; 0x80146d <__flp>
   1b378:	cd cf       	rjmp	.-102    	; 0x1b314 <malloc+0x48>
   1b37a:	fe 01       	movw	r30, r28
   1b37c:	e2 0f       	add	r30, r18
   1b37e:	f3 1f       	adc	r31, r19
   1b380:	81 93       	st	Z+, r24
   1b382:	91 93       	st	Z+, r25
   1b384:	22 50       	subi	r18, 0x02	; 2
   1b386:	31 09       	sbc	r19, r1
   1b388:	39 83       	std	Y+1, r19	; 0x01
   1b38a:	28 83       	st	Y, r18
   1b38c:	d7 cf       	rjmp	.-82     	; 0x1b33c <malloc+0x70>
   1b38e:	20 91 6b 14 	lds	r18, 0x146B	; 0x80146b <__brkval>
   1b392:	30 91 6c 14 	lds	r19, 0x146C	; 0x80146c <__brkval+0x1>
   1b396:	23 2b       	or	r18, r19
   1b398:	41 f4       	brne	.+16     	; 0x1b3aa <malloc+0xde>
   1b39a:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__malloc_heap_start>
   1b39e:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__malloc_heap_start+0x1>
   1b3a2:	30 93 6c 14 	sts	0x146C, r19	; 0x80146c <__brkval+0x1>
   1b3a6:	20 93 6b 14 	sts	0x146B, r18	; 0x80146b <__brkval>
   1b3aa:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__malloc_heap_end>
   1b3ae:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__malloc_heap_end+0x1>
   1b3b2:	21 15       	cp	r18, r1
   1b3b4:	31 05       	cpc	r19, r1
   1b3b6:	41 f4       	brne	.+16     	; 0x1b3c8 <malloc+0xfc>
   1b3b8:	2d b7       	in	r18, 0x3d	; 61
   1b3ba:	3e b7       	in	r19, 0x3e	; 62
   1b3bc:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <__malloc_margin>
   1b3c0:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <__malloc_margin+0x1>
   1b3c4:	24 1b       	sub	r18, r20
   1b3c6:	35 0b       	sbc	r19, r21
   1b3c8:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <__brkval>
   1b3cc:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <__brkval+0x1>
   1b3d0:	e2 17       	cp	r30, r18
   1b3d2:	f3 07       	cpc	r31, r19
   1b3d4:	a0 f4       	brcc	.+40     	; 0x1b3fe <malloc+0x132>
   1b3d6:	2e 1b       	sub	r18, r30
   1b3d8:	3f 0b       	sbc	r19, r31
   1b3da:	28 17       	cp	r18, r24
   1b3dc:	39 07       	cpc	r19, r25
   1b3de:	78 f0       	brcs	.+30     	; 0x1b3fe <malloc+0x132>
   1b3e0:	ac 01       	movw	r20, r24
   1b3e2:	4e 5f       	subi	r20, 0xFE	; 254
   1b3e4:	5f 4f       	sbci	r21, 0xFF	; 255
   1b3e6:	24 17       	cp	r18, r20
   1b3e8:	35 07       	cpc	r19, r21
   1b3ea:	48 f0       	brcs	.+18     	; 0x1b3fe <malloc+0x132>
   1b3ec:	4e 0f       	add	r20, r30
   1b3ee:	5f 1f       	adc	r21, r31
   1b3f0:	50 93 6c 14 	sts	0x146C, r21	; 0x80146c <__brkval+0x1>
   1b3f4:	40 93 6b 14 	sts	0x146B, r20	; 0x80146b <__brkval>
   1b3f8:	81 93       	st	Z+, r24
   1b3fa:	91 93       	st	Z+, r25
   1b3fc:	9f cf       	rjmp	.-194    	; 0x1b33c <malloc+0x70>
   1b3fe:	f0 e0       	ldi	r31, 0x00	; 0
   1b400:	e0 e0       	ldi	r30, 0x00	; 0
   1b402:	9c cf       	rjmp	.-200    	; 0x1b33c <malloc+0x70>

0001b404 <free>:
free():
   1b404:	cf 93       	push	r28
   1b406:	df 93       	push	r29
   1b408:	00 97       	sbiw	r24, 0x00	; 0
   1b40a:	e9 f0       	breq	.+58     	; 0x1b446 <free+0x42>
   1b40c:	fc 01       	movw	r30, r24
   1b40e:	32 97       	sbiw	r30, 0x02	; 2
   1b410:	13 82       	std	Z+3, r1	; 0x03
   1b412:	12 82       	std	Z+2, r1	; 0x02
   1b414:	a0 91 6d 14 	lds	r26, 0x146D	; 0x80146d <__flp>
   1b418:	b0 91 6e 14 	lds	r27, 0x146E	; 0x80146e <__flp+0x1>
   1b41c:	ed 01       	movw	r28, r26
   1b41e:	30 e0       	ldi	r19, 0x00	; 0
   1b420:	20 e0       	ldi	r18, 0x00	; 0
   1b422:	10 97       	sbiw	r26, 0x00	; 0
   1b424:	a1 f4       	brne	.+40     	; 0x1b44e <free+0x4a>
   1b426:	20 81       	ld	r18, Z
   1b428:	31 81       	ldd	r19, Z+1	; 0x01
   1b42a:	82 0f       	add	r24, r18
   1b42c:	93 1f       	adc	r25, r19
   1b42e:	20 91 6b 14 	lds	r18, 0x146B	; 0x80146b <__brkval>
   1b432:	30 91 6c 14 	lds	r19, 0x146C	; 0x80146c <__brkval+0x1>
   1b436:	28 17       	cp	r18, r24
   1b438:	39 07       	cpc	r19, r25
   1b43a:	09 f0       	breq	.+2      	; 0x1b43e <free+0x3a>
   1b43c:	61 c0       	rjmp	.+194    	; 0x1b500 <free+0xfc>
   1b43e:	f0 93 6c 14 	sts	0x146C, r31	; 0x80146c <__brkval+0x1>
   1b442:	e0 93 6b 14 	sts	0x146B, r30	; 0x80146b <__brkval>
   1b446:	df 91       	pop	r29
   1b448:	cf 91       	pop	r28
   1b44a:	08 95       	ret
   1b44c:	ea 01       	movw	r28, r20
   1b44e:	ce 17       	cp	r28, r30
   1b450:	df 07       	cpc	r29, r31
   1b452:	e8 f5       	brcc	.+122    	; 0x1b4ce <free+0xca>
   1b454:	4a 81       	ldd	r20, Y+2	; 0x02
   1b456:	5b 81       	ldd	r21, Y+3	; 0x03
   1b458:	9e 01       	movw	r18, r28
   1b45a:	41 15       	cp	r20, r1
   1b45c:	51 05       	cpc	r21, r1
   1b45e:	b1 f7       	brne	.-20     	; 0x1b44c <free+0x48>
   1b460:	e9 01       	movw	r28, r18
   1b462:	fb 83       	std	Y+3, r31	; 0x03
   1b464:	ea 83       	std	Y+2, r30	; 0x02
   1b466:	49 91       	ld	r20, Y+
   1b468:	59 91       	ld	r21, Y+
   1b46a:	c4 0f       	add	r28, r20
   1b46c:	d5 1f       	adc	r29, r21
   1b46e:	ec 17       	cp	r30, r28
   1b470:	fd 07       	cpc	r31, r29
   1b472:	61 f4       	brne	.+24     	; 0x1b48c <free+0x88>
   1b474:	80 81       	ld	r24, Z
   1b476:	91 81       	ldd	r25, Z+1	; 0x01
   1b478:	02 96       	adiw	r24, 0x02	; 2
   1b47a:	84 0f       	add	r24, r20
   1b47c:	95 1f       	adc	r25, r21
   1b47e:	e9 01       	movw	r28, r18
   1b480:	99 83       	std	Y+1, r25	; 0x01
   1b482:	88 83       	st	Y, r24
   1b484:	82 81       	ldd	r24, Z+2	; 0x02
   1b486:	93 81       	ldd	r25, Z+3	; 0x03
   1b488:	9b 83       	std	Y+3, r25	; 0x03
   1b48a:	8a 83       	std	Y+2, r24	; 0x02
   1b48c:	f0 e0       	ldi	r31, 0x00	; 0
   1b48e:	e0 e0       	ldi	r30, 0x00	; 0
   1b490:	12 96       	adiw	r26, 0x02	; 2
   1b492:	8d 91       	ld	r24, X+
   1b494:	9c 91       	ld	r25, X
   1b496:	13 97       	sbiw	r26, 0x03	; 3
   1b498:	00 97       	sbiw	r24, 0x00	; 0
   1b49a:	b9 f5       	brne	.+110    	; 0x1b50a <free+0x106>
   1b49c:	2d 91       	ld	r18, X+
   1b49e:	3c 91       	ld	r19, X
   1b4a0:	11 97       	sbiw	r26, 0x01	; 1
   1b4a2:	cd 01       	movw	r24, r26
   1b4a4:	02 96       	adiw	r24, 0x02	; 2
   1b4a6:	82 0f       	add	r24, r18
   1b4a8:	93 1f       	adc	r25, r19
   1b4aa:	20 91 6b 14 	lds	r18, 0x146B	; 0x80146b <__brkval>
   1b4ae:	30 91 6c 14 	lds	r19, 0x146C	; 0x80146c <__brkval+0x1>
   1b4b2:	28 17       	cp	r18, r24
   1b4b4:	39 07       	cpc	r19, r25
   1b4b6:	39 f6       	brne	.-114    	; 0x1b446 <free+0x42>
   1b4b8:	30 97       	sbiw	r30, 0x00	; 0
   1b4ba:	51 f5       	brne	.+84     	; 0x1b510 <free+0x10c>
   1b4bc:	10 92 6e 14 	sts	0x146E, r1	; 0x80146e <__flp+0x1>
   1b4c0:	10 92 6d 14 	sts	0x146D, r1	; 0x80146d <__flp>
   1b4c4:	b0 93 6c 14 	sts	0x146C, r27	; 0x80146c <__brkval+0x1>
   1b4c8:	a0 93 6b 14 	sts	0x146B, r26	; 0x80146b <__brkval>
   1b4cc:	bc cf       	rjmp	.-136    	; 0x1b446 <free+0x42>
   1b4ce:	d3 83       	std	Z+3, r29	; 0x03
   1b4d0:	c2 83       	std	Z+2, r28	; 0x02
   1b4d2:	40 81       	ld	r20, Z
   1b4d4:	51 81       	ldd	r21, Z+1	; 0x01
   1b4d6:	84 0f       	add	r24, r20
   1b4d8:	95 1f       	adc	r25, r21
   1b4da:	c8 17       	cp	r28, r24
   1b4dc:	d9 07       	cpc	r29, r25
   1b4de:	61 f4       	brne	.+24     	; 0x1b4f8 <free+0xf4>
   1b4e0:	4e 5f       	subi	r20, 0xFE	; 254
   1b4e2:	5f 4f       	sbci	r21, 0xFF	; 255
   1b4e4:	88 81       	ld	r24, Y
   1b4e6:	99 81       	ldd	r25, Y+1	; 0x01
   1b4e8:	48 0f       	add	r20, r24
   1b4ea:	59 1f       	adc	r21, r25
   1b4ec:	51 83       	std	Z+1, r21	; 0x01
   1b4ee:	40 83       	st	Z, r20
   1b4f0:	8a 81       	ldd	r24, Y+2	; 0x02
   1b4f2:	9b 81       	ldd	r25, Y+3	; 0x03
   1b4f4:	93 83       	std	Z+3, r25	; 0x03
   1b4f6:	82 83       	std	Z+2, r24	; 0x02
   1b4f8:	21 15       	cp	r18, r1
   1b4fa:	31 05       	cpc	r19, r1
   1b4fc:	09 f0       	breq	.+2      	; 0x1b500 <free+0xfc>
   1b4fe:	b0 cf       	rjmp	.-160    	; 0x1b460 <free+0x5c>
   1b500:	f0 93 6e 14 	sts	0x146E, r31	; 0x80146e <__flp+0x1>
   1b504:	e0 93 6d 14 	sts	0x146D, r30	; 0x80146d <__flp>
   1b508:	9e cf       	rjmp	.-196    	; 0x1b446 <free+0x42>
   1b50a:	fd 01       	movw	r30, r26
   1b50c:	dc 01       	movw	r26, r24
   1b50e:	c0 cf       	rjmp	.-128    	; 0x1b490 <free+0x8c>
   1b510:	13 82       	std	Z+3, r1	; 0x03
   1b512:	12 82       	std	Z+2, r1	; 0x02
   1b514:	d7 cf       	rjmp	.-82     	; 0x1b4c4 <free+0xc0>

0001b516 <strtod>:
strtod():
   1b516:	8f 92       	push	r8
   1b518:	9f 92       	push	r9
   1b51a:	af 92       	push	r10
   1b51c:	bf 92       	push	r11
   1b51e:	cf 92       	push	r12
   1b520:	df 92       	push	r13
   1b522:	ef 92       	push	r14
   1b524:	ff 92       	push	r15
   1b526:	0f 93       	push	r16
   1b528:	1f 93       	push	r17
   1b52a:	cf 93       	push	r28
   1b52c:	df 93       	push	r29
   1b52e:	5c 01       	movw	r10, r24
   1b530:	7b 01       	movw	r14, r22
   1b532:	61 15       	cp	r22, r1
   1b534:	71 05       	cpc	r23, r1
   1b536:	19 f0       	breq	.+6      	; 0x1b53e <strtod+0x28>
   1b538:	db 01       	movw	r26, r22
   1b53a:	8d 93       	st	X+, r24
   1b53c:	9c 93       	st	X, r25
   1b53e:	85 01       	movw	r16, r10
   1b540:	0f 5f       	subi	r16, 0xFF	; 255
   1b542:	1f 4f       	sbci	r17, 0xFF	; 255
   1b544:	f5 01       	movw	r30, r10
   1b546:	d0 81       	ld	r29, Z
   1b548:	8d 2f       	mov	r24, r29
   1b54a:	90 e0       	ldi	r25, 0x00	; 0
   1b54c:	0e 94 df d4 	call	0x1a9be	; 0x1a9be <isspace>
   1b550:	6c 01       	movw	r12, r24
   1b552:	89 2b       	or	r24, r25
   1b554:	b9 f5       	brne	.+110    	; 0x1b5c4 <strtod+0xae>
   1b556:	dd 32       	cpi	r29, 0x2D	; 45
   1b558:	b9 f5       	brne	.+110    	; 0x1b5c8 <strtod+0xb2>
   1b55a:	0f 5f       	subi	r16, 0xFF	; 255
   1b55c:	1f 4f       	sbci	r17, 0xFF	; 255
   1b55e:	d5 01       	movw	r26, r10
   1b560:	11 96       	adiw	r26, 0x01	; 1
   1b562:	dc 91       	ld	r29, X
   1b564:	c1 e0       	ldi	r28, 0x01	; 1
   1b566:	58 01       	movw	r10, r16
   1b568:	f1 e0       	ldi	r31, 0x01	; 1
   1b56a:	af 1a       	sub	r10, r31
   1b56c:	b1 08       	sbc	r11, r1
   1b56e:	43 e0       	ldi	r20, 0x03	; 3
   1b570:	50 e0       	ldi	r21, 0x00	; 0
   1b572:	6c ea       	ldi	r22, 0xAC	; 172
   1b574:	73 e0       	ldi	r23, 0x03	; 3
   1b576:	c5 01       	movw	r24, r10
   1b578:	0e 94 c4 dc 	call	0x1b988	; 0x1b988 <strncasecmp_P>
   1b57c:	89 2b       	or	r24, r25
   1b57e:	69 f5       	brne	.+90     	; 0x1b5da <strtod+0xc4>
   1b580:	68 01       	movw	r12, r16
   1b582:	82 e0       	ldi	r24, 0x02	; 2
   1b584:	c8 0e       	add	r12, r24
   1b586:	d1 1c       	adc	r13, r1
   1b588:	45 e0       	ldi	r20, 0x05	; 5
   1b58a:	50 e0       	ldi	r21, 0x00	; 0
   1b58c:	67 ea       	ldi	r22, 0xA7	; 167
   1b58e:	73 e0       	ldi	r23, 0x03	; 3
   1b590:	c6 01       	movw	r24, r12
   1b592:	0e 94 c4 dc 	call	0x1b988	; 0x1b988 <strncasecmp_P>
   1b596:	89 2b       	or	r24, r25
   1b598:	21 f4       	brne	.+8      	; 0x1b5a2 <strtod+0x8c>
   1b59a:	68 01       	movw	r12, r16
   1b59c:	97 e0       	ldi	r25, 0x07	; 7
   1b59e:	c9 0e       	add	r12, r25
   1b5a0:	d1 1c       	adc	r13, r1
   1b5a2:	e1 14       	cp	r14, r1
   1b5a4:	f1 04       	cpc	r15, r1
   1b5a6:	19 f0       	breq	.+6      	; 0x1b5ae <strtod+0x98>
   1b5a8:	d7 01       	movw	r26, r14
   1b5aa:	cd 92       	st	X+, r12
   1b5ac:	dc 92       	st	X, r13
   1b5ae:	60 e0       	ldi	r22, 0x00	; 0
   1b5b0:	70 e0       	ldi	r23, 0x00	; 0
   1b5b2:	80 e8       	ldi	r24, 0x80	; 128
   1b5b4:	9f ef       	ldi	r25, 0xFF	; 255
   1b5b6:	c1 11       	cpse	r28, r1
   1b5b8:	ff c0       	rjmp	.+510    	; 0x1b7b8 <strtod+0x2a2>
   1b5ba:	60 e0       	ldi	r22, 0x00	; 0
   1b5bc:	70 e0       	ldi	r23, 0x00	; 0
   1b5be:	80 e8       	ldi	r24, 0x80	; 128
   1b5c0:	9f e7       	ldi	r25, 0x7F	; 127
   1b5c2:	fa c0       	rjmp	.+500    	; 0x1b7b8 <strtod+0x2a2>
   1b5c4:	58 01       	movw	r10, r16
   1b5c6:	bb cf       	rjmp	.-138    	; 0x1b53e <strtod+0x28>
   1b5c8:	db 32       	cpi	r29, 0x2B	; 43
   1b5ca:	29 f4       	brne	.+10     	; 0x1b5d6 <strtod+0xc0>
   1b5cc:	85 01       	movw	r16, r10
   1b5ce:	0e 5f       	subi	r16, 0xFE	; 254
   1b5d0:	1f 4f       	sbci	r17, 0xFF	; 255
   1b5d2:	f5 01       	movw	r30, r10
   1b5d4:	d1 81       	ldd	r29, Z+1	; 0x01
   1b5d6:	c0 e0       	ldi	r28, 0x00	; 0
   1b5d8:	c6 cf       	rjmp	.-116    	; 0x1b566 <strtod+0x50>
   1b5da:	43 e0       	ldi	r20, 0x03	; 3
   1b5dc:	50 e0       	ldi	r21, 0x00	; 0
   1b5de:	64 ea       	ldi	r22, 0xA4	; 164
   1b5e0:	73 e0       	ldi	r23, 0x03	; 3
   1b5e2:	c5 01       	movw	r24, r10
   1b5e4:	0e 94 c4 dc 	call	0x1b988	; 0x1b988 <strncasecmp_P>
   1b5e8:	89 2b       	or	r24, r25
   1b5ea:	e9 f0       	breq	.+58     	; 0x1b626 <strtod+0x110>
   1b5ec:	f8 01       	movw	r30, r16
   1b5ee:	10 e0       	ldi	r17, 0x00	; 0
   1b5f0:	00 e0       	ldi	r16, 0x00	; 0
   1b5f2:	20 e0       	ldi	r18, 0x00	; 0
   1b5f4:	30 e0       	ldi	r19, 0x00	; 0
   1b5f6:	a9 01       	movw	r20, r18
   1b5f8:	5f 01       	movw	r10, r30
   1b5fa:	b0 ed       	ldi	r27, 0xD0	; 208
   1b5fc:	8b 2e       	mov	r8, r27
   1b5fe:	8d 0e       	add	r8, r29
   1b600:	89 e0       	ldi	r24, 0x09	; 9
   1b602:	88 15       	cp	r24, r8
   1b604:	c8 f1       	brcs	.+114    	; 0x1b678 <strtod+0x162>
   1b606:	9c 2e       	mov	r9, r28
   1b608:	68 94       	set
   1b60a:	91 f8       	bld	r9, 1
   1b60c:	8c 2f       	mov	r24, r28
   1b60e:	88 70       	andi	r24, 0x08	; 8
   1b610:	c2 ff       	sbrs	r28, 2
   1b612:	16 c0       	rjmp	.+44     	; 0x1b640 <strtod+0x12a>
   1b614:	81 11       	cpse	r24, r1
   1b616:	02 c0       	rjmp	.+4      	; 0x1b61c <strtod+0x106>
   1b618:	0f 5f       	subi	r16, 0xFF	; 255
   1b61a:	1f 4f       	sbci	r17, 0xFF	; 255
   1b61c:	31 96       	adiw	r30, 0x01	; 1
   1b61e:	d5 01       	movw	r26, r10
   1b620:	dc 91       	ld	r29, X
   1b622:	c9 2d       	mov	r28, r9
   1b624:	e9 cf       	rjmp	.-46     	; 0x1b5f8 <strtod+0xe2>
   1b626:	e1 14       	cp	r14, r1
   1b628:	f1 04       	cpc	r15, r1
   1b62a:	29 f0       	breq	.+10     	; 0x1b636 <strtod+0x120>
   1b62c:	0e 5f       	subi	r16, 0xFE	; 254
   1b62e:	1f 4f       	sbci	r17, 0xFF	; 255
   1b630:	f7 01       	movw	r30, r14
   1b632:	11 83       	std	Z+1, r17	; 0x01
   1b634:	00 83       	st	Z, r16
   1b636:	60 e0       	ldi	r22, 0x00	; 0
   1b638:	70 e0       	ldi	r23, 0x00	; 0
   1b63a:	80 ec       	ldi	r24, 0xC0	; 192
   1b63c:	9f e7       	ldi	r25, 0x7F	; 127
   1b63e:	bc c0       	rjmp	.+376    	; 0x1b7b8 <strtod+0x2a2>
   1b640:	88 23       	and	r24, r24
   1b642:	11 f0       	breq	.+4      	; 0x1b648 <strtod+0x132>
   1b644:	01 50       	subi	r16, 0x01	; 1
   1b646:	11 09       	sbc	r17, r1
   1b648:	a5 e0       	ldi	r26, 0x05	; 5
   1b64a:	b0 e0       	ldi	r27, 0x00	; 0
   1b64c:	0e 94 4a df 	call	0x1be94	; 0x1be94 <__muluhisi3>
   1b650:	9b 01       	movw	r18, r22
   1b652:	ac 01       	movw	r20, r24
   1b654:	22 0f       	add	r18, r18
   1b656:	33 1f       	adc	r19, r19
   1b658:	44 1f       	adc	r20, r20
   1b65a:	55 1f       	adc	r21, r21
   1b65c:	28 0d       	add	r18, r8
   1b65e:	31 1d       	adc	r19, r1
   1b660:	41 1d       	adc	r20, r1
   1b662:	51 1d       	adc	r21, r1
   1b664:	28 39       	cpi	r18, 0x98	; 152
   1b666:	99 e9       	ldi	r25, 0x99	; 153
   1b668:	39 07       	cpc	r19, r25
   1b66a:	49 07       	cpc	r20, r25
   1b66c:	99 e1       	ldi	r25, 0x19	; 25
   1b66e:	59 07       	cpc	r21, r25
   1b670:	a8 f2       	brcs	.-86     	; 0x1b61c <strtod+0x106>
   1b672:	c6 60       	ori	r28, 0x06	; 6
   1b674:	9c 2e       	mov	r9, r28
   1b676:	d2 cf       	rjmp	.-92     	; 0x1b61c <strtod+0x106>
   1b678:	ae ef       	ldi	r26, 0xFE	; 254
   1b67a:	8a 12       	cpse	r8, r26
   1b67c:	06 c0       	rjmp	.+12     	; 0x1b68a <strtod+0x174>
   1b67e:	c3 fd       	sbrc	r28, 3
   1b680:	3c c0       	rjmp	.+120    	; 0x1b6fa <strtod+0x1e4>
   1b682:	9c 2e       	mov	r9, r28
   1b684:	68 94       	set
   1b686:	93 f8       	bld	r9, 3
   1b688:	c9 cf       	rjmp	.-110    	; 0x1b61c <strtod+0x106>
   1b68a:	df 7d       	andi	r29, 0xDF	; 223
   1b68c:	d5 34       	cpi	r29, 0x45	; 69
   1b68e:	a9 f5       	brne	.+106    	; 0x1b6fa <strtod+0x1e4>
   1b690:	80 81       	ld	r24, Z
   1b692:	8d 32       	cpi	r24, 0x2D	; 45
   1b694:	39 f4       	brne	.+14     	; 0x1b6a4 <strtod+0x18e>
   1b696:	c0 61       	ori	r28, 0x10	; 16
   1b698:	df 01       	movw	r26, r30
   1b69a:	12 96       	adiw	r26, 0x02	; 2
   1b69c:	81 81       	ldd	r24, Z+1	; 0x01
   1b69e:	62 e0       	ldi	r22, 0x02	; 2
   1b6a0:	70 e0       	ldi	r23, 0x00	; 0
   1b6a2:	06 c0       	rjmp	.+12     	; 0x1b6b0 <strtod+0x19a>
   1b6a4:	df 01       	movw	r26, r30
   1b6a6:	8b 32       	cpi	r24, 0x2B	; 43
   1b6a8:	c1 f3       	breq	.-16     	; 0x1b69a <strtod+0x184>
   1b6aa:	11 96       	adiw	r26, 0x01	; 1
   1b6ac:	61 e0       	ldi	r22, 0x01	; 1
   1b6ae:	70 e0       	ldi	r23, 0x00	; 0
   1b6b0:	80 53       	subi	r24, 0x30	; 48
   1b6b2:	5d 01       	movw	r10, r26
   1b6b4:	a6 1a       	sub	r10, r22
   1b6b6:	b7 0a       	sbc	r11, r23
   1b6b8:	8a 30       	cpi	r24, 0x0A	; 10
   1b6ba:	f8 f4       	brcc	.+62     	; 0x1b6fa <strtod+0x1e4>
   1b6bc:	e0 e8       	ldi	r30, 0x80	; 128
   1b6be:	ce 16       	cp	r12, r30
   1b6c0:	ec e0       	ldi	r30, 0x0C	; 12
   1b6c2:	de 06       	cpc	r13, r30
   1b6c4:	5c f4       	brge	.+22     	; 0x1b6dc <strtod+0x1c6>
   1b6c6:	b6 01       	movw	r22, r12
   1b6c8:	66 0f       	add	r22, r22
   1b6ca:	77 1f       	adc	r23, r23
   1b6cc:	66 0f       	add	r22, r22
   1b6ce:	77 1f       	adc	r23, r23
   1b6d0:	c6 0e       	add	r12, r22
   1b6d2:	d7 1e       	adc	r13, r23
   1b6d4:	cc 0c       	add	r12, r12
   1b6d6:	dd 1c       	adc	r13, r13
   1b6d8:	c8 0e       	add	r12, r24
   1b6da:	d1 1c       	adc	r13, r1
   1b6dc:	5d 01       	movw	r10, r26
   1b6de:	ff ef       	ldi	r31, 0xFF	; 255
   1b6e0:	af 1a       	sub	r10, r31
   1b6e2:	bf 0a       	sbc	r11, r31
   1b6e4:	8c 91       	ld	r24, X
   1b6e6:	80 53       	subi	r24, 0x30	; 48
   1b6e8:	8a 30       	cpi	r24, 0x0A	; 10
   1b6ea:	a8 f1       	brcs	.+106    	; 0x1b756 <strtod+0x240>
   1b6ec:	c4 ff       	sbrs	r28, 4
   1b6ee:	03 c0       	rjmp	.+6      	; 0x1b6f6 <strtod+0x1e0>
   1b6f0:	d1 94       	neg	r13
   1b6f2:	c1 94       	neg	r12
   1b6f4:	d1 08       	sbc	r13, r1
   1b6f6:	0c 0d       	add	r16, r12
   1b6f8:	1d 1d       	adc	r17, r13
   1b6fa:	c1 ff       	sbrs	r28, 1
   1b6fc:	09 c0       	rjmp	.+18     	; 0x1b710 <strtod+0x1fa>
   1b6fe:	e1 14       	cp	r14, r1
   1b700:	f1 04       	cpc	r15, r1
   1b702:	31 f0       	breq	.+12     	; 0x1b710 <strtod+0x1fa>
   1b704:	81 e0       	ldi	r24, 0x01	; 1
   1b706:	a8 1a       	sub	r10, r24
   1b708:	b1 08       	sbc	r11, r1
   1b70a:	d7 01       	movw	r26, r14
   1b70c:	ad 92       	st	X+, r10
   1b70e:	bc 92       	st	X, r11
   1b710:	ca 01       	movw	r24, r20
   1b712:	b9 01       	movw	r22, r18
   1b714:	0e 94 9c dd 	call	0x1bb38	; 0x1bb38 <__floatunsisf>
   1b718:	c3 70       	andi	r28, 0x03	; 3
   1b71a:	c3 30       	cpi	r28, 0x03	; 3
   1b71c:	09 f4       	brne	.+2      	; 0x1b720 <strtod+0x20a>
   1b71e:	90 58       	subi	r25, 0x80	; 128
   1b720:	4b 01       	movw	r8, r22
   1b722:	5c 01       	movw	r10, r24
   1b724:	20 e0       	ldi	r18, 0x00	; 0
   1b726:	30 e0       	ldi	r19, 0x00	; 0
   1b728:	a9 01       	movw	r20, r18
   1b72a:	0e 94 97 dd 	call	0x1bb2e	; 0x1bb2e <__cmpsf2>
   1b72e:	88 23       	and	r24, r24
   1b730:	09 f4       	brne	.+2      	; 0x1b734 <strtod+0x21e>
   1b732:	40 c0       	rjmp	.+128    	; 0x1b7b4 <strtod+0x29e>
   1b734:	cb ed       	ldi	r28, 0xDB	; 219
   1b736:	d3 e0       	ldi	r29, 0x03	; 3
   1b738:	17 ff       	sbrs	r17, 7
   1b73a:	05 c0       	rjmp	.+10     	; 0x1b746 <strtod+0x230>
   1b73c:	11 95       	neg	r17
   1b73e:	01 95       	neg	r16
   1b740:	11 09       	sbc	r17, r1
   1b742:	c3 ec       	ldi	r28, 0xC3	; 195
   1b744:	d3 e0       	ldi	r29, 0x03	; 3
   1b746:	6e 01       	movw	r12, r28
   1b748:	b8 e1       	ldi	r27, 0x18	; 24
   1b74a:	cb 1a       	sub	r12, r27
   1b74c:	d1 08       	sbc	r13, r1
   1b74e:	80 e2       	ldi	r24, 0x20	; 32
   1b750:	e8 2e       	mov	r14, r24
   1b752:	f1 2c       	mov	r15, r1
   1b754:	0f c0       	rjmp	.+30     	; 0x1b774 <strtod+0x25e>
   1b756:	d5 01       	movw	r26, r10
   1b758:	b1 cf       	rjmp	.-158    	; 0x1b6bc <strtod+0x1a6>
   1b75a:	fe 01       	movw	r30, r28
   1b75c:	25 91       	lpm	r18, Z+
   1b75e:	35 91       	lpm	r19, Z+
   1b760:	45 91       	lpm	r20, Z+
   1b762:	54 91       	lpm	r21, Z
   1b764:	0e 19       	sub	r16, r14
   1b766:	1f 09       	sbc	r17, r15
   1b768:	c5 01       	movw	r24, r10
   1b76a:	b4 01       	movw	r22, r8
   1b76c:	0e 94 fd dd 	call	0x1bbfa	; 0x1bbfa <__mulsf3>
   1b770:	4b 01       	movw	r8, r22
   1b772:	5c 01       	movw	r10, r24
   1b774:	d5 01       	movw	r26, r10
   1b776:	c4 01       	movw	r24, r8
   1b778:	0e 15       	cp	r16, r14
   1b77a:	1f 05       	cpc	r17, r15
   1b77c:	74 f7       	brge	.-36     	; 0x1b75a <strtod+0x244>
   1b77e:	24 97       	sbiw	r28, 0x04	; 4
   1b780:	f5 94       	asr	r15
   1b782:	e7 94       	ror	r14
   1b784:	cc 16       	cp	r12, r28
   1b786:	dd 06       	cpc	r13, r29
   1b788:	a9 f7       	brne	.-22     	; 0x1b774 <strtod+0x25e>
   1b78a:	8a 2f       	mov	r24, r26
   1b78c:	88 0f       	add	r24, r24
   1b78e:	8b 2f       	mov	r24, r27
   1b790:	88 1f       	adc	r24, r24
   1b792:	8f 3f       	cpi	r24, 0xFF	; 255
   1b794:	49 f0       	breq	.+18     	; 0x1b7a8 <strtod+0x292>
   1b796:	20 e0       	ldi	r18, 0x00	; 0
   1b798:	30 e0       	ldi	r19, 0x00	; 0
   1b79a:	a9 01       	movw	r20, r18
   1b79c:	c5 01       	movw	r24, r10
   1b79e:	b4 01       	movw	r22, r8
   1b7a0:	0e 94 97 dd 	call	0x1bb2e	; 0x1bb2e <__cmpsf2>
   1b7a4:	81 11       	cpse	r24, r1
   1b7a6:	06 c0       	rjmp	.+12     	; 0x1b7b4 <strtod+0x29e>
   1b7a8:	82 e2       	ldi	r24, 0x22	; 34
   1b7aa:	90 e0       	ldi	r25, 0x00	; 0
   1b7ac:	90 93 6a 14 	sts	0x146A, r25	; 0x80146a <errno+0x1>
   1b7b0:	80 93 69 14 	sts	0x1469, r24	; 0x801469 <errno>
   1b7b4:	c5 01       	movw	r24, r10
   1b7b6:	b4 01       	movw	r22, r8
   1b7b8:	df 91       	pop	r29
   1b7ba:	cf 91       	pop	r28
   1b7bc:	1f 91       	pop	r17
   1b7be:	0f 91       	pop	r16
   1b7c0:	ff 90       	pop	r15
   1b7c2:	ef 90       	pop	r14
   1b7c4:	df 90       	pop	r13
   1b7c6:	cf 90       	pop	r12
   1b7c8:	bf 90       	pop	r11
   1b7ca:	af 90       	pop	r10
   1b7cc:	9f 90       	pop	r9
   1b7ce:	8f 90       	pop	r8
   1b7d0:	08 95       	ret

0001b7d2 <__ftoa_engine>:
__ftoa_engine():
   1b7d2:	28 30       	cpi	r18, 0x08	; 8
   1b7d4:	08 f0       	brcs	.+2      	; 0x1b7d8 <__ftoa_engine+0x6>
   1b7d6:	27 e0       	ldi	r18, 0x07	; 7
   1b7d8:	33 27       	eor	r19, r19
   1b7da:	da 01       	movw	r26, r20
   1b7dc:	99 0f       	add	r25, r25
   1b7de:	31 1d       	adc	r19, r1
   1b7e0:	87 fd       	sbrc	r24, 7
   1b7e2:	91 60       	ori	r25, 0x01	; 1
   1b7e4:	00 96       	adiw	r24, 0x00	; 0
   1b7e6:	61 05       	cpc	r22, r1
   1b7e8:	71 05       	cpc	r23, r1
   1b7ea:	39 f4       	brne	.+14     	; 0x1b7fa <__ftoa_engine+0x28>
   1b7ec:	32 60       	ori	r19, 0x02	; 2
   1b7ee:	2e 5f       	subi	r18, 0xFE	; 254
   1b7f0:	3d 93       	st	X+, r19
   1b7f2:	30 e3       	ldi	r19, 0x30	; 48
   1b7f4:	2a 95       	dec	r18
   1b7f6:	e1 f7       	brne	.-8      	; 0x1b7f0 <__ftoa_engine+0x1e>
   1b7f8:	08 95       	ret
   1b7fa:	9f 3f       	cpi	r25, 0xFF	; 255
   1b7fc:	30 f0       	brcs	.+12     	; 0x1b80a <__ftoa_engine+0x38>
   1b7fe:	80 38       	cpi	r24, 0x80	; 128
   1b800:	71 05       	cpc	r23, r1
   1b802:	61 05       	cpc	r22, r1
   1b804:	09 f0       	breq	.+2      	; 0x1b808 <__ftoa_engine+0x36>
   1b806:	3c 5f       	subi	r19, 0xFC	; 252
   1b808:	3c 5f       	subi	r19, 0xFC	; 252
   1b80a:	3d 93       	st	X+, r19
   1b80c:	91 30       	cpi	r25, 0x01	; 1
   1b80e:	08 f0       	brcs	.+2      	; 0x1b812 <__ftoa_engine+0x40>
   1b810:	80 68       	ori	r24, 0x80	; 128
   1b812:	91 1d       	adc	r25, r1
   1b814:	df 93       	push	r29
   1b816:	cf 93       	push	r28
   1b818:	1f 93       	push	r17
   1b81a:	0f 93       	push	r16
   1b81c:	ff 92       	push	r15
   1b81e:	ef 92       	push	r14
   1b820:	19 2f       	mov	r17, r25
   1b822:	98 7f       	andi	r25, 0xF8	; 248
   1b824:	96 95       	lsr	r25
   1b826:	e9 2f       	mov	r30, r25
   1b828:	96 95       	lsr	r25
   1b82a:	96 95       	lsr	r25
   1b82c:	e9 0f       	add	r30, r25
   1b82e:	ff 27       	eor	r31, r31
   1b830:	e7 5c       	subi	r30, 0xC7	; 199
   1b832:	fb 4f       	sbci	r31, 0xFB	; 251
   1b834:	99 27       	eor	r25, r25
   1b836:	33 27       	eor	r19, r19
   1b838:	ee 24       	eor	r14, r14
   1b83a:	ff 24       	eor	r15, r15
   1b83c:	a7 01       	movw	r20, r14
   1b83e:	e7 01       	movw	r28, r14
   1b840:	05 90       	lpm	r0, Z+
   1b842:	08 94       	sec
   1b844:	07 94       	ror	r0
   1b846:	28 f4       	brcc	.+10     	; 0x1b852 <__ftoa_engine+0x80>
   1b848:	36 0f       	add	r19, r22
   1b84a:	e7 1e       	adc	r14, r23
   1b84c:	f8 1e       	adc	r15, r24
   1b84e:	49 1f       	adc	r20, r25
   1b850:	51 1d       	adc	r21, r1
   1b852:	66 0f       	add	r22, r22
   1b854:	77 1f       	adc	r23, r23
   1b856:	88 1f       	adc	r24, r24
   1b858:	99 1f       	adc	r25, r25
   1b85a:	06 94       	lsr	r0
   1b85c:	a1 f7       	brne	.-24     	; 0x1b846 <__ftoa_engine+0x74>
   1b85e:	05 90       	lpm	r0, Z+
   1b860:	07 94       	ror	r0
   1b862:	28 f4       	brcc	.+10     	; 0x1b86e <__ftoa_engine+0x9c>
   1b864:	e7 0e       	add	r14, r23
   1b866:	f8 1e       	adc	r15, r24
   1b868:	49 1f       	adc	r20, r25
   1b86a:	56 1f       	adc	r21, r22
   1b86c:	c1 1d       	adc	r28, r1
   1b86e:	77 0f       	add	r23, r23
   1b870:	88 1f       	adc	r24, r24
   1b872:	99 1f       	adc	r25, r25
   1b874:	66 1f       	adc	r22, r22
   1b876:	06 94       	lsr	r0
   1b878:	a1 f7       	brne	.-24     	; 0x1b862 <__ftoa_engine+0x90>
   1b87a:	05 90       	lpm	r0, Z+
   1b87c:	07 94       	ror	r0
   1b87e:	28 f4       	brcc	.+10     	; 0x1b88a <__ftoa_engine+0xb8>
   1b880:	f8 0e       	add	r15, r24
   1b882:	49 1f       	adc	r20, r25
   1b884:	56 1f       	adc	r21, r22
   1b886:	c7 1f       	adc	r28, r23
   1b888:	d1 1d       	adc	r29, r1
   1b88a:	88 0f       	add	r24, r24
   1b88c:	99 1f       	adc	r25, r25
   1b88e:	66 1f       	adc	r22, r22
   1b890:	77 1f       	adc	r23, r23
   1b892:	06 94       	lsr	r0
   1b894:	a1 f7       	brne	.-24     	; 0x1b87e <__ftoa_engine+0xac>
   1b896:	05 90       	lpm	r0, Z+
   1b898:	07 94       	ror	r0
   1b89a:	20 f4       	brcc	.+8      	; 0x1b8a4 <__ftoa_engine+0xd2>
   1b89c:	49 0f       	add	r20, r25
   1b89e:	56 1f       	adc	r21, r22
   1b8a0:	c7 1f       	adc	r28, r23
   1b8a2:	d8 1f       	adc	r29, r24
   1b8a4:	99 0f       	add	r25, r25
   1b8a6:	66 1f       	adc	r22, r22
   1b8a8:	77 1f       	adc	r23, r23
   1b8aa:	88 1f       	adc	r24, r24
   1b8ac:	06 94       	lsr	r0
   1b8ae:	a9 f7       	brne	.-22     	; 0x1b89a <__ftoa_engine+0xc8>
   1b8b0:	84 91       	lpm	r24, Z
   1b8b2:	10 95       	com	r17
   1b8b4:	17 70       	andi	r17, 0x07	; 7
   1b8b6:	41 f0       	breq	.+16     	; 0x1b8c8 <__ftoa_engine+0xf6>
   1b8b8:	d6 95       	lsr	r29
   1b8ba:	c7 95       	ror	r28
   1b8bc:	57 95       	ror	r21
   1b8be:	47 95       	ror	r20
   1b8c0:	f7 94       	ror	r15
   1b8c2:	e7 94       	ror	r14
   1b8c4:	1a 95       	dec	r17
   1b8c6:	c1 f7       	brne	.-16     	; 0x1b8b8 <__ftoa_engine+0xe6>
   1b8c8:	ef ed       	ldi	r30, 0xDF	; 223
   1b8ca:	f3 e0       	ldi	r31, 0x03	; 3
   1b8cc:	68 94       	set
   1b8ce:	15 90       	lpm	r1, Z+
   1b8d0:	15 91       	lpm	r17, Z+
   1b8d2:	35 91       	lpm	r19, Z+
   1b8d4:	65 91       	lpm	r22, Z+
   1b8d6:	95 91       	lpm	r25, Z+
   1b8d8:	05 90       	lpm	r0, Z+
   1b8da:	7f e2       	ldi	r23, 0x2F	; 47
   1b8dc:	73 95       	inc	r23
   1b8de:	e1 18       	sub	r14, r1
   1b8e0:	f1 0a       	sbc	r15, r17
   1b8e2:	43 0b       	sbc	r20, r19
   1b8e4:	56 0b       	sbc	r21, r22
   1b8e6:	c9 0b       	sbc	r28, r25
   1b8e8:	d0 09       	sbc	r29, r0
   1b8ea:	c0 f7       	brcc	.-16     	; 0x1b8dc <__ftoa_engine+0x10a>
   1b8ec:	e1 0c       	add	r14, r1
   1b8ee:	f1 1e       	adc	r15, r17
   1b8f0:	43 1f       	adc	r20, r19
   1b8f2:	56 1f       	adc	r21, r22
   1b8f4:	c9 1f       	adc	r28, r25
   1b8f6:	d0 1d       	adc	r29, r0
   1b8f8:	7e f4       	brtc	.+30     	; 0x1b918 <__ftoa_engine+0x146>
   1b8fa:	70 33       	cpi	r23, 0x30	; 48
   1b8fc:	11 f4       	brne	.+4      	; 0x1b902 <__ftoa_engine+0x130>
   1b8fe:	8a 95       	dec	r24
   1b900:	e6 cf       	rjmp	.-52     	; 0x1b8ce <__ftoa_engine+0xfc>
   1b902:	e8 94       	clt
   1b904:	01 50       	subi	r16, 0x01	; 1
   1b906:	30 f0       	brcs	.+12     	; 0x1b914 <__ftoa_engine+0x142>
   1b908:	08 0f       	add	r16, r24
   1b90a:	0a f4       	brpl	.+2      	; 0x1b90e <__ftoa_engine+0x13c>
   1b90c:	00 27       	eor	r16, r16
   1b90e:	02 17       	cp	r16, r18
   1b910:	08 f4       	brcc	.+2      	; 0x1b914 <__ftoa_engine+0x142>
   1b912:	20 2f       	mov	r18, r16
   1b914:	23 95       	inc	r18
   1b916:	02 2f       	mov	r16, r18
   1b918:	7a 33       	cpi	r23, 0x3A	; 58
   1b91a:	28 f0       	brcs	.+10     	; 0x1b926 <__ftoa_engine+0x154>
   1b91c:	79 e3       	ldi	r23, 0x39	; 57
   1b91e:	7d 93       	st	X+, r23
   1b920:	2a 95       	dec	r18
   1b922:	e9 f7       	brne	.-6      	; 0x1b91e <__ftoa_engine+0x14c>
   1b924:	10 c0       	rjmp	.+32     	; 0x1b946 <__ftoa_engine+0x174>
   1b926:	7d 93       	st	X+, r23
   1b928:	2a 95       	dec	r18
   1b92a:	89 f6       	brne	.-94     	; 0x1b8ce <__ftoa_engine+0xfc>
   1b92c:	06 94       	lsr	r0
   1b92e:	97 95       	ror	r25
   1b930:	67 95       	ror	r22
   1b932:	37 95       	ror	r19
   1b934:	17 95       	ror	r17
   1b936:	17 94       	ror	r1
   1b938:	e1 18       	sub	r14, r1
   1b93a:	f1 0a       	sbc	r15, r17
   1b93c:	43 0b       	sbc	r20, r19
   1b93e:	56 0b       	sbc	r21, r22
   1b940:	c9 0b       	sbc	r28, r25
   1b942:	d0 09       	sbc	r29, r0
   1b944:	98 f0       	brcs	.+38     	; 0x1b96c <__ftoa_engine+0x19a>
   1b946:	23 95       	inc	r18
   1b948:	7e 91       	ld	r23, -X
   1b94a:	73 95       	inc	r23
   1b94c:	7a 33       	cpi	r23, 0x3A	; 58
   1b94e:	08 f0       	brcs	.+2      	; 0x1b952 <__ftoa_engine+0x180>
   1b950:	70 e3       	ldi	r23, 0x30	; 48
   1b952:	7c 93       	st	X, r23
   1b954:	20 13       	cpse	r18, r16
   1b956:	b8 f7       	brcc	.-18     	; 0x1b946 <__ftoa_engine+0x174>
   1b958:	7e 91       	ld	r23, -X
   1b95a:	70 61       	ori	r23, 0x10	; 16
   1b95c:	7d 93       	st	X+, r23
   1b95e:	30 f0       	brcs	.+12     	; 0x1b96c <__ftoa_engine+0x19a>
   1b960:	83 95       	inc	r24
   1b962:	71 e3       	ldi	r23, 0x31	; 49
   1b964:	7d 93       	st	X+, r23
   1b966:	70 e3       	ldi	r23, 0x30	; 48
   1b968:	2a 95       	dec	r18
   1b96a:	e1 f7       	brne	.-8      	; 0x1b964 <__ftoa_engine+0x192>
   1b96c:	11 24       	eor	r1, r1
   1b96e:	ef 90       	pop	r14
   1b970:	ff 90       	pop	r15
   1b972:	0f 91       	pop	r16
   1b974:	1f 91       	pop	r17
   1b976:	cf 91       	pop	r28
   1b978:	df 91       	pop	r29
   1b97a:	99 27       	eor	r25, r25
   1b97c:	87 fd       	sbrc	r24, 7
   1b97e:	90 95       	com	r25
   1b980:	08 95       	ret

0001b982 <__ctype_isfalse>:
__ctype_isfalse():
   1b982:	99 27       	eor	r25, r25
   1b984:	88 27       	eor	r24, r24

0001b986 <__ctype_istrue>:
__ctype_istrue():
   1b986:	08 95       	ret

0001b988 <strncasecmp_P>:
strncasecmp_P():
   1b988:	fb 01       	movw	r30, r22
   1b98a:	dc 01       	movw	r26, r24
   1b98c:	41 50       	subi	r20, 0x01	; 1
   1b98e:	50 40       	sbci	r21, 0x00	; 0
   1b990:	88 f0       	brcs	.+34     	; 0x1b9b4 <strncasecmp_P+0x2c>
   1b992:	8d 91       	ld	r24, X+
   1b994:	81 34       	cpi	r24, 0x41	; 65
   1b996:	1c f0       	brlt	.+6      	; 0x1b99e <strncasecmp_P+0x16>
   1b998:	8b 35       	cpi	r24, 0x5B	; 91
   1b99a:	0c f4       	brge	.+2      	; 0x1b99e <strncasecmp_P+0x16>
   1b99c:	80 5e       	subi	r24, 0xE0	; 224
   1b99e:	65 91       	lpm	r22, Z+
   1b9a0:	61 34       	cpi	r22, 0x41	; 65
   1b9a2:	1c f0       	brlt	.+6      	; 0x1b9aa <strncasecmp_P+0x22>
   1b9a4:	6b 35       	cpi	r22, 0x5B	; 91
   1b9a6:	0c f4       	brge	.+2      	; 0x1b9aa <strncasecmp_P+0x22>
   1b9a8:	60 5e       	subi	r22, 0xE0	; 224
   1b9aa:	86 1b       	sub	r24, r22
   1b9ac:	61 11       	cpse	r22, r1
   1b9ae:	71 f3       	breq	.-36     	; 0x1b98c <strncasecmp_P+0x4>
   1b9b0:	99 0b       	sbc	r25, r25
   1b9b2:	08 95       	ret
   1b9b4:	88 1b       	sub	r24, r24
   1b9b6:	fc cf       	rjmp	.-8      	; 0x1b9b0 <strncasecmp_P+0x28>

0001b9b8 <strnlen_P>:
strnlen_P():
   1b9b8:	fc 01       	movw	r30, r24
   1b9ba:	05 90       	lpm	r0, Z+
   1b9bc:	61 50       	subi	r22, 0x01	; 1
   1b9be:	70 40       	sbci	r23, 0x00	; 0
   1b9c0:	01 10       	cpse	r0, r1
   1b9c2:	d8 f7       	brcc	.-10     	; 0x1b9ba <strnlen_P+0x2>
   1b9c4:	80 95       	com	r24
   1b9c6:	90 95       	com	r25
   1b9c8:	8e 0f       	add	r24, r30
   1b9ca:	9f 1f       	adc	r25, r31
   1b9cc:	08 95       	ret

0001b9ce <memset>:
memset():
   1b9ce:	dc 01       	movw	r26, r24
   1b9d0:	01 c0       	rjmp	.+2      	; 0x1b9d4 <memset+0x6>
   1b9d2:	6d 93       	st	X+, r22
   1b9d4:	41 50       	subi	r20, 0x01	; 1
   1b9d6:	50 40       	sbci	r21, 0x00	; 0
   1b9d8:	e0 f7       	brcc	.-8      	; 0x1b9d2 <memset+0x4>
   1b9da:	08 95       	ret

0001b9dc <strnlen>:
strnlen():
   1b9dc:	fc 01       	movw	r30, r24
   1b9de:	61 50       	subi	r22, 0x01	; 1
   1b9e0:	70 40       	sbci	r23, 0x00	; 0
   1b9e2:	01 90       	ld	r0, Z+
   1b9e4:	01 10       	cpse	r0, r1
   1b9e6:	d8 f7       	brcc	.-10     	; 0x1b9de <strnlen+0x2>
   1b9e8:	80 95       	com	r24
   1b9ea:	90 95       	com	r25
   1b9ec:	8e 0f       	add	r24, r30
   1b9ee:	9f 1f       	adc	r25, r31
   1b9f0:	08 95       	ret

0001b9f2 <strrev>:
strrev():
   1b9f2:	dc 01       	movw	r26, r24
   1b9f4:	fc 01       	movw	r30, r24
   1b9f6:	67 2f       	mov	r22, r23
   1b9f8:	71 91       	ld	r23, Z+
   1b9fa:	77 23       	and	r23, r23
   1b9fc:	e1 f7       	brne	.-8      	; 0x1b9f6 <strrev+0x4>
   1b9fe:	32 97       	sbiw	r30, 0x02	; 2
   1ba00:	04 c0       	rjmp	.+8      	; 0x1ba0a <strrev+0x18>
   1ba02:	7c 91       	ld	r23, X
   1ba04:	6d 93       	st	X+, r22
   1ba06:	70 83       	st	Z, r23
   1ba08:	62 91       	ld	r22, -Z
   1ba0a:	ae 17       	cp	r26, r30
   1ba0c:	bf 07       	cpc	r27, r31
   1ba0e:	c8 f3       	brcs	.-14     	; 0x1ba02 <strrev+0x10>
   1ba10:	08 95       	ret

0001ba12 <fputc>:
fputc():
   1ba12:	0f 93       	push	r16
   1ba14:	1f 93       	push	r17
   1ba16:	cf 93       	push	r28
   1ba18:	df 93       	push	r29
   1ba1a:	18 2f       	mov	r17, r24
   1ba1c:	09 2f       	mov	r16, r25
   1ba1e:	eb 01       	movw	r28, r22
   1ba20:	8b 81       	ldd	r24, Y+3	; 0x03
   1ba22:	81 fd       	sbrc	r24, 1
   1ba24:	09 c0       	rjmp	.+18     	; 0x1ba38 <fputc+0x26>
   1ba26:	1f ef       	ldi	r17, 0xFF	; 255
   1ba28:	0f ef       	ldi	r16, 0xFF	; 255
   1ba2a:	81 2f       	mov	r24, r17
   1ba2c:	90 2f       	mov	r25, r16
   1ba2e:	df 91       	pop	r29
   1ba30:	cf 91       	pop	r28
   1ba32:	1f 91       	pop	r17
   1ba34:	0f 91       	pop	r16
   1ba36:	08 95       	ret
   1ba38:	82 ff       	sbrs	r24, 2
   1ba3a:	14 c0       	rjmp	.+40     	; 0x1ba64 <fputc+0x52>
   1ba3c:	2e 81       	ldd	r18, Y+6	; 0x06
   1ba3e:	3f 81       	ldd	r19, Y+7	; 0x07
   1ba40:	8c 81       	ldd	r24, Y+4	; 0x04
   1ba42:	9d 81       	ldd	r25, Y+5	; 0x05
   1ba44:	28 17       	cp	r18, r24
   1ba46:	39 07       	cpc	r19, r25
   1ba48:	3c f4       	brge	.+14     	; 0x1ba58 <fputc+0x46>
   1ba4a:	e8 81       	ld	r30, Y
   1ba4c:	f9 81       	ldd	r31, Y+1	; 0x01
   1ba4e:	cf 01       	movw	r24, r30
   1ba50:	01 96       	adiw	r24, 0x01	; 1
   1ba52:	99 83       	std	Y+1, r25	; 0x01
   1ba54:	88 83       	st	Y, r24
   1ba56:	10 83       	st	Z, r17
   1ba58:	8e 81       	ldd	r24, Y+6	; 0x06
   1ba5a:	9f 81       	ldd	r25, Y+7	; 0x07
   1ba5c:	01 96       	adiw	r24, 0x01	; 1
   1ba5e:	9f 83       	std	Y+7, r25	; 0x07
   1ba60:	8e 83       	std	Y+6, r24	; 0x06
   1ba62:	e3 cf       	rjmp	.-58     	; 0x1ba2a <fputc+0x18>
   1ba64:	e8 85       	ldd	r30, Y+8	; 0x08
   1ba66:	f9 85       	ldd	r31, Y+9	; 0x09
   1ba68:	81 2f       	mov	r24, r17
   1ba6a:	19 95       	eicall
   1ba6c:	89 2b       	or	r24, r25
   1ba6e:	a1 f3       	breq	.-24     	; 0x1ba58 <fputc+0x46>
   1ba70:	da cf       	rjmp	.-76     	; 0x1ba26 <fputc+0x14>

0001ba72 <__ultoa_invert>:
__ultoa_invert():
   1ba72:	fa 01       	movw	r30, r20
   1ba74:	aa 27       	eor	r26, r26
   1ba76:	28 30       	cpi	r18, 0x08	; 8
   1ba78:	51 f1       	breq	.+84     	; 0x1bace <__ultoa_invert+0x5c>
   1ba7a:	20 31       	cpi	r18, 0x10	; 16
   1ba7c:	81 f1       	breq	.+96     	; 0x1bade <__ultoa_invert+0x6c>
   1ba7e:	e8 94       	clt
   1ba80:	6f 93       	push	r22
   1ba82:	6e 7f       	andi	r22, 0xFE	; 254
   1ba84:	6e 5f       	subi	r22, 0xFE	; 254
   1ba86:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba88:	8f 4f       	sbci	r24, 0xFF	; 255
   1ba8a:	9f 4f       	sbci	r25, 0xFF	; 255
   1ba8c:	af 4f       	sbci	r26, 0xFF	; 255
   1ba8e:	b1 e0       	ldi	r27, 0x01	; 1
   1ba90:	3e d0       	rcall	.+124    	; 0x1bb0e <__ultoa_invert+0x9c>
   1ba92:	b4 e0       	ldi	r27, 0x04	; 4
   1ba94:	3c d0       	rcall	.+120    	; 0x1bb0e <__ultoa_invert+0x9c>
   1ba96:	67 0f       	add	r22, r23
   1ba98:	78 1f       	adc	r23, r24
   1ba9a:	89 1f       	adc	r24, r25
   1ba9c:	9a 1f       	adc	r25, r26
   1ba9e:	a1 1d       	adc	r26, r1
   1baa0:	68 0f       	add	r22, r24
   1baa2:	79 1f       	adc	r23, r25
   1baa4:	8a 1f       	adc	r24, r26
   1baa6:	91 1d       	adc	r25, r1
   1baa8:	a1 1d       	adc	r26, r1
   1baaa:	6a 0f       	add	r22, r26
   1baac:	71 1d       	adc	r23, r1
   1baae:	81 1d       	adc	r24, r1
   1bab0:	91 1d       	adc	r25, r1
   1bab2:	a1 1d       	adc	r26, r1
   1bab4:	20 d0       	rcall	.+64     	; 0x1baf6 <__ultoa_invert+0x84>
   1bab6:	09 f4       	brne	.+2      	; 0x1baba <__ultoa_invert+0x48>
   1bab8:	68 94       	set
   1baba:	3f 91       	pop	r19
   1babc:	2a e0       	ldi	r18, 0x0A	; 10
   1babe:	26 9f       	mul	r18, r22
   1bac0:	11 24       	eor	r1, r1
   1bac2:	30 19       	sub	r19, r0
   1bac4:	30 5d       	subi	r19, 0xD0	; 208
   1bac6:	31 93       	st	Z+, r19
   1bac8:	de f6       	brtc	.-74     	; 0x1ba80 <__ultoa_invert+0xe>
   1baca:	cf 01       	movw	r24, r30
   1bacc:	08 95       	ret
   1bace:	46 2f       	mov	r20, r22
   1bad0:	47 70       	andi	r20, 0x07	; 7
   1bad2:	40 5d       	subi	r20, 0xD0	; 208
   1bad4:	41 93       	st	Z+, r20
   1bad6:	b3 e0       	ldi	r27, 0x03	; 3
   1bad8:	0f d0       	rcall	.+30     	; 0x1baf8 <__ultoa_invert+0x86>
   1bada:	c9 f7       	brne	.-14     	; 0x1bace <__ultoa_invert+0x5c>
   1badc:	f6 cf       	rjmp	.-20     	; 0x1baca <__ultoa_invert+0x58>
   1bade:	46 2f       	mov	r20, r22
   1bae0:	4f 70       	andi	r20, 0x0F	; 15
   1bae2:	40 5d       	subi	r20, 0xD0	; 208
   1bae4:	4a 33       	cpi	r20, 0x3A	; 58
   1bae6:	18 f0       	brcs	.+6      	; 0x1baee <__ultoa_invert+0x7c>
   1bae8:	49 5d       	subi	r20, 0xD9	; 217
   1baea:	31 fd       	sbrc	r19, 1
   1baec:	40 52       	subi	r20, 0x20	; 32
   1baee:	41 93       	st	Z+, r20
   1baf0:	02 d0       	rcall	.+4      	; 0x1baf6 <__ultoa_invert+0x84>
   1baf2:	a9 f7       	brne	.-22     	; 0x1bade <__ultoa_invert+0x6c>
   1baf4:	ea cf       	rjmp	.-44     	; 0x1baca <__ultoa_invert+0x58>
   1baf6:	b4 e0       	ldi	r27, 0x04	; 4
   1baf8:	a6 95       	lsr	r26
   1bafa:	97 95       	ror	r25
   1bafc:	87 95       	ror	r24
   1bafe:	77 95       	ror	r23
   1bb00:	67 95       	ror	r22
   1bb02:	ba 95       	dec	r27
   1bb04:	c9 f7       	brne	.-14     	; 0x1baf8 <__ultoa_invert+0x86>
   1bb06:	00 97       	sbiw	r24, 0x00	; 0
   1bb08:	61 05       	cpc	r22, r1
   1bb0a:	71 05       	cpc	r23, r1
   1bb0c:	08 95       	ret
   1bb0e:	9b 01       	movw	r18, r22
   1bb10:	ac 01       	movw	r20, r24
   1bb12:	0a 2e       	mov	r0, r26
   1bb14:	06 94       	lsr	r0
   1bb16:	57 95       	ror	r21
   1bb18:	47 95       	ror	r20
   1bb1a:	37 95       	ror	r19
   1bb1c:	27 95       	ror	r18
   1bb1e:	ba 95       	dec	r27
   1bb20:	c9 f7       	brne	.-14     	; 0x1bb14 <__ultoa_invert+0xa2>
   1bb22:	62 0f       	add	r22, r18
   1bb24:	73 1f       	adc	r23, r19
   1bb26:	84 1f       	adc	r24, r20
   1bb28:	95 1f       	adc	r25, r21
   1bb2a:	a0 1d       	adc	r26, r0
   1bb2c:	08 95       	ret

0001bb2e <__cmpsf2>:
__cmpsf2():
   1bb2e:	0e 94 d9 dd 	call	0x1bbb2	; 0x1bbb2 <__fp_cmp>
   1bb32:	08 f4       	brcc	.+2      	; 0x1bb36 <__cmpsf2+0x8>
   1bb34:	81 e0       	ldi	r24, 0x01	; 1
   1bb36:	08 95       	ret

0001bb38 <__floatunsisf>:
__floatunsisf():
   1bb38:	e8 94       	clt
   1bb3a:	09 c0       	rjmp	.+18     	; 0x1bb4e <__floatsisf+0x12>

0001bb3c <__floatsisf>:
   1bb3c:	97 fb       	bst	r25, 7
   1bb3e:	3e f4       	brtc	.+14     	; 0x1bb4e <__floatsisf+0x12>
   1bb40:	90 95       	com	r25
   1bb42:	80 95       	com	r24
   1bb44:	70 95       	com	r23
   1bb46:	61 95       	neg	r22
   1bb48:	7f 4f       	sbci	r23, 0xFF	; 255
   1bb4a:	8f 4f       	sbci	r24, 0xFF	; 255
   1bb4c:	9f 4f       	sbci	r25, 0xFF	; 255
   1bb4e:	99 23       	and	r25, r25
   1bb50:	a9 f0       	breq	.+42     	; 0x1bb7c <__floatsisf+0x40>
   1bb52:	f9 2f       	mov	r31, r25
   1bb54:	96 e9       	ldi	r25, 0x96	; 150
   1bb56:	bb 27       	eor	r27, r27
   1bb58:	93 95       	inc	r25
   1bb5a:	f6 95       	lsr	r31
   1bb5c:	87 95       	ror	r24
   1bb5e:	77 95       	ror	r23
   1bb60:	67 95       	ror	r22
   1bb62:	b7 95       	ror	r27
   1bb64:	f1 11       	cpse	r31, r1
   1bb66:	f8 cf       	rjmp	.-16     	; 0x1bb58 <__floatsisf+0x1c>
   1bb68:	fa f4       	brpl	.+62     	; 0x1bba8 <__floatsisf+0x6c>
   1bb6a:	bb 0f       	add	r27, r27
   1bb6c:	11 f4       	brne	.+4      	; 0x1bb72 <__floatsisf+0x36>
   1bb6e:	60 ff       	sbrs	r22, 0
   1bb70:	1b c0       	rjmp	.+54     	; 0x1bba8 <__floatsisf+0x6c>
   1bb72:	6f 5f       	subi	r22, 0xFF	; 255
   1bb74:	7f 4f       	sbci	r23, 0xFF	; 255
   1bb76:	8f 4f       	sbci	r24, 0xFF	; 255
   1bb78:	9f 4f       	sbci	r25, 0xFF	; 255
   1bb7a:	16 c0       	rjmp	.+44     	; 0x1bba8 <__floatsisf+0x6c>
   1bb7c:	88 23       	and	r24, r24
   1bb7e:	11 f0       	breq	.+4      	; 0x1bb84 <__floatsisf+0x48>
   1bb80:	96 e9       	ldi	r25, 0x96	; 150
   1bb82:	11 c0       	rjmp	.+34     	; 0x1bba6 <__floatsisf+0x6a>
   1bb84:	77 23       	and	r23, r23
   1bb86:	21 f0       	breq	.+8      	; 0x1bb90 <__floatsisf+0x54>
   1bb88:	9e e8       	ldi	r25, 0x8E	; 142
   1bb8a:	87 2f       	mov	r24, r23
   1bb8c:	76 2f       	mov	r23, r22
   1bb8e:	05 c0       	rjmp	.+10     	; 0x1bb9a <__floatsisf+0x5e>
   1bb90:	66 23       	and	r22, r22
   1bb92:	71 f0       	breq	.+28     	; 0x1bbb0 <__floatsisf+0x74>
   1bb94:	96 e8       	ldi	r25, 0x86	; 134
   1bb96:	86 2f       	mov	r24, r22
   1bb98:	70 e0       	ldi	r23, 0x00	; 0
   1bb9a:	60 e0       	ldi	r22, 0x00	; 0
   1bb9c:	2a f0       	brmi	.+10     	; 0x1bba8 <__floatsisf+0x6c>
   1bb9e:	9a 95       	dec	r25
   1bba0:	66 0f       	add	r22, r22
   1bba2:	77 1f       	adc	r23, r23
   1bba4:	88 1f       	adc	r24, r24
   1bba6:	da f7       	brpl	.-10     	; 0x1bb9e <__floatsisf+0x62>
   1bba8:	88 0f       	add	r24, r24
   1bbaa:	96 95       	lsr	r25
   1bbac:	87 95       	ror	r24
   1bbae:	97 f9       	bld	r25, 7
   1bbb0:	08 95       	ret

0001bbb2 <__fp_cmp>:
__fp_cmp():
   1bbb2:	99 0f       	add	r25, r25
   1bbb4:	00 08       	sbc	r0, r0
   1bbb6:	55 0f       	add	r21, r21
   1bbb8:	aa 0b       	sbc	r26, r26
   1bbba:	e0 e8       	ldi	r30, 0x80	; 128
   1bbbc:	fe ef       	ldi	r31, 0xFE	; 254
   1bbbe:	16 16       	cp	r1, r22
   1bbc0:	17 06       	cpc	r1, r23
   1bbc2:	e8 07       	cpc	r30, r24
   1bbc4:	f9 07       	cpc	r31, r25
   1bbc6:	c0 f0       	brcs	.+48     	; 0x1bbf8 <__fp_cmp+0x46>
   1bbc8:	12 16       	cp	r1, r18
   1bbca:	13 06       	cpc	r1, r19
   1bbcc:	e4 07       	cpc	r30, r20
   1bbce:	f5 07       	cpc	r31, r21
   1bbd0:	98 f0       	brcs	.+38     	; 0x1bbf8 <__fp_cmp+0x46>
   1bbd2:	62 1b       	sub	r22, r18
   1bbd4:	73 0b       	sbc	r23, r19
   1bbd6:	84 0b       	sbc	r24, r20
   1bbd8:	95 0b       	sbc	r25, r21
   1bbda:	39 f4       	brne	.+14     	; 0x1bbea <__fp_cmp+0x38>
   1bbdc:	0a 26       	eor	r0, r26
   1bbde:	61 f0       	breq	.+24     	; 0x1bbf8 <__fp_cmp+0x46>
   1bbe0:	23 2b       	or	r18, r19
   1bbe2:	24 2b       	or	r18, r20
   1bbe4:	25 2b       	or	r18, r21
   1bbe6:	21 f4       	brne	.+8      	; 0x1bbf0 <__fp_cmp+0x3e>
   1bbe8:	08 95       	ret
   1bbea:	0a 26       	eor	r0, r26
   1bbec:	09 f4       	brne	.+2      	; 0x1bbf0 <__fp_cmp+0x3e>
   1bbee:	a1 40       	sbci	r26, 0x01	; 1
   1bbf0:	a6 95       	lsr	r26
   1bbf2:	8f ef       	ldi	r24, 0xFF	; 255
   1bbf4:	81 1d       	adc	r24, r1
   1bbf6:	81 1d       	adc	r24, r1
   1bbf8:	08 95       	ret

0001bbfa <__mulsf3>:
__mulsf3():
   1bbfa:	0e 94 10 de 	call	0x1bc20	; 0x1bc20 <__mulsf3x>
   1bbfe:	0c 94 81 de 	jmp	0x1bd02	; 0x1bd02 <__fp_round>
   1bc02:	0e 94 73 de 	call	0x1bce6	; 0x1bce6 <__fp_pscA>
   1bc06:	38 f0       	brcs	.+14     	; 0x1bc16 <__mulsf3+0x1c>
   1bc08:	0e 94 7a de 	call	0x1bcf4	; 0x1bcf4 <__fp_pscB>
   1bc0c:	20 f0       	brcs	.+8      	; 0x1bc16 <__mulsf3+0x1c>
   1bc0e:	95 23       	and	r25, r21
   1bc10:	11 f0       	breq	.+4      	; 0x1bc16 <__mulsf3+0x1c>
   1bc12:	0c 94 6a de 	jmp	0x1bcd4	; 0x1bcd4 <__fp_inf>
   1bc16:	0c 94 70 de 	jmp	0x1bce0	; 0x1bce0 <__fp_nan>
   1bc1a:	11 24       	eor	r1, r1
   1bc1c:	0c 94 b5 de 	jmp	0x1bd6a	; 0x1bd6a <__fp_szero>

0001bc20 <__mulsf3x>:
__mulsf3x():
   1bc20:	0e 94 92 de 	call	0x1bd24	; 0x1bd24 <__fp_split3>
   1bc24:	70 f3       	brcs	.-36     	; 0x1bc02 <__mulsf3+0x8>

0001bc26 <__mulsf3_pse>:
   1bc26:	95 9f       	mul	r25, r21
   1bc28:	c1 f3       	breq	.-16     	; 0x1bc1a <__mulsf3+0x20>
   1bc2a:	95 0f       	add	r25, r21
   1bc2c:	50 e0       	ldi	r21, 0x00	; 0
   1bc2e:	55 1f       	adc	r21, r21
   1bc30:	62 9f       	mul	r22, r18
   1bc32:	f0 01       	movw	r30, r0
   1bc34:	72 9f       	mul	r23, r18
   1bc36:	bb 27       	eor	r27, r27
   1bc38:	f0 0d       	add	r31, r0
   1bc3a:	b1 1d       	adc	r27, r1
   1bc3c:	63 9f       	mul	r22, r19
   1bc3e:	aa 27       	eor	r26, r26
   1bc40:	f0 0d       	add	r31, r0
   1bc42:	b1 1d       	adc	r27, r1
   1bc44:	aa 1f       	adc	r26, r26
   1bc46:	64 9f       	mul	r22, r20
   1bc48:	66 27       	eor	r22, r22
   1bc4a:	b0 0d       	add	r27, r0
   1bc4c:	a1 1d       	adc	r26, r1
   1bc4e:	66 1f       	adc	r22, r22
   1bc50:	82 9f       	mul	r24, r18
   1bc52:	22 27       	eor	r18, r18
   1bc54:	b0 0d       	add	r27, r0
   1bc56:	a1 1d       	adc	r26, r1
   1bc58:	62 1f       	adc	r22, r18
   1bc5a:	73 9f       	mul	r23, r19
   1bc5c:	b0 0d       	add	r27, r0
   1bc5e:	a1 1d       	adc	r26, r1
   1bc60:	62 1f       	adc	r22, r18
   1bc62:	83 9f       	mul	r24, r19
   1bc64:	a0 0d       	add	r26, r0
   1bc66:	61 1d       	adc	r22, r1
   1bc68:	22 1f       	adc	r18, r18
   1bc6a:	74 9f       	mul	r23, r20
   1bc6c:	33 27       	eor	r19, r19
   1bc6e:	a0 0d       	add	r26, r0
   1bc70:	61 1d       	adc	r22, r1
   1bc72:	23 1f       	adc	r18, r19
   1bc74:	84 9f       	mul	r24, r20
   1bc76:	60 0d       	add	r22, r0
   1bc78:	21 1d       	adc	r18, r1
   1bc7a:	82 2f       	mov	r24, r18
   1bc7c:	76 2f       	mov	r23, r22
   1bc7e:	6a 2f       	mov	r22, r26
   1bc80:	11 24       	eor	r1, r1
   1bc82:	9f 57       	subi	r25, 0x7F	; 127
   1bc84:	50 40       	sbci	r21, 0x00	; 0
   1bc86:	9a f0       	brmi	.+38     	; 0x1bcae <__mulsf3_pse+0x88>
   1bc88:	f1 f0       	breq	.+60     	; 0x1bcc6 <__mulsf3_pse+0xa0>
   1bc8a:	88 23       	and	r24, r24
   1bc8c:	4a f0       	brmi	.+18     	; 0x1bca0 <__mulsf3_pse+0x7a>
   1bc8e:	ee 0f       	add	r30, r30
   1bc90:	ff 1f       	adc	r31, r31
   1bc92:	bb 1f       	adc	r27, r27
   1bc94:	66 1f       	adc	r22, r22
   1bc96:	77 1f       	adc	r23, r23
   1bc98:	88 1f       	adc	r24, r24
   1bc9a:	91 50       	subi	r25, 0x01	; 1
   1bc9c:	50 40       	sbci	r21, 0x00	; 0
   1bc9e:	a9 f7       	brne	.-22     	; 0x1bc8a <__mulsf3_pse+0x64>
   1bca0:	9e 3f       	cpi	r25, 0xFE	; 254
   1bca2:	51 05       	cpc	r21, r1
   1bca4:	80 f0       	brcs	.+32     	; 0x1bcc6 <__mulsf3_pse+0xa0>
   1bca6:	0c 94 6a de 	jmp	0x1bcd4	; 0x1bcd4 <__fp_inf>
   1bcaa:	0c 94 b5 de 	jmp	0x1bd6a	; 0x1bd6a <__fp_szero>
   1bcae:	5f 3f       	cpi	r21, 0xFF	; 255
   1bcb0:	e4 f3       	brlt	.-8      	; 0x1bcaa <__mulsf3_pse+0x84>
   1bcb2:	98 3e       	cpi	r25, 0xE8	; 232
   1bcb4:	d4 f3       	brlt	.-12     	; 0x1bcaa <__mulsf3_pse+0x84>
   1bcb6:	86 95       	lsr	r24
   1bcb8:	77 95       	ror	r23
   1bcba:	67 95       	ror	r22
   1bcbc:	b7 95       	ror	r27
   1bcbe:	f7 95       	ror	r31
   1bcc0:	e7 95       	ror	r30
   1bcc2:	9f 5f       	subi	r25, 0xFF	; 255
   1bcc4:	c1 f7       	brne	.-16     	; 0x1bcb6 <__mulsf3_pse+0x90>
   1bcc6:	fe 2b       	or	r31, r30
   1bcc8:	88 0f       	add	r24, r24
   1bcca:	91 1d       	adc	r25, r1
   1bccc:	96 95       	lsr	r25
   1bcce:	87 95       	ror	r24
   1bcd0:	97 f9       	bld	r25, 7
   1bcd2:	08 95       	ret

0001bcd4 <__fp_inf>:
   1bcd4:	97 f9       	bld	r25, 7
   1bcd6:	9f 67       	ori	r25, 0x7F	; 127
   1bcd8:	80 e8       	ldi	r24, 0x80	; 128
   1bcda:	70 e0       	ldi	r23, 0x00	; 0
   1bcdc:	60 e0       	ldi	r22, 0x00	; 0
   1bcde:	08 95       	ret

0001bce0 <__fp_nan>:
   1bce0:	9f ef       	ldi	r25, 0xFF	; 255
   1bce2:	80 ec       	ldi	r24, 0xC0	; 192
   1bce4:	08 95       	ret

0001bce6 <__fp_pscA>:
   1bce6:	00 24       	eor	r0, r0
   1bce8:	0a 94       	dec	r0
   1bcea:	16 16       	cp	r1, r22
   1bcec:	17 06       	cpc	r1, r23
   1bcee:	18 06       	cpc	r1, r24
   1bcf0:	09 06       	cpc	r0, r25
__fp_pscA():
   1bcf2:	08 95       	ret

0001bcf4 <__fp_pscB>:
__fp_pscB():
   1bcf4:	00 24       	eor	r0, r0
   1bcf6:	0a 94       	dec	r0
   1bcf8:	12 16       	cp	r1, r18
   1bcfa:	13 06       	cpc	r1, r19
   1bcfc:	14 06       	cpc	r1, r20
   1bcfe:	05 06       	cpc	r0, r21
   1bd00:	08 95       	ret

0001bd02 <__fp_round>:
__fp_round():
   1bd02:	09 2e       	mov	r0, r25
   1bd04:	03 94       	inc	r0
   1bd06:	00 0c       	add	r0, r0
   1bd08:	11 f4       	brne	.+4      	; 0x1bd0e <__fp_round+0xc>
   1bd0a:	88 23       	and	r24, r24
   1bd0c:	52 f0       	brmi	.+20     	; 0x1bd22 <__fp_round+0x20>
   1bd0e:	bb 0f       	add	r27, r27
   1bd10:	40 f4       	brcc	.+16     	; 0x1bd22 <__fp_round+0x20>
   1bd12:	bf 2b       	or	r27, r31
   1bd14:	11 f4       	brne	.+4      	; 0x1bd1a <__fp_round+0x18>
   1bd16:	60 ff       	sbrs	r22, 0
   1bd18:	04 c0       	rjmp	.+8      	; 0x1bd22 <__fp_round+0x20>
   1bd1a:	6f 5f       	subi	r22, 0xFF	; 255
   1bd1c:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd1e:	8f 4f       	sbci	r24, 0xFF	; 255
   1bd20:	9f 4f       	sbci	r25, 0xFF	; 255
   1bd22:	08 95       	ret

0001bd24 <__fp_split3>:
__fp_split3():
   1bd24:	57 fd       	sbrc	r21, 7
   1bd26:	90 58       	subi	r25, 0x80	; 128
   1bd28:	44 0f       	add	r20, r20
   1bd2a:	55 1f       	adc	r21, r21
   1bd2c:	59 f0       	breq	.+22     	; 0x1bd44 <__fp_splitA+0x10>
   1bd2e:	5f 3f       	cpi	r21, 0xFF	; 255
   1bd30:	71 f0       	breq	.+28     	; 0x1bd4e <__fp_splitA+0x1a>
   1bd32:	47 95       	ror	r20

0001bd34 <__fp_splitA>:
   1bd34:	88 0f       	add	r24, r24
   1bd36:	97 fb       	bst	r25, 7
   1bd38:	99 1f       	adc	r25, r25
   1bd3a:	61 f0       	breq	.+24     	; 0x1bd54 <__fp_splitA+0x20>
   1bd3c:	9f 3f       	cpi	r25, 0xFF	; 255
   1bd3e:	79 f0       	breq	.+30     	; 0x1bd5e <__fp_splitA+0x2a>
   1bd40:	87 95       	ror	r24
   1bd42:	08 95       	ret
   1bd44:	12 16       	cp	r1, r18
   1bd46:	13 06       	cpc	r1, r19
   1bd48:	14 06       	cpc	r1, r20
   1bd4a:	55 1f       	adc	r21, r21
   1bd4c:	f2 cf       	rjmp	.-28     	; 0x1bd32 <__fp_split3+0xe>
   1bd4e:	46 95       	lsr	r20
   1bd50:	f1 df       	rcall	.-30     	; 0x1bd34 <__fp_splitA>
   1bd52:	08 c0       	rjmp	.+16     	; 0x1bd64 <__fp_splitA+0x30>
   1bd54:	16 16       	cp	r1, r22
   1bd56:	17 06       	cpc	r1, r23
   1bd58:	18 06       	cpc	r1, r24
   1bd5a:	99 1f       	adc	r25, r25
   1bd5c:	f1 cf       	rjmp	.-30     	; 0x1bd40 <__fp_splitA+0xc>
   1bd5e:	86 95       	lsr	r24
   1bd60:	71 05       	cpc	r23, r1
   1bd62:	61 05       	cpc	r22, r1
   1bd64:	08 94       	sec
   1bd66:	08 95       	ret

0001bd68 <__fp_zero>:
__fp_zero():
   1bd68:	e8 94       	clt

0001bd6a <__fp_szero>:
   1bd6a:	bb 27       	eor	r27, r27
   1bd6c:	66 27       	eor	r22, r22
   1bd6e:	77 27       	eor	r23, r23
   1bd70:	cb 01       	movw	r24, r22
   1bd72:	97 f9       	bld	r25, 7
   1bd74:	08 95       	ret

0001bd76 <eeprom_read_byte>:
eeprom_read_byte():
   1bd76:	f9 99       	sbic	0x1f, 1	; 31
   1bd78:	fe cf       	rjmp	.-4      	; 0x1bd76 <eeprom_read_byte>
   1bd7a:	92 bd       	out	0x22, r25	; 34
   1bd7c:	81 bd       	out	0x21, r24	; 33
   1bd7e:	f8 9a       	sbi	0x1f, 0	; 31
   1bd80:	99 27       	eor	r25, r25
   1bd82:	80 b5       	in	r24, 0x20	; 32
   1bd84:	08 95       	ret

0001bd86 <eeprom_write_byte>:
eeprom_write_byte():
   1bd86:	26 2f       	mov	r18, r22

0001bd88 <eeprom_write_r18>:
   1bd88:	f9 99       	sbic	0x1f, 1	; 31
   1bd8a:	fe cf       	rjmp	.-4      	; 0x1bd88 <eeprom_write_r18>
   1bd8c:	1f ba       	out	0x1f, r1	; 31
   1bd8e:	92 bd       	out	0x22, r25	; 34
   1bd90:	81 bd       	out	0x21, r24	; 33
   1bd92:	20 bd       	out	0x20, r18	; 32
   1bd94:	0f b6       	in	r0, 0x3f	; 63
   1bd96:	f8 94       	cli
   1bd98:	fa 9a       	sbi	0x1f, 2	; 31
   1bd9a:	f9 9a       	sbi	0x1f, 1	; 31
   1bd9c:	0f be       	out	0x3f, r0	; 63
   1bd9e:	01 96       	adiw	r24, 0x01	; 1
   1bda0:	08 95       	ret

0001bda2 <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   1bda2:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   1bda4:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   1bda6:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   1bda8:	0e 94 4a df 	call	0x1be94	; 0x1be94 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   1bdac:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   1bdae:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   1bdb0:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   1bdb2:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   1bdb4:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   1bdb6:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   1bdb8:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   1bdba:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   1bdbc:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   1bdbe:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   1bdc0:	08 95       	ret

0001bdc2 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   1bdc2:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   1bdc4:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   1bdc6:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   1bdc8:	07 c0       	rjmp	.+14     	; 0x1bdd8 <__udivmodhi4_ep>

0001bdca <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   1bdca:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   1bdcc:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   1bdce:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   1bdd0:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   1bdd2:	10 f0       	brcs	.+4      	; 0x1bdd8 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   1bdd4:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   1bdd6:	b7 0b       	sbc	r27, r23

0001bdd8 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   1bdd8:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   1bdda:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   1bddc:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   1bdde:	a9 f7       	brne	.-22     	; 0x1bdca <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   1bde0:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   1bde2:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   1bde4:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   1bde6:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   1bde8:	08 95       	ret

0001bdea <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   1bdea:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   1bdec:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   1bdee:	16 f4       	brtc	.+4      	; 0x1bdf4 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   1bdf0:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   1bdf2:	07 d0       	rcall	.+14     	; 0x1be02 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   1bdf4:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   1bdf6:	09 d0       	rcall	.+18     	; 0x1be0a <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   1bdf8:	0e 94 e1 de 	call	0x1bdc2	; 0x1bdc2 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   1bdfc:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   1bdfe:	05 d0       	rcall	.+10     	; 0x1be0a <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   1be00:	3e f4       	brtc	.+14     	; 0x1be10 <__divmodhi4_exit>

0001be02 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   1be02:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   1be04:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   1be06:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   1be08:	08 95       	ret

0001be0a <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   1be0a:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   1be0c:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   1be0e:	7f 4f       	sbci	r23, 0xFF	; 255

0001be10 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   1be10:	08 95       	ret

0001be12 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   1be12:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   1be14:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   1be16:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   1be18:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   1be1a:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   1be1c:	0d c0       	rjmp	.+26     	; 0x1be38 <__udivmodsi4_ep>

0001be1e <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   1be1e:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   1be20:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   1be22:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   1be24:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   1be26:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   1be28:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   1be2a:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   1be2c:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   1be2e:	20 f0       	brcs	.+8      	; 0x1be38 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   1be30:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   1be32:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   1be34:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   1be36:	f5 0b       	sbc	r31, r21

0001be38 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   1be38:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   1be3a:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   1be3c:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   1be3e:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   1be40:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   1be42:	69 f7       	brne	.-38     	; 0x1be1e <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   1be44:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   1be46:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   1be48:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   1be4a:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   1be4c:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   1be4e:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   1be50:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   1be52:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   1be54:	08 95       	ret

0001be56 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   1be56:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   1be58:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   1be5a:	1e f4       	brtc	.+6      	; 0x1be62 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   1be5c:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   1be5e:	0e 94 42 df 	call	0x1be84	; 0x1be84 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   1be62:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   1be64:	07 d0       	rcall	.+14     	; 0x1be74 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   1be66:	0e 94 09 df 	call	0x1be12	; 0x1be12 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   1be6a:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   1be6c:	03 d0       	rcall	.+6      	; 0x1be74 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   1be6e:	4e f4       	brtc	.+18     	; 0x1be82 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   1be70:	0c 94 42 df 	jmp	0x1be84	; 0x1be84 <__negsi2>

0001be74 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   1be74:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   1be76:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   1be78:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   1be7a:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   1be7c:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   1be7e:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   1be80:	5f 4f       	sbci	r21, 0xFF	; 255

0001be82 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   1be82:	08 95       	ret

0001be84 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   1be84:	90 95       	com	r25
   1be86:	80 95       	com	r24
   1be88:	70 95       	com	r23
   1be8a:	61 95       	neg	r22
   1be8c:	7f 4f       	sbci	r23, 0xFF	; 255
   1be8e:	8f 4f       	sbci	r24, 0xFF	; 255
   1be90:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   1be92:	08 95       	ret

0001be94 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   1be94:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   1be98:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   1be9a:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   1be9c:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   1be9e:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   1bea0:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   1bea2:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   1bea4:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   1bea6:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   1bea8:	08 95       	ret

0001beaa <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   1beaa:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   1beac:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   1beae:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   1beb0:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   1beb2:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   1beb4:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   1beb6:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   1beb8:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   1beba:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   1bebc:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   1bebe:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   1bec0:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   1bec2:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   1bec4:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   1bec6:	08 95       	ret

0001bec8 <__subsf3>:
__subsf3():
   1bec8:	50 58       	subi	r21, 0x80	; 128

0001beca <__addsf3>:
   1beca:	bb 27       	eor	r27, r27
   1becc:	aa 27       	eor	r26, r26
   1bece:	0e 94 7c df 	call	0x1bef8	; 0x1bef8 <__addsf3x>
   1bed2:	0c 94 81 de 	jmp	0x1bd02	; 0x1bd02 <__fp_round>
__addsf3():
   1bed6:	0e 94 73 de 	call	0x1bce6	; 0x1bce6 <__fp_pscA>
   1beda:	38 f0       	brcs	.+14     	; 0x1beea <__addsf3+0x20>
   1bedc:	0e 94 7a de 	call	0x1bcf4	; 0x1bcf4 <__fp_pscB>
   1bee0:	20 f0       	brcs	.+8      	; 0x1beea <__addsf3+0x20>
   1bee2:	39 f4       	brne	.+14     	; 0x1bef2 <__addsf3+0x28>
   1bee4:	9f 3f       	cpi	r25, 0xFF	; 255
   1bee6:	19 f4       	brne	.+6      	; 0x1beee <__addsf3+0x24>
   1bee8:	26 f4       	brtc	.+8      	; 0x1bef2 <__addsf3+0x28>
   1beea:	0c 94 70 de 	jmp	0x1bce0	; 0x1bce0 <__fp_nan>
   1beee:	0e f4       	brtc	.+2      	; 0x1bef2 <__addsf3+0x28>
   1bef0:	e0 95       	com	r30
   1bef2:	e7 fb       	bst	r30, 7
   1bef4:	0c 94 6a de 	jmp	0x1bcd4	; 0x1bcd4 <__fp_inf>

0001bef8 <__addsf3x>:
__addsf3x():
   1bef8:	e9 2f       	mov	r30, r25
   1befa:	0e 94 92 de 	call	0x1bd24	; 0x1bd24 <__fp_split3>
   1befe:	58 f3       	brcs	.-42     	; 0x1bed6 <__addsf3+0xc>
   1bf00:	ba 17       	cp	r27, r26
   1bf02:	62 07       	cpc	r22, r18
   1bf04:	73 07       	cpc	r23, r19
   1bf06:	84 07       	cpc	r24, r20
   1bf08:	95 07       	cpc	r25, r21
   1bf0a:	20 f0       	brcs	.+8      	; 0x1bf14 <__addsf3x+0x1c>
   1bf0c:	79 f4       	brne	.+30     	; 0x1bf2c <__addsf3x+0x34>
   1bf0e:	a6 f5       	brtc	.+104    	; 0x1bf78 <__addsf3x+0x80>
   1bf10:	0c 94 b4 de 	jmp	0x1bd68	; 0x1bd68 <__fp_zero>
   1bf14:	0e f4       	brtc	.+2      	; 0x1bf18 <__addsf3x+0x20>
   1bf16:	e0 95       	com	r30
   1bf18:	0b 2e       	mov	r0, r27
   1bf1a:	ba 2f       	mov	r27, r26
   1bf1c:	a0 2d       	mov	r26, r0
   1bf1e:	0b 01       	movw	r0, r22
   1bf20:	b9 01       	movw	r22, r18
   1bf22:	90 01       	movw	r18, r0
   1bf24:	0c 01       	movw	r0, r24
   1bf26:	ca 01       	movw	r24, r20
   1bf28:	a0 01       	movw	r20, r0
   1bf2a:	11 24       	eor	r1, r1
   1bf2c:	ff 27       	eor	r31, r31
   1bf2e:	59 1b       	sub	r21, r25
   1bf30:	99 f0       	breq	.+38     	; 0x1bf58 <__addsf3x+0x60>
   1bf32:	59 3f       	cpi	r21, 0xF9	; 249
   1bf34:	50 f4       	brcc	.+20     	; 0x1bf4a <__addsf3x+0x52>
   1bf36:	50 3e       	cpi	r21, 0xE0	; 224
   1bf38:	68 f1       	brcs	.+90     	; 0x1bf94 <__addsf3x+0x9c>
   1bf3a:	1a 16       	cp	r1, r26
   1bf3c:	f0 40       	sbci	r31, 0x00	; 0
   1bf3e:	a2 2f       	mov	r26, r18
   1bf40:	23 2f       	mov	r18, r19
   1bf42:	34 2f       	mov	r19, r20
   1bf44:	44 27       	eor	r20, r20
   1bf46:	58 5f       	subi	r21, 0xF8	; 248
   1bf48:	f3 cf       	rjmp	.-26     	; 0x1bf30 <__addsf3x+0x38>
   1bf4a:	46 95       	lsr	r20
   1bf4c:	37 95       	ror	r19
   1bf4e:	27 95       	ror	r18
   1bf50:	a7 95       	ror	r26
   1bf52:	f0 40       	sbci	r31, 0x00	; 0
   1bf54:	53 95       	inc	r21
   1bf56:	c9 f7       	brne	.-14     	; 0x1bf4a <__addsf3x+0x52>
   1bf58:	7e f4       	brtc	.+30     	; 0x1bf78 <__addsf3x+0x80>
   1bf5a:	1f 16       	cp	r1, r31
   1bf5c:	ba 0b       	sbc	r27, r26
   1bf5e:	62 0b       	sbc	r22, r18
   1bf60:	73 0b       	sbc	r23, r19
   1bf62:	84 0b       	sbc	r24, r20
   1bf64:	ba f0       	brmi	.+46     	; 0x1bf94 <__addsf3x+0x9c>
   1bf66:	91 50       	subi	r25, 0x01	; 1
   1bf68:	a1 f0       	breq	.+40     	; 0x1bf92 <__addsf3x+0x9a>
   1bf6a:	ff 0f       	add	r31, r31
   1bf6c:	bb 1f       	adc	r27, r27
   1bf6e:	66 1f       	adc	r22, r22
   1bf70:	77 1f       	adc	r23, r23
   1bf72:	88 1f       	adc	r24, r24
   1bf74:	c2 f7       	brpl	.-16     	; 0x1bf66 <__addsf3x+0x6e>
   1bf76:	0e c0       	rjmp	.+28     	; 0x1bf94 <__addsf3x+0x9c>
   1bf78:	ba 0f       	add	r27, r26
   1bf7a:	62 1f       	adc	r22, r18
   1bf7c:	73 1f       	adc	r23, r19
   1bf7e:	84 1f       	adc	r24, r20
   1bf80:	48 f4       	brcc	.+18     	; 0x1bf94 <__addsf3x+0x9c>
   1bf82:	87 95       	ror	r24
   1bf84:	77 95       	ror	r23
   1bf86:	67 95       	ror	r22
   1bf88:	b7 95       	ror	r27
   1bf8a:	f7 95       	ror	r31
   1bf8c:	9e 3f       	cpi	r25, 0xFE	; 254
   1bf8e:	08 f0       	brcs	.+2      	; 0x1bf92 <__addsf3x+0x9a>
   1bf90:	b0 cf       	rjmp	.-160    	; 0x1bef2 <__addsf3+0x28>
   1bf92:	93 95       	inc	r25
   1bf94:	88 0f       	add	r24, r24
   1bf96:	08 f0       	brcs	.+2      	; 0x1bf9a <__addsf3x+0xa2>
   1bf98:	99 27       	eor	r25, r25
   1bf9a:	ee 0f       	add	r30, r30
   1bf9c:	97 95       	ror	r25
   1bf9e:	87 95       	ror	r24
   1bfa0:	08 95       	ret

0001bfa2 <__divsf3>:
   1bfa2:	0e 94 e5 df 	call	0x1bfca	; 0x1bfca <__divsf3x>
   1bfa6:	0c 94 81 de 	jmp	0x1bd02	; 0x1bd02 <__fp_round>
   1bfaa:	0e 94 7a de 	call	0x1bcf4	; 0x1bcf4 <__fp_pscB>
   1bfae:	58 f0       	brcs	.+22     	; 0x1bfc6 <__divsf3+0x24>
   1bfb0:	0e 94 73 de 	call	0x1bce6	; 0x1bce6 <__fp_pscA>
   1bfb4:	40 f0       	brcs	.+16     	; 0x1bfc6 <__divsf3+0x24>
   1bfb6:	29 f4       	brne	.+10     	; 0x1bfc2 <__divsf3+0x20>
   1bfb8:	5f 3f       	cpi	r21, 0xFF	; 255
   1bfba:	29 f0       	breq	.+10     	; 0x1bfc6 <__divsf3+0x24>
   1bfbc:	0c 94 6a de 	jmp	0x1bcd4	; 0x1bcd4 <__fp_inf>
   1bfc0:	51 11       	cpse	r21, r1
   1bfc2:	0c 94 b5 de 	jmp	0x1bd6a	; 0x1bd6a <__fp_szero>
__divsf3():
   1bfc6:	0c 94 70 de 	jmp	0x1bce0	; 0x1bce0 <__fp_nan>

0001bfca <__divsf3x>:
__divsf3x():
   1bfca:	0e 94 92 de 	call	0x1bd24	; 0x1bd24 <__fp_split3>
   1bfce:	68 f3       	brcs	.-38     	; 0x1bfaa <__divsf3+0x8>

0001bfd0 <__divsf3_pse>:
   1bfd0:	99 23       	and	r25, r25
   1bfd2:	b1 f3       	breq	.-20     	; 0x1bfc0 <__divsf3+0x1e>
   1bfd4:	55 23       	and	r21, r21
   1bfd6:	91 f3       	breq	.-28     	; 0x1bfbc <__divsf3+0x1a>
   1bfd8:	95 1b       	sub	r25, r21
   1bfda:	55 0b       	sbc	r21, r21
   1bfdc:	bb 27       	eor	r27, r27
   1bfde:	aa 27       	eor	r26, r26
   1bfe0:	62 17       	cp	r22, r18
   1bfe2:	73 07       	cpc	r23, r19
   1bfe4:	84 07       	cpc	r24, r20
   1bfe6:	38 f0       	brcs	.+14     	; 0x1bff6 <__divsf3_pse+0x26>
   1bfe8:	9f 5f       	subi	r25, 0xFF	; 255
   1bfea:	5f 4f       	sbci	r21, 0xFF	; 255
   1bfec:	22 0f       	add	r18, r18
   1bfee:	33 1f       	adc	r19, r19
   1bff0:	44 1f       	adc	r20, r20
   1bff2:	aa 1f       	adc	r26, r26
   1bff4:	a9 f3       	breq	.-22     	; 0x1bfe0 <__divsf3_pse+0x10>
   1bff6:	35 d0       	rcall	.+106    	; 0x1c062 <__divsf3_pse+0x92>
   1bff8:	0e 2e       	mov	r0, r30
   1bffa:	3a f0       	brmi	.+14     	; 0x1c00a <__divsf3_pse+0x3a>
   1bffc:	e0 e8       	ldi	r30, 0x80	; 128
   1bffe:	32 d0       	rcall	.+100    	; 0x1c064 <__divsf3_pse+0x94>
   1c000:	91 50       	subi	r25, 0x01	; 1
   1c002:	50 40       	sbci	r21, 0x00	; 0
   1c004:	e6 95       	lsr	r30
   1c006:	00 1c       	adc	r0, r0
   1c008:	ca f7       	brpl	.-14     	; 0x1bffc <__divsf3_pse+0x2c>
   1c00a:	2b d0       	rcall	.+86     	; 0x1c062 <__divsf3_pse+0x92>
   1c00c:	fe 2f       	mov	r31, r30
   1c00e:	29 d0       	rcall	.+82     	; 0x1c062 <__divsf3_pse+0x92>
   1c010:	66 0f       	add	r22, r22
   1c012:	77 1f       	adc	r23, r23
   1c014:	88 1f       	adc	r24, r24
   1c016:	bb 1f       	adc	r27, r27
   1c018:	26 17       	cp	r18, r22
   1c01a:	37 07       	cpc	r19, r23
   1c01c:	48 07       	cpc	r20, r24
   1c01e:	ab 07       	cpc	r26, r27
   1c020:	b0 e8       	ldi	r27, 0x80	; 128
   1c022:	09 f0       	breq	.+2      	; 0x1c026 <__divsf3_pse+0x56>
   1c024:	bb 0b       	sbc	r27, r27
   1c026:	80 2d       	mov	r24, r0
   1c028:	bf 01       	movw	r22, r30
   1c02a:	ff 27       	eor	r31, r31
   1c02c:	93 58       	subi	r25, 0x83	; 131
   1c02e:	5f 4f       	sbci	r21, 0xFF	; 255
   1c030:	3a f0       	brmi	.+14     	; 0x1c040 <__divsf3_pse+0x70>
   1c032:	9e 3f       	cpi	r25, 0xFE	; 254
   1c034:	51 05       	cpc	r21, r1
   1c036:	78 f0       	brcs	.+30     	; 0x1c056 <__divsf3_pse+0x86>
   1c038:	0c 94 6a de 	jmp	0x1bcd4	; 0x1bcd4 <__fp_inf>
   1c03c:	0c 94 b5 de 	jmp	0x1bd6a	; 0x1bd6a <__fp_szero>
   1c040:	5f 3f       	cpi	r21, 0xFF	; 255
   1c042:	e4 f3       	brlt	.-8      	; 0x1c03c <__divsf3_pse+0x6c>
   1c044:	98 3e       	cpi	r25, 0xE8	; 232
   1c046:	d4 f3       	brlt	.-12     	; 0x1c03c <__divsf3_pse+0x6c>
   1c048:	86 95       	lsr	r24
   1c04a:	77 95       	ror	r23
   1c04c:	67 95       	ror	r22
   1c04e:	b7 95       	ror	r27
   1c050:	f7 95       	ror	r31
   1c052:	9f 5f       	subi	r25, 0xFF	; 255
   1c054:	c9 f7       	brne	.-14     	; 0x1c048 <__divsf3_pse+0x78>
   1c056:	88 0f       	add	r24, r24
   1c058:	91 1d       	adc	r25, r1
   1c05a:	96 95       	lsr	r25
   1c05c:	87 95       	ror	r24
   1c05e:	97 f9       	bld	r25, 7
   1c060:	08 95       	ret
   1c062:	e1 e0       	ldi	r30, 0x01	; 1
   1c064:	66 0f       	add	r22, r22
   1c066:	77 1f       	adc	r23, r23
   1c068:	88 1f       	adc	r24, r24
   1c06a:	bb 1f       	adc	r27, r27
   1c06c:	62 17       	cp	r22, r18
   1c06e:	73 07       	cpc	r23, r19
   1c070:	84 07       	cpc	r24, r20
   1c072:	ba 07       	cpc	r27, r26
   1c074:	20 f0       	brcs	.+8      	; 0x1c07e <__divsf3_pse+0xae>
   1c076:	62 1b       	sub	r22, r18
   1c078:	73 0b       	sbc	r23, r19
   1c07a:	84 0b       	sbc	r24, r20
   1c07c:	ba 0b       	sbc	r27, r26
   1c07e:	ee 1f       	adc	r30, r30
   1c080:	88 f7       	brcc	.-30     	; 0x1c064 <__divsf3_pse+0x94>
   1c082:	e0 95       	com	r30
   1c084:	08 95       	ret

0001c086 <__fixsfsi>:
   1c086:	0e 94 4a e0 	call	0x1c094	; 0x1c094 <__fixunssfsi>
   1c08a:	68 94       	set
   1c08c:	b1 11       	cpse	r27, r1
   1c08e:	0c 94 b5 de 	jmp	0x1bd6a	; 0x1bd6a <__fp_szero>
   1c092:	08 95       	ret

0001c094 <__fixunssfsi>:
   1c094:	0e 94 9a de 	call	0x1bd34	; 0x1bd34 <__fp_splitA>
   1c098:	88 f0       	brcs	.+34     	; 0x1c0bc <__fixunssfsi+0x28>
   1c09a:	9f 57       	subi	r25, 0x7F	; 127
   1c09c:	98 f0       	brcs	.+38     	; 0x1c0c4 <__fixunssfsi+0x30>
   1c09e:	b9 2f       	mov	r27, r25
   1c0a0:	99 27       	eor	r25, r25
   1c0a2:	b7 51       	subi	r27, 0x17	; 23
   1c0a4:	b0 f0       	brcs	.+44     	; 0x1c0d2 <__fixunssfsi+0x3e>
__fixunssfsi():
   1c0a6:	e1 f0       	breq	.+56     	; 0x1c0e0 <__fixunssfsi+0x4c>
   1c0a8:	66 0f       	add	r22, r22
   1c0aa:	77 1f       	adc	r23, r23
   1c0ac:	88 1f       	adc	r24, r24
   1c0ae:	99 1f       	adc	r25, r25
   1c0b0:	1a f0       	brmi	.+6      	; 0x1c0b8 <__fixunssfsi+0x24>
   1c0b2:	ba 95       	dec	r27
   1c0b4:	c9 f7       	brne	.-14     	; 0x1c0a8 <__fixunssfsi+0x14>
   1c0b6:	14 c0       	rjmp	.+40     	; 0x1c0e0 <__fixunssfsi+0x4c>
   1c0b8:	b1 30       	cpi	r27, 0x01	; 1
   1c0ba:	91 f0       	breq	.+36     	; 0x1c0e0 <__fixunssfsi+0x4c>
   1c0bc:	0e 94 b4 de 	call	0x1bd68	; 0x1bd68 <__fp_zero>
   1c0c0:	b1 e0       	ldi	r27, 0x01	; 1
   1c0c2:	08 95       	ret
   1c0c4:	0c 94 b4 de 	jmp	0x1bd68	; 0x1bd68 <__fp_zero>
   1c0c8:	67 2f       	mov	r22, r23
   1c0ca:	78 2f       	mov	r23, r24
   1c0cc:	88 27       	eor	r24, r24
   1c0ce:	b8 5f       	subi	r27, 0xF8	; 248
   1c0d0:	39 f0       	breq	.+14     	; 0x1c0e0 <__fixunssfsi+0x4c>
   1c0d2:	b9 3f       	cpi	r27, 0xF9	; 249
   1c0d4:	cc f3       	brlt	.-14     	; 0x1c0c8 <__fixunssfsi+0x34>
   1c0d6:	86 95       	lsr	r24
   1c0d8:	77 95       	ror	r23
   1c0da:	67 95       	ror	r22
   1c0dc:	b3 95       	inc	r27
   1c0de:	d9 f7       	brne	.-10     	; 0x1c0d6 <__fixunssfsi+0x42>
   1c0e0:	3e f4       	brtc	.+14     	; 0x1c0f0 <__fixunssfsi+0x5c>
   1c0e2:	90 95       	com	r25
   1c0e4:	80 95       	com	r24
   1c0e6:	70 95       	com	r23
   1c0e8:	61 95       	neg	r22
   1c0ea:	7f 4f       	sbci	r23, 0xFF	; 255
   1c0ec:	8f 4f       	sbci	r24, 0xFF	; 255
   1c0ee:	9f 4f       	sbci	r25, 0xFF	; 255
   1c0f0:	08 95       	ret

0001c0f2 <__gesf2>:
__gesf2():
   1c0f2:	0e 94 d9 dd 	call	0x1bbb2	; 0x1bbb2 <__fp_cmp>
   1c0f6:	08 f4       	brcc	.+2      	; 0x1c0fa <__gesf2+0x8>
   1c0f8:	8f ef       	ldi	r24, 0xFF	; 255
   1c0fa:	08 95       	ret

0001c0fc <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   1c0fc:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   1c0fe:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   1c100:	04 c0       	rjmp	.+8      	; 0x1c10a <__udivmodqi4_ep>

0001c102 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   1c102:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   1c104:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   1c106:	08 f0       	brcs	.+2      	; 0x1c10a <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   1c108:	96 1b       	sub	r25, r22

0001c10a <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   1c10a:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   1c10c:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   1c10e:	c9 f7       	brne	.-14     	; 0x1c102 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   1c110:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   1c112:	08 95       	ret

0001c114 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   1c114:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   1c116:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   1c118:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   1c11a:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   1c11c:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   1c11e:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   1c120:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   1c122:	19 94       	eijmp

0001c124 <realloc>:
realloc():
   1c124:	4f 92       	push	r4
   1c126:	5f 92       	push	r5
   1c128:	6f 92       	push	r6
   1c12a:	7f 92       	push	r7
   1c12c:	8f 92       	push	r8
   1c12e:	9f 92       	push	r9
   1c130:	af 92       	push	r10
   1c132:	bf 92       	push	r11
   1c134:	cf 92       	push	r12
   1c136:	df 92       	push	r13
   1c138:	ef 92       	push	r14
   1c13a:	ff 92       	push	r15
   1c13c:	0f 93       	push	r16
   1c13e:	1f 93       	push	r17
   1c140:	cf 93       	push	r28
   1c142:	df 93       	push	r29
   1c144:	8c 01       	movw	r16, r24
   1c146:	00 97       	sbiw	r24, 0x00	; 0
   1c148:	99 f4       	brne	.+38     	; 0x1c170 <realloc+0x4c>
   1c14a:	cb 01       	movw	r24, r22
   1c14c:	df 91       	pop	r29
   1c14e:	cf 91       	pop	r28
   1c150:	1f 91       	pop	r17
   1c152:	0f 91       	pop	r16
   1c154:	ff 90       	pop	r15
   1c156:	ef 90       	pop	r14
   1c158:	df 90       	pop	r13
   1c15a:	cf 90       	pop	r12
   1c15c:	bf 90       	pop	r11
   1c15e:	af 90       	pop	r10
   1c160:	9f 90       	pop	r9
   1c162:	8f 90       	pop	r8
   1c164:	7f 90       	pop	r7
   1c166:	6f 90       	pop	r6
   1c168:	5f 90       	pop	r5
   1c16a:	4f 90       	pop	r4
   1c16c:	0c 94 66 d9 	jmp	0x1b2cc	; 0x1b2cc <malloc>
   1c170:	fc 01       	movw	r30, r24
   1c172:	e6 0f       	add	r30, r22
   1c174:	f7 1f       	adc	r31, r23
   1c176:	9c 01       	movw	r18, r24
   1c178:	22 50       	subi	r18, 0x02	; 2
   1c17a:	31 09       	sbc	r19, r1
   1c17c:	e2 17       	cp	r30, r18
   1c17e:	f3 07       	cpc	r31, r19
   1c180:	08 f4       	brcc	.+2      	; 0x1c184 <realloc+0x60>
   1c182:	ae c0       	rjmp	.+348    	; 0x1c2e0 <realloc+0x1bc>
   1c184:	d9 01       	movw	r26, r18
   1c186:	cd 91       	ld	r28, X+
   1c188:	dc 91       	ld	r29, X
   1c18a:	11 97       	sbiw	r26, 0x01	; 1
   1c18c:	c6 17       	cp	r28, r22
   1c18e:	d7 07       	cpc	r29, r23
   1c190:	20 f1       	brcs	.+72     	; 0x1c1da <realloc+0xb6>
   1c192:	c5 30       	cpi	r28, 0x05	; 5
   1c194:	d1 05       	cpc	r29, r1
   1c196:	78 f0       	brcs	.+30     	; 0x1c1b6 <realloc+0x92>
   1c198:	ce 01       	movw	r24, r28
   1c19a:	04 97       	sbiw	r24, 0x04	; 4
   1c19c:	86 17       	cp	r24, r22
   1c19e:	97 07       	cpc	r25, r23
   1c1a0:	50 f0       	brcs	.+20     	; 0x1c1b6 <realloc+0x92>
   1c1a2:	c6 1b       	sub	r28, r22
   1c1a4:	d7 0b       	sbc	r29, r23
   1c1a6:	22 97       	sbiw	r28, 0x02	; 2
   1c1a8:	c1 93       	st	Z+, r28
   1c1aa:	d1 93       	st	Z+, r29
   1c1ac:	6d 93       	st	X+, r22
   1c1ae:	7c 93       	st	X, r23
   1c1b0:	cf 01       	movw	r24, r30
   1c1b2:	0e 94 02 da 	call	0x1b404	; 0x1b404 <free>
   1c1b6:	c8 01       	movw	r24, r16
   1c1b8:	df 91       	pop	r29
   1c1ba:	cf 91       	pop	r28
   1c1bc:	1f 91       	pop	r17
   1c1be:	0f 91       	pop	r16
   1c1c0:	ff 90       	pop	r15
   1c1c2:	ef 90       	pop	r14
   1c1c4:	df 90       	pop	r13
   1c1c6:	cf 90       	pop	r12
   1c1c8:	bf 90       	pop	r11
   1c1ca:	af 90       	pop	r10
   1c1cc:	9f 90       	pop	r9
   1c1ce:	8f 90       	pop	r8
   1c1d0:	7f 90       	pop	r7
   1c1d2:	6f 90       	pop	r6
   1c1d4:	5f 90       	pop	r5
   1c1d6:	4f 90       	pop	r4
   1c1d8:	08 95       	ret
   1c1da:	5b 01       	movw	r10, r22
   1c1dc:	ac 1a       	sub	r10, r28
   1c1de:	bd 0a       	sbc	r11, r29
   1c1e0:	4c 01       	movw	r8, r24
   1c1e2:	8c 0e       	add	r8, r28
   1c1e4:	9d 1e       	adc	r9, r29
   1c1e6:	a0 91 6d 14 	lds	r26, 0x146D	; 0x80146d <__flp>
   1c1ea:	b0 91 6e 14 	lds	r27, 0x146E	; 0x80146e <__flp+0x1>
   1c1ee:	51 2c       	mov	r5, r1
   1c1f0:	41 2c       	mov	r4, r1
   1c1f2:	f1 2c       	mov	r15, r1
   1c1f4:	e1 2c       	mov	r14, r1
   1c1f6:	10 97       	sbiw	r26, 0x00	; 0
   1c1f8:	31 f5       	brne	.+76     	; 0x1c246 <realloc+0x122>
   1c1fa:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <__brkval>
   1c1fe:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <__brkval+0x1>
   1c202:	88 15       	cp	r24, r8
   1c204:	99 05       	cpc	r25, r9
   1c206:	09 f0       	breq	.+2      	; 0x1c20a <realloc+0xe6>
   1c208:	5c c0       	rjmp	.+184    	; 0x1c2c2 <realloc+0x19e>
   1c20a:	46 16       	cp	r4, r22
   1c20c:	57 06       	cpc	r5, r23
   1c20e:	08 f0       	brcs	.+2      	; 0x1c212 <realloc+0xee>
   1c210:	58 c0       	rjmp	.+176    	; 0x1c2c2 <realloc+0x19e>
   1c212:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__malloc_heap_end>
   1c216:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__malloc_heap_end+0x1>
   1c21a:	00 97       	sbiw	r24, 0x00	; 0
   1c21c:	41 f4       	brne	.+16     	; 0x1c22e <realloc+0x10a>
   1c21e:	8d b7       	in	r24, 0x3d	; 61
   1c220:	9e b7       	in	r25, 0x3e	; 62
   1c222:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <__malloc_margin>
   1c226:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <__malloc_margin+0x1>
   1c22a:	84 1b       	sub	r24, r20
   1c22c:	95 0b       	sbc	r25, r21
   1c22e:	e8 17       	cp	r30, r24
   1c230:	f9 07       	cpc	r31, r25
   1c232:	08 f0       	brcs	.+2      	; 0x1c236 <realloc+0x112>
   1c234:	55 c0       	rjmp	.+170    	; 0x1c2e0 <realloc+0x1bc>
   1c236:	f0 93 6c 14 	sts	0x146C, r31	; 0x80146c <__brkval+0x1>
   1c23a:	e0 93 6b 14 	sts	0x146B, r30	; 0x80146b <__brkval>
   1c23e:	f9 01       	movw	r30, r18
   1c240:	71 83       	std	Z+1, r23	; 0x01
   1c242:	60 83       	st	Z, r22
   1c244:	b8 cf       	rjmp	.-144    	; 0x1c1b6 <realloc+0x92>
   1c246:	8d 91       	ld	r24, X+
   1c248:	9c 91       	ld	r25, X
   1c24a:	11 97       	sbiw	r26, 0x01	; 1
   1c24c:	12 96       	adiw	r26, 0x02	; 2
   1c24e:	6c 90       	ld	r6, X
   1c250:	12 97       	sbiw	r26, 0x02	; 2
   1c252:	13 96       	adiw	r26, 0x03	; 3
   1c254:	7c 90       	ld	r7, X
   1c256:	13 97       	sbiw	r26, 0x03	; 3
   1c258:	a8 15       	cp	r26, r8
   1c25a:	b9 05       	cpc	r27, r9
   1c25c:	59 f5       	brne	.+86     	; 0x1c2b4 <realloc+0x190>
   1c25e:	6c 01       	movw	r12, r24
   1c260:	42 e0       	ldi	r20, 0x02	; 2
   1c262:	c4 0e       	add	r12, r20
   1c264:	d1 1c       	adc	r13, r1
   1c266:	ca 14       	cp	r12, r10
   1c268:	db 04       	cpc	r13, r11
   1c26a:	20 f1       	brcs	.+72     	; 0x1c2b4 <realloc+0x190>
   1c26c:	ac 01       	movw	r20, r24
   1c26e:	4a 19       	sub	r20, r10
   1c270:	5b 09       	sbc	r21, r11
   1c272:	da 01       	movw	r26, r20
   1c274:	12 96       	adiw	r26, 0x02	; 2
   1c276:	15 97       	sbiw	r26, 0x05	; 5
   1c278:	80 f0       	brcs	.+32     	; 0x1c29a <realloc+0x176>
   1c27a:	62 82       	std	Z+2, r6	; 0x02
   1c27c:	73 82       	std	Z+3, r7	; 0x03
   1c27e:	51 83       	std	Z+1, r21	; 0x01
   1c280:	40 83       	st	Z, r20
   1c282:	d9 01       	movw	r26, r18
   1c284:	6d 93       	st	X+, r22
   1c286:	7c 93       	st	X, r23
   1c288:	e1 14       	cp	r14, r1
   1c28a:	f1 04       	cpc	r15, r1
   1c28c:	71 f0       	breq	.+28     	; 0x1c2aa <realloc+0x186>
   1c28e:	d7 01       	movw	r26, r14
   1c290:	13 96       	adiw	r26, 0x03	; 3
   1c292:	fc 93       	st	X, r31
   1c294:	ee 93       	st	-X, r30
   1c296:	12 97       	sbiw	r26, 0x02	; 2
   1c298:	8e cf       	rjmp	.-228    	; 0x1c1b6 <realloc+0x92>
   1c29a:	22 96       	adiw	r28, 0x02	; 2
   1c29c:	8c 0f       	add	r24, r28
   1c29e:	9d 1f       	adc	r25, r29
   1c2a0:	f9 01       	movw	r30, r18
   1c2a2:	91 83       	std	Z+1, r25	; 0x01
   1c2a4:	80 83       	st	Z, r24
   1c2a6:	f3 01       	movw	r30, r6
   1c2a8:	ef cf       	rjmp	.-34     	; 0x1c288 <realloc+0x164>
   1c2aa:	f0 93 6e 14 	sts	0x146E, r31	; 0x80146e <__flp+0x1>
   1c2ae:	e0 93 6d 14 	sts	0x146D, r30	; 0x80146d <__flp>
   1c2b2:	81 cf       	rjmp	.-254    	; 0x1c1b6 <realloc+0x92>
   1c2b4:	48 16       	cp	r4, r24
   1c2b6:	59 06       	cpc	r5, r25
   1c2b8:	08 f4       	brcc	.+2      	; 0x1c2bc <realloc+0x198>
   1c2ba:	2c 01       	movw	r4, r24
   1c2bc:	7d 01       	movw	r14, r26
   1c2be:	d3 01       	movw	r26, r6
   1c2c0:	9a cf       	rjmp	.-204    	; 0x1c1f6 <realloc+0xd2>
   1c2c2:	cb 01       	movw	r24, r22
   1c2c4:	0e 94 66 d9 	call	0x1b2cc	; 0x1b2cc <malloc>
   1c2c8:	7c 01       	movw	r14, r24
   1c2ca:	00 97       	sbiw	r24, 0x00	; 0
   1c2cc:	49 f0       	breq	.+18     	; 0x1c2e0 <realloc+0x1bc>
   1c2ce:	ae 01       	movw	r20, r28
   1c2d0:	b8 01       	movw	r22, r16
   1c2d2:	0e 94 78 e1 	call	0x1c2f0	; 0x1c2f0 <memcpy>
   1c2d6:	c8 01       	movw	r24, r16
   1c2d8:	0e 94 02 da 	call	0x1b404	; 0x1b404 <free>
   1c2dc:	87 01       	movw	r16, r14
   1c2de:	6b cf       	rjmp	.-298    	; 0x1c1b6 <realloc+0x92>
   1c2e0:	10 e0       	ldi	r17, 0x00	; 0
   1c2e2:	00 e0       	ldi	r16, 0x00	; 0
   1c2e4:	68 cf       	rjmp	.-304    	; 0x1c1b6 <realloc+0x92>

0001c2e6 <abort>:
abort():
   1c2e6:	81 e0       	ldi	r24, 0x01	; 1
   1c2e8:	90 e0       	ldi	r25, 0x00	; 0
   1c2ea:	f8 94       	cli
   1c2ec:	0c 94 1f e2 	jmp	0x1c43e	; 0x1c43e <_exit>

0001c2f0 <memcpy>:
memcpy():
   1c2f0:	fb 01       	movw	r30, r22
   1c2f2:	dc 01       	movw	r26, r24
   1c2f4:	02 c0       	rjmp	.+4      	; 0x1c2fa <memcpy+0xa>
   1c2f6:	01 90       	ld	r0, Z+
   1c2f8:	0d 92       	st	X+, r0
   1c2fa:	41 50       	subi	r20, 0x01	; 1
   1c2fc:	50 40       	sbci	r21, 0x00	; 0
   1c2fe:	d8 f7       	brcc	.-10     	; 0x1c2f6 <memcpy+0x6>
   1c300:	08 95       	ret

0001c302 <strcat>:
strcat():
   1c302:	fb 01       	movw	r30, r22
   1c304:	dc 01       	movw	r26, r24
   1c306:	0d 90       	ld	r0, X+
   1c308:	00 20       	and	r0, r0
   1c30a:	e9 f7       	brne	.-6      	; 0x1c306 <strcat+0x4>
   1c30c:	11 97       	sbiw	r26, 0x01	; 1
   1c30e:	01 90       	ld	r0, Z+
   1c310:	0d 92       	st	X+, r0
   1c312:	00 20       	and	r0, r0
   1c314:	e1 f7       	brne	.-8      	; 0x1c30e <strcat+0xc>
   1c316:	08 95       	ret

0001c318 <strchr>:
strchr():
   1c318:	fc 01       	movw	r30, r24
   1c31a:	81 91       	ld	r24, Z+
   1c31c:	86 17       	cp	r24, r22
   1c31e:	21 f0       	breq	.+8      	; 0x1c328 <strchr+0x10>
   1c320:	88 23       	and	r24, r24
   1c322:	d9 f7       	brne	.-10     	; 0x1c31a <strchr+0x2>
   1c324:	99 27       	eor	r25, r25
   1c326:	08 95       	ret
   1c328:	31 97       	sbiw	r30, 0x01	; 1
   1c32a:	cf 01       	movw	r24, r30
   1c32c:	08 95       	ret

0001c32e <strcmp>:
strcmp():
   1c32e:	fb 01       	movw	r30, r22
   1c330:	dc 01       	movw	r26, r24
   1c332:	8d 91       	ld	r24, X+
   1c334:	01 90       	ld	r0, Z+
   1c336:	80 19       	sub	r24, r0
   1c338:	01 10       	cpse	r0, r1
   1c33a:	d9 f3       	breq	.-10     	; 0x1c332 <strcmp+0x4>
   1c33c:	99 0b       	sbc	r25, r25
   1c33e:	08 95       	ret

0001c340 <strcpy>:
strcpy():
   1c340:	fb 01       	movw	r30, r22
   1c342:	dc 01       	movw	r26, r24
   1c344:	01 90       	ld	r0, Z+
   1c346:	0d 92       	st	X+, r0
   1c348:	00 20       	and	r0, r0
   1c34a:	e1 f7       	brne	.-8      	; 0x1c344 <strcpy+0x4>
   1c34c:	08 95       	ret

0001c34e <strncmp>:
strncmp():
   1c34e:	fb 01       	movw	r30, r22
   1c350:	dc 01       	movw	r26, r24
   1c352:	41 50       	subi	r20, 0x01	; 1
   1c354:	50 40       	sbci	r21, 0x00	; 0
   1c356:	30 f0       	brcs	.+12     	; 0x1c364 <strncmp+0x16>
   1c358:	8d 91       	ld	r24, X+
   1c35a:	01 90       	ld	r0, Z+
   1c35c:	80 19       	sub	r24, r0
   1c35e:	19 f4       	brne	.+6      	; 0x1c366 <strncmp+0x18>
   1c360:	00 20       	and	r0, r0
   1c362:	b9 f7       	brne	.-18     	; 0x1c352 <strncmp+0x4>
   1c364:	88 1b       	sub	r24, r24
   1c366:	99 0b       	sbc	r25, r25
   1c368:	08 95       	ret

0001c36a <strncpy>:
strncpy():
   1c36a:	fb 01       	movw	r30, r22
   1c36c:	dc 01       	movw	r26, r24
   1c36e:	41 50       	subi	r20, 0x01	; 1
   1c370:	50 40       	sbci	r21, 0x00	; 0
   1c372:	48 f0       	brcs	.+18     	; 0x1c386 <strncpy+0x1c>
   1c374:	01 90       	ld	r0, Z+
   1c376:	0d 92       	st	X+, r0
   1c378:	00 20       	and	r0, r0
   1c37a:	c9 f7       	brne	.-14     	; 0x1c36e <strncpy+0x4>
   1c37c:	01 c0       	rjmp	.+2      	; 0x1c380 <strncpy+0x16>
   1c37e:	1d 92       	st	X+, r1
   1c380:	41 50       	subi	r20, 0x01	; 1
   1c382:	50 40       	sbci	r21, 0x00	; 0
   1c384:	e0 f7       	brcc	.-8      	; 0x1c37e <strncpy+0x14>
   1c386:	08 95       	ret

0001c388 <puts>:
puts():
   1c388:	0f 93       	push	r16
   1c38a:	1f 93       	push	r17
   1c38c:	cf 93       	push	r28
   1c38e:	df 93       	push	r29
   1c390:	e0 91 55 14 	lds	r30, 0x1455	; 0x801455 <__iob+0x2>
   1c394:	f0 91 56 14 	lds	r31, 0x1456	; 0x801456 <__iob+0x3>
   1c398:	23 81       	ldd	r18, Z+3	; 0x03
   1c39a:	ec 01       	movw	r28, r24
   1c39c:	10 e0       	ldi	r17, 0x00	; 0
   1c39e:	00 e0       	ldi	r16, 0x00	; 0
   1c3a0:	21 fd       	sbrc	r18, 1
   1c3a2:	08 c0       	rjmp	.+16     	; 0x1c3b4 <puts+0x2c>
   1c3a4:	0f ef       	ldi	r16, 0xFF	; 255
   1c3a6:	1f ef       	ldi	r17, 0xFF	; 255
   1c3a8:	14 c0       	rjmp	.+40     	; 0x1c3d2 <puts+0x4a>
   1c3aa:	19 95       	eicall
   1c3ac:	89 2b       	or	r24, r25
   1c3ae:	11 f0       	breq	.+4      	; 0x1c3b4 <puts+0x2c>
   1c3b0:	0f ef       	ldi	r16, 0xFF	; 255
   1c3b2:	1f ef       	ldi	r17, 0xFF	; 255
   1c3b4:	89 91       	ld	r24, Y+
   1c3b6:	60 91 55 14 	lds	r22, 0x1455	; 0x801455 <__iob+0x2>
   1c3ba:	70 91 56 14 	lds	r23, 0x1456	; 0x801456 <__iob+0x3>
   1c3be:	db 01       	movw	r26, r22
   1c3c0:	18 96       	adiw	r26, 0x08	; 8
   1c3c2:	ed 91       	ld	r30, X+
   1c3c4:	fc 91       	ld	r31, X
   1c3c6:	81 11       	cpse	r24, r1
   1c3c8:	f0 cf       	rjmp	.-32     	; 0x1c3aa <puts+0x22>
   1c3ca:	8a e0       	ldi	r24, 0x0A	; 10
   1c3cc:	19 95       	eicall
   1c3ce:	89 2b       	or	r24, r25
   1c3d0:	49 f7       	brne	.-46     	; 0x1c3a4 <puts+0x1c>
   1c3d2:	c8 01       	movw	r24, r16
   1c3d4:	df 91       	pop	r29
   1c3d6:	cf 91       	pop	r28
   1c3d8:	1f 91       	pop	r17
   1c3da:	0f 91       	pop	r16
   1c3dc:	08 95       	ret

0001c3de <sprintf>:
sprintf():
   1c3de:	0f 93       	push	r16
   1c3e0:	1f 93       	push	r17
   1c3e2:	cf 93       	push	r28
   1c3e4:	df 93       	push	r29
   1c3e6:	cd b7       	in	r28, 0x3d	; 61
   1c3e8:	de b7       	in	r29, 0x3e	; 62
   1c3ea:	2e 97       	sbiw	r28, 0x0e	; 14
   1c3ec:	0f b6       	in	r0, 0x3f	; 63
   1c3ee:	f8 94       	cli
   1c3f0:	de bf       	out	0x3e, r29	; 62
   1c3f2:	0f be       	out	0x3f, r0	; 63
   1c3f4:	cd bf       	out	0x3d, r28	; 61
   1c3f6:	0e 89       	ldd	r16, Y+22	; 0x16
   1c3f8:	1f 89       	ldd	r17, Y+23	; 0x17
   1c3fa:	86 e0       	ldi	r24, 0x06	; 6
   1c3fc:	8c 83       	std	Y+4, r24	; 0x04
   1c3fe:	1a 83       	std	Y+2, r17	; 0x02
   1c400:	09 83       	std	Y+1, r16	; 0x01
   1c402:	8f ef       	ldi	r24, 0xFF	; 255
   1c404:	9f e7       	ldi	r25, 0x7F	; 127
   1c406:	9e 83       	std	Y+6, r25	; 0x06
   1c408:	8d 83       	std	Y+5, r24	; 0x05
   1c40a:	ae 01       	movw	r20, r28
   1c40c:	46 5e       	subi	r20, 0xE6	; 230
   1c40e:	5f 4f       	sbci	r21, 0xFF	; 255
   1c410:	68 8d       	ldd	r22, Y+24	; 0x18
   1c412:	79 8d       	ldd	r23, Y+25	; 0x19
   1c414:	ce 01       	movw	r24, r28
   1c416:	01 96       	adiw	r24, 0x01	; 1
   1c418:	0e 94 cf d5 	call	0x1ab9e	; 0x1ab9e <vfprintf>
   1c41c:	2f 81       	ldd	r18, Y+7	; 0x07
   1c41e:	38 85       	ldd	r19, Y+8	; 0x08
   1c420:	02 0f       	add	r16, r18
   1c422:	13 1f       	adc	r17, r19
   1c424:	f8 01       	movw	r30, r16
   1c426:	10 82       	st	Z, r1
   1c428:	2e 96       	adiw	r28, 0x0e	; 14
   1c42a:	0f b6       	in	r0, 0x3f	; 63
   1c42c:	f8 94       	cli
   1c42e:	de bf       	out	0x3e, r29	; 62
   1c430:	0f be       	out	0x3f, r0	; 63
   1c432:	cd bf       	out	0x3d, r28	; 61
   1c434:	df 91       	pop	r29
   1c436:	cf 91       	pop	r28
   1c438:	1f 91       	pop	r17
   1c43a:	0f 91       	pop	r16
   1c43c:	08 95       	ret

0001c43e <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   1c43e:	f8 94       	cli

0001c440 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   1c440:	ff cf       	rjmp	.-2      	; 0x1c440 <__stop_program>
